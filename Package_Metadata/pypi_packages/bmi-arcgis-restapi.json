{"info": {"author": "Caleb Mackey", "author_email": "calebma@bolton-menk.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: GIS"], "description": "# restapi\nThis is a Python API for working with ArcGIS REST API, ArcGIS Online, and Portal/ArcGIS Enterprise.  This package has been designed to work with [arcpy](https://pro.arcgis.com/en/pro-app/arcpy/get-started/what-is-arcpy-.htm) when available, or the included open source module [pyshp](https://pypi.org/project/pyshp/).  It will try to use arcpy if available for some data conversions, otherwise will use open source options. Also included is a subpackage for administering ArcGIS Server Sites.  This is updated often, so continue checking here for new functionality!\n\n### Why would you use this package?\nEsri currently provides the [ArcGIS API for Python](https://developers.arcgis.com/python/) which provides complete bindings to the ArcGIS REST API.  This package has less coverage of the REST API, but has many convience functions not available in the ArcGIS API for Python.  This package will also support older versions of Python (i.e. 2.7.x) whereas Esri's package only supports 3.x.\n\n\n## Installation\n`restapi` is supported on Python 2.7 and 3.x. It can be found on [Github](https://github.com/Bolton-and-Menk-GIS/restapi) and [PyPi](https://pypi.org/project/bmi-arcgis-restapi/). To install using pip:  \n````py\npip install bmi-arcgis-restapi\n````\n\nAfter installation, it should be available to use in Python:  \n````py\nimport restapi\n````\n\n## A note about `arcpy`\nBy default, `restapi` will import Esri's `arcpy` module if available. However, this module is not required to use this package.  `arcpy` is only used when available to write data to disk in esri specific formats (file geodatabase, etc) and working with `arcpy` Geometries.  When `arcpy` is not availalbe, the  [pyshp](https://pypi.org/project/pyshp/) module is used to write data (shapefile format only) and work with `shapefile.Shape` objects (geometry).  Also worth noting is that open source version is much faster than using `arcpy`.\n\nThat being said, there may be times when you want to force `restapi` to use the open source version, even when you have access to `arcpy`.  Some example scenarios being when you don't need to write any data in an Esri specific format, you want the script to execute very fast, or you are working in an environment where `arcpy` may not play very nicely ([Flask](https://palletsprojects.com/p/flask/), [Django](https://www.djangoproject.com/), etc.).  To force `restapi` to use the open source version, you can simply create an environment variable called `RESTAPI_USE_ARCPY` and set it to `FALSE` or `0`.  This variable will be checked before attempting to import `arcpy`.\n\nHere is an example on how to force open source at runtime:\n\n```py\nimport os\nos.environ['RESTAPI_USE_ARCPY'] = 'FALSE'\n\n# now import restapi\nimport restapi\n```\n\n\n\n\n## Connecting to an ArcGIS Server\nOne of the first things you might do is to connect to a services directory (or catalog):\n\n\nConnect to external services\n\n````py\n# connect NOAA ArcGIS Server Instance\nrest_url = 'https://gis.ngdc.noaa.gov/arcgis/rest/services'\n\n# no authentication is required, so no username and password are supplied\nags = restapi.ArcServer(rest_url)\n\n# get folder and service properties\nprint('Number of folders: {}'.format(len(ags.folders)))\nprint('Number of services: {}'.format(len(ags.services)))\n\n# walk thru directories\nfor root, folders, services in ags.walk():\n    print(root)\n    print(folders)\n    print(services)\n    print('\\n')\n````\n\nConnecting to a map service from within the ArcServer object\n````py\n# access \"ahps_gauges\" service (stream gauges)\ngauges = ags.getService('ahps_gauges')\nprint(gauges.url) #print(MapService url\n\n# print(layer names\nprint(gauges.list_layers())\n\n# access \"observed river stages\" layer\nlyr = gauges.layer('observed_river_stages') #not case sensitive, also supports wildcard search (*)\n\n# list fields from col layer\nprint(lyr.list_fields())\n````\n\nYou can also query the layer and get back arcpy.da Cursor like access\n\n````py\n# run search cursor for gauges in California\n# (maximimum limit may be 1000 records, can use get_all=True to exceed transfer limit)\n# can filter fields by putting a field list, can use actual shape field name to get\n#  geometry or use the ArcGIS-like token \"SHAPE@\"\n# all fields are gathered by the default (\"*\") and fields can be filtered by providing a list\nquery = \"state = 'CA'\"\nfor row in lyr.cursor(where=query, fields=['SHAPE@', u'gaugelid', u'status', u'location']):\n    print(row)\n\n# Note: can also do this from the MapService level like this:\n# cursor = gauges.cursor('observed_river_stages', where=query)\n````\n\nThe layer can also be exported to a shapefile or KMZ\n\n````py\n# export Nebraska \"College/University\" layer to feature class\n# make scratch folder first\nfolder = os.path.join(os.environ['USERPROFILE'], r'Desktop\\restapi_test_data')\nif not os.path.exists(folder):\n    os.makedirs(folder)\n\n# export layer to shapefile (can also call from Map Service)\noutput = os.path.join(folder, 'California_Stream_Gauges.shp')\nlyr.layer_to_fc(output, where=query, sr=102100) #override spatial reference with web mercator\n\n# export to KMZ\nkmz = output.replace('.shp', '.kmz')\nlyr.layer_to_kmz(kmz, where=query)\n````\n\nClipping a layer is also easy\n\n````py\n# clip lyr by polygon (Sacramento area)\nesri_json = {\"rings\":[[[-121.5,38.6],[-121.4,38.6],\n                      [-121.3,38.6],[-121.2,38.6],\n                      [-121.2,38.3],[-121.5,38.3],\n                      [-121.5,38.6]]],\n            \"spatialReference\":\n                {\"wkid\":4326,\"latestWkid\":4326}}\n\n# clip by polygon and filter fields (can use polygon shapefile or feature class as well)\nsac = os.path.join(folder, 'Sacramento_gauges.shp')\nlyr.clip(esri_json, sac, fields=['gaugelid', 'location'])\n````\n\nYou can also connect to a MapService directly\n\n```py\nurl = 'http://gis.srh.noaa.gov/arcgis/rest/services/ahps_gauges/MapServer'\ngauges = restapi.MapService(url)\n```\n\nWorking with Feature Layers\n---------------\n\n### query examples\n```py\n\n# create FeatureLayer\nurl = 'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Hazards_Uptown_Charlotte/FeatureServer/0'\nhazards = restapi.FeatureLayer(url)\n\n# QUERY EXAMPLES\n\n# query all features, to fetch all regardless of `maxRecordCount` \n# use `exceed_limit=true` keyword arg\nfs = hazards.query()\nprint('All Hazards Count: {}'.format(fs.count))\n\n# query features that are \"High\" Priority\nhigh_priority = hazards.query(where=\"Priority = 'High'\")\nprint('High Priority Hazards count: {}'.format(high_priority.count))\n```\n\n### download features\n```py\n# download features - choosing a geodatbase output will bring over domain \n# info (when you have access to arcpy), whereas a shapefile output will \n# just bring over the domain values\nshp = os.path.join(test_data_folder, 'hazards.shp')\n    \n# export layer to shapefile in WGS 1984 projection\nhazards.export_layer(shp, outSR=4326)\n```\n\n## feature editing\n\n### add features using `FeatureLayer.addFeatures()`\n```py\n# add new records via FeatureLayer.addFeatures()\ndesc = \"restapi edit test\"\nnew_ft = {\n    \"attributes\": {\n        \"HazardType\": \"Flooding\",\n        \"Description\": desc,\n        \"SpecialInstructions\": None,\n        \"Status\": \"Active\",\n        \"GlobalID\": \"416f04e5-0ae9-4444-8d0c-d4e9b44e7f87\",\n        \"Priority\": \"Moderate\"\n    },\n    \"geometry\": create_random_coordinates()\n}\n\n# add new feature\nresults = hazards.addFeatures([new_ft])\nprint(results)\n```\n### using `restapi` cursors\n\n`restapi` also supports cursors similar to what you get when using `arcpy`.  However, these work directly with the REST API and JSON features while also supporting `arcpy` and `shapefile` geometry types.  See the below example on how to use an `insertCursor` to add new records:\n\n```py\n# add 3 new features using an insert cursor \n# using this in a \"with\" statement will call applyEdits on __exit__\nfields = [\"SHAPE@\", 'HazardType', \"Description\", \"Priority\"]\nwith hazards.insertCursor(fields) as irows:\n    for i in range(3):\n        irows.insertRow([create_random_coordinates(), \"Wire Down\", desc, \"High\"])\n```\n\nrecords can be updated with an `updateCursor` and a where clause.  Note that the `OBJECTID` field must be included in the query to indicate which records will be updated.  The `OID@` field token can be used to retreive the `objectIdFieldName`:\n\n```py\n# now update records with updateCursor\nwhereClause = \"Description = '{}'\".format(desc)\n\nwith hazards.updateCursor([\"Priority\", \"OID@\"], where=whereClause) as rows:\n    for row in rows:\n        row[0] = \"Low\"\n        rows.updateRow(row)\n```\n\nDeleting features can be done with a simple `where` clause:\n\n```py\n# now delete the records we added\nhazards.deleteFeatures(where=whereClause)\n```\n\nWe can also add attachments\n````py\n# add attachment, get new OID from add results\noid = result.addResults[0]  # must get an OID to add attachment to\n\n# download python image online and add it to the featuer we just added above\nurl = 'http://www.cis.upenn.edu/~lhuang3/cse399-python/images/pslytherin.png'\nim = urllib.urlopen(url).read()\ntmp = os.path.join(os.path.dirname(sys.argv[0]), 'python.png')\nwith open(tmp, 'wb') as f:\n    f.write(im)\n\n# add attachment\nincidents.addAttachment(oid, tmp)\nos.remove(tmp)\n\n# get attachment info from service and download it\nattachments = incidents.attachments(oid)\n\nfor attachment in attachments:\n    print(attachment)\n    print attachment.contentType, attachment.size)\n    attachment.download(folder) # folder is a user specified output directory\n````\nUpdate feature and delete features\n\n````py\n# update the feature we just added\nadds[0]['attributes']['address'] = 'Address Not Available'\nadds[0]['attributes']['objectid'] = oid\nincidents.updateFeatures(adds)\n\n# now delete feature\nincidents.deleteFeatures(oid)\n````\n\nOffline capabilities (Sync)\n\n````py\n# if sync were enabled, we could create a replica like this:\n# can pass in layer ID (0) or name ('incidents', not case sensative)\nreplica = fs.createReplica(0, 'test_replica', geometry=adds[0]['geometry'], geometryType='esriGeometryPoint', inSR=4326)\n\n# now export the replica object to file geodatabase (if arcpy access) or shapefile with hyperlinks (if open source)\nrestapi.exportReplica(replica, folder)\n````\n\nWorking with Image Services\n---------------------------\n\n````py\nurl = 'http://pca-gis02.pca.state.mn.us/arcgis/rest/services/Elevation/DEM_1m/ImageServer'\nim = restapi.ImageService(url)\n\n# clip DEM\ngeometry = {\"rings\":[[\n                [240006.00808044084, 4954874.19629429],\n                [240157.31010183255, 4954868.8053006204],\n                [240154.85966611796, 4954800.0316874133],\n                [240003.55764305394, 4954805.4226145679],\n                [240006.00808044084, 4954874.19629429]]],\n            \"spatialReference\":{\"wkid\":26915,\"latestWkid\":26915}}\n\ntif = os.path.join(folder, 'dem.tif')\nim.clip(geometry, tif)\n\n# test point identify\nx, y = 400994.780878, 157878.398217\nelevation = im.pointIdentify(x=x, y=y, sr=103793)\nprint(elevation)\n````\n\nGeocoding\n---------\n\n````py\n# hennepin county, MN geocoder\nhenn = 'http://gis.hennepin.us/arcgis/rest/services/Locators/HC_COMPOSITE/GeocodeServer'\ngeocoder = restapi.Geocoder(henn)\n# find target field, use the SingleLine address field by default\ngeoResult = geocoder.findAddressCandidates('353 N 5th St, Minneapolis, MN 55403')\n\n# export results to shapefile\nprint('found {} candidates'.format(len(geoResult))\ngeocoder.exportResults(geoResult, os.path.join(folder, 'target_field.shp'))\n\n# Esri geocoder\nesri_url = 'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer'\nesri_geocoder = restapi.Geocoder(esri_url)\n\n# find candidates using key word arguments (**kwargs) to fill in locator fields, no single line option\ncandidates = esri_geocoder.findAddressCandidates(Address='380 New York Street', City='Redlands', State='CA', Zip='92373')\nprint('Number of address candidates: {}'.format(len(candidates)))\nfor candidate in candidates:\n    print(candidate.location)\n\n# export results to shapefile\nout_shp = os.path.join(folder, 'Esri_headquarters.shp')\ngeocoder.exportResults(candidates, out_shp)\n````\n\nGeoprocessing Services\n----------------------\n\n````py\n# test esri's drive time analysis GP Task\ngp_url = 'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons'\ngp = restapi.GPTask(gp_url)\n\n# get a list of gp parameters (so we know what to pass in as kwargs)\nprint('\\nGP Task \"{}\" parameters:\\n'.format(gp.name)\nfor p in gp.parameters:\n    print('\\t', p.name, p.dataType)\n\npoint = {\"geometryType\":\"esriGeometryPoint\",\n         \"features\":[\n             {\"geometry\":{\"x\":-10603050.16225853,\"y\":4715351.1473399615,\n                          \"spatialReference\":{\"wkid\":102100,\"latestWkid\":3857}}}],\n         \"sr\":{\"wkid\":102100,\"latestWkid\":3857}}\n\n# run task, passing in gp parameters as keyword arguments (**kwargs)\ngp_res = gp.run(Input_Location=str(point), Drive_Times = '1 2 3', inSR = 102100)\n\n# returns a GPResult() object, can get at the first result by indexing (usually only one result)\n# can test if there are results by __nonzero__()\nif gp_res:\n    result = gp_res.results[0]\n    \n    # this returned a GPFeatureRecordSetLayer as an outputParameter, so we can export this to polygons\n    print('\\nOutput Result: \"{}\", data type: {}\\n'.format(result.paramName, result.dataType))\n\n    # now export the result value to fc (use the value property of the GPResult object from run())\n    drive_times = os.path.join(folder, 'drive_times.shp')\n    restapi.exportFeatureSet(drive_times, gp_res.value)\n````\n\nA note about input Geometries\n-----------------------------\n\nrestapi will try to use arcpy first if you have it, otherwise will defer to open source.  Both\nsupport the reading of shapefiles to return the first feature back as a restapi.Geometry object\n\nIt also supports arcpy Geometries and shapefile.Shape() objects\n````py\n>>> shp = r'C:\\TEMP\\Polygons.shp' # a shapefile on disk somewhere\n>>> geom = restapi.Geometry(shp)\n>>> print(geom.envelope())\n-121.5,38.3000000007,-121.199999999,38.6000000015\n````\n\nToken Based Security\n--------------------\n\nrestapi also supports secured services.  This is also session based, so if you sign in once to an\nArcGIS Server Resource (on the same ArcGIS Site), the token will automatically persist via the \nIdentityManager().\n\nThere are 3 ways to authticate:\n\n````py\n# **kwargs for all accessing all ArcGIS resources are\n# usr   -- username\n# pw    -- password\n# token -- token (as string or restapi.Token object)\n# proxy -- url to proxy\n\n# secured url\nsecured_url = 'http://some-domain.com/arcgis/rest/services'\n\n# 1. username and password\nags = restapi.ArcServer(url, 'username', 'password')  # token is generated and persists\n\n# 2. a token that has already been requested\nags = restapi.ArcServer(url, token=token)  # uses a token that is already active\n\n# 3. via a proxy (assuming using the standard esri proxy)\n#   this will forward all subsequent requests through the proxy\nags = restapi.ArcServer(url, proxy='http://some-domain.com/proxy.ashx')\n````\n\nYou can even just generate a token and let the IdentityManager handle the rest.  It is even smart enough to handle multiple tokens for different sites:\n\n```py\n# login to instance 1\nusr = 'username'\npw = 'password'\n\n# urls to two different ArcGIS Server sites\nurl_1 = 'http://some-domain.com/arcserver1/rest/services'\nurl_2 = 'http://domain2.com/arcgis/rest/services'\n\n# generate tokens\ntok1 = restapi.generate_token(url_1, usr, pw)\ntok2 = restapi.generate_token(url_2, usr, pw)\n\n# now we should be able to access both ArcGIS Server sites via the IdentityManager\narcserver1 = restapi.ArcServer(url_1) # tok1 is automatically passed in and handled\narcserver2 = restapi.ArcServer(url_2) # tok2 is used here\n```\n\nThe admin Subpackage\n--------------------\n\nrestapi also contains an administrative subpackage (warning: most functionality has not been tested!).  You can import this module like this:\n\n```py\nfrom restapi import admin\n```\n\n\n### Connecting to a Portal\n```py\nurl = 'https://domain.gis.com/portal/home'\nportal = restapi.admin.Portal(url, 'username', 'password')\n\n# get servers\nservers = portal.servers\n\n# stop sample cities service\nserver = servers[0]\n\nservice = server.service('SampleWorldCities.MapServer')\nservice.stop()\n\n```\n\nTo connect to an ArcGIS Server instance that you would like to administer you can do the following:\n\n```py\n# test with your own servers\nurl = 'localhost:6080/arcgis/admin/services' #server url\nusr = 'username'\npw = 'password'\n\n# connect to ArcGIS Server instance\narcserver = admin.ArcServerAdmin(url, usr, pw)\n```\n\nTo list services within a folder, you can do this:\n\n```py\nfolder = arcserver.folder('SomeFolder')  # supply name of folder as argument\nfor service in folder.iter_services():\n    print(service.serviceName, service.configuredState\n\n    # can stop a service like this\n    # service.stop()\n\n    # or start like this\n    # service.start()\n\nprint('\\n' * 3)\n\n# show all services and configured state (use iter_services to return restapi.admin.Service() object!)\nfor service in arcserver.iter_services():\n    print(service.serviceName, service.configuredState)\n```\nSecurity\n--------\n\nYou can set security at the folder or service level.  By default, the addPermssion() method used by Folder and Service objects will make the service unavailable to the general public and only those in the administrator role can view the services.  This is done by setting the 'esriEveryone' principal \"isAllowed\" value to false.  You can also assign permissions based on roles.\n\n```py\narcserver.addPermission('SomeFolder')  # by default it will make private True \n\n# now make it publically avaiable (unsecure)\narcserver.addPermission('SomeFolder', private=False)\n\n# secure based on role, in this case will not allow assessor group to see utility data\n#   assessor is name of assessor group role, Watermain is folder to secure\narcserver.addPermission('Watermain', 'assessor', False)  \n\n# note, this can also be done at the folder level:\nfolder = arcserver.folder('Watermain')\nfolder.addPermission('assessor', False)\n```\n\nStopping and Starting Services\n------------------------------\n\nServices can easily be started and stopped with this module.  This can be done from the ArcServerAdmin() or Folder() object:\n\n```py\n# stop all services in a folder\narcserver.stopServices(folderName='SomeFolder') # this can take a few minutes\n\n# look thru the folder to check the configured states, should be stopped\nfor service in arcserver.folder('SomeFolder').iter_services():\n    print(service.serviceName, service.configuredState)\n\n# now restart\narcserver.startServices(folderName='SomeFolder') # this can take a few minutes\n\n# look thru folder, services should be started\nfor service in arcserver.folder('SomeFolder').iter_services():\n    print(service.serviceName, service.configuredState)\n    \n# to do this from a folder, simply get a folder object back\nfolder = arcserver.folder('SomeFolder')\nfolder.stopServices()\nfor service in folder.iter_services():\n    print(service.serviceName, service.configuredState)\n```\n\nUpdating Service Properties\n---------------------------\n\nThe admin package can be used to update the service definitions via JSON.  By default, the Service.edit() method will pass in the original service definition as JSON so no changes are made if no arguments are supplied.  The first argument is the service config as JSON, but this method also supports keyword arguments to update single properties (**kwargs).  These represent keys of a the dictionary in Python.\n\n```py\n# connect to an individual service (by wildcard) - do not need to include full name, just\n# enough of the name to make it a unique name query\nservice = arcserver.service('SampleWorldCities') #provide name of service here\n\n# get original service description\ndescription = service.description\n\n# now edit the description only by using description kwarg (must match key exactly to update)\nservice.edit(description='This is an updated service description')\n\n# edit description again to set it back to the original description\nservice.edit(description=description)\n```\n\nThere are also some helper methods that aren't available out of the box from the ArcGIS REST API such as enabling or disabling extensions:\n\n```py\n# disable Feature Access and kml downloads\nservice.disableExtensions(['FeatureServer', 'KmlServer'])\n\n# you can also list enabled/disabled services\nprint(service.enabledExtensions)\n# [u'KmlServer', u'WFSServer', u'FeatureServer']\n\nservice.disabledExtensions\n# [u'NAServer', u'MobileServer', u'SchematicsServer', u'WCSServer', u'WMSServer']\n\n# Edit service extension properites\n# get an extension and view its properties\nfs_extension = service.getExtension('FeatureServer')\n\nprint(fs_extension) # will print as pretty json\n```\n\nFor Service objects, all properties are represented as pretty json.  Below is what the FeatureService Extension looks like:\n\n```py\n{\n  \"allowedUploadFileTypes\": \"\", \n  \"capabilities\": \"Query,Create,Update,Delete,Uploads,Editing\", \n  \"enabled\": \"true\", \n  \"maxUploadFileSize\": 0, \n  \"properties\": {\n    \"allowGeometryUpdates\": \"true\", \n    \"allowOthersToDelete\": \"false\", \n    \"allowOthersToQuery\": \"true\", \n    \"allowOthersToUpdate\": \"false\", \n    \"allowTrueCurvesUpdates\": \"false\", \n    \"creatorPresent\": \"false\", \n    \"dataInGdb\": \"true\", \n    \"datasetInspected\": \"true\", \n    \"editorTrackingRespectsDayLightSavingTime\": \"false\", \n    \"editorTrackingTimeInUTC\": \"true\", \n    \"editorTrackingTimeZoneID\": \"UTC\", \n    \"enableOwnershipBasedAccessControl\": \"false\", \n    \"enableZDefaults\": \"false\", \n    \"maxRecordCount\": \"1000\", \n    \"realm\": \"\", \n    \"syncEnabled\": \"false\", \n    \"syncVersionCreationRule\": \"versionPerDownloadedMap\", \n    \"versionedData\": \"false\", \n    \"xssPreventionEnabled\": \"true\", \n    \"zDefaultValue\": \"0\"\n  }, \n  \"typeName\": \"FeatureServer\"\n}\n```\n\nSetting properties for extensions is also easy:\n\n```py\n# set properties for an extension using helper method, use **kwargs for setting capabilities\nservice.setExtensionProperties('FeatureServer', capabilities='Query,Update,Delete,Editing')\n\n# verify changes were made\nprint(fs_extension.capabilities\n# 'Query,Update,Delete,Editing'\n\n# alternatively, you can edit the service json directly and call the edit method\n# change it back to original settings\nfs_extension.capabilities = 'Query,Create,Update,Delete,Uploads,Editing'\nservice.edit()\n\n# verify one more time...\nprint(fs_extension.capabilities)\n# 'Query,Create,Update,Delete,Uploads,Editing'\n```\n\nAccess the Data Store\n---------------------\n\nYou can iterate through the data store items easily to read/update/add items:\n\n```py\n# connect to the server's data store\nds = arcserver.dataStore\n\n# iterate through all items of data store\nfor item in ds:\n    print(item.type, item.path\n    # if it is an enterprise database connection, you can get the connection string like this\n    if item.type == 'egdb':\n        print(item.info.connectionString)\n    # else if a folder, print(server path\n    elif item.type == 'folder':\n        print(item.info.path)\n    print('\\n')\n```\n\nUser and Role Stores\n--------------------\n\nWhen viewing usernames/roles you can limit the number of names returned using the \"maxCount\" keyword argument.  To view and make changes to Role Store:\n\n```py\n# connect to role store\nrs = arcserver.roleStore\n\n# print roles\nfor role in rs:\n    print(role)\n\n# find users within roles\nfor role in rs:\n    print(role, 'Users: ', rs.getUsersWithinRole(role))\n\n# add a user to role\nrs.addUsersToRole('Administrators', 'your-domain\\\\someuser')\n\n# remove user from role\nrs.removeUsersFromRole('Administrators', 'your-domain\\\\someuser')\n\n# remove an entire role\nrs.removeRole('transportation')\n```\n\nTo view and make changes to the User Store:\n\n```py\n# connect to user store\nus = arcserver.userStore\n\n# get number of users\nprint(len(us)\n\n# iterate through first 10 users\nfor user in us.searchUsers(maxCount=10):\n    print(user)\n    \n# add new user\nus.addUser('your-domain\\\\someuser', 'password')\n\n# assign roles by using comma separated list of role names\nus.assignRoles('your-domain\\\\someuser', 'Administrators,Publishers')\n\n# get privileges from user\nus.getPrivilegeForUser('your-domain\\\\someuser')\n\n# remove roles from user \nus.removeRoles('your-domain\\\\someuser', 'Administrators,Publishers')\n```\n\nLog Files\n---------\n\nYou can easily query server log files like this:\n\n```py\nimport restapi\nimport datetime\n\n# query log files (within last 3 days), need to convert to milliseconds\nthreeDaysAgo = restapi.date_to_mil(datetime.datetime.now() - relativedelta(days=3))\nfor log in arcserver.queryLogs(endTime=threeDaysAgo, pageSize=25):\n    print(log.time\n    for message in log:\n        print(message)\n    print('\\n')\n```\n\nA note about verbosity\n----------------------\n\nWhen using the admin subpackage you will likely be making changes to services/permissions etc.  On operations that change a configuration, the @passthrough decorator will report back if the operation is successful and return results like this:\n\n```py\n{u'status': u'SUCCESS'}\n```\n\nThe printing of these messages can be shut off by changing the global \"VERBOSE\" variable so these messages are not reported.  This can be disabled like this:\n\n```py\nadmin.VERBOSE = False \n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Bolton-and-Menk-GIS/restapi", "keywords": "", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "bmi-arcgis-restapi", "package_url": "https://pypi.org/project/bmi-arcgis-restapi/", "platform": "", "project_url": "https://pypi.org/project/bmi-arcgis-restapi/", "project_urls": {"Homepage": "https://github.com/Bolton-and-Menk-GIS/restapi"}, "release_url": "https://pypi.org/project/bmi-arcgis-restapi/1.0.4/", "requires_dist": null, "requires_python": "", "summary": "Package for working with ArcGIS REST API", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>restapi</h1>\n<p>This is a Python API for working with ArcGIS REST API, ArcGIS Online, and Portal/ArcGIS Enterprise.  This package has been designed to work with <a href=\"https://pro.arcgis.com/en/pro-app/arcpy/get-started/what-is-arcpy-.htm\" rel=\"nofollow\">arcpy</a> when available, or the included open source module <a href=\"https://pypi.org/project/pyshp/\" rel=\"nofollow\">pyshp</a>.  It will try to use arcpy if available for some data conversions, otherwise will use open source options. Also included is a subpackage for administering ArcGIS Server Sites.  This is updated often, so continue checking here for new functionality!</p>\n<h3>Why would you use this package?</h3>\n<p>Esri currently provides the <a href=\"https://developers.arcgis.com/python/\" rel=\"nofollow\">ArcGIS API for Python</a> which provides complete bindings to the ArcGIS REST API.  This package has less coverage of the REST API, but has many convience functions not available in the ArcGIS API for Python.  This package will also support older versions of Python (i.e. 2.7.x) whereas Esri's package only supports 3.x.</p>\n<h2>Installation</h2>\n<p><code>restapi</code> is supported on Python 2.7 and 3.x. It can be found on <a href=\"https://github.com/Bolton-and-Menk-GIS/restapi\" rel=\"nofollow\">Github</a> and <a href=\"https://pypi.org/project/bmi-arcgis-restapi/\" rel=\"nofollow\">PyPi</a>. To install using pip:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">bmi</span><span class=\"o\">-</span><span class=\"n\">arcgis</span><span class=\"o\">-</span><span class=\"n\">restapi</span>\n</pre>\n<p>After installation, it should be available to use in Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">restapi</span>\n</pre>\n<h2>A note about <code>arcpy</code></h2>\n<p>By default, <code>restapi</code> will import Esri's <code>arcpy</code> module if available. However, this module is not required to use this package.  <code>arcpy</code> is only used when available to write data to disk in esri specific formats (file geodatabase, etc) and working with <code>arcpy</code> Geometries.  When <code>arcpy</code> is not availalbe, the  <a href=\"https://pypi.org/project/pyshp/\" rel=\"nofollow\">pyshp</a> module is used to write data (shapefile format only) and work with <code>shapefile.Shape</code> objects (geometry).  Also worth noting is that open source version is much faster than using <code>arcpy</code>.</p>\n<p>That being said, there may be times when you want to force <code>restapi</code> to use the open source version, even when you have access to <code>arcpy</code>.  Some example scenarios being when you don't need to write any data in an Esri specific format, you want the script to execute very fast, or you are working in an environment where <code>arcpy</code> may not play very nicely (<a href=\"https://palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a>, <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a>, etc.).  To force <code>restapi</code> to use the open source version, you can simply create an environment variable called <code>RESTAPI_USE_ARCPY</code> and set it to <code>FALSE</code> or <code>0</code>.  This variable will be checked before attempting to import <code>arcpy</code>.</p>\n<p>Here is an example on how to force open source at runtime:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'RESTAPI_USE_ARCPY'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'FALSE'</span>\n\n<span class=\"c1\"># now import restapi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">restapi</span>\n</pre>\n<h2>Connecting to an ArcGIS Server</h2>\n<p>One of the first things you might do is to connect to a services directory (or catalog):</p>\n<p>Connect to external services</p>\n<pre><span class=\"c1\"># connect NOAA ArcGIS Server Instance</span>\n<span class=\"n\">rest_url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://gis.ngdc.noaa.gov/arcgis/rest/services'</span>\n\n<span class=\"c1\"># no authentication is required, so no username and password are supplied</span>\n<span class=\"n\">ags</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">rest_url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get folder and service properties</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of folders: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">folders</span><span class=\"p\">)))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of services: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">services</span><span class=\"p\">)))</span>\n\n<span class=\"c1\"># walk thru directories</span>\n<span class=\"k\">for</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">folders</span><span class=\"p\">,</span> <span class=\"n\">services</span> <span class=\"ow\">in</span> <span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">folders</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">services</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<p>Connecting to a map service from within the ArcServer object</p>\n<pre><span class=\"c1\"># access \"ahps_gauges\" service (stream gauges)</span>\n<span class=\"n\">gauges</span> <span class=\"o\">=</span> <span class=\"n\">ags</span><span class=\"o\">.</span><span class=\"n\">getService</span><span class=\"p\">(</span><span class=\"s1\">'ahps_gauges'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gauges</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span> <span class=\"c1\">#print(MapService url</span>\n\n<span class=\"c1\"># print(layer names</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gauges</span><span class=\"o\">.</span><span class=\"n\">list_layers</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># access \"observed river stages\" layer</span>\n<span class=\"n\">lyr</span> <span class=\"o\">=</span> <span class=\"n\">gauges</span><span class=\"o\">.</span><span class=\"n\">layer</span><span class=\"p\">(</span><span class=\"s1\">'observed_river_stages'</span><span class=\"p\">)</span> <span class=\"c1\">#not case sensitive, also supports wildcard search (*)</span>\n\n<span class=\"c1\"># list fields from col layer</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">list_fields</span><span class=\"p\">())</span>\n</pre>\n<p>You can also query the layer and get back arcpy.da Cursor like access</p>\n<pre><span class=\"c1\"># run search cursor for gauges in California</span>\n<span class=\"c1\"># (maximimum limit may be 1000 records, can use get_all=True to exceed transfer limit)</span>\n<span class=\"c1\"># can filter fields by putting a field list, can use actual shape field name to get</span>\n<span class=\"c1\">#  geometry or use the ArcGIS-like token \"SHAPE@\"</span>\n<span class=\"c1\"># all fields are gathered by the default (\"*\") and fields can be filtered by providing a list</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s2\">\"state = 'CA'\"</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'SHAPE@'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'gaugelid'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'status'</span><span class=\"p\">,</span> <span class=\"sa\">u</span><span class=\"s1\">'location'</span><span class=\"p\">]):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Note: can also do this from the MapService level like this:</span>\n<span class=\"c1\"># cursor = gauges.cursor('observed_river_stages', where=query)</span>\n</pre>\n<p>The layer can also be exported to a shapefile or KMZ</p>\n<pre><span class=\"c1\"># export Nebraska \"College/University\" layer to feature class</span>\n<span class=\"c1\"># make scratch folder first</span>\n<span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'USERPROFILE'</span><span class=\"p\">],</span> <span class=\"sa\">r</span><span class=\"s1\">'Desktop\\restapi_test_data'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">):</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># export layer to shapefile (can also call from Map Service)</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'California_Stream_Gauges.shp'</span><span class=\"p\">)</span>\n<span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">layer_to_fc</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">,</span> <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"o\">=</span><span class=\"mi\">102100</span><span class=\"p\">)</span> <span class=\"c1\">#override spatial reference with web mercator</span>\n\n<span class=\"c1\"># export to KMZ</span>\n<span class=\"n\">kmz</span> <span class=\"o\">=</span> <span class=\"n\">output</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'.shp'</span><span class=\"p\">,</span> <span class=\"s1\">'.kmz'</span><span class=\"p\">)</span>\n<span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">layer_to_kmz</span><span class=\"p\">(</span><span class=\"n\">kmz</span><span class=\"p\">,</span> <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n<p>Clipping a layer is also easy</p>\n<pre><span class=\"c1\"># clip lyr by polygon (Sacramento area)</span>\n<span class=\"n\">esri_json</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"rings\"</span><span class=\"p\">:[[[</span><span class=\"o\">-</span><span class=\"mf\">121.5</span><span class=\"p\">,</span><span class=\"mf\">38.6</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mf\">121.4</span><span class=\"p\">,</span><span class=\"mf\">38.6</span><span class=\"p\">],</span>\n                      <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">121.3</span><span class=\"p\">,</span><span class=\"mf\">38.6</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mf\">121.2</span><span class=\"p\">,</span><span class=\"mf\">38.6</span><span class=\"p\">],</span>\n                      <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">121.2</span><span class=\"p\">,</span><span class=\"mf\">38.3</span><span class=\"p\">],[</span><span class=\"o\">-</span><span class=\"mf\">121.5</span><span class=\"p\">,</span><span class=\"mf\">38.3</span><span class=\"p\">],</span>\n                      <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">121.5</span><span class=\"p\">,</span><span class=\"mf\">38.6</span><span class=\"p\">]]],</span>\n            <span class=\"s2\">\"spatialReference\"</span><span class=\"p\">:</span>\n                <span class=\"p\">{</span><span class=\"s2\">\"wkid\"</span><span class=\"p\">:</span><span class=\"mi\">4326</span><span class=\"p\">,</span><span class=\"s2\">\"latestWkid\"</span><span class=\"p\">:</span><span class=\"mi\">4326</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># clip by polygon and filter fields (can use polygon shapefile or feature class as well)</span>\n<span class=\"n\">sac</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'Sacramento_gauges.shp'</span><span class=\"p\">)</span>\n<span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">esri_json</span><span class=\"p\">,</span> <span class=\"n\">sac</span><span class=\"p\">,</span> <span class=\"n\">fields</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'gaugelid'</span><span class=\"p\">,</span> <span class=\"s1\">'location'</span><span class=\"p\">])</span>\n</pre>\n<p>You can also connect to a MapService directly</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://gis.srh.noaa.gov/arcgis/rest/services/ahps_gauges/MapServer'</span>\n<span class=\"n\">gauges</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">MapService</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<h2>Working with Feature Layers</h2>\n<h3>query examples</h3>\n<pre><span class=\"c1\"># create FeatureLayer</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://services.arcgis.com/V6ZHFr6zdgNZuVG0/arcgis/rest/services/Hazards_Uptown_Charlotte/FeatureServer/0'</span>\n<span class=\"n\">hazards</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">FeatureLayer</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># QUERY EXAMPLES</span>\n\n<span class=\"c1\"># query all features, to fetch all regardless of `maxRecordCount` </span>\n<span class=\"c1\"># use `exceed_limit=true` keyword arg</span>\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'All Hazards Count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># query features that are \"High\" Priority</span>\n<span class=\"n\">high_priority</span> <span class=\"o\">=</span> <span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"s2\">\"Priority = 'High'\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'High Priority Hazards count: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">high_priority</span><span class=\"o\">.</span><span class=\"n\">count</span><span class=\"p\">))</span>\n</pre>\n<h3>download features</h3>\n<pre><span class=\"c1\"># download features - choosing a geodatbase output will bring over domain </span>\n<span class=\"c1\"># info (when you have access to arcpy), whereas a shapefile output will </span>\n<span class=\"c1\"># just bring over the domain values</span>\n<span class=\"n\">shp</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">test_data_folder</span><span class=\"p\">,</span> <span class=\"s1\">'hazards.shp'</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># export layer to shapefile in WGS 1984 projection</span>\n<span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">export_layer</span><span class=\"p\">(</span><span class=\"n\">shp</span><span class=\"p\">,</span> <span class=\"n\">outSR</span><span class=\"o\">=</span><span class=\"mi\">4326</span><span class=\"p\">)</span>\n</pre>\n<h2>feature editing</h2>\n<h3>add features using <code>FeatureLayer.addFeatures()</code></h3>\n<pre><span class=\"c1\"># add new records via FeatureLayer.addFeatures()</span>\n<span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"s2\">\"restapi edit test\"</span>\n<span class=\"n\">new_ft</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"attributes\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"HazardType\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Flooding\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Description\"</span><span class=\"p\">:</span> <span class=\"n\">desc</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"SpecialInstructions\"</span><span class=\"p\">:</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Status\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Active\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"GlobalID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"416f04e5-0ae9-4444-8d0c-d4e9b44e7f87\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"Priority\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Moderate\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"s2\">\"geometry\"</span><span class=\"p\">:</span> <span class=\"n\">create_random_coordinates</span><span class=\"p\">()</span>\n<span class=\"p\">}</span>\n\n<span class=\"c1\"># add new feature</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">addFeatures</span><span class=\"p\">([</span><span class=\"n\">new_ft</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span>\n</pre>\n<h3>using <code>restapi</code> cursors</h3>\n<p><code>restapi</code> also supports cursors similar to what you get when using <code>arcpy</code>.  However, these work directly with the REST API and JSON features while also supporting <code>arcpy</code> and <code>shapefile</code> geometry types.  See the below example on how to use an <code>insertCursor</code> to add new records:</p>\n<pre><span class=\"c1\"># add 3 new features using an insert cursor </span>\n<span class=\"c1\"># using this in a \"with\" statement will call applyEdits on __exit__</span>\n<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"SHAPE@\"</span><span class=\"p\">,</span> <span class=\"s1\">'HazardType'</span><span class=\"p\">,</span> <span class=\"s2\">\"Description\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Priority\"</span><span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">insertCursor</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">irows</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n        <span class=\"n\">irows</span><span class=\"o\">.</span><span class=\"n\">insertRow</span><span class=\"p\">([</span><span class=\"n\">create_random_coordinates</span><span class=\"p\">(),</span> <span class=\"s2\">\"Wire Down\"</span><span class=\"p\">,</span> <span class=\"n\">desc</span><span class=\"p\">,</span> <span class=\"s2\">\"High\"</span><span class=\"p\">])</span>\n</pre>\n<p>records can be updated with an <code>updateCursor</code> and a where clause.  Note that the <code>OBJECTID</code> field must be included in the query to indicate which records will be updated.  The <code>OID@</code> field token can be used to retreive the <code>objectIdFieldName</code>:</p>\n<pre><span class=\"c1\"># now update records with updateCursor</span>\n<span class=\"n\">whereClause</span> <span class=\"o\">=</span> <span class=\"s2\">\"Description = '</span><span class=\"si\">{}</span><span class=\"s2\">'\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">desc</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">updateCursor</span><span class=\"p\">([</span><span class=\"s2\">\"Priority\"</span><span class=\"p\">,</span> <span class=\"s2\">\"OID@\"</span><span class=\"p\">],</span> <span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">whereClause</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">rows</span><span class=\"p\">:</span>\n        <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"Low\"</span>\n        <span class=\"n\">rows</span><span class=\"o\">.</span><span class=\"n\">updateRow</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n</pre>\n<p>Deleting features can be done with a simple <code>where</code> clause:</p>\n<pre><span class=\"c1\"># now delete the records we added</span>\n<span class=\"n\">hazards</span><span class=\"o\">.</span><span class=\"n\">deleteFeatures</span><span class=\"p\">(</span><span class=\"n\">where</span><span class=\"o\">=</span><span class=\"n\">whereClause</span><span class=\"p\">)</span>\n</pre>\n<p>We can also add attachments</p>\n<pre><span class=\"c1\"># add attachment, get new OID from add results</span>\n<span class=\"n\">oid</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">addResults</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>  <span class=\"c1\"># must get an OID to add attachment to</span>\n\n<span class=\"c1\"># download python image online and add it to the featuer we just added above</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://www.cis.upenn.edu/~lhuang3/cse399-python/images/pslytherin.png'</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">tmp</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">dirname</span><span class=\"p\">(</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),</span> <span class=\"s1\">'python.png'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">im</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># add attachment</span>\n<span class=\"n\">incidents</span><span class=\"o\">.</span><span class=\"n\">addAttachment</span><span class=\"p\">(</span><span class=\"n\">oid</span><span class=\"p\">,</span> <span class=\"n\">tmp</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">tmp</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get attachment info from service and download it</span>\n<span class=\"n\">attachments</span> <span class=\"o\">=</span> <span class=\"n\">incidents</span><span class=\"o\">.</span><span class=\"n\">attachments</span><span class=\"p\">(</span><span class=\"n\">oid</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">attachment</span> <span class=\"ow\">in</span> <span class=\"n\">attachments</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">attachment</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">contentType</span><span class=\"p\">,</span> <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n    <span class=\"n\">attachment</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">)</span> <span class=\"c1\"># folder is a user specified output directory</span>\n</pre>\n<p>Update feature and delete features</p>\n<pre><span class=\"c1\"># update the feature we just added</span>\n<span class=\"n\">adds</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'attributes'</span><span class=\"p\">][</span><span class=\"s1\">'address'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Address Not Available'</span>\n<span class=\"n\">adds</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'attributes'</span><span class=\"p\">][</span><span class=\"s1\">'objectid'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">oid</span>\n<span class=\"n\">incidents</span><span class=\"o\">.</span><span class=\"n\">updateFeatures</span><span class=\"p\">(</span><span class=\"n\">adds</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># now delete feature</span>\n<span class=\"n\">incidents</span><span class=\"o\">.</span><span class=\"n\">deleteFeatures</span><span class=\"p\">(</span><span class=\"n\">oid</span><span class=\"p\">)</span>\n</pre>\n<p>Offline capabilities (Sync)</p>\n<pre><span class=\"c1\"># if sync were enabled, we could create a replica like this:</span>\n<span class=\"c1\"># can pass in layer ID (0) or name ('incidents', not case sensative)</span>\n<span class=\"n\">replica</span> <span class=\"o\">=</span> <span class=\"n\">fs</span><span class=\"o\">.</span><span class=\"n\">createReplica</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s1\">'test_replica'</span><span class=\"p\">,</span> <span class=\"n\">geometry</span><span class=\"o\">=</span><span class=\"n\">adds</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'geometry'</span><span class=\"p\">],</span> <span class=\"n\">geometryType</span><span class=\"o\">=</span><span class=\"s1\">'esriGeometryPoint'</span><span class=\"p\">,</span> <span class=\"n\">inSR</span><span class=\"o\">=</span><span class=\"mi\">4326</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># now export the replica object to file geodatabase (if arcpy access) or shapefile with hyperlinks (if open source)</span>\n<span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">exportReplica</span><span class=\"p\">(</span><span class=\"n\">replica</span><span class=\"p\">,</span> <span class=\"n\">folder</span><span class=\"p\">)</span>\n</pre>\n<h2>Working with Image Services</h2>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://pca-gis02.pca.state.mn.us/arcgis/rest/services/Elevation/DEM_1m/ImageServer'</span>\n<span class=\"n\">im</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ImageService</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># clip DEM</span>\n<span class=\"n\">geometry</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"rings\"</span><span class=\"p\">:[[</span>\n                <span class=\"p\">[</span><span class=\"mf\">240006.00808044084</span><span class=\"p\">,</span> <span class=\"mf\">4954874.19629429</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">240157.31010183255</span><span class=\"p\">,</span> <span class=\"mf\">4954868.8053006204</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">240154.85966611796</span><span class=\"p\">,</span> <span class=\"mf\">4954800.0316874133</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">240003.55764305394</span><span class=\"p\">,</span> <span class=\"mf\">4954805.4226145679</span><span class=\"p\">],</span>\n                <span class=\"p\">[</span><span class=\"mf\">240006.00808044084</span><span class=\"p\">,</span> <span class=\"mf\">4954874.19629429</span><span class=\"p\">]]],</span>\n            <span class=\"s2\">\"spatialReference\"</span><span class=\"p\">:{</span><span class=\"s2\">\"wkid\"</span><span class=\"p\">:</span><span class=\"mi\">26915</span><span class=\"p\">,</span><span class=\"s2\">\"latestWkid\"</span><span class=\"p\">:</span><span class=\"mi\">26915</span><span class=\"p\">}}</span>\n\n<span class=\"n\">tif</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'dem.tif'</span><span class=\"p\">)</span>\n<span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">tif</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># test point identify</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mf\">400994.780878</span><span class=\"p\">,</span> <span class=\"mf\">157878.398217</span>\n<span class=\"n\">elevation</span> <span class=\"o\">=</span> <span class=\"n\">im</span><span class=\"o\">.</span><span class=\"n\">pointIdentify</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">sr</span><span class=\"o\">=</span><span class=\"mi\">103793</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">elevation</span><span class=\"p\">)</span>\n</pre>\n<h2>Geocoding</h2>\n<pre><span class=\"c1\"># hennepin county, MN geocoder</span>\n<span class=\"n\">henn</span> <span class=\"o\">=</span> <span class=\"s1\">'http://gis.hennepin.us/arcgis/rest/services/Locators/HC_COMPOSITE/GeocodeServer'</span>\n<span class=\"n\">geocoder</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">Geocoder</span><span class=\"p\">(</span><span class=\"n\">henn</span><span class=\"p\">)</span>\n<span class=\"c1\"># find target field, use the SingleLine address field by default</span>\n<span class=\"n\">geoResult</span> <span class=\"o\">=</span> <span class=\"n\">geocoder</span><span class=\"o\">.</span><span class=\"n\">findAddressCandidates</span><span class=\"p\">(</span><span class=\"s1\">'353 N 5th St, Minneapolis, MN 55403'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># export results to shapefile</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'found </span><span class=\"si\">{}</span><span class=\"s1\"> candidates'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">geoResult</span><span class=\"p\">))</span>\n<span class=\"n\">geocoder</span><span class=\"o\">.</span><span class=\"n\">exportResults</span><span class=\"p\">(</span><span class=\"n\">geoResult</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'target_field.shp'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Esri geocoder</span>\n<span class=\"n\">esri_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Locators/ESRI_Geocode_USA/GeocodeServer'</span>\n<span class=\"n\">esri_geocoder</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">Geocoder</span><span class=\"p\">(</span><span class=\"n\">esri_url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># find candidates using key word arguments (**kwargs) to fill in locator fields, no single line option</span>\n<span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"n\">esri_geocoder</span><span class=\"o\">.</span><span class=\"n\">findAddressCandidates</span><span class=\"p\">(</span><span class=\"n\">Address</span><span class=\"o\">=</span><span class=\"s1\">'380 New York Street'</span><span class=\"p\">,</span> <span class=\"n\">City</span><span class=\"o\">=</span><span class=\"s1\">'Redlands'</span><span class=\"p\">,</span> <span class=\"n\">State</span><span class=\"o\">=</span><span class=\"s1\">'CA'</span><span class=\"p\">,</span> <span class=\"n\">Zip</span><span class=\"o\">=</span><span class=\"s1\">'92373'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Number of address candidates: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"p\">)))</span>\n<span class=\"k\">for</span> <span class=\"n\">candidate</span> <span class=\"ow\">in</span> <span class=\"n\">candidates</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">candidate</span><span class=\"o\">.</span><span class=\"n\">location</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># export results to shapefile</span>\n<span class=\"n\">out_shp</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'Esri_headquarters.shp'</span><span class=\"p\">)</span>\n<span class=\"n\">geocoder</span><span class=\"o\">.</span><span class=\"n\">exportResults</span><span class=\"p\">(</span><span class=\"n\">candidates</span><span class=\"p\">,</span> <span class=\"n\">out_shp</span><span class=\"p\">)</span>\n</pre>\n<h2>Geoprocessing Services</h2>\n<pre><span class=\"c1\"># test esri's drive time analysis GP Task</span>\n<span class=\"n\">gp_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://sampleserver1.arcgisonline.com/ArcGIS/rest/services/Network/ESRI_DriveTime_US/GPServer/CreateDriveTimePolygons'</span>\n<span class=\"n\">gp</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">GPTask</span><span class=\"p\">(</span><span class=\"n\">gp_url</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get a list of gp parameters (so we know what to pass in as kwargs)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">GP Task \"</span><span class=\"si\">{}</span><span class=\"s1\">\" parameters:</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">parameters</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\t</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">dataType</span><span class=\"p\">)</span>\n\n<span class=\"n\">point</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s2\">\"geometryType\"</span><span class=\"p\">:</span><span class=\"s2\">\"esriGeometryPoint\"</span><span class=\"p\">,</span>\n         <span class=\"s2\">\"features\"</span><span class=\"p\">:[</span>\n             <span class=\"p\">{</span><span class=\"s2\">\"geometry\"</span><span class=\"p\">:{</span><span class=\"s2\">\"x\"</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mf\">10603050.16225853</span><span class=\"p\">,</span><span class=\"s2\">\"y\"</span><span class=\"p\">:</span><span class=\"mf\">4715351.1473399615</span><span class=\"p\">,</span>\n                          <span class=\"s2\">\"spatialReference\"</span><span class=\"p\">:{</span><span class=\"s2\">\"wkid\"</span><span class=\"p\">:</span><span class=\"mi\">102100</span><span class=\"p\">,</span><span class=\"s2\">\"latestWkid\"</span><span class=\"p\">:</span><span class=\"mi\">3857</span><span class=\"p\">}}}],</span>\n         <span class=\"s2\">\"sr\"</span><span class=\"p\">:{</span><span class=\"s2\">\"wkid\"</span><span class=\"p\">:</span><span class=\"mi\">102100</span><span class=\"p\">,</span><span class=\"s2\">\"latestWkid\"</span><span class=\"p\">:</span><span class=\"mi\">3857</span><span class=\"p\">}}</span>\n\n<span class=\"c1\"># run task, passing in gp parameters as keyword arguments (**kwargs)</span>\n<span class=\"n\">gp_res</span> <span class=\"o\">=</span> <span class=\"n\">gp</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">Input_Location</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">point</span><span class=\"p\">),</span> <span class=\"n\">Drive_Times</span> <span class=\"o\">=</span> <span class=\"s1\">'1 2 3'</span><span class=\"p\">,</span> <span class=\"n\">inSR</span> <span class=\"o\">=</span> <span class=\"mi\">102100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># returns a GPResult() object, can get at the first result by indexing (usually only one result)</span>\n<span class=\"c1\"># can test if there are results by __nonzero__()</span>\n<span class=\"k\">if</span> <span class=\"n\">gp_res</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">gp_res</span><span class=\"o\">.</span><span class=\"n\">results</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    \n    <span class=\"c1\"># this returned a GPFeatureRecordSetLayer as an outputParameter, so we can export this to polygons</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">Output Result: \"</span><span class=\"si\">{}</span><span class=\"s1\">\", data type: </span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">paramName</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">dataType</span><span class=\"p\">))</span>\n\n    <span class=\"c1\"># now export the result value to fc (use the value property of the GPResult object from run())</span>\n    <span class=\"n\">drive_times</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">folder</span><span class=\"p\">,</span> <span class=\"s1\">'drive_times.shp'</span><span class=\"p\">)</span>\n    <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">exportFeatureSet</span><span class=\"p\">(</span><span class=\"n\">drive_times</span><span class=\"p\">,</span> <span class=\"n\">gp_res</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<h2>A note about input Geometries</h2>\n<p>restapi will try to use arcpy first if you have it, otherwise will defer to open source.  Both\nsupport the reading of shapefiles to return the first feature back as a restapi.Geometry object</p>\n<p>It also supports arcpy Geometries and shapefile.Shape() objects</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">shp</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s1\">'C:\\TEMP\\Polygons.shp'</span> <span class=\"c1\"># a shapefile on disk somewhere</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">geom</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">Geometry</span><span class=\"p\">(</span><span class=\"n\">shp</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">geom</span><span class=\"o\">.</span><span class=\"n\">envelope</span><span class=\"p\">())</span>\n<span class=\"o\">-</span><span class=\"mf\">121.5</span><span class=\"p\">,</span><span class=\"mf\">38.3000000007</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">121.199999999</span><span class=\"p\">,</span><span class=\"mf\">38.6000000015</span>\n</pre>\n<h2>Token Based Security</h2>\n<p>restapi also supports secured services.  This is also session based, so if you sign in once to an\nArcGIS Server Resource (on the same ArcGIS Site), the token will automatically persist via the\nIdentityManager().</p>\n<p>There are 3 ways to authticate:</p>\n<pre><span class=\"c1\"># **kwargs for all accessing all ArcGIS resources are</span>\n<span class=\"c1\"># usr   -- username</span>\n<span class=\"c1\"># pw    -- password</span>\n<span class=\"c1\"># token -- token (as string or restapi.Token object)</span>\n<span class=\"c1\"># proxy -- url to proxy</span>\n\n<span class=\"c1\"># secured url</span>\n<span class=\"n\">secured_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://some-domain.com/arcgis/rest/services'</span>\n\n<span class=\"c1\"># 1. username and password</span>\n<span class=\"n\">ags</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>  <span class=\"c1\"># token is generated and persists</span>\n\n<span class=\"c1\"># 2. a token that has already been requested</span>\n<span class=\"n\">ags</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"o\">=</span><span class=\"n\">token</span><span class=\"p\">)</span>  <span class=\"c1\"># uses a token that is already active</span>\n\n<span class=\"c1\"># 3. via a proxy (assuming using the standard esri proxy)</span>\n<span class=\"c1\">#   this will forward all subsequent requests through the proxy</span>\n<span class=\"n\">ags</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">proxy</span><span class=\"o\">=</span><span class=\"s1\">'http://some-domain.com/proxy.ashx'</span><span class=\"p\">)</span>\n</pre>\n<p>You can even just generate a token and let the IdentityManager handle the rest.  It is even smart enough to handle multiple tokens for different sites:</p>\n<pre><span class=\"c1\"># login to instance 1</span>\n<span class=\"n\">usr</span> <span class=\"o\">=</span> <span class=\"s1\">'username'</span>\n<span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span>\n\n<span class=\"c1\"># urls to two different ArcGIS Server sites</span>\n<span class=\"n\">url_1</span> <span class=\"o\">=</span> <span class=\"s1\">'http://some-domain.com/arcserver1/rest/services'</span>\n<span class=\"n\">url_2</span> <span class=\"o\">=</span> <span class=\"s1\">'http://domain2.com/arcgis/rest/services'</span>\n\n<span class=\"c1\"># generate tokens</span>\n<span class=\"n\">tok1</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">generate_token</span><span class=\"p\">(</span><span class=\"n\">url_1</span><span class=\"p\">,</span> <span class=\"n\">usr</span><span class=\"p\">,</span> <span class=\"n\">pw</span><span class=\"p\">)</span>\n<span class=\"n\">tok2</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">generate_token</span><span class=\"p\">(</span><span class=\"n\">url_2</span><span class=\"p\">,</span> <span class=\"n\">usr</span><span class=\"p\">,</span> <span class=\"n\">pw</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># now we should be able to access both ArcGIS Server sites via the IdentityManager</span>\n<span class=\"n\">arcserver1</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">url_1</span><span class=\"p\">)</span> <span class=\"c1\"># tok1 is automatically passed in and handled</span>\n<span class=\"n\">arcserver2</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">ArcServer</span><span class=\"p\">(</span><span class=\"n\">url_2</span><span class=\"p\">)</span> <span class=\"c1\"># tok2 is used here</span>\n</pre>\n<h2>The admin Subpackage</h2>\n<p>restapi also contains an administrative subpackage (warning: most functionality has not been tested!).  You can import this module like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">restapi</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n</pre>\n<h3>Connecting to a Portal</h3>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'https://domain.gis.com/portal/home'</span>\n<span class=\"n\">portal</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">Portal</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"s1\">'username'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get servers</span>\n<span class=\"n\">servers</span> <span class=\"o\">=</span> <span class=\"n\">portal</span><span class=\"o\">.</span><span class=\"n\">servers</span>\n\n<span class=\"c1\"># stop sample cities service</span>\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"n\">servers</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"p\">(</span><span class=\"s1\">'SampleWorldCities.MapServer'</span><span class=\"p\">)</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>To connect to an ArcGIS Server instance that you would like to administer you can do the following:</p>\n<pre><span class=\"c1\"># test with your own servers</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'localhost:6080/arcgis/admin/services'</span> <span class=\"c1\">#server url</span>\n<span class=\"n\">usr</span> <span class=\"o\">=</span> <span class=\"s1\">'username'</span>\n<span class=\"n\">pw</span> <span class=\"o\">=</span> <span class=\"s1\">'password'</span>\n\n<span class=\"c1\"># connect to ArcGIS Server instance</span>\n<span class=\"n\">arcserver</span> <span class=\"o\">=</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ArcServerAdmin</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">usr</span><span class=\"p\">,</span> <span class=\"n\">pw</span><span class=\"p\">)</span>\n</pre>\n<p>To list services within a folder, you can do this:</p>\n<pre><span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span>  <span class=\"c1\"># supply name of folder as argument</span>\n<span class=\"k\">for</span> <span class=\"n\">service</span> <span class=\"ow\">in</span> <span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">iter_services</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serviceName</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">configuredState</span>\n\n    <span class=\"c1\"># can stop a service like this</span>\n    <span class=\"c1\"># service.stop()</span>\n\n    <span class=\"c1\"># or start like this</span>\n    <span class=\"c1\"># service.start()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span> <span class=\"o\">*</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># show all services and configured state (use iter_services to return restapi.admin.Service() object!)</span>\n<span class=\"k\">for</span> <span class=\"n\">service</span> <span class=\"ow\">in</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">iter_services</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serviceName</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">configuredState</span><span class=\"p\">)</span>\n</pre>\n<h2>Security</h2>\n<p>You can set security at the folder or service level.  By default, the addPermssion() method used by Folder and Service objects will make the service unavailable to the general public and only those in the administrator role can view the services.  This is done by setting the 'esriEveryone' principal \"isAllowed\" value to false.  You can also assign permissions based on roles.</p>\n<pre><span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">addPermission</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span>  <span class=\"c1\"># by default it will make private True </span>\n\n<span class=\"c1\"># now make it publically avaiable (unsecure)</span>\n<span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">addPermission</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">,</span> <span class=\"n\">private</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># secure based on role, in this case will not allow assessor group to see utility data</span>\n<span class=\"c1\">#   assessor is name of assessor group role, Watermain is folder to secure</span>\n<span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">addPermission</span><span class=\"p\">(</span><span class=\"s1\">'Watermain'</span><span class=\"p\">,</span> <span class=\"s1\">'assessor'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>  \n\n<span class=\"c1\"># note, this can also be done at the folder level:</span>\n<span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"s1\">'Watermain'</span><span class=\"p\">)</span>\n<span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">addPermission</span><span class=\"p\">(</span><span class=\"s1\">'assessor'</span><span class=\"p\">,</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Stopping and Starting Services</h2>\n<p>Services can easily be started and stopped with this module.  This can be done from the ArcServerAdmin() or Folder() object:</p>\n<pre><span class=\"c1\"># stop all services in a folder</span>\n<span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">stopServices</span><span class=\"p\">(</span><span class=\"n\">folderName</span><span class=\"o\">=</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span> <span class=\"c1\"># this can take a few minutes</span>\n\n<span class=\"c1\"># look thru the folder to check the configured states, should be stopped</span>\n<span class=\"k\">for</span> <span class=\"n\">service</span> <span class=\"ow\">in</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iter_services</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serviceName</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">configuredState</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># now restart</span>\n<span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">startServices</span><span class=\"p\">(</span><span class=\"n\">folderName</span><span class=\"o\">=</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span> <span class=\"c1\"># this can take a few minutes</span>\n\n<span class=\"c1\"># look thru folder, services should be started</span>\n<span class=\"k\">for</span> <span class=\"n\">service</span> <span class=\"ow\">in</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">iter_services</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serviceName</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">configuredState</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># to do this from a folder, simply get a folder object back</span>\n<span class=\"n\">folder</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">folder</span><span class=\"p\">(</span><span class=\"s1\">'SomeFolder'</span><span class=\"p\">)</span>\n<span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">stopServices</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">service</span> <span class=\"ow\">in</span> <span class=\"n\">folder</span><span class=\"o\">.</span><span class=\"n\">iter_services</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">serviceName</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">configuredState</span><span class=\"p\">)</span>\n</pre>\n<h2>Updating Service Properties</h2>\n<p>The admin package can be used to update the service definitions via JSON.  By default, the Service.edit() method will pass in the original service definition as JSON so no changes are made if no arguments are supplied.  The first argument is the service config as JSON, but this method also supports keyword arguments to update single properties (**kwargs).  These represent keys of a the dictionary in Python.</p>\n<pre><span class=\"c1\"># connect to an individual service (by wildcard) - do not need to include full name, just</span>\n<span class=\"c1\"># enough of the name to make it a unique name query</span>\n<span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">service</span><span class=\"p\">(</span><span class=\"s1\">'SampleWorldCities'</span><span class=\"p\">)</span> <span class=\"c1\">#provide name of service here</span>\n\n<span class=\"c1\"># get original service description</span>\n<span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">description</span>\n\n<span class=\"c1\"># now edit the description only by using description kwarg (must match key exactly to update)</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'This is an updated service description'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># edit description again to set it back to the original description</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">(</span><span class=\"n\">description</span><span class=\"o\">=</span><span class=\"n\">description</span><span class=\"p\">)</span>\n</pre>\n<p>There are also some helper methods that aren't available out of the box from the ArcGIS REST API such as enabling or disabling extensions:</p>\n<pre><span class=\"c1\"># disable Feature Access and kml downloads</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">disableExtensions</span><span class=\"p\">([</span><span class=\"s1\">'FeatureServer'</span><span class=\"p\">,</span> <span class=\"s1\">'KmlServer'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># you can also list enabled/disabled services</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">enabledExtensions</span><span class=\"p\">)</span>\n<span class=\"c1\"># [u'KmlServer', u'WFSServer', u'FeatureServer']</span>\n\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">disabledExtensions</span>\n<span class=\"c1\"># [u'NAServer', u'MobileServer', u'SchematicsServer', u'WCSServer', u'WMSServer']</span>\n\n<span class=\"c1\"># Edit service extension properites</span>\n<span class=\"c1\"># get an extension and view its properties</span>\n<span class=\"n\">fs_extension</span> <span class=\"o\">=</span> <span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">getExtension</span><span class=\"p\">(</span><span class=\"s1\">'FeatureServer'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fs_extension</span><span class=\"p\">)</span> <span class=\"c1\"># will print as pretty json</span>\n</pre>\n<p>For Service objects, all properties are represented as pretty json.  Below is what the FeatureService Extension looks like:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"s2\">\"allowedUploadFileTypes\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n  <span class=\"s2\">\"capabilities\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Query,Create,Update,Delete,Uploads,Editing\"</span><span class=\"p\">,</span> \n  <span class=\"s2\">\"enabled\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n  <span class=\"s2\">\"maxUploadFileSize\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span> \n  <span class=\"s2\">\"properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"allowGeometryUpdates\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"allowOthersToDelete\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"allowOthersToQuery\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"allowOthersToUpdate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"allowTrueCurvesUpdates\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"creatorPresent\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"dataInGdb\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"datasetInspected\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"editorTrackingRespectsDayLightSavingTime\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"editorTrackingTimeInUTC\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"editorTrackingTimeZoneID\"</span><span class=\"p\">:</span> <span class=\"s2\">\"UTC\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"enableOwnershipBasedAccessControl\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"enableZDefaults\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"maxRecordCount\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1000\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"realm\"</span><span class=\"p\">:</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"syncEnabled\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"syncVersionCreationRule\"</span><span class=\"p\">:</span> <span class=\"s2\">\"versionPerDownloadedMap\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"versionedData\"</span><span class=\"p\">:</span> <span class=\"s2\">\"false\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"xssPreventionEnabled\"</span><span class=\"p\">:</span> <span class=\"s2\">\"true\"</span><span class=\"p\">,</span> \n    <span class=\"s2\">\"zDefaultValue\"</span><span class=\"p\">:</span> <span class=\"s2\">\"0\"</span>\n  <span class=\"p\">},</span> \n  <span class=\"s2\">\"typeName\"</span><span class=\"p\">:</span> <span class=\"s2\">\"FeatureServer\"</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Setting properties for extensions is also easy:</p>\n<pre><span class=\"c1\"># set properties for an extension using helper method, use **kwargs for setting capabilities</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">setExtensionProperties</span><span class=\"p\">(</span><span class=\"s1\">'FeatureServer'</span><span class=\"p\">,</span> <span class=\"n\">capabilities</span><span class=\"o\">=</span><span class=\"s1\">'Query,Update,Delete,Editing'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># verify changes were made</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fs_extension</span><span class=\"o\">.</span><span class=\"n\">capabilities</span>\n<span class=\"c1\"># 'Query,Update,Delete,Editing'</span>\n\n<span class=\"c1\"># alternatively, you can edit the service json directly and call the edit method</span>\n<span class=\"c1\"># change it back to original settings</span>\n<span class=\"n\">fs_extension</span><span class=\"o\">.</span><span class=\"n\">capabilities</span> <span class=\"o\">=</span> <span class=\"s1\">'Query,Create,Update,Delete,Uploads,Editing'</span>\n<span class=\"n\">service</span><span class=\"o\">.</span><span class=\"n\">edit</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># verify one more time...</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fs_extension</span><span class=\"o\">.</span><span class=\"n\">capabilities</span><span class=\"p\">)</span>\n<span class=\"c1\"># 'Query,Create,Update,Delete,Uploads,Editing'</span>\n</pre>\n<h2>Access the Data Store</h2>\n<p>You can iterate through the data store items easily to read/update/add items:</p>\n<pre><span class=\"c1\"># connect to the server's data store</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">dataStore</span>\n\n<span class=\"c1\"># iterate through all items of data store</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">ds</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">path</span>\n    <span class=\"c1\"># if it is an enterprise database connection, you can get the connection string like this</span>\n    <span class=\"k\">if</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s1\">'egdb'</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">connectionString</span><span class=\"p\">)</span>\n    <span class=\"c1\"># else if a folder, print(server path</span>\n    <span class=\"k\">elif</span> <span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s1\">'folder'</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h2>User and Role Stores</h2>\n<p>When viewing usernames/roles you can limit the number of names returned using the \"maxCount\" keyword argument.  To view and make changes to Role Store:</p>\n<pre><span class=\"c1\"># connect to role store</span>\n<span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">roleStore</span>\n\n<span class=\"c1\"># print roles</span>\n<span class=\"k\">for</span> <span class=\"n\">role</span> <span class=\"ow\">in</span> <span class=\"n\">rs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">role</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># find users within roles</span>\n<span class=\"k\">for</span> <span class=\"n\">role</span> <span class=\"ow\">in</span> <span class=\"n\">rs</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">role</span><span class=\"p\">,</span> <span class=\"s1\">'Users: '</span><span class=\"p\">,</span> <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">getUsersWithinRole</span><span class=\"p\">(</span><span class=\"n\">role</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># add a user to role</span>\n<span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">addUsersToRole</span><span class=\"p\">(</span><span class=\"s1\">'Administrators'</span><span class=\"p\">,</span> <span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># remove user from role</span>\n<span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">removeUsersFromRole</span><span class=\"p\">(</span><span class=\"s1\">'Administrators'</span><span class=\"p\">,</span> <span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># remove an entire role</span>\n<span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">removeRole</span><span class=\"p\">(</span><span class=\"s1\">'transportation'</span><span class=\"p\">)</span>\n</pre>\n<p>To view and make changes to the User Store:</p>\n<pre><span class=\"c1\"># connect to user store</span>\n<span class=\"n\">us</span> <span class=\"o\">=</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">userStore</span>\n\n<span class=\"c1\"># get number of users</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">us</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># iterate through first 10 users</span>\n<span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">searchUsers</span><span class=\"p\">(</span><span class=\"n\">maxCount</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">)</span>\n    \n<span class=\"c1\"># add new user</span>\n<span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">addUser</span><span class=\"p\">(</span><span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># assign roles by using comma separated list of role names</span>\n<span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">assignRoles</span><span class=\"p\">(</span><span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">,</span> <span class=\"s1\">'Administrators,Publishers'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get privileges from user</span>\n<span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">getPrivilegeForUser</span><span class=\"p\">(</span><span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># remove roles from user </span>\n<span class=\"n\">us</span><span class=\"o\">.</span><span class=\"n\">removeRoles</span><span class=\"p\">(</span><span class=\"s1\">'your-domain</span><span class=\"se\">\\\\</span><span class=\"s1\">someuser'</span><span class=\"p\">,</span> <span class=\"s1\">'Administrators,Publishers'</span><span class=\"p\">)</span>\n</pre>\n<h2>Log Files</h2>\n<p>You can easily query server log files like this:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">restapi</span>\n<span class=\"kn\">import</span> <span class=\"nn\">datetime</span>\n\n<span class=\"c1\"># query log files (within last 3 days), need to convert to milliseconds</span>\n<span class=\"n\">threeDaysAgo</span> <span class=\"o\">=</span> <span class=\"n\">restapi</span><span class=\"o\">.</span><span class=\"n\">date_to_mil</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">relativedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">log</span> <span class=\"ow\">in</span> <span class=\"n\">arcserver</span><span class=\"o\">.</span><span class=\"n\">queryLogs</span><span class=\"p\">(</span><span class=\"n\">endTime</span><span class=\"o\">=</span><span class=\"n\">threeDaysAgo</span><span class=\"p\">,</span> <span class=\"n\">pageSize</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">time</span>\n    <span class=\"k\">for</span> <span class=\"n\">message</span> <span class=\"ow\">in</span> <span class=\"n\">log</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n</pre>\n<h2>A note about verbosity</h2>\n<p>When using the admin subpackage you will likely be making changes to services/permissions etc.  On operations that change a configuration, the @passthrough decorator will report back if the operation is successful and return results like this:</p>\n<pre><span class=\"p\">{</span><span class=\"sa\">u</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'SUCCESS'</span><span class=\"p\">}</span>\n</pre>\n<p>The printing of these messages can be shut off by changing the global \"VERBOSE\" variable so these messages are not reported.  This can be disabled like this:</p>\n<pre><span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">VERBOSE</span> <span class=\"o\">=</span> <span class=\"kc\">False</span> \n</pre>\n\n          </div>"}, "last_serial": 6750186, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2a2344ca5dfdd5c5d7178753266f8cfc", "sha256": "5f1cafd2d0f3352bb4df16ae1a189cd8eb0bac7f40e6099ece9e7f8cfd8ece29"}, "downloads": -1, "filename": "bmi-arcgis-restapi-1.0.tar.gz", "has_sig": false, "md5_digest": "2a2344ca5dfdd5c5d7178753266f8cfc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 472518, "upload_time": "2019-10-29T17:18:46", "upload_time_iso_8601": "2019-10-29T17:18:46.580862Z", "url": "https://files.pythonhosted.org/packages/ca/c4/ff5698e57c5b8c7d23d6bf97d014af73f135f627fb2401c9efbc40b7a1b4/bmi-arcgis-restapi-1.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "0dde14fc817982d8254780a7d99aa23b", "sha256": "0a912590158c1e6ce17e3983bc1abcb22d8c8224b5fa5ceb60b3aa2e8e50ec30"}, "downloads": -1, "filename": "bmi-arcgis-restapi-1.0.2.tar.gz", "has_sig": false, "md5_digest": "0dde14fc817982d8254780a7d99aa23b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 472955, "upload_time": "2019-12-06T21:52:52", "upload_time_iso_8601": "2019-12-06T21:52:52.495301Z", "url": "https://files.pythonhosted.org/packages/29/89/d1bb161a032acc83f0fe38bbf9db553562836555deabf00c15d7812f003c/bmi-arcgis-restapi-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a2357c237a130389ee8aa8f175dbadde", "sha256": "9a4651ae5ff518f6863372472490904d0633b8087b96ed072971ff1d64e8667e"}, "downloads": -1, "filename": "bmi-arcgis-restapi-1.0.3.tar.gz", "has_sig": false, "md5_digest": "a2357c237a130389ee8aa8f175dbadde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 472975, "upload_time": "2020-01-06T19:00:33", "upload_time_iso_8601": "2020-01-06T19:00:33.897451Z", "url": "https://files.pythonhosted.org/packages/a7/21/8bb8eea7557761b1870db3a0838db624a00da5c9c8709a6991edc77f8bd9/bmi-arcgis-restapi-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "ba2ae50775c633e30563d86591bbe4b9", "sha256": "52fd6d3c2bbdedf5d11df2ebdeef53c116ac26188248c2ad3033ad166d248614"}, "downloads": -1, "filename": "bmi-arcgis-restapi-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ba2ae50775c633e30563d86591bbe4b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 473944, "upload_time": "2020-03-04T20:09:07", "upload_time_iso_8601": "2020-03-04T20:09:07.995062Z", "url": "https://files.pythonhosted.org/packages/72/b1/e5fcd6d3b70a36a8e91259f5a828e39dfc650d8128850e6433a1320e1876/bmi-arcgis-restapi-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ba2ae50775c633e30563d86591bbe4b9", "sha256": "52fd6d3c2bbdedf5d11df2ebdeef53c116ac26188248c2ad3033ad166d248614"}, "downloads": -1, "filename": "bmi-arcgis-restapi-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ba2ae50775c633e30563d86591bbe4b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 473944, "upload_time": "2020-03-04T20:09:07", "upload_time_iso_8601": "2020-03-04T20:09:07.995062Z", "url": "https://files.pythonhosted.org/packages/72/b1/e5fcd6d3b70a36a8e91259f5a828e39dfc650d8128850e6433a1320e1876/bmi-arcgis-restapi-1.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:56 2020"}