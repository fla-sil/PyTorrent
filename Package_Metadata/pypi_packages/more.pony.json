{"info": {"author": "Henri Hulski", "author_email": "henri.hulski@gazeta.pl", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy"], "description": "more.pony: Pony ORM integration in Morepath\n===========================================\n\nThis package provides Morepath integration for the Pony_\nObject-Relational Mapper library.\n\nThis package binds the database session to the request so\nyou can interact with the database in your App directly\nwithout using ``db_session``.\n\n\nQuick start\n-----------\n\nInstall ``more.pony``:\n\n.. code-block:: console\n\n  $ pip install -U more.pony\n\nExtend your App class from PonyApp:\n\n.. code-block:: python\n\n    from more.pony import PonyApp\n\n    class App(PonyApp):\n        pass\n\n\nCreate your model:\n\n.. code-block:: python\n\n  from pony.orm import Database, PrimaryKey, Optional\n\n  db = Database()\n\n\n  class Document(db.Entity):\n      _table_ = 'document'\n\n      id = PrimaryKey(int, auto=True)\n      title = Optional(str)\n      content = Optional(str)\n\n      def update(self, payload={}):\n          self.set(**payload)\n\n      def remove(self):\n          self.delete()\n\n\nSetup the database in your start script:\n\n.. code-block:: python\n\n  import morepath\n\n  from .app import App\n  from .model import db\n\n\n  def run():\n      db.bind(provider='sqlite', filename='app.db', create_db=True)\n      db.generate_mapping(create_tables=True)\n\n      morepath.autoscan()\n      morepath.run(App())\n\n\nNow you can use the model in your path:\n\n.. code-block:: python\n\n  from .app import App\n  from .model import Document\n\n\n  @App.path(model=Document, path='documents/{id}')\n  def get_document(request, id=0):\n      return Document[id]\n\nAnd in your view:\n\n.. code-block:: python\n\n  from .app import App\n  from .model import Document\n\n\n  @App.json(model=Document)\n  def document_default(self, request):\n      return {\n          'id': self.id,\n          'title': self.title,\n          'content': self.content,\n          'link': request.link(self)\n      }\n\n\n  @App.json(model=Document, request_method='PUT')\n  def document_update(self, request):\n      self.update(request.json)\n\n\n  @App.json(model=Document, request_method='DELETE')\n  def document_remove(self, request):\n      self.remove()\n\n\nSettings\n--------\n\nYou can set the arguments which are passed to ``db_session``\nin the ``pony`` section of your settings.\n\nThe default settings are:\n\n.. code-block:: python\n\n  @App.setting_section(section='pony')\n  def get_pony_settings():\n      return {\n          'allowed_exceptions': [],\n          'immediate': False,\n          'retry': 0,\n          'retry_exceptions': [TransactionError],\n          'serializable': False,\n          'strict': False\n      }\n\nMore information about the arguments you find in the `Pony API documentation`_.\n\nYou can also use the ``database`` settings section for your database setup,\nwhich allows you to use different setups for production, development and\ntesting environments.\n\nJust create create an App for each environment and load specific\nsettings files:\n\n.. code-block:: python\n\n  class App(PonyApp):\n      pass\n\n  with open('settings/default.yml') as defaults:\n    defaults_dict = yaml.load(defaults)\n\n  App.init_settings(defaults_dict)\n\n\n  class ProductionApp(App):\n      pass\n\n\n  with open('settings/production.yml') as settings:\n      settings_dict = yaml.load(settings)\n\n  ProductionApp.init_settings(settings_dict)\n\n\n  class TestApp(App):\n      pass\n\n\n  with open('settings/test.yml') as settings:\n      settings_dict = yaml.load(settings)\n\n  TestApp.init_settings(settings_dict)\n\nThe database configuration in the YAML settings\nfiles, depending on the database you use, could\nlook something like:\n\n.. code-block:: yaml\n\n  database:\n    provider: sqlite\n    filename: app.db\n    create_db: true\n\nIn your start script you setup the database and load\nthe App according to the ``RUN_ENV`` environment variable:\n\n.. code-block:: python\n\n  import os\n  import morepath\n\n  from .app import App, ProductionApp, TestApp\n  from .model import db\n\n\n  def setup_db(app):\n      db_params = app.settings.database.__dict__.copy()\n      db.bind(**db_params)\n      db.generate_mapping(create_tables=True)\n\n  def run():\n    morepath.autoscan()\n\n    if os.getenv('RUN_ENV') == 'production':\n        ProductionApp.commit()\n        app = ProductionApp()\n    elif os.getenv('RUN_ENV') == 'test':\n        TestApp.commit()\n        app = TestApp()\n    else:\n        App.commit()\n        app = App()\n\n    setup_db(app)\n    morepath.run(app)\n\nDetail about the database configuration you find\nin the `PonyOrm documentation`_.\n\n\nSide effects\n------------\n\nIf you want to trigger side effects (like sending an email or\nwriting to filesystem) on database commits you can emit a signal\nin the ``@request.after`` of the view which triggers the side effects.\n\nLike this the side effects will be triggered just before the\ndatabase session gets committed and only if it wasn't rolled back.\n\nThis example uses `more.emit`_:\n\n.. code-block:: python\n\n  @App.json(model=Document, request_method='PUT')\n  def document_update(self, request):\n      self.update(request.json)\n\n      @request.after\n      def after(response):\n          request.app.signal.emit('document_updated', self, request)\n\nAltenatively you can use in your model the PonyORM\n`after_insert()`_, `after_update()`_ or `after_delete()`_\nentity-hooks.\nThis makes sure that the side effect is triggered\n**after** the database session has committed.\n\nThe drawback is that you don't have easy access to the\nrequest or app in the model.\n\n\n.. _Pony: https://ponyorm.com\n.. _Pony API documentation:\n    https://docs.ponyorm.com/api_reference.html#transactions-db-session\n.. _PonyOrm documentation: https://docs.ponyorm.com/api_reference.html#database\n.. _more.emit: https://github.com/morepath/more.emit\n.. _after_insert(): https://docs.ponyorm.com/api_reference.html#after_insert\n.. _after_update(): https://docs.ponyorm.com/api_reference.html#after_update\n.. _after_delete(): https://docs.ponyorm.com/api_reference.html#after_delete\n\n\nCHANGES\n=======\n\n0.3 (2020-04-26)\n----------------\n\n- **Removed**: Removed support for Python 2.\n\n  You have to upgrade to Python 3 if you want to use this version.\n\n- Added support for Python 3.6, 3.7 and 3.8 and PyPy 3.6.\n\n- Make Python 3.7 the default testing environment.\n\n- Upgrade PonyORM to 0.7.13.\n\n- Add integration for the Black code formatter.\n\n\n0.2 (2017-07-20)\n----------------\n\n- Upgrade PonyORM to 0.7.2.\n- Use a dictonary for passing parameters to db.bind in examples and tests.\n\n\n0.1 (2017-04-22)\n----------------\n\n- Initial public release.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/morepath/more.pony", "keywords": "morepath Pony ORM PonyORM", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "more.pony", "package_url": "https://pypi.org/project/more.pony/", "platform": "", "project_url": "https://pypi.org/project/more.pony/", "project_urls": {"Homepage": "https://github.com/morepath/more.pony"}, "release_url": "https://pypi.org/project/more.pony/0.3/", "requires_dist": ["morepath (>=0.19)", "pony (>=0.7.13)", "pytest-cov ; extra == 'coverage'", "flake8 ; extra == 'pep8'", "black ; extra == 'pep8'", "pytest (>=2.9.1) ; extra == 'test'", "pytest-remove-stale-bytecode ; extra == 'test'", "webtest ; extra == 'test'"], "requires_python": "", "summary": "Pony ORM integration in Morepath", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"more-pony-pony-orm-integration-in-morepath\">\n<h2>more.pony: Pony ORM integration in Morepath</h2>\n<p>This package provides Morepath integration for the <a href=\"https://ponyorm.com\" rel=\"nofollow\">Pony</a>\nObject-Relational Mapper library.</p>\n<p>This package binds the database session to the request so\nyou can interact with the database in your App directly\nwithout using <tt>db_session</tt>.</p>\n<div id=\"quick-start\">\n<h3>Quick start</h3>\n<p>Install <tt>more.pony</tt>:</p>\n<pre><span class=\"gp\">$</span> pip install -U more.pony\n</pre>\n<p>Extend your App class from PonyApp:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">more.pony</span> <span class=\"kn\">import</span> <span class=\"n\">PonyApp</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">PonyApp</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Create your model:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pony.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Database</span><span class=\"p\">,</span> <span class=\"n\">PrimaryKey</span><span class=\"p\">,</span> <span class=\"n\">Optional</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Document</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">Entity</span><span class=\"p\">):</span>\n    <span class=\"n\">_table_</span> <span class=\"o\">=</span> <span class=\"s1\">'document'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">PrimaryKey</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">auto</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n    <span class=\"n\">content</span> <span class=\"o\">=</span> <span class=\"n\">Optional</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<p>Setup the database in your start script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">morepath</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.model</span> <span class=\"kn\">import</span> <span class=\"n\">db</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"n\">provider</span><span class=\"o\">=</span><span class=\"s1\">'sqlite'</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'app.db'</span><span class=\"p\">,</span> <span class=\"n\">create_db</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">generate_mapping</span><span class=\"p\">(</span><span class=\"n\">create_tables</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">morepath</span><span class=\"o\">.</span><span class=\"n\">autoscan</span><span class=\"p\">()</span>\n    <span class=\"n\">morepath</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">())</span>\n</pre>\n<p>Now you can use the model in your path:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.model</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>\n\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'documents/</span><span class=\"si\">{id}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_document</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Document</span><span class=\"p\">[</span><span class=\"nb\">id</span><span class=\"p\">]</span>\n</pre>\n<p>And in your view:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.model</span> <span class=\"kn\">import</span> <span class=\"n\">Document</span>\n\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Document</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">document_default</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">title</span><span class=\"p\">,</span>\n        <span class=\"s1\">'content'</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">,</span>\n        <span class=\"s1\">'link'</span><span class=\"p\">:</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">link</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'PUT'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">document_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'DELETE'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">document_remove</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"settings\">\n<h3>Settings</h3>\n<p>You can set the arguments which are passed to <tt>db_session</tt>\nin the <tt>pony</tt> section of your settings.</p>\n<p>The default settings are:</p>\n<pre><span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">setting_section</span><span class=\"p\">(</span><span class=\"n\">section</span><span class=\"o\">=</span><span class=\"s1\">'pony'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_pony_settings</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'allowed_exceptions'</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n        <span class=\"s1\">'immediate'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'retry'</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n        <span class=\"s1\">'retry_exceptions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">TransactionError</span><span class=\"p\">],</span>\n        <span class=\"s1\">'serializable'</span><span class=\"p\">:</span> <span class=\"kc\">False</span><span class=\"p\">,</span>\n        <span class=\"s1\">'strict'</span><span class=\"p\">:</span> <span class=\"kc\">False</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>More information about the arguments you find in the <a href=\"https://docs.ponyorm.com/api_reference.html#transactions-db-session\" rel=\"nofollow\">Pony API documentation</a>.</p>\n<p>You can also use the <tt>database</tt> settings section for your database setup,\nwhich allows you to use different setups for production, development and\ntesting environments.</p>\n<p>Just create create an App for each environment and load specific\nsettings files:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">App</span><span class=\"p\">(</span><span class=\"n\">PonyApp</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'settings/default.yml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">defaults</span><span class=\"p\">:</span>\n  <span class=\"n\">defaults_dict</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">)</span>\n\n<span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">init_settings</span><span class=\"p\">(</span><span class=\"n\">defaults_dict</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ProductionApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'settings/production.yml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">settings</span><span class=\"p\">:</span>\n    <span class=\"n\">settings_dict</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"n\">ProductionApp</span><span class=\"o\">.</span><span class=\"n\">init_settings</span><span class=\"p\">(</span><span class=\"n\">settings_dict</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">TestApp</span><span class=\"p\">(</span><span class=\"n\">App</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'settings/test.yml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">settings</span><span class=\"p\">:</span>\n    <span class=\"n\">settings_dict</span> <span class=\"o\">=</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">settings</span><span class=\"p\">)</span>\n\n<span class=\"n\">TestApp</span><span class=\"o\">.</span><span class=\"n\">init_settings</span><span class=\"p\">(</span><span class=\"n\">settings_dict</span><span class=\"p\">)</span>\n</pre>\n<p>The database configuration in the YAML settings\nfiles, depending on the database you use, could\nlook something like:</p>\n<pre><span class=\"nt\">database</span><span class=\"p\">:</span>\n  <span class=\"nt\">provider</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">sqlite</span>\n  <span class=\"nt\">filename</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">app.db</span>\n  <span class=\"nt\">create_db</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">true</span>\n</pre>\n<p>In your start script you setup the database and load\nthe App according to the <tt>RUN_ENV</tt> environment variable:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">morepath</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">.app</span> <span class=\"kn\">import</span> <span class=\"n\">App</span><span class=\"p\">,</span> <span class=\"n\">ProductionApp</span><span class=\"p\">,</span> <span class=\"n\">TestApp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.model</span> <span class=\"kn\">import</span> <span class=\"n\">db</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">setup_db</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">):</span>\n    <span class=\"n\">db_params</span> <span class=\"o\">=</span> <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">settings</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">()</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">bind</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">db_params</span><span class=\"p\">)</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">generate_mapping</span><span class=\"p\">(</span><span class=\"n\">create_tables</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">():</span>\n  <span class=\"n\">morepath</span><span class=\"o\">.</span><span class=\"n\">autoscan</span><span class=\"p\">()</span>\n\n  <span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'RUN_ENV'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'production'</span><span class=\"p\">:</span>\n      <span class=\"n\">ProductionApp</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n      <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">ProductionApp</span><span class=\"p\">()</span>\n  <span class=\"k\">elif</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">getenv</span><span class=\"p\">(</span><span class=\"s1\">'RUN_ENV'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'test'</span><span class=\"p\">:</span>\n      <span class=\"n\">TestApp</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n      <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">TestApp</span><span class=\"p\">()</span>\n  <span class=\"k\">else</span><span class=\"p\">:</span>\n      <span class=\"n\">App</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n      <span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">App</span><span class=\"p\">()</span>\n\n  <span class=\"n\">setup_db</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n  <span class=\"n\">morepath</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n<p>Detail about the database configuration you find\nin the <a href=\"https://docs.ponyorm.com/api_reference.html#database\" rel=\"nofollow\">PonyOrm documentation</a>.</p>\n</div>\n<div id=\"side-effects\">\n<h3>Side effects</h3>\n<p>If you want to trigger side effects (like sending an email or\nwriting to filesystem) on database commits you can emit a signal\nin the <tt>@request.after</tt> of the view which triggers the side effects.</p>\n<p>Like this the side effects will be triggered just before the\ndatabase session gets committed and only if it wasn\u2019t rolled back.</p>\n<p>This example uses <a href=\"https://github.com/morepath/more.emit\" rel=\"nofollow\">more.emit</a>:</p>\n<pre><span class=\"nd\">@App</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">=</span><span class=\"n\">Document</span><span class=\"p\">,</span> <span class=\"n\">request_method</span><span class=\"o\">=</span><span class=\"s1\">'PUT'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">document_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@request</span><span class=\"o\">.</span><span class=\"n\">after</span>\n    <span class=\"k\">def</span> <span class=\"nf\">after</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n        <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">signal</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"s1\">'document_updated'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">)</span>\n</pre>\n<p>Altenatively you can use in your model the PonyORM\n<a href=\"https://docs.ponyorm.com/api_reference.html#after_insert\" rel=\"nofollow\">after_insert()</a>, <a href=\"https://docs.ponyorm.com/api_reference.html#after_update\" rel=\"nofollow\">after_update()</a> or <a href=\"https://docs.ponyorm.com/api_reference.html#after_delete\" rel=\"nofollow\">after_delete()</a>\nentity-hooks.\nThis makes sure that the side effect is triggered\n<strong>after</strong> the database session has committed.</p>\n<p>The drawback is that you don\u2019t have easy access to the\nrequest or app in the model.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.3 (2020-04-26)</h3>\n<ul>\n<li><p><strong>Removed</strong>: Removed support for Python 2.</p>\n<p>You have to upgrade to Python 3 if you want to use this version.</p>\n</li>\n<li><p>Added support for Python 3.6, 3.7 and 3.8 and PyPy 3.6.</p>\n</li>\n<li><p>Make Python 3.7 the default testing environment.</p>\n</li>\n<li><p>Upgrade PonyORM to 0.7.13.</p>\n</li>\n<li><p>Add integration for the Black code formatter.</p>\n</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2 (2017-07-20)</h3>\n<ul>\n<li>Upgrade PonyORM to 0.7.2.</li>\n<li>Use a dictonary for passing parameters to db.bind in examples and tests.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1 (2017-04-22)</h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7104801, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "13addd96553e9d1451a8c9207240a866", "sha256": "8c9bab8ea4c08c27861b9150f047ff09b8debc947a8ff264272993bd77a6bb96"}, "downloads": -1, "filename": "more.pony-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "13addd96553e9d1451a8c9207240a866", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8445, "upload_time": "2017-04-22T15:13:07", "upload_time_iso_8601": "2017-04-22T15:13:07.932456Z", "url": "https://files.pythonhosted.org/packages/17/0c/3e8772df56b7d5a42cd2be577979c8b37d090ddf326abe49088347af9027/more.pony-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "414f3c54c7195de98685de5f839957e9", "sha256": "527f43f3ad402c26fa5b714647f0382637832e764d4f41478fb18ad32e985fc7"}, "downloads": -1, "filename": "more.pony-0.1.tar.gz", "has_sig": false, "md5_digest": "414f3c54c7195de98685de5f839957e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6282, "upload_time": "2017-04-22T15:13:10", "upload_time_iso_8601": "2017-04-22T15:13:10.862346Z", "url": "https://files.pythonhosted.org/packages/65/54/f16100698281176c0f6143cbb7f54f7e2ac3320f071603b698cd91ad5e1c/more.pony-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "74e2576cf0c7678a46362ed14a9cd3cc", "sha256": "3ff97e9c9fe638ed83e3bf7720ecae34784f259243cb4ff1664c4a689dc30f3c"}, "downloads": -1, "filename": "more.pony-0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "74e2576cf0c7678a46362ed14a9cd3cc", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8587, "upload_time": "2017-07-20T19:53:59", "upload_time_iso_8601": "2017-07-20T19:53:59.103683Z", "url": "https://files.pythonhosted.org/packages/7c/0e/c428556c93ed801af9fa7326def5ed072b23ff9ab37f715346996c759bb8/more.pony-0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07bea6d60bdfe8f8e438ca24e97202fc", "sha256": "acc4d0183357bf26ee650baf908c057a70985001d23ef98c9ba8a0eadb8f3c0c"}, "downloads": -1, "filename": "more.pony-0.2.tar.gz", "has_sig": false, "md5_digest": "07bea6d60bdfe8f8e438ca24e97202fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6350, "upload_time": "2017-07-20T19:53:57", "upload_time_iso_8601": "2017-07-20T19:53:57.240018Z", "url": "https://files.pythonhosted.org/packages/93/b4/1dd8ac8025aa3cc7713236a73c30de4b14ea78637636a66f1784052321ae/more.pony-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "e09f544dd3c413106e050a056401fa6c", "sha256": "e44ea79821b8e85574cbc8f86ee75c70138f98be2f1905cfc6c1f005d1021fe2"}, "downloads": -1, "filename": "more.pony-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e09f544dd3c413106e050a056401fa6c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6701, "upload_time": "2020-04-26T12:39:05", "upload_time_iso_8601": "2020-04-26T12:39:05.918137Z", "url": "https://files.pythonhosted.org/packages/db/df/8852103868b3f2036468596a34765ba6ad205cd9f3295c3ccc30a4dee2c6/more.pony-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a9cb0b352b20c631a6f6dc9e01bf900", "sha256": "f5dae05accee3402d7ef9b5d8015b4e28042d9b9e8aac46ddd20d08f8f994e19"}, "downloads": -1, "filename": "more.pony-0.3.tar.gz", "has_sig": false, "md5_digest": "9a9cb0b352b20c631a6f6dc9e01bf900", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6908, "upload_time": "2020-04-26T12:39:07", "upload_time_iso_8601": "2020-04-26T12:39:07.708531Z", "url": "https://files.pythonhosted.org/packages/03/9a/73fbdde507a3b8bd2e472eb2d223b0597552b38668f5c509766dc16b30a7/more.pony-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e09f544dd3c413106e050a056401fa6c", "sha256": "e44ea79821b8e85574cbc8f86ee75c70138f98be2f1905cfc6c1f005d1021fe2"}, "downloads": -1, "filename": "more.pony-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e09f544dd3c413106e050a056401fa6c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6701, "upload_time": "2020-04-26T12:39:05", "upload_time_iso_8601": "2020-04-26T12:39:05.918137Z", "url": "https://files.pythonhosted.org/packages/db/df/8852103868b3f2036468596a34765ba6ad205cd9f3295c3ccc30a4dee2c6/more.pony-0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a9cb0b352b20c631a6f6dc9e01bf900", "sha256": "f5dae05accee3402d7ef9b5d8015b4e28042d9b9e8aac46ddd20d08f8f994e19"}, "downloads": -1, "filename": "more.pony-0.3.tar.gz", "has_sig": false, "md5_digest": "9a9cb0b352b20c631a6f6dc9e01bf900", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6908, "upload_time": "2020-04-26T12:39:07", "upload_time_iso_8601": "2020-04-26T12:39:07.708531Z", "url": "https://files.pythonhosted.org/packages/03/9a/73fbdde507a3b8bd2e472eb2d223b0597552b38668f5c509766dc16b30a7/more.pony-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:49 2020"}