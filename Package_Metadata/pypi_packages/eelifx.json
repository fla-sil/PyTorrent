{"info": {"author": "Chris Speck", "author_email": "cgspeck@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "EELifx\n======\n\n|Master Build Status| \\| `Source <https://github.com/cgspeck/eelifx>`__\n\nAutomatically set your `Lifx globes <https://www.lifx.com/>`__ according\nto player ship game state in\n`EmptyEpsilon <http://daid.github.io/EmptyEpsilon/>`__. It uses the\n`Lifx LAN Protocol <https://lan.developer.lifx.com/>`__ and may control\nany lights that are on the same network as EELifx.\n\nInstallation\n------------\n\nWith Python 3.6+, run ``pip install eelifx``\n(`Virtualenv <http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/>`__\nrecommended).\n\nQuick Start\n-----------\n\n1. Start EmptyEpsilon in another console with the httpserver switch:\n   ``EmptyEpsilon httpserver=8080``\n\n2. Turn on your Lifx lights, make sure they are conn\n\n3. Run EELifx and point it at your server, e.g.\n   ``eelifx run 192.168.1.10`` or ``eelifx run localhost``\n\nAdvanced Usage\n--------------\n\nThe full range of commands are avaliable by running help:\n\n::\n\n    $ eelifx\n    Usage: eelifx [OPTIONS] COMMAND [ARGS]...\n\n      EELifx Copyright (C) 2017 Chris Speck\n\n    Options:\n      --loglevel TEXT  E.g. \"DEBUG\" or \"INFO\"\n      --help           Show this message and exit.\n\n    Commands:\n      grouptest   Execute each rule in succession.\n      queryship   Query EE and set parameters if given.\n      reset       Reset lights to base state.\n      run         Poll and set lights according to game state.\n      showconfig  Print default config to standard out.\n\nCustom Configs\n~~~~~~~~~~~~~~\n\nYour can pass the path to a custom config to the ``run`` and\n``grouptest`` commands with ``--config <FILE>``.\n\nYou can find example configs in `the\nrepo <https://github.com/cgspeck/eelifx/tree/master/configs>`__ or by\nrunning ``eelifx showconfig``\n\nRules and Groups\n~~~~~~~~~~~~~~~~\n\nGroups represent Lifx Groups, and have a match regex defined within the\nconfiguration which tell EELifx which bulbs to apply the groups' rules\nto. The default pattern is ``.*`` (i.e. all groups).\n\nThis tool peroidically polls EmptyEpsilon, parses the game state into a\nship object, and evaluates rule statements in the order in which they\nare defined within each group. If the rule statement returns true then\nits effect is applied, with the following notes:\n\n-  lights are always initially set to their base\\_state\n-  ``set_power`` latches to False, that is, any call to False will\n   override any other call to True within that iteration\n-  ``set_colour`` accepts any colour which the\n   `colour <https://pypi.python.org/pypi/colour/>`__ package supports\n-  the last call to ``set_colour`` overrides any earlier call\n-  ``set_luminance`` accepts a float in range 0 - 1\n-  the last call to ``set_luminance`` overrides any earlier call\n-  the last call to ``set_waveform`` overrides any earlier call\n-  the luminance of any colour set through ``set_colour`` or\n   ``set_waveform`` will be clipped to that group's ``max_luminance``\n-  the luminance of any colour will be multiplied by any value set by\n   ``set_luminance``\n\nWaveform Support\n~~~~~~~~~~~~~~~~\n\nThis doesn't seem to be documented particulararly well, but the source\nof the\n`lifx-gem <https://github.com/LIFX/lifx-gem/blob/master/lib/lifx/protocol/light.rb>`__\nshows that the following waveforms are supported:\n\n::\n\n    SAW = 0\n    SINE = 1\n    HALF_SINE = 2\n    TRIANGLE = 3\n    PULSE = 4\n\n``set_waveform`` takes a dictionary with the following keys: \\* ``hz``\nas an integer \\* ``waveform`` as a string, being one of those named\nabove \\* an optinal ``alt_colour``, being the same format as that given\nto ``set_colour``\n\nLifxCommander\n~~~~~~~~~~~~~\n\nThe methods ``set_colour``, ``set_power``, ``set_waveform`` and\n``set_luminance`` are the only methods on lifx\\_commander which you\nshould call in your config. See example configs for details.\n\nShip object\n~~~~~~~~~~~\n\nThe ship object exposes the following properties:\n\n-  ship.hull - float in range 0 - 1\n-  ship.energy - float in range 0 - 1\n-  ship.alert\\_level - string, 'Normal', 'YELLOW ALERT' or 'RED ALERT'\n\nLicensed under the GPLv3\n\n.. |Master Build Status| image:: https://travis-ci.org/cgspeck/eelifx.svg?branch=master\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/cgspeck/eelifx/archive/0.8.2\n.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cgspeck/eelifx", "keywords": "EmptyEpsilon", "license": "", "maintainer": "", "maintainer_email": "", "name": "eelifx", "package_url": "https://pypi.org/project/eelifx/", "platform": "", "project_url": "https://pypi.org/project/eelifx/", "project_urls": {"Download": "https://github.com/cgspeck/eelifx/archive/0.8.2\n.tar.gz", "Homepage": "https://github.com/cgspeck/eelifx"}, "release_url": "https://pypi.org/project/eelifx/0.8.2/", "requires_dist": null, "requires_python": "", "summary": "Use game state in EmptyEpsilon to control your Lifx globes.", "version": "0.8.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Master Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/046a6c225f271052ee9c7b354a5ebde3595e7314/68747470733a2f2f7472617669732d63692e6f72672f6367737065636b2f65656c6966782e7376673f6272616e63683d6d6173746572\"> | <a href=\"https://github.com/cgspeck/eelifx\" rel=\"nofollow\">Source</a></p>\n<p>Automatically set your <a href=\"https://www.lifx.com/\" rel=\"nofollow\">Lifx globes</a> according\nto player ship game state in\n<a href=\"http://daid.github.io/EmptyEpsilon/\" rel=\"nofollow\">EmptyEpsilon</a>. It uses the\n<a href=\"https://lan.developer.lifx.com/\" rel=\"nofollow\">Lifx LAN Protocol</a> and may control\nany lights that are on the same network as EELifx.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>With Python 3.6+, run <tt>pip install eelifx</tt>\n(<a href=\"http://python-guide-pt-br.readthedocs.io/en/latest/dev/virtualenvs/\" rel=\"nofollow\">Virtualenv</a>\nrecommended).</p>\n</div>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<ol>\n<li>Start EmptyEpsilon in another console with the httpserver switch:\n<tt>EmptyEpsilon httpserver=8080</tt></li>\n<li>Turn on your Lifx lights, make sure they are conn</li>\n<li>Run EELifx and point it at your server, e.g.\n<tt>eelifx run 192.168.1.10</tt> or <tt>eelifx run localhost</tt></li>\n</ol>\n</div>\n<div id=\"advanced-usage\">\n<h2>Advanced Usage</h2>\n<p>The full range of commands are avaliable by running help:</p>\n<pre>$ eelifx\nUsage: eelifx [OPTIONS] COMMAND [ARGS]...\n\n  EELifx Copyright (C) 2017 Chris Speck\n\nOptions:\n  --loglevel TEXT  E.g. \"DEBUG\" or \"INFO\"\n  --help           Show this message and exit.\n\nCommands:\n  grouptest   Execute each rule in succession.\n  queryship   Query EE and set parameters if given.\n  reset       Reset lights to base state.\n  run         Poll and set lights according to game state.\n  showconfig  Print default config to standard out.\n</pre>\n<div id=\"custom-configs\">\n<h3>Custom Configs</h3>\n<p>Your can pass the path to a custom config to the <tt>run</tt> and\n<tt>grouptest</tt> commands with <tt><span class=\"pre\">--config</span> &lt;FILE&gt;</tt>.</p>\n<p>You can find example configs in <a href=\"https://github.com/cgspeck/eelifx/tree/master/configs\" rel=\"nofollow\">the\nrepo</a> or by\nrunning <tt>eelifx showconfig</tt></p>\n</div>\n<div id=\"rules-and-groups\">\n<h3>Rules and Groups</h3>\n<p>Groups represent Lifx Groups, and have a match regex defined within the\nconfiguration which tell EELifx which bulbs to apply the groups\u2019 rules\nto. The default pattern is <tt>.*</tt> (i.e. all groups).</p>\n<p>This tool peroidically polls EmptyEpsilon, parses the game state into a\nship object, and evaluates rule statements in the order in which they\nare defined within each group. If the rule statement returns true then\nits effect is applied, with the following notes:</p>\n<ul>\n<li>lights are always initially set to their base_state</li>\n<li><tt>set_power</tt> latches to False, that is, any call to False will\noverride any other call to True within that iteration</li>\n<li><tt>set_colour</tt> accepts any colour which the\n<a href=\"https://pypi.python.org/pypi/colour/\" rel=\"nofollow\">colour</a> package supports</li>\n<li>the last call to <tt>set_colour</tt> overrides any earlier call</li>\n<li><tt>set_luminance</tt> accepts a float in range 0 - 1</li>\n<li>the last call to <tt>set_luminance</tt> overrides any earlier call</li>\n<li>the last call to <tt>set_waveform</tt> overrides any earlier call</li>\n<li>the luminance of any colour set through <tt>set_colour</tt> or\n<tt>set_waveform</tt> will be clipped to that group\u2019s <tt>max_luminance</tt></li>\n<li>the luminance of any colour will be multiplied by any value set by\n<tt>set_luminance</tt></li>\n</ul>\n</div>\n<div id=\"waveform-support\">\n<h3>Waveform Support</h3>\n<p>This doesn\u2019t seem to be documented particulararly well, but the source\nof the\n<a href=\"https://github.com/LIFX/lifx-gem/blob/master/lib/lifx/protocol/light.rb\" rel=\"nofollow\">lifx-gem</a>\nshows that the following waveforms are supported:</p>\n<pre>SAW = 0\nSINE = 1\nHALF_SINE = 2\nTRIANGLE = 3\nPULSE = 4\n</pre>\n<p><tt>set_waveform</tt> takes a dictionary with the following keys: * <tt>hz</tt>\nas an integer * <tt>waveform</tt> as a string, being one of those named\nabove * an optinal <tt>alt_colour</tt>, being the same format as that given\nto <tt>set_colour</tt></p>\n</div>\n<div id=\"lifxcommander\">\n<h3>LifxCommander</h3>\n<p>The methods <tt>set_colour</tt>, <tt>set_power</tt>, <tt>set_waveform</tt> and\n<tt>set_luminance</tt> are the only methods on lifx_commander which you\nshould call in your config. See example configs for details.</p>\n</div>\n<div id=\"ship-object\">\n<h3>Ship object</h3>\n<p>The ship object exposes the following properties:</p>\n<ul>\n<li>ship.hull - float in range 0 - 1</li>\n<li>ship.energy - float in range 0 - 1</li>\n<li>ship.alert_level - string, \u2018Normal\u2019, \u2018YELLOW ALERT\u2019 or \u2018RED ALERT\u2019</li>\n</ul>\n<p>Licensed under the GPLv3</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2754817, "releases": {"0.8.0": [{"comment_text": "", "digests": {"md5": "74727c887d746b98832edfcc5db4cc36", "sha256": "6820d34c3fefd9ef40fc80466b3763d96fd5ab1f16eb8a5c2f138a94e8a24385"}, "downloads": -1, "filename": "eelifx-0.8.0.tar.gz", "has_sig": false, "md5_digest": "74727c887d746b98832edfcc5db4cc36", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9802, "upload_time": "2017-04-04T12:40:41", "upload_time_iso_8601": "2017-04-04T12:40:41.927917Z", "url": "https://files.pythonhosted.org/packages/e0/74/5d50eb492564b47b0f897802f1e060fa34309e3ef1772b893e8a23510896/eelifx-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "0218f6d0f61c89fdd6526f277b542620", "sha256": "1dd80e0d5ecc9c1ab4760ae6e397e8bdf0920edc722442feaaff70ba093e20ba"}, "downloads": -1, "filename": "eelifx-0.8.1.tar.gz", "has_sig": false, "md5_digest": "0218f6d0f61c89fdd6526f277b542620", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10505, "upload_time": "2017-04-05T12:25:38", "upload_time_iso_8601": "2017-04-05T12:25:38.221493Z", "url": "https://files.pythonhosted.org/packages/c5/84/d7dcad8b9fef893a13834c8641446e9d55861997ced82bcc1079d61e194e/eelifx-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "2aaa5f60509319471951cbcf44095892", "sha256": "1752d1f264965f850a5283e31baf6ee979c81cd8cb724cf167f2ba7dae9b9529"}, "downloads": -1, "filename": "eelifx-0.8.2.tar.gz", "has_sig": false, "md5_digest": "2aaa5f60509319471951cbcf44095892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10499, "upload_time": "2017-04-05T12:27:12", "upload_time_iso_8601": "2017-04-05T12:27:12.548232Z", "url": "https://files.pythonhosted.org/packages/d3/eb/3e13255ae77e11e9029ccd742b408e4bdaa027bb4dc401a2fe110fedbaf6/eelifx-0.8.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2aaa5f60509319471951cbcf44095892", "sha256": "1752d1f264965f850a5283e31baf6ee979c81cd8cb724cf167f2ba7dae9b9529"}, "downloads": -1, "filename": "eelifx-0.8.2.tar.gz", "has_sig": false, "md5_digest": "2aaa5f60509319471951cbcf44095892", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10499, "upload_time": "2017-04-05T12:27:12", "upload_time_iso_8601": "2017-04-05T12:27:12.548232Z", "url": "https://files.pythonhosted.org/packages/d3/eb/3e13255ae77e11e9029ccd742b408e4bdaa027bb4dc401a2fe110fedbaf6/eelifx-0.8.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:25 2020"}