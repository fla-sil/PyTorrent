{"info": {"author": "pyux", "author_email": "maciej.tomaszek@protonmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "\npostgres_restorer\n=================\n\n..\n\n   Simple, lightweight tool that manages test databases during integration tests.\n\n\n   .. image:: https://travis-ci.com/pyux/postgres_restorer.svg?branch=master\n      :target: https://travis-ci.com/pyux/postgres_restorer\n      :alt: Build Status\n\n   .. image:: https://codecov.io/gh/pyux/postgres_restorer/branch/master/graph/badge.svg\n      :target: https://codecov.io/gh/pyux/postgres_restorer\n      :alt: codecov\n\n\n   .. image:: https://img.shields.io/github/release/pyux/postgres_restorer\n      :target: https://GitHub.com/pyux/postgres_restorer/releases/\n      :alt: GitHub release\n\n\n**postgres_restorer**\nprovides fast way of creating/dropping test\ndatabases and resetting/creating schemas before each test. It also\nwraps **psycopg2** enabling querying created database during tests.\nOne instance of PostgresRestorer encapsulates one database,\nif you need to connect to multiple databases, create multiple PostgresRestorer instances, one per tested database.\n\nInstallation\n------------\n\n.. code-block:: sh\n\n   pip install -U postgres_restorer\n\nUsage\n-----\n\n\n#. \n   Import PostgresRestorer object:\n\n   .. code-block:: python\n\n      from postgres_restorer import PostgresRestorer\n\n#. \n   Create fixture that runs before each test and instantiate PostgresRestorer in it (pytest testing framework used in examples):\n\n   .. code-block:: python\n\n      @pytest.fixture(autouse=True)\n      def restorer() -> PostgresRestorer:\n       return PostgresRestorer(\n           server_connection_string='host=localhost user=test1 password=test1 ',\n           test_db_name='test_database',\n           dbup_scripts_path='./dbup_scripts',\n           test_data_scripts_path='./test_data_scripts'\n       )\n\n#. \n   To create database with name specified in 'test_db_name' parameter of PostgresRestorer use:\n\n   .. code-block:: python\n\n      restorer.setup_once()\n\n   If database already exists it will be dropped and recreated.\n\n#. \n   To drop test database after running tests:\n\n   .. code-block:: python\n\n      restorer.teardown_once()\n\n#. \n   To reset/create schema in test database and fill it with test data:\n\n   .. code-block:: python\n\n      restorer.setup()\n\n\n* **dbup_scripts_path** - location of dbup folder (folder with schema creating sql scripts). Expected folder structure: **dbupscripts/folders/scripts** where folders split scripts into chronologically sortable packages. Names can follow different conventions, for example: **month.year**\\ , or **sprint.year**\\ , etc. **First dbup script should contain logic resetting all used in database schemas!**\n  Example:\n\n  .. code-block:: sql\n\n     DROP SCHEMA IF EXISTS public;\n     CREATE SCHEMA public;\n\n\n#. \n   To execute no-return query use:\n\n   .. code-block:: python\n\n      restorer.execute(\n       query='INSERT INTO test_table(name) VALUES(%(name)s)',\n       params={'name': 'test_name'}\n      )\n\n   **PostgresRestorer** autocommits queries so there is no need for manual commit.\n\n#. \n   To fetch data from test database:\n\n   .. code-block:: python\n\n      restorer.fetch(\n       query='SELECT * FROM test_table WHERE name=%(name)s;',\n       params={'name': 'test_name'},\n       first=False\n      )\n\n   If parameter **first** is set to true only first record from executed query is returned.\n\nDevelopment\n-----------\n\nIf you wish to expand **postgres_restorer** possibilities, clone repository (master branch).\n\n.. code-block:: sh\n\n   git clone https://github.com/pyux/postgres_restorer.git\n\nInstall dependencies:\n\n.. code-block:: sh\n\n   pip install -r requirements.txt\n\nAll interface method reside in PostgresRestorer object in *_postgres_restorer.py* file.\n\nYou can run tests for currently developed features by running:\n\n.. code-block:: sh\n\n   pytest test_postgres_restorer.py\n\nThose tests have to be run from inside of *tests* folder since all paths to scripts are declared in relation to it, or you can run **tests_running_script.sh** to achieve same effect.\n\nTo run tests running script:\n\n.. code-block:: sh\n\n   sh tests/tests_running_script.sh\n\nTo run test coverage:\n\n.. code-block:: sh\n\n    chdir tests && pytest --cov=./\n\nRelease History\n---------------\n\n\n* 1.0\n\n    * First version released\n\n* 1.1.1\n\n    * Adding description to pypi package\n\n* 1.1.2\n\n    * Binary distribution\n\nLicense\n-------\n\nDistributed under the **MIT License** license. See ``LICENSE`` file for more information.\n\nGithub link\n===========\n\n`https://github.com/pyux/postgres_restorer <https://github.com/pyux/postgres_restorer>`_\n\nContributing\n------------\n\n\n#. Fork it (https://github.com/pyux/postgres_restorer/fork)\n#. Create your feature branch (\\ ``git checkout -b feature/fooBar``\\ )\n#. Commit your changes (\\ ``git commit -am 'Add some fooBar'``\\ )\n#. Push to the branch (\\ ``git push origin feature/fooBar``\\ )\n#. Create a new Pull Request\n\n**Submits and improvement suggestions are most welcome!**\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/pyux/postgres_restorer/archive/1.1.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyux/postgres_restorer", "keywords": "postgres,integration,tests,restoring,database", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "postgres-restorer", "package_url": "https://pypi.org/project/postgres-restorer/", "platform": "", "project_url": "https://pypi.org/project/postgres-restorer/", "project_urls": {"Download": "https://github.com/pyux/postgres_restorer/archive/1.1.2.tar.gz", "Homepage": "https://github.com/pyux/postgres_restorer"}, "release_url": "https://pypi.org/project/postgres-restorer/1.1.2/", "requires_dist": ["attrs (==19.3.0)", "coverage (==5.1)", "more-itertools (==8.2.0)", "packaging (==20.3)", "pluggy (==0.13.1)", "psycopg2 (==2.8.5)", "py (==1.8.1)", "Pygments (==2.6.1)", "pyparsing (==2.4.7)", "pytest (==5.4.1)", "pytest-cov (==2.8.1)", "six (==1.14.0)", "wcwidth (==0.1.9)"], "requires_python": "", "summary": "Simple, lightweight tool that manages postgres databases during integration tests.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"postgres-restorer\">\n<h2>postgres_restorer</h2>\n<blockquote>\n<p>Simple, lightweight tool that manages test databases during integration tests.</p>\n<a href=\"https://travis-ci.com/pyux/postgres_restorer\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f1e578ac879cb20a2a1808b527c96325cf12c208/68747470733a2f2f7472617669732d63692e636f6d2f707975782f706f7374677265735f726573746f7265722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/pyux/postgres_restorer\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dafe15b57c4e484b17f97ff9e24f02ac0fec0172/68747470733a2f2f636f6465636f762e696f2f67682f707975782f706f7374677265735f726573746f7265722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://GitHub.com/pyux/postgres_restorer/releases/\" rel=\"nofollow\"><img alt=\"GitHub release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53c811c323875b657f9c6ee75c5b5402f10258f5/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f707975782f706f7374677265735f726573746f726572\"></a>\n</blockquote>\n<p><strong>postgres_restorer</strong>\nprovides fast way of creating/dropping test\ndatabases and resetting/creating schemas before each test. It also\nwraps <strong>psycopg2</strong> enabling querying created database during tests.\nOne instance of PostgresRestorer encapsulates one database,\nif you need to connect to multiple databases, create multiple PostgresRestorer instances, one per tested database.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install -U postgres_restorer\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<ol>\n<li><p>Import PostgresRestorer object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">postgres_restorer</span> <span class=\"kn\">import</span> <span class=\"n\">PostgresRestorer</span>\n</pre>\n</li>\n<li><p>Create fixture that runs before each test and instantiate PostgresRestorer in it (pytest testing framework used in examples):</p>\n<pre><span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">fixture</span><span class=\"p\">(</span><span class=\"n\">autouse</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">restorer</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">PostgresRestorer</span><span class=\"p\">:</span>\n <span class=\"k\">return</span> <span class=\"n\">PostgresRestorer</span><span class=\"p\">(</span>\n     <span class=\"n\">server_connection_string</span><span class=\"o\">=</span><span class=\"s1\">'host=localhost user=test1 password=test1 '</span><span class=\"p\">,</span>\n     <span class=\"n\">test_db_name</span><span class=\"o\">=</span><span class=\"s1\">'test_database'</span><span class=\"p\">,</span>\n     <span class=\"n\">dbup_scripts_path</span><span class=\"o\">=</span><span class=\"s1\">'./dbup_scripts'</span><span class=\"p\">,</span>\n     <span class=\"n\">test_data_scripts_path</span><span class=\"o\">=</span><span class=\"s1\">'./test_data_scripts'</span>\n <span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>To create database with name specified in \u2018test_db_name\u2019 parameter of PostgresRestorer use:</p>\n<pre><span class=\"n\">restorer</span><span class=\"o\">.</span><span class=\"n\">setup_once</span><span class=\"p\">()</span>\n</pre>\n<p>If database already exists it will be dropped and recreated.</p>\n</li>\n<li><p>To drop test database after running tests:</p>\n<pre><span class=\"n\">restorer</span><span class=\"o\">.</span><span class=\"n\">teardown_once</span><span class=\"p\">()</span>\n</pre>\n</li>\n<li><p>To reset/create schema in test database and fill it with test data:</p>\n<pre><span class=\"n\">restorer</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">()</span>\n</pre>\n</li>\n</ol>\n<ul>\n<li><p><strong>dbup_scripts_path</strong> - location of dbup folder (folder with schema creating sql scripts). Expected folder structure: <strong>dbupscripts/folders/scripts</strong> where folders split scripts into chronologically sortable packages. Names can follow different conventions, for example: <strong>month.year</strong>, or <strong>sprint.year</strong>, etc. <strong>First dbup script should contain logic resetting all used in database schemas!</strong>\nExample:</p>\n<pre><span class=\"k\">DROP</span> <span class=\"k\">SCHEMA</span> <span class=\"k\">IF</span> <span class=\"k\">EXISTS</span> <span class=\"k\">public</span><span class=\"p\">;</span>\n<span class=\"k\">CREATE</span> <span class=\"k\">SCHEMA</span> <span class=\"k\">public</span><span class=\"p\">;</span>\n</pre>\n</li>\n</ul>\n<ol>\n<li><p>To execute no-return query use:</p>\n<pre><span class=\"n\">restorer</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span>\n <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'INSERT INTO test_table(name) VALUES(</span><span class=\"si\">%(name)s</span><span class=\"s1\">)'</span><span class=\"p\">,</span>\n <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'test_name'</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>PostgresRestorer</strong> autocommits queries so there is no need for manual commit.</p>\n</li>\n<li><p>To fetch data from test database:</p>\n<pre><span class=\"n\">restorer</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span>\n <span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'SELECT * FROM test_table WHERE name=</span><span class=\"si\">%(name)s</span><span class=\"s1\">;'</span><span class=\"p\">,</span>\n <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'test_name'</span><span class=\"p\">},</span>\n <span class=\"n\">first</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n<span class=\"p\">)</span>\n</pre>\n<p>If parameter <strong>first</strong> is set to true only first record from executed query is returned.</p>\n</li>\n</ol>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>If you wish to expand <strong>postgres_restorer</strong> possibilities, clone repository (master branch).</p>\n<pre>git clone https://github.com/pyux/postgres_restorer.git\n</pre>\n<p>Install dependencies:</p>\n<pre>pip install -r requirements.txt\n</pre>\n<p>All interface method reside in PostgresRestorer object in <em>_postgres_restorer.py</em> file.</p>\n<p>You can run tests for currently developed features by running:</p>\n<pre>pytest test_postgres_restorer.py\n</pre>\n<p>Those tests have to be run from inside of <em>tests</em> folder since all paths to scripts are declared in relation to it, or you can run <strong>tests_running_script.sh</strong> to achieve same effect.</p>\n<p>To run tests running script:</p>\n<pre>sh tests/tests_running_script.sh\n</pre>\n<p>To run test coverage:</p>\n<pre>chdir tests <span class=\"o\">&amp;&amp;</span> pytest --cov<span class=\"o\">=</span>./\n</pre>\n</div>\n<div id=\"release-history\">\n<h3>Release History</h3>\n<ul>\n<li><p>1.0</p>\n<blockquote>\n<ul>\n<li>First version released</li>\n</ul>\n</blockquote>\n</li>\n<li><p>1.1.1</p>\n<blockquote>\n<ul>\n<li>Adding description to pypi package</li>\n</ul>\n</blockquote>\n</li>\n<li><p>1.1.2</p>\n<blockquote>\n<ul>\n<li>Binary distribution</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Distributed under the <strong>MIT License</strong> license. See <tt>LICENSE</tt> file for more information.</p>\n</div>\n</div>\n<div id=\"github-link\">\n<h2>Github link</h2>\n<p><a href=\"https://github.com/pyux/postgres_restorer\" rel=\"nofollow\">https://github.com/pyux/postgres_restorer</a></p>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<ol>\n<li>Fork it (<a href=\"https://github.com/pyux/postgres_restorer/fork\" rel=\"nofollow\">https://github.com/pyux/postgres_restorer/fork</a>)</li>\n<li>Create your feature branch (<tt>git checkout <span class=\"pre\">-b</span> feature/fooBar</tt>)</li>\n<li>Commit your changes (<tt>git commit <span class=\"pre\">-am</span> 'Add some fooBar'</tt>)</li>\n<li>Push to the branch (<tt>git push origin feature/fooBar</tt>)</li>\n<li>Create a new Pull Request</li>\n</ol>\n<p><strong>Submits and improvement suggestions are most welcome!</strong></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7125061, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8efc94609863823cfa184cebc09a04c3", "sha256": "2fe068f8369381791220aa01a1793d2bc9c0aadff606d554ffc3ca8170951699"}, "downloads": -1, "filename": "postgres_restorer-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8efc94609863823cfa184cebc09a04c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5217, "upload_time": "2020-04-29T00:16:08", "upload_time_iso_8601": "2020-04-29T00:16:08.097371Z", "url": "https://files.pythonhosted.org/packages/fe/2d/34ba9bb39528e76a42ae9958bc8ce021a35a47c4abe4987d727c94d3f1a0/postgres_restorer-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5d259ff49381c03f5f319c4d6f3c2bca", "sha256": "993dcc02830927410ae092b7aa1fcac174da517657df03bc3cfe2ab81e36caf6"}, "downloads": -1, "filename": "postgres_restorer-1.1.1.tar.gz", "has_sig": false, "md5_digest": "5d259ff49381c03f5f319c4d6f3c2bca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5811, "upload_time": "2020-04-29T00:47:36", "upload_time_iso_8601": "2020-04-29T00:47:36.655163Z", "url": "https://files.pythonhosted.org/packages/d8/b7/bb350ad3f5313fde754402eef3b505acabe0797c3b92acce090417cd4f69/postgres_restorer-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "046bee6678a8fd6441cc534ea364e5ff", "sha256": "9a68a6f823a583e049b671c0bb26abea910191236072f83c99294214f75a3804"}, "downloads": -1, "filename": "postgres_restorer-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "046bee6678a8fd6441cc534ea364e5ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7380, "upload_time": "2020-04-29T01:48:36", "upload_time_iso_8601": "2020-04-29T01:48:36.965401Z", "url": "https://files.pythonhosted.org/packages/41/2d/63388247a50e1859f9915f6bdaab7dfc123fd193627c0a470e081e94694a/postgres_restorer-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2694925f7cde6635894dcfd887e1ac5", "sha256": "223995ba60f8d6bb3e4b37dc4555996b3a4c02671dce01290e02e0461849a6a3"}, "downloads": -1, "filename": "postgres_restorer-1.1.2.tar.gz", "has_sig": false, "md5_digest": "d2694925f7cde6635894dcfd887e1ac5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6868, "upload_time": "2020-04-29T01:48:38", "upload_time_iso_8601": "2020-04-29T01:48:38.223849Z", "url": "https://files.pythonhosted.org/packages/70/7c/feeac6e77914d3a56bbf8d1c3d6c89084cfe2ac81a33956ad64c0c5c62b8/postgres_restorer-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "046bee6678a8fd6441cc534ea364e5ff", "sha256": "9a68a6f823a583e049b671c0bb26abea910191236072f83c99294214f75a3804"}, "downloads": -1, "filename": "postgres_restorer-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "046bee6678a8fd6441cc534ea364e5ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7380, "upload_time": "2020-04-29T01:48:36", "upload_time_iso_8601": "2020-04-29T01:48:36.965401Z", "url": "https://files.pythonhosted.org/packages/41/2d/63388247a50e1859f9915f6bdaab7dfc123fd193627c0a470e081e94694a/postgres_restorer-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2694925f7cde6635894dcfd887e1ac5", "sha256": "223995ba60f8d6bb3e4b37dc4555996b3a4c02671dce01290e02e0461849a6a3"}, "downloads": -1, "filename": "postgres_restorer-1.1.2.tar.gz", "has_sig": false, "md5_digest": "d2694925f7cde6635894dcfd887e1ac5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6868, "upload_time": "2020-04-29T01:48:38", "upload_time_iso_8601": "2020-04-29T01:48:38.223849Z", "url": "https://files.pythonhosted.org/packages/70/7c/feeac6e77914d3a56bbf8d1c3d6c89084cfe2ac81a33956ad64c0c5c62b8/postgres_restorer-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:51:20 2020"}