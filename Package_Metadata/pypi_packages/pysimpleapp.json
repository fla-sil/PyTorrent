{"info": {"author": "Tim Guite", "author_email": "magpieembedded@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "===========\npysimpleapp\n===========\n\n\n.. image:: https://img.shields.io/pypi/v/pysimpleapp.svg\n        :target: https://pypi.python.org/pypi/pysimpleapp\n\n.. image:: https://img.shields.io/travis/MagpieEmbedded/pysimpleapp.svg\n        :target: https://travis-ci.org/MagpieEmbedded/pysimpleapp\n\n.. image:: https://readthedocs.org/projects/pysimpleapp/badge/?version=latest\n        :target: https://pysimpleapp.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nSimple framework for applications in python\n\nAims\n----\n\nThis package is intended to provide the basic components for applications in Python.\nIt provides a white box implementation of multi threaded applications.\n\n**pysimpleapp** welcomes additional base classes and implementations of application methodologies.\n\nThere is often more than one way to do something and **pysimpleapp** tries to support\nthat by providing building blocks rather than solutions.\n\nIt is intended to be GUI framework agnostic, although some common frameworks have been included for demonstration and ease of use.\n\nThere should also be a relatively thorough set of tutorials alongside the main code.\nThis will teach how to use the software and explain why the software is this way.\n\n\n* Source code: https://github.com/MagpieEmbedded/pysimpleapp\n* Documentation: https://pysimpleapp.readthedocs.io.\n* Free software: MIT license\n\nInstallation\n------------\n\n**pysimpleapp** is hosted on `PyPi <https://pypi.org/project/pysimpleapp//>`_ so can be installed with:\n\n.. code-block bash\n\n        pip install pysimpleapp\n\nSimple Examples\n---------------\n\nBelow are some simple examples which have been prepared.\n\nTo understand how they work and how to build more complex applications, please visit the **tutorials** section of the documentation.\n\nThreads\n^^^^^^^\n\nOpen a python session with **pysimpleapp** installed.\n\nImport libraries and classes:\n\n.. code-block:: python\n\n        from pysimpleapp.message import Message\n        from pysimpleapp.threads.examples import ExampleSingleRunThread, ExampleMultiRunThread\n        from queue import Queue\n        from threading import Thread\n\nThreads take a name as the first argument, owner name as the second argument and an input and\noutput queue for communication.\nTheir use will be demonstrated shortly but you can confirm that they inherit from the\n`threading.Thread <https://docs.python.org/3/library/threading.html#thread-objects.>`_ class.\n\nLet's create the input and output queues and an instance of the ExampleSingleRunThread class:\n\n.. code-block:: python\n\n        in_queue = Queue()\n        out_queue = Queue()\n        single_run = ExampleSingleRunThread('Name', 'Owner', in_queue, out_queue)\n        isinstance(single_run, Thread) # returns True\n\nNow, send the singe_run thread a start command.\nThreads in **pysimpleapp** often have some built in commands, but it is very easy to override these and add your own later.\n\nIt is also essential to define how you want a thread to behave through it's *main* function.\nThe ExampleSingleRunThread has been defined to print that it has run.\n\nPut a start message in the input queue:\n\n.. code-block:: python\n\n        # Note the order of owner and name because we are sending from the owner\n        in_queue.put(Message('Owner', 'Name', 'THREAD_START', None))\n\nThis should print: ::\n\n        Running single run thread...\n\ndemonstrating that the thread has run!\n\nYou will also notice that if you send another start command, nothing happens.\nSingle Run Threads execute once and then stop.\n\nNext, make an instance of ExampleMultiRunThread:\n\n.. code-block:: python\n\n        multi_run = ExampleMultiRunThread('Name2', 'Owner', in_queue, out_queue)\n\nMulti Run Threads will run until they are told to end.\nTest that functionality by providing several messages:\n\n.. code-block:: python\n\n        in_queue.put(Message('Owner', 'Name2', 'THREAD_START', None))\n        in_queue.put(Message('Owner', 'Name2', 'THREAD_START', None))\n        in_queue.put(Message('Owner', 'Name2', 'THREAD_START', None))\n\nYou will see that the thread has been counting how many times you asked it to run!\n\nEnd the thread with another built in command:\n\n.. code-block:: python\n\n        in_queue.put(Message('Owner', 'Name2', 'THREAD_END', None))\n\nAfter this, the thread has stopped and will no longer respond to messages.\n\nThis has been a very short introduction to some example threds but there is much more to come!\nContinue learning with the **tutorials** and soon you will be making your own threads for specific requirements.\n\nFeatures\n--------\n\n* TODO\n* Attempt to implement best practices\n* Documentation and tutorials\n\nCredits\n-------\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\n=======\nHistory\n=======\n\n0.1.0 (2019-07-06)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MagpieEmbedded/pysimpleapp", "keywords": "pysimpleapp", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pysimpleapp", "package_url": "https://pypi.org/project/pysimpleapp/", "platform": "", "project_url": "https://pypi.org/project/pysimpleapp/", "project_urls": {"Homepage": "https://github.com/MagpieEmbedded/pysimpleapp"}, "release_url": "https://pypi.org/project/pysimpleapp/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "Simple framework for applications in python", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pysimpleapp\">\n<h2>pysimpleapp</h2>\n<a href=\"https://pypi.python.org/pypi/pysimpleapp\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pysimpleapp.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bbc82a80512003830af8b51aaac826e5da53b41b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f707973696d706c656170702e737667\"></a>\n<a href=\"https://travis-ci.org/MagpieEmbedded/pysimpleapp\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/MagpieEmbedded/pysimpleapp.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62c0384f6596e68702e1909ee38029b293cde93d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f4d6167706965456d6265646465642f707973696d706c656170702e737667\"></a>\n<a href=\"https://pysimpleapp.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f182df204b3201ee866c13e575a46f31188bbb70/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707973696d706c656170702f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Simple framework for applications in python</p>\n<div id=\"aims\">\n<h3>Aims</h3>\n<p>This package is intended to provide the basic components for applications in Python.\nIt provides a white box implementation of multi threaded applications.</p>\n<p><strong>pysimpleapp</strong> welcomes additional base classes and implementations of application methodologies.</p>\n<p>There is often more than one way to do something and <strong>pysimpleapp</strong> tries to support\nthat by providing building blocks rather than solutions.</p>\n<p>It is intended to be GUI framework agnostic, although some common frameworks have been included for demonstration and ease of use.</p>\n<p>There should also be a relatively thorough set of tutorials alongside the main code.\nThis will teach how to use the software and explain why the software is this way.</p>\n<ul>\n<li>Source code: <a href=\"https://github.com/MagpieEmbedded/pysimpleapp\" rel=\"nofollow\">https://github.com/MagpieEmbedded/pysimpleapp</a></li>\n<li>Documentation: <a href=\"https://pysimpleapp.readthedocs.io\" rel=\"nofollow\">https://pysimpleapp.readthedocs.io</a>.</li>\n<li>Free software: MIT license</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p><strong>pysimpleapp</strong> is hosted on <a href=\"https://pypi.org/project/pysimpleapp//\" rel=\"nofollow\">PyPi</a> so can be installed with:</p>\n</div>\n<div id=\"simple-examples\">\n<h3>Simple Examples</h3>\n<p>Below are some simple examples which have been prepared.</p>\n<p>To understand how they work and how to build more complex applications, please visit the <strong>tutorials</strong> section of the documentation.</p>\n<div id=\"threads\">\n<h4>Threads</h4>\n<p>Open a python session with <strong>pysimpleapp</strong> installed.</p>\n<p>Import libraries and classes:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pysimpleapp.message</span> <span class=\"kn\">import</span> <span class=\"n\">Message</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pysimpleapp.threads.examples</span> <span class=\"kn\">import</span> <span class=\"n\">ExampleSingleRunThread</span><span class=\"p\">,</span> <span class=\"n\">ExampleMultiRunThread</span>\n<span class=\"kn\">from</span> <span class=\"nn\">queue</span> <span class=\"kn\">import</span> <span class=\"n\">Queue</span>\n<span class=\"kn\">from</span> <span class=\"nn\">threading</span> <span class=\"kn\">import</span> <span class=\"n\">Thread</span>\n</pre>\n<p>Threads take a name as the first argument, owner name as the second argument and an input and\noutput queue for communication.\nTheir use will be demonstrated shortly but you can confirm that they inherit from the\n<a href=\"https://docs.python.org/3/library/threading.html#thread-objects.\" rel=\"nofollow\">threading.Thread</a> class.</p>\n<p>Let\u2019s create the input and output queues and an instance of the ExampleSingleRunThread class:</p>\n<pre><span class=\"n\">in_queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"n\">out_queue</span> <span class=\"o\">=</span> <span class=\"n\">Queue</span><span class=\"p\">()</span>\n<span class=\"n\">single_run</span> <span class=\"o\">=</span> <span class=\"n\">ExampleSingleRunThread</span><span class=\"p\">(</span><span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"n\">in_queue</span><span class=\"p\">,</span> <span class=\"n\">out_queue</span><span class=\"p\">)</span>\n<span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">single_run</span><span class=\"p\">,</span> <span class=\"n\">Thread</span><span class=\"p\">)</span> <span class=\"c1\"># returns True</span>\n</pre>\n<p>Now, send the singe_run thread a start command.\nThreads in <strong>pysimpleapp</strong> often have some built in commands, but it is very easy to override these and add your own later.</p>\n<p>It is also essential to define how you want a thread to behave through it\u2019s <em>main</em> function.\nThe ExampleSingleRunThread has been defined to print that it has run.</p>\n<p>Put a start message in the input queue:</p>\n<pre><span class=\"c1\"># Note the order of owner and name because we are sending from the owner</span>\n<span class=\"n\">in_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"s1\">'Name'</span><span class=\"p\">,</span> <span class=\"s1\">'THREAD_START'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n</pre>\n<p>This should print:</p>\n<pre>Running single run thread...\n</pre>\n<p>demonstrating that the thread has run!</p>\n<p>You will also notice that if you send another start command, nothing happens.\nSingle Run Threads execute once and then stop.</p>\n<p>Next, make an instance of ExampleMultiRunThread:</p>\n<pre><span class=\"n\">multi_run</span> <span class=\"o\">=</span> <span class=\"n\">ExampleMultiRunThread</span><span class=\"p\">(</span><span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"n\">in_queue</span><span class=\"p\">,</span> <span class=\"n\">out_queue</span><span class=\"p\">)</span>\n</pre>\n<p>Multi Run Threads will run until they are told to end.\nTest that functionality by providing several messages:</p>\n<pre><span class=\"n\">in_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'THREAD_START'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"n\">in_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'THREAD_START'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n<span class=\"n\">in_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'THREAD_START'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n</pre>\n<p>You will see that the thread has been counting how many times you asked it to run!</p>\n<p>End the thread with another built in command:</p>\n<pre><span class=\"n\">in_queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Message</span><span class=\"p\">(</span><span class=\"s1\">'Owner'</span><span class=\"p\">,</span> <span class=\"s1\">'Name2'</span><span class=\"p\">,</span> <span class=\"s1\">'THREAD_END'</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">))</span>\n</pre>\n<p>After this, the thread has stopped and will no longer respond to messages.</p>\n<p>This has been a very short introduction to some example threds but there is much more to come!\nContinue learning with the <strong>tutorials</strong> and soon you will be making your own threads for specific requirements.</p>\n</div>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>TODO</li>\n<li>Attempt to implement best practices</li>\n<li>Documentation and tutorials</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2019-07-06)</span></h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5513451, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "5f195e4aa9bb56697cc885b16ee70f75", "sha256": "c10945d79be179d70392fd1de08dbb76880898f15a15e07e58e4bd007292b854"}, "downloads": -1, "filename": "pysimpleapp-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f195e4aa9bb56697cc885b16ee70f75", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7042, "upload_time": "2019-07-08T18:03:34", "upload_time_iso_8601": "2019-07-08T18:03:34.219683Z", "url": "https://files.pythonhosted.org/packages/db/d2/6ccc238be24f03556fd904c6d7747f50665a5116fd5b79dd71c00d9a01bc/pysimpleapp-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c87329e3754a4e931a74e59a9ca848bb", "sha256": "a46f9461aa7dfec40e24f7cb971dabae578a0924db0d56bd265184bac3589b08"}, "downloads": -1, "filename": "pysimpleapp-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c87329e3754a4e931a74e59a9ca848bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17137, "upload_time": "2019-07-08T18:03:37", "upload_time_iso_8601": "2019-07-08T18:03:37.218042Z", "url": "https://files.pythonhosted.org/packages/8e/3a/44f7152596caf4a295f1c380ab191955cbc3c63ef9330f5d28b18391cd98/pysimpleapp-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1e161bae39c996b94939366cf7facf70", "sha256": "8b37139f070ed599bf97baca9a0b0296422889c1ef3e31482fd5af1630df6601"}, "downloads": -1, "filename": "pysimpleapp-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e161bae39c996b94939366cf7facf70", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11624, "upload_time": "2019-07-10T18:32:41", "upload_time_iso_8601": "2019-07-10T18:32:41.236032Z", "url": "https://files.pythonhosted.org/packages/89/54/1c41934062a7817f355102d2e9302630eee62c03a4dba2b7ffb56fb7589b/pysimpleapp-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4902c54352e44fd2c8093dd3c3b2e191", "sha256": "77d35383bbf20fe972064094235cfc11abe8500cc163f98bf82afa451f19bf5d"}, "downloads": -1, "filename": "pysimpleapp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4902c54352e44fd2c8093dd3c3b2e191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22870, "upload_time": "2019-07-10T18:32:43", "upload_time_iso_8601": "2019-07-10T18:32:43.387201Z", "url": "https://files.pythonhosted.org/packages/ba/65/6cc6c8985802dc8595c9456e107353b9a2eb53f91de301d39ea6da264a1a/pysimpleapp-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e161bae39c996b94939366cf7facf70", "sha256": "8b37139f070ed599bf97baca9a0b0296422889c1ef3e31482fd5af1630df6601"}, "downloads": -1, "filename": "pysimpleapp-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1e161bae39c996b94939366cf7facf70", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 11624, "upload_time": "2019-07-10T18:32:41", "upload_time_iso_8601": "2019-07-10T18:32:41.236032Z", "url": "https://files.pythonhosted.org/packages/89/54/1c41934062a7817f355102d2e9302630eee62c03a4dba2b7ffb56fb7589b/pysimpleapp-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4902c54352e44fd2c8093dd3c3b2e191", "sha256": "77d35383bbf20fe972064094235cfc11abe8500cc163f98bf82afa451f19bf5d"}, "downloads": -1, "filename": "pysimpleapp-0.1.3.tar.gz", "has_sig": false, "md5_digest": "4902c54352e44fd2c8093dd3c3b2e191", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22870, "upload_time": "2019-07-10T18:32:43", "upload_time_iso_8601": "2019-07-10T18:32:43.387201Z", "url": "https://files.pythonhosted.org/packages/ba/65/6cc6c8985802dc8595c9456e107353b9a2eb53f91de301d39ea6da264a1a/pysimpleapp-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:44 2020"}