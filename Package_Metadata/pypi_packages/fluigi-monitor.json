{"info": {"author": "xiaxin", "author_email": "xiaxin0202@foxmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## Luigi Monitor\n\n[![Pypi Latest Version](https://img.shields.io/pypi/v/luigi-monitor.svg)](https://img.shields.io/pypi/v/luigi-monitor.svg)\n[![License](https://img.shields.io/pypi/l/luigi-monitor.svg)](https://img.shields.io/pypi/l/luigi-monitor.svg)\n[![Python Versions](https://img.shields.io/pypi/pyversions/luigi-monitor.svg)](https://img.shields.io/pypi/pyversions/luigi-monitor.svg)\n[![Pypi Format](https://img.shields.io/pypi/format/luigi-monitor.svg)](https://img.shields.io/pypi/format/luigi-monitor.svg)\n[![Build Status](https://travis-ci.com/hudl/luigi-monitor.svg?branch=master)](https://travis-ci.com/hudl/luigi-monitor)\n\n\n![message](https://raw.github.com/hudl/luigi-monitor/master/message.png)\n\nSend summary messages of your Luigi jobs to Slack.\n\n### Overview\n\n[Luigi](https://github.com/spotify/luigi) is a great tool for making\njob pipelines, but it's hard to know the status of a run. Luigi has\nsupport for error emails, but this requires configuring your machine\nto send email, which is a hassle for short-lived EMR clusters. Further,\nit sends an email for every failure, which can quickly swamp your inbox.\n\nBy contrast, this tool gathers all your failures and missing dependencies\nand sends a summary Slack message when the job is finished.\n\n### Usage\n\nWith default app username:\n```python\nimport luigi\nfrom luigi_monitor import monitor\n\n...\n\nif __name__ == \"__main__\":\n    with monitor(slack_url=<your_slack_url>, max_print=10):\n        luigi.run(main_task_cls=MainClass)\n\n```\n\nWith dynamic app username:\n```python\nimport luigi\nfrom luigi_monitor import monitor\n\n...\n\nif __name__ == \"__main__\":\n    with monitor(slack_url=<your_slack_url>, max_print=10, username=\"FooBar Monitor\"):\n        luigi.run(main_task_cls=MainClass)\n\n```\n\nMonitoring and notifying on various events:\n\nCurrently supports: `SUCCESS`, `DEPENDENCY_MISSING`, and `FAILURE` \n\nBy default, all three of the above are monitored and notified on. If, `SUCCESS` event is monitored and \nall tasks succeed then the notification text is \"Job ran successfully\" instead of listing _all_ \nsuccessful tasks. \n\n```python\nimport luigi\nfrom luigi_monitor import monitor\n\n...\n\nif __name__ == \"__main__\":\n    with monitor(slack_url=<your_slack_url>, events=['DEPENDENCY_MISSING', 'FAILURE']):\n        luigi.run(main_task_cls=MainClass)\n```\n\nAlternatively:\n\n`luigi-monitor --module path.to.module TaskName`\n\nNB: if you plan to use luigi-monitor from the command line, set options using `luigi.cfg`:\n```\n[luigi-monitor]\nslack_url=<slack_hook>\nmax_print=<int>\nusername=<string>\n```\n\n\nThis is a work in progress. Particularly, note that:\n\n* It only sends notifications via Slack", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Foristkirito/luigi-monitor", "keywords": "luigi", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fluigi-monitor", "package_url": "https://pypi.org/project/fluigi-monitor/", "platform": "", "project_url": "https://pypi.org/project/fluigi-monitor/", "project_urls": {"Homepage": "https://github.com/Foristkirito/luigi-monitor"}, "release_url": "https://pypi.org/project/fluigi-monitor/1.1.6/", "requires_dist": null, "requires_python": "", "summary": "Send summary messages of your Luigi jobs to Slack.", "version": "1.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Luigi Monitor</h2>\n<p><a href=\"https://img.shields.io/pypi/v/luigi-monitor.svg\" rel=\"nofollow\"><img alt=\"Pypi Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae70871d6e7339a03c4d816a83ca2c8cfc545d9c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c756967692d6d6f6e69746f722e737667\"></a>\n<a href=\"https://img.shields.io/pypi/l/luigi-monitor.svg\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5e1c9b6fa8bac777aaea3246eaa95bc3fa27c57/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6c756967692d6d6f6e69746f722e737667\"></a>\n<a href=\"https://img.shields.io/pypi/pyversions/luigi-monitor.svg\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/91d08f489928a67cdf59330107c0e05ba63310f6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6c756967692d6d6f6e69746f722e737667\"></a>\n<a href=\"https://img.shields.io/pypi/format/luigi-monitor.svg\" rel=\"nofollow\"><img alt=\"Pypi Format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3407f41ee34c3b2ce5d729401ff53532c20b11f2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f666f726d61742f6c756967692d6d6f6e69746f722e737667\"></a>\n<a href=\"https://travis-ci.com/hudl/luigi-monitor\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0854ee3afb12b2eff2e77c8bb5ca56d772c2805/68747470733a2f2f7472617669732d63692e636f6d2f6875646c2f6c756967692d6d6f6e69746f722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><img alt=\"message\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d710fd0f02cba2e009ae283c1c501baede2d7d0a/68747470733a2f2f7261772e6769746875622e636f6d2f6875646c2f6c756967692d6d6f6e69746f722f6d61737465722f6d6573736167652e706e67\"></p>\n<p>Send summary messages of your Luigi jobs to Slack.</p>\n<h3>Overview</h3>\n<p><a href=\"https://github.com/spotify/luigi\" rel=\"nofollow\">Luigi</a> is a great tool for making\njob pipelines, but it's hard to know the status of a run. Luigi has\nsupport for error emails, but this requires configuring your machine\nto send email, which is a hassle for short-lived EMR clusters. Further,\nit sends an email for every failure, which can quickly swamp your inbox.</p>\n<p>By contrast, this tool gathers all your failures and missing dependencies\nand sends a summary Slack message when the job is finished.</p>\n<h3>Usage</h3>\n<p>With default app username:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luigi_monitor</span> <span class=\"kn\">import</span> <span class=\"n\">monitor</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">monitor</span><span class=\"p\">(</span><span class=\"n\">slack_url</span><span class=\"o\">=&lt;</span><span class=\"n\">your_slack_url</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">max_print</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">):</span>\n        <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main_task_cls</span><span class=\"o\">=</span><span class=\"n\">MainClass</span><span class=\"p\">)</span>\n</pre>\n<p>With dynamic app username:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luigi_monitor</span> <span class=\"kn\">import</span> <span class=\"n\">monitor</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">monitor</span><span class=\"p\">(</span><span class=\"n\">slack_url</span><span class=\"o\">=&lt;</span><span class=\"n\">your_slack_url</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">max_print</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">username</span><span class=\"o\">=</span><span class=\"s2\">\"FooBar Monitor\"</span><span class=\"p\">):</span>\n        <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main_task_cls</span><span class=\"o\">=</span><span class=\"n\">MainClass</span><span class=\"p\">)</span>\n</pre>\n<p>Monitoring and notifying on various events:</p>\n<p>Currently supports: <code>SUCCESS</code>, <code>DEPENDENCY_MISSING</code>, and <code>FAILURE</code></p>\n<p>By default, all three of the above are monitored and notified on. If, <code>SUCCESS</code> event is monitored and\nall tasks succeed then the notification text is \"Job ran successfully\" instead of listing <em>all</em>\nsuccessful tasks.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">luigi</span>\n<span class=\"kn\">from</span> <span class=\"nn\">luigi_monitor</span> <span class=\"kn\">import</span> <span class=\"n\">monitor</span>\n\n<span class=\"o\">...</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"n\">monitor</span><span class=\"p\">(</span><span class=\"n\">slack_url</span><span class=\"o\">=&lt;</span><span class=\"n\">your_slack_url</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">events</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'DEPENDENCY_MISSING'</span><span class=\"p\">,</span> <span class=\"s1\">'FAILURE'</span><span class=\"p\">]):</span>\n        <span class=\"n\">luigi</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main_task_cls</span><span class=\"o\">=</span><span class=\"n\">MainClass</span><span class=\"p\">)</span>\n</pre>\n<p>Alternatively:</p>\n<p><code>luigi-monitor --module path.to.module TaskName</code></p>\n<p>NB: if you plan to use luigi-monitor from the command line, set options using <code>luigi.cfg</code>:</p>\n<pre><code>[luigi-monitor]\nslack_url=&lt;slack_hook&gt;\nmax_print=&lt;int&gt;\nusername=&lt;string&gt;\n</code></pre>\n<p>This is a work in progress. Particularly, note that:</p>\n<ul>\n<li>It only sends notifications via Slack</li>\n</ul>\n\n          </div>"}, "last_serial": 5674337, "releases": {"1.1.4": [{"comment_text": "", "digests": {"md5": "f53d35e538fb4ef2fcee8c1f064a847e", "sha256": "7be886c579f97968cc927c707e55610f43edd3d78b8fc496f381baedfb07d484"}, "downloads": -1, "filename": "fluigi_monitor-1.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f53d35e538fb4ef2fcee8c1f064a847e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5132, "upload_time": "2019-07-12T03:40:44", "upload_time_iso_8601": "2019-07-12T03:40:44.484148Z", "url": "https://files.pythonhosted.org/packages/f7/18/25bb57b6e1e1f2e859026ad98dda72ba4760fab4e8d6cd73c96fafe24719/fluigi_monitor-1.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5997e0052926e7651722024e311515b7", "sha256": "22a9914c696429b5640a34981e3e359135c6c56ca7667d957c14a0cb6303a07e"}, "downloads": -1, "filename": "fluigi-monitor-1.1.4.tar.gz", "has_sig": false, "md5_digest": "5997e0052926e7651722024e311515b7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4620, "upload_time": "2019-07-12T03:25:55", "upload_time_iso_8601": "2019-07-12T03:25:55.812470Z", "url": "https://files.pythonhosted.org/packages/4f/8a/9ae876df1acc37268cde2271df601c174c504e68f91b1dd010174e4dece1/fluigi-monitor-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "da97be46f745484ecca645a485f7dcdb", "sha256": "8b90acf28c0744dee8de01d55f22aada644795970849001efe151e76f07d3b34"}, "downloads": -1, "filename": "fluigi_monitor-1.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da97be46f745484ecca645a485f7dcdb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 7462, "upload_time": "2019-07-12T03:45:26", "upload_time_iso_8601": "2019-07-12T03:45:26.225618Z", "url": "https://files.pythonhosted.org/packages/35/18/d07b5fbce039adefd69e16ef6abf07b9659c806d6f4afb9453d43e33ba09/fluigi_monitor-1.1.5-py2.py3-none-any.whl", "yanked": false}], "1.1.6": [{"comment_text": "", "digests": {"md5": "da258b31999d653f99c935e35e257def", "sha256": "f27522597276f1a0345e3f6cd46d9f43d2446c8ecb2352342cf8117a7e6b358c"}, "downloads": -1, "filename": "fluigi-monitor-1.1.6.tar.gz", "has_sig": false, "md5_digest": "da258b31999d653f99c935e35e257def", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4569, "upload_time": "2019-08-14T01:40:41", "upload_time_iso_8601": "2019-08-14T01:40:41.678185Z", "url": "https://files.pythonhosted.org/packages/42/d2/6475dbbccbf8311d0b1c2006edf83a5b626b6f8aa1f622ba898be5e30efe/fluigi-monitor-1.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da258b31999d653f99c935e35e257def", "sha256": "f27522597276f1a0345e3f6cd46d9f43d2446c8ecb2352342cf8117a7e6b358c"}, "downloads": -1, "filename": "fluigi-monitor-1.1.6.tar.gz", "has_sig": false, "md5_digest": "da258b31999d653f99c935e35e257def", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4569, "upload_time": "2019-08-14T01:40:41", "upload_time_iso_8601": "2019-08-14T01:40:41.678185Z", "url": "https://files.pythonhosted.org/packages/42/d2/6475dbbccbf8311d0b1c2006edf83a5b626b6f8aa1f622ba898be5e30efe/fluigi-monitor-1.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:26 2020"}