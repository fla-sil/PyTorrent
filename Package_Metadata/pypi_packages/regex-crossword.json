{"info": {"author": "Divo Kaplan", "author_email": "divokaplan@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console :: Curses", "Intended Audience :: Education", "Intended Audience :: Other Audience", "License :: OSI Approved :: MIT License", "Operating System :: Unix", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Education", "Topic :: Games/Entertainment :: Puzzle Games"], "description": "# Regex Crossword\n\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n[![PyPI pyversions](https://img.shields.io/pypi/pyversions/regex_crossword.svg)](https://pypi.python.org/pypi/regex_crossword/)\n[![PyPI version fury.io](https://badge.fury.io/py/regex_crossword.svg)](https://pypi.python.org/pypi/regex_crossword/)\n[![Code style: black](https://img.shields.io/badge/code%20style-black-000000.svg)](https://github.com/ambv/black)\n\nTerminal Freaks rejoice!\n\nBased on the [Regex Crossword](https://regexcrossword.com/), this is an implementation written in pure python using only the standard library to play the game offline entirely from your shell.\n\nIf you aren't familiar with the concpet of a regex crossword, it's a blank crossword grid that you need to fill so that each row and column will match the specified regex. It's a fun exercise to your regex abilities and an interactive way to learn about them  and practice while playing.\n\nI'm a bit of a terminal freak myself and so the moment I started playing the wonderful online version it seemed so natural to me that there needs to be a version of the concept playable from the shell, so I made one using nothing but Python's `curses` module.\n\n## Installation\n\nUse the Python package manager [pip](https://pip.pypa.io/en/stable/) to install `regex_crossword`.\n\n```bash\npip install regex_crossword\n```\n\nTo install the scraper functionality as well (more on this below) use:\n\n```bash\npip install regex_crossword[scraper]\n```\n\n> Note: the scraper uses the Selenium 3rd party package that might need extra setup to be used (specifically the Chrome WebDriver). If you encounter any problems I advise you to check out their [installation guide](https://selenium-python.readthedocs.io/installation.html).\n\n## Usage\n\nOnce installed in your environment, simply type `regex_crossword` from your terminal and start playing!\n\n### Loading level packs\n\nWhen the game starts it will attempt to load \"level packs\" for it to use. It looks for them in the following places in descending order:\n\n1. First, it will look wherever the `--level-packs` option was pointing when invoking the game command (for a full list of all commands use the `-h` or `--help` flag).\n1. If no option was specified, it will look wherever the `REGEXCW_LEVEL_PACKS` environment variable is pointing, if it exists.\n1. Lastly and by default, it will search for a directory called `level_packs` in the current working directory.\n\nIf all of this fails (or the directory has no packs), an error will pop up informing you no level packs were found.\n\n### Getting level packs\n\nWhen trying to get level packs you have several options:\n\n- Use the `--scrape` flag (this requires you to install the `scraper` extra). This will scrape some online resources and create level packs based on them for you to load into the offline version.\n- Create your own level packs!\n\n#### Creating your own level packs\n\nLevel packs are simply JSON files who follow this format:\n```json\n[\n    {\n        \"title\": \"Beatles\",\n        \"up_to_down\": [\n            \"[^SPEAK]+\",\n            \"EP|IP|EF\"\n        ],\n        \"left_to_right\": [\n            \"HE|LL|O+\",\n            \"[PLEASE]+\"\n        ],\n    },\n    {\n        \"title\": \"Pisco Sour\",\n        \"up_to_down\": [\n            \"(MA|LM)\",\n            \"[^MESH]+\"\n        ],\n        \"left_to_right\": [\n            \"[LINE]+\",\n            \"[LAM]+\"\n        ],\n        \"right_to_left\": [\n            \"[ISLE]+\",\n            \"[MALE]+\"\n        ],\n        \"down_to_up\": [\n            \"[LAME]*\",\n            \"[^LES]+\"\n        ]\n    },\n]\n```\n\nThe main file json is a list of smaller dictionaries who each implement a \"level\" format:\n\n- `title` - the title of the level.\n- `up_to_down` - the regexes who will attempt to match the columns from top to bottom (specified from left to right)\n- `left_to_right` - the regexes who will attempt to match the rows from left to right (specified from top to bottom)\n- `down_to_up` - same as `up_to_down` but will attempt to match the columns from bottom to top.\n- `right_to_left` - same as `left_to_right` but will attempt to match the rows from right to left.\n\n## License\n\n[MIT](LICENSE.txt)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DivoK/regex_crossword", "keywords": "terminal curses game regex crossword educational", "license": "", "maintainer": "", "maintainer_email": "", "name": "regex-crossword", "package_url": "https://pypi.org/project/regex-crossword/", "platform": "", "project_url": "https://pypi.org/project/regex-crossword/", "project_urls": {"Homepage": "https://github.com/DivoK/regex_crossword"}, "release_url": "https://pypi.org/project/regex-crossword/0.1.0/", "requires_dist": ["selenium ; extra == 'scraper'", "beautifulsoup4 ; extra == 'scraper'", "loguru ; extra == 'scraper'"], "requires_python": ">=3.7", "summary": "A Python implementation of a Regex Crossword in the terminal.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Regex Crossword</h1>\n<p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/regex_crossword/\" rel=\"nofollow\"><img alt=\"PyPI pyversions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a71387c673e52dcbe513a1afef1d3d1fcbea1505/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f72656765785f63726f7373776f72642e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/regex_crossword/\" rel=\"nofollow\"><img alt=\"PyPI version fury.io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fdfba526bfe22c8e57a8043fc5ceb1880de0031/68747470733a2f2f62616467652e667572792e696f2f70792f72656765785f63726f7373776f72642e737667\"></a>\n<a href=\"https://github.com/ambv/black\" rel=\"nofollow\"><img alt=\"Code style: black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<p>Terminal Freaks rejoice!</p>\n<p>Based on the <a href=\"https://regexcrossword.com/\" rel=\"nofollow\">Regex Crossword</a>, this is an implementation written in pure python using only the standard library to play the game offline entirely from your shell.</p>\n<p>If you aren't familiar with the concpet of a regex crossword, it's a blank crossword grid that you need to fill so that each row and column will match the specified regex. It's a fun exercise to your regex abilities and an interactive way to learn about them  and practice while playing.</p>\n<p>I'm a bit of a terminal freak myself and so the moment I started playing the wonderful online version it seemed so natural to me that there needs to be a version of the concept playable from the shell, so I made one using nothing but Python's <code>curses</code> module.</p>\n<h2>Installation</h2>\n<p>Use the Python package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install <code>regex_crossword</code>.</p>\n<pre>pip install regex_crossword\n</pre>\n<p>To install the scraper functionality as well (more on this below) use:</p>\n<pre>pip install regex_crossword<span class=\"o\">[</span>scraper<span class=\"o\">]</span>\n</pre>\n<blockquote>\n<p>Note: the scraper uses the Selenium 3rd party package that might need extra setup to be used (specifically the Chrome WebDriver). If you encounter any problems I advise you to check out their <a href=\"https://selenium-python.readthedocs.io/installation.html\" rel=\"nofollow\">installation guide</a>.</p>\n</blockquote>\n<h2>Usage</h2>\n<p>Once installed in your environment, simply type <code>regex_crossword</code> from your terminal and start playing!</p>\n<h3>Loading level packs</h3>\n<p>When the game starts it will attempt to load \"level packs\" for it to use. It looks for them in the following places in descending order:</p>\n<ol>\n<li>First, it will look wherever the <code>--level-packs</code> option was pointing when invoking the game command (for a full list of all commands use the <code>-h</code> or <code>--help</code> flag).</li>\n<li>If no option was specified, it will look wherever the <code>REGEXCW_LEVEL_PACKS</code> environment variable is pointing, if it exists.</li>\n<li>Lastly and by default, it will search for a directory called <code>level_packs</code> in the current working directory.</li>\n</ol>\n<p>If all of this fails (or the directory has no packs), an error will pop up informing you no level packs were found.</p>\n<h3>Getting level packs</h3>\n<p>When trying to get level packs you have several options:</p>\n<ul>\n<li>Use the <code>--scrape</code> flag (this requires you to install the <code>scraper</code> extra). This will scrape some online resources and create level packs based on them for you to load into the offline version.</li>\n<li>Create your own level packs!</li>\n</ul>\n<h4>Creating your own level packs</h4>\n<p>Level packs are simply JSON files who follow this format:</p>\n<pre><span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Beatles\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"up_to_down\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"[^SPEAK]+\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"EP|IP|EF\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"left_to_right\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"HE|LL|O+\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"[PLEASE]+\"</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Pisco Sour\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"up_to_down\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"(MA|LM)\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"[^MESH]+\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"left_to_right\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"[LINE]+\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"[LAM]+\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"right_to_left\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"[ISLE]+\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"[MALE]+\"</span>\n        <span class=\"p\">],</span>\n        <span class=\"nt\">\"down_to_up\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s2\">\"[LAME]*\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"[^LES]+\"</span>\n        <span class=\"p\">]</span>\n    <span class=\"p\">},</span>\n<span class=\"p\">]</span>\n</pre>\n<p>The main file json is a list of smaller dictionaries who each implement a \"level\" format:</p>\n<ul>\n<li><code>title</code> - the title of the level.</li>\n<li><code>up_to_down</code> - the regexes who will attempt to match the columns from top to bottom (specified from left to right)</li>\n<li><code>left_to_right</code> - the regexes who will attempt to match the rows from left to right (specified from top to bottom)</li>\n<li><code>down_to_up</code> - same as <code>up_to_down</code> but will attempt to match the columns from bottom to top.</li>\n<li><code>right_to_left</code> - same as <code>left_to_right</code> but will attempt to match the rows from right to left.</li>\n</ul>\n<h2>License</h2>\n<p><a href=\"LICENSE.txt\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 5874074, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "222e5325bba75d777a967470243ef75f", "sha256": "3687eb3040de38920fa95139b0811038caf83aa176900c2ec59c0beb68e61848"}, "downloads": -1, "filename": "regex_crossword-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "222e5325bba75d777a967470243ef75f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14788, "upload_time": "2019-09-23T14:50:50", "upload_time_iso_8601": "2019-09-23T14:50:50.898781Z", "url": "https://files.pythonhosted.org/packages/a3/5b/884afcb245013b80fad21368593f1a65046b6c6e0d5900ce63a935103280/regex_crossword-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44e50fe32cd43bd7c58f8fd96d652d3e", "sha256": "12a64b5e0f1a2a78793707d8fb65184be6908f5c8b81f3602925892dfaa761ba"}, "downloads": -1, "filename": "regex_crossword-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44e50fe32cd43bd7c58f8fd96d652d3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13018, "upload_time": "2019-09-23T14:50:54", "upload_time_iso_8601": "2019-09-23T14:50:54.003868Z", "url": "https://files.pythonhosted.org/packages/6c/8c/9ad49310099099c5ecb5d70a39f66161a9eea9d0699b226c442bb3f48cab/regex_crossword-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "222e5325bba75d777a967470243ef75f", "sha256": "3687eb3040de38920fa95139b0811038caf83aa176900c2ec59c0beb68e61848"}, "downloads": -1, "filename": "regex_crossword-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "222e5325bba75d777a967470243ef75f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 14788, "upload_time": "2019-09-23T14:50:50", "upload_time_iso_8601": "2019-09-23T14:50:50.898781Z", "url": "https://files.pythonhosted.org/packages/a3/5b/884afcb245013b80fad21368593f1a65046b6c6e0d5900ce63a935103280/regex_crossword-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44e50fe32cd43bd7c58f8fd96d652d3e", "sha256": "12a64b5e0f1a2a78793707d8fb65184be6908f5c8b81f3602925892dfaa761ba"}, "downloads": -1, "filename": "regex_crossword-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44e50fe32cd43bd7c58f8fd96d652d3e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13018, "upload_time": "2019-09-23T14:50:54", "upload_time_iso_8601": "2019-09-23T14:50:54.003868Z", "url": "https://files.pythonhosted.org/packages/6c/8c/9ad49310099099c5ecb5d70a39f66161a9eea9d0699b226c442bb3f48cab/regex_crossword-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:05:13 2020"}