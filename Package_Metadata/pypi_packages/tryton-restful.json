{"info": {"author": "Openlabs Technologies and Consulting (P) Ltd.", "author_email": "info@openlabs.co.in", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Plugins", "Framework :: Tryton", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Office/Business"], "description": "Tryton Restful\n==============\n\nA REST API for Tryton Models\n\nInstallation\n------------\n\nInstall from python package index::\n\n    pip install tryton-restful\n\nUsage\n-----\n\nOn installation you should be able to use the `tryton_restful` script which\nruns a local development server.\n\n.. code:: shell\n\n   tryton_restful --help\n\n    Usage: tryton_restful [OPTIONS] HOST PORT\n\n      Runs the application on a local development server.\n\n    Options:\n      -c, --config TEXT            Path to tryton configuration file\n      --debug\n      --threaded / --not-threaded  should the process handle each request in a\n                                   separate thread?\n      --help                       Show this message and exit.\n\nYou can run the server by::\n\n    tryton_restful -c /path/to/tryton/config\n\n\n.. tip::\n\n   You can also specify the config file using environment variables.\n\n   export TRYTON-CONFIG=/path/to/tryton/config\n\n\nRest API Endpoints:\n-------------------\n\n/<dbname>/login\n````````````````\n===== ========================================================================\nPOST   Expects `login` and `password` as form data and returns a JSON of\n       user ID and session to be used for subsequent requests\n===== ========================================================================\n\n.. code:: python\n\n    import requests\n    import json\n    \n    DATABASE_NAME = 'rest'\n    BASE_PATH = 'http://localhost:9000/' + DATABASE_NAME\n    \n    login_result = requests.post(BASE_PATH + '/login', data={'login': 'admin', 'password': 'admin'})\n    tryton_session = login_result.json()\n    print tryton_session\n\n.. parsed-literal::\n\n    {u'session': u'966689963c0a4a939cb326c1451b0fe9', u'id': 1}\n\n\n/<dbname>/model/<model.name>\n````````````````````````````````\n\n======== =====================================================================\nGET      Return a list of records (Just the ID and rec_name)\n\n         Params:\n\n         * domain: JSON serialised domain expression\n           example: `[['name', 'ilike', 'openlabs']]`\n         * page: Integer number of the page\n         * per_page: The number of records to be returned per page\n         * order: JSON serialised order expression in which the records\n           should be sorted. Ex: `[('name', 'ASC'), ('date', 'DESC')]`\n======== =====================================================================\n\n.. code:: python\n\n    s = requests.Session()\n    s.auth = (tryton_session['id'], tryton_session['session'])\n    \n    # Use the session and get the list of users\n    print s.get(BASE_PATH + '/model/res.user').json()\n\n.. parsed-literal::\n\n    {u'items': [{u'rec_name': u'Administrator', u'id': 1}]}\n\n\n======== =====================================================================\nPOST     Creates one or more records in the given model\n======== =====================================================================\n\n.. code:: python\n\n    # Create a new user\n    headers = {'content-type': 'application/json'}\n    values = [\n        {'name': 'Thomas', 'login': 'thomas', 'password': 'password'},\n        {'name': 'Alfred', 'login': 'alfred', 'password': 'somethingelse'},\n    ]\n    users = s.post(BASE_PATH + '/model/res.user', data=json.dumps(values), headers=headers).json()\n    print users\n\n.. parsed-literal::\n\n    {u'items': [{u'rec_name': u'Thomas', u'id': 3}, {u'rec_name': u'Alfred', u'id': 4}]}\n\n\n\n======== =====================================================================\nDELETE   Delete **all** records in the given model\n======== =====================================================================\n\n\n/<dbname>/model/<model.name>/<id>\n``````````````````````````````````\n\n======== =====================================================================\nGET      Return the details of the given record\n\n         Params:\n\n         * fields_names: specify the list of fields to be returned.\n           Default behavior is to return as much data as possible\n======== =====================================================================\n\n.. code:: python\n\n    # Get full details of the first user\n    print s.get(BASE_PATH + '/model/res.user/1').json()\n\n.. parsed-literal::\n\n    {u'create_date': u'Sat, 10 May 2014 08:51:16 GMT', ....}\n\n\n.. code:: python\n\n    # Get only a limited set of fields\n    user_url = BASE_PATH + '/model/res.user/1'\n    print s.get(user_url + '?fields_names=name&fields_names=email').json()\n\n.. parsed-literal::\n\n    {u'email': None, u'name': u'Administrator', u'id': 1}\n\n======== =====================================================================\nPUT      Update the given resource\n======== =====================================================================\n\n.. code:: python\n\n    # Change the email of the user\n    headers = {'content-type': 'application/json'}\n    user_data = s.put(user_url, data=json.dumps({'email': 'admin@example.com'}), headers=headers).json()\n    print user_data['email']\n\n.. parsed-literal::\n\n    admin@example.com\n\n======== =====================================================================\nDELETE   Delete the given record\n======== =====================================================================\n\n.. code:: python\n\n    # get a new list of all users\n    print s.get(BASE_PATH + '/model/res.user').json()\n\n.. parsed-literal::\n\n     {u'items': [{u'rec_name': u'Administrator', u'id': 1}, {u'rec_name': u'Thomas', u'id': 3}, {u'rec_name': u'Alfred', u'id': 4}]}\n\n\n.. code:: python\n\n    # delete user Alfred with ID 4\n    print s.delete(BASE_PATH + '/model/res.user/4')\n\n.. parsed-literal::\n\n    <Response [205]>\n\n\n.. code:: python\n\n    # get a new list of all users\n    print s.get(BASE_PATH + '/model/res.user').json()\n\n.. parsed-literal::\n\n    {u'items': [{u'rec_name': u'Administrator', u'id': 1}, {u'rec_name': u'Thomas', u'id': 3}]}", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.openlabs.co.in/", "keywords": null, "license": "GPL-3", "maintainer": null, "maintainer_email": null, "name": "tryton-restful", "package_url": "https://pypi.org/project/tryton-restful/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/tryton-restful/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.openlabs.co.in/"}, "release_url": "https://pypi.org/project/tryton-restful/0.1/", "requires_dist": null, "requires_python": null, "summary": "REST API to access Tryton modules", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A REST API for Tryton Models</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install from python package index:</p>\n<pre>pip install tryton-restful\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>On installation you should be able to use the <cite>tryton_restful</cite> script which\nruns a local development server.</p>\n<pre>tryton_restful --help\n\n Usage: tryton_restful <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span> HOST PORT\n\n   Runs the application on a <span class=\"nb\">local</span> development server.\n\n Options:\n   -c, --config TEXT            Path to tryton configuration file\n   --debug\n   --threaded / --not-threaded  should the process handle each request in a\n                                separate thread?\n   --help                       Show this message and exit.\n</pre>\n<p>You can run the server by:</p>\n<pre>tryton_restful -c /path/to/tryton/config\n</pre>\n<div>\n<p>Tip</p>\n<p>You can also specify the config file using environment variables.</p>\n<p>export TRYTON-CONFIG=/path/to/tryton/config</p>\n</div>\n</div>\n<div id=\"rest-api-endpoints\">\n<h2>Rest API Endpoints:</h2>\n<div id=\"dbname-login\">\n<h3>/&lt;dbname&gt;/login</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>POST</td>\n<td>Expects <cite>login</cite> and <cite>password</cite> as form data and returns a JSON of\nuser ID and session to be used for subsequent requests</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">DATABASE_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'rest'</span>\n<span class=\"n\">BASE_PATH</span> <span class=\"o\">=</span> <span class=\"s1\">'http://localhost:9000/'</span> <span class=\"o\">+</span> <span class=\"n\">DATABASE_NAME</span>\n\n<span class=\"n\">login_result</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/login'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'login'</span><span class=\"p\">:</span> <span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'admin'</span><span class=\"p\">})</span>\n<span class=\"n\">tryton_session</span> <span class=\"o\">=</span> <span class=\"n\">login_result</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">tryton_session</span>\n</pre>\n<pre>{u'session': u'966689963c0a4a939cb326c1451b0fe9', u'id': 1}\n</pre>\n</div>\n<div id=\"dbname-model-model-name\">\n<h3>/&lt;dbname&gt;/model/&lt;model.name&gt;</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>GET</td>\n<td><p>Return a list of records (Just the ID and rec_name)</p>\n<p>Params:</p>\n<ul>\n<li>domain: JSON serialised domain expression\nexample: <cite>[[\u2018name\u2019, \u2018ilike\u2019, \u2018openlabs\u2019]]</cite></li>\n<li>page: Integer number of the page</li>\n<li>per_page: The number of records to be returned per page</li>\n<li>order: JSON serialised order expression in which the records\nshould be sorted. Ex: <cite>[(\u2018name\u2019, \u2018ASC\u2019), (\u2018date\u2019, \u2018DESC\u2019)]</cite></li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">auth</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">tryton_session</span><span class=\"p\">[</span><span class=\"s1\">'id'</span><span class=\"p\">],</span> <span class=\"n\">tryton_session</span><span class=\"p\">[</span><span class=\"s1\">'session'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Use the session and get the list of users</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<pre>{u'items': [{u'rec_name': u'Administrator', u'id': 1}]}\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>POST</td>\n<td>Creates one or more records in the given model</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"c1\"># Create a new user</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">}</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Thomas'</span><span class=\"p\">,</span> <span class=\"s1\">'login'</span><span class=\"p\">:</span> <span class=\"s1\">'thomas'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'password'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Alfred'</span><span class=\"p\">,</span> <span class=\"s1\">'login'</span><span class=\"p\">:</span> <span class=\"s1\">'alfred'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'somethingelse'</span><span class=\"p\">},</span>\n<span class=\"p\">]</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user'</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">users</span>\n</pre>\n<pre>{u'items': [{u'rec_name': u'Thomas', u'id': 3}, {u'rec_name': u'Alfred', u'id': 4}]}\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>DELETE</td>\n<td>Delete <strong>all</strong> records in the given model</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"dbname-model-model-name-id\">\n<h3>/&lt;dbname&gt;/model/&lt;model.name&gt;/&lt;id&gt;</h3>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>GET</td>\n<td><p>Return the details of the given record</p>\n<p>Params:</p>\n<ul>\n<li>fields_names: specify the list of fields to be returned.\nDefault behavior is to return as much data as possible</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"c1\"># Get full details of the first user</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user/1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<pre>{u'create_date': u'Sat, 10 May 2014 08:51:16 GMT', ....}\n</pre>\n<pre><span class=\"c1\"># Get only a limited set of fields</span>\n<span class=\"n\">user_url</span> <span class=\"o\">=</span> <span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user/1'</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">user_url</span> <span class=\"o\">+</span> <span class=\"s1\">'?fields_names=name&amp;fields_names=email'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<pre>{u'email': None, u'name': u'Administrator', u'id': 1}\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>PUT</td>\n<td>Update the given resource</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"c1\"># Change the email of the user</span>\n<span class=\"n\">headers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'application/json'</span><span class=\"p\">}</span>\n<span class=\"n\">user_data</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">user_url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'admin@example.com'</span><span class=\"p\">}),</span> <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">headers</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span> <span class=\"n\">user_data</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">]</span>\n</pre>\n<pre><a href=\"mailto:admin%40example.com\">admin<span>@</span>example<span>.</span>com</a>\n</pre>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td>DELETE</td>\n<td>Delete the given record</td>\n</tr>\n</tbody>\n</table>\n<pre><span class=\"c1\"># get a new list of all users</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<pre>{u'items': [{u'rec_name': u'Administrator', u'id': 1}, {u'rec_name': u'Thomas', u'id': 3}, {u'rec_name': u'Alfred', u'id': 4}]}\n</pre>\n<pre><span class=\"c1\"># delete user Alfred with ID 4</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user/4'</span><span class=\"p\">)</span>\n</pre>\n<pre>&lt;Response [205]&gt;\n</pre>\n<pre><span class=\"c1\"># get a new list of all users</span>\n<span class=\"nb\">print</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">BASE_PATH</span> <span class=\"o\">+</span> <span class=\"s1\">'/model/res.user'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n</pre>\n<pre>{u'items': [{u'rec_name': u'Administrator', u'id': 1}, {u'rec_name': u'Thomas', u'id': 3}]}\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1087883, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "574f5cf924683969aee6c8df74599585", "sha256": "30dae8d6fc282b070b9a4d1c9f7e1c1d7510b6f98c2350cfbe1021dc78ce5325"}, "downloads": -1, "filename": "tryton-restful-0.1.tar.gz", "has_sig": false, "md5_digest": "574f5cf924683969aee6c8df74599585", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6875, "upload_time": "2014-05-10T13:17:12", "upload_time_iso_8601": "2014-05-10T13:17:12.741985Z", "url": "https://files.pythonhosted.org/packages/9f/3e/dd488f655489e2b935485f53b16aa491342072ae091bff13935c6ebbde32/tryton-restful-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "574f5cf924683969aee6c8df74599585", "sha256": "30dae8d6fc282b070b9a4d1c9f7e1c1d7510b6f98c2350cfbe1021dc78ce5325"}, "downloads": -1, "filename": "tryton-restful-0.1.tar.gz", "has_sig": false, "md5_digest": "574f5cf924683969aee6c8df74599585", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6875, "upload_time": "2014-05-10T13:17:12", "upload_time_iso_8601": "2014-05-10T13:17:12.741985Z", "url": "https://files.pythonhosted.org/packages/9f/3e/dd488f655489e2b935485f53b16aa491342072ae091bff13935c6ebbde32/tryton-restful-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:45:27 2020"}