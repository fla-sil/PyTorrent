{"info": {"author": "Maciej Kozik", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Text Processing :: Markup :: XML"], "description": "# AskXML\nRun SQL statements on XML documents\n\n```xml\n<xml>\n    <fruit color='green'>tasty kiwi</fruit>\n    <fruit color='dark green'>old kiwi</fruit>\n    <fruit color='green'>apple</fruit>\n</xml>\n```\n\n```python\n\n>>> from askxml import AskXML\n\n>>> conn = AskXML('file.xml')\n# get an SQL cursor object\n>>> c = conn.cursor()\n>>> results = c.execute(\"SELECT color FROM fruit WHERE _text LIKE '% kiwi'\")\n>>> for row in results.fetchall():\n>>>    print(row)\n[('green'), ('dark green')]\n\n# cleanup\n>>> c.close()\n>>> conn.close()\n```\n\n## BUT WHY?\n\nThere are data dumps like stack exchange's, stored in XML. They're big, so fitting them whole into memory is not desired. With AskXML you can query things fast, and rather comfortably (provided you know SQL).\n\nBefore you go any further though, it's very possible your task can be achieved with XPATH and ElementTree XML API, so give that a look if you haven't heard of it.\n\n## Installation\n\nA pip package is on it's way.\n\n## Usage\n\n#### Adding indexes and defining columns\n\nIf you want to add indexes, columns or set attribute types, you can pass a list of table definitions:\n\n```python\n\nfrom askxml import *\ntables = [\n    Table('fruit',\n        Column('age', Integer()),\n        Index('age'))\n]\nwith AskXML('file.xml', table_definitions=tables) as conn:\n    c = conn.cursor()\n    c.execute(\"UPDATE fruit SET age = 5 WHERE _text = 'tasty kiwi'\")\n    c.close()\n```\n\nYou don't need to define all existing columns or tables. If a definition was not found, it's created with all column types being Text by default.\n\n#### Node hierarchy\n\nIf you want to find nodes that are children of another node by attribute:\n\n```xml\n\n<xml>\n    <someParent name='Jerry'>\n        <someChild name='Morty' />\n        <someChild name='Summer' />\n    </someParent>\n</xml>\n```\n\n```python\n\nfrom askxml import *\nwith AskXML('file.xml') as conn:\n    c = conn.cursor()\n    results = c.execute(\"\"\"\n        SELECT name FROM someParent_someChild as child\n        INNER JOIN someParent as parent ON parent._id = child._parentId\n        WHERE parent.name = 'Jerry'\n    \"\"\")\n    for row in results.fetchall():\n        print(row)\n    c.close()\n```\n\nThis will print `[('Morty'), ('Summer')]`.\n\n#### Inserting new data\n\nIf you want to add a new tag:\n\n```python\ncursor.execute(\"INSERT INTO fruit (color, _text) VALUES ('red', 'strawberry')\")\n```\n\nOr if your nodes have a hierarchy:\n\n```python\ncursor.execute(\"INSERT INTO someParent_someChild (name, _parentId) VALUES ('a baby', 1)\")\n```\n\n## License\n\nAskXML is licensed under [MIT license](https://github.com/kamac/AskXML/blob/blob/master/LICENSE)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kamac/AskXML", "keywords": "xml sql statements query", "license": "", "maintainer": "", "maintainer_email": "", "name": "askxml", "package_url": "https://pypi.org/project/askxml/", "platform": "", "project_url": "https://pypi.org/project/askxml/", "project_urls": {"Homepage": "https://github.com/kamac/AskXML"}, "release_url": "https://pypi.org/project/askxml/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Run SQL statements on XML documents", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AskXML</h1>\n<p>Run SQL statements on XML documents</p>\n<pre><span class=\"nt\">&lt;xml&gt;</span>\n    <span class=\"nt\">&lt;fruit</span> <span class=\"na\">color=</span><span class=\"s\">'green'</span><span class=\"nt\">&gt;</span>tasty kiwi<span class=\"nt\">&lt;/fruit&gt;</span>\n    <span class=\"nt\">&lt;fruit</span> <span class=\"na\">color=</span><span class=\"s\">'dark green'</span><span class=\"nt\">&gt;</span>old kiwi<span class=\"nt\">&lt;/fruit&gt;</span>\n    <span class=\"nt\">&lt;fruit</span> <span class=\"na\">color=</span><span class=\"s\">'green'</span><span class=\"nt\">&gt;</span>apple<span class=\"nt\">&lt;/fruit&gt;</span>\n<span class=\"nt\">&lt;/xml&gt;</span>\n</pre>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">askxml</span> <span class=\"kn\">import</span> <span class=\"n\">AskXML</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">AskXML</span><span class=\"p\">(</span><span class=\"s1\">'file.xml'</span><span class=\"p\">)</span>\n<span class=\"c1\"># get an SQL cursor object</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"SELECT color FROM fruit WHERE _text LIKE '% kiwi'\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">():</span>\n<span class=\"o\">&gt;&gt;&gt;</span>    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n<span class=\"p\">[(</span><span class=\"s1\">'green'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'dark green'</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># cleanup</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>BUT WHY?</h2>\n<p>There are data dumps like stack exchange's, stored in XML. They're big, so fitting them whole into memory is not desired. With AskXML you can query things fast, and rather comfortably (provided you know SQL).</p>\n<p>Before you go any further though, it's very possible your task can be achieved with XPATH and ElementTree XML API, so give that a look if you haven't heard of it.</p>\n<h2>Installation</h2>\n<p>A pip package is on it's way.</p>\n<h2>Usage</h2>\n<h4>Adding indexes and defining columns</h4>\n<p>If you want to add indexes, columns or set attribute types, you can pass a list of table definitions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">askxml</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"n\">tables</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s1\">'fruit'</span><span class=\"p\">,</span>\n        <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">()),</span>\n        <span class=\"n\">Index</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">))</span>\n<span class=\"p\">]</span>\n<span class=\"k\">with</span> <span class=\"n\">AskXML</span><span class=\"p\">(</span><span class=\"s1\">'file.xml'</span><span class=\"p\">,</span> <span class=\"n\">table_definitions</span><span class=\"o\">=</span><span class=\"n\">tables</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"UPDATE fruit SET age = 5 WHERE _text = 'tasty kiwi'\"</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>You don't need to define all existing columns or tables. If a definition was not found, it's created with all column types being Text by default.</p>\n<h4>Node hierarchy</h4>\n<p>If you want to find nodes that are children of another node by attribute:</p>\n<pre><span class=\"nt\">&lt;xml&gt;</span>\n    <span class=\"nt\">&lt;someParent</span> <span class=\"na\">name=</span><span class=\"s\">'Jerry'</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;someChild</span> <span class=\"na\">name=</span><span class=\"s\">'Morty'</span> <span class=\"nt\">/&gt;</span>\n        <span class=\"nt\">&lt;someChild</span> <span class=\"na\">name=</span><span class=\"s\">'Summer'</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;/someParent&gt;</span>\n<span class=\"nt\">&lt;/xml&gt;</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">askxml</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"k\">with</span> <span class=\"n\">AskXML</span><span class=\"p\">(</span><span class=\"s1\">'file.xml'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n    <span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">        SELECT name FROM someParent_someChild as child</span>\n<span class=\"s2\">        INNER JOIN someParent as parent ON parent._id = child._parentId</span>\n<span class=\"s2\">        WHERE parent.name = 'Jerry'</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">fetchall</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n    <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>This will print <code>[('Morty'), ('Summer')]</code>.</p>\n<h4>Inserting new data</h4>\n<p>If you want to add a new tag:</p>\n<pre><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO fruit (color, _text) VALUES ('red', 'strawberry')\"</span><span class=\"p\">)</span>\n</pre>\n<p>Or if your nodes have a hierarchy:</p>\n<pre><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"s2\">\"INSERT INTO someParent_someChild (name, _parentId) VALUES ('a baby', 1)\"</span><span class=\"p\">)</span>\n</pre>\n<h2>License</h2>\n<p>AskXML is licensed under <a href=\"https://github.com/kamac/AskXML/blob/blob/master/LICENSE\" rel=\"nofollow\">MIT license</a></p>\n\n          </div>"}, "last_serial": 3764641, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "f8304205cbfb1a3bbd4bbf2ea9cef8a9", "sha256": "9908b6b35baba2c9a1ae028091c94bc109587b7e84b448e86047bc5e2ddd2f93"}, "downloads": -1, "filename": "askxml-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f8304205cbfb1a3bbd4bbf2ea9cef8a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10474, "upload_time": "2018-04-14T16:10:28", "upload_time_iso_8601": "2018-04-14T16:10:28.892888Z", "url": "https://files.pythonhosted.org/packages/5c/7e/3abbd91cf720ec33cefce91a57064b7044fec50218ffcec3f5de0f115697/askxml-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b71fb85f0e12360f804887164a46308", "sha256": "5ab887bffaaa6af45fd35d459093a8cb492db256f82b290a855d3a7aec1f7856"}, "downloads": -1, "filename": "askxml-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0b71fb85f0e12360f804887164a46308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8343, "upload_time": "2018-04-14T16:10:29", "upload_time_iso_8601": "2018-04-14T16:10:29.834093Z", "url": "https://files.pythonhosted.org/packages/04/76/ce523e19e4b11a364c5dcc6f7e3da5cdc42b27485be7482bb3dfd6d4708d/askxml-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8304205cbfb1a3bbd4bbf2ea9cef8a9", "sha256": "9908b6b35baba2c9a1ae028091c94bc109587b7e84b448e86047bc5e2ddd2f93"}, "downloads": -1, "filename": "askxml-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f8304205cbfb1a3bbd4bbf2ea9cef8a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10474, "upload_time": "2018-04-14T16:10:28", "upload_time_iso_8601": "2018-04-14T16:10:28.892888Z", "url": "https://files.pythonhosted.org/packages/5c/7e/3abbd91cf720ec33cefce91a57064b7044fec50218ffcec3f5de0f115697/askxml-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b71fb85f0e12360f804887164a46308", "sha256": "5ab887bffaaa6af45fd35d459093a8cb492db256f82b290a855d3a7aec1f7856"}, "downloads": -1, "filename": "askxml-1.0.0.tar.gz", "has_sig": false, "md5_digest": "0b71fb85f0e12360f804887164a46308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8343, "upload_time": "2018-04-14T16:10:29", "upload_time_iso_8601": "2018-04-14T16:10:29.834093Z", "url": "https://files.pythonhosted.org/packages/04/76/ce523e19e4b11a364c5dcc6f7e3da5cdc42b27485be7482bb3dfd6d4708d/askxml-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:58 2020"}