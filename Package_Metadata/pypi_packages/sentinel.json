{"info": {"author": "Eddie Antonio Santos", "author_email": "easantos@ualberta.ca", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "================================================\nsentinel \u2014 create sentinel and singleton objects\n================================================\n\nCreates simple sentinel objects which are the only instance of their own\nanonymous class. As a singleton, there is a guarantee that there will only\never be one instance: they can be safely used with ``pickle`` and ``cPickle``\nalike, as well as being able to be used properly with ``copy.deepcopy()``. In\naddition, a self-documenting ``__repr__`` is provided for free!\n\nUsage\n-----\n\nSentinels_ are singleton_ objects that typically represent some end or\nterminating condition. Some singletons already exist in Python, like ``None``\n``NotImplemented``, and ``Ellipsis``.\n\n\nAll that's needed to create a sentinel is its name::\n\n    >>> import sentinel\n    >>> Nothing = sentinel.create('Nothing')\n    >>> Nothing\n    Nothing\n\nThis by itself is useful when other objects such as ``None``, ``False``,\n``0``, ``-1``, etc.  are entirely valid values. For example, setting default\nvalues when all other values are valid with: ``dict.setdefault()``::\n\n    >>> MissingEntry = sentinel.create('MissingEntry')\n    >>> d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n    >>> [d.setdefault(key, MissingEntry) for key in ('stdin', 'stdout', 'stderr')]\n    [0, None, MissingEntry]\n\nAlternatively, using ``dict.get()`` when fetching values::\n\n    >>> d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n    >>> d.get('stdout', MissingEntry)\n    None\n    >>> d.get('stdin', MissingEntry)\n    0\n    >>> d.get('stderr', MissingEntry)\n    MissingEntry\n\nIt's known immediately which value was missing from the dictionary in a\nself-documenting manner.\n\nAdding extra methods and class attributes\n-----------------------------------------\n\nSentinels may also inherit from base classes, or implement extra methods.\n\nConsider a binary search tree with two kinds of nodes: interior nodes\n(``Node``) which contain some payload and leaves (``Leaf``), which simply\nterminate traversal.\n\nTo create singleton leaf which implements a ``search`` method and an\n``is_leaf`` property, you may provide any extra class attributes in the\n``extra_methods`` keyword argument. The following is a full example of both\nthe singleton ``Leaf`` and its ``Node`` counterpart::\n\n    def _search_leaf(self, key):\n        raise KeyError(key)\n\n    Leaf = sentinel.create('Leaf', extra_methods={\n        'search': _search_leaf,\n        'is_leaf': property(lambda self: True)\n    })\n\n    class Node(object):\n        def __init__(self, key, payload, left=Leaf, right=Leaf):\n            self.left = left\n            self.right = right\n            self.key = key\n            self.payload = payload\n\n        def search(self, key):\n            if key < self.__key:\n                return self.left.search(key)\n            elif key > self.key:\n                return self.right.search(key)\n            else:\n                return self.payload\n\n        is_leaf = property(lambda: false)\n\nExample usage::\n\n    >>> tree = Node(2, 'bar', Node(1, 'foo'), Node(3, 'baz'))\n    >>> tree.search(1)\n    'foo'\n    >>> tree.search(4)\n    Traceback (most recent call last):\n        ...\n    KeyError: 2\n\nInheriting from a base class\n----------------------------\n\nAnother usage is inheriting from a tuple, in order to do tuple comparison. For\nexample, consider a scenario where a certain order must be maintained, but\nordering matters. If the key being used to sort is an integer, a plain\n``object`` instance will always sort greater (in Python 2\u2014see below for\n`Python 3 fix`_)::\n\n    >>> (1, [], []) < (object(), None, None)\n    True\n\nNow say we want to encode this in a neat, self-documenting package. This is\ncan be done by create a sentinel that inherits from ``tuple`` and is\ninstantiated with the given tuple::\n\n    arg = (object(), None, None)\n    AlwaysGreater = sentinel.create('AlwaysGreater', (tuple,), {}, args)\n\nThis will call ``tuple((object(), None, None))``. This means the singleton\nwill now behave exactly as expected::\n\n    >>> (1, [], []) < AlwaysGreater\n    True\n\nPython 3 fix\n------------\n\nAn ``int`` and any old ``object`` are no longer comparable in Python 3::\n\n    >>> (1, ..., ...) < (object(), None, None)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n    TypeError: unorderable types: int() < object()\n\nThis makes the above example more difficult. Luckily, sentinels can easily fix\nthis. Creating a sentinel that is always less than any number::\n\n    IntInfinity = sentinel.create('IntInfinity', (int,), extra_methods={\n        '__lt__': lambda self, other: False,\n        '__gt__': lambda self, other: True,\n        '__ge__': lambda self, other: True,\n        '__le__': lambda self, other: True if self is other else False\n    })\n\nSince we inherit from ``int``, it is, for all intents and purposes, an\n``int``::\n\n    >>> isinstance(MinInf, int)\n    True\n    >>> IntInfinity > 10 ** 1000\n    True\n    >>> 10 ** 1000 > IntInfinity\n    False\n\nNote that if not provided any explicit instantiation, it is equal to ``0``::\n\n    >>> IntInfinity == 0\n    True\n    >>> bool(IntInfinity)\n    False\n    >>> IntInfinity + 8\n    8\n\nNonetheless, it serves its purpose in our example::\n\n    arg = (IntInfinity, None, None)\n    AlwaysGreater = sentinel.create('AlwaysGreater', (tuple,), {}, arg)\n\nUsage::\n\n    >>> (1, ..., ...) < AlwaysGreater\n    True\n    >>> AlwaysGreater < (1, ..., ...)\n    False\n\n.. _Sentinels: http://en.wikipedia.org/wiki/Sentinel_nodes\n.. _singleton: http://en.wikipedia.org/wiki/Singleton_pattern\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/eddieantonio/sentinel/tarball/v0.1.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eddieantonio/sentinel", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sentinel", "package_url": "https://pypi.org/project/sentinel/", "platform": "any", "project_url": "https://pypi.org/project/sentinel/", "project_urls": {"Download": "https://github.com/eddieantonio/sentinel/tarball/v0.1.2", "Homepage": "https://github.com/eddieantonio/sentinel"}, "release_url": "https://pypi.org/project/sentinel/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "Create sentinel and singleton objects", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Creates simple sentinel objects which are the only instance of their own\nanonymous class. As a singleton, there is a guarantee that there will only\never be one instance: they can be safely used with <tt>pickle</tt> and <tt>cPickle</tt>\nalike, as well as being able to be used properly with <tt>copy.deepcopy()</tt>. In\naddition, a self-documenting <tt>__repr__</tt> is provided for free!</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><a href=\"http://en.wikipedia.org/wiki/Sentinel_nodes\" rel=\"nofollow\">Sentinels</a> are <a href=\"http://en.wikipedia.org/wiki/Singleton_pattern\" rel=\"nofollow\">singleton</a> objects that typically represent some end or\nterminating condition. Some singletons already exist in Python, like <tt>None</tt>\n<tt>NotImplemented</tt>, and <tt>Ellipsis</tt>.</p>\n<p>All that\u2019s needed to create a sentinel is its name:</p>\n<pre>&gt;&gt;&gt; import sentinel\n&gt;&gt;&gt; Nothing = sentinel.create('Nothing')\n&gt;&gt;&gt; Nothing\nNothing\n</pre>\n<p>This by itself is useful when other objects such as <tt>None</tt>, <tt>False</tt>,\n<tt>0</tt>, <tt><span class=\"pre\">-1</span></tt>, etc.  are entirely valid values. For example, setting default\nvalues when all other values are valid with: <tt>dict.setdefault()</tt>:</p>\n<pre>&gt;&gt;&gt; MissingEntry = sentinel.create('MissingEntry')\n&gt;&gt;&gt; d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n&gt;&gt;&gt; [d.setdefault(key, MissingEntry) for key in ('stdin', 'stdout', 'stderr')]\n[0, None, MissingEntry]\n</pre>\n<p>Alternatively, using <tt>dict.get()</tt> when fetching values:</p>\n<pre>&gt;&gt;&gt; d = {'stdout': None, 'stdin': 0, 'EOF': -1}\n&gt;&gt;&gt; d.get('stdout', MissingEntry)\nNone\n&gt;&gt;&gt; d.get('stdin', MissingEntry)\n0\n&gt;&gt;&gt; d.get('stderr', MissingEntry)\nMissingEntry\n</pre>\n<p>It\u2019s known immediately which value was missing from the dictionary in a\nself-documenting manner.</p>\n</div>\n<div id=\"adding-extra-methods-and-class-attributes\">\n<h2>Adding extra methods and class attributes</h2>\n<p>Sentinels may also inherit from base classes, or implement extra methods.</p>\n<p>Consider a binary search tree with two kinds of nodes: interior nodes\n(<tt>Node</tt>) which contain some payload and leaves (<tt>Leaf</tt>), which simply\nterminate traversal.</p>\n<p>To create singleton leaf which implements a <tt>search</tt> method and an\n<tt>is_leaf</tt> property, you may provide any extra class attributes in the\n<tt>extra_methods</tt> keyword argument. The following is a full example of both\nthe singleton <tt>Leaf</tt> and its <tt>Node</tt> counterpart:</p>\n<pre>def _search_leaf(self, key):\n    raise KeyError(key)\n\nLeaf = sentinel.create('Leaf', extra_methods={\n    'search': _search_leaf,\n    'is_leaf': property(lambda self: True)\n})\n\nclass Node(object):\n    def __init__(self, key, payload, left=Leaf, right=Leaf):\n        self.left = left\n        self.right = right\n        self.key = key\n        self.payload = payload\n\n    def search(self, key):\n        if key &lt; self.__key:\n            return self.left.search(key)\n        elif key &gt; self.key:\n            return self.right.search(key)\n        else:\n            return self.payload\n\n    is_leaf = property(lambda: false)\n</pre>\n<p>Example usage:</p>\n<pre>&gt;&gt;&gt; tree = Node(2, 'bar', Node(1, 'foo'), Node(3, 'baz'))\n&gt;&gt;&gt; tree.search(1)\n'foo'\n&gt;&gt;&gt; tree.search(4)\nTraceback (most recent call last):\n    ...\nKeyError: 2\n</pre>\n</div>\n<div id=\"inheriting-from-a-base-class\">\n<h2>Inheriting from a base class</h2>\n<p>Another usage is inheriting from a tuple, in order to do tuple comparison. For\nexample, consider a scenario where a certain order must be maintained, but\nordering matters. If the key being used to sort is an integer, a plain\n<tt>object</tt> instance will always sort greater (in Python 2\u2014see below for\n<a href=\"#python-3-fix\" rel=\"nofollow\">Python 3 fix</a>):</p>\n<pre>&gt;&gt;&gt; (1, [], []) &lt; (object(), None, None)\nTrue\n</pre>\n<p>Now say we want to encode this in a neat, self-documenting package. This is\ncan be done by create a sentinel that inherits from <tt>tuple</tt> and is\ninstantiated with the given tuple:</p>\n<pre>arg = (object(), None, None)\nAlwaysGreater = sentinel.create('AlwaysGreater', (tuple,), {}, args)\n</pre>\n<p>This will call <tt><span class=\"pre\">tuple((object(),</span> None, None))</tt>. This means the singleton\nwill now behave exactly as expected:</p>\n<pre>&gt;&gt;&gt; (1, [], []) &lt; AlwaysGreater\nTrue\n</pre>\n</div>\n<div id=\"python-3-fix\">\n<h2>Python 3 fix</h2>\n<p>An <tt>int</tt> and any old <tt>object</tt> are no longer comparable in Python 3:</p>\n<pre>&gt;&gt;&gt; (1, ..., ...) &lt; (object(), None, None)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\nTypeError: unorderable types: int() &lt; object()\n</pre>\n<p>This makes the above example more difficult. Luckily, sentinels can easily fix\nthis. Creating a sentinel that is always less than any number:</p>\n<pre>IntInfinity = sentinel.create('IntInfinity', (int,), extra_methods={\n    '__lt__': lambda self, other: False,\n    '__gt__': lambda self, other: True,\n    '__ge__': lambda self, other: True,\n    '__le__': lambda self, other: True if self is other else False\n})\n</pre>\n<p>Since we inherit from <tt>int</tt>, it is, for all intents and purposes, an\n<tt>int</tt>:</p>\n<pre>&gt;&gt;&gt; isinstance(MinInf, int)\nTrue\n&gt;&gt;&gt; IntInfinity &gt; 10 ** 1000\nTrue\n&gt;&gt;&gt; 10 ** 1000 &gt; IntInfinity\nFalse\n</pre>\n<p>Note that if not provided any explicit instantiation, it is equal to <tt>0</tt>:</p>\n<pre>&gt;&gt;&gt; IntInfinity == 0\nTrue\n&gt;&gt;&gt; bool(IntInfinity)\nFalse\n&gt;&gt;&gt; IntInfinity + 8\n8\n</pre>\n<p>Nonetheless, it serves its purpose in our example:</p>\n<pre>arg = (IntInfinity, None, None)\nAlwaysGreater = sentinel.create('AlwaysGreater', (tuple,), {}, arg)\n</pre>\n<p>Usage:</p>\n<pre>&gt;&gt;&gt; (1, ..., ...) &lt; AlwaysGreater\nTrue\n&gt;&gt;&gt; AlwaysGreater &lt; (1, ..., ...)\nFalse\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6010257, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a0c07702d81d11a1d72f58b9eaa24072", "sha256": "8d0a59adfeced6fe9c8a2add2db35d5e9737769a511a230f2d095ff3be775c9d"}, "downloads": -1, "filename": "sentinel-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a0c07702d81d11a1d72f58b9eaa24072", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3281, "upload_time": "2014-08-22T23:37:08", "upload_time_iso_8601": "2014-08-22T23:37:08.201274Z", "url": "https://files.pythonhosted.org/packages/0e/08/96620cf74ffb5c60a1ad275bc59d909c187d55084a03e3505cdb4e571fb5/sentinel-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "29993a01be2fa1d46a567d745d9c05fe", "sha256": "c00ba2a4f240ea4c5414059a696d6e128730272cb2c631b2eff42e86da1f89b3"}, "downloads": -1, "filename": "sentinel-0.1.1.tar.gz", "has_sig": false, "md5_digest": "29993a01be2fa1d46a567d745d9c05fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3894, "upload_time": "2014-08-23T05:24:12", "upload_time_iso_8601": "2014-08-23T05:24:12.838683Z", "url": "https://files.pythonhosted.org/packages/2e/12/867f97b68c2a541f1e0de6b3b8ff52a2c2bef8d88228efc885ad07f20968/sentinel-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4926a5a602addec8bc37b3cd88437959", "sha256": "9cdd949268b4010adedef2a2287f00ba70f4195afe56031f699321291937e667"}, "downloads": -1, "filename": "sentinel-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "4926a5a602addec8bc37b3cd88437959", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5495, "upload_time": "2019-10-22T03:01:15", "upload_time_iso_8601": "2019-10-22T03:01:15.399428Z", "url": "https://files.pythonhosted.org/packages/3b/1e/84b84d409a592a4580badc04223776ed6efc4711b7b8f6c8d7c3c11691d0/sentinel-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81cec582f7fab0ad334fc5e6cf31438", "sha256": "c7aeee3f57c56a8e52771fc64230345deecd62c48debbbe1f1aca453439741d0"}, "downloads": -1, "filename": "sentinel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e81cec582f7fab0ad334fc5e6cf31438", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4893, "upload_time": "2019-10-22T03:01:16", "upload_time_iso_8601": "2019-10-22T03:01:16.778806Z", "url": "https://files.pythonhosted.org/packages/d2/e7/9e40edaeca0e73790044815932e56bbe9d3bb9bd6f22df6e3f8e8ce6c539/sentinel-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4926a5a602addec8bc37b3cd88437959", "sha256": "9cdd949268b4010adedef2a2287f00ba70f4195afe56031f699321291937e667"}, "downloads": -1, "filename": "sentinel-0.1.2-py2-none-any.whl", "has_sig": false, "md5_digest": "4926a5a602addec8bc37b3cd88437959", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 5495, "upload_time": "2019-10-22T03:01:15", "upload_time_iso_8601": "2019-10-22T03:01:15.399428Z", "url": "https://files.pythonhosted.org/packages/3b/1e/84b84d409a592a4580badc04223776ed6efc4711b7b8f6c8d7c3c11691d0/sentinel-0.1.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81cec582f7fab0ad334fc5e6cf31438", "sha256": "c7aeee3f57c56a8e52771fc64230345deecd62c48debbbe1f1aca453439741d0"}, "downloads": -1, "filename": "sentinel-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e81cec582f7fab0ad334fc5e6cf31438", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4893, "upload_time": "2019-10-22T03:01:16", "upload_time_iso_8601": "2019-10-22T03:01:16.778806Z", "url": "https://files.pythonhosted.org/packages/d2/e7/9e40edaeca0e73790044815932e56bbe9d3bb9bd6f22df6e3f8e8ce6c539/sentinel-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:03 2020"}