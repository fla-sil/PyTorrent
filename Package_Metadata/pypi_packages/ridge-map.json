{"info": {"author": "Colin Carroll", "author_email": "colcarroll@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "ridge_map\n=========\n[![Build Status](https://travis-ci.org/ColCarroll/ridge_map.svg?branch=master)](https://travis-ci.org/ColCarroll/ridge_map)\n[![Coverage Status](https://coveralls.io/repos/github/ColCarroll/ridge_map/badge.svg?branch=master)](https://coveralls.io/github/ColCarroll/ridge_map?branch=master)\n\n*Ridge plots of ridges*\n-----------------------\n\nA library for making ridge plots of... ridges. Choose a location, get an elevation map, and tinker with it to make something beautiful. Heavily inspired from [Zach Cole's beautiful art](https://twitter.com/ZachACole/status/1121554541101477889), [Jake Vanderplas' examples](https://github.com/jakevdp/altair-examples/blob/master/notebooks/PulsarPlot.ipynb), and Joy Division's [1979 album \"Unknown Pleasures\"](https://gist.github.com/ColCarroll/68e29c92b766418b0a4497b4eb2ecba4).\n\nUses [matplotlib](https://matplotlib.org/), [SRTM.py](https://github.com/tkrajina/srtm.py), [numpy](https://www.numpy.org/), and [scikit-image](https://scikit-image.org/) (for lake detection).\n\nInstallation\n------------\n\nAvailable on [PyPI](https://pypi.org/project/ridge-map/):\n\n```bash\npip install ridge_map\n```\n\nOr live on the edge and install from github with\n\n```bash\npip install git+git://github.com/colcarroll/ridge_map.git\n```\n\nWant to help?\n-------------\n\n- I feel like I am missing something easy or obvious with lake/road/river/ocean detection, but what I've got gets me most of the way there. If you hack on the `RidgeMap.preprocessor` method and find something nice, I would love to hear about it!\n- Did you make a cool map? Open an issue with the code and I will add it to the examples.\n\nExamples\n--------\n\nThe API allows you to download the data once, then edit the plot yourself,\nor allow the default processor to help you.\n\n### New Hampshire by default\n\nPlotting with all the defaults should give you a map of my favorite mountains.\n\n```python\nfrom ridge_map import RidgeMap\n\nRidgeMap().plot_map()\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/white_mountains.png?raw=true)\n\n### Download once and tweak settings\n\nFirst you download the elevation data to get an array with shape\n`(num_lines, elevation_pts)`, then you can use the preprocessor\nto automatically detect lakes, rivers, and oceans, and scale the elevations.\nFinally, there are options to style the plot\n\n```python\nrm = RidgeMap((11.098251,47.264786,11.695633,47.453630))\nvalues = rm.get_elevation_data(num_lines=150)\nvalues=rm.preprocess(\n    values=values,\n    lake_flatness=2,\n    water_ntile=10,\n    vertical_ratio=240)\nrm.plot_map(values=values,\n            label='Karwendelgebirge',\n            label_y=0.1,\n            label_x=0.55,\n            label_size=40,\n            linewidth=1)\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/karwendelgebirge.png?raw=true)\n\n### Plot with colors!\n\nIf you are plotting a town that is super into burnt orange for whatever\nreason, you can respect that choice.\n\n```python\nrm = RidgeMap((-97.794285,30.232226,-97.710171,30.334509))\nvalues = rm.get_elevation_data(num_lines=80)\nrm.plot_map(values=rm.preprocess(values=values, water_ntile=12, vertical_ratio=40),\n            label='Austin\\nTexas',\n            label_x=0.75,\n            linewidth=6,\n            line_color='orange')\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/austin.png?raw=true)\n\n### Plot with even more colors!\n\nThe line color accepts a [matplotlib colormap](https://matplotlib.org/gallery/color/colormap_reference.html#sphx-glr-gallery-color-colormap-reference-py), so really feel free to go to town.\n\n```python\nrm = RidgeMap((-123.107300,36.820279,-121.519775,38.210130))\nvalues = rm.get_elevation_data(num_lines=150)\nrm.plot_map(values=rm.preprocess(values=values, lake_flatness=3, water_ntile=50, vertical_ratio=30),\n            label='The Bay\\nArea',\n            label_x=0.1,\n            line_color = plt.get_cmap('spring'))\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/san_francisco.png?raw=true)\n\n### Plot with custom fonts and elevation colors!\n\nYou can find a good font [from Google](https://fonts.google.com/), and then get the path to the ttf file [in the github repo](https://github.com/google/fonts/tree/master/ofl).\n\nIf you pass a matplotlib colormap, you can specify `kind=\"elevation\"` to color tops of mountains different from bottoms. `ocean`, `gnuplot`, and `bone` look nice.\n\n```python\nfrom ridge_map import FontManager\n\nfont = FontManager('https://github.com/google/fonts/blob/master/ofl/uncialantiqua/UncialAntiqua-Regular.ttf?raw=True')\nrm = RidgeMap((-156.250305,18.890695,-154.714966,20.275080), font=font.prop)\n\nvalues = rm.get_elevation_data(num_lines=100)\nrm.plot_map(values=rm.preprocess(values=values, lake_flatness=2, water_ntile=10, vertical_ratio=240),\n            label=\"Hawai'i\",\n            label_y=0.85,\n            label_x=0.7,\n            label_size=60,\n            linewidth=2,\n            line_color=plt.get_cmap('ocean'),\n            kind='elevation')\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/hawaii.png?raw=true)\n\n### How do I find a bounding box?\n\nI have been using [this website](http://bboxfinder.com). I find an area I like, draw a rectangle, then copy and paste the coordinates into the `RidgeMap` constructor.\n\n```python\nrm = RidgeMap((-73.509693,41.678682,-73.342838,41.761581))\nvalues = rm.get_elevation_data()\nrm.plot_map(values=rm.preprocess(values=values, lake_flatness=2, water_ntile=2, vertical_ratio=60),\n            label='Kent\\nConnecticut',\n            label_y=0.7,\n            label_x=0.65,\n            label_size=40)\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/kent.png?raw=true)\n\n### What about really flat areas?\n\nYou might really have to tune the `water_ntile` and `lake_flatness` to get the water right. You can set them to 0 if you do not want any water marked.\n\n```python\nrm = RidgeMap((-71.167374,42.324286,-70.952454, 42.402672))\nvalues = rm.get_elevation_data(num_lines=50)\nrm.plot_map(values=rm.preprocess(values=values, lake_flatness=4, water_ntile=30, vertical_ratio=20),\n            label='Cambridge\\nand Boston',\n            label_x=0.75,\n            label_size=40,\n            linewidth=1)\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/boston.png?raw=true)\n\n### What about Walden Pond?\n\nIt is that pleasant kettle pond in the bottom right of this map, looking entirely comfortable with its place in Western writing and thought.\n\n```python\nrm = RidgeMap((-71.418858,42.427511,-71.310024,42.481719))\nvalues = rm.get_elevation_data(num_lines=100)\nrm.plot_map(values=rm.preprocess(values=values, water_ntile=15, vertical_ratio=30),\n            label='Concord\\nMassachusetts',\n            label_x=0.1,\n            label_size=30)\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/concord.png?raw=true)\n\n### Do you play nicely with other matplotlib figures?\n\nOf course! If you really want to put a stylized elevation map in a scientific plot you are making, I am not going to stop you, and will actually make it easier for you. Just pass an argument for `ax` to `RidgeMap.plot_map`.\n\n```python\nimport numpy as np\nfig, axes = plt.subplots(ncols=2, figsize=(20, 5))\nx = np.linspace(-2, 2)\ny = x * x\n\naxes[0].plot(x, y, 'o')\n\nrm = RidgeMap()\nrm.plot_map(label_size=24, background_color=(1, 1, 1), ax=axes[1])\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/multiaxis.png?raw=true)\n\nUser Examples\n-------------\n\n### Annotating, changing background color, custom text\n\nThis example shows how to annotate a lat/long on the map, and updates the color of the label text to allow for a dark background. Thanks to [kratsg](https://github.com/kratsg) for contributing.\n\n```python\nimport matplotlib\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nbgcolor = np.array([65,74,76])/255.\n\nscipp = (-122.060510, 36.998776)\nrm = RidgeMap((-122.087116,36.945365,-121.999226,37.023250))\nscipp_coords = ((scipp[0] - rm.longs[0])/(rm.longs[1] - rm.longs[0]),(scipp[1] - rm.lats[0])/(rm.lats[1] - rm.lats[0]))\n\nvalues = rm.get_elevation_data(num_lines=150)\nridges = rm.plot_map(values=rm.preprocess(values=values,\n                                          lake_flatness=1,\n                                          water_ntile=0,\n                                          vertical_ratio=240),\n            label='Santa Cruz\\nMountains',\n            label_x=0.75,\n            label_y=0.05,\n            label_size=36,\n            kind='elevation',\n            linewidth=1,\n            background_color=bgcolor,\n            line_color = plt.get_cmap('cool'))\n\n# Bit of a hack to update the text label color\nfor child in ridges.get_children():\n    if isinstance(child, matplotlib.text.Text) and 'Santa Cruz' in child._text:\n        label_artist = child\n        break\nlabel_artist.set_color('white')\n\nridges.text(scipp_coords[0]+0.005, scipp_coords[1]+0.005, 'SCIPP',\n            fontproperties=rm.font,\n            size=20,\n            color=\"white\",\n            transform=ridges.transAxes,\n            verticalalignment=\"bottom\",\n            zorder=len(values)+10)\n\nridges.plot(*scipp_coords, 'o',\n            color='white',\n            transform=ridges.transAxes,\n            ms=6,\n            zorder=len(values)+10)\n```\n\n![png](https://github.com/ColCarroll/ridge_map/blob/master/examples/santa_cruz.png?raw=true)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ColCarroll/ridge_map", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ridge-map", "package_url": "https://pypi.org/project/ridge-map/", "platform": "", "project_url": "https://pypi.org/project/ridge-map/", "project_urls": {"Homepage": "https://github.com/ColCarroll/ridge_map"}, "release_url": "https://pypi.org/project/ridge-map/0.0.2/", "requires_dist": ["SRTM.py", "numpy", "matplotlib", "scikit-image (>=0.14.2)"], "requires_python": "", "summary": "1d lines, 3d maps", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ridge_map</h1>\n<p><a href=\"https://travis-ci.org/ColCarroll/ridge_map\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/40cbdf7ae1183d75eb0a70330bb1508cc5e0cdea/68747470733a2f2f7472617669732d63692e6f72672f436f6c436172726f6c6c2f72696467655f6d61702e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/ColCarroll/ridge_map?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/519341d82c8ad6fca48871ece7eaad25737a5d73/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f436f6c436172726f6c6c2f72696467655f6d61702f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2><em>Ridge plots of ridges</em></h2>\n<p>A library for making ridge plots of... ridges. Choose a location, get an elevation map, and tinker with it to make something beautiful. Heavily inspired from <a href=\"https://twitter.com/ZachACole/status/1121554541101477889\" rel=\"nofollow\">Zach Cole's beautiful art</a>, <a href=\"https://github.com/jakevdp/altair-examples/blob/master/notebooks/PulsarPlot.ipynb\" rel=\"nofollow\">Jake Vanderplas' examples</a>, and Joy Division's <a href=\"https://gist.github.com/ColCarroll/68e29c92b766418b0a4497b4eb2ecba4\" rel=\"nofollow\">1979 album \"Unknown Pleasures\"</a>.</p>\n<p>Uses <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a>, <a href=\"https://github.com/tkrajina/srtm.py\" rel=\"nofollow\">SRTM.py</a>, <a href=\"https://www.numpy.org/\" rel=\"nofollow\">numpy</a>, and <a href=\"https://scikit-image.org/\" rel=\"nofollow\">scikit-image</a> (for lake detection).</p>\n<h2>Installation</h2>\n<p>Available on <a href=\"https://pypi.org/project/ridge-map/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>pip install ridge_map\n</pre>\n<p>Or live on the edge and install from github with</p>\n<pre>pip install git+git://github.com/colcarroll/ridge_map.git\n</pre>\n<h2>Want to help?</h2>\n<ul>\n<li>I feel like I am missing something easy or obvious with lake/road/river/ocean detection, but what I've got gets me most of the way there. If you hack on the <code>RidgeMap.preprocessor</code> method and find something nice, I would love to hear about it!</li>\n<li>Did you make a cool map? Open an issue with the code and I will add it to the examples.</li>\n</ul>\n<h2>Examples</h2>\n<p>The API allows you to download the data once, then edit the plot yourself,\nor allow the default processor to help you.</p>\n<h3>New Hampshire by default</h3>\n<p>Plotting with all the defaults should give you a map of my favorite mountains.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ridge_map</span> <span class=\"kn\">import</span> <span class=\"n\">RidgeMap</span>\n\n<span class=\"n\">RidgeMap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">()</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa6953a628f325b4ecf9eafd9c7e5aa067017fc8/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f77686974655f6d6f756e7461696e732e706e673f7261773d74727565\"></p>\n<h3>Download once and tweak settings</h3>\n<p>First you download the elevation data to get an array with shape\n<code>(num_lines, elevation_pts)</code>, then you can use the preprocessor\nto automatically detect lakes, rivers, and oceans, and scale the elevations.\nFinally, there are options to style the plot</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"mf\">11.098251</span><span class=\"p\">,</span><span class=\"mf\">47.264786</span><span class=\"p\">,</span><span class=\"mf\">11.695633</span><span class=\"p\">,</span><span class=\"mf\">47.453630</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n<span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span>\n    <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span>\n    <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n    <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">240</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Karwendelgebirge'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_y</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.55</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea7bd3fcc229b5fafc6ecffc8a43270d77132be1/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f6b617277656e64656c676562697267652e706e673f7261773d74727565\"></p>\n<h3>Plot with colors!</h3>\n<p>If you are plotting a town that is super into burnt orange for whatever\nreason, you can respect that choice.</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">97.794285</span><span class=\"p\">,</span><span class=\"mf\">30.232226</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">97.710171</span><span class=\"p\">,</span><span class=\"mf\">30.334509</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Austin</span><span class=\"se\">\\n</span><span class=\"s1\">Texas'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span>\n            <span class=\"n\">line_color</span><span class=\"o\">=</span><span class=\"s1\">'orange'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/407815f1edfd8538d9c3c94361a5975fdcedbd9d/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f61757374696e2e706e673f7261773d74727565\"></p>\n<h3>Plot with even more colors!</h3>\n<p>The line color accepts a <a href=\"https://matplotlib.org/gallery/color/colormap_reference.html#sphx-glr-gallery-color-colormap-reference-py\" rel=\"nofollow\">matplotlib colormap</a>, so really feel free to go to town.</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">123.107300</span><span class=\"p\">,</span><span class=\"mf\">36.820279</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">121.519775</span><span class=\"p\">,</span><span class=\"mf\">38.210130</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'The Bay</span><span class=\"se\">\\n</span><span class=\"s1\">Area'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n            <span class=\"n\">line_color</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">get_cmap</span><span class=\"p\">(</span><span class=\"s1\">'spring'</span><span class=\"p\">))</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96c3448a1f1096ec3689dc36f02c3f22faa86ff8/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f73616e5f6672616e636973636f2e706e673f7261773d74727565\"></p>\n<h3>Plot with custom fonts and elevation colors!</h3>\n<p>You can find a good font <a href=\"https://fonts.google.com/\" rel=\"nofollow\">from Google</a>, and then get the path to the ttf file <a href=\"https://github.com/google/fonts/tree/master/ofl\" rel=\"nofollow\">in the github repo</a>.</p>\n<p>If you pass a matplotlib colormap, you can specify <code>kind=\"elevation\"</code> to color tops of mountains different from bottoms. <code>ocean</code>, <code>gnuplot</code>, and <code>bone</code> look nice.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ridge_map</span> <span class=\"kn\">import</span> <span class=\"n\">FontManager</span>\n\n<span class=\"n\">font</span> <span class=\"o\">=</span> <span class=\"n\">FontManager</span><span class=\"p\">(</span><span class=\"s1\">'https://github.com/google/fonts/blob/master/ofl/uncialantiqua/UncialAntiqua-Regular.ttf?raw=True'</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">156.250305</span><span class=\"p\">,</span><span class=\"mf\">18.890695</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">154.714966</span><span class=\"p\">,</span><span class=\"mf\">20.275080</span><span class=\"p\">),</span> <span class=\"n\">font</span><span class=\"o\">=</span><span class=\"n\">font</span><span class=\"o\">.</span><span class=\"n\">prop</span><span class=\"p\">)</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">240</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"Hawai'i\"</span><span class=\"p\">,</span>\n            <span class=\"n\">label_y</span><span class=\"o\">=</span><span class=\"mf\">0.85</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n            <span class=\"n\">line_color</span><span class=\"o\">=</span><span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">get_cmap</span><span class=\"p\">(</span><span class=\"s1\">'ocean'</span><span class=\"p\">),</span>\n            <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'elevation'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1183009c9415ed3d26853851d3ea1223af1bd913/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f6861776169692e706e673f7261773d74727565\"></p>\n<h3>How do I find a bounding box?</h3>\n<p>I have been using <a href=\"http://bboxfinder.com\" rel=\"nofollow\">this website</a>. I find an area I like, draw a rectangle, then copy and paste the coordinates into the <code>RidgeMap</code> constructor.</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">73.509693</span><span class=\"p\">,</span><span class=\"mf\">41.678682</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">73.342838</span><span class=\"p\">,</span><span class=\"mf\">41.761581</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">()</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">60</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Kent</span><span class=\"se\">\\n</span><span class=\"s1\">Connecticut'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_y</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.65</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69cb26858c182b207c117bc54894409157e04b1e/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f6b656e742e706e673f7261773d74727565\"></p>\n<h3>What about really flat areas?</h3>\n<p>You might really have to tune the <code>water_ntile</code> and <code>lake_flatness</code> to get the water right. You can set them to 0 if you do not want any water marked.</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">71.167374</span><span class=\"p\">,</span><span class=\"mf\">42.324286</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">70.952454</span><span class=\"p\">,</span> <span class=\"mf\">42.402672</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Cambridge</span><span class=\"se\">\\n</span><span class=\"s1\">and Boston'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea8e699fbc8f82f16369cbb9df3caca790182fc3/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f626f73746f6e2e706e673f7261773d74727565\"></p>\n<h3>What about Walden Pond?</h3>\n<p>It is that pleasant kettle pond in the bottom right of this map, looking entirely comfortable with its place in Western writing and thought.</p>\n<pre><span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">71.418858</span><span class=\"p\">,</span><span class=\"mf\">42.427511</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">71.310024</span><span class=\"p\">,</span><span class=\"mf\">42.481719</span><span class=\"p\">))</span>\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Concord</span><span class=\"se\">\\n</span><span class=\"s1\">Massachusetts'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/af97064203d172a2ced7a2a5fd8628e6a3d8201e/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f636f6e636f72642e706e673f7261773d74727565\"></p>\n<h3>Do you play nicely with other matplotlib figures?</h3>\n<p>Of course! If you really want to put a stylized elevation map in a scientific plot you are making, I am not going to stop you, and will actually make it easier for you. Just pass an argument for <code>ax</code> to <code>RidgeMap.plot_map</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">axes</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">(</span><span class=\"n\">ncols</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">figsize</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">))</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">x</span> <span class=\"o\">*</span> <span class=\"n\">x</span>\n\n<span class=\"n\">axes</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">)</span>\n\n<span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">()</span>\n<span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">24</span><span class=\"p\">,</span> <span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">),</span> <span class=\"n\">ax</span><span class=\"o\">=</span><span class=\"n\">axes</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41112a05941680c4f242361943bc7bf4256d9167/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f6d756c7469617869732e706e673f7261773d74727565\"></p>\n<h2>User Examples</h2>\n<h3>Annotating, changing background color, custom text</h3>\n<p>This example shows how to annotate a lat/long on the map, and updates the color of the label text to allow for a dark background. Thanks to <a href=\"https://github.com/kratsg\" rel=\"nofollow\">kratsg</a> for contributing.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"n\">bgcolor</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">65</span><span class=\"p\">,</span><span class=\"mi\">74</span><span class=\"p\">,</span><span class=\"mi\">76</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"mf\">255.</span>\n\n<span class=\"n\">scipp</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">122.060510</span><span class=\"p\">,</span> <span class=\"mf\">36.998776</span><span class=\"p\">)</span>\n<span class=\"n\">rm</span> <span class=\"o\">=</span> <span class=\"n\">RidgeMap</span><span class=\"p\">((</span><span class=\"o\">-</span><span class=\"mf\">122.087116</span><span class=\"p\">,</span><span class=\"mf\">36.945365</span><span class=\"p\">,</span><span class=\"o\">-</span><span class=\"mf\">121.999226</span><span class=\"p\">,</span><span class=\"mf\">37.023250</span><span class=\"p\">))</span>\n<span class=\"n\">scipp_coords</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">scipp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">longs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">longs</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">longs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]),(</span><span class=\"n\">scipp</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">lats</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"p\">(</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">lats</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">-</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">lats</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">get_elevation_data</span><span class=\"p\">(</span><span class=\"n\">num_lines</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">)</span>\n<span class=\"n\">ridges</span> <span class=\"o\">=</span> <span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">plot_map</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">preprocess</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"n\">values</span><span class=\"p\">,</span>\n                                          <span class=\"n\">lake_flatness</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n                                          <span class=\"n\">water_ntile</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                                          <span class=\"n\">vertical_ratio</span><span class=\"o\">=</span><span class=\"mi\">240</span><span class=\"p\">),</span>\n            <span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'Santa Cruz</span><span class=\"se\">\\n</span><span class=\"s1\">Mountains'</span><span class=\"p\">,</span>\n            <span class=\"n\">label_x</span><span class=\"o\">=</span><span class=\"mf\">0.75</span><span class=\"p\">,</span>\n            <span class=\"n\">label_y</span><span class=\"o\">=</span><span class=\"mf\">0.05</span><span class=\"p\">,</span>\n            <span class=\"n\">label_size</span><span class=\"o\">=</span><span class=\"mi\">36</span><span class=\"p\">,</span>\n            <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s1\">'elevation'</span><span class=\"p\">,</span>\n            <span class=\"n\">linewidth</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">background_color</span><span class=\"o\">=</span><span class=\"n\">bgcolor</span><span class=\"p\">,</span>\n            <span class=\"n\">line_color</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">get_cmap</span><span class=\"p\">(</span><span class=\"s1\">'cool'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Bit of a hack to update the text label color</span>\n<span class=\"k\">for</span> <span class=\"n\">child</span> <span class=\"ow\">in</span> <span class=\"n\">ridges</span><span class=\"o\">.</span><span class=\"n\">get_children</span><span class=\"p\">():</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">child</span><span class=\"p\">,</span> <span class=\"n\">matplotlib</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"o\">.</span><span class=\"n\">Text</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"s1\">'Santa Cruz'</span> <span class=\"ow\">in</span> <span class=\"n\">child</span><span class=\"o\">.</span><span class=\"n\">_text</span><span class=\"p\">:</span>\n        <span class=\"n\">label_artist</span> <span class=\"o\">=</span> <span class=\"n\">child</span>\n        <span class=\"k\">break</span>\n<span class=\"n\">label_artist</span><span class=\"o\">.</span><span class=\"n\">set_color</span><span class=\"p\">(</span><span class=\"s1\">'white'</span><span class=\"p\">)</span>\n\n<span class=\"n\">ridges</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">(</span><span class=\"n\">scipp_coords</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mf\">0.005</span><span class=\"p\">,</span> <span class=\"n\">scipp_coords</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">+</span><span class=\"mf\">0.005</span><span class=\"p\">,</span> <span class=\"s1\">'SCIPP'</span><span class=\"p\">,</span>\n            <span class=\"n\">fontproperties</span><span class=\"o\">=</span><span class=\"n\">rm</span><span class=\"o\">.</span><span class=\"n\">font</span><span class=\"p\">,</span>\n            <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">,</span>\n            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s2\">\"white\"</span><span class=\"p\">,</span>\n            <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ridges</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">,</span>\n            <span class=\"n\">verticalalignment</span><span class=\"o\">=</span><span class=\"s2\">\"bottom\"</span><span class=\"p\">,</span>\n            <span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"n\">ridges</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">scipp_coords</span><span class=\"p\">,</span> <span class=\"s1\">'o'</span><span class=\"p\">,</span>\n            <span class=\"n\">color</span><span class=\"o\">=</span><span class=\"s1\">'white'</span><span class=\"p\">,</span>\n            <span class=\"n\">transform</span><span class=\"o\">=</span><span class=\"n\">ridges</span><span class=\"o\">.</span><span class=\"n\">transAxes</span><span class=\"p\">,</span>\n            <span class=\"n\">ms</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">,</span>\n            <span class=\"n\">zorder</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e86dec048fea3565b847d82a7d7702aa15f6633c/68747470733a2f2f6769746875622e636f6d2f436f6c436172726f6c6c2f72696467655f6d61702f626c6f622f6d61737465722f6578616d706c65732f73616e74615f6372757a2e706e673f7261773d74727565\"></p>\n\n          </div>"}, "last_serial": 5225743, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "0e8141626815f75825ec7f661a9e5459", "sha256": "2c3560c2e8d89a81c0e76e881bc013d4e6063ec538bc7aeb30e76ba461b41de2"}, "downloads": -1, "filename": "ridge_map-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e8141626815f75825ec7f661a9e5459", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8789, "upload_time": "2019-05-03T23:44:40", "upload_time_iso_8601": "2019-05-03T23:44:40.384005Z", "url": "https://files.pythonhosted.org/packages/33/a8/f27f74bc7f2339f845d29aeb318891eba7fd4f79b07f0cee38b6dfc3dc08/ridge_map-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9281bb317d52f66afcdbee97e41893e", "sha256": "8d1d89e7a92f7dbdc9edefeb4a0ade39f2fa302414f6629623f050ff57656c89"}, "downloads": -1, "filename": "ridge_map-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c9281bb317d52f66afcdbee97e41893e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8139, "upload_time": "2019-05-03T23:44:42", "upload_time_iso_8601": "2019-05-03T23:44:42.651198Z", "url": "https://files.pythonhosted.org/packages/cf/be/f0807b942032d5f640d05bf43fd5883557c578a334dcdaca782629a07d34/ridge_map-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b10548942fd73e6edf1d76fe9d0f3791", "sha256": "b35c215c8d2abf6b73a31ceae7bf5ff2b3cd8757f7290dfccba200316025a5fc"}, "downloads": -1, "filename": "ridge_map-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b10548942fd73e6edf1d76fe9d0f3791", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9130, "upload_time": "2019-05-04T14:43:40", "upload_time_iso_8601": "2019-05-04T14:43:40.222300Z", "url": "https://files.pythonhosted.org/packages/10/dd/e2e8d608dd2b130f4973833688d541991f7052916cebc3072a7dbe87c932/ridge_map-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "432272cdb37704102206e270128e5614", "sha256": "32dbde1a98484b73a15450a0c930ce76f169f45bf8318cfe0e06bcaacca49ca0"}, "downloads": -1, "filename": "ridge_map-0.0.2.tar.gz", "has_sig": false, "md5_digest": "432272cdb37704102206e270128e5614", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8860, "upload_time": "2019-05-04T14:43:41", "upload_time_iso_8601": "2019-05-04T14:43:41.769000Z", "url": "https://files.pythonhosted.org/packages/e1/c8/9890fa1298e747b2bad2fa616423fde5573a452343a2a31c2658bc4ea193/ridge_map-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b10548942fd73e6edf1d76fe9d0f3791", "sha256": "b35c215c8d2abf6b73a31ceae7bf5ff2b3cd8757f7290dfccba200316025a5fc"}, "downloads": -1, "filename": "ridge_map-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b10548942fd73e6edf1d76fe9d0f3791", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9130, "upload_time": "2019-05-04T14:43:40", "upload_time_iso_8601": "2019-05-04T14:43:40.222300Z", "url": "https://files.pythonhosted.org/packages/10/dd/e2e8d608dd2b130f4973833688d541991f7052916cebc3072a7dbe87c932/ridge_map-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "432272cdb37704102206e270128e5614", "sha256": "32dbde1a98484b73a15450a0c930ce76f169f45bf8318cfe0e06bcaacca49ca0"}, "downloads": -1, "filename": "ridge_map-0.0.2.tar.gz", "has_sig": false, "md5_digest": "432272cdb37704102206e270128e5614", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8860, "upload_time": "2019-05-04T14:43:41", "upload_time_iso_8601": "2019-05-04T14:43:41.769000Z", "url": "https://files.pythonhosted.org/packages/e1/c8/9890fa1298e747b2bad2fa616423fde5573a452343a2a31c2658bc4ea193/ridge_map-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:44 2020"}