{"info": {"author": "Rudy Lattae", "author_email": "rudylattae@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7"], "description": "==========\nOverview\n==========\n\nCheckit is a tool for validating executable specifications \ncreated with BDD style grammar. It aims to:\n\n1. Enable you to define BDD style specifications in python code.\n2. Provide a simple tool for validating your specifications.\n\nTo this end, checkit uses `nose <http://somethingaboutorange.com/mrl/projects/nose>`_ \nto enable you to create specs with keywords like \"Describe\", \"it\" and \"should\". \nIt also provides a \"**checkit**\" command that seemlessly integrates with nose \n(specifically the nosetests command) to validate your software against the specs \nyou created.\n\n\nFeatures\n==========\n\n* encourages \"specification by example\" by promoting the use of appropriate grammar\n* uses customizable options to make nose discover and run your specs\n\n\nRequirements\n=============\n\n* `nose <http://somethingaboutorange.com/mrl/projects/nose>`_ \n\nThe requirements for using checkit are auto-installed if you \nuse pip or easy_install.\n\n\nInstallation\n==============\n\nThe easiest way to install checkit is with ``pip install checkit`` \nor with ``easy_install checkit``. Alternatively, you may \n`download <http://pypi.python.org/pypi/checkit>`_ the \nsource package from PyPI, extract it and install it using \n``python setup.py install``.\n\n\nWhat you get\n=============\n\nWhen you install the package, the only tangible thing you get is the \n\"**checkit**\" command. It uses nose to discover and execute specifications \nusing flexible matching rules so that you are not limited to using distracting \nunittest (test focused) constructs like \"def test...\" or name your files \n\"test...py\".\n\nThe other non-tangible benefit you get is that you no longer have to \nsubject yourself to the unnecessary cruft needed for unittest \ntest cases. You can now create a spec like this::\n\n    > cat coolthingy_specs.py\n    class DescribeCoolThingy(object):\n        \n        def it_is_cool(self):\n            pass\n            \n        def it_should_not_heat_up(self):\n            pass\n\nOr even::\n\n    > cat awesomedude_specs.py\n    class AwesomeDudeSpecs():\n    \n        def should_smile_often(self):\n            pass\n\nFinally, when you want to validate your software against the specs, \nsimply run the command \"checkit\" in your project directory like so::\n\n    > checkit\n    ...\n    ----------------------------------------------------------------------\n    Ran 3 tests in 0.006s\n\n    OK\n\nSince `checkit` is merely a wrapper around `nose`, it accepts all the parameters that \n`nose` tipically takes. For more information, run::\n\n    > checkit --help\n\n\nFeedback\n==========\n\nI welcome any questions or feedback about bugs and suggestions on how to \nimprove checkit. Let me know what you think about checkit. I am on twitter \n`@RudyLattae <http://twitter.com/RudyLattae>`_ . I appreciate constructive \ncriticsms or high fives :)\n\nDo you have suggestions for improvement? Then please create an \n`issue <https://bitbucket.org/rudylattae/checkit/issues>`_ with details \nof what you would like to see. I'll take a look at it and work with you to either kill \nthe idea or implement it.\n\n\nChangelog\n=========\n\n0.3.2b (Oct 20, 2011)\n----------------------\n\n* Add support for \"given\" to provide context for extra narrow tech specs.\n\n0.3.1b (Oct 17, 2011)\n----------------------\n\n* Remove support for \"examples\" and \"features\" - focus on specs.\n\n0.2.3b (Oct 17, 2011)\n----------------------\n\n* Refactor options passed to nose in prep to make them configurable\n* Add feature definition example \n* Add tox config to test against py2.5-2.7\n\n0.1.0a (Jan 24, 2011)\n----------------------\n\n* First public release\n* \"checkit\" command to validate specs", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/rudylattae/checkit", "keywords": "Specification,BDD,TDD,check,validate,example,nose,nosetest", "license": "Simplified BSD", "maintainer": null, "maintainer_email": null, "name": "checkit", "package_url": "https://pypi.org/project/checkit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/checkit/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/rudylattae/checkit"}, "release_url": "https://pypi.org/project/checkit/0.3.2b/", "requires_dist": null, "requires_python": null, "summary": "Validate your Python software against specifications created with BDD style grammar.", "version": "0.3.2b", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Checkit is a tool for validating executable specifications\ncreated with BDD style grammar. It aims to:</p>\n<ol>\n<li>Enable you to define BDD style specifications in python code.</li>\n<li>Provide a simple tool for validating your specifications.</li>\n</ol>\n<p>To this end, checkit uses <a href=\"http://somethingaboutorange.com/mrl/projects/nose\" rel=\"nofollow\">nose</a>\nto enable you to create specs with keywords like \u201cDescribe\u201d, \u201cit\u201d and \u201cshould\u201d.\nIt also provides a \u201c<strong>checkit</strong>\u201d command that seemlessly integrates with nose\n(specifically the nosetests command) to validate your software against the specs\nyou created.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>encourages \u201cspecification by example\u201d by promoting the use of appropriate grammar</li>\n<li>uses customizable options to make nose discover and run your specs</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"http://somethingaboutorange.com/mrl/projects/nose\" rel=\"nofollow\">nose</a></li>\n</ul>\n<p>The requirements for using checkit are auto-installed if you\nuse pip or easy_install.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The easiest way to install checkit is with <tt>pip install checkit</tt>\nor with <tt>easy_install checkit</tt>. Alternatively, you may\n<a href=\"http://pypi.python.org/pypi/checkit\" rel=\"nofollow\">download</a> the\nsource package from PyPI, extract it and install it using\n<tt>python setup.py install</tt>.</p>\n</div>\n<div id=\"what-you-get\">\n<h2>What you get</h2>\n<p>When you install the package, the only tangible thing you get is the\n\u201c<strong>checkit</strong>\u201d command. It uses nose to discover and execute specifications\nusing flexible matching rules so that you are not limited to using distracting\nunittest (test focused) constructs like \u201cdef test\u2026\u201d or name your files\n\u201ctest\u2026py\u201d.</p>\n<p>The other non-tangible benefit you get is that you no longer have to\nsubject yourself to the unnecessary cruft needed for unittest\ntest cases. You can now create a spec like this:</p>\n<pre>&gt; cat coolthingy_specs.py\nclass DescribeCoolThingy(object):\n\n    def it_is_cool(self):\n        pass\n\n    def it_should_not_heat_up(self):\n        pass\n</pre>\n<p>Or even:</p>\n<pre>&gt; cat awesomedude_specs.py\nclass AwesomeDudeSpecs():\n\n    def should_smile_often(self):\n        pass\n</pre>\n<p>Finally, when you want to validate your software against the specs,\nsimply run the command \u201ccheckit\u201d in your project directory like so:</p>\n<pre>&gt; checkit\n...\n----------------------------------------------------------------------\nRan 3 tests in 0.006s\n\nOK\n</pre>\n<p>Since <cite>checkit</cite> is merely a wrapper around <cite>nose</cite>, it accepts all the parameters that\n<cite>nose</cite> tipically takes. For more information, run:</p>\n<pre>&gt; checkit --help\n</pre>\n</div>\n<div id=\"feedback\">\n<h2>Feedback</h2>\n<p>I welcome any questions or feedback about bugs and suggestions on how to\nimprove checkit. Let me know what you think about checkit. I am on twitter\n<a href=\"http://twitter.com/RudyLattae\" rel=\"nofollow\">@RudyLattae</a> . I appreciate constructive\ncriticsms or high fives :)</p>\n<p>Do you have suggestions for improvement? Then please create an\n<a href=\"https://bitbucket.org/rudylattae/checkit/issues\" rel=\"nofollow\">issue</a> with details\nof what you would like to see. I\u2019ll take a look at it and work with you to either kill\nthe idea or implement it.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"b-oct-20-2011\">\n<h3>0.3.2b (Oct 20, 2011)</h3>\n<ul>\n<li>Add support for \u201cgiven\u201d to provide context for extra narrow tech specs.</li>\n</ul>\n</div>\n<div id=\"b-oct-17-2011\">\n<h3>0.3.1b (Oct 17, 2011)</h3>\n<ul>\n<li>Remove support for \u201cexamples\u201d and \u201cfeatures\u201d - focus on specs.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.2.3b (Oct 17, 2011)</h3>\n<ul>\n<li>Refactor options passed to nose in prep to make them configurable</li>\n<li>Add feature definition example</li>\n<li>Add tox config to test against py2.5-2.7</li>\n</ul>\n</div>\n<div id=\"a-jan-24-2011\">\n<h3>0.1.0a (Jan 24, 2011)</h3>\n<ul>\n<li>First public release</li>\n<li>\u201ccheckit\u201d command to validate specs</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 787359, "releases": {"0.1.0a": [{"comment_text": "", "digests": {"md5": "4ddd85396b2ed27a09eb792a7e158831", "sha256": "0a99bd3e0d6ec977e4f5bfcd567ad5964f389353da6c91f3ad933ab6caf2e78e"}, "downloads": -1, "filename": "checkit-0.1.0a.win32.exe", "has_sig": false, "md5_digest": "4ddd85396b2ed27a09eb792a7e158831", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 207636, "upload_time": "2011-01-25T06:14:19", "upload_time_iso_8601": "2011-01-25T06:14:19.672985Z", "url": "https://files.pythonhosted.org/packages/e5/8c/3be01ad825b0f1ce9f57e5f8228baeca9de2a9730cad32ee3e70639715a1/checkit-0.1.0a.win32.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "1505ff425628e9f893a2197a166fab66", "sha256": "f95885cd30208eb0c0ce7b1ad41930ccd86b6fe8c9f1b533d3387026f307c953"}, "downloads": -1, "filename": "checkit-0.1.0a.zip", "has_sig": false, "md5_digest": "1505ff425628e9f893a2197a166fab66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8211, "upload_time": "2011-01-25T06:14:15", "upload_time_iso_8601": "2011-01-25T06:14:15.469992Z", "url": "https://files.pythonhosted.org/packages/5e/84/d6e9d221c5944594bec669122e444f6409e53fe09710b06719b580fb7dea/checkit-0.1.0a.zip", "yanked": false}], "0.2.3b": [{"comment_text": "", "digests": {"md5": "00b316866fd688cb8990c5350875ff11", "sha256": "f9e79a87eb9cf16264126f24673c70c7b096b10c2653174905e0188000f13689"}, "downloads": -1, "filename": "checkit-0.2.3b.zip", "has_sig": false, "md5_digest": "00b316866fd688cb8990c5350875ff11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9764, "upload_time": "2011-10-17T08:52:44", "upload_time_iso_8601": "2011-10-17T08:52:44.554102Z", "url": "https://files.pythonhosted.org/packages/de/28/cbd4479203ade7009125793084ee0ef194dd61a8058e586d199ea5684216/checkit-0.2.3b.zip", "yanked": false}], "0.3.1b": [{"comment_text": "", "digests": {"md5": "ef42ecb7c11239441c5eb27d717ecccb", "sha256": "75fb341386c22c342cb82c3f6c34ad1ac3eff8257a9f56dc926162940871bc60"}, "downloads": -1, "filename": "checkit-0.3.1b.zip", "has_sig": false, "md5_digest": "ef42ecb7c11239441c5eb27d717ecccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9885, "upload_time": "2011-10-18T03:41:59", "upload_time_iso_8601": "2011-10-18T03:41:59.057438Z", "url": "https://files.pythonhosted.org/packages/d8/9e/cf42d9b340f76dba0a71d66c60e606f9e0bbc1c8dfa0041bda627791ee35/checkit-0.3.1b.zip", "yanked": false}], "0.3.2b": [{"comment_text": "", "digests": {"md5": "3bf5e6bfe98ad476070813adec94a1bd", "sha256": "93317d8645c79b8ce07863456e9a221ca455527f0c8353d19d51a5a9470f1518"}, "downloads": -1, "filename": "checkit-0.3.2b.zip", "has_sig": false, "md5_digest": "3bf5e6bfe98ad476070813adec94a1bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2011-10-21T07:25:16", "upload_time_iso_8601": "2011-10-21T07:25:16.854897Z", "url": "https://files.pythonhosted.org/packages/8c/e2/c04cdcc3c04d297b99d8c0e3454f5a32894f942f6a27a8c6f73fd131c8b6/checkit-0.3.2b.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3bf5e6bfe98ad476070813adec94a1bd", "sha256": "93317d8645c79b8ce07863456e9a221ca455527f0c8353d19d51a5a9470f1518"}, "downloads": -1, "filename": "checkit-0.3.2b.zip", "has_sig": false, "md5_digest": "3bf5e6bfe98ad476070813adec94a1bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10011, "upload_time": "2011-10-21T07:25:16", "upload_time_iso_8601": "2011-10-21T07:25:16.854897Z", "url": "https://files.pythonhosted.org/packages/8c/e2/c04cdcc3c04d297b99d8c0e3454f5a32894f942f6a27a8c6f73fd131c8b6/checkit-0.3.2b.zip", "yanked": false}], "timestamp": "Thu May  7 22:34:20 2020"}