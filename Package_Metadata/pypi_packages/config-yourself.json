{"info": {"author": "Will Richard", "author_email": "william.richard@blinkhealth.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: JavaScript", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Security", "Topic :: Security :: Cryptography", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "# config-yourself-python\n\n[![CircleCI](https://circleci.com/gh/blinkhealth/config-yourself-python.svg?style=svg)](https://circleci.com/gh/blinkhealth/config-yourself-python)\n[![Documentation Status](https://readthedocs.org/projects/config-yourself-python/badge/?version=latest)](https://config-yourself-python.readthedocs.io/en/latest/?badge=latest)\n\n`config-yourself` is a python 2.7+ package to help your application read [go-config-yourself files](https://github.com/blinkhealth/go-config-yourself#config-files).\n\n---\n\n## Installation\n\n```sh\n# choose if you'd like to use `kms`, `gpg` or the `password` provider\npip install 'config_yourself[kms]'\n\n# or go crazy with all of them\npip install 'config_yourself[all]'\n\n# with pipenv\npipenv install 'config_yourself[kms]'\n\n# with poetry\npoetry add config_yourself --extras kms\n```\n\n## Usage\n\nHere's how to work with `config_yourself` in python:\n\n## Basic usage\n\n```py\nimport config_yourself as cy\n\n# Load one config file\nencrypted_config = cy.load.file(\"config/test.yml\")\nconfig = cy.Config(encrypted_config)\n# now use it like a dict, all secrets have been decrypted\nprint(config[\"database\"])\n```\n\n## Complete usage\n\n```py\n# Let's get a little more creative\n# `config_yourself` can take a number of config files, merge, and decrypt them\n\n# we start with a defaults file, that defines the valid keys for all subsequent files\n# then, we take a file path provided from the environment\nfiles = ['config/defaults.yml', os.environ['CONFIG_FILE']]\n\n# During development, we might choose to have a SCM-ignored personal file, to apply overrides to our personal taste\nif os.path.exists(personal_config_path):\n  files.append('config/personal.yml')\n\n# we take every file, deserialize it from YAML\nconfigs = [cy.load.file(path) for path in files]\n# we can also append regular dicts to this list\nconfigs.append({\n  'MODE': os.environ.get('BACKEND_MODE', 'tripolar')\n})\n\n# we can also decide to override values straight from the environment...\nif os.environ['SHOOT_MYSELF_IN_THE_FOOT']:\n  # config_yourself will parse env values as JSON, so this will turn to False\n  os.environ['CONFIG.someService.enabled'] = 'false'\n  configs.append(cy.load.env('CONFIG'))\n\n# Take our list of configs, and pass secrets to the decryption provider\nconfig = cy.Config(*configs, secrets={'password': os.environ['SUPER_SECRET_PASSWORD']})\n# The resulting merged config is finally decrypted\n\nprint(config['someService']['endpoint']) # => \"https://super-secure-service.example.com\"\nprint(config['someService']['enabled']) # => False\n```\n\n### From a Django or Flask application\n\nWhen using in Flask or Django and you'd like to follow the same pattern above, use the :py:meth:`~config_yourself.AppConfig` method instead:\n\n```py\nimport config_yourself as cy\n\n# Use AppConfig\nconfig = cy.AppConfig()\n# functionally equal to:\n\n# Remember to set CONFIG_FILE=./config/production.yml\ncy.Config(**[\n  \"./config/defaults.yml\",\n  \"./config/production.yml\",\n])\n\n# assuming CONFIG_FILE=\"\" and an existing \"personal.yml\" file\ncy.Config(**[\n  \"./config/defaults.yml\",\n  \"./config/local.yml\",\n  \"./config/personal.yml\",\n])\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/blinkhealth/config-yourself-python", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "config-yourself", "package_url": "https://pypi.org/project/config-yourself/", "platform": "", "project_url": "https://pypi.org/project/config-yourself/", "project_urls": {"Homepage": "https://github.com/blinkhealth/config-yourself-python"}, "release_url": "https://pypi.org/project/config-yourself/1.0.2/", "requires_dist": ["future (<1.0.0,>=0.16.0)", "PyYAML (>=5.1.1)", "cryptography (<3.0,>=2.8) ; extra == 'all'", "pgpy (<1.0.0,>=0.4.3) ; extra == 'all'", "boto3 (<2.0.0,>=1.4.4) ; extra == 'all'", "pgpy (<1.0.0,>=0.4.3) ; extra == 'gpg'", "cryptography (<3.0,>=2.8) ; extra == 'gpg'", "boto3 (<2.0.0,>=1.4.4) ; extra == 'kms'", "cryptography (<3.0,>=2.8) ; extra == 'password'"], "requires_python": ">=2.7.0", "summary": "A python library to decrypt config-yourself files", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>config-yourself-python</h1>\n<p><a href=\"https://circleci.com/gh/blinkhealth/config-yourself-python\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05b35d2b9b57fa24e2a2b7050f79e510c44965c1/68747470733a2f2f636972636c6563692e636f6d2f67682f626c696e6b6865616c74682f636f6e6669672d796f757273656c662d707974686f6e2e7376673f7374796c653d737667\"></a>\n<a href=\"https://config-yourself-python.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c61051083fabf701209c17cbc1e792c07eecdc98/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f636f6e6669672d796f757273656c662d707974686f6e2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><code>config-yourself</code> is a python 2.7+ package to help your application read <a href=\"https://github.com/blinkhealth/go-config-yourself#config-files\" rel=\"nofollow\">go-config-yourself files</a>.</p>\n<hr>\n<h2>Installation</h2>\n<pre><span class=\"c1\"># choose if you'd like to use `kms`, `gpg` or the `password` provider</span>\npip install <span class=\"s1\">'config_yourself[kms]'</span>\n\n<span class=\"c1\"># or go crazy with all of them</span>\npip install <span class=\"s1\">'config_yourself[all]'</span>\n\n<span class=\"c1\"># with pipenv</span>\npipenv install <span class=\"s1\">'config_yourself[kms]'</span>\n\n<span class=\"c1\"># with poetry</span>\npoetry add config_yourself --extras kms\n</pre>\n<h2>Usage</h2>\n<p>Here's how to work with <code>config_yourself</code> in python:</p>\n<h2>Basic usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">config_yourself</span> <span class=\"k\">as</span> <span class=\"nn\">cy</span>\n\n<span class=\"c1\"># Load one config file</span>\n<span class=\"n\">encrypted_config</span> <span class=\"o\">=</span> <span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"s2\">\"config/test.yml\"</span><span class=\"p\">)</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"n\">encrypted_config</span><span class=\"p\">)</span>\n<span class=\"c1\"># now use it like a dict, all secrets have been decrypted</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"database\"</span><span class=\"p\">])</span>\n</pre>\n<h2>Complete usage</h2>\n<pre><span class=\"c1\"># Let's get a little more creative</span>\n<span class=\"c1\"># `config_yourself` can take a number of config files, merge, and decrypt them</span>\n\n<span class=\"c1\"># we start with a defaults file, that defines the valid keys for all subsequent files</span>\n<span class=\"c1\"># then, we take a file path provided from the environment</span>\n<span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'config/defaults.yml'</span><span class=\"p\">,</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'CONFIG_FILE'</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># During development, we might choose to have a SCM-ignored personal file, to apply overrides to our personal taste</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">personal_config_path</span><span class=\"p\">):</span>\n  <span class=\"n\">files</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'config/personal.yml'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># we take every file, deserialize it from YAML</span>\n<span class=\"n\">configs</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">path</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">]</span>\n<span class=\"c1\"># we can also append regular dicts to this list</span>\n<span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span>\n  <span class=\"s1\">'MODE'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'BACKEND_MODE'</span><span class=\"p\">,</span> <span class=\"s1\">'tripolar'</span><span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># we can also decide to override values straight from the environment...</span>\n<span class=\"k\">if</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SHOOT_MYSELF_IN_THE_FOOT'</span><span class=\"p\">]:</span>\n  <span class=\"c1\"># config_yourself will parse env values as JSON, so this will turn to False</span>\n  <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'CONFIG.someService.enabled'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'false'</span>\n  <span class=\"n\">configs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"o\">.</span><span class=\"n\">env</span><span class=\"p\">(</span><span class=\"s1\">'CONFIG'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Take our list of configs, and pass secrets to the decryption provider</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">configs</span><span class=\"p\">,</span> <span class=\"n\">secrets</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"p\">[</span><span class=\"s1\">'SUPER_SECRET_PASSWORD'</span><span class=\"p\">]})</span>\n<span class=\"c1\"># The resulting merged config is finally decrypted</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'someService'</span><span class=\"p\">][</span><span class=\"s1\">'endpoint'</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; \"https://super-secure-service.example.com\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s1\">'someService'</span><span class=\"p\">][</span><span class=\"s1\">'enabled'</span><span class=\"p\">])</span> <span class=\"c1\"># =&gt; False</span>\n</pre>\n<h3>From a Django or Flask application</h3>\n<p>When using in Flask or Django and you'd like to follow the same pattern above, use the :py:meth:<code>~config_yourself.AppConfig</code> method instead:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">config_yourself</span> <span class=\"k\">as</span> <span class=\"nn\">cy</span>\n\n<span class=\"c1\"># Use AppConfig</span>\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">AppConfig</span><span class=\"p\">()</span>\n<span class=\"c1\"># functionally equal to:</span>\n\n<span class=\"c1\"># Remember to set CONFIG_FILE=./config/production.yml</span>\n<span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">[</span>\n  <span class=\"s2\">\"./config/defaults.yml\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"./config/production.yml\"</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n\n<span class=\"c1\"># assuming CONFIG_FILE=\"\" and an existing \"personal.yml\" file</span>\n<span class=\"n\">cy</span><span class=\"o\">.</span><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"p\">[</span>\n  <span class=\"s2\">\"./config/defaults.yml\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"./config/local.yml\"</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"./config/personal.yml\"</span><span class=\"p\">,</span>\n<span class=\"p\">])</span>\n</pre>\n\n          </div>"}, "last_serial": 6320488, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "158c1077a027cacff941ef8771f2ae4c", "sha256": "1878633172453d36d8fe59bf66d94f76c73ef37c8176cafb5a25be4a458f6f5f"}, "downloads": -1, "filename": "config_yourself-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "158c1077a027cacff941ef8771f2ae4c", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 21355, "upload_time": "2019-11-22T22:18:38", "upload_time_iso_8601": "2019-11-22T22:18:38.127640Z", "url": "https://files.pythonhosted.org/packages/1b/40/878911f3f335638aaa8e1ec4c68558a37e4d3cf0132186ea875f72276bbd/config_yourself-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b76600064fb724e685ede02f4fcc9e19", "sha256": "03d187d46b65605cbc730fb519fc8f02aba714f58bef304ba2e3521c38016908"}, "downloads": -1, "filename": "config-yourself-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b76600064fb724e685ede02f4fcc9e19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22459, "upload_time": "2019-11-22T22:18:35", "upload_time_iso_8601": "2019-11-22T22:18:35.942333Z", "url": "https://files.pythonhosted.org/packages/c2/d5/7c44c45eedb1d71dcd1a6b33a21a6d011a6d9bc7f40b326caa4d61dbdb9c/config-yourself-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "6fea8e796f4a7b61c3e90657c904c39a", "sha256": "a9ecce7b248a19d62fe07cb790cf69bfd2b836884b2cf5d60885ded845bfdbfd"}, "downloads": -1, "filename": "config_yourself-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6fea8e796f4a7b61c3e90657c904c39a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 22212, "upload_time": "2019-12-17T20:02:56", "upload_time_iso_8601": "2019-12-17T20:02:56.259344Z", "url": "https://files.pythonhosted.org/packages/51/dc/3657f215a92e8cef91889bb6ed3e3b604e2e33d5d564e72a1ac43f1f92cd/config_yourself-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "444325b1071b21172ccc48c6822be1f9", "sha256": "0c57a6088a5fb3374da136750fb78ec5c00829d7986dad3bf80ba6ee076beb3f"}, "downloads": -1, "filename": "config-yourself-1.0.1.tar.gz", "has_sig": false, "md5_digest": "444325b1071b21172ccc48c6822be1f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23453, "upload_time": "2019-12-17T20:02:57", "upload_time_iso_8601": "2019-12-17T20:02:57.665701Z", "url": "https://files.pythonhosted.org/packages/ac/e5/8eef6bb26e05319b3158295eeb051db2f612b81c8f74c1473b88c5d1cd75/config-yourself-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "41c0adca9db5f7eae32f52753601509c", "sha256": "3427dfa6d1969b1fd625c9b2b4252545af462dd9d60d0b9d530f8eee37845ca9"}, "downloads": -1, "filename": "config_yourself-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41c0adca9db5f7eae32f52753601509c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 23566, "upload_time": "2019-12-17T20:58:42", "upload_time_iso_8601": "2019-12-17T20:58:42.937841Z", "url": "https://files.pythonhosted.org/packages/74/21/ed9707fbbf454c86f6bf53b4c466ae9989cb9f42b469eef17bfe26dbe4ef/config_yourself-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ca257c525c21d64ee96351f94bf38b9", "sha256": "9de174052a7ea66e9e43f8fafec0485e5f3cb5b065bed4628df8e603b6efbeff"}, "downloads": -1, "filename": "config-yourself-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1ca257c525c21d64ee96351f94bf38b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 23894, "upload_time": "2019-12-17T20:58:44", "upload_time_iso_8601": "2019-12-17T20:58:44.439348Z", "url": "https://files.pythonhosted.org/packages/e5/eb/fcca514b15da459b632c4fef1f40e746703ba2a88c256aa08a56212680f4/config-yourself-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "41c0adca9db5f7eae32f52753601509c", "sha256": "3427dfa6d1969b1fd625c9b2b4252545af462dd9d60d0b9d530f8eee37845ca9"}, "downloads": -1, "filename": "config_yourself-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "41c0adca9db5f7eae32f52753601509c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7.0", "size": 23566, "upload_time": "2019-12-17T20:58:42", "upload_time_iso_8601": "2019-12-17T20:58:42.937841Z", "url": "https://files.pythonhosted.org/packages/74/21/ed9707fbbf454c86f6bf53b4c466ae9989cb9f42b469eef17bfe26dbe4ef/config_yourself-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1ca257c525c21d64ee96351f94bf38b9", "sha256": "9de174052a7ea66e9e43f8fafec0485e5f3cb5b065bed4628df8e603b6efbeff"}, "downloads": -1, "filename": "config-yourself-1.0.2.tar.gz", "has_sig": false, "md5_digest": "1ca257c525c21d64ee96351f94bf38b9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7.0", "size": 23894, "upload_time": "2019-12-17T20:58:44", "upload_time_iso_8601": "2019-12-17T20:58:44.439348Z", "url": "https://files.pythonhosted.org/packages/e5/eb/fcca514b15da459b632c4fef1f40e746703ba2a88c256aa08a56212680f4/config-yourself-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:51 2020"}