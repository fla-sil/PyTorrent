{"info": {"author": "Ionel Cristian M\u0103rie\u0219", "author_email": "contact@ionelmc.ro", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Utilities"], "description": "======\nFields\n======\n\n.. list-table::\n    :stub-columns: 1\n\n    * - docs\n      - |docs|\n    * - tests\n      - | |travis| |appveyor| |requires|\n        | |coveralls| |codecov|\n        | |landscape| |scrutinizer| |codacy| |codeclimate|\n    * - package\n      - |version| |downloads| |wheel| |supported-versions| |supported-implementations|\n\n.. |docs| image:: https://readthedocs.org/projects/python-fields/badge/?style=flat\n    :target: https://readthedocs.org/projects/python-fields\n    :alt: Documentation Status\n\n.. |travis| image:: https://travis-ci.org/ionelmc/python-fields.svg?branch=master\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/ionelmc/python-fields\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/ionelmc/python-fields?branch=master&svg=true\n    :alt: AppVeyor Build Status\n    :target: https://ci.appveyor.com/project/ionelmc/python-fields\n\n.. |requires| image:: https://requires.io/github/ionelmc/python-fields/requirements.svg?branch=master\n    :alt: Requirements Status\n    :target: https://requires.io/github/ionelmc/python-fields/requirements/?branch=master\n\n.. |coveralls| image:: https://coveralls.io/repos/ionelmc/python-fields/badge.svg?branch=master&service=github\n    :alt: Coverage Status\n    :target: https://coveralls.io/r/ionelmc/python-fields\n\n.. |codecov| image:: https://codecov.io/github/ionelmc/python-fields/coverage.svg?branch=master\n    :alt: Coverage Status\n    :target: https://codecov.io/github/ionelmc/python-fields\n\n.. |landscape| image:: https://landscape.io/github/ionelmc/python-fields/master/landscape.svg?style=flat\n    :target: https://landscape.io/github/ionelmc/python-fields/master\n    :alt: Code Quality Status\n\n.. |codacy| image:: https://img.shields.io/codacy/REPLACE_WITH_PROJECT_ID.svg?style=flat\n    :target: https://www.codacy.com/app/ionelmc/python-fields\n    :alt: Codacy Code Quality Status\n\n.. |codeclimate| image:: https://codeclimate.com/github/ionelmc/python-fields/badges/gpa.svg\n   :target: https://codeclimate.com/github/ionelmc/python-fields\n   :alt: CodeClimate Quality Status\n.. |version| image:: https://img.shields.io/pypi/v/fields.svg?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/fields\n\n.. |downloads| image:: https://img.shields.io/pypi/dm/fields.svg?style=flat\n    :alt: PyPI Package monthly downloads\n    :target: https://pypi.python.org/pypi/fields\n\n.. |wheel| image:: https://img.shields.io/pypi/wheel/fields.svg?style=flat\n    :alt: PyPI Wheel\n    :target: https://pypi.python.org/pypi/fields\n\n.. |supported-versions| image:: https://img.shields.io/pypi/pyversions/fields.svg?style=flat\n    :alt: Supported versions\n    :target: https://pypi.python.org/pypi/fields\n\n.. |supported-implementations| image:: https://img.shields.io/pypi/implementation/fields.svg?style=flat\n    :alt: Supported implementations\n    :target: https://pypi.python.org/pypi/fields\n\n.. |scrutinizer| image:: https://img.shields.io/scrutinizer/g/ionelmc/python-fields/master.svg?style=flat\n    :alt: Scrutinizer Status\n    :target: https://scrutinizer-ci.com/g/ionelmc/python-fields/\n\nContainer class boilerplate killer.\n\nFeatures:\n\n* Human-readable ``__repr__``\n* Complete set of comparison methods\n* Keyword and positional argument support. Works like a normal class - you can override just about anything in the\n  subclass (eg: a custom ``__init__``). In contrast, `hynek/characteristic <https://github.com/hynek/characteristic>`_\n  forces different call schematics and calls your ``__init__`` with different arguments.\n\n\nInstallation\n============\n\n::\n\n    pip install fields\n\nUsage & examples\n================\n\nA class that has 2 attributes, ``name`` and ``size``:\n\n.. code:: pycon\n\n    >>> from fields import Fields\n    >>> class Pizza(Fields.name.size):\n    ...     pass\n    ...\n    >>> p = Pizza(\"Pepperoni\", \"large\")\n    >>> p\n    Pizza(name='Pepperoni', size='large')\n    >>> p.size\n    'large'\n    >>> p.name\n    'Pepperoni'\n\nYou can also use keyword arguments:\n\n.. code:: pycon\n\n    >>> Pizza(size=\"large\", name=\"Pepperoni\")\n    Pizza(name='Pepperoni', size='large')\n\nYou can have as many attributes as you want:\n\n.. code:: pycon\n\n    >>> class Pizza(Fields.name.ingredients.crust.size):\n    ...     pass\n    ...\n    >>> Pizza(\"Funghi\", [\"mushrooms\", \"mozarella\"], \"thin\", \"large\")\n    Pizza(name='Funghi', ingredients=['mushrooms', 'mozarella'], crust='thin', size='large')\n\n\nA class that has one required attribute ``value`` and two attributes (``left`` and ``right``) with default value\n``None``:\n\n.. code:: pycon\n\n    >>> class Node(Fields.value.left[None].right[None]):\n    ...     pass\n    ...\n    >>> Node(1, Node(2), Node(3, Node(4)))\n    Node(value=1, left=Node(value=2, left=None, right=None), right=Node(value=3, left=Node(value=4, left=None, right=None), right=None))\n    >>> Node(1, right=Node(2))\n    Node(value=1, left=None, right=Node(value=2, left=None, right=None))\n\nYou can also use it *inline*:\n\n.. code:: pycon\n\n    >>> Fields.name.size(\"Pepperoni\", \"large\")\n    FieldsBase(name='Pepperoni', size='large')\n\nWant tuples?\n------------\n\nAn alternative to ``namedtuple``:\n\n.. code:: python\n\n    >>> from fields import Tuple\n    >>> class Pair(Tuple.a.b):\n    ...     pass\n    ...\n    >>> issubclass(Pair, tuple)\n    True\n    >>> p = Pair(1, 2)\n    >>> p.a\n    1\n    >>> p.b\n    2\n    >>> tuple(p)\n    (1, 2)\n    >>> a, b = p\n    >>> a\n    1\n    >>> b\n    2\n\nTuples are *fast*!\n\n::\n\n    benchmark: 9 tests, min 5 rounds (of min 25.00us), 1.00s max time, timer: time.perf_counter\n\n    Name (time in us)                 Min        Max     Mean   StdDev  Rounds  Iterations\n    --------------------------------------------------------------------------------------\n    test_characteristic            6.0100  1218.4800  11.7102  34.3158   15899          10\n    test_fields                    6.8000  1850.5250   9.8448  33.8487    5535           4\n    test_slots_fields              6.3500   721.0300   8.6120  14.8090   15198          10\n    test_super_dumb                7.0111  1289.6667  11.6881  31.6012   15244           9\n    test_dumb                      3.7556   673.8444   5.8010  15.0514   14246          18\n    test_tuple                     3.1750   478.7750   5.1974   9.1878   14642          12\n    test_namedtuple                3.2778   538.1111   5.0403   9.9177   14105           9\n    test_attrs_decorated_class     4.2062   540.5125   5.3618  11.6708   14266          16\n    test_attrs_class               3.7889   316.1056   4.7731   6.0656   14026          18\n    --------------------------------------------------------------------------------------\n\nDocumentation\n=============\n\nhttps://python-fields.readthedocs.org/\n\nDevelopment\n===========\n\nTo run all the tests run ``tox`` in your shell (``pip install tox`` if you don't have it)::\n\n    tox\n\nFAQ\n===\n\nWhy should I use this?\n----------------------\n\nIt's less to type, why have quotes around when the names need to be valid symbols anyway. In fact, this is one of the\nshortest forms possible to specify a container with fields.\n\nBut you're abusing a very well known syntax. You're using attribute access instead of a list of strings. Why?\n--------------------------------------------------------------------------------------------------------------\n\nSymbols should be symbols. Why validate strings so they are valid symbols when you can avoid that? Just use symbols.\nSave on both typing and validation code.\n\nThe use of language constructs is not that surprising or confusing in the sense that semantics precede conventional\nsyntax use. For example, if we have ``class Person(Fields.first_name.last_name.height.weight): pass`` then it's going to\nbe clear we're talking about a *Person* object with *first_name*, *last_name*, *height* and *width* fields: the words\nhave clear meaning.\n\nAgain, you should not name your variables as `f1`, `f2` or any other non-semantic symbols anyway.\n\nSemantics precede syntax: it's like looking at a cake resembling a dog, you won't expect the cake to bark and run\naround.\n\n\n\nIs this stable? Is it tested?\n-------------------------------\n\nYes. Mercilessly tested on `Travis <https://travis-ci.org/ionelmc/python-fields>`_ and `AppVeyor\n<https://ci.appveyor.com/project/ionelmc/python-fields>`_.\n\nIs the API stable?\n-------------------\n\nYes, ofcourse.\n\nWhy not ``namedtuple``?\n------------------------\n\nIt's ugly, repetivive and unflexible. Compare this:\n\n.. code:: python\n\n    >>> from collections import namedtuple\n    >>> class MyContainer(namedtuple(\"MyContainer\", [\"field1\", \"field2\"])):\n    ...     pass\n    >>> MyContainer(1, 2)\n    MyContainer(field1=1, field2=2)\n\nTo this:\n\n.. code:: python\n\n    >>> class MyContainer(Tuple.field1.field2):\n    ...     pass\n    >>> MyContainer(1, 2)\n    MyContainer(field1=1, field2=2)\n\nWhy not ``characteristic``?\n----------------------------\n\nUgly, inconsistent - you don't own the class:\n\n    Lets try this:\n\n    .. code:: python\n\n        >>> import characteristic\n        >>> @characteristic.attributes([\"field1\", \"field2\"])\n        ... class MyContainer(object):\n        ...     def __init__(self, a, b):\n        ...         if a > b:\n        ...             raise ValueError(\"Expected %s < %s\" % (a, b))\n        >>> MyContainer(1, 2)\n        Traceback (most recent call last):\n            ...\n        ValueError: Missing keyword value for 'field1'.\n\n    WHAT !? Ok, lets write some more code:\n\n    .. code:: python\n\n        >>> MyContainer(field1=1, field2=2)\n        Traceback (most recent call last):\n            ...\n        TypeError: __init__() ... arguments...\n\n    This is bananas. You have to write your class *around* these quirks.\n\nLets try this:\n\n.. code:: python\n\n    >>> class MyContainer(Fields.field1.field2):\n    ...     def __init__(self, a, b):\n    ...         if a > b:\n    ...             raise ValueError(\"Expected %s < %s\" % (a, b))\n    ...         super(MyContainer, self).__init__(a, b)\n\nJust like a normal class, works as expected:\n\n.. code:: python\n\n    >>> MyContainer(1, 2)\n    MyContainer(field1=1, field2=2)\n\nWhy not ``attrs``?\n------------------\n\nNow this is a very difficult question.\n\nConsider this typical use-case::\n\n.. sourcecode:: pycon\n\n    >>> import attr\n    >>> @attr.s\n    ... class Point(object):\n    ...     x = attr.ib()\n    ...     y = attr.ib()\n\nWorth noting:\n\n* attrs_ is faster because it doesn't allow your class to be\n  used as a mixin (it doesn't do any ``super(cls, self).__init__(...)`` for you).\n* the typical use-case doesn't allow you to have a custom ``__init__``. If you define a custom\n  ``__init__``, it will get overridden by the one attrs_ generates.\n* It works better with IDEs and source code analysis tools because of the\n  attributes defined on the class.\n\nAll in all, attrs_ is a fast and minimal container library with no support for\nsubclasses. Definitely worth considering.\n\n.. _attrs: <https://pypi.python.org/pypi/attrs\n\nWon't this confuse ``pylint``?\n------------------------------\n\nNormaly it would, but there's a plugin that makes pylint understand it, just like any other class:\n`pylint-fields <https://github.com/ionelmc/pylint-fields>`_.\n\nTestimonials\n============\n\n..\n\n    Diabolical. Can't be unseen.\n\n    -- `David Beazley <https://twitter.com/dabeaz/status/670237225104355328>`_\n\n..\n\n    I think that's the saddest a single line of python has ever made me.\n\n    -- Someone on IRC (#python)\n\n..\n\n    Don't speak around saying that I like it.\n\n    -- A PyPy contributor\n\n..\n\n    Fields is completey bat-shit insane, but kind of cool.\n\n    -- Someone on IRC (#python)\n\n..\n\n    WHAT?!?!\n\n    -- Unsuspecting victim at EuroPython 2015\n\n.. \n\n    I don't think it should work ...\n\n    -- Unsuspecting victim at EuroPython 2015\n\n..\n\n    Is it some Ruby thing?\n\n    -- Unsuspecting victim at EuroPython 2015\n\n..\n\n    Are Python programmers that lazy?\n\n    -- Some Java developer\n\n..\n\n    I'm going to use this in my next project. You're a terrible person.\n\n    -- `Isaac Dickinson <https://github.com/sundwarf>`_\n\nApologies\n=========\n\nI tried my best at `EuroPython <https://youtu.be/nofEnPqj0cE?t=2554>`_ ...\n\n\nChangelog\n=========\n\n5.0.0 (2016-04-13)\n------------------\n\n* Added the ``fields.InheritableFields`` base. It allows subclassing and it's intended for multiple inheritance scenarios. Yes, \n  yes, this enables lots pain and suffering, but some people just like it that way.\n* Simplified the interfaces for the builtin sealers (the required argument is gone as it was redundant, and the remaining \n  arguments are swapped). Now they must be a function that take just two arguments: ``fields, defaults``.\n\n4.0.0 (2016-01-28)\n------------------\n\n* Added ``__all__`` and ``factory`` conveniences. Removed ``fields.Factory`` from the public API since it need some special\n  care with it's use (it's a damn metaclass after all).\n* Added ``make_init_func`` into public API for advanced uses (combine with ``factory`` and ``class_sealer``).\n\n3.0.0 (2015-10-04)\n------------------\n\n* Disallowed creating containers with fields with \"dunder\" names. E.g.: ``class Foo(Fields.__foo__):`` is disallowed.\n\n2.4.0 (2015-06-13)\n------------------\n\n* Similarly to ``fields.Fields``, added three new bases:\n\n  * ``fields.BareFields`` (implements ``__init__``).\n  * ``fields.ComparableMixin`` (implements ``__eq__``, ``__ne__``, ``__lt__``, ``__gt__``, ``__le__``, ``__ge__`` and ``__hash__``).\n  * ``fields.PrintableMixin`` (implements ``__repr__``).\n\n* Improved reference section in the docs.\n* Added ``fields.ConvertibleFields`` and ``fields.ConvertibleMixin``. They have two convenience properties: ``as_dict`` and `as_tuple``.\n\n2.3.0 (2015-01-20)\n------------------\n\n* Allowed overriding ``__slots__`` in ``SlotsFields`` subclasses.\n\n2.2.0 (2015-01-19)\n------------------\n\n* Added ``make_init_func`` as an optional argument to ``class_sealer``. Rename the ``__base__`` option to just ``base``.\n\n2.1.1 (2015-01-19)\n------------------\n\n* Removed bogus ``console_scripts`` entrypoint.\n\n2.1.0 (2015-01-09)\n------------------\n\n* Added ``SlotsFields`` (same as ``Fields`` but automatically adds ``__slots__`` for memory efficiency on CPython).\n* Added support for default argument to Tuple.\n\n2.0.0 (2014-10-16)\n------------------\n\n* Made the __init__ in the FieldsBase way faster (used for ``fields.Fields``).\n* Moved ``RegexValidate`` in ``fields.extras``.\n\n1.0.0 (2014-10-05)\n------------------\n\n* Lots of internal changes, the metaclass is not created in a closure anymore. No more closures.\n* Added ``RegexValidate`` container creator (should be taken as an example on using the Factory metaclass).\n* Added support for using multiple containers as baseclasses.\n* Added a ``super()`` `sink` so that ``super().__init__(*args, **kwargs)`` always works. Everything inherits from a\n  baseclass that has an ``__init__`` that can take any argument (unlike ``object.__init__``). This allows for flexible\n  usage.\n* Added validation so that you can't use conflicting field layout when using multiple containers as the baseclass.\n* Changed the __init__ function in the class container so it works like a python function w.r.t. positional and keyword\n  arguments. Example: ``class MyContainer(Fields.a.b.c[1].d[2])`` will function the same way as ``def func(a, b, c=1,\n  d=2)`` would when arguments are passed in. You can now use ``MyContainer(1, 2, 3, 4)`` (everything positional) or\n  ``MyContainer(1, 2, 3, d=4)`` (mixed).\n\n0.3.0 (2014-07-19)\n------------------\n\n* Corrected string repr.\n\n0.2.0 (2014-06-28)\n------------------\n\n* Lots of breaking changes. Switched from __call__ to __getitem__ for default value assignment.\n\n0.1.0 (2014-06-27)\n------------------\n\n* Alpha release.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ionelmc/python-fields", "keywords": "container,fields,object,class,boilerplate", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "fields", "package_url": "https://pypi.org/project/fields/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fields/", "project_urls": {"Homepage": "https://github.com/ionelmc/python-fields"}, "release_url": "https://pypi.org/project/fields/5.0.0/", "requires_dist": null, "requires_python": "", "summary": "Container class boilerplate killer.", "version": "5.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><th>docs</th>\n<td><a href=\"https://readthedocs.org/projects/python-fields\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4df786fa1ca8680c59eee436e4bc67568906b988/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f707974686f6e2d6669656c64732f62616467652f3f7374796c653d666c6174\"></a></td>\n</tr>\n<tr><th>tests</th>\n<td><div>\n<div><a href=\"https://travis-ci.org/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"Travis-CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d26543de8cadd26e2e9136d569b82a1d66571d8/68747470733a2f2f7472617669732d63692e6f72672f696f6e656c6d632f707974686f6e2d6669656c64732e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://ci.appveyor.com/project/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"AppVeyor Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb01c4374d5b1d4a344d64d5b2d40a26c231d9f8/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f696f6e656c6d632f707974686f6e2d6669656c64733f6272616e63683d6d6173746572267376673d74727565\"></a> <a href=\"https://requires.io/github/ionelmc/python-fields/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33c1d143433f5c3dd1cc5d851691d0b4f6eb76e5/68747470733a2f2f72657175697265732e696f2f6769746875622f696f6e656c6d632f707974686f6e2d6669656c64732f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a></div>\n<div><a href=\"https://coveralls.io/r/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e1af17a97b58f0eb133fbe49a15470a02b02ff8/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f696f6e656c6d632f707974686f6e2d6669656c64732f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a> <a href=\"https://codecov.io/github/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/853da55b4d78fd574889efbc3a6d399594f2651f/68747470733a2f2f636f6465636f762e696f2f6769746875622f696f6e656c6d632f707974686f6e2d6669656c64732f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a></div>\n<div><a href=\"https://landscape.io/github/ionelmc/python-fields/master\" rel=\"nofollow\"><img alt=\"Code Quality Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52b3b57b31d3c1b40909cdfcafeabb6efd124ab3/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f696f6e656c6d632f707974686f6e2d6669656c64732f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a> <a href=\"https://scrutinizer-ci.com/g/ionelmc/python-fields/\" rel=\"nofollow\"><img alt=\"Scrutinizer Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b0b24e7b6d8d6289517ad00c6093c985370393b/68747470733a2f2f696d672e736869656c64732e696f2f7363727574696e697a65722f672f696f6e656c6d632f707974686f6e2d6669656c64732f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://www.codacy.com/app/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"Codacy Code Quality Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b52f721ceae3a4df51b9624bca2b0cca4488ace0/68747470733a2f2f696d672e736869656c64732e696f2f636f646163792f5245504c4143455f574954485f50524f4a4543545f49442e7376673f7374796c653d666c6174\"></a> <a href=\"https://codeclimate.com/github/ionelmc/python-fields\" rel=\"nofollow\"><img alt=\"CodeClimate Quality Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/aba2c7606dae506bf68fe8e5d3f475936ed49532/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f696f6e656c6d632f707974686f6e2d6669656c64732f6261646765732f6770612e737667\"></a></div>\n</div>\n</td>\n</tr>\n<tr><th>package</th>\n<td><a href=\"https://pypi.python.org/pypi/fields\" rel=\"nofollow\"><img alt=\"PyPI Package latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/466199f991f6ab5ef3755f37231e7d70eecc8528/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6669656c64732e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/fields\" rel=\"nofollow\"><img alt=\"PyPI Package monthly downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8ebabf112057bcbb0fcb09075f417cdbbb88b4c6/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6669656c64732e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/fields\" rel=\"nofollow\"><img alt=\"PyPI Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9aefbf40837841c1cda37a0c2f4409a403c0d33a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6669656c64732e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/fields\" rel=\"nofollow\"><img alt=\"Supported versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/173c93618ef99c2cb29b716d551843ccea8bb6fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6669656c64732e7376673f7374796c653d666c6174\"></a> <a href=\"https://pypi.python.org/pypi/fields\" rel=\"nofollow\"><img alt=\"Supported implementations\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4134f3e0b06d95dc4ab9b9fb95c3faf081ff320e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f6669656c64732e7376673f7374796c653d666c6174\"></a></td>\n</tr>\n</tbody>\n</table>\n<p>Container class boilerplate killer.</p>\n<p>Features:</p>\n<ul>\n<li>Human-readable <tt>__repr__</tt></li>\n<li>Complete set of comparison methods</li>\n<li>Keyword and positional argument support. Works like a normal class - you can override just about anything in the\nsubclass (eg: a custom <tt>__init__</tt>). In contrast, <a href=\"https://github.com/hynek/characteristic\" rel=\"nofollow\">hynek/characteristic</a>\nforces different call schematics and calls your <tt>__init__</tt> with different arguments.</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install fields\n</pre>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage &amp; examples</h2>\n<p>A class that has 2 attributes, <tt>name</tt> and <tt>size</tt>:</p>\n<pre><span class=\"kn\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">fields</span> <span class=\"kn\">import</span> <span class=\"n\">Fields</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pizza</span><span class=\"p\">(</span><span class=\"s2\">\"Pepperoni\"</span><span class=\"p\">,</span> <span class=\"s2\">\"large\"</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span>\n<span class=\"go\">Pizza(name='Pepperoni', size='large')\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"go\">'large'\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"go\">'Pepperoni'</span>\n</pre>\n<p>You can also use keyword arguments:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Pizza</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"s2\">\"large\"</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Pepperoni\"</span><span class=\"p\">)</span>\n<span class=\"go\">Pizza(name='Pepperoni', size='large')</span>\n</pre>\n<p>You can have as many attributes as you want:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Pizza</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">ingredients</span><span class=\"o\">.</span><span class=\"n\">crust</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Pizza</span><span class=\"p\">(</span><span class=\"s2\">\"Funghi\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"mushrooms\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mozarella\"</span><span class=\"p\">],</span> <span class=\"s2\">\"thin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"large\"</span><span class=\"p\">)</span>\n<span class=\"go\">Pizza(name='Funghi', ingredients=['mushrooms', 'mozarella'], crust='thin', size='large')</span>\n</pre>\n<p>A class that has one required attribute <tt>value</tt> and two attributes (<tt>left</tt> and <tt>right</tt>) with default value\n<tt>None</tt>:</p>\n<pre><span class=\"k\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">left</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">right</span><span class=\"p\">[</span><span class=\"kc\">None</span><span class=\"p\">]):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">pass</span>\n<span class=\"gp\">...</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)))</span>\n<span class=\"go\">Node(value=1, left=Node(value=2, left=None, right=None), right=Node(value=3, left=Node(value=4, left=None, right=None), right=None))\n</span><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"n\">Node</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"go\">Node(value=1, left=None, right=Node(value=2, left=None, right=None))</span>\n</pre>\n<p>You can also use it <em>inline</em>:</p>\n<pre><span class=\"n\"></span><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">(</span><span class=\"s2\">\"Pepperoni\"</span><span class=\"p\">,</span> <span class=\"s2\">\"large\"</span><span class=\"p\">)</span>\n<span class=\"go\">FieldsBase(name='Pepperoni', size='large')</span>\n</pre>\n<div id=\"want-tuples\">\n<h3>Want tuples?</h3>\n<p>An alternative to <tt>namedtuple</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">fields</span> <span class=\"kn\">import</span> <span class=\"n\">Tuple</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Pair</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"o\">.</span><span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">issubclass</span><span class=\"p\">(</span><span class=\"n\">Pair</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pair</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">b</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">p</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span>\n<span class=\"mi\">2</span>\n</pre>\n<p>Tuples are <em>fast</em>!</p>\n<pre>benchmark: 9 tests, min 5 rounds (of min 25.00us), 1.00s max time, timer: time.perf_counter\n\nName (time in us)                 Min        Max     Mean   StdDev  Rounds  Iterations\n--------------------------------------------------------------------------------------\ntest_characteristic            6.0100  1218.4800  11.7102  34.3158   15899          10\ntest_fields                    6.8000  1850.5250   9.8448  33.8487    5535           4\ntest_slots_fields              6.3500   721.0300   8.6120  14.8090   15198          10\ntest_super_dumb                7.0111  1289.6667  11.6881  31.6012   15244           9\ntest_dumb                      3.7556   673.8444   5.8010  15.0514   14246          18\ntest_tuple                     3.1750   478.7750   5.1974   9.1878   14642          12\ntest_namedtuple                3.2778   538.1111   5.0403   9.9177   14105           9\ntest_attrs_decorated_class     4.2062   540.5125   5.3618  11.6708   14266          16\ntest_attrs_class               3.7889   316.1056   4.7731   6.0656   14026          18\n--------------------------------------------------------------------------------------\n</pre>\n</div>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"https://python-fields.readthedocs.org/\" rel=\"nofollow\">https://python-fields.readthedocs.org/</a></p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To run all the tests run <tt>tox</tt> in your shell (<tt>pip install tox</tt> if you don\u2019t have it):</p>\n<pre>tox\n</pre>\n</div>\n<div id=\"faq\">\n<h2>FAQ</h2>\n<div id=\"why-should-i-use-this\">\n<h3>Why should I use this?</h3>\n<p>It\u2019s less to type, why have quotes around when the names need to be valid symbols anyway. In fact, this is one of the\nshortest forms possible to specify a container with fields.</p>\n</div>\n<div id=\"but-you-re-abusing-a-very-well-known-syntax-you-re-using-attribute-access-instead-of-a-list-of-strings-why\">\n<h3>But you\u2019re abusing a very well known syntax. You\u2019re using attribute access instead of a list of strings. Why?</h3>\n<p>Symbols should be symbols. Why validate strings so they are valid symbols when you can avoid that? Just use symbols.\nSave on both typing and validation code.</p>\n<p>The use of language constructs is not that surprising or confusing in the sense that semantics precede conventional\nsyntax use. For example, if we have <tt>class Person(Fields.first_name.last_name.height.weight): pass</tt> then it\u2019s going to\nbe clear we\u2019re talking about a <em>Person</em> object with <em>first_name</em>, <em>last_name</em>, <em>height</em> and <em>width</em> fields: the words\nhave clear meaning.</p>\n<p>Again, you should not name your variables as <cite>f1</cite>, <cite>f2</cite> or any other non-semantic symbols anyway.</p>\n<p>Semantics precede syntax: it\u2019s like looking at a cake resembling a dog, you won\u2019t expect the cake to bark and run\naround.</p>\n</div>\n<div id=\"is-this-stable-is-it-tested\">\n<h3>Is this stable? Is it tested?</h3>\n<p>Yes. Mercilessly tested on <a href=\"https://travis-ci.org/ionelmc/python-fields\" rel=\"nofollow\">Travis</a> and <a href=\"https://ci.appveyor.com/project/ionelmc/python-fields\" rel=\"nofollow\">AppVeyor</a>.</p>\n</div>\n<div id=\"is-the-api-stable\">\n<h3>Is the API stable?</h3>\n<p>Yes, ofcourse.</p>\n</div>\n<div id=\"why-not-namedtuple\">\n<h3>Why not <tt>namedtuple</tt>?</h3>\n<p>It\u2019s ugly, repetivive and unflexible. Compare this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">namedtuple</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">namedtuple</span><span class=\"p\">(</span><span class=\"s2\">\"MyContainer\"</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"field1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">])):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n<p>To this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">Tuple</span><span class=\"o\">.</span><span class=\"n\">field1</span><span class=\"o\">.</span><span class=\"n\">field2</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"why-not-characteristic\">\n<h3>Why not <tt>characteristic</tt>?</h3>\n<p>Ugly, inconsistent - you don\u2019t own the class:</p>\n<blockquote>\n<p>Lets try this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">characteristic</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@characteristic</span><span class=\"o\">.</span><span class=\"n\">attributes</span><span class=\"p\">([</span><span class=\"s2\">\"field1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"field2\"</span><span class=\"p\">])</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">MyContainer</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Expected </span><span class=\"si\">%s</span><span class=\"s2\"> &lt; </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Missing</span> <span class=\"n\">keyword</span> <span class=\"n\">value</span> <span class=\"k\">for</span> <span class=\"s1\">'field1'</span><span class=\"o\">.</span>\n</pre>\n<p>WHAT !? Ok, lets write some more code:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"fm\">__init__</span><span class=\"p\">()</span> <span class=\"o\">...</span> <span class=\"n\">arguments</span><span class=\"o\">...</span>\n</pre>\n<p>This is bananas. You have to write your class <em>around</em> these quirks.</p>\n</blockquote>\n<p>Lets try this:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">Fields</span><span class=\"o\">.</span><span class=\"n\">field1</span><span class=\"o\">.</span><span class=\"n\">field2</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">if</span> <span class=\"n\">a</span> <span class=\"o\">&gt;</span> <span class=\"n\">b</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>             <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s2\">\"Expected </span><span class=\"si\">%s</span><span class=\"s2\"> &lt; </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>         <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyContainer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Just like a normal class, works as expected:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">MyContainer</span><span class=\"p\">(</span><span class=\"n\">field1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">field2</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"why-not-attrs\">\n<h3>Why not <tt>attrs</tt>?</h3>\n<p>Now this is a very difficult question.</p>\n<p>Consider this typical use-case:</p>\n<pre>.. sourcecode:: pycon\n</pre>\n<blockquote>\n<pre>&gt;&gt;&gt; import attr\n&gt;&gt;&gt; @attr.s\n... class Point(object):\n...     x = attr.ib()\n...     y = attr.ib()\n</pre>\n</blockquote>\n<p>Worth noting:</p>\n<ul>\n<li><a href=\"&lt;https://pypi.python.org/pypi/attrs\" rel=\"nofollow\">attrs</a> is faster because it doesn\u2019t allow your class to be\nused as a mixin (it doesn\u2019t do any <tt>super(cls, <span class=\"pre\">self).__init__(...)</span></tt> for you).</li>\n<li>the typical use-case doesn\u2019t allow you to have a custom <tt>__init__</tt>. If you define a custom\n<tt>__init__</tt>, it will get overridden by the one <a href=\"&lt;https://pypi.python.org/pypi/attrs\" rel=\"nofollow\">attrs</a> generates.</li>\n<li>It works better with IDEs and source code analysis tools because of the\nattributes defined on the class.</li>\n</ul>\n<p>All in all, <a href=\"&lt;https://pypi.python.org/pypi/attrs\" rel=\"nofollow\">attrs</a> is a fast and minimal container library with no support for\nsubclasses. Definitely worth considering.</p>\n</div>\n<div id=\"won-t-this-confuse-pylint\">\n<h3>Won\u2019t this confuse <tt>pylint</tt>?</h3>\n<p>Normaly it would, but there\u2019s a plugin that makes pylint understand it, just like any other class:\n<a href=\"https://github.com/ionelmc/pylint-fields\" rel=\"nofollow\">pylint-fields</a>.</p>\n</div>\n</div>\n<div id=\"testimonials\">\n<h2>Testimonials</h2>\n<blockquote>\n<p>Diabolical. Can\u2019t be unseen.</p>\n<p>\u2014<a href=\"https://twitter.com/dabeaz/status/670237225104355328\" rel=\"nofollow\">David Beazley</a></p>\n</blockquote>\n<blockquote>\n<p>I think that\u2019s the saddest a single line of python has ever made me.</p>\n<p>\u2014Someone on IRC (#python)</p>\n</blockquote>\n<blockquote>\n<p>Don\u2019t speak around saying that I like it.</p>\n<p>\u2014A PyPy contributor</p>\n</blockquote>\n<blockquote>\n<p>Fields is completey bat-shit insane, but kind of cool.</p>\n<p>\u2014Someone on IRC (#python)</p>\n</blockquote>\n<blockquote>\n<p>WHAT?!?!</p>\n<p>\u2014Unsuspecting victim at EuroPython 2015</p>\n</blockquote>\n<blockquote>\n<p>I don\u2019t think it should work \u2026</p>\n<p>\u2014Unsuspecting victim at EuroPython 2015</p>\n</blockquote>\n<blockquote>\n<p>Is it some Ruby thing?</p>\n<p>\u2014Unsuspecting victim at EuroPython 2015</p>\n</blockquote>\n<blockquote>\n<p>Are Python programmers that lazy?</p>\n<p>\u2014Some Java developer</p>\n</blockquote>\n<blockquote>\n<p>I\u2019m going to use this in my next project. You\u2019re a terrible person.</p>\n<p>\u2014<a href=\"https://github.com/sundwarf\" rel=\"nofollow\">Isaac Dickinson</a></p>\n</blockquote>\n</div>\n<div id=\"apologies\">\n<h2>Apologies</h2>\n<p>I tried my best at <a href=\"https://youtu.be/nofEnPqj0cE?t=2554\" rel=\"nofollow\">EuroPython</a> \u2026</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>5.0.0 (2016-04-13)</h3>\n<ul>\n<li>Added the <tt>fields.InheritableFields</tt> base. It allows subclassing and it\u2019s intended for multiple inheritance scenarios. Yes,\nyes, this enables lots pain and suffering, but some people just like it that way.</li>\n<li>Simplified the interfaces for the builtin sealers (the required argument is gone as it was redundant, and the remaining\narguments are swapped). Now they must be a function that take just two arguments: <tt>fields, defaults</tt>.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>4.0.0 (2016-01-28)</h3>\n<ul>\n<li>Added <tt>__all__</tt> and <tt>factory</tt> conveniences. Removed <tt>fields.Factory</tt> from the public API since it need some special\ncare with it\u2019s use (it\u2019s a damn metaclass after all).</li>\n<li>Added <tt>make_init_func</tt> into public API for advanced uses (combine with <tt>factory</tt> and <tt>class_sealer</tt>).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>3.0.0 (2015-10-04)</h3>\n<ul>\n<li>Disallowed creating containers with fields with \u201cdunder\u201d names. E.g.: <tt>class Foo(Fields.__foo__):</tt> is disallowed.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>2.4.0 (2015-06-13)</h3>\n<ul>\n<li>Similarly to <tt>fields.Fields</tt>, added three new bases:<ul>\n<li><tt>fields.BareFields</tt> (implements <tt>__init__</tt>).</li>\n<li><tt>fields.ComparableMixin</tt> (implements <tt>__eq__</tt>, <tt>__ne__</tt>, <tt>__lt__</tt>, <tt>__gt__</tt>, <tt>__le__</tt>, <tt>__ge__</tt> and <tt>__hash__</tt>).</li>\n<li><tt>fields.PrintableMixin</tt> (implements <tt>__repr__</tt>).</li>\n</ul>\n</li>\n<li>Improved reference section in the docs.</li>\n<li>Added <tt>fields.ConvertibleFields</tt> and <tt>fields.ConvertibleMixin</tt>. They have two convenience properties: <tt>as_dict</tt> and <cite>as_tuple`</cite>.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>2.3.0 (2015-01-20)</h3>\n<ul>\n<li>Allowed overriding <tt>__slots__</tt> in <tt>SlotsFields</tt> subclasses.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>2.2.0 (2015-01-19)</h3>\n<ul>\n<li>Added <tt>make_init_func</tt> as an optional argument to <tt>class_sealer</tt>. Rename the <tt>__base__</tt> option to just <tt>base</tt>.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>2.1.1 (2015-01-19)</h3>\n<ul>\n<li>Removed bogus <tt>console_scripts</tt> entrypoint.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>2.1.0 (2015-01-09)</h3>\n<ul>\n<li>Added <tt>SlotsFields</tt> (same as <tt>Fields</tt> but automatically adds <tt>__slots__</tt> for memory efficiency on CPython).</li>\n<li>Added support for default argument to Tuple.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>2.0.0 (2014-10-16)</h3>\n<ul>\n<li>Made the __init__ in the FieldsBase way faster (used for <tt>fields.Fields</tt>).</li>\n<li>Moved <tt>RegexValidate</tt> in <tt>fields.extras</tt>.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.0.0 (2014-10-05)</h3>\n<ul>\n<li>Lots of internal changes, the metaclass is not created in a closure anymore. No more closures.</li>\n<li>Added <tt>RegexValidate</tt> container creator (should be taken as an example on using the Factory metaclass).</li>\n<li>Added support for using multiple containers as baseclasses.</li>\n<li>Added a <tt>super()</tt> <cite>sink</cite> so that <tt><span class=\"pre\">super().__init__(*args,</span> **kwargs)</tt> always works. Everything inherits from a\nbaseclass that has an <tt>__init__</tt> that can take any argument (unlike <tt>object.__init__</tt>). This allows for flexible\nusage.</li>\n<li>Added validation so that you can\u2019t use conflicting field layout when using multiple containers as the baseclass.</li>\n<li>Changed the __init__ function in the class container so it works like a python function w.r.t. positional and keyword\narguments. Example: <tt>class <span class=\"pre\">MyContainer(Fields.a.b.c[1].d[2])</span></tt> will function the same way as <tt>def func(a, b, c=1,\nd=2)</tt> would when arguments are passed in. You can now use <tt>MyContainer(1, 2, 3, 4)</tt> (everything positional) or\n<tt>MyContainer(1, 2, 3, d=4)</tt> (mixed).</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.3.0 (2014-07-19)</h3>\n<ul>\n<li>Corrected string repr.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.2.0 (2014-06-28)</h3>\n<ul>\n<li>Lots of breaking changes. Switched from __call__ to __getitem__ for default value assignment.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.1.0 (2014-06-27)</h3>\n<ul>\n<li>Alpha release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2062655, "releases": {"0.1": [], "0.1.0": [{"comment_text": "", "digests": {"md5": "44801211e03f262a5c53d8e1487f47f6", "sha256": "914e02eef2badf017bc058c769ffdbb708dbf5ed0f91bcf0c3bd08f3f19e861e"}, "downloads": -1, "filename": "fields-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "44801211e03f262a5c53d8e1487f47f6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5844, "upload_time": "2014-06-27T17:26:59", "upload_time_iso_8601": "2014-06-27T17:26:59.899976Z", "url": "https://files.pythonhosted.org/packages/bb/e8/78c2013d8cb36508dd0876fec3aa80221309bbc7b54d297905c51f5b4510/fields-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10d1f8d7fcf5b94ff33d0bb5776dc226", "sha256": "eace88c4ba89388c54039743c4a5fe8efb2f610120cfd8caca18f766bf03d582"}, "downloads": -1, "filename": "fields-0.1.0.tar.gz", "has_sig": false, "md5_digest": "10d1f8d7fcf5b94ff33d0bb5776dc226", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12528, "upload_time": "2014-06-27T17:26:56", "upload_time_iso_8601": "2014-06-27T17:26:56.328367Z", "url": "https://files.pythonhosted.org/packages/9f/ea/95dba455c643b71a9e363b71f9106672269309725846b82b532739a2bbf8/fields-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "ab5fd6cdf6a9e0a22b361541cb121aac", "sha256": "f052c0c869a1205d194631fda4a5db42efbdd50fa19b265fc2689e841faf5134"}, "downloads": -1, "filename": "fields-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ab5fd6cdf6a9e0a22b361541cb121aac", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7512, "upload_time": "2014-06-27T22:14:26", "upload_time_iso_8601": "2014-06-27T22:14:26.541299Z", "url": "https://files.pythonhosted.org/packages/9e/b2/76fbe1abc985218be3521ae85741a218f9d2a9d36aa8f0d8c10686215513/fields-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1bae8a918782dfada57686b5ff534879", "sha256": "bcf0e9470cb92d0a6760412c0de109d8801fd2379d890c003a623d5d311846f4"}, "downloads": -1, "filename": "fields-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1bae8a918782dfada57686b5ff534879", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14492, "upload_time": "2014-06-27T22:14:24", "upload_time_iso_8601": "2014-06-27T22:14:24.608259Z", "url": "https://files.pythonhosted.org/packages/65/16/51a70ecf130d4f6f79a54a41e4b42b165223b787de3feb798e8da5ec7c93/fields-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "167b349b8edacaec4218e3d06d576f88", "sha256": "c46618fea5409f12f8d0bd9ba538d96974551ab6dedd5e7494ff9184f7330a6a"}, "downloads": -1, "filename": "fields-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "167b349b8edacaec4218e3d06d576f88", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 8094, "upload_time": "2014-07-19T18:49:33", "upload_time_iso_8601": "2014-07-19T18:49:33.470545Z", "url": "https://files.pythonhosted.org/packages/f2/f5/9824a1657603f4f7a54c832108d5263bb7f3790f7e7a9a00843f18abdf25/fields-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "017ed72b67a0589413e6096502df080d", "sha256": "8178e52d29570c61a4438c4207f91890b9aa0fa965648a39bdbbab8485eeacc1"}, "downloads": -1, "filename": "fields-0.3.0.tar.gz", "has_sig": false, "md5_digest": "017ed72b67a0589413e6096502df080d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15066, "upload_time": "2014-07-19T18:49:30", "upload_time_iso_8601": "2014-07-19T18:49:30.114587Z", "url": "https://files.pythonhosted.org/packages/f5/8c/0e0d6d8781aea07cdeb88679612cfdec7f6c7aa0087ebc26c5f5bb430d0f/fields-0.3.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "7983313aff08f29f1d2d41c2f758aa2d", "sha256": "ff2be4fae11e0d0d609800f25dd3d08ede5a3bf8929854d3435e14a83674081e"}, "downloads": -1, "filename": "fields-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7983313aff08f29f1d2d41c2f758aa2d", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13973, "upload_time": "2014-10-04T21:40:26", "upload_time_iso_8601": "2014-10-04T21:40:26.479963Z", "url": "https://files.pythonhosted.org/packages/fc/15/ad457aed2ab0430783496d3b49948d1b5173aadb7c93f19738cf1c8f67a9/fields-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2edca0f81af3f71ca5c85e2f29475d63", "sha256": "1849ba7da5b2f0cf8354c8617f7a03416757532f9176dc339265cd25026aa0eb"}, "downloads": -1, "filename": "fields-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2edca0f81af3f71ca5c85e2f29475d63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18933, "upload_time": "2014-10-04T21:40:23", "upload_time_iso_8601": "2014-10-04T21:40:23.217543Z", "url": "https://files.pythonhosted.org/packages/24/fa/a6bb79758e8f3537c6550b29b49f90190d1ea9800b690356a74d1c135f2b/fields-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b36821cde86ec758f58f2d43078b4388", "sha256": "5ccd6d9b6388025c02820c12916b15b9c6f75d01fb0ba44d5055bcb224ce6803"}, "downloads": -1, "filename": "fields-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b36821cde86ec758f58f2d43078b4388", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13969, "upload_time": "2014-10-04T22:00:31", "upload_time_iso_8601": "2014-10-04T22:00:31.764776Z", "url": "https://files.pythonhosted.org/packages/5e/10/4cafba4e12a4064766a72a4509e6c749b1e7d335e4924e0b48694b60dfb1/fields-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4b6eb37b202c6c84d7d97e933e73c89", "sha256": "c950604b06f0303cd5bb08587b4b00b61cc0c7e1801752f1eb471e8d69114c77"}, "downloads": -1, "filename": "fields-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b4b6eb37b202c6c84d7d97e933e73c89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18947, "upload_time": "2014-10-04T22:00:28", "upload_time_iso_8601": "2014-10-04T22:00:28.688387Z", "url": "https://files.pythonhosted.org/packages/1d/73/ea9785817d6348a014f28635ff3855bfad43a38e4e793b58e1ac3310c48d/fields-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2db78132c1a5af324078c67a19d08a60", "sha256": "8ba71ab10c6071dea89a6546e437f9178ef51fc27eab841091a2f1075cd337f4"}, "downloads": -1, "filename": "fields-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2db78132c1a5af324078c67a19d08a60", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13930, "upload_time": "2014-10-04T22:07:12", "upload_time_iso_8601": "2014-10-04T22:07:12.725560Z", "url": "https://files.pythonhosted.org/packages/5c/e8/dff236a00f31ab58a5af7abd98fb7c5ce231d7bb7d7478743c758024d8a9/fields-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30607322d62238950a17668c923ecaea", "sha256": "ade5c7b34be379d86370d21ef2ad6a6c8b41d290f21952c22817b3684bd4c872"}, "downloads": -1, "filename": "fields-1.0.2.tar.gz", "has_sig": false, "md5_digest": "30607322d62238950a17668c923ecaea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18960, "upload_time": "2014-10-04T22:07:09", "upload_time_iso_8601": "2014-10-04T22:07:09.051769Z", "url": "https://files.pythonhosted.org/packages/24/e4/d3fc8a144d536982679d8beca1110fe0b7d3c09e5efa8440ead0fd7d5bab/fields-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2207c8fe3b44bb91c7a99c9730a7cf10", "sha256": "6d0e891694778307d22ac616828ea61b1b2bf1386f876e9ebb4e35b3e7d78709"}, "downloads": -1, "filename": "fields-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2207c8fe3b44bb91c7a99c9730a7cf10", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13956, "upload_time": "2014-10-04T22:20:55", "upload_time_iso_8601": "2014-10-04T22:20:55.494150Z", "url": "https://files.pythonhosted.org/packages/26/49/babb433856c844469314aedbce081be3a451764dd231ab0b6a134828f276/fields-1.0.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54e5cf52400796e29090bf37024481b4", "sha256": "c4802db09a9573329abdfd085da11afba0b575677d6d484f9f3d19b9c36b6117"}, "downloads": -1, "filename": "fields-1.0.3.tar.gz", "has_sig": false, "md5_digest": "54e5cf52400796e29090bf37024481b4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19043, "upload_time": "2014-10-04T22:20:52", "upload_time_iso_8601": "2014-10-04T22:20:52.395487Z", "url": "https://files.pythonhosted.org/packages/2a/d4/e03823f509138c4e85e3dda6e29613c19e28244caa094146287d38fcba9c/fields-1.0.3.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "fa97225a89c017d7bc0e0bc59b493563", "sha256": "b64a7fb55bd4e3c10aa82422dd869667d64b25ef31bd5e5c0be9412953d56791"}, "downloads": -1, "filename": "fields-2.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fa97225a89c017d7bc0e0bc59b493563", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14643, "upload_time": "2014-10-15T21:27:01", "upload_time_iso_8601": "2014-10-15T21:27:01.107083Z", "url": "https://files.pythonhosted.org/packages/49/69/4e0490fa0ff327425701a223f4cbb2345350effc8c046bf97e8323a32ba5/fields-2.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60e8b873e6d4f8dd60ef773e8fdb3c15", "sha256": "e96e4b946dadacaeaa5b2aeab7b398a423a523205c33ed7597e177895c297a0a"}, "downloads": -1, "filename": "fields-2.0.0.tar.gz", "has_sig": false, "md5_digest": "60e8b873e6d4f8dd60ef773e8fdb3c15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19843, "upload_time": "2014-10-15T21:26:57", "upload_time_iso_8601": "2014-10-15T21:26:57.690582Z", "url": "https://files.pythonhosted.org/packages/d7/26/439804f711463dbbc52fcdf3b59708f26c9ba73f94bf9efda8756cf4b7e3/fields-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "6d5abe1ab4f61a9b0f376eab1a0b597c", "sha256": "b5552b386bc7158598f252c33890653a207bf8f00516b83709fd98b4a7fdc94f"}, "downloads": -1, "filename": "fields-2.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d5abe1ab4f61a9b0f376eab1a0b597c", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14075, "upload_time": "2015-01-09T18:10:39", "upload_time_iso_8601": "2015-01-09T18:10:39.366851Z", "url": "https://files.pythonhosted.org/packages/8e/ed/cc0a62679f1ef7356db6176a15cc23ffc3a99c0e005a6d6c56ed7deffc46/fields-2.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f03998ea1f58f901f27b9d2d7288ec83", "sha256": "2ae4b998c3d167621c9e586b5c268bc501ba7a2e51eed8ec1537aa78ff90452a"}, "downloads": -1, "filename": "fields-2.1.0.tar.gz", "has_sig": false, "md5_digest": "f03998ea1f58f901f27b9d2d7288ec83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24458, "upload_time": "2015-01-09T18:10:35", "upload_time_iso_8601": "2015-01-09T18:10:35.974921Z", "url": "https://files.pythonhosted.org/packages/ba/87/d7ea814d6c3706dbcbd4abe95c13f8f53a2ad3a94c1733a7a2f1dd6e71d6/fields-2.1.0.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "3e27560b9dc413a64dbb2881695134ff", "sha256": "2f9b1e7acb437c354d00394d997e95f12d993bd4a456f5b2eb7e3f50203ab7d5"}, "downloads": -1, "filename": "fields-2.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3e27560b9dc413a64dbb2881695134ff", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13854, "upload_time": "2015-01-19T10:53:41", "upload_time_iso_8601": "2015-01-19T10:53:41.861352Z", "url": "https://files.pythonhosted.org/packages/e8/92/13124f472c4f4d425cbd4ab75d85b4ae8a0db7dc8bf4b3af263bd6efeb1c/fields-2.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d80fba236ae36cf65d66296d6127262", "sha256": "454e7538d9ddf344a1888b5d5a62afbf86bc22d985719f03e66c7e5790e2ec0a"}, "downloads": -1, "filename": "fields-2.1.1.tar.gz", "has_sig": false, "md5_digest": "1d80fba236ae36cf65d66296d6127262", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24457, "upload_time": "2015-01-19T10:53:39", "upload_time_iso_8601": "2015-01-19T10:53:39.611720Z", "url": "https://files.pythonhosted.org/packages/00/43/0f942cb26b012178b024f4a45220ff23a387c0e73d92e7427fa34d2244fb/fields-2.1.1.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "519dd44ef763c0d35db6e8595f5b94d8", "sha256": "71d4ac534d7955cec494b6805b48547b52f0e58a3abe230c39a35a3a2845454e"}, "downloads": -1, "filename": "fields-2.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "519dd44ef763c0d35db6e8595f5b94d8", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 13964, "upload_time": "2015-01-19T18:14:43", "upload_time_iso_8601": "2015-01-19T18:14:43.304165Z", "url": "https://files.pythonhosted.org/packages/a5/65/3a8505db3b6e958776e7b92530554d044404fbf3a300171d991e65a91d50/fields-2.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f618dc1e5b540e1195eb39acd0d435fe", "sha256": "b17ed716821322858ac717e9b803f0904fa026dd4c4cf1b62c6bed704cc78abb"}, "downloads": -1, "filename": "fields-2.2.0.tar.gz", "has_sig": false, "md5_digest": "f618dc1e5b540e1195eb39acd0d435fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24555, "upload_time": "2015-01-19T18:14:40", "upload_time_iso_8601": "2015-01-19T18:14:40.867702Z", "url": "https://files.pythonhosted.org/packages/ce/cf/83128e8154526d9ef30f29895fa5d39e1a3d5ab52ef1d820b74ef717cd79/fields-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "b5883fef5fd3670b2dc2c9a236869959", "sha256": "3a9a231c93f06c3ffa5b53899f3904a494a05dd796c03162bbb122bc40d303f1"}, "downloads": -1, "filename": "fields-2.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b5883fef5fd3670b2dc2c9a236869959", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 14029, "upload_time": "2015-01-20T12:29:33", "upload_time_iso_8601": "2015-01-20T12:29:33.788989Z", "url": "https://files.pythonhosted.org/packages/94/6c/5d0f4cb144a987f86eff4a08b10d000563ad73fd75bc9b9ea57e8f1e7869/fields-2.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b307509c8caa41d45b84d18eeebb5fcf", "sha256": "6b7538e8817bd3ba4ccffb15332c486d102a3eae011661585cfd3962dc0f8a46"}, "downloads": -1, "filename": "fields-2.3.0.tar.gz", "has_sig": false, "md5_digest": "b307509c8caa41d45b84d18eeebb5fcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24662, "upload_time": "2015-01-20T12:29:31", "upload_time_iso_8601": "2015-01-20T12:29:31.491417Z", "url": "https://files.pythonhosted.org/packages/c1/7e/bfe171d9f021d848f171bfc8ab638b00aa8f689a86b2895912b6d699a0bb/fields-2.3.0.tar.gz", "yanked": false}], "2.4.0": [{"comment_text": "", "digests": {"md5": "ad6d5e60d6a8f5dfeeaa80c4f3ea299e", "sha256": "13e35c14f3ba3696ec19d746235895a0d87fe2940c01339bc5240828ad373d59"}, "downloads": -1, "filename": "fields-2.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ad6d5e60d6a8f5dfeeaa80c4f3ea299e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14676, "upload_time": "2015-06-13T16:03:43", "upload_time_iso_8601": "2015-06-13T16:03:43.969240Z", "url": "https://files.pythonhosted.org/packages/8a/43/6aecf6d3c72011ce427e7c836104b061a72f77565f3d81d53fe6868e84e4/fields-2.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca5edb49a3a7fe764178ee3c47fb54d1", "sha256": "84fe74285e1f64c454e97fc03dda9f05785566257b6c5c1e555f3db78b31d55b"}, "downloads": -1, "filename": "fields-2.4.0.tar.gz", "has_sig": false, "md5_digest": "ca5edb49a3a7fe764178ee3c47fb54d1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25671, "upload_time": "2015-06-13T16:03:53", "upload_time_iso_8601": "2015-06-13T16:03:53.103664Z", "url": "https://files.pythonhosted.org/packages/c3/d3/3b10d960bb93f54e528f61dd4dc3c405f8fb2c26072a7ab22daa05cddc24/fields-2.4.0.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "0e41fe7fa42e1e21e477fcbe01363af6", "sha256": "7c61f184dbcaf393596672d5069dbce65524e4351a2d98dcec53da0492acff0f"}, "downloads": -1, "filename": "fields-3.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e41fe7fa42e1e21e477fcbe01363af6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 17308, "upload_time": "2015-10-04T14:38:13", "upload_time_iso_8601": "2015-10-04T14:38:13.042369Z", "url": "https://files.pythonhosted.org/packages/00/74/c2418221b84dae2a8d4763394c70d1a41b4c09abb5edd2bac035ea5eb65d/fields-3.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4614064ea77b55e69734010ee07768de", "sha256": "3096b5a2a98fdead824cb4e4dfef90edcbe9e1fdff8d8d4ecd8b02bf00ac16ca"}, "downloads": -1, "filename": "fields-3.0.0.tar.gz", "has_sig": false, "md5_digest": "4614064ea77b55e69734010ee07768de", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32658, "upload_time": "2015-10-04T14:38:16", "upload_time_iso_8601": "2015-10-04T14:38:16.748047Z", "url": "https://files.pythonhosted.org/packages/1b/0d/c172f49702525651a80f8a74868f6b0b284a7d9e20ab8429139f879713ce/fields-3.0.0.tar.gz", "yanked": false}], "4.0.0": [{"comment_text": "", "digests": {"md5": "4332ee2d566de52216d6dc0b94ab2351", "sha256": "170dcb15036a28349cdf05d3a7abfeb94e9476cc2ab4dc496955421214845c28"}, "downloads": -1, "filename": "fields-4.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4332ee2d566de52216d6dc0b94ab2351", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19033, "upload_time": "2016-01-28T14:54:57", "upload_time_iso_8601": "2016-01-28T14:54:57.952516Z", "url": "https://files.pythonhosted.org/packages/87/ea/e90233749ae0c7044b5d6840da5e9489ca806c96ca0344bc64ec385161ca/fields-4.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "644959608524ed9462de52631a20b59a", "sha256": "53f5c06133c7fa84869de1c813fe199b415ff87ff7e3c223d720a63ea81c0a58"}, "downloads": -1, "filename": "fields-4.0.0.tar.gz", "has_sig": false, "md5_digest": "644959608524ed9462de52631a20b59a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35182, "upload_time": "2016-01-28T14:55:12", "upload_time_iso_8601": "2016-01-28T14:55:12.488185Z", "url": "https://files.pythonhosted.org/packages/8c/b5/c985a3e8f7846b4eb4f0971416b8e89c0b3546b0caaa928180a469798855/fields-4.0.0.tar.gz", "yanked": false}], "5.0.0": [{"comment_text": "", "digests": {"md5": "358aedc590a049cba99a38368c5208ef", "sha256": "67bf7da6b848fc47bc41061bf3f847c5e040333a9d532f7c89cb4e9b5b2acab0"}, "downloads": -1, "filename": "fields-5.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "358aedc590a049cba99a38368c5208ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19816, "upload_time": "2016-04-13T20:52:11", "upload_time_iso_8601": "2016-04-13T20:52:11.515824Z", "url": "https://files.pythonhosted.org/packages/9b/e8/47bd9a613a2a1ee0bd43498549cf1c828f9a9c8d6e82ea4eb46d3fcf5629/fields-5.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b3a60ddaad146f698979cf4da2639d4", "sha256": "31d4aa03d8d44e35df13c431de35136997f047a924a597d84f7bc209e1be5727"}, "downloads": -1, "filename": "fields-5.0.0.tar.gz", "has_sig": false, "md5_digest": "4b3a60ddaad146f698979cf4da2639d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36232, "upload_time": "2016-04-13T20:53:08", "upload_time_iso_8601": "2016-04-13T20:53:08.282722Z", "url": "https://files.pythonhosted.org/packages/18/68/b922b5b0b2c1d99171c0ed9ad10296b55ee644eb1fa2fd5e45cafe56ae33/fields-5.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "358aedc590a049cba99a38368c5208ef", "sha256": "67bf7da6b848fc47bc41061bf3f847c5e040333a9d532f7c89cb4e9b5b2acab0"}, "downloads": -1, "filename": "fields-5.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "358aedc590a049cba99a38368c5208ef", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19816, "upload_time": "2016-04-13T20:52:11", "upload_time_iso_8601": "2016-04-13T20:52:11.515824Z", "url": "https://files.pythonhosted.org/packages/9b/e8/47bd9a613a2a1ee0bd43498549cf1c828f9a9c8d6e82ea4eb46d3fcf5629/fields-5.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b3a60ddaad146f698979cf4da2639d4", "sha256": "31d4aa03d8d44e35df13c431de35136997f047a924a597d84f7bc209e1be5727"}, "downloads": -1, "filename": "fields-5.0.0.tar.gz", "has_sig": false, "md5_digest": "4b3a60ddaad146f698979cf4da2639d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36232, "upload_time": "2016-04-13T20:53:08", "upload_time_iso_8601": "2016-04-13T20:53:08.282722Z", "url": "https://files.pythonhosted.org/packages/18/68/b922b5b0b2c1d99171c0ed9ad10296b55ee644eb1fa2fd5e45cafe56ae33/fields-5.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:40 2020"}