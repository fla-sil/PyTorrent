{"info": {"author": "Andre Kahles", "author_email": "andre.kahles@inf.ethz.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "# ImmunoPepper\nImmunoPepper is a software tool that takes a splicing graph (possibly derived from an RNA-Seq\nsamples) as input and generates the set of all theoretically peptide sequences (or kmers) through\ndirect translation of all walks along the graph. This peptide set can be personalized with germline\nand somatic variants and takes all exon-exon junctions present in the splicing graph (even ones not\npart of the reference annotation but present in the given RNA-Seq sample) into account. The\ncomprehensive set of peptides can be used subsequently for further downstream analyses such as\ndomain annotation or computational immunology.\n\n## Get Started\n\n### Installation\n\nIt is recommended to setup a separate virtual or conda environment.\nThe basic ImmunoPepper package can be installed via `pip`:\n\n```\npip install immunopepper\n```\n\nAlternatively, ImmunoPepper can also be installed from source using:\n```\npip install -r requirements.txt -r requirements_dev.txt\nmake install\n```\n\nAfter installation, please consult the help screen for further usage options:\n```\nimmunopepper -h\n```\n### Prerequisites\nImmunoPepper takes a splicing graph as input. This splicing graph has to be generated using the\nSplAdder pipeline. Further information about SplAdder is available on its [GitHub\npage](https://github.com/ratschlab/spladder) or the [Online\ndocumentation](https://spladder.readthedocs.io/en/latest/).\n\n## Basic workflow\nThe software has four basic working modes:\n\n1. `build`: Core part of ImmunoPepper. Traverses the input splice graph and generates all possible\npeptides/kmers.\n2. `make_bg`: Integrates multiple kmer files (produced via `build`) and generates one background kmer file.\n3. `diff`: Takes as input the foreground kmer file and a background kmer file. The output is\ncontrasting foreground and background, indicating all foreground kmers not present in the\nbackground.\n4. `filter`: Apply different filter mechanisms to a given kmer file.\n\n### Mode `build`\nThe following parameters are *mandatory*:\n- `--samples`: input sample names; can specify more than one sample. (Example: 'sample1 sample2')\n- `--output-dir`: output directory\n- `--ann-path`:annotation file, accepted file formats: *.gtf*, *.gff* and *.gff3*\n- `--splice-path`: path of the input SplAdder splice graph\n- `--ref-path`: reference genome file in FASTA format\n\nThe following parameters are *optional*:\n- `--mutation-mode`: mutation mode; choose from {*ref*, *germline*, *somatic* and *somatic_germline*}, default mode *ref*.\n- `--kmer`: length of the kmers for kmer ouput. Default value is `0`, which will output full peptides instead of kmers. A recommended kmer length is 9.\n- `--disable-concat`: Turns off the generation of kmers from combinations of more than 2 exons (kmers generated from combinations of short exons might be missed)\n- `--germline`: germline mutation file path. Mandatory argument if the mutation mode is `germline` or `somatic_and_germline`.\n- `--somatic`: somatic mutation file path. Mandatory argument if the mutation mode is `somatic` or `somatic_and_germline`.\n- `--use-mut-pickle`: Summarize mutation information in a pickle file and re-use if existing (saves the time processing the original mutation files).\n- `--count-path`: path to splice graph count file\n- `--compressed`: compress the output files using gzip\n\nExample command line (replace `ref` with `germline` to consider mutation information)\n```\nimmunopepper build \\\n--output-dir tests/test1/current_output_pos \\\n--ann-path tests/test1/data/test1pos.gtf \\\n--ref-path tests/test1/data/test1pos.fa \\\n--splice-path tests/test1/data/posgraph/spladder/genes_graph_conf3.merge_graphs.pickle \\\n--somatic tests/test1/data/test1pos.maf \\\n--germline tests/test1/data/test1pos.vcf \\\n--samples test1pos test1neg \\\n--mutation-mode ref \\\n--kmer 4 \\\n--disable-concat \\\n--count-path  tests/test1/data/posgraph/spladder/genes_graph_conf3.merge_graphs.count.hdf5\n```\n\n### Mode `make_bg`\nThe following parameters are *mandatory*:\n- `--kmer-files`: The list of kmer files output by build mode, e.g., 'ref_back_kmer.txt somatic_back_kmer.txt'.\n- `--output-file-path`: Output integrated background kmer file path.\n- `--output-dir`: Directory to store the log file.\n\nThe following parameters are *optional*:\n- `--verbose`: Specify the level of output. 0 means zero debug information, 2 means the most detailed information.\n- `--compressed`: Compress the output files with gzip.\n\nExample command line:\n```\nimmunopepper make_bg \\\n--kmer-files-list tests/test1/current_output_pos/test1pos/ref_back_kmer.txt tests/test1/current_output_pos/test1pos/germline_back_kmer.txt \\\n--output-dir tests/test1/current_output_pos/ \\\n--output-file_path tests/test1/current_output_pos/test1pos/uniq_back_kmer.txt \\\n--verbose 2\n```\n\n### Mode `diff`\nThe following parameters are *mandatory*:\n- `--junction-kmer-file`: foreground junction file path generated by `build` mode, e.g., `ref_junction_kmer.txt`\n- `--bg-file-path`: background kmer file path. Can be the output of `make_bg` mode or external file. One kmer per line.\n- `--output-file-path`: output tsv file path.\n- `--output-dir`: directory to store the log file.\n\nThe following parameters are *optional*:\n- `--verbose`: Specify the verbosity level of output. 0 means zero debug information, 2 means the most detailed information.\n- `--compressed`: compress the output files with gzip.\n\nExample command line\n```\nimmunopepper  diff \\\n--junction-kmer-file tests/test1/current_output_pos/test1pos/ref_junction_kmer.txt \\\n--bg-file-path tests/test1/current_output_pos/test1pos/uniq_back_kmer.txt \\\n--verbose 1 \\\n--output-file-path tests/test1/current_output_pos/test1pos/kmer_result.tsv \\\n--output-dir tests/test1/current_output_pos \\\n--remove-bg\n```\n\n### Mode `filter`\nThe following parameters are *mandatory*:\n- `--junction-kmer-tsv-file`: The original kmer tsv files. Generated by `build` mode\nor by `diff` mode. It should contain field `cross-junction`, `seg-expr` and `junc_expr`.\n\nThe following parameters are *optional*:\n- `--cross-junction`: Only output the cross-junction kmers.\n- `--seg-expr`: Only output kmers that have segment expression greater than threshold.\n- `--seg-expr-thresh`: Segment expression threshold. Default 0.\n- `--junc-expr`: Only output kmers that have junction expression greater than threshold.\n- `--junc-expr-thresh`: Junction expression threshold. Default 0.\n- `--output-file-path`: Mandatoray argument. Specify the output tsv file path.\n- `--output-dir`: Mandatoray argument. Specify the directory to store the log file.\n- `--verbose`: Specify the level of output. 0 means zero debug information, 2 means the most detailed information.\n- `--compressed`: Compress the output files with gzip.\n\nExample command line\n```\nimmunopepper filter \\\n--junction-kmer-tsv_path tests/test1/current_output_pos/test1pos/kmer_result.tsv \\\n--output-dir tests/test1/current_output_pos/ \\\n--output-file-path tests/test1/current_output_pos/test1pos/kmer_result_filtered.tsv \\\n--cross-junction \\\n--junc-expr \\\n--verbose 2\n```\n## post-processing guidlines\nFor further filtering, the user can use the predicted kmers as input for MHC-binding prediction or\nuse MS databases for further confirmation.\n\n### MHC-Binding\nOne option for MHC binding prediction is [NetMHC](http://www.cbs.dtu.dk/services/NetMHC/). Using the\npredicted kmers as input, `NetMHC` predicts a peptide-MHC class 1 binding score for each sequence\nusing a neural network.\n\n### Mass spectrometry\nMass spectrometry data can provide further evidence for the presence of a predicted peptide. There\nexist several tools for searching a peptide sequence against a MS database, for instance\n[OpenMS](https://www.openms.de).\n\n## Output files\nThere are 5 files for the `build` mode. `mut_mode` refers to `ref`, `somatic`,  `germline` and `somatic_and_germline`.\n- **\\[mut_mode\\]_back_peptides.fa**: Peptides translated from annotation transcripts. Two lines for one output. The first\nline is the transcript ID and the second line is the result peptide.\n- **\\[mut_mode\\]_back_kmer.txt**: kmers generated from **\\[mut_mode\\]_back_peptides.fa**. There are four columns: \\[ *kmer*, *gene_name*, *seg_expr*, *is_crossjunction*\\]. The first column is\nthe result kmer, the second column is the transcript ID, the third column is the average segment expression and the final column is the\nflag indicating if the kmer is junction kmer. The final column is False for *all* rows in this file.\n- **\\[mut_mode\\]_peptides.fa**: Peptides translated from traversing splicegraph. Two lines for one output. The first\nline is the output ID and the second line is the result peptide.\n- **\\[mut_mode\\]_junction_kmer**.txt: kmers generated from **\\[mut_mode\\]_peptides.fa**. In addition to the same four columns in **\\[mut_mode\\]_back_kmer.txt**, there is one more\ncolumn in this file. *junction_expr*, refers to the junction counts for those kmers that span over\nexon junction. For those with *junction_expr* > 0, the flag `is_crossjunction` is True.\n- **\\[mut_mode\\]_metadata.tsv.gz**: Contain details for every junction pairs.\n\nDetail explanation for columns in **\\[mut_mode\\]_metadata.tsv.gz**\n- **output_id**: In the format of \\[gene_nama\\]:\\[first vertex\\]_\\[second vertex\\]:\\[somatic variant combination id\\]:\\[read frame\\]. Like `GENE1:0_2:0:1`.\n`GENE1` is the gene name, `0_2` means this junction consists of vertex 0 and vertex 2. `0` means there is no\nsomatic mutation or it is the first case of all somatic mutation combination cases. `2` means the read frame is 2.\n- **read_frame**: int (0,1,2). The number of base left to the next junction pair.\n- **gene_name**: str. The name of Gene.\n- **gene_chr**: str. The Chromosome id where the gene is located.\n- **gene_strand**: str ('+', '_'). The strand of gene.\n- **mutation_mode**: str ('ref', 'somatic', 'germline', 'somatic_and_germline'). Mutation mode\n- **peptide_annotated**: Boolean. Indicate if the junction peptide also appears in the background peptide.\n- **junction_peptided**: Boolean. Indicate if the junction also appear in the input annotation file.\n- **has_stop_codon**: Boolean. Indicate if there is stop codon in the junction pair.\n- **is_in_junction_list**: Boolean. Indicate if the junction pair appear in the given junction whitelist.\n- **is_isolated**: Boolean. Indicate if the output peptide is actually translated from a single exon instead of two.\n- **variant_comb**: shows the somatic variantion combination used in this line of output. seperate by ';'\n    eg. 5;25 means the somatic mutation of position 5 and 25 take effect in this output.\n- **variant_seg-expr**: shows the corresponding expression of segments where the corresponding somatic mutation is in.\n    eg. 257.0;123.2 means the segment where the somatic mutation in position 5 is in has counts 257.0\n- **modified_exons_coor**: Shows exon coordination. Usually we have 4 number start_v1;stop_v1;start_v2;stop_v2. They\n    have already absorb reading frame so you can use the coord directly to generate the same output peptide.\n- **original_exons_coord**: Shows the original exon coordination.\n- **vertex_idx**: shows the vertex id of the given junction. eg 5,6 means this junction pair consists of the fifth and\n    sixth vertex.\n- **junction_expr**: float. The expression of the junction.\n- **segment_expr**: float. The weighted sum of segment expression. We split the junction into segments and compute the segment\n    expression with the length-weighted-sum expression.\n\nThe `.meta` file is compressed by default in all time. The user can add `--compressed` option\nin the input argument to have other files compressed. It is recommended to output in compressed format because\nit can save a lot of storage.\n\nThe output file for `make_bg` mode is a text file. Each line is a unique kmer.\n\nThe output file for `diff` mode is a text file. There is a header line like **\\[mut_mode\\]_junction_kmer** but\nwith one more column `is_neo_flag` to indicate if the kmer also exist in the background kmer file. We can also\nremove those kmers that exist in the background files with the option `--remove-bg`.\n\nThe output file for `filter` mode is a text file also with header line.\n\n## Example use case on experimetal data\nUsing real DNA-sequencing data from mouse, we will show how to apply ImmunoPepper to generate all\ncandidate kmers. In this example, we consider two samples: `ENCSR000BZG` and `ERR2130621`. We choose\n`ENCSR000BZG` as the background sample and `ERR2130621` as the foreground sample. They use the same\nsplicegraph but have different expression values and individual (personalized) mutations. Our goal\nis to generate all kmers unique to `ERR2130621`.\n\n\n- Step 1: Use the `build` mode to generate kmers of the two samples in all four mutation modes:\n```\n# reference (ref) mode\nimmunopepper build --mutation-mode ref --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5\n# germline mode\nimmunopepper build --mutation-mode germline --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n# somatic mode\nimmunopepper build --mutation_mode somatic --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n# germline and somatic mode\nimmunopepper build --mutation_mode somatic_and_germline --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n```\n\n- Step 2: Create background kmer set from the output of sample `ENCSR000BZG`.\nSince there exist no mutations in sample `ENCSR000BZG`, we only consider its output in reference. In addition,\nwe only consider kmers that have junction expression larger than 0. We can achieve this using the `filter` mode and\nget the file `ref_mode_background_kmer.tsv`. We then use the `make_bg` mode to create the background kmer file. Since\nthe input is just one file, `make_bg` simply takes the first column and outputs all unique kmers.\n```\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ENCSR000BZG/ref_mode_background_kmer.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ENCSR000BZG/ref_junction_kmer.txt --junc_expr\nimmunopepper make_bg --kmer_files_list ImmunoPepper_usecase_out/ENCSR000BZG/ref_mode_background_kmer.tsv --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/background_kmer.txt\n```\n\n- Step 3: Remove the background kmers\nAfter generating the background kmers in Step 2, we can now subtract those kmers from the kmer sets of sample `ERR2130621`. We\ncan use `diff` for this operation:\n```\n# contrast ref kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg.tsv --remove-bg\n# contrast germline kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg.tsv --remove-bg\n# contrast somatic kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg.tsv --remove-bg\n# contrast somatic/germline kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg.tsv --remove-bg\n```\n\n- Step 4: Filter\nAfter removing the background kmers in Step 3, we can add more filters to further reduce the number of candidate kmers.\nFor example, we only consider the kmers that have junction expression larger than 0 as well as a\nsegment expression value larger than 2. `filter` mode provides filters based on segment expression\nand junction expression, based on a user-provided threshold.\n```\n# filter ref kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter germline kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter somatic kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter germline/somatic kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n```\n\n- Step 5: Aggregate\nWe get the unique kmers of sample `ERR2130621` in four modes. Now we can aggregate all those kmers.\n```\ntail -n +2 ImmunoPepper_usecase_out/ERR2130621/*_junction_kmer_remove-bg_filter.tsv | cat | grep -v \"==>\" | cut -f1 | sort |uniq | grep . > neo_kmer.txt\n```\n## Pratical Tips\n- ImmunoPepper requires the sample name are **exactly** the same in the `splice count file` and `mutation file` and the\ngiven option `--samples` should be those samples. Please make necessary changes to the input files so that ImmunoPepper can work as expected.\n\n- `make_bg`, `diff` and `filter` mode accept the output files of ImmunoPepper. However, the user\ncan also add other external input files.\n- `make_bg` assumes the input file has\na header line, separated with *\\t* and kmers are in the first column.\n- `diff` assumes\nthe foreground kmer file has a header line and that the background kmer file has the\nformat as the output file of `make_bg`.\n- `filter` assumes the input file has a header\nline and with three columns `seg-expr`, `junction_expr` and `is_crossjunction`. It's acceptable if some columns\nare missing but the user should not use corresponding filter rules. Otherwise error will happen.\n\n## License\nPlease see the LICENSE file for more information about license and copyright.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ratschlab/immunopepper", "keywords": "immunopepper", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "immunopepper", "package_url": "https://pypi.org/project/immunopepper/", "platform": "", "project_url": "https://pypi.org/project/immunopepper/", "project_urls": {"Homepage": "https://github.com/ratschlab/immunopepper"}, "release_url": "https://pypi.org/project/immunopepper/1.1.0/", "requires_dist": ["h5py (==2.8.0)", "numpy (>=1.13)", "psutil (==5.4.6)", "scipy (==1.1.0)", "biopython", "spladder (==2.2.2)"], "requires_python": "", "summary": "Software to translate splicing graphs into peptides", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ImmunoPepper</h1>\n<p>ImmunoPepper is a software tool that takes a splicing graph (possibly derived from an RNA-Seq\nsamples) as input and generates the set of all theoretically peptide sequences (or kmers) through\ndirect translation of all walks along the graph. This peptide set can be personalized with germline\nand somatic variants and takes all exon-exon junctions present in the splicing graph (even ones not\npart of the reference annotation but present in the given RNA-Seq sample) into account. The\ncomprehensive set of peptides can be used subsequently for further downstream analyses such as\ndomain annotation or computational immunology.</p>\n<h2>Get Started</h2>\n<h3>Installation</h3>\n<p>It is recommended to setup a separate virtual or conda environment.\nThe basic ImmunoPepper package can be installed via <code>pip</code>:</p>\n<pre><code>pip install immunopepper\n</code></pre>\n<p>Alternatively, ImmunoPepper can also be installed from source using:</p>\n<pre><code>pip install -r requirements.txt -r requirements_dev.txt\nmake install\n</code></pre>\n<p>After installation, please consult the help screen for further usage options:</p>\n<pre><code>immunopepper -h\n</code></pre>\n<h3>Prerequisites</h3>\n<p>ImmunoPepper takes a splicing graph as input. This splicing graph has to be generated using the\nSplAdder pipeline. Further information about SplAdder is available on its <a href=\"https://github.com/ratschlab/spladder\" rel=\"nofollow\">GitHub\npage</a> or the <a href=\"https://spladder.readthedocs.io/en/latest/\" rel=\"nofollow\">Online\ndocumentation</a>.</p>\n<h2>Basic workflow</h2>\n<p>The software has four basic working modes:</p>\n<ol>\n<li><code>build</code>: Core part of ImmunoPepper. Traverses the input splice graph and generates all possible\npeptides/kmers.</li>\n<li><code>make_bg</code>: Integrates multiple kmer files (produced via <code>build</code>) and generates one background kmer file.</li>\n<li><code>diff</code>: Takes as input the foreground kmer file and a background kmer file. The output is\ncontrasting foreground and background, indicating all foreground kmers not present in the\nbackground.</li>\n<li><code>filter</code>: Apply different filter mechanisms to a given kmer file.</li>\n</ol>\n<h3>Mode <code>build</code></h3>\n<p>The following parameters are <em>mandatory</em>:</p>\n<ul>\n<li><code>--samples</code>: input sample names; can specify more than one sample. (Example: 'sample1 sample2')</li>\n<li><code>--output-dir</code>: output directory</li>\n<li><code>--ann-path</code>:annotation file, accepted file formats: <em>.gtf</em>, <em>.gff</em> and <em>.gff3</em></li>\n<li><code>--splice-path</code>: path of the input SplAdder splice graph</li>\n<li><code>--ref-path</code>: reference genome file in FASTA format</li>\n</ul>\n<p>The following parameters are <em>optional</em>:</p>\n<ul>\n<li><code>--mutation-mode</code>: mutation mode; choose from {<em>ref</em>, <em>germline</em>, <em>somatic</em> and <em>somatic_germline</em>}, default mode <em>ref</em>.</li>\n<li><code>--kmer</code>: length of the kmers for kmer ouput. Default value is <code>0</code>, which will output full peptides instead of kmers. A recommended kmer length is 9.</li>\n<li><code>--disable-concat</code>: Turns off the generation of kmers from combinations of more than 2 exons (kmers generated from combinations of short exons might be missed)</li>\n<li><code>--germline</code>: germline mutation file path. Mandatory argument if the mutation mode is <code>germline</code> or <code>somatic_and_germline</code>.</li>\n<li><code>--somatic</code>: somatic mutation file path. Mandatory argument if the mutation mode is <code>somatic</code> or <code>somatic_and_germline</code>.</li>\n<li><code>--use-mut-pickle</code>: Summarize mutation information in a pickle file and re-use if existing (saves the time processing the original mutation files).</li>\n<li><code>--count-path</code>: path to splice graph count file</li>\n<li><code>--compressed</code>: compress the output files using gzip</li>\n</ul>\n<p>Example command line (replace <code>ref</code> with <code>germline</code> to consider mutation information)</p>\n<pre><code>immunopepper build \\\n--output-dir tests/test1/current_output_pos \\\n--ann-path tests/test1/data/test1pos.gtf \\\n--ref-path tests/test1/data/test1pos.fa \\\n--splice-path tests/test1/data/posgraph/spladder/genes_graph_conf3.merge_graphs.pickle \\\n--somatic tests/test1/data/test1pos.maf \\\n--germline tests/test1/data/test1pos.vcf \\\n--samples test1pos test1neg \\\n--mutation-mode ref \\\n--kmer 4 \\\n--disable-concat \\\n--count-path  tests/test1/data/posgraph/spladder/genes_graph_conf3.merge_graphs.count.hdf5\n</code></pre>\n<h3>Mode <code>make_bg</code></h3>\n<p>The following parameters are <em>mandatory</em>:</p>\n<ul>\n<li><code>--kmer-files</code>: The list of kmer files output by build mode, e.g., 'ref_back_kmer.txt somatic_back_kmer.txt'.</li>\n<li><code>--output-file-path</code>: Output integrated background kmer file path.</li>\n<li><code>--output-dir</code>: Directory to store the log file.</li>\n</ul>\n<p>The following parameters are <em>optional</em>:</p>\n<ul>\n<li><code>--verbose</code>: Specify the level of output. 0 means zero debug information, 2 means the most detailed information.</li>\n<li><code>--compressed</code>: Compress the output files with gzip.</li>\n</ul>\n<p>Example command line:</p>\n<pre><code>immunopepper make_bg \\\n--kmer-files-list tests/test1/current_output_pos/test1pos/ref_back_kmer.txt tests/test1/current_output_pos/test1pos/germline_back_kmer.txt \\\n--output-dir tests/test1/current_output_pos/ \\\n--output-file_path tests/test1/current_output_pos/test1pos/uniq_back_kmer.txt \\\n--verbose 2\n</code></pre>\n<h3>Mode <code>diff</code></h3>\n<p>The following parameters are <em>mandatory</em>:</p>\n<ul>\n<li><code>--junction-kmer-file</code>: foreground junction file path generated by <code>build</code> mode, e.g., <code>ref_junction_kmer.txt</code></li>\n<li><code>--bg-file-path</code>: background kmer file path. Can be the output of <code>make_bg</code> mode or external file. One kmer per line.</li>\n<li><code>--output-file-path</code>: output tsv file path.</li>\n<li><code>--output-dir</code>: directory to store the log file.</li>\n</ul>\n<p>The following parameters are <em>optional</em>:</p>\n<ul>\n<li><code>--verbose</code>: Specify the verbosity level of output. 0 means zero debug information, 2 means the most detailed information.</li>\n<li><code>--compressed</code>: compress the output files with gzip.</li>\n</ul>\n<p>Example command line</p>\n<pre><code>immunopepper  diff \\\n--junction-kmer-file tests/test1/current_output_pos/test1pos/ref_junction_kmer.txt \\\n--bg-file-path tests/test1/current_output_pos/test1pos/uniq_back_kmer.txt \\\n--verbose 1 \\\n--output-file-path tests/test1/current_output_pos/test1pos/kmer_result.tsv \\\n--output-dir tests/test1/current_output_pos \\\n--remove-bg\n</code></pre>\n<h3>Mode <code>filter</code></h3>\n<p>The following parameters are <em>mandatory</em>:</p>\n<ul>\n<li><code>--junction-kmer-tsv-file</code>: The original kmer tsv files. Generated by <code>build</code> mode\nor by <code>diff</code> mode. It should contain field <code>cross-junction</code>, <code>seg-expr</code> and <code>junc_expr</code>.</li>\n</ul>\n<p>The following parameters are <em>optional</em>:</p>\n<ul>\n<li><code>--cross-junction</code>: Only output the cross-junction kmers.</li>\n<li><code>--seg-expr</code>: Only output kmers that have segment expression greater than threshold.</li>\n<li><code>--seg-expr-thresh</code>: Segment expression threshold. Default 0.</li>\n<li><code>--junc-expr</code>: Only output kmers that have junction expression greater than threshold.</li>\n<li><code>--junc-expr-thresh</code>: Junction expression threshold. Default 0.</li>\n<li><code>--output-file-path</code>: Mandatoray argument. Specify the output tsv file path.</li>\n<li><code>--output-dir</code>: Mandatoray argument. Specify the directory to store the log file.</li>\n<li><code>--verbose</code>: Specify the level of output. 0 means zero debug information, 2 means the most detailed information.</li>\n<li><code>--compressed</code>: Compress the output files with gzip.</li>\n</ul>\n<p>Example command line</p>\n<pre><code>immunopepper filter \\\n--junction-kmer-tsv_path tests/test1/current_output_pos/test1pos/kmer_result.tsv \\\n--output-dir tests/test1/current_output_pos/ \\\n--output-file-path tests/test1/current_output_pos/test1pos/kmer_result_filtered.tsv \\\n--cross-junction \\\n--junc-expr \\\n--verbose 2\n</code></pre>\n<h2>post-processing guidlines</h2>\n<p>For further filtering, the user can use the predicted kmers as input for MHC-binding prediction or\nuse MS databases for further confirmation.</p>\n<h3>MHC-Binding</h3>\n<p>One option for MHC binding prediction is <a href=\"http://www.cbs.dtu.dk/services/NetMHC/\" rel=\"nofollow\">NetMHC</a>. Using the\npredicted kmers as input, <code>NetMHC</code> predicts a peptide-MHC class 1 binding score for each sequence\nusing a neural network.</p>\n<h3>Mass spectrometry</h3>\n<p>Mass spectrometry data can provide further evidence for the presence of a predicted peptide. There\nexist several tools for searching a peptide sequence against a MS database, for instance\n<a href=\"https://www.openms.de\" rel=\"nofollow\">OpenMS</a>.</p>\n<h2>Output files</h2>\n<p>There are 5 files for the <code>build</code> mode. <code>mut_mode</code> refers to <code>ref</code>, <code>somatic</code>,  <code>germline</code> and <code>somatic_and_germline</code>.</p>\n<ul>\n<li><strong>[mut_mode]_back_peptides.fa</strong>: Peptides translated from annotation transcripts. Two lines for one output. The first\nline is the transcript ID and the second line is the result peptide.</li>\n<li><strong>[mut_mode]_back_kmer.txt</strong>: kmers generated from <strong>[mut_mode]_back_peptides.fa</strong>. There are four columns: [ <em>kmer</em>, <em>gene_name</em>, <em>seg_expr</em>, <em>is_crossjunction</em>]. The first column is\nthe result kmer, the second column is the transcript ID, the third column is the average segment expression and the final column is the\nflag indicating if the kmer is junction kmer. The final column is False for <em>all</em> rows in this file.</li>\n<li><strong>[mut_mode]_peptides.fa</strong>: Peptides translated from traversing splicegraph. Two lines for one output. The first\nline is the output ID and the second line is the result peptide.</li>\n<li><strong>[mut_mode]_junction_kmer</strong>.txt: kmers generated from <strong>[mut_mode]_peptides.fa</strong>. In addition to the same four columns in <strong>[mut_mode]_back_kmer.txt</strong>, there is one more\ncolumn in this file. <em>junction_expr</em>, refers to the junction counts for those kmers that span over\nexon junction. For those with <em>junction_expr</em> &gt; 0, the flag <code>is_crossjunction</code> is True.</li>\n<li><strong>[mut_mode]_metadata.tsv.gz</strong>: Contain details for every junction pairs.</li>\n</ul>\n<p>Detail explanation for columns in <strong>[mut_mode]_metadata.tsv.gz</strong></p>\n<ul>\n<li><strong>output_id</strong>: In the format of [gene_nama]:[first vertex]_[second vertex]:[somatic variant combination id]:[read frame]. Like <code>GENE1:0_2:0:1</code>.\n<code>GENE1</code> is the gene name, <code>0_2</code> means this junction consists of vertex 0 and vertex 2. <code>0</code> means there is no\nsomatic mutation or it is the first case of all somatic mutation combination cases. <code>2</code> means the read frame is 2.</li>\n<li><strong>read_frame</strong>: int (0,1,2). The number of base left to the next junction pair.</li>\n<li><strong>gene_name</strong>: str. The name of Gene.</li>\n<li><strong>gene_chr</strong>: str. The Chromosome id where the gene is located.</li>\n<li><strong>gene_strand</strong>: str ('+', '_'). The strand of gene.</li>\n<li><strong>mutation_mode</strong>: str ('ref', 'somatic', 'germline', 'somatic_and_germline'). Mutation mode</li>\n<li><strong>peptide_annotated</strong>: Boolean. Indicate if the junction peptide also appears in the background peptide.</li>\n<li><strong>junction_peptided</strong>: Boolean. Indicate if the junction also appear in the input annotation file.</li>\n<li><strong>has_stop_codon</strong>: Boolean. Indicate if there is stop codon in the junction pair.</li>\n<li><strong>is_in_junction_list</strong>: Boolean. Indicate if the junction pair appear in the given junction whitelist.</li>\n<li><strong>is_isolated</strong>: Boolean. Indicate if the output peptide is actually translated from a single exon instead of two.</li>\n<li><strong>variant_comb</strong>: shows the somatic variantion combination used in this line of output. seperate by ';'\neg. 5;25 means the somatic mutation of position 5 and 25 take effect in this output.</li>\n<li><strong>variant_seg-expr</strong>: shows the corresponding expression of segments where the corresponding somatic mutation is in.\neg. 257.0;123.2 means the segment where the somatic mutation in position 5 is in has counts 257.0</li>\n<li><strong>modified_exons_coor</strong>: Shows exon coordination. Usually we have 4 number start_v1;stop_v1;start_v2;stop_v2. They\nhave already absorb reading frame so you can use the coord directly to generate the same output peptide.</li>\n<li><strong>original_exons_coord</strong>: Shows the original exon coordination.</li>\n<li><strong>vertex_idx</strong>: shows the vertex id of the given junction. eg 5,6 means this junction pair consists of the fifth and\nsixth vertex.</li>\n<li><strong>junction_expr</strong>: float. The expression of the junction.</li>\n<li><strong>segment_expr</strong>: float. The weighted sum of segment expression. We split the junction into segments and compute the segment\nexpression with the length-weighted-sum expression.</li>\n</ul>\n<p>The <code>.meta</code> file is compressed by default in all time. The user can add <code>--compressed</code> option\nin the input argument to have other files compressed. It is recommended to output in compressed format because\nit can save a lot of storage.</p>\n<p>The output file for <code>make_bg</code> mode is a text file. Each line is a unique kmer.</p>\n<p>The output file for <code>diff</code> mode is a text file. There is a header line like <strong>[mut_mode]_junction_kmer</strong> but\nwith one more column <code>is_neo_flag</code> to indicate if the kmer also exist in the background kmer file. We can also\nremove those kmers that exist in the background files with the option <code>--remove-bg</code>.</p>\n<p>The output file for <code>filter</code> mode is a text file also with header line.</p>\n<h2>Example use case on experimetal data</h2>\n<p>Using real DNA-sequencing data from mouse, we will show how to apply ImmunoPepper to generate all\ncandidate kmers. In this example, we consider two samples: <code>ENCSR000BZG</code> and <code>ERR2130621</code>. We choose\n<code>ENCSR000BZG</code> as the background sample and <code>ERR2130621</code> as the foreground sample. They use the same\nsplicegraph but have different expression values and individual (personalized) mutations. Our goal\nis to generate all kmers unique to <code>ERR2130621</code>.</p>\n<ul>\n<li>Step 1: Use the <code>build</code> mode to generate kmers of the two samples in all four mutation modes:</li>\n</ul>\n<pre><code># reference (ref) mode\nimmunopepper build --mutation-mode ref --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5\n# germline mode\nimmunopepper build --mutation-mode germline --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n# somatic mode\nimmunopepper build --mutation_mode somatic --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n# germline and somatic mode\nimmunopepper build --mutation_mode somatic_and_germline --samples ENCSR000BZG ERR2130621 --output-dir ImmunoPepper_usecase_out --splice-path ImmunoPepper_usecase.pickle --ann-path ImmunoPepper_usecase.gtf --ref-path genome1.fa --kmer 9 --count-path ImmunoPepper_usecase.count.hdf5 --germline ImmunoPepper_usecase.vcf --somatic ImmunoPepper_usecase.maf\n</code></pre>\n<ul>\n<li>Step 2: Create background kmer set from the output of sample <code>ENCSR000BZG</code>.\nSince there exist no mutations in sample <code>ENCSR000BZG</code>, we only consider its output in reference. In addition,\nwe only consider kmers that have junction expression larger than 0. We can achieve this using the <code>filter</code> mode and\nget the file <code>ref_mode_background_kmer.tsv</code>. We then use the <code>make_bg</code> mode to create the background kmer file. Since\nthe input is just one file, <code>make_bg</code> simply takes the first column and outputs all unique kmers.</li>\n</ul>\n<pre><code>immunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ENCSR000BZG/ref_mode_background_kmer.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ENCSR000BZG/ref_junction_kmer.txt --junc_expr\nimmunopepper make_bg --kmer_files_list ImmunoPepper_usecase_out/ENCSR000BZG/ref_mode_background_kmer.tsv --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/background_kmer.txt\n</code></pre>\n<ul>\n<li>Step 3: Remove the background kmers\nAfter generating the background kmers in Step 2, we can now subtract those kmers from the kmer sets of sample <code>ERR2130621</code>. We\ncan use <code>diff</code> for this operation:</li>\n</ul>\n<pre><code># contrast ref kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg.tsv --remove-bg\n# contrast germline kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg.tsv --remove-bg\n# contrast somatic kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg.tsv --remove-bg\n# contrast somatic/germline kmers against background\nimmunopepper diff --junction-kmer-file  ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer.txt --bg-file-path ImmunoPepper_usecase_out/background_kmer.txt --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg.tsv --remove-bg\n</code></pre>\n<ul>\n<li>Step 4: Filter\nAfter removing the background kmers in Step 3, we can add more filters to further reduce the number of candidate kmers.\nFor example, we only consider the kmers that have junction expression larger than 0 as well as a\nsegment expression value larger than 2. <code>filter</code> mode provides filters based on segment expression\nand junction expression, based on a user-provided threshold.</li>\n</ul>\n<pre><code># filter ref kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/ref_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter germline kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/germline_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter somatic kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/somatic_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n# filter germline/somatic kmers\nimmunopepper filter --output-dir ImmunoPepper_usecase_out --output-file-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg_filter.tsv --junction-kmer-tsv-path ImmunoPepper_usecase_out/ERR2130621/somatic_and_germline_junction_kmer_remove-bg.tsv --cross-junction --seg-expr --seg-expr-thresh 2\n</code></pre>\n<ul>\n<li>Step 5: Aggregate\nWe get the unique kmers of sample <code>ERR2130621</code> in four modes. Now we can aggregate all those kmers.</li>\n</ul>\n<pre><code>tail -n +2 ImmunoPepper_usecase_out/ERR2130621/*_junction_kmer_remove-bg_filter.tsv | cat | grep -v \"==&gt;\" | cut -f1 | sort |uniq | grep . &gt; neo_kmer.txt\n</code></pre>\n<h2>Pratical Tips</h2>\n<ul>\n<li>\n<p>ImmunoPepper requires the sample name are <strong>exactly</strong> the same in the <code>splice count file</code> and <code>mutation file</code> and the\ngiven option <code>--samples</code> should be those samples. Please make necessary changes to the input files so that ImmunoPepper can work as expected.</p>\n</li>\n<li>\n<p><code>make_bg</code>, <code>diff</code> and <code>filter</code> mode accept the output files of ImmunoPepper. However, the user\ncan also add other external input files.</p>\n</li>\n<li>\n<p><code>make_bg</code> assumes the input file has\na header line, separated with <em>\\t</em> and kmers are in the first column.</p>\n</li>\n<li>\n<p><code>diff</code> assumes\nthe foreground kmer file has a header line and that the background kmer file has the\nformat as the output file of <code>make_bg</code>.</p>\n</li>\n<li>\n<p><code>filter</code> assumes the input file has a header\nline and with three columns <code>seg-expr</code>, <code>junction_expr</code> and <code>is_crossjunction</code>. It's acceptable if some columns\nare missing but the user should not use corresponding filter rules. Otherwise error will happen.</p>\n</li>\n</ul>\n<h2>License</h2>\n<p>Please see the LICENSE file for more information about license and copyright.</p>\n\n          </div>"}, "last_serial": 6319649, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "9247df5d8ac5cb4fbb8f926ae7fc0463", "sha256": "0a7919b0b49e71048593e9c915d1dd66a013c2931c7f80eed0a48e47ba03c80d"}, "downloads": -1, "filename": "immunopepper-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9247df5d8ac5cb4fbb8f926ae7fc0463", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43779, "upload_time": "2019-12-17T18:50:03", "upload_time_iso_8601": "2019-12-17T18:50:03.966632Z", "url": "https://files.pythonhosted.org/packages/54/a7/d99c5cb987a3b27553d25079545419f046ecbb47a5e105ff0efe01580cf6/immunopepper-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a8a5a11fcff71db3a230a6dc969e646", "sha256": "eba8188763f6e24d001d4f75a3313b34817815081ab7f19c49d3758eb2b68165"}, "downloads": -1, "filename": "immunopepper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3a8a5a11fcff71db3a230a6dc969e646", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 537402, "upload_time": "2019-12-17T18:50:07", "upload_time_iso_8601": "2019-12-17T18:50:07.358869Z", "url": "https://files.pythonhosted.org/packages/e0/49/5a548466cff98999f105e0a6e5a339db2d20f3be8d3383c895d55eb1d1c7/immunopepper-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9247df5d8ac5cb4fbb8f926ae7fc0463", "sha256": "0a7919b0b49e71048593e9c915d1dd66a013c2931c7f80eed0a48e47ba03c80d"}, "downloads": -1, "filename": "immunopepper-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9247df5d8ac5cb4fbb8f926ae7fc0463", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 43779, "upload_time": "2019-12-17T18:50:03", "upload_time_iso_8601": "2019-12-17T18:50:03.966632Z", "url": "https://files.pythonhosted.org/packages/54/a7/d99c5cb987a3b27553d25079545419f046ecbb47a5e105ff0efe01580cf6/immunopepper-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a8a5a11fcff71db3a230a6dc969e646", "sha256": "eba8188763f6e24d001d4f75a3313b34817815081ab7f19c49d3758eb2b68165"}, "downloads": -1, "filename": "immunopepper-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3a8a5a11fcff71db3a230a6dc969e646", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 537402, "upload_time": "2019-12-17T18:50:07", "upload_time_iso_8601": "2019-12-17T18:50:07.358869Z", "url": "https://files.pythonhosted.org/packages/e0/49/5a548466cff98999f105e0a6e5a339db2d20f3be8d3383c895d55eb1d1c7/immunopepper-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:37 2020"}