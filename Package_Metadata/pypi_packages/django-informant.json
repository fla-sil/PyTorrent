{"info": {"author": "Fragaria, s.r.o.", "author_email": "info@fragaria.cz", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Informant\n---------\n\nInformant is simple yet flexible app for common newsletter-sending functionality\nwhich lot of sites need to offer. It only provides one common newsletter\nwith opt-in/opt-out and features management command for mail sending (HTML/text alternative).\n\nInstallation\n============\n\nStandard Django way::\n    \n    pip install django-informant\n    \nAdd to your ``INSTALLED_APPS``::\n\n    INSTALLED_APPS = (\n        ..\n        ..,\n        'informant',\n        ...\n    )\n    \nSet e-mail address to set newsletters from in your ``settings.py``::\n\n    NEWSLETTER_EMAIL = 'your@example.com\n    \nUsage\n=====\n    \nTemplates\n*********\n\nInformant provides few default templates to start with but it's usually better\nto make your own - customized. These are:\n\n* ``informant/management/subscribe_ok.html`` - template to render when subscription is OK\n* ``informant/management/subscribe_error.html`` - template to render when there was an error\n* ``informant/management/unsubscribed.html`` - template to render when user has unsubscribed\n* ``informant/mail/newsletter.html`` - base template with e-mail structure\n* ``informant/mail/base.txt`` - text alternative that should point out to the web version of the newsletter\n\nInformant uses newsletter text as Django template. It's therefore usefull\nto create basic blocks in ``informant/mail/newsletter.html`` and then extend\nfrom it in the newsletter administration and override only specific block\nlike you would do in real templates. E.g.:\n\n**In informant/mail/newsletter.html**::\n\n    {% load i18n %}\n    <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n    <html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{% trans \"lang\" %}\" lang=\"{% trans \"lang\" %}\">\n    <head>\n        <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" />\n        <title>{% block head %}{% endblock %}</title>\n    </head>\n    <body>\n    {% block content %}{% endblock %}\n    </body>\n    </html>\n\n\n**In Newsletter object content field**::    \n\n    {% extends \"informant/mail/newsletter.html\" %}\n    {% block title %}My title{% endblock %}\n    {% block content %}My content{% endblock %}\n        \n\nAjax subscription\n*****************\n\nIf you don't want separate page with subscription form, Informant has a \njQuery plugin which will take care.\n\nIt is called on the ``<form>`` elements. It expects that form has correctly\nset up the action attribute pointing to the right URL. See example::\n\n    <form id=\"newsletterSubscribeForm\" action=\"{% url \"informant_subscribe\" %}\" method=\"post\">\n        <div>\n            <label for=\"email\">Enter your e-mail:</label>\n            <div id=\"newsletterSubscribeResult\"></div>\n            {% csrf_token %}\n            <input type=\"email\" name=\"email\" />\n            <input type=\"hidden\" name=\"surname\" value=\"\" />\n        </div>\n        <div>\n            <input type=\"submit\" value=\"Subscribe\" class=\"button\" />\n        </div>\n    </form>\n\n    <script type=\"text/javascript\">\n        // JavaScript handler\n        var subscribeForm = $('#newsletterSubscribeForm'); \n        subscribeForm.informantSubscribeForm({\n            renderResults: true,\n            resultContainer: $('#newsletterSubscribeResult')\n        });\n        subscribeForm.bind('informantSubscribeOk', function () {\n           $(this).find('input').hide(); \n        });\n    </script>\n\nThe Javascript plugin by default doesn't render any results. If you want \nit to, supply configuration as seen above. Plugin will fire ``informantSubscribeOk``\nand ``informantSubscribeError`` events in case of successfull or invalid \nsubscription respectively. You can bind to these using jQuery's ``.bind()``\nmethod.\n\nSending\n*******\n\nInformant provides ``send_newsletter`` command that will send newsletters\nusing the email backend from your Django settings.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "django-informant", "package_url": "https://pypi.org/project/django-informant/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-informant/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/django-informant/1.1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple newsletter application for Django framework.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Informant is simple yet flexible app for common newsletter-sending functionality\nwhich lot of sites need to offer. It only provides one common newsletter\nwith opt-in/opt-out and features management command for mail sending (HTML/text alternative).</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Standard Django way:</p>\n<pre>pip install django-informant\n</pre>\n<p>Add to your <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS = (\n    ..\n    ..,\n    'informant',\n    ...\n)\n</pre>\n<p>Set e-mail address to set newsletters from in your <tt>settings.py</tt>:</p>\n<pre>NEWSLETTER_EMAIL = 'your@example.com\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"templates\">\n<h3>Templates</h3>\n<p>Informant provides few default templates to start with but it\u2019s usually better\nto make your own - customized. These are:</p>\n<ul>\n<li><tt>informant/management/subscribe_ok.html</tt> - template to render when subscription is OK</li>\n<li><tt>informant/management/subscribe_error.html</tt> - template to render when there was an error</li>\n<li><tt>informant/management/unsubscribed.html</tt> - template to render when user has unsubscribed</li>\n<li><tt>informant/mail/newsletter.html</tt> - base template with e-mail structure</li>\n<li><tt>informant/mail/base.txt</tt> - text alternative that should point out to the web version of the newsletter</li>\n</ul>\n<p>Informant uses newsletter text as Django template. It\u2019s therefore usefull\nto create basic blocks in <tt>informant/mail/newsletter.html</tt> and then extend\nfrom it in the newsletter administration and override only specific block\nlike you would do in real templates. E.g.:</p>\n<p><strong>In informant/mail/newsletter.html</strong>:</p>\n<pre>{% load i18n %}\n&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\" \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\"&gt;\n&lt;html xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"{% trans \"lang\" %}\" lang=\"{% trans \"lang\" %}\"&gt;\n&lt;head&gt;\n    &lt;meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\" /&gt;\n    &lt;title&gt;{% block head %}{% endblock %}&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n{% block content %}{% endblock %}\n&lt;/body&gt;\n&lt;/html&gt;\n</pre>\n<p><strong>In Newsletter object content field</strong>:</p>\n<pre>{% extends \"informant/mail/newsletter.html\" %}\n{% block title %}My title{% endblock %}\n{% block content %}My content{% endblock %}\n</pre>\n</div>\n<div id=\"ajax-subscription\">\n<h3>Ajax subscription</h3>\n<p>If you don\u2019t want separate page with subscription form, Informant has a\njQuery plugin which will take care.</p>\n<p>It is called on the <tt>&lt;form&gt;</tt> elements. It expects that form has correctly\nset up the action attribute pointing to the right URL. See example:</p>\n<pre>&lt;form id=\"newsletterSubscribeForm\" action=\"{% url \"informant_subscribe\" %}\" method=\"post\"&gt;\n    &lt;div&gt;\n        &lt;label for=\"email\"&gt;Enter your e-mail:&lt;/label&gt;\n        &lt;div id=\"newsletterSubscribeResult\"&gt;&lt;/div&gt;\n        {% csrf_token %}\n        &lt;input type=\"email\" name=\"email\" /&gt;\n        &lt;input type=\"hidden\" name=\"surname\" value=\"\" /&gt;\n    &lt;/div&gt;\n    &lt;div&gt;\n        &lt;input type=\"submit\" value=\"Subscribe\" class=\"button\" /&gt;\n    &lt;/div&gt;\n&lt;/form&gt;\n\n&lt;script type=\"text/javascript\"&gt;\n    // JavaScript handler\n    var subscribeForm = $('#newsletterSubscribeForm');\n    subscribeForm.informantSubscribeForm({\n        renderResults: true,\n        resultContainer: $('#newsletterSubscribeResult')\n    });\n    subscribeForm.bind('informantSubscribeOk', function () {\n       $(this).find('input').hide();\n    });\n&lt;/script&gt;\n</pre>\n<p>The Javascript plugin by default doesn\u2019t render any results. If you want\nit to, supply configuration as seen above. Plugin will fire <tt>informantSubscribeOk</tt>\nand <tt>informantSubscribeError</tt> events in case of successfull or invalid\nsubscription respectively. You can bind to these using jQuery\u2019s <tt>.bind()</tt>\nmethod.</p>\n</div>\n<div id=\"sending\">\n<h3>Sending</h3>\n<p>Informant provides <tt>send_newsletter</tt> command that will send newsletters\nusing the email backend from your Django settings.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 789865, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "546fecedd5f2f3dbb5e2a8e9b3ae8410", "sha256": "a30253e2887d617c6aabc3acc2e7837e33c654dedbb49ccc235a83a7b4914d94"}, "downloads": -1, "filename": "django-informant-1.0.0.tar.gz", "has_sig": false, "md5_digest": "546fecedd5f2f3dbb5e2a8e9b3ae8410", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11385, "upload_time": "2012-08-15T12:42:52", "upload_time_iso_8601": "2012-08-15T12:42:52.708246Z", "url": "https://files.pythonhosted.org/packages/70/97/7e2ce0822452689fb7804e65877f075848745e35700ad2a83f4d7df775b7/django-informant-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "e382e782dc3d8975918b795462e7f9f7", "sha256": "0eae692af623b183225dcca47313a5e42de2123f5b9ae6d991bcf8cc16f342df"}, "downloads": -1, "filename": "django-informant-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e382e782dc3d8975918b795462e7f9f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11424, "upload_time": "2012-08-20T14:42:43", "upload_time_iso_8601": "2012-08-20T14:42:43.593166Z", "url": "https://files.pythonhosted.org/packages/08/be/c154658043b4e1f5669ce03675fe777d7d1f98ca9a1249c2d9d2c6396c7c/django-informant-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "e591e13001b6256f5988efa033b853fb", "sha256": "dc98e107363e17afa6e32b8a9174cd69a54bff3698ea82a1631a2956adff785b"}, "downloads": -1, "filename": "django-informant-1.0.2.tar.gz", "has_sig": false, "md5_digest": "e591e13001b6256f5988efa033b853fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10420, "upload_time": "2012-08-20T14:46:59", "upload_time_iso_8601": "2012-08-20T14:46:59.559822Z", "url": "https://files.pythonhosted.org/packages/6d/e0/ffebaea3f1cee2d527af1903bb4a602243e4a502e9a71878bfc6a38e0b80/django-informant-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1ea02ddfe77c2f6c8c4d0e50cb02e0c5", "sha256": "dcba69e61b23bbe611bf9a2ab4d8f68d22eb66a7ac3ebdf33c18f7fee00e79b7"}, "downloads": -1, "filename": "django-informant-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1ea02ddfe77c2f6c8c4d0e50cb02e0c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11762, "upload_time": "2012-10-15T06:42:38", "upload_time_iso_8601": "2012-10-15T06:42:38.712816Z", "url": "https://files.pythonhosted.org/packages/be/3f/400dfce345e985bdc83f20876ef0cf5f6a6ce4c475585280aadca4591201/django-informant-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4540f32e76d1aef6695b732ca4c46561", "sha256": "68a4f23d233b2c8d51c3218e8fed64451622228cac12d33a2f99d6dddc3a5d5c"}, "downloads": -1, "filename": "django-informant-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4540f32e76d1aef6695b732ca4c46561", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11307, "upload_time": "2013-04-26T12:48:48", "upload_time_iso_8601": "2013-04-26T12:48:48.708381Z", "url": "https://files.pythonhosted.org/packages/14/dc/1c9dcdbdb99bbb4319be526c17932277e3c1d8edfe95b01f587b09be85c8/django-informant-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4540f32e76d1aef6695b732ca4c46561", "sha256": "68a4f23d233b2c8d51c3218e8fed64451622228cac12d33a2f99d6dddc3a5d5c"}, "downloads": -1, "filename": "django-informant-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4540f32e76d1aef6695b732ca4c46561", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11307, "upload_time": "2013-04-26T12:48:48", "upload_time_iso_8601": "2013-04-26T12:48:48.708381Z", "url": "https://files.pythonhosted.org/packages/14/dc/1c9dcdbdb99bbb4319be526c17932277e3c1d8edfe95b01f587b09be85c8/django-informant-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:36 2020"}