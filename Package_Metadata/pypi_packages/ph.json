{"info": {"author": "PG Drange", "author_email": "pgdr@equinor.com", "bugtrack_url": null, "classifiers": [], "description": "# ph (pronounced _\u03c6_) - the tabular data shell tool ![ph tests](https://github.com/pgdr/ph/workflows/ph%20tests/badge.svg?branch=master)\n\n\nSpoiler: Working with tabular data (csv) in the command line is difficult.  `ph` makes\nit easy:\n\n```bash\n$ pip install ph\n$ cat iris.csv | ph columns\n150\n4\nsetosa\nversicolor\nvirginica\n$ cat iris.csv | ph columns setosa versicolor | ph head 15 | ph tail 5 | ph show\n      setosa    versicolor\n--  --------  ------------\n 0       1.5           0.2\n 1       1.6           0.2\n 2       1.4           0.1\n 3       1.1           0.1\n 4       1.2           0.2\n```\n\n```bash\n$ cat iris.csv | ph describe\n              150           4      setosa  versicolor   virginica\ncount  150.000000  150.000000  150.000000  150.000000  150.000000\nmean     5.843333    3.057333    3.758000    1.199333    1.000000\nstd      0.828066    0.435866    1.765298    0.762238    0.819232\nmin      4.300000    2.000000    1.000000    0.100000    0.000000\n25%      5.100000    2.800000    1.600000    0.300000    0.000000\n50%      5.800000    3.000000    4.350000    1.300000    1.000000\n75%      6.400000    3.300000    5.100000    1.800000    2.000000\nmax      7.900000    4.400000    6.900000    2.500000    2.000000\n```\n\nOccasionally you would like to plot a CSV file real quick, in which case you can\nsimply pipe it to `ph plot`:\n\nSuppose you have a dataset `covid.csv`\n\n```csv\nSK,Italy,Iran,France,Spain,US\n51,79,95,57,84,85\n104,150,139,100,125,111\n204,227,245,130,169,176\n433,320,388,191,228,252\n602,445,593,212,282,352\n833,650,978,285,365,495\n977,888,1501,423,430,640\n1261,1128,2336,613,674,926\n1766,1694,2922,949,1231,NaN\n2337,2036,3513,1126,1696,NaN\n3150,2502,4747,1412,NaN,NaN\n4212,3089,5823,1748,NaN,NaN\n4812,3858,6566,NaN,NaN,NaN\n5328,4638,7161,NaN,NaN,NaN\n5766,5883,8042,NaN,NaN,NaN\n6284,7375,NaN,NaN,NaN,NaN\n6767,9172,NaN,NaN,NaN,NaN\n7134,10149,NaN,NaN,NaN,NaN\n7382,NaN,NaN,NaN,NaN,NaN\n7513,NaN,NaN,NaN,NaN,NaN\n```\n\nWith this simple command, you get a certified _\"So fancy\" plot_.\n\n```bash\n$ cat covid.csv | ph plot\n```\n\n![So fancy covid plot](https://raw.githubusercontent.com/pgdr/ph/master/assets/covid-plot.png)\n\n\n_(Notice that this needs [matplotlib](https://matplotlib.org/): `pip install ph[plot]`)_\n\n\n---\n\n## Raison d'\u00eatre\n\nUsing the _pipeline_ in Linux is nothing short of a dream in the life of the\ncomputer super user.\n\nHowever the pipe is clearly most suited for a stream of lines of textual data,\nand not when the stream is actually tabular data.\n\nTabular data is much more complex to work with due to its dual indexing and the\nfact that we often read horizontally and often read vertically.\n\nThe defacto format for tabular data is `csv`\n([comma-separated values](https://en.wikipedia.org/wiki/Comma-separated_values),\nwhich is not perfect in any sense\nof the word), and the defacto tool for working with tabular data in Python is\nPandas.\n\nThis is a shell utility `ph` (pronounced _phi_)\nthat reads tabular data from\n[_standard in_](https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin))\nand allows\nyou to perform a pandas function on the data, before writing it to standard out\nin `csv` format.\n\nThe goal is to create a tool which makes it nicer to work with tabular data in a\npipeline.\n\nTo achieve the goal, `ph` then reads csv data, does some manipulation,\nand prints out csv data.  With csv as the invariant, `ph` can be used in\na pipeline.\n\n---\n\nA very quick introduction to what `ph` can do for you,\nrun this in your shell:\n\n```bash\nph open csv https://covid.ourworldindata.org/data/ecdc/total_cases.csv \\\n    | ph slugify                                                       \\\n    | ph columns date norway sweden denmark                            \\\n    | ph diff norway sweden denmark                                    \\\n    | ph spencer norway sweden denmark                                 \\\n    | ph rolling 7 norway sweden denmark --how=mean                    \\\n    | ph dropna                                                        \\\n    | ph slice 50:                                                     \\\n    | ph plot --linewidth=3 --savefig=cases.svg --index=date\n```\n\n![cases](https://raw.githubusercontent.com/pgdr/ph/master/assets/cases.png)\n\n---\n## Table of contents\n\n* [Getting started](#getting-started)\n* [Example usage](#example-usage)\n* [The tools](#the-tools)\n  * [Concatenating, merging, filtering](#concatenating-merging-filtering)\n    * [`cat`, `open`, `from`](#cat-open-from)\n    * [`dropna` and `fillna`](#dropna-and-fillna)\n    * [`head` and `tail`](#head-and-tail)\n    * [`date`](#date)\n    * [`merge`](#merge)\n  * [Editing the csv](#editing-the-csv)\n    * [`columns`, listing, selecting and re-ordering of](#columns-listing-selecting-and-re-ordering-of)\n    * [`rename`](#rename)\n    * [`replace`](#replace)\n    * [`slice`](#slice)\n    * [`eval`; Mathematipulating and creating new columns](#eval-mathematipulating-and-creating-new-columns)\n    * [`normalize`](#normalize)\n    * [`query`](#query)\n    * [`grep`](#grep)\n    * [`strip`](#strip)\n    * [`removeprefix` and `removesuffix`](#removeprefix-and-removesuffix)\n  * [Analyzing the csv file](#analyzing-the-csv-file)\n    * [`describe`](#describe)\n    * [`show`](#show)\n    * [`tabulate`](#tabulate)\n    * [`sort` values by column](#sort-values-by-column)\n    * [`plot`](#plot)\n    * [`groupby`](#groupby)\n    * [`rolling`, `ewm`, `expanding`](#rolling-ewm-expanding)\n    * [`index`](#index)\n    * [`polyfit`](#polyfit)\n* [Working with different formats](#working-with-different-formats)\n  * [`open`](#open)\n  * [`to` and `from`; Exporting and importing](#to-and-from-exporting-and-importing)\n  * [Supported formats](#supported-formats)\n\n\n\n---\n\n\n## Getting started\n\nIf you have installed `ph[data]`, you can experiment using `ph dataset` if you\ndon't have an appropriate csv file available.\n\n\n```bash\nph dataset boston | ph describe\n```\n\nAvailable datasets are from\n[scikit-learn.datasets](https://scikit-learn.org/stable/datasets/index.html)\n\nToy datasets:\n\n* `boston`\n* `iris`\n* `diabetes`\n* `digits`\n* `linnerud`\n* `wine`\n* `breast_cancer`\n\n\nReal world:\n\n* `olivetti_faces`\n* `lfw_people`\n* `lfw_pairs`\n* `rcv1`\n* `kddcup99`\n* `california_housing`\n\n\n## Example usage\n\nSuppose you have a csv file `a.csv` that looks like this:\n\n```csv\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\nTranspose:\n\n```bash\n$ cat a.csv | ph transpose\n0,1,2,3,4,5\n3,4,5,6,7,8\n8,9,10,11,12,13\n```\n\n`median` (as well as many others, e.g.  `abs`, `corr`, `count`, `cov`, `cummax`,\n`cumsum`, `diff`, `max`, `product`, `quantile`, `rank`, `round`, `sum`, `std`,\n`var` etc.):\n\n```bash\n$ cat a.csv | ph median\nx,y\n5.5,10.5\n```\n\n**_Use `ph help` to list all commands_**\n\n\n## The tools\n\n### Concatenating, merging, filtering\n\n#### `cat`, `open`, `from`\n\n**cat**\n\nIt is possible to _concatenate_ (`cat`) multiple csv-files with `ph cat`:\n\n```bash\n$ ph cat a.csv b.csv --axis=index\n```\n\n```bash\n$ ph cat a.csv b.csv --axis=columns\n```\n\nThe functionality is described in\n[`pandas.concat`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html).\n\n\n**open**\n\nYou can open a csv, json, excel, gpx (etc., see [_supported\nformats_](#supported-formats)) using `ph open type file`:\n\n```bash\n$ ph open excel a.xlsx\n```\n\n```bash\n$ ph open excel a.xlsx --sheet_name=0 --skiprows=3\n```\n\n\n```bash\n$ ph open tsv a.tsv\n```\n\n```bash\n$ ph open csv a.csv\n```\n\nIn the event that the csv data starts on the first line (i.e. no\nheader is present), use `--header=None`:\n\n```bash\n$ ph open csv a.csv --header=None\n```\n\n\n\n**from**\n\nThe `ph from` command works similarly to `ph open` but reads from stdin\ninstead of opening a file.  It therefore does not take a filename\nargument:\n\n```bash\n$ cat /etc/passwd | ph from csv --sep=':' --header=None\n```\n\n\n#### `dropna` and `fillna`\n\n\nConsider again the `covid.csv` file from above.\n\n```bash\n$ cat covid.csv | ph dropna\n```\n\nwill remove all rows that contain N/A (`nan`) values.  If we want to keep all\nrows with at least 5 non-N/A values, we can use\n\n```bash\n$ cat covid.csv | ph dropna --thresh=5\n```\n\nIf we want to drop all _columns_ with N/A values instead of all _rows_, we use\n`--axis=1`.\n\nIf we want to drop only columns (resp. rows) with _all n/a_ values, we use\n`--how=all`.\n\n\nTo _replace_ N/A values with other values, we can simply run\n\n```bash\ncat covid.csv | ph fillna 999.75\n```\n\nIf we instead want to _pad_ the N/A values, we use `--method=pad`\n\n```bash\ncat covid.csv | ph fillna --method=pad\n```\n\nWe can limit the number of consecutive N/A values that are filled by using\n(e.g.) `--limit=7`.\n\n\n\n\n\n\n\n\n#### `head` and `tail`\n\nUsing `head` and `tail` works approximately as the normal shell equivalents,\nhowever they will preserve the header if there is one, e.g.\n\n```bash\n$ cat a.csv | ph head 7 | ph tail 3\nx,y\n6,11\n7,12\n8,13\n```\n\n#### `date`\n\nIf the `csv` file contains a column, e.g. named `x` containing\ntimestamps, it can be parsed as such with `ph date x`:\n\n```bash\n$ cat a.csv | ph date x\nx,y\n1970-01-04,8\n1970-01-05,9\n1970-01-06,10\n1970-01-07,11\n1970-01-08,12\n1970-01-09,13\n```\n\nIf your column is formatted with _freedom units_, `mm/dd/yyyy`, you can\nuse the flag `--dayfirst=True`:\n\n```csv\ndateRep,geoId\n01/04/2020,US\n31/03/2020,US\n30/03/2020,US\n29/03/2020,US\n28/03/2020,US\n```\n\n```bash\n$ cat ~/cov.csv | ph date dateRep --dayfirst=True\ndateRep,geoId\n2020-04-01,US\n2020-03-31,US\n2020-03-30,US\n2020-03-29,US\n2020-03-28,US\n```\n\n\n\nTo get a column with integers (e.g. 3-8) parsed as, e.g. 2003 - 2008, some\namount of hacking is necessary.  We will go into details later on the `eval` and\n`appendstr`.\n\n```bash\n$ cat a.csv | ph eval \"x = 2000 + x\" | ph appendstr x - | ph date x\nx,y\n2003-01-01,8\n2004-01-01,9\n2005-01-01,10\n2006-01-01,11\n2007-01-01,12\n2008-01-01,13\n```\n\nHowever, it is possible to provide a `--format` instruction to `date`:\n\n```bash\n$ cat a.csv | ph eval \"x = 2000 + x\"  | ph date x --format=\"%Y\"\nx,y\n2003-01-01,8\n2004-01-01,9\n2005-01-01,10\n2006-01-01,11\n2007-01-01,12\n2008-01-01,13\n```\n\nUnder some very special circumstances, we may have a `unix timestamp` in\na column, in which the `--utc=True` handle becomes useful:\n\nConsider `utc.csv`:\n\n```csv\ndate,x,y\n1580601600,3,8\n1580688000,4,9\n1580774400,5,10\n1580860800,6,11\n1580947200,7,12\n1581033600,8,13\n```\n\nwhere you get the correct dates:\n\n```bash\n$ cat utc.csv | ph date date --utc=True\ndate,x,y\n2020-02-02,3,8\n2020-02-03,4,9\n2020-02-04,5,10\n2020-02-05,6,11\n2020-02-06,7,12\n2020-02-07,8,13\n```\n\n\n#### `merge`\n\nMerging two csv files is made available through `ph merge f1 f2`.\n\nConsider `left.csv`\n\n```csv\nkey1,key2,A,B\nK0,K0,A0,B0\nK0,K1,A1,B1\nK1,K0,A2,B2\nK2,K1,A3,B3\n```\n\nand `right.csv`\n\n```csv\nkey1,key2,C,D\nK0,K0,C0,D0\nK1,K0,C1,D1\nK1,K0,C2,D2\nK2,K0,C3,D3\n```\n\nWe can merge them using (default to `--how=inner`)\n\n```bash\n$ ph merge left.csv right.csv\nkey1,key2,A,B,C,D\nK0,K0,A0,B0,C0,D0\nK1,K0,A2,B2,C1,D1\nK1,K0,A2,B2,C2,D2\n```\n\nor using an _outer_ join:\n\n```bash\n$ ph merge left.csv right.csv --how=outer\nkey1,key2,A,B,C,D\nK0,K0,A0,B0,C0,D0\nK0,K1,A1,B1,,\nK1,K0,A2,B2,C1,D1\nK1,K0,A2,B2,C2,D2\nK2,K1,A3,B3,,\nK2,K0,,,C3,D3\n```\n\nand we can specify on which column to join:\n\n```bash\n$ ph merge left.csv right.csv --on=key1 --how=outer\nkey1,key2_x,A,B,key2_y,C,D\nK0,K0,A0,B0,K0,C0,D0\nK0,K1,A1,B1,K0,C0,D0\nK1,K0,A2,B2,K0,C1,D1\nK1,K0,A2,B2,K0,C2,D2\nK2,K1,A3,B3,K0,C3,D3\n```\n\n\n### Editing the csv\n\n#### `columns`, listing, selecting and re-ordering of\n\nConsider `c.csv`:\n\n```csv\nit,fr,de\n79,57,79\n157,100,130\n229,130,165\n323,191,203\n470,212,262\n655,285,545\n889,423,670\n1128,653,800\n1701,949,1040\n2036,1209,1224\n2502,1412,1565\n3089,1784,1966\n3858,2281,2745\n4636,2876,3675\n5883,3661,4181\n```\n\nPrint the column names:\n\n```bash\n$ cat c.csv | ph columns\nit\nfr\nde\n```\n\nSelecting only certain columns, e.g. `de` and `it`\n\n```bash\n$ cat c.csv | ph columns de it | ph tail 3\nde,it\n2745,3858\n3675,4636\n4181,5883\n```\n\n\n#### `rename`\n\n```bash\n$ cat c.csv | ph rename de Germany | ph rename it Italy | ph columns Italy Germany\nItaly,Germany\n79,79\n157,130\n229,165\n323,203\n470,262\n655,545\n889,670\n1128,800\n1701,1040\n2036,1224\n2502,1565\n3089,1966\n3858,2745\n4636,3675\n5883,4181\n```\n\nIn addition to `rename` there is an auxiliary function `slugify` that\nlets you _slugify_ the column names.  Consider `slugit.csv`\n\n```csv\n  Stupid column 1,  Jerky-column No. 2\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\n```bash\n$ cat slugit.csv | ph slugify\nstupid_column_1,jerky_column_no_2\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\nThen you can do\n\n```bash\n$ cat slugit.csv | ph slugify | ph rename stupid_column_1 first | ph rename jerky_column_no_2 second\nfirst,second\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\n\n#### `replace`\n\nWe can replace values in the data (or in a single column) using `ph\nreplace`.  The syntax is\n`ph replace old new [--column=x [--newcolumn=xp]]`:\n\n```bash\n$ cat a.csv| ph replace 8 100\nx,y\n3,100\n4,9\n5,10\n6,11\n7,12\n100,13\n```\n\n```bash\n$ cat a.csv| ph replace 8 100 --column=x\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n100,13\n```\n\n```bash\n$ cat a.csv| ph replace 8 100 --column=x --newcolumn=xp\nx,y,xp\n3,8,3\n4,9,4\n5,10,5\n6,11,6\n7,12,7\n8,13,100\n```\n\n\n\n#### `slice`\n\nSlicing in Python is essential, and occasionally, we want to slice\ntabular data, e.g. look at only the 100 first, or 100 last rows, or\nperhaps we want to look at only every 10th row.  All of this is achieved\nusing `ph slice start:end:step` with standard Python slice syntax.\n\n```bash\n$ cat a.csv | ph slice 1:9:2\nx,y\n4,9\n6,11\n8,13\n```\n\nReversing:\n\n```\n$ cat a.csv|ph slice ::-1\nx,y\n8,13\n7,12\n6,11\n5,10\n4,9\n3,8\n```\n\nSee also `ph head` and `ph tail`.\n\n```bash\n$ cat a.csv | ph slice :3\nx,y\n3,8\n4,9\n5,10\n```\n\nequivalent to\n\n```bash\n$ cat a.csv | ph head 3\nx,y\n3,8\n4,9\n5,10\n```\n\n\n\n#### `eval`; Mathematipulating and creating new columns\n\nYou can sum columns and place the result in a new column using\n`eval` (from\n[`pandas.DataFrame.eval`](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval)).\n\n```bash\n$ cat c.csv | ph eval \"total = it + fr + de\" | ph tail 3\nit,fr,de,total\n3858,2281,2745,8884\n4636,2876,3675,11187\n5883,3661,4181,13725\n```\n\n\n```bash\n$ cat a.csv | ph eval \"z = x**2 + y\"\nx,y,z\n3,8,17\n4,9,25\n5,10,35\n6,11,47\n7,12,61\n8,13,77\n```\n\n\nIf you only want the result, you leave the `eval` expression without assignment\n\n```bash\n$ cat a.csv | ph eval \"x**2\"\nx\n9\n16\n25\n36\n49\n64\n```\n\n\n#### `normalize`\n\nYou can normalize a column using `ph normalize col`.\n\n```bash\n$ cat a.csv | ph eval \"z = x * y\" | ph normalize z\nx,y,z\n3,8,0.0\n4,9,0.15\n5,10,0.325\n6,11,0.525\n7,12,0.75\n8,13,1.0\n```\n\n\n\n#### `query`\n\nWe can [query](https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html) data using `ph query expr`.\n\n```bash\n$ cat a.csv | ph query \"x > 5\"\nx,y\n6,11\n7,12\n8,13\n```\n\n**Warning**:\nCalling the following command\n[might be illegal in Norway](https://rettspraksis.no/wiki/TBERG-2019-141281).\nReader beware!\n\n\n```bash\n$ ph open csv 'http://bit.ly/2cLzoxH' | ph query \"country == 'Norway'\" | ph tabulate --headers\n    country      year          pop  continent      lifeExp    gdpPercap\n--  ---------  ------  -----------  -----------  ---------  -----------\n 0  Norway       1952  3.32773e+06  Europe          72.67       10095.4\n 1  Norway       1957  3.49194e+06  Europe          73.44       11654\n 2  Norway       1962  3.63892e+06  Europe          73.47       13450.4\n 3  Norway       1967  3.78602e+06  Europe          74.08       16361.9\n 4  Norway       1972  3.933e+06    Europe          74.34       18965.1\n 5  Norway       1977  4.04320e+06  Europe          75.37       23311.3\n 6  Norway       1982  4.11479e+06  Europe          75.97       26298.6\n 7  Norway       1987  4.18615e+06  Europe          75.89       31541\n 8  Norway       1992  4.28636e+06  Europe          77.32       33965.7\n 9  Norway       1997  4.40567e+06  Europe          78.32       41283.2\n10  Norway       2002  4.53559e+06  Europe          79.05       44684\n11  Norway       2007  4.62793e+06  Europe          80.196      49357.2\n```\n\n\n\n#### `grep`\n\nThe powerful `grep` is one of the most used command line tools, and it\nwould be silly to not ship a version of it ourselves.  Using `ph grep`\nis rarely necessary, but helps when you want to ensure the header is\nkept.\n\n```bash\n$ cat txtfile.csv | ph grep \"a|b\" --case=False --column=Text_Column --regex=False\n```\n\nThe arguments denote\n\n* `--case` should be case sensitive?\n* `--column` grep only in given column\n* `--regex` use regex for pattern?\n\n\n\n#### `strip`\n\nOccasionally csv files come with additional spaces which can lead to\ndifficulties in parsing the cells' contents.  A csv file should be\nformatted without spaces after the comma `42,17` over `42, 17`.  But\nsince we are human, we sometimes make mistakes.\n\nIf we want to _strip_, or _trim_, the contents of a column, we use `ph\nstrip`:\n\n```bash\n$ cat txtfile.csv | ph strip col1 col2\n```\n\n\n\n#### `removeprefix` and `removesuffix`\n\nIf `strip` is not sufficiently powerful, it is possible to\n`removeprefix` or `removesuffix` using\n\n```bash\n$cat txtfile.csv | ph removeprefix col1 pattern\n```\n\nand similarly for `removesuffix`.\n\n\n\n\n\n### Analyzing the csv file\n\n\n#### `describe`\n\nThe normal Pandas `describe` is of course available:\n\n```bash\n$ cat a.csv | ph describe\n              x          y\ncount  6.000000   6.000000\nmean   5.500000  10.500000\nstd    1.870829   1.870829\nmin    3.000000   8.000000\n25%    4.250000   9.250000\n50%    5.500000  10.500000\n75%    6.750000  11.750000\nmax    8.000000  13.000000\n```\n\n\n#### `show`\n\nThe shorthand `ph show` simply calls the below `ph tabulate --headers`.\n\n```bash\n$ cat a.csv | ph show\n      x    y\n--  ---  ---\n 0    3    8\n 1    4    9\n 2    5   10\n 3    6   11\n 4    7   12\n 5    8   13\n```\n\n#### `tabulate`\n\nThe amazing _tabulate_ tool comes from the Python package\n[tabulate on PyPI](https://pypi.org/project/tabulate/).\n\nThe `tabulate` command takes arguments `--headers` to toggle printing of header\nrow, `--format=[grid,...]` to modify the table style and `--noindex` to remove\nthe running index (leftmost column in the example above).\n\nAmong the supported format styles are\n\n* `plain`, `simple`,\n* `grid`, `fancy_grid`, `pretty`,\n* `github`, `rst`, `mediawiki`, `html`, `latex`,\n* ... (See full list at the project homepage at\n  [python-tabulate](https://github.com/astanin/python-tabulate).)\n\n\n#### `sort` values by column\n\nYou can the columns in the csv data by a certain column:\n\n```bash\n$ cat iris.csv  | ph sort setosa | ph tail 5\n150,4,setosa,versicolor,virginica\n7.9,3.8,6.4,2.0,2\n7.6,3.0,6.6,2.1,2\n7.7,3.8,6.7,2.2,2\n7.7,2.8,6.7,2.0,2\n7.7,2.6,6.9,2.3,2\n```\n\n#### `plot`\n\nYou can plot data using `ph plot [--index=col]`.\n\n```bash\n$ ph open parquet 1A_2019.parquet | ph columns Time Value | ph plot --index=Time\n```\n\nThis will take the columns `Time` and `Value` from the timeseries provided by\nthe given `parquet` file and plot the `Value` series using `Time` as _index_.\n\n\nThe following example plots the life expectancy in Norway using `year` as _index_:\n\n```bash\n$ ph open csv http://bit.ly/2cLzoxH  | ph query \"country == 'Norway'\" | ph appendstr year -01-01 | ph columns year lifeExp | ph plot --index=year\n```\n\n![life-expectancy over time](https://raw.githubusercontent.com/pgdr/ph/master/assets/lifeexp.png)\n\n> _Note:_ The strange `ph appendstr year -01-01` turns the items `1956` into\n> `\"1956-01-01\"` and `2005` into `\"2005-01-01\"`.  These are necessary to make\n> pandas to interpret `1956` as a _year_ and not as a _millisecond_.\n>\n> The command `ph appendstr col str [newcol]` takes a string and appends it to a\n> column, overwriting the original column, or writing it to `newcol` if provided.\n\n**Advanced plotting**\n\nYou can choose the _kind_ of plotting ( \u2018line\u2019, \u2018bar\u2019, \u2018barh\u2019, \u2018hist\u2019, \u2018box\u2019,\n\u2018kde\u2019, \u2018density\u2019, \u2018area\u2019, \u2018pie\u2019, \u2018scatter\u2019, \u2018hexbin\u2019), the _style_ of plotting\n(e.g. `--style=o`), and in case of scatter plot, you need to specify `--x=col1`\nand `--y=col2`, e.g.:\n\n```bash\n$ ph open csv http://bit.ly/2cLzoxH | ph query \"continent == 'Europe'\" | ph plot --kind=scatter --x=lifeExp --y=gdpPercap\n```\n\n![life-expectancy vs gdp](https://raw.githubusercontent.com/pgdr/ph/master/assets/scatter.png)\n\n\n\n\n\nTo specify the styling `k--` gives a black dashed line:\n\n```bash\n$ ph open csv http://bit.ly/2cLzoxH  | ph query \"country == 'Norway'\" | ph appendstr year -01-01 | ph columns year lifeExp | ph plot --index=year --style=k--\n```\n\n\n**Using `plot` headless**\n\nOccasionally we would like to generate a plot to an image(-like) file on\nthe command line or in a script, without necessarily launching any\ngraphic user interface.\n\nCalling `ph plot` with the argument `--savefig=myfile.png` will create a\nPNG file called `myfile.png` instead of opening the matplotlib window.\nIt is also possible to get other formats by using different extensions,\nlike `eps`, `pdf`, `pgf`, `png`, `ps`, `raw`, `rgba`, `svg`, `svgz`.\n\n\n**_`iplot`_ with `plotly` and `cufflinks`**\n\nInstead of using the `matplotlib` backend, there is an option for using `plotly`\nand [`cufflinks`](https://github.com/santosjorge/cufflinks) to generate\ninteractive plots.\nThis depends on `cufflinks`, and can be installed with `pip install ph[iplot]`.\n\n```bash\n$ cat a.csv | ph iplot --kind=bar --barmode=stack\n```\n\n\n#### `groupby`\n\nSuppose you have a csv file\n\n```csv\nAnimal,Max Speed\nFalcon,380.0\nFalcon,370.0\nParrot,24.0\nParrot,26.0\n```\n\nYou can use Pandas' `groupby` functionality to get the aggregated `sum`,\n`mean`, or `first` value:\n\n```bash\n$ cat group.csv | ph groupby Animal --how=mean\nMax Speed\n375.0\n25.0\n```\n\nIf you want to retain the index column,\n\n```bash\n$ cat group.csv | ph groupby Animal --how=mean --as_index=False\nAnimal,Max Speed\nFalcon,375.0\nParrot,25.0\n```\n\n\n\n#### `rolling`, `ewm`, `expanding`\n\n**rolling**\n\nCompute rolling averages/sums using `ph rolling 3 --how=mean`\n\nConsider again `a.csv`:\n\n```csv\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\nMoving average with window size 3:\n\n```bash\n$ cat a.csv|ph rolling 3 --how=mean | ph dropna\nx,y\n4.0,9.0\n5.0,10.0\n6.0,11.0\n7.0,12.0\n```\n\n\nRolling sum with window size 2:\n\n```bash\n$ cat a.csv|ph rolling 2 --how=sum | ph dropna\nx,y\n7.0,17.0\n9.0,19.0\n11.0,21.0\n13.0,23.0\n15.0,25.0\n```\n\n\n**ewm \u2014 exponentially weighted methods**\n\n```bash\n$ cat a.csv | ph ewm --com=0.5 --how=mean | ph show\n          x         y\n--  -------  --------\n 0  3         8\n 1  3.75      8.75\n 2  4.61538   9.61538\n 3  5.55     10.55\n 4  6.52066  11.5207\n 5  7.50824  12.5082\n```\n\nUse either `com` (center of mass), `span`, `halflife`, or `alpha`,\ntogether with `--how=mean`, `--how=std`, `--how=var`, etc.\n\n\n**expanding \u2014 expanding window**\n\n> A common alternative to rolling statistics is to use an expanding\n> window, which yields the value of the statistic with all the data\n> available up to that point in time.\n\n```bash\n$ cat a.csv | ph expanding 3\nx,y\n,\n,\n12.0,27.0\n18.0,38.0\n25.0,50.0\n33.0,63.0\n```\n\n\n**Spencer's 15-weight average**\n\nWe also support an experimental and slow version of Spencer's 15-weight\naverage.  This method takes a window of size 15, and pointwise multiply\nwith the following vector (normalized)\n\n```\n(-3, -6, -5, 3, 21, 46, 67, 74, 67, 46, 21, 3, -5, -6, -3)\n```\n\nand then takes the sum of the resulting vector.\n\nSpencer's 15-weight average is an interesting (impulse response) filter\nthat preserves all up to cubic polynomial functions.\n\n\n#### `index`\n\nOccasionally you need to have an index, in which case `ph index` is your tool:\n\n```bash\n$ cat a.csv | ph index\nindex,x,y\n0,3,8\n1,4,9\n2,5,10\n3,6,11\n4,7,12\n5,8,13\n```\n\n#### `polyfit`\n\nYou can perform **linear regression** and **polynomial regression** on a certain\nindex column `x` and a `y = f(x)` column using `ph polyfit`.  It takes two\narguments, the `x` column name, the `y` column name and an optional\n`--deg=<degree>`, the degree of the polynomial.  The default option is `--deg=1`\nwhich corresponds to a linear regression.\n\nSuppose you have a csv file `lr.csv` with content\n\n```csv\nx,y\n4,12\n5,19\n6,17\n7,24\n8,28\n9,34\n```\n\nWith linear (polynomial) regression, you get an extra column, `polyfit_{deg}`:\n\n```bash\n$ cat lr.csv | ph polyfit x y | ph astype int\nx,y,polyfit_1\n4,12,12\n5,19,16\n6,17,20\n7,24,24\n8,28,28\n9,34,32\n```\n\nUsing `ph plot --index=x` results in this plot:\n\n![polyfit](https://raw.githubusercontent.com/pgdr/ph/master/assets/polyfit.png)\n\n## Working with different formats\n\n\n### `open`\n\nPandas supports reading a multitude of [readers](https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html).\n\nTo read an Excel file and pipe the stream, you can use `ph open`.\n\nThe syntax of `ph open` is `ph open ftype fname`, where `fname` is the\nfile you want to stream and `ftype` is the type of the file.\n\nA list of all available formats is given below.\n\n```bash\n$ ph open xls a.xlsx\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\n\nYou can open a _semicolon separated values_ file using `--sep=\";\"`\n\n```bash\n$ ph open csv --sep=\";\" fname.csv\n```\n\n\n\n### `to` and `from`; Exporting and importing\n\nObserve the following:\n\n```json\n{\"x\":{\"0\":3,\"1\":4,\"2\":5,\"3\":6,\"4\":7,\"5\":8},\n \"y\":{\"0\":8,\"1\":9,\"2\":10,\"3\":11,\"4\":12,\"5\":13}}\n```\n\nOf course, then,\n\n```bash\n$ cat a.csv | ph to json | ph from json\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\nThis also means that\n\n```bash\n$ cat a.csv | ph to json > a.json\n$ cat a.json\n{\"x\":{\"0\":3,\"1\":4,\"2\":5,\"3\":6,\"4\":7,\"5\":8},\n \"y\":{\"0\":8,\"1\":9,\"2\":10,\"3\":11,\"4\":12,\"5\":13}}\n$ cat a.json | ph from json\nx,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n```\n\nYou can open Excel-like formats using `ph open excel fname.xls[x]`, `parquet`\nfiles with `ph open parquet data.parquet`.  Note that these two examples require\n`xlrd` and `pyarrow`, respectively, or simply\n\n```\npip install ph[complete]\n```\n\n\n### Supported formats\n\n* `csv` / `tsv` (the latter for tab-separated values)\n* `fwf` (fixed-width file format)\n* `json`\n* `html`\n* `clipboard` (pastes tab-separated content from clipboard)\n* `xls`\n* `odf`\n* `hdf5`\n* `feather`\n* `parquet`\n* `orc`\n* `stata`\n* `sas`\n* `spss`\n* `pickle`\n* `sql`\n* `gbq` / `google` / `bigquery`\n\nWe also support reading GPX files with `ph open gpx`.\nThis uses the GPX Python library [gpxpy](https://github.com/tkrajina/gpxpy).", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pgdr/ph", "keywords": "tabular data,pandas,csv,pipeline,unix,command line tool", "license": "MIT", "maintainer": "PG Drange <pgdr@equinor.com>", "maintainer_email": "", "name": "ph", "package_url": "https://pypi.org/project/ph/", "platform": "", "project_url": "https://pypi.org/project/ph/", "project_urls": {"Bug Tracker": "https://github.com/pgdr/ph/issues", "Documentation": "https://github.com/pgdr/ph/blob/master/README.md", "Homepage": "https://github.com/pgdr/ph", "Source Code": "https://github.com/pgdr/ph"}, "release_url": "https://pypi.org/project/ph/0.4.2/", "requires_dist": null, "requires_python": "", "summary": "ph - the tabular data shell tool", "version": "0.4.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ph (pronounced <em>\u03c6</em>) - the tabular data shell tool <img alt=\"ph tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b21cfdcdd094a33fe26abe5e8e32e2c8e7db5fb9/68747470733a2f2f6769746875622e636f6d2f706764722f70682f776f726b666c6f77732f706825323074657374732f62616467652e7376673f6272616e63683d6d6173746572\"></h1>\n<p>Spoiler: Working with tabular data (csv) in the command line is difficult.  <code>ph</code> makes\nit easy:</p>\n<pre>$ pip install ph\n$ cat iris.csv <span class=\"p\">|</span> ph columns\n<span class=\"m\">150</span>\n<span class=\"m\">4</span>\nsetosa\nversicolor\nvirginica\n$ cat iris.csv <span class=\"p\">|</span> ph columns setosa versicolor <span class=\"p\">|</span> ph head <span class=\"m\">15</span> <span class=\"p\">|</span> ph tail <span class=\"m\">5</span> <span class=\"p\">|</span> ph show\n      setosa    versicolor\n--  --------  ------------\n <span class=\"m\">0</span>       <span class=\"m\">1</span>.5           <span class=\"m\">0</span>.2\n <span class=\"m\">1</span>       <span class=\"m\">1</span>.6           <span class=\"m\">0</span>.2\n <span class=\"m\">2</span>       <span class=\"m\">1</span>.4           <span class=\"m\">0</span>.1\n <span class=\"m\">3</span>       <span class=\"m\">1</span>.1           <span class=\"m\">0</span>.1\n <span class=\"m\">4</span>       <span class=\"m\">1</span>.2           <span class=\"m\">0</span>.2\n</pre>\n<pre>$ cat iris.csv <span class=\"p\">|</span> ph describe\n              <span class=\"m\">150</span>           <span class=\"m\">4</span>      setosa  versicolor   virginica\ncount  <span class=\"m\">150</span>.000000  <span class=\"m\">150</span>.000000  <span class=\"m\">150</span>.000000  <span class=\"m\">150</span>.000000  <span class=\"m\">150</span>.000000\nmean     <span class=\"m\">5</span>.843333    <span class=\"m\">3</span>.057333    <span class=\"m\">3</span>.758000    <span class=\"m\">1</span>.199333    <span class=\"m\">1</span>.000000\nstd      <span class=\"m\">0</span>.828066    <span class=\"m\">0</span>.435866    <span class=\"m\">1</span>.765298    <span class=\"m\">0</span>.762238    <span class=\"m\">0</span>.819232\nmin      <span class=\"m\">4</span>.300000    <span class=\"m\">2</span>.000000    <span class=\"m\">1</span>.000000    <span class=\"m\">0</span>.100000    <span class=\"m\">0</span>.000000\n<span class=\"m\">25</span>%      <span class=\"m\">5</span>.100000    <span class=\"m\">2</span>.800000    <span class=\"m\">1</span>.600000    <span class=\"m\">0</span>.300000    <span class=\"m\">0</span>.000000\n<span class=\"m\">50</span>%      <span class=\"m\">5</span>.800000    <span class=\"m\">3</span>.000000    <span class=\"m\">4</span>.350000    <span class=\"m\">1</span>.300000    <span class=\"m\">1</span>.000000\n<span class=\"m\">75</span>%      <span class=\"m\">6</span>.400000    <span class=\"m\">3</span>.300000    <span class=\"m\">5</span>.100000    <span class=\"m\">1</span>.800000    <span class=\"m\">2</span>.000000\nmax      <span class=\"m\">7</span>.900000    <span class=\"m\">4</span>.400000    <span class=\"m\">6</span>.900000    <span class=\"m\">2</span>.500000    <span class=\"m\">2</span>.000000\n</pre>\n<p>Occasionally you would like to plot a CSV file real quick, in which case you can\nsimply pipe it to <code>ph plot</code>:</p>\n<p>Suppose you have a dataset <code>covid.csv</code></p>\n<pre>SK,Italy,Iran,France,Spain,US\n51,79,95,57,84,85\n104,150,139,100,125,111\n204,227,245,130,169,176\n433,320,388,191,228,252\n602,445,593,212,282,352\n833,650,978,285,365,495\n977,888,1501,423,430,640\n1261,1128,2336,613,674,926\n1766,1694,2922,949,1231,NaN\n2337,2036,3513,1126,1696,NaN\n3150,2502,4747,1412,NaN,NaN\n4212,3089,5823,1748,NaN,NaN\n4812,3858,6566,NaN,NaN,NaN\n5328,4638,7161,NaN,NaN,NaN\n5766,5883,8042,NaN,NaN,NaN\n6284,7375,NaN,NaN,NaN,NaN\n6767,9172,NaN,NaN,NaN,NaN\n7134,10149,NaN,NaN,NaN,NaN\n7382,NaN,NaN,NaN,NaN,NaN\n7513,NaN,NaN,NaN,NaN,NaN\n</pre>\n<p>With this simple command, you get a certified <em>\"So fancy\" plot</em>.</p>\n<pre>$ cat covid.csv <span class=\"p\">|</span> ph plot\n</pre>\n<p><img alt=\"So fancy covid plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fc8781aa836adb7b4f7620495da73b2ad2e243fb/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706764722f70682f6d61737465722f6173736574732f636f7669642d706c6f742e706e67\"></p>\n<p><em>(Notice that this needs <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a>: <code>pip install ph[plot]</code>)</em></p>\n<hr>\n<h2>Raison d'\u00eatre</h2>\n<p>Using the <em>pipeline</em> in Linux is nothing short of a dream in the life of the\ncomputer super user.</p>\n<p>However the pipe is clearly most suited for a stream of lines of textual data,\nand not when the stream is actually tabular data.</p>\n<p>Tabular data is much more complex to work with due to its dual indexing and the\nfact that we often read horizontally and often read vertically.</p>\n<p>The defacto format for tabular data is <code>csv</code>\n(<a href=\"https://en.wikipedia.org/wiki/Comma-separated_values\" rel=\"nofollow\">comma-separated values</a>,\nwhich is not perfect in any sense\nof the word), and the defacto tool for working with tabular data in Python is\nPandas.</p>\n<p>This is a shell utility <code>ph</code> (pronounced <em>phi</em>)\nthat reads tabular data from\n<a href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_input_(stdin)\" rel=\"nofollow\"><em>standard in</em></a>\nand allows\nyou to perform a pandas function on the data, before writing it to standard out\nin <code>csv</code> format.</p>\n<p>The goal is to create a tool which makes it nicer to work with tabular data in a\npipeline.</p>\n<p>To achieve the goal, <code>ph</code> then reads csv data, does some manipulation,\nand prints out csv data.  With csv as the invariant, <code>ph</code> can be used in\na pipeline.</p>\n<hr>\n<p>A very quick introduction to what <code>ph</code> can do for you,\nrun this in your shell:</p>\n<pre>ph open csv https://covid.ourworldindata.org/data/ecdc/total_cases.csv <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph slugify                                                       <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph columns date norway sweden denmark                            <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph diff norway sweden denmark                                    <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph spencer norway sweden denmark                                 <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph rolling <span class=\"m\">7</span> norway sweden denmark --how<span class=\"o\">=</span>mean                    <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph dropna                                                        <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph slice <span class=\"m\">50</span>:                                                     <span class=\"se\">\\</span>\n    <span class=\"p\">|</span> ph plot --linewidth<span class=\"o\">=</span><span class=\"m\">3</span> --savefig<span class=\"o\">=</span>cases.svg --index<span class=\"o\">=</span>date\n</pre>\n<p><img alt=\"cases\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b506f3ba969e9f3feaff7817b545e666be8d3fe2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706764722f70682f6d61737465722f6173736574732f63617365732e706e67\"></p>\n<hr>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#getting-started\" rel=\"nofollow\">Getting started</a></li>\n<li><a href=\"#example-usage\" rel=\"nofollow\">Example usage</a></li>\n<li><a href=\"#the-tools\" rel=\"nofollow\">The tools</a>\n<ul>\n<li><a href=\"#concatenating-merging-filtering\" rel=\"nofollow\">Concatenating, merging, filtering</a>\n<ul>\n<li><a href=\"#cat-open-from\" rel=\"nofollow\"><code>cat</code>, <code>open</code>, <code>from</code></a></li>\n<li><a href=\"#dropna-and-fillna\" rel=\"nofollow\"><code>dropna</code> and <code>fillna</code></a></li>\n<li><a href=\"#head-and-tail\" rel=\"nofollow\"><code>head</code> and <code>tail</code></a></li>\n<li><a href=\"#date\" rel=\"nofollow\"><code>date</code></a></li>\n<li><a href=\"#merge\" rel=\"nofollow\"><code>merge</code></a></li>\n</ul>\n</li>\n<li><a href=\"#editing-the-csv\" rel=\"nofollow\">Editing the csv</a>\n<ul>\n<li><a href=\"#columns-listing-selecting-and-re-ordering-of\" rel=\"nofollow\"><code>columns</code>, listing, selecting and re-ordering of</a></li>\n<li><a href=\"#rename\" rel=\"nofollow\"><code>rename</code></a></li>\n<li><a href=\"#replace\" rel=\"nofollow\"><code>replace</code></a></li>\n<li><a href=\"#slice\" rel=\"nofollow\"><code>slice</code></a></li>\n<li><a href=\"#eval-mathematipulating-and-creating-new-columns\" rel=\"nofollow\"><code>eval</code>; Mathematipulating and creating new columns</a></li>\n<li><a href=\"#normalize\" rel=\"nofollow\"><code>normalize</code></a></li>\n<li><a href=\"#query\" rel=\"nofollow\"><code>query</code></a></li>\n<li><a href=\"#grep\" rel=\"nofollow\"><code>grep</code></a></li>\n<li><a href=\"#strip\" rel=\"nofollow\"><code>strip</code></a></li>\n<li><a href=\"#removeprefix-and-removesuffix\" rel=\"nofollow\"><code>removeprefix</code> and <code>removesuffix</code></a></li>\n</ul>\n</li>\n<li><a href=\"#analyzing-the-csv-file\" rel=\"nofollow\">Analyzing the csv file</a>\n<ul>\n<li><a href=\"#describe\" rel=\"nofollow\"><code>describe</code></a></li>\n<li><a href=\"#show\" rel=\"nofollow\"><code>show</code></a></li>\n<li><a href=\"#tabulate\" rel=\"nofollow\"><code>tabulate</code></a></li>\n<li><a href=\"#sort-values-by-column\" rel=\"nofollow\"><code>sort</code> values by column</a></li>\n<li><a href=\"#plot\" rel=\"nofollow\"><code>plot</code></a></li>\n<li><a href=\"#groupby\" rel=\"nofollow\"><code>groupby</code></a></li>\n<li><a href=\"#rolling-ewm-expanding\" rel=\"nofollow\"><code>rolling</code>, <code>ewm</code>, <code>expanding</code></a></li>\n<li><a href=\"#index\" rel=\"nofollow\"><code>index</code></a></li>\n<li><a href=\"#polyfit\" rel=\"nofollow\"><code>polyfit</code></a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#working-with-different-formats\" rel=\"nofollow\">Working with different formats</a>\n<ul>\n<li><a href=\"#open\" rel=\"nofollow\"><code>open</code></a></li>\n<li><a href=\"#to-and-from-exporting-and-importing\" rel=\"nofollow\"><code>to</code> and <code>from</code>; Exporting and importing</a></li>\n<li><a href=\"#supported-formats\" rel=\"nofollow\">Supported formats</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Getting started</h2>\n<p>If you have installed <code>ph[data]</code>, you can experiment using <code>ph dataset</code> if you\ndon't have an appropriate csv file available.</p>\n<pre>ph dataset boston <span class=\"p\">|</span> ph describe\n</pre>\n<p>Available datasets are from\n<a href=\"https://scikit-learn.org/stable/datasets/index.html\" rel=\"nofollow\">scikit-learn.datasets</a></p>\n<p>Toy datasets:</p>\n<ul>\n<li><code>boston</code></li>\n<li><code>iris</code></li>\n<li><code>diabetes</code></li>\n<li><code>digits</code></li>\n<li><code>linnerud</code></li>\n<li><code>wine</code></li>\n<li><code>breast_cancer</code></li>\n</ul>\n<p>Real world:</p>\n<ul>\n<li><code>olivetti_faces</code></li>\n<li><code>lfw_people</code></li>\n<li><code>lfw_pairs</code></li>\n<li><code>rcv1</code></li>\n<li><code>kddcup99</code></li>\n<li><code>california_housing</code></li>\n</ul>\n<h2>Example usage</h2>\n<p>Suppose you have a csv file <code>a.csv</code> that looks like this:</p>\n<pre>x,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n</pre>\n<p>Transpose:</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph transpose\n<span class=\"m\">0</span>,1,2,3,4,5\n<span class=\"m\">3</span>,4,5,6,7,8\n<span class=\"m\">8</span>,9,10,11,12,13\n</pre>\n<p><code>median</code> (as well as many others, e.g.  <code>abs</code>, <code>corr</code>, <code>count</code>, <code>cov</code>, <code>cummax</code>,\n<code>cumsum</code>, <code>diff</code>, <code>max</code>, <code>product</code>, <code>quantile</code>, <code>rank</code>, <code>round</code>, <code>sum</code>, <code>std</code>,\n<code>var</code> etc.):</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph median\nx,y\n<span class=\"m\">5</span>.5,10.5\n</pre>\n<p><strong><em>Use <code>ph help</code> to list all commands</em></strong></p>\n<h2>The tools</h2>\n<h3>Concatenating, merging, filtering</h3>\n<h4><code>cat</code>, <code>open</code>, <code>from</code></h4>\n<p><strong>cat</strong></p>\n<p>It is possible to <em>concatenate</em> (<code>cat</code>) multiple csv-files with <code>ph cat</code>:</p>\n<pre>$ ph cat a.csv b.csv --axis<span class=\"o\">=</span>index\n</pre>\n<pre>$ ph cat a.csv b.csv --axis<span class=\"o\">=</span>columns\n</pre>\n<p>The functionality is described in\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.concat.html\" rel=\"nofollow\"><code>pandas.concat</code></a>.</p>\n<p><strong>open</strong></p>\n<p>You can open a csv, json, excel, gpx (etc., see <a href=\"#supported-formats\" rel=\"nofollow\"><em>supported\nformats</em></a>) using <code>ph open type file</code>:</p>\n<pre>$ ph open excel a.xlsx\n</pre>\n<pre>$ ph open excel a.xlsx --sheet_name<span class=\"o\">=</span><span class=\"m\">0</span> --skiprows<span class=\"o\">=</span><span class=\"m\">3</span>\n</pre>\n<pre>$ ph open tsv a.tsv\n</pre>\n<pre>$ ph open csv a.csv\n</pre>\n<p>In the event that the csv data starts on the first line (i.e. no\nheader is present), use <code>--header=None</code>:</p>\n<pre>$ ph open csv a.csv --header<span class=\"o\">=</span>None\n</pre>\n<p><strong>from</strong></p>\n<p>The <code>ph from</code> command works similarly to <code>ph open</code> but reads from stdin\ninstead of opening a file.  It therefore does not take a filename\nargument:</p>\n<pre>$ cat /etc/passwd <span class=\"p\">|</span> ph from csv --sep<span class=\"o\">=</span><span class=\"s1\">':'</span> --header<span class=\"o\">=</span>None\n</pre>\n<h4><code>dropna</code> and <code>fillna</code></h4>\n<p>Consider again the <code>covid.csv</code> file from above.</p>\n<pre>$ cat covid.csv <span class=\"p\">|</span> ph dropna\n</pre>\n<p>will remove all rows that contain N/A (<code>nan</code>) values.  If we want to keep all\nrows with at least 5 non-N/A values, we can use</p>\n<pre>$ cat covid.csv <span class=\"p\">|</span> ph dropna --thresh<span class=\"o\">=</span><span class=\"m\">5</span>\n</pre>\n<p>If we want to drop all <em>columns</em> with N/A values instead of all <em>rows</em>, we use\n<code>--axis=1</code>.</p>\n<p>If we want to drop only columns (resp. rows) with <em>all n/a</em> values, we use\n<code>--how=all</code>.</p>\n<p>To <em>replace</em> N/A values with other values, we can simply run</p>\n<pre>cat covid.csv <span class=\"p\">|</span> ph fillna <span class=\"m\">999</span>.75\n</pre>\n<p>If we instead want to <em>pad</em> the N/A values, we use <code>--method=pad</code></p>\n<pre>cat covid.csv <span class=\"p\">|</span> ph fillna --method<span class=\"o\">=</span>pad\n</pre>\n<p>We can limit the number of consecutive N/A values that are filled by using\n(e.g.) <code>--limit=7</code>.</p>\n<h4><code>head</code> and <code>tail</code></h4>\n<p>Using <code>head</code> and <code>tail</code> works approximately as the normal shell equivalents,\nhowever they will preserve the header if there is one, e.g.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph head <span class=\"m\">7</span> <span class=\"p\">|</span> ph tail <span class=\"m\">3</span>\nx,y\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<h4><code>date</code></h4>\n<p>If the <code>csv</code> file contains a column, e.g. named <code>x</code> containing\ntimestamps, it can be parsed as such with <code>ph date x</code>:</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph date x\nx,y\n<span class=\"m\">1970</span>-01-04,8\n<span class=\"m\">1970</span>-01-05,9\n<span class=\"m\">1970</span>-01-06,10\n<span class=\"m\">1970</span>-01-07,11\n<span class=\"m\">1970</span>-01-08,12\n<span class=\"m\">1970</span>-01-09,13\n</pre>\n<p>If your column is formatted with <em>freedom units</em>, <code>mm/dd/yyyy</code>, you can\nuse the flag <code>--dayfirst=True</code>:</p>\n<pre>dateRep,geoId\n01/04/2020,US\n31/03/2020,US\n30/03/2020,US\n29/03/2020,US\n28/03/2020,US\n</pre>\n<pre>$ cat ~/cov.csv <span class=\"p\">|</span> ph date dateRep --dayfirst<span class=\"o\">=</span>True\ndateRep,geoId\n<span class=\"m\">2020</span>-04-01,US\n<span class=\"m\">2020</span>-03-31,US\n<span class=\"m\">2020</span>-03-30,US\n<span class=\"m\">2020</span>-03-29,US\n<span class=\"m\">2020</span>-03-28,US\n</pre>\n<p>To get a column with integers (e.g. 3-8) parsed as, e.g. 2003 - 2008, some\namount of hacking is necessary.  We will go into details later on the <code>eval</code> and\n<code>appendstr</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"x = 2000 + x\"</span> <span class=\"p\">|</span> ph appendstr x - <span class=\"p\">|</span> ph date x\nx,y\n<span class=\"m\">2003</span>-01-01,8\n<span class=\"m\">2004</span>-01-01,9\n<span class=\"m\">2005</span>-01-01,10\n<span class=\"m\">2006</span>-01-01,11\n<span class=\"m\">2007</span>-01-01,12\n<span class=\"m\">2008</span>-01-01,13\n</pre>\n<p>However, it is possible to provide a <code>--format</code> instruction to <code>date</code>:</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"x = 2000 + x\"</span>  <span class=\"p\">|</span> ph date x --format<span class=\"o\">=</span><span class=\"s2\">\"%Y\"</span>\nx,y\n<span class=\"m\">2003</span>-01-01,8\n<span class=\"m\">2004</span>-01-01,9\n<span class=\"m\">2005</span>-01-01,10\n<span class=\"m\">2006</span>-01-01,11\n<span class=\"m\">2007</span>-01-01,12\n<span class=\"m\">2008</span>-01-01,13\n</pre>\n<p>Under some very special circumstances, we may have a <code>unix timestamp</code> in\na column, in which the <code>--utc=True</code> handle becomes useful:</p>\n<p>Consider <code>utc.csv</code>:</p>\n<pre>date,x,y\n1580601600,3,8\n1580688000,4,9\n1580774400,5,10\n1580860800,6,11\n1580947200,7,12\n1581033600,8,13\n</pre>\n<p>where you get the correct dates:</p>\n<pre>$ cat utc.csv <span class=\"p\">|</span> ph date date --utc<span class=\"o\">=</span>True\ndate,x,y\n<span class=\"m\">2020</span>-02-02,3,8\n<span class=\"m\">2020</span>-02-03,4,9\n<span class=\"m\">2020</span>-02-04,5,10\n<span class=\"m\">2020</span>-02-05,6,11\n<span class=\"m\">2020</span>-02-06,7,12\n<span class=\"m\">2020</span>-02-07,8,13\n</pre>\n<h4><code>merge</code></h4>\n<p>Merging two csv files is made available through <code>ph merge f1 f2</code>.</p>\n<p>Consider <code>left.csv</code></p>\n<pre>key1,key2,A,B\nK0,K0,A0,B0\nK0,K1,A1,B1\nK1,K0,A2,B2\nK2,K1,A3,B3\n</pre>\n<p>and <code>right.csv</code></p>\n<pre>key1,key2,C,D\nK0,K0,C0,D0\nK1,K0,C1,D1\nK1,K0,C2,D2\nK2,K0,C3,D3\n</pre>\n<p>We can merge them using (default to <code>--how=inner</code>)</p>\n<pre>$ ph merge left.csv right.csv\nkey1,key2,A,B,C,D\nK0,K0,A0,B0,C0,D0\nK1,K0,A2,B2,C1,D1\nK1,K0,A2,B2,C2,D2\n</pre>\n<p>or using an <em>outer</em> join:</p>\n<pre>$ ph merge left.csv right.csv --how<span class=\"o\">=</span>outer\nkey1,key2,A,B,C,D\nK0,K0,A0,B0,C0,D0\nK0,K1,A1,B1,,\nK1,K0,A2,B2,C1,D1\nK1,K0,A2,B2,C2,D2\nK2,K1,A3,B3,,\nK2,K0,,,C3,D3\n</pre>\n<p>and we can specify on which column to join:</p>\n<pre>$ ph merge left.csv right.csv --on<span class=\"o\">=</span>key1 --how<span class=\"o\">=</span>outer\nkey1,key2_x,A,B,key2_y,C,D\nK0,K0,A0,B0,K0,C0,D0\nK0,K1,A1,B1,K0,C0,D0\nK1,K0,A2,B2,K0,C1,D1\nK1,K0,A2,B2,K0,C2,D2\nK2,K1,A3,B3,K0,C3,D3\n</pre>\n<h3>Editing the csv</h3>\n<h4><code>columns</code>, listing, selecting and re-ordering of</h4>\n<p>Consider <code>c.csv</code>:</p>\n<pre>it,fr,de\n79,57,79\n157,100,130\n229,130,165\n323,191,203\n470,212,262\n655,285,545\n889,423,670\n1128,653,800\n1701,949,1040\n2036,1209,1224\n2502,1412,1565\n3089,1784,1966\n3858,2281,2745\n4636,2876,3675\n5883,3661,4181\n</pre>\n<p>Print the column names:</p>\n<pre>$ cat c.csv <span class=\"p\">|</span> ph columns\nit\nfr\nde\n</pre>\n<p>Selecting only certain columns, e.g. <code>de</code> and <code>it</code></p>\n<pre>$ cat c.csv <span class=\"p\">|</span> ph columns de it <span class=\"p\">|</span> ph tail <span class=\"m\">3</span>\nde,it\n<span class=\"m\">2745</span>,3858\n<span class=\"m\">3675</span>,4636\n<span class=\"m\">4181</span>,5883\n</pre>\n<h4><code>rename</code></h4>\n<pre>$ cat c.csv <span class=\"p\">|</span> ph rename de Germany <span class=\"p\">|</span> ph rename it Italy <span class=\"p\">|</span> ph columns Italy Germany\nItaly,Germany\n<span class=\"m\">79</span>,79\n<span class=\"m\">157</span>,130\n<span class=\"m\">229</span>,165\n<span class=\"m\">323</span>,203\n<span class=\"m\">470</span>,262\n<span class=\"m\">655</span>,545\n<span class=\"m\">889</span>,670\n<span class=\"m\">1128</span>,800\n<span class=\"m\">1701</span>,1040\n<span class=\"m\">2036</span>,1224\n<span class=\"m\">2502</span>,1565\n<span class=\"m\">3089</span>,1966\n<span class=\"m\">3858</span>,2745\n<span class=\"m\">4636</span>,3675\n<span class=\"m\">5883</span>,4181\n</pre>\n<p>In addition to <code>rename</code> there is an auxiliary function <code>slugify</code> that\nlets you <em>slugify</em> the column names.  Consider <code>slugit.csv</code></p>\n<pre>  Stupid column 1,  Jerky-column No. 2\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n</pre>\n<pre>$ cat slugit.csv <span class=\"p\">|</span> ph slugify\nstupid_column_1,jerky_column_no_2\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<p>Then you can do</p>\n<pre>$ cat slugit.csv <span class=\"p\">|</span> ph slugify <span class=\"p\">|</span> ph rename stupid_column_1 first <span class=\"p\">|</span> ph rename jerky_column_no_2 second\nfirst,second\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<h4><code>replace</code></h4>\n<p>We can replace values in the data (or in a single column) using <code>ph replace</code>.  The syntax is\n<code>ph replace old new [--column=x [--newcolumn=xp]]</code>:</p>\n<pre>$ cat a.csv<span class=\"p\">|</span> ph replace <span class=\"m\">8</span> <span class=\"m\">100</span>\nx,y\n<span class=\"m\">3</span>,100\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">100</span>,13\n</pre>\n<pre>$ cat a.csv<span class=\"p\">|</span> ph replace <span class=\"m\">8</span> <span class=\"m\">100</span> --column<span class=\"o\">=</span>x\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">100</span>,13\n</pre>\n<pre>$ cat a.csv<span class=\"p\">|</span> ph replace <span class=\"m\">8</span> <span class=\"m\">100</span> --column<span class=\"o\">=</span>x --newcolumn<span class=\"o\">=</span>xp\nx,y,xp\n<span class=\"m\">3</span>,8,3\n<span class=\"m\">4</span>,9,4\n<span class=\"m\">5</span>,10,5\n<span class=\"m\">6</span>,11,6\n<span class=\"m\">7</span>,12,7\n<span class=\"m\">8</span>,13,100\n</pre>\n<h4><code>slice</code></h4>\n<p>Slicing in Python is essential, and occasionally, we want to slice\ntabular data, e.g. look at only the 100 first, or 100 last rows, or\nperhaps we want to look at only every 10th row.  All of this is achieved\nusing <code>ph slice start:end:step</code> with standard Python slice syntax.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph slice <span class=\"m\">1</span>:9:2\nx,y\n<span class=\"m\">4</span>,9\n<span class=\"m\">6</span>,11\n<span class=\"m\">8</span>,13\n</pre>\n<p>Reversing:</p>\n<pre><code>$ cat a.csv|ph slice ::-1\nx,y\n8,13\n7,12\n6,11\n5,10\n4,9\n3,8\n</code></pre>\n<p>See also <code>ph head</code> and <code>ph tail</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph slice :3\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n</pre>\n<p>equivalent to</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph head <span class=\"m\">3</span>\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n</pre>\n<h4><code>eval</code>; Mathematipulating and creating new columns</h4>\n<p>You can sum columns and place the result in a new column using\n<code>eval</code> (from\n<a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.eval.html#pandas.DataFrame.eval\" rel=\"nofollow\"><code>pandas.DataFrame.eval</code></a>).</p>\n<pre>$ cat c.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"total = it + fr + de\"</span> <span class=\"p\">|</span> ph tail <span class=\"m\">3</span>\nit,fr,de,total\n<span class=\"m\">3858</span>,2281,2745,8884\n<span class=\"m\">4636</span>,2876,3675,11187\n<span class=\"m\">5883</span>,3661,4181,13725\n</pre>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"z = x**2 + y\"</span>\nx,y,z\n<span class=\"m\">3</span>,8,17\n<span class=\"m\">4</span>,9,25\n<span class=\"m\">5</span>,10,35\n<span class=\"m\">6</span>,11,47\n<span class=\"m\">7</span>,12,61\n<span class=\"m\">8</span>,13,77\n</pre>\n<p>If you only want the result, you leave the <code>eval</code> expression without assignment</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"x**2\"</span>\nx\n<span class=\"m\">9</span>\n<span class=\"m\">16</span>\n<span class=\"m\">25</span>\n<span class=\"m\">36</span>\n<span class=\"m\">49</span>\n<span class=\"m\">64</span>\n</pre>\n<h4><code>normalize</code></h4>\n<p>You can normalize a column using <code>ph normalize col</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph <span class=\"nb\">eval</span> <span class=\"s2\">\"z = x * y\"</span> <span class=\"p\">|</span> ph normalize z\nx,y,z\n<span class=\"m\">3</span>,8,0.0\n<span class=\"m\">4</span>,9,0.15\n<span class=\"m\">5</span>,10,0.325\n<span class=\"m\">6</span>,11,0.525\n<span class=\"m\">7</span>,12,0.75\n<span class=\"m\">8</span>,13,1.0\n</pre>\n<h4><code>query</code></h4>\n<p>We can <a href=\"https://pandas.pydata.org/pandas-docs/stable/reference/api/pandas.DataFrame.query.html\" rel=\"nofollow\">query</a> data using <code>ph query expr</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph query <span class=\"s2\">\"x &gt; 5\"</span>\nx,y\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<p><strong>Warning</strong>:\nCalling the following command\n<a href=\"https://rettspraksis.no/wiki/TBERG-2019-141281\" rel=\"nofollow\">might be illegal in Norway</a>.\nReader beware!</p>\n<pre>$ ph open csv <span class=\"s1\">'http://bit.ly/2cLzoxH'</span> <span class=\"p\">|</span> ph query <span class=\"s2\">\"country == 'Norway'\"</span> <span class=\"p\">|</span> ph tabulate --headers\n    country      year          pop  continent      lifeExp    gdpPercap\n--  ---------  ------  -----------  -----------  ---------  -----------\n <span class=\"m\">0</span>  Norway       <span class=\"m\">1952</span>  <span class=\"m\">3</span>.32773e+06  Europe          <span class=\"m\">72</span>.67       <span class=\"m\">10095</span>.4\n <span class=\"m\">1</span>  Norway       <span class=\"m\">1957</span>  <span class=\"m\">3</span>.49194e+06  Europe          <span class=\"m\">73</span>.44       <span class=\"m\">11654</span>\n <span class=\"m\">2</span>  Norway       <span class=\"m\">1962</span>  <span class=\"m\">3</span>.63892e+06  Europe          <span class=\"m\">73</span>.47       <span class=\"m\">13450</span>.4\n <span class=\"m\">3</span>  Norway       <span class=\"m\">1967</span>  <span class=\"m\">3</span>.78602e+06  Europe          <span class=\"m\">74</span>.08       <span class=\"m\">16361</span>.9\n <span class=\"m\">4</span>  Norway       <span class=\"m\">1972</span>  <span class=\"m\">3</span>.933e+06    Europe          <span class=\"m\">74</span>.34       <span class=\"m\">18965</span>.1\n <span class=\"m\">5</span>  Norway       <span class=\"m\">1977</span>  <span class=\"m\">4</span>.04320e+06  Europe          <span class=\"m\">75</span>.37       <span class=\"m\">23311</span>.3\n <span class=\"m\">6</span>  Norway       <span class=\"m\">1982</span>  <span class=\"m\">4</span>.11479e+06  Europe          <span class=\"m\">75</span>.97       <span class=\"m\">26298</span>.6\n <span class=\"m\">7</span>  Norway       <span class=\"m\">1987</span>  <span class=\"m\">4</span>.18615e+06  Europe          <span class=\"m\">75</span>.89       <span class=\"m\">31541</span>\n <span class=\"m\">8</span>  Norway       <span class=\"m\">1992</span>  <span class=\"m\">4</span>.28636e+06  Europe          <span class=\"m\">77</span>.32       <span class=\"m\">33965</span>.7\n <span class=\"m\">9</span>  Norway       <span class=\"m\">1997</span>  <span class=\"m\">4</span>.40567e+06  Europe          <span class=\"m\">78</span>.32       <span class=\"m\">41283</span>.2\n<span class=\"m\">10</span>  Norway       <span class=\"m\">2002</span>  <span class=\"m\">4</span>.53559e+06  Europe          <span class=\"m\">79</span>.05       <span class=\"m\">44684</span>\n<span class=\"m\">11</span>  Norway       <span class=\"m\">2007</span>  <span class=\"m\">4</span>.62793e+06  Europe          <span class=\"m\">80</span>.196      <span class=\"m\">49357</span>.2\n</pre>\n<h4><code>grep</code></h4>\n<p>The powerful <code>grep</code> is one of the most used command line tools, and it\nwould be silly to not ship a version of it ourselves.  Using <code>ph grep</code>\nis rarely necessary, but helps when you want to ensure the header is\nkept.</p>\n<pre>$ cat txtfile.csv <span class=\"p\">|</span> ph grep <span class=\"s2\">\"a|b\"</span> --case<span class=\"o\">=</span>False --column<span class=\"o\">=</span>Text_Column --regex<span class=\"o\">=</span>False\n</pre>\n<p>The arguments denote</p>\n<ul>\n<li><code>--case</code> should be case sensitive?</li>\n<li><code>--column</code> grep only in given column</li>\n<li><code>--regex</code> use regex for pattern?</li>\n</ul>\n<h4><code>strip</code></h4>\n<p>Occasionally csv files come with additional spaces which can lead to\ndifficulties in parsing the cells' contents.  A csv file should be\nformatted without spaces after the comma <code>42,17</code> over <code>42, 17</code>.  But\nsince we are human, we sometimes make mistakes.</p>\n<p>If we want to <em>strip</em>, or <em>trim</em>, the contents of a column, we use <code>ph strip</code>:</p>\n<pre>$ cat txtfile.csv <span class=\"p\">|</span> ph strip col1 col2\n</pre>\n<h4><code>removeprefix</code> and <code>removesuffix</code></h4>\n<p>If <code>strip</code> is not sufficiently powerful, it is possible to\n<code>removeprefix</code> or <code>removesuffix</code> using</p>\n<pre><span class=\"nv\">$cat</span> txtfile.csv <span class=\"p\">|</span> ph removeprefix col1 pattern\n</pre>\n<p>and similarly for <code>removesuffix</code>.</p>\n<h3>Analyzing the csv file</h3>\n<h4><code>describe</code></h4>\n<p>The normal Pandas <code>describe</code> is of course available:</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph describe\n              x          y\ncount  <span class=\"m\">6</span>.000000   <span class=\"m\">6</span>.000000\nmean   <span class=\"m\">5</span>.500000  <span class=\"m\">10</span>.500000\nstd    <span class=\"m\">1</span>.870829   <span class=\"m\">1</span>.870829\nmin    <span class=\"m\">3</span>.000000   <span class=\"m\">8</span>.000000\n<span class=\"m\">25</span>%    <span class=\"m\">4</span>.250000   <span class=\"m\">9</span>.250000\n<span class=\"m\">50</span>%    <span class=\"m\">5</span>.500000  <span class=\"m\">10</span>.500000\n<span class=\"m\">75</span>%    <span class=\"m\">6</span>.750000  <span class=\"m\">11</span>.750000\nmax    <span class=\"m\">8</span>.000000  <span class=\"m\">13</span>.000000\n</pre>\n<h4><code>show</code></h4>\n<p>The shorthand <code>ph show</code> simply calls the below <code>ph tabulate --headers</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph show\n      x    y\n--  ---  ---\n <span class=\"m\">0</span>    <span class=\"m\">3</span>    <span class=\"m\">8</span>\n <span class=\"m\">1</span>    <span class=\"m\">4</span>    <span class=\"m\">9</span>\n <span class=\"m\">2</span>    <span class=\"m\">5</span>   <span class=\"m\">10</span>\n <span class=\"m\">3</span>    <span class=\"m\">6</span>   <span class=\"m\">11</span>\n <span class=\"m\">4</span>    <span class=\"m\">7</span>   <span class=\"m\">12</span>\n <span class=\"m\">5</span>    <span class=\"m\">8</span>   <span class=\"m\">13</span>\n</pre>\n<h4><code>tabulate</code></h4>\n<p>The amazing <em>tabulate</em> tool comes from the Python package\n<a href=\"https://pypi.org/project/tabulate/\" rel=\"nofollow\">tabulate on PyPI</a>.</p>\n<p>The <code>tabulate</code> command takes arguments <code>--headers</code> to toggle printing of header\nrow, <code>--format=[grid,...]</code> to modify the table style and <code>--noindex</code> to remove\nthe running index (leftmost column in the example above).</p>\n<p>Among the supported format styles are</p>\n<ul>\n<li><code>plain</code>, <code>simple</code>,</li>\n<li><code>grid</code>, <code>fancy_grid</code>, <code>pretty</code>,</li>\n<li><code>github</code>, <code>rst</code>, <code>mediawiki</code>, <code>html</code>, <code>latex</code>,</li>\n<li>... (See full list at the project homepage at\n<a href=\"https://github.com/astanin/python-tabulate\" rel=\"nofollow\">python-tabulate</a>.)</li>\n</ul>\n<h4><code>sort</code> values by column</h4>\n<p>You can the columns in the csv data by a certain column:</p>\n<pre>$ cat iris.csv  <span class=\"p\">|</span> ph sort setosa <span class=\"p\">|</span> ph tail <span class=\"m\">5</span>\n<span class=\"m\">150</span>,4,setosa,versicolor,virginica\n<span class=\"m\">7</span>.9,3.8,6.4,2.0,2\n<span class=\"m\">7</span>.6,3.0,6.6,2.1,2\n<span class=\"m\">7</span>.7,3.8,6.7,2.2,2\n<span class=\"m\">7</span>.7,2.8,6.7,2.0,2\n<span class=\"m\">7</span>.7,2.6,6.9,2.3,2\n</pre>\n<h4><code>plot</code></h4>\n<p>You can plot data using <code>ph plot [--index=col]</code>.</p>\n<pre>$ ph open parquet 1A_2019.parquet <span class=\"p\">|</span> ph columns Time Value <span class=\"p\">|</span> ph plot --index<span class=\"o\">=</span>Time\n</pre>\n<p>This will take the columns <code>Time</code> and <code>Value</code> from the timeseries provided by\nthe given <code>parquet</code> file and plot the <code>Value</code> series using <code>Time</code> as <em>index</em>.</p>\n<p>The following example plots the life expectancy in Norway using <code>year</code> as <em>index</em>:</p>\n<pre>$ ph open csv http://bit.ly/2cLzoxH  <span class=\"p\">|</span> ph query <span class=\"s2\">\"country == 'Norway'\"</span> <span class=\"p\">|</span> ph appendstr year -01-01 <span class=\"p\">|</span> ph columns year lifeExp <span class=\"p\">|</span> ph plot --index<span class=\"o\">=</span>year\n</pre>\n<p><img alt=\"life-expectancy over time\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ac6efa6914c52c5870d04d32e46f7d26f04dc1e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706764722f70682f6d61737465722f6173736574732f6c6966656578702e706e67\"></p>\n<blockquote>\n<p><em>Note:</em> The strange <code>ph appendstr year -01-01</code> turns the items <code>1956</code> into\n<code>\"1956-01-01\"</code> and <code>2005</code> into <code>\"2005-01-01\"</code>.  These are necessary to make\npandas to interpret <code>1956</code> as a <em>year</em> and not as a <em>millisecond</em>.</p>\n<p>The command <code>ph appendstr col str [newcol]</code> takes a string and appends it to a\ncolumn, overwriting the original column, or writing it to <code>newcol</code> if provided.</p>\n</blockquote>\n<p><strong>Advanced plotting</strong></p>\n<p>You can choose the <em>kind</em> of plotting ( \u2018line\u2019, \u2018bar\u2019, \u2018barh\u2019, \u2018hist\u2019, \u2018box\u2019,\n\u2018kde\u2019, \u2018density\u2019, \u2018area\u2019, \u2018pie\u2019, \u2018scatter\u2019, \u2018hexbin\u2019), the <em>style</em> of plotting\n(e.g. <code>--style=o</code>), and in case of scatter plot, you need to specify <code>--x=col1</code>\nand <code>--y=col2</code>, e.g.:</p>\n<pre>$ ph open csv http://bit.ly/2cLzoxH <span class=\"p\">|</span> ph query <span class=\"s2\">\"continent == 'Europe'\"</span> <span class=\"p\">|</span> ph plot --kind<span class=\"o\">=</span>scatter --x<span class=\"o\">=</span>lifeExp --y<span class=\"o\">=</span>gdpPercap\n</pre>\n<p><img alt=\"life-expectancy vs gdp\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b20ff30cb6fd570ff8d8e7cf0303b8e345c8f410/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706764722f70682f6d61737465722f6173736574732f736361747465722e706e67\"></p>\n<p>To specify the styling <code>k--</code> gives a black dashed line:</p>\n<pre>$ ph open csv http://bit.ly/2cLzoxH  <span class=\"p\">|</span> ph query <span class=\"s2\">\"country == 'Norway'\"</span> <span class=\"p\">|</span> ph appendstr year -01-01 <span class=\"p\">|</span> ph columns year lifeExp <span class=\"p\">|</span> ph plot --index<span class=\"o\">=</span>year --style<span class=\"o\">=</span>k--\n</pre>\n<p><strong>Using <code>plot</code> headless</strong></p>\n<p>Occasionally we would like to generate a plot to an image(-like) file on\nthe command line or in a script, without necessarily launching any\ngraphic user interface.</p>\n<p>Calling <code>ph plot</code> with the argument <code>--savefig=myfile.png</code> will create a\nPNG file called <code>myfile.png</code> instead of opening the matplotlib window.\nIt is also possible to get other formats by using different extensions,\nlike <code>eps</code>, <code>pdf</code>, <code>pgf</code>, <code>png</code>, <code>ps</code>, <code>raw</code>, <code>rgba</code>, <code>svg</code>, <code>svgz</code>.</p>\n<p><strong><em><code>iplot</code></em> with <code>plotly</code> and <code>cufflinks</code></strong></p>\n<p>Instead of using the <code>matplotlib</code> backend, there is an option for using <code>plotly</code>\nand <a href=\"https://github.com/santosjorge/cufflinks\" rel=\"nofollow\"><code>cufflinks</code></a> to generate\ninteractive plots.\nThis depends on <code>cufflinks</code>, and can be installed with <code>pip install ph[iplot]</code>.</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph iplot --kind<span class=\"o\">=</span>bar --barmode<span class=\"o\">=</span>stack\n</pre>\n<h4><code>groupby</code></h4>\n<p>Suppose you have a csv file</p>\n<pre>Animal,Max Speed\nFalcon,380.0\nFalcon,370.0\nParrot,24.0\nParrot,26.0\n</pre>\n<p>You can use Pandas' <code>groupby</code> functionality to get the aggregated <code>sum</code>,\n<code>mean</code>, or <code>first</code> value:</p>\n<pre>$ cat group.csv <span class=\"p\">|</span> ph groupby Animal --how<span class=\"o\">=</span>mean\nMax Speed\n<span class=\"m\">375</span>.0\n<span class=\"m\">25</span>.0\n</pre>\n<p>If you want to retain the index column,</p>\n<pre>$ cat group.csv <span class=\"p\">|</span> ph groupby Animal --how<span class=\"o\">=</span>mean --as_index<span class=\"o\">=</span>False\nAnimal,Max Speed\nFalcon,375.0\nParrot,25.0\n</pre>\n<h4><code>rolling</code>, <code>ewm</code>, <code>expanding</code></h4>\n<p><strong>rolling</strong></p>\n<p>Compute rolling averages/sums using <code>ph rolling 3 --how=mean</code></p>\n<p>Consider again <code>a.csv</code>:</p>\n<pre>x,y\n3,8\n4,9\n5,10\n6,11\n7,12\n8,13\n</pre>\n<p>Moving average with window size 3:</p>\n<pre>$ cat a.csv<span class=\"p\">|</span>ph rolling <span class=\"m\">3</span> --how<span class=\"o\">=</span>mean <span class=\"p\">|</span> ph dropna\nx,y\n<span class=\"m\">4</span>.0,9.0\n<span class=\"m\">5</span>.0,10.0\n<span class=\"m\">6</span>.0,11.0\n<span class=\"m\">7</span>.0,12.0\n</pre>\n<p>Rolling sum with window size 2:</p>\n<pre>$ cat a.csv<span class=\"p\">|</span>ph rolling <span class=\"m\">2</span> --how<span class=\"o\">=</span>sum <span class=\"p\">|</span> ph dropna\nx,y\n<span class=\"m\">7</span>.0,17.0\n<span class=\"m\">9</span>.0,19.0\n<span class=\"m\">11</span>.0,21.0\n<span class=\"m\">13</span>.0,23.0\n<span class=\"m\">15</span>.0,25.0\n</pre>\n<p><strong>ewm \u2014 exponentially weighted methods</strong></p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph ewm --com<span class=\"o\">=</span><span class=\"m\">0</span>.5 --how<span class=\"o\">=</span>mean <span class=\"p\">|</span> ph show\n          x         y\n--  -------  --------\n <span class=\"m\">0</span>  <span class=\"m\">3</span>         <span class=\"m\">8</span>\n <span class=\"m\">1</span>  <span class=\"m\">3</span>.75      <span class=\"m\">8</span>.75\n <span class=\"m\">2</span>  <span class=\"m\">4</span>.61538   <span class=\"m\">9</span>.61538\n <span class=\"m\">3</span>  <span class=\"m\">5</span>.55     <span class=\"m\">10</span>.55\n <span class=\"m\">4</span>  <span class=\"m\">6</span>.52066  <span class=\"m\">11</span>.5207\n <span class=\"m\">5</span>  <span class=\"m\">7</span>.50824  <span class=\"m\">12</span>.5082\n</pre>\n<p>Use either <code>com</code> (center of mass), <code>span</code>, <code>halflife</code>, or <code>alpha</code>,\ntogether with <code>--how=mean</code>, <code>--how=std</code>, <code>--how=var</code>, etc.</p>\n<p><strong>expanding \u2014 expanding window</strong></p>\n<blockquote>\n<p>A common alternative to rolling statistics is to use an expanding\nwindow, which yields the value of the statistic with all the data\navailable up to that point in time.</p>\n</blockquote>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph expanding <span class=\"m\">3</span>\nx,y\n,\n,\n<span class=\"m\">12</span>.0,27.0\n<span class=\"m\">18</span>.0,38.0\n<span class=\"m\">25</span>.0,50.0\n<span class=\"m\">33</span>.0,63.0\n</pre>\n<p><strong>Spencer's 15-weight average</strong></p>\n<p>We also support an experimental and slow version of Spencer's 15-weight\naverage.  This method takes a window of size 15, and pointwise multiply\nwith the following vector (normalized)</p>\n<pre><code>(-3, -6, -5, 3, 21, 46, 67, 74, 67, 46, 21, 3, -5, -6, -3)\n</code></pre>\n<p>and then takes the sum of the resulting vector.</p>\n<p>Spencer's 15-weight average is an interesting (impulse response) filter\nthat preserves all up to cubic polynomial functions.</p>\n<h4><code>index</code></h4>\n<p>Occasionally you need to have an index, in which case <code>ph index</code> is your tool:</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph index\nindex,x,y\n<span class=\"m\">0</span>,3,8\n<span class=\"m\">1</span>,4,9\n<span class=\"m\">2</span>,5,10\n<span class=\"m\">3</span>,6,11\n<span class=\"m\">4</span>,7,12\n<span class=\"m\">5</span>,8,13\n</pre>\n<h4><code>polyfit</code></h4>\n<p>You can perform <strong>linear regression</strong> and <strong>polynomial regression</strong> on a certain\nindex column <code>x</code> and a <code>y = f(x)</code> column using <code>ph polyfit</code>.  It takes two\narguments, the <code>x</code> column name, the <code>y</code> column name and an optional\n<code>--deg=&lt;degree&gt;</code>, the degree of the polynomial.  The default option is <code>--deg=1</code>\nwhich corresponds to a linear regression.</p>\n<p>Suppose you have a csv file <code>lr.csv</code> with content</p>\n<pre>x,y\n4,12\n5,19\n6,17\n7,24\n8,28\n9,34\n</pre>\n<p>With linear (polynomial) regression, you get an extra column, <code>polyfit_{deg}</code>:</p>\n<pre>$ cat lr.csv <span class=\"p\">|</span> ph polyfit x y <span class=\"p\">|</span> ph astype int\nx,y,polyfit_1\n<span class=\"m\">4</span>,12,12\n<span class=\"m\">5</span>,19,16\n<span class=\"m\">6</span>,17,20\n<span class=\"m\">7</span>,24,24\n<span class=\"m\">8</span>,28,28\n<span class=\"m\">9</span>,34,32\n</pre>\n<p>Using <code>ph plot --index=x</code> results in this plot:</p>\n<p><img alt=\"polyfit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df78fdf4109f8330f23fe54a55076d9a82d7a77d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f706764722f70682f6d61737465722f6173736574732f706f6c796669742e706e67\"></p>\n<h2>Working with different formats</h2>\n<h3><code>open</code></h3>\n<p>Pandas supports reading a multitude of <a href=\"https://pandas.pydata.org/pandas-docs/stable/user_guide/io.html\" rel=\"nofollow\">readers</a>.</p>\n<p>To read an Excel file and pipe the stream, you can use <code>ph open</code>.</p>\n<p>The syntax of <code>ph open</code> is <code>ph open ftype fname</code>, where <code>fname</code> is the\nfile you want to stream and <code>ftype</code> is the type of the file.</p>\n<p>A list of all available formats is given below.</p>\n<pre>$ ph open xls a.xlsx\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<p>You can open a <em>semicolon separated values</em> file using <code>--sep=\";\"</code></p>\n<pre>$ ph open csv --sep<span class=\"o\">=</span><span class=\"s2\">\";\"</span> fname.csv\n</pre>\n<h3><code>to</code> and <code>from</code>; Exporting and importing</h3>\n<p>Observe the following:</p>\n<pre><span class=\"p\">{</span><span class=\"nt\">\"x\"</span><span class=\"p\">:{</span><span class=\"nt\">\"0\"</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"nt\">\"1\"</span><span class=\"p\">:</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"nt\">\"2\"</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"nt\">\"3\"</span><span class=\"p\">:</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"nt\">\"4\"</span><span class=\"p\">:</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"nt\">\"5\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">},</span>\n <span class=\"nt\">\"y\"</span><span class=\"p\">:{</span><span class=\"nt\">\"0\"</span><span class=\"p\">:</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"nt\">\"1\"</span><span class=\"p\">:</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"nt\">\"2\"</span><span class=\"p\">:</span><span class=\"mi\">10</span><span class=\"p\">,</span><span class=\"nt\">\"3\"</span><span class=\"p\">:</span><span class=\"mi\">11</span><span class=\"p\">,</span><span class=\"nt\">\"4\"</span><span class=\"p\">:</span><span class=\"mi\">12</span><span class=\"p\">,</span><span class=\"nt\">\"5\"</span><span class=\"p\">:</span><span class=\"mi\">13</span><span class=\"p\">}}</span>\n</pre>\n<p>Of course, then,</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph to json <span class=\"p\">|</span> ph from json\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<p>This also means that</p>\n<pre>$ cat a.csv <span class=\"p\">|</span> ph to json &gt; a.json\n$ cat a.json\n<span class=\"o\">{</span><span class=\"s2\">\"x\"</span>:<span class=\"o\">{</span><span class=\"s2\">\"0\"</span>:3,<span class=\"s2\">\"1\"</span>:4,<span class=\"s2\">\"2\"</span>:5,<span class=\"s2\">\"3\"</span>:6,<span class=\"s2\">\"4\"</span>:7,<span class=\"s2\">\"5\"</span>:8<span class=\"o\">}</span>,\n <span class=\"s2\">\"y\"</span>:<span class=\"o\">{</span><span class=\"s2\">\"0\"</span>:8,<span class=\"s2\">\"1\"</span>:9,<span class=\"s2\">\"2\"</span>:10,<span class=\"s2\">\"3\"</span>:11,<span class=\"s2\">\"4\"</span>:12,<span class=\"s2\">\"5\"</span>:13<span class=\"o\">}}</span>\n$ cat a.json <span class=\"p\">|</span> ph from json\nx,y\n<span class=\"m\">3</span>,8\n<span class=\"m\">4</span>,9\n<span class=\"m\">5</span>,10\n<span class=\"m\">6</span>,11\n<span class=\"m\">7</span>,12\n<span class=\"m\">8</span>,13\n</pre>\n<p>You can open Excel-like formats using <code>ph open excel fname.xls[x]</code>, <code>parquet</code>\nfiles with <code>ph open parquet data.parquet</code>.  Note that these two examples require\n<code>xlrd</code> and <code>pyarrow</code>, respectively, or simply</p>\n<pre><code>pip install ph[complete]\n</code></pre>\n<h3>Supported formats</h3>\n<ul>\n<li><code>csv</code> / <code>tsv</code> (the latter for tab-separated values)</li>\n<li><code>fwf</code> (fixed-width file format)</li>\n<li><code>json</code></li>\n<li><code>html</code></li>\n<li><code>clipboard</code> (pastes tab-separated content from clipboard)</li>\n<li><code>xls</code></li>\n<li><code>odf</code></li>\n<li><code>hdf5</code></li>\n<li><code>feather</code></li>\n<li><code>parquet</code></li>\n<li><code>orc</code></li>\n<li><code>stata</code></li>\n<li><code>sas</code></li>\n<li><code>spss</code></li>\n<li><code>pickle</code></li>\n<li><code>sql</code></li>\n<li><code>gbq</code> / <code>google</code> / <code>bigquery</code></li>\n</ul>\n<p>We also support reading GPX files with <code>ph open gpx</code>.\nThis uses the GPX Python library <a href=\"https://github.com/tkrajina/gpxpy\" rel=\"nofollow\">gpxpy</a>.</p>\n\n          </div>"}, "last_serial": 7166632, "releases": {"0.0.0": [{"comment_text": "", "digests": {"md5": "82e344912010b4ca25b6729bcb43d7a3", "sha256": "b9ef12e269781e8461b99f84fb588fbe72883194d0b5a51d953984618069630e"}, "downloads": -1, "filename": "ph-0.0.0.tar.gz", "has_sig": false, "md5_digest": "82e344912010b4ca25b6729bcb43d7a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15971, "upload_time": "2020-03-09T17:01:37", "upload_time_iso_8601": "2020-03-09T17:01:37.342782Z", "url": "https://files.pythonhosted.org/packages/0f/5e/05b4047ea3e016c59b865626aeda45c3f2d2ec5429adeebea4227d3ed8b7/ph-0.0.0.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "5a5f74e135627623b7e5caab5486e933", "sha256": "295486438f5f7fa1c4102ab8cf7aaa9d6a2f95d38d215b56c9c6252091d6f4a4"}, "downloads": -1, "filename": "ph-0.0.10.tar.gz", "has_sig": false, "md5_digest": "5a5f74e135627623b7e5caab5486e933", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22037, "upload_time": "2020-03-10T11:56:39", "upload_time_iso_8601": "2020-03-10T11:56:39.586123Z", "url": "https://files.pythonhosted.org/packages/ce/76/a324b15333761d228db5dc1f9ec14455a57a4eafb208bd7edf243d633364/ph-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "790944abc37b709f1d1c99784bc19961", "sha256": "8069f7c5a925988e5f3230e09935b75b21605d586cc66a0699fa2cde57f3475c"}, "downloads": -1, "filename": "ph-0.0.11.tar.gz", "has_sig": false, "md5_digest": "790944abc37b709f1d1c99784bc19961", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22218, "upload_time": "2020-03-10T12:13:07", "upload_time_iso_8601": "2020-03-10T12:13:07.180529Z", "url": "https://files.pythonhosted.org/packages/cd/15/25d9a30360ccd66bde6206cd353dd78b04c7e2c6ffbb9dcfcc85ea02911b/ph-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "a31cee8a7eb8c48caf1ab2735cfa4e88", "sha256": "0ee8ecfe86f23ac2a0df3dc095e2318a01edf56d3273bbef2dfad3e626ca194a"}, "downloads": -1, "filename": "ph-0.0.12.tar.gz", "has_sig": false, "md5_digest": "a31cee8a7eb8c48caf1ab2735cfa4e88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22387, "upload_time": "2020-03-10T12:29:21", "upload_time_iso_8601": "2020-03-10T12:29:21.733145Z", "url": "https://files.pythonhosted.org/packages/59/df/ac42f28d8acf5d622ba8c7677e9b93061398020d3aecd06df947d90d6902/ph-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "e5c9673f75939e3b685d322d688da632", "sha256": "c622b71d5f2f1d5abebe5916f6891f9706e2a9d0d059b1e92f1e7fe446a1a6a3"}, "downloads": -1, "filename": "ph-0.0.13.tar.gz", "has_sig": false, "md5_digest": "e5c9673f75939e3b685d322d688da632", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23266, "upload_time": "2020-03-10T12:51:44", "upload_time_iso_8601": "2020-03-10T12:51:44.346273Z", "url": "https://files.pythonhosted.org/packages/82/d6/177bf4ff73222eb2094de0e11ed607d17472c1c2e22d0c6cc65b5a2340c8/ph-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "87907df96220149186b395610e1ba1a5", "sha256": "42e1a3c1bc8bf31056f1cef48ec5e139bcf579a5e0e500cdbc04288e34877376"}, "downloads": -1, "filename": "ph-0.0.14.tar.gz", "has_sig": false, "md5_digest": "87907df96220149186b395610e1ba1a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23306, "upload_time": "2020-03-10T13:02:03", "upload_time_iso_8601": "2020-03-10T13:02:03.465849Z", "url": "https://files.pythonhosted.org/packages/56/c1/f7403cd7105dbd441040a309b747ef8520647e786afa9413c1566e7c622f/ph-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "79a75378abacd8245d210caacd62d48a", "sha256": "7281dfab96d27de181a9e861b73342460322cf1f3da867d9b821bb6d26057788"}, "downloads": -1, "filename": "ph-0.0.15.tar.gz", "has_sig": false, "md5_digest": "79a75378abacd8245d210caacd62d48a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23649, "upload_time": "2020-03-10T13:13:06", "upload_time_iso_8601": "2020-03-10T13:13:06.328383Z", "url": "https://files.pythonhosted.org/packages/4a/1c/bbe0ead9bd6c3b4874af165176f00dee838e67987569f95ece25245ac2ba/ph-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "873c66aa7b2cf92c649778ada4a4e13d", "sha256": "1ae36f4adc25c853cc6f042140a376557e148ca3f707677e4d253b995d7b241e"}, "downloads": -1, "filename": "ph-0.0.16.tar.gz", "has_sig": false, "md5_digest": "873c66aa7b2cf92c649778ada4a4e13d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24023, "upload_time": "2020-03-10T13:48:10", "upload_time_iso_8601": "2020-03-10T13:48:10.149973Z", "url": "https://files.pythonhosted.org/packages/64/02/4e1df87d0dd4bf19964bdbafb1fc22eb16c246fb525bbd36d3877e314106/ph-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "4b9472d469659ce4443c6d43bda869e7", "sha256": "2444c8062448656304ca269f2c2ec383ab73c0c31413a63941394fc95ae65b6a"}, "downloads": -1, "filename": "ph-0.0.17.tar.gz", "has_sig": false, "md5_digest": "4b9472d469659ce4443c6d43bda869e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24948, "upload_time": "2020-03-10T13:56:35", "upload_time_iso_8601": "2020-03-10T13:56:35.941098Z", "url": "https://files.pythonhosted.org/packages/90/55/c117f9dc495f9bb5402ba6fdbbb0f0eddb5a619793cce51f4501f3e3fc8a/ph-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "ee51655ef1a4d1391c62918b802e6148", "sha256": "3fe6d60e9204bd36f8670525fc18cd7f9cf315996c44dfa1c23bd80b0ddf31cc"}, "downloads": -1, "filename": "ph-0.0.18.tar.gz", "has_sig": false, "md5_digest": "ee51655ef1a4d1391c62918b802e6148", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25447, "upload_time": "2020-03-10T15:11:54", "upload_time_iso_8601": "2020-03-10T15:11:54.680022Z", "url": "https://files.pythonhosted.org/packages/59/0f/6e893f660d28048d71e768bbfce5508f4c2e025a7612bcb51901e243ed5b/ph-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "8784b7337df5e8df94c03b1eb2367b94", "sha256": "6015aa45a6b8ec87066b69116a2c04db049b1b9f3129d694c3b7e6e03e032903"}, "downloads": -1, "filename": "ph-0.0.19.tar.gz", "has_sig": false, "md5_digest": "8784b7337df5e8df94c03b1eb2367b94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25547, "upload_time": "2020-03-10T15:34:59", "upload_time_iso_8601": "2020-03-10T15:34:59.923396Z", "url": "https://files.pythonhosted.org/packages/cd/ed/01a188d05e9876ead9cdd87ebb46fa71f955922ec0f63073219853b62d82/ph-0.0.19.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "17fcebc48db43390fe2a19c5d9afd720", "sha256": "31af2b50f6677f062f31fe7673ca04930b842b102a1c8b480af1eb4eea1b553c"}, "downloads": -1, "filename": "ph-0.0.2.tar.gz", "has_sig": false, "md5_digest": "17fcebc48db43390fe2a19c5d9afd720", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17138, "upload_time": "2020-03-09T17:40:48", "upload_time_iso_8601": "2020-03-09T17:40:48.101635Z", "url": "https://files.pythonhosted.org/packages/14/0e/807af31df0de1982094be58dd20b3cf8bed9dbc9c88821e0c0c071cb271e/ph-0.0.2.tar.gz", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "01188f2d0b21668b6a97cb57892e04b5", "sha256": "25df530074a8c2c640dd1e9f6aaeed0121c4d55c73d469856e5f27cdd669edf7"}, "downloads": -1, "filename": "ph-0.0.20.tar.gz", "has_sig": false, "md5_digest": "01188f2d0b21668b6a97cb57892e04b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26175, "upload_time": "2020-03-10T17:31:16", "upload_time_iso_8601": "2020-03-10T17:31:16.082375Z", "url": "https://files.pythonhosted.org/packages/1e/01/aca02a51ad228066d2f02a6620696194f486664e631582d2fa17fd6cfb4e/ph-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "a6c3bc843cde79d4376308816427284b", "sha256": "4ace62b065853fac4cb425f946842940d9a514ae5ab3fdf47c23dd18ebcdd55c"}, "downloads": -1, "filename": "ph-0.0.21.tar.gz", "has_sig": false, "md5_digest": "a6c3bc843cde79d4376308816427284b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26686, "upload_time": "2020-03-10T18:04:33", "upload_time_iso_8601": "2020-03-10T18:04:33.329460Z", "url": "https://files.pythonhosted.org/packages/b8/04/b35700a08df0caf1acbb0a04aada094778e9e6ac214c4701662e3e86736b/ph-0.0.21.tar.gz", "yanked": false}], "0.0.22": [{"comment_text": "", "digests": {"md5": "53dbf8ff2518f807e108adad5a815cde", "sha256": "84a5c71551fe408be958607359556c474d5f9c31e866252b23284bc96b14baea"}, "downloads": -1, "filename": "ph-0.0.22.tar.gz", "has_sig": false, "md5_digest": "53dbf8ff2518f807e108adad5a815cde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27640, "upload_time": "2020-03-10T22:10:00", "upload_time_iso_8601": "2020-03-10T22:10:00.423057Z", "url": "https://files.pythonhosted.org/packages/37/a8/e38fcb33088fd16462c5a068c64e0691b11b40ca5ae1271e3561e213c7bc/ph-0.0.22.tar.gz", "yanked": false}], "0.0.23": [{"comment_text": "", "digests": {"md5": "b3a3c2b54862016a687bcd0096a25cbc", "sha256": "f9c53926d3751910badd69b62b841554957c9a0ccc29ee7f19c7d6b1cdae746e"}, "downloads": -1, "filename": "ph-0.0.23.tar.gz", "has_sig": false, "md5_digest": "b3a3c2b54862016a687bcd0096a25cbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28829, "upload_time": "2020-03-11T10:31:31", "upload_time_iso_8601": "2020-03-11T10:31:31.596968Z", "url": "https://files.pythonhosted.org/packages/2e/12/b5bca6bb1f23cf39772ef9fdb46debb2c18a020da953f1efa02420f92fd3/ph-0.0.23.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "4e0155eb088c9c8139c9214ebd6ac06e", "sha256": "a01b0beb316072d7cd4619dff6717065cdf8fcf9ea39862a0a7a1c6893f35cae"}, "downloads": -1, "filename": "ph-0.0.24.tar.gz", "has_sig": false, "md5_digest": "4e0155eb088c9c8139c9214ebd6ac06e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30106, "upload_time": "2020-03-12T16:34:19", "upload_time_iso_8601": "2020-03-12T16:34:19.135898Z", "url": "https://files.pythonhosted.org/packages/fb/5d/dc499463875ce3d7411d1c191372f80f14f661dbbfd36637501d7f22e21a/ph-0.0.24.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "aec6abc68ab51d0e1fe4b35118f5f1ba", "sha256": "1d1496920900120e534bfd5e6302ccbb2deec164e88d2317658bf9249edb1304"}, "downloads": -1, "filename": "ph-0.0.25.tar.gz", "has_sig": false, "md5_digest": "aec6abc68ab51d0e1fe4b35118f5f1ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30972, "upload_time": "2020-03-12T20:16:37", "upload_time_iso_8601": "2020-03-12T20:16:37.508927Z", "url": "https://files.pythonhosted.org/packages/c5/ce/cb901df67617b328c257361f48d6d51e6f445288dfca7be0fafc2b6ba5cc/ph-0.0.25.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "d84a0d57d4e8903a0ec5600cc758c929", "sha256": "cc2021fbad9464763adaa3a358e2568a069695a714f14b3084aa63908b6814dd"}, "downloads": -1, "filename": "ph-0.0.26.tar.gz", "has_sig": false, "md5_digest": "d84a0d57d4e8903a0ec5600cc758c929", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31642, "upload_time": "2020-03-14T18:22:16", "upload_time_iso_8601": "2020-03-14T18:22:16.953464Z", "url": "https://files.pythonhosted.org/packages/d2/69/2b4d75178250317eff34eb581a301960e0c97b1f596353be9bb407b5ac29/ph-0.0.26.tar.gz", "yanked": false}], "0.0.27": [{"comment_text": "", "digests": {"md5": "1c104de123a8c8d1ad7f6d08e398bf3b", "sha256": "00ece5ee9f3d0e3d10614f369521845bfcb137b9f2a8826f2b8921f2592ae763"}, "downloads": -1, "filename": "ph-0.0.27.tar.gz", "has_sig": false, "md5_digest": "1c104de123a8c8d1ad7f6d08e398bf3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32423, "upload_time": "2020-03-14T19:36:49", "upload_time_iso_8601": "2020-03-14T19:36:49.233889Z", "url": "https://files.pythonhosted.org/packages/0a/ef/447f270b68e6d4cbc0dbc22c695176e2958d958261e3f62831d6ac2a7422/ph-0.0.27.tar.gz", "yanked": false}], "0.0.28": [{"comment_text": "", "digests": {"md5": "03d124945ee1177f7ed8eedee308d085", "sha256": "d51279db80e2eabf8dd700ee2eea033a43a2125caea26b7d09d3d0f1abaa5a20"}, "downloads": -1, "filename": "ph-0.0.28.tar.gz", "has_sig": false, "md5_digest": "03d124945ee1177f7ed8eedee308d085", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32680, "upload_time": "2020-03-15T11:04:00", "upload_time_iso_8601": "2020-03-15T11:04:00.572738Z", "url": "https://files.pythonhosted.org/packages/34/db/a7cb387eea257860eab26b7337b3ec11fafed3e1cae42baa130b20f4aac1/ph-0.0.28.tar.gz", "yanked": false}], "0.0.29": [{"comment_text": "", "digests": {"md5": "213f8e0fcf08b64c53bff460685e6a9c", "sha256": "92d022f610376efa0ffd01d1c298c0c2089a44f328ebd1b897b1a912b7f7a886"}, "downloads": -1, "filename": "ph-0.0.29.tar.gz", "has_sig": false, "md5_digest": "213f8e0fcf08b64c53bff460685e6a9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32771, "upload_time": "2020-03-15T11:16:56", "upload_time_iso_8601": "2020-03-15T11:16:56.073105Z", "url": "https://files.pythonhosted.org/packages/26/bf/59b1332ccbf477b62bb6bc2c5985991363a8476a1ffb0a39dcc0757acf2a/ph-0.0.29.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "77d1540b0c052a2376c545d324a1c47c", "sha256": "32b1f3832537221b5c43d667572cd3a0e48b216b818114bdeb121c9f600e0f60"}, "downloads": -1, "filename": "ph-0.0.3.tar.gz", "has_sig": false, "md5_digest": "77d1540b0c052a2376c545d324a1c47c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17609, "upload_time": "2020-03-09T17:47:31", "upload_time_iso_8601": "2020-03-09T17:47:31.444517Z", "url": "https://files.pythonhosted.org/packages/49/9c/1afcedd22c74551572ec815459e2870db678c862c74a5198016b9ebc739a/ph-0.0.3.tar.gz", "yanked": false}], "0.0.30": [{"comment_text": "", "digests": {"md5": "d05d27cd32a2b265b5d3c5ffe8049e71", "sha256": "2fdace87a94645feebb0e2c4599de95cecf2f37c746e7be3c55e4a273719b1d5"}, "downloads": -1, "filename": "ph-0.0.30.tar.gz", "has_sig": false, "md5_digest": "d05d27cd32a2b265b5d3c5ffe8049e71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34086, "upload_time": "2020-03-15T14:17:52", "upload_time_iso_8601": "2020-03-15T14:17:52.880197Z", "url": "https://files.pythonhosted.org/packages/19/2f/2ebea5da2ade444304481d1721e73a9074421aaf47319486e090ba14241c/ph-0.0.30.tar.gz", "yanked": false}], "0.0.31": [{"comment_text": "", "digests": {"md5": "6576f2a953f9c9903c317a947fd62a9c", "sha256": "52f7d8009ebc2e99a97ff309a8a42a92704a7233037d0e18a545690bb10fa854"}, "downloads": -1, "filename": "ph-0.0.31.tar.gz", "has_sig": false, "md5_digest": "6576f2a953f9c9903c317a947fd62a9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34315, "upload_time": "2020-03-15T17:38:42", "upload_time_iso_8601": "2020-03-15T17:38:42.896747Z", "url": "https://files.pythonhosted.org/packages/e2/56/63353ae3b54161f0880229bf7b4816d6bc23fa261bfeb2a061ab30521723/ph-0.0.31.tar.gz", "yanked": false}], "0.0.32": [{"comment_text": "", "digests": {"md5": "1f9aed54463bdc48b14c681f642e3b59", "sha256": "ff5f9249a913e75fdcf046cc20cacc7bf587bfa58bc923447104aca6290d7dd7"}, "downloads": -1, "filename": "ph-0.0.32.tar.gz", "has_sig": false, "md5_digest": "1f9aed54463bdc48b14c681f642e3b59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34322, "upload_time": "2020-03-15T17:46:38", "upload_time_iso_8601": "2020-03-15T17:46:38.991741Z", "url": "https://files.pythonhosted.org/packages/6b/f0/ea40513c4b218376fd4e80f7c5bbe547d63bd559123156bd8ec7df67be0b/ph-0.0.32.tar.gz", "yanked": false}], "0.0.33": [{"comment_text": "", "digests": {"md5": "f03f879da015bcdd438921a756c5410e", "sha256": "7ac116559b4370c1cf5c712ae8a1d0456b56d8d0afe977982dd78385d1e69701"}, "downloads": -1, "filename": "ph-0.0.33.tar.gz", "has_sig": false, "md5_digest": "f03f879da015bcdd438921a756c5410e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34716, "upload_time": "2020-03-16T10:36:21", "upload_time_iso_8601": "2020-03-16T10:36:21.387287Z", "url": "https://files.pythonhosted.org/packages/a8/ef/8d6a4d37eef300a8df45bb997d4f9a7c9d98152f873c92ac1248f1dfcb04/ph-0.0.33.tar.gz", "yanked": false}], "0.0.34": [{"comment_text": "", "digests": {"md5": "2ef95e8f949cee6aecd1b58af57a28d3", "sha256": "610fc1dd9bf609b7804d7b02e815c33b518bf0ff79d845a211f2de6eec5460e9"}, "downloads": -1, "filename": "ph-0.0.34.tar.gz", "has_sig": false, "md5_digest": "2ef95e8f949cee6aecd1b58af57a28d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34969, "upload_time": "2020-03-17T11:18:49", "upload_time_iso_8601": "2020-03-17T11:18:49.227100Z", "url": "https://files.pythonhosted.org/packages/9f/9d/bea4c5edc0b73dab6c437fbf1fe9a99be31816289ad175cb6d862656f1c0/ph-0.0.34.tar.gz", "yanked": false}], "0.0.35": [{"comment_text": "", "digests": {"md5": "27e1d534daa6d93b455581f09d544741", "sha256": "73a4f7fbefb1a5441c8308b5e62b85cc0100b180011e2540dd16f6bb004645d2"}, "downloads": -1, "filename": "ph-0.0.35.tar.gz", "has_sig": false, "md5_digest": "27e1d534daa6d93b455581f09d544741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38621, "upload_time": "2020-03-17T16:08:05", "upload_time_iso_8601": "2020-03-17T16:08:05.850013Z", "url": "https://files.pythonhosted.org/packages/94/62/7b5250da31cbf3d2dcaeb656f4082d6ce3254d06338562449c7b2f5eaffe/ph-0.0.35.tar.gz", "yanked": false}], "0.0.36": [{"comment_text": "", "digests": {"md5": "5b97a61725b572cb7a3c1c57233f78b3", "sha256": "8b45599980aef7fb8ac5f23594c31fb1a8a82e81d9cafc71dc52890ab26f5f8a"}, "downloads": -1, "filename": "ph-0.0.36.tar.gz", "has_sig": false, "md5_digest": "5b97a61725b572cb7a3c1c57233f78b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38843, "upload_time": "2020-03-17T16:35:01", "upload_time_iso_8601": "2020-03-17T16:35:01.363074Z", "url": "https://files.pythonhosted.org/packages/96/ad/e201bd25dfbc99d31b7f56b73faa3e7c9fe241e12f2d911dabf9ed11d7d7/ph-0.0.36.tar.gz", "yanked": false}], "0.0.37": [{"comment_text": "", "digests": {"md5": "95d7a65576495266e76e94ba1276e789", "sha256": "b31e07cd863655bf49deb84f25259b5da6d62874e64a45dcc4cbfe9be236edf4"}, "downloads": -1, "filename": "ph-0.0.37.tar.gz", "has_sig": false, "md5_digest": "95d7a65576495266e76e94ba1276e789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39151, "upload_time": "2020-03-17T22:49:48", "upload_time_iso_8601": "2020-03-17T22:49:48.467527Z", "url": "https://files.pythonhosted.org/packages/52/49/089cdc029395e986e44d1d8c9618933264776a88b83c89a75c2b96121207/ph-0.0.37.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4a3ded92ce5a1f3789070c46ff55d035", "sha256": "85f76b68c86c2d41160737c0a7db5ba822f23c2a8b2327f8f18b6d1f86572e87"}, "downloads": -1, "filename": "ph-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4a3ded92ce5a1f3789070c46ff55d035", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17616, "upload_time": "2020-03-09T19:04:40", "upload_time_iso_8601": "2020-03-09T19:04:40.968861Z", "url": "https://files.pythonhosted.org/packages/ea/a6/cb1c5fed09cbe469516d63663a3247c54ba5dd88759f3cb7f109da605246/ph-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f48eb917e3b870170c6fe271813d3c18", "sha256": "9fff47010fa5821c2eb22356b3e889a2cecfd067517d00b38fd1ab2454696085"}, "downloads": -1, "filename": "ph-0.0.5.tar.gz", "has_sig": false, "md5_digest": "f48eb917e3b870170c6fe271813d3c18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17650, "upload_time": "2020-03-09T19:15:52", "upload_time_iso_8601": "2020-03-09T19:15:52.529473Z", "url": "https://files.pythonhosted.org/packages/d3/07/af22feba5bbc2438343d9b3a0fb5c13979cc36ea1e7e5683702c0a323b69/ph-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "a831ad9229ddf7afcc1441096f638a46", "sha256": "6d608c3b590957d49fe80e16b9ab11ad6bc0fc8cfd5e58c44170498e38940866"}, "downloads": -1, "filename": "ph-0.0.6.tar.gz", "has_sig": false, "md5_digest": "a831ad9229ddf7afcc1441096f638a46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18836, "upload_time": "2020-03-09T20:53:32", "upload_time_iso_8601": "2020-03-09T20:53:32.825972Z", "url": "https://files.pythonhosted.org/packages/53/c7/0eb0cb81912a8aef001248cc4c9b77477ea04862650621eb6fd14adccac8/ph-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "a0d9b7abef24bffed7455370a8d931d2", "sha256": "2f6cd76ee0198edababebca3d84755ec87ff5c9eef7edba59ea66c5c3a05f063"}, "downloads": -1, "filename": "ph-0.0.7.tar.gz", "has_sig": false, "md5_digest": "a0d9b7abef24bffed7455370a8d931d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18877, "upload_time": "2020-03-09T21:21:39", "upload_time_iso_8601": "2020-03-09T21:21:39.582777Z", "url": "https://files.pythonhosted.org/packages/f4/b1/4af23676ff9c472917f8e306b55a6357f3482bc9b1942619705be5f46d02/ph-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "8aab810d8cde272b9bf1bca50a29a78a", "sha256": "38f7cc8ef9afcf8197eb579262423940a176839d36d3d0d4be8ff2107ce2d817"}, "downloads": -1, "filename": "ph-0.0.8.tar.gz", "has_sig": false, "md5_digest": "8aab810d8cde272b9bf1bca50a29a78a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19232, "upload_time": "2020-03-09T21:27:40", "upload_time_iso_8601": "2020-03-09T21:27:40.350436Z", "url": "https://files.pythonhosted.org/packages/7a/e0/7c5435d031db29933355f11606cc0b3c97d258beac1e23a97e4ce1d1ae85/ph-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "69e017f48fcfa5b24671a85320bead9e", "sha256": "0ad07ec0b244b38ee224ed3d7ea266949ce0585c65d1eecaae1cafdbb1b4cd1c"}, "downloads": -1, "filename": "ph-0.0.9.tar.gz", "has_sig": false, "md5_digest": "69e017f48fcfa5b24671a85320bead9e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21963, "upload_time": "2020-03-10T11:04:30", "upload_time_iso_8601": "2020-03-10T11:04:30.785337Z", "url": "https://files.pythonhosted.org/packages/a4/52/84b6e4c0dd0c15870de044c45da9b3c83c82dcee0dabb2406a1b8c2f5d0e/ph-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "68b773acd82c3978d512dce361ea795f", "sha256": "ebb0bb3fa098a4e5ca50e2534cfe6e550389d6543519ae6351e4d2500772fe3c"}, "downloads": -1, "filename": "ph-0.1.0.tar.gz", "has_sig": false, "md5_digest": "68b773acd82c3978d512dce361ea795f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40082, "upload_time": "2020-03-27T08:38:02", "upload_time_iso_8601": "2020-03-27T08:38:02.269502Z", "url": "https://files.pythonhosted.org/packages/55/04/57b0462789f44d1bb56c9ef165b9ecb7af6e3708b4c9ae15d22c6bc029ce/ph-0.1.0.tar.gz", "yanked": false}], "0.1.0b1": [{"comment_text": "", "digests": {"md5": "712def948c1cbe4ed9ddaec67dfb40f6", "sha256": "a68736c041475d3eeff2cf15c88b3dda72fe5e2fbd9af9aafc922cd9c429953d"}, "downloads": -1, "filename": "ph-0.1.0b1.tar.gz", "has_sig": false, "md5_digest": "712def948c1cbe4ed9ddaec67dfb40f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 39803, "upload_time": "2020-03-22T13:26:55", "upload_time_iso_8601": "2020-03-22T13:26:55.037514Z", "url": "https://files.pythonhosted.org/packages/6d/45/46de6b4ca1eacf6a46fa49829f3defb6bb9c28630ea0e9b41742af1638fa/ph-0.1.0b1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fe93b36835ffe657e3e2789a82bc0106", "sha256": "388190ecd407025fb3d598ae9aaf794430f3b91399c7b39006092e7d464d6eb8"}, "downloads": -1, "filename": "ph-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fe93b36835ffe657e3e2789a82bc0106", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40196, "upload_time": "2020-03-31T13:18:00", "upload_time_iso_8601": "2020-03-31T13:18:00.769780Z", "url": "https://files.pythonhosted.org/packages/10/cb/fe3255142a8f62bcee5983f28606d814583443a03a324f53392673020779/ph-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b83e2260bc2aae9443cdb7cee488c94a", "sha256": "467119d644be62eeeb395e3744adbdcea608655cb953b8b79e67dd211a1f0bf2"}, "downloads": -1, "filename": "ph-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b83e2260bc2aae9443cdb7cee488c94a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41647, "upload_time": "2020-04-02T14:22:18", "upload_time_iso_8601": "2020-04-02T14:22:18.894436Z", "url": "https://files.pythonhosted.org/packages/c0/eb/68b8351b15ed58998f599d387f28ca550bdbc32981b35f73b44e64c6610c/ph-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "1b818608a679b0e03ed2d65783af059f", "sha256": "7bf77502f219a8a1eb55ac10f3a38287c5fd1b4e1626f8ec440bb6ee23f99db1"}, "downloads": -1, "filename": "ph-0.1.3.tar.gz", "has_sig": false, "md5_digest": "1b818608a679b0e03ed2d65783af059f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42261, "upload_time": "2020-04-02T18:29:09", "upload_time_iso_8601": "2020-04-02T18:29:09.609405Z", "url": "https://files.pythonhosted.org/packages/1c/21/a913793870c56de4a339fe7e5a6eae93e98c37df8b745251b213a14ebccf/ph-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "20bd84e521c2c593c22eba4d45ce5eb1", "sha256": "8a54ab0558478e9469de0df8c32942748e621f51da9d706ae0779855d14d9348"}, "downloads": -1, "filename": "ph-0.1.4.tar.gz", "has_sig": false, "md5_digest": "20bd84e521c2c593c22eba4d45ce5eb1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42238, "upload_time": "2020-04-02T18:50:09", "upload_time_iso_8601": "2020-04-02T18:50:09.685761Z", "url": "https://files.pythonhosted.org/packages/4b/f8/8db9bd979ed32992469ff1312dcd755351285bd6689957c1b74dc8e68cc5/ph-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "e4c64ed6a2c77e777058f9c0450315ff", "sha256": "c3b2c7f73a132e9125edd4419de54d4f4fa1df12dcf011ca7a23f0cf1b4b6f30"}, "downloads": -1, "filename": "ph-0.1.5.tar.gz", "has_sig": false, "md5_digest": "e4c64ed6a2c77e777058f9c0450315ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42191, "upload_time": "2020-04-02T19:30:41", "upload_time_iso_8601": "2020-04-02T19:30:41.532541Z", "url": "https://files.pythonhosted.org/packages/7a/63/e9f1ed2a9250dffd101b71a95509ca348182c6a2a1f8a674905187e812ee/ph-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "7257ccb032c4a231314b819f82dfb43f", "sha256": "2648491176ff23b79bb5c3c3bc6e292d6f82d50ff9041720c1e0eaca3ef1b16c"}, "downloads": -1, "filename": "ph-0.1.6.tar.gz", "has_sig": false, "md5_digest": "7257ccb032c4a231314b819f82dfb43f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42617, "upload_time": "2020-04-05T10:52:57", "upload_time_iso_8601": "2020-04-05T10:52:57.813516Z", "url": "https://files.pythonhosted.org/packages/8b/6c/c4b2485472fecdb069d77df7cca1f36a3a152d79d4d488a3ccbf9eea35ec/ph-0.1.6.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "785953f5d07683a482d3f0ee700cfd91", "sha256": "9fecd58f3eee3e45e5637be4822820a97c7e0149cafbdbe80425fe8db3c65bfe"}, "downloads": -1, "filename": "ph-0.2.0.tar.gz", "has_sig": false, "md5_digest": "785953f5d07683a482d3f0ee700cfd91", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42565, "upload_time": "2020-04-05T21:01:52", "upload_time_iso_8601": "2020-04-05T21:01:52.169932Z", "url": "https://files.pythonhosted.org/packages/b2/29/b0ae55bd366bbe648fbb3ce832a370fae51b4ae8b7e1aebc1c9c6bd09a96/ph-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "488f289a0d026d8d67b9d82967fc8ccb", "sha256": "f6d26fdd9df45b6a1349ef1ad6c642967053748a65229d7e62e00de750db8213"}, "downloads": -1, "filename": "ph-0.2.1.tar.gz", "has_sig": false, "md5_digest": "488f289a0d026d8d67b9d82967fc8ccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42560, "upload_time": "2020-04-05T21:20:31", "upload_time_iso_8601": "2020-04-05T21:20:31.327283Z", "url": "https://files.pythonhosted.org/packages/43/d4/2fd237f01086e992880f9c75ba9d1c936b91734076b9716486bce69bd8dd/ph-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "10c03582d4329147985a65dd1b4c7751", "sha256": "8a9d7bd3baae7e82d02fcb6f3b1ca03df3e104abce413d5523ce92015158df38"}, "downloads": -1, "filename": "ph-0.2.2.tar.gz", "has_sig": false, "md5_digest": "10c03582d4329147985a65dd1b4c7751", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42897, "upload_time": "2020-04-06T16:39:07", "upload_time_iso_8601": "2020-04-06T16:39:07.413720Z", "url": "https://files.pythonhosted.org/packages/23/1c/d7243de7612b8605ac7133d656e33f0acecd84247b3ecef6b110b2404893/ph-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d2d396082ffa6e891f26e3a99fdc9cc8", "sha256": "1b8b2d0cb614409f932459dbd842384c958de85c3434584c5902c43e185ea047"}, "downloads": -1, "filename": "ph-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d2d396082ffa6e891f26e3a99fdc9cc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45959, "upload_time": "2020-04-11T10:02:10", "upload_time_iso_8601": "2020-04-11T10:02:10.738701Z", "url": "https://files.pythonhosted.org/packages/6c/81/97d6ccfa433c3cc14199b46510426f0c66b1c0d4ebb000cac33a6d10a8f6/ph-0.2.3.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5dbe28141cb03313f907af8a1807206b", "sha256": "76dd328ca886024f22530b7a525e17cdd078f16d8007203629c00879b4f7a3b1"}, "downloads": -1, "filename": "ph-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5dbe28141cb03313f907af8a1807206b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46376, "upload_time": "2020-04-11T16:15:51", "upload_time_iso_8601": "2020-04-11T16:15:51.773695Z", "url": "https://files.pythonhosted.org/packages/ef/fc/41dbf1b785a207a97d283403e90a86908f8ddd62d1737a458a9d52adb7a8/ph-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2758072c27adbe7536bd73f2145768c9", "sha256": "b15cae2b0debe1b86d10810da6ba4b670bb8bc8b1fd7b1bb99c2b01d98e08329"}, "downloads": -1, "filename": "ph-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2758072c27adbe7536bd73f2145768c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47315, "upload_time": "2020-04-11T16:56:41", "upload_time_iso_8601": "2020-04-11T16:56:41.416854Z", "url": "https://files.pythonhosted.org/packages/9a/1a/f99c55545a4740509794b689959ba01afb0b11c6618f96e9586c1a89e28b/ph-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ec77f6b770b65340afb345c6610a4c61", "sha256": "9f9a59f263bb2d928e95aabb486757f83c875bf8a8727222bfe33e70767363c6"}, "downloads": -1, "filename": "ph-0.3.2.tar.gz", "has_sig": false, "md5_digest": "ec77f6b770b65340afb345c6610a4c61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49686, "upload_time": "2020-04-14T21:15:40", "upload_time_iso_8601": "2020-04-14T21:15:40.856989Z", "url": "https://files.pythonhosted.org/packages/f6/7a/a1b29ed1c168878182a18160195a6113c6fa71e5022385fd695a983d7187/ph-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "0cbae1dec54e0dbb1edb797abed0dd60", "sha256": "1f73fab395640b6863fbd2bf37fda50e5768420fa199c5cd814ce4ca8854cd53"}, "downloads": -1, "filename": "ph-0.3.3.tar.gz", "has_sig": false, "md5_digest": "0cbae1dec54e0dbb1edb797abed0dd60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49707, "upload_time": "2020-04-14T21:21:19", "upload_time_iso_8601": "2020-04-14T21:21:19.284581Z", "url": "https://files.pythonhosted.org/packages/14/f6/fbfe861792716bf34aff4e9138fa4d924026d5a2372299d2a8b153c2b181/ph-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "1737ce290cf896f450f494d68a055568", "sha256": "d7236a7f9271c8f9998392f594856a3f80a3ce12faecb17b01d594ea9902b34f"}, "downloads": -1, "filename": "ph-0.3.4.tar.gz", "has_sig": false, "md5_digest": "1737ce290cf896f450f494d68a055568", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51568, "upload_time": "2020-04-21T11:13:07", "upload_time_iso_8601": "2020-04-21T11:13:07.840784Z", "url": "https://files.pythonhosted.org/packages/bd/36/90eb0ead8ee8f4d356ced2db6ee8a2653862d4570f6034af4fb27b48b46f/ph-0.3.4.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "0921f9befe245ab00b4864b21c589732", "sha256": "44b82777bc93b8db6895e6a9225f614a96cb0d33d5928ed1aed7b1b520d3455e"}, "downloads": -1, "filename": "ph-0.4.0.tar.gz", "has_sig": false, "md5_digest": "0921f9befe245ab00b4864b21c589732", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51609, "upload_time": "2020-04-28T07:15:59", "upload_time_iso_8601": "2020-04-28T07:15:59.646745Z", "url": "https://files.pythonhosted.org/packages/36/ab/200ee60d7ed1fa7544774aa5ee838d5f979e06bc742dd7d532acd4b5bde2/ph-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "92c07c1fe4532c447e6472c5ea86d3b5", "sha256": "74ab25795cf81a89951cafe94e874dbed89511ee5e52ab3578a63678f27b14ba"}, "downloads": -1, "filename": "ph-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "92c07c1fe4532c447e6472c5ea86d3b5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39216, "upload_time": "2020-05-01T20:12:02", "upload_time_iso_8601": "2020-05-01T20:12:02.593347Z", "url": "https://files.pythonhosted.org/packages/e3/b2/d877e0c97219520f5bc565ba98690b31ed94c3ff9f655c79eb1b28c6189e/ph-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c95999603eced7788653f69faf8bc0c8", "sha256": "dc3372dfe26efedf9a08faed1ff4f081fdd78b1d1a8cad7652824b73f7c8464c"}, "downloads": -1, "filename": "ph-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c95999603eced7788653f69faf8bc0c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 52521, "upload_time": "2020-05-01T20:12:05", "upload_time_iso_8601": "2020-05-01T20:12:05.259542Z", "url": "https://files.pythonhosted.org/packages/74/09/6547ba9bbdaabd8b9c39841394d76166ac2d30aa408e548ef16e2b18e120/ph-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "4a56390bebf71bf1b14d25191fe62c72", "sha256": "c954b4893d1330c205b94bcfef78b6e82fcc5a420ec9ba737029a2c169e110b4"}, "downloads": -1, "filename": "ph-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4a56390bebf71bf1b14d25191fe62c72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55034, "upload_time": "2020-05-04T19:03:01", "upload_time_iso_8601": "2020-05-04T19:03:01.019087Z", "url": "https://files.pythonhosted.org/packages/ee/0a/b291117d7fb4a203a519e0112ab50bda4a931539db5707f415dac29f0bc1/ph-0.4.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a56390bebf71bf1b14d25191fe62c72", "sha256": "c954b4893d1330c205b94bcfef78b6e82fcc5a420ec9ba737029a2c169e110b4"}, "downloads": -1, "filename": "ph-0.4.2.tar.gz", "has_sig": false, "md5_digest": "4a56390bebf71bf1b14d25191fe62c72", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55034, "upload_time": "2020-05-04T19:03:01", "upload_time_iso_8601": "2020-05-04T19:03:01.019087Z", "url": "https://files.pythonhosted.org/packages/ee/0a/b291117d7fb4a203a519e0112ab50bda4a931539db5707f415dac29f0bc1/ph-0.4.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:39 2020"}