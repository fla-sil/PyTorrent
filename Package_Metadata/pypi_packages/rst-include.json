{"info": {"author": "Robert Nowotny", "author_email": "rnowotny1966@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "rst_include\n===========\n\n|Pypi Status| |pyversion| |license| |maintenance|\n\n|Build Status| |Codecov Status| |Better Code| |code climate| |snyk security|\n\n.. |license| image:: https://img.shields.io/github/license/webcomics/pywine.svg\n   :target: http://en.wikipedia.org/wiki/MIT_License\n.. |maintenance| image:: https://img.shields.io/maintenance/yes/2019.svg\n.. |Build Status| image:: https://travis-ci.org/bitranox/rst_include.svg?branch=master\n   :target: https://travis-ci.org/bitranox/rst_include\n.. for the pypi status link note the dashes, not the underscore !\n.. |Pypi Status| image:: https://badge.fury.io/py/rst-include.svg\n   :target: https://badge.fury.io/py/rst_include\n.. |Codecov Status| image:: https://codecov.io/gh/bitranox/rst_include/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/bitranox/rst_include\n.. |Better Code| image:: https://bettercodehub.com/edge/badge/bitranox/rst_include?branch=master\n   :target: https://bettercodehub.com/results/bitranox/rst_include\n.. |snyk security| image:: https://snyk.io/test/github/bitranox/rst_include/badge.svg\n   :target: https://snyk.io/test/github/bitranox/rst_include\n.. |code climate| image:: https://api.codeclimate.com/v1/badges/ff3f414903627e5cfc35/maintainability\n   :target: https://codeclimate.com/github/bitranox/rst_include/maintainability\n   :alt: Maintainability\n.. |pyversion| image:: https://img.shields.io/badge/python-%3E%3D3.6-brightgreen.svg\n   :target: https://badge.fury.io/py/rst_include\n   :alt: Python Version\n\nsince You can not include files into RST files on github and PyPi, You can replace those imports with this software.\n\nThat means You can locally write Your RST documents (for instance with pycharm) and use there\nthe .. include: option to include other RST Files or code snippets into Your Document.\nAfterwards You can run this software to create a monolithic README.rst that can be viewed on Github or Pypi\n\nYou might also include Text/Code from Jupyter Notebooks (sorry, no pictures at the moment, but it is not very hard to do that)\n\nThis has many advantages like :\n\n- dont repeat Yourself, create standard blocks to include into Your documentation\n- include tested code snippets from Your code files into Your documentation, to avoid untested or outdated documentation\n- include other RST Files\n- very simple usage, throwing exit codes to detect errors on documentation at travis build-time\n- commandline or programmatic interface, You can even use it in the travis.yml\n- commandline interface supporting shellscript, cmd, pipes, config-files\n\nThis README was also created with rst_include, You might look at ./docs/README_template.rst ,\nbuild_docs.sh, build_docs.cmd and build_docs.py as examples. (they all do the same, just different versions)\n\nThe travis.yml builds the Documentation on every run, so You can be sure that there are no Errors.\nrst_include does only work on python > 3.6\n\n`100% code coverage <https://codecov.io/gh/bitranox/rst_include>`_, mypy static type checking, tested under `Linux, OsX, Windows and Wine <https://travis-ci.org/bitranox/rst_include>`_, automatic daily builds  and monitoring\n\n----\n\n- `Installation and Upgrade`_\n- `Basic Usage`_\n- Examples\n    - `Example Build Script Python`_\n    - `Example Build Script DOS Batch`_\n    - `Example Build Script Shellscript`_\n    - `RST Includes Examples`_\n    - `simple code include`_\n    - `text or RST file include`_\n    - `include jupyter notebooks`_\n- `RST Include Parameters`_\n- `Requirements`_\n- `Acknowledgements`_\n- `Contribute`_\n- `Report Issues <https://github.com/bitranox/rst_include/blob/master/ISSUE_TEMPLATE.md>`_\n- `Pull Request <https://github.com/bitranox/rst_include/blob/master/PULL_REQUEST_TEMPLATE.md>`_\n- `Code of Conduct <https://github.com/bitranox/rst_include/blob/master/CODE_OF_CONDUCT.md>`_\n- `License`_\n- `Changelog`_\n\n-----------------------------------------------------------------\n\nInstallation and Upgrade\n------------------------\n\nFrom source code:\n\n.. code-block:: bash\n\n    # normal install\n    python setup.py install\n    # test without installing\n    python setup.py test\n\nvia pip latest Release:\n\n.. code-block:: bash\n\n    # latest Release from pypi\n    # under Linux You have to use sudo, or it will not be installed as a commandline application\n    # [sudo] means, that the command \"sudo\" is optional for Linux if You want to use it from bash commandline\n    [sudo] pip3 install rst_include\n\n    # test without installing\n    [sudo] pip3 install rst_include --install-option test\n\nvia pip latest Development Version:\n\n.. code-block:: bash\n\n    # upgrade all dependencies regardless of version number (PREFERRED)\n    [sudo] pip3 install --upgrade https://github.com/bitranox/rst_include/archive/master.zip --upgrade-strategy eager\n    # normal install\n    [sudo] pip3 install --upgrade https://github.com/bitranox/rst_include/archive/master.zip\n    # test without installing\n    [sudo] pip3 install https://github.com/bitranox/rst_include/archive/master.zip --install-option test\n\nvia requirements.txt:\n\n.. code-block:: bash\n\n    # Insert following line in Your requirements.txt:\n    # for the latest Release:\n    rst_include\n    # for the latest Development Version :\n    https://github.com/bitranox/rst_include/archive/master.zip\n\n    # to install and upgrade all modules mentioned in requirements.txt:\n    [sudo] pip3 install --upgrade -r /<path>/requirements.txt\n\nvia python:\n\n.. code-block:: python\n\n    # for the latest Release\n    [sudo] python3 -m pip install upgrade rst_include\n\n    # for the latest Development Version\n    [sudo] python3 -m pip install upgrade https://github.com/bitranox/rst_include/archive/master.zip\n\n-----------------------------------------------------------------\n\nBasic Usage\n-----------\n\nsince rst_include is registered as a console script command with Your current python interpreter, You have to use the command \"rst_include\" (not \"rst_include.py\")\n\n\n- issue command :\n\n.. code-block:: shell\n\n    # issue command on shell or windows commandline\n    $> rst_include [OPTIONS]\n\n    # or, if python/bin is not in Your python path :\n    # on Windows\n    $> c:\\python37\\scripts\\rst_include [OPTIONS]\n    # on Linux/oSX\n    $> /python37/bin/rst_include [OPTIONS]\n\n    # issue command with python interpreter\n    $> python -m rst_include [OPTIONS]\n\n\n\n- get help :\n\n.. code-block:: shell\n\n    # get help on shell or windows commandline\n    $> rst_include -h\n\n.. code-block:: shell\n\n    usage: rst_include [-h] {include,replace} ...\n\n    Process .rst File Includes\n\n    positional arguments:\n      {include,replace}\n        include          include rst includes\n        replace          string replace\n\n    optional arguments:\n      -h, --help         show this help message and exit\n\n    check the documentation on github\n\n.. code-block:: shell\n\n    # get help on shell or windows commandline for include\n    $> rst_include include -h\n\n.. code-block:: shell\n\n    usage: rst_include include [-h] [-s [source]] [-t [target]]\n                               [-se [source encoding]] [-te [target encoding]]\n                               [-i] [-q] [-c [configfile.py]]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -s [source], --source [source]\n                            default: stdin\n      -t [target], --target [target]\n                            default: stdout\n      -se [source encoding], --source_encoding [source encoding]\n                            default: utf-8-sig\n      -te [target encoding], --target_encoding [target encoding]\n                            default: utf-8\n      -i, --inplace         inplace - target file = sourcefile\n      -q, --quiet           quiet\n      -c [configfile.py], --config [configfile.py]\n                            If no filename is passed, the default conf_rst_inc.py\n                            is searched in the current directory\n\n.. code-block:: shell\n\n    # get help on shell or windows commandline for string replace\n    $> rst_include replace -h\n\n.. code-block:: shell\n\n    usage: rst_include replace [-h] [-s [source]] [-t [target]]\n                               [-se [source encoding]] [-te [target encoding]]\n                               [-i] [-q]\n                               old new [count]\n\n    positional arguments:\n      old                   old\n      new                   new\n      count                 count\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -s [source], --source [source]\n                            default: stdin\n      -t [target], --target [target]\n                            default: stdout\n      -se [source encoding], --source_encoding [source encoding]\n                            default: utf-8-sig\n      -te [target encoding], --target_encoding [target encoding]\n                            default: utf-8\n      -i, --inplace         inplace - target file = sourcefile\n      -q, --quiet           quiet\n\n- replace the include statements in source.rst and save it to target.rst via commandline parameters :\n\n.. code-block:: shell\n\n    # replace the include statements on shell or windows commandline\n    # path can be relative or absolute path\n    # examples :\n\n    # relativ path\n    $> rst_include include -s ./source.rst -t ./target.rst\n\n    # absolute path\n    $> rst_include include -s /project/docs/source.rst -t /project/docs/target.rst\n\n    # on linux via pipe\n    $> cat /project/docs/source.rst | rst_include include > /project/docs/target.rst\n\n    # on Windows via pipe\n    $> type /project/docs/source.rst | rst_include include > /project/docs/target.rst\n\n\n- replace include statements on multiple files via config.py :\n\n.. code-block:: shell\n\n    # replace the include statements on shell or windows commandline\n    # path to the config file can be absolute or relative path\n    # option -c or --config :\n\n    # will try to load the default conf_rst_inc.py from the current directory\n    $> rst_include include -c\n\n    # will load another config file another directory\n    $> rst_include include -c ./conf_this_project.py\n\nStructure of the configuration file:\n\nthe files are processed in the given order, by that way You can even realize nested .. include:: blocks.\n\nYou might also specify the encoding for source and target files\n\n.. code-block:: python\n\n    from rst_include import *\n\n    # set config here\n    rst_conf = RstConf()\n\n    # paths absolute, or relative to the location of the config file\n    # the notation for relative files is like on windows or linux - not like in python.\n    # so You might use ../../some/directory/some_document.rst to go two levels back.\n    # avoid absolute paths since You never know where the program will run.\n    rst_conf.l_rst_files = [RstFile(source='./rst_include/tests/test1_no_includes_template.rst',\n                                    target='./rst_include/tests/test1_no_includes_result.rst',\n                                    # default = utf-8-sig because it can read utf-8 and utf-8-sig\n                                    source_encoding='utf-8-sig',\n                                    # default = utf-8\n                                    target_encoding='utf-8'\n                                    ),\n                            RstFile(source='./rst_include/tests/test2_include_samedir_template.rst',\n                                    target='./rst_include/tests/test2_include_samedir_result.rst'),\n                            RstFile(source='./rst_include/tests/test3_include_subdir_template.rst',\n                                    target='./rst_include/tests/test3_include_subdir_result.rst'),\n                            RstFile(source='./rst_include/tests/test4_include_nocode_template.rst',\n                                    target='./rst_include/tests/test4_include_nocode_result.rst')]\n\nAdditional You can easily replace (also multiline) text strings :\n\n.. code-block:: shell\n\n    # replace text strings easily\n    # examples :\n\n    $> rst_include replace -s ./source.rst -t ./target.rst \"{template_string}\" \"new content\"\n\n    # multiline example\n    # note ${IFS} is the standard bash seperator\n    $> rst_include replace --inplace -s ./source.txt \"line1${IFS}line2\" \"line1${IFS}something_between${IFS}line2\"\n\n\npiping under Linux:\n\n.. code-block:: shell\n\n    # piping examples\n    $> rst_include include -s ./source.rst | rst_include replace -t ./target.rst \"{template_string}\" \"new content\"\n    # same result\n    $> cat ./source.rst | rst_include include | rst_include replace \"{template_string}\" \"new content\" > ./target.rst\n\n    # multiline example\n    $> cat ./text.txt | rst_include replace \"line1${IFS}line2\" \"line1${IFS}something_between${IFS}line2\" > ./text.txt\n\n\n-----------------------------------------------------------------\n\nExample Build Script Python\n===========================\n\n.. code-block:: python\n\n    import argparse\n    import errno\n    import logging\n    import os\n    import sys\n    from rst_include import *\n    from rst_include.libs import lib_log\n    import subprocess\n\n\n    # CONSTANTS & PROJECT SPECIFIC FUNCTIONS\n    codeclimate_link_hash = \"ff3f414903627e5cfc35\"\n\n\n    def project_specific(repository_slug, repository, repository_dashed):\n        # PROJECT SPECIFIC\n        logger = logging.getLogger('project_specific')\n        logger.info('create help documentation files {dir}'.format(dir=os.path.abspath(os.path.curdir)))\n        subprocess.run('{sys_executable} ./rst_include/rst_include.py -h > ./docs/rst_include_help_output.txt'.format(sys_executable=sys.executable), shell=True, check=True)\n        subprocess.run('{sys_executable} ./rst_include/rst_include.py include -h > ./docs/rst_include_help_include_output.txt'.format(sys_executable=sys.executable), shell=True, check=True)\n        subprocess.run('{sys_executable} ./rst_include/rst_include.py replace -h > ./docs/rst_include_help_replace_output.txt'.format(sys_executable=sys.executable), shell=True, check=True)\n\n\n    def parse_args(cmd_args=sys.argv[1:]):\n        # type: ([]) -> []\n        parser = argparse.ArgumentParser(\n            description='Create Readme.rst',\n            epilog='check the documentation on github',\n            add_help=True)\n\n        parser.add_argument('travis_repo_slug', metavar='TRAVIS_REPO_SLUG in the form \"<github_account>/<repository>\"')\n        args = parser.parse_args(cmd_args)\n        return args, parser\n\n\n    def main(args):\n        logger = logging.getLogger('build_docs')\n        logger.info('create the README.rst')\n        travis_repo_slug = args.travis_repo_slug\n        repository = travis_repo_slug.split('/')[1]\n        repository_dashed = repository.replace('_', '-')\n\n        project_specific(travis_repo_slug, repository, repository_dashed)\n\n        \"\"\"\n        paths absolute, or relative to the location of the config file\n        the notation for relative files is like on windows or linux - not like in python.\n        so You might use ../../some/directory/some_document.rst to go two levels back.\n        avoid absolute paths since You never know where the program will run.\n        \"\"\"\n\n        logger.info('include the include blocks')\n        rst_inc(source='./docs/README_template.rst',\n                target='./README.rst')\n\n        # please note that the replace syntax is not shown correctly in the README.rst,\n        # because it gets replaced itself by the build_docs.py\n        # we could overcome this by first replacing, and afterwards including -\n        # check out the build_docs.py for the correct syntax !\n        logger.info('replace repository related strings')\n        rst_str_replace(source='./README.rst',\n                        target='',\n                        old='bitranox/rst_include',\n                        new=travis_repo_slug,\n                        inplace=True)\n        rst_str_replace(source='./README.rst',\n                        target='',\n                        old='rst_include',\n                        new=repository,\n                        inplace=True)\n        rst_str_replace(source='./README.rst',\n                        target='',\n                        old='rst-include',\n                        new=repository_dashed,\n                        inplace=True)\n\n        rst_str_replace(source='./README.rst',\n                        target='',\n                        old='ff3f414903627e5cfc35',\n                        new=codeclimate_link_hash,\n                        inplace=True)\n\n        logger.info('done')\n        sys.exit(0)\n\n\n    if __name__ == '__main__':\n        lib_log.setup_logger()\n        main_logger = logging.getLogger('main')\n        try:\n            _args, _parser = parse_args()\n\n            main(_args)\n        except FileNotFoundError:\n            # see https://www.thegeekstuff.com/2010/10/linux-error-codes for error codes\n            sys.exit(errno.ENOENT)      # No such file or directory\n        except FileExistsError:\n            sys.exit(errno.EEXIST)      # File exists\n        except TypeError:\n            sys.exit(errno.EINVAL)      # Invalid Argument\n        except ValueError:\n            sys.exit(errno.EINVAL)      # Invalid Argument\n\nExample Build Script DOS Batch\n==============================\n\n.. code-block:: bat\n\n    REM\n    REM rst_include needs to be installed and python paths set correctly\n    @echo off\n    cls\n\n    REM # You might also use Environment Variable here, or as commandline parameter\n    REM # this is just an example, I use actually the build_readme.py python file myself\n    REM # I do not recommend cmd files anymore - why it it is so much easier under python ...\n    REM # I am sure there is a more elegant was to do it on batch files, this is only an example\n\n    SET repository_slug=\"bitranox/rst_include\"\n    SET repository=\"rst_include\"\n    SET codeclimate_link_hash=\"ff3f414903627e5cfc35\"\n\n    REM # get dashed repository name for pypi links\n    echo %repository% | rst_include replace \"_\" \"-\" > temp.txt\n    set /p repository_dashed= < temp.txt\n    del temp.txt\n\n\n    REM paths absolute, or relative to the location of the config file\n    REM the notation for relative files is like on windows or linux - not like in python.\n    REM so You might use ../../some/directory/some_document.rst to go two levels back.\n    REM avoid absolute paths since You never know where the program will run.\n\n    echo 'create the sample help outputs'\n    rst_include -h > ./docs/rst_include_help_output.txt\n    rst_include include -h > ./docs/rst_include_help_include_output.txt\n    rst_include replace -h > ./docs/rst_include_help_replace_output.txt\n\n    echo \"import the include blocks\"\n    rst_include include -s ./docs/README_template.rst -t ./README.rst\n\n    REM please note that the replace syntax is not shown correctly in the README.rst,\n    REM because it gets replaced itself by the build_docs.py\n    REM we could overcome this by first replacing, and afterwards including -\n    REM check out the build_docs.cmd for the correct syntax !\n\n    echo \"replace repository_slug\"\n    rst_include --inplace replace -s ./docs/README_template.rst bitranox/rst_include %repository_slug%\n    echo \"replace repository\"\n    rst_include --inplace replace -s ./docs/README_template.rst rst_include %repository%\n    echo \"replace repository_dashed\"\n    rst_include --inplace replace -s ./docs/README_template.rst rst-include %repository_dashed%\n    echo \"replace codeclimate_link_hash\"\n    rst_include --inplace replace -s ./docs/README_template.rst ff3f414903627e5cfc35 %codeclimate_link_hash%\n\n    echo 'finished'\n\nExample Build Script Shellscript\n================================\n\n.. code-block:: shell\n\n    #!/bin/bash\n\n    ### CONSTANTS\n    codeclimate_link_hash=\"ff3f414903627e5cfc35\"\n    # TRAVIS_TAG\n\n    function include_dependencies {\n        local my_dir=\"$( cd \"$(dirname \"${BASH_SOURCE[0]}\")\" ; pwd -P )\"  # this gives the full path, even for sourced scripts\n        chmod +x \"${my_dir}\"/lib_bash/*.sh\n        source \"${my_dir}/lib_bash/lib_color.sh\"\n    }\n\n    include_dependencies  # we need to do that via a function to have local scope of my_dir\n\n    function check_repository_name {\n        if [[ -z ${TRAVIS_REPO_SLUG} ]]\n            then\n                clr_bold clr_red \"ERROR no travis repository name set - exiting\"\n                exit 1\n            fi\n    }\n\n    clr_bold clr_green \"Build README.rst for repository: ${TRAVIS_REPO_SLUG}\"\n\n    check_repository_name\n\n    repository=\"${TRAVIS_REPO_SLUG#*/}\"                                 # \"username/repository_name\" --> \"repository_name\"\n    repository_dashed=\"$( echo -e \"$repository\" | tr  '_' '-'  )\"       # \"repository_name --> repository-name\"\n\n    clr_green \"create the sample help outputs\"\n    rst_include -h > ./docs/rst_include_help_output.txt\n    rst_include include -h > ./docs/rst_include_help_include_output.txt\n    rst_include replace -h > ./docs/rst_include_help_replace_output.txt\n\n    clr_green \"import the include blocks\"\n    rst_include include -s ./docs/README_template.rst -t ./docs/README_template_included.rst\n\n    clr_green \"replace repository strings\"\n\n    # please note that the replace syntax is not shown correctly in the README.rst,\n    # because it gets replaced itself by the build_docs.py\n    # we could overcome this by first replacing, and afterwards including -\n    # check out the build_docs.sh for the correct syntax !\n\n    # example for piping\n    cat ./docs/README_template_included.rst \\\n        | rst_include replace \"bitranox/rst_include\" \"${TRAVIS_REPO_SLUG}\" \\\n        | rst_include replace \"rst_include\" \"$rst_include\" \\\n        | rst_include replace \"rst-include\" \"$rst-include\" \\\n        | rst_include replace \"ff3f414903627e5cfc35\" \"$ff3f414903627e5cfc35\" \\\n         > ./README.rst\n\n    clr_green \"cleanup\"\n    rm ./docs/README_template_included.rst\n\n    clr_green \"done\"\n    clr_green \"******************************************************************************************************************\"\n    clr_bold clr_green \"FINISHED building README.rst\"\n    clr_green \"******************************************************************************************************************\"\n\n-----------------------------------------------------------------\n\nRST Includes Examples\n=====================\n\nsimple code include\n===================\n\n.. code-block:: bash\n\n    # simple text include, empty line after\n    .. include:: ./include1.py\n        :code: python\n        :number-lines: 10\n        :start-line: 6\n        :end-line: 23\n        :start-after: # start marker\n        :end-before: # end-marker\n        :encoding: utf-8\n\n\ntext or RST file include\n========================\n.. code-block:: bash\n\n    # simple text include, without code setting - it is imported as normal textfile, as it is.\n    # You might also include other rst files\n    .. include:: include3.py\n        :start-line: 0       # working, also end-line, etc ... all others suppressed.\n        :number-lines:       # not working without :code: setting\n\ninclude jupyter notebooks\n=========================\n\njupyter notebooks can be first converted to rst via nbconvert, see : https://nbconvert.readthedocs.io/en/latest/usage.html#convert-rst\n\npandoc is a requirement for nbconvert, see : https://pandoc.org/\n\n\n.. code-block:: bash\n\n    # convert the attached test.ipynb to test.rst\n    $ jupyter nbconvert --to rst test.ipynb\n\nunfortunately the pictures are not shown and needed to be extracted - a first hint might be : https://gist.github.com/sglyon/5687b8455a0107afc6f4c60b5f313670\n\nI would prefer to exctract the pictures after the conversion to RST, and make it a module in rst_include.\nFilenames can be a hash of the picture data, in order to avoid web caching issues.\n\n-----------------------------------------------------------------\n\nRST Include Parameters\n======================\n\ntaken from : http://docutils.sourceforge.net/docs/ref/rst/directives.html\n\nStandard data files intended for inclusion in reStructuredText documents are distributed with the Docutils source code, located in the \"docutils\" package in the docutils/parsers/rst/include directory.\nTo access these files, use the special syntax for standard \"include\" data files, angle brackets around the file name:\n\n\n.. code-block:: bash\n\n        .. include:: <isonum.txt>    # not supported now\n\n\nThe current set of standard \"include\" data files consists of sets of substitution definitions. See reStructuredText Standard Definition Files for details.\n\nThe following options are recognized:\n\n.. code-block:: bash\n\n    # Only the content starting from this line will be included.\n    # (As usual in Python, the first line has index 0 and negative values count from the end.)\n    # Combining start/end-line and start-after/end-before is possible.\n    # The text markers will be searched in the specified lines (further limiting the included content).\n    start-line : integer\n\n.. code-block:: bash\n\n    # Only the content up to (but excluding) this line will be included.\n    # Combining start/end-line and start-after/end-before is possible.\n    # The text markers will be searched in the specified lines (further limiting the included content).\n    end-line : integer\n\n.. code-block:: bash\n\n    # Only the content after the first occurrence of the specified text will be included.\n    # Combining start/end-line and start-after/end-before is possible.\n    # The text markers will be searched in the specified lines (further limiting the included content).\n    start-after : text to find in the external data file\n\n.. code-block:: bash\n\n    # Only the content before the first occurrence of the specified text (but after any after text) will be included.\n    # Combining start/end-line and start-after/end-before is possible.\n    # The text markers will be searched in the specified lines (further limiting the included content).\n    end-before : text to find in the external data file\n\n.. code-block:: bash\n\n    # The entire included text is inserted into the document as a single literal block.\n    literal : flag (empty)\n\n.. code-block:: bash\n\n    # The argument and the content of the included file are passed to the code directive (useful for program listings).\n    # (New in Docutils 0.9)\n    code : formal language (optional)\n\n.. code-block:: bash\n\n    # Precede every code line with a line number. The optional argument is the number of the first line (default 1).\n    # Works only with code or literal. (New in Docutils 0.9)\n    number-lines : [start line number]\n\n.. code-block:: bash\n\n    # The text encoding of the external data file. Defaults to the document's input_encoding.\n    encoding : name of text encoding\n\n.. code-block:: bash\n\n    # Number of spaces for hard tab expansion. A negative value prevents expansion of hard tabs.\n    # Defaults to the tab_width configuration setting.\n    tab-width : integer\n\n.. code-block:: bash\n\n    With code or literal the common options :class: and :name: are recognized as well.\n    all other option in the format :<option>: are just passed through the codeblock\n\n-----------------------------------------------------------------\n\nRequirements\n------------\n\nfollowing modules will be automatically installed :\n\n.. code-block:: shell\n\n    pytest  # see : https://github.com/pytest-dev/pytest\n    typing  # see : https://pypi.org/project/typing/\n\n-----------------------------------------------------------------\n\nAcknowledgements\n----------------\n\n- special thanks to \"uncle bob\" Robert C. Martin, especially for his books on \"clean code\" and \"clean architecture\"\n\n-----------------------------------------------------------------\n\nContribute\n----------\n\nI would love for you to fork and send me pull request for this project.\n- `please Contribute <https://github.com/bitranox/rst_include/blob/master/CONTRIBUTING.md>`_\n\n-----------------------------------------------------------------\n\nLicense\n-------\n\nThis software is licensed under the `MIT license <http://en.wikipedia.org/wiki/MIT_License>`_\n\n-----------------------------------------------------------------\n\n.. Changelog link comes from the included document !\n\nChangelog\n=========\n\n1.0.8\n-----\n- strict mypy typechecking\n- drop python 2.7 / 3.5 support\n- implement --inplace option\n- implement --quiet option\n- implement multiline string replacement\n- extend documentation\n\n\n1.0.2\n-----\n2019-04-28: fix import errors\n\n1.0.1\n-----\n2019-04-28: add empty line at the end of the assembled documentation, to be able to add CHANGES.rst with setup.py\n\n1.0.0\n-----\n2019-04-19: Initial public release, PyPi Release\n\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bitranox/rst_include", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "rst-include", "package_url": "https://pypi.org/project/rst-include/", "platform": "", "project_url": "https://pypi.org/project/rst-include/", "project_urls": {"Homepage": "https://github.com/bitranox/rst_include"}, "release_url": "https://pypi.org/project/rst-include/1.0.8/", "requires_dist": ["pytest", "typing"], "requires_python": ">=3.6.0", "summary": "include files to rst for documentation purposes", "version": "1.0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"rst-include\">\n<h2>rst_include</h2>\n<p><a href=\"https://badge.fury.io/py/rst_include\" rel=\"nofollow\"><img alt=\"Pypi Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90dd1289f4247b6a1b1e3df6ee1a46a2ad86ad01/68747470733a2f2f62616467652e667572792e696f2f70792f7273742d696e636c7564652e737667\"></a> <a href=\"https://badge.fury.io/py/rst_include\" rel=\"nofollow\"><img alt=\"Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/10a3d34f469158f3ceb98b90db9d4c31de687e1c/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d253345253344332e362d627269676874677265656e2e737667\"></a> <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/550adc74c61cfd09c0fc5610e2e5f319e5e27fb3/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f776562636f6d6963732f707977696e652e737667\"></a> <img alt=\"maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7da582966896eda132f827130b7d8de3214f9da4/68747470733a2f2f696d672e736869656c64732e696f2f6d61696e74656e616e63652f7965732f323031392e737667\"></p>\n<p><a href=\"https://travis-ci.org/bitranox/rst_include\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e2956970917351b88d29ce9c31778c7efa29581/68747470733a2f2f7472617669732d63692e6f72672f62697472616e6f782f7273745f696e636c7564652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/bitranox/rst_include\" rel=\"nofollow\"><img alt=\"Codecov Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2231a663b6a275b7f65931a79844cb050a916cf/68747470733a2f2f636f6465636f762e696f2f67682f62697472616e6f782f7273745f696e636c7564652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://bettercodehub.com/results/bitranox/rst_include\" rel=\"nofollow\"><img alt=\"Better Code\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53c8e5081810bd87c53fac3195d51b53b60c4a2c/68747470733a2f2f626574746572636f64656875622e636f6d2f656467652f62616467652f62697472616e6f782f7273745f696e636c7564653f6272616e63683d6d6173746572\"></a> <a href=\"https://codeclimate.com/github/bitranox/rst_include/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7284a10066be88488ecd378d1e74ce2a42ec866d/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f66663366343134393033363237653563666333352f6d61696e7461696e6162696c697479\"></a> <a href=\"https://snyk.io/test/github/bitranox/rst_include\" rel=\"nofollow\"><img alt=\"snyk security\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4db72241140a4943a9c9455f9250db83d9a3a6d0/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f62697472616e6f782f7273745f696e636c7564652f62616467652e737667\"></a></p>\n<p>since You can not include files into RST files on github and PyPi, You can replace those imports with this software.</p>\n<p>That means You can locally write Your RST documents (for instance with pycharm) and use there\nthe .. include: option to include other RST Files or code snippets into Your Document.\nAfterwards You can run this software to create a monolithic README.rst that can be viewed on Github or Pypi</p>\n<p>You might also include Text/Code from Jupyter Notebooks (sorry, no pictures at the moment, but it is not very hard to do that)</p>\n<p>This has many advantages like :</p>\n<ul>\n<li>dont repeat Yourself, create standard blocks to include into Your documentation</li>\n<li>include tested code snippets from Your code files into Your documentation, to avoid untested or outdated documentation</li>\n<li>include other RST Files</li>\n<li>very simple usage, throwing exit codes to detect errors on documentation at travis build-time</li>\n<li>commandline or programmatic interface, You can even use it in the travis.yml</li>\n<li>commandline interface supporting shellscript, cmd, pipes, config-files</li>\n</ul>\n<p>This README was also created with rst_include, You might look at ./docs/README_template.rst ,\nbuild_docs.sh, build_docs.cmd and build_docs.py as examples. (they all do the same, just different versions)</p>\n<p>The travis.yml builds the Documentation on every run, so You can be sure that there are no Errors.\nrst_include does only work on python &gt; 3.6</p>\n<p><a href=\"https://codecov.io/gh/bitranox/rst_include\" rel=\"nofollow\">100% code coverage</a>, mypy static type checking, tested under <a href=\"https://travis-ci.org/bitranox/rst_include\" rel=\"nofollow\">Linux, OsX, Windows and Wine</a>, automatic daily builds  and monitoring</p>\n<hr class=\"docutils\">\n<ul>\n<li><a href=\"#installation-and-upgrade\" rel=\"nofollow\">Installation and Upgrade</a></li>\n<li><a href=\"#basic-usage\" rel=\"nofollow\">Basic Usage</a></li>\n<li><dl>\n<dt>Examples</dt>\n<dd><ul>\n<li><a href=\"#example-build-script-python\" rel=\"nofollow\">Example Build Script Python</a></li>\n<li><a href=\"#example-build-script-dos-batch\" rel=\"nofollow\">Example Build Script DOS Batch</a></li>\n<li><a href=\"#example-build-script-shellscript\" rel=\"nofollow\">Example Build Script Shellscript</a></li>\n<li><a href=\"#rst-includes-examples\" rel=\"nofollow\">RST Includes Examples</a></li>\n<li><a href=\"#simple-code-include\" rel=\"nofollow\">simple code include</a></li>\n<li><a href=\"#text-or-rst-file-include\" rel=\"nofollow\">text or RST file include</a></li>\n<li><a href=\"#include-jupyter-notebooks\" rel=\"nofollow\">include jupyter notebooks</a></li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><a href=\"#rst-include-parameters\" rel=\"nofollow\">RST Include Parameters</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#acknowledgements\" rel=\"nofollow\">Acknowledgements</a></li>\n<li><a href=\"#contribute\" rel=\"nofollow\">Contribute</a></li>\n<li><a href=\"https://github.com/bitranox/rst_include/blob/master/ISSUE_TEMPLATE.md\" rel=\"nofollow\">Report Issues</a></li>\n<li><a href=\"https://github.com/bitranox/rst_include/blob/master/PULL_REQUEST_TEMPLATE.md\" rel=\"nofollow\">Pull Request</a></li>\n<li><a href=\"https://github.com/bitranox/rst_include/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of Conduct</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n</ul>\n<hr class=\"docutils\">\n<div id=\"installation-and-upgrade\">\n<h3>Installation and Upgrade</h3>\n<p>From source code:</p>\n<pre><span class=\"c1\"># normal install\n</span>python setup.py install\n<span class=\"c1\"># test without installing\n</span>python setup.py <span class=\"nb\">test</span>\n</pre>\n<p>via pip latest Release:</p>\n<pre><span class=\"c1\"># latest Release from pypi\n# under Linux You have to use sudo, or it will not be installed as a commandline application\n# [sudo] means, that the command \"sudo\" is optional for Linux if You want to use it from bash commandline\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install rst_include\n\n<span class=\"c1\"># test without installing\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install rst_include --install-option <span class=\"nb\">test</span>\n</pre>\n<p>via pip latest Development Version:</p>\n<pre><span class=\"c1\"># upgrade all dependencies regardless of version number (PREFERRED)\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install --upgrade https://github.com/bitranox/rst_include/archive/master.zip --upgrade-strategy eager\n<span class=\"c1\"># normal install\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install --upgrade https://github.com/bitranox/rst_include/archive/master.zip\n<span class=\"c1\"># test without installing\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install https://github.com/bitranox/rst_include/archive/master.zip --install-option <span class=\"nb\">test</span>\n</pre>\n<p>via requirements.txt:</p>\n<pre><span class=\"c1\"># Insert following line in Your requirements.txt:\n# for the latest Release:\n</span>rst_include\n<span class=\"c1\"># for the latest Development Version :\n</span>https://github.com/bitranox/rst_include/archive/master.zip\n\n<span class=\"c1\"># to install and upgrade all modules mentioned in requirements.txt:\n</span><span class=\"o\">[</span>sudo<span class=\"o\">]</span> pip3 install --upgrade -r /&lt;path&gt;/requirements.txt\n</pre>\n<p>via python:</p>\n<pre><span class=\"c1\"># for the latest Release</span>\n<span class=\"p\">[</span><span class=\"n\">sudo</span><span class=\"p\">]</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">upgrade</span> <span class=\"n\">rst_include</span>\n\n<span class=\"c1\"># for the latest Development Version</span>\n<span class=\"p\">[</span><span class=\"n\">sudo</span><span class=\"p\">]</span> <span class=\"n\">python3</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">upgrade</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">bitranox</span><span class=\"o\">/</span><span class=\"n\">rst_include</span><span class=\"o\">/</span><span class=\"n\">archive</span><span class=\"o\">/</span><span class=\"n\">master</span><span class=\"o\">.</span><span class=\"n\">zip</span>\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"basic-usage\">\n<h3>Basic Usage</h3>\n<p>since rst_include is registered as a console script command with Your current python interpreter, You have to use the command \u201crst_include\u201d (not \u201crst_include.py\u201d)</p>\n<ul>\n<li>issue command :</li>\n</ul>\n<pre><span class=\"c1\"># issue command on shell or windows commandline\n</span>$&gt; rst_include <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\n<span class=\"c1\"># or, if python/bin is not in Your python path :\n# on Windows\n</span>$&gt; c:<span class=\"se\">\\p</span>ython37<span class=\"se\">\\s</span>cripts<span class=\"se\">\\r</span>st_include <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n<span class=\"c1\"># on Linux/oSX\n</span>$&gt; /python37/bin/rst_include <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n\n<span class=\"c1\"># issue command with python interpreter\n</span>$&gt; python -m rst_include <span class=\"o\">[</span>OPTIONS<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>get help :</li>\n</ul>\n<pre><span class=\"c1\"># get help on shell or windows commandline\n</span>$&gt; rst_include -h\n</pre>\n<pre>usage: rst_include <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>include,replace<span class=\"o\">}</span> ...\n\nProcess .rst File Includes\n\npositional arguments:\n  <span class=\"o\">{</span>include,replace<span class=\"o\">}</span>\n    include          include rst includes\n    replace          string replace\n\noptional arguments:\n  -h, --help         show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n\ncheck the documentation on github\n</pre>\n<pre><span class=\"c1\"># get help on shell or windows commandline for include\n</span>$&gt; rst_include include -h\n</pre>\n<pre>usage: rst_include include <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-s <span class=\"o\">[</span>source<span class=\"o\">]]</span> <span class=\"o\">[</span>-t <span class=\"o\">[</span>target<span class=\"o\">]]</span>\n                           <span class=\"o\">[</span>-se <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]]</span> <span class=\"o\">[</span>-te <span class=\"o\">[</span>target encoding<span class=\"o\">]]</span>\n                           <span class=\"o\">[</span>-i<span class=\"o\">]</span> <span class=\"o\">[</span>-q<span class=\"o\">]</span> <span class=\"o\">[</span>-c <span class=\"o\">[</span>configfile.py<span class=\"o\">]]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -s <span class=\"o\">[</span>source<span class=\"o\">]</span>, --source <span class=\"o\">[</span>source<span class=\"o\">]</span>\n                        default: stdin\n  -t <span class=\"o\">[</span>target<span class=\"o\">]</span>, --target <span class=\"o\">[</span>target<span class=\"o\">]</span>\n                        default: stdout\n  -se <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]</span>, --source_encoding <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]</span>\n                        default: utf-8-sig\n  -te <span class=\"o\">[</span>target encoding<span class=\"o\">]</span>, --target_encoding <span class=\"o\">[</span>target encoding<span class=\"o\">]</span>\n                        default: utf-8\n  -i, --inplace         inplace - target <span class=\"nv\">file</span> <span class=\"o\">=</span> sourcefile\n  -q, --quiet           quiet\n  -c <span class=\"o\">[</span>configfile.py<span class=\"o\">]</span>, --config <span class=\"o\">[</span>configfile.py<span class=\"o\">]</span>\n                        If no filename is passed, the default conf_rst_inc.py\n                        is searched in the current directory\n</pre>\n<pre><span class=\"c1\"># get help on shell or windows commandline for string replace\n</span>$&gt; rst_include replace -h\n</pre>\n<pre>usage: rst_include replace <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-s <span class=\"o\">[</span>source<span class=\"o\">]]</span> <span class=\"o\">[</span>-t <span class=\"o\">[</span>target<span class=\"o\">]]</span>\n                           <span class=\"o\">[</span>-se <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]]</span> <span class=\"o\">[</span>-te <span class=\"o\">[</span>target encoding<span class=\"o\">]]</span>\n                           <span class=\"o\">[</span>-i<span class=\"o\">]</span> <span class=\"o\">[</span>-q<span class=\"o\">]</span>\n                           old new <span class=\"o\">[</span>count<span class=\"o\">]</span>\n\npositional arguments:\n  old                   old\n  new                   new\n  count                 count\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -s <span class=\"o\">[</span>source<span class=\"o\">]</span>, --source <span class=\"o\">[</span>source<span class=\"o\">]</span>\n                        default: stdin\n  -t <span class=\"o\">[</span>target<span class=\"o\">]</span>, --target <span class=\"o\">[</span>target<span class=\"o\">]</span>\n                        default: stdout\n  -se <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]</span>, --source_encoding <span class=\"o\">[</span><span class=\"nb\">source</span> encoding<span class=\"o\">]</span>\n                        default: utf-8-sig\n  -te <span class=\"o\">[</span>target encoding<span class=\"o\">]</span>, --target_encoding <span class=\"o\">[</span>target encoding<span class=\"o\">]</span>\n                        default: utf-8\n  -i, --inplace         inplace - target <span class=\"nv\">file</span> <span class=\"o\">=</span> sourcefile\n  -q, --quiet           quiet\n</pre>\n<ul>\n<li>replace the include statements in source.rst and save it to target.rst via commandline parameters :</li>\n</ul>\n<pre><span class=\"c1\"># replace the include statements on shell or windows commandline\n# path can be relative or absolute path\n# examples :\n</span>\n<span class=\"c1\"># relativ path\n</span>$&gt; rst_include include -s ./source.rst -t ./target.rst\n\n<span class=\"c1\"># absolute path\n</span>$&gt; rst_include include -s /project/docs/source.rst -t /project/docs/target.rst\n\n<span class=\"c1\"># on linux via pipe\n</span>$&gt; cat /project/docs/source.rst <span class=\"p\">|</span> rst_include include &gt; /project/docs/target.rst\n\n<span class=\"c1\"># on Windows via pipe\n</span>$&gt; <span class=\"nb\">type</span> /project/docs/source.rst <span class=\"p\">|</span> rst_include include &gt; /project/docs/target.rst\n</pre>\n<ul>\n<li>replace include statements on multiple files via config.py :</li>\n</ul>\n<pre><span class=\"c1\"># replace the include statements on shell or windows commandline\n# path to the config file can be absolute or relative path\n# option -c or --config :\n</span>\n<span class=\"c1\"># will try to load the default conf_rst_inc.py from the current directory\n</span>$&gt; rst_include include -c\n\n<span class=\"c1\"># will load another config file another directory\n</span>$&gt; rst_include include -c ./conf_this_project.py\n</pre>\n<p>Structure of the configuration file:</p>\n<p>the files are processed in the given order, by that way You can even realize nested .. include:: blocks.</p>\n<p>You might also specify the encoding for source and target files</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rst_include</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># set config here</span>\n<span class=\"n\">rst_conf</span> <span class=\"o\">=</span> <span class=\"n\">RstConf</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># paths absolute, or relative to the location of the config file</span>\n<span class=\"c1\"># the notation for relative files is like on windows or linux - not like in python.</span>\n<span class=\"c1\"># so You might use ../../some/directory/some_document.rst to go two levels back.</span>\n<span class=\"c1\"># avoid absolute paths since You never know where the program will run.</span>\n<span class=\"n\">rst_conf</span><span class=\"o\">.</span><span class=\"n\">l_rst_files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">RstFile</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test1_no_includes_template.rst'</span><span class=\"p\">,</span>\n                                <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test1_no_includes_result.rst'</span><span class=\"p\">,</span>\n                                <span class=\"c1\"># default = utf-8-sig because it can read utf-8 and utf-8-sig</span>\n                                <span class=\"n\">source_encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8-sig'</span><span class=\"p\">,</span>\n                                <span class=\"c1\"># default = utf-8</span>\n                                <span class=\"n\">target_encoding</span><span class=\"o\">=</span><span class=\"s1\">'utf-8'</span>\n                                <span class=\"p\">),</span>\n                        <span class=\"n\">RstFile</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test2_include_samedir_template.rst'</span><span class=\"p\">,</span>\n                                <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test2_include_samedir_result.rst'</span><span class=\"p\">),</span>\n                        <span class=\"n\">RstFile</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test3_include_subdir_template.rst'</span><span class=\"p\">,</span>\n                                <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test3_include_subdir_result.rst'</span><span class=\"p\">),</span>\n                        <span class=\"n\">RstFile</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test4_include_nocode_template.rst'</span><span class=\"p\">,</span>\n                                <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'./rst_include/tests/test4_include_nocode_result.rst'</span><span class=\"p\">)]</span>\n</pre>\n<p>Additional You can easily replace (also multiline) text strings :</p>\n<pre><span class=\"c1\"># replace text strings easily\n# examples :\n</span>\n$&gt; rst_include replace -s ./source.rst -t ./target.rst <span class=\"s2\">\"{template_string}\"</span> <span class=\"s2\">\"new content\"</span>\n\n<span class=\"c1\"># multiline example\n# note ${IFS} is the standard bash seperator\n</span>$&gt; rst_include replace --inplace -s ./source.txt <span class=\"s2\">\"line1</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">line2\"</span> <span class=\"s2\">\"line1</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">something_between</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">line2\"</span>\n</pre>\n<p>piping under Linux:</p>\n<pre><span class=\"c1\"># piping examples\n</span>$&gt; rst_include include -s ./source.rst <span class=\"p\">|</span> rst_include replace -t ./target.rst <span class=\"s2\">\"{template_string}\"</span> <span class=\"s2\">\"new content\"</span>\n<span class=\"c1\"># same result\n</span>$&gt; cat ./source.rst <span class=\"p\">|</span> rst_include include <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"{template_string}\"</span> <span class=\"s2\">\"new content\"</span> &gt; ./target.rst\n\n<span class=\"c1\"># multiline example\n</span>$&gt; cat ./text.txt <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"line1</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">line2\"</span> <span class=\"s2\">\"line1</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">something_between</span><span class=\"si\">${</span><span class=\"nv\">IFS</span><span class=\"si\">}</span><span class=\"s2\">line2\"</span> &gt; ./text.txt\n</pre>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"example-build-script-python\">\n<h2>Example Build Script Python</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">argparse</span>\n<span class=\"kn\">import</span> <span class=\"nn\">errno</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rst_include</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rst_include.libs</span> <span class=\"kn\">import</span> <span class=\"n\">lib_log</span>\n<span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n\n<span class=\"c1\"># CONSTANTS &amp; PROJECT SPECIFIC FUNCTIONS</span>\n<span class=\"n\">codeclimate_link_hash</span> <span class=\"o\">=</span> <span class=\"s2\">\"ff3f414903627e5cfc35\"</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">project_specific</span><span class=\"p\">(</span><span class=\"n\">repository_slug</span><span class=\"p\">,</span> <span class=\"n\">repository</span><span class=\"p\">,</span> <span class=\"n\">repository_dashed</span><span class=\"p\">):</span>\n    <span class=\"c1\"># PROJECT SPECIFIC</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'project_specific'</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'create help documentation files </span><span class=\"si\">{dir}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">dir</span><span class=\"o\">=</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">curdir</span><span class=\"p\">)))</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{sys_executable}</span><span class=\"s1\"> ./rst_include/rst_include.py -h &gt; ./docs/rst_include_help_output.txt'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sys_executable</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"p\">),</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{sys_executable}</span><span class=\"s1\"> ./rst_include/rst_include.py include -h &gt; ./docs/rst_include_help_include_output.txt'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sys_executable</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"p\">),</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{sys_executable}</span><span class=\"s1\"> ./rst_include/rst_include.py replace -h &gt; ./docs/rst_include_help_replace_output.txt'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">sys_executable</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">executable</span><span class=\"p\">),</span> <span class=\"n\">shell</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parse_args</span><span class=\"p\">(</span><span class=\"n\">cmd_args</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">argv</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]):</span>\n    <span class=\"c1\"># type: ([]) -&gt; []</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">(</span>\n        <span class=\"n\">description</span><span class=\"o\">=</span><span class=\"s1\">'Create Readme.rst'</span><span class=\"p\">,</span>\n        <span class=\"n\">epilog</span><span class=\"o\">=</span><span class=\"s1\">'check the documentation on github'</span><span class=\"p\">,</span>\n        <span class=\"n\">add_help</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'travis_repo_slug'</span><span class=\"p\">,</span> <span class=\"n\">metavar</span><span class=\"o\">=</span><span class=\"s1\">'TRAVIS_REPO_SLUG in the form \"&lt;github_account&gt;/&lt;repository&gt;\"'</span><span class=\"p\">)</span>\n    <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">(</span><span class=\"n\">cmd_args</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"n\">parser</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"n\">logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'build_docs'</span><span class=\"p\">)</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'create the README.rst'</span><span class=\"p\">)</span>\n    <span class=\"n\">travis_repo_slug</span> <span class=\"o\">=</span> <span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">travis_repo_slug</span>\n    <span class=\"n\">repository</span> <span class=\"o\">=</span> <span class=\"n\">travis_repo_slug</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">)[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n    <span class=\"n\">repository_dashed</span> <span class=\"o\">=</span> <span class=\"n\">repository</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">project_specific</span><span class=\"p\">(</span><span class=\"n\">travis_repo_slug</span><span class=\"p\">,</span> <span class=\"n\">repository</span><span class=\"p\">,</span> <span class=\"n\">repository_dashed</span><span class=\"p\">)</span>\n\n    <span class=\"sd\">\"\"\"\n    paths absolute, or relative to the location of the config file\n    the notation for relative files is like on windows or linux - not like in python.\n    so You might use ../../some/directory/some_document.rst to go two levels back.\n    avoid absolute paths since You never know where the program will run.\n    \"\"\"</span>\n\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'include the include blocks'</span><span class=\"p\">)</span>\n    <span class=\"n\">rst_inc</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./docs/README_template.rst'</span><span class=\"p\">,</span>\n            <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'./README.rst'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># please note that the replace syntax is not shown correctly in the README.rst,</span>\n    <span class=\"c1\"># because it gets replaced itself by the build_docs.py</span>\n    <span class=\"c1\"># we could overcome this by first replacing, and afterwards including -</span>\n    <span class=\"c1\"># check out the build_docs.py for the correct syntax !</span>\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'replace repository related strings'</span><span class=\"p\">)</span>\n    <span class=\"n\">rst_str_replace</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./README.rst'</span><span class=\"p\">,</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                    <span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">'bitranox/rst_include'</span><span class=\"p\">,</span>\n                    <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">travis_repo_slug</span><span class=\"p\">,</span>\n                    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">rst_str_replace</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./README.rst'</span><span class=\"p\">,</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                    <span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">'rst_include'</span><span class=\"p\">,</span>\n                    <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">repository</span><span class=\"p\">,</span>\n                    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">rst_str_replace</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./README.rst'</span><span class=\"p\">,</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                    <span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">'rst-include'</span><span class=\"p\">,</span>\n                    <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">repository_dashed</span><span class=\"p\">,</span>\n                    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">rst_str_replace</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">'./README.rst'</span><span class=\"p\">,</span>\n                    <span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span>\n                    <span class=\"n\">old</span><span class=\"o\">=</span><span class=\"s1\">'ff3f414903627e5cfc35'</span><span class=\"p\">,</span>\n                    <span class=\"n\">new</span><span class=\"o\">=</span><span class=\"n\">codeclimate_link_hash</span><span class=\"p\">,</span>\n                    <span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'done'</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">lib_log</span><span class=\"o\">.</span><span class=\"n\">setup_logger</span><span class=\"p\">()</span>\n    <span class=\"n\">main_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"s1\">'main'</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">_args</span><span class=\"p\">,</span> <span class=\"n\">_parser</span> <span class=\"o\">=</span> <span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n        <span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">_args</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># see https://www.thegeekstuff.com/2010/10/linux-error-codes for error codes</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">ENOENT</span><span class=\"p\">)</span>      <span class=\"c1\"># No such file or directory</span>\n    <span class=\"k\">except</span> <span class=\"ne\">FileExistsError</span><span class=\"p\">:</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">EEXIST</span><span class=\"p\">)</span>      <span class=\"c1\"># File exists</span>\n    <span class=\"k\">except</span> <span class=\"ne\">TypeError</span><span class=\"p\">:</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">EINVAL</span><span class=\"p\">)</span>      <span class=\"c1\"># Invalid Argument</span>\n    <span class=\"k\">except</span> <span class=\"ne\">ValueError</span><span class=\"p\">:</span>\n        <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"n\">errno</span><span class=\"o\">.</span><span class=\"n\">EINVAL</span><span class=\"p\">)</span>      <span class=\"c1\"># Invalid Argument</span>\n</pre>\n</div>\n<div id=\"example-build-script-dos-batch\">\n<h2>Example Build Script DOS Batch</h2>\n<pre><span class=\"c1\">REM</span>\n<span class=\"c1\">REM rst_include needs to be installed and python paths set correctly</span>\n<span class=\"p\">@</span><span class=\"k\">echo</span> off\n<span class=\"k\">cls</span>\n\n<span class=\"c1\">REM # You might also use Environment Variable here, or as commandline parameter</span>\n<span class=\"c1\">REM # this is just an example, I use actually the build_readme.py python file myself</span>\n<span class=\"c1\">REM # I do not recommend cmd files anymore - why it it is so much easier under python ...</span>\n<span class=\"c1\">REM # I am sure there is a more elegant was to do it on batch files, this is only an example</span>\n\n<span class=\"k\">SET</span> <span class=\"nv\">repository_slug</span><span class=\"p\">=</span><span class=\"s2\">\"bitranox/rst_include\"</span>\n<span class=\"k\">SET</span> <span class=\"nv\">repository</span><span class=\"p\">=</span><span class=\"s2\">\"rst_include\"</span>\n<span class=\"k\">SET</span> <span class=\"nv\">codeclimate_link_hash</span><span class=\"p\">=</span><span class=\"s2\">\"ff3f414903627e5cfc35\"</span>\n\n<span class=\"c1\">REM # get dashed repository name for pypi links</span>\n<span class=\"k\">echo</span> <span class=\"nv\">%repository%</span> <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"_\"</span> <span class=\"s2\">\"-\"</span> <span class=\"p\">&gt;</span> temp.txt\n<span class=\"k\">set</span> <span class=\"k\">/p</span> <span class=\"nv\">repository_dashed</span><span class=\"p\">=</span> <span class=\"p\">&lt;</span> temp.txt\n<span class=\"k\">del</span> temp.txt\n\n\n<span class=\"c1\">REM paths absolute, or relative to the location of the config file</span>\n<span class=\"c1\">REM the notation for relative files is like on windows or linux - not like in python.</span>\n<span class=\"c1\">REM so You might use ../../some/directory/some_document.rst to go two levels back.</span>\n<span class=\"c1\">REM avoid absolute paths since You never know where the program will run.</span>\n\n<span class=\"k\">echo</span> 'create the sample help outputs'\nrst_include -h <span class=\"p\">&gt;</span> ./docs/rst_include_help_output.txt\nrst_include include -h <span class=\"p\">&gt;</span> ./docs/rst_include_help_include_output.txt\nrst_include replace -h <span class=\"p\">&gt;</span> ./docs/rst_include_help_replace_output.txt\n\n<span class=\"k\">echo</span> <span class=\"s2\">\"import the include blocks\"</span>\nrst_include include -s ./docs/README_template.rst -t ./README.rst\n\n<span class=\"c1\">REM please note that the replace syntax is not shown correctly in the README.rst,</span>\n<span class=\"c1\">REM because it gets replaced itself by the build_docs.py</span>\n<span class=\"c1\">REM we could overcome this by first replacing, and afterwards including -</span>\n<span class=\"c1\">REM check out the build_docs.cmd for the correct syntax !</span>\n\n<span class=\"k\">echo</span> <span class=\"s2\">\"replace repository_slug\"</span>\nrst_include --inplace replace -s ./docs/README_template.rst bitranox/rst_include <span class=\"nv\">%repository_slug%</span>\n<span class=\"k\">echo</span> <span class=\"s2\">\"replace repository\"</span>\nrst_include --inplace replace -s ./docs/README_template.rst rst_include <span class=\"nv\">%repository%</span>\n<span class=\"k\">echo</span> <span class=\"s2\">\"replace repository_dashed\"</span>\nrst_include --inplace replace -s ./docs/README_template.rst rst-include <span class=\"nv\">%repository_dashed%</span>\n<span class=\"k\">echo</span> <span class=\"s2\">\"replace codeclimate_link_hash\"</span>\nrst_include --inplace replace -s ./docs/README_template.rst ff3f414903627e5cfc35 <span class=\"nv\">%codeclimate_link_hash%</span>\n\n<span class=\"k\">echo</span> 'finished'\n</pre>\n</div>\n<div id=\"example-build-script-shellscript\">\n<h2>Example Build Script Shellscript</h2>\n<pre><span class=\"ch\">#!/bin/bash\n</span>\n<span class=\"c1\">### CONSTANTS\n</span><span class=\"nv\">codeclimate_link_hash</span><span class=\"o\">=</span><span class=\"s2\">\"ff3f414903627e5cfc35\"</span>\n<span class=\"c1\"># TRAVIS_TAG\n</span>\n<span class=\"k\">function</span> include_dependencies <span class=\"o\">{</span>\n    <span class=\"nb\">local</span> <span class=\"nv\">my_dir</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span> <span class=\"nb\">cd</span> <span class=\"s2\">\"</span><span class=\"k\">$(</span>dirname <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">BASH_SOURCE</span><span class=\"p\">[0]</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"k\">)</span><span class=\"s2\">\"</span> <span class=\"p\">;</span> <span class=\"nb\">pwd</span> -P <span class=\"k\">)</span><span class=\"s2\">\"</span>  <span class=\"c1\"># this gives the full path, even for sourced scripts\n</span>    chmod +x <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">my_dir</span><span class=\"si\">}</span><span class=\"s2\">\"</span>/lib_bash/*.sh\n    <span class=\"nb\">source</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">my_dir</span><span class=\"si\">}</span><span class=\"s2\">/lib_bash/lib_color.sh\"</span>\n<span class=\"o\">}</span>\n\ninclude_dependencies  <span class=\"c1\"># we need to do that via a function to have local scope of my_dir\n</span>\n<span class=\"k\">function</span> check_repository_name <span class=\"o\">{</span>\n    <span class=\"k\">if</span> <span class=\"o\">[[</span> -z <span class=\"si\">${</span><span class=\"nv\">TRAVIS_REPO_SLUG</span><span class=\"si\">}</span> <span class=\"o\">]]</span>\n        <span class=\"k\">then</span>\n            clr_bold clr_red <span class=\"s2\">\"ERROR no travis repository name set - exiting\"</span>\n            <span class=\"nb\">exit</span> <span class=\"m\">1</span>\n        <span class=\"k\">fi</span>\n<span class=\"o\">}</span>\n\nclr_bold clr_green <span class=\"s2\">\"Build README.rst for repository: </span><span class=\"si\">${</span><span class=\"nv\">TRAVIS_REPO_SLUG</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n\ncheck_repository_name\n\n<span class=\"nv\">repository</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">TRAVIS_REPO_SLUG</span><span class=\"p\">#*/</span><span class=\"si\">}</span><span class=\"s2\">\"</span>                                 <span class=\"c1\"># \"username/repository_name\" --&gt; \"repository_name\"\n</span><span class=\"nv\">repository_dashed</span><span class=\"o\">=</span><span class=\"s2\">\"</span><span class=\"k\">$(</span> <span class=\"nb\">echo</span> -e <span class=\"s2\">\"</span><span class=\"nv\">$repository</span><span class=\"s2\">\"</span> <span class=\"p\">|</span> tr  <span class=\"s1\">'_'</span> <span class=\"s1\">'-'</span>  <span class=\"k\">)</span><span class=\"s2\">\"</span>       <span class=\"c1\"># \"repository_name --&gt; repository-name\"\n</span>\nclr_green <span class=\"s2\">\"create the sample help outputs\"</span>\nrst_include -h &gt; ./docs/rst_include_help_output.txt\nrst_include include -h &gt; ./docs/rst_include_help_include_output.txt\nrst_include replace -h &gt; ./docs/rst_include_help_replace_output.txt\n\nclr_green <span class=\"s2\">\"import the include blocks\"</span>\nrst_include include -s ./docs/README_template.rst -t ./docs/README_template_included.rst\n\nclr_green <span class=\"s2\">\"replace repository strings\"</span>\n\n<span class=\"c1\"># please note that the replace syntax is not shown correctly in the README.rst,\n# because it gets replaced itself by the build_docs.py\n# we could overcome this by first replacing, and afterwards including -\n# check out the build_docs.sh for the correct syntax !\n</span>\n<span class=\"c1\"># example for piping\n</span>cat ./docs/README_template_included.rst <span class=\"se\">\\\n</span>    <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"bitranox/rst_include\"</span> <span class=\"s2\">\"</span><span class=\"si\">${</span><span class=\"nv\">TRAVIS_REPO_SLUG</span><span class=\"si\">}</span><span class=\"s2\">\"</span> <span class=\"se\">\\\n</span>    <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"rst_include\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$rst_include</span><span class=\"s2\">\"</span> <span class=\"se\">\\\n</span>    <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"rst-include\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$rst</span><span class=\"s2\">-include\"</span> <span class=\"se\">\\\n</span>    <span class=\"p\">|</span> rst_include replace <span class=\"s2\">\"ff3f414903627e5cfc35\"</span> <span class=\"s2\">\"</span><span class=\"nv\">$ff3f414903627e5cfc35</span><span class=\"s2\">\"</span> <span class=\"se\">\\\n</span>     &gt; ./README.rst\n\nclr_green <span class=\"s2\">\"cleanup\"</span>\nrm ./docs/README_template_included.rst\n\nclr_green <span class=\"s2\">\"done\"</span>\nclr_green <span class=\"s2\">\"******************************************************************************************************************\"</span>\nclr_bold clr_green <span class=\"s2\">\"FINISHED building README.rst\"</span>\nclr_green <span class=\"s2\">\"******************************************************************************************************************\"</span>\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"rst-includes-examples\">\n<h2>RST Includes Examples</h2>\n</div>\n<div id=\"simple-code-include\">\n<h2>simple code include</h2>\n<pre><span class=\"c1\"># simple text include, empty line after\n</span>.. include:: ./include1.py\n    :code: python\n    :number-lines: <span class=\"m\">10</span>\n    :start-line: <span class=\"m\">6</span>\n    :end-line: <span class=\"m\">23</span>\n    :start-after: <span class=\"c1\"># start marker\n</span>    :end-before: <span class=\"c1\"># end-marker\n</span>    :encoding: utf-8\n</pre>\n</div>\n<div id=\"text-or-rst-file-include\">\n<h2>text or RST file include</h2>\n<pre><span class=\"c1\"># simple text include, without code setting - it is imported as normal textfile, as it is.\n# You might also include other rst files\n</span>.. include:: include3.py\n    :start-line: <span class=\"m\">0</span>       <span class=\"c1\"># working, also end-line, etc ... all others suppressed.\n</span>    :number-lines:       <span class=\"c1\"># not working without :code: setting</span>\n</pre>\n</div>\n<div id=\"include-jupyter-notebooks\">\n<h2>include jupyter notebooks</h2>\n<p>jupyter notebooks can be first converted to rst via nbconvert, see : <a href=\"https://nbconvert.readthedocs.io/en/latest/usage.html#convert-rst\" rel=\"nofollow\">https://nbconvert.readthedocs.io/en/latest/usage.html#convert-rst</a></p>\n<p>pandoc is a requirement for nbconvert, see : <a href=\"https://pandoc.org/\" rel=\"nofollow\">https://pandoc.org/</a></p>\n<pre><span class=\"c1\"># convert the attached test.ipynb to test.rst\n</span>$ jupyter nbconvert --to rst test.ipynb\n</pre>\n<p>unfortunately the pictures are not shown and needed to be extracted - a first hint might be : <a href=\"https://gist.github.com/sglyon/5687b8455a0107afc6f4c60b5f313670\" rel=\"nofollow\">https://gist.github.com/sglyon/5687b8455a0107afc6f4c60b5f313670</a></p>\n<p>I would prefer to exctract the pictures after the conversion to RST, and make it a module in rst_include.\nFilenames can be a hash of the picture data, in order to avoid web caching issues.</p>\n</div>\n<hr class=\"docutils\">\n<div id=\"rst-include-parameters\">\n<h2>RST Include Parameters</h2>\n<p>taken from : <a href=\"http://docutils.sourceforge.net/docs/ref/rst/directives.html\" rel=\"nofollow\">http://docutils.sourceforge.net/docs/ref/rst/directives.html</a></p>\n<p>Standard data files intended for inclusion in reStructuredText documents are distributed with the Docutils source code, located in the \u201cdocutils\u201d package in the docutils/parsers/rst/include directory.\nTo access these files, use the special syntax for standard \u201cinclude\u201d data files, angle brackets around the file name:</p>\n<pre>.. include:: &lt;isonum.txt&gt;    <span class=\"c1\"># not supported now</span>\n</pre>\n<p>The current set of standard \u201cinclude\u201d data files consists of sets of substitution definitions. See reStructuredText Standard Definition Files for details.</p>\n<p>The following options are recognized:</p>\n<pre><span class=\"c1\"># Only the content starting from this line will be included.\n# (As usual in Python, the first line has index 0 and negative values count from the end.)\n# Combining start/end-line and start-after/end-before is possible.\n# The text markers will be searched in the specified lines (further limiting the included content).\n</span>start-line : integer\n</pre>\n<pre><span class=\"c1\"># Only the content up to (but excluding) this line will be included.\n# Combining start/end-line and start-after/end-before is possible.\n# The text markers will be searched in the specified lines (further limiting the included content).\n</span>end-line : integer\n</pre>\n<pre><span class=\"c1\"># Only the content after the first occurrence of the specified text will be included.\n# Combining start/end-line and start-after/end-before is possible.\n# The text markers will be searched in the specified lines (further limiting the included content).\n</span>start-after : text to find in the external data file\n</pre>\n<pre><span class=\"c1\"># Only the content before the first occurrence of the specified text (but after any after text) will be included.\n# Combining start/end-line and start-after/end-before is possible.\n# The text markers will be searched in the specified lines (further limiting the included content).\n</span>end-before : text to find in the external data file\n</pre>\n<pre><span class=\"c1\"># The entire included text is inserted into the document as a single literal block.\n</span>literal : flag <span class=\"o\">(</span>empty<span class=\"o\">)</span>\n</pre>\n<pre><span class=\"c1\"># The argument and the content of the included file are passed to the code directive (useful for program listings).\n# (New in Docutils 0.9)\n</span>code : formal language <span class=\"o\">(</span>optional<span class=\"o\">)</span>\n</pre>\n<pre><span class=\"c1\"># Precede every code line with a line number. The optional argument is the number of the first line (default 1).\n# Works only with code or literal. (New in Docutils 0.9)\n</span>number-lines : <span class=\"o\">[</span>start line number<span class=\"o\">]</span>\n</pre>\n<pre><span class=\"c1\"># The text encoding of the external data file. Defaults to the document's input_encoding.\n</span>encoding : name of text encoding\n</pre>\n<pre><span class=\"c1\"># Number of spaces for hard tab expansion. A negative value prevents expansion of hard tabs.\n# Defaults to the tab_width configuration setting.\n</span>tab-width : integer\n</pre>\n<pre>With code or literal the common options :class: and :name: are recognized as well.\nall other option in the format :&lt;option&gt;: are just passed through the codeblock\n</pre>\n<hr class=\"docutils\">\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<p>following modules will be automatically installed :</p>\n<pre>pytest  <span class=\"c1\"># see : https://github.com/pytest-dev/pytest\n</span>typing  <span class=\"c1\"># see : https://pypi.org/project/typing/</span>\n</pre>\n</div>\n<hr class=\"docutils\">\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<ul>\n<li>special thanks to \u201cuncle bob\u201d Robert C. Martin, especially for his books on \u201cclean code\u201d and \u201cclean architecture\u201d</li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div id=\"contribute\">\n<h3>Contribute</h3>\n<p>I would love for you to fork and send me pull request for this project.\n- <a href=\"https://github.com/bitranox/rst_include/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">please Contribute</a></p>\n</div>\n<hr class=\"docutils\">\n<div id=\"license\">\n<h3>License</h3>\n<p>This software is licensed under the <a href=\"http://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\">MIT license</a></p>\n</div>\n</div>\n<hr class=\"docutils\">\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.8</h3>\n<ul>\n<li>strict mypy typechecking</li>\n<li>drop python 2.7 / 3.5 support</li>\n<li>implement \u2013inplace option</li>\n<li>implement \u2013quiet option</li>\n<li>implement multiline string replacement</li>\n<li>extend documentation</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.2</h3>\n<p>2019-04-28: fix import errors</p>\n</div>\n<div id=\"id3\">\n<h3>1.0.1</h3>\n<p>2019-04-28: add empty line at the end of the assembled documentation, to be able to add CHANGES.rst with setup.py</p>\n</div>\n<div id=\"id4\">\n<h3>1.0.0</h3>\n<p>2019-04-19: Initial public release, PyPi Release</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5527673, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8126ff162a756cf9f4e123d58b079333", "sha256": "c3a0f13fb8faf79096620f78bad4e7c1bd8a0bca4e7c072d41acac1d6c6f3c78"}, "downloads": -1, "filename": "rst_include-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8126ff162a756cf9f4e123d58b079333", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8169, "upload_time": "2019-04-28T16:27:52", "upload_time_iso_8601": "2019-04-28T16:27:52.373594Z", "url": "https://files.pythonhosted.org/packages/eb/60/4622e2b1b6d3f27a88fc939f7ba54ff8f4c487e06ff7ed095c81d8e4bd43/rst_include-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51ecb785abbf29bf7c9644bc17767f8d", "sha256": "4030cc41992a1f4cf76ff108da634c986d2815bc1545e96f20033703ddb7595d"}, "downloads": -1, "filename": "rst_include-1.0.0.tar.gz", "has_sig": false, "md5_digest": "51ecb785abbf29bf7c9644bc17767f8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8036, "upload_time": "2019-04-28T16:28:08", "upload_time_iso_8601": "2019-04-28T16:28:08.134593Z", "url": "https://files.pythonhosted.org/packages/26/ea/f62c5d7428e3b0cd70929c5aa509f0eb1c78bbc01daa8d9d11d07f0aade6/rst_include-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "65e8558336cd8613d84378dd3285c96b", "sha256": "74ebcd71d53934c68d2200825e0866b73e50acb90a0fa9eb2aff1e37938869bb"}, "downloads": -1, "filename": "rst_include-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "65e8558336cd8613d84378dd3285c96b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27822, "upload_time": "2019-04-28T17:43:19", "upload_time_iso_8601": "2019-04-28T17:43:19.839546Z", "url": "https://files.pythonhosted.org/packages/c4/cd/efed51365f1cca883a41d43a9983cb550bd8dead35a407a4ed8c7add1381/rst_include-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "590792cb0bd6264b04eb5d8554678ac9", "sha256": "a478245b4e05202275e9620d3e4a7da04825a67a0a34b8750a2dfd09db77e9f7"}, "downloads": -1, "filename": "rst_include-1.0.2.tar.gz", "has_sig": false, "md5_digest": "590792cb0bd6264b04eb5d8554678ac9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23822, "upload_time": "2019-04-28T17:43:22", "upload_time_iso_8601": "2019-04-28T17:43:22.478778Z", "url": "https://files.pythonhosted.org/packages/29/1a/899e2b39e7d797c8a70a1114fd319e5533802b721b752978493bcc476f12/rst_include-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "6a2ab59d1590ae2f7400d9da06299585", "sha256": "1199182332ce1db143dd5d2434c0acdd59ff5da9354f772ae7b362dfb0bea627"}, "downloads": -1, "filename": "rst_include-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6a2ab59d1590ae2f7400d9da06299585", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30112, "upload_time": "2019-04-28T20:08:45", "upload_time_iso_8601": "2019-04-28T20:08:45.839576Z", "url": "https://files.pythonhosted.org/packages/c7/13/281b3ea657f6d0b9cf9995549a8b41c34cbe343b8fe1e5e098b1c1e0f26e/rst_include-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c2b3c6518999d52ddc30b270aa42fe1", "sha256": "480300a5e34b8acf705ea5248c96fe6f75e6cd4b70adb6395e2aea0b1b11c904"}, "downloads": -1, "filename": "rst_include-1.0.3.tar.gz", "has_sig": false, "md5_digest": "2c2b3c6518999d52ddc30b270aa42fe1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34217, "upload_time": "2019-04-28T20:08:48", "upload_time_iso_8601": "2019-04-28T20:08:48.462780Z", "url": "https://files.pythonhosted.org/packages/79/b3/facd0c85628a782d605899198e686178099bb9766da6e0b51a0f047a43a5/rst_include-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "9864f5670c37a78cc9657690db2d7c01", "sha256": "ae8a088551cf861bbb38ce1b9e75260f05ac71183988f722ff8f59ed0d5bb087"}, "downloads": -1, "filename": "rst_include-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "9864f5670c37a78cc9657690db2d7c01", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 30109, "upload_time": "2019-04-28T21:45:17", "upload_time_iso_8601": "2019-04-28T21:45:17.990781Z", "url": "https://files.pythonhosted.org/packages/dc/34/5982d65207e6b7bf747637c96bedf6b4ffbfb88fa3ed0d55dad2ec2c72ff/rst_include-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ca50e3226eaf3e0286cb9ec57e3a8f1", "sha256": "8b03d63af54804c16708bf7af3c98c3f31285c183f7d19dc33d65d20ce857743"}, "downloads": -1, "filename": "rst_include-1.0.4.tar.gz", "has_sig": false, "md5_digest": "2ca50e3226eaf3e0286cb9ec57e3a8f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34298, "upload_time": "2019-04-28T21:45:20", "upload_time_iso_8601": "2019-04-28T21:45:20.658860Z", "url": "https://files.pythonhosted.org/packages/fa/fe/61bc5c41b67859d6dee12e3ffd36a7fb8c5fb25da254e73169b49ebc95f4/rst_include-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "52f7227e4db7814d7d3dd249a5aa0efb", "sha256": "7f5c15190d13338e71ffb0ec376ba21964d8ff2e849abd3048fb67eb09c9a3be"}, "downloads": -1, "filename": "rst_include-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "52f7227e4db7814d7d3dd249a5aa0efb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.5.2", "size": 31783, "upload_time": "2019-05-09T12:38:04", "upload_time_iso_8601": "2019-05-09T12:38:04.749224Z", "url": "https://files.pythonhosted.org/packages/f3/cf/815a9a8f9f397d69207cb107e7ef98f421adcd8ccdf29811826c22de19e7/rst_include-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b5a9f693a1d04d3af2e1bdf14265fda", "sha256": "96b736374425f12f23a42e1e8c7b57f2e46be2f1b950e7605824739c09b3ea25"}, "downloads": -1, "filename": "rst_include-1.0.5.tar.gz", "has_sig": false, "md5_digest": "4b5a9f693a1d04d3af2e1bdf14265fda", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.5.2", "size": 35717, "upload_time": "2019-05-09T12:38:06", "upload_time_iso_8601": "2019-05-09T12:38:06.262919Z", "url": "https://files.pythonhosted.org/packages/76/f5/d657a9c2de42e7758b74e902ee5bcc8719d62fa52b66451556d2c0f6eef3/rst_include-1.0.5.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "8ad8e5f46bcf5a8ef3393f840f06c0ca", "sha256": "176cd4440ecdc24932545620a45d2ab6312f24682f190563f3eccf8b659dbe01"}, "downloads": -1, "filename": "rst_include-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "8ad8e5f46bcf5a8ef3393f840f06c0ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 33503, "upload_time": "2019-07-13T19:24:25", "upload_time_iso_8601": "2019-07-13T19:24:25.234019Z", "url": "https://files.pythonhosted.org/packages/f2/ba/53ba99c6a7cd06c10915401b863abc351e0ed82131c01ed54b5da584cba2/rst_include-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4c4d76850d60822dc12c5db26c4dc12", "sha256": "d233bbd072f0d13e0f7835a11c1cc43cc34e377faa2fdd573627d1a7de3cb3a7"}, "downloads": -1, "filename": "rst_include-1.0.8.tar.gz", "has_sig": false, "md5_digest": "a4c4d76850d60822dc12c5db26c4dc12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 112991, "upload_time": "2019-07-13T19:24:27", "upload_time_iso_8601": "2019-07-13T19:24:27.310562Z", "url": "https://files.pythonhosted.org/packages/47/65/6dfdce29ccddd8521b1879a8d06ffb10282df201b6306566bd129b449ebb/rst_include-1.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ad8e5f46bcf5a8ef3393f840f06c0ca", "sha256": "176cd4440ecdc24932545620a45d2ab6312f24682f190563f3eccf8b659dbe01"}, "downloads": -1, "filename": "rst_include-1.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "8ad8e5f46bcf5a8ef3393f840f06c0ca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 33503, "upload_time": "2019-07-13T19:24:25", "upload_time_iso_8601": "2019-07-13T19:24:25.234019Z", "url": "https://files.pythonhosted.org/packages/f2/ba/53ba99c6a7cd06c10915401b863abc351e0ed82131c01ed54b5da584cba2/rst_include-1.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4c4d76850d60822dc12c5db26c4dc12", "sha256": "d233bbd072f0d13e0f7835a11c1cc43cc34e377faa2fdd573627d1a7de3cb3a7"}, "downloads": -1, "filename": "rst_include-1.0.8.tar.gz", "has_sig": false, "md5_digest": "a4c4d76850d60822dc12c5db26c4dc12", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 112991, "upload_time": "2019-07-13T19:24:27", "upload_time_iso_8601": "2019-07-13T19:24:27.310562Z", "url": "https://files.pythonhosted.org/packages/47/65/6dfdce29ccddd8521b1879a8d06ffb10282df201b6306566bd129b449ebb/rst_include-1.0.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:32 2020"}