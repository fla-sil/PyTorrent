{"info": {"author": "Charles Morton", "author_email": "charles.morton@dri.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.6"], "description": "===============\nOpenET - SSEBop\n===============\n\n|version| |build| |codecov|\n\n**WARNING: This code is in development, is being provided without support, and is subject to change at any time without notification**\n\nThis repository provides `Google Earth Engine <https://earthengine.google.com/>`__ Python API based implementation of the SSEBop ET model.\n\nThe Operational Simplified Surface Energy Balance (SSEBop) model computes daily total actual evapotranspiration (ETa) using land surface temperature (Ts), maximum air temperature (Ta) and reference ET (ETr).\nThe SSEBop model does not solve all the energy balance terms explicitly; rather, it defines the limiting conditions based on clear-sky net radiation balance principles.\nThis approach predefines unique sets of \"hot/dry\" and \"cold/wet\" limiting values for each pixel and is designed to reduce model operator errors when estimating ET routinely.\n\nBasic SSEBop model architecture in Earth Engine:\n\n.. image:: docs/SSEBop_GEE_flow.PNG\n\nInput Collections\n=================\n\nSSEBop ET can currently only be computed for Landsat Collection 1 TOA image from the following Earth Engine image collections:\n\n * LANDSAT/LC08/C01/T1_TOA or LANDSAT/LC08/C01/T1_RT_TOA\n * LANDSAT/LE07/C01/T1_TOA or LANDSAT/LE07/C01/T1_RT_TOA\n * LANDSAT/LT05/C01/T1_TOA\n\nNote that scene specific Tcorr values have only been computed for Landsat images covering the contiguous United States (CONUS).  SSEBop estimates for Landsat images outside the CONUS will use the default c-factor value of 0.978 (see the `Tcorr (C-factor)`_ section for more details).\n\nModel Design\n============\n\nThe primary component of the SSEBop model is the Image() class.  The Image class can be used to compute a single fraction of reference ET (ETf) image from a single input image.  The Image class should generally be instantiated from an Earth Engine Landsat image using the collection specific methods listed below.  ET image collections can be built by computing ET in a function that is mapped over a collection of input images.  Please see the `Example Notebooks`_ for more details.\n\nLandsat Collection 1 TOA Input Image\n------------------------------------\n\nTo instantiate the class for a Landsat Collection 1 TOA image, use the Image.from_landsat_c1_toa() method.\n\nThe input Landsat image must have the following bands and properties:\n\n=================  ======================================\nSPACECRAFT_ID      Band Names\n=================  ======================================\nLANDSAT_5          B1, B2, B3, B4, B5, B7, B6, BQA\nLANDSAT_7          B1, B2, B3, B4, B5, B7, B6_VCID_1, BQA\nLANDSAT_8          B2, B3, B4, B5, B6, B7, B10, BQA\n=================  ======================================\n\n=================  =============================================\nProperty           Description\n=================  =============================================\nsystem:index       - Landsat Scene ID\n                   - Must be in the Earth Engine format (e.g. LC08_044033_20170716)\n                   - Used to lookup the scene specific c-factor\nsystem:time_start  Image datetime in milliseconds since 1970\nSPACECRAFT_ID      - Used to determine which Landsat type\n                   - Must be: LANDSAT_5, LANDSAT_7, or LANDSAT_8\n=================  =============================================\n\nModel Output\n------------\n\nThe primary output of the SSEBop model is the fraction of reference ET (ETf).  The actual ET (ETa) can then be computed by multiplying the Landsat-based ETf image with the reference ET (e.g. ETr from GRIDMET).\n\nExample\n-------\n\n.. code-block:: python\n\n    import openet.ssebop as ssebop\n\n    landsat_img = ee.Image('LANDSAT/LC08/C01/T1_RT_TOA/LC08_044033_20170716')\n    et_fraction = ssebop.Image.from_landsat_c1_toa(landsat_img).et_fraction\n    et_reference = ee.Image('IDAHO_EPSCOR/GRIDMET/20170716').select('eto')\n    et_actual = et_fraction.multiply(et_reference)\n\nCustom Input Image\n------------------\n\nSSEBop images can also be built manually by instantiating the class with an ee.Image with the following bands: 'lst' (land surface temperature [K]) and 'ndvi' (normalized difference vegetation index).  The input image must have 'system:index' and 'system:time_start' properties (described above).\n\n.. code-block:: python\n\n    import openet.ssebop as ssebop\n\n    input_img = ee.Image([ee.Image(lst), ee.Image(ndvi)]) \\\n        .rename(['lst', 'ndvi']) \\\n        .set({\n            'system:index': 'LC08_044033_20170716',\n            'system:time_start': ee.Date.fromYMD(2017, 7, 16).millis()})\n    et_fraction = ssebop.Image(input_img).et_fraction\n\nExample Notebooks\n=================\n\nDetailed Jupyter Notebooks of the various approaches for calling the OpenET SSEBop model are provided in the \"examples\" folder.\n\n+ `Computing daily ET for a single Landsat image <examples/single_image.ipynb>`__\n+ `Computing a daily ET image collection from Landsat image collection <examples/collection.ipynb>`__\n+ `Computing annual ET from a collection <examples/interpolate.ipynb>`__\n\nAncillary Datasets\n==================\n\nMaximum Daily Air Temperature (Tmax)\n------------------------------------\nThe daily maximum air temperature (Tmax) is essential for establishing the maximum ET limit (cold boundary) as explained in Senay2017_.\n\nDefault Asset ID: projects/usgs-ssebop/tmax/daymet_median_v2\n\nLand Surface Temperature\n------------------------\nLand Surface Temperature (LST) is currently calculated in the SSEBop approach from Landsat Top-of-Atmosphere images by including commonly used calibration steps and atmospheric correction techniques. These include calculations for: (1) spectral radiance conversion to the at-sensor brightness temperature; (2) atmospheric absorption and re-emission value; and (3) surface emissivity. For additional information, users can refer to section 3.2 of the Methodology in Senay2016_.\n\ndT\n--\nThe SSEBop ET model uses dT as a predefined temperature difference between Thot and Tcold for each pixel.\nIn SSEBop formulation, hot and cold limits are defined on the same pixel; therefore, dT actually represents the vertical temperature difference between the surface temperature of a theoretical bare/dry condition of a given pixel and the air temperature at the canopy level of the same pixel as explained in Senay2013_. The input dT is calculated under average-sky conditions and assumed not to change from year to year, but is unique for each day and location.\n\nDefault Asset ID: projects/usgs-ssebop/dt/daymet_median_v0\n\nElevation\n---------\nThe default elevation dataset is the USGS SRTM global image asset.\n\nDefault Asset ID: `USGS/SRTMGL1_003 <https://developers.google.com/earth-engine/datasets/catalog/USGS_SRTMGL1_003>`__\n\nThe elevation parameter will accept any Earth Engine image.\n\nTcorr (C-factor)\n----------------\nIn order to correspond the maximum air temperature with cold/wet limiting environmental conditions, the SSEBop model uses a correction coefficient (C-factor) uniquely calculated for each Landsat scene from well-watered/vegetated pixels. This temperature correction component is based on a ratio of Tmax and Land Surface Temperature (LST) that has passed through several conditions such as NDVI limits.\n\n.. image:: docs/Tcorr_table.PNG\n\nThe Tcorr value is read from precomputed Earth Engine feature/image collections based on the Landsat scene ID (from the system:index property).  If the target Landsat scene ID is not found in the Tcorr collection, a median monthly value for the WRS2 path/row is used.  If median monthly values have not been computed for the target path/row, a default value of 0.978 will be used.\n\nThe Tcorr is a function of the maximum air temperature dataset, so separate Tcorr collections have been generated for each of the following air temperature datasets: CIMIS, DAYMET, GRIDMET, TopoWX.  The data source of the Tcorr collection needs to match the data source of the air temperature.\n\nThe Tcorr collections were last updated through 2018 but will eventually be updated daily.\n\nDefault Asset IDs\n\nScene ID: projects/usgs-ssebop/tcorr_scene/daymet_median_v2_scene\n\nMonthly ID: projects/usgs-ssebop/tcorr_scene/daymet_median_v2_monthly\n\nInstallation\n============\n\nThe OpenET SSEBop python module can be installed via pip:\n\n.. code-block:: console\n\n    pip install openet-ssebop\n\nDependencies\n============\n\n * `earthengine-api <https://github.com/google/earthengine-api>`__\n * `openet-core <https://github.com/Open-ET/openet-core-beta>`__\n\nOpenET Namespace Package\n========================\n\nEach OpenET model is stored in the \"openet\" folder (namespace).  The model can then be imported as a \"dot\" submodule of the main openet module.\n\n.. code-block:: console\n\n    import openet.ssebop as ssebop\n\nDevelopment and Testing\n=======================\n\nPlease see the `CONTRIBUTING.rst <CONTRIBUTING.rst>`__.\n\nReferences\n==========\n\n.. _references:\n\n.. [Senay2013]\n | Senay, G., Bohms, S., Singh, R., Gowda, P., Velpuri, N., Alemu, H., Verdin, J. (2013). Operational Evapotranspiration Mapping Using Remote Sensing and Weather Datasets: A New Parameterization for the SSEB Approach. *Journal of the American Water Resources Association*, 49(3).\n | `https://doi.org/10.1111/jawr.12057 <https://doi.org/10.1111/jawr.12057>`__\n.. [Senay2016]\n | Senay, G., Friedrichs, M., Singh, R., Velpui, N. (2016). Evaluating Landsat 8 evapotranspiration for water use mapping in the Colorado River Basin. *Remote Sensing of Environment*, 185.\n | `https://doi.org/10.1016/j.rse.2015.12.043 <https://doi.org/10.1016/j.rse.2015.12.043>`__\n.. [Senay2017]\n | Senay, G., Schauer, M., Friedrichs, M., Manohar, V., Singh, R. (2017). Satellite-based water use dynamics using historical Landsat data (1984\\-2014) in the southwestern United States. *Remote Sensing of Environment*, 202.\n | `https://doi.org/10.1016/j.rse.2017.05.005 <https://doi.org/10.1016/j.rse.2017.05.005>`__\n.. [Senay2018]\n | Senay, G. (2018). Satellite Psychrometric Formulation of the Operational Simplified Surface Energy Balance (SSEBop) Model for Quantifying and Mapping Evapotranspiration. *Applied Engineering in Agriculture*, 34(3).\n | `https://doi.org/10.13031/aea.12614 <https://doi.org/10.13031/aea.12614>`__\n.. [Senay2019]\n | Senay, G., Schauer, M., Velpuri, N.M., Singh, R.K., Kagone, S., Friedrichs, M., Litvak, M.E., Douglas-Mankin, K.R. (2019). Long-Term (1986\u20132015) Crop Water Use Characterization over the Upper Rio Grande Basin of United States and Mexico Using Landsat-Based Evapotranspiration. *Remote Sensing*, 11(13):1587.\n | `https://doi.org/10.3390/rs11131587 <https://doi.org/10.3390/rs11131587>`__\n.. [Schauer2019]\n | Schauer, M.,Senay, G. (2019). Characterizing Crop Water Use Dynamics in the Central Valley of California Using Landsat-Derived Evapotranspiration. *Remote Sensing*, 11(15):1782.\n | `https://doi.org/10.3390/rs11151782 <https://doi.org/10.3390/rs11151782>`__\n\n.. |build| image:: https://github.com/Open-ET/openet-ssebop-beta/workflows/build/badge.svg\n   :alt: Build status\n   :target: https://github.com/Open-ET/openet-ssebop-beta\n.. |version| image:: https://badge.fury.io/py/openet-ssebop.svg\n   :alt: Latest version on PyPI\n   :target: https://badge.fury.io/py/openet-ssebop\n.. |codecov| image:: https://codecov.io/gh/Open-ET/openet-ssebop-beta/branch/master/graphs/badge.svg\n   :alt: Coverage Status\n   :target: https://codecov.io/gh/Open-ET/openet-ssebop-beta", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "https://github.com/Open-ET/openet-ssebop-beta/archive/v0.0.26.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Open-ET/openet-ssebop-beta", "keywords": "SSEBop OpenET Evapotranspiration Earth Engine", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "openet-ssebop", "package_url": "https://pypi.org/project/openet-ssebop/", "platform": "", "project_url": "https://pypi.org/project/openet-ssebop/", "project_urls": {"Download": "https://github.com/Open-ET/openet-ssebop-beta/archive/v0.0.26.tar.gz", "Homepage": "https://github.com/Open-ET/openet-ssebop-beta"}, "release_url": "https://pypi.org/project/openet-ssebop/0.0.26/", "requires_dist": null, "requires_python": "", "summary": "Earth Engine based SSEBop Model", "version": "0.0.26", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://badge.fury.io/py/openet-ssebop\" rel=\"nofollow\"><img alt=\"Latest version on PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4bdb57324d04829120cc0c716d7378020dc56d56/68747470733a2f2f62616467652e667572792e696f2f70792f6f70656e65742d737365626f702e737667\"></a> <a href=\"https://github.com/Open-ET/openet-ssebop-beta\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0b0d1398a0a94f325e55e6ba182c8625b99cc00/68747470733a2f2f6769746875622e636f6d2f4f70656e2d45542f6f70656e65742d737365626f702d626574612f776f726b666c6f77732f6275696c642f62616467652e737667\"></a> <a href=\"https://codecov.io/gh/Open-ET/openet-ssebop-beta\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa879dd87bf99028a506f5894d0f3182f298a219/68747470733a2f2f636f6465636f762e696f2f67682f4f70656e2d45542f6f70656e65742d737365626f702d626574612f6272616e63682f6d61737465722f6772617068732f62616467652e737667\"></a></p>\n<p><strong>WARNING: This code is in development, is being provided without support, and is subject to change at any time without notification</strong></p>\n<p>This repository provides <a href=\"https://earthengine.google.com/\" rel=\"nofollow\">Google Earth Engine</a> Python API based implementation of the SSEBop ET model.</p>\n<p>The Operational Simplified Surface Energy Balance (SSEBop) model computes daily total actual evapotranspiration (ETa) using land surface temperature (Ts), maximum air temperature (Ta) and reference ET (ETr).\nThe SSEBop model does not solve all the energy balance terms explicitly; rather, it defines the limiting conditions based on clear-sky net radiation balance principles.\nThis approach predefines unique sets of \u201chot/dry\u201d and \u201ccold/wet\u201d limiting values for each pixel and is designed to reduce model operator errors when estimating ET routinely.</p>\n<p>Basic SSEBop model architecture in Earth Engine:</p>\n<img alt=\"docs/SSEBop_GEE_flow.PNG\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85d54d78abad0bfad7faeafcfb67134bf197701d/646f63732f535345426f705f4745455f666c6f772e504e47\">\n<div id=\"input-collections\">\n<h2>Input Collections</h2>\n<p>SSEBop ET can currently only be computed for Landsat Collection 1 TOA image from the following Earth Engine image collections:</p>\n<blockquote>\n<ul>\n<li>LANDSAT/LC08/C01/T1_TOA or LANDSAT/LC08/C01/T1_RT_TOA</li>\n<li>LANDSAT/LE07/C01/T1_TOA or LANDSAT/LE07/C01/T1_RT_TOA</li>\n<li>LANDSAT/LT05/C01/T1_TOA</li>\n</ul>\n</blockquote>\n<p>Note that scene specific Tcorr values have only been computed for Landsat images covering the contiguous United States (CONUS).  SSEBop estimates for Landsat images outside the CONUS will use the default c-factor value of 0.978 (see the <a href=\"#tcorr-c-factor\" rel=\"nofollow\">Tcorr (C-factor)</a> section for more details).</p>\n</div>\n<div id=\"model-design\">\n<h2>Model Design</h2>\n<p>The primary component of the SSEBop model is the Image() class.  The Image class can be used to compute a single fraction of reference ET (ETf) image from a single input image.  The Image class should generally be instantiated from an Earth Engine Landsat image using the collection specific methods listed below.  ET image collections can be built by computing ET in a function that is mapped over a collection of input images.  Please see the <a href=\"#example-notebooks\" rel=\"nofollow\">Example Notebooks</a> for more details.</p>\n<div id=\"landsat-collection-1-toa-input-image\">\n<h3>Landsat Collection 1 TOA Input Image</h3>\n<p>To instantiate the class for a Landsat Collection 1 TOA image, use the Image.from_landsat_c1_toa() method.</p>\n<p>The input Landsat image must have the following bands and properties:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>SPACECRAFT_ID</th>\n<th>Band Names</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>LANDSAT_5</td>\n<td>B1, B2, B3, B4, B5, B7, B6, BQA</td>\n</tr>\n<tr><td>LANDSAT_7</td>\n<td>B1, B2, B3, B4, B5, B7, B6_VCID_1, BQA</td>\n</tr>\n<tr><td>LANDSAT_8</td>\n<td>B2, B3, B4, B5, B6, B7, B10, BQA</td>\n</tr>\n</tbody>\n</table>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Property</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>system:index</td>\n<td><ul>\n<li>Landsat Scene ID</li>\n<li>Must be in the Earth Engine format (e.g. LC08_044033_20170716)</li>\n<li>Used to lookup the scene specific c-factor</li>\n</ul>\n</td>\n</tr>\n<tr><td>system:time_start</td>\n<td>Image datetime in milliseconds since 1970</td>\n</tr>\n<tr><td>SPACECRAFT_ID</td>\n<td><ul>\n<li>Used to determine which Landsat type</li>\n<li>Must be: LANDSAT_5, LANDSAT_7, or LANDSAT_8</li>\n</ul>\n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"model-output\">\n<h3>Model Output</h3>\n<p>The primary output of the SSEBop model is the fraction of reference ET (ETf).  The actual ET (ETa) can then be computed by multiplying the Landsat-based ETf image with the reference ET (e.g. ETr from GRIDMET).</p>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">openet.ssebop</span> <span class=\"k\">as</span> <span class=\"nn\">ssebop</span>\n\n<span class=\"n\">landsat_img</span> <span class=\"o\">=</span> <span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"s1\">'LANDSAT/LC08/C01/T1_RT_TOA/LC08_044033_20170716'</span><span class=\"p\">)</span>\n<span class=\"n\">et_fraction</span> <span class=\"o\">=</span> <span class=\"n\">ssebop</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">from_landsat_c1_toa</span><span class=\"p\">(</span><span class=\"n\">landsat_img</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">et_fraction</span>\n<span class=\"n\">et_reference</span> <span class=\"o\">=</span> <span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"s1\">'IDAHO_EPSCOR/GRIDMET/20170716'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'eto'</span><span class=\"p\">)</span>\n<span class=\"n\">et_actual</span> <span class=\"o\">=</span> <span class=\"n\">et_fraction</span><span class=\"o\">.</span><span class=\"n\">multiply</span><span class=\"p\">(</span><span class=\"n\">et_reference</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"custom-input-image\">\n<h3>Custom Input Image</h3>\n<p>SSEBop images can also be built manually by instantiating the class with an ee.Image with the following bands: \u2018lst\u2019 (land surface temperature [K]) and \u2018ndvi\u2019 (normalized difference vegetation index).  The input image must have \u2018system:index\u2019 and \u2018system:time_start\u2019 properties (described above).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">openet.ssebop</span> <span class=\"k\">as</span> <span class=\"nn\">ssebop</span>\n\n<span class=\"n\">input_img</span> <span class=\"o\">=</span> <span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">([</span><span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">),</span> <span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">ndvi</span><span class=\"p\">)])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">([</span><span class=\"s1\">'lst'</span><span class=\"p\">,</span> <span class=\"s1\">'ndvi'</span><span class=\"p\">])</span> \\\n    <span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">({</span>\n        <span class=\"s1\">'system:index'</span><span class=\"p\">:</span> <span class=\"s1\">'LC08_044033_20170716'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'system:time_start'</span><span class=\"p\">:</span> <span class=\"n\">ee</span><span class=\"o\">.</span><span class=\"n\">Date</span><span class=\"o\">.</span><span class=\"n\">fromYMD</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">millis</span><span class=\"p\">()})</span>\n<span class=\"n\">et_fraction</span> <span class=\"o\">=</span> <span class=\"n\">ssebop</span><span class=\"o\">.</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">input_img</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">et_fraction</span>\n</pre>\n</div>\n</div>\n<div id=\"example-notebooks\">\n<h2>Example Notebooks</h2>\n<p>Detailed Jupyter Notebooks of the various approaches for calling the OpenET SSEBop model are provided in the \u201cexamples\u201d folder.</p>\n<ul>\n<li><a href=\"examples/single_image.ipynb\" rel=\"nofollow\">Computing daily ET for a single Landsat image</a></li>\n<li><a href=\"examples/collection.ipynb\" rel=\"nofollow\">Computing a daily ET image collection from Landsat image collection</a></li>\n<li><a href=\"examples/interpolate.ipynb\" rel=\"nofollow\">Computing annual ET from a collection</a></li>\n</ul>\n</div>\n<div id=\"ancillary-datasets\">\n<h2>Ancillary Datasets</h2>\n<div id=\"maximum-daily-air-temperature-tmax\">\n<h3>Maximum Daily Air Temperature (Tmax)</h3>\n<p>The daily maximum air temperature (Tmax) is essential for establishing the maximum ET limit (cold boundary) as explained in <a href=\"#senay2017\" rel=\"nofollow\">Senay2017</a>.</p>\n<p>Default Asset ID: projects/usgs-ssebop/tmax/daymet_median_v2</p>\n</div>\n<div id=\"land-surface-temperature\">\n<h3>Land Surface Temperature</h3>\n<p>Land Surface Temperature (LST) is currently calculated in the SSEBop approach from Landsat Top-of-Atmosphere images by including commonly used calibration steps and atmospheric correction techniques. These include calculations for: (1) spectral radiance conversion to the at-sensor brightness temperature; (2) atmospheric absorption and re-emission value; and (3) surface emissivity. For additional information, users can refer to section 3.2 of the Methodology in <a href=\"#senay2016\" rel=\"nofollow\">Senay2016</a>.</p>\n</div>\n<div id=\"dt\">\n<h3>dT</h3>\n<p>The SSEBop ET model uses dT as a predefined temperature difference between Thot and Tcold for each pixel.\nIn SSEBop formulation, hot and cold limits are defined on the same pixel; therefore, dT actually represents the vertical temperature difference between the surface temperature of a theoretical bare/dry condition of a given pixel and the air temperature at the canopy level of the same pixel as explained in <a href=\"#senay2013\" rel=\"nofollow\">Senay2013</a>. The input dT is calculated under average-sky conditions and assumed not to change from year to year, but is unique for each day and location.</p>\n<p>Default Asset ID: projects/usgs-ssebop/dt/daymet_median_v0</p>\n</div>\n<div id=\"elevation\">\n<h3>Elevation</h3>\n<p>The default elevation dataset is the USGS SRTM global image asset.</p>\n<p>Default Asset ID: <a href=\"https://developers.google.com/earth-engine/datasets/catalog/USGS_SRTMGL1_003\" rel=\"nofollow\">USGS/SRTMGL1_003</a></p>\n<p>The elevation parameter will accept any Earth Engine image.</p>\n</div>\n<div id=\"tcorr-c-factor\">\n<h3>Tcorr (C-factor)</h3>\n<p>In order to correspond the maximum air temperature with cold/wet limiting environmental conditions, the SSEBop model uses a correction coefficient (C-factor) uniquely calculated for each Landsat scene from well-watered/vegetated pixels. This temperature correction component is based on a ratio of Tmax and Land Surface Temperature (LST) that has passed through several conditions such as NDVI limits.</p>\n<img alt=\"docs/Tcorr_table.PNG\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c4ca6a3eb680df106ffc39452ba4015d69fb4875/646f63732f54636f72725f7461626c652e504e47\">\n<p>The Tcorr value is read from precomputed Earth Engine feature/image collections based on the Landsat scene ID (from the system:index property).  If the target Landsat scene ID is not found in the Tcorr collection, a median monthly value for the WRS2 path/row is used.  If median monthly values have not been computed for the target path/row, a default value of 0.978 will be used.</p>\n<p>The Tcorr is a function of the maximum air temperature dataset, so separate Tcorr collections have been generated for each of the following air temperature datasets: CIMIS, DAYMET, GRIDMET, TopoWX.  The data source of the Tcorr collection needs to match the data source of the air temperature.</p>\n<p>The Tcorr collections were last updated through 2018 but will eventually be updated daily.</p>\n<p>Default Asset IDs</p>\n<p>Scene ID: projects/usgs-ssebop/tcorr_scene/daymet_median_v2_scene</p>\n<p>Monthly ID: projects/usgs-ssebop/tcorr_scene/daymet_median_v2_monthly</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The OpenET SSEBop python module can be installed via pip:</p>\n<pre><span class=\"go\">pip install openet-ssebop</span>\n</pre>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<blockquote>\n<ul>\n<li><a href=\"https://github.com/google/earthengine-api\" rel=\"nofollow\">earthengine-api</a></li>\n<li><a href=\"https://github.com/Open-ET/openet-core-beta\" rel=\"nofollow\">openet-core</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"openet-namespace-package\">\n<h2>OpenET Namespace Package</h2>\n<p>Each OpenET model is stored in the \u201copenet\u201d folder (namespace).  The model can then be imported as a \u201cdot\u201d submodule of the main openet module.</p>\n<pre><span class=\"go\">import openet.ssebop as ssebop</span>\n</pre>\n</div>\n<div id=\"development-and-testing\">\n<h2>Development and Testing</h2>\n<p>Please see the <a href=\"CONTRIBUTING.rst\" rel=\"nofollow\">CONTRIBUTING.rst</a>.</p>\n</div>\n<div id=\"references\">\n<h2>References</h2>\n<span class=\"target\" id=\"id1\"></span><table id=\"senay2013\">\n<col><col>\n<tbody>\n<tr><td>[Senay2013]</td><td><div>\n<div>Senay, G., Bohms, S., Singh, R., Gowda, P., Velpuri, N., Alemu, H., Verdin, J. (2013). Operational Evapotranspiration Mapping Using Remote Sensing and Weather Datasets: A New Parameterization for the SSEB Approach. <em>Journal of the American Water Resources Association</em>, 49(3).</div>\n<div><a href=\"https://doi.org/10.1111/jawr.12057\" rel=\"nofollow\">https://doi.org/10.1111/jawr.12057</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n<table id=\"senay2016\">\n<col><col>\n<tbody>\n<tr><td>[Senay2016]</td><td><div>\n<div>Senay, G., Friedrichs, M., Singh, R., Velpui, N. (2016). Evaluating Landsat 8 evapotranspiration for water use mapping in the Colorado River Basin. <em>Remote Sensing of Environment</em>, 185.</div>\n<div><a href=\"https://doi.org/10.1016/j.rse.2015.12.043\" rel=\"nofollow\">https://doi.org/10.1016/j.rse.2015.12.043</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n<table id=\"senay2017\">\n<col><col>\n<tbody>\n<tr><td>[Senay2017]</td><td><div>\n<div>Senay, G., Schauer, M., Friedrichs, M., Manohar, V., Singh, R. (2017). Satellite-based water use dynamics using historical Landsat data (1984-2014) in the southwestern United States. <em>Remote Sensing of Environment</em>, 202.</div>\n<div><a href=\"https://doi.org/10.1016/j.rse.2017.05.005\" rel=\"nofollow\">https://doi.org/10.1016/j.rse.2017.05.005</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n<table id=\"senay2018\">\n<col><col>\n<tbody>\n<tr><td>[Senay2018]</td><td><div>\n<div>Senay, G. (2018). Satellite Psychrometric Formulation of the Operational Simplified Surface Energy Balance (SSEBop) Model for Quantifying and Mapping Evapotranspiration. <em>Applied Engineering in Agriculture</em>, 34(3).</div>\n<div><a href=\"https://doi.org/10.13031/aea.12614\" rel=\"nofollow\">https://doi.org/10.13031/aea.12614</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n<table id=\"senay2019\">\n<col><col>\n<tbody>\n<tr><td>[Senay2019]</td><td><div>\n<div>Senay, G., Schauer, M., Velpuri, N.M., Singh, R.K., Kagone, S., Friedrichs, M., Litvak, M.E., Douglas-Mankin, K.R. (2019). Long-Term (1986\u20132015) Crop Water Use Characterization over the Upper Rio Grande Basin of United States and Mexico Using Landsat-Based Evapotranspiration. <em>Remote Sensing</em>, 11(13):1587.</div>\n<div><a href=\"https://doi.org/10.3390/rs11131587\" rel=\"nofollow\">https://doi.org/10.3390/rs11131587</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n<table id=\"schauer2019\">\n<col><col>\n<tbody>\n<tr><td>[Schauer2019]</td><td><div>\n<div>Schauer, M.,Senay, G. (2019). Characterizing Crop Water Use Dynamics in the Central Valley of California Using Landsat-Derived Evapotranspiration. <em>Remote Sensing</em>, 11(15):1782.</div>\n<div><a href=\"https://doi.org/10.3390/rs11151782\" rel=\"nofollow\">https://doi.org/10.3390/rs11151782</a></div>\n</div>\n</td></tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 6737430, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d1ebac45bbdeffe54ea6613794ba256d", "sha256": "44d7934ef518faa637e4abc83e19b2e3338fe97b772996c4d1b8c453d22e9657"}, "downloads": -1, "filename": "openet-ssebop-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d1ebac45bbdeffe54ea6613794ba256d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16702, "upload_time": "2018-08-30T17:58:04", "upload_time_iso_8601": "2018-08-30T17:58:04.772554Z", "url": "https://files.pythonhosted.org/packages/58/78/f710b3e1a11504c5b1652bb2d41d69c9e713d4bfef36bf30a9c77a3f9040/openet-ssebop-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "040fee5307352992c39417f77f260a2d", "sha256": "b23c7964ef5eb4cd933b5347c602b37cb5e9c2b890d7dff478b4c98fcbe16292"}, "downloads": -1, "filename": "openet-ssebop-0.0.10.tar.gz", "has_sig": false, "md5_digest": "040fee5307352992c39417f77f260a2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24374, "upload_time": "2018-12-18T22:27:38", "upload_time_iso_8601": "2018-12-18T22:27:38.300985Z", "url": "https://files.pythonhosted.org/packages/ad/37/a76a9a6b533fe00d4960995237dc15ce01bced89cdf60de4e830abb54f92/openet-ssebop-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "9e83f38cc9a8acb47fdb595e25b5cf6f", "sha256": "b18cf0bd467e12aaeb699b5f0a8909fb7fd5082d465d6e22259dcac999d30953"}, "downloads": -1, "filename": "openet-ssebop-0.0.11.tar.gz", "has_sig": false, "md5_digest": "9e83f38cc9a8acb47fdb595e25b5cf6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32893, "upload_time": "2019-02-21T01:22:59", "upload_time_iso_8601": "2019-02-21T01:22:59.762511Z", "url": "https://files.pythonhosted.org/packages/7d/55/f25fc679f6379a1e53335ca9f84b23efc35e8ae2bba2d62e44987703a5e7/openet-ssebop-0.0.11.tar.gz", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "076c1e9bb681ff82bc9b06c7f1183d6a", "sha256": "9670d0f3e9d93491c28eab76fb384ac537f96412ac4e8857670e4b883c371c4b"}, "downloads": -1, "filename": "openet-ssebop-0.0.12.tar.gz", "has_sig": false, "md5_digest": "076c1e9bb681ff82bc9b06c7f1183d6a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36211, "upload_time": "2019-02-27T00:24:45", "upload_time_iso_8601": "2019-02-27T00:24:45.098685Z", "url": "https://files.pythonhosted.org/packages/26/6e/ccedbc057f31b65d00e0c3db0d05ca45fd764c3f039a87eb810d007c68d9/openet-ssebop-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "d95ae9dda97b26c1754852366db2c441", "sha256": "3dec85ab675b943ecc29e9b08520a9c1f4a86a53431521294f13b120bf26e564"}, "downloads": -1, "filename": "openet-ssebop-0.0.13.tar.gz", "has_sig": false, "md5_digest": "d95ae9dda97b26c1754852366db2c441", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36797, "upload_time": "2019-05-17T22:39:45", "upload_time_iso_8601": "2019-05-17T22:39:45.386856Z", "url": "https://files.pythonhosted.org/packages/de/71/d68c5aee798202a6ef1db6f0937efb4512f9335904bedd158f3cdbe50a3c/openet-ssebop-0.0.13.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "537dde1789bee709551041881322a747", "sha256": "d0a60e479682af7f3d30beaadfdba3b3217e0b019e5a1e57c70829bfe32c1382"}, "downloads": -1, "filename": "openet-ssebop-0.0.16.tar.gz", "has_sig": false, "md5_digest": "537dde1789bee709551041881322a747", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41243, "upload_time": "2019-08-21T22:03:37", "upload_time_iso_8601": "2019-08-21T22:03:37.331005Z", "url": "https://files.pythonhosted.org/packages/45/a0/9b6fdec205d211eccbfeab1af038322d7a88a601d032858d2c98afaa4f71/openet-ssebop-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "35c63b99ae312cfce27779365529543d", "sha256": "a3fff0d3744b1eb8ceccd517ca24a31142d3f5dacde096def685e1b5fc69c8b9"}, "downloads": -1, "filename": "openet-ssebop-0.0.17.tar.gz", "has_sig": false, "md5_digest": "35c63b99ae312cfce27779365529543d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41785, "upload_time": "2019-09-09T22:34:27", "upload_time_iso_8601": "2019-09-09T22:34:27.498612Z", "url": "https://files.pythonhosted.org/packages/87/b1/0a89acc9af38701b24de017b80826ae5897c51cd26ad4d3158ebfec7d861/openet-ssebop-0.0.17.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "0fec803b3aeca04382bb114fe2b47c8f", "sha256": "37f8fde69bc9fd603efa090c4e31cf4c6ce658c6b28b033f0a5eea345ec7c171"}, "downloads": -1, "filename": "openet-ssebop-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0fec803b3aeca04382bb114fe2b47c8f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16705, "upload_time": "2018-08-30T22:32:33", "upload_time_iso_8601": "2018-08-30T22:32:33.038414Z", "url": "https://files.pythonhosted.org/packages/f7/12/f5f0da13e1c85e0a8cd0d3e8822a320237e58ad72e8e69401ed05b4615d8/openet-ssebop-0.0.2.tar.gz", "yanked": false}], "0.0.23": [{"comment_text": "", "digests": {"md5": "bff293704407b7c9fd84ac7229af1591", "sha256": "8028174e8e09f881118f61ee06c56abaa3df523a61132f1ea8b2bc20b8b63f4f"}, "downloads": -1, "filename": "openet-ssebop-0.0.23.tar.gz", "has_sig": false, "md5_digest": "bff293704407b7c9fd84ac7229af1591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48099, "upload_time": "2019-12-12T21:51:50", "upload_time_iso_8601": "2019-12-12T21:51:50.982793Z", "url": "https://files.pythonhosted.org/packages/e8/f8/bf4028112a4954897611468c4efb5ba391425b0d97bd4da2e7fa2a36cf09/openet-ssebop-0.0.23.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "ee916b964dc31766dab88e12a0f4ad6f", "sha256": "299e2c5b18f849ff08c1aa2c1004c9fde93920d51842524d29524dc6fbc0ec3e"}, "downloads": -1, "filename": "openet-ssebop-0.0.24.tar.gz", "has_sig": false, "md5_digest": "ee916b964dc31766dab88e12a0f4ad6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48152, "upload_time": "2019-12-13T19:53:44", "upload_time_iso_8601": "2019-12-13T19:53:44.642448Z", "url": "https://files.pythonhosted.org/packages/60/4c/2116eab2dcbec535240dd671f5a46401b0a82ff49fcb2ac54ac72cd027a6/openet-ssebop-0.0.24.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "4f08cb5aeee13d64212ca2153ca9e790", "sha256": "3ae76e5548d8810db2e8a7c0fae0338069ad29c97754ef0938ae231413969af8"}, "downloads": -1, "filename": "openet-ssebop-0.0.26.tar.gz", "has_sig": false, "md5_digest": "4f08cb5aeee13d64212ca2153ca9e790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49815, "upload_time": "2020-03-03T00:39:34", "upload_time_iso_8601": "2020-03-03T00:39:34.275199Z", "url": "https://files.pythonhosted.org/packages/65/b1/9718cfc24e5199e7ec5dae85da1c3cd4cd4c48c1dbbc1592e0222c08d48c/openet-ssebop-0.0.26.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6ad90d4befa0507cd9ee8e90a1580d33", "sha256": "306e757106529b633e5fea1d4a7d4ca589b8ab2ec58f9d67706e66ef8a79810e"}, "downloads": -1, "filename": "openet-ssebop-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6ad90d4befa0507cd9ee8e90a1580d33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15492, "upload_time": "2018-10-31T17:54:06", "upload_time_iso_8601": "2018-10-31T17:54:06.358207Z", "url": "https://files.pythonhosted.org/packages/cd/72/4fa078354fc06d401b910ea23424a61d21a2e75309f6666f9f181356a565/openet-ssebop-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "30ed6232fc04fd31545cb120af5b59f2", "sha256": "cfaa6e374ff9a460995c111d22d201d58100045995dd463a21d2f0061910c5d0"}, "downloads": -1, "filename": "openet-ssebop-0.0.6.tar.gz", "has_sig": false, "md5_digest": "30ed6232fc04fd31545cb120af5b59f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21388, "upload_time": "2018-11-09T18:56:23", "upload_time_iso_8601": "2018-11-09T18:56:23.136524Z", "url": "https://files.pythonhosted.org/packages/ab/38/386af5a3a65ebb0f9cfbf2c8bc9dd2dbad7ac93c6a26713dfbfdb43e56a6/openet-ssebop-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "25e7051075d2773d16f8539c471bbbc0", "sha256": "4b8b613ae86ff1481e70c19bcbc935eac584804df09f8ce76e56b3409343479c"}, "downloads": -1, "filename": "openet-ssebop-0.0.7.tar.gz", "has_sig": false, "md5_digest": "25e7051075d2773d16f8539c471bbbc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21866, "upload_time": "2018-11-21T16:16:41", "upload_time_iso_8601": "2018-11-21T16:16:41.838736Z", "url": "https://files.pythonhosted.org/packages/fb/c5/c9177ee57c051c943b54d17c065022d401645af800b6fdd02f300769538f/openet-ssebop-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "8156d14f3f7092e01e488b9711492a8d", "sha256": "5eee2418cbaeb63450479d4c0b3dc34a00f27a2df0b645b14414f649e67cc7ce"}, "downloads": -1, "filename": "openet-ssebop-0.0.8.tar.gz", "has_sig": false, "md5_digest": "8156d14f3f7092e01e488b9711492a8d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21922, "upload_time": "2018-11-22T20:21:37", "upload_time_iso_8601": "2018-11-22T20:21:37.566139Z", "url": "https://files.pythonhosted.org/packages/4b/19/b2440c14ffba36c2010d953a2f0887449476e38be0be81f61348dc43f12d/openet-ssebop-0.0.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f08cb5aeee13d64212ca2153ca9e790", "sha256": "3ae76e5548d8810db2e8a7c0fae0338069ad29c97754ef0938ae231413969af8"}, "downloads": -1, "filename": "openet-ssebop-0.0.26.tar.gz", "has_sig": false, "md5_digest": "4f08cb5aeee13d64212ca2153ca9e790", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49815, "upload_time": "2020-03-03T00:39:34", "upload_time_iso_8601": "2020-03-03T00:39:34.275199Z", "url": "https://files.pythonhosted.org/packages/65/b1/9718cfc24e5199e7ec5dae85da1c3cd4cd4c48c1dbbc1592e0222c08d48c/openet-ssebop-0.0.26.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:02 2020"}