{"info": {"author": "Rohan Jain", "author_email": "dcrodjer@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Valuate\n=======\nA portable application to easily associate a user valuation (rating, like etc) \nto any object, just on the basis of template tags. No configuration of existing \nmodels and views required. \n\n\nInstallation\n============\n\n - Run `python setup.py install`\n - Include 'valuate' in your installed apps settings. \n - Add `(r'^valuate/', include('valuate.urls'))` to your main urls.py. \n - Ensure you have request context preprocessor added in the list of preprocessors\n   or pass request varible context to views. \n   \n   \nUsage\n=====\nCreate a valuation type from admin site.   \nLet us say: \n**Rating**\n\n - Excellent  5\n - Good       4\n - Average    3\n - Bad        2\n - Poor       1\n\nor  \n\n**LikeDislike**\n\n - Like       1\n - Dislike    0\n \n \n**Available settings:**  \n\n`DEFAULT_VALUATION_TYPE_ID`: The ID of default valuation type to be used in the project\nLoad the template tags: `{% load valuation %}`\n \n**Available tags:**  \n\n{% render_valuate form  of object for valuation_type %}\n------------------------------------------------------\nRenders the valuation form for the provided object.  \nOverride template: 'valuate/form.html' for modifying the look.\n\n{% render_valuate form of object for valuation_type %}\n---------------------------------------------------------\nRenders the status according to the score of various choices.   \nOverride template: 'valuate/status.html' for modifying the look.\n\n{% get_valuate ajax_fields of object for valuation_type as variable %}\n---------------------------------------------------------------------\nGet the fields as dictionary required for an ajax post request in the context\nor directly.\nVariables available:\nFor post request: 'content_type','object_pk', 'choice' (to be selected\nby user, can have an initial value if user has already submitted once)\n'choices': dictionary of choices for user to provide the 'value' data.\n'target': target for the request.\n'vtype'\": the valuation type. \nOn a successfull request, true will be retuned. \nIf you are not using a popular javascript liberary, pass on a POST\nvariable with name `ajax` and a `true` value.\n\n{% get_valuate form of object for valuation_type as variable %}\n--------------------------------------------------------------\nGets the valuation form in context or directly.\nUser `form_name.target` to access the target for the post request.\n\n{% get_valuate score of object for valuation_type as variable %}\n-----------------------------------------------------\nThe average score of the object using the corresponding values\nof chioces.\n\n{% get_valuate choice_count of object for_chioce choice_name for valuation_type as variable %}\n----------------------------------------------------------------------------------------------\nReturns the score count for a perticular choice of an object. Choice\nshould be provided with quotes (as string).\n\n*The `for valuation_type` and `as variable` are optional arguments*\n\nAnd Thats it!", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://code.google.com/p/django-valuate/", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-valuate", "package_url": "https://pypi.org/project/django-valuate/", "platform": "all", "project_url": "https://pypi.org/project/django-valuate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://code.google.com/p/django-valuate/"}, "release_url": "https://pypi.org/project/django-valuate/1.0-beta-2.2/", "requires_dist": null, "requires_python": null, "summary": "Easy plugging of user evaluation system to any django object.", "version": "1.0-beta-2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Valuate<br>=======<br>A portable application to easily associate a user valuation (rating, like etc) <br>to any object, just on the basis of template tags. No configuration of existing <br>models and views required. <br><br><br>Installation<br>============<br><br> - Run `python setup.py install`<br> - Include 'valuate' in your installed apps settings. <br> - Add `(r'^valuate/', include('valuate.urls'))` to your main urls.py. <br> - Ensure you have request context preprocessor added in the list of preprocessors<br>   or pass request varible context to views. <br>   <br>   <br>Usage<br>=====<br>Create a valuation type from admin site.   <br>Let us say: <br>**Rating**<br><br> - Excellent  5<br> - Good       4<br> - Average    3<br> - Bad        2<br> - Poor       1<br><br>or  <br><br>**LikeDislike**<br><br> - Like       1<br> - Dislike    0<br> <br> <br>**Available settings:**  <br><br>`DEFAULT_VALUATION_TYPE_ID`: The ID of default valuation type to be used in the project<br>Load the template tags: `{% load valuation %}`<br> <br>**Available tags:**  <br><br>{% render_valuate form  of object for valuation_type %}<br>------------------------------------------------------<br>Renders the valuation form for the provided object.  <br>Override template: 'valuate/form.html' for modifying the look.<br><br>{% render_valuate form of object for valuation_type %}<br>---------------------------------------------------------<br>Renders the status according to the score of various choices.   <br>Override template: 'valuate/status.html' for modifying the look.<br><br>{% get_valuate ajax_fields of object for valuation_type as variable %}<br>---------------------------------------------------------------------<br>Get the fields as dictionary required for an ajax post request in the context<br>or directly.<br>Variables available:<br>For post request: 'content_type','object_pk', 'choice' (to be selected<br>by user, can have an initial value if user has already submitted once)<br>'choices': dictionary of choices for user to provide the 'value' data.<br>'target': target for the request.<br>'vtype'\": the valuation type. <br>On a successfull request, true will be retuned. <br>If you are not using a popular javascript liberary, pass on a POST<br>variable with name `ajax` and a `true` value.<br><br>{% get_valuate form of object for valuation_type as variable %}<br>--------------------------------------------------------------<br>Gets the valuation form in context or directly.<br>User `form_name.target` to access the target for the post request.<br><br>{% get_valuate score of object for valuation_type as variable %}<br>-----------------------------------------------------<br>The average score of the object using the corresponding values<br>of chioces.<br><br>{% get_valuate choice_count of object for_chioce choice_name for valuation_type as variable %}<br>----------------------------------------------------------------------------------------------<br>Returns the score count for a perticular choice of an object. Choice<br>should be provided with quotes (as string).<br><br>*The `for valuation_type` and `as variable` are optional arguments*<br><br>And Thats it!\n          </div>"}, "last_serial": 266353, "releases": {"1.0-beta": [{"comment_text": "", "digests": {"md5": "8117037841373600689093da498251ef", "sha256": "529ddd56bdd0654d291dab55e80782c470274c88b2618aac40ba8b38e45a2f5c"}, "downloads": -1, "filename": "django-valuate-1.0-beta.tar.gz", "has_sig": false, "md5_digest": "8117037841373600689093da498251ef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8631, "upload_time": "2011-01-14T16:17:44", "upload_time_iso_8601": "2011-01-14T16:17:44.996344Z", "url": "https://files.pythonhosted.org/packages/6e/14/89a7eef5273e91765c7f72515c2d032192028d01adb6f1cb0f11bb44c177/django-valuate-1.0-beta.tar.gz", "yanked": false}], "1.0-beta-1": [{"comment_text": "", "digests": {"md5": "fcd839172f0aa7902218753e96bb9668", "sha256": "a585cf929d9193af0f7cf54891f877595732d286dac02453b1c779b164c9ec1e"}, "downloads": -1, "filename": "django-valuate-1.0-beta-1.tar.gz", "has_sig": false, "md5_digest": "fcd839172f0aa7902218753e96bb9668", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12451, "upload_time": "2011-03-02T09:29:00", "upload_time_iso_8601": "2011-03-02T09:29:00.368550Z", "url": "https://files.pythonhosted.org/packages/f5/a8/2589adecfb797e3a01c50d887e5284f922bbe614fbfcf370464523f7773e/django-valuate-1.0-beta-1.tar.gz", "yanked": false}], "1.0-beta-2": [{"comment_text": "", "digests": {"md5": "c29edd97b9f1ae5f42e22f8c37d0d8eb", "sha256": "b659895ae615f123f08b5a76c36873df3c5e089f669a57826b7383bbe32d08aa"}, "downloads": -1, "filename": "django-valuate-1.0-beta-2.tar.gz", "has_sig": false, "md5_digest": "c29edd97b9f1ae5f42e22f8c37d0d8eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13701, "upload_time": "2011-03-02T21:06:02", "upload_time_iso_8601": "2011-03-02T21:06:02.948206Z", "url": "https://files.pythonhosted.org/packages/e8/4c/2a9138926edd11494789e97812f2acb45b0884f8f6ab855b4f7bf20ab014/django-valuate-1.0-beta-2.tar.gz", "yanked": false}], "1.0-beta-2.2": [{"comment_text": "", "digests": {"md5": "97d7dbddcaf75b9d9b5ecfff68511f3b", "sha256": "88937fe62c2480d3964e92989676408a2bb6c9f462f00b7a1dd0a58270765144"}, "downloads": -1, "filename": "django-valuate-1.0-beta-2.2.tar.gz", "has_sig": false, "md5_digest": "97d7dbddcaf75b9d9b5ecfff68511f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13729, "upload_time": "2011-03-04T18:45:03", "upload_time_iso_8601": "2011-03-04T18:45:03.521686Z", "url": "https://files.pythonhosted.org/packages/ab/19/bf5cf2c76dba1ccd890bc9e4dcbbda464f685b9e22e35651e2fa72fd4217/django-valuate-1.0-beta-2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "97d7dbddcaf75b9d9b5ecfff68511f3b", "sha256": "88937fe62c2480d3964e92989676408a2bb6c9f462f00b7a1dd0a58270765144"}, "downloads": -1, "filename": "django-valuate-1.0-beta-2.2.tar.gz", "has_sig": false, "md5_digest": "97d7dbddcaf75b9d9b5ecfff68511f3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13729, "upload_time": "2011-03-04T18:45:03", "upload_time_iso_8601": "2011-03-04T18:45:03.521686Z", "url": "https://files.pythonhosted.org/packages/ab/19/bf5cf2c76dba1ccd890bc9e4dcbbda464f685b9e22e35651e2fa72fd4217/django-valuate-1.0-beta-2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:04 2020"}