{"info": {"author": "Kumar McMillan", "author_email": "kumar.mcmillan@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Topic :: Software Development :: Testing"], "description": "Complete documentation is available at http://farmdev.com/projects/fudge/\n\nFudge is a Python module for using fake objects (mocks and stubs) to test real ones.\n\nIn readable Python code, you declare what methods are available on your fake and\nhow they should be called. Then you inject that into your application and start\ntesting. This declarative approach means you don't have to record and playback\nactions and you don't have to inspect your fakes after running code. If the fake\nobject was used incorrectly then you'll see an informative exception message\nwith a traceback that points to the culprit.\n\nHere is a quick preview of how you can test code that sends\nemail without actually sending email::\n    \n    @fudge.patch('smtplib.SMTP')\n    def test_mailer(FakeSMTP):\n        # Declare how the SMTP class should be used:\n        (FakeSMTP.expects_call()\n                 .expects('connect')\n                 .expects('sendmail').with_arg_count(3))\n        # Run production code:\n        send_mail()\n        # ...expectations are verified automatically at the end of the test", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://farmdev.com/projects/fudge/", "keywords": null, "license": "The MIT License", "maintainer": null, "maintainer_email": null, "name": "fudge-je", "package_url": "https://pypi.org/project/fudge-je/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/fudge-je/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://farmdev.com/projects/fudge/"}, "release_url": "https://pypi.org/project/fudge-je/1.0.3/", "requires_dist": null, "requires_python": null, "summary": "Replace real objects with fakes (mocks, stubs, etc) while testing.", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Complete documentation is available at <a href=\"http://farmdev.com/projects/fudge/\" rel=\"nofollow\">http://farmdev.com/projects/fudge/</a></p>\n<p>Fudge is a Python module for using fake objects (mocks and stubs) to test real ones.</p>\n<p>In readable Python code, you declare what methods are available on your fake and\nhow they should be called. Then you inject that into your application and start\ntesting. This declarative approach means you don\u2019t have to record and playback\nactions and you don\u2019t have to inspect your fakes after running code. If the fake\nobject was used incorrectly then you\u2019ll see an informative exception message\nwith a traceback that points to the culprit.</p>\n<p>Here is a quick preview of how you can test code that sends\nemail without actually sending email:</p>\n<pre>@fudge.patch('smtplib.SMTP')\ndef test_mailer(FakeSMTP):\n    # Declare how the SMTP class should be used:\n    (FakeSMTP.expects_call()\n             .expects('connect')\n             .expects('sendmail').with_arg_count(3))\n    # Run production code:\n    send_mail()\n    # ...expectations are verified automatically at the end of the test\n</pre>\n\n          </div>"}, "last_serial": 1053946, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "91b08d1da2239915430d9d45f0923f66", "sha256": "a856a04e547b44812393ff3ed254877545624a579ccd4f9b4b08e55869affd8c"}, "downloads": -1, "filename": "fudge-je-1.0.3.tar.gz", "has_sig": false, "md5_digest": "91b08d1da2239915430d9d45f0923f66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87356, "upload_time": "2014-04-07T17:07:51", "upload_time_iso_8601": "2014-04-07T17:07:51.110994Z", "url": "https://files.pythonhosted.org/packages/f7/a9/c3ae49f58c764eaf9b02ee14566f032955d287c5f0fc7cbe1859371ada45/fudge-je-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91b08d1da2239915430d9d45f0923f66", "sha256": "a856a04e547b44812393ff3ed254877545624a579ccd4f9b4b08e55869affd8c"}, "downloads": -1, "filename": "fudge-je-1.0.3.tar.gz", "has_sig": false, "md5_digest": "91b08d1da2239915430d9d45f0923f66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87356, "upload_time": "2014-04-07T17:07:51", "upload_time_iso_8601": "2014-04-07T17:07:51.110994Z", "url": "https://files.pythonhosted.org/packages/f7/a9/c3ae49f58c764eaf9b02ee14566f032955d287c5f0fc7cbe1859371ada45/fudge-je-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:47 2020"}