{"info": {"author": "Alfonso Ruzafa", "author_email": "alfonso.ruzafa@movo.me", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Pyrializer\n\nA Python object (de)serializer\n\n## Installation\n\n~~~\n$ pip install pyrializer\n~~~\n\n## Basic usage\n\nYou must define classes and describe what attributes and their types using\nclass attributes like this:\n\n~~~ python\nclass Person\n  name = str\n  age = int\n  gender = str\n~~~\n\nSee [Supported types](#supported-types) below.\n\n\n### Decoding from a serialized value\n\nDecoding an object maps a serialized value into a Python object:\n\n~~~ python\nfrom pyrializer import decode\n\npayload = {\n  'name': 'John Doe',\n  'age': 52,\n  'job': {\n    'name': 'Software Engineer',\n    'salary': 24000\n  },\n  'hobbies': ['fishing', 'skating']\n}\n\nclass Job:\n  name = str\n  role = str\n  salary = int\n\nclass Address:\n  desc = str\n  city = str\n  country = str\n  zip = int\n\nclass Person:\n  name = str\n  age = int\n  job = Job\n  hobbies = [str]\n  address = Address\n\nperson = decode(Person, payload)\n\nperson.name          # John Doe\nperson.job.salary    # 24000\nperson.job.role      # None\nperson.hobbies[1]    # skating\nperson.address.city  # None\n~~~\n\n\n### Encoding to a serialized value\n\nEncoding an object transform a Python object into a serializable format that can\nbe easily exported to others formats, such as JSON:\n\n~~~ python\nfrom pyrializer import encode\n\nencode(Person, person) # --> { 'name': 'John Doe', ... }\n~~~\n\nAdditionaly, you can decorate the classes you want to (de)serialize with the\n```serializable``` decorator. This decorator extends the classes with two\nadditional methods:\n\n~~~ python\nfrom pyrializer import serializable\n\n@serializable\nclass Person:\n  ...\n\nperson = Person.decode(person_payload)\n\nperson.encode() # --> { 'name': 'John Doe', ... }\n~~~\n\n\n## Supported types\n\nHere is some examples of supported types\n\n| \\<type>       | JSON equivalent                               |\n|---------------|-----------------------------------------------|\n| `None`        | Any type                                      |\n| `str`         | String                                        |\n| `int`         | Integer                                       |\n| `float`       | Float                                         |\n| `bool`        | Boolean                                       |\n| `[]`          | Array of any type                             |\n| `ClassName`   | Object                                        |\n| _Custom type_ | Any. See [Custom types](#custom-types) below. |\n\nMore advanced examples:\n\n~~~ python\nclass Example:\n  array_of_array_of_ints = [ [ int ] ]  # [ [1,2], [3, 4], [], [5, 6] ]\n  whatever = None  # 42, False, AnotherObject(), etc...\n~~~\n\n\n## Custom types\n\nCustom types allows to decode values that have been previously encoded using a\nprimitive type and in a convenience format.\n\nSome examples include:\n- Unix timestamps: Dates encoded as integers\n- ISO-8601: Dates encoded as strings\n- Gender: Male or female encoded as booleans\n\nTo declare a Custom Type you need to create a class that inherit the `CustomType`\nand define two methods: `decode` and `encode`.\n\nFor example, the following snippets declares a custom type to decode an ISO-8601\ndate into a Python's datetime object and vice versa.\n\n~~~ python\nfrom json import loads\nfrom datetime import datetime\nfrom pyrializer import serializable\nfrom pyrializer.types import CustomType\n\nclass ISO_8601(CustomType):\n    def decode(self, fvalue):\n        return datetime.strptime(fvalue, '%Y-%m-%dT%H:%M:%SZ')\n\n    def encode(self, fvalue):\n        return datetime.strftime(fvalue, '%Y-%m-%dT%H:%M:%SZ')\n\n@serializable\nclass Person:\n    name = str\n    birthdate = ISO_8601  # here we use the custom type\n\njson_payload = json_loads('''\n{\n    \"name\": \"John Doe\",\n    \"birthdate\": \"1984-01-23T09:37:21Z\"\n}\n''')\n\nperson = Person.decode(payload)\n\nprint(type(person.birthdate))  # <class 'datetime.datetime'>\nprint(person.birthdate.year)   # 1984\n\nprint(person.encode())         # {'name': 'John Doe', 'birthdate': '2000-01-23T09:37:21Z'}\n~~~\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/superruzafa/pyrializer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyrializer", "package_url": "https://pypi.org/project/pyrializer/", "platform": "", "project_url": "https://pypi.org/project/pyrializer/", "project_urls": {"Homepage": "https://github.com/superruzafa/pyrializer", "Repository": "https://github.com/superruzafa/pyrializer"}, "release_url": "https://pypi.org/project/pyrializer/0.2.0/", "requires_dist": null, "requires_python": ">=3.7,<4.0", "summary": "A Python object (de)serializer", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pyrializer</h1>\n<p>A Python object (de)serializer</p>\n<h2>Installation</h2>\n<pre><code>$ pip install pyrializer\n</code></pre>\n<h2>Basic usage</h2>\n<p>You must define classes and describe what attributes and their types using\nclass attributes like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Person</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n  <span class=\"n\">gender</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n</pre>\n<p>See <a href=\"#supported-types\" rel=\"nofollow\">Supported types</a> below.</p>\n<h3>Decoding from a serialized value</h3>\n<p>Decoding an object maps a serialized value into a Python object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrializer</span> <span class=\"kn\">import</span> <span class=\"n\">decode</span>\n\n<span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span>\n  <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">52</span><span class=\"p\">,</span>\n  <span class=\"s1\">'job'</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Software Engineer'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'salary'</span><span class=\"p\">:</span> <span class=\"mi\">24000</span>\n  <span class=\"p\">},</span>\n  <span class=\"s1\">'hobbies'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'fishing'</span><span class=\"p\">,</span> <span class=\"s1\">'skating'</span><span class=\"p\">]</span>\n<span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Job</span><span class=\"p\">:</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">role</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">salary</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Address</span><span class=\"p\">:</span>\n  <span class=\"n\">desc</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">city</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">country</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"nb\">zip</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n  <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n  <span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"nb\">int</span>\n  <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span>\n  <span class=\"n\">hobbies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n  <span class=\"n\">address</span> <span class=\"o\">=</span> <span class=\"n\">Address</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">payload</span><span class=\"p\">)</span>\n\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">name</span>          <span class=\"c1\"># John Doe</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">salary</span>    <span class=\"c1\"># 24000</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">role</span>      <span class=\"c1\"># None</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">hobbies</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>    <span class=\"c1\"># skating</span>\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"o\">.</span><span class=\"n\">city</span>  <span class=\"c1\"># None</span>\n</pre>\n<h3>Encoding to a serialized value</h3>\n<p>Encoding an object transform a Python object into a serializable format that can\nbe easily exported to others formats, such as JSON:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrializer</span> <span class=\"kn\">import</span> <span class=\"n\">encode</span>\n\n<span class=\"n\">encode</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">person</span><span class=\"p\">)</span> <span class=\"c1\"># --&gt; { 'name': 'John Doe', ... }</span>\n</pre>\n<p>Additionaly, you can decorate the classes you want to (de)serialize with the\n<code>serializable</code> decorator. This decorator extends the classes with two\nadditional methods:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyrializer</span> <span class=\"kn\">import</span> <span class=\"n\">serializable</span>\n\n<span class=\"nd\">@serializable</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n  <span class=\"o\">...</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">person_payload</span><span class=\"p\">)</span>\n\n<span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">()</span> <span class=\"c1\"># --&gt; { 'name': 'John Doe', ... }</span>\n</pre>\n<h2>Supported types</h2>\n<p>Here is some examples of supported types</p>\n<table>\n<thead>\n<tr>\n<th>&lt;type&gt;</th>\n<th>JSON equivalent</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>None</code></td>\n<td>Any type</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>String</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>Integer</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>Float</td>\n</tr>\n<tr>\n<td><code>bool</code></td>\n<td>Boolean</td>\n</tr>\n<tr>\n<td><code>[]</code></td>\n<td>Array of any type</td>\n</tr>\n<tr>\n<td><code>ClassName</code></td>\n<td>Object</td>\n</tr>\n<tr>\n<td><em>Custom type</em></td>\n<td>Any. See <a href=\"#custom-types\" rel=\"nofollow\">Custom types</a> below.</td>\n</tr></tbody></table>\n<p>More advanced examples:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">:</span>\n  <span class=\"n\">array_of_array_of_ints</span> <span class=\"o\">=</span> <span class=\"p\">[</span> <span class=\"p\">[</span> <span class=\"nb\">int</span> <span class=\"p\">]</span> <span class=\"p\">]</span>  <span class=\"c1\"># [ [1,2], [3, 4], [], [5, 6] ]</span>\n  <span class=\"n\">whatever</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># 42, False, AnotherObject(), etc...</span>\n</pre>\n<h2>Custom types</h2>\n<p>Custom types allows to decode values that have been previously encoded using a\nprimitive type and in a convenience format.</p>\n<p>Some examples include:</p>\n<ul>\n<li>Unix timestamps: Dates encoded as integers</li>\n<li>ISO-8601: Dates encoded as strings</li>\n<li>Gender: Male or female encoded as booleans</li>\n</ul>\n<p>To declare a Custom Type you need to create a class that inherit the <code>CustomType</code>\nand define two methods: <code>decode</code> and <code>encode</code>.</p>\n<p>For example, the following snippets declares a custom type to decode an ISO-8601\ndate into a Python's datetime object and vice versa.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json</span> <span class=\"kn\">import</span> <span class=\"n\">loads</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyrializer</span> <span class=\"kn\">import</span> <span class=\"n\">serializable</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pyrializer.types</span> <span class=\"kn\">import</span> <span class=\"n\">CustomType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ISO_8601</span><span class=\"p\">(</span><span class=\"n\">CustomType</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">decode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fvalue</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strptime</span><span class=\"p\">(</span><span class=\"n\">fvalue</span><span class=\"p\">,</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%SZ'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">encode</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">fvalue</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">strftime</span><span class=\"p\">(</span><span class=\"n\">fvalue</span><span class=\"p\">,</span> <span class=\"s1\">'%Y-%m-</span><span class=\"si\">%d</span><span class=\"s1\">T%H:%M:%SZ'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@serializable</span>\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"nb\">str</span>\n    <span class=\"n\">birthdate</span> <span class=\"o\">=</span> <span class=\"n\">ISO_8601</span>  <span class=\"c1\"># here we use the custom type</span>\n\n<span class=\"n\">json_payload</span> <span class=\"o\">=</span> <span class=\"n\">json_loads</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">{</span>\n<span class=\"s1\">    \"name\": \"John Doe\",</span>\n<span class=\"s1\">    \"birthdate\": \"1984-01-23T09:37:21Z\"</span>\n<span class=\"s1\">}</span>\n<span class=\"s1\">'''</span><span class=\"p\">)</span>\n\n<span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">birthdate</span><span class=\"p\">))</span>  <span class=\"c1\"># &lt;class 'datetime.datetime'&gt;</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">birthdate</span><span class=\"o\">.</span><span class=\"n\">year</span><span class=\"p\">)</span>   <span class=\"c1\"># 1984</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">encode</span><span class=\"p\">())</span>         <span class=\"c1\"># {'name': 'John Doe', 'birthdate': '2000-01-23T09:37:21Z'}</span>\n</pre>\n\n          </div>"}, "last_serial": 6710645, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c867e61e6e2a2dc39f03beee2a82b4a5", "sha256": "6b10dd35b3c284069897b4bc2594aef71b2c015a7d9968447b4bd1dde4ffbfcf"}, "downloads": -1, "filename": "pyrializer-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c867e61e6e2a2dc39f03beee2a82b4a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 3725, "upload_time": "2020-02-25T18:19:32", "upload_time_iso_8601": "2020-02-25T18:19:32.802117Z", "url": "https://files.pythonhosted.org/packages/3b/21/bc2ff89849089946e27765d33ea0a872017f232096d91bd84c742fce09e7/pyrializer-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "31e0b17f1d3067cc21e6bb8a19c21f68", "sha256": "a53c7ce084e42ac19481c00efce2c6f9326bc1f9ce87a3b8490dcfed7d4048cd"}, "downloads": -1, "filename": "pyrializer-0.1.0.tar.gz", "has_sig": false, "md5_digest": "31e0b17f1d3067cc21e6bb8a19c21f68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 3202, "upload_time": "2020-02-25T18:19:35", "upload_time_iso_8601": "2020-02-25T18:19:35.257534Z", "url": "https://files.pythonhosted.org/packages/e6/d0/00603dab87dd4ca7f55605681ca722ea327a56b85ee811734ea8080d975d/pyrializer-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "f6c803c596a4ee5f43efd214fb0edfea", "sha256": "1c6327ff82bcc502c8242eddfa917e3e8b700a0f9f14b4a949cfe6c684610499"}, "downloads": -1, "filename": "pyrializer-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f6c803c596a4ee5f43efd214fb0edfea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5619, "upload_time": "2020-02-27T12:11:46", "upload_time_iso_8601": "2020-02-27T12:11:46.752643Z", "url": "https://files.pythonhosted.org/packages/8f/a0/90019e3d6b468f49fb4f719a51d01f9adf885d3741880ec97dd83c66d4a4/pyrializer-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35c01702ec8a8cb8135824bb4cf41f10", "sha256": "0b219e51e56a8ecd4112e2c4e498b38c2a203436e814a08c8aa52bcc04fc0d6a"}, "downloads": -1, "filename": "pyrializer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35c01702ec8a8cb8135824bb4cf41f10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5181, "upload_time": "2020-02-27T12:11:48", "upload_time_iso_8601": "2020-02-27T12:11:48.214781Z", "url": "https://files.pythonhosted.org/packages/04/64/a3bcea0583129c5ba4328b01f5122770ebc69d04e1a6736df90fd3724f21/pyrializer-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f6c803c596a4ee5f43efd214fb0edfea", "sha256": "1c6327ff82bcc502c8242eddfa917e3e8b700a0f9f14b4a949cfe6c684610499"}, "downloads": -1, "filename": "pyrializer-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f6c803c596a4ee5f43efd214fb0edfea", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5619, "upload_time": "2020-02-27T12:11:46", "upload_time_iso_8601": "2020-02-27T12:11:46.752643Z", "url": "https://files.pythonhosted.org/packages/8f/a0/90019e3d6b468f49fb4f719a51d01f9adf885d3741880ec97dd83c66d4a4/pyrializer-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35c01702ec8a8cb8135824bb4cf41f10", "sha256": "0b219e51e56a8ecd4112e2c4e498b38c2a203436e814a08c8aa52bcc04fc0d6a"}, "downloads": -1, "filename": "pyrializer-0.2.0.tar.gz", "has_sig": false, "md5_digest": "35c01702ec8a8cb8135824bb4cf41f10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5181, "upload_time": "2020-02-27T12:11:48", "upload_time_iso_8601": "2020-02-27T12:11:48.214781Z", "url": "https://files.pythonhosted.org/packages/04/64/a3bcea0583129c5ba4328b01f5122770ebc69d04e1a6736df90fd3724f21/pyrializer-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:47 2020"}