{"info": {"author": "Marc Santiago", "author_email": "marcanthonysanti@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "AUTHOR: Marc Santiago \nEMAIL: marcanthonysanti@gmail.com \n\nThis kit is intended to provided users with quick and simple forms of encryptions.  Some modules like\nHideMessageInImage and CaesarCipher, while not very strong forms of encryption are provided for the\nsake of having them easily available and for fun :-).\n\nUSAGE:\nExternal Modules Required\n-------------------------------------------------\n-------------------------------------------------\npyminizip, PIL, and easygui\nAll these modules can be installed via the pip command\n\n[pip install pyminizip] or [pip3 install pyminizip]\n[pip install Pillow]    or [pip3 install Pillow]\n[pip install easygui]   or [pip3 install easygui]\n\n\nImport Modules\n-------------------------------------------------\n-------------------------------------------------\nfrom Cryptokit.OneTimePadEncryption import encrypt_data, decrypt_data\nfrom Cryptokit.CaesarCipher import c_encipher, c_decipher, brute_force_decrypt\nfrom Cryptokit.VigenereCipher import v_encipher, v_decipher, v_dictionaryattack\nfrom Cryptokit.HideMessageInImage import hide_or_show_message\n\n\nDescription of Methods:\n-------------------------------------------------\n-------------------------------------------------\n\nModule --> OneTimePadEncryption\n-------------------------------\n\nencrypt_data(plain_text, string_file_mode=False) --> Takes plain text as either a string\nor a text document and returns a key file and  encrypted message file. Date times are used to match\nthe key file with the encrypted message file.\n\ndecrypt_data(key, encrypted_string, key_file_mode=False, string_file_mode=False)\n--> Takes a key and an enencrypted message as either a text document or a file. It will return the\nplain text document assuming the right key is supplied.\n\nModule --> CaesarCipher\n-------------------------------\n\nc_encipher(plain_text, key, plain_text_file_mode=False) --> Plain text is shifted up by the key\nprovided.  The key must be in the range of 1-26.\n\nc_decipher(cypher_text, key, cypher_text_file_mode=False) --> Cipher text is shifted by the key\nprovided.  The key must be in range of 1-26. The key must be the same key used to encipher other\nwise garbage data will be returned.\n\nbrute_force_decrypt(cypher_text, cypher_text_file_mode=False) --> This will attempt to return the\nkey used and the plain text translation of the enciphered text.\n\nModule --> VigenereCipher\n-------------------------------\n\nv_encipher(plain_text, key, file_mode=False) --> Plain text is enciphered using the given key\nprovided key. The key that is provided must be in a string containing only English characters.\n\nv_decipher(cipher_text, key, file_mode=False) --> Cipher text is deciphered using the key that was\nused to encipher the message.  The key that is provided must be in a string containing only English\ncharacters.\n\nv_dictionaryattack(cipher_text, dictionary_file=\"helper_files/dictionary.txt\", file_mode=False,\npercent_match=55) --> Function that takes cipher text either as a string or as a text file and trys\nand returns the plain text message. Things to note; the dictionary_file argument is passed a default\ndictionary, which is used to try and crack the cipher text.  The percent_match arugument is used to\nspecify how close the deciphered message has to be to English, see the detectEnglish module located\nin the helper_files folder for more information.\n\n\nModule --> HideMessageInImage\n-------------------------------\n\nhide_or_show_message() --> This will prompt the user to type in a message.  It will return a png file with\nyour message hidden inside. Run the function again to if you want to decrypt a png file.\n\n\nCOMMAND LINE TOOLS HAVE BEEN PROVIDED FOR CONVENIENCE: \n------------------------------------------------------\n------------------------------------------------------\n\nFILE NAME: otp_utility.py \nFILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/otp_utility.py\n\nFILE NAME: c_cipher_utility.py \nFILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/c_cipher_utility.py\n\nFILE NAME: v_cipher_utility.py \nFILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/v_cipher_utility.py", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/marcsantiago/CryptographyKit/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marcsantiago/CryptographyKit", "keywords": "Cryptography,One Time Pad Encryption, Caeser Cipher,Vigenere cipher", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "CryptographyKit", "package_url": "https://pypi.org/project/CryptographyKit/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/CryptographyKit/", "project_urls": {"Download": "https://github.com/marcsantiago/CryptographyKit/archive/master.zip", "Homepage": "https://github.com/marcsantiago/CryptographyKit"}, "release_url": "https://pypi.org/project/CryptographyKit/2.0.3/", "requires_dist": null, "requires_python": null, "summary": "This package is intended to provided users with a quick and simple way to perform  a one time pad encryption, Caeser cipher, or Vigenere cipher.  It will work with python 2 or 3.", "version": "2.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            AUTHOR: Marc Santiago <br>EMAIL: marcanthonysanti@gmail.com <br><br>This kit is intended to provided users with quick and simple forms of encryptions.  Some modules like<br>HideMessageInImage and CaesarCipher, while not very strong forms of encryption are provided for the<br>sake of having them easily available and for fun :-).<br><br>USAGE:<br>External Modules Required<br>-------------------------------------------------<br>-------------------------------------------------<br>pyminizip, PIL, and easygui<br>All these modules can be installed via the pip command<br><br>[pip install pyminizip] or [pip3 install pyminizip]<br>[pip install Pillow]    or [pip3 install Pillow]<br>[pip install easygui]   or [pip3 install easygui]<br><br><br>Import Modules<br>-------------------------------------------------<br>-------------------------------------------------<br>from Cryptokit.OneTimePadEncryption import encrypt_data, decrypt_data<br>from Cryptokit.CaesarCipher import c_encipher, c_decipher, brute_force_decrypt<br>from Cryptokit.VigenereCipher import v_encipher, v_decipher, v_dictionaryattack<br>from Cryptokit.HideMessageInImage import hide_or_show_message<br><br><br>Description of Methods:<br>-------------------------------------------------<br>-------------------------------------------------<br><br>Module --&gt; OneTimePadEncryption<br>-------------------------------<br><br>encrypt_data(plain_text, string_file_mode=False) --&gt; Takes plain text as either a string<br>or a text document and returns a key file and  encrypted message file. Date times are used to match<br>the key file with the encrypted message file.<br><br>decrypt_data(key, encrypted_string, key_file_mode=False, string_file_mode=False)<br>--&gt; Takes a key and an enencrypted message as either a text document or a file. It will return the<br>plain text document assuming the right key is supplied.<br><br>Module --&gt; CaesarCipher<br>-------------------------------<br><br>c_encipher(plain_text, key, plain_text_file_mode=False) --&gt; Plain text is shifted up by the key<br>provided.  The key must be in the range of 1-26.<br><br>c_decipher(cypher_text, key, cypher_text_file_mode=False) --&gt; Cipher text is shifted by the key<br>provided.  The key must be in range of 1-26. The key must be the same key used to encipher other<br>wise garbage data will be returned.<br><br>brute_force_decrypt(cypher_text, cypher_text_file_mode=False) --&gt; This will attempt to return the<br>key used and the plain text translation of the enciphered text.<br><br>Module --&gt; VigenereCipher<br>-------------------------------<br><br>v_encipher(plain_text, key, file_mode=False) --&gt; Plain text is enciphered using the given key<br>provided key. The key that is provided must be in a string containing only English characters.<br><br>v_decipher(cipher_text, key, file_mode=False) --&gt; Cipher text is deciphered using the key that was<br>used to encipher the message.  The key that is provided must be in a string containing only English<br>characters.<br><br>v_dictionaryattack(cipher_text, dictionary_file=\"helper_files/dictionary.txt\", file_mode=False,<br>percent_match=55) --&gt; Function that takes cipher text either as a string or as a text file and trys<br>and returns the plain text message. Things to note; the dictionary_file argument is passed a default<br>dictionary, which is used to try and crack the cipher text.  The percent_match arugument is used to<br>specify how close the deciphered message has to be to English, see the detectEnglish module located<br>in the helper_files folder for more information.<br><br><br>Module --&gt; HideMessageInImage<br>-------------------------------<br><br>hide_or_show_message() --&gt; This will prompt the user to type in a message.  It will return a png file with<br>your message hidden inside. Run the function again to if you want to decrypt a png file.<br><br><br>COMMAND LINE TOOLS HAVE BEEN PROVIDED FOR CONVENIENCE: <br>------------------------------------------------------<br>------------------------------------------------------<br><br>FILE NAME: otp_utility.py <br>FILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/otp_utility.py<br><br>FILE NAME: c_cipher_utility.py <br>FILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/c_cipher_utility.py<br><br>FILE NAME: v_cipher_utility.py <br>FILE LOCATION: https://github.com/marcsantiago/CryptographyKit/blob/master/v_cipher_utility.py\n          </div>"}, "last_serial": 2672043, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "5fe7310861ed28b0aec7f0bad432ad1e", "sha256": "5253c916cf8ac45a4a53363af51375396b8e327f2a51384d9c533f44c6948e41"}, "downloads": -1, "filename": "CryptographyKit-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5fe7310861ed28b0aec7f0bad432ad1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145216, "upload_time": "2015-03-27T00:29:20", "upload_time_iso_8601": "2015-03-27T00:29:20.494128Z", "url": "https://files.pythonhosted.org/packages/f5/38/829524252b7bf3d4fe73d973e329f78568233a29b3f69b79edfdc36da1b3/CryptographyKit-1.0.0.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "5f6e3d98ad4b9b0863b571b77c469232", "sha256": "95e70a1b8c72515548207c29385a02c89a5605fe5d2837e4247cfecb8a4a49ac"}, "downloads": -1, "filename": "CryptographyKit-1.0.5.tar.gz", "has_sig": false, "md5_digest": "5f6e3d98ad4b9b0863b571b77c469232", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145363, "upload_time": "2015-04-09T01:57:13", "upload_time_iso_8601": "2015-04-09T01:57:13.289960Z", "url": "https://files.pythonhosted.org/packages/64/8b/53d6aa57d60f821ed2457c745149049f4de2c8f38466017089dbac6eff30/CryptographyKit-1.0.5.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "177ee43d0da2385554551101eca357a4", "sha256": "b90e17e61d1372d8a815862d291618c19e75e087ac66606e00e7a016ce3e2490"}, "downloads": -1, "filename": "CryptographyKit-2.0.0.tar.gz", "has_sig": false, "md5_digest": "177ee43d0da2385554551101eca357a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145130, "upload_time": "2015-04-10T19:31:00", "upload_time_iso_8601": "2015-04-10T19:31:00.399052Z", "url": "https://files.pythonhosted.org/packages/b6/23/86819ea72e08031aa234f70b40e999e5a634af5a3e002aa8137d782f7c93/CryptographyKit-2.0.0.tar.gz", "yanked": false}], "2.0.1": [], "2.0.2": [{"comment_text": "", "digests": {"md5": "3879921145f4b6f8aacdff2d68aee4b2", "sha256": "f133ecf4b9aa563abd218d33e717c238762ebbf5fd0a579681502a6b4ade623b"}, "downloads": -1, "filename": "CryptographyKit-2.0.2.tar.gz", "has_sig": false, "md5_digest": "3879921145f4b6f8aacdff2d68aee4b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145260, "upload_time": "2015-09-14T03:59:04", "upload_time_iso_8601": "2015-09-14T03:59:04.196004Z", "url": "https://files.pythonhosted.org/packages/f8/43/ee5e9b8cf5e5b1ebad3cdd625882821f5048b2a570669d131a6047df4f59/CryptographyKit-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "5f84e82fe1c3934e6f176325f9b3f3fd", "sha256": "49bd49b302af10112eb4dd8a1c17a82478c7ca9718d67bc3fc775532190f62c1"}, "downloads": -1, "filename": "CryptographyKit-2.0.3.tar.gz", "has_sig": false, "md5_digest": "5f84e82fe1c3934e6f176325f9b3f3fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145218, "upload_time": "2017-02-28T00:40:27", "upload_time_iso_8601": "2017-02-28T00:40:27.561580Z", "url": "https://files.pythonhosted.org/packages/5e/bd/dd667c37261aae6537b0cc2e0b39a501495aab7dcf34a4c8e9374ca3d0b8/CryptographyKit-2.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f84e82fe1c3934e6f176325f9b3f3fd", "sha256": "49bd49b302af10112eb4dd8a1c17a82478c7ca9718d67bc3fc775532190f62c1"}, "downloads": -1, "filename": "CryptographyKit-2.0.3.tar.gz", "has_sig": false, "md5_digest": "5f84e82fe1c3934e6f176325f9b3f3fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 145218, "upload_time": "2017-02-28T00:40:27", "upload_time_iso_8601": "2017-02-28T00:40:27.561580Z", "url": "https://files.pythonhosted.org/packages/5e/bd/dd667c37261aae6537b0cc2e0b39a501495aab7dcf34a4c8e9374ca3d0b8/CryptographyKit-2.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:01 2020"}