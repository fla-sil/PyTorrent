{"info": {"author": "Mike Bayer", "author_email": "mike_mp@zzzcomputing.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3"], "description": "========\nzimports\n========\n\nReformats Python imports so that they can pass flake8-import-order.  This is\nroughly:\n\n* one import per line\n\n* alphabetically sorted, with stylistic options for how dots, case sensitivity,\n  and dotted names are sorted\n\n* grouped by builtin / external library / current application (also\n  stylistically controllable)\n\n* unused imports removed, using pyflakes to match \"unused import\" warnings\n  to actual lines of code\n\n* duplicate imports removed (note this does not yet include duplicate symbol\n  names against different imports)\n\n* no star imports (e.g. ``from <foo> import *``); these are rewritten as\n  explicit names, by importing all the names from each target module and then\n  removing all the unused names.\n\nThe program currently bolts itself on top of `flake8-import-order\n<https://github.com/PyCQA/flake8-import-order/>`_, in order to reuse the import\nclassification and sorting styles that tool provides. Without options given,\nthe script will look directly for a ``setup.cfg`` file with a ``[flake8]``\nsection and will consume flake8-import-order parameters ``\"application-import-\nnames\"``, ``\"application-package-names\"``, and ``\"import-order-style\"``, to\nsort imports exactly as this linter then expects to find them.   All of the\nsingle-line import styles, e.g. google, cryptography, pycharm, should just\nwork.\n\nSpecial classifications can be given to imports, as either a \"  # noqa\" comment\nindicating the import should not be removed, and optionally\nthe comment \"  # noqa nosort\" which will place the import into a special\n\"don't sort\" category, placing all of the \"nosort\" imports in the order\nthey originally appeared, grouped after all the sorted imports.  This can\nbe used for special situations where a few imports have to be in a certain\norder against each other (SQLAlchemy has two lines like this at the moment).\n\nThe application also does not affect imports that are inside of conditionals\nor defs, or otherwise indented in any way.  This is also the behavior of\nflake8-import-order; only imports in column zero of the source file are\ncounted, although imports that are on lines below other definitions are\ncounted, which are moved up to the top section of the source file.\n\n.. note::  This application runs in **Python 3 only**.  It can reformat\n   imports for Python 2 code as well but internally it uses library\n   and language features only available in Python 3.\n\n\nzzzeek why are you writing one of these, there are a dozen pep8 import fixers\n=============================================================================\n\nI've just gone through a whole bunch.     I need one that:\n\n* works directly with flake8-import-order so we are guaranteed to have a match\n\n* has shell capability, not only a plugin for vim or sublime text (Python Fix\n  Imports, gratis)\n\n* Removes unused imports, not just reformats them (importanize)\n\n* Reformats imports, not just removes unused ones (autoflake)\n\n* Doesn't miss removing an import that isn't used just because it's on a\n  multiline import (autoflake)\n\n* Breaks up *all* imports into individual lines, not just if the line is >80 char\n  (importanize)\n\n* Is still pretty simple (we're a bit beyond our original \"extremely\" simple\n  baseline, because all problems are ultimately not that simple) because (since\n  pyflakes and now flake8-import-order do most of the hard work) this is an\n  extremely simple job, there's (still) no  need for a giant application here.\n\nUsage\n=====\n\nThe script can run without any configuration, options are as follows::\n\n  $ zimports --help\n  usage: zimports [-h] [-m APPLICATION_IMPORT_NAMES]\n                  [-p APPLICATION_PACKAGE_NAMES] [--style STYLE] [-k]\n                  [--heuristic-unused HEURISTIC_UNUSED] [--statsonly] [-e]\n                  [--diff] [--stdout]\n                  filename [filename ...]\n\n  positional arguments:\n    filename              Python filename(s) or directories\n\n  optional arguments:\n    -h, --help            show this help message and exit\n    -m APPLICATION_IMPORT_NAMES, --application-import-names APPLICATION_IMPORT_NAMES\n                          comma separated list of names that should be\n                          considered local to the application. reads from\n                          [flake8] application-import-names by default.\n    -p APPLICATION_PACKAGE_NAMES, --application-package-names APPLICATION_PACKAGE_NAMES\n                          comma separated list of names that should be\n                          considered local to the organization. reads from\n                          [flake8] application-package-names by default.\n    --style STYLE         import order styling, reads from [flake8] import-\n                          order-style by default, or defaults to 'google'\n    --multi-imports       If set, multiple imports can exist on one line\n    -k, --keep-unused     keep unused imports even though detected as unused\n    --heuristic-unused HEURISTIC_UNUSED\n                          Remove unused imports only if number of imports is\n                          less than <HEURISTIC_UNUSED> percent of the total\n                          lines of code\n    --statsonly           don't write or display anything except the file stats\n    -e, --expand-stars    Expand star imports into the names in the actual\n                          module, which can then have unused names removed.\n                          Requires modules can be imported\n    --diff                don't modify files, just dump out diffs\n    --stdout              dump file output to stdout\n\nTypically, configuration will be in ``setup.cfg`` for flake8 (support for\ntox.ini, pyproject.toml is TODO)::\n\n    [flake8]\n    enable-extensions = G\n    ignore =\n        A003,\n        E203,E305,E711,E712,E721,E722,E741,\n        F841,\n        N801,N802,N806,\n        W503,W504\n    import-order-style = google\n    application-import-names = sqlalchemy,test\n\nThen, a typical run on a mostly clean source tree looks like::\n\n  $ zimports lib/\n  [Unchanged]     lib/sqlalchemy/inspection.py (in 0.0058 sec)\n  [Unchanged]     lib/sqlalchemy/log.py (in 0.0221 sec)\n\n  ...\n\n  [Unchanged]     lib/sqlalchemy/orm/attributes.py (in 0.2152 sec)\n  [Unchanged]     lib/sqlalchemy/orm/base.py (in 0.0363 sec)\n  [Writing]       lib/sqlalchemy/orm/relationships.py ([2% of lines are imports] [source +0L/-2L] [3 imports removed in 0.3287 sec])\n  [Unchanged]     lib/sqlalchemy/orm/strategies.py (in 0.2237 sec)\n\nThe program has two general modes of usage.  One is that of day-to-day usage\nfor an application that already has clean imports.   Running zimports on the\nsource files of such an application should produce no changes, except for\nwhatever source files were recently edited, and may have some changes to\nimports that need to be placed into the correct order. This usage model is\nsimilar to that of `Black <https://github.com/ambv/black>`_, where you can run\n\"zimports .\" and it will find whatever files need adjusting and leave the rest\nalone.\n\nThe other mode of usage is that of the up-front cleaning up of an application\nthat has  un- organized imports.   In this mode of usage, the goal is to get\nthe source files to be cleaned up so that ``zimports`` can be run straight\nwithout any modifications to the file needed, including that all necessary\nimports are either used locally or marked as not to be removed.\n\nProblems that can occur during this phase are that some imports are unused and\nshould be removed, while other imports that are apparently unused are still in\nfact imported by other parts of the program.   Another issue is that changing\nthe ordering of imports in complex cases may cause the application to no longer\nrun due to the creation of unresolvable import cycles.   Finally,  some\nprograms have use of ``import *``, pulling in a large list of names for  which\nan unknown portion of them are needed by the application.  The options\n``--keep-unused``, ``--heuristic-unused`` and ``--expand-stars`` are\nprovided to assist in working through these issues until the  code can be\nfully reformatted such that running ``zimports`` no longer produces changes.\n\nThe issue of apparently unused imports that are externally imported  can be\nprominent in some applications.  In order to allow imports that aren't locally\nused to remain in the source file, symbols that are part of\n``__all__`` will not be removed, as will imports that are followed by a ``  #\nnoqa`` comment.  Either of these techniques should be applied to imports that\nare used from other modules but not otherwise referenced within the immediate\nsource file.   For the less common case that a few imports really need a very\nspecific import order for things to work, those imports can be followed by a ``\n# noqa nosort`` comment that will add these lines to a special group at the end\nof all imports, where they will not be removed and their order relative to each\nother will be maintained.\n\nThe program does currently require that you pass it at least one file or\ndirectory name as an argument.   It also does not have the file caching feature\nthat Black has, which can allow it to only look at files that have changed\nsince the last run.  The plan is to have it check that it's inside a git\nrepository where it will run through files to be committed if no filenames  are\ngiven.\n\nUsage as a ``git`` hook\n=======================\n\n``zimports`` can be used with the pre-commit_ git hooks framework.  To add\nthe plugin, add the following to your ``.pre-commit-config.yaml``.  Note\nthe ``rev:`` attribute refers to a git tag or revision number of\nzimports to be used, such as ``\"master\"`` or ``\"0.1.3\"``:\n\n.. code-block:: yaml\n\n    repos:\n    -   repo: https://github.com/sqlalchemyorg/zimports/\n        rev: 0.1.3\n        hooks:\n        -   id: zimports\n\n\n.. _pre-commit: https://pre-commit.com/", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sqlalchemyorg/zimports", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "zimports", "package_url": "https://pypi.org/project/zimports/", "platform": "", "project_url": "https://pypi.org/project/zimports/", "project_urls": {"Homepage": "https://github.com/sqlalchemyorg/zimports"}, "release_url": "https://pypi.org/project/zimports/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "yet another import fixing tool", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Reformats Python imports so that they can pass flake8-import-order.  This is\nroughly:</p>\n<ul>\n<li>one import per line</li>\n<li>alphabetically sorted, with stylistic options for how dots, case sensitivity,\nand dotted names are sorted</li>\n<li>grouped by builtin / external library / current application (also\nstylistically controllable)</li>\n<li>unused imports removed, using pyflakes to match \u201cunused import\u201d warnings\nto actual lines of code</li>\n<li>duplicate imports removed (note this does not yet include duplicate symbol\nnames against different imports)</li>\n<li>no star imports (e.g. <tt>from &lt;foo&gt; import *</tt>); these are rewritten as\nexplicit names, by importing all the names from each target module and then\nremoving all the unused names.</li>\n</ul>\n<p>The program currently bolts itself on top of <a href=\"https://github.com/PyCQA/flake8-import-order/\" rel=\"nofollow\">flake8-import-order</a>, in order to reuse the import\nclassification and sorting styles that tool provides. Without options given,\nthe script will look directly for a <tt>setup.cfg</tt> file with a <tt>[flake8]</tt>\nsection and will consume flake8-import-order parameters <tt><span class=\"pre\">\"application-import-</span>\nnames\"</tt>, <tt><span class=\"pre\">\"application-package-names\"</span></tt>, and <tt><span class=\"pre\">\"import-order-style\"</span></tt>, to\nsort imports exactly as this linter then expects to find them.   All of the\nsingle-line import styles, e.g. google, cryptography, pycharm, should just\nwork.</p>\n<p>Special classifications can be given to imports, as either a \u201d  # noqa\u201d comment\nindicating the import should not be removed, and optionally\nthe comment \u201d  # noqa nosort\u201d which will place the import into a special\n\u201cdon\u2019t sort\u201d category, placing all of the \u201cnosort\u201d imports in the order\nthey originally appeared, grouped after all the sorted imports.  This can\nbe used for special situations where a few imports have to be in a certain\norder against each other (SQLAlchemy has two lines like this at the moment).</p>\n<p>The application also does not affect imports that are inside of conditionals\nor defs, or otherwise indented in any way.  This is also the behavior of\nflake8-import-order; only imports in column zero of the source file are\ncounted, although imports that are on lines below other definitions are\ncounted, which are moved up to the top section of the source file.</p>\n<div>\n<p>Note</p>\n<p>This application runs in <strong>Python 3 only</strong>.  It can reformat\nimports for Python 2 code as well but internally it uses library\nand language features only available in Python 3.</p>\n</div>\n<div id=\"zzzeek-why-are-you-writing-one-of-these-there-are-a-dozen-pep8-import-fixers\">\n<h2>zzzeek why are you writing one of these, there are a dozen pep8 import fixers</h2>\n<p>I\u2019ve just gone through a whole bunch.     I need one that:</p>\n<ul>\n<li>works directly with flake8-import-order so we are guaranteed to have a match</li>\n<li>has shell capability, not only a plugin for vim or sublime text (Python Fix\nImports, gratis)</li>\n<li>Removes unused imports, not just reformats them (importanize)</li>\n<li>Reformats imports, not just removes unused ones (autoflake)</li>\n<li>Doesn\u2019t miss removing an import that isn\u2019t used just because it\u2019s on a\nmultiline import (autoflake)</li>\n<li>Breaks up <em>all</em> imports into individual lines, not just if the line is &gt;80 char\n(importanize)</li>\n<li>Is still pretty simple (we\u2019re a bit beyond our original \u201cextremely\u201d simple\nbaseline, because all problems are ultimately not that simple) because (since\npyflakes and now flake8-import-order do most of the hard work) this is an\nextremely simple job, there\u2019s (still) no  need for a giant application here.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The script can run without any configuration, options are as follows:</p>\n<pre>$ zimports --help\nusage: zimports [-h] [-m APPLICATION_IMPORT_NAMES]\n                [-p APPLICATION_PACKAGE_NAMES] [--style STYLE] [-k]\n                [--heuristic-unused HEURISTIC_UNUSED] [--statsonly] [-e]\n                [--diff] [--stdout]\n                filename [filename ...]\n\npositional arguments:\n  filename              Python filename(s) or directories\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -m APPLICATION_IMPORT_NAMES, --application-import-names APPLICATION_IMPORT_NAMES\n                        comma separated list of names that should be\n                        considered local to the application. reads from\n                        [flake8] application-import-names by default.\n  -p APPLICATION_PACKAGE_NAMES, --application-package-names APPLICATION_PACKAGE_NAMES\n                        comma separated list of names that should be\n                        considered local to the organization. reads from\n                        [flake8] application-package-names by default.\n  --style STYLE         import order styling, reads from [flake8] import-\n                        order-style by default, or defaults to 'google'\n  --multi-imports       If set, multiple imports can exist on one line\n  -k, --keep-unused     keep unused imports even though detected as unused\n  --heuristic-unused HEURISTIC_UNUSED\n                        Remove unused imports only if number of imports is\n                        less than &lt;HEURISTIC_UNUSED&gt; percent of the total\n                        lines of code\n  --statsonly           don't write or display anything except the file stats\n  -e, --expand-stars    Expand star imports into the names in the actual\n                        module, which can then have unused names removed.\n                        Requires modules can be imported\n  --diff                don't modify files, just dump out diffs\n  --stdout              dump file output to stdout\n</pre>\n<p>Typically, configuration will be in <tt>setup.cfg</tt> for flake8 (support for\ntox.ini, pyproject.toml is TODO):</p>\n<pre>[flake8]\nenable-extensions = G\nignore =\n    A003,\n    E203,E305,E711,E712,E721,E722,E741,\n    F841,\n    N801,N802,N806,\n    W503,W504\nimport-order-style = google\napplication-import-names = sqlalchemy,test\n</pre>\n<p>Then, a typical run on a mostly clean source tree looks like:</p>\n<pre>$ zimports lib/\n[Unchanged]     lib/sqlalchemy/inspection.py (in 0.0058 sec)\n[Unchanged]     lib/sqlalchemy/log.py (in 0.0221 sec)\n\n...\n\n[Unchanged]     lib/sqlalchemy/orm/attributes.py (in 0.2152 sec)\n[Unchanged]     lib/sqlalchemy/orm/base.py (in 0.0363 sec)\n[Writing]       lib/sqlalchemy/orm/relationships.py ([2% of lines are imports] [source +0L/-2L] [3 imports removed in 0.3287 sec])\n[Unchanged]     lib/sqlalchemy/orm/strategies.py (in 0.2237 sec)\n</pre>\n<p>The program has two general modes of usage.  One is that of day-to-day usage\nfor an application that already has clean imports.   Running zimports on the\nsource files of such an application should produce no changes, except for\nwhatever source files were recently edited, and may have some changes to\nimports that need to be placed into the correct order. This usage model is\nsimilar to that of <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">Black</a>, where you can run\n\u201czimports .\u201d and it will find whatever files need adjusting and leave the rest\nalone.</p>\n<p>The other mode of usage is that of the up-front cleaning up of an application\nthat has  un- organized imports.   In this mode of usage, the goal is to get\nthe source files to be cleaned up so that <tt>zimports</tt> can be run straight\nwithout any modifications to the file needed, including that all necessary\nimports are either used locally or marked as not to be removed.</p>\n<p>Problems that can occur during this phase are that some imports are unused and\nshould be removed, while other imports that are apparently unused are still in\nfact imported by other parts of the program.   Another issue is that changing\nthe ordering of imports in complex cases may cause the application to no longer\nrun due to the creation of unresolvable import cycles.   Finally,  some\nprograms have use of <tt>import *</tt>, pulling in a large list of names for  which\nan unknown portion of them are needed by the application.  The options\n<tt><span class=\"pre\">--keep-unused</span></tt>, <tt><span class=\"pre\">--heuristic-unused</span></tt> and <tt><span class=\"pre\">--expand-stars</span></tt> are\nprovided to assist in working through these issues until the  code can be\nfully reformatted such that running <tt>zimports</tt> no longer produces changes.</p>\n<p>The issue of apparently unused imports that are externally imported  can be\nprominent in some applications.  In order to allow imports that aren\u2019t locally\nused to remain in the source file, symbols that are part of\n<tt>__all__</tt> will not be removed, as will imports that are followed by a ``  #\nnoqa`` comment.  Either of these techniques should be applied to imports that\nare used from other modules but not otherwise referenced within the immediate\nsource file.   For the less common case that a few imports really need a very\nspecific import order for things to work, those imports can be followed by a ``\n# noqa nosort`` comment that will add these lines to a special group at the end\nof all imports, where they will not be removed and their order relative to each\nother will be maintained.</p>\n<p>The program does currently require that you pass it at least one file or\ndirectory name as an argument.   It also does not have the file caching feature\nthat Black has, which can allow it to only look at files that have changed\nsince the last run.  The plan is to have it check that it\u2019s inside a git\nrepository where it will run through files to be committed if no filenames  are\ngiven.</p>\n</div>\n<div id=\"usage-as-a-git-hook\">\n<h2>Usage as a <tt>git</tt> hook</h2>\n<p><tt>zimports</tt> can be used with the <a href=\"https://pre-commit.com/\" rel=\"nofollow\">pre-commit</a> git hooks framework.  To add\nthe plugin, add the following to your <tt><span class=\"pre\">.pre-commit-config.yaml</span></tt>.  Note\nthe <tt>rev:</tt> attribute refers to a git tag or revision number of\nzimports to be used, such as <tt>\"master\"</tt> or <tt>\"0.1.3\"</tt>:</p>\n<pre><span class=\"nt\">repos</span><span class=\"p\">:</span>\n<span class=\"p-Indicator\">-</span>   <span class=\"nt\">repo</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">https://github.com/sqlalchemyorg/zimports/</span>\n    <span class=\"nt\">rev</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">0.1.3</span>\n    <span class=\"nt\">hooks</span><span class=\"p\">:</span>\n    <span class=\"p-Indicator\">-</span>   <span class=\"nt\">id</span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">zimports</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6032199, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "81f7bb8b518d6e9d3ad9fb5296c7fa23", "sha256": "d5447295199b0dac5030c1a1f085f4459105fdacfb8f8f58497ef66994eee5ce"}, "downloads": -1, "filename": "zimports-0.1.0.tar.gz", "has_sig": false, "md5_digest": "81f7bb8b518d6e9d3ad9fb5296c7fa23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8343, "upload_time": "2019-01-07T05:47:18", "upload_time_iso_8601": "2019-01-07T05:47:18.694612Z", "url": "https://files.pythonhosted.org/packages/46/2c/45ef5c627a6432c41a976856b8c028813f1998b2cad130eb723855b9c565/zimports-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4fe3d899008e64c737f20263f2a415e9", "sha256": "58c97a677a9abc1c5174c20ed81b25437273dfb78e749e3178dd6066e45ba485"}, "downloads": -1, "filename": "zimports-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4fe3d899008e64c737f20263f2a415e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36231, "upload_time": "2019-01-07T05:58:55", "upload_time_iso_8601": "2019-01-07T05:58:55.009500Z", "url": "https://files.pythonhosted.org/packages/11/73/e44c33275de8fc354547220b46d84ef8cf4aabf72ce461b4a03b1d0df36e/zimports-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4b15db481876709f319fe11846d7e0bb", "sha256": "697293cc99f434ba0e93e5e5bdfae34442c181a16ec950ec5c3557f233d3aa10"}, "downloads": -1, "filename": "zimports-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4b15db481876709f319fe11846d7e0bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40714, "upload_time": "2019-01-07T06:59:27", "upload_time_iso_8601": "2019-01-07T06:59:27.587886Z", "url": "https://files.pythonhosted.org/packages/89/49/984358f94048ff218c013bac672c280f125939e23ca898b63cf6cce28ee1/zimports-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b773c3663f968b32b9baade4d337f8ff", "sha256": "1297e0ecfc80dfe746cef3142ae9614eab1bf56ef75176fdea75a0915ab073e7"}, "downloads": -1, "filename": "zimports-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b773c3663f968b32b9baade4d337f8ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41131, "upload_time": "2019-01-07T19:35:31", "upload_time_iso_8601": "2019-01-07T19:35:31.869940Z", "url": "https://files.pythonhosted.org/packages/17/9e/ff7223a7ead8c064435b6200267b1abb5b34c71822ad2ea6d4eaaed8862e/zimports-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c0f15f09757ce9725c90927156503f20", "sha256": "ddd74b45c25bcb525a97df5f1ce782a0734a8c894acd415d7ee0f2cafa7357e7"}, "downloads": -1, "filename": "zimports-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c0f15f09757ce9725c90927156503f20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41540, "upload_time": "2019-10-25T22:55:48", "upload_time_iso_8601": "2019-10-25T22:55:48.807033Z", "url": "https://files.pythonhosted.org/packages/c6/e5/85328dc85c4839ccd630cff8437d72e37f44ded3c29205ef79fbb8f480d3/zimports-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0f15f09757ce9725c90927156503f20", "sha256": "ddd74b45c25bcb525a97df5f1ce782a0734a8c894acd415d7ee0f2cafa7357e7"}, "downloads": -1, "filename": "zimports-0.2.0.tar.gz", "has_sig": false, "md5_digest": "c0f15f09757ce9725c90927156503f20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41540, "upload_time": "2019-10-25T22:55:48", "upload_time_iso_8601": "2019-10-25T22:55:48.807033Z", "url": "https://files.pythonhosted.org/packages/c6/e5/85328dc85c4839ccd630cff8437d72e37f44ded3c29205ef79fbb8f480d3/zimports-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:16:14 2020"}