{"info": {"author": "Anders Munch", "author_email": "ajm@jmunch.dk", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: MacOS X :: Carbon", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications :: GTK", "Intended Audience :: Developers", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: User Interfaces"], "description": "wxWize - a wxPython object builder library\n==========================================\n\nWhat? Why?\n+++++++++++\n\nwxWize is a GUI builder library that supplements wxPython.\nwxPython is very powerful and very flexible, but creating windows,\nsizers and events can be a bit cumbersone.\n\nThis is where wxWize comes in, providing a simple way of creating\nsophisticated wxPython designs in fewer lines of code, with vastly\nimproved readability, and without sacrifising any of the expressive\npower of programmatic GUI building.\n\nIt's a shallow wrapper, intended to be easily picked up by anyone\nwho's written wxPython applications before. Things are called the same\nas in wxPython/wxWidgets where possible.\n\nOnce frames and dialogs are created, wxWize steps out of the way, and\nthe wxPython objects are all yours. You use them exactly the same as\nyou've always done, using familiar methods like Bind, SetValue,\nGetValue, SetBackgroundColour etc.\n\n\nHow?\n++++\n\n* wxWize uses the Python ``with`` statement to express object nesting.\n* Sizers and windows are integrated in a single hierarchy, meaning that\n  you no longer need to type in all those sizer.Add calls -- wxWize\n  does that for you, based on relative positions in the\n  with-statement hierarchy.\n* ``parent`` and ``id`` parameters are gone as required parameters for\n  controls. parent is computed from the hierarchy position. They can\n  still be set where needed using named parameters.\n\n\nInstallation\n++++++++++++\n\n``$ pip install wxWize``\n\nOr copy wize.py to your site-packages directory.\n\n\n\nUsage\n+++++\n\nSizers\n------\n\nUse the with statement to create sizers.  Sizers and windows that are\ncreated within the scope of the with-statement, become children of the\nsizer, and automatically added.\n\n\nSimple windows\n--------------\n\n\nTo create a wx.Window control, use the identically named wize class.\nThe \\_\\_init\\_\\_ parameters are the same as for the wxPython object, except for this:\n\n* There are only a 1-2 (or an occasional 3) positional\n  parameters. ``parent``, ``id``, ``pos``, ``size``\n  and ``style`` have been relegated to keyword-only.\n* ``parent`` can and should be\n  omitted entirely (except for the top-level item).\n* ``flag`` and ``proportion`` parameters\n  provide parent sizer Add arguments.\n* ``x``, ``y``, ``xspan``\n  and ``yspan`` provide additional parent sizer Add\n  arguments, for when the parent sizer is a GridBagSizer.\n* ``EVT_*`` parameters provide an event binding\n  shorthand.\n* ``init`` or ``cls`` are useful for subclassing.\n\n\nContainer windows\n-----------------\n\nFor windows that can have sub-windows (wize.Frame, wize.Dialog, wize.Panel,\nwize.StaticBox), use the with statement and nest other windows or sizers\nbelow it.\n\nIf needed, a BoxSizer is created automatically and passed to\nSetSizer. Use  the ``orient`` parameter\nto set the direction.\n\nIf there is only one child and that child is a sizer, then\nno BoxSizer is created and the child is used instead.\n\n\nInterfacing with ordinary wxPython code\n---------------------------------------\n\nwx.Frame/wx.Dialog implemented with wxWize\n..........................................\n\nWhen implementing the whole of a top-level window using wxWize,\ndefine the wxWize hierarchy (of nested with-statements) in the\n\\_\\_init\\_\\_ of your wx.Frame/wx.Dialog subclass. Use\nthe ``init`` parameter for the top-level call to\nwize.Frame/wize.Dialog.\n\n\nNesting a wxWize hierarchy within an existing structure\n..............................................................\n\nWhen implementing only a part of the frame/dialog using wxWize,\n  provide a ``parent`` argument to the top-level wxWize\n  object, and the object returned from ``with .. as``\n  will be ready to put into a sizer in your own plain wxPython code.\n\nNesting an wxPython window\n..........................\n\nwxPython objects - windows and sizers - can be inserted into a\nwxWize hierarchy using ordinary Sizer.Add method calls - using the\n``with .. as`` value from e.g. a wize.BoxSizer or wize.GridSizer.\nThe wize.Parent function returns a suitable parent value for\nwindows.\n\n\nFor windows, an alternative is to create a wize.Window with\na ``w`` parameter, and sizer parameters (flag,proportion)\nas needed. Then, wxWize handles the sizer Add.  So you'd write e.g.:\n\n.. code-block:: python\n\n    my_win = CreateWindowSomeOtherWay(parent=wize.Parent(),...)\n    wize.Window(w=my_win, flag=wx.EXPAND, proportion=1)\n\n\nNesting a wxPython sizer\n........................\n\nThere's no similar setup for inserting a sizer. But you can always \n\n\nGetting at the wxPython objects\n-------------------------------\n\nThe sizers and windows created are ordinary wx.Sizer and wx.Window\nobjects. ``with wize. as *variable*`` binds the\nwrapped  wxPython object to *variable*.\n\nAll the wxWize classes are intended to be used in a Python with\nstatement.   The value bound with ``with .. as`` is the\nwrapped wxPython object, a wx.Window or a wx.Sizer.\n\nFor simple objects with no sub-objects -- StaticText, TextCtrl,\nChoice etc. -- the with statement can be omitted. In that case, to get\nat the wrapped wxPython object, use the ``wx`` property.\n\nE.g. instead of writing:\n\n.. code-block:: python\n\n    with wize.BoxSizer(wx.HORIZONTAL):\n        with wize.StaticText(u'Enter name: '): pass\n        with wize.TextCtrl() as name_input: pass\n\nyou can write, to the same effect:\n\n.. code-block:: python\n\n    with wize.BoxSizer(wx.HORIZONTAL):\n        wize.StaticText(u'Enter name: ')\n        name_input = wize.TextCtrl().wx\n\n\nMenus\n-----\n\nJust like the with statement and indentation is used to place controls into the sizer\nhierarchy, the with statement and indentation can be used to create\nmenus and submenus. See the example in ``demo_pallette.py``.\n\nStart with a ``wize.MenuBar`` or ``wize.PopupMenu`` at the top level. Nested within\nthat, use ``wize.MenuItem``'s to create simple menu entries, and ``wize.Menu``'s to\ncreate submenus.\n\nFor an application-global menu bar, use ``wize.MenuBar``, with the main\nframe of application as the parent. That is to say, either nest\n``wize.MenuBar`` within a ``wize.Frame``, or provide the ``wx.Frame`` in the\n``parent`` parameter. The immediate children must be ``wize.Menu``'s, not\nMenuItem's.\n\nFor a pop-up menu, use ``wize.PopupMenu`` as the top-level item, nesting\n``wize.MenuItem`` and ``wize.Menu`` objects as desired.\n\n``wize.MenuCheck`` and ``wize.MenuRadio`` are shortcuts for\n``wize.MenuItem`` with parameters to create a menu item with a checkbox,\nwith a radio button.\n\nAlso there's ``wize.MenuSeparator`` which adds a separate line between\nmenu items.\n\nSpecific features\n+++++++++++++++++\n\nEVT\\_\\* binding\n---------------\n\nBind an event callback by using the event name as a named parameter,\nwith the callback as its value. I.e. ``EVT_FOO=self.OnFoo``\nis a shorthand for ``.Bind(wx.EVT_FOO, self.OnFoo)``.\n\n\nMixing in a window not created using wxWize\n-------------------------------------------\n\nIf for whatever reason you don't want wxWize to create a window, but\nyou still wxWize to handle the sizers, then create the window yourself\nand pass it to the ``w`` parameter. wxWize will then use the\nw-value you provided instead of creating a new window.\n\n\nYou can do this even if there's no precise wxWize equivalent to the\n  type of window created. Use a superclass such as wize.Window or wize.Panel\n  instead.\n\nAutomatic wx.ALL if border>0\n-------------------------------\n\nIf ``border`` is set, and none of the border flags\n(wx.TOP,wx.BOTTOM,wx.LEFT,wx.RIGHT) are set, then wx.ALL is assumed.\n\n\nfgcolour, bgcolour and toolTip\n------------------------------\n\nPass a ``fgcolour``, ``bgcolour`` or ``toolTip`` parameter as a shorthand\nfor  ``.SetForegroundColour``, ``.SetBackgroundColour`` or ``.SetToolTip``.\n\n\nwx.EXPAND and proportion=1 for sizers and panels\n------------------------------------------------\n\nSizers and panels have ``flag=wx.EXPAND`` as the default. (Controls have ``flag=0``.)\nAdditionally, panels have proportion=1 as the default.\n\nwx.EXPAND and proportion>0 help sizers and panels be neutral\nintermediaries: If you e.g have a ListCtrl on a Frame, and you change\nthat to be a ListCtrl on a Panel on a Frame, then the ListCtrl will\nresize with the frame if it did before.\n\nPanels include wize.Panel and wize.SplitterWindow. \n\nChanging defaults with Default\n------------------------------\n\nThe Default classmethod temporarily changes the default value of one or\nmore attributes. It's a with-statement expression, and takes keyword\nparameters which are the new defaults for the class for anything\ncreated within the scope of the with statement.\n\nFor example, to revert the default flag value for a BoxSizer back to 0,\ninstead of wx.EXPAND, do this:\n\n\n.. code-block:: python\n\n    with wize.BoxSizer.Default(flag=0):\n        ....\n\n\nGridBagSizer positioning\n------------------------\n\nGrid position in a GridBagSizer is set using\nseparate ``x`` and ``y`` parameters (which become\nthe position=wx.GBPosition(y,x) argument to wx.GridBagSizer.Add). To span over\nmore than one square, there's ``xspan``\nand ``yspan`` (which become the wx.GBSpan(yspan,xspan)\nargument to wx.GridBagSizer.Add).\n\n\nIf both ``x`` and  ``y`` are omitted, then the\nitem is placed to the right of the previous item, or just below. The\nvalue of the ``orient`` attribute determines which one:\nwx.HORIZONTAL, and it's to the right, wx.VERTICAL, and it's below.\n\n\nOne or both of ``x`` and ``y`` can be\nomitted, in which case the previous value is reused. Or, the\nprevious value plus one.  That happens if a new x value is provided\nthat isn't larger than the previous one, then y is incremented, and\nsimilarly, if the new y value is provided that isn't larger than the\nprevious one, then x is incremented.\n\nThis is perhaps better shown by example:\n\n  .. code-block:: python\n\n    with wize.GridBagSizer():\n        wize.StaticText(\"First\", x=0, y=0)  # (x=0, y=0)\n        wize.StaticText(\"Second\", x=1)      # (x=1, y=0)\n        wize.StaticText(\"Third\", x=0)       # (x=0, y=1)\n        wize.StaticText(\"Fourth\", x=1)      # (x=1, y=1)\n        wize.StaticText(\"Fifth\", x=1)       # (x=1, y=2)\n\nAlthough only the line number y=0 is explicitly given, \"Third\" and\n\"Fifth\" are moved to a new line, because the x value isn't to the\nright of the previous x value.\n\nNote that this could also have been written like this:\n\n  .. code-block:: python\n\n    with wize.GridBagSizer(wx.HORIZONTAL):\n        wize.StaticText(\"First\")              # (x=0, y=0) is the default\n        wize.StaticText(\"Second\")             # (x=1, y=0)\n        wize.StaticText(\"Third\", x=0)         # (x=0, y=1)\n        wize.StaticText(\"Fourth\")             # (x=1, y=1)\n        wize.StaticText(\"Fifth\", x=1)         # (x=1, y=2)\n\n\nStaticBox\n---------\n\nThe wize.StaticBox control combines wx.StaticBox and wx.StaticBoxSizer\ninto one.\n\n\nStaticLine\n----------\n\nThe default sizer flag is wx.EXPAND.  A new parameter, 'thickness',\nsets the size to (-1,self.thickness) if the style is wx.LI_HORIZONTAL,\nor (self.thickness,-1) if wx.LI_VERTICAL. In combination, that means\nthat e.g. within a BoxSizer(wx.VERTICAL)\n\n.. code-block:: python\n\n    wize.StaticLine(3, wx.LI_HORIZONTAL)\n\nor, since wx.LI_HORIZONTAL is already the default, shortened to:\n\n.. code-block:: python\n\n    wize.StaticLine(3)\n\nputs a 3 pixels high line horisontal line across the full width.\n\n\nSplitterWindow\n--------------\n\n``SplitterWindow(wx.HORIZONTAL)`` puts the two nested windows side by side\nwith a resizing sash between. ``SplitterWindow(wx.VERTICAL)`` puts the two\nnested windows on top of one another. (Don't call ``SplitVertically`` or\n``SplitHorizontally``, it's automatic.)\n\nThe default of sashGravity=0.5 makes the subwindows equal sized, and\nthe default of minimumPaneSize=1 ensures that the second subwindow\ndoesn't disappear unexpectedly. (Use minimumPaneSize=0 to restore the\nwxWidgets default behaviour that a double\nclick on the sash hides the second window.)\n\nSubclassing\n-----------\n\nWhen defining a new subclass of a wxPython class, the new subclass\ndoes not have an implementation in wxWize. The obvious fix is to\ncreate a such a class, a wize.Control subclass to wrap your\nwx.Control subclass.\n\nThat's not at all hard to do.  If you look in wize.py, you can see how\nit's done for the standard controls and do something similar.\n\nBut there are other options: For wx.Frame and wx.Dialog subclasses,\ndefine the wxWize object hierarchy by using nested with's in\n\\_\\_init\\_\\_. For the root of the with-hierarchy, use a wize.Frame or wize.Dialog\nwith init=self.\n\nFinally there's ``cls``, which is an option, if the\nsubclass \\_\\_init\\_\\_ parameter list is identical to the parent\n\\_\\_init\\_\\_.\n\nSubclassing with ``init``\n-------------------------\n\nThe ``init`` parameter provides a way to use wxWize from\nwithin the \\_\\_init\\_\\_ of a wxPython window subclass. It goes like this:\n\n\nInstead of calling parent \\_\\_init\\_\\_ from within the subclass\n\\_\\_init\\_\\_, create a wxWize object using ``init=self``\ninstead. Now wxWize will call the parent \\_\\_init\\_\\_ with the same\nparameters it would otherwise have used to create a new object.\n\nSubclassing with ``cls``\n------------------------\n\nIf the subclass \\_\\_init\\_\\_ takes the same parameters as the parent\nclass, then you can use an existing wxWize-class\nwith ``cls=MyNewSubclass``. The ``cls`` parameter\ntells wxWize to create the window using this class instead of the normal wxPython class.\n\n\n\nIsolating with ``Isolate``\n--------------------------\n\nwxWize uses global state to track the current wxWize\nparent. ``with Isolate():`` temporarily sets the wxWize\nparent to None, so that objects created in the context do not become linked into the\ncurrent hierarchy, but stand on their own.\n\n\nList of classes\n+++++++++++++++\n\n=======================\t=========================================\nClass name\t\tPositional parameters \n=======================\t=========================================  \nBoxSizer\t\torient\nButton\t\t\tlabel\nCheckBox\t\tlabel\nChoice\t\t\tchoices\nComboBox\t\tvalue, choices\nCommandLinkButton\tmainLabel, note\nControl\t\t\tw\nDatePickerCtrl\t\tdt\nDialog\t\t\ttitle\nFileBrowseButton\t\nFlexGridSizer\t\trows\nFrame\t\t\ttitle\nGauge\t\t\trange\nGradientButton\t\tlabel, bitmap\nGrid\t\t\t\nGridBagSizer\t\t\nIsolate\nListBox\t\t\tchoices\nListCtrl\t\t\nMaskedNumCtrl\t\tvalue\nMaskedTextCtrl\t\tvalue\nMenu\t\t\tlabel\nMenuBar\t\t\tparent\nMenuCheck\t\ttext, callback\nMenuItem\t\ttext, callback\nMenuRadio\t\ttext, callback\nMenuSeparator\t\ttext, callback\nNotebook\t\t\nPage\t\t\ttext\nPanel\t\t\tproportion\nPopupMenu\t\tparent\nPropertyGrid\t\t\nRadioButton\t\tlabel\nScrolledPanel\t\t\nScrolledWindow\t\nShell\t\t\t\nSpacer\t\t\tsize\nSpinCtrl\t\tmin, max, initial\nSplitterWindow\t\torient, minimumPaneSize\nStaticBox\t\tlabel, orient\nStaticLine\t\tthickness, style\nStaticText\t\tlabel\nStdDialogButtonSizer\t\nTextCtrl\t\tvalue\nTopLevelWindow\t\ttitle\nWindow\t\t\tw\n=======================\t=========================================\n\n\nParameters not in the wxWidgets docs\n++++++++++++++++++++++++++++++++++++\n\nThe wxPython/wxWidgets documentation for creating objects can be\nused with wxWize as well, since all the documented \\_\\_init\\_\\_\nparameters are available.\n\nHere's an overview of the additional parameters that are specific to wxWize:\n\n\n=======================\t=================================================================================\nParameter name\t\tDescription\n=======================\t================================================================================= \nw\t\t\tPre-created wxPython object. \ncls\t\t\tSubclass of the wrapped wxPython class to use. \ninit\t\t\tinit=self if using wxWize to initialise the parent class in \\_\\_init\\_\\_ \nproportion\t\tSizer Add parameter. \nflag\t\t\tSizer Add parameter.\nborder\t\t\tSizer Add parameter.\norient\t\t\tPanels and top-level windows can also take this BoxSizer parameter.\nfgcolour\t\tTriggers a SetForegroundColour method call.\nfgcolour\t\tTriggers a SetBackgroundColour method call.\ntoolTip\t\t\tTriggers a SetToolTipString method call.\nx\t\t\tGridBagSizer column number.\ny\t\t\tGridBagSizer row number.\nxspan\t\t\tGridBagSizer column span.\nyspan\t\t\tGridBagSizer row span.\norient\t\t\tLayout of children, wx.VERTICAL or wx.HORIZONTAL\ncallback\t\tEVT_MENU action for MenuItem's\nthickness\t\tStaticLine line width.\nInterpClass_args\t\\*args for Shell to pass to InterpClass \nInterpClass_kwargs\t\\*\\*kwargs for Shell to pass to InterpClass \nsashGravity\t\tSplitterWindow.SetSashGravity parameter\nminimumPaneSize\t\tSplitterWindow.SetMinimumPaneSize parameter\nEVT\\_\\*\t\t\tSet an event callback.\n=======================\t=================================================================================\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AndersMunch/wxWize", "keywords": "wxPython wxWidgets sizers", "license": "WTFPL", "maintainer": "", "maintainer_email": "", "name": "wxWize", "package_url": "https://pypi.org/project/wxWize/", "platform": "", "project_url": "https://pypi.org/project/wxWize/", "project_urls": {"Homepage": "https://github.com/AndersMunch/wxWize"}, "release_url": "https://pypi.org/project/wxWize/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "wxPython object builder", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-why\">\n<h2>What? Why?</h2>\n<p>wxWize is a GUI builder library that supplements wxPython.\nwxPython is very powerful and very flexible, but creating windows,\nsizers and events can be a bit cumbersone.</p>\n<p>This is where wxWize comes in, providing a simple way of creating\nsophisticated wxPython designs in fewer lines of code, with vastly\nimproved readability, and without sacrifising any of the expressive\npower of programmatic GUI building.</p>\n<p>It\u2019s a shallow wrapper, intended to be easily picked up by anyone\nwho\u2019s written wxPython applications before. Things are called the same\nas in wxPython/wxWidgets where possible.</p>\n<p>Once frames and dialogs are created, wxWize steps out of the way, and\nthe wxPython objects are all yours. You use them exactly the same as\nyou\u2019ve always done, using familiar methods like Bind, SetValue,\nGetValue, SetBackgroundColour etc.</p>\n</div>\n<div id=\"how\">\n<h2>How?</h2>\n<ul>\n<li>wxWize uses the Python <tt>with</tt> statement to express object nesting.</li>\n<li>Sizers and windows are integrated in a single hierarchy, meaning that\nyou no longer need to type in all those sizer.Add calls \u2013 wxWize\ndoes that for you, based on relative positions in the\nwith-statement hierarchy.</li>\n<li><tt>parent</tt> and <tt>id</tt> parameters are gone as required parameters for\ncontrols. parent is computed from the hierarchy position. They can\nstill be set where needed using named parameters.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>$ pip install wxWize</tt></p>\n<p>Or copy wize.py to your site-packages directory.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"sizers\">\n<h3>Sizers</h3>\n<p>Use the with statement to create sizers.  Sizers and windows that are\ncreated within the scope of the with-statement, become children of the\nsizer, and automatically added.</p>\n</div>\n<div id=\"simple-windows\">\n<h3>Simple windows</h3>\n<p>To create a wx.Window control, use the identically named wize class.\nThe __init__ parameters are the same as for the wxPython object, except for this:</p>\n<ul>\n<li>There are only a 1-2 (or an occasional 3) positional\nparameters. <tt>parent</tt>, <tt>id</tt>, <tt>pos</tt>, <tt>size</tt>\nand <tt>style</tt> have been relegated to keyword-only.</li>\n<li><tt>parent</tt> can and should be\nomitted entirely (except for the top-level item).</li>\n<li><tt>flag</tt> and <tt>proportion</tt> parameters\nprovide parent sizer Add arguments.</li>\n<li><tt>x</tt>, <tt>y</tt>, <tt>xspan</tt>\nand <tt>yspan</tt> provide additional parent sizer Add\narguments, for when the parent sizer is a GridBagSizer.</li>\n<li><tt>EVT_*</tt> parameters provide an event binding\nshorthand.</li>\n<li><tt>init</tt> or <tt>cls</tt> are useful for subclassing.</li>\n</ul>\n</div>\n<div id=\"container-windows\">\n<h3>Container windows</h3>\n<p>For windows that can have sub-windows (wize.Frame, wize.Dialog, wize.Panel,\nwize.StaticBox), use the with statement and nest other windows or sizers\nbelow it.</p>\n<p>If needed, a BoxSizer is created automatically and passed to\nSetSizer. Use  the <tt>orient</tt> parameter\nto set the direction.</p>\n<p>If there is only one child and that child is a sizer, then\nno BoxSizer is created and the child is used instead.</p>\n</div>\n<div id=\"interfacing-with-ordinary-wxpython-code\">\n<h3>Interfacing with ordinary wxPython code</h3>\n<div id=\"wx-frame-wx-dialog-implemented-with-wxwize\">\n<h4>wx.Frame/wx.Dialog implemented with wxWize</h4>\n<p>When implementing the whole of a top-level window using wxWize,\ndefine the wxWize hierarchy (of nested with-statements) in the\n__init__ of your wx.Frame/wx.Dialog subclass. Use\nthe <tt>init</tt> parameter for the top-level call to\nwize.Frame/wize.Dialog.</p>\n</div>\n<div id=\"nesting-a-wxwize-hierarchy-within-an-existing-structure\">\n<h4>Nesting a wxWize hierarchy within an existing structure</h4>\n<dl>\n<dt>When implementing only a part of the frame/dialog using wxWize,</dt>\n<dd>provide a <tt>parent</tt> argument to the top-level wxWize\nobject, and the object returned from <tt>with .. as</tt>\nwill be ready to put into a sizer in your own plain wxPython code.</dd>\n</dl>\n</div>\n<div id=\"nesting-an-wxpython-window\">\n<h4>Nesting an wxPython window</h4>\n<p>wxPython objects - windows and sizers - can be inserted into a\nwxWize hierarchy using ordinary Sizer.Add method calls - using the\n<tt>with .. as</tt> value from e.g. a wize.BoxSizer or wize.GridSizer.\nThe wize.Parent function returns a suitable parent value for\nwindows.</p>\n<p>For windows, an alternative is to create a wize.Window with\na <tt>w</tt> parameter, and sizer parameters (flag,proportion)\nas needed. Then, wxWize handles the sizer Add.  So you\u2019d write e.g.:</p>\n<pre><span class=\"n\">my_win</span> <span class=\"o\">=</span> <span class=\"n\">CreateWindowSomeOtherWay</span><span class=\"p\">(</span><span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">Parent</span><span class=\"p\">(),</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">Window</span><span class=\"p\">(</span><span class=\"n\">w</span><span class=\"o\">=</span><span class=\"n\">my_win</span><span class=\"p\">,</span> <span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"n\">wx</span><span class=\"o\">.</span><span class=\"n\">EXPAND</span><span class=\"p\">,</span> <span class=\"n\">proportion</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"nesting-a-wxpython-sizer\">\n<h4>Nesting a wxPython sizer</h4>\n<p>There\u2019s no similar setup for inserting a sizer. But you can always</p>\n</div>\n</div>\n<div id=\"getting-at-the-wxpython-objects\">\n<h3>Getting at the wxPython objects</h3>\n<p>The sizers and windows created are ordinary wx.Sizer and wx.Window\nobjects. <tt>with wize. as *variable*</tt> binds the\nwrapped  wxPython object to <em>variable</em>.</p>\n<p>All the wxWize classes are intended to be used in a Python with\nstatement.   The value bound with <tt>with .. as</tt> is the\nwrapped wxPython object, a wx.Window or a wx.Sizer.</p>\n<p>For simple objects with no sub-objects \u2013 StaticText, TextCtrl,\nChoice etc. \u2013 the with statement can be omitted. In that case, to get\nat the wrapped wxPython object, use the <tt>wx</tt> property.</p>\n<p>E.g. instead of writing:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">BoxSizer</span><span class=\"p\">(</span><span class=\"n\">wx</span><span class=\"o\">.</span><span class=\"n\">HORIZONTAL</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'Enter name: '</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n    <span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">TextCtrl</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">name_input</span><span class=\"p\">:</span> <span class=\"k\">pass</span>\n</pre>\n<p>you can write, to the same effect:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">BoxSizer</span><span class=\"p\">(</span><span class=\"n\">wx</span><span class=\"o\">.</span><span class=\"n\">HORIZONTAL</span><span class=\"p\">):</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s1\">'Enter name: '</span><span class=\"p\">)</span>\n    <span class=\"n\">name_input</span> <span class=\"o\">=</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">TextCtrl</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">wx</span>\n</pre>\n</div>\n<div id=\"menus\">\n<h3>Menus</h3>\n<p>Just like the with statement and indentation is used to place controls into the sizer\nhierarchy, the with statement and indentation can be used to create\nmenus and submenus. See the example in <tt>demo_pallette.py</tt>.</p>\n<p>Start with a <tt>wize.MenuBar</tt> or <tt>wize.PopupMenu</tt> at the top level. Nested within\nthat, use <tt>wize.MenuItem</tt>\u2019s to create simple menu entries, and <tt>wize.Menu</tt>\u2019s to\ncreate submenus.</p>\n<p>For an application-global menu bar, use <tt>wize.MenuBar</tt>, with the main\nframe of application as the parent. That is to say, either nest\n<tt>wize.MenuBar</tt> within a <tt>wize.Frame</tt>, or provide the <tt>wx.Frame</tt> in the\n<tt>parent</tt> parameter. The immediate children must be <tt>wize.Menu</tt>\u2019s, not\nMenuItem\u2019s.</p>\n<p>For a pop-up menu, use <tt>wize.PopupMenu</tt> as the top-level item, nesting\n<tt>wize.MenuItem</tt> and <tt>wize.Menu</tt> objects as desired.</p>\n<p><tt>wize.MenuCheck</tt> and <tt>wize.MenuRadio</tt> are shortcuts for\n<tt>wize.MenuItem</tt> with parameters to create a menu item with a checkbox,\nwith a radio button.</p>\n<p>Also there\u2019s <tt>wize.MenuSeparator</tt> which adds a separate line between\nmenu items.</p>\n</div>\n</div>\n<div id=\"specific-features\">\n<h2>Specific features</h2>\n<div id=\"evt-binding\">\n<h3>EVT_* binding</h3>\n<p>Bind an event callback by using the event name as a named parameter,\nwith the callback as its value. I.e. <tt>EVT_FOO=self.OnFoo</tt>\nis a shorthand for <tt>.Bind(wx.EVT_FOO, self.OnFoo)</tt>.</p>\n</div>\n<div id=\"mixing-in-a-window-not-created-using-wxwize\">\n<h3>Mixing in a window not created using wxWize</h3>\n<p>If for whatever reason you don\u2019t want wxWize to create a window, but\nyou still wxWize to handle the sizers, then create the window yourself\nand pass it to the <tt>w</tt> parameter. wxWize will then use the\nw-value you provided instead of creating a new window.</p>\n<dl>\n<dt>You can do this even if there\u2019s no precise wxWize equivalent to the</dt>\n<dd>type of window created. Use a superclass such as wize.Window or wize.Panel\ninstead.</dd>\n</dl>\n</div>\n<div id=\"automatic-wx-all-if-border-0\">\n<h3>Automatic wx.ALL if border&gt;0</h3>\n<p>If <tt>border</tt> is set, and none of the border flags\n(wx.TOP,wx.BOTTOM,wx.LEFT,wx.RIGHT) are set, then wx.ALL is assumed.</p>\n</div>\n<div id=\"fgcolour-bgcolour-and-tooltip\">\n<h3>fgcolour, bgcolour and toolTip</h3>\n<p>Pass a <tt>fgcolour</tt>, <tt>bgcolour</tt> or <tt>toolTip</tt> parameter as a shorthand\nfor  <tt>.SetForegroundColour</tt>, <tt>.SetBackgroundColour</tt> or <tt>.SetToolTip</tt>.</p>\n</div>\n<div id=\"wx-expand-and-proportion-1-for-sizers-and-panels\">\n<h3>wx.EXPAND and proportion=1 for sizers and panels</h3>\n<p>Sizers and panels have <tt>flag=wx.EXPAND</tt> as the default. (Controls have <tt>flag=0</tt>.)\nAdditionally, panels have proportion=1 as the default.</p>\n<p>wx.EXPAND and proportion&gt;0 help sizers and panels be neutral\nintermediaries: If you e.g have a ListCtrl on a Frame, and you change\nthat to be a ListCtrl on a Panel on a Frame, then the ListCtrl will\nresize with the frame if it did before.</p>\n<p>Panels include wize.Panel and wize.SplitterWindow.</p>\n</div>\n<div id=\"changing-defaults-with-default\">\n<h3>Changing defaults with Default</h3>\n<p>The Default classmethod temporarily changes the default value of one or\nmore attributes. It\u2019s a with-statement expression, and takes keyword\nparameters which are the new defaults for the class for anything\ncreated within the scope of the with statement.</p>\n<p>For example, to revert the default flag value for a BoxSizer back to 0,\ninstead of wx.EXPAND, do this:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">BoxSizer</span><span class=\"o\">.</span><span class=\"n\">Default</span><span class=\"p\">(</span><span class=\"n\">flag</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"o\">....</span>\n</pre>\n</div>\n<div id=\"gridbagsizer-positioning\">\n<h3>GridBagSizer positioning</h3>\n<p>Grid position in a GridBagSizer is set using\nseparate <tt>x</tt> and <tt>y</tt> parameters (which become\nthe position=wx.GBPosition(y,x) argument to wx.GridBagSizer.Add). To span over\nmore than one square, there\u2019s <tt>xspan</tt>\nand <tt>yspan</tt> (which become the wx.GBSpan(yspan,xspan)\nargument to wx.GridBagSizer.Add).</p>\n<p>If both <tt>x</tt> and  <tt>y</tt> are omitted, then the\nitem is placed to the right of the previous item, or just below. The\nvalue of the <tt>orient</tt> attribute determines which one:\nwx.HORIZONTAL, and it\u2019s to the right, wx.VERTICAL, and it\u2019s below.</p>\n<p>One or both of <tt>x</tt> and <tt>y</tt> can be\nomitted, in which case the previous value is reused. Or, the\nprevious value plus one.  That happens if a new x value is provided\nthat isn\u2019t larger than the previous one, then y is incremented, and\nsimilarly, if the new y value is provided that isn\u2019t larger than the\nprevious one, then x is incremented.</p>\n<p>This is perhaps better shown by example:</p>\n<blockquote>\n<pre><span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">GridBagSizer</span><span class=\"p\">():</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"First\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># (x=0, y=0)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Second\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>      <span class=\"c1\"># (x=1, y=0)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Third\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>       <span class=\"c1\"># (x=0, y=1)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Fourth\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>      <span class=\"c1\"># (x=1, y=1)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Fifth\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>       <span class=\"c1\"># (x=1, y=2)</span>\n</pre>\n</blockquote>\n<p>Although only the line number y=0 is explicitly given, \u201cThird\u201d and\n\u201cFifth\u201d are moved to a new line, because the x value isn\u2019t to the\nright of the previous x value.</p>\n<p>Note that this could also have been written like this:</p>\n<blockquote>\n<pre><span class=\"k\">with</span> <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">GridBagSizer</span><span class=\"p\">(</span><span class=\"n\">wx</span><span class=\"o\">.</span><span class=\"n\">HORIZONTAL</span><span class=\"p\">):</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"First\"</span><span class=\"p\">)</span>              <span class=\"c1\"># (x=0, y=0) is the default</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Second\"</span><span class=\"p\">)</span>             <span class=\"c1\"># (x=1, y=0)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Third\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>         <span class=\"c1\"># (x=0, y=1)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Fourth\"</span><span class=\"p\">)</span>             <span class=\"c1\"># (x=1, y=1)</span>\n    <span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticText</span><span class=\"p\">(</span><span class=\"s2\">\"Fifth\"</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>         <span class=\"c1\"># (x=1, y=2)</span>\n</pre>\n</blockquote>\n</div>\n<div id=\"staticbox\">\n<h3>StaticBox</h3>\n<p>The wize.StaticBox control combines wx.StaticBox and wx.StaticBoxSizer\ninto one.</p>\n</div>\n<div id=\"staticline\">\n<h3>StaticLine</h3>\n<p>The default sizer flag is wx.EXPAND.  A new parameter, \u2018thickness\u2019,\nsets the size to (-1,self.thickness) if the style is wx.LI_HORIZONTAL,\nor (self.thickness,-1) if wx.LI_VERTICAL. In combination, that means\nthat e.g. within a BoxSizer(wx.VERTICAL)</p>\n<pre><span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticLine</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">wx</span><span class=\"o\">.</span><span class=\"n\">LI_HORIZONTAL</span><span class=\"p\">)</span>\n</pre>\n<p>or, since wx.LI_HORIZONTAL is already the default, shortened to:</p>\n<pre><span class=\"n\">wize</span><span class=\"o\">.</span><span class=\"n\">StaticLine</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<p>puts a 3 pixels high line horisontal line across the full width.</p>\n</div>\n<div id=\"splitterwindow\">\n<h3>SplitterWindow</h3>\n<p><tt>SplitterWindow(wx.HORIZONTAL)</tt> puts the two nested windows side by side\nwith a resizing sash between. <tt>SplitterWindow(wx.VERTICAL)</tt> puts the two\nnested windows on top of one another. (Don\u2019t call <tt>SplitVertically</tt> or\n<tt>SplitHorizontally</tt>, it\u2019s automatic.)</p>\n<p>The default of sashGravity=0.5 makes the subwindows equal sized, and\nthe default of minimumPaneSize=1 ensures that the second subwindow\ndoesn\u2019t disappear unexpectedly. (Use minimumPaneSize=0 to restore the\nwxWidgets default behaviour that a double\nclick on the sash hides the second window.)</p>\n</div>\n<div id=\"subclassing\">\n<h3>Subclassing</h3>\n<p>When defining a new subclass of a wxPython class, the new subclass\ndoes not have an implementation in wxWize. The obvious fix is to\ncreate a such a class, a wize.Control subclass to wrap your\nwx.Control subclass.</p>\n<p>That\u2019s not at all hard to do.  If you look in wize.py, you can see how\nit\u2019s done for the standard controls and do something similar.</p>\n<p>But there are other options: For wx.Frame and wx.Dialog subclasses,\ndefine the wxWize object hierarchy by using nested with\u2019s in\n__init__. For the root of the with-hierarchy, use a wize.Frame or wize.Dialog\nwith init=self.</p>\n<p>Finally there\u2019s <tt>cls</tt>, which is an option, if the\nsubclass __init__ parameter list is identical to the parent\n__init__.</p>\n</div>\n<div id=\"subclassing-with-init\">\n<h3>Subclassing with <tt>init</tt></h3>\n<p>The <tt>init</tt> parameter provides a way to use wxWize from\nwithin the __init__ of a wxPython window subclass. It goes like this:</p>\n<p>Instead of calling parent __init__ from within the subclass\n__init__, create a wxWize object using <tt>init=self</tt>\ninstead. Now wxWize will call the parent __init__ with the same\nparameters it would otherwise have used to create a new object.</p>\n</div>\n<div id=\"subclassing-with-cls\">\n<h3>Subclassing with <tt>cls</tt></h3>\n<p>If the subclass __init__ takes the same parameters as the parent\nclass, then you can use an existing wxWize-class\nwith <tt>cls=MyNewSubclass</tt>. The <tt>cls</tt> parameter\ntells wxWize to create the window using this class instead of the normal wxPython class.</p>\n</div>\n<div id=\"isolating-with-isolate\">\n<h3>Isolating with <tt>Isolate</tt></h3>\n<p>wxWize uses global state to track the current wxWize\nparent. <tt>with <span class=\"pre\">Isolate():</span></tt> temporarily sets the wxWize\nparent to None, so that objects created in the context do not become linked into the\ncurrent hierarchy, but stand on their own.</p>\n</div>\n</div>\n<div id=\"list-of-classes\">\n<h2>List of classes</h2>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Class name</th>\n<th>Positional parameters</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>BoxSizer</td>\n<td>orient</td>\n</tr>\n<tr><td>Button</td>\n<td>label</td>\n</tr>\n<tr><td>CheckBox</td>\n<td>label</td>\n</tr>\n<tr><td>Choice</td>\n<td>choices</td>\n</tr>\n<tr><td>ComboBox</td>\n<td>value, choices</td>\n</tr>\n<tr><td>CommandLinkButton</td>\n<td>mainLabel, note</td>\n</tr>\n<tr><td>Control</td>\n<td>w</td>\n</tr>\n<tr><td>DatePickerCtrl</td>\n<td>dt</td>\n</tr>\n<tr><td>Dialog</td>\n<td>title</td>\n</tr>\n<tr><td>FileBrowseButton</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>FlexGridSizer</td>\n<td>rows</td>\n</tr>\n<tr><td>Frame</td>\n<td>title</td>\n</tr>\n<tr><td>Gauge</td>\n<td>range</td>\n</tr>\n<tr><td>GradientButton</td>\n<td>label, bitmap</td>\n</tr>\n<tr><td>Grid</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>GridBagSizer</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>Isolate</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>ListBox</td>\n<td>choices</td>\n</tr>\n<tr><td>ListCtrl</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>MaskedNumCtrl</td>\n<td>value</td>\n</tr>\n<tr><td>MaskedTextCtrl</td>\n<td>value</td>\n</tr>\n<tr><td>Menu</td>\n<td>label</td>\n</tr>\n<tr><td>MenuBar</td>\n<td>parent</td>\n</tr>\n<tr><td>MenuCheck</td>\n<td>text, callback</td>\n</tr>\n<tr><td>MenuItem</td>\n<td>text, callback</td>\n</tr>\n<tr><td>MenuRadio</td>\n<td>text, callback</td>\n</tr>\n<tr><td>MenuSeparator</td>\n<td>text, callback</td>\n</tr>\n<tr><td>Notebook</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>Page</td>\n<td>text</td>\n</tr>\n<tr><td>Panel</td>\n<td>proportion</td>\n</tr>\n<tr><td>PopupMenu</td>\n<td>parent</td>\n</tr>\n<tr><td>PropertyGrid</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>RadioButton</td>\n<td>label</td>\n</tr>\n<tr><td>ScrolledPanel</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>ScrolledWindow</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>Shell</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>Spacer</td>\n<td>size</td>\n</tr>\n<tr><td>SpinCtrl</td>\n<td>min, max, initial</td>\n</tr>\n<tr><td>SplitterWindow</td>\n<td>orient, minimumPaneSize</td>\n</tr>\n<tr><td>StaticBox</td>\n<td>label, orient</td>\n</tr>\n<tr><td>StaticLine</td>\n<td>thickness, style</td>\n</tr>\n<tr><td>StaticText</td>\n<td>label</td>\n</tr>\n<tr><td>StdDialogButtonSizer</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>TextCtrl</td>\n<td>value</td>\n</tr>\n<tr><td>TopLevelWindow</td>\n<td>title</td>\n</tr>\n<tr><td>Window</td>\n<td>w</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"parameters-not-in-the-wxwidgets-docs\">\n<h2>Parameters not in the wxWidgets docs</h2>\n<p>The wxPython/wxWidgets documentation for creating objects can be\nused with wxWize as well, since all the documented __init__\nparameters are available.</p>\n<p>Here\u2019s an overview of the additional parameters that are specific to wxWize:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Parameter name</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>w</td>\n<td>Pre-created wxPython object.</td>\n</tr>\n<tr><td>cls</td>\n<td>Subclass of the wrapped wxPython class to use.</td>\n</tr>\n<tr><td>init</td>\n<td>init=self if using wxWize to initialise the parent class in __init__</td>\n</tr>\n<tr><td>proportion</td>\n<td>Sizer Add parameter.</td>\n</tr>\n<tr><td>flag</td>\n<td>Sizer Add parameter.</td>\n</tr>\n<tr><td>border</td>\n<td>Sizer Add parameter.</td>\n</tr>\n<tr><td>orient</td>\n<td>Panels and top-level windows can also take this BoxSizer parameter.</td>\n</tr>\n<tr><td>fgcolour</td>\n<td>Triggers a SetForegroundColour method call.</td>\n</tr>\n<tr><td>fgcolour</td>\n<td>Triggers a SetBackgroundColour method call.</td>\n</tr>\n<tr><td>toolTip</td>\n<td>Triggers a SetToolTipString method call.</td>\n</tr>\n<tr><td>x</td>\n<td>GridBagSizer column number.</td>\n</tr>\n<tr><td>y</td>\n<td>GridBagSizer row number.</td>\n</tr>\n<tr><td>xspan</td>\n<td>GridBagSizer column span.</td>\n</tr>\n<tr><td>yspan</td>\n<td>GridBagSizer row span.</td>\n</tr>\n<tr><td>orient</td>\n<td>Layout of children, wx.VERTICAL or wx.HORIZONTAL</td>\n</tr>\n<tr><td>callback</td>\n<td>EVT_MENU action for MenuItem\u2019s</td>\n</tr>\n<tr><td>thickness</td>\n<td>StaticLine line width.</td>\n</tr>\n<tr><td>InterpClass_args</td>\n<td>*args for Shell to pass to InterpClass</td>\n</tr>\n<tr><td>InterpClass_kwargs</td>\n<td>**kwargs for Shell to pass to InterpClass</td>\n</tr>\n<tr><td>sashGravity</td>\n<td>SplitterWindow.SetSashGravity parameter</td>\n</tr>\n<tr><td>minimumPaneSize</td>\n<td>SplitterWindow.SetMinimumPaneSize parameter</td>\n</tr>\n<tr><td>EVT_*</td>\n<td>Set an event callback.</td>\n</tr>\n</tbody>\n</table>\n</div>\n\n          </div>"}, "last_serial": 5614743, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "db33ba6d04eb96d66324392f47fd1ef5", "sha256": "46545a83bfa33fc9560dbe9e3621882b250d500266a37fab70ce6b458dcd0dd8"}, "downloads": -1, "filename": "wxWize-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "db33ba6d04eb96d66324392f47fd1ef5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20886, "upload_time": "2017-02-03T22:46:03", "upload_time_iso_8601": "2017-02-03T22:46:03.620227Z", "url": "https://files.pythonhosted.org/packages/78/d8/7b3c4b5d89bbd7bf668d70ed717e995611044c2ad778102788c9fa464481/wxWize-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b996dc9297a765ef0619813ed1dc1f1", "sha256": "3faf996113a3710f841a5c3ce929ac2042b1828e4d76b03dfecc09cd072d89eb"}, "downloads": -1, "filename": "wxWize-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8b996dc9297a765ef0619813ed1dc1f1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20881, "upload_time": "2017-02-03T22:40:22", "upload_time_iso_8601": "2017-02-03T22:40:22.842228Z", "url": "https://files.pythonhosted.org/packages/c8/7d/bbbb34a03a9fd2f430720a2c37ce87651be038201b31a2b329b8de7be573/wxWize-1.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "98582f5f4650af02516fa59a719e4a77", "sha256": "9cd2a85199173d45f32032b87d0ca4c8dce24c0eb3d7f575c14f7200c0b20860"}, "downloads": -1, "filename": "wxWize-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "98582f5f4650af02516fa59a719e4a77", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20924, "upload_time": "2017-02-06T17:38:51", "upload_time_iso_8601": "2017-02-06T17:38:51.020884Z", "url": "https://files.pythonhosted.org/packages/79/80/b587e5b68c01fbd9282a78dad9b505f6c4db7f84c1d701a767e86d96ccf2/wxWize-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "f3c4bf0701cc74592fe76110c7e5f2f1", "sha256": "9b7a3096c03d6942b3020db0e88296cd5f34d044fb6a462bb9d55f8c77386844"}, "downloads": -1, "filename": "wxWize-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f3c4bf0701cc74592fe76110c7e5f2f1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21181, "upload_time": "2017-07-27T18:16:16", "upload_time_iso_8601": "2017-07-27T18:16:16.666267Z", "url": "https://files.pythonhosted.org/packages/76/7a/87b30b1477c749b9c2283345f01f1fb42062f933cb71165abdf4ddd5cbba/wxWize-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1224e2507085b9d996920a60006ce6c8", "sha256": "ca4a6cd7170e0fa37e0a15ffaf2988f337c48148b54c10f0753a8960e0ed2048"}, "downloads": -1, "filename": "wxWize-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1224e2507085b9d996920a60006ce6c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14529, "upload_time": "2018-08-19T11:26:28", "upload_time_iso_8601": "2018-08-19T11:26:28.957453Z", "url": "https://files.pythonhosted.org/packages/1d/8b/b7360e9c60125d966c8740e63a452370702531c2841f8bba0c72a36411e6/wxWize-1.0.3-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f135ceba6c3d9f799d57651cb945ee4c", "sha256": "d1b128cae84efa042dde8098174c8cbadac19f01aa350fa97f20bce975dd18d2"}, "downloads": -1, "filename": "wxWize-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f135ceba6c3d9f799d57651cb945ee4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14599, "upload_time": "2019-07-31T17:46:03", "upload_time_iso_8601": "2019-07-31T17:46:03.495352Z", "url": "https://files.pythonhosted.org/packages/8c/fa/dc95d39f3ff7b9133c71f99de342c9e44404a0d2be1d1f140680b1650103/wxWize-1.1.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f135ceba6c3d9f799d57651cb945ee4c", "sha256": "d1b128cae84efa042dde8098174c8cbadac19f01aa350fa97f20bce975dd18d2"}, "downloads": -1, "filename": "wxWize-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f135ceba6c3d9f799d57651cb945ee4c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14599, "upload_time": "2019-07-31T17:46:03", "upload_time_iso_8601": "2019-07-31T17:46:03.495352Z", "url": "https://files.pythonhosted.org/packages/8c/fa/dc95d39f3ff7b9133c71f99de342c9e44404a0d2be1d1f140680b1650103/wxWize-1.1.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:26:35 2020"}