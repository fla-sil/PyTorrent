{"info": {"author": "Vamsi Krishna Devabathini", "author_email": "devabathini92@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# qsim and qsimh\n\nQuantum circuit simulators qsim and qsimh. These simulators were used for cross\nentropy benchmarking in\n[[1]](https://www.nature.com/articles/s41586-019-1666-5).\n\n[[1]](https://www.nature.com/articles/s41586-019-1666-5), F. Arute et al,\n\"Quantum Supremacy Using a Programmable Superconducting Processor\",\nNature 574, 505, (2019).\n\n## qsim\n\nqsim is a Schr\u00f6dinger full state-vector simulator. It computes all the *2<sup>n</sup>*\namplitudes of the state vector, where *n* is the number of qubits.\nEssentially, the simulator performs matrix-vector multiplications repeatedly.\nOne matrix-vector multiplication corresponds to applying one gate.\nThe total runtime is proportional to *g2<sup>n</sup>*, where *g* is the number of\n2-qubit gates. To speed up the simulator, we use gate fusion\n[[2]](https://arxiv.org/abs/1601.07195) [[3]](https://arxiv.org/abs/1704.01127),\nsingle precision arithmetic, AVX/FMA instructions for vectorization and OpenMP\nfor multi-threading.\n\n[[2]](https://arxiv.org/abs/1601.07195) M. Smelyanskiy, N. P. Sawaya,\nA. Aspuru-Guzik, \"qHiPSTER: The Quantum High Performance Software Testing\nEnvironment\", arXiv:1601.07195 (2016).\n\n[[3]](https://arxiv.org/abs/1704.01127) T. H\u00e4ner, D. S. Steiger,\n\"0.5 Petabyte Simulation of a 45-Qubit Quantum Circuit\", arXiv:1704.01127\n(2017).\n\n## qsimh\n\nqsimh is a hybrid Schr\u00f6dinger-Feynman simulator\n[[4]](https://arxiv.org/abs/1807.10749). The lattice is split into two parts\nand the Schmidt decomposition is used to decompose 2-qubit gates on the\ncut. If the Schmidt rank of each gate is *m* and the number of gates on\nthe cut is *k* then there are *m<sup>k</sup>* paths. To simulate a circuit with\nfidelity one, one needs to simulate all the *m<sup>k</sup>* paths and sum the results.\n  The total runtime is proportional to *(2<sup>n<sub>1</sub></sup> + 2<sup>n<sub>2</sub></sup>)m<sup>k</sup>*, where *n<sub>1</sub>*\nand *n<sub>2</sub>* are the qubit numbers in the first and second parts. Path\nsimulations are independent of each other and can be trivially parallelized\nto run on supercomputers or in data centers. Note that one can run simulations\nwith fidelity *F < 1* just by summing over a fraction *F* of all the paths.\n\nA two level checkpointing scheme is used to improve performance. Say, there\nare *k* gates on the cut. We split those into three parts: *p+r+s=k*, where\n*p* is the number of \"prefix\" gates, *r* is the number of \"root\" gates and\n*s* is the number of \"suffix\" gates. The first checkpoint is executed after\napplying all the gates up to and including the prefix gates and the second\ncheckpoint is executed after applying all the gates up to and including the\nroot gates. The full summation over all the paths for the root and suffix gates\nis performed.\n\nIf *p>0* then one such simulation gives *F &#8776; m<sup>-p</sup>* (for all the\nprefix gates having the same Schmidt rank *m*). One needs to run *m<sup>p</sup>*\nsimulations with different prefix paths and sum the results to get *F = 1*.\n\n[[4]](https://arxiv.org/abs/1807.10749) I. L. Markov, A. Fatima, S. V. Isakov,\nS. Boixo, \"Quantum Supremacy Is Both Closer and Farther than It Appears\",\narXiv:1807.10749 (2018).\n\n## C++ Usage\n\nThe code is basically designed as a library. The user can modify sample\naplications in [apps](apps) to meet their own needs. The usage of sample\napplications is described in [docs](docs/usage.md).\n\n### Input format\n\nCircuit input format is described in [docs](docs/input_format.md).\n\n### Sample Circuits\n\nA number of sample circuits are provided in\ncircuits.\n\n### Unit tests\n\nUnit tests are located in [tests](tests). The Google test framework is used.\nTo build and run all tests, navigate to the test directory and run:\n```\nmake run-all\n```\nThis will compile all test binaries to files with `.x` extensions, and run each\ntest in series. Testing will stop early if a test fails.\n\nTo clean up generated test files, run `make clean` from the test directory.\n\n## Cirq Usage\n\n[Cirq](https://github.com/quantumlib/cirq) is a framework for modeling and\ninvoking Noisy Intermediate Scale Quantum (NISQ) circuits.\n\nTo run qsim on Google Cirq circuits, or just to call the simulator from Python,\nsee [docs](docs/cirq_interface.md).\n\n## Authors\n\nSergei Isakov (Google): qsim and qsimh simulators\n\nVamsi Krishna Devabathini (Google): Cirq interface\n\nOrion Martin (Google): automated testing\n\n## Disclaimer\n\nThis is not an officially supported Google product.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "qsimcirq", "package_url": "https://pypi.org/project/qsimcirq/", "platform": "", "project_url": "https://pypi.org/project/qsimcirq/", "project_urls": null, "release_url": "https://pypi.org/project/qsimcirq/0.0.3/", "requires_dist": null, "requires_python": ">=3.3.0", "summary": "Schr\u00f6dinger and Schr\u00f6dinger-Feynman simulators for quantum circuits.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>qsim and qsimh</h1>\n<p>Quantum circuit simulators qsim and qsimh. These simulators were used for cross\nentropy benchmarking in\n<a href=\"https://www.nature.com/articles/s41586-019-1666-5\" rel=\"nofollow\">[1]</a>.</p>\n<p><a href=\"https://www.nature.com/articles/s41586-019-1666-5\" rel=\"nofollow\">[1]</a>, F. Arute et al,\n\"Quantum Supremacy Using a Programmable Superconducting Processor\",\nNature 574, 505, (2019).</p>\n<h2>qsim</h2>\n<p>qsim is a Schr\u00f6dinger full state-vector simulator. It computes all the <em>2<sup>n</sup></em>\namplitudes of the state vector, where <em>n</em> is the number of qubits.\nEssentially, the simulator performs matrix-vector multiplications repeatedly.\nOne matrix-vector multiplication corresponds to applying one gate.\nThe total runtime is proportional to <em>g2<sup>n</sup></em>, where <em>g</em> is the number of\n2-qubit gates. To speed up the simulator, we use gate fusion\n<a href=\"https://arxiv.org/abs/1601.07195\" rel=\"nofollow\">[2]</a> <a href=\"https://arxiv.org/abs/1704.01127\" rel=\"nofollow\">[3]</a>,\nsingle precision arithmetic, AVX/FMA instructions for vectorization and OpenMP\nfor multi-threading.</p>\n<p><a href=\"https://arxiv.org/abs/1601.07195\" rel=\"nofollow\">[2]</a> M. Smelyanskiy, N. P. Sawaya,\nA. Aspuru-Guzik, \"qHiPSTER: The Quantum High Performance Software Testing\nEnvironment\", arXiv:1601.07195 (2016).</p>\n<p><a href=\"https://arxiv.org/abs/1704.01127\" rel=\"nofollow\">[3]</a> T. H\u00e4ner, D. S. Steiger,\n\"0.5 Petabyte Simulation of a 45-Qubit Quantum Circuit\", arXiv:1704.01127\n(2017).</p>\n<h2>qsimh</h2>\n<p>qsimh is a hybrid Schr\u00f6dinger-Feynman simulator\n<a href=\"https://arxiv.org/abs/1807.10749\" rel=\"nofollow\">[4]</a>. The lattice is split into two parts\nand the Schmidt decomposition is used to decompose 2-qubit gates on the\ncut. If the Schmidt rank of each gate is <em>m</em> and the number of gates on\nthe cut is <em>k</em> then there are <em>m<sup>k</sup></em> paths. To simulate a circuit with\nfidelity one, one needs to simulate all the <em>m<sup>k</sup></em> paths and sum the results.\nThe total runtime is proportional to <em>(2<sup>n<sub>1</sub></sup> + 2<sup>n<sub>2</sub></sup>)m<sup>k</sup></em>, where <em>n<sub>1</sub></em>\nand <em>n<sub>2</sub></em> are the qubit numbers in the first and second parts. Path\nsimulations are independent of each other and can be trivially parallelized\nto run on supercomputers or in data centers. Note that one can run simulations\nwith fidelity <em>F &lt; 1</em> just by summing over a fraction <em>F</em> of all the paths.</p>\n<p>A two level checkpointing scheme is used to improve performance. Say, there\nare <em>k</em> gates on the cut. We split those into three parts: <em>p+r+s=k</em>, where\n<em>p</em> is the number of \"prefix\" gates, <em>r</em> is the number of \"root\" gates and\n<em>s</em> is the number of \"suffix\" gates. The first checkpoint is executed after\napplying all the gates up to and including the prefix gates and the second\ncheckpoint is executed after applying all the gates up to and including the\nroot gates. The full summation over all the paths for the root and suffix gates\nis performed.</p>\n<p>If <em>p&gt;0</em> then one such simulation gives <em>F \u2248 m<sup>-p</sup></em> (for all the\nprefix gates having the same Schmidt rank <em>m</em>). One needs to run <em>m<sup>p</sup></em>\nsimulations with different prefix paths and sum the results to get <em>F = 1</em>.</p>\n<p><a href=\"https://arxiv.org/abs/1807.10749\" rel=\"nofollow\">[4]</a> I. L. Markov, A. Fatima, S. V. Isakov,\nS. Boixo, \"Quantum Supremacy Is Both Closer and Farther than It Appears\",\narXiv:1807.10749 (2018).</p>\n<h2>C++ Usage</h2>\n<p>The code is basically designed as a library. The user can modify sample\naplications in <a href=\"apps\" rel=\"nofollow\">apps</a> to meet their own needs. The usage of sample\napplications is described in <a href=\"docs/usage.md\" rel=\"nofollow\">docs</a>.</p>\n<h3>Input format</h3>\n<p>Circuit input format is described in <a href=\"docs/input_format.md\" rel=\"nofollow\">docs</a>.</p>\n<h3>Sample Circuits</h3>\n<p>A number of sample circuits are provided in\ncircuits.</p>\n<h3>Unit tests</h3>\n<p>Unit tests are located in <a href=\"tests\" rel=\"nofollow\">tests</a>. The Google test framework is used.\nTo build and run all tests, navigate to the test directory and run:</p>\n<pre><code>make run-all\n</code></pre>\n<p>This will compile all test binaries to files with <code>.x</code> extensions, and run each\ntest in series. Testing will stop early if a test fails.</p>\n<p>To clean up generated test files, run <code>make clean</code> from the test directory.</p>\n<h2>Cirq Usage</h2>\n<p><a href=\"https://github.com/quantumlib/cirq\" rel=\"nofollow\">Cirq</a> is a framework for modeling and\ninvoking Noisy Intermediate Scale Quantum (NISQ) circuits.</p>\n<p>To run qsim on Google Cirq circuits, or just to call the simulator from Python,\nsee <a href=\"docs/cirq_interface.md\" rel=\"nofollow\">docs</a>.</p>\n<h2>Authors</h2>\n<p>Sergei Isakov (Google): qsim and qsimh simulators</p>\n<p>Vamsi Krishna Devabathini (Google): Cirq interface</p>\n<p>Orion Martin (Google): automated testing</p>\n<h2>Disclaimer</h2>\n<p>This is not an officially supported Google product.</p>\n\n          </div>"}, "last_serial": 6910653, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9f70b41e686b884b7dd885780c883a01", "sha256": "00d51c134e82171714bd6733fe42345b206c3bb32c20f5fb9deba255966c2d8f"}, "downloads": -1, "filename": "qsimcirq-0.0.1.tar.gz", "has_sig": false, "md5_digest": "9f70b41e686b884b7dd885780c883a01", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3.0", "size": 24995, "upload_time": "2020-03-03T16:18:03", "upload_time_iso_8601": "2020-03-03T16:18:03.865923Z", "url": "https://files.pythonhosted.org/packages/bb/5a/756a66b10e2f4f9d9d34827b6a49837c1c8443f449e944d0aee4ce17d152/qsimcirq-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "654cdb571302ff557867067cb4c87549", "sha256": "a6b7e5bfdd29863dbc9eedd47d9730a5c54eaab73b5050684fd3923445dac31b"}, "downloads": -1, "filename": "qsimcirq-0.0.2.tar.gz", "has_sig": false, "md5_digest": "654cdb571302ff557867067cb4c87549", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3.0", "size": 27455, "upload_time": "2020-03-04T04:40:45", "upload_time_iso_8601": "2020-03-04T04:40:45.674784Z", "url": "https://files.pythonhosted.org/packages/2b/cf/b41eeab0fdb6b5e1daf738387818c309474bba4466868e2bd4a419da45b5/qsimcirq-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "2e03044868ca190f21cf6bbd19c240e3", "sha256": "970b0be8962528ab259b030dc3337c13912a99a2cc00afade5681cb481894e84"}, "downloads": -1, "filename": "qsimcirq-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2e03044868ca190f21cf6bbd19c240e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3.0", "size": 30742, "upload_time": "2020-03-30T05:48:41", "upload_time_iso_8601": "2020-03-30T05:48:41.809905Z", "url": "https://files.pythonhosted.org/packages/41/38/20e9f7f5ef6fe8124d34c6904b1c6f3e996653eb6f35a3efdaff674aef84/qsimcirq-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2e03044868ca190f21cf6bbd19c240e3", "sha256": "970b0be8962528ab259b030dc3337c13912a99a2cc00afade5681cb481894e84"}, "downloads": -1, "filename": "qsimcirq-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2e03044868ca190f21cf6bbd19c240e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3.0", "size": 30742, "upload_time": "2020-03-30T05:48:41", "upload_time_iso_8601": "2020-03-30T05:48:41.809905Z", "url": "https://files.pythonhosted.org/packages/41/38/20e9f7f5ef6fe8124d34c6904b1c6f3e996653eb6f35a3efdaff674aef84/qsimcirq-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:14 2020"}