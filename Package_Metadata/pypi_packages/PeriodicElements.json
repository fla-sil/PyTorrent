{"info": {"author": "Vaasu Devan S", "author_email": "vaasuceg.96@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "PeriodicElements\n****************\n\nA python API/console script for the periodic table elements.\n\nCreated by Vaasu Devan S <vaasuceg.96@gmail.com>\n\nGithub Url https://www.github.com/VaasuDevanS\n\nInstallation\n************\n\n>>> python -m pip install PeriodicElements\n>>> python3 -m pip install PeriodicElements\n\nImporting the Package\n=============================================\n\nfor Python 3.X Series,\n\n>>> from elements import elements\n>>> import elements.elements as elements\n\nfor Python2.X Series,\n\n>>> import elements\n\nBasic Usage\n***********\n\n>>> elements.H\n<Hydrogen Element>\n>>> elements.hydrogen.AtomicMass        #elements.H.AtomicMass\n'1.00794 amu'\n\nFind for any element from the keys ['AtomicMass', 'AtomicNumber', 'BoilingPoint', 'Classification', 'Color', 'CrystalStructure', 'Density', 'Discovery', 'MeltingPoint', 'Name', 'Neutrons', 'ObtainedFrom', 'Protons_Electrons', 'Symbol', 'Uses']\n\n>>> elements.Au.Discovery\n{'NameOrigin': 'From the Old English word geolo (yellow)', 'Discoverer': 'Unknown', 'Year': 'circa3000BC'}\n>>> print elements.Si.MeltingPoint\n{'Farenheit': 2570.0, 'Celsius': 1410.0, 'Kelvin': 1683.15}\n\nshow() method\n*************\n\n>>> elements.H.show()\nName: Hydrogen\nSymbol: H\nAtomicNumber: 1\nAtomicMass: 1.00794 amu\nMeltingPoint: {'Farenheit': -434.45203, 'Celsius': -259.14, 'Kelvin': 14.009985}\nBoilingPoint: {'Farenheit': -423.166, 'Celsius': -252.87, 'Kelvin': 20.280005}\nProtons_Electrons: 1\nNeutrons: 0\nClassification: Non-Metal\nCrystalStructure: Hexagonal\nDensity: 0.08988 g/cm3 (@293k)\nColor: colorless\nDiscovery: {'NameOrigin': 'From Greek words hudor (water) & gennan (generate)', 'Discoverer': 'Henry Cavendish', 'Year': '1766'}\nUses: Balloons & Metal Refining\nObtainedFrom: mines, oil, gas wells\n\nget() method\n*************\n\n>>> data=elements.H.get()     #or elements.hydrogen.get()\n>>> print data\n{'BoilingPoint': {'Farenheit': -423.166, 'Celsius': -252.87, 'Kelvin': 20.280005}, 'Name': 'Hydrogen', 'Density': '0.08988 g/cm3 (@293k)',\n'CrystalStructure': 'Hexagonal', 'AtomicMass': '1.00794 amu', 'Discovery': {'NameOrigin': 'From Greek words hudor (water) & gennan (generate)',\n'Discoverer': 'Henry Cavendish', 'Year': '1766'},\n'MeltingPoint': {'Farenheit': -434.45203, 'Celsius': -259.14, 'Kelvin': 14.009985},\n'ObtainedFrom': 'mines, oil, gas wells', 'Classification': 'Non-Metal', 'Color': 'colorless', 'Symbol': 'H',\n'AtomicNumber': 1, 'Protons_Electrons': '1', 'Uses': 'Balloons & Metal Refining', 'Neutrons': '0'}\n\ncompare() method\n****************\n>>> elements.compare(elements.Au,elements.He)\n=====================================================\nProperty          | Gold                Helium\n#####################################################\nSymbol            | Au                  He\nAtomicNumber      | 79                  2\nAtomicMass        | 196.96655 amu       4.002602 amu\nClassification    | Transition Metal    Noble Gas\nCrystalStructure  | Cubic               Hexagonal\nDensity           | 19.32 g/cm3         0.1785 g/cm3\nColor             | Gold                colorless\n=====================================================\n\nElemental Classification\n************************\n[Alkali_Metals, Alkaline_Earth_Metals, Halogens, Metalloids, Rare_Earth_Elements, Rare_Gases, Noble_Gases, Transition_Metals, Non_Metals, Others]\n\n\n>>> elements.Alkali_Metals\n[<Cesium Element>, <Francium Element>, <Lithium Element>, <Potassium Element>, <Rubidium Element>, <Sodium Element>]\n\nGet all the element names of type String\n\n>>> MyElements=elements.AllElements\n>>> len(MyElements)\n112\n\nGet all the element symbols of type String\n\n>>> MySymbols=elements.AllSymbols\n>>> MySymbols\n['Ac', 'Ag', 'Al', 'Am', 'Ar', 'As', 'At', 'Au', 'B', 'Ba', 'Be', 'Bh', 'Bi', 'Bk', 'Br', 'C', 'Ca', 'Cd', 'Ce', 'Cf', 'Cl', 'Cm', 'Co', 'Cr',\n'Cs', 'Cu', 'Db', 'Dy', 'Er', 'Es', 'Eu', 'F', 'Fe', 'Fm', 'Fr', 'Ga', 'Gd', 'Ge', 'H', 'He', 'Hf', 'Hg', 'Ho', 'Hs', 'I', 'In', 'Ir', 'K', 'Kr',\n'La', 'Li', 'Lr', 'Lu', 'Md', 'Mg', 'Mn', 'Mo', 'Mt', 'N', 'Na', 'Nb', 'Nd', 'Ne', 'Ni', 'No', 'Np', 'O', 'Os', 'P', 'Pa', 'Pb', 'Pd', 'Pm', 'Po',\n'Pr', 'Pt', 'Pu', 'Ra', 'Rb', 'Re', 'Rf', 'Rh', 'Rn', 'Ru', 'S', 'Sb', 'Sc', 'Se', 'Sg', 'Si', 'Sm', 'Sn', 'Sr', 'Ta', 'Tb', 'Tc', 'Te', 'Th',\n'Ti', 'Tl', 'Tm', 'U', 'Uub', 'Uun', 'Uuu', 'V', 'W', 'Xe', 'Y', 'Yb', 'Zn', 'Zr']\n\nMiscellaneous\n*************\nGet all the element objects for your Specific Operation\n\n>>> data=elements.Elements\n\nSorting the elements\n====================\n\n>>> sorted(data,key=lambda i:i.AtomicNumber)  # Based on their AtomicNumber\n\n>>> sorted(data,key=lambda i:i.AtomicMass)    # Based on their AtomicMass\n\n>>> def fun(i):\n       if type(i.BoilingPoint) is dict:\n            return i.BoilingPoint['Celsius']\n>>> sorted(data,key=fun)[19:]          # Based on the BoilingPoint. (Some are unknown)\n\n>>> def fun(i):\n       if type(i.MeltingPoint) is dict:\n            return i.MeltingPoint['Celsius']\n>>> sorted(data,key=fun)[17:]          # Based on MeltingPoint.  (Some are unknown)\n\n\nPeriodic table\n****************\n>>> print elements.Table  # print(elements.Table)\n  -----                                                               -----\n1 | H |                                                               |He |\n  |---+----                                       --------------------+---|\n2 |Li |Be |                                       | B | C | N | O | F |Ne |\n  |---+---|                                       |---+---+---+---+---+---|\n3 |Na |Mg |3B  4B  5B  6B  7B |    8B     |1B  2B |Al |Si | P | S |Cl |Ar |\n  |---+---+---------------------------------------+---+---+---+---+---+---|\n4 | K |Ca |Sc |Ti | V |Cr |Mn |Fe |Co |Ni |Cu |Zn |Ga |Ge |As |Se |Br |Kr |\n  |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n5 |Rb |Sr | Y |Zr |Nb |Mo |Tc |Ru |Rh |Pd |Ag |Cd |In |Sn |Sb |Te | I |Xe |\n  |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n6 |Cs |Ba |LAN|Hf |Ta | W |Re |Os |Ir |Pt |Au |Hg |Tl |Pb |Bi |Po |At |Rn |\n  |---+---+---+------------------------------------------------------------\n7 |Fr |Ra |ACT|\n  -------------\n              -------------------------------------------------------------\n   Lanthanide |La |Ce |Pr |Nd |Pm |Sm |Eu |Gd |Tb |Dy |Ho |Er |Tm |Yb |Lu |\n              |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n   Actinide   |Ac |Th |Pa | U |Np |Pu |Am |Cm |Bk |Cf |Es |Fm |Md |No |Lw |\n              -------------------------------------------------------------", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/VaasuDevanS/Periodic_Elements", "keywords": null, "license": "GNU-GPL", "maintainer": null, "maintainer_email": null, "name": "PeriodicElements", "package_url": "https://pypi.org/project/PeriodicElements/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PeriodicElements/", "project_urls": {"Homepage": "https://github.com/VaasuDevanS/Periodic_Elements"}, "release_url": "https://pypi.org/project/PeriodicElements/1.0/", "requires_dist": null, "requires_python": null, "summary": "Periodic Table Elements short description", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"periodicelements\">\n<h2>PeriodicElements</h2>\n<p>A python API/console script for the periodic table elements.</p>\n<p>Created by Vaasu Devan S &lt;<a href=\"mailto:vaasuceg.96%40gmail.com\">vaasuceg<span>.</span>96<span>@</span>gmail<span>.</span>com</a>&gt;</p>\n<p>Github Url <a href=\"https://www.github.com/VaasuDevanS\" rel=\"nofollow\">https://www.github.com/VaasuDevanS</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>&gt;&gt;&gt; python -m pip install PeriodicElements\n&gt;&gt;&gt; python3 -m pip install PeriodicElements\n</pre>\n<div id=\"importing-the-package\">\n<h3>Importing the Package</h3>\n<p>for Python 3.X Series,</p>\n<pre>&gt;&gt;&gt; from elements import elements\n&gt;&gt;&gt; import elements.elements as elements\n</pre>\n<p>for Python2.X Series,</p>\n<pre>&gt;&gt;&gt; import elements\n</pre>\n</div>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<pre>&gt;&gt;&gt; elements.H\n&lt;Hydrogen Element&gt;\n&gt;&gt;&gt; elements.hydrogen.AtomicMass        #elements.H.AtomicMass\n'1.00794 amu'\n</pre>\n<p>Find for any element from the keys [\u2018AtomicMass\u2019, \u2018AtomicNumber\u2019, \u2018BoilingPoint\u2019, \u2018Classification\u2019, \u2018Color\u2019, \u2018CrystalStructure\u2019, \u2018Density\u2019, \u2018Discovery\u2019, \u2018MeltingPoint\u2019, \u2018Name\u2019, \u2018Neutrons\u2019, \u2018ObtainedFrom\u2019, \u2018Protons_Electrons\u2019, \u2018Symbol\u2019, \u2018Uses\u2019]</p>\n<pre>&gt;&gt;&gt; elements.Au.Discovery\n{'NameOrigin': 'From the Old English word geolo (yellow)', 'Discoverer': 'Unknown', 'Year': 'circa3000BC'}\n&gt;&gt;&gt; print elements.Si.MeltingPoint\n{'Farenheit': 2570.0, 'Celsius': 1410.0, 'Kelvin': 1683.15}\n</pre>\n</div>\n<div id=\"show-method\">\n<h2>show() method</h2>\n<pre>&gt;&gt;&gt; elements.H.show()\nName: Hydrogen\nSymbol: H\nAtomicNumber: 1\nAtomicMass: 1.00794 amu\nMeltingPoint: {'Farenheit': -434.45203, 'Celsius': -259.14, 'Kelvin': 14.009985}\nBoilingPoint: {'Farenheit': -423.166, 'Celsius': -252.87, 'Kelvin': 20.280005}\nProtons_Electrons: 1\nNeutrons: 0\nClassification: Non-Metal\nCrystalStructure: Hexagonal\nDensity: 0.08988 g/cm3 (@293k)\nColor: colorless\nDiscovery: {'NameOrigin': 'From Greek words hudor (water) &amp; gennan (generate)', 'Discoverer': 'Henry Cavendish', 'Year': '1766'}\nUses: Balloons &amp; Metal Refining\nObtainedFrom: mines, oil, gas wells\n</pre>\n</div>\n<div id=\"get-method\">\n<h2>get() method</h2>\n<pre>&gt;&gt;&gt; data=elements.H.get()     #or elements.hydrogen.get()\n&gt;&gt;&gt; print data\n{'BoilingPoint': {'Farenheit': -423.166, 'Celsius': -252.87, 'Kelvin': 20.280005}, 'Name': 'Hydrogen', 'Density': '0.08988 g/cm3 (@293k)',\n'CrystalStructure': 'Hexagonal', 'AtomicMass': '1.00794 amu', 'Discovery': {'NameOrigin': 'From Greek words hudor (water) &amp; gennan (generate)',\n'Discoverer': 'Henry Cavendish', 'Year': '1766'},\n'MeltingPoint': {'Farenheit': -434.45203, 'Celsius': -259.14, 'Kelvin': 14.009985},\n'ObtainedFrom': 'mines, oil, gas wells', 'Classification': 'Non-Metal', 'Color': 'colorless', 'Symbol': 'H',\n'AtomicNumber': 1, 'Protons_Electrons': '1', 'Uses': 'Balloons &amp; Metal Refining', 'Neutrons': '0'}\n</pre>\n</div>\n<div id=\"compare-method\">\n<h2>compare() method</h2>\n<pre>&gt;&gt;&gt; elements.compare(elements.Au,elements.He)\n=====================================================\nProperty          | Gold                Helium\n#####################################################\nSymbol            | Au                  He\nAtomicNumber      | 79                  2\nAtomicMass        | 196.96655 amu       4.002602 amu\nClassification    | Transition Metal    Noble Gas\nCrystalStructure  | Cubic               Hexagonal\nDensity           | 19.32 g/cm3         0.1785 g/cm3\nColor             | Gold                colorless\n=====================================================\n</pre>\n</div>\n<div id=\"elemental-classification\">\n<h2>Elemental Classification</h2>\n<p>[Alkali_Metals, Alkaline_Earth_Metals, Halogens, Metalloids, Rare_Earth_Elements, Rare_Gases, Noble_Gases, Transition_Metals, Non_Metals, Others]</p>\n<pre>&gt;&gt;&gt; elements.Alkali_Metals\n[&lt;Cesium Element&gt;, &lt;Francium Element&gt;, &lt;Lithium Element&gt;, &lt;Potassium Element&gt;, &lt;Rubidium Element&gt;, &lt;Sodium Element&gt;]\n</pre>\n<p>Get all the element names of type String</p>\n<pre>&gt;&gt;&gt; MyElements=elements.AllElements\n&gt;&gt;&gt; len(MyElements)\n112\n</pre>\n<p>Get all the element symbols of type String</p>\n<pre>&gt;&gt;&gt; MySymbols=elements.AllSymbols\n&gt;&gt;&gt; MySymbols\n['Ac', 'Ag', 'Al', 'Am', 'Ar', 'As', 'At', 'Au', 'B', 'Ba', 'Be', 'Bh', 'Bi', 'Bk', 'Br', 'C', 'Ca', 'Cd', 'Ce', 'Cf', 'Cl', 'Cm', 'Co', 'Cr',\n'Cs', 'Cu', 'Db', 'Dy', 'Er', 'Es', 'Eu', 'F', 'Fe', 'Fm', 'Fr', 'Ga', 'Gd', 'Ge', 'H', 'He', 'Hf', 'Hg', 'Ho', 'Hs', 'I', 'In', 'Ir', 'K', 'Kr',\n'La', 'Li', 'Lr', 'Lu', 'Md', 'Mg', 'Mn', 'Mo', 'Mt', 'N', 'Na', 'Nb', 'Nd', 'Ne', 'Ni', 'No', 'Np', 'O', 'Os', 'P', 'Pa', 'Pb', 'Pd', 'Pm', 'Po',\n'Pr', 'Pt', 'Pu', 'Ra', 'Rb', 'Re', 'Rf', 'Rh', 'Rn', 'Ru', 'S', 'Sb', 'Sc', 'Se', 'Sg', 'Si', 'Sm', 'Sn', 'Sr', 'Ta', 'Tb', 'Tc', 'Te', 'Th',\n'Ti', 'Tl', 'Tm', 'U', 'Uub', 'Uun', 'Uuu', 'V', 'W', 'Xe', 'Y', 'Yb', 'Zn', 'Zr']\n</pre>\n</div>\n<div id=\"miscellaneous\">\n<h2>Miscellaneous</h2>\n<p>Get all the element objects for your Specific Operation</p>\n<pre>&gt;&gt;&gt; data=elements.Elements\n</pre>\n<div id=\"sorting-the-elements\">\n<h3>Sorting the elements</h3>\n<pre>&gt;&gt;&gt; sorted(data,key=lambda i:i.AtomicNumber)  # Based on their AtomicNumber\n</pre>\n<pre>&gt;&gt;&gt; sorted(data,key=lambda i:i.AtomicMass)    # Based on their AtomicMass\n</pre>\n<pre>&gt;&gt;&gt; def fun(i):\n       if type(i.BoilingPoint) is dict:\n            return i.BoilingPoint['Celsius']\n&gt;&gt;&gt; sorted(data,key=fun)[19:]          # Based on the BoilingPoint. (Some are unknown)\n</pre>\n<pre>&gt;&gt;&gt; def fun(i):\n       if type(i.MeltingPoint) is dict:\n            return i.MeltingPoint['Celsius']\n&gt;&gt;&gt; sorted(data,key=fun)[17:]          # Based on MeltingPoint.  (Some are unknown)\n</pre>\n</div>\n</div>\n<div id=\"periodic-table\">\n<h2>Periodic table</h2>\n<pre>&gt;&gt;&gt; print elements.Table  # print(elements.Table)\n  -----                                                               -----\n1 | H |                                                               |He |\n  |---+----                                       --------------------+---|\n2 |Li |Be |                                       | B | C | N | O | F |Ne |\n  |---+---|                                       |---+---+---+---+---+---|\n3 |Na |Mg |3B  4B  5B  6B  7B |    8B     |1B  2B |Al |Si | P | S |Cl |Ar |\n  |---+---+---------------------------------------+---+---+---+---+---+---|\n4 | K |Ca |Sc |Ti | V |Cr |Mn |Fe |Co |Ni |Cu |Zn |Ga |Ge |As |Se |Br |Kr |\n  |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n5 |Rb |Sr | Y |Zr |Nb |Mo |Tc |Ru |Rh |Pd |Ag |Cd |In |Sn |Sb |Te | I |Xe |\n  |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n6 |Cs |Ba |LAN|Hf |Ta | W |Re |Os |Ir |Pt |Au |Hg |Tl |Pb |Bi |Po |At |Rn |\n  |---+---+---+------------------------------------------------------------\n7 |Fr |Ra |ACT|\n  -------------\n              -------------------------------------------------------------\n   Lanthanide |La |Ce |Pr |Nd |Pm |Sm |Eu |Gd |Tb |Dy |Ho |Er |Tm |Yb |Lu |\n              |---+---+---+---+---+---+---+---+---+---+---+---+---+---+---|\n   Actinide   |Ac |Th |Pa | U |Np |Pu |Am |Cm |Bk |Cf |Es |Fm |Md |No |Lw |\n              -------------------------------------------------------------\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2659540, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c115b25f1151584b317e1babeba5cda7", "sha256": "68f6d8b60af8716b8f9538c6966e064063ab0d4f940e9f5316e0bbfaeefda6e1"}, "downloads": -1, "filename": "PeriodicElements-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c115b25f1151584b317e1babeba5cda7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20734, "upload_time": "2017-02-21T13:00:59", "upload_time_iso_8601": "2017-02-21T13:00:59.186483Z", "url": "https://files.pythonhosted.org/packages/c9/13/7af7213deb980210f7699bbf7acfe43048329e565f7480c8bd74d7f4ae68/PeriodicElements-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1480bae739cabb763d93c1ce5b10acc3", "sha256": "d4adafc6631fc028d6d1f38a42ec312b022dfaf61c8bfb42495217cba585adea"}, "downloads": -1, "filename": "PeriodicElements-1.0.zip", "has_sig": false, "md5_digest": "1480bae739cabb763d93c1ce5b10acc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22884, "upload_time": "2017-02-21T13:01:01", "upload_time_iso_8601": "2017-02-21T13:01:01.483436Z", "url": "https://files.pythonhosted.org/packages/f4/d2/49b050a17d2d2e72e1cb1994ecdc6e50ff513e88dca41a9097c52609dfa8/PeriodicElements-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c115b25f1151584b317e1babeba5cda7", "sha256": "68f6d8b60af8716b8f9538c6966e064063ab0d4f940e9f5316e0bbfaeefda6e1"}, "downloads": -1, "filename": "PeriodicElements-1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c115b25f1151584b317e1babeba5cda7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20734, "upload_time": "2017-02-21T13:00:59", "upload_time_iso_8601": "2017-02-21T13:00:59.186483Z", "url": "https://files.pythonhosted.org/packages/c9/13/7af7213deb980210f7699bbf7acfe43048329e565f7480c8bd74d7f4ae68/PeriodicElements-1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1480bae739cabb763d93c1ce5b10acc3", "sha256": "d4adafc6631fc028d6d1f38a42ec312b022dfaf61c8bfb42495217cba585adea"}, "downloads": -1, "filename": "PeriodicElements-1.0.zip", "has_sig": false, "md5_digest": "1480bae739cabb763d93c1ce5b10acc3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22884, "upload_time": "2017-02-21T13:01:01", "upload_time_iso_8601": "2017-02-21T13:01:01.483436Z", "url": "https://files.pythonhosted.org/packages/f4/d2/49b050a17d2d2e72e1cb1994ecdc6e50ff513e88dca41a9097c52609dfa8/PeriodicElements-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 02:56:17 2020"}