{"info": {"author": "Ryan Petrello", "author_email": "ryan@ryanpetrello.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Sdb\n===\nA socket-based remote debugger for Python.  Based on `celery.contrib.rdb`.\n\n![example](./screen.gif)\n\nUsage\n-----\n\nUse the `sdb` library to set remote breakpoints in any non-interactive or\nbackground Python code and debug interactively over a telnet session:\n\n```python\n   # some/python/code.py\n\n   class SomeCode(object):\n\n       def run(self, **kwargs):\n           # This will set a breakpoint and open an interactive Python\n           # debugger exposed on a random port between 6899-6999.  The chosen\n           # port will be reported as a warning\n           #\n           # Remote Debugger:6900: Please telnet into 0.0.0.0 6900.\n           #\n           # You can access it from your host machine using telnet:\n           #\n           # $ telnet <hostname> <port>\n           import sdb\n           sdb.set_trace()\n```\n\nKeep in mind that when you interactively debug in this way, any process\nthat encounters a breakpoint will wait until an active client is established\nand concludes the debugging session with a `continue` command.\n\nAutomatically Connecting to Breakpoints\n---------------------------------------\n\nTo simplify remote debugging session management, you can use `sdb-listen`\nto automatically discover open remote debugging sessions and connect to them:\n\n```shell\n   $ sdb-listen\n```\n\nThis will open a Python process that listens for new debugger sessions and\nautomatically connects to them for you.  If your breakpoint is run on\nan _entirely different host_ (e.g. `10.0.0.1`) you can optionally specify the\nhostname where `sdb-listen` is running:\n\n```python\n   import sdb\n   sdb.Sdb(notify_host='10.0.0.1').set_trace()\n```\n\nFor OSX users, the Docker for Mac application relies on a separate virtual\nmachine running the containers. A unique hostname is advertised to containers\npointing back to the virtual machine called: `docker.for.mac.host.internal`.\n\nThe breakpoint can then be configured to use that host so that it works\nseamlessly in a Mac:\n\n```python\n   import sdb\n   sdb.Sdb(notify_host='docker.for.mac.host.internal').set_trace()\n```\n\nThe `sdb-listen` tool also includes support for tab-completion and history\ntracking.\n\nConfiguration with Environment Variables\n----------------------------------------\n\nIt is possible to set environment variables to configure `sdb`, which allows\nto avoid remembering hosts and ports at the time of setting the breakpoints.\n\n- `SDB_HOST` : Defaults to `127.0.0.1` and it is the address that `sdb` should\nbind to.\n- `SDB_PORT` : Defaults to `6899`, and it is the port used to bind (used with\n`SDB_HOST`). Note that `sdb` has a range of ports from `6899` to `6999`.\n- `SDB_NOTIFY_HOST` : To advertise a different host, useful for a separate remote\nhost like in the case of Docker for Mac.\n- `SDB_CONTEXT_LINES` : How much context should get printed when a breakpoint is\nreached. Defaults to 60.\n- `SDB_COLORIZE` : Toggle to enable or disable colorized output. Defaults to\nenabled.\n\nTriggering sdb with a Signal\n----------------------------\nIf you want to debug a running process without setting a specific breakpoint,\na `set_trace()` call can be triggered via `SIGTRAP`:\n\n```python\nimport sdb\nsdb.sigtrap()\n\nlong_running_process()\n```\n\n```shell\n$ kill -5 <pid-of-process>\n```\n\nThis is particularly useful for investigating Python processes that appear to\nbe hung.\n\nDocker Compose Examples\n-----------------------\n\nIf using Docker Compose, it is useful to open the range of ports that `sdb`\nsupports, as well as injecting the environment variables to configure the\nconnection.\n\nFor example:\n\n```yaml\n    environment:\n    - SDB_NOTIFY_HOST=docker.for.mac.host.internal\n    - SDB_HOST=0.0.0.0\n    - SDB_PORT=6899\n```\n\nIt is useful to define a range of ports that `sdb` can use:\n\n```yaml\n    ports:\n    - \"6899-6999:6899-6999\"\n```\n\nOther Tips\n----------\n`sdb` supports the same commands and aliases as Python's [default pdb implementation](https://docs.python.org/2/library/pdb.html#debugger-commands).\n\n`sdb` colorizes output by default.  To disable this:\n\n\n```python\n   import sdb\n   sdb.Sdb(colorize=False).set_trace()\n```\n\n`sdb` includes a few additional debugger aliases that make interactive debugging more pleasant:\n\n- Prefix commands with an integer to repeat them.  For example, `10n` is the same as running `next` 10 times in a row.\n- `?` is the same as calling `dir()`\n- `??` can be added to the end of a function call to view its source lines e.g., `requests.post??` might print:\n\n```python\ndef post(url, data=None, json=None, **kwargs):\n    r\"\"\"Sends a POST request.\n\n    :param url: URL for the new :class:`Request` object.\n    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.\n    :param json: (optional) json data to send in the body of the :class:`Request`.\n    :param \\*\\*kwargs: Optional arguments that ``request`` takes.\n    :return: :class:`Response <Response>` object\n    :rtype: requests.Response\n    \"\"\"\n\n    return request('post', url, data=data, json=json, **kwargs)\n```\n- By default, `sdb` attempts to fill your entire console with debugger output (representing the current line position for the current frame).  You can adjust the height of `sdb`'s draw window with the `lines` command, e.g., `lines 15`.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryanpetrello/sdb", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sdb", "package_url": "https://pypi.org/project/sdb/", "platform": "", "project_url": "https://pypi.org/project/sdb/", "project_urls": {"Homepage": "https://github.com/ryanpetrello/sdb"}, "release_url": "https://pypi.org/project/sdb/1.8/", "requires_dist": ["pygments", "six"], "requires_python": "", "summary": "A socket-based remote debugger for Python", "version": "1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sdb</h1>\n<p>A socket-based remote debugger for Python.  Based on <code>celery.contrib.rdb</code>.</p>\n<p><img alt=\"example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69ff09f222268611a194579b7f426704499ea6d9/2e2f73637265656e2e676966\"></p>\n<h2>Usage</h2>\n<p>Use the <code>sdb</code> library to set remote breakpoints in any non-interactive or\nbackground Python code and debug interactively over a telnet session:</p>\n<pre>   <span class=\"c1\"># some/python/code.py</span>\n\n   <span class=\"k\">class</span> <span class=\"nc\">SomeCode</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n       <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n           <span class=\"c1\"># This will set a breakpoint and open an interactive Python</span>\n           <span class=\"c1\"># debugger exposed on a random port between 6899-6999.  The chosen</span>\n           <span class=\"c1\"># port will be reported as a warning</span>\n           <span class=\"c1\">#</span>\n           <span class=\"c1\"># Remote Debugger:6900: Please telnet into 0.0.0.0 6900.</span>\n           <span class=\"c1\">#</span>\n           <span class=\"c1\"># You can access it from your host machine using telnet:</span>\n           <span class=\"c1\">#</span>\n           <span class=\"c1\"># $ telnet &lt;hostname&gt; &lt;port&gt;</span>\n           <span class=\"kn\">import</span> <span class=\"nn\">sdb</span>\n           <span class=\"n\">sdb</span><span class=\"o\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n</pre>\n<p>Keep in mind that when you interactively debug in this way, any process\nthat encounters a breakpoint will wait until an active client is established\nand concludes the debugging session with a <code>continue</code> command.</p>\n<h2>Automatically Connecting to Breakpoints</h2>\n<p>To simplify remote debugging session management, you can use <code>sdb-listen</code>\nto automatically discover open remote debugging sessions and connect to them:</p>\n<pre>   $ sdb-listen\n</pre>\n<p>This will open a Python process that listens for new debugger sessions and\nautomatically connects to them for you.  If your breakpoint is run on\nan <em>entirely different host</em> (e.g. <code>10.0.0.1</code>) you can optionally specify the\nhostname where <code>sdb-listen</code> is running:</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">sdb</span>\n   <span class=\"n\">sdb</span><span class=\"o\">.</span><span class=\"n\">Sdb</span><span class=\"p\">(</span><span class=\"n\">notify_host</span><span class=\"o\">=</span><span class=\"s1\">'10.0.0.1'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n</pre>\n<p>For OSX users, the Docker for Mac application relies on a separate virtual\nmachine running the containers. A unique hostname is advertised to containers\npointing back to the virtual machine called: <code>docker.for.mac.host.internal</code>.</p>\n<p>The breakpoint can then be configured to use that host so that it works\nseamlessly in a Mac:</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">sdb</span>\n   <span class=\"n\">sdb</span><span class=\"o\">.</span><span class=\"n\">Sdb</span><span class=\"p\">(</span><span class=\"n\">notify_host</span><span class=\"o\">=</span><span class=\"s1\">'docker.for.mac.host.internal'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n</pre>\n<p>The <code>sdb-listen</code> tool also includes support for tab-completion and history\ntracking.</p>\n<h2>Configuration with Environment Variables</h2>\n<p>It is possible to set environment variables to configure <code>sdb</code>, which allows\nto avoid remembering hosts and ports at the time of setting the breakpoints.</p>\n<ul>\n<li><code>SDB_HOST</code> : Defaults to <code>127.0.0.1</code> and it is the address that <code>sdb</code> should\nbind to.</li>\n<li><code>SDB_PORT</code> : Defaults to <code>6899</code>, and it is the port used to bind (used with\n<code>SDB_HOST</code>). Note that <code>sdb</code> has a range of ports from <code>6899</code> to <code>6999</code>.</li>\n<li><code>SDB_NOTIFY_HOST</code> : To advertise a different host, useful for a separate remote\nhost like in the case of Docker for Mac.</li>\n<li><code>SDB_CONTEXT_LINES</code> : How much context should get printed when a breakpoint is\nreached. Defaults to 60.</li>\n<li><code>SDB_COLORIZE</code> : Toggle to enable or disable colorized output. Defaults to\nenabled.</li>\n</ul>\n<h2>Triggering sdb with a Signal</h2>\n<p>If you want to debug a running process without setting a specific breakpoint,\na <code>set_trace()</code> call can be triggered via <code>SIGTRAP</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sdb</span>\n<span class=\"n\">sdb</span><span class=\"o\">.</span><span class=\"n\">sigtrap</span><span class=\"p\">()</span>\n\n<span class=\"n\">long_running_process</span><span class=\"p\">()</span>\n</pre>\n<pre>$ <span class=\"nb\">kill</span> -5 &lt;pid-of-process&gt;\n</pre>\n<p>This is particularly useful for investigating Python processes that appear to\nbe hung.</p>\n<h2>Docker Compose Examples</h2>\n<p>If using Docker Compose, it is useful to open the range of ports that <code>sdb</code>\nsupports, as well as injecting the environment variables to configure the\nconnection.</p>\n<p>For example:</p>\n<pre>    <span class=\"nt\">environment</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">SDB_NOTIFY_HOST=docker.for.mac.host.internal</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">SDB_HOST=0.0.0.0</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">SDB_PORT=6899</span>\n</pre>\n<p>It is useful to define a range of ports that <code>sdb</code> can use:</p>\n<pre>    <span class=\"nt\">ports</span><span class=\"p\">:</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"s\">\"6899-6999:6899-6999\"</span>\n</pre>\n<h2>Other Tips</h2>\n<p><code>sdb</code> supports the same commands and aliases as Python's <a href=\"https://docs.python.org/2/library/pdb.html#debugger-commands\" rel=\"nofollow\">default pdb implementation</a>.</p>\n<p><code>sdb</code> colorizes output by default.  To disable this:</p>\n<pre>   <span class=\"kn\">import</span> <span class=\"nn\">sdb</span>\n   <span class=\"n\">sdb</span><span class=\"o\">.</span><span class=\"n\">Sdb</span><span class=\"p\">(</span><span class=\"n\">colorize</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_trace</span><span class=\"p\">()</span>\n</pre>\n<p><code>sdb</code> includes a few additional debugger aliases that make interactive debugging more pleasant:</p>\n<ul>\n<li>Prefix commands with an integer to repeat them.  For example, <code>10n</code> is the same as running <code>next</code> 10 times in a row.</li>\n<li><code>?</code> is the same as calling <code>dir()</code></li>\n<li><code>??</code> can be added to the end of a function call to view its source lines e.g., <code>requests.post??</code> might print:</li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"sa\">r</span><span class=\"sd\">\"\"\"Sends a POST request.</span>\n\n<span class=\"sd\">    :param url: URL for the new :class:`Request` object.</span>\n<span class=\"sd\">    :param data: (optional) Dictionary (will be form-encoded), bytes, or file-like object to send in the body of the :class:`Request`.</span>\n<span class=\"sd\">    :param json: (optional) json data to send in the body of the :class:`Request`.</span>\n<span class=\"sd\">    :param \\*\\*kwargs: Optional arguments that ``request`` takes.</span>\n<span class=\"sd\">    :return: :class:`Response &lt;Response&gt;` object</span>\n<span class=\"sd\">    :rtype: requests.Response</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'post'</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">json</span><span class=\"o\">=</span><span class=\"n\">json</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>By default, <code>sdb</code> attempts to fill your entire console with debugger output (representing the current line position for the current frame).  You can adjust the height of <code>sdb</code>'s draw window with the <code>lines</code> command, e.g., <code>lines 15</code>.</li>\n</ul>\n\n          </div>"}, "last_serial": 7071075, "releases": {"1.3": [{"comment_text": "", "digests": {"md5": "cf850e5f1e76f56a1adef40f21a5385e", "sha256": "fcd6498e4a63804da5238f223c4b0a7be7619f94ba3c4ef7d9c0db364be08161"}, "downloads": -1, "filename": "sdb-1.3.tar.gz", "has_sig": false, "md5_digest": "cf850e5f1e76f56a1adef40f21a5385e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5236, "upload_time": "2018-02-26T23:57:34", "upload_time_iso_8601": "2018-02-26T23:57:34.428446Z", "url": "https://files.pythonhosted.org/packages/90/bd/5c1143316f582bf295288046a77808e6095504bc545b5b87cdba0f093614/sdb-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "de752ae6c89b2da9de8af88959f2748f", "sha256": "575d2eedaf5146d4a33e0dc991e8d6551a4cfab98359f3b5d49579d126313994"}, "downloads": -1, "filename": "sdb-1.4.tar.gz", "has_sig": false, "md5_digest": "de752ae6c89b2da9de8af88959f2748f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5111, "upload_time": "2018-02-27T14:55:29", "upload_time_iso_8601": "2018-02-27T14:55:29.115349Z", "url": "https://files.pythonhosted.org/packages/77/bd/4987b43163588fced4e16c0909fd0db8f988994c3ef0441fede93c8d23b2/sdb-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "68ae404a702c0f5310274242dded4738", "sha256": "58d9a70b6861159fe8d142853aa99dd1648db4f0c00aa1b8ab80176c1d6a0c47"}, "downloads": -1, "filename": "sdb-1.5.tar.gz", "has_sig": false, "md5_digest": "68ae404a702c0f5310274242dded4738", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7209, "upload_time": "2018-03-01T05:41:55", "upload_time_iso_8601": "2018-03-01T05:41:55.661075Z", "url": "https://files.pythonhosted.org/packages/9f/83/c337b13e65ff126aabb5d17acd9c2ef574628b4a0367276497a7ee6d0a3f/sdb-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "3ae9543eb46d3f5de95d54728586fd98", "sha256": "b4e6271ba53caae79c6522bb7fc3d15a8cf1090b0813b65c32617fda331e67c1"}, "downloads": -1, "filename": "sdb-1.6-py2-none-any.whl", "has_sig": false, "md5_digest": "3ae9543eb46d3f5de95d54728586fd98", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7186, "upload_time": "2019-06-04T15:17:53", "upload_time_iso_8601": "2019-06-04T15:17:53.675355Z", "url": "https://files.pythonhosted.org/packages/a2/0a/c814dbb7842d0190c84db4190309f59b415297ddcc45ebade79893a24a6b/sdb-1.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1945292c5f1d13fd1162a74e509b47b3", "sha256": "dab57ceda99c6f373ec7667ccdb3b8254e607a087b9f8ec9035bcf1b5a13ef10"}, "downloads": -1, "filename": "sdb-1.6.tar.gz", "has_sig": false, "md5_digest": "1945292c5f1d13fd1162a74e509b47b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7365, "upload_time": "2019-06-04T15:17:51", "upload_time_iso_8601": "2019-06-04T15:17:51.789081Z", "url": "https://files.pythonhosted.org/packages/56/9a/974eec83358954e9b34d5d3710884e43778cdd80d51320fdb66e79329394/sdb-1.6.tar.gz", "yanked": false}], "1.7": [{"comment_text": "", "digests": {"md5": "b768c65731c9170cb13de51240f4f3a2", "sha256": "08ce0abbcef8586af3531750b678c9eb36db293e61f57919240493397bcd657c"}, "downloads": -1, "filename": "sdb-1.7-py2-none-any.whl", "has_sig": false, "md5_digest": "b768c65731c9170cb13de51240f4f3a2", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7778, "upload_time": "2020-02-28T20:10:06", "upload_time_iso_8601": "2020-02-28T20:10:06.798882Z", "url": "https://files.pythonhosted.org/packages/35/d1/3704452f0de08c56228e87b9c9c05b6a608753a1d44f440edb4805a70cbf/sdb-1.7-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25f78712d87336514558616570f4a0c8", "sha256": "14791f789e1ace118990181d0f861f4156fe2eff5c58951633f099918159aaa4"}, "downloads": -1, "filename": "sdb-1.7.tar.gz", "has_sig": false, "md5_digest": "25f78712d87336514558616570f4a0c8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7939, "upload_time": "2020-02-28T20:10:05", "upload_time_iso_8601": "2020-02-28T20:10:05.035370Z", "url": "https://files.pythonhosted.org/packages/1a/bd/8fe6b915db9965c4b5a3477b8f50658eac320cd03c86d67b334ee770943d/sdb-1.7.tar.gz", "yanked": false}], "1.8": [{"comment_text": "", "digests": {"md5": "484baafe95165e98802fb42ee67cf115", "sha256": "30e5a1798fdd0e121610b78e58430d037954b99fb318ca15caafc2382540a761"}, "downloads": -1, "filename": "sdb-1.8-py2-none-any.whl", "has_sig": false, "md5_digest": "484baafe95165e98802fb42ee67cf115", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10052, "upload_time": "2020-04-21T20:31:31", "upload_time_iso_8601": "2020-04-21T20:31:31.066815Z", "url": "https://files.pythonhosted.org/packages/6d/75/4070dad3870da9ac8424b63a055fb61ac09fe2cf9515a4f0974834961e2b/sdb-1.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9505913f8594b82a8a97ed38df83cf0b", "sha256": "59df0022205d299e8ea59ee9c1a797be679a2cc6786cd6ffc84829012937c73c"}, "downloads": -1, "filename": "sdb-1.8.tar.gz", "has_sig": false, "md5_digest": "9505913f8594b82a8a97ed38df83cf0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9473, "upload_time": "2020-04-21T20:31:32", "upload_time_iso_8601": "2020-04-21T20:31:32.499179Z", "url": "https://files.pythonhosted.org/packages/a0/90/4e0b43af778e479af2a13e79501e6ca66827345d723889c350491f326f77/sdb-1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "484baafe95165e98802fb42ee67cf115", "sha256": "30e5a1798fdd0e121610b78e58430d037954b99fb318ca15caafc2382540a761"}, "downloads": -1, "filename": "sdb-1.8-py2-none-any.whl", "has_sig": false, "md5_digest": "484baafe95165e98802fb42ee67cf115", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10052, "upload_time": "2020-04-21T20:31:31", "upload_time_iso_8601": "2020-04-21T20:31:31.066815Z", "url": "https://files.pythonhosted.org/packages/6d/75/4070dad3870da9ac8424b63a055fb61ac09fe2cf9515a4f0974834961e2b/sdb-1.8-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9505913f8594b82a8a97ed38df83cf0b", "sha256": "59df0022205d299e8ea59ee9c1a797be679a2cc6786cd6ffc84829012937c73c"}, "downloads": -1, "filename": "sdb-1.8.tar.gz", "has_sig": false, "md5_digest": "9505913f8594b82a8a97ed38df83cf0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9473, "upload_time": "2020-04-21T20:31:32", "upload_time_iso_8601": "2020-04-21T20:31:32.499179Z", "url": "https://files.pythonhosted.org/packages/a0/90/4e0b43af778e479af2a13e79501e6ca66827345d723889c350491f326f77/sdb-1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:20 2020"}