{"info": {"author": "Filipe Waitman", "author_email": "filwaitman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Flask", "Framework :: Pyramid", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent"], "description": "[![Build Status](https://travis-ci.org/filwaitman/whatever-rest-framework.svg?branch=master)](https://travis-ci.org/filwaitman/whatever-rest-framework)\n[![codecov](https://codecov.io/gh/filwaitman/whatever-rest-framework/branch/master/graph/badge.svg)](https://codecov.io/gh/filwaitman/whatever-rest-framework)\n\n# Whatever REST Framework\n\n## DISCLAIMER:\n\nThis is WIP. Next steps I can think:\n- Review the TODOs I have left in the project \n- Document input/output of every component's method\n- Create unit tests for base components\n\n\n## What?\n\nBasically this is an agnostic and thin layer to create RESTful APIs.\n\n\n## Why?\n\nHonestly because I every time I have to develop an API I tend to use Django just because of Django Rest Framework (and yes, this is my personal opinion).  \nI would love to be able to create my RESTful APIs in whatever framework/technology I wanted to.\n\n\n## How?\n\n`pip install whatever-rest-framework`\n\nThere are a bunch of full working projects as examples. Please see the [tests folder](https://github.com/filwaitman/whatever-rest-framework/tree/master/tests).  \n\nIn details, you'll need to:  \n\n### 1) Create an `APIOrchestrator` by choosing a bunch of components\n\nThe types of base components you can choose for the API orchestrator are:\n\n| Type                       | Implementations                                                                                                                    | Must be set? | Default                     |\n|----------------------------|------------------------------------------------------------------------------------------------------------------------------------|--------------|-----------------------------|\n| framework_component_class  | ChaliceFrameworkComponent, DjangoFrameworkComponent, FalconFrameworkComponent, FlaskFrameworkComponent, PyramidFrameworkComponent  | Yes          | None                        |\n| orm_component_class        | DjangoORMComponent, PeeweeORMComponent, SQLAlchemyORMComponent                                                                     | Yes          | None                        |\n| schema_component_class     | MarshmallowSchemaComponent, MarshmallowSQLAlchemySchemaComponent                                                                   | Yes          | None                        |\n| error_component_class      | DefaultErrorComponent                                                                                                              | No           | DefaultErrorComponent       |\n| pagination_component_class | NoPagePaginationComponent, PagePagePaginationComponent                                                                             | No           | NoPagePaginationComponent   |\n| permission_component_class | AllowAllPermissionComponent, AllowAuthenticatedPermissionComponent, ReadOnlyPermissionComponent                                    | No           | AllowAllPermissionComponent |\n\n### 2) Define the `get_current_user(self)` method inside this orchestrator\n\nThe logic to discover the current user of a request is heavily dependant of the framework (and the tools you use), and I decided not to include it in the scope of this project.\nIdeally this can be simple as `def get_current_user(self): return g.user` or even `def get_current_user(self): return self.request.user if self.request.user.is_authenticated else None`.\n\n### 3) Create your APIs inheriting from the `APIOrchestrator`\n\nThese APIs need to set the attributes `model_class` and `schema_class`. Also you have to set the `get_queryset(self)`method.\nHere you have full, magic access to the basic API CRUD methods (list resources, retrieve resource, create resource, update resource, delete resource).  \n\n**Special note: the `@api_view()` decorator:**\n\nYou can add other specific methods to your needs by adding methods to the API class too! Just decorate your custom methods with the `@api_view()` decorator and you're good to go!\nThis decorator can receive as arguments the components override to be used for that particular method. So you can have, for instance, your APIOrchestrator with permission=`AllowAllPermissionComponent` but this particular method with permission=`AllowAuthenticatedPermissionComponent` just by like below:\n\n```python\nclass APIOrchestrator(BaseAPI):\n    permission_component_class = AllowAllPermissionComponent\n    # ...\n\n    @api_view(permission_component_class=AllowAuthenticatedPermissionComponent)\n    def retrieve_more_private_stuff(self):\n        return {'super-private': 'data'}\n```\n\n### Working example for a flask application:\n\n```python\nfrom functools import partial\n\nfrom wrf.api.base import BaseAPI, api_view\nfrom wrf.framework.flask import FlaskFrameworkComponent\nfrom wrf.orm.sqlalchemy import SQLAlchemyORMComponent\nfrom wrf.schema.marshmallow_sqlalchemy import MarshmallowSQLAlchemySchemaComponent\n\nfrom <your_stuff> import app, db, User, UserSchema\n\nclass APIOrchestrator(BaseAPI):\n    orm_component_class = partial(SQLAlchemyORMComponent, session=db.session)\n    schema_component_class = MarshmallowSQLAlchemySchemaComponent\n    framework_component_class = FlaskFrameworkComponent\n\n    def get_current_user(self):\n        # from flask_login import current_user; return current_user # if you're using flask-login, for example\n        # return self.request.user if self.request.user.is_authenticated else None  # if you're using django, for example\n        return {'name': 'Filipe'}\n\nclass UserAPI(APIOrchestrator):\n    model_class = User\n    schema_class = UserSchema\n\n    def get_queryset(self):\n        return User.query\n    \n    @api_view()\n    def retrieve_something_else(self, pk):\n        user = User.query.filter_by(id=pk).one()\n        return {'something_else': user.something_else}\n\n@app.route('/', methods=['GET'])\ndef list_():\n    return UserAPI(request).list()\n\n@app.route('/', methods=['POST'])\ndef create():\n    return UserAPI(request).create()\n\n@app.route('/<int:pk>/', methods=['GET'])\ndef retrieve(pk):\n    return UserAPI(request).retrieve(pk)\n\n@app.route('/<int:pk>/', methods=['PATCH'])\ndef update(pk):\n    return UserAPI(request).update(pk)\n\n@app.route('/<int:pk>/', methods=['DELETE'])\ndef delete(pk):\n    return UserAPI(request).delete(pk)\n\n@app.route('/<int:pk>/something_else/', methods=['GET'])\ndef retrieve_something_else(pk):\n    return UserAPI(request).retrieve_something_else(pk)\n```\n\n\n## Supported technologies\n\n### Framework:\n- Chalice\n- Django\n- Falcon\n- Flask\n- Pyramid\n\n\n### ORM:\n- Django\n- Peewee\n- SQLAlchemy\n\n\n### Schema:\n- Marshmallow\n- Marshmallow-SQLAlchemy\n\nBear in mind that this project is made to be easily extensible, so if you need to connect something else, it's simple to do it. [Check how simple it is to add support to a new framework](https://github.com/filwaitman/whatever-rest-framework/tree/master/wrf/framework/flask.py), for example. =D\n\n\n## Contributing\n\nPlease [open issues](https://github.com/filwaitman/whatever-rest-framework/issues) if you see one, or [create a pull request](https://github.com/filwaitman/whatever-rest-framework/pulls) when possible.  \nIn case of a pull request, please consider the following:\n- Respect the line length (132 characters)\n- Keep the great test coverage of this project\n- Run `tox` locally so you can see if everything is green (including linter and other python versions)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/filwaitman/whatever-rest-framework/tarball/0.5.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/filwaitman/whatever-rest-framework", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "whatever-rest-framework", "package_url": "https://pypi.org/project/whatever-rest-framework/", "platform": "", "project_url": "https://pypi.org/project/whatever-rest-framework/", "project_urls": {"Download": "https://github.com/filwaitman/whatever-rest-framework/tarball/0.5.0", "Homepage": "https://github.com/filwaitman/whatever-rest-framework"}, "release_url": "https://pypi.org/project/whatever-rest-framework/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "RESTful API framework for your project, whatever tools you are using.", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/filwaitman/whatever-rest-framework\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95a4e3d3335aed0c0bf0452ced3152578e1c1d57/68747470733a2f2f7472617669732d63692e6f72672f66696c776169746d616e2f77686174657665722d726573742d6672616d65776f726b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/filwaitman/whatever-rest-framework\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4994c57ba36afa4390da5139722370670d011369/68747470733a2f2f636f6465636f762e696f2f67682f66696c776169746d616e2f77686174657665722d726573742d6672616d65776f726b2f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h1>Whatever REST Framework</h1>\n<h2>DISCLAIMER:</h2>\n<p>This is WIP. Next steps I can think:</p>\n<ul>\n<li>Review the TODOs I have left in the project</li>\n<li>Document input/output of every component's method</li>\n<li>Create unit tests for base components</li>\n</ul>\n<h2>What?</h2>\n<p>Basically this is an agnostic and thin layer to create RESTful APIs.</p>\n<h2>Why?</h2>\n<p>Honestly because I every time I have to develop an API I tend to use Django just because of Django Rest Framework (and yes, this is my personal opinion).<br>\nI would love to be able to create my RESTful APIs in whatever framework/technology I wanted to.</p>\n<h2>How?</h2>\n<p><code>pip install whatever-rest-framework</code></p>\n<p>There are a bunch of full working projects as examples. Please see the <a href=\"https://github.com/filwaitman/whatever-rest-framework/tree/master/tests\" rel=\"nofollow\">tests folder</a>.</p>\n<p>In details, you'll need to:</p>\n<h3>1) Create an <code>APIOrchestrator</code> by choosing a bunch of components</h3>\n<p>The types of base components you can choose for the API orchestrator are:</p>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Implementations</th>\n<th>Must be set?</th>\n<th>Default</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>framework_component_class</td>\n<td>ChaliceFrameworkComponent, DjangoFrameworkComponent, FalconFrameworkComponent, FlaskFrameworkComponent, PyramidFrameworkComponent</td>\n<td>Yes</td>\n<td>None</td>\n</tr>\n<tr>\n<td>orm_component_class</td>\n<td>DjangoORMComponent, PeeweeORMComponent, SQLAlchemyORMComponent</td>\n<td>Yes</td>\n<td>None</td>\n</tr>\n<tr>\n<td>schema_component_class</td>\n<td>MarshmallowSchemaComponent, MarshmallowSQLAlchemySchemaComponent</td>\n<td>Yes</td>\n<td>None</td>\n</tr>\n<tr>\n<td>error_component_class</td>\n<td>DefaultErrorComponent</td>\n<td>No</td>\n<td>DefaultErrorComponent</td>\n</tr>\n<tr>\n<td>pagination_component_class</td>\n<td>NoPagePaginationComponent, PagePagePaginationComponent</td>\n<td>No</td>\n<td>NoPagePaginationComponent</td>\n</tr>\n<tr>\n<td>permission_component_class</td>\n<td>AllowAllPermissionComponent, AllowAuthenticatedPermissionComponent, ReadOnlyPermissionComponent</td>\n<td>No</td>\n<td>AllowAllPermissionComponent</td>\n</tr></tbody></table>\n<h3>2) Define the <code>get_current_user(self)</code> method inside this orchestrator</h3>\n<p>The logic to discover the current user of a request is heavily dependant of the framework (and the tools you use), and I decided not to include it in the scope of this project.\nIdeally this can be simple as <code>def get_current_user(self): return g.user</code> or even <code>def get_current_user(self): return self.request.user if self.request.user.is_authenticated else None</code>.</p>\n<h3>3) Create your APIs inheriting from the <code>APIOrchestrator</code></h3>\n<p>These APIs need to set the attributes <code>model_class</code> and <code>schema_class</code>. Also you have to set the <code>get_queryset(self)</code>method.\nHere you have full, magic access to the basic API CRUD methods (list resources, retrieve resource, create resource, update resource, delete resource).</p>\n<p><strong>Special note: the <code>@api_view()</code> decorator:</strong></p>\n<p>You can add other specific methods to your needs by adding methods to the API class too! Just decorate your custom methods with the <code>@api_view()</code> decorator and you're good to go!\nThis decorator can receive as arguments the components override to be used for that particular method. So you can have, for instance, your APIOrchestrator with permission=<code>AllowAllPermissionComponent</code> but this particular method with permission=<code>AllowAuthenticatedPermissionComponent</code> just by like below:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">APIOrchestrator</span><span class=\"p\">(</span><span class=\"n\">BaseAPI</span><span class=\"p\">):</span>\n    <span class=\"n\">permission_component_class</span> <span class=\"o\">=</span> <span class=\"n\">AllowAllPermissionComponent</span>\n    <span class=\"c1\"># ...</span>\n\n    <span class=\"nd\">@api_view</span><span class=\"p\">(</span><span class=\"n\">permission_component_class</span><span class=\"o\">=</span><span class=\"n\">AllowAuthenticatedPermissionComponent</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">retrieve_more_private_stuff</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'super-private'</span><span class=\"p\">:</span> <span class=\"s1\">'data'</span><span class=\"p\">}</span>\n</pre>\n<h3>Working example for a flask application:</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">wrf.api.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseAPI</span><span class=\"p\">,</span> <span class=\"n\">api_view</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wrf.framework.flask</span> <span class=\"kn\">import</span> <span class=\"n\">FlaskFrameworkComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wrf.orm.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemyORMComponent</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wrf.schema.marshmallow_sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">MarshmallowSQLAlchemySchemaComponent</span>\n\n<span class=\"kn\">from</span> <span class=\"o\">&lt;</span><span class=\"n\">your_stuff</span><span class=\"o\">&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">app</span><span class=\"o\">,</span> <span class=\"nn\">db</span><span class=\"o\">,</span> <span class=\"nn\">User</span><span class=\"o\">,</span> <span class=\"nn\">UserSchema</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">APIOrchestrator</span><span class=\"p\">(</span><span class=\"n\">BaseAPI</span><span class=\"p\">):</span>\n    <span class=\"n\">orm_component_class</span> <span class=\"o\">=</span> <span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">SQLAlchemyORMComponent</span><span class=\"p\">,</span> <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">)</span>\n    <span class=\"n\">schema_component_class</span> <span class=\"o\">=</span> <span class=\"n\">MarshmallowSQLAlchemySchemaComponent</span>\n    <span class=\"n\">framework_component_class</span> <span class=\"o\">=</span> <span class=\"n\">FlaskFrameworkComponent</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_current_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># from flask_login import current_user; return current_user # if you're using flask-login, for example</span>\n        <span class=\"c1\"># return self.request.user if self.request.user.is_authenticated else None  # if you're using django, for example</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'Filipe'</span><span class=\"p\">}</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">APIOrchestrator</span><span class=\"p\">):</span>\n    <span class=\"n\">model_class</span> <span class=\"o\">=</span> <span class=\"n\">User</span>\n    <span class=\"n\">schema_class</span> <span class=\"o\">=</span> <span class=\"n\">UserSchema</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">query</span>\n    \n    <span class=\"nd\">@api_view</span><span class=\"p\">()</span>\n    <span class=\"k\">def</span> <span class=\"nf\">retrieve_something_else</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">pk</span><span class=\"p\">):</span>\n        <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter_by</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">pk</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">one</span><span class=\"p\">()</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'something_else'</span><span class=\"p\">:</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">something_else</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">list_</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'POST'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">create</span><span class=\"p\">():</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/&lt;int:pk&gt;/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">retrieve</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/&lt;int:pk&gt;/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'PATCH'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">update</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/&lt;int:pk&gt;/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'DELETE'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">delete</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@app</span><span class=\"o\">.</span><span class=\"n\">route</span><span class=\"p\">(</span><span class=\"s1\">'/&lt;int:pk&gt;/something_else/'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>\n<span class=\"k\">def</span> <span class=\"nf\">retrieve_something_else</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">UserAPI</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">retrieve_something_else</span><span class=\"p\">(</span><span class=\"n\">pk</span><span class=\"p\">)</span>\n</pre>\n<h2>Supported technologies</h2>\n<h3>Framework:</h3>\n<ul>\n<li>Chalice</li>\n<li>Django</li>\n<li>Falcon</li>\n<li>Flask</li>\n<li>Pyramid</li>\n</ul>\n<h3>ORM:</h3>\n<ul>\n<li>Django</li>\n<li>Peewee</li>\n<li>SQLAlchemy</li>\n</ul>\n<h3>Schema:</h3>\n<ul>\n<li>Marshmallow</li>\n<li>Marshmallow-SQLAlchemy</li>\n</ul>\n<p>Bear in mind that this project is made to be easily extensible, so if you need to connect something else, it's simple to do it. <a href=\"https://github.com/filwaitman/whatever-rest-framework/tree/master/wrf/framework/flask.py\" rel=\"nofollow\">Check how simple it is to add support to a new framework</a>, for example. =D</p>\n<h2>Contributing</h2>\n<p>Please <a href=\"https://github.com/filwaitman/whatever-rest-framework/issues\" rel=\"nofollow\">open issues</a> if you see one, or <a href=\"https://github.com/filwaitman/whatever-rest-framework/pulls\" rel=\"nofollow\">create a pull request</a> when possible.<br>\nIn case of a pull request, please consider the following:</p>\n<ul>\n<li>Respect the line length (132 characters)</li>\n<li>Keep the great test coverage of this project</li>\n<li>Run <code>tox</code> locally so you can see if everything is green (including linter and other python versions)</li>\n</ul>\n\n          </div>"}, "last_serial": 5641173, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6eed639898e4bedf01eb51df08624702", "sha256": "3826e86c646b8e85002fd92415f83dcdf6721848e45498fb56619e226cd0c7f6"}, "downloads": -1, "filename": "whatever-rest-framework-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6eed639898e4bedf01eb51df08624702", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9459, "upload_time": "2019-07-05T19:08:46", "upload_time_iso_8601": "2019-07-05T19:08:46.111921Z", "url": "https://files.pythonhosted.org/packages/0b/f1/cb8f44f6a24e666d4554e2a73da78e040ec3723906bac3f5b9229aa438b7/whatever-rest-framework-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7a1f9ca81b39bec837e34ec6c9dea26f", "sha256": "20d720ead520767ca5985e90482c23f6b93f7856b8c6159923cdf49132bc2357"}, "downloads": -1, "filename": "whatever-rest-framework-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7a1f9ca81b39bec837e34ec6c9dea26f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9580, "upload_time": "2019-07-05T20:44:42", "upload_time_iso_8601": "2019-07-05T20:44:42.282780Z", "url": "https://files.pythonhosted.org/packages/ef/1d/1903be63101a60e5036eb21164df098b08b2c96a7922f172b80b34e6c6bd/whatever-rest-framework-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9aad9dff0aef9227abaa85abfcd64f1c", "sha256": "4eb33eec1c4290d950211064cf21f36c41c08f3416ac063da570b8e5394cf40d"}, "downloads": -1, "filename": "whatever-rest-framework-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9aad9dff0aef9227abaa85abfcd64f1c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10202, "upload_time": "2019-07-11T18:50:09", "upload_time_iso_8601": "2019-07-11T18:50:09.498102Z", "url": "https://files.pythonhosted.org/packages/83/1e/752e03328d6a3c2694571d392058c3a31d92e58b9436e1ccf0d1fc91bf2b/whatever-rest-framework-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "270d32d738cd15842e86425bf1158b34", "sha256": "533ae23d1f2967bfa4d01b53eb59ed6cc709aa8d0b7606cf7aa089a23aa3b33e"}, "downloads": -1, "filename": "whatever-rest-framework-0.3.0.tar.gz", "has_sig": false, "md5_digest": "270d32d738cd15842e86425bf1158b34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10228, "upload_time": "2019-07-23T19:31:22", "upload_time_iso_8601": "2019-07-23T19:31:22.163885Z", "url": "https://files.pythonhosted.org/packages/89/5e/ef2266ea80b4068023590fc60285ca5328ddab02ad8763238aa53db7c313/whatever-rest-framework-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "cfa17c80cf4a9f03a0de591f6b6d7df8", "sha256": "d3890a75dcbe76ef1dba2147394e2a4c4647de08310c588287ed19d45317e852"}, "downloads": -1, "filename": "whatever-rest-framework-0.4.0.tar.gz", "has_sig": false, "md5_digest": "cfa17c80cf4a9f03a0de591f6b6d7df8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10375, "upload_time": "2019-07-24T14:32:51", "upload_time_iso_8601": "2019-07-24T14:32:51.708904Z", "url": "https://files.pythonhosted.org/packages/34/23/c72e87739cce04674fde69e0687b9bbd47273ea733232904df1f54139911/whatever-rest-framework-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8a5f001218f78b46568f82e05eea2526", "sha256": "c34aa1a5e3f5f7b2f3119d5e8549d39f95221d1e5fd1117c8094454f2dafa45a"}, "downloads": -1, "filename": "whatever-rest-framework-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8a5f001218f78b46568f82e05eea2526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12891, "upload_time": "2019-08-06T18:54:34", "upload_time_iso_8601": "2019-08-06T18:54:34.485060Z", "url": "https://files.pythonhosted.org/packages/d6/e1/3573298a33b99881dc9293d0f71bd008dcc3ce6dd260c91504916f232f19/whatever-rest-framework-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a5f001218f78b46568f82e05eea2526", "sha256": "c34aa1a5e3f5f7b2f3119d5e8549d39f95221d1e5fd1117c8094454f2dafa45a"}, "downloads": -1, "filename": "whatever-rest-framework-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8a5f001218f78b46568f82e05eea2526", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12891, "upload_time": "2019-08-06T18:54:34", "upload_time_iso_8601": "2019-08-06T18:54:34.485060Z", "url": "https://files.pythonhosted.org/packages/d6/e1/3573298a33b99881dc9293d0f71bd008dcc3ce6dd260c91504916f232f19/whatever-rest-framework-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:29:57 2020"}