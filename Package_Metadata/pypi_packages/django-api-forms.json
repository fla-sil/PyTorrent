{"info": {"author": "Jakub Dubec", "author_email": "jakub.dubec@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: HTTP Servers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Django API Forms\n\n[![PyPI version](https://badge.fury.io/py/django-api-forms.svg)](https://badge.fury.io/py/django-api-forms)\n[![codecov](https://codecov.io/gh/Sibyx/django_api_forms/branch/master/graph/badge.svg)](https://codecov.io/gh/Sibyx/django_api_forms)\n\n[Django Forms](https://docs.djangoproject.com/en/3.0/topics/forms/) approach in validation of request payload\n(especially for content type like [JSON](https://www.json.org/) or [MessagePack](https://msgpack.org/))\nwithout HTML front-end.\n\n## Motivation\n\nMain idea was to create a simple and declarative way to specify format of expecting request with ability to validate\nthem. Firstly I tried to use [Django Forms](https://docs.djangoproject.com/en/3.0/topics/forms/) to validate my API\nrequest (I use pure Django in my APIs). I have encountered a problem with nesting my requests without huge boilerplate.\nAlso, the whole HTML thing was pretty useless in my RESTful APIs.\n\nI wanted something to:\n\n- define my requests as object (`Form`)\n- pass the request to my defined object (`form = Form.create_from_request(request)`)\n- validate my request `form.is_valid()`\n- extract data `form.clean_data` property\n\nI wanted to keep:\n\n- friendly declarative Django syntax\n([DeclarativeFieldsMetaclass](https://github.com/django/django/blob/master/django/forms/forms.py#L22) is beautiful)\n- [Django Validators](https://docs.djangoproject.com/en/3.0/ref/validators/)\n- [ValidationError](https://docs.djangoproject.com/en/3.0/ref/exceptions/#validationerror)\n\nSo I decided to create simple Python package to cover all my expectations.\n\n## Installation\n\n```shell script\n# Using pip\npip install django-api-forms\n\n# Using poetry\npeotry add django-api-forms\n\n# Using pipenv\npipenv install django-api-forms\n\n# Using setup.py\npython setup.py install\n```\n\nOptional:\n```shell script\n# msgpack support (for requests with Content-Type: application/x-msgpack)\npipenv install msgpack\n```\n\n## Example\n\n**Simple nested JSON request**\n\n```json\n{\n  \"title\": \"Unknown Pleasures\",\n  \"type\": \"vinyl\",\n  \"artist\": {\n    \"name\": \"Joy Division\",\n    \"genres\": [\n      \"rock\",\n      \"punk\"\n    ],\n    \"members\": 4\n  },\n  \"year\": 1979,\n  \"songs\": [\n    {\n      \"title\": \"Disorder\",\n      \"duration\": \"3:29\"\n    },\n    {\n      \"title\": \"Day of the Lords\",\n      \"duration\": \"4:48\",\n      \"metadata\": {\n        \"_section\": {\n          \"type\": \"ID3v2\",\n          \"offset\": 0,\n          \"byteLength\": 2048\n        },\n        \"header\": {\n          \"majorVersion\": 3,\n          \"minorRevision\": 0,\n          \"flagsOctet\": 0,\n          \"unsynchronisationFlag\": false,\n          \"extendedHeaderFlag\": false,\n          \"experimentalIndicatorFlag\": false,\n          \"size\": 2038\n        }\n      }\n    }\n  ],\n  \"metadata\": {\n    \"created_at\": \"2019-10-21T18:57:03+0100\",\n    \"updated_at\": \"2019-10-21T18:57:03+0100\"\n  }\n}\n\n```\n\n**Django API Forms equivalent + validation**\n\n```python\nfrom enum import Enum\n\nfrom django.core.exceptions import ValidationError\nfrom django.forms import fields\n\nfrom django_api_forms import FieldList, FormField, FormFieldList, DictionaryField, EnumField, AnyField, Form\n\n\nclass AlbumType(Enum):\n    CD = 'cd'\n    VINYL = 'vinyl'\n\n\nclass ArtistForm(Form):\n    name = fields.CharField(required=True, max_length=100)\n    genres = FieldList(field=fields.CharField(max_length=30))\n    members = fields.IntegerField()\n\n\nclass SongForm(Form):\n    title = fields.CharField(required=True, max_length=100)\n    duration = fields.DurationField(required=False)\n    metadata = AnyField(required=False)\n\n\nclass AlbumForm(Form):\n    title = fields.CharField(max_length=100)\n    year = fields.IntegerField()\n    artist = FormField(form=ArtistForm)\n    songs = FormFieldList(form=SongForm)\n    type = EnumField(enum=AlbumType, required=True)\n    metadata = DictionaryField(fields.DateTimeField())\n\n    def clean_year(self):\n        if self.cleaned_data['year'] == 1992:\n            raise ValidationError(\"Year 1992 is forbidden!\", 'forbidden-value')\n        return self.cleaned_data['year']\n\n    def clean(self):\n        if (self.cleaned_data['year'] == 1998) and (self.cleaned_data['artist']['name'] == \"Nirvana\"):\n            raise ValidationError(\"Sounds like a bullshit\", code='time-traveling')\n        return self.cleaned_data\n\n\n\n\"\"\"\nDjango view example\n\"\"\"\ndef create_album(request):\n    form = AlbumForm.create_from_request(request)\n    if not form.is_valid():\n        # Process your validation error\n        print(form.errors)\n\n    # Cleaned valid payload\n    payload = form.cleaned_data\n    print(payload)\n```\n\nIf you want example with whole Django project, check out repository created by @pawl\n[django_api_forms_modelchoicefield_example](https://github.com/pawl/django_api_forms_modelchoicefield_example), where\nhe uses library with\n[ModelChoiceField](https://docs.djangoproject.com/en/3.0/ref/forms/fields/#django.forms.ModelChoiceField).\n\n\n## Running Tests\n\n```shell script\n# install all dependencies\npoetry install\n\n# run the tests\npoetry run pytest\n```\n\n---\nMade with \u2764\ufe0f and \u2615\ufe0f by Jakub Dubec & [BACKBONE s.r.o.](https://www.backbone.sk/en/)\n\n# Changelog\n\n## 0.8.0 : 05.05.2020\n\n- **Maintenance**: Add tests for fields\n- **Change**: Remove DeclarativeFieldsMetaclass and import from Django instead.\n- **Change**: Msgpack dependency is no longer required.\n- **Change**: Empty values passed into a FormField now return {} rather than None.\n- **Fix**: Throw a more user friendly error when passing non-Enums or invalid values to EnumField.\n\n## 0.7.1 : 13.04.2020\n\n- **Change** Use [poetry](https://python-poetry.org/) instead of [pipenv](https://github.com/pypa/pipenv)\n- **Change**: Library renamed from `django_api_forms` to `django-api-forms` (cosmetic change without effect)\n\n## 0.7.0 : 03.03.2020\n\n- **Change**: Library renamed from `django_request_formatter` to `django_api_forms`\n- **Change**: Imports in main module `django_api_forms`\n\n## 0.6.0 : 18.02.2020\n\n- **Feature**: `BooleanField` introduced\n\n## 0.5.8 : 07.01.2020\n\n- **Fix**: Pass `Invalid value` as `ValidationError` not as a `string`\n\n## 0.5.7 : 07.01.2020\n\n- **Fix**: Introduced generic `Invalid value` error message, if there is `AttributeError`, `TypeError`, `ValueError`\n\n## 0.5.6 : 01.01.2020\n\n- **Fix**: Fixing issue from version `0.5.5` but this time for real\n- **Change**: Renamed version file from `__version__.py` to `version.py`\n\n## 0.5.5 : 01.01.2020\n\n- **Fix**: Check instance only if there is a value in `FieldList` and `FormFieldList`\n\n## 0.5.4 : 24.12.2019\n\n- **Fix**: Added missing `msgpack`` dependency to `setup.py`\n\n## 0.5.3 : 20.12.2019\n\n- **Feature**: Introduced generic `AnyField`\n\n## 0.5.2 : 19.12.2019\n\n- **Fix**: Skip processing of the `FormField` if value is not required and empty\n\n## 0.5.1 : 19.12.2019\n\n- **Fix**: Process `EnumField` even if it's not marked as required\n\n## 0.5.0 : 16.12.2019\n\n- **Change**: Use native `django.form.fields` if possible\n- **Change**: Removed `kwargs` propagation from release `0.3.0`\n- **Change**: Changed syntax back to `django.forms` compatible (e.g. `form.validate_{key}()` -> `form.clean_{key}()`)\n- **Change**: `FieldList` raises `ValidationError` instead of `RuntimeException` if there is a type  in validation\n- **Change**: Use private properties for internal data in field objects\n- **Fixed**: `FieldList` returns values instead of `None`\n- **Fix**: Fixed validation in `DictionaryField`\n- **Maintenance**: Basic unit tests\n\n## 0.4.3 : 29.11.2019\n\n- **Fix**: Fixed `Form` has no attribute `self._data`\n\n## 0.4.2 : 29.11.2019\n\n- **Fix**: If payload is empty, create empty dictionary to avoid `NoneType` error\n\n## 0.4.1 : 14.11.2019\n\n- **Feature**: Introduced `UUIDField`\n\n## 0.4.0 : 13.11.2019\n\n- **Feature**: Introduced `DictionaryField`\n\n## 0.3.0 : 11.11.2019\n\n- **Feature**: Propagate `kwargs` from `Form.is_valid()` to `Form.validate()` and `Form.validate_{key}()` methods\n\n## 0.2.1 : 4.11.2019\n\n- **Fix**: Fixed `to_python()` in FormFieldList\n\n## 0.2.0 : 31.10.2019\n\n- **Change**: `Form.validate()` replaced by `Form.is_valid()`\n- **Feature**: `Form.validate()` is now used as a last step of form validation and it's aimed to be overwritten if\nneeded\n- **Note**: Unit tests initialization\n\n## 0.1.6 : 24.10.2019\n\n- **Fix**: Non-required EnumField is now working\n- **Feature**: WIP: Initial method for filling objects `Form::fill()`\n\n## 0.1.5 : 23.10.2019\n\n- **Fix**: Assign errors to form before raising `ValidationError`\n\n## 0.1.4 : 23.10.2019\n\n- **Fix**: Do not return empty error records in `Form:errors`\n\n## 0.1.3 : 23.10.2019\n\n- **Fix**: Use custom `DeclarativeFieldsMetaclass` because of custom `Field` class\n- **Fix**: Do not return untouched fields in `Form::payload`\n- **Fix**: Fix for None `default_validators` in `Field`\n\n## 0.1.2 : 22:10.2019\n\n- **Feature**: Support for `validation_{field}` methods in `Form` (initial support)\n\n## 0.1.1 : 22.10.2019\n\n- **Feature**: `EnumField`\n\n## 0.1.0 : 22.10.2019\n\n- **Feature**: First version of `Form` class\n- **Feature**: `CharField`\n- **Feature**: `IntegerField`\n- **Feature**: `FloatField`\n- **Feature**: `DecimalField`\n- **Feature**: `DateField`\n- **Feature**: `TimeField`\n- **Feature**: `DateTimeField`\n- **Feature**: `DurationField`\n- **Feature**: `RegexField`\n- **Feature**: `EmailField`\n- **Feature**: `BooleanField`\n- **Feature**: `RegexField`\n- **Feature**: `FieldList`\n- **Feature**: `FormField`\n- **Feature**: `FormFieldList`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Sibyx/django_api_forms", "keywords": "django,forms,request,validation,python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-api-forms", "package_url": "https://pypi.org/project/django-api-forms/", "platform": "", "project_url": "https://pypi.org/project/django-api-forms/", "project_urls": {"Homepage": "https://github.com/Sibyx/django_api_forms"}, "release_url": "https://pypi.org/project/django-api-forms/0.8.0/", "requires_dist": ["Django (>=2.0)"], "requires_python": "", "summary": "Declarative Django request validation", "version": "0.8.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django API Forms</h1>\n<p><a href=\"https://badge.fury.io/py/django-api-forms\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a33523bc99d102605d0f38623d3064dc0dc4de02/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d6170692d666f726d732e737667\"></a>\n<a href=\"https://codecov.io/gh/Sibyx/django_api_forms\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d90568e74beb550e3ccf3a943e2ae411353ad4e4/68747470733a2f2f636f6465636f762e696f2f67682f53696279782f646a616e676f5f6170695f666f726d732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><a href=\"https://docs.djangoproject.com/en/3.0/topics/forms/\" rel=\"nofollow\">Django Forms</a> approach in validation of request payload\n(especially for content type like <a href=\"https://www.json.org/\" rel=\"nofollow\">JSON</a> or <a href=\"https://msgpack.org/\" rel=\"nofollow\">MessagePack</a>)\nwithout HTML front-end.</p>\n<h2>Motivation</h2>\n<p>Main idea was to create a simple and declarative way to specify format of expecting request with ability to validate\nthem. Firstly I tried to use <a href=\"https://docs.djangoproject.com/en/3.0/topics/forms/\" rel=\"nofollow\">Django Forms</a> to validate my API\nrequest (I use pure Django in my APIs). I have encountered a problem with nesting my requests without huge boilerplate.\nAlso, the whole HTML thing was pretty useless in my RESTful APIs.</p>\n<p>I wanted something to:</p>\n<ul>\n<li>define my requests as object (<code>Form</code>)</li>\n<li>pass the request to my defined object (<code>form = Form.create_from_request(request)</code>)</li>\n<li>validate my request <code>form.is_valid()</code></li>\n<li>extract data <code>form.clean_data</code> property</li>\n</ul>\n<p>I wanted to keep:</p>\n<ul>\n<li>friendly declarative Django syntax\n(<a href=\"https://github.com/django/django/blob/master/django/forms/forms.py#L22\" rel=\"nofollow\">DeclarativeFieldsMetaclass</a> is beautiful)</li>\n<li><a href=\"https://docs.djangoproject.com/en/3.0/ref/validators/\" rel=\"nofollow\">Django Validators</a></li>\n<li><a href=\"https://docs.djangoproject.com/en/3.0/ref/exceptions/#validationerror\" rel=\"nofollow\">ValidationError</a></li>\n</ul>\n<p>So I decided to create simple Python package to cover all my expectations.</p>\n<h2>Installation</h2>\n<pre><span class=\"c1\"># Using pip</span>\npip install django-api-forms\n\n<span class=\"c1\"># Using poetry</span>\npeotry add django-api-forms\n\n<span class=\"c1\"># Using pipenv</span>\npipenv install django-api-forms\n\n<span class=\"c1\"># Using setup.py</span>\npython setup.py install\n</pre>\n<p>Optional:</p>\n<pre><span class=\"c1\"># msgpack support (for requests with Content-Type: application/x-msgpack)</span>\npipenv install msgpack\n</pre>\n<h2>Example</h2>\n<p><strong>Simple nested JSON request</strong></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Unknown Pleasures\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vinyl\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"artist\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Joy Division\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"genres\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n      <span class=\"s2\">\"rock\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"punk\"</span>\n    <span class=\"p\">],</span>\n    <span class=\"nt\">\"members\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"year\"</span><span class=\"p\">:</span> <span class=\"mi\">1979</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"songs\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Disorder\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"duration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3:29\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Day of the Lords\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"duration\"</span><span class=\"p\">:</span> <span class=\"s2\">\"4:48\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"metadata\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"_section\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ID3v2\"</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"offset\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"byteLength\"</span><span class=\"p\">:</span> <span class=\"mi\">2048</span>\n        <span class=\"p\">},</span>\n        <span class=\"nt\">\"header\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n          <span class=\"nt\">\"majorVersion\"</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"minorRevision\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"flagsOctet\"</span><span class=\"p\">:</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"unsynchronisationFlag\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"extendedHeaderFlag\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"experimentalIndicatorFlag\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n          <span class=\"nt\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">2038</span>\n        <span class=\"p\">}</span>\n      <span class=\"p\">}</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"nt\">\"metadata\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-10-21T18:57:03+0100\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"updated_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2019-10-21T18:57:03+0100\"</span>\n  <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><strong>Django API Forms equivalent + validation</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">enum</span> <span class=\"kn\">import</span> <span class=\"n\">Enum</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django.core.exceptions</span> <span class=\"kn\">import</span> <span class=\"n\">ValidationError</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.forms</span> <span class=\"kn\">import</span> <span class=\"n\">fields</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">django_api_forms</span> <span class=\"kn\">import</span> <span class=\"n\">FieldList</span><span class=\"p\">,</span> <span class=\"n\">FormField</span><span class=\"p\">,</span> <span class=\"n\">FormFieldList</span><span class=\"p\">,</span> <span class=\"n\">DictionaryField</span><span class=\"p\">,</span> <span class=\"n\">EnumField</span><span class=\"p\">,</span> <span class=\"n\">AnyField</span><span class=\"p\">,</span> <span class=\"n\">Form</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AlbumType</span><span class=\"p\">(</span><span class=\"n\">Enum</span><span class=\"p\">):</span>\n    <span class=\"n\">CD</span> <span class=\"o\">=</span> <span class=\"s1\">'cd'</span>\n    <span class=\"n\">VINYL</span> <span class=\"o\">=</span> <span class=\"s1\">'vinyl'</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ArtistForm</span><span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">genres</span> <span class=\"o\">=</span> <span class=\"n\">FieldList</span><span class=\"p\">(</span><span class=\"n\">field</span><span class=\"o\">=</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">))</span>\n    <span class=\"n\">members</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SongForm</span><span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">duration</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DurationField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">AnyField</span><span class=\"p\">(</span><span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AlbumForm</span><span class=\"p\">(</span><span class=\"n\">Form</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"n\">year</span> <span class=\"o\">=</span> <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">IntegerField</span><span class=\"p\">()</span>\n    <span class=\"n\">artist</span> <span class=\"o\">=</span> <span class=\"n\">FormField</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">ArtistForm</span><span class=\"p\">)</span>\n    <span class=\"n\">songs</span> <span class=\"o\">=</span> <span class=\"n\">FormFieldList</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">=</span><span class=\"n\">SongForm</span><span class=\"p\">)</span>\n    <span class=\"nb\">type</span> <span class=\"o\">=</span> <span class=\"n\">EnumField</span><span class=\"p\">(</span><span class=\"n\">enum</span><span class=\"o\">=</span><span class=\"n\">AlbumType</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">metadata</span> <span class=\"o\">=</span> <span class=\"n\">DictionaryField</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">DateTimeField</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean_year</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'year'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1992</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s2\">\"Year 1992 is forbidden!\"</span><span class=\"p\">,</span> <span class=\"s1\">'forbidden-value'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'year'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'year'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">1998</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span><span class=\"p\">[</span><span class=\"s1\">'artist'</span><span class=\"p\">][</span><span class=\"s1\">'name'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"Nirvana\"</span><span class=\"p\">):</span>\n            <span class=\"k\">raise</span> <span class=\"n\">ValidationError</span><span class=\"p\">(</span><span class=\"s2\">\"Sounds like a bullshit\"</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s1\">'time-traveling'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n\n\n\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Django view example</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"k\">def</span> <span class=\"nf\">create_album</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"n\">form</span> <span class=\"o\">=</span> <span class=\"n\">AlbumForm</span><span class=\"o\">.</span><span class=\"n\">create_from_request</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">is_valid</span><span class=\"p\">():</span>\n        <span class=\"c1\"># Process your validation error</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Cleaned valid payload</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"n\">form</span><span class=\"o\">.</span><span class=\"n\">cleaned_data</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n</pre>\n<p>If you want example with whole Django project, check out repository created by @pawl\n<a href=\"https://github.com/pawl/django_api_forms_modelchoicefield_example\" rel=\"nofollow\">django_api_forms_modelchoicefield_example</a>, where\nhe uses library with\n<a href=\"https://docs.djangoproject.com/en/3.0/ref/forms/fields/#django.forms.ModelChoiceField\" rel=\"nofollow\">ModelChoiceField</a>.</p>\n<h2>Running Tests</h2>\n<pre><span class=\"c1\"># install all dependencies</span>\npoetry install\n\n<span class=\"c1\"># run the tests</span>\npoetry run pytest\n</pre>\n<hr>\n<p>Made with \u2764\ufe0f and \u2615\ufe0f by Jakub Dubec &amp; <a href=\"https://www.backbone.sk/en/\" rel=\"nofollow\">BACKBONE s.r.o.</a></p>\n<h1>Changelog</h1>\n<h2>0.8.0 : 05.05.2020</h2>\n<ul>\n<li><strong>Maintenance</strong>: Add tests for fields</li>\n<li><strong>Change</strong>: Remove DeclarativeFieldsMetaclass and import from Django instead.</li>\n<li><strong>Change</strong>: Msgpack dependency is no longer required.</li>\n<li><strong>Change</strong>: Empty values passed into a FormField now return {} rather than None.</li>\n<li><strong>Fix</strong>: Throw a more user friendly error when passing non-Enums or invalid values to EnumField.</li>\n</ul>\n<h2>0.7.1 : 13.04.2020</h2>\n<ul>\n<li><strong>Change</strong> Use <a href=\"https://python-poetry.org/\" rel=\"nofollow\">poetry</a> instead of <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">pipenv</a></li>\n<li><strong>Change</strong>: Library renamed from <code>django_api_forms</code> to <code>django-api-forms</code> (cosmetic change without effect)</li>\n</ul>\n<h2>0.7.0 : 03.03.2020</h2>\n<ul>\n<li><strong>Change</strong>: Library renamed from <code>django_request_formatter</code> to <code>django_api_forms</code></li>\n<li><strong>Change</strong>: Imports in main module <code>django_api_forms</code></li>\n</ul>\n<h2>0.6.0 : 18.02.2020</h2>\n<ul>\n<li><strong>Feature</strong>: <code>BooleanField</code> introduced</li>\n</ul>\n<h2>0.5.8 : 07.01.2020</h2>\n<ul>\n<li><strong>Fix</strong>: Pass <code>Invalid value</code> as <code>ValidationError</code> not as a <code>string</code></li>\n</ul>\n<h2>0.5.7 : 07.01.2020</h2>\n<ul>\n<li><strong>Fix</strong>: Introduced generic <code>Invalid value</code> error message, if there is <code>AttributeError</code>, <code>TypeError</code>, <code>ValueError</code></li>\n</ul>\n<h2>0.5.6 : 01.01.2020</h2>\n<ul>\n<li><strong>Fix</strong>: Fixing issue from version <code>0.5.5</code> but this time for real</li>\n<li><strong>Change</strong>: Renamed version file from <code>__version__.py</code> to <code>version.py</code></li>\n</ul>\n<h2>0.5.5 : 01.01.2020</h2>\n<ul>\n<li><strong>Fix</strong>: Check instance only if there is a value in <code>FieldList</code> and <code>FormFieldList</code></li>\n</ul>\n<h2>0.5.4 : 24.12.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Added missing <code>msgpack`` dependency to</code>setup.py`</li>\n</ul>\n<h2>0.5.3 : 20.12.2019</h2>\n<ul>\n<li><strong>Feature</strong>: Introduced generic <code>AnyField</code></li>\n</ul>\n<h2>0.5.2 : 19.12.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Skip processing of the <code>FormField</code> if value is not required and empty</li>\n</ul>\n<h2>0.5.1 : 19.12.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Process <code>EnumField</code> even if it's not marked as required</li>\n</ul>\n<h2>0.5.0 : 16.12.2019</h2>\n<ul>\n<li><strong>Change</strong>: Use native <code>django.form.fields</code> if possible</li>\n<li><strong>Change</strong>: Removed <code>kwargs</code> propagation from release <code>0.3.0</code></li>\n<li><strong>Change</strong>: Changed syntax back to <code>django.forms</code> compatible (e.g. <code>form.validate_{key}()</code> -&gt; <code>form.clean_{key}()</code>)</li>\n<li><strong>Change</strong>: <code>FieldList</code> raises <code>ValidationError</code> instead of <code>RuntimeException</code> if there is a type  in validation</li>\n<li><strong>Change</strong>: Use private properties for internal data in field objects</li>\n<li><strong>Fixed</strong>: <code>FieldList</code> returns values instead of <code>None</code></li>\n<li><strong>Fix</strong>: Fixed validation in <code>DictionaryField</code></li>\n<li><strong>Maintenance</strong>: Basic unit tests</li>\n</ul>\n<h2>0.4.3 : 29.11.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Fixed <code>Form</code> has no attribute <code>self._data</code></li>\n</ul>\n<h2>0.4.2 : 29.11.2019</h2>\n<ul>\n<li><strong>Fix</strong>: If payload is empty, create empty dictionary to avoid <code>NoneType</code> error</li>\n</ul>\n<h2>0.4.1 : 14.11.2019</h2>\n<ul>\n<li><strong>Feature</strong>: Introduced <code>UUIDField</code></li>\n</ul>\n<h2>0.4.0 : 13.11.2019</h2>\n<ul>\n<li><strong>Feature</strong>: Introduced <code>DictionaryField</code></li>\n</ul>\n<h2>0.3.0 : 11.11.2019</h2>\n<ul>\n<li><strong>Feature</strong>: Propagate <code>kwargs</code> from <code>Form.is_valid()</code> to <code>Form.validate()</code> and <code>Form.validate_{key}()</code> methods</li>\n</ul>\n<h2>0.2.1 : 4.11.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Fixed <code>to_python()</code> in FormFieldList</li>\n</ul>\n<h2>0.2.0 : 31.10.2019</h2>\n<ul>\n<li><strong>Change</strong>: <code>Form.validate()</code> replaced by <code>Form.is_valid()</code></li>\n<li><strong>Feature</strong>: <code>Form.validate()</code> is now used as a last step of form validation and it's aimed to be overwritten if\nneeded</li>\n<li><strong>Note</strong>: Unit tests initialization</li>\n</ul>\n<h2>0.1.6 : 24.10.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Non-required EnumField is now working</li>\n<li><strong>Feature</strong>: WIP: Initial method for filling objects <code>Form::fill()</code></li>\n</ul>\n<h2>0.1.5 : 23.10.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Assign errors to form before raising <code>ValidationError</code></li>\n</ul>\n<h2>0.1.4 : 23.10.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Do not return empty error records in <code>Form:errors</code></li>\n</ul>\n<h2>0.1.3 : 23.10.2019</h2>\n<ul>\n<li><strong>Fix</strong>: Use custom <code>DeclarativeFieldsMetaclass</code> because of custom <code>Field</code> class</li>\n<li><strong>Fix</strong>: Do not return untouched fields in <code>Form::payload</code></li>\n<li><strong>Fix</strong>: Fix for None <code>default_validators</code> in <code>Field</code></li>\n</ul>\n<h2>0.1.2 : 22:10.2019</h2>\n<ul>\n<li><strong>Feature</strong>: Support for <code>validation_{field}</code> methods in <code>Form</code> (initial support)</li>\n</ul>\n<h2>0.1.1 : 22.10.2019</h2>\n<ul>\n<li><strong>Feature</strong>: <code>EnumField</code></li>\n</ul>\n<h2>0.1.0 : 22.10.2019</h2>\n<ul>\n<li><strong>Feature</strong>: First version of <code>Form</code> class</li>\n<li><strong>Feature</strong>: <code>CharField</code></li>\n<li><strong>Feature</strong>: <code>IntegerField</code></li>\n<li><strong>Feature</strong>: <code>FloatField</code></li>\n<li><strong>Feature</strong>: <code>DecimalField</code></li>\n<li><strong>Feature</strong>: <code>DateField</code></li>\n<li><strong>Feature</strong>: <code>TimeField</code></li>\n<li><strong>Feature</strong>: <code>DateTimeField</code></li>\n<li><strong>Feature</strong>: <code>DurationField</code></li>\n<li><strong>Feature</strong>: <code>RegexField</code></li>\n<li><strong>Feature</strong>: <code>EmailField</code></li>\n<li><strong>Feature</strong>: <code>BooleanField</code></li>\n<li><strong>Feature</strong>: <code>RegexField</code></li>\n<li><strong>Feature</strong>: <code>FieldList</code></li>\n<li><strong>Feature</strong>: <code>FormField</code></li>\n<li><strong>Feature</strong>: <code>FormFieldList</code></li>\n</ul>\n\n          </div>"}, "last_serial": 7170517, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "74c2dd3e23bb3933ef14d1f065deef4e", "sha256": "fea37d81b716d4db53170cfcca5b938588cb89b4f924d1fdaa244de21a47b519"}, "downloads": -1, "filename": "django_api_forms-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "74c2dd3e23bb3933ef14d1f065deef4e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9523, "upload_time": "2020-03-03T14:02:25", "upload_time_iso_8601": "2020-03-03T14:02:25.689474Z", "url": "https://files.pythonhosted.org/packages/dc/f9/4cf81fb5b320a9d8467af8d8d6a29873655c1937860a4ae39cc6368a4986/django_api_forms-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f0533a8a358325dcd0898074054c781", "sha256": "99b47533aa8e798388a7a75c4a290f17dd14a3bf0db8c67e75e6a797bbd6beda"}, "downloads": -1, "filename": "django_api_forms-0.7.0.tar.gz", "has_sig": false, "md5_digest": "9f0533a8a358325dcd0898074054c781", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10380, "upload_time": "2020-03-03T14:02:28", "upload_time_iso_8601": "2020-03-03T14:02:28.148675Z", "url": "https://files.pythonhosted.org/packages/34/0d/c351922e28e6cfddcac2c20fc0ca602aa1a3e70b5e3113806632f20f3bba/django_api_forms-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "b8c41edfdf4435af630331bb6899fd8e", "sha256": "2dcc92413285d4f91fa173870f907bb0401a744d084c20be909a3e51b193a85d"}, "downloads": -1, "filename": "django_api_forms-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b8c41edfdf4435af630331bb6899fd8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9589, "upload_time": "2020-04-13T13:28:38", "upload_time_iso_8601": "2020-04-13T13:28:38.390102Z", "url": "https://files.pythonhosted.org/packages/81/0a/e7a7c8e656e0a40913b577b2d245e7fa3dcd2782fa052e3306cd6e1706c6/django_api_forms-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecef43c2288e5c702a06e428988b117a", "sha256": "907a652f39e8bfcdf7388d24eebd929851624ed05dc50d81aae618c02fa11da2"}, "downloads": -1, "filename": "django-api-forms-0.7.1.tar.gz", "has_sig": false, "md5_digest": "ecef43c2288e5c702a06e428988b117a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10519, "upload_time": "2020-04-13T13:28:39", "upload_time_iso_8601": "2020-04-13T13:28:39.795495Z", "url": "https://files.pythonhosted.org/packages/4a/2e/b06d0a33417d4f24ec6ce85602cfd20ca5dfb6abb6a1b25b4823065db45b/django-api-forms-0.7.1.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "49af2d7e144b56448f881a60e87928cb", "sha256": "90aa8f65b797837f6cc0d3f5d86ede58576fef64be1a27928b4049f002c02345"}, "downloads": -1, "filename": "django_api_forms-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "49af2d7e144b56448f881a60e87928cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9800, "upload_time": "2020-05-05T09:10:11", "upload_time_iso_8601": "2020-05-05T09:10:11.226553Z", "url": "https://files.pythonhosted.org/packages/cb/89/830d116685bcd799cb3b0586da99ff6e6a0037c7f224148fbd611b767cae/django_api_forms-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2105f547a2f9f1dc08eb441fbcae50", "sha256": "652b7cb348e5848066d81f3fc42cd95def46fd01ab349872bd378fa55505c08d"}, "downloads": -1, "filename": "django-api-forms-0.8.0.tar.gz", "has_sig": false, "md5_digest": "1f2105f547a2f9f1dc08eb441fbcae50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10903, "upload_time": "2020-05-05T09:10:12", "upload_time_iso_8601": "2020-05-05T09:10:12.740884Z", "url": "https://files.pythonhosted.org/packages/a5/fd/66c98120544d52f59a18270141cd57cdcabae50ee7d8905c5c1d1b65aa5e/django-api-forms-0.8.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "49af2d7e144b56448f881a60e87928cb", "sha256": "90aa8f65b797837f6cc0d3f5d86ede58576fef64be1a27928b4049f002c02345"}, "downloads": -1, "filename": "django_api_forms-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "49af2d7e144b56448f881a60e87928cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9800, "upload_time": "2020-05-05T09:10:11", "upload_time_iso_8601": "2020-05-05T09:10:11.226553Z", "url": "https://files.pythonhosted.org/packages/cb/89/830d116685bcd799cb3b0586da99ff6e6a0037c7f224148fbd611b767cae/django_api_forms-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1f2105f547a2f9f1dc08eb441fbcae50", "sha256": "652b7cb348e5848066d81f3fc42cd95def46fd01ab349872bd378fa55505c08d"}, "downloads": -1, "filename": "django-api-forms-0.8.0.tar.gz", "has_sig": false, "md5_digest": "1f2105f547a2f9f1dc08eb441fbcae50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10903, "upload_time": "2020-05-05T09:10:12", "upload_time_iso_8601": "2020-05-05T09:10:12.740884Z", "url": "https://files.pythonhosted.org/packages/a5/fd/66c98120544d52f59a18270141cd57cdcabae50ee7d8905c5c1d1b65aa5e/django-api-forms-0.8.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:39 2020"}