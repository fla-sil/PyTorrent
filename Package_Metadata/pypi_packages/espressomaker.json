{"info": {"author": "Raul Morales Delgado", "author_email": "rmoralesdelgado@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Programming Language :: Python :: 3"], "description": "<p align=\"center\">\n    <a href=\"https://pypi.org/project/espressomaker/\" alt=\"PyPI version\">\n        <img src=\"https://img.shields.io/pypi/v/espressomaker\" /></a>\n    <a href=\"https://github.com/rmoralesdelgado/espressomaker/issues\" alt=\"GitHub: Open Issues\">\n        <img src=\"https://img.shields.io/github/issues/rmoralesdelgado/espressomaker\" /></a>\n    <a href=\"https://github.com/rmoralesdelgado/espressomaker/blob/master/LICENSE\" alt=\"License: MIT\">\n        <img src=\"https://img.shields.io/badge/License-MIT-yellow.svg\" /></a>\n    <a href=\"https://github.com/psf/black\" alt=\"Code style: black\">\n        <img src=\"https://img.shields.io/badge/code%20style-black-000000.svg\" /></a>\n</p>\n\n# espressomaker\n\n`espressomaker` is a Python 3 module that provides a context manager, among other functionalities, to modify the power management settings on a MacOS X system so that lengthy tasks (e.g. a machine learning training algorithm) can run uninterruptedly \u2014 without your Mac going to sleep.\n\nMore specifically, `espressomaker` is a wrapper of `caffeinate`, a shell command in MacOS X distributions that allows users to alter the system's sleep behavior. In this sense, `espressomaker` runs `caffeinate` subprocesses from the Python 3 interpreter or the IPython kernel from where it was imported and allows to control your Mac's sleep settings through a simple and intuitive set of Python commands.\n\n<h2>Contents<span class=\"tocSkip\"></span></h2>\n<div class=\"toc\"><ul class=\"toc-item\"><li><span><a href=\"#1-Quick-Start\" data-toc-modified-id=\"1.-Quick-Start-1\">1. Quick Start</a></span></li><li><span><a href=\"#2-Purpose\" data-toc-modified-id=\"2.-Purpose-2\">2. Purpose</a></span></li><li><span><a href=\"#3-Installation\" data-toc-modified-id=\"3.-Installation-3\">3. Installation</a></span></li><li><span><a href=\"#4-User-guide\" data-toc-modified-id=\"4.-User-guide-4\">4. User guide</a></span><ul class=\"toc-item\"><li><span><a href=\"#41-Working-principle\" data-toc-modified-id=\"4.1-Working-principle-4.1\">4.1 Working principle</a></span></li><li><span><a href=\"#42-Importing-the-module\" data-toc-modified-id=\"4.2-Importing-the-module-4.2\">4.2 Importing the module</a></span></li><li><span><a href=\"#43-Default-settings\" data-toc-modified-id=\"4.3-Default-settings-4.3\">4.3 Default settings</a></span></li><li><span><a href=\"#44-Using-the-context-manager--Espressoshot\" data-toc-modified-id=\"4.4-Using-the-context-manager-\u2014-Espresso.shot()-4.4\">4.4 Using the context manager \u2014 <code>Espresso.shot()</code></a></span></li><li><span><a href=\"#45-Manually-opening-and-closing-tabs--Espressoopentab-and-Espressoclosetab\" data-toc-modified-id=\"4.5-Manually-opening-and-closing-tabs-\u2014-Espresso.opentab()-and-Espresso.closetab()-4.5\">4.5 Manually opening and closing tabs \u2014 <code>Espresso.opentab()</code> and <code>Espresso.closetab()</code></a></span></li><li><span><a href=\"#46-Checking-the-tabs--Espressocheck\" data-toc-modified-id=\"4.6-Checking-the-tabs-\u2014-Espresso.check()-4.6\">4.6 Checking the tabs \u2014 <code>Espresso.check()</code></a></span></li><li><span><a href=\"#47-Killing-all-caffeinate-processes--Espressokillall\" data-toc-modified-id=\"4.7-Killing-all-caffeinate-processes-\u2014-Espresso.killall()-4.7\">4.7 Killing all <code>caffeinate</code> processes \u2014 <code>Espresso.killall()</code></a></span></li></ul></li></ul></div>\n\n## 1. Quick Start\n\nTo install `espressomaker`, run the following on your Terminal:\n```bash\n$ pip install espressomaker\n```\n\nTo use `espressomaker` as a context manager for a block of code, run on a Python 3 interpreter or an IPython kernel:\n```python\nfrom espressomaker import Espresso\n\nwith Espresso.shot():\n    function_1()\n    function_2()\n    ...\n```\n\nThe indented code will be run using the context manager of `espressomaker`, `Espresso.shot()`. While this code is running, your Mac won't go to sleep.\n\n## 2. Purpose\n\n`espressomaker` provides a Python 3 module that prevents your Mac from sleep when you are running lengthy tasks \u2014 blocks of code that take a long time to finish.\n\nMany applications that run on Python may take hours to finish, like machine learning training algorithms. If a task is actively running on a Python 3 interpreter \u2014 e.g. a Python script \u2014 or an iPython kernel \u2014 e.g. a Jupyter notebook \u2014\u00a0and the system goes to sleep, the running processes will be interrupted and all the progress related to that block of code will be lost. \n\nTo avoid that, `espressomaker` provides a handful of functionalities, including a useful context manager to run blocks of code. The context manager functionality, provided in `Espresso` \u2014 a module of `espressomaker` \u2014, will allow you to temporarily change the power management settings of your Mac while the indented block of code is running. Once the task is done, the settings will return to its default state.\n\n>`espressomaker` is a package that intends to facilitate dealing with lengthy Python tasks such that the user can, in a single line of code, forget about dealing with interrupted processes.\n\n## 3. Installation\n\nTo install `espressomaker`, run on your terminal:\n```bash\n$ pip install espressomaker\n```\n\nYou can find the package's PyPI link [here](https://pypi.org/project/espressomaker/).\n\n**Troubleshooting**\n\nThe installation process using `pip` should be uneventful. After the installation, the package should be located at:\n* `/Users/<your_username>/.local/lib/pythonX.Y/site-packages/`, if you use `pip` as the default package manager; or,\n* `/Users/<your_username>/anaconda3/lib/pythonX.Y/site-packages/`, if you use `conda` as a package manager;\n\nwhere X.Y is your current Python version (root environment). You can check if these directories are considered by Python's system's path by running:\n```python\nimport sys\nsys.path\n```\n\nHowever, if when importing a `ModuleNotFoundError` occurs, it could be possible that your current interpreter/kernel is **not** including the directory where `espressomaker` is installed at. Although this is unlikely, you can find the current location of the package by running on your Terminal:\n```bash\n$ find /Users/ -type d -name 'espressomaker' 2>/dev/null | grep \".*python.*\"\n```\n\nThe previous command will search for a folder called `espressomaker` in the `Users/` directory and only print the matches that belong to a `python` subdirectory. If the directory found is not on `sys.path`, you can manually add it to Python's path using:\n```python\nsys.path.append('<path>')\n```\n\n## 4. User guide\n\n### 4.1 Working principle\n\nThe `Espresso` module from `espressomaker` allows you to run `caffeinate` subprocesses \u2014 child processes of your current Python interpreter or IPython kernel. `caffeinate` is a shell command available on MacOS distributions that allows to modify the power management settings of your system by creating assertions. In this context, `caffeinate` is used to prevent your MacOS system from sleeping while a task is being computed.\n\nThe `Espresso` module offers two ways to run `caffeinate` subprocesses:\n1. As a context manager for a task \u2014 a block of code \u2014, using the `shot()` method, or;\n1. As a manual method call, using the `opentab()` and `closetab()` methods (i.e. the user defines when to start running the subprocess and when to finish it).\n\nIn either way, your Mac will not sleep until the task is completed \u2014 when using the context manager mode \u2014 or until you manually *close the tab*.\n\n### 4.2 Importing the module\n\nTo import the functionalities of `espressomaker` to Python, run:\n```python\nfrom espressomaker import Espresso\n```\n\n### 4.3 Default settings\n\nThe `Espresso` module has two class-level settings: `verbose` and `display_on`. The `verbose` parameter enables messages related to the status of the module when using the `shot()` context manager. The `display_on` parameter determines whether the display of your Mac will remain on (if `display_on = True`) or if it will turn off (`display_on = False`) as per the current settings of your Mac.\n\nThe default class-level settings can be retrieved using `config()`:\n```python\n>>> Espresso.config()\nEspresso(verbose = True, display_on = False)\n```\n\nTo change these class-level settings \u2014 to set new default settings \u2014, just pass in the parameters you want to change into `Espresso.config()`:\n```python\n>>> Espresso.config(display_on = True)\nEspresso(verbose = True, display_on = True)\n```\n\n**Safety note**\n\nFor safety reasons, `espressomaker` only works when your Mac is connected to AC power \u2014 it will not work if you are using battery power. \n\n### 4.4 Using the context manager \u2014 `Espresso.shot()`\n\nOne of the main advantages of the `Espresso` module is that it allows to run a task \u2014 a block of code \u2014 using a context manager. The context manager enables the `caffeinate` functionality \u2014 instantiates the subprocess \u2014\u00a0for the code inside it and then closes the process \u2014\u00a0kills the subprocess.\n\nTo use it, run:\n```python\n>>> with Espresso.shot(display_on = True):\n...     function_1()\n...     function_2()\n        ...\n```\n\nAs shown above, you can always override the `display_on` default settings by passing in a new value for that argument, which will only work for that instance call.\n\n### 4.5 Manually opening and closing tabs \u2014 `Espresso.opentab()` and `Espresso.closetab()`\n\n`Espresso` also provides a manual way to instantiate a \"caffeinate\" subprocess in the current interpreter or kernel. The `opentab()` and `closetab()` methods allow you to instantiate and kill the `caffeinate` subprocess, respectively. \n```python\n>>> Espresso.opentab()\n[espressomaker] Espresso tab opened on Mon, 23/Sep/2019 10:38:46 (display_on = False).\n\n# Your work\n\n>>> Espresso.closetab()\n[espressomaker] Espresso tab closed.\n```\n\nThe `Espresso` module will prevent you from opening more than one `caffeinate` subprocess for the same parent process \u2014 e.g. the Python interpreter, the IPython kernel from which you are running `espressomaker`. Moreover, you can always run `espressomaker` in multiple interpreters and kernels and check which `caffeinate` subprocess belongs to your current interpreter or kernel by running `Espresso.check()`.\n\n**Warning**\n\nWhile opening more than one `caffeinate` subprocess from a single parent process using `espressomaker` is *not* possible, if it occurs you might **not** be able to use `closetab()` to close all the running subprocesses. When you kill the parent process \u2014 e.g. close the Jupyter notebook, restart the kernel \u2014 all the child processes are killed along with it. If for some reason you suspect a `caffeinate` process is still running, you can try to pinpoint it using `Espresso.check()`, or you can kill all the `caffeinate` processes in your Mac running `Espresso.killall()`.\n\n### 4.6 Checking the tabs \u2014 `Espresso.check()`\n\n`Espresso.check()` allows you to retrieve a list of all the running `caffeinate` processes in your Mac. If you have one running in your current interpreter or kernel, it will be explicitly indicated:\n```python\n>>> Espresso.check()\n[espressomaker] The following \"caffeinate\" processes were found:\nUSER               PID COMMAND\n<your_username>  62900 caffeinate -is -w 5531 (This kernel)\n```\n\n### 4.7 Killing all `caffeinate` processes \u2014 `Espresso.killall()`\n\nThe `killall()` method will kill **all** `caffeinate` processes running in the system. Before running it, be sure that you don't have other `caffeinate` active processes that you might need.\n\nFormatting (GitHub flavor) passed and completed.\n\n<h2>Release History</h2>\n\n### v0.1a1\n\nBasic skeleton of the package ready for shipping to TestPyPI.\n\n### v0.1a2\n\n* Automated file exporting from .ipynb to .py and standardized the formatting.\n* Automated file exporting from .ipynb to .md and standardized the formatting.\n* Improved variable handling on instance methods.\n* Added a message for the user to recognize the current kernel when using opentabs().\n* Added debugging tracers for all private methods.\n* Finished class- and static- methods docstrings.\n* Updated setup.py.\n\n### v0.1b1\n\n* Improved HISTORY.md title formatting.\n* Updated \"classifiers\" of setup.py.\n* Changed opentabs() classmethod to check() in espresso.py.\n* Successfully ran manual tests in all APIs.\n\n### v0.1b2\n\n* Added PyPI version and GitHub issues badges to README.md.\n* Ran installation test using `$ pip install espressomaker`.\n* Added config() classmethod to allow user modify Espresso class-level settings. Returns current settings.\n* Added parameters to shot() and opentab() to allow user override \"display_on\" class-level setting.\n* Repositioned status retrieval in closetab() classmethod.\n* Added return message for killall() staticmethod.\n* Added atexit.register call to closetab() (to be used when using opentab() in a .py script and not using closetab() at the end; however, killing the parent process should kill the \"caffeinate\" subprocess anyway).\n* Finished User Guide in README.md.\n\n### v0.1rc1\n* Corrected numbering and hrefs on README.md to work correctly on GitHub.\n\n### TODO\n\n* Finish unittest.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rmoralesdelgado/espressomaker", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "espressomaker", "package_url": "https://pypi.org/project/espressomaker/", "platform": "", "project_url": "https://pypi.org/project/espressomaker/", "project_urls": {"Homepage": "https://github.com/rmoralesdelgado/espressomaker"}, "release_url": "https://pypi.org/project/espressomaker/0.1rc1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Allows to temporarily modify the power management settings on a MacOS to run processes uninterruptedly.", "version": "0.1rc1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n    <a href=\"https://pypi.org/project/espressomaker/\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23e9c715fd8413cd898778fdd4c8673c54a59ddf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f657370726573736f6d616b6572\"></a>\n    <a href=\"https://github.com/rmoralesdelgado/espressomaker/issues\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3182b7df72e3502d212e41151d80bf4edb25fd41/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f726d6f72616c657364656c6761646f2f657370726573736f6d616b6572\"></a>\n    <a href=\"https://github.com/rmoralesdelgado/espressomaker/blob/master/LICENSE\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n    <a href=\"https://github.com/psf/black\" rel=\"nofollow\">\n        <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n</p>\n<h1>espressomaker</h1>\n<p><code>espressomaker</code> is a Python 3 module that provides a context manager, among other functionalities, to modify the power management settings on a MacOS X system so that lengthy tasks (e.g. a machine learning training algorithm) can run uninterruptedly \u2014 without your Mac going to sleep.</p>\n<p>More specifically, <code>espressomaker</code> is a wrapper of <code>caffeinate</code>, a shell command in MacOS X distributions that allows users to alter the system's sleep behavior. In this sense, <code>espressomaker</code> runs <code>caffeinate</code> subprocesses from the Python 3 interpreter or the IPython kernel from where it was imported and allows to control your Mac's sleep settings through a simple and intuitive set of Python commands.</p>\n<h2>Contents<span class=\"tocSkip\"></span></h2>\n<div><ul><li><span><a href=\"#1-Quick-Start\" rel=\"nofollow\">1. Quick Start</a></span></li><li><span><a href=\"#2-Purpose\" rel=\"nofollow\">2. Purpose</a></span></li><li><span><a href=\"#3-Installation\" rel=\"nofollow\">3. Installation</a></span></li><li><span><a href=\"#4-User-guide\" rel=\"nofollow\">4. User guide</a></span><ul><li><span><a href=\"#41-Working-principle\" rel=\"nofollow\">4.1 Working principle</a></span></li><li><span><a href=\"#42-Importing-the-module\" rel=\"nofollow\">4.2 Importing the module</a></span></li><li><span><a href=\"#43-Default-settings\" rel=\"nofollow\">4.3 Default settings</a></span></li><li><span><a href=\"#44-Using-the-context-manager--Espressoshot\" rel=\"nofollow\">4.4 Using the context manager \u2014 <code>Espresso.shot()</code></a></span></li><li><span><a href=\"#45-Manually-opening-and-closing-tabs--Espressoopentab-and-Espressoclosetab\" rel=\"nofollow\">4.5 Manually opening and closing tabs \u2014 <code>Espresso.opentab()</code> and <code>Espresso.closetab()</code></a></span></li><li><span><a href=\"#46-Checking-the-tabs--Espressocheck\" rel=\"nofollow\">4.6 Checking the tabs \u2014 <code>Espresso.check()</code></a></span></li><li><span><a href=\"#47-Killing-all-caffeinate-processes--Espressokillall\" rel=\"nofollow\">4.7 Killing all <code>caffeinate</code> processes \u2014 <code>Espresso.killall()</code></a></span></li></ul></li></ul></div>\n<h2>1. Quick Start</h2>\n<p>To install <code>espressomaker</code>, run the following on your Terminal:</p>\n<pre>$ pip install espressomaker\n</pre>\n<p>To use <code>espressomaker</code> as a context manager for a block of code, run on a Python 3 interpreter or an IPython kernel:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">espressomaker</span> <span class=\"kn\">import</span> <span class=\"n\">Espresso</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">shot</span><span class=\"p\">():</span>\n    <span class=\"n\">function_1</span><span class=\"p\">()</span>\n    <span class=\"n\">function_2</span><span class=\"p\">()</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The indented code will be run using the context manager of <code>espressomaker</code>, <code>Espresso.shot()</code>. While this code is running, your Mac won't go to sleep.</p>\n<h2>2. Purpose</h2>\n<p><code>espressomaker</code> provides a Python 3 module that prevents your Mac from sleep when you are running lengthy tasks \u2014 blocks of code that take a long time to finish.</p>\n<p>Many applications that run on Python may take hours to finish, like machine learning training algorithms. If a task is actively running on a Python 3 interpreter \u2014 e.g. a Python script \u2014 or an iPython kernel \u2014 e.g. a Jupyter notebook \u2014\u00a0and the system goes to sleep, the running processes will be interrupted and all the progress related to that block of code will be lost.</p>\n<p>To avoid that, <code>espressomaker</code> provides a handful of functionalities, including a useful context manager to run blocks of code. The context manager functionality, provided in <code>Espresso</code> \u2014 a module of <code>espressomaker</code> \u2014, will allow you to temporarily change the power management settings of your Mac while the indented block of code is running. Once the task is done, the settings will return to its default state.</p>\n<blockquote>\n<p><code>espressomaker</code> is a package that intends to facilitate dealing with lengthy Python tasks such that the user can, in a single line of code, forget about dealing with interrupted processes.</p>\n</blockquote>\n<h2>3. Installation</h2>\n<p>To install <code>espressomaker</code>, run on your terminal:</p>\n<pre>$ pip install espressomaker\n</pre>\n<p>You can find the package's PyPI link <a href=\"https://pypi.org/project/espressomaker/\" rel=\"nofollow\">here</a>.</p>\n<p><strong>Troubleshooting</strong></p>\n<p>The installation process using <code>pip</code> should be uneventful. After the installation, the package should be located at:</p>\n<ul>\n<li><code>/Users/&lt;your_username&gt;/.local/lib/pythonX.Y/site-packages/</code>, if you use <code>pip</code> as the default package manager; or,</li>\n<li><code>/Users/&lt;your_username&gt;/anaconda3/lib/pythonX.Y/site-packages/</code>, if you use <code>conda</code> as a package manager;</li>\n</ul>\n<p>where X.Y is your current Python version (root environment). You can check if these directories are considered by Python's system's path by running:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span>\n</pre>\n<p>However, if when importing a <code>ModuleNotFoundError</code> occurs, it could be possible that your current interpreter/kernel is <strong>not</strong> including the directory where <code>espressomaker</code> is installed at. Although this is unlikely, you can find the current location of the package by running on your Terminal:</p>\n<pre>$ find /Users/ -type d -name <span class=\"s1\">'espressomaker'</span> <span class=\"m\">2</span>&gt;/dev/null <span class=\"p\">|</span> grep <span class=\"s2\">\".*python.*\"</span>\n</pre>\n<p>The previous command will search for a folder called <code>espressomaker</code> in the <code>Users/</code> directory and only print the matches that belong to a <code>python</code> subdirectory. If the directory found is not on <code>sys.path</code>, you can manually add it to Python's path using:</p>\n<pre><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"s1\">'&lt;path&gt;'</span><span class=\"p\">)</span>\n</pre>\n<h2>4. User guide</h2>\n<h3>4.1 Working principle</h3>\n<p>The <code>Espresso</code> module from <code>espressomaker</code> allows you to run <code>caffeinate</code> subprocesses \u2014 child processes of your current Python interpreter or IPython kernel. <code>caffeinate</code> is a shell command available on MacOS distributions that allows to modify the power management settings of your system by creating assertions. In this context, <code>caffeinate</code> is used to prevent your MacOS system from sleeping while a task is being computed.</p>\n<p>The <code>Espresso</code> module offers two ways to run <code>caffeinate</code> subprocesses:</p>\n<ol>\n<li>As a context manager for a task \u2014 a block of code \u2014, using the <code>shot()</code> method, or;</li>\n<li>As a manual method call, using the <code>opentab()</code> and <code>closetab()</code> methods (i.e. the user defines when to start running the subprocess and when to finish it).</li>\n</ol>\n<p>In either way, your Mac will not sleep until the task is completed \u2014 when using the context manager mode \u2014 or until you manually <em>close the tab</em>.</p>\n<h3>4.2 Importing the module</h3>\n<p>To import the functionalities of <code>espressomaker</code> to Python, run:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">espressomaker</span> <span class=\"kn\">import</span> <span class=\"n\">Espresso</span>\n</pre>\n<h3>4.3 Default settings</h3>\n<p>The <code>Espresso</code> module has two class-level settings: <code>verbose</code> and <code>display_on</code>. The <code>verbose</code> parameter enables messages related to the status of the module when using the <code>shot()</code> context manager. The <code>display_on</code> parameter determines whether the display of your Mac will remain on (if <code>display_on = True</code>) or if it will turn off (<code>display_on = False</code>) as per the current settings of your Mac.</p>\n<p>The default class-level settings can be retrieved using <code>config()</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">()</span>\n<span class=\"n\">Espresso</span><span class=\"p\">(</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">display_on</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>To change these class-level settings \u2014 to set new default settings \u2014, just pass in the parameters you want to change into <code>Espresso.config()</code>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">config</span><span class=\"p\">(</span><span class=\"n\">display_on</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">Espresso</span><span class=\"p\">(</span><span class=\"n\">verbose</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">display_on</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Safety note</strong></p>\n<p>For safety reasons, <code>espressomaker</code> only works when your Mac is connected to AC power \u2014 it will not work if you are using battery power.</p>\n<h3>4.4 Using the context manager \u2014 <code>Espresso.shot()</code></h3>\n<p>One of the main advantages of the <code>Espresso</code> module is that it allows to run a task \u2014 a block of code \u2014 using a context manager. The context manager enables the <code>caffeinate</code> functionality \u2014 instantiates the subprocess \u2014\u00a0for the code inside it and then closes the process \u2014\u00a0kills the subprocess.</p>\n<p>To use it, run:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">shot</span><span class=\"p\">(</span><span class=\"n\">display_on</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">function_1</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">function_2</span><span class=\"p\">()</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>As shown above, you can always override the <code>display_on</code> default settings by passing in a new value for that argument, which will only work for that instance call.</p>\n<h3>4.5 Manually opening and closing tabs \u2014 <code>Espresso.opentab()</code> and <code>Espresso.closetab()</code></h3>\n<p><code>Espresso</code> also provides a manual way to instantiate a \"caffeinate\" subprocess in the current interpreter or kernel. The <code>opentab()</code> and <code>closetab()</code> methods allow you to instantiate and kill the <code>caffeinate</code> subprocess, respectively.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">opentab</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">espressomaker</span><span class=\"p\">]</span> <span class=\"n\">Espresso</span> <span class=\"n\">tab</span> <span class=\"n\">opened</span> <span class=\"n\">on</span> <span class=\"n\">Mon</span><span class=\"p\">,</span> <span class=\"mi\">23</span><span class=\"o\">/</span><span class=\"n\">Sep</span><span class=\"o\">/</span><span class=\"mi\">2019</span> <span class=\"mi\">10</span><span class=\"p\">:</span><span class=\"mi\">38</span><span class=\"p\">:</span><span class=\"mi\">46</span> <span class=\"p\">(</span><span class=\"n\">display_on</span> <span class=\"o\">=</span> <span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span>\n\n<span class=\"c1\"># Your work</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">closetab</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">espressomaker</span><span class=\"p\">]</span> <span class=\"n\">Espresso</span> <span class=\"n\">tab</span> <span class=\"n\">closed</span><span class=\"o\">.</span>\n</pre>\n<p>The <code>Espresso</code> module will prevent you from opening more than one <code>caffeinate</code> subprocess for the same parent process \u2014 e.g. the Python interpreter, the IPython kernel from which you are running <code>espressomaker</code>. Moreover, you can always run <code>espressomaker</code> in multiple interpreters and kernels and check which <code>caffeinate</code> subprocess belongs to your current interpreter or kernel by running <code>Espresso.check()</code>.</p>\n<p><strong>Warning</strong></p>\n<p>While opening more than one <code>caffeinate</code> subprocess from a single parent process using <code>espressomaker</code> is <em>not</em> possible, if it occurs you might <strong>not</strong> be able to use <code>closetab()</code> to close all the running subprocesses. When you kill the parent process \u2014 e.g. close the Jupyter notebook, restart the kernel \u2014 all the child processes are killed along with it. If for some reason you suspect a <code>caffeinate</code> process is still running, you can try to pinpoint it using <code>Espresso.check()</code>, or you can kill all the <code>caffeinate</code> processes in your Mac running <code>Espresso.killall()</code>.</p>\n<h3>4.6 Checking the tabs \u2014 <code>Espresso.check()</code></h3>\n<p><code>Espresso.check()</code> allows you to retrieve a list of all the running <code>caffeinate</code> processes in your Mac. If you have one running in your current interpreter or kernel, it will be explicitly indicated:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Espresso</span><span class=\"o\">.</span><span class=\"n\">check</span><span class=\"p\">()</span>\n<span class=\"p\">[</span><span class=\"n\">espressomaker</span><span class=\"p\">]</span> <span class=\"n\">The</span> <span class=\"n\">following</span> <span class=\"s2\">\"caffeinate\"</span> <span class=\"n\">processes</span> <span class=\"n\">were</span> <span class=\"n\">found</span><span class=\"p\">:</span>\n<span class=\"n\">USER</span>               <span class=\"n\">PID</span> <span class=\"n\">COMMAND</span>\n<span class=\"o\">&lt;</span><span class=\"n\">your_username</span><span class=\"o\">&gt;</span>  <span class=\"mi\">62900</span> <span class=\"n\">caffeinate</span> <span class=\"o\">-</span><span class=\"ow\">is</span> <span class=\"o\">-</span><span class=\"n\">w</span> <span class=\"mi\">5531</span> <span class=\"p\">(</span><span class=\"n\">This</span> <span class=\"n\">kernel</span><span class=\"p\">)</span>\n</pre>\n<h3>4.7 Killing all <code>caffeinate</code> processes \u2014 <code>Espresso.killall()</code></h3>\n<p>The <code>killall()</code> method will kill <strong>all</strong> <code>caffeinate</code> processes running in the system. Before running it, be sure that you don't have other <code>caffeinate</code> active processes that you might need.</p>\n<p>Formatting (GitHub flavor) passed and completed.</p>\n<h2>Release History</h2>\n<h3>v0.1a1</h3>\n<p>Basic skeleton of the package ready for shipping to TestPyPI.</p>\n<h3>v0.1a2</h3>\n<ul>\n<li>Automated file exporting from .ipynb to .py and standardized the formatting.</li>\n<li>Automated file exporting from .ipynb to .md and standardized the formatting.</li>\n<li>Improved variable handling on instance methods.</li>\n<li>Added a message for the user to recognize the current kernel when using opentabs().</li>\n<li>Added debugging tracers for all private methods.</li>\n<li>Finished class- and static- methods docstrings.</li>\n<li>Updated setup.py.</li>\n</ul>\n<h3>v0.1b1</h3>\n<ul>\n<li>Improved HISTORY.md title formatting.</li>\n<li>Updated \"classifiers\" of setup.py.</li>\n<li>Changed opentabs() classmethod to check() in espresso.py.</li>\n<li>Successfully ran manual tests in all APIs.</li>\n</ul>\n<h3>v0.1b2</h3>\n<ul>\n<li>Added PyPI version and GitHub issues badges to README.md.</li>\n<li>Ran installation test using <code>$ pip install espressomaker</code>.</li>\n<li>Added config() classmethod to allow user modify Espresso class-level settings. Returns current settings.</li>\n<li>Added parameters to shot() and opentab() to allow user override \"display_on\" class-level setting.</li>\n<li>Repositioned status retrieval in closetab() classmethod.</li>\n<li>Added return message for killall() staticmethod.</li>\n<li>Added atexit.register call to closetab() (to be used when using opentab() in a .py script and not using closetab() at the end; however, killing the parent process should kill the \"caffeinate\" subprocess anyway).</li>\n<li>Finished User Guide in README.md.</li>\n</ul>\n<h3>v0.1rc1</h3>\n<ul>\n<li>Corrected numbering and hrefs on README.md to work correctly on GitHub.</li>\n</ul>\n<h3>TODO</h3>\n<ul>\n<li>Finish unittest.</li>\n</ul>\n\n          </div>"}, "last_serial": 6139211, "releases": {"0.1b1": [{"comment_text": "", "digests": {"md5": "0d1dcd45ef22468d359ca5273da07ff6", "sha256": "f0819d5c90dff0e0124f21edd3f9f8f29d084d877ccd8fd97fcfa84fc713f63a"}, "downloads": -1, "filename": "espressomaker-0.1b1-py3-none-any.whl", "has_sig": false, "md5_digest": "0d1dcd45ef22468d359ca5273da07ff6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8074, "upload_time": "2019-09-23T09:41:38", "upload_time_iso_8601": "2019-09-23T09:41:38.582782Z", "url": "https://files.pythonhosted.org/packages/6f/82/e8e62ec368cbf7b8c43bb4906bbe762143a4d8470e0cdd7bd675d07b136c/espressomaker-0.1b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "361e88b2ab9fcfed440cae004143e035", "sha256": "37a163f511602afc7c022a245753e94b75a2413ed89cb36f606423cb6b39f10a"}, "downloads": -1, "filename": "espressomaker-0.1b1.tar.gz", "has_sig": false, "md5_digest": "361e88b2ab9fcfed440cae004143e035", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 6902, "upload_time": "2019-09-23T09:41:47", "upload_time_iso_8601": "2019-09-23T09:41:47.121181Z", "url": "https://files.pythonhosted.org/packages/65/85/4629f3ee6c0e0f10d962e97f5639e5115de874b63edfb74c15cd809a0869/espressomaker-0.1b1.tar.gz", "yanked": false}], "0.1b2": [{"comment_text": "", "digests": {"md5": "9c156b48359b1ffc602b91f9c209dafb", "sha256": "f5780e88e545e60ec0b9aa01fbe70f2717265adbad740d1f2302630d6956102e"}, "downloads": -1, "filename": "espressomaker-0.1b2-py3-none-any.whl", "has_sig": false, "md5_digest": "9c156b48359b1ffc602b91f9c209dafb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10078, "upload_time": "2019-09-26T09:38:16", "upload_time_iso_8601": "2019-09-26T09:38:16.082291Z", "url": "https://files.pythonhosted.org/packages/c4/35/0ae951ca7ae9e6445e274961ed8a394230d5147b5d7c92090cba0f577201/espressomaker-0.1b2-py3-none-any.whl", "yanked": false}], "0.1rc1": [{"comment_text": "", "digests": {"md5": "9e830ba1a8b12397879b9206564fd55b", "sha256": "51f779136b7c28ee18fa0201f0172819eeddeb7dc4113c3bfa34521e4af4dd18"}, "downloads": -1, "filename": "espressomaker-0.1rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e830ba1a8b12397879b9206564fd55b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10288, "upload_time": "2019-11-14T22:31:13", "upload_time_iso_8601": "2019-11-14T22:31:13.030810Z", "url": "https://files.pythonhosted.org/packages/17/51/d5b60d50016601688de5a372f90814fb6e4df4ac74bdeefd896687d7583e/espressomaker-0.1rc1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e830ba1a8b12397879b9206564fd55b", "sha256": "51f779136b7c28ee18fa0201f0172819eeddeb7dc4113c3bfa34521e4af4dd18"}, "downloads": -1, "filename": "espressomaker-0.1rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "9e830ba1a8b12397879b9206564fd55b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 10288, "upload_time": "2019-11-14T22:31:13", "upload_time_iso_8601": "2019-11-14T22:31:13.030810Z", "url": "https://files.pythonhosted.org/packages/17/51/d5b60d50016601688de5a372f90814fb6e4df4ac74bdeefd896687d7583e/espressomaker-0.1rc1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:36 2020"}