{"info": {"author": "S\u0142awomir G\u00f3rawski", "author_email": "slawomir@ulam.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Async Responses\n\n[![Documentation Status](https://readthedocs.org/projects/async-responses/badge/?version=latest)](http://async-responses.readthedocs.io/en/latest/?badge=latest) [![codecov](https://codecov.io/gh/ulamlabs/async-responses/branch/master/graph/badge.svg)](https://codecov.io/gh/ulamlabs/async-responses) ![Python package](https://github.com/ulamlabs/async-responses/workflows/Python%20package/badge.svg) ![Upload Python Package](https://github.com/ulamlabs/async-responses/workflows/Upload%20Python%20Package/badge.svg)\n\nAsync Responses is a library providing an easy way to mock aiohttp responses inspired by [aioresponses](https://github.com/pnuckowski/aioresponses).\n\n## Installation\n\nLibrary is available on PyPi, you can simply install it using `pip`.\n\n```shell\n$ pip install async-responses\n```\n\n## Usage\n### As an instance\n```python\nar = AsyncResponses()\nar.get(...)\n```\n\n### As a context manager\n```python\nwith AsyncResponses() as ar:\n    ar.get(...)\n```\n\n### With dict as handler\nPassing dict as `handler` argument to async-responses would result in it being\nreturned as a JSON payload.\n\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    ar = AsyncResponses()\n    payload = {'status': 'ok'}\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == payload\n```\n\n### With exception as handler\nCalling Async Responses with an exception as `handler` argument would result in\nit being raised.\n\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\nimport pytest\n\n\nasync def test_response():\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=ZeroDivisionError)\n    with pytest.raises(ZeroDivisionError):\n        async with aiohttp.ClientSession() as session:\n            await session.get('http://mock.url/v1/status')\n```\n\n### With string as handler\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\nasync def test_response():\n    ar = AsyncResponses()\n    payload = 'ok'\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.text() == payload\n```\n\n### With callable as handler\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    def handler(data, **kwargs):\n        return {'status': 'ok'}\n\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=payload)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == {'status': 'ok'}\n```\n\n### With a custom status code\n```python\nimport aiohttp\nfrom async_responses import AsyncResponses\n\n\nasync def test_response():\n    payload = {'status': 'not good'}\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler=payload, status=500)\n    async with aiohttp.ClientSession() as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert response.status == 500\n        assert await response.json() == payload\n```\n\n### With a custom response class\nasync-responses will make use of a response class passed as an argument to \nClientSession, so you can use things like custom JSON serializer.\n\n```python\nimport aiohttp\n\nasync def test_response():\n    class CustomResponse(aiohttp.ClientResponse):\n        async def json(self, *args, **kwargs):\n            return {'hello': 'world'}\n\n    ar = AsyncResponses()\n    ar.get('http://mock.url', '/v1/status', handler='')\n    async with aiohttp.ClientSession(response_class=CustomResponse) as session:\n        response = await session.get('http://mock.url/v1/status')\n        assert await response.json() == {'hello': 'world'}\n        assert isinstance(response, CustomResponse)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://ulam.io/", "keywords": "aiohttp,testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "async-responses", "package_url": "https://pypi.org/project/async-responses/", "platform": "", "project_url": "https://pypi.org/project/async-responses/", "project_urls": {"Documentation": "https://async-responses.readthedocs.io/en/latest/", "Homepage": "https://ulam.io/", "Repository": "https://github.com/ulamlabs/async-responses"}, "release_url": "https://pypi.org/project/async-responses/1.0.0/", "requires_dist": ["aiohttp (>=3.3.1)"], "requires_python": ">=3.7,<4.0", "summary": "aiohttp testing library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Async Responses</h1>\n<p><a href=\"http://async-responses.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a3b77fb282307b795e61244f8229ffd51abe78c4/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6173796e632d726573706f6e7365732f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://codecov.io/gh/ulamlabs/async-responses\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/162d8cecd439b972d08cae296fc7ab905a60d81f/68747470733a2f2f636f6465636f762e696f2f67682f756c616d6c6162732f6173796e632d726573706f6e7365732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <img alt=\"Python package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/17e72fc1a0dab82da7d6adeebc0ade6d1bd2f4f0/68747470733a2f2f6769746875622e636f6d2f756c616d6c6162732f6173796e632d726573706f6e7365732f776f726b666c6f77732f507974686f6e2532307061636b6167652f62616467652e737667\"> <img alt=\"Upload Python Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d4090f58a199969652bdbd7fda4afe1aa1f594ad/68747470733a2f2f6769746875622e636f6d2f756c616d6c6162732f6173796e632d726573706f6e7365732f776f726b666c6f77732f55706c6f6164253230507974686f6e2532305061636b6167652f62616467652e737667\"></p>\n<p>Async Responses is a library providing an easy way to mock aiohttp responses inspired by <a href=\"https://github.com/pnuckowski/aioresponses\" rel=\"nofollow\">aioresponses</a>.</p>\n<h2>Installation</h2>\n<p>Library is available on PyPi, you can simply install it using <code>pip</code>.</p>\n<pre>$ pip install async-responses\n</pre>\n<h2>Usage</h2>\n<h3>As an instance</h3>\n<pre><span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n<span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h3>As a context manager</h3>\n<pre><span class=\"k\">with</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">ar</span><span class=\"p\">:</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n</pre>\n<h3>With dict as handler</h3>\n<p>Passing dict as <code>handler</code> argument to async-responses would result in it being\nreturned as a JSON payload.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_responses</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncResponses</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'ok'</span><span class=\"p\">}</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">payload</span>\n</pre>\n<h3>With exception as handler</h3>\n<p>Calling Async Responses with an exception as <code>handler</code> argument would result in\nit being raised.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_responses</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncResponses</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"ne\">ZeroDivisionError</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n            <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n</pre>\n<h3>With string as handler</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_responses</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncResponses</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"s1\">'ok'</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">payload</span>\n</pre>\n<h3>With callable as handler</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_responses</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncResponses</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'ok'</span><span class=\"p\">}</span>\n\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'ok'</span><span class=\"p\">}</span>\n</pre>\n<h3>With a custom status code</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n<span class=\"kn\">from</span> <span class=\"nn\">async_responses</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncResponses</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"n\">payload</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'status'</span><span class=\"p\">:</span> <span class=\"s1\">'not good'</span><span class=\"p\">}</span>\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"n\">payload</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">==</span> <span class=\"mi\">500</span>\n        <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"n\">payload</span>\n</pre>\n<h3>With a custom response class</h3>\n<p>async-responses will make use of a response class passed as an argument to\nClientSession, so you can use things like custom JSON serializer.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">aiohttp</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">test_response</span><span class=\"p\">():</span>\n    <span class=\"k\">class</span> <span class=\"nc\">CustomResponse</span><span class=\"p\">(</span><span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientResponse</span><span class=\"p\">):</span>\n        <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">json</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n\n    <span class=\"n\">ar</span> <span class=\"o\">=</span> <span class=\"n\">AsyncResponses</span><span class=\"p\">()</span>\n    <span class=\"n\">ar</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url'</span><span class=\"p\">,</span> <span class=\"s1\">'/v1/status'</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">)</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">aiohttp</span><span class=\"o\">.</span><span class=\"n\">ClientSession</span><span class=\"p\">(</span><span class=\"n\">response_class</span><span class=\"o\">=</span><span class=\"n\">CustomResponse</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n        <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://mock.url/v1/status'</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"k\">await</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">{</span><span class=\"s1\">'hello'</span><span class=\"p\">:</span> <span class=\"s1\">'world'</span><span class=\"p\">}</span>\n        <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">,</span> <span class=\"n\">CustomResponse</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7074233, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "b329a6e4ec944f4640dba276f83558af", "sha256": "e6c9fe6f38b634c63eb79b6148a31e9a852f0ab77790d7549205aa89fa7f90a7"}, "downloads": -1, "filename": "async_responses-1.0.0_2-py3-none-any.whl", "has_sig": false, "md5_digest": "b329a6e4ec944f4640dba276f83558af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5322, "upload_time": "2020-04-22T06:25:33", "upload_time_iso_8601": "2020-04-22T06:25:33.031680Z", "url": "https://files.pythonhosted.org/packages/24/46/ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f/async_responses-1.0.0_2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95b50f5e5824e17cd709a75e3ab15171", "sha256": "7669ea9765aba429406f61ec196b7cf016448e1285dc3adb8431d7182ce92055"}, "downloads": -1, "filename": "async-responses-1.0.0_2.tar.gz", "has_sig": false, "md5_digest": "95b50f5e5824e17cd709a75e3ab15171", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5339, "upload_time": "2020-04-22T06:25:34", "upload_time_iso_8601": "2020-04-22T06:25:34.284574Z", "url": "https://files.pythonhosted.org/packages/f3/4d/42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4/async-responses-1.0.0_2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b329a6e4ec944f4640dba276f83558af", "sha256": "e6c9fe6f38b634c63eb79b6148a31e9a852f0ab77790d7549205aa89fa7f90a7"}, "downloads": -1, "filename": "async_responses-1.0.0_2-py3-none-any.whl", "has_sig": false, "md5_digest": "b329a6e4ec944f4640dba276f83558af", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 5322, "upload_time": "2020-04-22T06:25:33", "upload_time_iso_8601": "2020-04-22T06:25:33.031680Z", "url": "https://files.pythonhosted.org/packages/24/46/ab394d59d743220a681b77d231b3daee055af4200bc795ff124531bf017f/async_responses-1.0.0_2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "95b50f5e5824e17cd709a75e3ab15171", "sha256": "7669ea9765aba429406f61ec196b7cf016448e1285dc3adb8431d7182ce92055"}, "downloads": -1, "filename": "async-responses-1.0.0_2.tar.gz", "has_sig": false, "md5_digest": "95b50f5e5824e17cd709a75e3ab15171", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 5339, "upload_time": "2020-04-22T06:25:34", "upload_time_iso_8601": "2020-04-22T06:25:34.284574Z", "url": "https://files.pythonhosted.org/packages/f3/4d/42303987b6c9a9e861d1d9b219289cc61e387613dd84af2f0228ab0a29a4/async-responses-1.0.0_2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:41 2020"}