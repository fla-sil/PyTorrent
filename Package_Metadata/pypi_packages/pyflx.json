{"info": {"author": "DevCartel", "author_email": "support@devcartel.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Build Tools"], "description": "# PyFLX\n[![version](https://img.shields.io/pypi/v/pyflx.svg)](https://pypi.org/project/pyflx)\n[![pyversion](https://img.shields.io/pypi/pyversions/pyflx.svg)](#)\n[![platform](https://img.shields.io/badge/platform-linux|%20win-lightgray.svg)](#)\n[![license](https://img.shields.io/pypi/l/pyflx.svg)](https://github.com/devcartel/pyflx/blob/master/LICENSE.txt)\n[![downloads](https://img.shields.io/pypi/dm/pyflx.svg)](https://pypi.org/project/pyflx)\n[![Sponsor](https://img.shields.io/badge/Sponsor%20PyFLX-%2419.99%2Fmonth-orange.svg?logo=paypal&style=social)](https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&hosted_button_id=538VN8VH7S744)\n\nProvides Python market data API access to FlexTrade SYM. PyFLX has two market data Python classes - **Symlistener** (client) for consuming market data from FlexTrade market data server and **Symproxy** (publisher or feeder) for publising custom tick data to FlexTrade market data server.\n\n<p align=\"center\">\n    <img src=\"https://user-images.githubusercontent.com/3415706/62553316-52319900-b899-11e9-9404-1069b0dbe683.png\" alt=\"application\" width=\"800\"/>\n</p>\n\n## Installation\nInstall from [PyPI](https://pypi.org/project/pyflx) using `pip`:\n\n    pip install pyflx\n\n## Example\n```python\nimport pyflx\nimport time\n\ndef onData(symbol, data={}):\n    print(\"[onData] symbol:{}, data:{}\".format(symbol, data))\n\nsl = pyflx.Symlistener()\nsl.onData(onData)\nwhile True:\n    try:\n        if sl.connect('192.168.1.123', 7600):\n            sl.subscribe('XAU/USD')\n            sl.loop()\n        time.sleep(5)\n    except KeyboardInterrupt:\n        exit(0)\n    except Exception as e:\n        print(e)\n```\n\nSee `symlistener.py` and `symproxy.py` for example codes.\n\n## API\n### Symlistener Class\n__pyflx.Symlistener()__  \nCreate an instance of Symlistener client.\n\n    >> sl = pyflx.Symlistener()\n\n__Symlistener.connect(_ip_address_, _port_)__  \n_ip_address: str_   \n_port: int_  \n_\u27a5return: bool_  \nConnect to a SYM server on a specified port number. Return `true` if successful or `false` if not able to connect to the server.\n\n    >> sl.connect('192.168.1.123', 7600)\n\n__Symlistener.subscribe(_symbol_)__  \n_symbol: str_   \nSubscribe to market data of the symbol.\n\n    >> sl.subscribe('XAU/USD')\n\n__Symlistener.subscribeAll()__    \nSubscribe to market data of all symbols.\n\n    >> sl.subscribeAll()\n\n__Symlistener.unsubscribe(_symbol_)__  \n_symbol: str_   \nUnsubscribe to market data of the symbol.\n\n    >> sl.unsubscribe('XAU/USD')\n\n__Symlistener.subscribeAll()__  \nUnsubscribe to market data of all symbols.\n\n    >> sl.unsubscribeAll()\n\n__Symlistener.loop()__  \nEnter an event loop and listens for callbacks .\n\n    >> sl.loop()\n\n__Symlistener.onData(_symbol_, _data_)__  \n_symbol: str_  \n_data: dict_  \nA callback `onData`, if assigned, is called upon receiving messages from SYM server.\n\n    >> def onData(symbol, data):\n    >>     print(\"[onData] symbol:{}, data:{}\".format(symbol, data))\n    >>\n    >> sl = pyflx.Symlistener()\n    >> sl.onData(onData)\n\n### Symproxy Class\n__pyflx.Symproxy()__  \nCreate an instance of Symproxy server.\n\n    >> sp = pyflx.Symproxy()\n\n__Symproxy.initialize(_port_)__  \n_port: int_   \nListens to an incoming connection request on a port.\n\n    >> sp.initialize(7600)\n\n__Symproxy.getFd()__  \n_\u27a5return: int_  \nReturns either client or a binding socket.\n\n    >> sp.getFd()\n\n__Symproxy.select()__  \n_\u27a5return: int_  \nLooks for events on a socket.\n\n    >> sp.select()\n\n__Symproxy.checkSocket()__  \nProcess checks requests and callbacks will be triggered.\n\n    >> sp.checkSocket()\n\n__Symproxy.publish(_symbol_, _data_)__  \n_symbol: str_  \n_data: dict_  \nPublishes market data tick update to a SYM server. See [Data Format](#data-format).\n\n    >> sp.publish('XAU/USD', {0:1420, 1:1421.5, 512:1000, 513:2000, 1032:'USD', 1541:'U'})\n\n__Symproxy.onLogon(_username_, _password_)__  \n_username: str_  \n_password: str_  \nA callback `onLogon`, if assigned, is called upon receiving a logon message from a client.\n\n    >> def onLogon(username, password):\n    >>     print(\"[onLogon] username:{}, password:{}\".format(username, password))\n    >>\n    >> sp = pyflx.Symproxy()\n    >> sp.initialize(7600)\n    >> sp.onLogon(onLogon)\n    >> sp.onSubscribe(onSubscribe)\n    >> sp.onUnsubscribe(onUnsubscribe)\n\n__Symproxy.onSubscribe(_symbol_)__  \n_symbol: str_  \nA callback `onSubscribe`, if assigned, is called upon receiving a symbol subscription message from a client.\n\n__Symproxy.onUnsubscribe(_symbol_)__  \n_symbol: str_  \nA callback `onUnsubscribe`, if assigned, is called upon receiving a symbol unsubscription message from a client.\n\n## Data Format\n| Tag     | Type          | Description                                      \n| --------| ------------- | ------------------------------------------------\n| 0       | float         | Bid                                           \n| 1       | float         | Ask                                           \n| 2       | float         | VWAP                                          \n| 3       | float         | Last traded price                             \n| 8       | float         | Today's high  \n| 9       | float         | Today's low\n| 10      | float         | Today's open\n| 11      | float         | Previous day's close\n| 17      | float         | Today's close\n| 18      | float         | Volume                            \n| 512     | int           | Bid size                                      \n| 513     | int           | Ask size                                      \n| 514     | int           | Trade size\n| 518     | int           | Update time\n| 519     | int           | Last trade time                                   \n| 1024    | str           | Symbol                                        \n| 1032    | str           | Traded currency                               \n| 1541    | str           | Bid tick direction<br/>`U` - up<br/>`D` - down\n| 1545    | str           | Ask tick direction<br/>`U` - up<br/>`D` - down\n\n## Support\n* Report an issue in [issue tracker](https://github.com/devcartel/pyflx/issues)\n\n## Changelog\n1.3.0\n* 6 April 2020\n* New: Closes clien connection and rebinds to binding port with `Symproxy.closeClient()`\n\n1.2.0\n* 7 August 2019\n* Support for Python 2.7\n* Symlistener class\n* Symproxy class\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devcartel/pyflx", "keywords": "flextrade application sym symproxy api market data feed", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pyflx", "package_url": "https://pypi.org/project/pyflx/", "platform": "", "project_url": "https://pypi.org/project/pyflx/", "project_urls": {"Homepage": "https://github.com/devcartel/pyflx"}, "release_url": "https://pypi.org/project/pyflx/1.3.0/", "requires_dist": null, "requires_python": "", "summary": "Provides Python market data API access to FlexTrade SYM", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyFLX</h1>\n<p><a href=\"https://pypi.org/project/pyflx\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eef3ea52fe9c2373ad97bf7ff719d5d3caaa2f42/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079666c782e737667\"></a>\n<a href=\"#\" rel=\"nofollow\"><img alt=\"pyversion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b3e57d7d40f302f427ae28c7996b498408b6e48/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079666c782e737667\"></a>\n<a href=\"#\" rel=\"nofollow\"><img alt=\"platform\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14de72ea72c13fba8e0f5b6393d6011f1cbabc77/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f706c6174666f726d2d6c696e757825374325323077696e2d6c69676874677261792e737667\"></a>\n<a href=\"https://github.com/devcartel/pyflx/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/83f04eebd64115b5931b65e03aca6676c9c792a1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079666c782e737667\"></a>\n<a href=\"https://pypi.org/project/pyflx\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3c03260e380ce7fa999953af8f34086d615abf3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7079666c782e737667\"></a>\n<a href=\"https://www.paypal.com/cgi-bin/webscr?cmd=_s-xclick&amp;hosted_button_id=538VN8VH7S744\" rel=\"nofollow\"><img alt=\"Sponsor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d7311f649dbc3385def383dcdd31d64a6c44f945/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f53706f6e736f722532305079464c582d25323431392e39392532466d6f6e74682d6f72616e67652e7376673f6c6f676f3d70617970616c267374796c653d736f6369616c\"></a></p>\n<p>Provides Python market data API access to FlexTrade SYM. PyFLX has two market data Python classes - <strong>Symlistener</strong> (client) for consuming market data from FlexTrade market data server and <strong>Symproxy</strong> (publisher or feeder) for publising custom tick data to FlexTrade market data server.</p>\n<p align=\"center\">\n    <img alt=\"application\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09a3ce2931341b68a1b529ce59a20327415669be/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f333431353730362f36323535333331362d35323331393930302d623839392d313165392d393430342d3130363962306462653638332e706e67\" width=\"800\">\n</p>\n<h2>Installation</h2>\n<p>Install from <a href=\"https://pypi.org/project/pyflx\" rel=\"nofollow\">PyPI</a> using <code>pip</code>:</p>\n<pre><code>pip install pyflx\n</code></pre>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyflx</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">onData</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{}):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"[onData] symbol:</span><span class=\"si\">{}</span><span class=\"s2\">, data:</span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">))</span>\n\n<span class=\"n\">sl</span> <span class=\"o\">=</span> <span class=\"n\">pyflx</span><span class=\"o\">.</span><span class=\"n\">Symlistener</span><span class=\"p\">()</span>\n<span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">onData</span><span class=\"p\">(</span><span class=\"n\">onData</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'192.168.1.123'</span><span class=\"p\">,</span> <span class=\"mi\">7600</span><span class=\"p\">):</span>\n            <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s1\">'XAU/USD'</span><span class=\"p\">)</span>\n            <span class=\"n\">sl</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">()</span>\n        <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n        <span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">)</span>\n</pre>\n<p>See <code>symlistener.py</code> and <code>symproxy.py</code> for example codes.</p>\n<h2>API</h2>\n<h3>Symlistener Class</h3>\n<p><strong>pyflx.Symlistener()</strong><br>\nCreate an instance of Symlistener client.</p>\n<pre><code>&gt;&gt; sl = pyflx.Symlistener()\n</code></pre>\n<p><strong>Symlistener.connect(<em>ip_address</em>, <em>port</em>)</strong><br>\n<em>ip_address: str</em><br>\n<em>port: int</em><br>\n<em>\u27a5return: bool</em><br>\nConnect to a SYM server on a specified port number. Return <code>true</code> if successful or <code>false</code> if not able to connect to the server.</p>\n<pre><code>&gt;&gt; sl.connect('192.168.1.123', 7600)\n</code></pre>\n<p><strong>Symlistener.subscribe(<em>symbol</em>)</strong><br>\n<em>symbol: str</em><br>\nSubscribe to market data of the symbol.</p>\n<pre><code>&gt;&gt; sl.subscribe('XAU/USD')\n</code></pre>\n<p><strong>Symlistener.subscribeAll()</strong><br>\nSubscribe to market data of all symbols.</p>\n<pre><code>&gt;&gt; sl.subscribeAll()\n</code></pre>\n<p><strong>Symlistener.unsubscribe(<em>symbol</em>)</strong><br>\n<em>symbol: str</em><br>\nUnsubscribe to market data of the symbol.</p>\n<pre><code>&gt;&gt; sl.unsubscribe('XAU/USD')\n</code></pre>\n<p><strong>Symlistener.subscribeAll()</strong><br>\nUnsubscribe to market data of all symbols.</p>\n<pre><code>&gt;&gt; sl.unsubscribeAll()\n</code></pre>\n<p><strong>Symlistener.loop()</strong><br>\nEnter an event loop and listens for callbacks .</p>\n<pre><code>&gt;&gt; sl.loop()\n</code></pre>\n<p><strong>Symlistener.onData(<em>symbol</em>, <em>data</em>)</strong><br>\n<em>symbol: str</em><br>\n<em>data: dict</em><br>\nA callback <code>onData</code>, if assigned, is called upon receiving messages from SYM server.</p>\n<pre><code>&gt;&gt; def onData(symbol, data):\n&gt;&gt;     print(\"[onData] symbol:{}, data:{}\".format(symbol, data))\n&gt;&gt;\n&gt;&gt; sl = pyflx.Symlistener()\n&gt;&gt; sl.onData(onData)\n</code></pre>\n<h3>Symproxy Class</h3>\n<p><strong>pyflx.Symproxy()</strong><br>\nCreate an instance of Symproxy server.</p>\n<pre><code>&gt;&gt; sp = pyflx.Symproxy()\n</code></pre>\n<p><strong>Symproxy.initialize(<em>port</em>)</strong><br>\n<em>port: int</em><br>\nListens to an incoming connection request on a port.</p>\n<pre><code>&gt;&gt; sp.initialize(7600)\n</code></pre>\n<p><strong>Symproxy.getFd()</strong><br>\n<em>\u27a5return: int</em><br>\nReturns either client or a binding socket.</p>\n<pre><code>&gt;&gt; sp.getFd()\n</code></pre>\n<p><strong>Symproxy.select()</strong><br>\n<em>\u27a5return: int</em><br>\nLooks for events on a socket.</p>\n<pre><code>&gt;&gt; sp.select()\n</code></pre>\n<p><strong>Symproxy.checkSocket()</strong><br>\nProcess checks requests and callbacks will be triggered.</p>\n<pre><code>&gt;&gt; sp.checkSocket()\n</code></pre>\n<p><strong>Symproxy.publish(<em>symbol</em>, <em>data</em>)</strong><br>\n<em>symbol: str</em><br>\n<em>data: dict</em><br>\nPublishes market data tick update to a SYM server. See <a href=\"#data-format\" rel=\"nofollow\">Data Format</a>.</p>\n<pre><code>&gt;&gt; sp.publish('XAU/USD', {0:1420, 1:1421.5, 512:1000, 513:2000, 1032:'USD', 1541:'U'})\n</code></pre>\n<p><strong>Symproxy.onLogon(<em>username</em>, <em>password</em>)</strong><br>\n<em>username: str</em><br>\n<em>password: str</em><br>\nA callback <code>onLogon</code>, if assigned, is called upon receiving a logon message from a client.</p>\n<pre><code>&gt;&gt; def onLogon(username, password):\n&gt;&gt;     print(\"[onLogon] username:{}, password:{}\".format(username, password))\n&gt;&gt;\n&gt;&gt; sp = pyflx.Symproxy()\n&gt;&gt; sp.initialize(7600)\n&gt;&gt; sp.onLogon(onLogon)\n&gt;&gt; sp.onSubscribe(onSubscribe)\n&gt;&gt; sp.onUnsubscribe(onUnsubscribe)\n</code></pre>\n<p><strong>Symproxy.onSubscribe(<em>symbol</em>)</strong><br>\n<em>symbol: str</em><br>\nA callback <code>onSubscribe</code>, if assigned, is called upon receiving a symbol subscription message from a client.</p>\n<p><strong>Symproxy.onUnsubscribe(<em>symbol</em>)</strong><br>\n<em>symbol: str</em><br>\nA callback <code>onUnsubscribe</code>, if assigned, is called upon receiving a symbol unsubscription message from a client.</p>\n<h2>Data Format</h2>\n<table>\n<thead>\n<tr>\n<th>Tag</th>\n<th>Type</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>0</td>\n<td>float</td>\n<td>Bid</td>\n</tr>\n<tr>\n<td>1</td>\n<td>float</td>\n<td>Ask</td>\n</tr>\n<tr>\n<td>2</td>\n<td>float</td>\n<td>VWAP</td>\n</tr>\n<tr>\n<td>3</td>\n<td>float</td>\n<td>Last traded price</td>\n</tr>\n<tr>\n<td>8</td>\n<td>float</td>\n<td>Today's high</td>\n</tr>\n<tr>\n<td>9</td>\n<td>float</td>\n<td>Today's low</td>\n</tr>\n<tr>\n<td>10</td>\n<td>float</td>\n<td>Today's open</td>\n</tr>\n<tr>\n<td>11</td>\n<td>float</td>\n<td>Previous day's close</td>\n</tr>\n<tr>\n<td>17</td>\n<td>float</td>\n<td>Today's close</td>\n</tr>\n<tr>\n<td>18</td>\n<td>float</td>\n<td>Volume</td>\n</tr>\n<tr>\n<td>512</td>\n<td>int</td>\n<td>Bid size</td>\n</tr>\n<tr>\n<td>513</td>\n<td>int</td>\n<td>Ask size</td>\n</tr>\n<tr>\n<td>514</td>\n<td>int</td>\n<td>Trade size</td>\n</tr>\n<tr>\n<td>518</td>\n<td>int</td>\n<td>Update time</td>\n</tr>\n<tr>\n<td>519</td>\n<td>int</td>\n<td>Last trade time</td>\n</tr>\n<tr>\n<td>1024</td>\n<td>str</td>\n<td>Symbol</td>\n</tr>\n<tr>\n<td>1032</td>\n<td>str</td>\n<td>Traded currency</td>\n</tr>\n<tr>\n<td>1541</td>\n<td>str</td>\n<td>Bid tick direction<br><code>U</code> - up<br><code>D</code> - down</td>\n</tr>\n<tr>\n<td>1545</td>\n<td>str</td>\n<td>Ask tick direction<br><code>U</code> - up<br><code>D</code> - down</td>\n</tr></tbody></table>\n<h2>Support</h2>\n<ul>\n<li>Report an issue in <a href=\"https://github.com/devcartel/pyflx/issues\" rel=\"nofollow\">issue tracker</a></li>\n</ul>\n<h2>Changelog</h2>\n<p>1.3.0</p>\n<ul>\n<li>6 April 2020</li>\n<li>New: Closes clien connection and rebinds to binding port with <code>Symproxy.closeClient()</code></li>\n</ul>\n<p>1.2.0</p>\n<ul>\n<li>7 August 2019</li>\n<li>Support for Python 2.7</li>\n<li>Symlistener class</li>\n<li>Symproxy class</li>\n</ul>\n\n          </div>"}, "last_serial": 6966111, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "4c7e736fd747c56df443932ed17436bb", "sha256": "c6b253e3a419407d2589489568e202e3e8451529fabd59584b3cf047f5f5e44d"}, "downloads": -1, "filename": "pyflx-1.2.0-cp27-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4c7e736fd747c56df443932ed17436bb", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2190030, "upload_time": "2019-08-06T12:20:44", "upload_time_iso_8601": "2019-08-06T12:20:44.169313Z", "url": "https://files.pythonhosted.org/packages/01/42/d99e2ffbac30e4a9daaaf0fb20f37ffebc8d168ac6f100dc1645424ec415/pyflx-1.2.0-cp27-none-manylinux1_x86_64.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "e5ab2b89267fe1695534f54edefdcb3c", "sha256": "1c6e0a3be54a2268784642f38ad667d7ac883b5cf2b503c6d8a99c479b6c8fff"}, "downloads": -1, "filename": "pyflx-1.3.0-cp27-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e5ab2b89267fe1695534f54edefdcb3c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2190866, "upload_time": "2020-04-07T02:54:13", "upload_time_iso_8601": "2020-04-07T02:54:13.985382Z", "url": "https://files.pythonhosted.org/packages/9c/29/aac5b95605f2c6a2d852b5395cc0765ae72e5983ace8499de2de374d555d/pyflx-1.3.0-cp27-none-manylinux1_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e5ab2b89267fe1695534f54edefdcb3c", "sha256": "1c6e0a3be54a2268784642f38ad667d7ac883b5cf2b503c6d8a99c479b6c8fff"}, "downloads": -1, "filename": "pyflx-1.3.0-cp27-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "e5ab2b89267fe1695534f54edefdcb3c", "packagetype": "bdist_wheel", "python_version": "cp27", "requires_python": null, "size": 2190866, "upload_time": "2020-04-07T02:54:13", "upload_time_iso_8601": "2020-04-07T02:54:13.985382Z", "url": "https://files.pythonhosted.org/packages/9c/29/aac5b95605f2c6a2d852b5395cc0765ae72e5983ace8499de2de374d555d/pyflx-1.3.0-cp27-none-manylinux1_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 03:05:40 2020"}