{"info": {"author": "Hayden Bickerton", "author_email": "hayden@britecore.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Topic :: Utilities"], "description": "========\nOverview\n========\n\n\n\nA python package for working with the BriteCore ETL.\n\n**PLEASE NOTE:** ``brite_etl`` follows `Semantic Versioning <http://semver.org/>`_, and is currently in the initial development phase (``0.x.x``). Use with caution.\n\nUse\n===========\n\nThis is all broken down on the introduction page.\n\n.. code:: python\n\n    import brite_etl\n    from brite_etl.core.io.frame_sources import CsvSource\n\n    # Create a \"set\" of frames to work with...\n    contoso = brite_etl.lib.FrameSet('contoso')\n\n    #Set the source of our csvs (can also pass BriteDataFrame/PreparedDataFrame)...\n    contoso.set_data_sources(source=CsvSource(DF_ROOT), prepared_source=CsvSource(DF_PREP))\n\n    # Easy handling of dataframes, works same for both csv and britedataframe sources.\n    # Essentially a wrapper around the pandas DataFrame. Dates parsed automatically.\n    contoso.frames.get('property_items')\n    contoso.frames.get('agencies').df # original dataframe\n\n    # Import BriteCore reports. Don't have to open/change/save columns in excel, hyperlinks and other\n    # formatting issues are handled. Don't even have to rename the file to take out the dates.\n    from brite_etl.core.io import import_report\n    adv_prem = import_report('/tmp/input', 'Advance Premium', sheet='Advance Premium List', skip_rows=2) # Pandas DataFrame\n    contoso.frames.set('ap', df=adv_prem) # Make custom frames in your frame set\n\n    # Define frame-specific operations...\n    contoso.frames.get('prepared.lines').endOfMonthSum()\n\n    # Or use universal operations, chain across multiple frames...\n    _contoso = contoso.chain\n    (_contoso\n        .filter_dates('date filter for multiple frames actually isn\\'t done yet (soon, though)')\n        .hash_cols(['policyId']) # MD5 hashed dataframes\n        .export_excel(\n            path='/tmp/output',\n            file_name='end_month_integrity_hash.xlsx'\n        ) # Every frame is put into it's own sheet during export\n        .run()\n    )\n\n    # Computations make use of multiple frames within a frame set (also chainable)...\n    trans = _contoso.get_item_transactions().value()\n\n    # Create multiple, isolated sets of frames...\n    wrk = brite_etl.lib.FrameSet('working', from_set=contoso)\n\nInstallation\n============\n\n::\n\n    pip install brite_etl\n\nDevelopment\n===========\n\nTo run the all tests run::\n\n    tox\n\nTest just your desired python version with ``tox -e py27`` or ``tox -e py35``. Much faster than running all test envirornments.\n\nNote about testing: some of the tests require real df_cache data to run. The locations for the df_cache directories is defined in the ``setup.cfg`` file. When running, the tests will check to make sure the directories exist and contain files. If they don't those tests will be skipped, the rest of the tests should function like normal.\n\n\n\nChangelog\n=========\n\n0.1.0 (2016-10-03)\n-----------------------------------------\n\n* Update docs\n* Femove pypy env\n* Use semantic versioning\n\n\n0.0.1 (2016-10-02)\n-----------------------------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/haydenbbickerton/brite_etl", "keywords": "BriteCore,brite_etl", "license": "", "maintainer": "", "maintainer_email": "", "name": "brite_etl", "package_url": "https://pypi.org/project/brite_etl/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/brite_etl/", "project_urls": {"Homepage": "https://github.com/haydenbbickerton/brite_etl"}, "release_url": "https://pypi.org/project/brite_etl/0.1.1/", "requires_dist": ["click", "coloredlogs", "mock", "pandas", "pydash", "typedecorator", "xlwings"], "requires_python": "", "summary": "A python package for working with the BriteCore ETL.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A python package for working with the BriteCore ETL.</p>\n<p><strong>PLEASE NOTE:</strong> <tt>brite_etl</tt> follows <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>, and is currently in the initial development phase (<tt>0.x.x</tt>). Use with caution.</p>\n<div id=\"use\">\n<h2>Use</h2>\n<p>This is all broken down on the introduction page.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">brite_etl</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brite_etl.core.io.frame_sources</span> <span class=\"kn\">import</span> <span class=\"n\">CsvSource</span>\n\n<span class=\"c1\"># Create a \"set\" of frames to work with...</span>\n<span class=\"n\">contoso</span> <span class=\"o\">=</span> <span class=\"n\">brite_etl</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">FrameSet</span><span class=\"p\">(</span><span class=\"s1\">'contoso'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#Set the source of our csvs (can also pass BriteDataFrame/PreparedDataFrame)...</span>\n<span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">set_data_sources</span><span class=\"p\">(</span><span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">CsvSource</span><span class=\"p\">(</span><span class=\"n\">DF_ROOT</span><span class=\"p\">),</span> <span class=\"n\">prepared_source</span><span class=\"o\">=</span><span class=\"n\">CsvSource</span><span class=\"p\">(</span><span class=\"n\">DF_PREP</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Easy handling of dataframes, works same for both csv and britedataframe sources.</span>\n<span class=\"c1\"># Essentially a wrapper around the pandas DataFrame. Dates parsed automatically.</span>\n<span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">frames</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'property_items'</span><span class=\"p\">)</span>\n<span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">frames</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'agencies'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">df</span> <span class=\"c1\"># original dataframe</span>\n\n<span class=\"c1\"># Import BriteCore reports. Don't have to open/change/save columns in excel, hyperlinks and other</span>\n<span class=\"c1\"># formatting issues are handled. Don't even have to rename the file to take out the dates.</span>\n<span class=\"kn\">from</span> <span class=\"nn\">brite_etl.core.io</span> <span class=\"kn\">import</span> <span class=\"n\">import_report</span>\n<span class=\"n\">adv_prem</span> <span class=\"o\">=</span> <span class=\"n\">import_report</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/input'</span><span class=\"p\">,</span> <span class=\"s1\">'Advance Premium'</span><span class=\"p\">,</span> <span class=\"n\">sheet</span><span class=\"o\">=</span><span class=\"s1\">'Advance Premium List'</span><span class=\"p\">,</span> <span class=\"n\">skip_rows</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span> <span class=\"c1\"># Pandas DataFrame</span>\n<span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">frames</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'ap'</span><span class=\"p\">,</span> <span class=\"n\">df</span><span class=\"o\">=</span><span class=\"n\">adv_prem</span><span class=\"p\">)</span> <span class=\"c1\"># Make custom frames in your frame set</span>\n\n<span class=\"c1\"># Define frame-specific operations...</span>\n<span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">frames</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'prepared.lines'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">endOfMonthSum</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Or use universal operations, chain across multiple frames...</span>\n<span class=\"n\">_contoso</span> <span class=\"o\">=</span> <span class=\"n\">contoso</span><span class=\"o\">.</span><span class=\"n\">chain</span>\n<span class=\"p\">(</span><span class=\"n\">_contoso</span>\n    <span class=\"o\">.</span><span class=\"n\">filter_dates</span><span class=\"p\">(</span><span class=\"s1\">'date filter for multiple frames actually isn</span><span class=\"se\">\\'</span><span class=\"s1\">t done yet (soon, though)'</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">hash_cols</span><span class=\"p\">([</span><span class=\"s1\">'policyId'</span><span class=\"p\">])</span> <span class=\"c1\"># MD5 hashed dataframes</span>\n    <span class=\"o\">.</span><span class=\"n\">export_excel</span><span class=\"p\">(</span>\n        <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/tmp/output'</span><span class=\"p\">,</span>\n        <span class=\"n\">file_name</span><span class=\"o\">=</span><span class=\"s1\">'end_month_integrity_hash.xlsx'</span>\n    <span class=\"p\">)</span> <span class=\"c1\"># Every frame is put into it's own sheet during export</span>\n    <span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Computations make use of multiple frames within a frame set (also chainable)...</span>\n<span class=\"n\">trans</span> <span class=\"o\">=</span> <span class=\"n\">_contoso</span><span class=\"o\">.</span><span class=\"n\">get_item_transactions</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create multiple, isolated sets of frames...</span>\n<span class=\"n\">wrk</span> <span class=\"o\">=</span> <span class=\"n\">brite_etl</span><span class=\"o\">.</span><span class=\"n\">lib</span><span class=\"o\">.</span><span class=\"n\">FrameSet</span><span class=\"p\">(</span><span class=\"s1\">'working'</span><span class=\"p\">,</span> <span class=\"n\">from_set</span><span class=\"o\">=</span><span class=\"n\">contoso</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install brite_etl\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>To run the all tests run:</p>\n<pre>tox\n</pre>\n<p>Test just your desired python version with <tt>tox <span class=\"pre\">-e</span> py27</tt> or <tt>tox <span class=\"pre\">-e</span> py35</tt>. Much faster than running all test envirornments.</p>\n<p>Note about testing: some of the tests require real df_cache data to run. The locations for the df_cache directories is defined in the <tt>setup.cfg</tt> file. When running, the tests will check to make sure the directories exist and contain files. If they don\u2019t those tests will be skipped, the rest of the tests should function like normal.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>0.1.0 (2016-10-03)</h3>\n<ul>\n<li>Update docs</li>\n<li>Femove pypy env</li>\n<li>Use semantic versioning</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.0.1 (2016-10-02)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2378332, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4053d263c5cd505b83a6ee8766c1a709", "sha256": "fe75821d1ba5baeacdd93ffef98a86a380af1b891d53c61ced904e9a98d18eff"}, "downloads": -1, "filename": "brite_etl-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4053d263c5cd505b83a6ee8766c1a709", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53387, "upload_time": "2016-10-02T21:16:34", "upload_time_iso_8601": "2016-10-02T21:16:34.676309Z", "url": "https://files.pythonhosted.org/packages/b9/e9/ec44f639148dd3451b6bfbac830637012736aab8adf13732d1e355bfd672/brite_etl-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "723d144b7fe1a921c93fd3ad29f8bbe6", "sha256": "e79c1c5d54ecdbd444b62e11984eb5b96ed9b52eec79a63bb232ec04854ca251"}, "downloads": -1, "filename": "brite_etl-0.0.1.tar.gz", "has_sig": false, "md5_digest": "723d144b7fe1a921c93fd3ad29f8bbe6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40430, "upload_time": "2016-10-02T21:16:37", "upload_time_iso_8601": "2016-10-02T21:16:37.380116Z", "url": "https://files.pythonhosted.org/packages/f3/d2/2fe8c49048884b8bbee6a2fad6a9b757cb378586b3ebbcc92cc00fae43d2/brite_etl-0.0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ac52377582fb8091441ba32f0e030a0e", "sha256": "541f9f8e38b9f6c156176214fc8a5ea35a005829eb965709d2e5c2ca95aac2b3"}, "downloads": -1, "filename": "brite_etl-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac52377582fb8091441ba32f0e030a0e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53928, "upload_time": "2016-10-03T19:57:07", "upload_time_iso_8601": "2016-10-03T19:57:07.043891Z", "url": "https://files.pythonhosted.org/packages/d2/29/dbe75356c17838603249e738a8d8e2655f752214101f776fd367f10ffa0b/brite_etl-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b3eeda65866fa64ee138e1daedc2f97", "sha256": "75d3dc42052873d76e820e33203f53bf24f6f611616950a6d988c8703a399415"}, "downloads": -1, "filename": "brite_etl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b3eeda65866fa64ee138e1daedc2f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40934, "upload_time": "2016-10-03T19:57:09", "upload_time_iso_8601": "2016-10-03T19:57:09.527985Z", "url": "https://files.pythonhosted.org/packages/69/99/75daffc4b8668bc0b1a0d8ecd153bf335154bf9cbe5249670b1c76d2a7fc/brite_etl-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ac52377582fb8091441ba32f0e030a0e", "sha256": "541f9f8e38b9f6c156176214fc8a5ea35a005829eb965709d2e5c2ca95aac2b3"}, "downloads": -1, "filename": "brite_etl-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ac52377582fb8091441ba32f0e030a0e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53928, "upload_time": "2016-10-03T19:57:07", "upload_time_iso_8601": "2016-10-03T19:57:07.043891Z", "url": "https://files.pythonhosted.org/packages/d2/29/dbe75356c17838603249e738a8d8e2655f752214101f776fd367f10ffa0b/brite_etl-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b3eeda65866fa64ee138e1daedc2f97", "sha256": "75d3dc42052873d76e820e33203f53bf24f6f611616950a6d988c8703a399415"}, "downloads": -1, "filename": "brite_etl-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1b3eeda65866fa64ee138e1daedc2f97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40934, "upload_time": "2016-10-03T19:57:09", "upload_time_iso_8601": "2016-10-03T19:57:09.527985Z", "url": "https://files.pythonhosted.org/packages/69/99/75daffc4b8668bc0b1a0d8ecd153bf335154bf9cbe5249670b1c76d2a7fc/brite_etl-0.1.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:17 2020"}