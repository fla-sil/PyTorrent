{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "py_gql_test_client\n==================\n|codecov|\n\n.. image:: https://readthedocs.org/projects/graphql-client/badge/?version=latest\n   :target: https://dkistdc.readthedocs.io/projects/graphql-client/en/latest/?badge=latest\n   :alt: Documentation Status\n\nA forked and updated project of `gqlclient <https://pypi.org/project/gqlclient/>`__ for making requests to a GraphQL server using\nstandard library or pydantic dataclasses to spare you from string manipulation.\n\nFeatures\n--------\n\n-  Use standard library dataclasses to specify graphql parameters and responses\n\n-  Use `pydantic <https://pypi.org/project/pydantic/>`__ dataclasses to\n   specify graphql parameters and responses that have type validation\n\n-  Create and execute GraphQL Queries based upon typed models\n\n-  Create and execute GraphQL Mutations based upon typed models\n\n-  Async support\n\nInstallation\n------------\n\n.. code:: bash\n\n   pip install py_gql_test_client\n\nwith ``asyncio`` support\n\n.. code:: bash\n\n   pip install py_gql_test_client[async]\n\nExamples\n--------\n\n**Query**\n\n.. code:: python\n\n   from pydantic.dataclasses import dataclass\n\n   from py_gql_test_client import GraphQLClient\n\n   @dataclass\n   class Parameters:\n       attr_one: str\n       attr_two: int\n\n   @dataclass\n   class Response:\n       attr_three: int\n       attr_four: str\n       \n   client = GraphQLClient(gql_uri=\"http://localhost:5000/graphql\")\n   parameters = Parameters(attr_one=\"foo\", attr_two=3)\n   query = client.get_query(query_base=\"baseType\", query_response_cls=Response, query_parameters=parameters)\n   print(query)\n   #{'query': '{baseType(attr_one: \"foo\", attr_two: 3){attr_three, attr_four} }'}\n   response = client.execute_gql_query(query_base=\"baseType\", query_response_cls=Response, query_parameters=parameters)\n   print(response)\n   #{\"baseType\"{\"attr_three\":5, \"attr_four\":\"bar\"}}\n\n**Mutation**\n\n.. code:: python\n\n   from pydantic.dataclasses import dataclass\n\n   from py_gql_test_client import GraphQLClient\n\n\n   @dataclass\n   class Parameters:\n       attr_one: str\n       attr_two: int\n\n\n   @dataclass\n   class Response:\n       attr_three: int\n       attr_four: str\n       \n   client = GraphQLClient(gql_uri=\"http://localhost:5000/graphql\")\n   parameters = Parameters(attr_one=\"foo\", attr_two=3)\n   query = client.get_mutation(mutation_base=\"baseMutation\", mutation_response_cls=Response, mutation_parameters=parameters)\n   print(query)\n   #{'query': 'mutation baseType {baseType(attr_one: \"foo\", attr_two: 3){ok, attr_three, attr_four} }', 'operationName': 'baseType'}\n\n   response = client.execute_gql_mutation(mutation_base=\"baseMutation\", mutation_response_cls=Response, mutation_parameters=parameters)\n   print(response)\n   #{\"baseMutation\": {\"ok\": true, \"Response\": {\"attr_three\":5, \"attr_four\":\"bar\"} }}\n\n**Encoders**\n\n.. code:: python\n\n    from dataclasses import dataclass\n\n    from py_gql_test_client import GraphQLClient\n    from py_gql_test_client import GraphQLClient, dataclass_encoder\n\n    # set the default encoder to dataclass_encoder\n    client = GraphQLClient(gql_uri=\"http://127.0.0.1:30003/graphql\", default_response_encoder=dataclass_encoder)\n\n    @dataclass\n    class QueryResponse:\n        workflowId: int\n        workflowName: str\n        workflowDescription: str\n\n    response = client.execute_gql_query(\"workflows\", QueryResponse)\n    print(response)\n    # Response type is a list of dataclasses\n    # [QueryResponse(workflowId=1, workflowName='gql3_full - workflow_name', workflowDescription='gql3_full - workflow_description'), QueryResponse(workflowId=2, workflowName='VBI base calibration', workflowDescription='The base set of calibration tasks for VBI.'), QueryResponse(workflowId=3, workflowName='VISP base calibration', workflowDescription='The base set of calibration tasks for VISP.'), QueryResponse(workflowId=4, workflowName='VTF base calibration', workflowDescription='The base set of calibration tasks for VTF.'), QueryResponse(workflowId=5, workflowName='DLNIRSP base calibration', workflowDescription='The base set of calibration tasks for DLNIRSP.'), QueryResponse(workflowId=6, workflowName='CRYONIRSP base calibration', workflowDescription='The base set of calibration tasks for CRYONIRSP.')]\n\n    from py_gql_test_client import json_encoder\n    # for this call override the default encoder to the json encoder\n    response = client.execute_gql_query(\"workflows\",QueryResponse, response_encoder=json_encoder)\n    print(response)\n    # Response is a json formatted string\n    # '{\"workflows\": [{\"workflowId\": 1, \"workflowName\": \"gql3_full - workflow_name\", \"workflowDescription\": \"gql3_full - workflow_description\"}, {\"workflowId\": 2, \"workflowName\": \"VBI base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VBI.\"}, {\"workflowId\": 3, \"workflowName\": \"VISP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VISP.\"}, {\"workflowId\": 4, \"workflowName\": \"VTF base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VTF.\"}, {\"workflowId\": 5, \"workflowName\": \"DLNIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for DLNIRSP.\"}, {\"workflowId\": 6, \"workflowName\": \"CRYONIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for CRYONIRSP.\"}]}'\n\n.. |codecov| image:: https://codecov.io/bb/dkistdc/graphql_client/branch/master/graph/badge.svg\n   :target: https://codecov.io/bb/dkistdc/graphql_client", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-gql-test-client", "package_url": "https://pypi.org/project/py-gql-test-client/", "platform": "", "project_url": "https://pypi.org/project/py-gql-test-client/", "project_urls": null, "release_url": "https://pypi.org/project/py-gql-test-client/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Forked and updated version of https://pypi.org/project/gqlclient/", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://codecov.io/bb/dkistdc/graphql_client\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19baff326be047d2b58c3278e8858bb5a863a386/68747470733a2f2f636f6465636f762e696f2f62622f646b69737464632f6772617068716c5f636c69656e742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<a href=\"https://dkistdc.readthedocs.io/projects/graphql-client/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6b1c90b3153446ecdd048c60577c78c0f8f9b80/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6772617068716c2d636c69656e742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>A forked and updated project of <a href=\"https://pypi.org/project/gqlclient/\" rel=\"nofollow\">gqlclient</a> for making requests to a GraphQL server using\nstandard library or pydantic dataclasses to spare you from string manipulation.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Use standard library dataclasses to specify graphql parameters and responses</li>\n<li>Use <a href=\"https://pypi.org/project/pydantic/\" rel=\"nofollow\">pydantic</a> dataclasses to\nspecify graphql parameters and responses that have type validation</li>\n<li>Create and execute GraphQL Queries based upon typed models</li>\n<li>Create and execute GraphQL Mutations based upon typed models</li>\n<li>Async support</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install py_gql_test_client\n</pre>\n<p>with <tt>asyncio</tt> support</p>\n<pre>pip install py_gql_test_client<span class=\"o\">[</span>async<span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p><strong>Query</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic.dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">py_gql_test_client</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLClient</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">attr_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">attr_two</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">attr_three</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">attr_four</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLClient</span><span class=\"p\">(</span><span class=\"n\">gql_uri</span><span class=\"o\">=</span><span class=\"s2\">\"http://localhost:5000/graphql\"</span><span class=\"p\">)</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">Parameters</span><span class=\"p\">(</span><span class=\"n\">attr_one</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">attr_two</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_query</span><span class=\"p\">(</span><span class=\"n\">query_base</span><span class=\"o\">=</span><span class=\"s2\">\"baseType\"</span><span class=\"p\">,</span> <span class=\"n\">query_response_cls</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">query_parameters</span><span class=\"o\">=</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"c1\">#{'query': '{baseType(attr_one: \"foo\", attr_two: 3){attr_three, attr_four} }'}</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_gql_query</span><span class=\"p\">(</span><span class=\"n\">query_base</span><span class=\"o\">=</span><span class=\"s2\">\"baseType\"</span><span class=\"p\">,</span> <span class=\"n\">query_response_cls</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">query_parameters</span><span class=\"o\">=</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"c1\">#{\"baseType\"{\"attr_three\":5, \"attr_four\":\"bar\"}}</span>\n</pre>\n<p><strong>Mutation</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pydantic.dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">py_gql_test_client</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLClient</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Parameters</span><span class=\"p\">:</span>\n    <span class=\"n\">attr_one</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">attr_two</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Response</span><span class=\"p\">:</span>\n    <span class=\"n\">attr_three</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">attr_four</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLClient</span><span class=\"p\">(</span><span class=\"n\">gql_uri</span><span class=\"o\">=</span><span class=\"s2\">\"http://localhost:5000/graphql\"</span><span class=\"p\">)</span>\n<span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"n\">Parameters</span><span class=\"p\">(</span><span class=\"n\">attr_one</span><span class=\"o\">=</span><span class=\"s2\">\"foo\"</span><span class=\"p\">,</span> <span class=\"n\">attr_two</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_mutation</span><span class=\"p\">(</span><span class=\"n\">mutation_base</span><span class=\"o\">=</span><span class=\"s2\">\"baseMutation\"</span><span class=\"p\">,</span> <span class=\"n\">mutation_response_cls</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">mutation_parameters</span><span class=\"o\">=</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"c1\">#{'query': 'mutation baseType {baseType(attr_one: \"foo\", attr_two: 3){ok, attr_three, attr_four} }', 'operationName': 'baseType'}</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_gql_mutation</span><span class=\"p\">(</span><span class=\"n\">mutation_base</span><span class=\"o\">=</span><span class=\"s2\">\"baseMutation\"</span><span class=\"p\">,</span> <span class=\"n\">mutation_response_cls</span><span class=\"o\">=</span><span class=\"n\">Response</span><span class=\"p\">,</span> <span class=\"n\">mutation_parameters</span><span class=\"o\">=</span><span class=\"n\">parameters</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"c1\">#{\"baseMutation\": {\"ok\": true, \"Response\": {\"attr_three\":5, \"attr_four\":\"bar\"} }}</span>\n</pre>\n<p><strong>Encoders</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dataclasses</span> <span class=\"kn\">import</span> <span class=\"n\">dataclass</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">py_gql_test_client</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLClient</span>\n<span class=\"kn\">from</span> <span class=\"nn\">py_gql_test_client</span> <span class=\"kn\">import</span> <span class=\"n\">GraphQLClient</span><span class=\"p\">,</span> <span class=\"n\">dataclass_encoder</span>\n\n<span class=\"c1\"># set the default encoder to dataclass_encoder</span>\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">GraphQLClient</span><span class=\"p\">(</span><span class=\"n\">gql_uri</span><span class=\"o\">=</span><span class=\"s2\">\"http://127.0.0.1:30003/graphql\"</span><span class=\"p\">,</span> <span class=\"n\">default_response_encoder</span><span class=\"o\">=</span><span class=\"n\">dataclass_encoder</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">QueryResponse</span><span class=\"p\">:</span>\n    <span class=\"n\">workflowId</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">workflowName</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">workflowDescription</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_gql_query</span><span class=\"p\">(</span><span class=\"s2\">\"workflows\"</span><span class=\"p\">,</span> <span class=\"n\">QueryResponse</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"c1\"># Response type is a list of dataclasses</span>\n<span class=\"c1\"># [QueryResponse(workflowId=1, workflowName='gql3_full - workflow_name', workflowDescription='gql3_full - workflow_description'), QueryResponse(workflowId=2, workflowName='VBI base calibration', workflowDescription='The base set of calibration tasks for VBI.'), QueryResponse(workflowId=3, workflowName='VISP base calibration', workflowDescription='The base set of calibration tasks for VISP.'), QueryResponse(workflowId=4, workflowName='VTF base calibration', workflowDescription='The base set of calibration tasks for VTF.'), QueryResponse(workflowId=5, workflowName='DLNIRSP base calibration', workflowDescription='The base set of calibration tasks for DLNIRSP.'), QueryResponse(workflowId=6, workflowName='CRYONIRSP base calibration', workflowDescription='The base set of calibration tasks for CRYONIRSP.')]</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">py_gql_test_client</span> <span class=\"kn\">import</span> <span class=\"n\">json_encoder</span>\n<span class=\"c1\"># for this call override the default encoder to the json encoder</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">execute_gql_query</span><span class=\"p\">(</span><span class=\"s2\">\"workflows\"</span><span class=\"p\">,</span><span class=\"n\">QueryResponse</span><span class=\"p\">,</span> <span class=\"n\">response_encoder</span><span class=\"o\">=</span><span class=\"n\">json_encoder</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n<span class=\"c1\"># Response is a json formatted string</span>\n<span class=\"c1\"># '{\"workflows\": [{\"workflowId\": 1, \"workflowName\": \"gql3_full - workflow_name\", \"workflowDescription\": \"gql3_full - workflow_description\"}, {\"workflowId\": 2, \"workflowName\": \"VBI base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VBI.\"}, {\"workflowId\": 3, \"workflowName\": \"VISP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VISP.\"}, {\"workflowId\": 4, \"workflowName\": \"VTF base calibration\", \"workflowDescription\": \"The base set of calibration tasks for VTF.\"}, {\"workflowId\": 5, \"workflowName\": \"DLNIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for DLNIRSP.\"}, {\"workflowId\": 6, \"workflowName\": \"CRYONIRSP base calibration\", \"workflowDescription\": \"The base set of calibration tasks for CRYONIRSP.\"}]}'</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6741359, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2384a1d9e172f1195ffe0ba3bc88f9a7", "sha256": "42df6c4929ca09ea955b4bedf59ee158528b4fc8bf5f6e31d508dceff5c40b8e"}, "downloads": -1, "filename": "py_gql_test_client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2384a1d9e172f1195ffe0ba3bc88f9a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12835, "upload_time": "2020-03-03T15:09:19", "upload_time_iso_8601": "2020-03-03T15:09:19.095399Z", "url": "https://files.pythonhosted.org/packages/1f/83/34782a327fbf8858ae2631b86d093071bf952a681efe57a6730b3c1cf473/py_gql_test_client-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2384a1d9e172f1195ffe0ba3bc88f9a7", "sha256": "42df6c4929ca09ea955b4bedf59ee158528b4fc8bf5f6e31d508dceff5c40b8e"}, "downloads": -1, "filename": "py_gql_test_client-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2384a1d9e172f1195ffe0ba3bc88f9a7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12835, "upload_time": "2020-03-03T15:09:19", "upload_time_iso_8601": "2020-03-03T15:09:19.095399Z", "url": "https://files.pythonhosted.org/packages/1f/83/34782a327fbf8858ae2631b86d093071bf952a681efe57a6730b3c1cf473/py_gql_test_client-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:44 2020"}