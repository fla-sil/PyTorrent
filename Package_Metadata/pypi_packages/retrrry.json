{"info": {"author": "Jiachen Yao", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Retrrry\n\nDecorate flaky functions with `@retry` to apply retrying logic.\n\nSimplest way to use `Retrrry` is actually to copy the code in `retrrry.py` and use it in your\nproject, since there is no dependencies other than the standard library.\n\n```python\n@retry\ndef unreliable_func():\n    import random\n    if random.randint(0, 10) < 5:\n        raise IOError('Fail')\n    else:\n        return 'Success'\n```\n\n## Configurations\n\n- Specify stop condition (i.e. limit by number of attempts)\n- Specify wait condition (i.e. exponential backoff sleeping between attempts)\n- Specify certain Exceptions\n- Specify expected returned result\n\n## Installation\n\n```sh\npip install retrrry\n```\n\n```python\nfrom retrrry import retry\n```\n\n## Examples\n\nThe default behavior is to retry forever without waiting:\n\n```python\n@retry\ndef never_stop_never_wait():\n    print('Retry forever, ignore Exceptions, no wait between retries')\n```\n\nSet the number of attempts before giving up:\n\n```python\n@retry(stop_max_attempt_number=7)\ndef stop_after_7_attempts():\n    print('Stopping after 7 attempts')\n```\n\nSet a boundary for time for retry:\n\n```python\n@retry(stop_max_delay=10000)\ndef stop_after_10_s():\n    print('Stopping after 10 seconds')\n```\n\nSet wait time between retries:\n\n```python\n@retry(wait_fixed=2000)\ndef wait_2_seconds():\n    print('Wait 2 second between retries')\n```\n\nInject some randomness:\n\n```python\n@retry(wait_random_min=1000, wait_random_max=2000)\ndef wait_1_to_2_seconds():\n    print('Randomly wait 1 to 2 seconds between retries')\n```\n\nUse exponential backoff:\n\n```python\n@retry(wait_exponential_multiplier=1000, wait_exponential_max=10000)\ndef wait_exponential_1000():\n    print(\n        'Wait 2^i * 1000 milliseconds after ith retry, up to 10 seconds, then 10 seconds afterwards'\n    )\n```\n\nDeal with specific exceptions:\n\n```python\ndef retry_if_io_error(exception):\n    return isinstance(exception, IOError)\n\n@retry(retry_on_exception=retry_if_io_error)\ndef might_have_io_error():\n    print('Retry if an IOError occurs, raise any other errors')\n\n@retry(retry_on_exception=retry_if_io_error, wrap_exception=True)\ndef might_have_io_error_raise_retry_error():\n    print('Retry if an IOError occurs, raise any other errors wrapped in RetryError')\n```\n\nAlter the behavior of retry based on a function return value:\n\n```python\ndef retry_if_result_none(result):\n    return result is None\n\n@retry(retry_on_result=retry_if_result_none)\ndef might_return_none():\n    print('Retry if return value is None')\n\n# Or retry if result is equal to 1\n@retry(retry_on_result=lambda x: x ==1)\ndef might_return_none():\n    print('Retry if return value is 1')\n```\n\nFinally, we can always combine all of the configurations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yaojiach/retrrry", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "retrrry", "package_url": "https://pypi.org/project/retrrry/", "platform": "", "project_url": "https://pypi.org/project/retrrry/", "project_urls": {"Homepage": "https://github.com/yaojiach/retrrry"}, "release_url": "https://pypi.org/project/retrrry/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Retry for Python3. No dependency.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Retrrry</h1>\n<p>Decorate flaky functions with <code>@retry</code> to apply retrying logic.</p>\n<p>Simplest way to use <code>Retrrry</code> is actually to copy the code in <code>retrrry.py</code> and use it in your\nproject, since there is no dependencies other than the standard library.</p>\n<pre><span class=\"nd\">@retry</span>\n<span class=\"k\">def</span> <span class=\"nf\">unreliable_func</span><span class=\"p\">():</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">random</span>\n    <span class=\"k\">if</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"o\">&lt;</span> <span class=\"mi\">5</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">IOError</span><span class=\"p\">(</span><span class=\"s1\">'Fail'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'Success'</span>\n</pre>\n<h2>Configurations</h2>\n<ul>\n<li>Specify stop condition (i.e. limit by number of attempts)</li>\n<li>Specify wait condition (i.e. exponential backoff sleeping between attempts)</li>\n<li>Specify certain Exceptions</li>\n<li>Specify expected returned result</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip install retrrry\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">retrrry</span> <span class=\"kn\">import</span> <span class=\"n\">retry</span>\n</pre>\n<h2>Examples</h2>\n<p>The default behavior is to retry forever without waiting:</p>\n<pre><span class=\"nd\">@retry</span>\n<span class=\"k\">def</span> <span class=\"nf\">never_stop_never_wait</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Retry forever, ignore Exceptions, no wait between retries'</span><span class=\"p\">)</span>\n</pre>\n<p>Set the number of attempts before giving up:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">stop_max_attempt_number</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop_after_7_attempts</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Stopping after 7 attempts'</span><span class=\"p\">)</span>\n</pre>\n<p>Set a boundary for time for retry:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">stop_max_delay</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop_after_10_s</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Stopping after 10 seconds'</span><span class=\"p\">)</span>\n</pre>\n<p>Set wait time between retries:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_fixed</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_2_seconds</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Wait 2 second between retries'</span><span class=\"p\">)</span>\n</pre>\n<p>Inject some randomness:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_random_min</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">wait_random_max</span><span class=\"o\">=</span><span class=\"mi\">2000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_1_to_2_seconds</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Randomly wait 1 to 2 seconds between retries'</span><span class=\"p\">)</span>\n</pre>\n<p>Use exponential backoff:</p>\n<pre><span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">wait_exponential_multiplier</span><span class=\"o\">=</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"n\">wait_exponential_max</span><span class=\"o\">=</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">wait_exponential_1000</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Wait 2^i * 1000 milliseconds after ith retry, up to 10 seconds, then 10 seconds afterwards'</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Deal with specific exceptions:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">retry_if_io_error</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">exception</span><span class=\"p\">,</span> <span class=\"ne\">IOError</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_exception</span><span class=\"o\">=</span><span class=\"n\">retry_if_io_error</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_have_io_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Retry if an IOError occurs, raise any other errors'</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_exception</span><span class=\"o\">=</span><span class=\"n\">retry_if_io_error</span><span class=\"p\">,</span> <span class=\"n\">wrap_exception</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_have_io_error_raise_retry_error</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Retry if an IOError occurs, raise any other errors wrapped in RetryError'</span><span class=\"p\">)</span>\n</pre>\n<p>Alter the behavior of retry based on a function return value:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">retry_if_result_none</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span>\n\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_result</span><span class=\"o\">=</span><span class=\"n\">retry_if_result_none</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_return_none</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Retry if return value is None'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Or retry if result is equal to 1</span>\n<span class=\"nd\">@retry</span><span class=\"p\">(</span><span class=\"n\">retry_on_result</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">==</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">might_return_none</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Retry if return value is 1'</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, we can always combine all of the configurations.</p>\n\n          </div>"}, "last_serial": 7079030, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "9c3a4ff26d04c2e877e2839eeb91198e", "sha256": "19ae41135509325a867d72ac43038d258ce32617d78d7820415afd306e2debf5"}, "downloads": -1, "filename": "retrrry-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9c3a4ff26d04c2e877e2839eeb91198e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9106, "upload_time": "2020-04-22T19:36:21", "upload_time_iso_8601": "2020-04-22T19:36:21.909521Z", "url": "https://files.pythonhosted.org/packages/85/a1/31789feb78449c385636765ab3ac44ced9436b5ce6c83f411a3a5e38dde1/retrrry-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b1082b8a5a0f08a97ba0b7a3137ef71", "sha256": "72ed8aee562b7ec090de1adb30de09919d23a78270bbac401953d771c4d2eaa6"}, "downloads": -1, "filename": "retrrry-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2b1082b8a5a0f08a97ba0b7a3137ef71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8610, "upload_time": "2020-04-22T19:36:24", "upload_time_iso_8601": "2020-04-22T19:36:24.107622Z", "url": "https://files.pythonhosted.org/packages/0d/d6/0067a817f2ea8370b22dc385efd15481fb0a7d41e6109316782a687c8de7/retrrry-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c3a4ff26d04c2e877e2839eeb91198e", "sha256": "19ae41135509325a867d72ac43038d258ce32617d78d7820415afd306e2debf5"}, "downloads": -1, "filename": "retrrry-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9c3a4ff26d04c2e877e2839eeb91198e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9106, "upload_time": "2020-04-22T19:36:21", "upload_time_iso_8601": "2020-04-22T19:36:21.909521Z", "url": "https://files.pythonhosted.org/packages/85/a1/31789feb78449c385636765ab3ac44ced9436b5ce6c83f411a3a5e38dde1/retrrry-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b1082b8a5a0f08a97ba0b7a3137ef71", "sha256": "72ed8aee562b7ec090de1adb30de09919d23a78270bbac401953d771c4d2eaa6"}, "downloads": -1, "filename": "retrrry-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2b1082b8a5a0f08a97ba0b7a3137ef71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8610, "upload_time": "2020-04-22T19:36:24", "upload_time_iso_8601": "2020-04-22T19:36:24.107622Z", "url": "https://files.pythonhosted.org/packages/0d/d6/0067a817f2ea8370b22dc385efd15481fb0a7d41e6109316782a687c8de7/retrrry-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:24 2020"}