{"info": {"author": "Aliaksandr Buhayeu", "author_email": "aliaksandr.buhayeu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Libraries", "Topic :: Utilities"], "description": "================================================================\nanydo_api unofficial AnyDo API client for Python (v0.0.2 aplha)\n================================================================\n\n.. image:: https://img.shields.io/travis/aliaksandrb/anydo_api.svg\n        :target: https://travis-ci.org/aliaksandrb/anydo_api\n\n.. image:: https://img.shields.io/pypi/v/anydo_api.svg\n        :target: https://pypi.python.org/pypi/anydo_api\n\n.. image:: https://readthedocs.org/projects/anydo-api/badge/?version=latest\n        :target: http://anydo-api.readthedocs.org/en/latest/\n\nThis simple client library provides access to basic features of `AnyDo <http://www.any.do/>`_ task manager in a\neasy and object-oriented style.\n\nIt could be used for own projects integration's or as a tool for migration from one task manager to another.\n\nSupported Features\n------------------\n* User CRUD operations\n* Personal tasks CRUD and sharing\n* Personal lists(categories) CRUD\n\nRequirements\n------------\n* Automatically testing for `Python 2.7` and `Python 3.4`.\n* Uses `requests>=2.8.0` for remote API calls.\n\nInstall\n--------\n::\n\n$ pip install anydo_api\n\nor directly from the repository:\n::\n\n$ git clone https://github.com/aliaksandrb/anydo_api\n$ cd anydo_api\n$ python setup.py install\n\nUsage & examples:\n-------------------\nCurrently not all functionality from the original `Chrome/Android/..` clients are supported.\nSome of them just have no sense for console client, some just not ready yet :)\n\nHere is what we have for now:\n\nUser management:\n^^^^^^^^^^^^^^^^^\n>>> from anydo_api.client import Client\n\n**Create totally new user:**\n\n>>> user = Client.create_user(name='Garlic', email='name@garlic.com', password='password')\n\n**Access to its attributes both ways:**\n\n>>> user['name'] # > 'Garlic'\n>>> user.email # > 'name@garlic.com'\n\n**Change the name:**\n\n>>> user['name'] = 'Tomato'\n>>> user.save() # changes are pushed to server\n>>> user['name'] # > 'Tomato'\n\n**Login with existent account:**\n\n>>> user = Client(email='name@garlic.com', password='password').get_user()\n>>> user['name'] # > 'Tomato'\n\n**Get the possible updates from the server (in case if user was already instantiated but changed by other client/app)**\n\n>>> user.refresh()\n\n**Delete your account completely. Warning! Can't be undone:**\n\n>>> user.destroy()\n...\n\nTasks management:\n^^^^^^^^^^^^^^^^^\n>>> from anydo_api.client import Client\n>>> from anydo_api.task import Task\n\n>>> user = Client(email='name@garlic.com', password='password').get_user()\n\n**List tasks:**\n\n>>> user.tasks() # > []\n\n**Create a new task:**\n\n>>> task = Task.create(\n               user=user,\n               title='Clean garden',\n               priority='High',\n               category='Personal',\n               repeatingMethod='TASK_REPEAT_OFF')\n\n>>> task['assignedTo'] # > 'name@garlic.com'\n>>> task.status # > 'UNCHECKED'\n\n**Add note for task:**\n\n>>> task.add_note('first task')\n>>> task.notes() # > ['first task']\n\n**Add a subtasks:**\n\n>>> subtask = Task.create(user=user, title='Find a water', priority='Normal')\n>>> task.add_subtask(subtask)\n>>> subtask.parent()['title'] # > 'Clean garden'\n>>> task.subtasks()[0]['title'] # > 'Find a water'\n\n**Check the task:**\n\n>>> subtask['status'] # > 'UNCHECKED'\n>>> subtask.check()\n>>> subtask['status'] # > 'CHECKED'\n\n**Delete the task:**\n\n>>> subtask.destroy()\n>>> len(user.tasks()) # > 2\n>>> len(user.tasks(refresh=True)) # > 1\n...\n\nLists(categories) management:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n>>> from anydo_api.client import Client\n>>> from anydo_api.category import Category\n>>> from anydo_api.task import Task\n\n>>> user = Client(email='name@garlic.com', password='password').get_user()\n\n**List categories:**\n\n>>> list(map(lambda category: category['name'], user.categories())) # > ['GROCERY LIST', 'PERSONAL ERRANDS']\n\n**Create a new category:**\n\n>>> category = Category.create(user=user, name='Home')\n>>> list(map(lambda category: category['name'], user.categories(refresh=True)))\n# > ['GROCERY LIST', 'PERSONAL ERRANDS', 'Home']\n\n**List category tasks:**\n\n>>> category.tasks() # > []\n>>> task = Task.create(user=user, title='In new category', priority='Normal')\n>>> category.add_task(task)\n>>> category.tasks()[0]['title'] # > 'In new category'\n\n**Make category default one, for new tasks:**\n\n>>> category.default # > False\n>>> category.mark_default()\n>>> category.default # > True\n\n**Delete the category:**\n\n>>> category.destroy()\n>>> list(map(lambda category: category['name'], user.categories(refresh=True)))\n# > ['GROCERY LIST', 'PERSONAL ERRANDS']\n...\n\n& More complex example, task sharing:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\nAssume we have two users: `Paca` and `Vaca`.\nUser `Paca` has a one task it wants to share with `Vaca`.\n\n>>> task = paca.tasks()[0]\n>>> task['title'] # > 'Paca Task'\n>>> task.members() # > [{'paca@garlic.com': 'Paca'}]\n\n**Share task with user:**\n\n>>> task.share_with(vaca)\n\n**Until task isn't approved it isn't shared:**\n\n>>> vaca.tasks() # > []\n>>> vaca.pending_tasks()\n# > [{'id': 'm8cEmJJFXgYWrr3Xplj9zw==', 'invitedBy': {'name': 'Paca', 'email': 'paca@garlic.com', 'picture': None}, 'message': None, 'title': 'Paca Task'}]\n\n**Approve the pending task:**\n\n>>> vaca.approve_pending_task(pending_task=vaca.pending_tasks()[0])\n\n**And now it is shared:**\n\n>>> vaca.tasks()[0]['title'] # > 'Paca Task'\n\n>>> task.members()\n[{'paca@garlic.com': 'Paca'}, {'vaca@garlic.com': 'vaca@garlic.com'}]\n...\n\nFor other methods and full support API check the docs or source code..\n\nContributions\n-------------\n\nFeedback, issue reports and feature/pull requests are greatly appreciated!\nYou could post them `into issues <https://github.com/aliaksandrb/anydo_api/issues>`_.\n\nGeneric guide for contributions is placed `here <https://github.com/aliaksandrb/anydo_api/blob/master/CONTRIBUTING.rst>`_.\n\nThanks!\n\n* MIT license\n* Automaticaly generated documentation: http://anydo-api.readthedocs.org/en/latest/.\n\n\n\n\nHistory\n-------\n\n0.0.2 (2017-04-25)\n---------------------\n\n* Fix issue with an uuid generation on Py3.\n\n0.0.1 (2015-10-12)\n---------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aliaksandrb/anydo_api", "keywords": "anydo,anydo_api,anydo_client", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "anydo_api", "package_url": "https://pypi.org/project/anydo_api/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/anydo_api/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/aliaksandrb/anydo_api"}, "release_url": "https://pypi.org/project/anydo_api/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Unofficial AnyDo API client in object-oriented style.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/aliaksandrb/anydo_api\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/aliaksandrb/anydo_api.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/966af4d956f9d0451e91c45ee2c32e3d6d8182c0/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f616c69616b73616e6472622f616e79646f5f6170692e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/anydo_api\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/anydo_api.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f01f35f7ddb9b47176b957ec300565529cc43ad5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616e79646f5f6170692e737667\"></a>\n<a href=\"http://anydo-api.readthedocs.org/en/latest/\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/anydo-api/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd03482452c9e204942383cb082a1c386f1c91f3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f616e79646f2d6170692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>This simple client library provides access to basic features of <a href=\"http://www.any.do/\" rel=\"nofollow\">AnyDo</a> task manager in a\neasy and object-oriented style.</p>\n<p>It could be used for own projects integration\u2019s or as a tool for migration from one task manager to another.</p>\n<div id=\"supported-features\">\n<h2>Supported Features</h2>\n<ul>\n<li>User CRUD operations</li>\n<li>Personal tasks CRUD and sharing</li>\n<li>Personal lists(categories) CRUD</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Automatically testing for <cite>Python 2.7</cite> and <cite>Python 3.4</cite>.</li>\n<li>Uses <cite>requests&gt;=2.8.0</cite> for remote API calls.</li>\n</ul>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>$ pip install anydo_api\n</pre>\n<p>or directly from the repository:</p>\n<pre>$ git clone https://github.com/aliaksandrb/anydo_api\n$ cd anydo_api\n$ python setup.py install\n</pre>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage &amp; examples:</h2>\n<p>Currently not all functionality from the original <cite>Chrome/Android/..</cite> clients are supported.\nSome of them just have no sense for console client, some just not ready yet :)</p>\n<p>Here is what we have for now:</p>\n<div id=\"user-management\">\n<h3>User management:</h3>\n<pre>&gt;&gt;&gt; from anydo_api.client import Client\n</pre>\n<p><strong>Create totally new user:</strong></p>\n<pre>&gt;&gt;&gt; user = Client.create_user(name='Garlic', email='name@garlic.com', password='password')\n</pre>\n<p><strong>Access to its attributes both ways:</strong></p>\n<pre>&gt;&gt;&gt; user['name'] # &gt; 'Garlic'\n&gt;&gt;&gt; user.email # &gt; 'name@garlic.com'\n</pre>\n<p><strong>Change the name:</strong></p>\n<pre>&gt;&gt;&gt; user['name'] = 'Tomato'\n&gt;&gt;&gt; user.save() # changes are pushed to server\n&gt;&gt;&gt; user['name'] # &gt; 'Tomato'\n</pre>\n<p><strong>Login with existent account:</strong></p>\n<pre>&gt;&gt;&gt; user = Client(email='name@garlic.com', password='password').get_user()\n&gt;&gt;&gt; user['name'] # &gt; 'Tomato'\n</pre>\n<p><strong>Get the possible updates from the server (in case if user was already instantiated but changed by other client/app)</strong></p>\n<pre>&gt;&gt;&gt; user.refresh()\n</pre>\n<p><strong>Delete your account completely. Warning! Can\u2019t be undone:</strong></p>\n<pre>&gt;&gt;&gt; user.destroy()\n...\n</pre>\n</div>\n<div id=\"tasks-management\">\n<h3>Tasks management:</h3>\n<pre>&gt;&gt;&gt; from anydo_api.client import Client\n&gt;&gt;&gt; from anydo_api.task import Task\n</pre>\n<pre>&gt;&gt;&gt; user = Client(email='name@garlic.com', password='password').get_user()\n</pre>\n<p><strong>List tasks:</strong></p>\n<pre>&gt;&gt;&gt; user.tasks() # &gt; []\n</pre>\n<p><strong>Create a new task:</strong></p>\n<pre>&gt;&gt;&gt; task = Task.create(\n               user=user,\n               title='Clean garden',\n               priority='High',\n               category='Personal',\n               repeatingMethod='TASK_REPEAT_OFF')\n</pre>\n<pre>&gt;&gt;&gt; task['assignedTo'] # &gt; 'name@garlic.com'\n&gt;&gt;&gt; task.status # &gt; 'UNCHECKED'\n</pre>\n<p><strong>Add note for task:</strong></p>\n<pre>&gt;&gt;&gt; task.add_note('first task')\n&gt;&gt;&gt; task.notes() # &gt; ['first task']\n</pre>\n<p><strong>Add a subtasks:</strong></p>\n<pre>&gt;&gt;&gt; subtask = Task.create(user=user, title='Find a water', priority='Normal')\n&gt;&gt;&gt; task.add_subtask(subtask)\n&gt;&gt;&gt; subtask.parent()['title'] # &gt; 'Clean garden'\n&gt;&gt;&gt; task.subtasks()[0]['title'] # &gt; 'Find a water'\n</pre>\n<p><strong>Check the task:</strong></p>\n<pre>&gt;&gt;&gt; subtask['status'] # &gt; 'UNCHECKED'\n&gt;&gt;&gt; subtask.check()\n&gt;&gt;&gt; subtask['status'] # &gt; 'CHECKED'\n</pre>\n<p><strong>Delete the task:</strong></p>\n<pre>&gt;&gt;&gt; subtask.destroy()\n&gt;&gt;&gt; len(user.tasks()) # &gt; 2\n&gt;&gt;&gt; len(user.tasks(refresh=True)) # &gt; 1\n...\n</pre>\n</div>\n<div id=\"lists-categories-management\">\n<h3>Lists(categories) management:</h3>\n<pre>&gt;&gt;&gt; from anydo_api.client import Client\n&gt;&gt;&gt; from anydo_api.category import Category\n&gt;&gt;&gt; from anydo_api.task import Task\n</pre>\n<pre>&gt;&gt;&gt; user = Client(email='name@garlic.com', password='password').get_user()\n</pre>\n<p><strong>List categories:</strong></p>\n<pre>&gt;&gt;&gt; list(map(lambda category: category['name'], user.categories())) # &gt; ['GROCERY LIST', 'PERSONAL ERRANDS']\n</pre>\n<p><strong>Create a new category:</strong></p>\n<pre>&gt;&gt;&gt; category = Category.create(user=user, name='Home')\n&gt;&gt;&gt; list(map(lambda category: category['name'], user.categories(refresh=True)))\n# &gt; ['GROCERY LIST', 'PERSONAL ERRANDS', 'Home']\n</pre>\n<p><strong>List category tasks:</strong></p>\n<pre>&gt;&gt;&gt; category.tasks() # &gt; []\n&gt;&gt;&gt; task = Task.create(user=user, title='In new category', priority='Normal')\n&gt;&gt;&gt; category.add_task(task)\n&gt;&gt;&gt; category.tasks()[0]['title'] # &gt; 'In new category'\n</pre>\n<p><strong>Make category default one, for new tasks:</strong></p>\n<pre>&gt;&gt;&gt; category.default # &gt; False\n&gt;&gt;&gt; category.mark_default()\n&gt;&gt;&gt; category.default # &gt; True\n</pre>\n<p><strong>Delete the category:</strong></p>\n<pre>&gt;&gt;&gt; category.destroy()\n&gt;&gt;&gt; list(map(lambda category: category['name'], user.categories(refresh=True)))\n# &gt; ['GROCERY LIST', 'PERSONAL ERRANDS']\n...\n</pre>\n</div>\n<div id=\"more-complex-example-task-sharing\">\n<h3>&amp; More complex example, task sharing:</h3>\n<p>Assume we have two users: <cite>Paca</cite> and <cite>Vaca</cite>.\nUser <cite>Paca</cite> has a one task it wants to share with <cite>Vaca</cite>.</p>\n<pre>&gt;&gt;&gt; task = paca.tasks()[0]\n&gt;&gt;&gt; task['title'] # &gt; 'Paca Task'\n&gt;&gt;&gt; task.members() # &gt; [{'paca@garlic.com': 'Paca'}]\n</pre>\n<p><strong>Share task with user:</strong></p>\n<pre>&gt;&gt;&gt; task.share_with(vaca)\n</pre>\n<p><strong>Until task isn\u2019t approved it isn\u2019t shared:</strong></p>\n<pre>&gt;&gt;&gt; vaca.tasks() # &gt; []\n&gt;&gt;&gt; vaca.pending_tasks()\n# &gt; [{'id': 'm8cEmJJFXgYWrr3Xplj9zw==', 'invitedBy': {'name': 'Paca', 'email': 'paca@garlic.com', 'picture': None}, 'message': None, 'title': 'Paca Task'}]\n</pre>\n<p><strong>Approve the pending task:</strong></p>\n<pre>&gt;&gt;&gt; vaca.approve_pending_task(pending_task=vaca.pending_tasks()[0])\n</pre>\n<p><strong>And now it is shared:</strong></p>\n<pre>&gt;&gt;&gt; vaca.tasks()[0]['title'] # &gt; 'Paca Task'\n</pre>\n<pre>&gt;&gt;&gt; task.members()\n[{'paca@garlic.com': 'Paca'}, {'vaca@garlic.com': 'vaca@garlic.com'}]\n...\n</pre>\n<p>For other methods and full support API check the docs or source code..</p>\n</div>\n</div>\n<div id=\"contributions\">\n<h2>Contributions</h2>\n<p>Feedback, issue reports and feature/pull requests are greatly appreciated!\nYou could post them <a href=\"https://github.com/aliaksandrb/anydo_api/issues\" rel=\"nofollow\">into issues</a>.</p>\n<p>Generic guide for contributions is placed <a href=\"https://github.com/aliaksandrb/anydo_api/blob/master/CONTRIBUTING.rst\" rel=\"nofollow\">here</a>.</p>\n<p>Thanks!</p>\n<ul>\n<li>MIT license</li>\n<li>Automaticaly generated documentation: <a href=\"http://anydo-api.readthedocs.org/en/latest/\" rel=\"nofollow\">http://anydo-api.readthedocs.org/en/latest/</a>.</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n</div>\n<div id=\"id1\">\n<h2>0.0.2 (2017-04-25)</h2>\n<ul>\n<li>Fix issue with an uuid generation on Py3.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h2>0.0.1 (2015-10-12)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2828989, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "7408025f46bc0969186c75b6b0e30fcf", "sha256": "512a8f356bac6105ed0d146c9441db4919b16a4ef6927c200de9d780b5d15b74"}, "downloads": -1, "filename": "anydo_api-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7408025f46bc0969186c75b6b0e30fcf", "packagetype": "bdist_wheel", "python_version": "3.4", "requires_python": null, "size": 17255, "upload_time": "2015-10-30T19:27:05", "upload_time_iso_8601": "2015-10-30T19:27:05.983929Z", "url": "https://files.pythonhosted.org/packages/86/ed/f7d3694eca6a00c779e6afb884fa83987e512c4b977e51410ae69f3a9e6a/anydo_api-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "950e66b9709247a8fc5a9c8f4c241331", "sha256": "2aa307a312147d93f1165e312326e5282019de2439045cf15bfbea02b42c8239"}, "downloads": -1, "filename": "anydo_api-0.0.1.tar.gz", "has_sig": false, "md5_digest": "950e66b9709247a8fc5a9c8f4c241331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 55022, "upload_time": "2015-10-30T19:26:51", "upload_time_iso_8601": "2015-10-30T19:26:51.522139Z", "url": "https://files.pythonhosted.org/packages/74/31/d292d9b5c55e6003cb7dbea27d6a0c39cb8b4a5d673d5e5f8adfa1619363/anydo_api-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ed1f81a7d1f7ac65edda158309c602ab", "sha256": "dee8a71c1f90ca71023084a757948bb142135209d6ba2c703b10e903a01db001"}, "downloads": -1, "filename": "anydo_api-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ed1f81a7d1f7ac65edda158309c602ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54876, "upload_time": "2017-04-25T14:23:48", "upload_time_iso_8601": "2017-04-25T14:23:48.344553Z", "url": "https://files.pythonhosted.org/packages/0f/53/59d1f5721d53ec4c76d0dee4e0ab4da1a84bf9f42c75c297da8dbf03cfbc/anydo_api-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed1f81a7d1f7ac65edda158309c602ab", "sha256": "dee8a71c1f90ca71023084a757948bb142135209d6ba2c703b10e903a01db001"}, "downloads": -1, "filename": "anydo_api-0.0.2.tar.gz", "has_sig": false, "md5_digest": "ed1f81a7d1f7ac65edda158309c602ab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 54876, "upload_time": "2017-04-25T14:23:48", "upload_time_iso_8601": "2017-04-25T14:23:48.344553Z", "url": "https://files.pythonhosted.org/packages/0f/53/59d1f5721d53ec4c76d0dee4e0ab4da1a84bf9f42c75c297da8dbf03cfbc/anydo_api-0.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:56 2020"}