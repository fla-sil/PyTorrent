{"info": {"author": "Thomas Pointhuber", "author_email": "thomas.pointhuber@gmx.at", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"], "description": "This repository contains scripts to generate custom KiCAD footprints using python, and a framework which allows us to\ncreate custom KiCAD footprint. A big bunch of footprints of the KiCad library was developed using this framework.\n\n# KicadModTree\n\n**Licence:** GNU GPLv3+\n\n**Maintainer:** Thomas Pointhuber\n\n[![Build Status](https://travis-ci.org/pointhi/kicad-footprint-generator.svg?branch=master)](https://travis-ci.org/pointhi/kicad-footprint-generator)\n[![Code Climate](https://codeclimate.com/github/pointhi/kicad-footprint-generator/badges/gpa.svg)](https://codeclimate.com/github/pointhi/kicad-footprint-generator)\n[![Documentation Status](https://readthedocs.org/projects/kicad-footprint-generator/badge/?version=latest)](http://kicad-footprint-generator.readthedocs.io/en/latest/?badge=latest)\n\n**Supports:** Python 2.7 and 3.3+\n\n## About\n\nI started drawing a bunch of similar footprints for KiCAD, like connectors which are mainly one base shape, and different\namount of pins. To be able to update/improve those footprints quickly I decided to write my own footprint generator Framework,\nto allow simple creation of easy as well complex shapes.\n\nThis is my second approach (the first one can be found in the git history). This solution should be able to be easy to\nuse, to read and also be easy to expand with custom nodes.\n\n\n## Overview\n\nThis framework is mainly based on the idea of scripted CAD systems (for example OpenSCAD). This means, everything is a\nnode, and can be structured like a tree. In other words, you can group parts of the footprint, and translate them in any\nway you want. Also cloning & co. is no problem anymore because of this concept.\n\nTo be able to create custom Nodes, I separated the system in two parts. Base nodes, which represents simple structures\nand also be used by KiCAD itself, and specialized nodes which alter the behaviour of base nodes (for example positioning),\nor represent a specialized usage of base nodes (for example RectLine).\n\nWhen you serialize your footprint, the serialize command only has to handle base nodes, because all other nodes are based\nupon the base nodes. This allows us to write specialized nodes without worrying about the FileHandlers or other core systems.\nYou simply create your special node, and the framework knows how to handle it seamlessly.\n\nPlease look into the **[Documentation](http://kicad-footprint-generator.readthedocs.io/en/latest/)** for further details\n\n```\nKicadModTree        - The KicadModTree framework which is used for footprint generation\ndocs                - Files required to generate a sphinx documentation\nscripts             - scripts which are generating footprints based on this library\n```\n\n## Development\n\n### Install development Dependencies\n\n```sh\nmanage.sh update_dev_packages\n```\n\n### run tests\n\n```sh\nmanage.sh tests\n```\n\n## Example Script\n\n```python\nfrom KicadModTree import *\n\nfootprint_name = \"example_footprint\"\n\n# init kicad footprint\nkicad_mod = Footprint(footprint_name)\nkicad_mod.setDescription(\"A example footprint\")\nkicad_mod.setTags(\"example\")\n\n# set general values\nkicad_mod.append(Text(type='reference', text='REF**', at=[0, -3], layer='F.SilkS'))\nkicad_mod.append(Text(type='value', text=footprint_name, at=[1.5, 3], layer='F.Fab'))\n\n# create silscreen\nkicad_mod.append(RectLine(start=[-2, -2], end=[5, 2], layer='F.SilkS'))\n\n# create courtyard\nkicad_mod.append(RectLine(start=[-2.25, -2.25], end=[5.25, 2.25], layer='F.CrtYd'))\n\n# create pads\nkicad_mod.append(Pad(number=1, type=Pad.TYPE_THT, shape=Pad.SHAPE_RECT,\n                     at=[0, 0], size=[2, 2], drill=1.2, layers=Pad.LAYERS_THT))\nkicad_mod.append(Pad(number=2, type=Pad.TYPE_THT, shape=Pad.SHAPE_CIRCLE,\n                     at=[3, 0], size=[2, 2], drill=1.2, layers=Pad.LAYERS_THT))\n\n# add model\nkicad_mod.append(Model(filename=\"example.3dshapes/example_footprint.wrl\",\n                       at=[0, 0, 0], scale=[1, 1, 1], rotate=[0, 0, 0]))\n\n# output kicad model\nfile_handler = KicadFileHandler(kicad_mod)\nfile_handler.writeFile('example_footprint.kicad_mod')\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pointhi/kicad-footprint-generator", "keywords": "", "license": "GPL3+", "maintainer": "", "maintainer_email": "", "name": "KicadModTree", "package_url": "https://pypi.org/project/KicadModTree/", "platform": "", "project_url": "https://pypi.org/project/KicadModTree/", "project_urls": {"Homepage": "https://github.com/pointhi/kicad-footprint-generator"}, "release_url": "https://pypi.org/project/KicadModTree/1.0.3/", "requires_dist": null, "requires_python": "", "summary": "creating kicad footprints using python scripts", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This repository contains scripts to generate custom KiCAD footprints using python, and a framework which allows us to\ncreate custom KiCAD footprint. A big bunch of footprints of the KiCad library was developed using this framework.</p>\n<h1>KicadModTree</h1>\n<p><strong>Licence:</strong> GNU GPLv3+</p>\n<p><strong>Maintainer:</strong> Thomas Pointhuber</p>\n<p><a href=\"https://travis-ci.org/pointhi/kicad-footprint-generator\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c59c6c0a4a48ceff477c7bb37dbdcb8f33f42f67/68747470733a2f2f7472617669732d63692e6f72672f706f696e7468692f6b696361642d666f6f747072696e742d67656e657261746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/pointhi/kicad-footprint-generator\" rel=\"nofollow\"><img alt=\"Code Climate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f6f90b619e2d0c3b94e48c29548a4fe02eaa5e2/68747470733a2f2f636f6465636c696d6174652e636f6d2f6769746875622f706f696e7468692f6b696361642d666f6f747072696e742d67656e657261746f722f6261646765732f6770612e737667\"></a>\n<a href=\"http://kicad-footprint-generator.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/306498ee61a1a7802312287cb36fec296a436af0/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6b696361642d666f6f747072696e742d67656e657261746f722f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><strong>Supports:</strong> Python 2.7 and 3.3+</p>\n<h2>About</h2>\n<p>I started drawing a bunch of similar footprints for KiCAD, like connectors which are mainly one base shape, and different\namount of pins. To be able to update/improve those footprints quickly I decided to write my own footprint generator Framework,\nto allow simple creation of easy as well complex shapes.</p>\n<p>This is my second approach (the first one can be found in the git history). This solution should be able to be easy to\nuse, to read and also be easy to expand with custom nodes.</p>\n<h2>Overview</h2>\n<p>This framework is mainly based on the idea of scripted CAD systems (for example OpenSCAD). This means, everything is a\nnode, and can be structured like a tree. In other words, you can group parts of the footprint, and translate them in any\nway you want. Also cloning &amp; co. is no problem anymore because of this concept.</p>\n<p>To be able to create custom Nodes, I separated the system in two parts. Base nodes, which represents simple structures\nand also be used by KiCAD itself, and specialized nodes which alter the behaviour of base nodes (for example positioning),\nor represent a specialized usage of base nodes (for example RectLine).</p>\n<p>When you serialize your footprint, the serialize command only has to handle base nodes, because all other nodes are based\nupon the base nodes. This allows us to write specialized nodes without worrying about the FileHandlers or other core systems.\nYou simply create your special node, and the framework knows how to handle it seamlessly.</p>\n<p>Please look into the <strong><a href=\"http://kicad-footprint-generator.readthedocs.io/en/latest/\" rel=\"nofollow\">Documentation</a></strong> for further details</p>\n<pre><code>KicadModTree        - The KicadModTree framework which is used for footprint generation\ndocs                - Files required to generate a sphinx documentation\nscripts             - scripts which are generating footprints based on this library\n</code></pre>\n<h2>Development</h2>\n<h3>Install development Dependencies</h3>\n<pre>manage.sh update_dev_packages\n</pre>\n<h3>run tests</h3>\n<pre>manage.sh tests\n</pre>\n<h2>Example Script</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">KicadModTree</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">footprint_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"example_footprint\"</span>\n\n<span class=\"c1\"># init kicad footprint</span>\n<span class=\"n\">kicad_mod</span> <span class=\"o\">=</span> <span class=\"n\">Footprint</span><span class=\"p\">(</span><span class=\"n\">footprint_name</span><span class=\"p\">)</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">setDescription</span><span class=\"p\">(</span><span class=\"s2\">\"A example footprint\"</span><span class=\"p\">)</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">setTags</span><span class=\"p\">(</span><span class=\"s2\">\"example\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set general values</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'reference'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'REF**'</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"s1\">'F.SilkS'</span><span class=\"p\">))</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'value'</span><span class=\"p\">,</span> <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">footprint_name</span><span class=\"p\">,</span> <span class=\"n\">at</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">1.5</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"s1\">'F.Fab'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># create silscreen</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RectLine</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"s1\">'F.SilkS'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># create courtyard</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">RectLine</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">2.25</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">2.25</span><span class=\"p\">],</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">5.25</span><span class=\"p\">,</span> <span class=\"mf\">2.25</span><span class=\"p\">],</span> <span class=\"n\">layer</span><span class=\"o\">=</span><span class=\"s1\">'F.CrtYd'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># create pads</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Pad</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">TYPE_THT</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">SHAPE_RECT</span><span class=\"p\">,</span>\n                     <span class=\"n\">at</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">drill</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">LAYERS_THT</span><span class=\"p\">))</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Pad</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">TYPE_THT</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">SHAPE_CIRCLE</span><span class=\"p\">,</span>\n                     <span class=\"n\">at</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">drill</span><span class=\"o\">=</span><span class=\"mf\">1.2</span><span class=\"p\">,</span> <span class=\"n\">layers</span><span class=\"o\">=</span><span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">LAYERS_THT</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># add model</span>\n<span class=\"n\">kicad_mod</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s2\">\"example.3dshapes/example_footprint.wrl\"</span><span class=\"p\">,</span>\n                       <span class=\"n\">at</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">rotate</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># output kicad model</span>\n<span class=\"n\">file_handler</span> <span class=\"o\">=</span> <span class=\"n\">KicadFileHandler</span><span class=\"p\">(</span><span class=\"n\">kicad_mod</span><span class=\"p\">)</span>\n<span class=\"n\">file_handler</span><span class=\"o\">.</span><span class=\"n\">writeFile</span><span class=\"p\">(</span><span class=\"s1\">'example_footprint.kicad_mod'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 4129557, "releases": {"1.0.3": [{"comment_text": "", "digests": {"md5": "f39053c1490ded524a189413a649f324", "sha256": "cb6ac2eee8216bf21c250eb9147ee6b9248725a2f57d51b43a6695ca8d153bd1"}, "downloads": -1, "filename": "KicadModTree-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f39053c1490ded524a189413a649f324", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59944, "upload_time": "2018-08-02T17:38:23", "upload_time_iso_8601": "2018-08-02T17:38:23.272185Z", "url": "https://files.pythonhosted.org/packages/21/3d/7a2c7d28d3af0f7c1020313a71646afa0ecaf51077143e9fbec7c804ecda/KicadModTree-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4bec9366d65ec81c68669d064cb1e5b", "sha256": "fe83ed3aacfa029f6b1500635de6a85bd05d23e1a2077dc42f6cbec59274e72b"}, "downloads": -1, "filename": "KicadModTree-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b4bec9366d65ec81c68669d064cb1e5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35427, "upload_time": "2018-08-02T17:38:25", "upload_time_iso_8601": "2018-08-02T17:38:25.031584Z", "url": "https://files.pythonhosted.org/packages/32/bf/03d74cafe091fa62cb7f96134b4ea9b32c3a328727e492fc362e263f2875/KicadModTree-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f39053c1490ded524a189413a649f324", "sha256": "cb6ac2eee8216bf21c250eb9147ee6b9248725a2f57d51b43a6695ca8d153bd1"}, "downloads": -1, "filename": "KicadModTree-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f39053c1490ded524a189413a649f324", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59944, "upload_time": "2018-08-02T17:38:23", "upload_time_iso_8601": "2018-08-02T17:38:23.272185Z", "url": "https://files.pythonhosted.org/packages/21/3d/7a2c7d28d3af0f7c1020313a71646afa0ecaf51077143e9fbec7c804ecda/KicadModTree-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4bec9366d65ec81c68669d064cb1e5b", "sha256": "fe83ed3aacfa029f6b1500635de6a85bd05d23e1a2077dc42f6cbec59274e72b"}, "downloads": -1, "filename": "KicadModTree-1.0.3.tar.gz", "has_sig": false, "md5_digest": "b4bec9366d65ec81c68669d064cb1e5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35427, "upload_time": "2018-08-02T17:38:25", "upload_time_iso_8601": "2018-08-02T17:38:25.031584Z", "url": "https://files.pythonhosted.org/packages/32/bf/03d74cafe091fa62cb7f96134b4ea9b32c3a328727e492fc362e263f2875/KicadModTree-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:48 2020"}