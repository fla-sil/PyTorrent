{"info": {"author": "Brian Hartvigsen", "author_email": "bhartvigsen@opendns.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "##################\ndnspython-dnscrypt\n##################\n\nThis library is designed to make using DNSCrypt in Python easy and compatible\nwith dnspython_.  It provides a ``dns.resolver.Resolver``-style interface which\nmixes-in the ``dns.query.udp`` and ``dns.query.tcp`` functions.\n\n>>> import dnscrypt\n>>> r = dnscrypt.Resolver('208.67.222.222', '2.dnscrypt-cert.opendns.com',\n... 'B735:1140:206F:225D:3E2B:D822:D7FD:691E:A1C3:3CC8:D666:8D0C:BE04:BFAB:CA43:FB79',\n... port=53, timeout=5)\n>>> print r.query('www.google.com')\n<dns.resolver.Answer object at 0x103b6f450>\n>>> import dns.message\n>>> r.udp(dns.message.make_query('google.com', 'A'))\n<DNS message, ID 16075>\n\nClass Methods\n=============\n\n``__init__(self, address, provider_name, provider_pk, private_key=None, port=53, timeout=5)``\n---------------------------------------------------------------------------------------------\n\naddress\n    The IP address of the DNSCrypt resolver\nport\n    The port to use for communication with the DNSCrypt resolver\nprovider_name\n    The provider name for the DNSCrypt resolver.  Takes the format ``<version>.dnscrypt-cert.<zone>``.\nprovider_pk\n    The provider's hex-encoded public key or DNS hostname where to retreive the public key\nprivate_key\n    A hex-encoded private key if you want to reuse a key you already have.  Otherwise,\n    a new key will be generated for each Resolver instance.\ntimeout\n    Timeout in seconds for DNS lookups\n\n\n``address``, ``provider_name``, and ``provider_pk`` are required.  All other\narguments are optional.\n\n``query(qname, rdtype=1, rdclass=1, tcp=False, source=None, raise_on_no_answer=True, source_port=0)``\n-----------------------------------------------------------------------------------------------------\n\nAnalogous to dns.resolver.Resolver.query_ for dnspython_.\n\n``tcp(self, query, timeout=None, af=None, source=None, source_port=0, one_rr_per_rrset=False)``\n-----------------------------------------------------------------------------------------------\n\nAnalogous to dns.query.tcp_ for dnspython_.  There is no ``where`` argument,\nbut is otherwise identical in function/form.\n\n``udp(self, query, timeout=None, af=None, source=None, source_port=0, ignore_unexpected=False, one_rr_per_rrset=False)``\n------------------------------------------------------------------------------------------------------------------------\n\nAnalogous to dns.query.udp_ for dnspython_.  There is no ``where`` argument,\nbut is otherwise identical in function/form.\n\nDifferences from dnspython\n==========================\n\nThe biggest thing is that this is a very basic implementation of\n``dns.resolver.Resolver``.  While it's designed to look/feel the same, it is not a\ndrop in replacement. (e.g. I did not implement the\n``use_tsig``/``use_edns``/``set_flags`` functions, instead use\n``dns.message.Message`` and ``dnscrypt.resolver.tcp`` or\n``dnscrypt.resolver.udp``.)\n\n.. _dnspython: http://www.dnspython.org\n.. _dns.resolver.Resolver.query: http://www.dnspython.org/docs/1.15.0/dns.resolver.Resolver-class.html#query\n.. _dns.query.tcp: http://www.dnspython.org/docs/1.15.0/dns.query-module.html#tcp\n.. _dns.query.udp: http://www.dnspython.org/docs/1.15.0/dns.query-module.html#udp", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tresni/dnspython-dnscrypt", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "dnscrypt", "package_url": "https://pypi.org/project/dnscrypt/", "platform": "", "project_url": "https://pypi.org/project/dnscrypt/", "project_urls": {"Homepage": "https://github.com/tresni/dnspython-dnscrypt"}, "release_url": "https://pypi.org/project/dnscrypt/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "dnspython compatible DNSCrypt Resolver", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library is designed to make using DNSCrypt in Python easy and compatible\nwith <a href=\"http://www.dnspython.org\" rel=\"nofollow\">dnspython</a>.  It provides a <tt>dns.resolver.Resolver</tt>-style interface which\nmixes-in the <tt>dns.query.udp</tt> and <tt>dns.query.tcp</tt> functions.</p>\n<pre>&gt;&gt;&gt; import dnscrypt\n&gt;&gt;&gt; r = dnscrypt.Resolver('208.67.222.222', '2.dnscrypt-cert.opendns.com',\n... 'B735:1140:206F:225D:3E2B:D822:D7FD:691E:A1C3:3CC8:D666:8D0C:BE04:BFAB:CA43:FB79',\n... port=53, timeout=5)\n&gt;&gt;&gt; print r.query('www.google.com')\n&lt;dns.resolver.Answer object at 0x103b6f450&gt;\n&gt;&gt;&gt; import dns.message\n&gt;&gt;&gt; r.udp(dns.message.make_query('google.com', 'A'))\n&lt;DNS message, ID 16075&gt;\n</pre>\n<div id=\"class-methods\">\n<h2>Class Methods</h2>\n<div id=\"init-self-address-provider-name-provider-pk-private-key-none-port-53-timeout-5\">\n<h3><tt>__init__(self, address, provider_name, provider_pk, private_key=None, port=53, timeout=5)</tt></h3>\n<dl>\n<dt>address</dt>\n<dd>The IP address of the DNSCrypt resolver</dd>\n<dt>port</dt>\n<dd>The port to use for communication with the DNSCrypt resolver</dd>\n<dt>provider_name</dt>\n<dd>The provider name for the DNSCrypt resolver.  Takes the format <tt><span class=\"pre\">&lt;version&gt;.dnscrypt-cert.&lt;zone&gt;</span></tt>.</dd>\n<dt>provider_pk</dt>\n<dd>The provider\u2019s hex-encoded public key or DNS hostname where to retreive the public key</dd>\n<dt>private_key</dt>\n<dd>A hex-encoded private key if you want to reuse a key you already have.  Otherwise,\na new key will be generated for each Resolver instance.</dd>\n<dt>timeout</dt>\n<dd>Timeout in seconds for DNS lookups</dd>\n</dl>\n<p><tt>address</tt>, <tt>provider_name</tt>, and <tt>provider_pk</tt> are required.  All other\narguments are optional.</p>\n</div>\n<div id=\"query-qname-rdtype-1-rdclass-1-tcp-false-source-none-raise-on-no-answer-true-source-port-0\">\n<h3><tt>query(qname, rdtype=1, rdclass=1, tcp=False, source=None, raise_on_no_answer=True, source_port=0)</tt></h3>\n<p>Analogous to <a href=\"http://www.dnspython.org/docs/1.15.0/dns.resolver.Resolver-class.html#query\" rel=\"nofollow\">dns.resolver.Resolver.query</a> for <a href=\"http://www.dnspython.org\" rel=\"nofollow\">dnspython</a>.</p>\n</div>\n<div id=\"tcp-self-query-timeout-none-af-none-source-none-source-port-0-one-rr-per-rrset-false\">\n<h3><tt>tcp(self, query, timeout=None, af=None, source=None, source_port=0, one_rr_per_rrset=False)</tt></h3>\n<p>Analogous to <a href=\"http://www.dnspython.org/docs/1.15.0/dns.query-module.html#tcp\" rel=\"nofollow\">dns.query.tcp</a> for <a href=\"http://www.dnspython.org\" rel=\"nofollow\">dnspython</a>.  There is no <tt>where</tt> argument,\nbut is otherwise identical in function/form.</p>\n</div>\n<div id=\"udp-self-query-timeout-none-af-none-source-none-source-port-0-ignore-unexpected-false-one-rr-per-rrset-false\">\n<h3><tt>udp(self, query, timeout=None, af=None, source=None, source_port=0, ignore_unexpected=False, one_rr_per_rrset=False)</tt></h3>\n<p>Analogous to <a href=\"http://www.dnspython.org/docs/1.15.0/dns.query-module.html#udp\" rel=\"nofollow\">dns.query.udp</a> for <a href=\"http://www.dnspython.org\" rel=\"nofollow\">dnspython</a>.  There is no <tt>where</tt> argument,\nbut is otherwise identical in function/form.</p>\n</div>\n</div>\n<div id=\"differences-from-dnspython\">\n<h2>Differences from dnspython</h2>\n<p>The biggest thing is that this is a very basic implementation of\n<tt>dns.resolver.Resolver</tt>.  While it\u2019s designed to look/feel the same, it is not a\ndrop in replacement. (e.g. I did not implement the\n<tt>use_tsig</tt>/<tt>use_edns</tt>/<tt>set_flags</tt> functions, instead use\n<tt>dns.message.Message</tt> and <tt>dnscrypt.resolver.tcp</tt> or\n<tt>dnscrypt.resolver.udp</tt>.)</p>\n</div>\n\n          </div>"}, "last_serial": 3777800, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2d10449663315136567126b719ca2da7", "sha256": "694b77e64ed7cb186677baa368dd5bc102b3312b169952c29c52a17c6d2f6803"}, "downloads": -1, "filename": "dnscrypt-1.0.0-1.tar.gz", "has_sig": false, "md5_digest": "2d10449663315136567126b719ca2da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5128, "upload_time": "2017-12-23T11:27:52", "upload_time_iso_8601": "2017-12-23T11:27:52.789881Z", "url": "https://files.pythonhosted.org/packages/eb/3b/a15ce0a6c1a09e7182ff3c68f971f101ccd3e0f0a2f40c9bdae71ddacfc5/dnscrypt-1.0.0-1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "0522bf596b0c6aafbd7c123ebd98fd26", "sha256": "8ba0e824bf0515e962ffffcff9650b1d7f739e52114cf62b930e299450023720"}, "downloads": -1, "filename": "dnscrypt-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0522bf596b0c6aafbd7c123ebd98fd26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5192, "upload_time": "2018-04-18T16:29:28", "upload_time_iso_8601": "2018-04-18T16:29:28.773902Z", "url": "https://files.pythonhosted.org/packages/f1/39/9d9cea927a94410fef1a58e91e02203ab686ffb9e88e270c1d5b7b936c47/dnscrypt-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0522bf596b0c6aafbd7c123ebd98fd26", "sha256": "8ba0e824bf0515e962ffffcff9650b1d7f739e52114cf62b930e299450023720"}, "downloads": -1, "filename": "dnscrypt-1.0.1.tar.gz", "has_sig": false, "md5_digest": "0522bf596b0c6aafbd7c123ebd98fd26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5192, "upload_time": "2018-04-18T16:29:28", "upload_time_iso_8601": "2018-04-18T16:29:28.773902Z", "url": "https://files.pythonhosted.org/packages/f1/39/9d9cea927a94410fef1a58e91e02203ab686ffb9e88e270c1d5b7b936c47/dnscrypt-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:06 2020"}