{"info": {"author": "Stark Bank", "author_email": "developers@starkbank.com", "bugtrack_url": null, "classifiers": [], "description": "## A lightweight and fast pure Python ECDSA\n\n### Overview\n\nWe tried other Python libraries such as [python-ecdsa], [fast-ecdsa] and other less famous ones, but we didn't find anything that suited our needs. The first one was pure Python, but it was too slow. The second one mixed Python and C and it was really fast, but we were unable to use it in our current infrastructure, which required pure Python code.\n\nFor this reason, we decided to create something simple, compatible with OpenSSL and fast using elegant math such as Jacobian Coordinates to speed up the ECDSA. Starkbank-ECDSA is fully compatible with Python2 and Python3.\n\n### Installation\n\nTo install StarkBank`s ECDSA-Python, run:\n\n```sh\npip install starkbank-ecdsa\n```\n\n### Curves\n\nWe currently support `secp256k1`, but it's super easy to add more curves to the project. Just add them on `curve.py`\n\n### Speed\n\nWe ran a test on a MAC Pro i7 2017. The libraries were run 100 times and the averages displayed bellow were obtained:\n\n| Library            | sign          | verify  |\n| ------------------ |:-------------:| -------:|\n| [python-ecdsa]     |   121.3ms     | 65.1ms  |\n| [fast-ecdsa]       |     0.1ms     |  0.2ms  |\n| starkbank-ecdsa    |     4.1ms     |  7.8ms  |\n\nOur pure Python code cannot compete with C based libraries, but it's `6x faster` to verify and `23x faster` to sign than other pure Python libraries.\n\n### Sample Code\n\nHow to sign a json message for [Stark Bank]:\n\n```python\nfrom json import dumps\nfrom ellipticcurve.ecdsa import Ecdsa\nfrom ellipticcurve.privateKey import PrivateKey\n\n\n# Generate privateKey from PEM string\nprivateKey = PrivateKey.fromPem(\"\"\"\n    -----BEGIN EC PARAMETERS-----\n    BgUrgQQACg==\n    -----END EC PARAMETERS-----\n    -----BEGIN EC PRIVATE KEY-----\n    MHQCAQEEIODvZuS34wFbt0X53+P5EnSj6tMjfVK01dD1dgDH02RzoAcGBSuBBAAK\n    oUQDQgAE/nvHu/SQQaos9TUljQsUuKI15Zr5SabPrbwtbfT/408rkVVzq8vAisbB\n    RmpeRREXj5aog/Mq8RrdYy75W9q/Ig==\n    -----END EC PRIVATE KEY-----\n\"\"\")\n\n# Create message from json\nmessage = dumps({\n    \"transfers\": [\n        {\n            \"amount\": 100000000,\n            \"taxId\": \"594.739.480-42\",\n            \"name\": \"Daenerys Targaryen Stormborn\",\n            \"bankCode\": \"341\",\n            \"branchCode\": \"2201\",\n            \"accountNumber\": \"76543-8\",\n            \"tags\": [\"daenerys\", \"targaryen\", \"transfer-1-external-id\"]\n        }\n    ]\n})\n\nsignature = Ecdsa.sign(message, privateKey)\n\n# Generate Signature in base64. This result can be sent to Stark Bank in the request header as the Digital-Signature parameter.\nprint(signature.toBase64())\n\n# To double check if the message matches the signature, do this:\npublicKey = privateKey.publicKey()\n\nprint(Ecdsa.verify(message, signature, publicKey))\n\n```\n\nSimple use:\n\n```python\nfrom ellipticcurve.ecdsa import Ecdsa\nfrom ellipticcurve.privateKey import PrivateKey\n\n\n# Generate new Keys\nprivateKey = PrivateKey()\npublicKey = privateKey.publicKey()\n\nmessage = \"My test message\"\n\n# Generate Signature\nsignature = Ecdsa.sign(message, privateKey)\n\n# To verify if the signature is valid\nprint(Ecdsa.verify(message, signature, publicKey))\n\n```\n\n### OpenSSL\n\nThis library is compatible with OpenSSL, so you can use it to generate keys:\n\n```\nopenssl ecparam -name secp256k1 -genkey -out privateKey.pem\nopenssl ec -in privateKey.pem -pubout -out publicKey.pem\n```\n\nCreate a message.txt file and sign it:\n\n```\nopenssl dgst -sha256 -sign privateKey.pem -out signatureDer.txt message.txt\n```\n\nTo verify, do this:\n\n```python\nfrom ellipticcurve.ecdsa import Ecdsa\nfrom ellipticcurve.signature import Signature\nfrom ellipticcurve.publicKey import PublicKey\nfrom ellipticcurve.utils.file import File\n\n\npublicKeyPem = File.read(\"publicKey.pem\")\nsignatureDer = File.read(\"signatureDer.txt\", \"rb\")\nmessage = File.read(\"message.txt\")\n\npublicKey = PublicKey.fromPem(publicKeyPem)\nsignature = Signature.fromDer(signatureDer)\n\nprint(Ecdsa.verify(message, signature, publicKey))\n\n```\n\nYou can also verify it on terminal:\n\n```\nopenssl dgst -sha256 -verify publicKey.pem -signature signatureDer.txt message.txt\n```\n\nNOTE: If you want to create a Digital Signature to use with [Stark Bank], you need to convert the binary signature to base64.\n\n```\nopenssl base64 -in signatureDer.txt -out signatureBase64.txt\n```\n\nYou can do the same with this library:\n \n```python\nfrom ellipticcurve.signature import Signature\nfrom ellipticcurve.utils.file import File\n\n\nsignatureDer = File.read(\"signatureDer.txt\", \"rb\")\n\nsignature = Signature.fromDer(signatureDer)\n\nprint(signature.toBase64())\n```\n\n### Run unit tests\n\n```\npython3 -m unittest discover\npython2 -m unittest discover\n```\n\n\n[python-ecdsa]: https://github.com/warner/python-ecdsa\n[fast-ecdsa]: https://github.com/AntonKueltz/fastecdsa\n[Stark Bank]: https://starkbank.com", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/starkbank/ecdsa-python.git", "keywords": "ecdsa,elliptic curve,elliptic,curve,stark bank,starkbank,cryptograph", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "starkbank-ecdsa", "package_url": "https://pypi.org/project/starkbank-ecdsa/", "platform": "", "project_url": "https://pypi.org/project/starkbank-ecdsa/", "project_urls": {"Homepage": "https://github.com/starkbank/ecdsa-python.git"}, "release_url": "https://pypi.org/project/starkbank-ecdsa/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "A lightweight and fast pure python ECDSA library", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>A lightweight and fast pure Python ECDSA</h2>\n<h3>Overview</h3>\n<p>We tried other Python libraries such as <a href=\"https://github.com/warner/python-ecdsa\" rel=\"nofollow\">python-ecdsa</a>, <a href=\"https://github.com/AntonKueltz/fastecdsa\" rel=\"nofollow\">fast-ecdsa</a> and other less famous ones, but we didn't find anything that suited our needs. The first one was pure Python, but it was too slow. The second one mixed Python and C and it was really fast, but we were unable to use it in our current infrastructure, which required pure Python code.</p>\n<p>For this reason, we decided to create something simple, compatible with OpenSSL and fast using elegant math such as Jacobian Coordinates to speed up the ECDSA. Starkbank-ECDSA is fully compatible with Python2 and Python3.</p>\n<h3>Installation</h3>\n<p>To install StarkBank`s ECDSA-Python, run:</p>\n<pre>pip install starkbank-ecdsa\n</pre>\n<h3>Curves</h3>\n<p>We currently support <code>secp256k1</code>, but it's super easy to add more curves to the project. Just add them on <code>curve.py</code></p>\n<h3>Speed</h3>\n<p>We ran a test on a MAC Pro i7 2017. The libraries were run 100 times and the averages displayed bellow were obtained:</p>\n<table>\n<thead>\n<tr>\n<th>Library</th>\n<th align=\"center\">sign</th>\n<th align=\"right\">verify</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><a href=\"https://github.com/warner/python-ecdsa\" rel=\"nofollow\">python-ecdsa</a></td>\n<td align=\"center\">121.3ms</td>\n<td align=\"right\">65.1ms</td>\n</tr>\n<tr>\n<td><a href=\"https://github.com/AntonKueltz/fastecdsa\" rel=\"nofollow\">fast-ecdsa</a></td>\n<td align=\"center\">0.1ms</td>\n<td align=\"right\">0.2ms</td>\n</tr>\n<tr>\n<td>starkbank-ecdsa</td>\n<td align=\"center\">4.1ms</td>\n<td align=\"right\">7.8ms</td>\n</tr></tbody></table>\n<p>Our pure Python code cannot compete with C based libraries, but it's <code>6x faster</code> to verify and <code>23x faster</code> to sign than other pure Python libraries.</p>\n<h3>Sample Code</h3>\n<p>How to sign a json message for <a href=\"https://starkbank.com\" rel=\"nofollow\">Stark Bank</a>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">json</span> <span class=\"kn\">import</span> <span class=\"n\">dumps</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">Ecdsa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.privateKey</span> <span class=\"kn\">import</span> <span class=\"n\">PrivateKey</span>\n\n\n<span class=\"c1\"># Generate privateKey from PEM string</span>\n<span class=\"n\">privateKey</span> <span class=\"o\">=</span> <span class=\"n\">PrivateKey</span><span class=\"o\">.</span><span class=\"n\">fromPem</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    -----BEGIN EC PARAMETERS-----</span>\n<span class=\"s2\">    BgUrgQQACg==</span>\n<span class=\"s2\">    -----END EC PARAMETERS-----</span>\n<span class=\"s2\">    -----BEGIN EC PRIVATE KEY-----</span>\n<span class=\"s2\">    MHQCAQEEIODvZuS34wFbt0X53+P5EnSj6tMjfVK01dD1dgDH02RzoAcGBSuBBAAK</span>\n<span class=\"s2\">    oUQDQgAE/nvHu/SQQaos9TUljQsUuKI15Zr5SabPrbwtbfT/408rkVVzq8vAisbB</span>\n<span class=\"s2\">    RmpeRREXj5aog/Mq8RrdYy75W9q/Ig==</span>\n<span class=\"s2\">    -----END EC PRIVATE KEY-----</span>\n<span class=\"s2\">\"\"\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create message from json</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">dumps</span><span class=\"p\">({</span>\n    <span class=\"s2\">\"transfers\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"amount\"</span><span class=\"p\">:</span> <span class=\"mi\">100000000</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"taxId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"594.739.480-42\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Daenerys Targaryen Stormborn\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"bankCode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"341\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"branchCode\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2201\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"accountNumber\"</span><span class=\"p\">:</span> <span class=\"s2\">\"76543-8\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"daenerys\"</span><span class=\"p\">,</span> <span class=\"s2\">\"targaryen\"</span><span class=\"p\">,</span> <span class=\"s2\">\"transfer-1-external-id\"</span><span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Ecdsa</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">privateKey</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate Signature in base64. This result can be sent to Stark Bank in the request header as the Digital-Signature parameter.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">toBase64</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># To double check if the message matches the signature, do this:</span>\n<span class=\"n\">publicKey</span> <span class=\"o\">=</span> <span class=\"n\">privateKey</span><span class=\"o\">.</span><span class=\"n\">publicKey</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ecdsa</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">publicKey</span><span class=\"p\">))</span>\n</pre>\n<p>Simple use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">Ecdsa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.privateKey</span> <span class=\"kn\">import</span> <span class=\"n\">PrivateKey</span>\n\n\n<span class=\"c1\"># Generate new Keys</span>\n<span class=\"n\">privateKey</span> <span class=\"o\">=</span> <span class=\"n\">PrivateKey</span><span class=\"p\">()</span>\n<span class=\"n\">publicKey</span> <span class=\"o\">=</span> <span class=\"n\">privateKey</span><span class=\"o\">.</span><span class=\"n\">publicKey</span><span class=\"p\">()</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"s2\">\"My test message\"</span>\n\n<span class=\"c1\"># Generate Signature</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Ecdsa</span><span class=\"o\">.</span><span class=\"n\">sign</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">privateKey</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To verify if the signature is valid</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ecdsa</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">publicKey</span><span class=\"p\">))</span>\n</pre>\n<h3>OpenSSL</h3>\n<p>This library is compatible with OpenSSL, so you can use it to generate keys:</p>\n<pre><code>openssl ecparam -name secp256k1 -genkey -out privateKey.pem\nopenssl ec -in privateKey.pem -pubout -out publicKey.pem\n</code></pre>\n<p>Create a message.txt file and sign it:</p>\n<pre><code>openssl dgst -sha256 -sign privateKey.pem -out signatureDer.txt message.txt\n</code></pre>\n<p>To verify, do this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.ecdsa</span> <span class=\"kn\">import</span> <span class=\"n\">Ecdsa</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.signature</span> <span class=\"kn\">import</span> <span class=\"n\">Signature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.publicKey</span> <span class=\"kn\">import</span> <span class=\"n\">PublicKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.utils.file</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n\n<span class=\"n\">publicKeyPem</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"publicKey.pem\"</span><span class=\"p\">)</span>\n<span class=\"n\">signatureDer</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"signatureDer.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span>\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"message.txt\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">publicKey</span> <span class=\"o\">=</span> <span class=\"n\">PublicKey</span><span class=\"o\">.</span><span class=\"n\">fromPem</span><span class=\"p\">(</span><span class=\"n\">publicKeyPem</span><span class=\"p\">)</span>\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">fromDer</span><span class=\"p\">(</span><span class=\"n\">signatureDer</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Ecdsa</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"p\">,</span> <span class=\"n\">publicKey</span><span class=\"p\">))</span>\n</pre>\n<p>You can also verify it on terminal:</p>\n<pre><code>openssl dgst -sha256 -verify publicKey.pem -signature signatureDer.txt message.txt\n</code></pre>\n<p>NOTE: If you want to create a Digital Signature to use with <a href=\"https://starkbank.com\" rel=\"nofollow\">Stark Bank</a>, you need to convert the binary signature to base64.</p>\n<pre><code>openssl base64 -in signatureDer.txt -out signatureBase64.txt\n</code></pre>\n<p>You can do the same with this library:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.signature</span> <span class=\"kn\">import</span> <span class=\"n\">Signature</span>\n<span class=\"kn\">from</span> <span class=\"nn\">ellipticcurve.utils.file</span> <span class=\"kn\">import</span> <span class=\"n\">File</span>\n\n\n<span class=\"n\">signatureDer</span> <span class=\"o\">=</span> <span class=\"n\">File</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"signatureDer.txt\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">signature</span> <span class=\"o\">=</span> <span class=\"n\">Signature</span><span class=\"o\">.</span><span class=\"n\">fromDer</span><span class=\"p\">(</span><span class=\"n\">signatureDer</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">signature</span><span class=\"o\">.</span><span class=\"n\">toBase64</span><span class=\"p\">())</span>\n</pre>\n<h3>Run unit tests</h3>\n<pre><code>python3 -m unittest discover\npython2 -m unittest discover\n</code></pre>\n\n          </div>"}, "last_serial": 7021340, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8f5c30e196004444624238df57286857", "sha256": "d6de618fe29e907edc53d8ba76638d9e9c8a00f04765d88099ce4252136a2e3e"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.tar.gz", "has_sig": false, "md5_digest": "8f5c30e196004444624238df57286857", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7199, "upload_time": "2018-09-02T02:17:38", "upload_time_iso_8601": "2018-09-02T02:17:38.864297Z", "url": "https://files.pythonhosted.org/packages/b3/03/ca542978c2b36594b17bcb11862a981e967d43677738632035578975d629/starkbank-ecdsa-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8797c9090f79273a9946a6d260c4993e", "sha256": "6e94252370a6d2bcf3fa8e6a3f02695e145accec258130a31bc4d6a6c162c476"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8797c9090f79273a9946a6d260c4993e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7281, "upload_time": "2018-09-03T01:11:43", "upload_time_iso_8601": "2018-09-03T01:11:43.418234Z", "url": "https://files.pythonhosted.org/packages/2c/d0/2409a36d1bb1f41b0d0bfc7e0d7ad9c29099f5a59c0ea4f04a16096b5ab6/starkbank-ecdsa-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "6bf2792f6c9b48a89ae04ab889bcf7b1", "sha256": "5b452b5060b936a2fb4fe8b27a2de70183ebd9fd6c36a62e4a6084ec16e1bb97"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.2.tar.gz", "has_sig": false, "md5_digest": "6bf2792f6c9b48a89ae04ab889bcf7b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7915, "upload_time": "2018-12-28T21:57:28", "upload_time_iso_8601": "2018-12-28T21:57:28.728057Z", "url": "https://files.pythonhosted.org/packages/42/2c/9d102d18b89320304b850753e02075c4d74e9f0156f785217fe6895aa419/starkbank-ecdsa-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0e5c1d78e0bb9167f263f49a38e61439", "sha256": "b11d03172b39c77f311fef4923c4c5aae062d916b9f94219dc5901945a0eb6d2"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.3.tar.gz", "has_sig": false, "md5_digest": "0e5c1d78e0bb9167f263f49a38e61439", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8399, "upload_time": "2019-01-02T22:33:18", "upload_time_iso_8601": "2019-01-02T22:33:18.101825Z", "url": "https://files.pythonhosted.org/packages/25/1e/d70f172164c4db65b12f30fae62d291f7bffb4c762b42b4fb32e36351638/starkbank-ecdsa-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "069eab2ca8e78a8680c2240ec3663da6", "sha256": "fe9cabadbcc4fd2216b8efb2403c19b64b1aa00a59f45d4375b500c490a5cbce"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.4.tar.gz", "has_sig": false, "md5_digest": "069eab2ca8e78a8680c2240ec3663da6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9909, "upload_time": "2019-01-20T05:19:54", "upload_time_iso_8601": "2019-01-20T05:19:54.163597Z", "url": "https://files.pythonhosted.org/packages/f8/62/0e68d90789724beb36e3413a6d4f12e91c000b2bf45939376652697e3437/starkbank-ecdsa-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "6eb11e8a43e726b9f09df07f5333bdbc", "sha256": "c65649e3abcd591eb36488ee1169d4d0f8b132290f224ed239d18fb24b3eb1c1"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.5.tar.gz", "has_sig": false, "md5_digest": "6eb11e8a43e726b9f09df07f5333bdbc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12577, "upload_time": "2019-04-24T19:40:03", "upload_time_iso_8601": "2019-04-24T19:40:03.368687Z", "url": "https://files.pythonhosted.org/packages/41/a6/55e2b0aa630fc3b08551301f27d714510b5275feca68b098a8c609184805/starkbank-ecdsa-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "69b7494c7552d869234aaa252227d9b5", "sha256": "298a1206462408f3f73b46ae9c3c8836b6c386632e01548ba6a9e2119e21ea8a"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.6.tar.gz", "has_sig": false, "md5_digest": "69b7494c7552d869234aaa252227d9b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12998, "upload_time": "2019-09-12T00:37:06", "upload_time_iso_8601": "2019-09-12T00:37:06.640125Z", "url": "https://files.pythonhosted.org/packages/da/e0/b3082af02266b9eee9b4596aee0fb02d19784d855971976396f838149f1b/starkbank-ecdsa-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4031d73cf2df7cfc2081e0aee4fd69cc", "sha256": "f78cdc4fa651d6848f77fe270be8786ac08c7698f78c534b7159334b30703e62"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.7.tar.gz", "has_sig": false, "md5_digest": "4031d73cf2df7cfc2081e0aee4fd69cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12229, "upload_time": "2019-10-03T20:11:57", "upload_time_iso_8601": "2019-10-03T20:11:57.756906Z", "url": "https://files.pythonhosted.org/packages/fc/62/ba4e3989de47a8548aa515a1f86b36c783a82bdb690f07157fd0c12b6615/starkbank-ecdsa-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "4cc9190e6fc9e1722c2b497f7afaa19b", "sha256": "c5dfc94fdae56d4209b5ca2d92a08011515fd13d5828de5b5cb7c6c9c11b448f"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.8.tar.gz", "has_sig": false, "md5_digest": "4cc9190e6fc9e1722c2b497f7afaa19b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12254, "upload_time": "2019-11-21T00:40:38", "upload_time_iso_8601": "2019-11-21T00:40:38.870782Z", "url": "https://files.pythonhosted.org/packages/50/95/4dfe29f002134fdd9f4b8355b1dc4051271aa30885d157abe13a7cb8d1dd/starkbank-ecdsa-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "2509162912c0c8f22f9570cdd9a5c067", "sha256": "c802f2d0bc37a9bd8b64fa421b89749ab8d9e03e55b7687a5d14d4d35ab51a48"}, "downloads": -1, "filename": "starkbank-ecdsa-0.1.9.tar.gz", "has_sig": false, "md5_digest": "2509162912c0c8f22f9570cdd9a5c067", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12586, "upload_time": "2020-02-04T02:13:50", "upload_time_iso_8601": "2020-02-04T02:13:50.801521Z", "url": "https://files.pythonhosted.org/packages/f6/91/59860baf704f53e0650eb33d6168eb17693b8f1b7d3f8829708b15b16066/starkbank-ecdsa-0.1.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "4607c0d9e07c205e97b059406619fdda", "sha256": "cd17ec9fa7ad8ae3fc81a63ddb7e0d7fb798a048e40c1a9c55afd1a207d1eff9"}, "downloads": -1, "filename": "starkbank-ecdsa-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4607c0d9e07c205e97b059406619fdda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11967, "upload_time": "2020-04-13T23:58:27", "upload_time_iso_8601": "2020-04-13T23:58:27.262966Z", "url": "https://files.pythonhosted.org/packages/8c/93/f31f9b8989aab9db063d359b336eb80d83248b076107fc8d491b7de71e48/starkbank-ecdsa-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4607c0d9e07c205e97b059406619fdda", "sha256": "cd17ec9fa7ad8ae3fc81a63ddb7e0d7fb798a048e40c1a9c55afd1a207d1eff9"}, "downloads": -1, "filename": "starkbank-ecdsa-1.0.0.tar.gz", "has_sig": false, "md5_digest": "4607c0d9e07c205e97b059406619fdda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11967, "upload_time": "2020-04-13T23:58:27", "upload_time_iso_8601": "2020-04-13T23:58:27.262966Z", "url": "https://files.pythonhosted.org/packages/8c/93/f31f9b8989aab9db063d359b336eb80d83248b076107fc8d491b7de71e48/starkbank-ecdsa-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:37 2020"}