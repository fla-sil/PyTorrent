{"info": {"author": "Stephen Nayfach, Antonio Pedro Camargo, Simon Roux", "author_email": "", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Software Development :: Libraries"], "description": "![](https://bitbucket.org/berkeleylab/checkv/raw/6d4448f738ac8549551c8ef9511afb05bc394813/logo.png)\n\n\nCheckV is a fully automated command-line pipeline for assessing the quality of metagenome-assembled viral genomes, including identification of host contamination for integrated proviruses, estimating completeness for genome fragments, and identification of closed genomes.\n\nThe pipeline can be broken down into 4 main steps:\n\n![](https://bitbucket.org/berkeleylab/checkv/raw/56a82c12b624933f7cd374d352ba24533d280575/pipeline.png)\n\n**A: Remove host contamination.** CheckV identifies and removes non-viral regions on proviruses. Genes are first annotated based on comparison to a custom database of HMMs that are highly specific to either viral or microbial proteins. Next, the program compares the gene annotations and GC content between a pair of sliding windows that each contain up to 40 genes. This information is used to compute a score at each intergenic position and identify host-virus boundaries.\n\n**B: Estimate genome completeness.** CheckV estimates genome completeness in two stages. First, proteins are compared to the CheckV genome database using AAI (average amino acid identity), completeness is computed as a simple ratio between the contig length (or viral region length for proviruses) and the length of matched reference genomes, and a confidence level is reported. In some cases, a contig won't have a high- or medium-confidence estimate based on AAI. In these cases, a more sensitive but less accurate approach is used based on HMMs shared between the contig and CheckV reference genomes (ANI: average nucleotide identity; AF: alignment fraction)\n\n**C: Predict closed genomes.** Closed genomes are identified based either on direct terminal repeats (DTRs; often indicating a circular sequence), flanking virus-host boundaries (indicating a complete prophage), or inverted terminal repeats (ITRs; believed to facilitate circularization and recombination). Whenever possible, these predictions are validated based on the estimated completeness obtained in B (e.g. completeness >90%). DTRs are the most reliable and most common indicator of complete genomes.\n\n**D: Summarize quality.** Based on the results of A-C, CheckV generates a report file and assigns query contigs to one of five quality tiers: complete, high-quality (>90% completeness), medium-quality (50-90% completeness), low-quality (<50% completeness), or undetermined quality.\n\n## Installation\n\nThere are two methods to install CheckV:\n\n- Using `conda`:\n\n```bash\nconda install -c conda-forge -c bioconda checkv\n```\n\n- Using `pip`:\n\n```bash\npip install checkv\n```\n\nIf you decide to install CheckV via `pip`, make sure you also have the following external dependencies installed:\n\n- BLAST+ (v2.5.0)\n- DIAMOND (v0.9.30)\n- HMMER (v3.3)\n- Prodigal (v2.6.3)\n\nThe versions listed above were the ones that were properly tested. Different versions may also work.\n\n### CheckV database\n\nWhichever method you choose to install CheckV you will need to download and extract database in order to use it:\n\n```bash\nwget https://portal.nersc.gov/CheckV/checkv-db-v0.6.tar.gz\ntar -zxvf checkv-db-v0.6.tar.gz\n```\n\nUpdate your environment:\n\n```bash\nexport CHECKVDB=/path/to/checkv-db-v0.6\n```\n\nIf you don't want to set the environmet variable, you can still use the database through the `-d` parameter of the `contamination` and `completeness` modules.\n\n## Quick start\n\nNavigate to CheckV test directory:\n\n```bash\ncd /path/to/checkv/test\n```\n\nIdentify flanking host regions on integrated prophages:\n\n```bash\ncheckv contamination test.fna checkv_out -t 16\n```\n\nEstimate completeness for genome fragments:\n\n```bash\ncheckv completeness test.fna checkv_out -t 16\n```\n\nIdentify (possible) complete genomes with terminal:\n(this module also estimates the genome copy number; see below for details)\n\n```bash\ncheckv repeats test.fna checkv_out\n```\n\nSummarize CheckV output & classify contigs into quality tiers:\n\n```bash\ncheckv quality_summary test.fna checkv_out\n```\n\n*For optimal results, you should always run the 4 steps in this order.*\n\n\n## Frequently asked questions\n\n**Q: What is the difference between AAI- and HMM-based completeness?**  \nA: AAI-based completeness was designed to be very accurate and can be trusted when the confidence is medium or high. HMM-based completeness was designed to confidently estimate the minimum completeness. So a value of 50% indicates that we can be 95% sure that the viral contig is at least 50% complete. But it may be more complete, so this should be taken into consideration when analyzing CheckV output.\n\n**Q: What is the meaning of the genome_copies field?**  \nA: This is a measure of how many times the viral genome is represented in the contig. Most times this is 1.0 (or very close to 1.0). In rare cases assembly errors may occur in which the contig sequence represents multiple concatenated copies of the viral genome. In these cases genome_copies will exceed 1.0.\n\n**Q: Why does my DTR contig have <100% estimated completeness?**\nA: If the estimated completeness is close to 100% (e.g. 90-110%) then the query is likely complete. However sometimes incomplete genome fragments may contain a direct terminal repeat (DTR), in which case we should expect their estimated completeness to be <90%, and sometimes much less. In other cases, the contig will truly be circular, but the estimated completeness is incorrect. This may also happen if the query a complete segment of a multipartite genome (common for RNA viruses). By default, CheckV uses the 90% completeness cutoff for verification, but a user may wish to make their own judgement in these ambiguous cases.\n\n**Q: Why is my DTR contig predicted as a provirus?**\nA: CheckV classifies a sequence as a provirus if it is contains a host region (usually occuring on one just side of the sequence). A DTR sequence represents a complete viral genome, so these predictions are at odds with eachother and indicate either a false positive DTR prediction, or a false positive provirus prediction. By default, CheckV considers these complete genomes, but a user may wish to make their own judgement in these ambiguous cases.\n\n**Q: Why is my sequence considered \"high-quality\" when it has high contamination?**\nA: CheckV determines sequence quality solely based on completeness. Host contamination is easily removed, so is not factored into these quality tiers.\n\n**Q: I performed binning and generated viral MAGs. Can I use CheckV on these?**\nA: CheckV can estimate completeness but not contamination for these. Additionally, you'll need to concatentate the contigs from each MAG into a single sequence prior to running CheckV.\n\n**Q: Can I apply CheckV to eukaryotic viruses?**\nA: Probably, but this has not been tested. The reference database includes a large number of genomes and HMMs that should match eukaryotic genomes. However, CheckV may report a completeness <90% if your genome is a single segment of a segmented viral genome. CheckV may also classify your sequence as a provirus if it contains a large island of metabolic genes commonly found in bacteria/archaea.\n\n**Q: Can I use CheckV to predict (pro)viruses from whole (meta)genomes?**\nA: Possibly, though this has not been tested.\n\n**Q: How should I handle putative \"closed genomes\" with no completeless estimate?**\nA: In some cases, you won't be able to verify the completeness of a sequence with terminal repeats or provirus integration sites. DTRs are a fairly reliable indicator (>90% of the time) and can likely be trusted with no completeness estimate. However, complete proviruses and ITRs are much less reliable indicators, and therefore require >90% estimated completeness.\n\n**Q: Why is my contig classified as \"undetermined quality\"?**\nA: This happens when the sequence doesn't match any CheckV reference genome with high enough similarity to confidently estimate completeness. There are a few explanations for this, in order of likely frequency: 1) your contig is very short, and by chance it does not share any genes with a CheckV reference, 2) your contig is from a very novel virus that is distantly related to all genomes in the CheckV database, 3) your contig is not a virus at all and so doesn't match any of the references.\n\n**Q: How should I handle sequences with \"undetermined quality\"?**\nA: While it is not possible to estimate completeness for these, you may choose to still analyze sequences above a certain length (e.g. >30 kb). If you have knowledge about the viral clade, then this information can be taken into account (e.g. keep >5 kb sequences from *Microviridae*). Or you can use these sequences in analyses that don't require high-quality genomes.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/berkeleylab/checkv", "keywords": "bioinformatics,genomics,metagenomics,viromics", "license": "Modified BSD", "maintainer": "", "maintainer_email": "", "name": "checkv", "package_url": "https://pypi.org/project/checkv/", "platform": "", "project_url": "https://pypi.org/project/checkv/", "project_urls": {"Homepage": "https://bitbucket.org/berkeleylab/checkv"}, "release_url": "https://pypi.org/project/checkv/0.4.0/", "requires_dist": ["biopython", "numpy", "psutil", "importlib-metadata (>=0.12) ; python_version < \"3.8\""], "requires_python": ">=3.6", "summary": "Assess the quality of metagenome-assembled viral genomes.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2982374629b226a6e4c2476672a61607108b0d9d/68747470733a2f2f6269746275636b65742e6f72672f6265726b656c65796c61622f636865636b762f7261772f366434343438663733386163383534393535316338656639353131616662303562633339343831332f6c6f676f2e706e67\"></p>\n<p>CheckV is a fully automated command-line pipeline for assessing the quality of metagenome-assembled viral genomes, including identification of host contamination for integrated proviruses, estimating completeness for genome fragments, and identification of closed genomes.</p>\n<p>The pipeline can be broken down into 4 main steps:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/56162fcdb538825981cf8aa128838c6f1c46aedf/68747470733a2f2f6269746275636b65742e6f72672f6265726b656c65796c61622f636865636b762f7261772f353661383263313262363234393333663763643337346433353262613234353333643238303537352f706970656c696e652e706e67\"></p>\n<p><strong>A: Remove host contamination.</strong> CheckV identifies and removes non-viral regions on proviruses. Genes are first annotated based on comparison to a custom database of HMMs that are highly specific to either viral or microbial proteins. Next, the program compares the gene annotations and GC content between a pair of sliding windows that each contain up to 40 genes. This information is used to compute a score at each intergenic position and identify host-virus boundaries.</p>\n<p><strong>B: Estimate genome completeness.</strong> CheckV estimates genome completeness in two stages. First, proteins are compared to the CheckV genome database using AAI (average amino acid identity), completeness is computed as a simple ratio between the contig length (or viral region length for proviruses) and the length of matched reference genomes, and a confidence level is reported. In some cases, a contig won't have a high- or medium-confidence estimate based on AAI. In these cases, a more sensitive but less accurate approach is used based on HMMs shared between the contig and CheckV reference genomes (ANI: average nucleotide identity; AF: alignment fraction)</p>\n<p><strong>C: Predict closed genomes.</strong> Closed genomes are identified based either on direct terminal repeats (DTRs; often indicating a circular sequence), flanking virus-host boundaries (indicating a complete prophage), or inverted terminal repeats (ITRs; believed to facilitate circularization and recombination). Whenever possible, these predictions are validated based on the estimated completeness obtained in B (e.g. completeness &gt;90%). DTRs are the most reliable and most common indicator of complete genomes.</p>\n<p><strong>D: Summarize quality.</strong> Based on the results of A-C, CheckV generates a report file and assigns query contigs to one of five quality tiers: complete, high-quality (&gt;90% completeness), medium-quality (50-90% completeness), low-quality (&lt;50% completeness), or undetermined quality.</p>\n<h2>Installation</h2>\n<p>There are two methods to install CheckV:</p>\n<ul>\n<li>Using <code>conda</code>:</li>\n</ul>\n<pre>conda install -c conda-forge -c bioconda checkv\n</pre>\n<ul>\n<li>Using <code>pip</code>:</li>\n</ul>\n<pre>pip install checkv\n</pre>\n<p>If you decide to install CheckV via <code>pip</code>, make sure you also have the following external dependencies installed:</p>\n<ul>\n<li>BLAST+ (v2.5.0)</li>\n<li>DIAMOND (v0.9.30)</li>\n<li>HMMER (v3.3)</li>\n<li>Prodigal (v2.6.3)</li>\n</ul>\n<p>The versions listed above were the ones that were properly tested. Different versions may also work.</p>\n<h3>CheckV database</h3>\n<p>Whichever method you choose to install CheckV you will need to download and extract database in order to use it:</p>\n<pre>wget https://portal.nersc.gov/CheckV/checkv-db-v0.6.tar.gz\ntar -zxvf checkv-db-v0.6.tar.gz\n</pre>\n<p>Update your environment:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">CHECKVDB</span><span class=\"o\">=</span>/path/to/checkv-db-v0.6\n</pre>\n<p>If you don't want to set the environmet variable, you can still use the database through the <code>-d</code> parameter of the <code>contamination</code> and <code>completeness</code> modules.</p>\n<h2>Quick start</h2>\n<p>Navigate to CheckV test directory:</p>\n<pre><span class=\"nb\">cd</span> /path/to/checkv/test\n</pre>\n<p>Identify flanking host regions on integrated prophages:</p>\n<pre>checkv contamination test.fna checkv_out -t <span class=\"m\">16</span>\n</pre>\n<p>Estimate completeness for genome fragments:</p>\n<pre>checkv completeness test.fna checkv_out -t <span class=\"m\">16</span>\n</pre>\n<p>Identify (possible) complete genomes with terminal:\n(this module also estimates the genome copy number; see below for details)</p>\n<pre>checkv repeats test.fna checkv_out\n</pre>\n<p>Summarize CheckV output &amp; classify contigs into quality tiers:</p>\n<pre>checkv quality_summary test.fna checkv_out\n</pre>\n<p><em>For optimal results, you should always run the 4 steps in this order.</em></p>\n<h2>Frequently asked questions</h2>\n<p><strong>Q: What is the difference between AAI- and HMM-based completeness?</strong><br>\nA: AAI-based completeness was designed to be very accurate and can be trusted when the confidence is medium or high. HMM-based completeness was designed to confidently estimate the minimum completeness. So a value of 50% indicates that we can be 95% sure that the viral contig is at least 50% complete. But it may be more complete, so this should be taken into consideration when analyzing CheckV output.</p>\n<p><strong>Q: What is the meaning of the genome_copies field?</strong><br>\nA: This is a measure of how many times the viral genome is represented in the contig. Most times this is 1.0 (or very close to 1.0). In rare cases assembly errors may occur in which the contig sequence represents multiple concatenated copies of the viral genome. In these cases genome_copies will exceed 1.0.</p>\n<p><strong>Q: Why does my DTR contig have &lt;100% estimated completeness?</strong>\nA: If the estimated completeness is close to 100% (e.g. 90-110%) then the query is likely complete. However sometimes incomplete genome fragments may contain a direct terminal repeat (DTR), in which case we should expect their estimated completeness to be &lt;90%, and sometimes much less. In other cases, the contig will truly be circular, but the estimated completeness is incorrect. This may also happen if the query a complete segment of a multipartite genome (common for RNA viruses). By default, CheckV uses the 90% completeness cutoff for verification, but a user may wish to make their own judgement in these ambiguous cases.</p>\n<p><strong>Q: Why is my DTR contig predicted as a provirus?</strong>\nA: CheckV classifies a sequence as a provirus if it is contains a host region (usually occuring on one just side of the sequence). A DTR sequence represents a complete viral genome, so these predictions are at odds with eachother and indicate either a false positive DTR prediction, or a false positive provirus prediction. By default, CheckV considers these complete genomes, but a user may wish to make their own judgement in these ambiguous cases.</p>\n<p><strong>Q: Why is my sequence considered \"high-quality\" when it has high contamination?</strong>\nA: CheckV determines sequence quality solely based on completeness. Host contamination is easily removed, so is not factored into these quality tiers.</p>\n<p><strong>Q: I performed binning and generated viral MAGs. Can I use CheckV on these?</strong>\nA: CheckV can estimate completeness but not contamination for these. Additionally, you'll need to concatentate the contigs from each MAG into a single sequence prior to running CheckV.</p>\n<p><strong>Q: Can I apply CheckV to eukaryotic viruses?</strong>\nA: Probably, but this has not been tested. The reference database includes a large number of genomes and HMMs that should match eukaryotic genomes. However, CheckV may report a completeness &lt;90% if your genome is a single segment of a segmented viral genome. CheckV may also classify your sequence as a provirus if it contains a large island of metabolic genes commonly found in bacteria/archaea.</p>\n<p><strong>Q: Can I use CheckV to predict (pro)viruses from whole (meta)genomes?</strong>\nA: Possibly, though this has not been tested.</p>\n<p><strong>Q: How should I handle putative \"closed genomes\" with no completeless estimate?</strong>\nA: In some cases, you won't be able to verify the completeness of a sequence with terminal repeats or provirus integration sites. DTRs are a fairly reliable indicator (&gt;90% of the time) and can likely be trusted with no completeness estimate. However, complete proviruses and ITRs are much less reliable indicators, and therefore require &gt;90% estimated completeness.</p>\n<p><strong>Q: Why is my contig classified as \"undetermined quality\"?</strong>\nA: This happens when the sequence doesn't match any CheckV reference genome with high enough similarity to confidently estimate completeness. There are a few explanations for this, in order of likely frequency: 1) your contig is very short, and by chance it does not share any genes with a CheckV reference, 2) your contig is from a very novel virus that is distantly related to all genomes in the CheckV database, 3) your contig is not a virus at all and so doesn't match any of the references.</p>\n<p><strong>Q: How should I handle sequences with \"undetermined quality\"?</strong>\nA: While it is not possible to estimate completeness for these, you may choose to still analyze sequences above a certain length (e.g. &gt;30 kb). If you have knowledge about the viral clade, then this information can be taken into account (e.g. keep &gt;5 kb sequences from <em>Microviridae</em>). Or you can use these sequences in analyses that don't require high-quality genomes.</p>\n\n          </div>"}, "last_serial": 7184785, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0a34b4b1b25b134490bb7cdb9d01d433", "sha256": "86bad6e569fdd1a9dd4f9af18f9c21067b1972a686005aa92999a0faeba9e82d"}, "downloads": -1, "filename": "checkv-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0a34b4b1b25b134490bb7cdb9d01d433", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19707, "upload_time": "2020-04-08T16:03:22", "upload_time_iso_8601": "2020-04-08T16:03:22.182877Z", "url": "https://files.pythonhosted.org/packages/1b/f7/c79285ac97b666f54204c520aab704292d7df43bb8562e371379985f2fb8/checkv-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ca683d3e99ac63f3922b6e3cdcd36e07", "sha256": "e5060ed00cc9d3ece2a61a5749c11902f356b8a889cc2fd2e88b62c15f534d86"}, "downloads": -1, "filename": "checkv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ca683d3e99ac63f3922b6e3cdcd36e07", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16671, "upload_time": "2020-04-08T16:03:24", "upload_time_iso_8601": "2020-04-08T16:03:24.094567Z", "url": "https://files.pythonhosted.org/packages/14/ee/33d274385d32b6f62836ae8b0101e101558fed91ebbf0a48f40987c7845a/checkv-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1672c63205cf36c50daf28cbcda10cb8", "sha256": "9039f2b2d9895abaa8e5a5fb24f240dc9715ea5806138632e6c3da5163cc32f5"}, "downloads": -1, "filename": "checkv-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1672c63205cf36c50daf28cbcda10cb8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19805, "upload_time": "2020-04-14T20:28:37", "upload_time_iso_8601": "2020-04-14T20:28:37.155369Z", "url": "https://files.pythonhosted.org/packages/db/c2/9307e9d3f44342ccb8bf052bd07154c60d38f2074ad8e2a2ec61dcc087e7/checkv-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3d0945eeeec3070fff742664ac919b1f", "sha256": "9a15c0ed6346038ec778001ec7e06cddb7ec75507d6031401eb19da2a5433b4b"}, "downloads": -1, "filename": "checkv-0.2.0.tar.gz", "has_sig": false, "md5_digest": "3d0945eeeec3070fff742664ac919b1f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16443, "upload_time": "2020-04-14T20:28:39", "upload_time_iso_8601": "2020-04-14T20:28:39.257700Z", "url": "https://files.pythonhosted.org/packages/71/b3/73653852feb6f21a722f304940f6964cc24adaa68d978e6effcf7c6d646f/checkv-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e6368be4b83c65974ef8312711a76efa", "sha256": "cb4c03628df6d330bb7bbaed8daa75dbd97373a8341e367c5c70fcf951708457"}, "downloads": -1, "filename": "checkv-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e6368be4b83c65974ef8312711a76efa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22617, "upload_time": "2020-04-28T03:10:38", "upload_time_iso_8601": "2020-04-28T03:10:38.752916Z", "url": "https://files.pythonhosted.org/packages/a9/39/c66b89158666f250cbc9e2b0d46861354beb018b91799e908bcb7502c8a1/checkv-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a2be0dfdb0cb48c977c80fa24329b7c", "sha256": "f860c159bc2101e6ceda8018bdb8e218436b152dc8e60a35d585dc0007aafdd5"}, "downloads": -1, "filename": "checkv-0.3.0.tar.gz", "has_sig": false, "md5_digest": "6a2be0dfdb0cb48c977c80fa24329b7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22351, "upload_time": "2020-04-28T03:10:39", "upload_time_iso_8601": "2020-04-28T03:10:39.929462Z", "url": "https://files.pythonhosted.org/packages/ef/37/df60c530deff05fe2903ac3d8ea244d8ab99af0027397ad1dfa6612257a6/checkv-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "f2582389817c52171d310151e871c502", "sha256": "e8345e4057f497567aed6835d451bcce67639e5bb62def96529147118d9e7374"}, "downloads": -1, "filename": "checkv-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2582389817c52171d310151e871c502", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26538, "upload_time": "2020-05-07T02:14:47", "upload_time_iso_8601": "2020-05-07T02:14:47.748483Z", "url": "https://files.pythonhosted.org/packages/26/44/e82e9b15b02dea62969779fc26620d4cf284ffcd2ccaf18a287a2ef02f14/checkv-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea7de0bd5a3bb0e2c11fe14e71c5fa29", "sha256": "1a1c233be249c669fde9a88247642c7acf17e3361c1ddc273d56beb01ee35da6"}, "downloads": -1, "filename": "checkv-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ea7de0bd5a3bb0e2c11fe14e71c5fa29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23928, "upload_time": "2020-05-07T02:14:49", "upload_time_iso_8601": "2020-05-07T02:14:49.192071Z", "url": "https://files.pythonhosted.org/packages/d8/53/50681378c348a3f7e97fcdd425ca190355b9f185cf283083dc293f0a2296/checkv-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2582389817c52171d310151e871c502", "sha256": "e8345e4057f497567aed6835d451bcce67639e5bb62def96529147118d9e7374"}, "downloads": -1, "filename": "checkv-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2582389817c52171d310151e871c502", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 26538, "upload_time": "2020-05-07T02:14:47", "upload_time_iso_8601": "2020-05-07T02:14:47.748483Z", "url": "https://files.pythonhosted.org/packages/26/44/e82e9b15b02dea62969779fc26620d4cf284ffcd2ccaf18a287a2ef02f14/checkv-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea7de0bd5a3bb0e2c11fe14e71c5fa29", "sha256": "1a1c233be249c669fde9a88247642c7acf17e3361c1ddc273d56beb01ee35da6"}, "downloads": -1, "filename": "checkv-0.4.0.tar.gz", "has_sig": false, "md5_digest": "ea7de0bd5a3bb0e2c11fe14e71c5fa29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23928, "upload_time": "2020-05-07T02:14:49", "upload_time_iso_8601": "2020-05-07T02:14:49.192071Z", "url": "https://files.pythonhosted.org/packages/d8/53/50681378c348a3f7e97fcdd425ca190355b9f185cf283083dc293f0a2296/checkv-0.4.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:42 2020"}