{"info": {"author": "Thomas Duval", "author_email": "thomas.duval@orange.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "License :: OSI Approved", "Natural Language :: French", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# moon_engine\n\n## Installation\n\nIf you want a stable version:\n\n```bash\nsudo python -m pip install moon_engine\n```\n\nIf you want a development version:\n\n```bash\nARTIFACTORY=https://artifactory-iva.si.francetelecom.fr/artifactory/api/pypi/python-virt-orange-product-devops/simple\nsudo python -m pip install --pre moon_engine -i $ARTIFACTORY\n```\nUse it at your own risk, this is an unstable version.\n\nIf you want to be in development mode, and get the code:\n\n```bash\ngit clone git@gitlab.forge.orange-labs.fr:moon/moon_utilities.git\ncd moon_utilities\nsudo pip install -e .\ncd ..\ngit clone git@gitlab.forge.orange-labs.fr:moon/moon_cache.git\ncd moon_cache\nsudo pip install -e .\ncd ..\ngit clone git@gitlab.forge.orange-labs.fr:moon/moon_engine.git\ncd moon_engine\nsudo pip install -e .\n```\n\n## Configuration\n\nYou need to create 3 configuration files.\n\n### config.cfg::\n\n    # configuration for Gunicorn\n    bind = \"127.0.0.1:8081\"\n    workers = 2\n\n    # configuration for moon_engine\n    moon = \"moon.yaml\"\n\n\n### moon.yaml (feel free to update the configuration file to your need...)::\n\n\n    type: \"pipeline\"\n    uuid:\n    manager_url: \"\"\n    incremental_updates: false\n    api_token:\n    data: policy.json\n    debug: true\n\n    management:\n      password: admin\n      url: http://127.0.0.1:8000\n      user: admin\n      token_file: moon_engine_users.json\n\n    orchestration:\n      driver: moon_engine.plugins.pyorchestrator\n      connection: local\n      port: 20000...20100\n      config_dir: /tmp\n\n    authorization:\n      driver: moon_engine.plugins.authz\n\n    plugins:\n      directory: /tmp\n\n    logging:\n      version: 1\n\n      formatters:\n        brief:\n          format: \"%(levelname)s %(name)s %(message)-30s\"\n        custom:\n          format: \"%(asctime)-15s %(levelname)s %(name)s %(message)s\"\n\n      handlers:\n        console:\n          class : logging.StreamHandler\n          formatter: custom\n          level   : INFO\n          stream  : ext://sys.stdout\n        file:\n          class : logging.handlers.RotatingFileHandler\n          formatter: custom\n          level   : DEBUG\n          filename: /tmp/moon_engine.log\n          maxBytes: 1048576\n          backupCount: 3\n\n      loggers:\n        moon:\n          level: DEBUG\n          handlers: [console, file]\n          propagate: no\n\n      root:\n        level: ERROR\n        handlers: [console]\n\n### policy.json\n\nThis file contains all data that will be imported in the Engine. As we cannot update the cache after the creation of the Engine, all data must be in this file.\nExample files lie in the conf directory.\n\n## Web server execution\n\nExecution when library is installed:\n\nFor a development server:\n\n```bash\nhug -m moon_engine.server config.cfg\n```\n\nFor a production server:\n\n```bash\ngunicorn moon_engine.server:__hug_wsgi__ -c config.cfg\n```\n\nor\n\n```bash\nmoon_engine start config.cfg\n```\n\nIf library is not installed:\n\n```bash\ngunicorn moon_engine/server:__hug_wsgi__ -c config.cfg\n```\n\nThis will install an autonomous engine server.\nIf you need to connect to a Manager, you must update the `moon.yaml` accordingly.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "moon-engine", "package_url": "https://pypi.org/project/moon-engine/", "platform": "", "project_url": "https://pypi.org/project/moon-engine/", "project_urls": null, "release_url": "https://pypi.org/project/moon-engine/0.8/", "requires_dist": ["hug", "pyaml", "moon-utilities", "moon-cache", "gunicorn", "sqlalchemy", "pymysql"], "requires_python": "", "summary": "", "version": "0.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># moon_engine</p>\n<p>## Installation</p>\n<p>If you want a stable version:</p>\n<p><tt>`bash\nsudo python <span class=\"pre\">-m</span> pip install moon_engine\n`</tt></p>\n<p>If you want a development version:</p>\n<p><tt>`bash\n<span class=\"pre\">ARTIFACTORY=https://artifactory-iva.si.francetelecom.fr/artifactory/api/pypi/python-virt-orange-product-devops/simple</span>\nsudo python <span class=\"pre\">-m</span> pip install <span class=\"pre\">--pre</span> moon_engine <span class=\"pre\">-i</span> $ARTIFACTORY\n`</tt>\nUse it at your own risk, this is an unstable version.</p>\n<p>If you want to be in development mode, and get the code:</p>\n<p><tt>`bash\ngit clone <span class=\"pre\">git@gitlab.forge.orange-labs.fr:moon/moon_utilities.git</span>\ncd moon_utilities\nsudo pip install <span class=\"pre\">-e</span> .\ncd ..\ngit clone <span class=\"pre\">git@gitlab.forge.orange-labs.fr:moon/moon_cache.git</span>\ncd moon_cache\nsudo pip install <span class=\"pre\">-e</span> .\ncd ..\ngit clone <span class=\"pre\">git@gitlab.forge.orange-labs.fr:moon/moon_engine.git</span>\ncd moon_engine\nsudo pip install <span class=\"pre\">-e</span> .\n`</tt></p>\n<p>## Configuration</p>\n<p>You need to create 3 configuration files.</p>\n<p>### config.cfg:</p>\n<pre># configuration for Gunicorn\nbind = \"127.0.0.1:8081\"\nworkers = 2\n\n# configuration for moon_engine\nmoon = \"moon.yaml\"\n</pre>\n<p>### moon.yaml (feel free to update the configuration file to your need\u2026):</p>\n<pre>type: \"pipeline\"\nuuid:\nmanager_url: \"\"\nincremental_updates: false\napi_token:\ndata: policy.json\ndebug: true\n\nmanagement:\n  password: admin\n  url: http://127.0.0.1:8000\n  user: admin\n  token_file: moon_engine_users.json\n\norchestration:\n  driver: moon_engine.plugins.pyorchestrator\n  connection: local\n  port: 20000...20100\n  config_dir: /tmp\n\nauthorization:\n  driver: moon_engine.plugins.authz\n\nplugins:\n  directory: /tmp\n\nlogging:\n  version: 1\n\n  formatters:\n    brief:\n      format: \"%(levelname)s %(name)s %(message)-30s\"\n    custom:\n      format: \"%(asctime)-15s %(levelname)s %(name)s %(message)s\"\n\n  handlers:\n    console:\n      class : logging.StreamHandler\n      formatter: custom\n      level   : INFO\n      stream  : ext://sys.stdout\n    file:\n      class : logging.handlers.RotatingFileHandler\n      formatter: custom\n      level   : DEBUG\n      filename: /tmp/moon_engine.log\n      maxBytes: 1048576\n      backupCount: 3\n\n  loggers:\n    moon:\n      level: DEBUG\n      handlers: [console, file]\n      propagate: no\n\n  root:\n    level: ERROR\n    handlers: [console]\n</pre>\n<p>### policy.json</p>\n<p>This file contains all data that will be imported in the Engine. As we cannot update the cache after the creation of the Engine, all data must be in this file.\nExample files lie in the conf directory.</p>\n<p>## Web server execution</p>\n<p>Execution when library is installed:</p>\n<p>For a development server:</p>\n<p><tt>`bash\nhug <span class=\"pre\">-m</span> moon_engine.server config.cfg\n`</tt></p>\n<p>For a production server:</p>\n<p><tt>`bash\ngunicorn moon_engine.server:__hug_wsgi__ <span class=\"pre\">-c</span> config.cfg\n`</tt></p>\n<p>or</p>\n<p><tt>`bash\nmoon_engine start config.cfg\n`</tt></p>\n<p>If library is not installed:</p>\n<p><tt>`bash\ngunicorn moon_engine/server:__hug_wsgi__ <span class=\"pre\">-c</span> config.cfg\n`</tt></p>\n<p>This will install an autonomous engine server.\nIf you need to connect to a Manager, you must update the <cite>moon.yaml</cite> accordingly.</p>\n\n          </div>"}, "last_serial": 7137606, "releases": {"0.7": [{"comment_text": "", "digests": {"md5": "a4812b651ab6337e0d56d392c8f3a459", "sha256": "30bb929bbf965f75eb4d67c21a5d744bee9333ac6f31c53bf7d9dca9ee561d1e"}, "downloads": -1, "filename": "moon_engine-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a4812b651ab6337e0d56d392c8f3a459", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 39805, "upload_time": "2019-12-02T14:08:40", "upload_time_iso_8601": "2019-12-02T14:08:40.019195Z", "url": "https://files.pythonhosted.org/packages/4f/4d/0ebdd0d26d8e8dfbdd324c38fb8d033f5489b34c8597e2284c71dce0c65a/moon_engine-0.7-py3-none-any.whl", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "bd1f9f80a54d4879432ae08c99add223", "sha256": "df43fae35403566abec7ee4d0f2091a68a08945bf397dfe566777af0fb58f170"}, "downloads": -1, "filename": "moon_engine-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "bd1f9f80a54d4879432ae08c99add223", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42387, "upload_time": "2020-04-30T13:57:12", "upload_time_iso_8601": "2020-04-30T13:57:12.745103Z", "url": "https://files.pythonhosted.org/packages/32/fa/1d009dc45bcec303eb891dd8aaaea57b63cfe76fa542fee2287fdb213ee8/moon_engine-0.8-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd1f9f80a54d4879432ae08c99add223", "sha256": "df43fae35403566abec7ee4d0f2091a68a08945bf397dfe566777af0fb58f170"}, "downloads": -1, "filename": "moon_engine-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "bd1f9f80a54d4879432ae08c99add223", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 42387, "upload_time": "2020-04-30T13:57:12", "upload_time_iso_8601": "2020-04-30T13:57:12.745103Z", "url": "https://files.pythonhosted.org/packages/32/fa/1d009dc45bcec303eb891dd8aaaea57b63cfe76fa542fee2287fdb213ee8/moon_engine-0.8-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:01 2020"}