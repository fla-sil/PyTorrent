{"info": {"author": "Anton Dries", "author_email": "anton.dries@cs.kuleuven.be", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Prolog", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "ProbFOIL v2.1\n=============\n\nProbFOIL is a probabilistic extension of FOIL that is capable of learning probabilistic rules from\nprobabilistic data.\n\nProbFOIL 2.1 is a redesign of the Prob2FOIL algorithm that was introduced in https://lirias.kuleuven.be/handle/123456789/499989.\nIt works on top of ProbLog 2.1.\n\nIf you are looking for the version used in the paper, you should check out the tag ``paper_version``.\n\nInstallation\n------------\n\nProbFOIL 2.1 requires ProbLog 2.1.\nYou can install ProbLog by using the command:\n    \n.. code-block:: python\n\n    pip install problog\n\nProbFOIL does not require any further installation.\n\nUsage\n-----\n\nThe input of ProbFOIL consists of two parts: settings and data.\nThese are both specified in Prolog (or ProbLog) files, and they can be combined into one.\n\nThe data consists of (probabilistic) facts.\nThe settings define\n\n* target: the predicate we want to learn\n* modes: which predicates can be added to the rules\n* types: type information for the predicates\n* other settings related to the data\n\nTo use:\n\n.. code-block:: bash\n\n    probfoil data.pl\n\nor, in the repository version\n\n.. code-block:: bash\n\n    python probfoil/probfoil.py data.pl\n\nMultiple files can be specified and the information in them is concatenated.\n(For example, it is advisable to separate settings from data).\n\nSeveral command line arguments are available. Use ``--help`` to get more information.\n\nSettings format\n---------------\n\nTarget\n++++++\n\nThe target should be specified by adding a fact ``learn(predicate/arity)``.\n\nModes\n+++++\n\nThe modes should be specified by adding facts of the form ``mode(predicate(mode1, mode2, ...)``,\nwhere ``modeX`` is the mode specifier for argument X.\nPossible mode specifiers are:\n\n   * ``+``: the variable at this position must already exist when the literal is added\n   * ``-``: the variable at this position does not exist yet in the rule (note that this is stricter than usual)\n   * ``c``: a constant should be introduced here; possible value are derived automatically from the data\n\nTypes\n+++++\n\nFor each relevant predicate (target and modes) there should be a type specifier.\nThis specifier is of the form ``base(predicate(type1, type2, ...)``, where ``typeX`` is a type identifier.\nType can be identified by arbitrary Prolog atoms (e.g. ``person``, ``a``, etc.)\n\nExample generation\n++++++++++++++++++\n\nBy default, examples are generated by quering the data for the target predicate.\nNegative examples can be specified by adding zero-probability facts, e.g.:\n\n.. code-block:: prolog\n\n    0.0::grandmother(john, mary).\n\nAlternatively, ProbFOIL can derive negative examples automatically by taking combinations of possible\nvalues for the target arguments. Note that this can lead to a combinatorial explosion.\nTo enable this behavior, you can specify the fact\n\n.. code-block:: prolog\n\n    example_mode(auto).\n\n\nExample\n-------\n\n.. code-block:: prolog\n\n    % Modes\n    mode(male(+)).\n    mode(parent(+,+)).\n    mode(parent(+,-)).\n    mode(parent(-,+)).\n\n    % Type definitions\n    base(parent(person,person)).\n    base(male(person)).\n    base(female(person)).\n    base(mother(person,person)).\n    base(grandmother(person,person)).\n    base(father(person,person)).\n    base(male_ancestor(person,person)).\n    base(female_ancestor(person,person)).\n\n    % Target\n    learn(grandmother/2).\n\n    % How to generate negative examples\n    example_mode(auto).\n\nFurther examples can be found in the directory ``examples``.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://dtai.cs.kuleuven.be/software/probfoil", "keywords": "probabilistic logic learning", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "probfoil", "package_url": "https://pypi.org/project/probfoil/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/probfoil/", "project_urls": {"Homepage": "https://dtai.cs.kuleuven.be/software/probfoil"}, "release_url": "https://pypi.org/project/probfoil/2.1.0.3/", "requires_dist": null, "requires_python": "", "summary": "Prob2FOIL: rule learner for probabilistic logic", "version": "2.1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>ProbFOIL is a probabilistic extension of FOIL that is capable of learning probabilistic rules from\nprobabilistic data.</p>\n<p>ProbFOIL 2.1 is a redesign of the Prob2FOIL algorithm that was introduced in <a href=\"https://lirias.kuleuven.be/handle/123456789/499989\" rel=\"nofollow\">https://lirias.kuleuven.be/handle/123456789/499989</a>.\nIt works on top of ProbLog 2.1.</p>\n<p>If you are looking for the version used in the paper, you should check out the tag <tt>paper_version</tt>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>ProbFOIL 2.1 requires ProbLog 2.1.\nYou can install ProbLog by using the command:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">problog</span>\n</pre>\n<p>ProbFOIL does not require any further installation.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The input of ProbFOIL consists of two parts: settings and data.\nThese are both specified in Prolog (or ProbLog) files, and they can be combined into one.</p>\n<p>The data consists of (probabilistic) facts.\nThe settings define</p>\n<ul>\n<li>target: the predicate we want to learn</li>\n<li>modes: which predicates can be added to the rules</li>\n<li>types: type information for the predicates</li>\n<li>other settings related to the data</li>\n</ul>\n<p>To use:</p>\n<pre>probfoil data.pl\n</pre>\n<p>or, in the repository version</p>\n<pre>python probfoil/probfoil.py data.pl\n</pre>\n<p>Multiple files can be specified and the information in them is concatenated.\n(For example, it is advisable to separate settings from data).</p>\n<p>Several command line arguments are available. Use <tt><span class=\"pre\">--help</span></tt> to get more information.</p>\n</div>\n<div id=\"settings-format\">\n<h2>Settings format</h2>\n<div id=\"target\">\n<h3>Target</h3>\n<p>The target should be specified by adding a fact <tt>learn(predicate/arity)</tt>.</p>\n</div>\n<div id=\"modes\">\n<h3>Modes</h3>\n<p>The modes should be specified by adding facts of the form <tt>mode(predicate(mode1, mode2, <span class=\"pre\">...)</span></tt>,\nwhere <tt>modeX</tt> is the mode specifier for argument X.\nPossible mode specifiers are:</p>\n<blockquote>\n<ul>\n<li><tt>+</tt>: the variable at this position must already exist when the literal is added</li>\n<li><tt>-</tt>: the variable at this position does not exist yet in the rule (note that this is stricter than usual)</li>\n<li><tt>c</tt>: a constant should be introduced here; possible value are derived automatically from the data</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"types\">\n<h3>Types</h3>\n<p>For each relevant predicate (target and modes) there should be a type specifier.\nThis specifier is of the form <tt>base(predicate(type1, type2, <span class=\"pre\">...)</span></tt>, where <tt>typeX</tt> is a type identifier.\nType can be identified by arbitrary Prolog atoms (e.g. <tt>person</tt>, <tt>a</tt>, etc.)</p>\n</div>\n<div id=\"example-generation\">\n<h3>Example generation</h3>\n<p>By default, examples are generated by quering the data for the target predicate.\nNegative examples can be specified by adding zero-probability facts, e.g.:</p>\n<pre><span class=\"mf\">0.0</span><span class=\"s-Atom\">::</span><span class=\"nf\">grandmother</span><span class=\"p\">(</span><span class=\"s-Atom\">john</span><span class=\"p\">,</span> <span class=\"s-Atom\">mary</span><span class=\"p\">).</span>\n</pre>\n<p>Alternatively, ProbFOIL can derive negative examples automatically by taking combinations of possible\nvalues for the target arguments. Note that this can lead to a combinatorial explosion.\nTo enable this behavior, you can specify the fact</p>\n<pre><span class=\"nf\">example_mode</span><span class=\"p\">(</span><span class=\"s-Atom\">auto</span><span class=\"p\">).</span>\n</pre>\n</div>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"c1\">% Modes</span>\n<span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"nf\">male</span><span class=\"p\">(</span><span class=\"s-Atom\">+</span><span class=\"p\">)).</span>\n<span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"s-Atom\">+</span><span class=\"p\">,</span><span class=\"s-Atom\">+</span><span class=\"p\">)).</span>\n<span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"s-Atom\">+</span><span class=\"p\">,</span><span class=\"s-Atom\">-</span><span class=\"p\">)).</span>\n<span class=\"nf\">mode</span><span class=\"p\">(</span><span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"s-Atom\">-</span><span class=\"p\">,</span><span class=\"s-Atom\">+</span><span class=\"p\">)).</span>\n\n<span class=\"c1\">% Type definitions</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">parent</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">male</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">female</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">mother</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">grandmother</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">father</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">male_ancestor</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n<span class=\"nf\">base</span><span class=\"p\">(</span><span class=\"nf\">female_ancestor</span><span class=\"p\">(</span><span class=\"s-Atom\">person</span><span class=\"p\">,</span><span class=\"s-Atom\">person</span><span class=\"p\">)).</span>\n\n<span class=\"c1\">% Target</span>\n<span class=\"nf\">learn</span><span class=\"p\">(</span><span class=\"s-Atom\">grandmother</span><span class=\"o\">/</span><span class=\"mi\">2</span><span class=\"p\">).</span>\n\n<span class=\"c1\">% How to generate negative examples</span>\n<span class=\"nf\">example_mode</span><span class=\"p\">(</span><span class=\"s-Atom\">auto</span><span class=\"p\">).</span>\n</pre>\n<p>Further examples can be found in the directory <tt>examples</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 2882602, "releases": {"2.1.0.1": [{"comment_text": "", "digests": {"md5": "e2221b875e1b4f07bf80a592f311779a", "sha256": "75d73ba9be676dba018b29306b2bf9f8373ce31af0154e40c2ae1f16ddda7166"}, "downloads": -1, "filename": "probfoil-2.1.0.1.tar.gz", "has_sig": false, "md5_digest": "e2221b875e1b4f07bf80a592f311779a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15571, "upload_time": "2016-04-18T09:13:51", "upload_time_iso_8601": "2016-04-18T09:13:51.549064Z", "url": "https://files.pythonhosted.org/packages/a3/93/49a57d32ecc3c27529ade099d8bfab1435abae5f5b635ec8e5bd79d98908/probfoil-2.1.0.1.tar.gz", "yanked": false}], "2.1.0.1.dev1": [{"comment_text": "", "digests": {"md5": "0b4fff32cde2dbad56b7596e3d69cb3d", "sha256": "888b922730bec2f84a21183aee28edc4930a12a18751281904f4b4c2d034b390"}, "downloads": -1, "filename": "probfoil-2.1.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "0b4fff32cde2dbad56b7596e3d69cb3d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11418, "upload_time": "2016-04-06T07:56:36", "upload_time_iso_8601": "2016-04-06T07:56:36.651379Z", "url": "https://files.pythonhosted.org/packages/9a/cd/241afaf26e68b10595f4b42ac2016776172c4448f9943104fbdae3d50f23/probfoil-2.1.0.1.dev1.tar.gz", "yanked": false}], "2.1.0.1.dev2": [{"comment_text": "", "digests": {"md5": "edef60e13323d1a7c2c56a9579768f90", "sha256": "6f9e8ec28dfecd167dee4a6215320783ac4f6ef1257e76219b13a2e041d74ed8"}, "downloads": -1, "filename": "probfoil-2.1.0.1.dev2.tar.gz", "has_sig": false, "md5_digest": "edef60e13323d1a7c2c56a9579768f90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13103, "upload_time": "2016-04-11T09:20:24", "upload_time_iso_8601": "2016-04-11T09:20:24.363631Z", "url": "https://files.pythonhosted.org/packages/9b/35/b9bb2ef65a6e997c10b066f612abbc52bd7c646b832045757736215dd411/probfoil-2.1.0.1.dev2.tar.gz", "yanked": false}], "2.1.0.1.dev3": [{"comment_text": "", "digests": {"md5": "a0fed83beb34d410fb6344379c730817", "sha256": "db555c704a511417a28b6ade3d7ece58ee3935ed83c08bf62e41a2b5fb3b1a19"}, "downloads": -1, "filename": "probfoil-2.1.0.1.dev3.tar.gz", "has_sig": false, "md5_digest": "a0fed83beb34d410fb6344379c730817", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15575, "upload_time": "2016-04-18T09:03:47", "upload_time_iso_8601": "2016-04-18T09:03:47.098472Z", "url": "https://files.pythonhosted.org/packages/39/13/ee026711bb8104e796c88956d2eaab6b5dfd863349903491e3b816030029/probfoil-2.1.0.1.dev3.tar.gz", "yanked": false}], "2.1.0.2": [{"comment_text": "", "digests": {"md5": "ac0cb357dc9d1a1158cac1c76b43ea86", "sha256": "9795e43ee6a3ff5ac01c2c6e230bd663f70dd39682e14de7ca34312fec0c61b5"}, "downloads": -1, "filename": "probfoil-2.1.0.2.tar.gz", "has_sig": false, "md5_digest": "ac0cb357dc9d1a1158cac1c76b43ea86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15608, "upload_time": "2017-03-21T10:29:06", "upload_time_iso_8601": "2017-03-21T10:29:06.131731Z", "url": "https://files.pythonhosted.org/packages/e3/ef/b69a341da4f6ccb64069d3fb808aedcdcadbcd6273f7448219263164cfdf/probfoil-2.1.0.2.tar.gz", "yanked": false}], "2.1.0.3": [{"comment_text": "", "digests": {"md5": "93d3301b8fbe14859f7d8b5c7bd6616c", "sha256": "08f5ad5006f39eecc15f3efaa3e645dc8691504ea7d5bbe8c70c69d29bf7b902"}, "downloads": -1, "filename": "probfoil-2.1.0.3.tar.gz", "has_sig": false, "md5_digest": "93d3301b8fbe14859f7d8b5c7bd6616c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2017-05-18T08:08:58", "upload_time_iso_8601": "2017-05-18T08:08:58.587468Z", "url": "https://files.pythonhosted.org/packages/6f/4c/ff52cde42e59be2599aa234f4248ceeea03e9801e1c686b34190f0f2210b/probfoil-2.1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93d3301b8fbe14859f7d8b5c7bd6616c", "sha256": "08f5ad5006f39eecc15f3efaa3e645dc8691504ea7d5bbe8c70c69d29bf7b902"}, "downloads": -1, "filename": "probfoil-2.1.0.3.tar.gz", "has_sig": false, "md5_digest": "93d3301b8fbe14859f7d8b5c7bd6616c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15643, "upload_time": "2017-05-18T08:08:58", "upload_time_iso_8601": "2017-05-18T08:08:58.587468Z", "url": "https://files.pythonhosted.org/packages/6f/4c/ff52cde42e59be2599aa234f4248ceeea03e9801e1c686b34190f0f2210b/probfoil-2.1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:59 2020"}