{"info": {"author": "Thomas Wolf", "author_email": "thomas@huggingface.co", "bugtrack_url": null, "classifiers": ["Intended Audience :: Science/Research", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "# PyTorch pretrained BigGAN\nAn op-for-op PyTorch reimplementation of DeepMind's BigGAN model with the pre-trained weights from DeepMind.\n\n## Introduction\n\nThis repository contains an op-for-op PyTorch reimplementation of DeepMind's BigGAN that was released with the paper [Large Scale GAN Training for High Fidelity Natural Image Synthesis](https://openreview.net/forum?id=B1xsqj09Fm) by Andrew Brocky, Jeff Donahuey and Karen Simonyan.\n\nThis PyTorch implementation of BigGAN is provided with the [pretrained 128x128, 256x256 and 512x512 models by DeepMind](https://tfhub.dev/deepmind/biggan-deep-128/1). We also provide the scripts used to download and convert these models from the TensorFlow Hub models.\n\nThis reimplementation was done from the raw computation graph of the Tensorflow version and behave similarly to the TensorFlow version (variance of the output difference of the order of 1e5).\n\n## Installation\n\nThis repo was tested on Python 3.6 and PyTorch 1.0.1\n\nPyTorch pretrained BigGAN can be installed by pip as follows:\n```bash\npip install pytorch-pretrained-biggan\n```\n\nIf you simply want to play with the GAN this should be enough.\n\nIf you want to use the conversion scripts and the imagenet utilities, additional requirements are needed, in particular TensorFlow and NLTK. To install all the requirements please use the `full_requirements.txt` file:\n```bash\ngit clone https://github.com/huggingface/pytorch-pretrained-BigGAN.git\ncd pytorch-pretrained-BigGAN\npip install -r full_requirements.txt\n```\n\n## Models\n\nThis repository provide direct and simple access to the pretrained \"deep\" versions of BigGAN for 128, 256 and 512 pixels resolutions as described in the [associated publication](https://openreview.net/forum?id=B1xsqj09Fm).\nHere are some details on the models:\n\n- `BigGAN-deep-128`: a 50.4M parameters model generating 128x128 pixels images, the model dump weights 201 MB,\n- `BigGAN-deep-256`: a 55.9M parameters model generating 256x256 pixels images, the model dump weights 224 MB,\n- `BigGAN-deep-512`: a 56.2M parameters model generating 512x512 pixels images, the model dump weights 225 MB.\n\nPlease refer to Appendix B of the paper for details on the architectures.\n\nAll models comprise pre-computed batch norm statistics for 51 truncation values between 0 and 1 (see Appendix C.1 in the paper for details).\n\n## Usage\n\nHere is a quick-start example using `BigGAN` with a pre-trained model.\n\nSee the [doc section](#doc) below for details on these classes and methods.\n\n```python\nimport torch\nfrom pytorch_pretrained_biggan import (BigGAN, one_hot_from_names, truncated_noise_sample,\n                                       save_as_images, display_in_terminal)\n\n# OPTIONAL: if you want to have more information on what's happening, activate the logger as follows\nimport logging\nlogging.basicConfig(level=logging.INFO)\n\n# Load pre-trained model tokenizer (vocabulary)\nmodel = BigGAN.from_pretrained('biggan-deep-256')\n\n# Prepare a input\ntruncation = 0.4\nclass_vector = one_hot_from_names(['soap bubble', 'coffee', 'mushroom'], batch_size=3)\nnoise_vector = truncated_noise_sample(truncation=truncation, batch_size=3)\n\n# All in tensors\nnoise_vector = torch.from_numpy(noise_vector)\nclass_vector = torch.from_numpy(class_vector)\n\n# Generate an image\noutput = model(noise_vector, class_vector, truncation)\n\n# If you have a sixtel compatible terminal you can display the images in the terminal\n# (see https://github.com/saitoha/libsixel for details)\ndisplay_in_terminal(output)\n\n# Save results as png images\nsave_as_images(output)\n```\n\n![output_0](assets/output_0.png)\n![output_1](assets/output_1.png)\n![output_2](assets/output_2.png)\n\n## Doc\n\n### Loading DeepMind's pre-trained weights\n\nTo load one of DeepMind's pre-trained models, instantiate a `BigGAN` model with `from_pretrained()` as:\n\n```python\nmodel = BigGAN.from_pretrained(PRE_TRAINED_MODEL_NAME_OR_PATH, cache_dir=None)\n```\n\nwhere\n\n- `PRE_TRAINED_MODEL_NAME_OR_PATH` is either:\n\n  - the shortcut name of a Google AI's or OpenAI's pre-trained model selected in the list:\n\n    - `biggan-deep-128`: 12-layer, 768-hidden, 12-heads, 110M parameters\n    - `biggan-deep-256`: 24-layer, 1024-hidden, 16-heads, 340M parameters\n    - `biggan-deep-512`: 12-layer, 768-hidden, 12-heads , 110M parameters\n\n  - a path or url to a pretrained model archive containing:\n\n    - `config.json`: a configuration file for the model, and\n    - `pytorch_model.bin` a PyTorch dump of a pre-trained instance of `BigGAN` (saved with the usual `torch.save()`).\n\n  If `PRE_TRAINED_MODEL_NAME_OR_PATH` is a shortcut name, the pre-trained weights will be downloaded from AWS S3 (see the links [here](pytorch_pretrained_biggan/model.py)) and stored in a cache folder to avoid future download (the cache folder can be found at `~/.pytorch_pretrained_biggan/`).\n- `cache_dir` can be an optional path to a specific directory to download and cache the pre-trained model weights.\n\n### Configuration\n\n`BigGANConfig` is a class to store and load BigGAN configurations. It's defined in [`config.py`](./pytorch_pretrained_biggan/config.py).\n\nHere are some details on the attributes:\n\n- `output_dim`: output resolution of the GAN (128, 256 or 512) for the pre-trained models,\n- `z_dim`: size of the noise vector (128 for the pre-trained models).\n- `class_embed_dim`: size of the class embedding vectors (128 for the pre-trained models).\n- `channel_width`: size of each channel (128 for the pre-trained models).\n- `num_classes`: number of classes in the training dataset, like imagenet (1000 for the pre-trained models).\n- `layers`: A list of layers definition. Each definition for a layer is a triple of [up-sample in the layer ? (bool), number of input channels (int), number of output channels (int)]\n- `attention_layer_position`: Position of the self-attention layer in the layer hierarchy (8 for the pre-trained models).\n- `eps`: epsilon value to use for spectral and batch normalization layers (1e-4 for the pre-trained models).\n- `n_stats`: number of pre-computed statistics for the batch normalization layers associated to various truncation values between 0 and 1 (51 for the pre-trained models).\n\n### Model\n\n`BigGAN` is a PyTorch model (`torch.nn.Module`) of BigGAN defined in [`model.py`](./pytorch_pretrained_biggan/model.py). This model comprises the class embeddings (a linear layer) and the generator with a series of convolutions and conditional batch norms. The discriminator is currently not implemented since pre-trained weights have not been released for it.\n\nThe inputs and output are **identical to the TensorFlow model inputs and outputs**.\n\nWe detail them here.\n\n`BigGAN` takes as *inputs*:\n\n- `z`: a torch.FloatTensor of shape [batch_size, config.z_dim] with noise sampled from a truncated normal distribution, and\n- `class_label`: an optional torch.LongTensor of shape [batch_size, sequence_length] with the token types indices selected in [0, 1]. Type 0 corresponds to a `sentence A` and type 1 corresponds to a `sentence B` token (see BERT paper for more details).\n- `truncation`: a float between 0 (not comprised) and 1. The truncation of the truncated normal used for creating the noise vector. This truncation value is used to selecte between a set of pre-computed statistics (means and variances) for the batch norm layers.\n\n`BigGAN` *outputs* an array of shape [batch_size, 3, resolution, resolution] where resolution is 128, 256 or 512 depending of the model:\n\n### Utilities: Images, Noise, Imagenet classes\n\nWe provide a few utility method to use the model. They are defined in [`utils.py`](./pytorch_pretrained_biggan/utils.py).\n\nHere are some details on these methods:\n\n- `truncated_noise_sample(batch_size=1, dim_z=128, truncation=1., seed=None)`:\n\n    Create a truncated noise vector.\n    - Params:\n        - batch_size: batch size.\n        - dim_z: dimension of z\n        - truncation: truncation value to use\n        - seed: seed for the random generator\n    - Output:\n        array of shape (batch_size, dim_z)\n\n- `convert_to_images(obj)`:\n\n    Convert an output tensor from BigGAN in a list of images.\n    - Params:\n        - obj: tensor or numpy array of shape (batch_size, channels, height, width)\n    - Output:\n        - list of Pillow Images of size (height, width)\n\n- `save_as_images(obj, file_name='output')`:\n\n    Convert and save an output tensor from BigGAN in a list of saved images.\n    - Params:\n        - obj: tensor or numpy array of shape (batch_size, channels, height, width)\n        - file_name: path and beggingin of filename to save.\n            Images will be saved as `file_name_{image_number}.png`\n\n- `display_in_terminal(obj)`:\n\n    Convert and display an output tensor from BigGAN in the terminal. This function use `libsixel` and will only work in a libsixel-compatible terminal. Please refer to https://github.com/saitoha/libsixel for more details.\n    - Params:\n        - obj: tensor or numpy array of shape (batch_size, channels, height, width)\n        - file_name: path and beggingin of filename to save.\n            Images will be saved as `file_name_{image_number}.png`\n\n- `one_hot_from_int(int_or_list, batch_size=1)`:\n\n    Create a one-hot vector from a class index or a list of class indices.\n    - Params:\n        - int_or_list: int, or list of int, of the imagenet classes (between 0 and 999)\n        - batch_size: batch size.\n            - If int_or_list is an int create a batch of identical classes.\n            - If int_or_list is a list, we should have `len(int_or_list) == batch_size`\n    - Output:\n        - array of shape (batch_size, 1000)\n\n- `one_hot_from_names(class_name, batch_size=1)`:\n\n    Create a one-hot vector from the name of an imagenet class ('tennis ball', 'daisy', ...). We use NLTK's wordnet search to try to find the relevant synset of ImageNet and take the first one. If we can't find it direcly, we look at the hyponyms and hypernyms of the class name.\n    - Params:\n        - class_name: string containing the name of an imagenet object.\n    - Output:\n        - array of shape (batch_size, 1000)\n\n## Download and conversion scripts\n\nScripts to download and convert the TensorFlow models from TensorFlow Hub are provided in [./scripts](./scripts/).\n\nThe scripts can be used directly as:\n```bash\n./scripts/download_tf_hub_models.sh\n./scripts/convert_tf_hub_models.sh\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/huggingface/pytorch-pretrained-BigGAN", "keywords": "BIGGAN GAN deep learning google deepmind", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "pytorch-pretrained-biggan", "package_url": "https://pypi.org/project/pytorch-pretrained-biggan/", "platform": "", "project_url": "https://pypi.org/project/pytorch-pretrained-biggan/", "project_urls": {"Homepage": "https://github.com/huggingface/pytorch-pretrained-BigGAN"}, "release_url": "https://pypi.org/project/pytorch-pretrained-biggan/0.1.1/", "requires_dist": ["torch (>=0.4.1)", "numpy", "boto3", "requests", "tqdm"], "requires_python": "", "summary": "PyTorch version of DeepMind's BigGAN model with pre-trained models", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyTorch pretrained BigGAN</h1>\n<p>An op-for-op PyTorch reimplementation of DeepMind's BigGAN model with the pre-trained weights from DeepMind.</p>\n<h2>Introduction</h2>\n<p>This repository contains an op-for-op PyTorch reimplementation of DeepMind's BigGAN that was released with the paper <a href=\"https://openreview.net/forum?id=B1xsqj09Fm\" rel=\"nofollow\">Large Scale GAN Training for High Fidelity Natural Image Synthesis</a> by Andrew Brocky, Jeff Donahuey and Karen Simonyan.</p>\n<p>This PyTorch implementation of BigGAN is provided with the <a href=\"https://tfhub.dev/deepmind/biggan-deep-128/1\" rel=\"nofollow\">pretrained 128x128, 256x256 and 512x512 models by DeepMind</a>. We also provide the scripts used to download and convert these models from the TensorFlow Hub models.</p>\n<p>This reimplementation was done from the raw computation graph of the Tensorflow version and behave similarly to the TensorFlow version (variance of the output difference of the order of 1e5).</p>\n<h2>Installation</h2>\n<p>This repo was tested on Python 3.6 and PyTorch 1.0.1</p>\n<p>PyTorch pretrained BigGAN can be installed by pip as follows:</p>\n<pre>pip install pytorch-pretrained-biggan\n</pre>\n<p>If you simply want to play with the GAN this should be enough.</p>\n<p>If you want to use the conversion scripts and the imagenet utilities, additional requirements are needed, in particular TensorFlow and NLTK. To install all the requirements please use the <code>full_requirements.txt</code> file:</p>\n<pre>git clone https://github.com/huggingface/pytorch-pretrained-BigGAN.git\n<span class=\"nb\">cd</span> pytorch-pretrained-BigGAN\npip install -r full_requirements.txt\n</pre>\n<h2>Models</h2>\n<p>This repository provide direct and simple access to the pretrained \"deep\" versions of BigGAN for 128, 256 and 512 pixels resolutions as described in the <a href=\"https://openreview.net/forum?id=B1xsqj09Fm\" rel=\"nofollow\">associated publication</a>.\nHere are some details on the models:</p>\n<ul>\n<li><code>BigGAN-deep-128</code>: a 50.4M parameters model generating 128x128 pixels images, the model dump weights 201 MB,</li>\n<li><code>BigGAN-deep-256</code>: a 55.9M parameters model generating 256x256 pixels images, the model dump weights 224 MB,</li>\n<li><code>BigGAN-deep-512</code>: a 56.2M parameters model generating 512x512 pixels images, the model dump weights 225 MB.</li>\n</ul>\n<p>Please refer to Appendix B of the paper for details on the architectures.</p>\n<p>All models comprise pre-computed batch norm statistics for 51 truncation values between 0 and 1 (see Appendix C.1 in the paper for details).</p>\n<h2>Usage</h2>\n<p>Here is a quick-start example using <code>BigGAN</code> with a pre-trained model.</p>\n<p>See the <a href=\"#doc\" rel=\"nofollow\">doc section</a> below for details on these classes and methods.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pytorch_pretrained_biggan</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">BigGAN</span><span class=\"p\">,</span> <span class=\"n\">one_hot_from_names</span><span class=\"p\">,</span> <span class=\"n\">truncated_noise_sample</span><span class=\"p\">,</span>\n                                       <span class=\"n\">save_as_images</span><span class=\"p\">,</span> <span class=\"n\">display_in_terminal</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># OPTIONAL: if you want to have more information on what's happening, activate the logger as follows</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Load pre-trained model tokenizer (vocabulary)</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BigGAN</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s1\">'biggan-deep-256'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Prepare a input</span>\n<span class=\"n\">truncation</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span>\n<span class=\"n\">class_vector</span> <span class=\"o\">=</span> <span class=\"n\">one_hot_from_names</span><span class=\"p\">([</span><span class=\"s1\">'soap bubble'</span><span class=\"p\">,</span> <span class=\"s1\">'coffee'</span><span class=\"p\">,</span> <span class=\"s1\">'mushroom'</span><span class=\"p\">],</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">noise_vector</span> <span class=\"o\">=</span> <span class=\"n\">truncated_noise_sample</span><span class=\"p\">(</span><span class=\"n\">truncation</span><span class=\"o\">=</span><span class=\"n\">truncation</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># All in tensors</span>\n<span class=\"n\">noise_vector</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">from_numpy</span><span class=\"p\">(</span><span class=\"n\">noise_vector</span><span class=\"p\">)</span>\n<span class=\"n\">class_vector</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">from_numpy</span><span class=\"p\">(</span><span class=\"n\">class_vector</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate an image</span>\n<span class=\"n\">output</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">noise_vector</span><span class=\"p\">,</span> <span class=\"n\">class_vector</span><span class=\"p\">,</span> <span class=\"n\">truncation</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you have a sixtel compatible terminal you can display the images in the terminal</span>\n<span class=\"c1\"># (see https://github.com/saitoha/libsixel for details)</span>\n<span class=\"n\">display_in_terminal</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save results as png images</span>\n<span class=\"n\">save_as_images</span><span class=\"p\">(</span><span class=\"n\">output</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"output_0\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a68ad888b76d80a101e2e3bd7235550a99397c5/6173736574732f6f75747075745f302e706e67\">\n<img alt=\"output_1\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/992a57304445d0a4d73813233099774805b0775c/6173736574732f6f75747075745f312e706e67\">\n<img alt=\"output_2\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06c0475e2ec896e9dbb8cb9862119e3b6af0eaf6/6173736574732f6f75747075745f322e706e67\"></p>\n<h2>Doc</h2>\n<h3>Loading DeepMind's pre-trained weights</h3>\n<p>To load one of DeepMind's pre-trained models, instantiate a <code>BigGAN</code> model with <code>from_pretrained()</code> as:</p>\n<pre><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">BigGAN</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"n\">PRE_TRAINED_MODEL_NAME_OR_PATH</span><span class=\"p\">,</span> <span class=\"n\">cache_dir</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>where</p>\n<ul>\n<li>\n<p><code>PRE_TRAINED_MODEL_NAME_OR_PATH</code> is either:</p>\n<ul>\n<li>\n<p>the shortcut name of a Google AI's or OpenAI's pre-trained model selected in the list:</p>\n<ul>\n<li><code>biggan-deep-128</code>: 12-layer, 768-hidden, 12-heads, 110M parameters</li>\n<li><code>biggan-deep-256</code>: 24-layer, 1024-hidden, 16-heads, 340M parameters</li>\n<li><code>biggan-deep-512</code>: 12-layer, 768-hidden, 12-heads , 110M parameters</li>\n</ul>\n</li>\n<li>\n<p>a path or url to a pretrained model archive containing:</p>\n<ul>\n<li><code>config.json</code>: a configuration file for the model, and</li>\n<li><code>pytorch_model.bin</code> a PyTorch dump of a pre-trained instance of <code>BigGAN</code> (saved with the usual <code>torch.save()</code>).</li>\n</ul>\n</li>\n</ul>\n<p>If <code>PRE_TRAINED_MODEL_NAME_OR_PATH</code> is a shortcut name, the pre-trained weights will be downloaded from AWS S3 (see the links <a href=\"pytorch_pretrained_biggan/model.py\" rel=\"nofollow\">here</a>) and stored in a cache folder to avoid future download (the cache folder can be found at <code>~/.pytorch_pretrained_biggan/</code>).</p>\n</li>\n<li>\n<p><code>cache_dir</code> can be an optional path to a specific directory to download and cache the pre-trained model weights.</p>\n</li>\n</ul>\n<h3>Configuration</h3>\n<p><code>BigGANConfig</code> is a class to store and load BigGAN configurations. It's defined in <a href=\"./pytorch_pretrained_biggan/config.py\" rel=\"nofollow\"><code>config.py</code></a>.</p>\n<p>Here are some details on the attributes:</p>\n<ul>\n<li><code>output_dim</code>: output resolution of the GAN (128, 256 or 512) for the pre-trained models,</li>\n<li><code>z_dim</code>: size of the noise vector (128 for the pre-trained models).</li>\n<li><code>class_embed_dim</code>: size of the class embedding vectors (128 for the pre-trained models).</li>\n<li><code>channel_width</code>: size of each channel (128 for the pre-trained models).</li>\n<li><code>num_classes</code>: number of classes in the training dataset, like imagenet (1000 for the pre-trained models).</li>\n<li><code>layers</code>: A list of layers definition. Each definition for a layer is a triple of [up-sample in the layer ? (bool), number of input channels (int), number of output channels (int)]</li>\n<li><code>attention_layer_position</code>: Position of the self-attention layer in the layer hierarchy (8 for the pre-trained models).</li>\n<li><code>eps</code>: epsilon value to use for spectral and batch normalization layers (1e-4 for the pre-trained models).</li>\n<li><code>n_stats</code>: number of pre-computed statistics for the batch normalization layers associated to various truncation values between 0 and 1 (51 for the pre-trained models).</li>\n</ul>\n<h3>Model</h3>\n<p><code>BigGAN</code> is a PyTorch model (<code>torch.nn.Module</code>) of BigGAN defined in <a href=\"./pytorch_pretrained_biggan/model.py\" rel=\"nofollow\"><code>model.py</code></a>. This model comprises the class embeddings (a linear layer) and the generator with a series of convolutions and conditional batch norms. The discriminator is currently not implemented since pre-trained weights have not been released for it.</p>\n<p>The inputs and output are <strong>identical to the TensorFlow model inputs and outputs</strong>.</p>\n<p>We detail them here.</p>\n<p><code>BigGAN</code> takes as <em>inputs</em>:</p>\n<ul>\n<li><code>z</code>: a torch.FloatTensor of shape [batch_size, config.z_dim] with noise sampled from a truncated normal distribution, and</li>\n<li><code>class_label</code>: an optional torch.LongTensor of shape [batch_size, sequence_length] with the token types indices selected in [0, 1]. Type 0 corresponds to a <code>sentence A</code> and type 1 corresponds to a <code>sentence B</code> token (see BERT paper for more details).</li>\n<li><code>truncation</code>: a float between 0 (not comprised) and 1. The truncation of the truncated normal used for creating the noise vector. This truncation value is used to selecte between a set of pre-computed statistics (means and variances) for the batch norm layers.</li>\n</ul>\n<p><code>BigGAN</code> <em>outputs</em> an array of shape [batch_size, 3, resolution, resolution] where resolution is 128, 256 or 512 depending of the model:</p>\n<h3>Utilities: Images, Noise, Imagenet classes</h3>\n<p>We provide a few utility method to use the model. They are defined in <a href=\"./pytorch_pretrained_biggan/utils.py\" rel=\"nofollow\"><code>utils.py</code></a>.</p>\n<p>Here are some details on these methods:</p>\n<ul>\n<li>\n<p><code>truncated_noise_sample(batch_size=1, dim_z=128, truncation=1., seed=None)</code>:</p>\n<p>Create a truncated noise vector.</p>\n<ul>\n<li>Params:\n<ul>\n<li>batch_size: batch size.</li>\n<li>dim_z: dimension of z</li>\n<li>truncation: truncation value to use</li>\n<li>seed: seed for the random generator</li>\n</ul>\n</li>\n<li>Output:\narray of shape (batch_size, dim_z)</li>\n</ul>\n</li>\n<li>\n<p><code>convert_to_images(obj)</code>:</p>\n<p>Convert an output tensor from BigGAN in a list of images.</p>\n<ul>\n<li>Params:\n<ul>\n<li>obj: tensor or numpy array of shape (batch_size, channels, height, width)</li>\n</ul>\n</li>\n<li>Output:\n<ul>\n<li>list of Pillow Images of size (height, width)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>save_as_images(obj, file_name='output')</code>:</p>\n<p>Convert and save an output tensor from BigGAN in a list of saved images.</p>\n<ul>\n<li>Params:\n<ul>\n<li>obj: tensor or numpy array of shape (batch_size, channels, height, width)</li>\n<li>file_name: path and beggingin of filename to save.\nImages will be saved as <code>file_name_{image_number}.png</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>display_in_terminal(obj)</code>:</p>\n<p>Convert and display an output tensor from BigGAN in the terminal. This function use <code>libsixel</code> and will only work in a libsixel-compatible terminal. Please refer to <a href=\"https://github.com/saitoha/libsixel\" rel=\"nofollow\">https://github.com/saitoha/libsixel</a> for more details.</p>\n<ul>\n<li>Params:\n<ul>\n<li>obj: tensor or numpy array of shape (batch_size, channels, height, width)</li>\n<li>file_name: path and beggingin of filename to save.\nImages will be saved as <code>file_name_{image_number}.png</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>one_hot_from_int(int_or_list, batch_size=1)</code>:</p>\n<p>Create a one-hot vector from a class index or a list of class indices.</p>\n<ul>\n<li>Params:\n<ul>\n<li>int_or_list: int, or list of int, of the imagenet classes (between 0 and 999)</li>\n<li>batch_size: batch size.\n<ul>\n<li>If int_or_list is an int create a batch of identical classes.</li>\n<li>If int_or_list is a list, we should have <code>len(int_or_list) == batch_size</code></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Output:\n<ul>\n<li>array of shape (batch_size, 1000)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>one_hot_from_names(class_name, batch_size=1)</code>:</p>\n<p>Create a one-hot vector from the name of an imagenet class ('tennis ball', 'daisy', ...). We use NLTK's wordnet search to try to find the relevant synset of ImageNet and take the first one. If we can't find it direcly, we look at the hyponyms and hypernyms of the class name.</p>\n<ul>\n<li>Params:\n<ul>\n<li>class_name: string containing the name of an imagenet object.</li>\n</ul>\n</li>\n<li>Output:\n<ul>\n<li>array of shape (batch_size, 1000)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Download and conversion scripts</h2>\n<p>Scripts to download and convert the TensorFlow models from TensorFlow Hub are provided in <a href=\"./scripts/\" rel=\"nofollow\">./scripts</a>.</p>\n<p>The scripts can be used directly as:</p>\n<pre>./scripts/download_tf_hub_models.sh\n./scripts/convert_tf_hub_models.sh\n</pre>\n\n          </div>"}, "last_serial": 4968211, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b6c7d316de63bc13274bcbc0b7aab12f", "sha256": "b651ca31ab26a799c380cae3c7100c4ad381f8ea50578031bdee937f6c814e30"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b6c7d316de63bc13274bcbc0b7aab12f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34347, "upload_time": "2019-03-21T13:15:09", "upload_time_iso_8601": "2019-03-21T13:15:09.926851Z", "url": "https://files.pythonhosted.org/packages/b9/40/679c5531a2949447441a3653a7f122d8a56cfa222e40b48b563102e530f5/pytorch_pretrained_biggan-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cbe638c25e2aca103b620478efd6be1", "sha256": "b5c9f5130b5be173d0c5f4472d58bf7787496d8765986eb4b491dc6f66e5b8c8"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1cbe638c25e2aca103b620478efd6be1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35965, "upload_time": "2019-03-21T13:15:12", "upload_time_iso_8601": "2019-03-21T13:15:12.173289Z", "url": "https://files.pythonhosted.org/packages/38/18/c6943049d99590c0825efe8092a1a9c08a4844ccb48864a7abfb9cd6fcfb/pytorch_pretrained_biggan-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "051350e0739c11871f050bde28f68917", "sha256": "bf66cd110ddc8f8d2a372f47b55b2f90b3cc19adbb304891f1d6a9aa043cc533"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "051350e0739c11871f050bde28f68917", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27160, "upload_time": "2019-03-21T13:53:09", "upload_time_iso_8601": "2019-03-21T13:53:09.205993Z", "url": "https://files.pythonhosted.org/packages/21/05/cd567ad149d8e91080ee767dcaec25b84a325c590b7a415a6edd3a022818/pytorch_pretrained_biggan-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ce7060d4c94ff3d271555816b5d36f9", "sha256": "5a911d9372a87a4fa1e4673ffef55a9bcd1954890b9d8474c3564b1ca7869df4"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ce7060d4c94ff3d271555816b5d36f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28875, "upload_time": "2019-03-21T13:53:10", "upload_time_iso_8601": "2019-03-21T13:53:10.755582Z", "url": "https://files.pythonhosted.org/packages/85/38/93d2cc3e1642af251518adbe5f5996c7c8e127ed744afdf51e74694a651c/pytorch_pretrained_biggan-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "051350e0739c11871f050bde28f68917", "sha256": "bf66cd110ddc8f8d2a372f47b55b2f90b3cc19adbb304891f1d6a9aa043cc533"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "051350e0739c11871f050bde28f68917", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27160, "upload_time": "2019-03-21T13:53:09", "upload_time_iso_8601": "2019-03-21T13:53:09.205993Z", "url": "https://files.pythonhosted.org/packages/21/05/cd567ad149d8e91080ee767dcaec25b84a325c590b7a415a6edd3a022818/pytorch_pretrained_biggan-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3ce7060d4c94ff3d271555816b5d36f9", "sha256": "5a911d9372a87a4fa1e4673ffef55a9bcd1954890b9d8474c3564b1ca7869df4"}, "downloads": -1, "filename": "pytorch_pretrained_biggan-0.1.1.tar.gz", "has_sig": false, "md5_digest": "3ce7060d4c94ff3d271555816b5d36f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28875, "upload_time": "2019-03-21T13:53:10", "upload_time_iso_8601": "2019-03-21T13:53:10.755582Z", "url": "https://files.pythonhosted.org/packages/85/38/93d2cc3e1642af251518adbe5f5996c7c8e127ed744afdf51e74694a651c/pytorch_pretrained_biggan-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:46 2020"}