{"info": {"author": "CCX Technologies", "author_email": "charles@ccxtechnologies.com", "bugtrack_url": null, "classifiers": [], "description": "python-adbus\n============\n\nD-Bus Binding for Python utilizing the Python's asyncio module.\n\nStatus\n------\n\n.. image:: https://api.codacy.com/project/badge/Grade/c66c19cdcadd4c83bc4b70596d65aa7a\n  :target: https://www.codacy.com/app/ccxtechnologies/python-adbus?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ccxtechnologies/python-adbus&amp;utm_campaign=Badge_Grade\n\n.. image:: https://api.codacy.com/project/badge/Coverage/c66c19cdcadd4c83bc4b70596d65aa7a\n  :target: https://www.codacy.com/app/ccxtechnologies/python-adbus?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=ccxtechnologies/python-adbus&amp;utm_campaign=Badge_Coverage\n\n\nLinks\n-----\n- `Documentation <https://ccxtechnologies.github.io/adbus>`_\n- `Project Page <https://github.com/ccxtechnologies/adbus>`_\n- `Issues <https://github.com/ccxtechnologies/adbus/issues>`_\n\nDependencies\n------------\n\n1. Python >= 3.7\n2. libsystemd >= 232 (don\u2019t need systemd, just libsystemd which is a separate package)\n3. Cython >= 0.25.2 (only required to regenerate sdbus.c, if you make any changes)\n\nBuilding / Installing\n---------------------\n\n- To build in place for development python ./setup.py build\\_ext --inplace\n- The html documents are stored in gh-pages branch, so that GitHub will\n  serve them as a GitHub Pages. To build them:\n  1. check out the gh-pages branch into ../python-adbus/html\n  2. cd into docs\n  3. sphinx-apidoc -o source/ ../adbus\n  4. make html\n\nUnit-Tests\n----------\n\nNOTE: Some test-cases require the busctl tool from systemd.\n\n-  To run a specific unit-test from the root directory (eg.): python -m\n   unittest tests.test\\_sdbus\\_method.Test.test\\_method\\_single\\_str\n\n-  To run a specific unit-test module from the root directory (eg.):\n   python -m unittest tests.test\\_sdbus\\_method\n\n-  To run all unit-tests from the root directory: python -m unittest\n   discover\n\nServer Examples\n---------------\n\nObject Example\n~~~~~~~~~~~~~~\n\nThis is an example of an object, which can be connected to a service.\n\n.. code-block:: python\n\n  import adbus\n  import typing\n\n  class ExampleClass(adbus.server.Object):\n\n      signal1: int = adbus.server.Signal()\n      signal2: typing.List[int] = adbus.server.Signal()\n\n      property1: str = adbus.server.Property('none', read_only=True, hidden=True)\n      property2: typing.List[int] = adbus.server.Property(['rr', 'ff'], deprectiated=True)\n\n      def __init__(self, service):\n          super().__init__(service, path='/xxx/yyy', interface='yyy.xxx')\n\n      @adbus.method(name='test', hidden=True)\n      def test_method(self, r: int, gg: str) -> int:\n          return r + 10\n\n      def do_something(self):\n          self.signal1.emit(14)\n\nSetting Multiple Properties\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's possible to set multiple properties at the same time, this will defer the property\nupdate signal, and send one signal for all property changes. It's good practice to use\nthis when changing multiple properties, it will reduce traffic on the D-Bus.\n\nNOTE: Must be running in a loop.\n\n\nClient Examples\n---------------\n\nAccessing Remote Interface via a Proxy\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's possible to map a remote interface to a local instantiated class using a Proxy.\n\nNOTE: If the even loop isn't running no signals will caught, and properties will not\ncache (i.e. will read on every access instead of tracking the property changes signals)\n\n**This is a protoype to see how it looks, it hasn't been implemented yet.**\n\n.. code-block:: python\n\n  service = adbus.Service(bus='session')\n  proxy = adbus.client.Proxy(service, 'com.example.xxx', '/com/example/Service1',\n      interface='com.example.service.unit')\n\n  async def proxy_examples():\n    await proxy.update() # initialize the proxy\n\n    # == Access Properties\n    await proxy.remote_propertyX.set(45)\n    print(await proxy.remote_propertyY.get())\n\n    # == or\n    await proxy.remote_propertyX(45)\n    print(await proxy.remote_propertyY())\n\n    # == Access Methods\n    asyncio.ensure_future(proxy.remote_method_foo(\"some info\")) # don't wait for result\n    x = await proxy.remote_method_bar(100, 12, -45) # wait for result\n\n    # == Add a Coroutine to a Signal\n    async def local_method(signal_data: int):\n      print(signal_data)\n    proxy.remote_signal.add(local_method)\n\n    # == or\n    proxy.remote_signal(local_method)\n\n    # == Remove a Coroutine to a Signal\n    proxy.remote_signal.remove(local_method)\n\n    # == or (if already added)\n    proxy.remote_signal(local_method)\n\n    # == Access a method using a different interface name\n    proxy['com.example.service.serve'].remote_method_800(b\"data\")\n\n    # == Create a new proxy from a node in the proxy\n    proxy_new = await proxy('Test')\n\n    # == Loop through all nodes in a proxy\n    sum_cnt = 0\n    async for node in proxy:\n        try:\n            sum_cnt += await node.count\n        except AttributeError:\n            pass\n\n    # == set multiple properties in one message (if linked to an adbus based server)\n    async with proxy as p:\n        p.property1 = \"some data\"\n        p.property2 = [1,2,3,4,5]\n\n  loop = asyncio.get_event_loop()\n  loop.run_until_complete(proxy_examples())\n  loop.close()\n\nStyle Guide\n-----------\n\nFor a consistent style all code is run through yapf using the Facebook style:\n\nAll docstrings are in the google style.", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/ccxtechnologies/archive/v1.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ccxtechnologies/adbus", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "adbus", "package_url": "https://pypi.org/project/adbus/", "platform": "", "project_url": "https://pypi.org/project/adbus/", "project_urls": {"Download": "https://github.com/ccxtechnologies/archive/v1.0.1.tar.gz", "Homepage": "https://github.com/ccxtechnologies/adbus"}, "release_url": "https://pypi.org/project/adbus/1.0.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "asyncio based dbus interface", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>D-Bus Binding for Python utilizing the Python\u2019s asyncio module.</p>\n<div id=\"status\">\n<h2>Status</h2>\n<a href=\"https://www.codacy.com/app/ccxtechnologies/python-adbus?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ccxtechnologies/python-adbus&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"https://api.codacy.com/project/badge/Grade/c66c19cdcadd4c83bc4b70596d65aa7a\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f635e73a4473dcc8877c6602d62fb001b42b5411/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6336366331396364636164643463383362633462373035393664363561613761\"></a>\n<a href=\"https://www.codacy.com/app/ccxtechnologies/python-adbus?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=ccxtechnologies/python-adbus&amp;amp;utm_campaign=Badge_Coverage\" rel=\"nofollow\"><img alt=\"https://api.codacy.com/project/badge/Coverage/c66c19cdcadd4c83bc4b70596d65aa7a\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/463db241ce6d4c8cbcb02dd178f6818142431bef/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f436f7665726167652f6336366331396364636164643463383362633462373035393664363561613761\"></a>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://ccxtechnologies.github.io/adbus\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"https://github.com/ccxtechnologies/adbus\" rel=\"nofollow\">Project Page</a></li>\n<li><a href=\"https://github.com/ccxtechnologies/adbus/issues\" rel=\"nofollow\">Issues</a></li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h2>Dependencies</h2>\n<ol>\n<li>Python &gt;= 3.7</li>\n<li>libsystemd &gt;= 232 (don\u2019t need systemd, just libsystemd which is a separate package)</li>\n<li>Cython &gt;= 0.25.2 (only required to regenerate sdbus.c, if you make any changes)</li>\n</ol>\n</div>\n<div id=\"building-installing\">\n<h2>Building / Installing</h2>\n<ul>\n<li>To build in place for development python ./setup.py build_ext \u2013inplace</li>\n<li>The html documents are stored in gh-pages branch, so that GitHub will\nserve them as a GitHub Pages. To build them:\n1. check out the gh-pages branch into ../python-adbus/html\n2. cd into docs\n3. sphinx-apidoc -o source/ ../adbus\n4. make html</li>\n</ul>\n</div>\n<div id=\"unit-tests\">\n<h2>Unit-Tests</h2>\n<p>NOTE: Some test-cases require the busctl tool from systemd.</p>\n<ul>\n<li>To run a specific unit-test from the root directory (eg.): python -m\nunittest tests.test_sdbus_method.Test.test_method_single_str</li>\n<li>To run a specific unit-test module from the root directory (eg.):\npython -m unittest tests.test_sdbus_method</li>\n<li>To run all unit-tests from the root directory: python -m unittest\ndiscover</li>\n</ul>\n</div>\n<div id=\"server-examples\">\n<h2>Server Examples</h2>\n<div id=\"object-example\">\n<h3>Object Example</h3>\n<p>This is an example of an object, which can be connected to a service.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">adbus</span>\n<span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ExampleClass</span><span class=\"p\">(</span><span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n\n    <span class=\"n\">signal1</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Signal</span><span class=\"p\">()</span>\n    <span class=\"n\">signal2</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Signal</span><span class=\"p\">()</span>\n\n    <span class=\"n\">property1</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Property</span><span class=\"p\">(</span><span class=\"s1\">'none'</span><span class=\"p\">,</span> <span class=\"n\">read_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">property2</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">Property</span><span class=\"p\">([</span><span class=\"s1\">'rr'</span><span class=\"p\">,</span> <span class=\"s1\">'ff'</span><span class=\"p\">],</span> <span class=\"n\">deprectiated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">service</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s1\">'/xxx/yyy'</span><span class=\"p\">,</span> <span class=\"n\">interface</span><span class=\"o\">=</span><span class=\"s1\">'yyy.xxx'</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@adbus</span><span class=\"o\">.</span><span class=\"n\">method</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'test'</span><span class=\"p\">,</span> <span class=\"n\">hidden</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">r</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">gg</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">r</span> <span class=\"o\">+</span> <span class=\"mi\">10</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_something</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">signal1</span><span class=\"o\">.</span><span class=\"n\">emit</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"setting-multiple-properties\">\n<h3>Setting Multiple Properties</h3>\n<p>It\u2019s possible to set multiple properties at the same time, this will defer the property\nupdate signal, and send one signal for all property changes. It\u2019s good practice to use\nthis when changing multiple properties, it will reduce traffic on the D-Bus.</p>\n<p>NOTE: Must be running in a loop.</p>\n</div>\n</div>\n<div id=\"client-examples\">\n<h2>Client Examples</h2>\n<h2 id=\"accessing-remote-interface-via-a-proxy\"><span class=\"section-subtitle\">Accessing Remote Interface via a Proxy</span></h2>\n<p>It\u2019s possible to map a remote interface to a local instantiated class using a Proxy.</p>\n<p>NOTE: If the even loop isn\u2019t running no signals will caught, and properties will not\ncache (i.e. will read on every access instead of tracking the property changes signals)</p>\n<p><strong>This is a protoype to see how it looks, it hasn\u2019t been implemented yet.</strong></p>\n<pre><span class=\"n\">service</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">Service</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"o\">=</span><span class=\"s1\">'session'</span><span class=\"p\">)</span>\n<span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">adbus</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Proxy</span><span class=\"p\">(</span><span class=\"n\">service</span><span class=\"p\">,</span> <span class=\"s1\">'com.example.xxx'</span><span class=\"p\">,</span> <span class=\"s1\">'/com/example/Service1'</span><span class=\"p\">,</span>\n    <span class=\"n\">interface</span><span class=\"o\">=</span><span class=\"s1\">'com.example.service.unit'</span><span class=\"p\">)</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">proxy_examples</span><span class=\"p\">():</span>\n  <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span> <span class=\"c1\"># initialize the proxy</span>\n\n  <span class=\"c1\"># == Access Properties</span>\n  <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_propertyX</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_propertyY</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n\n  <span class=\"c1\"># == or</span>\n  <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_propertyX</span><span class=\"p\">(</span><span class=\"mi\">45</span><span class=\"p\">)</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_propertyY</span><span class=\"p\">())</span>\n\n  <span class=\"c1\"># == Access Methods</span>\n  <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ensure_future</span><span class=\"p\">(</span><span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_method_foo</span><span class=\"p\">(</span><span class=\"s2\">\"some info\"</span><span class=\"p\">))</span> <span class=\"c1\"># don't wait for result</span>\n  <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_method_bar</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">45</span><span class=\"p\">)</span> <span class=\"c1\"># wait for result</span>\n\n  <span class=\"c1\"># == Add a Coroutine to a Signal</span>\n  <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">local_method</span><span class=\"p\">(</span><span class=\"n\">signal_data</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">signal_data</span><span class=\"p\">)</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_signal</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">local_method</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == or</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_signal</span><span class=\"p\">(</span><span class=\"n\">local_method</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == Remove a Coroutine to a Signal</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_signal</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">local_method</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == or (if already added)</span>\n  <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">remote_signal</span><span class=\"p\">(</span><span class=\"n\">local_method</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == Access a method using a different interface name</span>\n  <span class=\"n\">proxy</span><span class=\"p\">[</span><span class=\"s1\">'com.example.service.serve'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">remote_method_800</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"data\"</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == Create a new proxy from a node in the proxy</span>\n  <span class=\"n\">proxy_new</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"p\">(</span><span class=\"s1\">'Test'</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># == Loop through all nodes in a proxy</span>\n  <span class=\"n\">sum_cnt</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n  <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">node</span> <span class=\"ow\">in</span> <span class=\"n\">proxy</span><span class=\"p\">:</span>\n      <span class=\"k\">try</span><span class=\"p\">:</span>\n          <span class=\"n\">sum_cnt</span> <span class=\"o\">+=</span> <span class=\"k\">await</span> <span class=\"n\">node</span><span class=\"o\">.</span><span class=\"n\">count</span>\n      <span class=\"k\">except</span> <span class=\"ne\">AttributeError</span><span class=\"p\">:</span>\n          <span class=\"k\">pass</span>\n\n  <span class=\"c1\"># == set multiple properties in one message (if linked to an adbus based server)</span>\n  <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">proxy</span> <span class=\"k\">as</span> <span class=\"n\">p</span><span class=\"p\">:</span>\n      <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">property1</span> <span class=\"o\">=</span> <span class=\"s2\">\"some data\"</span>\n      <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">property2</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">proxy_examples</span><span class=\"p\">())</span>\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"style-guide\">\n<h2>Style Guide</h2>\n<p>For a consistent style all code is run through yapf using the Facebook style:</p>\n<p>All docstrings are in the google style.</p>\n</div>\n\n          </div>"}, "last_serial": 4845404, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1af4c83ca7f6832136b1a08b0ff22cc5", "sha256": "d1c095662a169224d0b4bfc966d286038056c79b5b222ca6f0e1b55131e77353"}, "downloads": -1, "filename": "adbus-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1af4c83ca7f6832136b1a08b0ff22cc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124132, "upload_time": "2017-07-26T17:48:44", "upload_time_iso_8601": "2017-07-26T17:48:44.535424Z", "url": "https://files.pythonhosted.org/packages/bb/45/92022094b0b6300425daeaedaa10220d64f30a6046a4be942bddd757ca0a/adbus-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8dd067721ca5c63e099c9314ca7f3b39", "sha256": "53ae2cab1db3c1510b50bcdf043e30585f044b1600929ab8cf8adbf6632a9850"}, "downloads": -1, "filename": "adbus-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8dd067721ca5c63e099c9314ca7f3b39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 127889, "upload_time": "2017-07-26T18:15:13", "upload_time_iso_8601": "2017-07-26T18:15:13.655138Z", "url": "https://files.pythonhosted.org/packages/87/8f/202281e956b4b76836bdf04de7b0ff9ef3a0e654b76ee04650f40170f2d1/adbus-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "27e70b848dcf8b16320e33e8e24abb39", "sha256": "dbf182ec564f5ca9d3c51c17e4f2aa743cae45a012b17d05c27e38e7e69f20b0"}, "downloads": -1, "filename": "adbus-0.2.0.tar.gz", "has_sig": false, "md5_digest": "27e70b848dcf8b16320e33e8e24abb39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 154816, "upload_time": "2017-08-02T14:50:58", "upload_time_iso_8601": "2017-08-02T14:50:58.425258Z", "url": "https://files.pythonhosted.org/packages/9b/4a/1dd432e27d2b3ce05d2d20462b22a90c8c80aaa1b50b806fb2e44c4cda44/adbus-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "46f8bf02a66c59b744196f9d8c211f60", "sha256": "5c4c3006968ea5538cdfe9c384a7ebe603f8c8ac6c7f93322a22913e750103ca"}, "downloads": -1, "filename": "adbus-1.0.0.tar.gz", "has_sig": false, "md5_digest": "46f8bf02a66c59b744196f9d8c211f60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 174852, "upload_time": "2019-02-20T12:58:53", "upload_time_iso_8601": "2019-02-20T12:58:53.188863Z", "url": "https://files.pythonhosted.org/packages/ba/c0/5517f997473d21f502682e5225d4a97a4261f6fcb942ea26837658dbb9c8/adbus-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "869d924664a5ef07855af54b96c9bcd3", "sha256": "9f14ee6cb4c6fff52b7d9078d03a08575b6c8b4ee8db06a85be0da8c2691199c"}, "downloads": -1, "filename": "adbus-1.0.1.tar.gz", "has_sig": false, "md5_digest": "869d924664a5ef07855af54b96c9bcd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 177256, "upload_time": "2019-02-20T13:03:13", "upload_time_iso_8601": "2019-02-20T13:03:13.490780Z", "url": "https://files.pythonhosted.org/packages/6b/3b/c989d23042502f280e09d6441e49deb12d506b17095108b6f3e362677a03/adbus-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "869d924664a5ef07855af54b96c9bcd3", "sha256": "9f14ee6cb4c6fff52b7d9078d03a08575b6c8b4ee8db06a85be0da8c2691199c"}, "downloads": -1, "filename": "adbus-1.0.1.tar.gz", "has_sig": false, "md5_digest": "869d924664a5ef07855af54b96c9bcd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 177256, "upload_time": "2019-02-20T13:03:13", "upload_time_iso_8601": "2019-02-20T13:03:13.490780Z", "url": "https://files.pythonhosted.org/packages/6b/3b/c989d23042502f280e09d6441e49deb12d506b17095108b6f3e362677a03/adbus-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:34 2020"}