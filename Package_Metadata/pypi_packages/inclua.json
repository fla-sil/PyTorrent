{"info": {"author": "gilzoide", "author_email": "gilzoide@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "Inclua\n======\nWrapper generator for scripting languages, INitially for binding C to LUA.\nImplemented as a Python library for portability, dinamicity and flexibility, as\nnew language binders can be easily added. Using libclang so that that we don't\nneed to worry about C/C++ parsing/preprocessing.\n\n\nUsing directly from python\n--------------------------\nImport, setup, generate!\n\n.. code:: python\n\n    # File wrapper_generator.py\n    from inclua import *\n    import inclua.lua # register Lua generator\n\n    my_module = Generator ('module_name')\n    my_module.add_header ('module.h') # at least one. It can be a '.c' file as well\n    # anotate your arrays, output arguments, ignore symbols, rename stuff...\n    my_module.generate ('lua')\n\nOn your shell::\n\n    $ python wrapper_generator.py\n\n\nUsing the standalone\n--------------------\nDefine, generate!\n\n.. code:: yaml\n\n    # File wrapper_generator.yml\n    module : module_name\n    headers :\n      - module.h\n\n    --- # optional YAML document separation, to avoid name clashes with predefined fields\n    # anotate your arrays, output arguments, ignore symbols, rename stuff...\n\nOn your shell::\n\n    $ inclua -o wrapper.cpp -l lua wrapper_generator.yml\n\n\nTutorial\n--------\nTutorials on creating wrappers, either using the python lib or the standalone\nYAML version, and for creating **Generators** yourself, are available in the\ntutorial_.\n\n.. _tutorial: https://github.com/gilzoide/inclua/blob/master/tutorial/index.rst", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gilzoide/inclua", "keywords": "language bindings development", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "inclua", "package_url": "https://pypi.org/project/inclua/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/inclua/", "project_urls": {"Homepage": "https://github.com/gilzoide/inclua"}, "release_url": "https://pypi.org/project/inclua/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "C/C++ to scripting languages wrapper generator, INitialy for binding C to LUA", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Wrapper generator for scripting languages, INitially for binding C to LUA.\nImplemented as a Python library for portability, dinamicity and flexibility, as\nnew language binders can be easily added. Using libclang so that that we don\u2019t\nneed to worry about C/C++ parsing/preprocessing.</p>\n<div id=\"using-directly-from-python\">\n<h2>Using directly from python</h2>\n<p>Import, setup, generate!</p>\n<pre><span class=\"c1\"># File wrapper_generator.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">inclua</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">import</span> <span class=\"nn\">inclua.lua</span> <span class=\"c1\"># register Lua generator</span>\n\n<span class=\"n\">my_module</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span> <span class=\"p\">(</span><span class=\"s1\">'module_name'</span><span class=\"p\">)</span>\n<span class=\"n\">my_module</span><span class=\"o\">.</span><span class=\"n\">add_header</span> <span class=\"p\">(</span><span class=\"s1\">'module.h'</span><span class=\"p\">)</span> <span class=\"c1\"># at least one. It can be a '.c' file as well</span>\n<span class=\"c1\"># anotate your arrays, output arguments, ignore symbols, rename stuff...</span>\n<span class=\"n\">my_module</span><span class=\"o\">.</span><span class=\"n\">generate</span> <span class=\"p\">(</span><span class=\"s1\">'lua'</span><span class=\"p\">)</span>\n</pre>\n<p>On your shell:</p>\n<pre>$ python wrapper_generator.py\n</pre>\n</div>\n<div id=\"using-the-standalone\">\n<h2>Using the standalone</h2>\n<p>Define, generate!</p>\n<pre><span class=\"c1\"># File wrapper_generator.yml</span>\n<span class=\"nt\">module </span><span class=\"p\">:</span> <span class=\"l-Scalar-Plain\">module_name</span>\n<span class=\"nt\">headers </span><span class=\"p\">:</span>\n  <span class=\"p-Indicator\">-</span> <span class=\"l-Scalar-Plain\">module.h</span>\n\n<span class=\"nn\">---</span> <span class=\"c1\"># optional YAML document separation, to avoid name clashes with predefined fields</span>\n<span class=\"c1\"># anotate your arrays, output arguments, ignore symbols, rename stuff...</span>\n</pre>\n<p>On your shell:</p>\n<pre>$ inclua -o wrapper.cpp -l lua wrapper_generator.yml\n</pre>\n</div>\n<div id=\"tutorial\">\n<h2>Tutorial</h2>\n<p>Tutorials on creating wrappers, either using the python lib or the standalone\nYAML version, and for creating <strong>Generators</strong> yourself, are available in the\n<a href=\"https://github.com/gilzoide/inclua/blob/master/tutorial/index.rst\" rel=\"nofollow\">tutorial</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2574214, "releases": {"0.0.3": [], "0.1.0": [], "0.1.3": []}, "urls": [], "timestamp": "Fri May  8 00:56:25 2020"}