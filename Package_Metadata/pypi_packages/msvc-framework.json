{"info": {"author": "Bekhzod Tillakhanov", "author_email": "bekhzod.tillakhanov@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Django for microservice\n\n\nsettings.py\n\n``` \nINSTALL_APP = [\n    ...,\n    'msvc_framework',\n]\n\nMSVC_FRAMEWORK = {\n    'ENGINE': 'msvc_framework.broker.kafka.KafkaBroker',\n    'HOST': 'localhost',\n    'TOPIC': 'topic'\n}\n```\n\n### Service 1\nregister tasks in apps/{appname}/tasks.py\n```\nfrom msvc_framework import tasks\nfrom msvc_framework import SUCCESS\n\n@tasks('user.user.get')\ndef get_users(data):\n    print(data)\n    return {\n        'status': SUCCESS,\n        'data': [....]\n    }\n```\n\n\nrun command\n```\npython manange.py subscribe\n```\n\n\n### Service 2\n\nsync call tasks\n```\nfrom msvc_framework import call\n\ncall('user.user.get', {'ids': [1]})\n```\n\n\nuse in model\n```\nfrom msvc_framework import call\n\nclass Profile(models.Model):\n    user = RemoteRelatedField('user.user.get')\n\n    def __str__(self):\n        return self.name\n\n\nprofile = Profile.objects.get(user=1)\nprint(profile.user.get())\nprint(profile.user.value)\n```\n\nuse in Serializer\n\n```\nfrom msvc_framework import ModelSerializer\n\nclass ProfileSerializer(ModelSerializer):\n    class Meta:\n        model = Merchant\n        fields = ('id', 'user', )\n\n```\n\n## Contributing\nPull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.\n\nPlease make sure to update tests as appropriate.\n\n## How to deploy\nCreate config file in home directory `~/.pypirc`\n```\n[distutils] \nindex-servers=pypi\n[pypi] \nrepository = https://upload.pypi.org/legacy/ \nusername = myrubapa\n```\nAfter run command for build and deploy\n```shell\npython3 setup.py sdist bdist_wheel\npython3 -m twine upload dist/*\n```\n\nfor more detail read [packaging-projects](https://packaging.python.org/tutorials/packaging-projects/)\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/myrubapa/msvc_framework", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "msvc-framework", "package_url": "https://pypi.org/project/msvc-framework/", "platform": "", "project_url": "https://pypi.org/project/msvc-framework/", "project_urls": {"Homepage": "https://github.com/myrubapa/msvc_framework"}, "release_url": "https://pypi.org/project/msvc-framework/0.0.1/", "requires_dist": ["Django", "djangorestframework"], "requires_python": ">=3.5", "summary": "Microservice for django", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django for microservice</h1>\n<p>settings.py</p>\n<pre><code>INSTALL_APP = [\n    ...,\n    'msvc_framework',\n]\n\nMSVC_FRAMEWORK = {\n    'ENGINE': 'msvc_framework.broker.kafka.KafkaBroker',\n    'HOST': 'localhost',\n    'TOPIC': 'topic'\n}\n</code></pre>\n<h3>Service 1</h3>\n<p>register tasks in apps/{appname}/tasks.py</p>\n<pre><code>from msvc_framework import tasks\nfrom msvc_framework import SUCCESS\n\n@tasks('user.user.get')\ndef get_users(data):\n    print(data)\n    return {\n        'status': SUCCESS,\n        'data': [....]\n    }\n</code></pre>\n<p>run command</p>\n<pre><code>python manange.py subscribe\n</code></pre>\n<h3>Service 2</h3>\n<p>sync call tasks</p>\n<pre><code>from msvc_framework import call\n\ncall('user.user.get', {'ids': [1]})\n</code></pre>\n<p>use in model</p>\n<pre><code>from msvc_framework import call\n\nclass Profile(models.Model):\n    user = RemoteRelatedField('user.user.get')\n\n    def __str__(self):\n        return self.name\n\n\nprofile = Profile.objects.get(user=1)\nprint(profile.user.get())\nprint(profile.user.value)\n</code></pre>\n<p>use in Serializer</p>\n<pre><code>from msvc_framework import ModelSerializer\n\nclass ProfileSerializer(ModelSerializer):\n    class Meta:\n        model = Merchant\n        fields = ('id', 'user', )\n\n</code></pre>\n<h2>Contributing</h2>\n<p>Pull requests are welcome. For major changes, please open an issue first to discuss what you would like to change.</p>\n<p>Please make sure to update tests as appropriate.</p>\n<h2>How to deploy</h2>\n<p>Create config file in home directory <code>~/.pypirc</code></p>\n<pre><code>[distutils] \nindex-servers=pypi\n[pypi] \nrepository = https://upload.pypi.org/legacy/ \nusername = myrubapa\n</code></pre>\n<p>After run command for build and deploy</p>\n<pre>python3 setup.py sdist bdist_wheel\npython3 -m twine upload dist/*\n</pre>\n<p>for more detail read <a href=\"https://packaging.python.org/tutorials/packaging-projects/\" rel=\"nofollow\">packaging-projects</a></p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6498660, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "9296a66219ecc876abe8ada1ed0c3103", "sha256": "817d71e006bc7899db9962a8cdda868ea89e0ab06f68abce20160b0467d4ebe3"}, "downloads": -1, "filename": "msvc_framework-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9296a66219ecc876abe8ada1ed0c3103", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8260, "upload_time": "2020-01-22T06:34:01", "upload_time_iso_8601": "2020-01-22T06:34:01.035136Z", "url": "https://files.pythonhosted.org/packages/ac/69/428c72b98d5636a3865277e577522ff8b18b525b440cf06d367af472d7af/msvc_framework-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be73e876e69ccd398259326842ca132", "sha256": "cd2300d30a446b6ecaecd9ce81873a459c102114a34c9cc1653acf4af863e48a"}, "downloads": -1, "filename": "msvc_framework-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2be73e876e69ccd398259326842ca132", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4725, "upload_time": "2020-01-22T06:34:03", "upload_time_iso_8601": "2020-01-22T06:34:03.236364Z", "url": "https://files.pythonhosted.org/packages/b2/59/51de8dd8754610590a4b370dc03d0feb644f21bd707866664875790a9d0b/msvc_framework-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9296a66219ecc876abe8ada1ed0c3103", "sha256": "817d71e006bc7899db9962a8cdda868ea89e0ab06f68abce20160b0467d4ebe3"}, "downloads": -1, "filename": "msvc_framework-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9296a66219ecc876abe8ada1ed0c3103", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8260, "upload_time": "2020-01-22T06:34:01", "upload_time_iso_8601": "2020-01-22T06:34:01.035136Z", "url": "https://files.pythonhosted.org/packages/ac/69/428c72b98d5636a3865277e577522ff8b18b525b440cf06d367af472d7af/msvc_framework-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2be73e876e69ccd398259326842ca132", "sha256": "cd2300d30a446b6ecaecd9ce81873a459c102114a34c9cc1653acf4af863e48a"}, "downloads": -1, "filename": "msvc_framework-0.0.1.tar.gz", "has_sig": false, "md5_digest": "2be73e876e69ccd398259326842ca132", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4725, "upload_time": "2020-01-22T06:34:03", "upload_time_iso_8601": "2020-01-22T06:34:03.236364Z", "url": "https://files.pythonhosted.org/packages/b2/59/51de8dd8754610590a4b370dc03d0feb644f21bd707866664875790a9d0b/msvc_framework-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:44 2020"}