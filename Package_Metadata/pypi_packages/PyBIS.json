{"info": {"author": "Swen Vermeul \u2022 ID SIS \u2022 ETH Z\u00fcrich", "author_email": "swen@ethz.ch", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Welcome to pyBIS!\n\npyBIS is a Python module for interacting with openBIS. pyBIS is designed to be most useful in a [Jupyter Notebook](https://jupyter.org) or IPython environment, especially if you are developing Python scripts for automatisation. Jupyter Notebooks offer some sort of IDE for openBIS, supporting TAB completition and immediate data checks, making the life of a researcher hopefully easier.\n\n## Dependencies and Requirements\n- pyBIS relies the openBIS API v3\n- openBIS version 16.05.2 or newer is required\n- 18.06.2 or later is recommended\n- pyBIS uses Python 3.5 or newer and the Pandas module\n\n## Installation\n\n```\npip install --upgrade pybis\n```\nThat command will download install pyBIS and all its dependencies. If pyBIS is already installed, it will be upgraded to the latest version.\n\nIf you haven't done yet, install Jupyter and/or Jupyter Lab (the next Generation of Jupyter):\n```\npip install jupyter\npip install jupyterlab\n```\n\n# General Usage\n\n### TAB completition and other hints in Jupyter / IPython\n\n* in a Jupyter Notebook  or IPython environment, pybis helps you to enter the commands\n* After every dot `.` you might hit the `TAB` key in order to look at the available commands.\n* if you are unsure what parameters to add to a , add a question mark right after the method and hit `SHIFT+ENTER`\n* Jupyter will then look up the signature of the method and show some helpful docstring\n\n\n### Checking input\n\n* When working with properties of entities, they might use a **controlled vocabulary** or are of a specific **property type**. \n* Add an underscore `_` character right after the property and hit `SHIFT+ENTER` to show the valid values\n* When a property only acceps a controlled vocabulary, you will be shown the valid terms in a nicely formatted table\n* if you try to assign an **invalid value** to a property, you'll receive an error immediately\n\n### Glossary\n\n* **spaces:** used for authorisation eg. to separate two working groups. If you have permissions in a space, you can see everything which in that space, but not necessarily in another space (unless you have the permission).\n* **projects:** a space consists of many projects.\n* **experiments / collections:** a projects contain many experiments. Experiments can have *properties*\n* **samples / objects:** an experiment contains many samples. Samples can have *properties*\n* **dataSet:** a dataSet which contains the actual *data files*, either pyhiscal (stored in openBIS dataStore) or linked\n* **attributes:** every entity above contains a number of attributes. They are the same accross all instances of openBIS and independent of their type.\n* **properties:** Additional specific key-value pairs, available for these entities:\n   * experiments\n   * samples\n   * dataSets\n\n  every single instance of an entity must be of a specific **entity type** (see below). The type defines the set of properties.\n* **experiment type / collection type:** a type for experiments which specifies its properties\n* **sample type / object type:** a type for samples / objects which specifies its properties\n* **dataSet type:** a type for dataSets which specifies its properties\n* **property type:** a single property, as defined in the entity types above. It can be of a classic data type (e.g. INTEGER, VARCHAR, BOOLEAN) or its values can be controlled (CONTROLLEDVOCABULARY). \n* **plugin:** a script written in [Jython](https://www.jython.org) which allows to check property values in a even more detailed fashion \n\n# connect to OpenBIS\n\n## login\n\nIn an **interactive session** e.g. inside a Jupyter notebook, you can use `getpass` to enter your password safely:\n\n```\nfrom pybis import Openbis\no = Openbis('https://example.com', verify_certificates=False)\n\nimport getpass\npassword = getpass.getpass()\n\no.login('username', password, save_token=True)   # save the session token in ~/.pybis/example.com.token\n```\n\nIn a **script** you would rather use two **environment variables** to provide username and password:\n\n```\nfrom pybis import Openbis\no = Openbis(os.environ['OPENBIS_HOST'], verify_certificates=False)\n\no.login(os.environ['OPENBIS_USERNAME'], os.environ['OPENBIS_PASSWORD'])\n```\n\n\nCheck whether the **session token** is still valid and log out:\n\n```\no.token\no.is_session_active()\no.logout()\n```\n\n## Mount openBIS dataStore server\n\n### Prerequisites: FUSE / SSHFS\n\nMounting an openBIS dataStore server requires FUSE / SSHFS to be installed (requires root privileges). The mounting itself requires no root privileges.\n\n**Mac OS X**\n\nFollow the installation instructions on\nhttps://osxfuse.github.io\n\n**Unix Cent OS 7**\n\n```\n$ sudo yum install epel-release\n$ sudo yum --enablerepo=epel -y install fuse-sshfs\n$ user=\"$(whoami)\"\n$ usermod -a -G fuse \"$user\"\n```\nAfter the installation, an `sshfs` command should be available.\n\n### Mount dataStore server with pyBIS\n\nBecause the mount/unmount procedure differs from platform to platform, pyBIS offers two simple methods:\n\n```\no.mount()\no.mount(username, password, hostname, mountpoint, volname)\no.is_mounted()\no.unmount()\no.get_mountpoint()\n```\nCurrently, mounting is supported for Linux and Mac OS X only.\n\nAll attributes, if not provided, are re-used by a previous login() command. If no mountpoint is provided, the default mounpoint will be `~/hostname`. If this directory does not exist, it will be created. The directory must be empty before mounting.\n\n\n# Masterdata\nOpenBIS stores quite a lot of meta-data along with your dataSets. The collection of data that describes this meta-data (i.e. meta-meta-data) is called masterdata. It consists of:\n\n* sample types\n* dataSet types\n* material types\n* experiment types\n* property types\n* vocabularies\n* vocabulary terms\n* plugins (jython scripts that allow complex data checks)\n* tags\n* semantic annotations\n\n## browse masterdata\n\n```\nsample_types = o.get_sample_types()  # get a list of sample types \nsample_types.df                      # DataFrame object\nst = o.get_sample_types()[3]         # get 4th element of that list\nst = o.get_sample_type('YEAST')\nst.code\nst.generatedCodePrefix\nst.attrs.all()                       # get all attributes as a dict\nst.get_validationPlugin()            # returns a plugin object\n\nst.get_property_assignments()        # show the list of properties\n                                     # for that sample type\no.get_material_types()\no.get_dataset_types()\no.get_experiment_types()\no.get_collection_types()\n\no.get_property_types()\npt = o.get_property_type('BARCODE_COMPLEXITY_CHECKER')\npt.attrs.all()\n\no.get_plugins()\npl = o.get_plugin('Diff_time')\npl.script  # the Jython script that processes this property\n\no.get_vocabularies()\no.get_vocabulary('BACTERIAL_ANTIBIOTIC_RESISTANCE')\no.get_terms(vocabulary='STORAGE')\no.get_tags()\n```\n\n## create property types\n\nSamples (objects), experiments (collections) and dataSets contain general **attributes** as well as type-specific **properties**. Before they can be assigned to their respective type, they need to be created first.\n\n```\npt = o.new_property_type(\n    code        = 'MY_NEW_PROPERTY_TYPE', \n    label       = 'yet another property type', \n    description = 'my first property',\n    dataType    = 'VARCHAR',\n)\n\npt_int = o.new_property_type(\n    code        = '$DEFAULT_OBJECT_TYPE', \n    label       = 'default object type for ELN-LIMS', \n    dataType    = 'VARCHAR',\n    internalNameSpace = True,\n)\n\npt_voc = o.new_property_type(\n    code        = 'MY_CONTROLLED_VOCABULARY', \n    label       = 'label me', \n    description = 'give me a description',\n    dataType    = 'CONTROLLEDVOCABULARY',\n    vocabulary  = 'STORAGE',\n)\n```\n\nThe `dataType` attribute can contain any of these values:\n\n* `INTEGER`\n* `VARCHAR`\n* `MULTILINE_VARCHAR`\n* `REAL`\n* `TIMESTAMP`\n* `BOOLEAN`\n* `HYPERLINK`\n* `XML`\n* `CONTROLLEDVOCABULARY`\n* `MATERIAL`\n\nWhen choosing `CONTROLLEDVOCABULARY`, you must specify a `vocabulary` attribute (see example). Likewise, when choosing `MATERIAL`, a `materialType` attribute must be provided. PropertyTypes that start with a $ belong by definition to the `internalNameSpace` and therefore this attribute must be set to True.\n\n\n## create sample types / object types\n\nThe new name for `sample_type` is `object_type`. You can use boths names interchangeably.\n\n```\nsample_type = o.new_sample_type(\n    code                = 'my_own_sample_type',  # mandatory\n    generatedCodePrefix = 'S',                   # mandatory\n    description         = '',\n    autoGeneratedCode   = True,\n    subcodeUnique       = False,\n    listable            = True,\n    showContainer       = False,\n    showParents         = True,\n    showParentMetadata  = False,\n    validationPlugin    = 'Has_Parents'          # see plugins below\n)\nsample_type.save()\n```\n\n## assign properties to sample type / object type\n\nA sample type needs to be saved before properties can be assigned to. This assignment procedure applies to all entity types (dataset type, experiment type, material type).\n\n```\nsample_type.assign_property(\n\tprop                 = 'diff_time',           # mandatory\n\tsection              = '',\n\tordinal              = 5,\n\tmandatory            = True,\n\tinitialValueForExistingEntities = 'initial value'\n\tshowInEditView       = True,\n\tshowRawValueInForms  = True\n)\nsample_type.revoke_property('diff_time')\nsample_type.get_property_assignments()\n```\n\n## create dataset types\n\n```\ndataset_type = o.new_dataset_type(\n    code                = 'my_dataset_type',       # mandatory\n    description         = None,\n    mainDataSetPattern  = None,\n    mainDataSetPath     = None,\n    disallowDeletion    = False,\n    validationPlugin    = None,\n)\ndataset_type.save()\ndataset_type.assign_property('property_name')\ndataset_type.revoke_property('property_name')\ndataset_type.get_property_assignments()\n```\n\n## create experiment types / collection types\n\nThe new name for `experiment_type` is `collection_type`. You can use boths names interchangeably.\n\n```\nexperiment_type = o.new_experiment_type(\n    code, \n    description      = None,\n    validationPlugin = None,\n)\nexperiment_type.save()\nexperiment_type.assign_property('property_name')\nexperiment_type.revoke_property('property_name')\nexperiment_type.get_property_assignments()\n```\n\n## create material types\n\n```\nmaterial_type = o.new_material_type(\n    code, \n    description=None,\n    validationPlugin=None,\n)\nmaterial_type.save()\nmaterial_type.assign_property('property_name')\nmaterial_type.revoke_property('property_name')\nmaterial_type.get_property_assignments()\n\n```\n\n## create plugins\n\nPlugins are Jython scripts that can accomplish more complex data-checks than ordinary types and vocabularies can achieve. They are assigned to entity types (dataset type, sample type etc). [Documentation and examples can be found here](https://wiki-bsse.ethz.ch/display/openBISDoc/Properties+Handled+By+Scripts)\n\n```\npl = o.new_plugin(\n    name       ='my_new_entry_validation_plugin',\n    pluginType ='ENTITY_VALIDATION',       # or 'DYNAMIC_PROPERTY' or 'MANAGED_PROPERTY',\n    entityKind = None,                     # or 'SAMPLE', 'MATERIAL', 'EXPERIMENT', 'DATA_SET'\n    script     = 'def calculate(): pass'   # a JYTHON script\n)\npl.save()\n```\n\n## Users, Groups and RoleAssignments\n\n```\no.get_groups()\ngroup = o.new_group(code='group_name', description='...')\ngroup = o.get_group('group_name')\ngroup.save()\ngroup.assign_role(role='ADMIN', space='DEFAULT')\ngroup.get_roles() \ngroup.revoke_role(role='ADMIN', space='DEFAULT')\n\ngroup.add_members(['admin'])\ngroup.get_members()\ngroup.del_members(['admin'])\ngroup.delete()\n\no.get_persons()\nperson = o.new_person(userId='username')\nperson.space = 'USER_SPACE'\nperson.save()\n\nperson.assign_role(role='ADMIN', space='MY_SPACE')\nperson.assign_role(role='OBSERVER')\nperson.get_roles()\nperson.revoke_role(role='ADMIN', space='MY_SPACE')\nperson.revoke_role(role='OBSERVER')\n\no.get_role_assignments()\no.get_role_assignments(space='MY_SPACE')\no.get_role_assignments(group='MY_GROUP')\nra = o.get_role_assignment(techId)\nra.delete()\n```\n\n## Spaces\n\n```\nspace = o.new_space(code='space_name', description='')\nspace.save()\nspace.delete('reason for deletion')\no.get_spaces(\n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n)\nspace = o.get_space('MY_SPACE')\nspace.code\nspace.description\nspace.registrator\nspace.registrationDate\nspace.modifier\nspace.modificationDate\nspace.attrs.all()                     # returns a dict containing all attributes\n```\n\n## Projects\n```\nproject = o.new_project(\n    space       = space, \n    code        = 'project_name',\n    description = 'some project description'\n)\nproject = space.new_project(\n\tcode         = 'project_code',\n\tdescription  = 'project description'\n)\nproject.save()\n\no.get_projects(\n    space       = 'MY_SPACE',         # show only projects in MY_SPACE\n    start_with  = 0,                  # start_with and count\n    count       = 10,                 # enable paging\n)\no.get_projects(space='MY_SPACE')\nspace.get_projects()\n\nproject.get_experiments()\nproject.get_attachments()\np.add_attachment(fileName='testfile', description= 'another file', title= 'one more attachment')\nproject.download_attachments()\n\nproject.code\nproject.description\n# ... any other attribute\nproject.attrs.all()                   # returns a dict containing all attributes\n\nproject.freeze = True\nproject.freezeForExperiments = True\nproject.freezeForSamples = True\n\n```\n\n## Samples / Objects\n\nThe new name for `sample` is `object`. You can use boths names interchangeably:\n\n* `get_sample()`  = `get_object()`\n* `new_sample()`  = `new_object()`\n* `get_samples()` = `get_objects()`\n\netc.\n\n```\nsample = o.new_sample(\n    type       = 'YEAST', \n    space      = 'MY_SPACE',\n    experiment = '/MY_SPACE/MY_PROJECT/EXPERIMENT_1',\n    parents    = [parent_sample, '/MY_SPACE/YEA66'], \n    children   = [child_sample],\n    props      = {\"name\": \"some name\", \"description\": \"something interesting\"}\n)\nsample = space.new_sample( type='YEAST' )\nsample.save()\n\nsample = o.get_sample('/MY_SPACE/MY_SAMPLE_CODE')\nsample = o.get_sample('20170518112808649-52')\n\nsample.space\nsample.code\nsample.permId\nsample.identifier\nsample.type  # once the sample type is defined, you cannot modify it\n\nsample.space\nsample.space = 'MY_OTHER_SPACE'\n\nsample.experiment    # a sample can belong to one experiment only\nsample.experiment = '/MY_SPACE/MY_PROJECT/MY_EXPERIMENT'\n\nsample.project\nsample.project = '/MY_SPACE/MY_PROJECT'  # only works if project samples are\nenabled\n\nsample.tags\nsample.tags = ['guten_tag', 'zahl_tag' ]\n\nsample.attrs.all()                    # returns all attributes as a dict\nsample.props.all()                    # returns all properties as a dict\n\nsample.get_attachments()\nsample.download_attachments()\nsample.add_attachment('testfile.xls')\n```\n\n### parents, children, components and container\n\n```\nsample.get_parents()\nsample.set_parents(['/MY_SPACE/PARENT_SAMPLE_NAME')\nsample.add_parents('/MY_SPACE/PARENT_SAMPLE_NAME')\nsample.del_parents('/MY_SPACE/PARENT_SAMPLE_NAME')\n\nsample.get_children()\nsample.set_children('/MY_SPACE/CHILD_SAMPLE_NAME')\nsample.add_children('/MY_SPACE/CHILD_SAMPLE_NAME')\nsample.del_children('/MY_SPACE/CHILD_SAMPLE_NAME')\n\n# A Sample may belong to another Sample, which acts as a container.\n# As opposed to DataSets, a Sample may only belong to one container.\nsample.container    # returns a sample object\nsample.container = '/MY_SPACE/CONTAINER_SAMPLE_NAME'   # watch out, this will change the identifier of the sample to:\n                                                       # /MY_SPACE/CONTAINER_SAMPLE_NAME:SAMPLE_NAME\nsample.container = ''                                  # this will remove the container. \n\n# A Sample may contain other Samples, in order to act like a container (see above)\n# The Sample-objects inside that Sample are called \u00abcomponents\u00bb or \u00abcontained Samples\u00bb\n# You may also use the xxx_contained() functions, which are just aliases.\nsample.get_components()\nsample.set_components('/MY_SPACE/COMPONENT_NAME')\nsample.add_components('/MY_SPACE/COMPONENT_NAME')\nsample.del_components('/MY_SPACE/COMPONENT_NAME')\n```\n\n### sample tags\n\n```\nsample.get_tags()\nsample.set_tags('tag1')\nsample.add_tags(['tag2','tag3'])\nsample.del_tags('tag1')\n```\n\n\n### useful tricks when dealing with properties, using Jupyter or IPython\n\n```\nsample.p + TAB                        # in IPython or Jupyter: show list of available properties\nsample.p.my_property_ + TAB           # in IPython or Jupyter: show datatype or controlled vocabulary\nsample.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nsample.set_props({ ... })             # set properties by providing a dict\nsample.p                              # same thing as .props\nsample.p.my_property = \"some value\"   # set the value of a property\n                                      # value is checked (type/vocabulary)\nsample.save()                         # update the sample in openBIS\n```\n\n### search for samples / objects\n\nThe result of a search is always list, even when no items are found. The `.df` attribute returns\nthe Pandas dataFrame of the results.\n\n```\nsamples = o.get_samples(\n    space      ='MY_SPACE',\n    type       ='YEAST',\n    tags       =['*'],                # only sample with existing tags\n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n    NAME       = 'some name',         # properties are always uppercase \n                                      # to distinguish them from attributes\n    **{ \"SOME.WEIRD:PROP\": \"value\"}   # property name contains a dot or a\n                                      # colon: cannot be passed as an argument \n    attrs=[                           # show these attributes in the dataFrame\n        'sample.code',\n        'registrator.email',\n        'type.generatedCodePrefix'\n    ],\n    props=['$NAME', 'MATING_TYPE']    # show these properties in the result\n)\n\nsamples.df                            # returns a Pandas DataFrame object\n\nsamples = o.get_samples(props=\"*\")    # retrieve all properties of all samples\n```\n\n### freezing samples\n\n```\nsample.freeze = True\nsample.freezeForComponents = True\nsample.freezeForChildren = True\nsample.freezeForParents = True\nsample.freezeForDataSets = True\n```\n\n## Experiments / Collections\n\nThe new name for `experiment` is `collection`. You can use boths names interchangeably:\n\n* `get_experiment()`  = `get_collection()`\n* `new_experiment()`  = `new_collection()`\n* `get_experiments()` = `get_collections()`\n\n```\nexp = o.new_experiment\n    type='DEFAULT_EXPERIMENT',\n    space='MY_SPACE',\n    project='YEASTS'\n)\nexp.save()\n\no.get_experiments(\n    project='YEASTS',\n    space='MY_SPACE', \n    type='DEFAULT_EXPERIMENT',\n    tags='*', \n    finished_flag=False,\n    props=['name', 'finished_flag']\n)\nproject.get_experiments()\nexp = o.get_experiment('/MY_SPACE/MY_PROJECT/MY_EXPERIMENT')\n\nexp.set_props({ key: value})\nexp.props\nexp.p                              # same thing as .props\nexp.p.finished_flag=True\nexp.p.my_property = \"some value\"   # set the value of a property (value is checked)\nexp.p + TAB                        # in IPython or Jupyter: show list of available properties\nexp.p.my_property_ + TAB           # in IPython or Jupyter: show datatype or controlled vocabulary\nexp.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nexp.attrs.all()                    # returns all attributes as a dict\nexp.props.all()                    # returns all properties as a dict\n\nexp.attrs.tags = ['some', 'tags']\nexp.tags = ['some', 'tags']        # same thing\nexp.save()\n\nexp.code\nexp.description\nexp.registrator\nexp.registrationDate\nexp.modifier\nexp.modificationDate\n\nexp.freeze = True\nexp.freezeForDataSets = True\nexp.freezeForSamples = True\n```\n\n## Datasets\n\n### working with existing dataSets\n```\nsample.get_datasets()\nds = o.get_dataset('20160719143426517-259')\nds.get_parents()\nds.get_children()\nds.sample\nds.experiment\nds.physicalData\nds.status                         # AVAILABLE LOCKED ARCHIVED \n                                  # ARCHIVE_PENDING UNARCHIVE_PENDING\n                                  # BACKUP_PENDING\nds.archive()\nds.unarchive()\n\nds.attrs.all()                    # returns all attributes as a dict\nds.props.all()                    # returns all properties as a dict\n\nds.add_attachment()               # attachments usually contain meta-data\nds.get_attachments()              # about the dataSet, not the data itself.\nds.download_attachments()\n```\n\n### download dataSets\n\n```\no.download_prefix                  # used for download() and symlink() method.\n                                   # Is set to data/hostname by default, but can be changed.\nds.get_files(start_folder=\"/\")     # get file list as Pandas dataFrame\nds.file_list                       # get file list as array\n\nds.download()                      # simply download all files to data/hostnae/permId/\nds.download(\n\tdestination = 'my_data',        # download files to folder my_data/\n\tcreate_default_folders = False, # ignore the /original/DEFAULT folders made by openBIS\n\twait_until_finished = False,    # download in background, continue immediately\n\tworkers = 10                    # 10 downloads parallel (default)\n)\nds.is_physical()                   # TRUE if dataset has been physically downloaded\n```\n\n### link dataSets\n\nInstead of downloading a dataSet, you can create a symbolic link to a dataSet in the openBIS dataStore. To do that, the openBIS dataStore needs to be mounted first (see mount method above). **Note:** Symbolic links and the mount() feature currently do not work with Windows.\n\n```\no.download_prefix                  # used for download() and symlink() method.\n                                   # Is set to data/hostname by default, but can be changed.\nds.symlink()                       # creates a symlink for this dataset: data/hostname/permId\n                                   # tries to mount openBIS instance \n                                   # in case it is not mounted yet\nds.symlink(\n   target_dir = 'data/dataset_1/', # default target_dir is: data/hostname/permId\n   replace_if_symlink_exists=True\n)\nds.is_symlink()\n```\n\n### dataSet attributes and properties\n\n```\nds.set_props({ key: value})\nds.props\nds.p                              # same thing as .props\nds.p.my_property = \"some value\"   # set the value of a property\nds.p + TAB                        # show list of available properties\nds.p.my_property_ + TAB           # show datatype or controlled vocabulary\nds.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nds.attrs.all()                    # returns all attributes as a dict\nds.props.all()                    # returns all properties as a dict\n```\n\n### search for dataSets\n\n* The result of a search is always list, even when no items are found\n* The `.df` attribute returns the Pandas dataFrame of the results\n* properties must be in UPPERCASE to distinguish them from attributes\n\n```\ndataSets = o.get_dataSets(\n    type  ='MY_DATASET_TYPE',\n    NAME  = 'some name',              # properties are always uppercase \n                                      # to distinguish them from attributes\n    **{ \"SOME.WEIRD:PROP\": \"value\"},  # property name contains a dot or a\n                                      # colon: cannot be passed as an argument \n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n    attrs=[                           # show these attributes in the dataFrame\n        'sample.code',\n        'registrator.email',\n        'type.generatedCodePrefix'\n    ],\n    props=['$NAME', 'MATING_TYPE']    # show these properties in the result\n)\n\ndf = dataSets.df                      # returns the Pandas dataFrame object\n\ndataSets = o.get_dataSets(props=\"*\")  # retrieve all properties of all dataSets\n```\n\nIn some cases, you might want to retrieve precisely certain datasets. This can be achieved by\nmethods chaining (but be aware, it might not be very performant): \n\n```\ndatasets = o.get_experiments(project='YEASTS')\\\n\t\t\t .get_samples(type='FLY')\\\n\t\t\t .get_datasets(\n\t\t\t\t\ttype='ANALYZED_DATA',\n\t\t\t\t\tprops=['MY_PROPERTY'],\n\t\t\t\t\tMY_PROPERTY='some analyzed data'\n\t\t \t )\n```\n* another example:\n```\ndatasets = o.get_experiment('/MY_NEW_SPACE/MY_PROJECT/MY_EXPERIMENT4')\\\n           .get_samples(type='UNKNOWN')\\\n           .get_parents()\\\n           .get_datasets(type='RAW_DATA')\n```\n\n### freeze dataSets\n* once a dataSet has been frozen, it cannot be changed by anyone anymore\n* so be careful!\n\n```\nds.freeze = True\nds.freezeForChildren = True\nds.freezeForParents = True\nds.freezeForComponents = True\nds.freezeForContainers = True\nds.save()\n```\n\n### create a new dataSet\n\n```\nds_new = o.new_dataset(\n    type       = 'ANALYZED_DATA', \n    experiment = '/SPACE/PROJECT/EXP1', \n    sample     = '/SPACE/SAMP1',\n    files      = ['my_analyzed_data.dat'], \n    props      = {'name': 'some good name', 'description': '...' }\n)\nds_new.save()\n```\n\n### create dataSet with zipfile\n\nDataSet containing one zipfile which will be unzipped in openBIS:\n\n```python\nds_new = o.new_dataset(\n    type       = 'RAW_DATA', \n    sample     = '/SPACE/SAMP1',\n    zipfile    = 'my_zipped_folder.zip', \n)\nds_new.save()\n```\n\n### create dataSet with mixed content\n\n* mixed content means: folders and files are provided\n* a relative specified folder (and all its content) will end up in the root, while keeping its structure\n   * `../measurements/` --> `/measurements/`\n   * `some/folder/somewhere/` --> `/somewhere/` \n* relative files will also end up in the root\n   * `my_file.txt` --> `/my_file.txt`\n   * `../somwhere/else/my_other_file.txt` --> `/my_other_file.txt`\n   * `some/folder/file.txt` --> `/file.txt`\n* useful if DataSet contains files and folders\n* the content of the folder will be zipped (on-the-fly) and uploaded to openBIS\n* openBIS will keep the folder structure intact\n* relative path will be shortened to its basename. For example:\n\n| local                      | openBIS    |\n|----------------------------|------------|\n| `../../myData/`            | `myData/`  |\n| `some/experiment/results/` | `results/` |\n\n```\nds_new = o.new_dataset(\n    type       = 'RAW_DATA', \n    sample     = '/SPACE/SAMP1',\n    files     = ['../measurements/', 'my_analyis.ipynb', 'results/'] \n)\nds_new.save()\n```\n\n### create dataSet container\n\nA DataSet of kind=CONTAINER contains other DataSets, but no files:\n\n```\nds_new = o.new_dataset(\n    type       = 'ANALYZED_DATA', \n    experiment = '/SPACE/PROJECT/EXP1', \n    sample     = '/SPACE/SAMP1',\n    kind       = 'CONTAINER',\n    props      = {'name': 'some good name', 'description': '...' }\n)\nds_new.save()\n```\n\n### get, set, add and remove parent datasets\n\n```\ndataset.get_parents()\ndataset.set_parents(['20170115220259155-412'])\ndataset.add_parents(['20170115220259155-412'])\ndataset.del_parents(['20170115220259155-412'])\n```\n\n#### get, set, add and remove child datasets\n\n```\ndataset.get_children()\ndataset.set_children(['20170115220259155-412'])\ndataset.add_children(['20170115220259155-412'])\ndataset.del_children(['20170115220259155-412'])\n```\n\n### dataSet containers\n\n* A DataSet may belong to other DataSets, which must be of kind=CONTAINER\n* As opposed to Samples, DataSets may belong (contained) to more than one DataSet-container\n\n```\ndataset.get_containers()\ndataset.set_containers(['20170115220259155-412'])\ndataset.add_containers(['20170115220259155-412'])\ndataset.del_containers(['20170115220259155-412'])\n```\n\n* a DataSet of kind=CONTAINER may contain other DataSets, to act like a folder (see above)\n* the DataSet-objects inside that DataSet are called components or contained DataSets\n* you may also use the xxx_contained() functions, which are just aliases.\n\n```\ndataset.get_components()\ndataset.set_components(['20170115220259155-412'])\ndataset.add_components(['20170115220259155-412'])\ndataset.del_components(['20170115220259155-412'])\n```\n\n## Semantic Annotations\n\ncreate semantic annotation for sample type 'UNKNOWN':\n\n```\n\nsa = o.new_semantic_annotation(\n\tentityType = 'UNKNOWN',\n\tpredicateOntologyId = 'po_id',\n\tpredicateOntologyVersion = 'po_version',\n\tpredicateAccessionId = 'pa_id',\n\tdescriptorOntologyId = 'do_id',\n\tdescriptorOntologyVersion = 'do_version',\n\tdescriptorAccessionId = 'da_id'\n)\nsa.save()\n```\n\nCreate semantic annotation for property type (predicate and descriptor values omitted for brevity)\n\n```\nsa = o.new_semantic_annotation(propertyType = 'DESCRIPTION', ...)\nsa.save()\n```\n\n**Create** semantic annotation for sample property assignment (predicate and descriptor values omitted for brevity)\n\n```\nsa = o.new_semantic_annotation(\n\tentityType = 'UNKNOWN',\n\tpropertyType = 'DESCRIPTION', \n\t...\n)\nsa.save()\n```\n\n**Create** a semantic annotation directly from a sample type. Will also create sample property assignment annotations when propertyType is given:\n\n```\nst = o.get_sample_type(\"ORDER\")\nst.new_semantic_annotation(...)\n```\n\n**Get all** semantic annotations\n\n```\no.get_semantic_annotations()\n```\n\n**Get** semantic annotation by perm id\n\n```\nsa = o.get_semantic_annotation(\"20171015135637955-30\")\n```\n\n**Update** semantic annotation\n\n```\nsa.predicateOntologyId = 'new_po_id'\nsa.descriptorOntologyId = 'new_do_id'\nsa.save()\n```\n\n**Delete** semantic annotation\n\n```\nsa.delete('reason')\n```\n\n## Tags\n```\nnew_tag = o.new_tag(\n\tcode        = 'my_tag', \n\tdescription = 'some descriptive text'\n)\nnew_tag.description = 'some new description'\nnew_tag.save()\no.get_tags()\no.get_tag('/username/TAG_Name')\no.get_tag('TAG_Name')\n\ntag.get_experiments()\ntag.get_samples()\ntag.get_owner()   # returns a person object\ntag.delete('why?')\n```\n\n## Vocabulary and VocabularyTerms\n\nAn entity such as Sample (Object), Experiment (Collection), Material or DataSet can be of a specific *entity type*:\n\n* Sample Type (Object Type)\n* Experiment Type (Collection Type)\n* DataSet Type\n* Material Type\n\nEvery type defines which **Properties** may be defined. Properties act like **Attributes**, but they are type-specific. Properties can contain all sorts of information, such as free text, XML, Hyperlink, Boolean and also **Controlled Vocabulary**. Such a Controlled Vocabulary consists of many **VocabularyTerms**. These terms are used to only allow certain values entered in a Property field.\n\nSo for example, you want to add a property called **Animal** to a Sample and you want to control which terms are entered in this Property field. For this you need to do a couple of steps:\n\n1. create a new vocabulary *AnimalVocabulary*\n2. add terms to that vocabulary: *Cat, Dog, Mouse*\n3. create a new PropertyType (e.g. *Animal*) of DataType *CONTROLLEDVOCABULARY* and assign the *AnimalVocabulary* to it\n4. create a new SampleType (e.g. *Pet*) and *assign* the created PropertyType to that Sample type.\n5. If you now create a new Sample of type *Pet* you will be able to add a property *Animal* to it which only accepts the terms *Cat, Dog* or *Mouse*.\n\n\n**create new Vocabulary with three VocabularyTerms**\n\n```\nvoc = o.new_vocabulary(\n    code = 'BBB',\n    description = 'description of vocabulary aaa',\n    urlTemplate = 'https://ethz.ch',\n    terms = [\n        { \"code\": 'term_code1', \"label\": \"term_label1\", \"description\": \"term_description1\"},\n        { \"code\": 'term_code2', \"label\": \"term_label2\", \"description\": \"term_description2\"},\n        { \"code\": 'term_code3', \"label\": \"term_label3\", \"description\": \"term_description3\"}\n    ]   \n)\nvoc.save()\n```\n\n**create additional VocabularyTerms**\n\n```\nterm = o.new_term(\n\tcode='TERM_CODE_XXX', \n\tvocabularyCode='BBB', \n\tlabel='here comes a label',\n\tdescription='here might appear a meaningful description'\n)\nterm.save()\n```\n\n**update VocabularyTerms**\n\nTo change the ordinal of a term, it has to be moved either to the top with the `.move_to_top()` method or after another term using the `.move_after_term('TERM_BEFORE')` method.\n\n```\nvoc = o.get_vocabulary('STORAGE')\nterm = voc.get_terms()['RT']\nterm.label = \"Room Temperature\"\nterm.official = True\nterm.move_to_top()\nterm.move_after_term('-40')\nterm.save()\nterm.delete()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://sissource.ethz.ch/sispub/openbis/tree/master/pybis", "keywords": "", "license": "Apache Software License Version 2.0", "maintainer": "", "maintainer_email": "", "name": "PyBIS", "package_url": "https://pypi.org/project/PyBIS/", "platform": "", "project_url": "https://pypi.org/project/PyBIS/", "project_urls": {"Homepage": "https://sissource.ethz.ch/sispub/openbis/tree/master/pybis"}, "release_url": "https://pypi.org/project/PyBIS/1.14.6/", "requires_dist": null, "requires_python": ">=3.6", "summary": "openBIS connection and interaction, optimized for using with Jupyter", "version": "1.14.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Welcome to pyBIS!</h1>\n<p>pyBIS is a Python module for interacting with openBIS. pyBIS is designed to be most useful in a <a href=\"https://jupyter.org\" rel=\"nofollow\">Jupyter Notebook</a> or IPython environment, especially if you are developing Python scripts for automatisation. Jupyter Notebooks offer some sort of IDE for openBIS, supporting TAB completition and immediate data checks, making the life of a researcher hopefully easier.</p>\n<h2>Dependencies and Requirements</h2>\n<ul>\n<li>pyBIS relies the openBIS API v3</li>\n<li>openBIS version 16.05.2 or newer is required</li>\n<li>18.06.2 or later is recommended</li>\n<li>pyBIS uses Python 3.5 or newer and the Pandas module</li>\n</ul>\n<h2>Installation</h2>\n<pre><code>pip install --upgrade pybis\n</code></pre>\n<p>That command will download install pyBIS and all its dependencies. If pyBIS is already installed, it will be upgraded to the latest version.</p>\n<p>If you haven't done yet, install Jupyter and/or Jupyter Lab (the next Generation of Jupyter):</p>\n<pre><code>pip install jupyter\npip install jupyterlab\n</code></pre>\n<h1>General Usage</h1>\n<h3>TAB completition and other hints in Jupyter / IPython</h3>\n<ul>\n<li>in a Jupyter Notebook  or IPython environment, pybis helps you to enter the commands</li>\n<li>After every dot <code>.</code> you might hit the <code>TAB</code> key in order to look at the available commands.</li>\n<li>if you are unsure what parameters to add to a , add a question mark right after the method and hit <code>SHIFT+ENTER</code></li>\n<li>Jupyter will then look up the signature of the method and show some helpful docstring</li>\n</ul>\n<h3>Checking input</h3>\n<ul>\n<li>When working with properties of entities, they might use a <strong>controlled vocabulary</strong> or are of a specific <strong>property type</strong>.</li>\n<li>Add an underscore <code>_</code> character right after the property and hit <code>SHIFT+ENTER</code> to show the valid values</li>\n<li>When a property only acceps a controlled vocabulary, you will be shown the valid terms in a nicely formatted table</li>\n<li>if you try to assign an <strong>invalid value</strong> to a property, you'll receive an error immediately</li>\n</ul>\n<h3>Glossary</h3>\n<ul>\n<li>\n<p><strong>spaces:</strong> used for authorisation eg. to separate two working groups. If you have permissions in a space, you can see everything which in that space, but not necessarily in another space (unless you have the permission).</p>\n</li>\n<li>\n<p><strong>projects:</strong> a space consists of many projects.</p>\n</li>\n<li>\n<p><strong>experiments / collections:</strong> a projects contain many experiments. Experiments can have <em>properties</em></p>\n</li>\n<li>\n<p><strong>samples / objects:</strong> an experiment contains many samples. Samples can have <em>properties</em></p>\n</li>\n<li>\n<p><strong>dataSet:</strong> a dataSet which contains the actual <em>data files</em>, either pyhiscal (stored in openBIS dataStore) or linked</p>\n</li>\n<li>\n<p><strong>attributes:</strong> every entity above contains a number of attributes. They are the same accross all instances of openBIS and independent of their type.</p>\n</li>\n<li>\n<p><strong>properties:</strong> Additional specific key-value pairs, available for these entities:</p>\n<ul>\n<li>experiments</li>\n<li>samples</li>\n<li>dataSets</li>\n</ul>\n<p>every single instance of an entity must be of a specific <strong>entity type</strong> (see below). The type defines the set of properties.</p>\n</li>\n<li>\n<p><strong>experiment type / collection type:</strong> a type for experiments which specifies its properties</p>\n</li>\n<li>\n<p><strong>sample type / object type:</strong> a type for samples / objects which specifies its properties</p>\n</li>\n<li>\n<p><strong>dataSet type:</strong> a type for dataSets which specifies its properties</p>\n</li>\n<li>\n<p><strong>property type:</strong> a single property, as defined in the entity types above. It can be of a classic data type (e.g. INTEGER, VARCHAR, BOOLEAN) or its values can be controlled (CONTROLLEDVOCABULARY).</p>\n</li>\n<li>\n<p><strong>plugin:</strong> a script written in <a href=\"https://www.jython.org\" rel=\"nofollow\">Jython</a> which allows to check property values in a even more detailed fashion</p>\n</li>\n</ul>\n<h1>connect to OpenBIS</h1>\n<h2>login</h2>\n<p>In an <strong>interactive session</strong> e.g. inside a Jupyter notebook, you can use <code>getpass</code> to enter your password safely:</p>\n<pre><code>from pybis import Openbis\no = Openbis('https://example.com', verify_certificates=False)\n\nimport getpass\npassword = getpass.getpass()\n\no.login('username', password, save_token=True)   # save the session token in ~/.pybis/example.com.token\n</code></pre>\n<p>In a <strong>script</strong> you would rather use two <strong>environment variables</strong> to provide username and password:</p>\n<pre><code>from pybis import Openbis\no = Openbis(os.environ['OPENBIS_HOST'], verify_certificates=False)\n\no.login(os.environ['OPENBIS_USERNAME'], os.environ['OPENBIS_PASSWORD'])\n</code></pre>\n<p>Check whether the <strong>session token</strong> is still valid and log out:</p>\n<pre><code>o.token\no.is_session_active()\no.logout()\n</code></pre>\n<h2>Mount openBIS dataStore server</h2>\n<h3>Prerequisites: FUSE / SSHFS</h3>\n<p>Mounting an openBIS dataStore server requires FUSE / SSHFS to be installed (requires root privileges). The mounting itself requires no root privileges.</p>\n<p><strong>Mac OS X</strong></p>\n<p>Follow the installation instructions on\n<a href=\"https://osxfuse.github.io\" rel=\"nofollow\">https://osxfuse.github.io</a></p>\n<p><strong>Unix Cent OS 7</strong></p>\n<pre><code>$ sudo yum install epel-release\n$ sudo yum --enablerepo=epel -y install fuse-sshfs\n$ user=\"$(whoami)\"\n$ usermod -a -G fuse \"$user\"\n</code></pre>\n<p>After the installation, an <code>sshfs</code> command should be available.</p>\n<h3>Mount dataStore server with pyBIS</h3>\n<p>Because the mount/unmount procedure differs from platform to platform, pyBIS offers two simple methods:</p>\n<pre><code>o.mount()\no.mount(username, password, hostname, mountpoint, volname)\no.is_mounted()\no.unmount()\no.get_mountpoint()\n</code></pre>\n<p>Currently, mounting is supported for Linux and Mac OS X only.</p>\n<p>All attributes, if not provided, are re-used by a previous login() command. If no mountpoint is provided, the default mounpoint will be <code>~/hostname</code>. If this directory does not exist, it will be created. The directory must be empty before mounting.</p>\n<h1>Masterdata</h1>\n<p>OpenBIS stores quite a lot of meta-data along with your dataSets. The collection of data that describes this meta-data (i.e. meta-meta-data) is called masterdata. It consists of:</p>\n<ul>\n<li>sample types</li>\n<li>dataSet types</li>\n<li>material types</li>\n<li>experiment types</li>\n<li>property types</li>\n<li>vocabularies</li>\n<li>vocabulary terms</li>\n<li>plugins (jython scripts that allow complex data checks)</li>\n<li>tags</li>\n<li>semantic annotations</li>\n</ul>\n<h2>browse masterdata</h2>\n<pre><code>sample_types = o.get_sample_types()  # get a list of sample types \nsample_types.df                      # DataFrame object\nst = o.get_sample_types()[3]         # get 4th element of that list\nst = o.get_sample_type('YEAST')\nst.code\nst.generatedCodePrefix\nst.attrs.all()                       # get all attributes as a dict\nst.get_validationPlugin()            # returns a plugin object\n\nst.get_property_assignments()        # show the list of properties\n                                     # for that sample type\no.get_material_types()\no.get_dataset_types()\no.get_experiment_types()\no.get_collection_types()\n\no.get_property_types()\npt = o.get_property_type('BARCODE_COMPLEXITY_CHECKER')\npt.attrs.all()\n\no.get_plugins()\npl = o.get_plugin('Diff_time')\npl.script  # the Jython script that processes this property\n\no.get_vocabularies()\no.get_vocabulary('BACTERIAL_ANTIBIOTIC_RESISTANCE')\no.get_terms(vocabulary='STORAGE')\no.get_tags()\n</code></pre>\n<h2>create property types</h2>\n<p>Samples (objects), experiments (collections) and dataSets contain general <strong>attributes</strong> as well as type-specific <strong>properties</strong>. Before they can be assigned to their respective type, they need to be created first.</p>\n<pre><code>pt = o.new_property_type(\n    code        = 'MY_NEW_PROPERTY_TYPE', \n    label       = 'yet another property type', \n    description = 'my first property',\n    dataType    = 'VARCHAR',\n)\n\npt_int = o.new_property_type(\n    code        = '$DEFAULT_OBJECT_TYPE', \n    label       = 'default object type for ELN-LIMS', \n    dataType    = 'VARCHAR',\n    internalNameSpace = True,\n)\n\npt_voc = o.new_property_type(\n    code        = 'MY_CONTROLLED_VOCABULARY', \n    label       = 'label me', \n    description = 'give me a description',\n    dataType    = 'CONTROLLEDVOCABULARY',\n    vocabulary  = 'STORAGE',\n)\n</code></pre>\n<p>The <code>dataType</code> attribute can contain any of these values:</p>\n<ul>\n<li><code>INTEGER</code></li>\n<li><code>VARCHAR</code></li>\n<li><code>MULTILINE_VARCHAR</code></li>\n<li><code>REAL</code></li>\n<li><code>TIMESTAMP</code></li>\n<li><code>BOOLEAN</code></li>\n<li><code>HYPERLINK</code></li>\n<li><code>XML</code></li>\n<li><code>CONTROLLEDVOCABULARY</code></li>\n<li><code>MATERIAL</code></li>\n</ul>\n<p>When choosing <code>CONTROLLEDVOCABULARY</code>, you must specify a <code>vocabulary</code> attribute (see example). Likewise, when choosing <code>MATERIAL</code>, a <code>materialType</code> attribute must be provided. PropertyTypes that start with a $ belong by definition to the <code>internalNameSpace</code> and therefore this attribute must be set to True.</p>\n<h2>create sample types / object types</h2>\n<p>The new name for <code>sample_type</code> is <code>object_type</code>. You can use boths names interchangeably.</p>\n<pre><code>sample_type = o.new_sample_type(\n    code                = 'my_own_sample_type',  # mandatory\n    generatedCodePrefix = 'S',                   # mandatory\n    description         = '',\n    autoGeneratedCode   = True,\n    subcodeUnique       = False,\n    listable            = True,\n    showContainer       = False,\n    showParents         = True,\n    showParentMetadata  = False,\n    validationPlugin    = 'Has_Parents'          # see plugins below\n)\nsample_type.save()\n</code></pre>\n<h2>assign properties to sample type / object type</h2>\n<p>A sample type needs to be saved before properties can be assigned to. This assignment procedure applies to all entity types (dataset type, experiment type, material type).</p>\n<pre><code>sample_type.assign_property(\n\tprop                 = 'diff_time',           # mandatory\n\tsection              = '',\n\tordinal              = 5,\n\tmandatory            = True,\n\tinitialValueForExistingEntities = 'initial value'\n\tshowInEditView       = True,\n\tshowRawValueInForms  = True\n)\nsample_type.revoke_property('diff_time')\nsample_type.get_property_assignments()\n</code></pre>\n<h2>create dataset types</h2>\n<pre><code>dataset_type = o.new_dataset_type(\n    code                = 'my_dataset_type',       # mandatory\n    description         = None,\n    mainDataSetPattern  = None,\n    mainDataSetPath     = None,\n    disallowDeletion    = False,\n    validationPlugin    = None,\n)\ndataset_type.save()\ndataset_type.assign_property('property_name')\ndataset_type.revoke_property('property_name')\ndataset_type.get_property_assignments()\n</code></pre>\n<h2>create experiment types / collection types</h2>\n<p>The new name for <code>experiment_type</code> is <code>collection_type</code>. You can use boths names interchangeably.</p>\n<pre><code>experiment_type = o.new_experiment_type(\n    code, \n    description      = None,\n    validationPlugin = None,\n)\nexperiment_type.save()\nexperiment_type.assign_property('property_name')\nexperiment_type.revoke_property('property_name')\nexperiment_type.get_property_assignments()\n</code></pre>\n<h2>create material types</h2>\n<pre><code>material_type = o.new_material_type(\n    code, \n    description=None,\n    validationPlugin=None,\n)\nmaterial_type.save()\nmaterial_type.assign_property('property_name')\nmaterial_type.revoke_property('property_name')\nmaterial_type.get_property_assignments()\n\n</code></pre>\n<h2>create plugins</h2>\n<p>Plugins are Jython scripts that can accomplish more complex data-checks than ordinary types and vocabularies can achieve. They are assigned to entity types (dataset type, sample type etc). <a href=\"https://wiki-bsse.ethz.ch/display/openBISDoc/Properties+Handled+By+Scripts\" rel=\"nofollow\">Documentation and examples can be found here</a></p>\n<pre><code>pl = o.new_plugin(\n    name       ='my_new_entry_validation_plugin',\n    pluginType ='ENTITY_VALIDATION',       # or 'DYNAMIC_PROPERTY' or 'MANAGED_PROPERTY',\n    entityKind = None,                     # or 'SAMPLE', 'MATERIAL', 'EXPERIMENT', 'DATA_SET'\n    script     = 'def calculate(): pass'   # a JYTHON script\n)\npl.save()\n</code></pre>\n<h2>Users, Groups and RoleAssignments</h2>\n<pre><code>o.get_groups()\ngroup = o.new_group(code='group_name', description='...')\ngroup = o.get_group('group_name')\ngroup.save()\ngroup.assign_role(role='ADMIN', space='DEFAULT')\ngroup.get_roles() \ngroup.revoke_role(role='ADMIN', space='DEFAULT')\n\ngroup.add_members(['admin'])\ngroup.get_members()\ngroup.del_members(['admin'])\ngroup.delete()\n\no.get_persons()\nperson = o.new_person(userId='username')\nperson.space = 'USER_SPACE'\nperson.save()\n\nperson.assign_role(role='ADMIN', space='MY_SPACE')\nperson.assign_role(role='OBSERVER')\nperson.get_roles()\nperson.revoke_role(role='ADMIN', space='MY_SPACE')\nperson.revoke_role(role='OBSERVER')\n\no.get_role_assignments()\no.get_role_assignments(space='MY_SPACE')\no.get_role_assignments(group='MY_GROUP')\nra = o.get_role_assignment(techId)\nra.delete()\n</code></pre>\n<h2>Spaces</h2>\n<pre><code>space = o.new_space(code='space_name', description='')\nspace.save()\nspace.delete('reason for deletion')\no.get_spaces(\n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n)\nspace = o.get_space('MY_SPACE')\nspace.code\nspace.description\nspace.registrator\nspace.registrationDate\nspace.modifier\nspace.modificationDate\nspace.attrs.all()                     # returns a dict containing all attributes\n</code></pre>\n<h2>Projects</h2>\n<pre><code>project = o.new_project(\n    space       = space, \n    code        = 'project_name',\n    description = 'some project description'\n)\nproject = space.new_project(\n\tcode         = 'project_code',\n\tdescription  = 'project description'\n)\nproject.save()\n\no.get_projects(\n    space       = 'MY_SPACE',         # show only projects in MY_SPACE\n    start_with  = 0,                  # start_with and count\n    count       = 10,                 # enable paging\n)\no.get_projects(space='MY_SPACE')\nspace.get_projects()\n\nproject.get_experiments()\nproject.get_attachments()\np.add_attachment(fileName='testfile', description= 'another file', title= 'one more attachment')\nproject.download_attachments()\n\nproject.code\nproject.description\n# ... any other attribute\nproject.attrs.all()                   # returns a dict containing all attributes\n\nproject.freeze = True\nproject.freezeForExperiments = True\nproject.freezeForSamples = True\n\n</code></pre>\n<h2>Samples / Objects</h2>\n<p>The new name for <code>sample</code> is <code>object</code>. You can use boths names interchangeably:</p>\n<ul>\n<li><code>get_sample()</code>  = <code>get_object()</code></li>\n<li><code>new_sample()</code>  = <code>new_object()</code></li>\n<li><code>get_samples()</code> = <code>get_objects()</code></li>\n</ul>\n<p>etc.</p>\n<pre><code>sample = o.new_sample(\n    type       = 'YEAST', \n    space      = 'MY_SPACE',\n    experiment = '/MY_SPACE/MY_PROJECT/EXPERIMENT_1',\n    parents    = [parent_sample, '/MY_SPACE/YEA66'], \n    children   = [child_sample],\n    props      = {\"name\": \"some name\", \"description\": \"something interesting\"}\n)\nsample = space.new_sample( type='YEAST' )\nsample.save()\n\nsample = o.get_sample('/MY_SPACE/MY_SAMPLE_CODE')\nsample = o.get_sample('20170518112808649-52')\n\nsample.space\nsample.code\nsample.permId\nsample.identifier\nsample.type  # once the sample type is defined, you cannot modify it\n\nsample.space\nsample.space = 'MY_OTHER_SPACE'\n\nsample.experiment    # a sample can belong to one experiment only\nsample.experiment = '/MY_SPACE/MY_PROJECT/MY_EXPERIMENT'\n\nsample.project\nsample.project = '/MY_SPACE/MY_PROJECT'  # only works if project samples are\nenabled\n\nsample.tags\nsample.tags = ['guten_tag', 'zahl_tag' ]\n\nsample.attrs.all()                    # returns all attributes as a dict\nsample.props.all()                    # returns all properties as a dict\n\nsample.get_attachments()\nsample.download_attachments()\nsample.add_attachment('testfile.xls')\n</code></pre>\n<h3>parents, children, components and container</h3>\n<pre><code>sample.get_parents()\nsample.set_parents(['/MY_SPACE/PARENT_SAMPLE_NAME')\nsample.add_parents('/MY_SPACE/PARENT_SAMPLE_NAME')\nsample.del_parents('/MY_SPACE/PARENT_SAMPLE_NAME')\n\nsample.get_children()\nsample.set_children('/MY_SPACE/CHILD_SAMPLE_NAME')\nsample.add_children('/MY_SPACE/CHILD_SAMPLE_NAME')\nsample.del_children('/MY_SPACE/CHILD_SAMPLE_NAME')\n\n# A Sample may belong to another Sample, which acts as a container.\n# As opposed to DataSets, a Sample may only belong to one container.\nsample.container    # returns a sample object\nsample.container = '/MY_SPACE/CONTAINER_SAMPLE_NAME'   # watch out, this will change the identifier of the sample to:\n                                                       # /MY_SPACE/CONTAINER_SAMPLE_NAME:SAMPLE_NAME\nsample.container = ''                                  # this will remove the container. \n\n# A Sample may contain other Samples, in order to act like a container (see above)\n# The Sample-objects inside that Sample are called \u00abcomponents\u00bb or \u00abcontained Samples\u00bb\n# You may also use the xxx_contained() functions, which are just aliases.\nsample.get_components()\nsample.set_components('/MY_SPACE/COMPONENT_NAME')\nsample.add_components('/MY_SPACE/COMPONENT_NAME')\nsample.del_components('/MY_SPACE/COMPONENT_NAME')\n</code></pre>\n<h3>sample tags</h3>\n<pre><code>sample.get_tags()\nsample.set_tags('tag1')\nsample.add_tags(['tag2','tag3'])\nsample.del_tags('tag1')\n</code></pre>\n<h3>useful tricks when dealing with properties, using Jupyter or IPython</h3>\n<pre><code>sample.p + TAB                        # in IPython or Jupyter: show list of available properties\nsample.p.my_property_ + TAB           # in IPython or Jupyter: show datatype or controlled vocabulary\nsample.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nsample.set_props({ ... })             # set properties by providing a dict\nsample.p                              # same thing as .props\nsample.p.my_property = \"some value\"   # set the value of a property\n                                      # value is checked (type/vocabulary)\nsample.save()                         # update the sample in openBIS\n</code></pre>\n<h3>search for samples / objects</h3>\n<p>The result of a search is always list, even when no items are found. The <code>.df</code> attribute returns\nthe Pandas dataFrame of the results.</p>\n<pre><code>samples = o.get_samples(\n    space      ='MY_SPACE',\n    type       ='YEAST',\n    tags       =['*'],                # only sample with existing tags\n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n    NAME       = 'some name',         # properties are always uppercase \n                                      # to distinguish them from attributes\n    **{ \"SOME.WEIRD:PROP\": \"value\"}   # property name contains a dot or a\n                                      # colon: cannot be passed as an argument \n    attrs=[                           # show these attributes in the dataFrame\n        'sample.code',\n        'registrator.email',\n        'type.generatedCodePrefix'\n    ],\n    props=['$NAME', 'MATING_TYPE']    # show these properties in the result\n)\n\nsamples.df                            # returns a Pandas DataFrame object\n\nsamples = o.get_samples(props=\"*\")    # retrieve all properties of all samples\n</code></pre>\n<h3>freezing samples</h3>\n<pre><code>sample.freeze = True\nsample.freezeForComponents = True\nsample.freezeForChildren = True\nsample.freezeForParents = True\nsample.freezeForDataSets = True\n</code></pre>\n<h2>Experiments / Collections</h2>\n<p>The new name for <code>experiment</code> is <code>collection</code>. You can use boths names interchangeably:</p>\n<ul>\n<li><code>get_experiment()</code>  = <code>get_collection()</code></li>\n<li><code>new_experiment()</code>  = <code>new_collection()</code></li>\n<li><code>get_experiments()</code> = <code>get_collections()</code></li>\n</ul>\n<pre><code>exp = o.new_experiment\n    type='DEFAULT_EXPERIMENT',\n    space='MY_SPACE',\n    project='YEASTS'\n)\nexp.save()\n\no.get_experiments(\n    project='YEASTS',\n    space='MY_SPACE', \n    type='DEFAULT_EXPERIMENT',\n    tags='*', \n    finished_flag=False,\n    props=['name', 'finished_flag']\n)\nproject.get_experiments()\nexp = o.get_experiment('/MY_SPACE/MY_PROJECT/MY_EXPERIMENT')\n\nexp.set_props({ key: value})\nexp.props\nexp.p                              # same thing as .props\nexp.p.finished_flag=True\nexp.p.my_property = \"some value\"   # set the value of a property (value is checked)\nexp.p + TAB                        # in IPython or Jupyter: show list of available properties\nexp.p.my_property_ + TAB           # in IPython or Jupyter: show datatype or controlled vocabulary\nexp.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nexp.attrs.all()                    # returns all attributes as a dict\nexp.props.all()                    # returns all properties as a dict\n\nexp.attrs.tags = ['some', 'tags']\nexp.tags = ['some', 'tags']        # same thing\nexp.save()\n\nexp.code\nexp.description\nexp.registrator\nexp.registrationDate\nexp.modifier\nexp.modificationDate\n\nexp.freeze = True\nexp.freezeForDataSets = True\nexp.freezeForSamples = True\n</code></pre>\n<h2>Datasets</h2>\n<h3>working with existing dataSets</h3>\n<pre><code>sample.get_datasets()\nds = o.get_dataset('20160719143426517-259')\nds.get_parents()\nds.get_children()\nds.sample\nds.experiment\nds.physicalData\nds.status                         # AVAILABLE LOCKED ARCHIVED \n                                  # ARCHIVE_PENDING UNARCHIVE_PENDING\n                                  # BACKUP_PENDING\nds.archive()\nds.unarchive()\n\nds.attrs.all()                    # returns all attributes as a dict\nds.props.all()                    # returns all properties as a dict\n\nds.add_attachment()               # attachments usually contain meta-data\nds.get_attachments()              # about the dataSet, not the data itself.\nds.download_attachments()\n</code></pre>\n<h3>download dataSets</h3>\n<pre><code>o.download_prefix                  # used for download() and symlink() method.\n                                   # Is set to data/hostname by default, but can be changed.\nds.get_files(start_folder=\"/\")     # get file list as Pandas dataFrame\nds.file_list                       # get file list as array\n\nds.download()                      # simply download all files to data/hostnae/permId/\nds.download(\n\tdestination = 'my_data',        # download files to folder my_data/\n\tcreate_default_folders = False, # ignore the /original/DEFAULT folders made by openBIS\n\twait_until_finished = False,    # download in background, continue immediately\n\tworkers = 10                    # 10 downloads parallel (default)\n)\nds.is_physical()                   # TRUE if dataset has been physically downloaded\n</code></pre>\n<h3>link dataSets</h3>\n<p>Instead of downloading a dataSet, you can create a symbolic link to a dataSet in the openBIS dataStore. To do that, the openBIS dataStore needs to be mounted first (see mount method above). <strong>Note:</strong> Symbolic links and the mount() feature currently do not work with Windows.</p>\n<pre><code>o.download_prefix                  # used for download() and symlink() method.\n                                   # Is set to data/hostname by default, but can be changed.\nds.symlink()                       # creates a symlink for this dataset: data/hostname/permId\n                                   # tries to mount openBIS instance \n                                   # in case it is not mounted yet\nds.symlink(\n   target_dir = 'data/dataset_1/', # default target_dir is: data/hostname/permId\n   replace_if_symlink_exists=True\n)\nds.is_symlink()\n</code></pre>\n<h3>dataSet attributes and properties</h3>\n<pre><code>ds.set_props({ key: value})\nds.props\nds.p                              # same thing as .props\nds.p.my_property = \"some value\"   # set the value of a property\nds.p + TAB                        # show list of available properties\nds.p.my_property_ + TAB           # show datatype or controlled vocabulary\nds.p['my-weird.property-name']    # accessing properties containing a dash or a dot\n\nds.attrs.all()                    # returns all attributes as a dict\nds.props.all()                    # returns all properties as a dict\n</code></pre>\n<h3>search for dataSets</h3>\n<ul>\n<li>The result of a search is always list, even when no items are found</li>\n<li>The <code>.df</code> attribute returns the Pandas dataFrame of the results</li>\n<li>properties must be in UPPERCASE to distinguish them from attributes</li>\n</ul>\n<pre><code>dataSets = o.get_dataSets(\n    type  ='MY_DATASET_TYPE',\n    NAME  = 'some name',              # properties are always uppercase \n                                      # to distinguish them from attributes\n    **{ \"SOME.WEIRD:PROP\": \"value\"},  # property name contains a dot or a\n                                      # colon: cannot be passed as an argument \n    start_with = 0,                   # start_with and count\n    count      = 10,                  # enable paging\n    attrs=[                           # show these attributes in the dataFrame\n        'sample.code',\n        'registrator.email',\n        'type.generatedCodePrefix'\n    ],\n    props=['$NAME', 'MATING_TYPE']    # show these properties in the result\n)\n\ndf = dataSets.df                      # returns the Pandas dataFrame object\n\ndataSets = o.get_dataSets(props=\"*\")  # retrieve all properties of all dataSets\n</code></pre>\n<p>In some cases, you might want to retrieve precisely certain datasets. This can be achieved by\nmethods chaining (but be aware, it might not be very performant):</p>\n<pre><code>datasets = o.get_experiments(project='YEASTS')\\\n\t\t\t .get_samples(type='FLY')\\\n\t\t\t .get_datasets(\n\t\t\t\t\ttype='ANALYZED_DATA',\n\t\t\t\t\tprops=['MY_PROPERTY'],\n\t\t\t\t\tMY_PROPERTY='some analyzed data'\n\t\t \t )\n</code></pre>\n<ul>\n<li>another example:</li>\n</ul>\n<pre><code>datasets = o.get_experiment('/MY_NEW_SPACE/MY_PROJECT/MY_EXPERIMENT4')\\\n           .get_samples(type='UNKNOWN')\\\n           .get_parents()\\\n           .get_datasets(type='RAW_DATA')\n</code></pre>\n<h3>freeze dataSets</h3>\n<ul>\n<li>once a dataSet has been frozen, it cannot be changed by anyone anymore</li>\n<li>so be careful!</li>\n</ul>\n<pre><code>ds.freeze = True\nds.freezeForChildren = True\nds.freezeForParents = True\nds.freezeForComponents = True\nds.freezeForContainers = True\nds.save()\n</code></pre>\n<h3>create a new dataSet</h3>\n<pre><code>ds_new = o.new_dataset(\n    type       = 'ANALYZED_DATA', \n    experiment = '/SPACE/PROJECT/EXP1', \n    sample     = '/SPACE/SAMP1',\n    files      = ['my_analyzed_data.dat'], \n    props      = {'name': 'some good name', 'description': '...' }\n)\nds_new.save()\n</code></pre>\n<h3>create dataSet with zipfile</h3>\n<p>DataSet containing one zipfile which will be unzipped in openBIS:</p>\n<pre><span class=\"n\">ds_new</span> <span class=\"o\">=</span> <span class=\"n\">o</span><span class=\"o\">.</span><span class=\"n\">new_dataset</span><span class=\"p\">(</span>\n    <span class=\"nb\">type</span>       <span class=\"o\">=</span> <span class=\"s1\">'RAW_DATA'</span><span class=\"p\">,</span> \n    <span class=\"n\">sample</span>     <span class=\"o\">=</span> <span class=\"s1\">'/SPACE/SAMP1'</span><span class=\"p\">,</span>\n    <span class=\"n\">zipfile</span>    <span class=\"o\">=</span> <span class=\"s1\">'my_zipped_folder.zip'</span><span class=\"p\">,</span> \n<span class=\"p\">)</span>\n<span class=\"n\">ds_new</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<h3>create dataSet with mixed content</h3>\n<ul>\n<li>mixed content means: folders and files are provided</li>\n<li>a relative specified folder (and all its content) will end up in the root, while keeping its structure\n<ul>\n<li><code>../measurements/</code> --&gt; <code>/measurements/</code></li>\n<li><code>some/folder/somewhere/</code> --&gt; <code>/somewhere/</code></li>\n</ul>\n</li>\n<li>relative files will also end up in the root\n<ul>\n<li><code>my_file.txt</code> --&gt; <code>/my_file.txt</code></li>\n<li><code>../somwhere/else/my_other_file.txt</code> --&gt; <code>/my_other_file.txt</code></li>\n<li><code>some/folder/file.txt</code> --&gt; <code>/file.txt</code></li>\n</ul>\n</li>\n<li>useful if DataSet contains files and folders</li>\n<li>the content of the folder will be zipped (on-the-fly) and uploaded to openBIS</li>\n<li>openBIS will keep the folder structure intact</li>\n<li>relative path will be shortened to its basename. For example:</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>local</th>\n<th>openBIS</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>../../myData/</code></td>\n<td><code>myData/</code></td>\n</tr>\n<tr>\n<td><code>some/experiment/results/</code></td>\n<td><code>results/</code></td>\n</tr></tbody></table>\n<pre><code>ds_new = o.new_dataset(\n    type       = 'RAW_DATA', \n    sample     = '/SPACE/SAMP1',\n    files     = ['../measurements/', 'my_analyis.ipynb', 'results/'] \n)\nds_new.save()\n</code></pre>\n<h3>create dataSet container</h3>\n<p>A DataSet of kind=CONTAINER contains other DataSets, but no files:</p>\n<pre><code>ds_new = o.new_dataset(\n    type       = 'ANALYZED_DATA', \n    experiment = '/SPACE/PROJECT/EXP1', \n    sample     = '/SPACE/SAMP1',\n    kind       = 'CONTAINER',\n    props      = {'name': 'some good name', 'description': '...' }\n)\nds_new.save()\n</code></pre>\n<h3>get, set, add and remove parent datasets</h3>\n<pre><code>dataset.get_parents()\ndataset.set_parents(['20170115220259155-412'])\ndataset.add_parents(['20170115220259155-412'])\ndataset.del_parents(['20170115220259155-412'])\n</code></pre>\n<h4>get, set, add and remove child datasets</h4>\n<pre><code>dataset.get_children()\ndataset.set_children(['20170115220259155-412'])\ndataset.add_children(['20170115220259155-412'])\ndataset.del_children(['20170115220259155-412'])\n</code></pre>\n<h3>dataSet containers</h3>\n<ul>\n<li>A DataSet may belong to other DataSets, which must be of kind=CONTAINER</li>\n<li>As opposed to Samples, DataSets may belong (contained) to more than one DataSet-container</li>\n</ul>\n<pre><code>dataset.get_containers()\ndataset.set_containers(['20170115220259155-412'])\ndataset.add_containers(['20170115220259155-412'])\ndataset.del_containers(['20170115220259155-412'])\n</code></pre>\n<ul>\n<li>a DataSet of kind=CONTAINER may contain other DataSets, to act like a folder (see above)</li>\n<li>the DataSet-objects inside that DataSet are called components or contained DataSets</li>\n<li>you may also use the xxx_contained() functions, which are just aliases.</li>\n</ul>\n<pre><code>dataset.get_components()\ndataset.set_components(['20170115220259155-412'])\ndataset.add_components(['20170115220259155-412'])\ndataset.del_components(['20170115220259155-412'])\n</code></pre>\n<h2>Semantic Annotations</h2>\n<p>create semantic annotation for sample type 'UNKNOWN':</p>\n<pre><code>\nsa = o.new_semantic_annotation(\n\tentityType = 'UNKNOWN',\n\tpredicateOntologyId = 'po_id',\n\tpredicateOntologyVersion = 'po_version',\n\tpredicateAccessionId = 'pa_id',\n\tdescriptorOntologyId = 'do_id',\n\tdescriptorOntologyVersion = 'do_version',\n\tdescriptorAccessionId = 'da_id'\n)\nsa.save()\n</code></pre>\n<p>Create semantic annotation for property type (predicate and descriptor values omitted for brevity)</p>\n<pre><code>sa = o.new_semantic_annotation(propertyType = 'DESCRIPTION', ...)\nsa.save()\n</code></pre>\n<p><strong>Create</strong> semantic annotation for sample property assignment (predicate and descriptor values omitted for brevity)</p>\n<pre><code>sa = o.new_semantic_annotation(\n\tentityType = 'UNKNOWN',\n\tpropertyType = 'DESCRIPTION', \n\t...\n)\nsa.save()\n</code></pre>\n<p><strong>Create</strong> a semantic annotation directly from a sample type. Will also create sample property assignment annotations when propertyType is given:</p>\n<pre><code>st = o.get_sample_type(\"ORDER\")\nst.new_semantic_annotation(...)\n</code></pre>\n<p><strong>Get all</strong> semantic annotations</p>\n<pre><code>o.get_semantic_annotations()\n</code></pre>\n<p><strong>Get</strong> semantic annotation by perm id</p>\n<pre><code>sa = o.get_semantic_annotation(\"20171015135637955-30\")\n</code></pre>\n<p><strong>Update</strong> semantic annotation</p>\n<pre><code>sa.predicateOntologyId = 'new_po_id'\nsa.descriptorOntologyId = 'new_do_id'\nsa.save()\n</code></pre>\n<p><strong>Delete</strong> semantic annotation</p>\n<pre><code>sa.delete('reason')\n</code></pre>\n<h2>Tags</h2>\n<pre><code>new_tag = o.new_tag(\n\tcode        = 'my_tag', \n\tdescription = 'some descriptive text'\n)\nnew_tag.description = 'some new description'\nnew_tag.save()\no.get_tags()\no.get_tag('/username/TAG_Name')\no.get_tag('TAG_Name')\n\ntag.get_experiments()\ntag.get_samples()\ntag.get_owner()   # returns a person object\ntag.delete('why?')\n</code></pre>\n<h2>Vocabulary and VocabularyTerms</h2>\n<p>An entity such as Sample (Object), Experiment (Collection), Material or DataSet can be of a specific <em>entity type</em>:</p>\n<ul>\n<li>Sample Type (Object Type)</li>\n<li>Experiment Type (Collection Type)</li>\n<li>DataSet Type</li>\n<li>Material Type</li>\n</ul>\n<p>Every type defines which <strong>Properties</strong> may be defined. Properties act like <strong>Attributes</strong>, but they are type-specific. Properties can contain all sorts of information, such as free text, XML, Hyperlink, Boolean and also <strong>Controlled Vocabulary</strong>. Such a Controlled Vocabulary consists of many <strong>VocabularyTerms</strong>. These terms are used to only allow certain values entered in a Property field.</p>\n<p>So for example, you want to add a property called <strong>Animal</strong> to a Sample and you want to control which terms are entered in this Property field. For this you need to do a couple of steps:</p>\n<ol>\n<li>create a new vocabulary <em>AnimalVocabulary</em></li>\n<li>add terms to that vocabulary: <em>Cat, Dog, Mouse</em></li>\n<li>create a new PropertyType (e.g. <em>Animal</em>) of DataType <em>CONTROLLEDVOCABULARY</em> and assign the <em>AnimalVocabulary</em> to it</li>\n<li>create a new SampleType (e.g. <em>Pet</em>) and <em>assign</em> the created PropertyType to that Sample type.</li>\n<li>If you now create a new Sample of type <em>Pet</em> you will be able to add a property <em>Animal</em> to it which only accepts the terms <em>Cat, Dog</em> or <em>Mouse</em>.</li>\n</ol>\n<p><strong>create new Vocabulary with three VocabularyTerms</strong></p>\n<pre><code>voc = o.new_vocabulary(\n    code = 'BBB',\n    description = 'description of vocabulary aaa',\n    urlTemplate = 'https://ethz.ch',\n    terms = [\n        { \"code\": 'term_code1', \"label\": \"term_label1\", \"description\": \"term_description1\"},\n        { \"code\": 'term_code2', \"label\": \"term_label2\", \"description\": \"term_description2\"},\n        { \"code\": 'term_code3', \"label\": \"term_label3\", \"description\": \"term_description3\"}\n    ]   \n)\nvoc.save()\n</code></pre>\n<p><strong>create additional VocabularyTerms</strong></p>\n<pre><code>term = o.new_term(\n\tcode='TERM_CODE_XXX', \n\tvocabularyCode='BBB', \n\tlabel='here comes a label',\n\tdescription='here might appear a meaningful description'\n)\nterm.save()\n</code></pre>\n<p><strong>update VocabularyTerms</strong></p>\n<p>To change the ordinal of a term, it has to be moved either to the top with the <code>.move_to_top()</code> method or after another term using the <code>.move_after_term('TERM_BEFORE')</code> method.</p>\n<pre><code>voc = o.get_vocabulary('STORAGE')\nterm = voc.get_terms()['RT']\nterm.label = \"Room Temperature\"\nterm.official = True\nterm.move_to_top()\nterm.move_after_term('-40')\nterm.save()\nterm.delete()\n</code></pre>\n\n          </div>"}, "last_serial": 7130041, "releases": {"1.10.0": [{"comment_text": "", "digests": {"md5": "94753a102dc8dd04913b33eb3b060a67", "sha256": "0e8d3f6744dbba8923a84b532fb0f3b0ef16d7571ca28dbcabef298ffd44f9b9"}, "downloads": -1, "filename": "PyBIS-1.10.0.tar.gz", "has_sig": false, "md5_digest": "94753a102dc8dd04913b33eb3b060a67", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 90190, "upload_time": "2019-11-01T13:56:32", "upload_time_iso_8601": "2019-11-01T13:56:32.693651Z", "url": "https://files.pythonhosted.org/packages/0b/70/27cf11d73cbd3b03b71e60fa5bef5368ecc880bfd479de85a1f5110c44a1/PyBIS-1.10.0.tar.gz", "yanked": false}], "1.10.2": [{"comment_text": "", "digests": {"md5": "1ccf103af456fde9fd0225c1888e15b0", "sha256": "8e718ee61f32443932884dbd05a923c9d1c911944a094c3d62295481fe62bd4f"}, "downloads": -1, "filename": "PyBIS-1.10.2.tar.gz", "has_sig": false, "md5_digest": "1ccf103af456fde9fd0225c1888e15b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 90580, "upload_time": "2019-11-13T10:02:45", "upload_time_iso_8601": "2019-11-13T10:02:45.258815Z", "url": "https://files.pythonhosted.org/packages/5a/93/bcd1e86f46288851bd3f7f24ca18ba16fc6c9ac8a4143a20127f8880964b/PyBIS-1.10.2.tar.gz", "yanked": false}], "1.10.3": [{"comment_text": "", "digests": {"md5": "92b5885ecd52e9969d2905be3dbd4e4c", "sha256": "5a39ce6c360b08dc9a24b2f1798b15d2f9a9ac2d27cac9425cb97643434496f7"}, "downloads": -1, "filename": "PyBIS-1.10.3.tar.gz", "has_sig": false, "md5_digest": "92b5885ecd52e9969d2905be3dbd4e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 90658, "upload_time": "2019-11-20T14:33:43", "upload_time_iso_8601": "2019-11-20T14:33:43.130802Z", "url": "https://files.pythonhosted.org/packages/16/62/1213ae104b396a1f533ec32cd7e68b6b1d27db1392094ca21f3356eb8a2f/PyBIS-1.10.3.tar.gz", "yanked": false}], "1.10.4": [{"comment_text": "", "digests": {"md5": "c17d90739996047463bcb840a37f3bdb", "sha256": "3b6352c8be9c13e2a81420b59e1414d77e283d878f1b26e1905389477287d880"}, "downloads": -1, "filename": "PyBIS-1.10.4.tar.gz", "has_sig": false, "md5_digest": "c17d90739996047463bcb840a37f3bdb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 91165, "upload_time": "2019-12-06T15:58:42", "upload_time_iso_8601": "2019-12-06T15:58:42.942779Z", "url": "https://files.pythonhosted.org/packages/17/bc/43af39630a09ebce5c703b494010cd28fae033b77ccfe62bf40f3957b0d2/PyBIS-1.10.4.tar.gz", "yanked": false}], "1.10.5": [{"comment_text": "", "digests": {"md5": "2d17d2fee263cff836996fae4b9087c2", "sha256": "325a6a32e04ff39e26ed20c352fe7ef5b331b3cc47537c0d317483acf4b0259e"}, "downloads": -1, "filename": "PyBIS-1.10.5.tar.gz", "has_sig": false, "md5_digest": "2d17d2fee263cff836996fae4b9087c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 91201, "upload_time": "2019-12-09T11:20:59", "upload_time_iso_8601": "2019-12-09T11:20:59.724428Z", "url": "https://files.pythonhosted.org/packages/8c/a0/9ca51a8f94b288cfd3de8c15d5b02cde3d3105ac04d70513913168ddf228/PyBIS-1.10.5.tar.gz", "yanked": false}], "1.10.6": [{"comment_text": "", "digests": {"md5": "21dc87272c733aa83301539f8b52cd2a", "sha256": "267606780a4d92effedde9ad9065484a28aaba19286f2c3ebe1308ba4692cbfd"}, "downloads": -1, "filename": "PyBIS-1.10.6.tar.gz", "has_sig": false, "md5_digest": "21dc87272c733aa83301539f8b52cd2a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 93114, "upload_time": "2019-12-12T16:22:03", "upload_time_iso_8601": "2019-12-12T16:22:03.968682Z", "url": "https://files.pythonhosted.org/packages/60/9f/473cc369bb71b3d812fa8820f21cfa30558c15149aae860a8c78ff1b3232/PyBIS-1.10.6.tar.gz", "yanked": false}], "1.10.7": [{"comment_text": "", "digests": {"md5": "9bcb0684a851df472dab80fc022ed12a", "sha256": "e36a1e74987ef841f2d3f8d205b4c70fb44baa8ab04f2abe66f46e2a224bec63"}, "downloads": -1, "filename": "PyBIS-1.10.7.tar.gz", "has_sig": false, "md5_digest": "9bcb0684a851df472dab80fc022ed12a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 94322, "upload_time": "2019-12-20T14:20:29", "upload_time_iso_8601": "2019-12-20T14:20:29.956918Z", "url": "https://files.pythonhosted.org/packages/9e/0f/ac5db8704d4a3b5b1bfb774b6dbc66583ce6bb52ad5558d9db2539a67d7d/PyBIS-1.10.7.tar.gz", "yanked": false}], "1.10.8": [{"comment_text": "", "digests": {"md5": "4262aef848907ae7e582af3bdf633645", "sha256": "2bcbbd522eb4d8512ebdd6f3cfb2c8e8040c0cb06d4db3277c7c23a5382a8ec0"}, "downloads": -1, "filename": "PyBIS-1.10.8.tar.gz", "has_sig": false, "md5_digest": "4262aef848907ae7e582af3bdf633645", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 94347, "upload_time": "2020-01-08T23:54:10", "upload_time_iso_8601": "2020-01-08T23:54:10.700506Z", "url": "https://files.pythonhosted.org/packages/2c/23/2544115fcdf63bf8f39a88459626c28840bb2e946867f8ce59a3b6f6ac12/PyBIS-1.10.8.tar.gz", "yanked": false}], "1.11.0": [{"comment_text": "", "digests": {"md5": "bc6f3c8398088e4813a59ce15295d50b", "sha256": "dd5e07340256534aee9e6d7cb36ab1b6e9c6723e0f54c388cb95d1ea2924f126"}, "downloads": -1, "filename": "PyBIS-1.11.0.tar.gz", "has_sig": false, "md5_digest": "bc6f3c8398088e4813a59ce15295d50b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 98404, "upload_time": "2020-02-11T10:43:40", "upload_time_iso_8601": "2020-02-11T10:43:40.485151Z", "url": "https://files.pythonhosted.org/packages/52/f3/2b8afcae44b8d92f5e3600bb7437634ea310f4e39da9748346714738376c/PyBIS-1.11.0.tar.gz", "yanked": false}], "1.11.1": [{"comment_text": "", "digests": {"md5": "ab8708c6218a243a3c3dc8a8c8e7a360", "sha256": "a892f19ff5fa2aec59237de8b898c39e1e17ddd27c94943ae0ff313920b1b372"}, "downloads": -1, "filename": "PyBIS-1.11.1.tar.gz", "has_sig": false, "md5_digest": "ab8708c6218a243a3c3dc8a8c8e7a360", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 98522, "upload_time": "2020-03-02T16:16:30", "upload_time_iso_8601": "2020-03-02T16:16:30.598129Z", "url": "https://files.pythonhosted.org/packages/1b/e4/fe4029b867ba235ed99c24a9615c9e7766645fd0f00004ce5399695f1a4a/PyBIS-1.11.1.tar.gz", "yanked": false}], "1.12.0": [{"comment_text": "", "digests": {"md5": "073cbdc75627b3f9caf90d0231e57ff3", "sha256": "fb447fdc5fbe8dd63640c21aacf3e4288aeb88de62c36a89ca586085de6696b4"}, "downloads": -1, "filename": "PyBIS-1.12.0.tar.gz", "has_sig": false, "md5_digest": "073cbdc75627b3f9caf90d0231e57ff3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 102428, "upload_time": "2020-03-03T14:30:32", "upload_time_iso_8601": "2020-03-03T14:30:32.444801Z", "url": "https://files.pythonhosted.org/packages/56/4d/95bafca19dd234d53a050a079854c8761afea5f4a57d1cb78cdaf7e558db/PyBIS-1.12.0.tar.gz", "yanked": false}], "1.12.3": [{"comment_text": "", "digests": {"md5": "60fd2dad6fa0474de67b1bf022e75662", "sha256": "e1fd58ab561fc744fecdc9a795da72e365a7fa212d11b161d0dbf5894c4834c4"}, "downloads": -1, "filename": "PyBIS-1.12.3.tar.gz", "has_sig": false, "md5_digest": "60fd2dad6fa0474de67b1bf022e75662", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 102901, "upload_time": "2020-03-07T22:57:44", "upload_time_iso_8601": "2020-03-07T22:57:44.084849Z", "url": "https://files.pythonhosted.org/packages/f3/c6/a90ad7e835c800d3375fab5ddfd68cdcaec50176a2324d54118bbaf08b54/PyBIS-1.12.3.tar.gz", "yanked": false}], "1.12.4": [{"comment_text": "", "digests": {"md5": "f0f38ff5156cc7a8b0148efb170ed62c", "sha256": "41d4126e0209eeb40f870623d064d9d69dcecc452047ed382711e968667ee867"}, "downloads": -1, "filename": "PyBIS-1.12.4.tar.gz", "has_sig": false, "md5_digest": "f0f38ff5156cc7a8b0148efb170ed62c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 102933, "upload_time": "2020-03-11T16:24:10", "upload_time_iso_8601": "2020-03-11T16:24:10.191927Z", "url": "https://files.pythonhosted.org/packages/fd/6a/0010207b9aaab9f72b5177928f6a7a7991fa36616aa8a1925e08cee51f10/PyBIS-1.12.4.tar.gz", "yanked": false}], "1.13.0": [{"comment_text": "", "digests": {"md5": "eaf9b93b4b49c68f644431f480bbb4fd", "sha256": "71a6282bb90512f0c43ebc5c823595222241d6103e5414410cc833f6708fefe8"}, "downloads": -1, "filename": "PyBIS-1.13.0.tar.gz", "has_sig": false, "md5_digest": "eaf9b93b4b49c68f644431f480bbb4fd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 104893, "upload_time": "2020-04-02T21:46:01", "upload_time_iso_8601": "2020-04-02T21:46:01.768510Z", "url": "https://files.pythonhosted.org/packages/83/3a/72a830896325888ac3501eef6ed6a50319a383b14934c3493a2265b91ae1/PyBIS-1.13.0.tar.gz", "yanked": false}], "1.14.0": [{"comment_text": "", "digests": {"md5": "2abf55d6b4780af32d64439bd556c185", "sha256": "372de79ca6ead49c4388c8bb64e5231be1507b9bb8d39b500485735c67c02c14"}, "downloads": -1, "filename": "PyBIS-1.14.0.tar.gz", "has_sig": false, "md5_digest": "2abf55d6b4780af32d64439bd556c185", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 105924, "upload_time": "2020-04-20T09:00:43", "upload_time_iso_8601": "2020-04-20T09:00:43.243279Z", "url": "https://files.pythonhosted.org/packages/ae/a5/b87c92bbf36248cf845a66388cb617a061f9b557e22e4ec2ebc0d1d3c63a/PyBIS-1.14.0.tar.gz", "yanked": false}], "1.14.1": [{"comment_text": "", "digests": {"md5": "b86986f595c5647d8b60001374601cd1", "sha256": "2860683827bfca2543fd3261af9cf4510ad8c48f62a53b78ea4e334f6e445596"}, "downloads": -1, "filename": "PyBIS-1.14.1.tar.gz", "has_sig": false, "md5_digest": "b86986f595c5647d8b60001374601cd1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 105942, "upload_time": "2020-04-20T09:09:12", "upload_time_iso_8601": "2020-04-20T09:09:12.865098Z", "url": "https://files.pythonhosted.org/packages/ac/f7/bb7d4bad733a9096580557128303fde0ec28c21fce3161bb2c58b2dd8621/PyBIS-1.14.1.tar.gz", "yanked": false}], "1.14.2": [{"comment_text": "", "digests": {"md5": "164923992250373ce39026ecc32d64d8", "sha256": "acf0e0dafe31a4e00e5e0d6eecebffe33bd0971e06f5fab278f2be19590fa921"}, "downloads": -1, "filename": "PyBIS-1.14.2.tar.gz", "has_sig": false, "md5_digest": "164923992250373ce39026ecc32d64d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 105998, "upload_time": "2020-04-22T23:58:52", "upload_time_iso_8601": "2020-04-22T23:58:52.307779Z", "url": "https://files.pythonhosted.org/packages/54/73/1578c475f744c837dd500ffe8bfdcb9f0b0aa5f7fcac7ac493ab0115ecbb/PyBIS-1.14.2.tar.gz", "yanked": false}], "1.14.3": [{"comment_text": "", "digests": {"md5": "51cf4106a58b062619994dadf74a23d8", "sha256": "c2a7d5c03519d5ddd37b33561f29388840223cc4fcc9680648993f0f7d589a7d"}, "downloads": -1, "filename": "PyBIS-1.14.3.tar.gz", "has_sig": false, "md5_digest": "51cf4106a58b062619994dadf74a23d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 106015, "upload_time": "2020-04-23T01:01:11", "upload_time_iso_8601": "2020-04-23T01:01:11.723881Z", "url": "https://files.pythonhosted.org/packages/b1/dc/ad61136e0c2acc6dea1170e5fcae156b228dc7f987dd68a737d6eb91ca8f/PyBIS-1.14.3.tar.gz", "yanked": false}], "1.14.4": [{"comment_text": "", "digests": {"md5": "9c39c766badddac984afe7d5c1706f74", "sha256": "96c622cb31a1713e925fb4effce1755948ada01491403b5ce62c85fbe11267dd"}, "downloads": -1, "filename": "PyBIS-1.14.4.tar.gz", "has_sig": false, "md5_digest": "9c39c766badddac984afe7d5c1706f74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 106212, "upload_time": "2020-04-23T10:45:20", "upload_time_iso_8601": "2020-04-23T10:45:20.030170Z", "url": "https://files.pythonhosted.org/packages/83/f3/ba16f82bef567ff2d5e84d4a600f9570ff840ba4fef63c33136b327f6156/PyBIS-1.14.4.tar.gz", "yanked": false}], "1.14.5": [{"comment_text": "", "digests": {"md5": "586fdbb420335e9bb84455347834e149", "sha256": "eb0574c8c1c08cb5a1ac5abafe2708c4a6400f8e4375a4207c4e4fc4c9da6351"}, "downloads": -1, "filename": "PyBIS-1.14.5.tar.gz", "has_sig": false, "md5_digest": "586fdbb420335e9bb84455347834e149", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 106288, "upload_time": "2020-04-28T09:07:55", "upload_time_iso_8601": "2020-04-28T09:07:55.537895Z", "url": "https://files.pythonhosted.org/packages/91/03/358d8b7094206dbaec69d9e6342fa27d9d6f22dbe76748e2f96ac72a128d/PyBIS-1.14.5.tar.gz", "yanked": false}], "1.14.6": [{"comment_text": "", "digests": {"md5": "64fde278d5a86f4f03de4b2fae273046", "sha256": "4b59f57c72b1724f3620e2775ef3b46f38757a6a297091e9979cab371a547444"}, "downloads": -1, "filename": "PyBIS-1.14.6.tar.gz", "has_sig": false, "md5_digest": "64fde278d5a86f4f03de4b2fae273046", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 106294, "upload_time": "2020-04-29T16:09:52", "upload_time_iso_8601": "2020-04-29T16:09:52.489957Z", "url": "https://files.pythonhosted.org/packages/8f/d2/76fe87bab9f7afd077f7eaa8e1296554f253bc64b05759bd7cefdde07ba3/PyBIS-1.14.6.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "bb9a38fb69e44d0c4c892b18aac2492c", "sha256": "55725a28aa4b6ce9955a154f72c503db9fd0b518efeeeb3540f46449c801c1f8"}, "downloads": -1, "filename": "PyBIS-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb9a38fb69e44d0c4c892b18aac2492c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32028, "upload_time": "2017-12-20T10:23:57", "upload_time_iso_8601": "2017-12-20T10:23:57.432069Z", "url": "https://files.pythonhosted.org/packages/24/41/5db8103c36d3089ce6260b601da82b3d308474103765644a0c37e0fc3d99/PyBIS-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6d7c8a9b9a8eba9838c9334d2258abd", "sha256": "24b114cf2002a9ffcb55ae3e68a3d0ec26d2fb009e1b04e557f7bd76c8ba2043"}, "downloads": -1, "filename": "PyBIS-1.2.0.tar.gz", "has_sig": false, "md5_digest": "f6d7c8a9b9a8eba9838c9334d2258abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29413, "upload_time": "2017-08-03T09:57:55", "upload_time_iso_8601": "2017-08-03T09:57:55.471931Z", "url": "https://files.pythonhosted.org/packages/96/cd/37ee45fbaba643fa8d6d9417cd0ce9024b898d188a7e4e98017c12953daa/PyBIS-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "ba85e512aec750d9da4808a3eb60a540", "sha256": "652fb3775e174b3b15d17703fefdcff33e18edab07ee58717bdf6dd02a0db250"}, "downloads": -1, "filename": "PyBIS-1.2.1.tar.gz", "has_sig": false, "md5_digest": "ba85e512aec750d9da4808a3eb60a540", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31829, "upload_time": "2017-08-03T10:23:42", "upload_time_iso_8601": "2017-08-03T10:23:42.803522Z", "url": "https://files.pythonhosted.org/packages/bd/79/3d01e58c908fcb97d712429a9bf7256e89c40089b398b7031473b6e1b130/PyBIS-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "87b1396dd300b49f3b3a862f8226c8df", "sha256": "3d8d25b131f5d2d8bd2dcd8b35b1e2b1621e11904a87921f224569405a346902"}, "downloads": -1, "filename": "PyBIS-1.2.2.tar.gz", "has_sig": false, "md5_digest": "87b1396dd300b49f3b3a862f8226c8df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31865, "upload_time": "2017-08-03T12:00:04", "upload_time_iso_8601": "2017-08-03T12:00:04.143957Z", "url": "https://files.pythonhosted.org/packages/70/9d/fb13970de459083a1ddefcccb9d53cb82280146064c2a504d6b3b35e3ecd/PyBIS-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "ca7ee83be7f9c1bbd40cf40c2e7e1a68", "sha256": "19fb990d8c44bd806ec53c44ee62f25be61dbfad51f21837476c579b00d90336"}, "downloads": -1, "filename": "PyBIS-1.2.3.tar.gz", "has_sig": false, "md5_digest": "ca7ee83be7f9c1bbd40cf40c2e7e1a68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31927, "upload_time": "2017-08-22T09:42:16", "upload_time_iso_8601": "2017-08-22T09:42:16.117856Z", "url": "https://files.pythonhosted.org/packages/cb/75/bb5e4a72bb5cc4c17dc81e5484c42a53ca5d51aaee2f052547fb2cbce33f/PyBIS-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "0c7eafd837dead074ced674b88c7cbbb", "sha256": "30a813184352bff43da4d0e03bfd1a55fe775a46fc15421002e044e4ca6d26f7"}, "downloads": -1, "filename": "PyBIS-1.2.4.tar.gz", "has_sig": false, "md5_digest": "0c7eafd837dead074ced674b88c7cbbb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31946, "upload_time": "2017-08-29T13:35:02", "upload_time_iso_8601": "2017-08-29T13:35:02.910230Z", "url": "https://files.pythonhosted.org/packages/9f/f5/9ff1c7af7f3d0bf8ce2b1b8c1beec8518180bbc1a90633fee12212985965/PyBIS-1.2.4.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "68cf510331a283f26510eef6bb33712c", "sha256": "387657f8e8fc5491f3c60e38a0258ce7ae19ce84a868b93ab79a014d806cf090"}, "downloads": -1, "filename": "PyBIS-1.4.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "68cf510331a283f26510eef6bb33712c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.3", "size": 34938, "upload_time": "2017-12-20T10:23:58", "upload_time_iso_8601": "2017-12-20T10:23:58.692604Z", "url": "https://files.pythonhosted.org/packages/78/c0/8c0d7210d7e7bc4332670ca161000bb919260c08410b6ea66ddfec5f47e9/PyBIS-1.4.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d6b59c58651e2c1dbefa1d911e9ea6c", "sha256": "6c51dc72d01c339e6698c7e3947e0a6dfa0310f1680b0deca1f1eb99d5488d69"}, "downloads": -1, "filename": "PyBIS-1.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0d6b59c58651e2c1dbefa1d911e9ea6c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 34938, "upload_time": "2017-12-20T10:23:59", "upload_time_iso_8601": "2017-12-20T10:23:59.901259Z", "url": "https://files.pythonhosted.org/packages/e1/92/eee39c1149804e3abcddaa1f3da80dcd7f01fed635b5b2f0f1f8476f0240/PyBIS-1.4.2-py3-none-any.whl", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "5fd7da53e3c2d3afa22dbb0904355aac", "sha256": "6d1f0521f70e7c10eb8ecf221e885260a1c0d113b2cbed00bfbc242c117aaebb"}, "downloads": -1, "filename": "PyBIS-1.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "5fd7da53e3c2d3afa22dbb0904355aac", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 34942, "upload_time": "2018-01-29T22:10:43", "upload_time_iso_8601": "2018-01-29T22:10:43.152400Z", "url": "https://files.pythonhosted.org/packages/d7/db/a44e3460aaca9b0eee08449c38c12ea3d441a6c1d74bb890ee7cb9ac712e/PyBIS-1.4.3-py3-none-any.whl", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "b0979a3bec0022aee2aa972d9b47bc07", "sha256": "1a50e0615a0b3ca50691132b8c39ffa412f29b0b2856485e55ef740048d6b207"}, "downloads": -1, "filename": "PyBIS-1.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b0979a3bec0022aee2aa972d9b47bc07", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.3", "size": 41546, "upload_time": "2018-02-16T14:32:20", "upload_time_iso_8601": "2018-02-16T14:32:20.036112Z", "url": "https://files.pythonhosted.org/packages/18/20/bfc572cb284ccb66546519744f9d83903bf22dc0b12bf053b57e46137f88/PyBIS-1.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b05f032376ddcd46d599eab23d7ce023", "sha256": "73f2f6f693ec9b4dd3ed9c607fb960c32fb87f6ba653d8927d8d6b5df545e176"}, "downloads": -1, "filename": "PyBIS-1.5.0.tar.gz", "has_sig": false, "md5_digest": "b05f032376ddcd46d599eab23d7ce023", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 41658, "upload_time": "2018-02-16T14:29:42", "upload_time_iso_8601": "2018-02-16T14:29:42.621055Z", "url": "https://files.pythonhosted.org/packages/8e/b7/b530ce7651a635ba153f6ad9d8231435f5c02910edb4b34aa9fe1c376693/PyBIS-1.5.0.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "99c334f1ab159c4dd20b010212162810", "sha256": "9ae799f0ce2eb8cf2d99f88c9fa88d9d5aa02bdaa250f6519de887f82b34032f"}, "downloads": -1, "filename": "PyBIS-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "99c334f1ab159c4dd20b010212162810", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 54496, "upload_time": "2018-03-23T15:26:43", "upload_time_iso_8601": "2018-03-23T15:26:43.330638Z", "url": "https://files.pythonhosted.org/packages/fa/0d/6d014db8207a79e3d42257c6fa50b6b33066e849a3ce03ba178aa613cc9d/PyBIS-1.6.0-py3-none-any.whl", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "e128ac54c0bb1b20ef9a5142f041973f", "sha256": "0b8baf4cf1568b55c70c6d6abfd43eeb555fc6846fb7c6247a53aadd9e8dd269"}, "downloads": -1, "filename": "PyBIS-1.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e128ac54c0bb1b20ef9a5142f041973f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 54632, "upload_time": "2018-04-10T15:13:33", "upload_time_iso_8601": "2018-04-10T15:13:33.996527Z", "url": "https://files.pythonhosted.org/packages/98/9b/32fb9bd0e16a46aa152259e50634a9ab6a0751444e176d2b56f2931db124/PyBIS-1.6.1-py3-none-any.whl", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "bd928dfa45af87870ec01b512c03e5a0", "sha256": "05158e7cb0c4e6bc5edc9368fc820c6a69cdd42281ec3098dbc65c62c624a211"}, "downloads": -1, "filename": "PyBIS-1.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "bd928dfa45af87870ec01b512c03e5a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 55011, "upload_time": "2018-04-13T14:29:50", "upload_time_iso_8601": "2018-04-13T14:29:50.003399Z", "url": "https://files.pythonhosted.org/packages/63/a1/692379db6ad1517c22d842c41194fb17dbb1479ec047f6d8f623c7fc690d/PyBIS-1.6.2-py3-none-any.whl", "yanked": false}], "1.6.3": [{"comment_text": "", "digests": {"md5": "b95756128d55ce19e1b35f8f4261ac53", "sha256": "ab8d81598c0ac8cc659ee19ebdcfa09647c651fa4366ad66fc9933e3bc8c9798"}, "downloads": -1, "filename": "PyBIS-1.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b95756128d55ce19e1b35f8f4261ac53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 55075, "upload_time": "2018-04-19T09:28:38", "upload_time_iso_8601": "2018-04-19T09:28:38.908648Z", "url": "https://files.pythonhosted.org/packages/f8/c2/ea22cc7fd0094619e6d06a1a60e25b8cc59aa32ee191d89da82d39a19321/PyBIS-1.6.3-py3-none-any.whl", "yanked": false}], "1.6.4": [{"comment_text": "", "digests": {"md5": "ddf9f810e59b6e590b2354646ca461cb", "sha256": "9d2dd983f5bed4b00e5f6651035b3154bd284079f20a19fedb13f7e1a5d80a7d"}, "downloads": -1, "filename": "PyBIS-1.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "ddf9f810e59b6e590b2354646ca461cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.3", "size": 58700, "upload_time": "2018-05-16T15:29:59", "upload_time_iso_8601": "2018-05-16T15:29:59.390011Z", "url": "https://files.pythonhosted.org/packages/b7/74/a93099319b66273919f0c6770a30eba8e9733cf49e7f2a6bcd99558537cf/PyBIS-1.6.4-py3-none-any.whl", "yanked": false}], "1.6.5": [{"comment_text": "", "digests": {"md5": "01a600df46744939638ec79caf99be7e", "sha256": "0f7210951534204486f41926f72c31bcabba0543caa903a85cb8f39d88ba9b9d"}, "downloads": -1, "filename": "PyBIS-1.6.5.tar.gz", "has_sig": false, "md5_digest": "01a600df46744939638ec79caf99be7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 50124, "upload_time": "2018-08-20T15:47:47", "upload_time_iso_8601": "2018-08-20T15:47:47.493555Z", "url": "https://files.pythonhosted.org/packages/38/79/0f358b56a16f1c23c59406d05d7159cbfbdbf330d9059b528f7e146aec56/PyBIS-1.6.5.tar.gz", "yanked": false}], "1.6.6": [{"comment_text": "", "digests": {"md5": "dc710597f36d4a9a366459472a73f59e", "sha256": "28261f2aa31f886a05f53ad4007b9d706c8122b74cf32be9daff230537d496df"}, "downloads": -1, "filename": "PyBIS-1.6.6.tar.gz", "has_sig": false, "md5_digest": "dc710597f36d4a9a366459472a73f59e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51376, "upload_time": "2018-08-23T13:32:21", "upload_time_iso_8601": "2018-08-23T13:32:21.191899Z", "url": "https://files.pythonhosted.org/packages/d5/a2/c30f57820d0fe3f2896e1865acce851d462e5fe2f9569eef9a6414e93add/PyBIS-1.6.6.tar.gz", "yanked": false}], "1.6.7": [{"comment_text": "", "digests": {"md5": "b1105c479bdea1f63e209df3db16dfd0", "sha256": "1b996a5ee61850e16b23d463373aa82b215462bc16c64b149716a25f60c0d643"}, "downloads": -1, "filename": "PyBIS-1.6.7.tar.gz", "has_sig": false, "md5_digest": "b1105c479bdea1f63e209df3db16dfd0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 51653, "upload_time": "2018-08-31T15:56:00", "upload_time_iso_8601": "2018-08-31T15:56:00.617229Z", "url": "https://files.pythonhosted.org/packages/26/af/007b0bc3db4da2bf0e9919e4e03d7fa5567400219d6406b9831a7cb1da14/PyBIS-1.6.7.tar.gz", "yanked": false}], "1.6.8": [{"comment_text": "", "digests": {"md5": "00029b02ec8e95e6af2f38a1a6b396ec", "sha256": "ced6baa6bb2bf047463b24ddc884f9bd892ec85b92d7064fb84b5d76f051253d"}, "downloads": -1, "filename": "PyBIS-1.6.8.tar.gz", "has_sig": false, "md5_digest": "00029b02ec8e95e6af2f38a1a6b396ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 52566, "upload_time": "2018-09-28T00:12:07", "upload_time_iso_8601": "2018-09-28T00:12:07.448989Z", "url": "https://files.pythonhosted.org/packages/1f/d3/aefa519a5a88e44fa94e43d530dbd9512c0c9c50a15e04487036ce70613c/PyBIS-1.6.8.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "64eaa98cee0f6a587e6ece62ee7f5b25", "sha256": "6c74f87a555539c0e123c99aafc2b4c12457e50c4f4f8e11b5497d7c61e84ac8"}, "downloads": -1, "filename": "PyBIS-1.7.0.tar.gz", "has_sig": false, "md5_digest": "64eaa98cee0f6a587e6ece62ee7f5b25", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 53826, "upload_time": "2018-10-03T11:31:21", "upload_time_iso_8601": "2018-10-03T11:31:21.005384Z", "url": "https://files.pythonhosted.org/packages/06/15/07c43e0a09ac44d4ea59485f364731365fdde6bdd9373e8c2e277f7e339b/PyBIS-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "2dc7b7be896830c9980976447db8e041", "sha256": "dfb735ab38bf771349018aac4c38db8cb0165b6bbb1e6945acc4b82075caebdd"}, "downloads": -1, "filename": "PyBIS-1.7.1.tar.gz", "has_sig": false, "md5_digest": "2dc7b7be896830c9980976447db8e041", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 54296, "upload_time": "2018-10-23T11:10:39", "upload_time_iso_8601": "2018-10-23T11:10:39.753570Z", "url": "https://files.pythonhosted.org/packages/0e/9e/2edfbd053275953226c2f088e16800ae9b76626a06a0d1141ba0c03c962d/PyBIS-1.7.1.tar.gz", "yanked": false}], "1.7.3": [{"comment_text": "", "digests": {"md5": "e67051e027c0eb95ca76ca6aef1aed33", "sha256": "c4a09953fc451d09052ead7dbfa97f46a40137d7a459d246ce31d600c4175e8c"}, "downloads": -1, "filename": "PyBIS-1.7.3.tar.gz", "has_sig": false, "md5_digest": "e67051e027c0eb95ca76ca6aef1aed33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 70071, "upload_time": "2018-11-13T15:28:56", "upload_time_iso_8601": "2018-11-13T15:28:56.949836Z", "url": "https://files.pythonhosted.org/packages/e7/53/fedb73e8ceb0d4d70971c9ae9cc489a185a39a9f7708d001857f8751e252/PyBIS-1.7.3.tar.gz", "yanked": false}], "1.7.4": [{"comment_text": "", "digests": {"md5": "880a663fd3bd62d93239aa4b783ff6d7", "sha256": "1248dcac5c66e86173aed34978c58a7bee9ff319f0646184749b2fd685f511c1"}, "downloads": -1, "filename": "PyBIS-1.7.4.tar.gz", "has_sig": false, "md5_digest": "880a663fd3bd62d93239aa4b783ff6d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 70118, "upload_time": "2018-11-15T02:23:31", "upload_time_iso_8601": "2018-11-15T02:23:31.282244Z", "url": "https://files.pythonhosted.org/packages/ac/6f/3639b1de8500a1d1cb6dbdb1a52a41e5fb9542233778e1864f1e4b01b29e/PyBIS-1.7.4.tar.gz", "yanked": false}], "1.7.5": [{"comment_text": "", "digests": {"md5": "0cf67e32b3a77149ca1463b59587a661", "sha256": "93805dad2ea09cc6381d769ce83e01977db63f250a703a76c20319a6c722c654"}, "downloads": -1, "filename": "PyBIS-1.7.5.tar.gz", "has_sig": false, "md5_digest": "0cf67e32b3a77149ca1463b59587a661", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 71408, "upload_time": "2018-12-04T01:19:34", "upload_time_iso_8601": "2018-12-04T01:19:34.515722Z", "url": "https://files.pythonhosted.org/packages/8d/9c/749fdc47e309e293779ed4ec79cf6bc965165f7330162625c71b9b8e05fc/PyBIS-1.7.5.tar.gz", "yanked": false}], "1.7.6": [{"comment_text": "", "digests": {"md5": "52a0f4cc58c0c882056968ae78cdaa38", "sha256": "bd34e282a23f4949da3443d524b5b62f6b1283ab52ff29d0f0e18dd715b42bb6"}, "downloads": -1, "filename": "PyBIS-1.7.6.tar.gz", "has_sig": false, "md5_digest": "52a0f4cc58c0c882056968ae78cdaa38", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 71506, "upload_time": "2018-12-21T14:18:19", "upload_time_iso_8601": "2018-12-21T14:18:19.802193Z", "url": "https://files.pythonhosted.org/packages/e7/e8/0d2fc95792354e3a3aa00a5f0aa3b2feadbf5247c6cfa7f8c81947e393cb/PyBIS-1.7.6.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "861eba766da49b6b5ee302dd00e994d6", "sha256": "38ee4383a3afc63c996dc0dcc05394adffdff9f7d530ba105e4e358bb183d1a3"}, "downloads": -1, "filename": "PyBIS-1.8.0.tar.gz", "has_sig": false, "md5_digest": "861eba766da49b6b5ee302dd00e994d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 72152, "upload_time": "2019-03-04T15:24:19", "upload_time_iso_8601": "2019-03-04T15:24:19.191345Z", "url": "https://files.pythonhosted.org/packages/3f/fa/802fd9f589b552e447838a74c1e4abb74f8d4a7092c1a89bd0fec4bfa431/PyBIS-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "830d0bfe49cfa4aa2395e413b2814eb2", "sha256": "9ba91d3e4542ee83bbd68408dabac0ba43eaf8398fe3a6d97eda7cf852384890"}, "downloads": -1, "filename": "PyBIS-1.8.1.tar.gz", "has_sig": false, "md5_digest": "830d0bfe49cfa4aa2395e413b2814eb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 73011, "upload_time": "2019-03-14T10:02:34", "upload_time_iso_8601": "2019-03-14T10:02:34.169516Z", "url": "https://files.pythonhosted.org/packages/37/b8/0f734bd36c7660b599ecab71124000e586fe83257f411c1394bba7f7a20a/PyBIS-1.8.1.tar.gz", "yanked": false}], "1.8.2": [{"comment_text": "", "digests": {"md5": "bb504c456919f44f1005488a25ad9b0d", "sha256": "1f87c9da50145d311d695490de9a886d27af912ca8a209666b2a0c3f2828fa39"}, "downloads": -1, "filename": "PyBIS-1.8.2.tar.gz", "has_sig": false, "md5_digest": "bb504c456919f44f1005488a25ad9b0d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 73767, "upload_time": "2019-03-18T23:07:47", "upload_time_iso_8601": "2019-03-18T23:07:47.408403Z", "url": "https://files.pythonhosted.org/packages/34/f6/2c3fbaa234788958988c5228101765a18df7fb068be6b2e633be62684c58/PyBIS-1.8.2.tar.gz", "yanked": false}], "1.8.3": [{"comment_text": "", "digests": {"md5": "cbceca0fcceec06ebafc9a270d7701e0", "sha256": "b50f1cf9489b8fed8761ada18e9c70689d235a6274291d5dc358b7f9b4030fbb"}, "downloads": -1, "filename": "PyBIS-1.8.3.tar.gz", "has_sig": false, "md5_digest": "cbceca0fcceec06ebafc9a270d7701e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 74635, "upload_time": "2019-03-22T11:14:55", "upload_time_iso_8601": "2019-03-22T11:14:55.848838Z", "url": "https://files.pythonhosted.org/packages/c0/f6/d2414f61c3dc0d38a4c8ae0b0f53087250577762a0133d4c56273d838188/PyBIS-1.8.3.tar.gz", "yanked": false}], "1.8.4": [{"comment_text": "", "digests": {"md5": "ae4bb68d6cb86908cf0e2796eb909365", "sha256": "129dc95a382583bc36feb0c2623f9e68ad061b8a6ce3eafd0db65d7844ba2933"}, "downloads": -1, "filename": "PyBIS-1.8.4.tar.gz", "has_sig": false, "md5_digest": "ae4bb68d6cb86908cf0e2796eb909365", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 74787, "upload_time": "2019-03-23T21:51:37", "upload_time_iso_8601": "2019-03-23T21:51:37.673517Z", "url": "https://files.pythonhosted.org/packages/c5/1b/820cb833d0ec4e442f1239fca2682bf33af7bc0c5513c30a822078960a9d/PyBIS-1.8.4.tar.gz", "yanked": false}], "1.8.5": [{"comment_text": "", "digests": {"md5": "1a63c1149cec4928c6a1f6260f6a981c", "sha256": "a8972a8f275367ebe44ba54fecfe28e13dfc90d2e67aa4f82cfed8ce0eabfec9"}, "downloads": -1, "filename": "PyBIS-1.8.5.tar.gz", "has_sig": false, "md5_digest": "1a63c1149cec4928c6a1f6260f6a981c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 76486, "upload_time": "2019-06-28T08:31:48", "upload_time_iso_8601": "2019-06-28T08:31:48.171536Z", "url": "https://files.pythonhosted.org/packages/fe/a2/b07b2b4d77dd9420077e5277ab909e6bacd7248103eb07d5d68ef9c6b4f6/PyBIS-1.8.5.tar.gz", "yanked": false}], "1.9.0": [{"comment_text": "", "digests": {"md5": "ec6649002c9ec606aa10e2283fb3d94a", "sha256": "c87092edc27448300f0cc84c27a35f99290c4bb2db8ed5de2d8d5340466570e2"}, "downloads": -1, "filename": "PyBIS-1.9.0.tar.gz", "has_sig": false, "md5_digest": "ec6649002c9ec606aa10e2283fb3d94a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80166, "upload_time": "2019-08-27T10:55:05", "upload_time_iso_8601": "2019-08-27T10:55:05.968284Z", "url": "https://files.pythonhosted.org/packages/58/a7/ef78be9ab6fdf5c0ff824eb9d42266d53aaa4ecb012cabcc444447da8764/PyBIS-1.9.0.tar.gz", "yanked": false}], "1.9.0.dev1": [{"comment_text": "", "digests": {"md5": "0d263457c55532ca8e24e0fec6ca2e90", "sha256": "f9760026d6c5298a97ec9a8a6ee17f9a47f0412943e02efeccd3279d25e87250"}, "downloads": -1, "filename": "PyBIS-1.9.0.dev1.tar.gz", "has_sig": false, "md5_digest": "0d263457c55532ca8e24e0fec6ca2e90", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80061, "upload_time": "2019-08-23T10:01:19", "upload_time_iso_8601": "2019-08-23T10:01:19.995105Z", "url": "https://files.pythonhosted.org/packages/5f/81/61cceb1283b66cdcb60da52d15fba43a1f1c3189afb2385042996b9eb614/PyBIS-1.9.0.dev1.tar.gz", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "ab564045d366e78f9d6857f05ac53f4e", "sha256": "28adc61731f88ef851c45bb2dece0b35db332cf51dec7bf03934e7524a9faa06"}, "downloads": -1, "filename": "PyBIS-1.9.1.tar.gz", "has_sig": false, "md5_digest": "ab564045d366e78f9d6857f05ac53f4e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80168, "upload_time": "2019-09-03T15:17:31", "upload_time_iso_8601": "2019-09-03T15:17:31.278681Z", "url": "https://files.pythonhosted.org/packages/11/0d/98f869c22e12a3d36122effba818dfc6178fd7f15ac6d40195f64a904db3/PyBIS-1.9.1.tar.gz", "yanked": false}], "1.9.2": [{"comment_text": "", "digests": {"md5": "2cd4e21812f1829c5e04baa18579c694", "sha256": "a837478c540fd51600e0dbc2b3c40040c7ea205dc2e454fc06c5bd24989d9288"}, "downloads": -1, "filename": "PyBIS-1.9.2.tar.gz", "has_sig": false, "md5_digest": "2cd4e21812f1829c5e04baa18579c694", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80480, "upload_time": "2019-09-12T09:53:23", "upload_time_iso_8601": "2019-09-12T09:53:23.738781Z", "url": "https://files.pythonhosted.org/packages/a9/06/73abe989d6cc059b28388aac5ef479b18842bfe3be8c7f3436d998936f76/PyBIS-1.9.2.tar.gz", "yanked": false}], "1.9.3": [{"comment_text": "", "digests": {"md5": "bd003c62a5244e0c3d169f8ee3c6abc4", "sha256": "1dbc57c2eadf833a6bb5c301b0c50ea2d037f9a581f05ad26b5244e749cb8673"}, "downloads": -1, "filename": "PyBIS-1.9.3.tar.gz", "has_sig": false, "md5_digest": "bd003c62a5244e0c3d169f8ee3c6abc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80496, "upload_time": "2019-09-13T22:38:33", "upload_time_iso_8601": "2019-09-13T22:38:33.945432Z", "url": "https://files.pythonhosted.org/packages/23/21/9b9b37234c9d022fdb00d9e771842445fd1069371528f3ca8203c47225da/PyBIS-1.9.3.tar.gz", "yanked": false}], "1.9.4": [{"comment_text": "", "digests": {"md5": "c7c738a1db63ee17224c42550e03a7fe", "sha256": "b9a7092f0845915caf8042003a4561388135197e8c643198432df94d291cfdc0"}, "downloads": -1, "filename": "PyBIS-1.9.4.tar.gz", "has_sig": false, "md5_digest": "c7c738a1db63ee17224c42550e03a7fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80531, "upload_time": "2019-09-17T10:15:03", "upload_time_iso_8601": "2019-09-17T10:15:03.034776Z", "url": "https://files.pythonhosted.org/packages/6c/4e/b232d58e941b71d32eb04c6dddabeb03b995f272ed64421f38e9d7307bd2/PyBIS-1.9.4.tar.gz", "yanked": false}], "1.9.5": [{"comment_text": "", "digests": {"md5": "5b16268a160144dd464f4e682b4706df", "sha256": "bd69155d499ccb744e7b86ff4211cbc78afdce0cb2b4c5ea684d348dbfc36c03"}, "downloads": -1, "filename": "PyBIS-1.9.5.tar.gz", "has_sig": false, "md5_digest": "5b16268a160144dd464f4e682b4706df", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80572, "upload_time": "2019-09-17T10:58:13", "upload_time_iso_8601": "2019-09-17T10:58:13.017867Z", "url": "https://files.pythonhosted.org/packages/47/e9/04ebe3a00ff03f206a369258116ea868cfd0bf6b70b2bd9756ce428aeb58/PyBIS-1.9.5.tar.gz", "yanked": false}], "1.9.6": [{"comment_text": "", "digests": {"md5": "2fcf637ca630ec6ae09e992ee6019f6a", "sha256": "2f017845f1c292e7ac3ba8948d70992841f03adc13fc4a27e4c44607f555cee0"}, "downloads": -1, "filename": "PyBIS-1.9.6.tar.gz", "has_sig": false, "md5_digest": "2fcf637ca630ec6ae09e992ee6019f6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80702, "upload_time": "2019-10-01T14:14:53", "upload_time_iso_8601": "2019-10-01T14:14:53.353763Z", "url": "https://files.pythonhosted.org/packages/29/59/45ddbdecd12efdb60011f8fbb0d867db7ca402f8978cb29e221ebfcd9156/PyBIS-1.9.6.tar.gz", "yanked": false}], "1.9.6.dev1": [{"comment_text": "", "digests": {"md5": "484d843963db783cbdf34a6b29511d1f", "sha256": "3d24b49007c0f63ca9503802f8b8fdefdd47ca80dcf34a005ae80453e58f3705"}, "downloads": -1, "filename": "PyBIS-1.9.6.dev1.tar.gz", "has_sig": false, "md5_digest": "484d843963db783cbdf34a6b29511d1f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 80703, "upload_time": "2019-10-01T12:37:04", "upload_time_iso_8601": "2019-10-01T12:37:04.642782Z", "url": "https://files.pythonhosted.org/packages/74/c1/2103eb06729dae4842da7036ccbcd4661246ea1a0084be72d99b46e1fea8/PyBIS-1.9.6.dev1.tar.gz", "yanked": false}], "1.9.7": [{"comment_text": "", "digests": {"md5": "db81f177eae7c18ed2ff1e2b2881d288", "sha256": "4bb44f02e8631ab9a8ab1f5bbe8b5722687adc0f1ba7060bbf7898c8faecb899"}, "downloads": -1, "filename": "PyBIS-1.9.7.tar.gz", "has_sig": false, "md5_digest": "db81f177eae7c18ed2ff1e2b2881d288", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 81207, "upload_time": "2019-10-22T22:37:54", "upload_time_iso_8601": "2019-10-22T22:37:54.640729Z", "url": "https://files.pythonhosted.org/packages/0b/44/fe0231003ffc36a7b01dff7dcb46629cccf554473e121900d1388e6c6260/PyBIS-1.9.7.tar.gz", "yanked": false}], "1.9.8": [{"comment_text": "", "digests": {"md5": "4abab708aa529fa3bbde87e083777dff", "sha256": "b8780f6cdf76a8995cb4f866124f5ecaa03ab205e9fcd763975ed26442275570"}, "downloads": -1, "filename": "PyBIS-1.9.8.tar.gz", "has_sig": false, "md5_digest": "4abab708aa529fa3bbde87e083777dff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.3", "size": 85570, "upload_time": "2019-10-24T09:10:02", "upload_time_iso_8601": "2019-10-24T09:10:02.879303Z", "url": "https://files.pythonhosted.org/packages/de/6a/e2fbd779a6f64422fe1720ef3dd721543ce07d5e1ea97c26bc9ff21ac882/PyBIS-1.9.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "64fde278d5a86f4f03de4b2fae273046", "sha256": "4b59f57c72b1724f3620e2775ef3b46f38757a6a297091e9979cab371a547444"}, "downloads": -1, "filename": "PyBIS-1.14.6.tar.gz", "has_sig": false, "md5_digest": "64fde278d5a86f4f03de4b2fae273046", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 106294, "upload_time": "2020-04-29T16:09:52", "upload_time_iso_8601": "2020-04-29T16:09:52.489957Z", "url": "https://files.pythonhosted.org/packages/8f/d2/76fe87bab9f7afd077f7eaa8e1296554f253bc64b05759bd7cefdde07ba3/PyBIS-1.14.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:12 2020"}