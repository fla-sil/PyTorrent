{"info": {"author": "liuyang", "author_email": "liuyang@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: Unix", "Programming Language :: Python :: 3", "Topic :: Utilities"], "description": "[![Documentation Status](https://readthedocs.org/projects/python-keycloak/badge/?version=latest)](http://python-keycloak.readthedocs.io/en/latest/?badge=latest)\n\nFork from: https://bitbucket.org/agriness/python-keycloak\n\nPython Keycloak\n====================\n\nFor review- see https://bitbucket.org/agriness/python-keycloak\n\n**python-keycloak** is a Python package providing access to the Keycloak API.\n\n## Installation\n\n### Via Pypi Package:\n\n``` $ pip install keycloak-client ```\n\n### Manually\n\n``` $ python setup.py install ```\n\n## Dependencies\n\npython-keycloak depends on:\n\n* Python 3\n* [requests](http://docs.python-requests.org/en/master/)\n* [python-jose](http://python-jose.readthedocs.io/en/latest/)\n\n### Tests Dependencies\n\n* unittest\n* [httmock](https://github.com/patrys/httmock)\n\n## Bug reports\n\nPlease report bugs and feature requests at\nhttps://bitbucket.org/agriness/python-keycloak/issues\n\n## Documentation\n\nThe documentation for python-keycloak is available on [readthedocs](http://python-keycloak.readthedocs.io).\n\n## Contributors\n\n* [Agriness Team](http://www.agriness.com/pt/)\n* [Marcos Pereira](marcospereira.mpj@gmail.com)\n* [Martin Devlin](https://bitbucket.org/devlinmpearson/) \n* [Shon T. Urbas](https://bitbucket.org/surbas/)\n* [Markus Spanier](https://bitbucket.org/spanierm/)\n* [Remco Kranenburg](https://bitbucket.org/Remco47/)\n* [Armin](https://bitbucket.org/arminfelder/)\n* [njordr](https://bitbucket.org/njordr/)\n* [Josha Inglis](https://bitbucket.org/joshainglis/)\n* [Alex](https://bitbucket.org/alex_zel/)\n* [Ewan Jone](https://bitbucket.org/kisamoto/)\n\n## Usage\n\n```python\nfrom keycloak import KeycloakOpenID\n\n# Configure client\nkeycloak_openid = KeycloakOpenID(server_url=\"http://localhost:8080/auth/\",\n                    client_id=\"example_client\",\n                    realm_name=\"example_realm\",\n                    client_secret_key=\"secret\")\n\n# Get WellKnow\nconfig_well_know = keycloak_openid.well_know()\n\n# Get Token\ntoken = keycloak_openid.token(\"user\", \"password\")\ntoken = keycloak_openid.token(\"user\", \"password\", totp=\"012345\")\n\n# Get Userinfo\nuserinfo = keycloak_openid.userinfo(token['access_token'])\n\n# Refresh token\ntoken = keycloak_openid.refresh_token(token['refresh_token'])\n\n# Logout\nkeycloak_openid.logout(token['refresh_token'])\n\n# Get Certs\ncerts = keycloak_openid.certs()\n\n# Get RPT (Entitlement)\ntoken = keycloak_openid.token(\"user\", \"password\")\nrpt = keycloak_openid.entitlement(token['access_token'], \"resource_id\")\n\n# Instropect RPT\ntoken_rpt_info = keycloak_openid.introspect(keycloak_openid.introspect(token['access_token'], rpt=rpt['rpt'],\n                                     token_type_hint=\"requesting_party_token\"))\n\n# Introspect Token\ntoken_info = keycloak_openid.introspect(token['access_token']))\n\n# Decode Token\nKEYCLOAK_PUBLIC_KEY = \"secret\"\noptions = {\"verify_signature\": True, \"verify_aud\": True, \"exp\": True}\ntoken_info = keycloak_openid.decode_token(token['access_token'], key=KEYCLOAK_PUBLIC_KEY, options=options)\n\n# Get permissions by token\ntoken = keycloak_openid.token(\"user\", \"password\")\nkeycloak_openid.load_authorization_config(\"example-authz-config.json\")\npolicies = keycloak_openid.get_policies(token['access_token'], method_token_info='decode', key=KEYCLOAK_PUBLIC_KEY)\npermissions = keycloak_openid.get_permissions(token['access_token'], method_token_info='introspect')\n\n# KEYCLOAK ADMIN\n\nfrom keycloak import KeycloakAdmin\n\nkeycloak_admin = KeycloakAdmin(server_url=\"http://localhost:8080/auth/\",\n                               username='example-admin',\n                               password='secret',\n                               realm_name=\"example_realm\",\n                               verify=True)\n        \n# Add user                       \nnew_user = keycloak_admin.create_user({\"email\": \"example@example.com\",\n                    \"username\": \"example@example.com\",\n                    \"enabled\": True,\n                    \"firstName\": \"Example\",\n                    \"lastName\": \"Example\"})    \n                                        \n# Add user and set password                    \nnew_user = keycloak_admin.create_user({\"email\": \"example@example.com\",\n                    \"username\": \"example@example.com\",\n                    \"enabled\": True,\n                    \"firstName\": \"Example\",\n                    \"lastName\": \"Example\",\n                    \"credentials\": [{\"value\": \"secret\",\"type\": \"password\",}]})                        \n\n# User counter\ncount_users = keycloak_admin.users_count()\n\n# Get users Returns a list of users, filtered according to query parameters\nusers = keycloak_admin.get_users({})\n\n# Get user ID from name\nuser-id-keycloak = keycloak_admin.get_user_id(\"example@example.com\")\n\n# Get User\nuser = keycloak_admin.get_user(\"user-id-keycloak\")\n\n# Update User\nresponse = keycloak_admin.update_user(user_id=\"user-id-keycloak\", \n                                      payload={'firstName': 'Example Update'})\n\n# Update User Password\nresponse = set_user_password(user_id=\"user-id-keycloak\", password=\"secret\", temporary=True)\n                                      \n# Delete User\nresponse = keycloak_admin.delete_user(user_id=\"user-id-keycloak\")\n\n# Get consents granted by the user\nconsents = keycloak_admin.consents_user(user_id=\"user-id-keycloak\")\n\n# Send User Action\nresponse = keycloak_admin.send_update_account(user_id=\"user-id-keycloak\", \n                                              payload=json.dumps(['UPDATE_PASSWORD']))\n\n# Send Verify Email\nresponse = keycloak_admin.send_verify_email(user_id=\"user-id-keycloak\")\n\n# Get sessions associated with the user\nsessions = keycloak_admin.get_sessions(user_id=\"user-id-keycloak\")\n\n# Get themes, social providers, auth providers, and event listeners available on this server\nserver_info = keycloak_admin.get_server_info()\n\n# Get clients belonging to the realm Returns a list of clients belonging to the realm\nclients = keycloak_admin.get_clients()\n\n# Get client - id (not client-id) from client by name\nclient_id=keycloak_admin.get_client_id(\"my-client\")\n\n# Get representation of the client - id of client (not client-id)\nclient = keycloak_admin.get_client(client_id=\"client_id\")\n\n# Get all roles for the realm or client\nrealm_roles = keycloak_admin.get_realm_roles()\n\n# Get all roles for the client\nclient_roles = keycloak_admin.get_client_roles(client_id=\"client_id\")\n\n# Get client role\nrole = keycloak_admin.get_client_role(client_id=\"client_id\", role_name=\"role_name\")\n\n# Warning: Deprecated\n# Get client role id from name\nrole_id = keycloak_admin.get_client_role_id(client_id=\"client_id\", role_name=\"test\")\n\n# Create client role\nkeycloak_admin.create_client_role(client_id='client_id', {'name': 'roleName', 'clientRole': True})\n\n# Assign client role to user. Note that BOTH role_name and role_id appear to be required.\nkeycloak_admin.assign_client_role(client_id=\"client_id\", user_id=\"user_id\", role_id=\"role_id\", role_name=\"test\")\n\n# Retrieve client roles of a user.\nkeycloak_admin.get_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# Retrieve available client roles of a user.\nkeycloak_admin.get_available_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# Retrieve composite client roles of a user.\nkeycloak_admin.get_composite_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")\n\n# Delete client roles of a user.\nkeycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles={\"id\": \"role-id\"})\nkeycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles=[{\"id\": \"role-id_1\"}, {\"id\": \"role-id_2\"}])\n\n# Create new group\ngroup = keycloak_admin.create_group(name=\"Example Group\")\n\n# Get all groups\ngroups = keycloak_admin.get_groups()\n\n# Get group \ngroup = keycloak_admin.get_group(group_id='group_id')\n\n# Get group by name\ngroup = keycloak_admin.get_group_by_path(path='/group/subgroup', search_in_subgroups=True)\n\n# Function to trigger user sync from provider\nsync_users(storage_id=\"storage_di\", action=\"action\")\n\n# Get client role id from name\nrole_id = keycloak_admin.get_client_role_id(client_id=client_id, role_name=\"test\")\n\n# Get all roles for the realm or client\nrealm_roles = keycloak_admin.get_roles()\n\n# Assign client role to user. Note that BOTH role_name and role_id appear to be required.\nkeycloak_admin.assign_client_role(client_id=client_id, user_id=user_id, role_id=role_id, role_name=\"test\")\n\n# Get all ID Providers\nidps = keycloak_admin.get_idps()\n\n```\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ly798/python-keycloak.git", "keywords": "keycloak openid", "license": "The MIT License", "maintainer": "", "maintainer_email": "", "name": "keycloak-client", "package_url": "https://pypi.org/project/keycloak-client/", "platform": "", "project_url": "https://pypi.org/project/keycloak-client/", "project_urls": {"Homepage": "https://github.com/ly798/python-keycloak.git"}, "release_url": "https://pypi.org/project/keycloak-client/0.15.4/", "requires_dist": null, "requires_python": "", "summary": "keycloak-client(fork from python-keycloak) is a Python package providing access to the Keycloak API.", "version": "0.15.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            [![Documentation Status](https://readthedocs.org/projects/python-keycloak/badge/?version=latest)](http://python-keycloak.readthedocs.io/en/latest/?badge=latest)<br><br>Fork from: https://bitbucket.org/agriness/python-keycloak<br><br>Python Keycloak<br>====================<br><br>For review- see https://bitbucket.org/agriness/python-keycloak<br><br>**python-keycloak** is a Python package providing access to the Keycloak API.<br><br>## Installation<br><br>### Via Pypi Package:<br><br>``` $ pip install keycloak-client ```<br><br>### Manually<br><br>``` $ python setup.py install ```<br><br>## Dependencies<br><br>python-keycloak depends on:<br><br>* Python 3<br>* [requests](http://docs.python-requests.org/en/master/)<br>* [python-jose](http://python-jose.readthedocs.io/en/latest/)<br><br>### Tests Dependencies<br><br>* unittest<br>* [httmock](https://github.com/patrys/httmock)<br><br>## Bug reports<br><br>Please report bugs and feature requests at<br>https://bitbucket.org/agriness/python-keycloak/issues<br><br>## Documentation<br><br>The documentation for python-keycloak is available on [readthedocs](http://python-keycloak.readthedocs.io).<br><br>## Contributors<br><br>* [Agriness Team](http://www.agriness.com/pt/)<br>* [Marcos Pereira](marcospereira.mpj@gmail.com)<br>* [Martin Devlin](https://bitbucket.org/devlinmpearson/) <br>* [Shon T. Urbas](https://bitbucket.org/surbas/)<br>* [Markus Spanier](https://bitbucket.org/spanierm/)<br>* [Remco Kranenburg](https://bitbucket.org/Remco47/)<br>* [Armin](https://bitbucket.org/arminfelder/)<br>* [njordr](https://bitbucket.org/njordr/)<br>* [Josha Inglis](https://bitbucket.org/joshainglis/)<br>* [Alex](https://bitbucket.org/alex_zel/)<br>* [Ewan Jone](https://bitbucket.org/kisamoto/)<br><br>## Usage<br><br>```python<br>from keycloak import KeycloakOpenID<br><br># Configure client<br>keycloak_openid = KeycloakOpenID(server_url=\"http://localhost:8080/auth/\",<br>                    client_id=\"example_client\",<br>                    realm_name=\"example_realm\",<br>                    client_secret_key=\"secret\")<br><br># Get WellKnow<br>config_well_know = keycloak_openid.well_know()<br><br># Get Token<br>token = keycloak_openid.token(\"user\", \"password\")<br>token = keycloak_openid.token(\"user\", \"password\", totp=\"012345\")<br><br># Get Userinfo<br>userinfo = keycloak_openid.userinfo(token['access_token'])<br><br># Refresh token<br>token = keycloak_openid.refresh_token(token['refresh_token'])<br><br># Logout<br>keycloak_openid.logout(token['refresh_token'])<br><br># Get Certs<br>certs = keycloak_openid.certs()<br><br># Get RPT (Entitlement)<br>token = keycloak_openid.token(\"user\", \"password\")<br>rpt = keycloak_openid.entitlement(token['access_token'], \"resource_id\")<br><br># Instropect RPT<br>token_rpt_info = keycloak_openid.introspect(keycloak_openid.introspect(token['access_token'], rpt=rpt['rpt'],<br>                                     token_type_hint=\"requesting_party_token\"))<br><br># Introspect Token<br>token_info = keycloak_openid.introspect(token['access_token']))<br><br># Decode Token<br>KEYCLOAK_PUBLIC_KEY = \"secret\"<br>options = {\"verify_signature\": True, \"verify_aud\": True, \"exp\": True}<br>token_info = keycloak_openid.decode_token(token['access_token'], key=KEYCLOAK_PUBLIC_KEY, options=options)<br><br># Get permissions by token<br>token = keycloak_openid.token(\"user\", \"password\")<br>keycloak_openid.load_authorization_config(\"example-authz-config.json\")<br>policies = keycloak_openid.get_policies(token['access_token'], method_token_info='decode', key=KEYCLOAK_PUBLIC_KEY)<br>permissions = keycloak_openid.get_permissions(token['access_token'], method_token_info='introspect')<br><br># KEYCLOAK ADMIN<br><br>from keycloak import KeycloakAdmin<br><br>keycloak_admin = KeycloakAdmin(server_url=\"http://localhost:8080/auth/\",<br>                               username='example-admin',<br>                               password='secret',<br>                               realm_name=\"example_realm\",<br>                               verify=True)<br>        <br># Add user                       <br>new_user = keycloak_admin.create_user({\"email\": \"example@example.com\",<br>                    \"username\": \"example@example.com\",<br>                    \"enabled\": True,<br>                    \"firstName\": \"Example\",<br>                    \"lastName\": \"Example\"})    <br>                                        <br># Add user and set password                    <br>new_user = keycloak_admin.create_user({\"email\": \"example@example.com\",<br>                    \"username\": \"example@example.com\",<br>                    \"enabled\": True,<br>                    \"firstName\": \"Example\",<br>                    \"lastName\": \"Example\",<br>                    \"credentials\": [{\"value\": \"secret\",\"type\": \"password\",}]})                        <br><br># User counter<br>count_users = keycloak_admin.users_count()<br><br># Get users Returns a list of users, filtered according to query parameters<br>users = keycloak_admin.get_users({})<br><br># Get user ID from name<br>user-id-keycloak = keycloak_admin.get_user_id(\"example@example.com\")<br><br># Get User<br>user = keycloak_admin.get_user(\"user-id-keycloak\")<br><br># Update User<br>response = keycloak_admin.update_user(user_id=\"user-id-keycloak\", <br>                                      payload={'firstName': 'Example Update'})<br><br># Update User Password<br>response = set_user_password(user_id=\"user-id-keycloak\", password=\"secret\", temporary=True)<br>                                      <br># Delete User<br>response = keycloak_admin.delete_user(user_id=\"user-id-keycloak\")<br><br># Get consents granted by the user<br>consents = keycloak_admin.consents_user(user_id=\"user-id-keycloak\")<br><br># Send User Action<br>response = keycloak_admin.send_update_account(user_id=\"user-id-keycloak\", <br>                                              payload=json.dumps(['UPDATE_PASSWORD']))<br><br># Send Verify Email<br>response = keycloak_admin.send_verify_email(user_id=\"user-id-keycloak\")<br><br># Get sessions associated with the user<br>sessions = keycloak_admin.get_sessions(user_id=\"user-id-keycloak\")<br><br># Get themes, social providers, auth providers, and event listeners available on this server<br>server_info = keycloak_admin.get_server_info()<br><br># Get clients belonging to the realm Returns a list of clients belonging to the realm<br>clients = keycloak_admin.get_clients()<br><br># Get client - id (not client-id) from client by name<br>client_id=keycloak_admin.get_client_id(\"my-client\")<br><br># Get representation of the client - id of client (not client-id)<br>client = keycloak_admin.get_client(client_id=\"client_id\")<br><br># Get all roles for the realm or client<br>realm_roles = keycloak_admin.get_realm_roles()<br><br># Get all roles for the client<br>client_roles = keycloak_admin.get_client_roles(client_id=\"client_id\")<br><br># Get client role<br>role = keycloak_admin.get_client_role(client_id=\"client_id\", role_name=\"role_name\")<br><br># Warning: Deprecated<br># Get client role id from name<br>role_id = keycloak_admin.get_client_role_id(client_id=\"client_id\", role_name=\"test\")<br><br># Create client role<br>keycloak_admin.create_client_role(client_id='client_id', {'name': 'roleName', 'clientRole': True})<br><br># Assign client role to user. Note that BOTH role_name and role_id appear to be required.<br>keycloak_admin.assign_client_role(client_id=\"client_id\", user_id=\"user_id\", role_id=\"role_id\", role_name=\"test\")<br><br># Retrieve client roles of a user.<br>keycloak_admin.get_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")<br><br># Retrieve available client roles of a user.<br>keycloak_admin.get_available_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")<br><br># Retrieve composite client roles of a user.<br>keycloak_admin.get_composite_client_roles_of_user(user_id=\"user_id\", client_id=\"client_id\")<br><br># Delete client roles of a user.<br>keycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles={\"id\": \"role-id\"})<br>keycloak_admin.delete_client_roles_of_user(client_id=\"client_id\", user_id=\"user_id\", roles=[{\"id\": \"role-id_1\"}, {\"id\": \"role-id_2\"}])<br><br># Create new group<br>group = keycloak_admin.create_group(name=\"Example Group\")<br><br># Get all groups<br>groups = keycloak_admin.get_groups()<br><br># Get group <br>group = keycloak_admin.get_group(group_id='group_id')<br><br># Get group by name<br>group = keycloak_admin.get_group_by_path(path='/group/subgroup', search_in_subgroups=True)<br><br># Function to trigger user sync from provider<br>sync_users(storage_id=\"storage_di\", action=\"action\")<br><br># Get client role id from name<br>role_id = keycloak_admin.get_client_role_id(client_id=client_id, role_name=\"test\")<br><br># Get all roles for the realm or client<br>realm_roles = keycloak_admin.get_roles()<br><br># Assign client role to user. Note that BOTH role_name and role_id appear to be required.<br>keycloak_admin.assign_client_role(client_id=client_id, user_id=user_id, role_id=role_id, role_name=\"test\")<br><br># Get all ID Providers<br>idps = keycloak_admin.get_idps()<br><br>```<br>\n          </div>"}, "last_serial": 4692536, "releases": {"0.15.2": [{"comment_text": "", "digests": {"md5": "a2c014bd2181fba53b66a9968d109a00", "sha256": "e264ebe52369ffe15d04ae8b1c9c38deaec6376b064081e4645de430f4136a62"}, "downloads": -1, "filename": "keycloak-client-0.15.2.tar.gz", "has_sig": false, "md5_digest": "a2c014bd2181fba53b66a9968d109a00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17662, "upload_time": "2019-01-11T10:25:49", "upload_time_iso_8601": "2019-01-11T10:25:49.697457Z", "url": "https://files.pythonhosted.org/packages/54/59/f6a19333f4f16a1431ee7c6ec3f025f316160d45b75ed5e1633ef6a7e03b/keycloak-client-0.15.2.tar.gz", "yanked": false}], "0.15.3": [{"comment_text": "", "digests": {"md5": "48d06ff6f984be69775e3c94de6a3a37", "sha256": "e9d63da3371b4fbcf16766dcd24b3ae8bcc93160bdf4d9e1909e5815f4bda5be"}, "downloads": -1, "filename": "keycloak-client-0.15.3.tar.gz", "has_sig": false, "md5_digest": "48d06ff6f984be69775e3c94de6a3a37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19348, "upload_time": "2019-01-14T01:21:13", "upload_time_iso_8601": "2019-01-14T01:21:13.560218Z", "url": "https://files.pythonhosted.org/packages/8b/56/9bbb44b73cc5c0a891e1520e5ec38e08c725df143187592d5312c82bc013/keycloak-client-0.15.3.tar.gz", "yanked": false}], "0.15.4": [{"comment_text": "", "digests": {"md5": "2bdc9b327576c3a03ff1a00d174e0306", "sha256": "09e6db0370b314264b51da4c536d6df7514d6ad722eaa4fd2df3397f37dbeeb2"}, "downloads": -1, "filename": "keycloak-client-0.15.4.tar.gz", "has_sig": false, "md5_digest": "2bdc9b327576c3a03ff1a00d174e0306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19566, "upload_time": "2019-01-14T03:14:45", "upload_time_iso_8601": "2019-01-14T03:14:45.066946Z", "url": "https://files.pythonhosted.org/packages/9b/2c/43b4c97b89c5f7b31a904e6080f27039b663504b727864b5d634727be46b/keycloak-client-0.15.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2bdc9b327576c3a03ff1a00d174e0306", "sha256": "09e6db0370b314264b51da4c536d6df7514d6ad722eaa4fd2df3397f37dbeeb2"}, "downloads": -1, "filename": "keycloak-client-0.15.4.tar.gz", "has_sig": false, "md5_digest": "2bdc9b327576c3a03ff1a00d174e0306", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19566, "upload_time": "2019-01-14T03:14:45", "upload_time_iso_8601": "2019-01-14T03:14:45.066946Z", "url": "https://files.pythonhosted.org/packages/9b/2c/43b4c97b89c5f7b31a904e6080f27039b663504b727864b5d634727be46b/keycloak-client-0.15.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:59 2020"}