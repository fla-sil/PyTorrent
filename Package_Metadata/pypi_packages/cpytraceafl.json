{"info": {"author": "Robert Scott", "author_email": "code@humanleg.org.uk", "bugtrack_url": null, "classifiers": [], "description": "# cpytraceafl\n\nCPython bytecode instrumentation and forkserver tools for fuzzing python code using AFL.\n\nThe tools in this repository enable coverage-guided fuzzing of pure python and mixed python/c\ncode using [American Fuzzy Lop](https://github.com/google/AFL) (even better,\n[AFL++](https://github.com/vanhauser-thc/AFLplusplus)).\n\nThere are three main parts to this:\n\n - A bytecode rewriter using a technique inspired by inspired by Ned Batchelder's \"wicked hack\"\n   detailed at https://nedbatchelder.com/blog/200804/wicked_hack_python_bytecode_tracing.html.\n   In this case, the rewriter identifies \"basic blocks\" in the python bytecode and abuses the\n   `code` object's `lnotab` (line-number table) to mark each basic block as a new \"line\".\n   These new \"lines\" are what trigger CPython's line-level trace hooks. The result of this being\n   that we can get our trace hook executed on every new basic block.\n - A minimal & fast tracehook written in C, tallying visited locations to sysv shared memory.\n - A basic forkserver implementation.\n\nPreparing code for fuzzing involves a couple of steps. The first thing that should happen in\nthe python process is a call to `install_rewriter()`. It's important that this is done very\nearly as any modules that are imported before this will not be properly instrumented.\n\n```python\nfrom cpytraceafl.rewriter import install_rewriter\n\ninstall_rewriter()\n```\n\n`install_rewriter()` can optionally be provided with a `selector` controlling which code objects\nare instrumented and to what degree.\n\nFollowing this, modules can be imported as normal and will be instrumented by the monkeypatched\n`compile` functions. It's usually a good idea to initialize the test environment next, \nperforming as many setup procedures as possible before the input file is read. This may\ninclude doing an initial run of the function under test to ensure any internal imports or caches\nare set up. This is because we want to minimize work that has to be done post-fork - any work\ndone now only has to be done once,\n\nAfter calling\n\n```python\nfrom cpytraceafl import fuzz_from_here\n\nfuzz_from_here()\n```\n\nthe `fork()` will have been made and tracing started. You now simply read your input file and\ncall your function under test.\n\nExamples for fuzzing some common packages are provided in [examples/](./examples/).\n\nAs for hooking this script up to AFL, I tend to use the included\n[dummy-afl-qemu-trace](./dummy-afl-qemu-trace) shim script to fool AFL's QEmu mode into\ncommunicating directly with the python process.\n\n## Fuzzing mixed python/c code\n\nAs of version 0.4.0, `cpytraceafl` can gather trace information from C extension modules that\nhave been compiled with AFL instrumentation (e.g. using `llvm_mode`). This means that it can\nbe used to seamlessly fuzz projects which have a mix of python and C \"speedups\". This is\nimportant not only because a lot of python format-parsing packages use this approach, but\nbecause issues revealed in native code are far more likely to have security implications.\n\nIncluding instrumented native code requires a little more care when preparing a target for\nfuzzing. For instance, it's important to ensure the `cpytraceafl.tracehook` module has been\nimported and it has had its `set_map_start(...)` function provided with a valid memory\narea *before* any instrumented extension modules are loaded. This is because simply loading an\ninstrumented native module will cause it to attempt to log its execution trace somewhere.\n\nThe example [pillow_pcx_example.py](./examples/pillow_pcx_example.py) demonstrates a fuzzing\ntarget taking the necessary precautions into account.\n\nIt's possible that you're _only_ interested in tracing the native code, using `cpytraceafl`\njust as a driver, in which case you can omit the early `install_rewriter()` call and all\nthe weirdness involved with that.\n\n## Q & A\n\n### Is there any point in fuzzing python? Isn't it too slow?\n\nWell, yes and no. My experience has been that fuzzing python code is simply \"a bit different\"\nfrom fuzzing native code - you tend to be looking for different things. In terms of raw speed,\nfuzzing python is certainly not fast, but iteration rates I tend to work with aren't completely\ndissimilar to what I'm used to getting with AFL's Qemu mode (of course, no two fuzzing targets\nare really directly comparable).\n\nBecause of the memory-safe nature of pure python code, it's also more uncommon for issues\nuncovered through fuzzing to be security issues - logical flaws in parsing tend to lead to\nunexpected/unhandled exceptions. So it's still a rather useful tool in simply looking for bugs.\nIt can be used, for example, to generate a corpus of example inputs for your test suite which\nexercise a large amount of the code.\n\n### Does basic block analysis make any sense for python code?\n\nFrom a rigorous academic stance, and for some uses, possibly not - you've got to keep in mind\nthat half the bytecode instructions could result in calls out to more arbitrary python or\n(uninstrumented) native code that could have arbitrary side effects. But for our needs it works\nwell enough (recall that AFL coverage analysis is robust to random instrumentation\nsites being omitted through `AFL_INST_RATIO` or `AFL_INST_LIBS`).\n\n### Doesn't abusing `lnotab` break python's debugging mechanisms?\n\nAbsolutely it does. Don't use instrumented programs to debug problematic cases - use it to\ngenerate problematic inputs. Analyze them with instrumentation turned off.\n\n### I'm getting `undefined symbol: __afl_area_ptr`\n\nLooks like you're trying to import an (instrumented) native extension module before the\n`cpytraceafl.tracehook` module has been loaded (which is what provides that symbol).\n\n### I'm getting Segmentation Faults after importing an instrumented native module\n\nYou probably also need to provide `cpytraceafl.tracehook.set_map_start(...)` with a valid\nwriteable memory area before the import. Assuming you're not interested in the trace associated\nwith the import process, this can just be a dummy which you later discard. I'd recommend either\nusing an `mmap` object or `sysv_ipc.SharedMemory`. When `fuzz_from_here()` is called, this will\nbe replaced with right one.\n\nIt's also possible the instrumented module was built with a different AFL `MAP_SIZE_POW2` from\nthat in `cpytraceafl.MAP_SIZE_BITS`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/risicle/cpytraceafl", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cpytraceafl", "package_url": "https://pypi.org/project/cpytraceafl/", "platform": "", "project_url": "https://pypi.org/project/cpytraceafl/", "project_urls": {"Homepage": "https://github.com/risicle/cpytraceafl"}, "release_url": "https://pypi.org/project/cpytraceafl/0.5.0/", "requires_dist": null, "requires_python": ">=3.5, <3.9", "summary": "CPython bytecode instrumentation and forkserver tools for fuzzing python and mixed python/c code using AFL", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cpytraceafl</h1>\n<p>CPython bytecode instrumentation and forkserver tools for fuzzing python code using AFL.</p>\n<p>The tools in this repository enable coverage-guided fuzzing of pure python and mixed python/c\ncode using <a href=\"https://github.com/google/AFL\" rel=\"nofollow\">American Fuzzy Lop</a> (even better,\n<a href=\"https://github.com/vanhauser-thc/AFLplusplus\" rel=\"nofollow\">AFL++</a>).</p>\n<p>There are three main parts to this:</p>\n<ul>\n<li>A bytecode rewriter using a technique inspired by inspired by Ned Batchelder's \"wicked hack\"\ndetailed at <a href=\"https://nedbatchelder.com/blog/200804/wicked_hack_python_bytecode_tracing.html\" rel=\"nofollow\">https://nedbatchelder.com/blog/200804/wicked_hack_python_bytecode_tracing.html</a>.\nIn this case, the rewriter identifies \"basic blocks\" in the python bytecode and abuses the\n<code>code</code> object's <code>lnotab</code> (line-number table) to mark each basic block as a new \"line\".\nThese new \"lines\" are what trigger CPython's line-level trace hooks. The result of this being\nthat we can get our trace hook executed on every new basic block.</li>\n<li>A minimal &amp; fast tracehook written in C, tallying visited locations to sysv shared memory.</li>\n<li>A basic forkserver implementation.</li>\n</ul>\n<p>Preparing code for fuzzing involves a couple of steps. The first thing that should happen in\nthe python process is a call to <code>install_rewriter()</code>. It's important that this is done very\nearly as any modules that are imported before this will not be properly instrumented.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cpytraceafl.rewriter</span> <span class=\"kn\">import</span> <span class=\"n\">install_rewriter</span>\n\n<span class=\"n\">install_rewriter</span><span class=\"p\">()</span>\n</pre>\n<p><code>install_rewriter()</code> can optionally be provided with a <code>selector</code> controlling which code objects\nare instrumented and to what degree.</p>\n<p>Following this, modules can be imported as normal and will be instrumented by the monkeypatched\n<code>compile</code> functions. It's usually a good idea to initialize the test environment next,\nperforming as many setup procedures as possible before the input file is read. This may\ninclude doing an initial run of the function under test to ensure any internal imports or caches\nare set up. This is because we want to minimize work that has to be done post-fork - any work\ndone now only has to be done once,</p>\n<p>After calling</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cpytraceafl</span> <span class=\"kn\">import</span> <span class=\"n\">fuzz_from_here</span>\n\n<span class=\"n\">fuzz_from_here</span><span class=\"p\">()</span>\n</pre>\n<p>the <code>fork()</code> will have been made and tracing started. You now simply read your input file and\ncall your function under test.</p>\n<p>Examples for fuzzing some common packages are provided in <a href=\"./examples/\" rel=\"nofollow\">examples/</a>.</p>\n<p>As for hooking this script up to AFL, I tend to use the included\n<a href=\"./dummy-afl-qemu-trace\" rel=\"nofollow\">dummy-afl-qemu-trace</a> shim script to fool AFL's QEmu mode into\ncommunicating directly with the python process.</p>\n<h2>Fuzzing mixed python/c code</h2>\n<p>As of version 0.4.0, <code>cpytraceafl</code> can gather trace information from C extension modules that\nhave been compiled with AFL instrumentation (e.g. using <code>llvm_mode</code>). This means that it can\nbe used to seamlessly fuzz projects which have a mix of python and C \"speedups\". This is\nimportant not only because a lot of python format-parsing packages use this approach, but\nbecause issues revealed in native code are far more likely to have security implications.</p>\n<p>Including instrumented native code requires a little more care when preparing a target for\nfuzzing. For instance, it's important to ensure the <code>cpytraceafl.tracehook</code> module has been\nimported and it has had its <code>set_map_start(...)</code> function provided with a valid memory\narea <em>before</em> any instrumented extension modules are loaded. This is because simply loading an\ninstrumented native module will cause it to attempt to log its execution trace somewhere.</p>\n<p>The example <a href=\"./examples/pillow_pcx_example.py\" rel=\"nofollow\">pillow_pcx_example.py</a> demonstrates a fuzzing\ntarget taking the necessary precautions into account.</p>\n<p>It's possible that you're <em>only</em> interested in tracing the native code, using <code>cpytraceafl</code>\njust as a driver, in which case you can omit the early <code>install_rewriter()</code> call and all\nthe weirdness involved with that.</p>\n<h2>Q &amp; A</h2>\n<h3>Is there any point in fuzzing python? Isn't it too slow?</h3>\n<p>Well, yes and no. My experience has been that fuzzing python code is simply \"a bit different\"\nfrom fuzzing native code - you tend to be looking for different things. In terms of raw speed,\nfuzzing python is certainly not fast, but iteration rates I tend to work with aren't completely\ndissimilar to what I'm used to getting with AFL's Qemu mode (of course, no two fuzzing targets\nare really directly comparable).</p>\n<p>Because of the memory-safe nature of pure python code, it's also more uncommon for issues\nuncovered through fuzzing to be security issues - logical flaws in parsing tend to lead to\nunexpected/unhandled exceptions. So it's still a rather useful tool in simply looking for bugs.\nIt can be used, for example, to generate a corpus of example inputs for your test suite which\nexercise a large amount of the code.</p>\n<h3>Does basic block analysis make any sense for python code?</h3>\n<p>From a rigorous academic stance, and for some uses, possibly not - you've got to keep in mind\nthat half the bytecode instructions could result in calls out to more arbitrary python or\n(uninstrumented) native code that could have arbitrary side effects. But for our needs it works\nwell enough (recall that AFL coverage analysis is robust to random instrumentation\nsites being omitted through <code>AFL_INST_RATIO</code> or <code>AFL_INST_LIBS</code>).</p>\n<h3>Doesn't abusing <code>lnotab</code> break python's debugging mechanisms?</h3>\n<p>Absolutely it does. Don't use instrumented programs to debug problematic cases - use it to\ngenerate problematic inputs. Analyze them with instrumentation turned off.</p>\n<h3>I'm getting <code>undefined symbol: __afl_area_ptr</code></h3>\n<p>Looks like you're trying to import an (instrumented) native extension module before the\n<code>cpytraceafl.tracehook</code> module has been loaded (which is what provides that symbol).</p>\n<h3>I'm getting Segmentation Faults after importing an instrumented native module</h3>\n<p>You probably also need to provide <code>cpytraceafl.tracehook.set_map_start(...)</code> with a valid\nwriteable memory area before the import. Assuming you're not interested in the trace associated\nwith the import process, this can just be a dummy which you later discard. I'd recommend either\nusing an <code>mmap</code> object or <code>sysv_ipc.SharedMemory</code>. When <code>fuzz_from_here()</code> is called, this will\nbe replaced with right one.</p>\n<p>It's also possible the instrumented module was built with a different AFL <code>MAP_SIZE_POW2</code> from\nthat in <code>cpytraceafl.MAP_SIZE_BITS</code>.</p>\n\n          </div>"}, "last_serial": 6707473, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "259033580dd7043194211d2147034460", "sha256": "c9d11bd19232c0ae4aeae3e5547576723b431674590eda1b660014fb8563b117"}, "downloads": -1, "filename": "cpytraceafl-0.2.1.tar.gz", "has_sig": false, "md5_digest": "259033580dd7043194211d2147034460", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.9", "size": 8052, "upload_time": "2020-02-02T13:25:53", "upload_time_iso_8601": "2020-02-02T13:25:53.545953Z", "url": "https://files.pythonhosted.org/packages/97/9b/592352b2ab56666d60b6e79380a8af0eac86209bd75db836d1a533a3b69b/cpytraceafl-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8956ab4f297d5090361adcf2c8a9e1c5", "sha256": "046035a50f76e2265284f654c9b72abc3e3bb6b8d39c31f5a3c92a80a15e6f87"}, "downloads": -1, "filename": "cpytraceafl-0.3.0.tar.gz", "has_sig": false, "md5_digest": "8956ab4f297d5090361adcf2c8a9e1c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.9", "size": 10561, "upload_time": "2020-02-09T15:33:19", "upload_time_iso_8601": "2020-02-09T15:33:19.971456Z", "url": "https://files.pythonhosted.org/packages/87/04/9f2d6d947c1931d001f3ae9c6a75273e6e8c180e3b02f46d17bab8d596b9/cpytraceafl-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "4e291e60685a5f9449427115a43703a3", "sha256": "7aaf2e1e651edd6bc66b8101f004c1171a6a727c874bbfce914bc19e15e70d65"}, "downloads": -1, "filename": "cpytraceafl-0.4.0.tar.gz", "has_sig": false, "md5_digest": "4e291e60685a5f9449427115a43703a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.9", "size": 12338, "upload_time": "2020-02-17T00:08:21", "upload_time_iso_8601": "2020-02-17T00:08:21.352653Z", "url": "https://files.pythonhosted.org/packages/c5/4b/2889145594e2246a0b6d9cd3197e307072a76d891c957ef791c77a0a5279/cpytraceafl-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "8ab6dfa11b1087d83e155f6e309d21cf", "sha256": "4171b2599c7bee679972ea5cb4520a24c33382c863c4986e4fce08a96abb4404"}, "downloads": -1, "filename": "cpytraceafl-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8ab6dfa11b1087d83e155f6e309d21cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.9", "size": 12428, "upload_time": "2020-02-27T00:29:11", "upload_time_iso_8601": "2020-02-27T00:29:11.962578Z", "url": "https://files.pythonhosted.org/packages/5e/3a/4ee7b18747c1fdd6f37041b0fd1d71a7c2725039399d01527fd3cb10a0f5/cpytraceafl-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ab6dfa11b1087d83e155f6e309d21cf", "sha256": "4171b2599c7bee679972ea5cb4520a24c33382c863c4986e4fce08a96abb4404"}, "downloads": -1, "filename": "cpytraceafl-0.5.0.tar.gz", "has_sig": false, "md5_digest": "8ab6dfa11b1087d83e155f6e309d21cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5, <3.9", "size": 12428, "upload_time": "2020-02-27T00:29:11", "upload_time_iso_8601": "2020-02-27T00:29:11.962578Z", "url": "https://files.pythonhosted.org/packages/5e/3a/4ee7b18747c1fdd6f37041b0fd1d71a7c2725039399d01527fd3cb10a0f5/cpytraceafl-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:32 2020"}