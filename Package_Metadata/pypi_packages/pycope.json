{"info": {"author": "Jacob Waffle", "author_email": "thejakewaffle@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# PyCOPE [![Build Status](https://travis-ci.org/jawaff/pycope.svg?branch=master)](https://travis-ci.org/jawaff/pycope) [![codecov](https://codecov.io/gh/jawaff/pycope/branch/master/graph/badge.svg)](https://codecov.io/gh/jawaff/pycope)\n\nThis is a Context-Oriented Programming Extension for the Python language. It provides\nthat allow programmers to utilize Context-Oriented techniques in an Object-Oriented\nmanner. \n\n# Motivation\nThis library is the fruit of my Context-Oriented Programming (COP) research and experimentation.\nMy approach is a new take on COP that can potentially be implemented in any Object Oriented \nsupported language. I'll be writing a paper on it soon.\n\n# Installation\nThis library is available in Pypi. Execute the following command to istall it:\n```\npip install pycope\n```\n\n# Description\nTo make this library work at minimum you need a context, a group of strategies with the same\nmethod signature and layers.\n\n## Context\nIt's unconventional, but the context is stored as a stack of dictionaries.\nWhen you create a COP \"layer\" you are adding/removing to/from the context's dictionary stack.\nEach item in the stack represents a layer's alterations to the previous item. This was made \npossible with a functional styled immutable dictionary, where a new dictionary is made after\neach set of alterations.\n\nOn a side note with contexts, there should be at least one context foreach thread of execution.\nThey are thread-safe, but you will probably get unexpected results if multiple threads are \napplying layers to the same context.\n\n## Layers\nA 'with' statement must be used on a pycope layer. Layers effects are not permanent \nand must be reversed after the layer reaches the end of its execution scope.\n\n## Strategies\nA single group of strategies is used to define a contextual execution. The \nstrategies specify their priority based on the available context's map of fields. The \nstrategy with the highest priority is the one chosen for execution. This is essentially an \nadvanced if/elif/else chain.\n\n## Executable\nAn executable defines a single contextual executable. The main goal is to minimize \nboilerplate for the user whilst still allowing flexibility and power.\n\n# Example\n```python\nimport context\nimport strategy\nimport prioritizers\nimport executable\n\ndef is_red(red, green, blue):\n    return red > 50 and green < 30 and blue < 30:\n\ndef is_green(red, green, blue):\n    return red < 30 and green > 50 and blue < 30:\n\ndef is_blue(red, green, blue):\n    return red < 30 and green < 30 and blue > 50:\n\ncolor_ctx = context.Context()\ncolor_strategies = [strategy.Strategy(is_red, [prioritizers.contains_field(\"color\": \"red\")]),\n                    strategy.Strategy(is_green, [prioritizers.contains_field(\"color\": \"green\")]),\n                    strategy.Strategy(is_blue, [prioritizers.contains_field(\"color\": \"blue\")])]\ncolor_tester = executable.Executable(color_ctx, color_strategies)\n\nwith color_tester.new_layer({\"color\":\"red\"}, []) as layer1:\n    assert color_tester.execute(255, 0, 0)\n    assert not color_tester.execute(0, 255, 0)\n    assert not color_tester.execute(0, 0, 255)\n\n    with color_tester.new_layer({\"color\":\"blue\"}, []) as layer2:\n        assert not color_tester.execute(255, 0, 0)\n        assert not color_tester.execute(0, 255, 0)\n        assert color_tester.execute(0, 0, 255)\n\n    assert color_tester.execute(255, 0, 0)\n    assert not color_tester.execute(0, 255, 0)\n    assert not color_tester.execute(0, 0, 255)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.github.com/pycope", "keywords": "", "license": "Apache2", "maintainer": "", "maintainer_email": "", "name": "pycope", "package_url": "https://pypi.org/project/pycope/", "platform": "", "project_url": "https://pypi.org/project/pycope/", "project_urls": {"Homepage": "http://www.github.com/pycope"}, "release_url": "https://pypi.org/project/pycope/0.1.1/", "requires_dist": ["immutables"], "requires_python": "", "summary": "A Context-Oriented Programming Extension for Python.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCOPE <a href=\"https://travis-ci.org/jawaff/pycope\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52fbe8381d3403559e106894ef8c0305738057b7/68747470733a2f2f7472617669732d63692e6f72672f6a61776166662f7079636f70652e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/jawaff/pycope\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fab2066e8982af4ed53eccfc24524a392f9eaea2/68747470733a2f2f636f6465636f762e696f2f67682f6a61776166662f7079636f70652f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></h1>\n<p>This is a Context-Oriented Programming Extension for the Python language. It provides\nthat allow programmers to utilize Context-Oriented techniques in an Object-Oriented\nmanner.</p>\n<h1>Motivation</h1>\n<p>This library is the fruit of my Context-Oriented Programming (COP) research and experimentation.\nMy approach is a new take on COP that can potentially be implemented in any Object Oriented\nsupported language. I'll be writing a paper on it soon.</p>\n<h1>Installation</h1>\n<p>This library is available in Pypi. Execute the following command to istall it:</p>\n<pre><code>pip install pycope\n</code></pre>\n<h1>Description</h1>\n<p>To make this library work at minimum you need a context, a group of strategies with the same\nmethod signature and layers.</p>\n<h2>Context</h2>\n<p>It's unconventional, but the context is stored as a stack of dictionaries.\nWhen you create a COP \"layer\" you are adding/removing to/from the context's dictionary stack.\nEach item in the stack represents a layer's alterations to the previous item. This was made\npossible with a functional styled immutable dictionary, where a new dictionary is made after\neach set of alterations.</p>\n<p>On a side note with contexts, there should be at least one context foreach thread of execution.\nThey are thread-safe, but you will probably get unexpected results if multiple threads are\napplying layers to the same context.</p>\n<h2>Layers</h2>\n<p>A 'with' statement must be used on a pycope layer. Layers effects are not permanent\nand must be reversed after the layer reaches the end of its execution scope.</p>\n<h2>Strategies</h2>\n<p>A single group of strategies is used to define a contextual execution. The\nstrategies specify their priority based on the available context's map of fields. The\nstrategy with the highest priority is the one chosen for execution. This is essentially an\nadvanced if/elif/else chain.</p>\n<h2>Executable</h2>\n<p>An executable defines a single contextual executable. The main goal is to minimize\nboilerplate for the user whilst still allowing flexibility and power.</p>\n<h1>Example</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">context</span>\n<span class=\"kn\">import</span> <span class=\"nn\">strategy</span>\n<span class=\"kn\">import</span> <span class=\"nn\">prioritizers</span>\n<span class=\"kn\">import</span> <span class=\"nn\">executable</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_red</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">green</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">red</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span> <span class=\"ow\">and</span> <span class=\"n\">green</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"n\">blue</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span><span class=\"p\">:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_green</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">green</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">red</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"n\">green</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span> <span class=\"ow\">and</span> <span class=\"n\">blue</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span><span class=\"p\">:</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">is_blue</span><span class=\"p\">(</span><span class=\"n\">red</span><span class=\"p\">,</span> <span class=\"n\">green</span><span class=\"p\">,</span> <span class=\"n\">blue</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">red</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"n\">green</span> <span class=\"o\">&lt;</span> <span class=\"mi\">30</span> <span class=\"ow\">and</span> <span class=\"n\">blue</span> <span class=\"o\">&gt;</span> <span class=\"mi\">50</span><span class=\"p\">:</span>\n\n<span class=\"n\">color_ctx</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"n\">color_strategies</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">(</span><span class=\"n\">is_red</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prioritizers</span><span class=\"o\">.</span><span class=\"n\">contains_field</span><span class=\"p\">(</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"red\"</span><span class=\"p\">)]),</span>\n                    <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">(</span><span class=\"n\">is_green</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prioritizers</span><span class=\"o\">.</span><span class=\"n\">contains_field</span><span class=\"p\">(</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"green\"</span><span class=\"p\">)]),</span>\n                    <span class=\"n\">strategy</span><span class=\"o\">.</span><span class=\"n\">Strategy</span><span class=\"p\">(</span><span class=\"n\">is_blue</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">prioritizers</span><span class=\"o\">.</span><span class=\"n\">contains_field</span><span class=\"p\">(</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"blue\"</span><span class=\"p\">)])]</span>\n<span class=\"n\">color_tester</span> <span class=\"o\">=</span> <span class=\"n\">executable</span><span class=\"o\">.</span><span class=\"n\">Executable</span><span class=\"p\">(</span><span class=\"n\">color_ctx</span><span class=\"p\">,</span> <span class=\"n\">color_strategies</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">new_layer</span><span class=\"p\">({</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span><span class=\"s2\">\"red\"</span><span class=\"p\">},</span> <span class=\"p\">[])</span> <span class=\"k\">as</span> <span class=\"n\">layer1</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">new_layer</span><span class=\"p\">({</span><span class=\"s2\">\"color\"</span><span class=\"p\">:</span><span class=\"s2\">\"blue\"</span><span class=\"p\">},</span> <span class=\"p\">[])</span> <span class=\"k\">as</span> <span class=\"n\">layer2</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"k\">assert</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">color_tester</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6260728, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c0666a4a0b00c706cfcdad836b19e623", "sha256": "01d91dfd9768b02fe66ae129dfaeb1b1c1cc2dd17b09028a7e7bbbb4ac5a7430"}, "downloads": -1, "filename": "pycope-0.1.0-py2-none-any.whl", "has_sig": false, "md5_digest": "c0666a4a0b00c706cfcdad836b19e623", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3895, "upload_time": "2019-12-07T07:18:08", "upload_time_iso_8601": "2019-12-07T07:18:08.734893Z", "url": "https://files.pythonhosted.org/packages/7e/39/859f3dad91aaea609afb1abd0eb6d6f1d16b38d5533576132de4102543b8/pycope-0.1.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b9a605e2b0df3494d3b5d366caaead3", "sha256": "5f7177a06953c2266225493d1ace4ae5ebb71d32818cb6dfed7275d96fe0592e"}, "downloads": -1, "filename": "pycope-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "7b9a605e2b0df3494d3b5d366caaead3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3894, "upload_time": "2019-12-07T07:18:10", "upload_time_iso_8601": "2019-12-07T07:18:10.691845Z", "url": "https://files.pythonhosted.org/packages/14/61/3b88628926d8a7ef3e965a598319553c0ab185d9b5c41695278b0bd55387/pycope-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "a21ca3de030e4ad2f3f256a0eb2552f8", "sha256": "eb1da5c8078dd8086cc26c9e650e2c58ceb59ca3f5884e57055795296bd9cc08"}, "downloads": -1, "filename": "pycope-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "a21ca3de030e4ad2f3f256a0eb2552f8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6540, "upload_time": "2019-12-08T06:44:04", "upload_time_iso_8601": "2019-12-08T06:44:04.471024Z", "url": "https://files.pythonhosted.org/packages/24/1a/ac94dd0b9ec3a1fbc7c416cc3b91fe30cad2d6c8e46fd631a279c4ee0a27/pycope-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50347bab3401999ffc659d4c3ed25695", "sha256": "be6f797207e6d68cb8d636c0888c2b84abd0178061e388646f843ee7751e88f7"}, "downloads": -1, "filename": "pycope-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "50347bab3401999ffc659d4c3ed25695", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6541, "upload_time": "2019-12-08T06:44:05", "upload_time_iso_8601": "2019-12-08T06:44:05.840576Z", "url": "https://files.pythonhosted.org/packages/04/c1/b8d1321b06736b4552b8ea956813ffaad07df3b4c3386cfc0fd2a362e83c/pycope-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aec753fbf381729e19de0e04ed8b163", "sha256": "da8ea434e0e112c56dc4434eb3be81cff55c2299f9ca48087342e71be0912fff"}, "downloads": -1, "filename": "pycope-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2aec753fbf381729e19de0e04ed8b163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4861, "upload_time": "2019-12-08T06:44:06", "upload_time_iso_8601": "2019-12-08T06:44:06.802665Z", "url": "https://files.pythonhosted.org/packages/4d/82/1783b2c51480b140d54085323c7520cc00dd43ca471de654db2639b94a30/pycope-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a21ca3de030e4ad2f3f256a0eb2552f8", "sha256": "eb1da5c8078dd8086cc26c9e650e2c58ceb59ca3f5884e57055795296bd9cc08"}, "downloads": -1, "filename": "pycope-0.1.1-py2-none-any.whl", "has_sig": false, "md5_digest": "a21ca3de030e4ad2f3f256a0eb2552f8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6540, "upload_time": "2019-12-08T06:44:04", "upload_time_iso_8601": "2019-12-08T06:44:04.471024Z", "url": "https://files.pythonhosted.org/packages/24/1a/ac94dd0b9ec3a1fbc7c416cc3b91fe30cad2d6c8e46fd631a279c4ee0a27/pycope-0.1.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50347bab3401999ffc659d4c3ed25695", "sha256": "be6f797207e6d68cb8d636c0888c2b84abd0178061e388646f843ee7751e88f7"}, "downloads": -1, "filename": "pycope-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "50347bab3401999ffc659d4c3ed25695", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6541, "upload_time": "2019-12-08T06:44:05", "upload_time_iso_8601": "2019-12-08T06:44:05.840576Z", "url": "https://files.pythonhosted.org/packages/04/c1/b8d1321b06736b4552b8ea956813ffaad07df3b4c3386cfc0fd2a362e83c/pycope-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aec753fbf381729e19de0e04ed8b163", "sha256": "da8ea434e0e112c56dc4434eb3be81cff55c2299f9ca48087342e71be0912fff"}, "downloads": -1, "filename": "pycope-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2aec753fbf381729e19de0e04ed8b163", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4861, "upload_time": "2019-12-08T06:44:06", "upload_time_iso_8601": "2019-12-08T06:44:06.802665Z", "url": "https://files.pythonhosted.org/packages/4d/82/1783b2c51480b140d54085323c7520cc00dd43ca471de654db2639b94a30/pycope-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:03 2020"}