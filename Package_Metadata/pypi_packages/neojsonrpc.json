{"info": {"author": "Morgan Aubert", "author_email": "morgan.aubert@zoho.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "NeoJsonRPC\n##########\n\n**NeoJsonRPC** is a Python JSON-RPC client for the NEO blockchain. It implements the JSON-RPC\nmethods of the API interface provided by NEO nodes (minus the methods requiring an opened wallet).\nThe client also provides a high-level interface to invoke contract methods on the NEO blockchain.\n\n.. contents:: Table of Contents\n    :local:\n\nDocumentation\n=============\n\nOnline browsable documentation is available at https://neojsonrpc.readthedocs.io.\n\nRequirements\n============\n\nPython_ 3.4+, Requests_ 2.0+.\n\nInstallation\n============\n\nTo install NeoJsonRPC, please use pip_ (or pipenv_) as follows:\n\n.. code-block:: shell\n\n    $ pip install neojsonrpc\n\nBasic usage\n===========\n\nThe first step to interact with the NEO JSON-RPC interface is to initialize a ``neojsonrpc.Client``\ninstance. The following examples respectively show how to get clients for the TestNet, the MainNet\nand an hypothetical local PrivNet:\n\n.. code-block:: python\n\n    >>> from neojsonrpc import Client\n    >>> testnet_client = Client.for_testnet()\n    >>> mainnet_client = Client.for_mainnet()\n    >>> privnet_client = Client(host='localhost', port='30333')\n\nThen you can easily call some of the `JSON-RPC methods <http://docs.neo.org/en-us/node/api.html>`_\nprovided by NEO nodes. Here are some examples:\n\n.. code-block:: python\n\n    >>> from neojsonrpc import Client\n    >>> client = Client.for_testnet()\n    >>> client.get_block_count()\n    973369\n    >>> client.get_contract_state('2c0fdfa9592814b0a938219e218e3a6b08615acd')\n    {'author': 'foobar',\n     'code_version': '0.3',\n    # [...]\n    }\n\nYou can also invoke smart contract functions using the following methods:\n\n.. code-block:: python\n\n    >>> from neojsonrpc import Client\n    >>> client = Client.for_testnet()\n    >>> result = client.invoke_function('34af1b6634fcd7cfcff0158965b18601d3837e32', 'symbol', [])\n    {'gas_consumed': '0.217',\n     'stack': [{'type': 'ByteArray', 'value': bytearray(b'TKN')}],\n     'state': 'HALT, BREAK'}\n    >>> # Another convenient way to do the same operation is as follows:\n    >>> client.contract('34af1b6634fcd7cfcff0158965b18601d3837e32').symbol()\n    {'gas_consumed': '0.217',\n     'stack': [{'type': 'ByteArray', 'value': bytearray(b'TKN')}],\n     'state': 'HALT, BREAK'}\n\nAuthors\n=======\n\nMorgan Aubert (`@ellmetha <https://github.com/ellmetha>`_) and contributors_. See ``AUTHORS`` for\nmore details.\n\n.. _contributors: https://github.com/ellmetha/neojsonrpc/contributors\n\nLicense\n=======\n\nMIT. See ``LICENSE`` for more details.\n\n\n.. _pip: https://github.com/pypa/pip\n.. _pipenv: https://github.com/pypa/pipenv\n.. _Python: https://www.python.org/\n.. _Requests: http://docs.python-requests.org/en/master/\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ellmetha/neojsonrpc", "keywords": "neo blockchain json-rpc json-rpc-client api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "neojsonrpc", "package_url": "https://pypi.org/project/neojsonrpc/", "platform": "", "project_url": "https://pypi.org/project/neojsonrpc/", "project_urls": {"Homepage": "https://github.com/ellmetha/neojsonrpc"}, "release_url": "https://pypi.org/project/neojsonrpc/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A Python JSON-RPC client for the NEO blockchain.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>NeoJsonRPC</strong> is a Python JSON-RPC client for the NEO blockchain. It implements the JSON-RPC\nmethods of the API interface provided by NEO nodes (minus the methods requiring an opened wallet).\nThe client also provides a high-level interface to invoke contract methods on the NEO blockchain.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#documentation\" id=\"id1\" rel=\"nofollow\">Documentation</a></li>\n<li><a href=\"#requirements\" id=\"id2\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#installation\" id=\"id3\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#basic-usage\" id=\"id4\" rel=\"nofollow\">Basic usage</a></li>\n<li><a href=\"#authors\" id=\"id5\" rel=\"nofollow\">Authors</a></li>\n<li><a href=\"#license\" id=\"id6\" rel=\"nofollow\">License</a></li>\n</ul>\n</div>\n<div id=\"documentation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Documentation</a></h2>\n<p>Online browsable documentation is available at <a href=\"https://neojsonrpc.readthedocs.io\" rel=\"nofollow\">https://neojsonrpc.readthedocs.io</a>.</p>\n</div>\n<div id=\"requirements\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Requirements</a></h2>\n<p><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> 3.4+, <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">Requests</a> 2.0+.</p>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Installation</a></h2>\n<p>To install NeoJsonRPC, please use <a href=\"https://github.com/pypa/pip\" rel=\"nofollow\">pip</a> (or <a href=\"https://github.com/pypa/pipenv\" rel=\"nofollow\">pipenv</a>) as follows:</p>\n<pre>$ pip install neojsonrpc\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Basic usage</a></h2>\n<p>The first step to interact with the NEO JSON-RPC interface is to initialize a <tt>neojsonrpc.Client</tt>\ninstance. The following examples respectively show how to get clients for the TestNet, the MainNet\nand an hypothetical local PrivNet:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">neojsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">testnet_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"o\">.</span><span class=\"n\">for_testnet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">mainnet_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"o\">.</span><span class=\"n\">for_mainnet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">privnet_client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"s1\">'30333'</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can easily call some of the <a href=\"http://docs.neo.org/en-us/node/api.html\" rel=\"nofollow\">JSON-RPC methods</a>\nprovided by NEO nodes. Here are some examples:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">neojsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"o\">.</span><span class=\"n\">for_testnet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_block_count</span><span class=\"p\">()</span>\n<span class=\"mi\">973369</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_contract_state</span><span class=\"p\">(</span><span class=\"s1\">'2c0fdfa9592814b0a938219e218e3a6b08615acd'</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'author'</span><span class=\"p\">:</span> <span class=\"s1\">'foobar'</span><span class=\"p\">,</span>\n <span class=\"s1\">'code_version'</span><span class=\"p\">:</span> <span class=\"s1\">'0.3'</span><span class=\"p\">,</span>\n<span class=\"c1\"># [...]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can also invoke smart contract functions using the following methods:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">neojsonrpc</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"o\">.</span><span class=\"n\">for_testnet</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">invoke_function</span><span class=\"p\">(</span><span class=\"s1\">'34af1b6634fcd7cfcff0158965b18601d3837e32'</span><span class=\"p\">,</span> <span class=\"s1\">'symbol'</span><span class=\"p\">,</span> <span class=\"p\">[])</span>\n<span class=\"p\">{</span><span class=\"s1\">'gas_consumed'</span><span class=\"p\">:</span> <span class=\"s1\">'0.217'</span><span class=\"p\">,</span>\n <span class=\"s1\">'stack'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'ByteArray'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'TKN'</span><span class=\"p\">)}],</span>\n <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'HALT, BREAK'</span><span class=\"p\">}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"c1\"># Another convenient way to do the same operation is as follows:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">contract</span><span class=\"p\">(</span><span class=\"s1\">'34af1b6634fcd7cfcff0158965b18601d3837e32'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">symbol</span><span class=\"p\">()</span>\n<span class=\"p\">{</span><span class=\"s1\">'gas_consumed'</span><span class=\"p\">:</span> <span class=\"s1\">'0.217'</span><span class=\"p\">,</span>\n <span class=\"s1\">'stack'</span><span class=\"p\">:</span> <span class=\"p\">[{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'ByteArray'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">:</span> <span class=\"nb\">bytearray</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'TKN'</span><span class=\"p\">)}],</span>\n <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'HALT, BREAK'</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"authors\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Authors</a></h2>\n<p>Morgan Aubert (<a href=\"https://github.com/ellmetha\" rel=\"nofollow\">@ellmetha</a>) and <a href=\"https://github.com/ellmetha/neojsonrpc/contributors\" rel=\"nofollow\">contributors</a>. See <tt>AUTHORS</tt> for\nmore details.</p>\n</div>\n<div id=\"license\">\n<h2><a href=\"#id6\" rel=\"nofollow\">License</a></h2>\n<p>MIT. See <tt>LICENSE</tt> for more details.</p>\n</div>\n\n          </div>"}, "last_serial": 3638613, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ce634ed50bebfb015c43cdad6670622e", "sha256": "7b80603284c09c07996925b54215c25ebe3b6d200a4bf5d3162a1240020ec458"}, "downloads": -1, "filename": "neojsonrpc-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ce634ed50bebfb015c43cdad6670622e", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12697, "upload_time": "2018-01-07T22:39:39", "upload_time_iso_8601": "2018-01-07T22:39:39.365219Z", "url": "https://files.pythonhosted.org/packages/76/39/2909a39b30d360cf1d7f0e586a9a400fdad798f9b31ae93d1c981f927d1d/neojsonrpc-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8304fb49418058a4a86de5f8585b04e7", "sha256": "8c7d5576d493e0eb66b93602b5ea95304a930e1f163ce80102433fbab17b13f2"}, "downloads": -1, "filename": "neojsonrpc-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8304fb49418058a4a86de5f8585b04e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20950, "upload_time": "2018-01-07T22:39:38", "upload_time_iso_8601": "2018-01-07T22:39:38.208235Z", "url": "https://files.pythonhosted.org/packages/85/37/f24dacc5dcbb4278f9b329ebabdcbc9f416c737f4d89442121177ec4c878/neojsonrpc-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "3719eab9bab18f957334780462df0573", "sha256": "4c9bb835eea6610b77484ef35a829b1f10705a37a5cfe663bb4dd5e0684ee42d"}, "downloads": -1, "filename": "neojsonrpc-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3719eab9bab18f957334780462df0573", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12706, "upload_time": "2018-03-04T18:53:31", "upload_time_iso_8601": "2018-03-04T18:53:31.992209Z", "url": "https://files.pythonhosted.org/packages/1f/12/e7748b9ab3cd6ed310d68041df206ff6b8b47e28297eed0ce6d6d724ec92/neojsonrpc-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81f60c5e2df834700e999eb6c15f9941", "sha256": "e0176d4cc20cd2b21830e1c8d6cf8f0fdca938ded3aa8fdd267209acb7217ef8"}, "downloads": -1, "filename": "neojsonrpc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81f60c5e2df834700e999eb6c15f9941", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21125, "upload_time": "2018-03-04T18:53:30", "upload_time_iso_8601": "2018-03-04T18:53:30.406611Z", "url": "https://files.pythonhosted.org/packages/18/1c/519c45ab8391449bf4619be1ea52c2e32a76412837dfd074524ebfa39cd0/neojsonrpc-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3719eab9bab18f957334780462df0573", "sha256": "4c9bb835eea6610b77484ef35a829b1f10705a37a5cfe663bb4dd5e0684ee42d"}, "downloads": -1, "filename": "neojsonrpc-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3719eab9bab18f957334780462df0573", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 12706, "upload_time": "2018-03-04T18:53:31", "upload_time_iso_8601": "2018-03-04T18:53:31.992209Z", "url": "https://files.pythonhosted.org/packages/1f/12/e7748b9ab3cd6ed310d68041df206ff6b8b47e28297eed0ce6d6d724ec92/neojsonrpc-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "81f60c5e2df834700e999eb6c15f9941", "sha256": "e0176d4cc20cd2b21830e1c8d6cf8f0fdca938ded3aa8fdd267209acb7217ef8"}, "downloads": -1, "filename": "neojsonrpc-0.1.1.tar.gz", "has_sig": false, "md5_digest": "81f60c5e2df834700e999eb6c15f9941", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21125, "upload_time": "2018-03-04T18:53:30", "upload_time_iso_8601": "2018-03-04T18:53:30.406611Z", "url": "https://files.pythonhosted.org/packages/18/1c/519c45ab8391449bf4619be1ea52c2e32a76412837dfd074524ebfa39cd0/neojsonrpc-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:29 2020"}