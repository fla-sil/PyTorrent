{"info": {"author": "Bruno Nicko", "author_email": "brunonicko@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "Objetto\n#######\n\n`Objetto` is a framework for building data-centric Applications/APIs which can be easily\nobserved/interacted with through a graphical or non-graphical user interface.\n\n.. note::\n    `Objetto` is currently in alpha. Use it at your own risk!\n\n.. note::\n    `Objetto` is compatible with Python 2.7 and higher (including Python 3).\n    Even though Python 2.7 is now deprecated, it is still widely in use by Visual\n    Effects pipelines, which can benefit from `Objetto`.\n    Therefore, support for it will be maintained until a full transition takes place.\n\nTake a look at the `Examples`_ to see it in practice.\n\n`Objetto` takes some inspiration from projects like:\n  - `attrs <https://www.attrs.org/>`_\n  - `Python 3 Data Classes <https://docs.python.org/3/library/dataclasses.html>`_\n  - `pyrsistent <https://github.com/tobgu/pyrsistent/>`_\n  - `PySignal <https://github.com/dgovil/PySignal>`_\n  - `React <https://reactjs.org/>`_\n  - `Flux <https://facebook.github.io/flux/>`_\n\nOverview\n********\n`Objetto` provides an easy way to define a high-level mutable data structure referred to\nas `Object`_, which offers features related to data access, consistency, validation, and\nmonitoring.\n\nHierarchy and Ownership\n=======================\nAn object can be 'owned' by another object in a parent-children tree hierarchy.\nThis can help preventing them from being mistakenly re-used as data in an object other\nthan its owner (if that behavior is desired).\n\nThe parent-children hierarchy also provides a good way to structure your data, prevents\ncycles, and eases processes like serialization and application-wide validation.\n\nAn object's hierarchy can be accessed through its `.hierarchy` property.\n\nSchema & Validation\n===================\nObjects provide a variety of mechanisms to define schema and to validate your data.\nThe mantra here is that the client code using a well-written Application/API created\nwith `Objetto` should not be concerned about leaving it in a bad state.\n\nOne way to implement validation is to make use of the `value_type` and/or\n`value_factory` parameters when defining `Attributes`_.\n\nEvent Emission\n==============\nEvery time an object gets mutated, it will automatically emit events that describe its\nmutation. Listeners can hook up to objects so they react when they receive those events.\n\nThis is useful for triggering reactive behaviors that are internal to the\nApplication/API, but also for external systems that interact with the objects, such as\ngraphical user interfaces, controllers, or even other external objects.\n\nEach object type has a standardized set of event types that it emits, making it easy\nto build generic listeners that react to different objects with similar interfaces.\n\nAn object's event emitter can be accessed through its `.events` property.\nEvent types can be imported from the `objetto.events` module.\n\nUndo/Redo History\n=================\nObjetto has built-in support for a undo/redo command history. It takes care of managing\nits validity for internal data changes by flushing itself automatically when necessary,\nand it is extremely easy to implement.\n\nA history can be added to an object by adding a `history_attribute` to its definition.\nAccessing that attribute from an object's instance will give you the `History` itself.\n\nObject\n======\nObjects are the building blocks of any `Objetto` Application/API.\n\n`objetto.Object` is the most important class, and the one you will probably be dealing\nwith the most. Its internal state is curated by `Attributes`_ defined in sub-classes.\n\n.. note::\n    There are other object types that are used internally by attribute factories, known\n    as containers, such as: `ListObject`, `DictObject`, and `SetObject`.\n    These classes can be imported from the `objetto.objects` module if you want to\n    create advanced custom attribute factories or define custom behaviors.\n\nAttributes\n==========\nAttributes define the schema of an object class. Some of them can be delegated, meaning\nthat they can behave as properties.\nHere are some of the attribute factories that `Objetto` offers:\n\n  - attribute\n  - history_attribute\n  - constant_attribute\n  - permanent_attribute\n  - protected_attribute_pair\n  - list_attribute\n  - protected_list_attribute_pair\n  - dict_attribute\n  - protected_dict_attribute_pair\n  - set_attribute\n  - protected_set_attribute_pair\n  - dependencies (decorator to define dependencies for an attribute's delegate)\n\nValue Factories\n===============\nValue factories can be used for conforming/validating an input value when setting an\nattribute. They can be imported from `objetto.factories`.\nHere are some of the value factories that `Objetto` offers:\n\n  - integer\n  - floating_point\n  - regex_match\n  - regex_sub\n  - curated\n\nReactions\n=========\nReactions are pre-defined recipes that listen to events from container objects, reacting\nto them in a certain way.\nHere are some of the reactions that `Objetto` offers:\n\n  - unique_attributes\n  - limit\n\n\nExamples\n========\nHere's how to define a simple `Person` object class with two string attributes.\nNotice how we are using the `value_type` parameter to implement type checking.\n\n.. code:: python\n\n    >>> from objetto import Object, attribute\n    >>>\n    >>> class Person(Object):\n    ...     first_name = attribute(value_type=str)\n    ...     last_name = attribute(value_type=str)\n    ...\n    ...     def __init__(self, first_name, last_name):\n    ...         self.first_name = first_name\n    ...         self.last_name = last_name\n    ...\n    >>> person = Person(\"George\", \"Byron\")\n    >>> print(person)\n    <Person first_name='George', last_name='Byron'>\n\nLet's make it a little bit more complex by adding a `full_name` delegated attribute and\na regex validation `value_factory` for `first_name` and `last_name` attributes.\n\n.. code:: python\n\n    >>> from objetto import dependencies\n    >>> from objetto.factories import regex_match\n    >>>\n    >>> NAME_REGEX = r\"^[A-Z][a-zA-Z]*$\"\n    >>>\n    >>> class Person(Object):\n    ...     first_name = attribute(value_factory=regex_match(NAME_REGEX))\n    ...     last_name = attribute(value_factory=regex_match(NAME_REGEX))\n    ...     full_name = attribute(value_type=str, delegated=True)\n    ...\n    ...     @full_name.getter\n    ...     @dependencies(gets=(first_name, last_name))\n    ...     def full_name(self):\n    ...         return \" \".join((self.first_name, self.last_name))\n    ...\n    ...     @full_name.setter\n    ...     @dependencies(sets=(first_name, last_name))\n    ...     def full_name(self, full_name):\n    ...         self.first_name, self.last_name = full_name.split()\n    ...\n    ...     def __init__(self, full_name):\n    ...         self.full_name = full_name\n    ...\n    >>> person = Person(\"George Byron\")\n    >>> print(person)\n    <Person first_name='George', full_name='George Byron', last_name='Byron'>\n    >>>\n    >>> person.first_name = \"Ada\"\n    >>> print(person)\n    <Person first_name='Ada', full_name='Ada Byron', last_name='Byron'>\n    >>>\n    >>> person.full_name = \"Ada Lovelace\"\n    >>> print(person)\n    <Person first_name='Ada', full_name='Ada Lovelace', last_name='Lovelace'>\n\nNow, let's start creating a hierarchy of objects by creating the class `Father`,\nwhich extends `Person` by defining children in a `list_attribute`.\nNot how we used a `unique_attributes` reaction in order to enforce a validation that\nprevents siblings from having the same full name.\n\n.. code:: python\n\n    >>> from objetto import list_attribute\n    >>> from objetto.reactions import unique_attributes\n    >>>\n    >>> class Father(Person):\n    ...     children = list_attribute(\n    ...         value_type=Person,\n    ...         reaction=unique_attributes(\"full_name\"),\n    ...         parent=True\n    ...     )\n    ...\n    >>> elizabeth = Person(\"Elizabeth Leigh\")\n    >>> ada = Person(\"Ada Byron\")\n    >>> clara = Person(\"Clara Byron\")\n    >>>\n    >>> george = Father(\"George Byron\")\n    >>> george.children.append(elizabeth, ada, clara)\n    >>>\n    >>> george_children = george.children\n    >>> print(elizabeth.hierarchy.parent is george.children)\n    True\n    >>> print(george.children.hierarchy.parent is george)\n    True\n\nLet's define an object that will represent the top of the hierarchy and implement a\nhistory so we can utilize undo/redo capabilities for all of its members.\n\n.. code:: python\n\n    >>> from objetto import history_attribute\n    >>>\n    >>> class Family(Object):\n    ...     history = history_attribute()\n    ...     father = attribute(value_type=Father, parent=True)\n    ...\n    ...     def __init__(self, father):\n    ...         self.father = father\n    ...\n    >>> family = Family(Father(\"George Byron\"))\n    >>>\n    >>> elizabeth = Person(\"Elizabeth Leigh\")\n    >>> ada = Person(\"Ada Byron\")\n    >>> clara = Person(\"Clara Byron\")\n    >>>\n    >>> family.father.children.append(elizabeth)\n    >>> family.father.children.append(ada)\n    >>> family.father.children.append(clara)\n    >>> print(len(family.father.children))\n    3\n    >>> family.history.undo()\n    >>> print(len(family.father.children))\n    2\n    >>> family.history.undo()\n    >>> print(len(family.father.children))\n    1\n    >>> family.history.undo()\n    >>> print(len(family.father.children))\n    0", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brunonicko/objetto", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "objetto", "package_url": "https://pypi.org/project/objetto/", "platform": "", "project_url": "https://pypi.org/project/objetto/", "project_urls": {"Homepage": "https://github.com/brunonicko/objetto"}, "release_url": "https://pypi.org/project/objetto/0.1.1/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Framework for building data-centric Applications/APIs", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>Objetto</cite> is a framework for building data-centric Applications/APIs which can be easily\nobserved/interacted with through a graphical or non-graphical user interface.</p>\n<div>\n<p>Note</p>\n<p><cite>Objetto</cite> is currently in alpha. Use it at your own risk!</p>\n</div>\n<div>\n<p>Note</p>\n<p><cite>Objetto</cite> is compatible with Python 2.7 and higher (including Python 3).\nEven though Python 2.7 is now deprecated, it is still widely in use by Visual\nEffects pipelines, which can benefit from <cite>Objetto</cite>.\nTherefore, support for it will be maintained until a full transition takes place.</p>\n</div>\n<p>Take a look at the <a href=\"#examples\" rel=\"nofollow\">Examples</a> to see it in practice.</p>\n<dl>\n<dt><cite>Objetto</cite> takes some inspiration from projects like:</dt>\n<dd><ul>\n<li><a href=\"https://www.attrs.org/\" rel=\"nofollow\">attrs</a></li>\n<li><a href=\"https://docs.python.org/3/library/dataclasses.html\" rel=\"nofollow\">Python 3 Data Classes</a></li>\n<li><a href=\"https://github.com/tobgu/pyrsistent/\" rel=\"nofollow\">pyrsistent</a></li>\n<li><a href=\"https://github.com/dgovil/PySignal\" rel=\"nofollow\">PySignal</a></li>\n<li><a href=\"https://reactjs.org/\" rel=\"nofollow\">React</a></li>\n<li><a href=\"https://facebook.github.io/flux/\" rel=\"nofollow\">Flux</a></li>\n</ul>\n</dd>\n</dl>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p><cite>Objetto</cite> provides an easy way to define a high-level mutable data structure referred to\nas <a href=\"#object\" rel=\"nofollow\">Object</a>, which offers features related to data access, consistency, validation, and\nmonitoring.</p>\n<div id=\"hierarchy-and-ownership\">\n<h3>Hierarchy and Ownership</h3>\n<p>An object can be \u2018owned\u2019 by another object in a parent-children tree hierarchy.\nThis can help preventing them from being mistakenly re-used as data in an object other\nthan its owner (if that behavior is desired).</p>\n<p>The parent-children hierarchy also provides a good way to structure your data, prevents\ncycles, and eases processes like serialization and application-wide validation.</p>\n<p>An object\u2019s hierarchy can be accessed through its <cite>.hierarchy</cite> property.</p>\n</div>\n<div id=\"schema-validation\">\n<h3>Schema &amp; Validation</h3>\n<p>Objects provide a variety of mechanisms to define schema and to validate your data.\nThe mantra here is that the client code using a well-written Application/API created\nwith <cite>Objetto</cite> should not be concerned about leaving it in a bad state.</p>\n<p>One way to implement validation is to make use of the <cite>value_type</cite> and/or\n<cite>value_factory</cite> parameters when defining <a href=\"#attributes\" rel=\"nofollow\">Attributes</a>.</p>\n</div>\n<div id=\"event-emission\">\n<h3>Event Emission</h3>\n<p>Every time an object gets mutated, it will automatically emit events that describe its\nmutation. Listeners can hook up to objects so they react when they receive those events.</p>\n<p>This is useful for triggering reactive behaviors that are internal to the\nApplication/API, but also for external systems that interact with the objects, such as\ngraphical user interfaces, controllers, or even other external objects.</p>\n<p>Each object type has a standardized set of event types that it emits, making it easy\nto build generic listeners that react to different objects with similar interfaces.</p>\n<p>An object\u2019s event emitter can be accessed through its <cite>.events</cite> property.\nEvent types can be imported from the <cite>objetto.events</cite> module.</p>\n</div>\n<div id=\"undo-redo-history\">\n<h3>Undo/Redo History</h3>\n<p>Objetto has built-in support for a undo/redo command history. It takes care of managing\nits validity for internal data changes by flushing itself automatically when necessary,\nand it is extremely easy to implement.</p>\n<p>A history can be added to an object by adding a <cite>history_attribute</cite> to its definition.\nAccessing that attribute from an object\u2019s instance will give you the <cite>History</cite> itself.</p>\n</div>\n<div id=\"object\">\n<h3>Object</h3>\n<p>Objects are the building blocks of any <cite>Objetto</cite> Application/API.</p>\n<p><cite>objetto.Object</cite> is the most important class, and the one you will probably be dealing\nwith the most. Its internal state is curated by <a href=\"#attributes\" rel=\"nofollow\">Attributes</a> defined in sub-classes.</p>\n<div>\n<p>Note</p>\n<p>There are other object types that are used internally by attribute factories, known\nas containers, such as: <cite>ListObject</cite>, <cite>DictObject</cite>, and <cite>SetObject</cite>.\nThese classes can be imported from the <cite>objetto.objects</cite> module if you want to\ncreate advanced custom attribute factories or define custom behaviors.</p>\n</div>\n</div>\n<div id=\"attributes\">\n<h3>Attributes</h3>\n<p>Attributes define the schema of an object class. Some of them can be delegated, meaning\nthat they can behave as properties.\nHere are some of the attribute factories that <cite>Objetto</cite> offers:</p>\n<blockquote>\n<ul>\n<li>attribute</li>\n<li>history_attribute</li>\n<li>constant_attribute</li>\n<li>permanent_attribute</li>\n<li>protected_attribute_pair</li>\n<li>list_attribute</li>\n<li>protected_list_attribute_pair</li>\n<li>dict_attribute</li>\n<li>protected_dict_attribute_pair</li>\n<li>set_attribute</li>\n<li>protected_set_attribute_pair</li>\n<li>dependencies (decorator to define dependencies for an attribute\u2019s delegate)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"value-factories\">\n<h3>Value Factories</h3>\n<p>Value factories can be used for conforming/validating an input value when setting an\nattribute. They can be imported from <cite>objetto.factories</cite>.\nHere are some of the value factories that <cite>Objetto</cite> offers:</p>\n<blockquote>\n<ul>\n<li>integer</li>\n<li>floating_point</li>\n<li>regex_match</li>\n<li>regex_sub</li>\n<li>curated</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"reactions\">\n<h3>Reactions</h3>\n<p>Reactions are pre-defined recipes that listen to events from container objects, reacting\nto them in a certain way.\nHere are some of the reactions that <cite>Objetto</cite> offers:</p>\n<blockquote>\n<ul>\n<li>unique_attributes</li>\n<li>limit</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Here\u2019s how to define a simple <cite>Person</cite> object class with two string attributes.\nNotice how we are using the <cite>value_type</cite> parameter to implement type checking.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto</span> <span class=\"kn\">import</span> <span class=\"n\">Object</span><span class=\"p\">,</span> <span class=\"n\">attribute</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">first_name</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">last_name</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"George\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Person</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'George'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Byron'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Let\u2019s make it a little bit more complex by adding a <cite>full_name</cite> delegated attribute and\na regex validation <cite>value_factory</cite> for <cite>first_name</cite> and <cite>last_name</cite> attributes.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto</span> <span class=\"kn\">import</span> <span class=\"n\">dependencies</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto.factories</span> <span class=\"kn\">import</span> <span class=\"n\">regex_match</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">NAME_REGEX</span> <span class=\"o\">=</span> <span class=\"sa\">r</span><span class=\"s2\">\"^[A-Z][a-zA-Z]*$\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_factory</span><span class=\"o\">=</span><span class=\"n\">regex_match</span><span class=\"p\">(</span><span class=\"n\">NAME_REGEX</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_factory</span><span class=\"o\">=</span><span class=\"n\">regex_match</span><span class=\"p\">(</span><span class=\"n\">NAME_REGEX</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">delegated</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@full_name</span><span class=\"o\">.</span><span class=\"n\">getter</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@dependencies</span><span class=\"p\">(</span><span class=\"n\">gets</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\" \"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@full_name</span><span class=\"o\">.</span><span class=\"n\">setter</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@dependencies</span><span class=\"p\">(</span><span class=\"n\">sets</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">full_name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">last_name</span> <span class=\"o\">=</span> <span class=\"n\">full_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"n\">full_name</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"George Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Person</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'George'</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s1\">'George Byron'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Byron'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">first_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Ada\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Person</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Ada'</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s1\">'Ada Byron'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Byron'</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">person</span><span class=\"o\">.</span><span class=\"n\">full_name</span> <span class=\"o\">=</span> <span class=\"s2\">\"Ada Lovelace\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">person</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Person</span> <span class=\"n\">first_name</span><span class=\"o\">=</span><span class=\"s1\">'Ada'</span><span class=\"p\">,</span> <span class=\"n\">full_name</span><span class=\"o\">=</span><span class=\"s1\">'Ada Lovelace'</span><span class=\"p\">,</span> <span class=\"n\">last_name</span><span class=\"o\">=</span><span class=\"s1\">'Lovelace'</span><span class=\"o\">&gt;</span>\n</pre>\n<p>Now, let\u2019s start creating a hierarchy of objects by creating the class <cite>Father</cite>,\nwhich extends <cite>Person</cite> by defining children in a <cite>list_attribute</cite>.\nNot how we used a <cite>unique_attributes</cite> reaction in order to enforce a validation that\nprevents siblings from having the same full name.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto</span> <span class=\"kn\">import</span> <span class=\"n\">list_attribute</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto.reactions</span> <span class=\"kn\">import</span> <span class=\"n\">unique_attributes</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Father</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">children</span> <span class=\"o\">=</span> <span class=\"n\">list_attribute</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>         <span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"n\">Person</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>         <span class=\"n\">reaction</span><span class=\"o\">=</span><span class=\"n\">unique_attributes</span><span class=\"p\">(</span><span class=\"s2\">\"full_name\"</span><span class=\"p\">),</span>\n<span class=\"o\">...</span>         <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n<span class=\"o\">...</span>     <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">elizabeth</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Elizabeth Leigh\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ada</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Ada Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">clara</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Clara Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">george</span> <span class=\"o\">=</span> <span class=\"n\">Father</span><span class=\"p\">(</span><span class=\"s2\">\"George Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">george</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">elizabeth</span><span class=\"p\">,</span> <span class=\"n\">ada</span><span class=\"p\">,</span> <span class=\"n\">clara</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">george_children</span> <span class=\"o\">=</span> <span class=\"n\">george</span><span class=\"o\">.</span><span class=\"n\">children</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">elizabeth</span><span class=\"o\">.</span><span class=\"n\">hierarchy</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"ow\">is</span> <span class=\"n\">george</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">george</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">hierarchy</span><span class=\"o\">.</span><span class=\"n\">parent</span> <span class=\"ow\">is</span> <span class=\"n\">george</span><span class=\"p\">)</span>\n<span class=\"kc\">True</span>\n</pre>\n<p>Let\u2019s define an object that will represent the top of the hierarchy and implement a\nhistory so we can utilize undo/redo capabilities for all of its members.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">objetto</span> <span class=\"kn\">import</span> <span class=\"n\">history_attribute</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">Family</span><span class=\"p\">(</span><span class=\"n\">Object</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"n\">history</span> <span class=\"o\">=</span> <span class=\"n\">history_attribute</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>     <span class=\"n\">father</span> <span class=\"o\">=</span> <span class=\"n\">attribute</span><span class=\"p\">(</span><span class=\"n\">value_type</span><span class=\"o\">=</span><span class=\"n\">Father</span><span class=\"p\">,</span> <span class=\"n\">parent</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">father</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">father</span> <span class=\"o\">=</span> <span class=\"n\">father</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span> <span class=\"o\">=</span> <span class=\"n\">Family</span><span class=\"p\">(</span><span class=\"n\">Father</span><span class=\"p\">(</span><span class=\"s2\">\"George Byron\"</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">elizabeth</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Elizabeth Leigh\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ada</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Ada Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">clara</span> <span class=\"o\">=</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"Clara Byron\"</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">elizabeth</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">ada</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">clara</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">))</span>\n<span class=\"mi\">3</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">undo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">))</span>\n<span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">undo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">))</span>\n<span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"o\">.</span><span class=\"n\">undo</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">family</span><span class=\"o\">.</span><span class=\"n\">father</span><span class=\"o\">.</span><span class=\"n\">children</span><span class=\"p\">))</span>\n<span class=\"mi\">0</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7168212, "releases": {"0.0.4": [{"comment_text": "", "digests": {"md5": "1e85a1f054f05b93098dce9c53b753c6", "sha256": "cce2928ee42518191d4425d051386e1e9b06022ad7c1e24ebc8073113905cf11"}, "downloads": -1, "filename": "objetto-0.0.4.tar.gz", "has_sig": false, "md5_digest": "1e85a1f054f05b93098dce9c53b753c6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50448, "upload_time": "2020-05-03T19:50:59", "upload_time_iso_8601": "2020-05-03T19:50:59.754667Z", "url": "https://files.pythonhosted.org/packages/77/23/e6bce365295a6563fd35620c2f59f85a5f6c778a642f1491e51cdc045064/objetto-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "80d4b0d35bac34a4346f314c6c010e56", "sha256": "7ec07f6267fc0825667da79e6233de6b94a75c904fbede4e71dabd3d73ddaa5a"}, "downloads": -1, "filename": "objetto-0.0.5.tar.gz", "has_sig": false, "md5_digest": "80d4b0d35bac34a4346f314c6c010e56", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50466, "upload_time": "2020-05-03T19:57:08", "upload_time_iso_8601": "2020-05-03T19:57:08.800085Z", "url": "https://files.pythonhosted.org/packages/bb/78/6b480b273b16d72408cf4e8e178d8676b69cdf3ff441b99c451810ad8600/objetto-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "f73c9f0a86252d87e0ff33b3616d7553", "sha256": "b71b759d9a8b71219749e503407d864ff6b38c1f81ef5649943a1fd30424d190"}, "downloads": -1, "filename": "objetto-0.0.6.tar.gz", "has_sig": false, "md5_digest": "f73c9f0a86252d87e0ff33b3616d7553", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50516, "upload_time": "2020-05-03T20:10:20", "upload_time_iso_8601": "2020-05-03T20:10:20.543401Z", "url": "https://files.pythonhosted.org/packages/c0/ed/51b4df672ac2f4b2e70bb93dfc38e7a1a2d6e81a1f46e618f1770d6eecab/objetto-0.0.6.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "83866673ac6d3e8888e0e14b31cd990e", "sha256": "4b7d5bb579718e8e5e93155bedc35d616241a38e7f414316b036392a8fb72f5d"}, "downloads": -1, "filename": "objetto-0.1.0.tar.gz", "has_sig": false, "md5_digest": "83866673ac6d3e8888e0e14b31cd990e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50683, "upload_time": "2020-05-04T22:21:03", "upload_time_iso_8601": "2020-05-04T22:21:03.133567Z", "url": "https://files.pythonhosted.org/packages/ea/06/bf67f9a0c2b9fcd6c3800c1b38f84011e4637fe996713ba24364fee3bbed/objetto-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "57cec4a9bda5f0550063c32e2661ed22", "sha256": "b924a77d6ffb1d0c08fba7b9327b0c3122b3b48a546f43df045bc942291456a9"}, "downloads": -1, "filename": "objetto-0.1.1.tar.gz", "has_sig": false, "md5_digest": "57cec4a9bda5f0550063c32e2661ed22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50714, "upload_time": "2020-05-04T22:32:16", "upload_time_iso_8601": "2020-05-04T22:32:16.458480Z", "url": "https://files.pythonhosted.org/packages/8e/b5/4392e7efc37a004b0685ca5b2b4154227606859a9d85a61e4c793d385913/objetto-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57cec4a9bda5f0550063c32e2661ed22", "sha256": "b924a77d6ffb1d0c08fba7b9327b0c3122b3b48a546f43df045bc942291456a9"}, "downloads": -1, "filename": "objetto-0.1.1.tar.gz", "has_sig": false, "md5_digest": "57cec4a9bda5f0550063c32e2661ed22", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 50714, "upload_time": "2020-05-04T22:32:16", "upload_time_iso_8601": "2020-05-04T22:32:16.458480Z", "url": "https://files.pythonhosted.org/packages/8e/b5/4392e7efc37a004b0685ca5b2b4154227606859a9d85a61e4c793d385913/objetto-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:48 2020"}