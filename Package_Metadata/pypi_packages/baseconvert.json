{"info": {"author": "Joshua Deakin", "author_email": "contact@joshuadeakin.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Education", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3 :: Only", "Topic :: Education", "Topic :: Scientific/Engineering :: Mathematics"], "description": "baseconvert\n===========\n\nConvert any rational number, from any (positive integer) base, to any\n(positive integer) base. Output numbers as tuple or string.\n\n-  Any rational number\n-  Arbitrary precision\n-  Fractions\n-  Recurring/repeating fractional digits.\n-  Input numbers as tuple or string or number.\n-  Output numbers as tuple or string.\n\nMIT License (MIT) Copyright (c) 2016 Joshua Deakin\n\n`github <https://github.com/squdle/baseconvert>`__\n\ncontact@joshuadeakin.com\n\nRequires\n--------\n\n-  Python 3\n\nInstall / Uninstall\n-------------------\n\nInstall:\n\n::\n\n    pip install baseconvert\n\nUninstall:\n\n::\n\n    pip uninstall baseconvert\n\nQuickstart\n----------\n\n::\n\n    # base(number, input_base, output_base)\n\n    >>> base((15, 15, 0, \".\", 8), 16, 10)\n    (4, 0, 8, 0, '.', 5)\n\n    >>> base(\"FF0.8\", 16, 10, string=True)\n    '4080.5'\n\n    >>> base(\"4080.5\", 10, 16, string=True)\n    'FF0.8'\n\nOr from command line\n\n::\n\n     $ echo 4080.5 | python -m baseconvert -i 10 -o 16\n     FF0.8\n\n     $ python -m baseconvert -n 4080.5 -i 10 -o 16\n     FF0.8\n\nTuple representation\n--------------------\n\nNumbers are represented as a sequence of digits. Each digit is a base-10\ninteger value. The radix point, which separates the integer and\nfractional parts, is denoted by a string period.\n\n::\n\n     (int, int, int, ... , '.', ... , int, int, int)\n     (   integer part    , '.',  fractional part   )\n\nString representation\n---------------------\n\nString digits (after z the values are in ascending Unicode):\n\n::\n\n    0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\n    |  Value  | Representation |\n    |---------|----------------|\n    |  0 -  9 |    0  -  9     |\n    | 10 - 53 |    A  -  Z     |\n    | 36 - 61 |    a  -  z     |\n    | 62 +    | unicode 123 +  |\n\n    For bases higher than 61 it's recommended to use tuple representation.\n\nExamples\n--------\n\n::\n\n    # base(number, input_base, output_base)\n    >>> n = (15,15,\".\",0,8)\n    >>> base(n, 16, 10)\n    (2, 5, 5, '.', 0, 3, 1, 2, 5)\n    >>> base(n, 16, 10, string=True)\n    '255.03125'\n\n    >>> base(\"FF.08\", 16, 10) == base((15,15,\".\",0,8), 16, 10)\n    True\n\n    # A callable BaseConverter object can also be created.\n    # This is useful for when several numbers need to be converted.\n\n    >>> b = BaseConverter(input_base=16, output_base=8)\n    >>> b(\"FF\")\n    (3, 7, 7)\n    >>> b((15, 15))\n    (3, 7, 7)\n    >>> b(\"FF\") == b((15,15))\n    True\n\n    >>> base(0.1, 3, 10, string=True)\n    '0.[3]'\n\nRecurring digits\n~~~~~~~~~~~~~~~~\n\nRecurring digits at the end of a fractional part will be enclosed by \"[\"\nand \"]\" in both string and tuple representation. This behavior can be\nturned off by setting the recurring argument of base or BaseConverter\nobject to False.\n\n::\n\n    >>> base(\"0.1\", 3, 10, string=True)\n    '0.[3]'\n    >>> base(\"0.1\", 3, 10, string=True, recurring=False)\n    '0.3333333333'\n\nMax fractional depth\n~~~~~~~~~~~~~~~~~~~~\n\nInteger parts are always of arbitrary size. Fractional depth (number of\ndigits) can must be specified by setting the max\\_depth argument of base\nor a BaseConverter object (default 10).\n\n::\n\n    >>> base(\"0.2\", 10, 8)\n    (0, '.', 1, 4, 6, 3, 1, 4, 6, 3, 1, 4)\n    >>> base(\"0.2\", 10, 8, max_depth=1)\n    (0, '.', 1)", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/squdle/baseconvert.git", "keywords": "base bases radix numeral system number hex dec bin hexidecimalbinary decimal fraction fractions integer convert", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "baseconvert", "package_url": "https://pypi.org/project/baseconvert/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/baseconvert/", "project_urls": {"Homepage": "https://github.com/squdle/baseconvert.git"}, "release_url": "https://pypi.org/project/baseconvert/1.0.0a4/", "requires_dist": null, "requires_python": "", "summary": "Convert numbers between bases.", "version": "1.0.0a4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Convert any rational number, from any (positive integer) base, to any\n(positive integer) base. Output numbers as tuple or string.</p>\n<ul>\n<li>Any rational number</li>\n<li>Arbitrary precision</li>\n<li>Fractions</li>\n<li>Recurring/repeating fractional digits.</li>\n<li>Input numbers as tuple or string or number.</li>\n<li>Output numbers as tuple or string.</li>\n</ul>\n<p>MIT License (MIT) Copyright (c) 2016 Joshua Deakin</p>\n<p><a href=\"https://github.com/squdle/baseconvert\" rel=\"nofollow\">github</a></p>\n<p><a href=\"mailto:contact%40joshuadeakin.com\">contact<span>@</span>joshuadeakin<span>.</span>com</a></p>\n<div id=\"requires\">\n<h2>Requires</h2>\n<ul>\n<li>Python 3</li>\n</ul>\n</div>\n<div id=\"install-uninstall\">\n<h2>Install / Uninstall</h2>\n<p>Install:</p>\n<pre>pip install baseconvert\n</pre>\n<p>Uninstall:</p>\n<pre>pip uninstall baseconvert\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<pre># base(number, input_base, output_base)\n\n&gt;&gt;&gt; base((15, 15, 0, \".\", 8), 16, 10)\n(4, 0, 8, 0, '.', 5)\n\n&gt;&gt;&gt; base(\"FF0.8\", 16, 10, string=True)\n'4080.5'\n\n&gt;&gt;&gt; base(\"4080.5\", 10, 16, string=True)\n'FF0.8'\n</pre>\n<p>Or from command line</p>\n<pre>$ echo 4080.5 | python -m baseconvert -i 10 -o 16\nFF0.8\n\n$ python -m baseconvert -n 4080.5 -i 10 -o 16\nFF0.8\n</pre>\n</div>\n<div id=\"tuple-representation\">\n<h2>Tuple representation</h2>\n<p>Numbers are represented as a sequence of digits. Each digit is a base-10\ninteger value. The radix point, which separates the integer and\nfractional parts, is denoted by a string period.</p>\n<pre>(int, int, int, ... , '.', ... , int, int, int)\n(   integer part    , '.',  fractional part   )\n</pre>\n</div>\n<div id=\"string-representation\">\n<h2>String representation</h2>\n<p>String digits (after z the values are in ascending Unicode):</p>\n<pre>0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz\n\n|  Value  | Representation |\n|---------|----------------|\n|  0 -  9 |    0  -  9     |\n| 10 - 53 |    A  -  Z     |\n| 36 - 61 |    a  -  z     |\n| 62 +    | unicode 123 +  |\n\nFor bases higher than 61 it's recommended to use tuple representation.\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre># base(number, input_base, output_base)\n&gt;&gt;&gt; n = (15,15,\".\",0,8)\n&gt;&gt;&gt; base(n, 16, 10)\n(2, 5, 5, '.', 0, 3, 1, 2, 5)\n&gt;&gt;&gt; base(n, 16, 10, string=True)\n'255.03125'\n\n&gt;&gt;&gt; base(\"FF.08\", 16, 10) == base((15,15,\".\",0,8), 16, 10)\nTrue\n\n# A callable BaseConverter object can also be created.\n# This is useful for when several numbers need to be converted.\n\n&gt;&gt;&gt; b = BaseConverter(input_base=16, output_base=8)\n&gt;&gt;&gt; b(\"FF\")\n(3, 7, 7)\n&gt;&gt;&gt; b((15, 15))\n(3, 7, 7)\n&gt;&gt;&gt; b(\"FF\") == b((15,15))\nTrue\n\n&gt;&gt;&gt; base(0.1, 3, 10, string=True)\n'0.[3]'\n</pre>\n<div id=\"recurring-digits\">\n<h3>Recurring digits</h3>\n<p>Recurring digits at the end of a fractional part will be enclosed by \u201c[\u201d\nand \u201c]\u201d in both string and tuple representation. This behavior can be\nturned off by setting the recurring argument of base or BaseConverter\nobject to False.</p>\n<pre>&gt;&gt;&gt; base(\"0.1\", 3, 10, string=True)\n'0.[3]'\n&gt;&gt;&gt; base(\"0.1\", 3, 10, string=True, recurring=False)\n'0.3333333333'\n</pre>\n</div>\n<div id=\"max-fractional-depth\">\n<h3>Max fractional depth</h3>\n<p>Integer parts are always of arbitrary size. Fractional depth (number of\ndigits) can must be specified by setting the max_depth argument of base\nor a BaseConverter object (default 10).</p>\n<pre>&gt;&gt;&gt; base(\"0.2\", 10, 8)\n(0, '.', 1, 4, 6, 3, 1, 4, 6, 3, 1, 4)\n&gt;&gt;&gt; base(\"0.2\", 10, 8, max_depth=1)\n(0, '.', 1)\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2105529, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "86ef48008e1996e73aed34dc4a8cb570", "sha256": "e6e144180ac47a15b92c7d5e42acbc735617a8ab028b83763f4dd66d3e689930"}, "downloads": -1, "filename": "baseconvert-1.0.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "86ef48008e1996e73aed34dc4a8cb570", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11359, "upload_time": "2016-05-08T18:47:01", "upload_time_iso_8601": "2016-05-08T18:47:01.037226Z", "url": "https://files.pythonhosted.org/packages/8d/3d/cbbe948d44d051ed3f62df6054326fd321a818d90101969b6a0356f5ce40/baseconvert-1.0.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "022a607889e725c48acd334f58a3b7f0", "sha256": "87a71f321524b352017fa0a175d4399f46e262925054eb3c14c2492069a966b9"}, "downloads": -1, "filename": "baseconvert-1.0.0a1.zip", "has_sig": false, "md5_digest": "022a607889e725c48acd334f58a3b7f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15805, "upload_time": "2016-05-08T18:47:11", "upload_time_iso_8601": "2016-05-08T18:47:11.394371Z", "url": "https://files.pythonhosted.org/packages/53/23/4fb5aaad1c9fc28dc5f69756994ba4e18ff91a70c584a3001fe025b91b8d/baseconvert-1.0.0a1.zip", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "7d3336f362f3694418a8fd3faeb43d07", "sha256": "0791374ab1959cf94a901916ab3616a17412204735addc3335edeed2cacd9bd9"}, "downloads": -1, "filename": "baseconvert-1.0.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "7d3336f362f3694418a8fd3faeb43d07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11283, "upload_time": "2016-05-08T20:17:08", "upload_time_iso_8601": "2016-05-08T20:17:08.734112Z", "url": "https://files.pythonhosted.org/packages/9c/ab/ebc1c3fe2eb75e3d821c0aa9c5d6799075304d8f285fdf4d6ee0107b26f8/baseconvert-1.0.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "32d4a443dfbe8cfddbe731bd4f5235d4", "sha256": "08aeaf6995e2e97841dc0bb46ea1acc0eda62ad67c00a175953b654744acfa94"}, "downloads": -1, "filename": "baseconvert-1.0.0a2.zip", "has_sig": false, "md5_digest": "32d4a443dfbe8cfddbe731bd4f5235d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15729, "upload_time": "2016-05-08T20:17:39", "upload_time_iso_8601": "2016-05-08T20:17:39.167241Z", "url": "https://files.pythonhosted.org/packages/46/c0/5c48a6365e69fcb359a33c416428c57bccbbc35d4df72bc42c8088028708/baseconvert-1.0.0a2.zip", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "59735f3eafa7d60d4362442c01c3de27", "sha256": "a2aaa87e532c32764bbba03299decbdffaace2002d6141fd6a9006c32c5d71ca"}, "downloads": -1, "filename": "baseconvert-1.0.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "59735f3eafa7d60d4362442c01c3de27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11315, "upload_time": "2016-05-08T21:09:10", "upload_time_iso_8601": "2016-05-08T21:09:10.930447Z", "url": "https://files.pythonhosted.org/packages/7d/fa/1b037a4f7c01b58240e1bee496010e03cb628fbfeabcf10551a70ccecfb6/baseconvert-1.0.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "144955564685d9fbc41d9ed3a41193b5", "sha256": "cdf8c5aa9a9695877dfdebd345d80a0c118504bd18466c86473d49d78853c2be"}, "downloads": -1, "filename": "baseconvert-1.0.0a3.zip", "has_sig": false, "md5_digest": "144955564685d9fbc41d9ed3a41193b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15768, "upload_time": "2016-05-08T21:09:31", "upload_time_iso_8601": "2016-05-08T21:09:31.250847Z", "url": "https://files.pythonhosted.org/packages/d7/a1/1c2e4beb0ccad8d4f7ca0755a96e74ec99d3c3b932394f8d79762f018737/baseconvert-1.0.0a3.zip", "yanked": false}], "1.0.0a4": [{"comment_text": "", "digests": {"md5": "93130da1ea5c55961b8faaccb5e863e6", "sha256": "dfe64bcbe992d5e47bacdcac4964cce269345f25feaf2a31b17fcd480f03fe0f"}, "downloads": -1, "filename": "baseconvert-1.0.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "93130da1ea5c55961b8faaccb5e863e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11417, "upload_time": "2016-05-08T22:11:24", "upload_time_iso_8601": "2016-05-08T22:11:24.945504Z", "url": "https://files.pythonhosted.org/packages/62/25/801184475dfbbc3934eda49209a9a2b1cda533363530eb7666523a9ec10c/baseconvert-1.0.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "609b11a1c4ecc9f987cf9073a6826464", "sha256": "11be3eb631f18ff6254c4202cf134138eac183fe3b78344544a8c3e68233a361"}, "downloads": -1, "filename": "baseconvert-1.0.0a4.zip", "has_sig": false, "md5_digest": "609b11a1c4ecc9f987cf9073a6826464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15869, "upload_time": "2016-05-08T22:11:44", "upload_time_iso_8601": "2016-05-08T22:11:44.514786Z", "url": "https://files.pythonhosted.org/packages/3a/74/429483081a31c961066e9ed4857daa93df237868c15309e1b755ff8bc80d/baseconvert-1.0.0a4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "93130da1ea5c55961b8faaccb5e863e6", "sha256": "dfe64bcbe992d5e47bacdcac4964cce269345f25feaf2a31b17fcd480f03fe0f"}, "downloads": -1, "filename": "baseconvert-1.0.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "93130da1ea5c55961b8faaccb5e863e6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11417, "upload_time": "2016-05-08T22:11:24", "upload_time_iso_8601": "2016-05-08T22:11:24.945504Z", "url": "https://files.pythonhosted.org/packages/62/25/801184475dfbbc3934eda49209a9a2b1cda533363530eb7666523a9ec10c/baseconvert-1.0.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "609b11a1c4ecc9f987cf9073a6826464", "sha256": "11be3eb631f18ff6254c4202cf134138eac183fe3b78344544a8c3e68233a361"}, "downloads": -1, "filename": "baseconvert-1.0.0a4.zip", "has_sig": false, "md5_digest": "609b11a1c4ecc9f987cf9073a6826464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15869, "upload_time": "2016-05-08T22:11:44", "upload_time_iso_8601": "2016-05-08T22:11:44.514786Z", "url": "https://files.pythonhosted.org/packages/3a/74/429483081a31c961066e9ed4857daa93df237868c15309e1b755ff8bc80d/baseconvert-1.0.0a4.zip", "yanked": false}], "timestamp": "Thu May  7 18:14:50 2020"}