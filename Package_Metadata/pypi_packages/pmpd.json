{"info": {"author": "Jared Hall", "author_email": "jared@pyscape.com", "bugtrack_url": null, "classifiers": ["Development Status :: 1 - Planning", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Version Control", "Topic :: System :: Networking", "Topic :: System :: Shells", "Topic :: System :: Software Distribution", "Topic :: System :: Systems Administration", "Topic :: Terminals", "Topic :: Text Processing", "Topic :: Utilities"], "description": "****************************************************\npmpd: Git and Python Managed Project Deployments\n****************************************************\n\npmpd [git puhmp-eed] is a **command line interface for git deployments** \nthat release engineers can use to make life easier. It is heavily influenced by \nVincent Driessen's `branching model`_ and uses a syntax similar to `gitflow`_. \nIts goal is to simplify and streamline deployments of complex branching systems \nby making commands and actions as **human-friendly** as possible. It provides a \nsimple ``pmpd`` command that allows for merging and deploying branches to \nany number of distinct servers that are **connected by a common git server** \nlike `gitolite`_.\n\n.. contents::\n    :local:\n    :depth: 1\n    :backlinks: none\n\n=============\nMain Features\n=============\n\n* Expressive and intuitive syntax\n* Makes continuous integration easier\n* Release branches are pmpd out\n* Identify conflicting feature branches before release time\n* Automated pmpd deployments similar to Google's AppEngine approach\n* Multi server environments supported\n* Distributed branching model for large group collaborations\n\n============\nInstallation\n============\n\nThe latest **stable version** of pmpd can always be installed or updated to \nvia pip::\n\n    $ pip install --upgrade pmpd\n\n=============\nConfiguration\n=============\n\nAfter installation is complete pmpd puts **.pmpd/config.json** into the root \nof your repository. You may want to add the folder to .gitignore, but leaving it \nthere is also a good way to keep track of your build history. pmpd.conf is used \nto relate servers to reference branches and to specify which feature branches \nbelong in a given release. \n\nYou must fill out **.pmpd/config.json** so that it matches the flow of your own \ndeployments and you'll probably update this file in some way every time a new \nrelease is pmpd out.\n\n=====\nUsage\n=====\n\nInitialize::\n\n    $ pmpd\n\nSynopsis::\n\n    $ pmpd [flags] [METHOD] [BRANCH]\n\n\nSee also ``pmpd --help``\n\n--------\nExamples\n--------\n\nBuild an alpha release based on the current state of production::\n\n    $ pmpd build alpha\n\n=========\nResources\n=========\n\n* `pmpd GitHub`_\n* `pmpd PyPI`_\n* `pmpd PyScape`_\n\n============\nContributers\n============\n\nJared Hall, `PyScape`_\n\n.. _branching model:   http://nvie.com/git-model\n.. _gitflow:          https://github.com/nvie/gitflow\n.. _gitolite:         https://github.com/sitaramc/gitolite\n.. _PyScape:           http://www.pyscape.com/pmpd\n.. _pmpd GitHub:  https://github.com/jarederaj/pmpd\n.. _pmpd PyPI:    https://pypi.python.org/pypi/pmpd/\n.. _pmpd PyScape:  http://www.pyscape.com/pmpd", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/pmpd/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pmpd", "package_url": "https://pypi.org/project/pmpd/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pmpd/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/pmpd/"}, "release_url": "https://pypi.org/project/pmpd/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "pmpd [puhmp-eed] is a command line interface to deploy projects that use git.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>pmpd [git puhmp-eed] is a <strong>command line interface for git deployments</strong>\nthat release engineers can use to make life easier. It is heavily influenced by\nVincent Driessen\u2019s <a href=\"http://nvie.com/git-model\" rel=\"nofollow\">branching model</a> and uses a syntax similar to <a href=\"https://github.com/nvie/gitflow\" rel=\"nofollow\">gitflow</a>.\nIts goal is to simplify and streamline deployments of complex branching systems\nby making commands and actions as <strong>human-friendly</strong> as possible. It provides a\nsimple <tt>pmpd</tt> command that allows for merging and deploying branches to\nany number of distinct servers that are <strong>connected by a common git server</strong>\nlike <a href=\"https://github.com/sitaramc/gitolite\" rel=\"nofollow\">gitolite</a>.</p>\n<div id=\"contents\">\n<ul>\n<li><a href=\"#main-features\" id=\"id1\" rel=\"nofollow\">Main Features</a></li>\n<li><a href=\"#installation\" id=\"id2\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#configuration\" id=\"id3\" rel=\"nofollow\">Configuration</a></li>\n<li><a href=\"#usage\" id=\"id4\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#resources\" id=\"id5\" rel=\"nofollow\">Resources</a></li>\n<li><a href=\"#contributers\" id=\"id6\" rel=\"nofollow\">Contributers</a></li>\n</ul>\n</div>\n<div id=\"main-features\">\n<h2>Main Features</h2>\n<ul>\n<li>Expressive and intuitive syntax</li>\n<li>Makes continuous integration easier</li>\n<li>Release branches are pmpd out</li>\n<li>Identify conflicting feature branches before release time</li>\n<li>Automated pmpd deployments similar to Google\u2019s AppEngine approach</li>\n<li>Multi server environments supported</li>\n<li>Distributed branching model for large group collaborations</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The latest <strong>stable version</strong> of pmpd can always be installed or updated to\nvia pip:</p>\n<pre>$ pip install --upgrade pmpd\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>After installation is complete pmpd puts <strong>.pmpd/config.json</strong> into the root\nof your repository. You may want to add the folder to .gitignore, but leaving it\nthere is also a good way to keep track of your build history. pmpd.conf is used\nto relate servers to reference branches and to specify which feature branches\nbelong in a given release.</p>\n<p>You must fill out <strong>.pmpd/config.json</strong> so that it matches the flow of your own\ndeployments and you\u2019ll probably update this file in some way every time a new\nrelease is pmpd out.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Initialize:</p>\n<pre>$ pmpd\n</pre>\n<p>Synopsis:</p>\n<pre>$ pmpd [flags] [METHOD] [BRANCH]\n</pre>\n<p>See also <tt>pmpd <span class=\"pre\">--help</span></tt></p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>Build an alpha release based on the current state of production:</p>\n<pre>$ pmpd build alpha\n</pre>\n</div>\n</div>\n<div id=\"resources\">\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://github.com/jarederaj/pmpd\" rel=\"nofollow\">pmpd GitHub</a></li>\n<li><a href=\"https://pypi.python.org/pypi/pmpd/\" rel=\"nofollow\">pmpd PyPI</a></li>\n<li><a href=\"http://www.pyscape.com/pmpd\" rel=\"nofollow\">pmpd PyScape</a></li>\n</ul>\n</div>\n<div id=\"contributers\">\n<h2>Contributers</h2>\n<p>Jared Hall, <a href=\"http://www.pyscape.com/pmpd\" rel=\"nofollow\">PyScape</a></p>\n</div>\n\n          </div>"}, "last_serial": 810084, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 02:52:16 2020"}