{"info": {"author": "Milind Thakur", "author_email": "milindat28@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet", "Topic :: Scientific/Engineering", "Topic :: Software Development", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Acceptance"], "description": "# **Skynet - Test Automation Library @ [NZME](https://www.nzme.co.nz/)**\n\n[![Build Status](https://travis-ci.org/MilindThakur/nzme-skynet.svg?branch=master)](https://travis-ci.org/MilindThakur/nzme-skynet)\n[![codecov](https://codecov.io/gh/MilindThakur/nzme-skynet/branch/master/graph/badge.svg)](https://codecov.io/gh/MilindThakur/nzme-skynet)\n\n## **Features included:**\n* A python3.6+ library to automate web apps and mobile apps across range of browsers and devices\n* Scripts to automate visual testing\n* Out of box integration with cloud testing (e.g. Sauce Labs)\n* Plugin to run REST api calls\n* Support for BDD scenarios and parallel execution run\n* Support for Mobile app testing, see [Mobile app readme](docs/howto_mobile_tests.md)\n* Capture and manipulate HTTP traffic using browsermob-proxy \n\n## **Install Skynet package:**\n Install from source.\n \n        $ git clone <repo>\n        $ cd skynet\n        $ python setup.py install \n\n## **Setup instructions**\n\n### **Install pip, web browsers, Emulators**\n* Python 3.6+\n* Download [Chrome browser](https://www.google.com/chrome/browser/desktop/index.html) and [Chrome Driver](https://sites.google.com/a/chromium.org/chromedriver/)\n* Download Firefox. Firefox > v.47 requires [Marionette](https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette) driver\n* To verify drivers are working [check these instructions](https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/verify_webdriver.md)\n* Install [mobile dependencies](docs/howto_mobile_tests.md) or docker solution e.g. [Selenoid Android](https://aerokube.com/selenoid/latest/#_android),\n[docker-android](https://github.com/budtmo/docker-android)\n* (optional) Install Selenium Grid of choice e.g. [Zalenium](https://github.com/zalando/zalenium),\n[Selenoid](https://github.com/aerokube/selenoid), [docker-selenium](https://github.com/SeleniumHQ/docker-selenium) etc\n\n\n        $ git clone <repo>\n        $ cd skynet\n        $ python3 -m venv skynet3-env\n        $ source skynet3-env/bin/activate\n        (skynet3-env) $ pip install -U pip\n        (skynet3-env) $ pip install pipenv\n        (skynet3-env) $ pipenv sync --dev\n     \n## **Run Tests**\n\nYou can run all of the tests via `tox` in your local\n\n        (skynet3-env) $ deactivate\n        $ sudo apt install python-tox\n        $ tox\n\nFor detailed run:\n\nSetup test env\n\n        $ source skynet3-env/bin/activate\n        (skynet3-env) $ ./docker_compose.sh start\n        (skynet3-env) $ curl -sSL http://localhost:4444/wd/hub/status | jq .value.ready | grep true\n        \nRun tests (with coverage)\n\n        (skynet3-env) $ py.test -vvv --cov=nzme_skynet test     \n        \nTo run all the tests in parallel\n\n        (skynet3-env) $ py.test -n <no_of_parallel_processes> test\n\nTo run individual tests\n\n        (skynet3-env) $ py.text -q test/<test_name.py>\n        \nTeardown test env\n\n        (skynet3-env) $ ./docker_compose.sh stop\n\n## **BDD Test Setup**\n\nTest setup is managed in a default configuration file _testsetup.ini_ which can be overridden on commandline.\n\n```\n#------- Desktop Platforms -------#\n[BROWSER]\n#- Generic Selenium/Cloud capabilities -#\ncapabilities =  {\n                \"browserName\": \"chrome\",\n                \"version\": \"ANY\",\n                \"platform\": \"ANY\",\n                \"goog:chromeOptions\" : {\n                    \"args\": [\"--disable-gpu\"],\n                    \"extensions\": [],\n                    \"prefs\": {}\n                    }\n                }\n#- Framework specific capabilities -#\nhighlight = true\nresolution = maximum # e.g. maximum, 1126x830\nheadless = false\nmobileEmulation = # e.g. iPhone X, Galaxy S5 etc\n\n#------- Mobile Platforms -------#\n#- Generic Appium capabilities -#\n[ANDROID]\ncapabilities = {\n                \"platformName\": \"Android\",\n                \"platformVersion\": \"8.1\",\n                \"deviceName\": \"Device 01\"\n                \"udid\": \"emulator-5554\",\n                \"appPackage\": \"appPackage\",\n                \"appActivity\": \"appActivity\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n[IOS]\ncapabilities = {\n                \"platformName\": \"iOS\",\n                \"platformVersion\": \"11.0\",\n                \"deviceName\": \"iPhone 7\",\n                \"automationName\": \"XCUITest\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n#------- Environmental -------#\n#- Framework specific capabilities -#\n[ENVIRONMENT]\ntesturl=https://www.google.co.nz/\nlocal=true\nselenium_grid_hub=http://127.0.0.1:4444/wd/hub\nzalenium=false\n```\nThe capabilities key is \"free-form\" selenium/appium/cloud capabilities key-value pair that is passed on to the\nframework. \n\nFor desktop tests, one can remove the sections [Android] and [IOS], similarly for mobile tests\none can remove the section [BROWSER]. The section [ENVIRONMENT] is however mandatory.\n\nOne can also have separate \"_testsetup.ini_\" files for different runs e.g. _testsetup_browserstack.ini_ with browserstack\nspecific capabilities only, or _testsetup_android.ini_ for android tests. This custom .ini can be passed as a \ncommand line parameter for behave tests.\n\n    (skynet3-env) $ behave -D configfile=testsetup_browserstack.ini --tags=@p1\n    (skynet3-env) $ behave -D configfile=testsetup_android.ini --tags=@android-app --tags=@p1\n    \nThe capabilities and environment key value options can also be updated on the commandline.\n\n    (skynet3-env) $ behave -D browserName=firefox -D version=65.0 -D local=true -D headless=true --tags=@p1\n\n\n### **BDD Parallel Tests Run utility**\nAllows running BDD tests in parallel, hence saving on execution time.\n```bash\n(skynet3-env) $ nzme-behave-parallel -h\nusage: Run behave in parallel mode for scenarios [-h] [--processes PROCESSES]\n                                                 [--tags TAGS]\n                                                 [--define DEFINE]\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --processes PROCESSES, -p PROCESSES\n                        Maximum number of processes. Default = 5\n  --tags TAGS, -t TAGS  specify behave tags to run\n  --define DEFINE, -D DEFINE\n                        Define user-specific data for the config.userdata\n                        dictionary. Example: -D foo=bar to store it in\n                        config.userdata[\"foo\"].\n```\nE.g. to run 4 scenarios in parallel based on tags and override test configuration\n```bash\n(skynet3-env) $ nzme-behave-parallel -p 4 -t prod -D local=false -D browserName=firefox\n```\n\n### **Supported Tags for use with Behave**\nWe use Behave as our BDD Runner, while skynet does not require you to use it, it does have some extra support built in.\nYou can tag the scenarios/feature files with the following platform tags to initialise appropriate driver.  \n\nIf no platform tag is specified, then the default platform of web/browser is used.\n```\n@api\n@android-app\n@android-browser\n@ios-app\n@ios-browser\n   \n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MilindThakur/nzme-skynet", "keywords": "selenium,bdd,appium,browser automation,mobile automation", "license": "BSD 3-Clause License", "maintainer": "milindat28@gmail.com", "maintainer_email": "", "name": "nzme-skynet", "package_url": "https://pypi.org/project/nzme-skynet/", "platform": "", "project_url": "https://pypi.org/project/nzme-skynet/", "project_urls": {"Homepage": "https://github.com/MilindThakur/nzme-skynet"}, "release_url": "https://pypi.org/project/nzme-skynet/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "NZME Test Automation Library", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><strong>Skynet - Test Automation Library @ <a href=\"https://www.nzme.co.nz/\" rel=\"nofollow\">NZME</a></strong></h1>\n<p><a href=\"https://travis-ci.org/MilindThakur/nzme-skynet\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49d6b0a06acdb8473040facb1fc0952416660d64/68747470733a2f2f7472617669732d63692e6f72672f4d696c696e645468616b75722f6e7a6d652d736b796e65742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/MilindThakur/nzme-skynet\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9fe3bce29fdc52e1e7e185fbb3ca7b6eb8e652ed/68747470733a2f2f636f6465636f762e696f2f67682f4d696c696e645468616b75722f6e7a6d652d736b796e65742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<h2><strong>Features included:</strong></h2>\n<ul>\n<li>A python3.6+ library to automate web apps and mobile apps across range of browsers and devices</li>\n<li>Scripts to automate visual testing</li>\n<li>Out of box integration with cloud testing (e.g. Sauce Labs)</li>\n<li>Plugin to run REST api calls</li>\n<li>Support for BDD scenarios and parallel execution run</li>\n<li>Support for Mobile app testing, see <a href=\"docs/howto_mobile_tests.md\" rel=\"nofollow\">Mobile app readme</a></li>\n<li>Capture and manipulate HTTP traffic using browsermob-proxy</li>\n</ul>\n<h2><strong>Install Skynet package:</strong></h2>\n<p>Install from source.</p>\n<pre><code>    $ git clone &lt;repo&gt;\n    $ cd skynet\n    $ python setup.py install \n</code></pre>\n<h2><strong>Setup instructions</strong></h2>\n<h3><strong>Install pip, web browsers, Emulators</strong></h3>\n<ul>\n<li>\n<p>Python 3.6+</p>\n</li>\n<li>\n<p>Download <a href=\"https://www.google.com/chrome/browser/desktop/index.html\" rel=\"nofollow\">Chrome browser</a> and <a href=\"https://sites.google.com/a/chromium.org/chromedriver/\" rel=\"nofollow\">Chrome Driver</a></p>\n</li>\n<li>\n<p>Download Firefox. Firefox &gt; v.47 requires <a href=\"https://developer.mozilla.org/en-US/docs/Mozilla/QA/Marionette\" rel=\"nofollow\">Marionette</a> driver</p>\n</li>\n<li>\n<p>To verify drivers are working <a href=\"https://github.com/seleniumbase/SeleniumBase/blob/master/help_docs/verify_webdriver.md\" rel=\"nofollow\">check these instructions</a></p>\n</li>\n<li>\n<p>Install <a href=\"docs/howto_mobile_tests.md\" rel=\"nofollow\">mobile dependencies</a> or docker solution e.g. <a href=\"https://aerokube.com/selenoid/latest/#_android\" rel=\"nofollow\">Selenoid Android</a>,\n<a href=\"https://github.com/budtmo/docker-android\" rel=\"nofollow\">docker-android</a></p>\n</li>\n<li>\n<p>(optional) Install Selenium Grid of choice e.g. <a href=\"https://github.com/zalando/zalenium\" rel=\"nofollow\">Zalenium</a>,\n<a href=\"https://github.com/aerokube/selenoid\" rel=\"nofollow\">Selenoid</a>, <a href=\"https://github.com/SeleniumHQ/docker-selenium\" rel=\"nofollow\">docker-selenium</a> etc</p>\n<pre><code>  $ git clone &lt;repo&gt;\n  $ cd skynet\n  $ python3 -m venv skynet3-env\n  $ source skynet3-env/bin/activate\n  (skynet3-env) $ pip install -U pip\n  (skynet3-env) $ pip install pipenv\n  (skynet3-env) $ pipenv sync --dev\n</code></pre>\n</li>\n</ul>\n<h2><strong>Run Tests</strong></h2>\n<p>You can run all of the tests via <code>tox</code> in your local</p>\n<pre><code>    (skynet3-env) $ deactivate\n    $ sudo apt install python-tox\n    $ tox\n</code></pre>\n<p>For detailed run:</p>\n<p>Setup test env</p>\n<pre><code>    $ source skynet3-env/bin/activate\n    (skynet3-env) $ ./docker_compose.sh start\n    (skynet3-env) $ curl -sSL http://localhost:4444/wd/hub/status | jq .value.ready | grep true\n</code></pre>\n<p>Run tests (with coverage)</p>\n<pre><code>    (skynet3-env) $ py.test -vvv --cov=nzme_skynet test     \n</code></pre>\n<p>To run all the tests in parallel</p>\n<pre><code>    (skynet3-env) $ py.test -n &lt;no_of_parallel_processes&gt; test\n</code></pre>\n<p>To run individual tests</p>\n<pre><code>    (skynet3-env) $ py.text -q test/&lt;test_name.py&gt;\n</code></pre>\n<p>Teardown test env</p>\n<pre><code>    (skynet3-env) $ ./docker_compose.sh stop\n</code></pre>\n<h2><strong>BDD Test Setup</strong></h2>\n<p>Test setup is managed in a default configuration file <em>testsetup.ini</em> which can be overridden on commandline.</p>\n<pre><code>#------- Desktop Platforms -------#\n[BROWSER]\n#- Generic Selenium/Cloud capabilities -#\ncapabilities =  {\n                \"browserName\": \"chrome\",\n                \"version\": \"ANY\",\n                \"platform\": \"ANY\",\n                \"goog:chromeOptions\" : {\n                    \"args\": [\"--disable-gpu\"],\n                    \"extensions\": [],\n                    \"prefs\": {}\n                    }\n                }\n#- Framework specific capabilities -#\nhighlight = true\nresolution = maximum # e.g. maximum, 1126x830\nheadless = false\nmobileEmulation = # e.g. iPhone X, Galaxy S5 etc\n\n#------- Mobile Platforms -------#\n#- Generic Appium capabilities -#\n[ANDROID]\ncapabilities = {\n                \"platformName\": \"Android\",\n                \"platformVersion\": \"8.1\",\n                \"deviceName\": \"Device 01\"\n                \"udid\": \"emulator-5554\",\n                \"appPackage\": \"appPackage\",\n                \"appActivity\": \"appActivity\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n[IOS]\ncapabilities = {\n                \"platformName\": \"iOS\",\n                \"platformVersion\": \"11.0\",\n                \"deviceName\": \"iPhone 7\",\n                \"automationName\": \"XCUITest\",\n                \"app\": \"/path/to/my.app\"\n                }\n\n#------- Environmental -------#\n#- Framework specific capabilities -#\n[ENVIRONMENT]\ntesturl=https://www.google.co.nz/\nlocal=true\nselenium_grid_hub=http://127.0.0.1:4444/wd/hub\nzalenium=false\n</code></pre>\n<p>The capabilities key is \"free-form\" selenium/appium/cloud capabilities key-value pair that is passed on to the\nframework.</p>\n<p>For desktop tests, one can remove the sections [Android] and [IOS], similarly for mobile tests\none can remove the section [BROWSER]. The section [ENVIRONMENT] is however mandatory.</p>\n<p>One can also have separate \"<em>testsetup.ini</em>\" files for different runs e.g. <em>testsetup_browserstack.ini</em> with browserstack\nspecific capabilities only, or <em>testsetup_android.ini</em> for android tests. This custom .ini can be passed as a\ncommand line parameter for behave tests.</p>\n<pre><code>(skynet3-env) $ behave -D configfile=testsetup_browserstack.ini --tags=@p1\n(skynet3-env) $ behave -D configfile=testsetup_android.ini --tags=@android-app --tags=@p1\n</code></pre>\n<p>The capabilities and environment key value options can also be updated on the commandline.</p>\n<pre><code>(skynet3-env) $ behave -D browserName=firefox -D version=65.0 -D local=true -D headless=true --tags=@p1\n</code></pre>\n<h3><strong>BDD Parallel Tests Run utility</strong></h3>\n<p>Allows running BDD tests in parallel, hence saving on execution time.</p>\n<pre><span class=\"o\">(</span>skynet3-env<span class=\"o\">)</span> $ nzme-behave-parallel -h\nusage: Run behave in parallel mode <span class=\"k\">for</span> scenarios <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--processes PROCESSES<span class=\"o\">]</span>\n                                                 <span class=\"o\">[</span>--tags TAGS<span class=\"o\">]</span>\n                                                 <span class=\"o\">[</span>--define DEFINE<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --processes PROCESSES, -p PROCESSES\n                        Maximum number of processes. <span class=\"nv\">Default</span> <span class=\"o\">=</span> <span class=\"m\">5</span>\n  --tags TAGS, -t TAGS  specify behave tags to run\n  --define DEFINE, -D DEFINE\n                        Define user-specific data <span class=\"k\">for</span> the config.userdata\n                        dictionary. Example: -D <span class=\"nv\">foo</span><span class=\"o\">=</span>bar to store it in\n                        config.userdata<span class=\"o\">[</span><span class=\"s2\">\"foo\"</span><span class=\"o\">]</span>.\n</pre>\n<p>E.g. to run 4 scenarios in parallel based on tags and override test configuration</p>\n<pre><span class=\"o\">(</span>skynet3-env<span class=\"o\">)</span> $ nzme-behave-parallel -p <span class=\"m\">4</span> -t prod -D <span class=\"nv\">local</span><span class=\"o\">=</span><span class=\"nb\">false</span> -D <span class=\"nv\">browserName</span><span class=\"o\">=</span>firefox\n</pre>\n<h3><strong>Supported Tags for use with Behave</strong></h3>\n<p>We use Behave as our BDD Runner, while skynet does not require you to use it, it does have some extra support built in.\nYou can tag the scenarios/feature files with the following platform tags to initialise appropriate driver.</p>\n<p>If no platform tag is specified, then the default platform of web/browser is used.</p>\n<pre><code>@api\n@android-app\n@android-browser\n@ios-app\n@ios-browser\n   \n</code></pre>\n\n          </div>"}, "last_serial": 6619658, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "ced7313ce717b9f7781a35be031af19c", "sha256": "15dbb477179e8d5c48f910064f79c45cb86601a492f4182a1ca0be1401c77e26"}, "downloads": -1, "filename": "nzme-skynet-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ced7313ce717b9f7781a35be031af19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38909, "upload_time": "2020-02-12T22:37:33", "upload_time_iso_8601": "2020-02-12T22:37:33.748703Z", "url": "https://files.pythonhosted.org/packages/55/e6/6674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6/nzme-skynet-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ced7313ce717b9f7781a35be031af19c", "sha256": "15dbb477179e8d5c48f910064f79c45cb86601a492f4182a1ca0be1401c77e26"}, "downloads": -1, "filename": "nzme-skynet-0.5.0.tar.gz", "has_sig": false, "md5_digest": "ced7313ce717b9f7781a35be031af19c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38909, "upload_time": "2020-02-12T22:37:33", "upload_time_iso_8601": "2020-02-12T22:37:33.748703Z", "url": "https://files.pythonhosted.org/packages/55/e6/6674c5eca696fed6c3e253be5b2016d72db7d67ec52c9a9485c0bfcf35a6/nzme-skynet-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:58 2020"}