{"info": {"author": "Tomasz Bogdal", "author_email": "vladsmailtotomas@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: X11 Applications :: Qt", "Intended Audience :: Education", "Intended Audience :: End Users/Desktop", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research"], "description": "The Why\r\n=======\r\n\r\nBeing able to calculate something is not very interesting,\r\nbut being able to visualize it makes the calcuations mean\r\nsomething. The primary goal of these programs where to\r\nmake sens of the different numerical methods and be able to\r\nplay with differnt types of input data. Also I had some\r\nspare time on my hands.\r\n\r\n\r\nApplication Descriptions\r\n========================\r\n\r\nchebychev\r\n---------\r\n\r\nThe function of the users choice\r\n(or from a set of presets) will be approximated using\r\nChebchev Approximation. The user can chose the start\r\nand end range of the function, as wel as the number\r\nof points(in that range) that will be used to plot \r\nthe function. The range of Chebychev series can also\r\nbe set.\r\n\r\n\r\nintegral\r\n--------\r\n\r\nShows differenty types of algorithms used to integrate\r\nfunctions. The fucntion and expected result are user\r\nconfigurable, as well as the range of the integration\r\nand number of subdivition. The first algorithm is an\r\nimplementation of the simplest method used to integrate\r\nfunction(calculates the area of a trapeze) while\r\nthe other method uses GSL's QAP algorithm.\r\n\r\nThe resutls from the calculation can be displayed on\r\nthe plot. There are 3 types of plots aviablable. The\r\nfirst displays the error rate in corrolation to the\r\nnumber of subdivisions used. The second displays the\r\ncorrolation between adjecent errors. The final plot\r\ndisplays the actual result per number of subdivions.\r\n\r\nThere is also a table displaying the number of subdivision\r\nneeded to achive an error less than 1E-3, 1E-4, 1E-5\r\nand 1E-6. All raw data used for plotting is also\r\navailable.\r\n\r\n\r\n\r\ninterpolation\r\n-------------\r\n\r\nEnables a user to see the precision of different interpolation\r\nmethods implemented in GSL. The user can input his own custom\r\nfunction, as well as describe the start and end range and\r\nthe number of points that the interpolation methods will\r\nuse. The follwing GSL interpolation methods are available:\r\nakima, akima_periodic, cspline, cspline_periodic, polynominal\r\nand linear. The user can chose any number of interpolation\r\nmethods to be displayed on the plot. The input point are\r\ndisplayed as dots. All plot data is avialable to the user.\r\n\r\nlineareq\r\n--------\r\n\r\nShows the time relations beetween matrix decomposition(LU)\r\ntime and the time required to solve the matrix. Each\r\nmatrix is populated with random numbers. The start size\r\nand end size of the matracies can be specified as well\r\nas the step size. \r\n\r\nroots\r\n-----\r\n\r\nShows different root finding methods \r\nand the error assosiated with each iteration\r\nof the convergance process. Both the function\r\nas well as the bracket range are configurable.\r\nThe maximum number of iteration can also be\r\nspecified. Data generated by the methods\r\ncan be displayed and analyzed.\r\n\r\nThere are a total of 6 methods avaialbe,\r\nfalse postion, bisection, brent, newton,\r\nnewton-steffenson, scant.\r\n\r\nMethods which have exceded the maximum\r\namount of iterations are discarded and\r\nnot displayed.\r\n\r\n\r\nTODO\r\n====\r\n\r\n    * Implement Save As for plot data viewer in\r\n    the format of CVS\r\n    * Error highlighting when an invalid function\r\n    is inputed.\r\n\r\nDirectory Structure\r\n===================\r\n\r\n\r\nThe following section outlines the directory\r\nstructure of the PyMois package. The entire\r\napplications code is divided into directories\r\ncontaining code that has similar functionality.\r\n\r\n/\r\n-\r\n\r\nAll application launchers are located in the root\r\ndirectory of the package. \r\ncalc\r\n----\r\n\r\nAll algorithms and mathematical methods used\r\nin all programs are located here. Every application\r\nhas a single module in this directory. For example\r\nif we have the integral_app.py application it will\r\nhave a integra.py module in this directory.\r\n\r\ngui\r\n---\r\n\r\nWithing the gui directory are located all the\r\npython files created from QT UI format. These\r\nfiles should not be edited since they are replaced\r\nevery time the UI files are update. \r\n\r\ngui/ui\r\n______\r\n\r\nFiles created by QT Designer are located in this\r\ndirectory. Any modification to the GUI should\r\nbe done using theses file in QT Designer. The\r\npython files generated from theses files should\r\nnot be edited.\r\n\r\nmatlib\r\n------\r\n\r\nThe matlib directory contains code related to\r\nthe matplotlib library used for creating plots\r\nand visualizing numerical data. All programs\r\nuse the plot widget located in this directory.\r\nThe plot widget is very easy to create and\r\nminimizes the amount of code needed to embed\r\na plot within a QT application.\r\n\r\nutils\r\n----\r\n\r\nCode which is shared between applications.\r\n\r\n\r\nNaming Convention\r\n=================\r\n\r\nAll files adhear to naming convention which \r\nenables quick identification of which files\r\nbelong to which application. There are\r\na couple of prefixes and suffixes used.\r\n\r\nFor example if we had an application called\r\nIntegrator we would uss the following naming\r\nconvetion.\r\n\r\n\r\nIf a gui was created using QT Designer it\r\nname should be integrator_app.ui and should\r\nbe stored in gui/ui. The generated python\r\ncode from that UI file will be located\r\nin gui/ and will be named(if make is used\r\nto generate the code) ui_integrator_app.py .\r\n\r\nNext the main application code used to start\r\nand customize the GUI should be calle d\r\nintegrator_app.py.  The file should\r\nbe located in the root of the package.\r\n\r\nIf any calculation need to be done, the code\r\nshould be locaded in calc and have a name like\r\nso integrator.py.\r\n\r\nDependencies\r\n============\r\n\r\nThe entire PyMois packages depends on \r\na couple of key libraries. These need to\r\nbe installed in order for the applications\r\nto work. All mathematical calculations use\r\nthe PyGSL and NumPy packages. The interface\r\nand plotting relies on QT, PyQT and MatPlotLib.\r\n\r\nQT\r\n--\r\nDescription: Cross-platform GUI Toolkit\r\nVersion: 4.5\r\nURL: http://www.qtsoftware.com/products/\r\n\r\nPyGSL\r\n-----\r\nDescription: GNU GSL Python Binding\r\nVersion: 0.9.4\r\nURL: http://pygsl.sourceforge.net/\r\n\r\n\r\nPyQT\r\n----\r\nDescription: Python QT4 Bindings\r\nVersion: 4.4.3\r\nURL: http://www.riverbankcomputing.co.uk/software/pyqt/download\r\n\r\nSIP\r\n---\r\nDescription: Python extension module generator for C and C++ libraries(needed by\r\nPyQT)\r\nVersion: 4.7.7\r\nURL: http://www.riverbankcomputing.co.uk/software/sip/download\r\n\r\nMatPlotLib\r\n----------\r\nDescription: Python 2D plotting library\r\nVersion: 0.98.5.3\r\nURL: http://matplotlib.sourceforge.net/\r\n\r\nNumPy\r\n-----\r\nDescription: Python Numerical Library\r\nVersion: 1.2.0\r\nURL: http://numpy.scipy.org/", "description_content_type": null, "docs_url": null, "download_url": "ftp://ftp.qtzlabs.com/dev/PyMois/PyMois-0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.qtzlabs.com", "keywords": "gsl,pygsl,interpolation,integration,integrals,approximation,pymois,", "license": "GPL", "maintainer": "", "maintainer_email": "", "name": "PyMois", "package_url": "https://pypi.org/project/PyMois/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/PyMois/", "project_urls": {"Download": "ftp://ftp.qtzlabs.com/dev/PyMois/PyMois-0.1.tar.gz", "Homepage": "http://www.qtzlabs.com"}, "release_url": "https://pypi.org/project/PyMois/0.1/", "requires_dist": null, "requires_python": null, "summary": "Applications for interactive visualization of numerical methods.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            The Why\n<br>=======\n<br>\n<br>Being able to calculate something is not very interesting,\n<br>but being able to visualize it makes the calcuations mean\n<br>something. The primary goal of these programs where to\n<br>make sens of the different numerical methods and be able to\n<br>play with differnt types of input data. Also I had some\n<br>spare time on my hands.\n<br>\n<br>\n<br>Application Descriptions\n<br>========================\n<br>\n<br>chebychev\n<br>---------\n<br>\n<br>The function of the users choice\n<br>(or from a set of presets) will be approximated using\n<br>Chebchev Approximation. The user can chose the start\n<br>and end range of the function, as wel as the number\n<br>of points(in that range) that will be used to plot \n<br>the function. The range of Chebychev series can also\n<br>be set.\n<br>\n<br>\n<br>integral\n<br>--------\n<br>\n<br>Shows differenty types of algorithms used to integrate\n<br>functions. The fucntion and expected result are user\n<br>configurable, as well as the range of the integration\n<br>and number of subdivition. The first algorithm is an\n<br>implementation of the simplest method used to integrate\n<br>function(calculates the area of a trapeze) while\n<br>the other method uses GSL's QAP algorithm.\n<br>\n<br>The resutls from the calculation can be displayed on\n<br>the plot. There are 3 types of plots aviablable. The\n<br>first displays the error rate in corrolation to the\n<br>number of subdivisions used. The second displays the\n<br>corrolation between adjecent errors. The final plot\n<br>displays the actual result per number of subdivions.\n<br>\n<br>There is also a table displaying the number of subdivision\n<br>needed to achive an error less than 1E-3, 1E-4, 1E-5\n<br>and 1E-6. All raw data used for plotting is also\n<br>available.\n<br>\n<br>\n<br>\n<br>interpolation\n<br>-------------\n<br>\n<br>Enables a user to see the precision of different interpolation\n<br>methods implemented in GSL. The user can input his own custom\n<br>function, as well as describe the start and end range and\n<br>the number of points that the interpolation methods will\n<br>use. The follwing GSL interpolation methods are available:\n<br>akima, akima_periodic, cspline, cspline_periodic, polynominal\n<br>and linear. The user can chose any number of interpolation\n<br>methods to be displayed on the plot. The input point are\n<br>displayed as dots. All plot data is avialable to the user.\n<br>\n<br>lineareq\n<br>--------\n<br>\n<br>Shows the time relations beetween matrix decomposition(LU)\n<br>time and the time required to solve the matrix. Each\n<br>matrix is populated with random numbers. The start size\n<br>and end size of the matracies can be specified as well\n<br>as the step size. \n<br>\n<br>roots\n<br>-----\n<br>\n<br>Shows different root finding methods \n<br>and the error assosiated with each iteration\n<br>of the convergance process. Both the function\n<br>as well as the bracket range are configurable.\n<br>The maximum number of iteration can also be\n<br>specified. Data generated by the methods\n<br>can be displayed and analyzed.\n<br>\n<br>There are a total of 6 methods avaialbe,\n<br>false postion, bisection, brent, newton,\n<br>newton-steffenson, scant.\n<br>\n<br>Methods which have exceded the maximum\n<br>amount of iterations are discarded and\n<br>not displayed.\n<br>\n<br>\n<br>TODO\n<br>====\n<br>\n<br>    * Implement Save As for plot data viewer in\n<br>    the format of CVS\n<br>    * Error highlighting when an invalid function\n<br>    is inputed.\n<br>\n<br>Directory Structure\n<br>===================\n<br>\n<br>\n<br>The following section outlines the directory\n<br>structure of the PyMois package. The entire\n<br>applications code is divided into directories\n<br>containing code that has similar functionality.\n<br>\n<br>/\n<br>-\n<br>\n<br>All application launchers are located in the root\n<br>directory of the package. \n<br>calc\n<br>----\n<br>\n<br>All algorithms and mathematical methods used\n<br>in all programs are located here. Every application\n<br>has a single module in this directory. For example\n<br>if we have the integral_app.py application it will\n<br>have a integra.py module in this directory.\n<br>\n<br>gui\n<br>---\n<br>\n<br>Withing the gui directory are located all the\n<br>python files created from QT UI format. These\n<br>files should not be edited since they are replaced\n<br>every time the UI files are update. \n<br>\n<br>gui/ui\n<br>______\n<br>\n<br>Files created by QT Designer are located in this\n<br>directory. Any modification to the GUI should\n<br>be done using theses file in QT Designer. The\n<br>python files generated from theses files should\n<br>not be edited.\n<br>\n<br>matlib\n<br>------\n<br>\n<br>The matlib directory contains code related to\n<br>the matplotlib library used for creating plots\n<br>and visualizing numerical data. All programs\n<br>use the plot widget located in this directory.\n<br>The plot widget is very easy to create and\n<br>minimizes the amount of code needed to embed\n<br>a plot within a QT application.\n<br>\n<br>utils\n<br>----\n<br>\n<br>Code which is shared between applications.\n<br>\n<br>\n<br>Naming Convention\n<br>=================\n<br>\n<br>All files adhear to naming convention which \n<br>enables quick identification of which files\n<br>belong to which application. There are\n<br>a couple of prefixes and suffixes used.\n<br>\n<br>For example if we had an application called\n<br>Integrator we would uss the following naming\n<br>convetion.\n<br>\n<br>\n<br>If a gui was created using QT Designer it\n<br>name should be integrator_app.ui and should\n<br>be stored in gui/ui. The generated python\n<br>code from that UI file will be located\n<br>in gui/ and will be named(if make is used\n<br>to generate the code) ui_integrator_app.py .\n<br>\n<br>Next the main application code used to start\n<br>and customize the GUI should be calle d\n<br>integrator_app.py.  The file should\n<br>be located in the root of the package.\n<br>\n<br>If any calculation need to be done, the code\n<br>should be locaded in calc and have a name like\n<br>so integrator.py.\n<br>\n<br>Dependencies\n<br>============\n<br>\n<br>The entire PyMois packages depends on \n<br>a couple of key libraries. These need to\n<br>be installed in order for the applications\n<br>to work. All mathematical calculations use\n<br>the PyGSL and NumPy packages. The interface\n<br>and plotting relies on QT, PyQT and MatPlotLib.\n<br>\n<br>QT\n<br>--\n<br>Description: Cross-platform GUI Toolkit\n<br>Version: 4.5\n<br>URL: http://www.qtsoftware.com/products/\n<br>\n<br>PyGSL\n<br>-----\n<br>Description: GNU GSL Python Binding\n<br>Version: 0.9.4\n<br>URL: http://pygsl.sourceforge.net/\n<br>\n<br>\n<br>PyQT\n<br>----\n<br>Description: Python QT4 Bindings\n<br>Version: 4.4.3\n<br>URL: http://www.riverbankcomputing.co.uk/software/pyqt/download\n<br>\n<br>SIP\n<br>---\n<br>Description: Python extension module generator for C and C++ libraries(needed by\n<br>PyQT)\n<br>Version: 4.7.7\n<br>URL: http://www.riverbankcomputing.co.uk/software/sip/download\n<br>\n<br>MatPlotLib\n<br>----------\n<br>Description: Python 2D plotting library\n<br>Version: 0.98.5.3\n<br>URL: http://matplotlib.sourceforge.net/\n<br>\n<br>NumPy\n<br>-----\n<br>Description: Python Numerical Library\n<br>Version: 1.2.0\n<br>URL: http://numpy.scipy.org/\n          </div>"}, "last_serial": 802640, "releases": {"0.1": []}, "urls": [], "timestamp": "Fri May  8 03:01:55 2020"}