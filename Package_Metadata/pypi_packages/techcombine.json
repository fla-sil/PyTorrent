{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# techcombine-framework\n\n## Installation for everyone\n```bash\n$pip install techcombine\n```\n\n## Installation for Developer\n```bash\n$pip install techcombine[dev]\n```\nNow you can test this package by using ```pytest``` or ```pytest direstory/```, For example\n```bash\n$pytest\n# or\n$pytest .\\techcombine\\tests\\\n```\n\n## Installation from sources\n```bash\n(env)$python setup.py install\n```\n\n## manual\n### class LINENotify\nMethod: **notify_hook(subtitle, api, token, data=None, \\*\\*kwargs)** Make webhook to Line Notify from your server<br>\n    return: request\n```python\nfrom techcombine.utils import generate_notify_data\nLINENotify.notify_hook(subtitle, data=None: dict, **kwargs)\n\n# When you use this method you need to defind variable in django.conf settings\nLINE_NOTIFY_TOKEN = some sting + 'access_token'\nLINE_NOTIFY_API = 'https://notify-api.line.me/api/notify'\n\n# Data example\ndata = {\n  \"Order ID\": order.slug,\n  \"email\": order.email,\n  \"first_name\": order.first_name,\n  \"phone_number\": order.phone_number,\n  \"created_at\": order.created_at,\n} # Or use generate_notify_data(ojb)\n```\nparameter:<br>\n- subtitle: (str) Is subtitle of data hook to line notify chat\n- data: (default=None/DictType only) Is dict of your all data to show in mail\n- Or using **dict\n\nMethod: **generate_notify_data(obj, key_type=\"id\", header=None)** Generate dict data from django models object.\n    return: dict data format for using in notify_hook()\n```python\nfrom techcombine.utils import generate_notify_data\ndata = generate_notify_data(ojb, key_type=\"id\", header=None)\n```\nparameter:<br>\n- obj: (Django models object) field['obj.id or obj.slug', 'name', 'email', 'created_at', 'url'] ```#if header=None: data will doesn't have url field```\n- key_type: (str) Type of object key from ID or Slug\n- header: (str) For fill link url of object\n\n### Class MailService\nMethod: **send_email(from_email, to_emails, subject, html_content, token)** Send email from from_email to to_email by sendgrid<br>\n        return request response\n```python\nfrom techcobine.mail import MailService\nimport os\n\nfrom_email = 'from_email@example.com',\nto_emails = 'to@example.com',\nsubject = 'For example subject',\nhtml_content = '<strong>and easy to do anywhere, even with Python</strong>'\ntoken = os.environ.get('SENDGRID_API_KEY')\n\nMailService.send_email(from_email, to_emails, subject, html_content, token)\n```\nparameter:\n- **from_email**: type(string), Is an email sender.\n- **to_email**: type(string), Is an email recipients.\n- **subject**: type(string), Is subject of this email.\n- **html_content**: type(string), write html for render template on email.\n- **token**: type(string), Is sendgrid api token.\n\n\nMethod: **send_verify_email(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)** Send verify email from from_email to to_email by sendgrid<br>\nreturn: request response\n```python\nMailService.send_verify_email(from_email, to_email, host_name, user_tokenm sendrid_token)\n```\n\nMethod: **send_reset_password(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)** Send to reset password<br>\nreturn: request response\n```python\nMail.Service.send_reset_password(from_email, to_email, host_name, user_tokenm sendrid_token)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chinnawatp/techcombine-framework", "keywords": "", "license": "MIT", "maintainer": "Techcombine developer team", "maintainer_email": "chin@techcombine.co", "name": "techcombine", "package_url": "https://pypi.org/project/techcombine/", "platform": "any", "project_url": "https://pypi.org/project/techcombine/", "project_urls": {"Homepage": "https://github.com/chinnawatp/techcombine-framework"}, "release_url": "https://pypi.org/project/techcombine/0.0.3/", "requires_dist": null, "requires_python": ">=3.6.1", "summary": "Techcombine framework for ecommerce", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>techcombine-framework</h1>\n<h2>Installation for everyone</h2>\n<pre><span class=\"nv\">$pip</span> install techcombine\n</pre>\n<h2>Installation for Developer</h2>\n<pre><span class=\"nv\">$pip</span> install techcombine<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<p>Now you can test this package by using <code>pytest</code> or <code>pytest direstory/</code>, For example</p>\n<pre><span class=\"nv\">$pytest</span>\n<span class=\"c1\"># or</span>\n<span class=\"nv\">$pytest</span> .<span class=\"se\">\\t</span>echcombine<span class=\"se\">\\t</span>ests<span class=\"se\">\\</span>\n</pre>\n<h2>Installation from sources</h2>\n<pre><span class=\"o\">(</span>env<span class=\"o\">)</span><span class=\"nv\">$python</span> setup.py install\n</pre>\n<h2>manual</h2>\n<h3>class LINENotify</h3>\n<p>Method: <strong>notify_hook(subtitle, api, token, data=None, **kwargs)</strong> Make webhook to Line Notify from your server<br>\nreturn: request</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">techcombine.utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_notify_data</span>\n<span class=\"n\">LINENotify</span><span class=\"o\">.</span><span class=\"n\">notify_hook</span><span class=\"p\">(</span><span class=\"n\">subtitle</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># When you use this method you need to defind variable in django.conf settings</span>\n<span class=\"n\">LINE_NOTIFY_TOKEN</span> <span class=\"o\">=</span> <span class=\"n\">some</span> <span class=\"n\">sting</span> <span class=\"o\">+</span> <span class=\"s1\">'access_token'</span>\n<span class=\"n\">LINE_NOTIFY_API</span> <span class=\"o\">=</span> <span class=\"s1\">'https://notify-api.line.me/api/notify'</span>\n\n<span class=\"c1\"># Data example</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"Order ID\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">slug</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">email</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"first_name\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">first_name</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"phone_number\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">phone_number</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"n\">order</span><span class=\"o\">.</span><span class=\"n\">created_at</span><span class=\"p\">,</span>\n<span class=\"p\">}</span> <span class=\"c1\"># Or use generate_notify_data(ojb)</span>\n</pre>\n<p>parameter:<br></p>\n<ul>\n<li>subtitle: (str) Is subtitle of data hook to line notify chat</li>\n<li>data: (default=None/DictType only) Is dict of your all data to show in mail</li>\n<li>Or using **dict</li>\n</ul>\n<p>Method: <strong>generate_notify_data(obj, key_type=\"id\", header=None)</strong> Generate dict data from django models object.\nreturn: dict data format for using in notify_hook()</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">techcombine.utils</span> <span class=\"kn\">import</span> <span class=\"n\">generate_notify_data</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">generate_notify_data</span><span class=\"p\">(</span><span class=\"n\">ojb</span><span class=\"p\">,</span> <span class=\"n\">key_type</span><span class=\"o\">=</span><span class=\"s2\">\"id\"</span><span class=\"p\">,</span> <span class=\"n\">header</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>parameter:<br></p>\n<ul>\n<li>obj: (Django models object) field['obj.id or obj.slug', 'name', 'email', 'created_at', 'url'] <code>#if header=None: data will doesn't have url field</code></li>\n<li>key_type: (str) Type of object key from ID or Slug</li>\n<li>header: (str) For fill link url of object</li>\n</ul>\n<h3>Class MailService</h3>\n<p>Method: <strong>send_email(from_email, to_emails, subject, html_content, token)</strong> Send email from from_email to to_email by sendgrid<br>\nreturn request response</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">techcobine.mail</span> <span class=\"kn\">import</span> <span class=\"n\">MailService</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"n\">from_email</span> <span class=\"o\">=</span> <span class=\"s1\">'from_email@example.com'</span><span class=\"p\">,</span>\n<span class=\"n\">to_emails</span> <span class=\"o\">=</span> <span class=\"s1\">'to@example.com'</span><span class=\"p\">,</span>\n<span class=\"n\">subject</span> <span class=\"o\">=</span> <span class=\"s1\">'For example subject'</span><span class=\"p\">,</span>\n<span class=\"n\">html_content</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;strong&gt;and easy to do anywhere, even with Python&lt;/strong&gt;'</span>\n<span class=\"n\">token</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'SENDGRID_API_KEY'</span><span class=\"p\">)</span>\n\n<span class=\"n\">MailService</span><span class=\"o\">.</span><span class=\"n\">send_email</span><span class=\"p\">(</span><span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"n\">to_emails</span><span class=\"p\">,</span> <span class=\"n\">subject</span><span class=\"p\">,</span> <span class=\"n\">html_content</span><span class=\"p\">,</span> <span class=\"n\">token</span><span class=\"p\">)</span>\n</pre>\n<p>parameter:</p>\n<ul>\n<li><strong>from_email</strong>: type(string), Is an email sender.</li>\n<li><strong>to_email</strong>: type(string), Is an email recipients.</li>\n<li><strong>subject</strong>: type(string), Is subject of this email.</li>\n<li><strong>html_content</strong>: type(string), write html for render template on email.</li>\n<li><strong>token</strong>: type(string), Is sendgrid api token.</li>\n</ul>\n<p>Method: <strong>send_verify_email(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)</strong> Send verify email from from_email to to_email by sendgrid<br>\nreturn: request response</p>\n<pre><span class=\"n\">MailService</span><span class=\"o\">.</span><span class=\"n\">send_verify_email</span><span class=\"p\">(</span><span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"n\">to_email</span><span class=\"p\">,</span> <span class=\"n\">host_name</span><span class=\"p\">,</span> <span class=\"n\">user_tokenm</span> <span class=\"n\">sendrid_token</span><span class=\"p\">)</span>\n</pre>\n<p>Method: <strong>send_reset_password(from_email, to_email, host_name, user_token, sendgrid_token, subject=None)</strong> Send to reset password<br>\nreturn: request response</p>\n<pre><span class=\"n\">Mail</span><span class=\"o\">.</span><span class=\"n\">Service</span><span class=\"o\">.</span><span class=\"n\">send_reset_password</span><span class=\"p\">(</span><span class=\"n\">from_email</span><span class=\"p\">,</span> <span class=\"n\">to_email</span><span class=\"p\">,</span> <span class=\"n\">host_name</span><span class=\"p\">,</span> <span class=\"n\">user_tokenm</span> <span class=\"n\">sendrid_token</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6746190, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "019645e6d4016f687baa2317711ca95b", "sha256": "3389c00514ee58b4fffc43cddd9ba123835b0fbcfd3834919f532ef1e409b1d9"}, "downloads": -1, "filename": "techcombine-0.0.2.tar.gz", "has_sig": false, "md5_digest": "019645e6d4016f687baa2317711ca95b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 6032, "upload_time": "2020-02-28T03:39:41", "upload_time_iso_8601": "2020-02-28T03:39:41.810054Z", "url": "https://files.pythonhosted.org/packages/08/7d/01eb0fd906b813cc25d7c330dec0f5e909f00ee170a45e0fc562dabf6d68/techcombine-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "5d622a84fe56034f9855cd235c73b41d", "sha256": "2e456c11961fc77077bd139af9d8c2601f6fe7eeadfdb8487cad358a3e675f43"}, "downloads": -1, "filename": "techcombine-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5d622a84fe56034f9855cd235c73b41d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 7639, "upload_time": "2020-03-04T08:10:11", "upload_time_iso_8601": "2020-03-04T08:10:11.040147Z", "url": "https://files.pythonhosted.org/packages/5d/33/7e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38/techcombine-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d622a84fe56034f9855cd235c73b41d", "sha256": "2e456c11961fc77077bd139af9d8c2601f6fe7eeadfdb8487cad358a3e675f43"}, "downloads": -1, "filename": "techcombine-0.0.3.tar.gz", "has_sig": false, "md5_digest": "5d622a84fe56034f9855cd235c73b41d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.1", "size": 7639, "upload_time": "2020-03-04T08:10:11", "upload_time_iso_8601": "2020-03-04T08:10:11.040147Z", "url": "https://files.pythonhosted.org/packages/5d/33/7e711b4859084e3ac3963e5854726f3fe59fb5b293f61fba2bc7130b8e38/techcombine-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:04 2020"}