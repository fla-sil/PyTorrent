{"info": {"author": "Alexandre D. Cirilo", "author_email": "a.dias.cirilo@umail.leidenuniv.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Ramachandran plotting tool\n\nDraws a Ramachandran plot based on the input PDB file (e.g. 1MBN.pdb). Makes use of a Gaussian KDE (kernel density estimation) to plot the density of favoured torsion angles (&phi; and &psi;).\n\n![](https://raw.githubusercontent.com/alxdrcirilo/RamachanDraw/master/extras/plot.png)\n\n## Usage\n\nRamachanDraw includes useful functions to effortlessly draw a Ramachandran plot.\n\n### Fetch the PDB file from the online repository\n\nTo draw a Ramachandran plot, we need a PDB file. You can use a local PDB file by specifying the path. Alternatively, RamachanDraw conveniently includes a function to automatically fetch and locally store the PDB file for the given PDB id.\n\n#### Arguments\n\n```\nfetch(pdb_file)\n```\n\n- ```pdb_file (str)```: PDB id corresponding to the PDB entry to be downloaded.\n- ```Returns```: path to PDB file.\n\n### Extract &phi; and &psi; angles\n\nRamachanDraw extracts the &phi; and &psi; angles from the PDB file by taking advantage of the [Biopython](https://biopython.org/) module.\nAdditionally, aminoacid residues that were not drawn on the plot can be extract using the ```return_ignored``` argument.\n\n#### Arguments\n\n```\nphi_psi(pdb_file, return_ignored)\n```\n\n- ```pdb_file (str)```: PDB id corresponding to the PDB entry to be downloaded.\n- ```return_ignored (bool)```:\n    - ```True``` returns a list of tuple with the format (aminoacid, (phi, psi))\n- ```Returns```: Dictionary with keys as aminoacid residues and values as (phi, psi) angle values.\n\n### Ramachandran plot\n\nMakes use of the [matplotlib](https://matplotlib.org/) module, using the Qt5Agg backend ([PyQt5](https://pypi.org/project/PyQt5/)) to draw a highly customizable Ramachandran plot.\n\n#### Arguments\n\n```\nplot(pdb_file, cmap='viridis', alpha=0.75, dpi=100, save=True, show=False, out='plot.png')\n```\n\n- ```pdb_file (str)```: PDB id corresponding to the PDB entry to be downloaded.\n- ```cmap (str)```: colormap to be used (from matplotlib) for the density of the favoured (\"allowed\") regions; default is <em>viridis</em>.\n- ```alpha (float)```: sets the opacity of the colormap (value between 0-1); default is 0.75.\n- ```dpi (int)```: resolution (<em>dots per inch</em>); default is 100.\n- ```save (bool)```:\n    - ```True```: saves the plot locally; default is True.\n- ```show (bool)```:\n    - ```True```: shows the plot using the Qt5Agg backend; default is False.\n- ```out (str)```: filename to be used in case the plot is saved (i.e. ```save=True```); default is <em>plot.png</em>.\n- ```Returns```: Ramachandran plot (can be saved locally).\n\n## Example\n\nHerein you will find an example from the PDB id corresponding to the myoglobin entry - [1MBN](https://www.ebi.ac.uk/pdbe/entry/pdb/1mbn/index) - in the Protein Data Bank. \n\n```\nfrom RamachanDraw import fetch, phi_psi, plot\n\n# PDB id to be downloaded\nPDB_id = '1MBN'\n\n# Drawing the Ramachandran plot\nplot(fetch(PDB_id))\n\n# Generating a dictionary to store the phi and psi angles\n# And returning the ignored aminoacid residues\nphi_psi_dict, ignored_res = phi_psi(fetch(PDB_id), return_ignored=True)\n```\n\n## Contributing\nFeedback and constructive criticism is welcome: a.dias.cirilo@umail.leidenuniv.nl.\n\n## License\n[MIT](https://choosealicense.com/licenses/mit/)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alxdrcirilo/RamachanDraw", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "RamachanDraw", "package_url": "https://pypi.org/project/RamachanDraw/", "platform": "", "project_url": "https://pypi.org/project/RamachanDraw/", "project_urls": {"Homepage": "https://github.com/alxdrcirilo/RamachanDraw"}, "release_url": "https://pypi.org/project/RamachanDraw/0.2.1/", "requires_dist": ["biopython (==1.75)", "matplotlib (==3.1.2)", "PyQt5 (==5.13.2)"], "requires_python": ">=3.6", "summary": "Ramachandran plotting tool", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ramachandran plotting tool</h1>\n<p>Draws a Ramachandran plot based on the input PDB file (e.g. 1MBN.pdb). Makes use of a Gaussian KDE (kernel density estimation) to plot the density of favoured torsion angles (\u03c6 and \u03c8).</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddb53c8f857013d399db9dbfa076aa5b72d7cadf/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f616c786472636972696c6f2f52616d616368616e447261772f6d61737465722f6578747261732f706c6f742e706e67\"></p>\n<h2>Usage</h2>\n<p>RamachanDraw includes useful functions to effortlessly draw a Ramachandran plot.</p>\n<h3>Fetch the PDB file from the online repository</h3>\n<p>To draw a Ramachandran plot, we need a PDB file. You can use a local PDB file by specifying the path. Alternatively, RamachanDraw conveniently includes a function to automatically fetch and locally store the PDB file for the given PDB id.</p>\n<h4>Arguments</h4>\n<pre><code>fetch(pdb_file)\n</code></pre>\n<ul>\n<li><code>pdb_file (str)</code>: PDB id corresponding to the PDB entry to be downloaded.</li>\n<li><code>Returns</code>: path to PDB file.</li>\n</ul>\n<h3>Extract \u03c6 and \u03c8 angles</h3>\n<p>RamachanDraw extracts the \u03c6 and \u03c8 angles from the PDB file by taking advantage of the <a href=\"https://biopython.org/\" rel=\"nofollow\">Biopython</a> module.\nAdditionally, aminoacid residues that were not drawn on the plot can be extract using the <code>return_ignored</code> argument.</p>\n<h4>Arguments</h4>\n<pre><code>phi_psi(pdb_file, return_ignored)\n</code></pre>\n<ul>\n<li><code>pdb_file (str)</code>: PDB id corresponding to the PDB entry to be downloaded.</li>\n<li><code>return_ignored (bool)</code>:\n<ul>\n<li><code>True</code> returns a list of tuple with the format (aminoacid, (phi, psi))</li>\n</ul>\n</li>\n<li><code>Returns</code>: Dictionary with keys as aminoacid residues and values as (phi, psi) angle values.</li>\n</ul>\n<h3>Ramachandran plot</h3>\n<p>Makes use of the <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> module, using the Qt5Agg backend (<a href=\"https://pypi.org/project/PyQt5/\" rel=\"nofollow\">PyQt5</a>) to draw a highly customizable Ramachandran plot.</p>\n<h4>Arguments</h4>\n<pre><code>plot(pdb_file, cmap='viridis', alpha=0.75, dpi=100, save=True, show=False, out='plot.png')\n</code></pre>\n<ul>\n<li><code>pdb_file (str)</code>: PDB id corresponding to the PDB entry to be downloaded.</li>\n<li><code>cmap (str)</code>: colormap to be used (from matplotlib) for the density of the favoured (\"allowed\") regions; default is <em>viridis</em>.</li>\n<li><code>alpha (float)</code>: sets the opacity of the colormap (value between 0-1); default is 0.75.</li>\n<li><code>dpi (int)</code>: resolution (<em>dots per inch</em>); default is 100.</li>\n<li><code>save (bool)</code>:\n<ul>\n<li><code>True</code>: saves the plot locally; default is True.</li>\n</ul>\n</li>\n<li><code>show (bool)</code>:\n<ul>\n<li><code>True</code>: shows the plot using the Qt5Agg backend; default is False.</li>\n</ul>\n</li>\n<li><code>out (str)</code>: filename to be used in case the plot is saved (i.e. <code>save=True</code>); default is <em>plot.png</em>.</li>\n<li><code>Returns</code>: Ramachandran plot (can be saved locally).</li>\n</ul>\n<h2>Example</h2>\n<p>Herein you will find an example from the PDB id corresponding to the myoglobin entry - <a href=\"https://www.ebi.ac.uk/pdbe/entry/pdb/1mbn/index\" rel=\"nofollow\">1MBN</a> - in the Protein Data Bank.</p>\n<pre><code>from RamachanDraw import fetch, phi_psi, plot\n\n# PDB id to be downloaded\nPDB_id = '1MBN'\n\n# Drawing the Ramachandran plot\nplot(fetch(PDB_id))\n\n# Generating a dictionary to store the phi and psi angles\n# And returning the ignored aminoacid residues\nphi_psi_dict, ignored_res = phi_psi(fetch(PDB_id), return_ignored=True)\n</code></pre>\n<h2>Contributing</h2>\n<p>Feedback and constructive criticism is welcome: <a href=\"mailto:a.dias.cirilo@umail.leidenuniv.nl\">a.dias.cirilo@umail.leidenuniv.nl</a>.</p>\n<h2>License</h2>\n<p><a href=\"https://choosealicense.com/licenses/mit/\" rel=\"nofollow\">MIT</a></p>\n\n          </div>"}, "last_serial": 6255889, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "2bb1ec2988cc2a24e520bb327a5251ab", "sha256": "6410115fc7afb3c17f8a7e33b8a8a4c3c532d95f749be795075067dbacb4bb0a"}, "downloads": -1, "filename": "RamachanDraw-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2bb1ec2988cc2a24e520bb327a5251ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 82329, "upload_time": "2019-12-06T19:33:13", "upload_time_iso_8601": "2019-12-06T19:33:13.591787Z", "url": "https://files.pythonhosted.org/packages/52/d9/22af39c8b42190144490ff7bc951569d7247f7b92f5fda37bb0856d5237f/RamachanDraw-0.2.1-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2bb1ec2988cc2a24e520bb327a5251ab", "sha256": "6410115fc7afb3c17f8a7e33b8a8a4c3c532d95f749be795075067dbacb4bb0a"}, "downloads": -1, "filename": "RamachanDraw-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2bb1ec2988cc2a24e520bb327a5251ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 82329, "upload_time": "2019-12-06T19:33:13", "upload_time_iso_8601": "2019-12-06T19:33:13.591787Z", "url": "https://files.pythonhosted.org/packages/52/d9/22af39c8b42190144490ff7bc951569d7247f7b92f5fda37bb0856d5237f/RamachanDraw-0.2.1-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:07:45 2020"}