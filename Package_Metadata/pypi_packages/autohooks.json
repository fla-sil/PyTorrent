{"info": {"author": "Greenbone Networks GmbH", "author_email": "info@greenbone.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Version Control :: Git"], "description": "![Greenbone Logo](https://www.greenbone.net/wp-content/uploads/gb_logo_resilience_horizontal.png)\n\n# Autohooks <!-- omit in toc -->\n\n[![PyPI release](https://img.shields.io/pypi/v/autohooks.svg)](https://pypi.org/project/autohooks/)\n\nLibrary for managing and writing [git hooks](https://git-scm.com/docs/githooks)\nin Python.\n\nLooking for automatic formatting or linting, e.g., with [black] and [pylint],\nwhile creating a git commit using a pure Python implementation?\nWelcome to **autohooks**!\n\n- [Why?](#why)\n- [Solution](#solution)\n- [Requirements](#requirements)\n- [Modes](#modes)\n  - [Pythonpath Mode](#pythonpath-mode)\n  - [Pipenv Mode](#pipenv-mode)\n  - [Poetry Mode](#poetry-mode)\n- [Installing autohooks](#installing-autohooks)\n  - [1. Choosing an autohooks Mode](#1-choosing-an-autohooks-mode)\n  - [2. Installing the autohooks Python Package into the Current Environment](#2-installing-the-autohooks-python-package-into-the-current-environment)\n  - [3. Configuring Plugins to Be Run](#3-configuring-plugins-to-be-run)\n  - [4. Activating the Git Hooks](#4-activating-the-git-hooks)\n- [Plugins](#plugins)\n- [Howto: Writing a Plugin](#howto-writing-a-plugin)\n  - [Linting Plugin](#linting-plugin)\n  - [Formatting Plugin](#formatting-plugin)\n- [Maintainer](#maintainer)\n- [Contributing](#contributing)\n- [License](#license)\n\n## Why?\n\nSeveral outstanding libraries for managing and executing git hooks exist already. \nTo name a few: [husky](https://github.com/typicode/husky),\n[lint-staged](https://github.com/okonet/lint-staged),\n[precise-commits](https://github.com/nrwl/precise-commits) or\n[pre-commit](https://github.com/pre-commit/pre-commit).\n\nHowever, they either need another interpreter besides python (like husky) or are\ntoo ambiguous (like pre-commit). pre-commit is written in python but has support\nhooks written in all kind of languages. Additionally, it maintains the dependencies by\nitself and does not install them in the current environment.\n\n## Solution\n\nautohooks is a pure python library that installs a minimal\n[executable git hook](https://github.com/greenbone/autohooks/blob/master/autohooks/precommit/template).\nIt allows the decision of how to maintain the hook dependencies \nby supporting different modes.\n\n## Requirements\n\nautohooks uses `/usr/bin/env` with the `-S` argument to support\n[pipenv](#pythonpath-mode) and [poetry](#poetry-mode) modes. The `-S` argument\ngot introduced with coreutils [8.30 (2018-07-01)](https://github.com/coreutils/coreutils/blob/master/NEWS#L241).\nThis version is available in Debian Buster and since Ubuntu 19.04.\n\nIf you are using an older distribution not providing coreutils 8.30 or newer please choose the [python path mode](#pythonpath-mode).\n\nautohooks supports Python 3.5+. For development Python 3.6+ is required.\n\n## Modes\n\nCurrently three modes for using autohooks are supported:\n\n* `pythonpath`\n* `pipenv`\n* `poetry`\n\nThese modes handle how autohooks, the plugins and their dependencies are loaded\nduring git hook execution.\n\nIf no mode is specified in the [`pyproject.toml` config file](#configure-mode-and-plugins-to-be-run)\nand no mode is set during [activation](#activating-the-git-hooks), autohooks\nwill use the [pythonpath mode](#pythonpath-mode) by default.\n\n### Pythonpath Mode\n\nIn the `pythonpath` mode, the user has to install autohooks, the desired\nplugins and their dependencies into the [PYTHONPATH](https://docs.python.org/3/library/sys.html#sys.path)\nmanually.\n\nThis can be achieved by running `pip install --user autohooks ...` to put them\ninto the installation directory of the [current user](https://docs.python.org/3/library/site.html#site.USER_SITE)\nor with `pip install authooks ...` for a system wide installation.\n\nAlternatively, a [virtual environment](https://packaging.python.org/tutorials/installing-packages/#creating-and-using-virtual-environments)\ncould be used separating the installation from the global and user wide\nPython packages.\n\nIt is also possible to use [pipenv] for managing the virtual\nenvironment but activating the environment has to be done manually.\n\nTherefore it is even possible to run different versions of autohooks by\nusing the `pythonpath` mode and switching to a virtual environment.\n\n### Pipenv Mode\n\nIn the `pipenv` mode [pipenv] is used to run autohooks in a dedicated virtual\nenvironment. Pipenv uses a lock file to install exact versions. Therefore the\ninstallation is deterministic and reliable between different developer setups.\nIn contrast to the `pythonpath` mode the activation of the virtual environment\nprovided by [pipenv] is done automatically in the background.\n\n### Poetry Mode\n\nLike with the [pipenv mode](#pipenv-mode), it is possible to run autohooks in a\ndedicated environment controlled by [poetry]. By using the `poetry` mode the\nvirtual environment will be activated automatically in the background when\nexecuting the autohooks based git commit hook.\n\nUsing the `poetry` mode is highly recommended.\n\n## Installing autohooks\n\nFour steps are necessary for installing autohooks:\n\n1. Choosing an autohooks mode\n2. Installing the autohooks python package into the current environment\n3. Configuring plugins to be run\n4. Activating the [git hooks](https://git-scm.com/docs/githooks)\n\n### 1. Choosing an autohooks Mode\n\nFor its configuration, autohooks uses the *pyproject.toml* file specified in\n[PEP518](https://www.python.org/dev/peps/pep-0518/).\nAdding a *[tool.autohooks]* section allows to specify the desired [autohooks mode](#modes)\nand to set python modules to be run as [autohooks plugins](#plugins).\n\nThe mode can be set by adding a `mode =` line to the *pyproject.toml* file.\nCurrent possible options are `\"pythonpath\"`, `\"pipenv\"` and `\"poetry\"` (see\n[autohooks mode](#modes)). If the mode setting is missing, the `pythonpath` mode is used.\n\nExample *pyproject.toml*:\n\n```toml\n[tool.autohooks]\nmode = \"pipenv\"\n```\n\n### 2. Installing the autohooks Python Package into the Current Environment\n\nUsing [poetry] is highly recommended for installing the autohooks python package.\n\nTo install autohooks as a development dependency run\n\n```sh\npoetry add --dev autohooks\n```\n\nAlternatively, autohooks can be installed directly from GitHub by running\n\n```sh\npoetry add --dev git+https://github.com/greenbone/autohooks\n```\n\n### 3. Configuring Plugins to Be Run\n\nTo actually run an action on git hooks, [autohooks plugins](#plugins) have to be\ninstalled and configured, e.g., to install python linting via pylint run\n\n```bash\npoetry add --dev autohooks-plugin-pylint\n```\n\nAfterwards, the pylint plugin can be configured to run as a pre-commit git hook\nby adding the autohooks-plugins-pylint python module name to the `pre-commit`\nsetting in the `[tool.autohooks]` section in the *pyproject.toml* file.\n\nExample *pyproject.toml*:\n\n```toml\n[tool.autohooks]\nmode = \"pipenv\"\npre-commit = [\"autohooks.plugins.pylint\"]\n```\n\n### 4. Activating the Git Hooks\n\nBecause installing and activating git hooks automatically isn't reliable (with\nusing source distributions and different versions of pip) and even impossible\n(with using [wheels](https://www.python.org/dev/peps/pep-0427/)) the hooks need\nto be activated manually once in each installation.\n\nTo activate the git hooks run\n\n```bash\npoetry run autohooks activate\n```\n\nCalling `activate` also allows for overriding the [mode](#modes) defined in the\n*pyproject.toml* settings for testing purposes.\n\nExample:\n\n\n```bash\nautohooks activate --mode pipenv\n```\n\nPlease keep in mind that autohooks will always issue a warning if the mode used\nin the git hooks is different from the configured mode in the *pyproject.toml*\nfile.\n\nThe activation can always be verified by running `autohooks check`.\n\n## Plugins\n\n* Python code formatting via [black](https://github.com/greenbone/autohooks-plugin-black)\n\n* Python code formatting via [autopep8](https://github.com/LeoIV/autohooks-plugin-autopep8)\n\n* Python code linting via [pylint](https://github.com/greenbone/autohooks-plugin-pylint)\n\n* Python import sorting via [isort](https://github.com/greenbone/autohooks-plugin-isort)\n\n## Howto: Writing a Plugin\n\nPlugins need to be available in the\n[Python import path](https://docs.python.org/3/reference/import.html). The\neasiest way to achieve this is uploading a plugin to [PyPI](https://pypi.org/)\nand installing it via [pip] or [pipenv].\n\nAlternatively, a plugin can also be put into a *.autohooks* directory in the root\ndirectory of the git repository where the hooks should be executed.\n\nAn autohooks plugin is a Python module which provides a **precommit** function.\nThe function must accept arbitrary keywords because the keywords are likely to\nchange in future. Therefore using **\\*\\*kwargs** is highly recommended.\nCurrently only a *config* keyword argument is passed to the precommit function.\n\nExample:\n\n```python3\ndef precommit(**kwargs):\n    config = kwargs.get('config')\n```\n\nThe config can be used to receive settings from the *pyproject.toml* file, e.g.,\n\n```toml\n[tool.autohooks.plugins.foo]\nbar = 2\n```\n\ncan be received with\n\n```python3\ndef precommit(**kwargs):\n    config = kwargs.get('config')\n    default_value = 1\n    setting = config\n      .get('tool', 'autohooks', 'plugins', 'foo')\n      .get_value('bar', default_value)\n    return 0\n```\n\nWith autohooks it is possible to write all kinds of plugins. Most common are\nplugins for linting and formatting.\n\n### Linting Plugin\n\nUsually the standard call sequence for a linting plugin is the following:\n\n1. get list of staged files\n2. filter list of files for a specific file type\n3. stash unrelated changes\n4. apply checks on filtered list of files by calling some external tool\n5. raise exception if something did go wrong\n6. return 1 if check was not successful\n6. stage changes made by the tool\n7. unstash unrelated changes\n8. return 0\n\nExample plugin:\n\n```python3\nimport subprocess\n\nfrom autohooks.api import ok, fail\nfrom autohooks.api.git import get_staged_status, stash_unstaged_changes\nfrom autohooks.api.path import match\n\nDEFAULT_INCLUDE = ('*.ext')\n\n\ndef get_include(config)\n    if not config:\n        return DEFAULT_INCLUDE\n\n    config = config.get('tool', 'autohooks', 'plugins', 'foo')\n    return config.get_value('include', DEFAULT_INCUDE)\n\n\ndef precommit(**kwargs):\n    config = kwargs.get('config')\n    include = get_include(config)\n\n    files = [f for f in get_staged_status() if match(f.path, include)]\n\n    if not files:\n      # not files to lint\n      return 0\n\n    with stash_unstaged_changes(files):\n        const failed = False\n        for file in files:\n            status = subprocess.call(['foolinter', str(file)])\n            if status:\n                fail('Could not validate {}'.format(str(file)))\n                failed = True\n            else:\n                ok('Validated {}'.format(str(file)))\n\n        return 1 if failed else 0\n```\n\n### Formatting Plugin\n\nUsually the standard call sequence for a formatting plugin is the following:\n\n1. get list of staged files\n2. filter list of files for a specific file type\n3. stash unrelated changes\n4. apply formatting on filtered list of files by calling some external tool\n5. raise exception if something did go wrong\n6. stage changes made by the tool\n7. unstash unrelated changes\n8. return 0\n\nExample plugin:\n\n```python3\nimport subprocess\n\nfrom autohooks.api import ok, error\nfrom autohooks.api.git import (\n    get_staged_status,\n    stage_files_from_status_list,\n    stash_unstaged_changes,\n)\nfrom autohooks.api.path import match\n\nDEFAULT_INCLUDE = ('*.ext')\n\n\ndef get_include(config)\n    if not config:\n        return DEFAULT_INCLUDE\n\n    config = config.get('tool', 'autohooks', 'plugins', 'bar')\n    return config.get_value('include', DEFAULT_INCUDE)\n\n\ndef precommit(**kwargs):\n    config = kwargs.get('config')\n    include = get_include(config)\n\n    files = [f for f in get_staged_status() if match(f.path, include)]\n\n    if not files:\n      # not files to format\n      return 0\n\n    with stash_unstaged_changes(files):\n        for file in files:\n            # run formatter and raise exception if it fails\n            subprocess.run(['barformatter', str(file)], check=True)\n            ok('Formatted {}'.format(str(file)))\n\n        return 0\n```\n\n## Maintainer\n\nThis project is maintained by [Greenbone Networks GmbH](https://www.greenbone.net/).\n\n## Contributing\n\nYour contributions are highly appreciated. Please\n[create a pull request](https://github.com/greenbone/autohooks/pulls)\non GitHub. Bigger changes need to be discussed with the development team via the\n[issues section at GitHub](https://github.com/greenbone/autohooks/issues)\nfirst.\n\n## License\n\nCopyright (C) 2019 [Greenbone Networks GmbH](https://www.greenbone.net/)\n\nLicensed under the [GNU General Public License v3.0 or later](LICENSE).\n\n[black]: https://black.readthedocs.io/en/stable/\n[pip]: https://pip.pypa.io/en/stable/\n[pipenv]: https://pipenv.readthedocs.io/en/latest/\n[poetry]: https://python-poetry.org/\n[pylint]: https://pylint.readthedocs.io/en/latest/\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/greenbone/autohooks", "keywords": "git,formatting,linting,hooks", "license": "GPL-3.0-or-later", "maintainer": "", "maintainer_email": "", "name": "autohooks", "package_url": "https://pypi.org/project/autohooks/", "platform": "", "project_url": "https://pypi.org/project/autohooks/", "project_urls": {"Homepage": "https://github.com/greenbone/autohooks", "Repository": "https://github.com/greenbone/autohooks"}, "release_url": "https://pypi.org/project/autohooks/2.1.0/", "requires_dist": ["colorful (>=0.5.4,<0.6.0)", "packaging (>=20.3,<21.0)", "tomlkit (>=0.5.11,<0.6.0)"], "requires_python": ">=3.5,<4.0", "summary": "Library for managing git hooks", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Greenbone Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fcd62af33a76d2e9f5cf72e52802f8231ea5c5cf/68747470733a2f2f7777772e677265656e626f6e652e6e65742f77702d636f6e74656e742f75706c6f6164732f67625f6c6f676f5f726573696c69656e63655f686f72697a6f6e74616c2e706e67\"></p>\n<h1>Autohooks </h1>\n<p><a href=\"https://pypi.org/project/autohooks/\" rel=\"nofollow\"><img alt=\"PyPI release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cba9ab81571d91f3b47dc079a9a89d961ba4fdba/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6175746f686f6f6b732e737667\"></a></p>\n<p>Library for managing and writing <a href=\"https://git-scm.com/docs/githooks\" rel=\"nofollow\">git hooks</a>\nin Python.</p>\n<p>Looking for automatic formatting or linting, e.g., with <a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\">black</a> and <a href=\"https://pylint.readthedocs.io/en/latest/\" rel=\"nofollow\">pylint</a>,\nwhile creating a git commit using a pure Python implementation?\nWelcome to <strong>autohooks</strong>!</p>\n<ul>\n<li><a href=\"#why\" rel=\"nofollow\">Why?</a></li>\n<li><a href=\"#solution\" rel=\"nofollow\">Solution</a></li>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a></li>\n<li><a href=\"#modes\" rel=\"nofollow\">Modes</a>\n<ul>\n<li><a href=\"#pythonpath-mode\" rel=\"nofollow\">Pythonpath Mode</a></li>\n<li><a href=\"#pipenv-mode\" rel=\"nofollow\">Pipenv Mode</a></li>\n<li><a href=\"#poetry-mode\" rel=\"nofollow\">Poetry Mode</a></li>\n</ul>\n</li>\n<li><a href=\"#installing-autohooks\" rel=\"nofollow\">Installing autohooks</a>\n<ul>\n<li><a href=\"#1-choosing-an-autohooks-mode\" rel=\"nofollow\">1. Choosing an autohooks Mode</a></li>\n<li><a href=\"#2-installing-the-autohooks-python-package-into-the-current-environment\" rel=\"nofollow\">2. Installing the autohooks Python Package into the Current Environment</a></li>\n<li><a href=\"#3-configuring-plugins-to-be-run\" rel=\"nofollow\">3. Configuring Plugins to Be Run</a></li>\n<li><a href=\"#4-activating-the-git-hooks\" rel=\"nofollow\">4. Activating the Git Hooks</a></li>\n</ul>\n</li>\n<li><a href=\"#plugins\" rel=\"nofollow\">Plugins</a></li>\n<li><a href=\"#howto-writing-a-plugin\" rel=\"nofollow\">Howto: Writing a Plugin</a>\n<ul>\n<li><a href=\"#linting-plugin\" rel=\"nofollow\">Linting Plugin</a></li>\n<li><a href=\"#formatting-plugin\" rel=\"nofollow\">Formatting Plugin</a></li>\n</ul>\n</li>\n<li><a href=\"#maintainer\" rel=\"nofollow\">Maintainer</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Why?</h2>\n<p>Several outstanding libraries for managing and executing git hooks exist already.\nTo name a few: <a href=\"https://github.com/typicode/husky\" rel=\"nofollow\">husky</a>,\n<a href=\"https://github.com/okonet/lint-staged\" rel=\"nofollow\">lint-staged</a>,\n<a href=\"https://github.com/nrwl/precise-commits\" rel=\"nofollow\">precise-commits</a> or\n<a href=\"https://github.com/pre-commit/pre-commit\" rel=\"nofollow\">pre-commit</a>.</p>\n<p>However, they either need another interpreter besides python (like husky) or are\ntoo ambiguous (like pre-commit). pre-commit is written in python but has support\nhooks written in all kind of languages. Additionally, it maintains the dependencies by\nitself and does not install them in the current environment.</p>\n<h2>Solution</h2>\n<p>autohooks is a pure python library that installs a minimal\n<a href=\"https://github.com/greenbone/autohooks/blob/master/autohooks/precommit/template\" rel=\"nofollow\">executable git hook</a>.\nIt allows the decision of how to maintain the hook dependencies\nby supporting different modes.</p>\n<h2>Requirements</h2>\n<p>autohooks uses <code>/usr/bin/env</code> with the <code>-S</code> argument to support\n<a href=\"#pythonpath-mode\" rel=\"nofollow\">pipenv</a> and <a href=\"#poetry-mode\" rel=\"nofollow\">poetry</a> modes. The <code>-S</code> argument\ngot introduced with coreutils <a href=\"https://github.com/coreutils/coreutils/blob/master/NEWS#L241\" rel=\"nofollow\">8.30 (2018-07-01)</a>.\nThis version is available in Debian Buster and since Ubuntu 19.04.</p>\n<p>If you are using an older distribution not providing coreutils 8.30 or newer please choose the <a href=\"#pythonpath-mode\" rel=\"nofollow\">python path mode</a>.</p>\n<p>autohooks supports Python 3.5+. For development Python 3.6+ is required.</p>\n<h2>Modes</h2>\n<p>Currently three modes for using autohooks are supported:</p>\n<ul>\n<li><code>pythonpath</code></li>\n<li><code>pipenv</code></li>\n<li><code>poetry</code></li>\n</ul>\n<p>These modes handle how autohooks, the plugins and their dependencies are loaded\nduring git hook execution.</p>\n<p>If no mode is specified in the <a href=\"#configure-mode-and-plugins-to-be-run\" rel=\"nofollow\"><code>pyproject.toml</code> config file</a>\nand no mode is set during <a href=\"#activating-the-git-hooks\" rel=\"nofollow\">activation</a>, autohooks\nwill use the <a href=\"#pythonpath-mode\" rel=\"nofollow\">pythonpath mode</a> by default.</p>\n<h3>Pythonpath Mode</h3>\n<p>In the <code>pythonpath</code> mode, the user has to install autohooks, the desired\nplugins and their dependencies into the <a href=\"https://docs.python.org/3/library/sys.html#sys.path\" rel=\"nofollow\">PYTHONPATH</a>\nmanually.</p>\n<p>This can be achieved by running <code>pip install --user autohooks ...</code> to put them\ninto the installation directory of the <a href=\"https://docs.python.org/3/library/site.html#site.USER_SITE\" rel=\"nofollow\">current user</a>\nor with <code>pip install authooks ...</code> for a system wide installation.</p>\n<p>Alternatively, a <a href=\"https://packaging.python.org/tutorials/installing-packages/#creating-and-using-virtual-environments\" rel=\"nofollow\">virtual environment</a>\ncould be used separating the installation from the global and user wide\nPython packages.</p>\n<p>It is also possible to use <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a> for managing the virtual\nenvironment but activating the environment has to be done manually.</p>\n<p>Therefore it is even possible to run different versions of autohooks by\nusing the <code>pythonpath</code> mode and switching to a virtual environment.</p>\n<h3>Pipenv Mode</h3>\n<p>In the <code>pipenv</code> mode <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a> is used to run autohooks in a dedicated virtual\nenvironment. Pipenv uses a lock file to install exact versions. Therefore the\ninstallation is deterministic and reliable between different developer setups.\nIn contrast to the <code>pythonpath</code> mode the activation of the virtual environment\nprovided by <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a> is done automatically in the background.</p>\n<h3>Poetry Mode</h3>\n<p>Like with the <a href=\"#pipenv-mode\" rel=\"nofollow\">pipenv mode</a>, it is possible to run autohooks in a\ndedicated environment controlled by <a href=\"https://python-poetry.org/\" rel=\"nofollow\">poetry</a>. By using the <code>poetry</code> mode the\nvirtual environment will be activated automatically in the background when\nexecuting the autohooks based git commit hook.</p>\n<p>Using the <code>poetry</code> mode is highly recommended.</p>\n<h2>Installing autohooks</h2>\n<p>Four steps are necessary for installing autohooks:</p>\n<ol>\n<li>Choosing an autohooks mode</li>\n<li>Installing the autohooks python package into the current environment</li>\n<li>Configuring plugins to be run</li>\n<li>Activating the <a href=\"https://git-scm.com/docs/githooks\" rel=\"nofollow\">git hooks</a></li>\n</ol>\n<h3>1. Choosing an autohooks Mode</h3>\n<p>For its configuration, autohooks uses the <em>pyproject.toml</em> file specified in\n<a href=\"https://www.python.org/dev/peps/pep-0518/\" rel=\"nofollow\">PEP518</a>.\nAdding a <em>[tool.autohooks]</em> section allows to specify the desired <a href=\"#modes\" rel=\"nofollow\">autohooks mode</a>\nand to set python modules to be run as <a href=\"#plugins\" rel=\"nofollow\">autohooks plugins</a>.</p>\n<p>The mode can be set by adding a <code>mode =</code> line to the <em>pyproject.toml</em> file.\nCurrent possible options are <code>\"pythonpath\"</code>, <code>\"pipenv\"</code> and <code>\"poetry\"</code> (see\n<a href=\"#modes\" rel=\"nofollow\">autohooks mode</a>). If the mode setting is missing, the <code>pythonpath</code> mode is used.</p>\n<p>Example <em>pyproject.toml</em>:</p>\n<pre><span class=\"k\">[tool.autohooks]</span>\n<span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s\">\"pipenv\"</span>\n</pre>\n<h3>2. Installing the autohooks Python Package into the Current Environment</h3>\n<p>Using <a href=\"https://python-poetry.org/\" rel=\"nofollow\">poetry</a> is highly recommended for installing the autohooks python package.</p>\n<p>To install autohooks as a development dependency run</p>\n<pre>poetry add --dev autohooks\n</pre>\n<p>Alternatively, autohooks can be installed directly from GitHub by running</p>\n<pre>poetry add --dev git+https://github.com/greenbone/autohooks\n</pre>\n<h3>3. Configuring Plugins to Be Run</h3>\n<p>To actually run an action on git hooks, <a href=\"#plugins\" rel=\"nofollow\">autohooks plugins</a> have to be\ninstalled and configured, e.g., to install python linting via pylint run</p>\n<pre>poetry add --dev autohooks-plugin-pylint\n</pre>\n<p>Afterwards, the pylint plugin can be configured to run as a pre-commit git hook\nby adding the autohooks-plugins-pylint python module name to the <code>pre-commit</code>\nsetting in the <code>[tool.autohooks]</code> section in the <em>pyproject.toml</em> file.</p>\n<p>Example <em>pyproject.toml</em>:</p>\n<pre><span class=\"k\">[tool.autohooks]</span>\n<span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s\">\"pipenv\"</span>\n<span class=\"n\">pre-commit</span> <span class=\"o\">=</span> <span class=\"k\">[\"autohooks.plugins.pylint\"]</span>\n</pre>\n<h3>4. Activating the Git Hooks</h3>\n<p>Because installing and activating git hooks automatically isn't reliable (with\nusing source distributions and different versions of pip) and even impossible\n(with using <a href=\"https://www.python.org/dev/peps/pep-0427/\" rel=\"nofollow\">wheels</a>) the hooks need\nto be activated manually once in each installation.</p>\n<p>To activate the git hooks run</p>\n<pre>poetry run autohooks activate\n</pre>\n<p>Calling <code>activate</code> also allows for overriding the <a href=\"#modes\" rel=\"nofollow\">mode</a> defined in the\n<em>pyproject.toml</em> settings for testing purposes.</p>\n<p>Example:</p>\n<pre>autohooks activate --mode pipenv\n</pre>\n<p>Please keep in mind that autohooks will always issue a warning if the mode used\nin the git hooks is different from the configured mode in the <em>pyproject.toml</em>\nfile.</p>\n<p>The activation can always be verified by running <code>autohooks check</code>.</p>\n<h2>Plugins</h2>\n<ul>\n<li>\n<p>Python code formatting via <a href=\"https://github.com/greenbone/autohooks-plugin-black\" rel=\"nofollow\">black</a></p>\n</li>\n<li>\n<p>Python code formatting via <a href=\"https://github.com/LeoIV/autohooks-plugin-autopep8\" rel=\"nofollow\">autopep8</a></p>\n</li>\n<li>\n<p>Python code linting via <a href=\"https://github.com/greenbone/autohooks-plugin-pylint\" rel=\"nofollow\">pylint</a></p>\n</li>\n<li>\n<p>Python import sorting via <a href=\"https://github.com/greenbone/autohooks-plugin-isort\" rel=\"nofollow\">isort</a></p>\n</li>\n</ul>\n<h2>Howto: Writing a Plugin</h2>\n<p>Plugins need to be available in the\n<a href=\"https://docs.python.org/3/reference/import.html\" rel=\"nofollow\">Python import path</a>. The\neasiest way to achieve this is uploading a plugin to <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPI</a>\nand installing it via <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> or <a href=\"https://pipenv.readthedocs.io/en/latest/\" rel=\"nofollow\">pipenv</a>.</p>\n<p>Alternatively, a plugin can also be put into a <em>.autohooks</em> directory in the root\ndirectory of the git repository where the hooks should be executed.</p>\n<p>An autohooks plugin is a Python module which provides a <strong>precommit</strong> function.\nThe function must accept arbitrary keywords because the keywords are likely to\nchange in future. Therefore using <strong>**kwargs</strong> is highly recommended.\nCurrently only a <em>config</em> keyword argument is passed to the precommit function.</p>\n<p>Example:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">precommit</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n</pre>\n<p>The config can be used to receive settings from the <em>pyproject.toml</em> file, e.g.,</p>\n<pre><span class=\"k\">[tool.autohooks.plugins.foo]</span>\n<span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n</pre>\n<p>can be received with</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">precommit</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n    <span class=\"n\">default_value</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"n\">setting</span> <span class=\"o\">=</span> <span class=\"n\">config</span>\n      <span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'autohooks'</span><span class=\"p\">,</span> <span class=\"s1\">'plugins'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n      <span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"n\">default_value</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre>\n<p>With autohooks it is possible to write all kinds of plugins. Most common are\nplugins for linting and formatting.</p>\n<h3>Linting Plugin</h3>\n<p>Usually the standard call sequence for a linting plugin is the following:</p>\n<ol>\n<li>get list of staged files</li>\n<li>filter list of files for a specific file type</li>\n<li>stash unrelated changes</li>\n<li>apply checks on filtered list of files by calling some external tool</li>\n<li>raise exception if something did go wrong</li>\n<li>return 1 if check was not successful</li>\n<li>stage changes made by the tool</li>\n<li>unstash unrelated changes</li>\n<li>return 0</li>\n</ol>\n<p>Example plugin:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api</span> <span class=\"kn\">import</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">fail</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api.git</span> <span class=\"kn\">import</span> <span class=\"n\">get_staged_status</span><span class=\"p\">,</span> <span class=\"n\">stash_unstaged_changes</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api.path</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">DEFAULT_INCLUDE</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'*.ext'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_include</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">DEFAULT_INCLUDE</span>\n\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'autohooks'</span><span class=\"p\">,</span> <span class=\"s1\">'plugins'</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'include'</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_INCUDE</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">precommit</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n    <span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"n\">get_include</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">get_staged_status</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n      <span class=\"c1\"># not files to lint</span>\n      <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">stash_unstaged_changes</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">):</span>\n        <span class=\"n\">const</span> <span class=\"n\">failed</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n        <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n            <span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">([</span><span class=\"s1\">'foolinter'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)])</span>\n            <span class=\"k\">if</span> <span class=\"n\">status</span><span class=\"p\">:</span>\n                <span class=\"n\">fail</span><span class=\"p\">(</span><span class=\"s1\">'Could not validate </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)))</span>\n                <span class=\"n\">failed</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"s1\">'Validated </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)))</span>\n\n        <span class=\"k\">return</span> <span class=\"mi\">1</span> <span class=\"k\">if</span> <span class=\"n\">failed</span> <span class=\"k\">else</span> <span class=\"mi\">0</span>\n</pre>\n<h3>Formatting Plugin</h3>\n<p>Usually the standard call sequence for a formatting plugin is the following:</p>\n<ol>\n<li>get list of staged files</li>\n<li>filter list of files for a specific file type</li>\n<li>stash unrelated changes</li>\n<li>apply formatting on filtered list of files by calling some external tool</li>\n<li>raise exception if something did go wrong</li>\n<li>stage changes made by the tool</li>\n<li>unstash unrelated changes</li>\n<li>return 0</li>\n</ol>\n<p>Example plugin:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">subprocess</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api</span> <span class=\"kn\">import</span> <span class=\"n\">ok</span><span class=\"p\">,</span> <span class=\"n\">error</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api.git</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">get_staged_status</span><span class=\"p\">,</span>\n    <span class=\"n\">stage_files_from_status_list</span><span class=\"p\">,</span>\n    <span class=\"n\">stash_unstaged_changes</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"kn\">from</span> <span class=\"nn\">autohooks.api.path</span> <span class=\"kn\">import</span> <span class=\"n\">match</span>\n\n<span class=\"n\">DEFAULT_INCLUDE</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'*.ext'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_include</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">config</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">DEFAULT_INCLUDE</span>\n\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'tool'</span><span class=\"p\">,</span> <span class=\"s1\">'autohooks'</span><span class=\"p\">,</span> <span class=\"s1\">'plugins'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get_value</span><span class=\"p\">(</span><span class=\"s1\">'include'</span><span class=\"p\">,</span> <span class=\"n\">DEFAULT_INCUDE</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">precommit</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'config'</span><span class=\"p\">)</span>\n    <span class=\"n\">include</span> <span class=\"o\">=</span> <span class=\"n\">get_include</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n\n    <span class=\"n\">files</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">get_staged_status</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n      <span class=\"c1\"># not files to format</span>\n      <span class=\"k\">return</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">stash_unstaged_changes</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">file</span> <span class=\"ow\">in</span> <span class=\"n\">files</span><span class=\"p\">:</span>\n            <span class=\"c1\"># run formatter and raise exception if it fails</span>\n            <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">([</span><span class=\"s1\">'barformatter'</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)],</span> <span class=\"n\">check</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n            <span class=\"n\">ok</span><span class=\"p\">(</span><span class=\"s1\">'Formatted </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)))</span>\n\n        <span class=\"k\">return</span> <span class=\"mi\">0</span>\n</pre>\n<h2>Maintainer</h2>\n<p>This project is maintained by <a href=\"https://www.greenbone.net/\" rel=\"nofollow\">Greenbone Networks GmbH</a>.</p>\n<h2>Contributing</h2>\n<p>Your contributions are highly appreciated. Please\n<a href=\"https://github.com/greenbone/autohooks/pulls\" rel=\"nofollow\">create a pull request</a>\non GitHub. Bigger changes need to be discussed with the development team via the\n<a href=\"https://github.com/greenbone/autohooks/issues\" rel=\"nofollow\">issues section at GitHub</a>\nfirst.</p>\n<h2>License</h2>\n<p>Copyright (C) 2019 <a href=\"https://www.greenbone.net/\" rel=\"nofollow\">Greenbone Networks GmbH</a></p>\n<p>Licensed under the <a href=\"LICENSE\" rel=\"nofollow\">GNU General Public License v3.0 or later</a>.</p>\n\n          </div>"}, "last_serial": 6984761, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "305a4d401746a43f6dfe25ceb948721b", "sha256": "1cee2cb93a01ecfc9dd2a7b5fb7aa2b0c8c336251e94cf33fd6cf25e2c5baa35"}, "downloads": -1, "filename": "autohooks-1.0.0.tar.gz", "has_sig": false, "md5_digest": "305a4d401746a43f6dfe25ceb948721b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27719, "upload_time": "2019-02-20T12:41:04", "upload_time_iso_8601": "2019-02-20T12:41:04.362050Z", "url": "https://files.pythonhosted.org/packages/b4/9d/5db7a88ab28159d75e1ef149c84909243a6b82680565098f2f47b56c990d/autohooks-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "d44174b8b46d69e82aeada24a4e4c70d", "sha256": "3dff17e3ff68f8073a51432580809fdf384c0bd079c4aef2228b06539f0eb4a6"}, "downloads": -1, "filename": "autohooks-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d44174b8b46d69e82aeada24a4e4c70d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27721, "upload_time": "2019-02-25T11:14:38", "upload_time_iso_8601": "2019-02-25T11:14:38.037850Z", "url": "https://files.pythonhosted.org/packages/e6/c2/6c5312c55980f44706b0dcd2d75aca43cd1f49bc7489a7de2b771467bf14/autohooks-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "dab5074da3f6cf9d5a922c5f86c85c6a", "sha256": "ef9fd5151a5b572fe8b467ead995d7abc0bd5dc71d98d056de5304590250c815"}, "downloads": -1, "filename": "autohooks-1.0.2.tar.gz", "has_sig": false, "md5_digest": "dab5074da3f6cf9d5a922c5f86c85c6a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27759, "upload_time": "2019-02-25T11:59:54", "upload_time_iso_8601": "2019-02-25T11:59:54.473252Z", "url": "https://files.pythonhosted.org/packages/46/eb/767ebd6094c562ec9d561fbb4779261eeba9fa660a73292e662bcc8bf54c/autohooks-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c77eaa88108eb9ad9f999b63aa2dff5f", "sha256": "2ef6e1b90d1837191bacd5faa2f4cdaafebebb7c21707b6ba22ad1879ec31326"}, "downloads": -1, "filename": "autohooks-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c77eaa88108eb9ad9f999b63aa2dff5f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 34988, "upload_time": "2019-03-27T13:39:42", "upload_time_iso_8601": "2019-03-27T13:39:42.991664Z", "url": "https://files.pythonhosted.org/packages/be/52/f4ebac5a975a79345f80dc01af5159b5fda6ad46197a3dec63e4ab0c0cf6/autohooks-1.1.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "0e8e674cca4ef33977e536fd0f7949ec", "sha256": "5262bfffffc725c2d0b654260fd064fb4a090f6501c168031e49656fd9047961"}, "downloads": -1, "filename": "autohooks-2.0.0.tar.gz", "has_sig": false, "md5_digest": "0e8e674cca4ef33977e536fd0f7949ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 50570, "upload_time": "2019-11-20T13:51:51", "upload_time_iso_8601": "2019-11-20T13:51:51.307160Z", "url": "https://files.pythonhosted.org/packages/5d/c7/b58ebbe8f0474beaa0f0ac8fb9547ae2da2a9e3b47c57b6142181a1667f1/autohooks-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "9953d952072412d0e03cf3b7e63c8a30", "sha256": "b21863e4e47c612462cb8d5d6150072eb41ce8fc3eee687d56d1965b2f46c42b"}, "downloads": -1, "filename": "autohooks-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9953d952072412d0e03cf3b7e63c8a30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 39581, "upload_time": "2020-04-09T10:12:53", "upload_time_iso_8601": "2020-04-09T10:12:53.855946Z", "url": "https://files.pythonhosted.org/packages/39/d3/ebf6f4b28da33b7f6c7ce876a9d1a2a1ab73ae974f3cb1f8870f13bb0248/autohooks-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea0fe57ad951dcc4257d53f988d17373", "sha256": "a9770c39ab80128ec9fbaf0584e6528837b2ea6ea5f2a156452d589cb3ba8b35"}, "downloads": -1, "filename": "autohooks-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ea0fe57ad951dcc4257d53f988d17373", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 52079, "upload_time": "2020-04-09T10:12:55", "upload_time_iso_8601": "2020-04-09T10:12:55.071850Z", "url": "https://files.pythonhosted.org/packages/a3/a0/521d86bb67eb2cced93e778bd030fbddec7d2c676ab58e21e1166ade36dd/autohooks-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9953d952072412d0e03cf3b7e63c8a30", "sha256": "b21863e4e47c612462cb8d5d6150072eb41ce8fc3eee687d56d1965b2f46c42b"}, "downloads": -1, "filename": "autohooks-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9953d952072412d0e03cf3b7e63c8a30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5,<4.0", "size": 39581, "upload_time": "2020-04-09T10:12:53", "upload_time_iso_8601": "2020-04-09T10:12:53.855946Z", "url": "https://files.pythonhosted.org/packages/39/d3/ebf6f4b28da33b7f6c7ce876a9d1a2a1ab73ae974f3cb1f8870f13bb0248/autohooks-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea0fe57ad951dcc4257d53f988d17373", "sha256": "a9770c39ab80128ec9fbaf0584e6528837b2ea6ea5f2a156452d589cb3ba8b35"}, "downloads": -1, "filename": "autohooks-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ea0fe57ad951dcc4257d53f988d17373", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5,<4.0", "size": 52079, "upload_time": "2020-04-09T10:12:55", "upload_time_iso_8601": "2020-04-09T10:12:55.071850Z", "url": "https://files.pythonhosted.org/packages/a3/a0/521d86bb67eb2cced93e778bd030fbddec7d2c676ab58e21e1166ade36dd/autohooks-2.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:16 2020"}