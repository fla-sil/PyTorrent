{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# HTMLy\nElm inspired HTML generator for Python.\n\n## From the doctest.\nCreating a tag.\n\n>>> tag = div([], [])\n>>> render(tag)\n'<div ></div>'\n\nCreating a self closing tag.\n>>> render(hr([]))\n'<hr />'\n\nTag can have a content.\n>>> render(div([], [text('content')]))\n'<div >content</div>'\n>>> render(text('content'))\n'content'\n\nYou can use some attributes for the tag.\n>>> render(div([lang('tr'), id_('content'), class_('bar'), attribute('data-value', 'foo')], []))\n'<div lang=\"tr\" id=\"content\" class=\"bar\" data-value=\"foo\"></div>'\n\nYou can have them both.\n>>> render(div([lang('tr')], [text('content')]))\n'<div lang=\"tr\">content</div>'\n\nYou can have more content.\n>>> render(div([], [ nav([], []), text('Hello'), hr([])]))\n'<div ><nav ></nav>Hello<hr /></div>'\n\nYou can now start having composable abstractions as below.\nYou can have your own list item which takes content, without need of extra attributes and list syntax for content.\n>>> _li = lambda item: li([], [text(item)])\n>>> litems = lambda items: [_li(item) for item in items ]\n\nAbstracting again just because we can.\n>>> _ul = lambda items: ul([], litems(items))\n>>> render(_ul(['Bob', 'Mary', 'Joe']))\n'<ul ><li >Bob</li><li >Mary</li><li >Joe</li></ul>'\n\nNested Elements\n>>> render(div([], [div([], [p([], [text('a paragraph')])])]))\n'<div ><div ><p >a paragraph</p></div></div>'\n\n>>> render(html([],\n...             [ head([],\n...                    [ title([],\n...                            [text('Awesome Website')]),\n...                      script([src('/script.js')], [])\n...                    ]),\n...               body([],\n...                    [ header([],\n...                             [ img([src('/logo.png')]) ]),\n...                      div([], [text('Content Here')]),\n...                      footer([],\n...                             [hr([]),\n...                              text('Copyright 2019')])\n...                      ])\n...               ]))\n'<html ><head ><title >Awesome Website</title><script src=\"/script.js\"></script></head><body ><header ><img src=\"/logo.png\"/></header><div >Content Here</div><footer ><hr />Copyright 2019</footer></body></html>'", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "htmly", "package_url": "https://pypi.org/project/htmly/", "platform": "", "project_url": "https://pypi.org/project/htmly/", "project_urls": null, "release_url": "https://pypi.org/project/htmly/0.3dev/", "requires_dist": null, "requires_python": "", "summary": "", "version": "0.3dev", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># HTMLy\nElm inspired HTML generator for Python.</p>\n<p>## From the doctest.\nCreating a tag.</p>\n<pre>&gt;&gt;&gt; tag = div([], [])\n&gt;&gt;&gt; render(tag)\n'&lt;div &gt;&lt;/div&gt;'\n</pre>\n<p>Creating a self closing tag.\n&gt;&gt;&gt; render(hr([]))\n\u2018&lt;hr /&gt;\u2019</p>\n<p>Tag can have a content.\n&gt;&gt;&gt; render(div([], [text(\u2018content\u2019)]))\n\u2018&lt;div &gt;content&lt;/div&gt;\u2019\n&gt;&gt;&gt; render(text(\u2018content\u2019))\n\u2018content\u2019</p>\n<p>You can use some attributes for the tag.\n&gt;&gt;&gt; render(div([lang(\u2018tr\u2019), id_(\u2018content\u2019), class_(\u2018bar\u2019), attribute(\u2018data-value\u2019, \u2018foo\u2019)], []))\n\u2018&lt;div lang=\u201dtr\u201d id=\u201dcontent\u201d class=\u201dbar\u201d data-value=\u201dfoo\u201d&gt;&lt;/div&gt;\u2019</p>\n<p>You can have them both.\n&gt;&gt;&gt; render(div([lang(\u2018tr\u2019)], [text(\u2018content\u2019)]))\n\u2018&lt;div lang=\u201dtr\u201d&gt;content&lt;/div&gt;\u2019</p>\n<p>You can have more content.\n&gt;&gt;&gt; render(div([], [ nav([], []), text(\u2018Hello\u2019), hr([])]))\n\u2018&lt;div &gt;&lt;nav &gt;&lt;/nav&gt;Hello&lt;hr /&gt;&lt;/div&gt;\u2019</p>\n<p>You can now start having composable abstractions as below.\nYou can have your own list item which takes content, without need of extra attributes and list syntax for content.\n&gt;&gt;&gt; _li = lambda item: li([], [text(item)])\n&gt;&gt;&gt; litems = lambda items: [_li(item) for item in items ]</p>\n<p>Abstracting again just because we can.\n&gt;&gt;&gt; _ul = lambda items: ul([], litems(items))\n&gt;&gt;&gt; render(_ul([\u2018Bob\u2019, \u2018Mary\u2019, \u2018Joe\u2019]))\n\u2018&lt;ul &gt;&lt;li &gt;Bob&lt;/li&gt;&lt;li &gt;Mary&lt;/li&gt;&lt;li &gt;Joe&lt;/li&gt;&lt;/ul&gt;\u2019</p>\n<p>Nested Elements\n&gt;&gt;&gt; render(div([], [div([], [p([], [text(\u2018a paragraph\u2019)])])]))\n\u2018&lt;div &gt;&lt;div &gt;&lt;p &gt;a paragraph&lt;/p&gt;&lt;/div&gt;&lt;/div&gt;\u2019</p>\n<pre>&gt;&gt;&gt; render(html([],\n...             [ head([],\n...                    [ title([],\n...                            [text('Awesome Website')]),\n...                      script([src('/script.js')], [])\n...                    ]),\n...               body([],\n...                    [ header([],\n...                             [ img([src('/logo.png')]) ]),\n...                      div([], [text('Content Here')]),\n...                      footer([],\n...                             [hr([]),\n...                              text('Copyright 2019')])\n...                      ])\n...               ]))\n'&lt;html &gt;&lt;head &gt;&lt;title &gt;Awesome Website&lt;/title&gt;&lt;script src=\"/script.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body &gt;&lt;header &gt;&lt;img src=\"/logo.png\"/&gt;&lt;/header&gt;&lt;div &gt;Content Here&lt;/div&gt;&lt;footer &gt;&lt;hr /&gt;Copyright 2019&lt;/footer&gt;&lt;/body&gt;&lt;/html&gt;'\n</pre>\n\n          </div>"}, "last_serial": 4896754, "releases": {"0.1dev": [{"comment_text": "", "digests": {"md5": "577271713d5d66843ac1f711689340eb", "sha256": "9a820bceab34d1a3f6be5b860a20bbc256b662c91de3181b9a492251e8698ff8"}, "downloads": -1, "filename": "htmly-0.1dev.tar.gz", "has_sig": false, "md5_digest": "577271713d5d66843ac1f711689340eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1206, "upload_time": "2019-03-04T20:14:55", "upload_time_iso_8601": "2019-03-04T20:14:55.813883Z", "url": "https://files.pythonhosted.org/packages/12/fc/f547890912128f9397d97e3780819d1751a4b51d2f606ffcf9fea3ddcaa5/htmly-0.1dev.tar.gz", "yanked": false}], "0.2dev": [{"comment_text": "", "digests": {"md5": "4f47a9a4786f7c67864b424f9a6525a8", "sha256": "24cab5fe2f848f300a9bb5cdda2524074cae4453c73d58520dd1ff69e739aab0"}, "downloads": -1, "filename": "htmly-0.2dev.tar.gz", "has_sig": false, "md5_digest": "4f47a9a4786f7c67864b424f9a6525a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2090, "upload_time": "2019-03-04T23:59:13", "upload_time_iso_8601": "2019-03-04T23:59:13.172779Z", "url": "https://files.pythonhosted.org/packages/13/ee/689f6dd7b3a39fab16cf1960f29a0b6717effbe1cdc8304918d5e6dd85de/htmly-0.2dev.tar.gz", "yanked": false}], "0.3dev": [{"comment_text": "", "digests": {"md5": "15f7ca65cfd2660a33f3f12a77202643", "sha256": "169523a31d41864b9fcc7648850011dcf1e156bcde36dfab5a4d537173c18180"}, "downloads": -1, "filename": "htmly-0.3dev.tar.gz", "has_sig": false, "md5_digest": "15f7ca65cfd2660a33f3f12a77202643", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2335, "upload_time": "2019-03-05T00:02:29", "upload_time_iso_8601": "2019-03-05T00:02:29.377402Z", "url": "https://files.pythonhosted.org/packages/78/47/600191509c0161ef8c4ea07bb304496207f877a9effc1c27b390756920b6/htmly-0.3dev.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15f7ca65cfd2660a33f3f12a77202643", "sha256": "169523a31d41864b9fcc7648850011dcf1e156bcde36dfab5a4d537173c18180"}, "downloads": -1, "filename": "htmly-0.3dev.tar.gz", "has_sig": false, "md5_digest": "15f7ca65cfd2660a33f3f12a77202643", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2335, "upload_time": "2019-03-05T00:02:29", "upload_time_iso_8601": "2019-03-05T00:02:29.377402Z", "url": "https://files.pythonhosted.org/packages/78/47/600191509c0161ef8c4ea07bb304496207f877a9effc1c27b390756920b6/htmly-0.3dev.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:13 2020"}