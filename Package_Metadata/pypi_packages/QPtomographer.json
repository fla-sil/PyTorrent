{"info": {"author": "Philippe Faist", "author_email": "phfaist@caltech.edu", "bugtrack_url": null, "classifiers": [], "description": "# Reliable Quantum Process Tomography\n\n![QPtomographer](QPtomographer.svg)\n\nDerive quantum error bars for quantum processes in terms of the diamond norm to\na reference quantum channel.\n\nTheory: see arXiv:XXXX.XXXXX\n\n\n## Installation\n\nSee detailed installation instructions here:\nhttps://QPtomographer.readthedocs.io/en/latest/install\n\nBasically:\n\n- you need to download & compile [SCS \u2265 2.0](https://github.com/cvxgrp/scs);\n\n- you need to have the `tomographer` package\n  installed [as described here][tomographer_py_inst];\n  \n- you can install `QPtomographer` via `pip`.\n\n[tomographer_py_inst]: https://tomographer.github.io/tomographer/get-started/#python-version\n\n\nHere are quick-and-easy steps for some common setups:\n\n### Ubuntu/Linux\n\nDownload & compile [SCS \u2265 2.0](https://github.com/cvxgrp/scs):\n\n    > sudo apt-get install liblapack-dev\n    > cd $HOME/Downloads\n    > curl -L https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz -o scs-2.0.2.tar.gz\n    > tar xvfz scs-2.0.2.tar.gz && cd scs-2.0.2\n    > make CTRLC=0 USE_OPENMP=0 USE_LAPACK=1\n\nDownload & compile `tomographer \u2265 5.4` and other prerequisites:\n\n    # If you are using *pip* (or if you're not sure):\n    > pip install numpy scipy pybind11 qutip\n    > pip install tomographer\n\n    # If you are using *anacoda/conda*:\n    > conda install numpy scipy gcc libgcc\n    > conda install -c conda-forge pybind11 qutip\n    > pip install tomographer\n\nInstall `QPtomographer` via `pip`:\n\n    > SCS_ROOT=$HOME/Downloads/scs-2.0.2 pip install QPtomographer\n\n### Apple Mac OS X\n\nDownload & compile [SCS \u2265 2.0](https://github.com/cvxgrp/scs):\n\n    > cd $HOME/Downloads\n    > curl -L https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz -o scs-2.0.2.tar.gz\n    > tar xvfz scs-2.0.2.tar.gz && cd scs-2.0.2\n    > make CTRLC=0 USE_OPENMP=0 USE_LAPACK=1 BLASLDFLAGS=\"-framework Accelerate\"\n\nDownload & compile `tomographer` and other prerequisites:\n\n    # If you are using *pip* (or if you're not sure):\n    > pip install numpy pybind11 qutip\n    > pip install tomographer\n\n    # If you are using *anacoda/conda*:\n    > conda install numpy gcc libgcc\n    > conda install -c conda-forge pybind11 qutip\n    > pip install tomographer\n\nInstall `QPtomographer` via `pip`:\n\n    > SCS_ROOT=$HOME/Downloads/scs-2.0.2 pip install QPtomographer\n\n### Alternatively, you can build and install `QPtomographer` from source\n\nAfter installing all the prerequisites, you should only have to run\n\n    > SCS_ROOT=$HOME/Downloads/scs python setup.py install\n\nspecifying the path where you compiled SCS using the environment variable\n`SCS_ROOT`.  Or, to install as administrator,\n\n    > sudo -H SCS_ROOT=$HOME/Downloads/scs python setup.py install\n\nThe good news is that `QPtomographer`'s setup script automatically picks up all\nthe C++ flags set for `tomographer` itself, and uses those same flags. Thus, if\n`tomographer` compiled, `QPtomographer` should compile as well (just make sure\nyou use the same compiler).\n\n\n## Getting started with examples\n\nThe `examples/` folder contains examples using `QPtomographer`.\n\nThe examples are provided as [jupyter notebooks][jpynb] (`*.ipynb` files).\nJupyter is a convenient environment, inspired by Mathematica and powered by\nPython, for running code interactively.\n\nTo run an example, first [install jupyter locally][jpyinst].  Then, in a\nterminal, enter the current `examples/` directory in `QPtomographer` and launch\njupyter:\n\n    > cd QPtomographer/examples\n    > jupyter notebook\n    \nThis should open your browser with a jupyter session. Click on the directory\ncorresponding to the example you wish to run, and then open the corresponding\nnotebook file (`run.ipynb` file).\n\n[jpynb]: https://jupyter.org/\n[jpyinst]: http://jupyter.readthedocs.io/en/latest/install.html\n\n\n## Full documentation and API reference\n\nFull documentation of what `QPtomographer` does, how to call the code, and\neverything you always wanted to know about `QPtomographer` but didn't dare to\nask, can be found at:\n\nhttps://QPtomographer.readthedocs.io/en/latest/install\n\n\n## License\n\n`QPtomographer` is released under the MIT License (see `LICENSE.txt`).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "QPtomographer", "package_url": "https://pypi.org/project/QPtomographer/", "platform": "", "project_url": "https://pypi.org/project/QPtomographer/", "project_urls": null, "release_url": "https://pypi.org/project/QPtomographer/1.0/", "requires_dist": null, "requires_python": "", "summary": "Reliable Diamond Norm Estimation for Quantum Process Tomography", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Reliable Quantum Process Tomography</p>\n<p>![QPtomographer](QPtomographer.svg)</p>\n<p>Derive quantum error bars for quantum processes in terms of the diamond norm to\na reference quantum channel.</p>\n<p>Theory: see arXiv:XXXX.XXXXX</p>\n<p>## Installation</p>\n<p>See detailed installation instructions here:\n<a href=\"https://QPtomographer.readthedocs.io/en/latest/install\" rel=\"nofollow\">https://QPtomographer.readthedocs.io/en/latest/install</a></p>\n<p>Basically:</p>\n<ul>\n<li>you need to download &amp; compile [SCS \u2265 2.0](<a href=\"https://github.com/cvxgrp/scs\" rel=\"nofollow\">https://github.com/cvxgrp/scs</a>);</li>\n<li>you need to have the <cite>tomographer</cite> package\ninstalled [as described here][tomographer_py_inst];</li>\n<li>you can install <cite>QPtomographer</cite> via <cite>pip</cite>.</li>\n</ul>\n<p>[tomographer_py_inst]: <a href=\"https://tomographer.github.io/tomographer/get-started/#python-version\" rel=\"nofollow\">https://tomographer.github.io/tomographer/get-started/#python-version</a></p>\n<p>Here are quick-and-easy steps for some common setups:</p>\n<p>### Ubuntu/Linux</p>\n<p>Download &amp; compile [SCS \u2265 2.0](<a href=\"https://github.com/cvxgrp/scs\" rel=\"nofollow\">https://github.com/cvxgrp/scs</a>):</p>\n<blockquote>\n&gt; sudo apt-get install liblapack-dev\n&gt; cd $HOME/Downloads\n&gt; curl -L <a href=\"https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz\" rel=\"nofollow\">https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz</a> -o scs-2.0.2.tar.gz\n&gt; tar xvfz scs-2.0.2.tar.gz &amp;&amp; cd scs-2.0.2\n&gt; make CTRLC=0 USE_OPENMP=0 USE_LAPACK=1</blockquote>\n<p>Download &amp; compile <cite>tomographer \u2265 5.4</cite> and other prerequisites:</p>\n<blockquote>\n<p># If you are using <em>pip</em> (or if you\u2019re not sure):\n&gt; pip install numpy scipy pybind11 qutip\n&gt; pip install tomographer</p>\n<p># If you are using <em>anacoda/conda</em>:\n&gt; conda install numpy scipy gcc libgcc\n&gt; conda install -c conda-forge pybind11 qutip\n&gt; pip install tomographer</p>\n</blockquote>\n<p>Install <cite>QPtomographer</cite> via <cite>pip</cite>:</p>\n<blockquote>\n&gt; SCS_ROOT=$HOME/Downloads/scs-2.0.2 pip install QPtomographer</blockquote>\n<p>### Apple Mac OS X</p>\n<p>Download &amp; compile [SCS \u2265 2.0](<a href=\"https://github.com/cvxgrp/scs\" rel=\"nofollow\">https://github.com/cvxgrp/scs</a>):</p>\n<blockquote>\n&gt; cd $HOME/Downloads\n&gt; curl -L <a href=\"https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz\" rel=\"nofollow\">https://github.com/cvxgrp/scs/archive/v2.0.2.tar.gz</a> -o scs-2.0.2.tar.gz\n&gt; tar xvfz scs-2.0.2.tar.gz &amp;&amp; cd scs-2.0.2\n&gt; make CTRLC=0 USE_OPENMP=0 USE_LAPACK=1 BLASLDFLAGS=\u201d-framework Accelerate\u201d</blockquote>\n<p>Download &amp; compile <cite>tomographer</cite> and other prerequisites:</p>\n<blockquote>\n<p># If you are using <em>pip</em> (or if you\u2019re not sure):\n&gt; pip install numpy pybind11 qutip\n&gt; pip install tomographer</p>\n<p># If you are using <em>anacoda/conda</em>:\n&gt; conda install numpy gcc libgcc\n&gt; conda install -c conda-forge pybind11 qutip\n&gt; pip install tomographer</p>\n</blockquote>\n<p>Install <cite>QPtomographer</cite> via <cite>pip</cite>:</p>\n<blockquote>\n&gt; SCS_ROOT=$HOME/Downloads/scs-2.0.2 pip install QPtomographer</blockquote>\n<p>### Alternatively, you can build and install <cite>QPtomographer</cite> from source</p>\n<p>After installing all the prerequisites, you should only have to run</p>\n<blockquote>\n&gt; SCS_ROOT=$HOME/Downloads/scs python setup.py install</blockquote>\n<p>specifying the path where you compiled SCS using the environment variable\n<cite>SCS_ROOT</cite>.  Or, to install as administrator,</p>\n<blockquote>\n&gt; sudo -H SCS_ROOT=$HOME/Downloads/scs python setup.py install</blockquote>\n<p>The good news is that <cite>QPtomographer</cite>\u2019s setup script automatically picks up all\nthe C++ flags set for <cite>tomographer</cite> itself, and uses those same flags. Thus, if\n<cite>tomographer</cite> compiled, <cite>QPtomographer</cite> should compile as well (just make sure\nyou use the same compiler).</p>\n<p>## Getting started with examples</p>\n<p>The <cite>examples/</cite> folder contains examples using <cite>QPtomographer</cite>.</p>\n<p>The examples are provided as [jupyter notebooks][jpynb] (<cite>*.ipynb</cite> files).\nJupyter is a convenient environment, inspired by Mathematica and powered by\nPython, for running code interactively.</p>\n<p>To run an example, first [install jupyter locally][jpyinst].  Then, in a\nterminal, enter the current <cite>examples/</cite> directory in <cite>QPtomographer</cite> and launch\njupyter:</p>\n<blockquote>\n&gt; cd QPtomographer/examples\n&gt; jupyter notebook</blockquote>\n<p>This should open your browser with a jupyter session. Click on the directory\ncorresponding to the example you wish to run, and then open the corresponding\nnotebook file (<cite>run.ipynb</cite> file).</p>\n<p>[jpynb]: <a href=\"https://jupyter.org/\" rel=\"nofollow\">https://jupyter.org/</a>\n[jpyinst]: <a href=\"http://jupyter.readthedocs.io/en/latest/install.html\" rel=\"nofollow\">http://jupyter.readthedocs.io/en/latest/install.html</a></p>\n<p>## Full documentation and API reference</p>\n<p>Full documentation of what <cite>QPtomographer</cite> does, how to call the code, and\neverything you always wanted to know about <cite>QPtomographer</cite> but didn\u2019t dare to\nask, can be found at:</p>\n<p><a href=\"https://QPtomographer.readthedocs.io/en/latest/install\" rel=\"nofollow\">https://QPtomographer.readthedocs.io/en/latest/install</a></p>\n<p>## License</p>\n<p><cite>QPtomographer</cite> is released under the MIT License (see <cite>LICENSE.txt</cite>).</p>\n\n          </div>"}, "last_serial": 4126538, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "a6ed688967aaba1153a5e1d1d7e50c86", "sha256": "360c6494d4b460d4c752fb582630a9714581d6f366b3120f1b2a44006e6140cb"}, "downloads": -1, "filename": "QPtomographer-1.0.tar.gz", "has_sig": false, "md5_digest": "a6ed688967aaba1153a5e1d1d7e50c86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 418148, "upload_time": "2018-08-01T22:33:20", "upload_time_iso_8601": "2018-08-01T22:33:20.636476Z", "url": "https://files.pythonhosted.org/packages/fa/a6/146eab79dc34e4fbe598593ced290087ee5b954731c1d6d1ebf02e5c4ded/QPtomographer-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a6ed688967aaba1153a5e1d1d7e50c86", "sha256": "360c6494d4b460d4c752fb582630a9714581d6f366b3120f1b2a44006e6140cb"}, "downloads": -1, "filename": "QPtomographer-1.0.tar.gz", "has_sig": false, "md5_digest": "a6ed688967aaba1153a5e1d1d7e50c86", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 418148, "upload_time": "2018-08-01T22:33:20", "upload_time_iso_8601": "2018-08-01T22:33:20.636476Z", "url": "https://files.pythonhosted.org/packages/fa/a6/146eab79dc34e4fbe598593ced290087ee5b954731c1d6d1ebf02e5c4ded/QPtomographer-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:19 2020"}