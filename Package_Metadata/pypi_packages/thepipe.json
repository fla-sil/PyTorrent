{"info": {"author": "Tamas Gal", "author_email": "tgal@km3net.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Programming Language :: Python"], "description": "thepipe\n=======\n\n.. image:: https://readthedocs.org/projects/thepipe/badge/?version=latest\n    :target: https://thepipe.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\n.. image:: https://api.codacy.com/project/badge/Grade/20a35727ae364e08845b60bdeb4b233a\n    :alt: Codacy Badge\n    :target: https://www.codacy.com/app/tamasgal/thepipe?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=tamasgal/thepipe&amp;utm_campaign=Badge_Grade\n\n.. image:: https://travis-ci.org/tamasgal/thepipe.svg?branch=master\n    :alt: Travis-CI Build Status\n    :target: https://travis-ci.org/tamasgal/thepipe\n\n.. image:: http://codecov.io/github/tamasgal/thepipe/coverage.svg?branch=master\n    :alt: Test-coverage\n    :target: http://codecov.io/github/tamasgal/thepipe?branch=master\n\n.. image:: https://img.shields.io/pypi/v/thepipe.svg?style=flat\n    :alt: PyPI Package latest release\n    :target: https://pypi.python.org/pypi/thepipe\n\nA simplistic, general purpose pipeline framework, which can easily be\nintegrated into existing (analysis) chains and workflows.\n\nInstallation\n------------\n``thepipe`` can be installed via ``pip``::\n\n    pip install thepipe\n\nFeatures\n--------\n\n- Easy to use interface and integration into existing workflows\n- Modules can be either subclasses of ``Module`` or bare python functions\n- Data is passed via a simple Python dictionary from module to module (wrapped\n  in a class called ``Blob`` which adds some visual candy and error reporting)\n- Integrated hierarchical logging system\n- Colour coded log and print messages (``self.log()`` and ``self.cprint()`` in\n  ``Modules``)\n- Performance statistics for the whole pipeline and each module individually\n- Clean exit when interrupting the pipeline with CTRL+C\n\nThe Pipeline\n------------\n\nHere is a basic example how to create a pipeline, add some modules to it, pass\nsome parameters and drain the pipeline.\n\nNote that pipeline modules can either be vanilla (univariate) Python functions\nor Classes which derive from ``thepipe.Module``.\n\n.. code-block:: python\n\n    import thepipe as tp\n\n\n    class AModule(tp.Module):\n        def configure(self):\n            self.cprint(\"Configuring AModule\")\n            self.max_count = self.get(\"max_count\", default=23)\n            self.index = 0\n\n        def process(self, blob):\n            self.cprint(\"This is cycle #%d\" % self.index)\n            blob['index'] = self.index\n            self.index += 1\n\n            if self.index > self.max_count:\n                self.log.critical(\"That's enough...\")\n                raise StopIteration\n            return blob\n\n        def finish(self):\n            self.cprint(\"I'm done!\")\n\n\n    def a_function_based_module(blob):\n        print(\"Here is the blob:\")\n        print(blob)\n        return blob\n\n\n    pipe = tp.Pipeline()\n    pipe.attach(AModule, max_count=5)  # pass any parameters to the module\n    pipe.attach(a_function_based_module)\n    pipe.drain()  # without arguments it will drain until a StopIteration is raised\n\nThis will produce the following output:\n\n.. code-block:: shell\n\n    ++ AModule: Configuring AModule\n    Pipeline and module initialisation took 0.000s (CPU 0.000s).\n    ++ AModule: This is cycle #0\n    Here is the blob:\n    Blob (1 entries):\n     'index' => 0\n    ++ AModule: This is cycle #1\n    Here is the blob:\n    Blob (1 entries):\n     'index' => 1\n    ++ AModule: This is cycle #2\n    Here is the blob:\n    Blob (1 entries):\n     'index' => 2\n    ++ AModule: This is cycle #3\n    Here is the blob:\n    Blob (1 entries):\n     'index' => 3\n    ++ AModule: This is cycle #4\n    Here is the blob:\n    Blob (1 entries):\n     'index' => 4\n    ++ AModule: This is cycle #5\n    CRITICAL ++ AModule: That's enough...\n    ++ AModule: I'm done!\n    ============================================================\n    5 cycles drained in 0.000793s (CPU 0.000793s). Memory peak: 20.56 MB\n      wall  mean: 0.000063s  medi: 0.000057s  min: 0.000045s  max: 0.000106s  std: 0.000022s\n      CPU   mean: 0.000065s  medi: 0.000057s  min: 0.000046s  max: 0.000112s  std: 0.000024s", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/tamasgal/thepipe", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "thepipe", "package_url": "https://pypi.org/project/thepipe/", "platform": "any", "project_url": "https://pypi.org/project/thepipe/", "project_urls": {"Homepage": "http://github.com/tamasgal/thepipe"}, "release_url": "https://pypi.org/project/thepipe/1.1.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A lightweight, general purpose pipeline framework.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://thepipe.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2a68c95c997419bebee544f831dd7e34cc1def44/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f746865706970652f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://www.codacy.com/app/tamasgal/thepipe?utm_source=github.com&amp;amp;utm_medium=referral&amp;amp;utm_content=tamasgal/thepipe&amp;amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd763bc9bbf1d1473fb55c132aed602f5b2bdd76/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3230613335373237616533363465303838343562363062646562346232333361\"></a>\n<a href=\"https://travis-ci.org/tamasgal/thepipe\" rel=\"nofollow\"><img alt=\"Travis-CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e743c0c109d9ee2854e99263dc4d625e8e5a1b8/68747470733a2f2f7472617669732d63692e6f72672f74616d617367616c2f746865706970652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://codecov.io/github/tamasgal/thepipe?branch=master\" rel=\"nofollow\"><img alt=\"Test-coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31b9da9f62a5810a50b1d6a23b8fe919e8c03012/687474703a2f2f636f6465636f762e696f2f6769746875622f74616d617367616c2f746865706970652f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/thepipe\" rel=\"nofollow\"><img alt=\"PyPI Package latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b50c74db6996220e2fc8a2300c8076522bcf7aff/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f746865706970652e7376673f7374796c653d666c6174\"></a>\n<p>A simplistic, general purpose pipeline framework, which can easily be\nintegrated into existing (analysis) chains and workflows.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><tt>thepipe</tt> can be installed via <tt>pip</tt>:</p>\n<pre>pip install thepipe\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Easy to use interface and integration into existing workflows</li>\n<li>Modules can be either subclasses of <tt>Module</tt> or bare python functions</li>\n<li>Data is passed via a simple Python dictionary from module to module (wrapped\nin a class called <tt>Blob</tt> which adds some visual candy and error reporting)</li>\n<li>Integrated hierarchical logging system</li>\n<li>Colour coded log and print messages (<tt>self.log()</tt> and <tt>self.cprint()</tt> in\n<tt>Modules</tt>)</li>\n<li>Performance statistics for the whole pipeline and each module individually</li>\n<li>Clean exit when interrupting the pipeline with CTRL+C</li>\n</ul>\n</div>\n<div id=\"the-pipeline\">\n<h2>The Pipeline</h2>\n<p>Here is a basic example how to create a pipeline, add some modules to it, pass\nsome parameters and drain the pipeline.</p>\n<p>Note that pipeline modules can either be vanilla (univariate) Python functions\nor Classes which derive from <tt>thepipe.Module</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">thepipe</span> <span class=\"k\">as</span> <span class=\"nn\">tp</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AModule</span><span class=\"p\">(</span><span class=\"n\">tp</span><span class=\"o\">.</span><span class=\"n\">Module</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">configure</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s2\">\"Configuring AModule\"</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_count</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"max_count\"</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">23</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">blob</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s2\">\"This is cycle #</span><span class=\"si\">%d</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">)</span>\n        <span class=\"n\">blob</span><span class=\"p\">[</span><span class=\"s1\">'index'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">index</span> <span class=\"o\">&gt;</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">max_count</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">log</span><span class=\"o\">.</span><span class=\"n\">critical</span><span class=\"p\">(</span><span class=\"s2\">\"That's enough...\"</span><span class=\"p\">)</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">StopIteration</span>\n        <span class=\"k\">return</span> <span class=\"n\">blob</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">finish</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cprint</span><span class=\"p\">(</span><span class=\"s2\">\"I'm done!\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">a_function_based_module</span><span class=\"p\">(</span><span class=\"n\">blob</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Here is the blob:\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">blob</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">blob</span>\n\n\n<span class=\"n\">pipe</span> <span class=\"o\">=</span> <span class=\"n\">tp</span><span class=\"o\">.</span><span class=\"n\">Pipeline</span><span class=\"p\">()</span>\n<span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">AModule</span><span class=\"p\">,</span> <span class=\"n\">max_count</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># pass any parameters to the module</span>\n<span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">attach</span><span class=\"p\">(</span><span class=\"n\">a_function_based_module</span><span class=\"p\">)</span>\n<span class=\"n\">pipe</span><span class=\"o\">.</span><span class=\"n\">drain</span><span class=\"p\">()</span>  <span class=\"c1\"># without arguments it will drain until a StopIteration is raised</span>\n</pre>\n<p>This will produce the following output:</p>\n<pre>++ AModule: Configuring AModule\nPipeline and module initialisation took <span class=\"m\">0</span>.000s <span class=\"o\">(</span>CPU <span class=\"m\">0</span>.000s<span class=\"o\">)</span>.\n++ AModule: This is cycle <span class=\"c1\">#0\n</span>Here is the blob:\nBlob <span class=\"o\">(</span><span class=\"m\">1</span> entries<span class=\"o\">)</span>:\n <span class=\"s1\">'index'</span> <span class=\"o\">=</span>&gt; <span class=\"m\">0</span>\n++ AModule: This is cycle <span class=\"c1\">#1\n</span>Here is the blob:\nBlob <span class=\"o\">(</span><span class=\"m\">1</span> entries<span class=\"o\">)</span>:\n <span class=\"s1\">'index'</span> <span class=\"o\">=</span>&gt; <span class=\"m\">1</span>\n++ AModule: This is cycle <span class=\"c1\">#2\n</span>Here is the blob:\nBlob <span class=\"o\">(</span><span class=\"m\">1</span> entries<span class=\"o\">)</span>:\n <span class=\"s1\">'index'</span> <span class=\"o\">=</span>&gt; <span class=\"m\">2</span>\n++ AModule: This is cycle <span class=\"c1\">#3\n</span>Here is the blob:\nBlob <span class=\"o\">(</span><span class=\"m\">1</span> entries<span class=\"o\">)</span>:\n <span class=\"s1\">'index'</span> <span class=\"o\">=</span>&gt; <span class=\"m\">3</span>\n++ AModule: This is cycle <span class=\"c1\">#4\n</span>Here is the blob:\nBlob <span class=\"o\">(</span><span class=\"m\">1</span> entries<span class=\"o\">)</span>:\n <span class=\"s1\">'index'</span> <span class=\"o\">=</span>&gt; <span class=\"m\">4</span>\n++ AModule: This is cycle <span class=\"c1\">#5\n</span>CRITICAL ++ AModule: That<span class=\"s1\">'s enough...\n++ AModule: I'</span>m <span class=\"k\">done</span>!\n<span class=\"o\">============================================================</span>\n<span class=\"m\">5</span> cycles drained in <span class=\"m\">0</span>.000793s <span class=\"o\">(</span>CPU <span class=\"m\">0</span>.000793s<span class=\"o\">)</span>. Memory peak: <span class=\"m\">20</span>.56 MB\n  wall  mean: <span class=\"m\">0</span>.000063s  medi: <span class=\"m\">0</span>.000057s  min: <span class=\"m\">0</span>.000045s  max: <span class=\"m\">0</span>.000106s  std: <span class=\"m\">0</span>.000022s\n  CPU   mean: <span class=\"m\">0</span>.000065s  medi: <span class=\"m\">0</span>.000057s  min: <span class=\"m\">0</span>.000046s  max: <span class=\"m\">0</span>.000112s  std: <span class=\"m\">0</span>.000024s\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6247923, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ea17bed5d509be0cc3e07a7bea5b923a", "sha256": "e72913406fb3c3937718d380b5bed7447f7bea9e935342da412b0c7b6e5d2603"}, "downloads": -1, "filename": "thepipe-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ea17bed5d509be0cc3e07a7bea5b923a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 15484, "upload_time": "2019-03-26T11:25:04", "upload_time_iso_8601": "2019-03-26T11:25:04.553109Z", "url": "https://files.pythonhosted.org/packages/71/21/0f97a92ed55a694697f8a3cc5b7667e2ad3b0bb90b1f3fdd16613603e2bf/thepipe-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "ca21d9332f383cc8248262f2f6c05204", "sha256": "0bee68b792ebe2a66cf8a736f220273804e055fdcda16d69837f6acc041d19d7"}, "downloads": -1, "filename": "thepipe-1.0.1.tar.gz", "has_sig": false, "md5_digest": "ca21d9332f383cc8248262f2f6c05204", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 49415, "upload_time": "2019-10-15T16:00:18", "upload_time_iso_8601": "2019-10-15T16:00:18.066583Z", "url": "https://files.pythonhosted.org/packages/b1/a1/b37f231660dba9eff5f478920329af89214f199b9a0479a293d2d1a269e7/thepipe-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f27fc097f6f38511d8c91e5774ed5990", "sha256": "93c723a8ff7fcdde3691254b3c2e352d2bdb27a22cce4281da4abad07476abd1"}, "downloads": -1, "filename": "thepipe-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f27fc097f6f38511d8c91e5774ed5990", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 50393, "upload_time": "2019-12-05T15:22:24", "upload_time_iso_8601": "2019-12-05T15:22:24.857246Z", "url": "https://files.pythonhosted.org/packages/d2/7b/6f605f551781554880c76c48ab3bf114320ab6acc04f24a13830f6f79758/thepipe-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f27fc097f6f38511d8c91e5774ed5990", "sha256": "93c723a8ff7fcdde3691254b3c2e352d2bdb27a22cce4281da4abad07476abd1"}, "downloads": -1, "filename": "thepipe-1.1.0.tar.gz", "has_sig": false, "md5_digest": "f27fc097f6f38511d8c91e5774ed5990", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 50393, "upload_time": "2019-12-05T15:22:24", "upload_time_iso_8601": "2019-12-05T15:22:24.857246Z", "url": "https://files.pythonhosted.org/packages/d2/7b/6f605f551781554880c76c48ab3bf114320ab6acc04f24a13830f6f79758/thepipe-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:02 2020"}