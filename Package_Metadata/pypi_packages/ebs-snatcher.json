{"info": {"author": "Daniel Miranda", "author_email": "daniel@cobli.co", "bugtrack_url": null, "classifiers": [], "description": "ebs-snatcher\n============\n\nAutomatically provision and attach AWS EBS volumes to instances\n\n\nInstallation\n------------\n\nRun ``pip install ebs-snatcher``, or ``python ./setup.py``\n\n\nPurpose\n-------\n\nThis tool allows AWS instances to self-sufficiently provision or takeover EBS\nvolumes for data storage. It was created to support stateful database instances\nthat should be able to join a replication group autonomously, while making use\nof snapshots to start from a recent state, instead of scratch.\n\n\nProcess\n-------\n\n``ebs-snatcher`` will attempt to provision an EBS volume with the minimal\npossible effort for a target instance, considering that both must reside in\nthe same availability zone. Suitable volumes and snapshots are identified by\ntag key-value pairs, such that different types of volumes can be managed by\ncalling the program multiple times.\n\nIn order of preference, the choices are:\n\n1. Keep using any volumes already attached to the instance\n2. Find an existing but available volume in the same AZ as the instance, and\n   attach it to the instance\n3. Create a new volume from a suitable snapshot, and attach it\n4. Create a new volume from scratch, and attach it\n\n\nIdentifying volumes and snapshots\n---------------------------------\n\nVolumes and snapshots will only be considered for usage if they match the set\nof tags specified by the ``--volume-id-tag``  and ``--snapshot-search-tag``\narguments, respectively. They take the form of ``key=value`` pairs, and can\nbe specified multiple times, in which case the conditions are combined in AND\nfashion.\n\nExtra tags that are not used for selection can be specified with\n``--volume-extra-tags`` (also in ``key=value`` format).\n\n\nAttachment device selection\n---------------------------\n\nAfter a volume is provisioned, it needs to be attached to the instance and\nassigned a device name in the operating system. The desired name can be\nspecified with the ``--attach-device`` argument, or it can be set to ``auto``\nto start from the AWS default of ``/dev/sdf`` (earlier devices are \"reserved\"\nfor instance-store volumes).\n\nIf an attachment attempt fails due to the name already being in use, and it\nmatches known Linux disk names (``/dev/(sd|xvd)[a-z]+``), the next name in\norder will be picked and retried, in alphabetical order. The sequence starts as:\n\n``sda, sdb, ..., sdz, sdaa, ..., sdaz, sdba, ...``\n\n\nVolume creation\n---------------\n\nVolume creation settings are exposed as command line arguments, corresponding to\nthe AWS API parameters, with a few observations:\n\n1. The `Encrypt` and `KMSKeyId` options are combined into the\n   ``--encrypt-kms-key-id`` argument. Providing it will enable encryption, and\n   omitting it will disable it\n2. Volume size will be silently ignored when creating from a snapshot, as the\n   volume will always have the same size as the snapshot\n\n\nOutput\n------\n\nWhen no errors are found, the command will exit with status 0, and print a JSON\ndocument in stdout, containing at least the following keys:\n\n:volume_id:\n    ID of the EBS volume that has been attached to the instance\n:attached_device:\n    Path of the device assigned to the volume. Note that this might not match\n    exactly the device name visible inside the instance. For example, modern\n    Linux kernel versions use ``/dev/xvd*`` even if ``/dev/sd*`` is specified\n:result:\n    One of ``present``, ``attached`` or ``created``, indicating the change in\n    volume state (or lack thereof)\n:src_snapshot_id:\n    Contains the snapshot ID used to provision the volume it ``result`` is\n    ``created``. Is ``null`` otherwise, or if the volume was created from\n    scratch\n\nIn both cases log messages are printed to stderr.\n\n\nIAM Permissions\n---------------\n\nPermissions to list volumes, snapshots and instances, to create volumes and\nto attach volumes to instances are necessary for ``ebs-snatcher`` to work.\nThey should be granted to instances using IAM roles. The simplest policy allows\ncomplete access to all of those actions. It is much easier to handle, but very\nbroad:\n\n.. code:: json\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \"EBSSnatcherAll\",\n                \"Action\": [\n                    \"ec2:DescribeInstances\",\n                    \"ec2:DescribeSnapshots\",\n                    \"ec2:DescribeVolumes\",\n                    \"ec2:CreateVolume\",\n                    \"ec2:AttachVolume\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\"\n            }\n      ]\n    }\n\n\nIt is possible to ensure all managed volumes and instances have some chosen\ntags, as long as those same tags are passed to ``ebs-snatcher``.\nAn example policy to achieve it follows. Before using it, replace:\n\n- ``db-volume-type`` and ``cassandra`` with the desired tags for volumes\n- ``db-instance-type`` and ``cassandra`` with the desired tags for instances\n  (which must have been already assigned)\n- ``<REGION>`` and ``<ACCOUNT-ID>`` with your own AWS account information\n\n.. code:: json\n\n    {\n        \"Version\": \"2012-10-17\",\n        \"Statement\": [\n            {\n                \"Sid\": \"EBSSnatcherDescribe\",\n                \"Action\": [\n                    \"ec2:DescribeInstances\",\n                    \"ec2:DescribeSnapshots\",\n                    \"ec2:DescribeVolumes\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\"\n            },\n            {\n                \"Sid\": \"EBSSnatcherCreateVolume\",\n                \"Action\": [\n                    \"ec2:CreateVolume\"\n                ],\n                \"Condition\": {\n                    \"StringEquals\": {\n                        \"aws:RequestTag/db-volume-type\": \"cassandra\"\n                    }\n                },\n                \"Effect\": \"Allow\",\n                \"Resource\": \"*\"\n            },\n            {\n                \"Sid\": \"EBSSnatcherCreateVolumeTags\",\n                \"Action\": [\n                    \"ec2:CreateTags\"\n                ],\n                \"Condition\": {\n                    \"StringEquals\": {\n                        \"ec2:CreateAction\": \"CreateVolume\"\n                    }\n                },\n                \"Effect\": \"Allow\",\n                \"Resource\": \"arn:aws:ec2:<REGION>:<ACCOUNT-ID>:volume/*\"\n            },\n            {\n                \"Sid\": \"EBSSnatcherAttachVolumeVolume\",\n                \"Action\": [\n                    \"ec2:AttachVolume\"\n                ],\n                \"Condition\": {\n                    \"StringEquals\": {\n                        \"ec2:ResourceTag/db-volume-type\": \"cassandra\"\n                    }\n                },\n                \"Effect\": \"Allow\",\n                \"Resource\": \"arn:aws:ec2:<REGION>:<ACCOUNT-ID>:volume/*\"\n            },\n            {\n                \"Sid\": \"EBSSnatcherAttachVolumeInstance\",\n                \"Action\": [\n                    \"ec2:AttachVolume\"\n                ],\n                \"Effect\": \"Allow\",\n                \"Condition\": {\n                    \"StringEquals\": {\n                        \"ec2:ResourceTag/db-instance-type\": \"cassandra\"\n                    }\n                },\n                \"Resource\": \"arn:aws:ec2:<REGION>:<ACCOUNT-ID>:instance/*\"\n            }\n        ]\n    }\n\n\nFuture enhancements\n-------------------\n\n- Generate minimal IAM policies programatically\n- Pull instance information from the local metadata store (remove the need for\n  DescribeInstances permissions)\n- \n\nUsage\n-----\n\n::\n\n    usage: ebs-snatcher [-h] --instance-id ID --volume-id-tag KEY=VALUE\n                        --volume-size GB --snapshot-search-tag KEY=VALUE\n                        --attach-device PATH|auto [--volume-extra-tag KEY=VALUE]\n                        [--encrypt-kms-key-id KEY-ID] [--volume-type TYPE]\n                        [--volume-iops COUNT]\n\n    Automatically provision AWS EBS volumes from snapshots\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --instance-id ID      Instance ID to attach volumes to\n      --volume-id-tag KEY=VALUE\n                            Tag used to identify desired volumes. Will be used to\n                            search currently attached volumes to determine if a\n                            new one is needed and applied to new volumes. Can be\n                            provided multiple times, in which case tags will be\n                            combined as an AND condition.\n      --volume-size GB      Size to assign to newly created volumes, in GBs.\n      --snapshot-search-tag KEY=VALUE\n                            Tag used to identify snapshots to create new volumes\n                            from.Can be provided multiple times, in which case\n                            tags will be combined as an AND condition.\n      --attach-device PATH|auto\n                            Name of device to use when attaching a volume, such as\n                            \"/dev/sdb\". Can also be set to \"auto\", in which case\n                            sequential device names starting from /dev/sdb will be\n                            tried until attaching succeeeds\n      --volume-extra-tag KEY=VALUE\n                            Extra tags to be applied to newly create volumes, but\n                            which are not used for identification .\n      --encrypt-kms-key-id KEY-ID\n                            Enable encryption and use the given KMS key ID for\n                            newly created volumes\n      --volume-type TYPE    Volume type to use for newly created volumes\n      --volume-iops COUNT   Number of provisioned I/O operations to assign to\n                            newly created volumes. Make sure to choose an\n                            appropriate volume type to match.\n\n\nLicense (MIT)\n-------------\n\n::\n\n    Copyright (C) 2017 Cobli\n\n    Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\n    The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\n    THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Cobliteam/ebs-snatcher/archive/0.2.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Cobliteam/ebs-snatcher", "keywords": "aws ebs", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ebs-snatcher", "package_url": "https://pypi.org/project/ebs-snatcher/", "platform": "", "project_url": "https://pypi.org/project/ebs-snatcher/", "project_urls": {"Download": "https://github.com/Cobliteam/ebs-snatcher/archive/0.2.0.tar.gz", "Homepage": "https://github.com/Cobliteam/ebs-snatcher"}, "release_url": "https://pypi.org/project/ebs-snatcher/0.2.0/", "requires_dist": ["boto3", "future"], "requires_python": "", "summary": "Automatically provision AWS EBS volumes from snapshots", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Automatically provision and attach AWS EBS volumes to instances</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Run <tt>pip install <span class=\"pre\">ebs-snatcher</span></tt>, or <tt>python ./setup.py</tt></p>\n</div>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>This tool allows AWS instances to self-sufficiently provision or takeover EBS\nvolumes for data storage. It was created to support stateful database instances\nthat should be able to join a replication group autonomously, while making use\nof snapshots to start from a recent state, instead of scratch.</p>\n</div>\n<div id=\"process\">\n<h2>Process</h2>\n<p><tt><span class=\"pre\">ebs-snatcher</span></tt> will attempt to provision an EBS volume with the minimal\npossible effort for a target instance, considering that both must reside in\nthe same availability zone. Suitable volumes and snapshots are identified by\ntag key-value pairs, such that different types of volumes can be managed by\ncalling the program multiple times.</p>\n<p>In order of preference, the choices are:</p>\n<ol>\n<li>Keep using any volumes already attached to the instance</li>\n<li>Find an existing but available volume in the same AZ as the instance, and\nattach it to the instance</li>\n<li>Create a new volume from a suitable snapshot, and attach it</li>\n<li>Create a new volume from scratch, and attach it</li>\n</ol>\n</div>\n<div id=\"identifying-volumes-and-snapshots\">\n<h2>Identifying volumes and snapshots</h2>\n<p>Volumes and snapshots will only be considered for usage if they match the set\nof tags specified by the <tt><span class=\"pre\">--volume-id-tag</span></tt>  and <tt><span class=\"pre\">--snapshot-search-tag</span></tt>\narguments, respectively. They take the form of <tt>key=value</tt> pairs, and can\nbe specified multiple times, in which case the conditions are combined in AND\nfashion.</p>\n<p>Extra tags that are not used for selection can be specified with\n<tt><span class=\"pre\">--volume-extra-tags</span></tt> (also in <tt>key=value</tt> format).</p>\n</div>\n<div id=\"attachment-device-selection\">\n<h2>Attachment device selection</h2>\n<p>After a volume is provisioned, it needs to be attached to the instance and\nassigned a device name in the operating system. The desired name can be\nspecified with the <tt><span class=\"pre\">--attach-device</span></tt> argument, or it can be set to <tt>auto</tt>\nto start from the AWS default of <tt>/dev/sdf</tt> (earlier devices are \u201creserved\u201d\nfor instance-store volumes).</p>\n<p>If an attachment attempt fails due to the name already being in use, and it\nmatches known Linux disk names (<tt><span class=\"pre\">/dev/(sd|xvd)[a-z]+</span></tt>), the next name in\norder will be picked and retried, in alphabetical order. The sequence starts as:</p>\n<p><tt>sda, sdb, <span class=\"pre\">...,</span> sdz, sdaa, <span class=\"pre\">...,</span> sdaz, sdba, ...</tt></p>\n</div>\n<div id=\"volume-creation\">\n<h2>Volume creation</h2>\n<p>Volume creation settings are exposed as command line arguments, corresponding to\nthe AWS API parameters, with a few observations:</p>\n<ol>\n<li>The <cite>Encrypt</cite> and <cite>KMSKeyId</cite> options are combined into the\n<tt><span class=\"pre\">--encrypt-kms-key-id</span></tt> argument. Providing it will enable encryption, and\nomitting it will disable it</li>\n<li>Volume size will be silently ignored when creating from a snapshot, as the\nvolume will always have the same size as the snapshot</li>\n</ol>\n</div>\n<div id=\"output\">\n<h2>Output</h2>\n<p>When no errors are found, the command will exit with status 0, and print a JSON\ndocument in stdout, containing at least the following keys:</p>\n<table>\n<col>\n<col>\n<tbody>\n<tr><th>volume_id:</th><td>ID of the EBS volume that has been attached to the instance</td>\n</tr>\n<tr><th>attached_device:</th></tr>\n<tr><td>\u00a0</td><td>Path of the device assigned to the volume. Note that this might not match\nexactly the device name visible inside the instance. For example, modern\nLinux kernel versions use <tt>/dev/xvd*</tt> even if <tt>/dev/sd*</tt> is specified</td>\n</tr>\n<tr><th>result:</th><td>One of <tt>present</tt>, <tt>attached</tt> or <tt>created</tt>, indicating the change in\nvolume state (or lack thereof)</td>\n</tr>\n<tr><th>src_snapshot_id:</th></tr>\n<tr><td>\u00a0</td><td>Contains the snapshot ID used to provision the volume it <tt>result</tt> is\n<tt>created</tt>. Is <tt>null</tt> otherwise, or if the volume was created from\nscratch</td>\n</tr>\n</tbody>\n</table>\n<p>In both cases log messages are printed to stderr.</p>\n</div>\n<div id=\"iam-permissions\">\n<h2>IAM Permissions</h2>\n<p>Permissions to list volumes, snapshots and instances, to create volumes and\nto attach volumes to instances are necessary for <tt><span class=\"pre\">ebs-snatcher</span></tt> to work.\nThey should be granted to instances using IAM roles. The simplest policy allows\ncomplete access to all of those actions. It is much easier to handle, but very\nbroad:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"Version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2012-10-17\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"Statement\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherAll\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:DescribeInstances\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:DescribeSnapshots\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:DescribeVolumes\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:CreateVolume\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:AttachVolume\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"*\"</span>\n        <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>It is possible to ensure all managed volumes and instances have some chosen\ntags, as long as those same tags are passed to <tt><span class=\"pre\">ebs-snatcher</span></tt>.\nAn example policy to achieve it follows. Before using it, replace:</p>\n<ul>\n<li><tt><span class=\"pre\">db-volume-type</span></tt> and <tt>cassandra</tt> with the desired tags for volumes</li>\n<li><tt><span class=\"pre\">db-instance-type</span></tt> and <tt>cassandra</tt> with the desired tags for instances\n(which must have been already assigned)</li>\n<li><tt>&lt;REGION&gt;</tt> and <tt><span class=\"pre\">&lt;ACCOUNT-ID&gt;</span></tt> with your own AWS account information</li>\n</ul>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"Version\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2012-10-17\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"Statement\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherDescribe\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:DescribeInstances\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:DescribeSnapshots\"</span><span class=\"p\">,</span>\n                <span class=\"s2\">\"ec2:DescribeVolumes\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"*\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherCreateVolume\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:CreateVolume\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Condition\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"StringEquals\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"nt\">\"aws:RequestTag/db-volume-type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cassandra\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"*\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherCreateVolumeTags\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:CreateTags\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Condition\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"StringEquals\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"nt\">\"ec2:CreateAction\"</span><span class=\"p\">:</span> <span class=\"s2\">\"CreateVolume\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arn:aws:ec2:&lt;REGION&gt;:&lt;ACCOUNT-ID&gt;:volume/*\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherAttachVolumeVolume\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:AttachVolume\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Condition\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"StringEquals\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"nt\">\"ec2:ResourceTag/db-volume-type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cassandra\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arn:aws:ec2:&lt;REGION&gt;:&lt;ACCOUNT-ID&gt;:volume/*\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"Sid\"</span><span class=\"p\">:</span> <span class=\"s2\">\"EBSSnatcherAttachVolumeInstance\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Action\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"s2\">\"ec2:AttachVolume\"</span>\n            <span class=\"p\">],</span>\n            <span class=\"nt\">\"Effect\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Allow\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"Condition\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"nt\">\"StringEquals\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                    <span class=\"nt\">\"ec2:ResourceTag/db-instance-type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"cassandra\"</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">},</span>\n            <span class=\"nt\">\"Resource\"</span><span class=\"p\">:</span> <span class=\"s2\">\"arn:aws:ec2:&lt;REGION&gt;:&lt;ACCOUNT-ID&gt;:instance/*\"</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"future-enhancements\">\n<h2>Future enhancements</h2>\n<ul>\n<li>Generate minimal IAM policies programatically</li>\n<li>Pull instance information from the local metadata store (remove the need for\nDescribeInstances permissions)</li>\n<li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: ebs-snatcher [-h] --instance-id ID --volume-id-tag KEY=VALUE\n                    --volume-size GB --snapshot-search-tag KEY=VALUE\n                    --attach-device PATH|auto [--volume-extra-tag KEY=VALUE]\n                    [--encrypt-kms-key-id KEY-ID] [--volume-type TYPE]\n                    [--volume-iops COUNT]\n\nAutomatically provision AWS EBS volumes from snapshots\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --instance-id ID      Instance ID to attach volumes to\n  --volume-id-tag KEY=VALUE\n                        Tag used to identify desired volumes. Will be used to\n                        search currently attached volumes to determine if a\n                        new one is needed and applied to new volumes. Can be\n                        provided multiple times, in which case tags will be\n                        combined as an AND condition.\n  --volume-size GB      Size to assign to newly created volumes, in GBs.\n  --snapshot-search-tag KEY=VALUE\n                        Tag used to identify snapshots to create new volumes\n                        from.Can be provided multiple times, in which case\n                        tags will be combined as an AND condition.\n  --attach-device PATH|auto\n                        Name of device to use when attaching a volume, such as\n                        \"/dev/sdb\". Can also be set to \"auto\", in which case\n                        sequential device names starting from /dev/sdb will be\n                        tried until attaching succeeeds\n  --volume-extra-tag KEY=VALUE\n                        Extra tags to be applied to newly create volumes, but\n                        which are not used for identification .\n  --encrypt-kms-key-id KEY-ID\n                        Enable encryption and use the given KMS key ID for\n                        newly created volumes\n  --volume-type TYPE    Volume type to use for newly created volumes\n  --volume-iops COUNT   Number of provisioned I/O operations to assign to\n                        newly created volumes. Make sure to choose an\n                        appropriate volume type to match.\n</pre>\n</div>\n<div id=\"license-mit\">\n<h2>License (MIT)</h2>\n<pre>Copyright (C) 2017 Cobli\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3503629, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2071ccd6c252efa2e02bb27efb657a42", "sha256": "477949454b78cdd04c359582d2a27c5796335e38c5149390f173decd5650ffc0"}, "downloads": -1, "filename": "ebs_snatcher-0.1.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "2071ccd6c252efa2e02bb27efb657a42", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8176, "upload_time": "2017-10-23T03:48:11", "upload_time_iso_8601": "2017-10-23T03:48:11.077471Z", "url": "https://files.pythonhosted.org/packages/d1/e3/376f8575e27cf835a08026cedeaa1fc1bc5d0b659a6408e0e28d2504d065/ebs_snatcher-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79fc75e062ac5720fc1c4194ce8fc23d", "sha256": "21b6fd3b4b014e23ca082cf26062e8307e6933d446ccd04af62fa2770925843f"}, "downloads": -1, "filename": "ebs-snatcher-0.1.0.tar.gz", "has_sig": true, "md5_digest": "79fc75e062ac5720fc1c4194ce8fc23d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5664, "upload_time": "2017-10-23T03:48:13", "upload_time_iso_8601": "2017-10-23T03:48:13.166192Z", "url": "https://files.pythonhosted.org/packages/b8/44/f0391a685fbf6674992eead488657333136004a668709f7ddd942ac0728f/ebs-snatcher-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "4341806048877a87485be373b08a8806", "sha256": "de7be0f6825490b314833716f3963391d1917a27ca03b29a055ccacb65374b62"}, "downloads": -1, "filename": "ebs_snatcher-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4341806048877a87485be373b08a8806", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13733, "upload_time": "2017-10-23T20:57:26", "upload_time_iso_8601": "2017-10-23T20:57:26.050234Z", "url": "https://files.pythonhosted.org/packages/87/a7/a45b160ecb2385c0f859cf27fc2777e4b83b3705811b28500618a111a8bd/ebs_snatcher-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a79d47a6b274d6e3d3faaf54138cba7d", "sha256": "aa8d56dd7e8fa1832213ea7f7f78744452d43b401a01e9347321a1d867784b36"}, "downloads": -1, "filename": "ebs-snatcher-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a79d47a6b274d6e3d3faaf54138cba7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9595, "upload_time": "2017-10-23T20:57:27", "upload_time_iso_8601": "2017-10-23T20:57:27.285309Z", "url": "https://files.pythonhosted.org/packages/fb/c0/3df9ad315d168fa250ecab0bfc3b61ea9100156e6fb83900ce1f8743db98/ebs-snatcher-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "410caa8045c137e6ab3348feaec2171a", "sha256": "d8a2b35a2429c5eadeba0d3b91ef04ae9a81d7fbfeec0cbd602c5221567cc85c"}, "downloads": -1, "filename": "ebs_snatcher-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "410caa8045c137e6ab3348feaec2171a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14101, "upload_time": "2017-10-23T23:16:56", "upload_time_iso_8601": "2017-10-23T23:16:56.263845Z", "url": "https://files.pythonhosted.org/packages/97/77/fa326879d454dd8035caa22ce6e4c98fbcffd1867809ddd0d6caa646e746/ebs_snatcher-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "59c64009485058f5801c484d3fe8e5a2", "sha256": "641b781f33daeb7b5d56a3bdffc4df84971d915fea4d4c418ec6cb6f48629d39"}, "downloads": -1, "filename": "ebs-snatcher-0.1.2.tar.gz", "has_sig": false, "md5_digest": "59c64009485058f5801c484d3fe8e5a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9930, "upload_time": "2017-10-23T23:16:58", "upload_time_iso_8601": "2017-10-23T23:16:58.921219Z", "url": "https://files.pythonhosted.org/packages/4f/bd/72cc65d1040f9c7af3421377a667913b20123c52f4fe8570ef0a787ffd44/ebs-snatcher-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "3300e8298fbeadd2d7ef1d73c8a16fb5", "sha256": "04a6ba912f1ed2ef3999a2bfdda9e97889e080b12c5d1c7e536f34f5fb1f96aa"}, "downloads": -1, "filename": "ebs_snatcher-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3300e8298fbeadd2d7ef1d73c8a16fb5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15107, "upload_time": "2018-01-19T06:38:18", "upload_time_iso_8601": "2018-01-19T06:38:18.605655Z", "url": "https://files.pythonhosted.org/packages/5a/cd/fd5047eeddfb43e44adcc4e56e38893e094836a90698d2ee9ecd86f4fa03/ebs_snatcher-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d235f953336f959cd0e486c7d2969c62", "sha256": "012a4e9933a075adc51546b3555f2bab0dbdfc51663f583d65103c86b5f9c93e"}, "downloads": -1, "filename": "ebs-snatcher-0.2.0.tar.gz", "has_sig": true, "md5_digest": "d235f953336f959cd0e486c7d2969c62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12602, "upload_time": "2018-01-19T06:38:20", "upload_time_iso_8601": "2018-01-19T06:38:20.025169Z", "url": "https://files.pythonhosted.org/packages/7c/ca/66d27d2f68e1c988dd505230df68893395fd6b7efb8c51d13dbe1ff88ac1/ebs-snatcher-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3300e8298fbeadd2d7ef1d73c8a16fb5", "sha256": "04a6ba912f1ed2ef3999a2bfdda9e97889e080b12c5d1c7e536f34f5fb1f96aa"}, "downloads": -1, "filename": "ebs_snatcher-0.2.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "3300e8298fbeadd2d7ef1d73c8a16fb5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 15107, "upload_time": "2018-01-19T06:38:18", "upload_time_iso_8601": "2018-01-19T06:38:18.605655Z", "url": "https://files.pythonhosted.org/packages/5a/cd/fd5047eeddfb43e44adcc4e56e38893e094836a90698d2ee9ecd86f4fa03/ebs_snatcher-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d235f953336f959cd0e486c7d2969c62", "sha256": "012a4e9933a075adc51546b3555f2bab0dbdfc51663f583d65103c86b5f9c93e"}, "downloads": -1, "filename": "ebs-snatcher-0.2.0.tar.gz", "has_sig": true, "md5_digest": "d235f953336f959cd0e486c7d2969c62", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12602, "upload_time": "2018-01-19T06:38:20", "upload_time_iso_8601": "2018-01-19T06:38:20.025169Z", "url": "https://files.pythonhosted.org/packages/7c/ca/66d27d2f68e1c988dd505230df68893395fd6b7efb8c51d13dbe1ff88ac1/ebs-snatcher-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:07 2020"}