{"info": {"author": "Shaun Jackman", "author_email": "sjackman@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<img src=\"http://sjackman.ca/img/tigmint.png\" style=\"width:4in\">\n\n# Correct misassemblies using linked reads\n\nCut sequences at positions with few spanning molecules.\n\nWritten by [Shaun Jackman](http://sjackman.ca), Lauren Coombe, and Justin Chu.\n\n[bioRxiv doi:10.1101/304253](https://www.biorxiv.org/content/early/2018/04/20/304253) &middot; [Slides](http://sjackman.ca/tigmint-recomb-slides) &middot; [Poster](https://f1000research.com/posters/6-1406)\n\n# Description\n\nTigmint identifies and corrects misassemblies using linked reads from 10x Genomics Chromium. The reads are first aligned to the assembly, and the extents of the large DNA molecules are inferred from the alignments of the reads. The physical coverage of the large molecules is more consistent and less prone to coverage dropouts than that of the short read sequencing data. The sequences are cut at positions that have insufficient spanning molecules. Tigmint outputs a BED file of these cut points, and a FASTA file of the cut sequences.\n\nEach window of a specified fixed size is checked for a minimum number of spanning molecules. Sequences are cut at those positions where a window with sufficient coverage is followed by some number of windows with insufficient coverage is then followed again by a window with sufficient coverage.\n\n# Installation\n\n## Install Tigmint using Brew\n\nInstall [Linuxbrew](http://linuxbrew.sh/) on Linux or Windows Subsystem for Linux (WSL), or \ninstall [Homebrew](https://brew.sh/) on macOS, and then run the command\n\n\tbrew install tigmint\n\n## Install Tigmint from the source code\n\nDownload and extract the source code. Compiling is not needed.\n\n```\ngit clone https://github.com/bcgsc/tigmint && cd tigmint\n```\nor\n```\ncurl -L https://github.com/bcgsc/tigmint/archive/master.tar.gz | tar xz && mv tigmint-master tigmint && cd tigmint\n```\n\n# Dependencies\n\n## Install Python package dependencies\n```sh\npip3 install intervaltree pybedtools pysam statistics\n```\n\nTigmint uses Bedtools, BWA and Samtools. These dependencies may be installed using [Homebrew](https://brew.sh) on macOS or [Linuxbrew](http://linuxbrew.sh) on Linux.\n\n## Install the dependencies of Tigmint\n```sh\nbrew install bedtools bwa samtools\n```\n\n## Install the dependencies of ARCS (optional)\n```sh\nbrew tap brewsci/bio\nbrew install arcs links-scaffolder\n```\n\n## Install the dependencies for calculating assembly metrics (optional)\n```sh\nbrew install abyss seqtk\n```\n\n# Usage\n\nTo run Tigmint on the draft assembly `draft.fa` with the reads `reads.fq.gz`, which have been run through `longranger basic`:\n\n```sh\nsamtools faidx draft.fa\nbwa index draft.fa\nbwa mem -t8 -p -C draft.fa reads.fq.gz | samtools sort -@8 -tBX -o draft.reads.sortbx.bam\ntigmint-molecule draft.reads.sortbx.bam | sort -k1,1 -k2,2n -k3,3n >draft.reads.molecule.bed\ntigmint-cut -p8 -o draft.tigmint.fa draft.fa draft.reads.molecule.bed\n```\n\n- `bwa mem -C` is used to copy the BX tag from the FASTQ header to the SAM tags.\n- `samtools sort -tBX` is used to sort first by barcode and then position.\n\nAlternatively, you can run the Tigmint pipeline using the Makefile driver script `tigmint-make`. To run Tigmint on the draft assembly `myassembly.fa` with the reads `myreads.fq.gz`, which have been run through `longranger basic`:\n\n```sh\ntigmint-make tigmint draft=myassembly reads=myreads\n```\n\nTo run both Tigmint and scaffold the corrected assembly with [ARCS](https://github.com/bcgsc/arcs):\n\n```sh\ntigmint-make arcs draft=myassembly reads=myreads\n```\n\nTo run Tigmint, ARCS, and calculate assembly metrics using the reference genome `GRCh38.fa`:\n\n```sh\ntigmint-make metrics draft=myassembly reads=myreads ref=GRCh38 G=3088269832\n```\n\n# Note\n\n+ `tigmint-make` is a Makefile script, and so any `make` options may also be used with `tigmint-make`, such as `-n` (`--dry-run`).\n+ The file extension of the assembly must be `.fa` and the reads `.fq.gz`, and the extension is not included in the parameters `draft` and `reads`. These specific file name requirements result from implementing the pipeline in GNU Make.\n\n# tigmint-make commands\n\n+ `tigmint`: Run Tigmint, and produce a file named `$draft.tigmint.fa`\n+ `arcs`: Run Tigmint and ARCS, and produce a file name `$draft.tigmint.arcs.fa`\n+ `metrics`: Run, Tigmint, ARCS, and calculate assembly metrics using `abyss-fac` and `abyss-samtobreak`, and produce TSV files.\n\n# Parameters of Tigmint\n\n+ `draft`: Name of the draft assembly, `draft.fa`\n+ `reads`: Name of the reads, `reads.fq.gz`\n+ `span=20`: Number of spanning molecules threshold\n+ `window=1000`: Window size (bp) for checking spanning molecules\n+ `minsize=2000`: Minimum molecule size\n+ `as=0.65`: Minimum AS/read length ratio\n+ `nm=5`: Maximum number of mismatches\n+ `dist=50000`: Maximum distance (bp) between reads to be considered the same molecule\n+ `mapq=0`: Mapping quality threshold\n+ `trim=0`: Number of bases to trim off contigs following cuts\n+ `t=8`: Number of threads\n\n# Parameters of ARCS\n+ `c=5`\n+ `e=30000`\n+ `r=0.05`\n\n# Parameters of LINKS\n+ `a=0.1`\n+ `l=10`\n\n# Parameters for calculating assembly metrics\n\n+ `ref`: Reference genome, `ref.fa`, for calculating assembly contiguity metrics\n+ `G`: Size of the reference genome, for calculating NG50 and NGA50\n\n# Tips\n\n- If your barcoded reads are in multiple FASTQ files, the initial alignments of the barcoded reads to the draft assembly can be done in parallel and merged prior to running Tigmint.\n- When aligning with BWA-MEM, use the `-C` option to include the barcode in the BX tag of the alignments.\n- Sort by BX tag using `samtools sort -tBX`.\n- Merge multiple BAM files using `samtools merge -tBX`.\n\n# Support\n\nAfter first looking for existing issue at <https://github.com/bcgsc/tigmint/issues>, please report a new issue at <https://github.com/bcgsc/tigmint/issues/new>. Please report the names of your input files, the exact command line that you are using, and the entire output of Tigmint.\n\n# Pipeline\n\n[![Tigmint pipeline illustration](pipeline.gv.png)](pipeline.gv.svg)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bcgsc.github.io/tigmint/", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "tigmint", "package_url": "https://pypi.org/project/tigmint/", "platform": "", "project_url": "https://pypi.org/project/tigmint/", "project_urls": {"Homepage": "https://bcgsc.github.io/tigmint/"}, "release_url": "https://pypi.org/project/tigmint/1.1.2/", "requires_dist": ["intervaltree", "pybedtools", "pysam", "statistics"], "requires_python": ">=3", "summary": "Correct misassemblies using linked reads", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/304162d35c5900e275d92c3f890607ff8df4b7a3/687474703a2f2f736a61636b6d616e2e63612f696d672f7469676d696e742e706e67\">\n<h1>Correct misassemblies using linked reads</h1>\n<p>Cut sequences at positions with few spanning molecules.</p>\n<p>Written by <a href=\"http://sjackman.ca\" rel=\"nofollow\">Shaun Jackman</a>, Lauren Coombe, and Justin Chu.</p>\n<p><a href=\"https://www.biorxiv.org/content/early/2018/04/20/304253\" rel=\"nofollow\">bioRxiv doi:10.1101/304253</a> \u00b7 <a href=\"http://sjackman.ca/tigmint-recomb-slides\" rel=\"nofollow\">Slides</a> \u00b7 <a href=\"https://f1000research.com/posters/6-1406\" rel=\"nofollow\">Poster</a></p>\n<h1>Description</h1>\n<p>Tigmint identifies and corrects misassemblies using linked reads from 10x Genomics Chromium. The reads are first aligned to the assembly, and the extents of the large DNA molecules are inferred from the alignments of the reads. The physical coverage of the large molecules is more consistent and less prone to coverage dropouts than that of the short read sequencing data. The sequences are cut at positions that have insufficient spanning molecules. Tigmint outputs a BED file of these cut points, and a FASTA file of the cut sequences.</p>\n<p>Each window of a specified fixed size is checked for a minimum number of spanning molecules. Sequences are cut at those positions where a window with sufficient coverage is followed by some number of windows with insufficient coverage is then followed again by a window with sufficient coverage.</p>\n<h1>Installation</h1>\n<h2>Install Tigmint using Brew</h2>\n<p>Install <a href=\"http://linuxbrew.sh/\" rel=\"nofollow\">Linuxbrew</a> on Linux or Windows Subsystem for Linux (WSL), or\ninstall <a href=\"https://brew.sh/\" rel=\"nofollow\">Homebrew</a> on macOS, and then run the command</p>\n<pre><code>brew install tigmint\n</code></pre>\n<h2>Install Tigmint from the source code</h2>\n<p>Download and extract the source code. Compiling is not needed.</p>\n<pre><code>git clone https://github.com/bcgsc/tigmint &amp;&amp; cd tigmint\n</code></pre>\n<p>or</p>\n<pre><code>curl -L https://github.com/bcgsc/tigmint/archive/master.tar.gz | tar xz &amp;&amp; mv tigmint-master tigmint &amp;&amp; cd tigmint\n</code></pre>\n<h1>Dependencies</h1>\n<h2>Install Python package dependencies</h2>\n<pre>pip3 install intervaltree pybedtools pysam statistics\n</pre>\n<p>Tigmint uses Bedtools, BWA and Samtools. These dependencies may be installed using <a href=\"https://brew.sh\" rel=\"nofollow\">Homebrew</a> on macOS or <a href=\"http://linuxbrew.sh\" rel=\"nofollow\">Linuxbrew</a> on Linux.</p>\n<h2>Install the dependencies of Tigmint</h2>\n<pre>brew install bedtools bwa samtools\n</pre>\n<h2>Install the dependencies of ARCS (optional)</h2>\n<pre>brew tap brewsci/bio\nbrew install arcs links-scaffolder\n</pre>\n<h2>Install the dependencies for calculating assembly metrics (optional)</h2>\n<pre>brew install abyss seqtk\n</pre>\n<h1>Usage</h1>\n<p>To run Tigmint on the draft assembly <code>draft.fa</code> with the reads <code>reads.fq.gz</code>, which have been run through <code>longranger basic</code>:</p>\n<pre>samtools faidx draft.fa\nbwa index draft.fa\nbwa mem -t8 -p -C draft.fa reads.fq.gz <span class=\"p\">|</span> samtools sort -@8 -tBX -o draft.reads.sortbx.bam\ntigmint-molecule draft.reads.sortbx.bam <span class=\"p\">|</span> sort -k1,1 -k2,2n -k3,3n &gt;draft.reads.molecule.bed\ntigmint-cut -p8 -o draft.tigmint.fa draft.fa draft.reads.molecule.bed\n</pre>\n<ul>\n<li><code>bwa mem -C</code> is used to copy the BX tag from the FASTQ header to the SAM tags.</li>\n<li><code>samtools sort -tBX</code> is used to sort first by barcode and then position.</li>\n</ul>\n<p>Alternatively, you can run the Tigmint pipeline using the Makefile driver script <code>tigmint-make</code>. To run Tigmint on the draft assembly <code>myassembly.fa</code> with the reads <code>myreads.fq.gz</code>, which have been run through <code>longranger basic</code>:</p>\n<pre>tigmint-make tigmint <span class=\"nv\">draft</span><span class=\"o\">=</span>myassembly <span class=\"nv\">reads</span><span class=\"o\">=</span>myreads\n</pre>\n<p>To run both Tigmint and scaffold the corrected assembly with <a href=\"https://github.com/bcgsc/arcs\" rel=\"nofollow\">ARCS</a>:</p>\n<pre>tigmint-make arcs <span class=\"nv\">draft</span><span class=\"o\">=</span>myassembly <span class=\"nv\">reads</span><span class=\"o\">=</span>myreads\n</pre>\n<p>To run Tigmint, ARCS, and calculate assembly metrics using the reference genome <code>GRCh38.fa</code>:</p>\n<pre>tigmint-make metrics <span class=\"nv\">draft</span><span class=\"o\">=</span>myassembly <span class=\"nv\">reads</span><span class=\"o\">=</span>myreads <span class=\"nv\">ref</span><span class=\"o\">=</span>GRCh38 <span class=\"nv\">G</span><span class=\"o\">=</span><span class=\"m\">3088269832</span>\n</pre>\n<h1>Note</h1>\n<ul>\n<li><code>tigmint-make</code> is a Makefile script, and so any <code>make</code> options may also be used with <code>tigmint-make</code>, such as <code>-n</code> (<code>--dry-run</code>).</li>\n<li>The file extension of the assembly must be <code>.fa</code> and the reads <code>.fq.gz</code>, and the extension is not included in the parameters <code>draft</code> and <code>reads</code>. These specific file name requirements result from implementing the pipeline in GNU Make.</li>\n</ul>\n<h1>tigmint-make commands</h1>\n<ul>\n<li><code>tigmint</code>: Run Tigmint, and produce a file named <code>$draft.tigmint.fa</code></li>\n<li><code>arcs</code>: Run Tigmint and ARCS, and produce a file name <code>$draft.tigmint.arcs.fa</code></li>\n<li><code>metrics</code>: Run, Tigmint, ARCS, and calculate assembly metrics using <code>abyss-fac</code> and <code>abyss-samtobreak</code>, and produce TSV files.</li>\n</ul>\n<h1>Parameters of Tigmint</h1>\n<ul>\n<li><code>draft</code>: Name of the draft assembly, <code>draft.fa</code></li>\n<li><code>reads</code>: Name of the reads, <code>reads.fq.gz</code></li>\n<li><code>span=20</code>: Number of spanning molecules threshold</li>\n<li><code>window=1000</code>: Window size (bp) for checking spanning molecules</li>\n<li><code>minsize=2000</code>: Minimum molecule size</li>\n<li><code>as=0.65</code>: Minimum AS/read length ratio</li>\n<li><code>nm=5</code>: Maximum number of mismatches</li>\n<li><code>dist=50000</code>: Maximum distance (bp) between reads to be considered the same molecule</li>\n<li><code>mapq=0</code>: Mapping quality threshold</li>\n<li><code>trim=0</code>: Number of bases to trim off contigs following cuts</li>\n<li><code>t=8</code>: Number of threads</li>\n</ul>\n<h1>Parameters of ARCS</h1>\n<ul>\n<li><code>c=5</code></li>\n<li><code>e=30000</code></li>\n<li><code>r=0.05</code></li>\n</ul>\n<h1>Parameters of LINKS</h1>\n<ul>\n<li><code>a=0.1</code></li>\n<li><code>l=10</code></li>\n</ul>\n<h1>Parameters for calculating assembly metrics</h1>\n<ul>\n<li><code>ref</code>: Reference genome, <code>ref.fa</code>, for calculating assembly contiguity metrics</li>\n<li><code>G</code>: Size of the reference genome, for calculating NG50 and NGA50</li>\n</ul>\n<h1>Tips</h1>\n<ul>\n<li>If your barcoded reads are in multiple FASTQ files, the initial alignments of the barcoded reads to the draft assembly can be done in parallel and merged prior to running Tigmint.</li>\n<li>When aligning with BWA-MEM, use the <code>-C</code> option to include the barcode in the BX tag of the alignments.</li>\n<li>Sort by BX tag using <code>samtools sort -tBX</code>.</li>\n<li>Merge multiple BAM files using <code>samtools merge -tBX</code>.</li>\n</ul>\n<h1>Support</h1>\n<p>After first looking for existing issue at <a href=\"https://github.com/bcgsc/tigmint/issues\" rel=\"nofollow\">https://github.com/bcgsc/tigmint/issues</a>, please report a new issue at <a href=\"https://github.com/bcgsc/tigmint/issues/new\" rel=\"nofollow\">https://github.com/bcgsc/tigmint/issues/new</a>. Please report the names of your input files, the exact command line that you are using, and the entire output of Tigmint.</p>\n<h1>Pipeline</h1>\n<p><a href=\"pipeline.gv.svg\" rel=\"nofollow\"><img alt=\"Tigmint pipeline illustration\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/520a36bd93a804aae87f012a0febd935a97ca895/706970656c696e652e67762e706e67\"></a></p>\n\n          </div>"}, "last_serial": 4221284, "releases": {"1.1.2": [{"comment_text": "", "digests": {"md5": "b68ecd45c90719152579b2d97f5455ec", "sha256": "2dadb09a1ab651472c5e17ff1db01592cc1c953cf06cbbca89ca5e0cc474806c"}, "downloads": -1, "filename": "tigmint-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b68ecd45c90719152579b2d97f5455ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 14293, "upload_time": "2018-08-30T05:06:55", "upload_time_iso_8601": "2018-08-30T05:06:55.592920Z", "url": "https://files.pythonhosted.org/packages/33/3b/d9cbe294e7c895d7b8a4befa10408f58aa630ae7f9114db3d06474d51a83/tigmint-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8127911baef8fe547c390ba5b75bb44", "sha256": "17ea87a303e3f4eb0e466c21730a3e3c78bc328b64a4f314f9e53a887b3460f4"}, "downloads": -1, "filename": "tigmint-1.1.2.tar.gz", "has_sig": false, "md5_digest": "e8127911baef8fe547c390ba5b75bb44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14724, "upload_time": "2018-08-30T05:06:57", "upload_time_iso_8601": "2018-08-30T05:06:57.094958Z", "url": "https://files.pythonhosted.org/packages/f3/70/8f92c45efef77a6b82f357be0ec7238a4bb0cf636950d6c49d06fa6475dc/tigmint-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b68ecd45c90719152579b2d97f5455ec", "sha256": "2dadb09a1ab651472c5e17ff1db01592cc1c953cf06cbbca89ca5e0cc474806c"}, "downloads": -1, "filename": "tigmint-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b68ecd45c90719152579b2d97f5455ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 14293, "upload_time": "2018-08-30T05:06:55", "upload_time_iso_8601": "2018-08-30T05:06:55.592920Z", "url": "https://files.pythonhosted.org/packages/33/3b/d9cbe294e7c895d7b8a4befa10408f58aa630ae7f9114db3d06474d51a83/tigmint-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8127911baef8fe547c390ba5b75bb44", "sha256": "17ea87a303e3f4eb0e466c21730a3e3c78bc328b64a4f314f9e53a887b3460f4"}, "downloads": -1, "filename": "tigmint-1.1.2.tar.gz", "has_sig": false, "md5_digest": "e8127911baef8fe547c390ba5b75bb44", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 14724, "upload_time": "2018-08-30T05:06:57", "upload_time_iso_8601": "2018-08-30T05:06:57.094958Z", "url": "https://files.pythonhosted.org/packages/f3/70/8f92c45efef77a6b82f357be0ec7238a4bb0cf636950d6c49d06fa6475dc/tigmint-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:20 2020"}