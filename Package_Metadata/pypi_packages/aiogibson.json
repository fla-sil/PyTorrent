{"info": {"author": "Nikolay Novik", "author_email": "nickolainovik@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Topic :: Software Development", "Topic :: Software Development :: Libraries"], "description": "aiogibson\n=========\n\n.. image:: https://travis-ci.org/jettify/aiogibson.svg?branch=master\n    :target: https://travis-ci.org/jettify/aiogibson\n    :alt: |Build status|\n.. image:: https://coveralls.io/repos/jettify/aiogibson/badge.png?branch=master\n    :target: https://coveralls.io/r/jettify/aiogibson?branch=master\n    :alt: |Coverage|\n.. image:: https://pypip.in/v/aiogibson/badge.svg\n    :target: https://pypi.python.org/pypi/aiogibson/\n    :alt: |Latest PyPI version|\n.. image:: https://pypip.in/d/aiogibson/badge.svg\n    :target: https://pypi.python.org/pypi/aiogibson/\n    :alt: |Number of PyPI downloads|\n.. image:: https://pypip.in/license/aiogibson/badge.svg\n    :target: https://pypi.python.org/pypi/aiogibson/\n    :alt: |License|\n\n\n**aiogibson** is a library for accessing a gibson_ cache database\nfrom the asyncio_ (PEP-3156/tulip) framework.\n\nGibson is a high efficiency, tree based memory cache server.\nIt uses a special trie_ structure allowing the\nuser to perform operations on multiple key sets using a prefix\nexpression achieving the same performance grades in the worst case,\neven better on an average case then regular cache implementations\nbased on hash tables.\n\n\nCode heavily reused from awesome aioredis_ library. ``GibsonPool``,\n``GibsonConnection``, almost direct copy of ``RedisPool`` and\n``RedisConnection``, so I highly recommend to checkout aioredis_.\n\n\nDocumentation\n-------------\nhttp://aiogibson.readthedocs.org/\n\n\nInstallation\n------------\n\nMake sure that you have gibson_ server compiled and running. The easiest way\nto install *aiogibson* is by using the package on PyPi::\n\n   pip install aiogibson\n\n\nExample\n-------\n\n.. code:: python\n\n    import asyncio\n    from aiogibson import create_gibson\n\n    loop = asyncio.get_event_loop()\n\n\n    @asyncio.coroutine\n    def go():\n        gibson = yield from create_gibson('/tmp/gibson.sock', loop=loop)\n        # set value\n        yield from gibson.set(b'foo', b'bar', 7)\n        yield from gibson.set(b'numfoo', 100, 7)\n\n        # get value\n        result = yield from gibson.get(b'foo')\n        print(result)\n\n        # set ttl to the value\n        yield from gibson.ttl(b'foo', 10)\n\n        # increment given key\n        yield from gibson.inc(b'numfoo')\n\n        # decrement given key\n        yield from gibson.dec(b'numfoo')\n\n        # lock key from modification\n        yield from gibson.lock(b'numfoo')\n\n        # unlock given key\n        yield from gibson.unlock(b'numfoo')\n\n        # fetch keys with given prefix\n        yield from gibson.keys(b'foo')\n\n        # delete value\n        yield from gibson.delete(b'foo')\n\n\n    loop.run_until_complete(go())\n\nUnderlying data structure trie_ allows us to perform operations on multiple\nkey sets using a prefix expression:\n\n\nMulti Commands\n--------------\n\n.. code:: python\n\n    import asyncio\n    from aiogibson import create_gibson\n\n    loop = asyncio.get_event_loop()\n\n\n    @asyncio.coroutine\n    def go():\n        gibson = yield from create_gibson('/tmp/gibson.sock', loop=loop)\n\n        # set the value for keys verifying the given prefix\n        yield from gibson.mset(b'fo', b'bar', 7)\n        yield from gibson.mset(b'numfo', 100, 7)\n\n        # get the values for keys with given prefix\n        result = yield from gibson.mget(b'fo')\n\n        # set the TTL for keys verifying the given prefix\n        yield from gibson.mttl(b'fo', 10)\n\n        # increment by one keys verifying the given prefix.\n        yield from gibson.minc(b'numfo')\n\n        # decrement by one keys verifying the given prefix\n        yield from gibson.mdec(b'numfoo')\n\n        # lock keys with prefix from modification\n        yield from gibson.mlock(b'fo')\n\n        # unlock keys with given prefix\n        yield from gibson.munlock(b'fo')\n\n        # delete keys verifying the given prefix.\n        yield from gibson.mdelete(b'fo')\n\n        # return list of keys with given prefix ``fo``\n        yield from gibson.keys(b'fo')\n\n        # count items for a given prefi\n        info = yield from gibson.stats()\n\n\n    loop.run_until_complete(go())\n\n**aiogibson** has connection pooling support using context-manager:\n\n\nConnection Pool Example\n-----------------------\n\n.. code:: python\n\n    import asyncio\n    from aiogibson import create_pool\n\n    loop = asyncio.get_event_loop()\n\n    @asyncio.coroutine\n    def go():\n        pool = yield from create_pool('/tmp/gibson.sock', minsize=5, maxsize=10,\n                                      loop=loop)\n        # using context manager\n        with (yield from pool) as gibson:\n            yield from gibson.set('foo', 'bar')\n            value = yield from gibson.get('foo')\n            print(value)\n\n        # NOTE: experimental feature\n        # or without context manager\n        yield from pool.set('foo', 'bar')\n        resp = yield from pool.get('foo')\n        yield from pool.delete('foo')\n\n        pool.clear()\n\n    loop.run_until_complete(go())\n\n\nAlso you can have simple low-level interface to *gibson* server:\n\n\nLow Level Commands\n------------------\n\n.. code:: python\n\n    import asyncio\n    from aiogibson import create_gibson\n\n    loop = asyncio.get_event_loop()\n\n\n    @asyncio.coroutine\n    def go():\n        gibson = yield from create_connection('/tmp/gibson.sock', loop=loop)\n\n        # set value\n        yield from gibson.execute(b'set', b'foo', b'bar', 7)\n\n        # get value\n        result = yield from gibson.execute(b'get', b'foo')\n        print(result)\n        # delete value\n        yield from gibson.execute(b'del', b'foo')\n\n\n    loop.run_until_complete(go())\n\n\nRequirements\n------------\n\n* Python_ 3.3+\n* asyncio_ or Python_ 3.4+\n\n\nLicense\n-------\n\nThe *aiogibson* is offered under MIT license.\n\n.. _Python: https://www.python.org\n.. _asyncio: http://docs.python.org/3.4/library/asyncio.html\n.. _gibson: http://gibson-db.in/\n.. _aioredis: https://github.com/aio-libs/aioredis\n.. _trie: http://en.wikipedia.org/wiki/Trie\n\nChanges\n-------\n\n0.1.3 (2015-02-10)\n^^^^^^^^^^^^^^^^^^\n* Documentation published on http://aiogibson.readthedocs.org/:\n\n* Added wait closed finalizer;\n\n* Improved test coverage to 99%;\n\n* Fixed bug with canceled future;\n\n* Added limit argument to mget command;\n\n0.1.2 (2014-10-15)\n^^^^^^^^^^^^^^^^^^\n* Changed Reader interface to be similar to hiredis;\n\n* Most methods from high level interface now return Future;\n\n* Connection pool, works as drop in replacement for high level connection;\n\n* Added more docstrings;\n\n\n0.1.1 (2014-09-06)\n^^^^^^^^^^^^^^^^^^\n* Improved protocol parser;\n\n* Added type checking in high-level commands;\n\n* Added check for None arguments in connection execute command;\n\n\n0.1.0 (2014-08-17)\n^^^^^^^^^^^^^^^^^^\n* Initial release;", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jettify/aiogibson", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "aiogibson", "package_url": "https://pypi.org/project/aiogibson/", "platform": "POSIX", "project_url": "https://pypi.org/project/aiogibson/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jettify/aiogibson"}, "release_url": "https://pypi.org/project/aiogibson/0.1.3/", "requires_dist": null, "requires_python": null, "summary": "asyncio (PEP 3156) Gibson cache support", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/jettify/aiogibson\" rel=\"nofollow\"><img alt=\"|Build status|\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e828c21acb2188465d5684c6a26a2723e4977b9a/68747470733a2f2f7472617669732d63692e6f72672f6a6574746966792f61696f676962736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/r/jettify/aiogibson?branch=master\" rel=\"nofollow\"><img alt=\"|Coverage|\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a05865b0f9f37766879d7f650a8fe256a131708c/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6a6574746966792f61696f676962736f6e2f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/aiogibson/\" rel=\"nofollow\"><img alt=\"|Latest PyPI version|\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a3d020b502a4bbdaa6add76d054e45b789e56b0/68747470733a2f2f70797069702e696e2f762f61696f676962736f6e2f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiogibson/\" rel=\"nofollow\"><img alt=\"|Number of PyPI downloads|\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/729ea440a25f570856cffcc8f29422dec34b8c58/68747470733a2f2f70797069702e696e2f642f61696f676962736f6e2f62616467652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/aiogibson/\" rel=\"nofollow\"><img alt=\"|License|\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e73dabf0dd6b8e728d85ae43c148d849bef058b9/68747470733a2f2f70797069702e696e2f6c6963656e73652f61696f676962736f6e2f62616467652e737667\"></a>\n<p><strong>aiogibson</strong> is a library for accessing a <a href=\"http://gibson-db.in/\" rel=\"nofollow\">gibson</a> cache database\nfrom the <a href=\"http://docs.python.org/3.4/library/asyncio.html\" rel=\"nofollow\">asyncio</a> (PEP-3156/tulip) framework.</p>\n<p>Gibson is a high efficiency, tree based memory cache server.\nIt uses a special <a href=\"http://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">trie</a> structure allowing the\nuser to perform operations on multiple key sets using a prefix\nexpression achieving the same performance grades in the worst case,\neven better on an average case then regular cache implementations\nbased on hash tables.</p>\n<p>Code heavily reused from awesome <a href=\"https://github.com/aio-libs/aioredis\" rel=\"nofollow\">aioredis</a> library. <tt>GibsonPool</tt>,\n<tt>GibsonConnection</tt>, almost direct copy of <tt>RedisPool</tt> and\n<tt>RedisConnection</tt>, so I highly recommend to checkout <a href=\"https://github.com/aio-libs/aioredis\" rel=\"nofollow\">aioredis</a>.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p><a href=\"http://aiogibson.readthedocs.org/\" rel=\"nofollow\">http://aiogibson.readthedocs.org/</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Make sure that you have <a href=\"http://gibson-db.in/\" rel=\"nofollow\">gibson</a> server compiled and running. The easiest way\nto install <em>aiogibson</em> is by using the package on PyPi:</p>\n<pre>pip install aiogibson\n</pre>\n</div>\n<div id=\"example\">\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiogibson</span> <span class=\"kn\">import</span> <span class=\"n\">create_gibson</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">gibson</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">create_gibson</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/gibson.sock'</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"c1\"># set value</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get value</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set ttl to the value</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">ttl</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># increment given key</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">inc</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># decrement given key</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">dec</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># lock key from modification</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">lock</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># unlock given key</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">unlock</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># fetch keys with given prefix</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># delete value</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">())</span>\n</pre>\n<p>Underlying data structure <a href=\"http://en.wikipedia.org/wiki/Trie\" rel=\"nofollow\">trie</a> allows us to perform operations on multiple\nkey sets using a prefix expression:</p>\n</div>\n<div id=\"multi-commands\">\n<h2>Multi Commands</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiogibson</span> <span class=\"kn\">import</span> <span class=\"n\">create_gibson</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">gibson</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">create_gibson</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/gibson.sock'</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set the value for keys verifying the given prefix</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mset</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfo'</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get the values for keys with given prefix</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mget</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set the TTL for keys verifying the given prefix</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mttl</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># increment by one keys verifying the given prefix.</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">minc</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># decrement by one keys verifying the given prefix</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mdec</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'numfoo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># lock keys with prefix from modification</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mlock</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># unlock keys with given prefix</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">munlock</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># delete keys verifying the given prefix.</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">mdelete</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># return list of keys with given prefix ``fo``</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'fo'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># count items for a given prefi</span>\n    <span class=\"n\">info</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">stats</span><span class=\"p\">()</span>\n\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">())</span>\n</pre>\n<p><strong>aiogibson</strong> has connection pooling support using context-manager:</p>\n</div>\n<div id=\"connection-pool-example\">\n<h2>Connection Pool Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiogibson</span> <span class=\"kn\">import</span> <span class=\"n\">create_pool</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">create_pool</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/gibson.sock'</span><span class=\"p\">,</span> <span class=\"n\">minsize</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">maxsize</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                                  <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n    <span class=\"c1\"># using context manager</span>\n    <span class=\"k\">with</span> <span class=\"p\">(</span><span class=\"k\">yield from</span> <span class=\"n\">pool</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">gibson</span><span class=\"p\">:</span>\n        <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n        <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># NOTE: experimental feature</span>\n    <span class=\"c1\"># or without context manager</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">set</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">)</span>\n    <span class=\"n\">resp</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">())</span>\n</pre>\n<p>Also you can have simple low-level interface to <em>gibson</em> server:</p>\n</div>\n<div id=\"low-level-commands\">\n<h2>Low Level Commands</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiogibson</span> <span class=\"kn\">import</span> <span class=\"n\">create_gibson</span>\n\n<span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">go</span><span class=\"p\">():</span>\n    <span class=\"n\">gibson</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">create_connection</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/gibson.sock'</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># set value</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'set'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># get value</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n    <span class=\"c1\"># delete value</span>\n    <span class=\"k\">yield from</span> <span class=\"n\">gibson</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'del'</span><span class=\"p\">,</span> <span class=\"sa\">b</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">go</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> 3.3+</li>\n<li><a href=\"http://docs.python.org/3.4/library/asyncio.html\" rel=\"nofollow\">asyncio</a> or <a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> 3.4+</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The <em>aiogibson</em> is offered under MIT license.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.1.3 (2015-02-10)</h3>\n<ul>\n<li>Documentation published on <a href=\"http://aiogibson.readthedocs.org/\" rel=\"nofollow\">http://aiogibson.readthedocs.org/</a>:</li>\n<li>Added wait closed finalizer;</li>\n<li>Improved test coverage to 99%;</li>\n<li>Fixed bug with canceled future;</li>\n<li>Added limit argument to mget command;</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.2 (2014-10-15)</h3>\n<ul>\n<li>Changed Reader interface to be similar to hiredis;</li>\n<li>Most methods from high level interface now return Future;</li>\n<li>Connection pool, works as drop in replacement for high level connection;</li>\n<li>Added more docstrings;</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.1 (2014-09-06)</h3>\n<ul>\n<li>Improved protocol parser;</li>\n<li>Added type checking in high-level commands;</li>\n<li>Added check for None arguments in connection execute command;</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.0 (2014-08-17)</h3>\n<ul>\n<li>Initial release;</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1418402, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "058fbdef6ea72315f9b5b6ed994de591", "sha256": "5ca7d1f1fa7cd4d9c4d7fac21530567341341f4ae380505dfbe7059c118d0864"}, "downloads": -1, "filename": "aiogibson-0.1.0.tar.gz", "has_sig": false, "md5_digest": "058fbdef6ea72315f9b5b6ed994de591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10227, "upload_time": "2014-08-17T21:08:03", "upload_time_iso_8601": "2014-08-17T21:08:03.093286Z", "url": "https://files.pythonhosted.org/packages/8f/5e/ec3b8c9d617842f041b5a02c0c75e1df39e8fd5f05937f50bccb7ebaf9c6/aiogibson-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "60d74a4986f8ab28c0bda2c9a8dc93e1", "sha256": "978b1f40156d2b13951b413cb80828084ddadf1c084861981df3db548b913f44"}, "downloads": -1, "filename": "aiogibson-0.1.1.tar.gz", "has_sig": false, "md5_digest": "60d74a4986f8ab28c0bda2c9a8dc93e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12542, "upload_time": "2014-09-06T20:31:46", "upload_time_iso_8601": "2014-09-06T20:31:46.499972Z", "url": "https://files.pythonhosted.org/packages/a9/85/98e33e7c10cb21dd348c01c80b138e9a48fc4aa40a91a7c2a2ff3dabc150/aiogibson-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "eb906f7f08395d706fb80bf91d362e0d", "sha256": "1e22fdd0a2a930bdd593b81fd2ce5bb74bf7ffde1d2ffb405d3012a6f805136a"}, "downloads": -1, "filename": "aiogibson-0.1.2.tar.gz", "has_sig": false, "md5_digest": "eb906f7f08395d706fb80bf91d362e0d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13437, "upload_time": "2014-10-15T18:41:40", "upload_time_iso_8601": "2014-10-15T18:41:40.423402Z", "url": "https://files.pythonhosted.org/packages/f2/69/82aaa1bd7cce20f1ed4db413d5aabfdbb6a4c7a785f9707ae79db8e10d6d/aiogibson-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9eefd7219013b29a7fc0e0bd9feea031", "sha256": "f70c83272ee2193ea7815a875a2391aac50f152ee5ed572a7edcaa66560534a6"}, "downloads": -1, "filename": "aiogibson-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9eefd7219013b29a7fc0e0bd9feea031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14205, "upload_time": "2015-02-10T21:27:00", "upload_time_iso_8601": "2015-02-10T21:27:00.087520Z", "url": "https://files.pythonhosted.org/packages/c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9eefd7219013b29a7fc0e0bd9feea031", "sha256": "f70c83272ee2193ea7815a875a2391aac50f152ee5ed572a7edcaa66560534a6"}, "downloads": -1, "filename": "aiogibson-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9eefd7219013b29a7fc0e0bd9feea031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14205, "upload_time": "2015-02-10T21:27:00", "upload_time_iso_8601": "2015-02-10T21:27:00.087520Z", "url": "https://files.pythonhosted.org/packages/c3/b3/e6eb82732d0051d4b104bcb9987323db399677bd52ddb85663da41593081/aiogibson-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:32 2020"}