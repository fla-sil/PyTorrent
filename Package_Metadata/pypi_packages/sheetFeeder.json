{"info": {"author": "David W Hodges", "author_email": "dwhodges@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n# sheetFeeder\n_(Formerly googlesheet_tools, GoogleSheetAPITools)_\n\nBasic Python functions for operations on a Google Sheet. See https://developers.google.com/sheets/api/quickstart/python for more setup details. See API documentation: https://developers.google.com/sheets/api/reference/rest.\nThis module has been heavily used in Columbia University Libraries' archival data migrations and other activites; a case study involving its use can be found in https://journal.code4lib.org/articles/14871.\n\n## Requirements\n\n* Python 3.4 or higher.\n* A Google Apps account.\n* Python packages:\n  * `requests`\n  * `google-api-python-client`\n  * `oauth2client`\n  * `httplib2`\n\n## Setup\n\nNEW: Now available as an [installable package from pypi.org](https://pypi.org/project/sheetFeeder/)!\n\n1. Installation\n\n    There are several ways to use `sheetFeeder`, depending how you want to manage dependencies like authentication credentials. Three options are described here: system installation, installation in a virtual environment, and stand-alone module use. For testing and portability, the virtual-environment option is most recommended.\n\n    #### A. System installation\n\n    To install into your default Python 3 environment, use the version of pip assocated with that environment (usually `pip3`).\n\n    ```\n    pip3 install sheetFeeder\n    ```\n\n    NOTE: You may need to prepend `sudo` to the avove to install at the system level. If you do not have su permissions to install Python packages, you may do better to use a virtual environment (see below).\n\n    You will need to note the location where the package is installed for step 2 below. It will be something like:\n\n    ```\n    /usr/local/lib/python3.7/site-packages/sheetFeeder\n    ```\n\n    #### B. Virtual environment installation\n\n    The command `venv` is used to create a virtual Python environment. See https://docs.python.org/3/library/venv.html. (Commands below are for a bash shell in Linux or Mac OS; your use of venv may vary,see the venv documentation linked above.)\n\n    * Use `venv` to create a new virtual Python 3 environment in a convenient location with an appropriate name such as \"sfvenv\":\n\n        ```\n        python3 -m venv sfvenv\n        ```\n\n    * Activate the virtual environment to which dependencies will be added:\n\n        ```\n        source sfvenv/bin/activate\n        ```\n\n        (To deactivate the environment use the command `deactivate`.)\n\n    * Install `sheetFeeder` using pip:\n\n        ```\n        pip install sheetFeeder\n        ```\n\n        This will install into the activated virtual environment and only be available while the environment is active. Note the location where the library was installed for step 2 below. It will be something like:\n\n        ```\n        sfvenv/lib/python3.6/site-packages/sheetFeeder/\n        ```\n\n    #### C. Stand-alone installation\n\n    If you prefer not to install the module as a package but rather wish to use it as a standalone Python module, you will need to install a few dependencies yourself, either in a virtual environment or in your default Python 3 environment. In this case, download `sheetFeeder.py` to your working directory and import it from your scripts in the same directory.\n\n    Dependencies to install into environment:\n\n    * `pip install requests`\n    * `pip install --upgrade google-api-python-client`\n    * `pip install oauth2client`\n\n    In this scenario, you will place the `credentials.json` file from step 2 below in the same working directory as `sheetFeeder.py`.\n\n\n2. Obtain API credentials. To begin using the Google Sheets API you need to obtain credentials specific to your Google account and make them available to `sheetFeeder`. \n\n    - Go to https://developers.google.com/sheets/api/quickstart/python. Make sure you are signed in as the Google identity you want to enable API access for. \n    - Click \"Enable the Google Sheets API\" button. Download the API credentials as `credentials.json`.\n    - Place `credentials.json` in the `sheetFeeder` package location as identified in step 1 above (will be different depending on which type of installation you opted for).\n\n3. Authenticate and authorize access to your Google account's API (Quickstart).\n    - Download and run `sample.py` in your working directory.\n    - The first time you use the API you will be asked to select the Google identity to use (if more than one are detected) and to verify access. Note that you may see a warning that the application is not verified by Google. You can go to the \"advanced\" option and proceed with the \"Quickstart\" authentication process from there.\n    - Click through to grant read/write permission to your Google Sheets account. If successful you will see a message saying \"The authentication flow has completed.\"\n    - If successful, a `token.json` file should be created in the same folder as the `credentials.json` file (see step 1 above for location), and a brief readout of sample table data will appear. Once the credentials and token are in place, you be able to access sheets via the API without additional steps;\u00a0you can verify this by running `sample.py` again\u2014you should get the read-out without the authentication steps.\u00a0\n\n### Reusing and revoking API credentials\n\nNote that your API credentials (`credentials.json` and `token.json`) can be reused in other environments where `sheetFeeder` is installed without repeating steps 2\u20133 above. You may copy them to the appropriate location per step 1 above. To disallow API access and reset to the initial state, simply delete the files. You may also manage API access via the [Google API console](https://console.developers.google.com/).\n\n\n## Using sheetFeeder\n\n### The dataSheet() class\n\nThe core class is `dataSheet(id,range)`. Define a dataSheet to operate on using the id string of a Google Sheet (the long string between \"https://docs.google.com/spreadsheets/d/\" and \"/edit#gid=0\" or the like), and a range including a tab name. Example:\n\n```python\nfrom sheetFeeder import dataSheet\n\nmy_sheet = dataSheet('1YzM1diaFchenQnchemgogyU2menGxv5Gme','Sheet1!A:Z')\n```\n\nThis enables several methods on the dataSheet class, as outlined below.\n\n\n### Methods\n\n* `clear()`\n  * Empty the contents of range, as defined by dataSheet.\n  * Example: `my_sheet.clear()`: \n* `getData()`\n  * Return the contents of dataSheet in a list of lists.\n  * Example: `my_sheet.getData()`\n  * Result: [['head1', 'head2'],['a', 'b'],['one', 'two']]\n* `getDataColumns()`\n  * Return the contents of dataSheet rotated as columns, in a list of lists.\n  * Example: `my_sheet.getDataColumns()`\n  * Result: [['head1', 'a', 'one'],['head2', 'b','two']]\n* `appendData(data)`\n  * Append rows of data to sheet.  Note: the range is only used to identify a table; values will be appended as rows at the end of table, not at end of range.\n  * Example: `my_sheet.appendData([[5,\"e\", 'xx'],[6,\"f\"],[7,\"g\"]])`\n  * Result: add some rows.\n* `lookup(search_str,col_search,col_result)`\n  * Provide string to match, the column to match in, and col(s) to return. The col_result can either be an integer or a list of integers, e.g., col_search=0, col_result=[1,2], which will return an array of results. Will return multiple matches in a list.\n  * Example: `my_sheet.lookup('Smith',2,[3,4])`\n  * Result: Return values of columns 3 and 4 for any row where column 2 equals \"Smith\".\n* `matchingRows(queries,regex=True,operator='or')`\n  * Return a list of rows for which at least one queried column matches regex query. Assumes the first row contains heads. Queries are pairs of column heads and matching strings, e.g., [['ID','123'],['Author','Yeats']]. They are regex by default and can be joined by either 'and' or 'or' logic.\n  * Example: `my_sheet.matchingRows([['ID', '123'], ['Title', '.*Humph.*']])`\n  * Result: Return all rows where ID = 123 *or* Title matches the regex expression `.*Humph.*`. \n  * Example: `my_sheet.matchingRows([['ID', '123'], ['Title', '.*Humph.*']], operator='and')`\n  * Result: Return all rows where ID = 123 *and* Title matches the regex expression `.*Humph.*`. \n* `importCSV(csv,delim=',',quote='NONE')`\n  * Import a CSV file into a designated sheet range, overwriting what is there. Delimeter is comma by default, but can be any character, e.g., pipe ('|').\n  * Example: `my_sheet.importCSV(my_file,delim='|')`\n  * Result: Import contents of pipe-delimited text file into dataSheet.\n\n### Additional subclasses\n\n* `.id`: Returns id part of dataSheet \n* `.range`: Returns range part of dataSheet \n* `.initInfo`: Returns dictionary of metadata about sheet (all tabs, not just the one defined in 2nd arg of dataSheet).\n* `.initTabs`: Returns a list of names of tabs in spreadsheet.\n* `.url`: Returns public url of sheet of form https://docs.google.com/spreadsheets/d/{sheet_id}/edit#gid={tab_id}\n\n\n## Notes\n\nThis is a work in progress. Comments/suggestions as well as forking very welcome. \n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dwhodges2/sheetFeeder", "keywords": "googlesheets api tabular data", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sheetFeeder", "package_url": "https://pypi.org/project/sheetFeeder/", "platform": "", "project_url": "https://pypi.org/project/sheetFeeder/", "project_urls": {"Homepage": "https://github.com/dwhodges2/sheetFeeder"}, "release_url": "https://pypi.org/project/sheetFeeder/0.1.3/", "requires_dist": ["requests", "google-api-python-client", "oauth2client"], "requires_python": ">=3.4.0", "summary": "Python tool set for interacting with Google Sheets data.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sheetFeeder</h1>\n<p><em>(Formerly googlesheet_tools, GoogleSheetAPITools)</em></p>\n<p>Basic Python functions for operations on a Google Sheet. See <a href=\"https://developers.google.com/sheets/api/quickstart/python\" rel=\"nofollow\">https://developers.google.com/sheets/api/quickstart/python</a> for more setup details. See API documentation: <a href=\"https://developers.google.com/sheets/api/reference/rest\" rel=\"nofollow\">https://developers.google.com/sheets/api/reference/rest</a>.\nThis module has been heavily used in Columbia University Libraries' archival data migrations and other activites; a case study involving its use can be found in <a href=\"https://journal.code4lib.org/articles/14871\" rel=\"nofollow\">https://journal.code4lib.org/articles/14871</a>.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Python 3.4 or higher.</li>\n<li>A Google Apps account.</li>\n<li>Python packages:\n<ul>\n<li><code>requests</code></li>\n<li><code>google-api-python-client</code></li>\n<li><code>oauth2client</code></li>\n<li><code>httplib2</code></li>\n</ul>\n</li>\n</ul>\n<h2>Setup</h2>\n<p>NEW: Now available as an <a href=\"https://pypi.org/project/sheetFeeder/\" rel=\"nofollow\">installable package from pypi.org</a>!</p>\n<ol>\n<li>\n<p>Installation</p>\n<p>There are several ways to use <code>sheetFeeder</code>, depending how you want to manage dependencies like authentication credentials. Three options are described here: system installation, installation in a virtual environment, and stand-alone module use. For testing and portability, the virtual-environment option is most recommended.</p>\n<h4>A. System installation</h4>\n<p>To install into your default Python 3 environment, use the version of pip assocated with that environment (usually <code>pip3</code>).</p>\n<pre><code>pip3 install sheetFeeder\n</code></pre>\n<p>NOTE: You may need to prepend <code>sudo</code> to the avove to install at the system level. If you do not have su permissions to install Python packages, you may do better to use a virtual environment (see below).</p>\n<p>You will need to note the location where the package is installed for step 2 below. It will be something like:</p>\n<pre><code>/usr/local/lib/python3.7/site-packages/sheetFeeder\n</code></pre>\n<h4>B. Virtual environment installation</h4>\n<p>The command <code>venv</code> is used to create a virtual Python environment. See <a href=\"https://docs.python.org/3/library/venv.html\" rel=\"nofollow\">https://docs.python.org/3/library/venv.html</a>. (Commands below are for a bash shell in Linux or Mac OS; your use of venv may vary,see the venv documentation linked above.)</p>\n<ul>\n<li>\n<p>Use <code>venv</code> to create a new virtual Python 3 environment in a convenient location with an appropriate name such as \"sfvenv\":</p>\n<pre><code>python3 -m venv sfvenv\n</code></pre>\n</li>\n<li>\n<p>Activate the virtual environment to which dependencies will be added:</p>\n<pre><code>source sfvenv/bin/activate\n</code></pre>\n<p>(To deactivate the environment use the command <code>deactivate</code>.)</p>\n</li>\n<li>\n<p>Install <code>sheetFeeder</code> using pip:</p>\n<pre><code>pip install sheetFeeder\n</code></pre>\n<p>This will install into the activated virtual environment and only be available while the environment is active. Note the location where the library was installed for step 2 below. It will be something like:</p>\n<pre><code>sfvenv/lib/python3.6/site-packages/sheetFeeder/\n</code></pre>\n</li>\n</ul>\n<h4>C. Stand-alone installation</h4>\n<p>If you prefer not to install the module as a package but rather wish to use it as a standalone Python module, you will need to install a few dependencies yourself, either in a virtual environment or in your default Python 3 environment. In this case, download <code>sheetFeeder.py</code> to your working directory and import it from your scripts in the same directory.</p>\n<p>Dependencies to install into environment:</p>\n<ul>\n<li><code>pip install requests</code></li>\n<li><code>pip install --upgrade google-api-python-client</code></li>\n<li><code>pip install oauth2client</code></li>\n</ul>\n<p>In this scenario, you will place the <code>credentials.json</code> file from step 2 below in the same working directory as <code>sheetFeeder.py</code>.</p>\n</li>\n<li>\n<p>Obtain API credentials. To begin using the Google Sheets API you need to obtain credentials specific to your Google account and make them available to <code>sheetFeeder</code>.</p>\n<ul>\n<li>Go to <a href=\"https://developers.google.com/sheets/api/quickstart/python\" rel=\"nofollow\">https://developers.google.com/sheets/api/quickstart/python</a>. Make sure you are signed in as the Google identity you want to enable API access for.</li>\n<li>Click \"Enable the Google Sheets API\" button. Download the API credentials as <code>credentials.json</code>.</li>\n<li>Place <code>credentials.json</code> in the <code>sheetFeeder</code> package location as identified in step 1 above (will be different depending on which type of installation you opted for).</li>\n</ul>\n</li>\n<li>\n<p>Authenticate and authorize access to your Google account's API (Quickstart).</p>\n<ul>\n<li>Download and run <code>sample.py</code> in your working directory.</li>\n<li>The first time you use the API you will be asked to select the Google identity to use (if more than one are detected) and to verify access. Note that you may see a warning that the application is not verified by Google. You can go to the \"advanced\" option and proceed with the \"Quickstart\" authentication process from there.</li>\n<li>Click through to grant read/write permission to your Google Sheets account. If successful you will see a message saying \"The authentication flow has completed.\"</li>\n<li>If successful, a <code>token.json</code> file should be created in the same folder as the <code>credentials.json</code> file (see step 1 above for location), and a brief readout of sample table data will appear. Once the credentials and token are in place, you be able to access sheets via the API without additional steps;\u00a0you can verify this by running <code>sample.py</code> again\u2014you should get the read-out without the authentication steps.\u00a0</li>\n</ul>\n</li>\n</ol>\n<h3>Reusing and revoking API credentials</h3>\n<p>Note that your API credentials (<code>credentials.json</code> and <code>token.json</code>) can be reused in other environments where <code>sheetFeeder</code> is installed without repeating steps 2\u20133 above. You may copy them to the appropriate location per step 1 above. To disallow API access and reset to the initial state, simply delete the files. You may also manage API access via the <a href=\"https://console.developers.google.com/\" rel=\"nofollow\">Google API console</a>.</p>\n<h2>Using sheetFeeder</h2>\n<h3>The dataSheet() class</h3>\n<p>The core class is <code>dataSheet(id,range)</code>. Define a dataSheet to operate on using the id string of a Google Sheet (the long string between \"<a href=\"https://docs.google.com/spreadsheets/d/\" rel=\"nofollow\">https://docs.google.com/spreadsheets/d/</a>\" and \"/edit#gid=0\" or the like), and a range including a tab name. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sheetFeeder</span> <span class=\"kn\">import</span> <span class=\"n\">dataSheet</span>\n\n<span class=\"n\">my_sheet</span> <span class=\"o\">=</span> <span class=\"n\">dataSheet</span><span class=\"p\">(</span><span class=\"s1\">'1YzM1diaFchenQnchemgogyU2menGxv5Gme'</span><span class=\"p\">,</span><span class=\"s1\">'Sheet1!A:Z'</span><span class=\"p\">)</span>\n</pre>\n<p>This enables several methods on the dataSheet class, as outlined below.</p>\n<h3>Methods</h3>\n<ul>\n<li><code>clear()</code>\n<ul>\n<li>Empty the contents of range, as defined by dataSheet.</li>\n<li>Example: <code>my_sheet.clear()</code>:</li>\n</ul>\n</li>\n<li><code>getData()</code>\n<ul>\n<li>Return the contents of dataSheet in a list of lists.</li>\n<li>Example: <code>my_sheet.getData()</code></li>\n<li>Result: [['head1', 'head2'],['a', 'b'],['one', 'two']]</li>\n</ul>\n</li>\n<li><code>getDataColumns()</code>\n<ul>\n<li>Return the contents of dataSheet rotated as columns, in a list of lists.</li>\n<li>Example: <code>my_sheet.getDataColumns()</code></li>\n<li>Result: [['head1', 'a', 'one'],['head2', 'b','two']]</li>\n</ul>\n</li>\n<li><code>appendData(data)</code>\n<ul>\n<li>Append rows of data to sheet.  Note: the range is only used to identify a table; values will be appended as rows at the end of table, not at end of range.</li>\n<li>Example: <code>my_sheet.appendData([[5,\"e\", 'xx'],[6,\"f\"],[7,\"g\"]])</code></li>\n<li>Result: add some rows.</li>\n</ul>\n</li>\n<li><code>lookup(search_str,col_search,col_result)</code>\n<ul>\n<li>Provide string to match, the column to match in, and col(s) to return. The col_result can either be an integer or a list of integers, e.g., col_search=0, col_result=[1,2], which will return an array of results. Will return multiple matches in a list.</li>\n<li>Example: <code>my_sheet.lookup('Smith',2,[3,4])</code></li>\n<li>Result: Return values of columns 3 and 4 for any row where column 2 equals \"Smith\".</li>\n</ul>\n</li>\n<li><code>matchingRows(queries,regex=True,operator='or')</code>\n<ul>\n<li>Return a list of rows for which at least one queried column matches regex query. Assumes the first row contains heads. Queries are pairs of column heads and matching strings, e.g., [['ID','123'],['Author','Yeats']]. They are regex by default and can be joined by either 'and' or 'or' logic.</li>\n<li>Example: <code>my_sheet.matchingRows([['ID', '123'], ['Title', '.*Humph.*']])</code></li>\n<li>Result: Return all rows where ID = 123 <em>or</em> Title matches the regex expression <code>.*Humph.*</code>.</li>\n<li>Example: <code>my_sheet.matchingRows([['ID', '123'], ['Title', '.*Humph.*']], operator='and')</code></li>\n<li>Result: Return all rows where ID = 123 <em>and</em> Title matches the regex expression <code>.*Humph.*</code>.</li>\n</ul>\n</li>\n<li><code>importCSV(csv,delim=',',quote='NONE')</code>\n<ul>\n<li>Import a CSV file into a designated sheet range, overwriting what is there. Delimeter is comma by default, but can be any character, e.g., pipe ('|').</li>\n<li>Example: <code>my_sheet.importCSV(my_file,delim='|')</code></li>\n<li>Result: Import contents of pipe-delimited text file into dataSheet.</li>\n</ul>\n</li>\n</ul>\n<h3>Additional subclasses</h3>\n<ul>\n<li><code>.id</code>: Returns id part of dataSheet</li>\n<li><code>.range</code>: Returns range part of dataSheet</li>\n<li><code>.initInfo</code>: Returns dictionary of metadata about sheet (all tabs, not just the one defined in 2nd arg of dataSheet).</li>\n<li><code>.initTabs</code>: Returns a list of names of tabs in spreadsheet.</li>\n<li><code>.url</code>: Returns public url of sheet of form <a href=\"https://docs.google.com/spreadsheets/d/%7Bsheet_id%7D/edit#gid=%7Btab_id%7D\" rel=\"nofollow\">https://docs.google.com/spreadsheets/d/{sheet_id}/edit#gid={tab_id}</a></li>\n</ul>\n<h2>Notes</h2>\n<p>This is a work in progress. Comments/suggestions as well as forking very welcome.</p>\n\n          </div>"}, "last_serial": 6202939, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "faca4da3e29cbcfc8f9feef89e22ca66", "sha256": "04d24be0c976a6033422f4749fa2d31f5eae7a9bb7b36c95105dcfdf3690284a"}, "downloads": -1, "filename": "sheetFeeder-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "faca4da3e29cbcfc8f9feef89e22ca66", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 8782, "upload_time": "2019-11-13T18:46:23", "upload_time_iso_8601": "2019-11-13T18:46:23.855305Z", "url": "https://files.pythonhosted.org/packages/f9/c9/c91127ead7e1f10cc2465c05e9f98659ac17811258c3fe53e1280586f4c3/sheetFeeder-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "75c21d9e73ef98480a04989d8381e7f4", "sha256": "d6cf11993cc06b9e0c3e486f8b4708af39c120dec51641278c3eb8da79b97e80"}, "downloads": -1, "filename": "sheetFeeder-0.1.0.tar.gz", "has_sig": false, "md5_digest": "75c21d9e73ef98480a04989d8381e7f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 8892, "upload_time": "2019-11-13T18:46:25", "upload_time_iso_8601": "2019-11-13T18:46:25.857788Z", "url": "https://files.pythonhosted.org/packages/90/aa/31e1fcc0af37d5bf7cb9fdbda94179b177a19fa84203578f1d7d8fa0543b/sheetFeeder-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "571a07893017ff20c632274fde91e94a", "sha256": "098670ba7879cdf57ffa52ae26c34632be9a77694df420a2f9c7feb2eabea60c"}, "downloads": -1, "filename": "sheetFeeder-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "571a07893017ff20c632274fde91e94a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 8812, "upload_time": "2019-11-18T16:13:58", "upload_time_iso_8601": "2019-11-18T16:13:58.679784Z", "url": "https://files.pythonhosted.org/packages/97/4b/664e7ab0223aa4fcaafe19880c8603aa07e579e3d15e84d44042b13a66bf/sheetFeeder-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e1ff58e86e6b14a7700e2e3f260ae30", "sha256": "29d96d79db08cc766852e272004f4c3cef3b845ce5a52a1e71dcfff4eb1bfb5a"}, "downloads": -1, "filename": "sheetFeeder-0.1.1.tar.gz", "has_sig": false, "md5_digest": "4e1ff58e86e6b14a7700e2e3f260ae30", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 8846, "upload_time": "2019-11-18T16:14:01", "upload_time_iso_8601": "2019-11-18T16:14:01.534050Z", "url": "https://files.pythonhosted.org/packages/ea/c5/3dfe5fda910cc4b73d651fed37e283ecb3f61b785fe10c044142366fb994/sheetFeeder-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b3041486d4ab1b12b9d5da87aed9fc8c", "sha256": "2384811813d11fad1107fd9748e189e806861d171394b012e8c3a2ce2f882b21"}, "downloads": -1, "filename": "sheetFeeder-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b3041486d4ab1b12b9d5da87aed9fc8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 8806, "upload_time": "2019-11-19T19:56:29", "upload_time_iso_8601": "2019-11-19T19:56:29.142833Z", "url": "https://files.pythonhosted.org/packages/e9/8e/12034068b419ecebf6b5d58cd8e69f4d0df1c60be0ccd13e291abe5409b3/sheetFeeder-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b9afd445b6cc2bbf93b672e05f0b007", "sha256": "60c565969c26009ea411d80170d896357662e1d1533306db3779ec622df1d374"}, "downloads": -1, "filename": "sheetFeeder-0.1.2.tar.gz", "has_sig": false, "md5_digest": "0b9afd445b6cc2bbf93b672e05f0b007", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 8842, "upload_time": "2019-11-19T19:56:31", "upload_time_iso_8601": "2019-11-19T19:56:31.978787Z", "url": "https://files.pythonhosted.org/packages/e6/ca/d1fba69d05889f932d4caa4607f4be7aee455027028d6af91f44171550fd/sheetFeeder-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "d58bc3574e7fa2c8a78c0d2828053138", "sha256": "40e7a3d1242b0bc56b6195d6ce3237b31f0ea08e6bea767b1d2a22a0349ae4d4"}, "downloads": -1, "filename": "sheetFeeder-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d58bc3574e7fa2c8a78c0d2828053138", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 9808, "upload_time": "2019-11-26T17:56:40", "upload_time_iso_8601": "2019-11-26T17:56:40.312002Z", "url": "https://files.pythonhosted.org/packages/11/07/ea1bc28181879eef0f45a679cce1bd7437506dd8052bf4723d9c8ba3b0b5/sheetFeeder-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4c780b1781fc396a651c5861cecd4c2", "sha256": "30dbfd98b0ffbea18385deda96e4d2478a0a9de1ea8f92c783a9722375089f27"}, "downloads": -1, "filename": "sheetFeeder-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d4c780b1781fc396a651c5861cecd4c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 10122, "upload_time": "2019-11-26T17:56:43", "upload_time_iso_8601": "2019-11-26T17:56:43.601230Z", "url": "https://files.pythonhosted.org/packages/dc/7a/05bf29034e4ab9c69df33e1f9ea20a7384cc6183384e188416f7c69d39fa/sheetFeeder-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d58bc3574e7fa2c8a78c0d2828053138", "sha256": "40e7a3d1242b0bc56b6195d6ce3237b31f0ea08e6bea767b1d2a22a0349ae4d4"}, "downloads": -1, "filename": "sheetFeeder-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d58bc3574e7fa2c8a78c0d2828053138", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 9808, "upload_time": "2019-11-26T17:56:40", "upload_time_iso_8601": "2019-11-26T17:56:40.312002Z", "url": "https://files.pythonhosted.org/packages/11/07/ea1bc28181879eef0f45a679cce1bd7437506dd8052bf4723d9c8ba3b0b5/sheetFeeder-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d4c780b1781fc396a651c5861cecd4c2", "sha256": "30dbfd98b0ffbea18385deda96e4d2478a0a9de1ea8f92c783a9722375089f27"}, "downloads": -1, "filename": "sheetFeeder-0.1.3.tar.gz", "has_sig": false, "md5_digest": "d4c780b1781fc396a651c5861cecd4c2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 10122, "upload_time": "2019-11-26T17:56:43", "upload_time_iso_8601": "2019-11-26T17:56:43.601230Z", "url": "https://files.pythonhosted.org/packages/dc/7a/05bf29034e4ab9c69df33e1f9ea20a7384cc6183384e188416f7c69d39fa/sheetFeeder-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:29 2020"}