{"info": {"author": "Igor Rodrigues Sousa Silva", "author_email": "igor.rodrigues.ss10@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation"], "description": "# Vector IO - Geoprocessing utility for working with vector data.\n\n## Requirements\n- python >= 3.6\n- gdal >= 2.2\n- rar\n- unrar\n\n## Description\nThis project is a tool for working with vectorial data based on [GDAL](https://gdal.org/). This tool is an envelope about gdal and aims to work with different types of vector data quickly, intelligently, and simply. The vectorIO provide the support for (read and write) geojson, wkt and Shapefile, support for quickly switching between different spatial data types, and provides a exception handler for warnings from gdal.\n\n## Installation\n\n#### Docker\n\n- Complete enviroment on Ubuntu: [Dockerfile](https://github.com/igor-rodrigues-ss/vectorio/blob/master/Dockerfile)\n\nCreating a image and instantiate the container:\n\n```shell\n# access the directory where is the Dockerfile\ndocker image build -t vectorio-env:001 . # build the image\n# vectorio-env:001 - can be any name with the version of the your preference\ndocker container run -it vectorio-env:001 # instantiate a new container\n```\n\n#### Ubuntu 18.04\n\n- Rar\n\n```shell\napt-get install rar unrar\n```\n\n- Gdal\n\n[Installing gdal on ubuntu](https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html)\n\n- Gdal for python\n```shell\ngdalinfo --version\npip3 install gdal==<gdal_version>\n```\n\n## Features\n- [Read and write geojson](#read-and-write-geojson)\n- [Read and write WKT](#read-and-write-wkt)\n- [Read and write Shapefile](#read-and-write-wkt)\n- [Reprojecting a vector](#read-and-write-wkt)\n- [Quickly switching between geographic data](#quickly-switching-between-geographic-data)\n- [Raise exception for warnings from gdal](#raise-exception-for-warnings-from-gdal)\n- [Search UTM Zone from Geometry](#search-utm-zone-from-geometry)\n\n#### Read and Write Geojson\n\nWorking with geojson data and geojson file. By default, the datasource is created as WGS84.\n\n- Preparing the data\n\n```python\nfrom vectorio.vector import Geojson\ndata = '{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": {},\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-44.89013671875,-6.577303118123875],[-46.29638671874999,-7.460517719883772],[-44.4287109375,-7.318881730366743],[-44.89013671875,-6.577303118123875]]]}}]}'\ngjs = Geojson()\n```\n\n- Read all data\n\n```python\nds = gjs.datasource(data)\ngjs.collection(ds)\n```\n\n- Reading and iterating over each feature\n\n```python\nds = gjs.datasource(data)\nfor item in gjs.items(ds):\n    print(item)\n```\n\n- Creating a new geojson file\n\n```python\nds = gjs.datasource(data)\ngjs.write(ds, 'data.geojson')\n```\n\n- Reading from geojson file\n\n```python\nfrom vectorio.vector import GeoFile\ngf_gjs = GeoFile(gjs)\nds = gf_gjs.datasource('data.geojson')\ngf_gjs.collection(ds)\n```\n\n<br/>\n\n#### Read and write WKT\n\nWorking with wkt data and wkt file. Is supported geometry collection and single geometries. By default, the datasource is created as WGS84.\n\nThe wkt object has some parameters:\n\n```python\nWKT(as_geometry_collection=True, srid=4326)\n```\n- *as_geometry_collection*: return a geometry collection same when the data is a single geometry by method *collection*.\n- *srid*: Initial SRID for WKT.\n\n- Preparing the data\n\n```python\nfrom vectorio.vector import WKT\ndata = \"GEOMETRYCOLLECTION(POINT(-48.740641051554974 -9.249606262178954), LINESTRING(-50.278726989054974 -11.023166202413554,-48.608805114054974 -10.375450023701761))\"\nwkt = WKT()\n```\n\n- Read all data\n\n```python\nds = wkt.datasource(data)\nwkt.collection(ds)\n```\n\n- Reading and iterating over each geometry\n\n```python\nds = wkt.datasource(data)\nfor item in wkt.items(ds):\n    print(item)\n```\n\n- Creating a new wkt file\n\n```python\nds = wkt.datasource(data)\nwkt.write(ds, 'data.wkt')\n```\n\n- Reading from wkt file\n\n```python\nfrom vectorio.vector import GeoFile\ngf_wkt = GeoFile(wkt)\nds = gf_wkt.datasource('data.wkt')\ngf_wkt.collection(ds)\n```\n\n<br/>\n\n#### Read and write Shapefile\n\nWorking with read and write shapefile. Is supported shapefiles compressed as .zip and .rar. By default, the datasource is created as based on projection present on .prj file. *obs: read and write of the .rar files is available only for linux OS. Only the ShapefileAsRar class has this restriction. The other classes are available for any OS.*\n\n- Preparing the data\n\n```python\nfrom vectorio.vector import Shapefile\nshape = Shapefile()\n```\n\n- Read all data from .shp file\n\n```python\nds = shape.datasource('data.shp')\nshape.collection(ds)\n```\n\n- Reading and iterating over each feature from .shp file\n\n```python\nds = shape.datasource('data.shp')\nfor item in shape.items(ds):\n    print(item)\n```\n\n- Creating a new shapefile (Are be created the files .shp, .shx, .dbf, .prj)\n\n```python\nds = shape.datasource('data.shp')\nshape.write(ds, 'out.shp')\n# >>> out.shp\n```\n\n##### Read and write Shapefile compressed\n\nBy default the algorithm will search recusivly the files .shp, .shx, .dbf, .prj inside of the compressed file. The algorithm will search the first file of the each extension, case the compressed file contains 2 (or more) .shp files, or 2 (or more) .prj file, will be obtained the first .shp file and the first .prj file. \n\n- Processing from zip\n\n```python\nfrom vectorio.vector import Shapefile, ShapefileAsZip\nshape = ShapefileAsZip(Shapefile())\nds = shape.datasource('data.zip') # creating a datasource\nshape.collection(ds)  # read all data\n\nfor item in shape.items(ds):  # iterating over each item\n    print(item)\n\nshape.write(ds, 'out.zip') # Creating a shapefile compressed as .zip\n# >>> out.zip\n```\n\n- Processing from .rar (*available only for linux OS*)\n\n```python\nfrom vectorio.vector import Shapefile, ShapefileAsRar\nshape = ShapefileAsRar(Shapefile())\nds = shape.datasource('data.rar') # creating a datasource\nshape.collection(ds)  # read all data\n\nfor item in shape.items(ds):  # iterating over each item\n    print(item)\n\nshape.write(ds, 'out.rar') # Creating a shapefile compressed as .rar\n# >>> out.rar\n```\n\n<br/>\n\n#### Reprojecting a Vector\n\nThe spatial reprojection works with same geography type thats implements the interface IVector.\nIf the input srid (in_srid) are be ommited, will used the srid from geometry.\n\n- Reprojecting a shapefile\n\n```python\nfrom vectorio.vector import Shapefile, ShapefileAsZip, VectorReprojected\nshape = VectorReprojected(\n    ShapefileAsZip(Shapefile()), in_srid=31982, out_srid=4674\n)\nds = shape.datasource('data_utm22.zip')\n\nshape.collection(ds)  # read all data\n\nfor item in shape.items(ds):  # iterating by each feature\n    print(item)\n\nshape.write(ds, 'data_reprojected.zip')  # creating a new shapefile\n```\n\n- Reprojecting a WKT\n\nBy default the wkt is in WGS84 spatial reference.\n\n```python\nfrom vectorio.vector import WKT, VectorReprojected\nwkt = VectorReprojected(WKT(), out_srid=31982)\nds = wkt.datasource('POLYGON((-49.698036566343376 -9.951372897703846,-51.148231878843376 -11.591810720955946,-48.467567816343376 -11.763953408065282,-49.698036566343376 -9.951372897703846))')\n\nwkt.collection(ds)  # read all data\n\nfor item in wkt.items(ds):  # iterating by each geometry\n    print(item)\n\nwkt.write(ds, 'data-reprojected.wkt')  # creating a new wkt file\n```\n\n- Reprojecting a Geojson\n\nBy default the geojson is in WGS84 spatial reference.\n\n```python\nfrom vectorio.vector import Geojson, VectorReprojected\ngjs = VectorReprojected(Geojson(), out_srid=31982)\nds = gjs.datasource('{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": {},\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-45.992889404296875,-9.654907854199012],[-46.12884521484374,-9.72259300616733],[-45.96954345703125,-9.738835407948073],[-45.992889404296875,-9.654907854199012]]]}}]}')\n\ngjs.collection(ds)  # read all data\n\nfor item in gjs.items(ds):  # iterating by each feature\n    print(item)\n\ngjs.write(ds, 'data-reprojected.geojson')  # creating a new geojson file\n```\n\n<br/>\n\n#### Quickly Switching Between Geographic Data\n\nFor execution of the Quick switch must be used the *VectorComposite* present on package *vectorio.vector*.\n\n```python\nVectorComposite(input_vector_obj, ouput_vector_obj)\n```\n\n##### Quick switch from geojson to wkt \n\n- Preparing data\n\n```python\nfrom vectorio.vector import Geojson, WKT, VectorComposite\ndata = '{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": {},\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-44.89013671875,-6.577303118123875],[-46.29638671874999,-7.460517719883772],[-44.4287109375,-7.318881730366743],[-44.89013671875,-6.577303118123875]]]}}]}'\nvector = VectorComposite(Geojson(), WKT())\n```\n\n- Reading all geometry from geojson as wkt\n\n```python\nvector.collection(data)\n```\n\n- Iterating over all geometries as wkt\n\n```python\nfor geom_wkt in vector.items(data):\n    print(geom_wkt)\n```\n\n- Creating a wkt file\n\n```python\nvector.write(data, 'output.wkt')\n```\n\n##### Quick switch from wkt to shapefile as zip\n\n```python\nfrom vectorio.vector import Shapefile, ShapefileAsZip, WKT, VectorComposite\ndata = 'MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35), (30 20, 20 15, 20 25, 30 20)))'\nvector = VectorComposite(WKT(), ShapefileAsZip(Shapefile()))\n```\n\n- Reading all geometry from wkt\n\n```python\nvector.collection(data)\n```\n\n- Iterating over all geometries\n\n```python\nfor geom in vector.items(data):\n    print(geom)\n```\n\n- Creating a shapefile as zip\n\n```python\nvector.write(data, 'output.zip')\n```\n\n##### Search UTM Zone from Geometry\n\n- This functionality will search the UTM Zone from some geometry.\n\n```python\nfrom vectorio.vector import UTMZone, VectorReprojected, WKT\nds_wkt = VectorReprojected(WKT(), out_srid=4326).datasource('POLYGON((-73.79131452179155 -11.78691590735885,-27.12139264679149 -12.645910804419744,-47.46330883419978 10.894322081983276,-73.79131452179155 -11.78691590735885))')\nutm = UTMZone()\nutm.zone_from_biggest_geom(ds_wkt) == '22SW' # getting one UTM Zone\nutm.zones(ds_wkt) # getting all UTM Zones that intersect with the geometry\n```\n\n<br/>\n\n#### Raise Exception for Warnings From Gdal\n\nFor use the exception from gdal warnings should use the decorator\n*gdal_warning_as_exception* presents on *vectorio.gdal* package. This decorator will throw the error when the *IsValid()* method from *geometry()* method will be used.\n\n```python\nfrom vectorio.gdal import gdal_warning_as_exception\nfrom vectorio.vector import WKT\n\nself_intersect_polygon = 'POLYGON((-54.24438490181399 -5.466896872158672,-54.84863294868899 -5.882330540835073,-54.09057630806399 -5.8714019542356475,-54.83764662056399 -5.379399666352095,-54.24438490181399 -5.466896872158672))'\n\n@gdal_warning_as_exception\ndef possible_error():\n    wkt = WKT()\n    ds = wkt.datasource(self_intersect_polygon)\n    lyr = ds.GetLayer(0)\n    feat = lyr.GetFeature(0)\n    feat.geometry().IsValid()\n\npossible_error()\n# >>> GDALSelfIntersectionGeometry: Self-intersection at or near point -54.469636435829948 -5.6217621987992636\n```\n\n##### Possibles exceptions\n- *GDALSelfIntersectionGeometry*: Exception throwed when a polygon contains a self intersection.  \n- *GDALBadClosedPolygon*: Exception throwed when a polygon not correctly close.\n- *GDALUnknownException*: Exception throwed when occurs a unknown error.\n\n**Obs:** All the exceptions are available on package *vectorio.exceptions*\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/igor-rodrigues-ss/vectorio", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "vectorio", "package_url": "https://pypi.org/project/vectorio/", "platform": "", "project_url": "https://pypi.org/project/vectorio/", "project_urls": {"Homepage": "https://github.com/igor-rodrigues-ss/vectorio"}, "release_url": "https://pypi.org/project/vectorio/1.2.5/", "requires_dist": ["rarfile (==3.1)"], "requires_python": ">=3.6", "summary": "Geoprocessing utility for working with vector data", "version": "1.2.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Vector IO - Geoprocessing utility for working with vector data.</h1>\n<h2>Requirements</h2>\n<ul>\n<li>python &gt;= 3.6</li>\n<li>gdal &gt;= 2.2</li>\n<li>rar</li>\n<li>unrar</li>\n</ul>\n<h2>Description</h2>\n<p>This project is a tool for working with vectorial data based on <a href=\"https://gdal.org/\" rel=\"nofollow\">GDAL</a>. This tool is an envelope about gdal and aims to work with different types of vector data quickly, intelligently, and simply. The vectorIO provide the support for (read and write) geojson, wkt and Shapefile, support for quickly switching between different spatial data types, and provides a exception handler for warnings from gdal.</p>\n<h2>Installation</h2>\n<h4>Docker</h4>\n<ul>\n<li>Complete enviroment on Ubuntu: <a href=\"https://github.com/igor-rodrigues-ss/vectorio/blob/master/Dockerfile\" rel=\"nofollow\">Dockerfile</a></li>\n</ul>\n<p>Creating a image and instantiate the container:</p>\n<pre><span class=\"c1\"># access the directory where is the Dockerfile</span>\ndocker image build -t vectorio-env:001 . <span class=\"c1\"># build the image</span>\n<span class=\"c1\"># vectorio-env:001 - can be any name with the version of the your preference</span>\ndocker container run -it vectorio-env:001 <span class=\"c1\"># instantiate a new container</span>\n</pre>\n<h4>Ubuntu 18.04</h4>\n<ul>\n<li>Rar</li>\n</ul>\n<pre>apt-get install rar unrar\n</pre>\n<ul>\n<li>Gdal</li>\n</ul>\n<p><a href=\"https://mothergeo-py.readthedocs.io/en/latest/development/how-to/gdal-ubuntu-pkg.html\" rel=\"nofollow\">Installing gdal on ubuntu</a></p>\n<ul>\n<li>Gdal for python</li>\n</ul>\n<pre>gdalinfo --version\npip3 install <span class=\"nv\">gdal</span><span class=\"o\">==</span>&lt;gdal_version&gt;\n</pre>\n<h2>Features</h2>\n<ul>\n<li><a href=\"#read-and-write-geojson\" rel=\"nofollow\">Read and write geojson</a></li>\n<li><a href=\"#read-and-write-wkt\" rel=\"nofollow\">Read and write WKT</a></li>\n<li><a href=\"#read-and-write-wkt\" rel=\"nofollow\">Read and write Shapefile</a></li>\n<li><a href=\"#read-and-write-wkt\" rel=\"nofollow\">Reprojecting a vector</a></li>\n<li><a href=\"#quickly-switching-between-geographic-data\" rel=\"nofollow\">Quickly switching between geographic data</a></li>\n<li><a href=\"#raise-exception-for-warnings-from-gdal\" rel=\"nofollow\">Raise exception for warnings from gdal</a></li>\n<li><a href=\"#search-utm-zone-from-geometry\" rel=\"nofollow\">Search UTM Zone from Geometry</a></li>\n</ul>\n<h4>Read and Write Geojson</h4>\n<p>Working with geojson data and geojson file. By default, the datasource is created as WGS84.</p>\n<ul>\n<li>Preparing the data</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Geojson</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": </span><span class=\"si\">{}</span><span class=\"s1\">,\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-44.89013671875,-6.577303118123875],[-46.29638671874999,-7.460517719883772],[-44.4287109375,-7.318881730366743],[-44.89013671875,-6.577303118123875]]]}}]}'</span>\n<span class=\"n\">gjs</span> <span class=\"o\">=</span> <span class=\"n\">Geojson</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Read all data</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Reading and iterating over each feature</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Creating a new geojson file</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'data.geojson'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Reading from geojson file</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">GeoFile</span>\n<span class=\"n\">gf_gjs</span> <span class=\"o\">=</span> <span class=\"n\">GeoFile</span><span class=\"p\">(</span><span class=\"n\">gjs</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gf_gjs</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.geojson'</span><span class=\"p\">)</span>\n<span class=\"n\">gf_gjs</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4>Read and write WKT</h4>\n<p>Working with wkt data and wkt file. Is supported geometry collection and single geometries. By default, the datasource is created as WGS84.</p>\n<p>The wkt object has some parameters:</p>\n<pre><span class=\"n\">WKT</span><span class=\"p\">(</span><span class=\"n\">as_geometry_collection</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">srid</span><span class=\"o\">=</span><span class=\"mi\">4326</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>\n<p><em>as_geometry_collection</em>: return a geometry collection same when the data is a single geometry by method <em>collection</em>.</p>\n</li>\n<li>\n<p><em>srid</em>: Initial SRID for WKT.</p>\n</li>\n<li>\n<p>Preparing the data</p>\n</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">WKT</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s2\">\"GEOMETRYCOLLECTION(POINT(-48.740641051554974 -9.249606262178954), LINESTRING(-50.278726989054974 -11.023166202413554,-48.608805114054974 -10.375450023701761))\"</span>\n<span class=\"n\">wkt</span> <span class=\"o\">=</span> <span class=\"n\">WKT</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Read all data</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Reading and iterating over each geometry</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Creating a new wkt file</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'data.wkt'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Reading from wkt file</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">GeoFile</span>\n<span class=\"n\">gf_wkt</span> <span class=\"o\">=</span> <span class=\"n\">GeoFile</span><span class=\"p\">(</span><span class=\"n\">wkt</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gf_wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.wkt'</span><span class=\"p\">)</span>\n<span class=\"n\">gf_wkt</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<br>\n<h4>Read and write Shapefile</h4>\n<p>Working with read and write shapefile. Is supported shapefiles compressed as .zip and .rar. By default, the datasource is created as based on projection present on .prj file. <em>obs: read and write of the .rar files is available only for linux OS. Only the ShapefileAsRar class has this restriction. The other classes are available for any OS.</em></p>\n<ul>\n<li>Preparing the data</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Shapefile</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">Shapefile</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li>Read all data from .shp file</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.shp'</span><span class=\"p\">)</span>\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Reading and iterating over each feature from .shp file</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.shp'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Creating a new shapefile (Are be created the files .shp, .shx, .dbf, .prj)</li>\n</ul>\n<pre><span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.shp'</span><span class=\"p\">)</span>\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'out.shp'</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt;&gt; out.shp</span>\n</pre>\n<h5>Read and write Shapefile compressed</h5>\n<p>By default the algorithm will search recusivly the files .shp, .shx, .dbf, .prj inside of the compressed file. The algorithm will search the first file of the each extension, case the compressed file contains 2 (or more) .shp files, or 2 (or more) .prj file, will be obtained the first .shp file and the first .prj file.</p>\n<ul>\n<li>Processing from zip</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Shapefile</span><span class=\"p\">,</span> <span class=\"n\">ShapefileAsZip</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">ShapefileAsZip</span><span class=\"p\">(</span><span class=\"n\">Shapefile</span><span class=\"p\">())</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.zip'</span><span class=\"p\">)</span> <span class=\"c1\"># creating a datasource</span>\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>  <span class=\"c1\"># read all data</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>  <span class=\"c1\"># iterating over each item</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'out.zip'</span><span class=\"p\">)</span> <span class=\"c1\"># Creating a shapefile compressed as .zip</span>\n<span class=\"c1\"># &gt;&gt;&gt; out.zip</span>\n</pre>\n<ul>\n<li>Processing from .rar (<em>available only for linux OS</em>)</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Shapefile</span><span class=\"p\">,</span> <span class=\"n\">ShapefileAsRar</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">ShapefileAsRar</span><span class=\"p\">(</span><span class=\"n\">Shapefile</span><span class=\"p\">())</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data.rar'</span><span class=\"p\">)</span> <span class=\"c1\"># creating a datasource</span>\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>  <span class=\"c1\"># read all data</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>  <span class=\"c1\"># iterating over each item</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'out.rar'</span><span class=\"p\">)</span> <span class=\"c1\"># Creating a shapefile compressed as .rar</span>\n<span class=\"c1\"># &gt;&gt;&gt; out.rar</span>\n</pre>\n<br>\n<h4>Reprojecting a Vector</h4>\n<p>The spatial reprojection works with same geography type thats implements the interface IVector.\nIf the input srid (in_srid) are be ommited, will used the srid from geometry.</p>\n<ul>\n<li>Reprojecting a shapefile</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Shapefile</span><span class=\"p\">,</span> <span class=\"n\">ShapefileAsZip</span><span class=\"p\">,</span> <span class=\"n\">VectorReprojected</span>\n<span class=\"n\">shape</span> <span class=\"o\">=</span> <span class=\"n\">VectorReprojected</span><span class=\"p\">(</span>\n    <span class=\"n\">ShapefileAsZip</span><span class=\"p\">(</span><span class=\"n\">Shapefile</span><span class=\"p\">()),</span> <span class=\"n\">in_srid</span><span class=\"o\">=</span><span class=\"mi\">31982</span><span class=\"p\">,</span> <span class=\"n\">out_srid</span><span class=\"o\">=</span><span class=\"mi\">4674</span>\n<span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'data_utm22.zip'</span><span class=\"p\">)</span>\n\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>  <span class=\"c1\"># read all data</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>  <span class=\"c1\"># iterating by each feature</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">shape</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'data_reprojected.zip'</span><span class=\"p\">)</span>  <span class=\"c1\"># creating a new shapefile</span>\n</pre>\n<ul>\n<li>Reprojecting a WKT</li>\n</ul>\n<p>By default the wkt is in WGS84 spatial reference.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">WKT</span><span class=\"p\">,</span> <span class=\"n\">VectorReprojected</span>\n<span class=\"n\">wkt</span> <span class=\"o\">=</span> <span class=\"n\">VectorReprojected</span><span class=\"p\">(</span><span class=\"n\">WKT</span><span class=\"p\">(),</span> <span class=\"n\">out_srid</span><span class=\"o\">=</span><span class=\"mi\">31982</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'POLYGON((-49.698036566343376 -9.951372897703846,-51.148231878843376 -11.591810720955946,-48.467567816343376 -11.763953408065282,-49.698036566343376 -9.951372897703846))'</span><span class=\"p\">)</span>\n\n<span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>  <span class=\"c1\"># read all data</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>  <span class=\"c1\"># iterating by each geometry</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'data-reprojected.wkt'</span><span class=\"p\">)</span>  <span class=\"c1\"># creating a new wkt file</span>\n</pre>\n<ul>\n<li>Reprojecting a Geojson</li>\n</ul>\n<p>By default the geojson is in WGS84 spatial reference.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Geojson</span><span class=\"p\">,</span> <span class=\"n\">VectorReprojected</span>\n<span class=\"n\">gjs</span> <span class=\"o\">=</span> <span class=\"n\">VectorReprojected</span><span class=\"p\">(</span><span class=\"n\">Geojson</span><span class=\"p\">(),</span> <span class=\"n\">out_srid</span><span class=\"o\">=</span><span class=\"mi\">31982</span><span class=\"p\">)</span>\n<span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": </span><span class=\"si\">{}</span><span class=\"s1\">,\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-45.992889404296875,-9.654907854199012],[-46.12884521484374,-9.72259300616733],[-45.96954345703125,-9.738835407948073],[-45.992889404296875,-9.654907854199012]]]}}]}'</span><span class=\"p\">)</span>\n\n<span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">)</span>  <span class=\"c1\"># read all data</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">):</span>  <span class=\"c1\"># iterating by each feature</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span>\n\n<span class=\"n\">gjs</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">ds</span><span class=\"p\">,</span> <span class=\"s1\">'data-reprojected.geojson'</span><span class=\"p\">)</span>  <span class=\"c1\"># creating a new geojson file</span>\n</pre>\n<br>\n<h4>Quickly Switching Between Geographic Data</h4>\n<p>For execution of the Quick switch must be used the <em>VectorComposite</em> present on package <em>vectorio.vector</em>.</p>\n<pre><span class=\"n\">VectorComposite</span><span class=\"p\">(</span><span class=\"n\">input_vector_obj</span><span class=\"p\">,</span> <span class=\"n\">ouput_vector_obj</span><span class=\"p\">)</span>\n</pre>\n<h5>Quick switch from geojson to wkt</h5>\n<ul>\n<li>Preparing data</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Geojson</span><span class=\"p\">,</span> <span class=\"n\">WKT</span><span class=\"p\">,</span> <span class=\"n\">VectorComposite</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"type\": \"FeatureCollection\",\"features\": [{\"type\": \"Feature\",\"properties\": </span><span class=\"si\">{}</span><span class=\"s1\">,\"geometry\": {\"type\": \"Polygon\",\"coordinates\": [[[-44.89013671875,-6.577303118123875],[-46.29638671874999,-7.460517719883772],[-44.4287109375,-7.318881730366743],[-44.89013671875,-6.577303118123875]]]}}]}'</span>\n<span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"n\">VectorComposite</span><span class=\"p\">(</span><span class=\"n\">Geojson</span><span class=\"p\">(),</span> <span class=\"n\">WKT</span><span class=\"p\">())</span>\n</pre>\n<ul>\n<li>Reading all geometry from geojson as wkt</li>\n</ul>\n<pre><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Iterating over all geometries as wkt</li>\n</ul>\n<pre><span class=\"k\">for</span> <span class=\"n\">geom_wkt</span> <span class=\"ow\">in</span> <span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">geom_wkt</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Creating a wkt file</li>\n</ul>\n<pre><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'output.wkt'</span><span class=\"p\">)</span>\n</pre>\n<h5>Quick switch from wkt to shapefile as zip</h5>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">Shapefile</span><span class=\"p\">,</span> <span class=\"n\">ShapefileAsZip</span><span class=\"p\">,</span> <span class=\"n\">WKT</span><span class=\"p\">,</span> <span class=\"n\">VectorComposite</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'MULTIPOLYGON (((40 40, 20 45, 45 30, 40 40)), ((20 35, 10 30, 10 10, 30 5, 45 20, 20 35), (30 20, 20 15, 20 25, 30 20)))'</span>\n<span class=\"n\">vector</span> <span class=\"o\">=</span> <span class=\"n\">VectorComposite</span><span class=\"p\">(</span><span class=\"n\">WKT</span><span class=\"p\">(),</span> <span class=\"n\">ShapefileAsZip</span><span class=\"p\">(</span><span class=\"n\">Shapefile</span><span class=\"p\">()))</span>\n</pre>\n<ul>\n<li>Reading all geometry from wkt</li>\n</ul>\n<pre><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">collection</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Iterating over all geometries</li>\n</ul>\n<pre><span class=\"k\">for</span> <span class=\"n\">geom</span> <span class=\"ow\">in</span> <span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">geom</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Creating a shapefile as zip</li>\n</ul>\n<pre><span class=\"n\">vector</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"s1\">'output.zip'</span><span class=\"p\">)</span>\n</pre>\n<h5>Search UTM Zone from Geometry</h5>\n<ul>\n<li>This functionality will search the UTM Zone from some geometry.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">UTMZone</span><span class=\"p\">,</span> <span class=\"n\">VectorReprojected</span><span class=\"p\">,</span> <span class=\"n\">WKT</span>\n<span class=\"n\">ds_wkt</span> <span class=\"o\">=</span> <span class=\"n\">VectorReprojected</span><span class=\"p\">(</span><span class=\"n\">WKT</span><span class=\"p\">(),</span> <span class=\"n\">out_srid</span><span class=\"o\">=</span><span class=\"mi\">4326</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"s1\">'POLYGON((-73.79131452179155 -11.78691590735885,-27.12139264679149 -12.645910804419744,-47.46330883419978 10.894322081983276,-73.79131452179155 -11.78691590735885))'</span><span class=\"p\">)</span>\n<span class=\"n\">utm</span> <span class=\"o\">=</span> <span class=\"n\">UTMZone</span><span class=\"p\">()</span>\n<span class=\"n\">utm</span><span class=\"o\">.</span><span class=\"n\">zone_from_biggest_geom</span><span class=\"p\">(</span><span class=\"n\">ds_wkt</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'22SW'</span> <span class=\"c1\"># getting one UTM Zone</span>\n<span class=\"n\">utm</span><span class=\"o\">.</span><span class=\"n\">zones</span><span class=\"p\">(</span><span class=\"n\">ds_wkt</span><span class=\"p\">)</span> <span class=\"c1\"># getting all UTM Zones that intersect with the geometry</span>\n</pre>\n<br>\n<h4>Raise Exception for Warnings From Gdal</h4>\n<p>For use the exception from gdal warnings should use the decorator\n<em>gdal_warning_as_exception</em> presents on <em>vectorio.gdal</em> package. This decorator will throw the error when the <em>IsValid()</em> method from <em>geometry()</em> method will be used.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">vectorio.gdal</span> <span class=\"kn\">import</span> <span class=\"n\">gdal_warning_as_exception</span>\n<span class=\"kn\">from</span> <span class=\"nn\">vectorio.vector</span> <span class=\"kn\">import</span> <span class=\"n\">WKT</span>\n\n<span class=\"n\">self_intersect_polygon</span> <span class=\"o\">=</span> <span class=\"s1\">'POLYGON((-54.24438490181399 -5.466896872158672,-54.84863294868899 -5.882330540835073,-54.09057630806399 -5.8714019542356475,-54.83764662056399 -5.379399666352095,-54.24438490181399 -5.466896872158672))'</span>\n\n<span class=\"nd\">@gdal_warning_as_exception</span>\n<span class=\"k\">def</span> <span class=\"nf\">possible_error</span><span class=\"p\">():</span>\n    <span class=\"n\">wkt</span> <span class=\"o\">=</span> <span class=\"n\">WKT</span><span class=\"p\">()</span>\n    <span class=\"n\">ds</span> <span class=\"o\">=</span> <span class=\"n\">wkt</span><span class=\"o\">.</span><span class=\"n\">datasource</span><span class=\"p\">(</span><span class=\"n\">self_intersect_polygon</span><span class=\"p\">)</span>\n    <span class=\"n\">lyr</span> <span class=\"o\">=</span> <span class=\"n\">ds</span><span class=\"o\">.</span><span class=\"n\">GetLayer</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">feat</span> <span class=\"o\">=</span> <span class=\"n\">lyr</span><span class=\"o\">.</span><span class=\"n\">GetFeature</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">feat</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">IsValid</span><span class=\"p\">()</span>\n\n<span class=\"n\">possible_error</span><span class=\"p\">()</span>\n<span class=\"c1\"># &gt;&gt;&gt; GDALSelfIntersectionGeometry: Self-intersection at or near point -54.469636435829948 -5.6217621987992636</span>\n</pre>\n<h5>Possibles exceptions</h5>\n<ul>\n<li><em>GDALSelfIntersectionGeometry</em>: Exception throwed when a polygon contains a self intersection.</li>\n<li><em>GDALBadClosedPolygon</em>: Exception throwed when a polygon not correctly close.</li>\n<li><em>GDALUnknownException</em>: Exception throwed when occurs a unknown error.</li>\n</ul>\n<p><strong>Obs:</strong> All the exceptions are available on package <em>vectorio.exceptions</em></p>\n\n          </div>"}, "last_serial": 6962554, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "018a0261decd43433b8ad5ee3e99cb5f", "sha256": "d38b850d186d298fe439435a1563d1ef386fd75fad80aa5ea15f5d1de68140e1"}, "downloads": -1, "filename": "vectorio-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "018a0261decd43433b8ad5ee3e99cb5f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25345, "upload_time": "2019-12-20T15:15:54", "upload_time_iso_8601": "2019-12-20T15:15:54.024844Z", "url": "https://files.pythonhosted.org/packages/b5/d6/a6bbc0b4f4b3bf806639a093bf52c68c7536936b4021c5ca7bb13817e00a/vectorio-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe8b4f7652392a87530f2043010751ad", "sha256": "a5834fb3c9b4aeb37c761264c4fe48132abac659f77bc7af68d3f60331c5f02d"}, "downloads": -1, "filename": "vectorio-1.0.0.tar.gz", "has_sig": false, "md5_digest": "fe8b4f7652392a87530f2043010751ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9912, "upload_time": "2019-12-20T15:15:56", "upload_time_iso_8601": "2019-12-20T15:15:56.598825Z", "url": "https://files.pythonhosted.org/packages/ff/6d/d5b71e62612191b6893e76a69802b0ac693149bea421f500457b1ad09c35/vectorio-1.0.0.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a085f7466cc1cb3c1333cc80c29489dc", "sha256": "914b32f3f8d9206c438981b93ddb77257eb3000e074f30d9339749e226726e05"}, "downloads": -1, "filename": "vectorio-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a085f7466cc1cb3c1333cc80c29489dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25537, "upload_time": "2019-12-20T20:21:15", "upload_time_iso_8601": "2019-12-20T20:21:15.659967Z", "url": "https://files.pythonhosted.org/packages/cd/fb/542ea8081da25f2c1df3e0611d32e1063e358b9d99963c3e8eb8ff0eb116/vectorio-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a46014723b71e7718912ce1161dd8ba2", "sha256": "c3fa98bb191e1009321d49e0c2fd435e741a484d843750fc3ca2fecdeba2ebf5"}, "downloads": -1, "filename": "vectorio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a46014723b71e7718912ce1161dd8ba2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10310, "upload_time": "2019-12-20T20:21:17", "upload_time_iso_8601": "2019-12-20T20:21:17.285948Z", "url": "https://files.pythonhosted.org/packages/3c/d4/cef67690bd989471db80d6366c069086a94ed87973ac23a975d57ec38610/vectorio-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "24f2436d20e90a99b2bcb78d445542ff", "sha256": "ef35dfbff83b8eb9a84fc934aa152ec7f03ceee212faafffbf7603a23932736d"}, "downloads": -1, "filename": "vectorio-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "24f2436d20e90a99b2bcb78d445542ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 29969, "upload_time": "2020-01-02T18:25:37", "upload_time_iso_8601": "2020-01-02T18:25:37.396516Z", "url": "https://files.pythonhosted.org/packages/b7/b6/2968bd0a0fccdbb59279576aee92ba7484fab4f924c9ee694f90cec08dba/vectorio-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b599e41780d674748c3e6ae5a56d87f", "sha256": "30b8cd2b2e3277dbc7f369d8aeb207e153fe483f5824d94ed24be2120b0ce82d"}, "downloads": -1, "filename": "vectorio-1.1.0.tar.gz", "has_sig": false, "md5_digest": "2b599e41780d674748c3e6ae5a56d87f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 15982, "upload_time": "2020-01-02T18:25:39", "upload_time_iso_8601": "2020-01-02T18:25:39.195785Z", "url": "https://files.pythonhosted.org/packages/5f/ea/462a1c4729c25882635048da851f4d8761109c74def1ed6123945fdedd44/vectorio-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "0429299be6cfc0bb1c4f059cbbbab476", "sha256": "c40ba2c0a8132d55c76e54e34f595d52c2ada74d3143303ec73ad31d6f39ecc9"}, "downloads": -1, "filename": "vectorio-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0429299be6cfc0bb1c4f059cbbbab476", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 29982, "upload_time": "2020-01-02T18:29:26", "upload_time_iso_8601": "2020-01-02T18:29:26.887515Z", "url": "https://files.pythonhosted.org/packages/a1/dc/4bc5fb169effd38df23c4b3eb2c44084d3feaa382e0ccb32e979e4fa5fb6/vectorio-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f28f0cd39b82057e75d548253b3576e3", "sha256": "f515bf027ca4db8f52f9f7467b6b7c827f270266773da1e7636798d6cea9dcde"}, "downloads": -1, "filename": "vectorio-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f28f0cd39b82057e75d548253b3576e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 16004, "upload_time": "2020-01-02T18:29:28", "upload_time_iso_8601": "2020-01-02T18:29:28.414404Z", "url": "https://files.pythonhosted.org/packages/89/8a/a3b3b9fc0c32f192eb8199a197c684e9bb32eb7755a343d2ea4fc8cc6c76/vectorio-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "847e877ec89fb77c05837b38fb249ef5", "sha256": "916b7367d71a450084c35cc93deed90bd33c0caa68db8d4eb32779115cd984ef"}, "downloads": -1, "filename": "vectorio-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "847e877ec89fb77c05837b38fb249ef5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29982, "upload_time": "2020-01-03T12:41:52", "upload_time_iso_8601": "2020-01-03T12:41:52.498285Z", "url": "https://files.pythonhosted.org/packages/d0/ce/33215c5f98228e3486b945f7a84c4fcd75581033150634bb3500de991347/vectorio-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b9bdffbe3e43f2d6ff1ff4e63fafc470", "sha256": "e97807cbbb98371a1fa4a50e2efe64207e7496d3339a01611c27adb850ce9417"}, "downloads": -1, "filename": "vectorio-1.1.2.tar.gz", "has_sig": false, "md5_digest": "b9bdffbe3e43f2d6ff1ff4e63fafc470", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16012, "upload_time": "2020-01-03T12:41:54", "upload_time_iso_8601": "2020-01-03T12:41:54.439375Z", "url": "https://files.pythonhosted.org/packages/75/24/e5193de50be37f52bd45f8f32804043c06aeaf3a16ed84807f90ffc49ef8/vectorio-1.1.2.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "d9fd3ca4fae8b4305a172556e5a1b9ac", "sha256": "a79f1c90ec50ea7a266b431e2a3e3e33d7d47cd07570a437c1fc4233d6a8c3bf"}, "downloads": -1, "filename": "vectorio-1.2.0-py3.7.egg", "has_sig": false, "md5_digest": "d9fd3ca4fae8b4305a172556e5a1b9ac", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 155958, "upload_time": "2020-01-22T12:52:31", "upload_time_iso_8601": "2020-01-22T12:52:31.569528Z", "url": "https://files.pythonhosted.org/packages/94/30/43d4c4a2f7b6ec480003ebc07e3556760cdd0b0d1dd6ff53a9599a829d7e/vectorio-1.2.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f23a72b02409df0cd2fa403647206c4", "sha256": "28dfc79372d3bbce74b071bcff1276777cfa07b20542204919b7c773e0ead00e"}, "downloads": -1, "filename": "vectorio-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f23a72b02409df0cd2fa403647206c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 121915, "upload_time": "2020-01-22T12:52:29", "upload_time_iso_8601": "2020-01-22T12:52:29.602399Z", "url": "https://files.pythonhosted.org/packages/0f/62/c94b929226ad0b49a9524229349ae478b250e5c652e0f6e07ac7c64f6a39/vectorio-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abfc41ea3de8173bae3f596e95922a05", "sha256": "c3d789b316e55cbb066df24c0c81de7427b1f397f73c5bef989acfe23f5b0490"}, "downloads": -1, "filename": "vectorio-1.2.0.tar.gz", "has_sig": false, "md5_digest": "abfc41ea3de8173bae3f596e95922a05", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 114342, "upload_time": "2020-01-22T12:52:34", "upload_time_iso_8601": "2020-01-22T12:52:34.012610Z", "url": "https://files.pythonhosted.org/packages/32/e9/eb214d412d4c8a3b988f3143c72a93a65e403d9a29cddf1381d6e05ebcd3/vectorio-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "40bd9087b68a25682afae757061512de", "sha256": "79261daf5a7f296a7f67ddfb6de13330324bfb304ffa5a9f62673506bf77d291"}, "downloads": -1, "filename": "vectorio-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "40bd9087b68a25682afae757061512de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 121971, "upload_time": "2020-01-22T17:10:06", "upload_time_iso_8601": "2020-01-22T17:10:06.053903Z", "url": "https://files.pythonhosted.org/packages/2d/fe/7a0518e5533a96f474fd3a71324daca4f863ddcfad77867f17eea5088bdb/vectorio-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d305208105f14ce97d0cb21c4489370", "sha256": "e97618a460d2472165d5d267f8574ed0ad07201002dc7b9d2779f8de11a90db0"}, "downloads": -1, "filename": "vectorio-1.2.1.tar.gz", "has_sig": false, "md5_digest": "6d305208105f14ce97d0cb21c4489370", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 114473, "upload_time": "2020-01-22T17:10:08", "upload_time_iso_8601": "2020-01-22T17:10:08.287113Z", "url": "https://files.pythonhosted.org/packages/48/4d/013625649083833548a027624f416a12687f4ba7fd99a184cd376b80b20e/vectorio-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "778fd8551f8c5186363b1a5fb12d8583", "sha256": "93cd699373d45ab087cb7b13893db6e3eab69558b16d925c9e672ebb71f8f009"}, "downloads": -1, "filename": "vectorio-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "778fd8551f8c5186363b1a5fb12d8583", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 121878, "upload_time": "2020-01-22T19:51:51", "upload_time_iso_8601": "2020-01-22T19:51:51.659559Z", "url": "https://files.pythonhosted.org/packages/f5/e8/84a4890bfe3dc1d4fa90c68a643c5d74369e06d3489bf06b7e7da9432305/vectorio-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c47b48a8024f9543c539325b30be662", "sha256": "b96ccd68c37d77c74683661088d60b646451524845256f0666befe30404145bb"}, "downloads": -1, "filename": "vectorio-1.2.2.tar.gz", "has_sig": false, "md5_digest": "9c47b48a8024f9543c539325b30be662", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 114301, "upload_time": "2020-01-22T19:51:54", "upload_time_iso_8601": "2020-01-22T19:51:54.179505Z", "url": "https://files.pythonhosted.org/packages/60/af/969485ade6922251e4557f8686d5592d7afd49e3d15673c861a4e04c43f7/vectorio-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "f0e2571bb85720a18c70cb3d22e6df59", "sha256": "efe8aeb02ca0838b03f7660d62e97149a1ddbe927563f6670e46aa2efd94082e"}, "downloads": -1, "filename": "vectorio-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f0e2571bb85720a18c70cb3d22e6df59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 121821, "upload_time": "2020-02-11T16:29:39", "upload_time_iso_8601": "2020-02-11T16:29:39.432683Z", "url": "https://files.pythonhosted.org/packages/0d/af/2c50a7b63a61597100ddb865d4b17d70805cfaf7e144045fb92427ebb75a/vectorio-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a24fdf3cd08cdf6c3583df6343853523", "sha256": "5b5b97f951916ba69656a3b17876d51d990ffbb19c58889931961b67d7955429"}, "downloads": -1, "filename": "vectorio-1.2.3.tar.gz", "has_sig": false, "md5_digest": "a24fdf3cd08cdf6c3583df6343853523", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 114249, "upload_time": "2020-02-11T16:29:41", "upload_time_iso_8601": "2020-02-11T16:29:41.473251Z", "url": "https://files.pythonhosted.org/packages/1c/c0/d2de4f852f35018b49fdb371059bdff0760d731a43858cda8d607c67464f/vectorio-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "7b86453d39ee4dae6d273f37ef0fbb8d", "sha256": "98157e91b8cfc24d0d9e2942491c2b096a93e05a72c6bd3ef1aaf7c5ee943e9b"}, "downloads": -1, "filename": "vectorio-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7b86453d39ee4dae6d273f37ef0fbb8d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 122838, "upload_time": "2020-03-10T14:36:25", "upload_time_iso_8601": "2020-03-10T14:36:25.415750Z", "url": "https://files.pythonhosted.org/packages/5e/5c/81e6ede656800eecbc579d9abf764976e12ea12f2c38e35037bbbfb0abb8/vectorio-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e91d16217aef544214991b6a0ca2a21c", "sha256": "9830bd0b214ed73aff1a170a65c04c6fa5b8b9f62c4577ca5dfc2b535b6882af"}, "downloads": -1, "filename": "vectorio-1.2.4.tar.gz", "has_sig": false, "md5_digest": "e91d16217aef544214991b6a0ca2a21c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 114885, "upload_time": "2020-03-10T14:36:27", "upload_time_iso_8601": "2020-03-10T14:36:27.890776Z", "url": "https://files.pythonhosted.org/packages/17/df/51b5a3cb1a07c57c6a8d34bfc85dd82c01ec4704e35804cf2d8557e12e29/vectorio-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "b6be75db67b738c4359f3e0c9be47ce2", "sha256": "f2ff69d68771c9f2bdf529af7a4135347eaba1bc9b917dd8172cedfed9666122"}, "downloads": -1, "filename": "vectorio-1.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b6be75db67b738c4359f3e0c9be47ce2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 125747, "upload_time": "2020-04-06T15:35:52", "upload_time_iso_8601": "2020-04-06T15:35:52.879830Z", "url": "https://files.pythonhosted.org/packages/05/38/5daba107e4ec78ca50393e8c819d837500ddcab8a0ef7c74c1771f4136a8/vectorio-1.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c4c9bd508689df689194757a298cab7", "sha256": "2b22e4533471d725aaec1b3ea968ec272656e2b0075033f2f46387ffede1d14b"}, "downloads": -1, "filename": "vectorio-1.2.5.tar.gz", "has_sig": false, "md5_digest": "6c4c9bd508689df689194757a298cab7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 112058, "upload_time": "2020-04-06T15:35:55", "upload_time_iso_8601": "2020-04-06T15:35:55.794679Z", "url": "https://files.pythonhosted.org/packages/dd/76/003de5c895a996e5d14b8b97160575aef191539b26e5f851e65b1a087600/vectorio-1.2.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6be75db67b738c4359f3e0c9be47ce2", "sha256": "f2ff69d68771c9f2bdf529af7a4135347eaba1bc9b917dd8172cedfed9666122"}, "downloads": -1, "filename": "vectorio-1.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b6be75db67b738c4359f3e0c9be47ce2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 125747, "upload_time": "2020-04-06T15:35:52", "upload_time_iso_8601": "2020-04-06T15:35:52.879830Z", "url": "https://files.pythonhosted.org/packages/05/38/5daba107e4ec78ca50393e8c819d837500ddcab8a0ef7c74c1771f4136a8/vectorio-1.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c4c9bd508689df689194757a298cab7", "sha256": "2b22e4533471d725aaec1b3ea968ec272656e2b0075033f2f46387ffede1d14b"}, "downloads": -1, "filename": "vectorio-1.2.5.tar.gz", "has_sig": false, "md5_digest": "6c4c9bd508689df689194757a298cab7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 112058, "upload_time": "2020-04-06T15:35:55", "upload_time_iso_8601": "2020-04-06T15:35:55.794679Z", "url": "https://files.pythonhosted.org/packages/dd/76/003de5c895a996e5d14b8b97160575aef191539b26e5f851e65b1a087600/vectorio-1.2.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:11 2020"}