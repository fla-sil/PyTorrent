{"info": {"author": "Lukasz Pawel Kozlowski", "author_email": "lukasz.kozlowski.lpk@gmail.com", "bugtrack_url": null, "classifiers": ["License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "\n**IPC** `is a program (available also as web service at isoelectric.org) for the accurate estimation of protein and peptide\nisoelectric point (pI) using  Henderson-Hasselbach equation and pKa sets.`\n\nIt allows you to compute theoretical pI using 16 pKa sets (for individual references see http://isoelectric.org/theory.html)\n\n**IPC** introduce also two new computationally optimized pKa sets. They were benchmarked against 14 different pKa sets and \n3 pI prediction programs on two protein databases (2,324 proteins) and three peptide datasets (16,882 peptides).\n\nProgram is written in Python programing language and thus it should be able to run it on any operating system.\n\n**AUTHOR**:         Lukasz Pawel Kozlowski, lukaszkozlowski.lpk@gmail.com\n**COPYRIGHTS**:     Lukasz Pawel Kozlowski\n**LICENCE**:        PUBLIC DOMAIN http://isoelectric.org/license.txt\n\n## How to cite:\nKozlowski LP (2016) IPC - Isoelectric Point Calculator. Biology Direct 11:55. doi: http://dx.doi.org/10.1186/s13062-016-0159-9\n\n## INSTALLATION:\nwget http://isoelectric.org/ipc.zip;\nunzip ipc.zip; # sudo apt-get install unzip (if not present)\ncd ipc;\nsudo python setup.py install\n\n## USAGE:\npython ipc.py <fasta_file> <pKa set> <output_file> <plot_file>\n\nipc <fasta_file> <pKa set> <output_file> <plot_file> (if installed into system using setup.py)\n``` \n<fasta_file>    protein sequence(s) in fasta format, see ./examples\n<pKa set>       one from pKa sets which will be used to calculate pI, default 'ALL' (report pI using all models)\n                valid options are:\n                        'ALL', 'IPC_protein', 'IPC_peptide',\n                        'Bjellqvist', 'Dawson', 'Grimsley', \n                        'Toseland', 'EMBOSS', 'Kozlowski', \n                        'DTASelect', 'Wikipedia', 'Rodwell', \n                        'Patrickios', 'Sillero', 'Thurlkill', \n                        'Solomon', 'Nozaki_Tanford', \n                        'Lehninger', 'ProMoST'\n\n<output_file>   output of the program with pI predicted using selected model(s), default name <fasta_file>.pI.txt\n<plot_file>     virtual 2D-PAGE scatter plot (molecular weight vs. isoelectric point) represented as heat map, \n                this option is available only if numpy and matplotlib and scipy are installed  \n```              \nE.g. ipc ./examples/NC_010473_Ecoli.faa ALL out.txt out.png\n\nThe result should be following files located in the <fasta_file> directory:\n- NC_010473_Ecoli.faa.pI.txt with predictions\n- NC_010473_Ecoli.faa.png with virtual 2D-PAGE scatter plot\n\nPlease note that this exemplary command will predict isoelectric point using all pKa sets for the whole E.coli proteome\n(4218 proteins). Nevertheless, it should be done in ~5 seconds.\n\nPlease, follow the order of input files and parameters. Intentionally, IPC does not use optparse or argparse as those \npackages are different for different version of python. And their names also may change in future.\n\n\nAdditionally, IPC can be used interactively in python shell:\n``` \nfrom isoelectric import ipc\nhelp(ipc)\n``` \n---\nHelp on module ipc:\n\nNAME\n    ipc\n\nFILE\n    /home/lukaskoz/IPC_standalone_version/ipc.py\n\n### FUNCTIONS\n    calculate_molecular_weight(seq)\n        molecular weight\n\n    check_additional_libraries()\n        check libraries for plotting\n\n    error_information()\n        information how to run IPC script\n\n    fasta_reader(fasta_string)\n        reads fasta file and return table [ [head1, seq1], [head2, seq2], ...]\n        it is endure for all  errors like: multiple line for sequence, white spaces etc.\n\n    ipc_author_information()\n        add information about IPC\n\n    make_heat_map(mw_tab, pI_tab, fasta_file, input_pKa_set)\n        virtual 2D-PAGE scatter plot, heat map\n\n    predict_isoelectric_point(sequence, input_pKa_set)\n        accurate estimation of protein and peptide isoelectric point (pI) \n        using Henderson-Hasselbach equation and pKa sets\n\n    predict_isoelectric_point_ProMoST(seq)\n        Calculate isoelectric point using ProMoST model\n\n### DATA\n    __author__ = 'Lukasz Pawel Kozlowski'\n    __copyrights__ = 'Lukasz Pawel Kozlowski'\n    __email__ = 'lukaszkozlowski.lpk@gmail.com'\n    __licence__ = 'http://isoelectric.org/licence.txt'\n    __webserver__ = 'http://isoelectric.org'\n    aaDict = {'Ala': 'A', 'Arg': 'R', 'Asn': 'N', 'Asp': 'D', 'Asx': 'B', ...\n    acidic = ['D', 'E', 'C', 'Y']\n    basic = ['K', 'R', 'H']\n    promost = {'C': [8.0, 8.28, 9.0], 'D': [3.57, 4.07, 4.57], 'E': [4.15,...\n    promost_mid = {'A': [7.58, 3.75], 'B': [7.46, 3.57], 'C': [8.12, 3.1],...\n    sample_protein_sequence = 'MKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRG...\n    scales = {'Bjellqvist': {'C': 9.0, 'Cterm': 3.55, 'D': 4.05, 'E': 4.45...\n\n### AUTHOR Lukasz Pawel Kozlowski\n\n``` \nIn [1]: import ipc\nIn [2]: ipc.scales.keys()\nOut[2]: \n['DTASelect',\n 'IPC_protein',\n 'Lehninger',\n 'Bjellqvist',\n 'Toseland',\n 'Wikipedia',\n 'Grimsley',\n 'Patrickios',\n 'Rodwell',\n 'Solomon',\n 'IPC_peptide',\n 'Sillero',\n 'Dawson',\n 'EMBOSS',\n 'Nozaki',\n 'Thurlkill']\n\nIn [3]: sequence = ipc.sample_protein_sequence\n\nIn [4]: sequence\nOut[4]: 'MKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRGYYWDGGHWRDHGWWKQHYEWRGNRWHLHGPPPPPRHHKKAPHDHHGGHGPGKHHR'\n\nIn [5]: ipc.predict_isoelectric_point_ProMoST(sequence)\nOut[5]: 10.159912109374998\n\nIn [6]: ipc.predict_isoelectric_point(sequence)\nOut[6]: 9.779560546874999\n\nIn [7]: ipc.predict_isoelectric_point(sequence, 'IPC_protein')\nOut[7]: 9.779560546874999\n\nIn [8]: ipc.predict_isoelectric_point(sequence, 'IPC_peptide')\nOut[8]: 10.569521484375\n\nIn [9]: ipc.predict_isoelectric_point(sequence, 'EMBOSS')\nOut[9]: 10.774326171875\n\n...\n``` \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://isoelectric.org", "keywords": "protein,peptide,isoelectric point,pI,biochemistry,proteomics", "license": "", "maintainer": "", "maintainer_email": "", "name": "isoelectric", "package_url": "https://pypi.org/project/isoelectric/", "platform": "", "project_url": "https://pypi.org/project/isoelectric/", "project_urls": {"Homepage": "http://isoelectric.org"}, "release_url": "https://pypi.org/project/isoelectric/1.0/", "requires_dist": null, "requires_python": ">=3.0", "summary": "IPC (Isoelectric Point Calculator) - prediction of isoelectric point of proteins and peptides", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>IPC</strong> <code>is a program (available also as web service at isoelectric.org) for the accurate estimation of protein and peptide isoelectric point (pI) using Henderson-Hasselbach equation and pKa sets.</code></p>\n<p>It allows you to compute theoretical pI using 16 pKa sets (for individual references see <a href=\"http://isoelectric.org/theory.html\" rel=\"nofollow\">http://isoelectric.org/theory.html</a>)</p>\n<p><strong>IPC</strong> introduce also two new computationally optimized pKa sets. They were benchmarked against 14 different pKa sets and\n3 pI prediction programs on two protein databases (2,324 proteins) and three peptide datasets (16,882 peptides).</p>\n<p>Program is written in Python programing language and thus it should be able to run it on any operating system.</p>\n<p><strong>AUTHOR</strong>:         Lukasz Pawel Kozlowski, <a href=\"mailto:lukaszkozlowski.lpk@gmail.com\">lukaszkozlowski.lpk@gmail.com</a>\n<strong>COPYRIGHTS</strong>:     Lukasz Pawel Kozlowski\n<strong>LICENCE</strong>:        PUBLIC DOMAIN <a href=\"http://isoelectric.org/license.txt\" rel=\"nofollow\">http://isoelectric.org/license.txt</a></p>\n<h2>How to cite:</h2>\n<p>Kozlowski LP (2016) IPC - Isoelectric Point Calculator. Biology Direct 11:55. doi: <a href=\"http://dx.doi.org/10.1186/s13062-016-0159-9\" rel=\"nofollow\">http://dx.doi.org/10.1186/s13062-016-0159-9</a></p>\n<h2>INSTALLATION:</h2>\n<p>wget <a href=\"http://isoelectric.org/ipc.zip\" rel=\"nofollow\">http://isoelectric.org/ipc.zip</a>;\nunzip ipc.zip; # sudo apt-get install unzip (if not present)\ncd ipc;\nsudo python setup.py install</p>\n<h2>USAGE:</h2>\n<p>python ipc.py &lt;fasta_file&gt; &lt;pKa set&gt; &lt;output_file&gt; &lt;plot_file&gt;</p>\n<p>ipc &lt;fasta_file&gt; &lt;pKa set&gt; &lt;output_file&gt; &lt;plot_file&gt; (if installed into system using setup.py)</p>\n<pre><code>&lt;fasta_file&gt;    protein sequence(s) in fasta format, see ./examples\n&lt;pKa set&gt;       one from pKa sets which will be used to calculate pI, default 'ALL' (report pI using all models)\n                valid options are:\n                        'ALL', 'IPC_protein', 'IPC_peptide',\n                        'Bjellqvist', 'Dawson', 'Grimsley', \n                        'Toseland', 'EMBOSS', 'Kozlowski', \n                        'DTASelect', 'Wikipedia', 'Rodwell', \n                        'Patrickios', 'Sillero', 'Thurlkill', \n                        'Solomon', 'Nozaki_Tanford', \n                        'Lehninger', 'ProMoST'\n\n&lt;output_file&gt;   output of the program with pI predicted using selected model(s), default name &lt;fasta_file&gt;.pI.txt\n&lt;plot_file&gt;     virtual 2D-PAGE scatter plot (molecular weight vs. isoelectric point) represented as heat map, \n                this option is available only if numpy and matplotlib and scipy are installed  \n</code></pre>\n<p>E.g. ipc ./examples/NC_010473_Ecoli.faa ALL out.txt out.png</p>\n<p>The result should be following files located in the &lt;fasta_file&gt; directory:</p>\n<ul>\n<li>NC_010473_Ecoli.faa.pI.txt with predictions</li>\n<li>NC_010473_Ecoli.faa.png with virtual 2D-PAGE scatter plot</li>\n</ul>\n<p>Please note that this exemplary command will predict isoelectric point using all pKa sets for the whole E.coli proteome\n(4218 proteins). Nevertheless, it should be done in ~5 seconds.</p>\n<p>Please, follow the order of input files and parameters. Intentionally, IPC does not use optparse or argparse as those\npackages are different for different version of python. And their names also may change in future.</p>\n<p>Additionally, IPC can be used interactively in python shell:</p>\n<pre><code>from isoelectric import ipc\nhelp(ipc)\n</code></pre>\n<hr>\n<p>Help on module ipc:</p>\n<p>NAME\nipc</p>\n<p>FILE\n/home/lukaskoz/IPC_standalone_version/ipc.py</p>\n<h3>FUNCTIONS</h3>\n<pre><code>calculate_molecular_weight(seq)\n    molecular weight\n\ncheck_additional_libraries()\n    check libraries for plotting\n\nerror_information()\n    information how to run IPC script\n\nfasta_reader(fasta_string)\n    reads fasta file and return table [ [head1, seq1], [head2, seq2], ...]\n    it is endure for all  errors like: multiple line for sequence, white spaces etc.\n\nipc_author_information()\n    add information about IPC\n\nmake_heat_map(mw_tab, pI_tab, fasta_file, input_pKa_set)\n    virtual 2D-PAGE scatter plot, heat map\n\npredict_isoelectric_point(sequence, input_pKa_set)\n    accurate estimation of protein and peptide isoelectric point (pI) \n    using Henderson-Hasselbach equation and pKa sets\n\npredict_isoelectric_point_ProMoST(seq)\n    Calculate isoelectric point using ProMoST model\n</code></pre>\n<h3>DATA</h3>\n<pre><code>__author__ = 'Lukasz Pawel Kozlowski'\n__copyrights__ = 'Lukasz Pawel Kozlowski'\n__email__ = 'lukaszkozlowski.lpk@gmail.com'\n__licence__ = 'http://isoelectric.org/licence.txt'\n__webserver__ = 'http://isoelectric.org'\naaDict = {'Ala': 'A', 'Arg': 'R', 'Asn': 'N', 'Asp': 'D', 'Asx': 'B', ...\nacidic = ['D', 'E', 'C', 'Y']\nbasic = ['K', 'R', 'H']\npromost = {'C': [8.0, 8.28, 9.0], 'D': [3.57, 4.07, 4.57], 'E': [4.15,...\npromost_mid = {'A': [7.58, 3.75], 'B': [7.46, 3.57], 'C': [8.12, 3.1],...\nsample_protein_sequence = 'MKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRG...\nscales = {'Bjellqvist': {'C': 9.0, 'Cterm': 3.55, 'D': 4.05, 'E': 4.45...\n</code></pre>\n<h3>AUTHOR Lukasz Pawel Kozlowski</h3>\n<pre><code>In [1]: import ipc\nIn [2]: ipc.scales.keys()\nOut[2]: \n['DTASelect',\n 'IPC_protein',\n 'Lehninger',\n 'Bjellqvist',\n 'Toseland',\n 'Wikipedia',\n 'Grimsley',\n 'Patrickios',\n 'Rodwell',\n 'Solomon',\n 'IPC_peptide',\n 'Sillero',\n 'Dawson',\n 'EMBOSS',\n 'Nozaki',\n 'Thurlkill']\n\nIn [3]: sequence = ipc.sample_protein_sequence\n\nIn [4]: sequence\nOut[4]: 'MKKMQSIVLALSLVLVAPMAAQAAEITLVPSVKLQIGDRDNRGYYWDGGHWRDHGWWKQHYEWRGNRWHLHGPPPPPRHHKKAPHDHHGGHGPGKHHR'\n\nIn [5]: ipc.predict_isoelectric_point_ProMoST(sequence)\nOut[5]: 10.159912109374998\n\nIn [6]: ipc.predict_isoelectric_point(sequence)\nOut[6]: 9.779560546874999\n\nIn [7]: ipc.predict_isoelectric_point(sequence, 'IPC_protein')\nOut[7]: 9.779560546874999\n\nIn [8]: ipc.predict_isoelectric_point(sequence, 'IPC_peptide')\nOut[8]: 10.569521484375\n\nIn [9]: ipc.predict_isoelectric_point(sequence, 'EMBOSS')\nOut[9]: 10.774326171875\n\n...\n</code></pre>\n\n          </div>"}, "last_serial": 5814531, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5d5ef99b68f8c0818c707f125083c2de", "sha256": "711ff8cda595923305937866abfe6c7d36b09505be7da89148ccd6c1df35112a"}, "downloads": -1, "filename": "isoelectric-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5d5ef99b68f8c0818c707f125083c2de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 9433, "upload_time": "2019-09-11T12:07:19", "upload_time_iso_8601": "2019-09-11T12:07:19.641191Z", "url": "https://files.pythonhosted.org/packages/5b/ef/354d998ab32b57f74480154aa01f1809b94e60b5ae5b0f723b6be47be09d/isoelectric-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ec03da715de9c280e6177772faa20ba", "sha256": "76fe7ee81f4645222c4658a2cd855d66930c513eb976476485c436dec1228b33"}, "downloads": -1, "filename": "isoelectric-1.0.tar.gz", "has_sig": false, "md5_digest": "8ec03da715de9c280e6177772faa20ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 1261092, "upload_time": "2019-09-11T12:07:23", "upload_time_iso_8601": "2019-09-11T12:07:23.253206Z", "url": "https://files.pythonhosted.org/packages/41/e9/00820750a6de8f7e95efd607ce9e8d2351ef5f2424edc74d6823fdce8079/isoelectric-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d5ef99b68f8c0818c707f125083c2de", "sha256": "711ff8cda595923305937866abfe6c7d36b09505be7da89148ccd6c1df35112a"}, "downloads": -1, "filename": "isoelectric-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "5d5ef99b68f8c0818c707f125083c2de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 9433, "upload_time": "2019-09-11T12:07:19", "upload_time_iso_8601": "2019-09-11T12:07:19.641191Z", "url": "https://files.pythonhosted.org/packages/5b/ef/354d998ab32b57f74480154aa01f1809b94e60b5ae5b0f723b6be47be09d/isoelectric-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ec03da715de9c280e6177772faa20ba", "sha256": "76fe7ee81f4645222c4658a2cd855d66930c513eb976476485c436dec1228b33"}, "downloads": -1, "filename": "isoelectric-1.0.tar.gz", "has_sig": false, "md5_digest": "8ec03da715de9c280e6177772faa20ba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 1261092, "upload_time": "2019-09-11T12:07:23", "upload_time_iso_8601": "2019-09-11T12:07:23.253206Z", "url": "https://files.pythonhosted.org/packages/41/e9/00820750a6de8f7e95efd607ce9e8d2351ef5f2424edc74d6823fdce8079/isoelectric-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:00 2020"}