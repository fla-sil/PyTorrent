{"info": {"author": "Marko Ristin", "author_email": "marko@parquery.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "icontract\n=========\n.. image:: https://travis-ci.com/Parquery/icontract.svg?branch=master\n    :target: https://travis-ci.com/Parquery/icontract\n\n.. image:: https://coveralls.io/repos/github/Parquery/icontract/badge.svg?branch=master\n    :target: https://coveralls.io/github/Parquery/icontract\n\n.. image:: https://badge.fury.io/py/icontract.svg\n    :target: https://badge.fury.io/py/icontract\n    :alt: PyPI - version\n\n.. image:: https://img.shields.io/pypi/pyversions/icontract.svg\n    :alt: PyPI - Python Version\n\nicontract provides `design-by-contract <https://en.wikipedia.org/wiki/Design_by_contract>`_ to Python3 with informative\nviolation messages and inheritance.\n\nRelated Projects\n----------------\nThere exist a couple of contract libraries. However, at the time of this writing (September 2018), they all required the\nprogrammer either to learn a new syntax (`PyContracts <https://pypi.org/project/PyContracts/>`_) or to write\nredundant condition descriptions (\n*e.g.*,\n`contracts <https://pypi.org/project/contracts/>`_,\n`covenant <https://github.com/kisielk/covenant>`_,\n`dpcontracts <https://pypi.org/project/dpcontracts/>`_,\n`pyadbc <https://pypi.org/project/pyadbc/>`_ and\n`pcd <https://pypi.org/project/pcd>`_).\n\nThis library was strongly inspired by them, but we go two steps further.\n\nFirst, our violation message on contract breach are much more informatinve. The message includes the source code of the\ncontract condition as well as variable values at the time of the breach. This promotes don't-repeat-yourself principle\n(`DRY <https://en.wikipedia.org/wiki/Don%27t_repeat_yourself>`_) and spare the programmer the tedious task of repeating\nthe message that was already written in code.\n\nSecond, icontract allows inheritance of the contracts and supports weakining of the preconditions\nas well as strengthening of the postconditions and invariants. Notably, weakining and strengthening of the contracts\nis a feature indispensable for modeling many non-trivial class hierarchies. Please see Section `Inheritance`_.\nTo the best of our knowledge, there is currently no other Python library that supports inheritance of the contracts in a\ncorrect way.\n\nIn the long run, we hope that design-by-contract will be adopted and integrated in the language. Consider this library\na work-around till that happens. An ongoing discussion on how to bring design-by-contract into Python language can\nbe followed on `python-ideas mailing list <https://groups.google.com/forum/#!topic/python-ideas/JtMgpSyODTU>`_.\n\nUsage\n=====\nicontract provides two function decorators, ``require`` and ``ensure`` for pre-conditions and post-conditions,\nrespectively. Additionally, it provides a class decorator, ``invariant``, to establish class invariants.\n\nThe ``condition`` argument specifies the contract and is usually written in lambda notation. In post-conditions,\ncondition function receives a reserved parameter ``result`` corresponding to the result of the function. The condition\ncan take as input a subset of arguments required by the wrapped function. This allows for very succinct conditions.\n\nYou can provide an optional description by passing in ``description`` argument.\n\nWhenever a violation occurs, ``ViolationError`` is raised. Its message includes:\n\n* the human-readable representation of the condition,\n* description (if supplied) and\n* representation of all the values.\n\nThe representation of the values is obtained by re-executing the condition function programmatically by traversing\nits abstract syntax tree and filling the tree leaves with values held in the function frame. Mind that this re-execution\nwill also re-execute all the functions. Therefore you need to make sure that all the function calls involved\nin the condition functions do not have any side effects.\n\nIf you want to customize the error, see Section \"Custom Errors\".\n\n.. code-block:: python\n\n    >>> import icontract\n\n    >>> @icontract.require(lambda x: x > 3)\n    ... def some_func(x: int, y: int = 5)->None:\n    ...     pass\n    ...\n\n    >>> some_func(x=5)\n\n    # Pre-condition violation\n    >>> some_func(x=1)\n    Traceback (most recent call last):\n      ...\n    icontract.errors.ViolationError: File <doctest README.rst[1]>, line 1 in <module>:\n    x > 3: x was 1\n\n    # Pre-condition violation with a description\n    >>> @icontract.require(lambda x: x > 3, \"x must not be small\")\n    ... def some_func(x: int, y: int = 5) -> None:\n    ...     pass\n    ...\n    >>> some_func(x=1)\n    Traceback (most recent call last):\n      ...\n    icontract.errors.ViolationError: File <doctest README.rst[4]>, line 1 in <module>:\n    x must not be small: x > 3: x was 1\n\n    # Pre-condition violation with more complex values\n    >>> class B:\n    ...     def __init__(self) -> None:\n    ...         self.x = 7\n    ...\n    ...     def y(self) -> int:\n    ...         return 2\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"instance of B\"\n    ...\n    >>> class A:\n    ...     def __init__(self)->None:\n    ...         self.b = B()\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"instance of A\"\n    ...\n    >>> SOME_GLOBAL_VAR = 13\n    >>> @icontract.require(lambda a: a.b.x + a.b.y() > SOME_GLOBAL_VAR)\n    ... def some_func(a: A) -> None:\n    ...     pass\n    ...\n    >>> an_a = A()\n    >>> some_func(an_a)\n    Traceback (most recent call last):\n      ...\n    icontract.errors.ViolationError: File <doctest README.rst[9]>, line 1 in <module>:\n    a.b.x + a.b.y() > SOME_GLOBAL_VAR:\n    SOME_GLOBAL_VAR was 13\n    a was instance of A\n    a.b was instance of B\n    a.b.x was 7\n    a.b.y() was 2\n\n    # Post-condition\n    >>> @icontract.ensure(lambda result, x: result > x)\n    ... def some_func(x: int, y: int = 5) -> int:\n    ...     return x - y\n    ...\n    >>> some_func(x=10)\n    Traceback (most recent call last):\n      ...\n    icontract.errors.ViolationError: File <doctest README.rst[12]>, line 1 in <module>:\n    result > x:\n    result was 5\n    x was 10\n\nInvariants\n----------\nInvariants are special contracts associated with an instance of a class. An invariant should hold *after* initialization\nand *before* and *after* a call to any public instance method. The invariants are the pivotal element of\ndesign-by-contract: they allow you to formally define properties of a data structures that you know will be maintained\nthroughout the life time of *every* instance.\n\nWe consider the following methods to be \"public\":\n\n* All methods not prefixed with ``_``\n* All magic methods (prefix ``__`` and suffix ``__``)\n\nClass methods can not observe the invariant since they are not associated with an instance of the class.\n\nWe exempt ``__getattribute__``, ``__setattr__`` and ``__delattr__`` methods from observing the invariant since\nthese functions alter the state of the instance and thus can not be considered \"public\".\n\nWe also excempt ``__repr__`` method to prevent endless loops when generating error messages.\n\nThe icontract invariants are implemented as class decorators.\n\nThe following examples show various cases when an invariant is breached.\n\nAfter the initialization:\n\n.. code-block:: python\n\n        >>> @icontract.invariant(lambda self: self.x > 0)\n        ... class SomeClass:\n        ...     def __init__(self) -> None:\n        ...         self.x = -1\n        ...\n        ...     def __repr__(self) -> str:\n        ...         return \"some instance\"\n        ...\n        >>> some_instance = SomeClass()\n        Traceback (most recent call last):\n         ...\n        icontract.errors.ViolationError: File <doctest README.rst[14]>, line 1 in <module>:\n        self.x > 0:\n        self was some instance\n        self.x was -1\n\n\nBefore the invocation of a public method:\n\n.. code-block:: python\n\n    >>> @icontract.invariant(lambda self: self.x > 0)\n    ... class SomeClass:\n    ...     def __init__(self) -> None:\n    ...         self.x = 100\n    ...\n    ...     def some_method(self) -> None:\n    ...         self.x = 10\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"some instance\"\n    ...\n    >>> some_instance = SomeClass()\n    >>> some_instance.x = -1\n    >>> some_instance.some_method()\n    Traceback (most recent call last):\n     ...\n    icontract.errors.ViolationError: File <doctest README.rst[16]>, line 1 in <module>:\n    self.x > 0:\n    self was some instance\n    self.x was -1\n\n\nAfter the invocation of a public method:\n\n.. code-block:: python\n\n    >>> @icontract.invariant(lambda self: self.x > 0)\n    ... class SomeClass:\n    ...     def __init__(self) -> None:\n    ...         self.x = 100\n    ...\n    ...     def some_method(self) -> None:\n    ...         self.x = -1\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"some instance\"\n    ...\n    >>> some_instance = SomeClass()\n    >>> some_instance.some_method()\n    Traceback (most recent call last):\n     ...\n    icontract.errors.ViolationError: File <doctest README.rst[20]>, line 1 in <module>:\n    self.x > 0:\n    self was some instance\n    self.x was -1\n\n\nAfter the invocation of a magic method:\n\n.. code-block:: python\n\n    >>> @icontract.invariant(lambda self: self.x > 0)\n    ... class SomeClass:\n    ...     def __init__(self) -> None:\n    ...         self.x = 100\n    ...\n    ...     def __call__(self) -> None:\n    ...         self.x = -1\n    ...\n    ...     def __repr__(self) -> str:\n    ...         return \"some instance\"\n    ...\n    >>> some_instance = SomeClass()\n    >>> some_instance()\n    Traceback (most recent call last):\n     ...\n    icontract.errors.ViolationError: File <doctest README.rst[23]>, line 1 in <module>:\n    self.x > 0:\n    self was some instance\n    self.x was -1\n\nSnapshots (a.k.a \"old\" argument values)\n---------------------------------------\nUsual postconditions can not verify the state transitions of the function's argument values. For example, it is\nimpossible to verify in a postcondition that the list supplied as an argument was appended an element since the\npostcondition only sees the argument value as-is after the function invocation.\n\nIn order to verify the state transitions, the postcondition needs the \"old\" state of the argument values\n(*i.e.* prior to the invocation of the function) as well as the current values (after the invocation).\n``icontract.snapshot`` decorator instructs the checker to take snapshots of the argument values before the function call\nwhich are then supplied as ``OLD`` argument to the postcondition function.\n\n``icontract.snapshot`` takes a capture function which accepts none, one or more arguments of the function.\nYou set the name of the property in ``OLD`` as ``name`` argument to ``icontract.snapshot``. If there is a single\nargument passed to the the capture function, the name of the ``OLD`` property can be omitted and equals the name\nof the argument.\n\nHere is an example that uses snapshots to check that a value was appended to the list:\n\n.. code-block:: python\n\n    >>> import icontract\n    >>> from typing import List\n\n    >>> @icontract.snapshot(lambda lst: lst[:])\n    ... @icontract.ensure(lambda OLD, lst, value: lst == OLD.lst + [value])\n    ... def some_func(lst: List[int], value: int) -> None:\n    ...     lst.append(value)\n    ...     lst.append(1984)  # bug\n\n    >>> some_func(lst=[1, 2], value=3)\n    Traceback (most recent call last):\n        ...\n    icontract.errors.ViolationError: File <doctest README.rst[28]>, line 2 in <module>:\n    lst == OLD.lst + [value]:\n    OLD was a bunch of OLD values\n    OLD.lst was [1, 2]\n    lst was [1, 2, 3, 1984]\n    value was 3\n\nThe following example shows how you can name the snapshot:\n\n.. code-block:: python\n\n    >>> import icontract\n    >>> from typing import List\n\n    >>> @icontract.snapshot(lambda lst: len(lst), name=\"len_lst\")\n    ... @icontract.ensure(lambda OLD, lst, value: len(lst) == OLD.len_lst + 1)\n    ... def some_func(lst: List[int], value: int) -> None:\n    ...     lst.append(value)\n    ...     lst.append(1984)  # bug\n\n    >>> some_func(lst=[1, 2], value=3)\n    Traceback (most recent call last):\n        ...\n    icontract.errors.ViolationError: File <doctest README.rst[32]>, line 2 in <module>:\n    len(lst) == OLD.len_lst + 1:\n    OLD was a bunch of OLD values\n    OLD.len_lst was 2\n    len(lst) was 4\n    lst was [1, 2, 3, 1984]\n\nThe next code snippet shows how you can combine multiple arguments of a function to be captured in a single snapshot:\n\n.. code-block:: python\n\n    >>> import icontract\n    >>> from typing import List\n\n    >>> @icontract.snapshot(\n    ...     lambda lst_a, lst_b: set(lst_a).union(lst_b), name=\"union\")\n    ... @icontract.ensure(\n    ...     lambda OLD, lst_a, lst_b: set(lst_a).union(lst_b) == OLD.union)\n    ... def some_func(lst_a: List[int], lst_b: List[int]) -> None:\n    ...     lst_a.append(1984)  # bug\n\n    >>> some_func(lst_a=[1, 2], lst_b=[3, 4])  # doctest: +ELLIPSIS\n    Traceback (most recent call last):\n        ...\n    icontract.errors.ViolationError: File <doctest README.rst[36]>, line ... in <module>:\n    set(lst_a).union(lst_b) == OLD.union:\n    OLD was a bunch of OLD values\n    OLD.union was {1, 2, 3, 4}\n    lst_a was [1, 2, 1984]\n    lst_b was [3, 4]\n    set(lst_a) was {1, 2, 1984}\n    set(lst_a).union(lst_b) was {1, 2, 3, 4, 1984}\n\nInheritance\n-----------\nTo inherit the contracts of the parent class, the child class needs to either inherit from ``icontract.DBC`` or have\na meta class set to ``icontract.DBCMeta``.\n\nWhen no contracts are specified in the child class, all contracts are inherited from the parent class as-are.\n\nWhen the child class introduces additional preconditions or postconditions and invariants, these contracts are\n*strengthened* or *weakened*, respectively. ``icontract.DBCMeta`` allows you to specify the contracts not only on the\nconcrete classes, but also on abstract classes.\n\n**Strengthening**. If you specify additional invariants in the child class then the child class will need to satisfy\nall the invariants of its parent class as well as its own additional invariants. Analogously, if you specify additional\npostconditions to a function of the class, that function will need to satisfy both its own postconditions and\nthe postconditions of the original parent function that it overrides.\n\n**Weakining**. Adding preconditions to a function in the child class weakens the preconditions. The caller needs to\nprovide either arguments that satisfy the preconditions associated with the function of the parent class *or*\narguments that satisfy the preconditions of the function of the child class.\n\n**Preconditions and Postconditions of __init__**. Mind that ``__init__`` method is a special case. Since the constructor\nis exempt from polymorphism, preconditions and postconditions of base classes are *not* inherited for the\n``__init__`` method. Only the preconditions and postconditions specified for the ``__init__`` method of the concrete\nclass apply.\n\n**Abstract Classes**. Since Python 3 does not allow multiple meta classes, ``icontract.DBCMeta`` inherits from\n``abc.ABCMeta`` to allow combining contracts with abstract base classes.\n\n**Snapshots**. Snapshots are inherited from the base classes for computational efficiency.\nYou can use snapshots from the base classes as if they were defined in the concrete class.\n\nThe following example shows an abstract parent class and a child class that inherits and strengthens parent's contracts:\n\n.. code-block:: python\n\n        >>> import abc\n        >>> import icontract\n\n        >>> @icontract.invariant(lambda self: self.x > 0)\n        ... class A(icontract.DBC):\n        ...     def __init__(self) -> None:\n        ...         self.x = 10\n        ...\n        ...     @abc.abstractmethod\n        ...     @icontract.ensure(lambda y, result: result < y)\n        ...     def func(self, y: int) -> int:\n        ...         pass\n        ...\n        ...     def __repr__(self) -> str:\n        ...         return \"instance of A\"\n\n        >>> @icontract.invariant(lambda self: self.x < 100)\n        ... class B(A):\n        ...     def func(self, y: int) -> int:\n        ...         # Break intentionally the postcondition\n        ...         # for an illustration\n        ...         return y + 1\n        ...\n        ...     def break_parent_invariant(self):\n        ...         self.x = -1\n        ...\n        ...     def break_my_invariant(self):\n        ...         self.x = 101\n        ...\n        ...     def __repr__(self) -> str:\n        ...         return \"instance of B\"\n\n        # Break the parent's postcondition\n        >>> some_b = B()\n        >>> some_b.func(y=0)\n        Traceback (most recent call last):\n            ...\n        icontract.errors.ViolationError: File <doctest README.rst[40]>, line 7 in A:\n        result < y:\n        result was 1\n        y was 0\n\n        # Break the parent's invariant\n        >>> another_b = B()\n        >>> another_b.break_parent_invariant()\n        Traceback (most recent call last):\n            ...\n        icontract.errors.ViolationError: File <doctest README.rst[40]>, line 1 in <module>:\n        self.x > 0:\n        self was instance of B\n        self.x was -1\n\n        # Break the child's invariant\n        >>> yet_another_b = B()\n        >>> yet_another_b.break_my_invariant()\n        Traceback (most recent call last):\n            ...\n        icontract.errors.ViolationError: File <doctest README.rst[41]>, line 1 in <module>:\n        self.x < 100:\n        self was instance of B\n        self.x was 101\n\nThe following example shows how preconditions are weakened:\n\n.. code-block:: python\n\n        >>> class A(icontract.DBC):\n        ...     @icontract.require(lambda x: x % 2 == 0)\n        ...     def func(self, x: int) -> None:\n        ...         pass\n\n        >>> class B(A):\n        ...     @icontract.require(lambda x: x % 3 == 0)\n        ...     def func(self, x: int) -> None:\n        ...         pass\n\n        >>> b = B()\n\n        # The precondition of the parent is satisfied.\n        >>> b.func(x=2)\n\n        # The precondition of the child is satisfied,\n        # while the precondition of the parent is not.\n        # This is OK since the precondition has been\n        # weakened.\n        >>> b.func(x=3)\n\n        # None of the preconditions have been satisfied.\n        >>> b.func(x=5)\n        Traceback (most recent call last):\n            ...\n        icontract.errors.ViolationError: File <doctest README.rst[49]>, line 2 in B:\n        x % 3 == 0: x was 5\n\nThe example below illustrates how snaphots are inherited:\n\n.. code-block:: python\n\n        >>> class A(icontract.DBC):\n        ...     @abc.abstractmethod\n        ...     @icontract.snapshot(lambda lst: lst[:])\n        ...     @icontract.ensure(lambda OLD, lst: len(lst) == len(OLD.lst) + 1)\n        ...     def func(self, lst: List[int], value: int) -> None:\n        ...         pass\n\n        >>> class B(A):\n        ...     # The snapshot of OLD.lst has been defined in class A.\n        ...     @icontract.ensure(lambda OLD, lst: lst == OLD.lst + [value])\n        ...     def func(self, lst: List[int], value: int) -> None:\n        ...         lst.append(value)\n        ...         lst.append(1984)  # bug\n\n        >>> b = B()\n        >>> b.func(lst=[1, 2], value=3)\n        Traceback (most recent call last):\n            ...\n        icontract.errors.ViolationError: File <doctest README.rst[54]>, line 4 in A:\n        len(lst) == len(OLD.lst) + 1:\n        OLD was a bunch of OLD values\n        OLD.lst was [1, 2]\n        len(OLD.lst) was 2\n        len(lst) was 4\n        lst was [1, 2, 3, 1984]\n\n\nToggling Contracts\n------------------\nBy default, the contract checks (including the snapshots) are always perfromed at run-time. To disable them, run the\ninterpreter in optimized mode (``-O`` or ``-OO``, see\n`Python command-line options <https://docs.python.org/3/using/cmdline.html#cmdoption-o>`_).\n\nIf you want to override this behavior, you can supply the ``enabled`` argument to the contract:\n\n.. code-block:: python\n\n    >>> @icontract.require(lambda x: x > 10, enabled=False)\n    ... def some_func(x: int) -> int:\n    ...     return 123\n    ...\n\n    # The pre-condition is breached, but the check was disabled:\n    >>> some_func(x=0)\n    123\n\nIcontract provides a global variable ``icontract.SLOW`` to provide a unified way to mark a plethora of contracts\nin large code bases. ``icontract.SLOW`` reflects the environment variable ``ICONTRACT_SLOW``.\n\nWhile you may want to keep most contracts running both during the development and in the production, contracts\nmarked with ``icontract.SLOW`` should run only during the development (since they are too sluggish to execute in a real\napplication).\n\nIf you want to enable contracts marked with ``icontract.SLOW``, set the environment variable ``ICONTRACT_SLOW`` to a\nnon-empty string.\n\nHere is some example code:\n\n.. code-block:: python\n\n    # some_module.py\n    @icontract.require(lambda x: x > 10, enabled=icontract.SLOW)\n        def some_func(x: int) -> int:\n            return 123\n\n    # in test_some_module.py\n    import unittest\n\n    class TestSomething(unittest.TestCase):\n        def test_some_func(self) -> None:\n            self.assertEqual(123, some_func(15))\n\n    if __name__ == '__main__':\n        unittest.main()\n\nRun this bash command to execute the unit test with slow contracts:\n\n.. code-block:: bash\n\n    $ ICONTRACT_SLOW=true python test_some_module.py\n\n.. _custom-errors:\n\nCustom Errors\n-------------\n\nIcontract raises ``ViolationError`` by default. However, you can also instruct icontract to raise a different error\nby supplying ``error`` argument to the decorator.\n\nThe ``error`` argument can either be:\n\n* **An exception class.** The exception is constructed with the violation message and finally raised.\n* **A callable that returns an exception.** The callable accepts the subset of arguments of the original function\n  (including ``result`` and ``OLD`` for postconditions) or ``self`` in case of invariants, respectively,\n  and returns an exception. The arguments to the condition function can freely differ from the arguments\n  to the error function.\n\n  The exception returned by the given callable is finally raised.\n\n  If you specify the ``error`` argument as callable, the values will not be traced and the condition function will not\n  be parsed. Hence, violation of contracts with ``error`` arguments as callables incur a much smaller computational\n  overhead in case of violations compared to contracts with default violation messages for which we need to  trace\n  the argument values and parse the condition function.\n\nHere is an example of the error given as an exception class:\n\n.. code-block:: python\n\n    >>> @icontract.require(lambda x: x > 0, error=ValueError)\n    ... def some_func(x: int) -> int:\n    ...     return 123\n    ...\n\n    # Custom Exception class\n    >>> some_func(x=0)\n    Traceback (most recent call last):\n        ...\n    ValueError: File <doctest README.rst[60]>, line 1 in <module>:\n    x > 0: x was 0\n\nHere is an example of the error given as a callable:\n\n.. code-block:: python\n\n    >>> @icontract.require(\n    ...     lambda x: x > 0,\n    ...     error=lambda x: ValueError('x must be positive, got: {}'.format(x)))\n    ... def some_func(x: int) -> int:\n    ...     return 123\n    ...\n\n    # Custom Exception class\n    >>> some_func(x=0)\n    Traceback (most recent call last):\n        ...\n    ValueError: x must be positive, got: 0\n\n.. danger::\n    Be careful when you write contracts with custom errors. This might lead the caller to (ab)use the contracts as\n    a control flow mechanism.\n\n    In that case, the user will expect that the contract is *always* enabled and not only during debug or test.\n    (For example, whenever you run Python interpreter with ``-O`` or ``-OO``, ``__debug__`` will be ``False``.\n    If you left ``enabled`` argument to its default ``__debug__``, the contract will *not* be verified in\n    ``-O`` mode.)\n\n\nImplementation Details\n----------------------\n\n**Decorator stack**. The precondition and postcondition decorators have to be stacked together to allow for inheritance.\nHence, when multiple precondition and postcondition decorators are given, the function is actually decorated only once\nwith a precondition/postcondition checker while the contracts are stacked to the checker's ``__preconditions__`` and\n``__postconditions__`` attribute, respectively. The checker functions iterates through these two attributes to verify\nthe contracts at run-time.\n\nAll the decorators in the function's decorator stack are expected to call ``functools.update_wrapper()``.\nNotably, we use ``__wrapped__`` attribute to iterate through the decorator stack and find the checker function which is\nset with ``functools.update_wrapper()``. Mind that this implies that preconditions and postconditions are verified at\nthe inner-most decorator and *not* when outer preconditios and postconditions are defined.\n\nConsider the following example:\n\n.. code-block:: python\n\n    @some_custom_decorator\n    @icontract.require(lambda x: x > 0)\n    @another_custom_decorator\n    @icontract.require(lambda x, y: y < x)\n    def some_func(x: int, y: int) -> None:\n      # ...\n\nThe checker function will verify the two preconditions after both ``some_custom_decorator`` and\n``another_custom_decorator`` have been applied, whily you would expect that the outer precondition (``x > 0``)\nis verified immediately after ``some_custom_decorator`` is applied.\n\nTo prevent bugs due to unexpected behavior, we recommend to always group preconditions and postconditions together.\n\n**Invariants**. Since invariants are handled by a class decorator (in contrast to function decorators that handle\npreconditions and postconditions), they do not need to be stacked. The first invariant decorator wraps each public\nmethod of a class with a checker function. The invariants are added to the class' ``__invariants__`` attribute.\nAt run-time, the checker function iterates through the ``__invariants__`` attribute when it needs to actually verify the\ninvariants.\n\nMind that we still expect each class decorator that decorates the class functions to use ``functools.update_wrapper()``\nin order to be able to iterate through decorator stacks of the individual functions.\n\n**Recursion in contracts**. In certain cases functions depend on each other through contracts. Consider the following\nsnippet:\n\n.. code-block:: python\n\n    @icontract.require(lambda: another_func())\n    def some_func() -> bool:\n        ...\n\n    @icontract.require(lambda: some_func())\n    def another_func() -> bool:\n        ...\n\n    some_func()\n\nNa\u00efvely evaluating such preconditions and postconditions would result in endless recursions. Therefore, icontract\nsuspends any further contract checking for a function when re-entering it for the second time while checking its\ncontracts.\n\nInvariants depending on the instance methods would analogously result in endless recursions. The following snippet\ngives an example of such an invariant:\n\n.. code-block:: python\n\n    @icontract.invariant(lambda self: self.some_func())\n    class SomeClass(icontract.DBC):\n        def __init__(self) -> None:\n            ...\n\n        def some_func(self) -> bool:\n            ...\n\nTo avoid endless recursion icontract suspends further invariant checks while checking an invariant. The dunder\n``__dbc_invariant_check_is_in_progress__`` is set on the instance for a diode effect as soon as invariant check is\nin progress and removed once the invariants checking finished. As long as the dunder\n``__dbc_invariant_check_is_in_progress__`` is present, the wrappers that check invariants simply return the result of\nthe function.\n\nLinter\n------\nWe provide a linter that statically verifies the arguments of the contracts (*i.e.* that they are\nwell-defined with respect to the function). The tool is available as a separate package,\n`pyicontract-lint <https://pypi.org/project/pyicontract-lint>`_.\n\nSphinx\n------\nWe implemented a Sphinx extension to include contracts in the documentation. The extension is available as a package\n`sphinx-icontract <https://pypi.org/project/sphinx-icontract>`_.\n\nKnown Issues\n============\n**Integration with ``help()``**. We wanted to include the contracts in the output of ``help()``. Unfortunately,\n``help()`` renders the ``__doc__`` of the class and not of the instance. For functions, this is the class\n\"function\" which you can not inherit from. See this\n`discussion on python-ideas <https://groups.google.com/forum/#!topic/python-ideas/c9ntrVuh6WE>`_ for more details.\n\n**Defining contracts outside of decorators**. We need to inspect the source code of the condition and error lambdas to\ngenerate the violation message and infer the error type in the documentation, respectively. ``inspect.getsource(.)``\nis broken on lambdas defined in decorators in Python 3.5.2+ (see\n`this bug report <https://bugs.python.org/issue21217>`_). We circumvented this bug by using ``inspect.findsource(.)``,\n``inspect.getsourcefile(.)`` and examining the local source code of the lambda by searching for other decorators\nabove and other decorators and a function or class definition below. The decorator code is parsed and then we match\nthe condition and error arguments in the AST of the decorator. This is brittle as it prevents us from having\npartial definitions of contract functions or from sharing the contracts among functions.\n\nHere is a short code snippet to demonstrate where the current implementation fails:\n\n.. code-block:: python\n\n    >>> require_x_positive = icontract.require(lambda x: x > 0)\n\n    >>> @require_x_positive\n    ... def some_func(x: int) -> None:\n    ...     pass\n\n    >>> some_func(x=0)\n    Traceback (most recent call last):\n        ...\n    SyntaxError: Decorator corresponding to the line 1 could not be found in file <doctest README.rst[64]>: 'require_x_positive = icontract.require(lambda x: x > 0)\\n'\n\nHowever, we haven't faced a situation in the code base where we would do something like the above, so we are unsure\nwhether this is a big issue. As long as decorators are directly applied to functions and classes, everything\nworked fine on our code base.\n\nBenchmarks\n==========\nWe evaluated the computational costs incurred by using icontract in a couple of experiments. There are basically two\ntypes of costs caused by icontract: 1) extra parsing performed when you import the module regardless whether conditions\nare switched on or off and 2) run-time cost of verifying the contract.\n\nWe assumed in all the experiments that the contract breaches are exceptionally seldom and thus need not to be analyzed.\nIf you are interested in these additional expereminets, please do let us know and create an issue on the github page.\n\nThe source code of the benchmarks is available in\n`this directory <https://github.com/Parquery/icontract/tree/master/benchmarks>`_.\nAll experiments were performed with Python 3.5.2+ on Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz with 8 cores and\n4 GB RAM.\n\nWe execute a short timeit snippet to bring the following measurements into context:\n\n.. code-block:: bash\n\n    python3 -m timeit -s 'import math' 'math.sqrt(1984.1234)'\n    10000000 loops, best of 3: 0.0679 usec per loop\n\nImport Cost\n-----------\n**Pre and post-conditions.**\nWe generated a module with 100 functions. For each of these functions, we introduced a variable number of conditions and\nstop-watched how long it takes to import the module over 10 runs. Finally, we compared the import time of the module\nwith contracts against the same module without any contracts in the code.\n\nThe overhead is computed as the time difference between the total import time compared to the total import time of the\nmodule without the contracts.\n\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| Number of conditions per function | Total import time [milliseconds] | Overhead [milliseconds] | Overhead per condition and function [milliseconds] |\n+===================================+==================================+=========================+====================================================+\n| None                              |                   795.59 \u00b1 10.47 |                     N/A |                                                N/A |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 1                                 |                   919.53 \u00b1 61.22 |                  123.93 |                                               1.24 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 5                                 |                  1075.81 \u00b1 59.87 |                  280.22 |                                               0.56 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 10                                |                  1290.22 \u00b1 90.04 |                  494.63 |                                               0.49 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 1 disabled                        |                   833.60 \u00b1 32.07 |                   37.41 |                                               0.37 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 5 disabled                        |                   851.31 \u00b1 66.93 |                   55.72 |                                               0.11 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n| 10 disabled                       |                  897.90 \u00b1 143.02 |                  101.41 |                                               0.10 |\n+-----------------------------------+----------------------------------+-------------------------+----------------------------------------------------+\n\nAs we can see in the table above, the overhead per condition is quite minimal (1.24 milliseconds in case of a single\nenabled contract). The overhead decreases as you add more conditions since the icontract has already initialized all the\nnecessary fields in the function objects.\n\nWhen you disable the conditions, there is much less overhead (only 0.37 milliseconds, and decreasing). Since icontract\nreturns immediately when the condition is disabled by implementation, we assume that the overhead coming from disabled\nconditions is mainly caused by Python interpreter parsing the code.\n\n\n**Invariants**. Analogously, to measure the overhead of the invariants, we generated a module with 100 classes.\nWe varied the number of invariant conditions per class and measure the import time over 10 runs. The results\nare presented in the following table.\n\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| Number of conditions per class | Total import time [milliseconds] | Overhead [milliseconds] | Overhead per condition and class [milliseconds] |\n+================================+==================================+=========================+=================================================+\n| None                           |                   843.61 \u00b1 28.21 |                     N/A |                                             N/A |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 1                              |                  3409.71 \u00b1 95.78 |                  2566.1 |                                           25.66 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 5                              |                 4005.93 \u00b1 131.97 |                 3162.32 |                                            6.32 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 10                             |                 4801.82 \u00b1 157.56 |                 3958.21 |                                            3.96 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 1 disabled                     |                   885.88 \u00b1 44.24 |                   42.27 |                                            0.42 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 5 disabled                     |                  912.53 \u00b1 101.91 |                   68.92 |                                            0.14 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n| 10 disabled                    |                  963.77 \u00b1 161.76 |                  120.16 |                                            0.12 |\n+--------------------------------+----------------------------------+-------------------------+-------------------------------------------------+\n\nSimilar to pre and post-conditions, there is decreasing cost per condition as number of conditions increases since the\nicontract has all set up the fields in the class metadata. However, invariants are much more costly compared to pre and\npostconditions and their overhead should be considered if import time needs to be kept minimal.\n\nThe overhead of the disabled invariants is attributed to the overhead of parsing the source file as icontract\nimmediately returns from disabled invariants by implementation.\n\nRun-time Cost\n-------------\nWe constructed four modules around a function which computes a square root. We used ``timeit`` module to measure the\nperformance. Each module was imported as part of the setup.\n\n**No precondition**. This module does not check any preconditions and serves as a baseline.\n\n.. code-block: python\n\n    import math\n    def my_sqrt(x: float) -> float:\n        return math.sqrt(x)\n\n**Pre-condition as assert**. We check pre-conditions by an assert statement.\n\n.. code-block:: python\n\n    def my_sqrt(x: float) -> float:\n        assert x >= 0\n        return math.sqrt(x)\n\n**Pre-condition as separate function**. To mimick a more complex pre-condition, we encapsulate the assert in a separate\nfunction.\n\n.. code-block:: python\n\n    import math\n\n    def check_non_negative(x: float) -> None:\n        assert x >= 0\n\n    def my_sqrt(x: float) -> float:\n        check_non_negative(x)\n        return math.sqrt(x)\n\n**Pre-condition with icontract**. Finally, we compare against a module that uses icontract.\n\n.. code-block:: python\n\n    import math\n    import icontract\n\n    @icontract.require(lambda x: x >= 0)\n    def my_sqrt(x: float) -> float:\n        return math.sqrt(x)\n\n**Pre-condition with icontract, disabled**. We also perform a redundant check to verify that a disabled condition\ndoes not incur any run-time cost.\n\nThe following table sumarizes the timeit results (10000000 loops, best of 3). The run time of the baseline is computed\nas:\n\n.. code-block: bash\n\n    $ python3 -m timeit -s 'import my_sqrt' 'my_sqrt.my_sqrt(1984.1234)'\n\nThe run time of the other functions is computed analogously.\n\n+---------------------+-------------------------+\n| Precondition        | Run time [microseconds] |\n+=====================+=========================+\n| None                |                   0.168 |\n+---------------------+-------------------------+\n| As assert           |                   0.203 |\n+---------------------+-------------------------+\n| As function         |                   0.274 |\n+---------------------+-------------------------+\n| icontract           |                    2.78 |\n+---------------------+-------------------------+\n| icontract, disabled |                   0.165 |\n+---------------------+-------------------------+\n\nThe overhead of icontract is substantial. While this may be prohibitive for points where computational efficiency is\nmore important than correctness, mind that the overhead is still in order of microseconds. In most practical scenarios,\nwhere a function is more complex and takes longer than a few microseconds to execute, such a tiny overhead is\njustified by the gains in correctness, development and maintenance time.\n\n\nInstallation\n============\n\n* Install icontract with pip:\n\n.. code-block:: bash\n\n    pip3 install icontract\n\nDevelopment\n===========\n\n* Check out the repository.\n\n* In the repository root, create the virtual environment:\n\n.. code-block:: bash\n\n    python3 -m venv venv3\n\n* Activate the virtual environment:\n\n.. code-block:: bash\n\n    source venv3/bin/activate\n\n* Install the development dependencies:\n\n.. code-block:: bash\n\n    pip3 install -e .[dev]\n\n* We use tox for testing and packaging the distribution. Run:\n\n.. code-block:: bash\n\n    tox\n\n* We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\n  virtual environment with development dependencies:\n\n.. code-block:: bash\n\n    ./precommit.py\n\n* The pre-commit script can also automatically format the code:\n\n.. code-block:: bash\n\n    ./precommit.py  --overwrite\n\nVersioning\n==========\nWe follow `Semantic Versioning <http://semver.org/spec/v1.0.0.html>`_. The version X.Y.Z indicates:\n\n* X is the major version (backward-incompatible),\n* Y is the minor version (backward-compatible), and\n* Z is the patch version (backward-compatible bug fix).", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Parquery/icontract", "keywords": "design-by-contract precondition postcondition validation", "license": "License :: OSI Approved :: MIT License", "maintainer": "", "maintainer_email": "", "name": "icontract", "package_url": "https://pypi.org/project/icontract/", "platform": "", "project_url": "https://pypi.org/project/icontract/", "project_urls": {"Homepage": "https://github.com/Parquery/icontract"}, "release_url": "https://pypi.org/project/icontract/2.3.0/", "requires_dist": null, "requires_python": "", "summary": "Provide design-by-contract with informative violation messages", "version": "2.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"icontract\">\n<h2>icontract</h2>\n<a href=\"https://travis-ci.com/Parquery/icontract\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/Parquery/icontract.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92fe3a99f89d76b9fb78d5bc3cd0306a53cb74e1/68747470733a2f2f7472617669732d63692e636f6d2f50617271756572792f69636f6e74726163742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/Parquery/icontract\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/Parquery/icontract/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01eb86c6b7e0d99b934fc0d356852e399a17a8f4/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f50617271756572792f69636f6e74726163742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/icontract\" rel=\"nofollow\"><img alt=\"PyPI - version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27eac57337d0bfd732bf0b58dbb119525ae54bf6/68747470733a2f2f62616467652e667572792e696f2f70792f69636f6e74726163742e737667\"></a>\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eaaa390b8b4ba9fde67d022a2ea303c59e97022e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f69636f6e74726163742e737667\">\n<p>icontract provides <a href=\"https://en.wikipedia.org/wiki/Design_by_contract\" rel=\"nofollow\">design-by-contract</a> to Python3 with informative\nviolation messages and inheritance.</p>\n<div id=\"related-projects\">\n<h3>Related Projects</h3>\n<p>There exist a couple of contract libraries. However, at the time of this writing (September 2018), they all required the\nprogrammer either to learn a new syntax (<a href=\"https://pypi.org/project/PyContracts/\" rel=\"nofollow\">PyContracts</a>) or to write\nredundant condition descriptions (\n<em>e.g.</em>,\n<a href=\"https://pypi.org/project/contracts/\" rel=\"nofollow\">contracts</a>,\n<a href=\"https://github.com/kisielk/covenant\" rel=\"nofollow\">covenant</a>,\n<a href=\"https://pypi.org/project/dpcontracts/\" rel=\"nofollow\">dpcontracts</a>,\n<a href=\"https://pypi.org/project/pyadbc/\" rel=\"nofollow\">pyadbc</a> and\n<a href=\"https://pypi.org/project/pcd\" rel=\"nofollow\">pcd</a>).</p>\n<p>This library was strongly inspired by them, but we go two steps further.</p>\n<p>First, our violation message on contract breach are much more informatinve. The message includes the source code of the\ncontract condition as well as variable values at the time of the breach. This promotes don\u2019t-repeat-yourself principle\n(<a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow\">DRY</a>) and spare the programmer the tedious task of repeating\nthe message that was already written in code.</p>\n<p>Second, icontract allows inheritance of the contracts and supports weakining of the preconditions\nas well as strengthening of the postconditions and invariants. Notably, weakining and strengthening of the contracts\nis a feature indispensable for modeling many non-trivial class hierarchies. Please see Section <a href=\"#inheritance\" rel=\"nofollow\">Inheritance</a>.\nTo the best of our knowledge, there is currently no other Python library that supports inheritance of the contracts in a\ncorrect way.</p>\n<p>In the long run, we hope that design-by-contract will be adopted and integrated in the language. Consider this library\na work-around till that happens. An ongoing discussion on how to bring design-by-contract into Python language can\nbe followed on <a href=\"https://groups.google.com/forum/#!topic/python-ideas/JtMgpSyODTU\" rel=\"nofollow\">python-ideas mailing list</a>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>icontract provides two function decorators, <tt>require</tt> and <tt>ensure</tt> for pre-conditions and post-conditions,\nrespectively. Additionally, it provides a class decorator, <tt>invariant</tt>, to establish class invariants.</p>\n<p>The <tt>condition</tt> argument specifies the contract and is usually written in lambda notation. In post-conditions,\ncondition function receives a reserved parameter <tt>result</tt> corresponding to the result of the function. The condition\ncan take as input a subset of arguments required by the wrapped function. This allows for very succinct conditions.</p>\n<p>You can provide an optional description by passing in <tt>description</tt> argument.</p>\n<p>Whenever a violation occurs, <tt>ViolationError</tt> is raised. Its message includes:</p>\n<ul>\n<li>the human-readable representation of the condition,</li>\n<li>description (if supplied) and</li>\n<li>representation of all the values.</li>\n</ul>\n<p>The representation of the values is obtained by re-executing the condition function programmatically by traversing\nits abstract syntax tree and filling the tree leaves with values held in the function frame. Mind that this re-execution\nwill also re-execute all the functions. Therefore you need to make sure that all the function calls involved\nin the condition functions do not have any side effects.</p>\n<p>If you want to customize the error, see Section \u201cCustom Errors\u201d.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Pre-condition violation</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Pre-condition violation with a description</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s2\">\"x must not be small\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">x</span> <span class=\"n\">must</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">small</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">3</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">1</span>\n\n<span class=\"c1\"># Pre-condition violation with more complex values</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">7</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">y</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"mi\">2</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"instance of B\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">-&gt;</span><span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"instance of A\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">SOME_GLOBAL_VAR</span> <span class=\"o\">=</span> <span class=\"mi\">13</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">SOME_GLOBAL_VAR</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">A</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">an_a</span> <span class=\"o\">=</span> <span class=\"n\">A</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">an_a</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">9</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"n\">SOME_GLOBAL_VAR</span><span class=\"p\">:</span>\n<span class=\"n\">SOME_GLOBAL_VAR</span> <span class=\"n\">was</span> <span class=\"mi\">13</span>\n<span class=\"n\">a</span> <span class=\"n\">was</span> <span class=\"n\">instance</span> <span class=\"n\">of</span> <span class=\"n\">A</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"n\">was</span> <span class=\"n\">instance</span> <span class=\"n\">of</span> <span class=\"n\">B</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">7</span>\n<span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">()</span> <span class=\"n\">was</span> <span class=\"mi\">2</span>\n\n<span class=\"c1\"># Post-condition</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">result</span> <span class=\"o\">&gt;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"n\">x</span> <span class=\"o\">-</span> <span class=\"n\">y</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">12</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">result</span> <span class=\"o\">&gt;</span> <span class=\"n\">x</span><span class=\"p\">:</span>\n<span class=\"n\">result</span> <span class=\"n\">was</span> <span class=\"mi\">5</span>\n<span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">10</span>\n</pre>\n<div id=\"invariants\">\n<h3>Invariants</h3>\n<p>Invariants are special contracts associated with an instance of a class. An invariant should hold <em>after</em> initialization\nand <em>before</em> and <em>after</em> a call to any public instance method. The invariants are the pivotal element of\ndesign-by-contract: they allow you to formally define properties of a data structures that you know will be maintained\nthroughout the life time of <em>every</em> instance.</p>\n<p>We consider the following methods to be \u201cpublic\u201d:</p>\n<ul>\n<li>All methods not prefixed with <tt>_</tt></li>\n<li>All magic methods (prefix <tt>__</tt> and suffix <tt>__</tt>)</li>\n</ul>\n<p>Class methods can not observe the invariant since they are not associated with an instance of the class.</p>\n<p>We exempt <tt>__getattribute__</tt>, <tt>__setattr__</tt> and <tt>__delattr__</tt> methods from observing the invariant since\nthese functions alter the state of the instance and thus can not be considered \u201cpublic\u201d.</p>\n<p>We also excempt <tt>__repr__</tt> method to prevent endless loops when generating error messages.</p>\n<p>The icontract invariants are implemented as class decorators.</p>\n<p>The following examples show various cases when an invariant is breached.</p>\n<p>After the initialization:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"some instance\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span> <span class=\"o\">=</span> <span class=\"n\">SomeClass</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">some</span> <span class=\"n\">instance</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre>\n<p>Before the invocation of a public method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"some instance\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span> <span class=\"o\">=</span> <span class=\"n\">SomeClass</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span><span class=\"o\">.</span><span class=\"n\">some_method</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">16</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">some</span> <span class=\"n\">instance</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre>\n<p>After the invocation of a public method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">some_method</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"some instance\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span> <span class=\"o\">=</span> <span class=\"n\">SomeClass</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span><span class=\"o\">.</span><span class=\"n\">some_method</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">20</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">some</span> <span class=\"n\">instance</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre>\n<p>After the invocation of a magic method:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">100</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__call__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"some instance\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span> <span class=\"o\">=</span> <span class=\"n\">SomeClass</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_instance</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">23</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">some</span> <span class=\"n\">instance</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n</pre>\n</div>\n<div id=\"snapshots-a-k-a-old-argument-values\">\n<h3>Snapshots (a.k.a \u201cold\u201d argument values)</h3>\n<p>Usual postconditions can not verify the state transitions of the function\u2019s argument values. For example, it is\nimpossible to verify in a postcondition that the list supplied as an argument was appended an element since the\npostcondition only sees the argument value as-is after the function invocation.</p>\n<p>In order to verify the state transitions, the postcondition needs the \u201cold\u201d state of the argument values\n(<em>i.e.</em> prior to the invocation of the function) as well as the current values (after the invocation).\n<tt>icontract.snapshot</tt> decorator instructs the checker to take snapshots of the argument values before the function call\nwhich are then supplied as <tt>OLD</tt> argument to the postcondition function.</p>\n<p><tt>icontract.snapshot</tt> takes a capture function which accepts none, one or more arguments of the function.\nYou set the name of the property in <tt>OLD</tt> as <tt>name</tt> argument to <tt>icontract.snapshot</tt>. If there is a single\nargument passed to the the capture function, the name of the <tt>OLD</tt> property can be omitted and equals the name\nof the argument.</p>\n<p>Here is an example that uses snapshots to check that a value was appended to the list:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">lst</span><span class=\"p\">[:])</span>\n<span class=\"o\">...</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">OLD</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">lst</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">])</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1984</span><span class=\"p\">)</span>  <span class=\"c1\"># bug</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">28</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">lst</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">]:</span>\n<span class=\"n\">OLD</span> <span class=\"n\">was</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">OLD</span> <span class=\"n\">values</span>\n<span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"n\">lst</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">]</span>\n<span class=\"n\">value</span> <span class=\"n\">was</span> <span class=\"mi\">3</span>\n</pre>\n<p>The following example shows how you can name the snapshot:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"len_lst\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">OLD</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">len_lst</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1984</span><span class=\"p\">)</span>  <span class=\"c1\"># bug</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">32</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">len_lst</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"n\">OLD</span> <span class=\"n\">was</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">OLD</span> <span class=\"n\">values</span>\n<span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">len_lst</span> <span class=\"n\">was</span> <span class=\"mi\">2</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"n\">was</span> <span class=\"mi\">4</span>\n<span class=\"n\">lst</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">]</span>\n</pre>\n<p>The next code snippet shows how you can combine multiple arguments of a function to be captured in a single snapshot:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"k\">lambda</span> <span class=\"n\">lst_a</span><span class=\"p\">,</span> <span class=\"n\">lst_b</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst_b</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"union\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"k\">lambda</span> <span class=\"n\">OLD</span><span class=\"p\">,</span> <span class=\"n\">lst_a</span><span class=\"p\">,</span> <span class=\"n\">lst_b</span><span class=\"p\">:</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst_b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">lst_b</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">])</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">lst_a</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1984</span><span class=\"p\">)</span>  <span class=\"c1\"># bug</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">lst_b</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">])</span>  <span class=\"c1\"># doctest: +ELLIPSIS</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">36</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"o\">...</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst_b</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">:</span>\n<span class=\"n\">OLD</span> <span class=\"n\">was</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">OLD</span> <span class=\"n\">values</span>\n<span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">union</span> <span class=\"n\">was</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">}</span>\n<span class=\"n\">lst_a</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">]</span>\n<span class=\"n\">lst_b</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">)</span> <span class=\"n\">was</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">}</span>\n<span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">lst_a</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">lst_b</span><span class=\"p\">)</span> <span class=\"n\">was</span> <span class=\"p\">{</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"inheritance\">\n<h3>Inheritance</h3>\n<p>To inherit the contracts of the parent class, the child class needs to either inherit from <tt>icontract.DBC</tt> or have\na meta class set to <tt>icontract.DBCMeta</tt>.</p>\n<p>When no contracts are specified in the child class, all contracts are inherited from the parent class as-are.</p>\n<p>When the child class introduces additional preconditions or postconditions and invariants, these contracts are\n<em>strengthened</em> or <em>weakened</em>, respectively. <tt>icontract.DBCMeta</tt> allows you to specify the contracts not only on the\nconcrete classes, but also on abstract classes.</p>\n<p><strong>Strengthening</strong>. If you specify additional invariants in the child class then the child class will need to satisfy\nall the invariants of its parent class as well as its own additional invariants. Analogously, if you specify additional\npostconditions to a function of the class, that function will need to satisfy both its own postconditions and\nthe postconditions of the original parent function that it overrides.</p>\n<p><strong>Weakining</strong>. Adding preconditions to a function in the child class weakens the preconditions. The caller needs to\nprovide either arguments that satisfy the preconditions associated with the function of the parent class <em>or</em>\narguments that satisfy the preconditions of the function of the child class.</p>\n<p><strong>Preconditions and Postconditions of __init__</strong>. Mind that <tt>__init__</tt> method is a special case. Since the constructor\nis exempt from polymorphism, preconditions and postconditions of base classes are <em>not</em> inherited for the\n<tt>__init__</tt> method. Only the preconditions and postconditions specified for the <tt>__init__</tt> method of the concrete\nclass apply.</p>\n<p><strong>Abstract Classes</strong>. Since Python 3 does not allow multiple meta classes, <tt>icontract.DBCMeta</tt> inherits from\n<tt>abc.ABCMeta</tt> to allow combining contracts with abstract base classes.</p>\n<p><strong>Snapshots</strong>. Snapshots are inherited from the base classes for computational efficiency.\nYou can use snapshots from the base classes as if they were defined in the concrete class.</p>\n<p>The following example shows an abstract parent class and a child class that inherits and strengthens parent\u2019s contracts:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">abc</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">DBC</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"n\">result</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"instance of A\"</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># Break intentionally the postcondition</span>\n<span class=\"o\">...</span>         <span class=\"c1\"># for an illustration</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"n\">y</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">break_parent_invariant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">break_my_invariant</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mi\">101</span>\n<span class=\"o\">...</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"s2\">\"instance of B\"</span>\n\n<span class=\"c1\"># Break the parent's postcondition</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_b</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">7</span> <span class=\"ow\">in</span> <span class=\"n\">A</span><span class=\"p\">:</span>\n<span class=\"n\">result</span> <span class=\"o\">&lt;</span> <span class=\"n\">y</span><span class=\"p\">:</span>\n<span class=\"n\">result</span> <span class=\"n\">was</span> <span class=\"mi\">1</span>\n<span class=\"n\">y</span> <span class=\"n\">was</span> <span class=\"mi\">0</span>\n\n<span class=\"c1\"># Break the parent's invariant</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">another_b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">another_b</span><span class=\"o\">.</span><span class=\"n\">break_parent_invariant</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">40</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">instance</span> <span class=\"n\">of</span> <span class=\"n\">B</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"o\">-</span><span class=\"mi\">1</span>\n\n<span class=\"c1\"># Break the child's invariant</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">yet_another_b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">yet_another_b</span><span class=\"o\">.</span><span class=\"n\">break_my_invariant</span><span class=\"p\">()</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">41</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"o\">&lt;</span> <span class=\"mi\">100</span><span class=\"p\">:</span>\n<span class=\"bp\">self</span> <span class=\"n\">was</span> <span class=\"n\">instance</span> <span class=\"n\">of</span> <span class=\"n\">B</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">101</span>\n</pre>\n<p>The following example shows how preconditions are weakened:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">DBC</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># The precondition of the parent is satisfied.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># The precondition of the child is satisfied,</span>\n<span class=\"c1\"># while the precondition of the parent is not.</span>\n<span class=\"c1\"># This is OK since the precondition has been</span>\n<span class=\"c1\"># weakened.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># None of the preconditions have been satisfied.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">49</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">2</span> <span class=\"ow\">in</span> <span class=\"n\">B</span><span class=\"p\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">5</span>\n</pre>\n<p>The example below illustrates how snaphots are inherited:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">DBC</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@abc</span><span class=\"o\">.</span><span class=\"n\">abstractmethod</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">snapshot</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">lst</span><span class=\"p\">[:])</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">OLD</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>     <span class=\"c1\"># The snapshot of OLD.lst has been defined in class A.</span>\n<span class=\"o\">...</span>     <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">ensure</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">OLD</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">lst</span> <span class=\"o\">==</span> <span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span> <span class=\"o\">+</span> <span class=\"p\">[</span><span class=\"n\">value</span><span class=\"p\">])</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">lst</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>         <span class=\"n\">lst</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"mi\">1984</span><span class=\"p\">)</span>  <span class=\"c1\"># bug</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"o\">.</span><span class=\"n\">ViolationError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">54</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">4</span> <span class=\"ow\">in</span> <span class=\"n\">A</span><span class=\"p\">:</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n<span class=\"n\">OLD</span> <span class=\"n\">was</span> <span class=\"n\">a</span> <span class=\"n\">bunch</span> <span class=\"n\">of</span> <span class=\"n\">OLD</span> <span class=\"n\">values</span>\n<span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">OLD</span><span class=\"o\">.</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"n\">was</span> <span class=\"mi\">2</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">lst</span><span class=\"p\">)</span> <span class=\"n\">was</span> <span class=\"mi\">4</span>\n<span class=\"n\">lst</span> <span class=\"n\">was</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1984</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"toggling-contracts\">\n<h3>Toggling Contracts</h3>\n<p>By default, the contract checks (including the snapshots) are always perfromed at run-time. To disable them, run the\ninterpreter in optimized mode (<tt><span class=\"pre\">-O</span></tt> or <tt><span class=\"pre\">-OO</span></tt>, see\n<a href=\"https://docs.python.org/3/using/cmdline.html#cmdoption-o\" rel=\"nofollow\">Python command-line options</a>).</p>\n<p>If you want to override this behavior, you can supply the <tt>enabled</tt> argument to the contract:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"mi\">123</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># The pre-condition is breached, but the check was disabled:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"mi\">123</span>\n</pre>\n<p>Icontract provides a global variable <tt>icontract.SLOW</tt> to provide a unified way to mark a plethora of contracts\nin large code bases. <tt>icontract.SLOW</tt> reflects the environment variable <tt>ICONTRACT_SLOW</tt>.</p>\n<p>While you may want to keep most contracts running both during the development and in the production, contracts\nmarked with <tt>icontract.SLOW</tt> should run only during the development (since they are too sluggish to execute in a real\napplication).</p>\n<p>If you want to enable contracts marked with <tt>icontract.SLOW</tt>, set the environment variable <tt>ICONTRACT_SLOW</tt> to a\nnon-empty string.</p>\n<p>Here is some example code:</p>\n<pre><span class=\"c1\"># some_module.py</span>\n<span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">enabled</span><span class=\"o\">=</span><span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">SLOW</span><span class=\"p\">)</span>\n    <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"mi\">123</span>\n\n<span class=\"c1\"># in test_some_module.py</span>\n<span class=\"kn\">import</span> <span class=\"nn\">unittest</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">TestSomething</span><span class=\"p\">(</span><span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_some_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">))</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">unittest</span><span class=\"o\">.</span><span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<p>Run this bash command to execute the unit test with slow contracts:</p>\n<pre>$ <span class=\"nv\">ICONTRACT_SLOW</span><span class=\"o\">=</span><span class=\"nb\">true</span> python test_some_module.py\n</pre>\n</div>\n<div id=\"id1\">\n<span id=\"custom-errors\"></span><h3>Custom Errors</h3>\n<p>Icontract raises <tt>ViolationError</tt> by default. However, you can also instruct icontract to raise a different error\nby supplying <tt>error</tt> argument to the decorator.</p>\n<p>The <tt>error</tt> argument can either be:</p>\n<ul>\n<li><p><strong>An exception class.</strong> The exception is constructed with the violation message and finally raised.</p>\n</li>\n<li><p><strong>A callable that returns an exception.</strong> The callable accepts the subset of arguments of the original function\n(including <tt>result</tt> and <tt>OLD</tt> for postconditions) or <tt>self</tt> in case of invariants, respectively,\nand returns an exception. The arguments to the condition function can freely differ from the arguments\nto the error function.</p>\n<p>The exception returned by the given callable is finally raised.</p>\n<p>If you specify the <tt>error</tt> argument as callable, the values will not be traced and the condition function will not\nbe parsed. Hence, violation of contracts with <tt>error</tt> arguments as callables incur a much smaller computational\noverhead in case of violations compared to contracts with default violation messages for which we need to  trace\nthe argument values and parse the condition function.</p>\n</li>\n</ul>\n<p>Here is an example of the error given as an exception class:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"ne\">ValueError</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"mi\">123</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># Custom Exception class</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">File</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">60</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">module</span><span class=\"o\">&gt;</span><span class=\"p\">:</span>\n<span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"n\">was</span> <span class=\"mi\">0</span>\n</pre>\n<p>Here is an example of the error given as a callable:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">,</span>\n<span class=\"o\">...</span>     <span class=\"n\">error</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'x must be positive, got: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)))</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">int</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">return</span> <span class=\"mi\">123</span>\n<span class=\"o\">...</span>\n\n<span class=\"c1\"># Custom Exception class</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"n\">must</span> <span class=\"n\">be</span> <span class=\"n\">positive</span><span class=\"p\">,</span> <span class=\"n\">got</span><span class=\"p\">:</span> <span class=\"mi\">0</span>\n</pre>\n<div>\n<p>!DANGER!</p>\n<p>Be careful when you write contracts with custom errors. This might lead the caller to (ab)use the contracts as\na control flow mechanism.</p>\n<p>In that case, the user will expect that the contract is <em>always</em> enabled and not only during debug or test.\n(For example, whenever you run Python interpreter with <tt><span class=\"pre\">-O</span></tt> or <tt><span class=\"pre\">-OO</span></tt>, <tt>__debug__</tt> will be <tt>False</tt>.\nIf you left <tt>enabled</tt> argument to its default <tt>__debug__</tt>, the contract will <em>not</em> be verified in\n<tt><span class=\"pre\">-O</span></tt> mode.)</p>\n</div>\n</div>\n<div id=\"implementation-details\">\n<h3>Implementation Details</h3>\n<p><strong>Decorator stack</strong>. The precondition and postcondition decorators have to be stacked together to allow for inheritance.\nHence, when multiple precondition and postcondition decorators are given, the function is actually decorated only once\nwith a precondition/postcondition checker while the contracts are stacked to the checker\u2019s <tt>__preconditions__</tt> and\n<tt>__postconditions__</tt> attribute, respectively. The checker functions iterates through these two attributes to verify\nthe contracts at run-time.</p>\n<p>All the decorators in the function\u2019s decorator stack are expected to call <tt>functools.update_wrapper()</tt>.\nNotably, we use <tt>__wrapped__</tt> attribute to iterate through the decorator stack and find the checker function which is\nset with <tt>functools.update_wrapper()</tt>. Mind that this implies that preconditions and postconditions are verified at\nthe inner-most decorator and <em>not</em> when outer preconditios and postconditions are defined.</p>\n<p>Consider the following example:</p>\n<pre><span class=\"nd\">@some_custom_decorator</span>\n<span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"nd\">@another_custom_decorator</span>\n<span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"n\">y</span> <span class=\"o\">&lt;</span> <span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n  <span class=\"c1\"># ...</span>\n</pre>\n<p>The checker function will verify the two preconditions after both <tt>some_custom_decorator</tt> and\n<tt>another_custom_decorator</tt> have been applied, whily you would expect that the outer precondition (<tt>x &gt; 0</tt>)\nis verified immediately after <tt>some_custom_decorator</tt> is applied.</p>\n<p>To prevent bugs due to unexpected behavior, we recommend to always group preconditions and postconditions together.</p>\n<p><strong>Invariants</strong>. Since invariants are handled by a class decorator (in contrast to function decorators that handle\npreconditions and postconditions), they do not need to be stacked. The first invariant decorator wraps each public\nmethod of a class with a checker function. The invariants are added to the class\u2019 <tt>__invariants__</tt> attribute.\nAt run-time, the checker function iterates through the <tt>__invariants__</tt> attribute when it needs to actually verify the\ninvariants.</p>\n<p>Mind that we still expect each class decorator that decorates the class functions to use <tt>functools.update_wrapper()</tt>\nin order to be able to iterate through decorator stacks of the individual functions.</p>\n<p><strong>Recursion in contracts</strong>. In certain cases functions depend on each other through contracts. Consider the following\nsnippet:</p>\n<pre><span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">another_func</span><span class=\"p\">())</span>\n<span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">some_func</span><span class=\"p\">())</span>\n<span class=\"k\">def</span> <span class=\"nf\">another_func</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n\n<span class=\"n\">some_func</span><span class=\"p\">()</span>\n</pre>\n<p>Na\u00efvely evaluating such preconditions and postconditions would result in endless recursions. Therefore, icontract\nsuspends any further contract checking for a function when re-entering it for the second time while checking its\ncontracts.</p>\n<p>Invariants depending on the instance methods would analogously result in endless recursions. The following snippet\ngives an example of such an invariant:</p>\n<pre><span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">invariant</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"bp\">self</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">some_func</span><span class=\"p\">())</span>\n<span class=\"k\">class</span> <span class=\"nc\">SomeClass</span><span class=\"p\">(</span><span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">DBC</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n        <span class=\"o\">...</span>\n</pre>\n<p>To avoid endless recursion icontract suspends further invariant checks while checking an invariant. The dunder\n<tt>__dbc_invariant_check_is_in_progress__</tt> is set on the instance for a diode effect as soon as invariant check is\nin progress and removed once the invariants checking finished. As long as the dunder\n<tt>__dbc_invariant_check_is_in_progress__</tt> is present, the wrappers that check invariants simply return the result of\nthe function.</p>\n</div>\n<div id=\"linter\">\n<h3>Linter</h3>\n<p>We provide a linter that statically verifies the arguments of the contracts (<em>i.e.</em> that they are\nwell-defined with respect to the function). The tool is available as a separate package,\n<a href=\"https://pypi.org/project/pyicontract-lint\" rel=\"nofollow\">pyicontract-lint</a>.</p>\n</div>\n<div id=\"sphinx\">\n<h3>Sphinx</h3>\n<p>We implemented a Sphinx extension to include contracts in the documentation. The extension is available as a package\n<a href=\"https://pypi.org/project/sphinx-icontract\" rel=\"nofollow\">sphinx-icontract</a>.</p>\n</div>\n</div>\n<div id=\"known-issues\">\n<h2>Known Issues</h2>\n<p><strong>Integration with ``help()``</strong>. We wanted to include the contracts in the output of <tt>help()</tt>. Unfortunately,\n<tt>help()</tt> renders the <tt>__doc__</tt> of the class and not of the instance. For functions, this is the class\n\u201cfunction\u201d which you can not inherit from. See this\n<a href=\"https://groups.google.com/forum/#!topic/python-ideas/c9ntrVuh6WE\" rel=\"nofollow\">discussion on python-ideas</a> for more details.</p>\n<p><strong>Defining contracts outside of decorators</strong>. We need to inspect the source code of the condition and error lambdas to\ngenerate the violation message and infer the error type in the documentation, respectively. <tt><span class=\"pre\">inspect.getsource(.)</span></tt>\nis broken on lambdas defined in decorators in Python 3.5.2+ (see\n<a href=\"https://bugs.python.org/issue21217\" rel=\"nofollow\">this bug report</a>). We circumvented this bug by using <tt><span class=\"pre\">inspect.findsource(.)</span></tt>,\n<tt><span class=\"pre\">inspect.getsourcefile(.)</span></tt> and examining the local source code of the lambda by searching for other decorators\nabove and other decorators and a function or class definition below. The decorator code is parsed and then we match\nthe condition and error arguments in the AST of the decorator. This is brittle as it prevents us from having\npartial definitions of contract functions or from sharing the contracts among functions.</p>\n<p>Here is a short code snippet to demonstrate where the current implementation fails:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">require_x_positive</span> <span class=\"o\">=</span> <span class=\"n\">icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@require_x_positive</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">pass</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">some_func</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n<span class=\"ne\">SyntaxError</span><span class=\"p\">:</span> <span class=\"n\">Decorator</span> <span class=\"n\">corresponding</span> <span class=\"n\">to</span> <span class=\"n\">the</span> <span class=\"n\">line</span> <span class=\"mi\">1</span> <span class=\"n\">could</span> <span class=\"ow\">not</span> <span class=\"n\">be</span> <span class=\"n\">found</span> <span class=\"ow\">in</span> <span class=\"n\">file</span> <span class=\"o\">&lt;</span><span class=\"n\">doctest</span> <span class=\"n\">README</span><span class=\"o\">.</span><span class=\"n\">rst</span><span class=\"p\">[</span><span class=\"mi\">64</span><span class=\"p\">]</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"s1\">'require_x_positive = icontract.require(lambda x: x &gt; 0)</span><span class=\"se\">\\n</span><span class=\"s1\">'</span>\n</pre>\n<p>However, we haven\u2019t faced a situation in the code base where we would do something like the above, so we are unsure\nwhether this is a big issue. As long as decorators are directly applied to functions and classes, everything\nworked fine on our code base.</p>\n</div>\n<div id=\"benchmarks\">\n<h2>Benchmarks</h2>\n<p>We evaluated the computational costs incurred by using icontract in a couple of experiments. There are basically two\ntypes of costs caused by icontract: 1) extra parsing performed when you import the module regardless whether conditions\nare switched on or off and 2) run-time cost of verifying the contract.</p>\n<p>We assumed in all the experiments that the contract breaches are exceptionally seldom and thus need not to be analyzed.\nIf you are interested in these additional expereminets, please do let us know and create an issue on the github page.</p>\n<p>The source code of the benchmarks is available in\n<a href=\"https://github.com/Parquery/icontract/tree/master/benchmarks\" rel=\"nofollow\">this directory</a>.\nAll experiments were performed with Python 3.5.2+ on Intel(R) Core(TM) i7-4700MQ CPU @ 2.40GHz with 8 cores and\n4 GB RAM.</p>\n<p>We execute a short timeit snippet to bring the following measurements into context:</p>\n<pre>python3 -m timeit -s <span class=\"s1\">'import math'</span> <span class=\"s1\">'math.sqrt(1984.1234)'</span>\n<span class=\"m\">10000000</span> loops, best of <span class=\"m\">3</span>: <span class=\"m\">0</span>.0679 usec per loop\n</pre>\n<div id=\"import-cost\">\n<h3>Import Cost</h3>\n<p><strong>Pre and post-conditions.</strong>\nWe generated a module with 100 functions. For each of these functions, we introduced a variable number of conditions and\nstop-watched how long it takes to import the module over 10 runs. Finally, we compared the import time of the module\nwith contracts against the same module without any contracts in the code.</p>\n<p>The overhead is computed as the time difference between the total import time compared to the total import time of the\nmodule without the contracts.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Number of conditions per function</th>\n<th>Total import time [milliseconds]</th>\n<th>Overhead [milliseconds]</th>\n<th>Overhead per condition and function [milliseconds]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>None</td>\n<td>795.59 \u00b1 10.47</td>\n<td>N/A</td>\n<td>N/A</td>\n</tr>\n<tr><td>1</td>\n<td>919.53 \u00b1 61.22</td>\n<td>123.93</td>\n<td>1.24</td>\n</tr>\n<tr><td>5</td>\n<td>1075.81 \u00b1 59.87</td>\n<td>280.22</td>\n<td>0.56</td>\n</tr>\n<tr><td>10</td>\n<td>1290.22 \u00b1 90.04</td>\n<td>494.63</td>\n<td>0.49</td>\n</tr>\n<tr><td>1 disabled</td>\n<td>833.60 \u00b1 32.07</td>\n<td>37.41</td>\n<td>0.37</td>\n</tr>\n<tr><td>5 disabled</td>\n<td>851.31 \u00b1 66.93</td>\n<td>55.72</td>\n<td>0.11</td>\n</tr>\n<tr><td>10 disabled</td>\n<td>897.90 \u00b1 143.02</td>\n<td>101.41</td>\n<td>0.10</td>\n</tr>\n</tbody>\n</table>\n<p>As we can see in the table above, the overhead per condition is quite minimal (1.24 milliseconds in case of a single\nenabled contract). The overhead decreases as you add more conditions since the icontract has already initialized all the\nnecessary fields in the function objects.</p>\n<p>When you disable the conditions, there is much less overhead (only 0.37 milliseconds, and decreasing). Since icontract\nreturns immediately when the condition is disabled by implementation, we assume that the overhead coming from disabled\nconditions is mainly caused by Python interpreter parsing the code.</p>\n<p><strong>Invariants</strong>. Analogously, to measure the overhead of the invariants, we generated a module with 100 classes.\nWe varied the number of invariant conditions per class and measure the import time over 10 runs. The results\nare presented in the following table.</p>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Number of conditions per class</th>\n<th>Total import time [milliseconds]</th>\n<th>Overhead [milliseconds]</th>\n<th>Overhead per condition and class [milliseconds]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>None</td>\n<td>843.61 \u00b1 28.21</td>\n<td>N/A</td>\n<td>N/A</td>\n</tr>\n<tr><td>1</td>\n<td>3409.71 \u00b1 95.78</td>\n<td>2566.1</td>\n<td>25.66</td>\n</tr>\n<tr><td>5</td>\n<td>4005.93 \u00b1 131.97</td>\n<td>3162.32</td>\n<td>6.32</td>\n</tr>\n<tr><td>10</td>\n<td>4801.82 \u00b1 157.56</td>\n<td>3958.21</td>\n<td>3.96</td>\n</tr>\n<tr><td>1 disabled</td>\n<td>885.88 \u00b1 44.24</td>\n<td>42.27</td>\n<td>0.42</td>\n</tr>\n<tr><td>5 disabled</td>\n<td>912.53 \u00b1 101.91</td>\n<td>68.92</td>\n<td>0.14</td>\n</tr>\n<tr><td>10 disabled</td>\n<td>963.77 \u00b1 161.76</td>\n<td>120.16</td>\n<td>0.12</td>\n</tr>\n</tbody>\n</table>\n<p>Similar to pre and post-conditions, there is decreasing cost per condition as number of conditions increases since the\nicontract has all set up the fields in the class metadata. However, invariants are much more costly compared to pre and\npostconditions and their overhead should be considered if import time needs to be kept minimal.</p>\n<p>The overhead of the disabled invariants is attributed to the overhead of parsing the source file as icontract\nimmediately returns from disabled invariants by implementation.</p>\n</div>\n<div id=\"run-time-cost\">\n<h3>Run-time Cost</h3>\n<p>We constructed four modules around a function which computes a square root. We used <tt>timeit</tt> module to measure the\nperformance. Each module was imported as part of the setup.</p>\n<p><strong>No precondition</strong>. This module does not check any preconditions and serves as a baseline.</p>\n<p><strong>Pre-condition as assert</strong>. We check pre-conditions by an assert statement.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">my_sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Pre-condition as separate function</strong>. To mimick a more complex pre-condition, we encapsulate the assert in a separate\nfunction.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">check_non_negative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"k\">assert</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"n\">check_non_negative</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Pre-condition with icontract</strong>. Finally, we compare against a module that uses icontract.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">math</span>\n<span class=\"kn\">import</span> <span class=\"nn\">icontract</span>\n\n<span class=\"nd\">@icontract</span><span class=\"o\">.</span><span class=\"n\">require</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">&gt;=</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">math</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Pre-condition with icontract, disabled</strong>. We also perform a redundant check to verify that a disabled condition\ndoes not incur any run-time cost.</p>\n<p>The following table sumarizes the timeit results (10000000 loops, best of 3). The run time of the baseline is computed\nas:</p>\n<p>The run time of the other functions is computed analogously.</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Precondition</th>\n<th>Run time [microseconds]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>None</td>\n<td>0.168</td>\n</tr>\n<tr><td>As assert</td>\n<td>0.203</td>\n</tr>\n<tr><td>As function</td>\n<td>0.274</td>\n</tr>\n<tr><td>icontract</td>\n<td>2.78</td>\n</tr>\n<tr><td>icontract, disabled</td>\n<td>0.165</td>\n</tr>\n</tbody>\n</table>\n<p>The overhead of icontract is substantial. While this may be prohibitive for points where computational efficiency is\nmore important than correctness, mind that the overhead is still in order of microseconds. In most practical scenarios,\nwhere a function is more complex and takes longer than a few microseconds to execute, such a tiny overhead is\njustified by the gains in correctness, development and maintenance time.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ul>\n<li>Install icontract with pip:</li>\n</ul>\n<pre>pip3 install icontract\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<ul>\n<li>Check out the repository.</li>\n<li>In the repository root, create the virtual environment:</li>\n</ul>\n<pre>python3 -m venv venv3\n</pre>\n<ul>\n<li>Activate the virtual environment:</li>\n</ul>\n<pre><span class=\"nb\">source</span> venv3/bin/activate\n</pre>\n<ul>\n<li>Install the development dependencies:</li>\n</ul>\n<pre>pip3 install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n</pre>\n<ul>\n<li>We use tox for testing and packaging the distribution. Run:</li>\n</ul>\n<pre>tox\n</pre>\n<ul>\n<li>We also provide a set of pre-commit checks that lint and check code for formatting. Run them locally from an activated\nvirtual environment with development dependencies:</li>\n</ul>\n<pre>./precommit.py\n</pre>\n<ul>\n<li>The pre-commit script can also automatically format the code:</li>\n</ul>\n<pre>./precommit.py  --overwrite\n</pre>\n</div>\n<div id=\"versioning\">\n<h2>Versioning</h2>\n<p>We follow <a href=\"http://semver.org/spec/v1.0.0.html\" rel=\"nofollow\">Semantic Versioning</a>. The version X.Y.Z indicates:</p>\n<ul>\n<li>X is the major version (backward-incompatible),</li>\n<li>Y is the minor version (backward-compatible), and</li>\n<li>Z is the patch version (backward-compatible bug fix).</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7135484, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "cd8d6c2ff809b2fce931167307e8030a", "sha256": "568958d5d2fc498ab4013da3d887811f774b1f1420b70a321ed194460ecbc28b"}, "downloads": -1, "filename": "icontract-1.0.0.tar.gz", "has_sig": false, "md5_digest": "cd8d6c2ff809b2fce931167307e8030a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5117, "upload_time": "2018-07-31T08:55:16", "upload_time_iso_8601": "2018-07-31T08:55:16.066907Z", "url": "https://files.pythonhosted.org/packages/00/15/0b9a75566a82385c32d8c802fe06a63456d5667493a5b365b4b485007321/icontract-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "fe81555dfd21d4cad6c940ebc0aa6ab3", "sha256": "2d828062819ee039214ce681a1cce24b70311fda696c5f1109011c1f40fd0459"}, "downloads": -1, "filename": "icontract-1.0.1.tar.gz", "has_sig": false, "md5_digest": "fe81555dfd21d4cad6c940ebc0aa6ab3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5146, "upload_time": "2018-07-31T09:13:54", "upload_time_iso_8601": "2018-07-31T09:13:54.562047Z", "url": "https://files.pythonhosted.org/packages/42/68/4920a167126004a2189a70f9d6639a1fd446cd682adbb0793dd757a787fe/icontract-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "a80a164fc9c057ecf8cb3dea14be4c2c", "sha256": "04bac15f3de2c75460942f56686958c2142915a25d7690bc4058edf4f9f01dfa"}, "downloads": -1, "filename": "icontract-1.0.2.tar.gz", "has_sig": false, "md5_digest": "a80a164fc9c057ecf8cb3dea14be4c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5408, "upload_time": "2018-08-07T14:28:39", "upload_time_iso_8601": "2018-08-07T14:28:39.136966Z", "url": "https://files.pythonhosted.org/packages/96/47/758a64fbbfb7c8d7b3d56a08b5ba001af58b89f0dd440b7fc35e46fd7cae/icontract-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "2ddbf482698dc74bbc8b06e26e03de70", "sha256": "f68c34f6cd59c9045232e31bb1a85ae7612b9f3ebc0f521f0da1992b9b4f3d9b"}, "downloads": -1, "filename": "icontract-1.0.3.tar.gz", "has_sig": false, "md5_digest": "2ddbf482698dc74bbc8b06e26e03de70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5473, "upload_time": "2018-08-07T15:06:59", "upload_time_iso_8601": "2018-08-07T15:06:59.345668Z", "url": "https://files.pythonhosted.org/packages/05/a2/ae12bfd843df7e8097d6704a2114527bc29e19d3f9758d6bcc29b8628083/icontract-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "6869994c08d29efebb33909e10ab6331", "sha256": "c81ddee2ac2035364699e243aed7d3ec6a965bdd72562edb71e5cbd6ed8ef665"}, "downloads": -1, "filename": "icontract-1.1.0.tar.gz", "has_sig": false, "md5_digest": "6869994c08d29efebb33909e10ab6331", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9335, "upload_time": "2018-08-13T09:51:49", "upload_time_iso_8601": "2018-08-13T09:51:49.424042Z", "url": "https://files.pythonhosted.org/packages/f5/ab/093406f1f0db212bf079ad8bbae9143f425eb2a282129be4dc97de6d7f4a/icontract-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "0295ab894061c657849e6a2e974e7a1b", "sha256": "a42beb419538edecfc79c0a36aa6f3915cbc782716d25eae5467371d92b85642"}, "downloads": -1, "filename": "icontract-1.2.0.tar.gz", "has_sig": false, "md5_digest": "0295ab894061c657849e6a2e974e7a1b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9960, "upload_time": "2018-08-13T13:24:40", "upload_time_iso_8601": "2018-08-13T13:24:40.309208Z", "url": "https://files.pythonhosted.org/packages/3d/24/759b998ab3969fd5624c3a64c1ad3e5d564b4b64a188c86e0490ca14e85e/icontract-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "af3a8a40005a9a4f4f5d5249f7302814", "sha256": "bb333d33b6d095077318868605fcfc9d9105fef22dba6b79c030419c7fc6843c"}, "downloads": -1, "filename": "icontract-1.2.1.tar.gz", "has_sig": false, "md5_digest": "af3a8a40005a9a4f4f5d5249f7302814", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10729, "upload_time": "2018-08-14T17:02:13", "upload_time_iso_8601": "2018-08-14T17:02:13.519252Z", "url": "https://files.pythonhosted.org/packages/89/57/074a46c07aa6d8ecdf11010400ae467efca8751aaa4e60bc0a3e81889025/icontract-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "1b11ccc329daffca4b693d42c4b8dbe9", "sha256": "797cc25e8dc01737434947524d9d693d6fa3cb674de62267c0c93371a75febb8"}, "downloads": -1, "filename": "icontract-1.2.2.tar.gz", "has_sig": false, "md5_digest": "1b11ccc329daffca4b693d42c4b8dbe9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11176, "upload_time": "2018-08-28T05:35:00", "upload_time_iso_8601": "2018-08-28T05:35:00.584874Z", "url": "https://files.pythonhosted.org/packages/43/22/decdcf7a63ef7544697718e3bccd18f07fd42b7d196219e9f751d09ff7f7/icontract-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "bd9e0effc98046bcf702db716c804515", "sha256": "9c47dab4db6e91ad0e556bd53c0a3d47d1bd021d675b8d6f2db2ef8f863d6c7d"}, "downloads": -1, "filename": "icontract-1.2.3.tar.gz", "has_sig": false, "md5_digest": "bd9e0effc98046bcf702db716c804515", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11540, "upload_time": "2018-08-28T11:31:29", "upload_time_iso_8601": "2018-08-28T11:31:29.855672Z", "url": "https://files.pythonhosted.org/packages/00/35/faeaaab246bf560c955c59a79088e83a495c68998cb14dc747fa8cd73268/icontract-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "8a0ca3d6916886e9070d843bca9eea6c", "sha256": "ea8daf41947d0868da33dd0f3b9b3cfacbce2cf2150fd6b8280d092c7cd15b79"}, "downloads": -1, "filename": "icontract-1.3.0.tar.gz", "has_sig": false, "md5_digest": "8a0ca3d6916886e9070d843bca9eea6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12315, "upload_time": "2018-08-29T06:33:55", "upload_time_iso_8601": "2018-08-29T06:33:55.746981Z", "url": "https://files.pythonhosted.org/packages/64/94/bbe396901c1c4fc243f34ac59cb153e41c30b7001715c2c463280ff68744/icontract-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "d7ae4e5b9b3d9f538d999eb2f4491ec0", "sha256": "ddd8df95b70edf8ff5fc4cf0fedacf3c5d2975b2d4d80d6e63fe383b39c871a4"}, "downloads": -1, "filename": "icontract-1.4.0.tar.gz", "has_sig": false, "md5_digest": "d7ae4e5b9b3d9f538d999eb2f4491ec0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13872, "upload_time": "2018-08-29T21:41:07", "upload_time_iso_8601": "2018-08-29T21:41:07.332851Z", "url": "https://files.pythonhosted.org/packages/7d/94/90856e49e74168107fdfac3d0ccedaf8e6ad0e79002ae5805bf872445aaa/icontract-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "cf575f514a88901fbc742a60ad839e87", "sha256": "22dba4b8a40351ebd31992602180d4ff9835f1a83473997a012ec4ce2143e35f"}, "downloads": -1, "filename": "icontract-1.4.1.tar.gz", "has_sig": false, "md5_digest": "cf575f514a88901fbc742a60ad839e87", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14277, "upload_time": "2018-08-31T13:15:14", "upload_time_iso_8601": "2018-08-31T13:15:14.999467Z", "url": "https://files.pythonhosted.org/packages/68/46/be05b7441fe257784539c860ae451402dfc10fbf4fa2bb0c59f092d94685/icontract-1.4.1.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "b714dbf8c86f78b543531460f06aec3b", "sha256": "3e72c7761652261e82bfad842d9f1b45df0b0c6ec230e1bede16c36601aecc28"}, "downloads": -1, "filename": "icontract-1.5.0.tar.gz", "has_sig": false, "md5_digest": "b714dbf8c86f78b543531460f06aec3b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18317, "upload_time": "2018-09-10T07:19:56", "upload_time_iso_8601": "2018-09-10T07:19:56.908335Z", "url": "https://files.pythonhosted.org/packages/bc/50/453929b8a79d2e78386be2c179d94353422d0cd17f536d0e37a8683e3998/icontract-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "755cbce49e8f3f741b108328ee1654c9", "sha256": "56faa654bd1e3af587b48e7fd70542e22f9b0724ce8e9655c26b7ffa46895c21"}, "downloads": -1, "filename": "icontract-1.5.1.tar.gz", "has_sig": false, "md5_digest": "755cbce49e8f3f741b108328ee1654c9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18910, "upload_time": "2018-09-11T13:05:51", "upload_time_iso_8601": "2018-09-11T13:05:51.239386Z", "url": "https://files.pythonhosted.org/packages/9e/77/429f25d1c2beae73218807436e62aa32acc08de65bccd566cfff67767c98/icontract-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "c889a17da50899f6bf39adac2f4c8d61", "sha256": "0401bf6114252d2a08086e141477fc846e43d6f88b571ac5382cd9ab5200de69"}, "downloads": -1, "filename": "icontract-1.5.2.tar.gz", "has_sig": false, "md5_digest": "c889a17da50899f6bf39adac2f4c8d61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19858, "upload_time": "2018-09-13T21:21:23", "upload_time_iso_8601": "2018-09-13T21:21:23.417875Z", "url": "https://files.pythonhosted.org/packages/ff/99/d59adc44c76afe8200bc0df7298e565e11a8d69cf3ca93ee248cd6bcefd5/icontract-1.5.2.tar.gz", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "9396e8ed734886ba0bd8ccb04e8f9d71", "sha256": "084dde73f2dfec84fc9cf03c00b82bb962c14274012493689df1d001e3820e7f"}, "downloads": -1, "filename": "icontract-1.5.3.tar.gz", "has_sig": false, "md5_digest": "9396e8ed734886ba0bd8ccb04e8f9d71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20179, "upload_time": "2018-09-13T22:23:42", "upload_time_iso_8601": "2018-09-13T22:23:42.676185Z", "url": "https://files.pythonhosted.org/packages/60/f7/c714757733a5f4f4078223028558f6f4d1f30d8c556a1b5774ff844fdfa3/icontract-1.5.3.tar.gz", "yanked": false}], "1.5.4": [{"comment_text": "", "digests": {"md5": "49709a9e0c92e5c26b30f44464125137", "sha256": "29ab71a9973f647b2e1f7df837c03f35caa7fafcb234fd578f22e06c959af13a"}, "downloads": -1, "filename": "icontract-1.5.4.tar.gz", "has_sig": false, "md5_digest": "49709a9e0c92e5c26b30f44464125137", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21168, "upload_time": "2018-09-18T15:54:54", "upload_time_iso_8601": "2018-09-18T15:54:54.863601Z", "url": "https://files.pythonhosted.org/packages/b8/d7/bff8505cd229281bc0b0d6f6bb0ec3005176e789ad7417f0f273ef52a326/icontract-1.5.4.tar.gz", "yanked": false}], "1.5.5": [{"comment_text": "", "digests": {"md5": "052eb5d4c4d84a698048792f9407cda0", "sha256": "37649e88326d6637702d75c99c1193735c39b25e3795c197ecd6ce1650ba02c7"}, "downloads": -1, "filename": "icontract-1.5.5.tar.gz", "has_sig": false, "md5_digest": "052eb5d4c4d84a698048792f9407cda0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20569, "upload_time": "2018-09-20T20:15:18", "upload_time_iso_8601": "2018-09-20T20:15:18.956244Z", "url": "https://files.pythonhosted.org/packages/27/58/e4d43311dbd016e1119c407134d298166d1be63c42aae272e7414eb3a582/icontract-1.5.5.tar.gz", "yanked": false}], "1.5.6": [{"comment_text": "", "digests": {"md5": "24c009f37e957beb5786a7699722fec7", "sha256": "c7c5318d51204a90e3015af5c299013bac54476d1790b4c020602968b4fa2945"}, "downloads": -1, "filename": "icontract-1.5.6.tar.gz", "has_sig": false, "md5_digest": "24c009f37e957beb5786a7699722fec7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22463, "upload_time": "2018-09-30T20:57:48", "upload_time_iso_8601": "2018-09-30T20:57:48.182229Z", "url": "https://files.pythonhosted.org/packages/7c/06/f8498d120ad61fa9f31caa2b12a87970f3e505e3d7df535668b4ac586805/icontract-1.5.6.tar.gz", "yanked": false}], "1.5.7": [{"comment_text": "", "digests": {"md5": "2c9d80efb3b7735e052c017392f27c97", "sha256": "68a47d3f5cc47889f5951567255af53c9ad0619b636e87b33df2333f488d44ba"}, "downloads": -1, "filename": "icontract-1.5.7.tar.gz", "has_sig": false, "md5_digest": "2c9d80efb3b7735e052c017392f27c97", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23404, "upload_time": "2018-10-01T15:20:40", "upload_time_iso_8601": "2018-10-01T15:20:40.413571Z", "url": "https://files.pythonhosted.org/packages/9a/59/c33f6573065b6d257ef749e654135743210975ed9f82dbd409cd5c30a0f5/icontract-1.5.7.tar.gz", "yanked": false}], "1.5.8": [{"comment_text": "", "digests": {"md5": "0add923e86de48e4e6274e2db56cfb13", "sha256": "6c7ae7ccb8d8833b6054c95357804010d1e82db0c923c2e53980854f53e24db1"}, "downloads": -1, "filename": "icontract-1.5.8.tar.gz", "has_sig": false, "md5_digest": "0add923e86de48e4e6274e2db56cfb13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23252, "upload_time": "2018-10-10T05:15:05", "upload_time_iso_8601": "2018-10-10T05:15:05.888348Z", "url": "https://files.pythonhosted.org/packages/8f/48/7ca971f2c0211b913a8db1f63ef5a7600ebdc19bd08e50b117cf46d0a19d/icontract-1.5.8.tar.gz", "yanked": false}], "1.5.9": [{"comment_text": "", "digests": {"md5": "12401c146320dbbc1fea15b38449d545", "sha256": "90416fef3d58bc032032dcbc359629141d7404dd9c2711842aaf2efc76296546"}, "downloads": -1, "filename": "icontract-1.5.9.tar.gz", "has_sig": false, "md5_digest": "12401c146320dbbc1fea15b38449d545", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22738, "upload_time": "2018-10-10T05:30:43", "upload_time_iso_8601": "2018-10-10T05:30:43.821476Z", "url": "https://files.pythonhosted.org/packages/39/b5/0d2fc8f844cf69a7abe88275159a13397fb416da77d08e8846b1c9838bd9/icontract-1.5.9.tar.gz", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "80a73a9e67b4ab41ce459096c4e7fa47", "sha256": "7ac096a0a57804896ad0eee098a9e959e79506a8e083db9afff0e7ce43781a29"}, "downloads": -1, "filename": "icontract-1.6.0.tar.gz", "has_sig": false, "md5_digest": "80a73a9e67b4ab41ce459096c4e7fa47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23876, "upload_time": "2018-10-11T07:06:02", "upload_time_iso_8601": "2018-10-11T07:06:02.403288Z", "url": "https://files.pythonhosted.org/packages/ef/cb/ff67e8ce4551c703e536edc76b0afa467ac4669af1a55fea8ac79e5c11ab/icontract-1.6.0.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "cde07bb0daca9e71801ccc5488705d59", "sha256": "43b4a9fc92bef85f70258b2f8f7c4849c9ad424602795c9018616679381be90c"}, "downloads": -1, "filename": "icontract-1.6.1.tar.gz", "has_sig": false, "md5_digest": "cde07bb0daca9e71801ccc5488705d59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23811, "upload_time": "2018-10-16T16:14:18", "upload_time_iso_8601": "2018-10-16T16:14:18.459112Z", "url": "https://files.pythonhosted.org/packages/20/c2/68e5e53d2c744f6fecc4fe1b7e24299b13263086c21b304f3fadf509da48/icontract-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "46c7a794962316fac1afa4da4b0c0276", "sha256": "96aad75c323a910fe53b962dc8ee57b684584a0c25a98ec10967bf4553a184dc"}, "downloads": -1, "filename": "icontract-1.7.0.tar.gz", "has_sig": false, "md5_digest": "46c7a794962316fac1afa4da4b0c0276", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32818, "upload_time": "2018-10-20T06:43:02", "upload_time_iso_8601": "2018-10-20T06:43:02.889111Z", "url": "https://files.pythonhosted.org/packages/ac/dd/7b4626c8fc12e9ef10c514abc8cdae16fefa9ec4bb76910c56e05d850da6/icontract-1.7.0.tar.gz", "yanked": false}], "1.7.1": [{"comment_text": "", "digests": {"md5": "f5d214c3873f9e9222a4494b8956babc", "sha256": "e1cc6127104a10653801c17967d01b67d402152ec01964f10ede56435cf5a065"}, "downloads": -1, "filename": "icontract-1.7.1.tar.gz", "has_sig": false, "md5_digest": "f5d214c3873f9e9222a4494b8956babc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33468, "upload_time": "2018-10-21T05:34:59", "upload_time_iso_8601": "2018-10-21T05:34:59.745542Z", "url": "https://files.pythonhosted.org/packages/f0/55/6717ac2b27590bcd48c3bc294283245a4b108ccc4ddaaa94df88ead0b7f5/icontract-1.7.1.tar.gz", "yanked": false}], "1.7.2": [{"comment_text": "", "digests": {"md5": "c1287f89fd381bbc7e1372cfc52708b5", "sha256": "0ec33be4d4b17f60e2aaeb723f51fbddbbb8a029942413967b5912d607fa150d"}, "downloads": -1, "filename": "icontract-1.7.2.tar.gz", "has_sig": false, "md5_digest": "c1287f89fd381bbc7e1372cfc52708b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33315, "upload_time": "2018-10-23T05:53:08", "upload_time_iso_8601": "2018-10-23T05:53:08.990575Z", "url": "https://files.pythonhosted.org/packages/4a/17/56cc62a9f56ca81706452733260b0b59a11acdc6adf918ae8d009fb292ec/icontract-1.7.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "b84f4b3b55083e41d4ef5d45f4317909", "sha256": "9ba2b535395a220e5a19e2ddf093f91dfd168d50d90312deefd0f479379040bd"}, "downloads": -1, "filename": "icontract-2.0.0.tar.gz", "has_sig": false, "md5_digest": "b84f4b3b55083e41d4ef5d45f4317909", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33524, "upload_time": "2018-10-24T05:20:44", "upload_time_iso_8601": "2018-10-24T05:20:44.146467Z", "url": "https://files.pythonhosted.org/packages/d6/62/5f8ec96e187f4f51c9e1c77224d82af6e25eb6fdd831b2f521a8c9f95569/icontract-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "3537bbea3e7edb0f4606fce5ea7fcc88", "sha256": "ec75d2b7d70ad38f3bdea7f7de37c36ec8f9514182874734f9bb96ab4b1909f3"}, "downloads": -1, "filename": "icontract-2.0.1.tar.gz", "has_sig": false, "md5_digest": "3537bbea3e7edb0f4606fce5ea7fcc88", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33608, "upload_time": "2018-10-25T20:49:23", "upload_time_iso_8601": "2018-10-25T20:49:23.743400Z", "url": "https://files.pythonhosted.org/packages/9c/54/b2d96d93994ed393a4e433055e83dc04274c662fd6545d9a42cbc74645f3/icontract-2.0.1.tar.gz", "yanked": false}], "2.0.2": [{"comment_text": "", "digests": {"md5": "aa35eecf5e7a05788a6533dbb291295d", "sha256": "84dd9b15723c1ec4ff655c0cd03aa3a4e5ab70ddc55d3108ce6f612d6ea4da32"}, "downloads": -1, "filename": "icontract-2.0.2.tar.gz", "has_sig": false, "md5_digest": "aa35eecf5e7a05788a6533dbb291295d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37242, "upload_time": "2019-01-26T07:49:26", "upload_time_iso_8601": "2019-01-26T07:49:26.089403Z", "url": "https://files.pythonhosted.org/packages/ac/be/f7bdbbdf4c13e124bcc693a7a1e98b62e420452194331010cbb49fc50f57/icontract-2.0.2.tar.gz", "yanked": false}], "2.0.3": [{"comment_text": "", "digests": {"md5": "8d16d57724296c96ba19c0129bbb0d94", "sha256": "ec3a0618394b91cdbaf90a735fc2dde2279d35002e433ea28931d1d00a5fd820"}, "downloads": -1, "filename": "icontract-2.0.3.tar.gz", "has_sig": false, "md5_digest": "8d16d57724296c96ba19c0129bbb0d94", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47712, "upload_time": "2019-04-07T06:38:37", "upload_time_iso_8601": "2019-04-07T06:38:37.802078Z", "url": "https://files.pythonhosted.org/packages/33/1b/9f7f851951362a8fdea7fb63a3f6a88aad1f9a71e6d448f1c92b01573ade/icontract-2.0.3.tar.gz", "yanked": false}], "2.0.4": [{"comment_text": "", "digests": {"md5": "bebf2e58623f71121cd631d515e79b5b", "sha256": "682a692fd8d01377342d3446598aa81b4c3024e96561524211def181c4c7af80"}, "downloads": -1, "filename": "icontract-2.0.4.tar.gz", "has_sig": false, "md5_digest": "bebf2e58623f71121cd631d515e79b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48073, "upload_time": "2019-04-08T21:13:52", "upload_time_iso_8601": "2019-04-08T21:13:52.455121Z", "url": "https://files.pythonhosted.org/packages/43/37/9cbc6570b4654ca703dd5f2da16dda3e7cb40b40ee3b6902f5bbdf70e6d8/icontract-2.0.4.tar.gz", "yanked": false}], "2.0.5": [{"comment_text": "", "digests": {"md5": "950c1e0c934d28695d2385a8cbe0ee17", "sha256": "2bc00be4c173d35c0a0ab14901e851fde8b496c4ce9ec80d12d2c0d6f2bc7a6b"}, "downloads": -1, "filename": "icontract-2.0.5.tar.gz", "has_sig": false, "md5_digest": "950c1e0c934d28695d2385a8cbe0ee17", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48450, "upload_time": "2019-05-14T14:39:24", "upload_time_iso_8601": "2019-05-14T14:39:24.602251Z", "url": "https://files.pythonhosted.org/packages/13/ea/30128ac5e65a52d7b8ba9c4de69fbc19eb0ca984b5918a23d3f682e5a7cf/icontract-2.0.5.tar.gz", "yanked": false}], "2.0.6": [{"comment_text": "", "digests": {"md5": "7f2ba0f5fc5fce6771bdea3b6996b440", "sha256": "65a7dda67330126cc5067e7b477a73a5f2cc72ba7231b47b36ede3e2f7d22159"}, "downloads": -1, "filename": "icontract-2.0.6.tar.gz", "has_sig": false, "md5_digest": "7f2ba0f5fc5fce6771bdea3b6996b440", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48519, "upload_time": "2019-05-21T07:56:39", "upload_time_iso_8601": "2019-05-21T07:56:39.577652Z", "url": "https://files.pythonhosted.org/packages/fe/57/cbeb2064ce7b781581f086f8ce0ae1f52cd50b8bf6b1e025487173a20142/icontract-2.0.6.tar.gz", "yanked": false}], "2.0.7": [{"comment_text": "", "digests": {"md5": "884c4003463af509ed21937658f5f913", "sha256": "ff18317ce8b8628afaeb325cbb4c7ff37f7c0151fc3fac74ae1ff6fe1f220514"}, "downloads": -1, "filename": "icontract-2.0.7.tar.gz", "has_sig": false, "md5_digest": "884c4003463af509ed21937658f5f913", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 49241, "upload_time": "2020-01-27T07:38:57", "upload_time_iso_8601": "2020-01-27T07:38:57.279843Z", "url": "https://files.pythonhosted.org/packages/44/d4/b775d79088ed235f2d6aae8530840dcd4f23e97ed325d3dcadb7cd586110/icontract-2.0.7.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "ddd035b3ff93dcc6f6706adcfe39e78a", "sha256": "9e2e9158a37cf7ccbc15c56087eda64d241ae0c8b2f74236371611d4435b411b"}, "downloads": -1, "filename": "icontract-2.1.0.tar.gz", "has_sig": false, "md5_digest": "ddd035b3ff93dcc6f6706adcfe39e78a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50213, "upload_time": "2020-01-29T14:41:15", "upload_time_iso_8601": "2020-01-29T14:41:15.034423Z", "url": "https://files.pythonhosted.org/packages/a0/a8/fd0739f4dd8f7c17fea759525174390664ec4c761192c03e5c2ed772caba/icontract-2.1.0.tar.gz", "yanked": false}], "2.2.0": [{"comment_text": "", "digests": {"md5": "d8baf98e28c9baa04f41da2644bb2c2c", "sha256": "8ff17d010c2c18409916df3068e289c09452158623fc19e1fbd7e8cb2e512e38"}, "downloads": -1, "filename": "icontract-2.2.0.tar.gz", "has_sig": false, "md5_digest": "d8baf98e28c9baa04f41da2644bb2c2c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50342, "upload_time": "2020-04-27T08:06:50", "upload_time_iso_8601": "2020-04-27T08:06:50.150799Z", "url": "https://files.pythonhosted.org/packages/93/38/46c102422230ea7480833862bcc1f9e8f8687f3476c77eea12e8e86f0e02/icontract-2.2.0.tar.gz", "yanked": false}], "2.3.0": [{"comment_text": "", "digests": {"md5": "5e6c871419eee047b7a12375abbabf73", "sha256": "403001c2f8f1f20ff92794dc03851734da31dc1778cf711024489f495f6218a7"}, "downloads": -1, "filename": "icontract-2.3.0.tar.gz", "has_sig": false, "md5_digest": "5e6c871419eee047b7a12375abbabf73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51547, "upload_time": "2020-04-30T07:38:12", "upload_time_iso_8601": "2020-04-30T07:38:12.014680Z", "url": "https://files.pythonhosted.org/packages/43/e2/b40364672665f0ba55f4799038c0087fdbe94475cc5411b6292cb994c4fb/icontract-2.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5e6c871419eee047b7a12375abbabf73", "sha256": "403001c2f8f1f20ff92794dc03851734da31dc1778cf711024489f495f6218a7"}, "downloads": -1, "filename": "icontract-2.3.0.tar.gz", "has_sig": false, "md5_digest": "5e6c871419eee047b7a12375abbabf73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 51547, "upload_time": "2020-04-30T07:38:12", "upload_time_iso_8601": "2020-04-30T07:38:12.014680Z", "url": "https://files.pythonhosted.org/packages/43/e2/b40364672665f0ba55f4799038c0087fdbe94475cc5411b6292cb994c4fb/icontract-2.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:01 2020"}