{"info": {"author": "Alex Sokolov", "author_email": "volokos.alex@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Shells", "Topic :: System :: Systems Administration"], "description": "# Python Shell Wrapper Library\n\nA flexible, easy-to-use library to integrate your Python script with Unix ecosystems.\n\n## Why yet another one?\n\nThis library comes with a few major points to use it:\n\n* It is easy and intuitive (see examples)\n* It's compatible with Python 2 (can be useful in old large systems)\n* Continuous support of the library\n\n## Getting started\n\nThis library is pretty easy to use:\n\n```python\nfrom python_shell import Shell\nfrom python_shell.util.streaming import decode_stream\n\nShell.ls('-l', '$HOME')  # Equals \"ls -l $HOME\"\n\ncommand = Shell.whoami()  # Equals \"whoami\"\nprint(command)  # Prints representation of command in shell\n\nprint(command.command)  # prints \"whoami\"\nprint(repr(command))  # Does the same as above\n\nprint(command.return_code)  # prints \"0\"\nprint(command.arguments)  # prints \"\"\n\nprint(decode_stream(command.output)) # Prints out command's stdout\nprint(decode_stream(command.errors)) # Prints out command's stderr\n```\n\nTo run any Bash command, you need to do it like this:\n```\nShell.<bash_command_name>(<bash command parameters>)\n```\n\nFor example, you want to create a new folder:\n```python\nShell.mkdir('-p', '/tmp/new_folder')\n```\n\nIt's also possible to run a command which name is not a valid Python identifier.\nTo do this, use Shell class as a callable instance:\n```python\ncommand = Shell('2to3')\n```\n\nWhen the command fails (returncode is non-zero), Shell throws a ShellException error.\nHowever, even if you didn't save a reference to your command, you still can access it.\nTo do this, try\n```python\nlast_cmd = Shell.last_command\n```\n### Installing\n\nSimply run\n\n```\npip install python-shell\n```\n\n## Integration with development tools\n\n**Shell** class now allows to list all available commands simply by\n```python\ndir(Shell)\n```\n\nThis feature enables autocomplete of commands in a few popular interfaces:\n- BPython\n- IPython\n\n## Extending the basic functionality\n\nIt's possible to extend the existing functionality without forking the project.\nThe library provides an interface to add a custom Command class.\n\n## Running the tests\n\nThis library contains tests written using *unittest* module, so just run in the project directory\n\n```\npython -m unittest\n```\n\nAlso it's possible to run tests using Tox:\n\n```bash\ntox -e <env>\n```\n\nSupported environments:\n\n- py27\n- py35\n- py36\n- py37\n- py38\n- coverage (using Python 3)\n- coverage (using Python 2.7)\n- pep8 (style checking)\n\nOther old versions of Python (e.g. 2.6, 3.4, etc) will never be supported. However, you always can implement such support in your forks.\n\nTest coverage is one of the top priority for this library:\n- Coverage using Python 2.7: 98%\n- Coverage using Python 3.x: 96%\n\n## Documentation\n\nOfficial documentation is available [here](https://python-shell.readthedocs.io/).\n\n## Authors\n\n* **Alex Sokolov** - *Author* - [Albartash](https://github.com/AlBartash)\n\n## Contacts\n\n* Telegram channel with updates: [@bart_tools](http://t.me/bart_tools)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bart-tools/python-shell", "keywords": "python shell bash", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-shell", "package_url": "https://pypi.org/project/python-shell/", "platform": "", "project_url": "https://pypi.org/project/python-shell/", "project_urls": {"Homepage": "https://github.com/bart-tools/python-shell", "Source": "https://github.com/bart-tools/python-shell"}, "release_url": "https://pypi.org/project/python-shell/1.0.4/", "requires_dist": ["six (>=1.14.0)"], "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "summary": "Python Shell Wrapper library", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Shell Wrapper Library</h1>\n<p>A flexible, easy-to-use library to integrate your Python script with Unix ecosystems.</p>\n<h2>Why yet another one?</h2>\n<p>This library comes with a few major points to use it:</p>\n<ul>\n<li>It is easy and intuitive (see examples)</li>\n<li>It's compatible with Python 2 (can be useful in old large systems)</li>\n<li>Continuous support of the library</li>\n</ul>\n<h2>Getting started</h2>\n<p>This library is pretty easy to use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python_shell</span> <span class=\"kn\">import</span> <span class=\"n\">Shell</span>\n<span class=\"kn\">from</span> <span class=\"nn\">python_shell.util.streaming</span> <span class=\"kn\">import</span> <span class=\"n\">decode_stream</span>\n\n<span class=\"n\">Shell</span><span class=\"o\">.</span><span class=\"n\">ls</span><span class=\"p\">(</span><span class=\"s1\">'-l'</span><span class=\"p\">,</span> <span class=\"s1\">'$HOME'</span><span class=\"p\">)</span>  <span class=\"c1\"># Equals \"ls -l $HOME\"</span>\n\n<span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">Shell</span><span class=\"o\">.</span><span class=\"n\">whoami</span><span class=\"p\">()</span>  <span class=\"c1\"># Equals \"whoami\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">)</span>  <span class=\"c1\"># Prints representation of command in shell</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"whoami\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"p\">))</span>  <span class=\"c1\"># Does the same as above</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">return_code</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"0\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">arguments</span><span class=\"p\">)</span>  <span class=\"c1\"># prints \"\"</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decode_stream</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">output</span><span class=\"p\">))</span> <span class=\"c1\"># Prints out command's stdout</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">decode_stream</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">errors</span><span class=\"p\">))</span> <span class=\"c1\"># Prints out command's stderr</span>\n</pre>\n<p>To run any Bash command, you need to do it like this:</p>\n<pre><code>Shell.&lt;bash_command_name&gt;(&lt;bash command parameters&gt;)\n</code></pre>\n<p>For example, you want to create a new folder:</p>\n<pre><span class=\"n\">Shell</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"s1\">'-p'</span><span class=\"p\">,</span> <span class=\"s1\">'/tmp/new_folder'</span><span class=\"p\">)</span>\n</pre>\n<p>It's also possible to run a command which name is not a valid Python identifier.\nTo do this, use Shell class as a callable instance:</p>\n<pre><span class=\"n\">command</span> <span class=\"o\">=</span> <span class=\"n\">Shell</span><span class=\"p\">(</span><span class=\"s1\">'2to3'</span><span class=\"p\">)</span>\n</pre>\n<p>When the command fails (returncode is non-zero), Shell throws a ShellException error.\nHowever, even if you didn't save a reference to your command, you still can access it.\nTo do this, try</p>\n<pre><span class=\"n\">last_cmd</span> <span class=\"o\">=</span> <span class=\"n\">Shell</span><span class=\"o\">.</span><span class=\"n\">last_command</span>\n</pre>\n<h3>Installing</h3>\n<p>Simply run</p>\n<pre><code>pip install python-shell\n</code></pre>\n<h2>Integration with development tools</h2>\n<p><strong>Shell</strong> class now allows to list all available commands simply by</p>\n<pre><span class=\"nb\">dir</span><span class=\"p\">(</span><span class=\"n\">Shell</span><span class=\"p\">)</span>\n</pre>\n<p>This feature enables autocomplete of commands in a few popular interfaces:</p>\n<ul>\n<li>BPython</li>\n<li>IPython</li>\n</ul>\n<h2>Extending the basic functionality</h2>\n<p>It's possible to extend the existing functionality without forking the project.\nThe library provides an interface to add a custom Command class.</p>\n<h2>Running the tests</h2>\n<p>This library contains tests written using <em>unittest</em> module, so just run in the project directory</p>\n<pre><code>python -m unittest\n</code></pre>\n<p>Also it's possible to run tests using Tox:</p>\n<pre>tox -e &lt;env&gt;\n</pre>\n<p>Supported environments:</p>\n<ul>\n<li>py27</li>\n<li>py35</li>\n<li>py36</li>\n<li>py37</li>\n<li>py38</li>\n<li>coverage (using Python 3)</li>\n<li>coverage (using Python 2.7)</li>\n<li>pep8 (style checking)</li>\n</ul>\n<p>Other old versions of Python (e.g. 2.6, 3.4, etc) will never be supported. However, you always can implement such support in your forks.</p>\n<p>Test coverage is one of the top priority for this library:</p>\n<ul>\n<li>Coverage using Python 2.7: 98%</li>\n<li>Coverage using Python 3.x: 96%</li>\n</ul>\n<h2>Documentation</h2>\n<p>Official documentation is available <a href=\"https://python-shell.readthedocs.io/\" rel=\"nofollow\">here</a>.</p>\n<h2>Authors</h2>\n<ul>\n<li><strong>Alex Sokolov</strong> - <em>Author</em> - <a href=\"https://github.com/AlBartash\" rel=\"nofollow\">Albartash</a></li>\n</ul>\n<h2>Contacts</h2>\n<ul>\n<li>Telegram channel with updates: <a href=\"http://t.me/bart_tools\" rel=\"nofollow\">@bart_tools</a></li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details.</p>\n\n          </div>"}, "last_serial": 6965102, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "04f11652a59cfc9a72cba6d2e3123d6f", "sha256": "c7f164c15b4e84e701dd19683d8a71ca9cf62b2367eb7eb3e816a5fd6c217b77"}, "downloads": -1, "filename": "python_shell-1.0.0-py2-none-any.whl", "has_sig": false, "md5_digest": "04f11652a59cfc9a72cba6d2e3123d6f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 8728, "upload_time": "2020-02-21T08:39:42", "upload_time_iso_8601": "2020-02-21T08:39:42.470625Z", "url": "https://files.pythonhosted.org/packages/59/18/5f2813b554a4b95e6ecfa2aeaaea0cf8cc8230f8c1771c335f3b5f4e353f/python_shell-1.0.0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "050bbb3579befd5f0c6fe0b98082e978", "sha256": "433d4bd9789988e6d4eeb48670553600dd9c7a2da7783c5a8f23ef58d2a8bf39"}, "downloads": -1, "filename": "python_shell-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "050bbb3579befd5f0c6fe0b98082e978", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 8729, "upload_time": "2020-02-19T01:29:33", "upload_time_iso_8601": "2020-02-19T01:29:33.536670Z", "url": "https://files.pythonhosted.org/packages/75/1f/03c0817b176f1cf45cff3dd7d7dfbf27eebcd44136819c68cae5630b9b89/python_shell-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [], "1.0.2": [{"comment_text": "", "digests": {"md5": "46cc7690f7140a02b7e478a31ac9e843", "sha256": "23d3368f79bb0ced312cef9cd83724f2629399e71095ea5d75cfc111a9cc1271"}, "downloads": -1, "filename": "python_shell-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "46cc7690f7140a02b7e478a31ac9e843", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 20881, "upload_time": "2020-03-01T09:59:30", "upload_time_iso_8601": "2020-03-01T09:59:30.519092Z", "url": "https://files.pythonhosted.org/packages/80/55/deb51c025bdc53d26ab7a99c31c03f56a52b94314e06d88206da6230a1ad/python_shell-1.0.2-py2.py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "a94d2b04b8e0007356d04c6065d94675", "sha256": "31713c893dbec67ff864193fa8ded0c654fc1913e902bd991fdcdc518e8ea6ef"}, "downloads": -1, "filename": "python_shell-1.0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a94d2b04b8e0007356d04c6065d94675", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 30094, "upload_time": "2020-03-20T15:32:40", "upload_time_iso_8601": "2020-03-20T15:32:40.648534Z", "url": "https://files.pythonhosted.org/packages/b4/92/c43e4d292bd28cead8a148bdd064ad1ab87013156c081577c34561d8397b/python_shell-1.0.3-py2.py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "7729bce4fb7e6b10364b5ec39a8094ff", "sha256": "684dbe7650a424d9a9e96d9a7ddd83f4d2bbff4e8fc1b9d9354b51a7de2507c4"}, "downloads": -1, "filename": "python_shell-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7729bce4fb7e6b10364b5ec39a8094ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 35342, "upload_time": "2020-04-06T22:08:49", "upload_time_iso_8601": "2020-04-06T22:08:49.682504Z", "url": "https://files.pythonhosted.org/packages/f5/18/a74dfa0be2444e0753b146688284753fc93b5056be7e1e00649be3462254/python_shell-1.0.4-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7729bce4fb7e6b10364b5ec39a8094ff", "sha256": "684dbe7650a424d9a9e96d9a7ddd83f4d2bbff4e8fc1b9d9354b51a7de2507c4"}, "downloads": -1, "filename": "python_shell-1.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7729bce4fb7e6b10364b5ec39a8094ff", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">2.7.*, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, <4", "size": 35342, "upload_time": "2020-04-06T22:08:49", "upload_time_iso_8601": "2020-04-06T22:08:49.682504Z", "url": "https://files.pythonhosted.org/packages/f5/18/a74dfa0be2444e0753b146688284753fc93b5056be7e1e00649be3462254/python_shell-1.0.4-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:15:25 2020"}