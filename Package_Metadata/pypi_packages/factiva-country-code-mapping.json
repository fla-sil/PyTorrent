{"info": {"author": "Supearnesh", "author_email": "arnesh.sahay@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Factiva Country Code Mapping\n\nThis utility simplifies mapping between country names, DJII region codes, and ISO Alpha 2 country codes. There were two approaches explored in this implementation: the first was to create a list containing lists for each mapping of country name to DJII RC to ISO Alpha 2 code, and the second was to create three separate dictionaries with each of the various data type as keys. This was both a simple exercise to compare O(n) between searching the underlying data using lists vs dictionaries, as well as to actually transform data files being used with the Factiva search engine.\n\n## Installation\n\nTo install this library, run the following commands.\n\n    $ pip install -i factiva-country-code-mapping\n\n## Usage\n\nThe utility can be run by adding csv files to the 'process' folder; the input files should contain a newline ('\\n') delimited list of country codes, DJII region codes, or ISO Alpha 2 country codes that are to be mapped to either of the other two data types. I've included some sample inputs and outputs in the 'process' folder - both inputs should be uploaded there and outputs will be displayed there. This utlity will output the other two data types by running the following command.\n\n    python -m country_code_mapping <input file> [method-options] [output-options]\n    \n*<*input file*>* - filename of input file located in the 'process/input' folder\n\n*[method-options]* - method of parsing with the below values\n\n            l = list approach (slower)\n            d = dictionaries approach (faster)\n\n*[output-options]* - preferred output format with the below values\n\n            0 = standard country names\n            1 = DJII region codes\n            2 = ISO Alpha 2 country codes", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Supearnesh/factiva-country-code-mapping", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "factiva-country-code-mapping", "package_url": "https://pypi.org/project/factiva-country-code-mapping/", "platform": "", "project_url": "https://pypi.org/project/factiva-country-code-mapping/", "project_urls": {"Homepage": "https://github.com/Supearnesh/factiva-country-code-mapping"}, "release_url": "https://pypi.org/project/factiva-country-code-mapping/1.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A utility to simplify mapping Factiva country codes", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Factiva Country Code Mapping</h1>\n<p>This utility simplifies mapping between country names, DJII region codes, and ISO Alpha 2 country codes. There were two approaches explored in this implementation: the first was to create a list containing lists for each mapping of country name to DJII RC to ISO Alpha 2 code, and the second was to create three separate dictionaries with each of the various data type as keys. This was both a simple exercise to compare O(n) between searching the underlying data using lists vs dictionaries, as well as to actually transform data files being used with the Factiva search engine.</p>\n<h2>Installation</h2>\n<p>To install this library, run the following commands.</p>\n<pre><code>$ pip install -i factiva-country-code-mapping\n</code></pre>\n<h2>Usage</h2>\n<p>The utility can be run by adding csv files to the 'process' folder; the input files should contain a newline ('\\n') delimited list of country codes, DJII region codes, or ISO Alpha 2 country codes that are to be mapped to either of the other two data types. I've included some sample inputs and outputs in the 'process' folder - both inputs should be uploaded there and outputs will be displayed there. This utlity will output the other two data types by running the following command.</p>\n<pre><code>python -m country_code_mapping &lt;input file&gt; [method-options] [output-options]\n</code></pre>\n<p><em>&lt;<em>input file</em>&gt;</em> - filename of input file located in the 'process/input' folder</p>\n<p><em>[method-options]</em> - method of parsing with the below values</p>\n<pre><code>        l = list approach (slower)\n        d = dictionaries approach (faster)\n</code></pre>\n<p><em>[output-options]</em> - preferred output format with the below values</p>\n<pre><code>        0 = standard country names\n        1 = DJII region codes\n        2 = ISO Alpha 2 country codes\n</code></pre>\n\n          </div>"}, "last_serial": 7069812, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "515da56a829a7d9fcaf2423fc3217d70", "sha256": "0065533bea66806b8ee218002b2fde2b9fbd27a47baa16c7adce1c2d7be5956f"}, "downloads": -1, "filename": "factiva-country-code-mapping-0.0.1.tar.gz", "has_sig": false, "md5_digest": "515da56a829a7d9fcaf2423fc3217d70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13940, "upload_time": "2020-04-21T18:07:13", "upload_time_iso_8601": "2020-04-21T18:07:13.137442Z", "url": "https://files.pythonhosted.org/packages/11/4d/24effaa117a23af14f0233a328842b34819a2ccf91666b1953330f8620b8/factiva-country-code-mapping-0.0.1.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "5ef67a84b7a6d23fa01c29736bd4ea80", "sha256": "43e7a330c14dc0cb21e8ff0a298a551afb19271f41eb69fd5ee5524d69996a11"}, "downloads": -1, "filename": "factiva_country_code_mapping-1.0.1.tar.gz", "has_sig": false, "md5_digest": "5ef67a84b7a6d23fa01c29736bd4ea80", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13969, "upload_time": "2020-04-18T09:55:09", "upload_time_iso_8601": "2020-04-18T09:55:09.108758Z", "url": "https://files.pythonhosted.org/packages/33/8d/9233c213932ba46ea127fa6f6b65f21cecb65b33ccd5d8233b4ff186f489/factiva_country_code_mapping-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2489747689dedd940206a897e2908059", "sha256": "e1713bcc01787c8301396ac4e8756fc11b8f5a30045e43f5cca1fc9688a30225"}, "downloads": -1, "filename": "factiva-country-code-mapping-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2489747689dedd940206a897e2908059", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13942, "upload_time": "2020-04-21T18:08:43", "upload_time_iso_8601": "2020-04-21T18:08:43.731585Z", "url": "https://files.pythonhosted.org/packages/8a/25/d99c73b2c101243f61e4ebf64bf17d7fbd247bdc27ba00da56fe28f4dcc8/factiva-country-code-mapping-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2489747689dedd940206a897e2908059", "sha256": "e1713bcc01787c8301396ac4e8756fc11b8f5a30045e43f5cca1fc9688a30225"}, "downloads": -1, "filename": "factiva-country-code-mapping-1.0.2.tar.gz", "has_sig": false, "md5_digest": "2489747689dedd940206a897e2908059", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13942, "upload_time": "2020-04-21T18:08:43", "upload_time_iso_8601": "2020-04-21T18:08:43.731585Z", "url": "https://files.pythonhosted.org/packages/8a/25/d99c73b2c101243f61e4ebf64bf17d7fbd247bdc27ba00da56fe28f4dcc8/factiva-country-code-mapping-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:04 2020"}