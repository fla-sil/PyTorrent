{"info": {"author": "Noel Bush", "author_email": "noel@platformer.org", "bugtrack_url": null, "classifiers": [], "description": "This module provides a single method, valid_email_address(), which returns\n      True or False to indicate whether a given address is valid according to the\n      'addr-spec' part of the specification given in [RFC 2822]\n      (http://www.ietf.org/rfc/rfc2822.txt).  Ideally, we would like to find this\n      in some other library, already thoroughly tested and well- maintained.  The\n      standard Python library email.utils contains a parse_addr() function, but\n      it is not sufficient to detect many malformed addresses.\n\n      This implementation aims to be faithful to the RFC, with the exception of a\n      circular definition (see comments inline), and with the omission of the\n      pattern components marked as \"obsolete\".\n\n      Yes, all this really does is build a big regular expression.  But it builds\n      it in nice pieces that correspond to the RFC, and there's a big bunch of\n      unit tests that try to ensure each little piece of the regexp works as\n      intended.  (See test_email_validation.py.)", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/noelbush/py_email_validation/tarball/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/noelbush/py_email_validation", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "py_email_validation", "package_url": "https://pypi.org/project/py_email_validation/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/py_email_validation/", "project_urls": {"Download": "https://github.com/noelbush/py_email_validation/tarball/master", "Homepage": "https://github.com/noelbush/py_email_validation"}, "release_url": "https://pypi.org/project/py_email_validation/1.0.0.3/", "requires_dist": null, "requires_python": null, "summary": "RFC 2822 - style email address validation for Python", "version": "1.0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <dl>\n<dt>This module provides a single method, valid_email_address(), which returns</dt>\n<dd><p>True or False to indicate whether a given address is valid according to the\n\u2018addr-spec\u2019 part of the specification given in [RFC 2822]\n(<a href=\"http://www.ietf.org/rfc/rfc2822.txt\" rel=\"nofollow\">http://www.ietf.org/rfc/rfc2822.txt</a>).  Ideally, we would like to find this\nin some other library, already thoroughly tested and well- maintained.  The\nstandard Python library email.utils contains a parse_addr() function, but\nit is not sufficient to detect many malformed addresses.</p>\n<p>This implementation aims to be faithful to the RFC, with the exception of a\ncircular definition (see comments inline), and with the omission of the\npattern components marked as \u201cobsolete\u201d.</p>\n<p>Yes, all this really does is build a big regular expression.  But it builds\nit in nice pieces that correspond to the RFC, and there\u2019s a big bunch of\nunit tests that try to ensure each little piece of the regexp works as\nintended.  (See test_email_validation.py.)</p>\n</dd>\n</dl>\n\n          </div>"}, "last_serial": 796942, "releases": {"1.0.0.1": [{"comment_text": "", "digests": {"md5": "06f59c80fe9dc95b63456772ce209291", "sha256": "30f4aa5f40fbe4d3fdad26f3556e21ebac0f3e25902bd2fd2184df86e3bd7d65"}, "downloads": -1, "filename": "py_email_validation-1.0.0.1.tar.gz", "has_sig": false, "md5_digest": "06f59c80fe9dc95b63456772ce209291", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2599, "upload_time": "2012-03-26T08:05:44", "upload_time_iso_8601": "2012-03-26T08:05:44.355779Z", "url": "https://files.pythonhosted.org/packages/5c/1f/0a84f4624ab625fbcb7dc83954a1a63fb949e20ed034fc799583ecc53bc8/py_email_validation-1.0.0.1.tar.gz", "yanked": false}], "1.0.0.2": [{"comment_text": "", "digests": {"md5": "abaede6eb9bfca884e92f75957f57bd3", "sha256": "3dffcb8feee5d620afda0b83efe5b348f42d30ea74e42debff473160d29578e8"}, "downloads": -1, "filename": "py_email_validation-1.0.0.2.tar.gz", "has_sig": false, "md5_digest": "abaede6eb9bfca884e92f75957f57bd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2602, "upload_time": "2012-04-14T19:46:55", "upload_time_iso_8601": "2012-04-14T19:46:55.681451Z", "url": "https://files.pythonhosted.org/packages/24/8e/6e59c7afe33b95ece75c15363eb1b1566829db57bb267b1990fd2a5d9dd1/py_email_validation-1.0.0.2.tar.gz", "yanked": false}], "1.0.0.3": [{"comment_text": "", "digests": {"md5": "2189ee476d8fd225c4fcfbf0845e9061", "sha256": "1efd83a901f5cd2dfd918525a3b604ab4b13dbc3435659bc039fae500226365b"}, "downloads": -1, "filename": "py_email_validation-1.0.0.3.tar.gz", "has_sig": false, "md5_digest": "2189ee476d8fd225c4fcfbf0845e9061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2570, "upload_time": "2012-05-07T16:27:47", "upload_time_iso_8601": "2012-05-07T16:27:47.741581Z", "url": "https://files.pythonhosted.org/packages/08/96/2091f030a6482dbf7c0bba2c3f88a1accf6733fdfc709914cd269dcc9ea9/py_email_validation-1.0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2189ee476d8fd225c4fcfbf0845e9061", "sha256": "1efd83a901f5cd2dfd918525a3b604ab4b13dbc3435659bc039fae500226365b"}, "downloads": -1, "filename": "py_email_validation-1.0.0.3.tar.gz", "has_sig": false, "md5_digest": "2189ee476d8fd225c4fcfbf0845e9061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2570, "upload_time": "2012-05-07T16:27:47", "upload_time_iso_8601": "2012-05-07T16:27:47.741581Z", "url": "https://files.pythonhosted.org/packages/08/96/2091f030a6482dbf7c0bba2c3f88a1accf6733fdfc709914cd269dcc9ea9/py_email_validation-1.0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:27 2020"}