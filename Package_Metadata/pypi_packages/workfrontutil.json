{"info": {"author": "Harley Jean", "author_email": "hjean35@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# workfront-util\n### Simple Python library that can be used to retrieve data from the workfront api. \n---\n\n#### Easily return all data for any objCode from the workfront api. \n#### This library uses asyncio under the hood to batch requests and return a list of dicts. \n---\n```\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\napi = WorkfrontAPI(objCode= 'hour')\nhours = api.return_all()\n```\n---\nControl the results by configuring a workfront_util_settings.json file.  \n\n```\n{\n  \"workfront\" : {\n        \"environment\": \"prod\", \n        \"api_version\": \"9.0\", \n        \"filters\": {\n            \"hour\" : {\n                    \"entryDate\": \"2019-07-01\", \n                    \"entryDate_Mod\": \"between\", \n                    \"entryDate_Range\": \"$$TODAYb\"          \n            }\n        }, \n        \"fields\" : {\n            \"hour\" : \"*\"\n\n        }\n\n}\n```\n---\nOR Add your filter options and field selections inline if preferred. \n\n```\nloop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\nsettings = ENVSettings()\n\nfilter_option = {\n                    \"entryDate\": \"2019-07-01\", \n                    \"entryDate_Mod\": \"between\", \n                    \"entryDate_Range\": \"$$TODAYb\"          \n            }\n\napi = WorkfrontAPI(\n    version = settings.api_version,\n    env= settings.env ,\n    fields = \"*\"\n    filter_option= filter_option, \n    objCode= 'hour')\n\nhours = api.return_all()\n\n```\n\nReturn a flat pandas dataframe by passing flat=true\n\n```\nhours = api.return_all(flat=True)\n```\n\n\nRun a CLI \n\n```\nUsage: workfrontutil [OPTIONS]\n\nOptions:\n  --make_config TEXT  Generate config file\n  --config_path TEXT  location of config file\n  --objCode TEXT      Target objCode\n  --fields TEXT       Target objCode fields to return\n  --filter TEXT       Target objCode filter to use\n  --edit_config TEXT  Update Config file\n  --save_obj TEXT     Save all objCode data to DB\n  --help              Show this message and exit.\n\n```\n\n#Getting Started\n\nInstall the package \n```\npip install workforntutil\n```\n\nRun from the cli or import into your script\n\n```\nfrom workfrontutil import WorkfrontAPI\n```\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hjean36/workfront-util", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "workfrontutil", "package_url": "https://pypi.org/project/workfrontutil/", "platform": "", "project_url": "https://pypi.org/project/workfrontutil/", "project_urls": {"Homepage": "https://github.com/hjean36/workfront-util"}, "release_url": "https://pypi.org/project/workfrontutil/0.1.0/", "requires_dist": null, "requires_python": ">= 3.7", "summary": "Python Wrapper for the Workfront API", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>workfront-util</h1>\n<h3>Simple Python library that can be used to retrieve data from the workfront api.</h3>\n<hr>\n<h4>Easily return all data for any objCode from the workfront api.</h4>\n<h4>This library uses asyncio under the hood to batch requests and return a list of dicts.</h4>\n<hr>\n<pre><code>loop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\napi = WorkfrontAPI(objCode= 'hour')\nhours = api.return_all()\n</code></pre>\n<hr>\n<p>Control the results by configuring a workfront_util_settings.json file.</p>\n<pre><code>{\n  \"workfront\" : {\n        \"environment\": \"prod\", \n        \"api_version\": \"9.0\", \n        \"filters\": {\n            \"hour\" : {\n                    \"entryDate\": \"2019-07-01\", \n                    \"entryDate_Mod\": \"between\", \n                    \"entryDate_Range\": \"$$TODAYb\"          \n            }\n        }, \n        \"fields\" : {\n            \"hour\" : \"*\"\n\n        }\n\n}\n</code></pre>\n<hr>\n<p>OR Add your filter options and field selections inline if preferred.</p>\n<pre><code>loop = asyncio.new_event_loop()\nasyncio.set_event_loop(loop)\nsettings = ENVSettings()\n\nfilter_option = {\n                    \"entryDate\": \"2019-07-01\", \n                    \"entryDate_Mod\": \"between\", \n                    \"entryDate_Range\": \"$$TODAYb\"          \n            }\n\napi = WorkfrontAPI(\n    version = settings.api_version,\n    env= settings.env ,\n    fields = \"*\"\n    filter_option= filter_option, \n    objCode= 'hour')\n\nhours = api.return_all()\n\n</code></pre>\n<p>Return a flat pandas dataframe by passing flat=true</p>\n<pre><code>hours = api.return_all(flat=True)\n</code></pre>\n<p>Run a CLI</p>\n<pre><code>Usage: workfrontutil [OPTIONS]\n\nOptions:\n  --make_config TEXT  Generate config file\n  --config_path TEXT  location of config file\n  --objCode TEXT      Target objCode\n  --fields TEXT       Target objCode fields to return\n  --filter TEXT       Target objCode filter to use\n  --edit_config TEXT  Update Config file\n  --save_obj TEXT     Save all objCode data to DB\n  --help              Show this message and exit.\n\n</code></pre>\n<p>#Getting Started</p>\n<p>Install the package</p>\n<pre><code>pip install workforntutil\n</code></pre>\n<p>Run from the cli or import into your script</p>\n<pre><code>from workfrontutil import WorkfrontAPI\n</code></pre>\n\n          </div>"}, "last_serial": 5761452, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "df585e079bfb61df8e41119f4a8d0494", "sha256": "3727ba4f6c10aa85bd3897a84c575b4a821e70e6db0b4d4c557d56d6a4352f04"}, "downloads": -1, "filename": "workfrontutil-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "df585e079bfb61df8e41119f4a8d0494", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 13514, "upload_time": "2019-08-30T14:27:25", "upload_time_iso_8601": "2019-08-30T14:27:25.435169Z", "url": "https://files.pythonhosted.org/packages/99/39/91756e3462b479c4c5440c4d56747d0c1a89b351e74299e6fae50ff4c5f2/workfrontutil-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "30a5e48072caba1582a8eb0383c07e20", "sha256": "0c61fcce6e8d2f84f199217248fb9643adfd713733a9fce37a89679086cb6056"}, "downloads": -1, "filename": "workfrontutil-0.0.5.tar.gz", "has_sig": false, "md5_digest": "30a5e48072caba1582a8eb0383c07e20", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 9711, "upload_time": "2019-08-30T14:27:27", "upload_time_iso_8601": "2019-08-30T14:27:27.832715Z", "url": "https://files.pythonhosted.org/packages/1e/ba/0334ba8cf1b7debe7c6d2bf1d9f7fa39b00fe4a8c6fba8fd677bea232584/workfrontutil-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "efba96841c8ad1fc08374169342c0ab5", "sha256": "c5ddd71070bf4a0d08d0da24e6e46ceb40e056c35ac6e09db89c62005efef894"}, "downloads": -1, "filename": "workfrontutil-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "efba96841c8ad1fc08374169342c0ab5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 13475, "upload_time": "2019-08-30T17:27:26", "upload_time_iso_8601": "2019-08-30T17:27:26.213718Z", "url": "https://files.pythonhosted.org/packages/49/c1/3c0e08b2ee7afca25ae019ee87939efba7de94ea7b3ec62648f996c15b1f/workfrontutil-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65002760603c0b38777c3a62a8f00194", "sha256": "075355f155b15a03231b438538cff44de25955981ee8bfb2b0ac8786ba802ee7"}, "downloads": -1, "filename": "workfrontutil-0.1.0.tar.gz", "has_sig": false, "md5_digest": "65002760603c0b38777c3a62a8f00194", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 9715, "upload_time": "2019-08-30T17:27:27", "upload_time_iso_8601": "2019-08-30T17:27:27.857566Z", "url": "https://files.pythonhosted.org/packages/3b/38/60f6036fa700b6ae3e3348f7c15eef646aad85f6319737024d0720c158d2/workfrontutil-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "efba96841c8ad1fc08374169342c0ab5", "sha256": "c5ddd71070bf4a0d08d0da24e6e46ceb40e056c35ac6e09db89c62005efef894"}, "downloads": -1, "filename": "workfrontutil-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "efba96841c8ad1fc08374169342c0ab5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">= 3.7", "size": 13475, "upload_time": "2019-08-30T17:27:26", "upload_time_iso_8601": "2019-08-30T17:27:26.213718Z", "url": "https://files.pythonhosted.org/packages/49/c1/3c0e08b2ee7afca25ae019ee87939efba7de94ea7b3ec62648f996c15b1f/workfrontutil-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65002760603c0b38777c3a62a8f00194", "sha256": "075355f155b15a03231b438538cff44de25955981ee8bfb2b0ac8786ba802ee7"}, "downloads": -1, "filename": "workfrontutil-0.1.0.tar.gz", "has_sig": false, "md5_digest": "65002760603c0b38777c3a62a8f00194", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.7", "size": 9715, "upload_time": "2019-08-30T17:27:27", "upload_time_iso_8601": "2019-08-30T17:27:27.857566Z", "url": "https://files.pythonhosted.org/packages/3b/38/60f6036fa700b6ae3e3348f7c15eef646aad85f6319737024d0720c158d2/workfrontutil-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:27:52 2020"}