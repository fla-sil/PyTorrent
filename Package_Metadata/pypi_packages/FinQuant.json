{"info": {"author": "Frank Milthaler", "author_email": "f.milthaler@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Education", "Intended Audience :: Financial and Insurance Industry", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only"], "description": "<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/images/finquant-logo.png\" width=\"45%\">\n</p>\n\n<p align=\"center\">\n  <a href=\"https://GitHub.com/fmilthaler/FinQuant/stargazers/\">\n    <img src=\"https://img.shields.io/github/stars/fmilthaler/FinQuant.svg?style=social&label=Star&maxAge=2592000\" alt='pypi'>\n  </a>\n  <a href=\"https://pypi.org/project/FinQuant\">\n    <img src=\"https://img.shields.io/badge/pypi-v0.2.2-brightgreen.svg?style=popout\" alt='pypi'>\n  </a>\n  <a href=\"https://travis-ci.org/fmilthaler/FinQuant\">\n    <img src=\"https://travis-ci.org/fmilthaler/FinQuant.svg?style=popout?branch=master\" alt='travis'>\n  </a>\n  <a href=\"http://finquant.readthedocs.io/\">\n    <img src=\"https://img.shields.io/readthedocs/finquant.svg?style=popout\" alt=\"docs\">\n  </a>\n  <a href=\"https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/\">\n    <img src=\"https://img.shields.io/github/contributors/fmilthaler/FinQuant.svg?style=popout\" alt=\"contributors\">\n  </a>\n  <a href=\"https://github.com/fmilthaler/FinQuant/issues\">\n    <img src=\"https://img.shields.io/badge/contributions-welcome-brightgreen.svg?style=popout\" alt=\"contributions\">\n  </a>\n  <a href=\"https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt\">\n    <img src=\"https://img.shields.io/github/license/fmilthaler/FinQuant.svg?style=popout\" alt=\"license\">\n  </a>\n</p>\n\n# FinQuant\n*FinQuant* is a program for financial **portfolio management, analysis and optimisation**.\n\nThis README only gives a brief overview of *FinQuant*. The interested reader should refer to its [documentation](https://finquant.readthedocs.io \"FinQuant Documentation\").\n\n## Table of contents\n - [Motivation](#Motivation)\n - [Installation](#Installation)\n - [Portfolio Management](#Portfolio-Management)\n - [Returns](#Returns)\n - [Moving Averages](#Moving-Averages)\n - [Portfolio Optimisation](#Portfolio-Optimisation)\n   - [Efficient Frontier](#Efficient-Frontier)\n   - [Monte Carlo](#Monte-Carlo)\n - [Examples](#Examples)\n   - [Building a portfolio with data from web](#Building-a-portfolio-with-data-from-web)\n   - [Building a portfolio with preset data](#Building-a-portfolio-with-preset-data)\n   - [Analysis of a portfolio](#Analysis-of-a-portfolio)\n   - [Optimisation of a portfolio](#Optimisation-of-a-portfolio)\n\n## Motivation\nWithin a few lines of code, *FinQuant* can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of *Returns*, *Moving Averages*, *Moving Average Bands with buy/sell signals*, and *Bollinger Bands*. It also allows for the optimisation based on the *Efficient Frontier* or a *Monte Carlo* run of the financial portfolio within a few lines of code. Some of the results are shown here.\n\n### Automatically generating an instance of `Portfolio`\n`finquant.portfolio.build_portfolio` is a function that eases the creating of your portfolio. See below for one of several ways of using `build_portfolio`.\n```\nfrom finquant.portfolio import build_portfolio\nnames = ['GOOG', 'AMZN', 'MCD', 'DIS']\nstart_date = '2015-01-01'\nend_date = '2017-12-31'\npf = build_portfolio(names=names,\n                    start_date=start_date,\n                    end_date=end_date)\n```\n`pf` is an instance of `finquant.portfolio.Portfolio`, which contains the prices of the stocks in your portfolio. Then...\n```\npf.data.head(3)\n```\nyields\n```\n              GOOG    AMZN        MCD        DIS\nDate\n2015-01-02  524.81  308.52  85.783317  90.586146\n2015-01-05  513.87  302.19  84.835892  89.262380\n2015-01-06  501.96  295.29  84.992263  88.788916\n```\n\n### Portfolio properties\nNicely printing out the portfolio's properties\n```\npf.properties()\n```\nDepending on the stocks within your portfolio, the output looks something like the below.\n```\n----------------------------------------------------------------------\nStocks: GOOG, AMZN, MCD, DIS\nTime window/frequency: 252\nRisk free rate: 0.005\nPortfolio expected return: 0.266\nPortfolio volatility: 0.156\nPortfolio Sharpe ratio: 1.674\n\nSkewness:\n       GOOG      AMZN      MCD       DIS\n0  0.124184  0.087516  0.58698  0.040569\n\nKurtosis:\n       GOOG      AMZN       MCD       DIS\n0 -0.751818 -0.856101 -0.602008 -0.892666\n\nInformation:\n   Allocation  Name\n0        0.25  GOOG\n1        0.25  AMZN\n2        0.25   MCD\n3        0.25   DIS\n----------------------------------------------------------------------\n```\n\n### Cumulative Return\n```\npf.comp_cumulative_returns().plot().axhline(y = 0, color = \"black\", lw = 3)\n```\nyields\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/images/cumulative-return.svg?sanitize=true\" width=\"60%\">\n</p>\n\n### Band Moving Average (Buy/Sell Signals)\n```\nfrom finquant.moving_average import compute_ma, ema\n# get stock data for disney\ndis = pf.get_stock(\"DIS\").data.copy(deep=True)\nspans = [10, 50, 100, 150, 200]\nma = compute_ma(dis, ema, spans, plot=True)\n```\nyields\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ma-band-buysell-signals.svg?sanitize=true\" width=\"60%\">\n</p>\n\n### Bollinger Band\n```\nfrom finquant.moving_average import plot_bollinger_band\n# get stock data for disney\ndis = pf.get_stock(\"DIS\").data.copy(deep=True)\nspan=20\nplot_bollinger_band(dis, sma, span)\n```\nyields\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/images/bollinger-band.svg?sanitize=true\" width=\"60%\">\n</p>\n\n### Portfolio Optimisation\n```\n# performs and plots results of Monte Carlo run (5000 iterations)\nopt_w, opt_res = pf.mc_optimisation(num_trials=5000)\n# plots the results of the Monte Carlo optimisation\npf.mc_plot_results()\n# plots the Efficient Frontier\npf.ef_plot_efrontier()\n# plots optimal portfolios based on Efficient Frontier\npf.ef.plot_optimal_portfolios()\n# plots individual plots of the portfolio\npf.plot_stocks()\n```\n<p align=\"center\">\n  <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/images/ef-mc-overlay.svg?sanitize=true\" width=\"60%\">\n</p>\n\n## Installation\nAs it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.\n\n### Dependencies\n*FinQuant* depends on the following Python packages:\n - python>=3.5.0\n - numpy>=1.15\n - pandas>=0.24\n - matplotlib>=1.5.1\n - quandl>=3.4.5\n - yfinance>=0.1.43\n - scipy>=1.2.0\n - pytest>=2.8.7\n\n### From PyPI\n*FinQuant* can be obtained from PyPI\n\n```pip install FinQuant```\n\n### From GitHub\nGet the code from GitHub:\n\n```git clone https://github.com/fmilthaler/FinQuant.git```\n\nThen inside `FinQuant` run:\n\n```python setup.py install```\n\nAlternatively, if you do not wish to install *FinQuant*, you can also download/clone it as stated above, and then make sure to add it to your ``PYTHONPATH``.\n\n## Portfolio Management\nThis is the core of *FinQuant*. `finquant.portfolio.Portfolio` provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make *FinQuant* an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in `./finquant/`.\n\nTo learn more about the object, please read through the [documentation](https://finquant.readthedocs.io/en/latest/ \"FinQuant Documentation\"), docstring of the module/class, and/or have a look at the examples.\n\n`finquant.portfolio.Portfolio` also provides a function `build_portfolio` which is designed to automatically generate an instance of `Portfolio` for the user's convenience. For more information on how to use `build_portfolio`, please refer to the [documentation](https://finquant.readthedocs.io/en/latest/ \"FinQuant Documentation\"), its `docstring` and/or have a look at the examples.\n\n## Returns\nDaily returns of stocks are often computed in different ways. *FinQuant* provides three different ways of computing the daily returns in `finquant.returns`:\n1. The cumulative return: <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/738645698dc3073b4bb52a0c078ae829.svg?invert_in_darkmode&sanitize=true\" align=middle width=194.52263655pt height=46.976899200000005pt/>\n2. Percentage change of daily returns: <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/27215e5f36fd0308b51ab510444edf0d.svg?invert_in_darkmode&sanitize=true\" align=middle width=126.07712039999997pt height=48.84266309999997pt/>\n3. Log Return: <img src=\"https://raw.githubusercontent.com/fmilthaler/finquant/master/tex/ef37c00ad58fe657a64041c3093e0640.svg?invert_in_darkmode&sanitize=true\" align=middle width=208.3327686pt height=57.53473439999999pt/>\n\nIn addition to those, the module provides the function `historical_mean_return(data, freq=252)`, which computes the historical mean of the daily returns over a time period `freq`.\n\n## Moving Averages\nThe module `finquant.moving_average` allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the\n - `sma`: Simple Moving Average, and\n - `ema`: Exponential Moving Average.\n - `compute_ma`: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals\n - `plot_bollinger_band`: a Bollinger Band for\n   - `sma`,\n   - `ema`.\n\n## Portfolio Optimisation\n### Efficient Frontier\nAn implementation of the Efficient Frontier (`finquant.efficient_frontier.EfficientFrontier`) allows for the optimisation of the portfolio for\n - `minimum_volatility` Minimum Volatility,\n - `maximum_sharpe_ratio` Maximum Sharpe Ratio\n - `efficient_return` Minimum Volatility for a given expected return\n - `efficient_volatility` Maximum Sharpe Ratio for a given target volatility\n\nby performing a numerical solve to minimise/maximise an objective function.\n\nOften it is useful to visualise the *Efficient Frontier* as well as the optimal solution. This can be achieved with the following methods:\n - `plot_efrontier`: Plots the *Efficient Frontier*. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the *Efficient Frontier* based on the minimum/maximum Return values of all stocks within the given portfolio.\n - `plot_optimal_portfolios`: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.\n\nFor reasons of user-friendliness, interfaces to these functions are provided in `finquant.portfolio.Portfolio`. Please have a look at the [documentation](https://finquant.readthedocs.io \"FinQuant Documentation\").\n\n### Monte Carlo\nAlternatively a *Monte Carlo* run of `n` trials can be performed to find the optimal portfolios for\n - minimum volatility,\n - maximum Sharpe ratio\n\nThe approach branded as *Efficient Frontier* should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.\n\n## Examples\nFor more information about the project and details on how to use it, please\nlook at the examples provided in `./example`.\n\n**Note**: In the below examples, `pf` refers to an instance of `finquant.portfolio.Portfolio`, the object that holds all stock prices and computes its most common quantities automatically. To make *FinQuant* a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in `./finquant/` and are discussed throughout this README.\n\n### Building a portfolio with data from web\n`./example/Example-Build-Portfolio-from-web.py`: Shows how to use *FinQuant* to build a financial portfolio by downloading stock price data through the Python package `quandl`/`yfinance`.\n\n### Building a portfolio with preset data\n`./example/Example-Build-Portfolio-from-file.py`: Shows how to use *FinQuant* to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.\n\n### Analysis of a portfolio\n`./example/Example-Analysis.py`: This example shows how to use an instance of `finquant.portfolio.Portfolio`, get the portfolio's quantities, such as\n - Expected Returns,\n - Volatility,\n - Sharpe Ratio.\n\nIt also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:\n - the different Returns provided by the module `finquant.returns`,\n - *Moving Averages*, a band of *Moving Averages*, and a *Bollinger Band*.\n\n### Optimisation of a portfolio\n`./example/Example-Optimisation.py`: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of `finquant.efficient_frontier.EfficientFrontier` for optimising the portfolio, for the\n - Minimum Volatility\n - Maximum Sharpe Ratio\n - Minimum Volatility for a given target Return\n - Maximum Sharpe Ratio for a given target Volatility.\n\nFurthermore, it is also shown how the entire *Efficient Frontier* and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed *Efficient Frontier*.\n\nAlso, the optimisation of a portfolio and its visualisation based on a *Monte Carlo* is shown.\n\nFinally, *FinQuant*'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the *Monte Carlo* run, the *Efficient Frontier*, its optimised portfolios for *Minimum Volatility* and *Maximum Sharpe Ratio*, as well as the portfolio's individual stocks.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/fmilthaler/FinQuant/archive/v0.2.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fmilthaler/FinQuant", "keywords": "finance,portfolio,investment,numerical,optimisation,monte carlo,efficient frontier,quantitative,quant", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "FinQuant", "package_url": "https://pypi.org/project/FinQuant/", "platform": "", "project_url": "https://pypi.org/project/FinQuant/", "project_urls": {"Documentation": "https://finquant.readthedocs.io", "Download": "https://github.com/fmilthaler/FinQuant/archive/v0.2.2.tar.gz", "Homepage": "https://github.com/fmilthaler/FinQuant"}, "release_url": "https://pypi.org/project/FinQuant/0.2.2/", "requires_dist": ["quandl", "yfinance", "numpy", "pandas", "scipy", "matplotlib", "pytest"], "requires_python": ">=3.5", "summary": "A program for financial portfolio management, analysis and optimisation", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/128195d8fb21f7c4d532d4198c2dfb901b3612af/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f696d616765732f66696e7175616e742d6c6f676f2e706e67\" width=\"45%\">\n</p>\n<p align=\"center\">\n  <a href=\"https://GitHub.com/fmilthaler/FinQuant/stargazers/\" rel=\"nofollow\">\n    <img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e28a383df7906769e38ad744c43cd2beac6a73c6/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f666d696c7468616c65722f46696e5175616e742e7376673f7374796c653d736f6369616c266c6162656c3d53746172266d61784167653d32353932303030\">\n  </a>\n  <a href=\"https://pypi.org/project/FinQuant\" rel=\"nofollow\">\n    <img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7704dcc4133f0bebd4ba93aeba48bfb06f97ab2d/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707970692d76302e322e322d627269676874677265656e2e7376673f7374796c653d706f706f7574\">\n  </a>\n  <a href=\"https://travis-ci.org/fmilthaler/FinQuant\" rel=\"nofollow\">\n    <img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48a3e95237b8bf7f1eec52faa223a46fcfae2584/68747470733a2f2f7472617669732d63692e6f72672f666d696c7468616c65722f46696e5175616e742e7376673f7374796c653d706f706f75743f6272616e63683d6d6173746572\">\n  </a>\n  <a href=\"http://finquant.readthedocs.io/\" rel=\"nofollow\">\n    <img alt=\"docs\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3888031b1c344192f141caeae8d4feff418069b7/68747470733a2f2f696d672e736869656c64732e696f2f72656164746865646f63732f66696e7175616e742e7376673f7374796c653d706f706f7574\">\n  </a>\n  <a href=\"https://GitHub.com/fmilthaler/FinQuant/graphs/contributors/\" rel=\"nofollow\">\n    <img alt=\"contributors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80c46243a186ead5eb11410d1d1e9773edfaa48a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6e7472696275746f72732f666d696c7468616c65722f46696e5175616e742e7376673f7374796c653d706f706f7574\">\n  </a>\n  <a href=\"https://github.com/fmilthaler/FinQuant/issues\" rel=\"nofollow\">\n    <img alt=\"contributions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/598275cfa2fcfdb6dd5d80ca32148604d281457e/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f6e747269627574696f6e732d77656c636f6d652d627269676874677265656e2e7376673f7374796c653d706f706f7574\">\n  </a>\n  <a href=\"https://github.com/fmilthaler/FinQuant/blob/master/LICENSE.txt\" rel=\"nofollow\">\n    <img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c37be03e57b1c73fd232d68ac6ab082036b020e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f666d696c7468616c65722f46696e5175616e742e7376673f7374796c653d706f706f7574\">\n  </a>\n</p>\n<h1>FinQuant</h1>\n<p><em>FinQuant</em> is a program for financial <strong>portfolio management, analysis and optimisation</strong>.</p>\n<p>This README only gives a brief overview of <em>FinQuant</em>. The interested reader should refer to its <a href=\"https://finquant.readthedocs.io\" rel=\"nofollow\" title=\"FinQuant Documentation\">documentation</a>.</p>\n<h2>Table of contents</h2>\n<ul>\n<li><a href=\"#Motivation\" rel=\"nofollow\">Motivation</a></li>\n<li><a href=\"#Installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#Portfolio-Management\" rel=\"nofollow\">Portfolio Management</a></li>\n<li><a href=\"#Returns\" rel=\"nofollow\">Returns</a></li>\n<li><a href=\"#Moving-Averages\" rel=\"nofollow\">Moving Averages</a></li>\n<li><a href=\"#Portfolio-Optimisation\" rel=\"nofollow\">Portfolio Optimisation</a>\n<ul>\n<li><a href=\"#Efficient-Frontier\" rel=\"nofollow\">Efficient Frontier</a></li>\n<li><a href=\"#Monte-Carlo\" rel=\"nofollow\">Monte Carlo</a></li>\n</ul>\n</li>\n<li><a href=\"#Examples\" rel=\"nofollow\">Examples</a>\n<ul>\n<li><a href=\"#Building-a-portfolio-with-data-from-web\" rel=\"nofollow\">Building a portfolio with data from web</a></li>\n<li><a href=\"#Building-a-portfolio-with-preset-data\" rel=\"nofollow\">Building a portfolio with preset data</a></li>\n<li><a href=\"#Analysis-of-a-portfolio\" rel=\"nofollow\">Analysis of a portfolio</a></li>\n<li><a href=\"#Optimisation-of-a-portfolio\" rel=\"nofollow\">Optimisation of a portfolio</a></li>\n</ul>\n</li>\n</ul>\n<h2>Motivation</h2>\n<p>Within a few lines of code, <em>FinQuant</em> can generate an object that holds your stock prices of your desired financial portfolio, analyses it, and can create plots of different kinds of <em>Returns</em>, <em>Moving Averages</em>, <em>Moving Average Bands with buy/sell signals</em>, and <em>Bollinger Bands</em>. It also allows for the optimisation based on the <em>Efficient Frontier</em> or a <em>Monte Carlo</em> run of the financial portfolio within a few lines of code. Some of the results are shown here.</p>\n<h3>Automatically generating an instance of <code>Portfolio</code></h3>\n<p><code>finquant.portfolio.build_portfolio</code> is a function that eases the creating of your portfolio. See below for one of several ways of using <code>build_portfolio</code>.</p>\n<pre><code>from finquant.portfolio import build_portfolio\nnames = ['GOOG', 'AMZN', 'MCD', 'DIS']\nstart_date = '2015-01-01'\nend_date = '2017-12-31'\npf = build_portfolio(names=names,\n                    start_date=start_date,\n                    end_date=end_date)\n</code></pre>\n<p><code>pf</code> is an instance of <code>finquant.portfolio.Portfolio</code>, which contains the prices of the stocks in your portfolio. Then...</p>\n<pre><code>pf.data.head(3)\n</code></pre>\n<p>yields</p>\n<pre><code>              GOOG    AMZN        MCD        DIS\nDate\n2015-01-02  524.81  308.52  85.783317  90.586146\n2015-01-05  513.87  302.19  84.835892  89.262380\n2015-01-06  501.96  295.29  84.992263  88.788916\n</code></pre>\n<h3>Portfolio properties</h3>\n<p>Nicely printing out the portfolio's properties</p>\n<pre><code>pf.properties()\n</code></pre>\n<p>Depending on the stocks within your portfolio, the output looks something like the below.</p>\n<pre><code>----------------------------------------------------------------------\nStocks: GOOG, AMZN, MCD, DIS\nTime window/frequency: 252\nRisk free rate: 0.005\nPortfolio expected return: 0.266\nPortfolio volatility: 0.156\nPortfolio Sharpe ratio: 1.674\n\nSkewness:\n       GOOG      AMZN      MCD       DIS\n0  0.124184  0.087516  0.58698  0.040569\n\nKurtosis:\n       GOOG      AMZN       MCD       DIS\n0 -0.751818 -0.856101 -0.602008 -0.892666\n\nInformation:\n   Allocation  Name\n0        0.25  GOOG\n1        0.25  AMZN\n2        0.25   MCD\n3        0.25   DIS\n----------------------------------------------------------------------\n</code></pre>\n<h3>Cumulative Return</h3>\n<pre><code>pf.comp_cumulative_returns().plot().axhline(y = 0, color = \"black\", lw = 3)\n</code></pre>\n<p>yields</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfc5132a3f3f210f3c5598601991e19e0fe28600/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f696d616765732f63756d756c61746976652d72657475726e2e7376673f73616e6974697a653d74727565\" width=\"60%\">\n</p>\n<h3>Band Moving Average (Buy/Sell Signals)</h3>\n<pre><code>from finquant.moving_average import compute_ma, ema\n# get stock data for disney\ndis = pf.get_stock(\"DIS\").data.copy(deep=True)\nspans = [10, 50, 100, 150, 200]\nma = compute_ma(dis, ema, spans, plot=True)\n</code></pre>\n<p>yields</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df2c66ccef86cc1622be2dede6f26142ed271e6d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f696d616765732f6d612d62616e642d62757973656c6c2d7369676e616c732e7376673f73616e6974697a653d74727565\" width=\"60%\">\n</p>\n<h3>Bollinger Band</h3>\n<pre><code>from finquant.moving_average import plot_bollinger_band\n# get stock data for disney\ndis = pf.get_stock(\"DIS\").data.copy(deep=True)\nspan=20\nplot_bollinger_band(dis, sma, span)\n</code></pre>\n<p>yields</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0177c812182ef4281ddf3fa2d3b4075d2ec3825e/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f696d616765732f626f6c6c696e6765722d62616e642e7376673f73616e6974697a653d74727565\" width=\"60%\">\n</p>\n<h3>Portfolio Optimisation</h3>\n<pre><code># performs and plots results of Monte Carlo run (5000 iterations)\nopt_w, opt_res = pf.mc_optimisation(num_trials=5000)\n# plots the results of the Monte Carlo optimisation\npf.mc_plot_results()\n# plots the Efficient Frontier\npf.ef_plot_efrontier()\n# plots optimal portfolios based on Efficient Frontier\npf.ef.plot_optimal_portfolios()\n# plots individual plots of the portfolio\npf.plot_stocks()\n</code></pre>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7e8681324f565af375bf8ebd89f14d2f3526c8a0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f696d616765732f65662d6d632d6f7665726c61792e7376673f73616e6974697a653d74727565\" width=\"60%\">\n</p>\n<h2>Installation</h2>\n<p>As it is common for open-source projects, there are several ways to get hold of the code. Choose whichever suits you and your purposes best.</p>\n<h3>Dependencies</h3>\n<p><em>FinQuant</em> depends on the following Python packages:</p>\n<ul>\n<li>python&gt;=3.5.0</li>\n<li>numpy&gt;=1.15</li>\n<li>pandas&gt;=0.24</li>\n<li>matplotlib&gt;=1.5.1</li>\n<li>quandl&gt;=3.4.5</li>\n<li>yfinance&gt;=0.1.43</li>\n<li>scipy&gt;=1.2.0</li>\n<li>pytest&gt;=2.8.7</li>\n</ul>\n<h3>From PyPI</h3>\n<p><em>FinQuant</em> can be obtained from PyPI</p>\n<p><code>pip install FinQuant</code></p>\n<h3>From GitHub</h3>\n<p>Get the code from GitHub:</p>\n<p><code>git clone https://github.com/fmilthaler/FinQuant.git</code></p>\n<p>Then inside <code>FinQuant</code> run:</p>\n<p><code>python setup.py install</code></p>\n<p>Alternatively, if you do not wish to install <em>FinQuant</em>, you can also download/clone it as stated above, and then make sure to add it to your <code>PYTHONPATH</code>.</p>\n<h2>Portfolio Management</h2>\n<p>This is the core of <em>FinQuant</em>. <code>finquant.portfolio.Portfolio</code> provides an object that holds prices of all stocks in your portfolio, and automatically computes the most common quantities for you. To make <em>FinQuant</em> an user-friendly program, that combines data analysis, visualisation and optimisation, the object provides interfaces to the main features that are provided in the modules in <code>./finquant/</code>.</p>\n<p>To learn more about the object, please read through the <a href=\"https://finquant.readthedocs.io/en/latest/\" rel=\"nofollow\" title=\"FinQuant Documentation\">documentation</a>, docstring of the module/class, and/or have a look at the examples.</p>\n<p><code>finquant.portfolio.Portfolio</code> also provides a function <code>build_portfolio</code> which is designed to automatically generate an instance of <code>Portfolio</code> for the user's convenience. For more information on how to use <code>build_portfolio</code>, please refer to the <a href=\"https://finquant.readthedocs.io/en/latest/\" rel=\"nofollow\" title=\"FinQuant Documentation\">documentation</a>, its <code>docstring</code> and/or have a look at the examples.</p>\n<h2>Returns</h2>\n<p>Daily returns of stocks are often computed in different ways. <em>FinQuant</em> provides three different ways of computing the daily returns in <code>finquant.returns</code>:</p>\n<ol>\n<li>The cumulative return: <img align=\"middle\" height=\"46.976899200000005pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7cba9a6fb491d70453e21cba9aabeeaacb4317d/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f7465782f37333836343536393864633330373362346262353261306330373861653832392e7376673f696e766572745f696e5f6461726b6d6f64652673616e6974697a653d74727565\" width=\"194.52263655pt\"></li>\n<li>Percentage change of daily returns: <img align=\"middle\" height=\"48.84266309999997pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb781ce5ea6079f33d40c4077cb617f0a06dfe82/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f7465782f32373231356535663336666430333038623531616235313034343465646630642e7376673f696e766572745f696e5f6461726b6d6f64652673616e6974697a653d74727565\" width=\"126.07712039999997pt\"></li>\n<li>Log Return: <img align=\"middle\" height=\"57.53473439999999pt/\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f013efd63fd9891f795d0a320a488bc60035ef1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f666d696c7468616c65722f66696e7175616e742f6d61737465722f7465782f65663337633030616435386665363537613634303431633330393365303634302e7376673f696e766572745f696e5f6461726b6d6f64652673616e6974697a653d74727565\" width=\"208.3327686pt\"></li>\n</ol>\n<p>In addition to those, the module provides the function <code>historical_mean_return(data, freq=252)</code>, which computes the historical mean of the daily returns over a time period <code>freq</code>.</p>\n<h2>Moving Averages</h2>\n<p>The module <code>finquant.moving_average</code> allows the computation and visualisation of Moving Averages of the stocks listed in the portfolio is also provided. It entails functions to compute and visualise the</p>\n<ul>\n<li><code>sma</code>: Simple Moving Average, and</li>\n<li><code>ema</code>: Exponential Moving Average.</li>\n<li><code>compute_ma</code>: a Band of Moving Averages (of different time windows/spans) including Buy/Sell signals</li>\n<li><code>plot_bollinger_band</code>: a Bollinger Band for\n<ul>\n<li><code>sma</code>,</li>\n<li><code>ema</code>.</li>\n</ul>\n</li>\n</ul>\n<h2>Portfolio Optimisation</h2>\n<h3>Efficient Frontier</h3>\n<p>An implementation of the Efficient Frontier (<code>finquant.efficient_frontier.EfficientFrontier</code>) allows for the optimisation of the portfolio for</p>\n<ul>\n<li><code>minimum_volatility</code> Minimum Volatility,</li>\n<li><code>maximum_sharpe_ratio</code> Maximum Sharpe Ratio</li>\n<li><code>efficient_return</code> Minimum Volatility for a given expected return</li>\n<li><code>efficient_volatility</code> Maximum Sharpe Ratio for a given target volatility</li>\n</ul>\n<p>by performing a numerical solve to minimise/maximise an objective function.</p>\n<p>Often it is useful to visualise the <em>Efficient Frontier</em> as well as the optimal solution. This can be achieved with the following methods:</p>\n<ul>\n<li><code>plot_efrontier</code>: Plots the <em>Efficient Frontier</em>. If no minimum/maximum Return values are provided, the algorithm automatically chooses those limits for the <em>Efficient Frontier</em> based on the minimum/maximum Return values of all stocks within the given portfolio.</li>\n<li><code>plot_optimal_portfolios</code>: Plots markers of the portfolios with the Minimum Volatility and Maximum Sharpe Ratio.</li>\n</ul>\n<p>For reasons of user-friendliness, interfaces to these functions are provided in <code>finquant.portfolio.Portfolio</code>. Please have a look at the <a href=\"https://finquant.readthedocs.io\" rel=\"nofollow\" title=\"FinQuant Documentation\">documentation</a>.</p>\n<h3>Monte Carlo</h3>\n<p>Alternatively a <em>Monte Carlo</em> run of <code>n</code> trials can be performed to find the optimal portfolios for</p>\n<ul>\n<li>minimum volatility,</li>\n<li>maximum Sharpe ratio</li>\n</ul>\n<p>The approach branded as <em>Efficient Frontier</em> should be the preferred method for reasons of computational effort and accuracy. The latter approach is only included for the sake of completeness, and creation of beautiful plots.</p>\n<h2>Examples</h2>\n<p>For more information about the project and details on how to use it, please\nlook at the examples provided in <code>./example</code>.</p>\n<p><strong>Note</strong>: In the below examples, <code>pf</code> refers to an instance of <code>finquant.portfolio.Portfolio</code>, the object that holds all stock prices and computes its most common quantities automatically. To make <em>FinQuant</em> a user-friendly program, that combines data analysis, visualisation and optimisation, the object also provides interfaces to the main features that are provided in the modules in <code>./finquant/</code> and are discussed throughout this README.</p>\n<h3>Building a portfolio with data from web</h3>\n<p><code>./example/Example-Build-Portfolio-from-web.py</code>: Shows how to use <em>FinQuant</em> to build a financial portfolio by downloading stock price data through the Python package <code>quandl</code>/<code>yfinance</code>.</p>\n<h3>Building a portfolio with preset data</h3>\n<p><code>./example/Example-Build-Portfolio-from-file.py</code>: Shows how to use <em>FinQuant</em> to build a financial portfolio by providing stock price data yourself, e.g. by reading data from disk/file.</p>\n<h3>Analysis of a portfolio</h3>\n<p><code>./example/Example-Analysis.py</code>: This example shows how to use an instance of <code>finquant.portfolio.Portfolio</code>, get the portfolio's quantities, such as</p>\n<ul>\n<li>Expected Returns,</li>\n<li>Volatility,</li>\n<li>Sharpe Ratio.</li>\n</ul>\n<p>It also shows how to extract individual stocks from the given portfolio. Moreover it shows how to compute and visualise:</p>\n<ul>\n<li>the different Returns provided by the module <code>finquant.returns</code>,</li>\n<li><em>Moving Averages</em>, a band of <em>Moving Averages</em>, and a <em>Bollinger Band</em>.</li>\n</ul>\n<h3>Optimisation of a portfolio</h3>\n<p><code>./example/Example-Optimisation.py</code>: This example focusses on the optimisation of a portfolio. To achieve this, the example shows the usage of <code>finquant.efficient_frontier.EfficientFrontier</code> for optimising the portfolio, for the</p>\n<ul>\n<li>Minimum Volatility</li>\n<li>Maximum Sharpe Ratio</li>\n<li>Minimum Volatility for a given target Return</li>\n<li>Maximum Sharpe Ratio for a given target Volatility.</li>\n</ul>\n<p>Furthermore, it is also shown how the entire <em>Efficient Frontier</em> and the optimal portfolios can be computed and visualised. If needed, it also gives an example of plotting the individual stocks of the given portfolio within the computed <em>Efficient Frontier</em>.</p>\n<p>Also, the optimisation of a portfolio and its visualisation based on a <em>Monte Carlo</em> is shown.</p>\n<p>Finally, <em>FinQuant</em>'s visualisation methods allow for overlays, if this is desired. Thus, with only the following few lines of code, one can create an overlay of the <em>Monte Carlo</em> run, the <em>Efficient Frontier</em>, its optimised portfolios for <em>Minimum Volatility</em> and <em>Maximum Sharpe Ratio</em>, as well as the portfolio's individual stocks.</p>\n\n          </div>"}, "last_serial": 7157822, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d18c195a4822b1e5300e2c4f83d31191", "sha256": "98130a20ea4e91f332dfbfb86d0b1f621170eabe15697453d1c64e4b38f438eb"}, "downloads": -1, "filename": "FinQuant-0.1.tar.gz", "has_sig": false, "md5_digest": "d18c195a4822b1e5300e2c4f83d31191", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23447, "upload_time": "2019-01-29T21:25:40", "upload_time_iso_8601": "2019-01-29T21:25:40.725030Z", "url": "https://files.pythonhosted.org/packages/e1/45/19c3016cee7af219e1ae603defcaa94594430b8a511f9a82610efc2403cb/FinQuant-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "7a13eebe6a5f492646cde0a17c90ce5b", "sha256": "b80a8dd42b62d389a7099a80ba7b28559c19feef5499bbc03c48bfb00775e5b3"}, "downloads": -1, "filename": "FinQuant-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7a13eebe6a5f492646cde0a17c90ce5b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27110, "upload_time": "2019-01-30T15:23:04", "upload_time_iso_8601": "2019-01-30T15:23:04.111712Z", "url": "https://files.pythonhosted.org/packages/4a/1c/581da55142765dfe3ff0b3fc60908c7e5934e3422a9fc72488caa1e1f39e/FinQuant-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c16ae947b858ec02d9917a8bdc2a62e0", "sha256": "8e42cb466a7dc4dfdaf8a265ad8dab4e862401fd21ad6de9d99929a53b2c4b7b"}, "downloads": -1, "filename": "FinQuant-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c16ae947b858ec02d9917a8bdc2a62e0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23623, "upload_time": "2019-01-30T15:23:06", "upload_time_iso_8601": "2019-01-30T15:23:06.012234Z", "url": "https://files.pythonhosted.org/packages/52/54/a39ec1c4c6347b2c83a4b6af4115eae9bb60a104737a11d662afe95298e4/FinQuant-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "c6ba658dc54a88d1e19cdb0caffa4046", "sha256": "2d29318084be6015e3c369956f07fdc96db562ebf65091ec6f93c96e167587d6"}, "downloads": -1, "filename": "FinQuant-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c6ba658dc54a88d1e19cdb0caffa4046", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28070, "upload_time": "2019-07-14T14:43:47", "upload_time_iso_8601": "2019-07-14T14:43:47.524441Z", "url": "https://files.pythonhosted.org/packages/06/3c/901a7e2d758b7f6520d1ecc6d3e087667b3c9094330ddf0f3cac82ef9c96/FinQuant-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13d0cf10eb74412928946f39b0ef39e2", "sha256": "d45c1ec8629225c5c87ec793f84d3127c80989827968319771c773b64dd15834"}, "downloads": -1, "filename": "FinQuant-0.2.tar.gz", "has_sig": false, "md5_digest": "13d0cf10eb74412928946f39b0ef39e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24672, "upload_time": "2019-07-14T14:43:49", "upload_time_iso_8601": "2019-07-14T14:43:49.440695Z", "url": "https://files.pythonhosted.org/packages/94/d8/4d7ee8332c14f95df5ab3a4f3801e831999bb3dc99e6665cbc8aeb39bcaf/FinQuant-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "66bb969223450d457ccc228f2334664a", "sha256": "480b48f69b5c3466906edc293f709b0afaed71a274c6468dfef9752820c6a616"}, "downloads": -1, "filename": "FinQuant-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "66bb969223450d457ccc228f2334664a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28211, "upload_time": "2020-04-12T13:13:44", "upload_time_iso_8601": "2020-04-12T13:13:44.445366Z", "url": "https://files.pythonhosted.org/packages/c3/2a/4a279f4487cfe84293f49308b2084ce98f46dffd4b8cfb94ccd3c8b65001/FinQuant-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af85ef79e3e04498b51d17f2e8d850d4", "sha256": "43c0056251360c89ee7776561b15134b54905f174f528fb411e58c9c691f95cd"}, "downloads": -1, "filename": "FinQuant-0.2.1.tar.gz", "has_sig": false, "md5_digest": "af85ef79e3e04498b51d17f2e8d850d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24887, "upload_time": "2020-04-12T13:13:46", "upload_time_iso_8601": "2020-04-12T13:13:46.172423Z", "url": "https://files.pythonhosted.org/packages/39/ec/29f94693ab6cfa7dc1de3fb068db08e4ae2c7dae121c69a24175f6d009fd/FinQuant-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "65df3c916754b26f8050b9144baabaec", "sha256": "6efc102e788b14c0fca1c63d030ae1b23bac0ea3602e9ba0fa37e4a6e27f0e28"}, "downloads": -1, "filename": "FinQuant-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "65df3c916754b26f8050b9144baabaec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28241, "upload_time": "2020-05-03T16:19:19", "upload_time_iso_8601": "2020-05-03T16:19:19.713807Z", "url": "https://files.pythonhosted.org/packages/ce/62/f3cca39df81e43c215ee95fa57f9d9a7b1ca09f1de5289e9894fbc5cc728/FinQuant-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1596232fc1bfd2af1422479518ab7e9", "sha256": "5722022c789fd6b4b9ab17d820002b73594d95d68b6ebbcff41f1da0b27f1fc1"}, "downloads": -1, "filename": "FinQuant-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d1596232fc1bfd2af1422479518ab7e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24939, "upload_time": "2020-05-03T16:19:21", "upload_time_iso_8601": "2020-05-03T16:19:21.008931Z", "url": "https://files.pythonhosted.org/packages/4a/0e/6d8f5d12192b855942e7c01a3c38c99412574654702fc7ba113297cecbce/FinQuant-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65df3c916754b26f8050b9144baabaec", "sha256": "6efc102e788b14c0fca1c63d030ae1b23bac0ea3602e9ba0fa37e4a6e27f0e28"}, "downloads": -1, "filename": "FinQuant-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "65df3c916754b26f8050b9144baabaec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 28241, "upload_time": "2020-05-03T16:19:19", "upload_time_iso_8601": "2020-05-03T16:19:19.713807Z", "url": "https://files.pythonhosted.org/packages/ce/62/f3cca39df81e43c215ee95fa57f9d9a7b1ca09f1de5289e9894fbc5cc728/FinQuant-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d1596232fc1bfd2af1422479518ab7e9", "sha256": "5722022c789fd6b4b9ab17d820002b73594d95d68b6ebbcff41f1da0b27f1fc1"}, "downloads": -1, "filename": "FinQuant-0.2.2.tar.gz", "has_sig": false, "md5_digest": "d1596232fc1bfd2af1422479518ab7e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 24939, "upload_time": "2020-05-03T16:19:21", "upload_time_iso_8601": "2020-05-03T16:19:21.008931Z", "url": "https://files.pythonhosted.org/packages/4a/0e/6d8f5d12192b855942e7c01a3c38c99412574654702fc7ba113297cecbce/FinQuant-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:20 2020"}