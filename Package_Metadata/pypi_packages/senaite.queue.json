{"info": {"author": "RIDING BYTES & NARALABS", "author_email": "senaite@senaite.com", "bugtrack_url": null, "classifiers": ["Framework :: Plone", "Framework :: Zope2", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python"], "description": "*Queue of asynchronous tasks for SENAITE LIMS*\n==============================================\n\n.. image:: https://img.shields.io/pypi/v/senaite.queue.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/senaite.queue\n\n.. image:: https://img.shields.io/travis/senaite/senaite.queue/master.svg?style=flat-square\n    :target: https://travis-ci.org/senaite/senaite.queue\n\n.. image:: https://img.shields.io/github/issues-pr/senaite/senaite.queue.svg?style=flat-square\n    :target: https://github.com/senaite/senaite.queue/pulls\n\n.. image:: https://img.shields.io/github/issues/senaite/senaite.queue.svg?style=flat-square\n    :target: https://github.com/senaite/senaite.queue/issues\n\n.. image:: https://img.shields.io/badge/Made%20for%20SENAITE-%E2%AC%A1-lightgrey.svg\n   :target: https://www.senaite.com\n\n\nAbout\n=====\n\nThis package enables asynchronous tasks in Senaite to better handle concurrent\nactions and processes when senaite's workload is high, especially for instances\nwith high-demand on writing to disk. \n\nAt present time, this add-on provides support for workflow transitions for\nanalyses and worksheets mostly (e.g., verifications, submissions, assignment of\nanalyses to worksheets, creation of worksheets by using workseet templates, etc.).\n\nTransitions for sample levels could be easily supported in a near future.\n\nThe asynchronous creation of Sample is not supported yet.\n\nUsage\n=====\n\nCreate a new user in senaite (under *senaite/acl_users*) with username\n*queue_daemon* and password *queue_daemon*. It won't work when using acl\nusers registered in Zope's root (e.g. *admin*).\n\nAdd a new client in your buildout:\n\n.. code-block::\n\n  # Reserved user queued tasks\n  queue-user-name=queue_daemon\n  queue-user-password=queue_daemon\n  parts =\n      ....\n      client_queue\n\n\nand configure the client properly:\n\n.. code-block::\n\n  [client_queue]\n  # Client reserved as a worker for async tasks\n  <= client_base\n  recipe = plone.recipe.zope2instance\n  http-address = 127.0.0.1:8088\n  zope-conf-additional =\n  # Queue tasks dispatcher\n  <clock-server>\n      method /senaite/queue_dispatcher\n      period 5\n      user ${buildout:queue-user-name}\n      password ${buildout:queue-user-password}\n      host localhost:8088\n  </clock-server>\n\n\nConfiguration\n=============\n\nSome parameters of *senaite.queue* can be configured from SENAITE UI directly.\nLogin as admin user and visit \"Site Setup\". A link \"Queue Settings\" can be found\nunder \"Add-on configuration\". From this view you can either disable queue for\nspecific actions and configure the number of items to be processed by a single\nqueued task for a given action.\n\nQueue is not able to process tasks fired by users from Zope's root (e.g. default \n*admin* user). *senaite.queue* will try to process them, but these tasks will be\ndiscarded after some attempts (see \"Maximum retries\" configuration option from\nQueue Control Panel). As a rule of thumb, always login with users registered in \nSenaite portal. Zope's root users must be used for maintenance tasks only.\n\nExtend\n======\n\nTo make a process to be run async by *senaite.queue*, add an adapter for that\nspecific process. Let's imagine you have a custom transition (e.g. *dispatch*)\nin sample's workflow, that besides transitioning the sample, it also generates a\ndispatch report. We want this transition to be handled asynchronously by\n*senaite.queue*.\n\nWe need first to intercept the action *dispatch* and feed the queue by adding a\nspecific-adapter:\n\n.. code-block:: xml\n\n  <adapter\n    name=\"workflow_action_dispatch\"\n    for=\"*\n         zope.publisher.interfaces.browser.IBrowserRequest\"\n    factory=\".analysisrequests.WorkflowActionDispatchAdapter\"\n    provides=\"bika.lims.interfaces.IWorkflowActionAdapter\"\n    permission=\"zope.Public\" />\n\n.. code-block:: python\n\n  from bika.lims.browser.workflow import WorkflowActionGenericAdapter\n  from senaite.queue.queue import queue_task\n\n  DISPATCH_TASK_ID = \"my.addon.task_dispatch\"\n\n  class WorkflowActionDispatchAdapter(WorkflowActionGenericAdapter):\n      \"\"\"Adapter that intercepts the action dispatch from samples listing and\n      add the process into the queue\n      \"\"\"\n\n      def do_action(self, action, objects):\n          # Queue one task per object\n          for obj in objects:\n              queue_task(DISPATCH_TASK_ID, self.request, obj)\n          return objects\n\nNow, we only need to tell *senaite.queue* how to handle this task by adding\nanother adapter:\n\n.. code-block:: xml\n\n  <!-- My own adapter for dispatch action to be handled by senaite.queue -->\n  <adapter\n    name=\"my.addon.task_dispatch\"\n    factory=\".QueuedDispatchTaskAdapter\"\n    provides=\"senaite.queue.interfaces.IQueuedTaskAdapter\"\n    for=\"bika.lims.interfaces.IAnalysisRequest\" />\n\n.. code-block:: python\n\n  from senaite.core.interfaces import IAnalysisRequest\n  from senaite.queue.adapters import QueuedTaskAdapter\n\n  class QueuedDispatchTaskAdapter(QueuedTaskAdapter):\n       \"\"\"Adapter in charge dispatching a Sample\n       \"\"\"\n       adapts(IAnalysisRequest)\n\n       def process(self, task, request):\n           sample = task.context\n\n           # Your logic here for processing the sample\n           # e.g transition the sample, generate the report, send email, etc.\n\n           # Return whether the process finished successfully or not\n           return succeed\n\nThis procedure can be used not only for transitions, but for any process you\nmight think of.\n\nSince transitions are good candidates for queued tasks, *senaite.queue* provides\nan easier mechanism to queue and process workflow actions. Instead of all the\nabove, you can easily bind a workflow action by reusing the adapters\n*senaite.queue* already provides such scenarios. For instance, if you want the\naction \"dispatch\" to be automatically handled by *senaite.queue* when user\nclicks the button \"Dispatch\" from the bottom of generic Samples listing, you\nonly need to declare two adapters, as follows:\n\n.. code-block:: xml\n\n  <!-- Adapter that intercepts the action \"dispatch\" from listings and adds\n  tasks for this action and selected objects to the queue -->\n  <adapter\n    name=\"workflow_action_dispatch\"\n    for=\"bika.lims.interfaces.IAnalysisRequests\n         senaite.queue.interfaces.ISenaiteQueueLayer\"\n    factory=\"senaite.queue.adapters.WorkflowActionGenericQueueAdapter\"\n    provides=\"bika.lims.interfaces.IWorkflowActionAdapter\"\n    permission=\"zope.Public\" />\n\n  <!-- Adapter that processes the \"dispatch\" action for a queued task -->\n  <adapter\n    name=\"task_action_dispatch\"\n    factory=\"senaite.queue.adapters.QueuedActionTaskAdapter\"\n    provides=\"senaite.queue.interfaces.IQueuedTaskAdapter\"\n    for=\"bika.lims.interfaces.IAnalysisRequests\" />\n\n\nScreenshots\n===========\n\nQueued tasks\n------------\n\n.. image:: https://raw.githubusercontent.com/senaite/senaite.queue/master/static/queued_tasks.png\n   :alt: Queued tasks\n   :width: 760px\n   :align: center\n\nQueued analyses\n---------------\n\n.. image:: https://raw.githubusercontent.com/senaite/senaite.queue/master/static/queued_analyses.png\n   :alt: Queued analyses\n   :width: 760px\n   :align: center\n\nQueued worksheet\n----------------\n\n.. image:: https://raw.githubusercontent.com/senaite/senaite.queue/master/static/queued_worksheet.png\n   :alt: Queued worksheet\n   :width: 760px\n   :align: center\n\nQueue settings\n--------------\n\n.. image:: https://raw.githubusercontent.com/senaite/senaite.queue/master/static/queue_settings.png\n   :alt: Queue configuration view\n   :width: 760px\n   :align: center\n\nContribute\n==========\n\nWe want contributing to SENAITE.QUEUE to be fun, enjoyable, and educational\nfor anyone, and everyone. This project adheres to the `Contributor Covenant\n<https://github.com/senaite/senaite.queue/blob/master/CODE_OF_CONDUCT.md>`_.\n\nBy participating, you are expected to uphold this code. Please report\nunacceptable behavior.\n\nContributions go far beyond pull requests and commits. Although we love giving\nyou the opportunity to put your stamp on SENAITE.QUEUE, we also are thrilled\nto receive a variety of other contributions.\n\nPlease, read `Contributing to senaite.queue document\n<https://github.com/senaite/senaite.queue/blob/master/CONTRIBUTING.md>`_.\n\nIf you wish to contribute with translations, check the project site on\n`Transifex <https://www.transifex.com/senaite/senaite-queue/>`_.\n\n\nFeedback and support\n====================\n\n* `Community site <https://community.senaite.org/>`_\n* `Gitter channel <https://gitter.im/senaite/Lobby>`_\n* `Users list <https://sourceforge.net/projects/senaite/lists/senaite-users>`_\n\n\nLicense\n=======\n\n**SENAITE.QUEUE** Copyright (C) 2019-2020 RIDING BYTES & NARALABS\n\nThis program is free software; you can redistribute it and/or modify it under\nthe terms of the `GNU General Public License version 2\n<https://github.com/senaite/senaite.queue/blob/master/LICENSE>`_ as published\nby the Free Software Foundation.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.\n\nChangelog\n=========\n\n1.0.1 (2020-02-09)\n------------------\n\n**Added**\n\n- Allow to manually assign the username to the task to be queued\n- Support for failed tasks\n- Notify when the value for max_seconds_unlock is too low\n- #3 New `queue_tasks` view with the list of tasks and statistics\n- #2 Add max_retries setting for failing tasks\n- #1 Add sample guard to prevent transitions when queued analyses\n\n\n1.0.0 (2019-11-10)\n------------------\n\nFirst version", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/senaite/senaite.queue", "keywords": "senaite,lims,opensource", "license": "GPLv2", "maintainer": "", "maintainer_email": "", "name": "senaite.queue", "package_url": "https://pypi.org/project/senaite.queue/", "platform": "", "project_url": "https://pypi.org/project/senaite.queue/", "project_urls": {"Homepage": "https://github.com/senaite/senaite.queue"}, "release_url": "https://pypi.org/project/senaite.queue/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Asynchronous tasks add-on for SENAITE", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"queue-of-asynchronous-tasks-for-senaite-lims\">\n<h2><em>Queue of asynchronous tasks for SENAITE LIMS</em></h2>\n<a href=\"https://pypi.python.org/pypi/senaite.queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/senaite.queue.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/14d0276ac0b7d65d243e9dafba55ea20040db17f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73656e616974652e71756575652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://travis-ci.org/senaite/senaite.queue\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/senaite/senaite.queue/master.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fa328582cb61925b895f78a8a377df3599a66911/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f73656e616974652f73656e616974652e71756575652f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/senaite/senaite.queue/pulls\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/issues-pr/senaite/senaite.queue.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/129f25e419e4bd319dc37ea41f2da6da0c7cdcff/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d70722f73656e616974652f73656e616974652e71756575652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/senaite/senaite.queue/issues\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/issues/senaite/senaite.queue.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eb0ac0820cd4f0a33cb096daa36733e9c8bef1d8/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f73656e616974652f73656e616974652e71756575652e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://www.senaite.com\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/Made%20for%20SENAITE-%E2%AC%A1-lightgrey.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7fe853ed47b64c7b14bd5220e8caa323f4a8d4fd/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230666f7225323053454e414954452d2545322541432541312d6c69676874677265792e737667\"></a>\n</div>\n<div id=\"about\">\n<h2>About</h2>\n<p>This package enables asynchronous tasks in Senaite to better handle concurrent\nactions and processes when senaite\u2019s workload is high, especially for instances\nwith high-demand on writing to disk.</p>\n<p>At present time, this add-on provides support for workflow transitions for\nanalyses and worksheets mostly (e.g., verifications, submissions, assignment of\nanalyses to worksheets, creation of worksheets by using workseet templates, etc.).</p>\n<p>Transitions for sample levels could be easily supported in a near future.</p>\n<p>The asynchronous creation of Sample is not supported yet.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Create a new user in senaite (under <em>senaite/acl_users</em>) with username\n<em>queue_daemon</em> and password <em>queue_daemon</em>. It won\u2019t work when using acl\nusers registered in Zope\u2019s root (e.g. <em>admin</em>).</p>\n<p>Add a new client in your buildout:</p>\n<pre># Reserved user queued tasks\nqueue-user-name=queue_daemon\nqueue-user-password=queue_daemon\nparts =\n    ....\n    client_queue\n</pre>\n<p>and configure the client properly:</p>\n<pre>[client_queue]\n# Client reserved as a worker for async tasks\n&lt;= client_base\nrecipe = plone.recipe.zope2instance\nhttp-address = 127.0.0.1:8088\nzope-conf-additional =\n# Queue tasks dispatcher\n&lt;clock-server&gt;\n    method /senaite/queue_dispatcher\n    period 5\n    user ${buildout:queue-user-name}\n    password ${buildout:queue-user-password}\n    host localhost:8088\n&lt;/clock-server&gt;\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>Some parameters of <em>senaite.queue</em> can be configured from SENAITE UI directly.\nLogin as admin user and visit \u201cSite Setup\u201d. A link \u201cQueue Settings\u201d can be found\nunder \u201cAdd-on configuration\u201d. From this view you can either disable queue for\nspecific actions and configure the number of items to be processed by a single\nqueued task for a given action.</p>\n<p>Queue is not able to process tasks fired by users from Zope\u2019s root (e.g. default\n<em>admin</em> user). <em>senaite.queue</em> will try to process them, but these tasks will be\ndiscarded after some attempts (see \u201cMaximum retries\u201d configuration option from\nQueue Control Panel). As a rule of thumb, always login with users registered in\nSenaite portal. Zope\u2019s root users must be used for maintenance tasks only.</p>\n</div>\n<div id=\"extend\">\n<h2>Extend</h2>\n<p>To make a process to be run async by <em>senaite.queue</em>, add an adapter for that\nspecific process. Let\u2019s imagine you have a custom transition (e.g. <em>dispatch</em>)\nin sample\u2019s workflow, that besides transitioning the sample, it also generates a\ndispatch report. We want this transition to be handled asynchronously by\n<em>senaite.queue</em>.</p>\n<p>We need first to intercept the action <em>dispatch</em> and feed the queue by adding a\nspecific-adapter:</p>\n<pre><span class=\"nt\">&lt;adapter</span>\n  <span class=\"na\">name=</span><span class=\"s\">\"workflow_action_dispatch\"</span>\n  <span class=\"na\">for=</span><span class=\"s\">\"*\n       zope.publisher.interfaces.browser.IBrowserRequest\"</span>\n  <span class=\"na\">factory=</span><span class=\"s\">\".analysisrequests.WorkflowActionDispatchAdapter\"</span>\n  <span class=\"na\">provides=</span><span class=\"s\">\"bika.lims.interfaces.IWorkflowActionAdapter\"</span>\n  <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bika.lims.browser.workflow</span> <span class=\"kn\">import</span> <span class=\"n\">WorkflowActionGenericAdapter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">senaite.queue.queue</span> <span class=\"kn\">import</span> <span class=\"n\">queue_task</span>\n\n<span class=\"n\">DISPATCH_TASK_ID</span> <span class=\"o\">=</span> <span class=\"s2\">\"my.addon.task_dispatch\"</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">WorkflowActionDispatchAdapter</span><span class=\"p\">(</span><span class=\"n\">WorkflowActionGenericAdapter</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Adapter that intercepts the action dispatch from samples listing and\n    add the process into the queue\n    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_action</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">objects</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Queue one task per object</span>\n        <span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">objects</span><span class=\"p\">:</span>\n            <span class=\"n\">queue_task</span><span class=\"p\">(</span><span class=\"n\">DISPATCH_TASK_ID</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">objects</span>\n</pre>\n<p>Now, we only need to tell <em>senaite.queue</em> how to handle this task by adding\nanother adapter:</p>\n<pre><span class=\"c\">&lt;!-- My own adapter for dispatch action to be handled by senaite.queue --&gt;</span>\n<span class=\"nt\">&lt;adapter</span>\n  <span class=\"na\">name=</span><span class=\"s\">\"my.addon.task_dispatch\"</span>\n  <span class=\"na\">factory=</span><span class=\"s\">\".QueuedDispatchTaskAdapter\"</span>\n  <span class=\"na\">provides=</span><span class=\"s\">\"senaite.queue.interfaces.IQueuedTaskAdapter\"</span>\n  <span class=\"na\">for=</span><span class=\"s\">\"bika.lims.interfaces.IAnalysisRequest\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">senaite.core.interfaces</span> <span class=\"kn\">import</span> <span class=\"n\">IAnalysisRequest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">senaite.queue.adapters</span> <span class=\"kn\">import</span> <span class=\"n\">QueuedTaskAdapter</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">QueuedDispatchTaskAdapter</span><span class=\"p\">(</span><span class=\"n\">QueuedTaskAdapter</span><span class=\"p\">):</span>\n     <span class=\"sd\">\"\"\"Adapter in charge dispatching a Sample\n     \"\"\"</span>\n     <span class=\"n\">adapts</span><span class=\"p\">(</span><span class=\"n\">IAnalysisRequest</span><span class=\"p\">)</span>\n\n     <span class=\"k\">def</span> <span class=\"nf\">process</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">task</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n         <span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">context</span>\n\n         <span class=\"c1\"># Your logic here for processing the sample</span>\n         <span class=\"c1\"># e.g transition the sample, generate the report, send email, etc.</span>\n\n         <span class=\"c1\"># Return whether the process finished successfully or not</span>\n         <span class=\"k\">return</span> <span class=\"n\">succeed</span>\n</pre>\n<p>This procedure can be used not only for transitions, but for any process you\nmight think of.</p>\n<p>Since transitions are good candidates for queued tasks, <em>senaite.queue</em> provides\nan easier mechanism to queue and process workflow actions. Instead of all the\nabove, you can easily bind a workflow action by reusing the adapters\n<em>senaite.queue</em> already provides such scenarios. For instance, if you want the\naction \u201cdispatch\u201d to be automatically handled by <em>senaite.queue</em> when user\nclicks the button \u201cDispatch\u201d from the bottom of generic Samples listing, you\nonly need to declare two adapters, as follows:</p>\n<pre><span class=\"c\">&lt;!-- Adapter that intercepts the action \"dispatch\" from listings and adds\ntasks for this action and selected objects to the queue --&gt;</span>\n<span class=\"nt\">&lt;adapter</span>\n  <span class=\"na\">name=</span><span class=\"s\">\"workflow_action_dispatch\"</span>\n  <span class=\"na\">for=</span><span class=\"s\">\"bika.lims.interfaces.IAnalysisRequests\n       senaite.queue.interfaces.ISenaiteQueueLayer\"</span>\n  <span class=\"na\">factory=</span><span class=\"s\">\"senaite.queue.adapters.WorkflowActionGenericQueueAdapter\"</span>\n  <span class=\"na\">provides=</span><span class=\"s\">\"bika.lims.interfaces.IWorkflowActionAdapter\"</span>\n  <span class=\"na\">permission=</span><span class=\"s\">\"zope.Public\"</span> <span class=\"nt\">/&gt;</span>\n\n<span class=\"c\">&lt;!-- Adapter that processes the \"dispatch\" action for a queued task --&gt;</span>\n<span class=\"nt\">&lt;adapter</span>\n  <span class=\"na\">name=</span><span class=\"s\">\"task_action_dispatch\"</span>\n  <span class=\"na\">factory=</span><span class=\"s\">\"senaite.queue.adapters.QueuedActionTaskAdapter\"</span>\n  <span class=\"na\">provides=</span><span class=\"s\">\"senaite.queue.interfaces.IQueuedTaskAdapter\"</span>\n  <span class=\"na\">for=</span><span class=\"s\">\"bika.lims.interfaces.IAnalysisRequests\"</span> <span class=\"nt\">/&gt;</span>\n</pre>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<div id=\"queued-tasks\">\n<h3>Queued tasks</h3>\n<img alt=\"Queued tasks\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01a91e74f3222949dbc1278c2759e9d817e2ebac/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73656e616974652f73656e616974652e71756575652f6d61737465722f7374617469632f7175657565645f7461736b732e706e67\" width=\"760px\">\n</div>\n<div id=\"queued-analyses\">\n<h3>Queued analyses</h3>\n<img alt=\"Queued analyses\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39d27ee105e2e5e2524b77f95260045162b37b85/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73656e616974652f73656e616974652e71756575652f6d61737465722f7374617469632f7175657565645f616e616c797365732e706e67\" width=\"760px\">\n</div>\n<div id=\"queued-worksheet\">\n<h3>Queued worksheet</h3>\n<img alt=\"Queued worksheet\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f6699745db50f29bd484122b5a77cc6c25dab97/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73656e616974652f73656e616974652e71756575652f6d61737465722f7374617469632f7175657565645f776f726b73686565742e706e67\" width=\"760px\">\n</div>\n<div id=\"queue-settings\">\n<h3>Queue settings</h3>\n<img alt=\"Queue configuration view\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c6d4b5bff402ab56230e2efaee59c42d0e30722/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73656e616974652f73656e616974652e71756575652f6d61737465722f7374617469632f71756575655f73657474696e67732e706e67\" width=\"760px\">\n</div>\n</div>\n<div id=\"contribute\">\n<h2>Contribute</h2>\n<p>We want contributing to SENAITE.QUEUE to be fun, enjoyable, and educational\nfor anyone, and everyone. This project adheres to the <a href=\"https://github.com/senaite/senaite.queue/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Contributor Covenant</a>.</p>\n<p>By participating, you are expected to uphold this code. Please report\nunacceptable behavior.</p>\n<p>Contributions go far beyond pull requests and commits. Although we love giving\nyou the opportunity to put your stamp on SENAITE.QUEUE, we also are thrilled\nto receive a variety of other contributions.</p>\n<p>Please, read <a href=\"https://github.com/senaite/senaite.queue/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">Contributing to senaite.queue document</a>.</p>\n<p>If you wish to contribute with translations, check the project site on\n<a href=\"https://www.transifex.com/senaite/senaite-queue/\" rel=\"nofollow\">Transifex</a>.</p>\n</div>\n<div id=\"feedback-and-support\">\n<h2>Feedback and support</h2>\n<ul>\n<li><a href=\"https://community.senaite.org/\" rel=\"nofollow\">Community site</a></li>\n<li><a href=\"https://gitter.im/senaite/Lobby\" rel=\"nofollow\">Gitter channel</a></li>\n<li><a href=\"https://sourceforge.net/projects/senaite/lists/senaite-users\" rel=\"nofollow\">Users list</a></li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><strong>SENAITE.QUEUE</strong> Copyright (C) 2019-2020 RIDING BYTES &amp; NARALABS</p>\n<p>This program is free software; you can redistribute it and/or modify it under\nthe terms of the <a href=\"https://github.com/senaite/senaite.queue/blob/master/LICENSE\" rel=\"nofollow\">GNU General Public License version 2</a> as published\nby the Free Software Foundation.</p>\n<p>This program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\nGNU General Public License for more details.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<div id=\"id1\">\n<h3>1.0.1 (2020-02-09)</h3>\n<p><strong>Added</strong></p>\n<ul>\n<li>Allow to manually assign the username to the task to be queued</li>\n<li>Support for failed tasks</li>\n<li>Notify when the value for max_seconds_unlock is too low</li>\n<li>#3 New <cite>queue_tasks</cite> view with the list of tasks and statistics</li>\n<li>#2 Add max_retries setting for failing tasks</li>\n<li>#1 Add sample guard to prevent transitions when queued analyses</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.0 (2019-11-10)</h3>\n<p>First version</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6599390, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1940088ca978e9f20a83c2184edac6dc", "sha256": "094d65d03a68d75b28c2be2b998b345d08266c02d626bc1ea6d8d072b0b5cbe7"}, "downloads": -1, "filename": "senaite.queue-1.0.0.zip", "has_sig": false, "md5_digest": "1940088ca978e9f20a83c2184edac6dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 43560, "upload_time": "2019-11-10T12:51:05", "upload_time_iso_8601": "2019-11-10T12:51:05.632148Z", "url": "https://files.pythonhosted.org/packages/cf/27/94214ee31ae34f4799278262a18db3816aa3fb0ae919fc2121c8eadc8aab/senaite.queue-1.0.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "42189edd79f9de6983cd3e21a0dac57f", "sha256": "613bf5979d399f5848ad2b6606647e4116fdf90546383aaa2af7faa9cbb5aaac"}, "downloads": -1, "filename": "senaite.queue-1.0.1.zip", "has_sig": false, "md5_digest": "42189edd79f9de6983cd3e21a0dac57f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108680, "upload_time": "2020-02-09T22:34:25", "upload_time_iso_8601": "2020-02-09T22:34:25.874495Z", "url": "https://files.pythonhosted.org/packages/01/c2/7d25903643c24b323f179ebc2609cf5ab5c567e047f4b3fb8dbeda4f149a/senaite.queue-1.0.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42189edd79f9de6983cd3e21a0dac57f", "sha256": "613bf5979d399f5848ad2b6606647e4116fdf90546383aaa2af7faa9cbb5aaac"}, "downloads": -1, "filename": "senaite.queue-1.0.1.zip", "has_sig": false, "md5_digest": "42189edd79f9de6983cd3e21a0dac57f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 108680, "upload_time": "2020-02-09T22:34:25", "upload_time_iso_8601": "2020-02-09T22:34:25.874495Z", "url": "https://files.pythonhosted.org/packages/01/c2/7d25903643c24b323f179ebc2609cf5ab5c567e047f4b3fb8dbeda4f149a/senaite.queue-1.0.1.zip", "yanked": false}], "timestamp": "Fri May  8 02:55:18 2020"}