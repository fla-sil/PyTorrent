{"info": {"author": "Jat", "author_email": "chat@jat.email", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: System :: Distributed Computing"], "description": "Celery Flower\n=============\n\n.. image:: https://img.shields.io/pypi/v/celery-flower.svg\n    :target: https://pypi.python.org/pypi/celery-flower\n\n.. image:: https://travis-ci.org/jat001/flower.svg?branch=master\n        :target: https://travis-ci.org/jat001/flower\n\nFlower is a web based tool for monitoring and administrating Celery clusters.\n\nFeatures\n--------\n\n- Real-time monitoring using Celery Events\n\n    - Task progress and history\n    - Ability to show task details (arguments, start time, runtime, and more)\n    - Graphs and statistics\n\n- Remote Control\n\n    - View worker status and statistics\n    - Shutdown and restart worker instances\n    - Control worker pool size and autoscale settings\n    - View and modify the queues a worker instance consumes from\n    - View currently running tasks\n    - View scheduled tasks (ETA/countdown)\n    - View reserved and revoked tasks\n    - Apply time and rate limits\n    - Configuration viewer\n    - Revoke or terminate tasks\n\n- Broker monitoring\n\n    - View statistics for all Celery queues\n    - Queue length graphs\n\n- HTTP API\n- Basic Auth and Google OpenID authentication\n\nAPI\n---\n\nFlower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.\n\nFor example you can restart worker's pool by: ::\n\n    $ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n\nOr call a task by: ::\n\n    $ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n\nOr terminate executing task by: ::\n\n    $ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n\nOr receive task completion events in real-time:\n\n.. code-block:: javascript\n\n    var ws = new WebSocket('ws://localhost:5555/api/task/events/task-succeeded/');\n    ws.onmessage = function (event) {\n        console.log(event.data);\n    }\n\nFor more info checkout `API Reference`_ and `examples`_.\n\n.. _API Reference: https://flower.readthedocs.io/en/latest/api.html\n.. _examples: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nInstallation\n------------\n\nPyPI version: ::\n\n    $ pip install flower\n\nDevelopment version: ::\n\n    $ pip install https://github.com/jat001/flower/zipball/master\n\nUsage\n-----\n\nLaunch the server and open http://localhost:5555: ::\n\n    $ flower --port=5555\n\nOr launch from celery: ::\n\n    $ celery flower -A proj --address=127.0.0.1 --port=5555\n\nBroker URL and other configuration options can be passed through the standard Celery options: ::\n\n    $ celery flower -A proj --broker=amqp://guest:guest@localhost:5672//\n\nOr run with unix socket file: ::\n\n    $ flower --unix_socket=/tmp/flower.sock\n\n\nDocumentation\n-------------\n\nDocumentation is available at `Read the Docs`_ and `IPython Notebook Viewer`_\n\n.. _Read the Docs: https://flower.readthedocs.io\n.. _IPython Notebook Viewer: http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\n\nLicense\n-------\n\nFlower is licensed under BSD 3-Clause License. See the LICENSE file\nin the top distribution directory for the full license text.\n\nGetting help\n------------\n\nPlease head over to #celery IRC channel on irc.freenode.net or\n`open an issue`_.\n\n.. _open an issue: https://github.com/jat001/flower/issues\n\nContributing\n------------\n\nIf you'd like to contribute, simply fork `the repository`_, commit your\nchanges, run the tests (`tox`) and send a pull request.\nMake sure you add yourself to CONTRIBUTORS_.\n\nIf you are interested in maintaining the project please contact.\n\n.. _`the repository`: https://github.com/jat001/flower\n.. _CONTRIBUTORS: https://github.com/jat001/flower/blob/master/CONTRIBUTORS\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jat001/flower", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "celery-flower", "package_url": "https://pypi.org/project/celery-flower/", "platform": "", "project_url": "https://pypi.org/project/celery-flower/", "project_urls": {"Homepage": "https://github.com/jat001/flower"}, "release_url": "https://pypi.org/project/celery-flower/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Celery Flower", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/celery-flower\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/celery-flower.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4591decffafd5246e6721546e2269d54ebe15490/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63656c6572792d666c6f7765722e737667\"></a>\n<a href=\"https://travis-ci.org/jat001/flower\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jat001/flower.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d616edc02219a8c23819a8995c0e39a73ee05d9/68747470733a2f2f7472617669732d63692e6f72672f6a61743030312f666c6f7765722e7376673f6272616e63683d6d6173746572\"></a>\n<p>Flower is a web based tool for monitoring and administrating Celery clusters.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li><p>Real-time monitoring using Celery Events</p>\n<blockquote>\n<ul>\n<li>Task progress and history</li>\n<li>Ability to show task details (arguments, start time, runtime, and more)</li>\n<li>Graphs and statistics</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Remote Control</p>\n<blockquote>\n<ul>\n<li>View worker status and statistics</li>\n<li>Shutdown and restart worker instances</li>\n<li>Control worker pool size and autoscale settings</li>\n<li>View and modify the queues a worker instance consumes from</li>\n<li>View currently running tasks</li>\n<li>View scheduled tasks (ETA/countdown)</li>\n<li>View reserved and revoked tasks</li>\n<li>Apply time and rate limits</li>\n<li>Configuration viewer</li>\n<li>Revoke or terminate tasks</li>\n</ul>\n</blockquote>\n</li>\n<li><p>Broker monitoring</p>\n<blockquote>\n<ul>\n<li>View statistics for all Celery queues</li>\n<li>Queue length graphs</li>\n</ul>\n</blockquote>\n</li>\n<li><p>HTTP API</p>\n</li>\n<li><p>Basic Auth and Google OpenID authentication</p>\n</li>\n</ul>\n</div>\n<div id=\"api\">\n<h2>API</h2>\n<p>Flower API enables to manage the cluster via REST API, call tasks and\nreceive task events in real-time via WebSockets.</p>\n<p>For example you can restart worker\u2019s pool by:</p>\n<pre>$ curl -X POST http://localhost:5555/api/worker/pool/restart/myworker\n</pre>\n<p>Or call a task by:</p>\n<pre>$ curl -X POST -d '{\"args\":[1,2]}' http://localhost:5555/api/task/async-apply/tasks.add\n</pre>\n<p>Or terminate executing task by:</p>\n<pre>$ curl -X POST -d 'terminate=True' http://localhost:5555/api/task/revoke/8a4da87b-e12b-4547-b89a-e92e4d1f8efd\n</pre>\n<p>Or receive task completion events in real-time:</p>\n<pre><span class=\"kd\">var</span> <span class=\"nx\">ws</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"nx\">WebSocket</span><span class=\"p\">(</span><span class=\"s1\">'ws://localhost:5555/api/task/events/task-succeeded/'</span><span class=\"p\">);</span>\n<span class=\"nx\">ws</span><span class=\"p\">.</span><span class=\"nx\">onmessage</span> <span class=\"o\">=</span> <span class=\"kd\">function</span> <span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n    <span class=\"nx\">console</span><span class=\"p\">.</span><span class=\"nx\">log</span><span class=\"p\">(</span><span class=\"nx\">event</span><span class=\"p\">.</span><span class=\"nx\">data</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>For more info checkout <a href=\"https://flower.readthedocs.io/en/latest/api.html\" rel=\"nofollow\">API Reference</a> and <a href=\"http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>PyPI version:</p>\n<pre>$ pip install flower\n</pre>\n<p>Development version:</p>\n<pre>$ pip install https://github.com/jat001/flower/zipball/master\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Launch the server and open <a href=\"http://localhost:5555\" rel=\"nofollow\">http://localhost:5555</a>:</p>\n<pre>$ flower --port=5555\n</pre>\n<p>Or launch from celery:</p>\n<pre>$ celery flower -A proj --address=127.0.0.1 --port=5555\n</pre>\n<p>Broker URL and other configuration options can be passed through the standard Celery options:</p>\n<pre>$ celery flower -A proj --broker=amqp://guest:guest@localhost:5672//\n</pre>\n<p>Or run with unix socket file:</p>\n<pre>$ flower --unix_socket=/tmp/flower.sock\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Documentation is available at <a href=\"https://flower.readthedocs.io\" rel=\"nofollow\">Read the Docs</a> and <a href=\"http://nbviewer.ipython.org/urls/raw.github.com/mher/flower/master/docs/api.ipynb\" rel=\"nofollow\">IPython Notebook Viewer</a></p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Flower is licensed under BSD 3-Clause License. See the LICENSE file\nin the top distribution directory for the full license text.</p>\n</div>\n<div id=\"getting-help\">\n<h2>Getting help</h2>\n<p>Please head over to #celery IRC channel on irc.freenode.net or\n<a href=\"https://github.com/jat001/flower/issues\" rel=\"nofollow\">open an issue</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you\u2019d like to contribute, simply fork <a href=\"https://github.com/jat001/flower\" rel=\"nofollow\">the repository</a>, commit your\nchanges, run the tests (<cite>tox</cite>) and send a pull request.\nMake sure you add yourself to <a href=\"https://github.com/jat001/flower/blob/master/CONTRIBUTORS\" rel=\"nofollow\">CONTRIBUTORS</a>.</p>\n<p>If you are interested in maintaining the project please contact.</p>\n</div>\n\n          </div>"}, "last_serial": 3049649, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "d6cd058997f45d10c19557177cbe7fb8", "sha256": "25828d784a31255e0ca0261a7fe897882f587b2a07def11c5db00993e8a9bdc0"}, "downloads": -1, "filename": "celery-flower-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d6cd058997f45d10c19557177cbe7fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1296345, "upload_time": "2017-07-26T09:44:44", "upload_time_iso_8601": "2017-07-26T09:44:44.066856Z", "url": "https://files.pythonhosted.org/packages/56/6f/f15228250f130ae8c0aa8af02d90937848ee73a0da0e87749ad5eb6018e9/celery-flower-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d6cd058997f45d10c19557177cbe7fb8", "sha256": "25828d784a31255e0ca0261a7fe897882f587b2a07def11c5db00993e8a9bdc0"}, "downloads": -1, "filename": "celery-flower-1.0.1.tar.gz", "has_sig": false, "md5_digest": "d6cd058997f45d10c19557177cbe7fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1296345, "upload_time": "2017-07-26T09:44:44", "upload_time_iso_8601": "2017-07-26T09:44:44.066856Z", "url": "https://files.pythonhosted.org/packages/56/6f/f15228250f130ae8c0aa8af02d90937848ee73a0da0e87749ad5eb6018e9/celery-flower-1.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:52 2020"}