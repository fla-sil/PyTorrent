{"info": {"author": "Zope Corporation and Contributors", "author_email": "zope3-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "File Synchronization for Zope3\n==============================\n\nThe FSSync project (zope.app.fssync) provides support for filesystem\nsynchronization of Zope3 content that resides in a ZODB. This package defines\na Web-based API with basic support for some standard zope.app content\ntypes and the standard security policy.\n\nThis project is build on top of the more general zope.fssync package\nwhich provides object serialization and deserialization tools. If you\nneed a pure Python API which is independent of the ZODB and the Zope3\nsecurity machinery you should look at zope.fssync.\n\nFSSync includes a command line client that resembles svn or cvs. Type::\n\n    bin/zsync help\n\nfor available commands and further information. If you want to see the zsync\nclient in action you can run the demo application::\n\n    bin/demo start\n\nOpen http://localhost:8080/manage in your browser and login with\n``zsync`` as your username and password. Add a ``demo`` folder with\nsome files via the ZMI.  After that run the command line client for an\ninitial checkout::\n\n    bin/zsync checkout http://zsync:zsync@localhost:8080/demo ./parts/checkout\n\nEdit one of the files in the checkout directory and commit the changes::\n\n    bin/zsync commit ./parts/checkout\n\nThe modified file should now be available on the server.\n\n\nSSH\n---\n\nZsync now supports communication over ssh in addition to http. ssh\nurls look like::\n\n  zsync+ssh://user:passwd@host:port/path\n\nThe zsync protocol is the same as over HTTP, it simply is sent via\nssh.\n\nOn the server side, the ssh server can check public keys to enforce\nsecurity (though the demo server doesn't bother), and is responsible\nfor passing the zsync request to zope and returning the response over\nssh.\n\nThere is an example ssh server in src/zope/app/fssync/demo_server.py\nTo use it, first make sure that zope is running. Then start the\nserver::\n\n    sudo bin/demo-ssh-server\n\nThis starts a demo ssh server on port 2200. The server must be run as\nroot in order to read the ssh host keys.\n\nIn another terminal use the zsync client to connect to it::\n\n    bin/zsync co zsync+ssh://zsync:zsync@localhost:2200/demo parts/co2\n\nThis checks out the demo folder into the parts/co2 folder.\n\nYou should be able to work in the check out normally. Zsync will use\nssh to communicate, but will otherwise act normally.\n\n\nExtending zsync\n---------------\n\nThe zsync script is generated by the following part of the buildout.cfg::\n\n    [zsync]\n    recipe = zc.recipe.egg\n    eggs = zope.app.fssync\n    entry-points = zsync=zope.app.fssync.main:main\n\nIf you want to use zope.app.fssync in your own application you\npropably have to define application specific serializers and\ndeserializers. See zope/app/fssync/fssync.txt\n\nfor further documentation. You probably also need your own zsync script with\nadditional dependencies. Simply add the necessary eggs to the corresponding\nbuildout snippet of your project.\n\n\n\nChanges\n=======\n\n3.6\n---\n\n- The ssh transport now looks for known_hosts in an application specific file,\n  as well as the normal known_hosts file and in the user's Agent.  This file is\n  ~/.ssh/fssync_known_hosts if POSIX and ~/ssh/fssync_known_hosts if win32.\n\n- BUGFIX: The ssh transport now will prompt the user if he wishes to use an\n  unrecognized hostkey.  If he says 'yes', it will be added to the fssync\n  known_hosts file.  if he says 'no', an exception is raised.\n\n- BUGFIX: If the user's public key is encrypted, fssync will prompt for a\n  password.\n\n3.5\n---\n\n* Added -v --verbose switches to zsync status command. Verbose is off\n  by default.\n\n* Added support for avoiding conflicts after commiting metadata files.\n\n* Added 'resolved' as an alias for the 'resolve' command.\n\n* Added a 'merge' command. It allows merging changes from one checkout\n  to another.\n\n* Added ssh network transport. The client can now use zsync+ssh://\n  urls to communicate with the server.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zope.app.fssync", "keywords": "zope3 serialization synchronization", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zope.app.fssync", "package_url": "https://pypi.org/project/zope.app.fssync/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zope.app.fssync/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zope.app.fssync"}, "release_url": "https://pypi.org/project/zope.app.fssync/3.6.0/", "requires_dist": null, "requires_python": null, "summary": "Filesystem synchronization utility for Zope 3.", "version": "3.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"file-synchronization-for-zope3\">\n<h2>File Synchronization for Zope3</h2>\n<p>The FSSync project (zope.app.fssync) provides support for filesystem\nsynchronization of Zope3 content that resides in a ZODB. This package defines\na Web-based API with basic support for some standard zope.app content\ntypes and the standard security policy.</p>\n<p>This project is build on top of the more general zope.fssync package\nwhich provides object serialization and deserialization tools. If you\nneed a pure Python API which is independent of the ZODB and the Zope3\nsecurity machinery you should look at zope.fssync.</p>\n<p>FSSync includes a command line client that resembles svn or cvs. Type:</p>\n<pre>bin/zsync help\n</pre>\n<p>for available commands and further information. If you want to see the zsync\nclient in action you can run the demo application:</p>\n<pre>bin/demo start\n</pre>\n<p>Open <a href=\"http://localhost:8080/manage\" rel=\"nofollow\">http://localhost:8080/manage</a> in your browser and login with\n<tt>zsync</tt> as your username and password. Add a <tt>demo</tt> folder with\nsome files via the ZMI.  After that run the command line client for an\ninitial checkout:</p>\n<pre>bin/zsync checkout http://zsync:zsync@localhost:8080/demo ./parts/checkout\n</pre>\n<p>Edit one of the files in the checkout directory and commit the changes:</p>\n<pre>bin/zsync commit ./parts/checkout\n</pre>\n<p>The modified file should now be available on the server.</p>\n<div id=\"ssh\">\n<h3>SSH</h3>\n<p>Zsync now supports communication over ssh in addition to http. ssh\nurls look like:</p>\n<pre>zsync+ssh://user:passwd@host:port/path\n</pre>\n<p>The zsync protocol is the same as over HTTP, it simply is sent via\nssh.</p>\n<p>On the server side, the ssh server can check public keys to enforce\nsecurity (though the demo server doesn\u2019t bother), and is responsible\nfor passing the zsync request to zope and returning the response over\nssh.</p>\n<p>There is an example ssh server in src/zope/app/fssync/demo_server.py\nTo use it, first make sure that zope is running. Then start the\nserver:</p>\n<pre>sudo bin/demo-ssh-server\n</pre>\n<p>This starts a demo ssh server on port 2200. The server must be run as\nroot in order to read the ssh host keys.</p>\n<p>In another terminal use the zsync client to connect to it:</p>\n<pre>bin/zsync co zsync+ssh://zsync:zsync@localhost:2200/demo parts/co2\n</pre>\n<p>This checks out the demo folder into the parts/co2 folder.</p>\n<p>You should be able to work in the check out normally. Zsync will use\nssh to communicate, but will otherwise act normally.</p>\n</div>\n<div id=\"extending-zsync\">\n<h3>Extending zsync</h3>\n<p>The zsync script is generated by the following part of the buildout.cfg:</p>\n<pre>[zsync]\nrecipe = zc.recipe.egg\neggs = zope.app.fssync\nentry-points = zsync=zope.app.fssync.main:main\n</pre>\n<p>If you want to use zope.app.fssync in your own application you\npropably have to define application specific serializers and\ndeserializers. See zope/app/fssync/fssync.txt</p>\n<p>for further documentation. You probably also need your own zsync script with\nadditional dependencies. Simply add the necessary eggs to the corresponding\nbuildout snippet of your project.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>3.6</h3>\n<ul>\n<li>The ssh transport now looks for known_hosts in an application specific file,\nas well as the normal known_hosts file and in the user\u2019s Agent.  This file is\n~/.ssh/fssync_known_hosts if POSIX and ~/ssh/fssync_known_hosts if win32.</li>\n<li>BUGFIX: The ssh transport now will prompt the user if he wishes to use an\nunrecognized hostkey.  If he says \u2018yes\u2019, it will be added to the fssync\nknown_hosts file.  if he says \u2018no\u2019, an exception is raised.</li>\n<li>BUGFIX: If the user\u2019s public key is encrypted, fssync will prompt for a\npassword.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>3.5</h3>\n<ul>\n<li>Added -v \u2013verbose switches to zsync status command. Verbose is off\nby default.</li>\n<li>Added support for avoiding conflicts after commiting metadata files.</li>\n<li>Added \u2018resolved\u2019 as an alias for the \u2018resolve\u2019 command.</li>\n<li>Added a \u2018merge\u2019 command. It allows merging changes from one checkout\nto another.</li>\n<li>Added ssh network transport. The client can now use zsync+ssh://\nurls to communicate with the server.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 744779, "releases": {"3.5": [{"comment_text": "", "digests": {"md5": "fac7ae805745b21b44b43d857e5537ba", "sha256": "87552822e22734299eb6b76122a85d7ade18f83b253b6576ebeef27849368aed"}, "downloads": -1, "filename": "zope.app.fssync-3.5.tar.gz", "has_sig": false, "md5_digest": "fac7ae805745b21b44b43d857e5537ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48693, "upload_time": "2009-03-13T15:16:51", "upload_time_iso_8601": "2009-03-13T15:16:51.381912Z", "url": "https://files.pythonhosted.org/packages/4b/1e/3226296f32a6c2e4411b3d6853e7f98c8cdc52c88f69e91068dd1f4c53de/zope.app.fssync-3.5.tar.gz", "yanked": false}], "3.6.0": [{"comment_text": "", "digests": {"md5": "d62c637bbe3ac50ac7fc17316aef713f", "sha256": "0b8d19c88e164271cc51f2418ef3f604de2a72d0d2da80a083e8e7c440ca332c"}, "downloads": -1, "filename": "zope.app.fssync-3.6.0.tar.gz", "has_sig": false, "md5_digest": "d62c637bbe3ac50ac7fc17316aef713f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50293, "upload_time": "2012-04-10T16:33:06", "upload_time_iso_8601": "2012-04-10T16:33:06.963466Z", "url": "https://files.pythonhosted.org/packages/fc/d4/8cc68863d1dddd8a7d68b76fc8085d3a069bf6dd12b91016b79146e2b234/zope.app.fssync-3.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d62c637bbe3ac50ac7fc17316aef713f", "sha256": "0b8d19c88e164271cc51f2418ef3f604de2a72d0d2da80a083e8e7c440ca332c"}, "downloads": -1, "filename": "zope.app.fssync-3.6.0.tar.gz", "has_sig": false, "md5_digest": "d62c637bbe3ac50ac7fc17316aef713f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 50293, "upload_time": "2012-04-10T16:33:06", "upload_time_iso_8601": "2012-04-10T16:33:06.963466Z", "url": "https://files.pythonhosted.org/packages/fc/d4/8cc68863d1dddd8a7d68b76fc8085d3a069bf6dd12b91016b79146e2b234/zope.app.fssync-3.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:28 2020"}