{"info": {"author": "N\u00e2mio Evangelista Cavalcante de Sousa", "author_email": "namio.sousa@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Natural Language :: Portuguese", "Natural Language :: Portuguese (Brazilian)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "[![PyPI](https://img.shields.io/pypi/v/BRADocs4Py.svg)](https://pypi.org/project/bradocs4py/)\n[![GitHub top language](https://img.shields.io/github/languages/top/namio/BRADocs4Py.svg)](https://github.com/namio/BRADocs4Py.git)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/BRADocs4Py.svg)](https://pypi.org/project/bradocs4py/)\n[![PyPI - Wheel](https://img.shields.io/pypi/wheel/BRADocs4Py.svg)](https://pypi.org/project/bradocs4py/)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/BRADocs4Py.svg)](https://pypi.org/project/bradocs4py/)\n[![GitHub](https://img.shields.io/github/license/namio/BRADocs4Py.svg)](https://github.com/namio/BRADocs4Py/blob/master/LICENSE)\n[![GitHub last commit](https://img.shields.io/github/last-commit/namio/BRADocs4PY.svg)](https://github.com/namio/BRADocs4Py.git)\n[![Say Thanks!](https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg)](https://saythanks.io/to/namio)\n\n# BRADocs4Py\n\nBRADocs4Py \u00e9 uma biblioteca que visa fornecer componentes para trabalhar com tipos de dados espec\u00edficos da realidade brasileira.\n\nEsta biblioteca surgiu mediante a necessidade de se ter tipos espec\u00edficos que possibilitem lidar com documentos de identifica\u00e7\u00e3o pr\u00f3prios do Brasil, como \u00e9 o caso do Cadastro de Pessoa F\u00edsica (CPF) e do Cadastro Nacional de Pessoa Jur\u00eddica (CNPJ).\n\nAl\u00e9m de conter classes que representam o modelo computacional dos principais documentos brasileiros, esta biblioteca tamb\u00e9m disponibiliza classes que permitem a valida\u00e7\u00e3o e a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos; sendo estas \u00faltimas disponibilizadas exclusivamente para fins de testes computacionais.\n\n> This software is coded and documented in portuguese only as it is intended to be used to generate the necessary files for the brazilian government regarding to digital bookkeeping.\n\n## Requisitos\n\n  * python\n\n## Como instalar\n\n    $ pip install bradocs4py\n\n## Objetivos do Projeto\n\nA ideia inicial do projeto e unificar em uma \u00fanica biblioteca m\u00f3dulos que permitam representar computacionalmente e validar documentos brasileiros - inicialmente CPF e CNPJ, al\u00e9m de permitir a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos.\n\n## Compatibilidade do Projeto\n\nO projeto inicialmente suportar\u00e1 apenas Python 3.6.5+.\n\nOutras linguagens de programa\u00e7\u00e3o poder\u00e3o ter vers\u00f5es especificas conforme minha disponibilidade de tempo.\n\n## Status do Projeto\n\nO projeto est\u00e1 em fase inicial de desenvolvimento.\n\n| M\u00f3dulo                              |  Situa\u00e7\u00e3o       |\n|:------------------------------------|:---------------:|\n| [DocumentoIdentificacao](#di)       |Funcional        |\n| [CPF](#cpf)                         |Funcional        |\n| [ValidadorCpf](#vcpf)               |Funcional        |\n| [GeradorCpf](#gcpf)                 |Funcional        |\n| [Cnpj](#cnpj)                       |Funcional        |\n| [ValidadorCnpj](#vcnpj)             |Funcional        |\n| [GeradorCnpj](#gcnpj)               |Funcional        |\n| [InscricaoEstadual](#ie)            |Funcional        |\n| [ValidadorInscricaoEstadual](#vie)  |Funcional        |\n| [GeradorInscricaoEstadual](#gie)    |N\u00e3o implementado |\n| [InscricaoSuframa](#is)             |Funcional        |\n| [ValidadorSuframa](#vs)             |Funcional        |\n| [GeradorSuframa](#gs)               |Funcional        |\n| [ChaveAcessoNFe](#chave)            |Funcional        |\n| [ValidadorChaveAcessoNFe](#vchave)  |Funcional        |\n| [GeradorChaveAcessoNFe](#gchave)    |Funcional        |\n| [GTIN](#gtin)                       |Funcional        |\n| [ValidadorGTIN](#vgtin)             |Funcional        |\n| [GeradorGTIN](#ggtin)               |Funcional        |\n\n\n### <a name=\"di\"></a> DocumentoIdentificacao\n\nClasse abstrata, n\u00e3o podendo ser instanciada diretamente, serve como base para todas as classes que representam um documento de identifica\u00e7\u00e3o ou qualquer outro documento brasileiro que necessite de valida\u00e7\u00e3o.\n\n### <a name=\"cpf\"></a> CPF\n\nClasse usada para representar em c\u00f3digo Pyhton um _Cadastro de Pessoa F\u00edsica_ (CPF); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = CPF('52513127765')\n    >>> cpf\n    '525.131.277-65'\n\n    >>> cpf.isValid\n    True\n\n    >>> cpf.rawValue\n    52513127765\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> cpf.isValid\n    False\n\n    >>> print(cpf)\n    abcdefghijk\n\n    >>> print(cpf.rawValue)\n    abcdefghijk\n\n> Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CPF, **sempre** obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade __isValid__ de uma inst\u00e2ncia de CPF para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.\n\n> A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CPF s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CPF; ao contr\u00e1rio ser\u00e1 exibida a _string_ utilizada para cri\u00e1-la.\n\n> Para obter a _string_ utilizada ao instanciar um CPF, basta acessar a propriedade **rawValue** da inst\u00e2ncia criada.\n\n### <a name=\"vcpf\"></a> ValidadorCpf\n\nClasse respons\u00e1vel por validar uma inst\u00e2ncia de CPF ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de um CPF.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = CPF('abcdefghijk')\n    >>> ValidadorCpf.validar(cpf)\n    False\n\n    >>> ValidadorCpf.validar('123.456.789-00')\n    False\n\n    Foi criado um CPF v\u00e1lido, por\u00e9m foi digitado um caractere de separa\u00e7\u00e3o diferente dos caracteres esperados (.-/ ). Mesmo assim, o validador informa tratar-se de um CPF correto\n    >>> cpf = CPF('508,697,212-40')\n    >>> ValidadorCpf.validar(cpf)\n    True\n\n### <a name=\"gcpf\"></a> GeradorCpf\n\nClasse respons\u00e1vel por gerar aleatoriamente um CPF v\u00e1lido.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cpf = GeradorCpf.gerar()\n    >>> cpf.isValid\n    True\n\n### <a name=\"cnpj\"></a> Cnpj\n\nClasse usada para representar em c\u00f3digo Pyhton um _Cadastro Nacional de Pessoa Jur\u00eddica_ (CNPJ); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('12345678901234')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>> cnpj.isValid\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-00')\n\t>>> cnpj.isValid\n\tTrue\n\n> Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CNPJ, **sempre** obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade __isValid__ de uma inst\u00e2ncia de CNPJ para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.\n\n> A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CNPJ s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CNPJ; ao contr\u00e1rio ser\u00e1 exibida a _string_ utilizada para cri\u00e1-la.\n\n> Para obter a _string_ utilizada ao instanciar um CNPJ, basta acessar a propriedade **rawValue** da inst\u00e2ncia criada.\n\n### <a name=\"vcnpj\"></a> ValidadorCnpj\n\nClasse respons\u00e1vel por validar uma inst\u00e2ncia de CNPJ ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de um CNPJ.\n\n#### Utiliza\u00e7\u00e3o\n\n\t>>> cnpj = Cnpj('abcdefghijklmn')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> cnpj = Cnpj('19.658.147/0001-0O')\n\t>>>ValidadorCnpj.validar(cnpj)\n\tFalse\n\n\t>>> ValidadorCnpj.validar('12345678901234')\n\tFalse\n\n\t>>> cnpj = Cnpj('34  633 423,0001/60')\n\t>>> ValidadorCnpj.validar(cnpj)\n\tTrue\n\n\t>>> ValidadorCnpj.validar('05.692.744/0001-38')\n\tTrue\n\n### <a name=\"gcnpj\"></a> GeradorCnpj\n\nClasse respons\u00e1vel por gerar aleatoriamente um CNPJ v\u00e1lido.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> cnpj = GeradorCnpj.gerar()\n    >>> cnpj.isValid\n    True\n\n### <a name=\"is\"></a> InscricaoSuframa\n\nRepresenta o n\u00famero de inscri\u00e7\u00e3o na Superintend\u00eancia da Zona Franca de Manaus (SUFRAMA)\n\n> A SUFRAMA mant\u00e9m controle sobre as empresas com insentivo fiscal, identificando-as atrav\u00e9s do n\u00famero de _Inscri\u00e7\u00e3o SUFRAMA_.\n\nA composi\u00e7\u00e3o deste indicador \u00e9: _SS.NNNN.LLD_, onde:\n\n**SS** representa o __c\u00f3digo do setor de atividade__ da empresa, conforme exemplo abaixo:\n\n| C\u00f3digo  | Descri\u00e7\u00e3o                   |\n| :----:  | :---------------------------|\n| 01 e 02 | Cooperativa                 |\n| 10 e 11 | Com\u00e9rcio                    |\n| 20      | Ind\u00fastria com projeto pleno |\n| 60      | Servi\u00e7os                    |\n\n**NNNN** n\u00famero sequencial\n\n**LL** representa o c\u00f3digo da licalidade da Unidade Administrativa da Suframa que habilitou a empresa, conforme exemplo abaixo:\n\n\n| C\u00f3digo | Descri\u00e7\u00e3o   |\n| :----: | :-----------|\n|   01   | Manaus      |\n|   10   | Boa Vista   |\n|   30   | Porto Velho |\n\n**D** d\u00edgito verificador\n\n#### Valida\u00e7\u00e3o\n\n* Campo num\u00e9rico com 9 posi\u00e7\u00f5es (incluindo o d\u00edgito verificador).\n* Pode iniciar por 0 (zero), mas n\u00e3o pode iniciar por 00.\n* D\u00edgito verificador calculado por [__m\u00f3dulo 11__](https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador#M\u00f3dulo_11 \"M\u00e9todo de c\u00e1lculo do d\u00edgito verificador usando M\u00f3dulo 11\"), pesos 2 a 9.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> x.rawValue\n    '011234129'\n    >>> print(x)\n    01.1234.129\n    >>> x.isValid\n    False\n\n    >>> x = InscricaoSuframa('101580100')\n    >>> x.rawValue\n    '101580100'\n    >>> print(x)\n    10.1580.100\n    >>> x.isValid\n    True\n\n    >>> x = InscricaoSuframa('1015801OO')\n    >>> x.rawValue\n    '1015801OO'\n    >>> print(x)\n    1015801OO\n    >>> x.isValid\n    False\n\n### <a name=\"vs\"></a> ValidadorSuframa\n\nValida uma inst\u00e2ncia de InscricaoSuframa ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Suframa.\n\n#### Utiliza\u00e7\u00e3o\n\n    # Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa:\n    >>> ValidadorSuframa.validar('101580100')\n    True\n\n    # Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa inv\u00e1lida (contendo caracteres n\u00e3o num\u00e9ricos):\n    >>> ValidadorSuframa.validar('1015801OO')\n    False\n\n    # Valida\u00e7\u00e3o de uma inst\u00e2ncia de Inscri\u00e7\u00e3oSuframa:\n    >>> x = InscricaoSuframa('01.1234.129')\n    >>> ValidadorSuframa.validar(x)\n    False\n\n### <a name=\"gs\"></a> GeradorSuframa\n\nGera aleatoriamente uma Inscri\u00e7\u00e3o Suframa v\u00e1lida\n\n    >>> x = GeradorSuframa.gerar()\n    >>> x.isValid\n    True\n\n> **IMPORTANTE**: O __GeradorSuframa__ tem por objetivo ajudar estudantes, programadores, analistas de sistemas e testadores de c\u00f3digo a gerar Inscri\u00e7\u00f5es Suframa v\u00e1lidas visando auxiliar as rotinas de testes de softwares em desenvolvimento.\n\n> A m\u00e1 utiliza\u00e7\u00e3o dos dados gerados pelo __GeradorSuframa__ \u00e9 de **total responsabilidade do usu\u00e1rio** desta biblioteca.\n\n> As inscri\u00e7\u00f5es s\u00e3o geradas de forma aleat\u00f3ria, respeitando as leis de forma\u00e7\u00e3o estabelecidas pela SUFRAMA.\n\n### <a name=\"ie\"></a> InscricaoEstadual\n\nRepresenta, em c\u00f3digo Pyhton, uma _Inscri\u00e7\u00e3o Estadual_ (IE), ou o registro do contribuinte no cadastro do ICMS mantido pela Receita Estadual; permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ie.isValid\n    True\n    >>> ie.rawValue\n    '613855219926'\n    >>> ie.UF\n    'SP'\n    >>> print(ie)\n    613.855.219.926\n\n### <a name=\"vie\"></a> ValidadorInscricaoEstadual\n\nValida a consist\u00eancia de uma inst\u00e2ncia de InscricaoEstadual ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Estadual para uma determinada Unidade da Federa\u00e7\u00e3o, informada juntamente com a representa\u00e7\u00e3o num\u00e9rica da IE a qual se deseja validar.\n\n> A valida\u00e7\u00e3o da Inscri\u00e7\u00e3o Estadual para cada Unidade da Federa\u00e7\u00e3o brasileira, leva em considera\u00e7\u00e3o o disposto no [__Conv\u00eanio 57/59__](http://www.sintegra.gov.br/conv_5795.html \"Conv\u00eanioICMS 57/59\"), como tamb\u00e9m as orienta\u00e7\u00f5es e especificidades contidas na p\u00e1gina [Confer\u00eancias de Inscri\u00e7\u00f5es Estaduais](http://www.sintegra.gov.br/insc_est.html \"Confer\u00eancia de Inscri\u00e7\u00f5es Estaduais\") do SINTEGRA.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> ie = InscricaoEstadual('613.855.219.926', 'SP')\n    >>> ValidadorInscricaoEstadual.validar(ie)\n    True\n\n    >>> ValidadorInscricaoEstadual.validarStr('207653461', 'RN')\n    True\n    >>> ValidadorInscricaoEstadual.validarStr('209564598', 'TO')\n    False\n\n> **NOTA**: Caso n\u00e3o se deseje utilizar o __ValidadorInscricaoEstadual__, pode-se utilizar o validador espec\u00edfico para uma determinada Unidade da Federa\u00e7\u00e3o.\n<p>Cada Unidade da Federa\u00e7\u00e3o brasileira possui o seu pr\u00f3prio validador, definido por: **Validador**XX, onde _XX_ deve ser substitu\u00eddo pela sigla da Unidade da Federa\u00e7\u00e3o desejada.</p>\n<p>O Exemplo a seguir mostra como utilizar somente o validador espec\u00edfico para o Cear\u00e1, visando validar uma Inscri\u00e7\u00e3o Estadual deste Estado:</p>\n\n    >>> from bradocs4py.validadoresie import ValidadorCE\n    >>> ValidadorCE.validar('1234567')\n    False\n    >>> ValidadorCE.validar('50374156-6')\n    True\n\n> **IMPORTANTE**: Ao contr\u00e1rio de ValidadorInscricaoEstadual, os validadores espec\u00edficos de cada UF validam somente uma cadeia de caracteres (_string_) contendo o n\u00famero representativo da Inscri\u00e7\u00e3o Estadual a ser validada.\n\n### <a name=\"chave\"></a> ChaveAcessoNFe\n\nRepresenta a **Chave de Acesso** de uma Nota Fiscal Eletr\u00f4nica.\n\n#### <a name=\"lfchave\"></a> Lei de forma\u00e7\u00e3o de uma Chave de Acesso de NF-e\nA Chave de Acesso da Nota Fiscal Eletr\u00f4nica \u00e9 representada por uma sequ\u00eancia de 44 caracteres num\u00e9ricos, devendo ser composta pelos seguintes campos que se encontram dispersos no Layout da NF-e:\n\n* UF - C\u00f3digo da UF do emitente do Documento Fiscal\n* AAMM - Ano e m\u00eas da emiss\u00e3o da NF-e\n* CNPJ - CNPJ do emitente do Documento Fiscal\n* Modelo - Modelo do Documento Fiscal\n* S\u00e9rie - S\u00e9rie do Documento Fiscal\n* N\u00famero - N\u00famero do Documento Fiscal\n* Forma Emiss\u00e3o - Forma de emiss\u00e3o do Documento Fiscal\n* C\u00f3digo Num\u00e9rico - C\u00f3digo num\u00e9rico que comp\u00f5e a Chave de Acesso\n* DV - D\u00edgito verificados\n\n| C\u00f3digo    |  UF  | AAMM | CNPJ | Modelo | S\u00e9rie | N\u00famero | Forma Emiss\u00e3o | C\u00f3digo Num\u00e9rico |  DV  |\n| :--------:|:----:|:----:|:----:|:------:|:-----:|:------:|:-------------:|:---------------:|:----:|\n|Quantidade de caracteres |02    |04    |14    |02      |03     |09      |01             |08               |01    |\n\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> ca = ChaveAcessoNFe('23 1811 06850713000120 55 001 001766829 1 11103011 2')\n    >>> ca\n    <BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('23181106850713000120550010017668291111030112')>\n    >>> print(ca)\n    2318 1106 8507 1300 0120 5500 1001 7668 2911 1103 0112\n    >>> ca.rawValue\n    '23181106850713000120550010017668291111030112'\n    >>> ca.isValid\n    True\n\n### <a name=\"vchave\"></a> ValidadorChaveAcessoNFe\n\nValida a consist\u00eancia e a integridade de uma inst\u00e2ncia de [ChaveAcessoNFe](#chave) ou uma _string_ contendo a representa\u00e7\u00e3o num\u00e9rica de uma Chave de Acesso, atrav\u00e9s do c\u00e1lculo de seu _d\u00edgito verificador_.\n\n> O **D\u00edgito Verificador** (DV) visa garantir a integridade da Chave de Acesso, protegendo-a principalmente contra digita\u00e7\u00f5es erradas.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> chave = ChaveAcessoNFe(35181298957205000164667451830925015791400679)\n    >>> validarChaveAcessoNFe(chave)\n    True\n    >>> ValidadorChaveAcessoNFe.validar(52060433009911002506550120000007800267301615)\n    True\n    >>> ValidadorChaveAcessoNFe.validar('52060433009911002506550120000007800267301615')\n    True\n    >>> ValidadorChaveAcessoNFe.validar('52060433009911002506550120000007800267301625')\n    False\n\n    ou\n\n    >>> validarChaveAcessoNFe(52060433009911002506550120000007800267301615)\n    True\n    >>> validarChaveAcessoNFe('52060433009911002506550120000007800267301615')\n    True\n    >>> validarChaveAcessoNFe('52060433009911002506550120000007800267301625')\n    False\n    >>> validarChaveAcessoNFe(chave)\n    True\n\n\n#### <a name=\"dvchave\"></a> C\u00e1lculo do d\u00edgito verificador\n\nO d\u00edgito verificador da chave de acesso da NF-e \u00e9 baseado em um c\u00e1lculo do m\u00f3dulo 11. O m\u00f3dulo 11 de um n\u00famero \u00e9 calculado multiplicando-se cada algarismo pela sequ\u00eancia de multiplicadores 2,3,4,5,6,7,8,9,2,3, ..., posicionados da direita para a esquerda.\n\nA somat\u00f3ria dos resultados das pondera\u00e7\u00f5es dos algarismos \u00e9 dividida por 11 e o DV (d\u00edgito verificador) ser\u00e1 a diferen\u00e7a entre o divisor (11) e o resto da divis\u00e3o:\n\nDV = 11 - (resto da divis\u00e3o)\n\n> Quando o resto da divis\u00e3o for 0 (zero) ou 1 (um), o DV dever\u00e1 ser igual a 0 (zero).\n\nExemplo: consideremos a seguinte chave de acesso: _52060433009911002506550120000007800267301615_\n\nIsolando o _d\u00edgito verificador_, temos: _5206043300991100250655012000000780026730161_\n\n|**Chave** | 5 | 2 | 0 | 6 | 0 | 4 | 3 | 3 | 0 | 0 | 9 | 9 | 1 | 1 | 0 | 0 | 2 | 5 | 0 | 6 | 5 | 5 | 0 | 1 | 2 | 0 | 0 | 0 | 0 | 0 | 0 | 7 | 8 | 0 | 0 | 2 | 6 | 7 | 3 | 0 | 1 | 6 | 1 |\n|:------------------------|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|:-:|\n|**Pesos** | 4 | 3 | 2 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 | 9 | 8 | 7 | 6 | 5 | 4 | 3 | 2 |\n|**Pondera\u00e7\u00e3o** |20 | 6 | 0 |54 | 0 |28 |18 |15 | 0 | 0 |18 |81 | 8 | 7 | 0 | 0 | 8 |15 | 0 |54 |40 |35 | 0 | 5 | 8 | 0 | 0 | 0 | 0 | 0 | 0 |35 |32 | 0 | 0 |18 |48 |49 |18 | 0 | 4 |18 | 2 |\n\n**Somat\u00f3rio das pondera\u00e7\u00f5es**: _644_\n\nDividindo o somat\u00f3rio das pondera\u00e7\u00f5es por **11**, temos: 644/11 = 58, restando **6**\n\nComo o d\u00edgito verificador (DV) = 11 - (resto da divis\u00e3o), temos: **11 - 6 = 5**\n\nNeste caso o DV da chave de acesso da NF-e \u00e9 igual a \"5\".\n\n#### <a name=\"consistenciachave\"></a> Verifica\u00e7\u00e3o da _consist\u00eancia_ da Chave de Acesso\n\nPor ter uma [lei de forma\u00e7\u00e3o](#lfchave) peculiar, o _[ValidadorChaveAcessoNFe](#vchave)_ verifica a consist\u00eancia de uma determinada chave de acesso, observando:\n\n* se os dois primeiros d\u00edgitos correspondem ao c\u00f3digo, segundo o IBGE, de uma Unidade da Federa\u00e7\u00e3o Brasileira;\n* Se a data de emiss\u00e3o (**m\u00eas** e **ano**) *ano* de emiss\u00e3o n\u00e3o \u00e9 **posterior** \u00e0 data (m\u00eas e ano) atual;\n* Se o *m\u00eas* de emiss\u00e3o, que corresponde ao terceiro par de d\u00edgitos, corresponde ao valor de um dos meses do ano;\n* Se o *CNPJ* do emitente corresponde a um n\u00famero de CNPJ v\u00e1lido.\n\n> Desta forma, para que uma chave de acesso de NF-e seja v\u00e1lida, esta dever\u00e1 passar pelo c\u00e1lculo do D\u00edgito Verificador e pelo teste de consist\u00eancia.\n\n### <a name=\"gchave\"></a> GeradorChaveAcessoNFe\n\nGera uma [Chave de Acesso de NF-e](#chave) v\u00e1lida.\n\nA chave gerada pelo [GeradorChaveAcessoNFe](#gchave) obedece \u00e0s [regras de consist\u00eancia](#consistenciachave) anteriormente citadas.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> chave = GeradorChaveAcessoNFe.gerar()\n    >>> chave\n    <BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('25181230173834000160651227059459841838300521')>\n    >>> print(chave)\n    2518 1230 1738 3400 0160 6512 2705 9459 8418 3830 0521\n    >>> chave.rawValue\n    '25181230173834000160651227059459841838300521'\n    >>> chave.isValid\n    True\n\n    OU\n\n    >>> chave = gerarChaveAcessoNFe\n    >>> chave\n    <BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('11181205001709000125650428522143493956800409')>\n    >>> print(chave)\n    1118 1205 0017 0900 0125 6504 2852 2143 4939 5680 0409\n    >>> chave.rawValue\n    '11181205001709000125650428522143493956800409'\n    >>> chave.isValid\n    True\n\n\u00c9 poss\u00edvel passar para o gerador qualquer um dos seguintes par\u00e2metros, ou combina\u00e7\u00e3o deles:\n\n* UF - [Gera de uma chave de acesso para uma determinada Unidade da Federa\u00e7\u00e3o](#gchaveUF) Brasileira\n* anoEmissao - [Gera uma chave de acesso para um determinado ano de emiss\u00e3o](#gchaveAno)\n* mesEmissao - [Gera uma chave de acesso para um determinado m\u00eas de emiss\u00e3o](#gchaveMes)\n* cnpjEmitente - [Gera uma chave de acesso informando o CNPJ do emitente](#gchaveCNPJ)\n* modelo - [Gera uma chame de acesso informando o modelo do documento fiscal](#gchaveModelo)\n* serie - [Gera uma chave de acesso informando a s\u00e9rie do Documento Fiscal](#gchaveSerie)\n* numero - [Gera uma chave de acesso informando o n\u00faemro do Documento Fiscal](#gchaveNumero)\n* formaEmissao - [Gera uma chave de acesso informando o tipo de emiss\u00e3o da NF-e](#gchaveEmissao)\n\n##### <a name=\"gchaveUF\"></a> Gerar uma chave de acesso para uma determinada Unidade da Federa\u00e7\u00e3o (23 - Cear\u00e1):\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(UF=23)\n    >>> chave.rawValue\n    '23181200840039000117652898295631409915000755'\n\n##### <a name=\"gchaveAno\"></a> Gerar uma chave de acesso para um determinado ano:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(anoEmissao=2015)\n    >>> chave.rawValue\n    '23151289106950000109651490922639616463100456'\n\n##### <a name=\"gchaveMes\"></a> Gerar uma chave de acesso para um determinado m\u00eas:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(mesEmissao=8)\n    >>> chave.rawValue\n    '15180853477826000102655678711686215463600041'\n\n##### <a name=\"gchaveMesAno\"></a> Gerar uma chave de acesso para uma determinada data (m\u00eas e ano) de emiss\u00e3o:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(anoEmissao=2015, mesEmissao=1)\n    >>> chave.rawValue\n    '29150139480855000100653317092547617382300904'\n\n##### <a name=\"gchaveCNPJ\"></a> Gerar uma chave de acesso informando o CNPJ do emitente:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(cnpjEmitente='64802611000136')\n    >>> chave.rawValue\n    '13181264802611000136651456599176257515300837'\n\n##### <a name=\"gchaveModelo\"></a> Gerar uma chave de acesso de uma NF-e, utilizada nas opera\u00e7\u00f5es de venda no varejo (modelo de documento fiscal = 55)\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(modelo=55)\n    >>> chave.rawValue\n    '27181282761929000106555079534095503558300935'\n\n##### <a name=\"gchaveSerie\"></a> Gerar uma chave de acesso para uma NF-e que n\u00e3o possui s\u00e9rie:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(serie=0)\n    >>> chave.rawValue\n    '13181202699369000160650006987155021599900654'\n\n> Nota: A s\u00e9rie tamb\u00e9m pode ser informada como uma cadeia de caracteres num\u00e9ricos. No exemplo acima, poderia ter sido informado **'000'** para _serie_.\n\n##### <a name=\"gchaveNumero\"></a> Gerar uma chave de acesso informando o n\u00famero do documento fiscal:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(numero=1766829)\n    >>> chave.rawValue\n    '23181241761925000132652850017668297691400378'\n\n##### <a name=\"gchaveEmissao\"></a> Gerar uma chave de acesso para uma NF-e emitida com Conting\u00eancia FS-IA, com impress\u00e3o do DANFE em formul\u00e1rio de seguran\u00e7a (Tipo de emiss\u00e30 = 2)\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(formaEmissao=2)\n    >>> chave.rawValue\n    '51181278981604000153656457693627102018200143'\n\nIsto posto, desejando-se criar uma chave de acesso emitida no Cear\u00e1 (C\u00f3digo IBGE=23) em Maio de 2016, para o CNPJ 64802611/0001-36, ter\u00edamos:\n\n    >>> chave = GeradorChaveAcessoNFe.gerar(formaEmissao=2, UF=23, anoEmissao=2016, mesEmissao=5, cnpjEmitente=64802611000136)\n    >>> chave.rawValue\n    '23160564802611000136554038699639442073100081'\n    >>> chave.isValid\n    True\n\n> **Aten\u00e7\u00e3o**: a forma abreviada do gerador _(gerarChaveAcessoNFe)_ n\u00e3o permite a passagem de par\u00e2metros.\n\n### <a name=\"gtin\"></a>GTIN\n\nRepresenta um N\u00famero Global do Item Comercial - Global Trade Item Number (GTIN)\n\nO GTIN \u00e9 um identificador para itens comerciais desenvolvido e controlado pela [GS1][gs1], antiga EAN/UCC. Os GTINs,\nanteriormente chamados de c\u00f3digos EAN, s\u00e3o atribu\u00eddos para qualquer item (produto ou servi\u00e7o) que pode ser\nprecificado, pedido ou faturado em qualquer ponto da cadeia de suprimentos. O GTIN \u00e9 utilizado para recuperar\ninforma\u00e7\u00e3o pr\u00e9-definida e abrange desde as mat\u00e9rias primas at\u00e9 produtos acabados. GTIN \u00e9 um termo \u201cguarda-chuva\u201d\npara descrever toda a fam\u00edlia de identifica\u00e7\u00e3o das estruturas de dados GS1 para itens comerciais (produtos e servi\u00e7os).\nOs GTINs podem ter o tamanho de 8, 12, 13 ou 14 d\u00edgitos e podem ser constru\u00eddos utilizando qualquer uma das quatro\nestruturas de numera\u00e7\u00e3o dependendo da aplica\u00e7\u00e3o. O GTIN-8 \u00e9 codificado no c\u00f3digo de barras EAN-8. O GTIN-12 \u00e9 mais\nutilizado no c\u00f3digo de barras UPC-A, o GTIN-13 \u00e9 codificado no EAN-13 e o GTIN-14 no ITF-14.\n\n#### Utiliza\u00e7\u00e3o\n\n##### Criando uma inst\u00e2ncia de [GTIN](#gtin) a partir de um inteiro\n\n    >>> gtin = GTIN(6291041500213)\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-13 '6291041500213')>\n    >>> gtin.rawValue\n    '6291041500213'\n    >>> gtin.isValid\n    True\n\n##### Criando uma inst\u00e2ncia de [GTIN](#gtin) a partir de uma cadeia de caracteres num\u00e9ricos\n\n    >>> gtin = GTIN('35723189')\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '35723189')>\n    >>> gtin.rawValue\n    '35723189'\n    >>> gtin.isValid\n    True\n\n### <a name=\"vgtin\"></a> ValidadorGTIN\n\nValida uma inst\u00e2ncia de GTIN, um inteiro ou uma cadeia de caracteres num\u00e9ricos que representa um GTIN, a partir do [c\u00e1lculo de seu d\u00edgito verificador][calculo-digito-gtin], o qual assegura a sua integridade.\n\n> Nota: Muito embora o ValidadorGTIN valide uma inst\u00e2ncia de GTIN, a valida\u00e7\u00e3o desta inst\u00e2ncia pode ser verificada atrav\u00e9s da sua propriedade _isValid_, conforme exemplos acima.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> gtin = GTIN('35723189')\n    >>> ValidadorGTIN.validar(gtin)\n    True\n    >>> ValidadorGTIN.validar('3572318')\n    False\n    >>> ValidadorGTIN.validar('35723189')\n    True\n    >>> ValidadorGTIN.validar(6291041500213)\n    True\n    >>> ValidadorGTIN.validar('62910415OO213')\n    False\n\n**OU**\n\n    >>> gtin = GTIN('35723189')\n    >>> validar_gtin(gtin)\n    True\n    >>> validar_gtin('3572318')\n    False\n    >>> validar_gtin('35723189')\n    True\n    >>> validar_gtin(6291041500213)\n    True\n    >>> validar_gtin('62910415OO213')\n    False\n\n### <a name=\"ggtin\"></a> GeradorGTIN\n\nGera uma inst\u00e2ncia de um [GTIN](#gtin) v\u00e1lido.\n\n>IMPORTANTE: Este gerador de GTIN tem como inten\u00e7\u00e3o ajudar estudantes, programadores, analistas e testadores de sistemas computacionais a gerar GTINs v\u00e1lidas. Normalmente necess\u00e1rias parar testar seus softwares em desenvolvimento. A m\u00e1 utiliza\u00e7\u00e3o dos dados aqui gerados \u00e9 de total responsabilidade do usu\u00e1rio. Os n\u00fameros s\u00e3o gerados de forma aleat\u00f3ria, respeitando as regras de cria\u00e7\u00e3o de um GTIN.\n\n#### Utiliza\u00e7\u00e3o\n\n    >>> gtin = GeradorGTIN.gerar()\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '93490399')>\n\n**ou**\n\n    >>> gtin = gerar_gtin()\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '33409382')>\n\n\u00c9 poss\u00edvel informar ao gerador o tipo de GTIN que se deseja gerar. Para isso, deve-se passar o _GeradorGTIN.TipoGTIN_ desejado.\n\n##### Para gerar um GTIN-8\n\n    >>> gtin = GeradorGTIN.gerar(GeradorGTIN.TipoGTIN.GTIN8)\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '33409382')>\n\nTamb\u00e9m \u00e9 poss\u00edvel gerar GTINs chamando diretamente _gerar_gtin_:\n\n    >>> gtin = gerar_gtin(GeradorGTIN.TipoGTIN.GTIN13)\n    >>> gtin\n    <BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-13 '4332497941617')>\n\nUtilize:\n\n* GeradorGTIN.TipoGTIN.GTIN8 para gerar GTIN-8\n* GeradorGTIN.TipoGTIN.GTIN12 para gerar GTIN-12\n* GeradorGTIN.TipoGTIN.GTIN13 para gerar GTIN-13, ou\n* GeradorGTIN.TipoGTIN.GTIN14 para gerar GTIN-14\n\n> Se n\u00e3o for passado nenhum tipo para o gerador, este gerar\u00e1 sempre um GTIN-8.\n\n[gs1]: https://www.gs1br.org\n[calculo-digito-gtin]: https://www.gs1.org/services/how-calculate-check-digit-manually\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/namio/BRADocs4Py.git", "keywords": "cpf cnpj documentos brasileiros receita federal", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bradocs4py", "package_url": "https://pypi.org/project/bradocs4py/", "platform": "", "project_url": "https://pypi.org/project/bradocs4py/", "project_urls": {"Homepage": "https://github.com/namio/BRADocs4Py.git"}, "release_url": "https://pypi.org/project/bradocs4py/1.3.1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "Implementa a funcionalidade validar_inscao_estadual.", "version": "1.3.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/bradocs4py/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/971d7bf6ae0680ed060095a69398713a4e6575cc/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f425241446f63733450792e737667\"></a>\n<a href=\"https://github.com/namio/BRADocs4Py.git\" rel=\"nofollow\"><img alt=\"GitHub top language\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f3b7c59374cf0a2cf18a94e10e911fd75d65b79c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c616e6775616765732f746f702f6e616d696f2f425241446f63733450792e737667\"></a>\n<a href=\"https://pypi.org/project/bradocs4py/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c1477981f38ee1f03c7867b32a3d9a280bf9da5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f425241446f63733450792e737667\"></a>\n<a href=\"https://pypi.org/project/bradocs4py/\" rel=\"nofollow\"><img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1fcbf18ebe61af438a7791fb7d6f772ca2fcba7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f425241446f63733450792e737667\"></a>\n<a href=\"https://pypi.org/project/bradocs4py/\" rel=\"nofollow\"><img alt=\"PyPI - Implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96ecd8ac2c04a286b40894c7e58dbf8275b95329/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f425241446f63733450792e737667\"></a>\n<a href=\"https://github.com/namio/BRADocs4Py/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"GitHub\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e5d75664dc9a7ec2f4da357b45b1b6883ae1362a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6e616d696f2f425241446f63733450792e737667\"></a>\n<a href=\"https://github.com/namio/BRADocs4Py.git\" rel=\"nofollow\"><img alt=\"GitHub last commit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5891e9d791052e09dbae24f402c8178d0442dc9/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6173742d636f6d6d69742f6e616d696f2f425241446f63733450592e737667\"></a>\n<a href=\"https://saythanks.io/to/namio\" rel=\"nofollow\"><img alt=\"Say Thanks!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a></p>\n<h1>BRADocs4Py</h1>\n<p>BRADocs4Py \u00e9 uma biblioteca que visa fornecer componentes para trabalhar com tipos de dados espec\u00edficos da realidade brasileira.</p>\n<p>Esta biblioteca surgiu mediante a necessidade de se ter tipos espec\u00edficos que possibilitem lidar com documentos de identifica\u00e7\u00e3o pr\u00f3prios do Brasil, como \u00e9 o caso do Cadastro de Pessoa F\u00edsica (CPF) e do Cadastro Nacional de Pessoa Jur\u00eddica (CNPJ).</p>\n<p>Al\u00e9m de conter classes que representam o modelo computacional dos principais documentos brasileiros, esta biblioteca tamb\u00e9m disponibiliza classes que permitem a valida\u00e7\u00e3o e a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos; sendo estas \u00faltimas disponibilizadas exclusivamente para fins de testes computacionais.</p>\n<blockquote>\n<p>This software is coded and documented in portuguese only as it is intended to be used to generate the necessary files for the brazilian government regarding to digital bookkeeping.</p>\n</blockquote>\n<h2>Requisitos</h2>\n<ul>\n<li>python</li>\n</ul>\n<h2>Como instalar</h2>\n<pre><code>$ pip install bradocs4py\n</code></pre>\n<h2>Objetivos do Projeto</h2>\n<p>A ideia inicial do projeto e unificar em uma \u00fanica biblioteca m\u00f3dulos que permitam representar computacionalmente e validar documentos brasileiros - inicialmente CPF e CNPJ, al\u00e9m de permitir a gera\u00e7\u00e3o de n\u00fameros v\u00e1lidos para estes documentos.</p>\n<h2>Compatibilidade do Projeto</h2>\n<p>O projeto inicialmente suportar\u00e1 apenas Python 3.6.5+.</p>\n<p>Outras linguagens de programa\u00e7\u00e3o poder\u00e3o ter vers\u00f5es especificas conforme minha disponibilidade de tempo.</p>\n<h2>Status do Projeto</h2>\n<p>O projeto est\u00e1 em fase inicial de desenvolvimento.</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">M\u00f3dulo</th>\n<th align=\"center\">Situa\u00e7\u00e3o</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><a href=\"#di\" rel=\"nofollow\">DocumentoIdentificacao</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#cpf\" rel=\"nofollow\">CPF</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vcpf\" rel=\"nofollow\">ValidadorCpf</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gcpf\" rel=\"nofollow\">GeradorCpf</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#cnpj\" rel=\"nofollow\">Cnpj</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vcnpj\" rel=\"nofollow\">ValidadorCnpj</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gcnpj\" rel=\"nofollow\">GeradorCnpj</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ie\" rel=\"nofollow\">InscricaoEstadual</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vie\" rel=\"nofollow\">ValidadorInscricaoEstadual</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gie\" rel=\"nofollow\">GeradorInscricaoEstadual</a></td>\n<td align=\"center\">N\u00e3o implementado</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#is\" rel=\"nofollow\">InscricaoSuframa</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vs\" rel=\"nofollow\">ValidadorSuframa</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gs\" rel=\"nofollow\">GeradorSuframa</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#chave\" rel=\"nofollow\">ChaveAcessoNFe</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vchave\" rel=\"nofollow\">ValidadorChaveAcessoNFe</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gchave\" rel=\"nofollow\">GeradorChaveAcessoNFe</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#gtin\" rel=\"nofollow\">GTIN</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#vgtin\" rel=\"nofollow\">ValidadorGTIN</a></td>\n<td align=\"center\">Funcional</td>\n</tr>\n<tr>\n<td align=\"left\"><a href=\"#ggtin\" rel=\"nofollow\">GeradorGTIN</a></td>\n<td align=\"center\">Funcional</td>\n</tr></tbody></table>\n<h3><a></a> DocumentoIdentificacao</h3>\n<p>Classe abstrata, n\u00e3o podendo ser instanciada diretamente, serve como base para todas as classes que representam um documento de identifica\u00e7\u00e3o ou qualquer outro documento brasileiro que necessite de valida\u00e7\u00e3o.</p>\n<h3><a></a> CPF</h3>\n<p>Classe usada para representar em c\u00f3digo Pyhton um <em>Cadastro de Pessoa F\u00edsica</em> (CPF); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cpf = CPF('52513127765')\n&gt;&gt;&gt; cpf\n'525.131.277-65'\n\n&gt;&gt;&gt; cpf.isValid\nTrue\n\n&gt;&gt;&gt; cpf.rawValue\n52513127765\n\n&gt;&gt;&gt; cpf = CPF('abcdefghijk')\n&gt;&gt;&gt; cpf.isValid\nFalse\n\n&gt;&gt;&gt; print(cpf)\nabcdefghijk\n\n&gt;&gt;&gt; print(cpf.rawValue)\nabcdefghijk\n</code></pre>\n<blockquote>\n<p>Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CPF, <strong>sempre</strong> obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade <strong>isValid</strong> de uma inst\u00e2ncia de CPF para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.</p>\n</blockquote>\n<blockquote>\n<p>A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CPF s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CPF; ao contr\u00e1rio ser\u00e1 exibida a <em>string</em> utilizada para cri\u00e1-la.</p>\n</blockquote>\n<blockquote>\n<p>Para obter a <em>string</em> utilizada ao instanciar um CPF, basta acessar a propriedade <strong>rawValue</strong> da inst\u00e2ncia criada.</p>\n</blockquote>\n<h3><a></a> ValidadorCpf</h3>\n<p>Classe respons\u00e1vel por validar uma inst\u00e2ncia de CPF ou uma <em>string</em> contendo a representa\u00e7\u00e3o num\u00e9rica de um CPF.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cpf = CPF('abcdefghijk')\n&gt;&gt;&gt; ValidadorCpf.validar(cpf)\nFalse\n\n&gt;&gt;&gt; ValidadorCpf.validar('123.456.789-00')\nFalse\n\nFoi criado um CPF v\u00e1lido, por\u00e9m foi digitado um caractere de separa\u00e7\u00e3o diferente dos caracteres esperados (.-/ ). Mesmo assim, o validador informa tratar-se de um CPF correto\n&gt;&gt;&gt; cpf = CPF('508,697,212-40')\n&gt;&gt;&gt; ValidadorCpf.validar(cpf)\nTrue\n</code></pre>\n<h3><a></a> GeradorCpf</h3>\n<p>Classe respons\u00e1vel por gerar aleatoriamente um CPF v\u00e1lido.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cpf = GeradorCpf.gerar()\n&gt;&gt;&gt; cpf.isValid\nTrue\n</code></pre>\n<h3><a></a> Cnpj</h3>\n<p>Classe usada para representar em c\u00f3digo Pyhton um <em>Cadastro Nacional de Pessoa Jur\u00eddica</em> (CNPJ); permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cnpj = Cnpj('abcdefghijklmn')\n&gt;&gt;&gt; cnpj.isValid\nFalse\n\n&gt;&gt;&gt; cnpj = Cnpj('12345678901234')\n&gt;&gt;&gt; cnpj.isValid\nFalse\n\n&gt;&gt;&gt; cnpj = Cnpj('19.658.147/0001-0O')\n&gt;&gt;&gt; cnpj.isValid\nFalse\n\n&gt;&gt;&gt; cnpj = Cnpj('19.658.147/0001-00')\n&gt;&gt;&gt; cnpj.isValid\nTrue\n</code></pre>\n<blockquote>\n<p>Independente do conte\u00fado passado ao se criar uma inst\u00e2ncia de CNPJ, <strong>sempre</strong> obter-se-\u00e1 uma inst\u00e2ncia deste. Caber\u00e1 consultar a propriedade <strong>isValid</strong> de uma inst\u00e2ncia de CNPJ para verificar se esta \u00e9 v\u00e1lida ou n\u00e3o.</p>\n</blockquote>\n<blockquote>\n<p>A representa\u00e7\u00e3o textual de uma inst\u00e2ncia de CNPJ s\u00f3 ser\u00e1 exibida caso esta inst\u00e2ncia contenha um n\u00famero v\u00e1lido de CNPJ; ao contr\u00e1rio ser\u00e1 exibida a <em>string</em> utilizada para cri\u00e1-la.</p>\n</blockquote>\n<blockquote>\n<p>Para obter a <em>string</em> utilizada ao instanciar um CNPJ, basta acessar a propriedade <strong>rawValue</strong> da inst\u00e2ncia criada.</p>\n</blockquote>\n<h3><a></a> ValidadorCnpj</h3>\n<p>Classe respons\u00e1vel por validar uma inst\u00e2ncia de CNPJ ou uma <em>string</em> contendo a representa\u00e7\u00e3o num\u00e9rica de um CNPJ.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cnpj = Cnpj('abcdefghijklmn')\n&gt;&gt;&gt; ValidadorCnpj.validar(cnpj)\nFalse\n\n&gt;&gt;&gt; cnpj = Cnpj('19.658.147/0001-0O')\n&gt;&gt;&gt;ValidadorCnpj.validar(cnpj)\nFalse\n\n&gt;&gt;&gt; ValidadorCnpj.validar('12345678901234')\nFalse\n\n&gt;&gt;&gt; cnpj = Cnpj('34  633 423,0001/60')\n&gt;&gt;&gt; ValidadorCnpj.validar(cnpj)\nTrue\n\n&gt;&gt;&gt; ValidadorCnpj.validar('05.692.744/0001-38')\nTrue\n</code></pre>\n<h3><a></a> GeradorCnpj</h3>\n<p>Classe respons\u00e1vel por gerar aleatoriamente um CNPJ v\u00e1lido.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; cnpj = GeradorCnpj.gerar()\n&gt;&gt;&gt; cnpj.isValid\nTrue\n</code></pre>\n<h3><a></a> InscricaoSuframa</h3>\n<p>Representa o n\u00famero de inscri\u00e7\u00e3o na Superintend\u00eancia da Zona Franca de Manaus (SUFRAMA)</p>\n<blockquote>\n<p>A SUFRAMA mant\u00e9m controle sobre as empresas com insentivo fiscal, identificando-as atrav\u00e9s do n\u00famero de <em>Inscri\u00e7\u00e3o SUFRAMA</em>.</p>\n</blockquote>\n<p>A composi\u00e7\u00e3o deste indicador \u00e9: <em>SS.NNNN.LLD</em>, onde:</p>\n<p><strong>SS</strong> representa o <strong>c\u00f3digo do setor de atividade</strong> da empresa, conforme exemplo abaixo:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C\u00f3digo</th>\n<th align=\"left\">Descri\u00e7\u00e3o</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">01 e 02</td>\n<td align=\"left\">Cooperativa</td>\n</tr>\n<tr>\n<td align=\"center\">10 e 11</td>\n<td align=\"left\">Com\u00e9rcio</td>\n</tr>\n<tr>\n<td align=\"center\">20</td>\n<td align=\"left\">Ind\u00fastria com projeto pleno</td>\n</tr>\n<tr>\n<td align=\"center\">60</td>\n<td align=\"left\">Servi\u00e7os</td>\n</tr></tbody></table>\n<p><strong>NNNN</strong> n\u00famero sequencial</p>\n<p><strong>LL</strong> representa o c\u00f3digo da licalidade da Unidade Administrativa da Suframa que habilitou a empresa, conforme exemplo abaixo:</p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C\u00f3digo</th>\n<th align=\"left\">Descri\u00e7\u00e3o</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">01</td>\n<td align=\"left\">Manaus</td>\n</tr>\n<tr>\n<td align=\"center\">10</td>\n<td align=\"left\">Boa Vista</td>\n</tr>\n<tr>\n<td align=\"center\">30</td>\n<td align=\"left\">Porto Velho</td>\n</tr></tbody></table>\n<p><strong>D</strong> d\u00edgito verificador</p>\n<h4>Valida\u00e7\u00e3o</h4>\n<ul>\n<li>Campo num\u00e9rico com 9 posi\u00e7\u00f5es (incluindo o d\u00edgito verificador).</li>\n<li>Pode iniciar por 0 (zero), mas n\u00e3o pode iniciar por 00.</li>\n<li>D\u00edgito verificador calculado por <a href=\"https://pt.wikipedia.org/wiki/D%C3%ADgito_verificador#M%C3%B3dulo_11\" rel=\"nofollow\" title=\"M\u00e9todo de c\u00e1lculo do d\u00edgito verificador usando M\u00f3dulo 11\"><strong>m\u00f3dulo 11</strong></a>, pesos 2 a 9.</li>\n</ul>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; x = InscricaoSuframa('01.1234.129')\n&gt;&gt;&gt; x.rawValue\n'011234129'\n&gt;&gt;&gt; print(x)\n01.1234.129\n&gt;&gt;&gt; x.isValid\nFalse\n\n&gt;&gt;&gt; x = InscricaoSuframa('101580100')\n&gt;&gt;&gt; x.rawValue\n'101580100'\n&gt;&gt;&gt; print(x)\n10.1580.100\n&gt;&gt;&gt; x.isValid\nTrue\n\n&gt;&gt;&gt; x = InscricaoSuframa('1015801OO')\n&gt;&gt;&gt; x.rawValue\n'1015801OO'\n&gt;&gt;&gt; print(x)\n1015801OO\n&gt;&gt;&gt; x.isValid\nFalse\n</code></pre>\n<h3><a></a> ValidadorSuframa</h3>\n<p>Valida uma inst\u00e2ncia de InscricaoSuframa ou uma <em>string</em> contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Suframa.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code># Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa:\n&gt;&gt;&gt; ValidadorSuframa.validar('101580100')\nTrue\n\n# Valida\u00e7\u00e3o de uma _string_ representando uma Inscri\u00e7\u00e3o Suframa inv\u00e1lida (contendo caracteres n\u00e3o num\u00e9ricos):\n&gt;&gt;&gt; ValidadorSuframa.validar('1015801OO')\nFalse\n\n# Valida\u00e7\u00e3o de uma inst\u00e2ncia de Inscri\u00e7\u00e3oSuframa:\n&gt;&gt;&gt; x = InscricaoSuframa('01.1234.129')\n&gt;&gt;&gt; ValidadorSuframa.validar(x)\nFalse\n</code></pre>\n<h3><a></a> GeradorSuframa</h3>\n<p>Gera aleatoriamente uma Inscri\u00e7\u00e3o Suframa v\u00e1lida</p>\n<pre><code>&gt;&gt;&gt; x = GeradorSuframa.gerar()\n&gt;&gt;&gt; x.isValid\nTrue\n</code></pre>\n<blockquote>\n<p><strong>IMPORTANTE</strong>: O <strong>GeradorSuframa</strong> tem por objetivo ajudar estudantes, programadores, analistas de sistemas e testadores de c\u00f3digo a gerar Inscri\u00e7\u00f5es Suframa v\u00e1lidas visando auxiliar as rotinas de testes de softwares em desenvolvimento.</p>\n</blockquote>\n<blockquote>\n<p>A m\u00e1 utiliza\u00e7\u00e3o dos dados gerados pelo <strong>GeradorSuframa</strong> \u00e9 de <strong>total responsabilidade do usu\u00e1rio</strong> desta biblioteca.</p>\n</blockquote>\n<blockquote>\n<p>As inscri\u00e7\u00f5es s\u00e3o geradas de forma aleat\u00f3ria, respeitando as leis de forma\u00e7\u00e3o estabelecidas pela SUFRAMA.</p>\n</blockquote>\n<h3><a></a> InscricaoEstadual</h3>\n<p>Representa, em c\u00f3digo Pyhton, uma <em>Inscri\u00e7\u00e3o Estadual</em> (IE), ou o registro do contribuinte no cadastro do ICMS mantido pela Receita Estadual; permitindo represent\u00e1-lo textualmente, com a devida formata\u00e7\u00e3o e identificar a sua validade.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; ie = InscricaoEstadual('613.855.219.926', 'SP')\n&gt;&gt;&gt; ie.isValid\nTrue\n&gt;&gt;&gt; ie.rawValue\n'613855219926'\n&gt;&gt;&gt; ie.UF\n'SP'\n&gt;&gt;&gt; print(ie)\n613.855.219.926\n</code></pre>\n<h3><a></a> ValidadorInscricaoEstadual</h3>\n<p>Valida a consist\u00eancia de uma inst\u00e2ncia de InscricaoEstadual ou uma <em>string</em> contendo a representa\u00e7\u00e3o num\u00e9rica de uma Inscri\u00e7\u00e3o Estadual para uma determinada Unidade da Federa\u00e7\u00e3o, informada juntamente com a representa\u00e7\u00e3o num\u00e9rica da IE a qual se deseja validar.</p>\n<blockquote>\n<p>A valida\u00e7\u00e3o da Inscri\u00e7\u00e3o Estadual para cada Unidade da Federa\u00e7\u00e3o brasileira, leva em considera\u00e7\u00e3o o disposto no <a href=\"http://www.sintegra.gov.br/conv_5795.html\" rel=\"nofollow\" title=\"Conv\u00eanioICMS 57/59\"><strong>Conv\u00eanio 57/59</strong></a>, como tamb\u00e9m as orienta\u00e7\u00f5es e especificidades contidas na p\u00e1gina <a href=\"http://www.sintegra.gov.br/insc_est.html\" rel=\"nofollow\" title=\"Confer\u00eancia de Inscri\u00e7\u00f5es Estaduais\">Confer\u00eancias de Inscri\u00e7\u00f5es Estaduais</a> do SINTEGRA.</p>\n</blockquote>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; ie = InscricaoEstadual('613.855.219.926', 'SP')\n&gt;&gt;&gt; ValidadorInscricaoEstadual.validar(ie)\nTrue\n\n&gt;&gt;&gt; ValidadorInscricaoEstadual.validarStr('207653461', 'RN')\nTrue\n&gt;&gt;&gt; ValidadorInscricaoEstadual.validarStr('209564598', 'TO')\nFalse\n</code></pre>\n<blockquote>\n<p><strong>NOTA</strong>: Caso n\u00e3o se deseje utilizar o <strong>ValidadorInscricaoEstadual</strong>, pode-se utilizar o validador espec\u00edfico para uma determinada Unidade da Federa\u00e7\u00e3o.</p>\n</blockquote>\n<p>Cada Unidade da Federa\u00e7\u00e3o brasileira possui o seu pr\u00f3prio validador, definido por: **Validador**XX, onde _XX_ deve ser substitu\u00eddo pela sigla da Unidade da Federa\u00e7\u00e3o desejada.</p>\n<p>O Exemplo a seguir mostra como utilizar somente o validador espec\u00edfico para o Cear\u00e1, visando validar uma Inscri\u00e7\u00e3o Estadual deste Estado:</p>\n<pre><code>&gt;&gt;&gt; from bradocs4py.validadoresie import ValidadorCE\n&gt;&gt;&gt; ValidadorCE.validar('1234567')\nFalse\n&gt;&gt;&gt; ValidadorCE.validar('50374156-6')\nTrue\n</code></pre>\n<blockquote>\n<p><strong>IMPORTANTE</strong>: Ao contr\u00e1rio de ValidadorInscricaoEstadual, os validadores espec\u00edficos de cada UF validam somente uma cadeia de caracteres (<em>string</em>) contendo o n\u00famero representativo da Inscri\u00e7\u00e3o Estadual a ser validada.</p>\n</blockquote>\n<h3><a></a> ChaveAcessoNFe</h3>\n<p>Representa a <strong>Chave de Acesso</strong> de uma Nota Fiscal Eletr\u00f4nica.</p>\n<h4><a></a> Lei de forma\u00e7\u00e3o de uma Chave de Acesso de NF-e</h4>\n<p>A Chave de Acesso da Nota Fiscal Eletr\u00f4nica \u00e9 representada por uma sequ\u00eancia de 44 caracteres num\u00e9ricos, devendo ser composta pelos seguintes campos que se encontram dispersos no Layout da NF-e:</p>\n<ul>\n<li>UF - C\u00f3digo da UF do emitente do Documento Fiscal</li>\n<li>AAMM - Ano e m\u00eas da emiss\u00e3o da NF-e</li>\n<li>CNPJ - CNPJ do emitente do Documento Fiscal</li>\n<li>Modelo - Modelo do Documento Fiscal</li>\n<li>S\u00e9rie - S\u00e9rie do Documento Fiscal</li>\n<li>N\u00famero - N\u00famero do Documento Fiscal</li>\n<li>Forma Emiss\u00e3o - Forma de emiss\u00e3o do Documento Fiscal</li>\n<li>C\u00f3digo Num\u00e9rico - C\u00f3digo num\u00e9rico que comp\u00f5e a Chave de Acesso</li>\n<li>DV - D\u00edgito verificados</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th align=\"center\">C\u00f3digo</th>\n<th align=\"center\">UF</th>\n<th align=\"center\">AAMM</th>\n<th align=\"center\">CNPJ</th>\n<th align=\"center\">Modelo</th>\n<th align=\"center\">S\u00e9rie</th>\n<th align=\"center\">N\u00famero</th>\n<th align=\"center\">Forma Emiss\u00e3o</th>\n<th align=\"center\">C\u00f3digo Num\u00e9rico</th>\n<th align=\"center\">DV</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">Quantidade de caracteres</td>\n<td align=\"center\">02</td>\n<td align=\"center\">04</td>\n<td align=\"center\">14</td>\n<td align=\"center\">02</td>\n<td align=\"center\">03</td>\n<td align=\"center\">09</td>\n<td align=\"center\">01</td>\n<td align=\"center\">08</td>\n<td align=\"center\">01</td>\n</tr></tbody></table>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; ca = ChaveAcessoNFe('23 1811 06850713000120 55 001 001766829 1 11103011 2')\n&gt;&gt;&gt; ca\n&lt;BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('23181106850713000120550010017668291111030112')&gt;\n&gt;&gt;&gt; print(ca)\n2318 1106 8507 1300 0120 5500 1001 7668 2911 1103 0112\n&gt;&gt;&gt; ca.rawValue\n'23181106850713000120550010017668291111030112'\n&gt;&gt;&gt; ca.isValid\nTrue\n</code></pre>\n<h3><a></a> ValidadorChaveAcessoNFe</h3>\n<p>Valida a consist\u00eancia e a integridade de uma inst\u00e2ncia de <a href=\"#chave\" rel=\"nofollow\">ChaveAcessoNFe</a> ou uma <em>string</em> contendo a representa\u00e7\u00e3o num\u00e9rica de uma Chave de Acesso, atrav\u00e9s do c\u00e1lculo de seu <em>d\u00edgito verificador</em>.</p>\n<blockquote>\n<p>O <strong>D\u00edgito Verificador</strong> (DV) visa garantir a integridade da Chave de Acesso, protegendo-a principalmente contra digita\u00e7\u00f5es erradas.</p>\n</blockquote>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; chave = ChaveAcessoNFe(35181298957205000164667451830925015791400679)\n&gt;&gt;&gt; validarChaveAcessoNFe(chave)\nTrue\n&gt;&gt;&gt; ValidadorChaveAcessoNFe.validar(52060433009911002506550120000007800267301615)\nTrue\n&gt;&gt;&gt; ValidadorChaveAcessoNFe.validar('52060433009911002506550120000007800267301615')\nTrue\n&gt;&gt;&gt; ValidadorChaveAcessoNFe.validar('52060433009911002506550120000007800267301625')\nFalse\n\nou\n\n&gt;&gt;&gt; validarChaveAcessoNFe(52060433009911002506550120000007800267301615)\nTrue\n&gt;&gt;&gt; validarChaveAcessoNFe('52060433009911002506550120000007800267301615')\nTrue\n&gt;&gt;&gt; validarChaveAcessoNFe('52060433009911002506550120000007800267301625')\nFalse\n&gt;&gt;&gt; validarChaveAcessoNFe(chave)\nTrue\n</code></pre>\n<h4><a></a> C\u00e1lculo do d\u00edgito verificador</h4>\n<p>O d\u00edgito verificador da chave de acesso da NF-e \u00e9 baseado em um c\u00e1lculo do m\u00f3dulo 11. O m\u00f3dulo 11 de um n\u00famero \u00e9 calculado multiplicando-se cada algarismo pela sequ\u00eancia de multiplicadores 2,3,4,5,6,7,8,9,2,3, ..., posicionados da direita para a esquerda.</p>\n<p>A somat\u00f3ria dos resultados das pondera\u00e7\u00f5es dos algarismos \u00e9 dividida por 11 e o DV (d\u00edgito verificador) ser\u00e1 a diferen\u00e7a entre o divisor (11) e o resto da divis\u00e3o:</p>\n<p>DV = 11 - (resto da divis\u00e3o)</p>\n<blockquote>\n<p>Quando o resto da divis\u00e3o for 0 (zero) ou 1 (um), o DV dever\u00e1 ser igual a 0 (zero).</p>\n</blockquote>\n<p>Exemplo: consideremos a seguinte chave de acesso: <em>52060433009911002506550120000007800267301615</em></p>\n<p>Isolando o <em>d\u00edgito verificador</em>, temos: <em>5206043300991100250655012000000780026730161</em></p>\n<table>\n<thead>\n<tr>\n<th align=\"left\"><strong>Chave</strong></th>\n<th align=\"center\">5</th>\n<th align=\"center\">2</th>\n<th align=\"center\">0</th>\n<th align=\"center\">6</th>\n<th align=\"center\">0</th>\n<th align=\"center\">4</th>\n<th align=\"center\">3</th>\n<th align=\"center\">3</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">9</th>\n<th align=\"center\">9</th>\n<th align=\"center\">1</th>\n<th align=\"center\">1</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">2</th>\n<th align=\"center\">5</th>\n<th align=\"center\">0</th>\n<th align=\"center\">6</th>\n<th align=\"center\">5</th>\n<th align=\"center\">5</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">2</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">7</th>\n<th align=\"center\">8</th>\n<th align=\"center\">0</th>\n<th align=\"center\">0</th>\n<th align=\"center\">2</th>\n<th align=\"center\">6</th>\n<th align=\"center\">7</th>\n<th align=\"center\">3</th>\n<th align=\"center\">0</th>\n<th align=\"center\">1</th>\n<th align=\"center\">6</th>\n<th align=\"center\">1</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><strong>Pesos</strong></td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n<td align=\"center\">9</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">6</td>\n<td align=\"center\">5</td>\n<td align=\"center\">4</td>\n<td align=\"center\">3</td>\n<td align=\"center\">2</td>\n</tr>\n<tr>\n<td align=\"left\"><strong>Pondera\u00e7\u00e3o</strong></td>\n<td align=\"center\">20</td>\n<td align=\"center\">6</td>\n<td align=\"center\">0</td>\n<td align=\"center\">54</td>\n<td align=\"center\">0</td>\n<td align=\"center\">28</td>\n<td align=\"center\">18</td>\n<td align=\"center\">15</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">18</td>\n<td align=\"center\">81</td>\n<td align=\"center\">8</td>\n<td align=\"center\">7</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">8</td>\n<td align=\"center\">15</td>\n<td align=\"center\">0</td>\n<td align=\"center\">54</td>\n<td align=\"center\">40</td>\n<td align=\"center\">35</td>\n<td align=\"center\">0</td>\n<td align=\"center\">5</td>\n<td align=\"center\">8</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">35</td>\n<td align=\"center\">32</td>\n<td align=\"center\">0</td>\n<td align=\"center\">0</td>\n<td align=\"center\">18</td>\n<td align=\"center\">48</td>\n<td align=\"center\">49</td>\n<td align=\"center\">18</td>\n<td align=\"center\">0</td>\n<td align=\"center\">4</td>\n<td align=\"center\">18</td>\n<td align=\"center\">2</td>\n</tr></tbody></table>\n<p><strong>Somat\u00f3rio das pondera\u00e7\u00f5es</strong>: <em>644</em></p>\n<p>Dividindo o somat\u00f3rio das pondera\u00e7\u00f5es por <strong>11</strong>, temos: 644/11 = 58, restando <strong>6</strong></p>\n<p>Como o d\u00edgito verificador (DV) = 11 - (resto da divis\u00e3o), temos: <strong>11 - 6 = 5</strong></p>\n<p>Neste caso o DV da chave de acesso da NF-e \u00e9 igual a \"5\".</p>\n<h4><a></a> Verifica\u00e7\u00e3o da <em>consist\u00eancia</em> da Chave de Acesso</h4>\n<p>Por ter uma <a href=\"#lfchave\" rel=\"nofollow\">lei de forma\u00e7\u00e3o</a> peculiar, o <em><a href=\"#vchave\" rel=\"nofollow\">ValidadorChaveAcessoNFe</a></em> verifica a consist\u00eancia de uma determinada chave de acesso, observando:</p>\n<ul>\n<li>se os dois primeiros d\u00edgitos correspondem ao c\u00f3digo, segundo o IBGE, de uma Unidade da Federa\u00e7\u00e3o Brasileira;</li>\n<li>Se a data de emiss\u00e3o (<strong>m\u00eas</strong> e <strong>ano</strong>) <em>ano</em> de emiss\u00e3o n\u00e3o \u00e9 <strong>posterior</strong> \u00e0 data (m\u00eas e ano) atual;</li>\n<li>Se o <em>m\u00eas</em> de emiss\u00e3o, que corresponde ao terceiro par de d\u00edgitos, corresponde ao valor de um dos meses do ano;</li>\n<li>Se o <em>CNPJ</em> do emitente corresponde a um n\u00famero de CNPJ v\u00e1lido.</li>\n</ul>\n<blockquote>\n<p>Desta forma, para que uma chave de acesso de NF-e seja v\u00e1lida, esta dever\u00e1 passar pelo c\u00e1lculo do D\u00edgito Verificador e pelo teste de consist\u00eancia.</p>\n</blockquote>\n<h3><a></a> GeradorChaveAcessoNFe</h3>\n<p>Gera uma <a href=\"#chave\" rel=\"nofollow\">Chave de Acesso de NF-e</a> v\u00e1lida.</p>\n<p>A chave gerada pelo <a href=\"#gchave\" rel=\"nofollow\">GeradorChaveAcessoNFe</a> obedece \u00e0s <a href=\"#consistenciachave\" rel=\"nofollow\">regras de consist\u00eancia</a> anteriormente citadas.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar()\n&gt;&gt;&gt; chave\n&lt;BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('25181230173834000160651227059459841838300521')&gt;\n&gt;&gt;&gt; print(chave)\n2518 1230 1738 3400 0160 6512 2705 9459 8418 3830 0521\n&gt;&gt;&gt; chave.rawValue\n'25181230173834000160651227059459841838300521'\n&gt;&gt;&gt; chave.isValid\nTrue\n\nOU\n\n&gt;&gt;&gt; chave = gerarChaveAcessoNFe\n&gt;&gt;&gt; chave\n&lt;BRADocs4Py.bradocs4py.chaveacessonfe.ChaveAcessoNFe('11181205001709000125650428522143493956800409')&gt;\n&gt;&gt;&gt; print(chave)\n1118 1205 0017 0900 0125 6504 2852 2143 4939 5680 0409\n&gt;&gt;&gt; chave.rawValue\n'11181205001709000125650428522143493956800409'\n&gt;&gt;&gt; chave.isValid\nTrue\n</code></pre>\n<p>\u00c9 poss\u00edvel passar para o gerador qualquer um dos seguintes par\u00e2metros, ou combina\u00e7\u00e3o deles:</p>\n<ul>\n<li>UF - <a href=\"#gchaveUF\" rel=\"nofollow\">Gera de uma chave de acesso para uma determinada Unidade da Federa\u00e7\u00e3o</a> Brasileira</li>\n<li>anoEmissao - <a href=\"#gchaveAno\" rel=\"nofollow\">Gera uma chave de acesso para um determinado ano de emiss\u00e3o</a></li>\n<li>mesEmissao - <a href=\"#gchaveMes\" rel=\"nofollow\">Gera uma chave de acesso para um determinado m\u00eas de emiss\u00e3o</a></li>\n<li>cnpjEmitente - <a href=\"#gchaveCNPJ\" rel=\"nofollow\">Gera uma chave de acesso informando o CNPJ do emitente</a></li>\n<li>modelo - <a href=\"#gchaveModelo\" rel=\"nofollow\">Gera uma chame de acesso informando o modelo do documento fiscal</a></li>\n<li>serie - <a href=\"#gchaveSerie\" rel=\"nofollow\">Gera uma chave de acesso informando a s\u00e9rie do Documento Fiscal</a></li>\n<li>numero - <a href=\"#gchaveNumero\" rel=\"nofollow\">Gera uma chave de acesso informando o n\u00faemro do Documento Fiscal</a></li>\n<li>formaEmissao - <a href=\"#gchaveEmissao\" rel=\"nofollow\">Gera uma chave de acesso informando o tipo de emiss\u00e3o da NF-e</a></li>\n</ul>\n<h5><a></a> Gerar uma chave de acesso para uma determinada Unidade da Federa\u00e7\u00e3o (23 - Cear\u00e1):</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(UF=23)\n&gt;&gt;&gt; chave.rawValue\n'23181200840039000117652898295631409915000755'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso para um determinado ano:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(anoEmissao=2015)\n&gt;&gt;&gt; chave.rawValue\n'23151289106950000109651490922639616463100456'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso para um determinado m\u00eas:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(mesEmissao=8)\n&gt;&gt;&gt; chave.rawValue\n'15180853477826000102655678711686215463600041'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso para uma determinada data (m\u00eas e ano) de emiss\u00e3o:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(anoEmissao=2015, mesEmissao=1)\n&gt;&gt;&gt; chave.rawValue\n'29150139480855000100653317092547617382300904'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso informando o CNPJ do emitente:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(cnpjEmitente='64802611000136')\n&gt;&gt;&gt; chave.rawValue\n'13181264802611000136651456599176257515300837'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso de uma NF-e, utilizada nas opera\u00e7\u00f5es de venda no varejo (modelo de documento fiscal = 55)</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(modelo=55)\n&gt;&gt;&gt; chave.rawValue\n'27181282761929000106555079534095503558300935'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso para uma NF-e que n\u00e3o possui s\u00e9rie:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(serie=0)\n&gt;&gt;&gt; chave.rawValue\n'13181202699369000160650006987155021599900654'\n</code></pre>\n<blockquote>\n<p>Nota: A s\u00e9rie tamb\u00e9m pode ser informada como uma cadeia de caracteres num\u00e9ricos. No exemplo acima, poderia ter sido informado <strong>'000'</strong> para <em>serie</em>.</p>\n</blockquote>\n<h5><a></a> Gerar uma chave de acesso informando o n\u00famero do documento fiscal:</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(numero=1766829)\n&gt;&gt;&gt; chave.rawValue\n'23181241761925000132652850017668297691400378'\n</code></pre>\n<h5><a></a> Gerar uma chave de acesso para uma NF-e emitida com Conting\u00eancia FS-IA, com impress\u00e3o do DANFE em formul\u00e1rio de seguran\u00e7a (Tipo de emiss\u00e30 = 2)</h5>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(formaEmissao=2)\n&gt;&gt;&gt; chave.rawValue\n'51181278981604000153656457693627102018200143'\n</code></pre>\n<p>Isto posto, desejando-se criar uma chave de acesso emitida no Cear\u00e1 (C\u00f3digo IBGE=23) em Maio de 2016, para o CNPJ 64802611/0001-36, ter\u00edamos:</p>\n<pre><code>&gt;&gt;&gt; chave = GeradorChaveAcessoNFe.gerar(formaEmissao=2, UF=23, anoEmissao=2016, mesEmissao=5, cnpjEmitente=64802611000136)\n&gt;&gt;&gt; chave.rawValue\n'23160564802611000136554038699639442073100081'\n&gt;&gt;&gt; chave.isValid\nTrue\n</code></pre>\n<blockquote>\n<p><strong>Aten\u00e7\u00e3o</strong>: a forma abreviada do gerador <em>(gerarChaveAcessoNFe)</em> n\u00e3o permite a passagem de par\u00e2metros.</p>\n</blockquote>\n<h3><a></a>GTIN</h3>\n<p>Representa um N\u00famero Global do Item Comercial - Global Trade Item Number (GTIN)</p>\n<p>O GTIN \u00e9 um identificador para itens comerciais desenvolvido e controlado pela <a href=\"https://www.gs1br.org\" rel=\"nofollow\">GS1</a>, antiga EAN/UCC. Os GTINs,\nanteriormente chamados de c\u00f3digos EAN, s\u00e3o atribu\u00eddos para qualquer item (produto ou servi\u00e7o) que pode ser\nprecificado, pedido ou faturado em qualquer ponto da cadeia de suprimentos. O GTIN \u00e9 utilizado para recuperar\ninforma\u00e7\u00e3o pr\u00e9-definida e abrange desde as mat\u00e9rias primas at\u00e9 produtos acabados. GTIN \u00e9 um termo \u201cguarda-chuva\u201d\npara descrever toda a fam\u00edlia de identifica\u00e7\u00e3o das estruturas de dados GS1 para itens comerciais (produtos e servi\u00e7os).\nOs GTINs podem ter o tamanho de 8, 12, 13 ou 14 d\u00edgitos e podem ser constru\u00eddos utilizando qualquer uma das quatro\nestruturas de numera\u00e7\u00e3o dependendo da aplica\u00e7\u00e3o. O GTIN-8 \u00e9 codificado no c\u00f3digo de barras EAN-8. O GTIN-12 \u00e9 mais\nutilizado no c\u00f3digo de barras UPC-A, o GTIN-13 \u00e9 codificado no EAN-13 e o GTIN-14 no ITF-14.</p>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<h5>Criando uma inst\u00e2ncia de <a href=\"#gtin\" rel=\"nofollow\">GTIN</a> a partir de um inteiro</h5>\n<pre><code>&gt;&gt;&gt; gtin = GTIN(6291041500213)\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-13 '6291041500213')&gt;\n&gt;&gt;&gt; gtin.rawValue\n'6291041500213'\n&gt;&gt;&gt; gtin.isValid\nTrue\n</code></pre>\n<h5>Criando uma inst\u00e2ncia de <a href=\"#gtin\" rel=\"nofollow\">GTIN</a> a partir de uma cadeia de caracteres num\u00e9ricos</h5>\n<pre><code>&gt;&gt;&gt; gtin = GTIN('35723189')\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '35723189')&gt;\n&gt;&gt;&gt; gtin.rawValue\n'35723189'\n&gt;&gt;&gt; gtin.isValid\nTrue\n</code></pre>\n<h3><a></a> ValidadorGTIN</h3>\n<p>Valida uma inst\u00e2ncia de GTIN, um inteiro ou uma cadeia de caracteres num\u00e9ricos que representa um GTIN, a partir do <a href=\"https://www.gs1.org/services/how-calculate-check-digit-manually\" rel=\"nofollow\">c\u00e1lculo de seu d\u00edgito verificador</a>, o qual assegura a sua integridade.</p>\n<blockquote>\n<p>Nota: Muito embora o ValidadorGTIN valide uma inst\u00e2ncia de GTIN, a valida\u00e7\u00e3o desta inst\u00e2ncia pode ser verificada atrav\u00e9s da sua propriedade <em>isValid</em>, conforme exemplos acima.</p>\n</blockquote>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; gtin = GTIN('35723189')\n&gt;&gt;&gt; ValidadorGTIN.validar(gtin)\nTrue\n&gt;&gt;&gt; ValidadorGTIN.validar('3572318')\nFalse\n&gt;&gt;&gt; ValidadorGTIN.validar('35723189')\nTrue\n&gt;&gt;&gt; ValidadorGTIN.validar(6291041500213)\nTrue\n&gt;&gt;&gt; ValidadorGTIN.validar('62910415OO213')\nFalse\n</code></pre>\n<p><strong>OU</strong></p>\n<pre><code>&gt;&gt;&gt; gtin = GTIN('35723189')\n&gt;&gt;&gt; validar_gtin(gtin)\nTrue\n&gt;&gt;&gt; validar_gtin('3572318')\nFalse\n&gt;&gt;&gt; validar_gtin('35723189')\nTrue\n&gt;&gt;&gt; validar_gtin(6291041500213)\nTrue\n&gt;&gt;&gt; validar_gtin('62910415OO213')\nFalse\n</code></pre>\n<h3><a></a> GeradorGTIN</h3>\n<p>Gera uma inst\u00e2ncia de um <a href=\"#gtin\" rel=\"nofollow\">GTIN</a> v\u00e1lido.</p>\n<blockquote>\n<p>IMPORTANTE: Este gerador de GTIN tem como inten\u00e7\u00e3o ajudar estudantes, programadores, analistas e testadores de sistemas computacionais a gerar GTINs v\u00e1lidas. Normalmente necess\u00e1rias parar testar seus softwares em desenvolvimento. A m\u00e1 utiliza\u00e7\u00e3o dos dados aqui gerados \u00e9 de total responsabilidade do usu\u00e1rio. Os n\u00fameros s\u00e3o gerados de forma aleat\u00f3ria, respeitando as regras de cria\u00e7\u00e3o de um GTIN.</p>\n</blockquote>\n<h4>Utiliza\u00e7\u00e3o</h4>\n<pre><code>&gt;&gt;&gt; gtin = GeradorGTIN.gerar()\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '93490399')&gt;\n</code></pre>\n<p><strong>ou</strong></p>\n<pre><code>&gt;&gt;&gt; gtin = gerar_gtin()\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '33409382')&gt;\n</code></pre>\n<p>\u00c9 poss\u00edvel informar ao gerador o tipo de GTIN que se deseja gerar. Para isso, deve-se passar o <em>GeradorGTIN.TipoGTIN</em> desejado.</p>\n<h5>Para gerar um GTIN-8</h5>\n<pre><code>&gt;&gt;&gt; gtin = GeradorGTIN.gerar(GeradorGTIN.TipoGTIN.GTIN8)\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-8 '33409382')&gt;\n</code></pre>\n<p>Tamb\u00e9m \u00e9 poss\u00edvel gerar GTINs chamando diretamente <em>gerar_gtin</em>:</p>\n<pre><code>&gt;&gt;&gt; gtin = gerar_gtin(GeradorGTIN.TipoGTIN.GTIN13)\n&gt;&gt;&gt; gtin\n&lt;BRADocs4Py.bradocs4py.gtin.GTIN(GTIN-13 '4332497941617')&gt;\n</code></pre>\n<p>Utilize:</p>\n<ul>\n<li>GeradorGTIN.TipoGTIN.GTIN8 para gerar GTIN-8</li>\n<li>GeradorGTIN.TipoGTIN.GTIN12 para gerar GTIN-12</li>\n<li>GeradorGTIN.TipoGTIN.GTIN13 para gerar GTIN-13, ou</li>\n<li>GeradorGTIN.TipoGTIN.GTIN14 para gerar GTIN-14</li>\n</ul>\n<blockquote>\n<p>Se n\u00e3o for passado nenhum tipo para o gerador, este gerar\u00e1 sempre um GTIN-8.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 5673389, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "3c48049d997cda5c1a06dc6b544cca8e", "sha256": "e951c03ccf89b92efc32e119fe5eb769610fdf4bece728fe7f04b5af698df253"}, "downloads": -1, "filename": "bradocs4py-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3c48049d997cda5c1a06dc6b544cca8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28197, "upload_time": "2018-12-14T20:17:54", "upload_time_iso_8601": "2018-12-14T20:17:54.050589Z", "url": "https://files.pythonhosted.org/packages/83/42/e81a7463769a685a9ded8d3022880c2177de5bcfbeb2899ad342f947ce0c/bradocs4py-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c1ea1674576d591b69f237c69148c76d", "sha256": "74032e5154ef044715e23722934c9530c9e58b8e2aa5cefd12c1b783750ae0df"}, "downloads": -1, "filename": "bradocs4py-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c1ea1674576d591b69f237c69148c76d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11796, "upload_time": "2018-12-14T20:17:55", "upload_time_iso_8601": "2018-12-14T20:17:55.986724Z", "url": "https://files.pythonhosted.org/packages/68/a8/70cc5e407ff5a7af11214c737f79dbe81ebd8cb43dc12c2a03c259ef28ee/bradocs4py-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5794568716d7ab498553fb65132ea718", "sha256": "d838717cffeb1c0bc239c8f3ea0764d064ea2d283244fe67f9a29ee86f45d290"}, "downloads": -1, "filename": "bradocs4py-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5794568716d7ab498553fb65132ea718", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 31264, "upload_time": "2018-12-17T18:13:30", "upload_time_iso_8601": "2018-12-17T18:13:30.350362Z", "url": "https://files.pythonhosted.org/packages/3e/56/1e035fb5294a3e7c83ab7c8de6e62faed793960c60ef198bd016e239681d/bradocs4py-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc2fde8a944a1b92393364c2e8612716", "sha256": "a9732c560e80c28f8c87a75a566c0bfac8a510760882bd34aca363d62e56395e"}, "downloads": -1, "filename": "bradocs4py-1.1.1.tar.gz", "has_sig": false, "md5_digest": "bc2fde8a944a1b92393364c2e8612716", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16518, "upload_time": "2018-12-17T18:13:33", "upload_time_iso_8601": "2018-12-17T18:13:33.612162Z", "url": "https://files.pythonhosted.org/packages/51/ab/3a338a5fe8cafd9e4db56b5bac92e752f40e0f0dc47f2f7889ad72de6c09/bradocs4py-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "919d655c92ec6a8e5de19c8980041a14", "sha256": "305e54f52c2db65a77c99f072a9e056b9f141aae2808e07a3aac7de68adc3831"}, "downloads": -1, "filename": "bradocs4py-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "919d655c92ec6a8e5de19c8980041a14", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 40881, "upload_time": "2019-02-22T00:51:16", "upload_time_iso_8601": "2019-02-22T00:51:16.746994Z", "url": "https://files.pythonhosted.org/packages/c0/28/7d438c6dde29bac5b2c85736a846a4196edab28e9a8edca0c54557d10bcd/bradocs4py-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65171fdc50bd5a024157a598a6c25693", "sha256": "590afb0f62d4eed1f67345bcdcd2e4e44dc73d5c6cf9df269f6d5d90d2534cb1"}, "downloads": -1, "filename": "bradocs4py-1.2.0.tar.gz", "has_sig": false, "md5_digest": "65171fdc50bd5a024157a598a6c25693", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 32401, "upload_time": "2019-02-22T00:51:19", "upload_time_iso_8601": "2019-02-22T00:51:19.430056Z", "url": "https://files.pythonhosted.org/packages/65/f0/3a84f764928911468cac6184b39e59dd6587510bee3c4dc7494aef9e0602/bradocs4py-1.2.0.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "6937547ee2b198840b682761d812f7e4", "sha256": "eff5d5a7aba6904f70ee5a1a87a0b8906e0045ba082d56788cbc77f0d1d8ab9c"}, "downloads": -1, "filename": "bradocs4py-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6937547ee2b198840b682761d812f7e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41089, "upload_time": "2019-06-06T20:09:49", "upload_time_iso_8601": "2019-06-06T20:09:49.227116Z", "url": "https://files.pythonhosted.org/packages/e8/72/ac1fc61972209867f38a05473e9a31184efe10bd1d57adaa57d0bfd1555f/bradocs4py-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9f98d9d69610cdf3f273c5e47aae13f6", "sha256": "a3c32d5292980a435549d95385ca03eda46cfe5106f917e774c5b902c17a63c0"}, "downloads": -1, "filename": "bradocs4py-1.2.2.tar.gz", "has_sig": false, "md5_digest": "9f98d9d69610cdf3f273c5e47aae13f6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33415, "upload_time": "2019-06-06T20:09:55", "upload_time_iso_8601": "2019-06-06T20:09:55.910935Z", "url": "https://files.pythonhosted.org/packages/4b/ed/d21c163e896b26f4ad821d053cc2690a7eec3c94b2ab526599cefc058f2a/bradocs4py-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "39ee83dbd11877cd2d85d82829b4912d", "sha256": "a1b6d04c93f9960cb35d19da9c6f7aa8aa10475aac4475e08873dbebee4310c2"}, "downloads": -1, "filename": "bradocs4py-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "39ee83dbd11877cd2d85d82829b4912d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41116, "upload_time": "2019-07-11T23:50:43", "upload_time_iso_8601": "2019-07-11T23:50:43.331371Z", "url": "https://files.pythonhosted.org/packages/47/3c/1b5bf325fa56117ff67fc0fc6f5719ef85701da922a0301f090b5f6debf8/bradocs4py-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76001a7a8c296647e2b24edac580ce18", "sha256": "e6ca2afdc1334a5f0f416f565e0a413446ad6cc63e13348fc8691566a6fcb905"}, "downloads": -1, "filename": "bradocs4py-1.2.3.tar.gz", "has_sig": false, "md5_digest": "76001a7a8c296647e2b24edac580ce18", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33399, "upload_time": "2019-07-11T23:50:51", "upload_time_iso_8601": "2019-07-11T23:50:51.508935Z", "url": "https://files.pythonhosted.org/packages/45/44/290292292beb89e17cd3d32608df030dde14b4fa108b83ec0c72dff1c17b/bradocs4py-1.2.3.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "3636bc1e7f333b5a7112e8ec99c1a42d", "sha256": "e104fff1d2046a409b45fbfe85d96e77a0456c292e510e72909803fe29302dc6"}, "downloads": -1, "filename": "bradocs4py-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3636bc1e7f333b5a7112e8ec99c1a42d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41132, "upload_time": "2019-07-18T13:58:10", "upload_time_iso_8601": "2019-07-18T13:58:10.763539Z", "url": "https://files.pythonhosted.org/packages/4b/14/082a3690daf27e5bc8d2310f015eea8d15af5e184140c9b35bc53e65b68b/bradocs4py-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2fdd7f75fbbe791afca7c9b906e3170e", "sha256": "2551da137408870dc43079479f21e05c50ebb65ebbc2d6107ec3078302600474"}, "downloads": -1, "filename": "bradocs4py-1.3.0.tar.gz", "has_sig": false, "md5_digest": "2fdd7f75fbbe791afca7c9b906e3170e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33375, "upload_time": "2019-07-18T13:58:17", "upload_time_iso_8601": "2019-07-18T13:58:17.084371Z", "url": "https://files.pythonhosted.org/packages/b6/73/d100d13fd512159f0dfd0279731f4c47df7d55c12b229c3e293b2412f100/bradocs4py-1.3.0.tar.gz", "yanked": false}], "1.3.1.0": [{"comment_text": "", "digests": {"md5": "15455454133cb2732b2e1c9f690a5544", "sha256": "97cf170e40d322c21d605052f6d55e0814f5a6e44dc9399bff76228835f1e4f4"}, "downloads": -1, "filename": "bradocs4py-1.3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15455454133cb2732b2e1c9f690a5544", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41196, "upload_time": "2019-08-13T20:00:25", "upload_time_iso_8601": "2019-08-13T20:00:25.978782Z", "url": "https://files.pythonhosted.org/packages/f8/51/a01168758327283b94f4702f0c7d53b1e3a0c42127a6dd94d3f57c79cb11/bradocs4py-1.3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cccc6d7c4ac21196106fa5e6e303a2c", "sha256": "6991508a3a9448a626318eb5d59a409cff4177815b6bad3f3244fb1810149029"}, "downloads": -1, "filename": "bradocs4py-1.3.1.0.tar.gz", "has_sig": false, "md5_digest": "5cccc6d7c4ac21196106fa5e6e303a2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33398, "upload_time": "2019-08-13T20:00:34", "upload_time_iso_8601": "2019-08-13T20:00:34.200478Z", "url": "https://files.pythonhosted.org/packages/55/d0/b448136daeec51703d557700540749d1ec7a4d734997b040c1d233e27ae1/bradocs4py-1.3.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15455454133cb2732b2e1c9f690a5544", "sha256": "97cf170e40d322c21d605052f6d55e0814f5a6e44dc9399bff76228835f1e4f4"}, "downloads": -1, "filename": "bradocs4py-1.3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "15455454133cb2732b2e1c9f690a5544", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41196, "upload_time": "2019-08-13T20:00:25", "upload_time_iso_8601": "2019-08-13T20:00:25.978782Z", "url": "https://files.pythonhosted.org/packages/f8/51/a01168758327283b94f4702f0c7d53b1e3a0c42127a6dd94d3f57c79cb11/bradocs4py-1.3.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5cccc6d7c4ac21196106fa5e6e303a2c", "sha256": "6991508a3a9448a626318eb5d59a409cff4177815b6bad3f3244fb1810149029"}, "downloads": -1, "filename": "bradocs4py-1.3.1.0.tar.gz", "has_sig": false, "md5_digest": "5cccc6d7c4ac21196106fa5e6e303a2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33398, "upload_time": "2019-08-13T20:00:34", "upload_time_iso_8601": "2019-08-13T20:00:34.200478Z", "url": "https://files.pythonhosted.org/packages/55/d0/b448136daeec51703d557700540749d1ec7a4d734997b040c1d233e27ae1/bradocs4py-1.3.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:26 2020"}