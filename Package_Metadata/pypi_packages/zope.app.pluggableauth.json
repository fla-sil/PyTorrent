{"info": {"author": "Zope Corporation and Contributors", "author_email": "zope3-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "This package provides the original implementation of the pluggable\nauthentication utility. It has been superceded by ``zope.app.authentication``.\n\n\nDetailed Dcoumentation\n----------------------\n\n\n=================================\nNew Authentication Service Design\n=================================\n\nThe current implementation will be replaced. The following is a design\nI came up with together with Jim Fulton.\n-- itamar\n\nNote that this design is implemented (in some form) by the pluggable\nauth service. This document needs to be updated to reflect the final\nimplementation. \n\n\nDesign notes for new AuthenticationService\n------------------------------------------\n\nThe service contains a list of user sources. They implement interfaces,\nstarting with::\n\n\n class IUserPassUserSource:\n     \"\"\"Authenticate using username and password.\"\"\"\n\n     def authenticate(username, password):\n         \"Returns boolean saying if such username/password pair exists\"\n\n\n class IDigestSupportingUserSource(IUserPassUserSource):\n     \"\"\"Allow fetching password, which is required by digest auth methods\"\"\"\n\n     def getPassword(username):\n         \"Return password for username\"\n\n\netc.  Probably there will be others as well, for dealing with certificate\nauthentication and what not.  Probably we need to expand above interfaces\nto deal with principal titles and descriptions, and so on.\n\nA login method (cookie auth, HTTP basic auth, digest auth, FTP auth),\nis registered as a view on one of the above interfaces. \n\n::\n\n  class ILoginMethodView:\n\n        def authenticate():\n             \"\"\"Return principal for request, or None.\"\"\"\n\n        def unauthorized():\n             \"\"\"Tell request that a login is required.\"\"\"\n\n\nThe authentication service is then implemented something like this::\n\n\n  class AuthenticationService:\n\n      def authenticate(self, request):\n          for us in self.userSources:\n               loginView = getView(self, us, \"login\", request)\n               principal = loginView.authenticate()\n               if principal is not None:\n                   return principal\n\n      def unauthorized(self, request):\n          loginView = getView(self, self.userSources[0], request)\n          loginView.unauthorized()\n\n\n=======\nCHANGES\n=======\n\n3.4.0 (2007-10-25)\n------------------\n\n- Initial release independent of the main Zope tree.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://cheeseshop.python.org/pypi/zope.app.pluggableauth", "keywords": "zope3 authentication pluggable", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zope.app.pluggableauth", "package_url": "https://pypi.org/project/zope.app.pluggableauth/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zope.app.pluggableauth/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://cheeseshop.python.org/pypi/zope.app.pluggableauth"}, "release_url": "https://pypi.org/project/zope.app.pluggableauth/3.4.0/", "requires_dist": null, "requires_python": null, "summary": "Pluggable Authenticatin Mechanism (Obselete)", "version": "3.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This package provides the original implementation of the pluggable\nauthentication utility. It has been superceded by <tt>zope.app.authentication</tt>.</p>\n<div id=\"detailed-dcoumentation\">\n<h2>Detailed Dcoumentation</h2>\n<h2 id=\"new-authentication-service-design\"><span class=\"section-subtitle\">New Authentication Service Design</span></h2>\n<p>The current implementation will be replaced. The following is a design\nI came up with together with Jim Fulton.\n\u2013 itamar</p>\n<p>Note that this design is implemented (in some form) by the pluggable\nauth service. This document needs to be updated to reflect the final\nimplementation.</p>\n</div>\n<div id=\"design-notes-for-new-authenticationservice\">\n<h2>Design notes for new AuthenticationService</h2>\n<p>The service contains a list of user sources. They implement interfaces,\nstarting with:</p>\n<pre>class IUserPassUserSource:\n    \"\"\"Authenticate using username and password.\"\"\"\n\n    def authenticate(username, password):\n        \"Returns boolean saying if such username/password pair exists\"\n\n\nclass IDigestSupportingUserSource(IUserPassUserSource):\n    \"\"\"Allow fetching password, which is required by digest auth methods\"\"\"\n\n    def getPassword(username):\n        \"Return password for username\"\n</pre>\n<p>etc.  Probably there will be others as well, for dealing with certificate\nauthentication and what not.  Probably we need to expand above interfaces\nto deal with principal titles and descriptions, and so on.</p>\n<p>A login method (cookie auth, HTTP basic auth, digest auth, FTP auth),\nis registered as a view on one of the above interfaces.</p>\n<pre>class ILoginMethodView:\n\n      def authenticate():\n           \"\"\"Return principal for request, or None.\"\"\"\n\n      def unauthorized():\n           \"\"\"Tell request that a login is required.\"\"\"\n</pre>\n<p>The authentication service is then implemented something like this:</p>\n<pre>class AuthenticationService:\n\n    def authenticate(self, request):\n        for us in self.userSources:\n             loginView = getView(self, us, \"login\", request)\n             principal = loginView.authenticate()\n             if principal is not None:\n                 return principal\n\n    def unauthorized(self, request):\n        loginView = getView(self, self.userSources[0], request)\n        loginView.unauthorized()\n</pre>\n<div id=\"changes\">\n<h3>CHANGES</h3>\n</div>\n</div>\n<div id=\"id1\">\n<h2>3.4.0 (2007-10-25)</h2>\n<ul>\n<li>Initial release independent of the main Zope tree.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 805217, "releases": {"3.4.0": [{"comment_text": "", "digests": {"md5": "7cf294005f10ceefb4774c7468006762", "sha256": "54611d1ed3ab04ab7fbc85cd6dc6e9193073bfaf14b6f81e9a4ee76cea1ad3f2"}, "downloads": -1, "filename": "zope.app.pluggableauth-3.4.0.tar.gz", "has_sig": false, "md5_digest": "7cf294005f10ceefb4774c7468006762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12478, "upload_time": "2007-10-25T16:40:17", "upload_time_iso_8601": "2007-10-25T16:40:17Z", "url": "https://files.pythonhosted.org/packages/3e/0f/fef14d2e3e91d3577101756dcb951c9a0f62522bd201b3a342de7577449c/zope.app.pluggableauth-3.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7cf294005f10ceefb4774c7468006762", "sha256": "54611d1ed3ab04ab7fbc85cd6dc6e9193073bfaf14b6f81e9a4ee76cea1ad3f2"}, "downloads": -1, "filename": "zope.app.pluggableauth-3.4.0.tar.gz", "has_sig": false, "md5_digest": "7cf294005f10ceefb4774c7468006762", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12478, "upload_time": "2007-10-25T16:40:17", "upload_time_iso_8601": "2007-10-25T16:40:17Z", "url": "https://files.pythonhosted.org/packages/3e/0f/fef14d2e3e91d3577101756dcb951c9a0f62522bd201b3a342de7577449c/zope.app.pluggableauth-3.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:23 2020"}