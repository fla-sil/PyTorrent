{"info": {"author": "Samuel Yuen", "author_email": "samuel.s.yuen@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# pydefer\n\n`pydefer` aims to emulate the same experience you get from using Golang's `defer` keyword. `pydefer` allows you to execute a function around a given wrapped function after the wrapped function has executed.\n\n## Installing\n\n`$ pip install pydefer`\n\nor\n\n`$ pipenv install pydefer`\n\n## Usage\n\nHere's a basic example of using defer to print the sequence of numbers between [6,10] after `print_sequence` is called (which calls the sequence of numbers between [1,5]).\n\n```python\n>>> from pydefer.defer import defer\n>>>\n>>> @defer(print,6,7,8,9,10)\n... def print_sequence():\n...     print(1,2,3,4,5)\n...\n>>> print_seqeuence()\n1 2 3 4 5\n6 7 8 9 10\n```\n\nSome more complex use cases of `pydefer` is to be able to close files and not have to worry about closing them yourself in the actual function. Another use case is possibly session management for a web app after a user visits different routes.\n\nHere's the aforementioned more complex example of deferring of closing a file.\n\n```python\nfrom python.defer import defer\n\n@defer(open('employee_data.txt','r').close)\ndef update_employee(e_id):\n    f = open('employee_data.txt','w')\n    # DO STUFF TO FILE\n\n    f.write(e_id.salary)\n\n    # DO MORE STUFF LATER ON\n```\n\nIn the above example, you do not need to manage the file anywhere inside the function as the `defer` function wrapper will close that file for you after the `update_employee` function has finished.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ssyuen/pydefer", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pydefer", "package_url": "https://pypi.org/project/pydefer/", "platform": "", "project_url": "https://pypi.org/project/pydefer/", "project_urls": {"Homepage": "https://github.com/ssyuen/pydefer"}, "release_url": "https://pypi.org/project/pydefer/0.0.2/", "requires_dist": null, "requires_python": ">=3.7", "summary": "Implements a Go-like defer function.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pydefer</h1>\n<p><code>pydefer</code> aims to emulate the same experience you get from using Golang's <code>defer</code> keyword. <code>pydefer</code> allows you to execute a function around a given wrapped function after the wrapped function has executed.</p>\n<h2>Installing</h2>\n<p><code>$ pip install pydefer</code></p>\n<p>or</p>\n<p><code>$ pipenv install pydefer</code></p>\n<h2>Usage</h2>\n<p>Here's a basic example of using defer to print the sequence of numbers between [6,10] after <code>print_sequence</code> is called (which calls the sequence of numbers between [1,5]).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pydefer.defer</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@defer</span><span class=\"p\">(</span><span class=\"nb\">print</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">,</span><span class=\"mi\">8</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"o\">...</span> <span class=\"k\">def</span> <span class=\"nf\">print_sequence</span><span class=\"p\">():</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">print_seqeuence</span><span class=\"p\">()</span>\n<span class=\"mi\">1</span> <span class=\"mi\">2</span> <span class=\"mi\">3</span> <span class=\"mi\">4</span> <span class=\"mi\">5</span>\n<span class=\"mi\">6</span> <span class=\"mi\">7</span> <span class=\"mi\">8</span> <span class=\"mi\">9</span> <span class=\"mi\">10</span>\n</pre>\n<p>Some more complex use cases of <code>pydefer</code> is to be able to close files and not have to worry about closing them yourself in the actual function. Another use case is possibly session management for a web app after a user visits different routes.</p>\n<p>Here's the aforementioned more complex example of deferring of closing a file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">python.defer</span> <span class=\"kn\">import</span> <span class=\"n\">defer</span>\n\n<span class=\"nd\">@defer</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'employee_data.txt'</span><span class=\"p\">,</span><span class=\"s1\">'r'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">update_employee</span><span class=\"p\">(</span><span class=\"n\">e_id</span><span class=\"p\">):</span>\n    <span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'employee_data.txt'</span><span class=\"p\">,</span><span class=\"s1\">'w'</span><span class=\"p\">)</span>\n    <span class=\"c1\"># DO STUFF TO FILE</span>\n\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">e_id</span><span class=\"o\">.</span><span class=\"n\">salary</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># DO MORE STUFF LATER ON</span>\n</pre>\n<p>In the above example, you do not need to manage the file anywhere inside the function as the <code>defer</code> function wrapper will close that file for you after the <code>update_employee</code> function has finished.</p>\n\n          </div>"}, "last_serial": 7074398, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "73e50045dc4e33190fab6cbd68c9ebf6", "sha256": "27646e1e80b8244fbfdc32b0b3a2a4f0037ec18285d74f9f3df1777788f98be1"}, "downloads": -1, "filename": "pydefer-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73e50045dc4e33190fab6cbd68c9ebf6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3020, "upload_time": "2020-04-22T06:24:59", "upload_time_iso_8601": "2020-04-22T06:24:59.583947Z", "url": "https://files.pythonhosted.org/packages/57/9e/f73ea5fb829b4a8f027f41eb8708061e1f5963ecb0413298e9a4796dfb74/pydefer-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c8c3afbfe9ae467d7afc967f1fbe0cc2", "sha256": "d638ec0b66aea71cf4535ff35e53be34847d5a1c138effd955b5ef6c6c31bd16"}, "downloads": -1, "filename": "pydefer-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c8c3afbfe9ae467d7afc967f1fbe0cc2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 1771, "upload_time": "2020-04-22T06:25:01", "upload_time_iso_8601": "2020-04-22T06:25:01.899940Z", "url": "https://files.pythonhosted.org/packages/a2/15/d5a5514370204effa190b60fd91720526fd5eacc153834109abe3ded07f7/pydefer-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "42d86ec3a365e3578b0f6bea46dee13a", "sha256": "2b4e8c810be4cc80aa2a4f494142d746afd67c5f6fbb2c8d929370b9c709c6be"}, "downloads": -1, "filename": "pydefer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "42d86ec3a365e3578b0f6bea46dee13a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3556, "upload_time": "2020-04-22T06:53:38", "upload_time_iso_8601": "2020-04-22T06:53:38.940473Z", "url": "https://files.pythonhosted.org/packages/60/8e/931ca84f3503605860da3e5daaa7db261bc8cacf4e9534385dc452d5357e/pydefer-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cb856be15a4973a85cc41faa81775f4", "sha256": "7fd71e5567c643542d0e92f43a9500ad99f44979d82786436f7f58e150b557ad"}, "downloads": -1, "filename": "pydefer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0cb856be15a4973a85cc41faa81775f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2381, "upload_time": "2020-04-22T06:54:27", "upload_time_iso_8601": "2020-04-22T06:54:27.471249Z", "url": "https://files.pythonhosted.org/packages/08/9d/8a3eb93ed90e1ebc9886aa708af95d2b4b63a1c61b0c7d23ee078710ceba/pydefer-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "42d86ec3a365e3578b0f6bea46dee13a", "sha256": "2b4e8c810be4cc80aa2a4f494142d746afd67c5f6fbb2c8d929370b9c709c6be"}, "downloads": -1, "filename": "pydefer-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "42d86ec3a365e3578b0f6bea46dee13a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3556, "upload_time": "2020-04-22T06:53:38", "upload_time_iso_8601": "2020-04-22T06:53:38.940473Z", "url": "https://files.pythonhosted.org/packages/60/8e/931ca84f3503605860da3e5daaa7db261bc8cacf4e9534385dc452d5357e/pydefer-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0cb856be15a4973a85cc41faa81775f4", "sha256": "7fd71e5567c643542d0e92f43a9500ad99f44979d82786436f7f58e150b557ad"}, "downloads": -1, "filename": "pydefer-0.0.2.tar.gz", "has_sig": false, "md5_digest": "0cb856be15a4973a85cc41faa81775f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 2381, "upload_time": "2020-04-22T06:54:27", "upload_time_iso_8601": "2020-04-22T06:54:27.471249Z", "url": "https://files.pythonhosted.org/packages/08/9d/8a3eb93ed90e1ebc9886aa708af95d2b4b63a1c61b0c7d23ee078710ceba/pydefer-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:12 2020"}