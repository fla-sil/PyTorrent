{"info": {"author": "Grant Backes", "author_email": "gsbackes@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3.6"], "description": "# PYMLTUILS\n\n### About\nThis repository provides various functions useful for python and machine learning. The goal is to keep your code cleaner, keeping business logic out of your primary functions. For example, formatting paths is common, can often turn into many lines of code, and is done frequently throughout a script. Often people do the path formatting multiple times, mid-function, convoluting the code and distracting from the functions purpose. Further, paths aren't always formatted consistently and error handling is poor. Thus, I created the following function to format all paths consistently:\n\n```python\ndef format_path(path):\n  \"\"\" Format paths into a consistent format. Expand user paths.\n      Relative paths are converted to full paths. Directories \n      should all end in forward slashes. Note this will format even if\n      the paths don't actually exist yet.\n  Args:\n    path: Full or relative path of directory or file in question.\n  Returns:\n    Formatted full paths, relative to \n  \"\"\"\n  # If path is None (e.g. when no --arg from parser), default to same dir as the script\n  if path is None:\n    path = \"\"\n\n  # Expand paths\n  path = os.path.expanduser(path)\n\n  # Handle relative paths\n  path = os.path.abspath(path)\n\n  # Check if path *could be* a valid file or dir \n  # Note, files like MAKE or LICENCE that don't actually exist\n  # will be considered as dirs.\n  is_dir = os.path.isdir(path) or is_dir_like(path) and not os.path.isfile(path)\n\n  # Make sure dirs end with a slash\n  if is_dir and not path.endswith('/'):\n    path += \"/\"\n\n  return path  \n```\n\nThis function can take relative or full paths to files or directories. It ensures that empty paths and paths that are type None are handled, paths are expanded, and that directories end with a trailing slash. Using this function removes clutter from your other functions and ensures that paths are formatted consistently, resulting in cleaner, more robust code.\n\n### How to Install\nInstall requirements\n`pip install -r requirements.txt`\n\nInstall the package\n`pip install pymlutils`\n\n### How to Use\nIn your script, import `pymlutils`. Some example usage:\n\n```python\nimport pymlutils.pymlutils as pyml\n\nformatted_path = pyml.format_path(path)\n```\n\n```python\nfrom pymlutils.pymlutils import *\n\nformatted_path = format_path(path)\n```\n\n```python\nimport pymlutils.yolo as yolo\n\nlabel_list = yolo.read_label(path)\n```\n\n```python\nfrom pymlutils.yolo import *\n\nlabel_list = read_label(path)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/baka-san/pymlutils", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pymlutils", "package_url": "https://pypi.org/project/pymlutils/", "platform": "", "project_url": "https://pypi.org/project/pymlutils/", "project_urls": {"Homepage": "https://gitlab.com/baka-san/pymlutils"}, "release_url": "https://pypi.org/project/pymlutils/1.1.2/", "requires_dist": null, "requires_python": "", "summary": "Various functions useful for python and machine learning. Keep your code clean.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PYMLTUILS</h1>\n<h3>About</h3>\n<p>This repository provides various functions useful for python and machine learning. The goal is to keep your code cleaner, keeping business logic out of your primary functions. For example, formatting paths is common, can often turn into many lines of code, and is done frequently throughout a script. Often people do the path formatting multiple times, mid-function, convoluting the code and distracting from the functions purpose. Further, paths aren't always formatted consistently and error handling is poor. Thus, I created the following function to format all paths consistently:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">format_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n  <span class=\"sd\">\"\"\" Format paths into a consistent format. Expand user paths.</span>\n<span class=\"sd\">      Relative paths are converted to full paths. Directories </span>\n<span class=\"sd\">      should all end in forward slashes. Note this will format even if</span>\n<span class=\"sd\">      the paths don't actually exist yet.</span>\n<span class=\"sd\">  Args:</span>\n<span class=\"sd\">    path: Full or relative path of directory or file in question.</span>\n<span class=\"sd\">  Returns:</span>\n<span class=\"sd\">    Formatted full paths, relative to </span>\n<span class=\"sd\">  \"\"\"</span>\n  <span class=\"c1\"># If path is None (e.g. when no --arg from parser), default to same dir as the script</span>\n  <span class=\"k\">if</span> <span class=\"n\">path</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span>\n\n  <span class=\"c1\"># Expand paths</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">expanduser</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Handle relative paths</span>\n  <span class=\"n\">path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">abspath</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Check if path *could be* a valid file or dir </span>\n  <span class=\"c1\"># Note, files like MAKE or LICENCE that don't actually exist</span>\n  <span class=\"c1\"># will be considered as dirs.</span>\n  <span class=\"n\">is_dir</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"ow\">or</span> <span class=\"n\">is_dir_like</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">isfile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n  <span class=\"c1\"># Make sure dirs end with a slash</span>\n  <span class=\"k\">if</span> <span class=\"n\">is_dir</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">):</span>\n    <span class=\"n\">path</span> <span class=\"o\">+=</span> <span class=\"s2\">\"/\"</span>\n\n  <span class=\"k\">return</span> <span class=\"n\">path</span>  \n</pre>\n<p>This function can take relative or full paths to files or directories. It ensures that empty paths and paths that are type None are handled, paths are expanded, and that directories end with a trailing slash. Using this function removes clutter from your other functions and ensures that paths are formatted consistently, resulting in cleaner, more robust code.</p>\n<h3>How to Install</h3>\n<p>Install requirements\n<code>pip install -r requirements.txt</code></p>\n<p>Install the package\n<code>pip install pymlutils</code></p>\n<h3>How to Use</h3>\n<p>In your script, import <code>pymlutils</code>. Some example usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymlutils.pymlutils</span> <span class=\"k\">as</span> <span class=\"nn\">pyml</span>\n\n<span class=\"n\">formatted_path</span> <span class=\"o\">=</span> <span class=\"n\">pyml</span><span class=\"o\">.</span><span class=\"n\">format_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymlutils.pymlutils</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">formatted_path</span> <span class=\"o\">=</span> <span class=\"n\">format_path</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pymlutils.yolo</span> <span class=\"k\">as</span> <span class=\"nn\">yolo</span>\n\n<span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">yolo</span><span class=\"o\">.</span><span class=\"n\">read_label</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymlutils.yolo</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"n\">label_list</span> <span class=\"o\">=</span> <span class=\"n\">read_label</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 7186371, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "f5691226ff60513e130387e6083aba39", "sha256": "30211f773b00be4e0bcb5af2b3db40f9838cc62daba950190028e0b521b379b8"}, "downloads": -1, "filename": "pymlutils-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f5691226ff60513e130387e6083aba39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7058, "upload_time": "2020-04-20T10:45:36", "upload_time_iso_8601": "2020-04-20T10:45:36.400519Z", "url": "https://files.pythonhosted.org/packages/f4/98/146cfbfb4da2d5d8cde69b6b84661c1a978629ec76e03badeaa7dfdef482/pymlutils-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abc99d696eb38901ddd222a10a88b332", "sha256": "7521f64e6f2d6d9f4bc9fca09c4f102af27e4597934c4a0d9fabe566cf254197"}, "downloads": -1, "filename": "pymlutils-1.1.1.tar.gz", "has_sig": false, "md5_digest": "abc99d696eb38901ddd222a10a88b332", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5977, "upload_time": "2020-04-20T10:45:38", "upload_time_iso_8601": "2020-04-20T10:45:38.862008Z", "url": "https://files.pythonhosted.org/packages/22/e4/db3748f31f97ee0353660ad25014e814714ce00bb60cc5345840e5815cc0/pymlutils-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "c39b52af39b9080488126b5524a043c0", "sha256": "ed26799dd96cbad760ab291cac10f158976ed9cbda0e715f31cd323cbda40fde"}, "downloads": -1, "filename": "pymlutils-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c39b52af39b9080488126b5524a043c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7695, "upload_time": "2020-05-07T08:10:21", "upload_time_iso_8601": "2020-05-07T08:10:21.070809Z", "url": "https://files.pythonhosted.org/packages/4d/61/bfe04651b1a979b4ac48be10a7bdadf55b1247bc4504ef22e2166590c478/pymlutils-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c47597922b1f361357a1ce731a7d2d3", "sha256": "1a384a7c2d5088b756fb37ad1a06f2aff4fad4c38f11249c3529892e6f6ccfbb"}, "downloads": -1, "filename": "pymlutils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3c47597922b1f361357a1ce731a7d2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6586, "upload_time": "2020-05-07T08:10:22", "upload_time_iso_8601": "2020-05-07T08:10:22.431505Z", "url": "https://files.pythonhosted.org/packages/43/bb/6a481d4a3d40db6e1646f88d798f6093516d6796d7c85b6fc755b9524cdf/pymlutils-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c39b52af39b9080488126b5524a043c0", "sha256": "ed26799dd96cbad760ab291cac10f158976ed9cbda0e715f31cd323cbda40fde"}, "downloads": -1, "filename": "pymlutils-1.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c39b52af39b9080488126b5524a043c0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7695, "upload_time": "2020-05-07T08:10:21", "upload_time_iso_8601": "2020-05-07T08:10:21.070809Z", "url": "https://files.pythonhosted.org/packages/4d/61/bfe04651b1a979b4ac48be10a7bdadf55b1247bc4504ef22e2166590c478/pymlutils-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c47597922b1f361357a1ce731a7d2d3", "sha256": "1a384a7c2d5088b756fb37ad1a06f2aff4fad4c38f11249c3529892e6f6ccfbb"}, "downloads": -1, "filename": "pymlutils-1.1.2.tar.gz", "has_sig": false, "md5_digest": "3c47597922b1f361357a1ce731a7d2d3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6586, "upload_time": "2020-05-07T08:10:22", "upload_time_iso_8601": "2020-05-07T08:10:22.431505Z", "url": "https://files.pythonhosted.org/packages/43/bb/6a481d4a3d40db6e1646f88d798f6093516d6796d7c85b6fc755b9524cdf/pymlutils-1.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:00 2020"}