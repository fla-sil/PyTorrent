{"info": {"author": "Radu Ghitescu", "author_email": "radu.ghitescu@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers"], "description": "## Status\n\n**FLUENTQL IS WORK IN PROGRESS. WHILE IT IS AVAILABLE ON PYPI, USE IT WITH CAUTION. PUBLIC APIS MAY CHANGE UNEXPECTEDLY WHILE FEATURES ARE ADDED AT PACE.**\n\n|                                            Build                                             |                                                                          Coverage                                                                          |                      Release                      |\n| :------------------------------------------------------------------------------------------: | :--------------------------------------------------------------------------------------------------------------------------------------------------------: | :-----------------------------------------------: |\n| ![Build#develop](https://github.com/RaduG/fluentql/workflows/build/badge.svg?branch=develop) | [![Coverage Status](https://coveralls.io/repos/github/RaduG/fluentql/badge.svg?branch=develop)](https://coveralls.io/github/RaduG/fluentql?branch=develop) | ![Release](https://badge.fury.io/py/fluentql.svg) |\n\n## Introduction\n\n> \nFluentQL is a lightweight, fast and intuitive Python SQL query builder. It helps you build cross-dialect queries straight in your code, as well as test and validate your queries.\n\nUsing SqlAlchemy and Pandas? FluentQL seamlessly integrates with your existing codebase, providing type checking capabilities out of the box.\n\n## Getting Started\nFluentql requires Python 3.5 and up.\n\n```bash\npip install fluentql\n```\n\n## Quick overview\n```python\nfrom fluentql import GenericSQLDialect, Q, Table\n\ntable1 = Table(\"table1\")\ntable2 = Table(\"table2\")\n\nquery = (\n    Q.select(table1.all(), table2[\"col_x\"])\n    .set_from(table1)\n    .left_join(table2, lambda q: q.on(table1[\"id\"] == table2[\"id\"]))\n    .order_by(table1[\"col_y\"])\n    .fetch(10)\n    .distinct()\n)\n\ncompiled_query = query.compile(GenericSQLDialect)\n\nprint(compiled_query)\n```\nwill output\n```\nselect distinct table1.*, table2.col_x from table1 left join table2 on table1.id = table2.id order by col_y limit 10;\n```\n\n## Supported SQL Dialects\nThere are many varieties of SQL out there, and while FluentQL comes with popular dialects implemented out of the box, you might need additional functionality for your use case. This library was built with extensibility in mind, so you can easily extend an existing Dialect implementation or implement your own. No only that, but you can roll out your custom functions with ease.\n\nFluentQL includes the following dialect implementations:\n- Generic SQL - should provide compatibility with a variety of dialects for basic queries\n- Microsoft SQL (coming soon)\n- PosgreSQL (coming soon)\n- Teradata (coming soon)\n\n\n## Usage\n### Overview\nFluentql comes with a built-in runtime type checking system based on Python's typing module and PEP484 type annotations. However, by default, all types are *Any*, thus giving users control over how much they want type checking to be used.\n\nIf using type checking, errors are thrown as queries are constructed if types don't match, such as when adding a string column to a number column, or when using SUM on a Date column. \n\nThe core logical units of fluentql are:\n* Column\n* Table\n* Function\n* Query\n* Dialect\n\n\n### Column\n\nA column has a *name* and a *type* and it is bound to a *table*. The base class Column should never be instantiated on its own; the correct way to create a column that holds a numeric type is as follows:\n\n```python\nfrom fluentql.base_types import Collection\nfrom fluentql.types import Column, NumberType\n\n\nclass NumberColumn(Collection[NumberType], Column):\n    pass\n```\nOr just use ```fluentql.types.NumberColumn```.\n\nThe ```Generic``` type```Collection``` provides the functionality required by the type checking engine and it is simply a subclass of ```typing.Generic```.\n\nFluentql comes with a number of concrete column types in ```fluentql.types```:\n* AnyColumn\n* BooleanColumn\n* DateColumn\n* DateTimeColumn\n* NumberColumn\n* StringColumn\n* TimeColumn\n\nThose implementations are based on their base type counterparts found in ```fluentql.base_types```:\n* BooleanType\n* DateTime\n* DateTimeType\n* NumberType\n* StringType\n* TimeType\n\n\n### Table\nTables are used as targets for Queries and as containers for columns. That does not mean you need to define a schema, as you will see below. Tables can have schemas, but by default they hold any column:\n\n```python\nfrom fluentql import Table\n\nbooks = Table(\"books\")\n```\n\nIn this case, ```books``` is a table that will pass ```AnyColumn``` columns of a given name when asked, like so:\n\n```python\nbook_id = books[\"id\"] # Instance of AnyColumn\ntitle = books[\"title\"] # Instance of AnyColumn\n```\n\nHowever, tables can have schemas. Schemas can be defined using PEP484 type hints, like so:\n\n\n```python\nfrom fluentql import Table\nfrom fluentql.types import BooleanColumn, NumberColumn, StringColumn\n\n\nclass Books(Table):\n    id: NumberColumn\n    title: StringColumn\n    is_available: BooleanColumn\n\n    def __init__(self, db=None):\n        super().__init__(\"books\", db)\n\nbooks = Books()\n```\n\nThen, reference the columns as normal:\n```python\ntitle = books[\"title\"] # Instance of StringColumn\n```\n\nHowever, now, this raises a KeyError:\n```python\nrelease_date = books[\"release_date\"]\n```\n\n#### Using SqlAlchemy Models [TODO]\n```python\nfrom fluentql import Table\n\nfrom project.models import MySqlAlchemyModel\n\n# MySqlAlchemyModel is a subclass of DeclarativeBase\ntable = Table.from_model(MySqlAlchemyModel)\n```\nThe table name and schema are automatically copied from the model class.\n\n\n### Functions\n\nFunctions are the most important units in fluentql. They *implement* (well, semantically only) various functionalities of SQL and are the main interface between queries and the type checking system.\n\nThe base class for all functions is ```fluentql.F```. The theory is:\n* a function takes 0 or more arguments of a given type\n* a function returns a typed value\n\nLet's look at a couple of examples. First, let's imagine a function CoolFunction that takes two Boolean columns as arguments and returns a Boolean column:\n\n```python\nfrom fluentql import F\nfrom fluentql.base_types import BooleanType, Collection\n\n\nclass CoolFunction(F):\n    a: Collection[BooleanType]\n    b: Collection[BooleanType]\n    returns: Collection[BooleanType]\n```\n*Note: the arguments a and b must be provided in order, as you expect the function to be called; however, their name is irrelevant. The only name that matters here is returns, that will always be used as the return type*\n\nRemember, there is no functionality associated to CoolFunction, meaning that it's purpose is not to be called with two booleans and return a value after applying some logic - the snippet above is all there is to it. However, let's assume that our hypothetical SQL dialect actually has this function, and we'd call it like so:\n\n```sql\nselect * from my_table where CoolFunction(boolcol1, boolcol2) = True;\n```\n\nFluentql wants to tell you when the query you're building doesn't really make sense (meaning that it's not type safe). \n\n```python\nclass Books(Table):\n    id: NumberColumn\n    title: StringColumn\n    is_on_sale: BooleanColumn\n    is_sold_out: BooleanColumn\n\nbooks = Books()\n```\n\nSo, while this is OK:\n```\nCoolFunction(books[\"is_on_sale\"], books[\"is_sold_out\"])\n```\nthis is not:\n```\nCoolFunction(books[\"is_on_sale\"], books[\"title\"]) # raises TypeError\n```\nand neither is this:\n```\nCoolFunction(books[\"is_on_sale\"]) # raises TypeError\n```\n\nLet's take this one step further and look at a function Add that takes either scalars or columns of type String and Number:\n\n```python\nfrom typing import TypeVar\n\nT = TypeVar(\"T\", NumberType, StringType)\n\n\nclass Add(F):\n    arg1: Union[T, Collection[T]] # scalar or collection\n    arg2: Union[T, Collection[T]] # scalar or collection\n    returns: Union[T, Collection[T]] # scalar or collection\n```\nThis behaves as you'd expect a TypeVar to behave. You can pass it two Numbers, two NumberColumns, or one of each (same for Strings and StringColumn). However, the return type is quite vague, so let's enhance this.\n\n*Note: When a ```F``` is instantiated, all the types are checked and ran through the typing engine. Each instance of F will have a __type_checker__ object which holds details about the types that were matched, including a mapping from all the TypeVars found in the expected arg types list to concrete types that were matched against the given values. Explore ```fluentql.type_checking.TypeChecker``` to get a better feel of it.*\n\nInstead of passing a type annotation for ```returns```, we can create a function. This function must take ```matched_types``` and ```type_var_mapping``` as its only arguments. \n\n```matched_types``` is a list of types that the given arguments matched against the expected type definition. Effectively, if our arg of type ```A``` is matched against ```Union[A, B]```, the matched type for it will be A. The reference here is against the expected type, not the given type, so if we instead saw ```Union[AS, B]```, where ```AS``` is a superclass of ```A```, the matched type would've been ```AS```. There's obviously a bit more to it, but it's easy to think of it as a *Union unpacker*.\n\n```type_var_mapping``` is a dict, where keys are TypeVars and the value is a tuple of two elements: the first is a list of argument indices, showing which arguments in our list were actually matched against that TypeVar; the second is the concrete type that *resolves* the TypeVar for that specific function call.\n\nSo, back to our example, we can be a bit smarter with our Add function and determine exactly what it will return, like so:\n\n```python\nclass Add(F):\n    arg1: Union[T, Collection[T]] # scalar or collection\n    arg2: Union[T, Collection[T]] # scalar or collection\n\n    def returns(self, matched_types, type_var_mapping):\n        # Get the type that resolved T\n        t_type = type_var_mapping[T][1]\n\n        # If any of the arguments is an instance of Collection\n        # Please note that isinstance behaviour is inconsistent with tying.Generic subtypes, hence this unusual check\n        if any(Collection in t.__mro__ for t in matched_types if hasattr(t, \"__mro__\")):\n            return Collection[t_type]\n\n        return t_type\n```\n\nNow, we can observe:\n\n```python\nnc1 = NumberColumn(\"nc1\")\nnc2 = NumberColumn(\"nc2\")\n\na1 = Add(nc1, nc2) # a1.__returns__ is Collection[NumberType]\na2 = Add(nc1, 100) # a2.__returns__ is Collection[NumberType]\na3 = Add(200, 300) # a3.__returns__ is NumberType\na4 = Add(nc1, \"abc\") # TypeError: T was not matched\n```\n\n\nWhere are functions used? All operators are implemented as functions (Add, Subtract, Multiply, Divide, Modulo, BitwiseAnd etc). As well as that, any SQL functions (such as Max, Min, Count) should be implemented as subclasses of F.\n\nList of all included functions (in ```fluentql.function```):\n* Add\n* Subtract\n* Multiply\n* Divide\n* Modulo\n* BitwiseOr\n* BitwiseAnd\n* BitwiseXor\n* Equals\n* LessThan\n* LessThanOrEqual\n* GreaterThan\n* GreaterThanOrEqual\n* NotEqual\n* Not\n* As (used for aliases)\n* TableStar\n* Star\n* Like\n* In\n* Max\n* Min\n* Sum\n* Asc\n* Desc\n\n```Column``` objects also come with a comprehensive implementation of the Data Model to facilitate a simpler, more expressive syntax:\n\n```python\ncol1 = NumberColumn(\"col1\")\ncol2 = NumberColumn(\"col2\")\n\ncol1 + col2 # Returns Add(col1, col2)\ncol1 - col2 # Returns Subtract(col1, col2)\ncol1 == col2 # Returns Equals(col1, col2)\ncol1 < col2 # Returns LessThan(col1, col2)\n\n# Also\ncol1.max() # Returns Max(col1)\ncol1.isin(col2) # Returns In(col1, col2)\ncol1.asc() # Returns Asc(col1)\n```\nand more.\n\n### Query\nThe ```fluentql.query.Query``` or, simpler, ```fluentql.Q``` class is what users will mostly interact with - it is the interface to the query builder itself.\n\nEach instance of ```Q``` has a ```_command``` attribute, which is a value of ```QueryCommands```. The possible commands are:\n* SELECT\n* INSERT\n* UPDATE\n* DELETE\n* CREATE\n* DROP\n* WHERE\n* ON\n* JOIN\n* HAVING\n\nThe first half of them are matches for actual SQL statements, while the last ones are synthetic sub-query types that are used as containers in certain circumstances.\n\nThere are two main ideas to bear in mind:\n* Each core method of ```Q``` is only set to execute for a particular set of QueryCommands (e.g. ```where()``` will only work for ```SELECT``` and ```DELETE``` statements)\n* Each statement is initialised through a classmethod which returns an instance of ```Q```: ```Q.select()``` returns a ```Q``` with ```_command = QueryCommands.SELECT``` and so on.\n\n\n#### SELECT\n\n##### Basic use\n```python\nQ.select().set_from(table) # select * from table;\nQ.select(table[\"col1\"]).from_(table) # select col1 from table; -- note that Q.set_from is an alias for Q.from_\n```\nCalling ```select``` with no arguments returns a ```select *```.\n\n##### Where\n\n```python\n# select * from table where col1 < col2;\nQ.select().set_from(table).where(table[\"col1\"] < table[\"col2\"])\n\n # select * from table where col1 > col2 or (col3 like '%abc' and col4 <> 'XYZ')\nQ.select().set_from(table).where(table[\"col1\"] > table[\"col2\"]).or_where(lambda q: q.where(table[\"col3\"].like(\"%abc\")).and_where(table[\"col4\"] != \"XYZ\"))\n```\nPass a lambda function to ```where```, ```and_where``` or ```or_where``` to *nest* conditions.\n\n##### Join\n```python\n# select * from table inner join table2 on table.col1 = table2.col3;\nQ.select().set_from(table).inner_join(table2, lambda q: q.on(table[\"col1\"] == table2[\"col3\"]))\n\n# select * from table left join table2 on table.col1 = table2.col3 and (table.col1 % 2 = 0);\nQ.select().set_from(table).left_join(table2, lambda q: q.on(table[\"col1\"] == table2[\"col3\"]).and_on(table[\"col1\"] % 2 = 0))\n\n# select * from table right join table2 using ('id');\nQ.select().set_from(table).right_join(table2, lambda q: q.using(\"id\"))\n```\nAvailable join methods:\n* ```inner_join```\n* ```outer_join```\n* ```left_join```\n* ```right_join```\n* ```cross_join```\n\n\n##### Group By\n```python\n# select col1 from table group by col1;\nQ.select(table[\"col1\"]).set_from(table).group_by(table[\"col1\"])\n\n# select col2, col3, max(col1) from table group by col2, col3;\nQ.select(table[\"col2\"], table[\"col3\"], table[\"col1\"].max()).set_from(table).group_by(table[\"col2\"], table[\"col3\"])\n```\n\n##### Having\n```python\n# select col1 from table group by col1 having col1 < 20 and (col1 % 2 = 1);\nQ.select(table[\"col1\"]).set_from(table).group_by(table[\"col1\"]).having(table[\"col1\"] < 20).and_having(table[\"col1\"] % 2 == 1)\n```\n```having```, ```and_having```, ```or_having``` methods work in a similar way to ```where``` methods, in that they can also take a ```lambda``` as argument to nest conditions.\n\n\n##### Order By\n```python\n# select * from table order by col1 asc;\nQ.select().set_from(table).order_by(table[\"col1\"]) # if not specified, Ascending order is assumed\n# equivalent to\nQ.select().set_from(table).order_by(table[\"col1\"].asc())\n\n# select * from table order by col1 asc, col2 desc;\nQ.select().set_from(table).order_by(table[\"col1\"], table[\"col2\"].desc())\n```\nUse ```Column.asc``` and ```Column.desc``` to mark ordering in an order_by clause.\n\n\n##### Fetch and Skip\n```python\n# select * from table limit 100;\nQ.select().set_from(table).fetch(100)\n\n# select * from table offset 30;\nQ.select().set_from(table).skip(30)\n\n# select * from table limit 100 offset 30;\nQ.select().set_from(table).fetch(100).skip(30)\n```\n\n\n#### Delete\n\nDelete queries may only have where clauses:\n```python\n# delete from table;\nQ.delete().set_from(table)\n\n# delete from table where col1 = 'val';\nQ.delete().set_from(table).where(table[\"col1\"] == \"val\")\n```\n\n#### Insert\n*Coming soon*\n\n#### Create\n*Coming soon*\n\n#### Drop\n*Coming soon*\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RaduG/fluentql", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "fluentql", "package_url": "https://pypi.org/project/fluentql/", "platform": "", "project_url": "https://pypi.org/project/fluentql/", "project_urls": {"Homepage": "https://github.com/RaduG/fluentql"}, "release_url": "https://pypi.org/project/fluentql/0.1.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Lightweight and intuitive Python SQL query builder.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Status</h2>\n<p><strong>FLUENTQL IS WORK IN PROGRESS. WHILE IT IS AVAILABLE ON PYPI, USE IT WITH CAUTION. PUBLIC APIS MAY CHANGE UNEXPECTEDLY WHILE FEATURES ARE ADDED AT PACE.</strong></p>\n<table>\n<thead>\n<tr>\n<th align=\"center\">Build</th>\n<th align=\"center\">Coverage</th>\n<th align=\"center\">Release</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\"><img alt=\"Build#develop\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a2fb8e9b5a1bfc4e477f507d5d77225d5aea8ee/68747470733a2f2f6769746875622e636f6d2f52616475472f666c75656e74716c2f776f726b666c6f77732f6275696c642f62616467652e7376673f6272616e63683d646576656c6f70\"></td>\n<td align=\"center\"><a href=\"https://coveralls.io/github/RaduG/fluentql?branch=develop\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/848cdca06eb69abf34775c89c081fd3debea3469/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f52616475472f666c75656e74716c2f62616467652e7376673f6272616e63683d646576656c6f70\"></a></td>\n<td align=\"center\"><img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca748929731da8fcd81542b49689cc9671cdb3d6/68747470733a2f2f62616467652e667572792e696f2f70792f666c75656e74716c2e737667\"></td>\n</tr></tbody></table>\n<h2>Introduction</h2>\n<blockquote>\n</blockquote>\n<p>FluentQL is a lightweight, fast and intuitive Python SQL query builder. It helps you build cross-dialect queries straight in your code, as well as test and validate your queries.</p>\n<p>Using SqlAlchemy and Pandas? FluentQL seamlessly integrates with your existing codebase, providing type checking capabilities out of the box.</p>\n<h2>Getting Started</h2>\n<p>Fluentql requires Python 3.5 and up.</p>\n<pre>pip install fluentql\n</pre>\n<h2>Quick overview</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql</span> <span class=\"kn\">import</span> <span class=\"n\">GenericSQLDialect</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"n\">Table</span>\n\n<span class=\"n\">table1</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s2\">\"table1\"</span><span class=\"p\">)</span>\n<span class=\"n\">table2</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s2\">\"table2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">table1</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">(),</span> <span class=\"n\">table2</span><span class=\"p\">[</span><span class=\"s2\">\"col_x\"</span><span class=\"p\">])</span>\n    <span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table1</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">left_join</span><span class=\"p\">(</span><span class=\"n\">table2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">table1</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">table2</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]))</span>\n    <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">table1</span><span class=\"p\">[</span><span class=\"s2\">\"col_y\"</span><span class=\"p\">])</span>\n    <span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n    <span class=\"o\">.</span><span class=\"n\">distinct</span><span class=\"p\">()</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">compiled_query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"n\">GenericSQLDialect</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">compiled_query</span><span class=\"p\">)</span>\n</pre>\n<p>will output</p>\n<pre><code>select distinct table1.*, table2.col_x from table1 left join table2 on table1.id = table2.id order by col_y limit 10;\n</code></pre>\n<h2>Supported SQL Dialects</h2>\n<p>There are many varieties of SQL out there, and while FluentQL comes with popular dialects implemented out of the box, you might need additional functionality for your use case. This library was built with extensibility in mind, so you can easily extend an existing Dialect implementation or implement your own. No only that, but you can roll out your custom functions with ease.</p>\n<p>FluentQL includes the following dialect implementations:</p>\n<ul>\n<li>Generic SQL - should provide compatibility with a variety of dialects for basic queries</li>\n<li>Microsoft SQL (coming soon)</li>\n<li>PosgreSQL (coming soon)</li>\n<li>Teradata (coming soon)</li>\n</ul>\n<h2>Usage</h2>\n<h3>Overview</h3>\n<p>Fluentql comes with a built-in runtime type checking system based on Python's typing module and PEP484 type annotations. However, by default, all types are <em>Any</em>, thus giving users control over how much they want type checking to be used.</p>\n<p>If using type checking, errors are thrown as queries are constructed if types don't match, such as when adding a string column to a number column, or when using SUM on a Date column.</p>\n<p>The core logical units of fluentql are:</p>\n<ul>\n<li>Column</li>\n<li>Table</li>\n<li>Function</li>\n<li>Query</li>\n<li>Dialect</li>\n</ul>\n<h3>Column</h3>\n<p>A column has a <em>name</em> and a <em>type</em> and it is bound to a <em>table</em>. The base class Column should never be instantiated on its own; the correct way to create a column that holds a numeric type is as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql.base_types</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluentql.types</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">NumberType</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NumberColumn</span><span class=\"p\">(</span><span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">NumberType</span><span class=\"p\">],</span> <span class=\"n\">Column</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Or just use <code>fluentql.types.NumberColumn</code>.</p>\n<p>The <code>Generic</code> type<code>Collection</code> provides the functionality required by the type checking engine and it is simply a subclass of <code>typing.Generic</code>.</p>\n<p>Fluentql comes with a number of concrete column types in <code>fluentql.types</code>:</p>\n<ul>\n<li>AnyColumn</li>\n<li>BooleanColumn</li>\n<li>DateColumn</li>\n<li>DateTimeColumn</li>\n<li>NumberColumn</li>\n<li>StringColumn</li>\n<li>TimeColumn</li>\n</ul>\n<p>Those implementations are based on their base type counterparts found in <code>fluentql.base_types</code>:</p>\n<ul>\n<li>BooleanType</li>\n<li>DateTime</li>\n<li>DateTimeType</li>\n<li>NumberType</li>\n<li>StringType</li>\n<li>TimeType</li>\n</ul>\n<h3>Table</h3>\n<p>Tables are used as targets for Queries and as containers for columns. That does not mean you need to define a schema, as you will see below. Tables can have schemas, but by default they hold any column:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"p\">(</span><span class=\"s2\">\"books\"</span><span class=\"p\">)</span>\n</pre>\n<p>In this case, <code>books</code> is a table that will pass <code>AnyColumn</code> columns of a given name when asked, like so:</p>\n<pre><span class=\"n\">book_id</span> <span class=\"o\">=</span> <span class=\"n\">books</span><span class=\"p\">[</span><span class=\"s2\">\"id\"</span><span class=\"p\">]</span> <span class=\"c1\"># Instance of AnyColumn</span>\n<span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">books</span><span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">]</span> <span class=\"c1\"># Instance of AnyColumn</span>\n</pre>\n<p>However, tables can have schemas. Schemas can be defined using PEP484 type hints, like so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluentql.types</span> <span class=\"kn\">import</span> <span class=\"n\">BooleanColumn</span><span class=\"p\">,</span> <span class=\"n\">NumberColumn</span><span class=\"p\">,</span> <span class=\"n\">StringColumn</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Books</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">NumberColumn</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">StringColumn</span>\n    <span class=\"n\">is_available</span><span class=\"p\">:</span> <span class=\"n\">BooleanColumn</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"s2\">\"books\"</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">Books</span><span class=\"p\">()</span>\n</pre>\n<p>Then, reference the columns as normal:</p>\n<pre><span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">books</span><span class=\"p\">[</span><span class=\"s2\">\"title\"</span><span class=\"p\">]</span> <span class=\"c1\"># Instance of StringColumn</span>\n</pre>\n<p>However, now, this raises a KeyError:</p>\n<pre><span class=\"n\">release_date</span> <span class=\"o\">=</span> <span class=\"n\">books</span><span class=\"p\">[</span><span class=\"s2\">\"release_date\"</span><span class=\"p\">]</span>\n</pre>\n<h4>Using SqlAlchemy Models [TODO]</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql</span> <span class=\"kn\">import</span> <span class=\"n\">Table</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">project.models</span> <span class=\"kn\">import</span> <span class=\"n\">MySqlAlchemyModel</span>\n\n<span class=\"c1\"># MySqlAlchemyModel is a subclass of DeclarativeBase</span>\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">Table</span><span class=\"o\">.</span><span class=\"n\">from_model</span><span class=\"p\">(</span><span class=\"n\">MySqlAlchemyModel</span><span class=\"p\">)</span>\n</pre>\n<p>The table name and schema are automatically copied from the model class.</p>\n<h3>Functions</h3>\n<p>Functions are the most important units in fluentql. They <em>implement</em> (well, semantically only) various functionalities of SQL and are the main interface between queries and the type checking system.</p>\n<p>The base class for all functions is <code>fluentql.F</code>. The theory is:</p>\n<ul>\n<li>a function takes 0 or more arguments of a given type</li>\n<li>a function returns a typed value</li>\n</ul>\n<p>Let's look at a couple of examples. First, let's imagine a function CoolFunction that takes two Boolean columns as arguments and returns a Boolean column:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">fluentql</span> <span class=\"kn\">import</span> <span class=\"n\">F</span>\n<span class=\"kn\">from</span> <span class=\"nn\">fluentql.base_types</span> <span class=\"kn\">import</span> <span class=\"n\">BooleanType</span><span class=\"p\">,</span> <span class=\"n\">Collection</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CoolFunction</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">):</span>\n    <span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">BooleanType</span><span class=\"p\">]</span>\n    <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">BooleanType</span><span class=\"p\">]</span>\n    <span class=\"n\">returns</span><span class=\"p\">:</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">BooleanType</span><span class=\"p\">]</span>\n</pre>\n<p><em>Note: the arguments a and b must be provided in order, as you expect the function to be called; however, their name is irrelevant. The only name that matters here is returns, that will always be used as the return type</em></p>\n<p>Remember, there is no functionality associated to CoolFunction, meaning that it's purpose is not to be called with two booleans and return a value after applying some logic - the snippet above is all there is to it. However, let's assume that our hypothetical SQL dialect actually has this function, and we'd call it like so:</p>\n<pre><span class=\"k\">select</span> <span class=\"o\">*</span> <span class=\"k\">from</span> <span class=\"n\">my_table</span> <span class=\"k\">where</span> <span class=\"n\">CoolFunction</span><span class=\"p\">(</span><span class=\"n\">boolcol1</span><span class=\"p\">,</span> <span class=\"n\">boolcol2</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"k\">True</span><span class=\"p\">;</span>\n</pre>\n<p>Fluentql wants to tell you when the query you're building doesn't really make sense (meaning that it's not type safe).</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Books</span><span class=\"p\">(</span><span class=\"n\">Table</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">NumberColumn</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"n\">StringColumn</span>\n    <span class=\"n\">is_on_sale</span><span class=\"p\">:</span> <span class=\"n\">BooleanColumn</span>\n    <span class=\"n\">is_sold_out</span><span class=\"p\">:</span> <span class=\"n\">BooleanColumn</span>\n\n<span class=\"n\">books</span> <span class=\"o\">=</span> <span class=\"n\">Books</span><span class=\"p\">()</span>\n</pre>\n<p>So, while this is OK:</p>\n<pre><code>CoolFunction(books[\"is_on_sale\"], books[\"is_sold_out\"])\n</code></pre>\n<p>this is not:</p>\n<pre><code>CoolFunction(books[\"is_on_sale\"], books[\"title\"]) # raises TypeError\n</code></pre>\n<p>and neither is this:</p>\n<pre><code>CoolFunction(books[\"is_on_sale\"]) # raises TypeError\n</code></pre>\n<p>Let's take this one step further and look at a function Add that takes either scalars or columns of type String and Number:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">TypeVar</span>\n\n<span class=\"n\">T</span> <span class=\"o\">=</span> <span class=\"n\">TypeVar</span><span class=\"p\">(</span><span class=\"s2\">\"T\"</span><span class=\"p\">,</span> <span class=\"n\">NumberType</span><span class=\"p\">,</span> <span class=\"n\">StringType</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Add</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">):</span>\n    <span class=\"n\">arg1</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"c1\"># scalar or collection</span>\n    <span class=\"n\">arg2</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"c1\"># scalar or collection</span>\n    <span class=\"n\">returns</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"c1\"># scalar or collection</span>\n</pre>\n<p>This behaves as you'd expect a TypeVar to behave. You can pass it two Numbers, two NumberColumns, or one of each (same for Strings and StringColumn). However, the return type is quite vague, so let's enhance this.</p>\n<p><em>Note: When a <code>F</code> is instantiated, all the types are checked and ran through the typing engine. Each instance of F will have a <strong>type_checker</strong> object which holds details about the types that were matched, including a mapping from all the TypeVars found in the expected arg types list to concrete types that were matched against the given values. Explore <code>fluentql.type_checking.TypeChecker</code> to get a better feel of it.</em></p>\n<p>Instead of passing a type annotation for <code>returns</code>, we can create a function. This function must take <code>matched_types</code> and <code>type_var_mapping</code> as its only arguments.</p>\n<p><code>matched_types</code> is a list of types that the given arguments matched against the expected type definition. Effectively, if our arg of type <code>A</code> is matched against <code>Union[A, B]</code>, the matched type for it will be A. The reference here is against the expected type, not the given type, so if we instead saw <code>Union[AS, B]</code>, where <code>AS</code> is a superclass of <code>A</code>, the matched type would've been <code>AS</code>. There's obviously a bit more to it, but it's easy to think of it as a <em>Union unpacker</em>.</p>\n<p><code>type_var_mapping</code> is a dict, where keys are TypeVars and the value is a tuple of two elements: the first is a list of argument indices, showing which arguments in our list were actually matched against that TypeVar; the second is the concrete type that <em>resolves</em> the TypeVar for that specific function call.</p>\n<p>So, back to our example, we can be a bit smarter with our Add function and determine exactly what it will return, like so:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Add</span><span class=\"p\">(</span><span class=\"n\">F</span><span class=\"p\">):</span>\n    <span class=\"n\">arg1</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"c1\"># scalar or collection</span>\n    <span class=\"n\">arg2</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">,</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">]]</span> <span class=\"c1\"># scalar or collection</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">returns</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">matched_types</span><span class=\"p\">,</span> <span class=\"n\">type_var_mapping</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Get the type that resolved T</span>\n        <span class=\"n\">t_type</span> <span class=\"o\">=</span> <span class=\"n\">type_var_mapping</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n        <span class=\"c1\"># If any of the arguments is an instance of Collection</span>\n        <span class=\"c1\"># Please note that isinstance behaviour is inconsistent with tying.Generic subtypes, hence this unusual check</span>\n        <span class=\"k\">if</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">Collection</span> <span class=\"ow\">in</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"vm\">__mro__</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"n\">matched_types</span> <span class=\"k\">if</span> <span class=\"nb\">hasattr</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"s2\">\"__mro__\"</span><span class=\"p\">)):</span>\n            <span class=\"k\">return</span> <span class=\"n\">Collection</span><span class=\"p\">[</span><span class=\"n\">t_type</span><span class=\"p\">]</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">t_type</span>\n</pre>\n<p>Now, we can observe:</p>\n<pre><span class=\"n\">nc1</span> <span class=\"o\">=</span> <span class=\"n\">NumberColumn</span><span class=\"p\">(</span><span class=\"s2\">\"nc1\"</span><span class=\"p\">)</span>\n<span class=\"n\">nc2</span> <span class=\"o\">=</span> <span class=\"n\">NumberColumn</span><span class=\"p\">(</span><span class=\"s2\">\"nc2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">a1</span> <span class=\"o\">=</span> <span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">nc1</span><span class=\"p\">,</span> <span class=\"n\">nc2</span><span class=\"p\">)</span> <span class=\"c1\"># a1.__returns__ is Collection[NumberType]</span>\n<span class=\"n\">a2</span> <span class=\"o\">=</span> <span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">nc1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"c1\"># a2.__returns__ is Collection[NumberType]</span>\n<span class=\"n\">a3</span> <span class=\"o\">=</span> <span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"mi\">300</span><span class=\"p\">)</span> <span class=\"c1\"># a3.__returns__ is NumberType</span>\n<span class=\"n\">a4</span> <span class=\"o\">=</span> <span class=\"n\">Add</span><span class=\"p\">(</span><span class=\"n\">nc1</span><span class=\"p\">,</span> <span class=\"s2\">\"abc\"</span><span class=\"p\">)</span> <span class=\"c1\"># TypeError: T was not matched</span>\n</pre>\n<p>Where are functions used? All operators are implemented as functions (Add, Subtract, Multiply, Divide, Modulo, BitwiseAnd etc). As well as that, any SQL functions (such as Max, Min, Count) should be implemented as subclasses of F.</p>\n<p>List of all included functions (in <code>fluentql.function</code>):</p>\n<ul>\n<li>Add</li>\n<li>Subtract</li>\n<li>Multiply</li>\n<li>Divide</li>\n<li>Modulo</li>\n<li>BitwiseOr</li>\n<li>BitwiseAnd</li>\n<li>BitwiseXor</li>\n<li>Equals</li>\n<li>LessThan</li>\n<li>LessThanOrEqual</li>\n<li>GreaterThan</li>\n<li>GreaterThanOrEqual</li>\n<li>NotEqual</li>\n<li>Not</li>\n<li>As (used for aliases)</li>\n<li>TableStar</li>\n<li>Star</li>\n<li>Like</li>\n<li>In</li>\n<li>Max</li>\n<li>Min</li>\n<li>Sum</li>\n<li>Asc</li>\n<li>Desc</li>\n</ul>\n<p><code>Column</code> objects also come with a comprehensive implementation of the Data Model to facilitate a simpler, more expressive syntax:</p>\n<pre><span class=\"n\">col1</span> <span class=\"o\">=</span> <span class=\"n\">NumberColumn</span><span class=\"p\">(</span><span class=\"s2\">\"col1\"</span><span class=\"p\">)</span>\n<span class=\"n\">col2</span> <span class=\"o\">=</span> <span class=\"n\">NumberColumn</span><span class=\"p\">(</span><span class=\"s2\">\"col2\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">col1</span> <span class=\"o\">+</span> <span class=\"n\">col2</span> <span class=\"c1\"># Returns Add(col1, col2)</span>\n<span class=\"n\">col1</span> <span class=\"o\">-</span> <span class=\"n\">col2</span> <span class=\"c1\"># Returns Subtract(col1, col2)</span>\n<span class=\"n\">col1</span> <span class=\"o\">==</span> <span class=\"n\">col2</span> <span class=\"c1\"># Returns Equals(col1, col2)</span>\n<span class=\"n\">col1</span> <span class=\"o\">&lt;</span> <span class=\"n\">col2</span> <span class=\"c1\"># Returns LessThan(col1, col2)</span>\n\n<span class=\"c1\"># Also</span>\n<span class=\"n\">col1</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">()</span> <span class=\"c1\"># Returns Max(col1)</span>\n<span class=\"n\">col1</span><span class=\"o\">.</span><span class=\"n\">isin</span><span class=\"p\">(</span><span class=\"n\">col2</span><span class=\"p\">)</span> <span class=\"c1\"># Returns In(col1, col2)</span>\n<span class=\"n\">col1</span><span class=\"o\">.</span><span class=\"n\">asc</span><span class=\"p\">()</span> <span class=\"c1\"># Returns Asc(col1)</span>\n</pre>\n<p>and more.</p>\n<h3>Query</h3>\n<p>The <code>fluentql.query.Query</code> or, simpler, <code>fluentql.Q</code> class is what users will mostly interact with - it is the interface to the query builder itself.</p>\n<p>Each instance of <code>Q</code> has a <code>_command</code> attribute, which is a value of <code>QueryCommands</code>. The possible commands are:</p>\n<ul>\n<li>SELECT</li>\n<li>INSERT</li>\n<li>UPDATE</li>\n<li>DELETE</li>\n<li>CREATE</li>\n<li>DROP</li>\n<li>WHERE</li>\n<li>ON</li>\n<li>JOIN</li>\n<li>HAVING</li>\n</ul>\n<p>The first half of them are matches for actual SQL statements, while the last ones are synthetic sub-query types that are used as containers in certain circumstances.</p>\n<p>There are two main ideas to bear in mind:</p>\n<ul>\n<li>Each core method of <code>Q</code> is only set to execute for a particular set of QueryCommands (e.g. <code>where()</code> will only work for <code>SELECT</code> and <code>DELETE</code> statements)</li>\n<li>Each statement is initialised through a classmethod which returns an instance of <code>Q</code>: <code>Q.select()</code> returns a <code>Q</code> with <code>_command = QueryCommands.SELECT</code> and so on.</li>\n</ul>\n<h4>SELECT</h4>\n<h5>Basic use</h5>\n<pre><span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"c1\"># select * from table;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">from_</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span> <span class=\"c1\"># select col1 from table; -- note that Q.set_from is an alias for Q.from_</span>\n</pre>\n<p>Calling <code>select</code> with no arguments returns a <code>select *</code>.</p>\n<h5>Where</h5>\n<pre><span class=\"c1\"># select * from table where col1 &lt; col2;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col2\"</span><span class=\"p\">])</span>\n\n <span class=\"c1\"># select * from table where col1 &gt; col2 or (col3 like '%abc' and col4 &lt;&gt; 'XYZ')</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col2\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">or_where</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col3\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">like</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%a</span><span class=\"s2\">bc\"</span><span class=\"p\">))</span><span class=\"o\">.</span><span class=\"n\">and_where</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col4\"</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"s2\">\"XYZ\"</span><span class=\"p\">))</span>\n</pre>\n<p>Pass a lambda function to <code>where</code>, <code>and_where</code> or <code>or_where</code> to <em>nest</em> conditions.</p>\n<h5>Join</h5>\n<pre><span class=\"c1\"># select * from table inner join table2 on table.col1 = table2.col3;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">inner_join</span><span class=\"p\">(</span><span class=\"n\">table2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">table2</span><span class=\"p\">[</span><span class=\"s2\">\"col3\"</span><span class=\"p\">]))</span>\n\n<span class=\"c1\"># select * from table left join table2 on table.col1 = table2.col3 and (table.col1 % 2 = 0);</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">left_join</span><span class=\"p\">(</span><span class=\"n\">table2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">on</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">table2</span><span class=\"p\">[</span><span class=\"s2\">\"col3\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">and_on</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># select * from table right join table2 using ('id');</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">right_join</span><span class=\"p\">(</span><span class=\"n\">table2</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">q</span><span class=\"p\">:</span> <span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">using</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">))</span>\n</pre>\n<p>Available join methods:</p>\n<ul>\n<li><code>inner_join</code></li>\n<li><code>outer_join</code></li>\n<li><code>left_join</code></li>\n<li><code>right_join</code></li>\n<li><code>cross_join</code></li>\n</ul>\n<h5>Group By</h5>\n<pre><span class=\"c1\"># select col1 from table group by col1;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># select col2, col3, max(col1) from table group by col2, col3;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col2\"</span><span class=\"p\">],</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col3\"</span><span class=\"p\">],</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">max</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col2\"</span><span class=\"p\">],</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col3\"</span><span class=\"p\">])</span>\n</pre>\n<h5>Having</h5>\n<pre><span class=\"c1\"># select col1 from table group by col1 having col1 &lt; 20 and (col1 % 2 = 1);</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">having</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">and_having</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">%</span> <span class=\"mi\">2</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p><code>having</code>, <code>and_having</code>, <code>or_having</code> methods work in a similar way to <code>where</code> methods, in that they can also take a <code>lambda</code> as argument to nest conditions.</p>\n<h5>Order By</h5>\n<pre><span class=\"c1\"># select * from table order by col1 asc;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">])</span> <span class=\"c1\"># if not specified, Ascending order is assumed</span>\n<span class=\"c1\"># equivalent to</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">asc</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># select * from table order by col1 asc, col2 desc;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">],</span> <span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col2\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span>\n</pre>\n<p>Use <code>Column.asc</code> and <code>Column.desc</code> to mark ordering in an order_by clause.</p>\n<h5>Fetch and Skip</h5>\n<pre><span class=\"c1\"># select * from table limit 100;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># select * from table offset 30;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># select * from table limit 100 offset 30;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fetch</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">skip</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">)</span>\n</pre>\n<h4>Delete</h4>\n<p>Delete queries may only have where clauses:</p>\n<pre><span class=\"c1\"># delete from table;</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># delete from table where col1 = 'val';</span>\n<span class=\"n\">Q</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_from</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"p\">[</span><span class=\"s2\">\"col1\"</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s2\">\"val\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Insert</h4>\n<p><em>Coming soon</em></p>\n<h4>Create</h4>\n<p><em>Coming soon</em></p>\n<h4>Drop</h4>\n<p><em>Coming soon</em></p>\n\n          </div>"}, "last_serial": 7020018, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2716b3e0df06b0913e7b5a7728c1609b", "sha256": "035b052c69eae8991e369d9132afc6c6600422bf2c9fdd7293386906e24f2cb8"}, "downloads": -1, "filename": "fluentql-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2716b3e0df06b0913e7b5a7728c1609b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 29990, "upload_time": "2020-04-13T21:56:50", "upload_time_iso_8601": "2020-04-13T21:56:50.762484Z", "url": "https://files.pythonhosted.org/packages/28/59/ad5104d544d8f323cd0e4331041fec6f05254f3426b1ae70bea433c8cb84/fluentql-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f2060c3bc6e117ab625e23fb74d40e33", "sha256": "f982a5821cbbd69bdccc5d4318df27404969c1f3bea2764bc580904d33cae801"}, "downloads": -1, "filename": "fluentql-0.1.0.tar.gz", "has_sig": false, "md5_digest": "f2060c3bc6e117ab625e23fb74d40e33", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16256, "upload_time": "2020-04-13T21:56:52", "upload_time_iso_8601": "2020-04-13T21:56:52.801361Z", "url": "https://files.pythonhosted.org/packages/c7/a0/129a4bfa0a65ca5e7a6420afad5b1cdb2073a3918b5b7b82e03d4ff371e4/fluentql-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "74294b23f9e46973a414f89101bb45bc", "sha256": "7cd736eaffd60d1e3eacf5ab9eceeffee25f25ae314f6261aa3a1fcb384772e1"}, "downloads": -1, "filename": "fluentql-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "74294b23f9e46973a414f89101bb45bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20151, "upload_time": "2020-04-14T20:31:38", "upload_time_iso_8601": "2020-04-14T20:31:38.238658Z", "url": "https://files.pythonhosted.org/packages/34/c4/274ab413249cdda9cd8683da64751115625a5bbbe11247041d92cfe88b69/fluentql-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a87b774f8000a9e49999c32524205f8", "sha256": "56357ab1d3b22e61870cf9bdb021b515b7b515df9a14a975021dda8bb462f3ea"}, "downloads": -1, "filename": "fluentql-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7a87b774f8000a9e49999c32524205f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18376, "upload_time": "2020-04-14T20:31:39", "upload_time_iso_8601": "2020-04-14T20:31:39.551027Z", "url": "https://files.pythonhosted.org/packages/1c/a5/e2dadffa57bbfde0e5718513afb1dd188dd68abab13bf8aa6a3c6c8c38d6/fluentql-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74294b23f9e46973a414f89101bb45bc", "sha256": "7cd736eaffd60d1e3eacf5ab9eceeffee25f25ae314f6261aa3a1fcb384772e1"}, "downloads": -1, "filename": "fluentql-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "74294b23f9e46973a414f89101bb45bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20151, "upload_time": "2020-04-14T20:31:38", "upload_time_iso_8601": "2020-04-14T20:31:38.238658Z", "url": "https://files.pythonhosted.org/packages/34/c4/274ab413249cdda9cd8683da64751115625a5bbbe11247041d92cfe88b69/fluentql-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7a87b774f8000a9e49999c32524205f8", "sha256": "56357ab1d3b22e61870cf9bdb021b515b7b515df9a14a975021dda8bb462f3ea"}, "downloads": -1, "filename": "fluentql-0.1.1.tar.gz", "has_sig": false, "md5_digest": "7a87b774f8000a9e49999c32524205f8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 18376, "upload_time": "2020-04-14T20:31:39", "upload_time_iso_8601": "2020-04-14T20:31:39.551027Z", "url": "https://files.pythonhosted.org/packages/1c/a5/e2dadffa57bbfde0e5718513afb1dd188dd68abab13bf8aa6a3c6c8c38d6/fluentql-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:01:35 2020"}