{"info": {"author": "Nik Vaessen", "author_email": "nikvaes@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# JiWER: Similarity measures for automatic speech recognition evaluation\n\nThis repository contains a simple python package to approximate the Word Error Rate (WER), Match Error Rate (MER), Word Information Lost (WIL) and Word Information Preserved (WIP) of a transcript.\nIt computes the minimum-edit distance between the ground-truth sentence and the hypothesis sentence of a speech-to-text API.\nThe minimum-edit distance is calculated using the python C module [python-Levenshtein](https://github.com/ztane/python-Levenshtein).\n\n_For a comparison between WER, MER and WIL, see: \\\nMorris, Andrew & Maier, Viktoria & Green, Phil. (2004). [From WER and RIL to MER and WIL: improved evaluation measures for connected speech recognition.](https://www.researchgate.net/publication/221478089_From_WER_and_RIL_to_MER_and_WIL_improved_evaluation_measures_for_connected_speech_recognition)_\n\n# Installation\n\nYou should be able to install this package using pip if you're using Python >= `3.5`: \n\n```bash\n$ pip install jiwer\n```\n\n# Usage\n\nThe most simple use-case is computing the edit distance between two strings:\n\n```python\nfrom jiwer import wer\n\nground_truth = \"hello world\"\nhypothesis = \"hello duck\"\n\nerror = wer(ground_truth, hypothesis)\n```\n\nSimilarly, to get other measures:\n\n```python\nimport jiwer\n\nground_truth = \"hello world\"\nhypothesis = \"hello duck\"\n\nwer = jiwer.wer(ground_truth, hypothesis)\nmer = jiwer.mer(ground_truth, hypothesis)\nwil = jiwer.wil(ground_truth, hypothesis)\n\n# faster, because `compute_measures` only needs to perform the heavy lifting once:\nmeasures = jiwer.compute_measures(ground_truth, hypothesis)\nwer = measures['wer']\nmer = measures['mer']\nwil = measures['wil']\n```\n\nYou can also compute the WER over multiple sentences:\n\n```python\nfrom jiwer import wer\n\nground_truth = [\"hello world\", \"i like monthy python\"]\nhypothesis = [\"hello duck\", \"i like python\"]\n\nerror = wer(ground_truth, hypothesis)\n```\n\nWhen the amount of ground-truth sentences and hypothesis sentences differ, a minimum alignment is done over the merged sentence:\n\n```python\nground_truth = [\"i like monthy python\", \"what do you mean, african or european swallow\"]\nhypothesis = [\"i like\", \"python\", \"what you mean\" , \"or swallow\"]\n\n# is equivalent to\n\nground_truth = \"i like monthy python what do you mean african or european swallow\"\nhypothesis = \"i like python what you mean or swallow\"\n```\n\n# pre-processing\n\nIt might be necessary to apply some pre-processing steps on either the hypothesis or\nground truth text. This is possible with the transformation API:\n\n```python\nimport jiwer\n\nground_truth = \"I like  python!\"\nhypothesis = \"i like Python?\\n\"\n\ntransformation = jiwer.Compose([\n    jiwer.ToLowerCase(),\n    jiwer.RemoveMultipleSpaces(),\n    jiwer.RemoveWhiteSpace(replace_by_space=False),\n    jiwer.SentencesToListOfWords(word_delimiter=\" \")\n]) \n\njiwer.wer(\n    ground_truth, \n    hypothesis, \n    truth_transform=transformation, \n    hypothesis_transform=transformation\n)\n```\n\nBy default, the following transformation is applied to both the ground truth and the hypothesis.\nNote that is simply to get it into the right format to calculate the WER.\n\n```python\ndefault_transformation = jiwer.Compose([\n    jiwer.RemoveMultipleSpaces(),\n    jiwer.Strip(),\n    jiwer.SentencesToListOfWords(),\n    jiwer.RemoveEmptyStrings()\n])\n```\n### Transformations\n\n#### Compose\n\n`jiwer.Compose(transformations: List[Transform])` can be used to combine multiple transformations. \n\nExample:\n```python\njiwer.Compose([\n    jiwer.RemoveMultipleSpaces(),\n    jiwer.SentencesToListOfWords()\n])\n```\n\n#### SentencesToListOfWords\n\n`jiwer.SentencesToListOfWords(word_delimiter=\" \")` can be used to transform one or more sentences into a\nlist of words. The sentences can be given as a string (one sentence) or a list of strings (one or more sentences).\n\nExample:\n```python\nsentences = [\"hi\", \"this is an example\"]\n\nprint(jiwer.SentencesToListOfWords()(sentences))\n# prints: ['hi', 'this', 'is', 'an, 'example']\n```\n\n#### RemoveSpecificWords\n\n`jiwer.RemoveSpecificWords(words_to_remove: List[str])` can be used to filter out certain words.\n\nExample:\n```python\nsentences = [\"yhe awesome\", \"the apple is not a pear\", \"yhe\"]\n\nprint(jiwer.RemoveSpecificWords([\"yhe\", \"the\", \"a\"])(sentences))\n# prints: [\"awesome\", \"apple is pear\", \"\"]\n```\n\n#### RemoveWhiteSpace\n\n`jiwer.RemoveWhiteSpace(replace_by_space=False)` can be used to filter out white space.\nThe whitespace characters are ` `, `\\t`, `\\n`, `\\r`, `\\x0b` and `\\x0c`.\nNote that by default space (` `) is also removed, which will make it impossible to split a sentence into words by using `SentencesToListOfWords`.\nThis can be prevented by replacing all whitespace with the space character. \n\nExample:\n```python\nsentences = [\"this is an example\", \"hello\\tworld\\n\\r\"]\n\nprint(jiwer.RemoveWhiteSpace()(sentences))\n# prints: [\"thisisanexample\", \"helloworld\"]\n\nprint(jiwer.RemoveWhiteSpace(replace_by_space=True)(sentences))\n# prints: [\"this is an example\", \"hello world  \"]\n# note the trailing spaces\n```\n\n#### RemovePunctuation\n\n`jiwer.RemovePunctuation()` can be used to filter out punctuation. The punctuation characters are:\n\n``'!\"#$%&\\'()*+,-./:;<=>?@[\\\\]^_`{|}~'``\n\nExample:\n```python\nsentences = [\"this is an example!\", \"hello. goodbye\"]\n\nprint(jiwer.RemovePunctuation()(sentences))\n# prints: ['this is an example', \"hello goodbye\"]\n```\n\n#### RemoveMultipleSpaces\n\n`jiwer.RemoveMultipleSpaces()` can be used to filter out multiple spaces between words.\n\nExample:\n```python\nsentences = [\"this is   an   example \", \"  hello goodbye  \", \"  \"]\n\nprint(jiwer.RemoveMultipleSpaces()(sentences))\n# prints: ['this is an example ', \" hello goodbye \", \" \"]\n# note that there are still trailing spaces\n```\n\n#### Strip\n\n`jiwer.Strip()` can be used to remove all leading and trailing spaces.\n\nExample:\n```python\nsentences = [\" this is an example \", \"  hello goodbye  \", \"  \"]\n\nprint(jiwer.Strip()(sentences))\n# prints: ['this is an example', \"hello goodbye\", \"\"]\n# note that there is an empty string left behind which might need to be cleaned up\n```\n\n\n#### RemoveEmptyStrings\n\n`jiwer.RemoveEmptyStrings()` can be used to remove empty strings.\n\nExample:\n```python\nsentences = [\"\", \"this is an example\", \" \",  \"                \"]\n\nprint(jiwer.RemoveEmptyStrings()(sentences))\n# prints: ['this is an example']\n```\n\n#### ExpandCommonEnglishContractions\n\n`jiwer.ExpandCommonEnglishContractions()` can be used to replace common contractions such as `let's` to `let us`.\n\nCurrently, this method will perform the following replacements. Note that `\u2423` is used to indicate a space (` `) to get\naround markdown rendering constrains.\n\n| Contraction   | transformed into |\n| ------------- |:----------------:|\n| `won't`       | `\u2423will not`      |\n| `can't`       | `\u2423can not`       |\n| `let's`       | `\u2423let us`        |\n| `n't`         | `\u2423not`           |\n| `'re`         | `\u2423are`           |\n| `'s`          | `\u2423is`            |\n| `'d`          | `\u2423would`         |\n| `'ll`         | `\u2423will`          |\n| `'t`          | `\u2423not`           |\n| `'ve`         | `\u2423have`          |\n| `'m`          | `\u2423am`            |\n\nExample:\n```python\nsentences = [\"she'll make sure you can't make it\", \"let's party!\"]\n\nprint(jiwer.ExpandCommonEnglishContractions()(sentences))\n# prints: [\"she will make sure you can not make it\", \"let us party!\"]\n```\n\n#### SubstituteWords\n\n`jiwer.SubstituteWords(dictionary: Mapping[str, str])` can be used to replace a word into another word. Note that\nthe whole word is matched. If the word you're attempting to substitute is a substring of another word it will \nnot be affected. \nFor example, if you're substituting `foo` into `bar`, the word `foobar` will NOT be substituted into `barbar`.\n\nExample:\n```python\nsentences = [\"you're pretty\", \"your book\", \"foobar\"]\n\nprint(jiwer.SubstituteWords({\"pretty\": \"awesome\", \"you\": \"i\", \"'re\": \" am\", 'foo': 'bar'})(sentences))\n\n# prints: [\"i am awesome\", \"your book\", \"foobar\"]\n```\n\n#### SubstituteRegexes\n\n`jiwer.SubstituteRegexes(dictionary: Mapping[str, str])` can be used to replace a substring matching a regex\n expression into another substring.\n\nExample:\n```python\nsentences = [\"is the world doomed or loved?\", \"edibles are allegedly cultivated\"]\n\n# note: the regex string \"\\b(\\w+)ed\\b\", matches every word ending in 'ed', \n# and \"\\1\" stands for the first group ('\\w+). It therefore removes 'ed' in every match.\nprint(jiwer.SubstituteRegexes({r\"doom\": r\"sacr\", r\"\\b(\\w+)ed\\b\": r\"\\1\"}))\n\n# prints: [\"is the world sacr or lov?\", \"edibles are allegedly cultivat\"]\n```\n\n#### ToLowerCase\n\n`jiwer.ToLowerCase()` can be used to convert every character into lowercase.\n\nExample:\n```python\nsentences = [\"You're PRETTY\"]\n\nprint(jiwer.ToLowerCase()(sentences))\n\n# prints: [\"you're pretty\"]\n```\n\n#### ToUpperCase\n\n`jiwer.ToLowerCase()` can be used to replace every character into uppercase.\n\nExample:\n```python\nsentences = [\"You're amazing\"]\n\nprint(jiwer.ToUpperCase()(sentences))\n\n# prints: [\"YOU'RE AMAZING\"]\n```\n\n#### RemoveKaldiNonWords\n\n`jiwer.RemoveKaldiNonWords()` can be used to remove any word between `[]` and `<>`. This can be useful when working\nwith hypotheses from the Kaldi project, which can output non-words such as `[laugh]` and `<unk>`.\n\nExample:\n```python\nsentences = [\"you <unk> like [laugh]\"]\n\nprint(jiwer.RemoveKaldiNonWords()(sentences))\n\n# prints: [\"you  like \"]\n# note the extra spaces\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jitsi/jiwer/", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "jiwer", "package_url": "https://pypi.org/project/jiwer/", "platform": "", "project_url": "https://pypi.org/project/jiwer/", "project_urls": {"Homepage": "https://github.com/jitsi/jiwer/"}, "release_url": "https://pypi.org/project/jiwer/2.1.0/", "requires_dist": ["numpy", "python-Levenshtein"], "requires_python": ">3", "summary": "Evaluate your speech-to-text system with similarity measures such as word error rate (WER)", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>JiWER: Similarity measures for automatic speech recognition evaluation</h1>\n<p>This repository contains a simple python package to approximate the Word Error Rate (WER), Match Error Rate (MER), Word Information Lost (WIL) and Word Information Preserved (WIP) of a transcript.\nIt computes the minimum-edit distance between the ground-truth sentence and the hypothesis sentence of a speech-to-text API.\nThe minimum-edit distance is calculated using the python C module <a href=\"https://github.com/ztane/python-Levenshtein\" rel=\"nofollow\">python-Levenshtein</a>.</p>\n<p><em>For a comparison between WER, MER and WIL, see: <br>\nMorris, Andrew &amp; Maier, Viktoria &amp; Green, Phil. (2004). <a href=\"https://www.researchgate.net/publication/221478089_From_WER_and_RIL_to_MER_and_WIL_improved_evaluation_measures_for_connected_speech_recognition\" rel=\"nofollow\">From WER and RIL to MER and WIL: improved evaluation measures for connected speech recognition.</a></em></p>\n<h1>Installation</h1>\n<p>You should be able to install this package using pip if you're using Python &gt;= <code>3.5</code>:</p>\n<pre>$ pip install jiwer\n</pre>\n<h1>Usage</h1>\n<p>The most simple use-case is computing the edit distance between two strings:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jiwer</span> <span class=\"kn\">import</span> <span class=\"n\">wer</span>\n\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello world\"</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello duck\"</span>\n\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wer</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n</pre>\n<p>Similarly, to get other measures:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jiwer</span>\n\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello world\"</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"s2\">\"hello duck\"</span>\n\n<span class=\"n\">wer</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">wer</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n<span class=\"n\">mer</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">mer</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n<span class=\"n\">wil</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">wil</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># faster, because `compute_measures` only needs to perform the heavy lifting once:</span>\n<span class=\"n\">measures</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">compute_measures</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n<span class=\"n\">wer</span> <span class=\"o\">=</span> <span class=\"n\">measures</span><span class=\"p\">[</span><span class=\"s1\">'wer'</span><span class=\"p\">]</span>\n<span class=\"n\">mer</span> <span class=\"o\">=</span> <span class=\"n\">measures</span><span class=\"p\">[</span><span class=\"s1\">'mer'</span><span class=\"p\">]</span>\n<span class=\"n\">wil</span> <span class=\"o\">=</span> <span class=\"n\">measures</span><span class=\"p\">[</span><span class=\"s1\">'wil'</span><span class=\"p\">]</span>\n</pre>\n<p>You can also compute the WER over multiple sentences:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">jiwer</span> <span class=\"kn\">import</span> <span class=\"n\">wer</span>\n\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"hello world\"</span><span class=\"p\">,</span> <span class=\"s2\">\"i like monthy python\"</span><span class=\"p\">]</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"hello duck\"</span><span class=\"p\">,</span> <span class=\"s2\">\"i like python\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">wer</span><span class=\"p\">(</span><span class=\"n\">ground_truth</span><span class=\"p\">,</span> <span class=\"n\">hypothesis</span><span class=\"p\">)</span>\n</pre>\n<p>When the amount of ground-truth sentences and hypothesis sentences differ, a minimum alignment is done over the merged sentence:</p>\n<pre><span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"i like monthy python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"what do you mean, african or european swallow\"</span><span class=\"p\">]</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"i like\"</span><span class=\"p\">,</span> <span class=\"s2\">\"python\"</span><span class=\"p\">,</span> <span class=\"s2\">\"what you mean\"</span> <span class=\"p\">,</span> <span class=\"s2\">\"or swallow\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># is equivalent to</span>\n\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"s2\">\"i like monthy python what do you mean african or european swallow\"</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"s2\">\"i like python what you mean or swallow\"</span>\n</pre>\n<h1>pre-processing</h1>\n<p>It might be necessary to apply some pre-processing steps on either the hypothesis or\nground truth text. This is possible with the transformation API:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jiwer</span>\n\n<span class=\"n\">ground_truth</span> <span class=\"o\">=</span> <span class=\"s2\">\"I like  python!\"</span>\n<span class=\"n\">hypothesis</span> <span class=\"o\">=</span> <span class=\"s2\">\"i like Python?</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n\n<span class=\"n\">transformation</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">ToLowerCase</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveMultipleSpaces</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveWhiteSpace</span><span class=\"p\">(</span><span class=\"n\">replace_by_space</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SentencesToListOfWords</span><span class=\"p\">(</span><span class=\"n\">word_delimiter</span><span class=\"o\">=</span><span class=\"s2\">\" \"</span><span class=\"p\">)</span>\n<span class=\"p\">])</span> \n\n<span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">wer</span><span class=\"p\">(</span>\n    <span class=\"n\">ground_truth</span><span class=\"p\">,</span> \n    <span class=\"n\">hypothesis</span><span class=\"p\">,</span> \n    <span class=\"n\">truth_transform</span><span class=\"o\">=</span><span class=\"n\">transformation</span><span class=\"p\">,</span> \n    <span class=\"n\">hypothesis_transform</span><span class=\"o\">=</span><span class=\"n\">transformation</span>\n<span class=\"p\">)</span>\n</pre>\n<p>By default, the following transformation is applied to both the ground truth and the hypothesis.\nNote that is simply to get it into the right format to calculate the WER.</p>\n<pre><span class=\"n\">default_transformation</span> <span class=\"o\">=</span> <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveMultipleSpaces</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">Strip</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SentencesToListOfWords</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveEmptyStrings</span><span class=\"p\">()</span>\n<span class=\"p\">])</span>\n</pre>\n<h3>Transformations</h3>\n<h4>Compose</h4>\n<p><code>jiwer.Compose(transformations: List[Transform])</code> can be used to combine multiple transformations.</p>\n<p>Example:</p>\n<pre><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">Compose</span><span class=\"p\">([</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveMultipleSpaces</span><span class=\"p\">(),</span>\n    <span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SentencesToListOfWords</span><span class=\"p\">()</span>\n<span class=\"p\">])</span>\n</pre>\n<h4>SentencesToListOfWords</h4>\n<p><code>jiwer.SentencesToListOfWords(word_delimiter=\" \")</code> can be used to transform one or more sentences into a\nlist of words. The sentences can be given as a string (one sentence) or a list of strings (one or more sentences).</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"hi\"</span><span class=\"p\">,</span> <span class=\"s2\">\"this is an example\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SentencesToListOfWords</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: ['hi', 'this', 'is', 'an, 'example']</span>\n</pre>\n<h4>RemoveSpecificWords</h4>\n<p><code>jiwer.RemoveSpecificWords(words_to_remove: List[str])</code> can be used to filter out certain words.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"yhe awesome\"</span><span class=\"p\">,</span> <span class=\"s2\">\"the apple is not a pear\"</span><span class=\"p\">,</span> <span class=\"s2\">\"yhe\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveSpecificWords</span><span class=\"p\">([</span><span class=\"s2\">\"yhe\"</span><span class=\"p\">,</span> <span class=\"s2\">\"the\"</span><span class=\"p\">,</span> <span class=\"s2\">\"a\"</span><span class=\"p\">])(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: [\"awesome\", \"apple is pear\", \"\"]</span>\n</pre>\n<h4>RemoveWhiteSpace</h4>\n<p><code>jiwer.RemoveWhiteSpace(replace_by_space=False)</code> can be used to filter out white space.\nThe whitespace characters are <code></code>, <code>\\t</code>, <code>\\n</code>, <code>\\r</code>, <code>\\x0b</code> and <code>\\x0c</code>.\nNote that by default space (<code></code>) is also removed, which will make it impossible to split a sentence into words by using <code>SentencesToListOfWords</code>.\nThis can be prevented by replacing all whitespace with the space character.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"this is an example\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello</span><span class=\"se\">\\t</span><span class=\"s2\">world</span><span class=\"se\">\\n\\r</span><span class=\"s2\">\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveWhiteSpace</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: [\"thisisanexample\", \"helloworld\"]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveWhiteSpace</span><span class=\"p\">(</span><span class=\"n\">replace_by_space</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: [\"this is an example\", \"hello world  \"]</span>\n<span class=\"c1\"># note the trailing spaces</span>\n</pre>\n<h4>RemovePunctuation</h4>\n<p><code>jiwer.RemovePunctuation()</code> can be used to filter out punctuation. The punctuation characters are:</p>\n<p><code>'!\"#$%&amp;\\'()*+,-./:;&lt;=&gt;?@[\\\\]^_`{|}~'</code></p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"this is an example!\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hello. goodbye\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemovePunctuation</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: ['this is an example', \"hello goodbye\"]</span>\n</pre>\n<h4>RemoveMultipleSpaces</h4>\n<p><code>jiwer.RemoveMultipleSpaces()</code> can be used to filter out multiple spaces between words.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"this is   an   example \"</span><span class=\"p\">,</span> <span class=\"s2\">\"  hello goodbye  \"</span><span class=\"p\">,</span> <span class=\"s2\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveMultipleSpaces</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: ['this is an example ', \" hello goodbye \", \" \"]</span>\n<span class=\"c1\"># note that there are still trailing spaces</span>\n</pre>\n<h4>Strip</h4>\n<p><code>jiwer.Strip()</code> can be used to remove all leading and trailing spaces.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\" this is an example \"</span><span class=\"p\">,</span> <span class=\"s2\">\"  hello goodbye  \"</span><span class=\"p\">,</span> <span class=\"s2\">\"  \"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">Strip</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: ['this is an example', \"hello goodbye\", \"\"]</span>\n<span class=\"c1\"># note that there is an empty string left behind which might need to be cleaned up</span>\n</pre>\n<h4>RemoveEmptyStrings</h4>\n<p><code>jiwer.RemoveEmptyStrings()</code> can be used to remove empty strings.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"s2\">\"this is an example\"</span><span class=\"p\">,</span> <span class=\"s2\">\" \"</span><span class=\"p\">,</span>  <span class=\"s2\">\"                \"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveEmptyStrings</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: ['this is an example']</span>\n</pre>\n<h4>ExpandCommonEnglishContractions</h4>\n<p><code>jiwer.ExpandCommonEnglishContractions()</code> can be used to replace common contractions such as <code>let's</code> to <code>let us</code>.</p>\n<p>Currently, this method will perform the following replacements. Note that <code>\u2423</code> is used to indicate a space (<code></code>) to get\naround markdown rendering constrains.</p>\n<table>\n<thead>\n<tr>\n<th>Contraction</th>\n<th align=\"center\">transformed into</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>won't</code></td>\n<td align=\"center\"><code>\u2423will not</code></td>\n</tr>\n<tr>\n<td><code>can't</code></td>\n<td align=\"center\"><code>\u2423can not</code></td>\n</tr>\n<tr>\n<td><code>let's</code></td>\n<td align=\"center\"><code>\u2423let us</code></td>\n</tr>\n<tr>\n<td><code>n't</code></td>\n<td align=\"center\"><code>\u2423not</code></td>\n</tr>\n<tr>\n<td><code>'re</code></td>\n<td align=\"center\"><code>\u2423are</code></td>\n</tr>\n<tr>\n<td><code>'s</code></td>\n<td align=\"center\"><code>\u2423is</code></td>\n</tr>\n<tr>\n<td><code>'d</code></td>\n<td align=\"center\"><code>\u2423would</code></td>\n</tr>\n<tr>\n<td><code>'ll</code></td>\n<td align=\"center\"><code>\u2423will</code></td>\n</tr>\n<tr>\n<td><code>'t</code></td>\n<td align=\"center\"><code>\u2423not</code></td>\n</tr>\n<tr>\n<td><code>'ve</code></td>\n<td align=\"center\"><code>\u2423have</code></td>\n</tr>\n<tr>\n<td><code>'m</code></td>\n<td align=\"center\"><code>\u2423am</code></td>\n</tr></tbody></table>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"she'll make sure you can't make it\"</span><span class=\"p\">,</span> <span class=\"s2\">\"let's party!\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">ExpandCommonEnglishContractions</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n<span class=\"c1\"># prints: [\"she will make sure you can not make it\", \"let us party!\"]</span>\n</pre>\n<h4>SubstituteWords</h4>\n<p><code>jiwer.SubstituteWords(dictionary: Mapping[str, str])</code> can be used to replace a word into another word. Note that\nthe whole word is matched. If the word you're attempting to substitute is a substring of another word it will\nnot be affected.\nFor example, if you're substituting <code>foo</code> into <code>bar</code>, the word <code>foobar</code> will NOT be substituted into <code>barbar</code>.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"you're pretty\"</span><span class=\"p\">,</span> <span class=\"s2\">\"your book\"</span><span class=\"p\">,</span> <span class=\"s2\">\"foobar\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SubstituteWords</span><span class=\"p\">({</span><span class=\"s2\">\"pretty\"</span><span class=\"p\">:</span> <span class=\"s2\">\"awesome\"</span><span class=\"p\">,</span> <span class=\"s2\">\"you\"</span><span class=\"p\">:</span> <span class=\"s2\">\"i\"</span><span class=\"p\">,</span> <span class=\"s2\">\"'re\"</span><span class=\"p\">:</span> <span class=\"s2\">\" am\"</span><span class=\"p\">,</span> <span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># prints: [\"i am awesome\", \"your book\", \"foobar\"]</span>\n</pre>\n<h4>SubstituteRegexes</h4>\n<p><code>jiwer.SubstituteRegexes(dictionary: Mapping[str, str])</code> can be used to replace a substring matching a regex\nexpression into another substring.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"is the world doomed or loved?\"</span><span class=\"p\">,</span> <span class=\"s2\">\"edibles are allegedly cultivated\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># note: the regex string \"\\b(\\w+)ed\\b\", matches every word ending in 'ed', </span>\n<span class=\"c1\"># and \"\\1\" stands for the first group ('\\w+). It therefore removes 'ed' in every match.</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">SubstituteRegexes</span><span class=\"p\">({</span><span class=\"sa\">r</span><span class=\"s2\">\"doom\"</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s2\">\"sacr\"</span><span class=\"p\">,</span> <span class=\"sa\">r</span><span class=\"s2\">\"\\b(\\w+)ed\\b\"</span><span class=\"p\">:</span> <span class=\"sa\">r</span><span class=\"s2\">\"\\1\"</span><span class=\"p\">}))</span>\n\n<span class=\"c1\"># prints: [\"is the world sacr or lov?\", \"edibles are allegedly cultivat\"]</span>\n</pre>\n<h4>ToLowerCase</h4>\n<p><code>jiwer.ToLowerCase()</code> can be used to convert every character into lowercase.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"You're PRETTY\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">ToLowerCase</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># prints: [\"you're pretty\"]</span>\n</pre>\n<h4>ToUpperCase</h4>\n<p><code>jiwer.ToLowerCase()</code> can be used to replace every character into uppercase.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"You're amazing\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">ToUpperCase</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># prints: [\"YOU'RE AMAZING\"]</span>\n</pre>\n<h4>RemoveKaldiNonWords</h4>\n<p><code>jiwer.RemoveKaldiNonWords()</code> can be used to remove any word between <code>[]</code> and <code>&lt;&gt;</code>. This can be useful when working\nwith hypotheses from the Kaldi project, which can output non-words such as <code>[laugh]</code> and <code>&lt;unk&gt;</code>.</p>\n<p>Example:</p>\n<pre><span class=\"n\">sentences</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"you &lt;unk&gt; like [laugh]\"</span><span class=\"p\">]</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">jiwer</span><span class=\"o\">.</span><span class=\"n\">RemoveKaldiNonWords</span><span class=\"p\">()(</span><span class=\"n\">sentences</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># prints: [\"you  like \"]</span>\n<span class=\"c1\"># note the extra spaces</span>\n</pre>\n\n          </div>"}, "last_serial": 7078467, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "2b45de63ec7929e94fb69fe816386963", "sha256": "9925ab37f917535d7c19e372b95e2e672d9d893341501ef40c9ba6082895f941"}, "downloads": -1, "filename": "jiwer-1.2.tar.gz", "has_sig": false, "md5_digest": "2b45de63ec7929e94fb69fe816386963", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5238, "upload_time": "2018-06-19T19:24:01", "upload_time_iso_8601": "2018-06-19T19:24:01.838173Z", "url": "https://files.pythonhosted.org/packages/0c/28/8c06f520bd5ed3dca20dd5d707621bd9d3ac0d6e2a61bca21d23fb7ed5b5/jiwer-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "bbf93fd940d19d3212784ccfaa03e862", "sha256": "552ad30bb294f27b342aec2bdf3747b35122c9f3ba23a61afafd923ab2da6149"}, "downloads": -1, "filename": "jiwer-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bbf93fd940d19d3212784ccfaa03e862", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5484, "upload_time": "2018-06-19T20:15:37", "upload_time_iso_8601": "2018-06-19T20:15:37.601376Z", "url": "https://files.pythonhosted.org/packages/bc/47/4121ca600ebd6d6c720542b525860f50dba16f5d50d5de157377fa97bbf4/jiwer-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f362a49078cf56e6154e111e56888921", "sha256": "4fcb663bc25a65fa8b62b5b9272990c1bc55b21c422d53d52d31ee4d479609d3"}, "downloads": -1, "filename": "jiwer-1.3.tar.gz", "has_sig": false, "md5_digest": "f362a49078cf56e6154e111e56888921", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5240, "upload_time": "2018-06-19T20:15:38", "upload_time_iso_8601": "2018-06-19T20:15:38.416884Z", "url": "https://files.pythonhosted.org/packages/e8/c6/f4eb8b7e76e04be1fc271d751636b9943d79100820ba07e61fee3e1340bc/jiwer-1.3.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "05fa7fe4aa901da3dcd66ef10c6c8180", "sha256": "5971fc85ce18502230b7e183f716a3828707999e598e5a2517df1b0a5dff78fb"}, "downloads": -1, "filename": "jiwer-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "05fa7fe4aa901da3dcd66ef10c6c8180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9710, "upload_time": "2018-12-11T13:48:31", "upload_time_iso_8601": "2018-12-11T13:48:31.742037Z", "url": "https://files.pythonhosted.org/packages/ce/05/d9fd03f30f710a4c691b03010bca2b4c3e6b1ee543a77d70c8a5ff560106/jiwer-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afb696dbe722bcb951a29bc65118787c", "sha256": "d5cfb608b168a032ae071b9f4bc8ffdf653a7e9150d7997940b72a0a6b2ec4f2"}, "downloads": -1, "filename": "jiwer-1.3.1.tar.gz", "has_sig": false, "md5_digest": "afb696dbe722bcb951a29bc65118787c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5318, "upload_time": "2018-12-11T13:48:33", "upload_time_iso_8601": "2018-12-11T13:48:33.071235Z", "url": "https://files.pythonhosted.org/packages/8e/1e/198a34b1d1dace818b9627a417cf02d9cf7fc2d4daa275c380dfea0ee728/jiwer-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "6daa939928ccc43c108d980f2d37c3e7", "sha256": "245a4a17a3c60373744af7d970d0bef8c5b6e0cc93108c755df12b30d0740be2"}, "downloads": -1, "filename": "jiwer-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6daa939928ccc43c108d980f2d37c3e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9713, "upload_time": "2019-02-24T19:41:29", "upload_time_iso_8601": "2019-02-24T19:41:29.865994Z", "url": "https://files.pythonhosted.org/packages/0d/fa/87dbadc0f584c49494c72be2d2068de2b42a36f4c93e6aeea6cb1665cadf/jiwer-1.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a25789848710a0924451a08c6c4dc5f3", "sha256": "7685d73c3fdc192badac28d004ce33e419c5fb91a2298aab311ca995485529f8"}, "downloads": -1, "filename": "jiwer-1.3.2.tar.gz", "has_sig": false, "md5_digest": "a25789848710a0924451a08c6c4dc5f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5315, "upload_time": "2019-02-24T19:41:31", "upload_time_iso_8601": "2019-02-24T19:41:31.312116Z", "url": "https://files.pythonhosted.org/packages/c7/fd/88639901195f2625941efdf2a1496c540b33901499a986fb271af28e4436/jiwer-1.3.2.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "480d237e2d541296fcd7bd64825b2539", "sha256": "ffd315298fcd12eb41c25b4b6f3576b192f24990fbf6f45c1023cd10bfa63303"}, "downloads": -1, "filename": "jiwer-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "480d237e2d541296fcd7bd64825b2539", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3", "size": 11665, "upload_time": "2020-03-22T12:38:15", "upload_time_iso_8601": "2020-03-22T12:38:15.840827Z", "url": "https://files.pythonhosted.org/packages/f4/d3/7ca8ca12d912342c68025fa80ff2a79743dae41930ce274f908e487aea8d/jiwer-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b5425b28c7c44f3739db86cdcfc5698", "sha256": "1966d27656efeb23eb97989a0cb9c756ec0e7dc68d38dd25f657ad73ff509786"}, "downloads": -1, "filename": "jiwer-2.0.0.tar.gz", "has_sig": false, "md5_digest": "0b5425b28c7c44f3739db86cdcfc5698", "packagetype": "sdist", "python_version": "source", "requires_python": ">3", "size": 6883, "upload_time": "2020-03-22T12:38:17", "upload_time_iso_8601": "2020-03-22T12:38:17.569462Z", "url": "https://files.pythonhosted.org/packages/d5/94/3ff8f9e98bb92955a1b2e21f7c371c480c7bc360b19a53e118f999c9b08e/jiwer-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "c00758dfbad9a9ea7250d6e4626a4e4d", "sha256": "02574ff82171dce9ec84e8ac1cc525af75fe679e786955e0f24883f57d745fd8"}, "downloads": -1, "filename": "jiwer-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c00758dfbad9a9ea7250d6e4626a4e4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3", "size": 12055, "upload_time": "2020-04-02T17:35:16", "upload_time_iso_8601": "2020-04-02T17:35:16.308175Z", "url": "https://files.pythonhosted.org/packages/22/58/24a55c0420e3b092becfc8418c107842dd9118e69f5266a50fdbba5860c6/jiwer-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9516ff1b6bb271ca963cfa5edaa91aa5", "sha256": "0bf84a5746415b3f63fd594aaac21e6f9ae0ff9000db6d5cb6b6012ff2c9b5fd"}, "downloads": -1, "filename": "jiwer-2.0.1.tar.gz", "has_sig": false, "md5_digest": "9516ff1b6bb271ca963cfa5edaa91aa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3", "size": 7315, "upload_time": "2020-04-02T17:35:17", "upload_time_iso_8601": "2020-04-02T17:35:17.738944Z", "url": "https://files.pythonhosted.org/packages/ae/27/ca5594c1e3e38baf7e704445c2dffefd05c38865ec88d675fa4a657aa1c2/jiwer-2.0.1.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "a3d74d058eda509a0984a0144745c05f", "sha256": "b22501c22fcdc9cd43b07220f3e52288d2d9c0f47c796594f4bb824141c20f6d"}, "downloads": -1, "filename": "jiwer-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3d74d058eda509a0984a0144745c05f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3", "size": 13220, "upload_time": "2020-04-22T18:00:59", "upload_time_iso_8601": "2020-04-22T18:00:59.962427Z", "url": "https://files.pythonhosted.org/packages/d7/2a/266d3b1e41cb9f4981f386a07a54b49070c3b0b72e21caae4cca2317ae02/jiwer-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a89650c86a433955f0697476c625fbbc", "sha256": "2b7d6fd28056728d9073898c2ca824e3802afab5ea26f885a269f04813e2c560"}, "downloads": -1, "filename": "jiwer-2.1.0.tar.gz", "has_sig": false, "md5_digest": "a89650c86a433955f0697476c625fbbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">3", "size": 11447, "upload_time": "2020-04-22T18:01:01", "upload_time_iso_8601": "2020-04-22T18:01:01.254130Z", "url": "https://files.pythonhosted.org/packages/9f/13/f38876c4ed6aa4e44a0ae5eb8335208f93df63eb1be5ff95b6f2dd7c9390/jiwer-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3d74d058eda509a0984a0144745c05f", "sha256": "b22501c22fcdc9cd43b07220f3e52288d2d9c0f47c796594f4bb824141c20f6d"}, "downloads": -1, "filename": "jiwer-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a3d74d058eda509a0984a0144745c05f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3", "size": 13220, "upload_time": "2020-04-22T18:00:59", "upload_time_iso_8601": "2020-04-22T18:00:59.962427Z", "url": "https://files.pythonhosted.org/packages/d7/2a/266d3b1e41cb9f4981f386a07a54b49070c3b0b72e21caae4cca2317ae02/jiwer-2.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a89650c86a433955f0697476c625fbbc", "sha256": "2b7d6fd28056728d9073898c2ca824e3802afab5ea26f885a269f04813e2c560"}, "downloads": -1, "filename": "jiwer-2.1.0.tar.gz", "has_sig": false, "md5_digest": "a89650c86a433955f0697476c625fbbc", "packagetype": "sdist", "python_version": "source", "requires_python": ">3", "size": 11447, "upload_time": "2020-04-22T18:01:01", "upload_time_iso_8601": "2020-04-22T18:01:01.254130Z", "url": "https://files.pythonhosted.org/packages/9f/13/f38876c4ed6aa4e44a0ae5eb8335208f93df63eb1be5ff95b6f2dd7c9390/jiwer-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:29 2020"}