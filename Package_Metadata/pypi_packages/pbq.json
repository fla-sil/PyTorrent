{"info": {"author": "Dor Amir", "author_email": "amirdor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "PBQ\n===\n\n[![PyPI version](https://badge.fury.io/py/pbq.svg)](https://badge.fury.io/py/pbq)\n\n[![Build Status](https://travis-ci.org/amirdor/pbq.svg?branch=master)](https://travis-ci.org/amirdor/pbq)\n\n[![Documentation Status](https://readthedocs.org/projects/pbq/badge/?version=latest)](https://pbq.readthedocs.io/en/latest/?badge=latest)\n\npython BiqQuery driver for easy access\n\n\n\nInstalling\n----------\n\nTo start using this package run:\n\n``` bash\n$ pip install pbq\n```\n\nFor development use, and local testing run:\n\n``` bash\n$ python setup.py install\n```\n\n\n\nDependency\n----------\n\n**bq Command-Line Tool**\n\nInstall bq cli -- the package is running bq cli in the background\n\n``` bash\nhttps://cloud.google.com/sdk/docs/\n```\n\nafter installation on a new terminal write:\n\n``` bash\n$ bq init\n$ gcloud auth application-default login\n```\n\nif you don't want to install bq cli you can run the package with the\nservice account key\n\nall you need to do it to define an environment variable like this:\n\n``` bash\n$ export GOOGLE_APPLICATION_CREDENTIALS=\"/home/user/Downloads/[FILE_NAME].json\"\n```\n\nUsage\n=====\n\nImport this package to your project and you are ready to go\n\n``` python\nfrom pbq import PBQ\nfrom pbq import Query\n```\n\n\n\nPBQ\n---\n\nThis class can have generic functions for big query manipulation and\nsave queries to tables.\n\n### some usages:\n\n#### Download table to CSV\n\n``` python\nfrom pbq import PBQ\nfrom pbq import Query\n\n# read sql file and format the query from file to string without parameters\nquery = Query.read_file('queries/query.sql')\n\n# init the query builder\npbq = PBQ(query)\n\n#run the query and get csv\npbq.to_csv('file.csv', save_query=True, **{'table': 'table', 'dataset': 'dataset'})\n```\n\nwhen setting save\\_query=True it means that you want to save your query\nto a table, and you need to send dictionary with the table name and\ndataset name.\n\nDownload table to pandas DataFrame\n\n``` python\nfrom pbq import PBQ\nfrom pbq import Query\n\n# read sql file and format the query from file to string without parameters\nquery = Query.read_file('queries/query.sql')\n\n# init the query builder\npbq = PBQ(query)\n\n#run the query and get dataframe\npbq.to_dataframe()\n```\n\n#### Simply run your query \n\n``` python\nfrom pbq import PBQ\nfrom pbq import Query\n\n# read sql file and format the query from file to string without parameters\nquery = Query.read_file('queries/query.sql')\n\n# init the query builder\npbq = PBQ(query)\n\n#run the query if you want to write insert query or alter table for example.\npbq.run_query()\n```\n\n\n#### Save query to a table\n\n``` python\nfrom pbq import PBQ\nfrom pbq import Query\n\n# read sql file and format the query from file to string without parameters\nquery = Query('select * from table')\n\n# init the query builder\npbq = PBQ(query)\npbq.save_to_table('table_name', 'dataset_name', 'project_name', replace=True, partition='20190910')\n```\n\nWhen setting replace=True it will override the table as long as the\ntable is not partitioned, if partitioned it will overwrite the\npartition.\n\npartition format is `YYYYMMDD`\n\n\n\n#### upload DataFrame to a table\n\n``` python\nimport pandas as pd\nfrom pbq import Query, PBQ\ndf = pd.DataFrame()\nPBQ.save_dataframe_to_table(df, 'table', 'dataset', 'project_id', partition='20191013', replace=False)\n```\n\n\n\nQuery\n-----\n\nThis class will format your query, check validation and return the price\nof the query\n\n### some usages:\n\n#### generate the query object with a simple query\n\n``` python\nfrom pbq import Query\nquery = Query(\"select * from table\")\n```\n\n#### get query price\n\n``` python\nfrom pbq import Query\nquery = Query(\"select * from table\")\nprint(\"the query price:\", query.price)\n# the query price: 0.312\n```\n\n#### validate query\n\n``` python\nfrom pbq import Query\nquery = Query(\"select * from table\")\nif not query.validate():\n    raise RuntimeError(\"table not valid\")\n```\n\n#### query with parameters\n\n``` python\nfrom pbq import Query\nquery = Query(\"select * from table where user_id={user_id}\", parameters={'user_id': 123})\nprint(query.query)\n# select * from table where user_id=123\n```\n\n#### read the query from file with parameters\n\n``` python\nfrom pbq import Query\nquery = Query.read_file('file_path.sql', parameters={'user_id':123})\nprint(query.query)\n# select * from table where user_id=123\n```\n\n\n-   Free software: MIT license\n-   Documentation: <https://pbq.readthedocs.io>.\n\n<br><br>History\n=======\n\n0.1.0 (2019-10-03)\n------------------\n\n* First release on PyPI.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/amirdor/pbq", "keywords": "pbq", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "pbq", "package_url": "https://pypi.org/project/pbq/", "platform": "", "project_url": "https://pypi.org/project/pbq/", "project_urls": {"Homepage": "https://github.com/amirdor/pbq"}, "release_url": "https://pypi.org/project/pbq/0.1.8/", "requires_dist": ["google-api-core (==1.14.*)", "google-cloud-bigquery-storage (==0.7.*)", "google-cloud-bigquery (==1.20.*)", "google-cloud-core (==1.0.*)", "pandas (==0.25.*)", "pyarrow (==0.14.*)", "fastparquet (==0.3.*)", "requests (==2.22.*)"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "python bigquery driver for easy access", "version": "0.1.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PBQ</h1>\n<p><a href=\"https://badge.fury.io/py/pbq\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f56c575a6dca74e2bcacf03913420f6abdb3a17/68747470733a2f2f62616467652e667572792e696f2f70792f7062712e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/amirdor/pbq\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a6f1c95253918386c2c691076d595ed47bae9527/68747470733a2f2f7472617669732d63692e6f72672f616d6972646f722f7062712e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><a href=\"https://pbq.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a62c5bed89a5bf3e0b8e0dd087d746d6a0ba17f3/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7062712f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>python BiqQuery driver for easy access</p>\n<h2>Installing</h2>\n<p>To start using this package run:</p>\n<pre>$ pip install pbq\n</pre>\n<p>For development use, and local testing run:</p>\n<pre>$ python setup.py install\n</pre>\n<h2>Dependency</h2>\n<p><strong>bq Command-Line Tool</strong></p>\n<p>Install bq cli -- the package is running bq cli in the background</p>\n<pre>https://cloud.google.com/sdk/docs/\n</pre>\n<p>after installation on a new terminal write:</p>\n<pre>$ bq init\n$ gcloud auth application-default login\n</pre>\n<p>if you don't want to install bq cli you can run the package with the\nservice account key</p>\n<p>all you need to do it to define an environment variable like this:</p>\n<pre>$ <span class=\"nb\">export</span> <span class=\"nv\">GOOGLE_APPLICATION_CREDENTIALS</span><span class=\"o\">=</span><span class=\"s2\">\"/home/user/Downloads/[FILE_NAME].json\"</span>\n</pre>\n<h1>Usage</h1>\n<p>Import this package to your project and you are ready to go</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">PBQ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n</pre>\n<h2>PBQ</h2>\n<p>This class can have generic functions for big query manipulation and\nsave queries to tables.</p>\n<h3>some usages:</h3>\n<h4>Download table to CSV</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">PBQ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"c1\"># read sql file and format the query from file to string without parameters</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s1\">'queries/query.sql'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init the query builder</span>\n<span class=\"n\">pbq</span> <span class=\"o\">=</span> <span class=\"n\">PBQ</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#run the query and get csv</span>\n<span class=\"n\">pbq</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'file.csv'</span><span class=\"p\">,</span> <span class=\"n\">save_query</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"p\">{</span><span class=\"s1\">'table'</span><span class=\"p\">:</span> <span class=\"s1\">'table'</span><span class=\"p\">,</span> <span class=\"s1\">'dataset'</span><span class=\"p\">:</span> <span class=\"s1\">'dataset'</span><span class=\"p\">})</span>\n</pre>\n<p>when setting save_query=True it means that you want to save your query\nto a table, and you need to send dictionary with the table name and\ndataset name.</p>\n<p>Download table to pandas DataFrame</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">PBQ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"c1\"># read sql file and format the query from file to string without parameters</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s1\">'queries/query.sql'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init the query builder</span>\n<span class=\"n\">pbq</span> <span class=\"o\">=</span> <span class=\"n\">PBQ</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#run the query and get dataframe</span>\n<span class=\"n\">pbq</span><span class=\"o\">.</span><span class=\"n\">to_dataframe</span><span class=\"p\">()</span>\n</pre>\n<h4>Simply run your query</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">PBQ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"c1\"># read sql file and format the query from file to string without parameters</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s1\">'queries/query.sql'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init the query builder</span>\n<span class=\"n\">pbq</span> <span class=\"o\">=</span> <span class=\"n\">PBQ</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#run the query if you want to write insert query or alter table for example.</span>\n<span class=\"n\">pbq</span><span class=\"o\">.</span><span class=\"n\">run_query</span><span class=\"p\">()</span>\n</pre>\n<h4>Save query to a table</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">PBQ</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n\n<span class=\"c1\"># read sql file and format the query from file to string without parameters</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s1\">'select * from table'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># init the query builder</span>\n<span class=\"n\">pbq</span> <span class=\"o\">=</span> <span class=\"n\">PBQ</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">pbq</span><span class=\"o\">.</span><span class=\"n\">save_to_table</span><span class=\"p\">(</span><span class=\"s1\">'table_name'</span><span class=\"p\">,</span> <span class=\"s1\">'dataset_name'</span><span class=\"p\">,</span> <span class=\"s1\">'project_name'</span><span class=\"p\">,</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">partition</span><span class=\"o\">=</span><span class=\"s1\">'20190910'</span><span class=\"p\">)</span>\n</pre>\n<p>When setting replace=True it will override the table as long as the\ntable is not partitioned, if partitioned it will overwrite the\npartition.</p>\n<p>partition format is <code>YYYYMMDD</code></p>\n<h4>upload DataFrame to a table</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span><span class=\"p\">,</span> <span class=\"n\">PBQ</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n<span class=\"n\">PBQ</span><span class=\"o\">.</span><span class=\"n\">save_dataframe_to_table</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"s1\">'table'</span><span class=\"p\">,</span> <span class=\"s1\">'dataset'</span><span class=\"p\">,</span> <span class=\"s1\">'project_id'</span><span class=\"p\">,</span> <span class=\"n\">partition</span><span class=\"o\">=</span><span class=\"s1\">'20191013'</span><span class=\"p\">,</span> <span class=\"n\">replace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<h2>Query</h2>\n<p>This class will format your query, check validation and return the price\nof the query</p>\n<h3>some usages:</h3>\n<h4>generate the query object with a simple query</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s2\">\"select * from table\"</span><span class=\"p\">)</span>\n</pre>\n<h4>get query price</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s2\">\"select * from table\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"the query price:\"</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">price</span><span class=\"p\">)</span>\n<span class=\"c1\"># the query price: 0.312</span>\n</pre>\n<h4>validate query</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s2\">\"select * from table\"</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">validate</span><span class=\"p\">():</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">RuntimeError</span><span class=\"p\">(</span><span class=\"s2\">\"table not valid\"</span><span class=\"p\">)</span>\n</pre>\n<h4>query with parameters</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"s2\">\"select * from table where user_id=</span><span class=\"si\">{user_id}</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'user_id'</span><span class=\"p\">:</span> <span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"c1\"># select * from table where user_id=123</span>\n</pre>\n<h4>read the query from file with parameters</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pbq</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"o\">.</span><span class=\"n\">read_file</span><span class=\"p\">(</span><span class=\"s1\">'file_path.sql'</span><span class=\"p\">,</span> <span class=\"n\">parameters</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'user_id'</span><span class=\"p\">:</span><span class=\"mi\">123</span><span class=\"p\">})</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"c1\"># select * from table where user_id=123</span>\n</pre>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"https://pbq.readthedocs.io\" rel=\"nofollow\">https://pbq.readthedocs.io</a>.</li>\n</ul>\n<h1><br><br>History</h1>\n<h2>0.1.0 (2019-10-03)</h2>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n\n          </div>"}, "last_serial": 6492747, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "1aff2e296563d95526a146f79b08db10", "sha256": "b3cb1e58f924b43770b6b4f347d795f0ba339eed40c81b0ac5225c4dd9e5ac05"}, "downloads": -1, "filename": "pbq-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1aff2e296563d95526a146f79b08db10", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8363, "upload_time": "2019-10-17T11:22:16", "upload_time_iso_8601": "2019-10-17T11:22:16.998155Z", "url": "https://files.pythonhosted.org/packages/ac/d7/f91ef5cf23735e5f63f065eb8cdd914cd471c121c8c09f315dc7541b611e/pbq-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1e546ff758c1ce891402972d5a2c2eb", "sha256": "46be870699795ba976b57b3e9b15f0dea669b6da11145949f9b74da6dab2a100"}, "downloads": -1, "filename": "pbq-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e1e546ff758c1ce891402972d5a2c2eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 15992, "upload_time": "2019-10-17T11:22:18", "upload_time_iso_8601": "2019-10-17T11:22:18.922783Z", "url": "https://files.pythonhosted.org/packages/6d/ba/1de00d1beda2384640ce482a17aca96e00ef001aa4d736abcd4a0ef1d6db/pbq-0.1.1.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "80205f5d840c71e4e15e05a2702f5297", "sha256": "0b1280a0ab00b8e90451bc05a48c3a76bd7361310aaf0b2dc6a26ac2554469d5"}, "downloads": -1, "filename": "pbq-0.1.7-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "80205f5d840c71e4e15e05a2702f5297", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8947, "upload_time": "2019-12-02T08:16:18", "upload_time_iso_8601": "2019-12-02T08:16:18.286080Z", "url": "https://files.pythonhosted.org/packages/23/b8/feff01dc495f8c2b918a87a9b9d63babf48859650f945c90b63c22cc3ed5/pbq-0.1.7-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "02b286109e758f70ed2c4ad9b4305045", "sha256": "787dacc0ae42bb5e24e6f2f6ae1cd954a00c3df63001c15f905b3201d6a54fa2"}, "downloads": -1, "filename": "pbq-0.1.7.tar.gz", "has_sig": false, "md5_digest": "02b286109e758f70ed2c4ad9b4305045", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 16561, "upload_time": "2019-12-02T08:16:20", "upload_time_iso_8601": "2019-12-02T08:16:20.131818Z", "url": "https://files.pythonhosted.org/packages/de/9a/1f89a6f47092c40d43d47a07e9e68930b529c4a3d109934373da254af13f/pbq-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "0f6ac738833b364880948beabffefb90", "sha256": "3ac865f43994fa738552b49b5a200979bdd642cd7bc927b9aba3eacbaab06735"}, "downloads": -1, "filename": "pbq-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f6ac738833b364880948beabffefb90", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9075, "upload_time": "2020-01-21T08:43:30", "upload_time_iso_8601": "2020-01-21T08:43:30.717149Z", "url": "https://files.pythonhosted.org/packages/c3/ac/7e9dc71d23c49292d941657f9819bf10465a32f120ae0200f4b2593eca52/pbq-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cd85a884cddbb88dd3a6a3beb059acd", "sha256": "c783592a2a8eb9c6f06acd589175de5f161fa4e2a819b2ac6b7e2cf7cae6165f"}, "downloads": -1, "filename": "pbq-0.1.8.tar.gz", "has_sig": false, "md5_digest": "8cd85a884cddbb88dd3a6a3beb059acd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 16731, "upload_time": "2020-01-21T08:43:32", "upload_time_iso_8601": "2020-01-21T08:43:32.476288Z", "url": "https://files.pythonhosted.org/packages/d0/16/a89c09890cc929437e47a80d68764e4c8eb0fc53e2941cc5e9018cb6b01f/pbq-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0f6ac738833b364880948beabffefb90", "sha256": "3ac865f43994fa738552b49b5a200979bdd642cd7bc927b9aba3eacbaab06735"}, "downloads": -1, "filename": "pbq-0.1.8-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f6ac738833b364880948beabffefb90", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9075, "upload_time": "2020-01-21T08:43:30", "upload_time_iso_8601": "2020-01-21T08:43:30.717149Z", "url": "https://files.pythonhosted.org/packages/c3/ac/7e9dc71d23c49292d941657f9819bf10465a32f120ae0200f4b2593eca52/pbq-0.1.8-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8cd85a884cddbb88dd3a6a3beb059acd", "sha256": "c783592a2a8eb9c6f06acd589175de5f161fa4e2a819b2ac6b7e2cf7cae6165f"}, "downloads": -1, "filename": "pbq-0.1.8.tar.gz", "has_sig": false, "md5_digest": "8cd85a884cddbb88dd3a6a3beb059acd", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 16731, "upload_time": "2020-01-21T08:43:32", "upload_time_iso_8601": "2020-01-21T08:43:32.476288Z", "url": "https://files.pythonhosted.org/packages/d0/16/a89c09890cc929437e47a80d68764e4c8eb0fc53e2941cc5e9018cb6b01f/pbq-0.1.8.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:35 2020"}