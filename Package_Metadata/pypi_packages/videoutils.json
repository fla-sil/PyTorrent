{"info": {"author": "Rahul Somani", "author_email": "rsomani95@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "<!--\n\n#################################################\n### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###\n#################################################\n# file to edit: nbs/index.ipynb\n# command to build the docs after a change: nbdev_build_docs\n\n-->\n\n# Read Videos Using OpenCV\n\n> `readvideo` lets you get rid of writing boilerplate code for reading video and adds some convenience on top of that.\n\n\n## Install\n\n`pip install readvideo`\n\n## How to use\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nfrom videoutils.io import read_video, as_tensor, bgr2rgb, resize\nfname = 'files/interstellar-waves-edit.mp4'\n```\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname)\nlen(x)\nx[0].shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    1578\n\n\n\n\n\n\n    (480, 720, 3)\n\n\n\n</div>\n\n</div>\n\nBy default, `read_video` returns a list of `np.array`s of shape `(height, width, channels)`. <br>\nHowever, you can define precisely which frames you'd like to grab in a number of ways. This is done by using either the {`start_idx`, `end_idx`, `frame_stride`} or `target_frames` arguments. \n\n### Grab the first `n` frames\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nn = 50\nx  = read_video(fname, end_idx=n)\nx2 = read_video(fname, target_frames=(0,n))\n\nlen(x)\nlen(x) == len(x2)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    50\n\n\n\n\n\n\n    True\n\n\n\n</div>\n\n</div>\n\n---\n\n### Grab every `n`th frame\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nn=5\nx = read_video(fname, frame_stride=n, end_idx=50)\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    10\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, frame_stride=50) # total frames = 1578\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    32\n\n\n\n</div>\n\n</div>\n\n---\n\n### Grab frames at specific indices\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[10, 50, 76, 420])\nlen(x)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    4\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx  = read_video(fname, start_idx=10, end_idx=15)\nx2 = read_video(fname, target_frames=(10, 15))\n\nlen(x)\nlen(x) == len(x2)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    5\n\n\n\n\n\n\n    True\n\n\n\n</div>\n\n</div>\n\n---\n\n### Return as `torch.Tensor`\n\nYou can pass any function that transforms a `np.array` of shape `(height, width, channels)` to the `apply` argument. `readvideo` provides `as_tensor` for convenience -- if you use this function, `read_video` will automatically call `torch.stack` and return the collection of frames as a 4D tensor, else it will return a `list` of 3D arrays/tensors.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nimport torch\nfrom functools import partial\n\nx  = read_video(fname, end_idx=10, apply=as_tensor)\nx2 = read_video(fname, end_idx=10, apply=partial(as_tensor, normalise=True))\nx2 = torch.stack(x2) # since we aren't using `as_tensor`, but a partial (thus different) function\n\nx.shape\nx.shape == x2.shape\nx.mean(), x2.mean()\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([10, 480, 720, 3])\n\n\n\n\n\n\n    True\n\n\n\n\n\n\n    (tensor(36.8276), tensor(0.1443))\n\n\n\n</div>\n\n</div>\n\n---\n\n### Resize Video\n\n`read_video` has an optional argument `resize_func` which is meant to be a function that resizes a `np.array` of shape `(height, width, channels)`. <br>\nYou can use the predefined `resize` function or pass in a custom function here.\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nhelp(resize)\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n    Help on function resize in module videoutils.utils:\n\n    resize(image, height=None, width=None, keep_aspect_ratio=True, scale_factor=1.0)\n        Resize by `scale_factor` if preserving aspect ratio else\n        resize by custom `height` and `width`\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[0,1,2], apply=as_tensor,\n               resize_func=partial(resize, scale_factor=2.))\nx.shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([3, 960, 1440, 3])\n\n\n\n</div>\n\n</div>\n<div class=\"codecell\" markdown=\"1\">\n<div class=\"input_area\" markdown=\"1\">\n\n```python\nx = read_video(fname, target_frames=[0,1,2], apply=as_tensor,\n               resize_func=partial(resize, width=200, height=100, keep_aspect_ratio=False))\nx.shape\n```\n\n</div>\n<div class=\"output_area\" markdown=\"1\">\n\n\n\n\n    torch.Size([3, 100, 200, 3])\n\n\n\n</div>\n\n</div>\n\n---\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rsomani95/videoutils", "keywords": "cv2 openCV video utilities read helper data", "license": "Apache Software License 2.0", "maintainer": "", "maintainer_email": "", "name": "videoutils", "package_url": "https://pypi.org/project/videoutils/", "platform": "", "project_url": "https://pypi.org/project/videoutils/", "project_urls": {"Homepage": "https://github.com/rsomani95/videoutils"}, "release_url": "https://pypi.org/project/videoutils/0.0.3/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Skip writing boilerplate OpenCV code for reading videos, and then some", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Read Videos Using OpenCV</h1>\n<blockquote>\n<p><code>readvideo</code> lets you get rid of writing boilerplate code for reading video and adds some convenience on top of that.</p>\n</blockquote>\n<h2>Install</h2>\n<p><code>pip install readvideo</code></p>\n<h2>How to use</h2>\n<div>\n<div>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">videoutils.io</span> <span class=\"kn\">import</span> <span class=\"n\">read_video</span><span class=\"p\">,</span> <span class=\"n\">as_tensor</span><span class=\"p\">,</span> <span class=\"n\">bgr2rgb</span><span class=\"p\">,</span> <span class=\"n\">resize</span>\n<span class=\"n\">fname</span> <span class=\"o\">=</span> <span class=\"s1\">'files/interstellar-waves-edit.mp4'</span>\n</pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n</div>\n<div>\n<pre><code>1578\n\n\n\n\n\n\n(480, 720, 3)\n</code></pre>\n</div>\n</div>\n<p>By default, <code>read_video</code> returns a list of <code>np.array</code>s of shape <code>(height, width, channels)</code>. <br>\nHowever, you can define precisely which frames you'd like to grab in a number of ways. This is done by using either the {<code>start_idx</code>, <code>end_idx</code>, <code>frame_stride</code>} or <code>target_frames</code> arguments.</p>\n<h3>Grab the first <code>n</code> frames</h3>\n<div>\n<div>\n<pre><span class=\"n\">n</span> <span class=\"o\">=</span> <span class=\"mi\">50</span>\n<span class=\"n\">x</span>  <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">end_idx</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">)</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">target_frames</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">n</span><span class=\"p\">))</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>50\n\n\n\n\n\n\nTrue\n</code></pre>\n</div>\n</div>\n<hr>\n<h3>Grab every <code>n</code>th frame</h3>\n<div>\n<div>\n<pre><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span>\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">frame_stride</span><span class=\"o\">=</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">end_idx</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>10\n</code></pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">frame_stride</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span> <span class=\"c1\"># total frames = 1578</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>32\n</code></pre>\n</div>\n</div>\n<hr>\n<h3>Grab frames at specific indices</h3>\n<div>\n<div>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">target_frames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">76</span><span class=\"p\">,</span> <span class=\"mi\">420</span><span class=\"p\">])</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>4\n</code></pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">x</span>  <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">start_idx</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">end_idx</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">)</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">target_frames</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">15</span><span class=\"p\">))</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>5\n\n\n\n\n\n\nTrue\n</code></pre>\n</div>\n</div>\n<hr>\n<h3>Return as <code>torch.Tensor</code></h3>\n<p>You can pass any function that transforms a <code>np.array</code> of shape <code>(height, width, channels)</code> to the <code>apply</code> argument. <code>readvideo</code> provides <code>as_tensor</code> for convenience -- if you use this function, <code>read_video</code> will automatically call <code>torch.stack</code> and return the collection of frames as a 4D tensor, else it will return a <code>list</code> of 3D arrays/tensors.</p>\n<div>\n<div>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">partial</span>\n\n<span class=\"n\">x</span>  <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">end_idx</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"n\">as_tensor</span><span class=\"p\">)</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">end_idx</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">as_tensor</span><span class=\"p\">,</span> <span class=\"n\">normalise</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">x2</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"p\">(</span><span class=\"n\">x2</span><span class=\"p\">)</span> <span class=\"c1\"># since we aren't using `as_tensor`, but a partial (thus different) function</span>\n\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span> <span class=\"o\">==</span> <span class=\"n\">x2</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">(),</span> <span class=\"n\">x2</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div>\n<pre><code>torch.Size([10, 480, 720, 3])\n\n\n\n\n\n\nTrue\n\n\n\n\n\n\n(tensor(36.8276), tensor(0.1443))\n</code></pre>\n</div>\n</div>\n<hr>\n<h3>Resize Video</h3>\n<p><code>read_video</code> has an optional argument <code>resize_func</code> which is meant to be a function that resizes a <code>np.array</code> of shape <code>(height, width, channels)</code>. <br>\nYou can use the predefined <code>resize</code> function or pass in a custom function here.</p>\n<div>\n<div>\n<pre><span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">resize</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div>\n<pre><code>Help on function resize in module videoutils.utils:\n\nresize(image, height=None, width=None, keep_aspect_ratio=True, scale_factor=1.0)\n    Resize by `scale_factor` if preserving aspect ratio else\n    resize by custom `height` and `width`\n</code></pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">target_frames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"n\">as_tensor</span><span class=\"p\">,</span>\n               <span class=\"n\">resize_func</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">resize</span><span class=\"p\">,</span> <span class=\"n\">scale_factor</span><span class=\"o\">=</span><span class=\"mf\">2.</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n</div>\n<div>\n<pre><code>torch.Size([3, 960, 1440, 3])\n</code></pre>\n</div>\n</div>\n<div>\n<div>\n<pre><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">read_video</span><span class=\"p\">(</span><span class=\"n\">fname</span><span class=\"p\">,</span> <span class=\"n\">target_frames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">apply</span><span class=\"o\">=</span><span class=\"n\">as_tensor</span><span class=\"p\">,</span>\n               <span class=\"n\">resize_func</span><span class=\"o\">=</span><span class=\"n\">partial</span><span class=\"p\">(</span><span class=\"n\">resize</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">keep_aspect_ratio</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n<span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">shape</span>\n</pre>\n</div>\n<div>\n<pre><code>torch.Size([3, 100, 200, 3])\n</code></pre>\n</div>\n</div>\n<hr>\n\n          </div>"}, "last_serial": 6439920, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "7a7b405c9b36f1a34a11773ddcdb201b", "sha256": "bafc40c0f5cd43dc84df95e218bdc54ac77b4299e956474903e4e1a0a183ac14"}, "downloads": -1, "filename": "videoutils-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7a7b405c9b36f1a34a11773ddcdb201b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10413, "upload_time": "2020-01-12T14:28:58", "upload_time_iso_8601": "2020-01-12T14:28:58.151297Z", "url": "https://files.pythonhosted.org/packages/ac/37/77056972bf9342f45c95e5db94799225dd0de3ff37724ad9760b5a4875a9/videoutils-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c742cf1769c600f1275f555184db94d", "sha256": "80c839a51e08f311f3484d6757724cbb44ca8936c649619a00782299fdc401b3"}, "downloads": -1, "filename": "videoutils-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6c742cf1769c600f1275f555184db94d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5890, "upload_time": "2020-01-12T14:29:00", "upload_time_iso_8601": "2020-01-12T14:29:00.009039Z", "url": "https://files.pythonhosted.org/packages/fd/57/14e847d1a5753cbe4b46f15404b64f568271a29c5c4820c40186d3525321/videoutils-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7a7b405c9b36f1a34a11773ddcdb201b", "sha256": "bafc40c0f5cd43dc84df95e218bdc54ac77b4299e956474903e4e1a0a183ac14"}, "downloads": -1, "filename": "videoutils-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7a7b405c9b36f1a34a11773ddcdb201b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10413, "upload_time": "2020-01-12T14:28:58", "upload_time_iso_8601": "2020-01-12T14:28:58.151297Z", "url": "https://files.pythonhosted.org/packages/ac/37/77056972bf9342f45c95e5db94799225dd0de3ff37724ad9760b5a4875a9/videoutils-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c742cf1769c600f1275f555184db94d", "sha256": "80c839a51e08f311f3484d6757724cbb44ca8936c649619a00782299fdc401b3"}, "downloads": -1, "filename": "videoutils-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6c742cf1769c600f1275f555184db94d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5890, "upload_time": "2020-01-12T14:29:00", "upload_time_iso_8601": "2020-01-12T14:29:00.009039Z", "url": "https://files.pythonhosted.org/packages/fd/57/14e847d1a5753cbe4b46f15404b64f568271a29c5c4820c40186d3525321/videoutils-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:13 2020"}