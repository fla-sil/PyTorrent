{"info": {"author": "Konrad Ja\u0142owiecki <dexter2206@gmail.com>", "author_email": "dexter2206@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "choke: simple implementation of throttling mechanism\n====================================================\n\n|License: MIT| |Build Status|\n\n**choke** is a package implementing a trivial to use general purpose throttling mechanism. The basic workflow with **choke** is as follows:\n\n1. Create manager - an object responsible for keeping track of timestamps when some events (think: calls to your functions) occur.\n2. Instruct manager to \"choke\" some callables, i.e. define maximum number of calls that can occur per given time window.\n3. Use your callables as usual, keeping in mind that when the above defined limit is exceeded, the choked callable will raise `CallLimitExceededError`.\n\nHere is an example containing everything you need to use **choke**:\n\n.. code:: python\n\n    from time import sleep\n    from redis import StrictRedis\n    from choke import RedisChokeManager, CallLimitExceededError\n\n    REDIS = StrictRedis() # Tweak this to reflect your setup            \n    CHOKE_MANAGER = RedisChokeManager(redis=REDIS)\n\n    # Example configuration: enforce limit of no more than 10 calls in two seconds window\n    @CHOKE_MANAGER.choke(limit=10, window_length=2)\n    def foo(x, y):\n        \"\"\"Just print something to show that foo was called.\"\"\"\n        print(f'foo called with ({x}, {y})')\n\n    if __name__ == '__main__':\n        # We expect pattern of 10 successes followed by 10 failures followed again by 10 successes\n        # Some deviations from this pattern may obviously occur as calling foo takes nonzero time\n        for i in range(30):\n            try:\n                foo(i, y=i ** 2)\n            except CallLimitExceededError:\n                print('Foo not called. Limit exceeded!')\n            sleep(0.1)\n\n\n.. |License: MIT| image:: https://img.shields.io/badge/License-MIT-yellow.svg\n   :target: https://opensource.org/licenses/MIT\n.. |Build Status| image:: https://travis-ci.org/dexter2206/choke.svg?branch=master\n   :target: https://travis-ci.org/dexter2206/choke", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "throttling redis limit", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "choke", "package_url": "https://pypi.org/project/choke/", "platform": "Linux", "project_url": "https://pypi.org/project/choke/", "project_urls": null, "release_url": "https://pypi.org/project/choke/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "choke: simple implementation of throttling mechanism.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a> <a href=\"https://travis-ci.org/dexter2206/choke\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea3bbf286369546cb515e8c9abb513ec7ce99371/68747470733a2f2f7472617669732d63692e6f72672f646578746572323230362f63686f6b652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><strong>choke</strong> is a package implementing a trivial to use general purpose throttling mechanism. The basic workflow with <strong>choke</strong> is as follows:</p>\n<ol>\n<li>Create manager - an object responsible for keeping track of timestamps when some events (think: calls to your functions) occur.</li>\n<li>Instruct manager to \u201cchoke\u201d some callables, i.e. define maximum number of calls that can occur per given time window.</li>\n<li>Use your callables as usual, keeping in mind that when the above defined limit is exceeded, the choked callable will raise <cite>CallLimitExceededError</cite>.</li>\n</ol>\n<p>Here is an example containing everything you need to use <strong>choke</strong>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">redis</span> <span class=\"kn\">import</span> <span class=\"n\">StrictRedis</span>\n<span class=\"kn\">from</span> <span class=\"nn\">choke</span> <span class=\"kn\">import</span> <span class=\"n\">RedisChokeManager</span><span class=\"p\">,</span> <span class=\"n\">CallLimitExceededError</span>\n\n<span class=\"n\">REDIS</span> <span class=\"o\">=</span> <span class=\"n\">StrictRedis</span><span class=\"p\">()</span> <span class=\"c1\"># Tweak this to reflect your setup</span>\n<span class=\"n\">CHOKE_MANAGER</span> <span class=\"o\">=</span> <span class=\"n\">RedisChokeManager</span><span class=\"p\">(</span><span class=\"n\">redis</span><span class=\"o\">=</span><span class=\"n\">REDIS</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example configuration: enforce limit of no more than 10 calls in two seconds window</span>\n<span class=\"nd\">@CHOKE_MANAGER</span><span class=\"o\">.</span><span class=\"n\">choke</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">window_length</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Just print something to show that foo was called.\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'foo called with (</span><span class=\"si\">{</span><span class=\"n\">x</span><span class=\"si\">}</span><span class=\"s1\">, </span><span class=\"si\">{</span><span class=\"n\">y</span><span class=\"si\">}</span><span class=\"s1\">)'</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"c1\"># We expect pattern of 10 successes followed by 10 failures followed again by 10 successes</span>\n    <span class=\"c1\"># Some deviations from this pattern may obviously occur as calling foo takes nonzero time</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"n\">i</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">CallLimitExceededError</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Foo not called. Limit exceeded!'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5328446, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2f25ec3dbcfa079fafebae85ac1bee61", "sha256": "3721be300780efc5b0d1f8567ca8ee7c6c2807e1c03f2455a9e935f331cdecd1"}, "downloads": -1, "filename": "choke-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2f25ec3dbcfa079fafebae85ac1bee61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6922, "upload_time": "2019-03-14T01:54:30", "upload_time_iso_8601": "2019-03-14T01:54:30.201229Z", "url": "https://files.pythonhosted.org/packages/55/11/6b4566dbfb7940e65ae729f2631eabd9b16cd783e98390843be985878181/choke-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0e30eb75cfeecf656fd0916208943171", "sha256": "6b640f6a6e85d88b37afad764db29b0c4a4552956d0f7f38e9a674ef3dedd803"}, "downloads": -1, "filename": "choke-0.1.1.tar.gz", "has_sig": false, "md5_digest": "0e30eb75cfeecf656fd0916208943171", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7064, "upload_time": "2019-05-26T20:36:54", "upload_time_iso_8601": "2019-05-26T20:36:54.667541Z", "url": "https://files.pythonhosted.org/packages/90/bb/f4876e218fcc646cc4cf029aa51bda0bd04ee3c6ab4af9042bd42acafad0/choke-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "512d4b8026a965ad0f9c61f3136c10ac", "sha256": "73312fe55de02f838c2b4c2b0f4faae549ef97dbe78efd6e50e5377ac74bf619"}, "downloads": -1, "filename": "choke-0.1.2.tar.gz", "has_sig": false, "md5_digest": "512d4b8026a965ad0f9c61f3136c10ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7054, "upload_time": "2019-05-28T19:02:24", "upload_time_iso_8601": "2019-05-28T19:02:24.982927Z", "url": "https://files.pythonhosted.org/packages/10/15/3e465780f8f042a45c636c86efd46288c16a0a5fd6304bf4cfb2c18d98ac/choke-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "512d4b8026a965ad0f9c61f3136c10ac", "sha256": "73312fe55de02f838c2b4c2b0f4faae549ef97dbe78efd6e50e5377ac74bf619"}, "downloads": -1, "filename": "choke-0.1.2.tar.gz", "has_sig": false, "md5_digest": "512d4b8026a965ad0f9c61f3136c10ac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7054, "upload_time": "2019-05-28T19:02:24", "upload_time_iso_8601": "2019-05-28T19:02:24.982927Z", "url": "https://files.pythonhosted.org/packages/10/15/3e465780f8f042a45c636c86efd46288c16a0a5fd6304bf4cfb2c18d98ac/choke-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:31 2020"}