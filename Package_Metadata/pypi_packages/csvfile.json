{"info": {"author": "Imbolc", "author_email": "imbolc@imbolc.name", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "csvfile\n=======\nA simple way of working with csv files.\n\nYou can use:\n\n```python\ndata = csvfile.load(\"my-data.csv\")\ndata[0].field = \"new value\"\ndata.sync()\n```\n\nInstead of:\n\n```python\ndata = []\nwith open(\"my-data.csv\") as f:\n    reader = csv.DictReader(f)\n    fieldnames = reader.fieldnames\n    for row in reader:\n        data.append(row)\n\ndata[0][\"field\"] = \"new value\"\n\nwith open(\"my-data.csv, \"w\") as f:\n    writer = csv.DictWriter(f, fieldnames=fieldnames)\n    writer.writeheader()\n    writer.writerows(data)\n```\n\nAlso you can declaratively define types in a table's header:\n\n```python\n>>> print(open(\"/tmp/csvfile_test.csv\").read())\nlanguage,created:i\npython,1991\njs,1995\nrust,2010\n\n>>> pprint(csvfile.load(\"/tmp/csvfile_test.csv\"))\n[{'created': 1991, 'language': 'python'},\n {'created': 1995, 'language': 'js'},\n {'created': 2010, 'language': 'rust'}]\n```\n\nNotice, that `created` is automatically converted into integer as we typed it in\nthe header as `created:i`.\n\n\nBuilt-in types\n--------------\n\n| Type     | Alias | Comment                                                                                                                                                                                                     |\n|----------|-------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| str      | s     | default, if no type specified                                                                                                                                                                               |\n| bool     | b     | `reader` can understand next pairs as `True / False` case-insensitevely: `true / false`, `t / f`, `1 / 0`, `y / n`, `yes / no`, `on / off`, but the `writer` will always stringify them into `true / false` |\n| int      | i     |                                                                                                                                                                                                             |\n| float    | f     |                                                                                                                                                                                                             |\n| decimal  | n     |                                                                                                                                                                                                             |\n| date     | d     | ISO 8601, YYYY-MM-DD                                                                                                                                                                                        |\n| datetime | t     | ISO 8601, YYYY-MM-DDTHH:MM:SS.ffffff                                                                                                                                                                        |\n| json     | j     |                                                                                                                                                                                                             |\n\nEmpty cells will become `None` for any type except of `str`.\nAs in case of `str` there's no way to distinguish it from an empty string.\n\n\nAPI\n---\nThe api consists in a single function `load` with the signature:\n\n```python\ntable = load(\n    filename: Union[Path, str],   # the file should exist and contain headers\n    *csvargs: Any,                # `*args` for the standard `csv.reader`\n    limit: Optional[int] = None,  # maximum number of rows to read\n    **csvkwargs: Any,             # `**fmtparams` for the standard `csv.reader`\n)\n```\n\nThe returned object has a `list` interface with an additional `sync` method to\nsave changes back into the file.\n\n\n\nRunning tests\n-------------\n    pip install -r requirements-dev.txt\n    pytest\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/imbolc/csvfile", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "csvfile", "package_url": "https://pypi.org/project/csvfile/", "platform": "", "project_url": "https://pypi.org/project/csvfile/", "project_urls": {"Homepage": "https://github.com/imbolc/csvfile"}, "release_url": "https://pypi.org/project/csvfile/3.4.0/", "requires_dist": null, "requires_python": "", "summary": "A simple way of working with csv files.", "version": "3.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>csvfile</h1>\n<p>A simple way of working with csv files.</p>\n<p>You can use:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">csvfile</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"my-data.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"s2\">\"new value\"</span>\n<span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">sync</span><span class=\"p\">()</span>\n</pre>\n<p>Instead of:</p>\n<pre><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"my-data.csv\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">reader</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictReader</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n    <span class=\"n\">fieldnames</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">fieldnames</span>\n    <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n<span class=\"n\">data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s2\">\"field\"</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s2\">\"new value\"</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"my-data.csv, \"</span><span class=\"n\">w</span><span class=\"s2\">\") as f:</span>\n    <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"n\">csv</span><span class=\"o\">.</span><span class=\"n\">DictWriter</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">fieldnames</span><span class=\"o\">=</span><span class=\"n\">fieldnames</span><span class=\"p\">)</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writeheader</span><span class=\"p\">()</span>\n    <span class=\"n\">writer</span><span class=\"o\">.</span><span class=\"n\">writerows</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Also you can declaratively define types in a table's header:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/csvfile_test.csv\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n<span class=\"n\">language</span><span class=\"p\">,</span><span class=\"n\">created</span><span class=\"p\">:</span><span class=\"n\">i</span>\n<span class=\"n\">python</span><span class=\"p\">,</span><span class=\"mi\">1991</span>\n<span class=\"n\">js</span><span class=\"p\">,</span><span class=\"mi\">1995</span>\n<span class=\"n\">rust</span><span class=\"p\">,</span><span class=\"mi\">2010</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">csvfile</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/csvfile_test.csv\"</span><span class=\"p\">))</span>\n<span class=\"p\">[{</span><span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"mi\">1991</span><span class=\"p\">,</span> <span class=\"s1\">'language'</span><span class=\"p\">:</span> <span class=\"s1\">'python'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"mi\">1995</span><span class=\"p\">,</span> <span class=\"s1\">'language'</span><span class=\"p\">:</span> <span class=\"s1\">'js'</span><span class=\"p\">},</span>\n <span class=\"p\">{</span><span class=\"s1\">'created'</span><span class=\"p\">:</span> <span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"s1\">'language'</span><span class=\"p\">:</span> <span class=\"s1\">'rust'</span><span class=\"p\">}]</span>\n</pre>\n<p>Notice, that <code>created</code> is automatically converted into integer as we typed it in\nthe header as <code>created:i</code>.</p>\n<h2>Built-in types</h2>\n<table>\n<thead>\n<tr>\n<th>Type</th>\n<th>Alias</th>\n<th>Comment</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>str</td>\n<td>s</td>\n<td>default, if no type specified</td>\n</tr>\n<tr>\n<td>bool</td>\n<td>b</td>\n<td><code>reader</code> can understand next pairs as <code>True / False</code> case-insensitevely: <code>true / false</code>, <code>t / f</code>, <code>1 / 0</code>, <code>y / n</code>, <code>yes / no</code>, <code>on / off</code>, but the <code>writer</code> will always stringify them into <code>true / false</code></td>\n</tr>\n<tr>\n<td>int</td>\n<td>i</td>\n<td></td>\n</tr>\n<tr>\n<td>float</td>\n<td>f</td>\n<td></td>\n</tr>\n<tr>\n<td>decimal</td>\n<td>n</td>\n<td></td>\n</tr>\n<tr>\n<td>date</td>\n<td>d</td>\n<td>ISO 8601, YYYY-MM-DD</td>\n</tr>\n<tr>\n<td>datetime</td>\n<td>t</td>\n<td>ISO 8601, YYYY-MM-DDTHH:MM:SS.ffffff</td>\n</tr>\n<tr>\n<td>json</td>\n<td>j</td>\n<td></td>\n</tr></tbody></table>\n<p>Empty cells will become <code>None</code> for any type except of <code>str</code>.\nAs in case of <code>str</code> there's no way to distinguish it from an empty string.</p>\n<h2>API</h2>\n<p>The api consists in a single function <code>load</code> with the signature:</p>\n<pre><span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">load</span><span class=\"p\">(</span>\n    <span class=\"n\">filename</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">Path</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">],</span>   <span class=\"c1\"># the file should exist and contain headers</span>\n    <span class=\"o\">*</span><span class=\"n\">csvargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>                <span class=\"c1\"># `*args` for the standard `csv.reader`</span>\n    <span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># maximum number of rows to read</span>\n    <span class=\"o\">**</span><span class=\"n\">csvkwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span><span class=\"p\">,</span>             <span class=\"c1\"># `**fmtparams` for the standard `csv.reader`</span>\n<span class=\"p\">)</span>\n</pre>\n<p>The returned object has a <code>list</code> interface with an additional <code>sync</code> method to\nsave changes back into the file.</p>\n<h2>Running tests</h2>\n<pre><code>pip install -r requirements-dev.txt\npytest\n</code></pre>\n\n          </div>"}, "last_serial": 6992969, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e592317750d15457b0d9e54f68895ed0", "sha256": "3616174a6871a24b82b0e18d073a3b9c856f6f8f98b43f89bb080a751f35dcdc"}, "downloads": -1, "filename": "csvfile-1.0.0.tar.gz", "has_sig": false, "md5_digest": "e592317750d15457b0d9e54f68895ed0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1799, "upload_time": "2016-02-17T15:23:49", "upload_time_iso_8601": "2016-02-17T15:23:49.279737Z", "url": "https://files.pythonhosted.org/packages/2f/cf/3f7f65e6c2bc2a789430e46af1c5d7ea257f13115c3a22f8796dd79ccfea/csvfile-1.0.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "402206400aaf1c213dd34314d94f2323", "sha256": "9aedc4e60dfb8adfe7b39f3b1c59617c84bf017fb7e691a7e453bebc13bc3341"}, "downloads": -1, "filename": "csvfile-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "402206400aaf1c213dd34314d94f2323", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2068, "upload_time": "2020-02-09T20:04:21", "upload_time_iso_8601": "2020-02-09T20:04:21.918711Z", "url": "https://files.pythonhosted.org/packages/67/e6/4d5eb14ffc8c6ddc8f556d383f71a9ca24895045af2ca4834d41af8cf7a5/csvfile-2.0.0-py3-none-any.whl", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "1f306c5224d89da1e9c64c4b4c098bbf", "sha256": "89251d9f0979e81019d8cf7c9ea7c1d7189f683f056358d9d1d62b0972deb48c"}, "downloads": -1, "filename": "csvfile-2.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1f306c5224d89da1e9c64c4b4c098bbf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2583, "upload_time": "2020-03-11T11:40:56", "upload_time_iso_8601": "2020-03-11T11:40:56.218782Z", "url": "https://files.pythonhosted.org/packages/25/ac/116419fe9a195881dca66ad4a1a233a9bfb737e88c64cc8fd0190e93ee44/csvfile-2.1.0-py3-none-any.whl", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "ca5a39296a8b28910eae41e05eacbfa3", "sha256": "35982004778e07dc0ff9b6d2ae76beaf6906aac96f531afc9e3b339de33f2370"}, "downloads": -1, "filename": "csvfile-2.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ca5a39296a8b28910eae41e05eacbfa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 2584, "upload_time": "2020-03-11T11:48:00", "upload_time_iso_8601": "2020-03-11T11:48:00.392785Z", "url": "https://files.pythonhosted.org/packages/dc/14/8a5e74eb5a98ffd1ef49a7216b57dbc8770d25356d1f3c15f62fb1d1f64a/csvfile-2.1.1-py3-none-any.whl", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "0244617e5f5aa7f378236bc862dfa6bb", "sha256": "b97b92f63fa7ade6114910e2b7c9722fc02cc287fef93a193091726c95db2830"}, "downloads": -1, "filename": "csvfile-3.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0244617e5f5aa7f378236bc862dfa6bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3841, "upload_time": "2020-03-28T14:47:39", "upload_time_iso_8601": "2020-03-28T14:47:39.283831Z", "url": "https://files.pythonhosted.org/packages/5c/01/9cc72253d9fea5d6a99bdae9a2f4f7d3797c0cc573bc582fdc84ba35d5b2/csvfile-3.0.0-py3-none-any.whl", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "1e2fc089fbe8daafcc3ed6f0e15ae5db", "sha256": "a309f3ad39b8aaa50f3f0e0edbdf5f6c4dee8f37dbcf8d4ab7764ee103134e1d"}, "downloads": -1, "filename": "csvfile-3.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e2fc089fbe8daafcc3ed6f0e15ae5db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3837, "upload_time": "2020-04-02T06:43:20", "upload_time_iso_8601": "2020-04-02T06:43:20.137896Z", "url": "https://files.pythonhosted.org/packages/95/37/902119dc72d2d4dcd507dce09f9842fffdd1f08f4f5e843be95efb043069/csvfile-3.0.1-py3-none-any.whl", "yanked": false}], "3.1.0": [{"comment_text": "", "digests": {"md5": "347a71c7d52b570457f7d274c6902e65", "sha256": "7ed7cc7d4f68b4e3333b3f53897e5b61bc663b84ae35bbf4d2665368328579c9"}, "downloads": -1, "filename": "csvfile-3.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "347a71c7d52b570457f7d274c6902e65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4170, "upload_time": "2020-04-02T09:40:57", "upload_time_iso_8601": "2020-04-02T09:40:57.746400Z", "url": "https://files.pythonhosted.org/packages/74/a5/25f807125438be22b4050aa23d912b608048586b098637241772a1e8f22f/csvfile-3.1.0-py3-none-any.whl", "yanked": false}], "3.2.0": [{"comment_text": "", "digests": {"md5": "2e81b5843b1f31aa82fbcaad3e458435", "sha256": "e89f39b289dca785bacb2e5a5b5567f3ece6fb208daff9ef6cbb3efbac82285d"}, "downloads": -1, "filename": "csvfile-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2e81b5843b1f31aa82fbcaad3e458435", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4263, "upload_time": "2020-04-10T07:36:25", "upload_time_iso_8601": "2020-04-10T07:36:25.625724Z", "url": "https://files.pythonhosted.org/packages/7f/4f/78d6790930c1da798176a4763c8ce03532b5fb15b8fbe7ccbedc5efff434/csvfile-3.2.0-py3-none-any.whl", "yanked": false}], "3.3.0": [{"comment_text": "", "digests": {"md5": "e518177d6ab14a1a634534957f314e06", "sha256": "4c8b4d9d17c767cc876a4981300ca51d801c2b3e2b80582195fc3c3267fb0591"}, "downloads": -1, "filename": "csvfile-3.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e518177d6ab14a1a634534957f314e06", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4272, "upload_time": "2020-04-10T08:59:09", "upload_time_iso_8601": "2020-04-10T08:59:09.601382Z", "url": "https://files.pythonhosted.org/packages/72/63/2b5800c2d069a8a6e8b8ee10f8b32775760a6a68034145e9e0e37710efe1/csvfile-3.3.0-py3-none-any.whl", "yanked": false}], "3.4.0": [{"comment_text": "", "digests": {"md5": "f39bd2ea5e84199421e9ac60b0f45040", "sha256": "0abc062fc43f00a3eba0082ca2744d066135e4232993e9f93adcc78e980e0006"}, "downloads": -1, "filename": "csvfile-3.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f39bd2ea5e84199421e9ac60b0f45040", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4273, "upload_time": "2020-04-10T12:35:57", "upload_time_iso_8601": "2020-04-10T12:35:57.316607Z", "url": "https://files.pythonhosted.org/packages/7c/6b/4800c3305e01ae1af9fa933293c1c96ecd51a294012099e6a99856d36d2e/csvfile-3.4.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f39bd2ea5e84199421e9ac60b0f45040", "sha256": "0abc062fc43f00a3eba0082ca2744d066135e4232993e9f93adcc78e980e0006"}, "downloads": -1, "filename": "csvfile-3.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f39bd2ea5e84199421e9ac60b0f45040", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4273, "upload_time": "2020-04-10T12:35:57", "upload_time_iso_8601": "2020-04-10T12:35:57.316607Z", "url": "https://files.pythonhosted.org/packages/7c/6b/4800c3305e01ae1af9fa933293c1c96ecd51a294012099e6a99856d36d2e/csvfile-3.4.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:41:41 2020"}