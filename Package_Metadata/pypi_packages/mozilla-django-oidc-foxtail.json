{"info": {"author": "Tasos Katsoulas, John Giannelos", "author_email": "akatsoulas@mozilla.com, jgiannelos@mozilla.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Django", "Framework :: Django :: 1.11", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Intended Audience :: Developers", "License :: OSI Approved :: Mozilla Public License 2.0 (MPL 2.0)", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "===================\nmozilla-django-oidc\n===================\n\n.. image:: https://badge.fury.io/py/mozilla-django-oidc.svg\n   :target: https://badge.fury.io/py/mozilla-django-oidc\n\n.. image:: https://travis-ci.org/mozilla/mozilla-django-oidc.svg?branch=master\n   :target: https://travis-ci.org/mozilla/mozilla-django-oidc\n\n.. image:: https://codecov.io/gh/mozilla/mozilla-django-oidc/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/mozilla/mozilla-django-oidc\n\n.. image:: https://circleci.com/gh/mozilla/mozilla-django-oidc/tree/master.svg?style=svg\n   :target: https://circleci.com/gh/mozilla/mozilla-django-oidc/tree/master\n\nA lightweight authentication and access management library for integration with OpenID Connect enabled authentication services.\n\n\nDocumentation\n-------------\n\nThe full documentation is at `<https://mozilla-django-oidc.readthedocs.io>`_.\n\n\nDesign principles\n-----------------\n\n* Keep it as minimal/lightweight as possible\n* Store as less authn/authz artifacts as possible\n* Allow custom functionality by overriding the authentication backend\n* Mainly support OIDC authorization code flow\n* Allow shipping Mozilla-centric authn/authz features\n* Test against all supported Python/Django version\n* E2E tested and audited by `Mozilla InfoSec <https://infosec.mozilla.org/>`_\n\n\nRunning Unit Tests\n-------------------\n\nUse ``tox`` to run as many different versions of Python you have. If you\ndon't have ``tox`` installed (and executable) already you can either\ninstall it in your system Python or `<https://pypi.python.org/pypi/pipsi>`_.\nOnce installed, simply execute in the project root directory.\n\n.. code-block:: shell\n\n    $ tox\n\n``tox`` will do the equivalent of installing virtual environments for every\ncombination mentioned in the ``tox.ini`` file. If your system, for example,\ndoesn't have ``python3.4`` those ``tox`` tests will be skipped.\n\nFor a faster test-rinse-repeat cycle you can run tests in a specific\nenvironment with a specific version of Python and specific version of\nDjango of your choice. Here is such an example:\n\n\n.. code-block:: shell\n\n    $ virtualenv -p /path/to/bin/python3.5 venv\n    $ source venv\n    (venv) $ pip install -r requirements/requirements_dev.txt\n    (venv) $ DJANGO_SETTINGS_MODULE=tests.settings django-admin.py test\n\nMeasuring code coverage, continuing the steps above:\n\n.. code-block:: shell\n\n    (venv) $ pip install coverage\n    (venv) $ DJANGO_SETTINGS_MODULE=tests.settings coverage run --source mozilla_django_oidc `which django-admin.py` test\n    (venv) $ coverage report\n    (venv) $ coverage html\n    (venv) $ open htmlcov/index.html\n\nLocal development\n-----------------\n\nThe local development setup is based on Docker so you need the following installed in your system:\n\n* `docker`\n* `docker-compose`\n\nYou will also need to edit your ``hosts`` file to resolve ``testrp`` and ``testprovider`` hostnames to ``127.0.0.1``.\n\nRunning test services\n=====================\n\nTo run the `testrp` and `testprovider` instances run the following:\n\n.. code-block:: shell\n\n   (venv) $ docker-compose up -d testprovider testrp\n\nThen visit the testing django app on: ``http://testrp:8081``.\n\nThe library source code is mounted as a docker volume and source code changes are reflected directly in.\nIn order to test a change you need to restart the ``testrp`` service.\n\n.. code-block:: shell\n\n   (venv) $ docker-compose stop testrp\n   (venv) $ docker-compose up -d testrp\n\nRunning integration tests\n=========================\n\nIntegration tests are mounted as a volume to the docker containers. Tests can be run using the following command:\n\n.. code-block:: shell\n\n   (venv) $ docker-compose run --service-ports testrunner\n\nLinting\n-------\n\nAll code is checked with `<https://pypi.python.org/pypi/flake8>`_ in\ncontinuous integration. To make sure your code still passes all style guides\ninstall ``flake8`` and check:\n\n.. code-block:: shell\n\n    $ flake8 mozilla_django_oidc tests\n\n.. note::\n\n    When you run ``tox`` it also does a ``flake8`` run on the main package\n    files and the tests.\n\nYou can also run linting with ``tox``:\n\n.. code-block:: shell\n\n    $ tox -e lint\n\n\nReleasing a new version\n------------------------\n\n``mozilla-django-oidc`` releases are hosted in `PyPI <https://pypi.python.org/pypi/mozilla-django-oidc>`_.\nHere are the steps you need to follow in order to push a new release:\n\n* Make sure that ``HISTORY.rst`` is up-to-date focusing mostly on backwards incompatible changes.\n\n  Security vulnerabilities should be clearly marked in a \"Security issues\" section along with\n  a level indicator of:\n\n  * High: vulnerability facilitates data loss, data access, impersonation of admin, or allows access\n    to other sites or components\n\n    Users should upgrade immediately.\n\n  * Medium: vulnerability endangers users by sending them to malicious sites or stealing browser\n    data.\n\n    Users should upgrade immediately.\n\n  * Low: vulnerability is a nuissance to site staff and/or users\n\n    Users should upgrade.\n\n* Bump the project version and create a commit for the new version.\n\n  * You can use ``bumpversion`` for that. It is a tool to automate this procedure following the `semantic versioning scheme <http://semver.org/>`_.\n\n    * For a patch version update (eg 0.1.1 to 0.1.2) you can run ``bumpversion patch``.\n    * For a minor version update (eg 0.1.0 to 0.2.0) you can run ``bumpversion minor``.\n    * For a major version update (eg 0.1.0 to 1.0.0) you can run ``bumpversion major``.\n\n* Create a `signed tag <https://git-scm.com/book/tr/v2/Git-Tools-Signing-Your-Work>`_ for that version\n\n  Example::\n\n      git tag -s 0.1.1 -m \"Bump version: 0.1.0 to 0.1.1\"\n\n* Push the signed tag to Github\n\n  Example::\n\n      git push origin 0.1.1\n\nThe release is pushed automatically to PyPI using a travis deployment hook on every new tag.\n\n\nLicense\n-------\n\nThis software is licensed under the MPL 2.0 license. For more info check the LICENSE file.\n\n\nCredits\n-------\n\nTools used in rendering this package:\n\n*  Cookiecutter_\n*  `cookiecutter-djangopackage`_\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`cookiecutter-djangopackage`: https://github.com/pydanny/cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n1.2.3 (2020-01-02)\n===================\n\n* Add support for Django 3.x\n  Thanks `@jaap3 <https://github.com/jaap3>`_\n* Use new E2E testing images from mozilla namespace\n* Remove support for EOL'ed Django versions\n\n1.2.2 (2019-04-18)\n===================\n\n* Add Mozilla code of conduct\n* Allow overriding OIDC settings per class\n\n1.2.1 (2019-01-22)\n===================\n\n* Make `verify_claims` compatible with custom scope configuration.\n\n1.2.0 (2019-01-09)\n==================\n\n* Improve travis automation for PyPI releases\n* Allow basic auth for OIDC token endpoint requests\n  Thanks `@anttipalola <https://github.com/anttipalola>`_\n* Replace phantomjs with firefox headless for e2e testing\n* Add default email verification claim check\n  Thanks `@kerrermanisNL <https://github.com/kerrermanisNL>`_\n* Remove compatibility code for unsupported Django versions\n* Add settings to control redirect behavior\n  Thanks `@chrisbrantley <https://github.com/chrisbrantley>`_\n\n1.1.2 (2018-08-24)\n===================\n\n* Fix JWKS handling when OP returns multiple keys\n  Thanks `@JustinAzoff <https://github.com/JustinAzoff>`_\n\n\n1.1.1 (2018-08-09)\n===================\n\n* Fix `is_safe_url` on Django 2.1\n* Fix signature in `authenticate` method to be compatible with Django 2.1\n* Remove legacy code for unsupported Django < 1.11\n  Thanks `@SirTyson <https://github.com/SirTyson>`_\n\n\n1.1.0 (2018-08-02)\n===================\n\n* Installation doc fixes\n  Thanks `@mklan <https://github.com/mklan>`_\n* Drop support for unsupported Django 1.8 and Python 3.3.\n* Refactor authentication backend to make it easier to extend\n  Required by DRF support feature.\n* Add DRF support\n  Thanks `@anlutro <https://github.com/anlutro>`_\n* Improve local docker environment setup\n* Add flag to allow using unsecured tokens\n* Allow using JWK with optional ``alg``\n  Thanks `@Algogator <https://github.com/Algogator>`_\n\n\n1.0.0 (2018-05-09)\n===================\n\n* Add OIDC_AUTHENTICATION_CALLBACK_URL as a new configuration parameter\n* Fail earlier when JWS algorithm does not OIDC_RP_SIGN_ALGO.\n  Thanks `@anlutro <https://github.com/anlutro>`_\n* RS256 verification through ``settings.OIDC_OP_JWKS_ENDPOINT``\n  Thanks `@GermanoGuerrini <https://github.com/GermanoGuerrini>`_\n* Refactor OIDCAuthenticationBackend so that token retrieval methods can be overridden in a subclass when you need to.\n\nBackwards-incompatible changes:\n\n* ``OIDC_OP_LOGOUT_URL_METHOD`` takes a ``request`` parameter now.\n* Changed name of ``RefreshIDToken`` middleware to ``SessionRefresh``.\n\n\n.. _`@anlutro`: https://github.com/anlutro\n\n0.6.0 (2018-03-27)\n===================\n\n* Add e2e tests and automation\n* Add caching for exempt URLs\n* Fix logout when session refresh fails\n\n0.5.0 (2018-01-10)\n===================\n\n* Add Django 2.0 support\n* Fix tox configuration\n\nBackwards-incompatible changes:\n\n* Drop Django 1.10 support\n\n0.4.2 (2017-11-29)\n===================\n\n* Fix OIDC_USERNAME_ALGO to actually load dotted import path of callback.\n* Add verify_claims method for advanced authentication checks\n\n0.4.1 (2017-10-25)\n===================\n\n* Send bytes to josepy. Fixes python3 support.\n\n0.4.0 (2017-10-24)\n===================\n\nSecurity issues:\n\n* **High**: Replace python-jose with josepy and use pyca/cryptography instead of pycrypto (CVE-2013-7459).\n\nBackwards-incompatible changes:\n\n* ``OIDC_RP_IDP_SIGN_KEY`` no longer uses the JWK json as ``dict`` but PEM or DER keys instead.\n\n\n0.3.2 (2017-10-03)\n===================\n\nFeatures:\n\n* Implement RS256 verification\n  Thanks `@puiterwijk <https://github.com/puiterwijk>`_\n\nBugs:\n\n* Use ``settings.OIDC_VERIFY_SSL`` also when validating the token.\n  Thanks `@GermanoGuerrini <https://github.com/GermanoGuerrini>`_\n* Make OpenID Connect scope configurable.\n  Thanks `@puiterwijk <https://github.com/puiterwijk>`_\n* Add path host injection unit-test (#171)\n* Revisit OIDC_STORE_{ACCESS,ID}_TOKEN config entries\n* Allow configuration of additional auth parameters\n\n\n.. _`@GermanoGuerrini`: https://github.com/GermanoGuerrini\n.. _`@puiterwijk`: https://github.com/puiterwijk\n\n0.3.1 (2017-06-15)\n===================\n\nSecurity issues:\n\n* **Medium**: Sanitize next url for authentication view\n\n0.3.0 (2017-06-13)\n===================\n\nSecurity issues:\n\n* **Low**: Logout using POST not GET (#126)\n\nBackwards-incompatible changes:\n\n* The ``settings.SITE_URL`` is no longer used. Instead the absolute URL is\n  derived from the request's ``get_host()``.\n* Only log out by HTTP POST allowed.\n\nBugs:\n\n* Test suite maintenance (#108, #109, #142)\n\n0.2.0 (2017-06-07)\n===================\n\nBackwards-incompatible changes:\n\n* Drop support for Django 1.9 (#130)\n\n  If you're using Django 1.9, you should update Django first.\n\n* Move middleware to ``mozilla_django_oidc.middleware`` and\n  change it to use authentication endpoint with ``prompt=none`` (#94)\n\n  You'll need to update your ``MIDDLEWARE_CLASSES``/``MIDDLEWARE``\n  setting accordingly.\n\n* Remove legacy ``base64`` handling of OIDC secret. Now RP secret\n  should be plaintext.\n\nFeatures:\n\n* Add support for Django 1.11 and Python 3.6 (#85)\n* Update middleware to work with Django 1.10+ (#90)\n* Documentation updates\n* Rework test infrastructure so it's tox-based (#100)\n\nBugs:\n\n* always decode verified token before ``json.load()`` (#116)\n* always redirect to logout_url even when logged out (#121)\n* Change email matching to be case-insensitive (#102)\n* Allow combining OIDCAuthenticationBackend with other backends (#87)\n* fix is_authenticated usage for Django 1.10+ (#125)\n\n0.1.0 (2016-10-12)\n===================\n\n* First release on PyPI.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mozilla/mozilla-django-oidc", "keywords": "mozilla-django-oidc", "license": "MPL 2.0", "maintainer": "", "maintainer_email": "", "name": "mozilla-django-oidc-foxtail", "package_url": "https://pypi.org/project/mozilla-django-oidc-foxtail/", "platform": "", "project_url": "https://pypi.org/project/mozilla-django-oidc-foxtail/", "project_urls": {"Homepage": "https://github.com/mozilla/mozilla-django-oidc"}, "release_url": "https://pypi.org/project/mozilla-django-oidc-foxtail/1.2.3/", "requires_dist": null, "requires_python": "", "summary": "A lightweight authentication and access management library for integration with OpenID Connect enabled authentication services.", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/mozilla-django-oidc\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/mozilla-django-oidc.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9fc88956a169b1e88f62dbc42464ca6182d8530/68747470733a2f2f62616467652e667572792e696f2f70792f6d6f7a696c6c612d646a616e676f2d6f6964632e737667\"></a>\n<a href=\"https://travis-ci.org/mozilla/mozilla-django-oidc\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mozilla/mozilla-django-oidc.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8a2228b43e4b4c6a4ec0aa92bf5a38846c180ac/68747470733a2f2f7472617669732d63692e6f72672f6d6f7a696c6c612f6d6f7a696c6c612d646a616e676f2d6f6964632e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/mozilla/mozilla-django-oidc\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/mozilla/mozilla-django-oidc/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fe171a0bccbef891d022328c3770a3ee26e0d2a6/68747470733a2f2f636f6465636f762e696f2f67682f6d6f7a696c6c612f6d6f7a696c6c612d646a616e676f2d6f6964632f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://circleci.com/gh/mozilla/mozilla-django-oidc/tree/master\" rel=\"nofollow\"><img alt=\"https://circleci.com/gh/mozilla/mozilla-django-oidc/tree/master.svg?style=svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/16c0bffe58ebb89c05092ac6259d25aa624da3d2/68747470733a2f2f636972636c6563692e636f6d2f67682f6d6f7a696c6c612f6d6f7a696c6c612d646a616e676f2d6f6964632f747265652f6d61737465722e7376673f7374796c653d737667\"></a>\n<p>A lightweight authentication and access management library for integration with OpenID Connect enabled authentication services.</p>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>The full documentation is at <a href=\"https://mozilla-django-oidc.readthedocs.io\" rel=\"nofollow\">https://mozilla-django-oidc.readthedocs.io</a>.</p>\n</div>\n<div id=\"design-principles\">\n<h2>Design principles</h2>\n<ul>\n<li>Keep it as minimal/lightweight as possible</li>\n<li>Store as less authn/authz artifacts as possible</li>\n<li>Allow custom functionality by overriding the authentication backend</li>\n<li>Mainly support OIDC authorization code flow</li>\n<li>Allow shipping Mozilla-centric authn/authz features</li>\n<li>Test against all supported Python/Django version</li>\n<li>E2E tested and audited by <a href=\"https://infosec.mozilla.org/\" rel=\"nofollow\">Mozilla InfoSec</a></li>\n</ul>\n</div>\n<div id=\"running-unit-tests\">\n<h2>Running Unit Tests</h2>\n<p>Use <tt>tox</tt> to run as many different versions of Python you have. If you\ndon\u2019t have <tt>tox</tt> installed (and executable) already you can either\ninstall it in your system Python or <a href=\"https://pypi.python.org/pypi/pipsi\" rel=\"nofollow\">https://pypi.python.org/pypi/pipsi</a>.\nOnce installed, simply execute in the project root directory.</p>\n<pre>$ tox\n</pre>\n<p><tt>tox</tt> will do the equivalent of installing virtual environments for every\ncombination mentioned in the <tt>tox.ini</tt> file. If your system, for example,\ndoesn\u2019t have <tt>python3.4</tt> those <tt>tox</tt> tests will be skipped.</p>\n<p>For a faster test-rinse-repeat cycle you can run tests in a specific\nenvironment with a specific version of Python and specific version of\nDjango of your choice. Here is such an example:</p>\n<pre>$ virtualenv -p /path/to/bin/python3.5 venv\n$ <span class=\"nb\">source</span> venv\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install -r requirements/requirements_dev.txt\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ <span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"o\">=</span>tests.settings django-admin.py <span class=\"nb\">test</span>\n</pre>\n<p>Measuring code coverage, continuing the steps above:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ pip install coverage\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ <span class=\"nv\">DJANGO_SETTINGS_MODULE</span><span class=\"o\">=</span>tests.settings coverage run --source mozilla_django_oidc <span class=\"sb\">`</span>which django-admin.py<span class=\"sb\">`</span> <span class=\"nb\">test</span>\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ coverage report\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ coverage html\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ open htmlcov/index.html\n</pre>\n</div>\n<div id=\"local-development\">\n<h2>Local development</h2>\n<p>The local development setup is based on Docker so you need the following installed in your system:</p>\n<ul>\n<li><cite>docker</cite></li>\n<li><cite>docker-compose</cite></li>\n</ul>\n<p>You will also need to edit your <tt>hosts</tt> file to resolve <tt>testrp</tt> and <tt>testprovider</tt> hostnames to <tt>127.0.0.1</tt>.</p>\n<div id=\"running-test-services\">\n<h3>Running test services</h3>\n<p>To run the <cite>testrp</cite> and <cite>testprovider</cite> instances run the following:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ docker-compose up -d testprovider testrp\n</pre>\n<p>Then visit the testing django app on: <tt><span class=\"pre\">http://testrp:8081</span></tt>.</p>\n<p>The library source code is mounted as a docker volume and source code changes are reflected directly in.\nIn order to test a change you need to restart the <tt>testrp</tt> service.</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ docker-compose stop testrp\n<span class=\"o\">(</span>venv<span class=\"o\">)</span> $ docker-compose up -d testrp\n</pre>\n</div>\n<div id=\"running-integration-tests\">\n<h3>Running integration tests</h3>\n<p>Integration tests are mounted as a volume to the docker containers. Tests can be run using the following command:</p>\n<pre><span class=\"o\">(</span>venv<span class=\"o\">)</span> $ docker-compose run --service-ports testrunner\n</pre>\n</div>\n</div>\n<div id=\"linting\">\n<h2>Linting</h2>\n<p>All code is checked with <a href=\"https://pypi.python.org/pypi/flake8\" rel=\"nofollow\">https://pypi.python.org/pypi/flake8</a> in\ncontinuous integration. To make sure your code still passes all style guides\ninstall <tt>flake8</tt> and check:</p>\n<pre>$ flake8 mozilla_django_oidc tests\n</pre>\n<div>\n<p>Note</p>\n<p>When you run <tt>tox</tt> it also does a <tt>flake8</tt> run on the main package\nfiles and the tests.</p>\n</div>\n<p>You can also run linting with <tt>tox</tt>:</p>\n<pre>$ tox -e lint\n</pre>\n</div>\n<div id=\"releasing-a-new-version\">\n<h2>Releasing a new version</h2>\n<p><tt><span class=\"pre\">mozilla-django-oidc</span></tt> releases are hosted in <a href=\"https://pypi.python.org/pypi/mozilla-django-oidc\" rel=\"nofollow\">PyPI</a>.\nHere are the steps you need to follow in order to push a new release:</p>\n<ul>\n<li><p>Make sure that <tt>HISTORY.rst</tt> is up-to-date focusing mostly on backwards incompatible changes.</p>\n<p>Security vulnerabilities should be clearly marked in a \u201cSecurity issues\u201d section along with\na level indicator of:</p>\n<ul>\n<li><p>High: vulnerability facilitates data loss, data access, impersonation of admin, or allows access\nto other sites or components</p>\n<p>Users should upgrade immediately.</p>\n</li>\n<li><p>Medium: vulnerability endangers users by sending them to malicious sites or stealing browser\ndata.</p>\n<p>Users should upgrade immediately.</p>\n</li>\n<li><p>Low: vulnerability is a nuissance to site staff and/or users</p>\n<p>Users should upgrade.</p>\n</li>\n</ul>\n</li>\n<li><p>Bump the project version and create a commit for the new version.</p>\n<ul>\n<li>You can use <tt>bumpversion</tt> for that. It is a tool to automate this procedure following the <a href=\"http://semver.org/\" rel=\"nofollow\">semantic versioning scheme</a>.<ul>\n<li>For a patch version update (eg 0.1.1 to 0.1.2) you can run <tt>bumpversion patch</tt>.</li>\n<li>For a minor version update (eg 0.1.0 to 0.2.0) you can run <tt>bumpversion minor</tt>.</li>\n<li>For a major version update (eg 0.1.0 to 1.0.0) you can run <tt>bumpversion major</tt>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><p>Create a <a href=\"https://git-scm.com/book/tr/v2/Git-Tools-Signing-Your-Work\" rel=\"nofollow\">signed tag</a> for that version</p>\n<p>Example:</p>\n<pre>git tag -s 0.1.1 -m \"Bump version: 0.1.0 to 0.1.1\"\n</pre>\n</li>\n<li><p>Push the signed tag to Github</p>\n<p>Example:</p>\n<pre>git push origin 0.1.1\n</pre>\n</li>\n</ul>\n<p>The release is pushed automatically to PyPI using a travis deployment hook on every new tag.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This software is licensed under the MPL 2.0 license. For more info check the LICENSE file.</p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>Tools used in rendering this package:</p>\n<ul>\n<li><a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a></li>\n<li><a href=\"https://github.com/pydanny/cookiecutter-djangopackage\" rel=\"nofollow\">cookiecutter-djangopackage</a></li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.2.3 (2020-01-02)</h3>\n<ul>\n<li>Add support for Django 3.x\nThanks <a href=\"https://github.com/jaap3\" rel=\"nofollow\">@jaap3</a></li>\n<li>Use new E2E testing images from mozilla namespace</li>\n<li>Remove support for EOL\u2019ed Django versions</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.2.2 (2019-04-18)</h3>\n<ul>\n<li>Add Mozilla code of conduct</li>\n<li>Allow overriding OIDC settings per class</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.2.1 (2019-01-22)</h3>\n<ul>\n<li>Make <cite>verify_claims</cite> compatible with custom scope configuration.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.2.0 (2019-01-09)</h3>\n<ul>\n<li>Improve travis automation for PyPI releases</li>\n<li>Allow basic auth for OIDC token endpoint requests\nThanks <a href=\"https://github.com/anttipalola\" rel=\"nofollow\">@anttipalola</a></li>\n<li>Replace phantomjs with firefox headless for e2e testing</li>\n<li>Add default email verification claim check\nThanks <a href=\"https://github.com/kerrermanisNL\" rel=\"nofollow\">@kerrermanisNL</a></li>\n<li>Remove compatibility code for unsupported Django versions</li>\n<li>Add settings to control redirect behavior\nThanks <a href=\"https://github.com/chrisbrantley\" rel=\"nofollow\">@chrisbrantley</a></li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.1.2 (2018-08-24)</h3>\n<ul>\n<li>Fix JWKS handling when OP returns multiple keys\nThanks <a href=\"https://github.com/JustinAzoff\" rel=\"nofollow\">@JustinAzoff</a></li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.1.1 (2018-08-09)</h3>\n<ul>\n<li>Fix <cite>is_safe_url</cite> on Django 2.1</li>\n<li>Fix signature in <cite>authenticate</cite> method to be compatible with Django 2.1</li>\n<li>Remove legacy code for unsupported Django &lt; 1.11\nThanks <a href=\"https://github.com/SirTyson\" rel=\"nofollow\">@SirTyson</a></li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.1.0 (2018-08-02)</h3>\n<ul>\n<li>Installation doc fixes\nThanks <a href=\"https://github.com/mklan\" rel=\"nofollow\">@mklan</a></li>\n<li>Drop support for unsupported Django 1.8 and Python 3.3.</li>\n<li>Refactor authentication backend to make it easier to extend\nRequired by DRF support feature.</li>\n<li>Add DRF support\nThanks <a href=\"https://github.com/anlutro\" rel=\"nofollow\">@anlutro</a></li>\n<li>Improve local docker environment setup</li>\n<li>Add flag to allow using unsecured tokens</li>\n<li>Allow using JWK with optional <tt>alg</tt>\nThanks <a href=\"https://github.com/Algogator\" rel=\"nofollow\">@Algogator</a></li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.0.0 (2018-05-09)</h3>\n<ul>\n<li>Add OIDC_AUTHENTICATION_CALLBACK_URL as a new configuration parameter</li>\n<li>Fail earlier when JWS algorithm does not OIDC_RP_SIGN_ALGO.\nThanks <a href=\"https://github.com/anlutro\" rel=\"nofollow\">@anlutro</a></li>\n<li>RS256 verification through <tt>settings.OIDC_OP_JWKS_ENDPOINT</tt>\nThanks <a href=\"https://github.com/GermanoGuerrini\" rel=\"nofollow\">@GermanoGuerrini</a></li>\n<li>Refactor OIDCAuthenticationBackend so that token retrieval methods can be overridden in a subclass when you need to.</li>\n</ul>\n<p>Backwards-incompatible changes:</p>\n<ul>\n<li><tt>OIDC_OP_LOGOUT_URL_METHOD</tt> takes a <tt>request</tt> parameter now.</li>\n<li>Changed name of <tt>RefreshIDToken</tt> middleware to <tt>SessionRefresh</tt>.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.6.0 (2018-03-27)</h3>\n<ul>\n<li>Add e2e tests and automation</li>\n<li>Add caching for exempt URLs</li>\n<li>Fix logout when session refresh fails</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.5.0 (2018-01-10)</h3>\n<ul>\n<li>Add Django 2.0 support</li>\n<li>Fix tox configuration</li>\n</ul>\n<p>Backwards-incompatible changes:</p>\n<ul>\n<li>Drop Django 1.10 support</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.4.2 (2017-11-29)</h3>\n<ul>\n<li>Fix OIDC_USERNAME_ALGO to actually load dotted import path of callback.</li>\n<li>Add verify_claims method for advanced authentication checks</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.4.1 (2017-10-25)</h3>\n<ul>\n<li>Send bytes to josepy. Fixes python3 support.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.4.0 (2017-10-24)</h3>\n<p>Security issues:</p>\n<ul>\n<li><strong>High</strong>: Replace python-jose with josepy and use pyca/cryptography instead of pycrypto (CVE-2013-7459).</li>\n</ul>\n<p>Backwards-incompatible changes:</p>\n<ul>\n<li><tt>OIDC_RP_IDP_SIGN_KEY</tt> no longer uses the JWK json as <tt>dict</tt> but PEM or DER keys instead.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.3.2 (2017-10-03)</h3>\n<p>Features:</p>\n<ul>\n<li>Implement RS256 verification\nThanks <a href=\"https://github.com/puiterwijk\" rel=\"nofollow\">@puiterwijk</a></li>\n</ul>\n<p>Bugs:</p>\n<ul>\n<li>Use <tt>settings.OIDC_VERIFY_SSL</tt> also when validating the token.\nThanks <a href=\"https://github.com/GermanoGuerrini\" rel=\"nofollow\">@GermanoGuerrini</a></li>\n<li>Make OpenID Connect scope configurable.\nThanks <a href=\"https://github.com/puiterwijk\" rel=\"nofollow\">@puiterwijk</a></li>\n<li>Add path host injection unit-test (#171)</li>\n<li>Revisit OIDC_STORE_{ACCESS,ID}_TOKEN config entries</li>\n<li>Allow configuration of additional auth parameters</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>0.3.1 (2017-06-15)</h3>\n<p>Security issues:</p>\n<ul>\n<li><strong>Medium</strong>: Sanitize next url for authentication view</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>0.3.0 (2017-06-13)</h3>\n<p>Security issues:</p>\n<ul>\n<li><strong>Low</strong>: Logout using POST not GET (#126)</li>\n</ul>\n<p>Backwards-incompatible changes:</p>\n<ul>\n<li>The <tt>settings.SITE_URL</tt> is no longer used. Instead the absolute URL is\nderived from the request\u2019s <tt>get_host()</tt>.</li>\n<li>Only log out by HTTP POST allowed.</li>\n</ul>\n<p>Bugs:</p>\n<ul>\n<li>Test suite maintenance (#108, #109, #142)</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>0.2.0 (2017-06-07)</h3>\n<p>Backwards-incompatible changes:</p>\n<ul>\n<li><p>Drop support for Django 1.9 (#130)</p>\n<p>If you\u2019re using Django 1.9, you should update Django first.</p>\n</li>\n<li><p>Move middleware to <tt>mozilla_django_oidc.middleware</tt> and\nchange it to use authentication endpoint with <tt>prompt=none</tt> (#94)</p>\n<p>You\u2019ll need to update your <tt>MIDDLEWARE_CLASSES</tt>/<tt>MIDDLEWARE</tt>\nsetting accordingly.</p>\n</li>\n<li><p>Remove legacy <tt>base64</tt> handling of OIDC secret. Now RP secret\nshould be plaintext.</p>\n</li>\n</ul>\n<p>Features:</p>\n<ul>\n<li>Add support for Django 1.11 and Python 3.6 (#85)</li>\n<li>Update middleware to work with Django 1.10+ (#90)</li>\n<li>Documentation updates</li>\n<li>Rework test infrastructure so it\u2019s tox-based (#100)</li>\n</ul>\n<p>Bugs:</p>\n<ul>\n<li>always decode verified token before <tt>json.load()</tt> (#116)</li>\n<li>always redirect to logout_url even when logged out (#121)</li>\n<li>Change email matching to be case-insensitive (#102)</li>\n<li>Allow combining OIDCAuthenticationBackend with other backends (#87)</li>\n<li>fix is_authenticated usage for Django 1.10+ (#125)</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3>0.1.0 (2016-10-12)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6388569, "releases": {"1.2.3": [{"comment_text": "", "digests": {"md5": "01d10cbeb966053ba902788a021d90ba", "sha256": "f094078eeed75081b983bf3fe7a4831d67f355238df834a2c19b300d450b8800"}, "downloads": -1, "filename": "mozilla-django-oidc-foxtail-1.2.3.tar.gz", "has_sig": true, "md5_digest": "01d10cbeb966053ba902788a021d90ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30263, "upload_time": "2020-01-02T22:42:24", "upload_time_iso_8601": "2020-01-02T22:42:24.511697Z", "url": "https://files.pythonhosted.org/packages/d3/64/97ff29c4317f0c7e9bcf5e5f7661c347ec2d91e23e2ac93e71cc0faa7e91/mozilla-django-oidc-foxtail-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01d10cbeb966053ba902788a021d90ba", "sha256": "f094078eeed75081b983bf3fe7a4831d67f355238df834a2c19b300d450b8800"}, "downloads": -1, "filename": "mozilla-django-oidc-foxtail-1.2.3.tar.gz", "has_sig": true, "md5_digest": "01d10cbeb966053ba902788a021d90ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30263, "upload_time": "2020-01-02T22:42:24", "upload_time_iso_8601": "2020-01-02T22:42:24.511697Z", "url": "https://files.pythonhosted.org/packages/d3/64/97ff29c4317f0c7e9bcf5e5f7661c347ec2d91e23e2ac93e71cc0faa7e91/mozilla-django-oidc-foxtail-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:24 2020"}