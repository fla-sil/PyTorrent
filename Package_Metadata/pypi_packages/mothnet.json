{"info": {"author": "Adam Jones", "author_email": "ajones173@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# pymoth\n\n[![Build Status](https://travis-ci.org/meccaLeccaHi/pymoth.svg?branch=master)](https://travis-ci.org/meccaLeccaHi/pymoth)\n[![Documentation Status](https://readthedocs.org/projects/pymoth/badge/?version=latest)](https://pymoth.readthedocs.io/?badge=latest)\n[![MIT license](https://img.shields.io/badge/License-MIT-blue.svg)](LICENSE)\n[![Python 3.6](https://img.shields.io/badge/python-3.6-blue.svg)](https://www.python.org/downloads/release/python-360/)\n\nThis package contains a Python version of [MothNet](https://github.com/charlesDelahunt/PuttingABugInML)\n\n<img src='https://upload.wikimedia.org/wikipedia/commons/thumb/b/ba/Manduca_brasiliensis_MHNT_CUT_2010_0_12_Boca_de_Mato%2C_Cochoeiras_de_Macacu%2C_rio_de_Janeiro_blanc.jpg/320px-Manduca_brasiliensis_MHNT_CUT_2010_0_12_Boca_de_Mato%2C_Cochoeiras_de_Macacu%2C_rio_de_Janeiro_blanc.jpg'>\n\nNeural network modeled after the olfactory system of the hawkmoth, _Manduca sexta_ (shown above).\n> This repository contains a Python version of the code used in:\n> - [\"Putting a bug in ML: The moth olfactory network learns to read MNIST\"](https://doi.org/10.1016/j.neunet.2019.05.012), _Neural Networks_ 2019\n\n---\n[Docs (via Sphinx)](https://pymoth.readthedocs.io/)\n---\n\n## Installation\nBuilt for use with Mac/Linux systems - not tested in Windows.\n- Requires Python 3.6+\n\n### Via `pip`\n```console\npip install mothnet\n```\n\n### From source\nFirst, clone this repo and `cd` into it. Then run:\n```console\n# Install dependencies:  \npip install -r pymoth/docs/requirements.txt\n# Run sample experiment:\npython pymoth/examples.py\n```\n\n#### Dependencies (also see [`requirements.txt`](./docs/requirements.txt))\n- [scipy](https://www.scipy.org/)\n- [matplotlib](https://matplotlib.org/)\n- [scikit-learn](https://scikit-learn.org/)(for kNN and SVM models)\n- [pillow](https://pillow.readthedocs.io/en/stable/)\n- [keras](https://keras.io/) (for loading MNIST)\n- [tensorflow](https://www.tensorflow.org/) (_also_ for loading MNIST)\n\n---\n\n### Example experiment (also see [`examples.py`](examples.py))\n```python\n\nimport os\nimport pymoth\n\ndef experiment():\n\n    # instantiate the MothNet object\n    mothra = pymoth.MothNet({\n        'screen_size': (1920, 1080), # screen size (width, height)\n        'num_runs': 1, # how many runs you wish to do with this moth\n        'goal': 15, # defines the moth's learning rates\n        'tr_per_class': 1, # (try 3) the number of training samples per class\n        'num_sniffs': 1, # (try 2) number of exposures each training sample\n        'num_neighbors': 1, # optimization param for nearest neighbors\n        'box_constraint': 1e1, # optimization parameter for svm\n        'n_thumbnails': 1, # show N experiment inputs from each class\n        'show_acc_plots': True, # True to plot, False to ignore\n        'show_time_plots': True, # True to plot, False to ignore\n        'show_roc_plots': True, # True to plot, False to ignore\n        'results_folder': 'results', # string\n        'results_filename': 'results', # will get the run number appended to it\n        'data_folder': 'MNIST_all', # string\n        'data_filename': 'MNIST_all', # string\n                            })\n\n    # loop through the number of simulations specified:\n    for run in range(mothra.NUM_RUNS):\n\n        # generate dataset\n        feature_array = mothra.load_mnist()\n        train_X, test_X, train_y, test_y = mothra.train_test_split(feature_array)\n\n        # load parameters\n        mothra.load_moth() # define moth model parameters\n        mothra.load_exp() # define parameters of a time-evolution experiment\n\n        # run simulation (SDE time-step evolution)\n        sim_results = mothra.simulate(feature_array)\n        # future: mothra.fit(X_train, y_train)\n\n        # collect response statistics:\n        # process the sim results to group EN responses by class and time\n        EN_resp_trained = mothra.collect_stats(sim_results, mothra.experiment_params,\n            mothra._class_labels, mothra.SHOW_TIME_PLOTS, mothra.SHOW_ACC_PLOTS,\n            images_filename=mothra.RESULTS_FILENAME, images_folder=mothra.RESULTS_FOLDER,\n            screen_size=mothra.SCREEN_SIZE)\n\n        # reveal scores\n        # score MothNet\n        mothra.score_moth_on_MNIST(EN_resp_trained)\n        # score KNN\n        mothra.score_knn(train_X, train_y, test_X, test_y)\n        # score SVM\n        mothra.score_svm(train_X, train_y, test_X, test_y)\n\n        # plot each model in a subplot of a single figure\n        if mothra.SHOW_ROC_PLOTS:\n            mothra.show_multi_roc(['MothNet', 'SVM', 'KNN'], mothra._class_labels,\n            images_filename=mothra.RESULTS_FOLDER+os.sep+mothra.RESULTS_FILENAME+'_ROC_multi')\n```\n\n### Sample results\n<img src='https://github.com/meccaLeccaHi/pymoth/blob/master/pymoth/results/results_ROC_multi_sample.png?raw=true'>\n\n### Dataset\n[MNIST Data](http://yann.lecun.com/exdb/mnist/)\n\n### Modules\n- [*classify.py*](./pymoth/modules/classify.py) Classify output from MothNet model.\n- [*generate.py*](./pymoth/modules/generate.py) Download (if absent) and prepare down-sampled MNIST dataset.\n- [*params.py*](./pymoth/modules/params.py) Experiment and model parameters.\n- [*sde.py*](./pymoth/modules/sde.py) Run stochastic differential equation simulation.\n- [*show_figs.py*](./pymoth/modules/show_figs.py) Figure generation module.\n- [*MNIST_make_all.py*](./pymoth/MNIST_all/MNIST_make_all.py) Downloads and saves MNIST data to .npy file.\n\n---\n\nQuestions, comments, criticisms? Feel free to drop us an [e-mail](\n  mailto:ajones173@gmail.com?subject=pymoth)!\n\n\nBug reports, suggestions, or requests are also welcome! Feel free to [create an issue](\n  https://github.com/meccaLeccaHi/pymoth/issues/new).  \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/meccaLeccaHi/pymoth", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mothnet", "package_url": "https://pypi.org/project/mothnet/", "platform": "", "project_url": "https://pypi.org/project/mothnet/", "project_urls": {"Homepage": "https://github.com/meccaLeccaHi/pymoth"}, "release_url": "https://pypi.org/project/mothnet/0.0.5/", "requires_dist": ["matplotlib", "scikit-learn", "scikit-image", "pillow", "keras", "tensorflow"], "requires_python": "", "summary": "Neural network modeled after the olfactory system of the hawkmoth.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pymoth</h1>\n<p><a href=\"https://travis-ci.org/meccaLeccaHi/pymoth\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96aebae1f106c3457dae3e31e9719e00305a6e26/68747470733a2f2f7472617669732d63692e6f72672f6d656363614c6563636148692f70796d6f74682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pymoth.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bfd4c78cb5fc5d227604a1dfc7b556fdf1ae3df6/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f70796d6f74682f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"MIT license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://www.python.org/downloads/release/python-360/\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a></p>\n<p>This package contains a Python version of <a href=\"https://github.com/charlesDelahunt/PuttingABugInML\" rel=\"nofollow\">MothNet</a></p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5657226e2c9bc0a22c67c030d61ef340c117db23/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f622f62612f4d616e647563615f62726173696c69656e7369735f4d484e545f4355545f323031305f305f31325f426f63615f64655f4d61746f2532435f436f63686f65697261735f64655f4d61636163752532435f72696f5f64655f4a616e6569726f5f626c616e632e6a70672f33323070782d4d616e647563615f62726173696c69656e7369735f4d484e545f4355545f323031305f305f31325f426f63615f64655f4d61746f2532435f436f63686f65697261735f64655f4d61636163752532435f72696f5f64655f4a616e6569726f5f626c616e632e6a7067\">\n<p>Neural network modeled after the olfactory system of the hawkmoth, <em>Manduca sexta</em> (shown above).</p>\n<blockquote>\n<p>This repository contains a Python version of the code used in:</p>\n<ul>\n<li><a href=\"https://doi.org/10.1016/j.neunet.2019.05.012\" rel=\"nofollow\">\"Putting a bug in ML: The moth olfactory network learns to read MNIST\"</a>, <em>Neural Networks</em> 2019</li>\n</ul>\n</blockquote>\n<hr>\n<h2><a href=\"https://pymoth.readthedocs.io/\" rel=\"nofollow\">Docs (via Sphinx)</a></h2>\n<h2>Installation</h2>\n<p>Built for use with Mac/Linux systems - not tested in Windows.</p>\n<ul>\n<li>Requires Python 3.6+</li>\n</ul>\n<h3>Via <code>pip</code></h3>\n<pre><span class=\"go\">pip install mothnet</span>\n</pre>\n<h3>From source</h3>\n<p>First, clone this repo and <code>cd</code> into it. Then run:</p>\n<pre><span class=\"gp\">#</span> Install dependencies:  \n<span class=\"go\">pip install -r pymoth/docs/requirements.txt</span>\n<span class=\"gp\">#</span> Run sample experiment:\n<span class=\"go\">python pymoth/examples.py</span>\n</pre>\n<h4>Dependencies (also see <a href=\"./docs/requirements.txt\" rel=\"nofollow\"><code>requirements.txt</code></a>)</h4>\n<ul>\n<li><a href=\"https://www.scipy.org/\" rel=\"nofollow\">scipy</a></li>\n<li><a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a></li>\n<li><a href=\"https://scikit-learn.org/\" rel=\"nofollow\">scikit-learn</a>(for kNN and SVM models)</li>\n<li><a href=\"https://pillow.readthedocs.io/en/stable/\" rel=\"nofollow\">pillow</a></li>\n<li><a href=\"https://keras.io/\" rel=\"nofollow\">keras</a> (for loading MNIST)</li>\n<li><a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">tensorflow</a> (<em>also</em> for loading MNIST)</li>\n</ul>\n<hr>\n<h3>Example experiment (also see <a href=\"examples.py\" rel=\"nofollow\"><code>examples.py</code></a>)</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pymoth</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">experiment</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># instantiate the MothNet object</span>\n    <span class=\"n\">mothra</span> <span class=\"o\">=</span> <span class=\"n\">pymoth</span><span class=\"o\">.</span><span class=\"n\">MothNet</span><span class=\"p\">({</span>\n        <span class=\"s1\">'screen_size'</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">1920</span><span class=\"p\">,</span> <span class=\"mi\">1080</span><span class=\"p\">),</span> <span class=\"c1\"># screen size (width, height)</span>\n        <span class=\"s1\">'num_runs'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># how many runs you wish to do with this moth</span>\n        <span class=\"s1\">'goal'</span><span class=\"p\">:</span> <span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"c1\"># defines the moth's learning rates</span>\n        <span class=\"s1\">'tr_per_class'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># (try 3) the number of training samples per class</span>\n        <span class=\"s1\">'num_sniffs'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># (try 2) number of exposures each training sample</span>\n        <span class=\"s1\">'num_neighbors'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># optimization param for nearest neighbors</span>\n        <span class=\"s1\">'box_constraint'</span><span class=\"p\">:</span> <span class=\"mf\">1e1</span><span class=\"p\">,</span> <span class=\"c1\"># optimization parameter for svm</span>\n        <span class=\"s1\">'n_thumbnails'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"c1\"># show N experiment inputs from each class</span>\n        <span class=\"s1\">'show_acc_plots'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># True to plot, False to ignore</span>\n        <span class=\"s1\">'show_time_plots'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># True to plot, False to ignore</span>\n        <span class=\"s1\">'show_roc_plots'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"c1\"># True to plot, False to ignore</span>\n        <span class=\"s1\">'results_folder'</span><span class=\"p\">:</span> <span class=\"s1\">'results'</span><span class=\"p\">,</span> <span class=\"c1\"># string</span>\n        <span class=\"s1\">'results_filename'</span><span class=\"p\">:</span> <span class=\"s1\">'results'</span><span class=\"p\">,</span> <span class=\"c1\"># will get the run number appended to it</span>\n        <span class=\"s1\">'data_folder'</span><span class=\"p\">:</span> <span class=\"s1\">'MNIST_all'</span><span class=\"p\">,</span> <span class=\"c1\"># string</span>\n        <span class=\"s1\">'data_filename'</span><span class=\"p\">:</span> <span class=\"s1\">'MNIST_all'</span><span class=\"p\">,</span> <span class=\"c1\"># string</span>\n                            <span class=\"p\">})</span>\n\n    <span class=\"c1\"># loop through the number of simulations specified:</span>\n    <span class=\"k\">for</span> <span class=\"n\">run</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">NUM_RUNS</span><span class=\"p\">):</span>\n\n        <span class=\"c1\"># generate dataset</span>\n        <span class=\"n\">feature_array</span> <span class=\"o\">=</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">load_mnist</span><span class=\"p\">()</span>\n        <span class=\"n\">train_X</span><span class=\"p\">,</span> <span class=\"n\">test_X</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">,</span> <span class=\"n\">test_y</span> <span class=\"o\">=</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">feature_array</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># load parameters</span>\n        <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">load_moth</span><span class=\"p\">()</span> <span class=\"c1\"># define moth model parameters</span>\n        <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">load_exp</span><span class=\"p\">()</span> <span class=\"c1\"># define parameters of a time-evolution experiment</span>\n\n        <span class=\"c1\"># run simulation (SDE time-step evolution)</span>\n        <span class=\"n\">sim_results</span> <span class=\"o\">=</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">simulate</span><span class=\"p\">(</span><span class=\"n\">feature_array</span><span class=\"p\">)</span>\n        <span class=\"c1\"># future: mothra.fit(X_train, y_train)</span>\n\n        <span class=\"c1\"># collect response statistics:</span>\n        <span class=\"c1\"># process the sim results to group EN responses by class and time</span>\n        <span class=\"n\">EN_resp_trained</span> <span class=\"o\">=</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">collect_stats</span><span class=\"p\">(</span><span class=\"n\">sim_results</span><span class=\"p\">,</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">experiment_params</span><span class=\"p\">,</span>\n            <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">_class_labels</span><span class=\"p\">,</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">SHOW_TIME_PLOTS</span><span class=\"p\">,</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">SHOW_ACC_PLOTS</span><span class=\"p\">,</span>\n            <span class=\"n\">images_filename</span><span class=\"o\">=</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">RESULTS_FILENAME</span><span class=\"p\">,</span> <span class=\"n\">images_folder</span><span class=\"o\">=</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">RESULTS_FOLDER</span><span class=\"p\">,</span>\n            <span class=\"n\">screen_size</span><span class=\"o\">=</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">SCREEN_SIZE</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># reveal scores</span>\n        <span class=\"c1\"># score MothNet</span>\n        <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">score_moth_on_MNIST</span><span class=\"p\">(</span><span class=\"n\">EN_resp_trained</span><span class=\"p\">)</span>\n        <span class=\"c1\"># score KNN</span>\n        <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">score_knn</span><span class=\"p\">(</span><span class=\"n\">train_X</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">,</span> <span class=\"n\">test_X</span><span class=\"p\">,</span> <span class=\"n\">test_y</span><span class=\"p\">)</span>\n        <span class=\"c1\"># score SVM</span>\n        <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">score_svm</span><span class=\"p\">(</span><span class=\"n\">train_X</span><span class=\"p\">,</span> <span class=\"n\">train_y</span><span class=\"p\">,</span> <span class=\"n\">test_X</span><span class=\"p\">,</span> <span class=\"n\">test_y</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># plot each model in a subplot of a single figure</span>\n        <span class=\"k\">if</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">SHOW_ROC_PLOTS</span><span class=\"p\">:</span>\n            <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">show_multi_roc</span><span class=\"p\">([</span><span class=\"s1\">'MothNet'</span><span class=\"p\">,</span> <span class=\"s1\">'SVM'</span><span class=\"p\">,</span> <span class=\"s1\">'KNN'</span><span class=\"p\">],</span> <span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">_class_labels</span><span class=\"p\">,</span>\n            <span class=\"n\">images_filename</span><span class=\"o\">=</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">RESULTS_FOLDER</span><span class=\"o\">+</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">sep</span><span class=\"o\">+</span><span class=\"n\">mothra</span><span class=\"o\">.</span><span class=\"n\">RESULTS_FILENAME</span><span class=\"o\">+</span><span class=\"s1\">'_ROC_multi'</span><span class=\"p\">)</span>\n</pre>\n<h3>Sample results</h3>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7fa721a01f3da4b3bc1da2e88406a386986f73f/68747470733a2f2f6769746875622e636f6d2f6d656363614c6563636148692f70796d6f74682f626c6f622f6d61737465722f70796d6f74682f726573756c74732f726573756c74735f524f435f6d756c74695f73616d706c652e706e673f7261773d74727565\">\n<h3>Dataset</h3>\n<p><a href=\"http://yann.lecun.com/exdb/mnist/\" rel=\"nofollow\">MNIST Data</a></p>\n<h3>Modules</h3>\n<ul>\n<li><a href=\"./pymoth/modules/classify.py\" rel=\"nofollow\"><em>classify.py</em></a> Classify output from MothNet model.</li>\n<li><a href=\"./pymoth/modules/generate.py\" rel=\"nofollow\"><em>generate.py</em></a> Download (if absent) and prepare down-sampled MNIST dataset.</li>\n<li><a href=\"./pymoth/modules/params.py\" rel=\"nofollow\"><em>params.py</em></a> Experiment and model parameters.</li>\n<li><a href=\"./pymoth/modules/sde.py\" rel=\"nofollow\"><em>sde.py</em></a> Run stochastic differential equation simulation.</li>\n<li><a href=\"./pymoth/modules/show_figs.py\" rel=\"nofollow\"><em>show_figs.py</em></a> Figure generation module.</li>\n<li><a href=\"./pymoth/MNIST_all/MNIST_make_all.py\" rel=\"nofollow\"><em>MNIST_make_all.py</em></a> Downloads and saves MNIST data to .npy file.</li>\n</ul>\n<hr>\n<p>Questions, comments, criticisms? Feel free to drop us an <a href=\"mailto:ajones173@gmail.com?subject=pymoth\">e-mail</a>!</p>\n<p>Bug reports, suggestions, or requests are also welcome! Feel free to <a href=\"https://github.com/meccaLeccaHi/pymoth/issues/new\" rel=\"nofollow\">create an issue</a>.</p>\n\n          </div>"}, "last_serial": 5689851, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "e49c288f8d57723d4874bbca817c9405", "sha256": "29430ceb75d6a3852ee8efa5f65432d8975980946d3794a8dd07cd19f3935b66"}, "downloads": -1, "filename": "mothnet-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e49c288f8d57723d4874bbca817c9405", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49773, "upload_time": "2019-08-16T21:32:27", "upload_time_iso_8601": "2019-08-16T21:32:27.200340Z", "url": "https://files.pythonhosted.org/packages/d5/e3/39593fadd0ea2ccff1c36b3eb300db8e65d26b71b108d4ad0b5f230ce607/mothnet-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a32f5732082257a4c19cb104a6ed2c24", "sha256": "afefec33fdff9d13a74538c7fc70bb1b89df4a7c36083e23ef950ca215d8f6e4"}, "downloads": -1, "filename": "mothnet-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a32f5732082257a4c19cb104a6ed2c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44435, "upload_time": "2019-08-16T21:32:28", "upload_time_iso_8601": "2019-08-16T21:32:28.825707Z", "url": "https://files.pythonhosted.org/packages/57/9c/0f25210d2189391c4a246e6fb0fc2ffee7b8723fd091d9290da9e2a80900/mothnet-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e49c288f8d57723d4874bbca817c9405", "sha256": "29430ceb75d6a3852ee8efa5f65432d8975980946d3794a8dd07cd19f3935b66"}, "downloads": -1, "filename": "mothnet-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e49c288f8d57723d4874bbca817c9405", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 49773, "upload_time": "2019-08-16T21:32:27", "upload_time_iso_8601": "2019-08-16T21:32:27.200340Z", "url": "https://files.pythonhosted.org/packages/d5/e3/39593fadd0ea2ccff1c36b3eb300db8e65d26b71b108d4ad0b5f230ce607/mothnet-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a32f5732082257a4c19cb104a6ed2c24", "sha256": "afefec33fdff9d13a74538c7fc70bb1b89df4a7c36083e23ef950ca215d8f6e4"}, "downloads": -1, "filename": "mothnet-0.0.5.tar.gz", "has_sig": false, "md5_digest": "a32f5732082257a4c19cb104a6ed2c24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44435, "upload_time": "2019-08-16T21:32:28", "upload_time_iso_8601": "2019-08-16T21:32:28.825707Z", "url": "https://files.pythonhosted.org/packages/57/9c/0f25210d2189391c4a246e6fb0fc2ffee7b8723fd091d9290da9e2a80900/mothnet-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:38 2020"}