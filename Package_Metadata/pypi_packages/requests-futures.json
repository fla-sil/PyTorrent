{"info": {"author": "Ross McFarland", "author_email": "rwmcfa1@neces.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "Asynchronous Python HTTP Requests for Humans\n============================================\n\n.. image:: https://travis-ci.org/ross/requests-futures.png?branch=master\n        :target: https://travis-ci.org/ross/requests-futures\n\nSmall add-on for the python requests_ http library. Makes use of python 3.2's\n`concurrent.futures`_ or the backport_ for prior versions of python.\n\nThe additional API and changes are minimal and strives to avoid surprises.\n\nThe following synchronous code:\n\n.. code-block:: python\n\n    from requests import Session\n\n    session = Session()\n    # first requests starts and blocks until finished\n    response_one = session.get('http://httpbin.org/get')\n    # second request starts once first is finished\n    response_two = session.get('http://httpbin.org/get?foo=bar')\n    # both requests are complete\n    print('response one status: {0}'.format(response_one.status_code))\n    print(response_one.content)\n    print('response two status: {0}'.format(response_two.status_code))\n    print(response_two.content)\n\nCan be translated to make use of futures, and thus be asynchronous by creating\na FuturesSession and catching the returned Future in place of Response. The\nResponse can be retrieved by calling the result method on the Future:\n\n.. code-block:: python\n\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession()\n    # first request is started in background\n    future_one = session.get('http://httpbin.org/get')\n    # second requests is started immediately\n    future_two = session.get('http://httpbin.org/get?foo=bar')\n    # wait for the first request to complete, if it hasn't already\n    response_one = future_one.result()\n    print('response one status: {0}'.format(response_one.status_code))\n    print(response_one.content)\n    # wait for the second request to complete, if it hasn't already\n    response_two = future_two.result()\n    print('response two status: {0}'.format(response_two.status_code))\n    print(response_two.content)\n\nBy default a ThreadPoolExecutor is created with 8 workers. If you would like to\nadjust that value or share a executor across multiple sessions you can provide\none to the FuturesSession constructor.\n\n.. code-block:: python\n\n    from concurrent.futures import ThreadPoolExecutor\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession(executor=ThreadPoolExecutor(max_workers=10))\n    # ...\n\nAs a shortcut in case of just increasing workers number you can pass\n`max_workers` straight to the `FuturesSession` constructor:\n\n.. code-block:: python\n\n    from requests_futures.sessions import FuturesSession\n    session = FuturesSession(max_workers=10)\n\nFutureSession will use an existing session object if supplied:\n\n.. code-block:: python\n\n    from requests import session\n    from requests_futures.sessions import FuturesSession\n    my_session = session()\n    future_session = FuturesSession(session=my_session)\n\nThat's it. The api of requests.Session is preserved without any modifications\nbeyond returning a Future rather than Response. As with all futures exceptions\nare shifted (thrown) to the future.result() call so try/except blocks should be\nmoved there.\n\nCanceling queued requests (a.k.a cleaning up after yourself)\n============================================================\n\nIf you know that you won't be needing any additional responses from futures that\nhaven't yet resolved, it's a good idea to cancel those requests. You can do this\nby using the session as a context manager:\n\n.. code-block:: python\n\n    from requests_futures.sessions import FuturesSession\n    with FuturesSession(max_workers=1) as session:\n        future = session.get('https://httpbin.org/get')\n        future2 = session.get('https://httpbin.org/delay/10')\n        future3 = session.get('https://httpbin.org/delay/10')\n        response = future.result()\n\nIn this example, the second or third request will be skipped, saving time and\nresources that would otherwise be wasted.\n\nWorking in the Background\n=========================\n\nAdditional processing can be done in the background using requests's hooks_\nfunctionality. This can be useful for shifting work out of the foreground, for\na simple example take json parsing.\n\n.. code-block:: python\n\n    from pprint import pprint\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession()\n\n    def response_hook(resp, *args, **kwargs):\n        # parse the json storing the result on the response object\n        resp.data = resp.json()\n\n    future = session.get('http://httpbin.org/get', hooks={\n        'response': response_hook,\n    })\n    # do some other stuff, send some more requests while this one works\n    response = future.result()\n    print('response status {0}'.format(response.status_code))\n    # data will have been attached to the response object in the background\n    pprint(response.data)\n\nHooks can also be applied to the session.\n\n.. code-block:: python\n\n    from pprint import pprint\n    from requests_futures.sessions import FuturesSession\n\n    def response_hook(resp, *args, **kwargs):\n        # parse the json storing the result on the response object\n        resp.data = resp.json()\n\n    session = FuturesSession()\n    session.hooks['response'] = response_hook\n\n    future = session.get('http://httpbin.org/get')\n    # do some other stuff, send some more requests while this one works\n    response = future.result()\n    print('response status {0}'.format(response.status_code))\n    # data will have been attached to the response object in the background\n    pprint(response.data)   pprint(response.data)\n\nA more advanced example that adds an `elapsed` property to all requests.\n\n.. code-block:: python\n\n    from pprint import pprint\n    from requests_futures.sessions import FuturesSession\n    from time import time\n\n\n    class ElapsedFuturesSession(FuturesSession):\n\n        def request(self, method, url, hooks={}, *args, **kwargs):\n            start = time()\n\n            def timing(r, *args, **kwargs):\n                r.elapsed = time() - start\n\n            try:\n                if isinstance(hooks['response'], (list, tuple)):\n                    # needs to be first so we don't time other hooks execution\n                    hooks['response'].insert(0, timing)\n                else:\n                    hooks['response'] = [timing, hooks['response']]\n            except KeyError:\n                hooks['response'] = timing\n\n            return super(ElapsedFuturesSession, self) \\\n                .request(method, url, hooks=hooks, *args, **kwargs)\n\n\n\n    session = ElapsedFuturesSession()\n    future = session.get('http://httpbin.org/get')\n    # do some other stuff, send some more requests while this one works\n    response = future.result()\n    print('response status {0}'.format(response.status_code))\n    print('response elapsed {0}'.format(response.elapsed))\n\nUsing ProcessPoolExecutor\n=========================\n\nSimilarly to `ThreadPoolExecutor`, it is possible to use an instance of\n`ProcessPoolExecutor`. As the name suggest, the requests will be executed\nconcurrently in separate processes rather than threads.\n\n.. code-block:: python\n\n    from concurrent.futures import ProcessPoolExecutor\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession(executor=ProcessPoolExecutor(max_workers=10))\n    # ... use as before\n\n.. HINT::\n    Using the `ProcessPoolExecutor` is useful, in cases where memory\n    usage per request is very high (large response) and cycling the interpretor\n    is required to release memory back to OS.\n\nA base requirement of using `ProcessPoolExecutor` is that the `Session.request`,\n`FutureSession` all be pickle-able.\n\nThis means that only Python 3.5 is fully supported, while Python versions\n3.4 and above REQUIRE an existing `requests.Session` instance to be passed\nwhen initializing `FutureSession`. Python 2.X and < 3.4 are currently not\nsupported.\n\n.. code-block:: python\n\n    # Using python 3.4\n    from concurrent.futures import ProcessPoolExecutor\n    from requests import Session\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession(executor=ProcessPoolExecutor(max_workers=10),\n                             session=Session())\n    # ... use as before\n\nIn case pickling fails, an exception is raised pointing to this documentation.\n\n.. code-block:: python\n\n    # Using python 2.7\n    from concurrent.futures import ProcessPoolExecutor\n    from requests import Session\n    from requests_futures.sessions import FuturesSession\n\n    session = FuturesSession(executor=ProcessPoolExecutor(max_workers=10),\n                             session=Session())\n    Traceback (most recent call last):\n    ...\n    RuntimeError: Cannot pickle function. Refer to documentation: https://github.com/ross/requests-futures/#using-processpoolexecutor\n\n.. IMPORTANT::\n  * Python >= 3.4 required\n  * A session instance is required when using Python < 3.5\n  * If sub-classing `FuturesSession` it must be importable (module global)\n\nInstallation\n============\n\n    pip install requests-futures\n\n.. _`requests`: https://github.com/kennethreitz/requests\n.. _`concurrent.futures`: http://docs.python.org/dev/library/concurrent.futures.html\n.. _backport: https://pypi.python.org/pypi/futures\n.. _hooks: http://docs.python-requests.org/en/master/user/advanced/#event-hooks", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ross/requests-futures", "keywords": "", "license": "Apache License v2", "maintainer": "", "maintainer_email": "", "name": "requests-futures", "package_url": "https://pypi.org/project/requests-futures/", "platform": "", "project_url": "https://pypi.org/project/requests-futures/", "project_urls": {"Homepage": "https://github.com/ross/requests-futures"}, "release_url": "https://pypi.org/project/requests-futures/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Asynchronous Python HTTP for Humans.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"asynchronous-python-http-requests-for-humans\">\n<h2>Asynchronous Python HTTP Requests for Humans</h2>\n<a href=\"https://travis-ci.org/ross/requests-futures\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/ross/requests-futures.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75827e4fd0d4ba2d06693c30711013477bd62aba/68747470733a2f2f7472617669732d63692e6f72672f726f73732f72657175657374732d667574757265732e706e673f6272616e63683d6d6173746572\"></a>\n<p>Small add-on for the python <a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">requests</a> http library. Makes use of python 3.2\u2019s\n<a href=\"http://docs.python.org/dev/library/concurrent.futures.html\" rel=\"nofollow\">concurrent.futures</a> or the <a href=\"https://pypi.python.org/pypi/futures\" rel=\"nofollow\">backport</a> for prior versions of python.</p>\n<p>The additional API and changes are minimal and strives to avoid surprises.</p>\n<p>The following synchronous code:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">()</span>\n<span class=\"c1\"># first requests starts and blocks until finished</span>\n<span class=\"n\">response_one</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">)</span>\n<span class=\"c1\"># second request starts once first is finished</span>\n<span class=\"n\">response_two</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get?foo=bar'</span><span class=\"p\">)</span>\n<span class=\"c1\"># both requests are complete</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response one status: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response_one</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_one</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response two status: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response_two</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_two</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n<p>Can be translated to make use of futures, and thus be asynchronous by creating\na FuturesSession and catching the returned Future in place of Response. The\nResponse can be retrieved by calling the result method on the Future:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">()</span>\n<span class=\"c1\"># first request is started in background</span>\n<span class=\"n\">future_one</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">)</span>\n<span class=\"c1\"># second requests is started immediately</span>\n<span class=\"n\">future_two</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get?foo=bar'</span><span class=\"p\">)</span>\n<span class=\"c1\"># wait for the first request to complete, if it hasn't already</span>\n<span class=\"n\">response_one</span> <span class=\"o\">=</span> <span class=\"n\">future_one</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response one status: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response_one</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_one</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n<span class=\"c1\"># wait for the second request to complete, if it hasn't already</span>\n<span class=\"n\">response_two</span> <span class=\"o\">=</span> <span class=\"n\">future_two</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response two status: </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response_two</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response_two</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n<p>By default a ThreadPoolExecutor is created with 8 workers. If you would like to\nadjust that value or share a executor across multiple sessions you can provide\none to the FuturesSession constructor.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ThreadPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># ...</span>\n</pre>\n<p>As a shortcut in case of just increasing workers number you can pass\n<cite>max_workers</cite> straight to the <cite>FuturesSession</cite> constructor:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>FutureSession will use an existing session object if supplied:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"kn\">import</span> <span class=\"n\">session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"n\">my_session</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"p\">()</span>\n<span class=\"n\">future_session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">my_session</span><span class=\"p\">)</span>\n</pre>\n<p>That\u2019s it. The api of requests.Session is preserved without any modifications\nbeyond returning a Future rather than Response. As with all futures exceptions\nare shifted (thrown) to the future.result() call so try/except blocks should be\nmoved there.</p>\n</div>\n<div id=\"canceling-queued-requests-a-k-a-cleaning-up-after-yourself\">\n<h2>Canceling queued requests (a.k.a cleaning up after yourself)</h2>\n<p>If you know that you won\u2019t be needing any additional responses from futures that\nhaven\u2019t yet resolved, it\u2019s a good idea to cancel those requests. You can do this\nby using the session as a context manager:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"k\">with</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">session</span><span class=\"p\">:</span>\n    <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://httpbin.org/get'</span><span class=\"p\">)</span>\n    <span class=\"n\">future2</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://httpbin.org/delay/10'</span><span class=\"p\">)</span>\n    <span class=\"n\">future3</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://httpbin.org/delay/10'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n</pre>\n<p>In this example, the second or third request will be skipped, saving time and\nresources that would otherwise be wasted.</p>\n</div>\n<div id=\"working-in-the-background\">\n<h2>Working in the Background</h2>\n<p>Additional processing can be done in the background using requests\u2019s <a href=\"http://docs.python-requests.org/en/master/user/advanced/#event-hooks\" rel=\"nofollow\">hooks</a>\nfunctionality. This can be useful for shifting work out of the foreground, for\na simple example take json parsing.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">response_hook</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># parse the json storing the result on the response object</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">,</span> <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'response'</span><span class=\"p\">:</span> <span class=\"n\">response_hook</span><span class=\"p\">,</span>\n<span class=\"p\">})</span>\n<span class=\"c1\"># do some other stuff, send some more requests while this one works</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response status </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"c1\"># data will have been attached to the response object in the background</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>Hooks can also be applied to the session.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">response_hook</span><span class=\"p\">(</span><span class=\"n\">resp</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"c1\"># parse the json storing the result on the response object</span>\n    <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">resp</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">()</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">response_hook</span>\n\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">)</span>\n<span class=\"c1\"># do some other stuff, send some more requests while this one works</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response status </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"c1\"># data will have been attached to the response object in the background</span>\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>   <span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>A more advanced example that adds an <cite>elapsed</cite> property to all requests.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ElapsedFuturesSession</span><span class=\"p\">(</span><span class=\"n\">FuturesSession</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">request</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"p\">{},</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">timing</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n            <span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">],</span> <span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">)):</span>\n                <span class=\"c1\"># needs to be first so we don't time other hooks execution</span>\n                <span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">timing</span><span class=\"p\">)</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">timing</span><span class=\"p\">,</span> <span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">KeyError</span><span class=\"p\">:</span>\n            <span class=\"n\">hooks</span><span class=\"p\">[</span><span class=\"s1\">'response'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">timing</span>\n\n        <span class=\"k\">return</span> <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">ElapsedFuturesSession</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span> \\\n            <span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"n\">method</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">hooks</span><span class=\"o\">=</span><span class=\"n\">hooks</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">ElapsedFuturesSession</span><span class=\"p\">()</span>\n<span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">)</span>\n<span class=\"c1\"># do some other stuff, send some more requests while this one works</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response status </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'response elapsed </span><span class=\"si\">{0}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">elapsed</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"using-processpoolexecutor\">\n<h2>Using ProcessPoolExecutor</h2>\n<p>Similarly to <cite>ThreadPoolExecutor</cite>, it is possible to use an instance of\n<cite>ProcessPoolExecutor</cite>. As the name suggest, the requests will be executed\nconcurrently in separate processes rather than threads.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"c1\"># ... use as before</span>\n</pre>\n<div>\n<p>Hint</p>\n<p>Using the <cite>ProcessPoolExecutor</cite> is useful, in cases where memory\nusage per request is very high (large response) and cycling the interpretor\nis required to release memory back to OS.</p>\n</div>\n<p>A base requirement of using <cite>ProcessPoolExecutor</cite> is that the <cite>Session.request</cite>,\n<cite>FutureSession</cite> all be pickle-able.</p>\n<p>This means that only Python 3.5 is fully supported, while Python versions\n3.4 and above REQUIRE an existing <cite>requests.Session</cite> instance to be passed\nwhen initializing <cite>FutureSession</cite>. Python 2.X and &lt; 3.4 are currently not\nsupported.</p>\n<pre><span class=\"c1\"># Using python 3.4</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                         <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">Session</span><span class=\"p\">())</span>\n<span class=\"c1\"># ... use as before</span>\n</pre>\n<p>In case pickling fails, an exception is raised pointing to this documentation.</p>\n<pre><span class=\"c1\"># Using python 2.7</span>\n<span class=\"kn\">from</span> <span class=\"nn\">concurrent.futures</span> <span class=\"kn\">import</span> <span class=\"n\">ProcessPoolExecutor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span>\n<span class=\"kn\">from</span> <span class=\"nn\">requests_futures.sessions</span> <span class=\"kn\">import</span> <span class=\"n\">FuturesSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">FuturesSession</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">=</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">),</span>\n                         <span class=\"n\">session</span><span class=\"o\">=</span><span class=\"n\">Session</span><span class=\"p\">())</span>\n<span class=\"n\">Traceback</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>\n<span class=\"ne\">RuntimeError</span><span class=\"p\">:</span> <span class=\"n\">Cannot</span> <span class=\"n\">pickle</span> <span class=\"n\">function</span><span class=\"o\">.</span> <span class=\"n\">Refer</span> <span class=\"n\">to</span> <span class=\"n\">documentation</span><span class=\"p\">:</span> <span class=\"n\">https</span><span class=\"p\">:</span><span class=\"o\">//</span><span class=\"n\">github</span><span class=\"o\">.</span><span class=\"n\">com</span><span class=\"o\">/</span><span class=\"n\">ross</span><span class=\"o\">/</span><span class=\"n\">requests</span><span class=\"o\">-</span><span class=\"n\">futures</span><span class=\"o\">/</span><span class=\"c1\">#using-processpoolexecutor</span>\n</pre>\n<div>\n<p>Important</p>\n<ul>\n<li>Python &gt;= 3.4 required</li>\n<li>A session instance is required when using Python &lt; 3.5</li>\n<li>If sub-classing <cite>FuturesSession</cite> it must be importable (module global)</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<blockquote>\npip install requests-futures</blockquote>\n</div>\n\n          </div>"}, "last_serial": 5384378, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "5b2e1070c4542b225c44192c91fa78ca", "sha256": "a404ad5522bd06cc9505bf033a282d878b39f6ec7ac79abe228119fbe473cf17"}, "downloads": -1, "filename": "requests-futures-0.9.0.tar.gz", "has_sig": false, "md5_digest": "5b2e1070c4542b225c44192c91fa78ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3781, "upload_time": "2013-03-21T16:28:36", "upload_time_iso_8601": "2013-03-21T16:28:36.927530Z", "url": "https://files.pythonhosted.org/packages/4d/07/df355ea371a510bd697d45194f161e085fcb596544a4b4cb430b2be341b6/requests-futures-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "0ba07afcd2d8ab18752596d515f73ff0", "sha256": "9a99c43044f9feb3c720aa20264cb29c0155aec01bed9c3597da5e874fdea401"}, "downloads": -1, "filename": "requests-futures-0.9.1.tar.gz", "has_sig": false, "md5_digest": "0ba07afcd2d8ab18752596d515f73ff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4286, "upload_time": "2013-03-30T21:52:09", "upload_time_iso_8601": "2013-03-30T21:52:09.578522Z", "url": "https://files.pythonhosted.org/packages/7b/db/07a05000e60681c956894bf04d5fdec33d890f4701178a3e473329dc4ae0/requests-futures-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "338f58560156145b584106fc6cc39b92", "sha256": "af5fb7baf30ef4728e0344417a02a9fce6cbddb848723e6f48eeb5ad836e4e2f"}, "downloads": -1, "filename": "requests-futures-0.9.2.tar.gz", "has_sig": false, "md5_digest": "338f58560156145b584106fc6cc39b92", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3664, "upload_time": "2013-04-08T15:18:31", "upload_time_iso_8601": "2013-04-08T15:18:31.591938Z", "url": "https://files.pythonhosted.org/packages/51/2f/88f8a30c97433278651c235f623ad8cd2fbfd5278d647e806a7f0dd087d4/requests-futures-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "8e9f11e22c3ccdd2d978e7d815ece214", "sha256": "4eda31f20963b50afdda1f52b05927c959b40fd42e0ed623720d8a0a36ee0eb2"}, "downloads": -1, "filename": "requests-futures-0.9.3.tar.gz", "has_sig": false, "md5_digest": "8e9f11e22c3ccdd2d978e7d815ece214", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5140, "upload_time": "2013-04-08T15:30:49", "upload_time_iso_8601": "2013-04-08T15:30:49.990175Z", "url": "https://files.pythonhosted.org/packages/45/1c/4d456307ca42bee9adf495323d4061551d0dd9aa584143e8bd97259b300c/requests-futures-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "0954b186ebd8d875c46bbfbcb9ea9f13", "sha256": "2046313d60a3e8bd868adf401694639a7fa963ef42648bb202f077f69d35207a"}, "downloads": -1, "filename": "requests-futures-0.9.4.tar.gz", "has_sig": false, "md5_digest": "0954b186ebd8d875c46bbfbcb9ea9f13", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5202, "upload_time": "2013-06-27T21:29:36", "upload_time_iso_8601": "2013-06-27T21:29:36.970845Z", "url": "https://files.pythonhosted.org/packages/10/44/6bfc904c7a2a4768723ff45d28c8cb04bbe8bb5438e5833ec795b8332507/requests-futures-0.9.4.tar.gz", "yanked": false}], "0.9.5": [{"comment_text": "", "digests": {"md5": "e20dc6f063c70888a7f8225e349b6682", "sha256": "33aa8a3b7892850701707d7e094b1e1ce7c4f7a36ff2a1dcc2da4e01a1a00f7e"}, "downloads": -1, "filename": "requests-futures-0.9.5.tar.gz", "has_sig": false, "md5_digest": "e20dc6f063c70888a7f8225e349b6682", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5347, "upload_time": "2014-09-23T13:38:52", "upload_time_iso_8601": "2014-09-23T13:38:52.140610Z", "url": "https://files.pythonhosted.org/packages/25/43/bf8e46a309b5bb08f9d7813473ddb5f27a40d194ddf120fa4f193aa764e3/requests-futures-0.9.5.tar.gz", "yanked": false}], "0.9.7": [{"comment_text": "", "digests": {"md5": "e26d2af8099b3235d696620dcb02a75b", "sha256": "a9ca2c3480b6fac29ec5de59c146742e2ab2b60f8c68581766094edb52ea7bad"}, "downloads": -1, "filename": "requests-futures-0.9.7.tar.gz", "has_sig": false, "md5_digest": "e26d2af8099b3235d696620dcb02a75b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5571, "upload_time": "2016-02-12T03:06:33", "upload_time_iso_8601": "2016-02-12T03:06:33.326916Z", "url": "https://files.pythonhosted.org/packages/2c/f0/d9a6d4472286405956dd5ac6279fe932a86151df9816bc35afe601495819/requests-futures-0.9.7.tar.gz", "yanked": false}], "0.9.8": [{"comment_text": "", "digests": {"md5": "71e969ff398c6aa0c0dffa932b84bd84", "sha256": "76a22b95723267b53d8cc50e54d00b98d95afa02fd8449501b07a3797f46a96d"}, "downloads": -1, "filename": "requests-futures-0.9.8.tar.gz", "has_sig": false, "md5_digest": "71e969ff398c6aa0c0dffa932b84bd84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7729, "upload_time": "2018-10-21T01:25:29", "upload_time_iso_8601": "2018-10-21T01:25:29.414620Z", "url": "https://files.pythonhosted.org/packages/5c/75/bb11d835a0f1a56291f3ea87a778b41f4e5a239880feca152ad6438edcd6/requests-futures-0.9.8.tar.gz", "yanked": false}], "0.9.9": [{"comment_text": "", "digests": {"md5": "f269f4ea956bb160d8e3c65e08d2bfff", "sha256": "200729e932ec1f6d6e58101a8d2b144d48c9695f0585bc1dcf37139190f699a1"}, "downloads": -1, "filename": "requests-futures-0.9.9.tar.gz", "has_sig": false, "md5_digest": "f269f4ea956bb160d8e3c65e08d2bfff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10507, "upload_time": "2018-12-02T22:51:31", "upload_time_iso_8601": "2018-12-02T22:51:31.947611Z", "url": "https://files.pythonhosted.org/packages/e5/6b/c29ba0ce8d7d981c8099550148755846476c551f9e413801c0981f63ea91/requests-futures-0.9.9.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "601b5e90413bb00e06148752d31f0cc7", "sha256": "35547502bf1958044716a03a2f47092a89efe8f9789ab0c4c528d9c9c30bc148"}, "downloads": -1, "filename": "requests-futures-1.0.0.tar.gz", "has_sig": false, "md5_digest": "601b5e90413bb00e06148752d31f0cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10897, "upload_time": "2019-06-11T03:22:24", "upload_time_iso_8601": "2019-06-11T03:22:24.361279Z", "url": "https://files.pythonhosted.org/packages/47/c4/fd48d1ac5110a5457c71ac7cc4caa93da10a80b8de71112430e439bdee22/requests-futures-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "601b5e90413bb00e06148752d31f0cc7", "sha256": "35547502bf1958044716a03a2f47092a89efe8f9789ab0c4c528d9c9c30bc148"}, "downloads": -1, "filename": "requests-futures-1.0.0.tar.gz", "has_sig": false, "md5_digest": "601b5e90413bb00e06148752d31f0cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10897, "upload_time": "2019-06-11T03:22:24", "upload_time_iso_8601": "2019-06-11T03:22:24.361279Z", "url": "https://files.pythonhosted.org/packages/47/c4/fd48d1ac5110a5457c71ac7cc4caa93da10a80b8de71112430e439bdee22/requests-futures-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:06 2020"}