{"info": {"author": "Riccardo Forina", "author_email": "riccardo@forina.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development", "Topic :: Software Development :: Libraries :: Application Frameworks"], "description": "django-admin-bootstrapped\n=========================\n\n.. image:: https://travis-ci.org/django-admin-bootstrapped/django-admin-bootstrapped.svg\n    :target: https://travis-ci.org/django-admin-bootstrapped/django-admin-bootstrapped\n\n|PyPI version|\n\nA Django admin theme using Bootstrap. It doesn't need any kind\nof modification on your side, just add it to the installed apps.\n\nRequirements\n------------\n\n-  Django ``1.10 and 1.11``\n\nWith Django older version of Django, user the original package -> https://github.com/django-admin-bootstrapped/django-admin-bootstrapped\n\nInstallation\n------------\n\n1. Download it from PyPi with ``pip install https://github.com/rubgombar1/django-admin-bootstrapped/archive/master.zip``\n2. Add into the ``INSTALLED_APPS`` **before** ``'django.contrib.admin'``:\n\n::\n\n    'django_admin_bootstrapped',\n\n3. Have fun!\n\nConfiguration\n-------------\n\nFor a full bootstrap3 experience you may want to use a custom renderer for the fields.\nThere's one available in tree that requires the ``django-bootstrap3`` application installed.\nYou have to add to your project settings file:\n::\n\n    DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'\n\n\n`Messages <http://docs.djangoproject.com/en/dev/ref/contrib/messages>`__ will have ``alert-info`` tag by default, \nso you may want to add Bootstrap 3 tags for different message levels to make them styled appropriately.\nAdd to your project settings file:\n::\n\n    from django.contrib import messages\n\n    MESSAGE_TAGS = {\n                messages.SUCCESS: 'alert-success success',\n                messages.WARNING: 'alert-warning warning',\n                messages.ERROR: 'alert-danger error'\n    }\n\nNow, adding messages like this:\n::\n\n    messages.success(request, \"My success message\")\n    messages.warning(request, \"My warning message\")\n    messages.error(request, \"My error message\")\n\nwill result into this:\n\n.. image:: https://i.imgur.com/SQNMZZE.png\n\nGoodies\n-------\n\nAdd custom html to the change form of any model with a template\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can inject custom html on top of any change form creating a template\nnamed ``admin_model_MODELNAME_change_form.html`` into the application's\ntemplate folder. Eg:\n``myapp/templates/myapp/admin_model_mymodelname_change_form.html`` or\n``project/templates/myapp/admin_model_mymodelname_change_form.html``.\n\nInline sortable\n~~~~~~~~~~~~~~~\n\nYou can add drag&drop sorting capability to any inline with a couple of\nchanges to your code.\n\nFirst, add a ``position`` field in your model (and sort your model\naccordingly), for example:\n\n::\n\n    class TestSortable(models.Model):\n        that = models.ForeignKey(TestMe)\n        position = models.PositiveSmallIntegerField(\"Position\")\n        test_char = models.CharField(max_length=5)\n\n        class Meta:\n            ordering = ('position', )\n\nThen in your admin.py create a class to handle the inline using the\n``django_admin_bootstrapped.admin.models.SortableInline`` mixin, like\nthis:\n\n::\n\n    from django_admin_bootstrapped.admin.models import SortableInline\n    from models import TestSortable\n\n    class TestSortable(admin.StackedInline, SortableInline):\n        model = TestSortable\n        extra = 0\n\nYou can now use the inline as usual. See the screenshots section to see what the result\nwill look like.\n\nThis feature was brought to you by `Kyle Bock <https://github.com/kwbock>`__. Thank you Kyle!\n\n\nXHTML Compatible\n~~~~~~~~~~~~~~~~\n\nCompatible with both html and xhtml. To enable xhtml for your django app\nadd the following to your settings.py: DEFAULT\\_CONTENT\\_TYPE =\n'application/xhtml+xml'\n\nGeneric lookups in admin\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nAll that needs to be done is change the admin widget with either\nformfield\\_overrides like this:\n\n::\n\n    from django_admin_bootstrapped.widgets import GenericContentTypeSelect\n\n    class SomeModelAdmin(admin.ModelAdmin):\n        formfield_overrides = {\n            models.ForeignKey: {'widget': GenericContentTypeSelect},\n        }\n\nOr if you want to be more specific:\n\n::\n\n    from django_admin_bootstrapped.widgets import GenericContentTypeSelect\n\n    class SomeModelAdmin(admin.ModelAdmin):\n        def formfield_for_dbfield(self, db_field, **kwargs):\n            if db_field.name == 'content_type':\n                kwargs['widget'] = GenericContentTypeSelect\n            return super(SomeModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)\n\nIf you decide on using ``formfield_overrides`` `you should be aware of\nits limitations with relation\nfields <https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_overrides>`__.\n\nThis feature (and many more) was brought to you by `Jacob\nMagnusson <https://github.com/jmagnusson>`__. Thank you Jacob!\n\nContributing\n------------\n\nEvery code, documentation and UX contribution is welcome.\n\nFound an issue? Report it in the bugtracker!\n\nHave some free time? Help fixing an already filed issue, just remember to work on a separate branch please.\n\nScreenshots\n-----------\n\nHomepage\n~~~~~~~~\n\n.. image:: https://cloud.githubusercontent.com/assets/12932/6967318/d7064abe-d95e-11e4-91bc-6de527550557.png\n\nList view with filters in dropdown\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. image:: https://cloud.githubusercontent.com/assets/12932/6967319/d71a9c6c-d95e-11e4-86cf-47e8857582c1.png\n\nChange form view\n~~~~~~~~~~~~~~~~\n\n.. image:: https://cloud.githubusercontent.com/assets/12932/6966950/98661ba6-d95c-11e4-8bb3-e4b18759115b.png\n\n.. |PyPI version| image:: https://pypip.in/d/django-admin-bootstrapped/badge.png\n   :target: https://pypi.python.org/pypi/django-admin-bootstrapped\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rubgombar1/django-admin-bootstrapped/", "keywords": "", "license": "BSD License", "maintainer": "Ruben Gomez", "maintainer_email": "rubgomez93@gmail.com", "name": "django-admin-bootstrapped-rubgomez93", "package_url": "https://pypi.org/project/django-admin-bootstrapped-rubgomez93/", "platform": "OS Independent", "project_url": "https://pypi.org/project/django-admin-bootstrapped-rubgomez93/", "project_urls": {"Homepage": "https://github.com/rubgombar1/django-admin-bootstrapped/"}, "release_url": "https://pypi.org/project/django-admin-bootstrapped-rubgomez93/3.0.1/", "requires_dist": ["setuptools", "Django (>=1.10)"], "requires_python": "", "summary": "A Bootstrap theme for Django Admin", "version": "3.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/django-admin-bootstrapped/django-admin-bootstrapped\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/django-admin-bootstrapped/django-admin-bootstrapped.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/23326981851c31e597d9a873ff213ed86e6254b0/68747470733a2f2f7472617669732d63692e6f72672f646a616e676f2d61646d696e2d626f6f7473747261707065642f646a616e676f2d61646d696e2d626f6f7473747261707065642e737667\"></a>\n<p><a href=\"https://pypi.python.org/pypi/django-admin-bootstrapped\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fd4c65b6a82e8b4a8299822059cf956ce05e40eb/68747470733a2f2f70797069702e696e2f642f646a616e676f2d61646d696e2d626f6f7473747261707065642f62616467652e706e67\"></a></p>\n<p>A Django admin theme using Bootstrap. It doesn\u2019t need any kind\nof modification on your side, just add it to the installed apps.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django <tt>1.10 and 1.11</tt></li>\n</ul>\n<p>With Django older version of Django, user the original package -&gt; <a href=\"https://github.com/django-admin-bootstrapped/django-admin-bootstrapped\" rel=\"nofollow\">https://github.com/django-admin-bootstrapped/django-admin-bootstrapped</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li>Download it from PyPi with <tt>pip install <span class=\"pre\">https://github.com/rubgombar1/django-admin-bootstrapped/archive/master.zip</span></tt></li>\n<li>Add into the <tt>INSTALLED_APPS</tt> <strong>before</strong> <tt>'django.contrib.admin'</tt>:</li>\n</ol>\n<pre>'django_admin_bootstrapped',\n</pre>\n<ol>\n<li>Have fun!</li>\n</ol>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>For a full bootstrap3 experience you may want to use a custom renderer for the fields.\nThere\u2019s one available in tree that requires the <tt><span class=\"pre\">django-bootstrap3</span></tt> application installed.\nYou have to add to your project settings file:</p>\n<pre>DAB_FIELD_RENDERER = 'django_admin_bootstrapped.renderers.BootstrapFieldRenderer'\n</pre>\n<p><a href=\"http://docs.djangoproject.com/en/dev/ref/contrib/messages\" rel=\"nofollow\">Messages</a> will have <tt><span class=\"pre\">alert-info</span></tt> tag by default,\nso you may want to add Bootstrap 3 tags for different message levels to make them styled appropriately.\nAdd to your project settings file:</p>\n<pre>from django.contrib import messages\n\nMESSAGE_TAGS = {\n            messages.SUCCESS: 'alert-success success',\n            messages.WARNING: 'alert-warning warning',\n            messages.ERROR: 'alert-danger error'\n}\n</pre>\n<p>Now, adding messages like this:</p>\n<pre>messages.success(request, \"My success message\")\nmessages.warning(request, \"My warning message\")\nmessages.error(request, \"My error message\")\n</pre>\n<p>will result into this:</p>\n<img alt=\"https://i.imgur.com/SQNMZZE.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/194a4133f7d4935db9542c87298c837d53072159/68747470733a2f2f692e696d6775722e636f6d2f53514e4d5a5a452e706e67\">\n</div>\n<div id=\"goodies\">\n<h2>Goodies</h2>\n<div id=\"add-custom-html-to-the-change-form-of-any-model-with-a-template\">\n<h3>Add custom html to the change form of any model with a template</h3>\n<p>You can inject custom html on top of any change form creating a template\nnamed <tt>admin_model_MODELNAME_change_form.html</tt> into the application\u2019s\ntemplate folder. Eg:\n<tt>myapp/templates/myapp/admin_model_mymodelname_change_form.html</tt> or\n<tt>project/templates/myapp/admin_model_mymodelname_change_form.html</tt>.</p>\n</div>\n<div id=\"inline-sortable\">\n<h3>Inline sortable</h3>\n<p>You can add drag&amp;drop sorting capability to any inline with a couple of\nchanges to your code.</p>\n<p>First, add a <tt>position</tt> field in your model (and sort your model\naccordingly), for example:</p>\n<pre>class TestSortable(models.Model):\n    that = models.ForeignKey(TestMe)\n    position = models.PositiveSmallIntegerField(\"Position\")\n    test_char = models.CharField(max_length=5)\n\n    class Meta:\n        ordering = ('position', )\n</pre>\n<p>Then in your admin.py create a class to handle the inline using the\n<tt>django_admin_bootstrapped.admin.models.SortableInline</tt> mixin, like\nthis:</p>\n<pre>from django_admin_bootstrapped.admin.models import SortableInline\nfrom models import TestSortable\n\nclass TestSortable(admin.StackedInline, SortableInline):\n    model = TestSortable\n    extra = 0\n</pre>\n<p>You can now use the inline as usual. See the screenshots section to see what the result\nwill look like.</p>\n<p>This feature was brought to you by <a href=\"https://github.com/kwbock\" rel=\"nofollow\">Kyle Bock</a>. Thank you Kyle!</p>\n</div>\n<div id=\"xhtml-compatible\">\n<h3>XHTML Compatible</h3>\n<p>Compatible with both html and xhtml. To enable xhtml for your django app\nadd the following to your settings.py: DEFAULT_CONTENT_TYPE =\n\u2018application/xhtml+xml\u2019</p>\n</div>\n<div id=\"generic-lookups-in-admin\">\n<h3>Generic lookups in admin</h3>\n<p>All that needs to be done is change the admin widget with either\nformfield_overrides like this:</p>\n<pre>from django_admin_bootstrapped.widgets import GenericContentTypeSelect\n\nclass SomeModelAdmin(admin.ModelAdmin):\n    formfield_overrides = {\n        models.ForeignKey: {'widget': GenericContentTypeSelect},\n    }\n</pre>\n<p>Or if you want to be more specific:</p>\n<pre>from django_admin_bootstrapped.widgets import GenericContentTypeSelect\n\nclass SomeModelAdmin(admin.ModelAdmin):\n    def formfield_for_dbfield(self, db_field, **kwargs):\n        if db_field.name == 'content_type':\n            kwargs['widget'] = GenericContentTypeSelect\n        return super(SomeModelAdmin, self).formfield_for_dbfield(db_field, **kwargs)\n</pre>\n<p>If you decide on using <tt>formfield_overrides</tt> <a href=\"https://docs.djangoproject.com/en/dev/ref/contrib/admin/#django.contrib.admin.ModelAdmin.formfield_overrides\" rel=\"nofollow\">you should be aware of\nits limitations with relation\nfields</a>.</p>\n<p>This feature (and many more) was brought to you by <a href=\"https://github.com/jmagnusson\" rel=\"nofollow\">Jacob\nMagnusson</a>. Thank you Jacob!</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Every code, documentation and UX contribution is welcome.</p>\n<p>Found an issue? Report it in the bugtracker!</p>\n<p>Have some free time? Help fixing an already filed issue, just remember to work on a separate branch please.</p>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<div id=\"homepage\">\n<h3>Homepage</h3>\n<img alt=\"https://cloud.githubusercontent.com/assets/12932/6967318/d7064abe-d95e-11e4-91bc-6de527550557.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5abf947c2b3c5e8637e64a7b61ac37634dd632b9/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31323933322f363936373331382f64373036346162652d643935652d313165342d393162632d3664653532373535303535372e706e67\">\n</div>\n<div id=\"list-view-with-filters-in-dropdown\">\n<h3>List view with filters in dropdown</h3>\n<img alt=\"https://cloud.githubusercontent.com/assets/12932/6967319/d71a9c6c-d95e-11e4-86cf-47e8857582c1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dacb68b6452fee2e01c20abbff1114d68d157373/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31323933322f363936373331392f64373161396336632d643935652d313165342d383663662d3437653838353735383263312e706e67\">\n</div>\n<div id=\"change-form-view\">\n<h3>Change form view</h3>\n<img alt=\"https://cloud.githubusercontent.com/assets/12932/6966950/98661ba6-d95c-11e4-8bb3-e4b18759115b.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ddba7c57420ade0e65b5ceb584be82e5774b094f/68747470733a2f2f636c6f75642e67697468756275736572636f6e74656e742e636f6d2f6173736574732f31323933322f363936363935302f39383636316261362d643935632d313165342d386262332d6534623138373539313135622e706e67\">\n</div>\n</div>\n\n          </div>"}, "last_serial": 3973341, "releases": {"3.0.1": [{"comment_text": "", "digests": {"md5": "c7b157878987e9477dec30667a760f49", "sha256": "3da00b1916b1e30721dadfa40690d26bb794db9f6df1afb606a1e93a7c8909b5"}, "downloads": -1, "filename": "django_admin_bootstrapped_rubgomez93-3.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "c7b157878987e9477dec30667a760f49", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 403600, "upload_time": "2018-06-18T12:30:59", "upload_time_iso_8601": "2018-06-18T12:30:59.668308Z", "url": "https://files.pythonhosted.org/packages/a7/3f/f949e764e15496bb5080d54b43a88533fd8bde9a79b7d791640bd81aa4b7/django_admin_bootstrapped_rubgomez93-3.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f3b65c7e53554e40b73aaa5e8a83901", "sha256": "267b7264e02a407b3e06ef52f2c4ff9d4ebbd15d16e514c7eb5c43032d417cfa"}, "downloads": -1, "filename": "django-admin-bootstrapped-rubgomez93-3.0.1.tar.gz", "has_sig": false, "md5_digest": "4f3b65c7e53554e40b73aaa5e8a83901", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378529, "upload_time": "2018-06-18T12:31:01", "upload_time_iso_8601": "2018-06-18T12:31:01.845568Z", "url": "https://files.pythonhosted.org/packages/d6/b7/d5230307e0814762f39e88600ade1fd844bcf56a9f68235a9433a0e40084/django-admin-bootstrapped-rubgomez93-3.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7b157878987e9477dec30667a760f49", "sha256": "3da00b1916b1e30721dadfa40690d26bb794db9f6df1afb606a1e93a7c8909b5"}, "downloads": -1, "filename": "django_admin_bootstrapped_rubgomez93-3.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "c7b157878987e9477dec30667a760f49", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 403600, "upload_time": "2018-06-18T12:30:59", "upload_time_iso_8601": "2018-06-18T12:30:59.668308Z", "url": "https://files.pythonhosted.org/packages/a7/3f/f949e764e15496bb5080d54b43a88533fd8bde9a79b7d791640bd81aa4b7/django_admin_bootstrapped_rubgomez93-3.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4f3b65c7e53554e40b73aaa5e8a83901", "sha256": "267b7264e02a407b3e06ef52f2c4ff9d4ebbd15d16e514c7eb5c43032d417cfa"}, "downloads": -1, "filename": "django-admin-bootstrapped-rubgomez93-3.0.1.tar.gz", "has_sig": false, "md5_digest": "4f3b65c7e53554e40b73aaa5e8a83901", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 378529, "upload_time": "2018-06-18T12:31:01", "upload_time_iso_8601": "2018-06-18T12:31:01.845568Z", "url": "https://files.pythonhosted.org/packages/d6/b7/d5230307e0814762f39e88600ade1fd844bcf56a9f68235a9433a0e40084/django-admin-bootstrapped-rubgomez93-3.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:50 2020"}