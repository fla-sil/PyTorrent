{"info": {"author": "watxaut", "author_email": "watxaut@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "# Gimpify\n\nThis repository is intended for creating automatic montages: it pastes\nfaces onto others faces. That's about it.\n\n## DISCLAIMER\n- The aim of this package is not to make it beautiful, it is to make\nit a nightmare\n- I know there is still room for improvement on the maths for pasting \nimages. I will work on it when I have time. Help appreciated! \n\n## Installation\n```bash\npip3 install gimpify-watxaut\n```\nThis package uses [face-recognition](https://github.com/ageitgey/face_recognition) \nfrom Adam Geitgey to get the faces and \n[pillow](https://pillow.readthedocs.io/en/stable/) to modify and paste \nthem. Both get installed when installing this package.\n\n## How to run?\n### 1. Search for your images\nFirst, you will need two separate folders, one with 'backgrounds' \nand another with 'faces'. When I talk about backgrounds I mean \nphotographs with people AND faces visible. In fact, only the faces are\nneeded, no need to show any other part of the body. One example of\nbackground:\n\n<img src=\"https://github.com/watxaut/gimpify/blob/master/resources/test/backgrounds/theoffice.png\" height=\"400\" title=\"This is a background\">\n\nWhen I talk about faces, I mean PNG images with only the face visible, \nlike this one:\n\n<img src=\"https://github.com/watxaut/gimpify/blob/master/resources/test/faces/boy.png\" height=\"300\" title=\"This is a face\">\n\nAnd the final result should be close to this one:\n\n<img src=\"https://github.com/watxaut/gimpify/blob/master/resources/screenshots/montage.png\" height=\"400\" title=\"oh le montage\">\n\nAs you see, the math is a little off, I know it.\n\nWhen you have this two folders populated, you are ready to start the\nsecond phase.\n\n### 2.1 The fast approach\nIf you need to test the power of this package fast, you can do the \nfollowing:\n```python\nimport gimpify\nmontages_path = \"path/out/montages\"\npath_to_faces_folder = \"path/to/folder/faces\"\npath_to_backgrounds_folder = \"path/to/folder/backgrounds\"\nonly_face = False\nmontage_file_path = gimpify.create_random_montage(montages_path, path_to_backgrounds_folder, path_to_faces_folder, only_face)\n```\n\nIn the montage_file_path variable will be the path to your newly created\nmontage. This will create a json file inside the images paths so that\nthe next time will try to get the json instead of loading again the \nimages.\n\nIf the function finds that you already have a json file inside these \nfolders provided (background's and face's), it will try to use this \njson files to speed up the execution. If you have new images, it will\nonly process this new images (= new paths/names). If, instead, you \nremove images from the folder, the json will also be updated.\n\nIf, for any reason, you don't change the name of an image while the\nimage itself is different, you will have to erase the json (or recreate\nit, as shown down below). \n\n\n### 2.2: The curated way\nIf you are more sophisticated, you can create both json files with \nthe face parameters before creating a montage, and then call one of the \nthree methods below to obtain the image. \nIf you put new images programmatically you can recreate this json files \nand use this new images right away.\n\n\n#### 2.2.1 First, create_face_json and create_background_json\nThe following code will get the aforementioned done:\n```python\nimport gimpify\npath_to_faces_folder = \"path/to/folder/faces\"\npath_to_backgrounds_folder = \"path/to/folder/backgrounds\"\njson_faces = \"path/to/json/faces.json\"\njson_backgrounds = \"path/to/json/backgrounds.json\"\ngimpify.create_face_json(path_to_faces_folder, path_to_faces_folder, just_update=True)\ngimpify.create_background_json(path_to_backgrounds_folder, path_to_backgrounds_folder)\n```\n\nThen use this paths to both json files to create random images \n(shown down below). Keep in mind that one the json is created, if you\nput new images in the folder, and the option just_update is True and \nthere is already a json file with the parameters, it\nwill automatically add only these new images and erase the ones that\nwere removed. If it is false, it will create the json again.\nYou have now \n3 different options regarding the way you want your montages:\n\n#### 2.2.2a Use gimpify.create_random_montage\nWe saw this method early on, but it's worth mentioning. It takes 4\narguments:\n\n* :param montage_folder_path: {str} folder to save the montage\n* :param b_path: {str} folder background path or json path with the face params. If folder provided, the 'backgrounds.json' file\n    will be created inside the backgrounds' folder. If json provided, it will use the json to load the params (faster)\n* :param f_path: {str} folder face path or json path with the face's params. If folder provided, the 'faces.json' file\n    will be created inside the faces' folder. If json provided, it will use the json to load the params (faster)\n* :param only_face: {bool}. False by default. Will leave hair and chin if False, else will crop the face\n\nThe use for this one is the following:\n```python\nimport gimpify\njson_faces = \"path/to/json/faces.json\"\njson_backgrounds = \"path/to/json/backgrounds.json\"\nmontage_folder_path = \"path/out/montages\"\nonly_face = False\npath_to_new_image = gimpify.create_random_montage(montage_folder_path, json_backgrounds, json_faces, only_face)\n```\n\nThis way, the module does not create the json params again and thus \nincreasing the speed of the creation.\n\n#### 2.2.2b Use gimpify.create_montage_for_background\nUse this method if you want to create a montage for a background of your\npleasing, a new photograph that you just made or you need a fast \nprocessing for just a background and you don't need to process all the\nothers. E.g.: you send a selfie to a bot and the bot answers with a\nmontage. It takes 4 arguments:\n\n* :param montage_folder_path: {str} folder to save the montage\n* :param im_b_path: {str} with the background image path\n* :param f_path: {str} folder face path or json path with the face's params. If folder provided, the 'faces.json' file\n    will be created inside the faces' folder\n* :param only_face: {bool} Whether to crop the hair and chin of the face or not\n\n```python\nimport gimpify\njson_faces = \"path/to/json/faces.json\"\nim_b_path = \"path/to/background_image.png\"\nmontage_folder_path = \"path/out/montages\"\nonly_face = False\npath_to_new_image = gimpify.create_montage_for_background(montage_folder_path, im_b_path, json_faces, only_face)\n```\n\nThis method will not store the image face parameters json.\n\n#### 2.2.2c Use gimpify.create_montage\nThis method is the lowest level available and it returns a PIL Image. It takes in 3 arguments:\n* :param im_background: {str, dict} str if is an image path or dict if it comes from a json read from a background's folder\n* :param json_faces: {dict} json read with all the information about the faces' parameters\n* :param only_face: {bool}. False by default. Will leave hair and chin if False, else will crop the face\n\n-> Returns a PIL Image.Image variable with the image for you to do\nwhatever you want.\n\nThe use is the following one:\n```python\nimport gimpify\nimport json\n\nf_faces = open(\"path/to/json/faces.json\", \"r\")\njson_faces: dict = json.load(f_faces)\nf_faces.close()\nim_background = \"path/to/background_image.png\"\nonly_face = False\npath_to_new_image = gimpify.create_montage(im_background, json_faces, only_face)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/watxaut/gimpify", "keywords": "face recognition montage", "license": "", "maintainer": "", "maintainer_email": "", "name": "gimpify-watxaut", "package_url": "https://pypi.org/project/gimpify-watxaut/", "platform": "", "project_url": "https://pypi.org/project/gimpify-watxaut/", "project_urls": {"Homepage": "https://github.com/watxaut/gimpify", "Source": "https://github.com/watxaut/gimpify", "Tracker": "https://github.com/watxaut/gimpify/issues"}, "release_url": "https://pypi.org/project/gimpify-watxaut/0.0.1/", "requires_dist": ["face-recognition (>=1.2.3)", "Pillow (>=7.0.0)"], "requires_python": ">=3.7", "summary": "Just a package to create automatic face image montages", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gimpify</h1>\n<p>This repository is intended for creating automatic montages: it pastes\nfaces onto others faces. That's about it.</p>\n<h2>DISCLAIMER</h2>\n<ul>\n<li>The aim of this package is not to make it beautiful, it is to make\nit a nightmare</li>\n<li>I know there is still room for improvement on the maths for pasting\nimages. I will work on it when I have time. Help appreciated!</li>\n</ul>\n<h2>Installation</h2>\n<pre>pip3 install gimpify-watxaut\n</pre>\n<p>This package uses <a href=\"https://github.com/ageitgey/face_recognition\" rel=\"nofollow\">face-recognition</a>\nfrom Adam Geitgey to get the faces and\n<a href=\"https://pillow.readthedocs.io/en/stable/\" rel=\"nofollow\">pillow</a> to modify and paste\nthem. Both get installed when installing this package.</p>\n<h2>How to run?</h2>\n<h3>1. Search for your images</h3>\n<p>First, you will need two separate folders, one with 'backgrounds'\nand another with 'faces'. When I talk about backgrounds I mean\nphotographs with people AND faces visible. In fact, only the faces are\nneeded, no need to show any other part of the body. One example of\nbackground:</p>\n<img height=\"400\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/775ed352d2dc6a199c2cc6336cc0a173b5160247/68747470733a2f2f6769746875622e636f6d2f776174786175742f67696d706966792f626c6f622f6d61737465722f7265736f75726365732f746573742f6261636b67726f756e64732f7468656f66666963652e706e67\">\n<p>When I talk about faces, I mean PNG images with only the face visible,\nlike this one:</p>\n<img height=\"300\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/95ce7c7bb3123774142c8bf250e32078393fdcdf/68747470733a2f2f6769746875622e636f6d2f776174786175742f67696d706966792f626c6f622f6d61737465722f7265736f75726365732f746573742f66616365732f626f792e706e67\">\n<p>And the final result should be close to this one:</p>\n<img height=\"400\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98f1b150b8470c5a93c23f72496eaf3f3a261fe4/68747470733a2f2f6769746875622e636f6d2f776174786175742f67696d706966792f626c6f622f6d61737465722f7265736f75726365732f73637265656e73686f74732f6d6f6e746167652e706e67\">\n<p>As you see, the math is a little off, I know it.</p>\n<p>When you have this two folders populated, you are ready to start the\nsecond phase.</p>\n<h3>2.1 The fast approach</h3>\n<p>If you need to test the power of this package fast, you can do the\nfollowing:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gimpify</span>\n<span class=\"n\">montages_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/out/montages\"</span>\n<span class=\"n\">path_to_faces_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/faces\"</span>\n<span class=\"n\">path_to_backgrounds_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/backgrounds\"</span>\n<span class=\"n\">only_face</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">montage_file_path</span> <span class=\"o\">=</span> <span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_random_montage</span><span class=\"p\">(</span><span class=\"n\">montages_path</span><span class=\"p\">,</span> <span class=\"n\">path_to_backgrounds_folder</span><span class=\"p\">,</span> <span class=\"n\">path_to_faces_folder</span><span class=\"p\">,</span> <span class=\"n\">only_face</span><span class=\"p\">)</span>\n</pre>\n<p>In the montage_file_path variable will be the path to your newly created\nmontage. This will create a json file inside the images paths so that\nthe next time will try to get the json instead of loading again the\nimages.</p>\n<p>If the function finds that you already have a json file inside these\nfolders provided (background's and face's), it will try to use this\njson files to speed up the execution. If you have new images, it will\nonly process this new images (= new paths/names). If, instead, you\nremove images from the folder, the json will also be updated.</p>\n<p>If, for any reason, you don't change the name of an image while the\nimage itself is different, you will have to erase the json (or recreate\nit, as shown down below).</p>\n<h3>2.2: The curated way</h3>\n<p>If you are more sophisticated, you can create both json files with\nthe face parameters before creating a montage, and then call one of the\nthree methods below to obtain the image.\nIf you put new images programmatically you can recreate this json files\nand use this new images right away.</p>\n<h4>2.2.1 First, create_face_json and create_background_json</h4>\n<p>The following code will get the aforementioned done:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gimpify</span>\n<span class=\"n\">path_to_faces_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/faces\"</span>\n<span class=\"n\">path_to_backgrounds_folder</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/folder/backgrounds\"</span>\n<span class=\"n\">json_faces</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/json/faces.json\"</span>\n<span class=\"n\">json_backgrounds</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/json/backgrounds.json\"</span>\n<span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_face_json</span><span class=\"p\">(</span><span class=\"n\">path_to_faces_folder</span><span class=\"p\">,</span> <span class=\"n\">path_to_faces_folder</span><span class=\"p\">,</span> <span class=\"n\">just_update</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_background_json</span><span class=\"p\">(</span><span class=\"n\">path_to_backgrounds_folder</span><span class=\"p\">,</span> <span class=\"n\">path_to_backgrounds_folder</span><span class=\"p\">)</span>\n</pre>\n<p>Then use this paths to both json files to create random images\n(shown down below). Keep in mind that one the json is created, if you\nput new images in the folder, and the option just_update is True and\nthere is already a json file with the parameters, it\nwill automatically add only these new images and erase the ones that\nwere removed. If it is false, it will create the json again.\nYou have now\n3 different options regarding the way you want your montages:</p>\n<h4>2.2.2a Use gimpify.create_random_montage</h4>\n<p>We saw this method early on, but it's worth mentioning. It takes 4\narguments:</p>\n<ul>\n<li>:param montage_folder_path: {str} folder to save the montage</li>\n<li>:param b_path: {str} folder background path or json path with the face params. If folder provided, the 'backgrounds.json' file\nwill be created inside the backgrounds' folder. If json provided, it will use the json to load the params (faster)</li>\n<li>:param f_path: {str} folder face path or json path with the face's params. If folder provided, the 'faces.json' file\nwill be created inside the faces' folder. If json provided, it will use the json to load the params (faster)</li>\n<li>:param only_face: {bool}. False by default. Will leave hair and chin if False, else will crop the face</li>\n</ul>\n<p>The use for this one is the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gimpify</span>\n<span class=\"n\">json_faces</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/json/faces.json\"</span>\n<span class=\"n\">json_backgrounds</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/json/backgrounds.json\"</span>\n<span class=\"n\">montage_folder_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/out/montages\"</span>\n<span class=\"n\">only_face</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">path_to_new_image</span> <span class=\"o\">=</span> <span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_random_montage</span><span class=\"p\">(</span><span class=\"n\">montage_folder_path</span><span class=\"p\">,</span> <span class=\"n\">json_backgrounds</span><span class=\"p\">,</span> <span class=\"n\">json_faces</span><span class=\"p\">,</span> <span class=\"n\">only_face</span><span class=\"p\">)</span>\n</pre>\n<p>This way, the module does not create the json params again and thus\nincreasing the speed of the creation.</p>\n<h4>2.2.2b Use gimpify.create_montage_for_background</h4>\n<p>Use this method if you want to create a montage for a background of your\npleasing, a new photograph that you just made or you need a fast\nprocessing for just a background and you don't need to process all the\nothers. E.g.: you send a selfie to a bot and the bot answers with a\nmontage. It takes 4 arguments:</p>\n<ul>\n<li>:param montage_folder_path: {str} folder to save the montage</li>\n<li>:param im_b_path: {str} with the background image path</li>\n<li>:param f_path: {str} folder face path or json path with the face's params. If folder provided, the 'faces.json' file\nwill be created inside the faces' folder</li>\n<li>:param only_face: {bool} Whether to crop the hair and chin of the face or not</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gimpify</span>\n<span class=\"n\">json_faces</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/json/faces.json\"</span>\n<span class=\"n\">im_b_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/background_image.png\"</span>\n<span class=\"n\">montage_folder_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/out/montages\"</span>\n<span class=\"n\">only_face</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">path_to_new_image</span> <span class=\"o\">=</span> <span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_montage_for_background</span><span class=\"p\">(</span><span class=\"n\">montage_folder_path</span><span class=\"p\">,</span> <span class=\"n\">im_b_path</span><span class=\"p\">,</span> <span class=\"n\">json_faces</span><span class=\"p\">,</span> <span class=\"n\">only_face</span><span class=\"p\">)</span>\n</pre>\n<p>This method will not store the image face parameters json.</p>\n<h4>2.2.2c Use gimpify.create_montage</h4>\n<p>This method is the lowest level available and it returns a PIL Image. It takes in 3 arguments:</p>\n<ul>\n<li>:param im_background: {str, dict} str if is an image path or dict if it comes from a json read from a background's folder</li>\n<li>:param json_faces: {dict} json read with all the information about the faces' parameters</li>\n<li>:param only_face: {bool}. False by default. Will leave hair and chin if False, else will crop the face</li>\n</ul>\n<p>-&gt; Returns a PIL Image.Image variable with the image for you to do\nwhatever you want.</p>\n<p>The use is the following one:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gimpify</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">f_faces</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"path/to/json/faces.json\"</span><span class=\"p\">,</span> <span class=\"s2\">\"r\"</span><span class=\"p\">)</span>\n<span class=\"n\">json_faces</span><span class=\"p\">:</span> <span class=\"nb\">dict</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f_faces</span><span class=\"p\">)</span>\n<span class=\"n\">f_faces</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n<span class=\"n\">im_background</span> <span class=\"o\">=</span> <span class=\"s2\">\"path/to/background_image.png\"</span>\n<span class=\"n\">only_face</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">path_to_new_image</span> <span class=\"o\">=</span> <span class=\"n\">gimpify</span><span class=\"o\">.</span><span class=\"n\">create_montage</span><span class=\"p\">(</span><span class=\"n\">im_background</span><span class=\"p\">,</span> <span class=\"n\">json_faces</span><span class=\"p\">,</span> <span class=\"n\">only_face</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6451686, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "22b070e817fdcafc3a9b47f7cc9ff378", "sha256": "1868fee0697ee05b2b2a004ba991b0aabfd3e6f4e1300cabda094577c012f61a"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "22b070e817fdcafc3a9b47f7cc9ff378", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10081, "upload_time": "2020-01-14T13:27:07", "upload_time_iso_8601": "2020-01-14T13:27:07.832424Z", "url": "https://files.pythonhosted.org/packages/df/ff/9e2e09245c4a6a5fc38fc4868275f574b8b4a774fdb3abe0469ad463aeee/gimpify_watxaut-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ecd532f9f9154041d688b10324fe733", "sha256": "fef55f45ee4522b788b81a398e8a93ef1f39ede62cdd75ffaf999382392da936"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6ecd532f9f9154041d688b10324fe733", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9217, "upload_time": "2020-01-14T13:27:09", "upload_time_iso_8601": "2020-01-14T13:27:09.620346Z", "url": "https://files.pythonhosted.org/packages/fb/11/a4dc94f5ccc08fc679d9aad872f6057cdb0a67f0287b339427df6b23fe21/gimpify-watxaut-0.0.1.tar.gz", "yanked": false}], "0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "65a39e6fe1d87c02a2936dcf165eee21", "sha256": "25ff9709d74e9ffade9b93a90d2a816bb5eef36845571c2fe1b68a8f57fecea6"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "65a39e6fe1d87c02a2936dcf165eee21", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4605, "upload_time": "2020-01-08T12:07:03", "upload_time_iso_8601": "2020-01-08T12:07:03.449030Z", "url": "https://files.pythonhosted.org/packages/45/94/1ede80d02116d696432dca6118eda54463a56f3eee7a649e39ee9c0e47c8/gimpify_watxaut-0.0.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3a420606a18f1a43f7982c30c570dae", "sha256": "d73354f9c4a26ed91d62a355b0204ba3569963150323188604e91ca73b58c18b"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "d3a420606a18f1a43f7982c30c570dae", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3357, "upload_time": "2020-01-07T10:50:07", "upload_time_iso_8601": "2020-01-07T10:50:07.616157Z", "url": "https://files.pythonhosted.org/packages/94/c3/00848aac1b07f390bd97cb80ac1e2b709ca8174411d5b3ffffe8d917cb81/gimpify-watxaut-0.0.1.dev1.tar.gz", "yanked": false}], "0.0.1.dev2": [{"comment_text": "", "digests": {"md5": "ef0f7b99165828085a4b4e42f8174065", "sha256": "876c5770163ea0e6a95ce12f4ac69bd6992aaf1b6554cf31d473ed604b44ee22"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1.dev2-py3-none-any.whl", "has_sig": false, "md5_digest": "ef0f7b99165828085a4b4e42f8174065", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4676, "upload_time": "2020-01-08T12:07:04", "upload_time_iso_8601": "2020-01-08T12:07:04.598712Z", "url": "https://files.pythonhosted.org/packages/ba/48/7618bd5dbefd165c742d6ef1911f3d2bb4080ca09337dcae3e9cfae68305/gimpify_watxaut-0.0.1.dev2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36d218e679e4e1872e04968cad25e85f", "sha256": "872eb57d40fb2600594d6e718795c12c760e88394e51be344d16abc642518b83"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1.dev2.tar.gz", "has_sig": false, "md5_digest": "36d218e679e4e1872e04968cad25e85f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3424, "upload_time": "2020-01-07T11:01:52", "upload_time_iso_8601": "2020-01-07T11:01:52.692544Z", "url": "https://files.pythonhosted.org/packages/6a/00/f22318f5584a7c0dde83aedbdd7c078a562be0d700c199e366f416b8b558/gimpify-watxaut-0.0.1.dev2.tar.gz", "yanked": false}], "0.0.1.dev3": [{"comment_text": "", "digests": {"md5": "877559fb84a32f7b45598e6bb89d5b4f", "sha256": "00607d5af3851ae2dbe7f0c62689a885c5a445c53e5665ca31963c42e4dc3889"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1.dev3-py3-none-any.whl", "has_sig": false, "md5_digest": "877559fb84a32f7b45598e6bb89d5b4f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4676, "upload_time": "2020-01-08T12:07:05", "upload_time_iso_8601": "2020-01-08T12:07:05.717288Z", "url": "https://files.pythonhosted.org/packages/18/f3/095c809c27bd3739e2df13f976f85b956c3c93af93c74704999303918b22/gimpify_watxaut-0.0.1.dev3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8fbb9fb24fae427ec412958c996763e4", "sha256": "4818df3363da1bfeb300735edb41b1cd96d1decb3e57869940bd0ae230324dad"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1.dev3.tar.gz", "has_sig": false, "md5_digest": "8fbb9fb24fae427ec412958c996763e4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3424, "upload_time": "2020-01-07T11:21:16", "upload_time_iso_8601": "2020-01-07T11:21:16.346785Z", "url": "https://files.pythonhosted.org/packages/68/da/3fd355b9c5b4df6a87dc6249ea61d895c8a530f74bd5d6a97300dde87f9f/gimpify-watxaut-0.0.1.dev3.tar.gz", "yanked": false}], "0.0.1a1": [{"comment_text": "", "digests": {"md5": "00a7ce64fd5d78fcce0d3ba8c89d043a", "sha256": "06e1269ff13d90419d0b147d7f27215f20ae0353f02e81c1c9fad8f1a9172e1c"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1a1-py3-none-any.whl", "has_sig": false, "md5_digest": "00a7ce64fd5d78fcce0d3ba8c89d043a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6966, "upload_time": "2020-01-08T12:07:07", "upload_time_iso_8601": "2020-01-08T12:07:07.157456Z", "url": "https://files.pythonhosted.org/packages/0a/23/42aeb61a6700e1216e757e4f9dfe05c38d77f6a0e16f733de3144474baf7/gimpify_watxaut-0.0.1a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07938f39f18b4a6fab78308bf70ad009", "sha256": "5d4a60faa210fd83ffe1fea8d67d6dfd0057805f244e94e2bc5ef8727e17ea8f"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1a1.tar.gz", "has_sig": false, "md5_digest": "07938f39f18b4a6fab78308bf70ad009", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5161, "upload_time": "2020-01-07T19:07:27", "upload_time_iso_8601": "2020-01-07T19:07:27.716328Z", "url": "https://files.pythonhosted.org/packages/f5/d9/a23b66ea38a60e219b61dc467666eb0811cbb10f1b4c0c55043ab4e2a974/gimpify-watxaut-0.0.1a1.tar.gz", "yanked": false}], "0.0.1a2": [{"comment_text": "", "digests": {"md5": "b6db1354ffe1c1bb744df3834c614ced", "sha256": "156736cb518f83eb3614a3f35e3f3d35b3838c6c8f4875b477fd93a1b17728ad"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1a2-py3-none-any.whl", "has_sig": false, "md5_digest": "b6db1354ffe1c1bb744df3834c614ced", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 1438, "upload_time": "2020-01-08T12:07:08", "upload_time_iso_8601": "2020-01-08T12:07:08.533931Z", "url": "https://files.pythonhosted.org/packages/08/f8/f3053698ca408967fab55e8b0a6dbf9e168c4b1f249920f02fd2bdf0f75a/gimpify_watxaut-0.0.1a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "658dbd733625c33bcc1a7dfa548e4445", "sha256": "470d715014e8788747cd9cf9c96e4a1ed935dd71a02227996422a4e0de2e9a9b"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1a2.tar.gz", "has_sig": false, "md5_digest": "658dbd733625c33bcc1a7dfa548e4445", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5184, "upload_time": "2020-01-07T19:20:49", "upload_time_iso_8601": "2020-01-07T19:20:49.189083Z", "url": "https://files.pythonhosted.org/packages/f6/ef/76e9e53aaa60a567351922806ae32ad8e5da6debf13d6f1185e2deba2413/gimpify-watxaut-0.0.1a2.tar.gz", "yanked": false}], "0.0.1a3": [{"comment_text": "", "digests": {"md5": "2ee1464909791e4154dabcf83141b68a", "sha256": "492e10310f9920e068dafc2d5613cded29a658c8669735fd11d1734c766a0514"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "2ee1464909791e4154dabcf83141b68a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 6979, "upload_time": "2020-01-08T12:07:09", "upload_time_iso_8601": "2020-01-08T12:07:09.608909Z", "url": "https://files.pythonhosted.org/packages/89/15/27c2d0234c229073b2ab42952519ae4ace7a1732cb9cdcc9845d7612affd/gimpify_watxaut-0.0.1a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "355f1734b3bcd97fdc27c3e87df375ea", "sha256": "dea98441b34c90797e5efb626a1949a01778a6999fa68df6c47e4d6e49a24b2e"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1a3.tar.gz", "has_sig": false, "md5_digest": "355f1734b3bcd97fdc27c3e87df375ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5357, "upload_time": "2020-01-08T12:07:56", "upload_time_iso_8601": "2020-01-08T12:07:56.823323Z", "url": "https://files.pythonhosted.org/packages/15/38/5f912858d70d63f10790895dfd85f79e902d34f65c004fe4cc243bb3587d/gimpify-watxaut-0.0.1a3.tar.gz", "yanked": false}], "0.0.1a4": [{"comment_text": "", "digests": {"md5": "16df3f6a4d733f6092916f0c4472e03b", "sha256": "3f5d5a523a263cf879f10b9a92c18092f81b0ffb2de74e5eb06a8722593be6b9"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1a4-py3-none-any.whl", "has_sig": false, "md5_digest": "16df3f6a4d733f6092916f0c4472e03b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 8747, "upload_time": "2020-01-13T17:36:25", "upload_time_iso_8601": "2020-01-13T17:36:25.938221Z", "url": "https://files.pythonhosted.org/packages/b7/cb/c764ed61714f53aa99c40abcd017ad1e022bf32d823b8c6edd20cc99a8ec/gimpify_watxaut-0.0.1a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a693f29d25e4df03f32b9cf328dca10d", "sha256": "c1b34bd6676721b94bf0a37f7d1ae23665f8224c674f30aa273b5b8ff968aa69"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1a4.tar.gz", "has_sig": false, "md5_digest": "a693f29d25e4df03f32b9cf328dca10d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 7389, "upload_time": "2020-01-13T17:36:27", "upload_time_iso_8601": "2020-01-13T17:36:27.367393Z", "url": "https://files.pythonhosted.org/packages/1e/e6/10f03932cc6897619af26a9e80949817841f9f4a38305174dcb15c44b3db/gimpify-watxaut-0.0.1a4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22b070e817fdcafc3a9b47f7cc9ff378", "sha256": "1868fee0697ee05b2b2a004ba991b0aabfd3e6f4e1300cabda094577c012f61a"}, "downloads": -1, "filename": "gimpify_watxaut-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "22b070e817fdcafc3a9b47f7cc9ff378", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 10081, "upload_time": "2020-01-14T13:27:07", "upload_time_iso_8601": "2020-01-14T13:27:07.832424Z", "url": "https://files.pythonhosted.org/packages/df/ff/9e2e09245c4a6a5fc38fc4868275f574b8b4a774fdb3abe0469ad463aeee/gimpify_watxaut-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ecd532f9f9154041d688b10324fe733", "sha256": "fef55f45ee4522b788b81a398e8a93ef1f39ede62cdd75ffaf999382392da936"}, "downloads": -1, "filename": "gimpify-watxaut-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6ecd532f9f9154041d688b10324fe733", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 9217, "upload_time": "2020-01-14T13:27:09", "upload_time_iso_8601": "2020-01-14T13:27:09.620346Z", "url": "https://files.pythonhosted.org/packages/fb/11/a4dc94f5ccc08fc679d9aad872f6057cdb0a67f0287b339427df6b23fe21/gimpify-watxaut-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:25 2020"}