{"info": {"author": "Louis Paternault", "author_email": "spalax+python@gresille.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: User Interfaces"], "description": "argdispatch \ud83d\udc08 Drop-in replacement for `argparse` dispatching subcommand calls to functions, modules or binaries\n================================================================================================================\n\nIf your parser has less than five subcommands, you can parse them with ``argparse``. If you have more, you still can, but you will get a huge, unreadable code. This module makes this easier by dispatching subcommand calls to functions, modules or binaries.\n\nExamples\n--------\n\nExample 1 : Manual definition of subcommands\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nFor instance, consider the following code for ``mycommand.py``:\n\n.. code-block:: python\n\n   import sys\n   from argdispatch import ArgumentParser\n\n   def foo(args):\n       \"\"\"A function associated to subcommand `foo`.\"\"\"\n       print(\"Doing interesting stuff\")\n       sys.exit(1)\n\n   if __name__ == \"__main__\":\n       parser = ArgumentParser()\n       subparser = parser.add_subparsers()\n\n       subparser.add_function(foo)\n       subparser.add_module(\"bar\")\n       subparser.add_executable(\"baz\")\n\n        parser.parse_args()\n\nWith this simple code:\n\n* ``mycommand.py foo -v --arg=2`` is equivalent to the python code ``foo(['-v', '--arg=2'])``;\n* ``mycommand.py bar -v --arg=2`` is equivalent to ``python -m bar -v --arg=2``;\n* ``mycommand.py baz -v --arg=2`` is equivalent to ``baz -v --arg=2``.\n\nThen, each function, module or binary does whatever it wants with the arguments.\n\nExample 2 : Automatic definition of subcommands\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nWith programs like `git <http://git-scm.com/>`_, if a ``git-foo`` binary exists, then calling ``git foo --some=arguments`` is equivalent to ``git-foo --some=arguments``. The following code, in ``myprogram.py`` copies this behaviour:\n\n.. code-block:: python\n\n   import sys\n   from argdispatch import ArgumentParser\n\n   if __name__ == \"__main__\":\n       parser = ArgumentParser()\n       subparser = parser.add_subparsers()\n\n       subparser.add_submodules(\"myprogram\")\n       subparser.add_prefix_executables(\"myprogram-\")\n\n       parser.parse_args()\n\nWith this program, given that binary ``myprogram-foo`` and python module ``myprogram.bar.__main__.py`` exist:\n\n* ``myprogram foo -v --arg=2`` is equivalent to ``myprogram-foo -v --arg=2``;\n* ``myprogram bar -v --arg=2`` is equivalent to ``python -m myprogram.bar -v --arg=2``.\n\nExample 3 : Defining subcommands with entry points\n--------------------------------------------------\n\nNow that your program is popular, people start writing plugins. Great! You want to allow them to add subcommands to your program. To do so, simply use this code:\n\n.. code-block:: python\n\n   import sys\n   from argdispatch import ArgumentParser\n\n   if __name__ == \"__main__\":\n       parser = ArgumentParser()\n       subparser = parser.add_subparsers()\n\n       # You probably should only have one of those.\n       subparser.add_entrypoints_functions(\"myprogram.subcommand.function\")\n       subparser.add_entrypoints_modules(\"myprogram.subcommand.module\")\n\n       parser.parse_args()\n\nWith this code, plugin writers can add lines like those in their ``setup.py``:\n\n.. code-block:: python\n\n    entry_points={\n        \"myprogram.subcommand.function\": [\n            \"foo = mypluginfoo:myfunction\"\n            ],\n        \"myprogram.subcommand.module\": [\n            \"bar = mypluginbar\"\n            ],\n        }\n\nThen, given than function ``myfunction()`` exists in module ``mypluginfoo``, and than module ``mypluginbar`` exists:\n\n* ``myprogram foo -v --arg=2`` is equivalent to the python code ``myfunction(['-v', '--arg=2'])``;\n* ``myprogram bar -v --arg=2`` is equivalent to ``python -m mypluginbar -v --arg=2``.\n\nDocumentation\n\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nThe complete documentation is available on `readthedocs <http://argdispatch.readthedocs.io>`_.\n\nTo compile it from source, download and run::\n\n      cd doc && make html\n\nWhat's new?\n-----------\n\nSee `changelog <https://framagit.org/spalax/argdispatch/blob/master/CHANGELOG.md>`_.\n\nDownload and install\n--------------------\n\n* From sources:\n\n  * Download: https://pypi.python.org/pypi/argdispatch\n  * Install (in a `virtualenv`, if you do not want to mess with your distribution installation system)::\n\n        python3 setup.py install\n\n* From pip::\n\n    pip install argdispatch\n\n* Quick and dirty Debian (and Ubuntu?) package\n\n  This requires `stdeb <https://github.com/astraw/stdeb>`_ to be installed::\n\n      python3 setup.py --command-packages=stdeb.command bdist_deb\n      sudo dpkg -i deb_dist/argdispatch-<VERSION>_all.deb\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://framagit.org/spalax/argdispatch", "keywords": "argparse argument commandline dispatch", "license": "GPLv3 or any later version", "maintainer": "", "maintainer_email": "", "name": "argdispatch", "package_url": "https://pypi.org/project/argdispatch/", "platform": "", "project_url": "https://pypi.org/project/argdispatch/", "project_urls": {"Documentation": "http://argdispatch.readthedocs.io", "Homepage": "http://framagit.org/spalax/argdispatch", "Source": "https://framagit.org/spalax/argdispatch", "Tracker": "https://framagit.org/spalax/argdispatch/issues"}, "release_url": "https://pypi.org/project/argdispatch/1.1.2/", "requires_dist": ["setuptools"], "requires_python": "<4,>=3.6", "summary": "A drop-in replacement for `argparse` dispatching subcommand calls to functions, modules or binaries.", "version": "1.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>If your parser has less than five subcommands, you can parse them with <tt>argparse</tt>. If you have more, you still can, but you will get a huge, unreadable code. This module makes this easier by dispatching subcommand calls to functions, modules or binaries.</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<div id=\"example-1-manual-definition-of-subcommands\">\n<h3>Example 1 : Manual definition of subcommands</h3>\n<p>For instance, consider the following code for <tt>mycommand.py</tt>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argdispatch</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"A function associated to subcommand `foo`.\"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Doing interesting stuff\"</span><span class=\"p\">)</span>\n    <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">exit</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">subparser</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">()</span>\n\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_function</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_module</span><span class=\"p\">(</span><span class=\"s2\">\"bar\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_executable</span><span class=\"p\">(</span><span class=\"s2\">\"baz\"</span><span class=\"p\">)</span>\n\n     <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n</pre>\n<p>With this simple code:</p>\n<ul>\n<li><tt>mycommand.py foo <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to the python code <tt><span class=\"pre\">foo(['-v',</span> <span class=\"pre\">'--arg=2'])</span></tt>;</li>\n<li><tt>mycommand.py bar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to <tt>python <span class=\"pre\">-m</span> bar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt>;</li>\n<li><tt>mycommand.py baz <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to <tt>baz <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt>.</li>\n</ul>\n<p>Then, each function, module or binary does whatever it wants with the arguments.</p>\n</div>\n<div id=\"example-2-automatic-definition-of-subcommands\">\n<h3>Example 2 : Automatic definition of subcommands</h3>\n<p>With programs like <a href=\"http://git-scm.com/\" rel=\"nofollow\">git</a>, if a <tt><span class=\"pre\">git-foo</span></tt> binary exists, then calling <tt>git foo <span class=\"pre\">--some=arguments</span></tt> is equivalent to <tt><span class=\"pre\">git-foo</span> <span class=\"pre\">--some=arguments</span></tt>. The following code, in <tt>myprogram.py</tt> copies this behaviour:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argdispatch</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">subparser</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">()</span>\n\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_submodules</span><span class=\"p\">(</span><span class=\"s2\">\"myprogram\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_prefix_executables</span><span class=\"p\">(</span><span class=\"s2\">\"myprogram-\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n</pre>\n<p>With this program, given that binary <tt><span class=\"pre\">myprogram-foo</span></tt> and python module <tt>myprogram.bar.__main__.py</tt> exist:</p>\n<ul>\n<li><tt>myprogram foo <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to <tt><span class=\"pre\">myprogram-foo</span> <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt>;</li>\n<li><tt>myprogram bar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to <tt>python <span class=\"pre\">-m</span> myprogram.bar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt>.</li>\n</ul>\n</div>\n</div>\n<div id=\"example-3-defining-subcommands-with-entry-points\">\n<h2>Example 3 : Defining subcommands with entry points</h2>\n<p>Now that your program is popular, people start writing plugins. Great! You want to allow them to add subcommands to your program. To do so, simply use this code:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">argdispatch</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n    <span class=\"n\">subparser</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_subparsers</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># You probably should only have one of those.</span>\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_entrypoints_functions</span><span class=\"p\">(</span><span class=\"s2\">\"myprogram.subcommand.function\"</span><span class=\"p\">)</span>\n    <span class=\"n\">subparser</span><span class=\"o\">.</span><span class=\"n\">add_entrypoints_modules</span><span class=\"p\">(</span><span class=\"s2\">\"myprogram.subcommand.module\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n</pre>\n<p>With this code, plugin writers can add lines like those in their <tt>setup.py</tt>:</p>\n<pre><span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s2\">\"myprogram.subcommand.function\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"foo = mypluginfoo:myfunction\"</span>\n        <span class=\"p\">],</span>\n    <span class=\"s2\">\"myprogram.subcommand.module\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"s2\">\"bar = mypluginbar\"</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">}</span>\n</pre>\n<p>Then, given than function <tt>myfunction()</tt> exists in module <tt>mypluginfoo</tt>, and than module <tt>mypluginbar</tt> exists:</p>\n<ul>\n<li><tt>myprogram foo <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to the python code <tt><span class=\"pre\">myfunction(['-v',</span> <span class=\"pre\">'--arg=2'])</span></tt>;</li>\n<li><tt>myprogram bar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt> is equivalent to <tt>python <span class=\"pre\">-m</span> mypluginbar <span class=\"pre\">-v</span> <span class=\"pre\">--arg=2</span></tt>.</li>\n</ul>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>The complete documentation is available on <a href=\"http://argdispatch.readthedocs.io\" rel=\"nofollow\">readthedocs</a>.</p>\n<p>To compile it from source, download and run:</p>\n<pre>cd doc &amp;&amp; make html\n</pre>\n</div>\n</div>\n<div id=\"what-s-new\">\n<h2>What\u2019s new?</h2>\n<p>See <a href=\"https://framagit.org/spalax/argdispatch/blob/master/CHANGELOG.md\" rel=\"nofollow\">changelog</a>.</p>\n</div>\n<div id=\"download-and-install\">\n<h2>Download and install</h2>\n<ul>\n<li><p>From sources:</p>\n<ul>\n<li><p>Download: <a href=\"https://pypi.python.org/pypi/argdispatch\" rel=\"nofollow\">https://pypi.python.org/pypi/argdispatch</a></p>\n</li>\n<li><p>Install (in a <cite>virtualenv</cite>, if you do not want to mess with your distribution installation system):</p>\n<pre>python3 setup.py install\n</pre>\n</li>\n</ul>\n</li>\n<li><p>From pip:</p>\n<pre>pip install argdispatch\n</pre>\n</li>\n<li><p>Quick and dirty Debian (and Ubuntu?) package</p>\n<p>This requires <a href=\"https://github.com/astraw/stdeb\" rel=\"nofollow\">stdeb</a> to be installed:</p>\n<pre>python3 setup.py --command-packages=stdeb.command bdist_deb\nsudo dpkg -i deb_dist/argdispatch-&lt;VERSION&gt;_all.deb\n</pre>\n</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7152934, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bafb536d4b0d4695b012843d46c04614", "sha256": "70b718599bf0386a384dae5b66de70ab6b3c0caf533ca8d978da4b20847c2eff"}, "downloads": -1, "filename": "argdispatch-0.1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "bafb536d4b0d4695b012843d46c04614", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10077, "upload_time": "2016-04-14T16:25:26", "upload_time_iso_8601": "2016-04-14T16:25:26.560500Z", "url": "https://files.pythonhosted.org/packages/9b/99/ac9048599fe92c267a97a9147b90cc58b20d26a7dd49b47fa3b42b579432/argdispatch-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cac64f3e6ee39da3be531f30b90b60a4", "sha256": "a6a0e8bccbab365672f9945c4ebd62c837966b204bdc3eefb963a75e88051411"}, "downloads": -1, "filename": "argdispatch-0.1.0.tar.gz", "has_sig": true, "md5_digest": "cac64f3e6ee39da3be531f30b90b60a4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33337, "upload_time": "2016-04-14T16:26:03", "upload_time_iso_8601": "2016-04-14T16:26:03.360160Z", "url": "https://files.pythonhosted.org/packages/e9/84/0ec8d388a0e737d202d174227936015d7bed094031eed291c167cddd591f/argdispatch-0.1.0.tar.gz", "yanked": false}], "0.1.0b1": [{"comment_text": "", "digests": {"md5": "e271e7e593116a46cf2f47e040c8bc71", "sha256": "7f239a3890c725939671c9ae49eab3fa1b1f5417e2313b56d3ccc223ff918874"}, "downloads": -1, "filename": "argdispatch-0.1.0b1-py3-none-any.whl", "has_sig": true, "md5_digest": "e271e7e593116a46cf2f47e040c8bc71", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10096, "upload_time": "2016-04-12T15:53:18", "upload_time_iso_8601": "2016-04-12T15:53:18.622917Z", "url": "https://files.pythonhosted.org/packages/2a/23/93d42e81b227fb489afe08002ae3fde8201323aecae5745ecd04d45d7cd5/argdispatch-0.1.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffebddbdc586a30170269eb05289003c", "sha256": "01148038280760907953fb5b9f714ca4f2666babc86f693403fe29ab8b77d2fb"}, "downloads": -1, "filename": "argdispatch-0.1.0b1.tar.gz", "has_sig": true, "md5_digest": "ffebddbdc586a30170269eb05289003c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33314, "upload_time": "2016-04-12T15:53:28", "upload_time_iso_8601": "2016-04-12T15:53:28.006662Z", "url": "https://files.pythonhosted.org/packages/85/50/a7bf7bf8e2605e063df9cfe3bbd84007d5b39b944d08496aac8f5b82f3b9/argdispatch-0.1.0b1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0c7f5419342ce35fcdd4d776c3901896", "sha256": "27d34e26f8e799550b1045040e454ab605b5c68bbed75ab9b95ca73db5d861a6"}, "downloads": -1, "filename": "argdispatch-0.1.1-py3-none-any.whl", "has_sig": true, "md5_digest": "0c7f5419342ce35fcdd4d776c3901896", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10231, "upload_time": "2016-05-21T20:43:54", "upload_time_iso_8601": "2016-05-21T20:43:54.545776Z", "url": "https://files.pythonhosted.org/packages/56/e8/4e3c472a1727cb1e72baf7a288d7239971a0fbec9f66df9c8036f3bc2d5a/argdispatch-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e72d380e9eb51ba0f34716a83509711", "sha256": "396b23e10e0912cd2ed24795f82d556d6e18c0b5a3c6cb3fc1c5a03d6c07b256"}, "downloads": -1, "filename": "argdispatch-0.1.1.tar.gz", "has_sig": true, "md5_digest": "4e72d380e9eb51ba0f34716a83509711", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34703, "upload_time": "2016-05-21T20:45:10", "upload_time_iso_8601": "2016-05-21T20:45:10.994769Z", "url": "https://files.pythonhosted.org/packages/0a/f3/d3eafe5bed63e2796ae56d430da4e8f19c3d69ae8532e6b885512fd7b420/argdispatch-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c7458fed26cf766e6615cdcbe68fc653", "sha256": "93562ac53f817535e21e252cdd8343b87ac9d94af0d1f4b29679840a3f1666bb"}, "downloads": -1, "filename": "argdispatch-0.2.0-py3-none-any.whl", "has_sig": true, "md5_digest": "c7458fed26cf766e6615cdcbe68fc653", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10432, "upload_time": "2017-04-28T13:21:33", "upload_time_iso_8601": "2017-04-28T13:21:33.815528Z", "url": "https://files.pythonhosted.org/packages/64/59/ed0ca0869685305f84aa153af366034ecef70e782b35dfd91f20847be246/argdispatch-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b581b6b50728858907358bb9def4c46", "sha256": "59e8609c8eefeae3e74cc79979211e53b77e6e6dfe2ab81ff76face5d6d6b877"}, "downloads": -1, "filename": "argdispatch-0.2.0.tar.gz", "has_sig": true, "md5_digest": "4b581b6b50728858907358bb9def4c46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35186, "upload_time": "2017-04-28T13:21:36", "upload_time_iso_8601": "2017-04-28T13:21:36.392543Z", "url": "https://files.pythonhosted.org/packages/b9/d2/7333339d6752c00bb748f8cba2e5c8b175fa6def905332ad6cf52ad420ea/argdispatch-0.2.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "19576348956744fe151e46418503e0b8", "sha256": "874f10e5bb41e7840d89d108af728a03f9a054f2943a005f62f170364d13595e"}, "downloads": -1, "filename": "argdispatch-1.0.0-py3-none-any.whl", "has_sig": true, "md5_digest": "19576348956744fe151e46418503e0b8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10725, "upload_time": "2018-03-07T13:59:18", "upload_time_iso_8601": "2018-03-07T13:59:18.345006Z", "url": "https://files.pythonhosted.org/packages/d8/98/d704d4333e4f788076530123fc542719a442cfb12811c7d0cd7af4a1eda4/argdispatch-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "38c5ea38734ef127b2bca57d5a181f7e", "sha256": "763378e45955384a0fa537fc1825727f2a5de752dd9d3a6fad0d1312e84798be"}, "downloads": -1, "filename": "argdispatch-1.0.0.tar.gz", "has_sig": true, "md5_digest": "38c5ea38734ef127b2bca57d5a181f7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35325, "upload_time": "2018-03-07T13:59:19", "upload_time_iso_8601": "2018-03-07T13:59:19.892820Z", "url": "https://files.pythonhosted.org/packages/03/72/ea1da69efe0b930a870930e6b8485fbcf9f3d89e8c908d96619c9ea38e3e/argdispatch-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "026b702171a99a753b410221b8632f0e", "sha256": "f99222a95d40030ca42481ccb1ec1af477234801bee8d588da62dfcf28dee303"}, "downloads": -1, "filename": "argdispatch-1.1.0-py3-none-any.whl", "has_sig": true, "md5_digest": "026b702171a99a753b410221b8632f0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<4,>=3.6", "size": 21917, "upload_time": "2020-04-20T13:17:44", "upload_time_iso_8601": "2020-04-20T13:17:44.940456Z", "url": "https://files.pythonhosted.org/packages/c2/b0/e880cff76344b5b179c2ecb4bb7cf86ac4de5fd1647e71966664fbfebc43/argdispatch-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09d9ae196d24a67533c7f9ace6cc66da", "sha256": "a04f70fd886c472bbeb7a885e41c67864286045024f334ab5a2850e7ec6ef4ad"}, "downloads": -1, "filename": "argdispatch-1.1.0.tar.gz", "has_sig": true, "md5_digest": "09d9ae196d24a67533c7f9ace6cc66da", "packagetype": "sdist", "python_version": "source", "requires_python": "<4,>=3.6", "size": 40918, "upload_time": "2020-04-20T13:17:46", "upload_time_iso_8601": "2020-04-20T13:17:46.963007Z", "url": "https://files.pythonhosted.org/packages/5c/35/381eb76c836788b70e5f6bd15798f2e0ba4481716cf1d135dce151aa2ade/argdispatch-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "12a2498ee183177e83384250aca7e1fc", "sha256": "8ae2d557d50efd7e3e33ea4d7ae4a31bcbb20377d8a0ee572108aaa28a97804e"}, "downloads": -1, "filename": "argdispatch-1.1.1-py3-none-any.whl", "has_sig": true, "md5_digest": "12a2498ee183177e83384250aca7e1fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<4,>=3.6", "size": 21645, "upload_time": "2020-04-27T12:36:57", "upload_time_iso_8601": "2020-04-27T12:36:57.185390Z", "url": "https://files.pythonhosted.org/packages/dc/df/5c0e18be885f37d0e873abfb3cd219b7d10a9a670001619f2b58c84918a8/argdispatch-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "691cfdbc768be4a63b8d6aac8acf04f1", "sha256": "ed56c9f538714f5e4284d03fdd0b96d083241c22a7b360820be5823f838bb2bf"}, "downloads": -1, "filename": "argdispatch-1.1.1.tar.gz", "has_sig": true, "md5_digest": "691cfdbc768be4a63b8d6aac8acf04f1", "packagetype": "sdist", "python_version": "source", "requires_python": "<4,>=3.6", "size": 38431, "upload_time": "2020-04-27T12:36:58", "upload_time_iso_8601": "2020-04-27T12:36:58.609263Z", "url": "https://files.pythonhosted.org/packages/cd/78/40aeb16f76b7728b19746579d540a8006373d0e1a228160d9a39ed353473/argdispatch-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "ea03ef489150334ba2416569af9671eb", "sha256": "1f955064243bb7607bf96b1b99431f8417a93ee14bf115149c5cd584e3314d6c"}, "downloads": -1, "filename": "argdispatch-1.1.2-py3-none-any.whl", "has_sig": true, "md5_digest": "ea03ef489150334ba2416569af9671eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<4,>=3.6", "size": 21711, "upload_time": "2020-05-02T18:54:23", "upload_time_iso_8601": "2020-05-02T18:54:23.462026Z", "url": "https://files.pythonhosted.org/packages/90/a1/3794370030adc203dccfb49ebf7f65a8e847c22e60def5e8a3c1427712be/argdispatch-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "047cca030ad97a0f155f305e56dba5cf", "sha256": "4a67a01cb7247386b34c514a9c0ec746b7523e3423b4e1e9b01c9d218b085815"}, "downloads": -1, "filename": "argdispatch-1.1.2.tar.gz", "has_sig": true, "md5_digest": "047cca030ad97a0f155f305e56dba5cf", "packagetype": "sdist", "python_version": "source", "requires_python": "<4,>=3.6", "size": 41311, "upload_time": "2020-05-02T18:54:25", "upload_time_iso_8601": "2020-05-02T18:54:25.706378Z", "url": "https://files.pythonhosted.org/packages/bb/bb/6f5ad151ed096f9a37e4fe62016d4dc90ee2ba571105b6cfb769b28bd835/argdispatch-1.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ea03ef489150334ba2416569af9671eb", "sha256": "1f955064243bb7607bf96b1b99431f8417a93ee14bf115149c5cd584e3314d6c"}, "downloads": -1, "filename": "argdispatch-1.1.2-py3-none-any.whl", "has_sig": true, "md5_digest": "ea03ef489150334ba2416569af9671eb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "<4,>=3.6", "size": 21711, "upload_time": "2020-05-02T18:54:23", "upload_time_iso_8601": "2020-05-02T18:54:23.462026Z", "url": "https://files.pythonhosted.org/packages/90/a1/3794370030adc203dccfb49ebf7f65a8e847c22e60def5e8a3c1427712be/argdispatch-1.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "047cca030ad97a0f155f305e56dba5cf", "sha256": "4a67a01cb7247386b34c514a9c0ec746b7523e3423b4e1e9b01c9d218b085815"}, "downloads": -1, "filename": "argdispatch-1.1.2.tar.gz", "has_sig": true, "md5_digest": "047cca030ad97a0f155f305e56dba5cf", "packagetype": "sdist", "python_version": "source", "requires_python": "<4,>=3.6", "size": 41311, "upload_time": "2020-05-02T18:54:25", "upload_time_iso_8601": "2020-05-02T18:54:25.706378Z", "url": "https://files.pythonhosted.org/packages/bb/bb/6f5ad151ed096f9a37e4fe62016d4dc90ee2ba571105b6cfb769b28bd835/argdispatch-1.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:19 2020"}