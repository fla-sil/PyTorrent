{"info": {"author": "Miguel Turner", "author_email": "cymrow@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Security :: Cryptography", "Topic :: System :: Filesystems", "Topic :: Utilities"], "description": "SECS\n====\n\nSimple Encrypted Container Setup (SECS) is based on Linux Unified Key Setup\n(LUKS). Because good Linux Unified Key Setups mean great Simple Encrypted\nContainer Setups.\n\nPurpose\n-------\n\nIf you are unfamiliar with LUKS_ encryption, it is most commonly used to encrypt\nentire disk partitions on Linux. However, it is also capable of encrypting files\nwhich can be mounted as a loop device, allowing you to create portable encrypted\ncontainers to keep different types of sensitive data isolated.\n\nThis script is a wrapper to simplify the steps required to create and use these\ncontainers.\n\nInstallation\n------------\n\nSECS can be installed using *pip*.\n\n.. code-block::\n\n    $ sudo pip install secs\n    # or\n    $ pip install --user secs\n\nEither command will install a script called *secs* which provides all the\nfunctionality.\n\nSECS requires root access to run. Note that if you use the second install\noption, you will likely have to use `sudo -E` so that Python can find the\npackage.\n\nYou may find it convenient to use a simple script like the `bash script`_\nincluded in the repo to call *sudo* for you.\n\nExamples\n--------\n\nRoot access (e.g. via *sudo*) is required for all commands.\n\nCreate a container. The number is the size in megabytes.\n\n.. code-block::\n\n    $ sudo secs create work_stuff 100\n    ...\n    $ ls -Ap\n    work_stuff\n\nOpen a container. The default moves the container to `.<container>` and mounts\nto the container path. Use `-m` to set an explicit mount path.\n\n.. code-block::\n\n    $ sudo secs open work_stuff\n    ...\n    $ ls -Ap\n    work_stuff/ .work_stuff\n\nClose a container. The default unmounts from the container path and moves the\ncontainer back to it's original path. `-m` to set the mount path is required\nif it was used when the container was opened.\n\n.. code-block::\n\n    $ sudo secs close work_stuff\n    ...\n    $ ls -Ap\n    work_stuff\n\nExpand a container. The number is the amount in megabytes to increase the size\nof the container by.\n\n.. code-block::\n\n    $ sudo secs expand work_stuff 10\n\nImplementation\n--------------\n\n*secs* is written in Python and is based on the LUKS_ specification. It requires\nthat cryptsetup_ be available. It is currently written to use *ext4* as the\ncontainer filesystem. As such, this script will likely only work on Linux\nsystems.\n\nThere are no external Python dependencies. The script may be freely copied\nanywhere, as long as Python 2 or 3 is available.\n\nRelated\n-------\n\n* Tomb_ - A similar tool, written for zsh.\n* Tomber_ and Mausoleum_ - Python wrappers for Tomb_.\n* LibreCrypt_ - May be useful to access your LUKS containers from Windows.\n\n.. _LUKS: https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup\n.. _cryptsetup: https://gitlab.com/cryptsetup/cryptsetup/\n.. _Tomb: https://www.dyne.org/software/tomb/\n.. _Tomber: https://pypi.python.org/pypi/tomber\n.. _Mausoleum: https://pypi.python.org/pypi/mausoleum\n.. _LibreCrypt: https://github.com/t-d-k/LibreCrypt\n.. _bash script: https://github.com/dhagrow/secs/blob/master/secs\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dhagrow/secs", "keywords": "luks", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "secs", "package_url": "https://pypi.org/project/secs/", "platform": "", "project_url": "https://pypi.org/project/secs/", "project_urls": {"Homepage": "https://github.com/dhagrow/secs"}, "release_url": "https://pypi.org/project/secs/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Simple encrypted containers", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple Encrypted Container Setup (SECS) is based on Linux Unified Key Setup\n(LUKS). Because good Linux Unified Key Setups mean great Simple Encrypted\nContainer Setups.</p>\n<div id=\"purpose\">\n<h2>Purpose</h2>\n<p>If you are unfamiliar with <a href=\"https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup\" rel=\"nofollow\">LUKS</a> encryption, it is most commonly used to encrypt\nentire disk partitions on Linux. However, it is also capable of encrypting files\nwhich can be mounted as a loop device, allowing you to create portable encrypted\ncontainers to keep different types of sensitive data isolated.</p>\n<p>This script is a wrapper to simplify the steps required to create and use these\ncontainers.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>SECS can be installed using <em>pip</em>.</p>\n<pre>$ sudo pip install secs\n# or\n$ pip install --user secs\n</pre>\n<p>Either command will install a script called <em>secs</em> which provides all the\nfunctionality.</p>\n<p>SECS requires root access to run. Note that if you use the second install\noption, you will likely have to use <cite>sudo -E</cite> so that Python can find the\npackage.</p>\n<p>You may find it convenient to use a simple script like the <a href=\"https://github.com/dhagrow/secs/blob/master/secs\" rel=\"nofollow\">bash script</a>\nincluded in the repo to call <em>sudo</em> for you.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Root access (e.g. via <em>sudo</em>) is required for all commands.</p>\n<p>Create a container. The number is the size in megabytes.</p>\n<pre>$ sudo secs create work_stuff 100\n...\n$ ls -Ap\nwork_stuff\n</pre>\n<p>Open a container. The default moves the container to <cite>.&lt;container&gt;</cite> and mounts\nto the container path. Use <cite>-m</cite> to set an explicit mount path.</p>\n<pre>$ sudo secs open work_stuff\n...\n$ ls -Ap\nwork_stuff/ .work_stuff\n</pre>\n<p>Close a container. The default unmounts from the container path and moves the\ncontainer back to it\u2019s original path. <cite>-m</cite> to set the mount path is required\nif it was used when the container was opened.</p>\n<pre>$ sudo secs close work_stuff\n...\n$ ls -Ap\nwork_stuff\n</pre>\n<p>Expand a container. The number is the amount in megabytes to increase the size\nof the container by.</p>\n<pre>$ sudo secs expand work_stuff 10\n</pre>\n</div>\n<div id=\"implementation\">\n<h2>Implementation</h2>\n<p><em>secs</em> is written in Python and is based on the <a href=\"https://en.wikipedia.org/wiki/Linux_Unified_Key_Setup\" rel=\"nofollow\">LUKS</a> specification. It requires\nthat <a href=\"https://gitlab.com/cryptsetup/cryptsetup/\" rel=\"nofollow\">cryptsetup</a> be available. It is currently written to use <em>ext4</em> as the\ncontainer filesystem. As such, this script will likely only work on Linux\nsystems.</p>\n<p>There are no external Python dependencies. The script may be freely copied\nanywhere, as long as Python 2 or 3 is available.</p>\n</div>\n<div id=\"related\">\n<h2>Related</h2>\n<ul>\n<li><a href=\"https://www.dyne.org/software/tomb/\" rel=\"nofollow\">Tomb</a> - A similar tool, written for zsh.</li>\n<li><a href=\"https://pypi.python.org/pypi/tomber\" rel=\"nofollow\">Tomber</a> and <a href=\"https://pypi.python.org/pypi/mausoleum\" rel=\"nofollow\">Mausoleum</a> - Python wrappers for <a href=\"https://www.dyne.org/software/tomb/\" rel=\"nofollow\">Tomb</a>.</li>\n<li><a href=\"https://github.com/t-d-k/LibreCrypt\" rel=\"nofollow\">LibreCrypt</a> - May be useful to access your LUKS containers from Windows.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2848171, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2ebb44f7a1137958b5af6f5688b61b23", "sha256": "c94a75b8fae9f920a8bf68427c538a21a94d088259e64acf24d0548a702920d6"}, "downloads": -1, "filename": "secs-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2ebb44f7a1137958b5af6f5688b61b23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5004, "upload_time": "2017-05-03T01:27:48", "upload_time_iso_8601": "2017-05-03T01:27:48.904261Z", "url": "https://files.pythonhosted.org/packages/1a/33/3e8d63148d687c0cef9e937d405cadba82acbd9a6ba6d89ca7c8f195ec09/secs-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "114838ff50d73c0953fbe0c96b7476eb", "sha256": "2ead3ad83af43768754f2d756cd25edbb1eb1db69fc6e53dd0575e22ca1aadf5"}, "downloads": -1, "filename": "secs-0.2.0.tar.gz", "has_sig": false, "md5_digest": "114838ff50d73c0953fbe0c96b7476eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5249, "upload_time": "2017-05-03T04:09:27", "upload_time_iso_8601": "2017-05-03T04:09:27.388695Z", "url": "https://files.pythonhosted.org/packages/30/51/8aabf76d54170c3e535574ecfcf695da1edb4715abecd60a2ce922a6914b/secs-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "114838ff50d73c0953fbe0c96b7476eb", "sha256": "2ead3ad83af43768754f2d756cd25edbb1eb1db69fc6e53dd0575e22ca1aadf5"}, "downloads": -1, "filename": "secs-0.2.0.tar.gz", "has_sig": false, "md5_digest": "114838ff50d73c0953fbe0c96b7476eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5249, "upload_time": "2017-05-03T04:09:27", "upload_time_iso_8601": "2017-05-03T04:09:27.388695Z", "url": "https://files.pythonhosted.org/packages/30/51/8aabf76d54170c3e535574ecfcf695da1edb4715abecd60a2ce922a6914b/secs-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:56 2020"}