{"info": {"author": "David Holtz", "author_email": "david.richard.holtz@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ZEDIS <img src=\"https://img.shields.io/github/stars/drbh/zedis.svg\" />\n\n<img src=\"public/zedislogo.png\" alt=\"Logo\">\n\nA lightweight [zeromq](https://github.com/zeromq/libzmq) and [seld](https://github.com/spacejam/sled) based replacement for Redis. <90 LOC focused on a portable cross\nlanguage simple storage system. No need to run a full service.\n\n## Install\n\n## Recommended Install\n\nThis will always fetch and build the most recent version of zedis for your computer. If you don't have cargo checkout https://www.rust-lang.org/tools/install\n```\ncargo install zedis\n```\n\n\n<img src=\"public/get-zedis.gif\" alt=\"Logo\">\n\n\n#### Not supporting `apt` and `homebrew` anymore, too many places to update.\n\n\n## Run \ud83d\udc4d\n```bash\nzedis\n#\t   _______ ___ ___ ___ \n#\t  |_  / __|   \\_ _/ __|\n#\t   / /| _|| |) | |\\__ \\ \n#\t  /___|___|___/___|___/ \n#\n```\n\nZedis is opinionated and limited. With ZEDIS you can only READ and WRITE key values pairs. All writes overwrite past values. \n\nReally Fast reads `< 250\u00b5s` for `~2 MB` json payload.   \n\nPretty Fast writes `< 18ms` for `~2 MB` json payload.  \n\n#### Setting Port\n\nNow you can set the port/socket that `zedis` will be available on. If no port is specified zedis will fallback on `5555`\n\n```bash\nzedis 6677\n```\n\n## Interacting with CLI app\n[get zedis cli](https://github.com/drbh/zedis-cli)\n<img src=\"public/closeup.gif\" alt=\"Logo\">\n\n## Commands\n\n### Get values\n\n```\nGET key\n```\n\nReturn the string values of the key. Returns `b'Error occurred: InvalidKey'` if key does not exist\n\n### Set values \n\n```\nSET key value\n```\nInsert a key value. If the key already exists the value will be overwritten.\n\n### Remove values\n\n```\nDEL key\n```\n\nDelete a key and it's value from zedis. This will also return the last known value of the key.\n\n### Show keys\n\n```\nKEYS\n```\n\nThis retrns a JSON format list of all of the keys. This is ineffiecent, it iterates through the whole DB and then concats the key names togther. Do not use if you have more than 1000 keys if you want instant results.\n\n### Query\n\n```\nPRE keyprefix\n```\n\nReturns all keys with that prefix. So \"A\" will return \"Alpha\", \"Awesome\"... this is case sensitive.\n\n#### Python3 client example\n```python\nimport zmq\nimport json\n\nport = \"5555\"\n\ncontext = zmq.Context()\nsocket = context.socket(zmq.REQ)\nsocket.connect(\"tcp://localhost:%s\" % port)\n\nsocket.send_string(\"SET david richard blyn holtz\");socket.recv()\n# 'done.'\n\nsocket._string(\"GET david\");socket.recv()\n# 'richard blyn holtz'\n\njsonblob = json.dumps({\"example\": \"you can store seralized JSON\"})\nsocket.send_string(\"SET js \"+jsonblob);socket.recv()\n# 'done.'\n\nsocket.send_string(\"GET js\")\njson.loads(socket.recv())\n# {u'exmple': u'lorem ipsum...'}\n\nsocket.send_string(\"DEL js\");socket.recv();socket.recv()\n# b'2 yo yo'\n\n## ADDING A BUNCH OF KEYS\nfor x in range(0, 100):\n    socket.send_string(\"SET \"+str(x)+\" \"+str(x)+\" yo yo\")\n    socket.recv()\n\nsocket.send_string(\"PRE 1\");socket.recv()\n# b'[\"1\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]'\n\n\nsocket.send_string(\"KEYS\");socket.recv()\n# b'[\"0\", \"1\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"]'\n\n```\n\n\n### Check alive\n```bash\nnc -v -z -w 5 localhost 5555\n# found 0 associations\n# found 1 connections:\n#      1:\tflags=82<CONNECTED,PREFERRED>\n# \toutif lo0\n# \tsrc 127.0.0.1 port 52227\n# \tdst 127.0.0.1 port 5555\n# \trank info not available\n# \tTCP aux info available\n\n# Connection to localhost port 5555 [tcp/personal-agent] succeeded!\n```\n\n## \ud83e\udd80 `01010` Developer Stuff\n\n#### Build it\nClone, build and add a symlink so you can access `zedis` in the cli\n```bash\ngit clone https://github.com/drbh/zedis.git && cd zedis\ncargo build --release && sh install.sh \n```\n\n#### Packaging\n\n```\nfpm -f -s dir -t deb -n zedis target/release/zedis=/usr/local/\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/drbh/pyzedis", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyzedis", "package_url": "https://pypi.org/project/pyzedis/", "platform": "", "project_url": "https://pypi.org/project/pyzedis/", "project_urls": {"Homepage": "https://github.com/drbh/pyzedis"}, "release_url": "https://pypi.org/project/pyzedis/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A Python client for zedis", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ZEDIS <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/42a6efd57ee2fda3c98b5043aa183c9a61294c47/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f647262682f7a656469732e737667\"></h1>\n<img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb4d08fe24bf24f427283a7e57c4aaa555a62508/7075626c69632f7a656469736c6f676f2e706e67\">\n<p>A lightweight <a href=\"https://github.com/zeromq/libzmq\" rel=\"nofollow\">zeromq</a> and <a href=\"https://github.com/spacejam/sled\" rel=\"nofollow\">seld</a> based replacement for Redis. &lt;90 LOC focused on a portable cross\nlanguage simple storage system. No need to run a full service.</p>\n<h2>Install</h2>\n<h2>Recommended Install</h2>\n<p>This will always fetch and build the most recent version of zedis for your computer. If you don't have cargo checkout <a href=\"https://www.rust-lang.org/tools/install\" rel=\"nofollow\">https://www.rust-lang.org/tools/install</a></p>\n<pre><code>cargo install zedis\n</code></pre>\n<img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59ff483f3c09216a4f821b0ab3acab1fb92a1bed/7075626c69632f6765742d7a656469732e676966\">\n<h4>Not supporting <code>apt</code> and <code>homebrew</code> anymore, too many places to update.</h4>\n<h2>Run \ud83d\udc4d</h2>\n<pre>zedis\n<span class=\"c1\">#\t   _______ ___ ___ ___ </span>\n<span class=\"c1\">#\t  |_  / __|   \\_ _/ __|</span>\n<span class=\"c1\">#\t   / /| _|| |) | |\\__ \\ </span>\n<span class=\"c1\">#\t  /___|___|___/___|___/ </span>\n<span class=\"c1\">#</span>\n</pre>\n<p>Zedis is opinionated and limited. With ZEDIS you can only READ and WRITE key values pairs. All writes overwrite past values.</p>\n<p>Really Fast reads <code>&lt; 250\u00b5s</code> for <code>~2 MB</code> json payload.</p>\n<p>Pretty Fast writes <code>&lt; 18ms</code> for <code>~2 MB</code> json payload.</p>\n<h4>Setting Port</h4>\n<p>Now you can set the port/socket that <code>zedis</code> will be available on. If no port is specified zedis will fallback on <code>5555</code></p>\n<pre>zedis <span class=\"m\">6677</span>\n</pre>\n<h2>Interacting with CLI app</h2>\n<p><a href=\"https://github.com/drbh/zedis-cli\" rel=\"nofollow\">get zedis cli</a>\n<img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47fa46a8cc6ee1399a8557b5a30f779339db8528/7075626c69632f636c6f736575702e676966\"></p>\n<h2>Commands</h2>\n<h3>Get values</h3>\n<pre><code>GET key\n</code></pre>\n<p>Return the string values of the key. Returns <code>b'Error occurred: InvalidKey'</code> if key does not exist</p>\n<h3>Set values</h3>\n<pre><code>SET key value\n</code></pre>\n<p>Insert a key value. If the key already exists the value will be overwritten.</p>\n<h3>Remove values</h3>\n<pre><code>DEL key\n</code></pre>\n<p>Delete a key and it's value from zedis. This will also return the last known value of the key.</p>\n<h3>Show keys</h3>\n<pre><code>KEYS\n</code></pre>\n<p>This retrns a JSON format list of all of the keys. This is ineffiecent, it iterates through the whole DB and then concats the key names togther. Do not use if you have more than 1000 keys if you want instant results.</p>\n<h3>Query</h3>\n<pre><code>PRE keyprefix\n</code></pre>\n<p>Returns all keys with that prefix. So \"A\" will return \"Alpha\", \"Awesome\"... this is case sensitive.</p>\n<h4>Python3 client example</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zmq</span>\n<span class=\"kn\">import</span> <span class=\"nn\">json</span>\n\n<span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"s2\">\"5555\"</span>\n\n<span class=\"n\">context</span> <span class=\"o\">=</span> <span class=\"n\">zmq</span><span class=\"o\">.</span><span class=\"n\">Context</span><span class=\"p\">()</span>\n<span class=\"n\">socket</span> <span class=\"o\">=</span> <span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">socket</span><span class=\"p\">(</span><span class=\"n\">zmq</span><span class=\"o\">.</span><span class=\"n\">REQ</span><span class=\"p\">)</span>\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s2\">\"tcp://localhost:</span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"SET david richard blyn holtz\"</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># 'done.'</span>\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">_string</span><span class=\"p\">(</span><span class=\"s2\">\"GET david\"</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># 'richard blyn holtz'</span>\n\n<span class=\"n\">jsonblob</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"example\"</span><span class=\"p\">:</span> <span class=\"s2\">\"you can store seralized JSON\"</span><span class=\"p\">})</span>\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"SET js \"</span><span class=\"o\">+</span><span class=\"n\">jsonblob</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># 'done.'</span>\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"GET js\"</span><span class=\"p\">)</span>\n<span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">())</span>\n<span class=\"c1\"># {u'exmple': u'lorem ipsum...'}</span>\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"DEL js\"</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">();</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># b'2 yo yo'</span>\n\n<span class=\"c1\">## ADDING A BUNCH OF KEYS</span>\n<span class=\"k\">for</span> <span class=\"n\">x</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n    <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"SET \"</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s2\">\" \"</span><span class=\"o\">+</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">+</span><span class=\"s2\">\" yo yo\"</span><span class=\"p\">)</span>\n    <span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"PRE 1\"</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># b'[\"1\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\"]'</span>\n\n\n<span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">send_string</span><span class=\"p\">(</span><span class=\"s2\">\"KEYS\"</span><span class=\"p\">);</span><span class=\"n\">socket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"c1\"># b'[\"0\", \"1\", \"10\", \"11\", \"12\", \"13\", \"14\", \"15\", \"16\", \"17\", \"18\", \"19\", \"20\", \"21\", \"22\"]'</span>\n</pre>\n<h3>Check alive</h3>\n<pre>nc -v -z -w <span class=\"m\">5</span> localhost <span class=\"m\">5555</span>\n<span class=\"c1\"># found 0 associations</span>\n<span class=\"c1\"># found 1 connections:</span>\n<span class=\"c1\">#      1:\tflags=82&lt;CONNECTED,PREFERRED&gt;</span>\n<span class=\"c1\"># \toutif lo0</span>\n<span class=\"c1\"># \tsrc 127.0.0.1 port 52227</span>\n<span class=\"c1\"># \tdst 127.0.0.1 port 5555</span>\n<span class=\"c1\"># \trank info not available</span>\n<span class=\"c1\"># \tTCP aux info available</span>\n\n<span class=\"c1\"># Connection to localhost port 5555 [tcp/personal-agent] succeeded!</span>\n</pre>\n<h2>\ud83e\udd80 <code>01010</code> Developer Stuff</h2>\n<h4>Build it</h4>\n<p>Clone, build and add a symlink so you can access <code>zedis</code> in the cli</p>\n<pre>git clone https://github.com/drbh/zedis.git <span class=\"o\">&amp;&amp;</span> <span class=\"nb\">cd</span> zedis\ncargo build --release <span class=\"o\">&amp;&amp;</span> sh install.sh \n</pre>\n<h4>Packaging</h4>\n<pre><code>fpm -f -s dir -t deb -n zedis target/release/zedis=/usr/local/\n</code></pre>\n\n          </div>"}, "last_serial": 5891993, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e1e49b81528c5e57c11584b1d14fe50a", "sha256": "9277c42272a7550b4bb9d2c377bcaeb51634647b57375961cd6783df1147e834"}, "downloads": -1, "filename": "pyzedis-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1e49b81528c5e57c11584b1d14fe50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3484, "upload_time": "2019-09-26T18:15:02", "upload_time_iso_8601": "2019-09-26T18:15:02.613332Z", "url": "https://files.pythonhosted.org/packages/23/f7/83a1639abaaf90c9fd9c944815d5558c40bcc112f1f30270cb01659e4d49/pyzedis-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b12acd851b33b5aae670fa697383fd6", "sha256": "a7970a7552d6c4090727356b209d460136f6321aa5eb11e8892053e990cfb2fa"}, "downloads": -1, "filename": "pyzedis-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0b12acd851b33b5aae670fa697383fd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3500, "upload_time": "2019-09-26T18:15:05", "upload_time_iso_8601": "2019-09-26T18:15:05.129697Z", "url": "https://files.pythonhosted.org/packages/22/d7/941674b9e043a4758bfa4a6a647274081d0e9b2e9446d4be57965430b3d3/pyzedis-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1e49b81528c5e57c11584b1d14fe50a", "sha256": "9277c42272a7550b4bb9d2c377bcaeb51634647b57375961cd6783df1147e834"}, "downloads": -1, "filename": "pyzedis-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e1e49b81528c5e57c11584b1d14fe50a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3484, "upload_time": "2019-09-26T18:15:02", "upload_time_iso_8601": "2019-09-26T18:15:02.613332Z", "url": "https://files.pythonhosted.org/packages/23/f7/83a1639abaaf90c9fd9c944815d5558c40bcc112f1f30270cb01659e4d49/pyzedis-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0b12acd851b33b5aae670fa697383fd6", "sha256": "a7970a7552d6c4090727356b209d460136f6321aa5eb11e8892053e990cfb2fa"}, "downloads": -1, "filename": "pyzedis-0.0.1.tar.gz", "has_sig": false, "md5_digest": "0b12acd851b33b5aae670fa697383fd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3500, "upload_time": "2019-09-26T18:15:05", "upload_time_iso_8601": "2019-09-26T18:15:05.129697Z", "url": "https://files.pythonhosted.org/packages/22/d7/941674b9e043a4758bfa4a6a647274081d0e9b2e9446d4be57965430b3d3/pyzedis-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:10:40 2020"}