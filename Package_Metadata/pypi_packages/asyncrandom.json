{"info": {"author": "Yavor Paunov", "author_email": "contact@yavorpaunov.com", "bugtrack_url": null, "classifiers": [], "description": ".. image:: https://travis-ci.org/YavorPaunov/asyncrandom.svg?branch=master\n    :target: https://travis-ci.org/YavorPaunov/asyncrandom\n\nAsyncrandom\n===========\n\nUtility for fetching one or more random numbers from the ANU Quantum Random Numbers Server by calling the endpoint at https://qrng.anu.edu.au/API/jsonI.php. \nRequests are executed asynchronously using the tornado networking framework.\n\nMore information about how the numbers are generated can be found on https://qrng.anu.edu.au/.\n\nRequires tornado and its IOLoop to run.\n\nInstallation\n------------\nDownload the source and run the setup file::\n\n    python setup.py install\n\nUsage\n-----\n\nA simple example of generating a single random ``uint8``::\n\n    def handle_random_int(f):\n        print(f.result())\n\n    f = asyncrandom.fetch()\n    f.add_done_callback(handle_random_int)\n\n    tornado.ioloop.IOLoop.current()\n\nMultiple numbers can be generated as well. In this example we generate 10::\n\n    def handle_random_int(f):\n        print(f.result())\n\n    f = asyncrandom.fetch(10)\n    f.add_done_callback(handle_random_int)\n\n    tornado.ioloop.IOLoop.current().start()\n\nBy default, 8-bit unsigned integers are generated. Optionally, this can be changed to 16-bit. Example of generating 10 16-bit integers::\n    \n    def handle_random_int(f):\n        print(f.result())\n    \n    f = asyncrandom.fetch(10, asyncrandom.IntegerType.UINT16)\n    f.add_done_callback(handle_random_int)\n    \n    tornado.ioloop.IOLoop.current()\n\nIf called from the command, issues a synchronous call to the service. Optionally, ``--length`` and ``--type`` can be specified as arguments, with default values of ``1`` and ``\"uint-8\"`` respectively. \n\n\nCommand line example::\n\n    $ asyncrandom --int-type=uint8 --length=1\n    105\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "asyncrandom", "package_url": "https://pypi.org/project/asyncrandom/", "platform": "", "project_url": "https://pypi.org/project/asyncrandom/", "project_urls": null, "release_url": "https://pypi.org/project/asyncrandom/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Async random number generator.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/YavorPaunov/asyncrandom\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/YavorPaunov/asyncrandom.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac0e054c0a6f09eb580f59738f850b409631656f/68747470733a2f2f7472617669732d63692e6f72672f5961766f725061756e6f762f6173796e6372616e646f6d2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"asyncrandom\">\n<h2>Asyncrandom</h2>\n<p>Utility for fetching one or more random numbers from the ANU Quantum Random Numbers Server by calling the endpoint at <a href=\"https://qrng.anu.edu.au/API/jsonI.php\" rel=\"nofollow\">https://qrng.anu.edu.au/API/jsonI.php</a>.\nRequests are executed asynchronously using the tornado networking framework.</p>\n<p>More information about how the numbers are generated can be found on <a href=\"https://qrng.anu.edu.au/\" rel=\"nofollow\">https://qrng.anu.edu.au/</a>.</p>\n<p>Requires tornado and its IOLoop to run.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Download the source and run the setup file:</p>\n<pre>python setup.py install\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>A simple example of generating a single random <tt>uint8</tt>:</p>\n<pre>def handle_random_int(f):\n    print(f.result())\n\nf = asyncrandom.fetch()\nf.add_done_callback(handle_random_int)\n\ntornado.ioloop.IOLoop.current()\n</pre>\n<p>Multiple numbers can be generated as well. In this example we generate 10:</p>\n<pre>def handle_random_int(f):\n    print(f.result())\n\nf = asyncrandom.fetch(10)\nf.add_done_callback(handle_random_int)\n\ntornado.ioloop.IOLoop.current().start()\n</pre>\n<p>By default, 8-bit unsigned integers are generated. Optionally, this can be changed to 16-bit. Example of generating 10 16-bit integers:</p>\n<pre>def handle_random_int(f):\n    print(f.result())\n\nf = asyncrandom.fetch(10, asyncrandom.IntegerType.UINT16)\nf.add_done_callback(handle_random_int)\n\ntornado.ioloop.IOLoop.current()\n</pre>\n<p>If called from the command, issues a synchronous call to the service. Optionally, <tt><span class=\"pre\">--length</span></tt> and <tt><span class=\"pre\">--type</span></tt> can be specified as arguments, with default values of <tt>1</tt> and <tt><span class=\"pre\">\"uint-8\"</span></tt> respectively.</p>\n<p>Command line example:</p>\n<pre>$ asyncrandom --int-type=uint8 --length=1\n105\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2716346, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "195267f3901be23b34a42fca14634f2f", "sha256": "f9338a1d2d103714567abdcfe7e158922b75333a348dde8b59aedf29dd293918"}, "downloads": -1, "filename": "asyncrandom-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "195267f3901be23b34a42fca14634f2f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 5392, "upload_time": "2017-03-19T21:24:53", "upload_time_iso_8601": "2017-03-19T21:24:53.440576Z", "url": "https://files.pythonhosted.org/packages/0d/6a/b06eef52aaa0eede5be6920a765ab0858806f59f9b96156a340f1a8f0cd0/asyncrandom-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c6b8295bb1295f5e0f56d46c958027", "sha256": "79e44e1066744a8e91a2d784218ecef14bc484ed40734e2d9680d4633e0a26fc"}, "downloads": -1, "filename": "asyncrandom-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a6c6b8295bb1295f5e0f56d46c958027", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3134, "upload_time": "2017-03-19T21:23:46", "upload_time_iso_8601": "2017-03-19T21:23:46.520120Z", "url": "https://files.pythonhosted.org/packages/67/14/f4fa3b7a3d1fbef2383901f69159ae1769cd195d5ec0f87c1a1b9fdc0ccb/asyncrandom-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "195267f3901be23b34a42fca14634f2f", "sha256": "f9338a1d2d103714567abdcfe7e158922b75333a348dde8b59aedf29dd293918"}, "downloads": -1, "filename": "asyncrandom-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "195267f3901be23b34a42fca14634f2f", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 5392, "upload_time": "2017-03-19T21:24:53", "upload_time_iso_8601": "2017-03-19T21:24:53.440576Z", "url": "https://files.pythonhosted.org/packages/0d/6a/b06eef52aaa0eede5be6920a765ab0858806f59f9b96156a340f1a8f0cd0/asyncrandom-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a6c6b8295bb1295f5e0f56d46c958027", "sha256": "79e44e1066744a8e91a2d784218ecef14bc484ed40734e2d9680d4633e0a26fc"}, "downloads": -1, "filename": "asyncrandom-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a6c6b8295bb1295f5e0f56d46c958027", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3134, "upload_time": "2017-03-19T21:23:46", "upload_time_iso_8601": "2017-03-19T21:23:46.520120Z", "url": "https://files.pythonhosted.org/packages/67/14/f4fa3b7a3d1fbef2383901f69159ae1769cd195d5ec0f87c1a1b9fdc0ccb/asyncrandom-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:41 2020"}