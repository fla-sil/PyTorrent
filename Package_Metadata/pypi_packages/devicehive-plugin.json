{"info": {"author": "DataArt (http://dataart.com)", "author_email": "info@devicehive.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Operating System :: Unix", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Home Automation", "Topic :: Internet", "Topic :: Software Development :: Embedded Systems"], "description": "|License| |PyPI| |Build Status|\n\nDevicehive plugin\n=================\n\nThis library provides wrapper for DeviceHive plugin API\n\nInstallation\n------------\n\nTo install this package run:\n\n.. code:: bash\n\n    pip install devicehive-plugin\n\nCreating a client using Plugin class\n------------------------------------\n\nFirst of all you need to create custom ``Handler`` class.\n\n``Handler`` class provides several ``handle_*`` methods: \\*\n``handle_connect(self)`` will be called after successful connection \\*\n``handle_event(self, event)`` will be called after event of any type is\nreceived. Takes `ApiEvent <#apievent-object>`__ object. \\*\n``handle_command_insert(self, command)`` will be called after\n``command/insert`` event is received. Takes\n`Command <#command-object>`__ object. \\*\n``handle_command_update(self, command)`` will be called after\n``command/update`` event is received. Takes\n`Command <#command-object>`__ object. \\*\n``handle_notification(self, notification)`` will be called after\n``notification/insert`` event is received. Takes\n`Notification <#notification-object>`__ object.\n\n``handle_event`` will be called before type-special ``handle`` methods.\n\nExample:\n\n.. code:: python\n\n    from devicehive_plugin import Handler\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            print('Successfully connected')\n\n        def handle_event(self, event):\n            print(event.action)\n            print(type(event.data))\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\nThe second step is to use ``Plugin`` class for creating connection to\nthe server.\n\nExample:\n\n.. code:: python\n\n    from devicehive_plugin import Handler\n    from devicehive_plugin import Plugin\n\n\n    class SimpleHandler(Handler):\n\n        def handle_connect(self):\n            print('Successfully connected')\n\n        def handle_event(self, event):\n            print(event.action)\n            print(type(event.data))\n\n        def handle_command_insert(self, command):\n            print(command.command)\n\n        def handle_command_update(self, command):\n            print(command.command)\n\n        def handle_notification(self, notification):\n            print(notification.notification)\n\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    plugin_access_token = 'PLUGIN_ACCESS_TOKEN'\n    plugin = Plugin(SimpleHandler)\n    plugin.connect(url, topic_name, plugin_access_token=plugin_access_token)\n\nCustom handler args\n~~~~~~~~~~~~~~~~~~~\n\nIf you need to initialize your handler you can do it the next way:\n\n.. code:: python\n\n    from devicehive_plugin import Handler\n    from devicehive_plugin import Plugin\n\n\n    class SimpleHandler(Handler):\n\n        def __init__(self, api, some_arg, some_kwarg):\n            super(SimpleHandler, self).__init__(api)\n            self._some_arg = some_arg\n            self._some_kwarg = some_kwarg\n\n\n    plugin = Plugin(SimpleHandler, 'some_arg', some_kwarg='some_kwarg')\n\nAuthentication\n~~~~~~~~~~~~~~\n\nThere are several ways of initial authentication:\n\n-  Using plugin's access token\n-  Using plugin's refresh token\n-  Using user's access token\n-  Using user's refresh token\n-  Using user's login and password\n\nIf you want to use anything but plugin's access token you need to\nprovide ``auth_url`` parameter.\n\nExamples:\n\n.. code:: python\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    plugin.connect(url, topic_name,\n                   plugin_access_token='SOME_PLUGIN_ACCESS_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    auth_url = 'http://playground-dev.devicehive.com/api/rest'\n    plugin.connect(url, topic_name, auth_url=auth_url,\n                   plugin_refresh_token='SOME_PLUGIN_REFRESH_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    auth_url = 'http://playground-dev.devicehive.com/api/rest'\n    plugin.connect(url, topic_name, auth_url=auth_url,\n                   access_token='SOME_USER_ACCESS_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    auth_url = 'http://playground-dev.devicehive.com/api/rest'\n    plugin.connect(url, topic_name, auth_url=auth_url,\n                   refresh_token='SOME_USER_REFRESH_TOKEN')\n\n.. code:: python\n\n    url = 'ws://playground-dev.devicehive.com/plugin/proxy/'\n    topic_name = 'PLUGIN_TOPIC_NAME'\n    auth_url = 'http://playground-dev.devicehive.com/api/rest'\n    plugin.connect(url, topic_name, auth_url=auth_url,\n                   login='SOME_USER_LOGIN', password='SOME_USER_PASSWORD')\n\nApi reference\n-------------\n\nApiEvent object\n~~~~~~~~~~~~~~~\n\nProperties (read only):\n\n-  ``is_command_insert_event``\n-  ``is_command_update_event``\n-  ``is_command_event``\n-  ``is_notification_event``\n-  ``action``\n-  ``raw_data``\n-  ``data``\n\nCommand object\n~~~~~~~~~~~~~~\n\nProperties (read only):\n\n-  ``id``\n-  ``user_id``\n-  ``command``\n-  ``parameters``\n-  ``lifetime``\n-  ``timestamp``\n-  ``last_updated``\n-  ``status``\n-  ``result``\n\nNotification object\n~~~~~~~~~~~~~~~~~~~\n\nProperties (read only):\n\n-  ``device_id``\n-  ``id``\n-  ``notification``\n-  ``parameters``\n-  ``timestamp``\n\nDocker tests\n------------\n\nBuild image\n~~~~~~~~~~~\n\n::\n\n    docker build -f Dockerfile -t devicehive-plugin-tests .\n\nRun tests\n~~~~~~~~~\n\nYou can run tests with refresh\\_token by setting ``ADMIN_REFRESH_TOKEN``\nand/or ``CLIENT_REFRESH_TOKEN`` variable:\n\n::\n\n    docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-plugin-tests\n\nOr with access\\_token by setting ``ADMIN_ACCESS_TOKEN`` and/or\n``CLIENT_ACCESS_TOKEN`` variable:\n\n::\n\n    docker run -it -e ADMIN_ACCESS_TOKEN='SOME_ADMIN_ACCESS_TOKEN' devicehive-plugin-tests\n\nOr with user login and password by setting ``ADMIN_LOGIN`` and\n``ADMIN_PASSWORD`` for admin account and/or ``CLIENT_LOGIN`` and\n``CLIENT_PASSWORD`` for client account.\n\n::\n\n    docker run -it -e ADMIN_LOGIN='SOME_ADMIN_LOGIN' -e ADMIN_PASSWORD='SOME_ADMIN_PASSWORD' devicehive-plugin-tests\n\nTo run tests with enabled requests logging you need to change\n``LOG_LEVEL`` variable:\n\n::\n\n    docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' -e LOG_LEVEL='DEBUG' devicehive-plugin-tests\n\nTo run the specific test you need to set ``TEST`` variable:\n\n::\n\n    docker run -it -e TEST=test_api.py::test_get_info -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-plugin-tests\n\n.. |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :target: LICENSE\n.. |PyPI| image:: https://img.shields.io/pypi/v/devicehive-plugin.svg\n   :target: https://pypi.python.org/pypi/devicehive-plugin\n.. |Build Status| image:: https://travis-ci.org/devicehive/devicehive-plugin-python.svg?branch=master\n   :target: https://travis-ci.org/devicehive/devicehive-plugin-python", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://devicehive.com", "keywords": "iot cloud m2m gateway embedded devicehive plugin", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "devicehive-plugin", "package_url": "https://pypi.org/project/devicehive-plugin/", "platform": "", "project_url": "https://pypi.org/project/devicehive-plugin/", "project_urls": {"Homepage": "https://devicehive.com"}, "release_url": "https://pypi.org/project/devicehive-plugin/1.0.3/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "DeviceHive Python plugin connectivity library", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a> <a href=\"https://pypi.python.org/pypi/devicehive-plugin\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06243fe317b9c36b90c8dc0936251d6e903bb661/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646576696365686976652d706c7567696e2e737667\"></a> <a href=\"https://travis-ci.org/devicehive/devicehive-plugin-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c27e576e59c05487c9fe2902ae85e793c9e6d42/68747470733a2f2f7472617669732d63692e6f72672f646576696365686976652f646576696365686976652d706c7567696e2d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"devicehive-plugin\">\n<h2>Devicehive plugin</h2>\n<p>This library provides wrapper for DeviceHive plugin API</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install this package run:</p>\n<pre>pip install devicehive-plugin\n</pre>\n</div>\n<div id=\"creating-a-client-using-plugin-class\">\n<h3>Creating a client using Plugin class</h3>\n<p>First of all you need to create custom <tt>Handler</tt> class.</p>\n<p><tt>Handler</tt> class provides several <tt>handle_*</tt> methods: *\n<tt>handle_connect(self)</tt> will be called after successful connection *\n<tt>handle_event(self, event)</tt> will be called after event of any type is\nreceived. Takes <a href=\"#apievent-object\" rel=\"nofollow\">ApiEvent</a> object. *\n<tt>handle_command_insert(self, command)</tt> will be called after\n<tt>command/insert</tt> event is received. Takes\n<a href=\"#command-object\" rel=\"nofollow\">Command</a> object. *\n<tt>handle_command_update(self, command)</tt> will be called after\n<tt>command/update</tt> event is received. Takes\n<a href=\"#command-object\" rel=\"nofollow\">Command</a> object. *\n<tt>handle_notification(self, notification)</tt> will be called after\n<tt>notification/insert</tt> event is received. Takes\n<a href=\"#notification-object\" rel=\"nofollow\">Notification</a> object.</p>\n<p><tt>handle_event</tt> will be called before type-special <tt>handle</tt> methods.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive_plugin</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Successfully connected'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_event</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n</pre>\n<p>The second step is to use <tt>Plugin</tt> class for creating connection to\nthe server.</p>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive_plugin</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive_plugin</span> <span class=\"kn\">import</span> <span class=\"n\">Plugin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_connect</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Successfully connected'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_event</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">action</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_insert</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_command_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">command</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">command</span><span class=\"o\">.</span><span class=\"n\">command</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">handle_notification</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">notification</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">notification</span><span class=\"o\">.</span><span class=\"n\">notification</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">plugin_access_token</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_ACCESS_TOKEN'</span>\n<span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">Plugin</span><span class=\"p\">(</span><span class=\"n\">SimpleHandler</span><span class=\"p\">)</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">plugin_access_token</span><span class=\"o\">=</span><span class=\"n\">plugin_access_token</span><span class=\"p\">)</span>\n</pre>\n<div id=\"custom-handler-args\">\n<h4>Custom handler args</h4>\n<p>If you need to initialize your handler you can do it the next way:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">devicehive_plugin</span> <span class=\"kn\">import</span> <span class=\"n\">Handler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">devicehive_plugin</span> <span class=\"kn\">import</span> <span class=\"n\">Plugin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleHandler</span><span class=\"p\">(</span><span class=\"n\">Handler</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">api</span><span class=\"p\">,</span> <span class=\"n\">some_arg</span><span class=\"p\">,</span> <span class=\"n\">some_kwarg</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">SimpleHandler</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_some_arg</span> <span class=\"o\">=</span> <span class=\"n\">some_arg</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_some_kwarg</span> <span class=\"o\">=</span> <span class=\"n\">some_kwarg</span>\n\n\n<span class=\"n\">plugin</span> <span class=\"o\">=</span> <span class=\"n\">Plugin</span><span class=\"p\">(</span><span class=\"n\">SimpleHandler</span><span class=\"p\">,</span> <span class=\"s1\">'some_arg'</span><span class=\"p\">,</span> <span class=\"n\">some_kwarg</span><span class=\"o\">=</span><span class=\"s1\">'some_kwarg'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"authentication\">\n<h4>Authentication</h4>\n<p>There are several ways of initial authentication:</p>\n<ul>\n<li>Using plugin\u2019s access token</li>\n<li>Using plugin\u2019s refresh token</li>\n<li>Using user\u2019s access token</li>\n<li>Using user\u2019s refresh token</li>\n<li>Using user\u2019s login and password</li>\n</ul>\n<p>If you want to use anything but plugin\u2019s access token you need to\nprovide <tt>auth_url</tt> parameter.</p>\n<p>Examples:</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span>\n               <span class=\"n\">plugin_access_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_PLUGIN_ACCESS_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">auth_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground-dev.devicehive.com/api/rest'</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">auth_url</span><span class=\"o\">=</span><span class=\"n\">auth_url</span><span class=\"p\">,</span>\n               <span class=\"n\">plugin_refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_PLUGIN_REFRESH_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">auth_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground-dev.devicehive.com/api/rest'</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">auth_url</span><span class=\"o\">=</span><span class=\"n\">auth_url</span><span class=\"p\">,</span>\n               <span class=\"n\">access_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_USER_ACCESS_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">auth_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground-dev.devicehive.com/api/rest'</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">auth_url</span><span class=\"o\">=</span><span class=\"n\">auth_url</span><span class=\"p\">,</span>\n               <span class=\"n\">refresh_token</span><span class=\"o\">=</span><span class=\"s1\">'SOME_USER_REFRESH_TOKEN'</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'ws://playground-dev.devicehive.com/plugin/proxy/'</span>\n<span class=\"n\">topic_name</span> <span class=\"o\">=</span> <span class=\"s1\">'PLUGIN_TOPIC_NAME'</span>\n<span class=\"n\">auth_url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://playground-dev.devicehive.com/api/rest'</span>\n<span class=\"n\">plugin</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">topic_name</span><span class=\"p\">,</span> <span class=\"n\">auth_url</span><span class=\"o\">=</span><span class=\"n\">auth_url</span><span class=\"p\">,</span>\n               <span class=\"n\">login</span><span class=\"o\">=</span><span class=\"s1\">'SOME_USER_LOGIN'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'SOME_USER_PASSWORD'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"api-reference\">\n<h3>Api reference</h3>\n<div id=\"apievent-object\">\n<h4>ApiEvent object</h4>\n<p>Properties (read only):</p>\n<ul>\n<li><tt>is_command_insert_event</tt></li>\n<li><tt>is_command_update_event</tt></li>\n<li><tt>is_command_event</tt></li>\n<li><tt>is_notification_event</tt></li>\n<li><tt>action</tt></li>\n<li><tt>raw_data</tt></li>\n<li><tt>data</tt></li>\n</ul>\n</div>\n<div id=\"command-object\">\n<h4>Command object</h4>\n<p>Properties (read only):</p>\n<ul>\n<li><tt>id</tt></li>\n<li><tt>user_id</tt></li>\n<li><tt>command</tt></li>\n<li><tt>parameters</tt></li>\n<li><tt>lifetime</tt></li>\n<li><tt>timestamp</tt></li>\n<li><tt>last_updated</tt></li>\n<li><tt>status</tt></li>\n<li><tt>result</tt></li>\n</ul>\n</div>\n<div id=\"notification-object\">\n<h4>Notification object</h4>\n<p>Properties (read only):</p>\n<ul>\n<li><tt>device_id</tt></li>\n<li><tt>id</tt></li>\n<li><tt>notification</tt></li>\n<li><tt>parameters</tt></li>\n<li><tt>timestamp</tt></li>\n</ul>\n</div>\n</div>\n<div id=\"docker-tests\">\n<h3>Docker tests</h3>\n<div id=\"build-image\">\n<h4>Build image</h4>\n<pre>docker build -f Dockerfile -t devicehive-plugin-tests .\n</pre>\n</div>\n<div id=\"run-tests\">\n<h4>Run tests</h4>\n<p>You can run tests with refresh_token by setting <tt>ADMIN_REFRESH_TOKEN</tt>\nand/or <tt>CLIENT_REFRESH_TOKEN</tt> variable:</p>\n<pre>docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-plugin-tests\n</pre>\n<p>Or with access_token by setting <tt>ADMIN_ACCESS_TOKEN</tt> and/or\n<tt>CLIENT_ACCESS_TOKEN</tt> variable:</p>\n<pre>docker run -it -e ADMIN_ACCESS_TOKEN='SOME_ADMIN_ACCESS_TOKEN' devicehive-plugin-tests\n</pre>\n<p>Or with user login and password by setting <tt>ADMIN_LOGIN</tt> and\n<tt>ADMIN_PASSWORD</tt> for admin account and/or <tt>CLIENT_LOGIN</tt> and\n<tt>CLIENT_PASSWORD</tt> for client account.</p>\n<pre>docker run -it -e ADMIN_LOGIN='SOME_ADMIN_LOGIN' -e ADMIN_PASSWORD='SOME_ADMIN_PASSWORD' devicehive-plugin-tests\n</pre>\n<p>To run tests with enabled requests logging you need to change\n<tt>LOG_LEVEL</tt> variable:</p>\n<pre>docker run -it -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' -e LOG_LEVEL='DEBUG' devicehive-plugin-tests\n</pre>\n<p>To run the specific test you need to set <tt>TEST</tt> variable:</p>\n<pre>docker run -it -e TEST=test_api.py::test_get_info -e ADMIN_REFRESH_TOKEN='SOME_ADMIN_REFRESH_TOKEN' devicehive-plugin-tests\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3752253, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "a746c554dd3f1b507c557548b937cd27", "sha256": "9ac380570fc17e4043b2730f41eca2453bfdf8d2945efbf7462d11b01e613804"}, "downloads": -1, "filename": "devicehive_plugin-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a746c554dd3f1b507c557548b937cd27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11598, "upload_time": "2018-03-07T12:55:56", "upload_time_iso_8601": "2018-03-07T12:55:56.938854Z", "url": "https://files.pythonhosted.org/packages/0b/71/12223580aecec1db7bc5e6510482727385b7cbfb080426cf3b568de00ce5/devicehive_plugin-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3444be40afff8ab3b32cb58b9f812fc4", "sha256": "7970268d43cd53be871c86d1f543770218bd250fe9ef3c11dd43e0a90cf238b9"}, "downloads": -1, "filename": "devicehive_plugin-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3444be40afff8ab3b32cb58b9f812fc4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 15374, "upload_time": "2018-03-12T17:17:06", "upload_time_iso_8601": "2018-03-12T17:17:06.054691Z", "url": "https://files.pythonhosted.org/packages/ab/04/cdcb8763d7d3d5ac8cd31f7623a38d069ce05348d78075a1a52902103335/devicehive_plugin-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "17ae9ca47b70d931504555c3572ce4ad", "sha256": "9d85708a3e14270212c7d2c0e1ab8f254eb129bad40ed19c61a3469deaa0ba5b"}, "downloads": -1, "filename": "devicehive_plugin-1.0.3.tar.gz", "has_sig": false, "md5_digest": "17ae9ca47b70d931504555c3572ce4ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 15472, "upload_time": "2018-04-10T14:00:11", "upload_time_iso_8601": "2018-04-10T14:00:11.561456Z", "url": "https://files.pythonhosted.org/packages/5f/54/32b1fcec785d9377f9281ce4e9dd202df2ff6420e6afa31f66d08a06244a/devicehive_plugin-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "17ae9ca47b70d931504555c3572ce4ad", "sha256": "9d85708a3e14270212c7d2c0e1ab8f254eb129bad40ed19c61a3469deaa0ba5b"}, "downloads": -1, "filename": "devicehive_plugin-1.0.3.tar.gz", "has_sig": false, "md5_digest": "17ae9ca47b70d931504555c3572ce4ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 15472, "upload_time": "2018-04-10T14:00:11", "upload_time_iso_8601": "2018-04-10T14:00:11.561456Z", "url": "https://files.pythonhosted.org/packages/5f/54/32b1fcec785d9377f9281ce4e9dd202df2ff6420e6afa31f66d08a06244a/devicehive_plugin-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:53 2020"}