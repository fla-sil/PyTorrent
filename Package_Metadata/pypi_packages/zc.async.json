{"info": {"author": "Gary Poster", "author_email": "gary.poster@canonical.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: ZODB", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "===========\nWhat is it?\n===========\n\nThe ``zc.async`` package provides **an easy-to-use Python tool that schedules\nwork persistently and reliably across multiple processes and machines.**\n\nFor instance...\n\n- *Web apps*: maybe your web application lets users request the creation of a\n  large PDF, or some other expensive task.\n\n- *Postponed work*: maybe you have a job that needs to be done at a certain time,\n  not right now.\n\n- *Parallel processing*: maybe you have a long-running problem that can be made\n  to complete faster by splitting it up into discrete parts, each performed in\n  parallel, across multiple machines.\n\n- *Serial processing*: maybe you want to decompose and serialize a job.\n\nHigh-level features include the following:\n\n- easy to use;\n\n- flexible configuration, changeable dynamically in production;\n\n- reliable;\n\n- supports high availability;\n\n- good debugging tools;\n\n- well-tested; and\n\n- friendly to testing.\n\nWhile developed as part of the Zope project, zc.async can be used stand-alone.\n\n=================\nHow does it work?\n=================\n\nThe system uses the Zope Object Database (ZODB), a transactional, pickle-based\nPython object database, for communication and coordination among participating\nprocesses.\n\nzc.async participants can each run in their own process, or share a process\n(run in threads) with other code.\n\nThe Twisted framework supplies some code (failures and reactor implementations,\nprimarily) and some concepts to the package.\n\n======================\nWhere can I read more?\n======================\n\nQuickstarts and in-depth documentation are available in the package and in\nthe `new and exciting on-line documentation`_.\n\n.. _`new and exciting on-line documentation`: http://packages.python.org/zc.async/1.5.0/\n\n\n\n=======\nChanges\n=======\n\n1.5.4 (2011-03-03)\n==================\n\n- Rearrange ftesting.setUp to avoid provoking a DemoStorage bug\n  present in ZODB <= 3.9.3.\n\n- Resolved the following testing issues: signal handlers weren't cleaned\n  up properly in some tests, Twisted was leaking file descriptors during\n  ftesting tearDown (http://twistedmatrix.com/trac/ticket/3063), and\n  the twisted.txt regression test was not repeatable due to\n  Twisted's recalcitrance when it comes to stopping and subsequently\n  starting a reactor instance.\n\n- Fix two undefined variables that could trigger exceptions in corner\n  cases.\n\n\n1.5.3 (2009-11-15)\n==================\n\n- Made zc.async.subscribers.ThreadedDispatcherInstaller keep track of signal\n  handlers it installs in a module global \"signal_handlers.\"\n\n- Made zc.async.ftesting.tearDown restore the signal handlers that were\n  replaced by ThreadedDispatcherInstaller.\n\n- Fix a bug in zc.async.ftesting.setUp and zc.async.testing.print_logs\n  which would result in the default argument for log_file becoming\n  \"fixated\" with an incorrect value across tests.\n\n- Make the ftesting.txt test exercise the 'zc.async' logger in\n  addition to 'zc.async.event'.\n\n- zc.async.utils.dt_to_long coerces return value to long (test pass on 64-bit\n  Python).\n\n- Tests pass on Python 2.6\n\n- The callable of a zc.async.job.Job (or one of its subclasses) can be a\n  method on the Job itself.\n\n1.5.2 (2009-07-22)\n==================\n\n- Fix a bug where zc.async.testing._datetime.now did not accept the same\n  keyword arguments as datetime.datetime, added tests.\n\n- Fix a bug where zc.async.testing._datetime.astimezone did not accept the same\n  keyword arguments as datetime.datetime, added tests.\n\n1.5.1 (2008-10-13)\n==================\n\n- Add a performance optimization with ``isinstance`` before ``providedBy``.\n\n- Add support for filters to ``AgentInstaller``.\n\n- Fix a bug which caused a condition to be always true in ``monitor.Encoder``.\n\n1.5.0 (2008-09-21)\n==================\n\n- Documentation improvements.  Converted documentation into Sphinx system.\n\n- Made \"other\" commit errors for the ``RetryCommonForever`` retry policy have\n  an incremental backoff.  By default, this starts at 0 seconds, and increments\n  by a second to a maximum of 60 seconds.\n\n- Work around a memory leak in zope.i18nmessageid\n  (https://bugs.launchpad.net/zope3/+bug/257657).  The change should be\n  backward-compatible.  It also will produce slightly smaller pickles for Jobs,\n  but that was really not a particular goal.\n\n- Added zc.async.partial.Partial for backward compatibility purposes.\n\n- Fix support for Twisted installed reactor.\n\n- Fix retry behavior for parallel and serial jobs\n\n- Tweaked the uuid.txt to mention zdaemon/supervisor rather than Zope 3.\n\n- Fixed some bugs in egg creation.\n\n- Changed quotas to not use a container that has conflict resolution, since\n  these values should be a strict maximum.\n\n- We only want to claim a job if we are activated.   Make the agent check the\n  ``activated`` and ``dead`` attributes of the parent dispatcher before\n  claiming.\n\n- When activating, also clean out jobs from the dispatcher's agents, just as\n  with deactivating.  This should protect from unusual race conditions in\n  which the dispatcher got a job after being deactivated.\n\n- Change dispatcher to ping before claiming jobs.\n\n- when a ping reactivates a dispatcher, use new method ``reactivate`` rather\n  than ``activate``.  This fires a new ``DispatcherReactivated`` event.\n\n- It's still theoretically possible (for instance, with a\n  badly-behaved long commit that causes a sibling to believe that the\n  process is dead) that an async worker process would be working on a\n  job that it shouldn't be.  For instance, the job has been taken away,\n  and is another process' responsibility now.  Now, whenever a\n  process is about to start any work (especially a retry), it should\n  double-check that the job is registered as being performed by itself.\n  If not, the process should abort the transaction, make an error\n  log, and give up on the job.  Write conflict errors on the job should\n  protect us from the edge cases in this story.\n\n- The dispatcher's ``getActiveJobs`` method now actually tells you information\n  about what's going on in the threads at this instant, rather than what's\n  going on in the database.  The poll's ``active jobs`` keys continues to\n  report what was true *in the database* as of *the last poll*.  This change\n  also affects the ``async jobs`` monitor command.\n\n- The dispatcher method ``getJobInfo`` (and the monitor command ``async job``)\n  now returns the name of the queue for the job, the name of the agent for the\n  job, and whether the job has been, or was reassigned.\n\n- zc.async events inherit from 'zc.component.interfaces.IObjectEvent' instead\n  of a zc.async specific IObjectEvent (thanks to Satchit Haridas).\n\n- Added new monitoring and introspection tools: the ``asyncdb`` zc.monitor\n  command (and, for Python, the code in monitordb.py).  This code provides\n  easy spellings to examine the database's view of what is happening in\n  zc.async.  Because it is the database, it also has a much longer historical\n  view than the ``async`` tools.  The best way to learn about these tools is\n  to read the extensive documentation provided within zc.monitor by\n  using ``asyncdb help`` and ``asyncdb help <TOOL NAME>``.\n\n- Added new preferred way of filtering agent choices: the new ``filter``\n  attribute.  Using filters, rather than \"choosers,\" allows several ``asyncdb``\n  tools to filter pending jobs based on what an agent is willing to do.  It\n  also is a smaller contract, and so a filter requires less code than a chooser\n  in the common case.  On the other hand, using a filter alone doesn't allow\n  the agent to try to *prefer* certain tasks.\n\n- Deprecated agent.chooseFirst.  It is no longer necesary, since an agent\n  without a chooser and with a filter of None has the same behavior.  It is\n  retained for legacy databases.\n\n- Moved deprecated legacy code to new ``legacy`` module.\n\n- Tried to be significantly reduce the chance of spurious timing errors in the\n  tests, at the expense of causing the tests to take longer to run.\n\n- monitoring support depends on the new zc.monitor package, which is not Zope\n  specific.  This means non-Zope 3 apps can take advantage of the monitoring\n  support.  To use, use the [monitor] target; this only adds simplejson,\n  zc.ngi, and zc.monitor to the basic dependencies.\n\n- Make ftesting try to join worker threads, in addition to polling thread,\n  to try to eliminate intermittent test-runner warnings in ftests that a\n  thread is left behind.  If the threads do not end, inform the user what jobs\n  are not letting go.  (thanks to Patrick Strawderman)\n\n1.4.2 (2009-07-17)\n==================\n\n- Fix a bug where zc.async.testing._datetime.now did not accept the same\n  keyword arguments as datetime.datetime, added tests.\n\n1.4.1 (2008-07-30)\n==================\n\n- The new ``serial`` and ``parallel`` helpers did not allow the\n  ``postprocess`` argument to be a partial closure, and were being naughty.\n  Fixed.\n\n- Added tests and demos for advanced features of ``serial`` and ``parallel``.\n\n- More tweaks to the new Quickstart S5 document.\n\n1.4.0 (2008-07-30)\n==================\n\n- Mentioned in ftesting.txt that Zope 3 users should uses zope.app.testing\n  3.4.2 or newer.  Also added a summary section at the beginning of that file.\n\n- Added logging of critical messages to __stdout__ for ``ftesting.setUp``.\n  This can help discovering problems in callback transactions.  This uses a new\n  helper function , ``print_logs``, in zc.async.testing, which is primarily\n  intended to be used for quick and dirty debugging\n\n- Changed testing.wait_for_result and testing.wait_for_annotation to ignore\n  ReadConflictErrors, so they can be used more reliably in tests that use\n  MappingStorage, and other storages without MVCC.\n\n- Support <type 'builtin_function_or_method'> for adaptation to Job.\n\n- Add warning about long commits to tips and tricks.\n\n- After complaining about a polling dispatcher that is deactivated not really\n  being dead in the logs, reactivate.\n\n- No longer use intermediate job to implement the success/failure addCallbacks\n  behavior.  Introduce an ICallbackProxy that can be used for this kind of\n  behavior instead.  This change was driven by two desires.\n\n  - Don't log the intermediate result.  It makes logs harder to read with\n    unnecessary duplications of pertinent data hidden within unimportant\n    differences in the log entries.\n\n  - Don't unnecessarily remember errors in success/failure callbacks.  This can\n    cause unnecessary failures in unusual situations.\n\n  The callback proxy accepts callbacks, which are added to the selected job\n  (success or failure) when the job is selected.\n\n  This change introduces some hopefully trivial incompatibilities, which\n  basically come down to the callback being a proxy, not a real job. Use the\n  convenience properties ``success`` and ``failure`` on the proxy to look at\n  the respective jobs. After the proxy is evaluated, the ``job`` attribute\n  will hold the job that was actually run. ``status`` and ``result`` are\n  conveniences to get the status and result of the selected job.\n\n- Add ``parallel`` and ``serial`` convenience functions to zc.async.job to make\n  it trivial to schedule and process decomposed jobs.\n\n- Add ``start`` convenience function to zc.async.configure to make it trivial\n  to start up a common-case configuration of a zc.async dispatcher.\n\n- No longer use protected attributes of callbacks in ``resumeCallbacks``.\n\n- The \"local\" code is now moved out from the dispatcher module to\n  threadlocal.  This is to recognize that the local code is now modified\n  outside of the dispatcher module, as described in the next bullet.\n\n- Jobs, when called, are responsible for setting the \"local\" job value.  This\n  means that zc.async.local.getJob() always returns the currently running job,\n  whether it is a top-level job (as before) or a callback (now).\n\n- Start on S5 QuickStart presentation (see QUICKSTART_1_VIRTUALENV.txt in\n  package).\n\n1.3 (2008-07-04)\n================\n\n- added \"Tips and Tricks\" and incorporated into the PyPI page.\n\n- added ``setUp`` and ``tearDown`` hooks to Job class so that code can run\n  before and after the main job's code.  The output of ``setUp`` is passed as\n  an argument to ``tearDown`` so that one can pass state to the other, if\n  needed. ``setUp`` is run immediately before the actual job call.\n  ``tearDown`` runs after the transaction is committed, or after it was aborted\n  if there was a failure.   A retry requested by a retry policy causes the\n  methods to be run again.  A failure in ``setUp`` is considered to be a\n  failure in the job, as far as the retryPolicy is concerned (i.e., the job\n  calls the retry policy's ``jobError`` method).  If ``setUp`` fails, the job\n  is not called, bit ``tearDown`` is.  ``tearDown`` will fail with a critical\n  log message, but then processing will continue.\n\n- using the new ``setUp`` and ``tearDown`` hooks, added a Zope 3-specific Job\n  subclass (see zc.async.z3.Job) that remembers the zope.app.component site and\n  interaction participants when instantiated. These can be mutated. Then, when\n  the job is run, the ``setUp`` sets up the site and a security interaction\n  with the old participants, and then the ``tearDown`` tears it all down after\n  the transaction has committed.\n\n- changed retry policy logs to \"WARNING\" level, from \"INFO\" level.\n\n- changed many dispatcher errors to \"CRITICAL\" level from \"ERROR\" level.\n\n- added \"CRITICAL\" level logs for \"other\" commit retries on the\n  RetryCommonForever retry policy.\n\n- added ``remove`` method on queue.\n\n- added helpers for setting up and tearing down Zope 3 functional tests\n  (ftesting.py), and a discussion of how to write Zope 3 functional tests with\n  layers (zope.app.testing.functional) in ftesting.txt.\n\n- remove obsolete retry approach for success/failure callbacks\n  (``completeStartedJobArguments``): it is now handled by retry policies.\n\n- remove odd full-path self-references within the utils module.\n\n- renamed ``zc.async.utils.try_transaction_five_times`` to\n  ``zc.async.utils.try_five_times``.\n\n- doc improvements and fixes (thanks to Zvezdan Petkovic and Gintautas\n  Miliauskas).\n\n- the ``z3`` \"extra\" distutils target now explicitly depends on zope.security,\n  zope.app.security, and zope.app.component.  This almost certainly does not\n  increase the practical dependencies of the ``z3`` extras, but it does reflect\n  new direct dependencies of the z3-specific modules in the package.\n\n1.2 (2008-06-20)\n================\n\n- made the log for finding an activated agent report the pertinent queue's oid\n  as an unpacked integer, rather than the packed string blob. Use\n  ``ZODB.utils.p64`` to convert back to an oid that the ZODB will recognize.\n\n- Bugfix: in failing a job, the job thought it was in its old agent, and the\n  ``fail`` call failed. This is now tested by the first example in new doctest\n  ``catastrophes.txt``.\n\n- jobs no longer default to a ``begin_by`` value of one hour after the\n  ``begin_after``.  The default now is no limit.\n\n- Made dispatcher much more robust to transaction errors and ZEO\n  ClientDisconnected errors.\n\n- Jobs now use an IRetryPolicy to decide what to do on failure within a job,\n  within the commit of the result, and if the job is interrupted.  This allows\n  support of transactional jobs, transactional jobs that critically must be\n  run to completion, and non-transactional jobs such as communicating with an\n  external service.\n\n- The default retry policy supports retries for ClientDisconnected errors,\n  transaction errors, and interruptions.\n\n- ``job.txt`` has been expanded significantly to show error handling and the\n  use of retry policies. New file ``catastrophes.txt`` shows handling of other\n  catastrophes, such as interruptions to polling.\n\n- job errors now go in the main zc.async.event log rather than in the\n  zc.async.trace log.  Successes continue to go in the trace log.\n\n- callback failures go to the main log as a CRITICAL error, by default.\n\n- ``handleInterrupt`` is the new protocol on jobs to inform them that they were\n  active in a dispatcher that is now dead. They either fail or reschedule,\n  depending on the associated IRetryPolicy for the job. If they reschedule,\n  this should either be a datetime or timedelta. The job calls the agent's\n  ``reschedule`` method. If the timedelta is empty or negative, or the datetime\n  is earlier than now, the job is put back in the queue with a new ``putBack``\n  method on the queue. This is intended to be the opposite of ``claim``. Jobs\n  put in the queue with ``putBack`` will be pulled out before any others.\n\n- convert to using zope.minmax rather than locally defined ``Atom``.\n\n- Fix (and simplify) last_ping code so as to reduce unnecessarily writing the\n  state of the parent DispatcherAgents collection to the database whenever the\n  atom changed.\n\n- Depends on new release of zc.twist (1.3)\n\n- Switched dispatcher's in-memory storage of job and poll information to be per\n  job or per poll, respectively, rather than per time period, so as to try and\n  make memory usage more predictable (for instance, whether a dispatcher is\n  whipping through lots of jobs quickly, or doing work more slowly).\n\n1.1.1 (2008-05-14)\n==================\n\n- more README tweaks.\n\n- converted all reports from the dispatcher, including the monitor output,\n  to use \"unpacked\" integer oids.  This addresses a problem that simplejson\n  was having in trying to interpret the packed string blobs as unicode, and\n  then making zc.ngi fall over.  To get the object, then, you'll need to\n  use ``ZODB.utils.p64``, like this:\n  ``connection.get(ZODB.utils.p64(INTEGER_OID))``, where ``INTEGER_OID``\n  indicates the integer oid of the object you want to examine.\n\n- added several more tests for the monitor code.\n\n- made the ``async jobs`` monitor command be \"up to the minute\".  Before, it\n  included all of the new and active jobs from the previous poll; now, it\n  also filters out those that have since completed.\n\n- The ``async job`` command was broken, as revealed by a new monitor test.\n  Fixed, which also means we need a new version of zope.bforest (1.2) for a new\n  feature there.\n\n1.1 (2008-04-24)\n================\n\n- Fired events when the IQueues and IQueue objects are installed by the\n  QueueInstaller (thanks to Fred Drake).\n\n- Dispatchers make agent threads keep their connections, so each connection's\n  object cache use is optimized if the agent regularly requests jobs with\n  the same objects.\n\n- README improved (thanks to Benji York and Sebastian Ware).\n\n- Callbacks are logged at start in the trace log.\n\n- All job results (including callbacks) are logged, including verbose\n  tracebacks if the callback generated a failure.\n\n- Had the ThreadedDispatcherInstaller subscriber stash the thread on the\n  dispatcher, so you can shut down tests like this:\n\n  >>> import zc.async.dispatcher\n  >>> dispatcher = zc.async.dispatcher.get()\n  >>> dispatcher.reactor.callFromThread(dispatcher.reactor.stop)\n  >>> dispatcher.thread.join(3)\n\n- Added ``getQueue`` to zc.async.local as a convenience (it does what you\n  could already do: ``zc.async.local.getJob().queue``).\n\n- Clarified that ``IQueue.pull`` is the approved way of removing scheduled jobs\n  from a queue in interfaces and README.\n\n- reports in the logs of a job's success or failure come before callbacks are\n  started.\n\n- Added a section showing how the basic_dispatcher_policy.zcml worked, which\n  then pushed the former README_3 examples into README_3b.\n\n- Put ZPL everywhere I was supposed to.\n\n- Moved a number of helpful testing functions out of footnotes and into\n  zc.async.testing, both so that zc.async tests don't have to redefine them\n  and client packages can reuse them.\n\n1.0 (2008-04-09)\n================\n\nInitial release.", "description_content_type": null, "docs_url": "https://pythonhosted.org/zc.async/", "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://packages.python.org/zc.async", "keywords": null, "license": "ZPL", "maintainer": null, "maintainer_email": null, "name": "zc.async", "package_url": "https://pypi.org/project/zc.async/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zc.async/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://packages.python.org/zc.async"}, "release_url": "https://pypi.org/project/zc.async/1.5.4/", "requires_dist": null, "requires_python": null, "summary": "Schedule durable tasks across multiple processes and machines.", "version": "1.5.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-it\">\n<h2>What is it?</h2>\n<p>The <tt>zc.async</tt> package provides <strong>an easy-to-use Python tool that schedules\nwork persistently and reliably across multiple processes and machines.</strong></p>\n<p>For instance\u2026</p>\n<ul>\n<li><em>Web apps</em>: maybe your web application lets users request the creation of a\nlarge PDF, or some other expensive task.</li>\n<li><em>Postponed work</em>: maybe you have a job that needs to be done at a certain time,\nnot right now.</li>\n<li><em>Parallel processing</em>: maybe you have a long-running problem that can be made\nto complete faster by splitting it up into discrete parts, each performed in\nparallel, across multiple machines.</li>\n<li><em>Serial processing</em>: maybe you want to decompose and serialize a job.</li>\n</ul>\n<p>High-level features include the following:</p>\n<ul>\n<li>easy to use;</li>\n<li>flexible configuration, changeable dynamically in production;</li>\n<li>reliable;</li>\n<li>supports high availability;</li>\n<li>good debugging tools;</li>\n<li>well-tested; and</li>\n<li>friendly to testing.</li>\n</ul>\n<p>While developed as part of the Zope project, zc.async can be used stand-alone.</p>\n</div>\n<div id=\"how-does-it-work\">\n<h2>How does it work?</h2>\n<p>The system uses the Zope Object Database (ZODB), a transactional, pickle-based\nPython object database, for communication and coordination among participating\nprocesses.</p>\n<p>zc.async participants can each run in their own process, or share a process\n(run in threads) with other code.</p>\n<p>The Twisted framework supplies some code (failures and reactor implementations,\nprimarily) and some concepts to the package.</p>\n</div>\n<div id=\"where-can-i-read-more\">\n<h2>Where can I read more?</h2>\n<p>Quickstarts and in-depth documentation are available in the package and in\nthe <a href=\"http://packages.python.org/zc.async/1.5.0/\" rel=\"nofollow\">new and exciting on-line documentation</a>.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>1.5.4 (2011-03-03)</h3>\n<ul>\n<li>Rearrange ftesting.setUp to avoid provoking a DemoStorage bug\npresent in ZODB &lt;= 3.9.3.</li>\n<li>Resolved the following testing issues: signal handlers weren\u2019t cleaned\nup properly in some tests, Twisted was leaking file descriptors during\nftesting tearDown (<a href=\"http://twistedmatrix.com/trac/ticket/3063\" rel=\"nofollow\">http://twistedmatrix.com/trac/ticket/3063</a>), and\nthe twisted.txt regression test was not repeatable due to\nTwisted\u2019s recalcitrance when it comes to stopping and subsequently\nstarting a reactor instance.</li>\n<li>Fix two undefined variables that could trigger exceptions in corner\ncases.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.5.3 (2009-11-15)</h3>\n<ul>\n<li>Made zc.async.subscribers.ThreadedDispatcherInstaller keep track of signal\nhandlers it installs in a module global \u201csignal_handlers.\u201d</li>\n<li>Made zc.async.ftesting.tearDown restore the signal handlers that were\nreplaced by ThreadedDispatcherInstaller.</li>\n<li>Fix a bug in zc.async.ftesting.setUp and zc.async.testing.print_logs\nwhich would result in the default argument for log_file becoming\n\u201cfixated\u201d with an incorrect value across tests.</li>\n<li>Make the ftesting.txt test exercise the \u2018zc.async\u2019 logger in\naddition to \u2018zc.async.event\u2019.</li>\n<li>zc.async.utils.dt_to_long coerces return value to long (test pass on 64-bit\nPython).</li>\n<li>Tests pass on Python 2.6</li>\n<li>The callable of a zc.async.job.Job (or one of its subclasses) can be a\nmethod on the Job itself.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.5.2 (2009-07-22)</h3>\n<ul>\n<li>Fix a bug where zc.async.testing._datetime.now did not accept the same\nkeyword arguments as datetime.datetime, added tests.</li>\n<li>Fix a bug where zc.async.testing._datetime.astimezone did not accept the same\nkeyword arguments as datetime.datetime, added tests.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.5.1 (2008-10-13)</h3>\n<ul>\n<li>Add a performance optimization with <tt>isinstance</tt> before <tt>providedBy</tt>.</li>\n<li>Add support for filters to <tt>AgentInstaller</tt>.</li>\n<li>Fix a bug which caused a condition to be always true in <tt>monitor.Encoder</tt>.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.5.0 (2008-09-21)</h3>\n<ul>\n<li>Documentation improvements.  Converted documentation into Sphinx system.</li>\n<li>Made \u201cother\u201d commit errors for the <tt>RetryCommonForever</tt> retry policy have\nan incremental backoff.  By default, this starts at 0 seconds, and increments\nby a second to a maximum of 60 seconds.</li>\n<li>Work around a memory leak in zope.i18nmessageid\n(<a href=\"https://bugs.launchpad.net/zope3/+bug/257657\" rel=\"nofollow\">https://bugs.launchpad.net/zope3/+bug/257657</a>).  The change should be\nbackward-compatible.  It also will produce slightly smaller pickles for Jobs,\nbut that was really not a particular goal.</li>\n<li>Added zc.async.partial.Partial for backward compatibility purposes.</li>\n<li>Fix support for Twisted installed reactor.</li>\n<li>Fix retry behavior for parallel and serial jobs</li>\n<li>Tweaked the uuid.txt to mention zdaemon/supervisor rather than Zope 3.</li>\n<li>Fixed some bugs in egg creation.</li>\n<li>Changed quotas to not use a container that has conflict resolution, since\nthese values should be a strict maximum.</li>\n<li>We only want to claim a job if we are activated.   Make the agent check the\n<tt>activated</tt> and <tt>dead</tt> attributes of the parent dispatcher before\nclaiming.</li>\n<li>When activating, also clean out jobs from the dispatcher\u2019s agents, just as\nwith deactivating.  This should protect from unusual race conditions in\nwhich the dispatcher got a job after being deactivated.</li>\n<li>Change dispatcher to ping before claiming jobs.</li>\n<li>when a ping reactivates a dispatcher, use new method <tt>reactivate</tt> rather\nthan <tt>activate</tt>.  This fires a new <tt>DispatcherReactivated</tt> event.</li>\n<li>It\u2019s still theoretically possible (for instance, with a\nbadly-behaved long commit that causes a sibling to believe that the\nprocess is dead) that an async worker process would be working on a\njob that it shouldn\u2019t be.  For instance, the job has been taken away,\nand is another process\u2019 responsibility now.  Now, whenever a\nprocess is about to start any work (especially a retry), it should\ndouble-check that the job is registered as being performed by itself.\nIf not, the process should abort the transaction, make an error\nlog, and give up on the job.  Write conflict errors on the job should\nprotect us from the edge cases in this story.</li>\n<li>The dispatcher\u2019s <tt>getActiveJobs</tt> method now actually tells you information\nabout what\u2019s going on in the threads at this instant, rather than what\u2019s\ngoing on in the database.  The poll\u2019s <tt>active jobs</tt> keys continues to\nreport what was true <em>in the database</em> as of <em>the last poll</em>.  This change\nalso affects the <tt>async jobs</tt> monitor command.</li>\n<li>The dispatcher method <tt>getJobInfo</tt> (and the monitor command <tt>async job</tt>)\nnow returns the name of the queue for the job, the name of the agent for the\njob, and whether the job has been, or was reassigned.</li>\n<li>zc.async events inherit from \u2018zc.component.interfaces.IObjectEvent\u2019 instead\nof a zc.async specific IObjectEvent (thanks to Satchit Haridas).</li>\n<li>Added new monitoring and introspection tools: the <tt>asyncdb</tt> zc.monitor\ncommand (and, for Python, the code in monitordb.py).  This code provides\neasy spellings to examine the database\u2019s view of what is happening in\nzc.async.  Because it is the database, it also has a much longer historical\nview than the <tt>async</tt> tools.  The best way to learn about these tools is\nto read the extensive documentation provided within zc.monitor by\nusing <tt>asyncdb help</tt> and <tt>asyncdb help &lt;TOOL NAME&gt;</tt>.</li>\n<li>Added new preferred way of filtering agent choices: the new <tt>filter</tt>\nattribute.  Using filters, rather than \u201cchoosers,\u201d allows several <tt>asyncdb</tt>\ntools to filter pending jobs based on what an agent is willing to do.  It\nalso is a smaller contract, and so a filter requires less code than a chooser\nin the common case.  On the other hand, using a filter alone doesn\u2019t allow\nthe agent to try to <em>prefer</em> certain tasks.</li>\n<li>Deprecated agent.chooseFirst.  It is no longer necesary, since an agent\nwithout a chooser and with a filter of None has the same behavior.  It is\nretained for legacy databases.</li>\n<li>Moved deprecated legacy code to new <tt>legacy</tt> module.</li>\n<li>Tried to be significantly reduce the chance of spurious timing errors in the\ntests, at the expense of causing the tests to take longer to run.</li>\n<li>monitoring support depends on the new zc.monitor package, which is not Zope\nspecific.  This means non-Zope 3 apps can take advantage of the monitoring\nsupport.  To use, use the [monitor] target; this only adds simplejson,\nzc.ngi, and zc.monitor to the basic dependencies.</li>\n<li>Make ftesting try to join worker threads, in addition to polling thread,\nto try to eliminate intermittent test-runner warnings in ftests that a\nthread is left behind.  If the threads do not end, inform the user what jobs\nare not letting go.  (thanks to Patrick Strawderman)</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.4.2 (2009-07-17)</h3>\n<ul>\n<li>Fix a bug where zc.async.testing._datetime.now did not accept the same\nkeyword arguments as datetime.datetime, added tests.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.4.1 (2008-07-30)</h3>\n<ul>\n<li>The new <tt>serial</tt> and <tt>parallel</tt> helpers did not allow the\n<tt>postprocess</tt> argument to be a partial closure, and were being naughty.\nFixed.</li>\n<li>Added tests and demos for advanced features of <tt>serial</tt> and <tt>parallel</tt>.</li>\n<li>More tweaks to the new Quickstart S5 document.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.4.0 (2008-07-30)</h3>\n<ul>\n<li><p>Mentioned in ftesting.txt that Zope 3 users should uses zope.app.testing\n3.4.2 or newer.  Also added a summary section at the beginning of that file.</p>\n</li>\n<li><p>Added logging of critical messages to __stdout__ for <tt>ftesting.setUp</tt>.\nThis can help discovering problems in callback transactions.  This uses a new\nhelper function , <tt>print_logs</tt>, in zc.async.testing, which is primarily\nintended to be used for quick and dirty debugging</p>\n</li>\n<li><p>Changed testing.wait_for_result and testing.wait_for_annotation to ignore\nReadConflictErrors, so they can be used more reliably in tests that use\nMappingStorage, and other storages without MVCC.</p>\n</li>\n<li><p>Support &lt;type \u2018builtin_function_or_method\u2019&gt; for adaptation to Job.</p>\n</li>\n<li><p>Add warning about long commits to tips and tricks.</p>\n</li>\n<li><p>After complaining about a polling dispatcher that is deactivated not really\nbeing dead in the logs, reactivate.</p>\n</li>\n<li><p>No longer use intermediate job to implement the success/failure addCallbacks\nbehavior.  Introduce an ICallbackProxy that can be used for this kind of\nbehavior instead.  This change was driven by two desires.</p>\n<ul>\n<li>Don\u2019t log the intermediate result.  It makes logs harder to read with\nunnecessary duplications of pertinent data hidden within unimportant\ndifferences in the log entries.</li>\n<li>Don\u2019t unnecessarily remember errors in success/failure callbacks.  This can\ncause unnecessary failures in unusual situations.</li>\n</ul>\n<p>The callback proxy accepts callbacks, which are added to the selected job\n(success or failure) when the job is selected.</p>\n<p>This change introduces some hopefully trivial incompatibilities, which\nbasically come down to the callback being a proxy, not a real job. Use the\nconvenience properties <tt>success</tt> and <tt>failure</tt> on the proxy to look at\nthe respective jobs. After the proxy is evaluated, the <tt>job</tt> attribute\nwill hold the job that was actually run. <tt>status</tt> and <tt>result</tt> are\nconveniences to get the status and result of the selected job.</p>\n</li>\n<li><p>Add <tt>parallel</tt> and <tt>serial</tt> convenience functions to zc.async.job to make\nit trivial to schedule and process decomposed jobs.</p>\n</li>\n<li><p>Add <tt>start</tt> convenience function to zc.async.configure to make it trivial\nto start up a common-case configuration of a zc.async dispatcher.</p>\n</li>\n<li><p>No longer use protected attributes of callbacks in <tt>resumeCallbacks</tt>.</p>\n</li>\n<li><p>The \u201clocal\u201d code is now moved out from the dispatcher module to\nthreadlocal.  This is to recognize that the local code is now modified\noutside of the dispatcher module, as described in the next bullet.</p>\n</li>\n<li><p>Jobs, when called, are responsible for setting the \u201clocal\u201d job value.  This\nmeans that zc.async.local.getJob() always returns the currently running job,\nwhether it is a top-level job (as before) or a callback (now).</p>\n</li>\n<li><p>Start on S5 QuickStart presentation (see QUICKSTART_1_VIRTUALENV.txt in\npackage).</p>\n</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.3 (2008-07-04)</h3>\n<ul>\n<li>added \u201cTips and Tricks\u201d and incorporated into the PyPI page.</li>\n<li>added <tt>setUp</tt> and <tt>tearDown</tt> hooks to Job class so that code can run\nbefore and after the main job\u2019s code.  The output of <tt>setUp</tt> is passed as\nan argument to <tt>tearDown</tt> so that one can pass state to the other, if\nneeded. <tt>setUp</tt> is run immediately before the actual job call.\n<tt>tearDown</tt> runs after the transaction is committed, or after it was aborted\nif there was a failure.   A retry requested by a retry policy causes the\nmethods to be run again.  A failure in <tt>setUp</tt> is considered to be a\nfailure in the job, as far as the retryPolicy is concerned (i.e., the job\ncalls the retry policy\u2019s <tt>jobError</tt> method).  If <tt>setUp</tt> fails, the job\nis not called, bit <tt>tearDown</tt> is.  <tt>tearDown</tt> will fail with a critical\nlog message, but then processing will continue.</li>\n<li>using the new <tt>setUp</tt> and <tt>tearDown</tt> hooks, added a Zope 3-specific Job\nsubclass (see zc.async.z3.Job) that remembers the zope.app.component site and\ninteraction participants when instantiated. These can be mutated. Then, when\nthe job is run, the <tt>setUp</tt> sets up the site and a security interaction\nwith the old participants, and then the <tt>tearDown</tt> tears it all down after\nthe transaction has committed.</li>\n<li>changed retry policy logs to \u201cWARNING\u201d level, from \u201cINFO\u201d level.</li>\n<li>changed many dispatcher errors to \u201cCRITICAL\u201d level from \u201cERROR\u201d level.</li>\n<li>added \u201cCRITICAL\u201d level logs for \u201cother\u201d commit retries on the\nRetryCommonForever retry policy.</li>\n<li>added <tt>remove</tt> method on queue.</li>\n<li>added helpers for setting up and tearing down Zope 3 functional tests\n(ftesting.py), and a discussion of how to write Zope 3 functional tests with\nlayers (zope.app.testing.functional) in ftesting.txt.</li>\n<li>remove obsolete retry approach for success/failure callbacks\n(<tt>completeStartedJobArguments</tt>): it is now handled by retry policies.</li>\n<li>remove odd full-path self-references within the utils module.</li>\n<li>renamed <tt>zc.async.utils.try_transaction_five_times</tt> to\n<tt>zc.async.utils.try_five_times</tt>.</li>\n<li>doc improvements and fixes (thanks to Zvezdan Petkovic and Gintautas\nMiliauskas).</li>\n<li>the <tt>z3</tt> \u201cextra\u201d distutils target now explicitly depends on zope.security,\nzope.app.security, and zope.app.component.  This almost certainly does not\nincrease the practical dependencies of the <tt>z3</tt> extras, but it does reflect\nnew direct dependencies of the z3-specific modules in the package.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.2 (2008-06-20)</h3>\n<ul>\n<li>made the log for finding an activated agent report the pertinent queue\u2019s oid\nas an unpacked integer, rather than the packed string blob. Use\n<tt>ZODB.utils.p64</tt> to convert back to an oid that the ZODB will recognize.</li>\n<li>Bugfix: in failing a job, the job thought it was in its old agent, and the\n<tt>fail</tt> call failed. This is now tested by the first example in new doctest\n<tt>catastrophes.txt</tt>.</li>\n<li>jobs no longer default to a <tt>begin_by</tt> value of one hour after the\n<tt>begin_after</tt>.  The default now is no limit.</li>\n<li>Made dispatcher much more robust to transaction errors and ZEO\nClientDisconnected errors.</li>\n<li>Jobs now use an IRetryPolicy to decide what to do on failure within a job,\nwithin the commit of the result, and if the job is interrupted.  This allows\nsupport of transactional jobs, transactional jobs that critically must be\nrun to completion, and non-transactional jobs such as communicating with an\nexternal service.</li>\n<li>The default retry policy supports retries for ClientDisconnected errors,\ntransaction errors, and interruptions.</li>\n<li><tt>job.txt</tt> has been expanded significantly to show error handling and the\nuse of retry policies. New file <tt>catastrophes.txt</tt> shows handling of other\ncatastrophes, such as interruptions to polling.</li>\n<li>job errors now go in the main zc.async.event log rather than in the\nzc.async.trace log.  Successes continue to go in the trace log.</li>\n<li>callback failures go to the main log as a CRITICAL error, by default.</li>\n<li><tt>handleInterrupt</tt> is the new protocol on jobs to inform them that they were\nactive in a dispatcher that is now dead. They either fail or reschedule,\ndepending on the associated IRetryPolicy for the job. If they reschedule,\nthis should either be a datetime or timedelta. The job calls the agent\u2019s\n<tt>reschedule</tt> method. If the timedelta is empty or negative, or the datetime\nis earlier than now, the job is put back in the queue with a new <tt>putBack</tt>\nmethod on the queue. This is intended to be the opposite of <tt>claim</tt>. Jobs\nput in the queue with <tt>putBack</tt> will be pulled out before any others.</li>\n<li>convert to using zope.minmax rather than locally defined <tt>Atom</tt>.</li>\n<li>Fix (and simplify) last_ping code so as to reduce unnecessarily writing the\nstate of the parent DispatcherAgents collection to the database whenever the\natom changed.</li>\n<li>Depends on new release of zc.twist (1.3)</li>\n<li>Switched dispatcher\u2019s in-memory storage of job and poll information to be per\njob or per poll, respectively, rather than per time period, so as to try and\nmake memory usage more predictable (for instance, whether a dispatcher is\nwhipping through lots of jobs quickly, or doing work more slowly).</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.1.1 (2008-05-14)</h3>\n<ul>\n<li>more README tweaks.</li>\n<li>converted all reports from the dispatcher, including the monitor output,\nto use \u201cunpacked\u201d integer oids.  This addresses a problem that simplejson\nwas having in trying to interpret the packed string blobs as unicode, and\nthen making zc.ngi fall over.  To get the object, then, you\u2019ll need to\nuse <tt>ZODB.utils.p64</tt>, like this:\n<tt>connection.get(ZODB.utils.p64(INTEGER_OID))</tt>, where <tt>INTEGER_OID</tt>\nindicates the integer oid of the object you want to examine.</li>\n<li>added several more tests for the monitor code.</li>\n<li>made the <tt>async jobs</tt> monitor command be \u201cup to the minute\u201d.  Before, it\nincluded all of the new and active jobs from the previous poll; now, it\nalso filters out those that have since completed.</li>\n<li>The <tt>async job</tt> command was broken, as revealed by a new monitor test.\nFixed, which also means we need a new version of zope.bforest (1.2) for a new\nfeature there.</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>1.1 (2008-04-24)</h3>\n<ul>\n<li><p>Fired events when the IQueues and IQueue objects are installed by the\nQueueInstaller (thanks to Fred Drake).</p>\n</li>\n<li><p>Dispatchers make agent threads keep their connections, so each connection\u2019s\nobject cache use is optimized if the agent regularly requests jobs with\nthe same objects.</p>\n</li>\n<li><p>README improved (thanks to Benji York and Sebastian Ware).</p>\n</li>\n<li><p>Callbacks are logged at start in the trace log.</p>\n</li>\n<li><p>All job results (including callbacks) are logged, including verbose\ntracebacks if the callback generated a failure.</p>\n</li>\n<li><p>Had the ThreadedDispatcherInstaller subscriber stash the thread on the\ndispatcher, so you can shut down tests like this:</p>\n<pre>&gt;&gt;&gt; import zc.async.dispatcher\n&gt;&gt;&gt; dispatcher = zc.async.dispatcher.get()\n&gt;&gt;&gt; dispatcher.reactor.callFromThread(dispatcher.reactor.stop)\n&gt;&gt;&gt; dispatcher.thread.join(3)\n</pre>\n</li>\n<li><p>Added <tt>getQueue</tt> to zc.async.local as a convenience (it does what you\ncould already do: <tt><span class=\"pre\">zc.async.local.getJob().queue</span></tt>).</p>\n</li>\n<li><p>Clarified that <tt>IQueue.pull</tt> is the approved way of removing scheduled jobs\nfrom a queue in interfaces and README.</p>\n</li>\n<li><p>reports in the logs of a job\u2019s success or failure come before callbacks are\nstarted.</p>\n</li>\n<li><p>Added a section showing how the basic_dispatcher_policy.zcml worked, which\nthen pushed the former README_3 examples into README_3b.</p>\n</li>\n<li><p>Put ZPL everywhere I was supposed to.</p>\n</li>\n<li><p>Moved a number of helpful testing functions out of footnotes and into\nzc.async.testing, both so that zc.async tests don\u2019t have to redefine them\nand client packages can reuse them.</p>\n</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>1.0 (2008-04-09)</h3>\n<p>Initial release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 658976, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0a838e87f55c0f596a8b53ae538fa4fd", "sha256": "a1c30f13f6c3ae21d8eb93818f117e3a5e873050f6cfaed635c07ee6b36f38b2"}, "downloads": -1, "filename": "zc.async-1.0.tar.gz", "has_sig": false, "md5_digest": "0a838e87f55c0f596a8b53ae538fa4fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129874, "upload_time": "2008-04-10T03:29:21", "upload_time_iso_8601": "2008-04-10T03:29:21Z", "url": "https://files.pythonhosted.org/packages/65/98/6fb8659a530c0b3eee8549dc35fd551da7bd596e8aefd3caa06879ade35f/zc.async-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ccf5419bfaeaec6cf2c08c669f4f0ec1", "sha256": "a37f1779b7c4f36f1fd3b08af5b9b17b8f3f9681327174dbd5a00ca42937932f"}, "downloads": -1, "filename": "zc.async-1.1.tar.gz", "has_sig": false, "md5_digest": "ccf5419bfaeaec6cf2c08c669f4f0ec1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140159, "upload_time": "2008-04-24T21:01:08", "upload_time_iso_8601": "2008-04-24T21:01:08Z", "url": "https://files.pythonhosted.org/packages/e6/91/2c3283f8cf88b6be242a34979f537318c7e01f3992511edb9a90ca54cb7a/zc.async-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f878338bbfd015452801bd5bd6baf5fe", "sha256": "e4e128500b47798dec1c18385614962cd71734289a7a3cdb2d54ed45ad3c0e4f"}, "downloads": -1, "filename": "zc.async-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f878338bbfd015452801bd5bd6baf5fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144189, "upload_time": "2008-05-14T18:47:57", "upload_time_iso_8601": "2008-05-14T18:47:57Z", "url": "https://files.pythonhosted.org/packages/03/39/dbc7528bb059254129de4e8c099bd3a68dec88a8e70fcb2f53cf7ff1f592/zc.async-1.1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "008ddaffaf93dbf2b8984137025793ad", "sha256": "7bcb7c4bbedec944bdeb62fccec09152b2a24ebb3ddf1b8c6e102490448dc0b9"}, "downloads": -1, "filename": "zc.async-1.2.tar.gz", "has_sig": false, "md5_digest": "008ddaffaf93dbf2b8984137025793ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 171209, "upload_time": "2008-06-20T21:47:36", "upload_time_iso_8601": "2008-06-20T21:47:36Z", "url": "https://files.pythonhosted.org/packages/3f/83/31c68c8027b1d38cff56134d4141f53c2287b8e558563f5eef10da18a779/zc.async-1.2.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "05d1b15c85698e4794de6006ecc9efb4", "sha256": "24b39d5313b0187cbe5c371832928b242c48d2191c50e876f40b7e7ea1ba1eea"}, "downloads": -1, "filename": "zc.async-1.3.0.tar.gz", "has_sig": false, "md5_digest": "05d1b15c85698e4794de6006ecc9efb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 206286, "upload_time": "2008-07-05T01:32:56", "upload_time_iso_8601": "2008-07-05T01:32:56Z", "url": "https://files.pythonhosted.org/packages/79/7e/53a5a61a265e1ded2efa72cc589afb71056e8be588f67aa72160fd152e6d/zc.async-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "28d6a8896a7d1e3e5ac40e52575c1706", "sha256": "25fa5f3a3a0d66a2bea051554914bb5a95753d6683ded8203641d25472c2d446"}, "downloads": -1, "filename": "zc.async-1.4.0.tar.gz", "has_sig": false, "md5_digest": "28d6a8896a7d1e3e5ac40e52575c1706", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221130, "upload_time": "2008-07-30T20:22:59", "upload_time_iso_8601": "2008-07-30T20:22:59Z", "url": "https://files.pythonhosted.org/packages/9a/41/0332dd84fd0ed2dd6e6bfef2ac2ef7aa7f6c1841912ad1bebba838e83061/zc.async-1.4.0.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "ee9bd8cf12db6b14cfaaa200814ba2ff", "sha256": "e384179839f0df320b60c1b049f50ed74895613840535ec15b721c57de59f59f"}, "downloads": -1, "filename": "zc.async-1.4.1.tar.gz", "has_sig": false, "md5_digest": "ee9bd8cf12db6b14cfaaa200814ba2ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 223119, "upload_time": "2008-07-31T01:07:18", "upload_time_iso_8601": "2008-07-31T01:07:18Z", "url": "https://files.pythonhosted.org/packages/b3/73/9a312a2935a542fb8402cb0415a7be68a09e3411c46042e4705f407f1c72/zc.async-1.4.1.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "51d34bc19f2c92c3e96856eaf7cf05a1", "sha256": "033fd5c01aee8f4adbe5c8aae99b78af4ab580f44c76b97d889daaa9e0b575d0"}, "downloads": -1, "filename": "zc.async-1.5.0.tar.gz", "has_sig": false, "md5_digest": "51d34bc19f2c92c3e96856eaf7cf05a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 185403, "upload_time": "2008-09-22T02:46:58", "upload_time_iso_8601": "2008-09-22T02:46:58Z", "url": "https://files.pythonhosted.org/packages/e2/90/a39457518bda83800403bf5ed50f1abd7ea229348174899d3a6bb33e251b/zc.async-1.5.0.tar.gz", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "cd6ab6c756a85ba6283d92be549cec1f", "sha256": "d249de1c48bac6e6736c7d69c7556324959eb90ba0043a759fbec8da1edddb2a"}, "downloads": -1, "filename": "zc.async-1.5.1.tar.gz", "has_sig": false, "md5_digest": "cd6ab6c756a85ba6283d92be549cec1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 183648, "upload_time": "2008-10-13T22:34:13", "upload_time_iso_8601": "2008-10-13T22:34:13Z", "url": "https://files.pythonhosted.org/packages/7d/b1/a09bf1d1e36b82f2d74b68d198d1b0dcf427721bba37614d96ec02322d5c/zc.async-1.5.1.tar.gz", "yanked": false}], "1.5.2": [{"comment_text": "", "digests": {"md5": "d16c340017fb1c57ee608acf6e64eb7c", "sha256": "569b4052ccfc5428f71365c060a29945cd20e2ad7d6f7168c1800805330bc4b6"}, "downloads": -1, "filename": "zc.async-1.5.2.tar.gz", "has_sig": false, "md5_digest": "d16c340017fb1c57ee608acf6e64eb7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 190044, "upload_time": "2009-07-22T21:54:43", "upload_time_iso_8601": "2009-07-22T21:54:43.729263Z", "url": "https://files.pythonhosted.org/packages/70/06/de2ac14830805ad1adbba45d70e077c1c60cb40e6ba5e43e91e607ea2ebb/zc.async-1.5.2.tar.gz", "yanked": false}], "1.5.3": [{"comment_text": "", "digests": {"md5": "d1ef00aa0c7482283aee6b93ebe9a9f0", "sha256": "80a6735fe48566f215c8a911d07d45bd5d798a824fda651cddc4594703207647"}, "downloads": -1, "filename": "zc.async-1.5.3.tar.gz", "has_sig": false, "md5_digest": "d1ef00aa0c7482283aee6b93ebe9a9f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 192138, "upload_time": "2009-11-16T02:32:27", "upload_time_iso_8601": "2009-11-16T02:32:27.944451Z", "url": "https://files.pythonhosted.org/packages/34/48/89988f08c0114bb0fcb8c41ce623394aab00b54c9ba8da91422596d81fb7/zc.async-1.5.3.tar.gz", "yanked": false}], "1.5.4": [{"comment_text": "", "digests": {"md5": "58b7944466fb07384e7b8141ab48b13d", "sha256": "c72eaa6d6d48a6bc6bc06ced7312ccb0fcba8e3cc1608ea15607349fe01cf46e"}, "downloads": -1, "filename": "zc.async-1.5.4.zip", "has_sig": false, "md5_digest": "58b7944466fb07384e7b8141ab48b13d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 226569, "upload_time": "2011-03-03T15:49:36", "upload_time_iso_8601": "2011-03-03T15:49:36.457905Z", "url": "https://files.pythonhosted.org/packages/22/c2/d29626d0fb7ac356cf47cbb77c3dcc0c599eb57e9431a145df1e0b4c68e5/zc.async-1.5.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58b7944466fb07384e7b8141ab48b13d", "sha256": "c72eaa6d6d48a6bc6bc06ced7312ccb0fcba8e3cc1608ea15607349fe01cf46e"}, "downloads": -1, "filename": "zc.async-1.5.4.zip", "has_sig": false, "md5_digest": "58b7944466fb07384e7b8141ab48b13d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 226569, "upload_time": "2011-03-03T15:49:36", "upload_time_iso_8601": "2011-03-03T15:49:36.457905Z", "url": "https://files.pythonhosted.org/packages/22/c2/d29626d0fb7ac356cf47cbb77c3dcc0c599eb57e9431a145df1e0b4c68e5/zc.async-1.5.4.zip", "yanked": false}], "timestamp": "Fri May  8 03:19:31 2020"}