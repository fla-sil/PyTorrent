{"info": {"author": "Hans-Peter Jansen", "author_email": "hpj@urpla.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: MacOS X", "Environment :: Win32 (MS Windows)", "Environment :: X11 Applications :: Qt", "Framework :: Setuptools Plugin", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Internationalization", "Topic :: Software Development :: Localization", "Topic :: Software Development :: User Interfaces", "Topic :: System :: Software Distribution"], "description": "distutils_ui\n============\n\nA distutils build extension for PyQt{4,5} applications\n------------------------------------------------------\n\nBuild UI specific elements in tree, controlled by configuration variables in\nsetup.cfg. Running the tool chain is delegated to a couple of internal build\ncommands.\n\nFollowing layout is assumed::\n\n  project/\n    i18n/               # keep all translation specific files here\n    i18n/project.pro    # translation project file (generated, optionally)\n    ui/                 # all designer forms, may contain sub folders\n    project.qrc         # project resource definition (generated)\n    project_rc.py       # project resources (generated)\n  setup.py              # distutils/setuptools module for the project\n  setup.cfg             # setup configuration\n  ...\n\n\nTranslations\n------------\nProper translation is subject of fetching the translatable strings from\nall forms and source modules, translate them (with ``linguist``), and convert\nthe textual representation (``.ts``) into binary form (``.qm``), palatable for\n``QTranslator`` instances.\n\nThere are two ways to accomplish this task: using an intermediate project\nfile (``.pro``), that can be generated with the built-in command ``gentrpro``,\nor feeding globbing args to the tools ``pylupdate`` and ``lrelease`` directly.\nUnfortunately, the latter way is hampered by some bugs. Hence, the preferred way\nis using the ``.pro`` file.\n\nBecause the translation source files (``.ts``) references forms and sources with\nrelative paths, and the tools ``pylupdate`` and ``lrelease`` operate relative\nto the ``.pro`` file location, and *we* *want* to keep all translation specific\nfiles in one place, we run the translation tool chain relative to ``i18n/``.\n\nA new language\n~~~~~~~~~~~~~~\n* create an appropriately named file in ``i18n/``\n  e.g. ``touch i18n/project_lang.ts``\n* build initial translation source with ``setup.py build_ui``\n* set up language parameter with linguist once\n  e.g. ``linguist i18n/project_lang.ts``\n\nTranslation relies on tr() and translate() used properly in the source.\n\n\nForms\n-----\n\n``ui/`` and sub folders contain all designer forms. You shouldn't mix source\ncode and forms in one folder, because forms are translated to *Python* source\nfiles, that you want to handle differently (e.g. exclude from translation,\nbecause the translation source is generated from the forms already.\n\nThe ``<form>.ui`` file is translated to ``ui_<form>.py``. Usually, it contains\na single form, where the toplevel object is the camel cased name of the\nmodule. E.g.: ``form.ui`` contains a widget ``Form``, that is imported from\ntoplevel modules with::\n\n    from ui.ui_form import Ui_Form\n\nTypically, this form is subclassed with multiple inheritance::\n\n    class Form(QWidget, Ui_Form):\n        def __init__(self, parent = None):\n            super(Form, self).__init__(parent)\n            self.setupUi(self)\n\n\nResources\n---------\nResource collection files (``.qrc``) defines resources, that are included within\na single module. Typically, this includes images, translation files (``.qm``),\nand other static data. These resources are accessed with::\n\n    app.setWindowIcon(QIcon(\":/images/icon.png\"))\n\nNote the \":\" prefix. The resource file is typically included early in the\nmain module::\n\n    import project_rc # __IGNORE_WARNING__ (this is not referenced any further)\n\nand the included resources are available in all modules.\n\n**distutils_ui** contains a built-in command ``genqrc``, that generates ``.qrc``\nfiles from globbing patterns. ``genqrc`` supports two specific options: ``prefix``\nand ``strip``. Prefix allows to place all resources under a custom prefix, while\nstrip removes the path from objects. Strip requires, that all files are uniquely\nnamed, otherwise some objects are not accessible. The command ``pyrcc``\ngenerates the resource module ``project_rc.py`` from ``project.qrc``.\n\n\nCommands\n--------\nThe ``gentrpro`` and ``genqrc`` commands are built-in, therefore they don't\ndefine their own command, rather than process input and output files directly.\nAll other commands call external tools, that must be available and specified\nwith a ``command`` parameter in ``setup.cfg``.\n\nCommand parameter use ``{macro}`` expressions, that references other parameters\nin the same section, such as ``{infiles}`` and ``{outfiles}``, as well as\nmetadata parameter, like ``{name}`` and ``{version}``. These parameters can\nbe mixed with file globbing patterns.\n\n``infiles`` and ``outfiles`` parameter define input files and targets.\n\nAn ``exclude`` parameter removes matching elements from ``infiles``.\n\nThe ``chdir`` parameter allow to change the execution path of that command,\nalso subject to metadata macro expansion.\n\nA special command mode is provided: ``singlefile``. It is used to call the\ncommand *one* by *one* for *every* input file. In this mode, additional macros\nare available, that can be used to further control the output file: ``{path}``,\n``{filename}``, and ``{fileext}``. Check the template for ``pyuic`` and\n``pyrcc`` commands for examples.\n\nIf you only want to work with a command subset: just define ``commands`` in\n``[build_ui]`` section accordingly.\n\n\n\nsetup.py::\n\n    from distutils.command.build import build\n    from build_ui import build_ui\n\n    [...]\n\n    cmdclass = {\n        'build_ui': build_ui,\n    }\n\n    # Optional: inject ui specific build into standard build process\n    build.sub_commands.insert(0, ('build_ui', None))\n\n    [...]\n\n    setup(\n        name = name,\n        version = version,\n        [...]\n        cmdclass = cmdclass\n    )\n\n\nsetup.cfg of build_ui template for PyQt5::\n\n    [build_ui]\n    # control the tool chain (default: run all commands)\n    #commands = gentrpro, pylupdate, lrelease, pyuic, genqrc, pyrcc\n\n    [gentrpro]\n    # pro files are processed relative to their location, cope with it:\n    # generate pro file with relative paths from i18n, and call\n    # pylupdate and lrelease from within i18n\n    chdir = {name}/i18n\n    infiles = ../ui/*.ui ../*.py *.ts\n    outfiles = {name}.pro\n    exclude = ../{name}_rc.py\n\n    [pylupdate]\n    # update translation source files (*.ts) from forms and source files\n    # -noobsolete will remove all outdated translations\n    chdir = {name}/i18n\n    command = pylupdate5 -verbose {infiles}\n    infiles = {name}.pro\n    outfiles = {name}_*.ts\n\n    [lrelease]\n    # convert translation source files into binary representation (*.qm)\n    chdir = {name}/i18n\n    command = lrelease-qt5 {infiles}\n    infiles = {name}.pro\n    outfiles = {name}_*.qm\n\n    [pyuic]\n    # generate python source files from UI definitions (*.ui)\n    command = pyuic5 -x -o {outfiles} {infiles}\n    infiles = {name}/ui/*.ui\n    outfiles = {name}/ui/ui_{filename}.py\n    singlefile = true\n\n    [genqrc]\n    # generate a resource description file (*.qrc)\n    chdir = {name}\n    infiles = images/*.png i18n/*.qm\n    outfiles = {name}.qrc\n    # these are specific for genqrc\n    strip = false\n    prefix =\n\n    [pyrcc]\n    # generate a resource module from qrc file\n    command = pyrcc5 -o {outfiles} {infiles}\n    infiles = {name}/{name}.qrc\n    outfiles = {name}/{name}_rc.py\n    singlefile = true\n\n\nThe plain UI build is triggered with::\n\n    python3 setup.py build_ui [-f|--force]\n\nA cleanup of the generated files can be done in a similar fashion::\n\n    python3 setup.py build_ui [-C|--clean]\n\nNotes:\n\n* avoid spaces in filenames\n* '.pro' file approach results in spurious builds\n\nDebug::\n\n    python3 setup.py -v build_ui\n\nAuthor:\n\n    (c) 2016 Hans-Peter Jansen <hpj@urpla.net>\n\nLicense:\n\n    MIT, Copyright (c) 2016, Hans-Peter Jansen, see LICENSE.txt\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frispete/distutils_ui", "keywords": "distutils setuptools generate translate build resources", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "distutils_ui", "package_url": "https://pypi.org/project/distutils_ui/", "platform": "", "project_url": "https://pypi.org/project/distutils_ui/", "project_urls": {"Homepage": "https://github.com/frispete/distutils_ui"}, "release_url": "https://pypi.org/project/distutils_ui/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A distutils build extension for PyQt{4,5} applications", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"a-distutils-build-extension-for-pyqt-4-5-applications\">\n<h2>A distutils build extension for PyQt{4,5} applications</h2>\n<p>Build UI specific elements in tree, controlled by configuration variables in\nsetup.cfg. Running the tool chain is delegated to a couple of internal build\ncommands.</p>\n<p>Following layout is assumed:</p>\n<pre>project/\n  i18n/               # keep all translation specific files here\n  i18n/project.pro    # translation project file (generated, optionally)\n  ui/                 # all designer forms, may contain sub folders\n  project.qrc         # project resource definition (generated)\n  project_rc.py       # project resources (generated)\nsetup.py              # distutils/setuptools module for the project\nsetup.cfg             # setup configuration\n...\n</pre>\n</div>\n<div id=\"translations\">\n<h2>Translations</h2>\n<p>Proper translation is subject of fetching the translatable strings from\nall forms and source modules, translate them (with <tt>linguist</tt>), and convert\nthe textual representation (<tt>.ts</tt>) into binary form (<tt>.qm</tt>), palatable for\n<tt>QTranslator</tt> instances.</p>\n<p>There are two ways to accomplish this task: using an intermediate project\nfile (<tt>.pro</tt>), that can be generated with the built-in command <tt>gentrpro</tt>,\nor feeding globbing args to the tools <tt>pylupdate</tt> and <tt>lrelease</tt> directly.\nUnfortunately, the latter way is hampered by some bugs. Hence, the preferred way\nis using the <tt>.pro</tt> file.</p>\n<p>Because the translation source files (<tt>.ts</tt>) references forms and sources with\nrelative paths, and the tools <tt>pylupdate</tt> and <tt>lrelease</tt> operate relative\nto the <tt>.pro</tt> file location, and <em>we</em> <em>want</em> to keep all translation specific\nfiles in one place, we run the translation tool chain relative to <tt>i18n/</tt>.</p>\n<div id=\"a-new-language\">\n<h3>A new language</h3>\n<ul>\n<li>create an appropriately named file in <tt>i18n/</tt>\ne.g. <tt>touch i18n/project_lang.ts</tt></li>\n<li>build initial translation source with <tt>setup.py build_ui</tt></li>\n<li>set up language parameter with linguist once\ne.g. <tt>linguist i18n/project_lang.ts</tt></li>\n</ul>\n<p>Translation relies on tr() and translate() used properly in the source.</p>\n</div>\n</div>\n<div id=\"forms\">\n<h2>Forms</h2>\n<p><tt>ui/</tt> and sub folders contain all designer forms. You shouldn\u2019t mix source\ncode and forms in one folder, because forms are translated to <em>Python</em> source\nfiles, that you want to handle differently (e.g. exclude from translation,\nbecause the translation source is generated from the forms already.</p>\n<p>The <tt><span class=\"pre\">&lt;form&gt;.ui</span></tt> file is translated to <tt><span class=\"pre\">ui_&lt;form&gt;.py</span></tt>. Usually, it contains\na single form, where the toplevel object is the camel cased name of the\nmodule. E.g.: <tt>form.ui</tt> contains a widget <tt>Form</tt>, that is imported from\ntoplevel modules with:</p>\n<pre>from ui.ui_form import Ui_Form\n</pre>\n<p>Typically, this form is subclassed with multiple inheritance:</p>\n<pre>class Form(QWidget, Ui_Form):\n    def __init__(self, parent = None):\n        super(Form, self).__init__(parent)\n        self.setupUi(self)\n</pre>\n</div>\n<div id=\"resources\">\n<h2>Resources</h2>\n<p>Resource collection files (<tt>.qrc</tt>) defines resources, that are included within\na single module. Typically, this includes images, translation files (<tt>.qm</tt>),\nand other static data. These resources are accessed with:</p>\n<pre>app.setWindowIcon(QIcon(\":/images/icon.png\"))\n</pre>\n<p>Note the \u201c:\u201d prefix. The resource file is typically included early in the\nmain module:</p>\n<pre>import project_rc # __IGNORE_WARNING__ (this is not referenced any further)\n</pre>\n<p>and the included resources are available in all modules.</p>\n<p><strong>distutils_ui</strong> contains a built-in command <tt>genqrc</tt>, that generates <tt>.qrc</tt>\nfiles from globbing patterns. <tt>genqrc</tt> supports two specific options: <tt>prefix</tt>\nand <tt>strip</tt>. Prefix allows to place all resources under a custom prefix, while\nstrip removes the path from objects. Strip requires, that all files are uniquely\nnamed, otherwise some objects are not accessible. The command <tt>pyrcc</tt>\ngenerates the resource module <tt>project_rc.py</tt> from <tt>project.qrc</tt>.</p>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>The <tt>gentrpro</tt> and <tt>genqrc</tt> commands are built-in, therefore they don\u2019t\ndefine their own command, rather than process input and output files directly.\nAll other commands call external tools, that must be available and specified\nwith a <tt>command</tt> parameter in <tt>setup.cfg</tt>.</p>\n<p>Command parameter use <tt>{macro}</tt> expressions, that references other parameters\nin the same section, such as <tt>{infiles}</tt> and <tt>{outfiles}</tt>, as well as\nmetadata parameter, like <tt>{name}</tt> and <tt>{version}</tt>. These parameters can\nbe mixed with file globbing patterns.</p>\n<p><tt>infiles</tt> and <tt>outfiles</tt> parameter define input files and targets.</p>\n<p>An <tt>exclude</tt> parameter removes matching elements from <tt>infiles</tt>.</p>\n<p>The <tt>chdir</tt> parameter allow to change the execution path of that command,\nalso subject to metadata macro expansion.</p>\n<p>A special command mode is provided: <tt>singlefile</tt>. It is used to call the\ncommand <em>one</em> by <em>one</em> for <em>every</em> input file. In this mode, additional macros\nare available, that can be used to further control the output file: <tt>{path}</tt>,\n<tt>{filename}</tt>, and <tt>{fileext}</tt>. Check the template for <tt>pyuic</tt> and\n<tt>pyrcc</tt> commands for examples.</p>\n<p>If you only want to work with a command subset: just define <tt>commands</tt> in\n<tt>[build_ui]</tt> section accordingly.</p>\n<p>setup.py:</p>\n<pre>from distutils.command.build import build\nfrom build_ui import build_ui\n\n[...]\n\ncmdclass = {\n    'build_ui': build_ui,\n}\n\n# Optional: inject ui specific build into standard build process\nbuild.sub_commands.insert(0, ('build_ui', None))\n\n[...]\n\nsetup(\n    name = name,\n    version = version,\n    [...]\n    cmdclass = cmdclass\n)\n</pre>\n<p>setup.cfg of build_ui template for PyQt5:</p>\n<pre>[build_ui]\n# control the tool chain (default: run all commands)\n#commands = gentrpro, pylupdate, lrelease, pyuic, genqrc, pyrcc\n\n[gentrpro]\n# pro files are processed relative to their location, cope with it:\n# generate pro file with relative paths from i18n, and call\n# pylupdate and lrelease from within i18n\nchdir = {name}/i18n\ninfiles = ../ui/*.ui ../*.py *.ts\noutfiles = {name}.pro\nexclude = ../{name}_rc.py\n\n[pylupdate]\n# update translation source files (*.ts) from forms and source files\n# -noobsolete will remove all outdated translations\nchdir = {name}/i18n\ncommand = pylupdate5 -verbose {infiles}\ninfiles = {name}.pro\noutfiles = {name}_*.ts\n\n[lrelease]\n# convert translation source files into binary representation (*.qm)\nchdir = {name}/i18n\ncommand = lrelease-qt5 {infiles}\ninfiles = {name}.pro\noutfiles = {name}_*.qm\n\n[pyuic]\n# generate python source files from UI definitions (*.ui)\ncommand = pyuic5 -x -o {outfiles} {infiles}\ninfiles = {name}/ui/*.ui\noutfiles = {name}/ui/ui_{filename}.py\nsinglefile = true\n\n[genqrc]\n# generate a resource description file (*.qrc)\nchdir = {name}\ninfiles = images/*.png i18n/*.qm\noutfiles = {name}.qrc\n# these are specific for genqrc\nstrip = false\nprefix =\n\n[pyrcc]\n# generate a resource module from qrc file\ncommand = pyrcc5 -o {outfiles} {infiles}\ninfiles = {name}/{name}.qrc\noutfiles = {name}/{name}_rc.py\nsinglefile = true\n</pre>\n<p>The plain UI build is triggered with:</p>\n<pre>python3 setup.py build_ui [-f|--force]\n</pre>\n<p>A cleanup of the generated files can be done in a similar fashion:</p>\n<pre>python3 setup.py build_ui [-C|--clean]\n</pre>\n<p>Notes:</p>\n<ul>\n<li>avoid spaces in filenames</li>\n<li>\u2018.pro\u2019 file approach results in spurious builds</li>\n</ul>\n<p>Debug:</p>\n<pre>python3 setup.py -v build_ui\n</pre>\n<p>Author:</p>\n<blockquote>\n<ol>\n<li>2016 Hans-Peter Jansen &lt;<a href=\"mailto:hpj%40urpla.net\">hpj<span>@</span>urpla<span>.</span>net</a>&gt;</li>\n</ol>\n</blockquote>\n<p>License:</p>\n<blockquote>\nMIT, Copyright (c) 2016, Hans-Peter Jansen, see LICENSE.txt</blockquote>\n</div>\n\n          </div>"}, "last_serial": 2828869, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e5f5411fdc4a3dbadf39ea0c9cad8a58", "sha256": "8e4f7f33c317e9058907d6c85185c1427584e60f1b4db7fb38ce762be849a92a"}, "downloads": -1, "filename": "distutils_ui-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e5f5411fdc4a3dbadf39ea0c9cad8a58", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19305, "upload_time": "2016-12-03T21:27:35", "upload_time_iso_8601": "2016-12-03T21:27:35.436580Z", "url": "https://files.pythonhosted.org/packages/cd/22/2176e7c43e094b299cc57e32fdc7e648f8cfc08fa045d11c4923d2ab1c13/distutils_ui-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "06e7e03be1856188b4defc71640ee685", "sha256": "09a01a063329e154c87d3eecc4eeabaab6069b16e9148a7e16275bbcbc2d6051"}, "downloads": -1, "filename": "distutils_ui-0.1.1.tar.gz", "has_sig": false, "md5_digest": "06e7e03be1856188b4defc71640ee685", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19286, "upload_time": "2016-12-03T22:05:56", "upload_time_iso_8601": "2016-12-03T22:05:56.124446Z", "url": "https://files.pythonhosted.org/packages/82/56/57c8cf1d0d371f358d62cf85e62359b04060b84c160ceb14ceead20d2676/distutils_ui-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2aab2d0301d5c9e0dabaa5f4b46e8d1a", "sha256": "b1fc945012d2201b48d6eb45ab1fdfbb2bc19f8b5b03c906082ae4aa1c55a605"}, "downloads": -1, "filename": "distutils_ui-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2aab2d0301d5c9e0dabaa5f4b46e8d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19375, "upload_time": "2017-04-25T13:39:49", "upload_time_iso_8601": "2017-04-25T13:39:49.524984Z", "url": "https://files.pythonhosted.org/packages/2d/3a/a6542d50d650bcb7dfe614aef89bba31403301103fb961e329501261b292/distutils_ui-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2aab2d0301d5c9e0dabaa5f4b46e8d1a", "sha256": "b1fc945012d2201b48d6eb45ab1fdfbb2bc19f8b5b03c906082ae4aa1c55a605"}, "downloads": -1, "filename": "distutils_ui-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2aab2d0301d5c9e0dabaa5f4b46e8d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19375, "upload_time": "2017-04-25T13:39:49", "upload_time_iso_8601": "2017-04-25T13:39:49.524984Z", "url": "https://files.pythonhosted.org/packages/2d/3a/a6542d50d650bcb7dfe614aef89bba31403301103fb961e329501261b292/distutils_ui-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:59 2020"}