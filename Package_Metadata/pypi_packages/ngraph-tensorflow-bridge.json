{"info": {"author": "Intel Nervana", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "\n<p align=\"center\">\n  <img src=\"images/ngraph-logo.png\">\n</p>\n\n# Intel(R) nGraph(TM) Compiler and Runtime for TensorFlow*\n\nThis repository contains the code needed to enable Intel(R) nGraph(TM) Compiler and \nruntime engine for TensorFlow. Use it to speed up your TensorFlow training and \ninference workloads. The nGraph Library and runtime suite can also be used to \ncustomize and deploy Deep Learning inference models that will \"just work\" with \na variety of nGraph-enabled backends: CPU, GPU, and custom silicon like the \n[Intel(R) Nervana(TM) NNP](https://itpeernetwork.intel.com/inteldcisummit-artificial-intelligence/).\n\n[![License](https://img.shields.io/badge/License-Apache%202.0-blue.svg)](https://github.com/tensorflow/ngraph-bridge/blob/master/LICENSE)\n[![Build Status](https://badge.buildkite.com/180bbf814f1a884219849b4838cbda5fa1e03715e494185be3.svg?branch=master)](https://buildkite.com/ngraph/ngtf-cpu-ubuntu)\n[![Build Status](https://badge.buildkite.com/ae8d39ef4a18eb238b58ab0637fb97e85b86e85822a08b96d1.svg?branch=master)](https://buildkite.com/ngraph/ngtf-cpu-centos)\n[![Build Status](https://badge.buildkite.com/0aeaff43e378d387a160d30083f203f7147f010e3fb15b01d1.svg?branch=master)](https://buildkite.com/ngraph/ngtf-cpu-ubuntu-binary-tf)\n\n## Installation\n\n### Software requirements\n\n|Using pre-built packages| Building from source|\n| -----------------------|-------------------|\n|Python 3| Python 3|\n|TensorFlow v1.14|GCC 4.8 (Ubuntu), Clang/LLVM (macOS)|\n|        |`cmake` 3.4 or higher|\n|        |Bazel 0.25.2|\n|        |`virtualenv` 16.0.0|\n|        ||\n\n\n### Use pre-built packages\n\n nGraph bridge enables you to use the nGraph Library with TensorFlow.\n Complete the following steps to install a pre-built nGraph bridge for\n TensorFlow.\n\n1. Install TensorFlow:\n\n        pip install -U tensorflow==1.14.0\n\n2. Install `ngraph-tensorflow-bridge`:\n\n        pip install -U ngraph-tensorflow-bridge\n\n### Build nGraph from source\n\nTo use the latest version of nGraph Library, complete the following steps to\nbuild nGraph bridge from source. \n\n#### Note to macOS users\n\nThe build and installation instructions are identical for Ubuntu 16.04 and\nmacOS. However, the Python setup may vary across different versions of Mac OS.\nTensorFlow build instructions recommend using Homebrew but developers often use\nPyenv. Some users prefer Anaconda/Miniconda. Before building nGraph, ensure that\nyou can successfully build TensorFlow on macOS with a suitable Python\nenvironment.\n\nThe requirements for building nGraph bridge are identical to the requirements for building TensorFlow from source. For more information, review the [TensorFlow configuration] details. \n\n##### Prepare your build environment\n\nInstall the following requirements before building\n `nGraph-bridge`. \n\nTensorFlow uses a build system called \"bazel\". For the current\n version of `bazel`, use [bazel version].\n\nInstall `bazel`:\n\n        wget https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-installer-linux-x86_64.sh      \n        bash bazel-0.25.2-installer-linux-x86_64.sh --user\n\nAdd and source the `bin` path to your `~/.bashrc` file to call\nbazel:\n\n        export PATH=$PATH:~/bin\n        source ~/.bashrc   \n\nInstall `cmake`, `virtualenv`, and `gcc 4.8`.\n\n##### Build an nGraph bridge\n\nOnce TensorFlow's dependencies are installed, clone the `ngraph-bridge` repo:\n\n        git clone https://github.com/tensorflow/ngraph-bridge.git\n        cd ngraph-bridge\n        git checkout v0.18.0\n\nRun the following Python script to build TensorFlow, nGraph, and the bridge. Use Python 3.5:\n\n        python3 build_ngtf.py --use_prebuilt_tensorflow\n\nWhen the build finishes, a new `virtualenv` directory is created in `build_cmake/venv-tf-py3`. Build artifacts (i.e., the `ngraph_tensorflow_bridge-<VERSION>-py2.py3-none-manylinux1_x86_64.whl`) are created in the `build_cmake/artifacts` directory. \n\nAdd the following flags to build PlaidML and Intel GPU backends (optional):\n\n        --build_plaidml_backend\n        --build_intelgpu_backend\n\nFor more build options:\n\n        python3 build_ngtf.py --help\n\nTest the installation:\n\n        python3 test_ngtf.py\n\nThis command runs all C++ and Python unit tests from the `ngraph-bridge` source tree. It also runs various TensorFlow Python tests using nGraph.\n\nTo use the `ngraph-tensorflow-bridge`, activate the following `virtualenv` to start using nGraph with TensorFlow. \n\n        source build_cmake/venv-tf-py3/bin/activate\n\nAlternatively, you can also install the TensorFlow and nGraph bridge outside of a `virtualenv`. The Python `whl` files are located in the `build_cmake/artifacts/` and `build_cmake/artifacts/tensorflow` directories, respectively.\n\nSelect the help option of `build_ngtf.py` script to learn more about various build options and how to build other backends. \n\nVerify that `ngraph-bridge` installed correctly:\n\n        python -c \"import tensorflow as tf; print('TensorFlow version: ',tf.__version__);\\\n                import ngraph_bridge; print(ngraph_bridge.__version__)\"\n\n    This will produce something like this:\n\n        TensorFlow version:  <1.14.0>\n        nGraph bridge version: <b'0.18.0'>\n        nGraph version used for this build: b'0.25.0+005c118'\n        TensorFlow version used for this build: <v1.14.0-...>\n        CXX11_ABI flag used for this build: 0\n        nGraph bridge built with Grappler: False\n        nGraph bridge built with Variables and Optimizers Enablement: False\n\n    Note: The version of the ngraph-tensorflow-bridge is not going to be exactly the same as when you build from source. This is due to delay in the source release and publishing the corresponding Python wheel. \n\n## Classify an image\n\nOnce you have installed nGraph bridge, you can use TensorFlow to train a neural network or run inference using a trained model. \n\nUse TensorFlow with nGraph to classify an image using a [frozen model]. \n\nDownload the Inception v3 trained model and labels file:\n\n        wget https://storage.googleapis.com/download.tensorflow.org/models/inception_v3_2016_08_28_frozen.pb.tar.gz\n\nExtract the frozen model and labels file from the tarball:\n\n        tar xvf inception_v3_2016_08_28_frozen.pb.tar.gz\n\nDownload the image file: \n\n        wget https://github.com/tensorflow/tensorflow/raw/master/tensorflow/examples/label_image/data/grace_hopper.jpg\n\nDownload the TensorFlow script:\n\n       wget https://github.com/tensorflow/tensorflow/raw/master/tensorflow/examples/label_image/label_image.py\n\nModify the downloaded TensorFlow script to run TensorFlow with nGraph optimizations:\n\n        import ngraph_bridge\n        ...\n        config = tf.ConfigProto()\n        config_ngraph_enabled = ngraph_bridge.update_config(config)\n        sess = tf.Session(config=config_ngraph_enabled) \n\nRun the classification:\n\n        python label_image.py --graph inception_v3_2016_08_28_frozen.pb \\\n                --image grace_hopper.jpg --input_layer=input \\\n                --output_layer=InceptionV3/Predictions/Reshape_1 \\\n                --input_height=299 --input_width=299 \\\n                --labels imagenet_slim_labels.txt \n\nThis will print the following results:\n\n        military uniform 0.8343056\n        mortarboard 0.021869544\n        academic gown 0.010358088\n        pickelhaube 0.008008157\n        bulletproof vest 0.005350913\n\nThe above instructions are derived from the [TensorFlow C++ and Python Image Recognition Demo]. \n\nAll of the above commands are available in the [nGraph TensorFlow examples] directory. To classify your own images, modify the `infer_image.py` file in this directory.\n\n### Add runtime options for a CPU backend\n\nAdding runtime options for a CPU backend applies to training and inference.\n\nBy default nGraph runs with a CPU backend. To get the best performance of the CPU backend, add the following option:\n\n        OMP_NUM_THREADS=<num_cores> KMP_AFFINITY=granularity=fine,compact,1,0 \\ \n        python label_image.py --graph inception_v3_2016_08_28_frozen.pb \n                --image grace_hopper.jpg --input_layer=input \\\n                --output_layer=InceptionV3/Predictions/Reshape_1 \\\n                --input_height=299 --input_width=299 \\\n                --labels imagenet_slim_labels.txt \n\nWhere `<num_cores>` equals the number of cores in your processor. \n\n#### Measure the time\nnGraph is a Just In Time (JIT) compiler meaning that the TensorFlow computation graph is compiled to nGraph during the first instance of the execution. From the second time onwards, the execution speeds up significantly. \n\nAdd the following Python code to measure the computation time:\n\n```python\n# Warmup\nsess.run(output_operation.outputs[0], {\n        input_operation.outputs[0]: t})\n# Run\nimport time\nstart = time.time()\nresults = sess.run(output_operation.outputs[0], {\n        input_operation.outputs[0]: t\n        })      \nelapsed = time.time() - start\nprint('Time elapsed: %f seconds' % elapsed)\n```\nObserve that the output time runs faster than TensorFlow native (i.e., without nGraph).\n\n#### Add additional backends\n\nYou can substitute the default CPU backend with a different backend such as `PLAIDML` or `INTELGPU`. Use the following API:\n\n        ngraph_bridge.set_backend('PLAIDML')\n\nTo determine what backends are available on your system, use the following API:\n\n        ngraph_bridge.list_backends()\n\nMore detailed examples on how to use ngraph_bridge are located in the [examples] directory.\n\n## Debugging \n\nDuring the build, often there are missing configuration steps for building TensorFlow. If you run into build issues, first ensure that you can build TensorFlow. For debugging run time issues, see the instructions provided in the [diagnostics] directory.\n\n## Support\n\nPlease submit your questions, feature requests and bug reports via [GitHub issues].\n\n## How to Contribute\n\nWe welcome community contributions to nGraph. If you have an idea for how to \nimprove it:\n\n* Share your proposal via [GitHub issues].\n* Ensure you can build the product and run all the examples with your patch.\n* In the case of a larger feature, create a test.\n* Submit a [pull request].\n* We will review your contribution and, if any additional fixes or\n  modifications are necessary, may provide feedback to guide you. When\n  accepted, your pull request will be merged to the repository.\n\n\n## About Intel(R) nGraph(TM)\n\nSee the full documentation here:  <http://ngraph.nervanasys.com/docs/latest>\n\n[linux-based install instructions on the TensorFlow website]:https://www.tensorflow.org/install/install_linux\n[tensorflow]:https://github.com/tensorflow/tensorflow.git\n[open-source C++ library, compiler and runtime]: http://ngraph.nervanasys.com/docs/latest/\n[Github issues]: https://github.com/tensorflow/ngraph-bridge/issues\n[pull request]: https://github.com/tensorflow/ngraph-bridge/pulls\n[DSO]:http://csweb.cs.wfu.edu/~torgerse/Kokua/More_SGI/007-2360-010/sgi_html/ch03.html\n[bazel version]: https://github.com/bazelbuild/bazel/releases/tag/0.25.2\n[TensorFlow configuration]: https://www.tensorflow.org/install/source\n[diagnostics]:diagnostics/README.md\n[examples]:examples/README.md\n[ops]:http://ngraph.nervanasys.com/docs/latest/ops/index.html\n[nGraph]:https://github.com/NervanaSystems/ngraph \n[ngraph-bridge]:https://github.com/tensorflow/ngraph-bridge.git\n[frozen model]: https://www.tensorflow.org/guide/extend/model_files#freezing\n[TensorFlow C++ and Python Image Recognition Demo]: https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/label_image\n[nGraph TensorFlow examples]: https://github.com/tensorflow/ngraph-bridge/tree/master/examples\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tensorflow/ngraph-bridge", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "ngraph-tensorflow-bridge", "package_url": "https://pypi.org/project/ngraph-tensorflow-bridge/", "platform": "Ubuntu 16.04", "project_url": "https://pypi.org/project/ngraph-tensorflow-bridge/", "project_urls": {"Homepage": "https://github.com/tensorflow/ngraph-bridge"}, "release_url": "https://pypi.org/project/ngraph-tensorflow-bridge/0.18.0/", "requires_dist": ["plaidml (>=0.6.3) ; extra == 'plaidml'"], "requires_python": "", "summary": "Intel nGraph compiler and runtime for TensorFlow", "version": "0.18.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2e573230b118866e90829da06f92e6506459b0b/696d616765732f6e67726170682d6c6f676f2e706e67\">\n</p>\n<h1>Intel(R) nGraph(TM) Compiler and Runtime for TensorFlow*</h1>\n<p>This repository contains the code needed to enable Intel(R) nGraph(TM) Compiler and\nruntime engine for TensorFlow. Use it to speed up your TensorFlow training and\ninference workloads. The nGraph Library and runtime suite can also be used to\ncustomize and deploy Deep Learning inference models that will \"just work\" with\na variety of nGraph-enabled backends: CPU, GPU, and custom silicon like the\n<a href=\"https://itpeernetwork.intel.com/inteldcisummit-artificial-intelligence/\" rel=\"nofollow\">Intel(R) Nervana(TM) NNP</a>.</p>\n<p><a href=\"https://github.com/tensorflow/ngraph-bridge/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://buildkite.com/ngraph/ngtf-cpu-ubuntu\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/034f3d9debc9dd9bc48811207fff7a9c1158c9b2/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f31383062626638313466316138383432313938343962343833386362646135666131653033373135653439343138356265332e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://buildkite.com/ngraph/ngtf-cpu-centos\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f1c19272272914ffbb2cc6a6904d9ba3da821a9/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f61653864333965663461313865623233386235386162303633376662393765383562383665383538323261303862393664312e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://buildkite.com/ngraph/ngtf-cpu-ubuntu-binary-tf\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/849f36ed14b50bd6c6c61f43ac12178b2d698a8d/68747470733a2f2f62616467652e6275696c646b6974652e636f6d2f30616561666634336533373864333837613136306433303038336632303366373134376630313065336662313562303164312e7376673f6272616e63683d6d6173746572\"></a></p>\n<h2>Installation</h2>\n<h3>Software requirements</h3>\n<table>\n<thead>\n<tr>\n<th>Using pre-built packages</th>\n<th>Building from source</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Python 3</td>\n<td>Python 3</td>\n</tr>\n<tr>\n<td>TensorFlow v1.14</td>\n<td>GCC 4.8 (Ubuntu), Clang/LLVM (macOS)</td>\n</tr>\n<tr>\n<td></td>\n<td><code>cmake</code> 3.4 or higher</td>\n</tr>\n<tr>\n<td></td>\n<td>Bazel 0.25.2</td>\n</tr>\n<tr>\n<td></td>\n<td><code>virtualenv</code> 16.0.0</td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n</tr></tbody></table>\n<h3>Use pre-built packages</h3>\n<p>nGraph bridge enables you to use the nGraph Library with TensorFlow.\nComplete the following steps to install a pre-built nGraph bridge for\nTensorFlow.</p>\n<ol>\n<li>\n<p>Install TensorFlow:</p>\n<pre><code> pip install -U tensorflow==1.14.0\n</code></pre>\n</li>\n<li>\n<p>Install <code>ngraph-tensorflow-bridge</code>:</p>\n<pre><code> pip install -U ngraph-tensorflow-bridge\n</code></pre>\n</li>\n</ol>\n<h3>Build nGraph from source</h3>\n<p>To use the latest version of nGraph Library, complete the following steps to\nbuild nGraph bridge from source.</p>\n<h4>Note to macOS users</h4>\n<p>The build and installation instructions are identical for Ubuntu 16.04 and\nmacOS. However, the Python setup may vary across different versions of Mac OS.\nTensorFlow build instructions recommend using Homebrew but developers often use\nPyenv. Some users prefer Anaconda/Miniconda. Before building nGraph, ensure that\nyou can successfully build TensorFlow on macOS with a suitable Python\nenvironment.</p>\n<p>The requirements for building nGraph bridge are identical to the requirements for building TensorFlow from source. For more information, review the <a href=\"https://www.tensorflow.org/install/source\" rel=\"nofollow\">TensorFlow configuration</a> details.</p>\n<h5>Prepare your build environment</h5>\n<p>Install the following requirements before building\n<code>nGraph-bridge</code>.</p>\n<p>TensorFlow uses a build system called \"bazel\". For the current\nversion of <code>bazel</code>, use <a href=\"https://github.com/bazelbuild/bazel/releases/tag/0.25.2\" rel=\"nofollow\">bazel version</a>.</p>\n<p>Install <code>bazel</code>:</p>\n<pre><code>    wget https://github.com/bazelbuild/bazel/releases/download/0.25.2/bazel-0.25.2-installer-linux-x86_64.sh      \n    bash bazel-0.25.2-installer-linux-x86_64.sh --user\n</code></pre>\n<p>Add and source the <code>bin</code> path to your <code>~/.bashrc</code> file to call\nbazel:</p>\n<pre><code>    export PATH=$PATH:~/bin\n    source ~/.bashrc   \n</code></pre>\n<p>Install <code>cmake</code>, <code>virtualenv</code>, and <code>gcc 4.8</code>.</p>\n<h5>Build an nGraph bridge</h5>\n<p>Once TensorFlow's dependencies are installed, clone the <code>ngraph-bridge</code> repo:</p>\n<pre><code>    git clone https://github.com/tensorflow/ngraph-bridge.git\n    cd ngraph-bridge\n    git checkout v0.18.0\n</code></pre>\n<p>Run the following Python script to build TensorFlow, nGraph, and the bridge. Use Python 3.5:</p>\n<pre><code>    python3 build_ngtf.py --use_prebuilt_tensorflow\n</code></pre>\n<p>When the build finishes, a new <code>virtualenv</code> directory is created in <code>build_cmake/venv-tf-py3</code>. Build artifacts (i.e., the <code>ngraph_tensorflow_bridge-&lt;VERSION&gt;-py2.py3-none-manylinux1_x86_64.whl</code>) are created in the <code>build_cmake/artifacts</code> directory.</p>\n<p>Add the following flags to build PlaidML and Intel GPU backends (optional):</p>\n<pre><code>    --build_plaidml_backend\n    --build_intelgpu_backend\n</code></pre>\n<p>For more build options:</p>\n<pre><code>    python3 build_ngtf.py --help\n</code></pre>\n<p>Test the installation:</p>\n<pre><code>    python3 test_ngtf.py\n</code></pre>\n<p>This command runs all C++ and Python unit tests from the <code>ngraph-bridge</code> source tree. It also runs various TensorFlow Python tests using nGraph.</p>\n<p>To use the <code>ngraph-tensorflow-bridge</code>, activate the following <code>virtualenv</code> to start using nGraph with TensorFlow.</p>\n<pre><code>    source build_cmake/venv-tf-py3/bin/activate\n</code></pre>\n<p>Alternatively, you can also install the TensorFlow and nGraph bridge outside of a <code>virtualenv</code>. The Python <code>whl</code> files are located in the <code>build_cmake/artifacts/</code> and <code>build_cmake/artifacts/tensorflow</code> directories, respectively.</p>\n<p>Select the help option of <code>build_ngtf.py</code> script to learn more about various build options and how to build other backends.</p>\n<p>Verify that <code>ngraph-bridge</code> installed correctly:</p>\n<pre><code>    python -c \"import tensorflow as tf; print('TensorFlow version: ',tf.__version__);\\\n            import ngraph_bridge; print(ngraph_bridge.__version__)\"\n\nThis will produce something like this:\n\n    TensorFlow version:  &lt;1.14.0&gt;\n    nGraph bridge version: &lt;b'0.18.0'&gt;\n    nGraph version used for this build: b'0.25.0+005c118'\n    TensorFlow version used for this build: &lt;v1.14.0-...&gt;\n    CXX11_ABI flag used for this build: 0\n    nGraph bridge built with Grappler: False\n    nGraph bridge built with Variables and Optimizers Enablement: False\n\nNote: The version of the ngraph-tensorflow-bridge is not going to be exactly the same as when you build from source. This is due to delay in the source release and publishing the corresponding Python wheel. \n</code></pre>\n<h2>Classify an image</h2>\n<p>Once you have installed nGraph bridge, you can use TensorFlow to train a neural network or run inference using a trained model.</p>\n<p>Use TensorFlow with nGraph to classify an image using a <a href=\"https://www.tensorflow.org/guide/extend/model_files#freezing\" rel=\"nofollow\">frozen model</a>.</p>\n<p>Download the Inception v3 trained model and labels file:</p>\n<pre><code>    wget https://storage.googleapis.com/download.tensorflow.org/models/inception_v3_2016_08_28_frozen.pb.tar.gz\n</code></pre>\n<p>Extract the frozen model and labels file from the tarball:</p>\n<pre><code>    tar xvf inception_v3_2016_08_28_frozen.pb.tar.gz\n</code></pre>\n<p>Download the image file:</p>\n<pre><code>    wget https://github.com/tensorflow/tensorflow/raw/master/tensorflow/examples/label_image/data/grace_hopper.jpg\n</code></pre>\n<p>Download the TensorFlow script:</p>\n<pre><code>   wget https://github.com/tensorflow/tensorflow/raw/master/tensorflow/examples/label_image/label_image.py\n</code></pre>\n<p>Modify the downloaded TensorFlow script to run TensorFlow with nGraph optimizations:</p>\n<pre><code>    import ngraph_bridge\n    ...\n    config = tf.ConfigProto()\n    config_ngraph_enabled = ngraph_bridge.update_config(config)\n    sess = tf.Session(config=config_ngraph_enabled) \n</code></pre>\n<p>Run the classification:</p>\n<pre><code>    python label_image.py --graph inception_v3_2016_08_28_frozen.pb \\\n            --image grace_hopper.jpg --input_layer=input \\\n            --output_layer=InceptionV3/Predictions/Reshape_1 \\\n            --input_height=299 --input_width=299 \\\n            --labels imagenet_slim_labels.txt \n</code></pre>\n<p>This will print the following results:</p>\n<pre><code>    military uniform 0.8343056\n    mortarboard 0.021869544\n    academic gown 0.010358088\n    pickelhaube 0.008008157\n    bulletproof vest 0.005350913\n</code></pre>\n<p>The above instructions are derived from the <a href=\"https://github.com/tensorflow/tensorflow/tree/master/tensorflow/examples/label_image\" rel=\"nofollow\">TensorFlow C++ and Python Image Recognition Demo</a>.</p>\n<p>All of the above commands are available in the <a href=\"https://github.com/tensorflow/ngraph-bridge/tree/master/examples\" rel=\"nofollow\">nGraph TensorFlow examples</a> directory. To classify your own images, modify the <code>infer_image.py</code> file in this directory.</p>\n<h3>Add runtime options for a CPU backend</h3>\n<p>Adding runtime options for a CPU backend applies to training and inference.</p>\n<p>By default nGraph runs with a CPU backend. To get the best performance of the CPU backend, add the following option:</p>\n<pre><code>    OMP_NUM_THREADS=&lt;num_cores&gt; KMP_AFFINITY=granularity=fine,compact,1,0 \\ \n    python label_image.py --graph inception_v3_2016_08_28_frozen.pb \n            --image grace_hopper.jpg --input_layer=input \\\n            --output_layer=InceptionV3/Predictions/Reshape_1 \\\n            --input_height=299 --input_width=299 \\\n            --labels imagenet_slim_labels.txt \n</code></pre>\n<p>Where <code>&lt;num_cores&gt;</code> equals the number of cores in your processor.</p>\n<h4>Measure the time</h4>\n<p>nGraph is a Just In Time (JIT) compiler meaning that the TensorFlow computation graph is compiled to nGraph during the first instance of the execution. From the second time onwards, the execution speeds up significantly.</p>\n<p>Add the following Python code to measure the computation time:</p>\n<pre><span class=\"c1\"># Warmup</span>\n<span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">output_operation</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">{</span>\n        <span class=\"n\">input_operation</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span> <span class=\"n\">t</span><span class=\"p\">})</span>\n<span class=\"c1\"># Run</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">sess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">output_operation</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"p\">{</span>\n        <span class=\"n\">input_operation</span><span class=\"o\">.</span><span class=\"n\">outputs</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]:</span> <span class=\"n\">t</span>\n        <span class=\"p\">})</span>      \n<span class=\"n\">elapsed</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">start</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Time elapsed: </span><span class=\"si\">%f</span><span class=\"s1\"> seconds'</span> <span class=\"o\">%</span> <span class=\"n\">elapsed</span><span class=\"p\">)</span>\n</pre>\n<p>Observe that the output time runs faster than TensorFlow native (i.e., without nGraph).</p>\n<h4>Add additional backends</h4>\n<p>You can substitute the default CPU backend with a different backend such as <code>PLAIDML</code> or <code>INTELGPU</code>. Use the following API:</p>\n<pre><code>    ngraph_bridge.set_backend('PLAIDML')\n</code></pre>\n<p>To determine what backends are available on your system, use the following API:</p>\n<pre><code>    ngraph_bridge.list_backends()\n</code></pre>\n<p>More detailed examples on how to use ngraph_bridge are located in the <a href=\"examples/README.md\" rel=\"nofollow\">examples</a> directory.</p>\n<h2>Debugging</h2>\n<p>During the build, often there are missing configuration steps for building TensorFlow. If you run into build issues, first ensure that you can build TensorFlow. For debugging run time issues, see the instructions provided in the <a href=\"diagnostics/README.md\" rel=\"nofollow\">diagnostics</a> directory.</p>\n<h2>Support</h2>\n<p>Please submit your questions, feature requests and bug reports via <a href=\"https://github.com/tensorflow/ngraph-bridge/issues\" rel=\"nofollow\">GitHub issues</a>.</p>\n<h2>How to Contribute</h2>\n<p>We welcome community contributions to nGraph. If you have an idea for how to\nimprove it:</p>\n<ul>\n<li>Share your proposal via <a href=\"https://github.com/tensorflow/ngraph-bridge/issues\" rel=\"nofollow\">GitHub issues</a>.</li>\n<li>Ensure you can build the product and run all the examples with your patch.</li>\n<li>In the case of a larger feature, create a test.</li>\n<li>Submit a <a href=\"https://github.com/tensorflow/ngraph-bridge/pulls\" rel=\"nofollow\">pull request</a>.</li>\n<li>We will review your contribution and, if any additional fixes or\nmodifications are necessary, may provide feedback to guide you. When\naccepted, your pull request will be merged to the repository.</li>\n</ul>\n<h2>About Intel(R) nGraph(TM)</h2>\n<p>See the full documentation here:  <a href=\"http://ngraph.nervanasys.com/docs/latest\" rel=\"nofollow\">http://ngraph.nervanasys.com/docs/latest</a></p>\n\n          </div>"}, "last_serial": 5685930, "releases": {"0.11.0": [{"comment_text": "", "digests": {"md5": "d53e4645775b373cbe49aac9203376c0", "sha256": "77b366e3b27e51564bd7eb4cfe7a2d4b9bce1e625f33fe506995f419827537f4"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.11.0-py2.py3-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "d53e4645775b373cbe49aac9203376c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 40976383, "upload_time": "2019-02-22T22:36:45", "upload_time_iso_8601": "2019-02-22T22:36:45.873833Z", "url": "https://files.pythonhosted.org/packages/78/99/59745529ffb21495abfe09cdc0e389c685de115cc4b5c6430f755d677141/ngraph_tensorflow_bridge-0.11.0-py2.py3-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e287a59569fccc5fcae7eccb7a4be8f", "sha256": "a4cece63b696800e6d26140c0eb15d7be9dd0a3fad0184fe56813e3da2260395"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.11.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "4e287a59569fccc5fcae7eccb7a4be8f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48474717, "upload_time": "2019-02-22T22:35:45", "upload_time_iso_8601": "2019-02-22T22:35:45.340457Z", "url": "https://files.pythonhosted.org/packages/79/f5/a4e85aa5d6a9184b82abe0bf124ed50b7428eabcb874ee3d49e61aa101e1/ngraph_tensorflow_bridge-0.11.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "2eb53353fd55946d5148ea85f2ac9f04", "sha256": "7951e53ac8c22ae2866aa1c8727786e3cbe9008b3c85325aa32528bd15ccca77"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.12.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "2eb53353fd55946d5148ea85f2ac9f04", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48409839, "upload_time": "2019-04-18T22:36:53", "upload_time_iso_8601": "2019-04-18T22:36:53.929518Z", "url": "https://files.pythonhosted.org/packages/5f/b4/0d78a08b64bdb9df206acaae6d4dd5b3ef30ec77a8f83c078e46f4e22e89/ngraph_tensorflow_bridge-0.12.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "ba4e4d41100e39783fe4168dfad334f5", "sha256": "c540222f7298d8b2b99101b7183f6eb5221a87cf3c2ec0bf0fe2dfdd228312a7"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.16.0-py2.py3-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "ba4e4d41100e39783fe4168dfad334f5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 44816870, "upload_time": "2019-07-31T22:50:14", "upload_time_iso_8601": "2019-07-31T22:50:14.899704Z", "url": "https://files.pythonhosted.org/packages/79/af/13f65880144113873a213dc13a3e108935a379144a26a33282a939c8a403/ngraph_tensorflow_bridge-0.16.0-py2.py3-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b567215926e7c4dd66a9beb6aee58477", "sha256": "ceaffe8dd3463b789192947d71743c77076ce234b65d5ac360abe0cbee0343a6"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.16.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "b567215926e7c4dd66a9beb6aee58477", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53979102, "upload_time": "2019-07-31T23:04:45", "upload_time_iso_8601": "2019-07-31T23:04:45.705919Z", "url": "https://files.pythonhosted.org/packages/95/88/12cb31e53a64bb59e34b548eec93aac523604fd962c68eae38a42adf17ec/ngraph_tensorflow_bridge-0.16.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "0.18.0": [{"comment_text": "", "digests": {"md5": "647a74eeb79d98014f9bbdd10dd76cba", "sha256": "f872f6cff6140fdbec5f8519adf4e510a7a00d45830006b07a6d515dfc676a8d"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.18.0-py2.py3-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "647a74eeb79d98014f9bbdd10dd76cba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47256558, "upload_time": "2019-08-16T05:40:36", "upload_time_iso_8601": "2019-08-16T05:40:36.788843Z", "url": "https://files.pythonhosted.org/packages/fb/cf/6937d9945d025642be9fe0e3674e7c5ec390e59c5fd7a9d075034e3b9040/ngraph_tensorflow_bridge-0.18.0-py2.py3-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ba6a1973c4054b902200d566a6285f9", "sha256": "d483a0c32f3d0955fa3eda95706992d656c6acd16e10a8105e323b120c64f4a6"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.18.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8ba6a1973c4054b902200d566a6285f9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53748761, "upload_time": "2019-08-16T05:28:02", "upload_time_iso_8601": "2019-08-16T05:28:02.617097Z", "url": "https://files.pythonhosted.org/packages/81/40/35bc2daa4eabe134f492444a6add2cd3b6491bbd3d8145ee6c6b8f965e33/ngraph_tensorflow_bridge-0.18.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "00db81a06ffb0061eaea0315cd5cdc27", "sha256": "dcd3be5237d03132fc37136535f35b9cd79641be222b31aed2533141458d217a"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.8.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "00db81a06ffb0061eaea0315cd5cdc27", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48734298, "upload_time": "2018-12-01T07:32:09", "upload_time_iso_8601": "2018-12-01T07:32:09.259477Z", "url": "https://files.pythonhosted.org/packages/1c/c1/635f82fa03f9f5a0cc0543daff65c57dde1b94f121f20768adf325f89880/ngraph_tensorflow_bridge-0.8.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "0.8.0rc0": [{"comment_text": "", "digests": {"md5": "fb89e9c62f1526b2816694e72d8b16e2", "sha256": "47d2fd1a2a0ef18e2548b34e24d008c504d7379d762a4d3afed5c1e17ac2a8ee"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.8.0rc0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "fb89e9c62f1526b2816694e72d8b16e2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 48687831, "upload_time": "2018-11-30T05:55:19", "upload_time_iso_8601": "2018-11-30T05:55:19.095675Z", "url": "https://files.pythonhosted.org/packages/87/b9/e741d74f855b913c272a6aed009772626763597d0d811aab5d8c8ae919b8/ngraph_tensorflow_bridge-0.8.0rc0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "647a74eeb79d98014f9bbdd10dd76cba", "sha256": "f872f6cff6140fdbec5f8519adf4e510a7a00d45830006b07a6d515dfc676a8d"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.18.0-py2.py3-none-macosx_10_14_x86_64.whl", "has_sig": false, "md5_digest": "647a74eeb79d98014f9bbdd10dd76cba", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 47256558, "upload_time": "2019-08-16T05:40:36", "upload_time_iso_8601": "2019-08-16T05:40:36.788843Z", "url": "https://files.pythonhosted.org/packages/fb/cf/6937d9945d025642be9fe0e3674e7c5ec390e59c5fd7a9d075034e3b9040/ngraph_tensorflow_bridge-0.18.0-py2.py3-none-macosx_10_14_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8ba6a1973c4054b902200d566a6285f9", "sha256": "d483a0c32f3d0955fa3eda95706992d656c6acd16e10a8105e323b120c64f4a6"}, "downloads": -1, "filename": "ngraph_tensorflow_bridge-0.18.0-py2.py3-none-manylinux1_x86_64.whl", "has_sig": false, "md5_digest": "8ba6a1973c4054b902200d566a6285f9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 53748761, "upload_time": "2019-08-16T05:28:02", "upload_time_iso_8601": "2019-08-16T05:28:02.617097Z", "url": "https://files.pythonhosted.org/packages/81/40/35bc2daa4eabe134f492444a6add2cd3b6491bbd3d8145ee6c6b8f965e33/ngraph_tensorflow_bridge-0.18.0-py2.py3-none-manylinux1_x86_64.whl", "yanked": false}], "timestamp": "Fri May  8 00:45:30 2020"}