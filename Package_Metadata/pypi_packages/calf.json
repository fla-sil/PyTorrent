{"info": {"author": "Isaac To", "author_email": "isaac.to@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "# calf: Command Argument Loading Function for Python\n\nCalf lets you remove all your command argument parsing code, at least\nfor simple cases.  Only the implementation function is left, with\ninitialization code that uses calf to call this function.  The command\nargument parser is configured with a proper docstring, and perhaps\nsome annotations (argument type) and default values for the\nparameters.  In other words, stuffs that you would write anyway.\n\nThe docstring can be written in Google, Sphinx, epydoc or Numpy style,\nand the design is that it is easy to swap the parsing function with\nyours.  In fact, you can customize such a wide range of\ncharacteristics of calf, that you can treat it as a slightly\nrestricted frontend to the ArgumentParser under the hood.  Used in\nthis way, you can treat calf as a cute way to configure argparse.\n\nThis package shamelessly stole a lot of ideas from\n[plac](https://pypi.org/project/plac/), but hopes to be more focused\non creating comfortable command line interfaces rather than becoming a\nSwiss knife for programs with text-only user interface.\n\n## Basic example\n\nHello-world looks like this:\n\n    def hello(name) -> None:\n        \"\"\"Say hello\n\n        Args:\n\n            name: name of to say hello to\n\n        \"\"\"\n        print('Hello,', name)\n\n    if __name__ == '__main__':\n        import calf\n        calf.call(hello)\n\nThe first thing to notice is that the program uses Google docstring\nstyle.  If you want to use another style, just add\n`doc_parser=<parser>` to `calf.call`.  Here `<parser>` may be\n`calf.google_doc_parser`, `calf.sphinx_doc_parser` (for Sphinx or\nEpydoc) or `calf.numpy_doc_parser`.  You can run this program with:\n\n    hello.py Isaac\n\nHere `name` is a positional command line argument: a normal function\nargument always maps to a positional command line argument.  If you\nwant an option instead, you can replace the function argument like\nthis:\n\n    def hello(*, name: str = 'Isaac') -> None:\n        \"\"\"Say hello\n\n        Args:\n\n            name: (-n) name of to say hello to\n\n        \"\"\"\n        print('Hello,', name)\n\nThen the program is run like one of the following:\n\n    hello.py\n    hello.py --name Cathy\n    hello.py -n Cathy\n\nNow `name` is an option: a keyword-only function argument always maps\nto a function.  In this version we are explicit about the type of the\nargument.  Note also that the leading `-n` in the docstring describing\nthe argument, enclosed in parentheses, becomes the short option name.\n\nIt is usually a good idea to allow options not to be specified, by\nproviding a default value.  Positional arguments can also be provided\na default value, but it doesn't mix well with variable arguments\ndescribed below.\n\nIt is also possible to specify a default which provides no value (so\nthe program knows that no value is provide).  This is done by either\nusing a default value of None, or setting in parameter a type of a\nparameterized Typing.Optional (without setting a default).  In this\ncase the normal construction of the target type will not happen.\n\nThere is a special case: any boolean function argument becomes a\ndefault-off flag.  I cannot find a natural way to have a default-on\nflag, so it is not provided.  (Let me know if you think otherwise!)\n\nVariable arguments and keyword arguments can also be used.  Variable\narguments will become a list of the specified type:\n\n    def do_sum(*arg: int) -> None:\n        \"\"\"Sum numbers\"\"\"\n        print('Sum =', sum(arg, 0))\n\nHere the argument type is \"int\".  The string passed in the command\nline argument will be converted to this type, and in the help message\nthere will be a little hint (looking like \"[int]\") indicating the\nneeded type.  Also note that in this example I don't add documentation\nfor the arguments: the docstring information is optional, without them\nthere is no help string but everything else still works.\n\nKeyword arguments cause command line arguments like \"<name>=<value>\"\nto be stolen from the var-arg and form a map.  A type can still be\nprovided.  For example, if you have:\n\n    import urllib.parse\n    def get_query_str(url, **item) -> None:\n        \"Create URL with parameters\"\n        qstr = urllib.parse.urlencode(item)\n        if qstr:\n            url += '?' + qstr\n        print(url)\n\nThen you can run something like\n\n    get_query_str.py http://a/b x=a=c y=/\n\nto get `http://a/b?y=%2F&x=a%3Dc`.\n\nFinally, if you're tired of writing initialization code, you have an\nadditional option to directly place your module under your\nPYTHONPATH.  Then you can run your program simply like\n\n    calf hello.hello -n Isaac\n\n## Advanced capability\n\nYou can have your function to accept other types.  Calf normally uses\none positional argument or option for each function argument, and\nwhatever string you specified in the argument will be passed to the\ntype you specified (via default argument or annotation) as\nconstructor.  In cases that passing the string to the type constructor\ndoesn't do the right thing (e.g., `datetime`), you can create your own\nconversion function and add it to calf.CONVERTERS.  This has been done\nfor `datetime.date`, `datetime.time` and `datetime.datetime`, and you\ncan change how they behave by modifying `calf.CONVERTERS` (see the\n`nextday.py` example in the docs directory).\n\nBut you can also extend calf by creating a subclass of \"selector\" which\nselects function arguments based on name and type.  It then specifies\nhow to create a \"loader\" to handle the function argument, which may\nuse multiple command line arguments (or do any other interaction with\nthe ArgumentParser).  See `composite.py` in the docs directory to see\nhow this is done, for the common case.\n\nOther parts of the module can also be overridden.  For example, you\ncan change the docstring parser and parameter doc parser.  See the\ndesign document in the docs directory to understand the design and do\nall sorts of things with calf.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/isaacto/calf", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "calf", "package_url": "https://pypi.org/project/calf/", "platform": "", "project_url": "https://pypi.org/project/calf/", "project_urls": {"Homepage": "https://github.com/isaacto/calf"}, "release_url": "https://pypi.org/project/calf/0.3.2/", "requires_dist": null, "requires_python": "~=3.5", "summary": "Command Argument Loading Functions", "version": "0.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>calf: Command Argument Loading Function for Python</h1>\n<p>Calf lets you remove all your command argument parsing code, at least\nfor simple cases.  Only the implementation function is left, with\ninitialization code that uses calf to call this function.  The command\nargument parser is configured with a proper docstring, and perhaps\nsome annotations (argument type) and default values for the\nparameters.  In other words, stuffs that you would write anyway.</p>\n<p>The docstring can be written in Google, Sphinx, epydoc or Numpy style,\nand the design is that it is easy to swap the parsing function with\nyours.  In fact, you can customize such a wide range of\ncharacteristics of calf, that you can treat it as a slightly\nrestricted frontend to the ArgumentParser under the hood.  Used in\nthis way, you can treat calf as a cute way to configure argparse.</p>\n<p>This package shamelessly stole a lot of ideas from\n<a href=\"https://pypi.org/project/plac/\" rel=\"nofollow\">plac</a>, but hopes to be more focused\non creating comfortable command line interfaces rather than becoming a\nSwiss knife for programs with text-only user interface.</p>\n<h2>Basic example</h2>\n<p>Hello-world looks like this:</p>\n<pre><code>def hello(name) -&gt; None:\n    \"\"\"Say hello\n\n    Args:\n\n        name: name of to say hello to\n\n    \"\"\"\n    print('Hello,', name)\n\nif __name__ == '__main__':\n    import calf\n    calf.call(hello)\n</code></pre>\n<p>The first thing to notice is that the program uses Google docstring\nstyle.  If you want to use another style, just add\n<code>doc_parser=&lt;parser&gt;</code> to <code>calf.call</code>.  Here <code>&lt;parser&gt;</code> may be\n<code>calf.google_doc_parser</code>, <code>calf.sphinx_doc_parser</code> (for Sphinx or\nEpydoc) or <code>calf.numpy_doc_parser</code>.  You can run this program with:</p>\n<pre><code>hello.py Isaac\n</code></pre>\n<p>Here <code>name</code> is a positional command line argument: a normal function\nargument always maps to a positional command line argument.  If you\nwant an option instead, you can replace the function argument like\nthis:</p>\n<pre><code>def hello(*, name: str = 'Isaac') -&gt; None:\n    \"\"\"Say hello\n\n    Args:\n\n        name: (-n) name of to say hello to\n\n    \"\"\"\n    print('Hello,', name)\n</code></pre>\n<p>Then the program is run like one of the following:</p>\n<pre><code>hello.py\nhello.py --name Cathy\nhello.py -n Cathy\n</code></pre>\n<p>Now <code>name</code> is an option: a keyword-only function argument always maps\nto a function.  In this version we are explicit about the type of the\nargument.  Note also that the leading <code>-n</code> in the docstring describing\nthe argument, enclosed in parentheses, becomes the short option name.</p>\n<p>It is usually a good idea to allow options not to be specified, by\nproviding a default value.  Positional arguments can also be provided\na default value, but it doesn't mix well with variable arguments\ndescribed below.</p>\n<p>It is also possible to specify a default which provides no value (so\nthe program knows that no value is provide).  This is done by either\nusing a default value of None, or setting in parameter a type of a\nparameterized Typing.Optional (without setting a default).  In this\ncase the normal construction of the target type will not happen.</p>\n<p>There is a special case: any boolean function argument becomes a\ndefault-off flag.  I cannot find a natural way to have a default-on\nflag, so it is not provided.  (Let me know if you think otherwise!)</p>\n<p>Variable arguments and keyword arguments can also be used.  Variable\narguments will become a list of the specified type:</p>\n<pre><code>def do_sum(*arg: int) -&gt; None:\n    \"\"\"Sum numbers\"\"\"\n    print('Sum =', sum(arg, 0))\n</code></pre>\n<p>Here the argument type is \"int\".  The string passed in the command\nline argument will be converted to this type, and in the help message\nthere will be a little hint (looking like \"[int]\") indicating the\nneeded type.  Also note that in this example I don't add documentation\nfor the arguments: the docstring information is optional, without them\nthere is no help string but everything else still works.</p>\n<p>Keyword arguments cause command line arguments like \"&lt;name&gt;=&lt;value&gt;\"\nto be stolen from the var-arg and form a map.  A type can still be\nprovided.  For example, if you have:</p>\n<pre><code>import urllib.parse\ndef get_query_str(url, **item) -&gt; None:\n    \"Create URL with parameters\"\n    qstr = urllib.parse.urlencode(item)\n    if qstr:\n        url += '?' + qstr\n    print(url)\n</code></pre>\n<p>Then you can run something like</p>\n<pre><code>get_query_str.py http://a/b x=a=c y=/\n</code></pre>\n<p>to get <code>http://a/b?y=%2F&amp;x=a%3Dc</code>.</p>\n<p>Finally, if you're tired of writing initialization code, you have an\nadditional option to directly place your module under your\nPYTHONPATH.  Then you can run your program simply like</p>\n<pre><code>calf hello.hello -n Isaac\n</code></pre>\n<h2>Advanced capability</h2>\n<p>You can have your function to accept other types.  Calf normally uses\none positional argument or option for each function argument, and\nwhatever string you specified in the argument will be passed to the\ntype you specified (via default argument or annotation) as\nconstructor.  In cases that passing the string to the type constructor\ndoesn't do the right thing (e.g., <code>datetime</code>), you can create your own\nconversion function and add it to calf.CONVERTERS.  This has been done\nfor <code>datetime.date</code>, <code>datetime.time</code> and <code>datetime.datetime</code>, and you\ncan change how they behave by modifying <code>calf.CONVERTERS</code> (see the\n<code>nextday.py</code> example in the docs directory).</p>\n<p>But you can also extend calf by creating a subclass of \"selector\" which\nselects function arguments based on name and type.  It then specifies\nhow to create a \"loader\" to handle the function argument, which may\nuse multiple command line arguments (or do any other interaction with\nthe ArgumentParser).  See <code>composite.py</code> in the docs directory to see\nhow this is done, for the common case.</p>\n<p>Other parts of the module can also be overridden.  For example, you\ncan change the docstring parser and parameter doc parser.  See the\ndesign document in the docs directory to understand the design and do\nall sorts of things with calf.</p>\n\n          </div>"}, "last_serial": 6815928, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4067d7298e0af86d919295796e2055bd", "sha256": "6d8b4787b96a4805f45364bd564e5d804ae3f51d2d6d4b79f6eb2d92708737be"}, "downloads": -1, "filename": "calf-0.1.tar.gz", "has_sig": false, "md5_digest": "4067d7298e0af86d919295796e2055bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13461, "upload_time": "2019-11-02T13:41:16", "upload_time_iso_8601": "2019-11-02T13:41:16.721771Z", "url": "https://files.pythonhosted.org/packages/2b/f6/3fafb9ef8679433661752666bb4d9ec412877a720672f1d0a274100498e7/calf-0.1.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "243eb287f6f7a19e2cac77804a221fd4", "sha256": "f10e819279e28253af9e22fdfc15af83c8d93bfc3533f0429f7ccc78352324fc"}, "downloads": -1, "filename": "calf-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "243eb287f6f7a19e2cac77804a221fd4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 8650, "upload_time": "2019-11-04T14:17:48", "upload_time_iso_8601": "2019-11-04T14:17:48.495420Z", "url": "https://files.pythonhosted.org/packages/1f/97/4dd3653474f18b26bc98b109c85d39a1f3bfb545f07f3719dad775ed5942/calf-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eaedd77a42b9c6dc189af8c10381bf32", "sha256": "230302f07e242fa035ae14c28c99e0d8be8611f2cdbdf70b08d821966abb1216"}, "downloads": -1, "filename": "calf-0.1.5.tar.gz", "has_sig": false, "md5_digest": "eaedd77a42b9c6dc189af8c10381bf32", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 13917, "upload_time": "2019-11-04T14:17:49", "upload_time_iso_8601": "2019-11-04T14:17:49.951814Z", "url": "https://files.pythonhosted.org/packages/8e/2f/00d4616e2a4f9cd32cf3f50896366f1d8b939ed6221b34941af220de3ca1/calf-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "46230995fcb9fe4c49796928f6dfcdcb", "sha256": "8616b9e442c45c10ce047288b168205290992b2be311e9c78df1a16e577e8610"}, "downloads": -1, "filename": "calf-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "46230995fcb9fe4c49796928f6dfcdcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 8935, "upload_time": "2019-11-05T14:17:24", "upload_time_iso_8601": "2019-11-05T14:17:24.794847Z", "url": "https://files.pythonhosted.org/packages/56/79/a15ca501f5fc6ae293fc024dba46ae3376e394848f6fef31bed46e79d162/calf-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4d365d5b827bceba11d52fe02ab74a", "sha256": "a9213b93bef67b5ea6d713470f7369bea9e5ce57cda62e2161e399f08112f4ce"}, "downloads": -1, "filename": "calf-0.1.6.tar.gz", "has_sig": false, "md5_digest": "1e4d365d5b827bceba11d52fe02ab74a", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 14215, "upload_time": "2019-11-05T14:17:26", "upload_time_iso_8601": "2019-11-05T14:17:26.699153Z", "url": "https://files.pythonhosted.org/packages/8a/72/ea8531d5205b23f75016d8e6a42cd1a41bf4d05b846d2e6112d3377f7d51/calf-0.1.6.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "960843ba27ae6176eeb06a559f8c2201", "sha256": "16c01123fdc17333f22cb8bf4b4e77d0f7dd4a9775c887028c216edae44b872c"}, "downloads": -1, "filename": "calf-0.2-py3.5.egg", "has_sig": false, "md5_digest": "960843ba27ae6176eeb06a559f8c2201", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": "~=3.5", "size": 18289, "upload_time": "2019-11-06T14:37:24", "upload_time_iso_8601": "2019-11-06T14:37:24.894355Z", "url": "https://files.pythonhosted.org/packages/2c/09/53bd1b7f236c04389a91cf06c0dd7160978c1fb3b1f3538276a448ecefa0/calf-0.2-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b48fc666f1182bf1377cd6a915193734", "sha256": "f933db4b76def1d333af39783a0f3b8281ddb1798d83e4c418b0ea4950472c0d"}, "downloads": -1, "filename": "calf-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b48fc666f1182bf1377cd6a915193734", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 9846, "upload_time": "2019-11-06T14:37:23", "upload_time_iso_8601": "2019-11-06T14:37:23.310358Z", "url": "https://files.pythonhosted.org/packages/6f/dc/69ddb752cc63168bc46c5d86c9f80a4f7d3eb162028c4bb57f4211b3899f/calf-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3da1093f674ee7b1b48ae4dbd2f9ed09", "sha256": "06b3918923ffbacedecb5d5ce334146c43754cd84e0b2f724ae10cff50154476"}, "downloads": -1, "filename": "calf-0.2.tar.gz", "has_sig": false, "md5_digest": "3da1093f674ee7b1b48ae4dbd2f9ed09", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 15833, "upload_time": "2019-11-06T14:37:26", "upload_time_iso_8601": "2019-11-06T14:37:26.672506Z", "url": "https://files.pythonhosted.org/packages/0c/89/10f507be05d3c6304aa5f9ef2ddba741719d3f41e8592087bd5b7807b6ec/calf-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "37fc0a0865e02d70146e82572c528179", "sha256": "2076654fc73852c393bdced11c8a126324127c6e1cb27d12cf87fb9e112aecfe"}, "downloads": -1, "filename": "calf-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "37fc0a0865e02d70146e82572c528179", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 10898, "upload_time": "2019-11-07T15:01:13", "upload_time_iso_8601": "2019-11-07T15:01:13.660870Z", "url": "https://files.pythonhosted.org/packages/68/b1/cf0f1e68f3eb42326bde80a709d869c6011ff2f5248b2e4e8f4863c9d3c5/calf-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5426fcd08c48cf7b135c051a88d935d2", "sha256": "237f2e541d4a52d5619bd7c72fa9d66d0877284a4cb585cc9aa42c762815360a"}, "downloads": -1, "filename": "calf-0.3.tar.gz", "has_sig": false, "md5_digest": "5426fcd08c48cf7b135c051a88d935d2", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 17081, "upload_time": "2019-11-07T15:01:15", "upload_time_iso_8601": "2019-11-07T15:01:15.461549Z", "url": "https://files.pythonhosted.org/packages/f3/f5/58319e590bf6961fc0a50551a9da4cdb9219b64a703a4b20f34b2f09eb6c/calf-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "fc287cee3e87bbe89593ab43fcd08d19", "sha256": "0d895b1adaed59ae5df0a4ecb8e54bee128254f6872c9d46c7647e8322c23220"}, "downloads": -1, "filename": "calf-0.3.1-py3.5.egg", "has_sig": false, "md5_digest": "fc287cee3e87bbe89593ab43fcd08d19", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": "~=3.5", "size": 20627, "upload_time": "2019-11-09T07:01:06", "upload_time_iso_8601": "2019-11-09T07:01:06.793876Z", "url": "https://files.pythonhosted.org/packages/67/99/304a4ce79fb97ab4a6ad054a1b155c156e4a6e01699f43deb5e75335d0fd/calf-0.3.1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "17b55373b0b501be2dda2471d0449972", "sha256": "123cd6ab52f7e309950c43a3f17a126af5aa1ef94aa86c276d9109dbb7292c00"}, "downloads": -1, "filename": "calf-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17b55373b0b501be2dda2471d0449972", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 11293, "upload_time": "2019-11-09T07:01:04", "upload_time_iso_8601": "2019-11-09T07:01:04.841869Z", "url": "https://files.pythonhosted.org/packages/bc/bd/d3351da5ee10c66c5d31ff9343cd7245f97a228fc2606906571c7fe857f3/calf-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3a5d5caeeca30a0c47e6d9c1b946ee4", "sha256": "61d42c12fe72fd51df269d9940d4f38c1f627e3f42c83b711dd8a62b573c97ef"}, "downloads": -1, "filename": "calf-0.3.1.tar.gz", "has_sig": false, "md5_digest": "b3a5d5caeeca30a0c47e6d9c1b946ee4", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 18098, "upload_time": "2019-11-09T07:01:08", "upload_time_iso_8601": "2019-11-09T07:01:08.605985Z", "url": "https://files.pythonhosted.org/packages/5e/41/2c83ce5819924e9d9b4d11613cdd20c24998899f211226a848c6d5375de0/calf-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "d18db92fd56bbb83154a2824b04e223b", "sha256": "99293e4f37c174d43c49e5f4547d854ac6158a98a0540926d98a91d082f3912b"}, "downloads": -1, "filename": "calf-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d18db92fd56bbb83154a2824b04e223b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 11488, "upload_time": "2020-03-15T15:28:04", "upload_time_iso_8601": "2020-03-15T15:28:04.209226Z", "url": "https://files.pythonhosted.org/packages/9b/42/ebbd2f88e6d6b44431ae83496c0a8e9487385c53da09b0c5b84bbbe8c699/calf-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd5bc0fca0368eae2e6c73d0e91dc0b5", "sha256": "4c517820182bd419e606c89d4c88ee76189353c79c90424efd6b56af648fd036"}, "downloads": -1, "filename": "calf-0.3.2.tar.gz", "has_sig": false, "md5_digest": "bd5bc0fca0368eae2e6c73d0e91dc0b5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 18353, "upload_time": "2020-03-15T15:28:05", "upload_time_iso_8601": "2020-03-15T15:28:05.883003Z", "url": "https://files.pythonhosted.org/packages/68/cc/5c94a8176ae042b98b3de738fc23165844f472c78ce6ac84dc3663338933/calf-0.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d18db92fd56bbb83154a2824b04e223b", "sha256": "99293e4f37c174d43c49e5f4547d854ac6158a98a0540926d98a91d082f3912b"}, "downloads": -1, "filename": "calf-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d18db92fd56bbb83154a2824b04e223b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 11488, "upload_time": "2020-03-15T15:28:04", "upload_time_iso_8601": "2020-03-15T15:28:04.209226Z", "url": "https://files.pythonhosted.org/packages/9b/42/ebbd2f88e6d6b44431ae83496c0a8e9487385c53da09b0c5b84bbbe8c699/calf-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd5bc0fca0368eae2e6c73d0e91dc0b5", "sha256": "4c517820182bd419e606c89d4c88ee76189353c79c90424efd6b56af648fd036"}, "downloads": -1, "filename": "calf-0.3.2.tar.gz", "has_sig": false, "md5_digest": "bd5bc0fca0368eae2e6c73d0e91dc0b5", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 18353, "upload_time": "2020-03-15T15:28:05", "upload_time_iso_8601": "2020-03-15T15:28:05.883003Z", "url": "https://files.pythonhosted.org/packages/68/cc/5c94a8176ae042b98b3de738fc23165844f472c78ce6ac84dc3663338933/calf-0.3.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:38 2020"}