{"info": {"author": "NuCypher", "author_email": "dev@nucypher.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation", "Topic :: Scientific/Engineering"], "description": ".. role:: bash(code)\n   :language: bash\n\n=========\npyUmbral\n=========\n\n.. start-badges\n\n|version|  |circleci| |commits-since| |docs| |discord|\n\n.. |docs| image:: https://readthedocs.org/projects/pyumbral/badge/?style=flat\n    :target: https://readthedocs.org/projects/pyumbral\n    :alt: Documentation Status\n\n.. |discord| image:: https://img.shields.io/discord/411401661714792449.svg?logo=discord\n    :target: https://discord.gg/xYqyEby\n    :alt: Discord\n\n.. |circleci| image:: https://img.shields.io/circleci/project/github/nucypher/pyUmbral.svg?logo=circleci\n    :target: https://circleci.com/gh/nucypher/pyUmbral/tree/master\n    :alt: CircleCI build status\n\n.. |version| image:: https://img.shields.io/pypi/v/umbral.svg\n    :alt: PyPI Package latest release\n    :target: https://pypi.org/project/umbral\n\n.. |commits-since| image:: https://img.shields.io/github/commits-since/nucypher/pyumbral/v0.1.3-alpha.2.svg\n    :alt: Commits since latest release\n    :target: https://github.com/nucypher/pyUmbral/compare/v0.1.3-alpha.2...master\n\n.. end-badges\n\npyUmbral is the reference implementation of the Umbral_ threshold proxy re-encryption scheme.\nIt is open-source, built with Python, and uses OpenSSL_ and Cryptography.io_.\n\nUsing Umbral, Alice (the data owner) can *delegate decryption rights* to Bob for\nany ciphertext intended to her, through a re-encryption process performed by a\nset of semi-trusted proxies or *Ursulas*. When a threshold of these proxies\nparticipate by performing re-encryption, Bob is able to combine these independent\nre-encryptions and decrypt the original message using his private key.\n\n.. image:: https://www.nucypher.com/_next/static/images/umbral-d60f22230f2ac92b56c6e7d84794e5c4.svg\n  :width: 400 px\n  :align: center\n\npyUmbral is the cryptographic engine behind nucypher_,\na proxy re-encryption network to empower privacy in decentralized systems.\n\n.. _Umbral: https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\n.. _Cryptography.io: https://cryptography.io/en/latest/\n.. _OpenSSL: https://www.openssl.org/\n.. _nucypher: https://github.com/nucypher/nucypher\n\nUsage\n=====\n\n**Key Generation**\n\nAs in any public-key cryptosystem, users need a pair of public and private keys.\nAdditionally, users that delegate access to their data (like Alice, in this example) need a signing keypair.\n\n.. code-block:: python\n\n    from umbral import pre, keys, signing\n\n    # Generate Umbral keys for Alice.\n    alices_private_key = keys.UmbralPrivateKey.gen_key()\n    alices_public_key = alices_private_key.get_pubkey()\n\n    alices_signing_key = keys.UmbralPrivateKey.gen_key()\n    alices_verifying_key = alices_signing_key.get_pubkey()\n    alices_signer = signing.Signer(private_key=alices_signing_key)\n\n    # Generate Umbral keys for Bob.\n    bobs_private_key = keys.UmbralPrivateKey.gen_key()\n    bobs_public_key = bobs_private_key.get_pubkey()\n\n\n**Encryption**\n\nNow let's encrypt data with Alice's public key.\nInvocation of ``pre.encrypt`` returns both the ``ciphertext`` and a ``capsule``.\nNote that anyone with Alice's public key can perform this operation.\n\nSince data was encrypted with Alice's public key,\nAlice can open the capsule and decrypt the ciphertext with her private key.\n\n\n.. code-block:: python\n\n    # Encrypt data with Alice's public key.\n    plaintext = b'Proxy Re-Encryption is cool!'\n    ciphertext, capsule = pre.encrypt(alices_public_key, plaintext)\n\n    # Decrypt data with Alice's private key.\n    cleartext = pre.decrypt(ciphertext=ciphertext, \n                            capsule=capsule, \n                            decrypting_key=alices_private_key)\n\n\n**Re-Encryption Key Fragments**\n\nWhen Alice wants to grant Bob access to open her encrypted messages,\nshe creates *re-encryption key fragments*, or *\"kfrags\"*,\nwhich are next sent to N proxies or *Ursulas*.\n\n.. code-block:: python\n\n    # Alice generates \"M of N\" re-encryption key fragments (or \"KFrags\") for Bob.\n    # In this example, 10 out of 20.\n    kfrags = pre.generate_kfrags(delegating_privkey=alices_private_key,\n                                 signer=alices_signer,\n                                 receiving_pubkey=bobs_public_key,\n                                 threshold=10,\n                                 N=20)\n\n\n**Re-Encryption**\n\nBob asks several Ursulas to re-encrypt the capsule so he can open it.\nEach Ursula performs re-encryption on the capsule using the ``kfrag``\nprovided by Alice, obtaining this way a \"capsule fragment\", or ``cfrag``.\n\nBob collects the resulting cfrags from several Ursulas.\nBob must gather at least ``threshold`` cfrags in order to activate the capsule.\n\n.. code-block:: python\n\n  # Several Ursulas perform re-encryption, and Bob collects the resulting `cfrags`.\n  # He must gather at least `threshold` `cfrags` in order to activate the capsule.\n\n  capsule.set_correctness_keys(delegating=alices_public_key,\n                               receiving=bobs_public_key,\n                               verifying=alices_verifying_key)\n\n  cfrags = list()           # Bob's cfrag collection\n  for kfrag in kfrags[:10]:\n    cfrag = pre.reencrypt(kfrag=kfrag, capsule=capsule)\n    cfrags.append(cfrag)    # Bob collects a cfrag\n\n\n**Decryption by Bob**\n\nFinally, Bob activates the capsule by attaching at least ``threshold`` cfrags,\nand then decrypts the re-encrypted ciphertext.\n\n.. code-block:: python\n\n  # Bob activates and opens the capsule\n  for cfrag in cfrags:\n    capsule.attach_cfrag(cfrag)\n\n  bob_cleartext = pre.decrypt(ciphertext=ciphertext, \n                              capsule=capsule, \n                              decrypting_key=bobs_private_key)\n  assert bob_cleartext == plaintext\n\nSee more detailed usage examples in the docs_ directory.\n\n.. _docs : https://github.com/nucypher/pyUmbral/tree/master/docs\n\n\nQuick Installation\n==================\n\nTo install pyUmbral, simply use ``pip``:\n\n.. code-block:: bash\n\n  $ pip3 install umbral\n\n\nAlternatively, you can checkout the repo and install it from there. \nThe NuCypher team uses ``pipenv`` for managing pyUmbral's dependencies.\nThe recommended installation procedure is as follows:\n\n.. code-block:: bash\n\n    $ sudo pip3 install pipenv\n    $ pipenv install\n\nPost-installation, you can activate the project virtual environment\nin your current terminal session by running ``pipenv shell``.\n\nFor more information on ``pipenv``, find the official documentation here: https://docs.pipenv.org/.\n\n\nAcademic Whitepaper\n====================\n\nThe Umbral scheme academic whitepaper and cryptographic specifications\nare available on GitHub_.\n\n  \"Umbral: A Threshold Proxy Re-Encryption Scheme\"\n  *by David Nu\u00f1ez*.\n  https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\n\n.. _GitHub: https://github.com/nucypher/umbral-doc/\n\n\nSupport & Contribute\n=====================\n\n- Issue Tracker: https://github.com/nucypher/pyUmbral/issues\n- Source Code: https://github.com/nucypher/pyUmbral\n\n\nSecurity\n========\n\nIf you identify vulnerabilities with _any_ nucypher code,\nplease email security@nucypher.com with relevant information to your findings.\nWe will work with researchers to coordinate vulnerability disclosure between our partners\nand users to ensure successful mitigation of vulnerabilities.\n\nThroughout the reporting process,\nwe expect researchers to honor an embargo period that may vary depending on the severity of the disclosure.\nThis ensures that we have the opportunity to fix any issues, identify further issues (if any), and inform our users.\n\nSometimes vulnerabilities are of a more sensitive nature and require extra precautions.\nWe are happy to work together to use a more secure medium, such as Signal.\nEmail security@nucypher.com and we will coordinate a communication channel that we're both comfortable with.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nucypher/pyUmbral", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "umbral", "package_url": "https://pypi.org/project/umbral/", "platform": "", "project_url": "https://pypi.org/project/umbral/", "project_urls": {"Homepage": "https://github.com/nucypher/pyUmbral"}, "release_url": "https://pypi.org/project/umbral/0.1.3a2/", "requires_dist": ["setuptools", "cryptography (>=2.3)", "pynacl", "pysha3", "constant-sorrow (>=0.1.0a7)", "bytestring-splitter", "pytest-benchmark ; extra == 'benchmarks'", "sphinx ; extra == 'docs'", "sphinx-autobuild ; extra == 'docs'", "pytest ; extra == 'testing'", "pytest-mypy ; extra == 'testing'", "pytest-mock ; extra == 'testing'", "pytest-cov ; extra == 'testing'", "mock ; extra == 'testing'", "hypothesis ; extra == 'testing'", "coverage ; extra == 'testing'", "codecov ; extra == 'testing'", "monkeytype ; extra == 'testing'", "nbval ; extra == 'testing'", "mypy ; extra == 'testing'", "bumpversion ; extra == 'testing'"], "requires_python": ">=3", "summary": "NuCypher's Umbral Proxy Re-Encryption Implementation", "version": "0.1.3a2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/umbral\" rel=\"nofollow\"><img alt=\"PyPI Package latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cf50ad20d170fed20ac7bc872f9015b5d5095f93/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f756d6272616c2e737667\"></a>  <a href=\"https://circleci.com/gh/nucypher/pyUmbral/tree/master\" rel=\"nofollow\"><img alt=\"CircleCI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e64b159d3c6927d9a3b267a6219c514c4921170/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f6e756379706865722f7079556d6272616c2e7376673f6c6f676f3d636972636c656369\"></a> <a href=\"https://github.com/nucypher/pyUmbral/compare/v0.1.3-alpha.2...master\" rel=\"nofollow\"><img alt=\"Commits since latest release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dd11fb9e12405c4b444941c3c9a2b8d9ec5f59a/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f6e756379706865722f7079756d6272616c2f76302e312e332d616c7068612e322e737667\"></a> <a href=\"https://readthedocs.org/projects/pyumbral\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33deef57c72ae0aa54c6cf7f23f9f3254a0136e9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079756d6272616c2f62616467652f3f7374796c653d666c6174\"></a> <a href=\"https://discord.gg/xYqyEby\" rel=\"nofollow\"><img alt=\"Discord\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfd24280e4ca60ac10c7761422b90e7c3ed0dd73/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3431313430313636313731343739323434392e7376673f6c6f676f3d646973636f7264\"></a></p>\n<p>pyUmbral is the reference implementation of the <a href=\"https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\" rel=\"nofollow\">Umbral</a> threshold proxy re-encryption scheme.\nIt is open-source, built with Python, and uses <a href=\"https://www.openssl.org/\" rel=\"nofollow\">OpenSSL</a> and <a href=\"https://cryptography.io/en/latest/\" rel=\"nofollow\">Cryptography.io</a>.</p>\n<p>Using Umbral, Alice (the data owner) can <em>delegate decryption rights</em> to Bob for\nany ciphertext intended to her, through a re-encryption process performed by a\nset of semi-trusted proxies or <em>Ursulas</em>. When a threshold of these proxies\nparticipate by performing re-encryption, Bob is able to combine these independent\nre-encryptions and decrypt the original message using his private key.</p>\n<img alt=\"https://www.nucypher.com/_next/static/images/umbral-d60f22230f2ac92b56c6e7d84794e5c4.svg\" class=\"align-center\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/096f7d918972a5eca4275c134e70f7db6ef2fc83/68747470733a2f2f7777772e6e756379706865722e636f6d2f5f6e6578742f7374617469632f696d616765732f756d6272616c2d64363066323232333066326163393262353663366537643834373934653563342e737667\" width=\"400px\">\n<p>pyUmbral is the cryptographic engine behind <a href=\"https://github.com/nucypher/nucypher\" rel=\"nofollow\">nucypher</a>,\na proxy re-encryption network to empower privacy in decentralized systems.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><strong>Key Generation</strong></p>\n<p>As in any public-key cryptosystem, users need a pair of public and private keys.\nAdditionally, users that delegate access to their data (like Alice, in this example) need a signing keypair.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">umbral</span> <span class=\"kn\">import</span> <span class=\"n\">pre</span><span class=\"p\">,</span> <span class=\"n\">keys</span><span class=\"p\">,</span> <span class=\"n\">signing</span>\n\n<span class=\"c1\"># Generate Umbral keys for Alice.</span>\n<span class=\"n\">alices_private_key</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">UmbralPrivateKey</span><span class=\"o\">.</span><span class=\"n\">gen_key</span><span class=\"p\">()</span>\n<span class=\"n\">alices_public_key</span> <span class=\"o\">=</span> <span class=\"n\">alices_private_key</span><span class=\"o\">.</span><span class=\"n\">get_pubkey</span><span class=\"p\">()</span>\n\n<span class=\"n\">alices_signing_key</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">UmbralPrivateKey</span><span class=\"o\">.</span><span class=\"n\">gen_key</span><span class=\"p\">()</span>\n<span class=\"n\">alices_verifying_key</span> <span class=\"o\">=</span> <span class=\"n\">alices_signing_key</span><span class=\"o\">.</span><span class=\"n\">get_pubkey</span><span class=\"p\">()</span>\n<span class=\"n\">alices_signer</span> <span class=\"o\">=</span> <span class=\"n\">signing</span><span class=\"o\">.</span><span class=\"n\">Signer</span><span class=\"p\">(</span><span class=\"n\">private_key</span><span class=\"o\">=</span><span class=\"n\">alices_signing_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Generate Umbral keys for Bob.</span>\n<span class=\"n\">bobs_private_key</span> <span class=\"o\">=</span> <span class=\"n\">keys</span><span class=\"o\">.</span><span class=\"n\">UmbralPrivateKey</span><span class=\"o\">.</span><span class=\"n\">gen_key</span><span class=\"p\">()</span>\n<span class=\"n\">bobs_public_key</span> <span class=\"o\">=</span> <span class=\"n\">bobs_private_key</span><span class=\"o\">.</span><span class=\"n\">get_pubkey</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Encryption</strong></p>\n<p>Now let\u2019s encrypt data with Alice\u2019s public key.\nInvocation of <tt>pre.encrypt</tt> returns both the <tt>ciphertext</tt> and a <tt>capsule</tt>.\nNote that anyone with Alice\u2019s public key can perform this operation.</p>\n<p>Since data was encrypted with Alice\u2019s public key,\nAlice can open the capsule and decrypt the ciphertext with her private key.</p>\n<pre><span class=\"c1\"># Encrypt data with Alice's public key.</span>\n<span class=\"n\">plaintext</span> <span class=\"o\">=</span> <span class=\"sa\">b</span><span class=\"s1\">'Proxy Re-Encryption is cool!'</span>\n<span class=\"n\">ciphertext</span><span class=\"p\">,</span> <span class=\"n\">capsule</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"n\">encrypt</span><span class=\"p\">(</span><span class=\"n\">alices_public_key</span><span class=\"p\">,</span> <span class=\"n\">plaintext</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Decrypt data with Alice's private key.</span>\n<span class=\"n\">cleartext</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"o\">=</span><span class=\"n\">ciphertext</span><span class=\"p\">,</span>\n                        <span class=\"n\">capsule</span><span class=\"o\">=</span><span class=\"n\">capsule</span><span class=\"p\">,</span>\n                        <span class=\"n\">decrypting_key</span><span class=\"o\">=</span><span class=\"n\">alices_private_key</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Re-Encryption Key Fragments</strong></p>\n<p>When Alice wants to grant Bob access to open her encrypted messages,\nshe creates <em>re-encryption key fragments</em>, or <em>\u201ckfrags\u201d</em>,\nwhich are next sent to N proxies or <em>Ursulas</em>.</p>\n<pre><span class=\"c1\"># Alice generates \"M of N\" re-encryption key fragments (or \"KFrags\") for Bob.</span>\n<span class=\"c1\"># In this example, 10 out of 20.</span>\n<span class=\"n\">kfrags</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"n\">generate_kfrags</span><span class=\"p\">(</span><span class=\"n\">delegating_privkey</span><span class=\"o\">=</span><span class=\"n\">alices_private_key</span><span class=\"p\">,</span>\n                             <span class=\"n\">signer</span><span class=\"o\">=</span><span class=\"n\">alices_signer</span><span class=\"p\">,</span>\n                             <span class=\"n\">receiving_pubkey</span><span class=\"o\">=</span><span class=\"n\">bobs_public_key</span><span class=\"p\">,</span>\n                             <span class=\"n\">threshold</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                             <span class=\"n\">N</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Re-Encryption</strong></p>\n<p>Bob asks several Ursulas to re-encrypt the capsule so he can open it.\nEach Ursula performs re-encryption on the capsule using the <tt>kfrag</tt>\nprovided by Alice, obtaining this way a \u201ccapsule fragment\u201d, or <tt>cfrag</tt>.</p>\n<p>Bob collects the resulting cfrags from several Ursulas.\nBob must gather at least <tt>threshold</tt> cfrags in order to activate the capsule.</p>\n<pre><span class=\"c1\"># Several Ursulas perform re-encryption, and Bob collects the resulting `cfrags`.</span>\n<span class=\"c1\"># He must gather at least `threshold` `cfrags` in order to activate the capsule.</span>\n\n<span class=\"n\">capsule</span><span class=\"o\">.</span><span class=\"n\">set_correctness_keys</span><span class=\"p\">(</span><span class=\"n\">delegating</span><span class=\"o\">=</span><span class=\"n\">alices_public_key</span><span class=\"p\">,</span>\n                             <span class=\"n\">receiving</span><span class=\"o\">=</span><span class=\"n\">bobs_public_key</span><span class=\"p\">,</span>\n                             <span class=\"n\">verifying</span><span class=\"o\">=</span><span class=\"n\">alices_verifying_key</span><span class=\"p\">)</span>\n\n<span class=\"n\">cfrags</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">()</span>           <span class=\"c1\"># Bob's cfrag collection</span>\n<span class=\"k\">for</span> <span class=\"n\">kfrag</span> <span class=\"ow\">in</span> <span class=\"n\">kfrags</span><span class=\"p\">[:</span><span class=\"mi\">10</span><span class=\"p\">]:</span>\n  <span class=\"n\">cfrag</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"n\">reencrypt</span><span class=\"p\">(</span><span class=\"n\">kfrag</span><span class=\"o\">=</span><span class=\"n\">kfrag</span><span class=\"p\">,</span> <span class=\"n\">capsule</span><span class=\"o\">=</span><span class=\"n\">capsule</span><span class=\"p\">)</span>\n  <span class=\"n\">cfrags</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">cfrag</span><span class=\"p\">)</span>    <span class=\"c1\"># Bob collects a cfrag</span>\n</pre>\n<p><strong>Decryption by Bob</strong></p>\n<p>Finally, Bob activates the capsule by attaching at least <tt>threshold</tt> cfrags,\nand then decrypts the re-encrypted ciphertext.</p>\n<pre><span class=\"c1\"># Bob activates and opens the capsule</span>\n<span class=\"k\">for</span> <span class=\"n\">cfrag</span> <span class=\"ow\">in</span> <span class=\"n\">cfrags</span><span class=\"p\">:</span>\n  <span class=\"n\">capsule</span><span class=\"o\">.</span><span class=\"n\">attach_cfrag</span><span class=\"p\">(</span><span class=\"n\">cfrag</span><span class=\"p\">)</span>\n\n<span class=\"n\">bob_cleartext</span> <span class=\"o\">=</span> <span class=\"n\">pre</span><span class=\"o\">.</span><span class=\"n\">decrypt</span><span class=\"p\">(</span><span class=\"n\">ciphertext</span><span class=\"o\">=</span><span class=\"n\">ciphertext</span><span class=\"p\">,</span>\n                            <span class=\"n\">capsule</span><span class=\"o\">=</span><span class=\"n\">capsule</span><span class=\"p\">,</span>\n                            <span class=\"n\">decrypting_key</span><span class=\"o\">=</span><span class=\"n\">bobs_private_key</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">bob_cleartext</span> <span class=\"o\">==</span> <span class=\"n\">plaintext</span>\n</pre>\n<p>See more detailed usage examples in the <a href=\"https://github.com/nucypher/pyUmbral/tree/master/docs\" rel=\"nofollow\">docs</a> directory.</p>\n</div>\n<div id=\"quick-installation\">\n<h2>Quick Installation</h2>\n<p>To install pyUmbral, simply use <tt>pip</tt>:</p>\n<pre>$ pip3 install umbral\n</pre>\n<p>Alternatively, you can checkout the repo and install it from there.\nThe NuCypher team uses <tt>pipenv</tt> for managing pyUmbral\u2019s dependencies.\nThe recommended installation procedure is as follows:</p>\n<pre>$ sudo pip3 install pipenv\n$ pipenv install\n</pre>\n<p>Post-installation, you can activate the project virtual environment\nin your current terminal session by running <tt>pipenv shell</tt>.</p>\n<p>For more information on <tt>pipenv</tt>, find the official documentation here: <a href=\"https://docs.pipenv.org/\" rel=\"nofollow\">https://docs.pipenv.org/</a>.</p>\n</div>\n<div id=\"academic-whitepaper\">\n<h2>Academic Whitepaper</h2>\n<p>The Umbral scheme academic whitepaper and cryptographic specifications\nare available on <a href=\"https://github.com/nucypher/umbral-doc/\" rel=\"nofollow\">GitHub</a>.</p>\n<blockquote>\n\u201cUmbral: A Threshold Proxy Re-Encryption Scheme\u201d\n<em>by David Nu\u00f1ez</em>.\n<a href=\"https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf\" rel=\"nofollow\">https://github.com/nucypher/umbral-doc/blob/master/umbral-doc.pdf</a></blockquote>\n</div>\n<div id=\"support-contribute\">\n<h2>Support &amp; Contribute</h2>\n<ul>\n<li>Issue Tracker: <a href=\"https://github.com/nucypher/pyUmbral/issues\" rel=\"nofollow\">https://github.com/nucypher/pyUmbral/issues</a></li>\n<li>Source Code: <a href=\"https://github.com/nucypher/pyUmbral\" rel=\"nofollow\">https://github.com/nucypher/pyUmbral</a></li>\n</ul>\n</div>\n<div id=\"security\">\n<h2>Security</h2>\n<p>If you identify vulnerabilities with _any_ nucypher code,\nplease email <a href=\"mailto:security%40nucypher.com\">security<span>@</span>nucypher<span>.</span>com</a> with relevant information to your findings.\nWe will work with researchers to coordinate vulnerability disclosure between our partners\nand users to ensure successful mitigation of vulnerabilities.</p>\n<p>Throughout the reporting process,\nwe expect researchers to honor an embargo period that may vary depending on the severity of the disclosure.\nThis ensures that we have the opportunity to fix any issues, identify further issues (if any), and inform our users.</p>\n<p>Sometimes vulnerabilities are of a more sensitive nature and require extra precautions.\nWe are happy to work together to use a more secure medium, such as Signal.\nEmail <a href=\"mailto:security%40nucypher.com\">security<span>@</span>nucypher<span>.</span>com</a> and we will coordinate a communication channel that we\u2019re both comfortable with.</p>\n</div>\n\n          </div>"}, "last_serial": 5657850, "releases": {"0.1.0a4": [{"comment_text": "", "digests": {"md5": "25e89f5e6979c68000931f5729687dee", "sha256": "5d0dfe66bbfdbb96b4e9a7603e6fcb35aaf8988c808bd836a7531e264be3d025"}, "downloads": -1, "filename": "umbral-0.1.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "25e89f5e6979c68000931f5729687dee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 32686, "upload_time": "2018-08-21T22:36:45", "upload_time_iso_8601": "2018-08-21T22:36:45.014468Z", "url": "https://files.pythonhosted.org/packages/39/1b/1dbc8d5971b35a959d41fe84fddd57533c92367fbd58f43b6b7e39b02eaf/umbral-0.1.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "549a0a0be33a3e911efd8d65d4826aa3", "sha256": "87b30533eefedb33e81df3dd45cd7c1a44c0a63a1165b9dbd0b448b98cfa6b89"}, "downloads": -1, "filename": "umbral-0.1.0a4.tar.gz", "has_sig": false, "md5_digest": "549a0a0be33a3e911efd8d65d4826aa3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24699, "upload_time": "2018-08-21T22:36:46", "upload_time_iso_8601": "2018-08-21T22:36:46.726551Z", "url": "https://files.pythonhosted.org/packages/c6/1b/efa6c636519ce01e016aabf3945ba7f7c4c54fa09ba5acf54627f56f569d/umbral-0.1.0a4.tar.gz", "yanked": false}], "0.1.1a3": [{"comment_text": "", "digests": {"md5": "09d35b272752766b289860e3e77f373e", "sha256": "ab2ca15051bc29faa5829d89e0825ce5b9b167b972bb8fc7f444df85d4f01da5"}, "downloads": -1, "filename": "umbral-0.1.1a3-py3-none-any.whl", "has_sig": false, "md5_digest": "09d35b272752766b289860e3e77f373e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 44986, "upload_time": "2018-10-18T23:50:26", "upload_time_iso_8601": "2018-10-18T23:50:26.709007Z", "url": "https://files.pythonhosted.org/packages/13/a3/32f332700b72dd1e0544582ab4df40d360ce325d0f89aac94d5182f1a62a/umbral-0.1.1a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac75e3577d9981919b80d145aa3b0c34", "sha256": "f6b4dba0d5bba64ec2968b7f1cab398d9cbcded3f12cd43aeef6019de2e407ef"}, "downloads": -1, "filename": "umbral-0.1.1a3.tar.gz", "has_sig": false, "md5_digest": "ac75e3577d9981919b80d145aa3b0c34", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 24491, "upload_time": "2018-10-18T23:50:28", "upload_time_iso_8601": "2018-10-18T23:50:28.216319Z", "url": "https://files.pythonhosted.org/packages/bc/3c/1f488b58633dc279c03edf408a1080c3a3b586277880194d650efa9fb842/umbral-0.1.1a3.tar.gz", "yanked": false}], "0.1.2a0": [{"comment_text": "", "digests": {"md5": "2eba84591a522c6118b1c48514386dfd", "sha256": "8e6fe9fcd168aeaf75a628abb9e07e8efc1ac638b9f34f8bfad86fe833ed10b4"}, "downloads": -1, "filename": "umbral-0.1.2a0-py3-none-any.whl", "has_sig": false, "md5_digest": "2eba84591a522c6118b1c48514386dfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 47150, "upload_time": "2018-11-29T10:04:06", "upload_time_iso_8601": "2018-11-29T10:04:06.458132Z", "url": "https://files.pythonhosted.org/packages/9f/4b/4a6c98d67d22ce3572201b3185b5370ab485ce3d4b55e5a92c7de7c5c9b5/umbral-0.1.2a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "29b7332a5a8f8cef320434e8310b9dcb", "sha256": "76252a9ea8e4b6937ebbe43f510dc95e130191070d2d846d9d7bd4aa9f3d4966"}, "downloads": -1, "filename": "umbral-0.1.2a0.tar.gz", "has_sig": false, "md5_digest": "29b7332a5a8f8cef320434e8310b9dcb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 23699, "upload_time": "2018-11-29T10:04:08", "upload_time_iso_8601": "2018-11-29T10:04:08.034145Z", "url": "https://files.pythonhosted.org/packages/ee/dc/92410fc0c960b8afb643465417e396df81c77c6df675572cccf8d6de3a4b/umbral-0.1.2a0.tar.gz", "yanked": false}], "0.1.2a1": [{"comment_text": "", "digests": {"md5": "40d2eeb68703a808d15f25980232d24c", "sha256": "fba0f1dbaec38e18198150346760d42493305f362f1dfe74aeabdb64261f3eeb"}, "downloads": -1, "filename": "umbral-0.1.2a1-py3-none-any.whl", "has_sig": false, "md5_digest": "40d2eeb68703a808d15f25980232d24c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 58327, "upload_time": "2018-12-10T20:26:32", "upload_time_iso_8601": "2018-12-10T20:26:32.273857Z", "url": "https://files.pythonhosted.org/packages/fe/db/12e6b9511b364670a6e06b954290c5e5c257afb18b3655786ccf9f8bff0e/umbral-0.1.2a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7f9fc165e6e68ec2747d800fec09593", "sha256": "ca4d5e1f6557af27908e12a7c567f01fa0aa150d96a462f4fd6198d61407f7df"}, "downloads": -1, "filename": "umbral-0.1.2a1.tar.gz", "has_sig": false, "md5_digest": "f7f9fc165e6e68ec2747d800fec09593", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30116, "upload_time": "2018-12-10T20:26:34", "upload_time_iso_8601": "2018-12-10T20:26:34.040024Z", "url": "https://files.pythonhosted.org/packages/3f/e7/ea5c60001074621adce9d7635fafc0c9f50ad9730da8107dd4723ea8673d/umbral-0.1.2a1.tar.gz", "yanked": false}], "0.1.2a2": [{"comment_text": "", "digests": {"md5": "98cc7bb2fb61772b4062c24d5a5a8a7f", "sha256": "f0f1e44da8b900ff7a2a9c27ee16931b73d81c92016bcd0a150e92d427fa7d81"}, "downloads": -1, "filename": "umbral-0.1.2a2-py3-none-any.whl", "has_sig": false, "md5_digest": "98cc7bb2fb61772b4062c24d5a5a8a7f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 57568, "upload_time": "2018-12-11T00:10:54", "upload_time_iso_8601": "2018-12-11T00:10:54.885116Z", "url": "https://files.pythonhosted.org/packages/51/10/e1938ee770d9fa16ccb8f46563da1e12a1963792277bdef162e15afcc533/umbral-0.1.2a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "003ef11dd4e499391fd9d4173eec24e8", "sha256": "bb68a81c5646f76388b70c540dcde5befdf465c7115c525210b6dadba2b5ef62"}, "downloads": -1, "filename": "umbral-0.1.2a2.tar.gz", "has_sig": false, "md5_digest": "003ef11dd4e499391fd9d4173eec24e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30437, "upload_time": "2018-12-11T00:10:56", "upload_time_iso_8601": "2018-12-11T00:10:56.364186Z", "url": "https://files.pythonhosted.org/packages/94/2d/3ef17534901d3c92cd865f6ebe39453dd9de17efc3d15f804a75da0bc426/umbral-0.1.2a2.tar.gz", "yanked": false}], "0.1.3a0": [{"comment_text": "", "digests": {"md5": "8e0f0b66439d937480dd923e701d49fe", "sha256": "8a1b23fafaafb07438f98ee112949818a6941d377c305f8b8598f52c4831b0c4"}, "downloads": -1, "filename": "umbral-0.1.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "8e0f0b66439d937480dd923e701d49fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 57675, "upload_time": "2018-12-15T20:55:42", "upload_time_iso_8601": "2018-12-15T20:55:42.001826Z", "url": "https://files.pythonhosted.org/packages/34/9b/2e41dd49496fcdd0dfa6ce4f4319b8577e703b75ba60119caa0769d7149b/umbral-0.1.3a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e81fb72fbbd4a4ea4883d886fd4ad3dc", "sha256": "64b0302117e63c212e94005ee6a981da53f40ff643aca215263ad4059ed0c885"}, "downloads": -1, "filename": "umbral-0.1.3a0.tar.gz", "has_sig": false, "md5_digest": "e81fb72fbbd4a4ea4883d886fd4ad3dc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 30456, "upload_time": "2018-12-15T20:55:43", "upload_time_iso_8601": "2018-12-15T20:55:43.634009Z", "url": "https://files.pythonhosted.org/packages/19/b6/109cce26e88969649932f21a3f6f57bcd7a7b2948759ae1d3d07a743d46e/umbral-0.1.3a0.tar.gz", "yanked": false}], "0.1.3a1": [{"comment_text": "", "digests": {"md5": "ec5c436cdc622d34d8273ee0ea7d3e4b", "sha256": "933fb243cabf7df7d9f6075305c7d8aea9b61d863c732a132075dfb9bc790bcb"}, "downloads": -1, "filename": "umbral-0.1.3a1-py3-none-any.whl", "has_sig": false, "md5_digest": "ec5c436cdc622d34d8273ee0ea7d3e4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 58448, "upload_time": "2019-02-22T10:40:06", "upload_time_iso_8601": "2019-02-22T10:40:06.915385Z", "url": "https://files.pythonhosted.org/packages/7e/6c/23f0bb4d128870af2f411b3c518fa0c616649b446a07c15686a053773336/umbral-0.1.3a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0923897aba6b25dc59c6ead9424ea702", "sha256": "02601852b6a31b17db54584e10ea4857312e23fcb84ca04a0e2d0c16d6edabb8"}, "downloads": -1, "filename": "umbral-0.1.3a1.tar.gz", "has_sig": false, "md5_digest": "0923897aba6b25dc59c6ead9424ea702", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 32357, "upload_time": "2019-02-22T10:40:08", "upload_time_iso_8601": "2019-02-22T10:40:08.999089Z", "url": "https://files.pythonhosted.org/packages/a5/4c/78686768028248a9649520f42a48db3a2420d36f4faed6d71709d8222fdc/umbral-0.1.3a1.tar.gz", "yanked": false}], "0.1.3a2": [{"comment_text": "", "digests": {"md5": "d20c4d594031d3c9699f266525e89db6", "sha256": "a66d2a1c577d9519ab9e2938076f48876ae3594fd1a9eb20f2491d45faf48062"}, "downloads": -1, "filename": "umbral-0.1.3a2-py3-none-any.whl", "has_sig": false, "md5_digest": "d20c4d594031d3c9699f266525e89db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 58817, "upload_time": "2019-08-09T21:33:02", "upload_time_iso_8601": "2019-08-09T21:33:02.128690Z", "url": "https://files.pythonhosted.org/packages/62/19/2f26b8f6167a9ef43700d7e4cafac382c1116fb97ad6d64a7a70c1422971/umbral-0.1.3a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f566dc07a75f36d9ca1720208137198", "sha256": "5d17c50d5bdfa78024108931c08ba27bce24ed30d1d7d093d98049084321ca09"}, "downloads": -1, "filename": "umbral-0.1.3a2.tar.gz", "has_sig": false, "md5_digest": "3f566dc07a75f36d9ca1720208137198", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33271, "upload_time": "2019-08-09T21:33:04", "upload_time_iso_8601": "2019-08-09T21:33:04.087924Z", "url": "https://files.pythonhosted.org/packages/2e/66/c12ca7ef0346eada9a1ef483ec24c8fae0ccdf86a00b787eacc54f8341f9/umbral-0.1.3a2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d20c4d594031d3c9699f266525e89db6", "sha256": "a66d2a1c577d9519ab9e2938076f48876ae3594fd1a9eb20f2491d45faf48062"}, "downloads": -1, "filename": "umbral-0.1.3a2-py3-none-any.whl", "has_sig": false, "md5_digest": "d20c4d594031d3c9699f266525e89db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 58817, "upload_time": "2019-08-09T21:33:02", "upload_time_iso_8601": "2019-08-09T21:33:02.128690Z", "url": "https://files.pythonhosted.org/packages/62/19/2f26b8f6167a9ef43700d7e4cafac382c1116fb97ad6d64a7a70c1422971/umbral-0.1.3a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f566dc07a75f36d9ca1720208137198", "sha256": "5d17c50d5bdfa78024108931c08ba27bce24ed30d1d7d093d98049084321ca09"}, "downloads": -1, "filename": "umbral-0.1.3a2.tar.gz", "has_sig": false, "md5_digest": "3f566dc07a75f36d9ca1720208137198", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 33271, "upload_time": "2019-08-09T21:33:04", "upload_time_iso_8601": "2019-08-09T21:33:04.087924Z", "url": "https://files.pythonhosted.org/packages/2e/66/c12ca7ef0346eada9a1ef483ec24c8fae0ccdf86a00b787eacc54f8341f9/umbral-0.1.3a2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:05 2020"}