{"info": {"author": "Esotericizm", "author_email": "esotericizm@cryptoservices.net", "bugtrack_url": null, "classifiers": [], "description": "# Pydigibytetools, Python library for Digibyte signatures and transactions\n\n### Advantages:\n\n* Functions have a simple interface, inputting and outputting in standard formats\n* No classes\n* Many functions can be taken out and used individually\n* Supports binary, hex and base58\n* Transaction deserialization format almost compatible with BitcoinJS\n* Electrum and BIP0032 support\n* Make and publish a transaction all in a single command line instruction\n* Includes non-bitcoin-specific conversion and JSON utilities\n\n### Disadvantages:\n\n* Not a full node, has no idea what blocks are\n* Relies on centralized service (blockchain.info) for blockchain operations, although operations do have backups (eligius, blockr.io)\n\n### Example usage (best way to learn :) ):\n\n    > from digibyte import *\n    > priv = sha256('some big long brainwallet password')\n    > priv\n    '57c617d9b4e1f7af6ec97ca2ff57e94a28279a7eedd4d12a99fa11170e94f5a4'\n    > pub = privtopub(priv)\n    > pub\n    '0420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9'\n    > addr = pubtoaddr(pub)\n    > addr\n    '1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'\n    > h = history(addr)\n    > h\n    [{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\n    > outs = [{'value': 90000, 'address': '16iw1MQ1sy1DtRPYw3ao1bCamoyBJtRB4t'}]\n    > tx = mktx(h,outs)\n    > tx\n    '01000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f7970000000000ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c0100000000ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000'\n    > tx2 = sign(tx,0,priv)\n    > tx2\n    '01000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f797000000008b483045022100dd29d89a28451febb990fb1dafa21245b105140083ced315ebcdea187572b3990220713f2e554f384d29d7abfedf39f0eb92afba0ef46f374e49d43a728a0ff6046e01410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c0100000000ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000'\n    > tx3 = sign(tx2,1,priv)\n    > tx3\n    '01000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f797000000008b483045022100dd29d89a28451febb990fb1dafa21245b105140083ced315ebcdea187572b3990220713f2e554f384d29d7abfedf39f0eb92afba0ef46f374e49d43a728a0ff6046e01410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c010000008c4930460221008bbaaaf172adfefc3a1315dc7312c88645832ff76d52e0029d127e65bbeeabe1022100fdeb89658d503cf2737cedb4049e5070f689c50a9b6c85997d49e0787938f93901410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000'\n    > pushtx(tx3)\n    'Transaction Submitted'\n\nOr using the pybtctool command line interface:\n\n    @vub: pybtctool random_electrum_seed\n    484ccb566edb66c65dd0fd2e4d90ef65\n\n    @vub: pybtctool electrum_privkey 484ccb566edb66c65dd0fd2e4d90ef65 0 0\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n\n    @vub: pybtctool electrum_mpk 484ccb566edb66c65dd0fd2e4d90ef65\n    484e42865b8e9a6ea8262fd1cde666b557393258ed598d842e563ad9e5e6c70a97e387eefdef123c1b8b4eb21fe210c6216ad7cc1e4186fbbba70f0e2c062c25\n\n    @vub: pybtctool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\n    xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n\n    @vub: pybtctool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\n    xprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw \n\n    @vub: pybtctool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\n    xpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF\n\nThe -s option lets you read arguments from the command line\n\n    @vub: pybtctool sha256 'some big long brainwallet password' | pybtctool -s privtoaddr | pybtctool -s history\n    [{'output': u'97f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}, {'output': u'4cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1', 'value': 50000, 'address': u'1CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6'}]\n    @vub: pybtctool random_electrum_seed | pybtctool -s electrum_privkey 0 0\n    593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7\n\nThe -b option lets you read binary data as an argument\n\n    @vub: pybtctool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\n    a665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a\n\nThe -j option lets you read json from the command line (-J to split a json list into multiple arguments)\n\n    @vub: pybtctool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\n    0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000\n\nFun stuff with json:\n\n    @vub: pybtctool history 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\n    625216206372\n\n    @vub: pybtctool history 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\n    6198\n\n### Listing of main commands:\n\n* privkey_to_pubkey    : (privkey) -> pubkey\n* privtopub            : (privkey) -> pubkey\n* pubkey_to_address    : (pubkey) -> address\n* pubtoaddr            : (pubkey) -> address\n* privkey_to_address   : (privkey) -> address\n* privtoaddr           : (privkey) -> address\n\n* add                  : (key1, key2) -> key1 + key2 (works on privkeys or pubkeys)\n* multiply             : (pubkey, privkey) -> returns pubkey * privkey\n\n* ecdsa_sign           : (message, privkey) -> sig\n* ecdsa_verify         : (message, sig, pubkey) -> True/False\n* ecdsa_recover        : (message, sig) -> pubkey\n\n* random_key           : () -> privkey\n* random_electrum_seed : () -> electrum seed\n\n* electrum_stretch     : (seed) -> secret exponent\n* electrum_privkey     : (seed or secret exponent, i, type) -> privkey\n* electrum_mpk         : (seed or secret exponent) -> master public key\n* electrum_pubkey      : (seed or secexp or mpk) -> pubkey\n\n* bip32_master_key     : (seed) -> bip32 master key\n* bip32_ckd            : (private or public bip32 key, i) -> child key\n* bip32_privtopub      : (private bip32 key) -> public bip32 key\n* bip32_extract_key    : (private or public bip32_key) -> privkey or pubkey\n\n* deserialize          : (hex or bin transaction) -> JSON tx\n* serialize            : (JSON tx) -> hex or bin tx\n* mktx                 : (inputs, outputs) -> tx\n* mksend               : (inputs, outputs, change_addr, fee) -> tx\n* sign                 : (tx, i, privkey) -> tx with index i signed with privkey\n* multisign            : (tx, i, script, privkey) -> signature\n* apply_multisignatures: (tx, i, script, sigs) -> tx with index i signed with sigs\n* scriptaddr           : (script) -> P2SH address\n* mk_multisig_script   : (pubkeys, k, n) -> k-of-n multisig script from pubkeys\n* verify_tx_input      : (tx, i, script, sig, pub) -> True/False\n* tx_hash              : (hex or bin tx) -> hash\n\n* history              : (address1, address2, etc) -> outputs to those addresses\n* unspent              : (address1, address2, etc) -> unspent outputs to those addresses\n* fetchtx              : (txash) -> tx if present\n* pushtx               : (hex or bin tx) -> tries to push to blockchain.info/pushtx\n\n* access               : (json list/object, prop) -> desired property of that json object\n* multiaccess          : (json list, prop) -> like access, but mapped across each list element\n* slice                : (json list, start, end) -> given slice of the list\n* count                : (json list) -> number of elements\n* sum                  : (json list) -> sum of all values\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Digitools/pydigibytetools", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "digibyte", "package_url": "https://pypi.org/project/digibyte/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/digibyte/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/Digitools/pydigibytetools"}, "release_url": "https://pypi.org/project/digibyte/1.1.25/", "requires_dist": null, "requires_python": null, "summary": "Python Digibyte Tools", "version": "1.1.25", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Pydigibytetools, Python library for Digibyte signatures and transactions</p>\n<p>### Advantages:</p>\n<ul>\n<li>Functions have a simple interface, inputting and outputting in standard formats</li>\n<li>No classes</li>\n<li>Many functions can be taken out and used individually</li>\n<li>Supports binary, hex and base58</li>\n<li>Transaction deserialization format almost compatible with BitcoinJS</li>\n<li>Electrum and BIP0032 support</li>\n<li>Make and publish a transaction all in a single command line instruction</li>\n<li>Includes non-bitcoin-specific conversion and JSON utilities</li>\n</ul>\n<p>### Disadvantages:</p>\n<ul>\n<li>Not a full node, has no idea what blocks are</li>\n<li>Relies on centralized service (blockchain.info) for blockchain operations, although operations do have backups (eligius, blockr.io)</li>\n</ul>\n<p>### Example usage (best way to learn :) ):</p>\n<blockquote>\n&gt; from digibyte import *\n&gt; priv = sha256(\u2018some big long brainwallet password\u2019)\n&gt; priv\n\u201857c617d9b4e1f7af6ec97ca2ff57e94a28279a7eedd4d12a99fa11170e94f5a4\u2019\n&gt; pub = privtopub(priv)\n&gt; pub\n\u20180420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9\u2019\n&gt; addr = pubtoaddr(pub)\n&gt; addr\n\u20181CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6\u2019\n&gt; h = history(addr)\n&gt; h\n[{\u2018output\u2019: u\u201997f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0\u2019, \u2018value\u2019: 50000, \u2018address\u2019: u\u20191CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6\u2019}, {\u2018output\u2019: u\u20194cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1\u2019, \u2018value\u2019: 50000, \u2018address\u2019: u\u20191CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6\u2019}]\n&gt; outs = [{\u2018value\u2019: 90000, \u2018address\u2019: \u201816iw1MQ1sy1DtRPYw3ao1bCamoyBJtRB4t\u2019}]\n&gt; tx = mktx(h,outs)\n&gt; tx\n\u201801000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f7970000000000ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c0100000000ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000\u2019\n&gt; tx2 = sign(tx,0,priv)\n&gt; tx2\n\u201801000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f797000000008b483045022100dd29d89a28451febb990fb1dafa21245b105140083ced315ebcdea187572b3990220713f2e554f384d29d7abfedf39f0eb92afba0ef46f374e49d43a728a0ff6046e01410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c0100000000ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000\u2019\n&gt; tx3 = sign(tx2,1,priv)\n&gt; tx3\n\u201801000000025e46552eb977f908fa8b3ee9d2943a8fa6d96c3b768a5f250ce485acd8c7f797000000008b483045022100dd29d89a28451febb990fb1dafa21245b105140083ced315ebcdea187572b3990220713f2e554f384d29d7abfedf39f0eb92afba0ef46f374e49d43a728a0ff6046e01410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff71d1abe4352100d4d837ca96c1a16947b5444f0f3e0bc645c430f704bb06c84c010000008c4930460221008bbaaaf172adfefc3a1315dc7312c88645832ff76d52e0029d127e65bbeeabe1022100fdeb89658d503cf2737cedb4049e5070f689c50a9b6c85997d49e0787938f93901410420f34c2786b4bae593e22596631b025f3ff46e200fc1d4b52ef49bbdc2ed00b26c584b7e32523fb01be2294a1f8a5eb0cf71a203cc034ced46ea92a8df16c6e9ffffffff01905f0100000000001976a9143ec6c3ed8dfc3ceabcc1cbdb0c5aef4e2d02873c88ac00000000\u2019\n&gt; pushtx(tx3)\n\u2018Transaction Submitted\u2019</blockquote>\n<p>Or using the pybtctool command line interface:</p>\n<blockquote>\n<p>@vub: pybtctool random_electrum_seed\n484ccb566edb66c65dd0fd2e4d90ef65</p>\n<p>@vub: pybtctool electrum_privkey 484ccb566edb66c65dd0fd2e4d90ef65 0 0\n593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7</p>\n<p>@vub: pybtctool electrum_mpk 484ccb566edb66c65dd0fd2e4d90ef65\n484e42865b8e9a6ea8262fd1cde666b557393258ed598d842e563ad9e5e6c70a97e387eefdef123c1b8b4eb21fe210c6216ad7cc1e4186fbbba70f0e2c062c25</p>\n<p>@vub: pybtctool bip32_master_key 21456t243rhgtucyadh3wgyrcubw3grydfbng\nxprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT</p>\n<p>@vub: pybtctool bip32_ckd xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT 0\nxprv9vfzYrpwo7QHFdtrcvsSCTrBESFPUf1g7NRvayy1QkEfUekpDKLfqvHjgypF5w3nAvnwPjtQUNkyywWNkLbiUS95khfHCzJXFkLEdwRepbw</p>\n<p>@vub: pybtctool bip32_privtopub xprv9s21ZrQH143K2napkeoHT48gWmoJa89KCQj4nqLfdGybyWHP9Z8jvCGzuEDv4ihCyoed7RFPNbc9NxoSF7cAvH9AaNSvepUaeqbSpJZ4rbT\nxpub661MyMwAqRbcFGfHrgLHpC5R4odnyasAZdefbDkHBcWarJcXh6SzTzbUkWuhnP142ZFdKdAJSuTSaiGDYjvm7bCLmA8DZqksYjJbYmcgrYF</p>\n</blockquote>\n<p>The -s option lets you read arguments from the command line</p>\n<blockquote>\n@vub: pybtctool sha256 \u2018some big long brainwallet password\u2019 | pybtctool -s privtoaddr | pybtctool -s history\n[{\u2018output\u2019: u\u201997f7c7d8ac85e40c255f8a763b6cd9a68f3a94d2e93e8bfa08f977b92e55465e:0\u2019, \u2018value\u2019: 50000, \u2018address\u2019: u\u20191CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6\u2019}, {\u2018output\u2019: u\u20194cc806bb04f730c445c60b3e0f4f44b54769a1c196ca37d8d4002135e4abd171:1\u2019, \u2018value\u2019: 50000, \u2018address\u2019: u\u20191CQLd3bhw4EzaURHbKCwM5YZbUQfA4ReY6\u2019}]\n@vub: pybtctool random_electrum_seed | pybtctool -s electrum_privkey 0 0\n593240c2205e7b7b5d7c13393b7c9553497854b75c7470b76aeca50cd4a894d7</blockquote>\n<p>The -b option lets you read binary data as an argument</p>\n<blockquote>\n@vub: pybtctool sha256 123 | pybtctool -s changebase 16 256 | pybtctool -b changebase 256 16\na665a45920422f9d417e4867efdc4fb8a04a1f3fff1fa07e998e86f7f7a27ae30a</blockquote>\n<p>The -j option lets you read json from the command line (-J to split a json list into multiple arguments)</p>\n<blockquote>\n@vub: pybtctool unspent 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq | pybtctool -j select 200000001 | pybtctool -j mksend 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P:20000 1FxkfJQLJTXpW6QmxGT6oF43ZH959ns8Cq 1000 | pybtctool -s signall 805cd74ca322633372b9bfb857f3be41db0b8de43a3c44353b238c0acff9d523\n0100000003d5001aae8358ae98cb02c1b6f9859dc1ac3dbc1e9cc88632afeb7b7e3c510a49000000008b4830450221009e03bb6122437767e2ca785535824f4ed13d2ebbb9fa4f9becc6d6f4e1e217dc022064577353c08d8d974250143d920d3b963b463e43bbb90f3371060645c49266b90141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff1529d655dff6a0f6c9815ee835312fb3ca4df622fde21b6b9097666e9284087d010000008a473044022035dd67d18b575ebd339d05ca6ffa1d27d7549bd993aeaf430985795459fc139402201aaa162cc50181cee493870c9479b1148243a33923cb77be44a73ca554a4e5d60141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff23d5f9cf0a8c233b35443c3ae48d0bdb41bef357b8bfb972336322a34cd75c80010000008b483045022014daa5c5bbe9b3e5f2539a5cd8e22ce55bc84788f946c5b3643ecac85b4591a9022100a4062074a1df3fa0aea5ef67368d0b1f0eaac520bee6e417c682d83cd04330450141048ef80f6bd6b073407a69299c2ba89de48adb59bb9689a5ab040befbbebcfbb15d01b006a6b825121a0d2c546c277acb60f0bd3203bd501b8d67c7dba91f27f47ffffffff02204e0000000000001976a914946cb2e08075bcbaf157e47bcb67eb2b2339d24288ac5b3c4411000000001976a914a41d15ae657ad3bfd0846771a34d7584c37d54a288ac00000000</blockquote>\n<p>Fun stuff with json:</p>\n<blockquote>\n<p>@vub: pybtctool history 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j multiaccess value | pybtctool -j sum\n625216206372</p>\n<p>@vub: pybtctool history 1EXoDusjGwvnjZUyKkxZ4UHEf77z6A5S4P | pybtctool -j count\n6198</p>\n</blockquote>\n<p>### Listing of main commands:</p>\n<ul>\n<li>privkey_to_pubkey    : (privkey) -&gt; pubkey</li>\n<li>privtopub            : (privkey) -&gt; pubkey</li>\n<li>pubkey_to_address    : (pubkey) -&gt; address</li>\n<li>pubtoaddr            : (pubkey) -&gt; address</li>\n<li>privkey_to_address   : (privkey) -&gt; address</li>\n<li>privtoaddr           : (privkey) -&gt; address</li>\n<li>add                  : (key1, key2) -&gt; key1 + key2 (works on privkeys or pubkeys)</li>\n<li>multiply             : (pubkey, privkey) -&gt; returns pubkey * privkey</li>\n<li>ecdsa_sign           : (message, privkey) -&gt; sig</li>\n<li>ecdsa_verify         : (message, sig, pubkey) -&gt; True/False</li>\n<li>ecdsa_recover        : (message, sig) -&gt; pubkey</li>\n<li>random_key           : () -&gt; privkey</li>\n<li>random_electrum_seed : () -&gt; electrum seed</li>\n<li>electrum_stretch     : (seed) -&gt; secret exponent</li>\n<li>electrum_privkey     : (seed or secret exponent, i, type) -&gt; privkey</li>\n<li>electrum_mpk         : (seed or secret exponent) -&gt; master public key</li>\n<li>electrum_pubkey      : (seed or secexp or mpk) -&gt; pubkey</li>\n<li>bip32_master_key     : (seed) -&gt; bip32 master key</li>\n<li>bip32_ckd            : (private or public bip32 key, i) -&gt; child key</li>\n<li>bip32_privtopub      : (private bip32 key) -&gt; public bip32 key</li>\n<li>bip32_extract_key    : (private or public bip32_key) -&gt; privkey or pubkey</li>\n<li>deserialize          : (hex or bin transaction) -&gt; JSON tx</li>\n<li>serialize            : (JSON tx) -&gt; hex or bin tx</li>\n<li>mktx                 : (inputs, outputs) -&gt; tx</li>\n<li>mksend               : (inputs, outputs, change_addr, fee) -&gt; tx</li>\n<li>sign                 : (tx, i, privkey) -&gt; tx with index i signed with privkey</li>\n<li>multisign            : (tx, i, script, privkey) -&gt; signature</li>\n<li>apply_multisignatures: (tx, i, script, sigs) -&gt; tx with index i signed with sigs</li>\n<li>scriptaddr           : (script) -&gt; P2SH address</li>\n<li>mk_multisig_script   : (pubkeys, k, n) -&gt; k-of-n multisig script from pubkeys</li>\n<li>verify_tx_input      : (tx, i, script, sig, pub) -&gt; True/False</li>\n<li>tx_hash              : (hex or bin tx) -&gt; hash</li>\n<li>history              : (address1, address2, etc) -&gt; outputs to those addresses</li>\n<li>unspent              : (address1, address2, etc) -&gt; unspent outputs to those addresses</li>\n<li>fetchtx              : (txash) -&gt; tx if present</li>\n<li>pushtx               : (hex or bin tx) -&gt; tries to push to blockchain.info/pushtx</li>\n<li>access               : (json list/object, prop) -&gt; desired property of that json object</li>\n<li>multiaccess          : (json list, prop) -&gt; like access, but mapped across each list element</li>\n<li>slice                : (json list, start, end) -&gt; given slice of the list</li>\n<li>count                : (json list) -&gt; number of elements</li>\n<li>sum                  : (json list) -&gt; sum of all values</li>\n</ul>\n\n          </div>"}, "last_serial": 1376440, "releases": {"1.1.25": [{"comment_text": "", "digests": {"md5": "aace373908f146b39791579bc1a5f6bb", "sha256": "bdd2a9cfed1efda3bd305a8526f4d4839411172a07556d96cadce73a9e61f071"}, "downloads": -1, "filename": "digibyte-1.1.25.tar.gz", "has_sig": false, "md5_digest": "aace373908f146b39791579bc1a5f6bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24042, "upload_time": "2015-01-09T05:16:09", "upload_time_iso_8601": "2015-01-09T05:16:09.769100Z", "url": "https://files.pythonhosted.org/packages/eb/03/f74a9eefdc91c5efb61a25b3d4208fbc71ebbe3150a773c895954e82c0d6/digibyte-1.1.25.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aace373908f146b39791579bc1a5f6bb", "sha256": "bdd2a9cfed1efda3bd305a8526f4d4839411172a07556d96cadce73a9e61f071"}, "downloads": -1, "filename": "digibyte-1.1.25.tar.gz", "has_sig": false, "md5_digest": "aace373908f146b39791579bc1a5f6bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24042, "upload_time": "2015-01-09T05:16:09", "upload_time_iso_8601": "2015-01-09T05:16:09.769100Z", "url": "https://files.pythonhosted.org/packages/eb/03/f74a9eefdc91c5efb61a25b3d4208fbc71ebbe3150a773c895954e82c0d6/digibyte-1.1.25.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:26 2020"}