{"info": {"author": "zencore", "author_email": "dobetter@zencore.cn", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# django-dynamic-resource-admin\n\nAdd dynamic css & js resources to django's admin site.\n\n## Install\n\n```shell\npip install django-dynamic-resource-admin\n```\n\n## Usage\n\n**Note:**\n\n1. We use template override mechanism, so you MUST add app name django_dynamic_resource_admin into INSTALLED_APPS.\n1. The parameter request pass to get_css&get_js is the request of this view.\n1. The parameters **kwargs pass to get_css&get_js are the paramters of admin view prameters.\n1. Every extra js part is wrappered with closure function, so that they will be NO local variables conflict. If you want to add a global variable, name it like: `window.xxx = 123;`.\n\n    ```javascript\n    (function(){\n        ...your js code...\n    })();\n    ```\n**pro/settings.py**\n\n```python\nINSTALLED_APPS = [\n    ...\n    'django_dynamic_resource_admin',\n    ...\n]\n```\n\n**app/admin.py**\n\n```python\nfrom django.contrib import admin\nfrom django_dynamic_resource_admin.admin import DjangoDynamicResourceAdmin\nfrom .models import Book\n\n\nclass BookAdmin(DjangoDynamicResourceAdmin, admin.ModelAdmin):\n    def get_css(self, request, **kwargs):\n        csses = super().get_css(request)\n        csses += [\n\"\"\"\nbody{\n    background-color: red;\n}\n\"\"\",\n        ]\n        return csses\n\nadmin.site.register(Book, BookAdmin)\n```\n## How to add your custom css&js?\n\n- Override get_css to add extra css.\n- Override get_js to add extra js.\n\n```python\ndef get_css(self, request, **kwargs):\n    extra_css = super().get_css(request, **kwargs)\n    extra_css += [\n        \"\"\"body{xxx}\"\"\",\n        \"\"\".title{xxx}\"\"\"\n    ]\n    return extra_css\n\ndef get_js(self, request, **kwargs):\n    extra_js = super().get_js(request, **kwargs):\n    extra_js += [\n        \"\"\"window.msg=\"hello world\";\"\"\",\n        \"\"\"...\"\"\",\n    ]\n    return extra_js\n```\n\n## Release\n\n### v0.1.0 2020/03/13\n\n- First realse.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "django admin extentions,django dynamic resource admin", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-dynamic-resource-admin", "package_url": "https://pypi.org/project/django-dynamic-resource-admin/", "platform": "", "project_url": "https://pypi.org/project/django-dynamic-resource-admin/", "project_urls": null, "release_url": "https://pypi.org/project/django-dynamic-resource-admin/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Add dynamic css & js resources to django's admin site.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-dynamic-resource-admin</h1>\n<p>Add dynamic css &amp; js resources to django's admin site.</p>\n<h2>Install</h2>\n<pre>pip install django-dynamic-resource-admin\n</pre>\n<h2>Usage</h2>\n<p><strong>Note:</strong></p>\n<ol>\n<li>\n<p>We use template override mechanism, so you MUST add app name django_dynamic_resource_admin into INSTALLED_APPS.</p>\n</li>\n<li>\n<p>The parameter request pass to get_css&amp;get_js is the request of this view.</p>\n</li>\n<li>\n<p>The parameters **kwargs pass to get_css&amp;get_js are the paramters of admin view prameters.</p>\n</li>\n<li>\n<p>Every extra js part is wrappered with closure function, so that they will be NO local variables conflict. If you want to add a global variable, name it like: <code>window.xxx = 123;</code>.</p>\n<pre><span class=\"p\">(</span><span class=\"kd\">function</span><span class=\"p\">(){</span>\n    <span class=\"p\">...</span><span class=\"nx\">your</span> <span class=\"nx\">js</span> <span class=\"nx\">code</span><span class=\"p\">...</span>\n<span class=\"p\">})();</span>\n</pre>\n</li>\n</ol>\n<p><strong>pro/settings.py</strong></p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'django_dynamic_resource_admin'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<p><strong>app/admin.py</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_dynamic_resource_admin.admin</span> <span class=\"kn\">import</span> <span class=\"n\">DjangoDynamicResourceAdmin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">.models</span> <span class=\"kn\">import</span> <span class=\"n\">Book</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">BookAdmin</span><span class=\"p\">(</span><span class=\"n\">DjangoDynamicResourceAdmin</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_css</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">csses</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_css</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">)</span>\n        <span class=\"n\">csses</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">body{</span>\n<span class=\"sd\">    background-color: red;</span>\n<span class=\"sd\">}</span>\n<span class=\"sd\">\"\"\"</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">csses</span>\n\n<span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Book</span><span class=\"p\">,</span> <span class=\"n\">BookAdmin</span><span class=\"p\">)</span>\n</pre>\n<h2>How to add your custom css&amp;js?</h2>\n<ul>\n<li>Override get_css to add extra css.</li>\n<li>Override get_js to add extra js.</li>\n</ul>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_css</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">extra_css</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_css</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"n\">extra_css</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"sd\">\"\"\"body{xxx}\"\"\"</span><span class=\"p\">,</span>\n        <span class=\"sd\">\"\"\".title{xxx}\"\"\"</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">extra_css</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_js</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">extra_js</span> <span class=\"o\">=</span> <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_js</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"n\">extra_js</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n        <span class=\"sd\">\"\"\"window.msg=\"hello world\";\"\"\"</span><span class=\"p\">,</span>\n        <span class=\"sd\">\"\"\"...\"\"\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n    <span class=\"k\">return</span> <span class=\"n\">extra_js</span>\n</pre>\n<h2>Release</h2>\n<h3>v0.1.0 2020/03/13</h3>\n<ul>\n<li>First realse.</li>\n</ul>\n\n          </div>"}, "last_serial": 6806022, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "449c5b8dea12b835f3d85167d5efc493", "sha256": "af4a2d029a602adb33ff2148a07e1880c9b61c70dd654e5ddd2a762cda2db283"}, "downloads": -1, "filename": "django-dynamic-resource-admin-0.1.0.tar.gz", "has_sig": false, "md5_digest": "449c5b8dea12b835f3d85167d5efc493", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4257, "upload_time": "2020-03-13T13:31:37", "upload_time_iso_8601": "2020-03-13T13:31:37.985294Z", "url": "https://files.pythonhosted.org/packages/65/2e/c551b57e96ad7bbc65e2d07139428d90ba4fa6717a0a7051eae9e3ae1228/django-dynamic-resource-admin-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "449c5b8dea12b835f3d85167d5efc493", "sha256": "af4a2d029a602adb33ff2148a07e1880c9b61c70dd654e5ddd2a762cda2db283"}, "downloads": -1, "filename": "django-dynamic-resource-admin-0.1.0.tar.gz", "has_sig": false, "md5_digest": "449c5b8dea12b835f3d85167d5efc493", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4257, "upload_time": "2020-03-13T13:31:37", "upload_time_iso_8601": "2020-03-13T13:31:37.985294Z", "url": "https://files.pythonhosted.org/packages/65/2e/c551b57e96ad7bbc65e2d07139428d90ba4fa6717a0a7051eae9e3ae1228/django-dynamic-resource-admin-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:28 2020"}