{"info": {"author": "Erwin Janssen", "author_email": "erwinjanssen@outlook.com", "bugtrack_url": null, "classifiers": [], "description": "# TLSprint\n\nFingerprint TLS implementations using state machines inferred by\n[StateLearner](https://github.com/jderuiter/statelearner/). StateLearner can\nlearn state machines for (in this case TLS) implementations using a black-box\napproach. Different implementations can have a different state machine, which\nmakes it possible to differentiate them. By combining these state machines into\na single tree, and then probing a live implementation, `tlsprint` makes it\npossible to fingerprint the TLS implementation running on the target.\n\n## Installation\n\nInstall the latest release from PyPi:\n\n```shell\npip install tlsprint\n```\n\n## Learn\n\n**Note**: This step is optional, a `model.p` is included in the distribution,\nwhich contains a model created using 27 unique state machines, representing 283\ndifferent TLS implementations. For the full list of implementations, check the\n`models` directory in the repository.\n\nAfter state machines are inferred using StateLearner, run\n\n```shell\ntlsprint learn <statelearner_output_dir> model.p\n```\n\nto merge all models together into a single\ntree. This tree is returned as a pickled `networkx` graph, and is required for\nthe `identify` step.\n\n## Identify\n\nWhen using the default model, identifying the TLS implementation on a target\ncan be done be running\n\n```shell\ntlsprint identify <target>\n```\n\nThis defaults to port 443, a custom port can be specified by adding\n`--target-port <port>`.\n\nThe command returns a list of possible implementations. All these\nimplementations share the same model, meaning `tlsprint` cannot further specify\nthe exact implementation.\n\nPassing `--graph-dir <output>` to the `identify` command, will write DOT files\nfor all intermediate versions of the model tree. This can be insightful to\nunderstand what `tlsprint` is doing.\n\nIf you learned a custom model using the `learn` command, you can override the\ndefault model using `--model <filename>`.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ErwinJanssen/tlsprint", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "tlsprint", "package_url": "https://pypi.org/project/tlsprint/", "platform": "", "project_url": "https://pypi.org/project/tlsprint/", "project_urls": {"Homepage": "https://github.com/ErwinJanssen/tlsprint"}, "release_url": "https://pypi.org/project/tlsprint/0.1.0/", "requires_dist": ["click", "networkx", "pydot"], "requires_python": "", "summary": "Fingerprint TLS implementations", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># TLSprint</p>\n<p>Fingerprint TLS implementations using state machines inferred by\n[StateLearner](<a href=\"https://github.com/jderuiter/statelearner/\" rel=\"nofollow\">https://github.com/jderuiter/statelearner/</a>). StateLearner can\nlearn state machines for (in this case TLS) implementations using a black-box\napproach. Different implementations can have a different state machine, which\nmakes it possible to differentiate them. By combining these state machines into\na single tree, and then probing a live implementation, <cite>tlsprint</cite> makes it\npossible to fingerprint the TLS implementation running on the target.</p>\n<p>## Installation</p>\n<p>Install the latest release from PyPi:</p>\n<p><tt>`shell\npip install tlsprint\n`</tt></p>\n<p>## Learn</p>\n<p><strong>Note</strong>: This step is optional, a <cite>model.p</cite> is included in the distribution,\nwhich contains a model created using 27 unique state machines, representing 283\ndifferent TLS implementations. For the full list of implementations, check the\n<cite>models</cite> directory in the repository.</p>\n<p>After state machines are inferred using StateLearner, run</p>\n<p><tt>`shell\ntlsprint learn &lt;statelearner_output_dir&gt; model.p\n`</tt></p>\n<p>to merge all models together into a single\ntree. This tree is returned as a pickled <cite>networkx</cite> graph, and is required for\nthe <cite>identify</cite> step.</p>\n<p>## Identify</p>\n<p>When using the default model, identifying the TLS implementation on a target\ncan be done be running</p>\n<p><tt>`shell\ntlsprint identify &lt;target&gt;\n`</tt></p>\n<p>This defaults to port 443, a custom port can be specified by adding\n<cite>\u2013target-port &lt;port&gt;</cite>.</p>\n<p>The command returns a list of possible implementations. All these\nimplementations share the same model, meaning <cite>tlsprint</cite> cannot further specify\nthe exact implementation.</p>\n<p>Passing <cite>\u2013graph-dir &lt;output&gt;</cite> to the <cite>identify</cite> command, will write DOT files\nfor all intermediate versions of the model tree. This can be insightful to\nunderstand what <cite>tlsprint</cite> is doing.</p>\n<p>If you learned a custom model using the <cite>learn</cite> command, you can override the\ndefault model using <cite>\u2013model &lt;filename&gt;</cite>.</p>\n\n          </div>"}, "last_serial": 4674616, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1cc1cd77fe237546da93ef3d799210f8", "sha256": "0840f109d03ca94b53b67362a8f3222e2d54d2d4d3eace552dd88c738321cebe"}, "downloads": -1, "filename": "tlsprint-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1cc1cd77fe237546da93ef3d799210f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11823036, "upload_time": "2019-01-08T23:13:52", "upload_time_iso_8601": "2019-01-08T23:13:52.896244Z", "url": "https://files.pythonhosted.org/packages/b0/39/0d25cc88718c4cbaf6b00fc074e8d607241b30bafe72c9b025c69d0e6a5d/tlsprint-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae8401431ac4d22725e0260e03204e54", "sha256": "24840c7dbb0de04008202783259a16d4c76d5ded01b6bb576a17ba9dc56051ba"}, "downloads": -1, "filename": "tlsprint-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae8401431ac4d22725e0260e03204e54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11834010, "upload_time": "2019-01-08T23:14:06", "upload_time_iso_8601": "2019-01-08T23:14:06.362095Z", "url": "https://files.pythonhosted.org/packages/3c/20/42b2e03163f3c7ea0ccd895e74f745859242a5f73f9a5745fd8752d81565/tlsprint-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cc1cd77fe237546da93ef3d799210f8", "sha256": "0840f109d03ca94b53b67362a8f3222e2d54d2d4d3eace552dd88c738321cebe"}, "downloads": -1, "filename": "tlsprint-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1cc1cd77fe237546da93ef3d799210f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11823036, "upload_time": "2019-01-08T23:13:52", "upload_time_iso_8601": "2019-01-08T23:13:52.896244Z", "url": "https://files.pythonhosted.org/packages/b0/39/0d25cc88718c4cbaf6b00fc074e8d607241b30bafe72c9b025c69d0e6a5d/tlsprint-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae8401431ac4d22725e0260e03204e54", "sha256": "24840c7dbb0de04008202783259a16d4c76d5ded01b6bb576a17ba9dc56051ba"}, "downloads": -1, "filename": "tlsprint-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae8401431ac4d22725e0260e03204e54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11834010, "upload_time": "2019-01-08T23:14:06", "upload_time_iso_8601": "2019-01-08T23:14:06.362095Z", "url": "https://files.pythonhosted.org/packages/3c/20/42b2e03163f3c7ea0ccd895e74f745859242a5f73f9a5745fd8752d81565/tlsprint-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:19 2020"}