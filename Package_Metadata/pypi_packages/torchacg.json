{"info": {"author": "Zhi Zhang", "author_email": "850734033@qq.com", "bugtrack_url": null, "classifiers": [], "description": "TorchACG\n==========\n\nTorchACG is a Pytorch based framework for designing and developing GAN based ACG applications. This framework has been designed to provide\nbuilding blocks for popular GANs and also to allow customization for\ncutting edge research.\n\nSystem requirements\n~~~~~~~~~~~~~~~~~~~\n\nTorchACG should work on\n\n-  all Linux distributions no earlier than Ubuntu 16.04\n-  macOS X\n-  Windows 10\n\nInstallation\n~~~~~~~~~~~~\n\nUsing pip (for stable release):\n\n::\n\n    pip install torchacg\n\nUsing pip (for latest master):\n\n::\n\n    conda install -c tczhangzhi torchacg\n\nFrom source:\n\n::\n\n    git clone https://github.com/tczhangzhi/torchacg.git\n    cd torchacg\n    python setup.py install\n\nGetting Started\n~~~~~~~~~~~~~~~\n\nThe network architectures of popular GANs and cutting edge GAN based\nNeural Style Transfer methods are out of the box:\n\n::\n\n    from torchacg.model.acgan import Generator, Discriminator\n\n    g_model = Generator()\n    d_model = Discriminator()\n\nThe diverse loss functions and complicated adversarial training methods\nare packed in different learners. It is convenient for users to\nreproduce the state-of-the-art training methods quickly without knowing\nimplementation details:\n\n::\n\n    from torchacg.trainer.acgan import ACGANTrainer\n\n    trainer = ACGANTrainer(g_model, d_model, dataloader, device=device)\n    trainer.start(epoch=10)\n\nTest\n~~~~\n\nSetup environments:\n\n::\n\n    export PYTHONPATH=./\n\nRun the test case:\n\n::\n\n    python tests/test_acgan.py\n\nDocumentation\n~~~~~~~~~~~~~\n\nComing soon.\n\nLicense\n~~~~~~~\n\nPyTorch is `MIT <http://opensource.org/licenses/MIT>`__-style licensed,\nas found in the LICENSE file.\n\nCopyright (c) 2020-present, Zhang Zhi\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tczhangzhi/torchacg", "keywords": "pytorch", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "torchacg", "package_url": "https://pypi.org/project/torchacg/", "platform": "", "project_url": "https://pypi.org/project/torchacg/", "project_urls": {"Homepage": "https://github.com/tczhangzhi/torchacg"}, "release_url": "https://pypi.org/project/torchacg/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "TorchACG is a Pytorch based framework for GAN based ACG applications.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>TorchACG is a Pytorch based framework for designing and developing GAN based ACG applications. This framework has been designed to provide\nbuilding blocks for popular GANs and also to allow customization for\ncutting edge research.</p>\n<div id=\"system-requirements\">\n<h2>System requirements</h2>\n<p>TorchACG should work on</p>\n<ul>\n<li>all Linux distributions no earlier than Ubuntu 16.04</li>\n<li>macOS X</li>\n<li>Windows 10</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Using pip (for stable release):</p>\n<pre>pip install torchacg\n</pre>\n<p>Using pip (for latest master):</p>\n<pre>conda install -c tczhangzhi torchacg\n</pre>\n<p>From source:</p>\n<pre>git clone https://github.com/tczhangzhi/torchacg.git\ncd torchacg\npython setup.py install\n</pre>\n</div>\n<div id=\"getting-started\">\n<h2>Getting Started</h2>\n<p>The network architectures of popular GANs and cutting edge GAN based\nNeural Style Transfer methods are out of the box:</p>\n<pre>from torchacg.model.acgan import Generator, Discriminator\n\ng_model = Generator()\nd_model = Discriminator()\n</pre>\n<p>The diverse loss functions and complicated adversarial training methods\nare packed in different learners. It is convenient for users to\nreproduce the state-of-the-art training methods quickly without knowing\nimplementation details:</p>\n<pre>from torchacg.trainer.acgan import ACGANTrainer\n\ntrainer = ACGANTrainer(g_model, d_model, dataloader, device=device)\ntrainer.start(epoch=10)\n</pre>\n</div>\n<div id=\"test\">\n<h2>Test</h2>\n<p>Setup environments:</p>\n<pre>export PYTHONPATH=./\n</pre>\n<p>Run the test case:</p>\n<pre>python tests/test_acgan.py\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Coming soon.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>PyTorch is <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a>-style licensed,\nas found in the LICENSE file.</p>\n<p>Copyright (c) 2020-present, Zhang Zhi</p>\n</div>\n\n          </div>"}, "last_serial": 6386151, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c9bd7e495b46b809075ae9c00f2060c4", "sha256": "79e4bca50d1c90d3380dfabecee9df54e486fba3df3b4c0e3176f75db7ce5b2f"}, "downloads": -1, "filename": "torchacg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c9bd7e495b46b809075ae9c00f2060c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9030, "upload_time": "2020-01-02T14:21:00", "upload_time_iso_8601": "2020-01-02T14:21:00.362778Z", "url": "https://files.pythonhosted.org/packages/73/14/f96d6e085a16d882927e830708127f5da24af9d8c2c01b0d0418e755c7f7/torchacg-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9bd7e495b46b809075ae9c00f2060c4", "sha256": "79e4bca50d1c90d3380dfabecee9df54e486fba3df3b4c0e3176f75db7ce5b2f"}, "downloads": -1, "filename": "torchacg-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c9bd7e495b46b809075ae9c00f2060c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9030, "upload_time": "2020-01-02T14:21:00", "upload_time_iso_8601": "2020-01-02T14:21:00.362778Z", "url": "https://files.pythonhosted.org/packages/73/14/f96d6e085a16d882927e830708127f5da24af9d8c2c01b0d0418e755c7f7/torchacg-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:50:39 2020"}