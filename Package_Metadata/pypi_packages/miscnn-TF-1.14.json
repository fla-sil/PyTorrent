{"info": {"author": "Dominik M\u00fcller", "author_email": "dominik.mueller@informatik.uni-augsburg.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Healthcare Industry", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "# MIScnn: Medical Image Segmentation with Convolutional Neural Networks\n\nThe open-source Python library MIScnn is an intuitive API allowing fast setup of medical image segmentation pipelines with state-of-the-art convolutional neural network and deep learning models in just a few lines of code.\n\nMIScnn provides several core features:\n- 2D/3D medical image segmentation for binary and multi-class problems\n- Data I/O, preprocessing and data augmentation for biomedical images\n- Patch-wise and full image analysis\n- State-of-the-art deep learning model and metric library\n- Intuitive and fast model utilization (training, prediction)\n- Multiple automatic evaluation techniques (e.g. cross-validation)\n- Custom model, data I/O, pre-/postprocessing and metric support\n- Based on Keras with Tensorflow as backend\n\n![MIScnn workflow](https://raw.githubusercontent.com/frankkramer-lab/MIScnn/master/docs/MIScnn.pipeline.png)\n\n## Getting started: 30 seconds to a MIS pipeline\n\nCreate a Data I/O instance with an already provided interface for your specific data\nformat.\n\n```python\nfrom miscnn.data_loading.data_io import Data_IO\nfrom miscnn.data_loading.interfaces.nifti_io import NIFTI_interface\n\n# Create an interface for kidney tumor CT scans in NIfTI format\ninterface = NIFTI_interface(pattern=\"case_0000[0-2]\", channels=1, classes=3)\n# Initialize data path and create the Data I/O instance\ndata_path = \"/home/mudomini/projects/KITS_challenge2019/kits19/data.original/\"\ndata_io = Data_IO(interface, data_path)\n```\n\nCreate a Preprocessor instance to configure how to preprocess the data into batches.\n\n```python\nfrom miscnn.processing.preprocessor import Preprocessor\n\npp = Preprocessor(data_io, batch_size=4, analysis=\"patchwise-crop\", patch_shape=(128,128,128))\n```\n\nCreate a deep learning neural network model with a standard U-Net architecture.\n\n```python\nfrom miscnn.neural_network.model import Neural_Network\nfrom miscnn.neural_network.architecture.unet.standard import Architecture\n\nunet_standard = Architecture()\nmodel = Neural_Network(preprocessor=pp, architecture=unet_standard)\n```\nCongratulations to your ready-to-use Medical Image Segmentation pipeline including data I/O, preprocessing and data augmentation with default setting.\n\nLet's run a model training on our data set. Afterwards, predict the segmentation of a sample using the fitted model.\n\n```python\n# Training the model with all except one sample for 500 epochs\nsample_list = data_io.get_indiceslist()\nmodel.train(sample_list[0:-1], epochs=500)\n\n# Predict the one remaining sample\npred = model.predict([sample_list[-1]], direct_output=True)\n```\n\nNow, let's run a 5-fold Cross-Validation with our model, create automatically evaluation figures and save the results into the directory \"evaluation_results\".\n\n```python\nfrom miscnn.evaluation.cross_validation import cross_validation\n\ncross_validation(sample_list, model, k_fold=5, epochs=100,\n                 evaluation_path=\"evaluation_results\", draw_figures=True)\n```\n\n## Installation\n\nThere are two ways to install MIScnn:\n\n- **Install MIScnn from PyPI (recommended):**\n\nNote: These installation steps assume that you are on a Linux or Mac environment. If you are on Windows or in a virtual environment without root, you will need to remove sudo to run the commands below.\n\n```sh\nsudo pip install miscnn\n```\n\n- **Alternatively: install MIScnn from the GitHub source:**\n\nFirst, clone MIScnn using git:\n\n```sh\ngit clone https://github.com/frankkramer-lab/MIScnn.git\n```\n\nThen, cd to the MIScnn folder and run the install command:\n\n```sh\ncd MIScnn\nsudo python setup.py install\n```\n\n## Author\n\nDominik M\u00fcller\\\nEmail: dominik.mueller@informatik.uni-augsburg.de\\\nIT-Infrastructure for Translational Medical Research\\\nUniversity Augsburg\\\nBavaria, Germany\n\n## How to cite / More information\n\nDominik M\u00fcller and Frank Kramer. (2019)\\\nMIScnn: A Framework for Medical Image Segmentation with Convolutional Neural Networks and Deep Learning.\n\n## License\n\nThis project is licensed under the GNU GENERAL PUBLIC LICENSE Version 3.\\\nSee the LICENSE.md file for license rights and limitations.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/frankkramer-lab/MIScnn", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "miscnn-TF-1.14", "package_url": "https://pypi.org/project/miscnn-TF-1.14/", "platform": "", "project_url": "https://pypi.org/project/miscnn-TF-1.14/", "project_urls": {"Homepage": "https://github.com/frankkramer-lab/MIScnn"}, "release_url": "https://pypi.org/project/miscnn-TF-1.14/0.32/", "requires_dist": ["tensorflow-gpu (==1.14.0)", "numpy (>=1.18.2)", "nibabel (>=2.4.0)", "matplotlib (>=3.0.3)", "batchgenerators (>=0.19.3)"], "requires_python": "", "summary": "Framework for Medical Image Segmentation with Convolutional Neural Networks and Deep Learning", "version": "0.32", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MIScnn: Medical Image Segmentation with Convolutional Neural Networks</h1>\n<p>The open-source Python library MIScnn is an intuitive API allowing fast setup of medical image segmentation pipelines with state-of-the-art convolutional neural network and deep learning models in just a few lines of code.</p>\n<p>MIScnn provides several core features:</p>\n<ul>\n<li>2D/3D medical image segmentation for binary and multi-class problems</li>\n<li>Data I/O, preprocessing and data augmentation for biomedical images</li>\n<li>Patch-wise and full image analysis</li>\n<li>State-of-the-art deep learning model and metric library</li>\n<li>Intuitive and fast model utilization (training, prediction)</li>\n<li>Multiple automatic evaluation techniques (e.g. cross-validation)</li>\n<li>Custom model, data I/O, pre-/postprocessing and metric support</li>\n<li>Based on Keras with Tensorflow as backend</li>\n</ul>\n<p><img alt=\"MIScnn workflow\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d3f62cea0dded540e306ac06866c8dcc2f9663bc/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f6672616e6b6b72616d65722d6c61622f4d4953636e6e2f6d61737465722f646f63732f4d4953636e6e2e706970656c696e652e706e67\"></p>\n<h2>Getting started: 30 seconds to a MIS pipeline</h2>\n<p>Create a Data I/O instance with an already provided interface for your specific data\nformat.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">miscnn.data_loading.data_io</span> <span class=\"kn\">import</span> <span class=\"n\">Data_IO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">miscnn.data_loading.interfaces.nifti_io</span> <span class=\"kn\">import</span> <span class=\"n\">NIFTI_interface</span>\n\n<span class=\"c1\"># Create an interface for kidney tumor CT scans in NIfTI format</span>\n<span class=\"n\">interface</span> <span class=\"o\">=</span> <span class=\"n\">NIFTI_interface</span><span class=\"p\">(</span><span class=\"n\">pattern</span><span class=\"o\">=</span><span class=\"s2\">\"case_0000[0-2]\"</span><span class=\"p\">,</span> <span class=\"n\">channels</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\"># Initialize data path and create the Data I/O instance</span>\n<span class=\"n\">data_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"/home/mudomini/projects/KITS_challenge2019/kits19/data.original/\"</span>\n<span class=\"n\">data_io</span> <span class=\"o\">=</span> <span class=\"n\">Data_IO</span><span class=\"p\">(</span><span class=\"n\">interface</span><span class=\"p\">,</span> <span class=\"n\">data_path</span><span class=\"p\">)</span>\n</pre>\n<p>Create a Preprocessor instance to configure how to preprocess the data into batches.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">miscnn.processing.preprocessor</span> <span class=\"kn\">import</span> <span class=\"n\">Preprocessor</span>\n\n<span class=\"n\">pp</span> <span class=\"o\">=</span> <span class=\"n\">Preprocessor</span><span class=\"p\">(</span><span class=\"n\">data_io</span><span class=\"p\">,</span> <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">analysis</span><span class=\"o\">=</span><span class=\"s2\">\"patchwise-crop\"</span><span class=\"p\">,</span> <span class=\"n\">patch_shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"mi\">128</span><span class=\"p\">,</span><span class=\"mi\">128</span><span class=\"p\">))</span>\n</pre>\n<p>Create a deep learning neural network model with a standard U-Net architecture.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">miscnn.neural_network.model</span> <span class=\"kn\">import</span> <span class=\"n\">Neural_Network</span>\n<span class=\"kn\">from</span> <span class=\"nn\">miscnn.neural_network.architecture.unet.standard</span> <span class=\"kn\">import</span> <span class=\"n\">Architecture</span>\n\n<span class=\"n\">unet_standard</span> <span class=\"o\">=</span> <span class=\"n\">Architecture</span><span class=\"p\">()</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Neural_Network</span><span class=\"p\">(</span><span class=\"n\">preprocessor</span><span class=\"o\">=</span><span class=\"n\">pp</span><span class=\"p\">,</span> <span class=\"n\">architecture</span><span class=\"o\">=</span><span class=\"n\">unet_standard</span><span class=\"p\">)</span>\n</pre>\n<p>Congratulations to your ready-to-use Medical Image Segmentation pipeline including data I/O, preprocessing and data augmentation with default setting.</p>\n<p>Let's run a model training on our data set. Afterwards, predict the segmentation of a sample using the fitted model.</p>\n<pre><span class=\"c1\"># Training the model with all except one sample for 500 epochs</span>\n<span class=\"n\">sample_list</span> <span class=\"o\">=</span> <span class=\"n\">data_io</span><span class=\"o\">.</span><span class=\"n\">get_indiceslist</span><span class=\"p\">()</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">sample_list</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Predict the one remaining sample</span>\n<span class=\"n\">pred</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([</span><span class=\"n\">sample_list</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]],</span> <span class=\"n\">direct_output</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Now, let's run a 5-fold Cross-Validation with our model, create automatically evaluation figures and save the results into the directory \"evaluation_results\".</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">miscnn.evaluation.cross_validation</span> <span class=\"kn\">import</span> <span class=\"n\">cross_validation</span>\n\n<span class=\"n\">cross_validation</span><span class=\"p\">(</span><span class=\"n\">sample_list</span><span class=\"p\">,</span> <span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">k_fold</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                 <span class=\"n\">evaluation_path</span><span class=\"o\">=</span><span class=\"s2\">\"evaluation_results\"</span><span class=\"p\">,</span> <span class=\"n\">draw_figures</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Installation</h2>\n<p>There are two ways to install MIScnn:</p>\n<ul>\n<li><strong>Install MIScnn from PyPI (recommended):</strong></li>\n</ul>\n<p>Note: These installation steps assume that you are on a Linux or Mac environment. If you are on Windows or in a virtual environment without root, you will need to remove sudo to run the commands below.</p>\n<pre>sudo pip install miscnn\n</pre>\n<ul>\n<li><strong>Alternatively: install MIScnn from the GitHub source:</strong></li>\n</ul>\n<p>First, clone MIScnn using git:</p>\n<pre>git clone https://github.com/frankkramer-lab/MIScnn.git\n</pre>\n<p>Then, cd to the MIScnn folder and run the install command:</p>\n<pre><span class=\"nb\">cd</span> MIScnn\nsudo python setup.py install\n</pre>\n<h2>Author</h2>\n<p>Dominik M\u00fcller<br>\nEmail: <a href=\"mailto:dominik.mueller@informatik.uni-augsburg.de\">dominik.mueller@informatik.uni-augsburg.de</a><br>\nIT-Infrastructure for Translational Medical Research<br>\nUniversity Augsburg<br>\nBavaria, Germany</p>\n<h2>How to cite / More information</h2>\n<p>Dominik M\u00fcller and Frank Kramer. (2019)<br>\nMIScnn: A Framework for Medical Image Segmentation with Convolutional Neural Networks and Deep Learning.</p>\n<h2>License</h2>\n<p>This project is licensed under the GNU GENERAL PUBLIC LICENSE Version 3.<br>\nSee the LICENSE.md file for license rights and limitations.</p>\n\n          </div>"}, "last_serial": 7138810, "releases": {"0.32": [{"comment_text": "", "digests": {"md5": "aedf683aee40893078829b08e85a39bc", "sha256": "cc044103849a12895720766580ae5175289642f302f9598ed07d59a75d1ff0ae"}, "downloads": -1, "filename": "miscnn_TF_1.14-0.32-py3-none-any.whl", "has_sig": false, "md5_digest": "aedf683aee40893078829b08e85a39bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 94473, "upload_time": "2020-04-30T16:59:03", "upload_time_iso_8601": "2020-04-30T16:59:03.443261Z", "url": "https://files.pythonhosted.org/packages/04/c0/c3e240a85574bd211adaf6a501489ae403065bed21a7c736dc0db94426a6/miscnn_TF_1.14-0.32-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523fd24fdcfb7ec88b419229bd658b46", "sha256": "87d01ccc2461d406e1ad1b6ef4a2086e0166f013ee2cd884b16453447a14ee61"}, "downloads": -1, "filename": "miscnn_TF-1.14-0.32.tar.gz", "has_sig": false, "md5_digest": "523fd24fdcfb7ec88b419229bd658b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42958, "upload_time": "2020-04-30T16:59:06", "upload_time_iso_8601": "2020-04-30T16:59:06.101502Z", "url": "https://files.pythonhosted.org/packages/e5/4a/dcb0fbb8bec04d82a35b8e109856859d08499750446d6e5fe948e9a0fd1f/miscnn_TF-1.14-0.32.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aedf683aee40893078829b08e85a39bc", "sha256": "cc044103849a12895720766580ae5175289642f302f9598ed07d59a75d1ff0ae"}, "downloads": -1, "filename": "miscnn_TF_1.14-0.32-py3-none-any.whl", "has_sig": false, "md5_digest": "aedf683aee40893078829b08e85a39bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 94473, "upload_time": "2020-04-30T16:59:03", "upload_time_iso_8601": "2020-04-30T16:59:03.443261Z", "url": "https://files.pythonhosted.org/packages/04/c0/c3e240a85574bd211adaf6a501489ae403065bed21a7c736dc0db94426a6/miscnn_TF_1.14-0.32-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "523fd24fdcfb7ec88b419229bd658b46", "sha256": "87d01ccc2461d406e1ad1b6ef4a2086e0166f013ee2cd884b16453447a14ee61"}, "downloads": -1, "filename": "miscnn_TF-1.14-0.32.tar.gz", "has_sig": false, "md5_digest": "523fd24fdcfb7ec88b419229bd658b46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42958, "upload_time": "2020-04-30T16:59:06", "upload_time_iso_8601": "2020-04-30T16:59:06.101502Z", "url": "https://files.pythonhosted.org/packages/e5/4a/dcb0fbb8bec04d82a35b8e109856859d08499750446d6e5fe948e9a0fd1f/miscnn_TF-1.14-0.32.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:07 2020"}