{"info": {"author": "Appknox & OpenStack Security Group", "author_email": "engineering@appknox.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Topic :: Security", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "=================================================\nSyntribos, An Automated API Security Testing Tool\n=================================================\n\n::\n\n                      syntribos\n                       xxxxxxx\n                  x xxxxxxxxxxxxx x\n               x     xxxxxxxxxxx     x\n                      xxxxxxxxx\n            x          xxxxxxx          x\n                        xxxxx\n           x             xxx             x\n                          x\n          xxxxxxxxxxxxxxx   xxxxxxxxxxxxxxx\n           xxxxxxxxxxxxx     xxxxxxxxxxxxx\n            xxxxxxxxxxx       xxxxxxxxxxx\n             xxxxxxxxx         xxxxxxxxx\n               xxxxxx           xxxxxx\n                 xxx             xxx\n                     x         x\n                          x\n             === Automated API Scanning  ===\n\n.. image:: https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat\n    :target: http://docs.openstack.org/developer/syntribos/\n\n.. image:: https://img.shields.io/pypi/v/syntribos.svg\n    :target: https://pypi.python.org/pypi/syntribos/\n\n.. image:: https://img.shields.io/pypi/dm/syntribos.svg\n    :target: https://pypi.python.org/pypi/syntribos/\n\n.. image:: https://img.shields.io/pypi/pyversions/syntribos.svg\n        :target: https://pypi.python.org/pypi/syntribos/\n\n.. image:: https://img.shields.io/pypi/wheel/syntribos.svg\n        :target: https://pypi.python.org/pypi/syntribos/\n\n.. image:: https://img.shields.io/irc/%23openstack-security.png\n        :target: http://webchat.freenode.net/?channels=openstack-security\n\n\nSyntribos is an open source automated API security testing tool that is\nmaintained by members of the `OpenStack Security Project <https://wiki.openstack.org/wiki/Security>`__.\n\nGiven a simple configuration file and an example HTTP request, syntribos\ncan replace any API URL, URL parameter, HTTP header and request body\nfield with a given set of strings. Syntribos iterates through each position\nin the request automatically. Syntribos aims to automatically detect common\nsecurity defects such as SQL injection, LDAP injection, buffer overflow, etc. In\naddition, syntribos can be used to help identify new security defects\nby automated fuzzing.\n\nSyntribos has the capability to test any API, but is designed with\n`OpenStack <https://www.openstack.org/>`__ applications in mind.\n\nList of Tests\n~~~~~~~~~~~~~\n\nSyntribos is shipped with batteries included, which means, with minimal\nconfiguration effort you can initiate automated testing of any API of\nyour choice. If testing OpenStack API is in your mind, then syntribos\nby default will help you in automatically downloading a set of templates\nof some of the bigger OpenStack projects like nova, neutron, keystone etc.\n\nA short list of tests that can be run using syntribos is given below:\n\n* Buffer Overflow\n* Command Injection\n* CORS Wildcard\n* Integer Overflow\n* LDAP Injection\n* SQL Injection\n* String Validation\n* XML External Entity\n* Cross Site Scripting ( XSS )\n\nBuffer Overflow\n---------------\n\nThe idea of `buffer overflow attacks`_ in the context of a web application\nis to force an application to handle more data than it can hold in a buffer.\nIn syntribos a buffer overflow test is attempted by injecting a large\nstring into the body of an HTTP request.\n\nCommand Injection\n-----------------\n\n`Command injection attacks`_ are done by injecting arbitrary commands in an\nattempt to execute these commands on a remote system. In syntribos, this is\nachieved by injecting a set of strings that have been proven to be successful\nin executing a command injection attacks.\n\nCORS Wildcard\n-------------\n\n`CORS wildcard test`_ is used to verify if a web server allows cross-domain\nresource sharing from any external URL ( wild carding of\n`Access-Control-Allow-Origin` header) rather than a white list of URLs.\n\nInteger Overflow\n----------------\n\n`Integer overflow test`_ in syntribos attempts to inject numeric values that\nthe remote application may fail to represent within its storage, for example\na 32 bit integer type trying to store a 64 bit number\n\nLDAP Injection\n--------------\n\nSyntribos attempts `LDAP injection attacks`_ by injecting LDAP statements\ninto HTTP requests; if an application fails to properly sanitize the\nrequest content, it may be possible to execute arbitrary commands.\n\nSQL Injection\n-------------\n\n`SQL injection attacks`_ are one of the most common web application attacks.\nIf the user input is not properly sanitized, it is fairly easy to\nexecute SQL queries that may result in an attacker reading  sensitive\ninformation or gaining control of the SQL server. In syntribos\nan application is tested for SQL injection vulnerabilities by injecting\nSQL strings into the HTTP request.\n\nString Validation\n-----------------\n\nString validation attacks in syntribos try to exploit the fact that\nsome string patterns are not sanitized effectively by the input\nvalidator and may cause the application to crash. Examples of characters\nthat may cause string validation vulnerabilities are special unicode\ncharacters, emojis etc.\n\nXML External Entity\n-------------------\n\n`XML external entity attacks`_ are attacks that targets the web\napplication's XML parser. If an XML parser allows processing of\nexternal entities referenced in an XML document then an attacker\nmight be able to cause denial of service, leakage of information etc.\nSyntribos tries to inject a few malicious strings into an XML body\nwhile sending requests to an application in an attempt to obtain an\nappropriate response.\n\nCross Site Scripting ( XSS )\n----------------------------\nAn XSS_ attack is one where malicious JavaScript is injected into a web\napplication. Syntribos tries to find potential XSS issues by injecting\nstring containing \"script\" and other HTML tags into request fields.\n\nOther than these built-in tests, you can extend syntribos by writing\nyour own custom tests. To do this, download the source code and look at\nthe tests in ``syntribos/tests`` directory. The CORS test may be an easy\none to emulate. In the same way, users can add different extensions also\nto the tests. To see how extensions can be written please see\n``syntribos/extensions`` directory.\n\n.. _buffer overflow attacks: https://en.wikipedia.org/wiki/Buffer_overflow\n.. _Command injection attacks: https://www.owasp.org/index.php/Command_Injection\n.. _CORS wildcard test: https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\n.. _Integer overflow test: https://en.wikipedia.org/wiki/Integer_overflow\n.. _LDAP injection attacks: https://www.owasp.org/index.php/LDAP_injection\n.. _SQL injection attacks: https://www.owasp.org/index.php/SQL_Injection\n.. _XML external entity attacks: https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\n.. _XSS: https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\n\n**Details**\n\n* `Documentation`_\n* Free software: `Apache license`_\n* `Launchpad project`_\n* `Blueprints`_\n* `Bugs`_\n* `Source code`_\n\nSupported Operating Systems\n~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSyntribos has been developed primarily in Linux and Mac environments and would\nwork on most Unix and Linux based Operating Systems. At this point, we are not\nsupporting Windows, but this may change in the future.\n\n.. _Documentation: http://docs.openstack.org/developer/syntribos/\n.. _Apache license: https://github.com/openstack/syntribos/blob/master/LICENSE\n.. _Launchpad project: https://launchpad.net/syntribos\n.. _Blueprints: https://blueprints.launchpad.net/syntribos\n.. _Bugs: https://bugs.launchpad.net/syntribos\n.. _Source code: https://github.com/openstack/syntribos\n\n============\nInstallation\n============\n\nSyntribos can be installed directly from `pypi with pip <https://pypi.python.org/pypi/pip>`__\n\n::\n\n   pip install syntribos\n\nIf you want the latest changes, you could install syntribos from `source <https://www.github.com/openstack/syntribos.git>`__\nwith `pip <https://pypi.python.org/pypi/pip>`__.\n\n-  Clone the repository\n\n::\n\n   $ git clone https://github.com/openstack/syntribos.git\n\n- cd to the directory and install with pip\n\n::\n\n   $ cd syntribos\n   $ pip install .\n\n======================================\nInitializing the syntribos Environment\n======================================\n\nOnce syntribos is installed, you must initialize the syntribos environment.\nThis can be done manually, or via the ``init`` command.\n\n::\n\n    $ syntribos init\n\nBy default, ``syntribos init`` fetches a set of default payload files from a\n`remote repository maintained by our development team <https://github.com/rahulunair/syntribos-payloads>`_.\nThese payload files are necessary for our fuzz tests to run, but if you would\nlike to disable this behavior, run syntribos with the ``--no_downloads`` flag.\nPayload files can also be fetched by running ``syntribos download --payloads``\nat any time.\n\nIf you'd like to specify a custom root for syntribos to be installed in,\nspecify the ``--custom_install_root`` flag after ``init``. This will skip\nsyntribos' prompts for information from the terminal, which can be handy for\nJenkins jobs and other situations where user input cannot be retrieved.\n\nIf you've already run the ``init`` command but want to start over with a fresh\nenvironment, you can specify the ``--force`` flag to overwrite existing files.\nThe ``--custom_install_root`` and ``--force`` flags can be combined to overwrite\nfiles in a custom install root.\n\n**Example:**\n\n::\n\n    $ syntribos init --custom_install_root /your/custom/path --force\n\n\n\n=============\nConfiguration\n=============\n\nAll configuration files should have at least the section\n``[syntribos]``. Depending upon what extensions you are using\nand what you are testing, you can add other sections as well.\nFor example, if you are using the built-in identity extension\nyou would also need the ``[user]`` section. The sections\n``[logging]`` and ``[remote]`` are optional.\n\nGiven below is the basic structure of a syntribos configuration\nfile.\n\n::\n\n    [syntribos]\n    #\n    # End point URLs and versions of the services to be tested.\n    #\n    endpoint=http://localhost:5000\n    # Set payload and templates path\n    templates=<location_of_templates_dir/file>\n    payloads=<location_of_payloads_dir>\n\n    [user]\n    #\n    # User credentials and endpoint URL to get an AUTH_TOKEN\n    # This section is only needed if you are using the identity extension.\n    #\n    endpoint=\n    username=<yourusername>\n    password=<yourpassword>\n\n    [remote]\n    #\n    # Optional, to define remote URI and cache_dir explicitly\n    #\n    templates_uri=<URI to a tar file of set of templates>\n    payloads_uri=<URI to a tar file of set of payloads>\n    cache_dir=<a local path to save the downloaded files>\n\n    [logging]\n    log_dir=<location_to_save_debug_logs>\n\n\nTo test any project, just update the endpoint URL under\n``[syntribos]`` to point to the API and also modify the user\ncredentials if needed. The endpoint URL in the ``[syntribos]``\nsection  is the one being tested by syntribos and the endpoint URL in\n``[user]`` section is just used to get an AUTH_TOKEN.\n\nDownloading templates and payloads remotely\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPayload and template files can be downloaded remotely in syntribos.\nIn the config file under ``[syntribos]`` section, if ``templates``\nand ``payloads`` options are not set, then, by default syntribos will\ndownload all the latest payloads and the templates for a few OpenStack\nprojects.\n\nAs a user you can specify a URI to download custom templates and payloads\nfrom as well; this is done by using ``[remotes]`` section in the config file.\nAvailable options under ``[remotes]`` are ``cache_dir``, ``templates_uri``,\n``payloads_uri`` and ``enable_cache``. The ``enable_cache`` option is\n``True`` by default and can be set to ``False`` to disable caching of remote\ncontent while syntribos is running. If the ``cache_dir`` set to a path,\nsyntribos will attempt to use that as a base directory to save downloaded\ntemplate and payload files.\n\nThe advantage of using these options are that you will be able to get\nthe latest payloads from the official repository and if you are\nusing syntribos to test OpenStack projects, then, in most cases you\ncould directly use the well defined templates available with this option.\n\nThis option also helps to easily manage different versions of templates\nremotely, without the need to maintain a set of different versions offline.\n\nTesting OpenStack keystone API\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA sample config file is given in ``examples/configs/keystone.conf``.\nCopy this file to a location of your choice (default file path for\nconfiguration file is: ``~/.syntribos/syntribos.conf``) and update the\nnecessary fields like user credentials, log, template directory etc.\n\n::\n\n    $ vi examples/configs/keystone.conf\n\n\n\n    [syntribos]\n    #\n    # As keystone is being tested in the example, enter your\n    #\n    # keystone auth endpoint url.\n    endpoint=http://localhost:5000\n    # Set payload and templates path\n    templates=<location_of_templates_dir/file>\n    payloads=<location_of_payloads_dir>\n\n    [user]\n    #\n    # User credentials\n    #\n    endpoint=http://localhost:5000\n    username=<yourusername>\n    password=<yourpassword>\n    # Optional, only needed if Keystone V3 API is used\n    #user_id=<youruserid>\n    # Optional, api version if required\n    #version=v2.0\n    # Optional, for getting scoped tokens\n    #user_id=<alt_userid>\n    # If user id is not known\n    # For V3 API\n    #domain_name=<name_of_the_domain>\n    #project_name=<name_of_the_project>\n    # For Keystone V2 API\n    #tenant_name=<name_of_the_project>\n\n    #[alt_user]\n    #\n    # Optional, Used for cross auth tests (-t AUTH)\n    #\n    #endpoint=http://localhost:5000\n    #username=<alt_username>\n    #password=<alt_password>\n    # Optional, for getting scoped tokens\n    #user_id=<alt_userid>\n    # If user id is not known\n    # For V3 API\n    #domain_name=<name_of_the_domain>\n    #project_name=<name_of_the_project>\n    # For Keystone V2 API\n    #tenant_name=<name_of_the_project>\n\n    [remote]\n    #\n    # Optional, Used to specify URLs of templates and payloads\n    #\n    #cache_dir=<a local path to save the downloaded files>\n    #templates_uri=https://github.com/your_project/templates.tar\n    #payloads_uri=https://github.com/your_project/payloads.tar\n    # To disable caching of these remote contents, set the following variable to False\n    #enable_caching=True\n\n    [logging]\n    #\n    # Logger options go here\n    #\n    log_dir=<location_to_store_log_files>\n    # Optional, compresses http_request_content,\n    # if you don't want this, set this option to False.\n    http_request_compression=True\n\n========\nCommands\n========\n\nBelow are the set of commands that can be specified while\nusing syntribos.\n\n- **init**\n\n  This command sets up the syntribos environment after installation. It will\n  create the necessary folders for templates, payloads, and logs, as well as\n  an example configuration file.\n\n  ::\n\n    $ syntribos init\n\n  To learn more about ``syntribos init``, see the installation instructions\n  `here <installation.html>`_\n\n- **run**\n\n  This command runs syntribos with the given config options\n\n  ::\n\n    $ syntribos --config-file keystone.conf -t SQL run\n\n- **dry-run**\n\n  This command ensures that the template files given for this run parse\n  successfully without errors. It then runs a debug test which sends no\n  requests of its own.\n\n  Note: If any external calls referenced inside the template file do make\n  requests, the parser will still make those requests even for a dry run.\n\n  ::\n\n    $ syntribos --config-file keystone.conf dry_run\n\n- **list_tests**\n\n  This command will list the names and description of all the tests\n  that can be executed by the ``run`` command.\n\n  ::\n\n    $ syntribos --config-file keystone.conf list_tests\n\n- **download**\n\n  This command will download templates and payload files. By default, it will\n  download a default set of OpenStack template files (with the --templates\n  flag) or our default set of payloads (with the --payloads flag) to your\n  syntribos root directory. However, the behavior of this command can be\n  configured in the [remote] section of your config file.\n\n  ::\n\n    $ syntribos download --templates\n\nAll these commands except init will only work if a configuration file\nis specified. If a configuration file is present in the default\npath ( ``~/.syntribos/syntribos.conf`` ), then you\ndo not need to explicitly specify a config file and\ncan run syntribos using the command ``syntribos run``.\n\n=================\nRunning syntribos\n=================\n\nTo run syntribos against all the available tests, just specify the\ncommand ``syntribos`` with the configuration file without\nspecifying any test type.\n\n::\n\n    $ syntribos --config-file keystone.conf run\n\nFuzzy-matching test names\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to limit syntribos to run a specific test type using\nthe ``-t`` flag.\n\n::\n\n    $ syntribos --config-file keystone.conf -t SQL run\n\n\nThis will match all tests that contain ``SQL`` in their name\nlike SQL_INJECTION_HEADERS, SQL_INJECTION_BODY etc.\n\nSpecifying a custom root directory\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you set up the syntribos environment with a custom root (i.e. with\n``syntribos init --custom_install_root``), you can point to it with the\n``--syntribos-custom_root`` configuration option. Syntribos will look for a\n``syntribos.conf`` file inside this directory, and will read further\nconfiguration information from there.\n\n===================\nLogging and Results\n===================\n\nTwo types of logs are generated by syntribos, results and debug logs. While\nresults log is the representation of results ( collection of issues ) from a\ngiven syntribos run, debug logs contain debugging information captured during\na particular run. Debug logs may include exception messages, warnings, raw\nbut sanitized request/response data and a few more details as well.\nA modified version of Python logger is used for collecting debug logs in\nsyntribos.\n\nResults Log\n~~~~~~~~~~~\n\nThe results log as described above is a collection of issues (failures and\nerrors) generated at the end of a syntribos run. The \"failures\" key represents\ntests that have failed, indicating a possible security vulnerability and the\n\"errors\" key gives us information on any unhandled exceptions such as connection\nerrors encountered on that run.\n\nAn example failure object is seen below:\n\n::\n\n    {\n       \"defect_type\": \"xss_strings\",\n       \"description\": \"The string(s): '[\\\"<STYLE>@import'http://xss.rocks/xss.css';</STYLE>\\\"]',\n       known to be commonly returned after a successful XSS attack, have been found in the\n       response. This could indicate a vulnerability to XSS attacks.\",\n       \"failure_id\": 33,\n       \"instances\": [\n          {\n            \"confidence\": \"LOW\",\n            \"param\": {\n              \"location\": \"data\",\n              \"method\": \"POST\",\n              \"type\": null,\n              \"variables\": [\n                \"type\",\n                \"details/name\",\n              ]\n          },\n          \"severity\": \"LOW\",\n          \"signals\": {\n             \"diff_signals\": [\n               \"LENGTH_DIFF_OVER\"\n             ],\n             \"init_signals\": [\n               \"HTTP_CONTENT_TYPE_JSON\",\n               \"HTTP_STATUS_CODE_2XX_201\"\n             ],\n             \"test_signals\": [\n               \"FAILURE_KEYS_PRESENT\",\n               \"HTTP_CONTENT_TYPE_JSON\",\n               \"HTTP_STATUS_CODE_2XX_201\",\n             ]\n          },\n          \"strings\": [\n            \"<STYLE>@import'http://xss.rocks/xss.css';</STYLE>\"\n             ]\n          }\n       ],\n       \"url\": \"127.0.0.1/test\"\n    }\n\n\nErrors take the form:\n\n::\n\n    ERROR:\n    {\n      \"error\": \"Traceback (most recent call last):\\n  File \\\"/Users/test/syntribos/tests/fuzz/base_fuzz.py\\\",\n       line 58, in tearDownClass\\n    super(BaseFuzzTestCase, cls).tearDownClass()\\n\n       File \\\"/Users/test/syntribos/tests/base.py\\\", line 166, in tearDownClass\\n\n       raise sig.data[\\\"exception\\\"]\\nReadTimeout: HTTPConnectionPool(host='127.0.0.1', port=8080):\n       Read timed out. (read timeout=10)\\n\",\n       \"test\": \"tearDownClass (syntribos.tests.fuzz.sql.image_data_image_data_get.template_SQL_INJECTION_HEADERS_sql-injection.txt_str21_model1)\"\n    }\n\n\nDebug Logs\n~~~~~~~~~~\n\nDebug logs include details about HTTP requests and responses, and other debugging\ninformation like errors and warnings across the project. The default path where\ndebug logs are saved is ``.syntribos/logs/``. Debug logs are arranged in\ndirectories based on the timestamp and in these directories, in files named\naccording to the templates.\n\nFor example:\n\n::\n\n    $ ls .syntribos/logs/\n    2016-09-15_11:06:37.198412 2016-09-16_10:11:37.834892 2016-09-16_13:31:36.362584\n    2016-09-15_11:34:33.271606 2016-09-16_10:38:55.820827 2016-09-16_13:36:43.151048\n    2016-09-15_11:41:53.859970 2016-09-16_10:39:50.501820 2016-09-16_13:40:23.203920\n\n::\n\n    $ ls .syntribos/logs/2016-09-16_13:31:36.362584\n    API_Versions::list_versions_template.log\n    API_Versions::show_api_details_template.log\n    availability_zones::get_availability_zone_detail_template.log\n    availability_zones::get_availability_zone_template.log\n    cells::delete_os_cells_template.log\n    cells::get_os_cells_capacities_template.log\n    cells::get_os_cells_data_template.log\n\nEach log file includes some essential debugging information like the string representation\nof the request object, signals and checks used for tests etc.\n\nThe request:\n\n::\n\n    ------------\n    REQUEST SENT\n    ------------\n    request method.......: PUT\n    request url..........: http://127.0.0.1/api\n    request params.......:\n    request headers size.: 7\n    request headers......: {'Content-Length': '0', 'Accept-Encoding': 'gzip, deflate',\n    'Accept': 'application/json',\n    'X-Auth-Token': <uuid>, 'Connection': 'keep-alive',\n    'User-Agent': 'python-requests/2.11.1', 'content-type': 'application/xml'}\n    request body size....: 0\n    request body.........: None\n\nThe response:\n\n::\n\n    -----------------\n    RESPONSE RECEIVED\n    -----------------\n    response status..: <Response [415]>\n    response headers.: {'Content-Length': '70',\n    'X-Compute-Request-Id': <random id>,\n    'Vary': 'OpenStack-API-Version, X-OpenStack-Nova-API-Version',\n    'Openstack-Api-Version': 'compute 2.1', 'Connection': 'close',\n    'X-Openstack-Nova-Api-Version': '2.1', 'Date': 'Fri, 16 Sep 2016 14:15:27 GMT',\n    'Content-Type': 'application/json; charset=UTF-8'}\n    response time....: 0.036277\n    response size....: 70\n    response body....: {\"badMediaType\": {\"message\": \"Unsupported Content-Type\", \"code\": 415}}\n    -------------------------------------------------------------------------------\n    [2590]  :  XSS_BODY\n    (<syntribos.clients.http.client.SynHTTPClient object at 0x102c65f10>, 'PUT',\n    'http://127.0.0.1/api')\n    {'headers': {'Accept': 'application/json', 'X-Auth-Token': <uuid> },\n    'params': {}, 'sanitize': False, 'data': '', 'requestslib_kwargs': {'timeout': 10}}\n    Starting new HTTP connection (1): 127.0.0.1\n    \"PUT http://127.0.0.1/api HTTP/1.1\" 501 93\n\nAnd the signals captured:\n\n::\n\n    Signals: ['HTTP_STATUS_CODE_4XX_400', 'HTTP_CONTENT_TYPE_JSON']\n    Checks used: ['HTTP_STATUS_CODE', 'HTTP_CONTENT_TYPE']\n\nDebug logs are sanitized to prevent storing secrets to log files.\nPasswords and other sensitive information are masked with astericks using a\nslightly modified version of `oslo_utils.strutils.mask_password <http://docs.openstack.org/developer/oslo.utils/api/strutils.html#oslo_utils.strutils.mask_password>`__\n\nDebug logs also includes body compression, wherein long fuzz strings are\ncompressed before being written to the logs. The threshold to start data\ncompression is set to 512 characters. While compression can be turned off\nby setting the variable \"http_request_compression\" under logging section\nin the config file to ``False``, it is not recommended.\n\n=============================\nAnatomy of a request template\n=============================\n\nThis section will give you a brief idea on writing templates\nand on how to run specific tests. Templates are input files which has\nraw http requests and may also be supplemented with variable\ndata using extensions.\n\nSyntribos template files are ordinary text files containing raw http\nrequests.\n\nUsing external functions in templates\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThese template files can also be supplemented with variable\ndata, or data retrieved from external sources. This is handled\nusing 'extensions.'\n\nExtensions are found in ``syntribos/extensions/`` .\n\nCalls to extensions are made in this form:\n\n::\n\n    CALL_EXTERNAL|{extension dot path}:{function}:{arguments}\n\nOne example packaged with syntribos enables the tester to obtain an auth\ntoken from keystone. The code is located in ``identity/client.py``\n\nTo use this extension, you can add the following to your template file:\n\n::\n\n    X-Auth-Token: CALL_EXTERNAL|syntribos.extensions.identity.client:get_token_v3:[\"user\"]|\n\nThe \"user\" string indicates the data from the configuration file we\nadded in ``examples/configs/keystone.conf``\n\nAnother example is found in ``random_data/client.py`` . This returns a\nUUID when random but unique data is needed. This can be used in place of\nusernames when fuzzing a create user call.\n\n::\n\n    \"username\": \"CALL_EXTERNAL|syntribos.extensions.random_data.client:get_uuid:[]|\"\n\nThe extension function can return one value or be used as a generator if\nyou want it to change for each test.\n\nBuilt in functions\n------------------\n\nSyntribos comes with a slew of utility functions/extensions, these functions can\nbe used to dynamically inject data into templates.\n\n.. list-table:: **Utility Functions**\n   :widths: 15 35 40\n   :header-rows: 1\n\n   * - Method\n     - Parameters\n     - Description\n   * - hash_it\n     - [data, hash_type (optional hash type, default being SHA256)]\n     - Returns hashed value of data\n   * - hmac_it\n     - [data, key, hash_type (optional hash type, default being SHA256)]\n     - Returns HMAC based on the has algorithm, data and the key provided\n   * - epoch_time\n     - [offset (optional integer offset value, default is zero)]\n     - Returns the current time minus offset since epoch\n   * - utc_datetime\n     - []\n     - Returns current UTC date time\n   * - base64_encode\n     - [data]\n     - Returns base 64 encoded value of data supplied\n   * - url_encode\n     - [url]\n     - Returns encoded URL\n\nAll these utility functions can be called using:\n\n::\n\n    CALL_EXTERNAL|common_utils.client.{method_name}:{comma separated parameters in square brackets}\n\nFor example:\n\n::\n\n    \"encoded_url\": \"CALL_EXTERNAL|common_utils.client:url_encode:['http://localhost:5000']|\n\nThere are a few other functions that return random values as well, they are:\n\n.. list-table:: **Random Functions**\n   :widths: 15 35 40\n   :header-rows: 1\n\n   * - Method\n     - Parameters\n     - Description\n   * - get_uuid\n     - []\n     - Returns a random UUID\n   * - random_port\n     - []\n     - Returns random port number between 0 and 65535\n   * - random_ip\n     - []\n     - Returns random ipv4 address\n   * - random_mac\n     - []\n     - Returns random mac address\n   * - random_integer\n     - [beg (optional beginning value, default is 0), end (optional end value)]\n     - Returns an integer value between 0 and 1468029570 by default\n   * - random_utc_datetime\n     - []\n     - Returns random UTC datetime\n\nThese can be called using:\n\n::\n\n    CALL_EXTERNAL|random_data.client.{method_name}:{comma separated parameters in square brackets}\n\nFor example,\n\n::\n\n    \"address\": \"CALL_EXTERNAL|random_data.client:random_ip:[]|\"\n\nAction Field\n~~~~~~~~~~~~\n\nWhile syntribos is designed to test all fields in a request, it can also\nignore specific fields through the use of Action Fields. If you want to\nfuzz against a static object ID, use the Action Field indicator as\nfollows:\n\n::\n\n    \"ACTION_FIELD:id\": \"1a16f348-c8d5-42ec-a474-b1cdf78cf40f\"\n\nThe ID provided will remain static for every test.\n\nRunning a specific test\n~~~~~~~~~~~~~~~~~~~~~~~\n\nAs mentioned above, some tests included with syntribos by default\nare LDAP injection, SQL injection, integer overflow, command injection,\nXML external entity, reflected cross-site scripting,\nCross Origin Resource Sharing (CORS) wildcard and SSL.\n\nIn order to run a specific test, simply use the ``-t, --test-types``\noption and provide `syntribos` with a keyword or keywords to match from\nthe test files located in ``syntribos/tests/``.\n\nFor SQL injection tests, use:\n\n::\n\n    $ syntribos --config-file keystone.conf -t SQL\n\nAnother example, to run SQL injection tests against the template body only,\nuse:\n\n::\n\n    $ syntribos --config-file keystone.conf -t SQL_INJECTION_BODY\n\nFor all tests against HTTP headers only, use:\n\n::\n\n    $ syntribos --config-file keystone.conf -t HEADERS\n\n\n\n===================\nExecuting unittests\n===================\n\nTo execute unittests automatically, navigate to the ``syntribos`` root\ndirectory and install the test requirements.\n\n::\n\n    $ pip install -r test-requirements.txt\n\nNow, run\n\n::\n\n    $ python -m unittest discover tests/unit -p \"test_*.py\"\n\nIf you have configured tox you could also do\n\n::\n\n    $ tox -e py27\n    $ tox -e py35\n\nThis will run all the unittests and give you a result output\ncontaining the status and coverage details of each test.\n\n=======================\nContributing Guidelines\n=======================\n\nSyntribos is an open source project and contributions are always\nwelcome, if you have any questions, we can be found in the\n#openstack-security channel on Freenode IRC.\n\n1. Follow all the `OpenStack Style Guidelines <http://docs.openstack.org/developer/hacking/>`__\n   (e.g. PEP8, Py3 compatibility)\n2. All new classes/functions should have appropriate docstrings in\n   `RST format <https://pythonhosted.org/an_example_pypi_project/sphinx.html>`__\n3. All new code should have appropriate unittests (place them in the\n   ``tests/unit`` folder)\n4. Any change you make can be tested using tox:\n\n::\n\n    pip install tox\n    tox -e pep8\n    tox -e py27\n    tox -e py35\n    tox -e cover\n\nAnyone wanting to contribute to OpenStack must follow\n`the OpenStack development workflow <http://docs.openstack.org/infra/manual/developers.html#development-workflow>`__\n\nAll changes should be submitted through the code review process in Gerrit\ndescribed above. All pull requests on Github will be closed/ignored.\n\nBugs should be filed on the `syntribos launchpad site <https://bugs.launchpad.net/syntribos>`__,\nand not on Github. All Github issues will be closed/ignored.\n\nBreaking changes, feature requests, and other unprioritized work should first be\nsubmitted as a blueprint `here <https://blueprints.launchpad.net/syntribos>`__\nfor review.\n\n\n**Note:** README.rst is an auto generated file, from the rst files in the\ndocs directory. The file can be generated by running ``python readme.py``\nfrom the ``syntribos/scripts`` directory. When the README needs to be\nupdated; modify the corresponding rst file in ``syntribos/doc/source``\nand generate it by running the script.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/appknox/syntribos/", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "ak-syntribos", "package_url": "https://pypi.org/project/ak-syntribos/", "platform": "", "project_url": "https://pypi.org/project/ak-syntribos/", "project_urls": {"Homepage": "https://github.com/appknox/syntribos/"}, "release_url": "https://pypi.org/project/ak-syntribos/0.3.4/", "requires_dist": ["six (>=1.9.0)", "requests (>=2.10.0)", "oslo.config (!=3.18.0,>=3.14.0)", "oslo.utils (>=3.18.0)", "python-cinderclient (!=1.7.0,!=1.7.1,>=1.6.0)", "python-glanceclient (>=2.5.0)", "python-neutronclient (>=5.1.0)", "python-novaclient (!=2.33.0,>=2.29.0)"], "requires_python": "", "summary": "API Security Scanner", "version": "0.3.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"syntribos-an-automated-api-security-testing-tool\">\n<h2>Syntribos, An Automated API Security Testing Tool</h2>\n<pre>            syntribos\n             xxxxxxx\n        x xxxxxxxxxxxxx x\n     x     xxxxxxxxxxx     x\n            xxxxxxxxx\n  x          xxxxxxx          x\n              xxxxx\n x             xxx             x\n                x\nxxxxxxxxxxxxxxx   xxxxxxxxxxxxxxx\n xxxxxxxxxxxxx     xxxxxxxxxxxxx\n  xxxxxxxxxxx       xxxxxxxxxxx\n   xxxxxxxxx         xxxxxxxxx\n     xxxxxx           xxxxxx\n       xxx             xxx\n           x         x\n                x\n   === Automated API Scanning  ===\n</pre>\n<a href=\"http://docs.openstack.org/developer/syntribos/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/docs-latest-brightgreen.svg?style=flat\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0b6d1c4de4fae766e6f9de22e081cc1637adb9a7/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d6c61746573742d627269676874677265656e2e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://pypi.python.org/pypi/syntribos/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/syntribos.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb4b7240fb7dfdee24ec57c12c982027725edd94/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73796e747269626f732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/syntribos/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/syntribos.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/331ecd1f8a520eb5d95fac43de7f9ba947c2116f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f73796e747269626f732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/syntribos/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/syntribos.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee4c27a426d99f9df5adf2a6dfd6fbe2d8bd0b2a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73796e747269626f732e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/syntribos/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/wheel/syntribos.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b43e17058ca3897ac72873492800859cf8c78b93/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f73796e747269626f732e737667\"></a>\n<a href=\"http://webchat.freenode.net/?channels=openstack-security\" rel=\"nofollow\"><img alt=\"https://img.shields.io/irc/%23openstack-security.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9bfd237bbfc927831882d543490481f7698994f9/68747470733a2f2f696d672e736869656c64732e696f2f6972632f2532336f70656e737461636b2d73656375726974792e706e67\"></a>\n<p>Syntribos is an open source automated API security testing tool that is\nmaintained by members of the <a href=\"https://wiki.openstack.org/wiki/Security\" rel=\"nofollow\">OpenStack Security Project</a>.</p>\n<p>Given a simple configuration file and an example HTTP request, syntribos\ncan replace any API URL, URL parameter, HTTP header and request body\nfield with a given set of strings. Syntribos iterates through each position\nin the request automatically. Syntribos aims to automatically detect common\nsecurity defects such as SQL injection, LDAP injection, buffer overflow, etc. In\naddition, syntribos can be used to help identify new security defects\nby automated fuzzing.</p>\n<p>Syntribos has the capability to test any API, but is designed with\n<a href=\"https://www.openstack.org/\" rel=\"nofollow\">OpenStack</a> applications in mind.</p>\n<div id=\"list-of-tests\">\n<h3>List of Tests</h3>\n<p>Syntribos is shipped with batteries included, which means, with minimal\nconfiguration effort you can initiate automated testing of any API of\nyour choice. If testing OpenStack API is in your mind, then syntribos\nby default will help you in automatically downloading a set of templates\nof some of the bigger OpenStack projects like nova, neutron, keystone etc.</p>\n<p>A short list of tests that can be run using syntribos is given below:</p>\n<ul>\n<li>Buffer Overflow</li>\n<li>Command Injection</li>\n<li>CORS Wildcard</li>\n<li>Integer Overflow</li>\n<li>LDAP Injection</li>\n<li>SQL Injection</li>\n<li>String Validation</li>\n<li>XML External Entity</li>\n<li>Cross Site Scripting ( XSS )</li>\n</ul>\n<div id=\"buffer-overflow\">\n<h4>Buffer Overflow</h4>\n<p>The idea of <a href=\"https://en.wikipedia.org/wiki/Buffer_overflow\" rel=\"nofollow\">buffer overflow attacks</a> in the context of a web application\nis to force an application to handle more data than it can hold in a buffer.\nIn syntribos a buffer overflow test is attempted by injecting a large\nstring into the body of an HTTP request.</p>\n</div>\n<div id=\"command-injection\">\n<h4>Command Injection</h4>\n<p><a href=\"https://www.owasp.org/index.php/Command_Injection\" rel=\"nofollow\">Command injection attacks</a> are done by injecting arbitrary commands in an\nattempt to execute these commands on a remote system. In syntribos, this is\nachieved by injecting a set of strings that have been proven to be successful\nin executing a command injection attacks.</p>\n</div>\n<div id=\"cors-wildcard\">\n<h4>CORS Wildcard</h4>\n<p><a href=\"https://www.owasp.org/index.php/Test_Cross_Origin_Resource_Sharing_(OTG-CLIENT-007)\" rel=\"nofollow\">CORS wildcard test</a> is used to verify if a web server allows cross-domain\nresource sharing from any external URL ( wild carding of\n<cite>Access-Control-Allow-Origin</cite> header) rather than a white list of URLs.</p>\n</div>\n<div id=\"integer-overflow\">\n<h4>Integer Overflow</h4>\n<p><a href=\"https://en.wikipedia.org/wiki/Integer_overflow\" rel=\"nofollow\">Integer overflow test</a> in syntribos attempts to inject numeric values that\nthe remote application may fail to represent within its storage, for example\na 32 bit integer type trying to store a 64 bit number</p>\n</div>\n<div id=\"ldap-injection\">\n<h4>LDAP Injection</h4>\n<p>Syntribos attempts <a href=\"https://www.owasp.org/index.php/LDAP_injection\" rel=\"nofollow\">LDAP injection attacks</a> by injecting LDAP statements\ninto HTTP requests; if an application fails to properly sanitize the\nrequest content, it may be possible to execute arbitrary commands.</p>\n</div>\n<div id=\"sql-injection\">\n<h4>SQL Injection</h4>\n<p><a href=\"https://www.owasp.org/index.php/SQL_Injection\" rel=\"nofollow\">SQL injection attacks</a> are one of the most common web application attacks.\nIf the user input is not properly sanitized, it is fairly easy to\nexecute SQL queries that may result in an attacker reading  sensitive\ninformation or gaining control of the SQL server. In syntribos\nan application is tested for SQL injection vulnerabilities by injecting\nSQL strings into the HTTP request.</p>\n</div>\n<div id=\"string-validation\">\n<h4>String Validation</h4>\n<p>String validation attacks in syntribos try to exploit the fact that\nsome string patterns are not sanitized effectively by the input\nvalidator and may cause the application to crash. Examples of characters\nthat may cause string validation vulnerabilities are special unicode\ncharacters, emojis etc.</p>\n</div>\n<div id=\"xml-external-entity\">\n<h4>XML External Entity</h4>\n<p><a href=\"https://www.owasp.org/index.php/XML_External_Entity_(XXE)_Processing\" rel=\"nofollow\">XML external entity attacks</a> are attacks that targets the web\napplication\u2019s XML parser. If an XML parser allows processing of\nexternal entities referenced in an XML document then an attacker\nmight be able to cause denial of service, leakage of information etc.\nSyntribos tries to inject a few malicious strings into an XML body\nwhile sending requests to an application in an attempt to obtain an\nappropriate response.</p>\n</div>\n<div id=\"cross-site-scripting-xss\">\n<h4>Cross Site Scripting ( XSS )</h4>\n<p>An <a href=\"https://www.owasp.org/index.php/Cross-site_Scripting_(XSS)\" rel=\"nofollow\">XSS</a> attack is one where malicious JavaScript is injected into a web\napplication. Syntribos tries to find potential XSS issues by injecting\nstring containing \u201cscript\u201d and other HTML tags into request fields.</p>\n<p>Other than these built-in tests, you can extend syntribos by writing\nyour own custom tests. To do this, download the source code and look at\nthe tests in <tt>syntribos/tests</tt> directory. The CORS test may be an easy\none to emulate. In the same way, users can add different extensions also\nto the tests. To see how extensions can be written please see\n<tt>syntribos/extensions</tt> directory.</p>\n<p><strong>Details</strong></p>\n<ul>\n<li><a href=\"http://docs.openstack.org/developer/syntribos/\" rel=\"nofollow\">Documentation</a></li>\n<li>Free software: <a href=\"https://github.com/openstack/syntribos/blob/master/LICENSE\" rel=\"nofollow\">Apache license</a></li>\n<li><a href=\"https://launchpad.net/syntribos\" rel=\"nofollow\">Launchpad project</a></li>\n<li><a href=\"https://blueprints.launchpad.net/syntribos\" rel=\"nofollow\">Blueprints</a></li>\n<li><a href=\"https://bugs.launchpad.net/syntribos\" rel=\"nofollow\">Bugs</a></li>\n<li><a href=\"https://github.com/openstack/syntribos\" rel=\"nofollow\">Source code</a></li>\n</ul>\n</div>\n</div>\n<div id=\"supported-operating-systems\">\n<h3>Supported Operating Systems</h3>\n<p>Syntribos has been developed primarily in Linux and Mac environments and would\nwork on most Unix and Linux based Operating Systems. At this point, we are not\nsupporting Windows, but this may change in the future.</p>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Syntribos can be installed directly from <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pypi with pip</a></p>\n<pre>pip install syntribos\n</pre>\n<p>If you want the latest changes, you could install syntribos from <a href=\"https://www.github.com/openstack/syntribos.git\" rel=\"nofollow\">source</a>\nwith <a href=\"https://pypi.python.org/pypi/pip\" rel=\"nofollow\">pip</a>.</p>\n<ul>\n<li>Clone the repository</li>\n</ul>\n<pre>$ git clone https://github.com/openstack/syntribos.git\n</pre>\n<ul>\n<li>cd to the directory and install with pip</li>\n</ul>\n<pre>$ cd syntribos\n$ pip install .\n</pre>\n</div>\n<div id=\"initializing-the-syntribos-environment\">\n<h2>Initializing the syntribos Environment</h2>\n<p>Once syntribos is installed, you must initialize the syntribos environment.\nThis can be done manually, or via the <tt>init</tt> command.</p>\n<pre>$ syntribos init\n</pre>\n<p>By default, <tt>syntribos init</tt> fetches a set of default payload files from a\n<a href=\"https://github.com/rahulunair/syntribos-payloads\" rel=\"nofollow\">remote repository maintained by our development team</a>.\nThese payload files are necessary for our fuzz tests to run, but if you would\nlike to disable this behavior, run syntribos with the <tt><span class=\"pre\">--no_downloads</span></tt> flag.\nPayload files can also be fetched by running <tt>syntribos download <span class=\"pre\">--payloads</span></tt>\nat any time.</p>\n<p>If you\u2019d like to specify a custom root for syntribos to be installed in,\nspecify the <tt><span class=\"pre\">--custom_install_root</span></tt> flag after <tt>init</tt>. This will skip\nsyntribos\u2019 prompts for information from the terminal, which can be handy for\nJenkins jobs and other situations where user input cannot be retrieved.</p>\n<p>If you\u2019ve already run the <tt>init</tt> command but want to start over with a fresh\nenvironment, you can specify the <tt><span class=\"pre\">--force</span></tt> flag to overwrite existing files.\nThe <tt><span class=\"pre\">--custom_install_root</span></tt> and <tt><span class=\"pre\">--force</span></tt> flags can be combined to overwrite\nfiles in a custom install root.</p>\n<p><strong>Example:</strong></p>\n<pre>$ syntribos init --custom_install_root /your/custom/path --force\n</pre>\n</div>\n<div id=\"configuration\">\n<h2>Configuration</h2>\n<p>All configuration files should have at least the section\n<tt>[syntribos]</tt>. Depending upon what extensions you are using\nand what you are testing, you can add other sections as well.\nFor example, if you are using the built-in identity extension\nyou would also need the <tt>[user]</tt> section. The sections\n<tt>[logging]</tt> and <tt>[remote]</tt> are optional.</p>\n<p>Given below is the basic structure of a syntribos configuration\nfile.</p>\n<pre>[syntribos]\n#\n# End point URLs and versions of the services to be tested.\n#\nendpoint=http://localhost:5000\n# Set payload and templates path\ntemplates=&lt;location_of_templates_dir/file&gt;\npayloads=&lt;location_of_payloads_dir&gt;\n\n[user]\n#\n# User credentials and endpoint URL to get an AUTH_TOKEN\n# This section is only needed if you are using the identity extension.\n#\nendpoint=\nusername=&lt;yourusername&gt;\npassword=&lt;yourpassword&gt;\n\n[remote]\n#\n# Optional, to define remote URI and cache_dir explicitly\n#\ntemplates_uri=&lt;URI to a tar file of set of templates&gt;\npayloads_uri=&lt;URI to a tar file of set of payloads&gt;\ncache_dir=&lt;a local path to save the downloaded files&gt;\n\n[logging]\nlog_dir=&lt;location_to_save_debug_logs&gt;\n</pre>\n<p>To test any project, just update the endpoint URL under\n<tt>[syntribos]</tt> to point to the API and also modify the user\ncredentials if needed. The endpoint URL in the <tt>[syntribos]</tt>\nsection  is the one being tested by syntribos and the endpoint URL in\n<tt>[user]</tt> section is just used to get an AUTH_TOKEN.</p>\n<div id=\"downloading-templates-and-payloads-remotely\">\n<h3>Downloading templates and payloads remotely</h3>\n<p>Payload and template files can be downloaded remotely in syntribos.\nIn the config file under <tt>[syntribos]</tt> section, if <tt>templates</tt>\nand <tt>payloads</tt> options are not set, then, by default syntribos will\ndownload all the latest payloads and the templates for a few OpenStack\nprojects.</p>\n<p>As a user you can specify a URI to download custom templates and payloads\nfrom as well; this is done by using <tt>[remotes]</tt> section in the config file.\nAvailable options under <tt>[remotes]</tt> are <tt>cache_dir</tt>, <tt>templates_uri</tt>,\n<tt>payloads_uri</tt> and <tt>enable_cache</tt>. The <tt>enable_cache</tt> option is\n<tt>True</tt> by default and can be set to <tt>False</tt> to disable caching of remote\ncontent while syntribos is running. If the <tt>cache_dir</tt> set to a path,\nsyntribos will attempt to use that as a base directory to save downloaded\ntemplate and payload files.</p>\n<p>The advantage of using these options are that you will be able to get\nthe latest payloads from the official repository and if you are\nusing syntribos to test OpenStack projects, then, in most cases you\ncould directly use the well defined templates available with this option.</p>\n<p>This option also helps to easily manage different versions of templates\nremotely, without the need to maintain a set of different versions offline.</p>\n</div>\n<div id=\"testing-openstack-keystone-api\">\n<h3>Testing OpenStack keystone API</h3>\n<p>A sample config file is given in <tt>examples/configs/keystone.conf</tt>.\nCopy this file to a location of your choice (default file path for\nconfiguration file is: <tt><span class=\"pre\">~/.syntribos/syntribos.conf</span></tt>) and update the\nnecessary fields like user credentials, log, template directory etc.</p>\n<pre>$ vi examples/configs/keystone.conf\n\n\n\n[syntribos]\n#\n# As keystone is being tested in the example, enter your\n#\n# keystone auth endpoint url.\nendpoint=http://localhost:5000\n# Set payload and templates path\ntemplates=&lt;location_of_templates_dir/file&gt;\npayloads=&lt;location_of_payloads_dir&gt;\n\n[user]\n#\n# User credentials\n#\nendpoint=http://localhost:5000\nusername=&lt;yourusername&gt;\npassword=&lt;yourpassword&gt;\n# Optional, only needed if Keystone V3 API is used\n#user_id=&lt;youruserid&gt;\n# Optional, api version if required\n#version=v2.0\n# Optional, for getting scoped tokens\n#user_id=&lt;alt_userid&gt;\n# If user id is not known\n# For V3 API\n#domain_name=&lt;name_of_the_domain&gt;\n#project_name=&lt;name_of_the_project&gt;\n# For Keystone V2 API\n#tenant_name=&lt;name_of_the_project&gt;\n\n#[alt_user]\n#\n# Optional, Used for cross auth tests (-t AUTH)\n#\n#endpoint=http://localhost:5000\n#username=&lt;alt_username&gt;\n#password=&lt;alt_password&gt;\n# Optional, for getting scoped tokens\n#user_id=&lt;alt_userid&gt;\n# If user id is not known\n# For V3 API\n#domain_name=&lt;name_of_the_domain&gt;\n#project_name=&lt;name_of_the_project&gt;\n# For Keystone V2 API\n#tenant_name=&lt;name_of_the_project&gt;\n\n[remote]\n#\n# Optional, Used to specify URLs of templates and payloads\n#\n#cache_dir=&lt;a local path to save the downloaded files&gt;\n#templates_uri=https://github.com/your_project/templates.tar\n#payloads_uri=https://github.com/your_project/payloads.tar\n# To disable caching of these remote contents, set the following variable to False\n#enable_caching=True\n\n[logging]\n#\n# Logger options go here\n#\nlog_dir=&lt;location_to_store_log_files&gt;\n# Optional, compresses http_request_content,\n# if you don't want this, set this option to False.\nhttp_request_compression=True\n</pre>\n</div>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>Below are the set of commands that can be specified while\nusing syntribos.</p>\n<ul>\n<li><p><strong>init</strong></p>\n<p>This command sets up the syntribos environment after installation. It will\ncreate the necessary folders for templates, payloads, and logs, as well as\nan example configuration file.</p>\n<pre>$ syntribos init\n</pre>\n<p>To learn more about <tt>syntribos init</tt>, see the installation instructions\n<a href=\"installation.html\" rel=\"nofollow\">here</a></p>\n</li>\n<li><p><strong>run</strong></p>\n<p>This command runs syntribos with the given config options</p>\n<pre>$ syntribos --config-file keystone.conf -t SQL run\n</pre>\n</li>\n<li><p><strong>dry-run</strong></p>\n<p>This command ensures that the template files given for this run parse\nsuccessfully without errors. It then runs a debug test which sends no\nrequests of its own.</p>\n<p>Note: If any external calls referenced inside the template file do make\nrequests, the parser will still make those requests even for a dry run.</p>\n<pre>$ syntribos --config-file keystone.conf dry_run\n</pre>\n</li>\n<li><p><strong>list_tests</strong></p>\n<p>This command will list the names and description of all the tests\nthat can be executed by the <tt>run</tt> command.</p>\n<pre>$ syntribos --config-file keystone.conf list_tests\n</pre>\n</li>\n<li><p><strong>download</strong></p>\n<p>This command will download templates and payload files. By default, it will\ndownload a default set of OpenStack template files (with the \u2013templates\nflag) or our default set of payloads (with the \u2013payloads flag) to your\nsyntribos root directory. However, the behavior of this command can be\nconfigured in the [remote] section of your config file.</p>\n<pre>$ syntribos download --templates\n</pre>\n</li>\n</ul>\n<p>All these commands except init will only work if a configuration file\nis specified. If a configuration file is present in the default\npath ( <tt><span class=\"pre\">~/.syntribos/syntribos.conf</span></tt> ), then you\ndo not need to explicitly specify a config file and\ncan run syntribos using the command <tt>syntribos run</tt>.</p>\n</div>\n<div id=\"running-syntribos\">\n<h2>Running syntribos</h2>\n<p>To run syntribos against all the available tests, just specify the\ncommand <tt>syntribos</tt> with the configuration file without\nspecifying any test type.</p>\n<pre>$ syntribos --config-file keystone.conf run\n</pre>\n<div id=\"fuzzy-matching-test-names\">\n<h3>Fuzzy-matching test names</h3>\n<p>It is possible to limit syntribos to run a specific test type using\nthe <tt><span class=\"pre\">-t</span></tt> flag.</p>\n<pre>$ syntribos --config-file keystone.conf -t SQL run\n</pre>\n<p>This will match all tests that contain <tt>SQL</tt> in their name\nlike SQL_INJECTION_HEADERS, SQL_INJECTION_BODY etc.</p>\n</div>\n<div id=\"specifying-a-custom-root-directory\">\n<h3>Specifying a custom root directory</h3>\n<p>If you set up the syntribos environment with a custom root (i.e. with\n<tt>syntribos init <span class=\"pre\">--custom_install_root</span></tt>), you can point to it with the\n<tt><span class=\"pre\">--syntribos-custom_root</span></tt> configuration option. Syntribos will look for a\n<tt>syntribos.conf</tt> file inside this directory, and will read further\nconfiguration information from there.</p>\n</div>\n</div>\n<div id=\"logging-and-results\">\n<h2>Logging and Results</h2>\n<p>Two types of logs are generated by syntribos, results and debug logs. While\nresults log is the representation of results ( collection of issues ) from a\ngiven syntribos run, debug logs contain debugging information captured during\na particular run. Debug logs may include exception messages, warnings, raw\nbut sanitized request/response data and a few more details as well.\nA modified version of Python logger is used for collecting debug logs in\nsyntribos.</p>\n<div id=\"results-log\">\n<h3>Results Log</h3>\n<p>The results log as described above is a collection of issues (failures and\nerrors) generated at the end of a syntribos run. The \u201cfailures\u201d key represents\ntests that have failed, indicating a possible security vulnerability and the\n\u201cerrors\u201d key gives us information on any unhandled exceptions such as connection\nerrors encountered on that run.</p>\n<p>An example failure object is seen below:</p>\n<pre>{\n   \"defect_type\": \"xss_strings\",\n   \"description\": \"The string(s): '[\\\"&lt;STYLE&gt;@import'http://xss.rocks/xss.css';&lt;/STYLE&gt;\\\"]',\n   known to be commonly returned after a successful XSS attack, have been found in the\n   response. This could indicate a vulnerability to XSS attacks.\",\n   \"failure_id\": 33,\n   \"instances\": [\n      {\n        \"confidence\": \"LOW\",\n        \"param\": {\n          \"location\": \"data\",\n          \"method\": \"POST\",\n          \"type\": null,\n          \"variables\": [\n            \"type\",\n            \"details/name\",\n          ]\n      },\n      \"severity\": \"LOW\",\n      \"signals\": {\n         \"diff_signals\": [\n           \"LENGTH_DIFF_OVER\"\n         ],\n         \"init_signals\": [\n           \"HTTP_CONTENT_TYPE_JSON\",\n           \"HTTP_STATUS_CODE_2XX_201\"\n         ],\n         \"test_signals\": [\n           \"FAILURE_KEYS_PRESENT\",\n           \"HTTP_CONTENT_TYPE_JSON\",\n           \"HTTP_STATUS_CODE_2XX_201\",\n         ]\n      },\n      \"strings\": [\n        \"&lt;STYLE&gt;@import'http://xss.rocks/xss.css';&lt;/STYLE&gt;\"\n         ]\n      }\n   ],\n   \"url\": \"127.0.0.1/test\"\n}\n</pre>\n<p>Errors take the form:</p>\n<pre>ERROR:\n{\n  \"error\": \"Traceback (most recent call last):\\n  File \\\"/Users/test/syntribos/tests/fuzz/base_fuzz.py\\\",\n   line 58, in tearDownClass\\n    super(BaseFuzzTestCase, cls).tearDownClass()\\n\n   File \\\"/Users/test/syntribos/tests/base.py\\\", line 166, in tearDownClass\\n\n   raise sig.data[\\\"exception\\\"]\\nReadTimeout: HTTPConnectionPool(host='127.0.0.1', port=8080):\n   Read timed out. (read timeout=10)\\n\",\n   \"test\": \"tearDownClass (syntribos.tests.fuzz.sql.image_data_image_data_get.template_SQL_INJECTION_HEADERS_sql-injection.txt_str21_model1)\"\n}\n</pre>\n</div>\n<div id=\"debug-logs\">\n<h3>Debug Logs</h3>\n<p>Debug logs include details about HTTP requests and responses, and other debugging\ninformation like errors and warnings across the project. The default path where\ndebug logs are saved is <tt>.syntribos/logs/</tt>. Debug logs are arranged in\ndirectories based on the timestamp and in these directories, in files named\naccording to the templates.</p>\n<p>For example:</p>\n<pre>$ ls .syntribos/logs/\n2016-09-15_11:06:37.198412 2016-09-16_10:11:37.834892 2016-09-16_13:31:36.362584\n2016-09-15_11:34:33.271606 2016-09-16_10:38:55.820827 2016-09-16_13:36:43.151048\n2016-09-15_11:41:53.859970 2016-09-16_10:39:50.501820 2016-09-16_13:40:23.203920\n</pre>\n<pre>$ ls .syntribos/logs/2016-09-16_13:31:36.362584\nAPI_Versions::list_versions_template.log\nAPI_Versions::show_api_details_template.log\navailability_zones::get_availability_zone_detail_template.log\navailability_zones::get_availability_zone_template.log\ncells::delete_os_cells_template.log\ncells::get_os_cells_capacities_template.log\ncells::get_os_cells_data_template.log\n</pre>\n<p>Each log file includes some essential debugging information like the string representation\nof the request object, signals and checks used for tests etc.</p>\n<p>The request:</p>\n<pre>------------\nREQUEST SENT\n------------\nrequest method.......: PUT\nrequest url..........: http://127.0.0.1/api\nrequest params.......:\nrequest headers size.: 7\nrequest headers......: {'Content-Length': '0', 'Accept-Encoding': 'gzip, deflate',\n'Accept': 'application/json',\n'X-Auth-Token': &lt;uuid&gt;, 'Connection': 'keep-alive',\n'User-Agent': 'python-requests/2.11.1', 'content-type': 'application/xml'}\nrequest body size....: 0\nrequest body.........: None\n</pre>\n<p>The response:</p>\n<pre>-----------------\nRESPONSE RECEIVED\n-----------------\nresponse status..: &lt;Response [415]&gt;\nresponse headers.: {'Content-Length': '70',\n'X-Compute-Request-Id': &lt;random id&gt;,\n'Vary': 'OpenStack-API-Version, X-OpenStack-Nova-API-Version',\n'Openstack-Api-Version': 'compute 2.1', 'Connection': 'close',\n'X-Openstack-Nova-Api-Version': '2.1', 'Date': 'Fri, 16 Sep 2016 14:15:27 GMT',\n'Content-Type': 'application/json; charset=UTF-8'}\nresponse time....: 0.036277\nresponse size....: 70\nresponse body....: {\"badMediaType\": {\"message\": \"Unsupported Content-Type\", \"code\": 415}}\n-------------------------------------------------------------------------------\n[2590]  :  XSS_BODY\n(&lt;syntribos.clients.http.client.SynHTTPClient object at 0x102c65f10&gt;, 'PUT',\n'http://127.0.0.1/api')\n{'headers': {'Accept': 'application/json', 'X-Auth-Token': &lt;uuid&gt; },\n'params': {}, 'sanitize': False, 'data': '', 'requestslib_kwargs': {'timeout': 10}}\nStarting new HTTP connection (1): 127.0.0.1\n\"PUT http://127.0.0.1/api HTTP/1.1\" 501 93\n</pre>\n<p>And the signals captured:</p>\n<pre>Signals: ['HTTP_STATUS_CODE_4XX_400', 'HTTP_CONTENT_TYPE_JSON']\nChecks used: ['HTTP_STATUS_CODE', 'HTTP_CONTENT_TYPE']\n</pre>\n<p>Debug logs are sanitized to prevent storing secrets to log files.\nPasswords and other sensitive information are masked with astericks using a\nslightly modified version of <a href=\"http://docs.openstack.org/developer/oslo.utils/api/strutils.html#oslo_utils.strutils.mask_password\" rel=\"nofollow\">oslo_utils.strutils.mask_password</a></p>\n<p>Debug logs also includes body compression, wherein long fuzz strings are\ncompressed before being written to the logs. The threshold to start data\ncompression is set to 512 characters. While compression can be turned off\nby setting the variable \u201chttp_request_compression\u201d under logging section\nin the config file to <tt>False</tt>, it is not recommended.</p>\n</div>\n</div>\n<div id=\"anatomy-of-a-request-template\">\n<h2>Anatomy of a request template</h2>\n<p>This section will give you a brief idea on writing templates\nand on how to run specific tests. Templates are input files which has\nraw http requests and may also be supplemented with variable\ndata using extensions.</p>\n<p>Syntribos template files are ordinary text files containing raw http\nrequests.</p>\n<div id=\"using-external-functions-in-templates\">\n<h3>Using external functions in templates</h3>\n<p>These template files can also be supplemented with variable\ndata, or data retrieved from external sources. This is handled\nusing \u2018extensions.\u2019</p>\n<p>Extensions are found in <tt>syntribos/extensions/</tt> .</p>\n<p>Calls to extensions are made in this form:</p>\n<pre>CALL_EXTERNAL|{extension dot path}:{function}:{arguments}\n</pre>\n<p>One example packaged with syntribos enables the tester to obtain an auth\ntoken from keystone. The code is located in <tt>identity/client.py</tt></p>\n<p>To use this extension, you can add the following to your template file:</p>\n<pre>X-Auth-Token: CALL_EXTERNAL|syntribos.extensions.identity.client:get_token_v3:[\"user\"]|\n</pre>\n<p>The \u201cuser\u201d string indicates the data from the configuration file we\nadded in <tt>examples/configs/keystone.conf</tt></p>\n<p>Another example is found in <tt>random_data/client.py</tt> . This returns a\nUUID when random but unique data is needed. This can be used in place of\nusernames when fuzzing a create user call.</p>\n<pre>\"username\": \"CALL_EXTERNAL|syntribos.extensions.random_data.client:get_uuid:[]|\"\n</pre>\n<p>The extension function can return one value or be used as a generator if\nyou want it to change for each test.</p>\n<div id=\"built-in-functions\">\n<h4>Built in functions</h4>\n<p>Syntribos comes with a slew of utility functions/extensions, these functions can\nbe used to dynamically inject data into templates.</p>\n<table>\n<caption><strong>Utility Functions</strong></caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Method</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>hash_it</td>\n<td>[data, hash_type (optional hash type, default being SHA256)]</td>\n<td>Returns hashed value of data</td>\n</tr>\n<tr><td>hmac_it</td>\n<td>[data, key, hash_type (optional hash type, default being SHA256)]</td>\n<td>Returns HMAC based on the has algorithm, data and the key provided</td>\n</tr>\n<tr><td>epoch_time</td>\n<td>[offset (optional integer offset value, default is zero)]</td>\n<td>Returns the current time minus offset since epoch</td>\n</tr>\n<tr><td>utc_datetime</td>\n<td>[]</td>\n<td>Returns current UTC date time</td>\n</tr>\n<tr><td>base64_encode</td>\n<td>[data]</td>\n<td>Returns base 64 encoded value of data supplied</td>\n</tr>\n<tr><td>url_encode</td>\n<td>[url]</td>\n<td>Returns encoded URL</td>\n</tr>\n</tbody>\n</table>\n<p>All these utility functions can be called using:</p>\n<pre>CALL_EXTERNAL|common_utils.client.{method_name}:{comma separated parameters in square brackets}\n</pre>\n<p>For example:</p>\n<pre>\"encoded_url\": \"CALL_EXTERNAL|common_utils.client:url_encode:['http://localhost:5000']|\n</pre>\n<p>There are a few other functions that return random values as well, they are:</p>\n<table>\n<caption><strong>Random Functions</strong></caption>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Method</th>\n<th>Parameters</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>get_uuid</td>\n<td>[]</td>\n<td>Returns a random UUID</td>\n</tr>\n<tr><td>random_port</td>\n<td>[]</td>\n<td>Returns random port number between 0 and 65535</td>\n</tr>\n<tr><td>random_ip</td>\n<td>[]</td>\n<td>Returns random ipv4 address</td>\n</tr>\n<tr><td>random_mac</td>\n<td>[]</td>\n<td>Returns random mac address</td>\n</tr>\n<tr><td>random_integer</td>\n<td>[beg (optional beginning value, default is 0), end (optional end value)]</td>\n<td>Returns an integer value between 0 and 1468029570 by default</td>\n</tr>\n<tr><td>random_utc_datetime</td>\n<td>[]</td>\n<td>Returns random UTC datetime</td>\n</tr>\n</tbody>\n</table>\n<p>These can be called using:</p>\n<pre>CALL_EXTERNAL|random_data.client.{method_name}:{comma separated parameters in square brackets}\n</pre>\n<p>For example,</p>\n<pre>\"address\": \"CALL_EXTERNAL|random_data.client:random_ip:[]|\"\n</pre>\n</div>\n</div>\n<div id=\"action-field\">\n<h3>Action Field</h3>\n<p>While syntribos is designed to test all fields in a request, it can also\nignore specific fields through the use of Action Fields. If you want to\nfuzz against a static object ID, use the Action Field indicator as\nfollows:</p>\n<pre>\"ACTION_FIELD:id\": \"1a16f348-c8d5-42ec-a474-b1cdf78cf40f\"\n</pre>\n<p>The ID provided will remain static for every test.</p>\n</div>\n<div id=\"running-a-specific-test\">\n<h3>Running a specific test</h3>\n<p>As mentioned above, some tests included with syntribos by default\nare LDAP injection, SQL injection, integer overflow, command injection,\nXML external entity, reflected cross-site scripting,\nCross Origin Resource Sharing (CORS) wildcard and SSL.</p>\n<p>In order to run a specific test, simply use the <tt><span class=\"pre\">-t,</span> <span class=\"pre\">--test-types</span></tt>\noption and provide <cite>syntribos</cite> with a keyword or keywords to match from\nthe test files located in <tt>syntribos/tests/</tt>.</p>\n<p>For SQL injection tests, use:</p>\n<pre>$ syntribos --config-file keystone.conf -t SQL\n</pre>\n<p>Another example, to run SQL injection tests against the template body only,\nuse:</p>\n<pre>$ syntribos --config-file keystone.conf -t SQL_INJECTION_BODY\n</pre>\n<p>For all tests against HTTP headers only, use:</p>\n<pre>$ syntribos --config-file keystone.conf -t HEADERS\n</pre>\n</div>\n</div>\n<div id=\"executing-unittests\">\n<h2>Executing unittests</h2>\n<p>To execute unittests automatically, navigate to the <tt>syntribos</tt> root\ndirectory and install the test requirements.</p>\n<pre>$ pip install -r test-requirements.txt\n</pre>\n<p>Now, run</p>\n<pre>$ python -m unittest discover tests/unit -p \"test_*.py\"\n</pre>\n<p>If you have configured tox you could also do</p>\n<pre>$ tox -e py27\n$ tox -e py35\n</pre>\n<p>This will run all the unittests and give you a result output\ncontaining the status and coverage details of each test.</p>\n</div>\n<div id=\"contributing-guidelines\">\n<h2>Contributing Guidelines</h2>\n<p>Syntribos is an open source project and contributions are always\nwelcome, if you have any questions, we can be found in the\n#openstack-security channel on Freenode IRC.</p>\n<ol>\n<li>Follow all the <a href=\"http://docs.openstack.org/developer/hacking/\" rel=\"nofollow\">OpenStack Style Guidelines</a>\n(e.g. PEP8, Py3 compatibility)</li>\n<li>All new classes/functions should have appropriate docstrings in\n<a href=\"https://pythonhosted.org/an_example_pypi_project/sphinx.html\" rel=\"nofollow\">RST format</a></li>\n<li>All new code should have appropriate unittests (place them in the\n<tt>tests/unit</tt> folder)</li>\n<li>Any change you make can be tested using tox:</li>\n</ol>\n<pre>pip install tox\ntox -e pep8\ntox -e py27\ntox -e py35\ntox -e cover\n</pre>\n<p>Anyone wanting to contribute to OpenStack must follow\n<a href=\"http://docs.openstack.org/infra/manual/developers.html#development-workflow\" rel=\"nofollow\">the OpenStack development workflow</a></p>\n<p>All changes should be submitted through the code review process in Gerrit\ndescribed above. All pull requests on Github will be closed/ignored.</p>\n<p>Bugs should be filed on the <a href=\"https://bugs.launchpad.net/syntribos\" rel=\"nofollow\">syntribos launchpad site</a>,\nand not on Github. All Github issues will be closed/ignored.</p>\n<p>Breaking changes, feature requests, and other unprioritized work should first be\nsubmitted as a blueprint <a href=\"https://blueprints.launchpad.net/syntribos\" rel=\"nofollow\">here</a>\nfor review.</p>\n<p><strong>Note:</strong> README.rst is an auto generated file, from the rst files in the\ndocs directory. The file can be generated by running <tt>python readme.py</tt>\nfrom the <tt>syntribos/scripts</tt> directory. When the README needs to be\nupdated; modify the corresponding rst file in <tt>syntribos/doc/source</tt>\nand generate it by running the script.</p>\n</div>\n\n          </div>"}, "last_serial": 5444457, "releases": {"0.3.1.dev91": [{"comment_text": "", "digests": {"md5": "c7040c65ed2858f574e274c58b43ac24", "sha256": "7ae04375ee6aad0f49dc96ec04fa93ec9568bd64d842f5643516471bef993ac6"}, "downloads": -1, "filename": "ak-syntribos-0.3.1.dev91.tar.gz", "has_sig": false, "md5_digest": "c7040c65ed2858f574e274c58b43ac24", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 140088, "upload_time": "2017-06-14T04:54:03", "upload_time_iso_8601": "2017-06-14T04:54:03.354018Z", "url": "https://files.pythonhosted.org/packages/9c/4f/4b00d71e3edf7ce6dcdce12f1d1b57a1c7235aa3f52ca3c208d2691f1584/ak-syntribos-0.3.1.dev91.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "37f591937b4799fb45200c862b849da4", "sha256": "eaf7c7904841e7f32eaabcceba134c4d5f053c2bad0da71829c169dfd4725c29"}, "downloads": -1, "filename": "ak_syntribos-0.3.2-py2-none-any.whl", "has_sig": false, "md5_digest": "37f591937b4799fb45200c862b849da4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17160, "upload_time": "2019-06-24T22:43:29", "upload_time_iso_8601": "2019-06-24T22:43:29.214944Z", "url": "https://files.pythonhosted.org/packages/18/3a/272e7c61dd65535abb209e00f21f0b5c3610505092e27fde468e306ffe8d/ak_syntribos-0.3.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "982b33123e09e24c4b1360223a0b5a7f", "sha256": "ba5b009c1141a1204154d78f36030a7768c7fdd83c05e5f41da8711583b640b8"}, "downloads": -1, "filename": "ak-syntribos-0.3.2.tar.gz", "has_sig": false, "md5_digest": "982b33123e09e24c4b1360223a0b5a7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157335, "upload_time": "2019-06-24T22:43:31", "upload_time_iso_8601": "2019-06-24T22:43:31.985153Z", "url": "https://files.pythonhosted.org/packages/a0/8e/6218444dd6853cfcb80c4734822841060f3072237fd3ed997106a509e366/ak-syntribos-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "ffcfb0e8e99796c69d9307016e9db7e8", "sha256": "08da367437bda5a71ca8fbad3f2ec072d1c962c818828bcfb69758dbdacdc2fc"}, "downloads": -1, "filename": "ak_syntribos-0.3.3-py2-none-any.whl", "has_sig": false, "md5_digest": "ffcfb0e8e99796c69d9307016e9db7e8", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17159, "upload_time": "2019-06-25T05:57:30", "upload_time_iso_8601": "2019-06-25T05:57:30.939773Z", "url": "https://files.pythonhosted.org/packages/d2/c6/5b0d8777f74d8d8d42af81d9585387ce1e5b7e1bab0f2902651af024af21/ak_syntribos-0.3.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0fead4aee3705f36624034c4e2613748", "sha256": "97ac6be4f36178bc8b81db2be1c2ef771563db7934243d0c1a24c00afc605e70"}, "downloads": -1, "filename": "ak-syntribos-0.3.3.tar.gz", "has_sig": false, "md5_digest": "0fead4aee3705f36624034c4e2613748", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157355, "upload_time": "2019-06-25T05:57:33", "upload_time_iso_8601": "2019-06-25T05:57:33.072652Z", "url": "https://files.pythonhosted.org/packages/7c/7b/b8f63f3e34d41ce5798bbeb256702145a222a2c85e2b10f71ce4fc1e1c37/ak-syntribos-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "d7b170be0db5fc00c3e32c3a74cb71a4", "sha256": "6ad1143241bfadb837fda066e1f8b2a2f55e42613e630986bc23ec8ae6d817ca"}, "downloads": -1, "filename": "ak_syntribos-0.3.4-py2-none-any.whl", "has_sig": false, "md5_digest": "d7b170be0db5fc00c3e32c3a74cb71a4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 111490, "upload_time": "2019-06-25T08:28:21", "upload_time_iso_8601": "2019-06-25T08:28:21.750986Z", "url": "https://files.pythonhosted.org/packages/ef/ce/80325401db86f2c051bbc98e2c5ed851a1d70a3cd51d9a7e21eee9c3db5f/ak_syntribos-0.3.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65f72465bea855f996a175d2e5b16fcb", "sha256": "de872c96232238986a51be69e9ce74826fcd856bae633a7aee0729c1c3f65bac"}, "downloads": -1, "filename": "ak-syntribos-0.3.4.tar.gz", "has_sig": false, "md5_digest": "65f72465bea855f996a175d2e5b16fcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157419, "upload_time": "2019-06-25T08:28:23", "upload_time_iso_8601": "2019-06-25T08:28:23.852088Z", "url": "https://files.pythonhosted.org/packages/6e/b7/d6eb157837c57fd8e546f1e6243844b9a9e02412b007fd01e716ef3ecba9/ak-syntribos-0.3.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d7b170be0db5fc00c3e32c3a74cb71a4", "sha256": "6ad1143241bfadb837fda066e1f8b2a2f55e42613e630986bc23ec8ae6d817ca"}, "downloads": -1, "filename": "ak_syntribos-0.3.4-py2-none-any.whl", "has_sig": false, "md5_digest": "d7b170be0db5fc00c3e32c3a74cb71a4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 111490, "upload_time": "2019-06-25T08:28:21", "upload_time_iso_8601": "2019-06-25T08:28:21.750986Z", "url": "https://files.pythonhosted.org/packages/ef/ce/80325401db86f2c051bbc98e2c5ed851a1d70a3cd51d9a7e21eee9c3db5f/ak_syntribos-0.3.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65f72465bea855f996a175d2e5b16fcb", "sha256": "de872c96232238986a51be69e9ce74826fcd856bae633a7aee0729c1c3f65bac"}, "downloads": -1, "filename": "ak-syntribos-0.3.4.tar.gz", "has_sig": false, "md5_digest": "65f72465bea855f996a175d2e5b16fcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 157419, "upload_time": "2019-06-25T08:28:23", "upload_time_iso_8601": "2019-06-25T08:28:23.852088Z", "url": "https://files.pythonhosted.org/packages/6e/b7/d6eb157837c57fd8e546f1e6243844b9a9e02412b007fd01e716ef3ecba9/ak-syntribos-0.3.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:20:08 2020"}