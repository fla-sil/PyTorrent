{"info": {"author": "Guillaume Gelin", "author_email": "contact@ramnes.eu", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Flask-Aggregator\n================\n\n.. image:: https://img.shields.io/pypi/v/flask-aggregator.svg\n\nBatch the GET requests to your API into a single POST. Save requests latency and\nreduce REST chatiness.\n\nI was inspired by `this article\n<http://tech.3scale.net/2013/04/18/accelerate-your-mobile-api-with-nginx-and-lua/>`_\nfrom 3scale, and by `their NGINX aggregator\n<https://github.com/solso/api-aggregator>`_ - but I wanted something simpler.\n\n\nWhat does it do?\n----------------\n\nFlask-Aggregator adds an endpoint to your Flask application that handles\nmultiple GET requests in a single POST, and returns the response of each GET\nrequest in a JSON stream.\n\n\nWhat does that mean?\n--------------------\n\nIt means that instead of sending multiple GET requests:\n\n.. code-block:: sh\n\n   -> GET /route1\n   <- answer1\n   -> GET /route2\n   <- answer2\n   -> GET /route3\n   <- answer3\n\n\nYou can now just send a single POST that aggregates them all:\n\n.. code-block:: sh\n\n  -> POST /aggregate [\"/route1\", \"/route2\", \"/route3\"]\n  <- {\n         \"/route1\": answer1,\n  <-     \"/route2\": answer2,\n  <-     \"/route3\": answer3\n     }\n\n\nWhy?\n----\n\nMobile networks.\n\n\nHow to install?\n---------------\n\n.. code-block:: sh\n\n    $ pip install flask-aggregator\n\n\nHow to setup my application?\n----------------------------\n\n.. code-block:: python\n\n   from flask import Flask\n   from flask_aggregator import Aggregator\n\n   app = Flask(__name__)\n   Aggregator(app=app, endpoint=\"/batch\")\n\n\nHow to aggregate?\n-----------------\n\n.. code-block:: sh\n\n   $ python example.py\n   [go to another shell]\n   $ curl -H \"Content-type: application/json\" -X POST 127.0.0.1:5000/batch \\\n                --data-raw '[\"/hello/world\", \"/hello/ramnes?question=Sup?\"]'\n   {\n       \"/hello/world\": \"Hello, world!\",\n       \"/hello/ramnes?question=Sup?\": \"Hello, ramnes! Sup?\"\n   }\n\n\nIs it ready for production yet?\n-------------------------------\n\nNot really.\n\nAs of today, Flask-Aggregator executes the aggregated requests in a\nsynchronous manner, which makes it only useful if latency is a real issue and\nresponse time is not, and that more than N requests are sent at the same time,\nwhere N is maximum number of concurrent requests on user's client.\n\nAlso, it has limitations such has:\n\n* no automatic caching mechanism browser-side, since it uses a POST request\n* no header support at all for now, which means no cookie, etag, or whatever\n* no other HTTP verb than GET is supported for now\n\nLast but not least, chances are high that a lot of corner cases are not handled.\n\n\nLicense\n-------\n\nMIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ramnes/flask-aggregator", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "Flask-Aggregator", "package_url": "https://pypi.org/project/Flask-Aggregator/", "platform": "any", "project_url": "https://pypi.org/project/Flask-Aggregator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ramnes/flask-aggregator"}, "release_url": "https://pypi.org/project/Flask-Aggregator/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Batch the GET requests to your REST API into a single POST", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://img.shields.io/pypi/v/flask-aggregator.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/814130715e83450cc7569a9cadd96346c7513f26/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f666c61736b2d61676772656761746f722e737667\">\n<p>Batch the GET requests to your API into a single POST. Save requests latency and\nreduce REST chatiness.</p>\n<p>I was inspired by <a href=\"http://tech.3scale.net/2013/04/18/accelerate-your-mobile-api-with-nginx-and-lua/\" rel=\"nofollow\">this article</a>\nfrom 3scale, and by <a href=\"https://github.com/solso/api-aggregator\" rel=\"nofollow\">their NGINX aggregator</a> - but I wanted something simpler.</p>\n<div id=\"what-does-it-do\">\n<h2>What does it do?</h2>\n<p>Flask-Aggregator adds an endpoint to your Flask application that handles\nmultiple GET requests in a single POST, and returns the response of each GET\nrequest in a JSON stream.</p>\n</div>\n<div id=\"what-does-that-mean\">\n<h2>What does that mean?</h2>\n<p>It means that instead of sending multiple GET requests:</p>\n<pre>-&gt; GET /route1\n&lt;- answer1\n-&gt; GET /route2\n&lt;- answer2\n-&gt; GET /route3\n&lt;- answer3\n</pre>\n<p>You can now just send a single POST that aggregates them all:</p>\n<pre>-&gt; POST /aggregate <span class=\"o\">[</span><span class=\"s2\">\"/route1\"</span>, <span class=\"s2\">\"/route2\"</span>, <span class=\"s2\">\"/route3\"</span><span class=\"o\">]</span>\n&lt;- <span class=\"o\">{</span>\n       <span class=\"s2\">\"/route1\"</span>: answer1,\n&lt;-     <span class=\"s2\">\"/route2\"</span>: answer2,\n&lt;-     <span class=\"s2\">\"/route3\"</span>: answer3\n   <span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>Mobile networks.</p>\n</div>\n<div id=\"how-to-install\">\n<h2>How to install?</h2>\n<pre>$ pip install flask-aggregator\n</pre>\n</div>\n<div id=\"how-to-setup-my-application\">\n<h2>How to setup my application?</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span>\n<span class=\"kn\">from</span> <span class=\"nn\">flask_aggregator</span> <span class=\"kn\">import</span> <span class=\"n\">Aggregator</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">Aggregator</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">=</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">endpoint</span><span class=\"o\">=</span><span class=\"s2\">\"/batch\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"how-to-aggregate\">\n<h2>How to aggregate?</h2>\n<pre>$ python example.py\n<span class=\"o\">[</span>go to another shell<span class=\"o\">]</span>\n$ curl -H <span class=\"s2\">\"Content-type: application/json\"</span> -X POST <span class=\"m\">127</span>.0.0.1:5000/batch <span class=\"se\">\\\n</span>             --data-raw <span class=\"s1\">'[\"/hello/world\", \"/hello/ramnes?question=Sup?\"]'</span>\n<span class=\"o\">{</span>\n    <span class=\"s2\">\"/hello/world\"</span>: <span class=\"s2\">\"Hello, world!\"</span>,\n    <span class=\"s2\">\"/hello/ramnes?question=Sup?\"</span>: <span class=\"s2\">\"Hello, ramnes! Sup?\"</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"is-it-ready-for-production-yet\">\n<h2>Is it ready for production yet?</h2>\n<p>Not really.</p>\n<p>As of today, Flask-Aggregator executes the aggregated requests in a\nsynchronous manner, which makes it only useful if latency is a real issue and\nresponse time is not, and that more than N requests are sent at the same time,\nwhere N is maximum number of concurrent requests on user\u2019s client.</p>\n<p>Also, it has limitations such has:</p>\n<ul>\n<li>no automatic caching mechanism browser-side, since it uses a POST request</li>\n<li>no header support at all for now, which means no cookie, etag, or whatever</li>\n<li>no other HTTP verb than GET is supported for now</li>\n</ul>\n<p>Last but not least, chances are high that a lot of corner cases are not handled.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n\n          </div>"}, "last_serial": 2580415, "releases": {"0.1.1": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "5c5745748e9d8ed30caddf8301f0bce9", "sha256": "40d8f18869fa5c2e1e797625e7961145109213205e9edafb0604c6681a1c64b2"}, "downloads": -1, "filename": "Flask-Aggregator-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5c5745748e9d8ed30caddf8301f0bce9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2891, "upload_time": "2017-01-09T11:12:40", "upload_time_iso_8601": "2017-01-09T11:12:40.642617Z", "url": "https://files.pythonhosted.org/packages/d6/fc/4ad93eba644171f9e1ea077665428c0a9389ce1d074257b4b98c0b854299/Flask-Aggregator-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "eed9be6cc0442d4185687ce1c8f9fc93", "sha256": "80cc643beaa9904b0d56bfce22e36cc642d26423fe9137a29b4ff1c549222f9c"}, "downloads": -1, "filename": "Flask-Aggregator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eed9be6cc0442d4185687ce1c8f9fc93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3273, "upload_time": "2017-01-17T18:54:20", "upload_time_iso_8601": "2017-01-17T18:54:20.486660Z", "url": "https://files.pythonhosted.org/packages/b5/2b/4154c6a72e7b03b6dd2eabc489832768cf8aae2610a445df0478c283d620/Flask-Aggregator-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eed9be6cc0442d4185687ce1c8f9fc93", "sha256": "80cc643beaa9904b0d56bfce22e36cc642d26423fe9137a29b4ff1c549222f9c"}, "downloads": -1, "filename": "Flask-Aggregator-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eed9be6cc0442d4185687ce1c8f9fc93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3273, "upload_time": "2017-01-17T18:54:20", "upload_time_iso_8601": "2017-01-17T18:54:20.486660Z", "url": "https://files.pythonhosted.org/packages/b5/2b/4154c6a72e7b03b6dd2eabc489832768cf8aae2610a445df0478c283d620/Flask-Aggregator-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:03:10 2020"}