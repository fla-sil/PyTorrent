{"info": {"author": "Pavel Polishchuk", "author_email": "pavel_polishchuk@ukr.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Chemistry"], "description": "# Pmapper - 3D pharmacophore signatures and fingerprints\n\nPmapper is a Python module to generate 3D pharmacophore signatures and fingerprints.\nSignatures uniquely encode 3D pharmacophores with hashes suitable for fast identification of identical pharmacophores.\n\n## Dependency\n\n`rdkit >= 2017.09`  \n`networkx >= 2`\n\n## Installation\n```text\npip install pmapper\n```\n\n## Examples\n\n### Load modules\n```python\nfrom pmapper.pharmacophore import Pharmacophore as P\nfrom rdkit import Chem\nfrom rdkit.Chem import AllChem\nfrom pprint import pprint\n```\n### Create pharmacophore from a single conformer using default feature definitions\n```python\n# load a molecule from SMILES and generate 3D coordinates\nmol = Chem.MolFromSmiles('C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O')  # talidomide\nmol = Chem.AddHs(mol)\nAllChem.EmbedMolecule(mol, randomSeed=42)\n\n# create pharmacophore\np = P()\np.load_from_mol(mol)\n```\n### Get 3D pharmacophore signature\n```python\n# get 3D pharmacophore signature\nsig = p.get_signature_md5()\nprint(sig)\n```\nOutput:\n```text\n98504647beeb143ae50bb6b7798ca0f0\n```\n### Get 3D pharmacophore signature with non-zero tolerance\n```python\nsig = p.get_signature_md5(tol=5)\nprint(sig)\n```\nOutput:\n```text\nbc54806ba01bf59736a7b62b017d6e1d\n```\n### Create pharmacophores for a multiple conformer compound\n```python\nfrom pmapper.utils import load_multi_conf_mol\n\n# create multiple conformer molecule\nAllChem.EmbedMultipleConfs(mol, numConfs=10, randomSeed=1024)\n\nps = load_multi_conf_mol(mol)\n\nsig = [p.get_signature_md5() for p in ps]\n\npprint(sig)  # identical signatures occur\n```\nOutput:\n```text\n['d5f5f9d65e39cb8605f1fa9db5b2fbb0',\n '6204791002d1e343b2bde323149fa780',\n 'abfabd8a4fcf5719ed6bf2c71a60852c',\n 'dfe9f17d30210cb94b8dd7acf77feae9',\n 'abfabd8a4fcf5719ed6bf2c71a60852c',\n 'e739fb5f9985ce0c65a16da41da4a33f',\n '2297ddf0e437b7fc32077f75e3924dcd',\n 'e739fb5f9985ce0c65a16da41da4a33f',\n '182a00bd9057abd0c455947d9cfa457c',\n '68f226d474808e60ab1256245f64c2b7']\n```\nIdentical hashes should correspond to pharmacophores with low RMSD. Pharmacophores #2 and #4 have identical hash `abfabd8a4fcf5719ed6bf2c71a60852c`. Let's check RMSD.\n```python\nfrom pmapper.utils import get_rms\nfor i in range(len(ps)):\n    print(\"rmsd bewteen 2 and %i pharmacophore:\" % i, round(get_rms(ps[2], ps[i]), 2))\n```\nOutput\n```text\nrmsd bewteen 2 and 0 pharmacophore: 0.63\nrmsd bewteen 2 and 1 pharmacophore: 0.99\nrmsd bewteen 2 and 2 pharmacophore: 0.0\nrmsd bewteen 2 and 3 pharmacophore: 0.41\nrmsd bewteen 2 and 4 pharmacophore: 0.18\nrmsd bewteen 2 and 5 pharmacophore: 0.19\nrmsd bewteen 2 and 6 pharmacophore: 1.15\nrmsd bewteen 2 and 7 pharmacophore: 0.32\nrmsd bewteen 2 and 8 pharmacophore: 0.69\nrmsd bewteen 2 and 9 pharmacophore: 0.36\n```\nThey really have RMSD < binning step (1A by default). However, other pharmacophores with distinct hashes also have low RMSD to #2. Identical hashes guarantee low RMSD between corresponding pharmacophores, but not vice versa.\n\n### Pharmacophore match\nCreate a two-point pharmacophore model and match with a pharmacophore of a molecule (both pharmacophores should have identical binning steps)\n```python\nq = P()\nq.load_from_feature_coords([('a', (3.17, -0.23, 0.24)), ('D', (-2.51, -1.28, -1.14))])\np.fit_model(q)\n```\nOutput\n```text\n(0, 1)\n```\nIf they do not match `None` will be returned\n\n### Generate 3D pharmacophore fingerprint\n```python\n# generate 3D pharmacophore fingerprint which takes into account stereoconfiguration\nb = p.get_fp(min_features=4, max_features=4)   # set of activated bits\nprint(b)\n```\nOutput (a set of activated bit numbers):\n```text\n{259, 1671, 521, 143, 912, 402, 278, 406, 1562, 1692, 1835, 173, 558, 1070, 942, 1202, 1845, 823, 1476, 197, 968, 1355, 845, 1741, 1364, 87, 1881, 987, 1515, 378, 628, 1141, 1401, 1146, 2043}\n```\nChange settings:\n```python\nb = p.get_fp(min_features=4, max_features=4, nbits=4096, activate_bits=2)\nprint(b)\n```\nOutput (a set of activated bit numbers):\n```text\n{389, 518, 2821, 1416, 2952, 395, 3339, 511, 3342, 1937, 1042, 2710, 1817, 1690, 3482, 3737, 286, 1824, 1700, 804, 1318, 2729, 3114, 812, 556, 175, 3763, 2356, 3124, 1077, 1975, 3384, 1081, 185, 65, 1223, 713, 1356, 1998, 1487, 2131, 85, 3670, 1877, 3030, 2395, 1116, 2141, 1885, 347, 2404, 1382, 1257, 3049, 2795, 3691, 2541, 1646, 2283, 241, 113, 3698, 756, 2548, 4086, 2293, 1528, 2802, 127}\n```\n### Save/load pharmacophore\n```python\np.save_to_pma('filename.pma')\n```\nOutput is a text file having json format.\n```python\np = P()\np.load_from_pma('filename.pma')\n```\n### Support other formats\nPharmacophores can be saved/loaded from LigandScout pml-files. Also pharmacophores can be read from xyz-files.\n\n### Caching\nPharmacophores can be created with enabled `cache` argument. This will speed up all futher repeated calls to retrive hash, fingerprints or descriptors.\n```python\np = P(cache=True)\n```\n\n## Speed tests\nGeneration of pharmacophore signatures (hashes) is a CPU-bound task. The computation speed depends on the number of features in pharmacophores.  \nTests were run on a random subset of compounds from Drugbank. Up to 50 conformers were generated for each compound.   \nLaptop configuration:\n- Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz\n- 12 GB RAM\n- calculation was run in 1 thread (the module is thread safe and calculations can be parallelized)\n\nTo run the speed test use `pmapper_speed_test` command line tool\n\n```text\n========== Reading of conformers of molecules ==========\n329 molecules were read in 0.0134 s\n\n========== Creation of pharmacophores (with enabled caching) ==========\n1938 pharmacophores were created in 3.17065 s\n\n========== First calculation of hashes ==========\n2 pharmacophores with 0 features - 0.00014s or 7e-05s per pharmacophore\n2 pharmacophores with 1 features - 0.0001s or 5e-05s per pharmacophore\n12 pharmacophores with 2 features - 0.00042s or 3e-05s per pharmacophore\n44 pharmacophores with 3 features - 0.00212s or 5e-05s per pharmacophore\n100 pharmacophores with 4 features - 0.00933s or 9e-05s per pharmacophore\n103 pharmacophores with 5 features - 0.05155s or 0.0005s per pharmacophore\n105 pharmacophores with 6 features - 0.10857s or 0.00103s per pharmacophore\n109 pharmacophores with 7 features - 0.25322s or 0.00232s per pharmacophore\n117 pharmacophores with 8 features - 0.59508s or 0.00509s per pharmacophore\n101 pharmacophores with 9 features - 0.8795s or 0.00871s per pharmacophore\n105 pharmacophores with 10 features - 1.61349s or 0.01537s per pharmacophore\n100 pharmacophores with 11 features - 2.24937s or 0.02249s per pharmacophore\n103 pharmacophores with 12 features - 3.53308s or 0.0343s per pharmacophore\n117 pharmacophores with 13 features - 6.49837s or 0.05554s per pharmacophore\n103 pharmacophores with 14 features - 7.54796s or 0.07328s per pharmacophore\n142 pharmacophores with 15 features - 14.92654s or 0.10512s per pharmacophore\n104 pharmacophores with 16 features - 13.86378s or 0.13331s per pharmacophore\n100 pharmacophores with 17 features - 17.94023s or 0.1794s per pharmacophore\n120 pharmacophores with 18 features - 28.01455s or 0.23345s per pharmacophore\n136 pharmacophores with 19 features - 42.53481s or 0.31276s per pharmacophore\n113 pharmacophores with 20 features - 45.88228s or 0.40604s per pharmacophore\n\n========== Second calculation of hashes of the same pharmacophores ==========\n2 pharmacophores with 0 features - 5e-05s or 2e-05s per pharmacophore\n2 pharmacophores with 1 features - 3e-05s or 1e-05s per pharmacophore\n12 pharmacophores with 2 features - 0.00012s or 1e-05s per pharmacophore\n44 pharmacophores with 3 features - 0.00041s or 1e-05s per pharmacophore\n100 pharmacophores with 4 features - 0.00089s or 1e-05s per pharmacophore\n103 pharmacophores with 5 features - 0.00166s or 2e-05s per pharmacophore\n105 pharmacophores with 6 features - 0.00316s or 3e-05s per pharmacophore\n109 pharmacophores with 7 features - 0.00707s or 6e-05s per pharmacophore\n117 pharmacophores with 8 features - 0.0166s or 0.00014s per pharmacophore\n101 pharmacophores with 9 features - 0.02005s or 0.0002s per pharmacophore\n105 pharmacophores with 10 features - 0.03527s or 0.00034s per pharmacophore\n100 pharmacophores with 11 features - 0.05271s or 0.00053s per pharmacophore\n103 pharmacophores with 12 features - 0.08097s or 0.00079s per pharmacophore\n117 pharmacophores with 13 features - 0.13274s or 0.00113s per pharmacophore\n103 pharmacophores with 14 features - 0.1588s or 0.00154s per pharmacophore\n142 pharmacophores with 15 features - 0.32687s or 0.0023s per pharmacophore\n104 pharmacophores with 16 features - 0.29255s or 0.00281s per pharmacophore\n100 pharmacophores with 17 features - 0.38286s or 0.00383s per pharmacophore\n120 pharmacophores with 18 features - 0.61327s or 0.00511s per pharmacophore\n136 pharmacophores with 19 features - 0.93486s or 0.00687s per pharmacophore\n113 pharmacophores with 20 features - 0.94041s or 0.00832s per pharmacophore\n```\n\n## Documentation\nMore documentation can be found here - https://pmapper.readthedocs.io/en/latest/\n\n## Citation\nLigand-Based Pharmacophore Modeling Using Novel 3D Pharmacophore Signatures  \nAlina Kutlushina, Aigul Khakimova, Timur Madzhidov, Pavel Polishchuk  \n*Molecules* **2018**, 23(12), 3094  \nhttps://doi.org/10.3390/molecules23123094\n\n##### Further publications\nVirtual Screening Using Pharmacophore Models Retrieved from Molecular Dynamic Simulations  \nPavel Polishchuk, Alina Kutlushina, Dayana Bashirova, Olena Mokshyna, Timur Madzhidov  \n*Int. J. Mol. Sci.* **2019**, 20(23), 5834  \nhttps://doi.org/10.3390/ijms20235834\n\n## License\nBSD-3 clause\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DrrDom/pmapper", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pmapper", "package_url": "https://pypi.org/project/pmapper/", "platform": "", "project_url": "https://pypi.org/project/pmapper/", "project_urls": {"Homepage": "https://github.com/DrrDom/pmapper"}, "release_url": "https://pypi.org/project/pmapper/0.4.0/", "requires_dist": ["rdkit (>=2017.09) ; extra == 'rdkit'"], "requires_python": ">=3.6", "summary": "pmapper: 3D pharmacophore hashes and fingerprints", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pmapper - 3D pharmacophore signatures and fingerprints</h1>\n<p>Pmapper is a Python module to generate 3D pharmacophore signatures and fingerprints.\nSignatures uniquely encode 3D pharmacophores with hashes suitable for fast identification of identical pharmacophores.</p>\n<h2>Dependency</h2>\n<p><code>rdkit &gt;= 2017.09</code><br>\n<code>networkx &gt;= 2</code></p>\n<h2>Installation</h2>\n<pre>pip install pmapper\n</pre>\n<h2>Examples</h2>\n<h3>Load modules</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pmapper.pharmacophore</span> <span class=\"kn\">import</span> <span class=\"n\">Pharmacophore</span> <span class=\"k\">as</span> <span class=\"n\">P</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rdkit</span> <span class=\"kn\">import</span> <span class=\"n\">Chem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rdkit.Chem</span> <span class=\"kn\">import</span> <span class=\"n\">AllChem</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pprint</span> <span class=\"kn\">import</span> <span class=\"n\">pprint</span>\n</pre>\n<h3>Create pharmacophore from a single conformer using default feature definitions</h3>\n<pre><span class=\"c1\"># load a molecule from SMILES and generate 3D coordinates</span>\n<span class=\"n\">mol</span> <span class=\"o\">=</span> <span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">MolFromSmiles</span><span class=\"p\">(</span><span class=\"s1\">'C1CC(=O)NC(=O)C1N2C(=O)C3=CC=CC=C3C2=O'</span><span class=\"p\">)</span>  <span class=\"c1\"># talidomide</span>\n<span class=\"n\">mol</span> <span class=\"o\">=</span> <span class=\"n\">Chem</span><span class=\"o\">.</span><span class=\"n\">AddHs</span><span class=\"p\">(</span><span class=\"n\">mol</span><span class=\"p\">)</span>\n<span class=\"n\">AllChem</span><span class=\"o\">.</span><span class=\"n\">EmbedMolecule</span><span class=\"p\">(</span><span class=\"n\">mol</span><span class=\"p\">,</span> <span class=\"n\">randomSeed</span><span class=\"o\">=</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create pharmacophore</span>\n<span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load_from_mol</span><span class=\"p\">(</span><span class=\"n\">mol</span><span class=\"p\">)</span>\n</pre>\n<h3>Get 3D pharmacophore signature</h3>\n<pre><span class=\"c1\"># get 3D pharmacophore signature</span>\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_signature_md5</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre>98504647beeb143ae50bb6b7798ca0f0\n</pre>\n<h3>Get 3D pharmacophore signature with non-zero tolerance</h3>\n<pre><span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_signature_md5</span><span class=\"p\">(</span><span class=\"n\">tol</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre>bc54806ba01bf59736a7b62b017d6e1d\n</pre>\n<h3>Create pharmacophores for a multiple conformer compound</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pmapper.utils</span> <span class=\"kn\">import</span> <span class=\"n\">load_multi_conf_mol</span>\n\n<span class=\"c1\"># create multiple conformer molecule</span>\n<span class=\"n\">AllChem</span><span class=\"o\">.</span><span class=\"n\">EmbedMultipleConfs</span><span class=\"p\">(</span><span class=\"n\">mol</span><span class=\"p\">,</span> <span class=\"n\">numConfs</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">randomSeed</span><span class=\"o\">=</span><span class=\"mi\">1024</span><span class=\"p\">)</span>\n\n<span class=\"n\">ps</span> <span class=\"o\">=</span> <span class=\"n\">load_multi_conf_mol</span><span class=\"p\">(</span><span class=\"n\">mol</span><span class=\"p\">)</span>\n\n<span class=\"n\">sig</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_signature_md5</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">p</span> <span class=\"ow\">in</span> <span class=\"n\">ps</span><span class=\"p\">]</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">sig</span><span class=\"p\">)</span>  <span class=\"c1\"># identical signatures occur</span>\n</pre>\n<p>Output:</p>\n<pre>['d5f5f9d65e39cb8605f1fa9db5b2fbb0',\n '6204791002d1e343b2bde323149fa780',\n 'abfabd8a4fcf5719ed6bf2c71a60852c',\n 'dfe9f17d30210cb94b8dd7acf77feae9',\n 'abfabd8a4fcf5719ed6bf2c71a60852c',\n 'e739fb5f9985ce0c65a16da41da4a33f',\n '2297ddf0e437b7fc32077f75e3924dcd',\n 'e739fb5f9985ce0c65a16da41da4a33f',\n '182a00bd9057abd0c455947d9cfa457c',\n '68f226d474808e60ab1256245f64c2b7']\n</pre>\n<p>Identical hashes should correspond to pharmacophores with low RMSD. Pharmacophores #2 and #4 have identical hash <code>abfabd8a4fcf5719ed6bf2c71a60852c</code>. Let's check RMSD.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pmapper.utils</span> <span class=\"kn\">import</span> <span class=\"n\">get_rms</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"p\">)):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"rmsd bewteen 2 and </span><span class=\"si\">%i</span><span class=\"s2\"> pharmacophore:\"</span> <span class=\"o\">%</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">get_rms</span><span class=\"p\">(</span><span class=\"n\">ps</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">ps</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]),</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n</pre>\n<p>Output</p>\n<pre>rmsd bewteen 2 and 0 pharmacophore: 0.63\nrmsd bewteen 2 and 1 pharmacophore: 0.99\nrmsd bewteen 2 and 2 pharmacophore: 0.0\nrmsd bewteen 2 and 3 pharmacophore: 0.41\nrmsd bewteen 2 and 4 pharmacophore: 0.18\nrmsd bewteen 2 and 5 pharmacophore: 0.19\nrmsd bewteen 2 and 6 pharmacophore: 1.15\nrmsd bewteen 2 and 7 pharmacophore: 0.32\nrmsd bewteen 2 and 8 pharmacophore: 0.69\nrmsd bewteen 2 and 9 pharmacophore: 0.36\n</pre>\n<p>They really have RMSD &lt; binning step (1A by default). However, other pharmacophores with distinct hashes also have low RMSD to #2. Identical hashes guarantee low RMSD between corresponding pharmacophores, but not vice versa.</p>\n<h3>Pharmacophore match</h3>\n<p>Create a two-point pharmacophore model and match with a pharmacophore of a molecule (both pharmacophores should have identical binning steps)</p>\n<pre><span class=\"n\">q</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">()</span>\n<span class=\"n\">q</span><span class=\"o\">.</span><span class=\"n\">load_from_feature_coords</span><span class=\"p\">([(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mf\">3.17</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.23</span><span class=\"p\">,</span> <span class=\"mf\">0.24</span><span class=\"p\">)),</span> <span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mf\">2.51</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.28</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.14</span><span class=\"p\">))])</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">fit_model</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"p\">)</span>\n</pre>\n<p>Output</p>\n<pre>(0, 1)\n</pre>\n<p>If they do not match <code>None</code> will be returned</p>\n<h3>Generate 3D pharmacophore fingerprint</h3>\n<pre><span class=\"c1\"># generate 3D pharmacophore fingerprint which takes into account stereoconfiguration</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_fp</span><span class=\"p\">(</span><span class=\"n\">min_features</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">max_features</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>   <span class=\"c1\"># set of activated bits</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Output (a set of activated bit numbers):</p>\n<pre>{259, 1671, 521, 143, 912, 402, 278, 406, 1562, 1692, 1835, 173, 558, 1070, 942, 1202, 1845, 823, 1476, 197, 968, 1355, 845, 1741, 1364, 87, 1881, 987, 1515, 378, 628, 1141, 1401, 1146, 2043}\n</pre>\n<p>Change settings:</p>\n<pre><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">get_fp</span><span class=\"p\">(</span><span class=\"n\">min_features</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">max_features</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">nbits</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">,</span> <span class=\"n\">activate_bits</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">b</span><span class=\"p\">)</span>\n</pre>\n<p>Output (a set of activated bit numbers):</p>\n<pre>{389, 518, 2821, 1416, 2952, 395, 3339, 511, 3342, 1937, 1042, 2710, 1817, 1690, 3482, 3737, 286, 1824, 1700, 804, 1318, 2729, 3114, 812, 556, 175, 3763, 2356, 3124, 1077, 1975, 3384, 1081, 185, 65, 1223, 713, 1356, 1998, 1487, 2131, 85, 3670, 1877, 3030, 2395, 1116, 2141, 1885, 347, 2404, 1382, 1257, 3049, 2795, 3691, 2541, 1646, 2283, 241, 113, 3698, 756, 2548, 4086, 2293, 1528, 2802, 127}\n</pre>\n<h3>Save/load pharmacophore</h3>\n<pre><span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">save_to_pma</span><span class=\"p\">(</span><span class=\"s1\">'filename.pma'</span><span class=\"p\">)</span>\n</pre>\n<p>Output is a text file having json format.</p>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">()</span>\n<span class=\"n\">p</span><span class=\"o\">.</span><span class=\"n\">load_from_pma</span><span class=\"p\">(</span><span class=\"s1\">'filename.pma'</span><span class=\"p\">)</span>\n</pre>\n<h3>Support other formats</h3>\n<p>Pharmacophores can be saved/loaded from LigandScout pml-files. Also pharmacophores can be read from xyz-files.</p>\n<h3>Caching</h3>\n<p>Pharmacophores can be created with enabled <code>cache</code> argument. This will speed up all futher repeated calls to retrive hash, fingerprints or descriptors.</p>\n<pre><span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">P</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Speed tests</h2>\n<p>Generation of pharmacophore signatures (hashes) is a CPU-bound task. The computation speed depends on the number of features in pharmacophores.<br>\nTests were run on a random subset of compounds from Drugbank. Up to 50 conformers were generated for each compound.<br>\nLaptop configuration:</p>\n<ul>\n<li>Intel(R) Core(TM) i7-5500U CPU @ 2.40GHz</li>\n<li>12 GB RAM</li>\n<li>calculation was run in 1 thread (the module is thread safe and calculations can be parallelized)</li>\n</ul>\n<p>To run the speed test use <code>pmapper_speed_test</code> command line tool</p>\n<pre>========== Reading of conformers of molecules ==========\n329 molecules were read in 0.0134 s\n\n========== Creation of pharmacophores (with enabled caching) ==========\n1938 pharmacophores were created in 3.17065 s\n\n========== First calculation of hashes ==========\n2 pharmacophores with 0 features - 0.00014s or 7e-05s per pharmacophore\n2 pharmacophores with 1 features - 0.0001s or 5e-05s per pharmacophore\n12 pharmacophores with 2 features - 0.00042s or 3e-05s per pharmacophore\n44 pharmacophores with 3 features - 0.00212s or 5e-05s per pharmacophore\n100 pharmacophores with 4 features - 0.00933s or 9e-05s per pharmacophore\n103 pharmacophores with 5 features - 0.05155s or 0.0005s per pharmacophore\n105 pharmacophores with 6 features - 0.10857s or 0.00103s per pharmacophore\n109 pharmacophores with 7 features - 0.25322s or 0.00232s per pharmacophore\n117 pharmacophores with 8 features - 0.59508s or 0.00509s per pharmacophore\n101 pharmacophores with 9 features - 0.8795s or 0.00871s per pharmacophore\n105 pharmacophores with 10 features - 1.61349s or 0.01537s per pharmacophore\n100 pharmacophores with 11 features - 2.24937s or 0.02249s per pharmacophore\n103 pharmacophores with 12 features - 3.53308s or 0.0343s per pharmacophore\n117 pharmacophores with 13 features - 6.49837s or 0.05554s per pharmacophore\n103 pharmacophores with 14 features - 7.54796s or 0.07328s per pharmacophore\n142 pharmacophores with 15 features - 14.92654s or 0.10512s per pharmacophore\n104 pharmacophores with 16 features - 13.86378s or 0.13331s per pharmacophore\n100 pharmacophores with 17 features - 17.94023s or 0.1794s per pharmacophore\n120 pharmacophores with 18 features - 28.01455s or 0.23345s per pharmacophore\n136 pharmacophores with 19 features - 42.53481s or 0.31276s per pharmacophore\n113 pharmacophores with 20 features - 45.88228s or 0.40604s per pharmacophore\n\n========== Second calculation of hashes of the same pharmacophores ==========\n2 pharmacophores with 0 features - 5e-05s or 2e-05s per pharmacophore\n2 pharmacophores with 1 features - 3e-05s or 1e-05s per pharmacophore\n12 pharmacophores with 2 features - 0.00012s or 1e-05s per pharmacophore\n44 pharmacophores with 3 features - 0.00041s or 1e-05s per pharmacophore\n100 pharmacophores with 4 features - 0.00089s or 1e-05s per pharmacophore\n103 pharmacophores with 5 features - 0.00166s or 2e-05s per pharmacophore\n105 pharmacophores with 6 features - 0.00316s or 3e-05s per pharmacophore\n109 pharmacophores with 7 features - 0.00707s or 6e-05s per pharmacophore\n117 pharmacophores with 8 features - 0.0166s or 0.00014s per pharmacophore\n101 pharmacophores with 9 features - 0.02005s or 0.0002s per pharmacophore\n105 pharmacophores with 10 features - 0.03527s or 0.00034s per pharmacophore\n100 pharmacophores with 11 features - 0.05271s or 0.00053s per pharmacophore\n103 pharmacophores with 12 features - 0.08097s or 0.00079s per pharmacophore\n117 pharmacophores with 13 features - 0.13274s or 0.00113s per pharmacophore\n103 pharmacophores with 14 features - 0.1588s or 0.00154s per pharmacophore\n142 pharmacophores with 15 features - 0.32687s or 0.0023s per pharmacophore\n104 pharmacophores with 16 features - 0.29255s or 0.00281s per pharmacophore\n100 pharmacophores with 17 features - 0.38286s or 0.00383s per pharmacophore\n120 pharmacophores with 18 features - 0.61327s or 0.00511s per pharmacophore\n136 pharmacophores with 19 features - 0.93486s or 0.00687s per pharmacophore\n113 pharmacophores with 20 features - 0.94041s or 0.00832s per pharmacophore\n</pre>\n<h2>Documentation</h2>\n<p>More documentation can be found here - <a href=\"https://pmapper.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pmapper.readthedocs.io/en/latest/</a></p>\n<h2>Citation</h2>\n<p>Ligand-Based Pharmacophore Modeling Using Novel 3D Pharmacophore Signatures<br>\nAlina Kutlushina, Aigul Khakimova, Timur Madzhidov, Pavel Polishchuk<br>\n<em>Molecules</em> <strong>2018</strong>, 23(12), 3094<br>\n<a href=\"https://doi.org/10.3390/molecules23123094\" rel=\"nofollow\">https://doi.org/10.3390/molecules23123094</a></p>\n<h5>Further publications</h5>\n<p>Virtual Screening Using Pharmacophore Models Retrieved from Molecular Dynamic Simulations<br>\nPavel Polishchuk, Alina Kutlushina, Dayana Bashirova, Olena Mokshyna, Timur Madzhidov<br>\n<em>Int. J. Mol. Sci.</em> <strong>2019</strong>, 20(23), 5834<br>\n<a href=\"https://doi.org/10.3390/ijms20235834\" rel=\"nofollow\">https://doi.org/10.3390/ijms20235834</a></p>\n<h2>License</h2>\n<p>BSD-3 clause</p>\n\n          </div>"}, "last_serial": 6720038, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "7cd0140700fdf0f92e721e6b0612d9fb", "sha256": "6b0db6e322e18f770c50b0b68060275a77e72cf9ab51c62ca46b6c15a0e6acb9"}, "downloads": -1, "filename": "pmapper-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "7cd0140700fdf0f92e721e6b0612d9fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 19598, "upload_time": "2019-08-21T14:36:40", "upload_time_iso_8601": "2019-08-21T14:36:40.327930Z", "url": "https://files.pythonhosted.org/packages/24/6f/c6e70823f6ee21d2ffde6dcd73ca7e95fde667fea35f81bf38ffc956051d/pmapper-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a51e1ee9bbf8ac7b822dd7f35c8f829", "sha256": "5cea7f78507cb7ff56c2885b66b8ba35498059e9319e6b63682a43a2de0f113b"}, "downloads": -1, "filename": "pmapper-0.2.tar.gz", "has_sig": false, "md5_digest": "6a51e1ee9bbf8ac7b822dd7f35c8f829", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16615, "upload_time": "2019-08-21T14:36:42", "upload_time_iso_8601": "2019-08-21T14:36:42.616885Z", "url": "https://files.pythonhosted.org/packages/37/da/50754818be8f4a836a2e97ddf6076b6703ddcd7cf7ba736daa12a176fad0/pmapper-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "4b7d36834bbe326f4c04968d8ba7f9ca", "sha256": "dd9085e0ad8b34cdee669b8bde343c7e8db31cd7b9359d81b3eeb01a22ec2d74"}, "downloads": -1, "filename": "pmapper-0.3.tar.gz", "has_sig": false, "md5_digest": "4b7d36834bbe326f4c04968d8ba7f9ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19132, "upload_time": "2019-11-02T10:33:58", "upload_time_iso_8601": "2019-11-02T10:33:58.342785Z", "url": "https://files.pythonhosted.org/packages/e9/05/f7e02d094dd0684eec6cd77b99a4d4714ce9fa3a2a40b89faab6b44130ec/pmapper-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "feb6f832f598a6e8c2272ec136f8eb52", "sha256": "bfad2c89165d2245328273daa9f4b5311e7dd337fb72bb5cf5a936043631e6f3"}, "downloads": -1, "filename": "pmapper-0.3.1.tar.gz", "has_sig": false, "md5_digest": "feb6f832f598a6e8c2272ec136f8eb52", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 19137, "upload_time": "2019-11-02T10:38:28", "upload_time_iso_8601": "2019-11-02T10:38:28.090265Z", "url": "https://files.pythonhosted.org/packages/57/12/0b5f94fcd37816ea15596c137b465b15669ec41d96769f64dd03bdafeae4/pmapper-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "d242b50f5eb9afcaee5b68560789b50a", "sha256": "bdf42549e99af95dcf81cd2940372bc6aefe1f798d68f38670217fa73e044318"}, "downloads": -1, "filename": "pmapper-0.3.2.tar.gz", "has_sig": false, "md5_digest": "d242b50f5eb9afcaee5b68560789b50a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 565594, "upload_time": "2019-11-28T21:08:36", "upload_time_iso_8601": "2019-11-28T21:08:36.926549Z", "url": "https://files.pythonhosted.org/packages/02/3f/8f69abf2244a3d283e98521e99731b53cb0ac46ee0fda2e3ba010b9fa222/pmapper-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "e9295f2b990f95297e85c4c0f880dab6", "sha256": "e48a8f5c48fc7ff8d9f68a4f49a3baae91ac2541bde87b989666abb497942d5f"}, "downloads": -1, "filename": "pmapper-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e9295f2b990f95297e85c4c0f880dab6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 564720, "upload_time": "2020-02-21T08:00:25", "upload_time_iso_8601": "2020-02-21T08:00:25.471765Z", "url": "https://files.pythonhosted.org/packages/f3/0d/3c152617451b879feb61c17274dafe12d3a6880b627d0f31735d9eb7a7dd/pmapper-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac2b4e8c0e5e0958c51e3a60910a8ebc", "sha256": "3338f207ad130a3c402d49eae42f360e0695afe7100dd7e0268e75af6753ffc3"}, "downloads": -1, "filename": "pmapper-0.3.3.tar.gz", "has_sig": false, "md5_digest": "ac2b4e8c0e5e0958c51e3a60910a8ebc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 566508, "upload_time": "2020-02-21T08:00:27", "upload_time_iso_8601": "2020-02-21T08:00:27.966253Z", "url": "https://files.pythonhosted.org/packages/6c/2c/76702ff554b2abb9ea410b1fbb19ecb59e78b368a2d53e5877866cb4b627/pmapper-0.3.3.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2f5395a578a9214cc9d4ec99dd12dd62", "sha256": "8fbd6057f4b958a01d956cd104691b15556f73915888524db4bdf274d64c8b29"}, "downloads": -1, "filename": "pmapper-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2f5395a578a9214cc9d4ec99dd12dd62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 564814, "upload_time": "2020-02-28T19:59:15", "upload_time_iso_8601": "2020-02-28T19:59:15.399706Z", "url": "https://files.pythonhosted.org/packages/c4/6e/b6d50f4c5305241a422142ce2e0b5f70c1f2d99ad8b80b43e8c71ab84e32/pmapper-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3f6aac2f3b2cbf48717f86f14f25346", "sha256": "f15f638da029bad6105e2da6c37dc83a9082790cb8d2744bcf46e7ac6efd9aa2"}, "downloads": -1, "filename": "pmapper-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f3f6aac2f3b2cbf48717f86f14f25346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 566599, "upload_time": "2020-02-28T19:59:19", "upload_time_iso_8601": "2020-02-28T19:59:19.903698Z", "url": "https://files.pythonhosted.org/packages/54/84/90950199514fe13499af79713a8b53e17f5a3ad3f5dfa18f3aa9b57b4f88/pmapper-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2f5395a578a9214cc9d4ec99dd12dd62", "sha256": "8fbd6057f4b958a01d956cd104691b15556f73915888524db4bdf274d64c8b29"}, "downloads": -1, "filename": "pmapper-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2f5395a578a9214cc9d4ec99dd12dd62", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 564814, "upload_time": "2020-02-28T19:59:15", "upload_time_iso_8601": "2020-02-28T19:59:15.399706Z", "url": "https://files.pythonhosted.org/packages/c4/6e/b6d50f4c5305241a422142ce2e0b5f70c1f2d99ad8b80b43e8c71ab84e32/pmapper-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3f6aac2f3b2cbf48717f86f14f25346", "sha256": "f15f638da029bad6105e2da6c37dc83a9082790cb8d2744bcf46e7ac6efd9aa2"}, "downloads": -1, "filename": "pmapper-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f3f6aac2f3b2cbf48717f86f14f25346", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 566599, "upload_time": "2020-02-28T19:59:19", "upload_time_iso_8601": "2020-02-28T19:59:19.903698Z", "url": "https://files.pythonhosted.org/packages/54/84/90950199514fe13499af79713a8b53e17f5a3ad3f5dfa18f3aa9b57b4f88/pmapper-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:52:19 2020"}