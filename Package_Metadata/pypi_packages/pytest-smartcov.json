{"info": {"author": "Carl Meyer", "author_email": "carl@oddbird.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "===============\npytest-smartcov\n===============\n\nSmart coverage measurement and reporting for py.test test suites.\n\nTest suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset of\nyour tests, you shouldn't have to also tell coverage which subset of your code\nit should measure coverage on for that run. With ``pytest-smartcov``, you don't\nhave to.\n\n\nPrerequisites\n=============\n\n``pytest-smartcov`` requires Python 2.7 or higher and `coverage`_ 3.6 or higher.\n\n.. _coverage: http://nedbatchelder.com/code/coverage/\n\n\nUsage\n=====\n\nIf ``pytest-smartcov`` is installed and you provide a ``smartcov_paths_hook``\nsetting in your ``pytest.ini``, coverage will automatically be measured on all\nyour test runs, unless you provide the ``--no-cov`` flag.\n\n\nConfiguration\n-------------\n\nTo use ``pytest-smartcov``, provide a ``smartcov_paths_hook`` ini-config\nsetting which is the Python dotted import path to a function. This function\nshould accept as its single parameter the list of test paths specified on a\n``py.test`` command line, and should return the list of paths on which code\ncoverage will be measured.\n\n\nReporting\n---------\n\nIf 100% of the measured code was covered, ``pytest-smartcov`` will output a\nsingle line at the end of test run notifying you that you have 100% coverage.\n\nIf you have less than 100% coverage on the measured code, ``pytest-smartcov``\nwill output a terminal report including only those files which had less than\n100% coverage.\n\nIf there was less than 100% overall coverage, ``pytest-smartcov`` will also\noutput an HTML report (to the ``htmlcov/`` directory by default, though this\ncan be configured normally in ``.coveragerc``).\n\n\nCHANGES\n=======\n\n\n0.1 (2014.10.28)\n----------------\n\n* Initial working version.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/carljm/pytest-smartcov/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pytest-smartcov", "package_url": "https://pypi.org/project/pytest-smartcov/", "platform": "", "project_url": "https://pypi.org/project/pytest-smartcov/", "project_urls": {"Homepage": "https://github.com/carljm/pytest-smartcov/"}, "release_url": "https://pypi.org/project/pytest-smartcov/0.3/", "requires_dist": null, "requires_python": "", "summary": "Smart coverage plugin for pytest.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Smart coverage measurement and reporting for py.test test suites.</p>\n<p>Test suites are usually structured parallel to (or integrated with) the\nstructure of the code they test. If you ask py.test to run a certain subset of\nyour tests, you shouldn\u2019t have to also tell coverage which subset of your code\nit should measure coverage on for that run. With <tt><span class=\"pre\">pytest-smartcov</span></tt>, you don\u2019t\nhave to.</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p><tt><span class=\"pre\">pytest-smartcov</span></tt> requires Python 2.7 or higher and <a href=\"http://nedbatchelder.com/code/coverage/\" rel=\"nofollow\">coverage</a> 3.6 or higher.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If <tt><span class=\"pre\">pytest-smartcov</span></tt> is installed and you provide a <tt>smartcov_paths_hook</tt>\nsetting in your <tt>pytest.ini</tt>, coverage will automatically be measured on all\nyour test runs, unless you provide the <tt><span class=\"pre\">--no-cov</span></tt> flag.</p>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>To use <tt><span class=\"pre\">pytest-smartcov</span></tt>, provide a <tt>smartcov_paths_hook</tt> ini-config\nsetting which is the Python dotted import path to a function. This function\nshould accept as its single parameter the list of test paths specified on a\n<tt>py.test</tt> command line, and should return the list of paths on which code\ncoverage will be measured.</p>\n</div>\n<div id=\"reporting\">\n<h3>Reporting</h3>\n<p>If 100% of the measured code was covered, <tt><span class=\"pre\">pytest-smartcov</span></tt> will output a\nsingle line at the end of test run notifying you that you have 100% coverage.</p>\n<p>If you have less than 100% coverage on the measured code, <tt><span class=\"pre\">pytest-smartcov</span></tt>\nwill output a terminal report including only those files which had less than\n100% coverage.</p>\n<p>If there was less than 100% overall coverage, <tt><span class=\"pre\">pytest-smartcov</span></tt> will also\noutput an HTML report (to the <tt>htmlcov/</tt> directory by default, though this\ncan be configured normally in <tt>.coveragerc</tt>).</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1 (2014.10.28)</span></h2>\n<ul>\n<li>Initial working version.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3214492, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9b3b5ee8f7925140cd1d46e381dc8513", "sha256": "80915c70d3a566a6c530d12dbfa154fd2870983ce0e7c18f7e4ebb1a4cc1d6df"}, "downloads": -1, "filename": "pytest-smartcov-0.1.tar.gz", "has_sig": true, "md5_digest": "9b3b5ee8f7925140cd1d46e381dc8513", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4198, "upload_time": "2015-01-03T04:34:28", "upload_time_iso_8601": "2015-01-03T04:34:28.798654Z", "url": "https://files.pythonhosted.org/packages/df/9b/eef4c18168d4f1506c64ee953fd86592f514f78e8d7e103daee335ed21d7/pytest-smartcov-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "9f26fc3e22cd1e7c5c9fd2b020a9a978", "sha256": "1bac69f7d7ff5c0a66b1fe1000afe578f8cbc9640ab6af05d4347de826884dbe"}, "downloads": -1, "filename": "pytest-smartcov-0.2.tar.gz", "has_sig": false, "md5_digest": "9f26fc3e22cd1e7c5c9fd2b020a9a978", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4259, "upload_time": "2016-09-21T03:47:04", "upload_time_iso_8601": "2016-09-21T03:47:04.833310Z", "url": "https://files.pythonhosted.org/packages/80/27/57c54d9d437c82decb4f43907199d1bb4be1bc1afdc11c3c88c00971bd8c/pytest-smartcov-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "061964feee0c6eef67ca2a094db90f44", "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1"}, "downloads": -1, "filename": "pytest-smartcov-0.3.tar.gz", "has_sig": true, "md5_digest": "061964feee0c6eef67ca2a094db90f44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4656, "upload_time": "2017-09-30T04:31:27", "upload_time_iso_8601": "2017-09-30T04:31:27.640417Z", "url": "https://files.pythonhosted.org/packages/e4/d4/66a8ebca883adfad25840e087a24d5a1d9c1e3af8fb2ee117274865b69b4/pytest-smartcov-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "061964feee0c6eef67ca2a094db90f44", "sha256": "db99c7a1a9717f5386303a528ee6bcbe8cbcb43ce08e239cfc32bd68bb1281a1"}, "downloads": -1, "filename": "pytest-smartcov-0.3.tar.gz", "has_sig": true, "md5_digest": "061964feee0c6eef67ca2a094db90f44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4656, "upload_time": "2017-09-30T04:31:27", "upload_time_iso_8601": "2017-09-30T04:31:27.640417Z", "url": "https://files.pythonhosted.org/packages/e4/d4/66a8ebca883adfad25840e087a24d5a1d9c1e3af8fb2ee117274865b69b4/pytest-smartcov-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:42 2020"}