{"info": {"author": "Ian Kjos", "author_email": "kjosib@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Environment :: No Input/Output (Daemon)", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP :: HTTP Servers"], "description": "# kali\nSimple, reliable, single-threaded HTTP service in Python. Aimed at serving web application to\nlocalhost as alternative to desktop application development.\n\n## Quick Start!\nThere are tutorial demonstrations in the `examples` folder at the\n[Git repository](https://github.com/kjosib/kali).\nMainly, you should read that source code\n([start with the intro](https://github.com/kjosib/kali/blob/master/examples/intro.py))\nbecause it will show you how this all fits together.\nYou can run the demos from the Windows command line by, for example, `demo intro`.\n(If you're on Linux/Mac/Unix, then feel free to contribute a suitable shell script.)\n\n## Why This, Then?\nI wanted to expose a SINGLE-THREADED WEB APPLICATION over HTTP to LOCALHOST ONLY.\nWeb application, because it's a comfortable style of working with data entry and navigation.\nSingle threaded, to support working well with SQLite, which doesn't play well with multi-threading,\nand Windows, which is not particularly suited to a forking-model server.\n\nWeb browsers lately all expect to open multiple connections and might not send the first request on\nthe first connection. The Python Standard Library offers class \"HttpServer\", but as currently coded,\nit only works properly when you're using a forking or threading mix-in. In sequential-service mode,\nthe standard library deadlocks (at least until the end user refreshes the browser a few times).\n\nThe essential problem is solved by setting a brief time-out on the first packet from the client.\nIf that time-out expires, the connection is closed and the server accepts the next caller, which\nwill generally have the request data from the browser. The server also only speaks HTTP/1.0 on\npurpose: it guarantees all requests are served in a timely manner. There is zero packet latency\non localhost, so there's not a real performance drain here.\n\n## Features! Benefits!\n\nSo long as I'm re-inventing the wheel, I might as well do it with the end in sight.\nTherefore:\n\n1. The server is a higher-order function called `serve_http`: you pass in a handler function.\n    In fact, any callable-object will do. The handler call must accept a `Request`\n    object and return a `Response` object (or just a content body). There are some\n\tconvenience methods for creating redirections, serving plain text, etc.\n\n2. This means routing requests to different response methods is a separate problem.\n    A simple solution is provided in the box, called `class Router`. \n\tIt reads the path component of the `Request` URI to\n\tdecide which of many sub-functions to call, and which bits of the path correspond\n\tto parameters, etc. Several ways are provided to register\n\tfunctionality, ranging from absolute flexibility to complete convenience.\n\n3. The framework takes (some) pains to avoid excessive copying, drawing inspiration from the\n\t`iolist` facility in the Erlang ecosystem. Rather than building up a big string, supply\n\ta list of them, or a funny-shaped nest of them, etc. The rules are somewhat loose.\n\n4. There's a simple HTML templating facility included: it will do the job without being\n\taccidentally quadratic (much) by participating in the above-described `iolist` game.\n\tYou can have templates inline or saved in separate files:\n\tallowance is made for both styles of working. As feature sets go, it covers the\n\tmost important bits (substitution, HTML escapes, loops, template extension) but\n\tleaves the really creative stuff for your Python code to work out.\n\n5. There's also a forms-handling library supplied. It offers components that make it\n    extra easy to handle the most common kinds of work flows.\n\n6. It's really annoying forgetting to commit-or-rollback a transaction in a handler.\n\tChanges may appear fine locally (until they vanish) but nobody else sees anything\n\texcept a locked database. Checking for this a simple matter by wrapping the root\n\thandler (application router) and taking corrective measures. (Roll back the\n\ttransaction and return an error response maybe.)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kjosib/kali", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "kali", "package_url": "https://pypi.org/project/kali/", "platform": "", "project_url": "https://pypi.org/project/kali/", "project_urls": {"Homepage": "https://github.com/kjosib/kali"}, "release_url": "https://pypi.org/project/kali/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Simple, reliable, single-threaded HTTP service in Python. Aimed at serving web application to localhost as alternative to desktop application development.", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>kali</h1>\n<p>Simple, reliable, single-threaded HTTP service in Python. Aimed at serving web application to\nlocalhost as alternative to desktop application development.</p>\n<h2>Quick Start!</h2>\n<p>There are tutorial demonstrations in the <code>examples</code> folder at the\n<a href=\"https://github.com/kjosib/kali\" rel=\"nofollow\">Git repository</a>.\nMainly, you should read that source code\n(<a href=\"https://github.com/kjosib/kali/blob/master/examples/intro.py\" rel=\"nofollow\">start with the intro</a>)\nbecause it will show you how this all fits together.\nYou can run the demos from the Windows command line by, for example, <code>demo intro</code>.\n(If you're on Linux/Mac/Unix, then feel free to contribute a suitable shell script.)</p>\n<h2>Why This, Then?</h2>\n<p>I wanted to expose a SINGLE-THREADED WEB APPLICATION over HTTP to LOCALHOST ONLY.\nWeb application, because it's a comfortable style of working with data entry and navigation.\nSingle threaded, to support working well with SQLite, which doesn't play well with multi-threading,\nand Windows, which is not particularly suited to a forking-model server.</p>\n<p>Web browsers lately all expect to open multiple connections and might not send the first request on\nthe first connection. The Python Standard Library offers class \"HttpServer\", but as currently coded,\nit only works properly when you're using a forking or threading mix-in. In sequential-service mode,\nthe standard library deadlocks (at least until the end user refreshes the browser a few times).</p>\n<p>The essential problem is solved by setting a brief time-out on the first packet from the client.\nIf that time-out expires, the connection is closed and the server accepts the next caller, which\nwill generally have the request data from the browser. The server also only speaks HTTP/1.0 on\npurpose: it guarantees all requests are served in a timely manner. There is zero packet latency\non localhost, so there's not a real performance drain here.</p>\n<h2>Features! Benefits!</h2>\n<p>So long as I'm re-inventing the wheel, I might as well do it with the end in sight.\nTherefore:</p>\n<ol>\n<li>\n<p>The server is a higher-order function called <code>serve_http</code>: you pass in a handler function.\nIn fact, any callable-object will do. The handler call must accept a <code>Request</code>\nobject and return a <code>Response</code> object (or just a content body). There are some\nconvenience methods for creating redirections, serving plain text, etc.</p>\n</li>\n<li>\n<p>This means routing requests to different response methods is a separate problem.\nA simple solution is provided in the box, called <code>class Router</code>.\nIt reads the path component of the <code>Request</code> URI to\ndecide which of many sub-functions to call, and which bits of the path correspond\nto parameters, etc. Several ways are provided to register\nfunctionality, ranging from absolute flexibility to complete convenience.</p>\n</li>\n<li>\n<p>The framework takes (some) pains to avoid excessive copying, drawing inspiration from the\n<code>iolist</code> facility in the Erlang ecosystem. Rather than building up a big string, supply\na list of them, or a funny-shaped nest of them, etc. The rules are somewhat loose.</p>\n</li>\n<li>\n<p>There's a simple HTML templating facility included: it will do the job without being\naccidentally quadratic (much) by participating in the above-described <code>iolist</code> game.\nYou can have templates inline or saved in separate files:\nallowance is made for both styles of working. As feature sets go, it covers the\nmost important bits (substitution, HTML escapes, loops, template extension) but\nleaves the really creative stuff for your Python code to work out.</p>\n</li>\n<li>\n<p>There's also a forms-handling library supplied. It offers components that make it\nextra easy to handle the most common kinds of work flows.</p>\n</li>\n<li>\n<p>It's really annoying forgetting to commit-or-rollback a transaction in a handler.\nChanges may appear fine locally (until they vanish) but nobody else sees anything\nexcept a locked database. Checking for this a simple matter by wrapping the root\nhandler (application router) and taking corrective measures. (Roll back the\ntransaction and return an error response maybe.)</p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 6753389, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "6b0ebc450cbc8b6607583563c3f8cef8", "sha256": "9c6b98cbac1869e5134e39347abbf402cd0652fae8a7fe78cd0a8e05625700ee"}, "downloads": -1, "filename": "kali-0.0.1.tar.gz", "has_sig": false, "md5_digest": "6b0ebc450cbc8b6607583563c3f8cef8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11078, "upload_time": "2020-02-08T06:08:45", "upload_time_iso_8601": "2020-02-08T06:08:45.227280Z", "url": "https://files.pythonhosted.org/packages/9a/cf/1c8ed1f9373b8fd565e3f9f4902ae4b0f8a7cb111e09b5aa57800a3e179f/kali-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "bd66e07d7a4437e26e2cdcfaacc13f10", "sha256": "85b34d6930d89db1e49e2ba08237b123d25690a97b78539d714b0e99ebaaa12f"}, "downloads": -1, "filename": "kali-0.0.2.tar.gz", "has_sig": false, "md5_digest": "bd66e07d7a4437e26e2cdcfaacc13f10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19430, "upload_time": "2020-02-15T19:47:08", "upload_time_iso_8601": "2020-02-15T19:47:08.277973Z", "url": "https://files.pythonhosted.org/packages/f3/ed/12b11cabf060258c4ae3278ffd70a60bf73d29c458c6d634d8d822037029/kali-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "e1e49155e27f62ee3b39f3642775bf43", "sha256": "8c3f78263205dd52f4d182f2d2417b146d830373c2a55f3765a8b5bc6508fd05"}, "downloads": -1, "filename": "kali-0.0.3.tar.gz", "has_sig": false, "md5_digest": "e1e49155e27f62ee3b39f3642775bf43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21110, "upload_time": "2020-02-18T06:56:12", "upload_time_iso_8601": "2020-02-18T06:56:12.513699Z", "url": "https://files.pythonhosted.org/packages/25/08/f4ecd580a83cd93c99b8ada227184f3903748091545cd1ce03d7fb328685/kali-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7244407999aa017f462c771d43f7d7a8", "sha256": "c019c6771b7a210e44774fd0caceecbeca755b7092b0150241aef97033e64e82"}, "downloads": -1, "filename": "kali-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7244407999aa017f462c771d43f7d7a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21543, "upload_time": "2020-02-19T06:35:58", "upload_time_iso_8601": "2020-02-19T06:35:58.202569Z", "url": "https://files.pythonhosted.org/packages/4e/b7/3909faaf11f1cdf0b41a00ed977393f032d546c5614a9a66acd351f1bda0/kali-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6e1389f7a10d852f9b213a2646ce2de1", "sha256": "9df11b04daf20ae2febb8346b6dba5089c858c7d7c8643c4c830eb68720788dc"}, "downloads": -1, "filename": "kali-0.0.5.tar.gz", "has_sig": false, "md5_digest": "6e1389f7a10d852f9b213a2646ce2de1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21826, "upload_time": "2020-02-21T05:49:12", "upload_time_iso_8601": "2020-02-21T05:49:12.326397Z", "url": "https://files.pythonhosted.org/packages/e0/10/c3de18e71060d032e962137bb869dac8099f432cec793750a4751e6433d6/kali-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "d0a158751fdfa36cf5989f2e5e36328e", "sha256": "c80a19e642e849a06fb96c78c077d83a4a4ad7313c5340ac2e4c8db3c391b656"}, "downloads": -1, "filename": "kali-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d0a158751fdfa36cf5989f2e5e36328e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22074, "upload_time": "2020-03-05T05:52:43", "upload_time_iso_8601": "2020-03-05T05:52:43.177569Z", "url": "https://files.pythonhosted.org/packages/10/15/71a3148c2a85f45094928aa38b3b9e957d5fcc41128972d3ff5edfb5d5a2/kali-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d0a158751fdfa36cf5989f2e5e36328e", "sha256": "c80a19e642e849a06fb96c78c077d83a4a4ad7313c5340ac2e4c8db3c391b656"}, "downloads": -1, "filename": "kali-0.0.6.tar.gz", "has_sig": false, "md5_digest": "d0a158751fdfa36cf5989f2e5e36328e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22074, "upload_time": "2020-03-05T05:52:43", "upload_time_iso_8601": "2020-03-05T05:52:43.177569Z", "url": "https://files.pythonhosted.org/packages/10/15/71a3148c2a85f45094928aa38b3b9e957d5fcc41128972d3ff5edfb5d5a2/kali-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:45 2020"}