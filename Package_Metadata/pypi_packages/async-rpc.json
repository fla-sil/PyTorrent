{"info": {"author": "Jan Seifert", "author_email": "jan.seifert@fotkyzcest.net", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "async-rpc\n=========\n\nNon-blocking XML-RPC client for Python. Provides base classes\n``async_rpc.BaseSerializer`` and ``async_rpc.BaseServerProxy``,\nyou can write your own implementation of RPC (JSON RPC, \u2026).\n\nUsage\n-----\n\n.. code-block:: python\n\n    from async_rpc import XmlRpcServerProxy\n\n    async def get_data():\n        proxy = XmlRpcServerProxy('http://example.com/RPC2:8000')\n        response = await proxy.methodName(123, 456)\n        return response\n\nAPI documentation\n-----------------\n\n*class* async_rpc.\\ **BaseRpcServerProxy**\\ (*uri, timeout=None,\nmax_clients=None, user_agent=None, use_dns_cache=None, ttl_dns_cache=None,\nhttp_version=None, keepalive_timeout=None, \\*\\*kwargs*)\n\nBase class for server proxies. It is responsible for HTTP transport. For\nconcrete RPC implementation uses descendant of the *BaseSerializer*.\n\n- **uri** (*str*) \u2013 URL of the remote server\n- **timeout** (*float*) \u2013 timeout in seconds for network operations,\n  includes DNS requests, default is 1.0 seconds.\n- **max_clients** (*int*) \u2013 size of the connections pool,\n  default is 16 connections.\n- **user_agent** (*str*) \u2013 user agent which is sent to server,\n  default is ``\"Python async-rpc\"``.\n- **use_dns_cache** (*bool*) \u2013 use internal cache for DNS lookups,\n  default is ``True``.\n- **ttl_dns_cache** (*float*) \u2013 store DNS lookups into internal cache\n  for a *ttl_dns_cache* seconds, default is 10.0 seconds.\n- **http_version** (*str*) \u2013 version of the HTTP protocol, can be\n  ``\"1.0\"`` or ``\"1.1\"``, default is ``\"1.0\"``.\n- **keepalive_timeout** (*float*) \u2013 close connection after *keepalive_timeout*\n  seconds, if ``None``, keep-alive is disabled, default is ``None``.\n- **kwargs**  (*dict*) \u2013 additional keyword arguments, which will be passed\n  into serializer constructor.\n\n*attribute* async_rpc.BaseRpcServerProxy.\\ **serializer_cls**\n(*BaseSerializer*) \u2013 serializer class\n\n*coroutine* async_rpc.BaseRpcServerProxy.\\ **call**\\ (*name, \\*\\*params*)\n\n- **name** (*str*) \u2013 mame of the remote function.\n- **params**  (*dict*) \u2013 parameters, which will be passed to remote function.\n\nInstance of the ``BaseServerProxy`` is callable, so you can call remote\nfunction directly on server proxy instance. These calls are equivalent:\n\n.. code-block:: python\n\n    res = await proxy.getData('12345678901234567890')\n    res = await proxy.call('getData', '12345678901234567890')\n\n\n*class* async_rpc.\\ **BaseSerializer**\\ (*\\*\\*kwargs*)\n\nAncestor for concrete implementation of RPC. Contains four abstract methods,\nwhich must be overriden in inherited classes.\n\n- **kwargs** (*dict*) \u2013 additional keyword arguments, which are passed from\n  server proxy.\n\n*method* async_rpc.BaseSerializer.\\ **initialize**\\ (*\\*\\*kwargs*)\n\nInitialize instance. It is called from constructor when instance is\ncreated.\n\n- **kwargs** (*dict*) \u2013 additional keyword arguments, which are passed from\n  server proxy.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **prepare_request_headers**\\ (\n*params*)\n\nReturn ``dict`` containig HTTP headers. Method is called before RPC call\nis sent. You can add additional HTTP header, which are be sent in request\nto remote server.\n\n- **params** (*tuple*) \u2013 params for RPC call.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **dumps**\\ (*response_headers*)\n\nReturn data, which will be sent as POST body in request to remote\nserver. Method is called before RPC call is sent.\n\n- **params** (*tuple*) \u2013 params for RPC call.\n- **menthodname** (*str*) \u2013 name of the RPC method.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **process_response_headers**\\ (\n*response_headers*)\n\nCheck headers from response. Method is called after response is\nreceived from server.\n\n- **response_headers** (*Mapping*) \u2013 mapping containing response\n  HTTP headers.\n\n*abstractmethod* async_rpc.BaseSerializer.\\ **loads**\\ (*data,\nresponse_headers*)\n\nReturn response from remote server as Python objects. Method is\ncalled after response is received from server.\n\n- **data** (*bytes*) \u2013 response body.\n- **response_headers** (*Mapping*) \u2013 mapping containing response\n  HTTP headers.\n\nLicense\n-------\n\n3-clause BSD", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/seifert/async-rpc", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "async-rpc", "package_url": "https://pypi.org/project/async-rpc/", "platform": "any", "project_url": "https://pypi.org/project/async-rpc/", "project_urls": {"Homepage": "https://github.com/seifert/async-rpc"}, "release_url": "https://pypi.org/project/async-rpc/1.0.0a6/", "requires_dist": null, "requires_python": "", "summary": "Non-blocking XML-RPC client for Python", "version": "1.0.0a6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Non-blocking XML-RPC client for Python. Provides base classes\n<tt>async_rpc.BaseSerializer</tt> and <tt>async_rpc.BaseServerProxy</tt>,\nyou can write your own implementation of RPC (JSON RPC, \u2026).</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">async_rpc</span> <span class=\"kn\">import</span> <span class=\"n\">XmlRpcServerProxy</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">get_data</span><span class=\"p\">():</span>\n    <span class=\"n\">proxy</span> <span class=\"o\">=</span> <span class=\"n\">XmlRpcServerProxy</span><span class=\"p\">(</span><span class=\"s1\">'http://example.com/RPC2:8000'</span><span class=\"p\">)</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">methodName</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"mi\">456</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">response</span>\n</pre>\n</div>\n<div id=\"api-documentation\">\n<h2>API documentation</h2>\n<p><em>class</em> async_rpc.<strong>BaseRpcServerProxy</strong>(<em>uri, timeout=None,\nmax_clients=None, user_agent=None, use_dns_cache=None, ttl_dns_cache=None,\nhttp_version=None, keepalive_timeout=None, **kwargs</em>)</p>\n<p>Base class for server proxies. It is responsible for HTTP transport. For\nconcrete RPC implementation uses descendant of the <em>BaseSerializer</em>.</p>\n<ul>\n<li><strong>uri</strong> (<em>str</em>) \u2013 URL of the remote server</li>\n<li><strong>timeout</strong> (<em>float</em>) \u2013 timeout in seconds for network operations,\nincludes DNS requests, default is 1.0 seconds.</li>\n<li><strong>max_clients</strong> (<em>int</em>) \u2013 size of the connections pool,\ndefault is 16 connections.</li>\n<li><strong>user_agent</strong> (<em>str</em>) \u2013 user agent which is sent to server,\ndefault is <tt>\"Python <span class=\"pre\">async-rpc\"</span></tt>.</li>\n<li><strong>use_dns_cache</strong> (<em>bool</em>) \u2013 use internal cache for DNS lookups,\ndefault is <tt>True</tt>.</li>\n<li><strong>ttl_dns_cache</strong> (<em>float</em>) \u2013 store DNS lookups into internal cache\nfor a <em>ttl_dns_cache</em> seconds, default is 10.0 seconds.</li>\n<li><strong>http_version</strong> (<em>str</em>) \u2013 version of the HTTP protocol, can be\n<tt>\"1.0\"</tt> or <tt>\"1.1\"</tt>, default is <tt>\"1.0\"</tt>.</li>\n<li><strong>keepalive_timeout</strong> (<em>float</em>) \u2013 close connection after <em>keepalive_timeout</em>\nseconds, if <tt>None</tt>, keep-alive is disabled, default is <tt>None</tt>.</li>\n<li><strong>kwargs</strong>  (<em>dict</em>) \u2013 additional keyword arguments, which will be passed\ninto serializer constructor.</li>\n</ul>\n<p><em>attribute</em> async_rpc.BaseRpcServerProxy.<strong>serializer_cls</strong>\n(<em>BaseSerializer</em>) \u2013 serializer class</p>\n<p><em>coroutine</em> async_rpc.BaseRpcServerProxy.<strong>call</strong>(<em>name, **params</em>)</p>\n<ul>\n<li><strong>name</strong> (<em>str</em>) \u2013 mame of the remote function.</li>\n<li><strong>params</strong>  (<em>dict</em>) \u2013 parameters, which will be passed to remote function.</li>\n</ul>\n<p>Instance of the <tt>BaseServerProxy</tt> is callable, so you can call remote\nfunction directly on server proxy instance. These calls are equivalent:</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">getData</span><span class=\"p\">(</span><span class=\"s1\">'12345678901234567890'</span><span class=\"p\">)</span>\n<span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">proxy</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s1\">'getData'</span><span class=\"p\">,</span> <span class=\"s1\">'12345678901234567890'</span><span class=\"p\">)</span>\n</pre>\n<p><em>class</em> async_rpc.<strong>BaseSerializer</strong>(<em>**kwargs</em>)</p>\n<p>Ancestor for concrete implementation of RPC. Contains four abstract methods,\nwhich must be overriden in inherited classes.</p>\n<ul>\n<li><strong>kwargs</strong> (<em>dict</em>) \u2013 additional keyword arguments, which are passed from\nserver proxy.</li>\n</ul>\n<p><em>method</em> async_rpc.BaseSerializer.<strong>initialize</strong>(<em>**kwargs</em>)</p>\n<p>Initialize instance. It is called from constructor when instance is\ncreated.</p>\n<ul>\n<li><strong>kwargs</strong> (<em>dict</em>) \u2013 additional keyword arguments, which are passed from\nserver proxy.</li>\n</ul>\n<p><em>abstractmethod</em> async_rpc.BaseSerializer.<strong>prepare_request_headers</strong>(\n<em>params</em>)</p>\n<p>Return <tt>dict</tt> containig HTTP headers. Method is called before RPC call\nis sent. You can add additional HTTP header, which are be sent in request\nto remote server.</p>\n<ul>\n<li><strong>params</strong> (<em>tuple</em>) \u2013 params for RPC call.</li>\n</ul>\n<p><em>abstractmethod</em> async_rpc.BaseSerializer.<strong>dumps</strong>(<em>response_headers</em>)</p>\n<p>Return data, which will be sent as POST body in request to remote\nserver. Method is called before RPC call is sent.</p>\n<ul>\n<li><strong>params</strong> (<em>tuple</em>) \u2013 params for RPC call.</li>\n<li><strong>menthodname</strong> (<em>str</em>) \u2013 name of the RPC method.</li>\n</ul>\n<p><em>abstractmethod</em> async_rpc.BaseSerializer.<strong>process_response_headers</strong>(\n<em>response_headers</em>)</p>\n<p>Check headers from response. Method is called after response is\nreceived from server.</p>\n<ul>\n<li><strong>response_headers</strong> (<em>Mapping</em>) \u2013 mapping containing response\nHTTP headers.</li>\n</ul>\n<p><em>abstractmethod</em> async_rpc.BaseSerializer.<strong>loads</strong>(<em>data,\nresponse_headers</em>)</p>\n<p>Return response from remote server as Python objects. Method is\ncalled after response is received from server.</p>\n<ul>\n<li><strong>data</strong> (<em>bytes</em>) \u2013 response body.</li>\n<li><strong>response_headers</strong> (<em>Mapping</em>) \u2013 mapping containing response\nHTTP headers.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>3-clause BSD</p>\n</div>\n\n          </div>"}, "last_serial": 7185502, "releases": {"1.0.0a1": [{"comment_text": "", "digests": {"md5": "ae360f0643d3c6614e0d234a1e179ac7", "sha256": "3196d541e203a89f1e7e049902ad3e211e0dbcc86ed4d532083b25b5c9bd266e"}, "downloads": -1, "filename": "async-rpc-1.0.0a1.tar.gz", "has_sig": false, "md5_digest": "ae360f0643d3c6614e0d234a1e179ac7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3142, "upload_time": "2020-05-04T20:17:23", "upload_time_iso_8601": "2020-05-04T20:17:23.478614Z", "url": "https://files.pythonhosted.org/packages/84/04/15731f16e224f9b96eb34e29aed7e1480f479da8029be8cd626d4cbf5d5c/async-rpc-1.0.0a1.tar.gz", "yanked": false}], "1.0.0a2": [{"comment_text": "", "digests": {"md5": "67c31fe15358734233e55f23c2229be4", "sha256": "3d161bc46c71bef29a122575f623974db4b3da933c304998dcad18bea317caf5"}, "downloads": -1, "filename": "async-rpc-1.0.0a2.tar.gz", "has_sig": false, "md5_digest": "67c31fe15358734233e55f23c2229be4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3167, "upload_time": "2020-05-05T14:24:31", "upload_time_iso_8601": "2020-05-05T14:24:31.729181Z", "url": "https://files.pythonhosted.org/packages/80/e0/1707cc40472f427b9231e8fb5358cdb098ec932e45bf688bb8e5db59847e/async-rpc-1.0.0a2.tar.gz", "yanked": false}], "1.0.0a3": [{"comment_text": "", "digests": {"md5": "59736d590a2f16c69a8fb2814b8741f8", "sha256": "0a07e1d362ab566f28d65e8ccaaf96bc26fc955330f281fe7d8b821195669b07"}, "downloads": -1, "filename": "async-rpc-1.0.0a3.tar.gz", "has_sig": false, "md5_digest": "59736d590a2f16c69a8fb2814b8741f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3179, "upload_time": "2020-05-05T20:07:33", "upload_time_iso_8601": "2020-05-05T20:07:33.263726Z", "url": "https://files.pythonhosted.org/packages/69/81/976db85bde7f10f42655bb5b3734683aa368df7c4171a64696a32772d58b/async-rpc-1.0.0a3.tar.gz", "yanked": false}], "1.0.0a4": [{"comment_text": "", "digests": {"md5": "12d6710eeaac75b97bcceb8bf502b8bd", "sha256": "88b4ed7c48a8fbb4215322dfe732fdbff9751397817aacd84a65c28ee7b09cc0"}, "downloads": -1, "filename": "async-rpc-1.0.0a4.tar.gz", "has_sig": false, "md5_digest": "12d6710eeaac75b97bcceb8bf502b8bd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3235, "upload_time": "2020-05-06T11:21:07", "upload_time_iso_8601": "2020-05-06T11:21:07.648586Z", "url": "https://files.pythonhosted.org/packages/c4/06/8f6c7fe717a2214a088cc57ce9679b9fa599a2017bc864b4ba2a6f489dcc/async-rpc-1.0.0a4.tar.gz", "yanked": false}], "1.0.0a5": [{"comment_text": "", "digests": {"md5": "503808bab59776925047d9f094f1ca3f", "sha256": "7826e6ee27d60738def986f7847ccfd9525c61485ba498226fdeb2b75ba7ff4c"}, "downloads": -1, "filename": "async-rpc-1.0.0a5.tar.gz", "has_sig": false, "md5_digest": "503808bab59776925047d9f094f1ca3f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2020-05-06T19:37:02", "upload_time_iso_8601": "2020-05-06T19:37:02.045856Z", "url": "https://files.pythonhosted.org/packages/9a/14/6af431c94cb1a656dd6b4e9d4eca60e94f4142fd46f393242b6fee25a8cb/async-rpc-1.0.0a5.tar.gz", "yanked": false}], "1.0.0a6": [{"comment_text": "", "digests": {"md5": "9ddedf1035b8b69b6952a33741e63f27", "sha256": "713b01e13c25d5db66af71fca9d03d9110ad15664896c8dcefb832c036c6be4c"}, "downloads": -1, "filename": "async-rpc-1.0.0a6.tar.gz", "has_sig": false, "md5_digest": "9ddedf1035b8b69b6952a33741e63f27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4690, "upload_time": "2020-05-07T05:39:26", "upload_time_iso_8601": "2020-05-07T05:39:26.416495Z", "url": "https://files.pythonhosted.org/packages/2a/ef/17456204e713cfd29be73f816539f6abc8b9f753a11c810ab31d431353f1/async-rpc-1.0.0a6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ddedf1035b8b69b6952a33741e63f27", "sha256": "713b01e13c25d5db66af71fca9d03d9110ad15664896c8dcefb832c036c6be4c"}, "downloads": -1, "filename": "async-rpc-1.0.0a6.tar.gz", "has_sig": false, "md5_digest": "9ddedf1035b8b69b6952a33741e63f27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4690, "upload_time": "2020-05-07T05:39:26", "upload_time_iso_8601": "2020-05-07T05:39:26.416495Z", "url": "https://files.pythonhosted.org/packages/2a/ef/17456204e713cfd29be73f816539f6abc8b9f753a11c810ab31d431353f1/async-rpc-1.0.0a6.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:41 2020"}