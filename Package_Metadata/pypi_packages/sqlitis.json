{"info": {"author": "Paul Glass", "author_email": "pnglass@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "[![Build Status](https://travis-ci.org/pglass/sqlitis.svg?branch=master)](https://travis-ci.org/pglass/sqlitis)\n[![PyPI](https://img.shields.io/pypi/v/sqlitis)](https://pypi.python.org/pypi/sqlitis)\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/sqlitis)](https://pypi.python.org/pypi/sqlitis)\n\nOverview\n--------\n\nSqlitis is a tool to convert plain SQL queries to SQLAlchemy expressions. It is usable from the command line or as a library.\n\nSqlitis converts to the [SQLAlchemy expression language](http://docs.sqlalchemy.org/en/latest/core/tutorial.html#sql-expression-language-tutorial). It does not support the SQLAlchemy ORM.\n\n```bash\n$ pip install sqlitis\n```\n\nExamples\n--------\n\nTurning a select query into a sqlachemy expression:\n\n```bash\n$ sqlitis 'select foo.name, bar.value from foo join bar'\nselect([foo.c.name, bar.c.value]).select_from(foo.join(bar))\n```\n\nConverting a join:\n\n```bash\n$ sqlitis 'foo join bar on foo.id = bar.foo_id and (foo.val < 100 or bar.val < 100)'\nfoo.join(bar, and_(foo.c.id == bar.c.foo_id, or_(foo.c.val < 100, bar.c.val < 100)))\n```\n\nRunning tests\n-------------\n\nUse tox to run the tests.\n\n```bash\n$ pip install tox\n\n### Run everything\n$ tox\n\n### Run the unit/functional tests\n$ tox -e py36\n\n### Run style checks\n$ tox -e flake8 black\n```\n\nThe code is formatted using [black](https://pypi.org/project/black/).\n\n```bash\n### Reformat the code with black\n$ make format\n\n### Check if black needs to be run. This does not reformat.\n$ tox -e black\n```\n\nThere are three types of tests:\n\n- Unit tests of the internal model classes\n- Unit tests of the core `to_sqla` function\n- Functional tests that execute the generated SQLAlchemy expressions against a sqlite database\n- Functional tests of the CLI\n\nThese tests are parameterized (data driven) using data from `test/*.yaml`\n\nSQL Support Checklist\n---------------------\n\n- [ ] Select\n\n  - [x] Star: `SELECT * FROM foo`\n  - [x] Multiple columns: `SELECT a, b, c FROM foo`\n  - [x] Qualified column names: `SELECT foo.a, foo.b FROM foo`\n  - [x] Column aliases: `SELECT foo.id AS foo_id, foo.name AS foo_name from FOO`\n  - [ ] Joins\n\n    - [x] Inner Join:\n\n      - `SELECT * FROM foo JOIN bar`\n      - `SELECT * FROM foo INNER JOIN bar`\n\n    - [x] Cross Joins\n\n      - `SELECT * FROM foo, bar`\n      - `SELECT * FROM foo CROSS JOIN bar`\n\n    - [ ] Left/Right Joins\n    - [ ] Outer Joins\n\n  - [x] On Clauses: `SELECT foo.a, bar.b FROM foo JOIN bar ON foo.id = bar.foo_id`\n  - [x] Conjuctions (AND/OR): `SELECT foo.a, bar.b FROM foo join bar ON foo.id = bar.foo_id AND foo.val > 1`\n  - [x] Select from subquery: `SELECT id FROM (SELECT * FROM foo)`\n  - [x] Where: `SELECT id FROM foo WHERE id = 123`\n  - [x] Between: `SELECT a FROM foo WHERE foo.val BETWEEN 1 AND 20`\n  - [x] Select distinct: `SELECT DISTINCT a FROM foo`\n  - [ ] Aggregate functions (SUM, AVG, COUNT, MIN, MAX): `SELECT COUNT(*) FROM foo`\n  - [ ] Group by: `SELECT COUNT(*) FROM foo GROUP BY column`\n  - [ ] Like\n  - [x] Limit/offset\n  - [ ] Order by\n\n- [ ] Insert\n- [ ] Update\n- [ ] Delete", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pglass/sqlitis", "keywords": "sql sqlalchemy convert sqlitis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sqlitis", "package_url": "https://pypi.org/project/sqlitis/", "platform": "", "project_url": "https://pypi.org/project/sqlitis/", "project_urls": {"Homepage": "https://github.com/pglass/sqlitis"}, "release_url": "https://pypi.org/project/sqlitis/0.0.5/", "requires_dist": null, "requires_python": "", "summary": "convert sql to sqlalchemy expressions", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/pglass/sqlitis\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3625356a66c50562ac3a58dff3f48d608fe3cccb/68747470733a2f2f7472617669732d63692e6f72672f70676c6173732f73716c697469732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/sqlitis\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/776bd809d846512358897ded9ed695cd4ccc7f53/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73716c69746973\"></a>\n<a href=\"https://pypi.python.org/pypi/sqlitis\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/889cad8cb659f36386bd90e2c863ea2239ef510e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f73716c69746973\"></a></p>\n<h2>Overview</h2>\n<p>Sqlitis is a tool to convert plain SQL queries to SQLAlchemy expressions. It is usable from the command line or as a library.</p>\n<p>Sqlitis converts to the <a href=\"http://docs.sqlalchemy.org/en/latest/core/tutorial.html#sql-expression-language-tutorial\" rel=\"nofollow\">SQLAlchemy expression language</a>. It does not support the SQLAlchemy ORM.</p>\n<pre>$ pip install sqlitis\n</pre>\n<h2>Examples</h2>\n<p>Turning a select query into a sqlachemy expression:</p>\n<pre>$ sqlitis <span class=\"s1\">'select foo.name, bar.value from foo join bar'</span>\n<span class=\"k\">select</span><span class=\"o\">([</span>foo.c.name, bar.c.value<span class=\"o\">])</span>.select_from<span class=\"o\">(</span>foo.join<span class=\"o\">(</span>bar<span class=\"o\">))</span>\n</pre>\n<p>Converting a join:</p>\n<pre>$ sqlitis <span class=\"s1\">'foo join bar on foo.id = bar.foo_id and (foo.val &lt; 100 or bar.val &lt; 100)'</span>\nfoo.join<span class=\"o\">(</span>bar, and_<span class=\"o\">(</span>foo.c.id <span class=\"o\">==</span> bar.c.foo_id, or_<span class=\"o\">(</span>foo.c.val &lt; <span class=\"m\">100</span>, bar.c.val &lt; <span class=\"m\">100</span><span class=\"o\">)))</span>\n</pre>\n<h2>Running tests</h2>\n<p>Use tox to run the tests.</p>\n<pre>$ pip install tox\n\n<span class=\"c1\">### Run everything</span>\n$ tox\n\n<span class=\"c1\">### Run the unit/functional tests</span>\n$ tox -e py36\n\n<span class=\"c1\">### Run style checks</span>\n$ tox -e flake8 black\n</pre>\n<p>The code is formatted using <a href=\"https://pypi.org/project/black/\" rel=\"nofollow\">black</a>.</p>\n<pre><span class=\"c1\">### Reformat the code with black</span>\n$ make format\n\n<span class=\"c1\">### Check if black needs to be run. This does not reformat.</span>\n$ tox -e black\n</pre>\n<p>There are three types of tests:</p>\n<ul>\n<li>Unit tests of the internal model classes</li>\n<li>Unit tests of the core <code>to_sqla</code> function</li>\n<li>Functional tests that execute the generated SQLAlchemy expressions against a sqlite database</li>\n<li>Functional tests of the CLI</li>\n</ul>\n<p>These tests are parameterized (data driven) using data from <code>test/*.yaml</code></p>\n<h2>SQL Support Checklist</h2>\n<ul>\n<li>\n<p>[ ] Select</p>\n<ul>\n<li>\n<p>[x] Star: <code>SELECT * FROM foo</code></p>\n</li>\n<li>\n<p>[x] Multiple columns: <code>SELECT a, b, c FROM foo</code></p>\n</li>\n<li>\n<p>[x] Qualified column names: <code>SELECT foo.a, foo.b FROM foo</code></p>\n</li>\n<li>\n<p>[x] Column aliases: <code>SELECT foo.id AS foo_id, foo.name AS foo_name from FOO</code></p>\n</li>\n<li>\n<p>[ ] Joins</p>\n<ul>\n<li>\n<p>[x] Inner Join:</p>\n<ul>\n<li><code>SELECT * FROM foo JOIN bar</code></li>\n<li><code>SELECT * FROM foo INNER JOIN bar</code></li>\n</ul>\n</li>\n<li>\n<p>[x] Cross Joins</p>\n<ul>\n<li><code>SELECT * FROM foo, bar</code></li>\n<li><code>SELECT * FROM foo CROSS JOIN bar</code></li>\n</ul>\n</li>\n<li>\n<p>[ ] Left/Right Joins</p>\n</li>\n<li>\n<p>[ ] Outer Joins</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[x] On Clauses: <code>SELECT foo.a, bar.b FROM foo JOIN bar ON foo.id = bar.foo_id</code></p>\n</li>\n<li>\n<p>[x] Conjuctions (AND/OR): <code>SELECT foo.a, bar.b FROM foo join bar ON foo.id = bar.foo_id AND foo.val &gt; 1</code></p>\n</li>\n<li>\n<p>[x] Select from subquery: <code>SELECT id FROM (SELECT * FROM foo)</code></p>\n</li>\n<li>\n<p>[x] Where: <code>SELECT id FROM foo WHERE id = 123</code></p>\n</li>\n<li>\n<p>[x] Between: <code>SELECT a FROM foo WHERE foo.val BETWEEN 1 AND 20</code></p>\n</li>\n<li>\n<p>[x] Select distinct: <code>SELECT DISTINCT a FROM foo</code></p>\n</li>\n<li>\n<p>[ ] Aggregate functions (SUM, AVG, COUNT, MIN, MAX): <code>SELECT COUNT(*) FROM foo</code></p>\n</li>\n<li>\n<p>[ ] Group by: <code>SELECT COUNT(*) FROM foo GROUP BY column</code></p>\n</li>\n<li>\n<p>[ ] Like</p>\n</li>\n<li>\n<p>[x] Limit/offset</p>\n</li>\n<li>\n<p>[ ] Order by</p>\n</li>\n</ul>\n</li>\n<li>\n<p>[ ] Insert</p>\n</li>\n<li>\n<p>[ ] Update</p>\n</li>\n<li>\n<p>[ ] Delete</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6546576, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e06915aec5eee69fcf6bd784bc0ca5e4", "sha256": "ac3650bb7cf3c325fd742ced0565cd6a2e8d433a4ce34d6a8c293fc567c8859a"}, "downloads": -1, "filename": "sqlitis-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e06915aec5eee69fcf6bd784bc0ca5e4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7662, "upload_time": "2018-02-02T05:07:18", "upload_time_iso_8601": "2018-02-02T05:07:18.408749Z", "url": "https://files.pythonhosted.org/packages/bc/7b/8ecbd3cf927fd72be2358c7102dd9415f50a4e48a11a0165d8166dd80fa7/sqlitis-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "84fbe18632149cebc04d1178498eb4f6", "sha256": "e06c67ea44ea560f627120ae091558c18615608fc8e24a24479b35a0f4dd8dd1"}, "downloads": -1, "filename": "sqlitis-0.0.2.tar.gz", "has_sig": false, "md5_digest": "84fbe18632149cebc04d1178498eb4f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7531, "upload_time": "2018-02-02T05:40:33", "upload_time_iso_8601": "2018-02-02T05:40:33.634076Z", "url": "https://files.pythonhosted.org/packages/ba/a4/f1e686fe8561da886481ce5995952f69302e76c7cdda4fc4c592d2fd6067/sqlitis-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "ec0b297361faab1eb0f4de642e155b54", "sha256": "ccc50fcd88335c27ba9c288471b0ede09f938421ce7d0aa132680325f576bd4a"}, "downloads": -1, "filename": "sqlitis-0.0.3.tar.gz", "has_sig": false, "md5_digest": "ec0b297361faab1eb0f4de642e155b54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7837, "upload_time": "2018-08-14T00:24:22", "upload_time_iso_8601": "2018-08-14T00:24:22.368933Z", "url": "https://files.pythonhosted.org/packages/3c/63/7a01426c710a0600edd87ee9192769069e7b266d234431e728068e950649/sqlitis-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "2270a3f243ed1f0b89639cc32b805583", "sha256": "8d0cb5071396a2ca11d3c88d0bca0c3ad850448d34a1af50247f0c8899474517"}, "downloads": -1, "filename": "sqlitis-0.0.4.tar.gz", "has_sig": false, "md5_digest": "2270a3f243ed1f0b89639cc32b805583", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9328, "upload_time": "2019-12-25T06:12:19", "upload_time_iso_8601": "2019-12-25T06:12:19.564854Z", "url": "https://files.pythonhosted.org/packages/4f/98/018c609a21b4d7bcedfb7e88d5e9fd5b3bf494eb1d562abad1e706827951/sqlitis-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "077fc902251ad3ce6338552ba7f684a8", "sha256": "4fcd04a027c9670a8bbbbd66b4d5d3db1baaa4f1b40fa96c4de90309113cfaf0"}, "downloads": -1, "filename": "sqlitis-0.0.5.tar.gz", "has_sig": false, "md5_digest": "077fc902251ad3ce6338552ba7f684a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9661, "upload_time": "2020-01-31T02:08:08", "upload_time_iso_8601": "2020-01-31T02:08:08.039726Z", "url": "https://files.pythonhosted.org/packages/26/c2/b78e97be6702abd148c05fc61b329f82a07aa34f24cd1b57f7a268626c37/sqlitis-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "077fc902251ad3ce6338552ba7f684a8", "sha256": "4fcd04a027c9670a8bbbbd66b4d5d3db1baaa4f1b40fa96c4de90309113cfaf0"}, "downloads": -1, "filename": "sqlitis-0.0.5.tar.gz", "has_sig": false, "md5_digest": "077fc902251ad3ce6338552ba7f684a8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9661, "upload_time": "2020-01-31T02:08:08", "upload_time_iso_8601": "2020-01-31T02:08:08.039726Z", "url": "https://files.pythonhosted.org/packages/26/c2/b78e97be6702abd148c05fc61b329f82a07aa34f24cd1b57f7a268626c37/sqlitis-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:39 2020"}