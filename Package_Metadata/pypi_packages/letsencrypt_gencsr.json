{"info": {"author": "Christoph Brand", "author_email": "christoph@brand.rest", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 2 :: Only", "Topic :: System :: Networking"], "description": "# Letsencrypt GenCSR #\n\nA very fin wrapper around letsencrypt which allows the construction of a CSR which is\ncompatible with the letsencrypt toolchain.\n\nUse this, if you don't want to generate new private keys every time when requesting\nletsencrypt certificates. Even though this is generally a good security practice it might\nbe problematic when using public key pinning.\n\n## Installation ##\n\n```\npip install letsencrypt_gencsr\n```\n\n## Usage ##\n\n```\nletsencrypt-gencsr-helper gencsr --key privkey.pem -d my.awesome.domain.net awesome.domain.net domain.net -o request.csr\n```\n\nThis generates form the given key \"privkey.pem\" and the domains \"my.awesome.domain.net\", \"awesome.domain.net\" and\n\"domain.net\" a CSR file (in request.csr) compatible with letsencrypt which can be passed to the toolchain through\nthe --csr flag:\n\n```\nletsencrypt certonly --csr request.csr --webroot --renew-by-default --agree-tos -w /var/www\n```\n\n## Letsencrypt proxy ##\n\nAs of Version 0.2.0 the `letsencrypt-gencsr-helper` acts as a proxy of the `letsencrypt` cli interface and has the\nsame commands.\n\nThis is done to support the additional `--private-key` parameter. It allows to feed a pre defined private key to the\n`certonly` certificate request:\n\n```\nletsencrypt-gencsr-helper certonly --private-key privatekey.pem --webroot -w /var/www -d example.com\n```\n\nOf course the same functionality also works with the `run` command.\n\n## License ##\n\nThe application is licensed under the [MIT license](http://opensource.org/licenses/MIT). The used\nletsencrypt library is licensed under the [Apache 2.0 license](http://opensource.org/licenses/apache-2.0).\n", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/cbrand/letsencrypt_gencsr/tarball/0.2.0", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cbrand/letsencrypt_gencsr", "keywords": "network,letsencrypt,ssl", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "letsencrypt_gencsr", "package_url": "https://pypi.org/project/letsencrypt_gencsr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/letsencrypt_gencsr/", "project_urls": {"Download": "https://github.com/cbrand/letsencrypt_gencsr/tarball/0.2.0", "Homepage": "https://github.com/cbrand/letsencrypt_gencsr"}, "release_url": "https://pypi.org/project/letsencrypt_gencsr/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Command line utility to generate a csr for letsencrypt from a preexisting key", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Letsencrypt GenCSR #</p>\n<p>A very fin wrapper around letsencrypt which allows the construction of a CSR which is\ncompatible with the letsencrypt toolchain.</p>\n<p>Use this, if you don\u2019t want to generate new private keys every time when requesting\nletsencrypt certificates. Even though this is generally a good security practice it might\nbe problematic when using public key pinning.</p>\n<p>## Installation ##</p>\n<p><tt>`\npip install letsencrypt_gencsr\n`</tt></p>\n<p>## Usage ##</p>\n<p><tt>`\n<span class=\"pre\">letsencrypt-gencsr-helper</span> gencsr <span class=\"pre\">--key</span> privkey.pem <span class=\"pre\">-d</span> my.awesome.domain.net awesome.domain.net domain.net <span class=\"pre\">-o</span> request.csr\n`</tt></p>\n<p>This generates form the given key \u201cprivkey.pem\u201d and the domains \u201cmy.awesome.domain.net\u201d, \u201cawesome.domain.net\u201d and\n\u201cdomain.net\u201d a CSR file (in request.csr) compatible with letsencrypt which can be passed to the toolchain through\nthe \u2013csr flag:</p>\n<p><tt>`\nletsencrypt certonly <span class=\"pre\">--csr</span> request.csr <span class=\"pre\">--webroot</span> <span class=\"pre\">--renew-by-default</span> <span class=\"pre\">--agree-tos</span> <span class=\"pre\">-w</span> /var/www\n`</tt></p>\n<p>## Letsencrypt proxy ##</p>\n<p>As of Version 0.2.0 the <cite>letsencrypt-gencsr-helper</cite> acts as a proxy of the <cite>letsencrypt</cite> cli interface and has the\nsame commands.</p>\n<p>This is done to support the additional <cite>\u2013private-key</cite> parameter. It allows to feed a pre defined private key to the\n<cite>certonly</cite> certificate request:</p>\n<p><tt>`\n<span class=\"pre\">letsencrypt-gencsr-helper</span> certonly <span class=\"pre\">--private-key</span> privatekey.pem <span class=\"pre\">--webroot</span> <span class=\"pre\">-w</span> /var/www <span class=\"pre\">-d</span> example.com\n`</tt></p>\n<p>Of course the same functionality also works with the <cite>run</cite> command.</p>\n<p>## License ##</p>\n<p>The application is licensed under the [MIT license](<a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">http://opensource.org/licenses/MIT</a>). The used\nletsencrypt library is licensed under the [Apache 2.0 license](<a href=\"http://opensource.org/licenses/apache-2.0\" rel=\"nofollow\">http://opensource.org/licenses/apache-2.0</a>).</p>\n\n          </div>"}, "last_serial": 1847980, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9a49298854533930dcf4bddc9b9c7455", "sha256": "02f9b2a9af6a199743c462608c00d2fa209fda0fb8918c5a7b1ba31f222f0944"}, "downloads": -1, "filename": "letsencrypt_gencsr-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9a49298854533930dcf4bddc9b9c7455", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2446, "upload_time": "2015-12-04T15:40:14", "upload_time_iso_8601": "2015-12-04T15:40:14.454565Z", "url": "https://files.pythonhosted.org/packages/7a/42/88ca40b068dff248d1f504c114cf417f1da88acefbad176bd30cf26bab5d/letsencrypt_gencsr-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "18c7857b3d7e158a60a10f3dc2510e01", "sha256": "c55460d3bb68be3f3c71c79b152fd157058f8d779627b6b5bac6deef5f86788c"}, "downloads": -1, "filename": "letsencrypt_gencsr-0.1.1.tar.gz", "has_sig": false, "md5_digest": "18c7857b3d7e158a60a10f3dc2510e01", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3685, "upload_time": "2015-12-04T15:42:54", "upload_time_iso_8601": "2015-12-04T15:42:54.774254Z", "url": "https://files.pythonhosted.org/packages/a9/cf/714c0c3cf00dd3d7ab8576f47b1e17ed4e1393839875849adfadad76fc50/letsencrypt_gencsr-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "e93a74024d24d0b92d4ce42d58df961f", "sha256": "dcd603dafcf73ec78d55a2e837770f28f671da5abd6badd7be7e8edadd605622"}, "downloads": -1, "filename": "letsencrypt_gencsr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e93a74024d24d0b92d4ce42d58df961f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11416, "upload_time": "2015-12-05T18:35:27", "upload_time_iso_8601": "2015-12-05T18:35:27.544736Z", "url": "https://files.pythonhosted.org/packages/52/20/75b96c98fc92d287c5bc3a8560e52a658d5cb1be04f75295eca2e70b2739/letsencrypt_gencsr-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e93a74024d24d0b92d4ce42d58df961f", "sha256": "dcd603dafcf73ec78d55a2e837770f28f671da5abd6badd7be7e8edadd605622"}, "downloads": -1, "filename": "letsencrypt_gencsr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e93a74024d24d0b92d4ce42d58df961f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11416, "upload_time": "2015-12-05T18:35:27", "upload_time_iso_8601": "2015-12-05T18:35:27.544736Z", "url": "https://files.pythonhosted.org/packages/52/20/75b96c98fc92d287c5bc3a8560e52a658d5cb1be04f75295eca2e70b2739/letsencrypt_gencsr-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:54 2020"}