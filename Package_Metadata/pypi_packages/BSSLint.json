{"info": {"author": "Anmol Jagetia", "author_email": "anmoljagetia@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "BSSlint\r\n===========\r\nDerived from the popular CPPLint from Google, but modified to incorporate code styles by Dr. B.S. Sanjeev for my undergraduate Data Structures and Algorithms courses.\r\n\r\nWe've all written terrible code, and using proper indentation and code styling is the first step one has to take to improve the quality of code. Linter is a helper, that helps in identifying common style related errors in code.\r\n\r\nThe style guidelines this tries to follow are based on Google's Style Guide, however they have since then been modified to incorporate the styles suggest for my course.\r\n\r\nEvery problem is given a confidence score from 1-5, with 5 meaning the certainty of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review.\r\n\r\nInstallation\r\n======================\r\nMethod 1 (Recommended)\r\n------------------------\r\nbsslint can be installed using both pip and easy_install globally by running the commands :\r\n\r\nsudo pip install bsslint\r\nor\r\n\r\nsudo easy_install bsslint\r\n\r\nMethod 2 (Do It Yourself)\r\n--------------------------\r\nThe script can also be directly used by downloading the binary into the folder of execution by running the command :\r\n\r\nwget -O bsslint http://git.io/vuUVj && chmod +x bsslint\r\nOnce the executable file is in the desired folder, any code can be evaluated using :\r\n\r\n./bsslint [FILENAME]\r\n\r\nUsage\r\n===============\r\nIf you have installed bsslint globally, and if it is available in your $PATH, a simple command can be used :\r\n\r\nbsslint [FILENAME]\r\n\r\nAnother cool way of using bsslint is to use add the following mapping in vimrc to add a key (like F8), to run the lint when desired :\r\n\r\nautocmd filetype cpp nnoremap<F8> :!bsslint % <CR>\r\nautocmd filetype c nnoremap<F8> :!bsslint % <CR>\r\nFor similar tools to compile and evaluate results like IDE from within vim, check out my vimrc and other dotfiles.\r\n\r\nFull Disclaimer\r\n==================\r\nThis is a very old code, that I had lost, and then recovered one day. It is not perfect, however it was extremely helpful to me during the evaluations. I have tried cleaning it up a little.\r\n\r\nContributions are welcome.\r\n\r\nKnown Errors\r\n==================\r\nAll variables used in any function are to be declared at the start of the same. This file does not detect this requirement.\r\n\r\nLicense\r\n============\r\nMIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/anmoljagetia/BSSlint", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "BSSLint", "package_url": "https://pypi.org/project/BSSLint/", "platform": "", "project_url": "https://pypi.org/project/BSSLint/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/anmoljagetia/BSSlint"}, "release_url": "https://pypi.org/project/BSSLint/0.5/", "requires_dist": null, "requires_python": null, "summary": "Derived from the popular CPPLint from Google, but modified to incorporate code styles by Dr. B.S. Sanjeev for my undergraduate Data Structures and Algorithms courses", "version": "0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"bsslint\">\n<h2>BSSlint</h2>\n<p>Derived from the popular CPPLint from Google, but modified to incorporate code styles by Dr. B.S. Sanjeev for my undergraduate Data Structures and Algorithms courses.</p>\n<p>We\u2019ve all written terrible code, and using proper indentation and code styling is the first step one has to take to improve the quality of code. Linter is a helper, that helps in identifying common style related errors in code.</p>\n<p>The style guidelines this tries to follow are based on Google\u2019s Style Guide, however they have since then been modified to incorporate the styles suggest for my course.</p>\n<p>Every problem is given a confidence score from 1-5, with 5 meaning the certainty of the problem, and 1 meaning it could be a legitimate construct. This will miss some errors, and is not a substitute for a code review.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"method-1-recommended\">\n<h3>Method 1 (Recommended)</h3>\n<p>bsslint can be installed using both pip and easy_install globally by running the commands :</p>\n<p>sudo pip install bsslint\nor</p>\n<p>sudo easy_install bsslint</p>\n</div>\n<div id=\"method-2-do-it-yourself\">\n<h3>Method 2 (Do It Yourself)</h3>\n<p>The script can also be directly used by downloading the binary into the folder of execution by running the command :</p>\n<p>wget -O bsslint <a href=\"http://git.io/vuUVj\" rel=\"nofollow\">http://git.io/vuUVj</a> &amp;&amp; chmod +x bsslint\nOnce the executable file is in the desired folder, any code can be evaluated using :</p>\n<p>./bsslint [FILENAME]</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you have installed bsslint globally, and if it is available in your $PATH, a simple command can be used :</p>\n<p>bsslint [FILENAME]</p>\n<p>Another cool way of using bsslint is to use add the following mapping in vimrc to add a key (like F8), to run the lint when desired :</p>\n<p>autocmd filetype cpp nnoremap&lt;F8&gt; :!bsslint % &lt;CR&gt;\nautocmd filetype c nnoremap&lt;F8&gt; :!bsslint % &lt;CR&gt;\nFor similar tools to compile and evaluate results like IDE from within vim, check out my vimrc and other dotfiles.</p>\n</div>\n<div id=\"full-disclaimer\">\n<h2>Full Disclaimer</h2>\n<p>This is a very old code, that I had lost, and then recovered one day. It is not perfect, however it was extremely helpful to me during the evaluations. I have tried cleaning it up a little.</p>\n<p>Contributions are welcome.</p>\n</div>\n<div id=\"known-errors\">\n<h2>Known Errors</h2>\n<p>All variables used in any function are to be declared at the start of the same. This file does not detect this requirement.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n\n          </div>"}, "last_serial": 1912952, "releases": {"0.5": [{"comment_text": "", "digests": {"md5": "e8579bcb57d89a6502fca82eda3e1588", "sha256": "0f638df867c4fba77f7e2f4e022b99a5f3b6e1ece649896dd3523f69e833f43d"}, "downloads": -1, "filename": "BSSLint-0.5.tar.gz", "has_sig": false, "md5_digest": "e8579bcb57d89a6502fca82eda3e1588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67278, "upload_time": "2016-01-20T08:26:00", "upload_time_iso_8601": "2016-01-20T08:26:00.351134Z", "url": "https://files.pythonhosted.org/packages/92/77/867297aca28cb0c3e50202a5019c0bdc69877d250173c2a43ecf8fe8bfaa/BSSLint-0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e8579bcb57d89a6502fca82eda3e1588", "sha256": "0f638df867c4fba77f7e2f4e022b99a5f3b6e1ece649896dd3523f69e833f43d"}, "downloads": -1, "filename": "BSSLint-0.5.tar.gz", "has_sig": false, "md5_digest": "e8579bcb57d89a6502fca82eda3e1588", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67278, "upload_time": "2016-01-20T08:26:00", "upload_time_iso_8601": "2016-01-20T08:26:00.351134Z", "url": "https://files.pythonhosted.org/packages/92/77/867297aca28cb0c3e50202a5019c0bdc69877d250173c2a43ecf8fe8bfaa/BSSLint-0.5.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:11 2020"}