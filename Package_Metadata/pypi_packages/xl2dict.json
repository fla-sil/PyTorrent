{"info": {"author": "Ashwin Kondapalli", "author_email": "kashwinreddy@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Topic :: Software Development :: Quality Assurance"], "description": "Introduction\n============\n\nxl2dict is a python module to convert spreadsheets in to python dictionary. The input is a spreadsheet (xls or xlsx)\nand the output is a list of dictionaries. The first row in the spreadsheet is treated as the header rows and each of the\ncells in the first row assumes the keys in the output python dictionary. This python module will also enable the user\nto seamlessly search for a data row in the speadsheet by specifying keyword / keywords . All the data rows containing\nthe specified keyword in any of their cells will be returned. This behavior is extremely useful in implementing\ndata driven and keyword driven tests and also in implementing object repositories for most opensource test automation\ntools.This module will also enable the users to write data in to spreadsheet rows matching a\nspecified keyword / keywords, a feature that can be used to store dynamic data between dependent tests.\n\nInstallation\n============\n\nTo install xl2dict, type the following command in the command line\n\n.. code-block:: bash\n\n    $ pip install xl2dict\n\nQuickstart\n==========\n\n**1. convert_sheet_to_dict()**\n\nThis method will convert excel sheets to dict. The input is path to the excel file or a sheet object.\nif file_path is None, sheet object must be provded. This method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() and\nfetch_data_by_column_by_index_multiple().If you need to filter data by a specific keyword, specify the dict in\nfilter_variables_dict like {column name : keyword} . Any rows that matches the keyword in the specified column\nwill be returned. Multiple keywords can be specified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.convert_sheet_to_dict(file_path=\"Users/xyz/Desktop/myexcel.xls\", sheet=\"First Sheet\",\n                                     filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n\n**2. fetch_data_by_column_by_sheet_name()**\n\nThis method will convert the specified sheet in the excel file to dict. The input is path to the excel file .\nIf sheet_name is not provided, this method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() or\nfetch_data_by_column_by_sheet_index_multiple(). If you need to filter data by a specific keyword,\nspecify the dict in filter_variables_dict like {column name : keyword} . Any rows that matches the keyword in\nthe specified column will be returned. Multiple keywords can be specified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.fetch_data_by_column_by_sheet_name(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                  sheet_name=\"First Sheet\",\n                                                  filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n**3. fetch_data_by_column_by_sheet_index()**\n\nThis method will convert the specified sheet in the excel file to dict. The input is path to the excel file .\nIf sheet_index is not provided, this method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() or\nfetch_data_by_column_by_sheet_index_multiple(). If you need to filter data by a specific keyword,\nspecify the dict in filter_variables_dict like {column name : keyword} . Any rows that matches the keyword in\nthe specified column will be returned. Multiple keywords can be specified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.fetch_data_by_column_by_sheet_index(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                   sheet_index=1,\n                                                   filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n**4. fetch_data_by_column_by_sheet_name_multiple()**\n\nThis method will convert multiple sheets in the excel file to dict. The input is path to the excel file .\nIf sheet_names is not provided, this method will convert ALL the sheets.If you need to filter data by a specific\nkeyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAny rows that matches the keyword  in the specified column will be returned. Multiple keywords can be specified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.fetch_data_by_column_by_sheet_name_multiple(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                           sheet_names=[\"First Sheet\",\"Some other sheet\"],\n                                                           filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n**5. fetch_data_by_column_by_sheet_index_multiple()**\n\nThis method will convert multiple sheets in the excel file to dict. The input is path to the excel file .\nIf sheet_indices is not provided, this method will convert ALL the sheets.If you need to filter data by a\nspecific keyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAny rows that matches the keyword  in the specified column will be returned. Multiple keywords can be specified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.fetch_data_by_column_by_sheet_index_multiple(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                            sheet_indices=[0,1,4,7],\n                                                            filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n**6. fetch_matching_data_row_indices()**\n\nThis method will fetch all the rows matching the specified filter. The input is path to the excel file .\nIf sheet_name_index is not provided, this method will search the first sheet sheet. If you need to filter data\nby a specific keyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAll the row indices that matches the keyword  in the specified column will be returned. Multiple keywords can be\nspecified.\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.fetch_matching_data_row_indices(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                               sheet_name_index=\"First Sheet\",\n                                               filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n    myxlobject.fetch_matching_data_row_indices(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                               sheet_name_index=5,\n                                               filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\n**7. write_data_to_column()**\n\nThis method will write data in to the specified column of all the rows matching the specified filter. The input\nis path to the excel file .If sheet_name is not provided, this method will write data in to the specified column\nin the first sheet sheet. If you need to write data  in to rows by a specific keyword / keywords, specify the\ndict in filter_variables_dict like {column name : keyword} .The specified data will be written in the specified\ncolumn in all rows that matches the keyword. Multiple keywords can be specified.\n\n\nUsage example::\n\n    myxlobject= XlToDict()\n    myxlobject.write_data_to_column(file_path=\"Users/xyz/Desktop/myexcel.xls\",column_name=\"Workorder Number\",\n                                    data=\"999999999\", sheet_name=\"First Sheet\",\n                                    filter_variables_dict={\"Test Case\" : \"Create Work Order\", \"Environment\" : \"Dev\"})\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gettalent/xl2dict", "keywords": "data driven testing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "xl2dict", "package_url": "https://pypi.org/project/xl2dict/", "platform": "", "project_url": "https://pypi.org/project/xl2dict/", "project_urls": {"Homepage": "https://github.com/gettalent/xl2dict"}, "release_url": "https://pypi.org/project/xl2dict/0.1.5/", "requires_dist": null, "requires_python": "", "summary": "Spreadsheet to dictionary converter and data explorer", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>xl2dict is a python module to convert spreadsheets in to python dictionary. The input is a spreadsheet (xls or xlsx)\nand the output is a list of dictionaries. The first row in the spreadsheet is treated as the header rows and each of the\ncells in the first row assumes the keys in the output python dictionary. This python module will also enable the user\nto seamlessly search for a data row in the speadsheet by specifying keyword / keywords . All the data rows containing\nthe specified keyword in any of their cells will be returned. This behavior is extremely useful in implementing\ndata driven and keyword driven tests and also in implementing object repositories for most opensource test automation\ntools.This module will also enable the users to write data in to spreadsheet rows matching a\nspecified keyword / keywords, a feature that can be used to store dynamic data between dependent tests.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install xl2dict, type the following command in the command line</p>\n<pre>$ pip install xl2dict\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p><strong>1. convert_sheet_to_dict()</strong></p>\n<p>This method will convert excel sheets to dict. The input is path to the excel file or a sheet object.\nif file_path is None, sheet object must be provded. This method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() and\nfetch_data_by_column_by_index_multiple().If you need to filter data by a specific keyword, specify the dict in\nfilter_variables_dict like {column name : keyword} . Any rows that matches the keyword in the specified column\nwill be returned. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.convert_sheet_to_dict(file_path=\"Users/xyz/Desktop/myexcel.xls\", sheet=\"First Sheet\",\n                                 filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>2. fetch_data_by_column_by_sheet_name()</strong></p>\n<p>This method will convert the specified sheet in the excel file to dict. The input is path to the excel file .\nIf sheet_name is not provided, this method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() or\nfetch_data_by_column_by_sheet_index_multiple(). If you need to filter data by a specific keyword,\nspecify the dict in filter_variables_dict like {column name : keyword} . Any rows that matches the keyword in\nthe specified column will be returned. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.fetch_data_by_column_by_sheet_name(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                              sheet_name=\"First Sheet\",\n                                              filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>3. fetch_data_by_column_by_sheet_index()</strong></p>\n<p>This method will convert the specified sheet in the excel file to dict. The input is path to the excel file .\nIf sheet_index is not provided, this method will convert only the first sheet.\nIf you need to convert multiple sheets, please use the method fetch_data_by_column_by_sheet_name_multiple() or\nfetch_data_by_column_by_sheet_index_multiple(). If you need to filter data by a specific keyword,\nspecify the dict in filter_variables_dict like {column name : keyword} . Any rows that matches the keyword in\nthe specified column will be returned. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.fetch_data_by_column_by_sheet_index(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                               sheet_index=1,\n                                               filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>4. fetch_data_by_column_by_sheet_name_multiple()</strong></p>\n<p>This method will convert multiple sheets in the excel file to dict. The input is path to the excel file .\nIf sheet_names is not provided, this method will convert ALL the sheets.If you need to filter data by a specific\nkeyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAny rows that matches the keyword  in the specified column will be returned. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.fetch_data_by_column_by_sheet_name_multiple(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                       sheet_names=[\"First Sheet\",\"Some other sheet\"],\n                                                       filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>5. fetch_data_by_column_by_sheet_index_multiple()</strong></p>\n<p>This method will convert multiple sheets in the excel file to dict. The input is path to the excel file .\nIf sheet_indices is not provided, this method will convert ALL the sheets.If you need to filter data by a\nspecific keyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAny rows that matches the keyword  in the specified column will be returned. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.fetch_data_by_column_by_sheet_index_multiple(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                                        sheet_indices=[0,1,4,7],\n                                                        filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>6. fetch_matching_data_row_indices()</strong></p>\n<p>This method will fetch all the rows matching the specified filter. The input is path to the excel file .\nIf sheet_name_index is not provided, this method will search the first sheet sheet. If you need to filter data\nby a specific keyword / keywords, specify the dict in filter_variables_dict like {column name : keyword} .\nAll the row indices that matches the keyword  in the specified column will be returned. Multiple keywords can be\nspecified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.fetch_matching_data_row_indices(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                           sheet_name_index=\"First Sheet\",\n                                           filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n\nmyxlobject.fetch_matching_data_row_indices(file_path=\"Users/xyz/Desktop/myexcel.xls\",\n                                           sheet_name_index=5,\n                                           filter_variables_dict={\"User Type\" : \"Admin\", \"Environment\" : \"Dev\"})\n</pre>\n<p><strong>7. write_data_to_column()</strong></p>\n<p>This method will write data in to the specified column of all the rows matching the specified filter. The input\nis path to the excel file .If sheet_name is not provided, this method will write data in to the specified column\nin the first sheet sheet. If you need to write data  in to rows by a specific keyword / keywords, specify the\ndict in filter_variables_dict like {column name : keyword} .The specified data will be written in the specified\ncolumn in all rows that matches the keyword. Multiple keywords can be specified.</p>\n<p>Usage example:</p>\n<pre>myxlobject= XlToDict()\nmyxlobject.write_data_to_column(file_path=\"Users/xyz/Desktop/myexcel.xls\",column_name=\"Workorder Number\",\n                                data=\"999999999\", sheet_name=\"First Sheet\",\n                                filter_variables_dict={\"Test Case\" : \"Create Work Order\", \"Environment\" : \"Dev\"})\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3463106, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c41eac532195ebc9f8274bd638f9dda8", "sha256": "c51bda577947e94c8e743ae69a43fc03df8b0693f966033015c366f12c7f9c76"}, "downloads": -1, "filename": "xl2dict-0.1.0.macosx-10.10-x86_64.exe", "has_sig": false, "md5_digest": "c41eac532195ebc9f8274bd638f9dda8", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 74860, "upload_time": "2016-06-28T19:54:20", "upload_time_iso_8601": "2016-06-28T19:54:20.866737Z", "url": "https://files.pythonhosted.org/packages/9d/38/e9de876ba4e3030f64797ec190a44efecfd3aeaa784aa17111181072ae87/xl2dict-0.1.0.macosx-10.10-x86_64.exe", "yanked": false}, {"comment_text": "", "digests": {"md5": "46d55de84ff7171caaf133d5d88e7a68", "sha256": "b591cff719e465490c602c1bab993f364125dc9907fdd6163cbca10e85c09162"}, "downloads": -1, "filename": "xl2dict-0.1.0-py2.7.egg", "has_sig": false, "md5_digest": "46d55de84ff7171caaf133d5d88e7a68", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8444, "upload_time": "2016-06-28T19:53:42", "upload_time_iso_8601": "2016-06-28T19:53:42.983853Z", "url": "https://files.pythonhosted.org/packages/be/6a/8feece0f45b5236e6bfbd0c39cb6701e35b24b25e660b234b457e4afa307/xl2dict-0.1.0-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "81129db6e3ace20ceef581b13439537a", "sha256": "748f4c8d38bfe67efffe251807641ab9884c4f016dfa74e4a530af3c80debbb7"}, "downloads": -1, "filename": "xl2dict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "81129db6e3ace20ceef581b13439537a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4976, "upload_time": "2016-06-28T04:15:21", "upload_time_iso_8601": "2016-06-28T04:15:21.200792Z", "url": "https://files.pythonhosted.org/packages/f4/64/542bfe8af14d93f5086199a154520e6e60e7032502fe49a365722fcc6d95/xl2dict-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "700bbc4d7caf41aeaf7467ea45a8d123", "sha256": "0beb1f2c7ba15c707b07d4a319108bdea354ba4f9b4b07c2b00446b1d4509638"}, "downloads": -1, "filename": "xl2dict-0.1.1.macosx-10.10-x86_64.exe", "has_sig": false, "md5_digest": "700bbc4d7caf41aeaf7467ea45a8d123", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 74863, "upload_time": "2016-08-29T15:09:02", "upload_time_iso_8601": "2016-08-29T15:09:02.389078Z", "url": "https://files.pythonhosted.org/packages/77/ab/dc3367dd149625a106e415caa3dd48c93ac26e7878d310b5aa9328672c60/xl2dict-0.1.1.macosx-10.10-x86_64.exe", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "d09b537f9e0745acb04b4f88a66398bf", "sha256": "f3a4de1d4ee2eebe0a24f88d2c5538e6e754ec35642402581b3a0e8489b63580"}, "downloads": -1, "filename": "xl2dict-0.1.1.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "d09b537f9e0745acb04b4f88a66398bf", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 6420, "upload_time": "2016-08-29T15:08:31", "upload_time_iso_8601": "2016-08-29T15:08:31.324045Z", "url": "https://files.pythonhosted.org/packages/70/89/68c32fe9307dfb72e68c280bb53b26fdac03d5e8214098ff458088de704f/xl2dict-0.1.1.macosx-10.10-x86_64.tar.gz", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "f0aed05938da0020a38e4b8af68409b0", "sha256": "16bfc847987c1856e65d9ff53d952db34b7f960fddf2d05ede2ea39a63a74fdc"}, "downloads": -1, "filename": "xl2dict-0.1.1.macosx-10.10-x86_64.zip", "has_sig": false, "md5_digest": "f0aed05938da0020a38e4b8af68409b0", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 9737, "upload_time": "2016-08-29T15:08:52", "upload_time_iso_8601": "2016-08-29T15:08:52.013234Z", "url": "https://files.pythonhosted.org/packages/a6/11/7cc8681dff03f145bd8e8916715709c4080e23bc90ce6cfb5df208ab2004/xl2dict-0.1.1.macosx-10.10-x86_64.zip", "yanked": false}, {"comment_text": "", "digests": {"md5": "657a1b24eef7d627447369219b3fc17a", "sha256": "52c12c0a975296479e7f69faa23c661c0923f5b9cf21dc06d6e14f278c882016"}, "downloads": -1, "filename": "xl2dict-0.1.1-py2.7.egg", "has_sig": false, "md5_digest": "657a1b24eef7d627447369219b3fc17a", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8461, "upload_time": "2016-08-29T15:08:41", "upload_time_iso_8601": "2016-08-29T15:08:41.806867Z", "url": "https://files.pythonhosted.org/packages/4e/49/a59a7b219bd1fce79d53afb8b2b61737598abaf3220b27f76490b0a14f98/xl2dict-0.1.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "e724cbe7feca48e85a06100a2160478c", "sha256": "5daa9489a55df85a9b2db34d9aa55cc4aa8358a3dd0d0f755a1ac55bfb2cfe29"}, "downloads": -1, "filename": "xl2dict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e724cbe7feca48e85a06100a2160478c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4983, "upload_time": "2016-08-29T15:07:10", "upload_time_iso_8601": "2016-08-29T15:07:10.530813Z", "url": "https://files.pythonhosted.org/packages/dc/51/32fe249f69fe96bc5455778741f43e7db4268079fb314c3681b2177d0032/xl2dict-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "70b829ae3168a4d7c420e18c2ad7b7b8", "sha256": "f0ec4d774e06b21881a922d124da33010b06a903fd2d21cd03fdd3c772a19ae9"}, "downloads": -1, "filename": "xl2dict-0.1.2.macosx-10.10-x86_64.exe", "has_sig": false, "md5_digest": "70b829ae3168a4d7c420e18c2ad7b7b8", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 74852, "upload_time": "2016-08-29T15:55:16", "upload_time_iso_8601": "2016-08-29T15:55:16.359917Z", "url": "https://files.pythonhosted.org/packages/f9/43/65e9810ef800962209cbdf3d833c62b29ffcc87b5f198bac743a1f79bf59/xl2dict-0.1.2.macosx-10.10-x86_64.exe", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "625dc99e0f96be458f1d2a34ed7bc27b", "sha256": "4cb6e62fb7501ad8ba8ed25b9566dbd8660e541ebb7e81cd396ad9c05bb80c93"}, "downloads": -1, "filename": "xl2dict-0.1.2.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "625dc99e0f96be458f1d2a34ed7bc27b", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 6425, "upload_time": "2016-08-29T15:54:36", "upload_time_iso_8601": "2016-08-29T15:54:36.861241Z", "url": "https://files.pythonhosted.org/packages/2b/87/7b1be7f124e341f5579be008e856db6850a9dbbff7a69338914142114e8c/xl2dict-0.1.2.macosx-10.10-x86_64.tar.gz", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "4de615adfb1926b8daea47e276be28a3", "sha256": "91b47857414b7c055e164324000d522423d9cce075bda7edb0faf91ec2e39369"}, "downloads": -1, "filename": "xl2dict-0.1.2.macosx-10.10-x86_64.zip", "has_sig": false, "md5_digest": "4de615adfb1926b8daea47e276be28a3", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 9739, "upload_time": "2016-08-29T15:55:08", "upload_time_iso_8601": "2016-08-29T15:55:08.318602Z", "url": "https://files.pythonhosted.org/packages/7c/ea/1acb4dd21eff066bc380efd80496272f50c800ba6d3d6071b8eaf1577d14/xl2dict-0.1.2.macosx-10.10-x86_64.zip", "yanked": false}, {"comment_text": "", "digests": {"md5": "679949ceb0935a05fee6470e12948f19", "sha256": "9bc1a66e73d1a554a53f36bae182e2fb15c8c789015fa623a5be9fad7171735c"}, "downloads": -1, "filename": "xl2dict-0.1.2-py2.7.egg", "has_sig": false, "md5_digest": "679949ceb0935a05fee6470e12948f19", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8463, "upload_time": "2016-08-29T15:54:58", "upload_time_iso_8601": "2016-08-29T15:54:58.397863Z", "url": "https://files.pythonhosted.org/packages/06/15/061c53dc4ba9dc09026b018a78c7ddbf9a3f213c29f9208deed58da3377a/xl2dict-0.1.2-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "83d159c56a96cc4f92b4e2c6f824fac5", "sha256": "5985b1a3326138f5f7d899075d8e7099734f925ec61b982ca61d2185f9136aeb"}, "downloads": -1, "filename": "xl2dict-0.1.2.tar.gz", "has_sig": false, "md5_digest": "83d159c56a96cc4f92b4e2c6f824fac5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4991, "upload_time": "2016-08-29T15:54:25", "upload_time_iso_8601": "2016-08-29T15:54:25.181594Z", "url": "https://files.pythonhosted.org/packages/30/64/85b2005804e0b0d447c9b20eff32a295a98f3832ab80aa6edc08407aa502/xl2dict-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "c5f33317748126748b921d671c862e12", "sha256": "123a47a89071843a26a6c68d0825e98c468290a36cf946ad56c7e5dfadefd695"}, "downloads": -1, "filename": "xl2dict-0.1.3.macosx-10.10-x86_64.exe", "has_sig": false, "md5_digest": "c5f33317748126748b921d671c862e12", "packagetype": "bdist_wininst", "python_version": "any", "requires_python": null, "size": 74836, "upload_time": "2016-08-29T16:22:48", "upload_time_iso_8601": "2016-08-29T16:22:48.867012Z", "url": "https://files.pythonhosted.org/packages/e8/3e/a630239326e7bf53090d98b2d514f0da52cd37adca71829f7c1854bb2c21/xl2dict-0.1.3.macosx-10.10-x86_64.exe", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "3c0f17b805514c1fd98d0c78d675b04f", "sha256": "da9564efea6aa4aabba1ef33dd86adb7d00cf51200b5f2fb055579ad4529ac19"}, "downloads": -1, "filename": "xl2dict-0.1.3.macosx-10.10-x86_64.tar.gz", "has_sig": false, "md5_digest": "3c0f17b805514c1fd98d0c78d675b04f", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 6423, "upload_time": "2016-08-29T16:22:01", "upload_time_iso_8601": "2016-08-29T16:22:01.366957Z", "url": "https://files.pythonhosted.org/packages/ed/6d/924166443f69be80a098040504b064c48df002a7ea9fa1852d20f056a92c/xl2dict-0.1.3.macosx-10.10-x86_64.tar.gz", "yanked": false}, {"comment_text": "built for Darwin-15.0.0", "digests": {"md5": "e3212b557cf3c93a4b0d62d5e2d033ec", "sha256": "f1724507fa343f4802ec58c0c0e985fb951e25ad7cac5200a1ecee99831894ab"}, "downloads": -1, "filename": "xl2dict-0.1.3.macosx-10.10-x86_64.zip", "has_sig": false, "md5_digest": "e3212b557cf3c93a4b0d62d5e2d033ec", "packagetype": "bdist_dumb", "python_version": "any", "requires_python": null, "size": 9736, "upload_time": "2016-08-29T16:22:19", "upload_time_iso_8601": "2016-08-29T16:22:19.998413Z", "url": "https://files.pythonhosted.org/packages/d5/2d/0282a207a029b7c10e6df495ccf54fc9525e186477abd36fd02b3e4f4cdf/xl2dict-0.1.3.macosx-10.10-x86_64.zip", "yanked": false}, {"comment_text": "", "digests": {"md5": "994efc837d677c64bc32a60493aeccbb", "sha256": "b092f09d4a5cd37ea4f095a4394de380f35f715745155c120a74226da885555a"}, "downloads": -1, "filename": "xl2dict-0.1.3-py2.7.egg", "has_sig": false, "md5_digest": "994efc837d677c64bc32a60493aeccbb", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 8460, "upload_time": "2016-08-29T16:22:12", "upload_time_iso_8601": "2016-08-29T16:22:12.096404Z", "url": "https://files.pythonhosted.org/packages/57/f5/d5c027131e438420e8717391eb49c6c18478fb1f12f92e0c087899f42578/xl2dict-0.1.3-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9075718ab0a834d290d6a66968d69f37", "sha256": "f2f53fdb36bf44a2a32e206280bcc7401af83c1ef212065b902da047a7d8dc1c"}, "downloads": -1, "filename": "xl2dict-0.1.3.tar.gz", "has_sig": false, "md5_digest": "9075718ab0a834d290d6a66968d69f37", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4984, "upload_time": "2016-08-29T16:21:48", "upload_time_iso_8601": "2016-08-29T16:21:48.798702Z", "url": "https://files.pythonhosted.org/packages/31/a4/1fcf6224dc12e756a5d4fdb92687f852c51efd44ce6df5aa7bf4640062a3/xl2dict-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "e5d20ac14dba2cf82c14564677a07674", "sha256": "20301dcbe1a65148b6e849ec68a144198148725088b4bba956e62bef7a38058a"}, "downloads": -1, "filename": "xl2dict-0.1.4.macosx-10.6-intel.tar.gz", "has_sig": false, "md5_digest": "e5d20ac14dba2cf82c14564677a07674", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6648, "upload_time": "2018-01-04T23:13:16", "upload_time_iso_8601": "2018-01-04T23:13:16.595870Z", "url": "https://files.pythonhosted.org/packages/de/1d/92eba309dcf34918dd4ad5cb1999fde56a684bff07fa1f0dc7550d9c6b19/xl2dict-0.1.4.macosx-10.6-intel.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8161113955ecaa3a471ebf5918abc4c1", "sha256": "b688d08d5dfbe0f75757c9adb2fd6571bfde463a781874ba71f003e3f5799c36"}, "downloads": -1, "filename": "xl2dict-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8161113955ecaa3a471ebf5918abc4c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5065, "upload_time": "2018-01-04T23:23:06", "upload_time_iso_8601": "2018-01-04T23:23:06.599057Z", "url": "https://files.pythonhosted.org/packages/2c/d7/9d01d84a14d735d3a2382519da286db20160cd264cda53c5be5ed5141c5e/xl2dict-0.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8161113955ecaa3a471ebf5918abc4c1", "sha256": "b688d08d5dfbe0f75757c9adb2fd6571bfde463a781874ba71f003e3f5799c36"}, "downloads": -1, "filename": "xl2dict-0.1.5.tar.gz", "has_sig": false, "md5_digest": "8161113955ecaa3a471ebf5918abc4c1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5065, "upload_time": "2018-01-04T23:23:06", "upload_time_iso_8601": "2018-01-04T23:23:06.599057Z", "url": "https://files.pythonhosted.org/packages/2c/d7/9d01d84a14d735d3a2382519da286db20160cd264cda53c5be5ed5141c5e/xl2dict-0.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:22 2020"}