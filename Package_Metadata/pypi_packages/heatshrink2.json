{"info": {"author": "Antonis Kalou @ JOHAN Sports, Erik Moqvist", "author_email": "antonis@johan-sports.com, erik.moqvist@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "|buildstatus|_\n|appveyor|_\n|coverage|_\n\nPyHeatshrink\n============\n\nCompression using the `Heatshrink algorithm\n<https://github.com/atomicobject/heatshrink>`__ in Python 3.\n\nInstallation\n------------\n\nFrom PyPI:\n\n.. code-block::\n\n   $ pip install heatshrink2\n\nUsage\n-----\n\nFiles/Streams\n^^^^^^^^^^^^^\n\nThe file interface attempts to imitate the behaviour of the built-in\n`file` object and other file-like objects (E.g. :code:`bz2.BZ2File`),\nthus you can expect all methods implemented in :code:`file` to also be\navailable.\n\nYou can open a heatshrink file by using the :code:`open` function:\n\n.. code-block:: python\n\n   >>> import heatshrink2\n   >>> with heatshrink2.open('data.bin', 'wb') as fout:\n   ...     fout.write(b\"Is there anybody in there?\")\n   ...\n   26\n   >>>\n\nYou can also use :code:`HeatshrinkFile` directly:\n\n.. code-block:: python\n\n   >>> from heatshrink2 import HeatshrinkFile\n   >>> with HeatshrinkFile('data.bin') as fin:\n   ...     print(fin.read(256))\n   ...\n   b'Is there anybody in there?'\n   >>> with HeatshrinkFile('data.bin') as fin:\n   ...     for line in fin:\n   ...         print(line)\n   ...\n   b'Is there anybody in there?'\n   >>>\n\nByte strings\n^^^^^^^^^^^^\n\nThe encoder accepts any iterable and returns a byte string\ncontaining encoded (compressed) data.\n\n.. code-block:: python\n\n   >>> import heatshrink2\n   >>> heatshrink2.compress(b'a string')\n   b'\\xb0\\xc8.wK\\x95\\xa6\\xddg'\n   >>>\n\nThe decoder accepts any object that implements the buffer protocol and\nreturns a byte representation of the decoded data.\n\n.. code-block:: python\n\n   >>> import heatshrink2\n   >>> heatshrink2.decompress(b'\\xb0\\xc8.wK\\x95\\xa6\\xddg')\n   b'a string'\n   >>>\n\nParameters\n^^^^^^^^^^\n\nBoth the encoder and decoder allow providing :code:`window_sz2` and\n:code:`lookahead_sz2` keywords:\n\n:code:`window_sz2` - The window size determines how far back in the\ninput can be searched for repeated patterns. A window_sz2 of 8 will\nonly use 256 bytes (2^8), while a window_sz2 of 10 will use 1024 bytes\n(2^10). The latter uses more memory, but may also compress more\neffectively by detecting more repetition.\n\n:code:`lookahead_sz2` - The lookahead size determines the max length\nfor repeated patterns that are found. If the lookahead_sz2 is 4, a\n50-byte run of 'a' characters will be represented as several repeated\n16-byte patterns (2^4 is 16), whereas a larger lookahead_sz2 may be\nable to represent it all at once. The number of bits used for the\nlookahead size is fixed, so an overly large lookahead size can reduce\ncompression by adding unused size bits to small patterns.\n\n:code:`input_buffer_size` - How large an input buffer to use for the\ndecoder. This impacts how much work the decoder can do in a single\nstep, and a larger buffer will use more memory. An extremely small\nbuffer (say, 1 byte) will add overhead due to lots of suspend/resume\nfunction calls, but should not change how well data compresses.\n\nCheck out the `heatshrink configuration page\n<https://github.com/atomicobject/heatshrink#configuration>`__ for more\ndetails.\n\nFor more use cases, please refer to the `tests folder\n<https://github.com/eerimoq/pyheatshrink/blob/master/tests>`__.\n\nBenchmarks\n----------\n\nThe benchmarks check compression/decompression against a ~6MB file:\n\n.. code-block::\n\n   $ python scripts/benchmarks.py\n\nTesting\n-------\n\nRunning tests is as simple as doing:\n\n.. code-block::\n\n    $ python setup.py test\n\nLicense\n-------\n\nISC license\n\n.. |buildstatus| image:: https://travis-ci.org/eerimoq/pyheatshrink.svg?branch=master\n.. _buildstatus: https://travis-ci.org/eerimoq/pyheatshrink\n\n.. |appveyor| image:: https://ci.appveyor.com/api/projects/status/github/eerimoq/pyheatshrink?svg=true\n.. _appveyor: https://ci.appveyor.com/project/eerimoq/pyheatshrink/branch/master\n\n.. |coverage| image:: https://coveralls.io/repos/github/eerimoq/pyheatshrink/badge.svg?branch=master\n.. _coverage: https://coveralls.io/github/eerimoq/pyheatshrink", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eerimoq/pyheatshrink", "keywords": "compression binding heatshrink LZSS", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "heatshrink2", "package_url": "https://pypi.org/project/heatshrink2/", "platform": "", "project_url": "https://pypi.org/project/heatshrink2/", "project_urls": {"Homepage": "https://github.com/eerimoq/pyheatshrink"}, "release_url": "https://pypi.org/project/heatshrink2/0.6.0/", "requires_dist": null, "requires_python": "", "summary": "Python bindings to the heatshrink library", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/eerimoq/pyheatshrink\" rel=\"nofollow\"><img alt=\"buildstatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c22423c53c31d053957c3be53236a94bbdedb61/68747470733a2f2f7472617669732d63692e6f72672f656572696d6f712f707968656174736872696e6b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/eerimoq/pyheatshrink/branch/master\" rel=\"nofollow\"><img alt=\"appveyor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3386ea5aa90e613d3db46c8c30e209c56c086682/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f6769746875622f656572696d6f712f707968656174736872696e6b3f7376673d74727565\"></a>\n<a href=\"https://coveralls.io/github/eerimoq/pyheatshrink\" rel=\"nofollow\"><img alt=\"coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bb898ff87e5ae95e0b32f3dc26164a7c6ac0c369/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f656572696d6f712f707968656174736872696e6b2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"pyheatshrink\">\n<h2>PyHeatshrink</h2>\n<p>Compression using the <a href=\"https://github.com/atomicobject/heatshrink\" rel=\"nofollow\">Heatshrink algorithm</a> in Python 3.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>From PyPI:</p>\n<pre>$ pip install heatshrink2\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<div id=\"files-streams\">\n<h4>Files/Streams</h4>\n<p>The file interface attempts to imitate the behaviour of the built-in\n<cite>file</cite> object and other file-like objects (E.g. <code>bz2.BZ2File</code>),\nthus you can expect all methods implemented in <code>file</code> to also be\navailable.</p>\n<p>You can open a heatshrink file by using the <code>open</code> function:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">heatshrink2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">heatshrink2</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s1\">'data.bin'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fout</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">fout</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"Is there anybody in there?\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"mi\">26</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>You can also use <code>HeatshrinkFile</code> directly:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">heatshrink2</span> <span class=\"kn\">import</span> <span class=\"n\">HeatshrinkFile</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">HeatshrinkFile</span><span class=\"p\">(</span><span class=\"s1\">'data.bin'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fin</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"sa\">b</span><span class=\"s1\">'Is there anybody in there?'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"k\">with</span> <span class=\"n\">HeatshrinkFile</span><span class=\"p\">(</span><span class=\"s1\">'data.bin'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">fin</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>         <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"sa\">b</span><span class=\"s1\">'Is there anybody in there?'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"byte-strings\">\n<h4>Byte strings</h4>\n<p>The encoder accepts any iterable and returns a byte string\ncontaining encoded (compressed) data.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">heatshrink2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">heatshrink2</span><span class=\"o\">.</span><span class=\"n\">compress</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'a string'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xb0\\xc8</span><span class=\"s1\">.wK</span><span class=\"se\">\\x95\\xa6\\xdd</span><span class=\"s1\">g'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>The decoder accepts any object that implements the buffer protocol and\nreturns a byte representation of the decoded data.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">heatshrink2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">heatshrink2</span><span class=\"o\">.</span><span class=\"n\">decompress</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s1\">'</span><span class=\"se\">\\xb0\\xc8</span><span class=\"s1\">.wK</span><span class=\"se\">\\x95\\xa6\\xdd</span><span class=\"s1\">g'</span><span class=\"p\">)</span>\n<span class=\"sa\">b</span><span class=\"s1\">'a string'</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n</div>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<p>Both the encoder and decoder allow providing <code>window_sz2</code> and\n<code>lookahead_sz2</code> keywords:</p>\n<p><code>window_sz2</code> - The window size determines how far back in the\ninput can be searched for repeated patterns. A window_sz2 of 8 will\nonly use 256 bytes (2^8), while a window_sz2 of 10 will use 1024 bytes\n(2^10). The latter uses more memory, but may also compress more\neffectively by detecting more repetition.</p>\n<p><code>lookahead_sz2</code> - The lookahead size determines the max length\nfor repeated patterns that are found. If the lookahead_sz2 is 4, a\n50-byte run of \u2018a\u2019 characters will be represented as several repeated\n16-byte patterns (2^4 is 16), whereas a larger lookahead_sz2 may be\nable to represent it all at once. The number of bits used for the\nlookahead size is fixed, so an overly large lookahead size can reduce\ncompression by adding unused size bits to small patterns.</p>\n<p><code>input_buffer_size</code> - How large an input buffer to use for the\ndecoder. This impacts how much work the decoder can do in a single\nstep, and a larger buffer will use more memory. An extremely small\nbuffer (say, 1 byte) will add overhead due to lots of suspend/resume\nfunction calls, but should not change how well data compresses.</p>\n<p>Check out the <a href=\"https://github.com/atomicobject/heatshrink#configuration\" rel=\"nofollow\">heatshrink configuration page</a> for more\ndetails.</p>\n<p>For more use cases, please refer to the <a href=\"https://github.com/eerimoq/pyheatshrink/blob/master/tests\" rel=\"nofollow\">tests folder</a>.</p>\n</div>\n</div>\n<div id=\"benchmarks\">\n<h3>Benchmarks</h3>\n<p>The benchmarks check compression/decompression against a ~6MB file:</p>\n<pre>$ python scripts/benchmarks.py\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>Running tests is as simple as doing:</p>\n<pre>$ python setup.py test\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>ISC license</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6397801, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9eaa6fbbdb7bf45695a7238375f28216", "sha256": "87ab09da29ee8515582331bd886c374afdddf1e74b7ead0ca4b63018c85cc3be"}, "downloads": -1, "filename": "heatshrink2-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9eaa6fbbdb7bf45695a7238375f28216", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 96336, "upload_time": "2020-01-03T17:42:17", "upload_time_iso_8601": "2020-01-03T17:42:17.958622Z", "url": "https://files.pythonhosted.org/packages/fb/e5/eb35c3fe099f92e0a9c1323f1cf3de78ee826441738a03238049f0cfc792/heatshrink2-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1f0c977a5728164a98b4d985d1f6146e", "sha256": "585504d34c765059f83f8550df850c8c360f34a85eb3b4f1bccefa5336ef6578"}, "downloads": -1, "filename": "heatshrink2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1f0c977a5728164a98b4d985d1f6146e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100222, "upload_time": "2020-01-03T17:53:02", "upload_time_iso_8601": "2020-01-03T17:53:02.860601Z", "url": "https://files.pythonhosted.org/packages/41/12/5909da56a81a1da1d6a5f50b07067680f0fd09b77210c47da2e44e7fe510/heatshrink2-0.2.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "297df58ae61b9bc9424760d712b79d1f", "sha256": "749eb6f96e0803e2e5652b848806531dc66609644fb7e18621b51ce9fada3f75"}, "downloads": -1, "filename": "heatshrink2-0.4.0.tar.gz", "has_sig": false, "md5_digest": "297df58ae61b9bc9424760d712b79d1f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100650, "upload_time": "2020-01-04T09:47:10", "upload_time_iso_8601": "2020-01-04T09:47:10.157131Z", "url": "https://files.pythonhosted.org/packages/22/2a/69dc892be0078998fb244f53b93187f23944c49174af79cc38110d697ffd/heatshrink2-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "fe8409ecdbdb546249c11ca69cc6bc0b", "sha256": "a5a52591b7e110b389cb6dbd96edfab236e9983e875ba91058bdea979215d164"}, "downloads": -1, "filename": "heatshrink2-0.5.0.tar.gz", "has_sig": false, "md5_digest": "fe8409ecdbdb546249c11ca69cc6bc0b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 97412, "upload_time": "2020-01-05T10:26:13", "upload_time_iso_8601": "2020-01-05T10:26:13.020016Z", "url": "https://files.pythonhosted.org/packages/29/07/5268689ea8f151a499d9d7280dc9748556e30a04ddee86aadccebb0a63fb/heatshrink2-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "6ab6c1b1092bb75dcfc9a0bfb7dcf927", "sha256": "460c0562bf5b70c063784d2aec85613f006485ba47cf85eedd488147f5cd588b"}, "downloads": -1, "filename": "heatshrink2-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6ab6c1b1092bb75dcfc9a0bfb7dcf927", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98006, "upload_time": "2020-01-05T11:01:09", "upload_time_iso_8601": "2020-01-05T11:01:09.398945Z", "url": "https://files.pythonhosted.org/packages/4c/a3/2ca968a11eb383fe43d7e28d7aba9676f5192f17b8793ac321da20dc45a9/heatshrink2-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ab6c1b1092bb75dcfc9a0bfb7dcf927", "sha256": "460c0562bf5b70c063784d2aec85613f006485ba47cf85eedd488147f5cd588b"}, "downloads": -1, "filename": "heatshrink2-0.6.0.tar.gz", "has_sig": false, "md5_digest": "6ab6c1b1092bb75dcfc9a0bfb7dcf927", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 98006, "upload_time": "2020-01-05T11:01:09", "upload_time_iso_8601": "2020-01-05T11:01:09.398945Z", "url": "https://files.pythonhosted.org/packages/4c/a3/2ca968a11eb383fe43d7e28d7aba9676f5192f17b8793ac321da20dc45a9/heatshrink2-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:54 2020"}