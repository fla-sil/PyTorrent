{"info": {"author": "Mike Thornton", "author_email": "six8@devdetails.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=========\nPackstrap\n=========\n\nBootstrap new Python packages with one simple command::\n\n    packstrap create my_package\n    \nWhen starting a Python package a lot of boilerplate is involved. You\nhave to make several files and directories. When you decide to distribute\nyour package you have to write a setup.py and reference docs for even the\nbasics. Packstrap aims to make starting a Python package simpler.    \n\nInstall\n-------\n\n    pip install packstrap\n    packstrap --help\n\nCreating a Package\n------------------\n\nWith Packstrap, creating a package is a simple as one command::\n\n    packstrap create my_package /path/to/code --author \"My Name\" --plugin git --plugin fabfile --plugin pytest\n\nThis will create a `my_package` directory in `/path/to/code` with a structure similar to::\n\n    /path/to/code/my_package/\n        .gitignore\n        LICENSE\n        MANIFEST.in\n        README.rst\n        VERSION.txt\n        fabfile.py\n        setup.py\n        src/\n            my_package/\n                __init__.py\n            tests/\n                conftest.py\n                runtests.py\n\nPackstrap creates the base files for a python project and fills in the basics for setup.py, README.rst, etc.\nThe git plugin creates `.gitignore`, the fabfile plugin creates `fabfile.py`, and the pytest plugin creates the\n`src/tests` directory and files.\n\nSo now all you have to do is write your module in `my_package`, expand on your docs in README.rst, and commit\nyour package.\n\nSet Defaults\n------------\n\n`packstrap create` has several options to help generate your package. A lot of the options like `author`, `author_email`, and even `plugins` are going to be the same for all your projects. To save you some keystrokes you can use `packstrap defaults`::\n\n\n    packstrap defaults --author \"My Name\"\n    {\n      \"author\": \"My Name\", \n      \"skeleton\": \"default\"\n    }\n\nYou can also use `packstrap defaults` without options to list the current defaults.", "description_content_type": null, "docs_url": null, "download_url": "http://github.com/six8/packstrap", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/six8/packstrap", "keywords": "packaging", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "packstrap", "package_url": "https://pypi.org/project/packstrap/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/packstrap/", "project_urls": {"Download": "http://github.com/six8/packstrap", "Homepage": "http://github.com/six8/packstrap"}, "release_url": "https://pypi.org/project/packstrap/0.7.1/", "requires_dist": null, "requires_python": null, "summary": "Bootstrap new Python packages with one simple command", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Bootstrap new Python packages with one simple command:</p>\n<pre>packstrap create my_package\n</pre>\n<p>When starting a Python package a lot of boilerplate is involved. You\nhave to make several files and directories. When you decide to distribute\nyour package you have to write a setup.py and reference docs for even the\nbasics. Packstrap aims to make starting a Python package simpler.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<blockquote>\npip install packstrap\npackstrap \u2013help</blockquote>\n</div>\n<div id=\"creating-a-package\">\n<h2>Creating a Package</h2>\n<p>With Packstrap, creating a package is a simple as one command:</p>\n<pre>packstrap create my_package /path/to/code --author \"My Name\" --plugin git --plugin fabfile --plugin pytest\n</pre>\n<p>This will create a <cite>my_package</cite> directory in <cite>/path/to/code</cite> with a structure similar to:</p>\n<pre>/path/to/code/my_package/\n    .gitignore\n    LICENSE\n    MANIFEST.in\n    README.rst\n    VERSION.txt\n    fabfile.py\n    setup.py\n    src/\n        my_package/\n            __init__.py\n        tests/\n            conftest.py\n            runtests.py\n</pre>\n<p>Packstrap creates the base files for a python project and fills in the basics for setup.py, README.rst, etc.\nThe git plugin creates <cite>.gitignore</cite>, the fabfile plugin creates <cite>fabfile.py</cite>, and the pytest plugin creates the\n<cite>src/tests</cite> directory and files.</p>\n<p>So now all you have to do is write your module in <cite>my_package</cite>, expand on your docs in README.rst, and commit\nyour package.</p>\n</div>\n<div id=\"set-defaults\">\n<h2>Set Defaults</h2>\n<p><cite>packstrap create</cite> has several options to help generate your package. A lot of the options like <cite>author</cite>, <cite>author_email</cite>, and even <cite>plugins</cite> are going to be the same for all your projects. To save you some keystrokes you can use <cite>packstrap defaults</cite>:</p>\n<pre>packstrap defaults --author \"My Name\"\n{\n  \"author\": \"My Name\",\n  \"skeleton\": \"default\"\n}\n</pre>\n<p>You can also use <cite>packstrap defaults</cite> without options to list the current defaults.</p>\n</div>\n\n          </div>"}, "last_serial": 795959, "releases": {"0.7.0": [{"comment_text": "", "digests": {"md5": "25a273cd1905b5ad3b0cce9f1c5afb3c", "sha256": "528483984e9c10e79f4cc5b5f9acc422cf700c83b701c7a66e7c59f111918476"}, "downloads": -1, "filename": "packstrap-0.7.0.tar.gz", "has_sig": false, "md5_digest": "25a273cd1905b5ad3b0cce9f1c5afb3c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4914, "upload_time": "2011-11-26T06:07:37", "upload_time_iso_8601": "2011-11-26T06:07:37.576958Z", "url": "https://files.pythonhosted.org/packages/cf/c5/6d2d056f3acfc4dcef9afb106fd8e4472a10cd887636e1d2f489328acf1a/packstrap-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "b8cb4edcc245f5a9b74c01b099718498", "sha256": "3049c9b90936892d4064d6844776d4d6939890878bc1af87e36091d7787f2a67"}, "downloads": -1, "filename": "packstrap-0.7.1.tar.gz", "has_sig": false, "md5_digest": "b8cb4edcc245f5a9b74c01b099718498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2011-11-26T06:11:49", "upload_time_iso_8601": "2011-11-26T06:11:49.842237Z", "url": "https://files.pythonhosted.org/packages/2f/be/833710080e9947269ba5800cf22a36ffeff72886e741df4420d6e6b21e4f/packstrap-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8cb4edcc245f5a9b74c01b099718498", "sha256": "3049c9b90936892d4064d6844776d4d6939890878bc1af87e36091d7787f2a67"}, "downloads": -1, "filename": "packstrap-0.7.1.tar.gz", "has_sig": false, "md5_digest": "b8cb4edcc245f5a9b74c01b099718498", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4955, "upload_time": "2011-11-26T06:11:49", "upload_time_iso_8601": "2011-11-26T06:11:49.842237Z", "url": "https://files.pythonhosted.org/packages/2f/be/833710080e9947269ba5800cf22a36ffeff72886e741df4420d6e6b21e4f/packstrap-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:05 2020"}