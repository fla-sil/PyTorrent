{"info": {"author": "Planeks", "author_email": "maxlytvynchuk@planeks.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# python-semantic-\u0441ompare\nExtracts, compares, transforms and sorts with buckets phrases.\n### Installation\nInstall a library\n```sh\n$ pip install semantic-compare\n```\nThe library requires a spacy model for natural language processing. If you want to use English, please run this command\n```sh\n$ python -m spacy download en_core_web_lg\n```\n## Usage\n#### Extract phrases\n**Simple Usage**\n```sh\nfrom semantic_compare import SemanticComparator as sc\ncomparator = sc(sentencizer=True)\nphrases = comparator.extract_phrases(\"Create, promote and develop a business.\")\n```\n**Output:**\n```sh\n['Create a business','promote a business','develop a business']\n```\n```sentencizer``` - a splitter of sentences by punctuation(dot, question mark, exclamation mark).\n\n**Advanced Usage**\n```sh\nfrom semantic_compare import SemanticComparator as sc\n\n# Sentence splitter\ndef our_sentencizer(doc):\n    \"\"\"\n    Sentence splitter function that allows splitting document on sentences\n    by different punctuations and new line\n    \"\"\"\n    for i, token in enumerate(doc[:-2]):\n        if token.text == \"\u2022\" or \"\u2022\" in token.text:\n            doc[i].is_sent_start = True\n        elif (token.text == \".\" or token.text == '...' \\ \n            or token.text == '?' or token.text == '!' or token.text == '\\n') \\\n            and doc[i+1].is_title:\n            doc[i+1].is_sent_start = True\n        else:\n            doc[i+1].is_sent_start = False\n    return doc\n\n\n# load small english spacy model(can be any spacy model)\ncomparator = sc(spacy_model='en_core_web_sm')\n    \n# Add a custom pipe for text preprocessing\ncomparator.add_custom_pipe(our_sentencizer, before='parser')\n\nphrases = comparator.extract_phrases('''\nMust Have:\n* Experience shaping the BI strategy from C-Level to Technical developers.\n* Extensive delivery of platform within a Business Intelligence and Analytics function.\n* Communication with stakeholders on all levels.\n''')\nprint('\\n'.join(phrases))\n```\nUsing ```add_custom_pipe``` you can add your custom pipe for text processing in spacy.\n### Compare phrases (Semantic similarity)\nGet the similarity of phrases against each other.\n**Example 1:**\n```sh\nphrase1 = 'Understand customer needs'\nphrase2 = 'Capture business requirements'\nsimilarity = comparator.compare_phrases(phrase1, phrase2)\nprint(similarity)\n```\n**Output:**\n```\n0.38569751\n```\n**Example 2:**\nGet a two-dimensional matrix that clusters the similarity of phrases against each other.\n```sh\nphrases_1 = [\n    'Communication with stakeholders',\n    'Understand customer needs',\n    'Experience shaping the BI strategy',\n    'shaping the BI strategy',\n    'Delivery of platform Analytics function',\n]\n\nphrases_2 = [\n    'Extensive delivery of platform within a Business Intelligence and Analytics function',\n    'shaping the BI strategy',\n    'Experience shaping the BI strategy from C-Level to Technical developers',\n    'Communication with stakeholders on all levels',\n    'Capture business requirements',\n    'Play computer games',\n]\nsimilarity = comparator.build_similarity_matrix(phrases_1, phrases_2)\nprint(similarity)\n```\n**Output:**\n```\n[[-0.03689054  0.0372301   0.17840812  0.09079809  0.65748763]\n[ 0.18079719  0.12055688  0.77624094  1.          0.22749564]\n[ 0.08472343  0.11505745  0.7030021   0.48876476  0.13252231]\n[ 0.7132235   0.07449755  0.178031    0.15712512  0.0676512 ]\n[ 0.11637229  0.38569745  0.23005028  0.25646406  0.26493344]\n[ 0.17955953  0.15243992  0.11233422  0.16087453  0.03144675]]\n```\n## Bucket sorting\nWhen you compare two documents you can see which phrases present in both or only in a specific document.\n```sh\nphrases_1 = [\n    'Communication with stakeholders',\n    'Understand customer needs',\n    'Experience shaping the BI strategy',\n    'shaping the BI strategy',\n    'Delivery of platform Analytics function',\n]\n\nphrases_2 = [\n    'Extensive delivery of platform within a Business Intelligence and Analytics function',\n    'shaping the BI strategy',\n    'Experience shaping the BI strategy from C-Level to Technical developers',\n    'Communication with stakeholders on all levels',\n    'Capture business requirements',\n    'Play computer games',\n]\n# cut_off - a percentage of similarity should be bigger than it so that we consider that phrases are similar(default=0.3)\nin_both, in_doc1, in_doc2 = comparator.bucket_sorting(\n    phrases_1, phrases_2, similarity, cut_off=0.5)\n```\n## Transfrom phrases\nGet all steps of transformation from one phrase to another.\n**Example:**\n```sh\nprint(comparator.transform_phrase(\n    'Understand customer needs',\n    'Capture business requirements',\n))\n```\n**Output**\n```sh\n[\"Understand customer needs\", \"Capture customer needs\", \"Capture business requirements\"]\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/planeks/python-semantic-compare", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "semantic-compare", "package_url": "https://pypi.org/project/semantic-compare/", "platform": "", "project_url": "https://pypi.org/project/semantic-compare/", "project_urls": {"Homepage": "https://github.com/planeks/python-semantic-compare"}, "release_url": "https://pypi.org/project/semantic-compare/0.9.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "NLP library that extracts, compares, transforms and sorts with buckets phrases.", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>python-semantic-\u0441ompare</h1>\n<p>Extracts, compares, transforms and sorts with buckets phrases.</p>\n<h3>Installation</h3>\n<p>Install a library</p>\n<pre>$ pip install semantic-compare\n</pre>\n<p>The library requires a spacy model for natural language processing. If you want to use English, please run this command</p>\n<pre>$ python -m spacy download en_core_web_lg\n</pre>\n<h2>Usage</h2>\n<h4>Extract phrases</h4>\n<p><strong>Simple Usage</strong></p>\n<pre>from semantic_compare import SemanticComparator as sc\n<span class=\"nv\">comparator</span> <span class=\"o\">=</span> sc<span class=\"o\">(</span><span class=\"nv\">sentencizer</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n<span class=\"nv\">phrases</span> <span class=\"o\">=</span> comparator.extract_phrases<span class=\"o\">(</span><span class=\"s2\">\"Create, promote and develop a business.\"</span><span class=\"o\">)</span>\n</pre>\n<p><strong>Output:</strong></p>\n<pre><span class=\"o\">[</span><span class=\"s1\">'Create a business'</span>,<span class=\"s1\">'promote a business'</span>,<span class=\"s1\">'develop a business'</span><span class=\"o\">]</span>\n</pre>\n<p><code>sentencizer</code> - a splitter of sentences by punctuation(dot, question mark, exclamation mark).</p>\n<p><strong>Advanced Usage</strong></p>\n<pre>from semantic_compare import SemanticComparator as sc\n\n<span class=\"c1\"># Sentence splitter</span>\ndef our_sentencizer<span class=\"o\">(</span>doc<span class=\"o\">)</span>:\n    <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    Sentence splitter function that allows splitting document on sentences</span>\n<span class=\"s2\">    by different punctuations and new line</span>\n<span class=\"s2\">    \"\"\"</span>\n    <span class=\"k\">for</span> i, token in enumerate<span class=\"o\">(</span>doc<span class=\"o\">[</span>:-2<span class=\"o\">])</span>:\n        <span class=\"k\">if</span> token.text <span class=\"o\">==</span> <span class=\"s2\">\"\u2022\"</span> or <span class=\"s2\">\"\u2022\"</span> in token.text:\n            doc<span class=\"o\">[</span>i<span class=\"o\">]</span>.is_sent_start <span class=\"o\">=</span> True\n        <span class=\"k\">elif</span> <span class=\"o\">(</span>token.text <span class=\"o\">==</span> <span class=\"s2\">\".\"</span> or token.text <span class=\"o\">==</span> <span class=\"s1\">'...'</span> <span class=\"se\">\\ </span>\n            or token.text <span class=\"o\">==</span> <span class=\"s1\">'?'</span> or token.text <span class=\"o\">==</span> <span class=\"s1\">'!'</span> or token.text <span class=\"o\">==</span> <span class=\"s1\">'\\n'</span><span class=\"o\">)</span> <span class=\"se\">\\</span>\n            and doc<span class=\"o\">[</span>i+1<span class=\"o\">]</span>.is_title:\n            doc<span class=\"o\">[</span>i+1<span class=\"o\">]</span>.is_sent_start <span class=\"o\">=</span> True\n        <span class=\"k\">else</span>:\n            doc<span class=\"o\">[</span>i+1<span class=\"o\">]</span>.is_sent_start <span class=\"o\">=</span> False\n    <span class=\"k\">return</span> doc\n\n\n<span class=\"c1\"># load small english spacy model(can be any spacy model)</span>\n<span class=\"nv\">comparator</span> <span class=\"o\">=</span> sc<span class=\"o\">(</span><span class=\"nv\">spacy_model</span><span class=\"o\">=</span><span class=\"s1\">'en_core_web_sm'</span><span class=\"o\">)</span>\n    \n<span class=\"c1\"># Add a custom pipe for text preprocessing</span>\ncomparator.add_custom_pipe<span class=\"o\">(</span>our_sentencizer, <span class=\"nv\">before</span><span class=\"o\">=</span><span class=\"s1\">'parser'</span><span class=\"o\">)</span>\n\n<span class=\"nv\">phrases</span> <span class=\"o\">=</span> comparator.extract_phrases<span class=\"o\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">Must Have:</span>\n<span class=\"s1\">* Experience shaping the BI strategy from C-Level to Technical developers.</span>\n<span class=\"s1\">* Extensive delivery of platform within a Business Intelligence and Analytics function.</span>\n<span class=\"s1\">* Communication with stakeholders on all levels.</span>\n<span class=\"s1\">'''</span><span class=\"o\">)</span>\nprint<span class=\"o\">(</span><span class=\"s1\">'\\n'</span>.join<span class=\"o\">(</span>phrases<span class=\"o\">))</span>\n</pre>\n<p>Using <code>add_custom_pipe</code> you can add your custom pipe for text processing in spacy.</p>\n<h3>Compare phrases (Semantic similarity)</h3>\n<p>Get the similarity of phrases against each other.\n<strong>Example 1:</strong></p>\n<pre><span class=\"nv\">phrase1</span> <span class=\"o\">=</span> <span class=\"s1\">'Understand customer needs'</span>\n<span class=\"nv\">phrase2</span> <span class=\"o\">=</span> <span class=\"s1\">'Capture business requirements'</span>\n<span class=\"nv\">similarity</span> <span class=\"o\">=</span> comparator.compare_phrases<span class=\"o\">(</span>phrase1, phrase2<span class=\"o\">)</span>\nprint<span class=\"o\">(</span>similarity<span class=\"o\">)</span>\n</pre>\n<p><strong>Output:</strong></p>\n<pre><code>0.38569751\n</code></pre>\n<p><strong>Example 2:</strong>\nGet a two-dimensional matrix that clusters the similarity of phrases against each other.</p>\n<pre><span class=\"nv\">phrases_1</span> <span class=\"o\">=</span> <span class=\"o\">[</span>\n    <span class=\"s1\">'Communication with stakeholders'</span>,\n    <span class=\"s1\">'Understand customer needs'</span>,\n    <span class=\"s1\">'Experience shaping the BI strategy'</span>,\n    <span class=\"s1\">'shaping the BI strategy'</span>,\n    <span class=\"s1\">'Delivery of platform Analytics function'</span>,\n<span class=\"o\">]</span>\n\n<span class=\"nv\">phrases_2</span> <span class=\"o\">=</span> <span class=\"o\">[</span>\n    <span class=\"s1\">'Extensive delivery of platform within a Business Intelligence and Analytics function'</span>,\n    <span class=\"s1\">'shaping the BI strategy'</span>,\n    <span class=\"s1\">'Experience shaping the BI strategy from C-Level to Technical developers'</span>,\n    <span class=\"s1\">'Communication with stakeholders on all levels'</span>,\n    <span class=\"s1\">'Capture business requirements'</span>,\n    <span class=\"s1\">'Play computer games'</span>,\n<span class=\"o\">]</span>\n<span class=\"nv\">similarity</span> <span class=\"o\">=</span> comparator.build_similarity_matrix<span class=\"o\">(</span>phrases_1, phrases_2<span class=\"o\">)</span>\nprint<span class=\"o\">(</span>similarity<span class=\"o\">)</span>\n</pre>\n<p><strong>Output:</strong></p>\n<pre><code>[[-0.03689054  0.0372301   0.17840812  0.09079809  0.65748763]\n[ 0.18079719  0.12055688  0.77624094  1.          0.22749564]\n[ 0.08472343  0.11505745  0.7030021   0.48876476  0.13252231]\n[ 0.7132235   0.07449755  0.178031    0.15712512  0.0676512 ]\n[ 0.11637229  0.38569745  0.23005028  0.25646406  0.26493344]\n[ 0.17955953  0.15243992  0.11233422  0.16087453  0.03144675]]\n</code></pre>\n<h2>Bucket sorting</h2>\n<p>When you compare two documents you can see which phrases present in both or only in a specific document.</p>\n<pre><span class=\"nv\">phrases_1</span> <span class=\"o\">=</span> <span class=\"o\">[</span>\n    <span class=\"s1\">'Communication with stakeholders'</span>,\n    <span class=\"s1\">'Understand customer needs'</span>,\n    <span class=\"s1\">'Experience shaping the BI strategy'</span>,\n    <span class=\"s1\">'shaping the BI strategy'</span>,\n    <span class=\"s1\">'Delivery of platform Analytics function'</span>,\n<span class=\"o\">]</span>\n\n<span class=\"nv\">phrases_2</span> <span class=\"o\">=</span> <span class=\"o\">[</span>\n    <span class=\"s1\">'Extensive delivery of platform within a Business Intelligence and Analytics function'</span>,\n    <span class=\"s1\">'shaping the BI strategy'</span>,\n    <span class=\"s1\">'Experience shaping the BI strategy from C-Level to Technical developers'</span>,\n    <span class=\"s1\">'Communication with stakeholders on all levels'</span>,\n    <span class=\"s1\">'Capture business requirements'</span>,\n    <span class=\"s1\">'Play computer games'</span>,\n<span class=\"o\">]</span>\n<span class=\"c1\"># cut_off - a percentage of similarity should be bigger than it so that we consider that phrases are similar(default=0.3)</span>\nin_both, in_doc1, <span class=\"nv\">in_doc2</span> <span class=\"o\">=</span> comparator.bucket_sorting<span class=\"o\">(</span>\n    phrases_1, phrases_2, similarity, <span class=\"nv\">cut_off</span><span class=\"o\">=</span><span class=\"m\">0</span>.5<span class=\"o\">)</span>\n</pre>\n<h2>Transfrom phrases</h2>\n<p>Get all steps of transformation from one phrase to another.\n<strong>Example:</strong></p>\n<pre>print<span class=\"o\">(</span>comparator.transform_phrase<span class=\"o\">(</span>\n    <span class=\"s1\">'Understand customer needs'</span>,\n    <span class=\"s1\">'Capture business requirements'</span>,\n<span class=\"o\">))</span>\n</pre>\n<p><strong>Output</strong></p>\n<pre><span class=\"o\">[</span><span class=\"s2\">\"Understand customer needs\"</span>, <span class=\"s2\">\"Capture customer needs\"</span>, <span class=\"s2\">\"Capture business requirements\"</span><span class=\"o\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6820967, "releases": {"0.9.0": [{"comment_text": "", "digests": {"md5": "c5fb4f7d59c07baaaee38e92e2a42b82", "sha256": "29b590136073fa2d0dca1c3a35bc181587bdb894b1fc8b5a9143cde580f4dedd"}, "downloads": -1, "filename": "semantic_compare-0.9.0.tar.gz", "has_sig": false, "md5_digest": "c5fb4f7d59c07baaaee38e92e2a42b82", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6095, "upload_time": "2020-03-16T12:06:34", "upload_time_iso_8601": "2020-03-16T12:06:34.897226Z", "url": "https://files.pythonhosted.org/packages/02/e3/7c8b9f4bd8f9e98e61cfd80028a0abbea661a52276851b95faa352edc3f2/semantic_compare-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "60c60be83da5cdf20d5350dbf0d214d7", "sha256": "89d74f3d5f125c2d7819418713e32d9e3f8e58dee240e9ed2d0a0ebedf601838"}, "downloads": -1, "filename": "semantic_compare-0.9.1.tar.gz", "has_sig": false, "md5_digest": "60c60be83da5cdf20d5350dbf0d214d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6140, "upload_time": "2020-03-16T12:26:32", "upload_time_iso_8601": "2020-03-16T12:26:32.693092Z", "url": "https://files.pythonhosted.org/packages/8d/7f/8c12a335d3cbc5c146653a3c6fe3b68ba43e96b744bee86c976b7d011fb2/semantic_compare-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "60c60be83da5cdf20d5350dbf0d214d7", "sha256": "89d74f3d5f125c2d7819418713e32d9e3f8e58dee240e9ed2d0a0ebedf601838"}, "downloads": -1, "filename": "semantic_compare-0.9.1.tar.gz", "has_sig": false, "md5_digest": "60c60be83da5cdf20d5350dbf0d214d7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6140, "upload_time": "2020-03-16T12:26:32", "upload_time_iso_8601": "2020-03-16T12:26:32.693092Z", "url": "https://files.pythonhosted.org/packages/8d/7f/8c12a335d3cbc5c146653a3c6fe3b68ba43e96b744bee86c976b7d011fb2/semantic_compare-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:25 2020"}