{"info": {"author": "Zope Corporation and Contributors", "author_email": "zope-dev@zope.org", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Framework :: Zope3", "Intended Audience :: Developers", "License :: OSI Approved :: Zope Public License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP"], "description": "===============================\nZope 3 Controlled Package Index\n===============================\n\nThis package has been developed to support the maintenance of a stable set of\nZope project distributions. It manages the controlled packages configuration\nfile and supports the generation of buildout configuration files that can be\nused by developers.\n\nAnother use of this package is to use it for testing new distributions against\nthe index. Here is the workflow for testing a new package against stable set:\n\n1. Install the correct version of this package.\n\n   (a) Download the version of this package that manages the stable set that\n       you are interested in. Currently only the trunk exists, which manages\n       the Zope 3.4 release::\n\n         $ svn co svn://svn.zope.org/repos/main/zope.release/trunk zope3.4\n         $ cd zope3.4\n\n   (b) Bootstrap the checkout::\n\n         $ python ./bootstrap.py\n\n   (c) Run buildout to create the scripts::\n\n         $ ./bin/buildout\n\n   (d) Run the ``buildout.cfg`` generation script to build a configuration\n       file that can be used for testing:\n\n         $ ./bin/generate-buildout\n\n2. From the generated configuration file, you can now build a testing\n   environment.\n\n   (a) Enter the test directory and create a buildout:\n\n         $ cd test\n         $ python ../bootstrap.py\n         $ ./bin/buildout\n\n   (b) Run all the tests to verify that all tests are initially passing:\n\n         $ ./bin/test -vpc1\n\n3. Modify the ``buildout.cfg`` to look for your the new distribution to be\n   tested:\n\n   (a) Comment out the \"index\" option. This needs to be done, so that the new\n       package is going to be picked up.\n\n   (b) Change the version number of the package of interest in the \"versions\"\n       section.\n\n   Alternative:\n\n   (a) Check out the new distribution from SVN.\n\n   (b) Add a \"develop path/to/my/package\" line in the \"buildout\" section of\n       ``buildout.cfg``.\n\n4. Run the tests, making sure that they all pass.\n\n5. Modify ``controlled-packages.cfg`` by adding the new version of the package\n   to the package's version list.\n\n6. Generate all files again and upload them:\n\n     $ cd ..\n     $ ./bin/generate-buildout\n     $ ./bin/generate-versions\n     $ ./bin/upload\n\n   Once the files are uploaded, a crontab-job, running every minute, will\n   detect the changes in ``controlled-pages.cfg`` and will generate the new\n   controlled package pages.\n\nNote: I think the process is still a tiny bit too long. I probably write a\nscript that makes testing a new version of a package easier, but let's see\nwhether this process is workable first.\n\n\n===============\nKnown Good Sets\n===============\n\nThis package provides a set of scripts and tools to manage Good-Known-Sets, or\nshort KGSs. A KGS is a set of package distributions that are known to work\nwell together. You can verify this, for example, by running all the tests of\nall the packages at once.\n\nLet me show you how a typical controlled packages configuration file looks\nlike:\n\n  >>> import tempfile\n  >>> cfgFile = tempfile.mktemp('-cp.cfg')\n  >>> open(cfgFile, 'w').write('''\\\n  ... [DEFAULT]\n  ... tested = true\n  ...\n  ... [KGS]\n  ... name = zope-dev\n  ... version = 1.2.0\n  ... date = 2009-01-01\n  ... changelog = CHANGES.txt\n  ... announcement = ANNOUNCEMENT.txt\n  ... files =\n  ...     zope-dev-1.2.0.tgz\n  ...     zope-dev-1.2.0.zip\n  ...     zope-dev-1.2.0.exe\n  ...\n  ... [packageA]\n  ... versions = 1.0.0\n  ...            1.0.1\n  ...\n  ... [packageB]\n  ... versions = 1.2.3\n  ... test-extras = test\n  ...\n  ... [packageC]\n  ... # Do not test this package.\n  ... tested = false\n  ... versions = 4.3.1\n  ... ''')\n\nAs you can see, this file uses an INI-style format. The \"DEFAULT\" section is\nspecial, as it will insert the specified options into all other sections as\ndefault. The \"KGS\" section specifies some global information about the KGS,\nsuch as the name of the KGS. Since this section references several external\nfiles, we should quickly create those.\n\n  >>> import os\n  >>> dir = os.path.dirname(cfgFile)\n\n  >>> open(os.path.join(dir, 'CHANGES.txt'), 'w').write('''\\\n  ... =======\n  ... Changes\n  ... =======\n  ...\n  ... packageA\n  ... ========\n  ...\n  ... Version 1.0.0\n  ... -------------\n  ...\n  ... * Initial Release\n  ... ''')\n\n  >>> open(os.path.join(dir, 'ANNOUNCEMENT.txt'), 'w').write('''\\\n  ... =======================\n  ... zope-dev 1.2.0 Released\n  ... =======================\n  ...\n  ... The announcement text!\n  ... ''')\n\n  >>> open(os.path.join(dir, 'zope-dev-1.2.0.tgz'), 'w').write('tgz')\n  >>> open(os.path.join(dir, 'zope-dev-1.2.0.exe'), 'w').write('exe')\n\nAll other sections refer to package names. Currently each package section\nsupports two options. The \"versions\" option lists all versions that are known\nto work in the KGS. Those versions should *always* only be bug fixes to the\nfirst listed version. The second option, \"tested\", specifies whether the\npackage should be part of the KGS test suite. By default, we want all packages\nto be tested, but some packages require very specific test setups that cannot\nbe easily reproduced _[1], so we turn off those tests.\n\nYou can also stack controlled package configurations on top of each\nother. Base configurations can be specified using the `extends` option:\n\n  >>> import tempfile\n  >>> cfgFile2 = tempfile.mktemp('-cp.cfg')\n  >>> open(cfgFile2, 'w').write('''\\\n  ... [DEFAULT]\n  ... tested = true\n  ...\n  ... [KGS]\n  ... name = grok-dev\n  ... version = 0.1.0\n  ... extends = %s\n  ...\n  ... [packageA]\n  ... versions = 1.0.2\n  ...\n  ... [packageD]\n  ... versions = 2.2.3\n  ...            2.2.4\n  ... ''' %cfgFile)\n\nAs you can see, you can completely override another package's version\nspecification as well.\n\nGenerating the configuration file and managing it is actually the hard\npart. Let's now see what we can do with it.\n\n.. [1]: This is usually due to bugs in setuptools or buildout, such as PYC\nfiles not containing the correct reference to their PY file.\n\n\nGenerate Versions\n-----------------\n\nOne of the easiest scripts, is the version generation. This script will\ngenerate a \"versions\" section that is compatible with buildout.\n\n  >>> versionsFile = tempfile.mktemp('-versions.cfg')\n\n  >>> from zope.kgs import version\n  >>> version.main((cfgFile, versionsFile))\n\n  >>> print open(versionsFile, 'r').read()\n  [versions]\n  packageA = 1.0.1\n  packageB = 1.2.3\n  packageC = 4.3.1\n\nLet's now ensure that the versions also work for the extended configuration:\n\n  >>> versionsFile2 = tempfile.mktemp('-versions.cfg')\n\n  >>> version.main((cfgFile2, versionsFile2))\n\n  >>> print open(versionsFile2, 'r').read()\n  [versions]\n  packageA = 1.0.2\n  packageB = 1.2.3\n  packageC = 4.3.1\n  packageD = 2.2.4\n\n\nGenerate Buildout\n-----------------\n\nIn order to be able to test the KGS, you can also generate a full buildout\nfile that will create and install a testrunner over all packages for you:\n\n  >>> buildoutFile = tempfile.mktemp('-buildout.cfg')\n\n  >>> from zope.kgs import buildout\n  >>> buildout.main((cfgFile, buildoutFile))\n\n  >>> print open(buildoutFile, 'r').read()\n  [buildout]\n  parts = test\n  versions = versions\n  <BLANKLINE>\n  [test]\n  recipe = zc.recipe.testrunner\n  eggs = packageA\n      packageB [test]\n  <BLANKLINE>\n  [versions]\n  packageA = 1.0.1\n  packageB = 1.2.3\n  packageC = 4.3.1\n  <BLANKLINE>\n\nLet's make sure that the buildout generation also honors the extensions:\n\n  >>> buildoutFile2 = tempfile.mktemp('-buildout.cfg')\n\n  >>> buildout.main((cfgFile2, buildoutFile2))\n\n  >>> print open(buildoutFile2, 'r').read()\n  [buildout]\n  parts = test\n  versions = versions\n  <BLANKLINE>\n  [test]\n  recipe = zc.recipe.testrunner\n  eggs = packageA\n      packageB [test]\n      packageD\n  <BLANKLINE>\n  [versions]\n  packageA = 1.0.2\n  packageB = 1.2.3\n  packageC = 4.3.1\n  packageD = 2.2.4\n  <BLANKLINE>\n\n\nFlat Links Pages\n----------------\n\nWe can also create a flat links page that can be used in the\n`dependency_links` argument in your `setup.py` file. Since this module\naccesses the original PyPI to ask for the download locations and filenames, we\nhave to create a controlled packages configuration file that contains real\npackages with real version numbers:\n\n  >>> cfgFileReal = tempfile.mktemp('-cp.cfg')\n  >>> open(cfgFileReal, 'w').write('''\\\n  ... [DEFAULT]\n  ... tested = true\n  ...\n  ... [KGS]\n  ... name = zope-dev\n  ... version = 3.4.0b2\n  ...\n  ... [PIL]\n  ... versions = 1.1.6\n  ...\n  ... [zope.component]\n  ... versions = 3.4.0\n  ...\n  ... [zope.interface]\n  ... versions = 3.4.0\n  ...            3.4.1\n  ...\n  ... [z3c.formdemo]\n  ... versions = 1.1.0\n  ... ''')\n\nLet's now create the links page:\n\n  >>> linksFile = tempfile.mktemp('-links.html')\n\n  >>> from zope.kgs import link\n  >>> link.main((cfgFileReal, linksFile))\n\n  >>> print open(linksFile, 'r').read()\n  <html>\n  <head>\n  <title>Links for the \"zope-dev\" KGS (version 3.4.0b2)</title>\n  </head>\n  <body>\n  <h1>Links for the \"zope-dev\" KGS (version 3.4.0b2)</h1>\n    <a href=\"http://pypi.python.org/packages/2.4/z/z3c.formdemo/z3c.formdemo-1.1.0-py2.4.egg#md5=9d605bd559ea33ac57ce11f5c80fa3d3\">z3c.formdemo-1.1.0-py2.4.egg</a><br/>\n    <a href=\"http://pypi.python.org/packages/source/z/z3c.formdemo/z3c.formdemo-1.1.0.tar.gz#md5=f224a49cea737112284f74b859e3eed0\">z3c.formdemo-1.1.0.tar.gz</a><br/>\n  <a href=\"http://pypi.python.org/packages/2.4/z/zope.component/zope.component-3.4.0-py2.4.egg#md5=c0763e94912e4a8ac1e321a068c916ba\">zope.component-3.4.0-py2.4.egg</a><br/>\n  <a href=\"http://pypi.python.org/packages/source/z/zope.component/zope.component-3.4.0.tar.gz#md5=94afb57dfe605d7235ff562d1eaa3bed\">zope.component-3.4.0.tar.gz</a><br/>\n  <a href=\"http://pypi.python.org/packages/source/z/zope.interface/zope.interface-3.4.0.tar.gz#md5=0be9fd80b7bb6bee520e56eba7d29c90\">zope.interface-3.4.0.tar.gz</a><br/>\n  <a href=\"http://pypi.python.org/packages/2.4/z/zope.interface/zope.interface-3.4.0-py2.4-win32.egg#md5=3fa5e992271375eac597622d8e2fd5ec\">zope.interface-3.4.0-py2.4-win32.egg</a><br/>\n  <a href=\"http://pypi.python.org/packages/source/z/zope.interface/zope.interface-3.4.1.tar.gz#md5=b085f4a774adab688e037ad32fbbf08e\">zope.interface-3.4.1.tar.gz</a><br/>\n  </body>\n  </html>\n\n\nPPIX Support\n------------\n\nYou can also use the KGS to limit the available packages in a package index\ngenerated ``zc.mirrorcheeseshopslashsimple``. This script also uses PyPI to\nlook up distribution file, so wave to use the real configuration file again.\n\nLet's create the pages:\n\n  >>> indexDir = tempfile.mkdtemp('-ppix')\n\n  >>> from zope.kgs import ppix\n  >>> ppix.main((cfgFileReal, indexDir))\n\nThe index contains one directory per package. So let's have a look:\n\n  >>> import os\n  >>> sorted(os.listdir(indexDir))\n  ['PIL', 'z3c.formdemo', 'zope.component', 'zope.interface']\n\nEach directory contains a single \"index.html\" file with the download links:\n\n  >>> pkgDir = os.path.join(indexDir, 'zope.component')\n  >>> sorted(os.listdir(pkgDir))\n  ['index.html']\n\n  >>> pkgIndex = os.path.join(pkgDir, 'index.html')\n  >>> print open(pkgIndex, 'r').read()\n  <html>\n  <head>\n  <title>Links for \"zope.component\"</title>\n  </head>\n  <body>\n  <h1>Links for \"zope.component\"</h1>\n  <a href=\"http://pypi.python.org/packages/2.4/z/zope.component/zope.component-3.4.0-py2.4.egg#md5=c0763e94912e4a8ac1e321a068c916ba\">zope.component-3.4.0-py2.4.egg</a><br/>\n  <a href=\"http://pypi.python.org/packages/source/z/zope.component/zope.component-3.4.0.tar.gz#md5=94afb57dfe605d7235ff562d1eaa3bed\">zope.component-3.4.0.tar.gz</a><br/>\n  </body>\n  </html>\n\nPIL is an interesting case, because it does not upload its distribution files\nyet, at least not for version 1.1.6:\n\n  >>> pkgIndex = os.path.join(indexDir, 'PIL', 'index.html')\n  >>> print open(pkgIndex, 'r').read()\n  <html><head><title>Links for PIL</title></head><body><h1>Links for PIL</h1><a href='http://www.pythonware.com/products/pil' rel=\"homepage\">1.1.5 home_page</a><br/>\n  <a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\">1.1.5 download_url</a><br/>\n  <a href='http://www.pythonware.com/products/pil' rel=\"homepage\">1.1.5a2 home_page</a><br/>\n  <a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\">1.1.5a2 download_url</a><br/>\n  <a href='http://www.pythonware.com/products/pil' rel=\"homepage\">1.1.5a1 home_page</a><br/>\n  <a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\">1.1.5a1 download_url</a><br/>\n  <a href='http://www.pythonware.com/products/pil/' rel=\"homepage\">1.1.4 home_page</a><br/>\n  <a href='http://www.pythonware.com/products/pil/' rel=\"homepage\">1.1.3 home_page</a><br/>\n  <a href='http://www.pythonware.com/downloads/Imaging-1.1.3.tar.gz' rel=\"download\">1.1.3 download_url</a><br/>\n  <a href='http://www.pythonware.com/products/pil' rel=\"homepage\">1.1.6 home_page</a><br/>\n  <a href='http://effbot.org/downloads/#Imaging' rel=\"download\">1.1.6 download_url</a><br/>\n  </body></html>\n\nOptionally, you can also specify the `-i` option to generate an overview:\n\n  >>> ppix.main(('-i', cfgFileReal, indexDir))\n\n  >>> sorted(os.listdir(indexDir))\n  ['PIL', 'index.html', 'z3c.formdemo', 'zope.component', 'zope.interface']\n\nLet's now look at the file:\n\n  >>> indexPage = os.path.join(indexDir, 'index.html')\n  >>> print open(indexPage, 'r').read()\n  <html>\n  <head>\n  <title>Simple Index for the \"zope-dev\" KGS (version 3.4.0b2)</title>\n  </head>\n  <body>\n  <h1>Simple Index for the \"zope-dev\" KGS (version 3.4.0b2)</h1>\n  <a href=\"PIL\">PIL</a><br/>\n  <a href=\"z3c.formdemo\">z3c.formdemo</a><br/>\n  <a href=\"zope.component\">zope.component</a><br/>\n  <a href=\"zope.interface\">zope.interface</a><br/>\n  </body>\n  </html>\n\nAllowing exisitng package pages to be overwritten and making the main index\npage an optional feature makes it possible to use this script for two use\ncases: (1) Merge the constraints into a PPIX index created by\n``zc.mirrorcheeseshopslashsimple``, and (2) create a standalone index which\nonly provides the packages of the KGS.\n\n\nGetting the Latest Versions\n---------------------------\n\nWhen updating the KGS, it is often useful to know for which packages have new\nreleases.\n\n  >>> from zope.kgs import latest\n  >>> latest.main((cfgFileReal,))\n  z3c.formdemo: 1.1.1, 1.1.2, 1.2.0, 1.3.0, 1.3.0b1, 1.4.0, ...\n\nHowever, it is often desired only to show new minor versions; in this case, we\ncan pass an option to exclude all versions that have a different major\nversion:\n\n  >>> latest.main(('-m', cfgFileReal))\n  z3c.formdemo: 1.1.1, 1.1.2\n\nSometimes you're only interested in changes that apply to a single package,\nand you won't want to wait for the script to query all of the others\n\n  >>> latest.main(('-m', cfgFileReal, 'zope.app.server'))\n\n  >>> latest.main(('-m', cfgFileReal, 'z3c.formdemo'))\n  z3c.formdemo: 1.1.1, 1.1.2\n\n\nExtracting Change Information\n-----------------------------\n\nWhen releasing a version of the KGS, it is desirable to produce a list of\nchanges since the last release. Changes are commonly compared to an older\nversion.\n\n  >>> cfgFileRealOrig = tempfile.mktemp('-cp.cfg')\n  >>> open(cfgFileRealOrig, 'w').write('''\\\n  ... [DEFAULT]\n  ... tested = true\n  ...\n  ... [KGS]\n  ... name = zope-dev\n  ... version = 3.4.0b1\n  ...\n  ... [PIL]\n  ... versions = 1.1.6\n  ...\n  ... [zope.component]\n  ... versions = 3.4.0\n  ...\n  ... [zope.interface]\n  ... versions = 3.4.0\n  ... ''')\n\nLet's now produce the changes:\n\n  >>> from zope.kgs import change\n  >>> change.main((cfgFileReal, cfgFileRealOrig))\n  Processing ('PIL', '1.1.6')\n  Processing ('z3c.formdemo', '1.1.0')\n  Processing ('zope.component', '3.4.0')\n  Processing ('zope.interface', '3.4.1')\n  ===\n  PIL\n  ===\n  <BLANKLINE>\n  No changes or information not found.\n  <BLANKLINE>\n  ============\n  z3c.formdemo\n  ============\n  <BLANKLINE>\n  1.1.0 (unknown)\n  ---------------\n  <BLANKLINE>\n  - Feature: New \"SQL Message\" demo shows how ``z3c.form`` can be used with\n    non-object data. Specificically, this small application demonstrates using a\n    Gadfly database using pure SQL calls without any ORM.\n  <BLANKLINE>\n  - Feature: New \"Address Book\" demo that demonstrates more complex use cases,\n    such as subforms, composite widgets, and mappings/lists\n  <BLANKLINE>\n  <BLANKLINE>\n  ==============\n  zope.component\n  ==============\n  <BLANKLINE>\n  3.4.0 (2007-09-29)\n  ------------------\n  <BLANKLINE>\n  No further changes since 3.4.0a1.\n  <BLANKLINE>\n  <BLANKLINE>\n  ==============\n  zope.interface\n  ==============\n  <BLANKLINE>\n  3.4.1 (unknown)\n  ---------------\n  <BLANKLINE>\n  Fixed a setup bug that prevented installation from source on systems\n  without setuptools.\n  <BLANKLINE>\n  3.4.0 (unknown)\n  ---------------\n  <BLANKLINE>\n  Final release for 3.4.0.\n  <BLANKLINE>\n  <BLANKLINE>\n\n\nYou can also create the changes without an original file, in which case only\nthe versions listed in the current KGS are considered.\n\n  >>> change.main((cfgFileReal,))\n  Processing ('PIL', '1.1.6')\n  Processing ('z3c.formdemo', '1.1.0')\n  Processing ('zope.component', '3.4.0')\n  Processing ('zope.interface', '3.4.1')\n  ===\n  PIL\n  ===\n  <BLANKLINE>\n  No changes or information not found.\n  <BLANKLINE>\n  ============\n  z3c.formdemo\n  ============\n  <BLANKLINE>\n  1.1.0 (unknown)\n  ---------------\n  <BLANKLINE>\n  - Feature: New \"SQL Message\" demo shows how ``z3c.form`` can be used with\n    non-object data. Specificically, this small application demonstrates using a\n    Gadfly database using pure SQL calls without any ORM.\n  <BLANKLINE>\n  - Feature: New \"Address Book\" demo that demonstrates more complex use cases,\n    such as subforms, composite widgets, and mappings/lists\n  <BLANKLINE>\n  <BLANKLINE>\n  ==============\n  zope.component\n  ==============\n  <BLANKLINE>\n  3.4.0 (2007-09-29)\n  ------------------\n  <BLANKLINE>\n  No further changes since 3.4.0a1.\n  <BLANKLINE>\n  <BLANKLINE>\n  ==============\n  zope.interface\n  ==============\n  <BLANKLINE>\n  3.4.1 (unknown)\n  ---------------\n  <BLANKLINE>\n  Fixed a setup bug that prevented installation from source on systems\n  without setuptools.\n  <BLANKLINE>\n  3.4.0 (unknown)\n  ---------------\n  <BLANKLINE>\n  Final release for 3.4.0.\n  <BLANKLINE>\n  <BLANKLINE>\n\n\nThe Site Generator\n------------------\n\nThe easiest way to publish the KGS is via a directory published by a Web\nserver. Whenever a new `controlled-packages.cfg` file is uploaded, a script is\nrun that generates all the files. I usually set up a crontab job to do\nthis. The site generator script acts upon a directory, in which it assumes a\n`controlled-packages.cfg` file was placed:\n\n  >>> siteDir = tempfile.mkdtemp()\n  >>> cfgFileSite = os.path.join(siteDir, 'controlled-packages.cfg')\n\n  >>> import shutil\n  >>> shutil.copy(cfgFileReal, cfgFileSite)\n\n  >>> from zope.kgs import site\n  >>> site.main(['-s', siteDir])\n\nLet's have a look at the generated files:\n\n  >>> from pprint import pprint\n  >>> pprint(sorted(os.listdir(siteDir)))\n  ['3.4.0b2', 'index.html', 'intro.html', 'resources']\n\n  >>> sorted(os.listdir(os.path.join(siteDir, '3.4.0b2')))\n  ['ANNOUNCEMENT.html', 'CHANGES.html',\n   'buildout.cfg', 'controlled-packages.cfg', 'index', 'index.html',\n   'links.html', 'minimal', 'versions.cfg']\n\n  >>> sorted(os.listdir(os.path.join(siteDir, '3.4.0b2', 'minimal')))\n  ['PIL', 'index.html', 'z3c.formdemo', 'zope.component', 'zope.interface']\n\nIf you try to generate the site again without adding the controlled packages\nconfig file to the site directory again, it will simply return:\n\n  >>> site.main(['-s', siteDir])\n\n\nBasic Parser API\n----------------\n\nThe ``kgs.py`` module provides a simple class that parses the KGS\nconfiguration file and provides all data in an object-oriented manner.\n\n  >>> from zope.kgs import kgs\n\nThe class is simply instnatiated using the path to the config file:\n\n  >>> myKGS = kgs.KGS(cfgFile)\n  >>> myKGS\n  <KGS 'zope-dev'>\n\nThe name, version and date of the KGS is available via:\n\n  >>> myKGS.name\n  'zope-dev'\n  >>> myKGS.version\n  '1.2.0'\n  >>> myKGS.date\n  datetime.date(2009, 1, 1)\n\nWhen the changelog and/or announcement files are available, the KGS references\nthe absolute path:\n\n  >>> myKGS.changelog\n  '.../CHANGES.txt'\n  >>> myKGS.announcement\n  '.../ANNOUNCEMENT.txt'\n\nThe same is true for other release-related files:\n\n  >>> myKGS.files\n  ('.../zope-dev-1.2.0.tgz',\n   '.../zope-dev-1.2.0.exe')\n\nThe packages are available under `packages`:\n\n  >>> myKGS.packages\n  [<Package 'packageA'>, <Package 'packageB'>, <Package 'packageC'>]\n\nEach package is also an object:\n\n  >>> pkgA = myKGS.packages[0]\n  >>> pkgA\n  <Package 'packageA'>\n\n  >>> pkgA.name\n  'packageA'\n  >>> pkgA.versions\n  ['1.0.0', '1.0.1']\n  >>> pkgA.tested\n  True\n\nAs we have seen in the scripts above, the KGS class also supports the\n`entends` option. Thus, let's load the KGS for the config file 2:\n\n  >>> myKGS2 = kgs.KGS(cfgFile2)\n  >>> myKGS2\n  <KGS 'grok-dev'>\n\n  >>> myKGS2.name\n  'grok-dev'\n\n  >>> myKGS2.packages\n  [<Package 'packageA'>,\n   <Package 'packageB'>,\n   <Package 'packageC'>,\n   <Package 'packageD'>]\n\n\n=======\nCHANGES\n=======\n\n1.2.0 (2009-07-24)\n------------------\n\n- Add ability to specify the extra-includes for running tests.\n\n1.1.0 (2009-02-01)\n------------------\n\n- Added '--no-links', '--no-index', and '--no-minimal-index' options to the\n  site generation sctipt to make it faster.\n\n- Generating list of latest versions does not fail anymore, if downloading and\n  parsing of the index page fails.\n\n- Update links to PyPI web sites.\n\n1.0.1 (2009-01-29)\n------------------\n\n- Fix documentation in all scripts, fixing missing imports and incorrect\n  wording.\n\n- The package should depend on `python-dateutl` and not `datetutil`, since the\n  latter is not available in PyPI anymore.\n\n1.0.0 (2009-01-29)\n------------------\n\n- Initial version as ``zope.kgs``.\n\n  * A script that extracts the relevant part of the changelog of each package\n    in the KGS.\n\n  * A script that lists all versions of a package released after the latest\n    version listed in the KGS.\n\n  * A script that manages the generation of the entire KGS site.\n\n    + Generates generic and version-specific pages.\n\n    + Page generation is template-based for easy customization.\n\n  * Generate `links.html` file which lists all controlled packages files.\n\n  * Features copied from ``zope.release``:\n\n    + Parser for KGS configuration files.\n\n    + Generate `versions.cfg` and `buildout.cfg` script.\n\n  * Features copied from ``zc.mirrorcheeseshopslashsimple``:\n\n    + Generate new index pages for the controlled packages.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/zope.kgs", "keywords": "zope3 setuptools egg kgs", "license": "ZPL 2.1", "maintainer": null, "maintainer_email": null, "name": "zope.kgs", "package_url": "https://pypi.org/project/zope.kgs/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zope.kgs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/zope.kgs"}, "release_url": "https://pypi.org/project/zope.kgs/1.2.0/", "requires_dist": null, "requires_python": null, "summary": "Known-Good-Set (KGS) Support", "version": "1.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            ===============================<br>Zope 3 Controlled Package Index<br>===============================<br><br>This package has been developed to support the maintenance of a stable set of<br>Zope project distributions. It manages the controlled packages configuration<br>file and supports the generation of buildout configuration files that can be<br>used by developers.<br><br>Another use of this package is to use it for testing new distributions against<br>the index. Here is the workflow for testing a new package against stable set:<br><br>1. Install the correct version of this package.<br><br>   (a) Download the version of this package that manages the stable set that<br>       you are interested in. Currently only the trunk exists, which manages<br>       the Zope 3.4 release::<br><br>         $ svn co svn://svn.zope.org/repos/main/zope.release/trunk zope3.4<br>         $ cd zope3.4<br><br>   (b) Bootstrap the checkout::<br><br>         $ python ./bootstrap.py<br><br>   (c) Run buildout to create the scripts::<br><br>         $ ./bin/buildout<br><br>   (d) Run the ``buildout.cfg`` generation script to build a configuration<br>       file that can be used for testing:<br><br>         $ ./bin/generate-buildout<br><br>2. From the generated configuration file, you can now build a testing<br>   environment.<br><br>   (a) Enter the test directory and create a buildout:<br><br>         $ cd test<br>         $ python ../bootstrap.py<br>         $ ./bin/buildout<br><br>   (b) Run all the tests to verify that all tests are initially passing:<br><br>         $ ./bin/test -vpc1<br><br>3. Modify the ``buildout.cfg`` to look for your the new distribution to be<br>   tested:<br><br>   (a) Comment out the \"index\" option. This needs to be done, so that the new<br>       package is going to be picked up.<br><br>   (b) Change the version number of the package of interest in the \"versions\"<br>       section.<br><br>   Alternative:<br><br>   (a) Check out the new distribution from SVN.<br><br>   (b) Add a \"develop path/to/my/package\" line in the \"buildout\" section of<br>       ``buildout.cfg``.<br><br>4. Run the tests, making sure that they all pass.<br><br>5. Modify ``controlled-packages.cfg`` by adding the new version of the package<br>   to the package's version list.<br><br>6. Generate all files again and upload them:<br><br>     $ cd ..<br>     $ ./bin/generate-buildout<br>     $ ./bin/generate-versions<br>     $ ./bin/upload<br><br>   Once the files are uploaded, a crontab-job, running every minute, will<br>   detect the changes in ``controlled-pages.cfg`` and will generate the new<br>   controlled package pages.<br><br>Note: I think the process is still a tiny bit too long. I probably write a<br>script that makes testing a new version of a package easier, but let's see<br>whether this process is workable first.<br><br><br>===============<br>Known Good Sets<br>===============<br><br>This package provides a set of scripts and tools to manage Good-Known-Sets, or<br>short KGSs. A KGS is a set of package distributions that are known to work<br>well together. You can verify this, for example, by running all the tests of<br>all the packages at once.<br><br>Let me show you how a typical controlled packages configuration file looks<br>like:<br><br>  &gt;&gt;&gt; import tempfile<br>  &gt;&gt;&gt; cfgFile = tempfile.mktemp('-cp.cfg')<br>  &gt;&gt;&gt; open(cfgFile, 'w').write('''\\<br>  ... [DEFAULT]<br>  ... tested = true<br>  ...<br>  ... [KGS]<br>  ... name = zope-dev<br>  ... version = 1.2.0<br>  ... date = 2009-01-01<br>  ... changelog = CHANGES.txt<br>  ... announcement = ANNOUNCEMENT.txt<br>  ... files =<br>  ...     zope-dev-1.2.0.tgz<br>  ...     zope-dev-1.2.0.zip<br>  ...     zope-dev-1.2.0.exe<br>  ...<br>  ... [packageA]<br>  ... versions = 1.0.0<br>  ...            1.0.1<br>  ...<br>  ... [packageB]<br>  ... versions = 1.2.3<br>  ... test-extras = test<br>  ...<br>  ... [packageC]<br>  ... # Do not test this package.<br>  ... tested = false<br>  ... versions = 4.3.1<br>  ... ''')<br><br>As you can see, this file uses an INI-style format. The \"DEFAULT\" section is<br>special, as it will insert the specified options into all other sections as<br>default. The \"KGS\" section specifies some global information about the KGS,<br>such as the name of the KGS. Since this section references several external<br>files, we should quickly create those.<br><br>  &gt;&gt;&gt; import os<br>  &gt;&gt;&gt; dir = os.path.dirname(cfgFile)<br><br>  &gt;&gt;&gt; open(os.path.join(dir, 'CHANGES.txt'), 'w').write('''\\<br>  ... =======<br>  ... Changes<br>  ... =======<br>  ...<br>  ... packageA<br>  ... ========<br>  ...<br>  ... Version 1.0.0<br>  ... -------------<br>  ...<br>  ... * Initial Release<br>  ... ''')<br><br>  &gt;&gt;&gt; open(os.path.join(dir, 'ANNOUNCEMENT.txt'), 'w').write('''\\<br>  ... =======================<br>  ... zope-dev 1.2.0 Released<br>  ... =======================<br>  ...<br>  ... The announcement text!<br>  ... ''')<br><br>  &gt;&gt;&gt; open(os.path.join(dir, 'zope-dev-1.2.0.tgz'), 'w').write('tgz')<br>  &gt;&gt;&gt; open(os.path.join(dir, 'zope-dev-1.2.0.exe'), 'w').write('exe')<br><br>All other sections refer to package names. Currently each package section<br>supports two options. The \"versions\" option lists all versions that are known<br>to work in the KGS. Those versions should *always* only be bug fixes to the<br>first listed version. The second option, \"tested\", specifies whether the<br>package should be part of the KGS test suite. By default, we want all packages<br>to be tested, but some packages require very specific test setups that cannot<br>be easily reproduced _[1], so we turn off those tests.<br><br>You can also stack controlled package configurations on top of each<br>other. Base configurations can be specified using the `extends` option:<br><br>  &gt;&gt;&gt; import tempfile<br>  &gt;&gt;&gt; cfgFile2 = tempfile.mktemp('-cp.cfg')<br>  &gt;&gt;&gt; open(cfgFile2, 'w').write('''\\<br>  ... [DEFAULT]<br>  ... tested = true<br>  ...<br>  ... [KGS]<br>  ... name = grok-dev<br>  ... version = 0.1.0<br>  ... extends = %s<br>  ...<br>  ... [packageA]<br>  ... versions = 1.0.2<br>  ...<br>  ... [packageD]<br>  ... versions = 2.2.3<br>  ...            2.2.4<br>  ... ''' %cfgFile)<br><br>As you can see, you can completely override another package's version<br>specification as well.<br><br>Generating the configuration file and managing it is actually the hard<br>part. Let's now see what we can do with it.<br><br>.. [1]: This is usually due to bugs in setuptools or buildout, such as PYC<br>files not containing the correct reference to their PY file.<br><br><br>Generate Versions<br>-----------------<br><br>One of the easiest scripts, is the version generation. This script will<br>generate a \"versions\" section that is compatible with buildout.<br><br>  &gt;&gt;&gt; versionsFile = tempfile.mktemp('-versions.cfg')<br><br>  &gt;&gt;&gt; from zope.kgs import version<br>  &gt;&gt;&gt; version.main((cfgFile, versionsFile))<br><br>  &gt;&gt;&gt; print open(versionsFile, 'r').read()<br>  [versions]<br>  packageA = 1.0.1<br>  packageB = 1.2.3<br>  packageC = 4.3.1<br><br>Let's now ensure that the versions also work for the extended configuration:<br><br>  &gt;&gt;&gt; versionsFile2 = tempfile.mktemp('-versions.cfg')<br><br>  &gt;&gt;&gt; version.main((cfgFile2, versionsFile2))<br><br>  &gt;&gt;&gt; print open(versionsFile2, 'r').read()<br>  [versions]<br>  packageA = 1.0.2<br>  packageB = 1.2.3<br>  packageC = 4.3.1<br>  packageD = 2.2.4<br><br><br>Generate Buildout<br>-----------------<br><br>In order to be able to test the KGS, you can also generate a full buildout<br>file that will create and install a testrunner over all packages for you:<br><br>  &gt;&gt;&gt; buildoutFile = tempfile.mktemp('-buildout.cfg')<br><br>  &gt;&gt;&gt; from zope.kgs import buildout<br>  &gt;&gt;&gt; buildout.main((cfgFile, buildoutFile))<br><br>  &gt;&gt;&gt; print open(buildoutFile, 'r').read()<br>  [buildout]<br>  parts = test<br>  versions = versions<br>  &lt;BLANKLINE&gt;<br>  [test]<br>  recipe = zc.recipe.testrunner<br>  eggs = packageA<br>      packageB [test]<br>  &lt;BLANKLINE&gt;<br>  [versions]<br>  packageA = 1.0.1<br>  packageB = 1.2.3<br>  packageC = 4.3.1<br>  &lt;BLANKLINE&gt;<br><br>Let's make sure that the buildout generation also honors the extensions:<br><br>  &gt;&gt;&gt; buildoutFile2 = tempfile.mktemp('-buildout.cfg')<br><br>  &gt;&gt;&gt; buildout.main((cfgFile2, buildoutFile2))<br><br>  &gt;&gt;&gt; print open(buildoutFile2, 'r').read()<br>  [buildout]<br>  parts = test<br>  versions = versions<br>  &lt;BLANKLINE&gt;<br>  [test]<br>  recipe = zc.recipe.testrunner<br>  eggs = packageA<br>      packageB [test]<br>      packageD<br>  &lt;BLANKLINE&gt;<br>  [versions]<br>  packageA = 1.0.2<br>  packageB = 1.2.3<br>  packageC = 4.3.1<br>  packageD = 2.2.4<br>  &lt;BLANKLINE&gt;<br><br><br>Flat Links Pages<br>----------------<br><br>We can also create a flat links page that can be used in the<br>`dependency_links` argument in your `setup.py` file. Since this module<br>accesses the original PyPI to ask for the download locations and filenames, we<br>have to create a controlled packages configuration file that contains real<br>packages with real version numbers:<br><br>  &gt;&gt;&gt; cfgFileReal = tempfile.mktemp('-cp.cfg')<br>  &gt;&gt;&gt; open(cfgFileReal, 'w').write('''\\<br>  ... [DEFAULT]<br>  ... tested = true<br>  ...<br>  ... [KGS]<br>  ... name = zope-dev<br>  ... version = 3.4.0b2<br>  ...<br>  ... [PIL]<br>  ... versions = 1.1.6<br>  ...<br>  ... [zope.component]<br>  ... versions = 3.4.0<br>  ...<br>  ... [zope.interface]<br>  ... versions = 3.4.0<br>  ...            3.4.1<br>  ...<br>  ... [z3c.formdemo]<br>  ... versions = 1.1.0<br>  ... ''')<br><br>Let's now create the links page:<br><br>  &gt;&gt;&gt; linksFile = tempfile.mktemp('-links.html')<br><br>  &gt;&gt;&gt; from zope.kgs import link<br>  &gt;&gt;&gt; link.main((cfgFileReal, linksFile))<br><br>  &gt;&gt;&gt; print open(linksFile, 'r').read()<br>  &lt;html&gt;<br>  &lt;head&gt;<br>  &lt;title&gt;Links for the \"zope-dev\" KGS (version 3.4.0b2)&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;h1&gt;Links for the \"zope-dev\" KGS (version 3.4.0b2)&lt;/h1&gt;<br>    &lt;a href=\"http://pypi.python.org/packages/2.4/z/z3c.formdemo/z3c.formdemo-1.1.0-py2.4.egg#md5=9d605bd559ea33ac57ce11f5c80fa3d3\"&gt;z3c.formdemo-1.1.0-py2.4.egg&lt;/a&gt;&lt;br/&gt;<br>    &lt;a href=\"http://pypi.python.org/packages/source/z/z3c.formdemo/z3c.formdemo-1.1.0.tar.gz#md5=f224a49cea737112284f74b859e3eed0\"&gt;z3c.formdemo-1.1.0.tar.gz&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/2.4/z/zope.component/zope.component-3.4.0-py2.4.egg#md5=c0763e94912e4a8ac1e321a068c916ba\"&gt;zope.component-3.4.0-py2.4.egg&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/source/z/zope.component/zope.component-3.4.0.tar.gz#md5=94afb57dfe605d7235ff562d1eaa3bed\"&gt;zope.component-3.4.0.tar.gz&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/source/z/zope.interface/zope.interface-3.4.0.tar.gz#md5=0be9fd80b7bb6bee520e56eba7d29c90\"&gt;zope.interface-3.4.0.tar.gz&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/2.4/z/zope.interface/zope.interface-3.4.0-py2.4-win32.egg#md5=3fa5e992271375eac597622d8e2fd5ec\"&gt;zope.interface-3.4.0-py2.4-win32.egg&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/source/z/zope.interface/zope.interface-3.4.1.tar.gz#md5=b085f4a774adab688e037ad32fbbf08e\"&gt;zope.interface-3.4.1.tar.gz&lt;/a&gt;&lt;br/&gt;<br>  &lt;/body&gt;<br>  &lt;/html&gt;<br><br><br>PPIX Support<br>------------<br><br>You can also use the KGS to limit the available packages in a package index<br>generated ``zc.mirrorcheeseshopslashsimple``. This script also uses PyPI to<br>look up distribution file, so wave to use the real configuration file again.<br><br>Let's create the pages:<br><br>  &gt;&gt;&gt; indexDir = tempfile.mkdtemp('-ppix')<br><br>  &gt;&gt;&gt; from zope.kgs import ppix<br>  &gt;&gt;&gt; ppix.main((cfgFileReal, indexDir))<br><br>The index contains one directory per package. So let's have a look:<br><br>  &gt;&gt;&gt; import os<br>  &gt;&gt;&gt; sorted(os.listdir(indexDir))<br>  ['PIL', 'z3c.formdemo', 'zope.component', 'zope.interface']<br><br>Each directory contains a single \"index.html\" file with the download links:<br><br>  &gt;&gt;&gt; pkgDir = os.path.join(indexDir, 'zope.component')<br>  &gt;&gt;&gt; sorted(os.listdir(pkgDir))<br>  ['index.html']<br><br>  &gt;&gt;&gt; pkgIndex = os.path.join(pkgDir, 'index.html')<br>  &gt;&gt;&gt; print open(pkgIndex, 'r').read()<br>  &lt;html&gt;<br>  &lt;head&gt;<br>  &lt;title&gt;Links for \"zope.component\"&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;h1&gt;Links for \"zope.component\"&lt;/h1&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/2.4/z/zope.component/zope.component-3.4.0-py2.4.egg#md5=c0763e94912e4a8ac1e321a068c916ba\"&gt;zope.component-3.4.0-py2.4.egg&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"http://pypi.python.org/packages/source/z/zope.component/zope.component-3.4.0.tar.gz#md5=94afb57dfe605d7235ff562d1eaa3bed\"&gt;zope.component-3.4.0.tar.gz&lt;/a&gt;&lt;br/&gt;<br>  &lt;/body&gt;<br>  &lt;/html&gt;<br><br>PIL is an interesting case, because it does not upload its distribution files<br>yet, at least not for version 1.1.6:<br><br>  &gt;&gt;&gt; pkgIndex = os.path.join(indexDir, 'PIL', 'index.html')<br>  &gt;&gt;&gt; print open(pkgIndex, 'r').read()<br>  &lt;html&gt;&lt;head&gt;&lt;title&gt;Links for PIL&lt;/title&gt;&lt;/head&gt;&lt;body&gt;&lt;h1&gt;Links for PIL&lt;/h1&gt;&lt;a href='http://www.pythonware.com/products/pil' rel=\"homepage\"&gt;1.1.5 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\"&gt;1.1.5 download_url&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/products/pil' rel=\"homepage\"&gt;1.1.5a2 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\"&gt;1.1.5a2 download_url&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/products/pil' rel=\"homepage\"&gt;1.1.5a1 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://effbot.org/zone/pil-changes-115.htm' rel=\"download\"&gt;1.1.5a1 download_url&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/products/pil/' rel=\"homepage\"&gt;1.1.4 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/products/pil/' rel=\"homepage\"&gt;1.1.3 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/downloads/Imaging-1.1.3.tar.gz' rel=\"download\"&gt;1.1.3 download_url&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://www.pythonware.com/products/pil' rel=\"homepage\"&gt;1.1.6 home_page&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href='http://effbot.org/downloads/#Imaging' rel=\"download\"&gt;1.1.6 download_url&lt;/a&gt;&lt;br/&gt;<br>  &lt;/body&gt;&lt;/html&gt;<br><br>Optionally, you can also specify the `-i` option to generate an overview:<br><br>  &gt;&gt;&gt; ppix.main(('-i', cfgFileReal, indexDir))<br><br>  &gt;&gt;&gt; sorted(os.listdir(indexDir))<br>  ['PIL', 'index.html', 'z3c.formdemo', 'zope.component', 'zope.interface']<br><br>Let's now look at the file:<br><br>  &gt;&gt;&gt; indexPage = os.path.join(indexDir, 'index.html')<br>  &gt;&gt;&gt; print open(indexPage, 'r').read()<br>  &lt;html&gt;<br>  &lt;head&gt;<br>  &lt;title&gt;Simple Index for the \"zope-dev\" KGS (version 3.4.0b2)&lt;/title&gt;<br>  &lt;/head&gt;<br>  &lt;body&gt;<br>  &lt;h1&gt;Simple Index for the \"zope-dev\" KGS (version 3.4.0b2)&lt;/h1&gt;<br>  &lt;a href=\"PIL\"&gt;PIL&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"z3c.formdemo\"&gt;z3c.formdemo&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"zope.component\"&gt;zope.component&lt;/a&gt;&lt;br/&gt;<br>  &lt;a href=\"zope.interface\"&gt;zope.interface&lt;/a&gt;&lt;br/&gt;<br>  &lt;/body&gt;<br>  &lt;/html&gt;<br><br>Allowing exisitng package pages to be overwritten and making the main index<br>page an optional feature makes it possible to use this script for two use<br>cases: (1) Merge the constraints into a PPIX index created by<br>``zc.mirrorcheeseshopslashsimple``, and (2) create a standalone index which<br>only provides the packages of the KGS.<br><br><br>Getting the Latest Versions<br>---------------------------<br><br>When updating the KGS, it is often useful to know for which packages have new<br>releases.<br><br>  &gt;&gt;&gt; from zope.kgs import latest<br>  &gt;&gt;&gt; latest.main((cfgFileReal,))<br>  z3c.formdemo: 1.1.1, 1.1.2, 1.2.0, 1.3.0, 1.3.0b1, 1.4.0, ...<br><br>However, it is often desired only to show new minor versions; in this case, we<br>can pass an option to exclude all versions that have a different major<br>version:<br><br>  &gt;&gt;&gt; latest.main(('-m', cfgFileReal))<br>  z3c.formdemo: 1.1.1, 1.1.2<br><br>Sometimes you're only interested in changes that apply to a single package,<br>and you won't want to wait for the script to query all of the others<br><br>  &gt;&gt;&gt; latest.main(('-m', cfgFileReal, 'zope.app.server'))<br><br>  &gt;&gt;&gt; latest.main(('-m', cfgFileReal, 'z3c.formdemo'))<br>  z3c.formdemo: 1.1.1, 1.1.2<br><br><br>Extracting Change Information<br>-----------------------------<br><br>When releasing a version of the KGS, it is desirable to produce a list of<br>changes since the last release. Changes are commonly compared to an older<br>version.<br><br>  &gt;&gt;&gt; cfgFileRealOrig = tempfile.mktemp('-cp.cfg')<br>  &gt;&gt;&gt; open(cfgFileRealOrig, 'w').write('''\\<br>  ... [DEFAULT]<br>  ... tested = true<br>  ...<br>  ... [KGS]<br>  ... name = zope-dev<br>  ... version = 3.4.0b1<br>  ...<br>  ... [PIL]<br>  ... versions = 1.1.6<br>  ...<br>  ... [zope.component]<br>  ... versions = 3.4.0<br>  ...<br>  ... [zope.interface]<br>  ... versions = 3.4.0<br>  ... ''')<br><br>Let's now produce the changes:<br><br>  &gt;&gt;&gt; from zope.kgs import change<br>  &gt;&gt;&gt; change.main((cfgFileReal, cfgFileRealOrig))<br>  Processing ('PIL', '1.1.6')<br>  Processing ('z3c.formdemo', '1.1.0')<br>  Processing ('zope.component', '3.4.0')<br>  Processing ('zope.interface', '3.4.1')<br>  ===<br>  PIL<br>  ===<br>  &lt;BLANKLINE&gt;<br>  No changes or information not found.<br>  &lt;BLANKLINE&gt;<br>  ============<br>  z3c.formdemo<br>  ============<br>  &lt;BLANKLINE&gt;<br>  1.1.0 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  - Feature: New \"SQL Message\" demo shows how ``z3c.form`` can be used with<br>    non-object data. Specificically, this small application demonstrates using a<br>    Gadfly database using pure SQL calls without any ORM.<br>  &lt;BLANKLINE&gt;<br>  - Feature: New \"Address Book\" demo that demonstrates more complex use cases,<br>    such as subforms, composite widgets, and mappings/lists<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br>  ==============<br>  zope.component<br>  ==============<br>  &lt;BLANKLINE&gt;<br>  3.4.0 (2007-09-29)<br>  ------------------<br>  &lt;BLANKLINE&gt;<br>  No further changes since 3.4.0a1.<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br>  ==============<br>  zope.interface<br>  ==============<br>  &lt;BLANKLINE&gt;<br>  3.4.1 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  Fixed a setup bug that prevented installation from source on systems<br>  without setuptools.<br>  &lt;BLANKLINE&gt;<br>  3.4.0 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  Final release for 3.4.0.<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br><br><br>You can also create the changes without an original file, in which case only<br>the versions listed in the current KGS are considered.<br><br>  &gt;&gt;&gt; change.main((cfgFileReal,))<br>  Processing ('PIL', '1.1.6')<br>  Processing ('z3c.formdemo', '1.1.0')<br>  Processing ('zope.component', '3.4.0')<br>  Processing ('zope.interface', '3.4.1')<br>  ===<br>  PIL<br>  ===<br>  &lt;BLANKLINE&gt;<br>  No changes or information not found.<br>  &lt;BLANKLINE&gt;<br>  ============<br>  z3c.formdemo<br>  ============<br>  &lt;BLANKLINE&gt;<br>  1.1.0 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  - Feature: New \"SQL Message\" demo shows how ``z3c.form`` can be used with<br>    non-object data. Specificically, this small application demonstrates using a<br>    Gadfly database using pure SQL calls without any ORM.<br>  &lt;BLANKLINE&gt;<br>  - Feature: New \"Address Book\" demo that demonstrates more complex use cases,<br>    such as subforms, composite widgets, and mappings/lists<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br>  ==============<br>  zope.component<br>  ==============<br>  &lt;BLANKLINE&gt;<br>  3.4.0 (2007-09-29)<br>  ------------------<br>  &lt;BLANKLINE&gt;<br>  No further changes since 3.4.0a1.<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br>  ==============<br>  zope.interface<br>  ==============<br>  &lt;BLANKLINE&gt;<br>  3.4.1 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  Fixed a setup bug that prevented installation from source on systems<br>  without setuptools.<br>  &lt;BLANKLINE&gt;<br>  3.4.0 (unknown)<br>  ---------------<br>  &lt;BLANKLINE&gt;<br>  Final release for 3.4.0.<br>  &lt;BLANKLINE&gt;<br>  &lt;BLANKLINE&gt;<br><br><br>The Site Generator<br>------------------<br><br>The easiest way to publish the KGS is via a directory published by a Web<br>server. Whenever a new `controlled-packages.cfg` file is uploaded, a script is<br>run that generates all the files. I usually set up a crontab job to do<br>this. The site generator script acts upon a directory, in which it assumes a<br>`controlled-packages.cfg` file was placed:<br><br>  &gt;&gt;&gt; siteDir = tempfile.mkdtemp()<br>  &gt;&gt;&gt; cfgFileSite = os.path.join(siteDir, 'controlled-packages.cfg')<br><br>  &gt;&gt;&gt; import shutil<br>  &gt;&gt;&gt; shutil.copy(cfgFileReal, cfgFileSite)<br><br>  &gt;&gt;&gt; from zope.kgs import site<br>  &gt;&gt;&gt; site.main(['-s', siteDir])<br><br>Let's have a look at the generated files:<br><br>  &gt;&gt;&gt; from pprint import pprint<br>  &gt;&gt;&gt; pprint(sorted(os.listdir(siteDir)))<br>  ['3.4.0b2', 'index.html', 'intro.html', 'resources']<br><br>  &gt;&gt;&gt; sorted(os.listdir(os.path.join(siteDir, '3.4.0b2')))<br>  ['ANNOUNCEMENT.html', 'CHANGES.html',<br>   'buildout.cfg', 'controlled-packages.cfg', 'index', 'index.html',<br>   'links.html', 'minimal', 'versions.cfg']<br><br>  &gt;&gt;&gt; sorted(os.listdir(os.path.join(siteDir, '3.4.0b2', 'minimal')))<br>  ['PIL', 'index.html', 'z3c.formdemo', 'zope.component', 'zope.interface']<br><br>If you try to generate the site again without adding the controlled packages<br>config file to the site directory again, it will simply return:<br><br>  &gt;&gt;&gt; site.main(['-s', siteDir])<br><br><br>Basic Parser API<br>----------------<br><br>The ``kgs.py`` module provides a simple class that parses the KGS<br>configuration file and provides all data in an object-oriented manner.<br><br>  &gt;&gt;&gt; from zope.kgs import kgs<br><br>The class is simply instnatiated using the path to the config file:<br><br>  &gt;&gt;&gt; myKGS = kgs.KGS(cfgFile)<br>  &gt;&gt;&gt; myKGS<br>  &lt;KGS 'zope-dev'&gt;<br><br>The name, version and date of the KGS is available via:<br><br>  &gt;&gt;&gt; myKGS.name<br>  'zope-dev'<br>  &gt;&gt;&gt; myKGS.version<br>  '1.2.0'<br>  &gt;&gt;&gt; myKGS.date<br>  datetime.date(2009, 1, 1)<br><br>When the changelog and/or announcement files are available, the KGS references<br>the absolute path:<br><br>  &gt;&gt;&gt; myKGS.changelog<br>  '.../CHANGES.txt'<br>  &gt;&gt;&gt; myKGS.announcement<br>  '.../ANNOUNCEMENT.txt'<br><br>The same is true for other release-related files:<br><br>  &gt;&gt;&gt; myKGS.files<br>  ('.../zope-dev-1.2.0.tgz',<br>   '.../zope-dev-1.2.0.exe')<br><br>The packages are available under `packages`:<br><br>  &gt;&gt;&gt; myKGS.packages<br>  [&lt;Package 'packageA'&gt;, &lt;Package 'packageB'&gt;, &lt;Package 'packageC'&gt;]<br><br>Each package is also an object:<br><br>  &gt;&gt;&gt; pkgA = myKGS.packages[0]<br>  &gt;&gt;&gt; pkgA<br>  &lt;Package 'packageA'&gt;<br><br>  &gt;&gt;&gt; pkgA.name<br>  'packageA'<br>  &gt;&gt;&gt; pkgA.versions<br>  ['1.0.0', '1.0.1']<br>  &gt;&gt;&gt; pkgA.tested<br>  True<br><br>As we have seen in the scripts above, the KGS class also supports the<br>`entends` option. Thus, let's load the KGS for the config file 2:<br><br>  &gt;&gt;&gt; myKGS2 = kgs.KGS(cfgFile2)<br>  &gt;&gt;&gt; myKGS2<br>  &lt;KGS 'grok-dev'&gt;<br><br>  &gt;&gt;&gt; myKGS2.name<br>  'grok-dev'<br><br>  &gt;&gt;&gt; myKGS2.packages<br>  [&lt;Package 'packageA'&gt;,<br>   &lt;Package 'packageB'&gt;,<br>   &lt;Package 'packageC'&gt;,<br>   &lt;Package 'packageD'&gt;]<br><br><br>=======<br>CHANGES<br>=======<br><br>1.2.0 (2009-07-24)<br>------------------<br><br>- Add ability to specify the extra-includes for running tests.<br><br>1.1.0 (2009-02-01)<br>------------------<br><br>- Added '--no-links', '--no-index', and '--no-minimal-index' options to the<br>  site generation sctipt to make it faster.<br><br>- Generating list of latest versions does not fail anymore, if downloading and<br>  parsing of the index page fails.<br><br>- Update links to PyPI web sites.<br><br>1.0.1 (2009-01-29)<br>------------------<br><br>- Fix documentation in all scripts, fixing missing imports and incorrect<br>  wording.<br><br>- The package should depend on `python-dateutl` and not `datetutil`, since the<br>  latter is not available in PyPI anymore.<br><br>1.0.0 (2009-01-29)<br>------------------<br><br>- Initial version as ``zope.kgs``.<br><br>  * A script that extracts the relevant part of the changelog of each package<br>    in the KGS.<br><br>  * A script that lists all versions of a package released after the latest<br>    version listed in the KGS.<br><br>  * A script that manages the generation of the entire KGS site.<br><br>    + Generates generic and version-specific pages.<br><br>    + Page generation is template-based for easy customization.<br><br>  * Generate `links.html` file which lists all controlled packages files.<br><br>  * Features copied from ``zope.release``:<br><br>    + Parser for KGS configuration files.<br><br>    + Generate `versions.cfg` and `buildout.cfg` script.<br><br>  * Features copied from ``zc.mirrorcheeseshopslashsimple``:<br><br>    + Generate new index pages for the controlled packages.\n          </div>"}, "last_serial": 805511, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "2d5171d389dac405e36deddb8bb26361", "sha256": "12ce0a3d5a003e70ccec74ec9367b1f9d6779819516a21016c74e00bd56906a8"}, "downloads": -1, "filename": "zope.kgs-1.0.0.tar.gz", "has_sig": false, "md5_digest": "2d5171d389dac405e36deddb8bb26361", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62518, "upload_time": "2009-01-29T07:53:22", "upload_time_iso_8601": "2009-01-29T07:53:22Z", "url": "https://files.pythonhosted.org/packages/73/88/62356e5f7d8a2a58519ec763028946052d5640a11a672d18e5e28cd9eb27/zope.kgs-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "eb286625c64bc3f1a9501bc5458bc79b", "sha256": "1ebb3c5f11ed3375a8ff67e356b722bda367bdd0cd0922eb119c1f45ede2bec2"}, "downloads": -1, "filename": "zope.kgs-1.0.1.tar.gz", "has_sig": false, "md5_digest": "eb286625c64bc3f1a9501bc5458bc79b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62676, "upload_time": "2009-01-30T02:10:06", "upload_time_iso_8601": "2009-01-30T02:10:06Z", "url": "https://files.pythonhosted.org/packages/bf/91/06906c5533ae7e6609da0f0cf8d43109da97111fb763aa5046ef4283eb44/zope.kgs-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "3edac14166603c42501a4bdaa82d09bc", "sha256": "e1227b0a3a16736195a3c6cc3bda3dde28b17632e2eaddf12b5da9b68283f4bf"}, "downloads": -1, "filename": "zope.kgs-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3edac14166603c42501a4bdaa82d09bc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63114, "upload_time": "2009-02-02T05:39:56", "upload_time_iso_8601": "2009-02-02T05:39:56Z", "url": "https://files.pythonhosted.org/packages/3c/90/d9e2f950c60ef1d90afb40934e35877eba219958c2d8b2d44ea96a2740b4/zope.kgs-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "15ed01a270bddcf253b1c08479549692", "sha256": "5499bb2bb7305f663276d62cd92a21a1980b092225915ed9a15cc7dfa464b988"}, "downloads": -1, "filename": "zope.kgs-1.2.0.tar.gz", "has_sig": false, "md5_digest": "15ed01a270bddcf253b1c08479549692", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63850, "upload_time": "2009-07-24T17:48:47", "upload_time_iso_8601": "2009-07-24T17:48:47.028177Z", "url": "https://files.pythonhosted.org/packages/f9/b4/5aff45eb5ea0d08db57187860481d7cf98c6819f3b41b4e7f3f6666c6d2c/zope.kgs-1.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "15ed01a270bddcf253b1c08479549692", "sha256": "5499bb2bb7305f663276d62cd92a21a1980b092225915ed9a15cc7dfa464b988"}, "downloads": -1, "filename": "zope.kgs-1.2.0.tar.gz", "has_sig": false, "md5_digest": "15ed01a270bddcf253b1c08479549692", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63850, "upload_time": "2009-07-24T17:48:47", "upload_time_iso_8601": "2009-07-24T17:48:47.028177Z", "url": "https://files.pythonhosted.org/packages/f9/b4/5aff45eb5ea0d08db57187860481d7cf98c6819f3b41b4e7f3f6666c6d2c/zope.kgs-1.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:28 2020"}