{"info": {"author": "Mikel Bober-Irizar", "author_email": "mikel@mxbi.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering"], "description": "# mlcrate\n[![PyPI version](https://badge.fury.io/py/mlcrate.svg)](https://pypi.python.org/pypi/mlcrate/)  \nA collection of handy python tools and helper functions, mainly for machine learning-related packages and Kaggle.\n\nThe methods in this package aren't revolutionary, and most of them are very simple. They are largely bunch of 'macro' functions which I often end up rewriting across multiple projects, and various helper functions for different packages, all in one place and easily accessible as a quality of life improvement. Hopefully, they can be some use to others in the community too.\n\nThis package has been tested with Python 3.5+, but should work with all versions of Python 3. Python 2 is not officially supported.\n\n### Installation\n\n`pip install mlcrate`\n\nAlternatively, clone the repo and run `python setup.py install` within the top-level folder to install the bleeding-edge version - this is recommended.\n\n### Dependencies\n\nRequired dependencies: `numpy`, `pandas`, `pathos`, `tqdm`  \n\n`mlcrate.xgb` additionally requires: `scikit-learn`, `xgboost`  \n`mlcrate.torch` additionally requires: `pytorch`\n\nSaving `.feather` files additionally requires `feather-format`\n\n### Contributing\n\nIf you find any bugs or have any feature suggestions (even general feature requests unrelated to what's already in the package), feel free to open an issue. Pull requests are also very welcome :slightly_smiling_face:\n\n# Docs\n\n- Main module\n    + [Save/Load](#saveload)\n    + [Writing to a csv log one line at a time](#writing-to-a-csv-log-one-line-at-a-time)\n    + [Easy multi-threaded function mapping with realtime progress bars](#easy-multi-threaded-function-mapping-with-realtime-progress-bars)\n- [Time](#time)\n- [Kaggle](#kaggle)\n- [XGBoost](#xgboost)\n- [PyTorch](#pytorch)\n    + [Painless conversion between Python/NumPy types and PyTorch tensors](#painless-conversion-between-pythonnumpy-types-and-pytorch-tensors)\n\n### Save/Load\n\nmlcrate comes with a simple pickle wrapper for fast save/load of arbitrary python objects (with optional compression).\nWorks with numpy, pandas, etc. and objects >4GB.  \nThe extremely fast [Apache Feather](http://blog.cloudera.com/blog/2016/03/feather-a-fast-on-disk-format-for-data-frames-for-r-and-python-powered-by-apache-arrow/) format is also supported to save/load DataFrames.\n\n```python\n>>> import mlcrate as mlc\n>>> x = [1, 2, 3, 4]\n\n>>> mlc.save(x, 'x.pkl.gz')  # Saves using GZIP when .gz extension is used\n\n>>> mlc.load('x.pkl.gz')\n[1, 2, 3, 4]\n\n>>> import pandas as pd\n>>> mlc.save(pd.DataFrame(), 'x.feather') # DataFrames can be saved with ultra-fast feather format.\n>>> x = mlc.load('x.feather')\n```\n\n###### [mlcrate.save(data, filename)](https://github.com/mxbi/mlcrate/blob/df66daf0a9e7078058aa65a7f42f9509f0d2d300/mlcrate/__init__.py#L9)\n\nPickles the passed data (with the highest available protocol) to disk using the passed filename.\nIf the filename ends in '.gz' then the data will additionally be GZIPed before saving.  \nIf filename ends with '.feather' or '.fthr', mlcrate will try to save the file using feather (for pd DataFrames). Note that feather does not support .gz compression.\n\n*Keyword arguments:*  \n`data` -- The python object to pickle to disk (use a dict or list to save multiple objects)  \n`filename` -- String with the relative filename to save the data to. By convention should end in one of: .pkl, .pkl.gz, .feather, .fthr\n\n###### [mlcrate.load(filename)](https://github.com/mxbi/mlcrate/blob/df66daf0a9e7078058aa65a7f42f9509f0d2d300/mlcrate/__init__.py#L24)\n\nLoads data saved with save() (or just normally saved with pickle). Uses gzip if filename ends in '.gz'\nAlso reads feather files ending in .feather or .fthr.\n\n*Keyword arguments:*  \n`filename` -- String with the relative filename of the pickle to load.  \n*Returns:*  \n`data` -- Arbitrary saved data\n\n### Writing to a csv log one line at a time\n\n```python\n>>> log = mlc.LinewiseCSVWriter('log.csv', header=['epoch', 'loss', 'acc'])\n>>> for i in range(10):\n        # Run something here\n        log.write([i, 0, 'nan']) # Results are flushed to file straight away\n>>> !head -n 2 log.csv\n\"epoch\",\"loss\",\"acc\"\n\"0\",\"0\",\"nan\"\n>>> log.close()\n```\n\n###### mlcrate.LinewiseCSVWriter(filename, header=None, sync=True, append=False)\n\nCSV Writer which writes a single line at a time, and by default syncs to disk after every line.\nThis is useful for eg. log files, where you want progress to appear in the file as it happens (instead of being written to disk when python exists)\nData should be passed to the writer as an iterable, as conversion to string and so on is done within the class.\n\n*Keyword arguments:*  \n`filename` -- the csv file to write to  \n`header` (default: None) -- An iterator (eg. list) containing an optional CSV header, which is written as the first line of the file.  \n`sync` (default: True) -- Flush and sync the output to disk after every write operation. This means data appears in the file instantly instead of being buffered  \n`append` (default: False) -- Append to an existing CSV file. By default, the csv file is overwritten each time.\n\n### Easy multi-threaded function mapping with realtime progress bars\n\nmlcrate implements a multiprocessing pool that allows you to easily apply a function to an array using multiple cores, for a linear speedup. In syntax, it is almost identical to multiprocessing.Pool, but has the following benefits:\n\n- Real-time progress bar, showing the combined progress across all cores with tqdm,  where usually using multiprocessing means you don't know how long the process will take.\n- Support for functions defined AFTER the pool has been created. With multiprocessing, you can only map functions which were created before the pool was created, meaning if you defined a new function you would need to create a new pool.\n- Support for lambda and local functions\n- Almost no performance degrading compared to using multiprocessing.\n\nExample:\n```python\n>>> pool = mlc.SuperPool()  # By default, the number of threads are used\n\n>>> def f(x):\n...     return x ** 2\n\n>>> res = pool.map(f, range(1000))  # Apply function f to every value in y\n[mlcrate] 8 CPUs: 100%|\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6| 1000/1000 [00:00<00:00, 1183.78it/s]\n\n>>> res[:5]\n[0, 1, 4, 9, 16]\n\n>>> # The above map command is equivalent to this, except multithreaded\n>>> res = [f(x) for x in tqdm(range(1000)))]\n```\n\n### Time\n\n###### [mlcrate.time.Timer()](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L4)\n\nA class for tracking timestamps and time elapsed since events. Useful for profiling code.\n\n```python\n>>> t = mlc.time.Timer()\n>>> t.elapsed(0)  # Number of seconds since initialisation\n3.0880863666534424\n>>> t.add('event')  # Log an event (eg. the start of some code you want to measure)\n>>> t.since('event')  # Elapsed seconds since the event\n4.758380889892578\n>>> t.fsince('event')  # Get the elapsed time in a pretty format\n'1h03m12s'\n>>> t['event']  # Get the timestamp of event\n1514476396.0099056\n```\n\n###### [mlcrate.time.now()](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L33)\n\nReturns the current time as a string in the format `'YYYY_MM_DD_HH_MM_SS'`. Useful for timestamping filenames etc.\n\n```python\n>>> mlc.time.now()\n'2017_12_28_16_58_29'\n```\n\n###### [mlcrate.time.format_duration(seconds, max_fields=3)](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L37)\n\nFormats a duration in a pretty readable format, in terms of seconds, minutes, hours and days.\n\n```python\n>>> format_duration(3825.21)\n'1h03m45s'\n>>> format_duration(3825.21, max_fields=2)\n'1h03m'\n>>> format_duration(259863)\n'3d01h17m'\n```\n\n*Keyword arguments:*  \n`seconds` -- A duration to be nicely formatted, in seconds  \n`max_fields` (default: 3) -- The number of units to display (eg. if max_fields is 1 and the time is three days it will only display the days unit)  \n*Returns:* A string representing the duration\n\n### Kaggle\n\n###### [mlcrate.kaggle.save_sub(df, filename='sub_{}.csv.gz')](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/kaggle.py#L1)\n\nSaves the passed dataframe with index=False, and enables GZIP compression if a '.gz' extension is passed.\nIf '{}' exists in the filename, this is replaced with the current time from mlcrate.time.now()\n\n```python\n>>> df\n   id  probability\n0   0         0.12\n1   1         0.38\n2   2         0.87\n>>> mlc.kaggle.save_sub(df) # Saved as eg. sub_2017_12_28_16_58_29.csv.gz with compression\n>>> mlc.kaggle.save_sub(df, 'sub_uncompressed.csv')\n```\n\n*Keyword arguments:*  \n`df` -- The pandas DataFrame of the submission  \n`filename` -- The filename to save the submission to. Autodetects '.gz'\n\n### XGBoost\n\n###### [mlcrate.xgb.get_importances(model, features)](https://github.com/mxbi/mlcrate/blob/74742068560ff877d95e2e57fb4f3c854b7d381b/mlcrate/xgb.py#L4)\nGet XGBoost feature importances from an xgboost model and list of features.\n\n*Keyword arguments:*  \n`model` -- a trained xgboost.Booster object  \n`features` -- a list of feature names corresponding to the features the model was trained on.  \n*Returns:*  \n`importance` -- A list of (feature, importance) tuples representing sorted importance  \n\n###### [mlcrate.xgb.train_kfold(params, x_train, y_train, x_test=None, folds=5, stratify=None, random_state=1337, skip_checks=False, print_imp='final')](https://github.com/mxbi/mlcrate/blob/74742068560ff877d95e2e57fb4f3c854b7d381b/mlcrate/xgb.py#L30)\n\nTrains a set of XGBoost models with chosen parameters on a KFold split dataset, returning full out-of-fold training set predictions (useful for stacking) as well as test set predictions and the models themselves.  \nTest set predictions are generated by averaging predictions from all the individual fold models - this means 1 model fewer has to be trained and from my experience performs better than retraining a single model on the full set.\n\nOptionally, the split can be stratified along a passed array. Feature importances are also computed and summed across all folds for convenience.\n\n*Keyword arguments:*  \n`params` -- Parameters passed to the xgboost model, as well as ['early_stopping_rounds', 'nrounds', 'verbose_eval'], which are passed to xgb.train(). Defaults: early_stopping_rounds = 50, nrounds = 100000, verbose_eval = 1  \n`x_train` -- The training set features  \n`y_train` -- The training set labels  \n`x_test` (optional) -- The test set features  \n`folds` (default: 5) -- The number of folds to perform  \n`stratify` (optional) -- An array to stratify the splits along  \n`random_state` (default: 1337) -- Random seed for splitting folds  \n`skip_checks` -- By default, this function tries to reorder the test set columns to match the order of the training set columns. Set this to disable this behaviour.  \n`print_imp` -- One of ``['every', 'final', None]`` - 'every' prints importances for every fold, 'final' prints combined importances at the end, None does not print importance  \n*Returns:*  \n`models` -- a list of trained xgboost.Booster objects  \n`p_train` -- Out-of-fold training set predictions (shaped like y_train)  \n`p_test` -- Mean of test set predictions from the models. Returns None if 'x_test' was not provided.  \n`imps` -- dict with \\{feature: importance\\} pairs representing the sum feature importance from all the models.\n\n### PyTorch\n\n#### Painless conversion between Python/NumPy types and PyTorch tensors\n\n```python\n>>> from mlcrate.torch import totensor, tonp\n\n>>> tensor = totensor([1, 2, 3]) # Convert almost any iterable or scalar to a PyTorch tensor easily\n>>> tensor\ntensor([ 1.,  2.,  3.])\n>>> tonp(tensor) # Convert any PyTorch tensor back into a numpy array! No more tensor.data.detach().cpu().numpy()\narray([1., 2., 3.], dtype=float32)\n\n>>> tensor = totensor(1, 'cpu') # Device can be specified too!\n>>> tensor\ntensor(1.)\n>>> tonp(tensor) # Also works with scalars\n1.\n```\n\n###### [mlcrate.torch.tonp(tensor)](https://github.com/mxbi/mlcrate/blob/torch/mlcrate/torch.py#L13)\nTakes any PyTorch tensor and converts it to a numpy array or scalar as appropiate. Not heavily optimized.\n\n###### [mlcrate.torch.totensor(arr, device=None, type='float32')](https://github.com/mxbi/mlcrate/blob/torch/mlcrate/torch.py#L22)\n\nConverts any array-like or scalar to a PyTorch tensor, and checks that the array is in the correct type (defaults to float32) and on the correct device.  \nEquivalent to calling `torch.from_array(np.array(arr, dtype=type)).to(device)` but more efficient.  \nNOTE: If the input is a torch tensor, the type will not be checked.\n\nKeyword arguments:  \n`arr` -- Any array-like object (eg numpy array, list, numpy varaible)  \n`device` (optional) -- Move the tensor to this device after creation  \n`type` -- the numpy data type of the tensor. Defaults to 'float32' (regardless of the input)  \n\n*Returns:*  \n`tensor` - A torch tensor\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mxbi/mlcrate", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mlcrate", "package_url": "https://pypi.org/project/mlcrate/", "platform": "", "project_url": "https://pypi.org/project/mlcrate/", "project_urls": {"Homepage": "https://github.com/mxbi/mlcrate"}, "release_url": "https://pypi.org/project/mlcrate/0.2.0/", "requires_dist": ["numpy", "pandas", "pathos", "tqdm"], "requires_python": "", "summary": "A collection of handy python tools and functions, mainly for ML and Kaggle.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            # mlcrate<br>[![PyPI version](https://badge.fury.io/py/mlcrate.svg)](https://pypi.python.org/pypi/mlcrate/)  <br>A collection of handy python tools and helper functions, mainly for machine learning-related packages and Kaggle.<br><br>The methods in this package aren't revolutionary, and most of them are very simple. They are largely bunch of 'macro' functions which I often end up rewriting across multiple projects, and various helper functions for different packages, all in one place and easily accessible as a quality of life improvement. Hopefully, they can be some use to others in the community too.<br><br>This package has been tested with Python 3.5+, but should work with all versions of Python 3. Python 2 is not officially supported.<br><br>### Installation<br><br>`pip install mlcrate`<br><br>Alternatively, clone the repo and run `python setup.py install` within the top-level folder to install the bleeding-edge version - this is recommended.<br><br>### Dependencies<br><br>Required dependencies: `numpy`, `pandas`, `pathos`, `tqdm`  <br><br>`mlcrate.xgb` additionally requires: `scikit-learn`, `xgboost`  <br>`mlcrate.torch` additionally requires: `pytorch`<br><br>Saving `.feather` files additionally requires `feather-format`<br><br>### Contributing<br><br>If you find any bugs or have any feature suggestions (even general feature requests unrelated to what's already in the package), feel free to open an issue. Pull requests are also very welcome :slightly_smiling_face:<br><br># Docs<br><br>- Main module<br>    + [Save/Load](#saveload)<br>    + [Writing to a csv log one line at a time](#writing-to-a-csv-log-one-line-at-a-time)<br>    + [Easy multi-threaded function mapping with realtime progress bars](#easy-multi-threaded-function-mapping-with-realtime-progress-bars)<br>- [Time](#time)<br>- [Kaggle](#kaggle)<br>- [XGBoost](#xgboost)<br>- [PyTorch](#pytorch)<br>    + [Painless conversion between Python/NumPy types and PyTorch tensors](#painless-conversion-between-pythonnumpy-types-and-pytorch-tensors)<br><br>### Save/Load<br><br>mlcrate comes with a simple pickle wrapper for fast save/load of arbitrary python objects (with optional compression).<br>Works with numpy, pandas, etc. and objects &gt;4GB.  <br>The extremely fast [Apache Feather](http://blog.cloudera.com/blog/2016/03/feather-a-fast-on-disk-format-for-data-frames-for-r-and-python-powered-by-apache-arrow/) format is also supported to save/load DataFrames.<br><br>```python<br>&gt;&gt;&gt; import mlcrate as mlc<br>&gt;&gt;&gt; x = [1, 2, 3, 4]<br><br>&gt;&gt;&gt; mlc.save(x, 'x.pkl.gz')  # Saves using GZIP when .gz extension is used<br><br>&gt;&gt;&gt; mlc.load('x.pkl.gz')<br>[1, 2, 3, 4]<br><br>&gt;&gt;&gt; import pandas as pd<br>&gt;&gt;&gt; mlc.save(pd.DataFrame(), 'x.feather') # DataFrames can be saved with ultra-fast feather format.<br>&gt;&gt;&gt; x = mlc.load('x.feather')<br>```<br><br>###### [mlcrate.save(data, filename)](https://github.com/mxbi/mlcrate/blob/df66daf0a9e7078058aa65a7f42f9509f0d2d300/mlcrate/__init__.py#L9)<br><br>Pickles the passed data (with the highest available protocol) to disk using the passed filename.<br>If the filename ends in '.gz' then the data will additionally be GZIPed before saving.  <br>If filename ends with '.feather' or '.fthr', mlcrate will try to save the file using feather (for pd DataFrames). Note that feather does not support .gz compression.<br><br>*Keyword arguments:*  <br>`data` -- The python object to pickle to disk (use a dict or list to save multiple objects)  <br>`filename` -- String with the relative filename to save the data to. By convention should end in one of: .pkl, .pkl.gz, .feather, .fthr<br><br>###### [mlcrate.load(filename)](https://github.com/mxbi/mlcrate/blob/df66daf0a9e7078058aa65a7f42f9509f0d2d300/mlcrate/__init__.py#L24)<br><br>Loads data saved with save() (or just normally saved with pickle). Uses gzip if filename ends in '.gz'<br>Also reads feather files ending in .feather or .fthr.<br><br>*Keyword arguments:*  <br>`filename` -- String with the relative filename of the pickle to load.  <br>*Returns:*  <br>`data` -- Arbitrary saved data<br><br>### Writing to a csv log one line at a time<br><br>```python<br>&gt;&gt;&gt; log = mlc.LinewiseCSVWriter('log.csv', header=['epoch', 'loss', 'acc'])<br>&gt;&gt;&gt; for i in range(10):<br>        # Run something here<br>        log.write([i, 0, 'nan']) # Results are flushed to file straight away<br>&gt;&gt;&gt; !head -n 2 log.csv<br>\"epoch\",\"loss\",\"acc\"<br>\"0\",\"0\",\"nan\"<br>&gt;&gt;&gt; log.close()<br>```<br><br>###### mlcrate.LinewiseCSVWriter(filename, header=None, sync=True, append=False)<br><br>CSV Writer which writes a single line at a time, and by default syncs to disk after every line.<br>This is useful for eg. log files, where you want progress to appear in the file as it happens (instead of being written to disk when python exists)<br>Data should be passed to the writer as an iterable, as conversion to string and so on is done within the class.<br><br>*Keyword arguments:*  <br>`filename` -- the csv file to write to  <br>`header` (default: None) -- An iterator (eg. list) containing an optional CSV header, which is written as the first line of the file.  <br>`sync` (default: True) -- Flush and sync the output to disk after every write operation. This means data appears in the file instantly instead of being buffered  <br>`append` (default: False) -- Append to an existing CSV file. By default, the csv file is overwritten each time.<br><br>### Easy multi-threaded function mapping with realtime progress bars<br><br>mlcrate implements a multiprocessing pool that allows you to easily apply a function to an array using multiple cores, for a linear speedup. In syntax, it is almost identical to multiprocessing.Pool, but has the following benefits:<br><br>- Real-time progress bar, showing the combined progress across all cores with tqdm,  where usually using multiprocessing means you don't know how long the process will take.<br>- Support for functions defined AFTER the pool has been created. With multiprocessing, you can only map functions which were created before the pool was created, meaning if you defined a new function you would need to create a new pool.<br>- Support for lambda and local functions<br>- Almost no performance degrading compared to using multiprocessing.<br><br>Example:<br>```python<br>&gt;&gt;&gt; pool = mlc.SuperPool()  # By default, the number of threads are used<br><br>&gt;&gt;&gt; def f(x):<br>...     return x ** 2<br><br>&gt;&gt;&gt; res = pool.map(f, range(1000))  # Apply function f to every value in y<br>[mlcrate] 8 CPUs: 100%|\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6\u00e2\u2013\u02c6| 1000/1000 [00:00&lt;00:00, 1183.78it/s]<br><br>&gt;&gt;&gt; res[:5]<br>[0, 1, 4, 9, 16]<br><br>&gt;&gt;&gt; # The above map command is equivalent to this, except multithreaded<br>&gt;&gt;&gt; res = [f(x) for x in tqdm(range(1000)))]<br>```<br><br>### Time<br><br>###### [mlcrate.time.Timer()](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L4)<br><br>A class for tracking timestamps and time elapsed since events. Useful for profiling code.<br><br>```python<br>&gt;&gt;&gt; t = mlc.time.Timer()<br>&gt;&gt;&gt; t.elapsed(0)  # Number of seconds since initialisation<br>3.0880863666534424<br>&gt;&gt;&gt; t.add('event')  # Log an event (eg. the start of some code you want to measure)<br>&gt;&gt;&gt; t.since('event')  # Elapsed seconds since the event<br>4.758380889892578<br>&gt;&gt;&gt; t.fsince('event')  # Get the elapsed time in a pretty format<br>'1h03m12s'<br>&gt;&gt;&gt; t['event']  # Get the timestamp of event<br>1514476396.0099056<br>```<br><br>###### [mlcrate.time.now()](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L33)<br><br>Returns the current time as a string in the format `'YYYY_MM_DD_HH_MM_SS'`. Useful for timestamping filenames etc.<br><br>```python<br>&gt;&gt;&gt; mlc.time.now()<br>'2017_12_28_16_58_29'<br>```<br><br>###### [mlcrate.time.format_duration(seconds, max_fields=3)](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/time.py#L37)<br><br>Formats a duration in a pretty readable format, in terms of seconds, minutes, hours and days.<br><br>```python<br>&gt;&gt;&gt; format_duration(3825.21)<br>'1h03m45s'<br>&gt;&gt;&gt; format_duration(3825.21, max_fields=2)<br>'1h03m'<br>&gt;&gt;&gt; format_duration(259863)<br>'3d01h17m'<br>```<br><br>*Keyword arguments:*  <br>`seconds` -- A duration to be nicely formatted, in seconds  <br>`max_fields` (default: 3) -- The number of units to display (eg. if max_fields is 1 and the time is three days it will only display the days unit)  <br>*Returns:* A string representing the duration<br><br>### Kaggle<br><br>###### [mlcrate.kaggle.save_sub(df, filename='sub_{}.csv.gz')](https://github.com/mxbi/mlcrate/blob/4cf3f95f557886d8fdf97e4a5ab0908edaa51332/mlcrate/kaggle.py#L1)<br><br>Saves the passed dataframe with index=False, and enables GZIP compression if a '.gz' extension is passed.<br>If '{}' exists in the filename, this is replaced with the current time from mlcrate.time.now()<br><br>```python<br>&gt;&gt;&gt; df<br>   id  probability<br>0   0         0.12<br>1   1         0.38<br>2   2         0.87<br>&gt;&gt;&gt; mlc.kaggle.save_sub(df) # Saved as eg. sub_2017_12_28_16_58_29.csv.gz with compression<br>&gt;&gt;&gt; mlc.kaggle.save_sub(df, 'sub_uncompressed.csv')<br>```<br><br>*Keyword arguments:*  <br>`df` -- The pandas DataFrame of the submission  <br>`filename` -- The filename to save the submission to. Autodetects '.gz'<br><br>### XGBoost<br><br>###### [mlcrate.xgb.get_importances(model, features)](https://github.com/mxbi/mlcrate/blob/74742068560ff877d95e2e57fb4f3c854b7d381b/mlcrate/xgb.py#L4)<br>Get XGBoost feature importances from an xgboost model and list of features.<br><br>*Keyword arguments:*  <br>`model` -- a trained xgboost.Booster object  <br>`features` -- a list of feature names corresponding to the features the model was trained on.  <br>*Returns:*  <br>`importance` -- A list of (feature, importance) tuples representing sorted importance  <br><br>###### [mlcrate.xgb.train_kfold(params, x_train, y_train, x_test=None, folds=5, stratify=None, random_state=1337, skip_checks=False, print_imp='final')](https://github.com/mxbi/mlcrate/blob/74742068560ff877d95e2e57fb4f3c854b7d381b/mlcrate/xgb.py#L30)<br><br>Trains a set of XGBoost models with chosen parameters on a KFold split dataset, returning full out-of-fold training set predictions (useful for stacking) as well as test set predictions and the models themselves.  <br>Test set predictions are generated by averaging predictions from all the individual fold models - this means 1 model fewer has to be trained and from my experience performs better than retraining a single model on the full set.<br><br>Optionally, the split can be stratified along a passed array. Feature importances are also computed and summed across all folds for convenience.<br><br>*Keyword arguments:*  <br>`params` -- Parameters passed to the xgboost model, as well as ['early_stopping_rounds', 'nrounds', 'verbose_eval'], which are passed to xgb.train(). Defaults: early_stopping_rounds = 50, nrounds = 100000, verbose_eval = 1  <br>`x_train` -- The training set features  <br>`y_train` -- The training set labels  <br>`x_test` (optional) -- The test set features  <br>`folds` (default: 5) -- The number of folds to perform  <br>`stratify` (optional) -- An array to stratify the splits along  <br>`random_state` (default: 1337) -- Random seed for splitting folds  <br>`skip_checks` -- By default, this function tries to reorder the test set columns to match the order of the training set columns. Set this to disable this behaviour.  <br>`print_imp` -- One of ``['every', 'final', None]`` - 'every' prints importances for every fold, 'final' prints combined importances at the end, None does not print importance  <br>*Returns:*  <br>`models` -- a list of trained xgboost.Booster objects  <br>`p_train` -- Out-of-fold training set predictions (shaped like y_train)  <br>`p_test` -- Mean of test set predictions from the models. Returns None if 'x_test' was not provided.  <br>`imps` -- dict with \\{feature: importance\\} pairs representing the sum feature importance from all the models.<br><br>### PyTorch<br><br>#### Painless conversion between Python/NumPy types and PyTorch tensors<br><br>```python<br>&gt;&gt;&gt; from mlcrate.torch import totensor, tonp<br><br>&gt;&gt;&gt; tensor = totensor([1, 2, 3]) # Convert almost any iterable or scalar to a PyTorch tensor easily<br>&gt;&gt;&gt; tensor<br>tensor([ 1.,  2.,  3.])<br>&gt;&gt;&gt; tonp(tensor) # Convert any PyTorch tensor back into a numpy array! No more tensor.data.detach().cpu().numpy()<br>array([1., 2., 3.], dtype=float32)<br><br>&gt;&gt;&gt; tensor = totensor(1, 'cpu') # Device can be specified too!<br>&gt;&gt;&gt; tensor<br>tensor(1.)<br>&gt;&gt;&gt; tonp(tensor) # Also works with scalars<br>1.<br>```<br><br>###### [mlcrate.torch.tonp(tensor)](https://github.com/mxbi/mlcrate/blob/torch/mlcrate/torch.py#L13)<br>Takes any PyTorch tensor and converts it to a numpy array or scalar as appropiate. Not heavily optimized.<br><br>###### [mlcrate.torch.totensor(arr, device=None, type='float32')](https://github.com/mxbi/mlcrate/blob/torch/mlcrate/torch.py#L22)<br><br>Converts any array-like or scalar to a PyTorch tensor, and checks that the array is in the correct type (defaults to float32) and on the correct device.  <br>Equivalent to calling `torch.from_array(np.array(arr, dtype=type)).to(device)` but more efficient.  <br>NOTE: If the input is a torch tensor, the type will not be checked.<br><br>Keyword arguments:  <br>`arr` -- Any array-like object (eg numpy array, list, numpy varaible)  <br>`device` (optional) -- Move the tensor to this device after creation  <br>`type` -- the numpy data type of the tensor. Defaults to 'float32' (regardless of the input)  <br><br>*Returns:*  <br>`tensor` - A torch tensor<br><br><br>\n          </div>"}, "last_serial": 4301610, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2e56553acb81b58e6d7d5c55ad4b670f", "sha256": "47a200c1700d8d4eee85bbc21ad3aeb75e5b0fb0d4d1ae5548f0d8393a34ea84"}, "downloads": -1, "filename": "mlcrate-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2e56553acb81b58e6d7d5c55ad4b670f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9166, "upload_time": "2018-01-30T20:32:22", "upload_time_iso_8601": "2018-01-30T20:32:22.665609Z", "url": "https://files.pythonhosted.org/packages/71/7d/ff1653fda2eeb47c4591968ea15e8ac3213ac7d0f48c57fee3689ddbc5f4/mlcrate-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9d0c401d4682cd6905ef114d05eb96bd", "sha256": "027d24293e87ad4ad419e019faecba8ea8c50e43518c0d2f33804fb147e1e7e8"}, "downloads": -1, "filename": "mlcrate-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9d0c401d4682cd6905ef114d05eb96bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22779, "upload_time": "2018-09-23T11:47:26", "upload_time_iso_8601": "2018-09-23T11:47:26.342588Z", "url": "https://files.pythonhosted.org/packages/78/7d/7a58b3eeae81efb695806eadf11e9290c6223ce1d3cf3a16b2a374901275/mlcrate-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e2256e0764fb4cb729397e6b9e12380", "sha256": "30fdd93363af90231d87e104053292b40aee30afeecaecacb3b1c9b21d155b04"}, "downloads": -1, "filename": "mlcrate-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0e2256e0764fb4cb729397e6b9e12380", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13779, "upload_time": "2018-09-23T11:47:27", "upload_time_iso_8601": "2018-09-23T11:47:27.608772Z", "url": "https://files.pythonhosted.org/packages/67/89/e1906e885470cfd3a88db89731eba19c716368a7f5dd339570e762baa0f2/mlcrate-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9d0c401d4682cd6905ef114d05eb96bd", "sha256": "027d24293e87ad4ad419e019faecba8ea8c50e43518c0d2f33804fb147e1e7e8"}, "downloads": -1, "filename": "mlcrate-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9d0c401d4682cd6905ef114d05eb96bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22779, "upload_time": "2018-09-23T11:47:26", "upload_time_iso_8601": "2018-09-23T11:47:26.342588Z", "url": "https://files.pythonhosted.org/packages/78/7d/7a58b3eeae81efb695806eadf11e9290c6223ce1d3cf3a16b2a374901275/mlcrate-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e2256e0764fb4cb729397e6b9e12380", "sha256": "30fdd93363af90231d87e104053292b40aee30afeecaecacb3b1c9b21d155b04"}, "downloads": -1, "filename": "mlcrate-0.2.0.tar.gz", "has_sig": false, "md5_digest": "0e2256e0764fb4cb729397e6b9e12380", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13779, "upload_time": "2018-09-23T11:47:27", "upload_time_iso_8601": "2018-09-23T11:47:27.608772Z", "url": "https://files.pythonhosted.org/packages/67/89/e1906e885470cfd3a88db89731eba19c716368a7f5dd339570e762baa0f2/mlcrate-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:34 2020"}