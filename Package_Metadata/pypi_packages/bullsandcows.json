{"info": {"author": "ryancflam", "author_email": "ryancflam@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "\n\n# Bulls and Cows\n**Bulls and Cows** - the classic paper-and-pencil logic game recreated in Python.\n\nWant to improve your critical thinking skills? Play this game!\n\n## What is Bulls and Cows?\n**Bulls and Cows**, popularised as the board game **Mastermind**, is a code-breaking logic-based game where you try to guess a number that has been randomly generated by the program. the randomly generated number contains exactly four digits between 0 and 9 with no repeats.\n\nRead more about Bulls and Cows here: https://en.wikipedia.org/wiki/Bulls_and_Cows\n\n## Using the Module\nFirst, you need to install the package.\n\n```pip install bullsandcows```\n\nNow in your project, import the package and create a new instance. We will be using ```game``` for this example, but you may use whatever name you want.\n\n```\nfrom bullsandcows import bullsandcows\n\ngame = bullsandcows()\n```\n\nThis module has a feature that allows you to disable the anti-cheat *(prevents the user from getting the random number until the game stops)*, which is automatically enabled. You can send a boolean variable to the bullsandcows instance which determines whether the anti-cheat should be enabled or not. The first method below disables it upon instantiation.\n\n```\ngame = bullsandcows(anticheat=False)\n```\n\nThe second method below disables it post-instantiation, for whatever reason.\n\n```\ngame.anticheat = False\n```\n\n```game.anticheat``` itself is a boolean value which you can use for other things such as displaying on the console. Once the anti-cheat is disabled, you may retrieve the random number as string using ```get_number()``` whenever you wish to.\n\nUsing ```get_number()``` without disabling the anti-cheat will raise an exception if the game is still in progress.\n\n**```guess(value)```**:\n\nGets and verifies a user's guess. Requires the user to parse a ```value```, which must either be a four-digit number with no repeated digits such as 1234, or the following exit commands which are for forcibly stopping the game: 'exit', 'stop', 'halt', 'quit' *(case-insensitive)*.\n\nFunction returns two values in order: number of bulls *(integer)*, number of cows *(integer)*. Sample usage:\n\n```\nvalue = input(\"Guess a number: \")\nbulls, cows = game.guess(value)\nprint(\"Bulls:\",bulls)\nprint(\"Cows:\",cows)\n```\n\n**```get_time()```**:\n\nGets the total time spent by the player and converts it to minutes and seconds.\n\nFunction returns two values in order: minutes *(integer)*, seconds *(integer; is reset to 0 every 60 seconds)*. Sample usage:\n\n```\nmins, secs = game.get_time()\nprint(f\"Total time spent: {mins} min & {secs} sec.\")\n```\n\n**Other Getters**:\n\n```get_attempts()``` - Returns the total number of attempts used; integer value.\n\n```get_stopped_bool()``` - Returns the game stopping indicator value; boolean value.\n\n```get_won_bool()``` - Returns the game winning indicator value; boolean value.\n\n## Gameplay\nIn the game, the player is asked to enter a four-digit number which is then compared to the randomly generated four-digit number; each individual digit entered by the player is compared to each digit within the randomly generated number. If a digit in the player's guess is in the randomly generated number and is in the **same position** in it as it was in their number, then it is scored as a **'bull'**. If that same digit is in a **different position**, then it is marked as a **'cow'**.\n\nThe objective of the game is to obviously find all four bulls in the shortest amount of time and using as few attempts as possible.\n\nExample of a valid guess: 1234\n\nExample of an invalid guess: 1244 *(the digit 4 has been used twice when it can only be used once)*\n\nAnother example of an invalid guess: 12345 *(five digits instead of four)*\n\n**Example Guess**:\n\nRandomly generated number: 1234\n\nYour guess: 1324\n\nResult: 2 bulls and 2 cows. *(bulls: 1 and 4; cows: 2 and 3)*\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryancflam/Bulls-and-Cows", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bullsandcows", "package_url": "https://pypi.org/project/bullsandcows/", "platform": "", "project_url": "https://pypi.org/project/bullsandcows/", "project_urls": {"Homepage": "https://github.com/ryancflam/Bulls-and-Cows"}, "release_url": "https://pypi.org/project/bullsandcows/1.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Bulls and Cows in Python.", "version": "1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bulls and Cows</h1>\n<p><strong>Bulls and Cows</strong> - the classic paper-and-pencil logic game recreated in Python.</p>\n<p>Want to improve your critical thinking skills? Play this game!</p>\n<h2>What is Bulls and Cows?</h2>\n<p><strong>Bulls and Cows</strong>, popularised as the board game <strong>Mastermind</strong>, is a code-breaking logic-based game where you try to guess a number that has been randomly generated by the program. the randomly generated number contains exactly four digits between 0 and 9 with no repeats.</p>\n<p>Read more about Bulls and Cows here: <a href=\"https://en.wikipedia.org/wiki/Bulls_and_Cows\" rel=\"nofollow\">https://en.wikipedia.org/wiki/Bulls_and_Cows</a></p>\n<h2>Using the Module</h2>\n<p>First, you need to install the package.</p>\n<p><code>pip install bullsandcows</code></p>\n<p>Now in your project, import the package and create a new instance. We will be using <code>game</code> for this example, but you may use whatever name you want.</p>\n<pre><code>from bullsandcows import bullsandcows\n\ngame = bullsandcows()\n</code></pre>\n<p>This module has a feature that allows you to disable the anti-cheat <em>(prevents the user from getting the random number until the game stops)</em>, which is automatically enabled. You can send a boolean variable to the bullsandcows instance which determines whether the anti-cheat should be enabled or not. The first method below disables it upon instantiation.</p>\n<pre><code>game = bullsandcows(anticheat=False)\n</code></pre>\n<p>The second method below disables it post-instantiation, for whatever reason.</p>\n<pre><code>game.anticheat = False\n</code></pre>\n<p><code>game.anticheat</code> itself is a boolean value which you can use for other things such as displaying on the console. Once the anti-cheat is disabled, you may retrieve the random number as string using <code>get_number()</code> whenever you wish to.</p>\n<p>Using <code>get_number()</code> without disabling the anti-cheat will raise an exception if the game is still in progress.</p>\n<p><strong><code>guess(value)</code></strong>:</p>\n<p>Gets and verifies a user's guess. Requires the user to parse a <code>value</code>, which must either be a four-digit number with no repeated digits such as 1234, or the following exit commands which are for forcibly stopping the game: 'exit', 'stop', 'halt', 'quit' <em>(case-insensitive)</em>.</p>\n<p>Function returns two values in order: number of bulls <em>(integer)</em>, number of cows <em>(integer)</em>. Sample usage:</p>\n<pre><code>value = input(\"Guess a number: \")\nbulls, cows = game.guess(value)\nprint(\"Bulls:\",bulls)\nprint(\"Cows:\",cows)\n</code></pre>\n<p><strong><code>get_time()</code></strong>:</p>\n<p>Gets the total time spent by the player and converts it to minutes and seconds.</p>\n<p>Function returns two values in order: minutes <em>(integer)</em>, seconds <em>(integer; is reset to 0 every 60 seconds)</em>. Sample usage:</p>\n<pre><code>mins, secs = game.get_time()\nprint(f\"Total time spent: {mins} min &amp; {secs} sec.\")\n</code></pre>\n<p><strong>Other Getters</strong>:</p>\n<p><code>get_attempts()</code> - Returns the total number of attempts used; integer value.</p>\n<p><code>get_stopped_bool()</code> - Returns the game stopping indicator value; boolean value.</p>\n<p><code>get_won_bool()</code> - Returns the game winning indicator value; boolean value.</p>\n<h2>Gameplay</h2>\n<p>In the game, the player is asked to enter a four-digit number which is then compared to the randomly generated four-digit number; each individual digit entered by the player is compared to each digit within the randomly generated number. If a digit in the player's guess is in the randomly generated number and is in the <strong>same position</strong> in it as it was in their number, then it is scored as a <strong>'bull'</strong>. If that same digit is in a <strong>different position</strong>, then it is marked as a <strong>'cow'</strong>.</p>\n<p>The objective of the game is to obviously find all four bulls in the shortest amount of time and using as few attempts as possible.</p>\n<p>Example of a valid guess: 1234</p>\n<p>Example of an invalid guess: 1244 <em>(the digit 4 has been used twice when it can only be used once)</em></p>\n<p>Another example of an invalid guess: 12345 <em>(five digits instead of four)</em></p>\n<p><strong>Example Guess</strong>:</p>\n<p>Randomly generated number: 1234</p>\n<p>Your guess: 1324</p>\n<p>Result: 2 bulls and 2 cows. <em>(bulls: 1 and 4; cows: 2 and 3)</em></p>\n\n          </div>"}, "last_serial": 7130512, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "3f5bded4e08bc40a9a4c598174fc5e0e", "sha256": "abb9d9aafdffab0a1842e1603ca0297705db1912966b21e1dc3ac06099e4a267"}, "downloads": -1, "filename": "bullsandcows-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3f5bded4e08bc40a9a4c598174fc5e0e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5058, "upload_time": "2020-04-29T06:59:09", "upload_time_iso_8601": "2020-04-29T06:59:09.498394Z", "url": "https://files.pythonhosted.org/packages/d4/0e/57507529d9da02c8843241ea12bf2aad774529c739a75c0c4a34e26439cb/bullsandcows-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "edd88b2e77d3a818e0510c9ddb3a2679", "sha256": "e30b694a28a7c1c332f31bfc646a61aff903d67f4514856431d2c954c801b55c"}, "downloads": -1, "filename": "bullsandcows-1.0.tar.gz", "has_sig": false, "md5_digest": "edd88b2e77d3a818e0510c9ddb3a2679", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4763, "upload_time": "2020-04-29T06:59:11", "upload_time_iso_8601": "2020-04-29T06:59:11.606492Z", "url": "https://files.pythonhosted.org/packages/4e/49/9557ecfb440b5284f160da618eb55bac2c56646c72fd0ca4619e11c8e022/bullsandcows-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ee4b340ae5ad2797fdb7e98ef3e501fb", "sha256": "582fc013cbb3cb292baf06d17c71fd2e8b162bd2e3b025a54cab306cf985a71f"}, "downloads": -1, "filename": "bullsandcows-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ee4b340ae5ad2797fdb7e98ef3e501fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5060, "upload_time": "2020-04-29T07:07:29", "upload_time_iso_8601": "2020-04-29T07:07:29.456615Z", "url": "https://files.pythonhosted.org/packages/37/31/81d1b4c0f1683aa47f68186628228d9e7d628b8ecc672097f0fb671b6bf4/bullsandcows-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f966158d7cb7dc2f088ae332f8d36051", "sha256": "0f2cf7f6ac36c3f338933b81a7be4714f8815aed868b84c51d266546330d8d1e"}, "downloads": -1, "filename": "bullsandcows-1.1.tar.gz", "has_sig": false, "md5_digest": "f966158d7cb7dc2f088ae332f8d36051", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4770, "upload_time": "2020-04-29T07:07:30", "upload_time_iso_8601": "2020-04-29T07:07:30.730251Z", "url": "https://files.pythonhosted.org/packages/9d/fe/ceeaf2a52a09a4c521dfde900ebf6eb0207f9a3825ccf2fc5ff3dca76418/bullsandcows-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "cc03d8c5a81d5485972c019804d3109c", "sha256": "e4be3a43b66464a6fec5a8ca71bdda47160da754aef8f0be82df0a7d53792382"}, "downloads": -1, "filename": "bullsandcows-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc03d8c5a81d5485972c019804d3109c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5169, "upload_time": "2020-04-29T16:33:57", "upload_time_iso_8601": "2020-04-29T16:33:57.726591Z", "url": "https://files.pythonhosted.org/packages/41/b0/e15076ac4dc9e7cd5520d15f0a3630113a569a5283f78669931952b1dddb/bullsandcows-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c41d363bf38943dc849243767342c2ca", "sha256": "9f416c4cf224a98ec09e9f023b6918cb534688272c61b6a9b4c5fea7458ce4c2"}, "downloads": -1, "filename": "bullsandcows-1.2.tar.gz", "has_sig": false, "md5_digest": "c41d363bf38943dc849243767342c2ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4895, "upload_time": "2020-04-29T16:33:58", "upload_time_iso_8601": "2020-04-29T16:33:58.890791Z", "url": "https://files.pythonhosted.org/packages/31/f4/00e770d20a3e5f29203b8ddab68e9afbbb9121d29f5b84ffd66684781b89/bullsandcows-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "2119eacc2d0c0d5d183bcf535947bcaf", "sha256": "ca457b212d07c9e374c0acaee66db32c7122785db0f44233c613e11a19d5d298"}, "downloads": -1, "filename": "bullsandcows-1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2119eacc2d0c0d5d183bcf535947bcaf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5198, "upload_time": "2020-04-29T16:47:25", "upload_time_iso_8601": "2020-04-29T16:47:25.652898Z", "url": "https://files.pythonhosted.org/packages/f1/62/0c69e9437c6e470a71ecd3c5c85a7bba644f94e2ad2479971c62377112de/bullsandcows-1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "db496cee4b1dcd775c72f4d1997c1ae8", "sha256": "71c9d362539bd1ebe5a8b909b31c3b76f9ff9d4df0d68c21721b8576c65b3ab6"}, "downloads": -1, "filename": "bullsandcows-1.3.tar.gz", "has_sig": false, "md5_digest": "db496cee4b1dcd775c72f4d1997c1ae8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4921, "upload_time": "2020-04-29T16:47:27", "upload_time_iso_8601": "2020-04-29T16:47:27.046062Z", "url": "https://files.pythonhosted.org/packages/e4/e4/6cc6047611869ad9093407e697cecf5736e87d9435fed13441ed9de66a13/bullsandcows-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "370f53bb0dd356df059ac2b100a5549e", "sha256": "a62a20ee5fc5efddb3fec9cf423c411e239984355db1a2103e675ca71a902671"}, "downloads": -1, "filename": "bullsandcows-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "370f53bb0dd356df059ac2b100a5549e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5199, "upload_time": "2020-04-29T17:03:55", "upload_time_iso_8601": "2020-04-29T17:03:55.817586Z", "url": "https://files.pythonhosted.org/packages/61/a5/a7602a85be2f42db1e23398a26128603baaa71121746488a9b673e1f7d6f/bullsandcows-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae69810927c196a6ce41a6184364f939", "sha256": "62b9dc5970ad993791cf7193b7375f6926cd7fdefc1901c52f6260a9b66b60b3"}, "downloads": -1, "filename": "bullsandcows-1.4.tar.gz", "has_sig": false, "md5_digest": "ae69810927c196a6ce41a6184364f939", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4922, "upload_time": "2020-04-29T17:03:56", "upload_time_iso_8601": "2020-04-29T17:03:56.866825Z", "url": "https://files.pythonhosted.org/packages/d7/b2/05947b696bdec8f19eefd17dbf59beff26df48963a46c45358545ddb1544/bullsandcows-1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "370f53bb0dd356df059ac2b100a5549e", "sha256": "a62a20ee5fc5efddb3fec9cf423c411e239984355db1a2103e675ca71a902671"}, "downloads": -1, "filename": "bullsandcows-1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "370f53bb0dd356df059ac2b100a5549e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5199, "upload_time": "2020-04-29T17:03:55", "upload_time_iso_8601": "2020-04-29T17:03:55.817586Z", "url": "https://files.pythonhosted.org/packages/61/a5/a7602a85be2f42db1e23398a26128603baaa71121746488a9b673e1f7d6f/bullsandcows-1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae69810927c196a6ce41a6184364f939", "sha256": "62b9dc5970ad993791cf7193b7375f6926cd7fdefc1901c52f6260a9b66b60b3"}, "downloads": -1, "filename": "bullsandcows-1.4.tar.gz", "has_sig": false, "md5_digest": "ae69810927c196a6ce41a6184364f939", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4922, "upload_time": "2020-04-29T17:03:56", "upload_time_iso_8601": "2020-04-29T17:03:56.866825Z", "url": "https://files.pythonhosted.org/packages/d7/b2/05947b696bdec8f19eefd17dbf59beff26df48963a46c45358545ddb1544/bullsandcows-1.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:00 2020"}