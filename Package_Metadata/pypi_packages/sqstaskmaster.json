{"info": {"author": "Upserve", "author_email": "datascience@upserve.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "SQS Task Master for Python\n==================================\n\n.. image:: https://travis-ci.org/Automatic/taskhawk-python.svg?branch=master\n    :target: https://travis-ci.org/upserve/sqstaskmaster\n\n.. image:: https://img.shields.io/pypi/v/sqstaskmaster.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/sqstaskmaster\n\n.. image:: https://img.shields.io/pypi/pyversions/sqstaskmaster.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/sqstaskmaster\n\n.. image:: https://img.shields.io/pypi/implementation/sqstaskmaster.svg?style=flat-square\n    :target: https://pypi.python.org/pypi/sqstaskmaster\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/upserve/sqstaskmaster\n\n\n**SQS Task Master** is one of many packages for distributed asynchronous task execution in python.\nThis package is different in that it is designed to work with uncooperative tasks.\nIt is designed for CPU intensive tasks which will not work in a python cooperative threading model.\nIt allows for tasks that may take upto 12 hours (the limit for SQS).\nIt also provides for applying a hard timeout for a task, less than 12 hours.\nThe implementation relies on using os Singals to achieve these behaviors.\nRetries and failures are handled using SQS infrastructure.\nIt is designed to work with standard SQS queues which guarantee at least once delivery.\n\nUpserve developed this library for use with long running data science tools like\n`xgBoost <https://github.com/dmlc/xgboost/tree/master/python-package>`_ and\n`OrTools <https://github.com/google/or-tools>`_.\nWhile python `signal <https://docs.python.org/3/library/signal.html#execution-of-python-signal-handlers>`_\nwill attempt to interrupt the process, you should verify the desired behavior.\nThis behavior and shortcomings with c libraries is documented in TestMessageHandler.test_cbusy_timeout.\n\n\nOther choices:\n - https://github.com/Automatic/taskhawk-python\n - https://github.com/mardix/sqs-task\n - https://github.com/celery/celery\n\nInstallation\n************\n\nThe sqstaskmaster project is public and can be installed from pypi with pip for python3 on mac and linux.\n\n::\n\n  pip install sqstaskmaster\n\nUsage\n*****\n\nPublish Tasks\n::\n\n  tm = TaskManager(sqs_url)\n  tm.submit('MyTask', some='kwarg', someother='kwarg')\n  tm.submit('MyOtherTask', **kwargs)\n\nCreate a Handler\n::\n\n  class MyHandler(MessageHandler):\n    def __init__(self, message, sqs_timeout, alarm_timeout, hard_timeout=4 * 60 * 60, **kwargs):\n        super().__init__(message, sqs_timeout, alarm_timeout, hard_timeout)\n        self.kwargs = kwargs\n        # prefer parsing arguments (for instance dates) in the consume task and passing explicit arguments\n\n    def running(self):\n        # If you can inspect the task to see if it is hung, do so here\n        return True\n\n    def run(self):\n        # Do some work here!\n\n    def notify(self, exception, context=None):\n        # Implement only for error notification service. Errors are already logged.\n        pass\n\nConsume Tasks\n::\n\n  for task, kwargs, message in TaskManager(sqs_url).task_generator(sqs_timeout=30):\n    if task == 'MyTask':\n      # prefer parsing kwargs here and handle KeyError and ValueError appropriately\n      with MyHandler(message, sqs_timeout=30, alarm_timeout=25, hard_timeout=300, **kwargs) as handler:\n        handler.run()\n    elif task == 'MyOtherTask':\n      with MyOtherHandler(message, sqs_timeout=30, alarm_timeout=25, hard_timeout=300, **kwargs) as handler:\n        handler.run()\n    else:\n      # Do something about unexpected task request\n\n\nLocal Integration Testing\n\nTesting your production system should include a combination of: local stubbing using Mock; tools like\n`localstack <https://github.com/localstack/localstack>`_ or a staging environment to examine behavior in a distributed\nsystem; and purely local validation of consumer / producer api. LocalQueue is a pure in memory solution that implements\na minimal subset of the SQS API for this last purpose only. The intent here is not to test or validate behavior of\nconsumers and producers interacting with SQS, but only the message content. LocalQueue could be extended to implement\nthreading and behave more like sqs within a single process, but that is better done with another tool like local stack.\n\n::\n\n  ...\n  tm = TaskManager(url, queue_constructor=LocalQueue)\n  ...\n\nBy passing the queue_constructor argument to the TaskManager, you can bypass AWS SQS and use a local, in memory queue\nobject to send and receive messages allowing local synchronous integration testing. This creates one global queue for\neach url. It is not for testing system behavior and does not implement retries, message timeouts or other SQS features.\nIt is only for integration testing of the interface between your producer and consumer methods with the TaskManager\nserialization and MessageHandler execution.\n\nDevelopment\n***********\n\nGit clone the respository:\n::\n\n  git clone git@github.com:upserve/sqstaskmaster.git\n\nPip install the development dependencies in a `virtual environment <https://virtualenvwrapper.readthedocs.io/en/latest/>`_:\n::\n\n  pip install -e .[dev]\n\nRun unit tests:\n::\n\n  python -m unittest -v\n\nRun flake8:\n::\n\n  flake8 .\n\nRun black:\n::\n\n  black .", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/upserve/sqstaskmaster", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sqstaskmaster", "package_url": "https://pypi.org/project/sqstaskmaster/", "platform": "", "project_url": "https://pypi.org/project/sqstaskmaster/", "project_urls": {"Homepage": "https://github.com/upserve/sqstaskmaster"}, "release_url": "https://pypi.org/project/sqstaskmaster/0.0.11/", "requires_dist": null, "requires_python": "~=3.7", "summary": "SQS Task Master for unwieldy python data processing by Upserve", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/upserve/sqstaskmaster\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/Automatic/taskhawk-python.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7a0ddce14350bfbcfbaf26fa09027f36c2aaf0c/68747470733a2f2f7472617669732d63692e6f72672f4175746f6d617469632f7461736b6861776b2d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/sqstaskmaster\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/sqstaskmaster.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bdfcd982a53b7ea6f3482fa0b406b87a3c63f6ad/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7371737461736b6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/sqstaskmaster\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/sqstaskmaster.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29e7bef13354f2a30d3e2ad3dadb2ed5370dd546/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7371737461736b6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://pypi.python.org/pypi/sqstaskmaster\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/implementation/sqstaskmaster.svg?style=flat-square\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74b788fe85b4beb8872a44328534c6107915180b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f7371737461736b6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a>\n<a href=\"https://github.com/upserve/sqstaskmaster\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<p><strong>SQS Task Master</strong> is one of many packages for distributed asynchronous task execution in python.\nThis package is different in that it is designed to work with uncooperative tasks.\nIt is designed for CPU intensive tasks which will not work in a python cooperative threading model.\nIt allows for tasks that may take upto 12 hours (the limit for SQS).\nIt also provides for applying a hard timeout for a task, less than 12 hours.\nThe implementation relies on using os Singals to achieve these behaviors.\nRetries and failures are handled using SQS infrastructure.\nIt is designed to work with standard SQS queues which guarantee at least once delivery.</p>\n<p>Upserve developed this library for use with long running data science tools like\n<a href=\"https://github.com/dmlc/xgboost/tree/master/python-package\" rel=\"nofollow\">xgBoost</a> and\n<a href=\"https://github.com/google/or-tools\" rel=\"nofollow\">OrTools</a>.\nWhile python <a href=\"https://docs.python.org/3/library/signal.html#execution-of-python-signal-handlers\" rel=\"nofollow\">signal</a>\nwill attempt to interrupt the process, you should verify the desired behavior.\nThis behavior and shortcomings with c libraries is documented in TestMessageHandler.test_cbusy_timeout.</p>\n<dl>\n<dt>Other choices:</dt>\n<dd><ul>\n<li><a href=\"https://github.com/Automatic/taskhawk-python\" rel=\"nofollow\">https://github.com/Automatic/taskhawk-python</a></li>\n<li><a href=\"https://github.com/mardix/sqs-task\" rel=\"nofollow\">https://github.com/mardix/sqs-task</a></li>\n<li><a href=\"https://github.com/celery/celery\" rel=\"nofollow\">https://github.com/celery/celery</a></li>\n</ul>\n</dd>\n</dl>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>The sqstaskmaster project is public and can be installed from pypi with pip for python3 on mac and linux.</p>\n<pre>pip install sqstaskmaster\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Publish Tasks</p>\n<pre>tm = TaskManager(sqs_url)\ntm.submit('MyTask', some='kwarg', someother='kwarg')\ntm.submit('MyOtherTask', **kwargs)\n</pre>\n<p>Create a Handler</p>\n<pre>class MyHandler(MessageHandler):\n  def __init__(self, message, sqs_timeout, alarm_timeout, hard_timeout=4 * 60 * 60, **kwargs):\n      super().__init__(message, sqs_timeout, alarm_timeout, hard_timeout)\n      self.kwargs = kwargs\n      # prefer parsing arguments (for instance dates) in the consume task and passing explicit arguments\n\n  def running(self):\n      # If you can inspect the task to see if it is hung, do so here\n      return True\n\n  def run(self):\n      # Do some work here!\n\n  def notify(self, exception, context=None):\n      # Implement only for error notification service. Errors are already logged.\n      pass\n</pre>\n<p>Consume Tasks</p>\n<pre>for task, kwargs, message in TaskManager(sqs_url).task_generator(sqs_timeout=30):\n  if task == 'MyTask':\n    # prefer parsing kwargs here and handle KeyError and ValueError appropriately\n    with MyHandler(message, sqs_timeout=30, alarm_timeout=25, hard_timeout=300, **kwargs) as handler:\n      handler.run()\n  elif task == 'MyOtherTask':\n    with MyOtherHandler(message, sqs_timeout=30, alarm_timeout=25, hard_timeout=300, **kwargs) as handler:\n      handler.run()\n  else:\n    # Do something about unexpected task request\n</pre>\n<p>Local Integration Testing</p>\n<p>Testing your production system should include a combination of: local stubbing using Mock; tools like\n<a href=\"https://github.com/localstack/localstack\" rel=\"nofollow\">localstack</a> or a staging environment to examine behavior in a distributed\nsystem; and purely local validation of consumer / producer api. LocalQueue is a pure in memory solution that implements\na minimal subset of the SQS API for this last purpose only. The intent here is not to test or validate behavior of\nconsumers and producers interacting with SQS, but only the message content. LocalQueue could be extended to implement\nthreading and behave more like sqs within a single process, but that is better done with another tool like local stack.</p>\n<pre>...\ntm = TaskManager(url, queue_constructor=LocalQueue)\n...\n</pre>\n<p>By passing the queue_constructor argument to the TaskManager, you can bypass AWS SQS and use a local, in memory queue\nobject to send and receive messages allowing local synchronous integration testing. This creates one global queue for\neach url. It is not for testing system behavior and does not implement retries, message timeouts or other SQS features.\nIt is only for integration testing of the interface between your producer and consumer methods with the TaskManager\nserialization and MessageHandler execution.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Git clone the respository:</p>\n<pre>git clone git@github.com:upserve/sqstaskmaster.git\n</pre>\n<p>Pip install the development dependencies in a <a href=\"https://virtualenvwrapper.readthedocs.io/en/latest/\" rel=\"nofollow\">virtual environment</a>:</p>\n<pre>pip install -e .[dev]\n</pre>\n<p>Run unit tests:</p>\n<pre>python -m unittest -v\n</pre>\n<p>Run flake8:</p>\n<pre>flake8 .\n</pre>\n<p>Run black:</p>\n<pre>black .\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6288491, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "df5828a5f3241f6e43ad8f55582e7ca3", "sha256": "d4ed0a0f24619a246cf33d1815ed1bef454a2f618abe28386ea7fb873ffa2569"}, "downloads": -1, "filename": "sqstaskmaster-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "df5828a5f3241f6e43ad8f55582e7ca3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.7", "size": 9833, "upload_time": "2019-08-23T13:38:05", "upload_time_iso_8601": "2019-08-23T13:38:05.354932Z", "url": "https://files.pythonhosted.org/packages/f5/00/fa59f8d3d34b3afdec2b532d894834339f1440fd9540384c7f4e520e418a/sqstaskmaster-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "efcbeb8858a564773bbaf04c6ab67638", "sha256": "bec68a1abafba619d0c89faee4429d5e94211fe06747bc8ec8c3a2d6ef77e2c9"}, "downloads": -1, "filename": "sqstaskmaster-0.0.1.tar.gz", "has_sig": false, "md5_digest": "efcbeb8858a564773bbaf04c6ab67638", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 7595, "upload_time": "2019-08-23T13:38:07", "upload_time_iso_8601": "2019-08-23T13:38:07.393465Z", "url": "https://files.pythonhosted.org/packages/63/af/03ab199cf76ba0fe7750a00877679e94d925409482917ef8d374ce927c3f/sqstaskmaster-0.0.1.tar.gz", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "7c93ec7ddb01cabf49b2d0d5fee6a7f3", "sha256": "f71bd021950cd9a1049c2ee1523ebe0ab445f10aadc6145df5b1c3bf5e021ff3"}, "downloads": -1, "filename": "sqstaskmaster-0.0.10.tar.gz", "has_sig": false, "md5_digest": "7c93ec7ddb01cabf49b2d0d5fee6a7f3", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 17437, "upload_time": "2019-12-12T19:54:42", "upload_time_iso_8601": "2019-12-12T19:54:42.652378Z", "url": "https://files.pythonhosted.org/packages/0f/6f/57a7cf55667291a3e05df883a0f46439486fe92fad8a23483baf474c77b6/sqstaskmaster-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "b8231349c5c9fb9e46055a81787e0170", "sha256": "666376e7584c5ba9b952322f85af1272c11f1e7bc40c500b2e403dc6eb85a7ea"}, "downloads": -1, "filename": "sqstaskmaster-0.0.11.tar.gz", "has_sig": false, "md5_digest": "b8231349c5c9fb9e46055a81787e0170", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 17445, "upload_time": "2019-12-12T21:38:57", "upload_time_iso_8601": "2019-12-12T21:38:57.851595Z", "url": "https://files.pythonhosted.org/packages/44/17/18d02a02e734b4b775fe45e35ecf5335556bf80a410f29f9659631581e37/sqstaskmaster-0.0.11.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "1d888065269842cebc483fd955ceb8b7", "sha256": "43d9e489835fa80a18c3ed2613cdaff448d15bb7105a341a9ada54f08b36a300"}, "downloads": -1, "filename": "sqstaskmaster-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1d888065269842cebc483fd955ceb8b7", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 8067, "upload_time": "2019-08-23T15:01:14", "upload_time_iso_8601": "2019-08-23T15:01:14.854472Z", "url": "https://files.pythonhosted.org/packages/4c/bf/0c9cf744f89dc381af91ccf4efea9d357eb9d9305487c75fc1e5e05b1a07/sqstaskmaster-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6c31f63dd9d7e6715ab5d56a6899326a", "sha256": "9fcbbc289c3061c345fc0bd49c372118c9ce6c657e0e24224515719c45cea36e"}, "downloads": -1, "filename": "sqstaskmaster-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6c31f63dd9d7e6715ab5d56a6899326a", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 9001, "upload_time": "2019-08-26T15:03:25", "upload_time_iso_8601": "2019-08-26T15:03:25.550157Z", "url": "https://files.pythonhosted.org/packages/6d/e7/fea4fdae92e7b7eb3c3640c152033362d86ac4518bf6aaa2d1ab8323876f/sqstaskmaster-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "084eaec3a9d7128547973635d8426992", "sha256": "af618f76dcc976d04c4e9102467295ec4d0fbbbe0a365b08ba21dc31d79f5be7"}, "downloads": -1, "filename": "sqstaskmaster-0.0.4.tar.gz", "has_sig": false, "md5_digest": "084eaec3a9d7128547973635d8426992", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 9006, "upload_time": "2019-08-27T19:57:11", "upload_time_iso_8601": "2019-08-27T19:57:11.952930Z", "url": "https://files.pythonhosted.org/packages/68/d7/13d35c0e2bf08824b7aa3360b9f6201089c4f8b04a822e4945e97c8e18ab/sqstaskmaster-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ca960ac13efd28732582166892d90727", "sha256": "7db5917c40f58c67a14e82088c1bfcf8f6144a8090b312939339a3eaaa8f383b"}, "downloads": -1, "filename": "sqstaskmaster-0.0.5.tar.gz", "has_sig": false, "md5_digest": "ca960ac13efd28732582166892d90727", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 10617, "upload_time": "2019-08-28T16:29:56", "upload_time_iso_8601": "2019-08-28T16:29:56.259885Z", "url": "https://files.pythonhosted.org/packages/4c/2a/64a33d987ec8a466e01b228665db7d038ca3e69cd1be56589d001d6453fb/sqstaskmaster-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c23dba9e7aa644e9493dd29fa393cd3f", "sha256": "54dc85f93cc06f0cea97427bf6c7716a7640700f3eb9d9771abe44ddb40ea122"}, "downloads": -1, "filename": "sqstaskmaster-0.0.6.tar.gz", "has_sig": false, "md5_digest": "c23dba9e7aa644e9493dd29fa393cd3f", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 10624, "upload_time": "2019-10-14T19:48:16", "upload_time_iso_8601": "2019-10-14T19:48:16.724070Z", "url": "https://files.pythonhosted.org/packages/b7/cb/bc91651b6fdf497c4a11624f0894672aca02c905648aa50c58796855288e/sqstaskmaster-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "e8df99297af56ed78d3957eb08d11da4", "sha256": "5b41c86447ef51b7ec83cdab4684dd08dd5389b122f363f07235673449fbeec2"}, "downloads": -1, "filename": "sqstaskmaster-0.0.7.tar.gz", "has_sig": false, "md5_digest": "e8df99297af56ed78d3957eb08d11da4", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 10622, "upload_time": "2019-10-14T20:20:22", "upload_time_iso_8601": "2019-10-14T20:20:22.480048Z", "url": "https://files.pythonhosted.org/packages/37/c7/bd16dac8262bd95da34ded834d68f2a0ec9ef7bacd7ea28dbb0550cef2c5/sqstaskmaster-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "5d0277538acae133e38702481dbc6fa6", "sha256": "f9d89151b19654ff204eaff4472c2fa95a193906edca1cb58b88fb7486caec7a"}, "downloads": -1, "filename": "sqstaskmaster-0.0.8.tar.gz", "has_sig": false, "md5_digest": "5d0277538acae133e38702481dbc6fa6", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 10614, "upload_time": "2019-10-18T01:17:42", "upload_time_iso_8601": "2019-10-18T01:17:42.602396Z", "url": "https://files.pythonhosted.org/packages/6f/a8/96ae213b98b86652e025c4dbba41bc07763f7e64445eb2f2197a04082ffd/sqstaskmaster-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "aa4b766916a6bfda29abe610959ddb13", "sha256": "26647169c84a14a765fb7c0a99f58c3a3ad95f1647faded87cd3d115573cab36"}, "downloads": -1, "filename": "sqstaskmaster-0.0.9.tar.gz", "has_sig": false, "md5_digest": "aa4b766916a6bfda29abe610959ddb13", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 15915, "upload_time": "2019-11-20T18:50:40", "upload_time_iso_8601": "2019-11-20T18:50:40.955507Z", "url": "https://files.pythonhosted.org/packages/1d/c0/c83f6c3d822faeb3634b3c81f21a04b3c871fe6fdc9784de0c2c2dbe1787/sqstaskmaster-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8231349c5c9fb9e46055a81787e0170", "sha256": "666376e7584c5ba9b952322f85af1272c11f1e7bc40c500b2e403dc6eb85a7ea"}, "downloads": -1, "filename": "sqstaskmaster-0.0.11.tar.gz", "has_sig": false, "md5_digest": "b8231349c5c9fb9e46055a81787e0170", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.7", "size": 17445, "upload_time": "2019-12-12T21:38:57", "upload_time_iso_8601": "2019-12-12T21:38:57.851595Z", "url": "https://files.pythonhosted.org/packages/44/17/18d02a02e734b4b775fe45e35ecf5335556bf80a410f29f9659631581e37/sqstaskmaster-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:28 2020"}