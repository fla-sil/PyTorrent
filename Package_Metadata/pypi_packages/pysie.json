{"info": {"author": "Xianshun Chen", "author_email": "xs0040@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: General", "Topic :: Utilities"], "description": "pysie\r\n=====\r\n\r\nPackage pysie implements a statistical inference engine in Python\r\n\r\n.. image:: https://travis-ci.org/chen0040/pysie.svg?branch=master\r\n    :target: https://travis-ci.org/chen0040/pysie\r\n\r\n.. image:: https://coveralls.io/repos/github/chen0040/pysie/badge.svg?branch=master\r\n    :target: https://coveralls.io/github/chen0040/pysie?branch=master\r\n\r\n.. image:: https://scrutinizer-ci.com/g/chen0040/pysie/badges/quality-score.png?b=master\r\n    :target: https://scrutinizer-ci.com/g/chen0040/pysie/?branch=master\r\n\r\n\r\nInstall\r\n=======\r\n\r\nRun the following command to install pysie using pip\r\n\r\n.. code-block:: bash\r\n\r\n    $ pip install pysie\r\n\r\n\r\nFeatures\r\n========\r\n\r\n* Automatically switch between Student's T, binomial simulation bootstrapping, or normal sampling distribution based on the sample size\r\n* Computer the confidence interval for the sampling distribution given a confidence level\r\n* Carry out hypothesis testing for both mean (for numerical sample data) and proportion (for categorical sample data)\r\n* Carry out hypothesis testing between two different experiment setup (or two different distinct groups or populations)\r\n* Anova: Carry out hypothesis testing on whether a numerical variable is independent of a categorical variable given a sample data table containing the two variables as columns\r\n* Chi-Square Testing: Carry out hypothesis testing on whether two categorical variables are independent of each other given a sample data table containing the two variables as columns\r\n* Anova for regression: Carry out hypothesis testing on whether two numerical variables are independent of each other given a sample data table containing the two variables as columns\r\n\r\nUsage\r\n=====\r\n\r\nNumerical sample\r\n----------------\r\n\r\nThe sample code below shows how to create numerical sample:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_numeric(x=0.001)\r\n    sample.add_numeric(x=0.02)\r\n    ...\r\n\r\n    print(sample.size()) # return the rows in the sample data table\r\n    print(sample.is_numerical()) # return True\r\n    print(sample.is_categorical()) # return False\r\n    print(sample.get(0).x) # return 0.001\r\n    print(sample.get(1).x) # return 0.02\r\n\r\n\r\nIn the above code, the numerical variable is 'x'\r\n\r\nCategorical sample\r\n------------------\r\n\r\nThe sample code below shows how to create categorical sample:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_category(label=\"OK\")\r\n    sample.add_category(label=\"CANCEL\")\r\n    sample.add_category(label=\"OK\")\r\n    ...\r\n\r\n    print(sample.size()) # return the rows int the sample data table\r\n    print(sample.is_categorical()) # return True\r\n    print(sample.is_numerical()) # return False\r\n    print(sample.get(0).label) # return \"OK\"\r\n    print(sample.get(1).label) # return \"CANCEL\"\r\n\r\n\r\nIn the above code, the categorical variable is 'label'\r\n\r\nSample containing one numerical variable and one categorical variables\r\n-----------------------------------------------------------------------\r\n\r\nThe sample code below shows how to create a sample containing two columns (one numerical and the other categorical):\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_numeric(x=0.001, group_id='grp1')\r\n    sample.add_numeric(x=0.02, group_id='grp1')\r\n    sample.add_numeric(x=0.003, group_id='grp1')\r\n    ...\r\n\r\n    print(sample.size()) # return the rows in the sample data table\r\n    print(sample.is_numerical()) # return True\r\n    print(sample.is_categorical()) # return False\r\n    print(sample.get(0).x) # return 0.001\r\n    print(sample.get(0).group_id) # return 'grp1'\r\n    print(sample.get(1).x) # return 0.02\r\n    print(sample.get(1).group_id) # return 'grp1'\r\n\r\n\r\nIn the above code, the numerical variable is 'x' and the categorical variable is 'group_id'\r\n\r\nSample containing two categorical variables as its data columns\r\n---------------------------------------------------------------\r\n\r\nThe sample code below shows how to create a sample containing two categorical columns\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_category(label='OK', group_id='grp1')\r\n    sample.add_category(label='CANCEL', group_id='grp1')\r\n    sample.add_category(label='OK', group_id='grp1')\r\n    ...\r\n\r\n    print(sample.size()) # return the rows int the sample data table\r\n    print(sample.is_categorical()) # return True\r\n    print(sample.is_numerical()) # return False\r\n    print(sample.get(0).label) # return \"OK\"\r\n    print(sample.get(0).group_id) # return 'grp1'\r\n    print(sample.get(1).label) # return \"CANCEL\"\r\n    print(sample.get(1).group_id) # return 'grp1'\r\n\r\n\r\nIn the above code, the first categorical variable is 'label', and the second categorical variable is 'group_id'\r\n\r\nSample containing two numerical variables as its data columns\r\n-------------------------------------------------------------\r\n\r\nThe sample code below shows how to create a sample containing two numerical columns\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_xy(x=0.001, y=0.01)\r\n    sample.add_xy(x=0.02, y=0.2)\r\n    ...\r\n\r\n    print(sample.size()) # return the rows in the sample data table\r\n    print(sample.is_numerical()) # return True\r\n    print(sample.is_categorical()) # return False\r\n    print(sample.get(0).x) # return 0.001\r\n    print(sample.get(0).y) # return 0.01\r\n    print(sample.get(1).x) # return 0.02\r\n    print(sample.get(1).y) # return 0.2\r\n\r\n\r\nSampling distribution for Sample Means\r\n--------------------------------------\r\n\r\nThe sample code below show how to derive the sampling distribution for the sample means of a population given a numerical\r\nsample from that population:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_numeric(x=0.001)\r\n    sample.add_numeric(x=0.02)\r\n    ...\r\n\r\n    sampling_distribution = MeanSamplingDistribution(sample_distribution=SampleDistribution(sample))\r\n    print('sampling distribution: (mu = ' + str(sampling_distribution.point_estimate)\r\n              + ', SE = ' + str(sampling_distribution.standard_error) + ')')\r\n    print('The sampling distribution belong to family: ' + sampling_distribution.distribution_family)\r\n    print('We are 95% confident that the true mean for the underlying population is between : '\r\n              + str(sampling_distribution.confidence_interval(0.95)))\r\n\r\n\r\nSampling distribution for Sample Proportions\r\n--------------------------------------------\r\n\r\nThe sample code below show how to derive the sampling distribution for the proportion of class 'A' of a population\r\ngiven a categorical sample from that population:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_category(label='A')\r\n    sample.add_category(label='C')\r\n    sample.add_category(label='A')\r\n    sample.add_category(label='B')\r\n    ...\r\n\r\n    sampling_distribution = ProportionSamplingDistribution(sample_distribution=SampleDistribution(sample,\r\n        categorical_value=\"A\"))\r\n    print('sampling distribution: (p = ' + str(sampling_distribution.point_estimate)\r\n              + ', SE = ' + str(sampling_distribution.standard_error) + ')')\r\n    print('The sampling distribution belong to family: ' + sampling_distribution.distribution_family)\r\n    print('We are 95% confident that the true proportion of \"A\" in the underlying population is between : '\r\n              + str(sampling_distribution.confidence_interval(0.95)))\r\n\r\n\r\nCompare Sample Means between Two Different Groups\r\n-------------------------------------------------\r\n\r\nThe sample code below shows how to derive the sampling distribution for the difference between sample means of two\r\ndifferent groups (e.g., two different experiment setups or two different populations):\r\n\r\n.. code-block:: python\r\n\r\n    grp1_sample = Sample()\r\n    grp1_sample.add_numeric(x=0.001)\r\n    grp1_sample.add_numeric(x=0.02)\r\n    ...\r\n    grp2_sample = Sample()\r\n    grp2_sample.add_numeric(x=0.02)\r\n    grp2_sample.add_numeric(x=0.03)\r\n    ...\r\n    sampling_distribution = MeanDiffSamplingDistribution(grp1_sample_distribution=SampleDistribution(grp1_sample),\r\n                                                             grp2_sample_distribution=SampleDistribution(grp2_sample))\r\n    self.assertEqual(sampling_distribution.distribution_family, DistributionFamily.normal)\r\n    print('sampling distribution: (mean_diff = ' + str(sampling_distribution.point_estimate)\r\n          + ', SE = ' + str(sampling_distribution.standard_error) + ')')\r\n    print('We are 95% confident that the difference between them is : '\r\n          + str(sampling_distribution.confidence_interval(0.95)))\r\n\r\n\r\nCompare Sample Proportions between Two Different Groups\r\n-------------------------------------------------------\r\n\r\nThe sample code below shows how to derive the sampling distribution for the difference between sample means of two\r\ndifferent groups (e.g., two different experiment setups or two different populations):\r\n\r\n.. code-block:: python\r\n\r\n    grp1_sample = Sample()\r\n    grp1_sample.add_category(label='A')\r\n    grp1_sample.add_category(label='C')\r\n    ...\r\n    grp2_sample = Sample()\r\n    grp2_sample.add_category(label='A')\r\n    grp2_sample.add_category(label='B')\r\n    ...\r\n    sampling_distribution = ProportionDiffSamplingDistribution(\r\n        grp1_sample_distribution=SampleDistribution(grp1_sample, categorical_value=\"A\"),\r\n        grp2_sample_distribution=SampleDistribution(grp2_sample, categorical_value=\"A\"))\r\n    self.assertEqual(sampling_distribution.distribution_family, DistributionFamily.normal)\r\n    print('sampling distribution: (proportion_diff = ' + str(sampling_distribution.point_estimate)\r\n          + ', SE = ' + str(sampling_distribution.standard_error) + ')')\r\n    print('We are 95% confident that the difference in proportion of \"A\" between them is : '\r\n          + str(sampling_distribution.confidence_interval(0.95)))\r\n\r\n\r\nHypothesis Testing on Mean\r\n--------------------------\r\n\r\nThe sample code below shows how to test whether the true mean of a population (from which the numerical sample is taken)\r\nis equal to a particular value 0.99:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_numeric(0.01)\r\n    sample.add_numeric(0.02)\r\n    ...\r\n\r\n    sampling_distribution = MeanSamplingDistribution(sample_distribution=SampleDistribution(sample))\r\n    testing = MeanTesting(sampling_distribution=sampling_distribution, mean_null=0.99)\r\n\r\n    print('one tail p-value: ' + str(testing.p_value_one_tail))\r\n    print('two tail p-value: ' + str(testing.p_value_two_tail))\r\n    reject_one_tail, reject_two_tail = testing.will_reject(0.01) # 0.01 is the significance level\r\n    print('will reject mean = 0.99 (one-tail) ? ' + str(reject_one_tail))\r\n    print('will reject mean = 0.99 (two-tail) ? ' + str(reject_two_tail))\r\n\r\n\r\nHypothesis Testing on Proportion\r\n--------------------------------\r\n\r\nThe sample code below shows how to test whether the true proportion of class \"A\" in a population (from which the\r\ncategorical sample is taken) is equal to a particular value 0.51:\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_category(\"A\")\r\n    sample.add_category(\"B\")\r\n    sample.add_category(\"A\")\r\n    ...\r\n\r\n    sampling_distribution = ProportionSamplingDistribution(\r\n        sample_distribution=SampleDistribution(sample, categorical_value=\"A\"))\r\n\r\n    testing = ProportionTesting(sampling_distribution=sampling_distribution, p_null=0.51)\r\n\r\n    print('one tail p-value: ' + str(testing.p_value_one_tail))\r\n    print('two tail p-value: ' + str(testing.p_value_two_tail))\r\n    reject_one_tail, reject_two_tail = testing.will_reject(0.01) # 0.01 is the significance level\r\n    print('will reject proportion(A) = 0.51 (one-tail) ? ' + str(reject_one_tail))\r\n    print('will reject proportion(A) = 0.51 (two-tail) ? ' + str(reject_two_tail))\r\n\r\n\r\nHypothesis Testing on Mean Comparison (Two Groups)\r\n--------------------------------------------------\r\n\r\nThe sample code below shows how to test whether to reject the hypothesis that the means of two different groups (e.g.\r\ntwo different experiments or populations from which the numerical samples are take) are the same:\r\n\r\n.. code-block:: python\r\n\r\n    grp1_sample = Sample()\r\n    grp1_sample.add_numeric(0.01)\r\n    grp1_sample.add_numeric(0.02)\r\n    ...\r\n    grp2_sample = Sample()\r\n    grp2_sample.add_numeric(0.03)\r\n    grp2_sample.add_numeric(0.02)\r\n    ...\r\n\r\n    sampling_distribution = MeanDiffSamplingDistribution(grp1_sample_distribution=SampleDistribution(grp1_sample),\r\n                                                             grp2_sample_distribution=SampleDistribution(grp2_sample))\r\n\r\n    testing = MeanDiffTesting(sampling_distribution=sampling_distribution)\r\n\r\n    print('one tail p-value: ' + str(testing.p_value_one_tail))\r\n    print('two tail p-value: ' + str(testing.p_value_two_tail))\r\n    reject_one_tail, reject_two_tail = testing.will_reject(0.01) # 0.01 is the significance level\r\n    print('will reject hypothesis that two groups have same means (one-tail) ? ' + str(reject_one_tail))\r\n    print('will reject hypothesis that two groups have same means (two-tail) ? ' + str(reject_two_tail))\r\n\r\n\r\nHypothesis Testing on Proportion Comparison (Two Groups)\r\n--------------------------------------------------------\r\n\r\nThe sample code below shows how to test whether reject the hypothesis that the true proportion of class \"A\" in two\r\ngroups (from which the categorical samples are taken) are equal to each other:\r\n\r\n.. code-block:: python\r\n\r\n    grp1_sample = Sample()\r\n    grp1_sample.add_category(\"A\")\r\n    grp1_sample.add_category(\"B\")\r\n    grp1_sample.add_category(\"A\")\r\n    ...\r\n    grp2_sample = Sample()\r\n    grp2_sample.add_category(\"A\")\r\n    grp2_sample.add_category(\"B\")\r\n    grp2_sample.add_category(\"C\")\r\n    ...\r\n\r\n    sampling_distribution = ProportionDiffSamplingDistribution(\r\n        grp1_sample_distribution=SampleDistribution(grp1_sample, categorical_value=\"A\"),\r\n        grp2_sample_distribution=SampleDistribution(grp2_sample, categorical_value=\"A\"))\r\n    self.assertEqual(sampling_distribution.distribution_family, DistributionFamily.normal)\r\n\r\n    testing = ProportionDiffTesting(sampling_distribution=sampling_distribution)\r\n\r\n    print('one tail p-value: ' + str(testing.p_value_one_tail))\r\n    print('two tail p-value: ' + str(testing.p_value_two_tail))\r\n    reject_one_tail, reject_two_tail = testing.will_reject(0.01) # 0.01 is the significance level\r\n    print('will reject proportion(A, grp1) = proportion(A, grp2) (one-tail) ? ' + str(reject_one_tail))\r\n    print('will reject proportion(A, grp1) = proportion(A, grp2) (two-tail) ? ' + str(reject_two_tail))\r\n\r\n\r\nIndependence Testing between One Numerical and One Categorical Variable (ANOVA)\r\n-------------------------------------------------------------------------------\r\n\r\nThe sample code below show how to test whether to reject the hypothesis that a numerical and categorical variable are\r\nindependent of each other for a population (from which the numerical sample is taken):\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n    sample.add_numeric(x=0.001, group_id='grp1')\r\n    sample.add_numeric(x=0.02, group_id='grp1')\r\n    sample.add_numeric(x=0.003, group_id='grp1')\r\n    ...\r\n\r\n    testing = Anova(sample=sample)\r\n\r\n    print('p-value: ' + str(testing.p_value))\r\n    reject = testing.will_reject(0.01)\r\n    print('will reject [same mean for all groups] ? ' + str(reject))\r\n\r\n\r\nIndependence Testing between Two Categorical Variables (Chi-Square Testing):\r\n----------------------------------------------------------------------------\r\n\r\nThe sample code below show how to test whether to reject that hypothesis that two categorical variables are independent\r\nof each other for a population (from which the categorical sampleis taken):\r\n\r\n\r\n.. code-block:: python\r\n\r\n    sample = Sample()\r\n\r\n    for i in range(1000):\r\n        sample.add_category('itemA' if numpy.random.randn() > 0 else 'itemB', 'group1')\r\n        sample.add_category('itemA' if numpy.random.randn() > 0 else 'itemB', 'group2')\r\n        sample.add_category('itemA' if numpy.random.randn() > 0 else 'itemB', 'group3')\r\n\r\n    testing = ChiSquare(sample=sample)\r\n\r\n    print('p-value: ' + str(testing.p_value))\r\n    reject = testing.will_reject(0.01)\r\n    print('will reject [two categorical variables are independent of each other] ? ' + str(reject))", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/chen0040/pysie", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pysie", "package_url": "https://pypi.org/project/pysie/", "platform": "any", "project_url": "https://pypi.org/project/pysie/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/chen0040/pysie"}, "release_url": "https://pypi.org/project/pysie/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Python implementation of a statistical inference engine", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pysie\">\n<h2>pysie</h2>\n<p>Package pysie implements a statistical inference engine in Python</p>\n<a href=\"https://travis-ci.org/chen0040/pysie\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/chen0040/pysie.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7bb534e5bfbdc5b5f10385c30a71e0018bf8290a/68747470733a2f2f7472617669732d63692e6f72672f6368656e303034302f70797369652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/chen0040/pysie?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/chen0040/pysie/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/736084dfb77c04de1c6be49f6653db7ee4cfd834/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6368656e303034302f70797369652f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://scrutinizer-ci.com/g/chen0040/pysie/?branch=master\" rel=\"nofollow\"><img alt=\"https://scrutinizer-ci.com/g/chen0040/pysie/badges/quality-score.png?b=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7acdba6809b068d8ee9a0d6ec078d3e2055e337/68747470733a2f2f7363727574696e697a65722d63692e636f6d2f672f6368656e303034302f70797369652f6261646765732f7175616c6974792d73636f72652e706e673f623d6d6173746572\"></a>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Run the following command to install pysie using pip</p>\n<pre>$ pip install pysie\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Automatically switch between Student\u2019s T, binomial simulation bootstrapping, or normal sampling distribution based on the sample size</li>\n<li>Computer the confidence interval for the sampling distribution given a confidence level</li>\n<li>Carry out hypothesis testing for both mean (for numerical sample data) and proportion (for categorical sample data)</li>\n<li>Carry out hypothesis testing between two different experiment setup (or two different distinct groups or populations)</li>\n<li>Anova: Carry out hypothesis testing on whether a numerical variable is independent of a categorical variable given a sample data table containing the two variables as columns</li>\n<li>Chi-Square Testing: Carry out hypothesis testing on whether two categorical variables are independent of each other given a sample data table containing the two variables as columns</li>\n<li>Anova for regression: Carry out hypothesis testing on whether two numerical variables are independent of each other given a sample data table containing the two variables as columns</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"numerical-sample\">\n<h3>Numerical sample</h3>\n<p>The sample code below shows how to create numerical sample:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"c1\"># return the rows in the sample data table</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_numerical</span><span class=\"p\">())</span> <span class=\"c1\"># return True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_categorical</span><span class=\"p\">())</span> <span class=\"c1\"># return False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.001</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.02</span>\n</pre>\n<p>In the above code, the numerical variable is \u2018x\u2019</p>\n</div>\n<div id=\"categorical-sample\">\n<h3>Categorical sample</h3>\n<p>The sample code below shows how to create categorical sample:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"CANCEL\"</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s2\">\"OK\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"c1\"># return the rows int the sample data table</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_categorical</span><span class=\"p\">())</span> <span class=\"c1\"># return True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_numerical</span><span class=\"p\">())</span> <span class=\"c1\"># return False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span> <span class=\"c1\"># return \"OK\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span> <span class=\"c1\"># return \"CANCEL\"</span>\n</pre>\n<p>In the above code, the categorical variable is \u2018label\u2019</p>\n</div>\n<div id=\"sample-containing-one-numerical-variable-and-one-categorical-variables\">\n<h3>Sample containing one numerical variable and one categorical variables</h3>\n<p>The sample code below shows how to create a sample containing two columns (one numerical and the other categorical):</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.003</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"c1\"># return the rows in the sample data table</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_numerical</span><span class=\"p\">())</span> <span class=\"c1\"># return True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_categorical</span><span class=\"p\">())</span> <span class=\"c1\"># return False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.001</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span> <span class=\"c1\"># return 'grp1'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.02</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span> <span class=\"c1\"># return 'grp1'</span>\n</pre>\n<p>In the above code, the numerical variable is \u2018x\u2019 and the categorical variable is \u2018group_id\u2019</p>\n</div>\n<div id=\"sample-containing-two-categorical-variables-as-its-data-columns\">\n<h3>Sample containing two categorical variables as its data columns</h3>\n<p>The sample code below shows how to create a sample containing two categorical columns</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'OK'</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'CANCEL'</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'OK'</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"c1\"># return the rows int the sample data table</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_categorical</span><span class=\"p\">())</span> <span class=\"c1\"># return True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_numerical</span><span class=\"p\">())</span> <span class=\"c1\"># return False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span> <span class=\"c1\"># return \"OK\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span> <span class=\"c1\"># return 'grp1'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">label</span><span class=\"p\">)</span> <span class=\"c1\"># return \"CANCEL\"</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_id</span><span class=\"p\">)</span> <span class=\"c1\"># return 'grp1'</span>\n</pre>\n<p>In the above code, the first categorical variable is \u2018label\u2019, and the second categorical variable is \u2018group_id\u2019</p>\n</div>\n<div id=\"sample-containing-two-numerical-variables-as-its-data-columns\">\n<h3>Sample containing two numerical variables as its data columns</h3>\n<p>The sample code below shows how to create a sample containing two numerical columns</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_xy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_xy</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">())</span> <span class=\"c1\"># return the rows in the sample data table</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_numerical</span><span class=\"p\">())</span> <span class=\"c1\"># return True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">is_categorical</span><span class=\"p\">())</span> <span class=\"c1\"># return False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.001</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.01</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">x</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.02</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span> <span class=\"c1\"># return 0.2</span>\n</pre>\n</div>\n<div id=\"sampling-distribution-for-sample-means\">\n<h3>Sampling distribution for Sample Means</h3>\n<p>The sample code below show how to derive the sampling distribution for the sample means of a population given a numerical\nsample from that population:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">MeanSamplingDistribution</span><span class=\"p\">(</span><span class=\"n\">sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sampling distribution: (mu = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">point_estimate</span><span class=\"p\">)</span>\n          <span class=\"o\">+</span> <span class=\"s1\">', SE = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">standard_error</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">')'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The sampling distribution belong to family: '</span> <span class=\"o\">+</span> <span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">distribution_family</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We are 95</span><span class=\"si\">% c</span><span class=\"s1\">onfident that the true mean for the underlying population is between : '</span>\n          <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">confidence_interval</span><span class=\"p\">(</span><span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"sampling-distribution-for-sample-proportions\">\n<h3>Sampling distribution for Sample Proportions</h3>\n<p>The sample code below show how to derive the sampling distribution for the proportion of class \u2018A\u2019 of a population\ngiven a categorical sample from that population:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'C'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">ProportionSamplingDistribution</span><span class=\"p\">(</span><span class=\"n\">sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">,</span>\n    <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sampling distribution: (p = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">point_estimate</span><span class=\"p\">)</span>\n          <span class=\"o\">+</span> <span class=\"s1\">', SE = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">standard_error</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">')'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'The sampling distribution belong to family: '</span> <span class=\"o\">+</span> <span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">distribution_family</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We are 95</span><span class=\"si\">% c</span><span class=\"s1\">onfident that the true proportion of \"A\" in the underlying population is between : '</span>\n          <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">confidence_interval</span><span class=\"p\">(</span><span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"compare-sample-means-between-two-different-groups\">\n<h3>Compare Sample Means between Two Different Groups</h3>\n<p>The sample code below shows how to derive the sampling distribution for the difference between sample means of two\ndifferent groups (e.g., two different experiment setups or two different populations):</p>\n<pre><span class=\"n\">grp1_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">)</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">grp2_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.03</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">MeanDiffSamplingDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample</span><span class=\"p\">),</span>\n                                                         <span class=\"n\">grp2_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp2_sample</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">distribution_family</span><span class=\"p\">,</span> <span class=\"n\">DistributionFamily</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sampling distribution: (mean_diff = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">point_estimate</span><span class=\"p\">)</span>\n      <span class=\"o\">+</span> <span class=\"s1\">', SE = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">standard_error</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">')'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We are 95</span><span class=\"si\">% c</span><span class=\"s1\">onfident that the difference between them is : '</span>\n      <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">confidence_interval</span><span class=\"p\">(</span><span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"compare-sample-proportions-between-two-different-groups\">\n<h3>Compare Sample Proportions between Two Different Groups</h3>\n<p>The sample code below shows how to derive the sampling distribution for the difference between sample means of two\ndifferent groups (e.g., two different experiment setups or two different populations):</p>\n<pre><span class=\"n\">grp1_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'C'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">grp2_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'A'</span><span class=\"p\">)</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"n\">label</span><span class=\"o\">=</span><span class=\"s1\">'B'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">ProportionDiffSamplingDistribution</span><span class=\"p\">(</span>\n    <span class=\"n\">grp1_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample</span><span class=\"p\">,</span> <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">),</span>\n    <span class=\"n\">grp2_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp2_sample</span><span class=\"p\">,</span> <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">distribution_family</span><span class=\"p\">,</span> <span class=\"n\">DistributionFamily</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'sampling distribution: (proportion_diff = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">point_estimate</span><span class=\"p\">)</span>\n      <span class=\"o\">+</span> <span class=\"s1\">', SE = '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">standard_error</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"s1\">')'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'We are 95</span><span class=\"si\">% c</span><span class=\"s1\">onfident that the difference in proportion of \"A\" between them is : '</span>\n      <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">confidence_interval</span><span class=\"p\">(</span><span class=\"mf\">0.95</span><span class=\"p\">)))</span>\n</pre>\n</div>\n<div id=\"hypothesis-testing-on-mean\">\n<h3>Hypothesis Testing on Mean</h3>\n<p>The sample code below shows how to test whether the true mean of a population (from which the numerical sample is taken)\nis equal to a particular value 0.99:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">MeanSamplingDistribution</span><span class=\"p\">(</span><span class=\"n\">sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">))</span>\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">MeanTesting</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">=</span><span class=\"n\">sampling_distribution</span><span class=\"p\">,</span> <span class=\"n\">mean_null</span><span class=\"o\">=</span><span class=\"mf\">0.99</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'one tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'two tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_two_tail</span><span class=\"p\">))</span>\n<span class=\"n\">reject_one_tail</span><span class=\"p\">,</span> <span class=\"n\">reject_two_tail</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span> <span class=\"c1\"># 0.01 is the significance level</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject mean = 0.99 (one-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject mean = 0.99 (two-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_two_tail</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"hypothesis-testing-on-proportion\">\n<h3>Hypothesis Testing on Proportion</h3>\n<p>The sample code below shows how to test whether the true proportion of class \u201cA\u201d in a population (from which the\ncategorical sample is taken) is equal to a particular value 0.51:</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">ProportionSamplingDistribution</span><span class=\"p\">(</span>\n    <span class=\"n\">sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">,</span> <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">ProportionTesting</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">=</span><span class=\"n\">sampling_distribution</span><span class=\"p\">,</span> <span class=\"n\">p_null</span><span class=\"o\">=</span><span class=\"mf\">0.51</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'one tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'two tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_two_tail</span><span class=\"p\">))</span>\n<span class=\"n\">reject_one_tail</span><span class=\"p\">,</span> <span class=\"n\">reject_two_tail</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span> <span class=\"c1\"># 0.01 is the significance level</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject proportion(A) = 0.51 (one-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject proportion(A) = 0.51 (two-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_two_tail</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"hypothesis-testing-on-mean-comparison-two-groups\">\n<h3>Hypothesis Testing on Mean Comparison (Two Groups)</h3>\n<p>The sample code below shows how to test whether to reject the hypothesis that the means of two different groups (e.g.\ntwo different experiments or populations from which the numerical samples are take) are the same:</p>\n<pre><span class=\"n\">grp1_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">grp2_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.03</span><span class=\"p\">)</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"mf\">0.02</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">MeanDiffSamplingDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample</span><span class=\"p\">),</span>\n                                                         <span class=\"n\">grp2_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp2_sample</span><span class=\"p\">))</span>\n\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">MeanDiffTesting</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">=</span><span class=\"n\">sampling_distribution</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'one tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'two tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_two_tail</span><span class=\"p\">))</span>\n<span class=\"n\">reject_one_tail</span><span class=\"p\">,</span> <span class=\"n\">reject_two_tail</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span> <span class=\"c1\"># 0.01 is the significance level</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject hypothesis that two groups have same means (one-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject hypothesis that two groups have same means (two-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_two_tail</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"hypothesis-testing-on-proportion-comparison-two-groups\">\n<h3>Hypothesis Testing on Proportion Comparison (Two Groups)</h3>\n<p>The sample code below shows how to test whether reject the hypothesis that the true proportion of class \u201cA\u201d in two\ngroups (from which the categorical samples are taken) are equal to each other:</p>\n<pre><span class=\"n\">grp1_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n<span class=\"n\">grp1_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"n\">grp2_sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"A\"</span><span class=\"p\">)</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"B\"</span><span class=\"p\">)</span>\n<span class=\"n\">grp2_sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s2\">\"C\"</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">sampling_distribution</span> <span class=\"o\">=</span> <span class=\"n\">ProportionDiffSamplingDistribution</span><span class=\"p\">(</span>\n    <span class=\"n\">grp1_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp1_sample</span><span class=\"p\">,</span> <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">),</span>\n    <span class=\"n\">grp2_sample_distribution</span><span class=\"o\">=</span><span class=\"n\">SampleDistribution</span><span class=\"p\">(</span><span class=\"n\">grp2_sample</span><span class=\"p\">,</span> <span class=\"n\">categorical_value</span><span class=\"o\">=</span><span class=\"s2\">\"A\"</span><span class=\"p\">))</span>\n<span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">.</span><span class=\"n\">distribution_family</span><span class=\"p\">,</span> <span class=\"n\">DistributionFamily</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">)</span>\n\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">ProportionDiffTesting</span><span class=\"p\">(</span><span class=\"n\">sampling_distribution</span><span class=\"o\">=</span><span class=\"n\">sampling_distribution</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'one tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'two tail p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value_two_tail</span><span class=\"p\">))</span>\n<span class=\"n\">reject_one_tail</span><span class=\"p\">,</span> <span class=\"n\">reject_two_tail</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span> <span class=\"c1\"># 0.01 is the significance level</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject proportion(A, grp1) = proportion(A, grp2) (one-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_one_tail</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject proportion(A, grp1) = proportion(A, grp2) (two-tail) ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject_two_tail</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"independence-testing-between-one-numerical-and-one-categorical-variable-anova\">\n<h3>Independence Testing between One Numerical and One Categorical Variable (ANOVA)</h3>\n<p>The sample code below show how to test whether to reject the hypothesis that a numerical and categorical variable are\nindependent of each other for a population (from which the numerical sample is taken):</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.001</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.02</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_numeric</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mf\">0.003</span><span class=\"p\">,</span> <span class=\"n\">group_id</span><span class=\"o\">=</span><span class=\"s1\">'grp1'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">Anova</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value</span><span class=\"p\">))</span>\n<span class=\"n\">reject</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject [same mean for all groups] ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"independence-testing-between-two-categorical-variables-chi-square-testing\">\n<h3>Independence Testing between Two Categorical Variables (Chi-Square Testing):</h3>\n<p>The sample code below show how to test whether to reject that hypothesis that two categorical variables are independent\nof each other for a population (from which the categorical sampleis taken):</p>\n<pre><span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">Sample</span><span class=\"p\">()</span>\n\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">):</span>\n    <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s1\">'itemA'</span> <span class=\"k\">if</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'itemB'</span><span class=\"p\">,</span> <span class=\"s1\">'group1'</span><span class=\"p\">)</span>\n    <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s1\">'itemA'</span> <span class=\"k\">if</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'itemB'</span><span class=\"p\">,</span> <span class=\"s1\">'group2'</span><span class=\"p\">)</span>\n    <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">add_category</span><span class=\"p\">(</span><span class=\"s1\">'itemA'</span> <span class=\"k\">if</span> <span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">()</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span> <span class=\"k\">else</span> <span class=\"s1\">'itemB'</span><span class=\"p\">,</span> <span class=\"s1\">'group3'</span><span class=\"p\">)</span>\n\n<span class=\"n\">testing</span> <span class=\"o\">=</span> <span class=\"n\">ChiSquare</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">=</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'p-value: '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">p_value</span><span class=\"p\">))</span>\n<span class=\"n\">reject</span> <span class=\"o\">=</span> <span class=\"n\">testing</span><span class=\"o\">.</span><span class=\"n\">will_reject</span><span class=\"p\">(</span><span class=\"mf\">0.01</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'will reject [two categorical variables are independent of each other] ? '</span> <span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">reject</span><span class=\"p\">))</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2952561, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "af4ef13ace4cee5bd32c3ded457ccbc9", "sha256": "c8239116b35be927ebc953f9fcd8a8de1bce86179cc0d56dfe05dc4e82a1d773"}, "downloads": -1, "filename": "pysie-0.0.1.zip", "has_sig": false, "md5_digest": "af4ef13ace4cee5bd32c3ded457ccbc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10446, "upload_time": "2017-06-09T12:00:35", "upload_time_iso_8601": "2017-06-09T12:00:35.849824Z", "url": "https://files.pythonhosted.org/packages/4e/1d/650096e93100a969eefba0a6cbb15864dd4a753180a02e1d6b2a4f826556/pysie-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2be7f5eff45b40269a22a04f3580bf14", "sha256": "e59390138a9c22153e4c51352719c513a497d0085a8b8e75137108a1130760b0"}, "downloads": -1, "filename": "pysie-0.0.2.zip", "has_sig": false, "md5_digest": "2be7f5eff45b40269a22a04f3580bf14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10715, "upload_time": "2017-06-15T16:16:14", "upload_time_iso_8601": "2017-06-15T16:16:14.939716Z", "url": "https://files.pythonhosted.org/packages/14/df/a5b05e190b3a9f9c2b4f5ce5e0ab2d1e280e46959ada1b34c290d1c2fbe0/pysie-0.0.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2be7f5eff45b40269a22a04f3580bf14", "sha256": "e59390138a9c22153e4c51352719c513a497d0085a8b8e75137108a1130760b0"}, "downloads": -1, "filename": "pysie-0.0.2.zip", "has_sig": false, "md5_digest": "2be7f5eff45b40269a22a04f3580bf14", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10715, "upload_time": "2017-06-15T16:16:14", "upload_time_iso_8601": "2017-06-15T16:16:14.939716Z", "url": "https://files.pythonhosted.org/packages/14/df/a5b05e190b3a9f9c2b4f5ce5e0ab2d1e280e46959ada1b34c290d1c2fbe0/pysie-0.0.2.zip", "yanked": false}], "timestamp": "Fri May  8 02:56:55 2020"}