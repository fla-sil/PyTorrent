{"info": {"author": "Michael Conroy", "author_email": "sietekk@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": ".. image:: https://travis-ci.org/sietekk/csv.toolkit.svg?branch=master\n    :target: https://travis-ci.org/sietekk/csv.toolkit\n    :alt: Build Status\n\n.. image:: https://coveralls.io/repos/github/sietekk/csv.toolkit/badge.svg?branch=master\n    :target: https://coveralls.io/github/sietekk/csv.toolkit?branch=master\n    :alt: Coverage\n\n\n********************\nCSV Toolkit Overview\n********************\n\n\n**NOTE: THIS PROJECT HAS SINCE BEEN FORKED TO THE INTERNAL PROMETHEUS\nRESEACH, LLC TOOL PROPS.CSVTOOLKIT**\n\n\nCSV Toolkit is a `Python`_ package that provides validation tooling\nand processing of CSV files. The validation tooling is based on the\nfantastic package `Vladiate`_. The interface and extension mechanisms\nare similarly implemented as the `rex.core`_ extension mechanisms.\n\n.. _`Python`: https://www.python.org\n.. _`Vladiate`: https://github.com/di/vladiate\n.. _`rex.core`: https://bitbucket.org/rexdb/rex.core\n\n.. contents:: Table of Contents\n\n\nExample Usage\n=============\n\nThis packace comes equipped with validation tooling, a CLI, a tooling interface,\na logging mechaism, and a loader mechanism. All are extensible, allow for\nfuture additions of new tools to this package, and the instroduction of custom\ntools depending on this package. This package comes with implementations built\nin as well.\n\n\nValidation Tooling\n******************\n\nThis application comes with a validation tooling mechanism buil-tin. It allows\nfor defining a validation schema to run against a CSV file. This was implemented\ndue to the severe lack of strict validation mechanisms in the Python standard\nlibrary's ``csv`` module. While it does implement the ``csv`` module to some\nextent, it allows for strict validation with an extensible validation mechanism.\nFurthermore, the validation mechanism may be used via the CLI or as a standard,\ninternal validation mechanism for your pacakge.\n\n\nBuilt-In Simple CSV Validator\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIncluded with this package is a simple CSV file validation mechanism to use to\nvalidate simple CSV structures where fields may contain any values or may be\nempty. This is also a good example of how to implement a CSV validation schema\nas an internal tool available to the CLI.\n\nNew Implementations\n^^^^^^^^^^^^^^^^^^^\n\nSubclass the ``BaseFileValidator`` class to create a new CSV validation tool. The\nrequired fields ``validators``, ``delimeter``, ``default_validator``,\n``check_duplicate_headers``, and ``logger`` attributes must be defined. Creating\na new logger for each CSV validating tool is recommended, but not necessary.\n\nAn example bare-bones implementation would be::\n\n    >>> class YourFirstValidatorLogger(Logger):\n    >>>     pass\n    >>>\n    >>> class YourFirstValidator(BaseFileValidator):\n    >>>     validators = {\n    >>>         \"Field1\": [],\n    >>>         \"Field2\": [],\n    >>>         \"Field3\": [],\n    >>>     }\n    >>>     delimiter = \",\"\n    >>>     default_validator = AnyVal\n    >>>     check_duplicate_headers = True\n    >>>     logger = YourFirstValidatorLogger\n    >>>\n    >>>     def validate(self):\n    >>>         ... validation mechanism here...\n    >>>\n    >>> validator = YourFirstValidator(LocalFileLoader('/path/to/example.csv'))\n    >>> print validator.validate()\n    True\n    >>> result = validator()\n    >>> print result.validation\n    True\n    >>> print result.log\n    ... validation log text...\n\nObviously, you may call the ``validate`` property directly without a logger, but\nyou may also call the validator instance, which returns a named tuple ``Result``\nwith ``validation`` and ``log`` attributes.\n\nPlease note, att this time the ``BaseFileValidator`` only supports loggers of the\nbuilt-in type. Pull requests and contributions to change this are more than\nwelcome.\n\nValidator Attribute Definition\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``validators`` attribute must define the validation schema for your type of\nCSV. It must be a dictionary with string keys defining the available columns and\nlist values specifying the validator (with any initialization parameters the\nvalidator requires).\n\nAn example validation schema would look like::\n\n    >>> validators = {\n    >>>     \"Foo\": [\n    >>>         UniqueVal(),\n    >>>     ],\n    >>>     \"Bar\": [\n    >>>         RegexVal(r'^baz$'),\n    >>>     ],\n    >>>     \"hello world\": [\n    >>>         IntVal(empty_ok=True),\n    >>>     ],\n    >>> }\n\nThis schema corresponds to a CSV with headers ``Foo``, ``Bar``, and\n``hello world``. The ``Foo`` column must contain unique values, the ``Bar``\ncolumn must contain fields matching the regular expression ``^baz$``, and the\n``hello world`` column must contain integer values, but allows for empty fields\nas well.\n\nBuilt-In Validators\n^^^^^^^^^^^^^^^^^^^\n\nThis package comes with built-in validators. For example:\n\n- IntVal: Integer values (allows empty values)\n- FloatVal: Float values (allows empty values)\n- BoolVal: Boolean values (allows empty values)\n- EnumVal: Enumerated values::\n\n    EnumVal(['a', 'list', 'of', 'enumerations',])\n\n- UniqueVal: Unique values only\n- RegexVal: Fields must match supplied regex value (or no fields are matched)\n- EmptyVal: All fields must be empty\n- AnyVal: Any allowed values, but not empty\n\n**NOTE:** Inclusion of a JSON validator has not been made at this time, but\npull requests and contributions of an implementation are welcome.\n\n\nLogging\n*******\n\nThe logging mechanism is simple, and records logs to an internal dictionary per\ninstantiation. This allows for easy storage and retrieval of logs and logging\ninformation pertinent to your CSV tool.\n\nOne may use the global logging instance ``logger_main``, the logging context\nmanager ``logger_context``, or subclass the logging implementation ``Logger``\nto create custom logging instances.\n\n\nLoaders\n*******\n\nThe loader mechanism provides an easy tool to work with files and string objects.\nA simple wrapper around a specified ``loader``, working with file-like objects\nbecomes much simpler when working with CSV data.\n\nA user may work with the ``StringLoader`` or ``LocalFileLoader`` classes by\ninstantiating them with a source string or directory. For example::\n\n    >>> mystring = StringLoader(StringIO(\"A test string.\"))\n    >>> teststring = mystring.open()\n    >>> print teststring\n    \"A test string.\"\n\nTo create new loaders, simply subclass the ``Loader`` class, specify a loader\nand any args or kwargs that are necessary for that loader to operate.\n\n\nTooling\n*******\n\nThis package provides a tooling interface to allow automatic discovery of new\ntooling commands for the CLI. Simply subclass the ``Tool`` class to create a\nnew tool, which will be usable via the CLI. Make sure to specify the required\n``name`` attribute. A ``description`` atrribute is very useful, and if your\ntool/command requires it, specify the ``arguments`` attribute.\n\nThe ``implementation`` method must be overriden to tell the application what to\ndo when the command is run or the tool is used internally to an application. The\nfunction must return a ``0`` if successful and a ``1`` or other if not. The\nreturned value is passed to stdout for successes and stderror for failures.\n\n\nArguments\n^^^^^^^^^\n\nThe arguments must be a list of tuples with each touple containing the\nparameters usually passed to the ``argparse.add_argument()`` function. For\nexample, a typical implementation looks like::\n\n    >>> self.parser.add_argument(\n    >>>     \"filename\",\n    >>>     type=argparse.FileType('r'),\n    >>>     help=\"A file.\"\n    >>> )\n\nwhich, for a tool implementation, should be converted too::\n\n    >>> arguments = [\n    >>>     (\n    >>>         'filename',\n    >>>         {'type': argparse.FileType('r')},\n    >>>         {'help': 'A file.'},\n    >>>     ),\n    >>> ]\n\nPlease note that the ``scripts.py`` file (the entry point for the CLI) will\nparse known arguments from the command line, and pass the rest to your tooling\nimplementation.\n\n\nThe CLI\n*******\nThe command line interface automatically discovers all tooling implementations\nsubclassed from the interface ``Tool`` super class. The base command line\nargument is ``csvtoolkit`` with a named parameter. The named parameter is any of\nthe available tooling implementations' ``name`` attribute.\n\nFor example::\n\n    >>> class MyTool(Tool):\n    >>>     name = \"my-super-awesome-tool\"\n    >>>     ... and so on...\n\nThis tooling implementation is available via the CLI with the command::\n\n    $ csvtoolkit my-super-awesome-tool\n\nAgain, please note that the ``scripts.py`` file (the entry point for the CLI)\nwill parse known arguments from the command line, and pass the rest to your\ntooling implementation.\n\n\nContributing\n============\n\nContributions and/or fixes to this package are more than welcome. Please submit\nthem by forking this repository and creating a Pull Request that includes your\nchanges. We ask that you please include unit tests and any appropriate\ndocumentation updates along with your code changes. Code must be `PEP 8`_\ncompliant.\n\nThis project will adhere to the `Semantic Versioning`_ methodology as much as\npossible, so when building dependent projects, please use appropriate version\nrestrictions.\n\n.. _`Semantic Versioning`: http://semver.org\n.. _`PEP 8`: https://www.python.org/dev/peps/pep-0008/\n\nA development environment can be set up to work on this package by doing the\nfollowing::\n\n    $ virtualenv csvtools\n    $ cd csvtools\n    $ . ./bin/activate\n    $ git clone https://github.com/sietekk/csv.toolkit.git\n    $ pip install -e ./csvtools[dev]\n\n\nLicense/Copyright\n=================\n\nThis project is licensed under The MIT License. See the accompanying\n``LICENSE.rst`` file for details.\n\nCopyright (c) 2016, Michael Conroy\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sietekk/csv.toolkit", "keywords": "csv tool validation processing", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "csv.toolkit", "package_url": "https://pypi.org/project/csv.toolkit/", "platform": "", "project_url": "https://pypi.org/project/csv.toolkit/", "project_urls": {"Homepage": "https://github.com/sietekk/csv.toolkit"}, "release_url": "https://pypi.org/project/csv.toolkit/0.1.0/", "requires_dist": ["six (>=1.5,<2)", "pbbt (>=0.1.4,<1); extra == 'dev'", "coverage (>=3.7,<4); extra == 'dev'", "nose (>=1.3,<2); extra == 'dev'", "nosy (>=1.1,<2); extra == 'dev'", "prospector[with_pyroma] (<0.13,>=0.12); extra == 'dev'", "twine (>=1.5,<2); extra == 'dev'", "wheel (<0.25,>=0.24); extra == 'dev'", "Sphinx (>=1.3,<2); extra == 'dev'", "sphinx-autobuild (>=0.5,<0.6); extra == 'dev'", "tox (<3,>=2); extra == 'dev'", "flake8 (>=2.5.0,<3); extra == 'dev'"], "requires_python": "", "summary": "Tools for working with CSV files", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/sietekk/csv.toolkit\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8cb9dad3d65b879bbab0fde3a36404a97f026f70/68747470733a2f2f7472617669732d63692e6f72672f73696574656b6b2f6373762e746f6f6c6b69742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/sietekk/csv.toolkit?branch=master\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca083848f11bdc0b0254ecf5441f82b065d33dbb/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73696574656b6b2f6373762e746f6f6c6b69742f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"csv-toolkit-overview\">\n<h2><a href=\"#id1\" rel=\"nofollow\">CSV Toolkit Overview</a></h2>\n<p><strong>NOTE: THIS PROJECT HAS SINCE BEEN FORKED TO THE INTERNAL PROMETHEUS\nRESEACH, LLC TOOL PROPS.CSVTOOLKIT</strong></p>\n<p>CSV Toolkit is a <a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> package that provides validation tooling\nand processing of CSV files. The validation tooling is based on the\nfantastic package <a href=\"https://github.com/di/vladiate\" rel=\"nofollow\">Vladiate</a>. The interface and extension mechanisms\nare similarly implemented as the <a href=\"https://bitbucket.org/rexdb/rex.core\" rel=\"nofollow\">rex.core</a> extension mechanisms.</p>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#csv-toolkit-overview\" id=\"id1\" rel=\"nofollow\">CSV Toolkit Overview</a><ul>\n<li><a href=\"#example-usage\" id=\"id2\" rel=\"nofollow\">Example Usage</a><ul>\n<li><a href=\"#validation-tooling\" id=\"id3\" rel=\"nofollow\">Validation Tooling</a><ul>\n<li><a href=\"#built-in-simple-csv-validator\" id=\"id4\" rel=\"nofollow\">Built-In Simple CSV Validator</a></li>\n<li><a href=\"#new-implementations\" id=\"id5\" rel=\"nofollow\">New Implementations</a></li>\n<li><a href=\"#validator-attribute-definition\" id=\"id6\" rel=\"nofollow\">Validator Attribute Definition</a></li>\n<li><a href=\"#built-in-validators\" id=\"id7\" rel=\"nofollow\">Built-In Validators</a></li>\n</ul>\n</li>\n<li><a href=\"#logging\" id=\"id8\" rel=\"nofollow\">Logging</a></li>\n<li><a href=\"#loaders\" id=\"id9\" rel=\"nofollow\">Loaders</a></li>\n<li><a href=\"#tooling\" id=\"id10\" rel=\"nofollow\">Tooling</a><ul>\n<li><a href=\"#arguments\" id=\"id11\" rel=\"nofollow\">Arguments</a></li>\n</ul>\n</li>\n<li><a href=\"#the-cli\" id=\"id12\" rel=\"nofollow\">The CLI</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" id=\"id13\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license-copyright\" id=\"id14\" rel=\"nofollow\">License/Copyright</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"example-usage\">\n<h3><a href=\"#id2\" rel=\"nofollow\">Example Usage</a></h3>\n<p>This packace comes equipped with validation tooling, a CLI, a tooling interface,\na logging mechaism, and a loader mechanism. All are extensible, allow for\nfuture additions of new tools to this package, and the instroduction of custom\ntools depending on this package. This package comes with implementations built\nin as well.</p>\n<div id=\"validation-tooling\">\n<h4><a href=\"#id3\" rel=\"nofollow\">Validation Tooling</a></h4>\n<p>This application comes with a validation tooling mechanism buil-tin. It allows\nfor defining a validation schema to run against a CSV file. This was implemented\ndue to the severe lack of strict validation mechanisms in the Python standard\nlibrary\u2019s <tt>csv</tt> module. While it does implement the <tt>csv</tt> module to some\nextent, it allows for strict validation with an extensible validation mechanism.\nFurthermore, the validation mechanism may be used via the CLI or as a standard,\ninternal validation mechanism for your pacakge.</p>\n<div id=\"built-in-simple-csv-validator\">\n<h5><a href=\"#id4\" rel=\"nofollow\">Built-In Simple CSV Validator</a></h5>\n<p>Included with this package is a simple CSV file validation mechanism to use to\nvalidate simple CSV structures where fields may contain any values or may be\nempty. This is also a good example of how to implement a CSV validation schema\nas an internal tool available to the CLI.</p>\n</div>\n<div id=\"new-implementations\">\n<h5><a href=\"#id5\" rel=\"nofollow\">New Implementations</a></h5>\n<p>Subclass the <tt>BaseFileValidator</tt> class to create a new CSV validation tool. The\nrequired fields <tt>validators</tt>, <tt>delimeter</tt>, <tt>default_validator</tt>,\n<tt>check_duplicate_headers</tt>, and <tt>logger</tt> attributes must be defined. Creating\na new logger for each CSV validating tool is recommended, but not necessary.</p>\n<p>An example bare-bones implementation would be:</p>\n<pre>&gt;&gt;&gt; class YourFirstValidatorLogger(Logger):\n&gt;&gt;&gt;     pass\n&gt;&gt;&gt;\n&gt;&gt;&gt; class YourFirstValidator(BaseFileValidator):\n&gt;&gt;&gt;     validators = {\n&gt;&gt;&gt;         \"Field1\": [],\n&gt;&gt;&gt;         \"Field2\": [],\n&gt;&gt;&gt;         \"Field3\": [],\n&gt;&gt;&gt;     }\n&gt;&gt;&gt;     delimiter = \",\"\n&gt;&gt;&gt;     default_validator = AnyVal\n&gt;&gt;&gt;     check_duplicate_headers = True\n&gt;&gt;&gt;     logger = YourFirstValidatorLogger\n&gt;&gt;&gt;\n&gt;&gt;&gt;     def validate(self):\n&gt;&gt;&gt;         ... validation mechanism here...\n&gt;&gt;&gt;\n&gt;&gt;&gt; validator = YourFirstValidator(LocalFileLoader('/path/to/example.csv'))\n&gt;&gt;&gt; print validator.validate()\nTrue\n&gt;&gt;&gt; result = validator()\n&gt;&gt;&gt; print result.validation\nTrue\n&gt;&gt;&gt; print result.log\n... validation log text...\n</pre>\n<p>Obviously, you may call the <tt>validate</tt> property directly without a logger, but\nyou may also call the validator instance, which returns a named tuple <tt>Result</tt>\nwith <tt>validation</tt> and <tt>log</tt> attributes.</p>\n<p>Please note, att this time the <tt>BaseFileValidator</tt> only supports loggers of the\nbuilt-in type. Pull requests and contributions to change this are more than\nwelcome.</p>\n</div>\n<div id=\"validator-attribute-definition\">\n<h5><a href=\"#id6\" rel=\"nofollow\">Validator Attribute Definition</a></h5>\n<p>The <tt>validators</tt> attribute must define the validation schema for your type of\nCSV. It must be a dictionary with string keys defining the available columns and\nlist values specifying the validator (with any initialization parameters the\nvalidator requires).</p>\n<p>An example validation schema would look like:</p>\n<pre>&gt;&gt;&gt; validators = {\n&gt;&gt;&gt;     \"Foo\": [\n&gt;&gt;&gt;         UniqueVal(),\n&gt;&gt;&gt;     ],\n&gt;&gt;&gt;     \"Bar\": [\n&gt;&gt;&gt;         RegexVal(r'^baz$'),\n&gt;&gt;&gt;     ],\n&gt;&gt;&gt;     \"hello world\": [\n&gt;&gt;&gt;         IntVal(empty_ok=True),\n&gt;&gt;&gt;     ],\n&gt;&gt;&gt; }\n</pre>\n<p>This schema corresponds to a CSV with headers <tt>Foo</tt>, <tt>Bar</tt>, and\n<tt>hello world</tt>. The <tt>Foo</tt> column must contain unique values, the <tt>Bar</tt>\ncolumn must contain fields matching the regular expression <tt>^baz$</tt>, and the\n<tt>hello world</tt> column must contain integer values, but allows for empty fields\nas well.</p>\n</div>\n<div id=\"built-in-validators\">\n<h5><a href=\"#id7\" rel=\"nofollow\">Built-In Validators</a></h5>\n<p>This package comes with built-in validators. For example:</p>\n<ul>\n<li><p>IntVal: Integer values (allows empty values)</p>\n</li>\n<li><p>FloatVal: Float values (allows empty values)</p>\n</li>\n<li><p>BoolVal: Boolean values (allows empty values)</p>\n</li>\n<li><p>EnumVal: Enumerated values:</p>\n<pre>EnumVal(['a', 'list', 'of', 'enumerations',])\n</pre>\n</li>\n<li><p>UniqueVal: Unique values only</p>\n</li>\n<li><p>RegexVal: Fields must match supplied regex value (or no fields are matched)</p>\n</li>\n<li><p>EmptyVal: All fields must be empty</p>\n</li>\n<li><p>AnyVal: Any allowed values, but not empty</p>\n</li>\n</ul>\n<p><strong>NOTE:</strong> Inclusion of a JSON validator has not been made at this time, but\npull requests and contributions of an implementation are welcome.</p>\n</div>\n</div>\n<div id=\"logging\">\n<h4><a href=\"#id8\" rel=\"nofollow\">Logging</a></h4>\n<p>The logging mechanism is simple, and records logs to an internal dictionary per\ninstantiation. This allows for easy storage and retrieval of logs and logging\ninformation pertinent to your CSV tool.</p>\n<p>One may use the global logging instance <tt>logger_main</tt>, the logging context\nmanager <tt>logger_context</tt>, or subclass the logging implementation <tt>Logger</tt>\nto create custom logging instances.</p>\n</div>\n<div id=\"loaders\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Loaders</a></h4>\n<p>The loader mechanism provides an easy tool to work with files and string objects.\nA simple wrapper around a specified <tt>loader</tt>, working with file-like objects\nbecomes much simpler when working with CSV data.</p>\n<p>A user may work with the <tt>StringLoader</tt> or <tt>LocalFileLoader</tt> classes by\ninstantiating them with a source string or directory. For example:</p>\n<pre>&gt;&gt;&gt; mystring = StringLoader(StringIO(\"A test string.\"))\n&gt;&gt;&gt; teststring = mystring.open()\n&gt;&gt;&gt; print teststring\n\"A test string.\"\n</pre>\n<p>To create new loaders, simply subclass the <tt>Loader</tt> class, specify a loader\nand any args or kwargs that are necessary for that loader to operate.</p>\n</div>\n<div id=\"tooling\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Tooling</a></h4>\n<p>This package provides a tooling interface to allow automatic discovery of new\ntooling commands for the CLI. Simply subclass the <tt>Tool</tt> class to create a\nnew tool, which will be usable via the CLI. Make sure to specify the required\n<tt>name</tt> attribute. A <tt>description</tt> atrribute is very useful, and if your\ntool/command requires it, specify the <tt>arguments</tt> attribute.</p>\n<p>The <tt>implementation</tt> method must be overriden to tell the application what to\ndo when the command is run or the tool is used internally to an application. The\nfunction must return a <tt>0</tt> if successful and a <tt>1</tt> or other if not. The\nreturned value is passed to stdout for successes and stderror for failures.</p>\n<div id=\"arguments\">\n<h5><a href=\"#id11\" rel=\"nofollow\">Arguments</a></h5>\n<p>The arguments must be a list of tuples with each touple containing the\nparameters usually passed to the <tt>argparse.add_argument()</tt> function. For\nexample, a typical implementation looks like:</p>\n<pre>&gt;&gt;&gt; self.parser.add_argument(\n&gt;&gt;&gt;     \"filename\",\n&gt;&gt;&gt;     type=argparse.FileType('r'),\n&gt;&gt;&gt;     help=\"A file.\"\n&gt;&gt;&gt; )\n</pre>\n<p>which, for a tool implementation, should be converted too:</p>\n<pre>&gt;&gt;&gt; arguments = [\n&gt;&gt;&gt;     (\n&gt;&gt;&gt;         'filename',\n&gt;&gt;&gt;         {'type': argparse.FileType('r')},\n&gt;&gt;&gt;         {'help': 'A file.'},\n&gt;&gt;&gt;     ),\n&gt;&gt;&gt; ]\n</pre>\n<p>Please note that the <tt>scripts.py</tt> file (the entry point for the CLI) will\nparse known arguments from the command line, and pass the rest to your tooling\nimplementation.</p>\n</div>\n</div>\n<div id=\"the-cli\">\n<h4><a href=\"#id12\" rel=\"nofollow\">The CLI</a></h4>\n<p>The command line interface automatically discovers all tooling implementations\nsubclassed from the interface <tt>Tool</tt> super class. The base command line\nargument is <tt>csvtoolkit</tt> with a named parameter. The named parameter is any of\nthe available tooling implementations\u2019 <tt>name</tt> attribute.</p>\n<p>For example:</p>\n<pre>&gt;&gt;&gt; class MyTool(Tool):\n&gt;&gt;&gt;     name = \"my-super-awesome-tool\"\n&gt;&gt;&gt;     ... and so on...\n</pre>\n<p>This tooling implementation is available via the CLI with the command:</p>\n<pre>$ csvtoolkit my-super-awesome-tool\n</pre>\n<p>Again, please note that the <tt>scripts.py</tt> file (the entry point for the CLI)\nwill parse known arguments from the command line, and pass the rest to your\ntooling implementation.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Contributing</a></h3>\n<p>Contributions and/or fixes to this package are more than welcome. Please submit\nthem by forking this repository and creating a Pull Request that includes your\nchanges. We ask that you please include unit tests and any appropriate\ndocumentation updates along with your code changes. Code must be <a href=\"https://www.python.org/dev/peps/pep-0008/\" rel=\"nofollow\">PEP 8</a>\ncompliant.</p>\n<p>This project will adhere to the <a href=\"http://semver.org\" rel=\"nofollow\">Semantic Versioning</a> methodology as much as\npossible, so when building dependent projects, please use appropriate version\nrestrictions.</p>\n<p>A development environment can be set up to work on this package by doing the\nfollowing:</p>\n<pre>$ virtualenv csvtools\n$ cd csvtools\n$ . ./bin/activate\n$ git clone https://github.com/sietekk/csv.toolkit.git\n$ pip install -e ./csvtools[dev]\n</pre>\n</div>\n<div id=\"license-copyright\">\n<h3><a href=\"#id14\" rel=\"nofollow\">License/Copyright</a></h3>\n<p>This project is licensed under The MIT License. See the accompanying\n<tt>LICENSE.rst</tt> file for details.</p>\n<p>Copyright (c) 2016, Michael Conroy</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2276685, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "36e5072d520dd52acb2b1739b772a7c5", "sha256": "33c56ca3b7f55abecd02463401cc9b7824dfd87cf1b8ba3ca1c9b5f47163cb8c"}, "downloads": -1, "filename": "csv.toolkit-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36e5072d520dd52acb2b1739b772a7c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21207, "upload_time": "2016-08-11T19:34:11", "upload_time_iso_8601": "2016-08-11T19:34:11.320259Z", "url": "https://files.pythonhosted.org/packages/b6/7c/97a655bd20389a76b6dfa8845659f9c85986e5ede61a6bae630d52d6ed2a/csv.toolkit-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f12089f8f95da809668e9b4768313f7", "sha256": "b4a104a045258d5866f0475b51f48ab87b41ca3f25332e5c068c6ae20520b018"}, "downloads": -1, "filename": "csv.toolkit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3f12089f8f95da809668e9b4768313f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16755, "upload_time": "2016-08-11T19:34:13", "upload_time_iso_8601": "2016-08-11T19:34:13.463174Z", "url": "https://files.pythonhosted.org/packages/2a/cc/d76ab72039b1bcb0576b313c303daee4e175aa0cb27d4ce5b32a4ae3f4ed/csv.toolkit-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36e5072d520dd52acb2b1739b772a7c5", "sha256": "33c56ca3b7f55abecd02463401cc9b7824dfd87cf1b8ba3ca1c9b5f47163cb8c"}, "downloads": -1, "filename": "csv.toolkit-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "36e5072d520dd52acb2b1739b772a7c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21207, "upload_time": "2016-08-11T19:34:11", "upload_time_iso_8601": "2016-08-11T19:34:11.320259Z", "url": "https://files.pythonhosted.org/packages/b6/7c/97a655bd20389a76b6dfa8845659f9c85986e5ede61a6bae630d52d6ed2a/csv.toolkit-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f12089f8f95da809668e9b4768313f7", "sha256": "b4a104a045258d5866f0475b51f48ab87b41ca3f25332e5c068c6ae20520b018"}, "downloads": -1, "filename": "csv.toolkit-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3f12089f8f95da809668e9b4768313f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16755, "upload_time": "2016-08-11T19:34:13", "upload_time_iso_8601": "2016-08-11T19:34:13.463174Z", "url": "https://files.pythonhosted.org/packages/2a/cc/d76ab72039b1bcb0576b313c303daee4e175aa0cb27d4ce5b32a4ae3f4ed/csv.toolkit-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:39 2020"}