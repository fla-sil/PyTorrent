{"info": {"author": "Marciano Barros", "author_email": "marciano.barros@pestana.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Topic :: Database"], "description": "# Python4DBI\n\n###### In Memory Of Edson de Sousa (14/04/94 - 16/08/18), i will see you again\n\n## Table of contents\n* [General info](#general-info)\n* [Technologies](#technologies)\n* [Setup](#setup)\n* [API](#api)\n\t* [Cursor](#cursor)\n\t\t* [Properties](#properties)\n\t\t\t* [row_number](#row_number)\n\t\t\t* [row_count](#row_count)\n\t\t\t* [description](#description)\n\t\t* [Methods](#methods)\n\t\t\t* [close](#close)\n\t\t\t* [prepare_statement](#prepare_statement)\n\t\t\t* [set_input_sizes](#set_input_sizes)\n\t\t\t* [set_output_size](#set_output_size)\n\t\t\t* [execute](#execute)\n\t\t\t* [fetch_one](#fetch_one)\n\t\t\t* [fetch_many](#fetch_many)\n\t\t\t* [fetch_all](#fetch_all)\n\t\t\t* [start_transaction](#start_transaction)\n\t\t\t* [cancel_transaction](#cancel_transaction)\n\t\t\t* [rollback](#rollback)\n\t\t\t* [commit](#commit)\n\t\t\t* [validate_transaction](#validate_transaction)\n\t\t\t* [send_messages_in_base_64](#send_messages_in_base_64)\n\t\t\t* [set_protocol_version](#set_protocol_version)\n\t\t\t* [set_preferred_image_types](#set_preferred_image_types)\n\t\t\t* [set_fmt](#set_fmt)\n\t\t\t* [print_result](#print_result)\n\t* [Database Interface](#database-interface)\n\t\t* [Methods](#methods-1)\n\t\t\t* [connect](#connect)\n\t\t\t* [close](#close-1)\n\t\t\t* [cursor](#cursor-1)\n\t\t\t* [connected](#connected)\n\t\t\t* [get_socket](#get_socket)\n\t\t\t* [get_socket_timeout](#get_socket_timeout)\n\t\t\t* [get_host](#get_host)\n\t\t\t* [get_port](#get_port)\n\t\t\t* [get_user](#get_user)\n\t\t\t* [get_password](#get_password)\n\t\t\t* [get_logger](#get_logger)\n\n* [Examples](#example)\n\n## General info\n* 4D is an incredibly productive development platform that lets you focus on your data model and your business rules.\n* The 4D framework takes care of running your application code natively on macOS and Windows.\n* The 4DBI is written in pure python and allows a python program to use SQL to access one or more databases from a \nsingle application without using the 4D ODBC driver.\n* 4D and 4D Server both provide a native SQL server that enables this functionality.\n\n## Technologies\nProject is created with:\n* Python\n* texttable - https://github.com/foutaise/texttable/\n\n\n## Setup\nTo run this project, install it locally using pip:\n\n```\n$ pip install python4DBI\n```\n\n## API\n### Cursor\n\nIt consists of pure application logic, which interacts with the database.\nIt includes all the information to represent data to the end user.\n\n#### Properties\n###### row_number\n\n\t\tReturn: int or None\n\nThis read-only attribute provides the current 0-based index of the cursor in the result set\nor None if the index cannot be determined\n\n\n###### row_count\n\n\t\tReturn: int\n\nThis read-only attribute specifies the number of rows that the last .execute*()\n\n###### description\n\n\t\tReturn: List\n\nA Cursor object's description attribute returns information about each of the result columns of a query.\n\n\n#### Methods\n###### close\n\n\t\tReturn: None\n\nClose the current 4D SQL server cursor\n\n###### prepare_statement\n\n\t\tParams: query ( str )\n\t\tReturn: int\n\nChecks if the statement is valid should always be execute before an execute statement\nreturns FOURD_OK or FOURD_ERROR\n\n###### set_input_sizes\n\n**Not implemented!**\n\n\t\tParams: size ( int )\n\t\tReturn: None\n\nThis can be used before a call to .execute*() to predefine memory areas for the operation's parameters.\n\n###### set_output_size\n\n**Not implemented!**\n\n\t\tParams: size ( int )\n\t\tReturn: None\n\nSet a column buffer size for fetches of large columns (e.g. LONGs, BLOBs, etc.).\nthe column is specified as an index into the result sequence.\nNot specifying the column will set the default size for all large columns in the cursor.\n\n###### execute\n\n\t\tParams: query (str), params (dict), page_size (int), on_before_execute (funtion), on_executed (funtion), *args, **kwargs\n\t\tReturn: None\n\nPrepare and execute a database operation (query or command).\n\n###### fetch_one\n\n\n\t\tReturn: List or None\n\nFetch the next row of a query result set, returning a single sequence, or None when no more data is available.\n\n###### fetch_many\n\n\t\tParams: size (int)\n\t\tReturn: Two-dimensional List or None\n\nFetch the next set of rows of a query result, returning a sequence of sequences (e.g. a list of tuples).\nAn empty sequence is returned when no more rows are available.\n\n###### fetch_all\n\n\t\tReturn: Two-dimensional List or None\n\nFetch all (remaining) rows of a query result.\nNote that the cursor's array size attribute can affect the performance of this operation.\n\n\n###### start_transaction\n\n\t\tReturn: None\n\nOpens a transaction\n\n###### cancel_transaction\n\n\t\tReturn: None\n\nRollback an open transaction\nSame operation as rollback method\n\n###### rollback\n\n\t\tReturn: None\n\nRollback an open transaction\nSame operation as cancel_transaction method\n\n###### commit\n\n\t\tReturn: None\n\nCommits an open transaction\nSame operation as validate_transaction method\n\n###### validate_transaction\n\n\t\tReturn: None\n\nCommits an open transaction\nSame operation as commit method\n\n###### send_messages_in_base_64\n\n\t\tParams: use_b64 (bool)\n\t\tReturn: None\n\nSets the base 64 mode\n\n###### set_protocol_version\n\n\t\tParams: protocol_version (str)\n\t\tReturn: None\n\nSets the 4D SQL server protocol version\n\n###### set_preferred_image_types\n\n\t\tParams: preferred_image_types (str)\n\t\tReturn: None\n\nSets the preferred image type\n>Currently only supports 'png' pr 'jpg' formats\n\n###### set_fmt\n\n\n\t\tParams: fmt (str)\n\t\tReturn: None\n\nPrints a 4D SQL server cursor result\n\nSets the type of binary architecture\n>Currently supports the following formats:\n>\n>'<' little-endian for MAC OS X - RVLB\n>\n>'>'\tbig-endian for Windows - BLVR\n\n###### print_result\n\n\t\tParams: headers (List), rows (List), max_width (int), logger(obj)\n\t\tReturn: None\n\n### Database Interface\n\nIt acts as an intermediary between view and model\n\n#### Methods\n###### connect\n\n\t\tParams:\t** kwargs\n\t\tReturn: None\n\nOpens a socket connection to the 4D SQL Server\n\nkwargs supported are:\n\n* socket_timeout : int (default 10)\n* dsn : str (default '')\n* host : str (default '127.0.0.1')\n* port : int (default 19812)\n* user : str (default '')\n* password : str (default '')\n\n###### close\n\n\t\tReturn: None\n\nCloses the current 4D SQL server socket connection\n\n###### cursor\n\n\t\tReturn: _python4DCursor object\n\nReturns a 4D SQL server cursor object\n\n###### connected\n\n\t\t\tReturn: bool\n\nReturns true if the socket is connected to the 4D SQL server and false otherwise\n\n###### get_socket\n\n\t\tReturn: self._socket object\n\nReturns the current socket object\n\n###### get_socket_timeout\n\n\t\tReturn: int\n\nReturns the current socket timeout\n\n###### get_host\n\n\t\tReturn: str\n\nReturns the current to 4D SQL server host\n\n###### get_port\n\n\t\tReturn: int\n\nReturns the current to 4D SQL server port\n\n###### get_user\n\n\t\tReturn: str\n\nReturns the current to 4D SQL server user\n\n###### get_password\n\n\t\tReturn: str\n\nReturns the current to 4D SQL server password\n\n###### get_logger\n\n\t\tReturn: str\n\nReturns the logger object\n\n## Example\n\n```python\n\nimport time\nfrom python4DBI.python4DBI import python4DBI\n\ncon = python4DBI()\ncon.connect(user='theUser', password='thePassword')\ncursor = con.cursor()\n\nt0 = time.time()\ncursor.execute(query='SELECT * FROM EMPLOYEES')\nif cursor.row_count > 0:\n    result = cursor.fetch_all()\n    con.print_result(headers=cursor.description, rows=result)\nt1 = time.time()\ntotal = t1-t0\n```\n```\n+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n| EmployeeID | Last   | Name     | First    | Name     | Address1 | Address2 | Zip      | Code      | City | Country | Telephone | Mobile | Phone | Birth | Date |\n+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n| 1          | Barros | Marciano | Address1 | Address2 | 9000     | FUNCHAL  | Portugal | 3.510e+09 |      | None    |           | None   | None  |       |      |\n+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n\nExecution time : 0.022388219833374023\n```\n\n## Template example 1\n```python\n\"\"\"\nLearn how to open a connection to the 4D SQL Server.\n\"\"\"\n\n # Instantiate a connection object\n    con = python4DBI()\n\n    # Authentication\n    con.connect(user='theUser', password='thePassword')\n\n    # Check if the socket is connected\n    if con.connected() is True:\n        # Do stuff\n        pass\n\n    # Close the socket connection\n    con.close()\n\n```\n\n## Template example 2\n```python\n\"\"\"\nLearn to open a connection to the 4D SQL Server and handle the exceptions.\n    \nTo learn more about the exceptions raised at a particular method please read the doc strings.\n    \nFor example:\n- help(python4DBI) will print the documentation for the 4DBI interface\n- help(python4DBI.__init) will print the documentation for the 4DBI constructor.\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n    except OperationalError:\n        # Handle error\n        con = None\n    except Exception as e:\n        # Handle error\n        con = None\n    \n    if con:\n\n        try:\n            # Authentication\n            con.connect(user='theUser', password='thePassword')\n        except ProgrammingError:\n            # Handle error\n            pass\n        except OperationalError:\n            # Handle error\n            pass\n        except Exception as e:\n            # Handle error\n            pass\n\n        if con.connected():\n            # Do stuff\n            pass\n\n        try:\n            # Close the socket connection\n            con.close()\n        except Exception as e:\n            # Handle error\n            pass    \n```\n\n## Template example 3\n```python \n\"\"\"\nAs we have seen in previous examples handling errors will exponentiate the number of try/except cases\nbecause every function on the DBI will have the potential of raising errors in this example I will show \nhow to simplify the 'try catch' with the usage of superclass's.\n\n4DBI Error Classes List\n     StandardError\n     |__Warning\n     |__Error\n        |__InterfaceError\n        |__DatabaseError\n           |__DataError\n           |__OperationalError\n           |__IntegrityError\n           |__InternalError\n           |__ProgrammingError\n           |__NotSupportedError\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Do stuff\n            pass\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle warning\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass    \n```\n\n## Template example 4\n```python\n\"\"\"\nI will show how to change the standard logging file and level.\n    \nNote: All exception raised are logged before being raised.\nThe default logging file is \"python4DBI.log\" and the default level is CRITICAL.\nThe 'logging_file' should be the absolute file path by default is the same path as the module.\nBe careful enabling DEBUG level logging, will make the DBI slower, because every iteration with\nthe DB will be logged and such configuration is not recommended for production environments.\n\"\"\"\n\n    try:\n        # Instantiate a connection object with custom logging level and log location\n        con = python4DBI(logging_level=logging.DEBUG, logging_file='../python4DBI.log')\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Do stuff\n            pass\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass\n```\n\n## Template example 5\n```python\n\"\"\"\nGetting a 4D cursor.\n    \nThe 4D cursor database cursor is a control structure that enables traversal over the records in a database. \nCursors facilitate subsequent processing in conjunction with the traversal, such as retrieval, addition \nand removal of database records. \n\nCursors are used by database programmers to process individual rows returned by database system queries. \nCursors enable manipulation of whole result sets at once.\n\nNote: Normally a cursor can be viewed as a pointer to one row in a set of rows. \nThe cursor can only reference one row at a time, but can move to other rows of the result set as needed.\nIn this DBI was not possible to implement such behavior so every time you execute an SQL command you will\nreceive the result set in a Python list, if there is a need to update or operate directly at the DB \nlevel you need to make use of the 'SELECT FOR UPDATE' clause on the specific row/record.\n\"\"\"\n\n    try:\n        # Instantiate a connection object with custom logging level and log location\n        con = python4DBI(logging_level=logging.DEBUG, logging_file='../python4DBI.log')\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Get cursor\n            cursor = con.cursor()\n\n            # Do stuff\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass\n```\n\n## Template example 6\n```python\n\"\"\"\nPrepare an SQL statement.\n    \nIt is a good practice before executing an SQL statement to make a validation.\nThis command will return false if the SQL statement is not valid and true otherwise.\n    \nNote: If the programmer does not validate the SQL statement the DBI always validates the the query before\nexecuting the difference is that on the execute the DBI will raise an error.\n\"\"\"\n\n    try:\n        # Instantiate a connection object with custom logging level and log location\n        con = python4DBI(logging_level=logging.DEBUG, logging_file='../python4DBI.log')\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'SELECT * FROM EMPLOYEES'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n                # Do stuff\n                pass\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass\n```\n\n## Template example 7\n```python\n\"\"\"\nExecute an SQL statement.\n    \nNote: After executing an SQL statement the programmer can use the row_count to check the\nnumber of result rows. The 'fetch_all' is not always the best approach since it can result\nin a slower fetch imagine that the size of the result set is 100000 rows, that means that the\nreturn list will be a list of size 100000! \nIn such cases the programmer can use the 'fetch_one' will return only the first row or the\n'fetch_many'.\n    \nThe are some caveats regarding the way that the DBI works internally since the 4D SQL protocol\nputs the result page in a buffer every time you execute an SQL statement the DBI will fetch by default\na page size of 100 rows i.e. imagine if you use execute a statement then a 'fetch_one' internally the\nDBI will fetch the first page i.e. at least 100 rows, if the programmer knows before hand that it only needs\nthe first N records than it is more efficient to execute the SQL statement with a page size of N.\n\"\"\"\n\n    try:\n        # Instantiate a connection object with custom logging level and log location\n        con = python4DBI(logging_level=logging.DEBUG, logging_file='../python4DBI.log')\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'SELECT * FROM EMPLOYEES'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                # Execute the query\n                cursor.execute(query=query)\n\n                # Check the results\n                if cursor.row_count > 0:\n\n                    # Fetch all the results\n                    result_rows = cursor.fetch_all()\n\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass   \n```\n\n## Template example 8\n```python\n\"\"\"\nPrinting results to the console.\n    \nNote: Every time you execute the an SQL statement the DBI will create a list of the row headers with tha name\nof the DB columns, the programmer can use 'description' for such purposes.\nThe 'print_result' is implemented on the DBI and will provide a 'terminal/console' way to see the results formatted\ninto a table, and can be usefully for debugging purposes.\n\"\"\"\n\n    try:\n        con = python4DBI(logging_level=logging.DEBUG, logging_file='../python4DBI.log')\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n        if con.connected():\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'SELECT * FROM EMPLOYEES'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                # Execute the query\n                cursor.execute(query=query)\n\n                # Check the results\n                if cursor.row_count > 0:\n\n                    # Fetch all the results\n                    result_rows = cursor.fetch_all()\n\n                    # Print result page to console\n                    cursor.print_result(headers=cursor.description, rows=result_rows)\n\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass\n```\n\n## Template example 9\n```python\n\"\"\"\nUsing params in SQL statements.\nUsing transactions.\n    \nNote: Normally a DBI will implement only on or tow ways of using param styles in SQL queries, on\nthis DBI is available qmark, name, format and pyformat.\n    \nqmark\t- Question mark style, e.g. ...WHERE name=?\nnamed\t- Named style, e.g. ...WHERE name=:name\nformat - ANSI C printf format codes, e.g. ...WHERE name=%s\npyformat - Python extended format codes, e.g. ...WHERE name=%(name)s\n    \nIt can be used only one type of param style per query!\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n\n        # Check if the socket is connected\n        if con.connected() is True:\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'INSERT INTO EMPLOYEES (EmployeeID, City) VALUES(:id, :city)'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                # Start a transaction\n                cursor.start_transaction()\n\n                for i in range(1, 100):\n                    params = {'id': str(i),\n                              'city': fake.city(),\n                              'Date': fake.date()\n                              }\n                    cursor.execute(query=query, params=params)\n\n                # Commit the transaction\n                cursor.commit()\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Warning as e:\n        # Handle error\n        pass\n    except Error as e:\n        # Handle error\n        pass\n    except Exception as e:\n        # Handle error\n        pass\n```\n\n## Example 1\n```python\n\"\"\"\nTime of execution for multiple results.\n    \nNote: This examples use the 4D DB that is available at the project level if you wish\nto do the same tests please use this DB project.\nIf you need to seed the DB with data please use the 'Example 3'.\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n\n        # Check if the socket is connected\n        if con.connected() is True:\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'SELECT * FROM EMPLOYEES'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                t0 = time.time()\n\n                # Execute the query\n                cursor.execute(query=query)\n\n                # Check the results\n                if cursor.row_count > 0:\n\n                    # Fetch all the results\n                    result = cursor.fetch_all()\n\n                t1 = time.time()\n                total = round(t1 - t0, 4)\n                print('Execution time : {} seconds'.format(total))\n\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Exception as e:\n        print(\"Can not continue - reason : {}\".format(e))\n```\n\n## Example 2\n```python\n\"\"\"\nTime of execution for single result.\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n\n        # Check if the socket is connected\n        if con.connected() is True:\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'SELECT EmployeeID FROM EMPLOYEES WHERE EmployeeID = :id'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                t0 = time.time()\n\n                # Execute the query\n                cursor.execute(query=query, params={'id': '1'})\n\n                # Check the results\n                if cursor.row_count > 0:\n                    # Fetch all the results\n                    result = cursor.fetch_all()\n\n                t1 = time.time()\n                total = round(t1 - t0, 4)\n                print('Execution time : {} seconds'.format(total))\n\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Exception as e:\n        print(\"Can not continue - reason : {}\".format(e))\n```\n\n## Example 3\n```python\n\"\"\"\nDB data seed.\n\"\"\"\n\n    try:\n        # Instantiate a connection object\n        con = python4DBI()\n\n        # Authentication\n        con.connect(user='theUser', password='thePassword')\n\n        # Check if the socket is connected\n        if con.connected() is True:\n            # Get cursor\n            cursor = con.cursor()\n\n            # Prepare the statement i.e check if it OK for execution\n            query = 'INSERT INTO EMPLOYEES (EmployeeID, Address1, Address2, City) ' \\\n                    'VALUES (:EmployeeID, :Address1, :Address2, :City)'\n            result = cursor.prepare_statement(query=query)\n            if result is FOURD_OK:\n\n                for i in range(0, 1000):\n                    _id = str(i+1)\n                    _name = fake.name()\n                    _first_name = _name.split()[:1]\n                    _last_name = _name.split()[-1:]\n                    _address1 = fake.address()\n                    _address2 = fake.address()\n                    _zipcode = fake.zipcode()\n                    _city = fake.city()\n                    _country = fake.country()\n                    _phone = fake.phone_number()\n\n                    # Execute the query\n                    params = {'EmployeeID': _id,\n                              'Address1': _address1,\n                              'Address2': _address2,\n                              'City': _city,\n                              }\n                    cursor.execute(query=query, params=params)\n\n            else:\n                # Handle wrong statement\n                pass\n\n            # Close cursor\n            cursor.close()\n\n        # Close the socket connection\n        con.close()\n\n    except Exception as e:\n        print(\"Can not continue - reason : {}\".format(e))\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/marcianobarros/python4dbi", "keywords": "datababase drivers DBI dbi 4D 4d", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python4DBI", "package_url": "https://pypi.org/project/python4DBI/", "platform": "", "project_url": "https://pypi.org/project/python4DBI/", "project_urls": {"Homepage": "https://gitlab.com/marcianobarros/python4dbi"}, "release_url": "https://pypi.org/project/python4DBI/1.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "The python 4DBI", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python4DBI</h1>\n<h6>In Memory Of Edson de Sousa (14/04/94 - 16/08/18), i will see you again</h6>\n<h2>Table of contents</h2>\n<ul>\n<li>\n<p><a href=\"#general-info\" rel=\"nofollow\">General info</a></p>\n</li>\n<li>\n<p><a href=\"#technologies\" rel=\"nofollow\">Technologies</a></p>\n</li>\n<li>\n<p><a href=\"#setup\" rel=\"nofollow\">Setup</a></p>\n</li>\n<li>\n<p><a href=\"#api\" rel=\"nofollow\">API</a></p>\n<ul>\n<li><a href=\"#cursor\" rel=\"nofollow\">Cursor</a>\n<ul>\n<li><a href=\"#properties\" rel=\"nofollow\">Properties</a>\n<ul>\n<li><a href=\"#row_number\" rel=\"nofollow\">row_number</a></li>\n<li><a href=\"#row_count\" rel=\"nofollow\">row_count</a></li>\n<li><a href=\"#description\" rel=\"nofollow\">description</a></li>\n</ul>\n</li>\n<li><a href=\"#methods\" rel=\"nofollow\">Methods</a>\n<ul>\n<li><a href=\"#close\" rel=\"nofollow\">close</a></li>\n<li><a href=\"#prepare_statement\" rel=\"nofollow\">prepare_statement</a></li>\n<li><a href=\"#set_input_sizes\" rel=\"nofollow\">set_input_sizes</a></li>\n<li><a href=\"#set_output_size\" rel=\"nofollow\">set_output_size</a></li>\n<li><a href=\"#execute\" rel=\"nofollow\">execute</a></li>\n<li><a href=\"#fetch_one\" rel=\"nofollow\">fetch_one</a></li>\n<li><a href=\"#fetch_many\" rel=\"nofollow\">fetch_many</a></li>\n<li><a href=\"#fetch_all\" rel=\"nofollow\">fetch_all</a></li>\n<li><a href=\"#start_transaction\" rel=\"nofollow\">start_transaction</a></li>\n<li><a href=\"#cancel_transaction\" rel=\"nofollow\">cancel_transaction</a></li>\n<li><a href=\"#rollback\" rel=\"nofollow\">rollback</a></li>\n<li><a href=\"#commit\" rel=\"nofollow\">commit</a></li>\n<li><a href=\"#validate_transaction\" rel=\"nofollow\">validate_transaction</a></li>\n<li><a href=\"#send_messages_in_base_64\" rel=\"nofollow\">send_messages_in_base_64</a></li>\n<li><a href=\"#set_protocol_version\" rel=\"nofollow\">set_protocol_version</a></li>\n<li><a href=\"#set_preferred_image_types\" rel=\"nofollow\">set_preferred_image_types</a></li>\n<li><a href=\"#set_fmt\" rel=\"nofollow\">set_fmt</a></li>\n<li><a href=\"#print_result\" rel=\"nofollow\">print_result</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#database-interface\" rel=\"nofollow\">Database Interface</a>\n<ul>\n<li><a href=\"#methods-1\" rel=\"nofollow\">Methods</a>\n<ul>\n<li><a href=\"#connect\" rel=\"nofollow\">connect</a></li>\n<li><a href=\"#close-1\" rel=\"nofollow\">close</a></li>\n<li><a href=\"#cursor-1\" rel=\"nofollow\">cursor</a></li>\n<li><a href=\"#connected\" rel=\"nofollow\">connected</a></li>\n<li><a href=\"#get_socket\" rel=\"nofollow\">get_socket</a></li>\n<li><a href=\"#get_socket_timeout\" rel=\"nofollow\">get_socket_timeout</a></li>\n<li><a href=\"#get_host\" rel=\"nofollow\">get_host</a></li>\n<li><a href=\"#get_port\" rel=\"nofollow\">get_port</a></li>\n<li><a href=\"#get_user\" rel=\"nofollow\">get_user</a></li>\n<li><a href=\"#get_password\" rel=\"nofollow\">get_password</a></li>\n<li><a href=\"#get_logger\" rel=\"nofollow\">get_logger</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><a href=\"#example\" rel=\"nofollow\">Examples</a></p>\n</li>\n</ul>\n<h2>General info</h2>\n<ul>\n<li>4D is an incredibly productive development platform that lets you focus on your data model and your business rules.</li>\n<li>The 4D framework takes care of running your application code natively on macOS and Windows.</li>\n<li>The 4DBI is written in pure python and allows a python program to use SQL to access one or more databases from a\nsingle application without using the 4D ODBC driver.</li>\n<li>4D and 4D Server both provide a native SQL server that enables this functionality.</li>\n</ul>\n<h2>Technologies</h2>\n<p>Project is created with:</p>\n<ul>\n<li>Python</li>\n<li>texttable - <a href=\"https://github.com/foutaise/texttable/\" rel=\"nofollow\">https://github.com/foutaise/texttable/</a></li>\n</ul>\n<h2>Setup</h2>\n<p>To run this project, install it locally using pip:</p>\n<pre><code>$ pip install python4DBI\n</code></pre>\n<h2>API</h2>\n<h3>Cursor</h3>\n<p>It consists of pure application logic, which interacts with the database.\nIt includes all the information to represent data to the end user.</p>\n<h4>Properties</h4>\n<h6>row_number</h6>\n<pre><code>\tReturn: int or None\n</code></pre>\n<p>This read-only attribute provides the current 0-based index of the cursor in the result set\nor None if the index cannot be determined</p>\n<h6>row_count</h6>\n<pre><code>\tReturn: int\n</code></pre>\n<p>This read-only attribute specifies the number of rows that the last .execute*()</p>\n<h6>description</h6>\n<pre><code>\tReturn: List\n</code></pre>\n<p>A Cursor object's description attribute returns information about each of the result columns of a query.</p>\n<h4>Methods</h4>\n<h6>close</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Close the current 4D SQL server cursor</p>\n<h6>prepare_statement</h6>\n<pre><code>\tParams: query ( str )\n\tReturn: int\n</code></pre>\n<p>Checks if the statement is valid should always be execute before an execute statement\nreturns FOURD_OK or FOURD_ERROR</p>\n<h6>set_input_sizes</h6>\n<p><strong>Not implemented!</strong></p>\n<pre><code>\tParams: size ( int )\n\tReturn: None\n</code></pre>\n<p>This can be used before a call to .execute*() to predefine memory areas for the operation's parameters.</p>\n<h6>set_output_size</h6>\n<p><strong>Not implemented!</strong></p>\n<pre><code>\tParams: size ( int )\n\tReturn: None\n</code></pre>\n<p>Set a column buffer size for fetches of large columns (e.g. LONGs, BLOBs, etc.).\nthe column is specified as an index into the result sequence.\nNot specifying the column will set the default size for all large columns in the cursor.</p>\n<h6>execute</h6>\n<pre><code>\tParams: query (str), params (dict), page_size (int), on_before_execute (funtion), on_executed (funtion), *args, **kwargs\n\tReturn: None\n</code></pre>\n<p>Prepare and execute a database operation (query or command).</p>\n<h6>fetch_one</h6>\n<pre><code>\tReturn: List or None\n</code></pre>\n<p>Fetch the next row of a query result set, returning a single sequence, or None when no more data is available.</p>\n<h6>fetch_many</h6>\n<pre><code>\tParams: size (int)\n\tReturn: Two-dimensional List or None\n</code></pre>\n<p>Fetch the next set of rows of a query result, returning a sequence of sequences (e.g. a list of tuples).\nAn empty sequence is returned when no more rows are available.</p>\n<h6>fetch_all</h6>\n<pre><code>\tReturn: Two-dimensional List or None\n</code></pre>\n<p>Fetch all (remaining) rows of a query result.\nNote that the cursor's array size attribute can affect the performance of this operation.</p>\n<h6>start_transaction</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Opens a transaction</p>\n<h6>cancel_transaction</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Rollback an open transaction\nSame operation as rollback method</p>\n<h6>rollback</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Rollback an open transaction\nSame operation as cancel_transaction method</p>\n<h6>commit</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Commits an open transaction\nSame operation as validate_transaction method</p>\n<h6>validate_transaction</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Commits an open transaction\nSame operation as commit method</p>\n<h6>send_messages_in_base_64</h6>\n<pre><code>\tParams: use_b64 (bool)\n\tReturn: None\n</code></pre>\n<p>Sets the base 64 mode</p>\n<h6>set_protocol_version</h6>\n<pre><code>\tParams: protocol_version (str)\n\tReturn: None\n</code></pre>\n<p>Sets the 4D SQL server protocol version</p>\n<h6>set_preferred_image_types</h6>\n<pre><code>\tParams: preferred_image_types (str)\n\tReturn: None\n</code></pre>\n<p>Sets the preferred image type</p>\n<blockquote>\n<p>Currently only supports 'png' pr 'jpg' formats</p>\n</blockquote>\n<h6>set_fmt</h6>\n<pre><code>\tParams: fmt (str)\n\tReturn: None\n</code></pre>\n<p>Prints a 4D SQL server cursor result</p>\n<p>Sets the type of binary architecture</p>\n<blockquote>\n<p>Currently supports the following formats:</p>\n<p>'&lt;' little-endian for MAC OS X - RVLB</p>\n<p>'&gt;'\tbig-endian for Windows - BLVR</p>\n</blockquote>\n<h6>print_result</h6>\n<pre><code>\tParams: headers (List), rows (List), max_width (int), logger(obj)\n\tReturn: None\n</code></pre>\n<h3>Database Interface</h3>\n<p>It acts as an intermediary between view and model</p>\n<h4>Methods</h4>\n<h6>connect</h6>\n<pre><code>\tParams:\t** kwargs\n\tReturn: None\n</code></pre>\n<p>Opens a socket connection to the 4D SQL Server</p>\n<p>kwargs supported are:</p>\n<ul>\n<li>socket_timeout : int (default 10)</li>\n<li>dsn : str (default '')</li>\n<li>host : str (default '127.0.0.1')</li>\n<li>port : int (default 19812)</li>\n<li>user : str (default '')</li>\n<li>password : str (default '')</li>\n</ul>\n<h6>close</h6>\n<pre><code>\tReturn: None\n</code></pre>\n<p>Closes the current 4D SQL server socket connection</p>\n<h6>cursor</h6>\n<pre><code>\tReturn: _python4DCursor object\n</code></pre>\n<p>Returns a 4D SQL server cursor object</p>\n<h6>connected</h6>\n<pre><code>\t\tReturn: bool\n</code></pre>\n<p>Returns true if the socket is connected to the 4D SQL server and false otherwise</p>\n<h6>get_socket</h6>\n<pre><code>\tReturn: self._socket object\n</code></pre>\n<p>Returns the current socket object</p>\n<h6>get_socket_timeout</h6>\n<pre><code>\tReturn: int\n</code></pre>\n<p>Returns the current socket timeout</p>\n<h6>get_host</h6>\n<pre><code>\tReturn: str\n</code></pre>\n<p>Returns the current to 4D SQL server host</p>\n<h6>get_port</h6>\n<pre><code>\tReturn: int\n</code></pre>\n<p>Returns the current to 4D SQL server port</p>\n<h6>get_user</h6>\n<pre><code>\tReturn: str\n</code></pre>\n<p>Returns the current to 4D SQL server user</p>\n<h6>get_password</h6>\n<pre><code>\tReturn: str\n</code></pre>\n<p>Returns the current to 4D SQL server password</p>\n<h6>get_logger</h6>\n<pre><code>\tReturn: str\n</code></pre>\n<p>Returns the logger object</p>\n<h2>Example</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">python4DBI.python4DBI</span> <span class=\"kn\">import</span> <span class=\"n\">python4DBI</span>\n\n<span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n<span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n<span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n<span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'SELECT * FROM EMPLOYEES'</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">row_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n    <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">print_result</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"n\">result</span><span class=\"p\">)</span>\n<span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"n\">t1</span><span class=\"o\">-</span><span class=\"n\">t0</span>\n</pre>\n<pre><code>+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n| EmployeeID | Last   | Name     | First    | Name     | Address1 | Address2 | Zip      | Code      | City | Country | Telephone | Mobile | Phone | Birth | Date |\n+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n| 1          | Barros | Marciano | Address1 | Address2 | 9000     | FUNCHAL  | Portugal | 3.510e+09 |      | None    |           | None   | None  |       |      |\n+------------+--------+----------+----------+----------+----------+----------+----------+-----------+------+---------+-----------+--------+-------+-------+------+\n\nExecution time : 0.022388219833374023\n</code></pre>\n<h2>Template example 1</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Learn how to open a connection to the 4D SQL Server.</span>\n<span class=\"sd\">\"\"\"</span>\n\n <span class=\"c1\"># Instantiate a connection object</span>\n    <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Authentication</span>\n    <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Check if the socket is connected</span>\n    <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Do stuff</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"c1\"># Close the socket connection</span>\n    <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<h2>Template example 2</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Learn to open a connection to the 4D SQL Server and handle the exceptions.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">To learn more about the exceptions raised at a particular method please read the doc strings.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">For example:</span>\n<span class=\"sd\">- help(python4DBI) will print the documentation for the 4DBI interface</span>\n<span class=\"sd\">- help(python4DBI.__init) will print the documentation for the 4DBI constructor.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"n\">OperationalError</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n    \n    <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"p\">:</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Authentication</span>\n            <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">except</span> <span class=\"n\">ProgrammingError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle error</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">except</span> <span class=\"n\">OperationalError</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle error</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle error</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Do stuff</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Close the socket connection</span>\n            <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Handle error</span>\n            <span class=\"k\">pass</span>    \n</pre>\n<h2>Template example 3</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">As we have seen in previous examples handling errors will exponentiate the number of try/except cases</span>\n<span class=\"sd\">because every function on the DBI will have the potential of raising errors in this example I will show </span>\n<span class=\"sd\">how to simplify the 'try catch' with the usage of superclass's.</span>\n\n<span class=\"sd\">4DBI Error Classes List</span>\n<span class=\"sd\">     StandardError</span>\n<span class=\"sd\">     |__Warning</span>\n<span class=\"sd\">     |__Error</span>\n<span class=\"sd\">        |__InterfaceError</span>\n<span class=\"sd\">        |__DatabaseError</span>\n<span class=\"sd\">           |__DataError</span>\n<span class=\"sd\">           |__OperationalError</span>\n<span class=\"sd\">           |__IntegrityError</span>\n<span class=\"sd\">           |__InternalError</span>\n<span class=\"sd\">           |__ProgrammingError</span>\n<span class=\"sd\">           |__NotSupportedError</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Do stuff</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle warning</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>    \n</pre>\n<h2>Template example 4</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">I will show how to change the standard logging file and level.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: All exception raised are logged before being raised.</span>\n<span class=\"sd\">The default logging file is \"python4DBI.log\" and the default level is CRITICAL.</span>\n<span class=\"sd\">The 'logging_file' should be the absolute file path by default is the same path as the module.</span>\n<span class=\"sd\">Be careful enabling DEBUG level logging, will make the DBI slower, because every iteration with</span>\n<span class=\"sd\">the DB will be logged and such configuration is not recommended for production environments.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object with custom logging level and log location</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">logging_file</span><span class=\"o\">=</span><span class=\"s1\">'../python4DBI.log'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Do stuff</span>\n            <span class=\"k\">pass</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h2>Template example 5</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Getting a 4D cursor.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">The 4D cursor database cursor is a control structure that enables traversal over the records in a database. </span>\n<span class=\"sd\">Cursors facilitate subsequent processing in conjunction with the traversal, such as retrieval, addition </span>\n<span class=\"sd\">and removal of database records. </span>\n\n<span class=\"sd\">Cursors are used by database programmers to process individual rows returned by database system queries. </span>\n<span class=\"sd\">Cursors enable manipulation of whole result sets at once.</span>\n\n<span class=\"sd\">Note: Normally a cursor can be viewed as a pointer to one row in a set of rows. </span>\n<span class=\"sd\">The cursor can only reference one row at a time, but can move to other rows of the result set as needed.</span>\n<span class=\"sd\">In this DBI was not possible to implement such behavior so every time you execute an SQL command you will</span>\n<span class=\"sd\">receive the result set in a Python list, if there is a need to update or operate directly at the DB </span>\n<span class=\"sd\">level you need to make use of the 'SELECT FOR UPDATE' clause on the specific row/record.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object with custom logging level and log location</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">logging_file</span><span class=\"o\">=</span><span class=\"s1\">'../python4DBI.log'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Do stuff</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h2>Template example 6</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Prepare an SQL statement.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">It is a good practice before executing an SQL statement to make a validation.</span>\n<span class=\"sd\">This command will return false if the SQL statement is not valid and true otherwise.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: If the programmer does not validate the SQL statement the DBI always validates the the query before</span>\n<span class=\"sd\">executing the difference is that on the execute the DBI will raise an error.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object with custom logging level and log location</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">logging_file</span><span class=\"o\">=</span><span class=\"s1\">'../python4DBI.log'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT * FROM EMPLOYEES'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Do stuff</span>\n                <span class=\"k\">pass</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h2>Template example 7</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Execute an SQL statement.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: After executing an SQL statement the programmer can use the row_count to check the</span>\n<span class=\"sd\">number of result rows. The 'fetch_all' is not always the best approach since it can result</span>\n<span class=\"sd\">in a slower fetch imagine that the size of the result set is 100000 rows, that means that the</span>\n<span class=\"sd\">return list will be a list of size 100000! </span>\n<span class=\"sd\">In such cases the programmer can use the 'fetch_one' will return only the first row or the</span>\n<span class=\"sd\">'fetch_many'.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">The are some caveats regarding the way that the DBI works internally since the 4D SQL protocol</span>\n<span class=\"sd\">puts the result page in a buffer every time you execute an SQL statement the DBI will fetch by default</span>\n<span class=\"sd\">a page size of 100 rows i.e. imagine if you use execute a statement then a 'fetch_one' internally the</span>\n<span class=\"sd\">DBI will fetch the first page i.e. at least 100 rows, if the programmer knows before hand that it only needs</span>\n<span class=\"sd\">the first N records than it is more efficient to execute the SQL statement with a page size of N.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object with custom logging level and log location</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">logging_file</span><span class=\"o\">=</span><span class=\"s1\">'../python4DBI.log'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT * FROM EMPLOYEES'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"c1\"># Execute the query</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Check the results</span>\n                <span class=\"k\">if</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">row_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n                    <span class=\"c1\"># Fetch all the results</span>\n                    <span class=\"n\">result_rows</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>   \n</pre>\n<h2>Template example 8</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Printing results to the console.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: Every time you execute the an SQL statement the DBI will create a list of the row headers with tha name</span>\n<span class=\"sd\">of the DB columns, the programmer can use 'description' for such purposes.</span>\n<span class=\"sd\">The 'print_result' is implemented on the DBI and will provide a 'terminal/console' way to see the results formatted</span>\n<span class=\"sd\">into a table, and can be usefully for debugging purposes.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">(</span><span class=\"n\">logging_level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">,</span> <span class=\"n\">logging_file</span><span class=\"o\">=</span><span class=\"s1\">'../python4DBI.log'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT * FROM EMPLOYEES'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"c1\"># Execute the query</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Check the results</span>\n                <span class=\"k\">if</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">row_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n                    <span class=\"c1\"># Fetch all the results</span>\n                    <span class=\"n\">result_rows</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n                    <span class=\"c1\"># Print result page to console</span>\n                    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">print_result</span><span class=\"p\">(</span><span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">description</span><span class=\"p\">,</span> <span class=\"n\">rows</span><span class=\"o\">=</span><span class=\"n\">result_rows</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h2>Template example 9</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Using params in SQL statements.</span>\n<span class=\"sd\">Using transactions.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: Normally a DBI will implement only on or tow ways of using param styles in SQL queries, on</span>\n<span class=\"sd\">this DBI is available qmark, name, format and pyformat.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">qmark\t- Question mark style, e.g. ...WHERE name=?</span>\n<span class=\"sd\">named\t- Named style, e.g. ...WHERE name=:name</span>\n<span class=\"sd\">format - ANSI C printf format codes, e.g. ...WHERE name=%s</span>\n<span class=\"sd\">pyformat - Python extended format codes, e.g. ...WHERE name=%(name)s</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">It can be used only one type of param style per query!</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check if the socket is connected</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'INSERT INTO EMPLOYEES (EmployeeID, City) VALUES(:id, :city)'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"c1\"># Start a transaction</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">start_transaction</span><span class=\"p\">()</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">):</span>\n                    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span>\n                              <span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">(),</span>\n                              <span class=\"s1\">'Date'</span><span class=\"p\">:</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">()</span>\n                              <span class=\"p\">}</span>\n                    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Commit the transaction</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Warning</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"n\">Error</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Handle error</span>\n        <span class=\"k\">pass</span>\n</pre>\n<h2>Example 1</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Time of execution for multiple results.</span>\n<span class=\"sd\">    </span>\n<span class=\"sd\">Note: This examples use the 4D DB that is available at the project level if you wish</span>\n<span class=\"sd\">to do the same tests please use this DB project.</span>\n<span class=\"sd\">If you need to seed the DB with data please use the 'Example 3'.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check if the socket is connected</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT * FROM EMPLOYEES'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># Execute the query</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n\n                <span class=\"c1\"># Check the results</span>\n                <span class=\"k\">if</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">row_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n\n                    <span class=\"c1\"># Fetch all the results</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n                <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n                <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Execution time : </span><span class=\"si\">{}</span><span class=\"s1\"> seconds'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">))</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Can not continue - reason : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n<h2>Example 2</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">Time of execution for single result.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check if the socket is connected</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'SELECT EmployeeID FROM EMPLOYEES WHERE EmployeeID = :id'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"n\">t0</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n\n                <span class=\"c1\"># Execute the query</span>\n                <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'id'</span><span class=\"p\">:</span> <span class=\"s1\">'1'</span><span class=\"p\">})</span>\n\n                <span class=\"c1\"># Check the results</span>\n                <span class=\"k\">if</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">row_count</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                    <span class=\"c1\"># Fetch all the results</span>\n                    <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">fetch_all</span><span class=\"p\">()</span>\n\n                <span class=\"n\">t1</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n                <span class=\"n\">total</span> <span class=\"o\">=</span> <span class=\"nb\">round</span><span class=\"p\">(</span><span class=\"n\">t1</span> <span class=\"o\">-</span> <span class=\"n\">t0</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Execution time : </span><span class=\"si\">{}</span><span class=\"s1\"> seconds'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">total</span><span class=\"p\">))</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Can not continue - reason : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n<h2>Example 3</h2>\n<pre><span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">DB data seed.</span>\n<span class=\"sd\">\"\"\"</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># Instantiate a connection object</span>\n        <span class=\"n\">con</span> <span class=\"o\">=</span> <span class=\"n\">python4DBI</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Authentication</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">=</span><span class=\"s1\">'theUser'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'thePassword'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Check if the socket is connected</span>\n        <span class=\"k\">if</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">connected</span><span class=\"p\">()</span> <span class=\"ow\">is</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Get cursor</span>\n            <span class=\"n\">cursor</span> <span class=\"o\">=</span> <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">cursor</span><span class=\"p\">()</span>\n\n            <span class=\"c1\"># Prepare the statement i.e check if it OK for execution</span>\n            <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'INSERT INTO EMPLOYEES (EmployeeID, Address1, Address2, City) '</span> \\\n                    <span class=\"s1\">'VALUES (:EmployeeID, :Address1, :Address2, :City)'</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">prepare_statement</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">)</span>\n            <span class=\"k\">if</span> <span class=\"n\">result</span> <span class=\"ow\">is</span> <span class=\"n\">FOURD_OK</span><span class=\"p\">:</span>\n\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000</span><span class=\"p\">):</span>\n                    <span class=\"n\">_id</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"o\">+</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n                    <span class=\"n\">_name</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">()</span>\n                    <span class=\"n\">_first_name</span> <span class=\"o\">=</span> <span class=\"n\">_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[:</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n                    <span class=\"n\">_last_name</span> <span class=\"o\">=</span> <span class=\"n\">_name</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">:]</span>\n                    <span class=\"n\">_address1</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">()</span>\n                    <span class=\"n\">_address2</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">address</span><span class=\"p\">()</span>\n                    <span class=\"n\">_zipcode</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">zipcode</span><span class=\"p\">()</span>\n                    <span class=\"n\">_city</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">()</span>\n                    <span class=\"n\">_country</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">country</span><span class=\"p\">()</span>\n                    <span class=\"n\">_phone</span> <span class=\"o\">=</span> <span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">phone_number</span><span class=\"p\">()</span>\n\n                    <span class=\"c1\"># Execute the query</span>\n                    <span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'EmployeeID'</span><span class=\"p\">:</span> <span class=\"n\">_id</span><span class=\"p\">,</span>\n                              <span class=\"s1\">'Address1'</span><span class=\"p\">:</span> <span class=\"n\">_address1</span><span class=\"p\">,</span>\n                              <span class=\"s1\">'Address2'</span><span class=\"p\">:</span> <span class=\"n\">_address2</span><span class=\"p\">,</span>\n                              <span class=\"s1\">'City'</span><span class=\"p\">:</span> <span class=\"n\">_city</span><span class=\"p\">,</span>\n                              <span class=\"p\">}</span>\n                    <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">query</span><span class=\"p\">,</span> <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"c1\"># Handle wrong statement</span>\n                <span class=\"k\">pass</span>\n\n            <span class=\"c1\"># Close cursor</span>\n            <span class=\"n\">cursor</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n        <span class=\"c1\"># Close the socket connection</span>\n        <span class=\"n\">con</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Can not continue - reason : </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">e</span><span class=\"p\">))</span>\n</pre>\n\n          </div>"}, "last_serial": 7179505, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "402e9a20a02ba87fd2118e333d3605aa", "sha256": "65a4ac464a54bd2355a091a4da782e5d0038eae9b6382ecc3219150aeb5c8574"}, "downloads": -1, "filename": "python4DBI-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "402e9a20a02ba87fd2118e333d3605aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14346, "upload_time": "2019-04-21T12:06:24", "upload_time_iso_8601": "2019-04-21T12:06:24.446076Z", "url": "https://files.pythonhosted.org/packages/47/8f/a72382c2affcbfccb30952bfb09c78d963a87a49d9399112ad8ecf6dd1b3/python4DBI-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f82c1d52fc7d81e663a2d1c62e171cca", "sha256": "30197bfd693ace33ed56bf569aa6af3d7075a71dce854641d48b2d51ea287369"}, "downloads": -1, "filename": "python4DBI-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f82c1d52fc7d81e663a2d1c62e171cca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14323, "upload_time": "2019-04-21T12:09:10", "upload_time_iso_8601": "2019-04-21T12:09:10.090995Z", "url": "https://files.pythonhosted.org/packages/b8/5f/5abfa59f504bf452f5217a31944942c1edd513091a00e63dca88a4281ac7/python4DBI-1.0-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3cc8d75a49528f6109112c160d3e0b79", "sha256": "156047e5b0e5570ade5c73be10608b4948548fd52f61598fd2d745663f0a6510"}, "downloads": -1, "filename": "python4DBI-1.0.2.tar.gz", "has_sig": false, "md5_digest": "3cc8d75a49528f6109112c160d3e0b79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19610, "upload_time": "2020-03-23T21:55:37", "upload_time_iso_8601": "2020-03-23T21:55:37.428584Z", "url": "https://files.pythonhosted.org/packages/3c/4c/19c2836d1ba0e3de6f099f8dcbd404a0057307950c3ae3f8dff9c119e455/python4DBI-1.0.2.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "72d2e5b988b49b6f9b0a665a916fddaf", "sha256": "a0ddeb2c0cdca4bcb825f5aa93b53d8d73811636e1cb30acb4a896578eda6267"}, "downloads": -1, "filename": "python4DBI-1.0.4.tar.gz", "has_sig": false, "md5_digest": "72d2e5b988b49b6f9b0a665a916fddaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30385, "upload_time": "2020-05-06T11:18:18", "upload_time_iso_8601": "2020-05-06T11:18:18.994195Z", "url": "https://files.pythonhosted.org/packages/8c/11/6980a0e6e3517738461a94dccdc36d3a82184cc176bd9266464ffd96c8e3/python4DBI-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "72d2e5b988b49b6f9b0a665a916fddaf", "sha256": "a0ddeb2c0cdca4bcb825f5aa93b53d8d73811636e1cb30acb4a896578eda6267"}, "downloads": -1, "filename": "python4DBI-1.0.4.tar.gz", "has_sig": false, "md5_digest": "72d2e5b988b49b6f9b0a665a916fddaf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 30385, "upload_time": "2020-05-06T11:18:18", "upload_time_iso_8601": "2020-05-06T11:18:18.994195Z", "url": "https://files.pythonhosted.org/packages/8c/11/6980a0e6e3517738461a94dccdc36d3a82184cc176bd9266464ffd96c8e3/python4DBI-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:21 2020"}