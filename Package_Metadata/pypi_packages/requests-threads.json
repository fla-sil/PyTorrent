{"info": {"author": "Kenneth Reitz", "author_email": "me@kennethreitz.org", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\nrequests-threads \ud83c\udfad\n===================\n\nThis repo contains a Requests session that returns awaitable Twisted\nDeferreds instead of Response objects.\n\nIt's awesome, basically \u2014\u00a0check it out:\n\nExamples\n--------\n\nExample Usage (using ``async``/``await``):\n\n.. code:: python\n\n\tfrom requests_threads import AsyncSession\n\n\tsession = AsyncSession()\n\n\tasync def _main():\n\t    rs = []\n\t    for _ in range(100):\n\t        rs.append(await session.get('http://httpbin.org/get'))\n\t    print(rs)\n\n\tif __name__ == '__main__':\n\t    session.run(_main)\n\n*This example works on Python 3 only.*\n\nExample Usage (using Twisted):\n\n.. code:: python\n\n\tfrom twisted.internet.defer import inlineCallbacks\n\tfrom twisted.internet.task import react\n\timport requests\n\n\tsession = requests.AsyncSession(n=100)\n\n\t@inlineCallbacks\n\tdef main(reactor):\n\t    responses = []\n\t    for i in range(100):\n\t        responses.append(session.get('http://httpbin.org/get'))\n\n\t    for response in responses:\n\t        r = yield response\n\t        print(r)\n\n\tif __name__ == '__main__':\n\t    react(main)\n\n*This example works on Python 2 and Python 3.*\n\n--------------------\n\nEach request is sent via a new thread, automatically. This works fine for basic\nuse cases. This automatically uses Twisted's ``asyncioreactor``, if you do not\nprovide your own reactor (progress to be made there, help requested!).\n\n**This is a an experiment**, and a preview of the true asyncronous API we have panned for Requests\nthat is currently *in the works*, but requires a lot of development time. If you'd like to help (p.s. **we need help**, `send me an email <mailto:me@kennethreitz.org>`_).\n\nThis API is likely to change, over time, slightly.\n\nInstallation\n------------\n\n::\n\n    $ pipenv install requests-threads\n    \u2728\ud83c\udf70\u2728\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/requests/requests/requests-threads", "keywords": "", "license": "ISC", "maintainer": "", "maintainer_email": "", "name": "requests-threads", "package_url": "https://pypi.org/project/requests-threads/", "platform": "", "project_url": "https://pypi.org/project/requests-threads/", "project_urls": {"Homepage": "https://github.com/requests/requests/requests-threads"}, "release_url": "https://pypi.org/project/requests-threads/0.1.1/", "requires_dist": ["requests", "twisted"], "requires_python": "", "summary": "A Requests session that returns awaitable Twisted Deferreds instead of response objects.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This repo contains a Requests session that returns awaitable Twisted\nDeferreds instead of Response objects.</p>\n<p>It\u2019s awesome, basically \u2014\u00a0check it out:</p>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Example Usage (using <tt>async</tt>/<tt>await</tt>):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">requests_threads</span> <span class=\"kn\">import</span> <span class=\"n\">AsyncSession</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">AsyncSession</span><span class=\"p\">()</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">_main</span><span class=\"p\">():</span>\n    <span class=\"n\">rs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"n\">rs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">rs</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">_main</span><span class=\"p\">)</span>\n</pre>\n<p><em>This example works on Python 3 only.</em></p>\n<p>Example Usage (using Twisted):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.defer</span> <span class=\"kn\">import</span> <span class=\"n\">inlineCallbacks</span>\n<span class=\"kn\">from</span> <span class=\"nn\">twisted.internet.task</span> <span class=\"kn\">import</span> <span class=\"n\">react</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">AsyncSession</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@inlineCallbacks</span>\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">reactor</span><span class=\"p\">):</span>\n    <span class=\"n\">responses</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">):</span>\n        <span class=\"n\">responses</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://httpbin.org/get'</span><span class=\"p\">))</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">response</span> <span class=\"ow\">in</span> <span class=\"n\">responses</span><span class=\"p\">:</span>\n        <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"k\">yield</span> <span class=\"n\">response</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">react</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">)</span>\n</pre>\n<p><em>This example works on Python 2 and Python 3.</em></p>\n<hr class=\"docutils\">\n<p>Each request is sent via a new thread, automatically. This works fine for basic\nuse cases. This automatically uses Twisted\u2019s <tt>asyncioreactor</tt>, if you do not\nprovide your own reactor (progress to be made there, help requested!).</p>\n<p><strong>This is a an experiment</strong>, and a preview of the true asyncronous API we have panned for Requests\nthat is currently <em>in the works</em>, but requires a lot of development time. If you\u2019d like to help (p.s. <strong>we need help</strong>, <a href=\"mailto:me%40kennethreitz.org\">send me an email</a>).</p>\n<p>This API is likely to change, over time, slightly.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pipenv install requests-threads\n\u2728\ud83c\udf70\u2728\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4831197, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6039de61a1b12d348bad76ce60f41cd4", "sha256": "b62b3226563dfcfab95aed185186d11be5512c9b042e7402ab0262c4646bf821"}, "downloads": -1, "filename": "requests_threads-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6039de61a1b12d348bad76ce60f41cd4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4564, "upload_time": "2017-09-04T15:11:45", "upload_time_iso_8601": "2017-09-04T15:11:45.138398Z", "url": "https://files.pythonhosted.org/packages/e6/06/0e2f0f17bad77d1e597c38facc7506921447b856738cb996579b7210d2e1/requests_threads-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34cdd1adaa8e3cd4ed21997191b2dcb7", "sha256": "3bfa8230da6b4e89834b41de3c59b390625d4163b36a53a0812ebca9ea2823c1"}, "downloads": -1, "filename": "requests_threads-0.1.0.tar.gz", "has_sig": false, "md5_digest": "34cdd1adaa8e3cd4ed21997191b2dcb7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3530, "upload_time": "2017-09-04T15:11:46", "upload_time_iso_8601": "2017-09-04T15:11:46.444913Z", "url": "https://files.pythonhosted.org/packages/01/a3/a1dce7027ba5afc66fd239593c6d2cbded309e0e957e616aacfcd86395c2/requests_threads-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d85e3c7d1d0d17215e6cef1e12650bcd", "sha256": "7740be27cc7b425019e2655f06b6c17ee459c3e7f63cb8c4400fea3a61e0b2f1"}, "downloads": -1, "filename": "requests_threads-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d85e3c7d1d0d17215e6cef1e12650bcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4776, "upload_time": "2017-09-04T15:50:51", "upload_time_iso_8601": "2017-09-04T15:50:51.964984Z", "url": "https://files.pythonhosted.org/packages/94/99/0c5f619d56d11e9786b6f97af08c75d323a9a92af5393f6c45dd2b1a5e19/requests_threads-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53b1ba51496952bcc7d0e5d2f0426fff", "sha256": "923ffece26c18a1d20e34c4f037c58c311f1e15b342a1485a84dd968f377efb0"}, "downloads": -1, "filename": "requests-threads-0.1.1.tar.gz", "has_sig": false, "md5_digest": "53b1ba51496952bcc7d0e5d2f0426fff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3671, "upload_time": "2017-09-04T15:50:53", "upload_time_iso_8601": "2017-09-04T15:50:53.639668Z", "url": "https://files.pythonhosted.org/packages/63/ef/871c1681ae1094bf805a39675ad58f884bef4769fbfff82399dd02a8b4a4/requests-threads-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d85e3c7d1d0d17215e6cef1e12650bcd", "sha256": "7740be27cc7b425019e2655f06b6c17ee459c3e7f63cb8c4400fea3a61e0b2f1"}, "downloads": -1, "filename": "requests_threads-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d85e3c7d1d0d17215e6cef1e12650bcd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4776, "upload_time": "2017-09-04T15:50:51", "upload_time_iso_8601": "2017-09-04T15:50:51.964984Z", "url": "https://files.pythonhosted.org/packages/94/99/0c5f619d56d11e9786b6f97af08c75d323a9a92af5393f6c45dd2b1a5e19/requests_threads-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53b1ba51496952bcc7d0e5d2f0426fff", "sha256": "923ffece26c18a1d20e34c4f037c58c311f1e15b342a1485a84dd968f377efb0"}, "downloads": -1, "filename": "requests-threads-0.1.1.tar.gz", "has_sig": false, "md5_digest": "53b1ba51496952bcc7d0e5d2f0426fff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3671, "upload_time": "2017-09-04T15:50:53", "upload_time_iso_8601": "2017-09-04T15:50:53.639668Z", "url": "https://files.pythonhosted.org/packages/63/ef/871c1681ae1094bf805a39675ad58f884bef4769fbfff82399dd02a8b4a4/requests-threads-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:00 2020"}