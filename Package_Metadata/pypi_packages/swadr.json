{"info": {"author": "Eric Pruitt", "author_email": "eric.pruitt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: SQL", "Topic :: Database", "Topic :: Database :: Front-Ends"], "description": "swadr\r\n=====\r\n\r\nS.W.A.D.R., SQLite3 With Arbitrarily Delimited Records, is designed to\r\nbe a replacement and significant improvement over\r\n`SQLet <http://www.sqlet.com/>`__, \"a free, open-source script that\r\nallows you to directly execute SQL on multiple text files, right from\r\nthe Linux command line.\" In addition to augmenting the features of\r\nSQLet, I also elected to use the `BSD 2-Clause\r\nLicense <http://opensource.org/licenses/BSD-2-Clause>`__ instead of the\r\nGPL (SWADR is derived neither in whole nor part from SQLet).\r\n\r\nSome notable improvements over SQLet are:\r\n\r\n-  When importing data with swadr, swadr will automatically detect the\r\n   files' delimation type as well as the schema of the data.\r\n-  Queries do not need to be piped to SQLite3.\r\n-  Swadr provides a built-in SQLite3 REPL designed to emulate the MySQL\r\n   CLI.\r\n-  Unparseable records will not terminate the execution of the program\r\n   by default.\r\n\r\nQuick Example\r\n-------------\r\n\r\nLoad examples/students.csv into the table \"A\" and load grades.csv into\r\nthe table \"B\" then enter interactive mode:\r\n\r\n::\r\n\r\n    swadr -A src/samples/students.csv -B src/samples/grades.tsv\r\n    sqlite> DESC A;\r\n    +-----+-----------+---------+---------+------------+----+\r\n    | cid | name      | type    | notnull | dflt_value | pk |\r\n    +-----+-----------+---------+---------+------------+----+\r\n    | 0   | Name      | TEXT    | 0       | NULL       | 0  |\r\n    | 1   | Class     | INTEGER | 0       | NULL       | 0  |\r\n    | 2   | Home_Room | TEXT    | 0       | NULL       | 0  |\r\n    | 3   | Age       | INTEGER | 0       | NULL       | 0  |\r\n    +-----+-----------+---------+---------+------------+----+\r\n    4 rows in set (0.00 sec)\r\n\r\n    sqlite> DESC B;\r\n    +-----+------------+---------+---------+------------+----+\r\n    | cid | name       | type    | notnull | dflt_value | pk |\r\n    +-----+------------+---------+---------+------------+----+\r\n    | 0   | Assignment | INTEGER | 0       | NULL       | 0  |\r\n    | 1   | Grade      | INTEGER | 0       | NULL       | 0  |\r\n    | 2   | Student    | TEXT    | 0       | NULL       | 0  |\r\n    +-----+------------+---------+---------+------------+----+\r\n    3 rows in set (0.00 sec)\r\n\r\n    sqlite> SELECT name, AVG(grade) FROM A INNER JOIN B ON name = student\r\n         ;> GROUP BY student;\r\n    +---------+---------------+\r\n    | name    | AVG(grade)    |\r\n    +---------+---------------+\r\n    | Jan     | 55.0          |\r\n    | Lucy    | 88.0          |\r\n    | Richard | 86.6666666667 |\r\n    +---------+---------------+\r\n    3 rows in set (0.00 sec)\r\n\r\nInstallation\r\n------------\r\n\r\nThere are no non-standard modules required to install S.W.A.D.R., but if\r\nthe `wcwidth <https://pypi.python.org/pypi/wcwidth/0.1.4>`__ module is\r\navailable, it will be used to correctly pad tables containing east Asian\r\ncharacters:\r\n\r\n.. figure:: wcwidth-comparison.gif\r\n   :alt: Table Screenshot\r\n\r\n   Screenshot with Asian characters\r\n\r\nOption 1: setup.py / pip\r\n~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\nA setup.py file is provided that will install the \"swadr\" Python module\r\nand a script for launching swadr's CLI. Execute\r\n``python setup.py install`` using sudo or as privileged user to install\r\nthe package globally or run ``python setup.py install --user`` to\r\ninstall the package as the current user.\r\n\r\nAlternatively, swadr can be installed using pip, e.g.:\r\n``pip install swadr`` or ``pip install --user swadr``.\r\n\r\nAfter installation with either pip or setup.py, the \"swadr\" module will\r\nbe importable and, provided your ``PATH`` environment variable is\r\nconfigured correctly, running ``swadr`` at the command line will launch\r\nthe command line interface. The default location for scripts packaged\r\nwith Python modules is generally ``~/.local/bin``, but this can be\r\nchanged using the\r\n`--install-scripts <http://docs.python.org/2/install/#custom-installation>`__\r\noption. The swadr CLI can also be launched by running\r\n``python -m swadr`` once the module has been installed.\r\n\r\nOption 2: Copying\r\n~~~~~~~~~~~~~~~~~\r\n\r\nThe swadr CLI is wholly contained in the file ``./src/swadr.py`` and can\r\nrun independently of the rest of the files in this repository, so swadr\r\ncan be installed by simply copying ``./src/swadr.py`` to a folder listed\r\nin the ``PATH`` environment variable; ``$HOME/bin``, ``/usr/local/bin``,\r\nand ``/usr/bin`` are popular defaults --\r\n``cp ./src/swadr.py ~/bin/swadr && hash -r`` then run ``swadr``.\r\n\r\nCommand Line Options\r\n--------------------\r\n\r\n**NOTE:** Any trailing, non-option arguments will be executed as SQLite3\r\nqueries after the data has been imported.\r\n\r\n--help, -h\r\n~~~~~~~~~~\r\n\r\nShow the CLI documentation and exit.\r\n\r\n-A FILE, ..., -Z FILE\r\n~~~~~~~~~~~~~~~~~~~~~\r\n\r\nAll capital, single-letter options are used to load the specified file\r\ninto the SQLite3 database. If no \"--table\" option has been specified\r\nimmediately preceding the option, the letter name will be used as the\r\ntable name; loading a file with \"-A\" will populate the table \"A\".\r\n\r\n--table=TABLE\r\n~~~~~~~~~~~~~\r\n\r\nName of table used to store the contents of the next specified CSV file.\r\n\r\n--invalid=METHOD\r\n~~~~~~~~~~~~~~~~\r\n\r\nDetermines how rows of invalid data handled. The METHOD can be \"warn\",\r\n\"ignore\", or \"fail\" which will cause the script to emit a warning and\r\nskip the record, silently skip the record or terminate script execution\r\nrespectively. When unspecified, defaults to \"warn.\"\r\n\r\n--loglevel=LEVEL\r\n~~~~~~~~~~~~~~~~\r\n\r\nSet logging verbosity level. In order from the highest verbosity to the\r\nlowest verbosity, can be one of \"DEBUG\", \"INFO\", \"WARNING\", \"ERROR\",\r\n\"CRITICAL\". The default value is \"WARNING.\"\r\n\r\n--pretty\r\n~~~~~~~~\r\n\r\nPretty-print results of queries passed as command line arguments instead\r\nof tab-separating the results.\r\n\r\n--database=FILE\r\n~~~~~~~~~~~~~~~\r\n\r\nPath of the SQLite3 database the queries should be executed on. When\r\nunspecified, the data is stored volatile memory and becomes inaccessible\r\nafter the program stops running.\r\n\r\n-i\r\n~~\r\n\r\nEnter interactive mode after importing data. When the \"--database\" flag\r\nis not specified, this option is implied. In addition to being able to\r\nexecute normal SQLite3 queries, the interpreter also has emulated\r\nsupport for some of MySQL's special statements matching the following\r\ngrammars:\r\n\r\n-  {DESC \\| DESCRIBE} **table\\_name**\r\n-  SHOW CREATE TABLE **table\\_name**\r\n-  SHOW TABLES\r\n\r\n-v\r\n~~\r\n\r\nIncrease logging verbosity. Can be used repeatedly to further increase\r\nverbosity.\r\n\r\n-q\r\n~~\r\n\r\nDecrease logging verbosity. Can be used repeatedly to further decrease\r\nverbosity.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ericpruitt/swadr", "keywords": "sqlite,sqlite3,sql,csv,tsv", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "swadr", "package_url": "https://pypi.org/project/swadr/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/swadr/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/ericpruitt/swadr"}, "release_url": "https://pypi.org/project/swadr/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "Import data from CSV, TSV, etc. files into SQLite3 database.", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>S.W.A.D.R., SQLite3 With Arbitrarily Delimited Records, is designed to\nbe a replacement and significant improvement over\n<a href=\"http://www.sqlet.com/\" rel=\"nofollow\">SQLet</a>, \u201ca free, open-source script that\nallows you to directly execute SQL on multiple text files, right from\nthe Linux command line.\u201d In addition to augmenting the features of\nSQLet, I also elected to use the <a href=\"http://opensource.org/licenses/BSD-2-Clause\" rel=\"nofollow\">BSD 2-Clause\nLicense</a> instead of the\nGPL (SWADR is derived neither in whole nor part from SQLet).</p>\n<p>Some notable improvements over SQLet are:</p>\n<ul>\n<li>When importing data with swadr, swadr will automatically detect the\nfiles\u2019 delimation type as well as the schema of the data.</li>\n<li>Queries do not need to be piped to SQLite3.</li>\n<li>Swadr provides a built-in SQLite3 REPL designed to emulate the MySQL\nCLI.</li>\n<li>Unparseable records will not terminate the execution of the program\nby default.</li>\n</ul>\n<div id=\"quick-example\">\n<h2>Quick Example</h2>\n<p>Load examples/students.csv into the table \u201cA\u201d and load grades.csv into\nthe table \u201cB\u201d then enter interactive mode:</p>\n<pre>swadr -A src/samples/students.csv -B src/samples/grades.tsv\nsqlite&gt; DESC A;\n+-----+-----------+---------+---------+------------+----+\n| cid | name      | type    | notnull | dflt_value | pk |\n+-----+-----------+---------+---------+------------+----+\n| 0   | Name      | TEXT    | 0       | NULL       | 0  |\n| 1   | Class     | INTEGER | 0       | NULL       | 0  |\n| 2   | Home_Room | TEXT    | 0       | NULL       | 0  |\n| 3   | Age       | INTEGER | 0       | NULL       | 0  |\n+-----+-----------+---------+---------+------------+----+\n4 rows in set (0.00 sec)\n\nsqlite&gt; DESC B;\n+-----+------------+---------+---------+------------+----+\n| cid | name       | type    | notnull | dflt_value | pk |\n+-----+------------+---------+---------+------------+----+\n| 0   | Assignment | INTEGER | 0       | NULL       | 0  |\n| 1   | Grade      | INTEGER | 0       | NULL       | 0  |\n| 2   | Student    | TEXT    | 0       | NULL       | 0  |\n+-----+------------+---------+---------+------------+----+\n3 rows in set (0.00 sec)\n\nsqlite&gt; SELECT name, AVG(grade) FROM A INNER JOIN B ON name = student\n     ;&gt; GROUP BY student;\n+---------+---------------+\n| name    | AVG(grade)    |\n+---------+---------------+\n| Jan     | 55.0          |\n| Lucy    | 88.0          |\n| Richard | 86.6666666667 |\n+---------+---------------+\n3 rows in set (0.00 sec)\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>There are no non-standard modules required to install S.W.A.D.R., but if\nthe <a href=\"https://pypi.python.org/pypi/wcwidth/0.1.4\" rel=\"nofollow\">wcwidth</a> module is\navailable, it will be used to correctly pad tables containing east Asian\ncharacters:</p>\n<div>\n<img alt=\"Table Screenshot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9160d9daf808787a0a92f41f8f8c4220afe9402/776377696474682d636f6d70617269736f6e2e676966\">\n<p>Screenshot with Asian characters</p>\n</div>\n<div id=\"option-1-setup-py-pip\">\n<h3>Option 1: setup.py / pip</h3>\n<p>A setup.py file is provided that will install the \u201cswadr\u201d Python module\nand a script for launching swadr\u2019s CLI. Execute\n<tt>python setup.py install</tt> using sudo or as privileged user to install\nthe package globally or run <tt>python setup.py install <span class=\"pre\">--user</span></tt> to\ninstall the package as the current user.</p>\n<p>Alternatively, swadr can be installed using pip, e.g.:\n<tt>pip install swadr</tt> or <tt>pip install <span class=\"pre\">--user</span> swadr</tt>.</p>\n<p>After installation with either pip or setup.py, the \u201cswadr\u201d module will\nbe importable and, provided your <tt>PATH</tt> environment variable is\nconfigured correctly, running <tt>swadr</tt> at the command line will launch\nthe command line interface. The default location for scripts packaged\nwith Python modules is generally <tt><span class=\"pre\">~/.local/bin</span></tt>, but this can be\nchanged using the\n<a href=\"http://docs.python.org/2/install/#custom-installation\" rel=\"nofollow\">\u2013install-scripts</a>\noption. The swadr CLI can also be launched by running\n<tt>python <span class=\"pre\">-m</span> swadr</tt> once the module has been installed.</p>\n</div>\n<div id=\"option-2-copying\">\n<h3>Option 2: Copying</h3>\n<p>The swadr CLI is wholly contained in the file <tt>./src/swadr.py</tt> and can\nrun independently of the rest of the files in this repository, so swadr\ncan be installed by simply copying <tt>./src/swadr.py</tt> to a folder listed\nin the <tt>PATH</tt> environment variable; <tt>$HOME/bin</tt>, <tt>/usr/local/bin</tt>,\nand <tt>/usr/bin</tt> are popular defaults \u2013\n<tt>cp ./src/swadr.py ~/bin/swadr &amp;&amp; hash <span class=\"pre\">-r</span></tt> then run <tt>swadr</tt>.</p>\n</div>\n</div>\n<div id=\"command-line-options\">\n<h2>Command Line Options</h2>\n<p><strong>NOTE:</strong> Any trailing, non-option arguments will be executed as SQLite3\nqueries after the data has been imported.</p>\n<div id=\"help-h\">\n<h3>\u2013help, -h</h3>\n<p>Show the CLI documentation and exit.</p>\n</div>\n<div id=\"a-file-z-file\">\n<h3>-A FILE, \u2026, -Z FILE</h3>\n<p>All capital, single-letter options are used to load the specified file\ninto the SQLite3 database. If no \u201c\u2013table\u201d option has been specified\nimmediately preceding the option, the letter name will be used as the\ntable name; loading a file with \u201c-A\u201d will populate the table \u201cA\u201d.</p>\n</div>\n<div id=\"table-table\">\n<h3>\u2013table=TABLE</h3>\n<p>Name of table used to store the contents of the next specified CSV file.</p>\n</div>\n<div id=\"invalid-method\">\n<h3>\u2013invalid=METHOD</h3>\n<p>Determines how rows of invalid data handled. The METHOD can be \u201cwarn\u201d,\n\u201cignore\u201d, or \u201cfail\u201d which will cause the script to emit a warning and\nskip the record, silently skip the record or terminate script execution\nrespectively. When unspecified, defaults to \u201cwarn.\u201d</p>\n</div>\n<div id=\"loglevel-level\">\n<h3>\u2013loglevel=LEVEL</h3>\n<p>Set logging verbosity level. In order from the highest verbosity to the\nlowest verbosity, can be one of \u201cDEBUG\u201d, \u201cINFO\u201d, \u201cWARNING\u201d, \u201cERROR\u201d,\n\u201cCRITICAL\u201d. The default value is \u201cWARNING.\u201d</p>\n</div>\n<div id=\"pretty\">\n<h3>\u2013pretty</h3>\n<p>Pretty-print results of queries passed as command line arguments instead\nof tab-separating the results.</p>\n</div>\n<div id=\"database-file\">\n<h3>\u2013database=FILE</h3>\n<p>Path of the SQLite3 database the queries should be executed on. When\nunspecified, the data is stored volatile memory and becomes inaccessible\nafter the program stops running.</p>\n</div>\n<div id=\"i\">\n<h3>-i</h3>\n<p>Enter interactive mode after importing data. When the \u201c\u2013database\u201d flag\nis not specified, this option is implied. In addition to being able to\nexecute normal SQLite3 queries, the interpreter also has emulated\nsupport for some of MySQL\u2019s special statements matching the following\ngrammars:</p>\n<ul>\n<li>{DESC | DESCRIBE} <strong>table_name</strong></li>\n<li>SHOW CREATE TABLE <strong>table_name</strong></li>\n<li>SHOW TABLES</li>\n</ul>\n</div>\n<div id=\"v\">\n<h3>-v</h3>\n<p>Increase logging verbosity. Can be used repeatedly to further increase\nverbosity.</p>\n</div>\n<div id=\"q\">\n<h3>-q</h3>\n<p>Decrease logging verbosity. Can be used repeatedly to further decrease\nverbosity.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1537244, "releases": {"1.2.1": []}, "urls": [], "timestamp": "Fri May  8 02:59:46 2020"}