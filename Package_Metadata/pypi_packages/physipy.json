{"info": {"author": "mocquin", "author_email": "mocquin@me.com", "bugtrack_url": null, "classifiers": [], "description": "# physipy\n\nThis python package allows you to manipulate physical quantities, basically considering in the association of a value (scalar, numpy.ndarray and more) and a physical unit (like meter or joule).\n\n```python\n>>> from physipy.quickstart import nm, hp, c, J\n>>> E_ph = hp * c / (500 * nm)\n>>> print(E_ph)\n3.9728916483435158e-19 kg*m**2/s**2\n>>> E_ph.favunit = J\n>>> print(E_ph)\n3.9728916483435158e-19 J\n```\n\nFor a quickstart, check the [quickstart notebook](https://github.com/mocquin/physipy/blob/master/quickstart.ipynb) on the [homepage](https://github.com/mocquin/physipy)\n\n## Installation\n\n```\npip install physipy\n```\n\n## Goals\n\n- Few LOC\n- Simple architecture, with only 2 classes (namely Dimension and Quantity)\n- High numpy compatibility\n- Human-readable syntax (fast syntax !)\n\n## Use case\n\n- Define scalar and arrays of physical quantities\n- Compute operation between them : add, sub, mul, div, pow, and so on\n- Display physical quantities in various \u201cunits\u201d\n\n## Implementation approach\n\nThe implementation is pretty simple : \n- a Dimension object represents a [physical dimension](https://en.wikipedia.org/wiki/Dimensional_analysis). For now, these dimension are based on the [SI unit](https://en.wikipedia.org/wiki/International_System_of_Units). It is basically a dictionary where the keys represent the base dimensions, and the values are the exponent these dimensions.\n- a Quantity object is simply the association of a value, scalar or array (or more!), and a Dimension object. Note that this Quantity classe does not sub-class numpy.ndarray (although Quantity objects are compatible with numpy's ufuncs). Most of the work is done by this class.\n- By default, a Quantity is displayed in term of SI untis. To express a Quantity in another unit, just set the \"favunit\", which stands for \"favourite unit\" of the Quantity : ```my_toe_length.favunit = mm```.\n- Plenty of common units (ex : Watt) and constants (ex : speed of light) are packed in. Your physical quantities (```my_toe_length```), units (```kg```), and constants (```kB```) are all Quantity objects.\n\n## Alternative packages\n\nThere are plenty of python packages that handle physical quantities computation. Some of them are full packages while some are just plain python module. Here is a list of those I could find (approximately sorted by guessed-popularity) :\n\n - [astropy](http://www.astropy.org/astropy-tutorials/Quantities.html)\n - [sympy](https://docs.sympy.org/latest/modules/physics/units/philosophy.html)\n - [pint](https://pint.readthedocs.io/en/latest/)\n - [unyt](https://github.com/yt-project/unyt)\n - [Unum](https://bitbucket.org/kiv/unum/)\n - [magnitude](http://juanreyero.com/open/magnitude/)\n -  physics.py : there are actually several packages based on the same core code : [ipython-physics](https://bitbucket.org/birkenfeld/ipython-physics) (python 2 only) and [python3-physics](https://github.com/TheGrum/python3-physics) (python 3 only)\n - [ScientificPython.Scientific.Physics.PhysicalQuantities](https://github.com/ScientificPython/ScientificPython)\n - [numericalunits](https://github.com/sbyrnes321/numericalunits)\n - [dimensions.py](https://code.activestate.com/recipes/577333-numerical-type-with-units-dimensionspy/) (python 2 only)\n - [units](https://bitbucket.org/adonohue/units/)\n - [quantities](https://pythonhosted.org/quantities/user/tutorial.html)\n - [physical-quantities](https://github.com/hplgit/physical-quantities)\n - [quantiphy](https://github.com/KenKundert/quantiphy)\n - [parampy](https://github.com/matthewwardrop/python-parampy/blob/master/parampy/quantities.pyx)\n - [pynbody](https://github.com/pynbody/pynbody)\n - [misu](https://github.com/cjrh/misu)\n - and finally [pysics](https://bitbucket.org/Phicem/pysics) from which this package was inspired\n\nIf you know another package that is not in this list yet, feel free to contribute ! Also, if you are interested in the subject of physical quantities packages in python, check this [quantities-comparison](https://github.com/tbekolay/quantities-comparison) repo and [this talk](https://www.youtube.com/watch?v=N-edLdxiM40).\n\n## Future\n\nHere are some functionnality/fixes/TODOs for down the road :\n - Add a list of main functionnalities of the package\n - Improve the README\n - Create a full benchmark based on an expected behaviour, and bench physical quantities packages.\n - Improve numpy compatibility\n - Add [uncertainty](https://github.com/lebigot/uncertainties/) support\n - Allow changing base unit system (cgs, Planck units, etc)\n\n## License\n\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details\n\n## Acknowledgment\n\nThumbs up to phicem and his [pysics](https://bitbucket.org/Phicem/pysics) package, on which this package was highly inspired. Check it out !\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mocquin/physipy", "keywords": "physics physical unit units dimension quantity quantities", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "physipy", "package_url": "https://pypi.org/project/physipy/", "platform": "", "project_url": "https://pypi.org/project/physipy/", "project_urls": {"Homepage": "https://github.com/mocquin/physipy"}, "release_url": "https://pypi.org/project/physipy/0.2.post1/", "requires_dist": ["numpy", "scipy", "sympy", "matplotlib"], "requires_python": "", "summary": "Manipulate physical quantities in Python", "version": "0.2.post1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>physipy</h1>\n<p>This python package allows you to manipulate physical quantities, basically considering in the association of a value (scalar, numpy.ndarray and more) and a physical unit (like meter or joule).</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">physipy.quickstart</span> <span class=\"kn\">import</span> <span class=\"n\">nm</span><span class=\"p\">,</span> <span class=\"n\">hp</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"n\">J</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">E_ph</span> <span class=\"o\">=</span> <span class=\"n\">hp</span> <span class=\"o\">*</span> <span class=\"n\">c</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"mi\">500</span> <span class=\"o\">*</span> <span class=\"n\">nm</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">E_ph</span><span class=\"p\">)</span>\n<span class=\"mf\">3.9728916483435158e-19</span> <span class=\"n\">kg</span><span class=\"o\">*</span><span class=\"n\">m</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"o\">/</span><span class=\"n\">s</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">E_ph</span><span class=\"o\">.</span><span class=\"n\">favunit</span> <span class=\"o\">=</span> <span class=\"n\">J</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">E_ph</span><span class=\"p\">)</span>\n<span class=\"mf\">3.9728916483435158e-19</span> <span class=\"n\">J</span>\n</pre>\n<p>For a quickstart, check the <a href=\"https://github.com/mocquin/physipy/blob/master/quickstart.ipynb\" rel=\"nofollow\">quickstart notebook</a> on the <a href=\"https://github.com/mocquin/physipy\" rel=\"nofollow\">homepage</a></p>\n<h2>Installation</h2>\n<pre><code>pip install physipy\n</code></pre>\n<h2>Goals</h2>\n<ul>\n<li>Few LOC</li>\n<li>Simple architecture, with only 2 classes (namely Dimension and Quantity)</li>\n<li>High numpy compatibility</li>\n<li>Human-readable syntax (fast syntax !)</li>\n</ul>\n<h2>Use case</h2>\n<ul>\n<li>Define scalar and arrays of physical quantities</li>\n<li>Compute operation between them : add, sub, mul, div, pow, and so on</li>\n<li>Display physical quantities in various \u201cunits\u201d</li>\n</ul>\n<h2>Implementation approach</h2>\n<p>The implementation is pretty simple :</p>\n<ul>\n<li>a Dimension object represents a <a href=\"https://en.wikipedia.org/wiki/Dimensional_analysis\" rel=\"nofollow\">physical dimension</a>. For now, these dimension are based on the <a href=\"https://en.wikipedia.org/wiki/International_System_of_Units\" rel=\"nofollow\">SI unit</a>. It is basically a dictionary where the keys represent the base dimensions, and the values are the exponent these dimensions.</li>\n<li>a Quantity object is simply the association of a value, scalar or array (or more!), and a Dimension object. Note that this Quantity classe does not sub-class numpy.ndarray (although Quantity objects are compatible with numpy's ufuncs). Most of the work is done by this class.</li>\n<li>By default, a Quantity is displayed in term of SI untis. To express a Quantity in another unit, just set the \"favunit\", which stands for \"favourite unit\" of the Quantity : <code>my_toe_length.favunit = mm</code>.</li>\n<li>Plenty of common units (ex : Watt) and constants (ex : speed of light) are packed in. Your physical quantities (<code>my_toe_length</code>), units (<code>kg</code>), and constants (<code>kB</code>) are all Quantity objects.</li>\n</ul>\n<h2>Alternative packages</h2>\n<p>There are plenty of python packages that handle physical quantities computation. Some of them are full packages while some are just plain python module. Here is a list of those I could find (approximately sorted by guessed-popularity) :</p>\n<ul>\n<li><a href=\"http://www.astropy.org/astropy-tutorials/Quantities.html\" rel=\"nofollow\">astropy</a></li>\n<li><a href=\"https://docs.sympy.org/latest/modules/physics/units/philosophy.html\" rel=\"nofollow\">sympy</a></li>\n<li><a href=\"https://pint.readthedocs.io/en/latest/\" rel=\"nofollow\">pint</a></li>\n<li><a href=\"https://github.com/yt-project/unyt\" rel=\"nofollow\">unyt</a></li>\n<li><a href=\"https://bitbucket.org/kiv/unum/\" rel=\"nofollow\">Unum</a></li>\n<li><a href=\"http://juanreyero.com/open/magnitude/\" rel=\"nofollow\">magnitude</a></li>\n<li>physics.py : there are actually several packages based on the same core code : <a href=\"https://bitbucket.org/birkenfeld/ipython-physics\" rel=\"nofollow\">ipython-physics</a> (python 2 only) and <a href=\"https://github.com/TheGrum/python3-physics\" rel=\"nofollow\">python3-physics</a> (python 3 only)</li>\n<li><a href=\"https://github.com/ScientificPython/ScientificPython\" rel=\"nofollow\">ScientificPython.Scientific.Physics.PhysicalQuantities</a></li>\n<li><a href=\"https://github.com/sbyrnes321/numericalunits\" rel=\"nofollow\">numericalunits</a></li>\n<li><a href=\"https://code.activestate.com/recipes/577333-numerical-type-with-units-dimensionspy/\" rel=\"nofollow\">dimensions.py</a> (python 2 only)</li>\n<li><a href=\"https://bitbucket.org/adonohue/units/\" rel=\"nofollow\">units</a></li>\n<li><a href=\"https://pythonhosted.org/quantities/user/tutorial.html\" rel=\"nofollow\">quantities</a></li>\n<li><a href=\"https://github.com/hplgit/physical-quantities\" rel=\"nofollow\">physical-quantities</a></li>\n<li><a href=\"https://github.com/KenKundert/quantiphy\" rel=\"nofollow\">quantiphy</a></li>\n<li><a href=\"https://github.com/matthewwardrop/python-parampy/blob/master/parampy/quantities.pyx\" rel=\"nofollow\">parampy</a></li>\n<li><a href=\"https://github.com/pynbody/pynbody\" rel=\"nofollow\">pynbody</a></li>\n<li><a href=\"https://github.com/cjrh/misu\" rel=\"nofollow\">misu</a></li>\n<li>and finally <a href=\"https://bitbucket.org/Phicem/pysics\" rel=\"nofollow\">pysics</a> from which this package was inspired</li>\n</ul>\n<p>If you know another package that is not in this list yet, feel free to contribute ! Also, if you are interested in the subject of physical quantities packages in python, check this <a href=\"https://github.com/tbekolay/quantities-comparison\" rel=\"nofollow\">quantities-comparison</a> repo and <a href=\"https://www.youtube.com/watch?v=N-edLdxiM40\" rel=\"nofollow\">this talk</a>.</p>\n<h2>Future</h2>\n<p>Here are some functionnality/fixes/TODOs for down the road :</p>\n<ul>\n<li>Add a list of main functionnalities of the package</li>\n<li>Improve the README</li>\n<li>Create a full benchmark based on an expected behaviour, and bench physical quantities packages.</li>\n<li>Improve numpy compatibility</li>\n<li>Add <a href=\"https://github.com/lebigot/uncertainties/\" rel=\"nofollow\">uncertainty</a> support</li>\n<li>Allow changing base unit system (cgs, Planck units, etc)</li>\n</ul>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details</p>\n<h2>Acknowledgment</h2>\n<p>Thumbs up to phicem and his <a href=\"https://bitbucket.org/Phicem/pysics\" rel=\"nofollow\">pysics</a> package, on which this package was highly inspired. Check it out !</p>\n\n          </div>"}, "last_serial": 7058304, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "14bce5650b82d2f1efb5a4330ad3e20e", "sha256": "9d79751b514cf076d2e94cdf68eb6125a9b6232acfd54a18367d6abc1fe1e8ab"}, "downloads": -1, "filename": "physipy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14bce5650b82d2f1efb5a4330ad3e20e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 24798, "upload_time": "2019-04-13T19:16:29", "upload_time_iso_8601": "2019-04-13T19:16:29.139631Z", "url": "https://files.pythonhosted.org/packages/cc/7a/879c361cc082428615af41e395f73fd7236a125a378d6970863d3b374040/physipy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51b342514e7d0cdf3f06cbef7cd2761f", "sha256": "af6e8e5d11e634d58a932ec70da9c3655b73aa8f627a10617bac7231361eaa46"}, "downloads": -1, "filename": "physipy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "51b342514e7d0cdf3f06cbef7cd2761f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20534, "upload_time": "2019-04-13T19:16:31", "upload_time_iso_8601": "2019-04-13T19:16:31.295935Z", "url": "https://files.pythonhosted.org/packages/3e/80/a8ac0d85e5ad8f4485ad1215f8789a374387a3f56cb39b8e5b7c39f3ee40/physipy-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "db11edf18707ed1b43e54a95f6594054", "sha256": "04260e51183ba261418a1a66847e8d7bd94c14d1c8b69bfe000373a6c56ff49a"}, "downloads": -1, "filename": "physipy-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db11edf18707ed1b43e54a95f6594054", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 32964, "upload_time": "2020-03-18T18:59:45", "upload_time_iso_8601": "2020-03-18T18:59:45.256210Z", "url": "https://files.pythonhosted.org/packages/b1/c7/7a1f8871da31802952ae59b786d2d16bf60d438584f3b1647ec7316af6ca/physipy-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eed929312f695b9cb1019ef85b1c801b", "sha256": "3a7197e3d9eea57e78c981a4804ccfb4d323576b36ccdd1f79b6379f790eb550"}, "downloads": -1, "filename": "physipy-0.2.0.tar.gz", "has_sig": false, "md5_digest": "eed929312f695b9cb1019ef85b1c801b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29973, "upload_time": "2020-03-18T18:59:46", "upload_time_iso_8601": "2020-03-18T18:59:46.839682Z", "url": "https://files.pythonhosted.org/packages/97/90/6e29db7ebb9eb6468399f64e52c89f2a84d0ac220b6ec46388d9afac8f1c/physipy-0.2.0.tar.gz", "yanked": false}], "0.2.post1": [{"comment_text": "", "digests": {"md5": "c561e883a5621edbabaa65f93f6b01d8", "sha256": "e38f56134eafed8cb005da93d60ead776d85b08b0bd44defcdb117ee3300ac24"}, "downloads": -1, "filename": "physipy-0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c561e883a5621edbabaa65f93f6b01d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25221, "upload_time": "2020-04-20T08:07:29", "upload_time_iso_8601": "2020-04-20T08:07:29.977914Z", "url": "https://files.pythonhosted.org/packages/8c/8e/80c694a215af067233dd6ab9f22b3af3eb8f57dc2cd4b2137c870c7c210d/physipy-0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c79cb4d41cea8b18a720a242b83f0c3e", "sha256": "2a66009ff9269b62c21cc15306868315c10de18eae980b6312884004952b3221"}, "downloads": -1, "filename": "physipy-0.2.post1.tar.gz", "has_sig": false, "md5_digest": "c79cb4d41cea8b18a720a242b83f0c3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38215, "upload_time": "2020-04-20T08:07:31", "upload_time_iso_8601": "2020-04-20T08:07:31.538344Z", "url": "https://files.pythonhosted.org/packages/54/a9/2740c8e6986ff4dd0525d62afd7eda4a954cf52d8d99fc83c5e2a2058edd/physipy-0.2.post1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c561e883a5621edbabaa65f93f6b01d8", "sha256": "e38f56134eafed8cb005da93d60ead776d85b08b0bd44defcdb117ee3300ac24"}, "downloads": -1, "filename": "physipy-0.2.post1-py3-none-any.whl", "has_sig": false, "md5_digest": "c561e883a5621edbabaa65f93f6b01d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25221, "upload_time": "2020-04-20T08:07:29", "upload_time_iso_8601": "2020-04-20T08:07:29.977914Z", "url": "https://files.pythonhosted.org/packages/8c/8e/80c694a215af067233dd6ab9f22b3af3eb8f57dc2cd4b2137c870c7c210d/physipy-0.2.post1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c79cb4d41cea8b18a720a242b83f0c3e", "sha256": "2a66009ff9269b62c21cc15306868315c10de18eae980b6312884004952b3221"}, "downloads": -1, "filename": "physipy-0.2.post1.tar.gz", "has_sig": false, "md5_digest": "c79cb4d41cea8b18a720a242b83f0c3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38215, "upload_time": "2020-04-20T08:07:31", "upload_time_iso_8601": "2020-04-20T08:07:31.538344Z", "url": "https://files.pythonhosted.org/packages/54/a9/2740c8e6986ff4dd0525d62afd7eda4a954cf52d8d99fc83c5e2a2058edd/physipy-0.2.post1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:12 2020"}