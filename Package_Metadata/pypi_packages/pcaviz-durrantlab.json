{"info": {"author": "Jacob Durrant", "author_email": "durrantj@pitt.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Operating System :: OS Independent"], "description": "# PCAViz #\n\n## Introduction ##\n\nPCAViz is an open-source Python/JavaScript toolkit for sharing and visualizing\nMD trajectories via a web browser. We release it under the terms of the\nopen-source GNU General Public License, version 2 (see `LICENSE.md`). This\npackage includes only the Compressor (Python) component of the toolkit. See\n[http://git.durrantlab.com/jdurrant/pcaviz](http://git.durrantlab.com/jdurrant/pcaviz)\nfor the complete toolkit, including the JavaScript and WordPress components.\n\n## PCAViz Compressor (Python) ##\n\nThe PCAViz Compressor is a Python script that uses lossy compression (i.e.,\nprincipal component analysis and other strategies) to process trajectories.\nThe compressor saves this data as a minified JSON file that can itself be\nfurther compressed using algorithms such as GZIP.\n\n### Download ###\n\nThe [Git repository](http://git.durrantlab.com/jdurrant/pcaviz):\n`pcaviz-compressor-python/`\n\nIf you would like to download the compressor without downloading (or cloning)\nthe entire repository, click on `pcaviz-compressor-python.zip`.\n\nYou can also install the PCAViz Compressor via `pip`:\n\n```bash\npip install pcaviz-durrantlab\n```\n\n### Available User Parameters ###\n\n```text\n  -h, --help         show this help message and exit\n  --top_file [t]     The topology filename (e.g., psf).\n  --coor_file [c]    The coordinate (trajectory) filename (e.g., dcd).\n  --selection [s]    Which atoms to save to the JSON output file (default:\n                     \"name CA C N O\"). See https://goo.gl/kVeQuN to learn how\n                     to construct an atom selection string.\n  --output_dir [od]  The directory where output files should be saved. The\n                     directory will be created if it does not exist. (default:\n                     the directory where the coordinate file is located).\n  --stride [ns]      How many frames to stride. For example, stride = 2 means\n                     every other frame will be saved, and stride = 3 means\n                     every third frame will be saved. (default: 1, no stride).\n  --cum_var [var]    The target cumulative variance, as a float. PCAViz will\n                     use the minimum number of principal components required\n                     to capture at least this variance (default: 0.90).\n  --precision [p]    The number of decimal places to retain when rounding PCA\n                     vectors, coefficients, and atomic coordinates (default:\n                     2, meaning round to the hundredths).\n  --check_accuracy   Create a csv file containing the frame-to-frame RMSDs\n                     between original- and decompressed-trajectory frames.\n                     Useful for testing the impact of different settings on\n                     atom-position accuracy.\n  --test             Tests PCAViz to make sure all components are functioning.\n```\n\n### Examples of Use ###\n\n(Note: if you install the PCAViz Compressor via `pip`, use the global `pcaviz`\ncommand in place of `python PCAViz.py` below.)\n\n1. Create a compressed JSON file from a topology (1J8K_example.psf) and a\n   trajectory/coordinate (1J8K_example.dcd) file. <br>\n   `python PCAViz.py --top_file examples/1J8K_example.psf --coor_file examples/1J8K_example.dcd`\n\n2. PDB files can also contain multiple frames. In this case, the same file\n   serves as the topology and trajectory file. <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb`\n\n3. By default, PCAViz includes only the backbone atoms in the output. These\n   atoms should be enough for cartoon-style visualization. But you can select\n   your own atoms to include in the output. See https://goo.gl/kVeQuN to learn\n   how to construct an atom-selection string. <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --selection \"name *\"`\n\n4. Striding the trajectory frames can reduce file sizes. PCAViz will\n   interpolate between the remaining frames to fill in the frames that are\n   missing. Here we keep only every other frame: <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --stride 2`\n\n5. PCAViz allows users to control the compression settings. Two settings are\n   available. First, the user can specify how much of the cumulative variance\n   should be explained by the principal components. PCAViz will pick the\n   number of components required to meet that goal. Second, the user can\n   specify how precisely PCAViz should represent numeric values (e.g.,\n   principal-component coefficients). For example, here we tell PCAViz to\n   produce a trajectory that accounts for 80% of the variance, and to round all\n   numbers in the output JSON file to the nearest hundredth (two decimal\n   places): <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --cum_var 0.8 --precision 2`\n\n6. To find the ideal --cum_var and --precision parameters, you may wish to\n   check how closely the PCAViz-compressed trajectory matches the original\n   trajectory. You can instruct PCAViz to output a CSV file that provides a\n   frame-by-frame RMSD comparison between the two trajectories. This option\n   also outputs an XYZ trajectory file that you can visually compare to the\n   original. <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --check_accuracy`\n\n7. By default, PCAViz saves the compressed JSON file to the same directory\n   where the coordinate file is located. You can specify a different output\n   directory if needed. The directory will be created if it doesn't exist.\n   <br>\n   `python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --output_dir \"my_dir\"`\n\n8. For debugging purposes, PCAViz also includes an option to test whether the\n   code is fully functional. <br>\n   `python PCAViz.py --test`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://git.durrantlab.com/jdurrant/pcaviz", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pcaviz-durrantlab", "package_url": "https://pypi.org/project/pcaviz-durrantlab/", "platform": "", "project_url": "https://pypi.org/project/pcaviz-durrantlab/", "project_urls": {"Homepage": "http://git.durrantlab.com/jdurrant/pcaviz"}, "release_url": "https://pypi.org/project/pcaviz-durrantlab/1.2/", "requires_dist": ["scikit-learn (>=0.19.1)", "numpy (>=1.15.2)", "MDAnalysis (>=0.17.0)"], "requires_python": "", "summary": "A script to compress molecular dynamics simulations so they can be visualized with PCAViz in a web browser.", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PCAViz</h1>\n<h2>Introduction</h2>\n<p>PCAViz is an open-source Python/JavaScript toolkit for sharing and visualizing\nMD trajectories via a web browser. We release it under the terms of the\nopen-source GNU General Public License, version 2 (see <code>LICENSE.md</code>). This\npackage includes only the Compressor (Python) component of the toolkit. See\n<a href=\"http://git.durrantlab.com/jdurrant/pcaviz\" rel=\"nofollow\">http://git.durrantlab.com/jdurrant/pcaviz</a>\nfor the complete toolkit, including the JavaScript and WordPress components.</p>\n<h2>PCAViz Compressor (Python)</h2>\n<p>The PCAViz Compressor is a Python script that uses lossy compression (i.e.,\nprincipal component analysis and other strategies) to process trajectories.\nThe compressor saves this data as a minified JSON file that can itself be\nfurther compressed using algorithms such as GZIP.</p>\n<h3>Download</h3>\n<p>The <a href=\"http://git.durrantlab.com/jdurrant/pcaviz\" rel=\"nofollow\">Git repository</a>:\n<code>pcaviz-compressor-python/</code></p>\n<p>If you would like to download the compressor without downloading (or cloning)\nthe entire repository, click on <code>pcaviz-compressor-python.zip</code>.</p>\n<p>You can also install the PCAViz Compressor via <code>pip</code>:</p>\n<pre>pip install pcaviz-durrantlab\n</pre>\n<h3>Available User Parameters</h3>\n<pre>  -h, --help         show this help message and exit\n  --top_file [t]     The topology filename (e.g., psf).\n  --coor_file [c]    The coordinate (trajectory) filename (e.g., dcd).\n  --selection [s]    Which atoms to save to the JSON output file (default:\n                     \"name CA C N O\"). See https://goo.gl/kVeQuN to learn how\n                     to construct an atom selection string.\n  --output_dir [od]  The directory where output files should be saved. The\n                     directory will be created if it does not exist. (default:\n                     the directory where the coordinate file is located).\n  --stride [ns]      How many frames to stride. For example, stride = 2 means\n                     every other frame will be saved, and stride = 3 means\n                     every third frame will be saved. (default: 1, no stride).\n  --cum_var [var]    The target cumulative variance, as a float. PCAViz will\n                     use the minimum number of principal components required\n                     to capture at least this variance (default: 0.90).\n  --precision [p]    The number of decimal places to retain when rounding PCA\n                     vectors, coefficients, and atomic coordinates (default:\n                     2, meaning round to the hundredths).\n  --check_accuracy   Create a csv file containing the frame-to-frame RMSDs\n                     between original- and decompressed-trajectory frames.\n                     Useful for testing the impact of different settings on\n                     atom-position accuracy.\n  --test             Tests PCAViz to make sure all components are functioning.\n</pre>\n<h3>Examples of Use</h3>\n<p>(Note: if you install the PCAViz Compressor via <code>pip</code>, use the global <code>pcaviz</code>\ncommand in place of <code>python PCAViz.py</code> below.)</p>\n<ol>\n<li>\n<p>Create a compressed JSON file from a topology (1J8K_example.psf) and a\ntrajectory/coordinate (1J8K_example.dcd) file. <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.psf --coor_file examples/1J8K_example.dcd</code></p>\n</li>\n<li>\n<p>PDB files can also contain multiple frames. In this case, the same file\nserves as the topology and trajectory file. <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb</code></p>\n</li>\n<li>\n<p>By default, PCAViz includes only the backbone atoms in the output. These\natoms should be enough for cartoon-style visualization. But you can select\nyour own atoms to include in the output. See <a href=\"https://goo.gl/kVeQuN\" rel=\"nofollow\">https://goo.gl/kVeQuN</a> to learn\nhow to construct an atom-selection string. <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --selection \"name *\"</code></p>\n</li>\n<li>\n<p>Striding the trajectory frames can reduce file sizes. PCAViz will\ninterpolate between the remaining frames to fill in the frames that are\nmissing. Here we keep only every other frame: <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --stride 2</code></p>\n</li>\n<li>\n<p>PCAViz allows users to control the compression settings. Two settings are\navailable. First, the user can specify how much of the cumulative variance\nshould be explained by the principal components. PCAViz will pick the\nnumber of components required to meet that goal. Second, the user can\nspecify how precisely PCAViz should represent numeric values (e.g.,\nprincipal-component coefficients). For example, here we tell PCAViz to\nproduce a trajectory that accounts for 80% of the variance, and to round all\nnumbers in the output JSON file to the nearest hundredth (two decimal\nplaces): <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --cum_var 0.8 --precision 2</code></p>\n</li>\n<li>\n<p>To find the ideal --cum_var and --precision parameters, you may wish to\ncheck how closely the PCAViz-compressed trajectory matches the original\ntrajectory. You can instruct PCAViz to output a CSV file that provides a\nframe-by-frame RMSD comparison between the two trajectories. This option\nalso outputs an XYZ trajectory file that you can visually compare to the\noriginal. <br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --check_accuracy</code></p>\n</li>\n<li>\n<p>By default, PCAViz saves the compressed JSON file to the same directory\nwhere the coordinate file is located. You can specify a different output\ndirectory if needed. The directory will be created if it doesn't exist.\n<br>\n<code>python PCAViz.py --top_file examples/1J8K_example.pdb --coor_file examples/1J8K_example.pdb --output_dir \"my_dir\"</code></p>\n</li>\n<li>\n<p>For debugging purposes, PCAViz also includes an option to test whether the\ncode is fully functional. <br>\n<code>python PCAViz.py --test</code></p>\n</li>\n</ol>\n\n          </div>"}, "last_serial": 5909605, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "51dcc1c977f33c9265efe02531c94d20", "sha256": "ea936e5789d6ed6dde3c2461e5255b2d59ccab660a0398977b42ac011395d50b"}, "downloads": -1, "filename": "pcaviz_durrantlab-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "51dcc1c977f33c9265efe02531c94d20", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122555, "upload_time": "2019-09-30T22:41:43", "upload_time_iso_8601": "2019-09-30T22:41:43.203920Z", "url": "https://files.pythonhosted.org/packages/82/8a/188b1680a0a0d803386ecfa7fc66d874f6abc7e0706235a63e819c0c9e7d/pcaviz_durrantlab-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35bad302dd13832adddc3fe09c2be3e9", "sha256": "124cc20977a6cadebcbf986270130f6aa53dda8e4fc36b280c2d4a21964b91ce"}, "downloads": -1, "filename": "pcaviz-durrantlab-1.1.tar.gz", "has_sig": false, "md5_digest": "35bad302dd13832adddc3fe09c2be3e9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122733, "upload_time": "2019-09-30T22:41:45", "upload_time_iso_8601": "2019-09-30T22:41:45.738759Z", "url": "https://files.pythonhosted.org/packages/12/48/fbcb3ae960dc237d1643fc1746efdaad5ee343e0e5290fa2a5cc00d5ebbc/pcaviz-durrantlab-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "b03caf9ee88e295f6745b1a5299ffa3e", "sha256": "17371359218f4d6cd2e5e2af934f50da290a4e119c38276b2a3b878fccdffea5"}, "downloads": -1, "filename": "pcaviz_durrantlab-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b03caf9ee88e295f6745b1a5299ffa3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122626, "upload_time": "2019-09-30T23:32:16", "upload_time_iso_8601": "2019-09-30T23:32:16.220521Z", "url": "https://files.pythonhosted.org/packages/42/97/a2b0779984c13f3bcb1a15d374b537c7718afaffd0545b5a31db4f929559/pcaviz_durrantlab-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5df7603e5fa61488ccd5e9d6f327c00", "sha256": "f1815ba145b2195b6b323fe8dcd4501fbd6b2b9ae0ed959da10f7377db158204"}, "downloads": -1, "filename": "pcaviz-durrantlab-1.2.tar.gz", "has_sig": false, "md5_digest": "e5df7603e5fa61488ccd5e9d6f327c00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122901, "upload_time": "2019-09-30T23:32:17", "upload_time_iso_8601": "2019-09-30T23:32:17.956819Z", "url": "https://files.pythonhosted.org/packages/12/ad/609acdb0f5a85a7150f1447c34e7209f60bed988692e5161f7c36caa53bb/pcaviz-durrantlab-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b03caf9ee88e295f6745b1a5299ffa3e", "sha256": "17371359218f4d6cd2e5e2af934f50da290a4e119c38276b2a3b878fccdffea5"}, "downloads": -1, "filename": "pcaviz_durrantlab-1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b03caf9ee88e295f6745b1a5299ffa3e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 122626, "upload_time": "2019-09-30T23:32:16", "upload_time_iso_8601": "2019-09-30T23:32:16.220521Z", "url": "https://files.pythonhosted.org/packages/42/97/a2b0779984c13f3bcb1a15d374b537c7718afaffd0545b5a31db4f929559/pcaviz_durrantlab-1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5df7603e5fa61488ccd5e9d6f327c00", "sha256": "f1815ba145b2195b6b323fe8dcd4501fbd6b2b9ae0ed959da10f7377db158204"}, "downloads": -1, "filename": "pcaviz-durrantlab-1.2.tar.gz", "has_sig": false, "md5_digest": "e5df7603e5fa61488ccd5e9d6f327c00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 122901, "upload_time": "2019-09-30T23:32:17", "upload_time_iso_8601": "2019-09-30T23:32:17.956819Z", "url": "https://files.pythonhosted.org/packages/12/ad/609acdb0f5a85a7150f1447c34e7209f60bed988692e5161f7c36caa53bb/pcaviz-durrantlab-1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:29 2020"}