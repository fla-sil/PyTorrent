{"info": {"author": "jamesqin", "author_email": "jamesqin@vip.qq.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# Tiny Retry\n\n## What is TinyRetry?\ntinyretry is a python module that provides failure retry encapsulation for the target function\n\n## Programming Language\n- python 2.7\n- python 3.7\n\n## Install\n```\npip install tinyretry \n```\n\n## Quick Start\nuse python decorators syntax to wrap the call target\n\n### Case 1: retry until the return code equals to the special value\nWhen we call the function and hope to get the special return code, then we can use `RetryUntilForJson` or `RetryUntilForBool`\n```\nfrom tinyretry import RetryUntilForJson\n\n@RetryUntilForJson(retry_code_key='errno', expected_err_code=0, max_retry_num = 10, retry_interval_sec = 0.1)\ndef DoHttpRequest1():\n    errno = random.randint(0,2)\n    errmsg_arr = ['ok', 'err-timeout', 'err-req-limit']\n    return {\n        \"errno\": errno,\n        \"errmsg\": errmsg_arr[errno]\n    }\n\nclass Test_TinyRetry(unittest.TestCase):\n    def test_RetryUntilForJson(self):\n        for i in range(5):\n            res = DoHttpRequest1()\n            self.assertEqual(res[\"errno\"], 0)\n```\n\nThen you can get the return value from the function `DoHttpRequest1()` which must be successful, the call log like this:\n```\nbogon:tinyretry jamesqin$ python tinyretry_test.py\n2020-02-14 14:03:14,754 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,754 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:14,754 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,754 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:03:14,859 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:14,860 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,860 - root - INFO -     Error code 1 was found, retry 1\n2020-02-14 14:03:14,964 - root - INFO -     Error code 1 was found, retry 2\n2020-02-14 14:03:15,070 - root - INFO -     Error code 1 was found, retry 3\n2020-02-14 14:03:15,172 - root - INFO -     Error code 2 was found, retry 4\n2020-02-14 14:03:15,278 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:15,278 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:15,278 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:03:15,381 - root - INFO -     Error code 1 was found, retry 2\n2020-02-14 14:03:15,482 - root - INFO -     Error code 1 was found, retry 3\n2020-02-14 14:03:15,586 - root - INFO -     Error code 1 was found, retry 4\n2020-02-14 14:03:15,692 - root - INFO -     Error code 2 was found, retry 5\n2020-02-14 14:03:15,794 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:15,794 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:15,794 - root - INFO -     Get expected error code 0\n.\n----------------------------------------------------------------------\nRan 1 test in 1.040s\n\nOK\n```\n\n### Case 2: while the return code equals to the special value, we will retry\nWhen we call the function and hope to skip the special return code, then we can use `RetryWhileForJson` or `RetryWhileForBool`\n```\nfrom tinyretry import RetryWhileForJson\n\n@RetryWhileForJson(retry_code_key='errno', not_expected_err_code=2, max_retry_num = 10, retry_interval_sec = 0.1)\ndef DoHttpRequest2():\n    errno = random.randint(0,2)\n    errmsg_arr = ['ok', 'err-timeout', 'err-req-limit']\n    return {\n        \"errno\": errno,\n        \"errmsg\": errmsg_arr[errno]\n    }\n\nclass Test_TinyRetry(unittest.TestCase):\n    def test_RetryWhileForJson(self):\n        for i in range(5):\n            res = DoHttpRequest2()\n            self.assertNotEqual(res[\"errno\"], 2)\n```\n\nthen call log look like this:\n```\n2020-02-14 14:13:30,708 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:30,708 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:30,810 - root - INFO -     Error code 2 was found, retry 2\n2020-02-14 14:13:30,912 - root - INFO -     Error code 2 was found, retry 3\n2020-02-14 14:13:31,013 - root - INFO -     Error code 2 was found, retry 4\n2020-02-14 14:13:31,117 - root - INFO -     Error code 2 was found, retry 5\n2020-02-14 14:13:31,222 - root - INFO -     Get not expected error code 1\n2020-02-14 14:13:31,222 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,222 - root - INFO -     Get not expected error code 0\n2020-02-14 14:13:31,222 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,222 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:31,324 - root - INFO -     Get not expected error code 0\n2020-02-14 14:13:31,324 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,324 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:31,426 - root - INFO -     Error code 2 was found, retry 2\n2020-02-14 14:13:31,529 - root - INFO -     Get not expected error code 1\n2020-02-14 14:13:31,529 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,529 - root - INFO -     Get not expected error code 1\n```\n\n\n## Other useful retry functions:\nThis package provide two scenarios of failure retries\n- Until scene\n    - RetryUntilForJson()\n    - RetryUntilForBool()\n- while scene\n    - RetryWhileForJson()\n    - RetryWhileForBool()", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jamesqin-cn/tinyretry", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "tinyretry", "package_url": "https://pypi.org/project/tinyretry/", "platform": "any", "project_url": "https://pypi.org/project/tinyretry/", "project_urls": {"Homepage": "https://github.com/jamesqin-cn/tinyretry"}, "release_url": "https://pypi.org/project/tinyretry/0.1.4/", "requires_dist": null, "requires_python": "", "summary": "tinyretry is a python module that provides failure retry encapsulation for the target function", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Tiny Retry</h1>\n<h2>What is TinyRetry?</h2>\n<p>tinyretry is a python module that provides failure retry encapsulation for the target function</p>\n<h2>Programming Language</h2>\n<ul>\n<li>python 2.7</li>\n<li>python 3.7</li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install tinyretry \n</code></pre>\n<h2>Quick Start</h2>\n<p>use python decorators syntax to wrap the call target</p>\n<h3>Case 1: retry until the return code equals to the special value</h3>\n<p>When we call the function and hope to get the special return code, then we can use <code>RetryUntilForJson</code> or <code>RetryUntilForBool</code></p>\n<pre><code>from tinyretry import RetryUntilForJson\n\n@RetryUntilForJson(retry_code_key='errno', expected_err_code=0, max_retry_num = 10, retry_interval_sec = 0.1)\ndef DoHttpRequest1():\n    errno = random.randint(0,2)\n    errmsg_arr = ['ok', 'err-timeout', 'err-req-limit']\n    return {\n        \"errno\": errno,\n        \"errmsg\": errmsg_arr[errno]\n    }\n\nclass Test_TinyRetry(unittest.TestCase):\n    def test_RetryUntilForJson(self):\n        for i in range(5):\n            res = DoHttpRequest1()\n            self.assertEqual(res[\"errno\"], 0)\n</code></pre>\n<p>Then you can get the return value from the function <code>DoHttpRequest1()</code> which must be successful, the call log like this:</p>\n<pre><code>bogon:tinyretry jamesqin$ python tinyretry_test.py\n2020-02-14 14:03:14,754 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,754 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:14,754 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,754 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:03:14,859 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:14,860 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:14,860 - root - INFO -     Error code 1 was found, retry 1\n2020-02-14 14:03:14,964 - root - INFO -     Error code 1 was found, retry 2\n2020-02-14 14:03:15,070 - root - INFO -     Error code 1 was found, retry 3\n2020-02-14 14:03:15,172 - root - INFO -     Error code 2 was found, retry 4\n2020-02-14 14:03:15,278 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:15,278 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:15,278 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:03:15,381 - root - INFO -     Error code 1 was found, retry 2\n2020-02-14 14:03:15,482 - root - INFO -     Error code 1 was found, retry 3\n2020-02-14 14:03:15,586 - root - INFO -     Error code 1 was found, retry 4\n2020-02-14 14:03:15,692 - root - INFO -     Error code 2 was found, retry 5\n2020-02-14 14:03:15,794 - root - INFO -     Get expected error code 0\n2020-02-14 14:03:15,794 - root - INFO - call RetryUntilForJson(DoHttpRequest)(...)\n2020-02-14 14:03:15,794 - root - INFO -     Get expected error code 0\n.\n----------------------------------------------------------------------\nRan 1 test in 1.040s\n\nOK\n</code></pre>\n<h3>Case 2: while the return code equals to the special value, we will retry</h3>\n<p>When we call the function and hope to skip the special return code, then we can use <code>RetryWhileForJson</code> or <code>RetryWhileForBool</code></p>\n<pre><code>from tinyretry import RetryWhileForJson\n\n@RetryWhileForJson(retry_code_key='errno', not_expected_err_code=2, max_retry_num = 10, retry_interval_sec = 0.1)\ndef DoHttpRequest2():\n    errno = random.randint(0,2)\n    errmsg_arr = ['ok', 'err-timeout', 'err-req-limit']\n    return {\n        \"errno\": errno,\n        \"errmsg\": errmsg_arr[errno]\n    }\n\nclass Test_TinyRetry(unittest.TestCase):\n    def test_RetryWhileForJson(self):\n        for i in range(5):\n            res = DoHttpRequest2()\n            self.assertNotEqual(res[\"errno\"], 2)\n</code></pre>\n<p>then call log look like this:</p>\n<pre><code>2020-02-14 14:13:30,708 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:30,708 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:30,810 - root - INFO -     Error code 2 was found, retry 2\n2020-02-14 14:13:30,912 - root - INFO -     Error code 2 was found, retry 3\n2020-02-14 14:13:31,013 - root - INFO -     Error code 2 was found, retry 4\n2020-02-14 14:13:31,117 - root - INFO -     Error code 2 was found, retry 5\n2020-02-14 14:13:31,222 - root - INFO -     Get not expected error code 1\n2020-02-14 14:13:31,222 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,222 - root - INFO -     Get not expected error code 0\n2020-02-14 14:13:31,222 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,222 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:31,324 - root - INFO -     Get not expected error code 0\n2020-02-14 14:13:31,324 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,324 - root - INFO -     Error code 2 was found, retry 1\n2020-02-14 14:13:31,426 - root - INFO -     Error code 2 was found, retry 2\n2020-02-14 14:13:31,529 - root - INFO -     Get not expected error code 1\n2020-02-14 14:13:31,529 - root - INFO - call RetryWhileForJson(DoHttpRequest2)(...)\n2020-02-14 14:13:31,529 - root - INFO -     Get not expected error code 1\n</code></pre>\n<h2>Other useful retry functions:</h2>\n<p>This package provide two scenarios of failure retries</p>\n<ul>\n<li>Until scene\n<ul>\n<li>RetryUntilForJson()</li>\n<li>RetryUntilForBool()</li>\n</ul>\n</li>\n<li>while scene\n<ul>\n<li>RetryWhileForJson()</li>\n<li>RetryWhileForBool()</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6767325, "releases": {"0.1.4": [{"comment_text": "", "digests": {"md5": "da68f1f095e73d437e413b1fe198b3ff", "sha256": "6e0c5ec4c9c465e76b23e93b82569372ab71b29d89fc8975ce41b12df454b382"}, "downloads": -1, "filename": "tinyretry-0.1.4.tar.gz", "has_sig": false, "md5_digest": "da68f1f095e73d437e413b1fe198b3ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3033, "upload_time": "2020-02-14T06:25:28", "upload_time_iso_8601": "2020-02-14T06:25:28.809734Z", "url": "https://files.pythonhosted.org/packages/78/91/70dd1a695486c14b9a8af75a7ec21dcb7125522bc079a8f3a3ce4f05bf6e/tinyretry-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da68f1f095e73d437e413b1fe198b3ff", "sha256": "6e0c5ec4c9c465e76b23e93b82569372ab71b29d89fc8975ce41b12df454b382"}, "downloads": -1, "filename": "tinyretry-0.1.4.tar.gz", "has_sig": false, "md5_digest": "da68f1f095e73d437e413b1fe198b3ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3033, "upload_time": "2020-02-14T06:25:28", "upload_time_iso_8601": "2020-02-14T06:25:28.809734Z", "url": "https://files.pythonhosted.org/packages/78/91/70dd1a695486c14b9a8af75a7ec21dcb7125522bc079a8f3a3ce4f05bf6e/tinyretry-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:52:56 2020"}