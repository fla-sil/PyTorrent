{"info": {"author": "Geekie", "author_email": "geekie@geekie.com.br", "bugtrack_url": null, "classifiers": [], "description": "# Kaiju\n\nKaiju is a framework for data analaysis applications. A Kaiju\napplication contains a set of operations, which correspond to Python\nmethods in your code. Kaiju offers three main features:\n\n  - Automatic command-line parsing configuration.\n  - Logging of operation executions.\n  - MongoDB interfacing.\n\nThis simplifies your research work by automatically documenting your\nanalyses and storing their results, making it easy for you to document\nand reproduce your work. Kaiju also stimulates you to work from the\nsystem shell instead of from within Python, so your application is a\nstand-alone program from the moment you start building it, and not\njust a Python module that you are always struggling to integrate to\nanother system.\n\n## Usage\n\nCreate a kaiju.Kaiju object with the desired configuration, and\nuse the `__call__` to decorate your operation methods.\n\nKaiju depends on `pymongo` for interacting with MongoDB.\n\n## Kaiju axioms\n\nA Kaiju application is defined by a Kaiju object, an instance from the\nKaiju class.\n\nA Kaiju application contains a set of operations.\n\nEach Kaiju operation is a method from your Python code that was\ndecorated by the Kaiju object.\n\nThese operations can consume and produce data. The consumed data are\nthe method arguments, and the output data is whatever the method\nreturns. Operations typically output lists, or generators, and Kaiju\niterates over this output.\n\nThe output from a non-logged operation is simply sent to stdout.\n\nThe output from a logged operation is stored in MongoDB, in the\ncollection specified by the decorator argument `output`. Each element\nfrom this output becomes a separate record in the collection.\n\nA logged operation outputs a `maker_id` code, which is the\n`_id` assigned to this operation execution in the Kaiju log.\n\nYou can specify different types for the operation inputs using the\nclasses from the kaiju.arguments submodule.\n\nThe `Data` input class lets you fetch data from the database. The\nargument receives a `maker_id` and outputs to the underlying operation\nmethod a generator for corresponding data.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://www.geekie.com.br", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "kaiju", "package_url": "https://pypi.org/project/kaiju/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/kaiju/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://www.geekie.com.br"}, "release_url": "https://pypi.org/project/kaiju/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Data analysis framework to log operations and interface with MongoDB.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Kaiju</p>\n<p>Kaiju is a framework for data analaysis applications. A Kaiju\napplication contains a set of operations, which correspond to Python\nmethods in your code. Kaiju offers three main features:</p>\n<blockquote>\n<ul>\n<li>Automatic command-line parsing configuration.</li>\n<li>Logging of operation executions.</li>\n<li>MongoDB interfacing.</li>\n</ul>\n</blockquote>\n<p>This simplifies your research work by automatically documenting your\nanalyses and storing their results, making it easy for you to document\nand reproduce your work. Kaiju also stimulates you to work from the\nsystem shell instead of from within Python, so your application is a\nstand-alone program from the moment you start building it, and not\njust a Python module that you are always struggling to integrate to\nanother system.</p>\n<p>## Usage</p>\n<p>Create a kaiju.Kaiju object with the desired configuration, and\nuse the <cite>__call__</cite> to decorate your operation methods.</p>\n<p>Kaiju depends on <cite>pymongo</cite> for interacting with MongoDB.</p>\n<p>## Kaiju axioms</p>\n<p>A Kaiju application is defined by a Kaiju object, an instance from the\nKaiju class.</p>\n<p>A Kaiju application contains a set of operations.</p>\n<p>Each Kaiju operation is a method from your Python code that was\ndecorated by the Kaiju object.</p>\n<p>These operations can consume and produce data. The consumed data are\nthe method arguments, and the output data is whatever the method\nreturns. Operations typically output lists, or generators, and Kaiju\niterates over this output.</p>\n<p>The output from a non-logged operation is simply sent to stdout.</p>\n<p>The output from a logged operation is stored in MongoDB, in the\ncollection specified by the decorator argument <cite>output</cite>. Each element\nfrom this output becomes a separate record in the collection.</p>\n<p>A logged operation outputs a <cite>maker_id</cite> code, which is the\n<cite>_id</cite> assigned to this operation execution in the Kaiju log.</p>\n<p>You can specify different types for the operation inputs using the\nclasses from the kaiju.arguments submodule.</p>\n<p>The <cite>Data</cite> input class lets you fetch data from the database. The\nargument receives a <cite>maker_id</cite> and outputs to the underlying operation\nmethod a generator for corresponding data.</p>\n\n          </div>"}, "last_serial": 1295830, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a7eb5e039cdc189c88fe2ef147f1d295", "sha256": "9b44305965f36277aab073fe7ddaf9cece29e0707f07c3fc27d48ec60a39516a"}, "downloads": -1, "filename": "kaiju-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a7eb5e039cdc189c88fe2ef147f1d295", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8609, "upload_time": "2014-11-05T17:52:24", "upload_time_iso_8601": "2014-11-05T17:52:24.916687Z", "url": "https://files.pythonhosted.org/packages/33/92/c99882e371d80785f1244deab685b959d09c76c8dc01809ac242e69527bf/kaiju-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7eb5e039cdc189c88fe2ef147f1d295", "sha256": "9b44305965f36277aab073fe7ddaf9cece29e0707f07c3fc27d48ec60a39516a"}, "downloads": -1, "filename": "kaiju-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a7eb5e039cdc189c88fe2ef147f1d295", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8609, "upload_time": "2014-11-05T17:52:24", "upload_time_iso_8601": "2014-11-05T17:52:24.916687Z", "url": "https://files.pythonhosted.org/packages/33/92/c99882e371d80785f1244deab685b959d09c76c8dc01809ac242e69527bf/kaiju-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:48 2020"}