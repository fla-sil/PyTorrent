{"info": {"author": "4teamwork AG", "author_email": "mailto:info@4teamwork.ch", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Environment :: Web Environment", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Framework :: Plone :: Addon", "Framework :: Zope", "Framework :: Zope :: 2", "Framework :: Zope :: 4", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v2 (GPLv2)", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "ftw.slacker\n===========\n\n.. contents:: Table of Contents\n\n\nIntroduction\n------------\n\nThe ``ftw.slacker`` is a Plone addon that provides an easy to use api to post messages into a Slack channel through Slack's webhooks api.\n\nFor more information about slack webhooks see Slack's documentation about `Incoming Webhooks`_\n\nInstallation\n------------\n\nAdd the package as dependency to your setup.py:\n\n.. code:: python\n\n  setup(\n        # ...\n        install_requires=[\n          'ftw.slacker',\n        ])\n\nor to your buildout configuration:\n\n.. code:: ini\n\n  [instance]\n  eggs += ftw.slacker\n\nand run buildout\n\n.. code:: bash\n\n  bin/buildout\n\nUsage\n-----\n\nSetup Slack webhook\n~~~~~~~~~~~~~~~~~~~\n\nFirst of all, you need to setup a Slack webhook.\n\nRead the Slack documentation about `Incoming Webhooks`_ and start\nsetting up your own webhock by follow the `incoming webhook integration <https://my.slack.com/services/new/incoming-webhook/>`_.\n\nPost message to Slack\n~~~~~~~~~~~~~~~~~~~~~\n\nJust import the `notify_slack` api function and call it.\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n\n  notify_slack('https://hooks.slack.com/services/xxx',\n               text=\"my first post\")\n\nDone!\n\nConfigure the requests module\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nFollowing properties are passed to the requests module:\n\n- `webhook_url <http://docs.python-requests.org/en/master/user/quickstart/>`_\n- `timeout <http://docs.python-requests.org/en/master/user/quickstart/#timeouts>`_\n- `verify <http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification>`_\n\nThat means, you can call the api-function with this parameteres to configure the request:\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n\n  notify_slack(webhook_url='https://hooks.slack.com/services/xxx',\n               timemout=10,\n               verify=False,\n               text=\"my first post\")\n\nSlack payload\n~~~~~~~~~~~~~\n\nJust add additional keyword arguments to the api-function. All parameters will be passed\nas payload to the Slack webhook.\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n\n  notify_slack('https://hooks.slack.com/services/xxx',\n               text=\"my first post\",\n               attachments=[\n                   {\n                       \"title\": \"Slack API Documentation\",\n                       \"title_link\": \"https://api.slack.com/\",\n                       \"text\": \"Optional text that appears within the attachment\"\n                   }\n               ])\n\nWebhook URL by environment variables\n------------------------------------\n\nNormally you don't want to store your webhook-url in your application code.\n\n``ftw.slacker`` supports configuration through environment-variables:\n\nSet your environment variable:\n\n.. code:: bash\n\n  export STANDARD_SLACK_WEBHOOK='https://hooks.slack.com/services/xxx'\n\nor through buildout:\n\n.. code:: ini\n\n  [instance]\n  environment-vars +=\n      STANDARD_SLACK_WEBHOOK https://hooks.slack.com/services/xxx\n\nand call the api-function without webhook_url parameter:\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n\n  notify_slack(text=\"my first post\")\n\nOverride the environment variable\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIf you set the STANDARD_SLACK_WEBHOOK environment variable, you can still use a different\nslack webhook.\n\n.. code:: bash\n\n  export STANDARD_SLACK_WEBHOOK='https://hooks.slack.com/services/default-channel-id'\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n\n  # Post message to service default-channel-id\n  notify_slack(text=\"my first post\")\n\n  # Post message to service specific-channel-id\n  notify_slack('https://hooks.slack.com/services/specific-channel-id',\n               text=\"my first post\")\n\nDeactivate Slack notification\n-----------------------------\n\nLet's imagine, you have a server with multiple deployments and all deployments should\npush to the same Slack webhook.\n\nYou can either configure the standard slack webhook envoronment variable through buildout\nfor each deployment, or you just define the default webhook url once in your server environment:\n\n.. code:: bash\n\n  export STANDARD_SLACK_WEBHOOK='https://hooks.slack.com/services/xxx'\n\nEach application will post messages to this slack webhook.\n\nBlacklist\n~~~~~~~~~\n\nNow you install a test-deployment on the same server where you want to deactivate the notifications.\n\nFor this purpose, you can set another environment variable in this specific deployment's ``builodut.cfg`` to\nthe value: ``deactivate``. (see the static variable ``NOTIFICATION_DEACTIVATION_VALUE``):\n\n.. code:: ini\n\n  [instance]\n  environment-vars +=\n      DEACTIVATE_SLACK_NOTIFICATION deactivate\n\nAll notifications performed by this deployment will be skipped.\n\nWhitelist\n~~~~~~~~~\n\nYou could even do a whitelist for your deployments.\n\n.. code:: bash\n\n  export STANDARD_SLACK_WEBHOOK='https://hooks.slack.com/services/xxx'\n  export DEACTIVATE_SLACK_NOTIFICATION deactivate\n\nAnd for all whitelisted deployments, use the following buildout configuration:\n\n.. code:: ini\n\n  [instance]\n  environment-vars +=\n      DEACTIVATE_SLACK_NOTIFICATION\n\nThis will reset the DEACTIVATE_SLACK_NOTIFICATION variable to ``''``\n\nDeactivate through webhook_url\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's also possible to deactivate just a specific notification.\n\nLet's say, you have set your STANDARD_SLACK_WEBHOOK. We've learned, that\nyou can call ``notify_slack`` without any webhook_url to push notification\nto the standard webhook url or you can call it with a more specific webhook url\n``notify_slack(webhook_url=\"xxx\")`` to override the standard slack webhook.\n\nUsing the NOTIFICATION_DEACTIVATION_VALUE as the webhook_url will just deactivate\nthe current notification and will not bubble up to the standard slack webhook.\n\nThis feature is expecially useful for handling notification comming from multiple\nexternal modules using the slacker-integration.\n\nSee the next chapter for more information about advanced usage.\n\nAdvance usage\n-------------\n\nPerhaps you've got different external modules using the ``ftw.slacker`` implementation and\nall of this modules providing a different default slack webhook url.\n\nLet's imagine, we have a module calling ``ftw.logger`` which logs all userlogins within your\nplonesite to a slack-channel.\n\nIt provides an additional environment variable called ``FTW_LOGGER_SLACK_WEBHOOK`` to post the\nlogging-activities to a separate channel. So the implementation of this module may\nlook like this:\n\n.. code:: python\n\n  from ftw.slacker import notify_slack\n  import os\n\n  def notify_user_login(user):\n      notify_slack(os.environ.get('FTW_LOGGER_SLACK_WEBHOOK'),\n                   text='User {} logged in'.format(user.username))\n\nIf you don't set the ``FTW_LOGGER_SLACK_WEBHOOK`` variable, ``ftw.slacker`` will post the user\nlogin to the default channel. If you set `FTW_LOGGER_SLACK_WEBHOOK`, ``ftw.slacker`` will\nuse this more specific channel for notifications.\n\nDeactivating the whole notification system through the DEACTIVATE_SLACK_NOTIFICATION\nenvironment variable is not desired, because you still want to post other notifications,\ni.e. from your application which uses the standard slack webhook url.\n\nFor this puropose, you can just deactivate this specific notification branch by setting\nthe environment variable ``FTW_LOGGER_SLACK_WEBHOOK`` to ``deactivate`` (see the static\nvariable ``NOTIFICATION_DEACTIVATION_VALUE``).\n\n.. code:: ini\n\n  [instance]\n  environment-vars +=\n      STANDARD_SLACK_WEBHOOK https://hooks.slack.com/services/xxx\n      FTW_LOGGER_SLACK_WEBHOOK deactivate\n\nThreading\n---------\n\nAll requests to the Slack-API will be handled within its own threads.\nAll messages are sent in a separate thread so that it is non-blocking and does not\ncrash the application on an error.\n\nThe function ``notify_slack`` returns the thread-object for further thread handlings (i.e. in testing) or none.\n\nLinks\n-----\n\n- Main project repository: https://github.com/4teamwork/ftw.slacker\n- Issue tracker: https://github.com/4teamwork/ftw.slacker/issues\n\nCopyright\n---------\n\nThis package is copyright by `4teamwork <http://www.4teamwork.ch/>`_.\n\n``ftw.slacker`` is licensed under GNU General Public License, version 2.\n\n.. _Incoming Webhooks: https://api.slack.com/incoming-webhooks\n\nChangelog\n=========\n\n1.1.0 (2019-11-27)\n------------------\n\n- Remove support for Plone 5.0.\n  [mbaechtold]\n\n- Test against Plone 5.1.\n  [mbaechtold]\n\n- Test against Plone 5.2 and Python 3.7.\n  [ericof]\n\n\n1.0.2 (2017-07-31)\n------------------\n\n- Use unittest instead unittest2 in tests.\n  [elioschmutz]\n\n\n1.0.1 (2017-07-27)\n------------------\n\n- Fix README.rst errors.\n  [elioschmutz]\n\n\n1.0.0 (2017-07-27)\n------------------\n\n- Initial release.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://git.4teamwork.ch/ftw/ftw.slacker", "keywords": "ftw slacker slack webhoock api", "license": "GPL2", "maintainer": "", "maintainer_email": "", "name": "ftw.slacker", "package_url": "https://pypi.org/project/ftw.slacker/", "platform": "", "project_url": "https://pypi.org/project/ftw.slacker/", "project_urls": {"Homepage": "https://git.4teamwork.ch/ftw/ftw.slacker"}, "release_url": "https://pypi.org/project/ftw.slacker/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Uses webhooks to post messages into a slack channel.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ftw-slacker\">\n<h2><a href=\"#id5\" rel=\"nofollow\">ftw.slacker</a></h2>\n<div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#ftw-slacker\" id=\"id5\" rel=\"nofollow\">ftw.slacker</a><ul>\n<li><a href=\"#introduction\" id=\"id6\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" id=\"id7\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id8\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#setup-slack-webhook\" id=\"id9\" rel=\"nofollow\">Setup Slack webhook</a></li>\n<li><a href=\"#post-message-to-slack\" id=\"id10\" rel=\"nofollow\">Post message to Slack</a></li>\n<li><a href=\"#configure-the-requests-module\" id=\"id11\" rel=\"nofollow\">Configure the requests module</a></li>\n<li><a href=\"#slack-payload\" id=\"id12\" rel=\"nofollow\">Slack payload</a></li>\n</ul>\n</li>\n<li><a href=\"#webhook-url-by-environment-variables\" id=\"id13\" rel=\"nofollow\">Webhook URL by environment variables</a><ul>\n<li><a href=\"#override-the-environment-variable\" id=\"id14\" rel=\"nofollow\">Override the environment variable</a></li>\n</ul>\n</li>\n<li><a href=\"#deactivate-slack-notification\" id=\"id15\" rel=\"nofollow\">Deactivate Slack notification</a><ul>\n<li><a href=\"#blacklist\" id=\"id16\" rel=\"nofollow\">Blacklist</a></li>\n<li><a href=\"#whitelist\" id=\"id17\" rel=\"nofollow\">Whitelist</a></li>\n<li><a href=\"#deactivate-through-webhook-url\" id=\"id18\" rel=\"nofollow\">Deactivate through webhook_url</a></li>\n</ul>\n</li>\n<li><a href=\"#advance-usage\" id=\"id19\" rel=\"nofollow\">Advance usage</a></li>\n<li><a href=\"#threading\" id=\"id20\" rel=\"nofollow\">Threading</a></li>\n<li><a href=\"#links\" id=\"id21\" rel=\"nofollow\">Links</a></li>\n<li><a href=\"#copyright\" id=\"id22\" rel=\"nofollow\">Copyright</a></li>\n</ul>\n</li>\n<li><a href=\"#changelog\" id=\"id23\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id24\" rel=\"nofollow\">1.1.0 (2019-11-27)</a></li>\n<li><a href=\"#id2\" id=\"id25\" rel=\"nofollow\">1.0.2 (2017-07-31)</a></li>\n<li><a href=\"#id3\" id=\"id26\" rel=\"nofollow\">1.0.1 (2017-07-27)</a></li>\n<li><a href=\"#id4\" id=\"id27\" rel=\"nofollow\">1.0.0 (2017-07-27)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"introduction\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Introduction</a></h3>\n<p>The <tt>ftw.slacker</tt> is a Plone addon that provides an easy to use api to post messages into a Slack channel through Slack\u2019s webhooks api.</p>\n<p>For more information about slack webhooks see Slack\u2019s documentation about <a href=\"https://api.slack.com/incoming-webhooks\" rel=\"nofollow\">Incoming Webhooks</a></p>\n</div>\n<div id=\"installation\">\n<h3><a href=\"#id7\" rel=\"nofollow\">Installation</a></h3>\n<p>Add the package as dependency to your setup.py:</p>\n<pre><span class=\"n\">setup</span><span class=\"p\">(</span>\n      <span class=\"c1\"># ...</span>\n      <span class=\"n\">install_requires</span><span class=\"o\">=</span><span class=\"p\">[</span>\n        <span class=\"s1\">'ftw.slacker'</span><span class=\"p\">,</span>\n      <span class=\"p\">])</span>\n</pre>\n<p>or to your buildout configuration:</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">eggs +</span><span class=\"o\">=</span> <span class=\"s\">ftw.slacker</span>\n</pre>\n<p>and run buildout</p>\n<pre>bin/buildout\n</pre>\n</div>\n<div id=\"usage\">\n<h3><a href=\"#id8\" rel=\"nofollow\">Usage</a></h3>\n<div id=\"setup-slack-webhook\">\n<h4><a href=\"#id9\" rel=\"nofollow\">Setup Slack webhook</a></h4>\n<p>First of all, you need to setup a Slack webhook.</p>\n<p>Read the Slack documentation about <a href=\"https://api.slack.com/incoming-webhooks\" rel=\"nofollow\">Incoming Webhooks</a> and start\nsetting up your own webhock by follow the <a href=\"https://my.slack.com/services/new/incoming-webhook/\" rel=\"nofollow\">incoming webhook integration</a>.</p>\n</div>\n<div id=\"post-message-to-slack\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Post message to Slack</a></h4>\n<p>Just import the <cite>notify_slack</cite> api function and call it.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span><span class=\"p\">,</span>\n             <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">)</span>\n</pre>\n<p>Done!</p>\n</div>\n<div id=\"configure-the-requests-module\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Configure the requests module</a></h4>\n<p>Following properties are passed to the requests module:</p>\n<ul>\n<li><a href=\"http://docs.python-requests.org/en/master/user/quickstart/\" rel=\"nofollow\">webhook_url</a></li>\n<li><a href=\"http://docs.python-requests.org/en/master/user/quickstart/#timeouts\" rel=\"nofollow\">timeout</a></li>\n<li><a href=\"http://docs.python-requests.org/en/master/user/advanced/#ssl-cert-verification\" rel=\"nofollow\">verify</a></li>\n</ul>\n<p>That means, you can call the api-function with this parameteres to configure the request:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"n\">webhook_url</span><span class=\"o\">=</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span><span class=\"p\">,</span>\n             <span class=\"n\">timemout</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n             <span class=\"n\">verify</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n             <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"slack-payload\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Slack payload</a></h4>\n<p>Just add additional keyword arguments to the api-function. All parameters will be passed\nas payload to the Slack webhook.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span><span class=\"p\">,</span>\n             <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">,</span>\n             <span class=\"n\">attachments</span><span class=\"o\">=</span><span class=\"p\">[</span>\n                 <span class=\"p\">{</span>\n                     <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Slack API Documentation\"</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"title_link\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://api.slack.com/\"</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"text\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Optional text that appears within the attachment\"</span>\n                 <span class=\"p\">}</span>\n             <span class=\"p\">])</span>\n</pre>\n</div>\n</div>\n<div id=\"webhook-url-by-environment-variables\">\n<h3><a href=\"#id13\" rel=\"nofollow\">Webhook URL by environment variables</a></h3>\n<p>Normally you don\u2019t want to store your webhook-url in your application code.</p>\n<p><tt>ftw.slacker</tt> supports configuration through environment-variables:</p>\n<p>Set your environment variable:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">STANDARD_SLACK_WEBHOOK</span><span class=\"o\">=</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span>\n</pre>\n<p>or through buildout:</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">environment-vars +</span><span class=\"o\">=</span><span class=\"s\">\n    STANDARD_SLACK_WEBHOOK https://hooks.slack.com/services/xxx</span>\n</pre>\n<p>and call the api-function without webhook_url parameter:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">)</span>\n</pre>\n<div id=\"override-the-environment-variable\">\n<h4><a href=\"#id14\" rel=\"nofollow\">Override the environment variable</a></h4>\n<p>If you set the STANDARD_SLACK_WEBHOOK environment variable, you can still use a different\nslack webhook.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">STANDARD_SLACK_WEBHOOK</span><span class=\"o\">=</span><span class=\"s1\">'https://hooks.slack.com/services/default-channel-id'</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n\n<span class=\"c1\"># Post message to service default-channel-id</span>\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Post message to service specific-channel-id</span>\n<span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"s1\">'https://hooks.slack.com/services/specific-channel-id'</span><span class=\"p\">,</span>\n             <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"my first post\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"deactivate-slack-notification\">\n<h3><a href=\"#id15\" rel=\"nofollow\">Deactivate Slack notification</a></h3>\n<p>Let\u2019s imagine, you have a server with multiple deployments and all deployments should\npush to the same Slack webhook.</p>\n<p>You can either configure the standard slack webhook envoronment variable through buildout\nfor each deployment, or you just define the default webhook url once in your server environment:</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">STANDARD_SLACK_WEBHOOK</span><span class=\"o\">=</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span>\n</pre>\n<p>Each application will post messages to this slack webhook.</p>\n<div id=\"blacklist\">\n<h4><a href=\"#id16\" rel=\"nofollow\">Blacklist</a></h4>\n<p>Now you install a test-deployment on the same server where you want to deactivate the notifications.</p>\n<p>For this purpose, you can set another environment variable in this specific deployment\u2019s <tt>builodut.cfg</tt> to\nthe value: <tt>deactivate</tt>. (see the static variable <tt>NOTIFICATION_DEACTIVATION_VALUE</tt>):</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">environment-vars +</span><span class=\"o\">=</span><span class=\"s\">\n    DEACTIVATE_SLACK_NOTIFICATION deactivate</span>\n</pre>\n<p>All notifications performed by this deployment will be skipped.</p>\n</div>\n<div id=\"whitelist\">\n<h4><a href=\"#id17\" rel=\"nofollow\">Whitelist</a></h4>\n<p>You could even do a whitelist for your deployments.</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">STANDARD_SLACK_WEBHOOK</span><span class=\"o\">=</span><span class=\"s1\">'https://hooks.slack.com/services/xxx'</span>\n<span class=\"nb\">export</span> DEACTIVATE_SLACK_NOTIFICATION deactivate\n</pre>\n<p>And for all whitelisted deployments, use the following buildout configuration:</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">environment-vars +</span><span class=\"o\">=</span><span class=\"s\">\n    DEACTIVATE_SLACK_NOTIFICATION</span>\n</pre>\n<p>This will reset the DEACTIVATE_SLACK_NOTIFICATION variable to <tt>''</tt></p>\n</div>\n<div id=\"deactivate-through-webhook-url\">\n<h4><a href=\"#id18\" rel=\"nofollow\">Deactivate through webhook_url</a></h4>\n<p>It\u2019s also possible to deactivate just a specific notification.</p>\n<p>Let\u2019s say, you have set your STANDARD_SLACK_WEBHOOK. We\u2019ve learned, that\nyou can call <tt>notify_slack</tt> without any webhook_url to push notification\nto the standard webhook url or you can call it with a more specific webhook url\n<tt><span class=\"pre\">notify_slack(webhook_url=\"xxx\")</span></tt> to override the standard slack webhook.</p>\n<p>Using the NOTIFICATION_DEACTIVATION_VALUE as the webhook_url will just deactivate\nthe current notification and will not bubble up to the standard slack webhook.</p>\n<p>This feature is expecially useful for handling notification comming from multiple\nexternal modules using the slacker-integration.</p>\n<p>See the next chapter for more information about advanced usage.</p>\n</div>\n</div>\n<div id=\"advance-usage\">\n<h3><a href=\"#id19\" rel=\"nofollow\">Advance usage</a></h3>\n<p>Perhaps you\u2019ve got different external modules using the <tt>ftw.slacker</tt> implementation and\nall of this modules providing a different default slack webhook url.</p>\n<p>Let\u2019s imagine, we have a module calling <tt>ftw.logger</tt> which logs all userlogins within your\nplonesite to a slack-channel.</p>\n<p>It provides an additional environment variable called <tt>FTW_LOGGER_SLACK_WEBHOOK</tt> to post the\nlogging-activities to a separate channel. So the implementation of this module may\nlook like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">ftw.slacker</span> <span class=\"kn\">import</span> <span class=\"n\">notify_slack</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">notify_user_login</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">):</span>\n    <span class=\"n\">notify_slack</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'FTW_LOGGER_SLACK_WEBHOOK'</span><span class=\"p\">),</span>\n                 <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s1\">'User </span><span class=\"si\">{}</span><span class=\"s1\"> logged in'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">username</span><span class=\"p\">))</span>\n</pre>\n<p>If you don\u2019t set the <tt>FTW_LOGGER_SLACK_WEBHOOK</tt> variable, <tt>ftw.slacker</tt> will post the user\nlogin to the default channel. If you set <cite>FTW_LOGGER_SLACK_WEBHOOK</cite>, <tt>ftw.slacker</tt> will\nuse this more specific channel for notifications.</p>\n<p>Deactivating the whole notification system through the DEACTIVATE_SLACK_NOTIFICATION\nenvironment variable is not desired, because you still want to post other notifications,\ni.e. from your application which uses the standard slack webhook url.</p>\n<p>For this puropose, you can just deactivate this specific notification branch by setting\nthe environment variable <tt>FTW_LOGGER_SLACK_WEBHOOK</tt> to <tt>deactivate</tt> (see the static\nvariable <tt>NOTIFICATION_DEACTIVATION_VALUE</tt>).</p>\n<pre><span class=\"k\">[instance]</span>\n<span class=\"na\">environment-vars +</span><span class=\"o\">=</span><span class=\"s\">\n    STANDARD_SLACK_WEBHOOK https://hooks.slack.com/services/xxx\n    FTW_LOGGER_SLACK_WEBHOOK deactivate</span>\n</pre>\n</div>\n<div id=\"threading\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Threading</a></h3>\n<p>All requests to the Slack-API will be handled within its own threads.\nAll messages are sent in a separate thread so that it is non-blocking and does not\ncrash the application on an error.</p>\n<p>The function <tt>notify_slack</tt> returns the thread-object for further thread handlings (i.e. in testing) or none.</p>\n</div>\n<div id=\"links\">\n<h3><a href=\"#id21\" rel=\"nofollow\">Links</a></h3>\n<ul>\n<li>Main project repository: <a href=\"https://github.com/4teamwork/ftw.slacker\" rel=\"nofollow\">https://github.com/4teamwork/ftw.slacker</a></li>\n<li>Issue tracker: <a href=\"https://github.com/4teamwork/ftw.slacker/issues\" rel=\"nofollow\">https://github.com/4teamwork/ftw.slacker/issues</a></li>\n</ul>\n</div>\n<div id=\"copyright\">\n<h3><a href=\"#id22\" rel=\"nofollow\">Copyright</a></h3>\n<p>This package is copyright by <a href=\"http://www.4teamwork.ch/\" rel=\"nofollow\">4teamwork</a>.</p>\n<p><tt>ftw.slacker</tt> is licensed under GNU General Public License, version 2.</p>\n</div>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id23\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id24\" rel=\"nofollow\">1.1.0 (2019-11-27)</a></h3>\n<ul>\n<li>Remove support for Plone 5.0.\n[mbaechtold]</li>\n<li>Test against Plone 5.1.\n[mbaechtold]</li>\n<li>Test against Plone 5.2 and Python 3.7.\n[ericof]</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.0.2 (2017-07-31)</a></h3>\n<ul>\n<li>Use unittest instead unittest2 in tests.\n[elioschmutz]</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id26\" rel=\"nofollow\">1.0.1 (2017-07-27)</a></h3>\n<ul>\n<li>Fix README.rst errors.\n[elioschmutz]</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id27\" rel=\"nofollow\">1.0.0 (2017-07-27)</a></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6569191, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "8c667507e27793096e8ec9340dd7f5f4", "sha256": "5bba92a8ea4a0a4533db7ac7feaa35feec485605a9fd143eea1b10fe1c6b5705"}, "downloads": -1, "filename": "ftw.slacker-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8c667507e27793096e8ec9340dd7f5f4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7678, "upload_time": "2017-07-27T15:24:35", "upload_time_iso_8601": "2017-07-27T15:24:35.168312Z", "url": "https://files.pythonhosted.org/packages/f8/af/4f33e3ef896068d7665328a5e5e7db66e5c3a4412047a8525034cc99377d/ftw.slacker-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "94cdd0e039e93d719ac384e40c40d5f8", "sha256": "2509f7b681b1597e072ab5e4a5f02c63f2ab52182b2499e5d0e77240161ddeb5"}, "downloads": -1, "filename": "ftw.slacker-1.0.1.tar.gz", "has_sig": false, "md5_digest": "94cdd0e039e93d719ac384e40c40d5f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7767, "upload_time": "2017-07-27T16:21:03", "upload_time_iso_8601": "2017-07-27T16:21:03.607189Z", "url": "https://files.pythonhosted.org/packages/1f/a1/da6caf687ae6bbe0a6e4b6b6815a8c8f8ed8437706fc73e25b008fda76b6/ftw.slacker-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c6ebf72125f402bfffd1a0f0dd8afea2", "sha256": "3791d4bf365d814367d766ac30018676fa518fc3ad62e05f5d238333ae9ff992"}, "downloads": -1, "filename": "ftw.slacker-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c6ebf72125f402bfffd1a0f0dd8afea2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7793, "upload_time": "2017-07-31T08:48:55", "upload_time_iso_8601": "2017-07-31T08:48:55.496653Z", "url": "https://files.pythonhosted.org/packages/3a/34/1b378d2092db8e4cde1293b494194f1963203f5cd943709898e73ceec6ce/ftw.slacker-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "19b2bbad6ef0ba7058d45c792656ff79", "sha256": "454cc5b6569f6221785c33be6e06bfac00f4d3ee4cc1f9f62b3acc73a55b7b95"}, "downloads": -1, "filename": "ftw.slacker-1.1.0.tar.gz", "has_sig": false, "md5_digest": "19b2bbad6ef0ba7058d45c792656ff79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9885, "upload_time": "2019-11-27T11:28:47", "upload_time_iso_8601": "2019-11-27T11:28:47.591709Z", "url": "https://files.pythonhosted.org/packages/e8/d2/6006f7a1ca8bf2de04f8c74ac0927e9ce77db1b4cc4da14f6a170adff1f4/ftw.slacker-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19b2bbad6ef0ba7058d45c792656ff79", "sha256": "454cc5b6569f6221785c33be6e06bfac00f4d3ee4cc1f9f62b3acc73a55b7b95"}, "downloads": -1, "filename": "ftw.slacker-1.1.0.tar.gz", "has_sig": false, "md5_digest": "19b2bbad6ef0ba7058d45c792656ff79", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9885, "upload_time": "2019-11-27T11:28:47", "upload_time_iso_8601": "2019-11-27T11:28:47.591709Z", "url": "https://files.pythonhosted.org/packages/e8/d2/6006f7a1ca8bf2de04f8c74ac0927e9ce77db1b4cc4da14f6a170adff1f4/ftw.slacker-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:50 2020"}