{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Security"], "description": "# pytm: A Pythonic framework for threat modeling\n\nDefine your system in Python using the elements and properties described in the pytm framework. Based on your definition, pytm can generate, a Data Flow Diagram (DFD), a Sequence Diagram and most important of all, threats to your system.\n\n## Requirements\n\n* Linux/MacOS\n* Python 3.x\n* Graphviz package\n* Java (OpenJDK 10 or 11)\n* [plantuml.jar](http://sourceforge.net/projects/plantuml/files/plantuml.jar/download)\n\n## Usage\n\n```text\ntm.py [-h] [--debug] [--dfd] [--report REPORT] [--exclude EXCLUDE] [--seq] [--list] [--describe DESCRIBE]\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --debug              print debug messages\n  --dfd                output DFD (default)\n  --report REPORT      output report using the named template file (sample template file is under docs/template.md)\n  --exclude EXCLUDE    specify threat IDs to be ignored\n  --seq                output sequential diagram\n  --list               list all available threats\n  --describe DESCRIBE  describe the properties available for a given element\n\n```\n\nCurrently available elements are: TM, Element, Server, ExternalEntity, Datastore, Actor, Process, SetOfProcesses, Dataflow, Boundary and Lambda.\n\nThe available properties of an element can be listed by using `--describe` followed by the name of an element:\n\n```text\n\n(pytm) \u279c  pytm git:(master) \u2717 ./tm.py --describe Element\nElement\n\tOS\n\tcheck\n\tdefinesConnectionTimeout\n\tdescription\n\tdfd\n\thandlesResources\n\timplementsAuthenticationScheme\n\timplementsNonce\n\tinBoundary\n\tinScope\n\tisAdmin\n\tisHardened\n\tname\n\tonAWS\n\n```\n\nFor the security practitioner, you may add new threats to the `threatlib/threats.json` file:\n\n```json\n{\n   \"SID\":\"INP01\",\n   \"target\": [\"Lambda\",\"Process\"],\n   \"description\": \"Buffer Overflow via Environment Variables\",\n   \"details\": \"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\",\n   \"Likelihood Of Attack\": \"High\",\n   \"severity\": \"High\",\n   \"condition\": \"target.usesEnvironmentVariables is True and target.sanitizesInput is False and target.checksInputBounds is False\",\n   \"prerequisites\": \"The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.\",\n   \"mitigations\": \"Do not expose environment variable to the user.Do not use untrusted data in your environment variables. Use a language or compiler that performs automatic bounds checking. There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.\",\n   \"example\": \"Attack Example: Buffer Overflow in $HOME A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. Attack Example: Buffer Overflow in TERM A buffer overflow in the rlogin program involves its consumption of the TERM environmental variable.\",\n   \"references\": \"https://capec.mitre.org/data/definitions/10.html, CVE-1999-0906, CVE-1999-0046, http://cwe.mitre.org/data/definitions/120.html, http://cwe.mitre.org/data/definitions/119.html, http://cwe.mitre.org/data/definitions/680.html\"\n }\n```\n\n**CAVEAT**\n\nThe `threats.json` file contains strings that run through eval\\(\\) -&gt; make sure the file has correct permissions or risk having an attacker change the strings and cause you to run code on their behalf. The logic lives in the \"condition\", where members of \"target\" can be logically evaluated. Returning a true means the rule generates a finding, otherwise, it is not a finding.**\n\nThe following is a sample `tm.py` file that describes a simple application where a User logs into the application and posts comments on the app. The app server stores those comments into the database. There is an AWS Lambda that periodically cleans the Database.\n\n```python\n\n#!/usr/bin/env python3\n\nfrom pytm.pytm import TM, Server, Datastore, Dataflow, Boundary, Actor, Lambda\n\ntm = TM(\"my test tm\")\ntm.description = \"another test tm\"\n\nUser_Web = Boundary(\"User/Web\")\nWeb_DB = Boundary(\"Web/DB\")\n\nuser = Actor(\"User\")\nuser.inBoundary = User_Web\n\nweb = Server(\"Web Server\")\nweb.OS = \"CloudOS\"\nweb.isHardened = True\n\ndb = Datastore(\"SQL Database (*)\")\ndb.OS = \"CentOS\"\ndb.isHardened = False\ndb.inBoundary = Web_DB\ndb.isSql = True\ndb.inScope = False\n\nmy_lambda = Lambda(\"cleanDBevery6hours\")\nmy_lambda.hasAccessControl = True\nmy_lambda.inBoundary = Web_DB\n\nmy_lambda_to_db = Dataflow(my_lambda, db, \"(&lambda;)Periodically cleans DB\")\nmy_lambda_to_db.protocol = \"SQL\"\nmy_lambda_to_db.dstPort = 3306\n\nuser_to_web = Dataflow(user, web, \"User enters comments (*)\")\nuser_to_web.protocol = \"HTTP\"\nuser_to_web.dstPort = 80\nuser_to_web.data = 'Comments in HTML or Markdown'\nuser_to_web.order = 1\n\nweb_to_user = Dataflow(web, user, \"Comments saved (*)\")\nweb_to_user.protocol = \"HTTP\"\nweb_to_user.data = 'Ack of saving or error message, in JSON'\nweb_to_user.order = 2\n\nweb_to_db = Dataflow(web, db, \"Insert query with comments\")\nweb_to_db.protocol = \"MySQL\"\nweb_to_db.dstPort = 3306\nweb_to_db.data = 'MySQL insert statement, all literals'\nweb_to_db.order = 3\n\ndb_to_web = Dataflow(db, web, \"Comments contents\")\ndb_to_web.protocol = \"MySQL\"\ndb_to_web.data = 'Results of insert op'\ndb_to_web.order = 4\n\ntm.process()\n\n```\n\nDiagrams are output as [Dot](https://graphviz.gitlab.io/) and [PlantUML](https://plantuml.com/).\n\nWhen `--dfd` argument is passed to the above `tm.py` file it generates output to stdout, which is fed to Graphviz's dot to generate the Data Flow Diagram:\n\n```bash\n\ntm.py --dfd | dot -Tpng -o sample.png\n\n```\n\nGenerates this diagram:\n\n![dfd.png](.gitbook/assets/dfd.png)\n\n\nThe following command generates a Sequence diagram.\n\n```bash\n\ntm.py --seq | java -Djava.awt.headless=true -jar plantuml.jar -tpng -pipe > seq.png\n\n```\n\nGenerates this diagram:\n\n![seq.png](.gitbook/assets/seq.png)\n\nThe diagrams and findings can be included in the template to create a final report:\n\n```bash\n\ntm.py --report docs/template.md | pandoc -f markdown -t html > report.html\n\n```\nThe templating format used in the report template is very simple:\n\n```text\n\n# Threat Model Sample\n***\n\n## System Description\n\n{tm.description}\n\n## Dataflow Diagram\n\n![Level 0 DFD](dfd.png)\n\n## Dataflows\n\nName|From|To |Data|Protocol|Port\n----|----|---|----|--------|----\n{dataflows:repeat:{{item.name}}|{{item.source.name}}|{{item.sink.name}}|{{item.data}}|{{item.protocol}}|{{item.dstPort}}\n}\n\n## Findings\n\n{findings:repeat:* {{item.description}} on element \"{{item.target}}\"\n}\n\n```\n\n## Currently supported threats\n\n```text\nINP01 - Buffer Overflow via Environment Variables\nINP02 - Overflow Buffers\nINP03 - Server Side Include (SSI) Injection\nCR01 - Session Sidejacking\nINP04 - HTTP Request Splitting\nCR02 - Cross Site Tracing\nINP05 - Command Line Execution through SQL Injection\nINP06 - SQL Injection through SOAP Parameter Tampering\nSC01 - JSON Hijacking (aka JavaScript Hijacking)\nLB01 - API Manipulation\nAA01 - Authentication Abuse/ByPass\nDS01 - Excavation\nDE01 - Interception\nDE02 - Double Encoding\nAPI01 - Exploit Test APIs\nAC01 - Privilege Abuse\nINP07 - Buffer Manipulation\nAC02 - Shared Data Manipulation\nDO01 - Flooding\nHA01 - Path Traversal\nAC03 - Subverting Environment Variable Values\nDO02 - Excessive Allocation\nDS02 - Try All Common Switches\nINP08 - Format String Injection\nINP09 - LDAP Injection\nINP10 - Parameter Injection\nINP11 - Relative Path Traversal\nINP12 - Client-side Injection-induced Buffer Overflow\nAC04 - XML Schema Poisoning\nDO03 - XML Ping of the Death\nAC05 - Content Spoofing\nINP13 - Command Delimiters\nINP14 - Input Data Manipulation\nDE03 - Sniffing Attacks\nCR03 - Dictionary-based Password Attack\nAPI02 - Exploit Script-Based APIs\nHA02 - White Box Reverse Engineering\nDS03 - Footprinting\nAC06 - Using Malicious Files\nHA03 - Web Application Fingerprinting\nSC02 - XSS Targeting Non-Script Elements\nAC07 - Exploiting Incorrectly Configured Access Control Security Levels\nINP15 - IMAP/SMTP Command Injection\nHA04 - Reverse Engineering\nSC03 - Embedding Scripts within Scripts\nINP16 - PHP Remote File Inclusion\nAA02 - Principal Spoof\nCR04 - Session Credential Falsification through Forging\nDO04 - XML Entity Expansion\nDS04 - XSS Targeting Error Pages\nSC04 - XSS Using Alternate Syntax\nCR05 - Encryption Brute Forcing\nAC08 - Manipulate Registry Information\nDS05 - Lifting Sensitive Data Embedded in Cache\n\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/izar/pytm", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "pytm", "package_url": "https://pypi.org/project/pytm/", "platform": "", "project_url": "https://pypi.org/project/pytm/", "project_urls": {"Homepage": "https://github.com/izar/pytm"}, "release_url": "https://pypi.org/project/pytm/1.0/", "requires_dist": null, "requires_python": ">=3", "summary": "", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pytm: A Pythonic framework for threat modeling</h1>\n<p>Define your system in Python using the elements and properties described in the pytm framework. Based on your definition, pytm can generate, a Data Flow Diagram (DFD), a Sequence Diagram and most important of all, threats to your system.</p>\n<h2>Requirements</h2>\n<ul>\n<li>Linux/MacOS</li>\n<li>Python 3.x</li>\n<li>Graphviz package</li>\n<li>Java (OpenJDK 10 or 11)</li>\n<li><a href=\"http://sourceforge.net/projects/plantuml/files/plantuml.jar/download\" rel=\"nofollow\">plantuml.jar</a></li>\n</ul>\n<h2>Usage</h2>\n<pre>tm.py [-h] [--debug] [--dfd] [--report REPORT] [--exclude EXCLUDE] [--seq] [--list] [--describe DESCRIBE]\n\noptional arguments:\n  -h, --help           show this help message and exit\n  --debug              print debug messages\n  --dfd                output DFD (default)\n  --report REPORT      output report using the named template file (sample template file is under docs/template.md)\n  --exclude EXCLUDE    specify threat IDs to be ignored\n  --seq                output sequential diagram\n  --list               list all available threats\n  --describe DESCRIBE  describe the properties available for a given element\n</pre>\n<p>Currently available elements are: TM, Element, Server, ExternalEntity, Datastore, Actor, Process, SetOfProcesses, Dataflow, Boundary and Lambda.</p>\n<p>The available properties of an element can be listed by using <code>--describe</code> followed by the name of an element:</p>\n<pre>(pytm) \u279c  pytm git:(master) \u2717 ./tm.py --describe Element\nElement\n\tOS\n\tcheck\n\tdefinesConnectionTimeout\n\tdescription\n\tdfd\n\thandlesResources\n\timplementsAuthenticationScheme\n\timplementsNonce\n\tinBoundary\n\tinScope\n\tisAdmin\n\tisHardened\n\tname\n\tonAWS\n</pre>\n<p>For the security practitioner, you may add new threats to the <code>threatlib/threats.json</code> file:</p>\n<pre><span class=\"p\">{</span>\n   <span class=\"nt\">\"SID\"</span><span class=\"p\">:</span><span class=\"s2\">\"INP01\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"target\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"Lambda\"</span><span class=\"p\">,</span><span class=\"s2\">\"Process\"</span><span class=\"p\">],</span>\n   <span class=\"nt\">\"description\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Buffer Overflow via Environment Variables\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"details\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This attack pattern involves causing a buffer overflow through manipulation of environment variables. Once the attacker finds that they can modify an environment variable, they may try to overflow associated buffers. This attack leverages implicit trust often placed in environment variables.\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"Likelihood Of Attack\"</span><span class=\"p\">:</span> <span class=\"s2\">\"High\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"severity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"High\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"condition\"</span><span class=\"p\">:</span> <span class=\"s2\">\"target.usesEnvironmentVariables is True and target.sanitizesInput is False and target.checksInputBounds is False\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"prerequisites\"</span><span class=\"p\">:</span> <span class=\"s2\">\"The application uses environment variables.An environment variable exposed to the user is vulnerable to a buffer overflow.The vulnerable environment variable uses untrusted data.Tainted data used in the environment variables is not properly validated. For instance boundary checking is not done before copying the input data to a buffer.\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"mitigations\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Do not expose environment variable to the user.Do not use untrusted data in your environment variables. Use a language or compiler that performs automatic bounds checking. There are tools such as Sharefuzz [R.10.3] which is an environment variable fuzzer for Unix that support loading a shared library. You can use Sharefuzz to determine if you are exposing an environment variable vulnerable to buffer overflow.\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"example\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Attack Example: Buffer Overflow in $HOME A buffer overflow in sccw allows local users to gain root access via the $HOME environmental variable. Attack Example: Buffer Overflow in TERM A buffer overflow in the rlogin program involves its consumption of the TERM environmental variable.\"</span><span class=\"p\">,</span>\n   <span class=\"nt\">\"references\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://capec.mitre.org/data/definitions/10.html, CVE-1999-0906, CVE-1999-0046, http://cwe.mitre.org/data/definitions/120.html, http://cwe.mitre.org/data/definitions/119.html, http://cwe.mitre.org/data/definitions/680.html\"</span>\n <span class=\"p\">}</span>\n</pre>\n<p><strong>CAVEAT</strong></p>\n<p>The <code>threats.json</code> file contains strings that run through eval() -&gt; make sure the file has correct permissions or risk having an attacker change the strings and cause you to run code on their behalf. The logic lives in the \"condition\", where members of \"target\" can be logically evaluated. Returning a true means the rule generates a finding, otherwise, it is not a finding.**</p>\n<p>The following is a sample <code>tm.py</code> file that describes a simple application where a User logs into the application and posts comments on the app. The app server stores those comments into the database. There is an AWS Lambda that periodically cleans the Database.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">pytm.pytm</span> <span class=\"kn\">import</span> <span class=\"n\">TM</span><span class=\"p\">,</span> <span class=\"n\">Server</span><span class=\"p\">,</span> <span class=\"n\">Datastore</span><span class=\"p\">,</span> <span class=\"n\">Dataflow</span><span class=\"p\">,</span> <span class=\"n\">Boundary</span><span class=\"p\">,</span> <span class=\"n\">Actor</span><span class=\"p\">,</span> <span class=\"n\">Lambda</span>\n\n<span class=\"n\">tm</span> <span class=\"o\">=</span> <span class=\"n\">TM</span><span class=\"p\">(</span><span class=\"s2\">\"my test tm\"</span><span class=\"p\">)</span>\n<span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"s2\">\"another test tm\"</span>\n\n<span class=\"n\">User_Web</span> <span class=\"o\">=</span> <span class=\"n\">Boundary</span><span class=\"p\">(</span><span class=\"s2\">\"User/Web\"</span><span class=\"p\">)</span>\n<span class=\"n\">Web_DB</span> <span class=\"o\">=</span> <span class=\"n\">Boundary</span><span class=\"p\">(</span><span class=\"s2\">\"Web/DB\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">Actor</span><span class=\"p\">(</span><span class=\"s2\">\"User\"</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">inBoundary</span> <span class=\"o\">=</span> <span class=\"n\">User_Web</span>\n\n<span class=\"n\">web</span> <span class=\"o\">=</span> <span class=\"n\">Server</span><span class=\"p\">(</span><span class=\"s2\">\"Web Server\"</span><span class=\"p\">)</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">OS</span> <span class=\"o\">=</span> <span class=\"s2\">\"CloudOS\"</span>\n<span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">isHardened</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">Datastore</span><span class=\"p\">(</span><span class=\"s2\">\"SQL Database (*)\"</span><span class=\"p\">)</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">OS</span> <span class=\"o\">=</span> <span class=\"s2\">\"CentOS\"</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">isHardened</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">inBoundary</span> <span class=\"o\">=</span> <span class=\"n\">Web_DB</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">isSql</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">inScope</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n\n<span class=\"n\">my_lambda</span> <span class=\"o\">=</span> <span class=\"n\">Lambda</span><span class=\"p\">(</span><span class=\"s2\">\"cleanDBevery6hours\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_lambda</span><span class=\"o\">.</span><span class=\"n\">hasAccessControl</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">my_lambda</span><span class=\"o\">.</span><span class=\"n\">inBoundary</span> <span class=\"o\">=</span> <span class=\"n\">Web_DB</span>\n\n<span class=\"n\">my_lambda_to_db</span> <span class=\"o\">=</span> <span class=\"n\">Dataflow</span><span class=\"p\">(</span><span class=\"n\">my_lambda</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"s2\">\"(&amp;lambda;)Periodically cleans DB\"</span><span class=\"p\">)</span>\n<span class=\"n\">my_lambda_to_db</span><span class=\"o\">.</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"SQL\"</span>\n<span class=\"n\">my_lambda_to_db</span><span class=\"o\">.</span><span class=\"n\">dstPort</span> <span class=\"o\">=</span> <span class=\"mi\">3306</span>\n\n<span class=\"n\">user_to_web</span> <span class=\"o\">=</span> <span class=\"n\">Dataflow</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"s2\">\"User enters comments (*)\"</span><span class=\"p\">)</span>\n<span class=\"n\">user_to_web</span><span class=\"o\">.</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"HTTP\"</span>\n<span class=\"n\">user_to_web</span><span class=\"o\">.</span><span class=\"n\">dstPort</span> <span class=\"o\">=</span> <span class=\"mi\">80</span>\n<span class=\"n\">user_to_web</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'Comments in HTML or Markdown'</span>\n<span class=\"n\">user_to_web</span><span class=\"o\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n\n<span class=\"n\">web_to_user</span> <span class=\"o\">=</span> <span class=\"n\">Dataflow</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"s2\">\"Comments saved (*)\"</span><span class=\"p\">)</span>\n<span class=\"n\">web_to_user</span><span class=\"o\">.</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"HTTP\"</span>\n<span class=\"n\">web_to_user</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'Ack of saving or error message, in JSON'</span>\n<span class=\"n\">web_to_user</span><span class=\"o\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">2</span>\n\n<span class=\"n\">web_to_db</span> <span class=\"o\">=</span> <span class=\"n\">Dataflow</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"s2\">\"Insert query with comments\"</span><span class=\"p\">)</span>\n<span class=\"n\">web_to_db</span><span class=\"o\">.</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"MySQL\"</span>\n<span class=\"n\">web_to_db</span><span class=\"o\">.</span><span class=\"n\">dstPort</span> <span class=\"o\">=</span> <span class=\"mi\">3306</span>\n<span class=\"n\">web_to_db</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'MySQL insert statement, all literals'</span>\n<span class=\"n\">web_to_db</span><span class=\"o\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n\n<span class=\"n\">db_to_web</span> <span class=\"o\">=</span> <span class=\"n\">Dataflow</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">,</span> <span class=\"n\">web</span><span class=\"p\">,</span> <span class=\"s2\">\"Comments contents\"</span><span class=\"p\">)</span>\n<span class=\"n\">db_to_web</span><span class=\"o\">.</span><span class=\"n\">protocol</span> <span class=\"o\">=</span> <span class=\"s2\">\"MySQL\"</span>\n<span class=\"n\">db_to_web</span><span class=\"o\">.</span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"s1\">'Results of insert op'</span>\n<span class=\"n\">db_to_web</span><span class=\"o\">.</span><span class=\"n\">order</span> <span class=\"o\">=</span> <span class=\"mi\">4</span>\n\n<span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">process</span><span class=\"p\">()</span>\n</pre>\n<p>Diagrams are output as <a href=\"https://graphviz.gitlab.io/\" rel=\"nofollow\">Dot</a> and <a href=\"https://plantuml.com/\" rel=\"nofollow\">PlantUML</a>.</p>\n<p>When <code>--dfd</code> argument is passed to the above <code>tm.py</code> file it generates output to stdout, which is fed to Graphviz's dot to generate the Data Flow Diagram:</p>\n<pre>tm.py --dfd <span class=\"p\">|</span> dot -Tpng -o sample.png\n</pre>\n<p>Generates this diagram:</p>\n<p><img alt=\"dfd.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ea3077fd9727ebc2c4319dfec4f9ba471e9e246/2e676974626f6f6b2f6173736574732f6466642e706e67\"></p>\n<p>The following command generates a Sequence diagram.</p>\n<pre>tm.py --seq <span class=\"p\">|</span> java -Djava.awt.headless<span class=\"o\">=</span><span class=\"nb\">true</span> -jar plantuml.jar -tpng -pipe &gt; seq.png\n</pre>\n<p>Generates this diagram:</p>\n<p><img alt=\"seq.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d47cf77733077badf18c4fc5e5880722ca8e8d47/2e676974626f6f6b2f6173736574732f7365712e706e67\"></p>\n<p>The diagrams and findings can be included in the template to create a final report:</p>\n<pre>tm.py --report docs/template.md <span class=\"p\">|</span> pandoc -f markdown -t html &gt; report.html\n</pre>\n<p>The templating format used in the report template is very simple:</p>\n<pre># Threat Model Sample\n***\n\n## System Description\n\n{tm.description}\n\n## Dataflow Diagram\n\n![Level 0 DFD](dfd.png)\n\n## Dataflows\n\nName|From|To |Data|Protocol|Port\n----|----|---|----|--------|----\n{dataflows:repeat:{{item.name}}|{{item.source.name}}|{{item.sink.name}}|{{item.data}}|{{item.protocol}}|{{item.dstPort}}\n}\n\n## Findings\n\n{findings:repeat:* {{item.description}} on element \"{{item.target}}\"\n}\n</pre>\n<h2>Currently supported threats</h2>\n<pre>INP01 - Buffer Overflow via Environment Variables\nINP02 - Overflow Buffers\nINP03 - Server Side Include (SSI) Injection\nCR01 - Session Sidejacking\nINP04 - HTTP Request Splitting\nCR02 - Cross Site Tracing\nINP05 - Command Line Execution through SQL Injection\nINP06 - SQL Injection through SOAP Parameter Tampering\nSC01 - JSON Hijacking (aka JavaScript Hijacking)\nLB01 - API Manipulation\nAA01 - Authentication Abuse/ByPass\nDS01 - Excavation\nDE01 - Interception\nDE02 - Double Encoding\nAPI01 - Exploit Test APIs\nAC01 - Privilege Abuse\nINP07 - Buffer Manipulation\nAC02 - Shared Data Manipulation\nDO01 - Flooding\nHA01 - Path Traversal\nAC03 - Subverting Environment Variable Values\nDO02 - Excessive Allocation\nDS02 - Try All Common Switches\nINP08 - Format String Injection\nINP09 - LDAP Injection\nINP10 - Parameter Injection\nINP11 - Relative Path Traversal\nINP12 - Client-side Injection-induced Buffer Overflow\nAC04 - XML Schema Poisoning\nDO03 - XML Ping of the Death\nAC05 - Content Spoofing\nINP13 - Command Delimiters\nINP14 - Input Data Manipulation\nDE03 - Sniffing Attacks\nCR03 - Dictionary-based Password Attack\nAPI02 - Exploit Script-Based APIs\nHA02 - White Box Reverse Engineering\nDS03 - Footprinting\nAC06 - Using Malicious Files\nHA03 - Web Application Fingerprinting\nSC02 - XSS Targeting Non-Script Elements\nAC07 - Exploiting Incorrectly Configured Access Control Security Levels\nINP15 - IMAP/SMTP Command Injection\nHA04 - Reverse Engineering\nSC03 - Embedding Scripts within Scripts\nINP16 - PHP Remote File Inclusion\nAA02 - Principal Spoof\nCR04 - Session Credential Falsification through Forging\nDO04 - XML Entity Expansion\nDS04 - XSS Targeting Error Pages\nSC04 - XSS Using Alternate Syntax\nCR05 - Encryption Brute Forcing\nAC08 - Manipulate Registry Information\nDS05 - Lifting Sensitive Data Embedded in Cache\n</pre>\n\n          </div>"}, "last_serial": 6236138, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "2cf42bcacbcb40c195bfb138ead07596", "sha256": "c183aaf1de247d21fdc2ed74df075012b8cfcf61ef9f15d1e2c28450636a22a5"}, "downloads": -1, "filename": "pytm-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2cf42bcacbcb40c195bfb138ead07596", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9750, "upload_time": "2018-10-17T20:34:55", "upload_time_iso_8601": "2018-10-17T20:34:55.681606Z", "url": "https://files.pythonhosted.org/packages/66/3b/6899bfbb604124f403c3bbc6a89b184a184741a86cd51cd892c6cba427c2/pytm-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ba7900a28e01748bcfb144fb86aaaeb8", "sha256": "9e01396df86308134bd91fa65a7bf5df1e24bc6fd0fd292355800743623e639e"}, "downloads": -1, "filename": "pytm-0.3.tar.gz", "has_sig": false, "md5_digest": "ba7900a28e01748bcfb144fb86aaaeb8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8953, "upload_time": "2018-10-17T20:34:56", "upload_time_iso_8601": "2018-10-17T20:34:56.682560Z", "url": "https://files.pythonhosted.org/packages/14/cb/3ed2635949b3b9c3a121582690fc597d8a8bfb8c7ec44b98e049adba3a82/pytm-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "c66fa8d25cbf9c7ecca02a5d511ce016", "sha256": "79bcc208fb7a587ad7da2fb5050fc928abb6a68e38a8518c174ffd092c6da729"}, "downloads": -1, "filename": "pytm-0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c66fa8d25cbf9c7ecca02a5d511ce016", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 39025, "upload_time": "2018-12-31T22:18:15", "upload_time_iso_8601": "2018-12-31T22:18:15.005271Z", "url": "https://files.pythonhosted.org/packages/6d/8d/1b96af978ec1f696a8f686e7b8c0bf811cacef4483ca69a2c98f68d2a325/pytm-0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f91ec950c753e1f0136ccec1f0fc080b", "sha256": "b91d9f24ba6521b3e23e1218a19295213d4174e1a4b0b11ba347cd56367a044b"}, "downloads": -1, "filename": "pytm-0.4.tar.gz", "has_sig": false, "md5_digest": "f91ec950c753e1f0136ccec1f0fc080b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 39428, "upload_time": "2018-12-31T22:18:16", "upload_time_iso_8601": "2018-12-31T22:18:16.393805Z", "url": "https://files.pythonhosted.org/packages/88/28/45599ccd29a30ba7ad5d27c1bb0c7354536fe4578579835ef47268f860aa/pytm-0.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "fcc763141530e50d6178d2fe314af072", "sha256": "b6fb844e994aaf083b7a01b173b0cd80df2bb4dd8fbfa68e04d34217eb39d579"}, "downloads": -1, "filename": "pytm-0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "fcc763141530e50d6178d2fe314af072", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 10854, "upload_time": "2019-11-02T20:37:33", "upload_time_iso_8601": "2019-11-02T20:37:33.596873Z", "url": "https://files.pythonhosted.org/packages/5c/61/7778bc4411eb177d2740ab74064eba426545665c63f518238899421dd723/pytm-0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fd8539f95da385471f72f826d742d23b", "sha256": "54d34e842878a6f95c62e9b6cb442d0855a6b7f0c931057d205b9d4fd5cc3afa"}, "downloads": -1, "filename": "pytm-0.6.tar.gz", "has_sig": false, "md5_digest": "fd8539f95da385471f72f826d742d23b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 80245, "upload_time": "2019-11-02T20:37:35", "upload_time_iso_8601": "2019-11-02T20:37:35.358209Z", "url": "https://files.pythonhosted.org/packages/b7/48/7f3b422923da1466579b7373eea15da267b01e284919531768bea2948aa5/pytm-0.6.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "ca9d8a01e18ed3af8bbe1689aebfc412", "sha256": "488f5d9ab5d9baac564ef4169508a76534df31585627376ce8feccaa0f96ecca"}, "downloads": -1, "filename": "pytm-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ca9d8a01e18ed3af8bbe1689aebfc412", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 77322, "upload_time": "2019-11-04T20:03:30", "upload_time_iso_8601": "2019-11-04T20:03:30.268471Z", "url": "https://files.pythonhosted.org/packages/27/b1/665d23e2412cac264bb0ecdc555f9bde56652f88077e0a294e3c6b2cf05a/pytm-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8970d94b7ea8808e6b8c2e3db6519bc2", "sha256": "6f4a67f7a8871566e1848c43fb6fb4a0a8573b686ccafb7d5ce67b59754f3b77"}, "downloads": -1, "filename": "pytm-0.7.tar.gz", "has_sig": false, "md5_digest": "8970d94b7ea8808e6b8c2e3db6519bc2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 132139, "upload_time": "2019-11-04T20:03:32", "upload_time_iso_8601": "2019-11-04T20:03:32.282671Z", "url": "https://files.pythonhosted.org/packages/44/27/73ad4dc687fdfbc42ae194b51e18592e7d9ff13e37fa231fdf808f654027/pytm-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "732c85e719b268efda46dbe5d0cacbf1", "sha256": "a2e3c8ec3893bd1cd25c25480fb1a8c332c818ccc0851bde2ea34234be72c8c1"}, "downloads": -1, "filename": "pytm-0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "732c85e719b268efda46dbe5d0cacbf1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 77004, "upload_time": "2019-11-06T16:16:34", "upload_time_iso_8601": "2019-11-06T16:16:34.102856Z", "url": "https://files.pythonhosted.org/packages/c1/3e/c8da17deebdb6d553bae99562674c8dcfdde27790f464795c86dcb45f955/pytm-0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7dee59f991aa9e31ebf341b20fa23bf", "sha256": "2caab9430914a7cb3e56500319daec695aa5de9e7663f1bbaa90aa18700626e0"}, "downloads": -1, "filename": "pytm-0.8.tar.gz", "has_sig": false, "md5_digest": "e7dee59f991aa9e31ebf341b20fa23bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13688, "upload_time": "2019-11-06T16:16:35", "upload_time_iso_8601": "2019-11-06T16:16:35.948347Z", "url": "https://files.pythonhosted.org/packages/98/40/0acc32b36ff3c7faf5d61f54dbfeacb19b2a5ef0333df86429aaa3c3d6d7/pytm-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "4ee741f93c5f350f2437e2b8f83dcee2", "sha256": "5cd334978396fb6ae2837ddbbf50a39bf7494ef7890afe7d773bef8b938b7461"}, "downloads": -1, "filename": "pytm-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4ee741f93c5f350f2437e2b8f83dcee2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 77048, "upload_time": "2019-11-07T16:55:23", "upload_time_iso_8601": "2019-11-07T16:55:23.524835Z", "url": "https://files.pythonhosted.org/packages/05/68/8b2e768f7a14a37e018b754687f709d276422ffef8baff1e37b82a38531b/pytm-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c63a5369bb0539872879a19900b5dd27", "sha256": "03c543f0d70e1147bb62d03994b07cd814f851e852ba234a407f8d025e866aa5"}, "downloads": -1, "filename": "pytm-0.8.1.tar.gz", "has_sig": false, "md5_digest": "c63a5369bb0539872879a19900b5dd27", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13713, "upload_time": "2019-11-07T16:55:25", "upload_time_iso_8601": "2019-11-07T16:55:25.010142Z", "url": "https://files.pythonhosted.org/packages/e1/58/199f3db4b366d795cdbfad3b2f748a0111827e9fe00837ef821b9871c3ba/pytm-0.8.1.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "f7bb8f316df32dd9cbe613d422b60189", "sha256": "f4ceb31f7ea237c40f0c55364db9c8db3742149937b18651c6a9a1a81833d509"}, "downloads": -1, "filename": "pytm-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f7bb8f316df32dd9cbe613d422b60189", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 105433, "upload_time": "2019-12-03T17:06:00", "upload_time_iso_8601": "2019-12-03T17:06:00.783207Z", "url": "https://files.pythonhosted.org/packages/23/68/96b102d0cfac8a9065e2d5f5681352894d1c39f662145e74767aae6b9b8b/pytm-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eef9ccb291cd22ddea3351e0754931f3", "sha256": "9c30836dabc6f4d5dd893e98c1df98bb2e51ad3eded566c5b09047303b90a557"}, "downloads": -1, "filename": "pytm-1.0.tar.gz", "has_sig": false, "md5_digest": "eef9ccb291cd22ddea3351e0754931f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 273093, "upload_time": "2019-12-03T17:06:02", "upload_time_iso_8601": "2019-12-03T17:06:02.230282Z", "url": "https://files.pythonhosted.org/packages/c0/82/ac2015c030f1eeb2002bba48d10562596004273dcb18c231f04e149c8434/pytm-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f7bb8f316df32dd9cbe613d422b60189", "sha256": "f4ceb31f7ea237c40f0c55364db9c8db3742149937b18651c6a9a1a81833d509"}, "downloads": -1, "filename": "pytm-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f7bb8f316df32dd9cbe613d422b60189", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 105433, "upload_time": "2019-12-03T17:06:00", "upload_time_iso_8601": "2019-12-03T17:06:00.783207Z", "url": "https://files.pythonhosted.org/packages/23/68/96b102d0cfac8a9065e2d5f5681352894d1c39f662145e74767aae6b9b8b/pytm-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eef9ccb291cd22ddea3351e0754931f3", "sha256": "9c30836dabc6f4d5dd893e98c1df98bb2e51ad3eded566c5b09047303b90a557"}, "downloads": -1, "filename": "pytm-1.0.tar.gz", "has_sig": false, "md5_digest": "eef9ccb291cd22ddea3351e0754931f3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 273093, "upload_time": "2019-12-03T17:06:02", "upload_time_iso_8601": "2019-12-03T17:06:02.230282Z", "url": "https://files.pythonhosted.org/packages/c0/82/ac2015c030f1eeb2002bba48d10562596004273dcb18c231f04e149c8434/pytm-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:11 2020"}