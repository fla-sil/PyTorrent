{"info": {"author": "Eric Gazoni", "author_email": "eric@adimian.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# HashLog\n[![Coverage Status](https://coveralls.io/repos/github/ericgazoni/hlog/badge.svg?branch=master)](https://coveralls.io/github/ericgazoni/hlog?branch=master)\n\n# Principles\n\n- Records are immutable\n- Records are ordered\n- It must be possible to check `hash(Xi)` for any `i`\n- `hash(Xi)` can be sent to anyone as a proof\n- `hash(Xi) == hash(X, hash(Xi-1))`\n- You do not need X to perform the check\n\n# Installation\n\n    $ pip install hlog\n\n# Usage\n\n## Getting started\n\n```python\n# create a chain\nc = Chain()\n\n# send some messages\nc.append(message=\"Alice gives 10.36 euros to Bob\", amount=10.36, currency=\"EUR\")\nc.append(message=\"Bob gives 2 dollars to Alice\", amount=2, currency=\"USD\")\n\n# you can loop through the chain records\nused_currencies = set(r.fields[\"currency\"] for r in c.records)\n\n# call verify() to ensure records have not been modified\nc.verify()\n```\n\n## Raising an exception during validation\n\n```python\nc.verify(raise_on_error=True)\n```\nVerify will raise a `ModifiedRecordException`. It has 3 interesting attributes:\n\n- `index`: the index in the chain where validation starts to fail\n- `message`: a user-friendly message to indicate the error\n- `record`: the `Record` object itself\n\n## Dumping\n\n```python\nc = Chain()\nc.append(message=\"hello\")\nc.append(message=\"wonderful\")\nc.append(message=\"world\")\n\nrows = c.dump()\n```\n`rows` is a `tuple` of `bytes`, each item being one record of the chain.\n\n## Restoring from a dump\n\nIf you want to reconstruct your chain based on a file or database records, you can use `Chain.from_dump()`\n```python\nc = Chain()\nc.append(message=\"hello\")\nc.append(message=\"wonderful\")\nc.append(message=\"world\")\n\nd = c.dump()\n\nc2 = Chain.from_dump(d)\n\nc2.verify()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "hlog", "package_url": "https://pypi.org/project/hlog/", "platform": "", "project_url": "https://pypi.org/project/hlog/", "project_urls": null, "release_url": "https://pypi.org/project/hlog/1.0.1/", "requires_dist": null, "requires_python": "", "summary": "Hash-chain log implementation", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>HashLog</h1>\n<p><a href=\"https://coveralls.io/github/ericgazoni/hlog?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1fcc451ce31536544e0728661a23c18217c790ac/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6572696367617a6f6e692f686c6f672f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<h1>Principles</h1>\n<ul>\n<li>Records are immutable</li>\n<li>Records are ordered</li>\n<li>It must be possible to check <code>hash(Xi)</code> for any <code>i</code></li>\n<li><code>hash(Xi)</code> can be sent to anyone as a proof</li>\n<li><code>hash(Xi) == hash(X, hash(Xi-1))</code></li>\n<li>You do not need X to perform the check</li>\n</ul>\n<h1>Installation</h1>\n<pre><code>$ pip install hlog\n</code></pre>\n<h1>Usage</h1>\n<h2>Getting started</h2>\n<pre><span class=\"c1\"># create a chain</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Chain</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># send some messages</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"Alice gives 10.36 euros to Bob\"</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mf\">10.36</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s2\">\"EUR\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"Bob gives 2 dollars to Alice\"</span><span class=\"p\">,</span> <span class=\"n\">amount</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">currency</span><span class=\"o\">=</span><span class=\"s2\">\"USD\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># you can loop through the chain records</span>\n<span class=\"n\">used_currencies</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"s2\">\"currency\"</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">records</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># call verify() to ensure records have not been modified</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n</pre>\n<h2>Raising an exception during validation</h2>\n<pre><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">raise_on_error</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Verify will raise a <code>ModifiedRecordException</code>. It has 3 interesting attributes:</p>\n<ul>\n<li><code>index</code>: the index in the chain where validation starts to fail</li>\n<li><code>message</code>: a user-friendly message to indicate the error</li>\n<li><code>record</code>: the <code>Record</code> object itself</li>\n</ul>\n<h2>Dumping</h2>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Chain</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"wonderful\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"world\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">rows</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span>\n</pre>\n<p><code>rows</code> is a <code>tuple</code> of <code>bytes</code>, each item being one record of the chain.</p>\n<h2>Restoring from a dump</h2>\n<p>If you want to reconstruct your chain based on a file or database records, you can use <code>Chain.from_dump()</code></p>\n<pre><span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Chain</span><span class=\"p\">()</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"hello\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"wonderful\"</span><span class=\"p\">)</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s2\">\"world\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">()</span>\n\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">Chain</span><span class=\"o\">.</span><span class=\"n\">from_dump</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n<span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6431150, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "8acfa4b3e0388bbf2bda93586f14ec29", "sha256": "931ad958218bf64c4bb8299f850df30e77485a912db595d8e838e42c1a507f26"}, "downloads": -1, "filename": "hlog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8acfa4b3e0388bbf2bda93586f14ec29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5892, "upload_time": "2020-01-10T15:38:09", "upload_time_iso_8601": "2020-01-10T15:38:09.518873Z", "url": "https://files.pythonhosted.org/packages/8c/fb/4f4e2afd30b56f9e31e05cbbdcb1876a547bbda2ee6ec9ef08d381587546/hlog-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8acfa4b3e0388bbf2bda93586f14ec29", "sha256": "931ad958218bf64c4bb8299f850df30e77485a912db595d8e838e42c1a507f26"}, "downloads": -1, "filename": "hlog-1.0.1.tar.gz", "has_sig": false, "md5_digest": "8acfa4b3e0388bbf2bda93586f14ec29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5892, "upload_time": "2020-01-10T15:38:09", "upload_time_iso_8601": "2020-01-10T15:38:09.518873Z", "url": "https://files.pythonhosted.org/packages/8c/fb/4f4e2afd30b56f9e31e05cbbdcb1876a547bbda2ee6ec9ef08d381587546/hlog-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:57 2020"}