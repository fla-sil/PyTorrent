{"info": {"author": "Matteo Cavada", "author_email": "cvd00@insicuri.net", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Testing"], "description": "# pynuXmv\n\n`pynuXmv` is a small utility capable of transpiling a subset of [Python](https://www.python.org/) to [`nuXmv`](https://nuxmv.fbk.eu/) specification code.\n\n\n## Installation\n\n`pynuXmv` requires `nuXmv` 2.0.0 (but should work with any version `>= 2.0.0`) and `python >=3.8`.\n\nTo install it,\n\n\tpip install pynuxmv\n\n\n\n## Execution\n\nFrom a shell, launch:\n\n\tpynuXmv <python_fname> <nuxmv_out_fname>\n\nThis will transpile `python_fname` and save the result into `nuxmv_out_fname`.\n\n\n\n## Examples\n\nSee `tests/` folder for examples. \n\nA simple one:\n\n\tfrom pynuxmv.main import *\n\n\ta = 0\n\tb = 0\n\twhile (a + b < 2):\n\t  if b == 0 and a == 1:\n\t\tb = 1  \n\t  else:\n\t\tif b == 1 and a == 1:\n\t\t  b = 0  \n\t  if a == 1:\n\t\ta = 0\n\t  else:\n\t\ta = 1\n\n\tltlspec(\"F (a = 1 & b = 1)\")\n\tltlspec(\"(a = 0 & b = 0) -> F (a = 1 & b = 0)\")\n\tltlspec(\"(a = 1 & b = 0) -> F (a = 0 & b = 1)\")\n\tltlspec(\"(a = 0 & b = 1) -> F (a = 1 & b = 1)\")\n\nis converted into:\n\n\tMODULE main\n\n\tVAR\n\ta: integer;\n\tb: integer;\n\tline: integer;\n\n\tASSIGN\n\tinit(a) := 0;\n\tinit(b) := 0;\n\tinit(line) := 1;\n\n\tnext(line) := case\n\t\tline = 8 & b = 1 & a = 1: line + 1; -- if(True)\n\t\tline = 8: 11;                       -- if(False)\n\t\tline = 5 & b = 0 & a = 1: line + 1; -- if(True)\n\t\tline = 6: 12; -- end if(True) \n\t\tline = 5: 8;  -- else\n\t\tline = 12 & a = 1: line + 1; -- if(True)\n\t\tline = 13: 17;               -- end if(True) \n\t\tline = 12: 15;               -- else\n\t\tline = 4 & a + b < 2: line + 1; -- while(True)\n\t\tline = 4:  18; -- while(False)\n\t\tline = 17: 4;  -- loop while\n\t\tline = 21: 21; \n\t\tTRUE: line + 1; \n\tesac;\n\n\tnext(a) := case\n\t\tline = 13: 0;\n\t\tline = 15: 1;\n\t\tTRUE: a; \n\tesac;\n\n\tnext(b) := case\n\t\tline = 6: 1;\n\t\tline = 9: 0;\n\t\tTRUE: b; \n\tesac;\n\n\tLTLSPEC F (a = 1 & b = 1);\n\tLTLSPEC (a = 0 & b = 0) -> F (a = 1 & b = 0);\n\tLTLSPEC (a = 1 & b = 0) -> F (a = 0 & b = 1);\n\tLTLSPEC (a = 0 & b = 1) -> F (a = 1 & b = 1);\n\nThis nuXmv file can be run with:\n\n\tnuXmv -source cmd_ltl <filename>\n\nwhere `cmd_ltl` (or, for invariant checking, the equivalent `cmd_invar`) can be found in this repository.\n\n\n## Limitations\n\nUp to now, this simple script has many limitations:\n\n+ Limited support for `for` construct (only with numeric `range()`s)\n+ No support for python types other than `int`,`bool` and non-nested `list` (`list` support is still very experimental)\n+ No support for higher structures (i.e. function calls, classes...)\n+ No support for concurrent execution and/or `nuXmv` modules\n\nI hope to be able to work on some of these issues in the (near) future.\n\nAlso, take a look at the `TODO.md` file for other thing that can (not) be done up to now.\n\n___\n\n## Basic tutorial\n\nThe following assumes that you are examining a portion of \"self-contained\" code (ie. code that doesn't reference variables and/or functions defined outside of such portion) that is within the limitations listed before. \n\nLet's look at an example:\n\n\t... (other code) ...\n\tstart_nuxmv()\n\n\tb: bool = False\n\tx = 0\n\n\twhile (x < 10 and not b):\n\t\tx += 1\n\n\tltlspec(\"F x = 10\")\n\tinvarspec(\"!b\")\n\n\tend_nuxmv()\n\t... (other code) ...\n\nLet's notice some things:\n\n+ The block of code that we want to isolate and test is enclosed within two functions, `start_nuxmv()` and `end_nuxmv()`. These functions do nothing, they are just placeholders. There can be as many of these functions as you like, but they should not be nested.\n\n+ `b` is a boolean; this information needs to be specified in order to distinguish it from an `integer`, the default type assumed by `pynuxmv`.\n\n+ At the end of the block you specify the conditions you want your program to comply with. These can be of two kinds, `LTL` formulas (`ltlspec`) or invariants (`invarspec`). More informations on LTL can be found on [wikipedia](https://en.wikipedia.org/wiki/Linear_temporal_logic). \n\n+ Finally: how do you test this portion of code? You simply run `pynuXmv` with the name of the source `.py` file to analyze and with the file name of the resulting `nuXmv` source code. You then launch `nuXmv` on these latter file, with an appropriate commands file (such as `unify`, which you can find in this repository).\n\n\n#### Another examples: `postcondition`s\n\nLet's look at another example:\n\n\tfrom pynuxmv.main import *\n\n\tx = 0\n\ty = 1\n\tl: list = [1,2,3]\n\twhile (y < 10):\n\t  x += 1\n\t  y += 1\n\t  l[2] = l[2] + x \n\n\tpostcondition(\"y = 10\", False)\n\tpostcondition(\"x = 9\", False)\n\tpostcondition(\"l[2] = 48\", True)\n\n+ `l` is a `list`, and must be annotated as such. Here is a simple example of basically everything that you can do with lists so far (not much!)\n+ The `postcondition(s: str, strong: bool)` function specifies a condition that needs to be satisfied _after_ the last line of code. The function is accompained by the `strong` flag: basically, `nuXmv` is not always capable of establishing whether a formula is true or false; if this is the case, enabling the `strong` flag will build a \"stronger\" condition in which previous postconditions are taken as premises; this may or may not help `nuXmv` in its judgments. In this example, the three postconditions will generate the following formulae:\n\n\t\tINVARSPEC line = 7 -> y = 10;\n\t\tINVARSPEC line = 7 -> x = 9;\n\t\tINVARSPEC ((line = 7 -> y = 10) & (line = 7 -> x = 9) ) -> (line = 7 -> l[2] = 48);\n\n\tOf course, bear in mind that if one of the premises is false the strong postcondition will be trivially true!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mattyonweb/pynuxmv", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pynuxmv", "package_url": "https://pypi.org/project/pynuxmv/", "platform": "", "project_url": "https://pypi.org/project/pynuxmv/", "project_urls": {"Homepage": "https://github.com/mattyonweb/pynuxmv"}, "release_url": "https://pypi.org/project/pynuxmv/0.1.2/", "requires_dist": ["astpretty ; extra == 'pretty_printing'"], "requires_python": ">=3.8", "summary": "Transpile Python to nuXmv source code", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pynuXmv</h1>\n<p><code>pynuXmv</code> is a small utility capable of transpiling a subset of <a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> to <a href=\"https://nuxmv.fbk.eu/\" rel=\"nofollow\"><code>nuXmv</code></a> specification code.</p>\n<h2>Installation</h2>\n<p><code>pynuXmv</code> requires <code>nuXmv</code> 2.0.0 (but should work with any version <code>&gt;= 2.0.0</code>) and <code>python &gt;=3.8</code>.</p>\n<p>To install it,</p>\n<pre><code>pip install pynuxmv\n</code></pre>\n<h2>Execution</h2>\n<p>From a shell, launch:</p>\n<pre><code>pynuXmv &lt;python_fname&gt; &lt;nuxmv_out_fname&gt;\n</code></pre>\n<p>This will transpile <code>python_fname</code> and save the result into <code>nuxmv_out_fname</code>.</p>\n<h2>Examples</h2>\n<p>See <code>tests/</code> folder for examples.</p>\n<p>A simple one:</p>\n<pre><code>from pynuxmv.main import *\n\na = 0\nb = 0\nwhile (a + b &lt; 2):\n  if b == 0 and a == 1:\n\tb = 1  \n  else:\n\tif b == 1 and a == 1:\n\t  b = 0  \n  if a == 1:\n\ta = 0\n  else:\n\ta = 1\n\nltlspec(\"F (a = 1 &amp; b = 1)\")\nltlspec(\"(a = 0 &amp; b = 0) -&gt; F (a = 1 &amp; b = 0)\")\nltlspec(\"(a = 1 &amp; b = 0) -&gt; F (a = 0 &amp; b = 1)\")\nltlspec(\"(a = 0 &amp; b = 1) -&gt; F (a = 1 &amp; b = 1)\")\n</code></pre>\n<p>is converted into:</p>\n<pre><code>MODULE main\n\nVAR\na: integer;\nb: integer;\nline: integer;\n\nASSIGN\ninit(a) := 0;\ninit(b) := 0;\ninit(line) := 1;\n\nnext(line) := case\n\tline = 8 &amp; b = 1 &amp; a = 1: line + 1; -- if(True)\n\tline = 8: 11;                       -- if(False)\n\tline = 5 &amp; b = 0 &amp; a = 1: line + 1; -- if(True)\n\tline = 6: 12; -- end if(True) \n\tline = 5: 8;  -- else\n\tline = 12 &amp; a = 1: line + 1; -- if(True)\n\tline = 13: 17;               -- end if(True) \n\tline = 12: 15;               -- else\n\tline = 4 &amp; a + b &lt; 2: line + 1; -- while(True)\n\tline = 4:  18; -- while(False)\n\tline = 17: 4;  -- loop while\n\tline = 21: 21; \n\tTRUE: line + 1; \nesac;\n\nnext(a) := case\n\tline = 13: 0;\n\tline = 15: 1;\n\tTRUE: a; \nesac;\n\nnext(b) := case\n\tline = 6: 1;\n\tline = 9: 0;\n\tTRUE: b; \nesac;\n\nLTLSPEC F (a = 1 &amp; b = 1);\nLTLSPEC (a = 0 &amp; b = 0) -&gt; F (a = 1 &amp; b = 0);\nLTLSPEC (a = 1 &amp; b = 0) -&gt; F (a = 0 &amp; b = 1);\nLTLSPEC (a = 0 &amp; b = 1) -&gt; F (a = 1 &amp; b = 1);\n</code></pre>\n<p>This nuXmv file can be run with:</p>\n<pre><code>nuXmv -source cmd_ltl &lt;filename&gt;\n</code></pre>\n<p>where <code>cmd_ltl</code> (or, for invariant checking, the equivalent <code>cmd_invar</code>) can be found in this repository.</p>\n<h2>Limitations</h2>\n<p>Up to now, this simple script has many limitations:</p>\n<ul>\n<li>Limited support for <code>for</code> construct (only with numeric <code>range()</code>s)</li>\n<li>No support for python types other than <code>int</code>,<code>bool</code> and non-nested <code>list</code> (<code>list</code> support is still very experimental)</li>\n<li>No support for higher structures (i.e. function calls, classes...)</li>\n<li>No support for concurrent execution and/or <code>nuXmv</code> modules</li>\n</ul>\n<p>I hope to be able to work on some of these issues in the (near) future.</p>\n<p>Also, take a look at the <code>TODO.md</code> file for other thing that can (not) be done up to now.</p>\n<hr>\n<h2>Basic tutorial</h2>\n<p>The following assumes that you are examining a portion of \"self-contained\" code (ie. code that doesn't reference variables and/or functions defined outside of such portion) that is within the limitations listed before.</p>\n<p>Let's look at an example:</p>\n<pre><code>... (other code) ...\nstart_nuxmv()\n\nb: bool = False\nx = 0\n\nwhile (x &lt; 10 and not b):\n\tx += 1\n\nltlspec(\"F x = 10\")\ninvarspec(\"!b\")\n\nend_nuxmv()\n... (other code) ...\n</code></pre>\n<p>Let's notice some things:</p>\n<ul>\n<li>\n<p>The block of code that we want to isolate and test is enclosed within two functions, <code>start_nuxmv()</code> and <code>end_nuxmv()</code>. These functions do nothing, they are just placeholders. There can be as many of these functions as you like, but they should not be nested.</p>\n</li>\n<li>\n<p><code>b</code> is a boolean; this information needs to be specified in order to distinguish it from an <code>integer</code>, the default type assumed by <code>pynuxmv</code>.</p>\n</li>\n<li>\n<p>At the end of the block you specify the conditions you want your program to comply with. These can be of two kinds, <code>LTL</code> formulas (<code>ltlspec</code>) or invariants (<code>invarspec</code>). More informations on LTL can be found on <a href=\"https://en.wikipedia.org/wiki/Linear_temporal_logic\" rel=\"nofollow\">wikipedia</a>.</p>\n</li>\n<li>\n<p>Finally: how do you test this portion of code? You simply run <code>pynuXmv</code> with the name of the source <code>.py</code> file to analyze and with the file name of the resulting <code>nuXmv</code> source code. You then launch <code>nuXmv</code> on these latter file, with an appropriate commands file (such as <code>unify</code>, which you can find in this repository).</p>\n</li>\n</ul>\n<h4>Another examples: <code>postcondition</code>s</h4>\n<p>Let's look at another example:</p>\n<pre><code>from pynuxmv.main import *\n\nx = 0\ny = 1\nl: list = [1,2,3]\nwhile (y &lt; 10):\n  x += 1\n  y += 1\n  l[2] = l[2] + x \n\npostcondition(\"y = 10\", False)\npostcondition(\"x = 9\", False)\npostcondition(\"l[2] = 48\", True)\n</code></pre>\n<ul>\n<li>\n<p><code>l</code> is a <code>list</code>, and must be annotated as such. Here is a simple example of basically everything that you can do with lists so far (not much!)</p>\n</li>\n<li>\n<p>The <code>postcondition(s: str, strong: bool)</code> function specifies a condition that needs to be satisfied <em>after</em> the last line of code. The function is accompained by the <code>strong</code> flag: basically, <code>nuXmv</code> is not always capable of establishing whether a formula is true or false; if this is the case, enabling the <code>strong</code> flag will build a \"stronger\" condition in which previous postconditions are taken as premises; this may or may not help <code>nuXmv</code> in its judgments. In this example, the three postconditions will generate the following formulae:</p>\n<pre><code>  INVARSPEC line = 7 -&gt; y = 10;\n  INVARSPEC line = 7 -&gt; x = 9;\n  INVARSPEC ((line = 7 -&gt; y = 10) &amp; (line = 7 -&gt; x = 9) ) -&gt; (line = 7 -&gt; l[2] = 48);\n</code></pre>\n<p>Of course, bear in mind that if one of the premises is false the strong postcondition will be trivially true!</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6598070, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0d4904fa5688a440724568d26f127071", "sha256": "3be3d4e461e6723244bab69cc701c9ea6978d25019fa2c206bcf67400129341e"}, "downloads": -1, "filename": "pynuxmv-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0d4904fa5688a440724568d26f127071", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 5377, "upload_time": "2020-02-04T21:53:26", "upload_time_iso_8601": "2020-02-04T21:53:26.817123Z", "url": "https://files.pythonhosted.org/packages/16/45/3542f592b3cc9138b945cf9a7b917e571f980ad5ce61085060d0dea6d581/pynuxmv-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7b05989e883151175ecb8ae4a638db13", "sha256": "980fd5d1b08ee7b880423909c319b8ab5ad86ef25f27dffdf26847ad77cdb46c"}, "downloads": -1, "filename": "pynuxmv-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7b05989e883151175ecb8ae4a638db13", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 5618, "upload_time": "2020-02-04T21:53:29", "upload_time_iso_8601": "2020-02-04T21:53:29.329719Z", "url": "https://files.pythonhosted.org/packages/7d/26/bebacc4529f611913fb75c216468e02458a493284f49564c4b658141d8b5/pynuxmv-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6ac0cf961c4eb5eb98c24c66871de0f7", "sha256": "03f49ee5a8073c01272e83b1c9380348a99fb9f0f4f266c145262a28bbfbf437"}, "downloads": -1, "filename": "pynuxmv-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "6ac0cf961c4eb5eb98c24c66871de0f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 7555, "upload_time": "2020-02-05T23:04:45", "upload_time_iso_8601": "2020-02-05T23:04:45.538954Z", "url": "https://files.pythonhosted.org/packages/b1/ac/cdc0f626deb95c313d6fcbb62b86c6af8fc4937957abd947a06c4240617d/pynuxmv-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3f4bd651e0cf48c00c50583986c1ed0", "sha256": "dcbff3b8a9f793fff846d58b4a2d38d9f8587c01bb6a585fca63e52eed5caf8d"}, "downloads": -1, "filename": "pynuxmv-0.1.1.tar.gz", "has_sig": false, "md5_digest": "b3f4bd651e0cf48c00c50583986c1ed0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 8195, "upload_time": "2020-02-05T23:04:47", "upload_time_iso_8601": "2020-02-05T23:04:47.205524Z", "url": "https://files.pythonhosted.org/packages/f5/fa/fd9fcccaa718af96858ae48e8a606446543ca6c957646bad676c83db6d60/pynuxmv-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "0e5fd2c2c1b40ddb3d5eef4d504b0f6a", "sha256": "658bcf8c062fc95efbc441e9b41d5e6fc51ab0eee5bd68ff85c0cb8e4a709be5"}, "downloads": -1, "filename": "pynuxmv-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0e5fd2c2c1b40ddb3d5eef4d504b0f6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 12093, "upload_time": "2020-02-09T15:53:19", "upload_time_iso_8601": "2020-02-09T15:53:19.694778Z", "url": "https://files.pythonhosted.org/packages/fd/c3/78bc48052303ce5eedb831e158a42b2cd2ea65c84bb7c2eeac949a606316/pynuxmv-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e200ed9f5b575d5c03f3cfb9e4d45d50", "sha256": "f8871cb9064ac15d4674e40262d4c9536dbd760ec820c1784b1ec62ca9f0fdba"}, "downloads": -1, "filename": "pynuxmv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e200ed9f5b575d5c03f3cfb9e4d45d50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 13514, "upload_time": "2020-02-09T15:53:21", "upload_time_iso_8601": "2020-02-09T15:53:21.185117Z", "url": "https://files.pythonhosted.org/packages/1c/b9/c31dd98eb98d82dd877c61bdfc022664fe90a77cd701c03f39d654b84d8c/pynuxmv-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e5fd2c2c1b40ddb3d5eef4d504b0f6a", "sha256": "658bcf8c062fc95efbc441e9b41d5e6fc51ab0eee5bd68ff85c0cb8e4a709be5"}, "downloads": -1, "filename": "pynuxmv-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0e5fd2c2c1b40ddb3d5eef4d504b0f6a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.8", "size": 12093, "upload_time": "2020-02-09T15:53:19", "upload_time_iso_8601": "2020-02-09T15:53:19.694778Z", "url": "https://files.pythonhosted.org/packages/fd/c3/78bc48052303ce5eedb831e158a42b2cd2ea65c84bb7c2eeac949a606316/pynuxmv-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e200ed9f5b575d5c03f3cfb9e4d45d50", "sha256": "f8871cb9064ac15d4674e40262d4c9536dbd760ec820c1784b1ec62ca9f0fdba"}, "downloads": -1, "filename": "pynuxmv-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e200ed9f5b575d5c03f3cfb9e4d45d50", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.8", "size": 13514, "upload_time": "2020-02-09T15:53:21", "upload_time_iso_8601": "2020-02-09T15:53:21.185117Z", "url": "https://files.pythonhosted.org/packages/1c/b9/c31dd98eb98d82dd877c61bdfc022664fe90a77cd701c03f39d654b84d8c/pynuxmv-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:58 2020"}