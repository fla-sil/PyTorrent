{"info": {"author": "Robert H\u00f6lzl", "author_email": "robert.hoelzl@posteo.de", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Programming Language :: C", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Testing"], "description": "# Headlock - Python/C Bridge for Unittesting\n\n[![buildstate](https://api.travis-ci.com/mrh1997/headlock.svg?branch=master \"Build State\")](https://travis-ci.com/mrh1997/headlock)\n[![docstate](https://readthedocs.org/projects/headlock/badge/?version=latest \"Documentation Generation State\")](https://headlock.readthedocs.io/en/latest/)\n\n## About\n\nThis is an adapter for testing C code via tests written in python.\nWhen being combined i.e. with pytest it provides a very powerful and\nconvinient way of writing (unit-/integration-) tests for C code.\n\nIn contrary to other C/Python bridges (like ctypes, cffi, swing, ...)\nthe goals of this projects are:\n\n - Run (and Compile) a piece of C code (Module Under Test)\n   out of the box with as less lines of Python code as possible.\n   No need to create Makefile, no need to run extra build steps.\n - Provide a simple, intuitive API for accessing C objects\n - Allow to quickly:\n   - mock the underlying C modules in Python\n   - work with different binaries of a Module Under Test at\n     the same time.\n   - testing a Module Under Test with binaries compiled with\n     different preprocessor defines\n - Run the C code in a separate Address Space to avoid that a crashing\n   Module Under Test crashes also the testing python code\n   (Not implemented yet!).\n - Especially make it work with embedded systems, so that\n   - C code can be run on *real hardware* while python tests run on PC.\n     (Mainly useful for integration tests)\n     This is not implemented yet!\n   - C code can be run on PC instead of embedded environment.\n    (Mainly useful for unittests)\n\nExplicitly Non-Goals Are:\n\n - Supporting C++ is not planned\n - Performance has a very low priority. This does not mean that it is\n   slow. But if speed conflicts with one of the goals of this project,\n   there will be no compromises in favour of speed.\n - Being self-contained is not planned. A C-compiler is required\n   to be installed. Furthermore currently LLVM has to be installed\n   at it is used for parsing the file.\n - Python < 3.6 will never be supported\n\n\n## Sample\n\nThis piece of C-code contains a macros, a struct a function\nimplementation and a function that is relying on\n(which should be mocked):\n\n```c\n#include \"underlying_module.h\"\n\nstruct ops_t\n{\n    int a, b;\n} ;\n\n#define MACRO_2   (MACRO_1 + 1)\n\nint func(struct ops_t * p)\n{\n    return underlying_func(p->a + p->b + MACRO_1);\n}\n```\n\nYou can access it from python through *headlock* like:\n\n```python\nfrom headlock.testsetup import TestSetup, CModule\n\n@CModule('dummy.c', MACRO_1=1)\nclass TSSample(TestSetup):\n    def underlying_func_mock(self, param):\n        return param.val + 4000\n\nwith TSSample() as ts:\n    ops = ts.struct.ops_t(a=ts.MACRO_2, b=20)\n    assert ts.func(ops.ptr).val == 4021\n```\n\nThis demonstrates how:\n * You can handle different binaries of the same C-source per .py file\n   (as each one is a TestSetup derived class instead of a module)\n * Every binary can be compiled with other parameters\n   (PY_MACRO can be set differently per testsetup)\n * structures/unions/enums/typedefs can be accessed from Python without\n   extra declarations (```struct ops_t``` in this case).\n * You can access C-functions from Python without extra declarations\n   (```func``` in this case)\n * You can access C-macros from Python without extra declarations\n   (```C_MACRO``` in this case)\n * You can call python-methods from C (=mocking C functions that are\n   not part of the Module Under Test;\n   ```underlying_func``` in this case). It is even possible to\n   dynamicially replace mocks (i.e. by unittest.mock.Mock())\n\n## Status\n\nCurrently this is alpha.\n\nFor a list of planned but not yet implemented features please refer to\n[Development Status](https://headlock.readthedocs.io/en/latest/development-status.html)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://headlock.readthedocs.io/en/latest/index.html", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "headlock", "package_url": "https://pypi.org/project/headlock/", "platform": "", "project_url": "https://pypi.org/project/headlock/", "project_urls": {"Homepage": "https://headlock.readthedocs.io/en/latest/index.html"}, "release_url": "https://pypi.org/project/headlock/0.5.0/", "requires_dist": null, "requires_python": "", "summary": "An adapter for making C code testable from Python", "version": "0.5.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Headlock - Python/C Bridge for Unittesting</h1>\n<p><a href=\"https://travis-ci.com/mrh1997/headlock\" rel=\"nofollow\"><img alt=\"buildstate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b26ec1839dbf1128eace0ba8829c6c37e58a1faf/68747470733a2f2f6170692e7472617669732d63692e636f6d2f6d7268313939372f686561646c6f636b2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://headlock.readthedocs.io/en/latest/\" rel=\"nofollow\"><img alt=\"docstate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/58c6ceb74c17caa7c92cc9486ff16315b734125f/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f686561646c6f636b2f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<h2>About</h2>\n<p>This is an adapter for testing C code via tests written in python.\nWhen being combined i.e. with pytest it provides a very powerful and\nconvinient way of writing (unit-/integration-) tests for C code.</p>\n<p>In contrary to other C/Python bridges (like ctypes, cffi, swing, ...)\nthe goals of this projects are:</p>\n<ul>\n<li>Run (and Compile) a piece of C code (Module Under Test)\nout of the box with as less lines of Python code as possible.\nNo need to create Makefile, no need to run extra build steps.</li>\n<li>Provide a simple, intuitive API for accessing C objects</li>\n<li>Allow to quickly:\n<ul>\n<li>mock the underlying C modules in Python</li>\n<li>work with different binaries of a Module Under Test at\nthe same time.</li>\n<li>testing a Module Under Test with binaries compiled with\ndifferent preprocessor defines</li>\n</ul>\n</li>\n<li>Run the C code in a separate Address Space to avoid that a crashing\nModule Under Test crashes also the testing python code\n(Not implemented yet!).</li>\n<li>Especially make it work with embedded systems, so that\n<ul>\n<li>C code can be run on <em>real hardware</em> while python tests run on PC.\n(Mainly useful for integration tests)\nThis is not implemented yet!</li>\n<li>C code can be run on PC instead of embedded environment.\n(Mainly useful for unittests)</li>\n</ul>\n</li>\n</ul>\n<p>Explicitly Non-Goals Are:</p>\n<ul>\n<li>Supporting C++ is not planned</li>\n<li>Performance has a very low priority. This does not mean that it is\nslow. But if speed conflicts with one of the goals of this project,\nthere will be no compromises in favour of speed.</li>\n<li>Being self-contained is not planned. A C-compiler is required\nto be installed. Furthermore currently LLVM has to be installed\nat it is used for parsing the file.</li>\n<li>Python &lt; 3.6 will never be supported</li>\n</ul>\n<h2>Sample</h2>\n<p>This piece of C-code contains a macros, a struct a function\nimplementation and a function that is relying on\n(which should be mocked):</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">\"underlying_module.h\"</span><span class=\"cp\"></span>\n\n<span class=\"k\">struct</span> <span class=\"n\">ops_t</span>\n<span class=\"p\">{</span>\n    <span class=\"kt\">int</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">;</span>\n<span class=\"p\">}</span> <span class=\"p\">;</span>\n\n<span class=\"cp\">#define MACRO_2   (MACRO_1 + 1)</span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">func</span><span class=\"p\">(</span><span class=\"k\">struct</span> <span class=\"n\">ops_t</span> <span class=\"o\">*</span> <span class=\"n\">p</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">return</span> <span class=\"n\">underlying_func</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">p</span><span class=\"o\">-&gt;</span><span class=\"n\">b</span> <span class=\"o\">+</span> <span class=\"n\">MACRO_1</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can access it from python through <em>headlock</em> like:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">headlock.testsetup</span> <span class=\"kn\">import</span> <span class=\"n\">TestSetup</span><span class=\"p\">,</span> <span class=\"n\">CModule</span>\n\n<span class=\"nd\">@CModule</span><span class=\"p\">(</span><span class=\"s1\">'dummy.c'</span><span class=\"p\">,</span> <span class=\"n\">MACRO_1</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">TSSample</span><span class=\"p\">(</span><span class=\"n\">TestSetup</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">underlying_func_mock</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">param</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">+</span> <span class=\"mi\">4000</span>\n\n<span class=\"k\">with</span> <span class=\"n\">TSSample</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">ts</span><span class=\"p\">:</span>\n    <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">ops_t</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">MACRO_2</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">ptr</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"mi\">4021</span>\n</pre>\n<p>This demonstrates how:</p>\n<ul>\n<li>You can handle different binaries of the same C-source per .py file\n(as each one is a TestSetup derived class instead of a module)</li>\n<li>Every binary can be compiled with other parameters\n(PY_MACRO can be set differently per testsetup)</li>\n<li>structures/unions/enums/typedefs can be accessed from Python without\nextra declarations (<code>struct ops_t</code> in this case).</li>\n<li>You can access C-functions from Python without extra declarations\n(<code>func</code> in this case)</li>\n<li>You can access C-macros from Python without extra declarations\n(<code>C_MACRO</code> in this case)</li>\n<li>You can call python-methods from C (=mocking C functions that are\nnot part of the Module Under Test;\n<code>underlying_func</code> in this case). It is even possible to\ndynamicially replace mocks (i.e. by unittest.mock.Mock())</li>\n</ul>\n<h2>Status</h2>\n<p>Currently this is alpha.</p>\n<p>For a list of planned but not yet implemented features please refer to\n<a href=\"https://headlock.readthedocs.io/en/latest/development-status.html\" rel=\"nofollow\">Development Status</a></p>\n\n          </div>"}, "last_serial": 6380612, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "0c231ed97af4993dbd08cbd5a6e4c96f", "sha256": "f3027ae9e7b0d5174d54a3ade3d12b0d3706a518093402c2b99fac197193abe6"}, "downloads": -1, "filename": "headlock-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0c231ed97af4993dbd08cbd5a6e4c96f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45147, "upload_time": "2018-07-09T01:24:18", "upload_time_iso_8601": "2018-07-09T01:24:18.041337Z", "url": "https://files.pythonhosted.org/packages/c2/b9/06a51ac85e2919226d5bd409151730821c69ade044c3e805f98075f35e7f/headlock-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "14695d933c9dbc584764625bbc0ac882", "sha256": "a9a6d33b8fab5325e1c29dfd57064291a167d60c66fa6e85bfa1d8518d33f451"}, "downloads": -1, "filename": "headlock-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "14695d933c9dbc584764625bbc0ac882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77090, "upload_time": "2019-09-28T00:08:22", "upload_time_iso_8601": "2019-09-28T00:08:22.396558Z", "url": "https://files.pythonhosted.org/packages/7f/0e/a070eb6878d31228bcbeb2bb324efaac8c81a3d9a3c2da7d3f20ce82c58f/headlock-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b65954af244ef9b7f0afad083237258a", "sha256": "56959c8cf724f936bee0b434f0b45c8a9be21fb019fb0f7494e8782ebe545b80"}, "downloads": -1, "filename": "headlock-0.4.0.tar.gz", "has_sig": false, "md5_digest": "b65954af244ef9b7f0afad083237258a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45662, "upload_time": "2018-08-01T23:55:24", "upload_time_iso_8601": "2018-08-01T23:55:24.815278Z", "url": "https://files.pythonhosted.org/packages/42/93/5ce9536ac5ac469ca1021c360a6846d4fea836ba44a4a6a6e9cc111fa8cf/headlock-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "0e2a15ea2db60e8e10661c68a1acabf3", "sha256": "44dd06d5e73e3120b502f48f5bf9c4254c03068bd66deec2271f9cf47e0e4e74"}, "downloads": -1, "filename": "headlock-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0e2a15ea2db60e8e10661c68a1acabf3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 77088, "upload_time": "2019-09-28T00:08:27", "upload_time_iso_8601": "2019-09-28T00:08:27.869992Z", "url": "https://files.pythonhosted.org/packages/95/40/b819cdd95c56512575aedf70f165e75a8c707f36b22ffe06be492126063b/headlock-0.4.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d26e385781f472797ee28aa30450e82d", "sha256": "16106faa67ebd8b8c3d31c149e7b2d10833a46c24b679e62fc4f0496ad24e4b5"}, "downloads": -1, "filename": "headlock-0.4.1.tar.gz", "has_sig": false, "md5_digest": "d26e385781f472797ee28aa30450e82d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63091, "upload_time": "2019-09-28T00:09:43", "upload_time_iso_8601": "2019-09-28T00:09:43.148855Z", "url": "https://files.pythonhosted.org/packages/f0/e4/bcb14f9a1a3f300cc3f06add3af2cf89a16155590369f271332aa8d421f5/headlock-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "829aab62cbf8abae1ec00cbdad3066a5", "sha256": "be67d1cbee45fbfd8a60626184b8d69db87024c681e440d4e352791eb670c58a"}, "downloads": -1, "filename": "headlock-0.5.0.tar.gz", "has_sig": false, "md5_digest": "829aab62cbf8abae1ec00cbdad3066a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63627, "upload_time": "2019-12-31T20:25:06", "upload_time_iso_8601": "2019-12-31T20:25:06.284189Z", "url": "https://files.pythonhosted.org/packages/40/6f/b4610c9e08e0e1bb6b164c71176f93cfb5cf8e2afa846eef59cd434f631e/headlock-0.5.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "829aab62cbf8abae1ec00cbdad3066a5", "sha256": "be67d1cbee45fbfd8a60626184b8d69db87024c681e440d4e352791eb670c58a"}, "downloads": -1, "filename": "headlock-0.5.0.tar.gz", "has_sig": false, "md5_digest": "829aab62cbf8abae1ec00cbdad3066a5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 63627, "upload_time": "2019-12-31T20:25:06", "upload_time_iso_8601": "2019-12-31T20:25:06.284189Z", "url": "https://files.pythonhosted.org/packages/40/6f/b4610c9e08e0e1bb6b164c71176f93cfb5cf8e2afa846eef59cd434f631e/headlock-0.5.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:58 2020"}