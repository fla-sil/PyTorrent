{"info": {"author": "Michael Lange, Thomas Kluyver", "author_email": "klappnase(at)freakmail(dot)de ; takowl(at)gmail(dot)com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: User Interfaces"], "description": "This provides a very simple progress bar for long running tasks.\n\nThe design is somewhat similar to `EasyGUI <http://easygui.sourceforge.net/>`_,\nallowing simple scripts to be GUI-fied without being refactored into callbacks\nand an event loop. It can naturally be used as an addition to the tools in\nEasyGUI. The interface can't be quite as simple, but hopefully it's only a\nlittle more complex.\n\nprogress_meter is based on `this code <http://tkinter.unpythonic.net/wiki/ProgressMeter>`_\nby Michael Lange.\n\nThe high-level interface looks like this::\n\n    from progress_meter import withprogress\n\n    @withprogress(300, color=\"green\")\n    def demo(foo, bar=None):\n        for i in range(300):\n            # Do one (or a few) steps of processing, then...\n            yield i\n    \n    demo()\n\nYou can use exceptions to see if the user cancelled the process before it\ncompleted::\n\n    try:\n        demo()\n    except UserCancelled:\n        print(\"Cancelled\")\n    else:\n        print(\"Completed\")\n\nThere's also a lower-level interface in which you instantiate the window directly::\n\n    from progress_meter import MeterWindow\n\n    def _demostep(meter, value):\n        meter.set(value)\n        if value < 1.0:\n            value = value + 0.005\n            meter.after(50, lambda: _demostep(meter, value))\n        else:\n            meter.set(value, 'Demo successfully finished')\n\n    def demo():\n        root = MeterWindow(className='meter demo')\n        root.meter.set(0.0, 'Starting demo...')\n        root.after(1000, lambda: _demostep(root.meter, 0.0))\n        root.mainloop()\n\nTo use the progress bar alone in a more complete GUI, you can use the ``Meter``\nclass from this module (which subclasses ``tkinter.Frame``).", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/takluyver/progress_meter", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "progress_meter", "package_url": "https://pypi.org/project/progress_meter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/progress_meter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://bitbucket.org/takluyver/progress_meter"}, "release_url": "https://pypi.org/project/progress_meter/1.0/", "requires_dist": null, "requires_python": null, "summary": "A simple progress bar for long running tasks (Tkinter based)", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This provides a very simple progress bar for long running tasks.</p>\n<p>The design is somewhat similar to <a href=\"http://easygui.sourceforge.net/\" rel=\"nofollow\">EasyGUI</a>,\nallowing simple scripts to be GUI-fied without being refactored into callbacks\nand an event loop. It can naturally be used as an addition to the tools in\nEasyGUI. The interface can\u2019t be quite as simple, but hopefully it\u2019s only a\nlittle more complex.</p>\n<p>progress_meter is based on <a href=\"http://tkinter.unpythonic.net/wiki/ProgressMeter\" rel=\"nofollow\">this code</a>\nby Michael Lange.</p>\n<p>The high-level interface looks like this:</p>\n<pre>from progress_meter import withprogress\n\n@withprogress(300, color=\"green\")\ndef demo(foo, bar=None):\n    for i in range(300):\n        # Do one (or a few) steps of processing, then...\n        yield i\n\ndemo()\n</pre>\n<p>You can use exceptions to see if the user cancelled the process before it\ncompleted:</p>\n<pre>try:\n    demo()\nexcept UserCancelled:\n    print(\"Cancelled\")\nelse:\n    print(\"Completed\")\n</pre>\n<p>There\u2019s also a lower-level interface in which you instantiate the window directly:</p>\n<pre>from progress_meter import MeterWindow\n\ndef _demostep(meter, value):\n    meter.set(value)\n    if value &lt; 1.0:\n        value = value + 0.005\n        meter.after(50, lambda: _demostep(meter, value))\n    else:\n        meter.set(value, 'Demo successfully finished')\n\ndef demo():\n    root = MeterWindow(className='meter demo')\n    root.meter.set(0.0, 'Starting demo...')\n    root.after(1000, lambda: _demostep(root.meter, 0.0))\n    root.mainloop()\n</pre>\n<p>To use the progress bar alone in a more complete GUI, you can use the <tt>Meter</tt>\nclass from this module (which subclasses <tt>tkinter.Frame</tt>).</p>\n\n          </div>"}, "last_serial": 796722, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "b72234180ddc5f3c7ec7b65408ae422f", "sha256": "eb9df411827950d35471f3aa1551f575ed5360213ec2c9a121d9ee2fe92eafdd"}, "downloads": -1, "filename": "progress_meter-1.0.tar.gz", "has_sig": false, "md5_digest": "b72234180ddc5f3c7ec7b65408ae422f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4307, "upload_time": "2012-01-17T23:33:38", "upload_time_iso_8601": "2012-01-17T23:33:38.467899Z", "url": "https://files.pythonhosted.org/packages/90/fd/15cc7539f23791670339045cba90cd5915ebb0ad967d388e26abdf16000f/progress_meter-1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "db37e965172cf1c4b6b144bca9c79d18", "sha256": "8fed35da60b8654b66ebbe2aa3f9451ee42c888566bed40d713406276a2168b3"}, "downloads": -1, "filename": "progress_meter-1.0.zip", "has_sig": false, "md5_digest": "db37e965172cf1c4b6b144bca9c79d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2012-01-17T23:33:38", "upload_time_iso_8601": "2012-01-17T23:33:38.980380Z", "url": "https://files.pythonhosted.org/packages/dc/e4/0e9349f21c30b18cda25dc5286ea974b93e4271c625d08579a7776395667/progress_meter-1.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b72234180ddc5f3c7ec7b65408ae422f", "sha256": "eb9df411827950d35471f3aa1551f575ed5360213ec2c9a121d9ee2fe92eafdd"}, "downloads": -1, "filename": "progress_meter-1.0.tar.gz", "has_sig": false, "md5_digest": "b72234180ddc5f3c7ec7b65408ae422f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4307, "upload_time": "2012-01-17T23:33:38", "upload_time_iso_8601": "2012-01-17T23:33:38.467899Z", "url": "https://files.pythonhosted.org/packages/90/fd/15cc7539f23791670339045cba90cd5915ebb0ad967d388e26abdf16000f/progress_meter-1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "db37e965172cf1c4b6b144bca9c79d18", "sha256": "8fed35da60b8654b66ebbe2aa3f9451ee42c888566bed40d713406276a2168b3"}, "downloads": -1, "filename": "progress_meter-1.0.zip", "has_sig": false, "md5_digest": "db37e965172cf1c4b6b144bca9c79d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5086, "upload_time": "2012-01-17T23:33:38", "upload_time_iso_8601": "2012-01-17T23:33:38.980380Z", "url": "https://files.pythonhosted.org/packages/dc/e4/0e9349f21c30b18cda25dc5286ea974b93e4271c625d08579a7776395667/progress_meter-1.0.zip", "yanked": false}], "timestamp": "Fri May  8 03:17:23 2020"}