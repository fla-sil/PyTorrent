{"info": {"author": "ProGamerGov", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: End Users/Desktop", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Artistic Software"], "description": "# Neural-Tools\nTools made for usage alongside artistic style transfer projects based on the [Controlling Perceptual Factors in Neural Style Transfer](https://arxiv.org/abs/1611.07865) research paper by Leon A. Gatys, Alexander S. Ecker, Matthias Bethge, Aaron Hertzmann, and Eli Shechtman.\n\n**In-depth information about how to perform Scale Control and Color Control, including the Neural-Style parameters used in the examples, can be found on the [wiki](https://github.com/ProGamerGov/Neural-Tools/wiki).** The Color Control feature is broken down into two different features known as Luminance-Only Style Transfer, and Color Matching. The Scale Control feature focuses on separating style image content/shapes, and style image textures. \n\n# Linear Color Transfer\n\nThe `match_color` function's code comes from the very talented Leon Gatys' code [here](https://github.com/leongatys/NeuralImageSynthesis/blob/master/ExampleNotebooks/ScaleControl.ipynb). This script was developed to help enable Scale Control in [Neural-Style](https://github.com/jcjohnson/neural-style), but it can be used for anything else that requires linear color transfer. Supported image formats include: `jpg`, `jpeg`, `png`, `tiff`, etc...\n\nScale Control examples made with [Neural-Style](https://github.com/jcjohnson/neural-style), can be viewed [here](https://github.com/ProGamerGov/Neural-Tools/wiki/Scale-Control-Examples).\n\n### Installation: \n\n```\npip install neural-tools\n```\n\nOr: \n\n```\npip3 install neural-tools\n```\n\n\n### Usage: \n\nBasic usage: \n\n```\nlinear-color-transfer --target_image target.png --source_image source.png\n```\n\nAdvanced usage: \n\n```\nlinear-color-transfer --target_image target.png --source_image source.png --output_image output.png --mode pca --eps 1e-5\n```\n\n### Parameters: \n\n* `--target_image`: The image you are transfering color to. Ex: `target.png`\n\n* `--source_image`: The image you are transfering color from. Ex: `source.png`\n\n* `--output_image`: The name of your output image. Ex: `output.png`\n\n* `--mode`: The color transfer mode. Options are `pca`, `chol`, or `sym`.\n\n* `--eps`: Your epsilon value in scientific notation or normal notation. Ex: `1e-5` or `0.00001`.\n\n### Examples: \n\n**Source Image:** \n\n![](https://i.imgur.com/eoX7f3Il.jpg)\n\n**Target Image:** \n\n![](https://i.imgur.com/7FPCSril.jpg)\n\n**Output Image:** \n\n![](https://i.imgur.com/STZ0Mspl.png)\n\n**[See here for how to use this script for Scale Control](https://github.com/ProGamerGov/Neural-Tools/wiki/Scale-Control-Examples)**.\n\n![](https://i.imgur.com/fsqGmJfl.png)\n\n\n### Linear Color Transfer is also used for Color Matching Style Transfer:\n\n![](https://i.imgur.com/6xf5c9yl.jpg)\n\n\nSee [here on the wiki](https://github.com/ProGamerGov/Neural-Tools/wiki/Color-Matching), for more details on Color Matching Style Transfer.\n\n---\n\n---\n\n# Luminance Transfer\n\nThis script was developed to help enable colour control in [Neural-Style](https://github.com/jcjohnson/neural-style), also known as \"Luminance Transfer\". This script uses code from Leon Gatys' code [here](https://github.com/leongatys/NeuralImageSynthesis/blob/master/ExampleNotebooks/ColourControl.ipynb). Supported image formats include: `jpg`, `jpeg`, `png`, `tiff`, etc...\n\nLuminance transfer/Color Control examples made with [Neural-Style](https://github.com/jcjohnson/neural-style), can be found [here](https://github.com/ProGamerGov/Neural-Tools/wiki/Color-Control-Examples).\n\n### How It Works: \n\nCurrently, all available models are trained on images with the RGB/BGR color space. An image's luminance can represented in the form of gray scale color space image, which can be converted to RGB format for Neural-Style. After the gray scale images are run through Neural-Style, re-applying the color to your output is done with the use of the LUV color space.\n\nBasically due to pre-trained model limitations, gray scale images are used to transfer luminance, and a color space supporting luminance is used to transfer the colors back to the finished output. \n\n### Installation: \n\n```\npip install neural-tools\n```\n\nOr: \n\n```\npip3 install neural-tools\n```\n\n\n### Usage:\n\nBasic usage: \n\n```\nlum-transfer --content_image content.png --style_image style.png\n```\n\nAdvanced usage: \n\n```\nlum-transfer --cp_mode lum --content_image content.png --style_image style.png --org_content content.png --output_style_image output_style.png --output_content_image output_content.png\n```\n\n### Parameters: \n\nThe required input images and the output images, are dependent on the `--cp_mode` option that you choose: \n\n* `--cp_mode`: The script's mode. Options are `lum`, `lum2`, `match`, `match_style`.\n\n\n**Mode: `lum`**\n\n\n* `--content_image`: Your content image. Ex: `content.png`\n\n* `--style_image`: Your style image. Ex: `style.png`\n\n* `--org_content`: Your original unmodified content image. Ex: `original_content.png`\n\n* `--output_content_image`: The name of your output content image. Ex: `content_output.png`\n\n* `--output_style_image`: The name of your output style image. Ex: `style_output.png`\n\n**Mode: `match`**\n\n* `--content_image`: Your content image. Ex: `content.png`\n\n* `--style_image`: Your style image. Ex: `style.png`\n\n* `--output_style_image`: The name of your output style image. Ex: `style_output.png`\n\n**Mode: `match_style`**\n\n* `--content_image`: Your content image. Ex: `content.png`\n\n* `--style_image`: Your style image. Ex: `style.png`\n\n* `--output_content_image`: The name of your output content image. Ex: `content_output.png`\n\n**Mode: `lum2`**\n\n* `--output_lum2`: The name of your output image from Neural-Style. Ex: `out.png`\n\n* `--org_content`: Your original unmodified content image. Ex: `original_content.png`\n\n* `--output_image`: The name of your output image. Ex: `output.png`\n\n### Examples:\n\n**The style image is adjusted to match the content image:**\n\n![](https://i.imgur.com/Q7phTmel.png)\n\n![](https://i.imgur.com/dRf3yZHl.png)\n\n**After Neural-Style:**\n\n![](https://i.imgur.com/hpW8zufl.png)\n\n**Final ouput image:** \n\n![](https://i.imgur.com/o5HDDtDl.png)\n\n---\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ProGamerGov/Neural-Tools", "keywords": "histogram matching histogram-matching luminance transfer luminance-transfer linear-color-transfer linear color colour", "license": "", "maintainer": "", "maintainer_email": "", "name": "neural-tools", "package_url": "https://pypi.org/project/neural-tools/", "platform": "", "project_url": "https://pypi.org/project/neural-tools/", "project_urls": {"Homepage": "https://github.com/ProGamerGov/Neural-Tools"}, "release_url": "https://pypi.org/project/neural-tools/0.0.4/", "requires_dist": ["numpy", "scipy", "imageio", "pillow", "scikit-image"], "requires_python": "", "summary": "Luminance and histogram matching tools", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Neural-Tools</h1>\n<p>Tools made for usage alongside artistic style transfer projects based on the <a href=\"https://arxiv.org/abs/1611.07865\" rel=\"nofollow\">Controlling Perceptual Factors in Neural Style Transfer</a> research paper by Leon A. Gatys, Alexander S. Ecker, Matthias Bethge, Aaron Hertzmann, and Eli Shechtman.</p>\n<p><strong>In-depth information about how to perform Scale Control and Color Control, including the Neural-Style parameters used in the examples, can be found on the <a href=\"https://github.com/ProGamerGov/Neural-Tools/wiki\" rel=\"nofollow\">wiki</a>.</strong> The Color Control feature is broken down into two different features known as Luminance-Only Style Transfer, and Color Matching. The Scale Control feature focuses on separating style image content/shapes, and style image textures.</p>\n<h1>Linear Color Transfer</h1>\n<p>The <code>match_color</code> function's code comes from the very talented Leon Gatys' code <a href=\"https://github.com/leongatys/NeuralImageSynthesis/blob/master/ExampleNotebooks/ScaleControl.ipynb\" rel=\"nofollow\">here</a>. This script was developed to help enable Scale Control in <a href=\"https://github.com/jcjohnson/neural-style\" rel=\"nofollow\">Neural-Style</a>, but it can be used for anything else that requires linear color transfer. Supported image formats include: <code>jpg</code>, <code>jpeg</code>, <code>png</code>, <code>tiff</code>, etc...</p>\n<p>Scale Control examples made with <a href=\"https://github.com/jcjohnson/neural-style\" rel=\"nofollow\">Neural-Style</a>, can be viewed <a href=\"https://github.com/ProGamerGov/Neural-Tools/wiki/Scale-Control-Examples\" rel=\"nofollow\">here</a>.</p>\n<h3>Installation:</h3>\n<pre><code>pip install neural-tools\n</code></pre>\n<p>Or:</p>\n<pre><code>pip3 install neural-tools\n</code></pre>\n<h3>Usage:</h3>\n<p>Basic usage:</p>\n<pre><code>linear-color-transfer --target_image target.png --source_image source.png\n</code></pre>\n<p>Advanced usage:</p>\n<pre><code>linear-color-transfer --target_image target.png --source_image source.png --output_image output.png --mode pca --eps 1e-5\n</code></pre>\n<h3>Parameters:</h3>\n<ul>\n<li>\n<p><code>--target_image</code>: The image you are transfering color to. Ex: <code>target.png</code></p>\n</li>\n<li>\n<p><code>--source_image</code>: The image you are transfering color from. Ex: <code>source.png</code></p>\n</li>\n<li>\n<p><code>--output_image</code>: The name of your output image. Ex: <code>output.png</code></p>\n</li>\n<li>\n<p><code>--mode</code>: The color transfer mode. Options are <code>pca</code>, <code>chol</code>, or <code>sym</code>.</p>\n</li>\n<li>\n<p><code>--eps</code>: Your epsilon value in scientific notation or normal notation. Ex: <code>1e-5</code> or <code>0.00001</code>.</p>\n</li>\n</ul>\n<h3>Examples:</h3>\n<p><strong>Source Image:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8084fc7b69ffa70fca46c0764e83977458cd8cd4/68747470733a2f2f692e696d6775722e636f6d2f656f58376633496c2e6a7067\"></p>\n<p><strong>Target Image:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/54eda35458993febed144b08acf2d476890c95c5/68747470733a2f2f692e696d6775722e636f6d2f374650435372696c2e6a7067\"></p>\n<p><strong>Output Image:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f86d49b162d7fb53933356d8e9ddb8476de14cad/68747470733a2f2f692e696d6775722e636f6d2f53545a304d73706c2e706e67\"></p>\n<p><strong><a href=\"https://github.com/ProGamerGov/Neural-Tools/wiki/Scale-Control-Examples\" rel=\"nofollow\">See here for how to use this script for Scale Control</a></strong>.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b7e383389eaefe72e663b4959ee57b07cc886dc6/68747470733a2f2f692e696d6775722e636f6d2f667371476d4a666c2e706e67\"></p>\n<h3>Linear Color Transfer is also used for Color Matching Style Transfer:</h3>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e8b86408d0e0c7cdb9e981b3228e997ff3698bcb/68747470733a2f2f692e696d6775722e636f6d2f367866356339796c2e6a7067\"></p>\n<p>See <a href=\"https://github.com/ProGamerGov/Neural-Tools/wiki/Color-Matching\" rel=\"nofollow\">here on the wiki</a>, for more details on Color Matching Style Transfer.</p>\n<hr>\n<hr>\n<h1>Luminance Transfer</h1>\n<p>This script was developed to help enable colour control in <a href=\"https://github.com/jcjohnson/neural-style\" rel=\"nofollow\">Neural-Style</a>, also known as \"Luminance Transfer\". This script uses code from Leon Gatys' code <a href=\"https://github.com/leongatys/NeuralImageSynthesis/blob/master/ExampleNotebooks/ColourControl.ipynb\" rel=\"nofollow\">here</a>. Supported image formats include: <code>jpg</code>, <code>jpeg</code>, <code>png</code>, <code>tiff</code>, etc...</p>\n<p>Luminance transfer/Color Control examples made with <a href=\"https://github.com/jcjohnson/neural-style\" rel=\"nofollow\">Neural-Style</a>, can be found <a href=\"https://github.com/ProGamerGov/Neural-Tools/wiki/Color-Control-Examples\" rel=\"nofollow\">here</a>.</p>\n<h3>How It Works:</h3>\n<p>Currently, all available models are trained on images with the RGB/BGR color space. An image's luminance can represented in the form of gray scale color space image, which can be converted to RGB format for Neural-Style. After the gray scale images are run through Neural-Style, re-applying the color to your output is done with the use of the LUV color space.</p>\n<p>Basically due to pre-trained model limitations, gray scale images are used to transfer luminance, and a color space supporting luminance is used to transfer the colors back to the finished output.</p>\n<h3>Installation:</h3>\n<pre><code>pip install neural-tools\n</code></pre>\n<p>Or:</p>\n<pre><code>pip3 install neural-tools\n</code></pre>\n<h3>Usage:</h3>\n<p>Basic usage:</p>\n<pre><code>lum-transfer --content_image content.png --style_image style.png\n</code></pre>\n<p>Advanced usage:</p>\n<pre><code>lum-transfer --cp_mode lum --content_image content.png --style_image style.png --org_content content.png --output_style_image output_style.png --output_content_image output_content.png\n</code></pre>\n<h3>Parameters:</h3>\n<p>The required input images and the output images, are dependent on the <code>--cp_mode</code> option that you choose:</p>\n<ul>\n<li><code>--cp_mode</code>: The script's mode. Options are <code>lum</code>, <code>lum2</code>, <code>match</code>, <code>match_style</code>.</li>\n</ul>\n<p><strong>Mode: <code>lum</code></strong></p>\n<ul>\n<li>\n<p><code>--content_image</code>: Your content image. Ex: <code>content.png</code></p>\n</li>\n<li>\n<p><code>--style_image</code>: Your style image. Ex: <code>style.png</code></p>\n</li>\n<li>\n<p><code>--org_content</code>: Your original unmodified content image. Ex: <code>original_content.png</code></p>\n</li>\n<li>\n<p><code>--output_content_image</code>: The name of your output content image. Ex: <code>content_output.png</code></p>\n</li>\n<li>\n<p><code>--output_style_image</code>: The name of your output style image. Ex: <code>style_output.png</code></p>\n</li>\n</ul>\n<p><strong>Mode: <code>match</code></strong></p>\n<ul>\n<li>\n<p><code>--content_image</code>: Your content image. Ex: <code>content.png</code></p>\n</li>\n<li>\n<p><code>--style_image</code>: Your style image. Ex: <code>style.png</code></p>\n</li>\n<li>\n<p><code>--output_style_image</code>: The name of your output style image. Ex: <code>style_output.png</code></p>\n</li>\n</ul>\n<p><strong>Mode: <code>match_style</code></strong></p>\n<ul>\n<li>\n<p><code>--content_image</code>: Your content image. Ex: <code>content.png</code></p>\n</li>\n<li>\n<p><code>--style_image</code>: Your style image. Ex: <code>style.png</code></p>\n</li>\n<li>\n<p><code>--output_content_image</code>: The name of your output content image. Ex: <code>content_output.png</code></p>\n</li>\n</ul>\n<p><strong>Mode: <code>lum2</code></strong></p>\n<ul>\n<li>\n<p><code>--output_lum2</code>: The name of your output image from Neural-Style. Ex: <code>out.png</code></p>\n</li>\n<li>\n<p><code>--org_content</code>: Your original unmodified content image. Ex: <code>original_content.png</code></p>\n</li>\n<li>\n<p><code>--output_image</code>: The name of your output image. Ex: <code>output.png</code></p>\n</li>\n</ul>\n<h3>Examples:</h3>\n<p><strong>The style image is adjusted to match the content image:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0f046e0aee08e9924ae82e6097831d07704a607/68747470733a2f2f692e696d6775722e636f6d2f51377068546d656c2e706e67\"></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3be64488d1db05162779d574c14d2c6c747db1ad/68747470733a2f2f692e696d6775722e636f6d2f64526633795a486c2e706e67\"></p>\n<p><strong>After Neural-Style:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cb809359a9434cd40b53a326c2aca1aad37ba778/68747470733a2f2f692e696d6775722e636f6d2f687057387a75666c2e706e67\"></p>\n<p><strong>Final ouput image:</strong></p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/987671c70939855378a6134ca70c0bf58ae8ee46/68747470733a2f2f692e696d6775722e636f6d2f6f3548444474446c2e706e67\"></p>\n<hr>\n\n          </div>"}, "last_serial": 6152399, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b01271c12e169246b1b30645d8bb672b", "sha256": "f2d86ebef84dda0ca3870364fe4bc4dc77b5cd22d0a0b06fc5441be6df60c653"}, "downloads": -1, "filename": "neural_tools-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "b01271c12e169246b1b30645d8bb672b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9718, "upload_time": "2019-11-17T22:46:50", "upload_time_iso_8601": "2019-11-17T22:46:50.716668Z", "url": "https://files.pythonhosted.org/packages/85/9a/9ba07c32c5377711bd0ba2808ba6ff102d7b7dc5266546507a351b1d10b6/neural_tools-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bdade38355653e3dadd5f2863acfed1e", "sha256": "69060a78e825595152260731a7d2de1d43084efd5d4ca251fa7bbf1c0eb06da2"}, "downloads": -1, "filename": "neural_tools-0.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "bdade38355653e3dadd5f2863acfed1e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6900, "upload_time": "2019-11-17T22:46:52", "upload_time_iso_8601": "2019-11-17T22:46:52.363134Z", "url": "https://files.pythonhosted.org/packages/0e/b8/f393bf427b531298eba4e9f85f0023dd22048980d6f866b1cd4103b17c3b/neural_tools-0.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50fc347fedec98cda364d6384a42bbca", "sha256": "bd2de9786c18ca7ccf6151bed884f697eaf21890527893809e0d068892f0ee6c"}, "downloads": -1, "filename": "neural_tools-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "50fc347fedec98cda364d6384a42bbca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6894, "upload_time": "2019-11-17T22:46:15", "upload_time_iso_8601": "2019-11-17T22:46:15.194679Z", "url": "https://files.pythonhosted.org/packages/56/69/c3a75a36b97054b8e308ba7a19f9e1ec60a5f93f96c6990a5cffc2030661/neural_tools-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74bb6c4f3a9717be22abf6ccea57cae1", "sha256": "9a0430ab09ef18dc9eceea0e6d0d0d3ddb821e2478c32bb75260d9991912235e"}, "downloads": -1, "filename": "neural-tools-0.0.1.tar.gz", "has_sig": false, "md5_digest": "74bb6c4f3a9717be22abf6ccea57cae1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5484, "upload_time": "2019-11-17T22:46:54", "upload_time_iso_8601": "2019-11-17T22:46:54.541025Z", "url": "https://files.pythonhosted.org/packages/c7/92/416c3a39135d5663486bd7e29771573140b881a060d602095d48b0b690ff/neural-tools-0.0.1.tar.gz", "yanked": false}], "0.0.1.dev1": [{"comment_text": "", "digests": {"md5": "a0fb07b700cad01608e8245553cfd96e", "sha256": "8374bc9bcd14b3105ad13cfe04540d7c23603fd5ab54356f630f8fc8824e20b4"}, "downloads": -1, "filename": "neural_tools-0.0.1.dev1-py3-none-any.whl", "has_sig": false, "md5_digest": "a0fb07b700cad01608e8245553cfd96e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6575, "upload_time": "2019-08-01T16:57:43", "upload_time_iso_8601": "2019-08-01T16:57:43.061352Z", "url": "https://files.pythonhosted.org/packages/e0/8e/6005d86c49e8acaa304773ecdc58b637881726b39d6a68ea52f9dc9c2927/neural_tools-0.0.1.dev1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c005f9676a9905ea3bb3eb684a8e0144", "sha256": "50830454e4d0e70119a63a029569159cced0e74b93a344bba6625e7c547265ff"}, "downloads": -1, "filename": "neural-tools-0.0.1.dev1.tar.gz", "has_sig": false, "md5_digest": "c005f9676a9905ea3bb3eb684a8e0144", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5350, "upload_time": "2019-08-01T16:57:45", "upload_time_iso_8601": "2019-08-01T16:57:45.595002Z", "url": "https://files.pythonhosted.org/packages/33/6f/7c4c22dd56a06de12e7ebcb2224d4b5815c8d49f9d4c1de203d6bf17cd60/neural-tools-0.0.1.dev1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "446ddf74d93ca12d72afb067f058827a", "sha256": "36c104870012ca16eea72dc760e39c11a7c8f433ca9cebb7745a59ebbfd5f5dc"}, "downloads": -1, "filename": "neural_tools-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "446ddf74d93ca12d72afb067f058827a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9715, "upload_time": "2019-11-17T23:12:04", "upload_time_iso_8601": "2019-11-17T23:12:04.885773Z", "url": "https://files.pythonhosted.org/packages/ca/14/317b51dd7eb441c9570752547933c26fdceac8092d0f4beb63d2956e2683/neural_tools-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "54936390a91c8c575571ef06e2d6a37d", "sha256": "6a90f248afdb1a282e60cb3dfe3122077b95e7f9d88a0ee4546c97349e036416"}, "downloads": -1, "filename": "neural_tools-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "54936390a91c8c575571ef06e2d6a37d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6891, "upload_time": "2019-11-17T23:12:06", "upload_time_iso_8601": "2019-11-17T23:12:06.595368Z", "url": "https://files.pythonhosted.org/packages/59/75/001f38c58286c267d03b6dd20b424a643b8fc25726c017bb86da1b69be0d/neural_tools-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26b19eaa6fd092957ed76121dd9b1757", "sha256": "ea8b5ca57238a09bc614bb584ec7cb93696288b4aa4e419b13750d31909e28d6"}, "downloads": -1, "filename": "neural_tools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "26b19eaa6fd092957ed76121dd9b1757", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6883, "upload_time": "2019-11-17T23:10:57", "upload_time_iso_8601": "2019-11-17T23:10:57.614401Z", "url": "https://files.pythonhosted.org/packages/d9/bb/a39a4b556d2eccaf4cff7eca0fe4e14948f1f82dd7fcf0e81acbc7660d6e/neural_tools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "431530aaa7891e71242ea6bff8151b28", "sha256": "e24df507feaa9f691436bdb79d33d76c1b49df46278fd3a5b4d5b3722fe677fe"}, "downloads": -1, "filename": "neural-tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "431530aaa7891e71242ea6bff8151b28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5485, "upload_time": "2019-11-17T23:12:08", "upload_time_iso_8601": "2019-11-17T23:12:08.107394Z", "url": "https://files.pythonhosted.org/packages/ed/b7/282726148af9a89fa49f67886aa97a07112d4191004ba05af3e3d25d8f11/neural-tools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f73bb43a7a3857c091a2a5f31989aa04", "sha256": "5c746f2fff7f47c6128b480d725d1f6a92140d2bb309e486c31e2a289d4c0bfd"}, "downloads": -1, "filename": "neural_tools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f73bb43a7a3857c091a2a5f31989aa04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6888, "upload_time": "2019-11-18T00:12:27", "upload_time_iso_8601": "2019-11-18T00:12:27.361338Z", "url": "https://files.pythonhosted.org/packages/04/fa/dcc4119e504e48be997dcae739155b6b81fa60e355db7a8d90b0841175e8/neural_tools-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "1afe53ee994a0005e6fcb2498dc232d3", "sha256": "c25c78fad351eb7d94a36dea19c28ff75544510e54ae38b028d4d793e450c702"}, "downloads": -1, "filename": "neural_tools-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "1afe53ee994a0005e6fcb2498dc232d3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9731, "upload_time": "2019-11-18T00:22:16", "upload_time_iso_8601": "2019-11-18T00:22:16.655051Z", "url": "https://files.pythonhosted.org/packages/8e/86/01bf993b4657126a038c04423205d8d99a391efe20a90e1058d746201c41/neural_tools-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0b160d281ffbac33e19682199d49463", "sha256": "ca4e0913adb44b5e6ffbce7f89f64516ea2cfea058fbbb655e838934695605cd"}, "downloads": -1, "filename": "neural_tools-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0b160d281ffbac33e19682199d49463", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6897, "upload_time": "2019-11-18T00:22:18", "upload_time_iso_8601": "2019-11-18T00:22:18.576515Z", "url": "https://files.pythonhosted.org/packages/a9/06/7f8e5db3ce99daa5a897f60bde9f5a5339598fcf8185b65d65c6cfd1fe28/neural_tools-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad1c54c0c6c625c2c7f9ba40aae522c", "sha256": "b6fe0f57d70e8173a3a8b374c31a6154f260e0a7e30342bb36a2f6a0586259ca"}, "downloads": -1, "filename": "neural_tools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bad1c54c0c6c625c2c7f9ba40aae522c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6891, "upload_time": "2019-11-18T00:20:54", "upload_time_iso_8601": "2019-11-18T00:20:54.232660Z", "url": "https://files.pythonhosted.org/packages/9e/be/c35da08def4e2aedbbb29dbc52dc9bcf443151f3735289359681daccb236/neural_tools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fbce011ade2ce8b44870df33f8a5200", "sha256": "97ae882a33837ba43a2e536d06f4af2ba28c9fa261992c897ae27c960960fa79"}, "downloads": -1, "filename": "neural-tools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4fbce011ade2ce8b44870df33f8a5200", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5482, "upload_time": "2019-11-18T00:22:20", "upload_time_iso_8601": "2019-11-18T00:22:20.676917Z", "url": "https://files.pythonhosted.org/packages/04/65/b19bb7647f57b30fb9abdc7172c38e428ff8fd7ad2db074fdc4c6c81f692/neural-tools-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1afe53ee994a0005e6fcb2498dc232d3", "sha256": "c25c78fad351eb7d94a36dea19c28ff75544510e54ae38b028d4d793e450c702"}, "downloads": -1, "filename": "neural_tools-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "1afe53ee994a0005e6fcb2498dc232d3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 9731, "upload_time": "2019-11-18T00:22:16", "upload_time_iso_8601": "2019-11-18T00:22:16.655051Z", "url": "https://files.pythonhosted.org/packages/8e/86/01bf993b4657126a038c04423205d8d99a391efe20a90e1058d746201c41/neural_tools-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0b160d281ffbac33e19682199d49463", "sha256": "ca4e0913adb44b5e6ffbce7f89f64516ea2cfea058fbbb655e838934695605cd"}, "downloads": -1, "filename": "neural_tools-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a0b160d281ffbac33e19682199d49463", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6897, "upload_time": "2019-11-18T00:22:18", "upload_time_iso_8601": "2019-11-18T00:22:18.576515Z", "url": "https://files.pythonhosted.org/packages/a9/06/7f8e5db3ce99daa5a897f60bde9f5a5339598fcf8185b65d65c6cfd1fe28/neural_tools-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bad1c54c0c6c625c2c7f9ba40aae522c", "sha256": "b6fe0f57d70e8173a3a8b374c31a6154f260e0a7e30342bb36a2f6a0586259ca"}, "downloads": -1, "filename": "neural_tools-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bad1c54c0c6c625c2c7f9ba40aae522c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6891, "upload_time": "2019-11-18T00:20:54", "upload_time_iso_8601": "2019-11-18T00:20:54.232660Z", "url": "https://files.pythonhosted.org/packages/9e/be/c35da08def4e2aedbbb29dbc52dc9bcf443151f3735289359681daccb236/neural_tools-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4fbce011ade2ce8b44870df33f8a5200", "sha256": "97ae882a33837ba43a2e536d06f4af2ba28c9fa261992c897ae27c960960fa79"}, "downloads": -1, "filename": "neural-tools-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4fbce011ade2ce8b44870df33f8a5200", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5482, "upload_time": "2019-11-18T00:22:20", "upload_time_iso_8601": "2019-11-18T00:22:20.676917Z", "url": "https://files.pythonhosted.org/packages/04/65/b19bb7647f57b30fb9abdc7172c38e428ff8fd7ad2db074fdc4c6c81f692/neural-tools-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:47 2020"}