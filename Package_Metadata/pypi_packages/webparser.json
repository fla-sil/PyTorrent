{"info": {"author": "Mikhail Ananyevskiy (aka soomrack)", "author_email": "soomrack@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Natural Language :: English", "Programming Language :: Python :: 3.4"], "description": "WebParser\n=========\n\n\nDescription\n-----------\nTiny framework for parsing web.\n\n**Crawler.py** module provides base class for webparser, it can\n\n- open webpages with selenium webdriver;\n- run a set of parsers;\n- handle selenium exceptions;\n- log success and log fail.\n\n\nUsage\n-----\n\nImportant\n'''''''''\n\nTo use a remote webdriver don't forget to start selenium server.\n\n.. code-block:: bash\n\n    $ java -jar selenium-server-standalone.jar\n\n\nExample\n'''''''\n\nCreate module contains parsers:\n\n.. code-block:: python\n\n    #-------[ amazon.py ]---------------------------------------------------\n        from webparser.crawler import Crawler\n\n        class AmazonBook(Crawler):\n            def __init__(self, url=None):\n                self.parsers = {self.parse_title, self.parse_cover_url}\n                super().__init__(url)\n\n            def parse_title(self):\n                title = self.webdriver.find_element_by_xpath(\n                    \"//span[@id='productTitle'][1]\"\n                ).get_attribute('innerHTML')\n                self.data['title'] = title\n                if title:\n                    return None\n                return 'Title not found.'\n\n            def parse_cover_url(self):\n                cover_url = self.webdriver.find_element_by_xpath(\n                    \"//img[@id='imgBlkFront'][1]\"\n                ).get_attribute('src')\n                self.data['cover_url'] = cover_url\n                if cover_url:\n                    return None\n                return 'Cover url not found.'\n    #-----------------------------------------------------------------------\n\n\nCreate parsers:\n\n.. code-block:: python\n\n    # Example script 01:\n    #-------[ parser.py ]---------------------------------------------------\n        from webparser.amazon import AmazonBook\n\n        amazon_book = AmazonBook('http://...')  # Load webpage and parse it\n        print(amazon_book.data['title'])        # Print parsed book title\n        print(amazon_book.data['cover_url'])    # Print parsed url title\n    #-----------------------------------------------------------------------\n\n    # Example script 02:\n    #-------[ parser.py ]---------------------------------------------------\n        from webparser.amazon import AmazonBook\n\n        amazon_book = AmazonBook()        # Create object\n        amazon_book.get('http://...')     # Load webpage\n        amazon book.parse_title()         # Parse book title\n        print(amazon_book.data['title'])  # Print parsed book title\n    #-----------------------------------------------------------------------\n\n\nGuideline\n---------\n\nWebdriver\n'''''''''\n\nChange default webdriver for new objects\n\n.. code-block:: python\n\n    Crawler.webdriver = None\n    Crawler.webdriver_default = lambda : Crawler.init_webdriver_chrome_remote(ip, port)\n\nChange default webdriver for new objects of selected class\n\n.. code-block:: python\n\n    AmazonBook.webdriver = None\n    AmazonBook.webdriver_default = lambda : Crawler.init_webdriver_chrome_remote(ip, port)\n\nChange webdriver for selected object\n\n.. code-block:: python\n\n    myobject.webdriver = Crawler.init_webdriver_chrome_remote(ip, port)\n\n\nChild classes\n'''''''''''''\n\nRealization of parsers should be placed in child classes. See the example of child class in the Example section.\n\nChild class should have constructor\n\n.. code-block:: python\n\n    def __init__(self, url=None):\n        self.parsers = {self.parse_title}  # Set of routine parsers\n        super().__init__(url)              # Parent class constructor\n\nChild class should have parsers\n\n.. code-block:: python\n\n    def parse_title(self):          # Recommend to begin name with 'parser_'\n        '''Parses book title.'''    # Docstring is important for logs\n        title = self.webdriver.find_element_by_xpath(\n            \"//span[@id='productTitle'][1]\"\n        ).get_attribute('src')      # Recommend to retrieve data with xpath\n        self.data['title'] = title  # Data should be stored in data[]\n        if title:\n            return None             # If success, return None\n        return 'Title not found.'   # If failed, return error message\n\nRecommend to make separate class for each webpage type,\nand separate module (with several classes) for each website.\nExample: module \"amazon.py\" with classes \"AmazonBook\", \"AmazonCoupons\".\n\n\nLogging\n'''''''\n\nLevel WARNINGS\n\n* logs fail messages.\n\nLevel INFO\n\n* logs exception messages about fails;\n* logs success messages.\n\nSet log level in your script:\n\n.. code-block:: python\n\n    import logging\n    logging.basicConfig(level=logging.INFO)\n\n\nCopyright\n---------\nCopyright (c) 2017 Mikhail Ananyevskiy\n\n\nLicense\n-------\n\nThis programm is free software; you can redistribute it and/or modify\nit under the terms of\n\n**MIT License**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/soomrack/webparser", "keywords": "webparser web parser selenium", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "webparser", "package_url": "https://pypi.org/project/webparser/", "platform": "", "project_url": "https://pypi.org/project/webparser/", "project_urls": {"Homepage": "https://github.com/soomrack/webparser"}, "release_url": "https://pypi.org/project/webparser/1.0/", "requires_dist": null, "requires_python": "", "summary": "Tiny framework for parsing web.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>Tiny framework for parsing web.</p>\n<p><strong>Crawler.py</strong> module provides base class for webparser, it can</p>\n<ul>\n<li>open webpages with selenium webdriver;</li>\n<li>run a set of parsers;</li>\n<li>handle selenium exceptions;</li>\n<li>log success and log fail.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"important\">\n<h3>Important</h3>\n<p>To use a remote webdriver don\u2019t forget to start selenium server.</p>\n<pre>$ java -jar selenium-server-standalone.jar\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>Create module contains parsers:</p>\n<pre><span class=\"c1\">#-------[ amazon.py ]---------------------------------------------------</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">webparser.crawler</span> <span class=\"kn\">import</span> <span class=\"n\">Crawler</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">AmazonBook</span><span class=\"p\">(</span><span class=\"n\">Crawler</span><span class=\"p\">):</span>\n        <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parsers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_title</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_cover_url</span><span class=\"p\">}</span>\n            <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">parse_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_xpath</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"//span[@id='productTitle'][1]\"</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'innerHTML'</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">title</span>\n            <span class=\"k\">if</span> <span class=\"n\">title</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'Title not found.'</span>\n\n        <span class=\"k\">def</span> <span class=\"nf\">parse_cover_url</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n            <span class=\"n\">cover_url</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_xpath</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"//img[@id='imgBlkFront'][1]\"</span>\n            <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'src'</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'cover_url'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">cover_url</span>\n            <span class=\"k\">if</span> <span class=\"n\">cover_url</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"kc\">None</span>\n            <span class=\"k\">return</span> <span class=\"s1\">'Cover url not found.'</span>\n<span class=\"c1\">#-----------------------------------------------------------------------</span>\n</pre>\n<p>Create parsers:</p>\n<pre><span class=\"c1\"># Example script 01:</span>\n<span class=\"c1\">#-------[ parser.py ]---------------------------------------------------</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">webparser.amazon</span> <span class=\"kn\">import</span> <span class=\"n\">AmazonBook</span>\n\n    <span class=\"n\">amazon_book</span> <span class=\"o\">=</span> <span class=\"n\">AmazonBook</span><span class=\"p\">(</span><span class=\"s1\">'http://...'</span><span class=\"p\">)</span>  <span class=\"c1\"># Load webpage and parse it</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">amazon_book</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">])</span>        <span class=\"c1\"># Print parsed book title</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">amazon_book</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'cover_url'</span><span class=\"p\">])</span>    <span class=\"c1\"># Print parsed url title</span>\n<span class=\"c1\">#-----------------------------------------------------------------------</span>\n\n<span class=\"c1\"># Example script 02:</span>\n<span class=\"c1\">#-------[ parser.py ]---------------------------------------------------</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">webparser.amazon</span> <span class=\"kn\">import</span> <span class=\"n\">AmazonBook</span>\n\n    <span class=\"n\">amazon_book</span> <span class=\"o\">=</span> <span class=\"n\">AmazonBook</span><span class=\"p\">()</span>        <span class=\"c1\"># Create object</span>\n    <span class=\"n\">amazon_book</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'http://...'</span><span class=\"p\">)</span>     <span class=\"c1\"># Load webpage</span>\n    <span class=\"n\">amazon</span> <span class=\"n\">book</span><span class=\"o\">.</span><span class=\"n\">parse_title</span><span class=\"p\">()</span>         <span class=\"c1\"># Parse book title</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">amazon_book</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">])</span>  <span class=\"c1\"># Print parsed book title</span>\n<span class=\"c1\">#-----------------------------------------------------------------------</span>\n</pre>\n</div>\n</div>\n<div id=\"guideline\">\n<h2>Guideline</h2>\n<div id=\"webdriver\">\n<h3>Webdriver</h3>\n<p>Change default webdriver for new objects</p>\n<pre><span class=\"n\">Crawler</span><span class=\"o\">.</span><span class=\"n\">webdriver</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">Crawler</span><span class=\"o\">.</span><span class=\"n\">webdriver_default</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"n\">Crawler</span><span class=\"o\">.</span><span class=\"n\">init_webdriver_chrome_remote</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n<p>Change default webdriver for new objects of selected class</p>\n<pre><span class=\"n\">AmazonBook</span><span class=\"o\">.</span><span class=\"n\">webdriver</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"n\">AmazonBook</span><span class=\"o\">.</span><span class=\"n\">webdriver_default</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"p\">:</span> <span class=\"n\">Crawler</span><span class=\"o\">.</span><span class=\"n\">init_webdriver_chrome_remote</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n<p>Change webdriver for selected object</p>\n<pre><span class=\"n\">myobject</span><span class=\"o\">.</span><span class=\"n\">webdriver</span> <span class=\"o\">=</span> <span class=\"n\">Crawler</span><span class=\"o\">.</span><span class=\"n\">init_webdriver_chrome_remote</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"child-classes\">\n<h3>Child classes</h3>\n<p>Realization of parsers should be placed in child classes. See the example of child class in the Example section.</p>\n<p>Child class should have constructor</p>\n<pre><span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parsers</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parse_title</span><span class=\"p\">}</span>  <span class=\"c1\"># Set of routine parsers</span>\n    <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>              <span class=\"c1\"># Parent class constructor</span>\n</pre>\n<p>Child class should have parsers</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">parse_title</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>          <span class=\"c1\"># Recommend to begin name with 'parser_'</span>\n    <span class=\"sd\">'''Parses book title.'''</span>    <span class=\"c1\"># Docstring is important for logs</span>\n    <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">webdriver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_xpath</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"//span[@id='productTitle'][1]\"</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get_attribute</span><span class=\"p\">(</span><span class=\"s1\">'src'</span><span class=\"p\">)</span>      <span class=\"c1\"># Recommend to retrieve data with xpath</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'title'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">title</span>  <span class=\"c1\"># Data should be stored in data[]</span>\n    <span class=\"k\">if</span> <span class=\"n\">title</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>             <span class=\"c1\"># If success, return None</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'Title not found.'</span>   <span class=\"c1\"># If failed, return error message</span>\n</pre>\n<p>Recommend to make separate class for each webpage type,\nand separate module (with several classes) for each website.\nExample: module \u201camazon.py\u201d with classes \u201cAmazonBook\u201d, \u201cAmazonCoupons\u201d.</p>\n</div>\n<div id=\"logging\">\n<h3>Logging</h3>\n<p>Level WARNINGS</p>\n<ul>\n<li>logs fail messages.</li>\n</ul>\n<p>Level INFO</p>\n<ul>\n<li>logs exception messages about fails;</li>\n<li>logs success messages.</li>\n</ul>\n<p>Set log level in your script:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (c) 2017 Mikhail Ananyevskiy</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This programm is free software; you can redistribute it and/or modify\nit under the terms of</p>\n<p><strong>MIT License</strong></p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \u201cSoftware\u201d), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software\nis furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included\nin all copies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS\nOR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\nTHE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\nIN THE SOFTWARE.</p>\n</div>\n\n          </div>"}, "last_serial": 3273105, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "c997a9f41e298652b425c058090dd5b1", "sha256": "3a2c1fad81a548524d7290037a3fa64906c779f47d479404578ac3e528fd8097"}, "downloads": -1, "filename": "webparser-1.0.tar.gz", "has_sig": false, "md5_digest": "c997a9f41e298652b425c058090dd5b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6494, "upload_time": "2017-10-23T19:36:36", "upload_time_iso_8601": "2017-10-23T19:36:36.623564Z", "url": "https://files.pythonhosted.org/packages/fb/c0/fa6c8365b051b9f6914b829c2ec6a7e53cde9359c99ce1a954a280e4dbae/webparser-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c997a9f41e298652b425c058090dd5b1", "sha256": "3a2c1fad81a548524d7290037a3fa64906c779f47d479404578ac3e528fd8097"}, "downloads": -1, "filename": "webparser-1.0.tar.gz", "has_sig": false, "md5_digest": "c997a9f41e298652b425c058090dd5b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6494, "upload_time": "2017-10-23T19:36:36", "upload_time_iso_8601": "2017-10-23T19:36:36.623564Z", "url": "https://files.pythonhosted.org/packages/fb/c0/fa6c8365b051b9f6914b829c2ec6a7e53cde9359c99ce1a954a280e4dbae/webparser-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:56 2020"}