{"info": {"author": "windymile.it", "author_email": "windymile.it@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# windyquery - A non-blocking Python PostgreSQL query builder\n\nWindyquery is a non-blocking PostgreSQL query builder with Asyncio.\n\n### Installation\n```\n$ pip install windyquery\n```\n\n### Connection\n```python\nimport asyncio\n\nfrom windyquery import DB, Schema\n\n# create DB connection for CRUD operatons\ndb = DB()\nasyncio.get_event_loop().run_until_complete(db.connect('db_name', {\n    'host': 'localhost',\n    'port': '5432',\n    'database': 'db_name',\n    'username': 'db_user_name',\n    'password': 'db_user_password'\n}, default=True))\n\nasyncio.get_event_loop().run_until_complete(db.connect('other_db_name', {\n    'host': 'localhost',\n    'port': '5432',\n    'database': 'other_db_name',\n    'username': 'db_user_name',\n    'password': 'db_user_password'\n}, default=False))\n\n# create DB connection for migration operations\nschema = Schema()\nasyncio.get_event_loop().run_until_complete(schema.connect('db_name', {\n    'host': 'localhost',\n    'port': '5432',\n    'database': 'db_name',\n    'username': 'db_user_name',\n    'password': 'db_user_password'\n}, default=True, min_size=1, max_size=1))\n\n# switch connections between different databases\ndb.connection('other_db_name')\n\n# the default connection can also be dynamically changed\ndb.default = 'other_db_name'\n\n# close DB connection\nasyncio.get_event_loop().run_until_complete(db.stop())\n```\n\n### CRUD examples\nA DB instance can be used to constuct a SQL. The instance is a coroutine object.\nIt can be scheduled to run by all [asyncio](https://docs.python.org/3/library/asyncio-task.html) mechanisms.\n```python\n# SELECT\nasync def main(db):\n    user = await db.table('users').select().first()\n    print(user['name'])\n\nasyncio.run(main(db))\n\n# INSERT\nawait db.table('users').insert(\n    {'email': 'test1@example.com', 'password': 'my precious'},\n    {'email': 'test2@example.com', 'password': 'my precious'}\n)\n\n# UPDATE\nawait db.table('users').where('id', 2).update({'name': 'new name'})\n\n# DELETE\nawait db.table('users').where('id', 2).delete()\n\n# Table JOIN\npurchases = await db.table('users').join(\n    'orders', 'orders.user_id', '=', 'users.id'\n).join(\n    'products', 'products.id', '=', 'orders.product_id'\n).select(\n    'users.name AS buyer', 'products.name AS item'\n).where(\"users.id\", 2)\n\n# GROUP BY\npurchases = await db.table('orders').select('user_name').group_by('user_id')\n\n# ORDER BY\nmy_orders = await db.table('orders').select().order_by('sub_total DESC', 'user_id')\n\n# LIMIT\nusers = await db.table('users').select().order_by('name').limit(3)\n```\n\n### Migration examples\nA Shema instance is for creating or altering tables.\nIt is commonly used for DB migrations.\n```python\n# CREATE TABLE\nawait schema.create('users',\n    schema.column('id').serial().primary_key(),\n    # schema.column('id').bigserial().primary_key(), # for big tables\n    schema.column('email').string().nullable(False).unique(), # default to 256\n    schema.column('password').string(32).nullable(False),\n    schema.column('message').text().nullable(False),\n    schema.column('created_at').timestamp().nullable(False).default(\"NOW()\"),\n    schema.column('dinner_time').timestamptz().nullable(False),\n    schema.column('is_admin').boolean().nullable(False).default(False),\n    schema.column('location_id').integer().nullable(False).index(),\n    # schema.column('location_id').bigint().nullable(False).index(),\n    schema.column('salary').numeric(8, 2).nullable(False),\n    schema.column('settings').jsonb().nullable(False),\n)\n\n# RNAME TABLE\nawait schema.rename('users', 'clients')\n\n# ADD TABLE COLUMN\nawait schema.table('users',\n    schema.column('admin').boolean().nullable(False).default(False)\n)\n\n# DROP TABLE COLUMN\nawait schema.table('users',\n    schema.column('admin').drop(),\n)\n\n# ADD INDEX\nawait schema.table('users',\n    schema.index('email', 'created_at'),\n    schema.unique('location_id'),\n)\n\n# DROP INDEX (index is named by table_col1_col2_idx)\nawait schema.dropIndex('users_email_created_at_idx')\n\n# DROP contraint\nawait schema.dropConstraint('users', 'unique_key')\n\n# RAW\nreturn schema.raw(\"\"\"\n    CREATE TABLE users(\n        id                       INT NOT NULL,\n        created_at               DATE NOT NULL,\n        first_name               VARCHAR(100) NOT NULL,\n        last_name                VARCHAR(100) NOT NULL,\n        birthday_mmddyyyy        CHAR(10) NOT NULL,\n    )\n    \"\"\")\n```\n\n\n### JSONB examples\n```python\n# Create JSONB\nawait schema.create('users',\n    schema.column('id').serial().primary_key(),\n    schema.column('data').jsonb(),\n)\n\n# Insert JSONB\nawait db.table('users').insert(\n    {'data': {'name': 'user1', 'address': {'city': 'Chicago', 'state': 'IL'}}},\n    {'data': {'name': 'user2', 'address': {'city': 'New York', 'state': 'NY'}, 'admin': True}},\n)\n\n# SELECT JSONB\nuser = await db.table('users').select(\n    'data->name AS name',\n    'data->>name AS name_text',\n    'data->address AS address'\n).where('id', 2).first() \n# row['name'] == '\"user2\"'\n# row['name_text'] == 'user2'\n# row['address'] == '{\"name\":\"user2\", \"address\":{\"city\":\"New York\", \"state\":\"NY\"}}'\n\n# UPDATE JSONB\nawait db.table('users').where('id', 2).update({'data': {'address': {'city': 'Richmond'}}})\nawait db.table('users').where('id', 2).update({'data->address->city': 'Richmond'})\n\n# JSONB in WHERE clause\nusers = await db.table('users').select('data->>name AS name').where(\"data->address->city\", 'Chicago')\n```\n\n### Raw sql examples\nRaw sql is needed for creating complex queries.\n```python\n# select_raw\nawait db.table('users').select_raw(\n    'ROUND(AVG(id),1) AS avg_id, COUNT(1) AS copies'\n).where('id', [4,5,6]).first()\n\n# insertRaw\nawait db.table('users').insertRaw(\n    '(\"id\", \"name\") SELECT $1, $2 WHERE NOT EXISTS (SELECT \"id\" FROM users WHERE \"id\" = $1)', [10, 'user name']\n))\n\n# order_by_raw\nawait db.table('users').select().order_by_raw('RANDOM()').limit(10)\n\n# raw\nawait db.raw('SELECT * FROM users WHERE id = $1', [2]).first()\n\n# use asyncpg (https://magicstack.github.io/asyncpg/current/usage.html)\nasync with db.conn_pools['db_name'].acquire() as connection:\n    await connection.fetchrow('SELECT * FROM test')\n\n```\n\n### Model\nTo use Model, a **primary key** is required by the underneath table.\nBy subclassing windyquery.Model calss, you create a model for your table.\nBy default, the table name should be in the \"snake_case\" (my_orders),\nand the model name is in CamelCase (MyOrder).\nPlease also note table name has an extra 's' at the end unless it already ends with 's'.\n```python\n# ==== init_service.py ====\n# setup connection\nfrom windyquery import DB\nfrom windyquery.model import Event\n\nmodel_db = DB()\nasyncio.get_event_loop().run_until_complete(model_db.connect('db_name', {\n    'host': 'localhost',\n    'port': '5432',\n    'database': 'db_name',\n    'username': 'db_user_name',\n    'password': 'db_user_password'\n}, default=True))\n# make sure this runs after definition of all model classes\nEvent.db.on_next(model_db)\n\n# ==== models.py ====\nfrom windyquery import Model\n\n# a Model with default setup\nclass User(Model):\n    pass\n# User.table == 'users'\n\n# more about naming convention\nclass AdminUser(Model):\n    pass\n# AdminUser.table == 'admin_users'\n\n# override table name\nclass Custom(Model):\n    table = 'my_custom'\n# Custom.table == 'my_custom'\n\n# find by id\nuser = await User.find(2)\n# user.id == 2\n\n# find mutiple\nusers = await User.find([1, 2])\n# users[1].id == 2\n\n# all\nall_users = await User.all()\n\n# find by where\nuser = await User.where(\"email\", 'test@example.com').first()\nusers = await User.where(\"email\", 'test@example.com')\n\n# save a new record\nuser = User(email='test@example.com', password='password')\nuser = await user.save()\n\n# create a new record if \"Tom Smith\" is not found\nuser = await User.where('first_name', 'Tom').where('last_name', 'Smith').first_or_new()\n\n# update existing record\nuser = await User.find(2)\nuser.name = 'new name'\nawait user.save()\n\n# JOSNB is converted to the matching python types (dict, list)\nuser = await User.find(2)\nprint(user.data)\n# {'data': {'name': 'user2', 'address': {'city': 'New York', 'state': 'NY'}}\nuser.data['address']['city'] = 'Richmond'\nawait user.save()\n```\n\n### Running tests\nInstall pytest to run the included tests,\n```bash\npip install -U pytest\n```\n\nSet up a postgres server with preloaded data. This can be done by using [docker](https://docs.docker.com/install/) with the [official postgre docker image](https://hub.docker.com/_/postgres),\n```bash\ndocker run --rm --name windyquery-test -p 5432:5432 -v ${PWD}/windyquery/tests/seed_test_data.sql:/docker-entrypoint-initdb.d/seed_test_data.sql -e POSTGRES_USER=windyquery-test -e POSTGRES_PASSWORD=windyquery-test -e POSTGRES_DB=windyquery-test -d postgres:12-alpine\n```\n\nNote: to use existing postgres server, it must be configured to have the correct user, password, and database needed in tests/conftest.py. Data needed by tests is in tests/seed_test_data.sql.\n\nTo run the tests,\n```bash\npytest\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bluerelay/windyquery", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "windyquery", "package_url": "https://pypi.org/project/windyquery/", "platform": "", "project_url": "https://pypi.org/project/windyquery/", "project_urls": {"Homepage": "https://github.com/bluerelay/windyquery"}, "release_url": "https://pypi.org/project/windyquery/0.0.4/", "requires_dist": ["asyncpg (==0.20.1)", "rx (==3.0.1)"], "requires_python": "", "summary": "A non-blocking PostgreSQL query builder using Asyncio", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>windyquery - A non-blocking Python PostgreSQL query builder</h1>\n<p>Windyquery is a non-blocking PostgreSQL query builder with Asyncio.</p>\n<h3>Installation</h3>\n<pre><code>$ pip install windyquery\n</code></pre>\n<h3>Connection</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">windyquery</span> <span class=\"kn\">import</span> <span class=\"n\">DB</span><span class=\"p\">,</span> <span class=\"n\">Schema</span>\n\n<span class=\"c1\"># create DB connection for CRUD operatons</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">DB</span><span class=\"p\">()</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'db_name'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_password'</span>\n<span class=\"p\">},</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'other_db_name'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'other_db_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_password'</span>\n<span class=\"p\">},</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># create DB connection for migration operations</span>\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">Schema</span><span class=\"p\">()</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'db_name'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_password'</span>\n<span class=\"p\">},</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">min_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_size</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># switch connections between different databases</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">connection</span><span class=\"p\">(</span><span class=\"s1\">'other_db_name'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># the default connection can also be dynamically changed</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">default</span> <span class=\"o\">=</span> <span class=\"s1\">'other_db_name'</span>\n\n<span class=\"c1\"># close DB connection</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">())</span>\n</pre>\n<h3>CRUD examples</h3>\n<p>A DB instance can be used to constuct a SQL. The instance is a coroutine object.\nIt can be scheduled to run by all <a href=\"https://docs.python.org/3/library/asyncio-task.html\" rel=\"nofollow\">asyncio</a> mechanisms.</p>\n<pre><span class=\"c1\"># SELECT</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">):</span>\n    <span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">])</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># INSERT</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'test1@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'my precious'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'email'</span><span class=\"p\">:</span> <span class=\"s1\">'test2@example.com'</span><span class=\"p\">,</span> <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'my precious'</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># UPDATE</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'new name'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># DELETE</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Table JOIN</span>\n<span class=\"n\">purchases</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"s1\">'orders'</span><span class=\"p\">,</span> <span class=\"s1\">'orders.user_id'</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">'users.id'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span>\n    <span class=\"s1\">'products'</span><span class=\"p\">,</span> <span class=\"s1\">'products.id'</span><span class=\"p\">,</span> <span class=\"s1\">'='</span><span class=\"p\">,</span> <span class=\"s1\">'orders.product_id'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n    <span class=\"s1\">'users.name AS buyer'</span><span class=\"p\">,</span> <span class=\"s1\">'products.name AS item'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"users.id\"</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># GROUP BY</span>\n<span class=\"n\">purchases</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'orders'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'user_name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">group_by</span><span class=\"p\">(</span><span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ORDER BY</span>\n<span class=\"n\">my_orders</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'orders'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'sub_total DESC'</span><span class=\"p\">,</span> <span class=\"s1\">'user_id'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># LIMIT</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n</pre>\n<h3>Migration examples</h3>\n<p>A Shema instance is for creating or altering tables.\nIt is commonly used for DB migrations.</p>\n<pre><span class=\"c1\"># CREATE TABLE</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">primary_key</span><span class=\"p\">(),</span>\n    <span class=\"c1\"># schema.column('id').bigserial().primary_key(), # for big tables</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(),</span> <span class=\"c1\"># default to 256</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'password'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">string</span><span class=\"p\">(</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'message'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">text</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'created_at'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"s2\">\"NOW()\"</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'dinner_time'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">timestamptz</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'is_admin'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">boolean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'location_id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">integer</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(),</span>\n    <span class=\"c1\"># schema.column('location_id').bigint().nullable(False).index(),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'salary'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">numeric</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'settings'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">jsonb</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># RNAME TABLE</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"s1\">'clients'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ADD TABLE COLUMN</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">boolean</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">nullable</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">default</span><span class=\"p\">(</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># DROP TABLE COLUMN</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># ADD INDEX</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">index</span><span class=\"p\">(</span><span class=\"s1\">'email'</span><span class=\"p\">,</span> <span class=\"s1\">'created_at'</span><span class=\"p\">),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">unique</span><span class=\"p\">(</span><span class=\"s1\">'location_id'</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># DROP INDEX (index is named by table_col1_col2_idx)</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dropIndex</span><span class=\"p\">(</span><span class=\"s1\">'users_email_created_at_idx'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># DROP contraint</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">dropConstraint</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span> <span class=\"s1\">'unique_key'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># RAW</span>\n<span class=\"k\">return</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    CREATE TABLE users(</span>\n<span class=\"s2\">        id                       INT NOT NULL,</span>\n<span class=\"s2\">        created_at               DATE NOT NULL,</span>\n<span class=\"s2\">        first_name               VARCHAR(100) NOT NULL,</span>\n<span class=\"s2\">        last_name                VARCHAR(100) NOT NULL,</span>\n<span class=\"s2\">        birthday_mmddyyyy        CHAR(10) NOT NULL,</span>\n<span class=\"s2\">    )</span>\n<span class=\"s2\">    \"\"\"</span><span class=\"p\">)</span>\n</pre>\n<h3>JSONB examples</h3>\n<pre><span class=\"c1\"># Create JSONB</span>\n<span class=\"k\">await</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">,</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">serial</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">primary_key</span><span class=\"p\">(),</span>\n    <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">column</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">jsonb</span><span class=\"p\">(),</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># Insert JSONB</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">insert</span><span class=\"p\">(</span>\n    <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'user1'</span><span class=\"p\">,</span> <span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"s1\">'Chicago'</span><span class=\"p\">,</span> <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'IL'</span><span class=\"p\">}}},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'user2'</span><span class=\"p\">,</span> <span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"s1\">'New York'</span><span class=\"p\">,</span> <span class=\"s1\">'state'</span><span class=\"p\">:</span> <span class=\"s1\">'NY'</span><span class=\"p\">},</span> <span class=\"s1\">'admin'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">}},</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># SELECT JSONB</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span>\n    <span class=\"s1\">'data-&gt;name AS name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'data-&gt;&gt;name AS name_text'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'data-&gt;address AS address'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span> \n<span class=\"c1\"># row['name'] == '\"user2\"'</span>\n<span class=\"c1\"># row['name_text'] == 'user2'</span>\n<span class=\"c1\"># row['address'] == '{\"name\":\"user2\", \"address\":{\"city\":\"New York\", \"state\":\"NY\"}}'</span>\n\n<span class=\"c1\"># UPDATE JSONB</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'data'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'address'</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s1\">'city'</span><span class=\"p\">:</span> <span class=\"s1\">'Richmond'</span><span class=\"p\">}}})</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">({</span><span class=\"s1\">'data-&gt;address-&gt;city'</span><span class=\"p\">:</span> <span class=\"s1\">'Richmond'</span><span class=\"p\">})</span>\n\n<span class=\"c1\"># JSONB in WHERE clause</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">(</span><span class=\"s1\">'data-&gt;&gt;name AS name'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"data-&gt;address-&gt;city\"</span><span class=\"p\">,</span> <span class=\"s1\">'Chicago'</span><span class=\"p\">)</span>\n</pre>\n<h3>Raw sql examples</h3>\n<p>Raw sql is needed for creating complex queries.</p>\n<pre><span class=\"c1\"># select_raw</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select_raw</span><span class=\"p\">(</span>\n    <span class=\"s1\">'ROUND(AVG(id),1) AS avg_id, COUNT(1) AS copies'</span>\n<span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'id'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">6</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># insertRaw</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">insertRaw</span><span class=\"p\">(</span>\n    <span class=\"s1\">'(\"id\", \"name\") SELECT $1, $2 WHERE NOT EXISTS (SELECT \"id\" FROM users WHERE \"id\" = $1)'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"s1\">'user name'</span><span class=\"p\">]</span>\n<span class=\"p\">))</span>\n\n<span class=\"c1\"># order_by_raw</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">table</span><span class=\"p\">(</span><span class=\"s1\">'users'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">select</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">order_by_raw</span><span class=\"p\">(</span><span class=\"s1\">'RANDOM()'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># raw</span>\n<span class=\"k\">await</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">raw</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM users WHERE id = $1'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">])</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># use asyncpg (https://magicstack.github.io/asyncpg/current/usage.html)</span>\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">conn_pools</span><span class=\"p\">[</span><span class=\"s1\">'db_name'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">acquire</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">connection</span><span class=\"p\">:</span>\n    <span class=\"k\">await</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">fetchrow</span><span class=\"p\">(</span><span class=\"s1\">'SELECT * FROM test'</span><span class=\"p\">)</span>\n</pre>\n<h3>Model</h3>\n<p>To use Model, a <strong>primary key</strong> is required by the underneath table.\nBy subclassing windyquery.Model calss, you create a model for your table.\nBy default, the table name should be in the \"snake_case\" (my_orders),\nand the model name is in CamelCase (MyOrder).\nPlease also note table name has an extra 's' at the end unless it already ends with 's'.</p>\n<pre><span class=\"c1\"># ==== init_service.py ====</span>\n<span class=\"c1\"># setup connection</span>\n<span class=\"kn\">from</span> <span class=\"nn\">windyquery</span> <span class=\"kn\">import</span> <span class=\"n\">DB</span>\n<span class=\"kn\">from</span> <span class=\"nn\">windyquery.model</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span>\n\n<span class=\"n\">model_db</span> <span class=\"o\">=</span> <span class=\"n\">DB</span><span class=\"p\">()</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">model_db</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'db_name'</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'host'</span><span class=\"p\">:</span> <span class=\"s1\">'localhost'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"s1\">'5432'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'database'</span><span class=\"p\">:</span> <span class=\"s1\">'db_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'username'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_name'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'password'</span><span class=\"p\">:</span> <span class=\"s1\">'db_user_password'</span>\n<span class=\"p\">},</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"c1\"># make sure this runs after definition of all model classes</span>\n<span class=\"n\">Event</span><span class=\"o\">.</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">on_next</span><span class=\"p\">(</span><span class=\"n\">model_db</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ==== models.py ====</span>\n<span class=\"kn\">from</span> <span class=\"nn\">windyquery</span> <span class=\"kn\">import</span> <span class=\"n\">Model</span>\n\n<span class=\"c1\"># a Model with default setup</span>\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"c1\"># User.table == 'users'</span>\n\n<span class=\"c1\"># more about naming convention</span>\n<span class=\"k\">class</span> <span class=\"nc\">AdminUser</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n<span class=\"c1\"># AdminUser.table == 'admin_users'</span>\n\n<span class=\"c1\"># override table name</span>\n<span class=\"k\">class</span> <span class=\"nc\">Custom</span><span class=\"p\">(</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"s1\">'my_custom'</span>\n<span class=\"c1\"># Custom.table == 'my_custom'</span>\n\n<span class=\"c1\"># find by id</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"c1\"># user.id == 2</span>\n\n<span class=\"c1\"># find mutiple</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n<span class=\"c1\"># users[1].id == 2</span>\n\n<span class=\"c1\"># all</span>\n<span class=\"n\">all_users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># find by where</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"email\"</span><span class=\"p\">,</span> <span class=\"s1\">'test@example.com'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s2\">\"email\"</span><span class=\"p\">,</span> <span class=\"s1\">'test@example.com'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># save a new record</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"n\">User</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'test@example.com'</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># create a new record if \"Tom Smith\" is not found</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'first_name'</span><span class=\"p\">,</span> <span class=\"s1\">'Tom'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">where</span><span class=\"p\">(</span><span class=\"s1\">'last_name'</span><span class=\"p\">,</span> <span class=\"s1\">'Smith'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first_or_new</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># update existing record</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'new name'</span>\n<span class=\"k\">await</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># JOSNB is converted to the matching python types (dict, list)</span>\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">find</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"c1\"># {'data': {'name': 'user2', 'address': {'city': 'New York', 'state': 'NY'}}</span>\n<span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'address'</span><span class=\"p\">][</span><span class=\"s1\">'city'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Richmond'</span>\n<span class=\"k\">await</span> <span class=\"n\">user</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n</pre>\n<h3>Running tests</h3>\n<p>Install pytest to run the included tests,</p>\n<pre>pip install -U pytest\n</pre>\n<p>Set up a postgres server with preloaded data. This can be done by using <a href=\"https://docs.docker.com/install/\" rel=\"nofollow\">docker</a> with the <a href=\"https://hub.docker.com/_/postgres\" rel=\"nofollow\">official postgre docker image</a>,</p>\n<pre>docker run --rm --name windyquery-test -p <span class=\"m\">5432</span>:5432 -v <span class=\"si\">${</span><span class=\"nv\">PWD</span><span class=\"si\">}</span>/windyquery/tests/seed_test_data.sql:/docker-entrypoint-initdb.d/seed_test_data.sql -e <span class=\"nv\">POSTGRES_USER</span><span class=\"o\">=</span>windyquery-test -e <span class=\"nv\">POSTGRES_PASSWORD</span><span class=\"o\">=</span>windyquery-test -e <span class=\"nv\">POSTGRES_DB</span><span class=\"o\">=</span>windyquery-test -d postgres:12-alpine\n</pre>\n<p>Note: to use existing postgres server, it must be configured to have the correct user, password, and database needed in tests/conftest.py. Data needed by tests is in tests/seed_test_data.sql.</p>\n<p>To run the tests,</p>\n<pre>pytest\n</pre>\n\n          </div>"}, "last_serial": 6463815, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "3cb8f864e62ada6129fd1f50407f55e8", "sha256": "01e35461773aff34df808752c0a280b7fcd65ced2d002bf88e1cb6e0d034e96b"}, "downloads": -1, "filename": "windyquery-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3cb8f864e62ada6129fd1f50407f55e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21398, "upload_time": "2019-02-11T01:50:27", "upload_time_iso_8601": "2019-02-11T01:50:27.840873Z", "url": "https://files.pythonhosted.org/packages/b8/84/4f14fa7290e062940f1dd098c2d44c77fb5a4ac31b92693f4ca70db7139d/windyquery-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82471cba679a8c01bb9b264a748df413", "sha256": "04a7b48033c061f13dd8757a416b52c995228872278f609d2abeabaaa254146f"}, "downloads": -1, "filename": "windyquery-0.0.1.tar.gz", "has_sig": false, "md5_digest": "82471cba679a8c01bb9b264a748df413", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14162, "upload_time": "2019-02-11T01:50:29", "upload_time_iso_8601": "2019-02-11T01:50:29.686200Z", "url": "https://files.pythonhosted.org/packages/53/0a/e93b283d854615b13b34faf06675ea61b06734ad8c8c908a0dbbc069dc8d/windyquery-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "3f01b687c4d4e97ccf206f775a646e70", "sha256": "82719caef4339c3d8c200d7744b784a762f409198a22eabe20679380d6008f74"}, "downloads": -1, "filename": "windyquery-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3f01b687c4d4e97ccf206f775a646e70", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22988, "upload_time": "2019-02-11T18:27:51", "upload_time_iso_8601": "2019-02-11T18:27:51.121051Z", "url": "https://files.pythonhosted.org/packages/6d/1a/0d67aaa8d37daa96a5c9f7ecf897a56e2ec6ce9effd73eaa3dc75af502ec/windyquery-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b7af791e0bf43de3d40c6a217823afac", "sha256": "9449574bb801ba5d53a3f5c4f9928f85e76152b4df53dd58ddf25349879e8a28"}, "downloads": -1, "filename": "windyquery-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b7af791e0bf43de3d40c6a217823afac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16163, "upload_time": "2019-02-11T18:27:52", "upload_time_iso_8601": "2019-02-11T18:27:52.549043Z", "url": "https://files.pythonhosted.org/packages/4a/da/bc1fcbf53a1441cbadf2a075f5ab42c67d03bf224e8511d42018bfa885ed/windyquery-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "a2de0acb274b9bd724a41780d0f23801", "sha256": "6f5b92c23fe673a4f4ab7d896baa244cee5cb48b611082eba9eb86ccf29979b6"}, "downloads": -1, "filename": "windyquery-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a2de0acb274b9bd724a41780d0f23801", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23998, "upload_time": "2019-11-10T01:07:09", "upload_time_iso_8601": "2019-11-10T01:07:09.692753Z", "url": "https://files.pythonhosted.org/packages/44/ea/510919b3b5a745d9c16495348396aabebeb225cedd34326e8d72c2e77e4d/windyquery-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8bc83868f79879485420f969e23e503", "sha256": "70dae58d530ad63741f4793b4601f4c9b1ac08e942a08c4b92c211a0e2a6b6e1"}, "downloads": -1, "filename": "windyquery-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f8bc83868f79879485420f969e23e503", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19772, "upload_time": "2019-11-10T01:07:11", "upload_time_iso_8601": "2019-11-10T01:07:11.822700Z", "url": "https://files.pythonhosted.org/packages/87/19/2822cb6c54d6c1440aff8e3374bfa713dcd67eb4f643b173b7160648a7a9/windyquery-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "6ee185891050d8f891eb73c58407a547", "sha256": "f0f563aef0677040dbe404dd1e9cc53dcfc9072552cbd11730eac62b28755efd"}, "downloads": -1, "filename": "windyquery-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6ee185891050d8f891eb73c58407a547", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25747, "upload_time": "2020-01-16T04:45:01", "upload_time_iso_8601": "2020-01-16T04:45:01.030967Z", "url": "https://files.pythonhosted.org/packages/9c/c7/96403b1c445db01963cc4bc89d171dfa440f9f256f6ef20cc54ccc4a696e/windyquery-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab55009efca5dc67fda03d504f6a9d0c", "sha256": "c32e781e2a4fe98a94983fe93beea300fc80068d4c15682718fff88463eb0441"}, "downloads": -1, "filename": "windyquery-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ab55009efca5dc67fda03d504f6a9d0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21754, "upload_time": "2020-01-16T04:45:03", "upload_time_iso_8601": "2020-01-16T04:45:03.017335Z", "url": "https://files.pythonhosted.org/packages/f8/94/23bc525bb64e7a1a94bf2f171a0f6a76444a2c80848fbc733bcf86e90c17/windyquery-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6ee185891050d8f891eb73c58407a547", "sha256": "f0f563aef0677040dbe404dd1e9cc53dcfc9072552cbd11730eac62b28755efd"}, "downloads": -1, "filename": "windyquery-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "6ee185891050d8f891eb73c58407a547", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25747, "upload_time": "2020-01-16T04:45:01", "upload_time_iso_8601": "2020-01-16T04:45:01.030967Z", "url": "https://files.pythonhosted.org/packages/9c/c7/96403b1c445db01963cc4bc89d171dfa440f9f256f6ef20cc54ccc4a696e/windyquery-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab55009efca5dc67fda03d504f6a9d0c", "sha256": "c32e781e2a4fe98a94983fe93beea300fc80068d4c15682718fff88463eb0441"}, "downloads": -1, "filename": "windyquery-0.0.4.tar.gz", "has_sig": false, "md5_digest": "ab55009efca5dc67fda03d504f6a9d0c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21754, "upload_time": "2020-01-16T04:45:03", "upload_time_iso_8601": "2020-01-16T04:45:03.017335Z", "url": "https://files.pythonhosted.org/packages/f8/94/23bc525bb64e7a1a94bf2f171a0f6a76444a2c80848fbc733bcf86e90c17/windyquery-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:56 2020"}