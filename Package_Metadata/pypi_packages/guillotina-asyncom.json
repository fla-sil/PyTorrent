{"info": {"author": "Jordi Collell", "author_email": "jordic@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "## guillotina_asyncom\n\nPOC of integrating a new Content-type DBFolder\n\n- A DBFolder represents a table on postgres\n  with a related sqlalchemy model\n\n### Benefits\n\n- Use guillotina permission system\n- Use guillotina framework.\n- Lookup views on a context (a sqlalchemy object)\n- Integrate with the guillotina gmi interface\n\n## Howto use\n\n1. Create your regular sqlalchemy model, like, import your Base,\n   from guillotina_asyncom.db\n\n```python\nfrom guillotina_asyncom.db import Base\nimport sqlalchemy as sa\n\n@implementer(IModel)\nclass Model(Base):\n    __tablename__ = \"extras\"\n\n    pk = sa.Column(sa.Integer, primary_key=True)\n    value = sa.Column(sa.JSONB)\n\n```\n\nAdd an object whenever you want of your guillotina content tree:\n\n```\nPOST /db/guillotina/\n{\n    \"@type\": \"DBFolder\",\n    \"id\", : \"dbmodel\",\n    \"model\": \"Model\"\n}\n```\n\nFrom here, we can just use the guillotina API with our new endpoint.\n\nPOST /db/guillotina/dbmodel/\n{\n\"value\": {\"prop\", \"value\"}\n}\n\nGET /db/guillotina/dbmodel/@search\nGET /db/guillotina/dbmodel/{pk}\nDELETE /db/guillotina/dbmodel/{pk}\nPATCH /db/guillotina/dbmodel/{pk}\n\nThought it should work registering services for instances...\n\nPOST /db/guillotina/dbmodel/{pk}/@requeue\n\n- Cool feature: It integrates with guillotina_react :)\n\n## IDEAS and TODOS\n\n- It's not hard to build a generic model explorer from here.\n  All registered models on sqlalchemy live on Base.metadata...\n  just build a small traversal around\n\n- Generate the expected schema for every new type,\n  perhaps on the /db/guillotina/dbmodel/@schema\n  taking it from declarative sqlalchemy models\n\n- Integrate the permission system on rows... Just implement an acl\n  jsonb column in your models. (Setting the ownership, or whatever you want..)\n\n- The event system is still not implemented, perhaps could be implemented\n  but with some new events. (If we do with the actuals we will mess with the\n  catalog)\n\n- Implement a rich @search model (on the end we can just translate,\n  the actual implementations to sqlalchemy querys). Also implement pagger,\n  and the rest. This will make this fit so well with guillotina_react.\n\n\n\n...\n\nYou are seeing a truncated changelog.\n\nYou can read the `changelog file <https://github.com/plone/guillotina/blob/master/CHANGELOG.rst>`_\nfor a complete list.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jordic/guillotina_asyncom", "keywords": "asyncio,REST,Framework,transactional,asgi,postgresql,sqlalchemy", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "guillotina-asyncom", "package_url": "https://pypi.org/project/guillotina-asyncom/", "platform": "", "project_url": "https://pypi.org/project/guillotina-asyncom/", "project_urls": {"Homepage": "https://github.com/jordic/guillotina_asyncom"}, "release_url": "https://pypi.org/project/guillotina-asyncom/0a1/", "requires_dist": ["guillotina", "asyncom (>=0.3.1)", "pytest (>=3.8.0<=5.0.0) ; extra == 'test'", "docker ; extra == 'test'", "backoff ; extra == 'test'", "psycopg2-binary ; extra == 'test'", "pytest-asyncio (>=0.10.0) ; extra == 'test'", "pytest-cov ; extra == 'test'", "coverage (>=4.0.3) ; extra == 'test'", "pytest-docker-fixtures ; extra == 'test'", "pytest-rerunfailures (<=7.0) ; extra == 'test'", "async-asgi-testclient (~=1.2.0) ; extra == 'test'"], "requires_python": ">=3.7.0", "summary": "Guillotina Postgresql integration", "version": "0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>guillotina_asyncom</h2>\n<p>POC of integrating a new Content-type DBFolder</p>\n<ul>\n<li>A DBFolder represents a table on postgres\nwith a related sqlalchemy model</li>\n</ul>\n<h3>Benefits</h3>\n<ul>\n<li>Use guillotina permission system</li>\n<li>Use guillotina framework.</li>\n<li>Lookup views on a context (a sqlalchemy object)</li>\n<li>Integrate with the guillotina gmi interface</li>\n</ul>\n<h2>Howto use</h2>\n<ol>\n<li>Create your regular sqlalchemy model, like, import your Base,\nfrom guillotina_asyncom.db</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">guillotina_asyncom.db</span> <span class=\"kn\">import</span> <span class=\"n\">Base</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlalchemy</span> <span class=\"k\">as</span> <span class=\"nn\">sa</span>\n\n<span class=\"nd\">@implementer</span><span class=\"p\">(</span><span class=\"n\">IModel</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Model</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s2\">\"extras\"</span>\n\n    <span class=\"n\">pk</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">sa</span><span class=\"o\">.</span><span class=\"n\">JSONB</span><span class=\"p\">)</span>\n</pre>\n<p>Add an object whenever you want of your guillotina content tree:</p>\n<pre><code>POST /db/guillotina/\n{\n    \"@type\": \"DBFolder\",\n    \"id\", : \"dbmodel\",\n    \"model\": \"Model\"\n}\n</code></pre>\n<p>From here, we can just use the guillotina API with our new endpoint.</p>\n<p>POST /db/guillotina/dbmodel/\n{\n\"value\": {\"prop\", \"value\"}\n}</p>\n<p>GET /db/guillotina/dbmodel/@search\nGET /db/guillotina/dbmodel/{pk}\nDELETE /db/guillotina/dbmodel/{pk}\nPATCH /db/guillotina/dbmodel/{pk}</p>\n<p>Thought it should work registering services for instances...</p>\n<p>POST /db/guillotina/dbmodel/{pk}/@requeue</p>\n<ul>\n<li>Cool feature: It integrates with guillotina_react :)</li>\n</ul>\n<h2>IDEAS and TODOS</h2>\n<ul>\n<li>\n<p>It's not hard to build a generic model explorer from here.\nAll registered models on sqlalchemy live on Base.metadata...\njust build a small traversal around</p>\n</li>\n<li>\n<p>Generate the expected schema for every new type,\nperhaps on the /db/guillotina/dbmodel/@schema\ntaking it from declarative sqlalchemy models</p>\n</li>\n<li>\n<p>Integrate the permission system on rows... Just implement an acl\njsonb column in your models. (Setting the ownership, or whatever you want..)</p>\n</li>\n<li>\n<p>The event system is still not implemented, perhaps could be implemented\nbut with some new events. (If we do with the actuals we will mess with the\ncatalog)</p>\n</li>\n<li>\n<p>Implement a rich @search model (on the end we can just translate,\nthe actual implementations to sqlalchemy querys). Also implement pagger,\nand the rest. This will make this fit so well with guillotina_react.</p>\n</li>\n</ul>\n<p>...</p>\n<p>You are seeing a truncated changelog.</p>\n<p>You can read the <code>changelog file &lt;https://github.com/plone/guillotina/blob/master/CHANGELOG.rst&gt;</code>_\nfor a complete list.</p>\n\n          </div>"}, "last_serial": 6477336, "releases": {"0a1": [{"comment_text": "", "digests": {"md5": "2c213229bc315f8e746f8f2073b57047", "sha256": "f600b9c08eadf7049958b6c65171adf2f6472fd7cb849a5923f5ea38e4be4c98"}, "downloads": -1, "filename": "guillotina_asyncom-0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "2c213229bc315f8e746f8f2073b57047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 12610, "upload_time": "2020-01-18T08:18:01", "upload_time_iso_8601": "2020-01-18T08:18:01.030670Z", "url": "https://files.pythonhosted.org/packages/63/78/b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45/guillotina_asyncom-0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e422c3630da552da0e55cc3e584f3f", "sha256": "446bf075e6fbf74fa93fbaa0ede2fed41104f0f80cfbb41e810fc2f152f3dfff"}, "downloads": -1, "filename": "guillotina_asyncom-0a1.tar.gz", "has_sig": false, "md5_digest": "c0e422c3630da552da0e55cc3e584f3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 9592, "upload_time": "2020-01-18T08:18:04", "upload_time_iso_8601": "2020-01-18T08:18:04.201021Z", "url": "https://files.pythonhosted.org/packages/9c/a0/175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd/guillotina_asyncom-0a1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c213229bc315f8e746f8f2073b57047", "sha256": "f600b9c08eadf7049958b6c65171adf2f6472fd7cb849a5923f5ea38e4be4c98"}, "downloads": -1, "filename": "guillotina_asyncom-0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "2c213229bc315f8e746f8f2073b57047", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 12610, "upload_time": "2020-01-18T08:18:01", "upload_time_iso_8601": "2020-01-18T08:18:01.030670Z", "url": "https://files.pythonhosted.org/packages/63/78/b877f51166bfd923b312cc6c29bf85b4f4903d3c11463845986587bbdd45/guillotina_asyncom-0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0e422c3630da552da0e55cc3e584f3f", "sha256": "446bf075e6fbf74fa93fbaa0ede2fed41104f0f80cfbb41e810fc2f152f3dfff"}, "downloads": -1, "filename": "guillotina_asyncom-0a1.tar.gz", "has_sig": false, "md5_digest": "c0e422c3630da552da0e55cc3e584f3f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7.0", "size": 9592, "upload_time": "2020-01-18T08:18:04", "upload_time_iso_8601": "2020-01-18T08:18:04.201021Z", "url": "https://files.pythonhosted.org/packages/9c/a0/175196f9049ada62502b86b3529a75aa0387de4b46780a9c19f9728e08bd/guillotina_asyncom-0a1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:19 2020"}