{"info": {"author": "Ramon Blanquer", "author_email": "blanquer.ramon@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "cerda\n#####\n\n.. image:: https://docwhite.github.io/cerda/_images/cerda_with_help.png\n\nWelcome to Cerda's documentation. This tool will allow you to transfer the files\nthat get rendered at renderfarm to either local disk or Dropbox account. Also \nthere is a notification feature that allows you to get sent an email after a \nspecific number of frames get rendered. Cool, innit?\n\n* *Documentation:* https://docwhite.github.io/cerda\n* *Source:* https://github.com/docwhite/cerda\n* *Bugs:* https://github.com/docwhite/cerda/issues\n\n**NOTE:** This is intended to be used at NCCA labs only.\n\nFollow these steps in the labs. I wrote how to install pip locally because we\ndon't have sudo privileges, pity. No worries it is literally **3 lines of code**\nas I like to keep things simple.\n\n**WARNING:** This tool is in early stage. Please contribute reporting issues on\nhttp://github.com/docwhite/cerda or directly by speaking to that Spanish shy\nguy in the labs, or drop me an email blanquer.ramon@gmail.com\n\nUpcoming features:\n\n* **Direct integration with Qube**: There will be no need to do all the steps to\n  dispatch the job to the render farm.\n* Improved mail formatting with **thumbnails** of what has been rendered.\n\nPrerequisites\n=============\n\nIf you are in the labs you will need to install pip locally. Follow these\nsteps carefully:\n\nOpen a terminal and change directory to home::\n    \n    $ cd ~\n\nGet the pip installer script with wget (downloads a file form the web)::\n    \n    $ wget https://bootstrap.pypa.io/get-pip.py -P ~\n\nInstall pip locally (it will get installed to ``~/.local``)::\n    \n    $ python ~/get-pip.py --user\n    \nAppend the binaries directory that contains all the pip executables to your\n``$PATH`` variable. Either do it manually or simply execute this line of code\nthat will write a new line on your ``.bashrc`` file::\n    \n    $ echo \"PATH=\\$PATH:~/.local/bin\" >> ~/.bashrc\n\nClose the shell and start a new one. Alternatively reload your profile::\n\n    $ source ~/.bashrc\n\nInstallation\n============\n\nNow you got pip up and running! The next move is to install the tool using it::\n\n    $ pip install cerda --user\n    \nUsage\n=====\n\nCheck out the help command ``cerda -h``::\n\n    usage: cerda [-h] [-dbox] [-e EMAIL] [-c COUNT] [-r EVERY] [-t CUSTOMTYPES]\n                 source target\n\n    An NCCA render farm collector.\n\n    positional arguments:\n      source                Remote location path (relative to home) where the\n                            frames get generated.\n      target                Custom file extensions to mark for transfering. I.e.\n                            -t tiff,exr,obj\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -dbox, --dropbox      Will send the files to the root path of your dropbox\n                            account.\n      -e EMAIL, --email EMAIL\n                            Email address to send notification to after -c frames\n                            have been rendered.\n      -c COUNT, --count COUNT\n                            At this numer of frames, send an email to the address\n                            specified with -m flag.\n      -r EVERY, --every EVERY\n                            How often to check for frames dropped (in seconds)\n      -t CUSTOMTYPES, --customTypes CUSTOMTYPES\n                            Custom file extensions to mark for transfering. I.e.\n                            -t tiff,exr,obj\n\n**WARNING:** Please make sure the **paths** you pass in are relative to your home folder.\n\nExamples\n++++++++\n\nExample 1\n---------\n\nMy renderfarm is rendering out the frames at ``/home/i7243466/project1/render`` \non the **tete** server. I want the frames to get transfered to my local drive at\nlocation ``/home/i7243466/rendered/frames``::\n\n    $ cerda project1/render rendered/frames\n\nOr you could also use the short flags::\n\n    $ cerda project1/render rendered/frames\n\nExample 2\n---------\n\nMy renderfarm is rendering out the frames at ``/home/i7243466/project1/render`` \non the **tete** server. I want the frames to get transfered to my Dropbox\naccount under ``/some/folder``::\n\n    $ cerda project1/render some/folder --dropbox\n\nOr::\n\n    $ cerda project1/render rendered/frames -dbox\n\nExample 3\n---------\n\nMy renderfarm is rendering out the frames at ``/home/i7243466/project1/render`` \non the **tete** server. I want the frames to get transfered to my Dropbox\naccount under ``/some/folder`` **and** when it has finished rendering, which\nmeans 20 frames get collected, send me an email notification::\n\n    $ cerda project1/render some/folder --dropbox --email blanquer.ramon@gmail.com --count 20\n\nOr::\n\n    $ cerda project1/render rendered/frames -dbox -e blanquer.ramon@gmail.com -c 20\n\nWhen it is finished you will receive an email from **cerdancca@gmail.com**.\nHopefully it won't get blocked as I am using Google's own SMTP servers.\n\nIf you find any problem or bug please report it using the Issues page or drop me a line at blanquer.ramon@gmail.com\n\nExample 4\n---------\n\nMy renderfarm is rendering out Alembic **.abc** files at ``/home/i7243466/project1/render`` \non the **tete** server. I want the files to get transfered to my local drive at\nlocation ``/home/i7243466/hello/alembics``::\n\n    $ cerda project1/render hello/alembics --customTypes abc\n\nOr you could also use the short flags::\n\n    $ cerda project1/render hello/alembics --t abc\n\n.. note::\n    You can specify more than custom type to transfer like ``--customTypes png,jpg,abc,tiff``\n    No spaces, separated by commas.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/docwhite/cerda/tarball/0.1.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/docwhite/cerda", "keywords": "renderfarm ncca transfer files watch notification email dropbox", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "cerda", "package_url": "https://pypi.org/project/cerda/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cerda/", "project_urls": {"Download": "https://github.com/docwhite/cerda/tarball/0.1.2", "Homepage": "https://github.com/docwhite/cerda"}, "release_url": "https://pypi.org/project/cerda/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "An NCCA renderfarm SFTP watcher", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://docwhite.github.io/cerda/_images/cerda_with_help.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/77c090f8d10a0b0f2b609cd31d214f96d5cffeaa/68747470733a2f2f646f6377686974652e6769746875622e696f2f63657264612f5f696d616765732f63657264615f776974685f68656c702e706e67\">\n<p>Welcome to Cerda\u2019s documentation. This tool will allow you to transfer the files\nthat get rendered at renderfarm to either local disk or Dropbox account. Also\nthere is a notification feature that allows you to get sent an email after a\nspecific number of frames get rendered. Cool, innit?</p>\n<ul>\n<li><em>Documentation:</em> <a href=\"https://docwhite.github.io/cerda\" rel=\"nofollow\">https://docwhite.github.io/cerda</a></li>\n<li><em>Source:</em> <a href=\"https://github.com/docwhite/cerda\" rel=\"nofollow\">https://github.com/docwhite/cerda</a></li>\n<li><em>Bugs:</em> <a href=\"https://github.com/docwhite/cerda/issues\" rel=\"nofollow\">https://github.com/docwhite/cerda/issues</a></li>\n</ul>\n<p><strong>NOTE:</strong> This is intended to be used at NCCA labs only.</p>\n<p>Follow these steps in the labs. I wrote how to install pip locally because we\ndon\u2019t have sudo privileges, pity. No worries it is literally <strong>3 lines of code</strong>\nas I like to keep things simple.</p>\n<p><strong>WARNING:</strong> This tool is in early stage. Please contribute reporting issues on\n<a href=\"http://github.com/docwhite/cerda\" rel=\"nofollow\">http://github.com/docwhite/cerda</a> or directly by speaking to that Spanish shy\nguy in the labs, or drop me an email <a href=\"mailto:blanquer.ramon%40gmail.com\">blanquer<span>.</span>ramon<span>@</span>gmail<span>.</span>com</a></p>\n<p>Upcoming features:</p>\n<ul>\n<li><strong>Direct integration with Qube</strong>: There will be no need to do all the steps to\ndispatch the job to the render farm.</li>\n<li>Improved mail formatting with <strong>thumbnails</strong> of what has been rendered.</li>\n</ul>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p>If you are in the labs you will need to install pip locally. Follow these\nsteps carefully:</p>\n<p>Open a terminal and change directory to home:</p>\n<pre>$ cd ~\n</pre>\n<p>Get the pip installer script with wget (downloads a file form the web):</p>\n<pre>$ wget https://bootstrap.pypa.io/get-pip.py -P ~\n</pre>\n<p>Install pip locally (it will get installed to <tt><span class=\"pre\">~/.local</span></tt>):</p>\n<pre>$ python ~/get-pip.py --user\n</pre>\n<p>Append the binaries directory that contains all the pip executables to your\n<tt>$PATH</tt> variable. Either do it manually or simply execute this line of code\nthat will write a new line on your <tt>.bashrc</tt> file:</p>\n<pre>$ echo \"PATH=\\$PATH:~/.local/bin\" &gt;&gt; ~/.bashrc\n</pre>\n<p>Close the shell and start a new one. Alternatively reload your profile:</p>\n<pre>$ source ~/.bashrc\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Now you got pip up and running! The next move is to install the tool using it:</p>\n<pre>$ pip install cerda --user\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Check out the help command <tt>cerda <span class=\"pre\">-h</span></tt>:</p>\n<pre>usage: cerda [-h] [-dbox] [-e EMAIL] [-c COUNT] [-r EVERY] [-t CUSTOMTYPES]\n             source target\n\nAn NCCA render farm collector.\n\npositional arguments:\n  source                Remote location path (relative to home) where the\n                        frames get generated.\n  target                Custom file extensions to mark for transfering. I.e.\n                        -t tiff,exr,obj\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -dbox, --dropbox      Will send the files to the root path of your dropbox\n                        account.\n  -e EMAIL, --email EMAIL\n                        Email address to send notification to after -c frames\n                        have been rendered.\n  -c COUNT, --count COUNT\n                        At this numer of frames, send an email to the address\n                        specified with -m flag.\n  -r EVERY, --every EVERY\n                        How often to check for frames dropped (in seconds)\n  -t CUSTOMTYPES, --customTypes CUSTOMTYPES\n                        Custom file extensions to mark for transfering. I.e.\n                        -t tiff,exr,obj\n</pre>\n<p><strong>WARNING:</strong> Please make sure the <strong>paths</strong> you pass in are relative to your home folder.</p>\n<div id=\"examples\">\n<h3>Examples</h3>\n<div id=\"example-1\">\n<h4>Example 1</h4>\n<p>My renderfarm is rendering out the frames at <tt>/home/i7243466/project1/render</tt>\non the <strong>tete</strong> server. I want the frames to get transfered to my local drive at\nlocation <tt>/home/i7243466/rendered/frames</tt>:</p>\n<pre>$ cerda project1/render rendered/frames\n</pre>\n<p>Or you could also use the short flags:</p>\n<pre>$ cerda project1/render rendered/frames\n</pre>\n</div>\n<div id=\"example-2\">\n<h4>Example 2</h4>\n<p>My renderfarm is rendering out the frames at <tt>/home/i7243466/project1/render</tt>\non the <strong>tete</strong> server. I want the frames to get transfered to my Dropbox\naccount under <tt>/some/folder</tt>:</p>\n<pre>$ cerda project1/render some/folder --dropbox\n</pre>\n<p>Or:</p>\n<pre>$ cerda project1/render rendered/frames -dbox\n</pre>\n</div>\n<div id=\"example-3\">\n<h4>Example 3</h4>\n<p>My renderfarm is rendering out the frames at <tt>/home/i7243466/project1/render</tt>\non the <strong>tete</strong> server. I want the frames to get transfered to my Dropbox\naccount under <tt>/some/folder</tt> <strong>and</strong> when it has finished rendering, which\nmeans 20 frames get collected, send me an email notification:</p>\n<pre>$ cerda project1/render some/folder --dropbox --email blanquer.ramon@gmail.com --count 20\n</pre>\n<p>Or:</p>\n<pre>$ cerda project1/render rendered/frames -dbox -e blanquer.ramon@gmail.com -c 20\n</pre>\n<p>When it is finished you will receive an email from <strong>cerdancca@gmail.com</strong>.\nHopefully it won\u2019t get blocked as I am using Google\u2019s own SMTP servers.</p>\n<p>If you find any problem or bug please report it using the Issues page or drop me a line at <a href=\"mailto:blanquer.ramon%40gmail.com\">blanquer<span>.</span>ramon<span>@</span>gmail<span>.</span>com</a></p>\n</div>\n<div id=\"example-4\">\n<h4>Example 4</h4>\n<p>My renderfarm is rendering out Alembic <strong>.abc</strong> files at <tt>/home/i7243466/project1/render</tt>\non the <strong>tete</strong> server. I want the files to get transfered to my local drive at\nlocation <tt>/home/i7243466/hello/alembics</tt>:</p>\n<pre>$ cerda project1/render hello/alembics --customTypes abc\n</pre>\n<p>Or you could also use the short flags:</p>\n<pre>$ cerda project1/render hello/alembics --t abc\n</pre>\n<div>\n<p>Note</p>\n<p>You can specify more than custom type to transfer like <tt><span class=\"pre\">--customTypes</span> png,jpg,abc,tiff</tt>\nNo spaces, separated by commas.</p>\n</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2494526, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "62a28908b5e506a992a18a2c35c1649f", "sha256": "b99dcab64a53aa620438f85b278f31142e8c6c49d4bd40105357dff55737796f"}, "downloads": -1, "filename": "cerda-0.1.0.tar.gz", "has_sig": false, "md5_digest": "62a28908b5e506a992a18a2c35c1649f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9797, "upload_time": "2016-10-06T13:32:52", "upload_time_iso_8601": "2016-10-06T13:32:52.941474Z", "url": "https://files.pythonhosted.org/packages/34/c2/9143fd61abed604ef7ac198c3b327205bba74b4f3e592b1f1bc62d15fb34/cerda-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ba87dfa4d0955d18d3da833ed9382c90", "sha256": "89dff6da849671786c4a17f170a9d9841a019b4d17f3b481b555f643dc1b6ee3"}, "downloads": -1, "filename": "cerda-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ba87dfa4d0955d18d3da833ed9382c90", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9905, "upload_time": "2016-10-06T16:34:10", "upload_time_iso_8601": "2016-10-06T16:34:10.605547Z", "url": "https://files.pythonhosted.org/packages/b6/e9/057f398f2db30b0aebfe7af166fd8b9eec1ef95f6018d40aebb6ef4583bf/cerda-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "4a34f22a9654aa778e348ac83e3a4523", "sha256": "aaf9b5e3e3eafe6f35e28d01e2204ad452cedb2d9344b08efe17db4309e362b4"}, "downloads": -1, "filename": "cerda-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4a34f22a9654aa778e348ac83e3a4523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11948, "upload_time": "2016-12-01T20:21:20", "upload_time_iso_8601": "2016-12-01T20:21:20.456545Z", "url": "https://files.pythonhosted.org/packages/a3/f0/39b6a73ec9aeed9421c82c7fb33d1a203c721e2dc6433a9e65541da2f5d6/cerda-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4a34f22a9654aa778e348ac83e3a4523", "sha256": "aaf9b5e3e3eafe6f35e28d01e2204ad452cedb2d9344b08efe17db4309e362b4"}, "downloads": -1, "filename": "cerda-0.1.2.tar.gz", "has_sig": false, "md5_digest": "4a34f22a9654aa778e348ac83e3a4523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11948, "upload_time": "2016-12-01T20:21:20", "upload_time_iso_8601": "2016-12-01T20:21:20.456545Z", "url": "https://files.pythonhosted.org/packages/a3/f0/39b6a73ec9aeed9421c82c7fb33d1a203c721e2dc6433a9e65541da2f5d6/cerda-0.1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:34:47 2020"}