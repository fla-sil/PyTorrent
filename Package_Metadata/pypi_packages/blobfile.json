{"info": {"author": "Christopher Hesse", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# blobfile\n\nThis is a standalone clone of TensorFlow's [`gfile`](https://www.tensorflow.org/api_docs/python/tf/io/gfile/GFile), supporting local paths, `gs://` (Google Cloud Storage) paths, and Azure Storage paths.\n\nThe main function is `BlobFile`, a replacement for `GFile`.  There are also a few additional functions, `basename`, `dirname`, and `join`, which mostly do the same thing as their `os.path` namesakes, only they also support `gs://` paths and Azure Storage paths.\n\n## Installation\n\n```sh\npip install blobfile\n```\n\n## Usage\n\n```py\nimport blobfile as bf\n\nwith bf.BlobFile(\"gs://my-bucket-name/cats\", \"wb\") as w:\n    w.write(b\"meow!\")\n```\n\n\nHere are the functions:\n\n* `BlobFile` - like `open()` but works with remote paths too, data can be streamed to/from the remote file.  It accepts the following arguments:\n    * `streaming`:\n        * The default for `streaming` is `True` when `mode` is in `\"r\", \"rb\"` and `False` when `mode` is in `\"w\", \"wb\", \"a\", \"ab\"`.\n        * `streaming=True`:\n            * Reading is done without downloading the entire remote file.\n            * Writing is done to the remote file directly, but only in chunks of a few MB in size.  `flush()` will not cause an early write.\n            * Appending is not implemented.\n        * `streaming=False`: \n            * Reading is done by downloading the remote file to a local file during the constructor.\n            * Writing is done by uploading the file on `close()` or during destruction.\n            * Appending is done by downloading the file during construction and uploading on `close()`.\n    * `buffer_size`: number of bytes to buffer, this can potentially make reading more efficient.\n    * `cache_dir`: a directory in which to cache files for reading, only valid if `streaming=False` and `mode` is in `\"r\", \"rb\"`.   You are reponsible for cleaning up the cache directory.\n\nSome are inspired by existing `os.path` and `shutil` functions:\n\n* `copy` - copy a file from one path to another, this will do a remote copy between two remote paths on the same blob storage service\n* `exists` - returns `True` if the file or directory exists\n* `glob` - return files matching a glob-style pattern as a generator.  Globs can have [surprising performance characteristics](https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames#efficiency-consideration:-using-wildcards-over-many-objects) when used with blob storage.  Character ranges are not supported in patterns.\n* `isdir` - returns `True` if the path is a directory\n* `listdir` - list contents of a directory as a generator\n* `makedirs` - ensure that a directory and all parent directories exist\n* `remove` - remove a file\n* `rmdir` - remove an empty directory\n* `rmtree` - remove a directory tree\n* `stat` - get the size and modification time of a file\n* `walk` - walk a directory tree with a generator that yields `(dirpath, dirnames, filenames)` tuples\n* `basename` - get the final component of a path\n* `dirname` - get the path except for the final component\n* `join` - join 2 or more paths together, inserting directory separators between each component\n\nThere are a few bonus functions:\n\n* `get_url` - returns a url for a path (usable by an HTTP client without any authentication) along with the expiration for that url (or None)\n* `md5` - get the md5 hash for a path, for GCS this is often fast, but for other backends this may be slow.  On Azure, if the md5 of a file is calculated and is missing from the file, the file will be updated with the calculated md5.\n* `configure` - set global configuration options for blobfile\n    * `log_callback`: a log callback function `log(msg: string)` to use instead of printing to stdout\n    * `connection_pool_max_size`: the max size for each per-host connection pool\n\n## Paths\n\nFor Google Cloud Storage and Azure Storage directories don't really exist.  These storage systems store the files in a single flat list.  The \"/\" separators are just part of the filenames and there is no need to call the equivalent of `os.mkdir` on one of these systems.\n\n<!-- As a result, directories can be either \"implicit\" or \"explicit\".\n\n* An \"implicit\" directory would be if the file \"a/b\" exists, then we would say that the directory \"a\" exists.  If you delete \"a/b\", then that directory no longer exists because no file exists with the prefix \"a/\".\n* An \"explicit\" directory would be if the file \"a/\" exists.  All other files with the prefix \"a/\" could be deleted, and the directory \"a\" would still exist because of this dummy file. -->\n\nTo make local behavior consistent with the remote storage systems, missing local directories will be created automatically when opening a file in write mode.\n\n### Local\n\nThese are just normal paths for the current machine, e.g. `/root/hello.txt`\n\n### Google Cloud Storage\n\nGCS paths have the format `gs://<bucket>/<blob>`, you cannot perform any operations on `gs://` itself.\n\n### Azure Storage\n\nAzure Storage URLs have the format `https://<account>.blob.core.windows.net/<container>/<blob>`.  The highest you can go up the hierarchy is `https://<account>.blob.core.windows.net/<container>/`, `blobfile` cannot perform any operations on `https://<account>.blob.core.windows.net/`.\n\n## Errors\n\n* `Error` - base class for library-specific exceptions\n* `RequestFailure` - a request has failed permanently, has `message:str`, `request:Request`, and `response:urllib3.HTTPResponse` attributes.\n* The following generic exceptions are raised from some functions to make the behavior similar to the original versions: `FileNotFoundError`, `FileExistsError`, `IsADirectoryError`, `NotADirectoryError`, `OSError`, `ValueError`, `io.UnsupportedOperation`\n\n## Logging\n\n `blobfile` will keep retrying transient errors until they succeed or a permanent error is encountered (which will raise an exception).  In order to make diagnosing stalls easier, `blobfile` will log when retrying requests.\n\nTo route those log lines, use `configure(log_callback=<fn>)` to set a callback function which will be called whenever a log line should be printed.  The default callback prints to stdout with the prefix `blobfile:`.\n\nWhile `blobfile` does not use the python `logging` module, it does use other libraries which uses that module.  So if you configure the python `logging` module, you may need to change the settings to adjust logging behavior:\n\n* `urllib3`: `logging.getLogger(\"urllib3\").setLevel(logging.ERROR)`\n* `filelock`: `logging.getLogger(\"filelock\").setLevel(logging.ERROR)`\n\n## Examples\n\n### Write and read a file\n\n```py\nimport blobfile as bf\n\nwith bf.BlobFile(\"gs://my-bucket/file.name\", \"wb\") as f:\n    f.write(b\"meow\")\n\nprint(\"exists:\", bf.exists(\"gs://my-bucket/file.name\"))\n\nprint(\"contents:\", bf.BlobFile(\"gs://my-bucket/file.name\", \"rb\").read())\n```\n\n### Parallel execution\n\n```py\nimport blobfile as bf\nimport multiprocessing as mp\nimport tqdm\n\ndef check_exists(path):\n    return path, bf.exists(path)\n\ndef main():\n    filepaths = [f\"gs://my-bucket/{i}.ext\" for i in range(1000)]\n\n    with mp.Pool() as pool:\n        for filepath, exists in tqdm.tqdm(pool.imap_unordered(check_exists, filepaths), total=len(filepaths)):\n            pass\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Parallel execution with [gevent](http://www.gevent.org/index.html)\n\nThis uses coroutines instead of processes/threads so may be faster in some cases.  If you're using this, you should probably also use 1 python process per core and split your work across multiple processes.\n\n```py\nfrom gevent import monkey\nmonkey.patch_all()\n\nimport tqdm\nimport gevent.pool\nimport blobfile as bf\n\n\ndef check_exists(path):\n    return path, bf.exists(path)\n\ndef main():\n    filepaths = [f\"gs://my-bucket/{i}.ext\" for i in range(1000)]\n    pool = gevent.pool.Pool(100)\n    for filepath, exists in tqdm.tqdm(pool.imap_unordered(check_exists, filepaths), total=len(filepaths)):\n        pass\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Parallel download of a single file\n\n```py\nimport blobfile as bf\nimport concurrent.futures\nimport time\n\n\ndef _download_chunk(path, start, size):\n    with bf.BlobFile(path, \"rb\") as f:\n        f.seek(start)\n        return f.read(size)\n\n\ndef parallel_download(path, chunk_size=16 * 2**20):\n    pieces = []\n    stat = bf.stat(path)\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        start = 0\n        futures = []\n        while start < stat.size:\n            future = executor.submit(_download_chunk, path, start, chunk_size)\n            futures.append(future)\n            start += chunk_size\n        for future in futures:\n            pieces.append(future.result())\n    return b\"\".join(pieces)\n\n\ndef main():\n    contents = parallel_download(\"<path to file>\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n### Parallel copytree\n\n```py\nimport blobfile as bf\nimport concurrent.futures\nimport tqdm\n\n\ndef _perform_op(op_tuple):\n    op, src, dst = op_tuple\n    if op == \"copy\":\n        bf.copy(src, dst, overwrite=True)\n    elif op == \"mkdir\":\n        bf.makedirs(dst)\n    else:\n        raise Exception(f\"invalid op {op}\")\n\n\ndef copytree(src, dst):\n    \"\"\"\n    Copy a directory tree from one location to another\n    \"\"\"\n    if not bf.isdir(src):\n        raise NotADirectoryError(f\"The directory name is invalid: '{src}'\")\n    assert not dst.startswith(src), \"dst cannot be a subdir of src\"\n    if not src.endswith(\"/\"):\n        src += \"/\"\n    bf.makedirs(dst)\n\n    with tqdm.tqdm(desc=\"listing\") as pbar:\n        ops = []\n        # walk with topdown=False should be faster for nested directory trees\n        for src_root, dirnames, filenames in bf.walk(src, topdown=False):\n            relpath = src_root[len(src):]\n            dst_root = bf.join(dst, relpath)\n\n            if len(filenames) == 0:\n                # only make empty directories, other directories will be implicitly created by copy\n                ops.append((\"mkdir\", src_root, dst_root))\n                pbar.update(1)\n\n            # on GCS we can have a directory name that has the same name as a file\n            # if that's the case, skip it since that's too confusing\n            skip_filenames = set(dirnames)\n            for filename in filenames:\n                if filename in skip_filenames:\n                    continue\n                src_path = bf.join(src_root, filename)\n                dst_path = bf.join(dst_root, filename)\n                ops.append((\"copy\", src_path, dst_path))\n                pbar.update(1)\n\n    with concurrent.futures.ProcessPoolExecutor() as executor:\n        list(tqdm.tqdm(executor.map(_perform_op, ops), total=len(ops), desc=\"copying\"))\n\n\ndef main():\n    contents = copytree(\"<path to source>\", \"<path to destination>\")\n\n\nif __name__ == \"__main__\":\n    main()\n```\n\n## Authentication\n\n### Google Cloud Storage\n\nThe environment variable `GOOGLE_APPLICATION_CREDENTIALS` will be checked, falling back to \"default application credentials\" if they can be found.\n\n### Azure Storage\n\nThe following methods will be tried in order:\n\n1) Check the environment variable `AZURE_STORAGE_ACCOUNT_KEY` for an azure storage account key (these are per-storage account shared keys described in https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage)\n2) Check the environment variable `AZURE_APPLICATION_CREDENTIALS` which should point to JSON credentials for a service principal output by the command `az ad sp create-for-rbac --name <name>`\n3) Check the environment variables `AZURE_CLIENT_ID`, `AZURE_CLIENT_SECRET`, `AZURE_TENANT_ID` corresponding to a service principal described in the previous step but without the JSON file.\n4) Use credentials from the `az` command line tool if they can be found.\n\n## Changes\n\nSee [CHANGES.md](CHANGES.md)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cshesse/blobfile", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "blobfile", "package_url": "https://pypi.org/project/blobfile/", "platform": "", "project_url": "https://pypi.org/project/blobfile/", "project_urls": {"Homepage": "https://github.com/cshesse/blobfile"}, "release_url": "https://pypi.org/project/blobfile/0.16.8/", "requires_dist": ["pycryptodomex (~=3.8)", "urllib3 (~=1.25)", "xmltodict (~=0.12.0)", "filelock (~=3.0)", "typing-extensions (>=3.7.4.1)", "pytest ; extra == 'dev'", "tensorflow ; extra == 'dev'", "imageio ; extra == 'dev'", "imageio-ffmpeg ; extra == 'dev'", "azure-cli ; extra == 'dev'", "google-cloud-storage ; extra == 'dev'"], "requires_python": ">=3.7.0", "summary": "Read GCS and local paths with the same interface, clone of tensorflow.io.gfile", "version": "0.16.8", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>blobfile</h1>\n<p>This is a standalone clone of TensorFlow's <a href=\"https://www.tensorflow.org/api_docs/python/tf/io/gfile/GFile\" rel=\"nofollow\"><code>gfile</code></a>, supporting local paths, <code>gs://</code> (Google Cloud Storage) paths, and Azure Storage paths.</p>\n<p>The main function is <code>BlobFile</code>, a replacement for <code>GFile</code>.  There are also a few additional functions, <code>basename</code>, <code>dirname</code>, and <code>join</code>, which mostly do the same thing as their <code>os.path</code> namesakes, only they also support <code>gs://</code> paths and Azure Storage paths.</p>\n<h2>Installation</h2>\n<pre>pip install blobfile\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n\n<span class=\"k\">with</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">BlobFile</span><span class=\"p\">(</span><span class=\"s2\">\"gs://my-bucket-name/cats\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">w</span><span class=\"p\">:</span>\n    <span class=\"n\">w</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"meow!\"</span><span class=\"p\">)</span>\n</pre>\n<p>Here are the functions:</p>\n<ul>\n<li><code>BlobFile</code> - like <code>open()</code> but works with remote paths too, data can be streamed to/from the remote file.  It accepts the following arguments:\n<ul>\n<li><code>streaming</code>:\n<ul>\n<li>The default for <code>streaming</code> is <code>True</code> when <code>mode</code> is in <code>\"r\", \"rb\"</code> and <code>False</code> when <code>mode</code> is in <code>\"w\", \"wb\", \"a\", \"ab\"</code>.</li>\n<li><code>streaming=True</code>:\n<ul>\n<li>Reading is done without downloading the entire remote file.</li>\n<li>Writing is done to the remote file directly, but only in chunks of a few MB in size.  <code>flush()</code> will not cause an early write.</li>\n<li>Appending is not implemented.</li>\n</ul>\n</li>\n<li><code>streaming=False</code>:\n<ul>\n<li>Reading is done by downloading the remote file to a local file during the constructor.</li>\n<li>Writing is done by uploading the file on <code>close()</code> or during destruction.</li>\n<li>Appending is done by downloading the file during construction and uploading on <code>close()</code>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code>buffer_size</code>: number of bytes to buffer, this can potentially make reading more efficient.</li>\n<li><code>cache_dir</code>: a directory in which to cache files for reading, only valid if <code>streaming=False</code> and <code>mode</code> is in <code>\"r\", \"rb\"</code>.   You are reponsible for cleaning up the cache directory.</li>\n</ul>\n</li>\n</ul>\n<p>Some are inspired by existing <code>os.path</code> and <code>shutil</code> functions:</p>\n<ul>\n<li><code>copy</code> - copy a file from one path to another, this will do a remote copy between two remote paths on the same blob storage service</li>\n<li><code>exists</code> - returns <code>True</code> if the file or directory exists</li>\n<li><code>glob</code> - return files matching a glob-style pattern as a generator.  Globs can have <a href=\"https://cloud.google.com/storage/docs/gsutil/addlhelp/WildcardNames#efficiency-consideration:-using-wildcards-over-many-objects\" rel=\"nofollow\">surprising performance characteristics</a> when used with blob storage.  Character ranges are not supported in patterns.</li>\n<li><code>isdir</code> - returns <code>True</code> if the path is a directory</li>\n<li><code>listdir</code> - list contents of a directory as a generator</li>\n<li><code>makedirs</code> - ensure that a directory and all parent directories exist</li>\n<li><code>remove</code> - remove a file</li>\n<li><code>rmdir</code> - remove an empty directory</li>\n<li><code>rmtree</code> - remove a directory tree</li>\n<li><code>stat</code> - get the size and modification time of a file</li>\n<li><code>walk</code> - walk a directory tree with a generator that yields <code>(dirpath, dirnames, filenames)</code> tuples</li>\n<li><code>basename</code> - get the final component of a path</li>\n<li><code>dirname</code> - get the path except for the final component</li>\n<li><code>join</code> - join 2 or more paths together, inserting directory separators between each component</li>\n</ul>\n<p>There are a few bonus functions:</p>\n<ul>\n<li><code>get_url</code> - returns a url for a path (usable by an HTTP client without any authentication) along with the expiration for that url (or None)</li>\n<li><code>md5</code> - get the md5 hash for a path, for GCS this is often fast, but for other backends this may be slow.  On Azure, if the md5 of a file is calculated and is missing from the file, the file will be updated with the calculated md5.</li>\n<li><code>configure</code> - set global configuration options for blobfile\n<ul>\n<li><code>log_callback</code>: a log callback function <code>log(msg: string)</code> to use instead of printing to stdout</li>\n<li><code>connection_pool_max_size</code>: the max size for each per-host connection pool</li>\n</ul>\n</li>\n</ul>\n<h2>Paths</h2>\n<p>For Google Cloud Storage and Azure Storage directories don't really exist.  These storage systems store the files in a single flat list.  The \"/\" separators are just part of the filenames and there is no need to call the equivalent of <code>os.mkdir</code> on one of these systems.</p>\n\n<p>To make local behavior consistent with the remote storage systems, missing local directories will be created automatically when opening a file in write mode.</p>\n<h3>Local</h3>\n<p>These are just normal paths for the current machine, e.g. <code>/root/hello.txt</code></p>\n<h3>Google Cloud Storage</h3>\n<p>GCS paths have the format <code>gs://&lt;bucket&gt;/&lt;blob&gt;</code>, you cannot perform any operations on <code>gs://</code> itself.</p>\n<h3>Azure Storage</h3>\n<p>Azure Storage URLs have the format <code>https://&lt;account&gt;.blob.core.windows.net/&lt;container&gt;/&lt;blob&gt;</code>.  The highest you can go up the hierarchy is <code>https://&lt;account&gt;.blob.core.windows.net/&lt;container&gt;/</code>, <code>blobfile</code> cannot perform any operations on <code>https://&lt;account&gt;.blob.core.windows.net/</code>.</p>\n<h2>Errors</h2>\n<ul>\n<li><code>Error</code> - base class for library-specific exceptions</li>\n<li><code>RequestFailure</code> - a request has failed permanently, has <code>message:str</code>, <code>request:Request</code>, and <code>response:urllib3.HTTPResponse</code> attributes.</li>\n<li>The following generic exceptions are raised from some functions to make the behavior similar to the original versions: <code>FileNotFoundError</code>, <code>FileExistsError</code>, <code>IsADirectoryError</code>, <code>NotADirectoryError</code>, <code>OSError</code>, <code>ValueError</code>, <code>io.UnsupportedOperation</code></li>\n</ul>\n<h2>Logging</h2>\n<p><code>blobfile</code> will keep retrying transient errors until they succeed or a permanent error is encountered (which will raise an exception).  In order to make diagnosing stalls easier, <code>blobfile</code> will log when retrying requests.</p>\n<p>To route those log lines, use <code>configure(log_callback=&lt;fn&gt;)</code> to set a callback function which will be called whenever a log line should be printed.  The default callback prints to stdout with the prefix <code>blobfile:</code>.</p>\n<p>While <code>blobfile</code> does not use the python <code>logging</code> module, it does use other libraries which uses that module.  So if you configure the python <code>logging</code> module, you may need to change the settings to adjust logging behavior:</p>\n<ul>\n<li><code>urllib3</code>: <code>logging.getLogger(\"urllib3\").setLevel(logging.ERROR)</code></li>\n<li><code>filelock</code>: <code>logging.getLogger(\"filelock\").setLevel(logging.ERROR)</code></li>\n</ul>\n<h2>Examples</h2>\n<h3>Write and read a file</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n\n<span class=\"k\">with</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">BlobFile</span><span class=\"p\">(</span><span class=\"s2\">\"gs://my-bucket/file.name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"meow\"</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"exists:\"</span><span class=\"p\">,</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"s2\">\"gs://my-bucket/file.name\"</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"contents:\"</span><span class=\"p\">,</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">BlobFile</span><span class=\"p\">(</span><span class=\"s2\">\"gs://my-bucket/file.name\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span>\n</pre>\n<h3>Parallel execution</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">multiprocessing</span> <span class=\"k\">as</span> <span class=\"nn\">mp</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">check_exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">\"gs://my-bucket/</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">.ext\"</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)]</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">mp</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">pool</span><span class=\"p\">:</span>\n        <span class=\"k\">for</span> <span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">exists</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">imap_unordered</span><span class=\"p\">(</span><span class=\"n\">check_exists</span><span class=\"p\">,</span> <span class=\"n\">filepaths</span><span class=\"p\">),</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">)):</span>\n            <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h3>Parallel execution with <a href=\"http://www.gevent.org/index.html\" rel=\"nofollow\">gevent</a></h3>\n<p>This uses coroutines instead of processes/threads so may be faster in some cases.  If you're using this, you should probably also use 1 python process per core and split your work across multiple processes.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gevent</span> <span class=\"kn\">import</span> <span class=\"n\">monkey</span>\n<span class=\"n\">monkey</span><span class=\"o\">.</span><span class=\"n\">patch_all</span><span class=\"p\">()</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n<span class=\"kn\">import</span> <span class=\"nn\">gevent.pool</span>\n<span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">check_exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">filepaths</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"sa\">f</span><span class=\"s2\">\"gs://my-bucket/</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s2\">.ext\"</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)]</span>\n    <span class=\"n\">pool</span> <span class=\"o\">=</span> <span class=\"n\">gevent</span><span class=\"o\">.</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">Pool</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">filepath</span><span class=\"p\">,</span> <span class=\"n\">exists</span> <span class=\"ow\">in</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">pool</span><span class=\"o\">.</span><span class=\"n\">imap_unordered</span><span class=\"p\">(</span><span class=\"n\">check_exists</span><span class=\"p\">,</span> <span class=\"n\">filepaths</span><span class=\"p\">),</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filepaths</span><span class=\"p\">)):</span>\n        <span class=\"k\">pass</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h3>Parallel download of a single file</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">concurrent.futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_download_chunk</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">BlobFile</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">parallel_download</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">16</span> <span class=\"o\">*</span> <span class=\"mi\">2</span><span class=\"o\">**</span><span class=\"mi\">20</span><span class=\"p\">):</span>\n    <span class=\"n\">pieces</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"n\">stat</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">stat</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n        <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">while</span> <span class=\"n\">start</span> <span class=\"o\">&lt;</span> <span class=\"n\">stat</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">:</span>\n            <span class=\"n\">future</span> <span class=\"o\">=</span> <span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">_download_chunk</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">chunk_size</span><span class=\"p\">)</span>\n            <span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"p\">)</span>\n            <span class=\"n\">start</span> <span class=\"o\">+=</span> <span class=\"n\">chunk_size</span>\n        <span class=\"k\">for</span> <span class=\"n\">future</span> <span class=\"ow\">in</span> <span class=\"n\">futures</span><span class=\"p\">:</span>\n            <span class=\"n\">pieces</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"sa\">b</span><span class=\"s2\">\"\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">pieces</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">parallel_download</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;path to file&gt;\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h3>Parallel copytree</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">blobfile</span> <span class=\"k\">as</span> <span class=\"nn\">bf</span>\n<span class=\"kn\">import</span> <span class=\"nn\">concurrent.futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">tqdm</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_perform_op</span><span class=\"p\">(</span><span class=\"n\">op_tuple</span><span class=\"p\">):</span>\n    <span class=\"n\">op</span><span class=\"p\">,</span> <span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span> <span class=\"o\">=</span> <span class=\"n\">op_tuple</span>\n    <span class=\"k\">if</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"s2\">\"copy\"</span><span class=\"p\">:</span>\n        <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">overwrite</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">elif</span> <span class=\"n\">op</span> <span class=\"o\">==</span> <span class=\"s2\">\"mkdir\"</span><span class=\"p\">:</span>\n        <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">Exception</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"invalid op </span><span class=\"si\">{</span><span class=\"n\">op</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">copytree</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dst</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Copy a directory tree from one location to another</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">isdir</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">):</span>\n        <span class=\"k\">raise</span> <span class=\"ne\">NotADirectoryError</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"The directory name is invalid: '</span><span class=\"si\">{</span><span class=\"n\">src</span><span class=\"si\">}</span><span class=\"s2\">'\"</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"ow\">not</span> <span class=\"n\">dst</span><span class=\"o\">.</span><span class=\"n\">startswith</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">),</span> <span class=\"s2\">\"dst cannot be a subdir of src\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">src</span><span class=\"o\">.</span><span class=\"n\">endswith</span><span class=\"p\">(</span><span class=\"s2\">\"/\"</span><span class=\"p\">):</span>\n        <span class=\"n\">src</span> <span class=\"o\">+=</span> <span class=\"s2\">\"/\"</span>\n    <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"listing\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">pbar</span><span class=\"p\">:</span>\n        <span class=\"n\">ops</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"c1\"># walk with topdown=False should be faster for nested directory trees</span>\n        <span class=\"k\">for</span> <span class=\"n\">src_root</span><span class=\"p\">,</span> <span class=\"n\">dirnames</span><span class=\"p\">,</span> <span class=\"n\">filenames</span> <span class=\"ow\">in</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">walk</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">topdown</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n            <span class=\"n\">relpath</span> <span class=\"o\">=</span> <span class=\"n\">src_root</span><span class=\"p\">[</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">):]</span>\n            <span class=\"n\">dst_root</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dst</span><span class=\"p\">,</span> <span class=\"n\">relpath</span><span class=\"p\">)</span>\n\n            <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">filenames</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n                <span class=\"c1\"># only make empty directories, other directories will be implicitly created by copy</span>\n                <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">\"mkdir\"</span><span class=\"p\">,</span> <span class=\"n\">src_root</span><span class=\"p\">,</span> <span class=\"n\">dst_root</span><span class=\"p\">))</span>\n                <span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n            <span class=\"c1\"># on GCS we can have a directory name that has the same name as a file</span>\n            <span class=\"c1\"># if that's the case, skip it since that's too confusing</span>\n            <span class=\"n\">skip_filenames</span> <span class=\"o\">=</span> <span class=\"nb\">set</span><span class=\"p\">(</span><span class=\"n\">dirnames</span><span class=\"p\">)</span>\n            <span class=\"k\">for</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">filenames</span><span class=\"p\">:</span>\n                <span class=\"k\">if</span> <span class=\"n\">filename</span> <span class=\"ow\">in</span> <span class=\"n\">skip_filenames</span><span class=\"p\">:</span>\n                    <span class=\"k\">continue</span>\n                <span class=\"n\">src_path</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">src_root</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n                <span class=\"n\">dst_path</span> <span class=\"o\">=</span> <span class=\"n\">bf</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">dst_root</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">)</span>\n                <span class=\"n\">ops</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"s2\">\"copy\"</span><span class=\"p\">,</span> <span class=\"n\">src_path</span><span class=\"p\">,</span> <span class=\"n\">dst_path</span><span class=\"p\">))</span>\n                <span class=\"n\">pbar</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ProcessPoolExecutor</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n        <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">tqdm</span><span class=\"o\">.</span><span class=\"n\">tqdm</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">_perform_op</span><span class=\"p\">,</span> <span class=\"n\">ops</span><span class=\"p\">),</span> <span class=\"n\">total</span><span class=\"o\">=</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">ops</span><span class=\"p\">),</span> <span class=\"n\">desc</span><span class=\"o\">=</span><span class=\"s2\">\"copying\"</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">copytree</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;path to source&gt;\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;path to destination&gt;\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>Authentication</h2>\n<h3>Google Cloud Storage</h3>\n<p>The environment variable <code>GOOGLE_APPLICATION_CREDENTIALS</code> will be checked, falling back to \"default application credentials\" if they can be found.</p>\n<h3>Azure Storage</h3>\n<p>The following methods will be tried in order:</p>\n<ol>\n<li>Check the environment variable <code>AZURE_STORAGE_ACCOUNT_KEY</code> for an azure storage account key (these are per-storage account shared keys described in <a href=\"https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage\" rel=\"nofollow\">https://docs.microsoft.com/en-us/azure/storage/common/storage-account-keys-manage</a>)</li>\n<li>Check the environment variable <code>AZURE_APPLICATION_CREDENTIALS</code> which should point to JSON credentials for a service principal output by the command <code>az ad sp create-for-rbac --name &lt;name&gt;</code></li>\n<li>Check the environment variables <code>AZURE_CLIENT_ID</code>, <code>AZURE_CLIENT_SECRET</code>, <code>AZURE_TENANT_ID</code> corresponding to a service principal described in the previous step but without the JSON file.</li>\n<li>Use credentials from the <code>az</code> command line tool if they can be found.</li>\n</ol>\n<h2>Changes</h2>\n<p>See <a href=\"CHANGES.md\" rel=\"nofollow\">CHANGES.md</a></p>\n\n          </div>"}, "last_serial": 7169414, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ab6c8dc015350a4c3a4519207ef668f8", "sha256": "26ae8999460a5df30f977ee41c6fed8267e8d9ace40d680bdde4835bf704372d"}, "downloads": -1, "filename": "blobfile-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6c8dc015350a4c3a4519207ef668f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10666, "upload_time": "2019-06-24T06:35:55", "upload_time_iso_8601": "2019-06-24T06:35:55.327849Z", "url": "https://files.pythonhosted.org/packages/cd/dd/5acab23e92ff01dd6f6193e071abf932d4da1336ae70c4bd95429ad01bf5/blobfile-0.1-py3-none-any.whl", "yanked": false}], "0.10.0": [{"comment_text": "", "digests": {"md5": "e8ea61e795c6d988c4d53214b046852a", "sha256": "82057cb3205e5f4763cba37d81058aadabc568affc44322833d7646c4ea49d7e"}, "downloads": -1, "filename": "blobfile-0.10.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e8ea61e795c6d988c4d53214b046852a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 30308, "upload_time": "2019-12-07T05:35:13", "upload_time_iso_8601": "2019-12-07T05:35:13.641376Z", "url": "https://files.pythonhosted.org/packages/f2/3e/c2a1649e23fa951add38fc91deae5629718de264a4046d7e28f1925e9ea3/blobfile-0.10.0-py3-none-any.whl", "yanked": false}], "0.10.1": [{"comment_text": "", "digests": {"md5": "69e29218fe2f91f0d0ca6165f188278e", "sha256": "d6e26c06c224506bf8e5fea30fe04771d3c3ade6d1b1e87f354395469031f4f5"}, "downloads": -1, "filename": "blobfile-0.10.1-py3-none-any.whl", "has_sig": false, "md5_digest": "69e29218fe2f91f0d0ca6165f188278e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 30886, "upload_time": "2019-12-14T05:39:00", "upload_time_iso_8601": "2019-12-14T05:39:00.407679Z", "url": "https://files.pythonhosted.org/packages/c6/33/c5b18de985118b166137fa746c4b24ac9a29e6365ec4e4d8b8962a54b5d0/blobfile-0.10.1-py3-none-any.whl", "yanked": false}], "0.10.2": [{"comment_text": "", "digests": {"md5": "88f426141a952bb78e5346bd7fbdfc59", "sha256": "d1193ed90ad1babf042d5cb3ec9c28fc4dea5ca4f25e90e4eb69ccaa2f23e396"}, "downloads": -1, "filename": "blobfile-0.10.2-py3-none-any.whl", "has_sig": false, "md5_digest": "88f426141a952bb78e5346bd7fbdfc59", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 31343, "upload_time": "2020-01-30T07:03:47", "upload_time_iso_8601": "2020-01-30T07:03:47.061515Z", "url": "https://files.pythonhosted.org/packages/17/91/c3a22d06700e6f6a61e7d60a17d37d2885f18c2d7f745829af6bced5debe/blobfile-0.10.2-py3-none-any.whl", "yanked": false}], "0.11.0": [{"comment_text": "", "digests": {"md5": "339b19aa53db0c5c8f1fea3fb54d41d6", "sha256": "ff3001473f8ad526fc41740348a468865dd681cbe70793c9a28a7aa611529de9"}, "downloads": -1, "filename": "blobfile-0.11.0-py3-none-any.whl", "has_sig": false, "md5_digest": "339b19aa53db0c5c8f1fea3fb54d41d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 32968, "upload_time": "2020-01-31T08:32:47", "upload_time_iso_8601": "2020-01-31T08:32:47.678318Z", "url": "https://files.pythonhosted.org/packages/07/1c/31a8aa2459aae179dc1db895e02b395a110393d4ba0a10ca84c1cbfcff56/blobfile-0.11.0-py3-none-any.whl", "yanked": false}], "0.12.0": [{"comment_text": "", "digests": {"md5": "d4dd791f994c12660b57ee7d1f34db84", "sha256": "73b78048889a5900c13b1551e087506d0b87754ada078e84ed516d476d8ad81c"}, "downloads": -1, "filename": "blobfile-0.12.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d4dd791f994c12660b57ee7d1f34db84", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 33968, "upload_time": "2020-02-01T21:25:01", "upload_time_iso_8601": "2020-02-01T21:25:01.883793Z", "url": "https://files.pythonhosted.org/packages/46/a7/30ae8e3b0c4cc2c2a2706e3d160c91b22e08e1b5a338fa947cbe2e763228/blobfile-0.12.0-py3-none-any.whl", "yanked": false}], "0.14.0": [{"comment_text": "", "digests": {"md5": "99d9cc553d5d99e6e56038414f97c4db", "sha256": "b6c8a10797a1295ce1734be551446250e22943e5c7f02a01321277dbf20e17a8"}, "downloads": -1, "filename": "blobfile-0.14.0-py3-none-any.whl", "has_sig": false, "md5_digest": "99d9cc553d5d99e6e56038414f97c4db", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 37063, "upload_time": "2020-02-12T07:42:28", "upload_time_iso_8601": "2020-02-12T07:42:28.796584Z", "url": "https://files.pythonhosted.org/packages/6c/04/d4afa615140c4a902ff9bfedbb9f9198d716e789c64bea01dbc98f7d71a9/blobfile-0.14.0-py3-none-any.whl", "yanked": false}], "0.15.0": [{"comment_text": "", "digests": {"md5": "d76e970a03e87fca56e27749006d0f94", "sha256": "5a05ba488a0ab9246ed3e0e462c4bd961bb18293d37564dce37dac19ed26d876"}, "downloads": -1, "filename": "blobfile-0.15.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d76e970a03e87fca56e27749006d0f94", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 38219, "upload_time": "2020-03-02T07:43:23", "upload_time_iso_8601": "2020-03-02T07:43:23.196020Z", "url": "https://files.pythonhosted.org/packages/7b/ef/105f955149722a7a8bcf63f7bc49973ef065c07a20072408bd156521dfbe/blobfile-0.15.0-py3-none-any.whl", "yanked": false}], "0.16.0": [{"comment_text": "", "digests": {"md5": "3d1725045cd4a291a1e4a27abbf085fd", "sha256": "a611fa6a7c6655a2456ef1433ae268c9d13b479f29ed5fa8ed59b18b0acf1f1d"}, "downloads": -1, "filename": "blobfile-0.16.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3d1725045cd4a291a1e4a27abbf085fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 38362, "upload_time": "2020-03-05T05:24:13", "upload_time_iso_8601": "2020-03-05T05:24:13.202483Z", "url": "https://files.pythonhosted.org/packages/a1/36/be2f5139b2726af77a04c3abe99a1e83acd363080613ab27b51364f05b97/blobfile-0.16.0-py3-none-any.whl", "yanked": false}], "0.16.1": [{"comment_text": "", "digests": {"md5": "2c2f98fe6f3ca5ca16bd6a24af2b0ed8", "sha256": "8cf008b8066246805d9a8c41992867cc83d90e9d9cfe5c61a741fcc3de560c83"}, "downloads": -1, "filename": "blobfile-0.16.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2c2f98fe6f3ca5ca16bd6a24af2b0ed8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 38533, "upload_time": "2020-03-09T17:36:42", "upload_time_iso_8601": "2020-03-09T17:36:42.222463Z", "url": "https://files.pythonhosted.org/packages/34/c7/201917494744814a270aa9bc31d8b8a1de1c2f5ccd7e4e5e348e83c74097/blobfile-0.16.1-py3-none-any.whl", "yanked": false}], "0.16.2": [{"comment_text": "", "digests": {"md5": "778a6a7c0f9c7d0167a4ee5440018bab", "sha256": "9ac5292fd70a989472556277de1d69dad02698886defa9b189a4c092b88fff7c"}, "downloads": -1, "filename": "blobfile-0.16.2-py3-none-any.whl", "has_sig": false, "md5_digest": "778a6a7c0f9c7d0167a4ee5440018bab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 38906, "upload_time": "2020-03-17T22:36:45", "upload_time_iso_8601": "2020-03-17T22:36:45.610808Z", "url": "https://files.pythonhosted.org/packages/6c/6c/cea7e0248382b556d7e65c2b60d201275f1c9e5b4a539bca8b2d24f5a2d7/blobfile-0.16.2-py3-none-any.whl", "yanked": false}], "0.16.3": [{"comment_text": "", "digests": {"md5": "d76642ce10d7a8a841abcedbf321d7a5", "sha256": "47f6d88835ae616d7a024e001c3eb2f471c37f81b5b473d77ea8a2e2929e8155"}, "downloads": -1, "filename": "blobfile-0.16.3-py3-none-any.whl", "has_sig": false, "md5_digest": "d76642ce10d7a8a841abcedbf321d7a5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 39908, "upload_time": "2020-03-19T07:26:36", "upload_time_iso_8601": "2020-03-19T07:26:36.391900Z", "url": "https://files.pythonhosted.org/packages/4c/f1/44d7c2b13a085c4583e8f869aa29f53c42bc0d7c4f5ed2e3ce4a8c481ae7/blobfile-0.16.3-py3-none-any.whl", "yanked": false}], "0.16.4": [{"comment_text": "", "digests": {"md5": "77c9266905baf244ea75a58dd08c4772", "sha256": "b2cc62b73e78a891fa4c44d9a4ae27768e940a3f78340b10bdb2127afcfb4297"}, "downloads": -1, "filename": "blobfile-0.16.4-py3-none-any.whl", "has_sig": false, "md5_digest": "77c9266905baf244ea75a58dd08c4772", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 40464, "upload_time": "2020-04-07T06:38:56", "upload_time_iso_8601": "2020-04-07T06:38:56.755956Z", "url": "https://files.pythonhosted.org/packages/65/70/68a46204c11dacba5c4e93f437591080f7419d98253f2227d31e289d1b9e/blobfile-0.16.4-py3-none-any.whl", "yanked": false}], "0.16.5": [{"comment_text": "", "digests": {"md5": "81b46e44c57636239cfeef1947db6d2d", "sha256": "620bd5f1c97f4f8c55a080f46133fe4a376531b4b6edfffde50c0d01f1fd3a2f"}, "downloads": -1, "filename": "blobfile-0.16.5-py3-none-any.whl", "has_sig": false, "md5_digest": "81b46e44c57636239cfeef1947db6d2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 41566, "upload_time": "2020-04-11T23:16:59", "upload_time_iso_8601": "2020-04-11T23:16:59.440045Z", "url": "https://files.pythonhosted.org/packages/b3/1e/7c7c6d3a89f021f22d8bd17eba3bd5315f60f2755f93d470a4f9e43d6b5d/blobfile-0.16.5-py3-none-any.whl", "yanked": false}], "0.16.6": [{"comment_text": "", "digests": {"md5": "f86d0bb3bc14b74e76024bf5269b5fe6", "sha256": "416d5e3acb366d606a3c09a0d6bb9a442400a45b960bdefe7987b5cba9d90875"}, "downloads": -1, "filename": "blobfile-0.16.6-py3-none-any.whl", "has_sig": false, "md5_digest": "f86d0bb3bc14b74e76024bf5269b5fe6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 43070, "upload_time": "2020-04-24T06:24:04", "upload_time_iso_8601": "2020-04-24T06:24:04.040119Z", "url": "https://files.pythonhosted.org/packages/19/84/cb8e0756f8a314cfc80d14dc54e5cfe531ba91aa092272755559cdf9b874/blobfile-0.16.6-py3-none-any.whl", "yanked": false}], "0.16.7": [{"comment_text": "", "digests": {"md5": "c7b7f9b774acdc00e4dc285965efa7e0", "sha256": "98e912fffda4ed79d8152fe7f358f19e945a153692972c9bc330b2862b77c617"}, "downloads": -1, "filename": "blobfile-0.16.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c7b7f9b774acdc00e4dc285965efa7e0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 43383, "upload_time": "2020-04-28T05:56:27", "upload_time_iso_8601": "2020-04-28T05:56:27.670075Z", "url": "https://files.pythonhosted.org/packages/03/a7/60758b573f084ed0347dc9362dc7a190830aa91fc0e3d8f7df7e20e167ac/blobfile-0.16.7-py3-none-any.whl", "yanked": false}], "0.16.8": [{"comment_text": "", "digests": {"md5": "19ca9cf270ab162ea1dcc5e1260cba58", "sha256": "320ee17aa2db18423e19194544d738f36c1e73f71d0e0f8460beb718cd6d3474"}, "downloads": -1, "filename": "blobfile-0.16.8-py3-none-any.whl", "has_sig": false, "md5_digest": "19ca9cf270ab162ea1dcc5e1260cba58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 43658, "upload_time": "2020-05-05T04:34:55", "upload_time_iso_8601": "2020-05-05T04:34:55.390622Z", "url": "https://files.pythonhosted.org/packages/9f/0c/0e95dd5ab75e1cf809f96614ef570ceac68be053fb11d9090f1e4faa1a91/blobfile-0.16.8-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "093b02f54dea8879c0d28a23f0ca9038", "sha256": "0dd574a96545e159a7fb987d8401fcfe92496bd4745de41eafc0633068231bf2"}, "downloads": -1, "filename": "blobfile-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "093b02f54dea8879c0d28a23f0ca9038", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11746, "upload_time": "2019-06-25T03:19:06", "upload_time_iso_8601": "2019-06-25T03:19:06.841925Z", "url": "https://files.pythonhosted.org/packages/be/0d/99cf2dbe86f3e76189dc477ad6129763e25fe043eaedc9deed66b67fb324/blobfile-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "5f1d5fea1a6c4f3655cd0c4c0e46dc92", "sha256": "7bbd8dd1afe89372fa99c310959f4103617ab5e7d3220a95c4995ba5b20c43cc"}, "downloads": -1, "filename": "blobfile-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f1d5fea1a6c4f3655cd0c4c0e46dc92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11757, "upload_time": "2019-06-26T02:22:05", "upload_time_iso_8601": "2019-06-26T02:22:05.325307Z", "url": "https://files.pythonhosted.org/packages/23/0f/fbccaebd764fa41a2a5236dd36573c2a655cd5ccc943c22c32ac2ad98833/blobfile-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0c5c85e05a75919397122a62a158e34c", "sha256": "3d929689b862885802c0c186f012f47d989fa2d67135828f6ce2734958aa929b"}, "downloads": -1, "filename": "blobfile-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0c5c85e05a75919397122a62a158e34c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11824, "upload_time": "2019-07-01T03:17:42", "upload_time_iso_8601": "2019-07-01T03:17:42.605837Z", "url": "https://files.pythonhosted.org/packages/85/21/e7f7248d0bfdff620c93e1c4e3f1d86bc1be407652851b12ebb58755d890/blobfile-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "bf02f24565c1909e81f762a2032c407b", "sha256": "29a7bf591374a60ec1d4380d977666ff47c5e2918723531562c9d489033cd844"}, "downloads": -1, "filename": "blobfile-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bf02f24565c1909e81f762a2032c407b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12078, "upload_time": "2019-07-11T03:46:08", "upload_time_iso_8601": "2019-07-11T03:46:08.814381Z", "url": "https://files.pythonhosted.org/packages/b4/4e/58053b4c6068da64e57d95f1fe7b57f97676742944024222747b120ccd38/blobfile-0.2.3-py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d26da6439349926ae360b0ed835ae7c", "sha256": "91fd97c934055faa5c1669d1db8cf4d376ad53c6fd5aec605e7cb92c11d492d6"}, "downloads": -1, "filename": "blobfile-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2d26da6439349926ae360b0ed835ae7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16214, "upload_time": "2019-09-08T07:14:10", "upload_time_iso_8601": "2019-09-08T07:14:10.928408Z", "url": "https://files.pythonhosted.org/packages/51/60/aa2d41d4f3841c2bf066cfe73ab9d606a4f4d8cfc2f1454274102bbd9fba/blobfile-0.3.0-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1ec378aa0c004df7aec26784a6c95219", "sha256": "bdad650b9b8b92fad1f96e69a6497292e2f91ca86899b1a5a6e17c21dee22fc5"}, "downloads": -1, "filename": "blobfile-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1ec378aa0c004df7aec26784a6c95219", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16198, "upload_time": "2019-09-10T07:48:05", "upload_time_iso_8601": "2019-09-10T07:48:05.761566Z", "url": "https://files.pythonhosted.org/packages/26/af/4c67080d942c069aaee0167668c79ac834b93c3f179bfa79a6eb7c725b88/blobfile-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "ed0297dff9c65fe04f287b0be69e1882", "sha256": "9e284bd92d6d96661ef8450d57a4d52507aa390d65b01e6b9503e4b969da99ed"}, "downloads": -1, "filename": "blobfile-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ed0297dff9c65fe04f287b0be69e1882", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20917, "upload_time": "2019-10-19T05:36:56", "upload_time_iso_8601": "2019-10-19T05:36:56.374778Z", "url": "https://files.pythonhosted.org/packages/89/fc/d8e0872ff8aec8d88e06eef165e4fbad249928290249eb15d190976b6f36/blobfile-0.3.2-py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "deed69bd7d4adc313e7d06f2a3994c4d", "sha256": "f1bd607d1437fd43efaba45d51cb69ea553d4733d97f3249071c072dc5f8a5b8"}, "downloads": -1, "filename": "blobfile-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "deed69bd7d4adc313e7d06f2a3994c4d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20954, "upload_time": "2019-10-20T07:38:11", "upload_time_iso_8601": "2019-10-20T07:38:11.586127Z", "url": "https://files.pythonhosted.org/packages/f5/a1/f7fb95112a22c3b57710b8b9453ca96a67559a86f59c2c4335c36af1b81f/blobfile-0.3.3-py3-none-any.whl", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "778402a2ce3ac23cdfaa827bac1cf642", "sha256": "96710d7d5445e01874a03a0f0e9b54a3847382f4b6472367f916e9b802f9f793"}, "downloads": -1, "filename": "blobfile-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "778402a2ce3ac23cdfaa827bac1cf642", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21097, "upload_time": "2019-10-23T03:43:41", "upload_time_iso_8601": "2019-10-23T03:43:41.932243Z", "url": "https://files.pythonhosted.org/packages/fe/b7/e3fbe31ea75e6e5a95cbffda2c3db96936bb3c91334cfbc1979e8154de7d/blobfile-0.4.0-py3-none-any.whl", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "4a372f4f2ca589f3e5396c7bab40db2d", "sha256": "1ca4de9132f9b147b15120ea8f803c37ffa525f0c8fec13e0cd42d8bfdb555a1"}, "downloads": -1, "filename": "blobfile-0.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a372f4f2ca589f3e5396c7bab40db2d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21586, "upload_time": "2019-10-24T05:49:00", "upload_time_iso_8601": "2019-10-24T05:49:00.176866Z", "url": "https://files.pythonhosted.org/packages/71/ed/db440f444e53c4d15f4c5d181409ff362ecf614dd248f308e5e6d64d7df8/blobfile-0.4.1-py3-none-any.whl", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "a1b8a10368140e3154afffa8148edf3c", "sha256": "f2ed714329565be0068d23d728f20048002b75317494c48d79ad1d21835af4ad"}, "downloads": -1, "filename": "blobfile-0.4.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a1b8a10368140e3154afffa8148edf3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21434, "upload_time": "2019-10-26T19:33:37", "upload_time_iso_8601": "2019-10-26T19:33:37.858578Z", "url": "https://files.pythonhosted.org/packages/52/a1/4623c912019d7b0b9e4e8546a03411c3a6900da64637820683482abe53c9/blobfile-0.4.2-py3-none-any.whl", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "a82f3d8b5aeefa38d173f771be653f4c", "sha256": "fb2840240e645c8bb3bf21da819854ec3cc6bc9c7da55d0157f827a2e85ad97c"}, "downloads": -1, "filename": "blobfile-0.4.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a82f3d8b5aeefa38d173f771be653f4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21572, "upload_time": "2019-10-27T19:21:43", "upload_time_iso_8601": "2019-10-27T19:21:43.016996Z", "url": "https://files.pythonhosted.org/packages/05/f6/808bcfbe8459272415bba01e79c726b72d7eab660788d1e49f462d405920/blobfile-0.4.3-py3-none-any.whl", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "df5477c819d4ca6a6f3dca392a3b01a2", "sha256": "aedbd26e978a8501b19123baeeff11652f1c76020f6e1aeb86ff940b8f1dc702"}, "downloads": -1, "filename": "blobfile-0.4.4-py3-none-any.whl", "has_sig": false, "md5_digest": "df5477c819d4ca6a6f3dca392a3b01a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21789, "upload_time": "2019-10-27T20:50:22", "upload_time_iso_8601": "2019-10-27T20:50:22.475387Z", "url": "https://files.pythonhosted.org/packages/3d/2b/bf57ce5d3ac85a100d42c776daa21d496d05d3648fe982d7f5588bfb65e2/blobfile-0.4.4-py3-none-any.whl", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "aa6b1714eaeebdf3fa279fc4274752b6", "sha256": "2a5e88475d769698c55f1c7df1ea27a75a368c2f946833a424ddf9899a4d31f2"}, "downloads": -1, "filename": "blobfile-0.4.5-py3-none-any.whl", "has_sig": false, "md5_digest": "aa6b1714eaeebdf3fa279fc4274752b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22857, "upload_time": "2019-10-30T04:39:10", "upload_time_iso_8601": "2019-10-30T04:39:10.909378Z", "url": "https://files.pythonhosted.org/packages/ca/b2/ea5b42bc7da21a8bbc2342cb2dd682ff7c74da64c2077c8484af19de6d41/blobfile-0.4.5-py3-none-any.whl", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "ffb2fb5828971e524e3808ca78a4f180", "sha256": "6d633408dc2d02b29d41d2069dd0d45ce3839f1494a5f4c1bb1ec453634ec8f7"}, "downloads": -1, "filename": "blobfile-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffb2fb5828971e524e3808ca78a4f180", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23243, "upload_time": "2019-10-30T06:05:28", "upload_time_iso_8601": "2019-10-30T06:05:28.828260Z", "url": "https://files.pythonhosted.org/packages/d5/b8/07106442eed170b5d71ef263f2788efb0ea2549a65356362e2743faed435/blobfile-0.5.0-py3-none-any.whl", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "563a56fcf132b9b48c88b1ff56532390", "sha256": "f774e16a39f7591fa173993016c16b14ab2065823d316c72f5c4ae3ef85c92df"}, "downloads": -1, "filename": "blobfile-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "563a56fcf132b9b48c88b1ff56532390", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23381, "upload_time": "2019-11-02T17:56:04", "upload_time_iso_8601": "2019-11-02T17:56:04.391389Z", "url": "https://files.pythonhosted.org/packages/04/67/aed0f805465b233aa4bacabf513f67a653ea68352bda7568f4d5cf0c46f4/blobfile-0.6.1-py3-none-any.whl", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "8a258392e5ba45d5aa97f348d0412aab", "sha256": "8a18999003cd6205af1b95b18180e010ac5ce5dc988d2941bbae94010462320a"}, "downloads": -1, "filename": "blobfile-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "8a258392e5ba45d5aa97f348d0412aab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22636, "upload_time": "2019-11-14T07:49:26", "upload_time_iso_8601": "2019-11-14T07:49:26.469798Z", "url": "https://files.pythonhosted.org/packages/d5/74/df05f573fcc43c714cecc79553ffbe42eae5578671dbab342cd917b7bed4/blobfile-0.7.0-py3-none-any.whl", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "6e1090e2c35ac2b9a03af6508f30c37a", "sha256": "59898e2cf12b916e411bde6dddcbc7ee31b823f9b15ef0c8fc3d2ab7ec5f93f5"}, "downloads": -1, "filename": "blobfile-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6e1090e2c35ac2b9a03af6508f30c37a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 22605, "upload_time": "2019-11-16T03:53:56", "upload_time_iso_8601": "2019-11-16T03:53:56.181085Z", "url": "https://files.pythonhosted.org/packages/e6/95/b1e9b56086d40322a86037d4445c81bc3dc453945879233a705653b380f8/blobfile-0.8.0-py3-none-any.whl", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "175f8e0e60d4faaa3923aa6f7517d792", "sha256": "8b1f50f3ecdc0b94bc956ee2e23edcf6047ed05d997002967a5588bcf2d1b65b"}, "downloads": -1, "filename": "blobfile-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "175f8e0e60d4faaa3923aa6f7517d792", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 24289, "upload_time": "2019-11-24T22:45:39", "upload_time_iso_8601": "2019-11-24T22:45:39.870598Z", "url": "https://files.pythonhosted.org/packages/ab/4d/a6caa3a864a38acf27fe1adf85091874d00012a759619830a71eca5628f8/blobfile-0.8.1-py3-none-any.whl", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "fbbb021aa1fe1409acb3c51dcd5a7dcb", "sha256": "52fa43d39cb9c6c38cdfd939bc3ab328cc87a01989dacef7f33b73473c05e845"}, "downloads": -1, "filename": "blobfile-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fbbb021aa1fe1409acb3c51dcd5a7dcb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6.0", "size": 26212, "upload_time": "2019-11-26T19:56:28", "upload_time_iso_8601": "2019-11-26T19:56:28.125912Z", "url": "https://files.pythonhosted.org/packages/53/21/9d28f0fb26005056dce10de8f38dd90234751064435a176339fde99e9ac7/blobfile-0.9.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "19ca9cf270ab162ea1dcc5e1260cba58", "sha256": "320ee17aa2db18423e19194544d738f36c1e73f71d0e0f8460beb718cd6d3474"}, "downloads": -1, "filename": "blobfile-0.16.8-py3-none-any.whl", "has_sig": false, "md5_digest": "19ca9cf270ab162ea1dcc5e1260cba58", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7.0", "size": 43658, "upload_time": "2020-05-05T04:34:55", "upload_time_iso_8601": "2020-05-05T04:34:55.390622Z", "url": "https://files.pythonhosted.org/packages/9f/0c/0e95dd5ab75e1cf809f96614ef570ceac68be053fb11d9090f1e4faa1a91/blobfile-0.16.8-py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 22:37:03 2020"}