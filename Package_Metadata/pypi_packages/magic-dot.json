{"info": {"author": "Mark Eklund", "author_email": "magic_dot@patnan.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Magic Dot\n*********\n\n\n.. image:: https://img.shields.io/pypi/v/magic_dot.svg\n        :target: https://pypi.python.org/pypi/magic_dot\n\n.. image:: https://img.shields.io/pypi/dm/magic_dot.svg\n        :target: https://pypi.python.org/pypi/magic_dot\n\n.. image:: https://github.com/bonafideduck/magic_dot/workflows/Sanity/badge.svg\n        :target: https://github.com/bonafideduck/magic_dot/actions?query=branch%3Amaster+workflow%3A%22Sanity%22\n\n.. image:: https://readthedocs.org/projects/magic-dot/badge/?version=latest\n        :target: https://magic-dot.readthedocs.io/en/latest/?badge=latest\n        :alt: Documentation Status\n\n\n\n\nLibrary that allows deep extraction of layered data structures (like JSON).\n\n\n* Free software: BSD license\n* Documentation: https://magic-dot.readthedocs.io.\n\n\nIntroduction\n============\n\nMagic Dot encapsulates data to allow the versatile extraction of its contents.\nIt is easier to use than ``setdefault`` or ``try:`` ``except`` that typical\nextraction from a structured like JSON.  Consider the following simplified JSON \nsnipppet curl https://api.github.com/events: ::\n\n  import json\n  data = json.loads(\"\"\"\n    [\n      {\n        \"type\": \"PushEvent\",\n        \"payload\": {\n          \"commits\": [\n            {\n              \"author\": {\n                \"name\": \"Bubba\"\n    }}]}}]\n  \"\"\")\n\n``magic_dot`` can retrieve the first name of the first commit, with a default of \"nobody\" if any\npart of that chain is missing with the the following: ::\n\n  from magic_dot import MagicDot, NOT_FOUND\n  name = MagicDot(data)[0].payload.commits[0].author.name.get(\"nobody\")\n\nSince the incoming JSON can't be trusted, without magic_dot, you have to verify that \neach layer is there.  This can be done with a ``try:`` ``except``, nearly as\nefficiently, but it is more verbose. ::\n\n  try:\n    name = data[0]['payload']['commits'][0]['author']['name']\n  except (IndexError, KeyError):\n    name = \"nobody\"\n\nOther features, like pluck, selective exceptions,\nattribute support, and iteration can lead to cleaner code.\n\nFeatures\n========\n\nForgiving NOT_FOUND Handling\n----------------------------\n\nManipulations of the MagicDot structure will raise no exceptions\nwhen one of the attributes or keys are not found.  Instead it delays\nthis until the ``get()`` call that extracts the data at the end.\nWhen the ``get()`` is called, there are three ways of handling\nmissing data:\n\n**Default is to return magic_dot.NOT_FOUND** ::\n\n  >>> md.nonexistent.get()\n  magic_dot.NOT_FOUND\n\n**You can request a default value for magic_dot.NOT_FOUND** ::\n\n  >>> md.nonexistent.get('bubba')\n  'bubba'\n\n**Or you can enable exceptions when referencing the nonexistent data** ::\n\n    >>> md.exception().nonexistent\n    ---------------------------------------------------------------------------\n    NotFound                                  Traceback (most recent call last)\n\nExceptions are not enabled by default.  They can be enabled during creation\nI.E ``MagicDot(data, exception=True)`` and switched on and off with the \n``MagicDot::exception(exception=False)`` method.\n\nDict and List Item Handling\n---------------------------\n\nWhen a `md[item]` is encountered, data will be extracted as follows:\n\n1. If ``md.__data[item]`` exists, that is used.\n2. If ``md.__data.item`` attribute exists it is used.\n3. If ``.exception()`` is enabled, a NotFound exception is raised.\n4. Otherwise ``md.NOT_FOUND`` is assigned to the resulting encapsulated data.\n\nAttribute Handling\n------------------\n\nWhen a ``md.key`` is supplied data will be extracted as follows:\n\n1. If ``md.__data.key`` attribute exists it is used.\n2. If ``md.__data[key]`` item exists, it is used.\n3. If ``.exception()`` is enabled, a NotFound exception is raised.\n4. Otherwise ``md.NOT_FOUND`` is assigned to the resulting ``md.__data``.\n\n\nIteration Support\n-----------------\n\nIf the currently encapsulated data is an iterable, MagicDot supports iterating\nover the contained data with the resulting iteration being a MagicDot wrapper\naround the iterated data.\n\n  >>> from collections import namedtuple\n  >>> data = [1, {'x': 2}, namedtuple('x', 'x')(3)]\n  >>> for md in MagicDot(data):\n  ...   print(md.get())\n  1\n  {'x': 2}\n  x(x=3)\n\nBy default, if an attempt is made to iterate over ``NOT_FOUND`` data, a ``TypeError``\nwill be raised.  The iteration code can be changed to instead return an empty list. :::\n\n  >> md = MagicDot(1, iter_nf_as_empty=True)\n  >> for x in md.nonexistent:\n  ..   print(md.get())\n  (prints nothing)\n\n\nOther Operators\n---------------\n\nCurrently, there is one additional operator, ``MagicDot::pluck()``, which if\nthe encapsulated data is a list, it will attempt to extract a named attribute\nor key from the entire list.  The returned value is a MagicDot with the new plucked list.\n\n\nFuture Enhancement\n==================\n\nFuture enhancements will be to support many of the `Underscore js`_ array and collection capabilities\nlike ``compact``, ``reject``, and ``count``.\n\n.. _`Underscore js`: https://underscorejs.org/#arrays\n\n\nCredits\n=======\n\nThis package was created with Cookiecutter_ and the `audreyr/cookiecutter-pypackage`_ project template.\n\n.. _Cookiecutter: https://github.com/audreyr/cookiecutter\n.. _`audreyr/cookiecutter-pypackage`: https://github.com/audreyr/cookiecutter-pypackage\n\n\nHistory\n*******\n\n0.2.0 (2020-04-30)\n==================\n* This contains some modifications that are not backwards compatible.\n* Remove .lists() support.\n* Add .pluck() support.\n* Change exception() to be raised when NOT_FOUND is generated instead of at the .get()\n* Make documentation changes to reflect the above.\n\n0.1.1 (2020-03-19)\n==================\n\n* No significant chagnes.  Testing github release automations.\n\n0.1.0 (2020-03-19)\n==================\n\n* First release on PyPI.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bonafideduck/magic_dot", "keywords": "magic_dot", "license": "BSD license", "maintainer": "", "maintainer_email": "", "name": "magic-dot", "package_url": "https://pypi.org/project/magic-dot/", "platform": "", "project_url": "https://pypi.org/project/magic-dot/", "project_urls": {"Homepage": "https://github.com/bonafideduck/magic_dot"}, "release_url": "https://pypi.org/project/magic-dot/0.2.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Library that allows deep extraction of layered data structures (like JSON).", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"magic-dot\">\n<h2>Magic Dot</h2>\n<a href=\"https://pypi.python.org/pypi/magic_dot\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/magic_dot.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc4b0a4bba952a024d3213d5667ff7e88f230361/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d616769635f646f742e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/magic_dot\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/magic_dot.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/538e46522a6f5d7220d22853222491f482abc50d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d616769635f646f742e737667\"></a>\n<a href=\"https://github.com/bonafideduck/magic_dot/actions?query=branch%3Amaster+workflow%3A%22Sanity%22\" rel=\"nofollow\"><img alt=\"https://github.com/bonafideduck/magic_dot/workflows/Sanity/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37d62b6c5efd8a1eff775c9915e07a621ee216f1/68747470733a2f2f6769746875622e636f6d2f626f6e61666964656475636b2f6d616769635f646f742f776f726b666c6f77732f53616e6974792f62616467652e737667\"></a>\n<a href=\"https://magic-dot.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/07f44864209f367cf1a68455e99e193816288116/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d616769632d646f742f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>Library that allows deep extraction of layered data structures (like JSON).</p>\n<ul>\n<li>Free software: BSD license</li>\n<li>Documentation: <a href=\"https://magic-dot.readthedocs.io\" rel=\"nofollow\">https://magic-dot.readthedocs.io</a>.</li>\n</ul>\n<div id=\"introduction\">\n<h3>Introduction</h3>\n<p>Magic Dot encapsulates data to allow the versatile extraction of its contents.\nIt is easier to use than <tt>setdefault</tt> or <tt>try:</tt> <tt>except</tt> that typical\nextraction from a structured like JSON.  Consider the following simplified JSON\nsnipppet curl <a href=\"https://api.github.com/events\" rel=\"nofollow\">https://api.github.com/events</a>:</p>\n<pre>import json\ndata = json.loads(\"\"\"\n  [\n    {\n      \"type\": \"PushEvent\",\n      \"payload\": {\n        \"commits\": [\n          {\n            \"author\": {\n              \"name\": \"Bubba\"\n  }}]}}]\n\"\"\")\n</pre>\n<p><tt>magic_dot</tt> can retrieve the first name of the first commit, with a default of \u201cnobody\u201d if any\npart of that chain is missing with the the following:</p>\n<pre>from magic_dot import MagicDot, NOT_FOUND\nname = MagicDot(data)[0].payload.commits[0].author.name.get(\"nobody\")\n</pre>\n<p>Since the incoming JSON can\u2019t be trusted, without magic_dot, you have to verify that\neach layer is there.  This can be done with a <tt>try:</tt> <tt>except</tt>, nearly as\nefficiently, but it is more verbose.</p>\n<pre>try:\n  name = data[0]['payload']['commits'][0]['author']['name']\nexcept (IndexError, KeyError):\n  name = \"nobody\"\n</pre>\n<p>Other features, like pluck, selective exceptions,\nattribute support, and iteration can lead to cleaner code.</p>\n</div>\n<div id=\"features\">\n<h3>Features</h3>\n<div id=\"forgiving-not-found-handling\">\n<h4>Forgiving NOT_FOUND Handling</h4>\n<p>Manipulations of the MagicDot structure will raise no exceptions\nwhen one of the attributes or keys are not found.  Instead it delays\nthis until the <tt>get()</tt> call that extracts the data at the end.\nWhen the <tt>get()</tt> is called, there are three ways of handling\nmissing data:</p>\n<p><strong>Default is to return magic_dot.NOT_FOUND</strong></p>\n<pre>&gt;&gt;&gt; md.nonexistent.get()\nmagic_dot.NOT_FOUND\n</pre>\n<p><strong>You can request a default value for magic_dot.NOT_FOUND</strong></p>\n<pre>&gt;&gt;&gt; md.nonexistent.get('bubba')\n'bubba'\n</pre>\n<p><strong>Or you can enable exceptions when referencing the nonexistent data</strong></p>\n<pre>&gt;&gt;&gt; md.exception().nonexistent\n---------------------------------------------------------------------------\nNotFound                                  Traceback (most recent call last)\n</pre>\n<p>Exceptions are not enabled by default.  They can be enabled during creation\nI.E <tt>MagicDot(data, exception=True)</tt> and switched on and off with the\n<tt><span class=\"pre\">MagicDot::exception(exception=False)</span></tt> method.</p>\n</div>\n<div id=\"dict-and-list-item-handling\">\n<h4>Dict and List Item Handling</h4>\n<p>When a <cite>md[item]</cite> is encountered, data will be extracted as follows:</p>\n<ol>\n<li>If <tt>md.__data[item]</tt> exists, that is used.</li>\n<li>If <tt>md.__data.item</tt> attribute exists it is used.</li>\n<li>If <tt>.exception()</tt> is enabled, a NotFound exception is raised.</li>\n<li>Otherwise <tt>md.NOT_FOUND</tt> is assigned to the resulting encapsulated data.</li>\n</ol>\n</div>\n<div id=\"attribute-handling\">\n<h4>Attribute Handling</h4>\n<p>When a <tt>md.key</tt> is supplied data will be extracted as follows:</p>\n<ol>\n<li>If <tt>md.__data.key</tt> attribute exists it is used.</li>\n<li>If <tt>md.__data[key]</tt> item exists, it is used.</li>\n<li>If <tt>.exception()</tt> is enabled, a NotFound exception is raised.</li>\n<li>Otherwise <tt>md.NOT_FOUND</tt> is assigned to the resulting <tt>md.__data</tt>.</li>\n</ol>\n</div>\n<div id=\"iteration-support\">\n<h4>Iteration Support</h4>\n<p>If the currently encapsulated data is an iterable, MagicDot supports iterating\nover the contained data with the resulting iteration being a MagicDot wrapper\naround the iterated data.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; from collections import namedtuple\n&gt;&gt;&gt; data = [1, {'x': 2}, namedtuple('x', 'x')(3)]\n&gt;&gt;&gt; for md in MagicDot(data):\n...   print(md.get())\n1\n{'x': 2}\nx(x=3)\n</pre>\n</blockquote>\n<p>By default, if an attempt is made to iterate over <tt>NOT_FOUND</tt> data, a <tt>TypeError</tt>\nwill be raised.  The iteration code can be changed to instead return an empty list. ::</p>\n<pre>&gt;&gt; md = MagicDot(1, iter_nf_as_empty=True)\n&gt;&gt; for x in md.nonexistent:\n..   print(md.get())\n(prints nothing)\n</pre>\n</div>\n<div id=\"other-operators\">\n<h4>Other Operators</h4>\n<p>Currently, there is one additional operator, <tt><span class=\"pre\">MagicDot::pluck()</span></tt>, which if\nthe encapsulated data is a list, it will attempt to extract a named attribute\nor key from the entire list.  The returned value is a MagicDot with the new plucked list.</p>\n</div>\n</div>\n<div id=\"future-enhancement\">\n<h3>Future Enhancement</h3>\n<p>Future enhancements will be to support many of the <a href=\"https://underscorejs.org/#arrays\" rel=\"nofollow\">Underscore js</a> array and collection capabilities\nlike <tt>compact</tt>, <tt>reject</tt>, and <tt>count</tt>.</p>\n</div>\n<div id=\"credits\">\n<h3>Credits</h3>\n<p>This package was created with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> and the <a href=\"https://github.com/audreyr/cookiecutter-pypackage\" rel=\"nofollow\">audreyr/cookiecutter-pypackage</a> project template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.2.0 (2020-04-30)</h3>\n<ul>\n<li>This contains some modifications that are not backwards compatible.</li>\n<li>Remove .lists() support.</li>\n<li>Add .pluck() support.</li>\n<li>Change exception() to be raised when NOT_FOUND is generated instead of at the .get()</li>\n<li>Make documentation changes to reflect the above.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.1 (2020-03-19)</h3>\n<ul>\n<li>No significant chagnes.  Testing github release automations.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.0 (2020-03-19)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7142211, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "40225cb630158360a3bc9cbf11a2cbd6", "sha256": "fa16b97ee56f826a7b53a3bf2824a936c0d4d83ce7cfebf509747f7c524cd671"}, "downloads": -1, "filename": "magic_dot-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "40225cb630158360a3bc9cbf11a2cbd6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 6972, "upload_time": "2020-03-19T17:31:03", "upload_time_iso_8601": "2020-03-19T17:31:03.483747Z", "url": "https://files.pythonhosted.org/packages/25/ce/e0cb33e9f1f1205c88ebf76d28e214729aef3091f740ac0f58fd47b5b918/magic_dot-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "074bb6fad9f5832e9d3e2bfd49e1250f", "sha256": "d78bd0ce4c32e30f3212b32487e87a5a8c13751a516b766c991ffb6d2f97f2fc"}, "downloads": -1, "filename": "magic_dot-0.1.0.tar.gz", "has_sig": false, "md5_digest": "074bb6fad9f5832e9d3e2bfd49e1250f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20428, "upload_time": "2020-03-19T17:31:06", "upload_time_iso_8601": "2020-03-19T17:31:06.008124Z", "url": "https://files.pythonhosted.org/packages/48/21/b7468af9049e01da8136b1705af7ac55d02b7852afbb28829e879ac9120e/magic_dot-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "843b6146f3920a237eafde0615e8083e", "sha256": "33b2a4e45426ff9e3d45a42726896a4369cff8260ddc5ffed5a66537d809db22"}, "downloads": -1, "filename": "magic_dot-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "843b6146f3920a237eafde0615e8083e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 7047, "upload_time": "2020-03-19T22:08:42", "upload_time_iso_8601": "2020-03-19T22:08:42.094013Z", "url": "https://files.pythonhosted.org/packages/f8/a5/3d5773154b8d524b8063e6b0a8f733880c4de49525fef8b3a81407572a91/magic_dot-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76b0a9118c17ce5b331dbaa8ead1f2ac", "sha256": "44db0e5f9eb43c45eeae23f67c5727ef3b3db251af76dec4cf43119f563ae7dc"}, "downloads": -1, "filename": "magic_dot-0.1.1.tar.gz", "has_sig": false, "md5_digest": "76b0a9118c17ce5b331dbaa8ead1f2ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 20632, "upload_time": "2020-03-19T22:08:43", "upload_time_iso_8601": "2020-03-19T22:08:43.469134Z", "url": "https://files.pythonhosted.org/packages/9b/f6/5a3422c20fa276edbc6c38d0a48f76f9b6ce5efaa52047dd193428c0d678/magic_dot-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "5f00c5d3f9304f2c544e7858147648c5", "sha256": "2ebc2875269b854132ae7970a44a015a2ddc006353c9092d6fb71ca12f619d5e"}, "downloads": -1, "filename": "magic_dot-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f00c5d3f9304f2c544e7858147648c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 7207, "upload_time": "2020-05-01T01:36:40", "upload_time_iso_8601": "2020-05-01T01:36:40.427332Z", "url": "https://files.pythonhosted.org/packages/c1/3b/7ca8aee71c1761ed0cfb4bffe234f90a602ed9103afb177a0ed06c38e1a9/magic_dot-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e3a22d9ba09377f301779576a2b6130", "sha256": "485de16ba2a380211d323b043936d93428131827a8f66712590e6a2c6eb4aab6"}, "downloads": -1, "filename": "magic_dot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2e3a22d9ba09377f301779576a2b6130", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16771, "upload_time": "2020-05-01T01:36:41", "upload_time_iso_8601": "2020-05-01T01:36:41.635841Z", "url": "https://files.pythonhosted.org/packages/a0/d5/d2912ed38226f5877d672d11108534cb83bc543d4a28fc193da2a8ed1eb8/magic_dot-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5f00c5d3f9304f2c544e7858147648c5", "sha256": "2ebc2875269b854132ae7970a44a015a2ddc006353c9092d6fb71ca12f619d5e"}, "downloads": -1, "filename": "magic_dot-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f00c5d3f9304f2c544e7858147648c5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 7207, "upload_time": "2020-05-01T01:36:40", "upload_time_iso_8601": "2020-05-01T01:36:40.427332Z", "url": "https://files.pythonhosted.org/packages/c1/3b/7ca8aee71c1761ed0cfb4bffe234f90a602ed9103afb177a0ed06c38e1a9/magic_dot-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e3a22d9ba09377f301779576a2b6130", "sha256": "485de16ba2a380211d323b043936d93428131827a8f66712590e6a2c6eb4aab6"}, "downloads": -1, "filename": "magic_dot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "2e3a22d9ba09377f301779576a2b6130", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 16771, "upload_time": "2020-05-01T01:36:41", "upload_time_iso_8601": "2020-05-01T01:36:41.635841Z", "url": "https://files.pythonhosted.org/packages/a0/d5/d2912ed38226f5877d672d11108534cb83bc543d4a28fc193da2a8ed1eb8/magic_dot-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:06 2020"}