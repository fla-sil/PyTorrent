{"info": {"author": "Eliot Berriot", "author_email": "contact@eliotberriot.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "===============================\nWhat is lifter?\n===============================\n\n.. image:: https://img.shields.io/pypi/v/lifter.svg\n        :target: https://pypi.python.org/pypi/lifter\n\n.. image:: https://readthedocs.org/projects/lifter/badge/?version=latest\n        :target: http://lifter.readthedocs.org/en/latest/?badge=latest\n\n.. image:: https://travis-ci.org/EliotBerriot/lifter.svg?branch=master\n    :target: https://travis-ci.org/EliotBerriot/lifter\n\n.. image:: https://travis-ci.org/EliotBerriot/lifter.svg?branch=develop\n    :target: https://travis-ci.org/EliotBerriot/lifter\n\n\nLifter is a generic query engine, inspired by Django ORM and SQLAlchemy.\n\nIts goal is to provide a unique interface to query any type of data, regardless of the underlying query language or data backend (SQL, REST, Python objects...).\n\n**Warning**: This package is still in alpha state and a lot of work is still needed to make queries faster and efficient.\nContributions are welcome :)\n\nUseful links:\n\n- Documentation is available at http://lifter.readthedocs.org\n- Ask your programming questions on Stack Overflow using the tag `python-lifter <http://stackoverflow.com/questions/tagged/python-lifter>`_\n\nFeatures\n--------\n\n* Queryset API similar to Django_  and SQLAlchemy_\n* Lazy querysets\n* Composable queries\n* Lightweight: very little dependencies\n* Tested and working on Python 2.7 to Python 3.5\n\n.. _Django: https://docs.djangoproject.com/en/1.9/ref/models/querysets/\n.. _SQLAlchemy: http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html#common-filter-operators\n\nExample usage\n-------------\n\nConsider the following list of users, returned from a REST API endpoint:\n\n.. code-block:: python\n\n    users = [\n        {\n            \"is_active\": True,\n            \"age\": 35,\n            \"eye_color\": \"brown\",\n            \"name\": \"Bernard\",\n            \"gender\": \"male\",\n            \"email\": \"bernard@blackbooks.com\",\n        },\n        {\n            \"is_active\": True,\n            \"age\": 34,\n            \"eye_color\": \"brown\",\n            \"name\": \"Manny\",\n            \"gender\": \"male\",\n            \"email\": \"manny@blackbooks.com\",\n        },\n        {\n            \"is_active\": True,\n            \"age\": 35,\n            \"eye_color\": \"brown\",\n            \"name\": \"Fran\",\n            \"gender\": \"female\",\n            \"email\": \"fran@blackbooks.com\",\n        },\n        # And so on ...\n    ]\n\nNow, imagine you have to extract data from this list. Let's compare how you can do this using regular Python\nand lifter.\n\nTo use lifter in your project, you'll only need the following instructions:\n\n.. code-block:: python\n\n    import lifter.models\n    from lifter.backends.python import IterableStore\n\n    class User(lifter.models.Model):\n        pass\n\n    store = IterableStore(users)\n    manager = store.query(User)\n\nGetting all active 26 years old users:\n\n.. code-block:: python\n\n    # vanilla Python\n    results = [\n        user for user in users\n        if user['age'] == 26 and user['is_active']\n    ]\n\n    # lifter\n    results = manager.filter(User.age == 26, User.is_active == True)\n\nGetting names and emails of inactive users under 56:\n\n.. code-block:: python\n\n    # vanilla Python\n    results = [\n        (user['name'], user['email']) for user in users\n        if not user['is_active'] and user['age'] < 56\n    ]\n\n    # lifter\n    results = manager.filter(User.is_active == False, User.age < 56)\\\n                     .values_list('name', 'email')\n\nGetting all active users except the one with brown eyes and sort them by age:\n\n.. code-block:: python\n\n    # vanilla Python\n    raw_results = [\n        user for user in users\n        if user['is_active'] and not user['eye_color'] == 'brown'\n    ]\n    results = sorted(raw_results, key=lambda v: v['age'])\n\n    # lifter\n    results = manager.filter(User.is_active == True)\\\n                     .exclude(User.eye_color == 'brown')\\\n                     .order_by('age')\n\nGetting minimum and average women age:\n\n.. code-block:: python\n\n    # vanilla Python\n    from statistics import mean # Only in Python >=3.4\n    women_ages = [\n        user['age'] for user in users\n        if user['gender'] == 'female'\n    ]\n    women_average_age = mean(women_ages)\n    minimum_woman_age = min(women_ages)\n\n    # lifter\n    results = manager.filter(User.gender == 'female')\\\n                     .aggregate((User.age, mean), (User.age, min))\n\nAs you can see, lifter's version is shorter and more readable than vanilla Python.\nIt's also less error prone, especially if you're writing really complex queries,\nand quite familiar if you've already used an ORM.\n\nWanna know more? Have a look at the documentation_!\n\n.. _documentation: http://lifter.readthedocs.org\n\n\n=======\nHistory\n=======\n\n0.4.1 (2016-8-2)\n------------------\n\nThis release fix issue #42: some files were not included in lifter distribution,\nmainly the ``backends`` and ``contrib`` directories, causing various imports to fail.\n\n\n0.4 (2016-7-20)\n---------------\n\nThis release introduces the django contrib module to enable filtering with lifter's python backend\non a django queryset, effectively reducing number of queries sent to the database.\n\nWork is also in progress regarding caching (see #39) but this is not over yet.\n\n0.3 (2016-7-12)\n---------------\n\nThis is a big release, that breaks backward-compatibility with previous ones.\n\nThis release implements a new flow to help implementing #33. The general idea\nis to make lifter generic and be able to query any data source with it.\n\nThe 0.3 release sets the foundation for that by moving all python-iterable related code to a dedicated backend,\nand by implementing the Store -> Adapter > Model layout to deal with queries and result parsing.\n\nAn additional, very simple, ``filesystem`` backend is provided to demonstrate how you can implement your own datasource in lifter.\n\nThe work, though, is still incomplete, because the `filesystem` store internally uses the `IterableStore` from the python backend.\n\nA real store (such as REST or SQL) would be able to understand queries and pass them to a real backend (PostgreSQL).\n\nAnyway, we're in the good direction here :)\n\n0.2.1 (2016-3-4)\n----------------\n\nThis is a small release, with a few improvements on ordering API and on the overall documentation:\n\n* Can now order using multiple fields, fix #30\n* [Backward incompatible] Can now invert ordering in explicit engine using path and ~ operator. Passing a `reverse` argument to `order_by` is not possible anymore\n* Can now query for field existences, fix #26\n\n\n0.2 (2016-2-23)\n---------------\n\nThis is quite an important release:\n\n* A whole new API is now available to make queries, see #15 for more information [angru, eliotberriot]\n* Querysets are now lazy\n* A brand new documentation is now available at http://lifter.readthedocs.org\n* Splitted some huge files into submodules for more clarity\n\nConsidering the new query API, we basically switched from django's ORM-style (keyword engine)\nto SQLAlchemy style (explicit engine).\n\nThe keyword engine is still available and will continue to work as before.\nIt is neither under depreciation at the moment, but using the new engine is recommended.\n\n0.1.1 (2016-2-21)\n------------------\n\n* Can now pass arguments to underlying manager via lifter.load\n* Random order_by for queryset [Pentusha]\n* Improve code examples readability in readme\n* Removed duplicate method on queryset [Mec-iS]\n* Can now run some lookups within iterables (WIP) [Ogreman].\n* Lots of improvements and corrections (typos, examples, etc.) in README [johnfraney, youtux]\n* Can now return flat lists as results for aggregates [Ogreman]\n\n\n0.1.0 (2016-2-17)\n------------------\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/eliotberriot/lifter", "keywords": "lifter", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "lifter", "package_url": "https://pypi.org/project/lifter/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/lifter/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/eliotberriot/lifter"}, "release_url": "https://pypi.org/project/lifter/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "A lightweight query engine for Python iterables, inspired by Django ORM", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"what-is-lifter\">\n<h2>What is lifter?</h2>\n<a href=\"https://pypi.python.org/pypi/lifter\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/lifter.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9cdc987c266a38a267be4aa19fc90d6364af19fb/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c69667465722e737667\"></a>\n<a href=\"http://lifter.readthedocs.org/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/lifter/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/49bd4987af3f1f6016c7e06de3cc2c6bb20ec9a1/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6c69667465722f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"https://travis-ci.org/EliotBerriot/lifter\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/EliotBerriot/lifter.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2857b05202e70b33964cefb90309dca975b76c0/68747470733a2f2f7472617669732d63692e6f72672f456c696f7442657272696f742f6c69667465722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://travis-ci.org/EliotBerriot/lifter\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/EliotBerriot/lifter.svg?branch=develop\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/306344f77fd93476dad75738a3d17a7aaa78fddb/68747470733a2f2f7472617669732d63692e6f72672f456c696f7442657272696f742f6c69667465722e7376673f6272616e63683d646576656c6f70\"></a>\n<p>Lifter is a generic query engine, inspired by Django ORM and SQLAlchemy.</p>\n<p>Its goal is to provide a unique interface to query any type of data, regardless of the underlying query language or data backend (SQL, REST, Python objects\u2026).</p>\n<p><strong>Warning</strong>: This package is still in alpha state and a lot of work is still needed to make queries faster and efficient.\nContributions are welcome :)</p>\n<p>Useful links:</p>\n<ul>\n<li>Documentation is available at <a href=\"http://lifter.readthedocs.org\" rel=\"nofollow\">http://lifter.readthedocs.org</a></li>\n<li>Ask your programming questions on Stack Overflow using the tag <a href=\"http://stackoverflow.com/questions/tagged/python-lifter\" rel=\"nofollow\">python-lifter</a></li>\n</ul>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Queryset API similar to <a href=\"https://docs.djangoproject.com/en/1.9/ref/models/querysets/\" rel=\"nofollow\">Django</a>  and <a href=\"http://docs.sqlalchemy.org/en/rel_1_0/orm/tutorial.html#common-filter-operators\" rel=\"nofollow\">SQLAlchemy</a></li>\n<li>Lazy querysets</li>\n<li>Composable queries</li>\n<li>Lightweight: very little dependencies</li>\n<li>Tested and working on Python 2.7 to Python 3.5</li>\n</ul>\n</div>\n<div id=\"example-usage\">\n<h3>Example usage</h3>\n<p>Consider the following list of users, returned from a REST API endpoint:</p>\n<pre><span class=\"n\">users</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">35</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"eye_color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"brown\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Bernard\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"male\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bernard@blackbooks.com\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">34</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"eye_color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"brown\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Manny\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"male\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"manny@blackbooks.com\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n        <span class=\"s2\">\"is_active\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"age\"</span><span class=\"p\">:</span> <span class=\"mi\">35</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"eye_color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"brown\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Fran\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"gender\"</span><span class=\"p\">:</span> <span class=\"s2\">\"female\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"email\"</span><span class=\"p\">:</span> <span class=\"s2\">\"fran@blackbooks.com\"</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span>\n    <span class=\"c1\"># And so on ...</span>\n<span class=\"p\">]</span>\n</pre>\n<p>Now, imagine you have to extract data from this list. Let\u2019s compare how you can do this using regular Python\nand lifter.</p>\n<p>To use lifter in your project, you\u2019ll only need the following instructions:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">lifter.models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lifter.backends.python</span> <span class=\"kn\">import</span> <span class=\"n\">IterableStore</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">User</span><span class=\"p\">(</span><span class=\"n\">lifter</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">store</span> <span class=\"o\">=</span> <span class=\"n\">IterableStore</span><span class=\"p\">(</span><span class=\"n\">users</span><span class=\"p\">)</span>\n<span class=\"n\">manager</span> <span class=\"o\">=</span> <span class=\"n\">store</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"p\">)</span>\n</pre>\n<p>Getting all active 26 years old users:</p>\n<pre><span class=\"c1\"># vanilla Python</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">user</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"mi\">26</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'is_active'</span><span class=\"p\">]</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># lifter</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">==</span> <span class=\"mi\">26</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Getting names and emails of inactive users under 56:</p>\n<pre><span class=\"c1\"># vanilla Python</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">],</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'email'</span><span class=\"p\">])</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'is_active'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"o\">&lt;</span> <span class=\"mi\">56</span>\n<span class=\"p\">]</span>\n\n<span class=\"c1\"># lifter</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"o\">==</span> <span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">&lt;</span> <span class=\"mi\">56</span><span class=\"p\">)</span>\\\n                 <span class=\"o\">.</span><span class=\"n\">values_list</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s1\">'email'</span><span class=\"p\">)</span>\n</pre>\n<p>Getting all active users except the one with brown eyes and sort them by age:</p>\n<pre><span class=\"c1\"># vanilla Python</span>\n<span class=\"n\">raw_results</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">user</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'is_active'</span><span class=\"p\">]</span> <span class=\"ow\">and</span> <span class=\"ow\">not</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'eye_color'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'brown'</span>\n<span class=\"p\">]</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">raw_results</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># lifter</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">is_active</span> <span class=\"o\">==</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\\\n                 <span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">eye_color</span> <span class=\"o\">==</span> <span class=\"s1\">'brown'</span><span class=\"p\">)</span>\\\n                 <span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s1\">'age'</span><span class=\"p\">)</span>\n</pre>\n<p>Getting minimum and average women age:</p>\n<pre><span class=\"c1\"># vanilla Python</span>\n<span class=\"kn\">from</span> <span class=\"nn\">statistics</span> <span class=\"kn\">import</span> <span class=\"n\">mean</span> <span class=\"c1\"># Only in Python &gt;=3.4</span>\n<span class=\"n\">women_ages</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'age'</span><span class=\"p\">]</span> <span class=\"k\">for</span> <span class=\"n\">user</span> <span class=\"ow\">in</span> <span class=\"n\">users</span>\n    <span class=\"k\">if</span> <span class=\"n\">user</span><span class=\"p\">[</span><span class=\"s1\">'gender'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'female'</span>\n<span class=\"p\">]</span>\n<span class=\"n\">women_average_age</span> <span class=\"o\">=</span> <span class=\"n\">mean</span><span class=\"p\">(</span><span class=\"n\">women_ages</span><span class=\"p\">)</span>\n<span class=\"n\">minimum_woman_age</span> <span class=\"o\">=</span> <span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">women_ages</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># lifter</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">manager</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">gender</span> <span class=\"o\">==</span> <span class=\"s1\">'female'</span><span class=\"p\">)</span>\\\n                 <span class=\"o\">.</span><span class=\"n\">aggregate</span><span class=\"p\">((</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">mean</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">User</span><span class=\"o\">.</span><span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"nb\">min</span><span class=\"p\">))</span>\n</pre>\n<p>As you can see, lifter\u2019s version is shorter and more readable than vanilla Python.\nIt\u2019s also less error prone, especially if you\u2019re writing really complex queries,\nand quite familiar if you\u2019ve already used an ORM.</p>\n<p>Wanna know more? Have a look at the <a href=\"http://lifter.readthedocs.org\" rel=\"nofollow\">documentation</a>!</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.4.1 (2016-8-2)</h3>\n<p>This release fix issue #42: some files were not included in lifter distribution,\nmainly the <tt>backends</tt> and <tt>contrib</tt> directories, causing various imports to fail.</p>\n</div>\n<div id=\"id2\">\n<h3>0.4 (2016-7-20)</h3>\n<p>This release introduces the django contrib module to enable filtering with lifter\u2019s python backend\non a django queryset, effectively reducing number of queries sent to the database.</p>\n<p>Work is also in progress regarding caching (see #39) but this is not over yet.</p>\n</div>\n<div id=\"id3\">\n<h3>0.3 (2016-7-12)</h3>\n<p>This is a big release, that breaks backward-compatibility with previous ones.</p>\n<p>This release implements a new flow to help implementing #33. The general idea\nis to make lifter generic and be able to query any data source with it.</p>\n<p>The 0.3 release sets the foundation for that by moving all python-iterable related code to a dedicated backend,\nand by implementing the Store -&gt; Adapter &gt; Model layout to deal with queries and result parsing.</p>\n<p>An additional, very simple, <tt>filesystem</tt> backend is provided to demonstrate how you can implement your own datasource in lifter.</p>\n<p>The work, though, is still incomplete, because the <cite>filesystem</cite> store internally uses the <cite>IterableStore</cite> from the python backend.</p>\n<p>A real store (such as REST or SQL) would be able to understand queries and pass them to a real backend (PostgreSQL).</p>\n<p>Anyway, we\u2019re in the good direction here :)</p>\n</div>\n<div id=\"id4\">\n<h3>0.2.1 (2016-3-4)</h3>\n<p>This is a small release, with a few improvements on ordering API and on the overall documentation:</p>\n<ul>\n<li>Can now order using multiple fields, fix #30</li>\n<li>[Backward incompatible] Can now invert ordering in explicit engine using path and ~ operator. Passing a <cite>reverse</cite> argument to <cite>order_by</cite> is not possible anymore</li>\n<li>Can now query for field existences, fix #26</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.2 (2016-2-23)</h3>\n<p>This is quite an important release:</p>\n<ul>\n<li>A whole new API is now available to make queries, see #15 for more information [angru, eliotberriot]</li>\n<li>Querysets are now lazy</li>\n<li>A brand new documentation is now available at <a href=\"http://lifter.readthedocs.org\" rel=\"nofollow\">http://lifter.readthedocs.org</a></li>\n<li>Splitted some huge files into submodules for more clarity</li>\n</ul>\n<p>Considering the new query API, we basically switched from django\u2019s ORM-style (keyword engine)\nto SQLAlchemy style (explicit engine).</p>\n<p>The keyword engine is still available and will continue to work as before.\nIt is neither under depreciation at the moment, but using the new engine is recommended.</p>\n</div>\n<div id=\"id6\">\n<h3>0.1.1 (2016-2-21)</h3>\n<ul>\n<li>Can now pass arguments to underlying manager via lifter.load</li>\n<li>Random order_by for queryset [Pentusha]</li>\n<li>Improve code examples readability in readme</li>\n<li>Removed duplicate method on queryset [Mec-iS]</li>\n<li>Can now run some lookups within iterables (WIP) [Ogreman].</li>\n<li>Lots of improvements and corrections (typos, examples, etc.) in README [johnfraney, youtux]</li>\n<li>Can now return flat lists as results for aggregates [Ogreman]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.1.0 (2016-2-17)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2258033, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9d3ef306d4c9b5f7e4ae1a83aa2a9b5c", "sha256": "b6f9183a9470d5abe0cff5b194b8c98e6b6e0bde29b42968b4707121eb6286ef"}, "downloads": -1, "filename": "lifter-0.1.0.tar.gz", "has_sig": false, "md5_digest": "9d3ef306d4c9b5f7e4ae1a83aa2a9b5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18019, "upload_time": "2016-02-17T22:57:48", "upload_time_iso_8601": "2016-02-17T22:57:48.035100Z", "url": "https://files.pythonhosted.org/packages/f2/28/c2a446efc523df37310c2905ce62088ea32b814baa55e0e52a9d8292cf1e/lifter-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fa4021d598f63f54e7964bf212f558f3", "sha256": "38bba9586376690380733e506296f1f2c642da0588217d8064a5619da60fea0c"}, "downloads": -1, "filename": "lifter-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa4021d598f63f54e7964bf212f558f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19520, "upload_time": "2016-02-20T23:59:21", "upload_time_iso_8601": "2016-02-20T23:59:21.764077Z", "url": "https://files.pythonhosted.org/packages/14/49/16e73bce4c96f870c3178655bef452dd00aff398395549ea061a14f94dd9/lifter-0.1.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "98e821dca1131229c4925a1e898574e8", "sha256": "a72d148f6da67ff2b0ae93442ec3cc81df5532687308b3e53a122fb8ad9c850b"}, "downloads": -1, "filename": "lifter-0.2.tar.gz", "has_sig": false, "md5_digest": "98e821dca1131229c4925a1e898574e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29747, "upload_time": "2016-02-23T22:04:24", "upload_time_iso_8601": "2016-02-23T22:04:24.937905Z", "url": "https://files.pythonhosted.org/packages/e1/2f/703e6a73af277ad3a0287e80268c27a839be3a44be574901aac09da4362c/lifter-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0bb7793ea2378f30cfea369ccbab569c", "sha256": "a068f79dd38ec2bd4f4afdac8af2cfcf7bc8b9f5c188831d13e0e98aebb0fe4b"}, "downloads": -1, "filename": "lifter-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0bb7793ea2378f30cfea369ccbab569c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 32635, "upload_time": "2016-03-04T19:02:24", "upload_time_iso_8601": "2016-03-04T19:02:24.220045Z", "url": "https://files.pythonhosted.org/packages/4f/6b/8cbd9c0895d1533c74178158e6f2af094d8170571c4bb84b0793d05b5bae/lifter-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "082677535f998e9766f5dcb3d9d93cbd", "sha256": "ba68f09c9bf1c6ec8894c4d9a29f4fbc4318e80950ab49ec640d1944efd47db8"}, "downloads": -1, "filename": "lifter-0.3.tar.gz", "has_sig": false, "md5_digest": "082677535f998e9766f5dcb3d9d93cbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45446, "upload_time": "2016-07-12T12:50:36", "upload_time_iso_8601": "2016-07-12T12:50:36.322853Z", "url": "https://files.pythonhosted.org/packages/70/25/f775bac45728abf716687ebeeace51a3ca027b6763baaeae18ce4a205093/lifter-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "458d82ab4ec61a1f57c1a9e92580020f", "sha256": "696611b6e5e24437d5ea5bae3d216e69f8b3f5e076239a388ac4871352d0f294"}, "downloads": -1, "filename": "lifter-0.4.tar.gz", "has_sig": false, "md5_digest": "458d82ab4ec61a1f57c1a9e92580020f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 57522, "upload_time": "2016-07-20T11:21:59", "upload_time_iso_8601": "2016-07-20T11:21:59.841564Z", "url": "https://files.pythonhosted.org/packages/f0/23/b2cd718986fd0fb4e90c4331fbf71de7b74c21af9abe2706f37ba3a419d0/lifter-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "65e14216bf3b048e6e3dbefda9b571f5", "sha256": "09c12c8c80e9c1f08ab234c8f12edd0a1449da32684c3f63c499482f42f97cf1"}, "downloads": -1, "filename": "lifter-0.4.1.tar.gz", "has_sig": false, "md5_digest": "65e14216bf3b048e6e3dbefda9b571f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62105, "upload_time": "2016-08-02T15:53:23", "upload_time_iso_8601": "2016-08-02T15:53:23.136210Z", "url": "https://files.pythonhosted.org/packages/05/84/d16e4ff3b7c14292cac27cdbcca6b2e753416ae5da5ea53473553bfd5c94/lifter-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65e14216bf3b048e6e3dbefda9b571f5", "sha256": "09c12c8c80e9c1f08ab234c8f12edd0a1449da32684c3f63c499482f42f97cf1"}, "downloads": -1, "filename": "lifter-0.4.1.tar.gz", "has_sig": false, "md5_digest": "65e14216bf3b048e6e3dbefda9b571f5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 62105, "upload_time": "2016-08-02T15:53:23", "upload_time_iso_8601": "2016-08-02T15:53:23.136210Z", "url": "https://files.pythonhosted.org/packages/05/84/d16e4ff3b7c14292cac27cdbcca6b2e753416ae5da5ea53473553bfd5c94/lifter-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:07 2020"}