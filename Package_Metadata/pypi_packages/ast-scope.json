{"info": {"author": "Kavi Gupta", "author_email": "ast_scope@kavigupta.org", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# ast_scope\n\nThis package is an implementation of Python's lexical scoping rules. It's interface is simple, you pass in an AST object to the `annotate` function, and it provides a mapping from each node in the tree that represents a symbol to the containing scope.\n\n## Example Usage: Get Global Symbols\n\nLet's say you have the code\n\n```\ncode = \"\"\"\ndef f():\n    x = 3\n    lambda z: theta\n    return x + y\n\"\"\"\n```\n\nand you want to determine which global variables are referenced by it. All you need to do is run\n\n```\nimport ast\nimport ast_scope\ntree = ast.parse(code)\nscope_info = ast_scope.annotate(tree)\nglobal_variables = sorted(scope_info.global_scope.symbols_in_frame)\n```\n\nOnce you have executed this code, `global_variables` will be bound to `['f', 'theta', 'y']`.\n\n## Example Usage: Get Dependency Graph\n\nLet's say you have the code\n\n```\ncode = \"\"\"\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return hailstone(n // 2)\n    if n % 2 == 1:\n        return hailstone(3 * n + 1)\n\ndef mapper(f, lst):\n    return list(map(f, lst))\n\ndef lrange(n):\n    return list(range(n))\n\ndef main():\n    return mapper(hailstone, lrange(20))\n\"\"\"\n```\n\nand you want to find the dependency graph. You can run\n\n```\nimport ast\nimport ast_scope\ntree = ast.parse(code)\nscope_info = ast_scope.annotate(tree)\ngraph = scope_info.static_dependency_graph\n```\n\nwhich results in the following directed graph of dependencies between top-level functions (rendering using networkx):\n\n<img src=\"img/dependency_graph_example.png\">\n\nSee the documentation for some caveats.\n\n## Example usage: find a specific symbol's scope\n\nTake the following code:\n\n```\ncode = \"\"\"\ndef f(x):\n    def g(x): return x()\n    return g(lambda: x)\n\"\"\"\n```\n\nFirst, parse the code and identify the node (in practice, you'd probably have this always).\n\n```\nimport ast, ast_scope\ntree = ast.parse(code)\nlast_x = tree.body[0].body[-1].value.args[0].body\n```\n\nIf you want to find the scope in which the last `x` could be found, just run the annotator and look up it's scope!\n\n```\n# run the annotator\nscope_info = ast_scope.annotate(tree)\nscope_x = scope_info[last_x]\n```\n\nYou should get a `FunctionScope` object which contains a bunch of information about the other variables, etc., in the scope, but also `scope_x.function_node`, a pointer to the node containing the `def` statement for `f`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/kavigupta/ast_scope/archive/0.3.1.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kavigupta/ast_scope", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ast-scope", "package_url": "https://pypi.org/project/ast-scope/", "platform": "", "project_url": "https://pypi.org/project/ast-scope/", "project_urls": {"Download": "https://github.com/kavigupta/ast_scope/archive/0.3.1.zip", "Homepage": "https://github.com/kavigupta/ast_scope"}, "release_url": "https://pypi.org/project/ast-scope/0.3.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Annotates a Python AST with the scope of symbols.", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ast_scope</h1>\n<p>This package is an implementation of Python's lexical scoping rules. It's interface is simple, you pass in an AST object to the <code>annotate</code> function, and it provides a mapping from each node in the tree that represents a symbol to the containing scope.</p>\n<h2>Example Usage: Get Global Symbols</h2>\n<p>Let's say you have the code</p>\n<pre><code>code = \"\"\"\ndef f():\n    x = 3\n    lambda z: theta\n    return x + y\n\"\"\"\n</code></pre>\n<p>and you want to determine which global variables are referenced by it. All you need to do is run</p>\n<pre><code>import ast\nimport ast_scope\ntree = ast.parse(code)\nscope_info = ast_scope.annotate(tree)\nglobal_variables = sorted(scope_info.global_scope.symbols_in_frame)\n</code></pre>\n<p>Once you have executed this code, <code>global_variables</code> will be bound to <code>['f', 'theta', 'y']</code>.</p>\n<h2>Example Usage: Get Dependency Graph</h2>\n<p>Let's say you have the code</p>\n<pre><code>code = \"\"\"\ndef hailstone(n):\n    if n == 1:\n        return 1\n    if n % 2 == 0:\n        return hailstone(n // 2)\n    if n % 2 == 1:\n        return hailstone(3 * n + 1)\n\ndef mapper(f, lst):\n    return list(map(f, lst))\n\ndef lrange(n):\n    return list(range(n))\n\ndef main():\n    return mapper(hailstone, lrange(20))\n\"\"\"\n</code></pre>\n<p>and you want to find the dependency graph. You can run</p>\n<pre><code>import ast\nimport ast_scope\ntree = ast.parse(code)\nscope_info = ast_scope.annotate(tree)\ngraph = scope_info.static_dependency_graph\n</code></pre>\n<p>which results in the following directed graph of dependencies between top-level functions (rendering using networkx):</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ef236ce1c827abb09c2896f77067dd116abe3041/696d672f646570656e64656e63795f67726170685f6578616d706c652e706e67\">\n<p>See the documentation for some caveats.</p>\n<h2>Example usage: find a specific symbol's scope</h2>\n<p>Take the following code:</p>\n<pre><code>code = \"\"\"\ndef f(x):\n    def g(x): return x()\n    return g(lambda: x)\n\"\"\"\n</code></pre>\n<p>First, parse the code and identify the node (in practice, you'd probably have this always).</p>\n<pre><code>import ast, ast_scope\ntree = ast.parse(code)\nlast_x = tree.body[0].body[-1].value.args[0].body\n</code></pre>\n<p>If you want to find the scope in which the last <code>x</code> could be found, just run the annotator and look up it's scope!</p>\n<pre><code># run the annotator\nscope_info = ast_scope.annotate(tree)\nscope_x = scope_info[last_x]\n</code></pre>\n<p>You should get a <code>FunctionScope</code> object which contains a bunch of information about the other variables, etc., in the scope, but also <code>scope_x.function_node</code>, a pointer to the node containing the <code>def</code> statement for <code>f</code>.</p>\n\n          </div>"}, "last_serial": 6405831, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "51ba0dab65085dac4951b7a7009b8c4b", "sha256": "c8fde8bc8122c6d61b4517b8d37383d7ea71578b028bb44c64fa0b3132d2ea28"}, "downloads": -1, "filename": "ast_scope-0.1.0.tar.gz", "has_sig": false, "md5_digest": "51ba0dab65085dac4951b7a7009b8c4b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7793, "upload_time": "2019-12-11T11:08:36", "upload_time_iso_8601": "2019-12-11T11:08:36.612244Z", "url": "https://files.pythonhosted.org/packages/71/47/a680ebda5febbc24bf03d4744b3bdeb23552624ce8f9ff83b22e4564e2bd/ast_scope-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ed59089f4a6dcdb2feddd1ee7239def9", "sha256": "2c1108b87571eafdb54a69918684327f46a68f33c57cacdeafd270a1c2a95860"}, "downloads": -1, "filename": "ast_scope-0.2.1.tar.gz", "has_sig": false, "md5_digest": "ed59089f4a6dcdb2feddd1ee7239def9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10040, "upload_time": "2019-12-21T06:55:38", "upload_time_iso_8601": "2019-12-21T06:55:38.681304Z", "url": "https://files.pythonhosted.org/packages/1c/c1/50704e3e0c0851e30dc9064506193a336b491d64aab60e9d56ae7e820f33/ast_scope-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2d9ac5d86657caf9f7409df6ff75b8cf", "sha256": "22c8cfa0089db19062c75c92699eb6ee896fda6e40dd0c821cc7a07e368e9e47"}, "downloads": -1, "filename": "ast_scope-0.3.0.tar.gz", "has_sig": false, "md5_digest": "2d9ac5d86657caf9f7409df6ff75b8cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12110, "upload_time": "2020-01-07T00:18:16", "upload_time_iso_8601": "2020-01-07T00:18:16.895771Z", "url": "https://files.pythonhosted.org/packages/52/cc/122fa7269f8572b1906b799275b4e1aac17b100e3feac80ec6412547c90c/ast_scope-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "04e633157f29824674ede9bd36e9a580", "sha256": "4789ee255afccd9a19ce95c2e7a077138142fd90b570370fbfa7616b9cdd8d0a"}, "downloads": -1, "filename": "ast_scope-0.3.1.tar.gz", "has_sig": false, "md5_digest": "04e633157f29824674ede9bd36e9a580", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10299, "upload_time": "2020-01-07T00:27:30", "upload_time_iso_8601": "2020-01-07T00:27:30.147195Z", "url": "https://files.pythonhosted.org/packages/07/7c/bc41c8aaf88111ca88f2377fc99303a7d44d8d33e8b7e76510f49384ba69/ast_scope-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04e633157f29824674ede9bd36e9a580", "sha256": "4789ee255afccd9a19ce95c2e7a077138142fd90b570370fbfa7616b9cdd8d0a"}, "downloads": -1, "filename": "ast_scope-0.3.1.tar.gz", "has_sig": false, "md5_digest": "04e633157f29824674ede9bd36e9a580", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10299, "upload_time": "2020-01-07T00:27:30", "upload_time_iso_8601": "2020-01-07T00:27:30.147195Z", "url": "https://files.pythonhosted.org/packages/07/7c/bc41c8aaf88111ca88f2377fc99303a7d44d8d33e8b7e76510f49384ba69/ast_scope-0.3.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:47 2020"}