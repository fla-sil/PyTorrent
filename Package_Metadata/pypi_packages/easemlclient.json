{"info": {"author": "Bojan Karlas", "author_email": "bojan.karlas@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Ease.ml Client\n\nThis is the Python implementation of the ease.ml client.\n\n## Installation\n\nThis package is available on PyPI.\n\n```bash\npip install easemlclient\n```\n\n## Example usage\n\n### Establishing a connection\n\nTo use the client API we first need to create a connection object that we will be using to target the running easeml instance. The connection must be inialized with a host name (here we use localhost) and either the API key or a username and password.\n\n```python\nfrom easemlclient.model import Connection\n\nconnection = Connection(host=\"localhost:8080\", api_key=\"some-api-key\")\n```\n\n### Querying Collections\n\nThen we can query all the running jobs. To do that we need to create a `JobQuery` instance which we use to specify the parameters of our query. For example, we can query all completed jobs. To get the result we call the `run()` method of the query object and pass the connection instance.\n\n```python\nfrom easemlclient.model import JobQuery\n\nquery = JobQuery(status=\"completed\")\nresult, next_query = query.run(connection)\n```\n\nThe result will contain a list of `Job` objects taht satisfy our query. Results are paginated to limit the size of each request. If there are more pages to be loaded, then the `next_query` variable will contain a `JobQuery` instance that we can run and return the next page. The full pattern for loading all jobs is the following:\n\n```python\nfrom easemlclient.model import JobQuery\n\nresult, query = [], JobQuery(status=\"completed\")\n\nnext_result, next_query = [], query\nwhile next_query is not None:\n    next_result, next_query = query.run(connection)\n    result.extend(next_result)\n```\n\nWe can take the first completed job and get a list of its tasks.\n\n```python\njob = result[0]\ntasks = job.tasks\n```\n\nThe `tasks` list actually contains \"shallow\" instances of the `Task` class. This means that each instance contains only the task's `id` field and no other fields. This is normal because the `Job` object has only references to tasks, not entire tasks. To get a full version of a task given a \"shallow\" instance, we use the `get()` method.\n\n```python\ntask = tasks[0].get(connection)\n```\n\n### Querying Specific Objects\n\nThe `Task` object can also be used to query tasks by their ID. We simply create a new \"shallow\" instance using a task ID and call the `get()` method.\n\n```python\nfrom easemlclient.model import Task\n\ntask = Task(id=\"some-task-id\").get(connection)\n```\n\n### Creating Objects\n\nWe have the ability to create certain objects, such as `Dataset`, `Module` and `Job`. We do this by initializing an instance of that object, assigning values to relevant fields and calling the `post()` method. Here is an example of creating a dataset object along with uploading of a dataset.\n\n```python\n\nfrom easemlclient.model import Dataset, DatasetSource, DatasetStatus\n\ndataset = Dataset.create(id=\"test_dataset_1\", source=DatasetSource.UPLOAD, name=\"Test Dataset 1\").post(connection)\n\nwith open(\"test_dataset_1.tar\", \"rb\") as f:\n    dataset.upload(connection=connection, data=f)\n\n# Once the dataset upload finishes, we need to update the status of the dataset to \"transferred\".\ndataset.status = DatasetStatus.TRANSFERRED\n\n# Once we assign values to fields, we use the patch command\n# to apply updates to the dataset object on the server.\ndataset.patch(connection)\n```\n\n### Starting a new training Job and monitoring it\n\nHere we show a slightly more complex example that demonstrates how to start a model selection and tuning job given a previously uploaded dataset.\n\nWe will first fetch the dataset object in order to be able to access its schema.\n\n```python\nfrom easemlclient.model import Dataset\n\ndataset = Dataset(id=\"test_dataset_1\").get(connection)\n```\n\nThen we query all models that are applicable to the given dataset. We use the `ModuleQuery` class for this.\n\n```python\n\nfrom easemlclient.model import ModuleQuery, ModuleType\n\nquery = ModuleQuery(type=ModuleType.MODEL, status=ModuleStatus.ACTIVE,\n                    schema_in=dataset.schema_in, schema_out=dataset.schema_out)\n\n# We assume that the result does not contain more than one page.\nmodels, _ = query.run(connection)\n```\n\nWe do the same for objectives.\n\n```python\n\nfrom easemlclient.model import ModuleQuery, ModuleType\n\nquery = ModuleQuery(type=ModuleType.OBJECTIVE, status=ModuleStatus.ACTIVE,\n                    schema_in=dataset.schema_in, schema_out=dataset.schema_out)\nobjectives, _ = query.run(connection)\n\n# We will simply pick the first objective here.\nobjective = objectives[0]\n```\n\nThen we are ready to create a job.\n\n```python\nfrom easemlclient.model import Job\n\njob = Job(dataset=dataset, objective=objective, models=models, max_tasks=20).post(connection)\n```\n\nWith `max_tasks` we specify the number of tasks to run before a job's status will become `completed`. We can keep querying the job to check the status.\n\n```python\nfrom time import sleep\nfrom easemlclient.model import JobStatus\n\nwhile job.get(connection).status != JobStatus.COMPLETED:\n    time.sleep(10)\n```\n\nOnce the job is completed, we can get the task with the best result.\n\n```python\nfrom easemlclient.model import TaskQuery, ApiQueryOrder\n\ntasks, _ = TaskQuery(job=job, order_by=\"quality\", order=ApiQueryOrder.DESC).run(connection)\n\nbest_task = tasks[0].get(connection)\n```\n\nFinally, we can download the Docker image of the best task and save it as a tar file.\n\n```python\nimage = best_task.get_image(connection)\nopen(\"/output/path/to/image.tar\", \"wb\").write(image)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DS3Lab/easeml", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "easemlclient", "package_url": "https://pypi.org/project/easemlclient/", "platform": "", "project_url": "https://pypi.org/project/easemlclient/", "project_urls": {"Homepage": "https://github.com/DS3Lab/easeml"}, "release_url": "https://pypi.org/project/easemlclient/0.1.4/", "requires_dist": ["requests (>=2.22.0)", "pyrfc3339 (>=1.1)", "tuspy (>=0.2.4)", "docker (>=4.0.1)"], "requires_python": "", "summary": "Client library used to communicate with the ease.ml service.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Ease.ml Client</h1>\n<p>This is the Python implementation of the ease.ml client.</p>\n<h2>Installation</h2>\n<p>This package is available on PyPI.</p>\n<pre>pip install easemlclient\n</pre>\n<h2>Example usage</h2>\n<h3>Establishing a connection</h3>\n<p>To use the client API we first need to create a connection object that we will be using to target the running easeml instance. The connection must be inialized with a host name (here we use localhost) and either the API key or a username and password.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">Connection</span>\n\n<span class=\"n\">connection</span> <span class=\"o\">=</span> <span class=\"n\">Connection</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s2\">\"localhost:8080\"</span><span class=\"p\">,</span> <span class=\"n\">api_key</span><span class=\"o\">=</span><span class=\"s2\">\"some-api-key\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Querying Collections</h3>\n<p>Then we can query all the running jobs. To do that we need to create a <code>JobQuery</code> instance which we use to specify the parameters of our query. For example, we can query all completed jobs. To get the result we call the <code>run()</code> method of the query object and pass the connection instance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">JobQuery</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">JobQuery</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">\"completed\"</span><span class=\"p\">)</span>\n<span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">next_query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>The result will contain a list of <code>Job</code> objects taht satisfy our query. Results are paginated to limit the size of each request. If there are more pages to be loaded, then the <code>next_query</code> variable will contain a <code>JobQuery</code> instance that we can run and return the next page. The full pattern for loading all jobs is the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">JobQuery</span>\n\n<span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"n\">JobQuery</span><span class=\"p\">(</span><span class=\"n\">status</span><span class=\"o\">=</span><span class=\"s2\">\"completed\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">next_result</span><span class=\"p\">,</span> <span class=\"n\">next_query</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"n\">query</span>\n<span class=\"k\">while</span> <span class=\"n\">next_query</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n    <span class=\"n\">next_result</span><span class=\"p\">,</span> <span class=\"n\">next_query</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n    <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">next_result</span><span class=\"p\">)</span>\n</pre>\n<p>We can take the first completed job and get a list of its tasks.</p>\n<pre><span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">result</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">tasks</span>\n</pre>\n<p>The <code>tasks</code> list actually contains \"shallow\" instances of the <code>Task</code> class. This means that each instance contains only the task's <code>id</code> field and no other fields. This is normal because the <code>Job</code> object has only references to tasks, not entire tasks. To get a full version of a task given a \"shallow\" instance, we use the <code>get()</code> method.</p>\n<pre><span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<h3>Querying Specific Objects</h3>\n<p>The <code>Task</code> object can also be used to query tasks by their ID. We simply create a new \"shallow\" instance using a task ID and call the <code>get()</code> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span>\n\n<span class=\"n\">task</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"some-task-id\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<h3>Creating Objects</h3>\n<p>We have the ability to create certain objects, such as <code>Dataset</code>, <code>Module</code> and <code>Job</code>. We do this by initializing an instance of that object, assigning values to relevant fields and calling the <code>post()</code> method. Here is an example of creating a dataset object along with uploading of a dataset.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span><span class=\"p\">,</span> <span class=\"n\">DatasetSource</span><span class=\"p\">,</span> <span class=\"n\">DatasetStatus</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"test_dataset_1\"</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"o\">=</span><span class=\"n\">DatasetSource</span><span class=\"o\">.</span><span class=\"n\">UPLOAD</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Test Dataset 1\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"test_dataset_1.tar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"o\">=</span><span class=\"n\">connection</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Once the dataset upload finishes, we need to update the status of the dataset to \"transferred\".</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">=</span> <span class=\"n\">DatasetStatus</span><span class=\"o\">.</span><span class=\"n\">TRANSFERRED</span>\n\n<span class=\"c1\"># Once we assign values to fields, we use the patch command</span>\n<span class=\"c1\"># to apply updates to the dataset object on the server.</span>\n<span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">patch</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<h3>Starting a new training Job and monitoring it</h3>\n<p>Here we show a slightly more complex example that demonstrates how to start a model selection and tuning job given a previously uploaded dataset.</p>\n<p>We will first fetch the dataset object in order to be able to access its schema.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"s2\">\"test_dataset_1\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>Then we query all models that are applicable to the given dataset. We use the <code>ModuleQuery</code> class for this.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">ModuleQuery</span><span class=\"p\">,</span> <span class=\"n\">ModuleType</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ModuleQuery</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">ModuleType</span><span class=\"o\">.</span><span class=\"n\">MODEL</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">ModuleStatus</span><span class=\"o\">.</span><span class=\"n\">ACTIVE</span><span class=\"p\">,</span>\n                    <span class=\"n\">schema_in</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">schema_in</span><span class=\"p\">,</span> <span class=\"n\">schema_out</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">schema_out</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We assume that the result does not contain more than one page.</span>\n<span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>We do the same for objectives.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">ModuleQuery</span><span class=\"p\">,</span> <span class=\"n\">ModuleType</span>\n\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ModuleQuery</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">ModuleType</span><span class=\"o\">.</span><span class=\"n\">OBJECTIVE</span><span class=\"p\">,</span> <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">ModuleStatus</span><span class=\"o\">.</span><span class=\"n\">ACTIVE</span><span class=\"p\">,</span>\n                    <span class=\"n\">schema_in</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">schema_in</span><span class=\"p\">,</span> <span class=\"n\">schema_out</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">schema_out</span><span class=\"p\">)</span>\n<span class=\"n\">objectives</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We will simply pick the first objective here.</span>\n<span class=\"n\">objective</span> <span class=\"o\">=</span> <span class=\"n\">objectives</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n</pre>\n<p>Then we are ready to create a job.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">Job</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">Job</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"n\">objective</span><span class=\"o\">=</span><span class=\"n\">objective</span><span class=\"p\">,</span> <span class=\"n\">models</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">max_tasks</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>With <code>max_tasks</code> we specify the number of tasks to run before a job's status will become <code>completed</code>. We can keep querying the job to check the status.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">JobStatus</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"n\">JobStatus</span><span class=\"o\">.</span><span class=\"n\">COMPLETED</span><span class=\"p\">:</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n</pre>\n<p>Once the job is completed, we can get the task with the best result.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">easemlclient.model</span> <span class=\"kn\">import</span> <span class=\"n\">TaskQuery</span><span class=\"p\">,</span> <span class=\"n\">ApiQueryOrder</span>\n\n<span class=\"n\">tasks</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">TaskQuery</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"o\">=</span><span class=\"n\">job</span><span class=\"p\">,</span> <span class=\"n\">order_by</span><span class=\"o\">=</span><span class=\"s2\">\"quality\"</span><span class=\"p\">,</span> <span class=\"n\">order</span><span class=\"o\">=</span><span class=\"n\">ApiQueryOrder</span><span class=\"o\">.</span><span class=\"n\">DESC</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n\n<span class=\"n\">best_task</span> <span class=\"o\">=</span> <span class=\"n\">tasks</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n</pre>\n<p>Finally, we can download the Docker image of the best task and save it as a tar file.</p>\n<pre><span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">best_task</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">(</span><span class=\"n\">connection</span><span class=\"p\">)</span>\n<span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/output/path/to/image.tar\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6326514, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e1de3e0f3750c194c16a54779df51ed5", "sha256": "c978069950a2dad5fd122075b35db0d869f1043491a428ce3de0fc2c54c2e47f"}, "downloads": -1, "filename": "easemlclient-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e1de3e0f3750c194c16a54779df51ed5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 40446, "upload_time": "2019-10-22T16:10:51", "upload_time_iso_8601": "2019-10-22T16:10:51.144527Z", "url": "https://files.pythonhosted.org/packages/b0/63/1407c176325e36c5c59b5f25f4481b76f4a05a77cd93e0614ed2f12de2c6/easemlclient-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "995099dbb2a431482ee274a095298e51", "sha256": "125fafbf2ec36ab49b55135051228b71efae83045d77aebaae8de2b24d6e3fc0"}, "downloads": -1, "filename": "easemlclient-0.1.0.tar.gz", "has_sig": false, "md5_digest": "995099dbb2a431482ee274a095298e51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9928, "upload_time": "2019-10-22T16:10:53", "upload_time_iso_8601": "2019-10-22T16:10:53.758777Z", "url": "https://files.pythonhosted.org/packages/6c/50/fc4b6b9f5c6290ca3c24595f3e14a026770eec52427cd27d8fcf8cf4cc0e/easemlclient-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9cbba05fc7389ac5dd204f1679df121d", "sha256": "243c96c3dfcec335455cf5aee3621bdeed7a291ad6696f4e6db2e52dbbeac191"}, "downloads": -1, "filename": "easemlclient-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9cbba05fc7389ac5dd204f1679df121d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15942, "upload_time": "2019-10-22T16:59:56", "upload_time_iso_8601": "2019-10-22T16:59:56.783139Z", "url": "https://files.pythonhosted.org/packages/f8/85/04aff8ff6a2bd54f0cad30482c6cbcd39b276d6205166f070f7707112cbb/easemlclient-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9f69d77057a03b5c0566edd83a889cd", "sha256": "670ca5f1114cb84ca1b0c8804361a67b4c5e583ee31e5d238d2910555d47c091"}, "downloads": -1, "filename": "easemlclient-0.1.1.tar.gz", "has_sig": false, "md5_digest": "c9f69d77057a03b5c0566edd83a889cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9974, "upload_time": "2019-10-22T16:59:58", "upload_time_iso_8601": "2019-10-22T16:59:58.679197Z", "url": "https://files.pythonhosted.org/packages/5b/d7/3bb9f02f0e2f8079e3c006e8022ceed0001108ea3f90ced5ccdf53003d2c/easemlclient-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "49e30b3d9ffbe8575ff5a8ca0adb849e", "sha256": "e019fd5ffbc02446861cfcfc6088bcd012a2c51ce91ebae93354cb85b5a2b021"}, "downloads": -1, "filename": "easemlclient-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "49e30b3d9ffbe8575ff5a8ca0adb849e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17773, "upload_time": "2019-10-22T18:07:40", "upload_time_iso_8601": "2019-10-22T18:07:40.395937Z", "url": "https://files.pythonhosted.org/packages/94/27/bf865b442b3a95a6b7b7c36469bfb12f7716898dc5091b7a54585f7e7415/easemlclient-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80d6fc58b56d191ecd8a45d57bf92bf6", "sha256": "cdd69ecb291f568b97e8c4e42e844362ea4b3b388144bbdda379ab47e53bdb91"}, "downloads": -1, "filename": "easemlclient-0.1.2.tar.gz", "has_sig": false, "md5_digest": "80d6fc58b56d191ecd8a45d57bf92bf6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13819, "upload_time": "2019-10-22T18:07:42", "upload_time_iso_8601": "2019-10-22T18:07:42.345469Z", "url": "https://files.pythonhosted.org/packages/91/d6/c736275608ae42f312d637df30c417a09272bb10ab805015f3c3cdf16a5d/easemlclient-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "9949cfe5bb1087c4af5f81684c843ce0", "sha256": "fb37bc8f7d71ce49ffcaa87da97a255738b697fd46db14dc8b5bba96217cb8c1"}, "downloads": -1, "filename": "easemlclient-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9949cfe5bb1087c4af5f81684c843ce0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18022, "upload_time": "2019-11-28T14:11:02", "upload_time_iso_8601": "2019-11-28T14:11:02.594389Z", "url": "https://files.pythonhosted.org/packages/50/0e/82e1d02fd1e1b78fa11b0d858b0b9ddba57a541e8015dd735788a427f8c0/easemlclient-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f3eb1f17e94726c7f6ac16d60faf5202", "sha256": "9e872a6405e9d54ad3d0ec3f72489c922b6a0671554a7c2f77028b62e9f8e3d8"}, "downloads": -1, "filename": "easemlclient-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f3eb1f17e94726c7f6ac16d60faf5202", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14052, "upload_time": "2019-11-28T14:11:04", "upload_time_iso_8601": "2019-11-28T14:11:04.090028Z", "url": "https://files.pythonhosted.org/packages/3d/38/5501b48f88178631771bbe3893a84c8a9c685573667e9c822a81e41e0077/easemlclient-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "742d2abfffa6004e84a530ae3e202358", "sha256": "4f32a4d54b0a11b564968ff47df679c1ac121dcd7c64c85cafb89af49f540bf0"}, "downloads": -1, "filename": "easemlclient-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "742d2abfffa6004e84a530ae3e202358", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18061, "upload_time": "2019-12-18T16:18:27", "upload_time_iso_8601": "2019-12-18T16:18:27.407172Z", "url": "https://files.pythonhosted.org/packages/b0/74/e28c0d7c9f32e39df0741e6aa97c995f7f0d72c8bf3d33c890b2e8245bff/easemlclient-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be7413de792f86a1d8a69111df30a220", "sha256": "ffc856fdaaa592b0d047354294b5f8a406cf2cbb01cf49bd0de3e18bc8af5a32"}, "downloads": -1, "filename": "easemlclient-0.1.4.tar.gz", "has_sig": false, "md5_digest": "be7413de792f86a1d8a69111df30a220", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14094, "upload_time": "2019-12-18T16:18:28", "upload_time_iso_8601": "2019-12-18T16:18:28.994977Z", "url": "https://files.pythonhosted.org/packages/b2/61/0d47bde17f25446370f537b7da792e18badd96d3a48859230adceda87c6c/easemlclient-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "742d2abfffa6004e84a530ae3e202358", "sha256": "4f32a4d54b0a11b564968ff47df679c1ac121dcd7c64c85cafb89af49f540bf0"}, "downloads": -1, "filename": "easemlclient-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "742d2abfffa6004e84a530ae3e202358", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18061, "upload_time": "2019-12-18T16:18:27", "upload_time_iso_8601": "2019-12-18T16:18:27.407172Z", "url": "https://files.pythonhosted.org/packages/b0/74/e28c0d7c9f32e39df0741e6aa97c995f7f0d72c8bf3d33c890b2e8245bff/easemlclient-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "be7413de792f86a1d8a69111df30a220", "sha256": "ffc856fdaaa592b0d047354294b5f8a406cf2cbb01cf49bd0de3e18bc8af5a32"}, "downloads": -1, "filename": "easemlclient-0.1.4.tar.gz", "has_sig": false, "md5_digest": "be7413de792f86a1d8a69111df30a220", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14094, "upload_time": "2019-12-18T16:18:28", "upload_time_iso_8601": "2019-12-18T16:18:28.994977Z", "url": "https://files.pythonhosted.org/packages/b2/61/0d47bde17f25446370f537b7da792e18badd96d3a48859230adceda87c6c/easemlclient-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:29 2020"}