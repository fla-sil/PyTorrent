{"info": {"author": "GE Flight Analytics", "author_email": "AviationAdiSupport@ge.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# Python Client Library for the EMS API\n\nThis project is a client library for the EMS API that is generated using [AutoRest](https://github.com/Azure/autorest). It is intended to be a direct mirror of the routes and models exposed by the EMS API. This makes the package suitable for purpose-built projects that want to use the low-level API routes directly with minimal effort.\n\nFor data science and exploratory use, consider using the [emsPy](https://github.com/ge-flight-analytics/emspy) package instead.\n\n## Getting Started\n\n### Install via pip\n\n```bash\npip install emsapi\n```\n\n### Create an API client\n\nIn your code, create an API client object using an endpoint, username, and password:\n\n```python\nfrom emsapi import emsapi\n\nuser = \"...\"\npassword = \"...\"\nurl = \"https://ems.efoqa.com/api/\"\n\nclient = emsapi.create(user, password, url)\n```\n\n### Retrieve EMS system id\n\nIf the EMS system id is not known, it should be retrieved before any further requests:\n\n```python\nems_id = client.find_ems_system_id('ems-server-name')\n```\n\n### Access routes on the API client\n\nDifferent routes are exposed as members of the `client` object created in the previous step. These routes match the sections in the `API Explorer` documentation in the web UI. Most of them need the ems system id (see previous step).\n\n```python\n# The routes exposed by the client:\nclient.analytic\nclient.analytic_set\nclient.asset\nclient.database\nclient.ems_profile\nclient.ems_system\nclient.navigation\nclient.parameter_set\nclient.profile\nclient.tableau\nclient.trajectory\nclient.transfer\nclient.upload\nclient.weather\n```\n\n## Examples\n\n### Handling errors\n\nCheck for and handle error messages from any route\n\n```python\nimport logging\n\nresponse = client.analytic.get_analytic_group_contents(ems_id)\nif client.is_error(response):\n    message = client.get_error_message(response)\n    logging.error(message)\n```\n\n### Analytic query\n\nQuery a time-series parameter for a flight\n\n```python\n# List the root analytic group contents\ngroups = client.analytic.get_analytic_group_contents(ems_id)\n\n# Query a specific analytic\nflight = 123\naltitude_id = \"H4sIAAAAAAAEAG2Q0QuCMBDG34P+B/HdbZVUiApBPQT2kgi9rrn0YM7aZvbnN5JVUvdwfHD34/vu4iPXrbjTs+D7kksDF+DKezRC6ggSvzbmGmHc9z3qF6hVFZ4TMsOnQ5azmjc0AKkNlYz7A/Mm9GusUUkNZa00ijLj+BCTFd6UgApF/XQ68bx4SMHVvkyd1GjX6KytgFER46+FEZBfObOZ2db6eBBJEIlvVGfz4P+LhYRbZ29NyVCzgJD1MgitDIhrrj6+P/h04obj36VPLpuOeVIBAAA=\"\n\n# Pull out altitude with 100 samples through the file.\nquery = {\n    \"select\": [\n        {\n            \"analyticId\": altitudeId\n        }\n    ],\n    \"size\": 100\n}\n\naltitude = client.analytic.get_query_results(ems_id, flight, query)\n```\n\n### Database query\n\nQuery and print the top 20 flight ids with a valid takeoff and landing\n\n```python\nquery = {\n  \"select\": [\n    {\n      \"fieldId\": \"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.uid]]]\",\n      \"aggregate\": \"none\"\n    },\n    {\n      \"fieldId\": \"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-takeoff]]]\",\n      \"aggregate\": \"none\"\n    }\n  ],\n  \"filter\": {\n      \"operator\": \"and\",\n      \"args\": [\n          {\n              \"type\": \"filter\",\n              \"value\": {\n                  \"operator\": \"isTrue\",\n                  \"args\": [\n                      {\n                          \"type\": \"field\",\n                          \"value\": \"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-takeoff]]]\"\n                      }\n                  ]\n              }\n          },\n          {\n              \"type\": \"filter\",\n              \"value\": {\n                  \"operator\": \"isTrue\",\n                  \"args\": [\n                      {\n                          \"type\": \"field\",\n                          \"value\": \"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-landing]]]\"\n                      }\n                  ]\n              }\n          }\n      ]\n  },\n  \"groupBy\": [],\n  \"orderBy\": [],\n  \"distinct\": True,\n  \"top\": 20,\n  \"format\": \"display\"\n}\n\nresult = client.database.get_query_results(ems_id, '[ems-core][entity-type][foqa-flights]', query)\npd = pandas.DataFrame(result.rows, columns=['Flight Record', 'Takeoff Exists'])\nprint(pd)\n```\n\n### Async Database query\n\nRun the same query as above, but with paging for a large number of result rows\n\n```python\nquery['top'] = 5000000\n\ndb_id = '[ems-core][entity-type][foqa-flights]'\nresponse = client.database.start_async_query(ems_id, db_id, query)\nif client.is_error(response):\n    error = client.get_error_message(response)\n    raise ValueError(error)\n\nasync_query_id = response.id\ntry:\n    start_index = 0\n    batch_size = 20000\n    while True:\n        end_index = start_index + (batch_size - 1)\n        read_response = client.database.read_async_query(emsId, db_id, async_query_id, start_index, end_index)\n        if client.is_error(read_response):\n            break # Some kind of error occurred\n\n        if len(read_response.rows) > 0:\n            for row in read_response.rows:\n                print(row)\n\n        if not read_response.has_more_rows:\n            break\n\n        start_index = end_index + 1\nfinally:\n    client.database.stop_async_query(emsId, db_id, async_query_id)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ge-flight-analytics/emsapi-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "emsapi", "package_url": "https://pypi.org/project/emsapi/", "platform": "", "project_url": "https://pypi.org/project/emsapi/", "project_urls": {"Homepage": "https://github.com/ge-flight-analytics/emsapi-python"}, "release_url": "https://pypi.org/project/emsapi/0.2.0/", "requires_dist": ["msrest (>=0.6.10)"], "requires_python": "", "summary": "A Python EMS RESTful API Client/Wrapper", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Client Library for the EMS API</h1>\n<p>This project is a client library for the EMS API that is generated using <a href=\"https://github.com/Azure/autorest\" rel=\"nofollow\">AutoRest</a>. It is intended to be a direct mirror of the routes and models exposed by the EMS API. This makes the package suitable for purpose-built projects that want to use the low-level API routes directly with minimal effort.</p>\n<p>For data science and exploratory use, consider using the <a href=\"https://github.com/ge-flight-analytics/emspy\" rel=\"nofollow\">emsPy</a> package instead.</p>\n<h2>Getting Started</h2>\n<h3>Install via pip</h3>\n<pre>pip install emsapi\n</pre>\n<h3>Create an API client</h3>\n<p>In your code, create an API client object using an endpoint, username, and password:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">emsapi</span> <span class=\"kn\">import</span> <span class=\"n\">emsapi</span>\n\n<span class=\"n\">user</span> <span class=\"o\">=</span> <span class=\"s2\">\"...\"</span>\n<span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s2\">\"...\"</span>\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"https://ems.efoqa.com/api/\"</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">emsapi</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">user</span><span class=\"p\">,</span> <span class=\"n\">password</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">)</span>\n</pre>\n<h3>Retrieve EMS system id</h3>\n<p>If the EMS system id is not known, it should be retrieved before any further requests:</p>\n<pre><span class=\"n\">ems_id</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">find_ems_system_id</span><span class=\"p\">(</span><span class=\"s1\">'ems-server-name'</span><span class=\"p\">)</span>\n</pre>\n<h3>Access routes on the API client</h3>\n<p>Different routes are exposed as members of the <code>client</code> object created in the previous step. These routes match the sections in the <code>API Explorer</code> documentation in the web UI. Most of them need the ems system id (see previous step).</p>\n<pre><span class=\"c1\"># The routes exposed by the client:</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">analytic</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">analytic_set</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">asset</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">database</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ems_profile</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">ems_system</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">navigation</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">parameter_set</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">profile</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">tableau</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">trajectory</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">transfer</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">weather</span>\n</pre>\n<h2>Examples</h2>\n<h3>Handling errors</h3>\n<p>Check for and handle error messages from any route</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">analytic</span><span class=\"o\">.</span><span class=\"n\">get_analytic_group_contents</span><span class=\"p\">(</span><span class=\"n\">ems_id</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_error_message</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">error</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"p\">)</span>\n</pre>\n<h3>Analytic query</h3>\n<p>Query a time-series parameter for a flight</p>\n<pre><span class=\"c1\"># List the root analytic group contents</span>\n<span class=\"n\">groups</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">analytic</span><span class=\"o\">.</span><span class=\"n\">get_analytic_group_contents</span><span class=\"p\">(</span><span class=\"n\">ems_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Query a specific analytic</span>\n<span class=\"n\">flight</span> <span class=\"o\">=</span> <span class=\"mi\">123</span>\n<span class=\"n\">altitude_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"H4sIAAAAAAAEAG2Q0QuCMBDG34P+B/HdbZVUiApBPQT2kgi9rrn0YM7aZvbnN5JVUvdwfHD34/vu4iPXrbjTs+D7kksDF+DKezRC6ggSvzbmGmHc9z3qF6hVFZ4TMsOnQ5azmjc0AKkNlYz7A/Mm9GusUUkNZa00ijLj+BCTFd6UgApF/XQ68bx4SMHVvkyd1GjX6KytgFER46+FEZBfObOZ2db6eBBJEIlvVGfz4P+LhYRbZ29NyVCzgJD1MgitDIhrrj6+P/h04obj36VPLpuOeVIBAAA=\"</span>\n\n<span class=\"c1\"># Pull out altitude with 100 samples through the file.</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"select\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"s2\">\"analyticId\"</span><span class=\"p\">:</span> <span class=\"n\">altitudeId</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">],</span>\n    <span class=\"s2\">\"size\"</span><span class=\"p\">:</span> <span class=\"mi\">100</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">altitude</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">analytic</span><span class=\"o\">.</span><span class=\"n\">get_query_results</span><span class=\"p\">(</span><span class=\"n\">ems_id</span><span class=\"p\">,</span> <span class=\"n\">flight</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n<h3>Database query</h3>\n<p>Query and print the top 20 flight ids with a valid takeoff and landing</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n  <span class=\"s2\">\"select\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"fieldId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.uid]]]\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"aggregate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"none\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"s2\">\"fieldId\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-takeoff]]]\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"aggregate\"</span><span class=\"p\">:</span> <span class=\"s2\">\"none\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">],</span>\n  <span class=\"s2\">\"filter\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"and\"</span><span class=\"p\">,</span>\n      <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n          <span class=\"p\">{</span>\n              <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"filter\"</span><span class=\"p\">,</span>\n              <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                  <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"isTrue\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                      <span class=\"p\">{</span>\n                          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"field\"</span><span class=\"p\">,</span>\n                          <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-takeoff]]]\"</span>\n                      <span class=\"p\">}</span>\n                  <span class=\"p\">]</span>\n              <span class=\"p\">}</span>\n          <span class=\"p\">},</span>\n          <span class=\"p\">{</span>\n              <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"filter\"</span><span class=\"p\">,</span>\n              <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                  <span class=\"s2\">\"operator\"</span><span class=\"p\">:</span> <span class=\"s2\">\"isTrue\"</span><span class=\"p\">,</span>\n                  <span class=\"s2\">\"args\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                      <span class=\"p\">{</span>\n                          <span class=\"s2\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"field\"</span><span class=\"p\">,</span>\n                          <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"s2\">\"[-hub-][field][[[ems-core][entity-type][foqa-flights]][[ems-core][base-field][flight.exist-landing]]]\"</span>\n                      <span class=\"p\">}</span>\n                  <span class=\"p\">]</span>\n              <span class=\"p\">}</span>\n          <span class=\"p\">}</span>\n      <span class=\"p\">]</span>\n  <span class=\"p\">},</span>\n  <span class=\"s2\">\"groupBy\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"s2\">\"orderBy\"</span><span class=\"p\">:</span> <span class=\"p\">[],</span>\n  <span class=\"s2\">\"distinct\"</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"top\"</span><span class=\"p\">:</span> <span class=\"mi\">20</span><span class=\"p\">,</span>\n  <span class=\"s2\">\"format\"</span><span class=\"p\">:</span> <span class=\"s2\">\"display\"</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">get_query_results</span><span class=\"p\">(</span><span class=\"n\">ems_id</span><span class=\"p\">,</span> <span class=\"s1\">'[ems-core][entity-type][foqa-flights]'</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"n\">pd</span> <span class=\"o\">=</span> <span class=\"n\">pandas</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">rows</span><span class=\"p\">,</span> <span class=\"n\">columns</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Flight Record'</span><span class=\"p\">,</span> <span class=\"s1\">'Takeoff Exists'</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pd</span><span class=\"p\">)</span>\n</pre>\n<h3>Async Database query</h3>\n<p>Run the same query as above, but with paging for a large number of result rows</p>\n<pre><span class=\"n\">query</span><span class=\"p\">[</span><span class=\"s1\">'top'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5000000</span>\n\n<span class=\"n\">db_id</span> <span class=\"o\">=</span> <span class=\"s1\">'[ems-core][entity-type][foqa-flights]'</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">start_async_query</span><span class=\"p\">(</span><span class=\"n\">ems_id</span><span class=\"p\">,</span> <span class=\"n\">db_id</span><span class=\"p\">,</span> <span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">):</span>\n    <span class=\"n\">error</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_error_message</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"n\">error</span><span class=\"p\">)</span>\n\n<span class=\"n\">async_query_id</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">id</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">start_index</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n    <span class=\"n\">batch_size</span> <span class=\"o\">=</span> <span class=\"mi\">20000</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">end_index</span> <span class=\"o\">=</span> <span class=\"n\">start_index</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">batch_size</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">read_response</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">read_async_query</span><span class=\"p\">(</span><span class=\"n\">emsId</span><span class=\"p\">,</span> <span class=\"n\">db_id</span><span class=\"p\">,</span> <span class=\"n\">async_query_id</span><span class=\"p\">,</span> <span class=\"n\">start_index</span><span class=\"p\">,</span> <span class=\"n\">end_index</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">is_error</span><span class=\"p\">(</span><span class=\"n\">read_response</span><span class=\"p\">):</span>\n            <span class=\"k\">break</span> <span class=\"c1\"># Some kind of error occurred</span>\n\n        <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">read_response</span><span class=\"o\">.</span><span class=\"n\">rows</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">read_response</span><span class=\"o\">.</span><span class=\"n\">rows</span><span class=\"p\">:</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"p\">)</span>\n\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">read_response</span><span class=\"o\">.</span><span class=\"n\">has_more_rows</span><span class=\"p\">:</span>\n            <span class=\"k\">break</span>\n\n        <span class=\"n\">start_index</span> <span class=\"o\">=</span> <span class=\"n\">end_index</span> <span class=\"o\">+</span> <span class=\"mi\">1</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">database</span><span class=\"o\">.</span><span class=\"n\">stop_async_query</span><span class=\"p\">(</span><span class=\"n\">emsId</span><span class=\"p\">,</span> <span class=\"n\">db_id</span><span class=\"p\">,</span> <span class=\"n\">async_query_id</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6744883, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5f86f141cd95c560b78b5e55e3bb83fb", "sha256": "101275914861dcbd480c3b6c80df34feeed0fd86a3c6733fb479f9dfe82d07f0"}, "downloads": -1, "filename": "emsapi-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5f86f141cd95c560b78b5e55e3bb83fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 233899, "upload_time": "2020-01-11T00:45:10", "upload_time_iso_8601": "2020-01-11T00:45:10.670821Z", "url": "https://files.pythonhosted.org/packages/78/1c/4c5c401a8d295abb4c735445b15eed771995c16eff6313fcb006740dac3a/emsapi-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9f69f6a1d4fc762859c70c28876ee83", "sha256": "31c1dd99e802298a2bf545051312c0d95cc962e05eca2f2a2d04d3b01d3e5623"}, "downloads": -1, "filename": "emsapi-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c9f69f6a1d4fc762859c70c28876ee83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71349, "upload_time": "2020-01-11T00:45:13", "upload_time_iso_8601": "2020-01-11T00:45:13.681457Z", "url": "https://files.pythonhosted.org/packages/e0/b9/be1d539ac4f14f47c28865eaebd864bcbdaf3e62e536a8aca5af689c9e89/emsapi-0.0.1.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "f877c1b773607c4a59fa513bdaea955a", "sha256": "c45a6a09f298669ab9f30e478fc69fde4475dae8c1006c9802f4a9fe2bb4447a"}, "downloads": -1, "filename": "emsapi-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f877c1b773607c4a59fa513bdaea955a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 233921, "upload_time": "2020-02-07T17:40:11", "upload_time_iso_8601": "2020-02-07T17:40:11.089819Z", "url": "https://files.pythonhosted.org/packages/64/74/28c081e0c6a3cd1438b1916b7068198cc6136f2b59b46920d87d91362c07/emsapi-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a1717e7b0c26ebd9fc03bbd49856c445", "sha256": "661595413a3ec7ed4b2081e7a34e2aaefc60db34c8b63a7277c28d0e3b76af46"}, "downloads": -1, "filename": "emsapi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "a1717e7b0c26ebd9fc03bbd49856c445", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71390, "upload_time": "2020-02-07T17:40:12", "upload_time_iso_8601": "2020-02-07T17:40:12.914973Z", "url": "https://files.pythonhosted.org/packages/46/f8/018293e1445fa50fe01d5121b4b49877e06aa5039f82ba8454acf96e9cc7/emsapi-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "81eb73945cab109e875964b4ff49709b", "sha256": "7e4b74e1945e0a9131e124d8c7a5e05b6fe9693a3e3e1705fe470ac81b876f7d"}, "downloads": -1, "filename": "emsapi-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "81eb73945cab109e875964b4ff49709b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 233934, "upload_time": "2020-02-21T21:24:44", "upload_time_iso_8601": "2020-02-21T21:24:44.840578Z", "url": "https://files.pythonhosted.org/packages/aa/c4/4452056b37c7dcfbd9a6b317acdfd086544d1f05e415981c8512ff7a02c7/emsapi-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a5b77ffe24c6bf584de771278764156a", "sha256": "951c242bbd09d137a4a08b3ebd192ea11ff1c7c6ddc3275793c5763b71cb0472"}, "downloads": -1, "filename": "emsapi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "a5b77ffe24c6bf584de771278764156a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71416, "upload_time": "2020-02-21T21:24:46", "upload_time_iso_8601": "2020-02-21T21:24:46.859511Z", "url": "https://files.pythonhosted.org/packages/69/6f/3a1c5254ae1e563fbe97f59e709fc80761b808c23e15ffaca9570656e619/emsapi-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "32dc289f193ec1fc252f91b7f678b2d6", "sha256": "1ea83adc464a9019681d3c65cd3b618df0ab6885f4986bcb0a03c3eef33a2772"}, "downloads": -1, "filename": "emsapi-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "32dc289f193ec1fc252f91b7f678b2d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 233939, "upload_time": "2020-03-03T17:31:56", "upload_time_iso_8601": "2020-03-03T17:31:56.111402Z", "url": "https://files.pythonhosted.org/packages/5a/16/d4c7e6b71c5f39d357ea762401f3160b30a3d414a5e1a9a90b60bd440a4b/emsapi-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c85a70927e631550d94bd78438f5802d", "sha256": "0bfb07ff1be1f149e98d711e5276deba99727a8a1ddfc5bfdf2713a7777c8cf1"}, "downloads": -1, "filename": "emsapi-0.1.2.tar.gz", "has_sig": false, "md5_digest": "c85a70927e631550d94bd78438f5802d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 71422, "upload_time": "2020-03-03T17:31:57", "upload_time_iso_8601": "2020-03-03T17:31:57.885071Z", "url": "https://files.pythonhosted.org/packages/ef/58/1a8e510e25d5351a322c646d753e39467c68585255af7d7e0cae48b6ee74/emsapi-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "875eceaeb8bab35d67736c70fb40180a", "sha256": "8244c02cbf135b4ed657125a9fff43f3a2974dd4ae1f9aae51bd926b231464b3"}, "downloads": -1, "filename": "emsapi-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "875eceaeb8bab35d67736c70fb40180a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 235009, "upload_time": "2020-03-04T02:15:30", "upload_time_iso_8601": "2020-03-04T02:15:30.847639Z", "url": "https://files.pythonhosted.org/packages/f0/61/bb1406c582f9fcc0b330bd1b5902ddd88d9955af56f816202d607038279c/emsapi-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3b19fef23432e561b0aba1bdbf05d8e", "sha256": "94ee0d232ffbb32c4073df1c106d1944a7e8a71e8ad378529ca3bdca4410fd42"}, "downloads": -1, "filename": "emsapi-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e3b19fef23432e561b0aba1bdbf05d8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73407, "upload_time": "2020-03-04T02:15:32", "upload_time_iso_8601": "2020-03-04T02:15:32.643956Z", "url": "https://files.pythonhosted.org/packages/26/98/a01f2f36049d61bdd109be526868433b100c03d909dc939945ced23f31eb/emsapi-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "875eceaeb8bab35d67736c70fb40180a", "sha256": "8244c02cbf135b4ed657125a9fff43f3a2974dd4ae1f9aae51bd926b231464b3"}, "downloads": -1, "filename": "emsapi-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "875eceaeb8bab35d67736c70fb40180a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 235009, "upload_time": "2020-03-04T02:15:30", "upload_time_iso_8601": "2020-03-04T02:15:30.847639Z", "url": "https://files.pythonhosted.org/packages/f0/61/bb1406c582f9fcc0b330bd1b5902ddd88d9955af56f816202d607038279c/emsapi-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3b19fef23432e561b0aba1bdbf05d8e", "sha256": "94ee0d232ffbb32c4073df1c106d1944a7e8a71e8ad378529ca3bdca4410fd42"}, "downloads": -1, "filename": "emsapi-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e3b19fef23432e561b0aba1bdbf05d8e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 73407, "upload_time": "2020-03-04T02:15:32", "upload_time_iso_8601": "2020-03-04T02:15:32.643956Z", "url": "https://files.pythonhosted.org/packages/26/98/a01f2f36049d61bdd109be526868433b100c03d909dc939945ced23f31eb/emsapi-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:30 2020"}