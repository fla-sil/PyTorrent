{"info": {"author": "Tyson Holub", "author_email": "tholub@mobiusworks.com", "bugtrack_url": null, "classifiers": [], "description": "# Flask-CronDecorator\n\nSecurely decorates Google Cloud Cron Endpoints via convention and `X-Appengine-Cron` header.\n\nPer [the docs](https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#validating_cron_requests):\n\n>The X-Appengine-Cron header is set internally by Google App Engine. If your request handler finds this header it can trust that the request is a cron request. The X- headers are stripped by App Engine when they originate from external sources so that you can trust this header.\n\n## Installation\n\nAdd this line to your application's requirements.txt\n\n```python\nFlask-CronDecorator\n```\n\nAnd then execute:\n\n    $ pip install -r requirements.txt\n\nOr install it yourself as:\n\n    $ pip install Flask-CronDecorator\n\n## Usage\n\nThe following snippet should get you coding\n```python\nfrom flask import Flask, Blueprint\nfrom CronDecorator import CronDecorator\nimport logging\nfrom datetime import datetime, timedelta\nfrom models import Task, TaskRequest\n\n\napp = Flask(__name__)\napp.cron = CronDecorator(app)\n\n# blueprint can optionally be passed in for registering cron task endpoints in a blueprint\nadmin = Blueprint('admin', __name__, template_folder='templates', url_prefix='/admin')\nblueprint.cron = CronDecorator(app, blueprint)\n\napp.register_blueprint(admin)\n_logger = logging.getLogger(__name__)\n\n\n@admin.cron.task('/purge_tasks', methods=['GET'])  # creates /cron/admin/purge_tasks endpoint\ndef purge_tasks():\n    _logger.info('Purging first 100 Tasks older than 1 year')\n    year_ago = datetime.utcnow() - timedelta(days=365)\n    tasks = Task.query.filter(Task.created <= year_ago).order_by(Task.id.asc()).limit(100).all()\n    for task in tasks:\n        db.session.delete(task)\n\n    _logger.info('Purging first 1000 TaskRequests older than 2 weeks')\n    two_weeks_ago = datetime.utcnow() - timedelta(days=14)\n    task_requests = TaskRequest.query.join(Task).filter(\n        models.Task.created <= two_weeks_ago\n    ).order_by(Task.id.desc()).limit(1000).all()\n\n    for task_request in task_requests:\n        db.session.delete(task_request)\n\n    db.session.commit()\n\n    return '', 200\n```\n\n## Google Cloud Settings\n\nGiven the above snippet, you'll need to update your Google Cloud cron.yaml\n\n```yaml\ncron:\n- description: \"Purges Tasks older than 1 year and TaskRequests older than 2 weeks\"\n  url: /cron/admin/purge_tasks\n  schedule: every 30 minutes\n```\n\nBe sure your /cron/* endpoints are covered in Google Cloud app.yaml. Note: the handlers:script must be a wsgi path to your flask app instantiation relative to where the process is started, not necessarily where app.yaml lives.\n\n```yaml\nruntime: python\nruntime_config:\n  python_version: 2\nthreadsafe: true\nenv: flex\nhandlers:\n- script: flask.app\n  secure: always\n  url: /cron/.*\n```\n\n## Deploy\n\nDeploy app and cron.yaml to Google Cloud\n\n    $ gcloud app deploy\n    $ gcloud app deploy cron.yaml\n\n# Testing\n\n    $ pytest -s tests.py", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MobiusWorksLLC/Flask-CronDecorator.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "Flask-CronDecorator", "package_url": "https://pypi.org/project/Flask-CronDecorator/", "platform": "", "project_url": "https://pypi.org/project/Flask-CronDecorator/", "project_urls": {"Homepage": "https://github.com/MobiusWorksLLC/Flask-CronDecorator.git"}, "release_url": "https://pypi.org/project/Flask-CronDecorator/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "Securely decorates Google Cloud Cron Endpoints via convention and X-Appengine-Cron header", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Flask-CronDecorator</h1>\n<p>Securely decorates Google Cloud Cron Endpoints via convention and <code>X-Appengine-Cron</code> header.</p>\n<p>Per <a href=\"https://cloud.google.com/appengine/docs/flexible/python/scheduling-jobs-with-cron-yaml#validating_cron_requests\" rel=\"nofollow\">the docs</a>:</p>\n<blockquote>\n<p>The X-Appengine-Cron header is set internally by Google App Engine. If your request handler finds this header it can trust that the request is a cron request. The X- headers are stripped by App Engine when they originate from external sources so that you can trust this header.</p>\n</blockquote>\n<h2>Installation</h2>\n<p>Add this line to your application's requirements.txt</p>\n<pre><span class=\"n\">Flask</span><span class=\"o\">-</span><span class=\"n\">CronDecorator</span>\n</pre>\n<p>And then execute:</p>\n<pre><code>$ pip install -r requirements.txt\n</code></pre>\n<p>Or install it yourself as:</p>\n<pre><code>$ pip install Flask-CronDecorator\n</code></pre>\n<h2>Usage</h2>\n<p>The following snippet should get you coding</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">Flask</span><span class=\"p\">,</span> <span class=\"n\">Blueprint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">CronDecorator</span> <span class=\"kn\">import</span> <span class=\"n\">CronDecorator</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">from</span> <span class=\"nn\">models</span> <span class=\"kn\">import</span> <span class=\"n\">Task</span><span class=\"p\">,</span> <span class=\"n\">TaskRequest</span>\n\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">Flask</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">cron</span> <span class=\"o\">=</span> <span class=\"n\">CronDecorator</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># blueprint can optionally be passed in for registering cron task endpoints in a blueprint</span>\n<span class=\"n\">admin</span> <span class=\"o\">=</span> <span class=\"n\">Blueprint</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"vm\">__name__</span><span class=\"p\">,</span> <span class=\"n\">template_folder</span><span class=\"o\">=</span><span class=\"s1\">'templates'</span><span class=\"p\">,</span> <span class=\"n\">url_prefix</span><span class=\"o\">=</span><span class=\"s1\">'/admin'</span><span class=\"p\">)</span>\n<span class=\"n\">blueprint</span><span class=\"o\">.</span><span class=\"n\">cron</span> <span class=\"o\">=</span> <span class=\"n\">CronDecorator</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">blueprint</span><span class=\"p\">)</span>\n\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">register_blueprint</span><span class=\"p\">(</span><span class=\"n\">admin</span><span class=\"p\">)</span>\n<span class=\"n\">_logger</span> <span class=\"o\">=</span> <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">getLogger</span><span class=\"p\">(</span><span class=\"vm\">__name__</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">cron</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"s1\">'/purge_tasks'</span><span class=\"p\">,</span> <span class=\"n\">methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'GET'</span><span class=\"p\">])</span>  <span class=\"c1\"># creates /cron/admin/purge_tasks endpoint</span>\n<span class=\"k\">def</span> <span class=\"nf\">purge_tasks</span><span class=\"p\">():</span>\n    <span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Purging first 100 Tasks older than 1 year'</span><span class=\"p\">)</span>\n    <span class=\"n\">year_ago</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">365</span><span class=\"p\">)</span>\n    <span class=\"n\">tasks</span> <span class=\"o\">=</span> <span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"o\">&lt;=</span> <span class=\"n\">year_ago</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">asc</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n    <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tasks</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n    <span class=\"n\">_logger</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s1\">'Purging first 1000 TaskRequests older than 2 weeks'</span><span class=\"p\">)</span>\n    <span class=\"n\">two_weeks_ago</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">14</span><span class=\"p\">)</span>\n    <span class=\"n\">task_requests</span> <span class=\"o\">=</span> <span class=\"n\">TaskRequest</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span>\n        <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">created</span> <span class=\"o\">&lt;=</span> <span class=\"n\">two_weeks_ago</span>\n    <span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"o\">.</span><span class=\"n\">desc</span><span class=\"p\">())</span><span class=\"o\">.</span><span class=\"n\">limit</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n\n    <span class=\"k\">for</span> <span class=\"n\">task_request</span> <span class=\"ow\">in</span> <span class=\"n\">task_requests</span><span class=\"p\">:</span>\n        <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">task_request</span><span class=\"p\">)</span>\n\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n    <span class=\"k\">return</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"mi\">200</span>\n</pre>\n<h2>Google Cloud Settings</h2>\n<p>Given the above snippet, you'll need to update your Google Cloud cron.yaml</p>\n<pre><span class=\"nt\">cron</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">description</span><span class=\"p\">:</span> <span class=\"s\">\"Purges</span><span class=\"nv\"> </span><span class=\"s\">Tasks</span><span class=\"nv\"> </span><span class=\"s\">older</span><span class=\"nv\"> </span><span class=\"s\">than</span><span class=\"nv\"> </span><span class=\"s\">1</span><span class=\"nv\"> </span><span class=\"s\">year</span><span class=\"nv\"> </span><span class=\"s\">and</span><span class=\"nv\"> </span><span class=\"s\">TaskRequests</span><span class=\"nv\"> </span><span class=\"s\">older</span><span class=\"nv\"> </span><span class=\"s\">than</span><span class=\"nv\"> </span><span class=\"s\">2</span><span class=\"nv\"> </span><span class=\"s\">weeks\"</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/cron/admin/purge_tasks</span>\n  <span class=\"nt\">schedule</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">every 30 minutes</span>\n</pre>\n<p>Be sure your /cron/* endpoints are covered in Google Cloud app.yaml. Note: the handlers:script must be a wsgi path to your flask app instantiation relative to where the process is started, not necessarily where app.yaml lives.</p>\n<pre><span class=\"nt\">runtime</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">python</span>\n<span class=\"nt\">runtime_config</span><span class=\"p\">:</span>\n  <span class=\"nt\">python_version</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">2</span>\n<span class=\"nt\">threadsafe</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n<span class=\"nt\">env</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">flex</span>\n<span class=\"nt\">handlers</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">script</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">flask.app</span>\n  <span class=\"nt\">secure</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">always</span>\n  <span class=\"nt\">url</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">/cron/.*</span>\n</pre>\n<h2>Deploy</h2>\n<p>Deploy app and cron.yaml to Google Cloud</p>\n<pre><code>$ gcloud app deploy\n$ gcloud app deploy cron.yaml\n</code></pre>\n<h1>Testing</h1>\n<pre><code>$ pytest -s tests.py\n</code></pre>\n\n          </div>"}, "last_serial": 4513591, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "76a4936fb7dffd4929f40db833657a4e", "sha256": "69e933e9fc0e66789b76c735513b431c3539a43c6c72c350a11f569c83364915"}, "downloads": -1, "filename": "Flask-CronDecorator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "76a4936fb7dffd4929f40db833657a4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2723, "upload_time": "2018-04-27T16:23:41", "upload_time_iso_8601": "2018-04-27T16:23:41.163175Z", "url": "https://files.pythonhosted.org/packages/ec/ea/4c5db2041414c44db8aaa877e0cc326793855bec4cd951e6b9f755c072b8/Flask-CronDecorator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b9d13ac86812a3ce3f87ef09c6d7e4fc", "sha256": "2f6b2eae717faf4999ecb258f29ffdda60fac01c42017ecfb03e7da90469575b"}, "downloads": -1, "filename": "Flask-CronDecorator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b9d13ac86812a3ce3f87ef09c6d7e4fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3191, "upload_time": "2018-05-15T15:23:58", "upload_time_iso_8601": "2018-05-15T15:23:58.940486Z", "url": "https://files.pythonhosted.org/packages/70/2b/432e3d6cb569911c0a54b3784a5b2acd80c17d8f224576d9550deaf64db9/Flask-CronDecorator-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "c7fb5c4976dcaccb1b1197223e1d9648", "sha256": "177694682cccf747ccc121775540679f92c954cd600ea662c74c5b5cd6583334"}, "downloads": -1, "filename": "Flask-CronDecorator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c7fb5c4976dcaccb1b1197223e1d9648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3185, "upload_time": "2018-11-21T17:23:57", "upload_time_iso_8601": "2018-11-21T17:23:57.394731Z", "url": "https://files.pythonhosted.org/packages/fb/9b/ed019aa71c40e276085cd7d735fa52f47de26255a774607f6fc4d0ebe96e/Flask-CronDecorator-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7fb5c4976dcaccb1b1197223e1d9648", "sha256": "177694682cccf747ccc121775540679f92c954cd600ea662c74c5b5cd6583334"}, "downloads": -1, "filename": "Flask-CronDecorator-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c7fb5c4976dcaccb1b1197223e1d9648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3185, "upload_time": "2018-11-21T17:23:57", "upload_time_iso_8601": "2018-11-21T17:23:57.394731Z", "url": "https://files.pythonhosted.org/packages/fb/9b/ed019aa71c40e276085cd7d735fa52f47de26255a774607f6fc4d0ebe96e/Flask-CronDecorator-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:59 2020"}