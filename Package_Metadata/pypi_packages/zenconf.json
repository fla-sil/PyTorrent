{"info": {"author": "Alan Bates", "author_email": "alan.bates@news.co.uk", "bugtrack_url": null, "classifiers": [], "description": "Zenconf documentation\n=========================\nZenconf is an unopinionated config management system. You put dicts in, it\nrecursively merges them, then returns a single dict with values from later\ndicts overwriting values from earlier dicts.\n\nA default implementation shows how to pull values from a dictionary of\ndefaults, a config file, environment variables and command line parameters.\nSimply create your own custom config class and add values from whatever data\nsources you like in your chosen order of precedence. Then, request the merged\ndictionary and use it throughout the rest of your code.\n\nFeatures\n--------\n  * Simple. Just add dicts (or OrderedDicts) from wherever you like, and get\n    the merged dictionary back.\n  * No constraints on using a particular config file system, arg parser, etc.\n  * Key names can be normalised by applying a function to keys recursively to\n    make for easier comparison between keys from different data sources\n    (e.g. from environment variables or yaml files,\n    where one uses underscores to separate words, the other hyphens). By\n    default keys will be converted to lowercase, have hyphens converted to\n    underscores and then have leading underscores removed.\n  * Support for filtering by, and stripping an app-specific prefix from keys\n    (configurable per data source). This means that if your app is called\n    `MYAPP`, only environment variables with a prefix of `MYAPP_` could be\n    added, e.g. `MYAPP_LOG_LEVEL=debug` could override a commandline argument\n    `--log-level`.\n\nInstallation\n------------\nClone the repo then run `./setup.py install`.\n\nOr, install from pypi with:\n\n`pip install zenconf`\n\nRun tests with:\n\n`./setup.py test`\n\nUsage\n-----\nUsage is simple. Just instantiate an instance of\nzenconf.MergedConfig:\n\n  * The `appname` parameter can be used to namespace keys (such as environment\n    variables).\n  * The `dict_boundary` parameter specifies a string that indicates that we\n    should look up the next string fragment in a subdictionary. E.g. using a\n    default of '__', the string `LOG__LEVEL` refers to config['log']['level'].\n\nNext, add dicts via the `add()` method.\n\nTo get the merged dict, just call `get_merged_config()`.\n\nSee comments in the code for more information about parameters. Also see the\nexample in the `examples` directory of one way to use the class.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nws-cip/zenconf", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "zenconf", "package_url": "https://pypi.org/project/zenconf/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zenconf/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nws-cip/zenconf"}, "release_url": "https://pypi.org/project/zenconf/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Simple configuration system based on recursively merging dicts.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Zenconf is an unopinionated config management system. You put dicts in, it\nrecursively merges them, then returns a single dict with values from later\ndicts overwriting values from earlier dicts.</p>\n<p>A default implementation shows how to pull values from a dictionary of\ndefaults, a config file, environment variables and command line parameters.\nSimply create your own custom config class and add values from whatever data\nsources you like in your chosen order of precedence. Then, request the merged\ndictionary and use it throughout the rest of your code.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<blockquote>\n<ul>\n<li>Simple. Just add dicts (or OrderedDicts) from wherever you like, and get\nthe merged dictionary back.</li>\n<li>No constraints on using a particular config file system, arg parser, etc.</li>\n<li>Key names can be normalised by applying a function to keys recursively to\nmake for easier comparison between keys from different data sources\n(e.g. from environment variables or yaml files,\nwhere one uses underscores to separate words, the other hyphens). By\ndefault keys will be converted to lowercase, have hyphens converted to\nunderscores and then have leading underscores removed.</li>\n<li>Support for filtering by, and stripping an app-specific prefix from keys\n(configurable per data source). This means that if your app is called\n<cite>MYAPP</cite>, only environment variables with a prefix of <cite>MYAPP_</cite> could be\nadded, e.g. <cite>MYAPP_LOG_LEVEL=debug</cite> could override a commandline argument\n<cite>\u2013log-level</cite>.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Clone the repo then run <cite>./setup.py install</cite>.</p>\n<p>Or, install from pypi with:</p>\n<p><cite>pip install zenconf</cite></p>\n<p>Run tests with:</p>\n<p><cite>./setup.py test</cite></p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Usage is simple. Just instantiate an instance of\nzenconf.MergedConfig:</p>\n<blockquote>\n<ul>\n<li>The <cite>appname</cite> parameter can be used to namespace keys (such as environment\nvariables).</li>\n<li>The <cite>dict_boundary</cite> parameter specifies a string that indicates that we\nshould look up the next string fragment in a subdictionary. E.g. using a\ndefault of \u2018__\u2019, the string <cite>LOG__LEVEL</cite> refers to config[\u2018log\u2019][\u2018level\u2019].</li>\n</ul>\n</blockquote>\n<p>Next, add dicts via the <cite>add()</cite> method.</p>\n<p>To get the merged dict, just call <cite>get_merged_config()</cite>.</p>\n<p>See comments in the code for more information about parameters. Also see the\nexample in the <cite>examples</cite> directory of one way to use the class.</p>\n</div>\n\n          </div>"}, "last_serial": 991141, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "bf218b8af1c3c439010b0f40b5687124", "sha256": "020e7b7495b95bfe873d771ec0be7f2089768297e2ef6209f2a130f631007868"}, "downloads": -1, "filename": "zenconf-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bf218b8af1c3c439010b0f40b5687124", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4639, "upload_time": "2014-01-30T10:00:24", "upload_time_iso_8601": "2014-01-30T10:00:24.718747Z", "url": "https://files.pythonhosted.org/packages/8b/04/346124354690e775067f345d10e3a5a7d8e6062c47847b7182ba6f4fb506/zenconf-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "cce08f1f176b55da9efca62884b752b3", "sha256": "13d1b3f5924f13b7383afa0296bee0baf4b00bff668281016b4a3fe108ca545d"}, "downloads": -1, "filename": "zenconf-0.1.3.tar.gz", "has_sig": false, "md5_digest": "cce08f1f176b55da9efca62884b752b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4758, "upload_time": "2014-01-31T12:06:06", "upload_time_iso_8601": "2014-01-31T12:06:06.044853Z", "url": "https://files.pythonhosted.org/packages/38/ff/7c353700c93a6cf79ae7cabef7992a37eaeaf856e7184aff386abe22312b/zenconf-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "543cb9dc0adc76ffee48089e5e2cdcef", "sha256": "a5a21982506750c76b82a690222e5e278ba574352adde5953821e940c6323aff"}, "downloads": -1, "filename": "zenconf-0.1.4.tar.gz", "has_sig": false, "md5_digest": "543cb9dc0adc76ffee48089e5e2cdcef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5066, "upload_time": "2014-02-05T10:28:42", "upload_time_iso_8601": "2014-02-05T10:28:42.289890Z", "url": "https://files.pythonhosted.org/packages/2e/db/78e5cf4eeb06c1ed049db90c8c06e3b0447c44b583cd30e5966970f549f1/zenconf-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "543cb9dc0adc76ffee48089e5e2cdcef", "sha256": "a5a21982506750c76b82a690222e5e278ba574352adde5953821e940c6323aff"}, "downloads": -1, "filename": "zenconf-0.1.4.tar.gz", "has_sig": false, "md5_digest": "543cb9dc0adc76ffee48089e5e2cdcef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5066, "upload_time": "2014-02-05T10:28:42", "upload_time_iso_8601": "2014-02-05T10:28:42.289890Z", "url": "https://files.pythonhosted.org/packages/2e/db/78e5cf4eeb06c1ed049db90c8c06e3b0447c44b583cd30e5966970f549f1/zenconf-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:18:14 2020"}