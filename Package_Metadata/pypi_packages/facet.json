{"info": {"author": "pohmelie", "author_email": "multisosnooley@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "# Facet\n[![Travis status for master branch](https://travis-ci.com/pohmelie/facet.svg?branch=master)](https://travis-ci.com/pohmelie/facet)\n[![Codecov coverage for master branch](https://codecov.io/gh/pohmelie/facet/branch/master/graph/badge.svg)](https://codecov.io/gh/pohmelie/facet)\n[![Pypi version](https://img.shields.io/pypi/v/facet.svg)](https://pypi.org/project/facet/)\n[![Pypi downloads count](https://img.shields.io/pypi/dm/facet)](https://pypi.org/project/facet/)\n\nService manager for asyncio.\n\n# Reason\n[`mode`](https://github.com/ask/mode) tries to do too much job:\n- Messy callbacks (`on_start`, `on_started`, `on_crashed`, etc.).\n- Inheritance restrict naming and forces `super()` calls.\n- Forced logging module and logging configuration.\n\n# Features\n- Simple (`start`, `stop`, `dependencies` and `add_task`).\n- Configurable via inheritance (graceful shutdown timeout, logging).\n- Mixin (no `super()` required).\n- Requires no runner engine (`Worker`, `Runner`, etc.) just plain `await` or `async with`.\n\n# License\n`facet` is offered under MIT license.\n\n# Requirements\n* python 3.7+\n\n# Usage\n``` python\nimport asyncio\nimport logging\n\nfrom facet import ServiceMixin\n\n\nclass B(ServiceMixin):\n\n    def __init__(self):\n        self.value = 0\n\n    async def start(self):\n        self.value += 1\n        logging.info(\"b started\")\n\n    async def stop(self):\n        self.value -= 1\n        logging.info(\"b stopped\")\n\n\nclass A(ServiceMixin):\n\n    def __init__(self):\n        self.b = B()\n\n    @property\n    def dependencies(self):\n        return [self.b]\n\n    async def start(self):\n        logging.info(\"a started\")\n\n    async def stop(self):\n        logging.info(\"a stopped\")\n\n\nlogging.basicConfig(level=logging.DEBUG)\nasyncio.run(A().run())\n```\nThis will produce:\n```\nINFO:root:b started\nINFO:root:a started\n```\nStart and stop order determined by strict rule: **dependencies must be started first and stopped last**. That is why `B` starts before `A`. Since `A` may use `B` in `start` routine.\n\nHit `ctrl-c` and you will see:\n```\nINFO:root:a stopped\nINFO:root:b stopped\nTraceback (most recent call last):\n  ...\nKeyboardInterrupt\n```\nStop order is reversed, since `A` may use `B` in `stop` routine. Any raised exception propagates to upper context. `facet` do not trying to be too smart.\n\nService can be used as a context manager. Instead of\n``` python\nasyncio.run(A().run())\n```\nCode can look like:\n``` python\nasync def main():\n    async with A() as a:\n        assert a.b.value == 1\n        await a.wait()\n\nasyncio.run(main())\n```\n\nAnother service feature is `add_task` method:\n``` python\nclass A(ServiceMixin):\n\n    async def task(self):\n        await asyncio.sleep(1)\n        logging.info(\"task done\")\n\n    async def start(self):\n        await self.add_task(self.task())\n        logging.info(\"start done\")\n\n\nlogging.basicConfig(level=logging.DEBUG)\nasyncio.run(A().run())\n```\nThis will lead to background task creation and handling:\n```\nINFO:root:start done\nINFO:root:task done\n```\nAny non-handled exception on background task will lead the whole service stack crashed. This is also a key feature to fall down fast and loud.\n\nAll background tasks will be cancelled and awaited on service stop.\n\n# API\nHere is public methods you get on inheritance/mixin:\n## `wait`\n``` python\nasync def wait(self):\n```\nWait for service stop. Service must be started. This is useful when you use service as a context manager.\n\n## `run`\n``` python\nasync def run(self):\n```\nRun service and wait until it stop.\n\n## `graceful_shutdown_timeout`\n``` python\n@property\ndef graceful_shutdown_timeout(self):\n    return 10\n```\nHow much total time in seconds wait for stop routines. This property can be overriden with subclass:\n``` python\nclass CustomServiceMixin(ServiceMixin):\n    @property\n    def graceful_shutdown_timeout(self):\n        return 60\n```\n\n## `dependencies`\n``` python\n@property\ndef dependencies(self):\n    return []\n```\nShould return iterable of current service dependencies instances.\n\n## `running`\n``` python\n@property\ndef running(self):\n```\nCheck if service is running\n\n## `add_task`\n``` python\nasync def add_task(self, coro):\n```\nAdd background task.\n\n## `start`\n``` python\nasync def start(self):\n    pass\n```\nStart routine.\n\n## `stop`\n``` python\nasync def stop(self):\n    pass\n```\nStop routine.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pohmelie/facet", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "facet", "package_url": "https://pypi.org/project/facet/", "platform": "", "project_url": "https://pypi.org/project/facet/", "project_urls": {"Homepage": "https://github.com/pohmelie/facet"}, "release_url": "https://pypi.org/project/facet/0.1.0/", "requires_dist": ["pytest ; extra == 'dev'", "pytest-asyncio ; extra == 'dev'", "pytest-cov ; extra == 'dev'", "flake8 ; extra == 'dev'"], "requires_python": ">=3.7", "summary": "service manager for asyncio", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Facet</h1>\n<p><a href=\"https://travis-ci.com/pohmelie/facet\" rel=\"nofollow\"><img alt=\"Travis status for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4eecdcba1afb387e00dc46238713d2a7896de8fb/68747470733a2f2f7472617669732d63692e636f6d2f706f686d656c69652f66616365742e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/pohmelie/facet\" rel=\"nofollow\"><img alt=\"Codecov coverage for master branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/69850412ff661e921d9b822933e7d5548625f5cf/68747470733a2f2f636f6465636f762e696f2f67682f706f686d656c69652f66616365742f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/facet/\" rel=\"nofollow\"><img alt=\"Pypi version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f286d3c079c6011a9ff185a47adad8d6efcfe5f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66616365742e737667\"></a>\n<a href=\"https://pypi.org/project/facet/\" rel=\"nofollow\"><img alt=\"Pypi downloads count\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1c75793cc5ff9a4e7fa40db5293b1ac2074fdc3f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6661636574\"></a></p>\n<p>Service manager for asyncio.</p>\n<h1>Reason</h1>\n<p><a href=\"https://github.com/ask/mode\" rel=\"nofollow\"><code>mode</code></a> tries to do too much job:</p>\n<ul>\n<li>Messy callbacks (<code>on_start</code>, <code>on_started</code>, <code>on_crashed</code>, etc.).</li>\n<li>Inheritance restrict naming and forces <code>super()</code> calls.</li>\n<li>Forced logging module and logging configuration.</li>\n</ul>\n<h1>Features</h1>\n<ul>\n<li>Simple (<code>start</code>, <code>stop</code>, <code>dependencies</code> and <code>add_task</code>).</li>\n<li>Configurable via inheritance (graceful shutdown timeout, logging).</li>\n<li>Mixin (no <code>super()</code> required).</li>\n<li>Requires no runner engine (<code>Worker</code>, <code>Runner</code>, etc.) just plain <code>await</code> or <code>async with</code>.</li>\n</ul>\n<h1>License</h1>\n<p><code>facet</code> is offered under MIT license.</p>\n<h1>Requirements</h1>\n<ul>\n<li>python 3.7+</li>\n</ul>\n<h1>Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">facet</span> <span class=\"kn\">import</span> <span class=\"n\">ServiceMixin</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">B</span><span class=\"p\">(</span><span class=\"n\">ServiceMixin</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"b started\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">-=</span> <span class=\"mi\">1</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"b stopped\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">ServiceMixin</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">B</span><span class=\"p\">()</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">dependencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"p\">]</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"a started\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"a stopped\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>This will produce:</p>\n<pre><code>INFO:root:b started\nINFO:root:a started\n</code></pre>\n<p>Start and stop order determined by strict rule: <strong>dependencies must be started first and stopped last</strong>. That is why <code>B</code> starts before <code>A</code>. Since <code>A</code> may use <code>B</code> in <code>start</code> routine.</p>\n<p>Hit <code>ctrl-c</code> and you will see:</p>\n<pre><code>INFO:root:a stopped\nINFO:root:b stopped\nTraceback (most recent call last):\n  ...\nKeyboardInterrupt\n</code></pre>\n<p>Stop order is reversed, since <code>A</code> may use <code>B</code> in <code>stop</code> routine. Any raised exception propagates to upper context. <code>facet</code> do not trying to be too smart.</p>\n<p>Service can be used as a context manager. Instead of</p>\n<pre><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>Code can look like:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">A</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">a</span><span class=\"p\">:</span>\n        <span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">b</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n        <span class=\"k\">await</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">main</span><span class=\"p\">())</span>\n</pre>\n<p>Another service feature is <code>add_task</code> method:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">ServiceMixin</span><span class=\"p\">):</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"task done\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">())</span>\n        <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">info</span><span class=\"p\">(</span><span class=\"s2\">\"start done\"</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">())</span>\n</pre>\n<p>This will lead to background task creation and handling:</p>\n<pre><code>INFO:root:start done\nINFO:root:task done\n</code></pre>\n<p>Any non-handled exception on background task will lead the whole service stack crashed. This is also a key feature to fall down fast and loud.</p>\n<p>All background tasks will be cancelled and awaited on service stop.</p>\n<h1>API</h1>\n<p>Here is public methods you get on inheritance/mixin:</p>\n<h2><code>wait</code></h2>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</pre>\n<p>Wait for service stop. Service must be started. This is useful when you use service as a context manager.</p>\n<h2><code>run</code></h2>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</pre>\n<p>Run service and wait until it stop.</p>\n<h2><code>graceful_shutdown_timeout</code></h2>\n<pre><span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">graceful_shutdown_timeout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"mi\">10</span>\n</pre>\n<p>How much total time in seconds wait for stop routines. This property can be overriden with subclass:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomServiceMixin</span><span class=\"p\">(</span><span class=\"n\">ServiceMixin</span><span class=\"p\">):</span>\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">graceful_shutdown_timeout</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">60</span>\n</pre>\n<h2><code>dependencies</code></h2>\n<pre><span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">dependencies</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">[]</span>\n</pre>\n<p>Should return iterable of current service dependencies instances.</p>\n<h2><code>running</code></h2>\n<pre><span class=\"nd\">@property</span>\n<span class=\"k\">def</span> <span class=\"nf\">running</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n</pre>\n<p>Check if service is running</p>\n<h2><code>add_task</code></h2>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">add_task</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">coro</span><span class=\"p\">):</span>\n</pre>\n<p>Add background task.</p>\n<h2><code>start</code></h2>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Start routine.</p>\n<h2><code>stop</code></h2>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Stop routine.</p>\n\n          </div>"}, "last_serial": 7165232, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "cdc5673bc5ababf775153081e3544c36", "sha256": "f78bd2ab45b5d9ee3c805397df7ca680732e17c40e098519948adfc64c3a58e8"}, "downloads": -1, "filename": "facet-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cdc5673bc5ababf775153081e3544c36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4494, "upload_time": "2020-05-04T15:39:25", "upload_time_iso_8601": "2020-05-04T15:39:25.255695Z", "url": "https://files.pythonhosted.org/packages/c2/de/8bfa7bc0d7771b9bd9ca295f13363fa4604983dc0d2ac051c887c11e984b/facet-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e039f1137f10d66dda5fa5a72727ebc", "sha256": "0f1f95ab8569f7f000ca2f0c1b27fb4d49498c1cefb29dcf5c01fbeb93358367"}, "downloads": -1, "filename": "facet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5e039f1137f10d66dda5fa5a72727ebc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4055, "upload_time": "2020-05-04T15:39:27", "upload_time_iso_8601": "2020-05-04T15:39:27.326410Z", "url": "https://files.pythonhosted.org/packages/ad/d6/2e1705ac8ad91fa439c76cf4e7cf1651e150cdf3e396b0731ca27d446a01/facet-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cdc5673bc5ababf775153081e3544c36", "sha256": "f78bd2ab45b5d9ee3c805397df7ca680732e17c40e098519948adfc64c3a58e8"}, "downloads": -1, "filename": "facet-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cdc5673bc5ababf775153081e3544c36", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 4494, "upload_time": "2020-05-04T15:39:25", "upload_time_iso_8601": "2020-05-04T15:39:25.255695Z", "url": "https://files.pythonhosted.org/packages/c2/de/8bfa7bc0d7771b9bd9ca295f13363fa4604983dc0d2ac051c887c11e984b/facet-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e039f1137f10d66dda5fa5a72727ebc", "sha256": "0f1f95ab8569f7f000ca2f0c1b27fb4d49498c1cefb29dcf5c01fbeb93358367"}, "downloads": -1, "filename": "facet-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5e039f1137f10d66dda5fa5a72727ebc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4055, "upload_time": "2020-05-04T15:39:27", "upload_time_iso_8601": "2020-05-04T15:39:27.326410Z", "url": "https://files.pythonhosted.org/packages/ad/d6/2e1705ac8ad91fa439c76cf4e7cf1651e150cdf3e396b0731ca27d446a01/facet-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:05 2020"}