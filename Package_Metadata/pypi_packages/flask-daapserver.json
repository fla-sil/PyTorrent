{"info": {"author": "Bas Stottelaar", "author_email": "basstottelaar@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Cython", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Topic :: Multimedia :: Sound/Audio :: Players", "Topic :: System :: Networking"], "description": "Flask-DAAPServer\n================\n\nDAAP server for streaming media, built around the Flask micro framework.\nSupports iTunes, artwork and revisioning.\n\n|Build Status| |Latest Version|\n\nIntroduction.\n-------------\n\nThe Digital Audio Access Protocol (DAAP) is a protocol designed by Apple\nto share media over the network, using HTTP as transport layer. It\nadvertises itself via Bonjour/Zeroconf.\n\nThis Python module implements the full stack, providing a HTTP server\n(built around Flask), a high-level application layer and\nBonjour/Zeroconf advertising.\n\nData model\n----------\n\nThe DAAP data model consists of the following entities:\n\n-  Server\n-  Databases\n-  Containers\n-  Items\n-  Container Items\n\nThere are a few more, but the above ones have been implemented.\n\nA server contains databases, a database contains containers and items, a\ncontainer contains container items and a container item is a one-to-many\nmapping between items and containers. While the DAAP client\nimplementation of iTunes only supports one database per server (this is\nthe one that shows up in iTunes), the models does not impose any\nrestrictions. Therefore, this implementation does not keep you from\nadding multiple databases to a server.\n\nThe DAAP protocol efficiently updates the entities. Only deltas are send\nto the client. For this to work, the server has to add revision\n(version) numbers to the entities, and map entities to revisions.\nBecause several clients can be on different revisions, it is necessary\nto keep track of all revisions. When all clients are up to date, the\nolder revisions can be cleaned.\n\nThe DAAP protocol assumes that string are encoded as UTF-8. Therefore,\nyou are encouraged to use unicode objects where possible.\n\nMutable versus immutable\n~~~~~~~~~~~~~~~~~~~~~~~~\n\nPython is a language that does not implement access modifiers\n(private/protected/public). Therefore, an instance variable can be\nchanged, no matter from where. This makes it harder to implement\nimmutable types. Cython (which converts Python to C), allows you to add\nthese modifiers, in some sense.\n\nSupport for immutable types was planned, but dropped for the following\nreasons:\n\n-  Creating (copy of) objects is expensive, and there are many objects.\n-  Cython objects (`Extension\n   Types <http://docs.cython.org/src/userguide/extension_types.html>`__)\n   should be subclassable in Python, which poses problems with\n   modifiers.\n-  The DAAP protocol does not care about the object contents. For\n   instance, if ``obj_in_v3 is obj_in_v4``, and you change\n   ``obj_in_v4.name``, any client that still has to update to revision 3\n   will receive the change made in revision 4. This isn't a problem if\n   you want to update clients to the latest version.\n\nDo note that this module does not merge objects with the same ID of\ndifferent revisions. For instance, the following will fail:\n\n.. code:: python\n\n    db_rev1 = Database(id=1, name=\"My DB\")\n    server.databases.add(db_rev1)\n    server.databases[1] is db_rev1  # Is True\n\n    db_rev1.items.add(Item(id=1, name=\"Song 1\"))\n    db_rev1.items.add(Item(id=2, name=\"Song 2\"))\n    db_rev1.items.add(Item(id=3, name=\"Song 3\"))\n\n    db_rev2 = Database(id=2, name=\"My Updated DB\")\n    server.databases.add(db_rev2)\n    server.databases[1] is db_rev2  # Is True\n\n    len(db_rev1.items) is not len(db_rev2.items)  # Reference to items lost because\n                                                  # db_rev1.items was overwritten.\n\nIf you want immutability, a correct way is the following:\n\n.. code:: python\n\n    db_rev2 = copy.copy(server.databases[1])\n    db_rev2.name = \"My DB, version 2\"\n\n    db_rev1.items is db_rev2.items  # Is True\n\nThe copy can even be skipped if you don't care about actual immutability\nand don't mind that intermediate revision will all be the same:\n\n.. code:: python\n\n    db_rev3 = server.databases[1]\n    db_rev3.name = \"My DB, version 3\"\n\n    db_rev1.items is db_rev2.items is db_rev3.items  # Is True\n    db_rev2.name == db_rev3.name  # Is True because db_rev3 is not a copy. However,\n                                  # the revisioning store will detect this as\n                                  # another update.\n\nInstallation\n------------\n\nMake sure Cython is installed. It is required to boost performance of\nsome modules significantly.\n\nTo install, simply run ``pip install flask-daapserver``. It should\ninstall all dependencies and compile the Cython-based modules. If you\nwant the latest version, type\n``pip install git+https://github.com/basilfx/flask-daapserver``.\n\nUpgrade notice\n~~~~~~~~~~~~~~\n\nThe revisioning storage API has changed between version v2.3.0 and\nv3.0.0. Due to the large overhead of revisioning, it was decided that\nthere should be less memory usage and faster access. While the API has\nremained similar, a few changes have been made:\n\n-  Cython is required now.\n-  The global object store has been removed. Every container now has its\n   own store for its children. Therefore, it is very important to add\n   objects in the right order. For instance, do not add a item to a\n   database before adding the database to the server (the models do not\n   offer advanced ORM functionality).\n-  The previous version fixed compatibility with iTunes 12.1. For some\n   reason, iTunes expected the first revision to be two. The fix simply\n   included to start revisions from 2. This version removed this\n   'workaround', and now expects the first revision to be committed\n   first, e.g. setting up the initial structure first. See the examples\n   for more information.\n-  Auto-commit of changed has been removed. The user should commit\n   manually. The ``daapserver.models.BaseServer`` has a ``commit``\n   method that will propagate the commit to all attached databases,\n   containers and so forth.\n-  The ``added()`` and ``edited()`` methods on\n   ``daapserver.models.Collection`` have been replaced by ``updated()``.\n   The DAAP protocol does not differ between both.\n\nTo give an idea of the performance impact, the ``utils/benchmark.py``\nscript yielded an improvement of 108MB vs 196MB in memory usage and\n0.8375s vs 4.3017s in time (100,000 items, Python 2.7.9, OS X 10.10, 64\nBits).\n\nRunning tests\n-------------\n\nThere are several unit tests included to test core components. The test\nsuite can be invoked using ``python setup.py nosetests``.\n\nUsage\n-----\n\nTake a look at the examples, or to the projects using Flask-DAAPServer:\n\n-  `SubDaap <https://github.com/basilfx/SubDaap>`__ \u2014 Bridge between\n   SubSonic and iTunes.\n\nExamples\n--------\n\nThere are four examples included in the ``examples/`` directory. You can\nrun them with ``python examples/<filename>``. Check the source for more\ninformation and the details.\n\n-  ``ExampleServer.py`` \u2014 Most basic example of a DAAP server.\n-  ``RevisionServer.py`` \u2014 Demonstration of revisioning capabilities.\n-  ``SoundcloudServer.py`` \u2014 Soundcloud server that streams all tracks\n   of a certain users. Requires a Client ID and the Soundcloud Python\n   module.\n\nContributing\n------------\n\nFeel free to submit a pull request. All pull requests must be made\nagainst the ``development`` branch. Python code should follow the PEP-8\nconventions and tested (if applicable).\n\nLicense\n-------\n\nSee the ``LICENSE`` file (MIT license).\n\nPart of this work (DAAP object encoding) is based on the original work\nof Davyd Madeley.\n\n.. |Build Status| image:: https://travis-ci.org/basilfx/flask-daapserver.svg?branch=master\n   :target: https://travis-ci.org/basilfx/flask-daapserver\n.. |Latest Version| image:: https://pypip.in/version/flask-daapserver/badge.svg\n   :target: https://pypi.python.org/pypi/flask-daapserver/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/basilfx/flask-daapserver", "keywords": "daap flask daapserver itunes home sharing streaming", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "flask-daapserver", "package_url": "https://pypi.org/project/flask-daapserver/", "platform": "any", "project_url": "https://pypi.org/project/flask-daapserver/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/basilfx/flask-daapserver"}, "release_url": "https://pypi.org/project/flask-daapserver/3.0.2/", "requires_dist": null, "requires_python": null, "summary": "DAAP server framework implemented with Flask", "version": "3.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>DAAP server for streaming media, built around the Flask micro framework.\nSupports iTunes, artwork and revisioning.</p>\n<p><a href=\"https://travis-ci.org/basilfx/flask-daapserver\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ac665a3717e0cc395f07df313c9e63943e786354/68747470733a2f2f7472617669732d63692e6f72672f626173696c66782f666c61736b2d646161707365727665722e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.python.org/pypi/flask-daapserver/\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/41e5b2a5e92366d271a1e86d28d667196d545433/68747470733a2f2f70797069702e696e2f76657273696f6e2f666c61736b2d646161707365727665722f62616467652e737667\"></a></p>\n<div id=\"introduction\">\n<h2>Introduction.</h2>\n<p>The Digital Audio Access Protocol (DAAP) is a protocol designed by Apple\nto share media over the network, using HTTP as transport layer. It\nadvertises itself via Bonjour/Zeroconf.</p>\n<p>This Python module implements the full stack, providing a HTTP server\n(built around Flask), a high-level application layer and\nBonjour/Zeroconf advertising.</p>\n</div>\n<div id=\"data-model\">\n<h2>Data model</h2>\n<p>The DAAP data model consists of the following entities:</p>\n<ul>\n<li>Server</li>\n<li>Databases</li>\n<li>Containers</li>\n<li>Items</li>\n<li>Container Items</li>\n</ul>\n<p>There are a few more, but the above ones have been implemented.</p>\n<p>A server contains databases, a database contains containers and items, a\ncontainer contains container items and a container item is a one-to-many\nmapping between items and containers. While the DAAP client\nimplementation of iTunes only supports one database per server (this is\nthe one that shows up in iTunes), the models does not impose any\nrestrictions. Therefore, this implementation does not keep you from\nadding multiple databases to a server.</p>\n<p>The DAAP protocol efficiently updates the entities. Only deltas are send\nto the client. For this to work, the server has to add revision\n(version) numbers to the entities, and map entities to revisions.\nBecause several clients can be on different revisions, it is necessary\nto keep track of all revisions. When all clients are up to date, the\nolder revisions can be cleaned.</p>\n<p>The DAAP protocol assumes that string are encoded as UTF-8. Therefore,\nyou are encouraged to use unicode objects where possible.</p>\n<div id=\"mutable-versus-immutable\">\n<h3>Mutable versus immutable</h3>\n<p>Python is a language that does not implement access modifiers\n(private/protected/public). Therefore, an instance variable can be\nchanged, no matter from where. This makes it harder to implement\nimmutable types. Cython (which converts Python to C), allows you to add\nthese modifiers, in some sense.</p>\n<p>Support for immutable types was planned, but dropped for the following\nreasons:</p>\n<ul>\n<li>Creating (copy of) objects is expensive, and there are many objects.</li>\n<li>Cython objects (<a href=\"http://docs.cython.org/src/userguide/extension_types.html\" rel=\"nofollow\">Extension\nTypes</a>)\nshould be subclassable in Python, which poses problems with\nmodifiers.</li>\n<li>The DAAP protocol does not care about the object contents. For\ninstance, if <tt>obj_in_v3 is obj_in_v4</tt>, and you change\n<tt>obj_in_v4.name</tt>, any client that still has to update to revision 3\nwill receive the change made in revision 4. This isn\u2019t a problem if\nyou want to update clients to the latest version.</li>\n</ul>\n<p>Do note that this module does not merge objects with the same ID of\ndifferent revisions. For instance, the following will fail:</p>\n<pre><span class=\"n\">db_rev1</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"My DB\"</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">db_rev1</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">db_rev1</span>  <span class=\"c1\"># Is True</span>\n\n<span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Song 1\"</span><span class=\"p\">))</span>\n<span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Song 2\"</span><span class=\"p\">))</span>\n<span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"Song 3\"</span><span class=\"p\">))</span>\n\n<span class=\"n\">db_rev2</span> <span class=\"o\">=</span> <span class=\"n\">Database</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"My Updated DB\"</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">db_rev2</span><span class=\"p\">)</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"ow\">is</span> <span class=\"n\">db_rev2</span>  <span class=\"c1\"># Is True</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">db_rev2</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">)</span>  <span class=\"c1\"># Reference to items lost because</span>\n                                              <span class=\"c1\"># db_rev1.items was overwritten.</span>\n</pre>\n<p>If you want immutability, a correct way is the following:</p>\n<pre><span class=\"n\">db_rev2</span> <span class=\"o\">=</span> <span class=\"n\">copy</span><span class=\"o\">.</span><span class=\"n\">copy</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"n\">db_rev2</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"My DB, version 2\"</span>\n\n<span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"ow\">is</span> <span class=\"n\">db_rev2</span><span class=\"o\">.</span><span class=\"n\">items</span>  <span class=\"c1\"># Is True</span>\n</pre>\n<p>The copy can even be skipped if you don\u2019t care about actual immutability\nand don\u2019t mind that intermediate revision will all be the same:</p>\n<pre><span class=\"n\">db_rev3</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">databases</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"n\">db_rev3</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"My DB, version 3\"</span>\n\n<span class=\"n\">db_rev1</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"ow\">is</span> <span class=\"n\">db_rev2</span><span class=\"o\">.</span><span class=\"n\">items</span> <span class=\"ow\">is</span> <span class=\"n\">db_rev3</span><span class=\"o\">.</span><span class=\"n\">items</span>  <span class=\"c1\"># Is True</span>\n<span class=\"n\">db_rev2</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"n\">db_rev3</span><span class=\"o\">.</span><span class=\"n\">name</span>  <span class=\"c1\"># Is True because db_rev3 is not a copy. However,</span>\n                              <span class=\"c1\"># the revisioning store will detect this as</span>\n                              <span class=\"c1\"># another update.</span>\n</pre>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Make sure Cython is installed. It is required to boost performance of\nsome modules significantly.</p>\n<p>To install, simply run <tt>pip install <span class=\"pre\">flask-daapserver</span></tt>. It should\ninstall all dependencies and compile the Cython-based modules. If you\nwant the latest version, type\n<tt>pip install <span class=\"pre\">git+https://github.com/basilfx/flask-daapserver</span></tt>.</p>\n<div id=\"upgrade-notice\">\n<h3>Upgrade notice</h3>\n<p>The revisioning storage API has changed between version v2.3.0 and\nv3.0.0. Due to the large overhead of revisioning, it was decided that\nthere should be less memory usage and faster access. While the API has\nremained similar, a few changes have been made:</p>\n<ul>\n<li>Cython is required now.</li>\n<li>The global object store has been removed. Every container now has its\nown store for its children. Therefore, it is very important to add\nobjects in the right order. For instance, do not add a item to a\ndatabase before adding the database to the server (the models do not\noffer advanced ORM functionality).</li>\n<li>The previous version fixed compatibility with iTunes 12.1. For some\nreason, iTunes expected the first revision to be two. The fix simply\nincluded to start revisions from 2. This version removed this\n\u2018workaround\u2019, and now expects the first revision to be committed\nfirst, e.g. setting up the initial structure first. See the examples\nfor more information.</li>\n<li>Auto-commit of changed has been removed. The user should commit\nmanually. The <tt>daapserver.models.BaseServer</tt> has a <tt>commit</tt>\nmethod that will propagate the commit to all attached databases,\ncontainers and so forth.</li>\n<li>The <tt>added()</tt> and <tt>edited()</tt> methods on\n<tt>daapserver.models.Collection</tt> have been replaced by <tt>updated()</tt>.\nThe DAAP protocol does not differ between both.</li>\n</ul>\n<p>To give an idea of the performance impact, the <tt>utils/benchmark.py</tt>\nscript yielded an improvement of 108MB vs 196MB in memory usage and\n0.8375s vs 4.3017s in time (100,000 items, Python 2.7.9, OS X 10.10, 64\nBits).</p>\n</div>\n</div>\n<div id=\"running-tests\">\n<h2>Running tests</h2>\n<p>There are several unit tests included to test core components. The test\nsuite can be invoked using <tt>python setup.py nosetests</tt>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Take a look at the examples, or to the projects using Flask-DAAPServer:</p>\n<ul>\n<li><a href=\"https://github.com/basilfx/SubDaap\" rel=\"nofollow\">SubDaap</a> \u2014 Bridge between\nSubSonic and iTunes.</li>\n</ul>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>There are four examples included in the <tt>examples/</tt> directory. You can\nrun them with <tt>python <span class=\"pre\">examples/&lt;filename&gt;</span></tt>. Check the source for more\ninformation and the details.</p>\n<ul>\n<li><tt>ExampleServer.py</tt> \u2014 Most basic example of a DAAP server.</li>\n<li><tt>RevisionServer.py</tt> \u2014 Demonstration of revisioning capabilities.</li>\n<li><tt>SoundcloudServer.py</tt> \u2014 Soundcloud server that streams all tracks\nof a certain users. Requires a Client ID and the Soundcloud Python\nmodule.</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Feel free to submit a pull request. All pull requests must be made\nagainst the <tt>development</tt> branch. Python code should follow the PEP-8\nconventions and tested (if applicable).</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>See the <tt>LICENSE</tt> file (MIT license).</p>\n<p>Part of this work (DAAP object encoding) is based on the original work\nof Davyd Madeley.</p>\n</div>\n\n          </div>"}, "last_serial": 1823068, "releases": {"2.2.0": [{"comment_text": "", "digests": {"md5": "d4a0ce83c798c034dfb8ff81c7c71a06", "sha256": "61647a9dd33052c6e775ca7a414982194de0134e936248929630100422e416e1"}, "downloads": -1, "filename": "flask-daapserver-2.2.0.tar.gz", "has_sig": false, "md5_digest": "d4a0ce83c798c034dfb8ff81c7c71a06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21889, "upload_time": "2015-01-05T00:58:54", "upload_time_iso_8601": "2015-01-05T00:58:54.660688Z", "url": "https://files.pythonhosted.org/packages/02/f7/24f833340f999a1f2f6a3b35dfcabe9c5e4982c73a3bdafd03a4c17b2a7c/flask-daapserver-2.2.0.tar.gz", "yanked": false}], "2.2.1": [{"comment_text": "", "digests": {"md5": "e6b32fd13fde04f68b3d3b9c03e831ed", "sha256": "3ece7caf40212cce7f9eeb9069ed12785482266cd303898b9a9720141d2de687"}, "downloads": -1, "filename": "flask-daapserver-2.2.1.tar.gz", "has_sig": false, "md5_digest": "e6b32fd13fde04f68b3d3b9c03e831ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22123, "upload_time": "2015-01-06T02:09:17", "upload_time_iso_8601": "2015-01-06T02:09:17.062119Z", "url": "https://files.pythonhosted.org/packages/22/c9/3ec07f9dfb1d0416b4325cea7daa23bcec07cba984833a7183f4a2b56ff6/flask-daapserver-2.2.1.tar.gz", "yanked": false}], "3.0.0": [{"comment_text": "", "digests": {"md5": "d8d6a18830ae129c98c2dfe5dd49cd71", "sha256": "46f8778a14f8f84d4880a63e7f4e832647db534b625f565eae110996e3e4feb7"}, "downloads": -1, "filename": "flask-daapserver-3.0.0.tar.gz", "has_sig": false, "md5_digest": "d8d6a18830ae129c98c2dfe5dd49cd71", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35120, "upload_time": "2015-09-06T19:27:30", "upload_time_iso_8601": "2015-09-06T19:27:30.335854Z", "url": "https://files.pythonhosted.org/packages/96/d8/c176f8a860d6481b5c6a13e4345dec0ea6e577d2977854c2dda54ec94a78/flask-daapserver-3.0.0.tar.gz", "yanked": false}], "3.0.1": [{"comment_text": "", "digests": {"md5": "1ac5ac5fb45a3f42155a6a2ddc6b84d6", "sha256": "b8d426a8eaf647bb3727fa3a1daa933d0ade8580d8d24a901aa2713038c155a0"}, "downloads": -1, "filename": "flask-daapserver-3.0.1.tar.gz", "has_sig": false, "md5_digest": "1ac5ac5fb45a3f42155a6a2ddc6b84d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35534, "upload_time": "2015-11-04T20:27:44", "upload_time_iso_8601": "2015-11-04T20:27:44.857207Z", "url": "https://files.pythonhosted.org/packages/f7/7d/be2e9a3743473b2b8575d8a66753194b8340d4b15cf1b4ec9948451a597c/flask-daapserver-3.0.1.tar.gz", "yanked": false}], "3.0.2": [{"comment_text": "", "digests": {"md5": "9e4fb3c0c75d1de71b0fcbc32fdb3966", "sha256": "e6aa72d7032f4bec10414c91114116caf5ce6ea65db8e1f3df449c4f0bafe212"}, "downloads": -1, "filename": "flask-daapserver-3.0.2.tar.gz", "has_sig": false, "md5_digest": "9e4fb3c0c75d1de71b0fcbc32fdb3966", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35664, "upload_time": "2015-11-18T18:31:32", "upload_time_iso_8601": "2015-11-18T18:31:32.701635Z", "url": "https://files.pythonhosted.org/packages/2b/67/f8d89be2c3c5cbe26411df948d6179f14c0854873d05d06c6d96ccc5c8b1/flask-daapserver-3.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9e4fb3c0c75d1de71b0fcbc32fdb3966", "sha256": "e6aa72d7032f4bec10414c91114116caf5ce6ea65db8e1f3df449c4f0bafe212"}, "downloads": -1, "filename": "flask-daapserver-3.0.2.tar.gz", "has_sig": false, "md5_digest": "9e4fb3c0c75d1de71b0fcbc32fdb3966", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35664, "upload_time": "2015-11-18T18:31:32", "upload_time_iso_8601": "2015-11-18T18:31:32.701635Z", "url": "https://files.pythonhosted.org/packages/2b/67/f8d89be2c3c5cbe26411df948d6179f14c0854873d05d06c6d96ccc5c8b1/flask-daapserver-3.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:59 2020"}