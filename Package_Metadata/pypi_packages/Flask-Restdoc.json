{"info": {"author": "Su Yeol Jeon", "author_email": "devxoul@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "====================\nFlask-Restdoc v0.0.2\n====================\n\nFlask-Restdoc is a simple tool that generates RESTful API documentation automatically from python files.\n\n\nInstallation\n============\n\nYou can install Flask-Restdoc with ``pip``.\n\n::\n\n\t$ pip install flask-restdoc\n\n\nHow-to\n======\n\nStep 1. Make Restdoc Instance\n-----------------------------\n\nFirst, you need to make an instance of ``Restdoc``.\n\n::\n\n\tfrom flask import Flask\n\tfrom restdoc import Restdoc\n\n\tapp = Flask(__name__)\n\n\trestdoc = Restdoc(app)\n\n\nOr you can initiate app later.\n\n::\n\n\trestdoc.init_app(app)\n\n\n\nStep 2. Configure Output Path\n---------------------------------\n\nYou have to set output path at ``app.config``. Path must includes output file name.\n\n::\n\n\tapp.config['RESTDOC_OUTPUT'] = '/Users/xoul/Documents/api.md'\n\n\n\nStep 3. Decorate URL Endpoints\n------------------------------\n\nIn your ``view.py`` (or something else), add decorators to url endpoints.\n\n::\n\n\tapi = Blueprint('api', __name__)\n\n\t@restdoc.api(api,\n\t\tdescription='asdasd',\n\t\tparams=[\n\t\t\t('email', True),\n\t\t\t('password', True, 'SHA-1')\n\t\t],\n\t\tstatus=200,\n\t\tsample_response={\n\t\t\t'status': 'ok'\n\t\t},\n\t\terrors=[1001,1002])\n\t@api.route('/login')\n\tdef login():\n\t\tpass\n\n\nParameters\n~~~~~~~~~~\n\nblueprint\n\tA blueprint object.\n\ndescription\n\tAPI description string.\n\nparams\n\tURL Parameters or form data for request. List of tuple contains parameter name, required option(True if required) and description.\n\nstatus\n\tA HTTP status code for successful request. 200 is default.\n\nsample_response\n\tA sample response object. This will be written in JSON format.\n\nerrors\n\tError codes that can be occurred in this function.\n\n\n\nStep 4. Error Definition List (Optional)\n----------------------------------------\n\nFlask-Restdoc generates error information from error definition list. You have to make a list of error definitions. Each error object is tuple that contains HTTP status code, error code and message.\n\n::\n\n\terrors = [\n\t\t# (HTTP status, Error code, Message)\n\t\t(403,\t1001,\t'NOT_AUTHORIZED'),\n\t\t(400,\t1100,\t'NEED_EMAIL'),\n\t\t(400,\t1101,\t'NEED_PASSWORD')\n\t]\n\n\nThen, set error definition list to ``restdoc`` instance.\n\n::\n\n\trestdoc.set_errors(errors)\n\n\n\nStep 5. Generate\n----------------\n\nJust call method ``generate`` to generate documentation.\n\n::\n\n\trestdoc.generate()\n\n\nChange Logs\n===========\n\nv0.0.2\n------\n- Added line break after error definitions.\n- Converted <int:id> to {id} format.\n\n\nv0.0.1\n------\n- Hello, Restdoc!\n\n\nFuture Plans\n============\n\n- Support other formats. (Such as rst, html, etc.)\n- Model documentation.\n\n\nLicense\n=======\n\nFlask-Restdoc is under MIT License.", "description_content_type": null, "docs_url": null, "download_url": "https://pypi.python.org/packages/source/F/Flask-Restdoc/Flask-Restdoc-0.0.2.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/devxoul/flask-restdoc", "keywords": "Flask,REST,API,Documentation", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "Flask-Restdoc", "package_url": "https://pypi.org/project/Flask-Restdoc/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/Flask-Restdoc/", "project_urls": {"Download": "https://pypi.python.org/packages/source/F/Flask-Restdoc/Flask-Restdoc-0.0.2.tar.gz", "Homepage": "https://github.com/devxoul/flask-restdoc"}, "release_url": "https://pypi.org/project/Flask-Restdoc/0.0.2/", "requires_dist": null, "requires_python": null, "summary": "Flask-Restdoc is a simple tool that generates RESTful API documentation automatically from python files.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Flask-Restdoc is a simple tool that generates RESTful API documentation automatically from python files.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install Flask-Restdoc with <tt>pip</tt>.</p>\n<pre>$ pip install flask-restdoc\n</pre>\n</div>\n<div id=\"how-to\">\n<h2>How-to</h2>\n<div id=\"step-1-make-restdoc-instance\">\n<h3>Step 1. Make Restdoc Instance</h3>\n<p>First, you need to make an instance of <tt>Restdoc</tt>.</p>\n<pre>from flask import Flask\nfrom restdoc import Restdoc\n\napp = Flask(__name__)\n\nrestdoc = Restdoc(app)\n</pre>\n<p>Or you can initiate app later.</p>\n<pre>restdoc.init_app(app)\n</pre>\n</div>\n<div id=\"step-2-configure-output-path\">\n<h3>Step 2. Configure Output Path</h3>\n<p>You have to set output path at <tt>app.config</tt>. Path must includes output file name.</p>\n<pre>app.config['RESTDOC_OUTPUT'] = '/Users/xoul/Documents/api.md'\n</pre>\n</div>\n<div id=\"step-3-decorate-url-endpoints\">\n<h3>Step 3. Decorate URL Endpoints</h3>\n<p>In your <tt>view.py</tt> (or something else), add decorators to url endpoints.</p>\n<pre>api = Blueprint('api', __name__)\n\n@restdoc.api(api,\n        description='asdasd',\n        params=[\n                ('email', True),\n                ('password', True, 'SHA-1')\n        ],\n        status=200,\n        sample_response={\n                'status': 'ok'\n        },\n        errors=[1001,1002])\n@api.route('/login')\ndef login():\n        pass\n</pre>\n<div id=\"parameters\">\n<h4>Parameters</h4>\n<dl>\n<dt>blueprint</dt>\n<dd>A blueprint object.</dd>\n<dt>description</dt>\n<dd>API description string.</dd>\n<dt>params</dt>\n<dd>URL Parameters or form data for request. List of tuple contains parameter name, required option(True if required) and description.</dd>\n<dt>status</dt>\n<dd>A HTTP status code for successful request. 200 is default.</dd>\n<dt>sample_response</dt>\n<dd>A sample response object. This will be written in JSON format.</dd>\n<dt>errors</dt>\n<dd>Error codes that can be occurred in this function.</dd>\n</dl>\n</div>\n</div>\n<div id=\"step-4-error-definition-list-optional\">\n<h3>Step 4. Error Definition List (Optional)</h3>\n<p>Flask-Restdoc generates error information from error definition list. You have to make a list of error definitions. Each error object is tuple that contains HTTP status code, error code and message.</p>\n<pre>errors = [\n        # (HTTP status, Error code, Message)\n        (403,   1001,   'NOT_AUTHORIZED'),\n        (400,   1100,   'NEED_EMAIL'),\n        (400,   1101,   'NEED_PASSWORD')\n]\n</pre>\n<p>Then, set error definition list to <tt>restdoc</tt> instance.</p>\n<pre>restdoc.set_errors(errors)\n</pre>\n</div>\n<div id=\"step-5-generate\">\n<h3>Step 5. Generate</h3>\n<p>Just call method <tt>generate</tt> to generate documentation.</p>\n<pre>restdoc.generate()\n</pre>\n</div>\n</div>\n<div id=\"change-logs\">\n<h2>Change Logs</h2>\n<div id=\"v0-0-2\">\n<h3>v0.0.2</h3>\n<ul>\n<li>Added line break after error definitions.</li>\n<li>Converted &lt;int:id&gt; to {id} format.</li>\n</ul>\n</div>\n<div id=\"v0-0-1\">\n<h3>v0.0.1</h3>\n<ul>\n<li>Hello, Restdoc!</li>\n</ul>\n</div>\n</div>\n<div id=\"future-plans\">\n<h2>Future Plans</h2>\n<ul>\n<li>Support other formats. (Such as rst, html, etc.)</li>\n<li>Model documentation.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Flask-Restdoc is under MIT License.</p>\n</div>\n\n          </div>"}, "last_serial": 876076, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f75dcc46cd5b649218b98b053c6adad9", "sha256": "0a26c9ad49e1f7e98306829532bffc8f18da346f2688ccb09f36bdcf3d1cb37d"}, "downloads": -1, "filename": "Flask-Restdoc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "f75dcc46cd5b649218b98b053c6adad9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4282, "upload_time": "2013-09-28T15:46:10", "upload_time_iso_8601": "2013-09-28T15:46:10.432513Z", "url": "https://files.pythonhosted.org/packages/5f/61/841634cb571988dfe90a607db8a40dec7ef38024012655d3ac204e486282/Flask-Restdoc-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c2d1d5bdda93cf9d6b949e17c4e1b4db", "sha256": "8590e1df36d1dcb431755f0ac266b2801a06e610d960fc1628b51791bb689d8f"}, "downloads": -1, "filename": "Flask-Restdoc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c2d1d5bdda93cf9d6b949e17c4e1b4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4626, "upload_time": "2013-09-28T18:27:44", "upload_time_iso_8601": "2013-09-28T18:27:44.450166Z", "url": "https://files.pythonhosted.org/packages/c0/4e/9139252afb5e00d66cb8dfafcf291b59f09120a3c9b1055d98042925e3f8/Flask-Restdoc-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2d1d5bdda93cf9d6b949e17c4e1b4db", "sha256": "8590e1df36d1dcb431755f0ac266b2801a06e610d960fc1628b51791bb689d8f"}, "downloads": -1, "filename": "Flask-Restdoc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c2d1d5bdda93cf9d6b949e17c4e1b4db", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4626, "upload_time": "2013-09-28T18:27:44", "upload_time_iso_8601": "2013-09-28T18:27:44.450166Z", "url": "https://files.pythonhosted.org/packages/c0/4e/9139252afb5e00d66cb8dfafcf291b59f09120a3c9b1055d98042925e3f8/Flask-Restdoc-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:27 2020"}