{"info": {"author": "Incuna & @mlen108", "author_email": "UNKNOWN", "bugtrack_url": null, "classifiers": [], "description": "This repository is dead!\n=========================\n\nThis repository is not maintained anymore, `Crocodoc was acquired by Box.net <http://blog.crocodoc.com/post/50019810661/crocodoc-joins-box-to-reimagine-documents-in-the>`_ and also this product was never `easy to work with <https://github.com/crocodoc/crocodoc-python/pull/8>`_.\n\ndjcroco\n=======\n\n.. image:: https://travis-ci.org/mattack108/djcroco.png?branch=master\n   :target: https://travis-ci.org/mattack108/djcroco\n\n.. image:: https://pypip.in/v/djcroco/badge.png\n   :target: https://pypi.python.org/pypi/djcroco\n\n.. image:: https://pypip.in/d/djcroco/badge.png\n   :target: https://pypi.python.org/pypi/djcroco\n\n``djcroco`` is a custom `Django <https://www.djangoproject.com/>`_ model field to\nadd support for the `Crocodoc API <https://crocodoc.com/>`_.\n\nIt behaves like standard `FileField <https://docs.djangoproject.com/en/dev/ref/models/fields/#filefield>`_\nso you can still use most of its properties (e.g. ``name``, ``size``, ``url``\netc) while having extra ones to play with Crocodoc API.\n\nRequirements\n------------\n\n- Python 2.6.x, 2.7.x\n- Django 1.3.x, 1.4.x, 1.5.x\n- `crocodoc <https://pypi.python.org/pypi/crocodoc>`_ 0.1.1\n\nPython 3.x will be supported soon!\n\nInstallation\n------------\n\nTo install ``djcroco``, simply run: ::\n\n    pip install djcroco\n\nInclude in ``urls.py``: ::\n\n    url(r'', include('djcroco.urls')),\n\nDefine Crocodoc API token in ``settings.py``: ::\n\n    CROCO_API_TOKEN = '<api_token>'\n\nOr alternatively as env variable: ::\n\n    export CROCO_API_TOKEN='<api_token>'\n\nWhen optional parameters for URLs are used (see below for more details) - then\nyou need to add ``djcroco`` to ``INSTALLED_APPS``: ::\n\n    INSTALLED_APPS += ('djcroco',)\n\nAnd load its template tags in the template you wish to use them in: ::\n\n    {% load croco_tags %}\n\nUsage\n-----\n\nDefine the field in model you wish to extend:\n\n.. code-block:: python\n\n    from django.db import models\n\n    from djcroco.fields import CrocoField\n\n\n    class Example(models.Model):\n        name = models.CharField(max_length=255)\n        document = CrocoField()\n\n        def __unicode__(self):\n            return self.name\n\n\nCustom thumbnails size\n----------------------\n\nYou can pass ``thumbnail_size`` like so:\n\n.. code-block:: python\n\n    document = CrocoField(thumbnail_size=(150, 150))\n\nWhere tuple is represented as *(width, height)*.\n\nIf you do not pass custom thumbnail size, the default will be used (100x100).\nThe maximum dimensions for thumbnail is **300x300**.\n\n\nThumbnail caching\n-----------------\n\nBy default the thumbnail will be generated every time template gets rendered and\nthis involves hitting Crocodoc API for each thumbnail. It could be time\nexpensive if you have many items on a single page. To avoid above issue you\ncan point to a field where the thumbnail will be saved and served from there\nthe next time.\n\n.. code-block:: python\n\n    class Example(models.Model):\n        name = models.CharField(max_length=255)\n        document = CrocoField(thumbnail_field='my_thumbnail')\n        my_thumbnail = models.ImageField(upload_to='whatever/')\n\n\nNote that the ``thumbnail_field`` must be a type of `ImageField \n<https://docs.djangoproject.com/en/dev/ref/models/fields/#imagefield>`_.\n\nRender the awesomeness\n----------------------\n\nDocuments\n^^^^^^^^^\n\n::\n\n    {{ obj.document.name }}\n\nReturns name of the document.\n\n::\n\n    {{ obj.document.size }}\n\nReturns size of the document (in bytes).\n\n::\n\n    {{ obj.document.size_human }}\n\nReturns human-readable size of the document (eg. 1.3 MB).\n\n::\n\n    {{ obj.document.type }}\n\nReturns type (extension) of the document.\n\n::\n\n    {{ obj.document.uuid }}\n\nReturns UUID of the document (note: each Crocodoc document has unique id).\n\nThumbnails\n^^^^^^^^^^\n\n::\n\n    {{ obj.document.thumbnail }}\n\nReturns thumbnail as inline image (see `Data URI scheme <https://en.wikipedia.org/wiki/Data_URI_scheme>`_ for more details). See below for how to download a thumbnail.\n\nURLs\n^^^^\n\n::\n\n    {{ obj.document.url }}\n\nReturns url of the document so it can be viewed directly.\n\n::\n\n    {{ obj.document.content_url }}\n\nReturns url of the document wrapped in `HttpResponse \n<https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpResponse>`_ object.\n\nBoth ``url`` and ``content_url`` can be extended with `optional parameters <https://crocodoc.com/docs/api/#session-create>`_.\n\n::\n\n    {{ obj.document.url|editable:\"true\"|user_id:\"1\"|user_name:\"admin\" }}\n\n``editable`` param allows users to create annotations and comments while viewing the document.\n**Default: false**\n\n``user_id`` and ``user_name`` will be shown in the viewer to attribute annotations and comments to their author. **Required if editable is true**\n\n::\n\n    {{ obj.document.url|user_filter:\"1,2,3\" }}\n\nLimits which users' annotations and comments are shown. Possible values are: *all*, *none*, or a comma-separated list of user IDs. **Default: all**\n\n**Note**: ``user_filter`` is a renamed version of Crocodoc's ``filter`` in order to work in Django template system.\n\nFull list of supported `parameters <https://crocodoc.com/docs/api/#session-create>`_.\n\nDownloads\n^^^^^^^^^\n\n::\n\n    {{ obj.document.download_document }}\n\nReturns the original document in PDF format.\n\n::\n\n    {{ obj.document.download_document|annotated:\"true\" }}\n\nReturns the original document with annotations. **Default: false**\n\n::\n\n    {{ obj.document.download_document|user_filter:\"1,2,3\" }}\n\nReturns the original document with annotations limited to given users.\nPossible values are: *all*, *none*, or a comma-separated list of user IDs. **Default: all**\n\n::\n\n    {{ obj.document.download_thumbnail }}\n\nReturns a thumbnail of the document's first page in PNG format.\n\n::\n\n    {{ obj.document.download_thumbnail|size:\"99x99\" }}\n\nSame as ``download_thumbnail`` with custom dimensions of the thumbnail in the format *{width}x{height}*. Largest dimensions allowed are 300x300. **Default: 100x100**\n\n::\n\n    {{ obj.document.download_text }}\n\nReturns the full text from a document.\nNote: This method is available only if your Crocodoc account has text\nextraction enabled.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/incuna/django-croco/", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-croco", "package_url": "https://pypi.org/project/django-croco/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-croco/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/incuna/django-croco/"}, "release_url": "https://pypi.org/project/django-croco/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"this-repository-is-dead\">\n<h2>This repository is dead!</h2>\n<p>This repository is not maintained anymore, <a href=\"http://blog.crocodoc.com/post/50019810661/crocodoc-joins-box-to-reimagine-documents-in-the\" rel=\"nofollow\">Crocodoc was acquired by Box.net</a> and also this product was never <a href=\"https://github.com/crocodoc/crocodoc-python/pull/8\" rel=\"nofollow\">easy to work with</a>.</p>\n</div>\n<div id=\"djcroco\">\n<h2>djcroco</h2>\n<a href=\"https://travis-ci.org/mattack108/djcroco\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/mattack108/djcroco.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8eea8206dc593992f6cc8bbe8eb15691cf1c8821/68747470733a2f2f7472617669732d63692e6f72672f6d61747461636b3130382f646a63726f636f2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/djcroco\" rel=\"nofollow\"><img alt=\"https://pypip.in/v/djcroco/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f95c2f1b8d40e4f3df969405e731b8807a26a651/68747470733a2f2f70797069702e696e2f762f646a63726f636f2f62616467652e706e67\"></a>\n<a href=\"https://pypi.python.org/pypi/djcroco\" rel=\"nofollow\"><img alt=\"https://pypip.in/d/djcroco/badge.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ce0413a2238ed98f8c652a7b396b834bd8fcd137/68747470733a2f2f70797069702e696e2f642f646a63726f636f2f62616467652e706e67\"></a>\n<p><tt>djcroco</tt> is a custom <a href=\"https://www.djangoproject.com/\" rel=\"nofollow\">Django</a> model field to\nadd support for the <a href=\"https://crocodoc.com/\" rel=\"nofollow\">Crocodoc API</a>.</p>\n<p>It behaves like standard <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#filefield\" rel=\"nofollow\">FileField</a>\nso you can still use most of its properties (e.g. <tt>name</tt>, <tt>size</tt>, <tt>url</tt>\netc) while having extra ones to play with Crocodoc API.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python 2.6.x, 2.7.x</li>\n<li>Django 1.3.x, 1.4.x, 1.5.x</li>\n<li><a href=\"https://pypi.python.org/pypi/crocodoc\" rel=\"nofollow\">crocodoc</a> 0.1.1</li>\n</ul>\n<p>Python 3.x will be supported soon!</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>To install <tt>djcroco</tt>, simply run:</p>\n<pre>pip install djcroco\n</pre>\n<p>Include in <tt>urls.py</tt>:</p>\n<pre>url(r'', include('djcroco.urls')),\n</pre>\n<p>Define Crocodoc API token in <tt>settings.py</tt>:</p>\n<pre>CROCO_API_TOKEN = '&lt;api_token&gt;'\n</pre>\n<p>Or alternatively as env variable:</p>\n<pre>export CROCO_API_TOKEN='&lt;api_token&gt;'\n</pre>\n<p>When optional parameters for URLs are used (see below for more details) - then\nyou need to add <tt>djcroco</tt> to <tt>INSTALLED_APPS</tt>:</p>\n<pre>INSTALLED_APPS += ('djcroco',)\n</pre>\n<p>And load its template tags in the template you wish to use them in:</p>\n<pre>{% load croco_tags %}\n</pre>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Define the field in model you wish to extend:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">djcroco.fields</span> <span class=\"kn\">import</span> <span class=\"n\">CrocoField</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">CrocoField</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">__unicode__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n</pre>\n</div>\n<div id=\"custom-thumbnails-size\">\n<h3>Custom thumbnails size</h3>\n<p>You can pass <tt>thumbnail_size</tt> like so:</p>\n<pre><span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">CrocoField</span><span class=\"p\">(</span><span class=\"n\">thumbnail_size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">150</span><span class=\"p\">,</span> <span class=\"mi\">150</span><span class=\"p\">))</span>\n</pre>\n<p>Where tuple is represented as <em>(width, height)</em>.</p>\n<p>If you do not pass custom thumbnail size, the default will be used (100x100).\nThe maximum dimensions for thumbnail is <strong>300x300</strong>.</p>\n</div>\n<div id=\"thumbnail-caching\">\n<h3>Thumbnail caching</h3>\n<p>By default the thumbnail will be generated every time template gets rendered and\nthis involves hitting Crocodoc API for each thumbnail. It could be time\nexpensive if you have many items on a single page. To avoid above issue you\ncan point to a field where the thumbnail will be saved and served from there\nthe next time.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Example</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">255</span><span class=\"p\">)</span>\n    <span class=\"n\">document</span> <span class=\"o\">=</span> <span class=\"n\">CrocoField</span><span class=\"p\">(</span><span class=\"n\">thumbnail_field</span><span class=\"o\">=</span><span class=\"s1\">'my_thumbnail'</span><span class=\"p\">)</span>\n    <span class=\"n\">my_thumbnail</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ImageField</span><span class=\"p\">(</span><span class=\"n\">upload_to</span><span class=\"o\">=</span><span class=\"s1\">'whatever/'</span><span class=\"p\">)</span>\n</pre>\n<p>Note that the <tt>thumbnail_field</tt> must be a type of <a href=\"https://docs.djangoproject.com/en/dev/ref/models/fields/#imagefield\" rel=\"nofollow\">ImageField</a>.</p>\n</div>\n<div id=\"render-the-awesomeness\">\n<h3>Render the awesomeness</h3>\n<div id=\"documents\">\n<h4>Documents</h4>\n<pre>{{ obj.document.name }}\n</pre>\n<p>Returns name of the document.</p>\n<pre>{{ obj.document.size }}\n</pre>\n<p>Returns size of the document (in bytes).</p>\n<pre>{{ obj.document.size_human }}\n</pre>\n<p>Returns human-readable size of the document (eg. 1.3 MB).</p>\n<pre>{{ obj.document.type }}\n</pre>\n<p>Returns type (extension) of the document.</p>\n<pre>{{ obj.document.uuid }}\n</pre>\n<p>Returns UUID of the document (note: each Crocodoc document has unique id).</p>\n</div>\n<div id=\"thumbnails\">\n<h4>Thumbnails</h4>\n<pre>{{ obj.document.thumbnail }}\n</pre>\n<p>Returns thumbnail as inline image (see <a href=\"https://en.wikipedia.org/wiki/Data_URI_scheme\" rel=\"nofollow\">Data URI scheme</a> for more details). See below for how to download a thumbnail.</p>\n</div>\n<div id=\"urls\">\n<h4>URLs</h4>\n<pre>{{ obj.document.url }}\n</pre>\n<p>Returns url of the document so it can be viewed directly.</p>\n<pre>{{ obj.document.content_url }}\n</pre>\n<p>Returns url of the document wrapped in <a href=\"https://docs.djangoproject.com/en/dev/ref/request-response/#django.http.HttpResponse\" rel=\"nofollow\">HttpResponse</a> object.</p>\n<p>Both <tt>url</tt> and <tt>content_url</tt> can be extended with <a href=\"https://crocodoc.com/docs/api/#session-create\" rel=\"nofollow\">optional parameters</a>.</p>\n<pre>{{ obj.document.url|editable:\"true\"|user_id:\"1\"|user_name:\"admin\" }}\n</pre>\n<p><tt>editable</tt> param allows users to create annotations and comments while viewing the document.\n<strong>Default: false</strong></p>\n<p><tt>user_id</tt> and <tt>user_name</tt> will be shown in the viewer to attribute annotations and comments to their author. <strong>Required if editable is true</strong></p>\n<pre>{{ obj.document.url|user_filter:\"1,2,3\" }}\n</pre>\n<p>Limits which users\u2019 annotations and comments are shown. Possible values are: <em>all</em>, <em>none</em>, or a comma-separated list of user IDs. <strong>Default: all</strong></p>\n<p><strong>Note</strong>: <tt>user_filter</tt> is a renamed version of Crocodoc\u2019s <tt>filter</tt> in order to work in Django template system.</p>\n<p>Full list of supported <a href=\"https://crocodoc.com/docs/api/#session-create\" rel=\"nofollow\">parameters</a>.</p>\n</div>\n<div id=\"downloads\">\n<h4>Downloads</h4>\n<pre>{{ obj.document.download_document }}\n</pre>\n<p>Returns the original document in PDF format.</p>\n<pre>{{ obj.document.download_document|annotated:\"true\" }}\n</pre>\n<p>Returns the original document with annotations. <strong>Default: false</strong></p>\n<pre>{{ obj.document.download_document|user_filter:\"1,2,3\" }}\n</pre>\n<p>Returns the original document with annotations limited to given users.\nPossible values are: <em>all</em>, <em>none</em>, or a comma-separated list of user IDs. <strong>Default: all</strong></p>\n<pre>{{ obj.document.download_thumbnail }}\n</pre>\n<p>Returns a thumbnail of the document\u2019s first page in PNG format.</p>\n<pre>{{ obj.document.download_thumbnail|size:\"99x99\" }}\n</pre>\n<p>Same as <tt>download_thumbnail</tt> with custom dimensions of the thumbnail in the format <em>{width}x{height}</em>. Largest dimensions allowed are 300x300. <strong>Default: 100x100</strong></p>\n<pre>{{ obj.document.download_text }}\n</pre>\n<p>Returns the full text from a document.\nNote: This method is available only if your Crocodoc account has text\nextraction enabled.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1891415, "releases": {"0.4.0": [{"comment_text": "", "digests": {"md5": "e065a88dc9569b8dfc5ec023a01f4dee", "sha256": "ddfe9dd623bda29b0294c31f7eed87a95ce78293a6a8ee99c63d659eda002d74"}, "downloads": -1, "filename": "django-croco-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e065a88dc9569b8dfc5ec023a01f4dee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12242, "upload_time": "2015-05-08T10:46:16", "upload_time_iso_8601": "2015-05-08T10:46:16.383282Z", "url": "https://files.pythonhosted.org/packages/0c/61/85ff6c86aba5bdb09aeb4b1a3c383073c72758bba056f1ae62383904c05f/django-croco-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c20e8e34aa4c12ea27f7a33ae61ea01f", "sha256": "a4572516447569431e6e95ce6ca7ce525de854cc6b731e0845ca2343f542161f"}, "downloads": -1, "filename": "django-croco-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c20e8e34aa4c12ea27f7a33ae61ea01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12270, "upload_time": "2015-05-08T15:24:11", "upload_time_iso_8601": "2015-05-08T15:24:11.619274Z", "url": "https://files.pythonhosted.org/packages/0d/e7/2d308620456c133a7e9df7fa867262a5809ac6db5345f7ebe21cf3f0c300/django-croco-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "0d52971ec094075bd2001f9b859b5185", "sha256": "9c50c1eb6e35cf1c45f7148b9b6df8fd7dcf125ae050c471cd625682072d58ce"}, "downloads": -1, "filename": "django-croco-0.4.2.tar.gz", "has_sig": false, "md5_digest": "0d52971ec094075bd2001f9b859b5185", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12210, "upload_time": "2016-01-06T13:38:03", "upload_time_iso_8601": "2016-01-06T13:38:03.104237Z", "url": "https://files.pythonhosted.org/packages/8c/24/ea842ad03cb7f07a6d14be3cc93e4540daf9ca65c88e271e31810a368560/django-croco-0.4.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "6986c93488ec244af6e7f21477e75959", "sha256": "029d45ef232fb2d2055384393155ad1bbd82e993f7e64345a78483e3b8d1903b"}, "downloads": -1, "filename": "django-croco-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6986c93488ec244af6e7f21477e75959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13449, "upload_time": "2016-01-06T15:50:29", "upload_time_iso_8601": "2016-01-06T15:50:29.189043Z", "url": "https://files.pythonhosted.org/packages/1e/3e/2a267d0f93afe406785e5bae8be2871a6fb41d6c545d51d0769a415c16d8/django-croco-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6986c93488ec244af6e7f21477e75959", "sha256": "029d45ef232fb2d2055384393155ad1bbd82e993f7e64345a78483e3b8d1903b"}, "downloads": -1, "filename": "django-croco-1.0.0.tar.gz", "has_sig": false, "md5_digest": "6986c93488ec244af6e7f21477e75959", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13449, "upload_time": "2016-01-06T15:50:29", "upload_time_iso_8601": "2016-01-06T15:50:29.189043Z", "url": "https://files.pythonhosted.org/packages/1e/3e/2a267d0f93afe406785e5bae8be2871a6fb41d6c545d51d0769a415c16d8/django-croco-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:47 2020"}