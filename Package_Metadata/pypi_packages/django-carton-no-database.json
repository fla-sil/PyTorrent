{"info": {"author": "jgouveia", "author_email": "studyclassoficial@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable"], "description": "Django Carton\r\n=============\r\n\r\n\r\n      +------+\r\n     /|     /|\r\n    +-+----+ |    django-carton is a simple and lightweight application\r\n    | |    | |    for shopping carts and wish lists.\r\n    | +----+-+\r\n    |/     |/\r\n    +------+\r\n\r\n\r\n\r\n* Simple: You decide how to implement the views, templates and payment\r\n  processing.\r\n* Lightweight: The cart lives in the session.\r\n* Just a container: You define your product model the way you want.\r\n\r\n\r\nUsage Example\r\n-------------\r\n\r\nView:\r\n\r\n    from django.http import HttpResponse\r\n\r\n    from carton.cart import Cart\r\n    from products.models import Product\r\n\r\n    def add(request):\r\n        cart = Cart(request.session)\r\n        product = Product.objects.get(id=request.GET.get('product_id'))\r\n        cart.add(product, price=product.price)\r\n        return HttpResponse(\"Added\")\r\n\r\n    def show(request):\r\n        return render(request, 'shopping/show-cart.html')\r\n\r\n\r\nWe are assuming here that your products are defined in an application\r\ncalled ``products``.\r\n\r\nTemplate:\r\n\r\n    {% load carton_tags %}\r\n    {% get_cart as cart %}\r\n\r\n    {% for item in cart.items %}\r\n        {{ item.product.name }}\r\n        {{ item.quantity }}\r\n        {{ item.subtotal }}\r\n    {% endfor %}\r\n\r\n    You can also use this convinent shortcut:\r\n    {% for product in cart.products %}\r\n        {{ product.name }}\r\n    {% endfor %}\r\n\r\nWithin the template you can access the product id with {{product.id}}.\r\n\r\nSettings:\r\n\r\n    CART_PRODUCT_MODEL = 'products.models.Product'\r\n\r\n\r\nThis project is shipped with an application example called ``shopping``\r\nimplementing basic add, remove, display features.\r\nTo use it, you will need to install the ``shopping`` application and\r\ninclude the URLs in your project ``urls.py``\r\n\r\n    # settings.py\r\n    INSTALLED_APPS = (\r\n        'carton',\r\n        'shopping',\r\n        'products',\r\n    )\r\n\r\n    # urls.py\r\n    urlpatterns = patterns('',\r\n        url(r'^shopping-cart/', include('shopping.urls')),\r\n    )\r\n\r\n\r\nAssuming you have some products defined, you should be able to\r\nadd, show and remove products like this:\r\n\r\n    /shopping-cart/add/?id=1\r\n    /shopping-cart/show/\r\n    /shopping-cart/remove/?id=1\r\n\r\n\r\nInstallation\r\n------------\r\n\r\nThis application requires Django version 1.4; all versions above should be fine.\r\n\r\nJust install the package using something like pip and add ``carton`` to\r\nyour ``INSTALLED_APPS`` setting.\r\n\r\nAdd the `CART_PRODUCT_MODEL` setting, a dotted path to your product model.\r\n\r\nThis is how you run tests:\r\n\r\n    ./manage.py test carton.tests --settings=carton.tests.settings\r\n\r\n\r\nAbstract\r\n--------\r\n\r\nThe cart is an object that's stored in session. Products are associated\r\nto cart items.\r\n\r\n    Cart\r\n    |-- CartItem\r\n    |----- product\r\n    |----- price\r\n    |----- quantity\r\n\r\nA cart item stores a price, a quantity and an arbitrary instance of\r\na product model.\r\n\r\n\r\nYou can access all your product's attributes, for instance it's name:\r\n\r\n    {% for item in cart.items %}\r\n        {{ item.price }}\r\n        {{ item.quantity }}\r\n        {{ item.product.name }}\r\n    {% endfor %}\r\n\r\n\r\n\r\nManaging Cart Items\r\n-------------------\r\n\r\nThese are simple operations to add, remove and access cart items:\r\n\r\n    >>> apple = Product.objects.all()[0]\r\n    >>> cart.add(apple, price=1.5)\r\n    >>> apple in cart\r\n    True\r\n    >>> cart.remove(apple)\r\n    >>> apple in cart\r\n    False\r\n\r\n    >>> orange = Product.objects.all()[1]\r\n    >>> cart.add(apple, price=1.5)\r\n    >>> cart.total\r\n    Decimal('1.5')\r\n    >>> cart.add(orange, price=2.0)\r\n    >>> cart.total\r\n    Decimal('3.5')\r\n\r\nNote how we check weather the product is in the cart - The following\r\nstatements are different ways to do the same thing:\r\n\r\n    >>> apple in cart\r\n    >>> apple in cart.products\r\n    >>> apple in [item.product for item in cart.items]\r\n\r\n\r\nThe \"product\" refers to the database object. The \"cart item\" is where\r\nwe store a copy of the product, it's quantity and it's price.\r\n\r\n    >>> cart.items\r\n    [CartItem Object (apple), CartItem Object (orange)]\r\n\r\n    >>> cart.products\r\n    [<Product: apple>, <Product: orange>]\r\n\r\n\r\nClear all items:\r\n\r\n    >>> cart.clear()\r\n    >>> cart.total\r\n    0\r\n\r\n\r\nIncrease the quantity by adding more products:\r\n\r\n    >>> cart.add(apple, price=1.5)\r\n    >>> cart.add(apple)  # no need to repeat the price.\r\n    >>> cart.total\r\n    Decimal('3.0')\r\n\r\n\r\nNote that the price is only needed when you add a product for the first time.\r\n\r\n    >>> cart.add(orange)\r\n    *** ValueError: Missing price when adding a cart item.\r\n\r\n\r\nYou can tell how many items are in your cart:\r\n\r\n    >>> cart.clear()\r\n    >>> cart.add(apple, price=1.5)\r\n    >>> cart.add(orange, price=2.0, quantity=3)\r\n    >>> cart.count\r\n    4\r\n    >>> cart.unique_count  # Regarless of product's quantity\r\n    2\r\n\r\n\r\nYou can add several products at the same time:\r\n\r\n    >>> cart.clear()\r\n    >>> cart.add(orange, price=2.0, quantity=3)\r\n    >>> cart.total\r\n    Decimal('6')\r\n    >>> cart.add(orange, quantity=2)\r\n    >>> cart.total\r\n    Decimal('10')\r\n\r\n\r\nThe price is relevant only the first time you add a product:\r\n\r\n    >>> cart.clear()\r\n    >>> cart.add(orange, price=2.0)\r\n    >>> cart.total\r\n    Decimal('2')\r\n    >>> cart.add(orange, price=100)  # this price is ignored\r\n    >>> cart.total\r\n    Decimal('4')\r\n\r\n\r\nNote how the price is ignored on the second call.\r\n\r\n\r\nYou can change the quantity of product that are already in the cart:\r\n\r\n    >>> cart.add(orange, price=2.0)\r\n    >>> cart.total\r\n    Decimal('2')\r\n    >>> cart.set_quantity(orange, quantity=3)\r\n    >>> cart.total\r\n    Decimal('6')\r\n    >>> cart.set_quantity(orange, quantity=1)\r\n    >>> cart.total\r\n    Decimal('2')\r\n    >>> cart.set_quantity(orange, quantity=0)\r\n    >>> cart.total\r\n    0\r\n    >>> cart.set_quantity(orange, quantity=-1)\r\n    *** ValueError: Quantity must be positive when updating cart\r\n\r\n\r\n\r\nRemoving all occurrence of a product:\r\n\r\n    >>> cart.add(apple, price=1.5, quantity=4)\r\n    >>> cart.total\r\n    Decimal('6.0')\r\n    >>> cart.remove(apple)\r\n    >>> cart.total\r\n    0\r\n    >>> apple in cart\r\n    False\r\n\r\n\r\nRemove a single occurrence of a product:\r\n\r\n    >>> cart.add(apple, price=1.5, quantity=4)\r\n    >>> cart.remove_single(apple)\r\n    >>> apple in cart\r\n    True\r\n    >>> cart.total\r\n    Decimal('4.5')\r\n    >>> cart.remove_single(apple)\r\n    >>> cart.total\r\n    Decimal('3.0')\r\n    >>> cart.remove_single(apple)\r\n    >>> cart.total\r\n    Decimal('1.5')\r\n    >>> cart.remove_single(apple)\r\n    >>> cart.total\r\n    0\r\n\r\n\r\nMultiple carts\r\n--------------\r\n\r\nDjango Carton has support for using multiple carts in the same project.\r\nThe carts would need to be stored in Django session using different session\r\nkeys.\r\n\r\n    from carton.cart import Cart\r\n\r\n    cart_1 = Cart(session=request.session, session_key='CART-1')\r\n    cart_2 = Cart(session=request.session, session_key='CART-2')\r\n\r\n\r\nWorking With Product Model\r\n--------------------------\r\n\r\nDjango Carton needs to know how to list your product objects.\r\n\r\nThe default behaviour is to get the product model using the\r\n`CART_PRODUCT_MODEL` setting and list all products.\r\n\r\nThe default queryset manager is used and all products are\r\nretrieved. You can filter products by defining some lookup\r\nparameters in `CART_PRODUCT_LOOKUP` setting.\r\n\r\n    # settings.py\r\n\r\n    CART_PRODUCT_LOOKUP = {\r\n        'published': True,\r\n        'status': 'A',\r\n    }\r\n\r\n\r\nIf you need further customization of the way product model and queryset\r\nare retrieved, you can always sub-class the default `Cart` and overwrite\r\nthe `get_queryset` method. In that case, you should take into account that:\r\n\r\n* You probably won't need `CART_PRODUCT_MODEL` and `CART_PRODUCT_LOOKUP`\r\n  if you get a direct access to your product model and define the\r\n  filtering directly on the cart sub-class.\r\n* You probably have to write your own template tag to retrieve the cart\r\n  since the default `get_cart` template tag point on the `Cart` class\r\n  defined by django-carton.\r\n\r\n\r\nSettings\r\n--------\r\n\r\n### Template Tag Name\r\n\r\nYou can retrieve the cart in templates using\r\n`{% get_cart as my_cart %}`.\r\n\r\nYou can change the name of this template tag using the\r\n`CART_TEMPLATE_TAG_NAME` setting.\r\n\r\n\r\n    # In you project settings\r\n    CART_TEMPLATE_TAG_NAME = 'get_basket'\r\n\r\n    # In templates\r\n    {% load carton_tags %}\r\n    {% get_basket as my_basket %}\r\n\r\n\r\n### Stale Items\r\n\r\nCart items are associated to products in the database. Sometime a product can be found\r\nin the cart when its database instance has been removed. These items are called stale\r\nitems. By default they are removed from the cart.\r\n\r\n### Session Key\r\n\r\nThe `CART_SESSION_KEY` settings controls the name of the session key.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/julianogouveia/django-carton/archive/1.2.2.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/julianogouveia/django-carton", "keywords": "", "license": "GPL", "maintainer": "jgouveia", "maintainer_email": "studyclassoficial@gmail.com", "name": "django-carton-no-database", "package_url": "https://pypi.org/project/django-carton-no-database/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-carton-no-database/", "project_urls": {"Download": "https://github.com/julianogouveia/django-carton/archive/1.2.2.zip", "Homepage": "https://github.com/julianogouveia/django-carton"}, "release_url": "https://pypi.org/project/django-carton-no-database/1.2.2/", "requires_dist": null, "requires_python": null, "summary": "django-carton is a simple and lightweight application for shopping carts and wish lists.", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Django Carton\n<br>=============\n<br>\n<br>\n<br>      +------+\n<br>     /|     /|\n<br>    +-+----+ |    django-carton is a simple and lightweight application\n<br>    | |    | |    for shopping carts and wish lists.\n<br>    | +----+-+\n<br>    |/     |/\n<br>    +------+\n<br>\n<br>\n<br>\n<br>* Simple: You decide how to implement the views, templates and payment\n<br>  processing.\n<br>* Lightweight: The cart lives in the session.\n<br>* Just a container: You define your product model the way you want.\n<br>\n<br>\n<br>Usage Example\n<br>-------------\n<br>\n<br>View:\n<br>\n<br>    from django.http import HttpResponse\n<br>\n<br>    from carton.cart import Cart\n<br>    from products.models import Product\n<br>\n<br>    def add(request):\n<br>        cart = Cart(request.session)\n<br>        product = Product.objects.get(id=request.GET.get('product_id'))\n<br>        cart.add(product, price=product.price)\n<br>        return HttpResponse(\"Added\")\n<br>\n<br>    def show(request):\n<br>        return render(request, 'shopping/show-cart.html')\n<br>\n<br>\n<br>We are assuming here that your products are defined in an application\n<br>called ``products``.\n<br>\n<br>Template:\n<br>\n<br>    {% load carton_tags %}\n<br>    {% get_cart as cart %}\n<br>\n<br>    {% for item in cart.items %}\n<br>        {{ item.product.name }}\n<br>        {{ item.quantity }}\n<br>        {{ item.subtotal }}\n<br>    {% endfor %}\n<br>\n<br>    You can also use this convinent shortcut:\n<br>    {% for product in cart.products %}\n<br>        {{ product.name }}\n<br>    {% endfor %}\n<br>\n<br>Within the template you can access the product id with {{product.id}}.\n<br>\n<br>Settings:\n<br>\n<br>    CART_PRODUCT_MODEL = 'products.models.Product'\n<br>\n<br>\n<br>This project is shipped with an application example called ``shopping``\n<br>implementing basic add, remove, display features.\n<br>To use it, you will need to install the ``shopping`` application and\n<br>include the URLs in your project ``urls.py``\n<br>\n<br>    # settings.py\n<br>    INSTALLED_APPS = (\n<br>        'carton',\n<br>        'shopping',\n<br>        'products',\n<br>    )\n<br>\n<br>    # urls.py\n<br>    urlpatterns = patterns('',\n<br>        url(r'^shopping-cart/', include('shopping.urls')),\n<br>    )\n<br>\n<br>\n<br>Assuming you have some products defined, you should be able to\n<br>add, show and remove products like this:\n<br>\n<br>    /shopping-cart/add/?id=1\n<br>    /shopping-cart/show/\n<br>    /shopping-cart/remove/?id=1\n<br>\n<br>\n<br>Installation\n<br>------------\n<br>\n<br>This application requires Django version 1.4; all versions above should be fine.\n<br>\n<br>Just install the package using something like pip and add ``carton`` to\n<br>your ``INSTALLED_APPS`` setting.\n<br>\n<br>Add the `CART_PRODUCT_MODEL` setting, a dotted path to your product model.\n<br>\n<br>This is how you run tests:\n<br>\n<br>    ./manage.py test carton.tests --settings=carton.tests.settings\n<br>\n<br>\n<br>Abstract\n<br>--------\n<br>\n<br>The cart is an object that's stored in session. Products are associated\n<br>to cart items.\n<br>\n<br>    Cart\n<br>    |-- CartItem\n<br>    |----- product\n<br>    |----- price\n<br>    |----- quantity\n<br>\n<br>A cart item stores a price, a quantity and an arbitrary instance of\n<br>a product model.\n<br>\n<br>\n<br>You can access all your product's attributes, for instance it's name:\n<br>\n<br>    {% for item in cart.items %}\n<br>        {{ item.price }}\n<br>        {{ item.quantity }}\n<br>        {{ item.product.name }}\n<br>    {% endfor %}\n<br>\n<br>\n<br>\n<br>Managing Cart Items\n<br>-------------------\n<br>\n<br>These are simple operations to add, remove and access cart items:\n<br>\n<br>    &gt;&gt;&gt; apple = Product.objects.all()[0]\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5)\n<br>    &gt;&gt;&gt; apple in cart\n<br>    True\n<br>    &gt;&gt;&gt; cart.remove(apple)\n<br>    &gt;&gt;&gt; apple in cart\n<br>    False\n<br>\n<br>    &gt;&gt;&gt; orange = Product.objects.all()[1]\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('1.5')\n<br>    &gt;&gt;&gt; cart.add(orange, price=2.0)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('3.5')\n<br>\n<br>Note how we check weather the product is in the cart - The following\n<br>statements are different ways to do the same thing:\n<br>\n<br>    &gt;&gt;&gt; apple in cart\n<br>    &gt;&gt;&gt; apple in cart.products\n<br>    &gt;&gt;&gt; apple in [item.product for item in cart.items]\n<br>\n<br>\n<br>The \"product\" refers to the database object. The \"cart item\" is where\n<br>we store a copy of the product, it's quantity and it's price.\n<br>\n<br>    &gt;&gt;&gt; cart.items\n<br>    [CartItem Object (apple), CartItem Object (orange)]\n<br>\n<br>    &gt;&gt;&gt; cart.products\n<br>    [&lt;Product: apple&gt;, &lt;Product: orange&gt;]\n<br>\n<br>\n<br>Clear all items:\n<br>\n<br>    &gt;&gt;&gt; cart.clear()\n<br>    &gt;&gt;&gt; cart.total\n<br>    0\n<br>\n<br>\n<br>Increase the quantity by adding more products:\n<br>\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5)\n<br>    &gt;&gt;&gt; cart.add(apple)  # no need to repeat the price.\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('3.0')\n<br>\n<br>\n<br>Note that the price is only needed when you add a product for the first time.\n<br>\n<br>    &gt;&gt;&gt; cart.add(orange)\n<br>    *** ValueError: Missing price when adding a cart item.\n<br>\n<br>\n<br>You can tell how many items are in your cart:\n<br>\n<br>    &gt;&gt;&gt; cart.clear()\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5)\n<br>    &gt;&gt;&gt; cart.add(orange, price=2.0, quantity=3)\n<br>    &gt;&gt;&gt; cart.count\n<br>    4\n<br>    &gt;&gt;&gt; cart.unique_count  # Regarless of product's quantity\n<br>    2\n<br>\n<br>\n<br>You can add several products at the same time:\n<br>\n<br>    &gt;&gt;&gt; cart.clear()\n<br>    &gt;&gt;&gt; cart.add(orange, price=2.0, quantity=3)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('6')\n<br>    &gt;&gt;&gt; cart.add(orange, quantity=2)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('10')\n<br>\n<br>\n<br>The price is relevant only the first time you add a product:\n<br>\n<br>    &gt;&gt;&gt; cart.clear()\n<br>    &gt;&gt;&gt; cart.add(orange, price=2.0)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('2')\n<br>    &gt;&gt;&gt; cart.add(orange, price=100)  # this price is ignored\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('4')\n<br>\n<br>\n<br>Note how the price is ignored on the second call.\n<br>\n<br>\n<br>You can change the quantity of product that are already in the cart:\n<br>\n<br>    &gt;&gt;&gt; cart.add(orange, price=2.0)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('2')\n<br>    &gt;&gt;&gt; cart.set_quantity(orange, quantity=3)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('6')\n<br>    &gt;&gt;&gt; cart.set_quantity(orange, quantity=1)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('2')\n<br>    &gt;&gt;&gt; cart.set_quantity(orange, quantity=0)\n<br>    &gt;&gt;&gt; cart.total\n<br>    0\n<br>    &gt;&gt;&gt; cart.set_quantity(orange, quantity=-1)\n<br>    *** ValueError: Quantity must be positive when updating cart\n<br>\n<br>\n<br>\n<br>Removing all occurrence of a product:\n<br>\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5, quantity=4)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('6.0')\n<br>    &gt;&gt;&gt; cart.remove(apple)\n<br>    &gt;&gt;&gt; cart.total\n<br>    0\n<br>    &gt;&gt;&gt; apple in cart\n<br>    False\n<br>\n<br>\n<br>Remove a single occurrence of a product:\n<br>\n<br>    &gt;&gt;&gt; cart.add(apple, price=1.5, quantity=4)\n<br>    &gt;&gt;&gt; cart.remove_single(apple)\n<br>    &gt;&gt;&gt; apple in cart\n<br>    True\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('4.5')\n<br>    &gt;&gt;&gt; cart.remove_single(apple)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('3.0')\n<br>    &gt;&gt;&gt; cart.remove_single(apple)\n<br>    &gt;&gt;&gt; cart.total\n<br>    Decimal('1.5')\n<br>    &gt;&gt;&gt; cart.remove_single(apple)\n<br>    &gt;&gt;&gt; cart.total\n<br>    0\n<br>\n<br>\n<br>Multiple carts\n<br>--------------\n<br>\n<br>Django Carton has support for using multiple carts in the same project.\n<br>The carts would need to be stored in Django session using different session\n<br>keys.\n<br>\n<br>    from carton.cart import Cart\n<br>\n<br>    cart_1 = Cart(session=request.session, session_key='CART-1')\n<br>    cart_2 = Cart(session=request.session, session_key='CART-2')\n<br>\n<br>\n<br>Working With Product Model\n<br>--------------------------\n<br>\n<br>Django Carton needs to know how to list your product objects.\n<br>\n<br>The default behaviour is to get the product model using the\n<br>`CART_PRODUCT_MODEL` setting and list all products.\n<br>\n<br>The default queryset manager is used and all products are\n<br>retrieved. You can filter products by defining some lookup\n<br>parameters in `CART_PRODUCT_LOOKUP` setting.\n<br>\n<br>    # settings.py\n<br>\n<br>    CART_PRODUCT_LOOKUP = {\n<br>        'published': True,\n<br>        'status': 'A',\n<br>    }\n<br>\n<br>\n<br>If you need further customization of the way product model and queryset\n<br>are retrieved, you can always sub-class the default `Cart` and overwrite\n<br>the `get_queryset` method. In that case, you should take into account that:\n<br>\n<br>* You probably won't need `CART_PRODUCT_MODEL` and `CART_PRODUCT_LOOKUP`\n<br>  if you get a direct access to your product model and define the\n<br>  filtering directly on the cart sub-class.\n<br>* You probably have to write your own template tag to retrieve the cart\n<br>  since the default `get_cart` template tag point on the `Cart` class\n<br>  defined by django-carton.\n<br>\n<br>\n<br>Settings\n<br>--------\n<br>\n<br>### Template Tag Name\n<br>\n<br>You can retrieve the cart in templates using\n<br>`{% get_cart as my_cart %}`.\n<br>\n<br>You can change the name of this template tag using the\n<br>`CART_TEMPLATE_TAG_NAME` setting.\n<br>\n<br>\n<br>    # In you project settings\n<br>    CART_TEMPLATE_TAG_NAME = 'get_basket'\n<br>\n<br>    # In templates\n<br>    {% load carton_tags %}\n<br>    {% get_basket as my_basket %}\n<br>\n<br>\n<br>### Stale Items\n<br>\n<br>Cart items are associated to products in the database. Sometime a product can be found\n<br>in the cart when its database instance has been removed. These items are called stale\n<br>items. By default they are removed from the cart.\n<br>\n<br>### Session Key\n<br>\n<br>The `CART_SESSION_KEY` settings controls the name of the session key.\n          </div>"}, "last_serial": 2365222, "releases": {"1.2.1": [], "1.2.2": []}, "urls": [], "timestamp": "Fri May  8 00:37:15 2020"}