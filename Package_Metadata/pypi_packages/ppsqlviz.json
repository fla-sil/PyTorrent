{"info": {"author": "Srivatsan Ramanujam", "author_email": "vatsan.cs@utexas.edu", "bugtrack_url": null, "classifiers": [], "description": "GitHub Page\n============\n\nPandas-via-psql (ppsqlviz) is a command line visualization utility for SQL using Pandas library in Python.\nPlease visit the GitHub page [ppsqlviz](http://vatsan.github.io/pandas_via_psql/) for a complete tutorial.\n\nPSQL + Pandas Awesomeness\n==========================\n\n[Pandas](http://pandas.pydata.org/) is a popular library in Python that is commonly used for data analysis and it provides Python equivalent of the R dataframe that is fundamental to data analysis. Some engineers and data scientists however are increasingly adopting SQL based libraries for building large scale machine learning algorithms. [MADlib](http://madlib.net) is one such library for scalable, parallel, in-database machine learning.\n\nWhile there are commercial tools to visualize data that reside in databases (example: Tableau), often what's missing in a Big Data scientist's arsenal is a command line tool to be able to quickly visualize the output of a SQL query, without having to switch to a commercial tool or have to use a wrapper to a SQL engine. The pandas_via_psql (ppsqlviz) will show you how simple it is to redirect the output of a SQL query to some boilerplate Pandas's plotting functions, to quickly visualize the data from the command line.\n\nPre-Requisites\n==============\n\nppsqlviz depends on the Pandas python library. You should also have [PSQL](http://www.postgresql.org/docs/8.1/static/app-psql.html) or a similar SQL command line interface to connect to your database and also ensure that you have password-less access to your remote database (set up SSH keys appropriately).\n\nI recommend you download [Anaconda Python](https://store.continuum.io/cshop/anaconda/) from the nice folks at [Continuum Analytics](http://continuum.io/). It's got most of the essential Python scientific computing libraries pre-packaged and with [conda](http://bokeh.pydata.org/) you can save a lot of pain in installing python libraries. It also makes creating and managing virtual environments a piece of cake!\n\nInstallation\n=============\n\nYou can install install ppsqlviz through pip\n\n```\npip install ppsqlviz\n```\n\nThis will install the dependent library (Pandas) if you don't already have that. I strongly encourage you use Anaconda Python to avoid going down the rabbit hole of PyData stack dependency nightmares.\n\n\nDatasets Used\n==============\n\nFor this demo, I'm using two publicly available datasets. \n* [The UCI wine quality dataset](http://archive.ics.uci.edu/ml/datasets/Wine+Quality) - Here is a sampling of rows from this dataset:\n\n```\nalcohol | mmalic_acid | ash  | alcalinity_of_ash | magnesium | total_phenols | flavanoids | nonflavanoid_phenols | proanthocyanins | color_intensity |  hue  | od280 | proline | quality \n---------+-------------+------+-------------------+-----------+---------------+------------+----------------------+-----------------+-----------------+-------+-------+---------+---------\n       1 |       14.23 | 1.71 |              2.43 |      15.6 |           127 |        2.8 |                 3.06 |            0.28 |            2.29 |  5.64 |  1.04 |    3.92 |    1065\n       1 |        13.2 | 1.78 |              2.14 |      11.2 |           100 |       2.65 |                 2.76 |            0.26 |            1.28 |  4.38 |  1.05 |     3.4 |    1050\n       1 |       13.16 | 2.36 |              2.67 |      18.6 |           101 |        2.8 |                 3.24 |             0.3 |            2.81 |  5.68 |  1.03 |    3.17 |    1185\n       1 |       14.37 | 1.95 |               2.5 |      16.8 |           113 |       3.85 |                 3.49 |            0.24 |            2.18 |   7.8 |  0.86 |    3.45 |    1480\n       1 |       13.24 | 2.59 |              2.87 |        21 |           118 |        2.8 |                 2.69 |            0.39 |            1.82 |  4.32 |  1.04 |    2.93 |     735\n       1 |        14.2 | 1.76 |              2.45 |      15.2 |           112 |       3.27 |                 3.39 |            0.34 |            1.97 |  6.75 |  1.05 |    2.85 |    1450\n       1 |       14.39 | 1.87 |              2.45 |      14.6 |            96 |        2.5 |                 2.52 |             0.3 |            1.98 |  5.25 |  1.02 |    3.58 |    1290\n       1 |       14.06 | 2.15 |              2.61 |      17.6 |           121 |        2.6 |                 2.51 |            0.31 |            1.25 |  5.05 |  1.06 |    3.58 |    1295\n       1 |       14.83 | 1.64 |              2.17 |        14 |            97 |        2.8 |                 2.98 |            0.29 |            1.98 |   5.2 |  1.08 |    2.85 |    1045\n       1 |       13.86 | 1.35 |              2.27 |        16 |            98 |       2.98 |                 3.15 |            0.22 |            1.85 |  7.22 |  1.01 |    3.55 |    1045\n       1 |        14.1 | 2.16 |               2.3 |        18 |           105 |       2.95 |                 3.32 |            0.22 |            2.38 |  5.75 |  1.25 |    3.17 |    1510\n       1 |       14.12 | 1.48 |              2.32 |      16.8 |            95 |        2.2 |                 2.43 |            0.26 |            1.57 |     5 |  1.17 |    2.82 |    1280\n       1 |       13.75 | 1.73 |              2.41 |        16 |            89 |        2.6 |                 2.76 |            0.29 |            1.81 |   5.6 |  1.15 |     2.9 |    1320\n       1 |       14.75 | 1.73 |              2.39 |      11.4 |            91 |        3.1 |                 3.69 |            0.43 |            2.81 |   5.4 |  1.25 |    2.73 |    1150\n       1 |       14.38 | 1.87 |              2.38 |        12 |           102 |        3.3 |                 3.64 |            0.29 |            2.96 |   7.5 |   1.2 |       3 |    1547\n       1 |       13.63 | 1.81 |               2.7 |      17.2 |           112 |       2.85 |                 2.91 |             0.3 |            1.46 |   7.3 |  1.28 |    2.88 |    1310\n\n```\n\n* [The S&P daily prices dataset](http://finance.yahoo.com/q/hp?s=%5EGSPC+Historical+Prices) - Here is a sampling of rows from this dataset:\n\n```\n     dt     |  open   |  high   |   low   |  close  |   volume   | adj_close \n------------+---------+---------+---------+---------+------------+-----------\n 2013-09-27 | 1695.52 | 1695.52 | 1687.11 | 1691.75 | 2951700000 |   1691.75\n 2012-04-23 | 1378.53 | 1378.53 | 1358.79 | 1366.94 | 3654860000 |   1366.94\n 2012-01-18 | 1293.65 | 1308.11 | 1290.99 | 1308.04 | 4096160000 |   1308.04\n 2011-09-07 | 1165.85 | 1198.62 | 1165.85 | 1198.62 | 4441040000 |   1198.62\n 2011-06-03 | 1312.94 | 1312.94 |  1297.9 | 1300.16 | 3505030000 |   1300.16\n 2011-03-31 | 1327.44 | 1329.77 | 1325.03 | 1325.83 | 3566270000 |   1325.83\n 2010-12-28 |  1259.1 |  1259.9 | 1256.22 | 1258.51 | 2478450000 |   1258.51\n 2010-09-23 |  1131.1 | 1136.77 | 1122.79 | 1124.83 | 3847850000 |   1124.83\n 2010-07-21 | 1086.67 | 1088.96 | 1065.25 | 1069.59 | 4747180000 |   1069.59\n 2010-05-13 | 1170.04 | 1173.57 | 1156.14 | 1157.44 | 4870640000 |   1157.44\n 2010-03-10 | 1140.22 | 1148.26 | 1140.09 | 1145.61 | 5469120000 |   1145.61\n 2009-12-04 | 1100.43 | 1119.13 | 1096.52 | 1105.98 | 5781140000 |   1105.98\n 2009-07-24 |  972.16 |  979.79 |  965.95 |  979.26 | 4458300000 |    979.26\n 2009-02-09 |  868.24 |  875.01 |  861.65 |  869.89 | 5574370000 |    869.89\n 2008-11-05 | 1001.84 | 1001.84 |  949.86 |  952.77 | 5426640000 |    952.77\n 2008-09-02 | 1287.83 | 1303.04 |  1272.2 | 1277.58 | 4783560000 |   1277.58\n 2008-04-30 | 1391.22 | 1404.57 | 1384.25 | 1385.59 | 4508890000 |   1385.59\n 2008-01-25 | 1357.32 | 1368.56 |  1327.5 | 1330.61 | 4882250000 |   1330.61\n 2007-09-14 | 1483.95 | 1485.99 | 1473.18 | 1484.25 | 2641740000 |   1484.25\n```\n\nUsage\n======\nInvoke Pandas plotting functions by piping in the output from a psql query.\nYou can re-use this boiler-plate code for Scatter Plots, Box Plots, Histograms and Time Series Plots on your tables.\n\n\nScatter Matrix\n===============\nThis is pretty useful when you are interested in analyzing the correlation between a bunch of features in a dataset, particularly in their correlation with the target attribute/label. You might then perform feature selection based on a visual output of the correlations.\n\nHere is how the scatter matrix can be created on the UCI Wine Quality Dataset\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select * from wine;' | python -m 'ppsqlviz.plotter' scatter\n```\nHere is the output ![Scatter Matrix of all features from the Wine Quality Dataset]\n(https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/scatter_matrix.png)\n\n\nHexbin Plots\n=============\nScatter plots sometimes may not reveal the underlying relationship between the dimensions when multiple points overlap.\nFor this reason, it is better to look at a 2-d histogram or a hex-bin plot. We can tap into `matplotlib's` hexbin plot for this.\n\nYou could invoke it from your command line like so:\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids from wine;' | python -m 'ppsqlviz.plotter' hexbin\n```\nHere is the output ![Hexbin plot of Ash vs. Flavanoids from Wine Quality Dataset]\n(https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/hexbin.png)\n\n\nHistogram Plot\n==============\nTo get a quick glimpse of the distribution of the data in your columns, a histogram plot of all columns is quite useful.\n\nYou could invoke it from your command line like so:\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' hist\n```\nHere is the output \n![Histogram Plots of some features from the Wine Quality Dataset](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/histogram.png)\n\nDensity Plot\n=============\nIn place of binning your data, you might consider plotting the density directly. \n\nYou could invoke it from your command line like so:\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' density\n```\nHere is the output ![Density Plots of some features from the Wine Quality Dataset](https://raw.github.com/vatsan/pandas_via_psql/master/plots/density.png)\n\nBox Plot\n=========\nBox plots are useful in visually getting a feel for the quartile ranges of numerical columns in your dataset. You could invoke it from your command line like so:\n\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' box\n```\nHere is the output ![Box Plot of some features from the Wine Quality Dataset](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/boxplot.png)\n\nTime Series Plot\n=================\nAgain, Pandas has an impressive collection of functions for time series analysis but to quickly visualize a time series, you can run the following from your command line:\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select dt, high, low  from sandp_prices where dt > 1998 order by dt;' | python -m 'ppsqlviz.plotter' tseries\n```\nHere is the output ![Time Series Plotting of S&P](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/time_series.png)\n\nBar Plot\n==================\nBar plots are typically used to plot binned data, where the data is binned according to user specified bins. This support is provided in pandas-via-psql. The data table is expected to comprise of two array columns of the same length, one each for the x and y axes. You can plot a bar plot by running the following from your command line:\n\n```\nhome$ psql -d <dbname> -h <hostname> -U gpadmin -c 'select x*10 as binCenter, random()*100 as count from generate_series(1, 100) x;' | python -m 'ppsqlviz.plotter' bar \n```\nThe first column always has to be the x axis (bin center).\nHere's the output ![Bar Plot](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/barplot.png)\n\nImage Rendering\n===================\nPandas also has a great set of tools for viewing images: grayscale or RGB, which can be quite handy when working on image processing or computer vision in SQL. For example, to check a binary mask after thresholding or the weights output by a deep learning algorithm, it is much easier to visualize an image than to interpret a table of intensity values.\nTo view an image whose intensity values are stored in a table, simply select the height and width of the image (number of rows & columns) followed by a vector of intensity values ordered by row, then column. For example, to view this 270x360 pixel grayscale image, you can run the following from your command line:\n\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select 270 as rows, 360 as cols, intensity_values from sample_image;' | python -m 'ppsqlviz.plotter' image\n```\n\nHere is the output ![Sample Grayscale image](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/YosemiteGrayscale.png)\n\nSimilarly, to view an RGB image, provide the image height and width followed by a vector of intensity values ordered by row, then column, then color. To view a sample RGB image you can run the following from your comman line:\n\n```\nhome$ psql -d vatsandb -h dca -U gpadmin -c 'select max(row)+1, max(col)+1, array[array_agg(red_intensity order by row,col), array_agg(green_intensity order by row,col), array_agg(blue_intensity order by row,col)] from (select * from sample_RGB_image order by row,col)t;' | python -m 'ppsqlviz.plotter' imageRGB\n```\n\nHere is the output ![Sample RGB image](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/YosemiteRGB.jpeg)\n\n\nAuthor\n=======\n\nPlease email questions and feedback to [Srivatsan Ramanujam](https://github.com/vatsan/) at vatsan.cs@utexas.edu\n\nContributors\n==============\n\nThanks to [Ailey Crow](https://github.com/ailey) and [Gautam Muralidhar](https://github.com/gautamsm) for their contributions.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://vatsan.github.io/pandas_via_psql/", "keywords": null, "license": "LICENSE.txt", "maintainer": null, "maintainer_email": null, "name": "ppsqlviz", "package_url": "https://pypi.org/project/ppsqlviz/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ppsqlviz/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://vatsan.github.io/pandas_via_psql/"}, "release_url": "https://pypi.org/project/ppsqlviz/1.0.1/", "requires_dist": null, "requires_python": null, "summary": "A command line visualization utility for SQL using Pandas library in Python.", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            GitHub Page<br>============<br><br>Pandas-via-psql (ppsqlviz) is a command line visualization utility for SQL using Pandas library in Python.<br>Please visit the GitHub page [ppsqlviz](http://vatsan.github.io/pandas_via_psql/) for a complete tutorial.<br><br>PSQL + Pandas Awesomeness<br>==========================<br><br>[Pandas](http://pandas.pydata.org/) is a popular library in Python that is commonly used for data analysis and it provides Python equivalent of the R dataframe that is fundamental to data analysis. Some engineers and data scientists however are increasingly adopting SQL based libraries for building large scale machine learning algorithms. [MADlib](http://madlib.net) is one such library for scalable, parallel, in-database machine learning.<br><br>While there are commercial tools to visualize data that reside in databases (example: Tableau), often what's missing in a Big Data scientist's arsenal is a command line tool to be able to quickly visualize the output of a SQL query, without having to switch to a commercial tool or have to use a wrapper to a SQL engine. The pandas_via_psql (ppsqlviz) will show you how simple it is to redirect the output of a SQL query to some boilerplate Pandas's plotting functions, to quickly visualize the data from the command line.<br><br>Pre-Requisites<br>==============<br><br>ppsqlviz depends on the Pandas python library. You should also have [PSQL](http://www.postgresql.org/docs/8.1/static/app-psql.html) or a similar SQL command line interface to connect to your database and also ensure that you have password-less access to your remote database (set up SSH keys appropriately).<br><br>I recommend you download [Anaconda Python](https://store.continuum.io/cshop/anaconda/) from the nice folks at [Continuum Analytics](http://continuum.io/). It's got most of the essential Python scientific computing libraries pre-packaged and with [conda](http://bokeh.pydata.org/) you can save a lot of pain in installing python libraries. It also makes creating and managing virtual environments a piece of cake!<br><br>Installation<br>=============<br><br>You can install install ppsqlviz through pip<br><br>```<br>pip install ppsqlviz<br>```<br><br>This will install the dependent library (Pandas) if you don't already have that. I strongly encourage you use Anaconda Python to avoid going down the rabbit hole of PyData stack dependency nightmares.<br><br><br>Datasets Used<br>==============<br><br>For this demo, I'm using two publicly available datasets. <br>* [The UCI wine quality dataset](http://archive.ics.uci.edu/ml/datasets/Wine+Quality) - Here is a sampling of rows from this dataset:<br><br>```<br>alcohol | mmalic_acid | ash  | alcalinity_of_ash | magnesium | total_phenols | flavanoids | nonflavanoid_phenols | proanthocyanins | color_intensity |  hue  | od280 | proline | quality <br>---------+-------------+------+-------------------+-----------+---------------+------------+----------------------+-----------------+-----------------+-------+-------+---------+---------<br>       1 |       14.23 | 1.71 |              2.43 |      15.6 |           127 |        2.8 |                 3.06 |            0.28 |            2.29 |  5.64 |  1.04 |    3.92 |    1065<br>       1 |        13.2 | 1.78 |              2.14 |      11.2 |           100 |       2.65 |                 2.76 |            0.26 |            1.28 |  4.38 |  1.05 |     3.4 |    1050<br>       1 |       13.16 | 2.36 |              2.67 |      18.6 |           101 |        2.8 |                 3.24 |             0.3 |            2.81 |  5.68 |  1.03 |    3.17 |    1185<br>       1 |       14.37 | 1.95 |               2.5 |      16.8 |           113 |       3.85 |                 3.49 |            0.24 |            2.18 |   7.8 |  0.86 |    3.45 |    1480<br>       1 |       13.24 | 2.59 |              2.87 |        21 |           118 |        2.8 |                 2.69 |            0.39 |            1.82 |  4.32 |  1.04 |    2.93 |     735<br>       1 |        14.2 | 1.76 |              2.45 |      15.2 |           112 |       3.27 |                 3.39 |            0.34 |            1.97 |  6.75 |  1.05 |    2.85 |    1450<br>       1 |       14.39 | 1.87 |              2.45 |      14.6 |            96 |        2.5 |                 2.52 |             0.3 |            1.98 |  5.25 |  1.02 |    3.58 |    1290<br>       1 |       14.06 | 2.15 |              2.61 |      17.6 |           121 |        2.6 |                 2.51 |            0.31 |            1.25 |  5.05 |  1.06 |    3.58 |    1295<br>       1 |       14.83 | 1.64 |              2.17 |        14 |            97 |        2.8 |                 2.98 |            0.29 |            1.98 |   5.2 |  1.08 |    2.85 |    1045<br>       1 |       13.86 | 1.35 |              2.27 |        16 |            98 |       2.98 |                 3.15 |            0.22 |            1.85 |  7.22 |  1.01 |    3.55 |    1045<br>       1 |        14.1 | 2.16 |               2.3 |        18 |           105 |       2.95 |                 3.32 |            0.22 |            2.38 |  5.75 |  1.25 |    3.17 |    1510<br>       1 |       14.12 | 1.48 |              2.32 |      16.8 |            95 |        2.2 |                 2.43 |            0.26 |            1.57 |     5 |  1.17 |    2.82 |    1280<br>       1 |       13.75 | 1.73 |              2.41 |        16 |            89 |        2.6 |                 2.76 |            0.29 |            1.81 |   5.6 |  1.15 |     2.9 |    1320<br>       1 |       14.75 | 1.73 |              2.39 |      11.4 |            91 |        3.1 |                 3.69 |            0.43 |            2.81 |   5.4 |  1.25 |    2.73 |    1150<br>       1 |       14.38 | 1.87 |              2.38 |        12 |           102 |        3.3 |                 3.64 |            0.29 |            2.96 |   7.5 |   1.2 |       3 |    1547<br>       1 |       13.63 | 1.81 |               2.7 |      17.2 |           112 |       2.85 |                 2.91 |             0.3 |            1.46 |   7.3 |  1.28 |    2.88 |    1310<br><br>```<br><br>* [The S&amp;P daily prices dataset](http://finance.yahoo.com/q/hp?s=%5EGSPC+Historical+Prices) - Here is a sampling of rows from this dataset:<br><br>```<br>     dt     |  open   |  high   |   low   |  close  |   volume   | adj_close <br>------------+---------+---------+---------+---------+------------+-----------<br> 2013-09-27 | 1695.52 | 1695.52 | 1687.11 | 1691.75 | 2951700000 |   1691.75<br> 2012-04-23 | 1378.53 | 1378.53 | 1358.79 | 1366.94 | 3654860000 |   1366.94<br> 2012-01-18 | 1293.65 | 1308.11 | 1290.99 | 1308.04 | 4096160000 |   1308.04<br> 2011-09-07 | 1165.85 | 1198.62 | 1165.85 | 1198.62 | 4441040000 |   1198.62<br> 2011-06-03 | 1312.94 | 1312.94 |  1297.9 | 1300.16 | 3505030000 |   1300.16<br> 2011-03-31 | 1327.44 | 1329.77 | 1325.03 | 1325.83 | 3566270000 |   1325.83<br> 2010-12-28 |  1259.1 |  1259.9 | 1256.22 | 1258.51 | 2478450000 |   1258.51<br> 2010-09-23 |  1131.1 | 1136.77 | 1122.79 | 1124.83 | 3847850000 |   1124.83<br> 2010-07-21 | 1086.67 | 1088.96 | 1065.25 | 1069.59 | 4747180000 |   1069.59<br> 2010-05-13 | 1170.04 | 1173.57 | 1156.14 | 1157.44 | 4870640000 |   1157.44<br> 2010-03-10 | 1140.22 | 1148.26 | 1140.09 | 1145.61 | 5469120000 |   1145.61<br> 2009-12-04 | 1100.43 | 1119.13 | 1096.52 | 1105.98 | 5781140000 |   1105.98<br> 2009-07-24 |  972.16 |  979.79 |  965.95 |  979.26 | 4458300000 |    979.26<br> 2009-02-09 |  868.24 |  875.01 |  861.65 |  869.89 | 5574370000 |    869.89<br> 2008-11-05 | 1001.84 | 1001.84 |  949.86 |  952.77 | 5426640000 |    952.77<br> 2008-09-02 | 1287.83 | 1303.04 |  1272.2 | 1277.58 | 4783560000 |   1277.58<br> 2008-04-30 | 1391.22 | 1404.57 | 1384.25 | 1385.59 | 4508890000 |   1385.59<br> 2008-01-25 | 1357.32 | 1368.56 |  1327.5 | 1330.61 | 4882250000 |   1330.61<br> 2007-09-14 | 1483.95 | 1485.99 | 1473.18 | 1484.25 | 2641740000 |   1484.25<br>```<br><br>Usage<br>======<br>Invoke Pandas plotting functions by piping in the output from a psql query.<br>You can re-use this boiler-plate code for Scatter Plots, Box Plots, Histograms and Time Series Plots on your tables.<br><br><br>Scatter Matrix<br>===============<br>This is pretty useful when you are interested in analyzing the correlation between a bunch of features in a dataset, particularly in their correlation with the target attribute/label. You might then perform feature selection based on a visual output of the correlations.<br><br>Here is how the scatter matrix can be created on the UCI Wine Quality Dataset<br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select * from wine;' | python -m 'ppsqlviz.plotter' scatter<br>```<br>Here is the output ![Scatter Matrix of all features from the Wine Quality Dataset]<br>(https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/scatter_matrix.png)<br><br><br>Hexbin Plots<br>=============<br>Scatter plots sometimes may not reveal the underlying relationship between the dimensions when multiple points overlap.<br>For this reason, it is better to look at a 2-d histogram or a hex-bin plot. We can tap into `matplotlib's` hexbin plot for this.<br><br>You could invoke it from your command line like so:<br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids from wine;' | python -m 'ppsqlviz.plotter' hexbin<br>```<br>Here is the output ![Hexbin plot of Ash vs. Flavanoids from Wine Quality Dataset]<br>(https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/hexbin.png)<br><br><br>Histogram Plot<br>==============<br>To get a quick glimpse of the distribution of the data in your columns, a histogram plot of all columns is quite useful.<br><br>You could invoke it from your command line like so:<br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' hist<br>```<br>Here is the output <br>![Histogram Plots of some features from the Wine Quality Dataset](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/histogram.png)<br><br>Density Plot<br>=============<br>In place of binning your data, you might consider plotting the density directly. <br><br>You could invoke it from your command line like so:<br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' density<br>```<br>Here is the output ![Density Plots of some features from the Wine Quality Dataset](https://raw.github.com/vatsan/pandas_via_psql/master/plots/density.png)<br><br>Box Plot<br>=========<br>Box plots are useful in visually getting a feel for the quartile ranges of numerical columns in your dataset. You could invoke it from your command line like so:<br><br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select ash, flavanoids, hue, proline from wine;' | python -m 'ppsqlviz.plotter' box<br>```<br>Here is the output ![Box Plot of some features from the Wine Quality Dataset](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/boxplot.png)<br><br>Time Series Plot<br>=================<br>Again, Pandas has an impressive collection of functions for time series analysis but to quickly visualize a time series, you can run the following from your command line:<br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select dt, high, low  from sandp_prices where dt &gt; 1998 order by dt;' | python -m 'ppsqlviz.plotter' tseries<br>```<br>Here is the output ![Time Series Plotting of S&amp;P](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/time_series.png)<br><br>Bar Plot<br>==================<br>Bar plots are typically used to plot binned data, where the data is binned according to user specified bins. This support is provided in pandas-via-psql. The data table is expected to comprise of two array columns of the same length, one each for the x and y axes. You can plot a bar plot by running the following from your command line:<br><br>```<br>home$ psql -d &lt;dbname&gt; -h &lt;hostname&gt; -U gpadmin -c 'select x*10 as binCenter, random()*100 as count from generate_series(1, 100) x;' | python -m 'ppsqlviz.plotter' bar <br>```<br>The first column always has to be the x axis (bin center).<br>Here's the output ![Bar Plot](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/barplot.png)<br><br>Image Rendering<br>===================<br>Pandas also has a great set of tools for viewing images: grayscale or RGB, which can be quite handy when working on image processing or computer vision in SQL. For example, to check a binary mask after thresholding or the weights output by a deep learning algorithm, it is much easier to visualize an image than to interpret a table of intensity values.<br>To view an image whose intensity values are stored in a table, simply select the height and width of the image (number of rows &amp; columns) followed by a vector of intensity values ordered by row, then column. For example, to view this 270x360 pixel grayscale image, you can run the following from your command line:<br><br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select 270 as rows, 360 as cols, intensity_values from sample_image;' | python -m 'ppsqlviz.plotter' image<br>```<br><br>Here is the output ![Sample Grayscale image](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/YosemiteGrayscale.png)<br><br>Similarly, to view an RGB image, provide the image height and width followed by a vector of intensity values ordered by row, then column, then color. To view a sample RGB image you can run the following from your comman line:<br><br>```<br>home$ psql -d vatsandb -h dca -U gpadmin -c 'select max(row)+1, max(col)+1, array[array_agg(red_intensity order by row,col), array_agg(green_intensity order by row,col), array_agg(blue_intensity order by row,col)] from (select * from sample_RGB_image order by row,col)t;' | python -m 'ppsqlviz.plotter' imageRGB<br>```<br><br>Here is the output ![Sample RGB image](https://raw.githubusercontent.com/vatsan/pandas_via_psql/master/plots/YosemiteRGB.jpeg)<br><br><br>Author<br>=======<br><br>Please email questions and feedback to [Srivatsan Ramanujam](https://github.com/vatsan/) at vatsan.cs@utexas.edu<br><br>Contributors<br>==============<br><br>Thanks to [Ailey Crow](https://github.com/ailey) and [Gautam Muralidhar](https://github.com/gautamsm) for their contributions.\n          </div>"}, "last_serial": 1299016, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "bf4f12d47ae70e2a2558902a3b5a4b0a", "sha256": "094a7b1defe7a907b2f69e557b867b79dd312f6f3da14b94fb7f443757624509"}, "downloads": -1, "filename": "ppsqlviz-1.0.tar.gz", "has_sig": false, "md5_digest": "bf4f12d47ae70e2a2558902a3b5a4b0a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9586, "upload_time": "2014-11-07T22:30:34", "upload_time_iso_8601": "2014-11-07T22:30:34.569090Z", "url": "https://files.pythonhosted.org/packages/c7/01/29612bc176c12a03ddc5237f9811bfc313a3d9ca11c6074f70d2ffe73018/ppsqlviz-1.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "00d792b0e78fdbb7161ac76d9383155f", "sha256": "d1b9d1a5d04cd427063a51cc0c251705c8548b4b2b4efa1a7e4cc89dd78b47e5"}, "downloads": -1, "filename": "ppsqlviz-1.0.1.tar.gz", "has_sig": false, "md5_digest": "00d792b0e78fdbb7161ac76d9383155f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9979, "upload_time": "2014-11-08T01:49:40", "upload_time_iso_8601": "2014-11-08T01:49:40.588887Z", "url": "https://files.pythonhosted.org/packages/75/c9/1548d73162e05b59dea5869db95f373dae8a2ce422ebb9754c1ddfa71736/ppsqlviz-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "00d792b0e78fdbb7161ac76d9383155f", "sha256": "d1b9d1a5d04cd427063a51cc0c251705c8548b4b2b4efa1a7e4cc89dd78b47e5"}, "downloads": -1, "filename": "ppsqlviz-1.0.1.tar.gz", "has_sig": false, "md5_digest": "00d792b0e78fdbb7161ac76d9383155f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9979, "upload_time": "2014-11-08T01:49:40", "upload_time_iso_8601": "2014-11-08T01:49:40.588887Z", "url": "https://files.pythonhosted.org/packages/75/c9/1548d73162e05b59dea5869db95f373dae8a2ce422ebb9754c1ddfa71736/ppsqlviz-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:22 2020"}