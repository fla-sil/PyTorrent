{"info": {"author": "Shrikant Sharat", "author_email": "shrikantsharat.k@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Figs\n====\n\nFigs is a library for reading *ini* like configuration files easily. Figs\nleverages the ``ConfigParser`` module from python's standard libraries.\n\nI personally don't like the ``ConfigParser`` API very much, so I wrote this. The\nidea is that the developer should have little overhead in thinking when using\nthis library, i.e., an intuitive API.\n\nUsage\n=====\n\nIf you are familiar with ``PyYaml`` or the standard library's ``json`` modules,\nthe following should be quite familiar to you.\n\nTo load a configuration, use the ``load``/``loads`` functions. The following\nreturn the same::\n\n    >>> # Takes a filename\n    >>> conf = figs.load('config.ini')\n\n    >>> # or a file-like object\n    >>> conf = figs.load(open('config.ini'))\n\n    >>> # Takes a string to be parsed\n    >>> conf = figs.loads('''\\\n            [universe]\n            answer = 42\n            is_active = yes\n            status = expanding\n            ''')\n\nAnd, to *dump* configuration::\n\n    >>> # Takes a filename\n    >>> figs.dump(conf, 'config.ini')\n\n    >>> # or a file-like object\n    >>> figs.dump(conf, open('config.ini'))\n\n    >>> # Dump to string\n    >>> figs.dumps(conf)\n    [universe]\n    answer = 42\n    is_active = yes\n    status = expanding\n\n    >>> # You can also dump just a section\n    >>> figs.dumps(conf.universe)\n    answer = 42\n    is_active = yes\n    status = expanding\n\nThose are the only functions in the figs module that you should be concerned\nwith.\n\nOnce you have the config object, how'd you use it? Surprise surprise! Anyway you\nfeel comfortable :)\n\nDictification\n-------------\n\nI know, you just want a dict of properties from the config file and be done with\nit. Lets see if you can guess how this can be done?::\n\n    >>> # Returns a dict like {'section-name': <Section object>}\n    >>> dict(conf)\n\n    >>> # Returns a dict like {'key': <TypeableStr object>}\n    >>> dict(conf.universe)\n\nYou should keep in mind that ``dict`` on does *not* automatically do a ``dict``\non its Section objects. The ``TypeableStr`` class is a subclass of ``unicode``\nwith a few methods added (``as_bool``, ``as_int`` and ``as_float``).\n\nIf you want a dict of dicts, though, you can get that too.::\n\n    >>> figs.as_dict(conf)\n\n    >>> # or when loading\n    >>> conf = figs.load('config.ini', as_dict=True)\n\nThe ``loads`` method also takes the ``as_dict`` argument. Note that the\n``as_dict`` *has* to be a keyword argument.\n\nAccesses\n--------\n\n::\n\n    >>> conf.universe.answer\n    u'42'\n    >>> conf.universe.answer.as_int\n    42\n    >>> conf.universe.is_active\n    u'yes'\n    >>> conf.universe.is_active.as_bool\n    True\n    >>> conf.universe.status\n    u'expanding'\n    >>> conf.universe['status']\n    u'expanding'\n\nSimilary to ``as_int`` as shown above, there are also ``as_bool`` (boolean\nconversion done similar to how ``ConfigParser.getboolean`` does) and\n``as_float``.\n\nCheck for presence\n------------------\n\n::\n\n    >>> 'universe' in conf\n    True\n    >>> 'multiverse' in conf\n    False\n    >>> 'answer' in conf.universe\n    True\n    >>> 'is_active' in conf.universe\n    True\n    >>> 'is-active' in conf.universe\n    False\n\nModifying configs\n-----------------\n\nSet new options...::\n\n    >>> conf.universe.is_active = False\n    >>> conf.universe.planet_maker = 'Magrathea'\n    >>> conf.universe['earth-owners'] = 'mice'\n    >>> figs.dumps(conf)\n    [universe]\n    answer = 42\n    is_active = false\n    status = expanding\n    planet_maker = Magrathea\n    earth-owners = mice\n\n...on new sections::\n\n    >>> conf.multiverse.is_active = True\n    >>> figs.dumps(conf)\n    [universe]\n    answer = 42\n    is_active = false\n    status = expanding\n\n    [multiverse]\n    is_active = true\n\nDeleting\n--------\n\nThe API is very boring isn't it?::\n\n    >>> del conf.universe.answer\n    >>> del conf.multiverse\n\nNow what?\n=========\n\nWell, if you have a life, get on with it. Seriously, there's nothing else to\nreading config files here.\n\nMeta\n====\n\nAuthor\n------\n\nShrikant Sharat (http://sharats.me). `@sharat87`_ on twitter.\n\n.. _@sharat87: http://twitter.com/sharat87\n\nLicense\n-------\n\nMIT License (http://mit.sharats.me).\n\nContributing\n------------\n\nCode is available at the `github repository`_. Clone. Modify. Send pull request.\nIf the modification is fairly large, I prefer you open a `github issue`_ first\nto discuss it.\n\n.. _github repository: https://github.com/sharat87/figs\n.. _github issue: https://github.com/sharat87/figs/issues\n\nChangelog\n---------\n\n0.1.2\n    Move to github.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://figs.sharats.me", "keywords": null, "license": "MIT - http://mit.sharats.me", "maintainer": null, "maintainer_email": null, "name": "figs", "package_url": "https://pypi.org/project/figs/", "platform": "any", "project_url": "https://pypi.org/project/figs/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://figs.sharats.me"}, "release_url": "https://pypi.org/project/figs/0.1.2/", "requires_dist": null, "requires_python": null, "summary": "A towel wrapped ConfigParser API.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"figs\">\n<h2>Figs</h2>\n<p>Figs is a library for reading <em>ini</em> like configuration files easily. Figs\nleverages the <tt>ConfigParser</tt> module from python\u2019s standard libraries.</p>\n<p>I personally don\u2019t like the <tt>ConfigParser</tt> API very much, so I wrote this. The\nidea is that the developer should have little overhead in thinking when using\nthis library, i.e., an intuitive API.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>If you are familiar with <tt>PyYaml</tt> or the standard library\u2019s <tt>json</tt> modules,\nthe following should be quite familiar to you.</p>\n<p>To load a configuration, use the <tt>load</tt>/<tt>loads</tt> functions. The following\nreturn the same:</p>\n<pre>&gt;&gt;&gt; # Takes a filename\n&gt;&gt;&gt; conf = figs.load('config.ini')\n\n&gt;&gt;&gt; # or a file-like object\n&gt;&gt;&gt; conf = figs.load(open('config.ini'))\n\n&gt;&gt;&gt; # Takes a string to be parsed\n&gt;&gt;&gt; conf = figs.loads('''\\\n        [universe]\n        answer = 42\n        is_active = yes\n        status = expanding\n        ''')\n</pre>\n<p>And, to <em>dump</em> configuration:</p>\n<pre>&gt;&gt;&gt; # Takes a filename\n&gt;&gt;&gt; figs.dump(conf, 'config.ini')\n\n&gt;&gt;&gt; # or a file-like object\n&gt;&gt;&gt; figs.dump(conf, open('config.ini'))\n\n&gt;&gt;&gt; # Dump to string\n&gt;&gt;&gt; figs.dumps(conf)\n[universe]\nanswer = 42\nis_active = yes\nstatus = expanding\n\n&gt;&gt;&gt; # You can also dump just a section\n&gt;&gt;&gt; figs.dumps(conf.universe)\nanswer = 42\nis_active = yes\nstatus = expanding\n</pre>\n<p>Those are the only functions in the figs module that you should be concerned\nwith.</p>\n<p>Once you have the config object, how\u2019d you use it? Surprise surprise! Anyway you\nfeel comfortable :)</p>\n<div id=\"dictification\">\n<h3>Dictification</h3>\n<p>I know, you just want a dict of properties from the config file and be done with\nit. Lets see if you can guess how this can be done?:</p>\n<pre>&gt;&gt;&gt; # Returns a dict like {'section-name': &lt;Section object&gt;}\n&gt;&gt;&gt; dict(conf)\n\n&gt;&gt;&gt; # Returns a dict like {'key': &lt;TypeableStr object&gt;}\n&gt;&gt;&gt; dict(conf.universe)\n</pre>\n<p>You should keep in mind that <tt>dict</tt> on does <em>not</em> automatically do a <tt>dict</tt>\non its Section objects. The <tt>TypeableStr</tt> class is a subclass of <tt>unicode</tt>\nwith a few methods added (<tt>as_bool</tt>, <tt>as_int</tt> and <tt>as_float</tt>).</p>\n<p>If you want a dict of dicts, though, you can get that too.:</p>\n<pre>&gt;&gt;&gt; figs.as_dict(conf)\n\n&gt;&gt;&gt; # or when loading\n&gt;&gt;&gt; conf = figs.load('config.ini', as_dict=True)\n</pre>\n<p>The <tt>loads</tt> method also takes the <tt>as_dict</tt> argument. Note that the\n<tt>as_dict</tt> <em>has</em> to be a keyword argument.</p>\n</div>\n<div id=\"accesses\">\n<h3>Accesses</h3>\n<pre>&gt;&gt;&gt; conf.universe.answer\nu'42'\n&gt;&gt;&gt; conf.universe.answer.as_int\n42\n&gt;&gt;&gt; conf.universe.is_active\nu'yes'\n&gt;&gt;&gt; conf.universe.is_active.as_bool\nTrue\n&gt;&gt;&gt; conf.universe.status\nu'expanding'\n&gt;&gt;&gt; conf.universe['status']\nu'expanding'\n</pre>\n<p>Similary to <tt>as_int</tt> as shown above, there are also <tt>as_bool</tt> (boolean\nconversion done similar to how <tt>ConfigParser.getboolean</tt> does) and\n<tt>as_float</tt>.</p>\n</div>\n<div id=\"check-for-presence\">\n<h3>Check for presence</h3>\n<pre>&gt;&gt;&gt; 'universe' in conf\nTrue\n&gt;&gt;&gt; 'multiverse' in conf\nFalse\n&gt;&gt;&gt; 'answer' in conf.universe\nTrue\n&gt;&gt;&gt; 'is_active' in conf.universe\nTrue\n&gt;&gt;&gt; 'is-active' in conf.universe\nFalse\n</pre>\n</div>\n<div id=\"modifying-configs\">\n<h3>Modifying configs</h3>\n<p>Set new options\u2026:</p>\n<pre>&gt;&gt;&gt; conf.universe.is_active = False\n&gt;&gt;&gt; conf.universe.planet_maker = 'Magrathea'\n&gt;&gt;&gt; conf.universe['earth-owners'] = 'mice'\n&gt;&gt;&gt; figs.dumps(conf)\n[universe]\nanswer = 42\nis_active = false\nstatus = expanding\nplanet_maker = Magrathea\nearth-owners = mice\n</pre>\n<p>\u2026on new sections:</p>\n<pre>&gt;&gt;&gt; conf.multiverse.is_active = True\n&gt;&gt;&gt; figs.dumps(conf)\n[universe]\nanswer = 42\nis_active = false\nstatus = expanding\n\n[multiverse]\nis_active = true\n</pre>\n</div>\n<div id=\"deleting\">\n<h3>Deleting</h3>\n<p>The API is very boring isn\u2019t it?:</p>\n<pre>&gt;&gt;&gt; del conf.universe.answer\n&gt;&gt;&gt; del conf.multiverse\n</pre>\n</div>\n</div>\n<div id=\"now-what\">\n<h2>Now what?</h2>\n<p>Well, if you have a life, get on with it. Seriously, there\u2019s nothing else to\nreading config files here.</p>\n</div>\n<div id=\"meta\">\n<h2>Meta</h2>\n<div id=\"author\">\n<h3>Author</h3>\n<p>Shrikant Sharat (<a href=\"http://sharats.me\" rel=\"nofollow\">http://sharats.me</a>). <a href=\"http://twitter.com/sharat87\" rel=\"nofollow\">@sharat87</a> on twitter.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>MIT License (<a href=\"http://mit.sharats.me\" rel=\"nofollow\">http://mit.sharats.me</a>).</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Code is available at the <a href=\"https://github.com/sharat87/figs\" rel=\"nofollow\">github repository</a>. Clone. Modify. Send pull request.\nIf the modification is fairly large, I prefer you open a <a href=\"https://github.com/sharat87/figs/issues\" rel=\"nofollow\">github issue</a> first\nto discuss it.</p>\n</div>\n<div id=\"changelog\">\n<h3>Changelog</h3>\n<dl>\n<dt>0.1.2</dt>\n<dd>Move to github.</dd>\n</dl>\n</div>\n</div>\n\n          </div>"}, "last_serial": 791951, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "5f716596a11fd5040738405b5cb1d710", "sha256": "d8b2e6fa072817fb0a423c0d682e70405c300a001b0254b56b206c5c5f55fd9a"}, "downloads": -1, "filename": "figs-0.1.tar.gz", "has_sig": false, "md5_digest": "5f716596a11fd5040738405b5cb1d710", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6218, "upload_time": "2012-02-29T12:14:43", "upload_time_iso_8601": "2012-02-29T12:14:43.129515Z", "url": "https://files.pythonhosted.org/packages/c4/8d/9e28da20d99ea859b287c103006820975f6425155246294f6bcd22f17cfb/figs-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "9bcb3da85418cf894db3bbd00d361b61", "sha256": "e913405ea392538a769b071fd4f18b00e512ea9adf6cd669a75ab1d8a83a695f"}, "downloads": -1, "filename": "figs-0.1.1.tar.gz", "has_sig": false, "md5_digest": "9bcb3da85418cf894db3bbd00d361b61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6225, "upload_time": "2012-02-29T12:15:29", "upload_time_iso_8601": "2012-02-29T12:15:29.986320Z", "url": "https://files.pythonhosted.org/packages/02/d4/db81ea167457c138707f913df57020976dcade0d77ba5369684a6db6e56e/figs-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3c31c3fe6f48f25bc5271bc83bed8da7", "sha256": "91e99fd6d291c8149e017f1f0007a30ced860ec6f89eb684ae1e004de408ec1a"}, "downloads": -1, "filename": "figs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3c31c3fe6f48f25bc5271bc83bed8da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6238, "upload_time": "2012-05-08T14:13:14", "upload_time_iso_8601": "2012-05-08T14:13:14.812635Z", "url": "https://files.pythonhosted.org/packages/45/c4/e2c636b3589175a5abf59ab660d51599bb6bf83de45e86419006e594edf8/figs-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c31c3fe6f48f25bc5271bc83bed8da7", "sha256": "91e99fd6d291c8149e017f1f0007a30ced860ec6f89eb684ae1e004de408ec1a"}, "downloads": -1, "filename": "figs-0.1.2.tar.gz", "has_sig": false, "md5_digest": "3c31c3fe6f48f25bc5271bc83bed8da7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6238, "upload_time": "2012-05-08T14:13:14", "upload_time_iso_8601": "2012-05-08T14:13:14.812635Z", "url": "https://files.pythonhosted.org/packages/45/c4/e2c636b3589175a5abf59ab660d51599bb6bf83de45e86419006e594edf8/figs-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:38 2020"}