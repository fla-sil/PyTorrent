{"info": {"author": "Ryan Dwyer", "author_email": "ryanpdwyer@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7"], "description": "=============================\nkpfm\n=============================\n\n.. image:: https://travis-ci.org/marohngroup/kpfm.svg?branch=master\n    :target: https://travis-ci.org/marohngroup/kpfm\n\n.. image:: http://readthedocs.org/projects/kpfm/badge/?version=latest\n    :target: http://kpfm.readthedocs.io/en/latest/?badge=latest\n    :alt: Documentation Status\n\nKelvin Probe Force Microscopy (KPFM) data analysis.\n\n\nMotiviation\n-----------\n\nCollect useful code for custom Kelvin probe force microscopy experiments into a single repository.\nThe motivation for using a single repository is prior experience and `this article <http://danluu.com/monorepo/>`_.\n\nStructure\n---------\n\nA tentative structure for the repository is\n\n.. code-block:: none\n\n    kpfm\n    \u251c\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 _version.py\n    \u251c\u2500\u2500 experiment\n    \u2502   \u2514\u2500\u2500 __init__.py\n    \u251c\u2500\u2500 tests\n    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py\n    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_kpfm.py\n    \u251c\u2500\u2500 scratch\n    \u2502   \u251c\u2500\u2500 __init__.py\n    \u2502   \u2514\u2500\u2500 temporary_code.py\n    \u2514\u2500\u2500 util\n        \u251c\u2500\u2500 __init__.py\n        \u2514\u2500\u2500 plot.py\n\nEach experiment is contained in its own module.\nThe ``util`` module collects useful functions and decorators that are useful across a range of modules.\nTests are placed in the ``tests`` module.\nScratch contains a place for code that will not be maintained.\nIf a particular experiment or procedure is useful over a longer period,\nit can be moved to its own experiment module.\n\nDevelopment life cycle of new code\n----------------------------------\n\n1. Workup data and write provisional code in an IPython notebook\n2. If many data files are going to be processed in this way, move the routine to a new module in ``scratch``.\n     - Workups in ``scratch`` come with no guarantees that they will not break.\n     - In practice, it would be useful to create a new copy of the temporary code if there is likely to be significant breakage.\n3. If the experiment is useful enough, copy / edit the scratch code and move it to its own experiment folder. In doing so, we commit to leave the experiment in a usable, backward compatible state, which means consistent LabView code for collecting the data, as well as consistent, backward-compatible routines for working up the data.\n\nThe idea would be that with a powerful set of utility, signal processing, and data analysis tools in the ``kpfm`` package, many analyses could be performed quickly at (1) or (2).\nEven having a file in scratch (perhaps copied occasionally as the data analysis or LabView code changes significantly) is a significant improvement over code copied between IPython notebooks.\nThe other consideration is that it is a large investment of time to maintain code, so that code related to a \"one-off\" experiment should be saved, but not maintained.\n\nFeatures\n--------\n\n* TODO\n\n\n\n\nDocumentation\n-------------\n\nThe full documentation is at http://kpfm.rtfd.org.\n\n\n\nHistory\n-------\n\n0.1.0 (2017-03-28)\n++++++++++++++++++\n\n* First release on GitHub.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryanpdwyer/kpfm", "keywords": "kpfm", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "kpfm", "package_url": "https://pypi.org/project/kpfm/", "platform": "", "project_url": "https://pypi.org/project/kpfm/", "project_urls": {"Homepage": "https://github.com/ryanpdwyer/kpfm"}, "release_url": "https://pypi.org/project/kpfm/0.3/", "requires_dist": ["decorator", "decorator", "munch", "sigutils", "six", "tqdm"], "requires_python": "", "summary": "Kelvin Probe Force Microscopy (KPFM) signal processing utilities.", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            =============================<br>kpfm<br>=============================<br><br>.. image:: https://travis-ci.org/marohngroup/kpfm.svg?branch=master<br>    :target: https://travis-ci.org/marohngroup/kpfm<br><br>.. image:: http://readthedocs.org/projects/kpfm/badge/?version=latest<br>    :target: http://kpfm.readthedocs.io/en/latest/?badge=latest<br>    :alt: Documentation Status<br><br>Kelvin Probe Force Microscopy (KPFM) data analysis.<br><br><br>Motiviation<br>-----------<br><br>Collect useful code for custom Kelvin probe force microscopy experiments into a single repository.<br>The motivation for using a single repository is prior experience and `this article &lt;http://danluu.com/monorepo/&gt;`_.<br><br>Structure<br>---------<br><br>A tentative structure for the repository is<br><br>.. code-block:: none<br><br>    kpfm<br>    \u251c\u2500\u2500 __init__.py<br>    \u251c\u2500\u2500 _version.py<br>    \u251c\u2500\u2500 experiment<br>    \u2502   \u2514\u2500\u2500 __init__.py<br>    \u251c\u2500\u2500 tests<br>    \u2502\u00a0\u00a0 \u251c\u2500\u2500 __init__.py<br>    \u2502\u00a0\u00a0 \u2514\u2500\u2500 test_kpfm.py<br>    \u251c\u2500\u2500 scratch<br>    \u2502   \u251c\u2500\u2500 __init__.py<br>    \u2502   \u2514\u2500\u2500 temporary_code.py<br>    \u2514\u2500\u2500 util<br>        \u251c\u2500\u2500 __init__.py<br>        \u2514\u2500\u2500 plot.py<br><br>Each experiment is contained in its own module.<br>The ``util`` module collects useful functions and decorators that are useful across a range of modules.<br>Tests are placed in the ``tests`` module.<br>Scratch contains a place for code that will not be maintained.<br>If a particular experiment or procedure is useful over a longer period,<br>it can be moved to its own experiment module.<br><br>Development life cycle of new code<br>----------------------------------<br><br>1. Workup data and write provisional code in an IPython notebook<br>2. If many data files are going to be processed in this way, move the routine to a new module in ``scratch``.<br>     - Workups in ``scratch`` come with no guarantees that they will not break.<br>     - In practice, it would be useful to create a new copy of the temporary code if there is likely to be significant breakage.<br>3. If the experiment is useful enough, copy / edit the scratch code and move it to its own experiment folder. In doing so, we commit to leave the experiment in a usable, backward compatible state, which means consistent LabView code for collecting the data, as well as consistent, backward-compatible routines for working up the data.<br><br>The idea would be that with a powerful set of utility, signal processing, and data analysis tools in the ``kpfm`` package, many analyses could be performed quickly at (1) or (2).<br>Even having a file in scratch (perhaps copied occasionally as the data analysis or LabView code changes significantly) is a significant improvement over code copied between IPython notebooks.<br>The other consideration is that it is a large investment of time to maintain code, so that code related to a \"one-off\" experiment should be saved, but not maintained.<br><br>Features<br>--------<br><br>* TODO<br><br><br><br><br>Documentation<br>-------------<br><br>The full documentation is at http://kpfm.rtfd.org.<br><br><br><br>History<br>-------<br><br>0.1.0 (2017-03-28)<br>++++++++++++++++++<br><br>* First release on GitHub.<br><br><br>\n          </div>"}, "last_serial": 3045227, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "518da8a2f4d1d259be3d77bcb1b803b1", "sha256": "dc9eb1b3581580cafbdca5963b0a85db9ebfc70f2577a8a4bb3671168cba1fe6"}, "downloads": -1, "filename": "kpfm-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "518da8a2f4d1d259be3d77bcb1b803b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29067, "upload_time": "2017-07-24T16:26:22", "upload_time_iso_8601": "2017-07-24T16:26:22.183767Z", "url": "https://files.pythonhosted.org/packages/85/3a/f1b4c5badc1ba9f5d3e458a5ff1fa99c9b089e2e744c3574faa88850758f/kpfm-0.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "518da8a2f4d1d259be3d77bcb1b803b1", "sha256": "dc9eb1b3581580cafbdca5963b0a85db9ebfc70f2577a8a4bb3671168cba1fe6"}, "downloads": -1, "filename": "kpfm-0.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "518da8a2f4d1d259be3d77bcb1b803b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 29067, "upload_time": "2017-07-24T16:26:22", "upload_time_iso_8601": "2017-07-24T16:26:22.183767Z", "url": "https://files.pythonhosted.org/packages/85/3a/f1b4c5badc1ba9f5d3e458a5ff1fa99c9b089e2e744c3574faa88850758f/kpfm-0.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:48:52 2020"}