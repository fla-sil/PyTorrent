{"info": {"author": "Andreas Donig", "author_email": "andreas@innwiese.de", "bugtrack_url": null, "classifiers": [], "description": "===========\naloisius\n===========\n\n.. image:: https://img.shields.io/pypi/v/aloisius.svg\n    :target: https://pypi.python.org/pypi/aloisius\n\n.. image:: https://travis-ci.org/adonig/aloisius.svg?branch=master\n    :target: https://travis-ci.org/adonig/aloisius\n\n.. image:: https://img.shields.io/pypi/l/aloisius.svg\n    :target: https://opensource.org/licenses/BSD-2-Clause\n\n\nAbout\n=====\n\naloisius helps you to manage the life-cycle of AWS CloudFormation stacks. It\nallows you to use outputs from one stack as input parameters to other stacks.\nThere are other tools which allow you to do so, like i.e. Cumulus or Ansible,\nbut I couldn't find one which doesn't require you to use YAML or Jinja2. It\nis a pure Python library and it is intended to be used in inter-play with\ntroposphere, but you can also use it with any CloudFormation JSON templates.\n\nLicense\n=======\n\nThe BSD 2-Clause License: http://opensource.org/licenses/BSD-2-Clause\n\nInstallation\n============\n\naloisius can be installed using the pip distribution system for Python by\nissuing::\n\n  $ pip install aloisius\n\nAlternatively, you can run use setup.py to install by cloning this repository\nand issuing::\n\n  # python setup.py install\n\nExamples\n========\n\nA simple example creating a VPC containing an RDS could look like this::\n\n   #!/usr/bin/env python\n\n   from aloisius import Stack\n   import boto3\n\n   # I keep my troposphere templates as modules in a package.\n   from templates.vpc import template as template_vpc\n   from templates.rds import template as template_rds\n\n   # You can set your own boto3 session and override the default. E.g:\n   # aloisius.session = boto3.session.Session(profile_name: \"PROFILE\")\n\n   # I normally put some constants and helper functions here.\n   app_name = 'myapp'\n   region_name = 'eu-central-1'\n   stack_name = lambda x: '-'.join([app_name, region_name, x])\n\n   vpc = Stack(\n       StackName=stack_name('vpc'),\n       TargetState='present',\n       RegionName=region_name,\n       TemplateBody=template_vpc.to_json(),\n   )\n\n   rds = Stack(\n       StackName=stack_name('rds'),\n       TargetState='present',\n       RegionName=region_name,\n       TemplateBody=template_rds.to_json(),\n       Parameters={\n           # You can use outputs of previously created stacks as parameters.\n           'VpcId': vpc.outputs['VpcId'],\n           'PrivateSubnets': vpc.outputs['PrivateSubnets'],\n           # More parameters here.\n       },\n   )\n\n   # You can wait for all of the stacks to finish\n\n   aloisius.stacks.wait()\n\n   # Or you can check if they were all applied successfuly\n\n   if not aloisius.stacks.success():\n     exit(1)\n\n   # Or you can iterate over their outputs\n\n   for stack in aloisius.stacks:\n     for key, value in stack.outputs.items():\n       print \"{0}={1}\".format(key, value)\n\n\nWhy you shouldn't use aloisius\n==============================\n\n- There's not much documentation (but there are comments in the code).\n\nWhy you should use aloisius\n===========================\n\n- You could find some bugs and help to make it better.\n- Parallel stack creation/deletion.\n- Integrates nicely with troposphere: No JSON and no YAML.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adonig/aloisius", "keywords": null, "license": "FreeBSD License", "maintainer": null, "maintainer_email": null, "name": "aloisius", "package_url": "https://pypi.org/project/aloisius/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/aloisius/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/adonig/aloisius"}, "release_url": "https://pypi.org/project/aloisius/0.4.1/", "requires_dist": null, "requires_python": null, "summary": "Create/Update/Delete AWS CloudFormation stacks in parallel", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/aloisius\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/aloisius.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3f5caa947cb414da4932af40c425218b178afaf0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f616c6f69736975732e737667\"></a>\n<a href=\"https://travis-ci.org/adonig/aloisius\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/adonig/aloisius.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4159a11f3d484079a5db933ef955b93068653f8a/68747470733a2f2f7472617669732d63692e6f72672f61646f6e69672f616c6f69736975732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/BSD-2-Clause\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/aloisius.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/39a6f6b09045130ef38e7e390f173549797272b1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f616c6f69736975732e737667\"></a>\n<div id=\"about\">\n<h2>About</h2>\n<p>aloisius helps you to manage the life-cycle of AWS CloudFormation stacks. It\nallows you to use outputs from one stack as input parameters to other stacks.\nThere are other tools which allow you to do so, like i.e. Cumulus or Ansible,\nbut I couldn\u2019t find one which doesn\u2019t require you to use YAML or Jinja2. It\nis a pure Python library and it is intended to be used in inter-play with\ntroposphere, but you can also use it with any CloudFormation JSON templates.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>The BSD 2-Clause License: <a href=\"http://opensource.org/licenses/BSD-2-Clause\" rel=\"nofollow\">http://opensource.org/licenses/BSD-2-Clause</a></p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>aloisius can be installed using the pip distribution system for Python by\nissuing:</p>\n<pre>$ pip install aloisius\n</pre>\n<p>Alternatively, you can run use setup.py to install by cloning this repository\nand issuing:</p>\n<pre># python setup.py install\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>A simple example creating a VPC containing an RDS could look like this:</p>\n<pre>#!/usr/bin/env python\n\nfrom aloisius import Stack\nimport boto3\n\n# I keep my troposphere templates as modules in a package.\nfrom templates.vpc import template as template_vpc\nfrom templates.rds import template as template_rds\n\n# You can set your own boto3 session and override the default. E.g:\n# aloisius.session = boto3.session.Session(profile_name: \"PROFILE\")\n\n# I normally put some constants and helper functions here.\napp_name = 'myapp'\nregion_name = 'eu-central-1'\nstack_name = lambda x: '-'.join([app_name, region_name, x])\n\nvpc = Stack(\n    StackName=stack_name('vpc'),\n    TargetState='present',\n    RegionName=region_name,\n    TemplateBody=template_vpc.to_json(),\n)\n\nrds = Stack(\n    StackName=stack_name('rds'),\n    TargetState='present',\n    RegionName=region_name,\n    TemplateBody=template_rds.to_json(),\n    Parameters={\n        # You can use outputs of previously created stacks as parameters.\n        'VpcId': vpc.outputs['VpcId'],\n        'PrivateSubnets': vpc.outputs['PrivateSubnets'],\n        # More parameters here.\n    },\n)\n\n# You can wait for all of the stacks to finish\n\naloisius.stacks.wait()\n\n# Or you can check if they were all applied successfuly\n\nif not aloisius.stacks.success():\n  exit(1)\n\n# Or you can iterate over their outputs\n\nfor stack in aloisius.stacks:\n  for key, value in stack.outputs.items():\n    print \"{0}={1}\".format(key, value)\n</pre>\n</div>\n<div id=\"why-you-shouldn-t-use-aloisius\">\n<h2>Why you shouldn\u2019t use aloisius</h2>\n<ul>\n<li>There\u2019s not much documentation (but there are comments in the code).</li>\n</ul>\n</div>\n<div id=\"why-you-should-use-aloisius\">\n<h2>Why you should use aloisius</h2>\n<ul>\n<li>You could find some bugs and help to make it better.</li>\n<li>Parallel stack creation/deletion.</li>\n<li>Integrates nicely with troposphere: No JSON and no YAML.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2840878, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "03f8528a4e42a6138cd420c93c978252", "sha256": "151f9112f9982e6569a5a426a73f2ed97c7a4287548309b325fbf8d76516ff95"}, "downloads": -1, "filename": "aloisius-0.3.tar.gz", "has_sig": false, "md5_digest": "03f8528a4e42a6138cd420c93c978252", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5143, "upload_time": "2015-06-30T10:54:57", "upload_time_iso_8601": "2015-06-30T10:54:57.670350Z", "url": "https://files.pythonhosted.org/packages/19/22/72d187cbaffb403aa8ad435a054e4d39d2c32462594f7b160194e40336c9/aloisius-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0ecd4b45adab3ec398f0facbbb9fe71c", "sha256": "9d47f8ff0cec4e445d717ed9d6ed55f98fea65ae3cf366ee924fda96c3e61037"}, "downloads": -1, "filename": "aloisius-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0ecd4b45adab3ec398f0facbbb9fe71c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5515, "upload_time": "2017-02-26T18:32:43", "upload_time_iso_8601": "2017-02-26T18:32:43.546185Z", "url": "https://files.pythonhosted.org/packages/a4/bf/b177dfa861ee92bd1912e71774f2e7a16f420248484458bf0d327a64d918/aloisius-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "77ba9d92ec34860a407a6aff59a98ce7", "sha256": "0d8b6589ec5ec2082359f13eaa4f6a4762fd50db4d66e955a1b9aa3ccfdf2545"}, "downloads": -1, "filename": "aloisius-0.4.0.tar.gz", "has_sig": false, "md5_digest": "77ba9d92ec34860a407a6aff59a98ce7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5635, "upload_time": "2017-03-27T12:59:39", "upload_time_iso_8601": "2017-03-27T12:59:39.946936Z", "url": "https://files.pythonhosted.org/packages/be/a7/15dd3311a2132a7f60cc81d5de328f82e890f20cfcb53c184744eb888f95/aloisius-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "c2fdf0ed4262f62a67806282701314a1", "sha256": "a690f7023c3663c708f26897328887e6e41a144d5e58c6a47b00e269f197e0cb"}, "downloads": -1, "filename": "aloisius-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c2fdf0ed4262f62a67806282701314a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5664, "upload_time": "2017-04-30T20:41:20", "upload_time_iso_8601": "2017-04-30T20:41:20.485794Z", "url": "https://files.pythonhosted.org/packages/d1/c2/c1677cbf69e953bb71a03dbd3f94074ee11e388e402035bf276953bdf346/aloisius-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c2fdf0ed4262f62a67806282701314a1", "sha256": "a690f7023c3663c708f26897328887e6e41a144d5e58c6a47b00e269f197e0cb"}, "downloads": -1, "filename": "aloisius-0.4.1.tar.gz", "has_sig": false, "md5_digest": "c2fdf0ed4262f62a67806282701314a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5664, "upload_time": "2017-04-30T20:41:20", "upload_time_iso_8601": "2017-04-30T20:41:20.485794Z", "url": "https://files.pythonhosted.org/packages/d1/c2/c1677cbf69e953bb71a03dbd3f94074ee11e388e402035bf276953bdf346/aloisius-0.4.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:20 2020"}