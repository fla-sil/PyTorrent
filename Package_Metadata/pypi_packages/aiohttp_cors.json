{"info": {"author": "Vladimir Rutsky and aio-libs team", "author_email": "vladimir@rutsky.org", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries"], "description": "========================\nCORS support for aiohttp\n========================\n\n``aiohttp_cors`` library implements\n`Cross Origin Resource Sharing (CORS) <cors_>`__\nsupport for `aiohttp <aiohttp_>`__\nasyncio-powered asynchronous HTTP server.\n\nJump directly to `Usage`_ part to see how to use ``aiohttp_cors``.\n\nSame-origin policy\n==================\n\nWeb security model is tightly connected to\n`Same-origin policy (SOP) <sop_>`__.\nIn short: web pages cannot *Read* resources which origin\ndoesn't match origin of requested page, but can *Embed* (or *Execute*)\nresources and have limited ability to *Write* resources.\n\nOrigin of a page is defined in the `Standard <cors_>`__ as tuple\n``(schema, host, port)``\n(there is a notable exception with Internet Explorer: it doesn't use port to\ndefine origin, but uses it's own\n`Security Zones <https://msdn.microsoft.com/en-us/library/ms537183.aspx>`__).\n\nCan *Embed* means that resource from other origin can be embedded into\nthe page,\ne.g. by using ``<script src=\"...\">``, ``<img src=\"...\">``,\n``<iframe src=\"...\">``.\n\nCannot *Read* means that resource from other origin *source* cannot be\nobtained by page\n(*source* \u2014 any information that would allow to reconstruct resource).\nE.g. the page can *Embed* image with ``<img src=\"...\">``,\nbut it can't get information about specific pixels, so page can't reconstruct\noriginal image\n(though some information from the other resource may still be leaked:\ne.g. the page can read embedded image dimensions).\n\nLimited ability to *Write* means, that the page can send POST requests to\nother origin with limited set of ``Content-Type`` values and headers.\n\nRestriction to *Read* resource from other origin is related to authentication\nmechanism that is used by browsers:\nwhen browser reads (downloads) resource he automatically sends all security\ncredentials that user previously authorized for that resource\n(e.g. cookies, HTTP Basic Authentication).\n\nFor example, if *Read* would be allowed and user is authenticated\nin some internet banking,\nmalicious page would be able to embed internet banking page with ``iframe``\n(since authentication is done by the browser it may be embedded as if\nuser is directly navigated to internet banking page),\nthen read user private information by reading *source* of the embedded page\n(which may be not only source code, but, for example,\nscreenshot of the embedded internet banking page).\n\nCross-origin resource sharing\n=============================\n\n`Cross-origin Resource Sharing (CORS) <cors_>`__ allows to override\nSOP for specific resources.\n\nIn short, CORS works in the following way.\n\nWhen page ``https://client.example.com`` request (*Read*) resource\n``https://server.example.com/resource`` that have other origin,\nbrowser implicitly appends ``Origin: https://client.example.com`` header\nto the HTTP request,\neffectively requesting server to give read permission for\nthe resource to the ``https://client.example.com`` page::\n\n    GET /resource HTTP/1.1\n    Origin: https://client.example.com\n    Host: server.example.com\n\nIf server allows access from the page to the resource, it responds with\nresource with ``Access-Control-Allow-Origin: https://client.example.com``\nHTTP header\n(optionally allowing exposing custom server headers to the page and\nenabling use of the user credentials on the server resource)::\n\n    Access-Control-Allow-Origin: https://client.example.com\n    Access-Control-Allow-Credentials: true\n    Access-Control-Expose-Headers: X-Server-Header\n\nBrowser checks, if server responded with proper\n``Access-Control-Allow-Origin`` header and accordingly allows or denies\naccess for the obtained resource to the page.\n\nCORS specification designed in a way that servers that are not aware\nof CORS will not expose any additional information, except allowed by the\nSOP.\n\nTo request resources with custom headers or using custom HTTP methods\n(e.g. ``PUT``, ``DELETE``) that are not allowed by SOP,\nCORS-enabled browser first send *preflight request* to the\nresource using ``OPTIONS`` method, in which he queries access to the resource\nwith specific method and headers::\n\n    OPTIONS / HTTP/1.1\n    Origin: https://client.example.com\n    Access-Control-Request-Method: PUT\n    Access-Control-Request-Headers: X-Client-Header\n\nCORS-enabled server responds is requested method is allowed and which of\nthe specified headers are allowed::\n\n    Access-Control-Allow-Origin: https://client.example.com\n    Access-Control-Allow-Credentials: true\n    Access-Control-Allow-Methods: PUT\n    Access-Control-Allow-Headers: X-Client-Header\n    Access-Control-Max-Age: 3600\n\nBrowser checks response to preflight request, and, if actual request allowed,\ndoes actual request.\n\nInstallation\n============\n\nYou can install ``aiohttp_cors`` as a typical Python library from PyPI or\nfrom git:\n\n.. code-block:: bash\n\n    $ pip install aiohttp_cors\n\nNote that ``aiohttp_cors`` requires versions of Python >= 3.4.1 and\n``aiohttp`` >= 1.1.\n\nUsage\n=====\n\nTo use ``aiohttp_cors`` you need to configure the application and\nenable CORS on\n`resources and routes <https://aiohttp.readthedocs.org/en/stable/web.html#resources-and-routes>`__\nthat you want to expose:\n\n.. code-block:: python\n\n    import asyncio\n    from aiohttp import web\n    import aiohttp_cors\n\n    @asyncio.coroutine\n    def handler(request):\n        return web.Response(\n            text=\"Hello!\",\n            headers={\n                \"X-Custom-Server-Header\": \"Custom data\",\n            })\n\n    app = web.Application()\n\n    # `aiohttp_cors.setup` returns `aiohttp_cors.CorsConfig` instance.\n    # The `cors` instance will store CORS configuration for the\n    # application.\n    cors = aiohttp_cors.setup(app)\n\n    # To enable CORS processing for specific route you need to add\n    # that route to the CORS configuration object and specify its\n    # CORS options.\n    resource = cors.add(app.router.add_resource(\"/hello\"))\n    route = cors.add(\n        resource.add_route(\"GET\", handler), {\n            \"http://client.example.org\": aiohttp_cors.ResourceOptions(\n                allow_credentials=True,\n                expose_headers=(\"X-Custom-Server-Header\",),\n                allow_headers=(\"X-Requested-With\", \"Content-Type\"),\n                max_age=3600,\n            )\n        })\n\nEach route has it's own CORS configuration passed in ``CorsConfig.add()``\nmethod.\n\nCORS configuration is a mapping from origins to options for that origins.\n\nIn the example above CORS is configured for the resource under path ``/hello``\nand HTTP method ``GET``, and in the context of CORS:\n\n* This resource will be available using CORS only to\n  ``http://client.example.org`` origin.\n\n* Passing of credentials to this resource will be allowed.\n\n* The resource will expose to the client ``X-Custom-Server-Header``\n  server header.\n\n* The client will be allowed to pass ``X-Requested-With`` and\n  ``Content-Type`` headers to the server.\n\n* Preflight requests will be allowed to be cached by client for ``3600``\n  seconds.\n\nResource will be available only to the explicitly specified origins.\nYou can specify \"all other origins\" using special ``*`` origin:\n\n.. code-block:: python\n\n    cors.add(route, {\n            \"*\":\n                aiohttp_cors.ResourceOptions(allow_credentials=False),\n            \"http://client.example.org\":\n                aiohttp_cors.ResourceOptions(allow_credentials=True),\n        })\n\nHere the resource specified by ``route`` will be available to all origins with\ndisallowed credentials passing, and with allowed credentials passing only to\n``http://client.example.org``.\n\nBy default ``ResourceOptions`` will be constructed without any allowed CORS\noptions.\nThis means, that resource will be available using CORS to specified origin,\nbut client will not be allowed to send either credentials,\nor send non-simple headers, or read from server non-simple headers.\n\nTo enable sending or receiving all headers you can specify special value\n``*`` instead of sequence of headers:\n\n.. code-block:: python\n\n    cors.add(route, {\n            \"http://client.example.org\":\n                aiohttp_cors.ResourceOptions(\n                    expose_headers=\"*\",\n                    allow_headers=\"*\"),\n        })\n\nYou can specify default CORS-enabled resource options using\n``aiohttp_cors.setup()``'s ``defaults`` argument:\n\n.. code-block:: python\n\n    cors = aiohttp_cors.setup(app, defaults={\n            # Allow all to read all CORS-enabled resources from\n            # http://client.example.org.\n            \"http://client.example.org\": aiohttp_cors.ResourceOptions(),\n        })\n\n    # Enable CORS on routes.\n\n    # According to defaults POST and PUT will be available only to\n    # \"http://client.example.org\".\n    hello_resource = cors.add(app.router.add_resource(\"/hello\"))\n    cors.add(hello_resource.add_route(\"POST\", handler_post))\n    cors.add(hello_resource.add_route(\"PUT\", handler_put))\n\n    # In addition to \"http://client.example.org\", GET request will be\n    # allowed from \"http://other-client.example.org\" origin.\n    cors.add(hello_resource.add_route(\"GET\", handler), {\n            \"http://other-client.example.org\":\n                aiohttp_cors.ResourceOptions(),\n        })\n\n    # CORS will be enabled only on the resources added to `CorsConfig`,\n    # so following resource will be NOT CORS-enabled.\n    app.router.add_route(\"GET\", \"/private\", handler)\n\nAlso you can specify default options for resources:\n\n.. code-block:: python\n\n    # Allow POST and PUT requests from \"http://client.example.org\" origin.\n    hello_resource = cors.add(app.router.add_resource(\"/hello\"), {\n            \"http://client.example.org\": aiohttp_cors.ResourceOptions(),\n        })\n    cors.add(hello_resource.add_route(\"POST\", handler_post))\n    cors.add(hello_resource.add_route(\"PUT\", handler_put))\n\nResource CORS configuration allows to use ``allow_methods`` option that\nexplicitly specifies list of allowed HTTP methods for origin\n(or ``*`` for all HTTP methods).\nBy using this option it is not required to add all resource routes to\nCORS configuration object:\n\n.. code-block:: python\n\n    # Allow POST and PUT requests from \"http://client.example.org\" origin.\n    hello_resource = cors.add(app.router.add_resource(\"/hello\"), {\n            \"http://client.example.org\":\n                aiohttp_cors.ResourceOptions(allow_methods=[\"POST\", \"PUT\"]),\n        })\n    # No need to add POST and PUT routes into CORS configuration object.\n    hello_resource.add_route(\"POST\", handler_post)\n    hello_resource.add_route(\"PUT\", handler_put)\n    # Still you can add additional methods to CORS configuration object:\n    cors.add(hello_resource.add_route(\"DELETE\", handler_delete))\n\nHere is an example of how to enable CORS for all origins with all CORS\nfeatures:\n\n.. code-block:: python\n\n    cors = aiohttp_cors.setup(app, defaults={\n        \"*\": aiohttp_cors.ResourceOptions(\n                allow_credentials=True,\n                expose_headers=\"*\",\n                allow_headers=\"*\",\n            )\n    })\n\n    # Add all resources to `CorsConfig`.\n    resource = cors.add(app.router.add_resource(\"/hello\"))\n    cors.add(resource.add_route(\"GET\", handler_get))\n    cors.add(resource.add_route(\"PUT\", handler_put))\n    cors.add(resource.add_route(\"POST\", handler_put))\n    cors.add(resource.add_route(\"DELETE\", handler_delete))\n\nOld routes API is supported \u2014 you can use ``router.add_router`` and\n``router.register_route`` as before, though this usage is discouraged:\n\n.. code-block:: python\n\n    cors.add(\n        app.router.add_route(\"GET\", \"/hello\", handler), {\n            \"http://client.example.org\": aiohttp_cors.ResourceOptions(\n                allow_credentials=True,\n                expose_headers=(\"X-Custom-Server-Header\",),\n                allow_headers=(\"X-Requested-With\", \"Content-Type\"),\n                max_age=3600,\n            )\n        })\n\nYou can enable CORS for all added routes by accessing routes list\nin the router:\n\n.. code-block:: python\n\n    # Setup application routes.\n    app.router.add_route(\"GET\", \"/hello\", handler_get)\n    app.router.add_route(\"PUT\", \"/hello\", handler_put)\n    app.router.add_route(\"POST\", \"/hello\", handler_put)\n    app.router.add_route(\"DELETE\", \"/hello\", handler_delete)\n\n    # Configure default CORS settings.\n    cors = aiohttp_cors.setup(app, defaults={\n        \"*\": aiohttp_cors.ResourceOptions(\n                allow_credentials=True,\n                expose_headers=\"*\",\n                allow_headers=\"*\",\n            )\n    })\n\n    # Configure CORS on all routes.\n    for route in list(app.router.routes()):\n        cors.add(route)\n\nYou can also use ``CorsViewMixin`` on ``web.View``:\n\n.. code-block:: python\n\n    class CorsView(web.View, CorsViewMixin):\n\n        cors_config = {\n            \"*\": ResourceOption(\n                allow_credentials=True,\n                allow_headers=\"X-Request-ID\",\n            )\n        }\n\n        @asyncio.coroutine\n        def get(self):\n            return web.Response(text=\"Done\")\n\n        @custom_cors({\n            \"*\": ResourceOption(\n                allow_credentials=True,\n                allow_headers=\"*\",\n            )\n        })\n        @asyncio.coroutine\n        def post(self):\n            return web.Response(text=\"Done\")\n\n    cors = aiohttp_cors.setup(app, defaults={\n        \"*\": aiohttp_cors.ResourceOptions(\n                allow_credentials=True,\n                expose_headers=\"*\",\n                allow_headers=\"*\",\n            )\n    })\n\n    cors.add(\n        app.router.add_route(\"*\", \"/resource\", CorsView),\n        webview=True)\n\n\nSecurity\n========\n\nTODO: fill this\n\nDevelopment\n===========\n\nTo setup development environment:\n\n.. code-block:: bash\n\n   # Clone sources repository:\n   git clone https://github.com/aio-libs/aiohttp_cors.git .\n   # Create and activate virtual Python environment:\n   python3 -m venv env\n   source env/bin/activate\n   # Install requirements and aiohttp_cors into virtual environment\n   pip install -r requirements-dev.txt\n\nTo run tests:\n\n.. code-block:: bash\n\n   tox\n\nTo run only runtime tests in current environment:\n\n.. code-block:: bash\n\n   py.test\n\nTo run only static code analysis checks:\n\n.. code-block:: bash\n\n   tox -e check\n\nRunning Selenium tests\n----------------------\n\nTo run Selenium tests with Firefox web driver you need to install Firefox.\n\nTo run Selenium tests with Chromium web driver you need to:\n\n1. Install Chrome driver. On Ubuntu 14.04 it's in ``chromium-chromedriver``\n   package.\n\n2. Either add ``chromedriver`` to PATH or set ``WEBDRIVER_CHROMEDRIVER_PATH``\n   environment variable to ``chromedriver``, e.g. on Ubuntu 14.04\n   ``WEBDRIVER_CHROMEDRIVER_PATH=/usr/lib/chromium-browser/chromedriver``.\n\nRelease process\n---------------\n\nTo release version ``vA.B.C`` from the current version of ``master`` branch\nyou need to:\n\n1. Create local branch ``vA.B.C``.\n2. In ``CHANGES.rst`` set release date to today.\n3. In ``aiohttp_cors/__about__.py`` change version from ``A.B.Ca0`` to\n   ``A.B.C``.\n4. Create pull request with ``vA.B.C`` branch, wait for all checks to\n   successfully finish (Travis and Appveyor).\n5. Merge pull request to master.\n6. Update and checkout ``master`` branch.\n\n7. Create and push tag for release version to GitHub:\n\n   .. code-block:: bash\n\n      git tag vA.B.C\n      git push --tags\n\n   Now Travis should ran tests again, and build and deploy wheel on PyPI.\n\n   If Travis release doesn't work for some reason, use following steps\n   for manual release upload.\n\n   1. Install fresh versions of setuptools and pip.\n      Install ``wheel`` for building wheels.\n      Install ``twine`` for uploading to PyPI.\n\n      .. code-block:: bash\n\n         pip install -U pip setuptools twine wheel\n\n   2. Configure PyPI credentials in ``~/.pypirc``.\n\n   3. Build distribution:\n\n      .. code-block:: bash\n\n         rm -rf build dist; python setup.py sdist bdist_wheel\n\n   4. Upload new release to PyPI:\n\n      .. code-block:: bash\n\n         twine upload dist/*\n\n8. Edit release description on GitHub if needed.\n9. Announce new release on the *aio-libs* mailing list:\n   https://groups.google.com/forum/#!forum/aio-libs.\n\nPost release steps:\n\n1. In ``CHANGES.rst`` add template for the next release.\n2. In ``aiohttp_cors/__about__.py`` change version from ``A.B.C`` to\n   ``A.(B + 1).0a0``.\n\nBugs\n====\n\nPlease report bugs, issues, feature requests, etc. on\n`GitHub <https://github.com/aio-libs/aiohttp_cors/issues>`__.\n\n\nLicense\n=======\n\nCopyright 2015 Vladimir Rutsky <vladimir@rutsky.org>.\n\nLicensed under the\n`Apache License, Version 2.0 <https://www.apache.org/licenses/LICENSE-2.0>`__,\nsee ``LICENSE`` file for details.\n\n.. _cors: http://www.w3.org/TR/cors/\n.. _aiohttp: https://github.com/KeepSafe/aiohttp/\n.. _sop: https://en.wikipedia.org/wiki/Same-origin_policy\n\n\n=========\n CHANGES\n=========\n\n0.7.0 (2018-03-05)\n==================\n\n- Make web view check implicit and type based (#159)\n\n- Disable Python 3.4 support (#156)\n\n- Support aiohttp 3.0+ (#155)\n\n0.6.0 (2017-12-21)\n==================\n\n- Support aiohttp views by ``CorsViewMixin`` (#145)\n\n0.5.3 (2017-04-21)\n==================\n\n- Fix ``typing`` being installed on Python 3.6.\n\n0.5.2 (2017-03-28)\n==================\n\n- Fix tests compatibility with ``aiohttp`` 2.0.\n  This release and release v0.5.0 should work on ``aiohttp`` 2.0.\n\n\n0.5.1 (2017-03-23)\n==================\n\n- Enforce ``aiohttp`` version to be less than 2.0.\n  Newer ``aiohttp`` releases will be supported in the next release.\n\n0.5.0 (2016-11-18)\n==================\n\n- Fix compatibility with ``aiohttp`` 1.1\n\n\n0.4.0 (2016-04-04)\n==================\n\n- Fixed support with new Resources objects introduced in ``aiohttp`` 0.21.0.\n  Minimum supported version of ``aiohttp`` is 0.21.4 now.\n\n- New Resources objects are supported.\n  You can specify default configuration for a Resource and use\n  ``allow_methods`` to explicitly list allowed methods (or ``*`` for all\n  HTTP methods):\n\n  .. code-block:: python\n\n        # Allow POST and PUT requests from \"http://client.example.org\" origin.\n        hello_resource = cors.add(app.router.add_resource(\"/hello\"), {\n                \"http://client.example.org\":\n                    aiohttp_cors.ResourceOptions(\n                        allow_methods=[\"POST\", \"PUT\"]),\n            })\n        # No need to add POST and PUT routes into CORS configuration object.\n        hello_resource.add_route(\"POST\", handler_post)\n        hello_resource.add_route(\"PUT\", handler_put)\n        # Still you can add additional methods to CORS configuration object:\n        cors.add(hello_resource.add_route(\"DELETE\", handler_delete))\n\n- ``AbstractRouterAdapter`` was completely rewritten to be more Router\n  agnostic.\n\n0.3.0 (2016-02-06)\n==================\n\n- Rename ``UrlDistatcherRouterAdapter`` to ``UrlDispatcherRouterAdapter``.\n\n- Set maximum supported ``aiohttp`` version to ``0.20.2``, see bug #30 for\n  details.\n\n0.2.0 (2015-11-30)\n==================\n\n- Move ABCs from ``aiohttp_cors.router_adapter`` to ``aiohttp_cors.abc``.\n\n- Rename ``RouterAdapter`` to ``AbstractRouterAdapter``.\n\n- Fix bug with configuring CORS for named routes.\n\n0.1.0 (2015-11-05)\n==================\n\n* Initial release.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aio-libs/aiohttp-cors", "keywords": "", "license": "Apache License, Version 2.0", "maintainer": "", "maintainer_email": "", "name": "aiohttp_cors", "package_url": "https://pypi.org/project/aiohttp_cors/", "platform": "", "project_url": "https://pypi.org/project/aiohttp_cors/", "project_urls": {"Homepage": "https://github.com/aio-libs/aiohttp-cors"}, "release_url": "https://pypi.org/project/aiohttp_cors/0.7.0/", "requires_dist": ["aiohttp (>=1.1)", "typing; python_version < \"3.5\""], "requires_python": "", "summary": "CORS support for aiohttp", "version": "0.7.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"cors-support-for-aiohttp\">\n<h2>CORS support for aiohttp</h2>\n<p><tt>aiohttp_cors</tt> library implements\n<a href=\"http://www.w3.org/TR/cors/\" rel=\"nofollow\">Cross Origin Resource Sharing (CORS)</a>\nsupport for <a href=\"https://github.com/KeepSafe/aiohttp/\" rel=\"nofollow\">aiohttp</a>\nasyncio-powered asynchronous HTTP server.</p>\n<p>Jump directly to <a href=\"#usage\" rel=\"nofollow\">Usage</a> part to see how to use <tt>aiohttp_cors</tt>.</p>\n<div id=\"same-origin-policy\">\n<h3>Same-origin policy</h3>\n<p>Web security model is tightly connected to\n<a href=\"https://en.wikipedia.org/wiki/Same-origin_policy\" rel=\"nofollow\">Same-origin policy (SOP)</a>.\nIn short: web pages cannot <em>Read</em> resources which origin\ndoesn\u2019t match origin of requested page, but can <em>Embed</em> (or <em>Execute</em>)\nresources and have limited ability to <em>Write</em> resources.</p>\n<p>Origin of a page is defined in the <a href=\"http://www.w3.org/TR/cors/\" rel=\"nofollow\">Standard</a> as tuple\n<tt>(schema, host, port)</tt>\n(there is a notable exception with Internet Explorer: it doesn\u2019t use port to\ndefine origin, but uses it\u2019s own\n<a href=\"https://msdn.microsoft.com/en-us/library/ms537183.aspx\" rel=\"nofollow\">Security Zones</a>).</p>\n<p>Can <em>Embed</em> means that resource from other origin can be embedded into\nthe page,\ne.g. by using <tt>&lt;script <span class=\"pre\">src=\"...\"&gt;</span></tt>, <tt>&lt;img <span class=\"pre\">src=\"...\"&gt;</span></tt>,\n<tt>&lt;iframe <span class=\"pre\">src=\"...\"&gt;</span></tt>.</p>\n<p>Cannot <em>Read</em> means that resource from other origin <em>source</em> cannot be\nobtained by page\n(<em>source</em> \u2014 any information that would allow to reconstruct resource).\nE.g. the page can <em>Embed</em> image with <tt>&lt;img <span class=\"pre\">src=\"...\"&gt;</span></tt>,\nbut it can\u2019t get information about specific pixels, so page can\u2019t reconstruct\noriginal image\n(though some information from the other resource may still be leaked:\ne.g. the page can read embedded image dimensions).</p>\n<p>Limited ability to <em>Write</em> means, that the page can send POST requests to\nother origin with limited set of <tt><span class=\"pre\">Content-Type</span></tt> values and headers.</p>\n<p>Restriction to <em>Read</em> resource from other origin is related to authentication\nmechanism that is used by browsers:\nwhen browser reads (downloads) resource he automatically sends all security\ncredentials that user previously authorized for that resource\n(e.g. cookies, HTTP Basic Authentication).</p>\n<p>For example, if <em>Read</em> would be allowed and user is authenticated\nin some internet banking,\nmalicious page would be able to embed internet banking page with <tt>iframe</tt>\n(since authentication is done by the browser it may be embedded as if\nuser is directly navigated to internet banking page),\nthen read user private information by reading <em>source</em> of the embedded page\n(which may be not only source code, but, for example,\nscreenshot of the embedded internet banking page).</p>\n</div>\n<div id=\"cross-origin-resource-sharing\">\n<h3>Cross-origin resource sharing</h3>\n<p><a href=\"http://www.w3.org/TR/cors/\" rel=\"nofollow\">Cross-origin Resource Sharing (CORS)</a> allows to override\nSOP for specific resources.</p>\n<p>In short, CORS works in the following way.</p>\n<p>When page <tt><span class=\"pre\">https://client.example.com</span></tt> request (<em>Read</em>) resource\n<tt><span class=\"pre\">https://server.example.com/resource</span></tt> that have other origin,\nbrowser implicitly appends <tt>Origin: <span class=\"pre\">https://client.example.com</span></tt> header\nto the HTTP request,\neffectively requesting server to give read permission for\nthe resource to the <tt><span class=\"pre\">https://client.example.com</span></tt> page:</p>\n<pre>GET /resource HTTP/1.1\nOrigin: https://client.example.com\nHost: server.example.com\n</pre>\n<p>If server allows access from the page to the resource, it responds with\nresource with <tt><span class=\"pre\">Access-Control-Allow-Origin:</span> <span class=\"pre\">https://client.example.com</span></tt>\nHTTP header\n(optionally allowing exposing custom server headers to the page and\nenabling use of the user credentials on the server resource):</p>\n<pre>Access-Control-Allow-Origin: https://client.example.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Expose-Headers: X-Server-Header\n</pre>\n<p>Browser checks, if server responded with proper\n<tt><span class=\"pre\">Access-Control-Allow-Origin</span></tt> header and accordingly allows or denies\naccess for the obtained resource to the page.</p>\n<p>CORS specification designed in a way that servers that are not aware\nof CORS will not expose any additional information, except allowed by the\nSOP.</p>\n<p>To request resources with custom headers or using custom HTTP methods\n(e.g. <tt>PUT</tt>, <tt>DELETE</tt>) that are not allowed by SOP,\nCORS-enabled browser first send <em>preflight request</em> to the\nresource using <tt>OPTIONS</tt> method, in which he queries access to the resource\nwith specific method and headers:</p>\n<pre>OPTIONS / HTTP/1.1\nOrigin: https://client.example.com\nAccess-Control-Request-Method: PUT\nAccess-Control-Request-Headers: X-Client-Header\n</pre>\n<p>CORS-enabled server responds is requested method is allowed and which of\nthe specified headers are allowed:</p>\n<pre>Access-Control-Allow-Origin: https://client.example.com\nAccess-Control-Allow-Credentials: true\nAccess-Control-Allow-Methods: PUT\nAccess-Control-Allow-Headers: X-Client-Header\nAccess-Control-Max-Age: 3600\n</pre>\n<p>Browser checks response to preflight request, and, if actual request allowed,\ndoes actual request.</p>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install <tt>aiohttp_cors</tt> as a typical Python library from PyPI or\nfrom git:</p>\n<pre>$ pip install aiohttp_cors\n</pre>\n<p>Note that <tt>aiohttp_cors</tt> requires versions of Python &gt;= 3.4.1 and\n<tt>aiohttp</tt> &gt;= 1.1.</p>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>To use <tt>aiohttp_cors</tt> you need to configure the application and\nenable CORS on\n<a href=\"https://aiohttp.readthedocs.org/en/stable/web.html#resources-and-routes\" rel=\"nofollow\">resources and routes</a>\nthat you want to expose:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">aiohttp</span> <span class=\"kn\">import</span> <span class=\"n\">web</span>\n<span class=\"kn\">import</span> <span class=\"nn\">aiohttp_cors</span>\n\n<span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span>\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Hello!\"</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span>\n            <span class=\"s2\">\"X-Custom-Server-Header\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Custom data\"</span><span class=\"p\">,</span>\n        <span class=\"p\">})</span>\n\n<span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># `aiohttp_cors.setup` returns `aiohttp_cors.CorsConfig` instance.</span>\n<span class=\"c1\"># The `cors` instance will store CORS configuration for the</span>\n<span class=\"c1\"># application.</span>\n<span class=\"n\">cors</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># To enable CORS processing for specific route you need to add</span>\n<span class=\"c1\"># that route to the CORS configuration object and specify its</span>\n<span class=\"c1\"># CORS options.</span>\n<span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">))</span>\n<span class=\"n\">route</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"X-Custom-Server-Header\"</span><span class=\"p\">,),</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"X-Requested-With\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Content-Type\"</span><span class=\"p\">),</span>\n            <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>Each route has it\u2019s own CORS configuration passed in <tt>CorsConfig.add()</tt>\nmethod.</p>\n<p>CORS configuration is a mapping from origins to options for that origins.</p>\n<p>In the example above CORS is configured for the resource under path <tt>/hello</tt>\nand HTTP method <tt>GET</tt>, and in the context of CORS:</p>\n<ul>\n<li>This resource will be available using CORS only to\n<tt><span class=\"pre\">http://client.example.org</span></tt> origin.</li>\n<li>Passing of credentials to this resource will be allowed.</li>\n<li>The resource will expose to the client <tt><span class=\"pre\">X-Custom-Server-Header</span></tt>\nserver header.</li>\n<li>The client will be allowed to pass <tt><span class=\"pre\">X-Requested-With</span></tt> and\n<tt><span class=\"pre\">Content-Type</span></tt> headers to the server.</li>\n<li>Preflight requests will be allowed to be cached by client for <tt>3600</tt>\nseconds.</li>\n</ul>\n<p>Resource will be available only to the explicitly specified origins.\nYou can specify \u201call other origins\u201d using special <tt>*</tt> origin:</p>\n<pre><span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"*\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span><span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">),</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span><span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>Here the resource specified by <tt>route</tt> will be available to all origins with\ndisallowed credentials passing, and with allowed credentials passing only to\n<tt><span class=\"pre\">http://client.example.org</span></tt>.</p>\n<p>By default <tt>ResourceOptions</tt> will be constructed without any allowed CORS\noptions.\nThis means, that resource will be available using CORS to specified origin,\nbut client will not be allowed to send either credentials,\nor send non-simple headers, or read from server non-simple headers.</p>\n<p>To enable sending or receiving all headers you can specify special value\n<tt>*</tt> instead of sequence of headers:</p>\n<pre><span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n                <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n                <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">),</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>You can specify default CORS-enabled resource options using\n<tt>aiohttp_cors.setup()</tt>\u2019s <tt>defaults</tt> argument:</p>\n<pre><span class=\"n\">cors</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"c1\"># Allow all to read all CORS-enabled resources from</span>\n        <span class=\"c1\"># http://client.example.org.</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(),</span>\n    <span class=\"p\">})</span>\n\n<span class=\"c1\"># Enable CORS on routes.</span>\n\n<span class=\"c1\"># According to defaults POST and PUT will be available only to</span>\n<span class=\"c1\"># \"http://client.example.org\".</span>\n<span class=\"n\">hello_resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">handler_post</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># In addition to \"http://client.example.org\", GET request will be</span>\n<span class=\"c1\"># allowed from \"http://other-client.example.org\" origin.</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://other-client.example.org\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(),</span>\n    <span class=\"p\">})</span>\n\n<span class=\"c1\"># CORS will be enabled only on the resources added to `CorsConfig`,</span>\n<span class=\"c1\"># so following resource will be NOT CORS-enabled.</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/private\"</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">)</span>\n</pre>\n<p>Also you can specify default options for resources:</p>\n<pre><span class=\"c1\"># Allow POST and PUT requests from \"http://client.example.org\" origin.</span>\n<span class=\"n\">hello_resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(),</span>\n    <span class=\"p\">})</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">handler_post</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">))</span>\n</pre>\n<p>Resource CORS configuration allows to use <tt>allow_methods</tt> option that\nexplicitly specifies list of allowed HTTP methods for origin\n(or <tt>*</tt> for all HTTP methods).\nBy using this option it is not required to add all resource routes to\nCORS configuration object:</p>\n<pre><span class=\"c1\"># Allow POST and PUT requests from \"http://client.example.org\" origin.</span>\n<span class=\"n\">hello_resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span><span class=\"n\">allow_methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PUT\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">})</span>\n<span class=\"c1\"># No need to add POST and PUT routes into CORS configuration object.</span>\n<span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">handler_post</span><span class=\"p\">)</span>\n<span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">)</span>\n<span class=\"c1\"># Still you can add additional methods to CORS configuration object:</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"n\">handler_delete</span><span class=\"p\">))</span>\n</pre>\n<p>Here is an example of how to enable CORS for all origins with all CORS\nfeatures:</p>\n<pre><span class=\"n\">cors</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s2\">\"*\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Add all resources to `CorsConfig`.</span>\n<span class=\"n\">resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"n\">handler_get</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">))</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"n\">handler_delete</span><span class=\"p\">))</span>\n</pre>\n<p>Old routes API is supported \u2014 you can use <tt>router.add_router</tt> and\n<tt>router.register_route</tt> as before, though this usage is discouraged:</p>\n<pre><span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">handler</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"X-Custom-Server-Header\"</span><span class=\"p\">,),</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s2\">\"X-Requested-With\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Content-Type\"</span><span class=\"p\">),</span>\n            <span class=\"n\">max_age</span><span class=\"o\">=</span><span class=\"mi\">3600</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n</pre>\n<p>You can enable CORS for all added routes by accessing routes list\nin the router:</p>\n<pre><span class=\"c1\"># Setup application routes.</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"GET\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">handler_get</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">)</span>\n<span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/hello\"</span><span class=\"p\">,</span> <span class=\"n\">handler_delete</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Configure default CORS settings.</span>\n<span class=\"n\">cors</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s2\">\"*\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Configure CORS on all routes.</span>\n<span class=\"k\">for</span> <span class=\"n\">route</span> <span class=\"ow\">in</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">routes</span><span class=\"p\">()):</span>\n    <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">route</span><span class=\"p\">)</span>\n</pre>\n<p>You can also use <tt>CorsViewMixin</tt> on <tt>web.View</tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CorsView</span><span class=\"p\">(</span><span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">View</span><span class=\"p\">,</span> <span class=\"n\">CorsViewMixin</span><span class=\"p\">):</span>\n\n    <span class=\"n\">cors_config</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"*\"</span><span class=\"p\">:</span> <span class=\"n\">ResourceOption</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"X-Request-ID\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Done\"</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@custom_cors</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"*\"</span><span class=\"p\">:</span> <span class=\"n\">ResourceOption</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n    <span class=\"p\">})</span>\n    <span class=\"nd\">@asyncio</span><span class=\"o\">.</span><span class=\"n\">coroutine</span>\n    <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Done\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">cors</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">defaults</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s2\">\"*\"</span><span class=\"p\">:</span> <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n            <span class=\"n\">allow_credentials</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n            <span class=\"n\">expose_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n            <span class=\"n\">allow_headers</span><span class=\"o\">=</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n<span class=\"p\">})</span>\n\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span>\n    <span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"*\"</span><span class=\"p\">,</span> <span class=\"s2\">\"/resource\"</span><span class=\"p\">,</span> <span class=\"n\">CorsView</span><span class=\"p\">),</span>\n    <span class=\"n\">webview</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"security\">\n<h3>Security</h3>\n<p>TODO: fill this</p>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>To setup development environment:</p>\n<pre><span class=\"c1\"># Clone sources repository:\n</span>git clone https://github.com/aio-libs/aiohttp_cors.git .\n<span class=\"c1\"># Create and activate virtual Python environment:\n</span>python3 -m venv env\n<span class=\"nb\">source</span> env/bin/activate\n<span class=\"c1\"># Install requirements and aiohttp_cors into virtual environment\n</span>pip install -r requirements-dev.txt\n</pre>\n<p>To run tests:</p>\n<pre>tox\n</pre>\n<p>To run only runtime tests in current environment:</p>\n<pre>py.test\n</pre>\n<p>To run only static code analysis checks:</p>\n<pre>tox -e check\n</pre>\n<div id=\"running-selenium-tests\">\n<h4>Running Selenium tests</h4>\n<p>To run Selenium tests with Firefox web driver you need to install Firefox.</p>\n<p>To run Selenium tests with Chromium web driver you need to:</p>\n<ol>\n<li>Install Chrome driver. On Ubuntu 14.04 it\u2019s in <tt><span class=\"pre\">chromium-chromedriver</span></tt>\npackage.</li>\n<li>Either add <tt>chromedriver</tt> to PATH or set <tt>WEBDRIVER_CHROMEDRIVER_PATH</tt>\nenvironment variable to <tt>chromedriver</tt>, e.g. on Ubuntu 14.04\n<tt><span class=\"pre\">WEBDRIVER_CHROMEDRIVER_PATH=/usr/lib/chromium-browser/chromedriver</span></tt>.</li>\n</ol>\n</div>\n<div id=\"release-process\">\n<h4>Release process</h4>\n<p>To release version <tt>vA.B.C</tt> from the current version of <tt>master</tt> branch\nyou need to:</p>\n<ol>\n<li><p>Create local branch <tt>vA.B.C</tt>.</p>\n</li>\n<li><p>In <tt>CHANGES.rst</tt> set release date to today.</p>\n</li>\n<li><p>In <tt>aiohttp_cors/__about__.py</tt> change version from <tt>A.B.Ca0</tt> to\n<tt>A.B.C</tt>.</p>\n</li>\n<li><p>Create pull request with <tt>vA.B.C</tt> branch, wait for all checks to\nsuccessfully finish (Travis and Appveyor).</p>\n</li>\n<li><p>Merge pull request to master.</p>\n</li>\n<li><p>Update and checkout <tt>master</tt> branch.</p>\n</li>\n<li><p>Create and push tag for release version to GitHub:</p>\n<pre>git tag vA.B.C\ngit push --tags\n</pre>\n<p>Now Travis should ran tests again, and build and deploy wheel on PyPI.</p>\n<p>If Travis release doesn\u2019t work for some reason, use following steps\nfor manual release upload.</p>\n<ol>\n<li><p>Install fresh versions of setuptools and pip.\nInstall <tt>wheel</tt> for building wheels.\nInstall <tt>twine</tt> for uploading to PyPI.</p>\n<pre>pip install -U pip setuptools twine wheel\n</pre>\n</li>\n<li><p>Configure PyPI credentials in <tt><span class=\"pre\">~/.pypirc</span></tt>.</p>\n</li>\n<li><p>Build distribution:</p>\n<pre>rm -rf build dist<span class=\"p\">;</span> python setup.py sdist bdist_wheel\n</pre>\n</li>\n<li><p>Upload new release to PyPI:</p>\n<pre>twine upload dist/*\n</pre>\n</li>\n</ol>\n</li>\n<li><p>Edit release description on GitHub if needed.</p>\n</li>\n<li><p>Announce new release on the <em>aio-libs</em> mailing list:\n<a href=\"https://groups.google.com/forum/#!forum/aio-libs\" rel=\"nofollow\">https://groups.google.com/forum/#!forum/aio-libs</a>.</p>\n</li>\n</ol>\n<p>Post release steps:</p>\n<ol>\n<li>In <tt>CHANGES.rst</tt> add template for the next release.</li>\n<li>In <tt>aiohttp_cors/__about__.py</tt> change version from <tt>A.B.C</tt> to\n<tt><span class=\"pre\">A.(B</span> + <span class=\"pre\">1).0a0</span></tt>.</li>\n</ol>\n</div>\n</div>\n<div id=\"bugs\">\n<h3>Bugs</h3>\n<p>Please report bugs, issues, feature requests, etc. on\n<a href=\"https://github.com/aio-libs/aiohttp_cors/issues\" rel=\"nofollow\">GitHub</a>.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Copyright 2015 Vladimir Rutsky &lt;<a href=\"mailto:vladimir%40rutsky.org\">vladimir<span>@</span>rutsky<span>.</span>org</a>&gt;.</p>\n<p>Licensed under the\n<a href=\"https://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License, Version 2.0</a>,\nsee <tt>LICENSE</tt> file for details.</p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>CHANGES</h2>\n<div id=\"id1\">\n<h3>0.7.0 (2018-03-05)</h3>\n<ul>\n<li>Make web view check implicit and type based (#159)</li>\n<li>Disable Python 3.4 support (#156)</li>\n<li>Support aiohttp 3.0+ (#155)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.6.0 (2017-12-21)</h3>\n<ul>\n<li>Support aiohttp views by <tt>CorsViewMixin</tt> (#145)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.5.3 (2017-04-21)</h3>\n<ul>\n<li>Fix <tt>typing</tt> being installed on Python 3.6.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.5.2 (2017-03-28)</h3>\n<ul>\n<li>Fix tests compatibility with <tt>aiohttp</tt> 2.0.\nThis release and release v0.5.0 should work on <tt>aiohttp</tt> 2.0.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.5.1 (2017-03-23)</h3>\n<ul>\n<li>Enforce <tt>aiohttp</tt> version to be less than 2.0.\nNewer <tt>aiohttp</tt> releases will be supported in the next release.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.5.0 (2016-11-18)</h3>\n<ul>\n<li>Fix compatibility with <tt>aiohttp</tt> 1.1</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.4.0 (2016-04-04)</h3>\n<ul>\n<li><p>Fixed support with new Resources objects introduced in <tt>aiohttp</tt> 0.21.0.\nMinimum supported version of <tt>aiohttp</tt> is 0.21.4 now.</p>\n</li>\n<li><p>New Resources objects are supported.\nYou can specify default configuration for a Resource and use\n<tt>allow_methods</tt> to explicitly list allowed methods (or <tt>*</tt> for all\nHTTP methods):</p>\n<pre><span class=\"c1\"># Allow POST and PUT requests from \"http://client.example.org\" origin.</span>\n<span class=\"n\">hello_resource</span> <span class=\"o\">=</span> <span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_resource</span><span class=\"p\">(</span><span class=\"s2\">\"/hello\"</span><span class=\"p\">),</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"http://client.example.org\"</span><span class=\"p\">:</span>\n            <span class=\"n\">aiohttp_cors</span><span class=\"o\">.</span><span class=\"n\">ResourceOptions</span><span class=\"p\">(</span>\n                <span class=\"n\">allow_methods</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"s2\">\"PUT\"</span><span class=\"p\">]),</span>\n    <span class=\"p\">})</span>\n<span class=\"c1\"># No need to add POST and PUT routes into CORS configuration object.</span>\n<span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"POST\"</span><span class=\"p\">,</span> <span class=\"n\">handler_post</span><span class=\"p\">)</span>\n<span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"PUT\"</span><span class=\"p\">,</span> <span class=\"n\">handler_put</span><span class=\"p\">)</span>\n<span class=\"c1\"># Still you can add additional methods to CORS configuration object:</span>\n<span class=\"n\">cors</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">hello_resource</span><span class=\"o\">.</span><span class=\"n\">add_route</span><span class=\"p\">(</span><span class=\"s2\">\"DELETE\"</span><span class=\"p\">,</span> <span class=\"n\">handler_delete</span><span class=\"p\">))</span>\n</pre>\n</li>\n<li><p><tt>AbstractRouterAdapter</tt> was completely rewritten to be more Router\nagnostic.</p>\n</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>0.3.0 (2016-02-06)</h3>\n<ul>\n<li>Rename <tt>UrlDistatcherRouterAdapter</tt> to <tt>UrlDispatcherRouterAdapter</tt>.</li>\n<li>Set maximum supported <tt>aiohttp</tt> version to <tt>0.20.2</tt>, see bug #30 for\ndetails.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.2.0 (2015-11-30)</h3>\n<ul>\n<li>Move ABCs from <tt>aiohttp_cors.router_adapter</tt> to <tt>aiohttp_cors.abc</tt>.</li>\n<li>Rename <tt>RouterAdapter</tt> to <tt>AbstractRouterAdapter</tt>.</li>\n<li>Fix bug with configuring CORS for named routes.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.1.0 (2015-11-05)</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3925835, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "72d746d0d7bc2432272b446552e80ff1", "sha256": "b415f07660a3444740f6661286d8cc7e8cdca44520cd8baad9ca66bb17c33486"}, "downloads": -1, "filename": "aiohttp_cors-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "72d746d0d7bc2432272b446552e80ff1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19004, "upload_time": "2015-11-05T00:41:33", "upload_time_iso_8601": "2015-11-05T00:41:33.435545Z", "url": "https://files.pythonhosted.org/packages/f8/66/6cc2f0468f467beddbb5bd9a8b3f928418bbee176d60d3eb1081ece81bb5/aiohttp_cors-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c456e95e57cf3740fb3440c0250d48d5", "sha256": "16f4990f974b6dbfb84161ec0103169349a96d490ae1e87ff0a417db9e8464e1"}, "downloads": -1, "filename": "aiohttp_cors-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c456e95e57cf3740fb3440c0250d48d5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27340, "upload_time": "2015-11-05T00:41:40", "upload_time_iso_8601": "2015-11-05T00:41:40.395970Z", "url": "https://files.pythonhosted.org/packages/39/1f/34256d2000ed5e97a16c89c704b0a806a83c5d357bed13db19cab579f503/aiohttp_cors-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "aa5c0555a1b98ec7f4d4554ffd886f49", "sha256": "017b6f085306f879bcca87cd99ebc024861000068f318fe3acbe159444091457"}, "downloads": -1, "filename": "aiohttp_cors-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "aa5c0555a1b98ec7f4d4554ffd886f49", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21782, "upload_time": "2015-11-30T12:06:53", "upload_time_iso_8601": "2015-11-30T12:06:53.559791Z", "url": "https://files.pythonhosted.org/packages/d3/f0/d34d404d6de2bcc41b6e21f406aba091ccf9c0825cb02ba076d11a6c34c4/aiohttp_cors-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8d64d3582ed1688a6789766cfae6d849", "sha256": "bec5ad83e20a949816db3f9efe432ce1c1fef04395098f17754ef3d8da7339c8"}, "downloads": -1, "filename": "aiohttp_cors-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8d64d3582ed1688a6789766cfae6d849", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29804, "upload_time": "2015-11-30T12:07:07", "upload_time_iso_8601": "2015-11-30T12:07:07.650775Z", "url": "https://files.pythonhosted.org/packages/a7/7c/52daa4c34bd7ece951f266507fb51a4847742e8f1a6af8194f43ed50695e/aiohttp_cors-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "9fbeae2232a597e8503b7fda5ba01b4a", "sha256": "12f8719754f5e18883d3e276cd17bc0abb920b8afca2142cb14619fb6eebe906"}, "downloads": -1, "filename": "aiohttp_cors-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9fbeae2232a597e8503b7fda5ba01b4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 59904, "upload_time": "2016-02-05T22:44:08", "upload_time_iso_8601": "2016-02-05T22:44:08.194943Z", "url": "https://files.pythonhosted.org/packages/0d/88/8a18b5436358981e73d4299e5bd057b7ba2f7495170b364245cd4ed7ef66/aiohttp_cors-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "467d42f38da97b05e37eea72165bbc38", "sha256": "09a336dccabfe52531cf8974c89afd2b837fc71e32c438d37a75e3e5f60122a3"}, "downloads": -1, "filename": "aiohttp_cors-0.3.0.tar.gz", "has_sig": false, "md5_digest": "467d42f38da97b05e37eea72165bbc38", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30398, "upload_time": "2016-02-05T22:44:31", "upload_time_iso_8601": "2016-02-05T22:44:31.567140Z", "url": "https://files.pythonhosted.org/packages/cb/37/16c10c4ee596b09a73ce1423972b9f4f1eea216a03e243d15955866d9656/aiohttp_cors-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "efe87c967bf4bd93b52e29d8ecf55a7b", "sha256": "a044457cc6d56aa15c10fd611ee8b3876aab1d539f222c30120d6460be27b997"}, "downloads": -1, "filename": "aiohttp_cors-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "efe87c967bf4bd93b52e29d8ecf55a7b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26372, "upload_time": "2016-04-04T09:56:13", "upload_time_iso_8601": "2016-04-04T09:56:13.808345Z", "url": "https://files.pythonhosted.org/packages/d6/43/3a74e42f948a4e5926e1c1b810441ac2798f45e0149246acb62d5f842ff4/aiohttp_cors-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f0c83969d839a5c7b9cccd7d5ea63c66", "sha256": "4f4e8f7026f1c476f00498ee6f3f16110fcd65a9eb04fd02647aef3344830dca"}, "downloads": -1, "filename": "aiohttp_cors-0.4.0.tar.gz", "has_sig": false, "md5_digest": "f0c83969d839a5c7b9cccd7d5ea63c66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35371, "upload_time": "2016-04-04T09:56:22", "upload_time_iso_8601": "2016-04-04T09:56:22.355860Z", "url": "https://files.pythonhosted.org/packages/88/c6/0fa0b81704871a1987edc6aa75fc7c75632de280b892afdd9a58e298f9b6/aiohttp_cors-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f8e684d35a82b246dedf8bf88fa7d1c9", "sha256": "b26ac2408c009c64afb9faf23a89deeedb272f9452f1d154643e393141f72e75"}, "downloads": -1, "filename": "aiohttp_cors-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f8e684d35a82b246dedf8bf88fa7d1c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26469, "upload_time": "2016-11-18T17:46:10", "upload_time_iso_8601": "2016-11-18T17:46:10.466314Z", "url": "https://files.pythonhosted.org/packages/f3/da/49fa914a0bb3ece8c3735256f7c232d612e238de75cb625acf915855ece4/aiohttp_cors-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "caff8d42d939802ba299c46876617b7e", "sha256": "6f8c132184ee55babaa329a32fe5bb3a8ab8f7fb947e4010f33cce9a80e548af"}, "downloads": -1, "filename": "aiohttp-cors-0.5.0.tar.gz", "has_sig": false, "md5_digest": "caff8d42d939802ba299c46876617b7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37829, "upload_time": "2016-11-18T17:46:12", "upload_time_iso_8601": "2016-11-18T17:46:12.958192Z", "url": "https://files.pythonhosted.org/packages/93/e2/794d3933921402c92018f52929a1121b77208bfe9f64844b95825a29fdd5/aiohttp-cors-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "4bec9b57b2f95590df01342ebda72abe", "sha256": "87eb108323b2e614cc8006355f6239328fee71b971f36ca70dae70e083e5a4ff"}, "downloads": -1, "filename": "aiohttp_cors-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4bec9b57b2f95590df01342ebda72abe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26579, "upload_time": "2017-03-22T21:42:23", "upload_time_iso_8601": "2017-03-22T21:42:23.326192Z", "url": "https://files.pythonhosted.org/packages/1d/3a/56c4b1437e4b77a294574aa240d2ff2aa0255c9cb7d1075685310c18be18/aiohttp_cors-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ea7e6a2401b140009e58b791dfbbaca", "sha256": "93f52625e0b793ef87c1f5fb4bbe1cfcbdd67c35436fce2dc1ae88988f50f56b"}, "downloads": -1, "filename": "aiohttp-cors-0.5.1.tar.gz", "has_sig": false, "md5_digest": "0ea7e6a2401b140009e58b791dfbbaca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34634, "upload_time": "2017-03-22T21:42:25", "upload_time_iso_8601": "2017-03-22T21:42:25.182108Z", "url": "https://files.pythonhosted.org/packages/7f/49/03a264b3791717bbfa6ee79b1bf46a417592b361223d1704c694d6e5e81b/aiohttp-cors-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1af08c4c5c814d7ed91053cd2619dcfc", "sha256": "d00f5073b846409b127ba00110a51e39c54fd341aedb242c65b9c5ed52fa921a"}, "downloads": -1, "filename": "aiohttp_cors-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "1af08c4c5c814d7ed91053cd2619dcfc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26773, "upload_time": "2017-03-28T10:57:26", "upload_time_iso_8601": "2017-03-28T10:57:26.020042Z", "url": "https://files.pythonhosted.org/packages/94/30/8d73d8a18de114c45177663cf3ced0723e379435b63c6392c28c3f80bb09/aiohttp_cors-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "346f1f94c8b3e2b6182d5d5dcf327ae0", "sha256": "34a9b294764b1a65dd5dad27fadbec7a8f0d334ea7285a2831fe620a22411436"}, "downloads": -1, "filename": "aiohttp-cors-0.5.2.tar.gz", "has_sig": false, "md5_digest": "346f1f94c8b3e2b6182d5d5dcf327ae0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34831, "upload_time": "2017-03-28T10:57:27", "upload_time_iso_8601": "2017-03-28T10:57:27.803135Z", "url": "https://files.pythonhosted.org/packages/0c/9f/cd8c02e7e0eb23e8ddd337cb18106b8c02ca1b8f8f453fe70e87b0a82fd1/aiohttp-cors-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "e92c1af820f77ea068597937b6ce8328", "sha256": "ec3929c58fe9e91244c5d9cb2d1eee99479cd7fc5ae1307402b18396bce83d4e"}, "downloads": -1, "filename": "aiohttp_cors-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "e92c1af820f77ea068597937b6ce8328", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 26808, "upload_time": "2017-04-21T11:59:21", "upload_time_iso_8601": "2017-04-21T11:59:21.481427Z", "url": "https://files.pythonhosted.org/packages/f3/49/e77fa575130030f6b49091a4c1dc226e36cc9438bef5edd77c73e1e826ac/aiohttp_cors-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0594dd4f5148405a13b5b703325244a9", "sha256": "368a84e4bcab12f5d8cf7e50d8beb031d6c3902ecc0eb9678c4ef293610d6585"}, "downloads": -1, "filename": "aiohttp-cors-0.5.3.tar.gz", "has_sig": false, "md5_digest": "0594dd4f5148405a13b5b703325244a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34876, "upload_time": "2017-04-21T11:59:23", "upload_time_iso_8601": "2017-04-21T11:59:23.333749Z", "url": "https://files.pythonhosted.org/packages/33/3c/bcbe3996731ccc8ca3e2db6ca717ba03294a650b3ce5dd4bcc1db9b33632/aiohttp-cors-0.5.3.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "a4fd7fbf197a73e42d635e082a3eca80", "sha256": "3dbe82b2b28bd3dd3f91647ded384461c886daaa446a24f96b5b6a8fa7986836"}, "downloads": -1, "filename": "aiohttp_cors-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a4fd7fbf197a73e42d635e082a3eca80", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 28937, "upload_time": "2017-12-21T18:19:39", "upload_time_iso_8601": "2017-12-21T18:19:39.281524Z", "url": "https://files.pythonhosted.org/packages/c0/43/bf0a2ac229b37e419327f796cecf5f845e5f47a33f6c8c41a9dd3397adbf/aiohttp_cors-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1a48a916a2d99358816347584506401c", "sha256": "a44d59cb27a9e53377f6d49cfbd486de1aa071df653652e2a58135c01b5915e4"}, "downloads": -1, "filename": "aiohttp-cors-0.6.0.tar.gz", "has_sig": false, "md5_digest": "1a48a916a2d99358816347584506401c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38908, "upload_time": "2017-12-21T18:19:44", "upload_time_iso_8601": "2017-12-21T18:19:44.643031Z", "url": "https://files.pythonhosted.org/packages/34/4b/84d126302ec132f19eb1a6b9f1f4740a1c6e6b62d794bb54789d29c59517/aiohttp-cors-0.6.0.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "04567baca657f60d2a2c93c4c1dbe26c", "sha256": "0451ba59fdf6909d0e2cd21e4c0a43752bc0703d33fc78ae94d9d9321710193e"}, "downloads": -1, "filename": "aiohttp_cors-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "04567baca657f60d2a2c93c4c1dbe26c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27564, "upload_time": "2018-03-06T15:45:42", "upload_time_iso_8601": "2018-03-06T15:45:42.034865Z", "url": "https://files.pythonhosted.org/packages/13/e7/e436a0c0eb5127d8b491a9b83ecd2391c6ff7dcd5548dfaec2080a2340fd/aiohttp_cors-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de3940a901b269be82c8bd9f28d53ff0", "sha256": "4d39c6d7100fd9764ed1caf8cebf0eb01bf5e3f24e2e073fda6234bc48b19f5d"}, "downloads": -1, "filename": "aiohttp-cors-0.7.0.tar.gz", "has_sig": false, "md5_digest": "de3940a901b269be82c8bd9f28d53ff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35966, "upload_time": "2018-03-06T15:45:42", "upload_time_iso_8601": "2018-03-06T15:45:42.936300Z", "url": "https://files.pythonhosted.org/packages/44/9e/6cdce7c3f346d8fd487adf68761728ad8cd5fbc296a7b07b92518350d31f/aiohttp-cors-0.7.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04567baca657f60d2a2c93c4c1dbe26c", "sha256": "0451ba59fdf6909d0e2cd21e4c0a43752bc0703d33fc78ae94d9d9321710193e"}, "downloads": -1, "filename": "aiohttp_cors-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "04567baca657f60d2a2c93c4c1dbe26c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 27564, "upload_time": "2018-03-06T15:45:42", "upload_time_iso_8601": "2018-03-06T15:45:42.034865Z", "url": "https://files.pythonhosted.org/packages/13/e7/e436a0c0eb5127d8b491a9b83ecd2391c6ff7dcd5548dfaec2080a2340fd/aiohttp_cors-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de3940a901b269be82c8bd9f28d53ff0", "sha256": "4d39c6d7100fd9764ed1caf8cebf0eb01bf5e3f24e2e073fda6234bc48b19f5d"}, "downloads": -1, "filename": "aiohttp-cors-0.7.0.tar.gz", "has_sig": false, "md5_digest": "de3940a901b269be82c8bd9f28d53ff0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 35966, "upload_time": "2018-03-06T15:45:42", "upload_time_iso_8601": "2018-03-06T15:45:42.936300Z", "url": "https://files.pythonhosted.org/packages/44/9e/6cdce7c3f346d8fd487adf68761728ad8cd5fbc296a7b07b92518350d31f/aiohttp-cors-0.7.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:21:21 2020"}