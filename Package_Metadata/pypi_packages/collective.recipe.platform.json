{"info": {"author": "Gerhard Weis", "author_email": "gerhard.weis@gmx.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": ".. contents::\n\n- Code repository: http://github.com/gweis/collective.recipe.platform\n\nLimitations:\n============\n\nThe recipe currently only generates platform strings for darwin10 and darwin9.\nDue to the simplicity of the recipe itself, it should not be hard ta add\nfurther platform-prefixes. (Patches and other contributions are welcome).\n\nExample usage\n=============\n\nThis recipe provides a way of defining buildout variables which can be\nreferenced form other parts with platform specific values. It does not try\nbeing intelligent and guess what values it should set, but gives the user full\ncontrol, with the drawback/advantage of keeping all settings in a single or\nmultiple configuration sections.\n\nBut examples are probably a better explanation:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = debug\n    ...\n    ... [platform]\n    ... recipe = collective.recipe.platform\n    ... environment =\n    ... darwin10-environment =\n    ...     CC=gcc-4.0\n    ... flags =\n    ... darwin9-flags =\n    ...     CPP=cpp-4.0\n    ...\n    ... [debug]\n    ... recipe = zc.buildout:debug\n    ... env = ${platform:environment}\n    ... flags = ${platform:flags}\n    ... plname = ${platform:platform}\n    ... \"\"\")\n\nOk, we have a part called 'debug'. This part just prints all given options\nto stdout. In our case it uses values referenced in the platform part.\n\nThe platform recipe looks for options starting with a platform prefix, taxes\nthe remainder of the option name and replaces the value.\n\nThe result of a buildout running on OSX 10.6 (darwin10) is the following:\n\n    >>> print system(buildout)\n    Installing platform.\n    Unused options for platform: 'darwin9-flags'.\n    Installing debug.\n      env='\\nCC=gcc-4.0'\n      flags=''\n      plname='darwin10'\n      recipe='zc.buildout:debug'\n\n\nChanges:\n========\n\n0.1 (2009-10-13)\n----------------\n\n - initial release", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/collective.recipe.platform", "keywords": "buildout development build", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "collective.recipe.platform", "package_url": "https://pypi.org/project/collective.recipe.platform/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/collective.recipe.platform/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/collective.recipe.platform"}, "release_url": "https://pypi.org/project/collective.recipe.platform/0.1/", "requires_dist": null, "requires_python": null, "summary": "Provide buildout variables with platform specific values.", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#limitations\" id=\"id2\" rel=\"nofollow\">Limitations:</a></li>\n<li><a href=\"#example-usage\" id=\"id3\" rel=\"nofollow\">Example usage</a></li>\n<li><a href=\"#changes\" id=\"id4\" rel=\"nofollow\">Changes:</a></li>\n</ul>\n</div>\n<ul>\n<li>Code repository: <a href=\"http://github.com/gweis/collective.recipe.platform\" rel=\"nofollow\">http://github.com/gweis/collective.recipe.platform</a></li>\n</ul>\n<div id=\"limitations\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Limitations:</a></h2>\n<p>The recipe currently only generates platform strings for darwin10 and darwin9.\nDue to the simplicity of the recipe itself, it should not be hard ta add\nfurther platform-prefixes. (Patches and other contributions are welcome).</p>\n</div>\n<div id=\"example-usage\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Example usage</a></h2>\n<p>This recipe provides a way of defining buildout variables which can be\nreferenced form other parts with platform specific values. It does not try\nbeing intelligent and guess what values it should set, but gives the user full\ncontrol, with the drawback/advantage of keeping all settings in a single or\nmultiple configuration sections.</p>\n<p>But examples are probably a better explanation:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = debug\n...\n... [platform]\n... recipe = collective.recipe.platform\n... environment =\n... darwin10-environment =\n...     CC=gcc-4.0\n... flags =\n... darwin9-flags =\n...     CPP=cpp-4.0\n...\n... [debug]\n... recipe = zc.buildout:debug\n... env = ${platform:environment}\n... flags = ${platform:flags}\n... plname = ${platform:platform}\n... \"\"\")\n</pre>\n</blockquote>\n<p>Ok, we have a part called \u2018debug\u2019. This part just prints all given options\nto stdout. In our case it uses values referenced in the platform part.</p>\n<p>The platform recipe looks for options starting with a platform prefix, taxes\nthe remainder of the option name and replaces the value.</p>\n<p>The result of a buildout running on OSX 10.6 (darwin10) is the following:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print system(buildout)\nInstalling platform.\nUnused options for platform: 'darwin9-flags'.\nInstalling debug.\n  env='\\nCC=gcc-4.0'\n  flags=''\n  plname='darwin10'\n  recipe='zc.buildout:debug'\n</pre>\n</blockquote>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Changes:</a></h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1 (2009-10-13)</span></h2>\n<blockquote>\n<ul>\n<li>initial release</li>\n</ul>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 788147, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0a4391ff4826c341cca29e79bcf6a612", "sha256": "c2230d6538c18d2330a5d5e4a4e01cd7dafbbecdacc425f2656b78ddf6f26b3c"}, "downloads": -1, "filename": "collective.recipe.platform-0.1.tar.gz", "has_sig": false, "md5_digest": "0a4391ff4826c341cca29e79bcf6a612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2009-10-13T07:09:46", "upload_time_iso_8601": "2009-10-13T07:09:46.799738Z", "url": "https://files.pythonhosted.org/packages/03/8a/08ce043378e3aa027f74304a6eb07a9aad6288c08168ca232950152d8b25/collective.recipe.platform-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a4391ff4826c341cca29e79bcf6a612", "sha256": "c2230d6538c18d2330a5d5e4a4e01cd7dafbbecdacc425f2656b78ddf6f26b3c"}, "downloads": -1, "filename": "collective.recipe.platform-0.1.tar.gz", "has_sig": false, "md5_digest": "0a4391ff4826c341cca29e79bcf6a612", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3814, "upload_time": "2009-10-13T07:09:46", "upload_time_iso_8601": "2009-10-13T07:09:46.799738Z", "url": "https://files.pythonhosted.org/packages/03/8a/08ce043378e3aa027f74304a6eb07a9aad6288c08168ca232950152d8b25/collective.recipe.platform-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:54 2020"}