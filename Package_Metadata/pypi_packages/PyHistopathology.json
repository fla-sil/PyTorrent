{"info": {"author": "Sai Chandra", "author_email": "deepak.kumar.iet@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Python Package: PyHistopathology\n\nRead our documentation at https://pyhistopathology.readthedocs.io/en/latest/\n\n## Command line tool:\npython3 WSI_PATCH_Extraction.py -args\nMandatory args \n- -i: input svs file path\n- -o: output folder path\n- -f: input folder for path\n    - Note: you should use either -i or -f, cannot use both.\nAdditional args\n- -c: criteria\n    - criteria: Random or None, Default is None\n- -s: patch size\n    - Size of the patch to extract, default is (256,256)\n- -n: number of patches\n    - Only should be given for -c Random. Default value is 2000.\n- -a: input xml\n    - if annotations are provided annotations file path should be given. Otherwise don't use this arg.\n\n# Package Usage:\n## Reading WSI\n**Description**\n- use WSI_Scanning.readWSI() to read an WSI Image\n- Input: WSI path or directory\n- Output: functioning numpy array of WSI Image with dtype int32\n **Function**\n- readWSI(WSI_path, magnification_level, annotation_file, annonated_level)\n     Arguments\n\n     - WSI_path: Directory of WSI\n-    - magnification_level: level of zoom, example (40x,20x,10x,5x). Default magnification is **\u201c20x\u201d** \n             - Note if magnification 40x for max zoom level of 20x image an error will be raised.\n     - annotation_file: Default annotation = None. if annotation are available in xml formats. use annotation = inputxml file path.\n     - annonated_level= if annotation is not giving no need to consider this variable. if annotation is given then mention z-axis of annotations. Default annotatedlevel =0\n     ```\n        ###Reading image example\n        from WSI_Preprocessing.Preprocessing import WSI_Scanning \n        import cv2 \n        img,slide_dim = WSI_Scanning.readWSI(\"example.svs\") \n        cv2.imwrite(\"example.png\",img)\n     ```\n\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1574801775409_example.PNG)\n\n\n\n## Denoising WSI\n\nDescription\n\nuse Denoising.denoising() to remove stains, folds and other background noise in WSI\n-  input: WSI Path or directory \n- Output: functioning numpy array of WSI Image (After denoising) with dtype int32.\n\nFunction\n\ndenoising(inputsvs, magnification, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value)\n Arguments\n - inputsvs: path or location of WSI.\n - magnification: level of zoom, example (40x,20x,10x,5x). Default magnification is **\u201c20x\u201d** \n   - Note if magnification 40x for max zoom level of 20x image an error will be raised.\n - filtering: GuassianBlur, RGBThersholding, None\n   - GuassianBlur: Homogeneity calculations based on image smoothing and Gaussian blur equations. \n          We compute sum of  square differences between two consecutive  Gaussian blurred images as score for homogeneity  \n         - Upper limit: upper threshold of homogeneity score. default value is 9500 with kernel size of 11*11\n         - lower limit: lower threshold of homogeneity score. default value is 1500 with kernel size of 11*11\n         - Patch size: Not significant parameters for GuassianBlur filtering\n   - RGBThersholding: \n         Validated patches based on RGB values of patches\n         - red_value, green-value, blue_values are threshold for RGB\n -  - None:\n          Only removes Background\n - - Note that our default is GuassianBlur technique. GuassianBlur is highly effective and requires more computational power (RAM). RGBThersholding is less effective which needs less computational power \n\n~~~from WSI_Preprocessing.Preprocessing import Denoising \nimport cv2 \n# Here mandatory options are example.svs and magni\ufb01cation \nimg = Denoising.denoising(\"example.svs\", \"20x\" ) \ncv2.imwrite(\"example.png\",img)\n~~~\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1575319269525_example2.PNG)\n\n# Extracting Patches\n\nDescription\n\nuse Extractingpatches.extractingPatches() to extract patches from WSI.\n- input: WSI Path or directory \n- output: patches from WSI.\n\nFunction:\nextractingPatches(inputsvs, outputpath, magnification, patch_extraction_creatia, number_of_patches, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, reconstructionimagepath)\n\n Arguments\n    - inputsvs, magnification, patch_extraction_creatia, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, arguments is same as denosing module.\n    - patch_extraction_creatia: random, None\n    -      - Default is None.\n     For extracting a fixed number of patches for WSI we can use random.\n    - Default number of patches is 2000\n    - outputpath: folder to store the extracted patches\n    - reconstructionimagepath: we you want to compare the patches with WSI we can mention the reconstructionimagepath.\n     - Default is None\n    - - Note: it only works with patch_extraction_creatia = None.\n   - - Note: For WSI number of patches can exceed 20k.\n```##patch extarction and reconstruction example\nfrom WSI_Preprocessing.Preprocessing import Extarctingpatches\nimport cv2 \nimg = Extarctingpatches.extractingPatches(\"example.svs\",\"temp\" ,\"20x\" ) \ncv2.imwrite(\"exampler.png\",img)\n     # Here mandatory options are example.svs and magnification, and outputpath \nExtractingpatches.extractingPatches(example.svs, outputpath, magnification)\n```\n![](https://paper-attachments.dropbox.com/s_FDB48527FA5ECB7BD9C0FF3FE49E25C14783C24594EC3FBA01AC4BD504920652_1575341759963_Example+Image.PNG)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saichandra1/PyHistopathology", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "PyHistopathology", "package_url": "https://pypi.org/project/PyHistopathology/", "platform": "", "project_url": "https://pypi.org/project/PyHistopathology/", "project_urls": {"Homepage": "https://github.com/saichandra1/PyHistopathology"}, "release_url": "https://pypi.org/project/PyHistopathology/0.1/", "requires_dist": null, "requires_python": "", "summary": "A WSI Image processing application", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python Package: PyHistopathology</h1>\n<p>Read our documentation at <a href=\"https://pyhistopathology.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pyhistopathology.readthedocs.io/en/latest/</a></p>\n<h2>Command line tool:</h2>\n<p>python3 WSI_PATCH_Extraction.py -args\nMandatory args</p>\n<ul>\n<li>-i: input svs file path</li>\n<li>-o: output folder path</li>\n<li>-f: input folder for path\n<ul>\n<li>Note: you should use either -i or -f, cannot use both.\nAdditional args</li>\n</ul>\n</li>\n<li>-c: criteria\n<ul>\n<li>criteria: Random or None, Default is None</li>\n</ul>\n</li>\n<li>-s: patch size\n<ul>\n<li>Size of the patch to extract, default is (256,256)</li>\n</ul>\n</li>\n<li>-n: number of patches\n<ul>\n<li>Only should be given for -c Random. Default value is 2000.</li>\n</ul>\n</li>\n<li>-a: input xml\n<ul>\n<li>if annotations are provided annotations file path should be given. Otherwise don't use this arg.</li>\n</ul>\n</li>\n</ul>\n<h1>Package Usage:</h1>\n<h2>Reading WSI</h2>\n<p><strong>Description</strong></p>\n<ul>\n<li>\n<p>use WSI_Scanning.readWSI() to read an WSI Image</p>\n</li>\n<li>\n<p>Input: WSI path or directory</p>\n</li>\n<li>\n<p>Output: functioning numpy array of WSI Image with dtype int32\n<strong>Function</strong></p>\n</li>\n<li>\n<p>readWSI(WSI_path, magnification_level, annotation_file, annonated_level)\nArguments</p>\n<ul>\n<li>WSI_path: Directory of WSI</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>magnification_level: level of zoom, example (40x,20x,10x,5x). Default magnification is <strong>\u201c20x\u201d</strong>\n- Note if magnification 40x for max zoom level of 20x image an error will be raised.</li>\n<li>annotation_file: Default annotation = None. if annotation are available in xml formats. use annotation = inputxml file path.</li>\n<li>annonated_level= if annotation is not giving no need to consider this variable. if annotation is given then mention z-axis of annotations. Default annotatedlevel =0</li>\n</ul>\n<pre><code>   ###Reading image example\n   from WSI_Preprocessing.Preprocessing import WSI_Scanning \n   import cv2 \n   img,slide_dim = WSI_Scanning.readWSI(\"example.svs\") \n   cv2.imwrite(\"example.png\",img)\n</code></pre>\n</li>\n</ul>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/26c3b07312080061048971f7e92fd70a4593f089/68747470733a2f2f70617065722d6174746163686d656e74732e64726f70626f782e636f6d2f735f464442343835323746413545434237424439433046463346453439453235433134373833433234353934454333464241303141433442443530343932303635325f313537343830313737353430395f6578616d706c652e504e47\"></p>\n<h2>Denoising WSI</h2>\n<p>Description</p>\n<p>use Denoising.denoising() to remove stains, folds and other background noise in WSI</p>\n<ul>\n<li>input: WSI Path or directory</li>\n<li>Output: functioning numpy array of WSI Image (After denoising) with dtype int32.</li>\n</ul>\n<p>Function</p>\n<p>denoising(inputsvs, magnification, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value)\nArguments</p>\n<ul>\n<li>inputsvs: path or location of WSI.</li>\n<li>magnification: level of zoom, example (40x,20x,10x,5x). Default magnification is <strong>\u201c20x\u201d</strong>\n<ul>\n<li>Note if magnification 40x for max zoom level of 20x image an error will be raised.</li>\n</ul>\n</li>\n<li>filtering: GuassianBlur, RGBThersholding, None\n<ul>\n<li>GuassianBlur: Homogeneity calculations based on image smoothing and Gaussian blur equations.\nWe compute sum of  square differences between two consecutive  Gaussian blurred images as score for homogeneity<br>\n- Upper limit: upper threshold of homogeneity score. default value is 9500 with kernel size of 11<em>11\n- lower limit: lower threshold of homogeneity score. default value is 1500 with kernel size of 11</em>11\n- Patch size: Not significant parameters for GuassianBlur filtering</li>\n<li>RGBThersholding:\nValidated patches based on RGB values of patches\n- red_value, green-value, blue_values are threshold for RGB</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>None:\nOnly removes Background</li>\n</ul>\n</li>\n<li>\n<ul>\n<li>Note that our default is GuassianBlur technique. GuassianBlur is highly effective and requires more computational power (RAM). RGBThersholding is less effective which needs less computational power</li>\n</ul>\n</li>\n</ul>\n<pre>import cv2 \n# Here mandatory options are example.svs and magni\ufb01cation \nimg = Denoising.denoising(\"example.svs\", \"20x\" ) \ncv2.imwrite(\"example.png\",img)\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7575cd9e06bb90e7bc1f2eda7b365e5ca3ad1eb8/68747470733a2f2f70617065722d6174746163686d656e74732e64726f70626f782e636f6d2f735f464442343835323746413545434237424439433046463346453439453235433134373833433234353934454333464241303141433442443530343932303635325f313537353331393236393532355f6578616d706c65322e504e47\"></p>\n<h1>Extracting Patches</h1>\n<p>Description</p>\n<p>use Extractingpatches.extractingPatches() to extract patches from WSI.</p>\n<ul>\n<li>input: WSI Path or directory</li>\n<li>output: patches from WSI.</li>\n</ul>\n<p>Function:\nextractingPatches(inputsvs, outputpath, magnification, patch_extraction_creatia, number_of_patches, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, reconstructionimagepath)</p>\n<p>Arguments\n- inputsvs, magnification, patch_extraction_creatia, filtering, patch_size, upperlimit, lowerlimit, red_value, green_value, blue_value, Annotation, Annotationlevel, Requiredlevel, arguments is same as denosing module.\n- patch_extraction_creatia: random, None\n-      - Default is None.\nFor extracting a fixed number of patches for WSI we can use random.\n- Default number of patches is 2000\n- outputpath: folder to store the extracted patches\n- reconstructionimagepath: we you want to compare the patches with WSI we can mention the reconstructionimagepath.\n- Default is None\n- - Note: it only works with patch_extraction_creatia = None.</p>\n<ul>\n<li>\n<ul>\n<li>Note: For WSI number of patches can exceed 20k.</li>\n</ul>\n</li>\n</ul>\n<pre>from WSI_Preprocessing.Preprocessing import Extarctingpatches\nimport cv2 \nimg = Extarctingpatches.extractingPatches(\"example.svs\",\"temp\" ,\"20x\" ) \ncv2.imwrite(\"exampler.png\",img)\n     # Here mandatory options are example.svs and magnification, and outputpath \nExtractingpatches.extractingPatches(example.svs, outputpath, magnification)\n</pre>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e4a4bc330f7a947d8af8b7ff80d271c6e31cf840/68747470733a2f2f70617065722d6174746163686d656e74732e64726f70626f782e636f6d2f735f464442343835323746413545434237424439433046463346453439453235433134373833433234353934454333464241303141433442443530343932303635325f313537353334313735393936335f4578616d706c652b496d6167652e504e47\"></p>\n\n          </div>"}, "last_serial": 6734058, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "48d1e675000d0cd903b49127be653c03", "sha256": "0fe3948113a06dfd4f1bfa27b39c08b0457267b4c5aff6b109c078b04811a187"}, "downloads": -1, "filename": "PyHistopathology-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "48d1e675000d0cd903b49127be653c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16902, "upload_time": "2020-03-02T15:16:47", "upload_time_iso_8601": "2020-03-02T15:16:47.412111Z", "url": "https://files.pythonhosted.org/packages/e3/1b/0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7/PyHistopathology-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eba991d16473c2e1d42e9c306c81cbf", "sha256": "2ce8bdda710563853e9be628a555d1be8484380747e64f7dd767acff5aaef5c3"}, "downloads": -1, "filename": "PyHistopathology-0.1.tar.gz", "has_sig": false, "md5_digest": "3eba991d16473c2e1d42e9c306c81cbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4446, "upload_time": "2020-03-02T15:16:49", "upload_time_iso_8601": "2020-03-02T15:16:49.489606Z", "url": "https://files.pythonhosted.org/packages/2e/32/b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c/PyHistopathology-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48d1e675000d0cd903b49127be653c03", "sha256": "0fe3948113a06dfd4f1bfa27b39c08b0457267b4c5aff6b109c078b04811a187"}, "downloads": -1, "filename": "PyHistopathology-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "48d1e675000d0cd903b49127be653c03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16902, "upload_time": "2020-03-02T15:16:47", "upload_time_iso_8601": "2020-03-02T15:16:47.412111Z", "url": "https://files.pythonhosted.org/packages/e3/1b/0685c75802aa15320641f94981e886e1393fc5977fdb2614c66116cd9bc7/PyHistopathology-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3eba991d16473c2e1d42e9c306c81cbf", "sha256": "2ce8bdda710563853e9be628a555d1be8484380747e64f7dd767acff5aaef5c3"}, "downloads": -1, "filename": "PyHistopathology-0.1.tar.gz", "has_sig": false, "md5_digest": "3eba991d16473c2e1d42e9c306c81cbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4446, "upload_time": "2020-03-02T15:16:49", "upload_time_iso_8601": "2020-03-02T15:16:49.489606Z", "url": "https://files.pythonhosted.org/packages/2e/32/b3fdd19b5e04baab921ec5addcf3ec9af685452bfa422c82ce7ba8472b2c/PyHistopathology-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:23 2020"}