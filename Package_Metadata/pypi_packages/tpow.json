{"info": {"author": "Kenichi SHIRAKAWA", "author_email": "shirakawa.kenichi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Programming Language :: Python", "Topic :: Software Development :: Libraries", "Topic :: System :: Hardware :: Hardware Drivers"], "description": "**********************************************************\nTiny 1-wire utility. 100% pure python, USB9097 specific.\n**********************************************************\n\n    porvides\n    \n    * Minimal 1-wire protocols for USB9097.\n    * Basic rom search algorithm (use recursion).\n    \n    has dependencies and limitations\n    \n    * 100% pure python, requires ``pyserial`` to control UART.\n    * support external power mode only. parasite power mode is not supported.\n    * tested on Windows10 PC + USB9097 (1-wire adapter).\n    \nAdapters/Sensors/Devices\n========================\n    \n    * USB9097 (1-wire adater with Vcc supply, PCsensor.com ShenZhen/China)\n    * DS18B20, DS2438 (Dallas/Maxim)\n    * Humidity Sensor HIH-5030 + DS2438Z+ (TaaraLabs Estonia)\n    \nUsage\n======\n\nCheck ``examples/`` folder which contains some tests.\n``pip tpow`` will install it under ``Lib/site-packages/tpow``.\nIf you can not find ``examples/``, download source package ``*.tar.gz`` and check it.\n\n\nGet a ROMID (one 1-wire device on the bus)\n\n::\n\n    import tpow.usb9097\n    \n    bus = tpow.usb9097.USB9097('COM3')\n    bus.cmd_reset()        # 0xE3, 0xC1\n    bus.dat_write([0x33])  # read-rom  \n    ans = bus.dat_read(8) # little-endian (family + SN[6] + CRC)\n    print(['%02X'%ord(a) for a in reversed(ans)]) # big-endian\n\nGet all ROMID's (search all ROM's on the bus)\n\n::\n\n    import tpow.usb9097\n    \n    bus = tpow.usb9097.USB9097('COM3')\n    xx = tpow.usb9097.search_roms(bus)\n    for x in xx:\n        print(x)\n        \n\nGet temperature / ds18b20\n\n::\n\n    import tpow.usb9097\n    import tpow.device\n    import tpow.sensor\n    \n    bus = tpow.usb9097.USB9097('COM3')\n    \n    # do temperature conversion and get scratch-pad\n    spad = tpow.device.ds18b20_skip_rom(bus)\n    \n    # decode temperature\n    t = tpow.sensor.ds18b20_temp(spad)\n    \n    print(\"SPAD : \" + \" \".join(['%02X' % ord(a) for a in spad]))\n    print(\"%8.3f [degC]\" % t)\n    \n\n\nTodo\n====\n    * check temperature conversion completed status.\n      (currently, wait 1 sec for each temperature conversion)\n    * check operation finished status bit.\n    * check CRC.\n    * refine data type of parameters (bytes, string, list of single bytes...)\n    \nLicense\n========\n    Copyright (c) 2018 Kenich SHIRAKAWA\n    This is licensed under MIT license.\n    See Licence.txt for more information.\n\n\nLinks\n======\n\n    `1-wire adapter USB9097 (PCsensor) <http://pcsensor.com/1-wire-series.html>`_\n\n    `Humidity Senosr (TaaraLabs) <https://taaralabs.eu/1-wire-humidity-temperature-sensor/>`_", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sken10/tpow", "keywords": "1-wire one-wire USB humidity temperature DS2480 DS18B20 DS2438", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "tpow", "package_url": "https://pypi.org/project/tpow/", "platform": "", "project_url": "https://pypi.org/project/tpow/", "project_urls": {"Homepage": "https://github.com/sken10/tpow"}, "release_url": "https://pypi.org/project/tpow/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Tiny 1-wire utility. 100% pure python, USB9097 specific.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n<p>porvides</p>\n<ul>\n<li>Minimal 1-wire protocols for USB9097.</li>\n<li>Basic rom search algorithm (use recursion).</li>\n</ul>\n<p>has dependencies and limitations</p>\n<ul>\n<li>100% pure python, requires <tt>pyserial</tt> to control UART.</li>\n<li>support external power mode only. parasite power mode is not supported.</li>\n<li>tested on Windows10 PC + USB9097 (1-wire adapter).</li>\n</ul>\n</blockquote>\n<div id=\"adapters-sensors-devices\">\n<h2>Adapters/Sensors/Devices</h2>\n<blockquote>\n<ul>\n<li>USB9097 (1-wire adater with Vcc supply, PCsensor.com ShenZhen/China)</li>\n<li>DS18B20, DS2438 (Dallas/Maxim)</li>\n<li>Humidity Sensor HIH-5030 + DS2438Z+ (TaaraLabs Estonia)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>Check <tt>examples/</tt> folder which contains some tests.\n<tt>pip tpow</tt> will install it under <tt><span class=\"pre\">Lib/site-packages/tpow</span></tt>.\nIf you can not find <tt>examples/</tt>, download source package <tt>*.tar.gz</tt> and check it.</p>\n<p>Get a ROMID (one 1-wire device on the bus)</p>\n<pre>import tpow.usb9097\n\nbus = tpow.usb9097.USB9097('COM3')\nbus.cmd_reset()        # 0xE3, 0xC1\nbus.dat_write([0x33])  # read-rom\nans = bus.dat_read(8) # little-endian (family + SN[6] + CRC)\nprint(['%02X'%ord(a) for a in reversed(ans)]) # big-endian\n</pre>\n<p>Get all ROMID\u2019s (search all ROM\u2019s on the bus)</p>\n<pre>import tpow.usb9097\n\nbus = tpow.usb9097.USB9097('COM3')\nxx = tpow.usb9097.search_roms(bus)\nfor x in xx:\n    print(x)\n</pre>\n<p>Get temperature / ds18b20</p>\n<pre>import tpow.usb9097\nimport tpow.device\nimport tpow.sensor\n\nbus = tpow.usb9097.USB9097('COM3')\n\n# do temperature conversion and get scratch-pad\nspad = tpow.device.ds18b20_skip_rom(bus)\n\n# decode temperature\nt = tpow.sensor.ds18b20_temp(spad)\n\nprint(\"SPAD : \" + \" \".join(['%02X' % ord(a) for a in spad]))\nprint(\"%8.3f [degC]\" % t)\n</pre>\n</div>\n<div id=\"todo\">\n<h2>Todo</h2>\n<blockquote>\n<ul>\n<li>check temperature conversion completed status.\n(currently, wait 1 sec for each temperature conversion)</li>\n<li>check operation finished status bit.</li>\n<li>check CRC.</li>\n<li>refine data type of parameters (bytes, string, list of single bytes\u2026)</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<blockquote>\nCopyright (c) 2018 Kenich SHIRAKAWA\nThis is licensed under MIT license.\nSee Licence.txt for more information.</blockquote>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<blockquote>\n<p><a href=\"http://pcsensor.com/1-wire-series.html\" rel=\"nofollow\">1-wire adapter USB9097 (PCsensor)</a></p>\n<p><a href=\"https://taaralabs.eu/1-wire-humidity-temperature-sensor/\" rel=\"nofollow\">Humidity Senosr (TaaraLabs)</a></p>\n</blockquote>\n</div>\n\n          </div>"}, "last_serial": 3513185, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "6b218d0db8151b84b3da4ae932d2440a", "sha256": "bc0a835cdf0c3cd9ca52de2966734ddb84ea3f6b452f0a0b25360226bbcdda2a"}, "downloads": -1, "filename": "tpow-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6b218d0db8151b84b3da4ae932d2440a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6731, "upload_time": "2018-01-23T06:55:22", "upload_time_iso_8601": "2018-01-23T06:55:22.453956Z", "url": "https://files.pythonhosted.org/packages/bf/8f/dc63b5476fc2a6e1d48aa1db01bd5a91f1c36791f43c6978675be532151e/tpow-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b218d0db8151b84b3da4ae932d2440a", "sha256": "bc0a835cdf0c3cd9ca52de2966734ddb84ea3f6b452f0a0b25360226bbcdda2a"}, "downloads": -1, "filename": "tpow-0.2.0.tar.gz", "has_sig": false, "md5_digest": "6b218d0db8151b84b3da4ae932d2440a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6731, "upload_time": "2018-01-23T06:55:22", "upload_time_iso_8601": "2018-01-23T06:55:22.453956Z", "url": "https://files.pythonhosted.org/packages/bf/8f/dc63b5476fc2a6e1d48aa1db01bd5a91f1c36791f43c6978675be532151e/tpow-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:12 2020"}