{"info": {"author": "Martin Riedel", "author_email": "web@riedel-it.de", "bugtrack_url": null, "classifiers": ["Environment :: Other Environment", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Home Automation", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "========================\nCarson Living Python API\n========================\n\n.. image:: https://badge.fury.io/py/carson-living.svg\n    :target: https://badge.fury.io/py/carson-living\n\n.. image:: https://travis-ci.org/rado0x54/python-carson-living.svg?branch=master\n    :target: https://travis-ci.org/rado0x54/python-carson-living\n\n.. image:: https://coveralls.io/repos/github/rado0x54/python-carson-living/badge.svg?branch=master\n    :target: https://coveralls.io/github/rado0x54/python-carson-living?branch=master\n\n.. image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n    :target: https://opensource.org/licenses/Apache-2.0\n\n.. image:: https://img.shields.io/pypi/pyversions/carson-living.svg\n    :target: https://pypi.python.org/pypi/carson-living\n\nPython Carson Living is a library written in Python that exposes the carson.live devices as Python objects.\n\nPlease note, that `Carson <https://carson.live>`_ does not provide an official API documentation, therefore this project\nis solely based on reverse engineering.\n\nGetting started\n---------------\nInstallation\n~~~~~~~~~~~~~\n\nCarson Living Python should work against **Python 2.x >= 2.7** and **Python 3.x >= 3.5**.\n\n.. code-block::\n\n    # Installing from PyPi\n    $ pip install carson_living\n\n    # Installing latest development\n    $ pip install \\\n        git+https://github.com/rado0x54/python-carson-living@master\n\nInitialize a Carson API object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n.. code-block:: python\n\n    # Initializing an API object\n    carson = Carson(\"account@email.com\", 'your password')\n    print(carson.user)\n    # >> Martin\n    print(carson.token)\n    # >> ey...\n\nYou are also able to pass a valid JWT token during initialization which would prevent a login action as long as the token is valid:\n\n.. code-block:: python\n\n    # Initializing an API object with a valid token\n    carson = Carson(\"account@email.com\", 'your password', 'ey....')\n    print(carson.token)\n    # >> Martin\n\nSince Carson Living uses JWT token with very long validity, it is recommended to save the active token via\n``carson.token``, whenever one needs to reinitialize the API later on. The API library is robust to handle expired\nJWT tokens (and 401 handling), so no need to check before.\n\nCarson entities\n~~~~~~~~~~~~~~~\nThe library currently supports the following entities and actions.\n\n- User (``carson.user``): read\n- Building (``carson.buildings``): read\n- Doors (``building.doors``): read, open\n- Cameras (``building.cameras``): read, images, video\n\nDoor entities\n~~~~~~~~~~~~~\nDoors can be \"buzzed\" open via ``door.open()``\n\n.. code-block:: python\n\n    # Open all Unit Doors of Main Building\n    for door in carson.first_building.doors:\n        if door.is_unit_door:\n            print('Opening Unit Door {}'.format(door.name))\n            door.open()\n\nCamera entities\n~~~~~~~~~~~~~~~\nEagle Eye cameras can produce live images and videos but also allow access to passed recordings (see API). The API can download the image and video directly into a provided file object\nor just pass a generated url with an eagle_eye auth key ``A=c000....``. Please note, that the url can only be accessed as long as the ``auth_key`` is valid. Therefore it may make sense to\nforce the eagle eye api to refresh the auth key before generating a image or video url.\n\n- Directly save a live image:\n\n.. code-block:: python\n\n        for camera in building.cameras:\n            with open('image_{}.jpeg'.format(camera.entity_id), 'wb') as file:\n                camera.get_image(file)\n\n- Directly save a live video of 10s:\n\n.. code-block:: python\n\n        for camera in building.cameras:\n            with open('video_{}.flv'.format(camera.entity_id), 'wb') as file:\n                camera.get_video(file, timedelta(seconds=10))\n\n- Directly download a image from a timestamp:\n\n.. code-block:: python\n\n    three_hours_ago = datetime.utcnow() - timedelta(hours=3)\n    # download all images from 3 hours ago\n    for camera in building.cameras:\n        with open('image_{}.jpeg'.format(camera.entity_id), 'wb') as file:\n            camera.get_image(file, three_hours_ago)\n\n- Directly download a recorded video from a timestamp:\n\n.. code-block:: python\n\n        three_days_ago = datetime.utcnow() - timedelta(days=3)\n        # download all videos from 3 days ago\n        for cam in building.cameras:\n            with open('video_{}.flv'.format(cam.entity_id), 'wb') as file:\n                cam.get_video(file, timedelta(seconds=5), three_days_ago)\n\n- The Carson API is also able to produce authenticated URLs that can be handled externally.\n  Please not, that the ``auth_key`` has a limited lifetime. Therefore it makes sense to update\n  the ``auth_key`` manually before retrieving predefined URLs. Note, the Eagle Eye API in Carson\n  is associated with a building, so it is sufficient to update it once for all cameras in the same\n  building. The function signature of the the ``_url`` function is identical to the previous ones\n  (minus the file object).\n\n.. code-block:: python\n\n        # Update Session Auth Key of Eagle Eye once in a while if using\n        # generated authenticated URLs.\n        # Note, this is not needed for get_image() or get_video()\n        building.eagleeye_api.update_session_auth_key()\n        for cam in building.cameras:\n            img_url = cam.get_image_url(three_days_ago)\n            print(img_url)\n            # >> https://cXXX.eagleeyenetworks.com/asset/prev/image.jpeg?id=c0&timestamp=20200122211442.575&asset_class=pre&A=c000~...\n            response = requests.get(img_url)\n            with open('image_{}_with_url.jpeg'.format(cam.entity_id), 'wb') as file:\n                file.write(response.content)\n            # do only 1 cam.\n            break\n\nUse ``cam.get_video_url()`` the same way.\n\nCLI Tool\n~~~~~~~~\nCheckout ``./scripts/carsoncli.py`` for further API implementation examples.\n\nDevelopment Notes\n-----------------\nRequest Headers\n~~~~~~~~~~~~~~~\nThe library currently works with the following base headers:\n\n.. code-block::\n\n    User-Agent: Carson/1.0.171 (live.carson.app; build:245; iOS 13.1.0) Alamofire/1.0.171\n    X-Device-Type: ios\n    X-App-Version: 1.0.171(245)\n\nCode Documentation\n~~~~~~~~~~~~~~~~~~\nThe code follow the `Google Python Styleguide <https://google.github.io/styleguide/pyguide.html>`_ for docstring.\n\nGit Branching Strategy\n~~~~~~~~~~~~~~~~~~~~~~\nThis project uses `gitflow <https://nvie.com/posts/a-successful-git-branching-model/>`_ as a git branching model.\n\nOpen Items\n~~~~~~~~~~\nThe following is not supported by the API yet and remains TODO.\n\n- Expose visitor functionality (``/visitors``)\n- Expose thread / messaging functionality (``/threads``)\n- Expose delivery functionality (``/deliveries``)\n- Expose dashboard functionality (``/dashboard``)\n- Expose service functionality (``/service``)\n- Integrate Twilio (``twilio/access-token/``)\n- Expand and extract EagleEye API (into separate project?).\n\n\n\nLicense\n-------\n\npython-carson-living is released under the Apache License Version 2.0. See the LICENSE_ file for more\ndetails.\n\nCredits && Thanks\n-----------------\n\n* A lot of the project setup and the API object design was inspired / launched off  https://github.com/tchellomello/python-ring-doorbell. Saved me a lot of headaches with tox, setuptools and Travis!.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rado0x54/python-carson-living", "keywords": "carson living,virtual doorman,home automation", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "carson-living", "package_url": "https://pypi.org/project/carson-living/", "platform": "", "project_url": "https://pypi.org/project/carson-living/", "project_urls": {"Homepage": "https://github.com/rado0x54/python-carson-living"}, "release_url": "https://pypi.org/project/carson-living/0.0.4/", "requires_dist": ["requests", "pyjwt"], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "A Python library to communicate with Carson Living Residences (https://www.carson.live/)", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/carson-living\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/carson-living.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9cbd161b745b938cb9367f71d633c4e81f91a3d/68747470733a2f2f62616467652e667572792e696f2f70792f636172736f6e2d6c6976696e672e737667\"></a>\n<a href=\"https://travis-ci.org/rado0x54/python-carson-living\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/rado0x54/python-carson-living.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b9ba7eca4d3037d28fe6b7641b367adc4f2117b/68747470733a2f2f7472617669732d63692e6f72672f7261646f307835342f707974686f6e2d636172736f6e2d6c6976696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/rado0x54/python-carson-living?branch=master\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/rado0x54/python-carson-living/badge.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0dc6df39a4d0a2fed12da717822ec0211113feb0/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f7261646f307835342f707974686f6e2d636172736f6e2d6c6976696e672f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-Apache%202.0-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/carson-living\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/carson-living.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4eb10f6c196dff8f2d544a7b5ccba0f283da216f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f636172736f6e2d6c6976696e672e737667\"></a>\n<p>Python Carson Living is a library written in Python that exposes the carson.live devices as Python objects.</p>\n<p>Please note, that <a href=\"https://carson.live\" rel=\"nofollow\">Carson</a> does not provide an official API documentation, therefore this project\nis solely based on reverse engineering.</p>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Carson Living Python should work against <strong>Python 2.x &gt;= 2.7</strong> and <strong>Python 3.x &gt;= 3.5</strong>.</p>\n<pre># Installing from PyPi\n$ pip install carson_living\n\n# Installing latest development\n$ pip install \\\n    git+https://github.com/rado0x54/python-carson-living@master\n</pre>\n</div>\n<div id=\"initialize-a-carson-api-object\">\n<h3>Initialize a Carson API object</h3>\n<pre><span class=\"c1\"># Initializing an API object</span>\n<span class=\"n\">carson</span> <span class=\"o\">=</span> <span class=\"n\">Carson</span><span class=\"p\">(</span><span class=\"s2\">\"account@email.com\"</span><span class=\"p\">,</span> <span class=\"s1\">'your password'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">carson</span><span class=\"o\">.</span><span class=\"n\">user</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt; Martin</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">carson</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt; ey...</span>\n</pre>\n<p>You are also able to pass a valid JWT token during initialization which would prevent a login action as long as the token is valid:</p>\n<pre><span class=\"c1\"># Initializing an API object with a valid token</span>\n<span class=\"n\">carson</span> <span class=\"o\">=</span> <span class=\"n\">Carson</span><span class=\"p\">(</span><span class=\"s2\">\"account@email.com\"</span><span class=\"p\">,</span> <span class=\"s1\">'your password'</span><span class=\"p\">,</span> <span class=\"s1\">'ey....'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">carson</span><span class=\"o\">.</span><span class=\"n\">token</span><span class=\"p\">)</span>\n<span class=\"c1\"># &gt;&gt; Martin</span>\n</pre>\n<p>Since Carson Living uses JWT token with very long validity, it is recommended to save the active token via\n<tt>carson.token</tt>, whenever one needs to reinitialize the API later on. The API library is robust to handle expired\nJWT tokens (and 401 handling), so no need to check before.</p>\n</div>\n<div id=\"carson-entities\">\n<h3>Carson entities</h3>\n<p>The library currently supports the following entities and actions.</p>\n<ul>\n<li>User (<tt>carson.user</tt>): read</li>\n<li>Building (<tt>carson.buildings</tt>): read</li>\n<li>Doors (<tt>building.doors</tt>): read, open</li>\n<li>Cameras (<tt>building.cameras</tt>): read, images, video</li>\n</ul>\n</div>\n<div id=\"door-entities\">\n<h3>Door entities</h3>\n<p>Doors can be \u201cbuzzed\u201d open via <tt>door.open()</tt></p>\n<pre><span class=\"c1\"># Open all Unit Doors of Main Building</span>\n<span class=\"k\">for</span> <span class=\"n\">door</span> <span class=\"ow\">in</span> <span class=\"n\">carson</span><span class=\"o\">.</span><span class=\"n\">first_building</span><span class=\"o\">.</span><span class=\"n\">doors</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">door</span><span class=\"o\">.</span><span class=\"n\">is_unit_door</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Opening Unit Door </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">door</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"n\">door</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"camera-entities\">\n<h3>Camera entities</h3>\n<p>Eagle Eye cameras can produce live images and videos but also allow access to passed recordings (see API). The API can download the image and video directly into a provided file object\nor just pass a generated url with an eagle_eye auth key <tt><span class=\"pre\">A=c000....</span></tt>. Please note, that the url can only be accessed as long as the <tt>auth_key</tt> is valid. Therefore it may make sense to\nforce the eagle eye api to refresh the auth key before generating a image or video url.</p>\n<ul>\n<li>Directly save a live image:</li>\n</ul>\n<pre><span class=\"k\">for</span> <span class=\"n\">camera</span> <span class=\"ow\">in</span> <span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">cameras</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'image_</span><span class=\"si\">{}</span><span class=\"s1\">.jpeg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">entity_id</span><span class=\"p\">),</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Directly save a live video of 10s:</li>\n</ul>\n<pre><span class=\"k\">for</span> <span class=\"n\">camera</span> <span class=\"ow\">in</span> <span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">cameras</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'video_</span><span class=\"si\">{}</span><span class=\"s1\">.flv'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">entity_id</span><span class=\"p\">),</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">get_video</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n<ul>\n<li>Directly download a image from a timestamp:</li>\n</ul>\n<pre><span class=\"n\">three_hours_ago</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">hours</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\"># download all images from 3 hours ago</span>\n<span class=\"k\">for</span> <span class=\"n\">camera</span> <span class=\"ow\">in</span> <span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">cameras</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'image_</span><span class=\"si\">{}</span><span class=\"s1\">.jpeg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">entity_id</span><span class=\"p\">),</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">camera</span><span class=\"o\">.</span><span class=\"n\">get_image</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">three_hours_ago</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Directly download a recorded video from a timestamp:</li>\n</ul>\n<pre><span class=\"n\">three_days_ago</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">utcnow</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"c1\"># download all videos from 3 days ago</span>\n<span class=\"k\">for</span> <span class=\"n\">cam</span> <span class=\"ow\">in</span> <span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">cameras</span><span class=\"p\">:</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'video_</span><span class=\"si\">{}</span><span class=\"s1\">.flv'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">entity_id</span><span class=\"p\">),</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">get_video</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">seconds</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">),</span> <span class=\"n\">three_days_ago</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The Carson API is also able to produce authenticated URLs that can be handled externally.\nPlease not, that the <tt>auth_key</tt> has a limited lifetime. Therefore it makes sense to update\nthe <tt>auth_key</tt> manually before retrieving predefined URLs. Note, the Eagle Eye API in Carson\nis associated with a building, so it is sufficient to update it once for all cameras in the same\nbuilding. The function signature of the the <tt>_url</tt> function is identical to the previous ones\n(minus the file object).</li>\n</ul>\n<pre><span class=\"c1\"># Update Session Auth Key of Eagle Eye once in a while if using</span>\n<span class=\"c1\"># generated authenticated URLs.</span>\n<span class=\"c1\"># Note, this is not needed for get_image() or get_video()</span>\n<span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">eagleeye_api</span><span class=\"o\">.</span><span class=\"n\">update_session_auth_key</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">cam</span> <span class=\"ow\">in</span> <span class=\"n\">building</span><span class=\"o\">.</span><span class=\"n\">cameras</span><span class=\"p\">:</span>\n    <span class=\"n\">img_url</span> <span class=\"o\">=</span> <span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">get_image_url</span><span class=\"p\">(</span><span class=\"n\">three_days_ago</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">img_url</span><span class=\"p\">)</span>\n    <span class=\"c1\"># &gt;&gt; https://cXXX.eagleeyenetworks.com/asset/prev/image.jpeg?id=c0&amp;timestamp=20200122211442.575&amp;asset_class=pre&amp;A=c000~...</span>\n    <span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">img_url</span><span class=\"p\">)</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'image_</span><span class=\"si\">{}</span><span class=\"s1\">_with_url.jpeg'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cam</span><span class=\"o\">.</span><span class=\"n\">entity_id</span><span class=\"p\">),</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n        <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n    <span class=\"c1\"># do only 1 cam.</span>\n    <span class=\"k\">break</span>\n</pre>\n<p>Use <tt>cam.get_video_url()</tt> the same way.</p>\n</div>\n<div id=\"cli-tool\">\n<h3>CLI Tool</h3>\n<p>Checkout <tt>./scripts/carsoncli.py</tt> for further API implementation examples.</p>\n</div>\n</div>\n<div id=\"development-notes\">\n<h2>Development Notes</h2>\n<div id=\"request-headers\">\n<h3>Request Headers</h3>\n<p>The library currently works with the following base headers:</p>\n<pre>User-Agent: Carson/1.0.171 (live.carson.app; build:245; iOS 13.1.0) Alamofire/1.0.171\nX-Device-Type: ios\nX-App-Version: 1.0.171(245)\n</pre>\n</div>\n<div id=\"code-documentation\">\n<h3>Code Documentation</h3>\n<p>The code follow the <a href=\"https://google.github.io/styleguide/pyguide.html\" rel=\"nofollow\">Google Python Styleguide</a> for docstring.</p>\n</div>\n<div id=\"git-branching-strategy\">\n<h3>Git Branching Strategy</h3>\n<p>This project uses <a href=\"https://nvie.com/posts/a-successful-git-branching-model/\" rel=\"nofollow\">gitflow</a> as a git branching model.</p>\n</div>\n<div id=\"open-items\">\n<h3>Open Items</h3>\n<p>The following is not supported by the API yet and remains TODO.</p>\n<ul>\n<li>Expose visitor functionality (<tt>/visitors</tt>)</li>\n<li>Expose thread / messaging functionality (<tt>/threads</tt>)</li>\n<li>Expose delivery functionality (<tt>/deliveries</tt>)</li>\n<li>Expose dashboard functionality (<tt>/dashboard</tt>)</li>\n<li>Expose service functionality (<tt>/service</tt>)</li>\n<li>Integrate Twilio (<tt><span class=\"pre\">twilio/access-token/</span></tt>)</li>\n<li>Expand and extract EagleEye API (into separate project?).</li>\n</ul>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>python-carson-living is released under the Apache License Version 2.0. See the <a href=\"#license\" rel=\"nofollow\">LICENSE</a> file for more\ndetails.</p>\n</div>\n<div id=\"credits-thanks\">\n<h2>Credits &amp;&amp; Thanks</h2>\n<ul>\n<li>A lot of the project setup and the API object design was inspired / launched off  <a href=\"https://github.com/tchellomello/python-ring-doorbell\" rel=\"nofollow\">https://github.com/tchellomello/python-ring-doorbell</a>. Saved me a lot of headaches with tox, setuptools and Travis!.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6539139, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "75e3e4bf40006a7932e01e09ba2a4910", "sha256": "36be6a4657ce987e3703772daf37333695b367973e61fae015794f2fefe68343"}, "downloads": -1, "filename": "carson_living-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "75e3e4bf40006a7932e01e09ba2a4910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22032, "upload_time": "2020-01-25T16:30:31", "upload_time_iso_8601": "2020-01-25T16:30:31.739688Z", "url": "https://files.pythonhosted.org/packages/79/b9/ab5fa781257e9ce000f7c14536a1bc06ddd1fe99629adfa172dbcc0d048e/carson_living-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfb0bed0a8c50abf696f327555c51bc6", "sha256": "334a5cbc224f780804ab62a3e89ffa41abbbcc4a8186170cd3ac14146b3591b3"}, "downloads": -1, "filename": "carson_living-0.0.1.tar.gz", "has_sig": false, "md5_digest": "cfb0bed0a8c50abf696f327555c51bc6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16321, "upload_time": "2020-01-25T16:30:34", "upload_time_iso_8601": "2020-01-25T16:30:34.175095Z", "url": "https://files.pythonhosted.org/packages/3c/d3/459fafc2309da8d7d314aaee4fe794b21162d8674ccc5a546b2a8031d80c/carson_living-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "24968760120bf9a6be5b75acd80e5c12", "sha256": "c3447ce0f20d24af4b8386dce91c86e65e79131763aca2d8c43813db6617e803"}, "downloads": -1, "filename": "carson_living-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "24968760120bf9a6be5b75acd80e5c12", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22572, "upload_time": "2020-01-25T21:44:38", "upload_time_iso_8601": "2020-01-25T21:44:38.919019Z", "url": "https://files.pythonhosted.org/packages/72/d7/15a721854e391e073a4b1fd3941899e46bf2ba3c94f2645e30a9b4272f9d/carson_living-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4654b0c08dc6ab3e533e7afeccaa5e98", "sha256": "e72879edb1dad0093805bd9e14c0da6d0ab783ab8199dac91c6a9e9113fb679d"}, "downloads": -1, "filename": "carson_living-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4654b0c08dc6ab3e533e7afeccaa5e98", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22572, "upload_time": "2020-01-25T21:45:00", "upload_time_iso_8601": "2020-01-25T21:45:00.123742Z", "url": "https://files.pythonhosted.org/packages/5f/65/235df16b7be019aa9209c075be821b423aece16bef4b5744d8f2ba973cf6/carson_living-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e603654917488a77b9e08939da7e477f", "sha256": "2da2a4dda292841a480904926eabf9777b7652596e40befa53fcc49c8afe4993"}, "downloads": -1, "filename": "carson_living-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e603654917488a77b9e08939da7e477f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 16831, "upload_time": "2020-01-25T21:44:40", "upload_time_iso_8601": "2020-01-25T21:44:40.538374Z", "url": "https://files.pythonhosted.org/packages/62/88/61ab402dd109d46efa62a70529d3ae60b4e18927c6689e77f8864daa99d7/carson_living-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "be814114176e8974e4a2d13b3327c26e", "sha256": "d0e11776bea431acbec9e11ffe0c24d02880de3d3654a1d5f24067c357e70446"}, "downloads": -1, "filename": "carson_living-0.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "be814114176e8974e4a2d13b3327c26e", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22761, "upload_time": "2020-01-26T23:21:23", "upload_time_iso_8601": "2020-01-26T23:21:23.569617Z", "url": "https://files.pythonhosted.org/packages/1e/29/25e8095ab08c5a65f31f54a8d476e0222d2aa0d0f968b5ba981362d34247/carson_living-0.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d9ecc1624f74ab2680237ee5b9b1dbd", "sha256": "f26776b1a9a9e79a64294ea7ea4962a42858edc15d0a3933137041e226067529"}, "downloads": -1, "filename": "carson_living-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0d9ecc1624f74ab2680237ee5b9b1dbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 22757, "upload_time": "2020-01-26T23:21:47", "upload_time_iso_8601": "2020-01-26T23:21:47.135904Z", "url": "https://files.pythonhosted.org/packages/5f/e1/4cc12dc5a30f076dbdfcd940a58526aa1d1f147f19643555dc244a008697/carson_living-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f32b544af904f2736cfefee1e1617cb7", "sha256": "dc80b0497a2f7d08053f9158d591a1dd1f290ae37536d5553342671ad0f35562"}, "downloads": -1, "filename": "carson_living-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f32b544af904f2736cfefee1e1617cb7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17009, "upload_time": "2020-01-26T23:21:25", "upload_time_iso_8601": "2020-01-26T23:21:25.283389Z", "url": "https://files.pythonhosted.org/packages/e7/56/aa60ae664657b57ece09ac2a4818f36659624133ee168f849dabdb70cf61/carson_living-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "23b017934d2f1354f3c474ae759bbf47", "sha256": "02e625e61e416f095045d2e83621a45f0a472b33c39366ba724f6bd49627814b"}, "downloads": -1, "filename": "carson_living-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "23b017934d2f1354f3c474ae759bbf47", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23251, "upload_time": "2020-01-29T17:18:53", "upload_time_iso_8601": "2020-01-29T17:18:53.217121Z", "url": "https://files.pythonhosted.org/packages/6f/39/7fbb72267ff065911ad35d0b4641a8f10fa03e19bdd31ad1c6c7768d1193/carson_living-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ea8258ea8cbbcb6d8d366965e32b497", "sha256": "70091456c792f7bdf3b22a4571d4b287d15c5687b0ea4421eefccffc323a7de5"}, "downloads": -1, "filename": "carson_living-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5ea8258ea8cbbcb6d8d366965e32b497", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23252, "upload_time": "2020-01-29T17:19:24", "upload_time_iso_8601": "2020-01-29T17:19:24.825693Z", "url": "https://files.pythonhosted.org/packages/9a/ea/5a4d9a051623d799da2dc07a71ea5e4aaaae90af9ad23b609299e4559f52/carson_living-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "626ea4b06c7518d388412358d26b272b", "sha256": "1d1e6d6e003ac73145072f3d57860a699ff9529b4e53cb45d153e7a40df05f9e"}, "downloads": -1, "filename": "carson_living-0.0.4.tar.gz", "has_sig": false, "md5_digest": "626ea4b06c7518d388412358d26b272b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17449, "upload_time": "2020-01-29T17:18:54", "upload_time_iso_8601": "2020-01-29T17:18:54.782654Z", "url": "https://files.pythonhosted.org/packages/95/91/b94425e6c6a9497fa1a1ae34fd842d4037aa8f723e0475a2a41860751077/carson_living-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "23b017934d2f1354f3c474ae759bbf47", "sha256": "02e625e61e416f095045d2e83621a45f0a472b33c39366ba724f6bd49627814b"}, "downloads": -1, "filename": "carson_living-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "23b017934d2f1354f3c474ae759bbf47", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23251, "upload_time": "2020-01-29T17:18:53", "upload_time_iso_8601": "2020-01-29T17:18:53.217121Z", "url": "https://files.pythonhosted.org/packages/6f/39/7fbb72267ff065911ad35d0b4641a8f10fa03e19bdd31ad1c6c7768d1193/carson_living-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ea8258ea8cbbcb6d8d366965e32b497", "sha256": "70091456c792f7bdf3b22a4571d4b287d15c5687b0ea4421eefccffc323a7de5"}, "downloads": -1, "filename": "carson_living-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "5ea8258ea8cbbcb6d8d366965e32b497", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 23252, "upload_time": "2020-01-29T17:19:24", "upload_time_iso_8601": "2020-01-29T17:19:24.825693Z", "url": "https://files.pythonhosted.org/packages/9a/ea/5a4d9a051623d799da2dc07a71ea5e4aaaae90af9ad23b609299e4559f52/carson_living-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "626ea4b06c7518d388412358d26b272b", "sha256": "1d1e6d6e003ac73145072f3d57860a699ff9529b4e53cb45d153e7a40df05f9e"}, "downloads": -1, "filename": "carson_living-0.0.4.tar.gz", "has_sig": false, "md5_digest": "626ea4b06c7518d388412358d26b272b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 17449, "upload_time": "2020-01-29T17:18:54", "upload_time_iso_8601": "2020-01-29T17:18:54.782654Z", "url": "https://files.pythonhosted.org/packages/95/91/b94425e6c6a9497fa1a1ae34fd842d4037aa8f723e0475a2a41860751077/carson_living-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:23 2020"}