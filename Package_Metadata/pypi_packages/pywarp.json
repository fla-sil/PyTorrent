{"info": {"author": "Andrey Kislyuk", "author_email": "kislyuk@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "PyWARP: Python Web Authentication Relying Party library\n=======================================================\n\n**PyWARP** is an implementation of the W3C `WebAuthn <https://www.w3.org/TR/webauthn/>`_ standard's Relying Party\ncomponent in Python. The WebAuthn standard is used to provide advanced authentication security for two-factor,\nmultifactor and passwordless authentication models through the use of dedicated hardware security keys and biometric\ndevices such as `Yubico YubiKey <https://www.yubico.com/>`_,\n`Google Titan <https://store.google.com/us/product/titan_security_key_kit>`_,\n`TPM <https://en.wikipedia.org/wiki/Trusted_Platform_Module>`_, and\n`Touch ID <https://en.wikipedia.org/wiki/Touch_ID>`_.\n\nCompared to more basic two-factor standards like HOTP (`RFC 4226 <https://tools.ietf.org/html/rfc4226>`_) and TOTP\n(`RFC 6238 <https://tools.ietf.org/html/rfc6238>`_), the\n`FIDO U2F <https://en.wikipedia.org/wiki/Universal_2nd_Factor>`_ profile of WebAuthn uses asymmetric cryptography to\navoid using a shared secret design, which strengthens your authentication solution against server-side attacks. Hardware\nU2F also sequesters the client secret in a dedicated single-purpose device, which strengthens your clients against\nclient-side attacks. And by automating scoping of credentials to relying party IDs (application origin/domain names),\nU2F adds protection against phishing attacks.\n\nPyWARP implements the *Relying Party* component of WebAuthn. A Relying Party is a server-side application that instructs\nthe browser (user agent) to use WebAuthn APIs to authenticate its users.\n\nTo see an example of PyWARP in action, check the ``examples`` directory. Two demos are included: an\n`AWS Chalice <https://github.com/aws/chalice>`_ app and a `Flask <https://github.com/pallets/flask>`_ app.\n\nIn addition to reading the `WebAuthn standard <https://www.w3.org/TR/webauthn/>`_, we recommend that implementers read\nthe `OWASP Authentication Cheat Sheet <https://www.owasp.org/index.php/Authentication_Cheat_Sheet>`_ and\n`NIST SP 800-63-3: Digital Authentication Guideline <https://pages.nist.gov/800-63-3/>`_ for a high level overview of\nauthentication best practices.\n\nInstallation\n------------\n::\n\n    pip install pywarp\n\nPyWARP depends on `cryptography <https://github.com/pyca/cryptography>`_, which in turn requires OpenSSL and CFFI.\n\nSynopsis\n--------\n\n.. code-block:: python\n\n    from pywarp import RelyingPartyManager, Credential\n    from pywarp.backends import DynamoBackend  # This is an example. See \"storage backends\" below for other databases.\n\n    rp_id = \"myapp.example.com\"  # This must match the origin domain of your app, as seen by the browser.\n    rp = RelyingPartyManager(\"PyWARP demo\", rp_id=rp_id, credential_storage_backend=DynamoBackend())\n\n    # Get options for navigator.credentials.create() - pass these to your frontend when registering a user\n    rp.get_registration_options(email=str)\n\n    # Run the protocol in https://www.w3.org/TR/webauthn/#registering-a-new-credential,\n    # then call the credential storage backend to store the credential public key.\n    rp.register(attestation_object=bytes, client_data_json=bytes, email=bytes)\n\n    # Get options for navigator.credentials.get() - pass these to your frontend when logging in a user\n    rp.get_authentication_options(email=str)\n\n    # Run the protocol in https://www.w3.org/TR/webauthn/#verifying-assertion,\n    # calling the credential storage backend to retrieve the credential public key.\n    # If no exception is raised, proceed with user login.\n    rp.verify(authenticator_data=bytes, client_data_json=bytes, signature=bytes, user_handle=bytes, raw_id=bytes,\n              email=bytes)\n\nSee `examples/chalice/app.py <examples/chalice/app.py>`_ and\n`examples/chalice/chalicelib/index.html <examples/chalice/chalicelib/index.html>`_ (frontend) for a complete example.\n\nStorage backends\n----------------\n\nYour application is presumably using an application server like uWSGI, a database backend like MySQL, PostgreSQL or\nMongoDB, and maybe a framework like Flask or Django to tie them together. PyWARP makes no assumptions about your\ndatabase, schema, or model. Instead, it provides an abstract class (``pywarp.backends.CredentialStorageBackend``)\nrepresenting an interface for storing and retrieving WebAuthn credential data for your users.\n\nTo deploy PyWARP, declare a subclass of ``CredentialStorageBackend``. In your subclass, implement bindings to your\ndatabase, then pass an instance of your subclass to ``pywarp.RelyingPartyManager(credential_storage_backend=...)``:\n\n.. code-block:: python\n\n    class CredentialStorageBackend:\n        def __init__(self):\n            self.database_client = ...\n\n        def get_credential_by_email(self, email):\n            user_record = self.database_client.get(email)\n            return Credential(credential_id=user_record[\"cred_id\"],\n                              credential_public_key=user_record[\"cred_pub_key\"])\n\n        def save_credential_for_user(self, email, credential):\n            self.database_client.update(email, {\"cred_id\": credential.credential_id,\n                                                \"cred_pub_key\": bytes(credential.public_key)})\n\n        def save_challenge_for_user(self, email, challenge, type):\n            self.database_client.update(email, {type + \"challenge\": challenge})\n\n        def get_challenge_for_user(self, email, type):\n            user_record = self.database_client.get(email)\n            return user_record[type + \"challenge\"]\n\nExample: Chalice app\n--------------------\n\nThe Chalice app example (in the ``examples/chalice`` directory) can be deployed as an `AWS Lambda <TODO>`_ application\nwhen used with conventional AWS account credentials (configured via ``aws configure`` in the `AWS CLI <TODO>`_. This\nexample uses `DynamoDB <TODO>`_ as a storage backend.\n\nSee the `API documentation <https://pywarp.readthedocs.io>`_ for more.\n\nAuthors\n-------\n* Andrey Kislyuk\n\nLinks\n-----\n* `Project home page (GitHub) <https://github.com/pyauth/pywarp>`_\n* `Documentation (Read the Docs) <https://pywarp.readthedocs.io/en/latest/>`_\n* `Package distribution (PyPI) <https://pypi.python.org/pypi/pywarp>`_\n* `Change log <https://github.com/pyauth/pywarp/blob/master/Changes.rst>`_\n\nBugs\n----\nPlease report bugs, issues, feature requests, etc. on `GitHub <https://github.com/pyauth/pywarp/issues>`_.\n\nLicense\n-------\nLicensed under the terms of the `Apache License, Version 2.0 <http://www.apache.org/licenses/LICENSE-2.0>`_.\n\n.. image:: https://img.shields.io/travis/pyauth/pywarp.svg\n        :target: https://travis-ci.org/pyauth/pywarp\n.. image:: https://codecov.io/github/pyauth/pywarp/coverage.svg?branch=master\n        :target: https://codecov.io/github/pyauth/pywarp?branch=master\n.. image:: https://img.shields.io/pypi/v/pywarp.svg\n        :target: https://pypi.python.org/pypi/pywarp\n.. image:: https://img.shields.io/pypi/l/pywarp.svg\n        :target: https://pypi.python.org/pypi/pywarp\n.. image:: https://readthedocs.org/projects/pywarp/badge/?version=latest\n        :target: https://pywarp.readthedocs.io/\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pyauth/pywarp", "keywords": "", "license": "Apache Software License", "maintainer": "", "maintainer_email": "", "name": "pywarp", "package_url": "https://pypi.org/project/pywarp/", "platform": "", "project_url": "https://pypi.org/project/pywarp/", "project_urls": {"Homepage": "https://github.com/pyauth/pywarp"}, "release_url": "https://pypi.org/project/pywarp/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Python WebAuthn Relying Party library", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>PyWARP</strong> is an implementation of the W3C <a href=\"https://www.w3.org/TR/webauthn/\" rel=\"nofollow\">WebAuthn</a> standard\u2019s Relying Party\ncomponent in Python. The WebAuthn standard is used to provide advanced authentication security for two-factor,\nmultifactor and passwordless authentication models through the use of dedicated hardware security keys and biometric\ndevices such as <a href=\"https://www.yubico.com/\" rel=\"nofollow\">Yubico YubiKey</a>,\n<a href=\"https://store.google.com/us/product/titan_security_key_kit\" rel=\"nofollow\">Google Titan</a>,\n<a href=\"https://en.wikipedia.org/wiki/Trusted_Platform_Module\" rel=\"nofollow\">TPM</a>, and\n<a href=\"https://en.wikipedia.org/wiki/Touch_ID\" rel=\"nofollow\">Touch ID</a>.</p>\n<p>Compared to more basic two-factor standards like HOTP (<a href=\"https://tools.ietf.org/html/rfc4226\" rel=\"nofollow\">RFC 4226</a>) and TOTP\n(<a href=\"https://tools.ietf.org/html/rfc6238\" rel=\"nofollow\">RFC 6238</a>), the\n<a href=\"https://en.wikipedia.org/wiki/Universal_2nd_Factor\" rel=\"nofollow\">FIDO U2F</a> profile of WebAuthn uses asymmetric cryptography to\navoid using a shared secret design, which strengthens your authentication solution against server-side attacks. Hardware\nU2F also sequesters the client secret in a dedicated single-purpose device, which strengthens your clients against\nclient-side attacks. And by automating scoping of credentials to relying party IDs (application origin/domain names),\nU2F adds protection against phishing attacks.</p>\n<p>PyWARP implements the <em>Relying Party</em> component of WebAuthn. A Relying Party is a server-side application that instructs\nthe browser (user agent) to use WebAuthn APIs to authenticate its users.</p>\n<p>To see an example of PyWARP in action, check the <tt>examples</tt> directory. Two demos are included: an\n<a href=\"https://github.com/aws/chalice\" rel=\"nofollow\">AWS Chalice</a> app and a <a href=\"https://github.com/pallets/flask\" rel=\"nofollow\">Flask</a> app.</p>\n<p>In addition to reading the <a href=\"https://www.w3.org/TR/webauthn/\" rel=\"nofollow\">WebAuthn standard</a>, we recommend that implementers read\nthe <a href=\"https://www.owasp.org/index.php/Authentication_Cheat_Sheet\" rel=\"nofollow\">OWASP Authentication Cheat Sheet</a> and\n<a href=\"https://pages.nist.gov/800-63-3/\" rel=\"nofollow\">NIST SP 800-63-3: Digital Authentication Guideline</a> for a high level overview of\nauthentication best practices.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pywarp\n</pre>\n<p>PyWARP depends on <a href=\"https://github.com/pyca/cryptography\" rel=\"nofollow\">cryptography</a>, which in turn requires OpenSSL and CFFI.</p>\n</div>\n<div id=\"synopsis\">\n<h2>Synopsis</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pywarp</span> <span class=\"kn\">import</span> <span class=\"n\">RelyingPartyManager</span><span class=\"p\">,</span> <span class=\"n\">Credential</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pywarp.backends</span> <span class=\"kn\">import</span> <span class=\"n\">DynamoBackend</span>  <span class=\"c1\"># This is an example. See \"storage backends\" below for other databases.</span>\n\n<span class=\"n\">rp_id</span> <span class=\"o\">=</span> <span class=\"s2\">\"myapp.example.com\"</span>  <span class=\"c1\"># This must match the origin domain of your app, as seen by the browser.</span>\n<span class=\"n\">rp</span> <span class=\"o\">=</span> <span class=\"n\">RelyingPartyManager</span><span class=\"p\">(</span><span class=\"s2\">\"PyWARP demo\"</span><span class=\"p\">,</span> <span class=\"n\">rp_id</span><span class=\"o\">=</span><span class=\"n\">rp_id</span><span class=\"p\">,</span> <span class=\"n\">credential_storage_backend</span><span class=\"o\">=</span><span class=\"n\">DynamoBackend</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Get options for navigator.credentials.create() - pass these to your frontend when registering a user</span>\n<span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">get_registration_options</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the protocol in https://www.w3.org/TR/webauthn/#registering-a-new-credential,</span>\n<span class=\"c1\"># then call the credential storage backend to store the credential public key.</span>\n<span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">attestation_object</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">client_data_json</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get options for navigator.credentials.get() - pass these to your frontend when logging in a user</span>\n<span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">get_authentication_options</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the protocol in https://www.w3.org/TR/webauthn/#verifying-assertion,</span>\n<span class=\"c1\"># calling the credential storage backend to retrieve the credential public key.</span>\n<span class=\"c1\"># If no exception is raised, proceed with user login.</span>\n<span class=\"n\">rp</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">authenticator_data</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">client_data_json</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">signature</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">user_handle</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span> <span class=\"n\">raw_id</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">,</span>\n          <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"nb\">bytes</span><span class=\"p\">)</span>\n</pre>\n<p>See <a href=\"examples/chalice/app.py\" rel=\"nofollow\">examples/chalice/app.py</a> and\n<a href=\"examples/chalice/chalicelib/index.html\" rel=\"nofollow\">examples/chalice/chalicelib/index.html</a> (frontend) for a complete example.</p>\n</div>\n<div id=\"storage-backends\">\n<h2>Storage backends</h2>\n<p>Your application is presumably using an application server like uWSGI, a database backend like MySQL, PostgreSQL or\nMongoDB, and maybe a framework like Flask or Django to tie them together. PyWARP makes no assumptions about your\ndatabase, schema, or model. Instead, it provides an abstract class (<tt>pywarp.backends.CredentialStorageBackend</tt>)\nrepresenting an interface for storing and retrieving WebAuthn credential data for your users.</p>\n<p>To deploy PyWARP, declare a subclass of <tt>CredentialStorageBackend</tt>. In your subclass, implement bindings to your\ndatabase, then pass an instance of your subclass to <tt><span class=\"pre\">pywarp.RelyingPartyManager(credential_storage_backend=...)</span></tt>:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CredentialStorageBackend</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_client</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_credential_by_email</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">):</span>\n        <span class=\"n\">user_record</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">Credential</span><span class=\"p\">(</span><span class=\"n\">credential_id</span><span class=\"o\">=</span><span class=\"n\">user_record</span><span class=\"p\">[</span><span class=\"s2\">\"cred_id\"</span><span class=\"p\">],</span>\n                          <span class=\"n\">credential_public_key</span><span class=\"o\">=</span><span class=\"n\">user_record</span><span class=\"p\">[</span><span class=\"s2\">\"cred_pub_key\"</span><span class=\"p\">])</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save_credential_for_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">credential</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_client</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"cred_id\"</span><span class=\"p\">:</span> <span class=\"n\">credential</span><span class=\"o\">.</span><span class=\"n\">credential_id</span><span class=\"p\">,</span>\n                                            <span class=\"s2\">\"cred_pub_key\"</span><span class=\"p\">:</span> <span class=\"nb\">bytes</span><span class=\"p\">(</span><span class=\"n\">credential</span><span class=\"o\">.</span><span class=\"n\">public_key</span><span class=\"p\">)})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save_challenge_for_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"n\">challenge</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_client</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"nb\">type</span> <span class=\"o\">+</span> <span class=\"s2\">\"challenge\"</span><span class=\"p\">:</span> <span class=\"n\">challenge</span><span class=\"p\">})</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_challenge_for_user</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">email</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">):</span>\n        <span class=\"n\">user_record</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">database_client</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">user_record</span><span class=\"p\">[</span><span class=\"nb\">type</span> <span class=\"o\">+</span> <span class=\"s2\">\"challenge\"</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"example-chalice-app\">\n<h2>Example: Chalice app</h2>\n<p>The Chalice app example (in the <tt>examples/chalice</tt> directory) can be deployed as an <a href=\"TODO\" rel=\"nofollow\">AWS Lambda</a> application\nwhen used with conventional AWS account credentials (configured via <tt>aws configure</tt> in the <a href=\"TODO\" rel=\"nofollow\">AWS CLI</a>. This\nexample uses <a href=\"TODO\" rel=\"nofollow\">DynamoDB</a> as a storage backend.</p>\n<p>See the <a href=\"https://pywarp.readthedocs.io\" rel=\"nofollow\">API documentation</a> for more.</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<ul>\n<li>Andrey Kislyuk</li>\n</ul>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://github.com/pyauth/pywarp\" rel=\"nofollow\">Project home page (GitHub)</a></li>\n<li><a href=\"https://pywarp.readthedocs.io/en/latest/\" rel=\"nofollow\">Documentation (Read the Docs)</a></li>\n<li><a href=\"https://pypi.python.org/pypi/pywarp\" rel=\"nofollow\">Package distribution (PyPI)</a></li>\n<li><a href=\"https://github.com/pyauth/pywarp/blob/master/Changes.rst\" rel=\"nofollow\">Change log</a></li>\n</ul>\n</div>\n<div id=\"bugs\">\n<h2>Bugs</h2>\n<p>Please report bugs, issues, feature requests, etc. on <a href=\"https://github.com/pyauth/pywarp/issues\" rel=\"nofollow\">GitHub</a>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Licensed under the terms of the <a href=\"http://www.apache.org/licenses/LICENSE-2.0\" rel=\"nofollow\">Apache License, Version 2.0</a>.</p>\n<a href=\"https://travis-ci.org/pyauth/pywarp\" rel=\"nofollow\"><img alt=\"https://img.shields.io/travis/pyauth/pywarp.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02d78cc2ab4a9f844a863c39fbec669bd6191596/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f7079617574682f7079776172702e737667\"></a>\n<a href=\"https://codecov.io/github/pyauth/pywarp?branch=master\" rel=\"nofollow\"><img alt=\"https://codecov.io/github/pyauth/pywarp/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/527138389226784a1a72924af176a7d35492e6d7/68747470733a2f2f636f6465636f762e696f2f6769746875622f7079617574682f7079776172702f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/pywarp\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/pywarp.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/18db30ec5123189490c411f27731831b0775c240/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079776172702e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/pywarp\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/l/pywarp.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e966a95e3384618dad24a199d6b4a8b55194895/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7079776172702e737667\"></a>\n<a href=\"https://pywarp.readthedocs.io/\" rel=\"nofollow\"><img alt=\"https://readthedocs.org/projects/pywarp/badge/?version=latest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2cf22aa7df32a7355311dd438f4300a77c2dd27/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079776172702f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n</div>\n\n          </div>"}, "last_serial": 4654374, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e7b8b9c8a4b098059db661b19c364008", "sha256": "ef852601de2828f7823ef6645de44274b8cefabb8ea8e9e974bb8c7d4be62545"}, "downloads": -1, "filename": "pywarp-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e7b8b9c8a4b098059db661b19c364008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1239, "upload_time": "2018-11-08T01:10:29", "upload_time_iso_8601": "2018-11-08T01:10:29.436643Z", "url": "https://files.pythonhosted.org/packages/d6/76/e5f91cb1089b23c73e04a8ee0791958216d8f2fff435a1739d743b285720/pywarp-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b802587f79914678aa16b98ac3a3f6e1", "sha256": "901a14451c13bf80b3b731434271b8b08a19d33f54dab2dd0b5b186c9222d2c4"}, "downloads": -1, "filename": "pywarp-0.0.2.tar.gz", "has_sig": false, "md5_digest": "b802587f79914678aa16b98ac3a3f6e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7132, "upload_time": "2019-01-01T08:08:04", "upload_time_iso_8601": "2019-01-01T08:08:04.539850Z", "url": "https://files.pythonhosted.org/packages/7b/90/d6259e9c556af44a6791422bc7d0e7cae7a3d0c725080911138828f0d0e1/pywarp-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5b4e76b3a402ee453bed6ae2725bbec7", "sha256": "da5bc50307e1cd9b055cde1c3a1f67a42ff3e61854b0c1792ddbcfd7d8b11479"}, "downloads": -1, "filename": "pywarp-0.0.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5b4e76b3a402ee453bed6ae2725bbec7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10551, "upload_time": "2019-01-02T22:30:22", "upload_time_iso_8601": "2019-01-02T22:30:22.504713Z", "url": "https://files.pythonhosted.org/packages/08/df/25c2143a0566f0be50c5caf910d8cef52c951eefa7e7f0c86e84d95e3c11/pywarp-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "313a79a620491d0b57e56625c8a1786c", "sha256": "bda9312cdb3fa2d19d10cead6764a716f803ee77eb2cf15fc1f08c8c3902ca05"}, "downloads": -1, "filename": "pywarp-0.0.4.tar.gz", "has_sig": true, "md5_digest": "313a79a620491d0b57e56625c8a1786c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11665, "upload_time": "2019-01-02T22:30:20", "upload_time_iso_8601": "2019-01-02T22:30:20.003982Z", "url": "https://files.pythonhosted.org/packages/96/2d/fbb95b3c0c7e26a6df730555736c9f7c08c86d3d069d48ff374bcd155e7f/pywarp-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5b4e76b3a402ee453bed6ae2725bbec7", "sha256": "da5bc50307e1cd9b055cde1c3a1f67a42ff3e61854b0c1792ddbcfd7d8b11479"}, "downloads": -1, "filename": "pywarp-0.0.4-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5b4e76b3a402ee453bed6ae2725bbec7", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10551, "upload_time": "2019-01-02T22:30:22", "upload_time_iso_8601": "2019-01-02T22:30:22.504713Z", "url": "https://files.pythonhosted.org/packages/08/df/25c2143a0566f0be50c5caf910d8cef52c951eefa7e7f0c86e84d95e3c11/pywarp-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "313a79a620491d0b57e56625c8a1786c", "sha256": "bda9312cdb3fa2d19d10cead6764a716f803ee77eb2cf15fc1f08c8c3902ca05"}, "downloads": -1, "filename": "pywarp-0.0.4.tar.gz", "has_sig": true, "md5_digest": "313a79a620491d0b57e56625c8a1786c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11665, "upload_time": "2019-01-02T22:30:20", "upload_time_iso_8601": "2019-01-02T22:30:20.003982Z", "url": "https://files.pythonhosted.org/packages/96/2d/fbb95b3c0c7e26a6df730555736c9f7c08c86d3d069d48ff374bcd155e7f/pywarp-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:42 2020"}