{"info": {"author": "Liu Changyu", "author_email": "liuchangyu1111@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "\n# WassersteinGAN-PyTorch\n\n### Update (Feb 21, 2020)\n\nThe mnist and fmnist models are now available. Their usage is identical to the other models: \n```python\nfrom wgan_pytorch import Generator\nmodel = Generator.from_pretrained('g-mnist') \n```\n\n### Overview\nThis repository contains an op-for-op PyTorch reimplementation of [Wasserstein GAN](http://xxx.itp.ac.cn/pdf/1701.07875).\n\nThe goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.  \n\nAt the moment, you can easily:  \n * Load pretrained Generate models \n * Use Generate models for extended dataset\n\n_Upcoming features_: In the next few days, you will be able to:\n * Quickly finetune an Generate on your own dataset\n * Export Generate models for production\n\n### Table of contents\n1. [About Wasserstein GAN](#about-wasserstein-gan)\n2. [Model Description](#model-description)\n3. [Installation](#installation)\n4. [Usage](#usage)\n    * [Load pretrained models](#loading-pretrained-models)\n    * [Example: Extended dataset](#example-extended-dataset)\n    * [Example: Visual](#example-visual)\n5. [Contributing](#contributing) \n\n### About Wasserstein GAN\n\nIf you're new to Wasserstein GAN, here's an abstract straight from the paper:\n\nWe introduce a new algorithm named WGAN, an alternative to traditional GAN training. In this new model, we show that we can improve the stability of learning, get rid of problems like mode collapse, and provide meaningful learning curves useful for debugging and hyperparameter searches. Furthermore, we show that the corresponding optimization problem is sound, and provide extensive theoretical work highlighting the deep connections to other distances between distributions.\n### Model Description\n\nWe have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. It receives a random noise z and generates images from this noise, which is called G(z).Discriminator is a discriminant network that discriminates whether an image is real. The input is x, x is a picture, and the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, and if it's 0, it's not real.\n\n### Installation\n\nInstall from pypi:\n```bash\npip install wgan_pytorch\n```\n\nInstall from source:\n```bash\ngit clone https://github.com/Lornatang/WassersteinGAN-PyTorch.git\ncd WassersteinGAN-PyTorch\npip install -e .\n``` \n\n### Usage\n\n#### Loading pretrained models\n\nLoad an Wasserstein GAN:\n```python\nfrom wgan_pytorch import Generator\nmodel = Generator.from_name(\"g-mnist\")\n```\n\nLoad a pretrained Wasserstein GAN:\n```python\nfrom wgan_pytorch import Generator\nmodel = Generator.from_pretrained(\"g-mnist\")\n```\n\n#### Example: Extended dataset\n\nAs mentioned in the example, if you load the pre-trained weights of the MNIST dataset, it will create a new `imgs` directory and generate 64 random images in the `imgs` directory.\n\n```python\nimport os\nimport torch\nimport torchvision.utils as vutils\nfrom wgan_pytorch import Generator\n\ndevice = torch.device(\"cuda:0\" if torch.cuda.is_available() else \"cpu\")\n\nmodel = Generator.from_pretrained(\"g-mnist\")\nmodel.to(device)\n# switch to evaluate mode\nmodel.eval()\n\ntry:\n    os.makedirs(\"./imgs\")\nexcept OSError:\n    pass\n\nwith torch.no_grad():\n    for i in range(64):\n        noise = torch.randn(64, 100, device=device)\n        fake = model(noise)\n        vutils.save_image(fake.detach(), f\"./imgs/fake_{i:04d}.png\", normalize=True)\n    print(\"The fake image has been generated!\")\n```\n\n#### Example: Visual\n\n```text\ncd $REPO$/framework\nsh start.sh\n```\n\nThen open the browser and type in the browser address [http://127.0.0.1:10002/](http://127.0.0.1:10002/).\nEnjoy it.\n\n### Contributing\n\nIf you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.   \n\nI look forward to seeing what the community does with these models! \n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lornatang/WassersteinGAN-PyTorch", "keywords": "", "license": "Apache", "maintainer": "", "maintainer_email": "", "name": "wgan-pytorch", "package_url": "https://pypi.org/project/wgan-pytorch/", "platform": "", "project_url": "https://pypi.org/project/wgan-pytorch/", "project_urls": {"Homepage": "https://github.com/Lornatang/WassersteinGAN-PyTorch"}, "release_url": "https://pypi.org/project/wgan-pytorch/0.1.2/", "requires_dist": ["torch"], "requires_python": ">=3.5.0", "summary": "This is a new alogorithm named WGAN, an alternative to traditional GAN training!", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>WassersteinGAN-PyTorch</h1>\n<h3>Update (Feb 21, 2020)</h3>\n<p>The mnist and fmnist models are now available. Their usage is identical to the other models:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wgan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s1\">'g-mnist'</span><span class=\"p\">)</span> \n</pre>\n<h3>Overview</h3>\n<p>This repository contains an op-for-op PyTorch reimplementation of <a href=\"http://xxx.itp.ac.cn/pdf/1701.07875\" rel=\"nofollow\">Wasserstein GAN</a>.</p>\n<p>The goal of this implementation is to be simple, highly extensible, and easy to integrate into your own projects. This implementation is a work in progress -- new features are currently being implemented.</p>\n<p>At the moment, you can easily:</p>\n<ul>\n<li>Load pretrained Generate models</li>\n<li>Use Generate models for extended dataset</li>\n</ul>\n<p><em>Upcoming features</em>: In the next few days, you will be able to:</p>\n<ul>\n<li>Quickly finetune an Generate on your own dataset</li>\n<li>Export Generate models for production</li>\n</ul>\n<h3>Table of contents</h3>\n<ol>\n<li><a href=\"#about-wasserstein-gan\" rel=\"nofollow\">About Wasserstein GAN</a></li>\n<li><a href=\"#model-description\" rel=\"nofollow\">Model Description</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#loading-pretrained-models\" rel=\"nofollow\">Load pretrained models</a></li>\n<li><a href=\"#example-extended-dataset\" rel=\"nofollow\">Example: Extended dataset</a></li>\n<li><a href=\"#example-visual\" rel=\"nofollow\">Example: Visual</a></li>\n</ul>\n</li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n</ol>\n<h3>About Wasserstein GAN</h3>\n<p>If you're new to Wasserstein GAN, here's an abstract straight from the paper:</p>\n<p>We introduce a new algorithm named WGAN, an alternative to traditional GAN training. In this new model, we show that we can improve the stability of learning, get rid of problems like mode collapse, and provide meaningful learning curves useful for debugging and hyperparameter searches. Furthermore, we show that the corresponding optimization problem is sound, and provide extensive theoretical work highlighting the deep connections to other distances between distributions.</p>\n<h3>Model Description</h3>\n<p>We have two networks, G (Generator) and D (Discriminator).The Generator is a network for generating images. It receives a random noise z and generates images from this noise, which is called G(z).Discriminator is a discriminant network that discriminates whether an image is real. The input is x, x is a picture, and the output is D of x is the probability that x is a real picture, and if it's 1, it's 100% real, and if it's 0, it's not real.</p>\n<h3>Installation</h3>\n<p>Install from pypi:</p>\n<pre>pip install wgan_pytorch\n</pre>\n<p>Install from source:</p>\n<pre>git clone https://github.com/Lornatang/WassersteinGAN-PyTorch.git\n<span class=\"nb\">cd</span> WassersteinGAN-PyTorch\npip install -e .\n</pre>\n<h3>Usage</h3>\n<h4>Loading pretrained models</h4>\n<p>Load an Wasserstein GAN:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wgan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_name</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n</pre>\n<p>Load a pretrained Wasserstein GAN:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wgan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Example: Extended dataset</h4>\n<p>As mentioned in the example, if you load the pre-trained weights of the MNIST dataset, it will create a new <code>imgs</code> directory and generate 64 random images in the <code>imgs</code> directory.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torch</span>\n<span class=\"kn\">import</span> <span class=\"nn\">torchvision.utils</span> <span class=\"k\">as</span> <span class=\"nn\">vutils</span>\n<span class=\"kn\">from</span> <span class=\"nn\">wgan_pytorch</span> <span class=\"kn\">import</span> <span class=\"n\">Generator</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">device</span><span class=\"p\">(</span><span class=\"s2\">\"cuda:0\"</span> <span class=\"k\">if</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">cuda</span><span class=\"o\">.</span><span class=\"n\">is_available</span><span class=\"p\">()</span> <span class=\"k\">else</span> <span class=\"s2\">\"cpu\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Generator</span><span class=\"o\">.</span><span class=\"n\">from_pretrained</span><span class=\"p\">(</span><span class=\"s2\">\"g-mnist\"</span><span class=\"p\">)</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">to</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n<span class=\"c1\"># switch to evaluate mode</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">eval</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">makedirs</span><span class=\"p\">(</span><span class=\"s2\">\"./imgs\"</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">OSError</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"k\">with</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">no_grad</span><span class=\"p\">():</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">):</span>\n        <span class=\"n\">noise</span> <span class=\"o\">=</span> <span class=\"n\">torch</span><span class=\"o\">.</span><span class=\"n\">randn</span><span class=\"p\">(</span><span class=\"mi\">64</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">device</span><span class=\"o\">=</span><span class=\"n\">device</span><span class=\"p\">)</span>\n        <span class=\"n\">fake</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"p\">(</span><span class=\"n\">noise</span><span class=\"p\">)</span>\n        <span class=\"n\">vutils</span><span class=\"o\">.</span><span class=\"n\">save_image</span><span class=\"p\">(</span><span class=\"n\">fake</span><span class=\"o\">.</span><span class=\"n\">detach</span><span class=\"p\">(),</span> <span class=\"sa\">f</span><span class=\"s2\">\"./imgs/fake_</span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">:</span><span class=\"s2\">04d</span><span class=\"si\">}</span><span class=\"s2\">.png\"</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"The fake image has been generated!\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Example: Visual</h4>\n<pre>cd $REPO$/framework\nsh start.sh\n</pre>\n<p>Then open the browser and type in the browser address <a href=\"http://127.0.0.1:10002/\" rel=\"nofollow\">http://127.0.0.1:10002/</a>.\nEnjoy it.</p>\n<h3>Contributing</h3>\n<p>If you find a bug, create a GitHub issue, or even better, submit a pull request. Similarly, if you have questions, simply post them as GitHub issues.</p>\n<p>I look forward to seeing what the community does with these models!</p>\n\n          </div>"}, "last_serial": 6675866, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6dd854584f592d5deabd63a7ef798a4e", "sha256": "8944874f1461281b15f07e450f9c2a1037d46d27bd2499e6127eacc1ef0786e9"}, "downloads": -1, "filename": "wgan_pytorch-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6dd854584f592d5deabd63a7ef798a4e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11006, "upload_time": "2020-02-21T07:49:10", "upload_time_iso_8601": "2020-02-21T07:49:10.846377Z", "url": "https://files.pythonhosted.org/packages/96/b9/08b4cb00d339a816f022ed5420b7cb729a1d155c31df9b27174b2ae47cd3/wgan_pytorch-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b2d71eb7aa67f55612da186d2cdff10", "sha256": "c260e492de478884c65b70c5b970e538c059e390b29605b3d81b3c99fd251ac1"}, "downloads": -1, "filename": "wgan_pytorch-0.1.0.tar.gz", "has_sig": false, "md5_digest": "5b2d71eb7aa67f55612da186d2cdff10", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6767, "upload_time": "2020-02-21T07:49:13", "upload_time_iso_8601": "2020-02-21T07:49:13.715498Z", "url": "https://files.pythonhosted.org/packages/04/db/bf201407152f0d8fef37761a135b49e88e15d6856da3edafa7a758ffc3f0/wgan_pytorch-0.1.0.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "03a2441212d964b556c4c22322740fbd", "sha256": "2eff831bb48a9f47319fa705bc70b9fe732bac14f393cbfd80fca1a3ac2cdac8"}, "downloads": -1, "filename": "wgan_pytorch-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03a2441212d964b556c4c22322740fbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11014, "upload_time": "2020-02-21T15:08:01", "upload_time_iso_8601": "2020-02-21T15:08:01.341302Z", "url": "https://files.pythonhosted.org/packages/90/b1/9785cab1320444e0ba0403a37b8dbd9c68ea27f2bdaca054892c94661d41/wgan_pytorch-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23d0092700d703b0db9190e8cd15adc1", "sha256": "b58528e086d7a9b66a7ca9e0ad1e61779621c71dff044d188fd2e73973e56a9d"}, "downloads": -1, "filename": "wgan_pytorch-0.1.2.tar.gz", "has_sig": false, "md5_digest": "23d0092700d703b0db9190e8cd15adc1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6767, "upload_time": "2020-02-21T15:08:03", "upload_time_iso_8601": "2020-02-21T15:08:03.481627Z", "url": "https://files.pythonhosted.org/packages/ee/bd/760187a6b7002d9372960f0739ab71506825d779afc2a750428132dbb6c6/wgan_pytorch-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "03a2441212d964b556c4c22322740fbd", "sha256": "2eff831bb48a9f47319fa705bc70b9fe732bac14f393cbfd80fca1a3ac2cdac8"}, "downloads": -1, "filename": "wgan_pytorch-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "03a2441212d964b556c4c22322740fbd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5.0", "size": 11014, "upload_time": "2020-02-21T15:08:01", "upload_time_iso_8601": "2020-02-21T15:08:01.341302Z", "url": "https://files.pythonhosted.org/packages/90/b1/9785cab1320444e0ba0403a37b8dbd9c68ea27f2bdaca054892c94661d41/wgan_pytorch-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23d0092700d703b0db9190e8cd15adc1", "sha256": "b58528e086d7a9b66a7ca9e0ad1e61779621c71dff044d188fd2e73973e56a9d"}, "downloads": -1, "filename": "wgan_pytorch-0.1.2.tar.gz", "has_sig": false, "md5_digest": "23d0092700d703b0db9190e8cd15adc1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.0", "size": 6767, "upload_time": "2020-02-21T15:08:03", "upload_time_iso_8601": "2020-02-21T15:08:03.481627Z", "url": "https://files.pythonhosted.org/packages/ee/bd/760187a6b7002d9372960f0739ab71506825d779afc2a750428132dbb6c6/wgan_pytorch-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:30:04 2020"}