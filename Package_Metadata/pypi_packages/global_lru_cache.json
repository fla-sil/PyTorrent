{"info": {"author": "Guy Kisel", "author_email": "guy.kisel@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "global_lru_cache\n================\n\nPython global LRU cache memoization decorator.\n\n\nWhat is a global LRU cache?\n================\nThere are a lot of great Python LRU caches available. Python 3 has [functools.lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache) built in, and it's also been [backported to Python 2](http://code.activestate.com/recipes/578078-py26-and-py30-backport-of-python-33s-lru-cache/). There's also [pylru](https://github.com/jlhutch/pylru), [cachetools](https://github.com/tkem/cachetools), [lru-dict](https://github.com/amitdev/lru-dict), [repoze.lru](https://github.com/repoze/repoze.lru), and more out there. \n\nWhat all of these caches have in common is that when used as a function decorator, they maintain a separate cache for each decorated function, and you can usually only specify a maximum number of cache entries, without regard to actual size in memory. This is probably more than enough for the vast majority of use cases, but in some circumstances, it's more convenient to have a globally shared cache that automatically manages its size relative to available system memory. This can be useful, for example, when caching very large queries from very slow databases. If your cache ends up using significant percentages of system memory, you want to make sure you don't use too much memory, especially if you are sharing the system with other processes.\n\nI was unable to find an existing implementation of such a cache, so I've taken some basic open source code I found online and modified it to suit my needs. The result is a library with a simple decorator that takes no arguments and manages all of your cached data as a single cache. I've called it an LRU cache, but when invalidating cache entries it actually uses a scoring function that takes into account time last accessed, size in memory of the cache entry, and duration of the cached function call. \n\n\nUsage\n================\n```python\nfrom memoize import memoized\n\n@memoized\ndef slow_function(arg1, arg2):\n  time.sleep(30)\n  return arg1 * arg2\n```", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guykisel/global_lru_cache", "keywords": "lru cache memoize decorator", "license": "####################################################################################################\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2014 Guy Kisel\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n####################################################################################################\n#\n# This project incorporates work covered by the following copyrights and\n# permission notices:\n#\n####################################################################################################\n#\n# From http://micheles.googlecode.com/hg/decorator/documentation.html\n#\n# Copyright (c) 2005-2012, Michele Simionato All rights reserved.\n#\n# Redistribution and use in source and binary forms, with or without modification, are permitted\n# provided that the following conditions are met:\n#\n# Redistributions of source code must retain the above copyright notice, this list of\n# conditions and the following disclaimer. Redistributions in bytecode form must reproduce\n# the above copyright notice, this list of conditions and the following disclaimer in the\n# documentation and/or other materials provided with the distribution.\n#\n# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR\n# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY\n# AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDERS\n# OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR\n# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\n# ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE\n# OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY\n# OF SUCH DAMAGE.\n#\n####################################################################################################\n#\n# From http://code.activestate.com/recipes/577504/\n#\n# The MIT License (MIT)\n#\n# Copyright (c) 2010 Raymond Hettinger\n#\n# Permission is hereby granted, free of charge, to any person obtaining a copy\n# of this software and associated documentation files (the \"Software\"), to deal\n# in the Software without restriction, including without limitation the rights\n# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n# copies of the Software, and to permit persons to whom the Software is\n# furnished to do so, subject to the following conditions:\n#\n# The above copyright notice and this permission notice shall be included in\n# all copies or substantial portions of the Software.\n#\n# THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n# THE SOFTWARE.\n#\n####################################################################################################", "maintainer": null, "maintainer_email": null, "name": "global_lru_cache", "package_url": "https://pypi.org/project/global_lru_cache/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/global_lru_cache/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/guykisel/global_lru_cache"}, "release_url": "https://pypi.org/project/global_lru_cache/1.0/", "requires_dist": null, "requires_python": null, "summary": "Global LRU cache decorator", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            global_lru_cache<br>================<br><br>Python global LRU cache memoization decorator.<br><br><br>What is a global LRU cache?<br>================<br>There are a lot of great Python LRU caches available. Python 3 has [functools.lru_cache](https://docs.python.org/3/library/functools.html#functools.lru_cache) built in, and it's also been [backported to Python 2](http://code.activestate.com/recipes/578078-py26-and-py30-backport-of-python-33s-lru-cache/). There's also [pylru](https://github.com/jlhutch/pylru), [cachetools](https://github.com/tkem/cachetools), [lru-dict](https://github.com/amitdev/lru-dict), [repoze.lru](https://github.com/repoze/repoze.lru), and more out there. <br><br>What all of these caches have in common is that when used as a function decorator, they maintain a separate cache for each decorated function, and you can usually only specify a maximum number of cache entries, without regard to actual size in memory. This is probably more than enough for the vast majority of use cases, but in some circumstances, it's more convenient to have a globally shared cache that automatically manages its size relative to available system memory. This can be useful, for example, when caching very large queries from very slow databases. If your cache ends up using significant percentages of system memory, you want to make sure you don't use too much memory, especially if you are sharing the system with other processes.<br><br>I was unable to find an existing implementation of such a cache, so I've taken some basic open source code I found online and modified it to suit my needs. The result is a library with a simple decorator that takes no arguments and manages all of your cached data as a single cache. I've called it an LRU cache, but when invalidating cache entries it actually uses a scoring function that takes into account time last accessed, size in memory of the cache entry, and duration of the cached function call. <br><br><br>Usage<br>================<br>```python<br>from memoize import memoized<br><br>@memoized<br>def slow_function(arg1, arg2):<br>  time.sleep(30)<br>  return arg1 * arg2<br>```\n          </div>"}, "last_serial": 1160156, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "fb425ddcbbc03b10fda57f3dd922303e", "sha256": "45db856ec325dd52c942c6800b0209bbf53e62df6ea1a6fa052767027c7d4d98"}, "downloads": -1, "filename": "global_lru_cache-1.0.tar.gz", "has_sig": false, "md5_digest": "fb425ddcbbc03b10fda57f3dd922303e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6155, "upload_time": "2014-07-16T21:22:06", "upload_time_iso_8601": "2014-07-16T21:22:06.617260Z", "url": "https://files.pythonhosted.org/packages/7d/37/0a30df4fb7fca38fe94994a56dc48872a697e85155751b80c1d724aa7d55/global_lru_cache-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb425ddcbbc03b10fda57f3dd922303e", "sha256": "45db856ec325dd52c942c6800b0209bbf53e62df6ea1a6fa052767027c7d4d98"}, "downloads": -1, "filename": "global_lru_cache-1.0.tar.gz", "has_sig": false, "md5_digest": "fb425ddcbbc03b10fda57f3dd922303e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6155, "upload_time": "2014-07-16T21:22:06", "upload_time_iso_8601": "2014-07-16T21:22:06.617260Z", "url": "https://files.pythonhosted.org/packages/7d/37/0a30df4fb7fca38fe94994a56dc48872a697e85155751b80c1d724aa7d55/global_lru_cache-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:33 2020"}