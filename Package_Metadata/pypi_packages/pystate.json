{"info": {"author": "Len Wanger", "author_email": "len_wanger@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "FiniteStateMachine - A finite state machine class using coroutines\r\n\r\n    FiniteStateMachine is a class representing a finite state machine. Each state is represented by an instance of the\r\n    State class. Each state also has a state handler function defined for it. The handler function is a co-routine that\r\n    excepts an event and performs an action based on it.\r\n\r\n    To define the state machine:\r\n\r\n    1) define the states (e.g. STATE_A = State('STATE_A'))\r\n    2) define the state handler functions. See below for the structure of a state handling function.\r\n    3) create an instance of the state machine (e.g. fsm = Fsm())\r\n    4) add states to the state machine, including exactly one state marked as the initial state. Each state also takes\r\n        a sequence of states that it can be transitioned from (from_states).\r\n    5) call the start function on the FSM (e.g. fsm.start())\r\n\r\n    For each event you will need to call the dispatch_event function (e.g. fsm.dispatch_event()) to route the event\r\n    to the co-routine. An event can be anything you want (e.g. a tuple with event_id and arguments). The main loops\r\n    generally looks like:\r\n\r\n    try:\r\n        while True:\r\n            event = get_next_event()\r\n            fsm.dispatch_event(event)\r\n    except ExpectedExit as e:\r\n        pass\r\n\r\n    The basic structure of a state handler is:\r\n\r\n    def state_handler_<state name>(fsm):\r\n        # Enter the main loop for the co-routine\r\n        while True:\r\n            event = yield\r\n\r\n            if event == 'EVENT_1':\r\n                # Transition to another state\r\n                fsm.transition_to(STATE_X)\r\n            elif event == 'EVENT_2':\r\n                # Do some processing but stay in this state\r\n                print('Got EVENT_2')\r\n            elif event == 'TERMINATING_EVENT':\r\n                raise FsmExit\r\n            else:\r\n                print('Unrecognized event (%s)' % event)\r\n\r\n    A simple example of this is shown in the turnstile_test.py test case.\r\n\r\n    For convenience this can be wrapped with a @state_handler decorator. The decorator takes care of the co-routine\r\n    boiler plate and hands the handler function an fsm and event. This would look like:\r\n\r\n    @pystate.state_handler\r\n    def state_locked_handler(event, fsm):\r\n        if event == 'EVENT_1':\r\n            # Transition to another state\r\n            fsm.transition_to(STATE_X)\r\n        elif event == 'EVENT_2':\r\n            # Do some processing but stay in this state\r\n            print('Got EVENT_2')\r\n        elif event == 'TERMINATING_EVENT':\r\n            raise FsmExit\r\n        else:\r\n            print('Unrecognized event (%s)' % event)\r\n\r\n    There are two ways to handle a state that needs to keep persistant data. You can create a callable clas (i.e. define\r\n    the __call__ dunder method to call as the state handler.) This allows you to use the state_handler decorator around\r\n    the __call__ method. Alternatively, you can set the state data above the while loop if you define the co-routine by\r\n    hand, however, this precludes using the decorator. See the callable_test.py test case for an example.\r\n\r\nAuthor: Len Wanger\r\nLast Updated: 7/7/2016\r\nCopyright (c) 2016 Len Wanger\r\n\r\nPermission is hereby granted, free of charge, to any person obtaining a copy\r\nof this software and associated documentation files (the \"Software\"), to deal\r\nin the Software without restriction, including without limitation the rights\r\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\ncopies of the Software, and to permit persons to whom the Software is\r\nfurnished to do so, subject to the following conditions:\r\n\r\nThe above copyright notice and this permission notice shall be included in all\r\ncopies or substantial portions of the Software.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\nSOFTWARE.\r\n\r\nNote: Substantial code was adapted from Christian Maugg's pystatemachine code\r\nCopyright (c) 2015 Christian Maugg\r\n(https://raw.githubusercontent.com/cmaugg/pystatemachine/master/pystatemachine.py)\r\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lwanger/pystate", "keywords": "state machine,coroutine,co-routine", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pystate", "package_url": "https://pypi.org/project/pystate/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pystate/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/lwanger/pystate"}, "release_url": "https://pypi.org/project/pystate/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Python package for co-routine base state machines.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            FiniteStateMachine - A finite state machine class using coroutines\n<br>\n<br>    FiniteStateMachine is a class representing a finite state machine. Each state is represented by an instance of the\n<br>    State class. Each state also has a state handler function defined for it. The handler function is a co-routine that\n<br>    excepts an event and performs an action based on it.\n<br>\n<br>    To define the state machine:\n<br>\n<br>    1) define the states (e.g. STATE_A = State('STATE_A'))\n<br>    2) define the state handler functions. See below for the structure of a state handling function.\n<br>    3) create an instance of the state machine (e.g. fsm = Fsm())\n<br>    4) add states to the state machine, including exactly one state marked as the initial state. Each state also takes\n<br>        a sequence of states that it can be transitioned from (from_states).\n<br>    5) call the start function on the FSM (e.g. fsm.start())\n<br>\n<br>    For each event you will need to call the dispatch_event function (e.g. fsm.dispatch_event()) to route the event\n<br>    to the co-routine. An event can be anything you want (e.g. a tuple with event_id and arguments). The main loops\n<br>    generally looks like:\n<br>\n<br>    try:\n<br>        while True:\n<br>            event = get_next_event()\n<br>            fsm.dispatch_event(event)\n<br>    except ExpectedExit as e:\n<br>        pass\n<br>\n<br>    The basic structure of a state handler is:\n<br>\n<br>    def state_handler_&lt;state name&gt;(fsm):\n<br>        # Enter the main loop for the co-routine\n<br>        while True:\n<br>            event = yield\n<br>\n<br>            if event == 'EVENT_1':\n<br>                # Transition to another state\n<br>                fsm.transition_to(STATE_X)\n<br>            elif event == 'EVENT_2':\n<br>                # Do some processing but stay in this state\n<br>                print('Got EVENT_2')\n<br>            elif event == 'TERMINATING_EVENT':\n<br>                raise FsmExit\n<br>            else:\n<br>                print('Unrecognized event (%s)' % event)\n<br>\n<br>    A simple example of this is shown in the turnstile_test.py test case.\n<br>\n<br>    For convenience this can be wrapped with a @state_handler decorator. The decorator takes care of the co-routine\n<br>    boiler plate and hands the handler function an fsm and event. This would look like:\n<br>\n<br>    @pystate.state_handler\n<br>    def state_locked_handler(event, fsm):\n<br>        if event == 'EVENT_1':\n<br>            # Transition to another state\n<br>            fsm.transition_to(STATE_X)\n<br>        elif event == 'EVENT_2':\n<br>            # Do some processing but stay in this state\n<br>            print('Got EVENT_2')\n<br>        elif event == 'TERMINATING_EVENT':\n<br>            raise FsmExit\n<br>        else:\n<br>            print('Unrecognized event (%s)' % event)\n<br>\n<br>    There are two ways to handle a state that needs to keep persistant data. You can create a callable clas (i.e. define\n<br>    the __call__ dunder method to call as the state handler.) This allows you to use the state_handler decorator around\n<br>    the __call__ method. Alternatively, you can set the state data above the while loop if you define the co-routine by\n<br>    hand, however, this precludes using the decorator. See the callable_test.py test case for an example.\n<br>\n<br>Author: Len Wanger\n<br>Last Updated: 7/7/2016\n<br>Copyright (c) 2016 Len Wanger\n<br>\n<br>Permission is hereby granted, free of charge, to any person obtaining a copy\n<br>of this software and associated documentation files (the \"Software\"), to deal\n<br>in the Software without restriction, including without limitation the rights\n<br>to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n<br>copies of the Software, and to permit persons to whom the Software is\n<br>furnished to do so, subject to the following conditions:\n<br>\n<br>The above copyright notice and this permission notice shall be included in all\n<br>copies or substantial portions of the Software.\n<br>\n<br>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n<br>IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n<br>FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n<br>AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n<br>LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n<br>OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n<br>SOFTWARE.\n<br>\n<br>Note: Substantial code was adapted from Christian Maugg's pystatemachine code\n<br>Copyright (c) 2015 Christian Maugg\n<br>(https://raw.githubusercontent.com/cmaugg/pystatemachine/master/pystatemachine.py)\n<br>\n          </div>"}, "last_serial": 2209309, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b64afe8521ee5b5daf29e0ac839df0cd", "sha256": "aed4205046af1ac332d0c2979f31f3ae44173fe8f343408148904304c8c7a728"}, "downloads": -1, "filename": "pystate-0.0.1.zip", "has_sig": false, "md5_digest": "b64afe8521ee5b5daf29e0ac839df0cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7609, "upload_time": "2016-07-08T05:28:19", "upload_time_iso_8601": "2016-07-08T05:28:19.238643Z", "url": "https://files.pythonhosted.org/packages/0b/c2/359f0d7123f892fb53dcf885dd4eca5a775bbdeef5d5fcf9a1fc5d112dae/pystate-0.0.1.zip", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "755eaac62cd66e73f152a2810bd1d563", "sha256": "50c15116ab0f6ec77d39e384b56ec59eb10576dbb9c26f705b198be16c7431e0"}, "downloads": -1, "filename": "pystate-0.1.0.zip", "has_sig": false, "md5_digest": "755eaac62cd66e73f152a2810bd1d563", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9005, "upload_time": "2016-07-08T05:39:53", "upload_time_iso_8601": "2016-07-08T05:39:53.016587Z", "url": "https://files.pythonhosted.org/packages/bb/53/e54c667ce26f73059a609d7c2c57e9c1bdc0e31aac9a5c8a57012dbf7875/pystate-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "0810dc1dd9e7bcd61b861c16ff742ce6", "sha256": "a51d9b3189155e7dd681e032d17dbae82b0a9805467f742d873259eaf5ee5f01"}, "downloads": -1, "filename": "pystate-0.1.1.zip", "has_sig": false, "md5_digest": "0810dc1dd9e7bcd61b861c16ff742ce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9001, "upload_time": "2016-07-08T06:24:23", "upload_time_iso_8601": "2016-07-08T06:24:23.619518Z", "url": "https://files.pythonhosted.org/packages/98/05/02bfb21b4d2e35210fe1836b4375ba27c82e5de840347b82e43dcf4a4002/pystate-0.1.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0810dc1dd9e7bcd61b861c16ff742ce6", "sha256": "a51d9b3189155e7dd681e032d17dbae82b0a9805467f742d873259eaf5ee5f01"}, "downloads": -1, "filename": "pystate-0.1.1.zip", "has_sig": false, "md5_digest": "0810dc1dd9e7bcd61b861c16ff742ce6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9001, "upload_time": "2016-07-08T06:24:23", "upload_time_iso_8601": "2016-07-08T06:24:23.619518Z", "url": "https://files.pythonhosted.org/packages/98/05/02bfb21b4d2e35210fe1836b4375ba27c82e5de840347b82e43dcf4a4002/pystate-0.1.1.zip", "yanked": false}], "timestamp": "Fri May  8 02:56:00 2020"}