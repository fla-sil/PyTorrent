{"info": {"author": "Rafael Goncalves Martins", "author_email": "rafael@rafaelmartins.eng.br", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2"], "description": "pyoembed\n========\n\n.. image:: https://ci.rgm.io/buildStatus/icon?job=pyoembed\n   :target: https://ci.rgm.io/job/pyoembed/\n\nA Python library for oEmbed that supports auto-discovered and manually\nincluded providers.\n\n\nInstallation\n------------\n\n::\n\n   $ pip install pyoembed\n\n\nUsage\n-----\n\nThe library provides a function that should be called to automatically embed\nthe url content, and it is called ``oEmbed``:\n\n.. sourcecode:: python\n\n   from pyoembed import oEmbed, PyOembedException\n\n   try:\n       # maxwidth and maxheight are optional.\n       data = oEmbed('http://www.youtube.com/watch?v=_PEdPBEpQfY',\n                     maxwidth=640, maxheight=480)\n   except PyOembedException, e:\n       print 'An error was ocurred: %s' % e\n\n   # data is a dict with keys that will depends on the media type. You should\n   # choose how to display the content based on the data['type'] value and\n   # the oEmbed spec ( http://oembed.com/ ).\n   if data['type'] == 'video':\n       print data['html']\n\n   # and it goes... Someday we will provide default renderes for each media\n   # type.\n\n\nAddition of new providers\n-------------------------\n\npyoembed tries to cover the major oEmbed providers, and should works for any\nprovider that supports oEmbed auto-discover out-of-the box, however your\nfavorite provider may be unsupported yet! :(\n\nTo add it, create a file inside the ``pyoembed.providers`` package, based on\nthe following example:\n\n.. sourcecode:: python\n\n   from pyoembed.providers import BaseProvider\n\n\n   class InstagramProvider(BaseProvider):\n\n       # priority of the provider. Increase it if the provider isn't well known\n       priority = 10\n\n       # url schemas that are supported by the provider.\n       # re.compile'd regex are allowed.\n       oembed_schemas = ['http://instagram.com/p/*',\n                         'http://instagr.am/p/*']\n\n       # api endpoint that answers to oEmbed requests for the provider.\n       oembed_endpoint = 'http://api.instagram.com/oembed'\n\n\nYou will also need to add some test urls of your provider to the\n``integration_test.py`` file, and run it to see if everything is ok.\n\nIf everything works, feel free to send a pull request to add the provider:\n\nhttps://github.com/rafaelmartins/pyoembed/pulls\n\nThat's it!\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pyoembed", "package_url": "https://pypi.org/project/pyoembed/", "platform": "any", "project_url": "https://pypi.org/project/pyoembed/", "project_urls": null, "release_url": "https://pypi.org/project/pyoembed/0.1.2/", "requires_dist": null, "requires_python": "", "summary": "A Python library for oEmbed that supports auto-discovered and manually included providers.", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://ci.rgm.io/job/pyoembed/\" rel=\"nofollow\"><img alt=\"https://ci.rgm.io/buildStatus/icon?job=pyoembed\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/70c0c0b31295a871d860499b72160bc9f8209b4a/68747470733a2f2f63692e72676d2e696f2f6275696c645374617475732f69636f6e3f6a6f623d70796f656d626564\"></a>\n<p>A Python library for oEmbed that supports auto-discovered and manually\nincluded providers.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install pyoembed\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The library provides a function that should be called to automatically embed\nthe url content, and it is called <tt>oEmbed</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyoembed</span> <span class=\"kn\">import</span> <span class=\"n\">oEmbed</span><span class=\"p\">,</span> <span class=\"n\">PyOembedException</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># maxwidth and maxheight are optional.</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">oEmbed</span><span class=\"p\">(</span><span class=\"s1\">'http://www.youtube.com/watch?v=_PEdPBEpQfY'</span><span class=\"p\">,</span>\n                  <span class=\"n\">maxwidth</span><span class=\"o\">=</span><span class=\"mi\">640</span><span class=\"p\">,</span> <span class=\"n\">maxheight</span><span class=\"o\">=</span><span class=\"mi\">480</span><span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"n\">PyOembedException</span><span class=\"p\">,</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'An error was ocurred: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">e</span>\n\n<span class=\"c1\"># data is a dict with keys that will depends on the media type. You should</span>\n<span class=\"c1\"># choose how to display the content based on the data['type'] value and</span>\n<span class=\"c1\"># the oEmbed spec ( http://oembed.com/ ).</span>\n<span class=\"k\">if</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'type'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'video'</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span> <span class=\"n\">data</span><span class=\"p\">[</span><span class=\"s1\">'html'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># and it goes... Someday we will provide default renderes for each media</span>\n<span class=\"c1\"># type.</span>\n</pre>\n</div>\n<div id=\"addition-of-new-providers\">\n<h2>Addition of new providers</h2>\n<p>pyoembed tries to cover the major oEmbed providers, and should works for any\nprovider that supports oEmbed auto-discover out-of-the box, however your\nfavorite provider may be unsupported yet! :(</p>\n<p>To add it, create a file inside the <tt>pyoembed.providers</tt> package, based on\nthe following example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyoembed.providers</span> <span class=\"kn\">import</span> <span class=\"n\">BaseProvider</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InstagramProvider</span><span class=\"p\">(</span><span class=\"n\">BaseProvider</span><span class=\"p\">):</span>\n\n    <span class=\"c1\"># priority of the provider. Increase it if the provider isn't well known</span>\n    <span class=\"n\">priority</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n\n    <span class=\"c1\"># url schemas that are supported by the provider.</span>\n    <span class=\"c1\"># re.compile'd regex are allowed.</span>\n    <span class=\"n\">oembed_schemas</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'http://instagram.com/p/*'</span><span class=\"p\">,</span>\n                      <span class=\"s1\">'http://instagr.am/p/*'</span><span class=\"p\">]</span>\n\n    <span class=\"c1\"># api endpoint that answers to oEmbed requests for the provider.</span>\n    <span class=\"n\">oembed_endpoint</span> <span class=\"o\">=</span> <span class=\"s1\">'http://api.instagram.com/oembed'</span>\n</pre>\n<p>You will also need to add some test urls of your provider to the\n<tt>integration_test.py</tt> file, and run it to see if everything is ok.</p>\n<p>If everything works, feel free to send a pull request to add the provider:</p>\n<p><a href=\"https://github.com/rafaelmartins/pyoembed/pulls\" rel=\"nofollow\">https://github.com/rafaelmartins/pyoembed/pulls</a></p>\n<p>That\u2019s it!</p>\n</div>\n\n          </div>"}, "last_serial": 3341109, "releases": {"0": [], "0.1": [{"comment_text": "", "digests": {"md5": "37a942fd9fb593e3186e4458e424fcea", "sha256": "6e9fd950a12f34ec2f94a40bd4b6aca5c09a64bc7df82f27689ebdecb7b7c487"}, "downloads": -1, "filename": "pyoembed-0.1.tar.gz", "has_sig": false, "md5_digest": "37a942fd9fb593e3186e4458e424fcea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12764, "upload_time": "2014-03-03T21:38:54", "upload_time_iso_8601": "2014-03-03T21:38:54.256963Z", "url": "https://files.pythonhosted.org/packages/f4/6a/1bcf98340baa2ea1fab9c5d0a2cd94e76799de40c86e38c0b89496246c3b/pyoembed-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "8acfa85928d21d4603c8d7f09845a014", "sha256": "7a50072d8f0e38e9aa586c24fd693f225ccd78936f55fa35c3fed3fadf1b0e13"}, "downloads": -1, "filename": "pyoembed-0.1.1.tar.gz", "has_sig": false, "md5_digest": "8acfa85928d21d4603c8d7f09845a014", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12941, "upload_time": "2014-06-15T20:37:41", "upload_time_iso_8601": "2014-06-15T20:37:41.559355Z", "url": "https://files.pythonhosted.org/packages/ae/e5/3002c1146eb64a46f87004f96b0340e2327c11c79f933243e9d1c46812a1/pyoembed-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "be709b9019b3e7969401eaac1577d2a1", "sha256": "0f755c8308039f1e49238e95ea94ef16aa08add9f32075ba13ab9b65f32ff582"}, "downloads": -1, "filename": "pyoembed-0.1.2.tar.gz", "has_sig": false, "md5_digest": "be709b9019b3e7969401eaac1577d2a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12502, "upload_time": "2017-11-17T11:51:21", "upload_time_iso_8601": "2017-11-17T11:51:21.083816Z", "url": "https://files.pythonhosted.org/packages/32/11/7b9549660ae130668cabc886e4012572745508d381cd0005239b082129a8/pyoembed-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "be709b9019b3e7969401eaac1577d2a1", "sha256": "0f755c8308039f1e49238e95ea94ef16aa08add9f32075ba13ab9b65f32ff582"}, "downloads": -1, "filename": "pyoembed-0.1.2.tar.gz", "has_sig": false, "md5_digest": "be709b9019b3e7969401eaac1577d2a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12502, "upload_time": "2017-11-17T11:51:21", "upload_time_iso_8601": "2017-11-17T11:51:21.083816Z", "url": "https://files.pythonhosted.org/packages/32/11/7b9549660ae130668cabc886e4012572745508d381cd0005239b082129a8/pyoembed-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:00:20 2020"}