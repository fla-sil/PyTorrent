{"info": {"author": "Andrei Sorokin", "author_email": "Andrey.I.Sorokin@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "# Score-Weighted Class Activation Mapping (SCAM-NET)\n\n## About\nThis is an implementation of: <cite data-cite=\"wang2019scorecamimproved\">Score-CAM Improved Visual Explanations Via Score-Weighted Class Activation Mapping</cite>.\n[https://arxiv.org/abs/1910.01279]\n\nBibTex reference:\n\n    @misc{wang2019scorecamimproved,\n    title={Score-CAM:Improved Visual Explanations Via Score-Weighted Class Activation Mapping},\n    author={Haofan Wang and Mengnan Du and Fan Yang and Zijian Zhang},\n    year={2019},\n    eprint={1910.01279},\n    archivePrefix={arXiv},\n    primaryClass={cs.CV}\n\t}\n\nIt is capable of postprocessing CNNs by taking its final output convolutional layer and softmax layer and generating spatial heatmap for the specified class.\nRegions with higher score correspond to the pixels with greater importance in classifying an image with a specific class.\n\n\n## Usage\n\nTo use ScoreCAM class with Keras is as easy as adding 2 calls:\n\n    from scam.keras import ScoreCAM\n    scoreCAM = ScoreCAM(model_input=model_input, last_conv_output=conv_layers, softmax_output=softmax_output, input_shape=input_shape)\n    scoreCAM.prepare_cam(img)\n\n* `model_input` - is an input layer\n* `conv_layers` - last convolutional layer output \n* `softmax_output` - final classification layer output.\n* `input_shape` - expected image spatial dimensions (e.g. (224,224))\n\n\nand\n\n    # return heatmap of the same size as image\n    heatmap = scoreCAM.get_class_heatmap(class_id)\n\n## Expected Output\n\nThe output is a heatmap which describes an importance of a class `class_id` with respect to pixel location.\nBelow is the sample output for tiger_cat class:\n\n![cat_dog_3_heatmap](images/cat_dog_3_out.png?raw=true \"cat_dog_3_heatmap\")\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/andreysorokin/scam-net/archive/0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/andreysorokin/scam-net", "keywords": "CNN,neural,heatmap", "license": "apache-2.0", "maintainer": "", "maintainer_email": "", "name": "scam-net-rewintous", "package_url": "https://pypi.org/project/scam-net-rewintous/", "platform": "", "project_url": "https://pypi.org/project/scam-net-rewintous/", "project_urls": {"Download": "https://github.com/andreysorokin/scam-net/archive/0.0.1.tar.gz", "Homepage": "https://github.com/andreysorokin/scam-net"}, "release_url": "https://pypi.org/project/scam-net-rewintous/0.0.1/", "requires_dist": ["keras", "numpy", "scikit-image", "matplotlib"], "requires_python": "", "summary": "Score Weighted Class Activation Mapping. A tool for convolutional neural network activation analysis", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Score-Weighted Class Activation Mapping (SCAM-NET)</h1>\n<h2>About</h2>\n<p>This is an implementation of: <cite>Score-CAM Improved Visual Explanations Via Score-Weighted Class Activation Mapping</cite>.\n[https://arxiv.org/abs/1910.01279]</p>\n<p>BibTex reference:</p>\n<pre><code>@misc{wang2019scorecamimproved,\ntitle={Score-CAM:Improved Visual Explanations Via Score-Weighted Class Activation Mapping},\nauthor={Haofan Wang and Mengnan Du and Fan Yang and Zijian Zhang},\nyear={2019},\neprint={1910.01279},\narchivePrefix={arXiv},\nprimaryClass={cs.CV}\n}\n</code></pre>\n<p>It is capable of postprocessing CNNs by taking its final output convolutional layer and softmax layer and generating spatial heatmap for the specified class.\nRegions with higher score correspond to the pixels with greater importance in classifying an image with a specific class.</p>\n<h2>Usage</h2>\n<p>To use ScoreCAM class with Keras is as easy as adding 2 calls:</p>\n<pre><code>from scam.keras import ScoreCAM\nscoreCAM = ScoreCAM(model_input=model_input, last_conv_output=conv_layers, softmax_output=softmax_output, input_shape=input_shape)\nscoreCAM.prepare_cam(img)\n</code></pre>\n<ul>\n<li><code>model_input</code> - is an input layer</li>\n<li><code>conv_layers</code> - last convolutional layer output</li>\n<li><code>softmax_output</code> - final classification layer output.</li>\n<li><code>input_shape</code> - expected image spatial dimensions (e.g. (224,224))</li>\n</ul>\n<p>and</p>\n<pre><code># return heatmap of the same size as image\nheatmap = scoreCAM.get_class_heatmap(class_id)\n</code></pre>\n<h2>Expected Output</h2>\n<p>The output is a heatmap which describes an importance of a class <code>class_id</code> with respect to pixel location.\nBelow is the sample output for tiger_cat class:</p>\n<p><img alt=\"cat_dog_3_heatmap\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d643518c4fe9fd872690901db584eed53a11496b/696d616765732f6361745f646f675f335f6f75742e706e673f7261773d74727565\"></p>\n\n          </div>"}, "last_serial": 6062466, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c28d332e707105d523e2d6f9fbc99796", "sha256": "9bb2985a168f951a56bc9a69863bc3232a52ef6e91e2da7c87ffd104602f9a0b"}, "downloads": -1, "filename": "scam_net_rewintous-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c28d332e707105d523e2d6f9fbc99796", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9149, "upload_time": "2019-11-01T09:52:36", "upload_time_iso_8601": "2019-11-01T09:52:36.003149Z", "url": "https://files.pythonhosted.org/packages/cb/96/be5fc1cc9cdebdc0a525bafca818d46343d9d720ee72f456e946ad8b6103/scam_net_rewintous-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc3a6a781119a366cb2bacb7e5080fd7", "sha256": "b713eca00ad3b997a6bada892e454000471b267c9caff855f4ba572a644c7eb6"}, "downloads": -1, "filename": "scam-net-rewintous-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dc3a6a781119a366cb2bacb7e5080fd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3662, "upload_time": "2019-11-01T09:52:38", "upload_time_iso_8601": "2019-11-01T09:52:38.331444Z", "url": "https://files.pythonhosted.org/packages/31/52/8eb140b204ccd3813d056c31361b5e0c5f3d763b33bef98535637e4ee6ad/scam-net-rewintous-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c28d332e707105d523e2d6f9fbc99796", "sha256": "9bb2985a168f951a56bc9a69863bc3232a52ef6e91e2da7c87ffd104602f9a0b"}, "downloads": -1, "filename": "scam_net_rewintous-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c28d332e707105d523e2d6f9fbc99796", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9149, "upload_time": "2019-11-01T09:52:36", "upload_time_iso_8601": "2019-11-01T09:52:36.003149Z", "url": "https://files.pythonhosted.org/packages/cb/96/be5fc1cc9cdebdc0a525bafca818d46343d9d720ee72f456e946ad8b6103/scam_net_rewintous-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc3a6a781119a366cb2bacb7e5080fd7", "sha256": "b713eca00ad3b997a6bada892e454000471b267c9caff855f4ba572a644c7eb6"}, "downloads": -1, "filename": "scam-net-rewintous-0.0.1.tar.gz", "has_sig": false, "md5_digest": "dc3a6a781119a366cb2bacb7e5080fd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3662, "upload_time": "2019-11-01T09:52:38", "upload_time_iso_8601": "2019-11-01T09:52:38.331444Z", "url": "https://files.pythonhosted.org/packages/31/52/8eb140b204ccd3813d056c31361b5e0c5f3d763b33bef98535637e4ee6ad/scam-net-rewintous-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:08 2020"}