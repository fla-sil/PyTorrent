{"info": {"author": "ROS Tooling Working Group", "author_email": "ros-tooling@googlegroups.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "# ROS / ROS 2 Cross Compile Tool\n\n![License](https://img.shields.io/github/license/ros-tooling/cross_compile)\n[![Documentation Status](https://readthedocs.org/projects/cross_compile/badge/?version=latest)](https://cross_compile.readthedocs.io/en/latest/?badge=latest)\n\nA tool to automate compiling ROS and ROS 2 workspaces to non-native architectures.\n\n:construction: `ros_cross_compile` relies on running emulated builds\nusing QEmu, #69 tracks progress toward enabling cross-compilation.\n\n\n## Supported targets\n\nThis tool supports compiling a workspace for all combinations of the following:\n\n* Architecture: `armhf`, `aarch64`, `x86_64`\n* ROS Distro\n  * ROS: `kinetic`, `melodic`\n  * ROS 2: `dashing`, `eloquent`\n* OS: `Ubuntu`, `Debian`\n\nNOTE: ROS 2 supports Debian only as a Tier 3 platform.\nThis means that there are not `apt` repositories available for the ROS 2 Core on this platform.\nBecause of that, when targeting Debian for a ROS 2 workspace, you must also include the source for the core as well.\nIt is recommended to use a release branch of `ros2.repos` from https://github.com/ros2/ros2 to do so, rather than `master`, so that you are not affected by development branch bugs and API changes.\n\n## Supported hosts\n\nThis tool officially supports running on the following host systems.\nNote that many others likely work, but these are being thoroughly tested.\n\n* Ubuntu 18.04 Bionic Beaver\n* OSX Mojave\n\n## Installation\n\n### Prerequisites\n\nThis tool requires that you have already installed\n* [Docker](https://docs.docker.com/install/)\n  * Follow the instructions to add yourself to the `docker` group as well, so you can run containers as a non-root user\n* Python 3.5 or higher\n\nIf you are using a Linux host, you must also install QEmu (Docker for OSX performs emulation automatically):\n\n```sh\nsudo apt-get install qemu-user-static\n```\n\n### Installing ros_cross_compile\n\nTo install the stable release,\n\n```sh\npip3 install ros_cross_compile\n```\n\nIf you would like the latest nightly build, you can get it from Test PyPI\n\n```sh\npip3 install --index-url https://test.pypi.org/simple/ ros_cross_compile\n```\n\n## How it works, high level\n\n1. Collect dependencies\n    1. Create a Docker image that has `rosdep`\n    1. Run the `rosdep` image against your target workspace to output a script that describes how to install its dependencies\n1. Create \"sysroot image\" that has everything needed for building target workspace\n    1. Use a base image for the target architecture (aarch64, armhf, ...)\n    1. Install build tools (compilers, cmake, colcon, etc)\n    1. Run the dependency installer script collected in Step 1 (if dependency list hasn't changed since last run, this uses the Docker cache)\n1. Build\n    1. Runs the \"sysroot image\" using QEmu emulation\n    1. `colcon build`\n\n## Usage\n\nThis package installs the `ros_cross_compile` command.\nThe command's first argument is the path to your ROS workspace.\n\nHere is a simple invocation for a standard workflow.\n\n```bash\nros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu --rosdistro dashing\n```\n\nFor information on all available options, run `ros_cross_compile -h`.\nSee the following sections for information on the more complex options.\n\n### Package Selection and Build Customization\n\nTo choose which packages to install dependencies for, this tool runs `colcon list` on your workspace.\nTo build, it runs `colcon build`.\n\nYou can provide arbitrary arguments to these commands via the [colcon `defaults.yaml`](https://colcon.readthedocs.io/en/released/user/configuration.html#defaults-yaml).\n\nYou can either specify the name of this file via `ros_cross_compile --colcon-defaults relative/path/to/defaults.yaml`, or if not specified, a file called `defaults.yaml` will be used if present.\n\nFor example, there are repositories checked out in your workspace that contain packages that are not needed for your application - some repos provide many packages and you may only want one!\nIn this scenario there is a \"bringup\" package that acts as the entry point to your application:\n\n```yaml\n# my_workspace/defaults.yaml\nlist:\n  # only install dependencies for source packages that my package depends on\n  packages-up-to: [my_application_bringup]\nbuild:\n  # only build up to my package\n  packages-up-to: [my_application_bringup]\n  # example of a boolean commandline argument\n  merge-install: true\n```\n\n### Custom rosdep script\n\nYour ROS application may need nonstandard rosdep rules.\nIf so, you have the option to provide a script to be run before the `rosdep install` command collects keys.\n\nThis script has access to the \"Custom data directory\" same as the \"Custom setup script\", see the following sections. If you need any extra files for setting up rosdep, they can be accessed via this custom data directory.\n\nNote that:\n1. Rosdeps are always collected in an Ubuntu Bionic container, so scripts must be compatible with that\n\nHere is an example script for an application that adds extra rosdep source lists\n\n```bash\ncp ./custom-data/rosdep-rules/raspicam-node.yaml /etc/ros/rosdep/custom-rules/raspicam-node.yaml\necho \"yaml file:/etc/ros/rosdep/custom-rules/raspicam-node.yaml\" > /etc/ros/rosdep/sources.list.d/22-raspicam-node.list\necho \"yaml https://s3-us-west-2.amazonaws.com/rosdep/python.yaml\" > /etc/ros/rosdep/sources.list.d/18-aws-python.list\n```\n\nTool invocation for this example:\n\n```bash\nros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu \\\n  --custom-rosdep-script /path/to/rosdep-script.sh \\\n  --custom-data-dir /arbitrary/local/directory\n```\n\n### Custom setup script\n\nYour ROS application may have build needs that aren't covered by `rosdep install`.\nIf this is the case (for example you need to add extra apt repos), use the option `--custom-setup-script` to execute arbitrary code in the sysroot container.\n\nThe path provided may be absolute, or relative to the current directory.\n\nKeep in mind\n* It's up to the user to determine whether the script is compatible with chosen base platform\n* Make sure to specify non-interactive versions of commands, for example `apt-get install -y`, or the script may hang waiting for input\n* You cannot make any assumptions about the state of the apt cache, so run `apt-get update` before installing packages\n* The script runs as root user in the container, so you don't need `sudo`\n\nBelow is an example script for an application that installs some custom Raspberry Pi libraries.\n\n```bash\napt-get update\napt-get install -y software-properties-common\n\n# Install Raspberry Pi library that we have not provided a rosdep rule for\nadd-apt-repository ppa:rpi-distro/ppa\napt-get install -y pigpio\n```\n\n### Custom data directory\n\nYour custom setup or rosdep script (see preceding sections) may need some data that is not otherwise accessible.\nFor example, you need to copy some precompiled vendor binaries to a specific location, or provide custom rosdep rules files.\nFor this use case, you can use the option `--custom-data-dir` to point to an arbitrary path.\nThe sysroot build copies this directory into the build environment, where it's available for use by your custom setup script at `./custom-data/`.\n\n**Example:**\n\nCustom data directory (`/arbitrary/local/directory`)\n```\n/arbitrary/local/directory/\n+-- my-data/\n|   +-- something.txt\n```\n\nSetup Script (`/path/to/custom-setup.sh`)\n\n```bash\n#!/bin/bash\ncat custom-data/something.txt\n```\n\nTool invocation:\n\n```bash\nros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu \\\n  --custom-setup-script /path/to/custom-setup.sh \\\n  --custom-data-dir /arbitrary/local/directory\n```\n\nNow, during the sysroot creation process, you should see the contents of `something.txt` printed during the execution of the custom script.\n\nNOTE: for trivial text files, as in the preceding example, you could have created those files fully within the `--custom-setup-script`. But for large or binary data such as precompiled libraries, this feature comes to the rescue.\n\n\n## Tutorial\n\nFor a new user, this section walks you through a representative use case, step by step.\n\nThis tutorial demonstrates how to cross-compile the [File Talker tool](https://github.com/ros-tooling/file_talker) against ROS 2 Dashing, to run on an ARM64 Ubuntu system.\nYou can generalize this workflow to any `.repos` file for your project.\n\nNOTE: this tutorial assumes a Debian-based (including Ubuntu) Linux distribution as the host platform.\n\n### Creating a simple source workspace\n\n1. Create a directory for your workspace\n    * `mkdir cross_compile_ws`\n    * `cd cross_compile_ws`\n1. Create a `.repos` file for `vcs`\n    * `file_talker.repos`\n    ```\n    repositories:\n      file_talker:\n        type: git\n        url: https://github.com/ros-tooling/file_talker.git\n        version: master\n    ```\n1. Check out the sources to build\n    * `mkdir -p src`\n    * `vcs import src < file_talker.repos`\n\n### Running the cross-compilation\n\n```bash\nros_cross_compile $(pwd) --rosdistro dashing --arch aarch64 --os ubuntu\n```\n\nHere is a detailed look at the arguments passed to the script:\n\n* `--rosdistro dashing`\n\nYou may specify both ROS and ROS 2 distributions by name, for example, `kinetic` (ROS) or `dashing` (ROS 2).\n`ros_cross_compile -h` prints the supported distributions for this option\n\n* `--arch aarch64`\n\nTarget the ARMv8 / ARM64 / aarch64 architecture (which are different names for the same thing).\n`ros_cross_compile -h` prints the supported architectures for this option.\n\n* `--os ubuntu`\n\nThe target OS is Ubuntu - the tool chooses the OS version automatically based on the ROS Distro's target OS.\nIn this case for ROS 2 Dashing - 18.04 Bionic Beaver.\n\n### Outputs of the build\n\nRun the following command\n\n```bash\nls cross_compile_ws\n```\n\nIf the build succeeded, the directory looks like this:\n\n```\nsrc/\n|-- file_talker/\n|-- install_aarch64/\n|-- build_aarch64/\n```\n\nThe created directory `install_aarch64` is the installation of your ROS workspace for your target architecture.\nYou can verify this:\n\n```bash\n$ file cross_compile_ws/install_aarch64/lib/file_talker/file_talker                                                               0s\ncross_compile_ws/install_aarch64/lib/file_talker/file_talker: ELF 64-bit LSB shared object, ARM aarch64, version 1 (GNU/Linux), dynamically linked, interpreter /lib/ld-, for GNU/Linux 3.7.0, BuildID[sha1]=02ede8a648dfa6b5b30c03d54c6d87fd9151389e, not stripped\n```\n\n### Using the build on a target platform\n\nCopy `install_aarch64` onto the target system into a location of your choosing. It contains the binaries for _your_ workspace.\n\nIf your workspace has any dependencies that are outside the source tree - that is, if `rosdep` had anything to install during the build - then you still need to install these dependencies on the target system.\n\n```bash\n# Run this on the target system, which must have rosdep already installed\n# remember `rosdep init`, `rosdep update`, `apt-get update` if you need them\nrosdep install --from-paths install_aarch64/share --ignore-src --rosdistro dashing -y\n```\n\nNow you may use the ROS installation as you would on any other system\n\n```bash\nsource install_aarch64/setup.bash\nros2 run file_talker file_talker my_text_file.txt\n```\n\n\n## License\n\nThis library is licensed under the Apache 2.0 License.\n\n## Build status\n\n| ROS 2 Release | Branch Name     | Development | Source Debian Package | X86-64 Debian Package | ARM64 Debian Package | ARMHF Debian package |\n| ------------- | --------------- | ----------- | --------------------- | --------------------- | -------------------- | -------------------- |\n| Latest        | `master`        | [![Test Pipeline Status](https://github.com/ros-tooling/cross_compile/workflows/Test%20cross_compile/badge.svg)](https://github.com/ros-tooling/cross_compile/actions) | N/A                   | N/A                   | N/A                  | N/A                  |\n| Dashing       | `dashing-devel` | [![Build Status](http://build.ros2.org/buildStatus/icon?job=Ddev__cross_compile__ubuntu_bionic_amd64)](http://build.ros2.org/job/Ddev__cross_compile__ubuntu_bionic_amd64) | [![Build Status](http://build.ros2.org/buildStatus/icon?job=Dsrc_uB__cross_compile__ubuntu_bionic__source)](http://build.ros2.org/job/Dsrc_uB__cross_compile__ubuntu_bionic__source) | [![Build Status](http://build.ros2.org/buildStatus/icon?job=Dbin_uB64__cross_compile__ubuntu_bionic_amd64__binary)](http://build.ros2.org/job/Dbin_uB64__cross_compile__ubuntu_bionic_amd64__binary) | N/A | N/A |\n\n\n[ros2_dev_setup]: https://index.ros.org/doc/ros2/Installation/Latest-Development-Setup/\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ros-tooling/cross_compile/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ros-tooling/cross_compile", "keywords": "ROS,ROS2", "license": "Apache License, Version 2.0", "maintainer": "ROS Tooling Working Group", "maintainer_email": "ros-tooling@googlegroups.com", "name": "ros-cross-compile", "package_url": "https://pypi.org/project/ros-cross-compile/", "platform": "", "project_url": "https://pypi.org/project/ros-cross-compile/", "project_urls": {"Download": "https://github.com/ros-tooling/cross_compile/releases", "Homepage": "https://github.com/ros-tooling/cross_compile"}, "release_url": "https://pypi.org/project/ros-cross-compile/0.4.0/", "requires_dist": ["docker (<3,>=2)", "setuptools"], "requires_python": ">=3.5", "summary": "A tool to build ROS workspaces for various target architectures and platforms.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ROS / ROS 2 Cross Compile Tool</h1>\n<p><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9c88c96a1213ff46756f8d31e27bd0f909f1ff8c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f726f732d746f6f6c696e672f63726f73735f636f6d70696c65\">\n<a href=\"https://cross_compile.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/079dcbf1e50a4c8f184afd25736ac79097e282b6/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f63726f73735f636f6d70696c652f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p>A tool to automate compiling ROS and ROS 2 workspaces to non-native architectures.</p>\n<p>:construction: <code>ros_cross_compile</code> relies on running emulated builds\nusing QEmu, #69 tracks progress toward enabling cross-compilation.</p>\n<h2>Supported targets</h2>\n<p>This tool supports compiling a workspace for all combinations of the following:</p>\n<ul>\n<li>Architecture: <code>armhf</code>, <code>aarch64</code>, <code>x86_64</code></li>\n<li>ROS Distro\n<ul>\n<li>ROS: <code>kinetic</code>, <code>melodic</code></li>\n<li>ROS 2: <code>dashing</code>, <code>eloquent</code></li>\n</ul>\n</li>\n<li>OS: <code>Ubuntu</code>, <code>Debian</code></li>\n</ul>\n<p>NOTE: ROS 2 supports Debian only as a Tier 3 platform.\nThis means that there are not <code>apt</code> repositories available for the ROS 2 Core on this platform.\nBecause of that, when targeting Debian for a ROS 2 workspace, you must also include the source for the core as well.\nIt is recommended to use a release branch of <code>ros2.repos</code> from <a href=\"https://github.com/ros2/ros2\" rel=\"nofollow\">https://github.com/ros2/ros2</a> to do so, rather than <code>master</code>, so that you are not affected by development branch bugs and API changes.</p>\n<h2>Supported hosts</h2>\n<p>This tool officially supports running on the following host systems.\nNote that many others likely work, but these are being thoroughly tested.</p>\n<ul>\n<li>Ubuntu 18.04 Bionic Beaver</li>\n<li>OSX Mojave</li>\n</ul>\n<h2>Installation</h2>\n<h3>Prerequisites</h3>\n<p>This tool requires that you have already installed</p>\n<ul>\n<li><a href=\"https://docs.docker.com/install/\" rel=\"nofollow\">Docker</a>\n<ul>\n<li>Follow the instructions to add yourself to the <code>docker</code> group as well, so you can run containers as a non-root user</li>\n</ul>\n</li>\n<li>Python 3.5 or higher</li>\n</ul>\n<p>If you are using a Linux host, you must also install QEmu (Docker for OSX performs emulation automatically):</p>\n<pre>sudo apt-get install qemu-user-static\n</pre>\n<h3>Installing ros_cross_compile</h3>\n<p>To install the stable release,</p>\n<pre>pip3 install ros_cross_compile\n</pre>\n<p>If you would like the latest nightly build, you can get it from Test PyPI</p>\n<pre>pip3 install --index-url https://test.pypi.org/simple/ ros_cross_compile\n</pre>\n<h2>How it works, high level</h2>\n<ol>\n<li>Collect dependencies\n<ol>\n<li>Create a Docker image that has <code>rosdep</code></li>\n<li>Run the <code>rosdep</code> image against your target workspace to output a script that describes how to install its dependencies</li>\n</ol>\n</li>\n<li>Create \"sysroot image\" that has everything needed for building target workspace\n<ol>\n<li>Use a base image for the target architecture (aarch64, armhf, ...)</li>\n<li>Install build tools (compilers, cmake, colcon, etc)</li>\n<li>Run the dependency installer script collected in Step 1 (if dependency list hasn't changed since last run, this uses the Docker cache)</li>\n</ol>\n</li>\n<li>Build\n<ol>\n<li>Runs the \"sysroot image\" using QEmu emulation</li>\n<li><code>colcon build</code></li>\n</ol>\n</li>\n</ol>\n<h2>Usage</h2>\n<p>This package installs the <code>ros_cross_compile</code> command.\nThe command's first argument is the path to your ROS workspace.</p>\n<p>Here is a simple invocation for a standard workflow.</p>\n<pre>ros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu --rosdistro dashing\n</pre>\n<p>For information on all available options, run <code>ros_cross_compile -h</code>.\nSee the following sections for information on the more complex options.</p>\n<h3>Package Selection and Build Customization</h3>\n<p>To choose which packages to install dependencies for, this tool runs <code>colcon list</code> on your workspace.\nTo build, it runs <code>colcon build</code>.</p>\n<p>You can provide arbitrary arguments to these commands via the <a href=\"https://colcon.readthedocs.io/en/released/user/configuration.html#defaults-yaml\" rel=\"nofollow\">colcon <code>defaults.yaml</code></a>.</p>\n<p>You can either specify the name of this file via <code>ros_cross_compile --colcon-defaults relative/path/to/defaults.yaml</code>, or if not specified, a file called <code>defaults.yaml</code> will be used if present.</p>\n<p>For example, there are repositories checked out in your workspace that contain packages that are not needed for your application - some repos provide many packages and you may only want one!\nIn this scenario there is a \"bringup\" package that acts as the entry point to your application:</p>\n<pre><span class=\"c1\"># my_workspace/defaults.yaml</span>\n<span class=\"nt\">list</span><span class=\"p\">:</span>\n  <span class=\"c1\"># only install dependencies for source packages that my package depends on</span>\n  <span class=\"nt\">packages-up-to</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">my_application_bringup</span><span class=\"p p-Indicator\">]</span>\n<span class=\"nt\">build</span><span class=\"p\">:</span>\n  <span class=\"c1\"># only build up to my package</span>\n  <span class=\"nt\">packages-up-to</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">my_application_bringup</span><span class=\"p p-Indicator\">]</span>\n  <span class=\"c1\"># example of a boolean commandline argument</span>\n  <span class=\"nt\">merge-install</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">true</span>\n</pre>\n<h3>Custom rosdep script</h3>\n<p>Your ROS application may need nonstandard rosdep rules.\nIf so, you have the option to provide a script to be run before the <code>rosdep install</code> command collects keys.</p>\n<p>This script has access to the \"Custom data directory\" same as the \"Custom setup script\", see the following sections. If you need any extra files for setting up rosdep, they can be accessed via this custom data directory.</p>\n<p>Note that:</p>\n<ol>\n<li>Rosdeps are always collected in an Ubuntu Bionic container, so scripts must be compatible with that</li>\n</ol>\n<p>Here is an example script for an application that adds extra rosdep source lists</p>\n<pre>cp ./custom-data/rosdep-rules/raspicam-node.yaml /etc/ros/rosdep/custom-rules/raspicam-node.yaml\n<span class=\"nb\">echo</span> <span class=\"s2\">\"yaml file:/etc/ros/rosdep/custom-rules/raspicam-node.yaml\"</span> &gt; /etc/ros/rosdep/sources.list.d/22-raspicam-node.list\n<span class=\"nb\">echo</span> <span class=\"s2\">\"yaml https://s3-us-west-2.amazonaws.com/rosdep/python.yaml\"</span> &gt; /etc/ros/rosdep/sources.list.d/18-aws-python.list\n</pre>\n<p>Tool invocation for this example:</p>\n<pre>ros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu <span class=\"se\">\\</span>\n  --custom-rosdep-script /path/to/rosdep-script.sh <span class=\"se\">\\</span>\n  --custom-data-dir /arbitrary/local/directory\n</pre>\n<h3>Custom setup script</h3>\n<p>Your ROS application may have build needs that aren't covered by <code>rosdep install</code>.\nIf this is the case (for example you need to add extra apt repos), use the option <code>--custom-setup-script</code> to execute arbitrary code in the sysroot container.</p>\n<p>The path provided may be absolute, or relative to the current directory.</p>\n<p>Keep in mind</p>\n<ul>\n<li>It's up to the user to determine whether the script is compatible with chosen base platform</li>\n<li>Make sure to specify non-interactive versions of commands, for example <code>apt-get install -y</code>, or the script may hang waiting for input</li>\n<li>You cannot make any assumptions about the state of the apt cache, so run <code>apt-get update</code> before installing packages</li>\n<li>The script runs as root user in the container, so you don't need <code>sudo</code></li>\n</ul>\n<p>Below is an example script for an application that installs some custom Raspberry Pi libraries.</p>\n<pre>apt-get update\napt-get install -y software-properties-common\n\n<span class=\"c1\"># Install Raspberry Pi library that we have not provided a rosdep rule for</span>\nadd-apt-repository ppa:rpi-distro/ppa\napt-get install -y pigpio\n</pre>\n<h3>Custom data directory</h3>\n<p>Your custom setup or rosdep script (see preceding sections) may need some data that is not otherwise accessible.\nFor example, you need to copy some precompiled vendor binaries to a specific location, or provide custom rosdep rules files.\nFor this use case, you can use the option <code>--custom-data-dir</code> to point to an arbitrary path.\nThe sysroot build copies this directory into the build environment, where it's available for use by your custom setup script at <code>./custom-data/</code>.</p>\n<p><strong>Example:</strong></p>\n<p>Custom data directory (<code>/arbitrary/local/directory</code>)</p>\n<pre><code>/arbitrary/local/directory/\n+-- my-data/\n|   +-- something.txt\n</code></pre>\n<p>Setup Script (<code>/path/to/custom-setup.sh</code>)</p>\n<pre><span class=\"ch\">#!/bin/bash</span>\ncat custom-data/something.txt\n</pre>\n<p>Tool invocation:</p>\n<pre>ros_cross_compile /path/to/my/workspace --arch aarch64 --os ubuntu <span class=\"se\">\\</span>\n  --custom-setup-script /path/to/custom-setup.sh <span class=\"se\">\\</span>\n  --custom-data-dir /arbitrary/local/directory\n</pre>\n<p>Now, during the sysroot creation process, you should see the contents of <code>something.txt</code> printed during the execution of the custom script.</p>\n<p>NOTE: for trivial text files, as in the preceding example, you could have created those files fully within the <code>--custom-setup-script</code>. But for large or binary data such as precompiled libraries, this feature comes to the rescue.</p>\n<h2>Tutorial</h2>\n<p>For a new user, this section walks you through a representative use case, step by step.</p>\n<p>This tutorial demonstrates how to cross-compile the <a href=\"https://github.com/ros-tooling/file_talker\" rel=\"nofollow\">File Talker tool</a> against ROS 2 Dashing, to run on an ARM64 Ubuntu system.\nYou can generalize this workflow to any <code>.repos</code> file for your project.</p>\n<p>NOTE: this tutorial assumes a Debian-based (including Ubuntu) Linux distribution as the host platform.</p>\n<h3>Creating a simple source workspace</h3>\n<ol>\n<li>Create a directory for your workspace\n<ul>\n<li><code>mkdir cross_compile_ws</code></li>\n<li><code>cd cross_compile_ws</code></li>\n</ul>\n</li>\n<li>Create a <code>.repos</code> file for <code>vcs</code>\n<ul>\n<li><code>file_talker.repos</code></li>\n</ul>\n<pre><code>repositories:\n  file_talker:\n    type: git\n    url: https://github.com/ros-tooling/file_talker.git\n    version: master\n</code></pre>\n</li>\n<li>Check out the sources to build\n<ul>\n<li><code>mkdir -p src</code></li>\n<li><code>vcs import src &lt; file_talker.repos</code></li>\n</ul>\n</li>\n</ol>\n<h3>Running the cross-compilation</h3>\n<pre>ros_cross_compile <span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span> --rosdistro dashing --arch aarch64 --os ubuntu\n</pre>\n<p>Here is a detailed look at the arguments passed to the script:</p>\n<ul>\n<li><code>--rosdistro dashing</code></li>\n</ul>\n<p>You may specify both ROS and ROS 2 distributions by name, for example, <code>kinetic</code> (ROS) or <code>dashing</code> (ROS 2).\n<code>ros_cross_compile -h</code> prints the supported distributions for this option</p>\n<ul>\n<li><code>--arch aarch64</code></li>\n</ul>\n<p>Target the ARMv8 / ARM64 / aarch64 architecture (which are different names for the same thing).\n<code>ros_cross_compile -h</code> prints the supported architectures for this option.</p>\n<ul>\n<li><code>--os ubuntu</code></li>\n</ul>\n<p>The target OS is Ubuntu - the tool chooses the OS version automatically based on the ROS Distro's target OS.\nIn this case for ROS 2 Dashing - 18.04 Bionic Beaver.</p>\n<h3>Outputs of the build</h3>\n<p>Run the following command</p>\n<pre>ls cross_compile_ws\n</pre>\n<p>If the build succeeded, the directory looks like this:</p>\n<pre><code>src/\n|-- file_talker/\n|-- install_aarch64/\n|-- build_aarch64/\n</code></pre>\n<p>The created directory <code>install_aarch64</code> is the installation of your ROS workspace for your target architecture.\nYou can verify this:</p>\n<pre>$ file cross_compile_ws/install_aarch64/lib/file_talker/file_talker                                                               0s\ncross_compile_ws/install_aarch64/lib/file_talker/file_talker: ELF <span class=\"m\">64</span>-bit LSB shared object, ARM aarch64, version <span class=\"m\">1</span> <span class=\"o\">(</span>GNU/Linux<span class=\"o\">)</span>, dynamically linked, interpreter /lib/ld-, <span class=\"k\">for</span> GNU/Linux <span class=\"m\">3</span>.7.0, BuildID<span class=\"o\">[</span>sha1<span class=\"o\">]=</span>02ede8a648dfa6b5b30c03d54c6d87fd9151389e, not stripped\n</pre>\n<h3>Using the build on a target platform</h3>\n<p>Copy <code>install_aarch64</code> onto the target system into a location of your choosing. It contains the binaries for <em>your</em> workspace.</p>\n<p>If your workspace has any dependencies that are outside the source tree - that is, if <code>rosdep</code> had anything to install during the build - then you still need to install these dependencies on the target system.</p>\n<pre><span class=\"c1\"># Run this on the target system, which must have rosdep already installed</span>\n<span class=\"c1\"># remember `rosdep init`, `rosdep update`, `apt-get update` if you need them</span>\nrosdep install --from-paths install_aarch64/share --ignore-src --rosdistro dashing -y\n</pre>\n<p>Now you may use the ROS installation as you would on any other system</p>\n<pre><span class=\"nb\">source</span> install_aarch64/setup.bash\nros2 run file_talker file_talker my_text_file.txt\n</pre>\n<h2>License</h2>\n<p>This library is licensed under the Apache 2.0 License.</p>\n<h2>Build status</h2>\n<table>\n<thead>\n<tr>\n<th>ROS 2 Release</th>\n<th>Branch Name</th>\n<th>Development</th>\n<th>Source Debian Package</th>\n<th>X86-64 Debian Package</th>\n<th>ARM64 Debian Package</th>\n<th>ARMHF Debian package</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Latest</td>\n<td><code>master</code></td>\n<td><a href=\"https://github.com/ros-tooling/cross_compile/actions\" rel=\"nofollow\"><img alt=\"Test Pipeline Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/418bc6806cd2f0e0be13e26f7aa280fec0f9910e/68747470733a2f2f6769746875622e636f6d2f726f732d746f6f6c696e672f63726f73735f636f6d70696c652f776f726b666c6f77732f5465737425323063726f73735f636f6d70696c652f62616467652e737667\"></a></td>\n<td>N/A</td>\n<td>N/A</td>\n<td>N/A</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>Dashing</td>\n<td><code>dashing-devel</code></td>\n<td><a href=\"http://build.ros2.org/job/Ddev__cross_compile__ubuntu_bionic_amd64\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/286e179a1aec2b3c2ec172a05e3027e22bee9bb3/687474703a2f2f6275696c642e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d446465765f5f63726f73735f636f6d70696c655f5f7562756e74755f62696f6e69635f616d643634\"></a></td>\n<td><a href=\"http://build.ros2.org/job/Dsrc_uB__cross_compile__ubuntu_bionic__source\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5036c57fa6c4314b3f540dd379237843e10c4982/687474703a2f2f6275696c642e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d447372635f75425f5f63726f73735f636f6d70696c655f5f7562756e74755f62696f6e69635f5f736f75726365\"></a></td>\n<td><a href=\"http://build.ros2.org/job/Dbin_uB64__cross_compile__ubuntu_bionic_amd64__binary\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/34038c8dd982d02805268f94d1b2d11734781906/687474703a2f2f6275696c642e726f73322e6f72672f6275696c645374617475732f69636f6e3f6a6f623d4462696e5f754236345f5f63726f73735f636f6d70696c655f5f7562756e74755f62696f6e69635f616d6436345f5f62696e617279\"></a></td>\n<td>N/A</td>\n<td>N/A</td>\n</tr></tbody></table>\n\n          </div>"}, "last_serial": 6808932, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "4d7c85ba8ceb407cc3ba4b0b361b1cbd", "sha256": "52377d41eca9fbcd7b2de2c9032676ce057062c9d6585032a8035dff3b34db13"}, "downloads": -1, "filename": "ros_cross_compile-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4d7c85ba8ceb407cc3ba4b0b361b1cbd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20814, "upload_time": "2020-01-23T22:27:52", "upload_time_iso_8601": "2020-01-23T22:27:52.364697Z", "url": "https://files.pythonhosted.org/packages/1f/bf/f578d713f03008470a44fa6b4a393a338245a5c2db2994a484eb0199215f/ros_cross_compile-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "226e20d044c530b55aa205af7a4c7dc5", "sha256": "7d1aa6dc1816ed4646abfef9faf836a2f311ed6b13111f3bf3b8319c154610d4"}, "downloads": -1, "filename": "ros_cross_compile-0.3.0.tar.gz", "has_sig": false, "md5_digest": "226e20d044c530b55aa205af7a4c7dc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23222, "upload_time": "2020-01-23T22:27:54", "upload_time_iso_8601": "2020-01-23T22:27:54.896209Z", "url": "https://files.pythonhosted.org/packages/d1/67/68705528509277db1c0f453ea1240a09464640b489c63ffdedb14f728201/ros_cross_compile-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "01814de1f8153e3349f3218564b05b82", "sha256": "933f324b8a4368e9829d78c6c21764f32ddea68d853e6282b8bf98de84869bd8"}, "downloads": -1, "filename": "ros_cross_compile-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "01814de1f8153e3349f3218564b05b82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27150, "upload_time": "2020-03-13T21:10:19", "upload_time_iso_8601": "2020-03-13T21:10:19.102044Z", "url": "https://files.pythonhosted.org/packages/b3/2f/bf2e31d79327ae9b75d0fcccafc3403d31e9116938a778fb3d462f886ab3/ros_cross_compile-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e9f0ad8005a5bcb0705978eda6a609c", "sha256": "ad53b993cd78d1d22494fa3139c04eefea41fa35143cf774fef5d8ce82d61080"}, "downloads": -1, "filename": "ros_cross_compile-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1e9f0ad8005a5bcb0705978eda6a609c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21129, "upload_time": "2020-03-13T21:10:20", "upload_time_iso_8601": "2020-03-13T21:10:20.674796Z", "url": "https://files.pythonhosted.org/packages/2e/18/ffbd75f6606dc35f8f4dd2332319ae8e8cbc4e9d29cc71098857e47ab71c/ros_cross_compile-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "01814de1f8153e3349f3218564b05b82", "sha256": "933f324b8a4368e9829d78c6c21764f32ddea68d853e6282b8bf98de84869bd8"}, "downloads": -1, "filename": "ros_cross_compile-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "01814de1f8153e3349f3218564b05b82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 27150, "upload_time": "2020-03-13T21:10:19", "upload_time_iso_8601": "2020-03-13T21:10:19.102044Z", "url": "https://files.pythonhosted.org/packages/b3/2f/bf2e31d79327ae9b75d0fcccafc3403d31e9116938a778fb3d462f886ab3/ros_cross_compile-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e9f0ad8005a5bcb0705978eda6a609c", "sha256": "ad53b993cd78d1d22494fa3139c04eefea41fa35143cf774fef5d8ce82d61080"}, "downloads": -1, "filename": "ros_cross_compile-0.4.0.tar.gz", "has_sig": false, "md5_digest": "1e9f0ad8005a5bcb0705978eda6a609c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 21129, "upload_time": "2020-03-13T21:10:20", "upload_time_iso_8601": "2020-03-13T21:10:20.674796Z", "url": "https://files.pythonhosted.org/packages/2e/18/ffbd75f6606dc35f8f4dd2332319ae8e8cbc4e9d29cc71098857e47ab71c/ros_cross_compile-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:16 2020"}