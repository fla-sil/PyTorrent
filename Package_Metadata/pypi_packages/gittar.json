{"info": {"author": "Marc Brinkmann", "author_email": "git@marcbrinkmann.de", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "gittar\n======\n\nGittar creates a git commit from a directory or an archive, allowing you to\nstore a sequence of selective filesystem-snapshots as git commits.\n\n\nWhy?\n----\n\nThe initial use case for ``gittar`` was storing a compiled version of an\napplication in a seperate root inside a git repository. Here's an example:\n\nAssume you have a webapplication that needs to compile its assets before being\ndeployed. You do not want to have to install a lot of LESS or JS compilers, CSS\nminifiers, etc. on your production environment.\n\nFirst, you run your build tool (e.g. ``scons`` when using `the scons-tools web\nmodule <https://github.com/mbr/scons-tools>`_), now your app is inside the\ndirectory ``myapp``, including the compiled static files, while the source\nfiles reside outside the ``myapp`` directory.\n\nNow, you can run::\n\n  gittar -b web file:myapp\n\nThis will create a new commit containing everything inside the ``myapp``\ndirectory. If the branch ``web`` does not exist, it will be created and will\npoint to the new commit, which will have no parent. If the branch did exist\nbefore, the new commit will have it as a parent and the branch will be updated.\n\nThe hash of the new commit will be printed to stdout. If the ``-b`` option is\nnot specified, this is the only way to reach the commit.\n\nA simple application for this is deploying to `heroku <http://heroku.com>`_.\nBuild your app, add a new ``gittar``-commit to the web branch and push it using\n``git push heroku web:master``.\n\n\nSchemes\n-------\n\n``gittar`` can add files from ZIP-Archives, tar-Archives or plain directories\nand files.\n\nAll sources for inclusion are specified using the following syntax::\n\n  scheme:arg1:arg2:...:named_arg1=value1:named_arg2=value2:...\n\nA scheme is one of ``file``, ``zip`` or ``tar``. The arguments and named\narguments are passed on to the sources collecting the files and have meanings\ndepending on the scheme.\n\nMultiple schemes can be specified in a single command.\n\nThe file-scheme\n~~~~~~~~~~~~~~~\n\nA single file or a directory can be added as follows::\n\n  gittar file:myfile file:/my/home/special_file file:/some/directory\n\nThis will add ``myfile`` to the commit with the path ``myfile``. The file\n``/my/home/special_file`` will also be added, but named ``special_file`` (no\npath) inside the commit.\n\nAssuming ``/some/directory`` is a directory, all files in it will be added\nrecursively, without the ``/some/`` path prefix. Example: A file\n``/some/directory/foo/bar`` will be added as ``directory/foo/bar`` to the\ncommit.\n\nSimilarities and differences to tar\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nSpecifying ``file:`` targets is similiar to tar, with one key differences:\nInstead of adding absolute paths, ``gittar`` will strip any path information\n(but keep subdirectory trees intact).\n\nSpecifically, ``gittar`` will never change pathnames depending on your current\nworking directory.\n\nWildcards and directories as root\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nSince directories are added recursively and always kept in the relative path,\nit's not possible this way to add a directory as the root. One solution is to\nuse wildcards (note the quotes to prevent wildcard expansion by the shell)::\n\n  gittar 'file:/some/directory/*'\n\nIf there are three files in ``/some/directory`` named ``a_file``, ``a_dir`` and\n``foo``, the command above will be logically expanded to::\n\n  gittar 'file:/some/directory/a_file' 'file:/some/directory/a_dir' 'file:/some/directory/foo'\n\nThis will result in ``a_file`` being added to the root of the commit.\n\nNote that wildcard-expansion is done UNIX-style using the ``glob`` module.\nFiles starting with a dot (``.``) are not included using ``*``. To add all\nfiles in a directory ``/foo`` and not having them as subdirectories, you need\nto use the following command::\n\n  gittar 'file:/foo/*' 'file:/foo/.*'\n\nThe zip-scheme\n~~~~~~~~~~~~~~\n\nAdds the contents of a zip-Archive::\n\n  gittar zip:/path/to/some/archive.zip\n\nThis will add all files inside ``/path/to/some/archive.zip`` with their\nrelative paths to the commit.\n\nThe tar-scheme\n~~~~~~~~~~~~~~\n\nWorks fairly similiar to the ``zip``-scheme, but for tar archives. Automatic\ndetection of compression is done. Example::\n\n  gittar tar:somearchive.tar tar:/another/archive.tar.bz2\n\n\nCommon Options\n--------------\n\nExtra options can be specififed, some are valid for all sources.\n\nInclusion/Exclusion\n~~~~~~~~~~~~~~~~~~~\n\nThe ``include`` and ``exclude`` options can be used to specify which files\nshould be included in the commit. Example::\n\n  gittar tar:myarchive.tar:include=*.css:include=output/*.html:exclude=~*\n\nNote: You will most likely have to enter this with backslash-escaped asterisks\n(``\\*``) on your shell.\n\nThe command above will include all CSS files and all HTML files from the output\nfolder, provided they do not start with a tilde``~``.\n\nIf no include option is given all not-excluded files are included.\n\nRegular expressions\n~~~~~~~~~~~~~~~~~~~\n\nThe ``include`` and ``exclude`` commands use UNIX shell patterns. You can use\npython (Perl-like) regular expressions by using ``rinclude`` and ``rexclude``\ninstead.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/mbr/gittar", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "gittar", "package_url": "https://pypi.org/project/gittar/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gittar/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/mbr/gittar"}, "release_url": "https://pypi.org/project/gittar/0.6/", "requires_dist": null, "requires_python": null, "summary": "The inverse of git archive. Adds a new commit from an archiveor the filesystem.", "version": "0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Gittar creates a git commit from a directory or an archive, allowing you to\nstore a sequence of selective filesystem-snapshots as git commits.</p>\n<div id=\"why\">\n<h2>Why?</h2>\n<p>The initial use case for <tt>gittar</tt> was storing a compiled version of an\napplication in a seperate root inside a git repository. Here\u2019s an example:</p>\n<p>Assume you have a webapplication that needs to compile its assets before being\ndeployed. You do not want to have to install a lot of LESS or JS compilers, CSS\nminifiers, etc. on your production environment.</p>\n<p>First, you run your build tool (e.g. <tt>scons</tt> when using <a href=\"https://github.com/mbr/scons-tools\" rel=\"nofollow\">the scons-tools web\nmodule</a>), now your app is inside the\ndirectory <tt>myapp</tt>, including the compiled static files, while the source\nfiles reside outside the <tt>myapp</tt> directory.</p>\n<p>Now, you can run:</p>\n<pre>gittar -b web file:myapp\n</pre>\n<p>This will create a new commit containing everything inside the <tt>myapp</tt>\ndirectory. If the branch <tt>web</tt> does not exist, it will be created and will\npoint to the new commit, which will have no parent. If the branch did exist\nbefore, the new commit will have it as a parent and the branch will be updated.</p>\n<p>The hash of the new commit will be printed to stdout. If the <tt><span class=\"pre\">-b</span></tt> option is\nnot specified, this is the only way to reach the commit.</p>\n<p>A simple application for this is deploying to <a href=\"http://heroku.com\" rel=\"nofollow\">heroku</a>.\nBuild your app, add a new <tt>gittar</tt>-commit to the web branch and push it using\n<tt>git push heroku web:master</tt>.</p>\n</div>\n<div id=\"schemes\">\n<h2>Schemes</h2>\n<p><tt>gittar</tt> can add files from ZIP-Archives, tar-Archives or plain directories\nand files.</p>\n<p>All sources for inclusion are specified using the following syntax:</p>\n<pre>scheme:arg1:arg2:...:named_arg1=value1:named_arg2=value2:...\n</pre>\n<p>A scheme is one of <tt>file</tt>, <tt>zip</tt> or <tt>tar</tt>. The arguments and named\narguments are passed on to the sources collecting the files and have meanings\ndepending on the scheme.</p>\n<p>Multiple schemes can be specified in a single command.</p>\n<div id=\"the-file-scheme\">\n<h3>The file-scheme</h3>\n<p>A single file or a directory can be added as follows:</p>\n<pre>gittar file:myfile file:/my/home/special_file file:/some/directory\n</pre>\n<p>This will add <tt>myfile</tt> to the commit with the path <tt>myfile</tt>. The file\n<tt>/my/home/special_file</tt> will also be added, but named <tt>special_file</tt> (no\npath) inside the commit.</p>\n<p>Assuming <tt>/some/directory</tt> is a directory, all files in it will be added\nrecursively, without the <tt>/some/</tt> path prefix. Example: A file\n<tt>/some/directory/foo/bar</tt> will be added as <tt>directory/foo/bar</tt> to the\ncommit.</p>\n<div id=\"similarities-and-differences-to-tar\">\n<h4>Similarities and differences to tar</h4>\n<p>Specifying <tt>file:</tt> targets is similiar to tar, with one key differences:\nInstead of adding absolute paths, <tt>gittar</tt> will strip any path information\n(but keep subdirectory trees intact).</p>\n<p>Specifically, <tt>gittar</tt> will never change pathnames depending on your current\nworking directory.</p>\n</div>\n<div id=\"wildcards-and-directories-as-root\">\n<h4>Wildcards and directories as root</h4>\n<p>Since directories are added recursively and always kept in the relative path,\nit\u2019s not possible this way to add a directory as the root. One solution is to\nuse wildcards (note the quotes to prevent wildcard expansion by the shell):</p>\n<pre>gittar 'file:/some/directory/*'\n</pre>\n<p>If there are three files in <tt>/some/directory</tt> named <tt>a_file</tt>, <tt>a_dir</tt> and\n<tt>foo</tt>, the command above will be logically expanded to:</p>\n<pre>gittar 'file:/some/directory/a_file' 'file:/some/directory/a_dir' 'file:/some/directory/foo'\n</pre>\n<p>This will result in <tt>a_file</tt> being added to the root of the commit.</p>\n<p>Note that wildcard-expansion is done UNIX-style using the <tt>glob</tt> module.\nFiles starting with a dot (<tt>.</tt>) are not included using <tt>*</tt>. To add all\nfiles in a directory <tt>/foo</tt> and not having them as subdirectories, you need\nto use the following command:</p>\n<pre>gittar 'file:/foo/*' 'file:/foo/.*'\n</pre>\n</div>\n</div>\n<div id=\"the-zip-scheme\">\n<h3>The zip-scheme</h3>\n<p>Adds the contents of a zip-Archive:</p>\n<pre>gittar zip:/path/to/some/archive.zip\n</pre>\n<p>This will add all files inside <tt>/path/to/some/archive.zip</tt> with their\nrelative paths to the commit.</p>\n</div>\n<div id=\"the-tar-scheme\">\n<h3>The tar-scheme</h3>\n<p>Works fairly similiar to the <tt>zip</tt>-scheme, but for tar archives. Automatic\ndetection of compression is done. Example:</p>\n<pre>gittar tar:somearchive.tar tar:/another/archive.tar.bz2\n</pre>\n</div>\n</div>\n<div id=\"common-options\">\n<h2>Common Options</h2>\n<p>Extra options can be specififed, some are valid for all sources.</p>\n<div id=\"inclusion-exclusion\">\n<h3>Inclusion/Exclusion</h3>\n<p>The <tt>include</tt> and <tt>exclude</tt> options can be used to specify which files\nshould be included in the commit. Example:</p>\n<pre>gittar tar:myarchive.tar:include=*.css:include=output/*.html:exclude=~*\n</pre>\n<p>Note: You will most likely have to enter this with backslash-escaped asterisks\n(<tt>\\*</tt>) on your shell.</p>\n<p>The command above will include all CSS files and all HTML files from the output\nfolder, provided they do not start with a tilde``~``.</p>\n<p>If no include option is given all not-excluded files are included.</p>\n</div>\n<div id=\"regular-expressions\">\n<h3>Regular expressions</h3>\n<p>The <tt>include</tt> and <tt>exclude</tt> commands use UNIX shell patterns. You can use\npython (Perl-like) regular expressions by using <tt>rinclude</tt> and <tt>rexclude</tt>\ninstead.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1976462, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "1bfd3df7c616982da3da561d63974f73", "sha256": "0fd0ae20ad058e52c4bb0b650a4a9f9edfaaf5613ed525c9f9780fdf8122582f"}, "downloads": -1, "filename": "gittar-0.1.tar.gz", "has_sig": true, "md5_digest": "1bfd3df7c616982da3da561d63974f73", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4207, "upload_time": "2013-02-17T03:51:41", "upload_time_iso_8601": "2013-02-17T03:51:41.888624Z", "url": "https://files.pythonhosted.org/packages/e7/58/c384caad86a54f9cc2e85e12048a8696963ea5b995f3471ab7a585cf02c8/gittar-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "747f60295fadd33e3955873b62493132", "sha256": "51eda60e562ab3a3c385e941047de93955e92ff6665b70f9e2c008c8bc12d185"}, "downloads": -1, "filename": "gittar-0.2.tar.gz", "has_sig": true, "md5_digest": "747f60295fadd33e3955873b62493132", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5816, "upload_time": "2013-02-18T00:45:04", "upload_time_iso_8601": "2013-02-18T00:45:04.039435Z", "url": "https://files.pythonhosted.org/packages/fb/77/a4cca59db3a084cfa082cf073be08a5cfdfca4f4ff18e7b5b070be7e139b/gittar-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0f1552e20fed516c79d9bbeeb91f676c", "sha256": "a534e0b823e2029aa3ceabc9748917e6ebf6d8a5da1ae9b40aa5744d99a19e44"}, "downloads": -1, "filename": "gittar-0.2.1.tar.gz", "has_sig": true, "md5_digest": "0f1552e20fed516c79d9bbeeb91f676c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6137, "upload_time": "2013-02-18T00:52:15", "upload_time_iso_8601": "2013-02-18T00:52:15.988625Z", "url": "https://files.pythonhosted.org/packages/49/08/dd2dae70d0db2ac78930c0603d2360f926070fc19d703bdd9f19defb3917/gittar-0.2.1.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "2253c6374c4891dc77438b91ad4e3ada", "sha256": "5cb171663d313bd03a11e6935d4897a7446271db4caa1f34a7dbdb0c6fed9229"}, "downloads": -1, "filename": "gittar-0.4.tar.gz", "has_sig": true, "md5_digest": "2253c6374c4891dc77438b91ad4e3ada", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6167, "upload_time": "2013-02-18T01:14:16", "upload_time_iso_8601": "2013-02-18T01:14:16.456914Z", "url": "https://files.pythonhosted.org/packages/c6/e7/99c0eac6e3bb2e8779b654d811032b2ed93236d9a83077974ff05e24e842/gittar-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "dbc7e441a2c042f9ae304c00e52a5628", "sha256": "59665addc45e1776bfd2913bf57b0ff0a2063d74d564c3472d5b83f9a8a024a2"}, "downloads": -1, "filename": "gittar-0.4.1.tar.gz", "has_sig": true, "md5_digest": "dbc7e441a2c042f9ae304c00e52a5628", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6157, "upload_time": "2013-02-18T01:46:16", "upload_time_iso_8601": "2013-02-18T01:46:16.749276Z", "url": "https://files.pythonhosted.org/packages/55/51/9e43732aa477b791e800a77fef55bb5c4cf6d58c9ff4e9d00005deea9337/gittar-0.4.1.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "62c022ca43522fa9140754d242ed1766", "sha256": "12b127547c8b78f8a19b5dd81cfd158f55ef5d3c74281a977a731956376d3b2a"}, "downloads": -1, "filename": "gittar-0.5.tar.gz", "has_sig": true, "md5_digest": "62c022ca43522fa9140754d242ed1766", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6900, "upload_time": "2013-11-25T04:16:54", "upload_time_iso_8601": "2013-11-25T04:16:54.809402Z", "url": "https://files.pythonhosted.org/packages/ba/e3/50d6feafff1ce1ed28a2f87e12a6309db6c147ce7ce1ba1ec690cb83810b/gittar-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "f23ec26375be0d38fa738abd6ea55c06", "sha256": "8bd7c796a976bd61c8178d0503efecbef7a3991c6f336d33e1c35cd96be7c6b5"}, "downloads": -1, "filename": "gittar-0.6.tar.gz", "has_sig": true, "md5_digest": "f23ec26375be0d38fa738abd6ea55c06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7041, "upload_time": "2016-02-25T16:08:50", "upload_time_iso_8601": "2016-02-25T16:08:50.118705Z", "url": "https://files.pythonhosted.org/packages/0b/c5/5313f9d715cba3d95ec5f94bdcfae024157a43c015fe866c0418a3f13ed8/gittar-0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f23ec26375be0d38fa738abd6ea55c06", "sha256": "8bd7c796a976bd61c8178d0503efecbef7a3991c6f336d33e1c35cd96be7c6b5"}, "downloads": -1, "filename": "gittar-0.6.tar.gz", "has_sig": true, "md5_digest": "f23ec26375be0d38fa738abd6ea55c06", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7041, "upload_time": "2016-02-25T16:08:50", "upload_time_iso_8601": "2016-02-25T16:08:50.118705Z", "url": "https://files.pythonhosted.org/packages/0b/c5/5313f9d715cba3d95ec5f94bdcfae024157a43c015fe866c0418a3f13ed8/gittar-0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:45 2020"}