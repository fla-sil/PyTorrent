{"info": {"author": "XESS Corp.", "author_email": "info@xess.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "===============================\nskidl\n===============================\n\n.. image:: https://img.shields.io/pypi/v/skidl.svg\n        :target: https://pypi.python.org/pypi/skidl\n.. image:: https://travis-ci.com/xesscorp/skidl.svg?branch=master\n    :target: https://travis-ci.com/xesscorp/skidl\n\n\nSKiDL is a module that allows you to compactly describe the interconnection of \nelectronic circuits and components using Python.\nThe resulting Python program performs electrical rules checking\nfor common mistakes and outputs a netlist that serves as input to\na PCB layout tool.\n\n* Free software: MIT license\n* Documentation: http://xesscorp.github.io/skidl\n\nFeatures\n--------\n\n* Has a powerful, flexible syntax (because it *is* Python).\n* Permits compact descriptions of electronic circuits (think about *not* tracing\n  signals through a multi-page schematic).\n* Allows textual descriptions of electronic circuits (think about using \n  ``diff`` and `git <https://en.wikipedia.org/wiki/Git_(software)>`_ for circuits).\n* Performs electrical rules checking (ERC) for common mistakes (e.g., unconnected device I/O pins).\n* Supports linear / hierarchical / mixed descriptions of electronic designs.\n* Fosters design reuse (think about using `PyPi <https://pypi.org/>`_ and `Github <https://github.com/>`_\n  to distribute electronic designs).\n* Makes possible the creation of *smart circuit modules* whose behavior / structure are changed parametrically\n  (think about filters whose component values are automatically adjusted based on your\n  desired cutoff frequency).\n* Can work with any ECAD tool (only two methods are needed: one for reading the part libraries and another\n  for outputing the correct netlist format).\n* Can perform SPICE simulations (Python 3 only).\n* Takes advantage of all the benefits of the Python ecosystem (because it *is* Python).\n\nAs a very simple example (and you can see more examples in the \n`SKiDL blog <https://xesscorp.github.io/skidl/docs/_site/blog/>`_),\nthe SKiDL program below describes a circuit that\ntakes an input voltage, divides it by three, and outputs it:\n\n.. code-block:: python\n\n    from skidl import *\n\n    # Create input & output voltages and ground reference.\n    vin, vout, gnd = Net('VI'), Net('VO'), Net('GND')\n\n    # Create two resistors.\n    r1, r2 = 2 * Part(\"Device\", 'R', TEMPLATE, footprint='Resistor_SMD.pretty:R_0805_2012Metric')\n    r1.value = '1K'   # Set upper resistor value.\n    r2.value = '500'  # Set lower resistor value.\n\n    # Connect the nets and resistors.\n    vin += r1[1]      # Connect the input to the upper resistor.\n    gnd += r2[2]      # Connect the lower resistor to ground.\n    vout += r1[2], r2[1] # Output comes from the connection of the two resistors.\n\n    generate_netlist()\n\nAnd this is the output that can be fed to a program like KiCad's ``PCBNEW`` to\ncreate the physical PCB::\n\n    (export (version D)                                                                                    \n      (design                                                                                              \n        (source \"C:\\xesscorp\\KiCad\\tools\\skidl\\tests\\vdiv.py\")                                             \n        (date \"09/14/2018 08:49 PM\")                                                                       \n        (tool \"SKiDL (0.0.23)\"))                                                                           \n      (components                                                                                          \n        (comp (ref R1)                                                                                     \n          (value 1K)                                                                                       \n          (footprint Resistor_SMD.pretty:R_0805_2012Metric)                                                                 \n          (fields                                                                                          \n            (field (name description) Resistor)                                                            \n            (field (name keywords) \"r res resistor\"))                                                      \n          (libsource (lib device) (part R))                                                                \n          (sheetpath (names /top/12995167876889795071) (tstamps /top/12995167876889795071)))               \n        (comp (ref R2)                                                                                     \n          (value 500)                                                                                      \n          (footprint Resistor_SMD.pretty:R_0805_2012Metric)                                                                 \n          (fields                                                                                          \n            (field (name description) Resistor)                                                            \n            (field (name keywords) \"r res resistor\"))                                                      \n          (libsource (lib device) (part R))                                                                \n          (sheetpath (names /top/8869138953290924483) (tstamps /top/8869138953290924483))))                \n      (nets                                                                                                \n        (net (code 0) (name GND)                                                                           \n          (node (ref R2) (pin 2)))                                                                         \n        (net (code 1) (name VI)                                                                            \n          (node (ref R1) (pin 1)))                                                                         \n        (net (code 2) (name VO)                                                                            \n          (node (ref R1) (pin 2))                                                                          \n          (node (ref R2) (pin 1))))                                                                        \n    )                                                                                                      \n\n\n\n\nHistory\n-------\n\n0.0.29 (2020-01-30)\n______________________\n\n* Added XSPICE parts capability to SPICE simulations. \n\n\n0.0.28 (2019-12-17)\n______________________\n\n* The ``zyc`` utility was split into a separate repository and placed on PyPi.\n* Fixed slicing of grouped part pins so things like ``ram['A[1]']`` won't grab ``A1``, ``A10``, ``A11``, etc. \n\n\n0.0.27 (2019-12-16)\n______________________\n\n* Prevent changing the name of net 0 when generating a SPICE netlist.\n* Fixed Pin, Net, Bus and Part iterators so they'll work in nested loops.\n* Part units are automatically added when a part is parsed.\n* Files are now opened for reading using latin_1 encoding to allow special symbols used by KiCad.\n* Part pins can now be aliased directly, e.g. `uc[5].aliases += 'gp0'`.\n* Added class method get() to Part to allow finding a part based on name, reference, description.\n* Refactored ERC functions to allow user-extensibility.\n* Created a base object for Circuit, Part, Pin, Net, and Bus objects.\n* Added an aliases property to the SKiDL base object so all its children could be aliased.\n* Updated to perform simulations with ngspice version 30.\n* Added a notes property to allow attachment of user notes to Parts, Pins, Nets, etc.\n* Added net class to net objects for specifying net-specific design rules in PCBNEW.\n* Ignore multiple pins with the same number in symbols with DeMorgan equivalents.\n* Fixed problem with non-ASCII chars (e.g. Ohms) in strings.\n* Sped-up part/net naming using heap/cache, binary search, sets.\n* Sped-up by storing net traversals to avoid recomputation.\n* Fixed processing of slices in things like sdram['A[0:15]'].\n* Sped-up part_search() by eliminating unnecessary part parsing.\n* Improved schematic generation with graphviz.\n* Search now allows AND/OR of parenthesized terms.\n* New GUI for searching for parts and footprints.\n* Footprint libraries to search are now selected from the global fp-lib-table file.\n* KiCad library component field values are now stored in a dict in Part indexed by the field name or F0, F1, F2... \n* KiCad library component field values are also stored as Part attributes using the field name or F0, F1, F2...\n* Added `p` and `n` attributes to `Part` object to permit explicit reference to pin numbers or names.\n\n\n0.0.26 (2019-01-25)\n______________________\n\n* ``search`` command no longer looks in backup library because that leads to erroneous hits in all libraries.\n* Part objects will now iterate through their pins and len() will return the number of pins.\n* Updated netlist_to_skidl utility to account for new version of kinparse.\n\n\n0.0.25 (2018-12-30)\n______________________\n\n* Updated website.\n* KISYSMOD is no longer used to find part libraries, only KICAD_SYMBOL_DIR is used now.\n\n\n0.0.24 (2018-09-15)\n______________________\n\n* Fixed an error where creating a backup part library for a design would create extra pins attached to the nets.\n\n\n0.0.23 (2018-08-25)\n______________________\n\n* Added Network objects to make it easy to create serial & parallel combinations of two-pin parts.\n* SKiDL design hierarchy is now embedded in the KiCad netlist that's generated.\n\n\n0.0.22 (2018-05-XX)\n______________________\n\n* Added Interface objects for storing complicated sets of I/O signals for subsystems.\n* ERC no longer redundantly checks every segment of a multi-segment net and reports multiple errors.\n* copy() function of Part, Bus, Pin, Net objects now returns a scalar object while copy(1) returns a list with one object.\n* Bus, Pin, and Net objects now have iterators.\n* Corrected initialization of KiCad library search paths.\n\n********************************************************************\n\n0.0.21 (2018-04-30)\n______________________\n\n* Added pull() and fetch() methods for getting/creating existing/new Net and Bus objects.\n* Added drive property to pins to override their default pin function attribute.\n* Part pins and units can now be accessed as attributes.\n* Nets, pins, and buses now support the width property.\n* Indexing with brackets now works equivalently for pins, nets, and buses.\n* Grouped part pins (such as address and data buses) can now be accessed using a slice-like notation, e.g. memory['ADDR[0:7]'].\n\n\n0.0.20 (2018-03-08)\n______________________\n\n* Matching of pin lists now begins with normal string matching before using regexes.\n* Added more tests and fixed existing tests.\n\n\n0.0.19 (2018-02-20)\n______________________\n\n* Selecting part pins now looks for exact match before falling back to regex matching.\n* PySpice now needs to be manually installed to perform SPICE simulations.\n* SPICE simulations of subcircuits (.SUBCKT) now supported.\n* Improvements/additions to the library of supported SPICE parts.\n\n\n0.0.18 (2018-02-07)\n______________________\n\n* SPICE simulations of circuits now supported (Python 3 only).\n\n\n0.0.17 (2018-01-23)\n______________________\n\n* Modularized code into separate files.\n\n\n0.0.16 (2018-01-16)\n______________________\n\n* Parsing of KiCad EESchema libraries made more robust.\n* DEFAULT_TOOL replaced with set_default_tool() function.\n* Some code simplification by using a context manager for opening files.\n\n\n0.0.15 (2018-01-09)\n______________________\n\n* Testing made more robust.\n\n\n0.0.14 (2018-01-05)\n______________________\n\n* KiCad netlists are now parsed using the external package kinparse.\n* Cleaned-up pylint-identified issues.\n* Removed absolute file paths to libraries from tests.\n\n\n0.0.13 (2017-08-20)\n______________________\n\n* Fixed problem where the search function was only returning parts found in the last library searched.\n\n\n0.0.12 (2017-04-20)\n______________________\n\n* Use of builtin now works with Python 2 & 3.\n* Started using namedtuple in some places (like net traversal) for clarity.\n* Corrected pin-to-pin connections so if a net is created, it goes into the same Circuit the pins are members of.\n* Part templates can now contain a reference to a Circuit object that will be applied when the template is instantiated.\n* When pins are connected to nets, or nets to nets, the resulting set of connected nets are all given the same name.\n* Buses are not added to a Circuit object if they are already members of it. This fix caused the next problem.\n* Buses weren't getting added to the Circuit object because they already contained a reference to the Circuit. Fixed by clearing ref before adding to Circuit.\n* Created mini_reset() method to clear circuitry without clearing library cache so the libraries don't have to be loaded again (slow).\n* search() utility now prints the names of libraries as they are searched so user sees progress.\n* Fixed exceptions if part definition contained non-unicode stuff.\n* Hide exceptions that occur when using the show() utility.\n* More tests added for NC nets and hand-crafted parts.\n* default_circuit and the NC net for the active circuit are now made accessible in all modules using __builtin__.\n* Corrected error messages that referenced wrong/non-existing variable.\n* Inserted NO_LIB for the library if it doesn't exist when generating KiCad netlists or XML.\n* Attributes can now be passed when creating a Circuit object.\n* Pins are now associated with part when added to the part.\n* Minimum and maximum pins for a part are now computed as needed.\n* Each Circuit object now has its own NC net.\n* Added tests for bus movement and copying.\n* Implemented bus movement between Circuit objects.\n* Additional test cases were created.\n* Nets and Parts can now be removed from Circuits.\n* The circuit that pins and nets are in is now checked before connections are made so cross-circuit connections are not created.\n* Default members were added to Pin and Part objects so they would always exist and not cause errors when missing.\n* Implemented moving Parts and Nets from one circuit to another (almost).\n* Nets with no attached pins are now added to a circuit.\n* Re-wrote some tests to account for the presence of no-pin nets in a circuit.\n* A class method was missing its 'self' argument.\n* Fixed @subcircuit decorator so it won't cause an error if the function it decorates doesn't have a 'circuit' keyword argument.\n* Split the unit tests across multiple files. Added setup/teardown code.\n* Added capability to create multiple, independent Circuit objects to which Parts and Nets can be assigned. The default circuit is still the target if not Circuit is explicitly referenced.\n* Added IOError to exception list for opening a SKiDL part library.\n\n\n0.0.11 (2017-04-04)\n______________________\n\n* Part libraries in SKiDL format are now supported.\n* Parts can now be created on-the-fly and instantiated or added to libraries.\n* The parts used in a circuit can be stored in a backup SKiDL library and used if the original libraries are missing.\n* The KiCad standard part libraries were converted to SKiDL libraries and placed in skidl.libs.\n\n\n0.0.10 (2017-03-13)\n______________________\n\n* Nets without pins can now be merged.\n* Parts and Pins are now sorted when netlists are generated.\n* For an existing Bus, new bus lines can be inserted at any position or the bus can be extended.\n\n\n0.0.9 (2017-02-16)\n______________________\n\n* Use getattr() instead of __class__.__dict__ so that subclasses of SKiDL objects\n  can find attributes named within strings without searching the __mor__.\n\n\n0.0.8 (2017-01-11)\n______________________\n\n* skidl_to_netlist now uses templates.\n* Default operation of search() is now less exacting.\n* Traceback is now suppressed if show() is passed a part name not in a library.\n\n\n0.0.7 (2016-09-11)\n______________________\n\n* Lack of KISYSMOD environment variable no longer causes an exception.\n* requirements.txt file now references the requirements from setup.py.\n* Changed setup so it generates a pckg_info file with version, author, email.\n\n\n0.0.6 (2016-09-10)\n______________________\n\n* Fixed error caused when trying to find script name when SKiDL is run in interactive mode.\n* Silenced errors/warnings when loading KiCad part description (.dcm) files.\n\n\n0.0.5 (2016-09-07)\n______________________\n\n* SKiDL now searches for parts with a user-configurable list of library search paths.\n* Part descriptions and keywords are now loaded from the .dcm file associated with a .lib file.\n\n\n0.0.4 (2016-08-27)\n______________________\n\n* SKiDL scripts can now output netlists in XML format.\n\n\n0.0.3 (2016-08-25)\n______________________\n\n* Added command-line utility to convert netlists into SKiDL programs.\n\n\n0.0.2 (2016-08-17)\n______________________\n\n* Changed the link to the documentation.\n\n\n0.0.1 (2016-08-16)\n______________________\n\n* First release on PyPI.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xesscorp/skidl", "keywords": "skidl kicad electronic circuit schematics", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "skidl", "package_url": "https://pypi.org/project/skidl/", "platform": "", "project_url": "https://pypi.org/project/skidl/", "project_urls": {"Homepage": "https://github.com/xesscorp/skidl"}, "release_url": "https://pypi.org/project/skidl/0.0.29/", "requires_dist": null, "requires_python": "", "summary": "A Python package for textually describing electronic circuit schematics.", "version": "0.0.29", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/skidl\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/skidl.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9a521eef1c4cefb7375ba0c73a753b1d83e17778/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f736b69646c2e737667\"></a>\n<a href=\"https://travis-ci.com/xesscorp/skidl\" rel=\"nofollow\"><img alt=\"https://travis-ci.com/xesscorp/skidl.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19cd7249cbbb82ee79beb73f5386cb0dace37ea9/68747470733a2f2f7472617669732d63692e636f6d2f78657373636f72702f736b69646c2e7376673f6272616e63683d6d6173746572\"></a>\n<p>SKiDL is a module that allows you to compactly describe the interconnection of\nelectronic circuits and components using Python.\nThe resulting Python program performs electrical rules checking\nfor common mistakes and outputs a netlist that serves as input to\na PCB layout tool.</p>\n<ul>\n<li>Free software: MIT license</li>\n<li>Documentation: <a href=\"http://xesscorp.github.io/skidl\" rel=\"nofollow\">http://xesscorp.github.io/skidl</a></li>\n</ul>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Has a powerful, flexible syntax (because it <em>is</em> Python).</li>\n<li>Permits compact descriptions of electronic circuits (think about <em>not</em> tracing\nsignals through a multi-page schematic).</li>\n<li>Allows textual descriptions of electronic circuits (think about using\n<tt>diff</tt> and <a href=\"https://en.wikipedia.org/wiki/Git_(software)\" rel=\"nofollow\">git</a> for circuits).</li>\n<li>Performs electrical rules checking (ERC) for common mistakes (e.g., unconnected device I/O pins).</li>\n<li>Supports linear / hierarchical / mixed descriptions of electronic designs.</li>\n<li>Fosters design reuse (think about using <a href=\"https://pypi.org/\" rel=\"nofollow\">PyPi</a> and <a href=\"https://github.com/\" rel=\"nofollow\">Github</a>\nto distribute electronic designs).</li>\n<li>Makes possible the creation of <em>smart circuit modules</em> whose behavior / structure are changed parametrically\n(think about filters whose component values are automatically adjusted based on your\ndesired cutoff frequency).</li>\n<li>Can work with any ECAD tool (only two methods are needed: one for reading the part libraries and another\nfor outputing the correct netlist format).</li>\n<li>Can perform SPICE simulations (Python 3 only).</li>\n<li>Takes advantage of all the benefits of the Python ecosystem (because it <em>is</em> Python).</li>\n</ul>\n<p>As a very simple example (and you can see more examples in the\n<a href=\"https://xesscorp.github.io/skidl/docs/_site/blog/\" rel=\"nofollow\">SKiDL blog</a>),\nthe SKiDL program below describes a circuit that\ntakes an input voltage, divides it by three, and outputs it:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">skidl</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Create input &amp; output voltages and ground reference.</span>\n<span class=\"n\">vin</span><span class=\"p\">,</span> <span class=\"n\">vout</span><span class=\"p\">,</span> <span class=\"n\">gnd</span> <span class=\"o\">=</span> <span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"s1\">'VI'</span><span class=\"p\">),</span> <span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"s1\">'VO'</span><span class=\"p\">),</span> <span class=\"n\">Net</span><span class=\"p\">(</span><span class=\"s1\">'GND'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create two resistors.</span>\n<span class=\"n\">r1</span><span class=\"p\">,</span> <span class=\"n\">r2</span> <span class=\"o\">=</span> <span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">Part</span><span class=\"p\">(</span><span class=\"s2\">\"Device\"</span><span class=\"p\">,</span> <span class=\"s1\">'R'</span><span class=\"p\">,</span> <span class=\"n\">TEMPLATE</span><span class=\"p\">,</span> <span class=\"n\">footprint</span><span class=\"o\">=</span><span class=\"s1\">'Resistor_SMD.pretty:R_0805_2012Metric'</span><span class=\"p\">)</span>\n<span class=\"n\">r1</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'1K'</span>   <span class=\"c1\"># Set upper resistor value.</span>\n<span class=\"n\">r2</span><span class=\"o\">.</span><span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"s1\">'500'</span>  <span class=\"c1\"># Set lower resistor value.</span>\n\n<span class=\"c1\"># Connect the nets and resistors.</span>\n<span class=\"n\">vin</span> <span class=\"o\">+=</span> <span class=\"n\">r1</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>      <span class=\"c1\"># Connect the input to the upper resistor.</span>\n<span class=\"n\">gnd</span> <span class=\"o\">+=</span> <span class=\"n\">r2</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>      <span class=\"c1\"># Connect the lower resistor to ground.</span>\n<span class=\"n\">vout</span> <span class=\"o\">+=</span> <span class=\"n\">r1</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"n\">r2</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># Output comes from the connection of the two resistors.</span>\n\n<span class=\"n\">generate_netlist</span><span class=\"p\">()</span>\n</pre>\n<p>And this is the output that can be fed to a program like KiCad\u2019s <tt>PCBNEW</tt> to\ncreate the physical PCB:</p>\n<pre>(export (version D)\n  (design\n    (source \"C:\\xesscorp\\KiCad\\tools\\skidl\\tests\\vdiv.py\")\n    (date \"09/14/2018 08:49 PM\")\n    (tool \"SKiDL (0.0.23)\"))\n  (components\n    (comp (ref R1)\n      (value 1K)\n      (footprint Resistor_SMD.pretty:R_0805_2012Metric)\n      (fields\n        (field (name description) Resistor)\n        (field (name keywords) \"r res resistor\"))\n      (libsource (lib device) (part R))\n      (sheetpath (names /top/12995167876889795071) (tstamps /top/12995167876889795071)))\n    (comp (ref R2)\n      (value 500)\n      (footprint Resistor_SMD.pretty:R_0805_2012Metric)\n      (fields\n        (field (name description) Resistor)\n        (field (name keywords) \"r res resistor\"))\n      (libsource (lib device) (part R))\n      (sheetpath (names /top/8869138953290924483) (tstamps /top/8869138953290924483))))\n  (nets\n    (net (code 0) (name GND)\n      (node (ref R2) (pin 2)))\n    (net (code 1) (name VI)\n      (node (ref R1) (pin 1)))\n    (net (code 2) (name VO)\n      (node (ref R1) (pin 2))\n      (node (ref R2) (pin 1))))\n)\n</pre>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.0.29 (2020-01-30)</h3>\n<ul>\n<li>Added XSPICE parts capability to SPICE simulations.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.0.28 (2019-12-17)</h3>\n<ul>\n<li>The <tt>zyc</tt> utility was split into a separate repository and placed on PyPi.</li>\n<li>Fixed slicing of grouped part pins so things like <tt><span class=\"pre\">ram['A[1]']</span></tt> won\u2019t grab <tt>A1</tt>, <tt>A10</tt>, <tt>A11</tt>, etc.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.0.27 (2019-12-16)</h3>\n<ul>\n<li>Prevent changing the name of net 0 when generating a SPICE netlist.</li>\n<li>Fixed Pin, Net, Bus and Part iterators so they\u2019ll work in nested loops.</li>\n<li>Part units are automatically added when a part is parsed.</li>\n<li>Files are now opened for reading using latin_1 encoding to allow special symbols used by KiCad.</li>\n<li>Part pins can now be aliased directly, e.g. <cite>uc[5].aliases += \u2018gp0\u2019</cite>.</li>\n<li>Added class method get() to Part to allow finding a part based on name, reference, description.</li>\n<li>Refactored ERC functions to allow user-extensibility.</li>\n<li>Created a base object for Circuit, Part, Pin, Net, and Bus objects.</li>\n<li>Added an aliases property to the SKiDL base object so all its children could be aliased.</li>\n<li>Updated to perform simulations with ngspice version 30.</li>\n<li>Added a notes property to allow attachment of user notes to Parts, Pins, Nets, etc.</li>\n<li>Added net class to net objects for specifying net-specific design rules in PCBNEW.</li>\n<li>Ignore multiple pins with the same number in symbols with DeMorgan equivalents.</li>\n<li>Fixed problem with non-ASCII chars (e.g. Ohms) in strings.</li>\n<li>Sped-up part/net naming using heap/cache, binary search, sets.</li>\n<li>Sped-up by storing net traversals to avoid recomputation.</li>\n<li>Fixed processing of slices in things like sdram[\u2018A[0:15]\u2019].</li>\n<li>Sped-up part_search() by eliminating unnecessary part parsing.</li>\n<li>Improved schematic generation with graphviz.</li>\n<li>Search now allows AND/OR of parenthesized terms.</li>\n<li>New GUI for searching for parts and footprints.</li>\n<li>Footprint libraries to search are now selected from the global fp-lib-table file.</li>\n<li>KiCad library component field values are now stored in a dict in Part indexed by the field name or F0, F1, F2\u2026</li>\n<li>KiCad library component field values are also stored as Part attributes using the field name or F0, F1, F2\u2026</li>\n<li>Added <cite>p</cite> and <cite>n</cite> attributes to <cite>Part</cite> object to permit explicit reference to pin numbers or names.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.0.26 (2019-01-25)</h3>\n<ul>\n<li><tt>search</tt> command no longer looks in backup library because that leads to erroneous hits in all libraries.</li>\n<li>Part objects will now iterate through their pins and len() will return the number of pins.</li>\n<li>Updated netlist_to_skidl utility to account for new version of kinparse.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.0.25 (2018-12-30)</h3>\n<ul>\n<li>Updated website.</li>\n<li>KISYSMOD is no longer used to find part libraries, only KICAD_SYMBOL_DIR is used now.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.0.24 (2018-09-15)</h3>\n<ul>\n<li>Fixed an error where creating a backup part library for a design would create extra pins attached to the nets.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>0.0.23 (2018-08-25)</h3>\n<ul>\n<li>Added Network objects to make it easy to create serial &amp; parallel combinations of two-pin parts.</li>\n<li>SKiDL design hierarchy is now embedded in the KiCad netlist that\u2019s generated.</li>\n</ul>\n</div>\n<div id=\"xx\">\n<h3>0.0.22 (2018-05-XX)</h3>\n<ul>\n<li>Added Interface objects for storing complicated sets of I/O signals for subsystems.</li>\n<li>ERC no longer redundantly checks every segment of a multi-segment net and reports multiple errors.</li>\n<li>copy() function of Part, Bus, Pin, Net objects now returns a scalar object while copy(1) returns a list with one object.</li>\n<li>Bus, Pin, and Net objects now have iterators.</li>\n<li>Corrected initialization of KiCad library search paths.</li>\n</ul>\n</div>\n<hr class=\"docutils\">\n<div id=\"id8\">\n<h3>0.0.21 (2018-04-30)</h3>\n<ul>\n<li>Added pull() and fetch() methods for getting/creating existing/new Net and Bus objects.</li>\n<li>Added drive property to pins to override their default pin function attribute.</li>\n<li>Part pins and units can now be accessed as attributes.</li>\n<li>Nets, pins, and buses now support the width property.</li>\n<li>Indexing with brackets now works equivalently for pins, nets, and buses.</li>\n<li>Grouped part pins (such as address and data buses) can now be accessed using a slice-like notation, e.g. memory[\u2018ADDR[0:7]\u2019].</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>0.0.20 (2018-03-08)</h3>\n<ul>\n<li>Matching of pin lists now begins with normal string matching before using regexes.</li>\n<li>Added more tests and fixed existing tests.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>0.0.19 (2018-02-20)</h3>\n<ul>\n<li>Selecting part pins now looks for exact match before falling back to regex matching.</li>\n<li>PySpice now needs to be manually installed to perform SPICE simulations.</li>\n<li>SPICE simulations of subcircuits (.SUBCKT) now supported.</li>\n<li>Improvements/additions to the library of supported SPICE parts.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>0.0.18 (2018-02-07)</h3>\n<ul>\n<li>SPICE simulations of circuits now supported (Python 3 only).</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3>0.0.17 (2018-01-23)</h3>\n<ul>\n<li>Modularized code into separate files.</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3>0.0.16 (2018-01-16)</h3>\n<ul>\n<li>Parsing of KiCad EESchema libraries made more robust.</li>\n<li>DEFAULT_TOOL replaced with set_default_tool() function.</li>\n<li>Some code simplification by using a context manager for opening files.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3>0.0.15 (2018-01-09)</h3>\n<ul>\n<li>Testing made more robust.</li>\n</ul>\n</div>\n<div id=\"id15\">\n<h3>0.0.14 (2018-01-05)</h3>\n<ul>\n<li>KiCad netlists are now parsed using the external package kinparse.</li>\n<li>Cleaned-up pylint-identified issues.</li>\n<li>Removed absolute file paths to libraries from tests.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h3>0.0.13 (2017-08-20)</h3>\n<ul>\n<li>Fixed problem where the search function was only returning parts found in the last library searched.</li>\n</ul>\n</div>\n<div id=\"id17\">\n<h3>0.0.12 (2017-04-20)</h3>\n<ul>\n<li>Use of builtin now works with Python 2 &amp; 3.</li>\n<li>Started using namedtuple in some places (like net traversal) for clarity.</li>\n<li>Corrected pin-to-pin connections so if a net is created, it goes into the same Circuit the pins are members of.</li>\n<li>Part templates can now contain a reference to a Circuit object that will be applied when the template is instantiated.</li>\n<li>When pins are connected to nets, or nets to nets, the resulting set of connected nets are all given the same name.</li>\n<li>Buses are not added to a Circuit object if they are already members of it. This fix caused the next problem.</li>\n<li>Buses weren\u2019t getting added to the Circuit object because they already contained a reference to the Circuit. Fixed by clearing ref before adding to Circuit.</li>\n<li>Created mini_reset() method to clear circuitry without clearing library cache so the libraries don\u2019t have to be loaded again (slow).</li>\n<li>search() utility now prints the names of libraries as they are searched so user sees progress.</li>\n<li>Fixed exceptions if part definition contained non-unicode stuff.</li>\n<li>Hide exceptions that occur when using the show() utility.</li>\n<li>More tests added for NC nets and hand-crafted parts.</li>\n<li>default_circuit and the NC net for the active circuit are now made accessible in all modules using __builtin__.</li>\n<li>Corrected error messages that referenced wrong/non-existing variable.</li>\n<li>Inserted NO_LIB for the library if it doesn\u2019t exist when generating KiCad netlists or XML.</li>\n<li>Attributes can now be passed when creating a Circuit object.</li>\n<li>Pins are now associated with part when added to the part.</li>\n<li>Minimum and maximum pins for a part are now computed as needed.</li>\n<li>Each Circuit object now has its own NC net.</li>\n<li>Added tests for bus movement and copying.</li>\n<li>Implemented bus movement between Circuit objects.</li>\n<li>Additional test cases were created.</li>\n<li>Nets and Parts can now be removed from Circuits.</li>\n<li>The circuit that pins and nets are in is now checked before connections are made so cross-circuit connections are not created.</li>\n<li>Default members were added to Pin and Part objects so they would always exist and not cause errors when missing.</li>\n<li>Implemented moving Parts and Nets from one circuit to another (almost).</li>\n<li>Nets with no attached pins are now added to a circuit.</li>\n<li>Re-wrote some tests to account for the presence of no-pin nets in a circuit.</li>\n<li>A class method was missing its \u2018self\u2019 argument.</li>\n<li>Fixed @subcircuit decorator so it won\u2019t cause an error if the function it decorates doesn\u2019t have a \u2018circuit\u2019 keyword argument.</li>\n<li>Split the unit tests across multiple files. Added setup/teardown code.</li>\n<li>Added capability to create multiple, independent Circuit objects to which Parts and Nets can be assigned. The default circuit is still the target if not Circuit is explicitly referenced.</li>\n<li>Added IOError to exception list for opening a SKiDL part library.</li>\n</ul>\n</div>\n<div id=\"id18\">\n<h3>0.0.11 (2017-04-04)</h3>\n<ul>\n<li>Part libraries in SKiDL format are now supported.</li>\n<li>Parts can now be created on-the-fly and instantiated or added to libraries.</li>\n<li>The parts used in a circuit can be stored in a backup SKiDL library and used if the original libraries are missing.</li>\n<li>The KiCad standard part libraries were converted to SKiDL libraries and placed in skidl.libs.</li>\n</ul>\n</div>\n<div id=\"id19\">\n<h3>0.0.10 (2017-03-13)</h3>\n<ul>\n<li>Nets without pins can now be merged.</li>\n<li>Parts and Pins are now sorted when netlists are generated.</li>\n<li>For an existing Bus, new bus lines can be inserted at any position or the bus can be extended.</li>\n</ul>\n</div>\n<div id=\"id20\">\n<h3>0.0.9 (2017-02-16)</h3>\n<ul>\n<li>Use getattr() instead of __class__.__dict__ so that subclasses of SKiDL objects\ncan find attributes named within strings without searching the __mor__.</li>\n</ul>\n</div>\n<div id=\"id21\">\n<h3>0.0.8 (2017-01-11)</h3>\n<ul>\n<li>skidl_to_netlist now uses templates.</li>\n<li>Default operation of search() is now less exacting.</li>\n<li>Traceback is now suppressed if show() is passed a part name not in a library.</li>\n</ul>\n</div>\n<div id=\"id22\">\n<h3>0.0.7 (2016-09-11)</h3>\n<ul>\n<li>Lack of KISYSMOD environment variable no longer causes an exception.</li>\n<li>requirements.txt file now references the requirements from setup.py.</li>\n<li>Changed setup so it generates a pckg_info file with version, author, email.</li>\n</ul>\n</div>\n<div id=\"id23\">\n<h3>0.0.6 (2016-09-10)</h3>\n<ul>\n<li>Fixed error caused when trying to find script name when SKiDL is run in interactive mode.</li>\n<li>Silenced errors/warnings when loading KiCad part description (.dcm) files.</li>\n</ul>\n</div>\n<div id=\"id24\">\n<h3>0.0.5 (2016-09-07)</h3>\n<ul>\n<li>SKiDL now searches for parts with a user-configurable list of library search paths.</li>\n<li>Part descriptions and keywords are now loaded from the .dcm file associated with a .lib file.</li>\n</ul>\n</div>\n<div id=\"id25\">\n<h3>0.0.4 (2016-08-27)</h3>\n<ul>\n<li>SKiDL scripts can now output netlists in XML format.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3>0.0.3 (2016-08-25)</h3>\n<ul>\n<li>Added command-line utility to convert netlists into SKiDL programs.</li>\n</ul>\n</div>\n<div id=\"id27\">\n<h3>0.0.2 (2016-08-17)</h3>\n<ul>\n<li>Changed the link to the documentation.</li>\n</ul>\n</div>\n<div id=\"id28\">\n<h3>0.0.1 (2016-08-16)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6543906, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5a3abb9ba20758d3cd59c016d835e9df", "sha256": "9ee6c9f8a7f77fdc225223a5b5ad4024bb90a7a03ecd4beef4821cf432dc4880"}, "downloads": -1, "filename": "skidl-0.0.1.zip", "has_sig": false, "md5_digest": "5a3abb9ba20758d3cd59c016d835e9df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70436, "upload_time": "2016-08-16T19:12:16", "upload_time_iso_8601": "2016-08-16T19:12:16.673270Z", "url": "https://files.pythonhosted.org/packages/7e/51/79f3458bad5cca6ba8d27cd39efff6f6361d87bdbe8476a1f4ac98615dd4/skidl-0.0.1.zip", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "c2c69d837bb03c42bebf8590fadabd12", "sha256": "cb9b2048cebfc4c67530f86bc1564b436a7b4dcbdcc3c8234a04572cefbb1bc1"}, "downloads": -1, "filename": "skidl-0.0.10.zip", "has_sig": false, "md5_digest": "c2c69d837bb03c42bebf8590fadabd12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 222641, "upload_time": "2017-03-13T16:08:50", "upload_time_iso_8601": "2017-03-13T16:08:50.746860Z", "url": "https://files.pythonhosted.org/packages/35/1d/7221be9e71cd584db25f1c8937fa689c87e5b8350f70cbf45fb1c2294c61/skidl-0.0.10.zip", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "8fdbda810ef1353ffc473b002cf846d0", "sha256": "5fe654bc739ab51c9dc8bb4e4fd80b1cf216a14a416717c4472231cd0575f672"}, "downloads": -1, "filename": "skidl-0.0.11.zip", "has_sig": false, "md5_digest": "8fdbda810ef1353ffc473b002cf846d0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 777563, "upload_time": "2017-04-04T15:52:04", "upload_time_iso_8601": "2017-04-04T15:52:04.974598Z", "url": "https://files.pythonhosted.org/packages/31/f2/203ac4973db706bb35b74b490d211638e974421112b0063e598e440ac450/skidl-0.0.11.zip", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "ef4ead2c704744f63c1b9236a00cb460", "sha256": "eac54cd02c25727d33a4f96c911ba50a594bd37462bf9736190c171da8a692bd"}, "downloads": -1, "filename": "skidl-0.0.12.tar.gz", "has_sig": false, "md5_digest": "ef4ead2c704744f63c1b9236a00cb460", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 694152, "upload_time": "2017-04-20T18:05:35", "upload_time_iso_8601": "2017-04-20T18:05:35.645534Z", "url": "https://files.pythonhosted.org/packages/0a/fc/5af09ff256f77ac81716a70d19bac58c957a761660154e0867235ed71c55/skidl-0.0.12.tar.gz", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "08178d349ae8777c5ee686550233f6e5", "sha256": "82cb93dc44aa5f565d46c6f28db7a5619fc33140e681662d9c61d62773b26919"}, "downloads": -1, "filename": "skidl-0.0.13.tar.gz", "has_sig": false, "md5_digest": "08178d349ae8777c5ee686550233f6e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 695111, "upload_time": "2017-08-20T17:10:17", "upload_time_iso_8601": "2017-08-20T17:10:17.018335Z", "url": "https://files.pythonhosted.org/packages/4f/fc/6c564c1f322a7f0d7179d4d13e44e70c4dc7b454f4d3dedd325ea0efd4ca/skidl-0.0.13.tar.gz", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "f28a44d698ddcc771c70409da98374e8", "sha256": "308f062c3ef69b509530aab1aab5a1ce5d34a84d88e071570b0bb3090b50cb26"}, "downloads": -1, "filename": "skidl-0.0.14.tar.gz", "has_sig": false, "md5_digest": "f28a44d698ddcc771c70409da98374e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 711635, "upload_time": "2018-01-06T14:39:39", "upload_time_iso_8601": "2018-01-06T14:39:39.252370Z", "url": "https://files.pythonhosted.org/packages/4d/c7/906cadb8f968681d2f1e99e9912077a9e7199d7d45028ff73bd82965d691/skidl-0.0.14.tar.gz", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "15a6b5b7ded4a5f634b0198e0c8a717a", "sha256": "d05937a8ac66cf447ecdf257aba615d024729241ce4b167dc9bff08a08b61191"}, "downloads": -1, "filename": "skidl-0.0.15.tar.gz", "has_sig": false, "md5_digest": "15a6b5b7ded4a5f634b0198e0c8a717a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 723002, "upload_time": "2018-01-10T00:56:55", "upload_time_iso_8601": "2018-01-10T00:56:55.453575Z", "url": "https://files.pythonhosted.org/packages/96/1b/1b77a48660d6a9ae07e74fbaa6918a78a61d54e1d20993efdec729e1e280/skidl-0.0.15.tar.gz", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "da0189fe8c66aa7733affd20a396822e", "sha256": "b9fab975abf0886c79e72786e00202af9173ff32cfcf7ae29da8428c4e6685af"}, "downloads": -1, "filename": "skidl-0.0.16.tar.gz", "has_sig": false, "md5_digest": "da0189fe8c66aa7733affd20a396822e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 723432, "upload_time": "2018-01-16T15:25:15", "upload_time_iso_8601": "2018-01-16T15:25:15.096020Z", "url": "https://files.pythonhosted.org/packages/b6/3c/7abcdeddab1f35c8e17a47987e5ed725bbd8cb2360d596e8660c27605215/skidl-0.0.16.tar.gz", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "a8038e6d3582a385388a352c86d0ad41", "sha256": "07a3673f8b7e7bfbc1b04f47267cfd0a08bf833ec63250dfccc1bdb915db186c"}, "downloads": -1, "filename": "skidl-0.0.17.tar.gz", "has_sig": false, "md5_digest": "a8038e6d3582a385388a352c86d0ad41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 746942, "upload_time": "2018-01-23T19:35:16", "upload_time_iso_8601": "2018-01-23T19:35:16.666721Z", "url": "https://files.pythonhosted.org/packages/bd/ec/e09f9ea27b2d252a7bb3dcceade8c19ee0a599a5550df4ad8e7089a255a4/skidl-0.0.17.tar.gz", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "3356569eb4c5275d3e7a343703ed0bc7", "sha256": "7ed8c211763a102b0ec3f92bf49d8e843cfdbc534716beab7331d9da4879d2be"}, "downloads": -1, "filename": "skidl-0.0.18.tar.gz", "has_sig": false, "md5_digest": "3356569eb4c5275d3e7a343703ed0bc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 755187, "upload_time": "2018-02-07T17:20:40", "upload_time_iso_8601": "2018-02-07T17:20:40.299526Z", "url": "https://files.pythonhosted.org/packages/fe/ad/3d4f0560ade2703a6399c3998600385b108ea48fd16e8daede02f450d6a7/skidl-0.0.18.tar.gz", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "904ba7ac05da8fecd235c87af4635e45", "sha256": "70bbf45f8782bcbc4e1281056047cf0a9b152a185ca09edbc4c7e0f4386d6c88"}, "downloads": -1, "filename": "skidl-0.0.19.tar.gz", "has_sig": false, "md5_digest": "904ba7ac05da8fecd235c87af4635e45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 760112, "upload_time": "2018-02-20T22:09:36", "upload_time_iso_8601": "2018-02-20T22:09:36.353388Z", "url": "https://files.pythonhosted.org/packages/c1/1f/384540431c29c689e2cb07c7951842b6b315bdfce1e9064ca0e8769f2f17/skidl-0.0.19.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "ce57d03c1533671749af2c68619a4572", "sha256": "67f3ad1f9123070d87aca84da0d7fea548485d41109ffa181ec5159ab6e65191"}, "downloads": -1, "filename": "skidl-0.0.2.zip", "has_sig": false, "md5_digest": "ce57d03c1533671749af2c68619a4572", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70457, "upload_time": "2016-08-17T18:55:30", "upload_time_iso_8601": "2016-08-17T18:55:30.650812Z", "url": "https://files.pythonhosted.org/packages/25/4e/d0b66f1e9fb76912d074e5f43254611812001b2f04b5ff7acce13d6c1ffa/skidl-0.0.2.zip", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "e6ce6d3ecb3122ce516ebcbc9c5a5f27", "sha256": "09a1e0ead03e0f39e4bca17f88a4633451b737ce31b469028405ec9fd2d31dfb"}, "downloads": -1, "filename": "skidl-0.0.20.tar.gz", "has_sig": false, "md5_digest": "e6ce6d3ecb3122ce516ebcbc9c5a5f27", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 739908, "upload_time": "2018-03-08T19:42:34", "upload_time_iso_8601": "2018-03-08T19:42:34.109745Z", "url": "https://files.pythonhosted.org/packages/43/d2/faa423211f3ad5c4e6e64b21afc84c70bd7588c2deacae4f88dabfbe0a38/skidl-0.0.20.tar.gz", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "3c9b50eb930a7119ff9d671a159da2bb", "sha256": "2135842c463193b545da939c15088212ece59b3c6c899fcc8b377505724c4ed1"}, "downloads": -1, "filename": "skidl-0.0.21.tar.gz", "has_sig": false, "md5_digest": "3c9b50eb930a7119ff9d671a159da2bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 749269, "upload_time": "2018-04-30T20:27:01", "upload_time_iso_8601": "2018-04-30T20:27:01.130630Z", "url": "https://files.pythonhosted.org/packages/b1/d0/6b5a3cdabc401273385092922526fc609f766ca3689e5646ff07d1227413/skidl-0.0.21.tar.gz", "yanked": false}], "0.0.22": [{"comment_text": "", "digests": {"md5": "429af9e9b5e3a3058dee9d9e8e33f86c", "sha256": "94053e73d06785e7b1b963518cad1e9f181bc50dfb694aed50a2b532146d661b"}, "downloads": -1, "filename": "skidl-0.0.22.tar.gz", "has_sig": false, "md5_digest": "429af9e9b5e3a3058dee9d9e8e33f86c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 753538, "upload_time": "2018-05-16T03:21:15", "upload_time_iso_8601": "2018-05-16T03:21:15.764620Z", "url": "https://files.pythonhosted.org/packages/e6/58/736ae87fac6f7cca9c29acda8a7ef5e6f2b539b4fd5d2767c8c0e405ed6d/skidl-0.0.22.tar.gz", "yanked": false}], "0.0.23": [{"comment_text": "", "digests": {"md5": "f4a60d3659d7118dccbe57b52160d07b", "sha256": "67a887a401f19f182c61d144195280e53d0469efb4e9ae2a1c66f890b76774d4"}, "downloads": -1, "filename": "skidl-0.0.23.tar.gz", "has_sig": false, "md5_digest": "f4a60d3659d7118dccbe57b52160d07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 756252, "upload_time": "2018-08-26T02:56:49", "upload_time_iso_8601": "2018-08-26T02:56:49.784288Z", "url": "https://files.pythonhosted.org/packages/5e/12/34c5033438a69db3747087995c15c7b29de41561fd18da0f364ac27c4268/skidl-0.0.23.tar.gz", "yanked": false}], "0.0.24": [{"comment_text": "", "digests": {"md5": "3792c996156dd87838612747681f77ba", "sha256": "59c14dc9d1a92ffe6ff456e3e95b53d7d7517ccc4221b6b02de87ce937e97a09"}, "downloads": -1, "filename": "skidl-0.0.24.tar.gz", "has_sig": false, "md5_digest": "3792c996156dd87838612747681f77ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 757653, "upload_time": "2018-09-15T17:59:56", "upload_time_iso_8601": "2018-09-15T17:59:56.582870Z", "url": "https://files.pythonhosted.org/packages/bb/a4/29d6e22781fa065de7ac6a8379e663a58a052b3d237bc85297d9b3090338/skidl-0.0.24.tar.gz", "yanked": false}], "0.0.25": [{"comment_text": "", "digests": {"md5": "88b327d5fc3f7e365d09bb1a714b1794", "sha256": "98ce01e02e6f45529c2d6c8ad54d8f313e2564b1592ef59fd92f3309274463a2"}, "downloads": -1, "filename": "skidl-0.0.25.tar.gz", "has_sig": false, "md5_digest": "88b327d5fc3f7e365d09bb1a714b1794", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 758972, "upload_time": "2018-12-30T17:53:50", "upload_time_iso_8601": "2018-12-30T17:53:50.097947Z", "url": "https://files.pythonhosted.org/packages/6f/3a/e1c7c47d2c245a3201abe53596cb09460a38a64cb676d3c051c82978046e/skidl-0.0.25.tar.gz", "yanked": false}], "0.0.26": [{"comment_text": "", "digests": {"md5": "cade138b11169ad3943996c4460d0e12", "sha256": "e0853614f8271ae429e715cfb7a1e505af40d1e8caee1b5cf08c6d269e69e631"}, "downloads": -1, "filename": "skidl-0.0.26.tar.gz", "has_sig": false, "md5_digest": "cade138b11169ad3943996c4460d0e12", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 752233, "upload_time": "2019-01-25T22:16:35", "upload_time_iso_8601": "2019-01-25T22:16:35.208479Z", "url": "https://files.pythonhosted.org/packages/d8/e4/69c697b9ec714bd7a0b40dffecb59eae1cb7a2436140dad5227bd6b57e9d/skidl-0.0.26.tar.gz", "yanked": false}], "0.0.27": [{"comment_text": "", "digests": {"md5": "6e777921f963a963cc9a962345204db9", "sha256": "496719bd0c0b79d50bc5dff41feefab79159746c8d7c87d4b8a0a6555f42cb4d"}, "downloads": -1, "filename": "skidl-0.0.27.tar.gz", "has_sig": false, "md5_digest": "6e777921f963a963cc9a962345204db9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1807398, "upload_time": "2019-12-16T13:20:48", "upload_time_iso_8601": "2019-12-16T13:20:48.290781Z", "url": "https://files.pythonhosted.org/packages/30/ef/a0d179b1f3660c18490c0bfb569614c8e57663331d9b87ab044bc26ae751/skidl-0.0.27.tar.gz", "yanked": false}], "0.0.28": [{"comment_text": "", "digests": {"md5": "08b7c136910f55aef3fa3fae35dd07ed", "sha256": "ad26860fafd6f2a4d2545ed397448d2f70624db3e63d1932dbce9bfe370f5520"}, "downloads": -1, "filename": "skidl-0.0.28.tar.gz", "has_sig": false, "md5_digest": "08b7c136910f55aef3fa3fae35dd07ed", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1796112, "upload_time": "2019-12-17T16:18:36", "upload_time_iso_8601": "2019-12-17T16:18:36.055970Z", "url": "https://files.pythonhosted.org/packages/77/30/87bb9e66f93f1c3b0771708ddee92cf2ec62ebf5da09a7bbed22ea527b72/skidl-0.0.28.tar.gz", "yanked": false}], "0.0.29": [{"comment_text": "", "digests": {"md5": "a82df50f8fccdc5e7f5088effe922c34", "sha256": "0e324ccd90fb0c5eb42110678f35f77764b87e4390b574e42cab893bfdc3fa21"}, "downloads": -1, "filename": "skidl-0.0.29.tar.gz", "has_sig": false, "md5_digest": "a82df50f8fccdc5e7f5088effe922c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1769824, "upload_time": "2020-01-30T14:55:21", "upload_time_iso_8601": "2020-01-30T14:55:21.393206Z", "url": "https://files.pythonhosted.org/packages/04/cb/a48cb959933d515d83f88b759987407638bffe2e56db229b092d200b8ee5/skidl-0.0.29.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "b83fada4e0c2c4c877e53229ebc0c79c", "sha256": "60839c141021a2b8ee891f3056b695fd3deac38b621e68637518bcce819355fb"}, "downloads": -1, "filename": "skidl-0.0.3.zip", "has_sig": false, "md5_digest": "b83fada4e0c2c4c877e53229ebc0c79c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 235121, "upload_time": "2016-08-26T01:23:47", "upload_time_iso_8601": "2016-08-26T01:23:47.740084Z", "url": "https://files.pythonhosted.org/packages/29/0b/313a1176ea7acf96a4042b35a5ab29bc0787ad1e756fb6a0570901d2b699/skidl-0.0.3.zip", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "afc6bb50d16fcc41bb51d53a208c9e44", "sha256": "c3a419d09fc309d6d4d6059b2647df769e4c8f0f41b4b395495ec0e2a8306b5b"}, "downloads": -1, "filename": "skidl-0.0.4.zip", "has_sig": false, "md5_digest": "afc6bb50d16fcc41bb51d53a208c9e44", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 253451, "upload_time": "2016-08-28T03:36:50", "upload_time_iso_8601": "2016-08-28T03:36:50.027456Z", "url": "https://files.pythonhosted.org/packages/f5/e7/b5ce5ddb38553d34437d7f9e756b9d80cff5dd86c912dac5db44b0812d40/skidl-0.0.4.zip", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ced701c11f59842d572b8ca0955defc4", "sha256": "391ff48fb17cb6c74125d3530a2e556d9db97e95fe8d6d5bd9e5dfa1d91f966c"}, "downloads": -1, "filename": "skidl-0.0.5.zip", "has_sig": false, "md5_digest": "ced701c11f59842d572b8ca0955defc4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254479, "upload_time": "2016-09-07T18:00:45", "upload_time_iso_8601": "2016-09-07T18:00:45.959267Z", "url": "https://files.pythonhosted.org/packages/11/1b/e0d6ff2be7b29ad4817a2a2518ee51430c73b07f70b790a8441e7f780862/skidl-0.0.5.zip", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c0e0e0e39372ad522e6a9481e78286ba", "sha256": "1424b640c00942433f8561b7db1207ac2bd6523cb658f8561ebc5fe20802d7f3"}, "downloads": -1, "filename": "skidl-0.0.6.zip", "has_sig": false, "md5_digest": "c0e0e0e39372ad522e6a9481e78286ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 254786, "upload_time": "2016-09-10T12:36:06", "upload_time_iso_8601": "2016-09-10T12:36:06.710800Z", "url": "https://files.pythonhosted.org/packages/a3/e8/dbf5a2df1d2c913044fa70fa1f0ea10a783980b680da89d0d1bc47aac9c7/skidl-0.0.6.zip", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ec03e49d09200028a541a8dd5f28def9", "sha256": "aa87d647db8685db04caf47fe80b77c29d1bcc967646f40dcb24489311dc9be8"}, "downloads": -1, "filename": "skidl-0.0.7.zip", "has_sig": false, "md5_digest": "ec03e49d09200028a541a8dd5f28def9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 255384, "upload_time": "2016-09-11T17:47:01", "upload_time_iso_8601": "2016-09-11T17:47:01.820247Z", "url": "https://files.pythonhosted.org/packages/8c/e5/4aa36b6299c6349e6a07f72b53d49bcb86a2d2f4381d90c6413b67db4cb2/skidl-0.0.7.zip", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "4c7facb3a0df8fad4b8db83ef1573700", "sha256": "268901ed7e68a9fb7d3e8f245ce7e6a631b324e31446ebf8dcb28bb137c27ba4"}, "downloads": -1, "filename": "skidl-0.0.8.zip", "has_sig": false, "md5_digest": "4c7facb3a0df8fad4b8db83ef1573700", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 257117, "upload_time": "2017-01-11T21:03:57", "upload_time_iso_8601": "2017-01-11T21:03:57.053044Z", "url": "https://files.pythonhosted.org/packages/ab/c2/e0f966f776439b21030ef3e0eb8d5f68f326139663bc9f66868f56fbcac6/skidl-0.0.8.zip", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "e42e9e12d662d9e30208312ae5f92031", "sha256": "19f656704c75b5a244eb04d561332cf20b0fd0ce84a8bc9835f99acf88270ac0"}, "downloads": -1, "filename": "skidl-0.0.9.zip", "has_sig": false, "md5_digest": "e42e9e12d662d9e30208312ae5f92031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 431095, "upload_time": "2017-02-17T01:15:12", "upload_time_iso_8601": "2017-02-17T01:15:12.196150Z", "url": "https://files.pythonhosted.org/packages/77/32/344998a91166884448554521633a3ab373a01ae303c06d1c51c31defb0c6/skidl-0.0.9.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a82df50f8fccdc5e7f5088effe922c34", "sha256": "0e324ccd90fb0c5eb42110678f35f77764b87e4390b574e42cab893bfdc3fa21"}, "downloads": -1, "filename": "skidl-0.0.29.tar.gz", "has_sig": false, "md5_digest": "a82df50f8fccdc5e7f5088effe922c34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1769824, "upload_time": "2020-01-30T14:55:21", "upload_time_iso_8601": "2020-01-30T14:55:21.393206Z", "url": "https://files.pythonhosted.org/packages/04/cb/a48cb959933d515d83f88b759987407638bffe2e56db229b092d200b8ee5/skidl-0.0.29.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:04 2020"}