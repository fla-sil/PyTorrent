{"info": {"author": "Malthe Borch", "author_email": "mborch@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: BSD License", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Internet", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Distributed Computing", "Topic :: System :: Systems Administration"], "description": "PQ\n**\n\nA transactional queue system for PostgreSQL written in Python.\n\n.. figure:: https://pq.readthedocs.org/en/latest/_static/intro.svg\n   :alt: PQ does the job!\n\nIt allows you to push and pop items in and out of a queue in various\nways and also provides two scheduling options: delayed processing and\nprioritization.\n\nThe system uses a single table that holds all jobs across queues; the\nspecifics are easy to customize.\n\nThe system currently supports only the `psycopg2\n<https://pypi.python.org/pypi/psycopg2>`_ database driver - or\n`psycopg2cffi <https://pypi.python.org/pypi/psycopg2cffi>`_ for PyPy.\n\nThe basic queue implementation is similar to Ryan Smith's\n`queue_classic <https://github.com/ryandotsmith/queue_classic>`_\nlibrary written in Ruby, but uses `SKIP LOCKED\n<https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/>`_\nfor concurrency control.\n\nIn terms of performance, the implementation clock in at about 1,000\noperations per second. Using the `PyPy <http://pypy.org/>`_\ninterpreter, this scales linearly with the number of cores available.\n\n\nGetting started\n===============\n\nAll functionality is encapsulated in a single class ``PQ``.\n\n     ``class PQ(conn=None, pool=None, table='queue', debug=False)``\n\nExample usage:\n\n.. code-block:: python\n\n    from psycopg2 import connect\n    from pq import PQ\n\n    conn = connect('dbname=example user=postgres')\n    pq = PQ(conn)\n\nFor multi-threaded operation, use a connection pool such as\n``psycopg2.pool.ThreadedConnectionPool``.\n\nYou probably want to make sure your database is created with the\n``utf-8`` encoding.\n\nTo create and configure the queue table, call the ``create()`` method.\n\n.. code-block:: python\n\n    pq.create()\n\nThe table name defaults to ``'queue'``. To use a different name, pass\nit as a string value as the ``table`` argument for the ``PQ`` class\n(illustrated above).\n\n\nQueues\n======\n\nThe ``pq`` object exposes queues through Python's dictionary\ninterface:\n\n.. code-block:: python\n\n    queue = pq['apples']\n\nThe ``queue`` object provides ``get`` and ``put`` methods as explained\nbelow, and in addition, it also works as a context manager where it\nmanages a transaction:\n\n.. code-block:: python\n\n    with queue as cursor:\n        ...\n\nThe statements inside the context manager are either committed as a\ntransaction or rejected, atomically. This is useful when a queue is\nused to manage jobs because it allows you to retrieve a job from the\nqueue, perform a job and write a result, with transactional\nsemantics.\n\nMethods\n=======\n\nUse the ``put(data)`` method to insert an item into the queue. It\ntakes a JSON-compatible object such as a Python dictionary:\n\n.. code-block:: python\n\n    queue.put({'kind': 'Cox'})\n    queue.put({'kind': 'Arthur Turner'})\n    queue.put({'kind': 'Golden Delicious'})\n\nItems are pulled out of the queue using ``get(block=True)``. The\ndefault behavior is to block until an item is available with a default\ntimeout of one second after which a value of ``None`` is returned.\n\n.. code-block:: python\n\n    def eat(kind):\n        print 'umm, %s apples taste good.' % kind\n\n    job = queue.get()\n    eat(**job.data)\n\nThe ``job`` object provides additional metadata in addition to the\n``data`` attribute as illustrated by the string representation:\n\n    >>> job\n    <pq.Job id=77709 size=1 enqueued_at=\"2014-02-21T16:22:06Z\" schedule_at=None>\n\nThe ``get`` operation is also available through iteration:\n\n.. code-block:: python\n\n    for job in queue:\n        if job is None:\n            break\n\n        eat(**job.data)\n\nThe iterator blocks if no item is available. Again, there is a default\ntimeout of one second, after which the iterator yields a value of\n``None``.\n\nAn application can then choose to break out of the loop, or wait again\nfor an item to be ready.\n\n.. code-block:: python\n\n    for job in queue:\n        if job is not None:\n            eat(**job.data)\n\n        # This is an infinite loop!\n\n\nScheduling\n==========\n\nItems can be scheduled such that they're not pulled until a later\ntime:\n\n.. code-block:: python\n\n    queue.put({'kind': 'Cox'}, '5m')\n\nIn this example, the item is ready for work five minutes later. The\nmethod also accepts ``datetime`` and ``timedelta`` objects.\n\n\nPriority\n========\n\nIf some items are more important than others, a time expectation can\nbe expressed:\n\n.. code-block:: python\n\n    queue.put({'kind': 'Cox'}, expected_at='5m')\n\nThis tells the queue processor to give priority to this item over an\nitem expected at a later time, and conversely, to prefer an item with\nan earlier expected time. Note that items without a set priority are\npulled last.\n\nThe scheduling and priority options can be combined:\n\n.. code-block:: python\n\n    queue.put({'kind': 'Cox'}, '1h', '2h')\n\nThis item won't be pulled out until after one hour, and even then,\nit's only processed subject to it's priority of two hours.\n\n\nEncoding and decoding\n=====================\n\nThe task data is encoded and decoded into JSON using the built-in\n`json` module. If you want to use a different implementation or need\nto configure this, pass `encode` and/or `decode` arguments to the `PQ`\nconstructor.\n\n\nPickles\n=======\n\nIf a queue name is provided as ``<name>/pickle``\n(e.g. ``'jobs/pickle'``), items are automatically pickled and\nunpickled using Python's built-in ``cPickle`` module:\n\n.. code-block:: python\n\n    queue = pq['apples/pickle']\n\n    class Apple(object):\n        def __init__(self, kind):\n           self.kind = kind\n\n    queue.put(Apple('Cox'))\n\nThis allows you to store most objects without having to add any\nfurther serialization code.\n\nThe old pickle protocol ``0`` is used to ensure the pickled data is\nencoded as ``ascii`` which should be compatible with any database\nencoding. Note that the pickle data is still wrapped as a JSON string at the\ndatabase level.\n\nWhile using the pickle protocol is an easy way to serialize objects,\nfor advanced users t might be better to use JSON serialization\ndirectly on the objects, using for example the object hook mechanism\nin the built-in `json` module or subclassing\n`JSONEncoder <https://docs.python.org/2/library/json.html#json.JSONEncoder>`.\n\n\nTasks\n=====\n\n``pq`` comes with a higher level ``API`` that helps to manage ``tasks``.\n\n\n.. code-block:: python\n\n    from pq.tasks import PQ\n\n    pq = PQ(...)\n\n    queue = pq['default']\n\n    @queue.task(schedule_at='1h')\n    def eat(kind):\n        print 'umm, %s apples taste good.' % kind\n\n    eat('Cox')\n\n    queue.work()\n\n\n``tasks``'s ``jobs`` can optionally be re-scheduled on failure:\n\n.. code-block:: python\n\n    @queue.task(schedule_at='1h', max_retries=2, retry_in='10s')\n    def eat(kind):\n        # ...\n\n\nTime expectations can be overriden at ``task`` call:\n\n.. code-block:: python\n\n    eat('Cox', _expected_at='2m', _schedule_at='1m')\n\n\nThread-safety\n=============\n\nAll objects are thread-safe as long as a connection pool is provided\nwhere each thread receives its own database connection.\n\n\nChanges\n=======\n\n1.8.1 (2019-07-30)\n------------------\n\n- Added overridable `encode` and `decode` methods which are\n  responsible for turning task data into `JSON` and vice-versa.\n\n1.8.0 (2019-07-03)\n------------------\n\n- Change policy on task priority. Tasks with a null-value for\n  `expected_at` are now processed after items that have a value set.\n\n1.7.0 (2019-04-07)\n------------------\n\n- Use `SKIP LOCKED` instead of advisory lock mechanism (PostgreSQL 9.5+).\n\n1.6.1 (2018-11-14)\n------------------\n\n- Fix queue class factory pattern.\n\n1.6 (2018-11-12)\n----------------\n\n- Fix compatibility with `NamedTupleCursor`.\n\n- Fix duplicate column name issue.\n\n- Add option to specify own queue class.\n\n\n1.5 (2017-04-18)\n----------------\n\n- Fixed Python 2 compatibility.\n\n\n1.4 (2016-03-25)\n----------------\n\n- Added worker class and handler helper decorator.\n  [jeanphix]\n\n\n1.3 (2015-05-11)\n----------------\n\n- Python 3 compatibility.\n  [migurski]\n\n- Fix time zone issue.\n\n\n1.2 (2014-10-21)\n----------------\n\nImprovements:\n\n- Fixed concurrency issue where a large number of locks would be held\n  as a queue grows in size.\n\n- Fixed a database connection resource issue.\n\n\n1.1 (2014-02-27)\n----------------\n\nFeatures:\n\n- A queue is now also a context manager, providing transactional\n  semantics.\n\n- A queues now returns task objects which provide metadata and allows\n  reading and writing task data.\n\nImprovements:\n\n- The same connection pool can now be used with different queues.\n\nBugs:\n\n- The `Literal` string wrapper did not work correctly with `psycopg2`.\n\n- The transaction manager now correctly returns connections to the\n  pool.\n\n\n1.0 (2013-11-20)\n----------------\n\n- Initial public release.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/malthe/pq/", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "pq", "package_url": "https://pypi.org/project/pq/", "platform": "any", "project_url": "https://pypi.org/project/pq/", "project_urls": {"Homepage": "https://github.com/malthe/pq/"}, "release_url": "https://pypi.org/project/pq/1.8.1/", "requires_dist": null, "requires_python": "", "summary": "PQ is a transactional queue for PostgreSQL.", "version": "1.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A transactional queue system for PostgreSQL written in Python.</p>\n<div>\n<img alt=\"PQ does the job!\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4fc5f33d4b26162510e0ca0c37e0ff437264afa8/68747470733a2f2f70712e72656164746865646f63732e6f72672f656e2f6c61746573742f5f7374617469632f696e74726f2e737667\">\n</div>\n<p>It allows you to push and pop items in and out of a queue in various\nways and also provides two scheduling options: delayed processing and\nprioritization.</p>\n<p>The system uses a single table that holds all jobs across queues; the\nspecifics are easy to customize.</p>\n<p>The system currently supports only the <a href=\"https://pypi.python.org/pypi/psycopg2\" rel=\"nofollow\">psycopg2</a> database driver - or\n<a href=\"https://pypi.python.org/pypi/psycopg2cffi\" rel=\"nofollow\">psycopg2cffi</a> for PyPy.</p>\n<p>The basic queue implementation is similar to Ryan Smith\u2019s\n<a href=\"https://github.com/ryandotsmith/queue_classic\" rel=\"nofollow\">queue_classic</a>\nlibrary written in Ruby, but uses <a href=\"https://www.2ndquadrant.com/en/blog/what-is-select-skip-locked-for-in-postgresql-9-5/\" rel=\"nofollow\">SKIP LOCKED</a>\nfor concurrency control.</p>\n<p>In terms of performance, the implementation clock in at about 1,000\noperations per second. Using the <a href=\"http://pypy.org/\" rel=\"nofollow\">PyPy</a>\ninterpreter, this scales linearly with the number of cores available.</p>\n<div id=\"getting-started\">\n<h2>Getting started</h2>\n<p>All functionality is encapsulated in a single class <tt>PQ</tt>.</p>\n<blockquote>\n<tt>class PQ(conn=None, pool=None, <span class=\"pre\">table='queue',</span> debug=False)</tt></blockquote>\n<p>Example usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">psycopg2</span> <span class=\"kn\">import</span> <span class=\"n\">connect</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pq</span> <span class=\"kn\">import</span> <span class=\"n\">PQ</span>\n\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'dbname=example user=postgres'</span><span class=\"p\">)</span>\n<span class=\"n\">pq</span> <span class=\"o\">=</span> <span class=\"n\">PQ</span><span class=\"p\">(</span><span class=\"n\">conn</span><span class=\"p\">)</span>\n</pre>\n<p>For multi-threaded operation, use a connection pool such as\n<tt>psycopg2.pool.ThreadedConnectionPool</tt>.</p>\n<p>You probably want to make sure your database is created with the\n<tt><span class=\"pre\">utf-8</span></tt> encoding.</p>\n<p>To create and configure the queue table, call the <tt>create()</tt> method.</p>\n<pre><span class=\"n\">pq</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">()</span>\n</pre>\n<p>The table name defaults to <tt>'queue'</tt>. To use a different name, pass\nit as a string value as the <tt>table</tt> argument for the <tt>PQ</tt> class\n(illustrated above).</p>\n</div>\n<div id=\"queues\">\n<h2>Queues</h2>\n<p>The <tt>pq</tt> object exposes queues through Python\u2019s dictionary\ninterface:</p>\n<pre><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">[</span><span class=\"s1\">'apples'</span><span class=\"p\">]</span>\n</pre>\n<p>The <tt>queue</tt> object provides <tt>get</tt> and <tt>put</tt> methods as explained\nbelow, and in addition, it also works as a context manager where it\nmanages a transaction:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">queue</span> <span class=\"k\">as</span> <span class=\"n\">cursor</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre>\n<p>The statements inside the context manager are either committed as a\ntransaction or rejected, atomically. This is useful when a queue is\nused to manage jobs because it allows you to retrieve a job from the\nqueue, perform a job and write a result, with transactional\nsemantics.</p>\n</div>\n<div id=\"methods\">\n<h2>Methods</h2>\n<p>Use the <tt>put(data)</tt> method to insert an item into the queue. It\ntakes a JSON-compatible object such as a Python dictionary:</p>\n<pre><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Cox'</span><span class=\"p\">})</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Arthur Turner'</span><span class=\"p\">})</span>\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Golden Delicious'</span><span class=\"p\">})</span>\n</pre>\n<p>Items are pulled out of the queue using <tt>get(block=True)</tt>. The\ndefault behavior is to block until an item is available with a default\ntimeout of one second after which a value of <tt>None</tt> is returned.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'umm, </span><span class=\"si\">%s</span><span class=\"s1\"> apples taste good.'</span> <span class=\"o\">%</span> <span class=\"n\">kind</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span>\n<span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>job</tt> object provides additional metadata in addition to the\n<tt>data</tt> attribute as illustrated by the string representation:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; job\n&lt;pq.Job id=77709 size=1 enqueued_at=\"2014-02-21T16:22:06Z\" schedule_at=None&gt;\n</pre>\n</blockquote>\n<p>The <tt>get</tt> operation is also available through iteration:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">job</span> <span class=\"ow\">in</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">job</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n    <span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<p>The iterator blocks if no item is available. Again, there is a default\ntimeout of one second, after which the iterator yields a value of\n<tt>None</tt>.</p>\n<p>An application can then choose to break out of the loop, or wait again\nfor an item to be ready.</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">job</span> <span class=\"ow\">in</span> <span class=\"n\">queue</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">job</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># This is an infinite loop!</span>\n</pre>\n</div>\n<div id=\"scheduling\">\n<h2>Scheduling</h2>\n<p>Items can be scheduled such that they\u2019re not pulled until a later\ntime:</p>\n<pre><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Cox'</span><span class=\"p\">},</span> <span class=\"s1\">'5m'</span><span class=\"p\">)</span>\n</pre>\n<p>In this example, the item is ready for work five minutes later. The\nmethod also accepts <tt>datetime</tt> and <tt>timedelta</tt> objects.</p>\n</div>\n<div id=\"priority\">\n<h2>Priority</h2>\n<p>If some items are more important than others, a time expectation can\nbe expressed:</p>\n<pre><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Cox'</span><span class=\"p\">},</span> <span class=\"n\">expected_at</span><span class=\"o\">=</span><span class=\"s1\">'5m'</span><span class=\"p\">)</span>\n</pre>\n<p>This tells the queue processor to give priority to this item over an\nitem expected at a later time, and conversely, to prefer an item with\nan earlier expected time. Note that items without a set priority are\npulled last.</p>\n<p>The scheduling and priority options can be combined:</p>\n<pre><span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">({</span><span class=\"s1\">'kind'</span><span class=\"p\">:</span> <span class=\"s1\">'Cox'</span><span class=\"p\">},</span> <span class=\"s1\">'1h'</span><span class=\"p\">,</span> <span class=\"s1\">'2h'</span><span class=\"p\">)</span>\n</pre>\n<p>This item won\u2019t be pulled out until after one hour, and even then,\nit\u2019s only processed subject to it\u2019s priority of two hours.</p>\n</div>\n<div id=\"encoding-and-decoding\">\n<h2>Encoding and decoding</h2>\n<p>The task data is encoded and decoded into JSON using the built-in\n<cite>json</cite> module. If you want to use a different implementation or need\nto configure this, pass <cite>encode</cite> and/or <cite>decode</cite> arguments to the <cite>PQ</cite>\nconstructor.</p>\n</div>\n<div id=\"pickles\">\n<h2>Pickles</h2>\n<p>If a queue name is provided as <tt><span class=\"pre\">&lt;name&gt;/pickle</span></tt>\n(e.g. <tt>'jobs/pickle'</tt>), items are automatically pickled and\nunpickled using Python\u2019s built-in <tt>cPickle</tt> module:</p>\n<pre><span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">[</span><span class=\"s1\">'apples/pickle'</span><span class=\"p\">]</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Apple</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">kind</span><span class=\"p\">):</span>\n       <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kind</span> <span class=\"o\">=</span> <span class=\"n\">kind</span>\n\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"n\">Apple</span><span class=\"p\">(</span><span class=\"s1\">'Cox'</span><span class=\"p\">))</span>\n</pre>\n<p>This allows you to store most objects without having to add any\nfurther serialization code.</p>\n<p>The old pickle protocol <tt>0</tt> is used to ensure the pickled data is\nencoded as <tt>ascii</tt> which should be compatible with any database\nencoding. Note that the pickle data is still wrapped as a JSON string at the\ndatabase level.</p>\n<p>While using the pickle protocol is an easy way to serialize objects,\nfor advanced users t might be better to use JSON serialization\ndirectly on the objects, using for example the object hook mechanism\nin the built-in <cite>json</cite> module or subclassing\n<cite>JSONEncoder &lt;https://docs.python.org/2/library/json.html#json.JSONEncoder&gt;</cite>.</p>\n</div>\n<div id=\"tasks\">\n<h2>Tasks</h2>\n<p><tt>pq</tt> comes with a higher level <tt>API</tt> that helps to manage <tt>tasks</tt>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pq.tasks</span> <span class=\"kn\">import</span> <span class=\"n\">PQ</span>\n\n<span class=\"n\">pq</span> <span class=\"o\">=</span> <span class=\"n\">PQ</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n\n<span class=\"n\">queue</span> <span class=\"o\">=</span> <span class=\"n\">pq</span><span class=\"p\">[</span><span class=\"s1\">'default'</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">schedule_at</span><span class=\"o\">=</span><span class=\"s1\">'1h'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'umm, </span><span class=\"si\">%s</span><span class=\"s1\"> apples taste good.'</span> <span class=\"o\">%</span> <span class=\"n\">kind</span>\n\n<span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"s1\">'Cox'</span><span class=\"p\">)</span>\n\n<span class=\"n\">queue</span><span class=\"o\">.</span><span class=\"n\">work</span><span class=\"p\">()</span>\n</pre>\n<p><tt>tasks</tt>\u2019s <tt>jobs</tt> can optionally be re-scheduled on failure:</p>\n<pre><span class=\"nd\">@queue</span><span class=\"o\">.</span><span class=\"n\">task</span><span class=\"p\">(</span><span class=\"n\">schedule_at</span><span class=\"o\">=</span><span class=\"s1\">'1h'</span><span class=\"p\">,</span> <span class=\"n\">max_retries</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">retry_in</span><span class=\"o\">=</span><span class=\"s1\">'10s'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">eat</span><span class=\"p\">(</span><span class=\"n\">kind</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Time expectations can be overriden at <tt>task</tt> call:</p>\n<pre><span class=\"n\">eat</span><span class=\"p\">(</span><span class=\"s1\">'Cox'</span><span class=\"p\">,</span> <span class=\"n\">_expected_at</span><span class=\"o\">=</span><span class=\"s1\">'2m'</span><span class=\"p\">,</span> <span class=\"n\">_schedule_at</span><span class=\"o\">=</span><span class=\"s1\">'1m'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"thread-safety\">\n<h2>Thread-safety</h2>\n<p>All objects are thread-safe as long as a connection pool is provided\nwhere each thread receives its own database connection.</p>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>1.8.1 (2019-07-30)</h3>\n<ul>\n<li>Added overridable <cite>encode</cite> and <cite>decode</cite> methods which are\nresponsible for turning task data into <cite>JSON</cite> and vice-versa.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.8.0 (2019-07-03)</h3>\n<ul>\n<li>Change policy on task priority. Tasks with a null-value for\n<cite>expected_at</cite> are now processed after items that have a value set.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.7.0 (2019-04-07)</h3>\n<ul>\n<li>Use <cite>SKIP LOCKED</cite> instead of advisory lock mechanism (PostgreSQL 9.5+).</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.6.1 (2018-11-14)</h3>\n<ul>\n<li>Fix queue class factory pattern.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.6 (2018-11-12)</h3>\n<ul>\n<li>Fix compatibility with <cite>NamedTupleCursor</cite>.</li>\n<li>Fix duplicate column name issue.</li>\n<li>Add option to specify own queue class.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>1.5 (2017-04-18)</h3>\n<ul>\n<li>Fixed Python 2 compatibility.</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3>1.4 (2016-03-25)</h3>\n<ul>\n<li>Added worker class and handler helper decorator.\n[jeanphix]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3>1.3 (2015-05-11)</h3>\n<ul>\n<li>Python 3 compatibility.\n[migurski]</li>\n<li>Fix time zone issue.</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3>1.2 (2014-10-21)</h3>\n<p>Improvements:</p>\n<ul>\n<li>Fixed concurrency issue where a large number of locks would be held\nas a queue grows in size.</li>\n<li>Fixed a database connection resource issue.</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3>1.1 (2014-02-27)</h3>\n<p>Features:</p>\n<ul>\n<li>A queue is now also a context manager, providing transactional\nsemantics.</li>\n<li>A queues now returns task objects which provide metadata and allows\nreading and writing task data.</li>\n</ul>\n<p>Improvements:</p>\n<ul>\n<li>The same connection pool can now be used with different queues.</li>\n</ul>\n<p>Bugs:</p>\n<ul>\n<li>The <cite>Literal</cite> string wrapper did not work correctly with <cite>psycopg2</cite>.</li>\n<li>The transaction manager now correctly returns connections to the\npool.</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3>1.0 (2013-11-20)</h3>\n<ul>\n<li>Initial public release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5607291, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "6a8d8ed7698ec842939ddce4c5f3968a", "sha256": "e2fa2ba2069f08aeb658f9edf2fbe042ad8549a5bb29d8ff1cfc3108d80b16fc"}, "downloads": -1, "filename": "pq-1.0.tar.gz", "has_sig": false, "md5_digest": "6a8d8ed7698ec842939ddce4c5f3968a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11588, "upload_time": "2013-11-20T19:29:06", "upload_time_iso_8601": "2013-11-20T19:29:06.893582Z", "url": "https://files.pythonhosted.org/packages/a5/ae/84a2d4c67f7714105758e031f2e69b682a31cb6af5972f8bfa9941a8f09d/pq-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "2ee2b7513243925a1cc9de565f126117", "sha256": "85ac19b0769b558c3fabb96e62912b31813ca347d143260f18fc55276f80b117"}, "downloads": -1, "filename": "pq-1.1.tar.gz", "has_sig": false, "md5_digest": "2ee2b7513243925a1cc9de565f126117", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13942, "upload_time": "2014-02-27T12:50:41", "upload_time_iso_8601": "2014-02-27T12:50:41.716478Z", "url": "https://files.pythonhosted.org/packages/10/0b/3b70924fcc0b662f3affebec4cc5cc58cea4b29d6c09e95223509d1eff64/pq-1.1.tar.gz", "yanked": false}], "1.1-dev": [], "1.2": [{"comment_text": "", "digests": {"md5": "f0d16097476f13ded90459ebe5fd52d9", "sha256": "f4e82da2b38a78a0012d7b092764a313ee7fc7973b0612da6a03b4f90a7a676a"}, "downloads": -1, "filename": "pq-1.2.tar.gz", "has_sig": false, "md5_digest": "f0d16097476f13ded90459ebe5fd52d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14665, "upload_time": "2014-10-21T17:56:58", "upload_time_iso_8601": "2014-10-21T17:56:58.134869Z", "url": "https://files.pythonhosted.org/packages/10/3f/88ad0a84e3f87e571818b5a25bba07fd57d3d02ece00feab4eab143f3261/pq-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "298b55aded5a3c49ba61cd884209964c", "sha256": "c1d62feeff6ab9c362eb2aaeaf1d5062b4c0992eb2507d0852a17398017e85a3"}, "downloads": -1, "filename": "pq-1.3.tar.gz", "has_sig": false, "md5_digest": "298b55aded5a3c49ba61cd884209964c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12271, "upload_time": "2015-05-11T07:43:50", "upload_time_iso_8601": "2015-05-11T07:43:50.310108Z", "url": "https://files.pythonhosted.org/packages/5f/bb/4cb8c63851d3e9d0b455912f1c360688719e66978f5fee9cee22e1176e29/pq-1.3.tar.gz", "yanked": false}], "1.3-dev": [], "1.4": [{"comment_text": "", "digests": {"md5": "5207ffc528b09b48b858351fe6c651d4", "sha256": "a70f5a16516a1453d2f9fc676f3c55988a054811d86711e0835d9e6298c01e79"}, "downloads": -1, "filename": "pq-1.4.tar.gz", "has_sig": false, "md5_digest": "5207ffc528b09b48b858351fe6c651d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14022, "upload_time": "2016-03-25T13:41:24", "upload_time_iso_8601": "2016-03-25T13:41:24.690927Z", "url": "https://files.pythonhosted.org/packages/d4/02/d4703b44ca3846bd90f4ec200ab6b610223729e3555bb01b621281bb765a/pq-1.4.tar.gz", "yanked": false}], "1.5": [{"comment_text": "", "digests": {"md5": "26eecab858834e9fac9c6aa4daf3aff1", "sha256": "e6c39bfd1dee69585f75255976c62d7d52d9f2f342e0d689808250f115422f07"}, "downloads": -1, "filename": "pq-1.5.tar.gz", "has_sig": false, "md5_digest": "26eecab858834e9fac9c6aa4daf3aff1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14525, "upload_time": "2017-04-18T10:29:39", "upload_time_iso_8601": "2017-04-18T10:29:39.829686Z", "url": "https://files.pythonhosted.org/packages/ad/db/a837db5872f9a00e3bd7331de03067ba8c57485847874ac1f55790bac005/pq-1.5.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "ba6ff5ee17f0c3bb441ebd09d07e8c0e", "sha256": "07ec795d72bf40d297c53a6d6ae9104e103e70ca0a653d789c828ee36f31722f"}, "downloads": -1, "filename": "pq-1.6.tar.gz", "has_sig": false, "md5_digest": "ba6ff5ee17f0c3bb441ebd09d07e8c0e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17734, "upload_time": "2018-11-12T18:34:58", "upload_time_iso_8601": "2018-11-12T18:34:58.990555Z", "url": "https://files.pythonhosted.org/packages/98/7a/9b69f825179803b73159c19cba4c0974adc3c5d244cb2fd9ec4abc6b87ce/pq-1.6.tar.gz", "yanked": false}], "1.6.1": [{"comment_text": "", "digests": {"md5": "da3f1348d9d007111410fff1553e943a", "sha256": "16f233d9cf0b01f183852bd95168c7e847b9030bba885c031c013095c1dcf3d1"}, "downloads": -1, "filename": "pq-1.6.1.tar.gz", "has_sig": false, "md5_digest": "da3f1348d9d007111410fff1553e943a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17810, "upload_time": "2018-11-14T17:00:12", "upload_time_iso_8601": "2018-11-14T17:00:12.078405Z", "url": "https://files.pythonhosted.org/packages/10/22/498c70afbd3555f0ae9c1171dfaae432eebe78cd456a772efcd6345a7116/pq-1.6.1.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "bc8987652dc11e4cf26a03d15b7c0207", "sha256": "680f37bfb22a60d212fa7e0f3939d7e4e31b81cbb97735845b962ae497243463"}, "downloads": -1, "filename": "pq-1.7.0.tar.gz", "has_sig": false, "md5_digest": "bc8987652dc11e4cf26a03d15b7c0207", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17961, "upload_time": "2019-04-07T19:25:37", "upload_time_iso_8601": "2019-04-07T19:25:37.211564Z", "url": "https://files.pythonhosted.org/packages/97/12/d06473b2dc24d228414f14b7da272bb1619e9d6881663e2782adf72751cb/pq-1.7.0.tar.gz", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "f2a77529e03fe95c06794a111e705754", "sha256": "b17bcbe16e07c18d2a8e1b8fe06b70356f8c78a60bf22d25cfd175e88b9bd50e"}, "downloads": -1, "filename": "pq-1.8.0.tar.gz", "has_sig": false, "md5_digest": "f2a77529e03fe95c06794a111e705754", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18196, "upload_time": "2019-07-03T07:25:38", "upload_time_iso_8601": "2019-07-03T07:25:38.834502Z", "url": "https://files.pythonhosted.org/packages/7d/25/43454f5ce3aa72fe20c457009c620862f6337802e3c1c64df9902531378d/pq-1.8.0.tar.gz", "yanked": false}], "1.8.1": [{"comment_text": "", "digests": {"md5": "b9224c435b8259442b1a1bb4072b794e", "sha256": "9e2c0195488263902ebc9da8df6c82bebe4ee32c79d9ecd0cdc2945afbf7ad32"}, "downloads": -1, "filename": "pq-1.8.1.tar.gz", "has_sig": false, "md5_digest": "b9224c435b8259442b1a1bb4072b794e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19039, "upload_time": "2019-07-30T11:55:18", "upload_time_iso_8601": "2019-07-30T11:55:18.815147Z", "url": "https://files.pythonhosted.org/packages/2b/c9/e74e35501669011133fa4d4fb6df9a0656908526c53d91172392eb27ace7/pq-1.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b9224c435b8259442b1a1bb4072b794e", "sha256": "9e2c0195488263902ebc9da8df6c82bebe4ee32c79d9ecd0cdc2945afbf7ad32"}, "downloads": -1, "filename": "pq-1.8.1.tar.gz", "has_sig": false, "md5_digest": "b9224c435b8259442b1a1bb4072b794e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19039, "upload_time": "2019-07-30T11:55:18", "upload_time_iso_8601": "2019-07-30T11:55:18.815147Z", "url": "https://files.pythonhosted.org/packages/2b/c9/e74e35501669011133fa4d4fb6df9a0656908526c53d91172392eb27ace7/pq-1.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:20:17 2020"}