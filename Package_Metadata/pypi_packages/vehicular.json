{"info": {"author": "Alexander Potts", "author_email": "alexander.potts@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Topic :: Utilities"], "description": "# Vehicular\n\nI like to ride motorcycles (Dualsports, to be specific) and it's well known that the \nbest place to look for a good deal on used bikes is craigslist.  In order to jump on\na deal, you've got to constantly troll craigslist for new posts.  \n\nHowever, I like to automate things when I can, so I wrote this little CLI app to \nsearch for me.  It uses [feedparser](https://github.com/kurtmckee/feedparser) to \nsort through craigslist rss feeds and sends you an email notification when it finds\nnew matches.\n\n# Usage\n\nVehicular runs in a custom shell that manages all the various search parameters.\nThere are a lot of possible search parameters, inside the shell run `help` to view \nall the commands. and `help <command>` to view help info for `<command>`.  Tab\nautocomplete works for commands that have specific options.  Using it is encouraged as\nincorrectly typed parameters will fail as invalid.\n\n Of all the parameters, only a few are required: `city`, `seller_type`,\n`vehicle_type` and `make_model`.\n\n* `city`\n    * Run `city help` to view all available cities in which to search.  \n    Tab autocomplete is your friend with this one.\n\n* `seller_type`\n    * Defaults to search for results from both dealers and owners\n    * Run `seller_type dealer` or `seller_type owner` to change it to your desired \n    option\n\n* `vehicle_type`\n    * Craigslist splits vehicle listings up into motorcycles and cars/trucks\n    * run `vehicle_type motorcyle` or `vehicle_type cars/trucks` to select \n    which search you want to run.\n\n* `make_model`\n    * Selects the make / model you're looking for.  Pretty obvious once you think\n    about it.\n\nAll the other parameters are optional.\n\nAfter having selected the parameters, run `add_search`, which compiles the selected options into\nan RSS URL, which is stored in the database.  After having added the search, running \n`run_search` will parse the searches and send an email notification if matches are found.\n\n# Installation\n\nInstall via `pip install vehicular`\n\n# License\n\nGPLv3, see LICENSE.txt\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jakkso/vehicular", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "vehicular", "package_url": "https://pypi.org/project/vehicular/", "platform": "", "project_url": "https://pypi.org/project/vehicular/", "project_urls": {"Homepage": "https://github.com/jakkso/vehicular"}, "release_url": "https://pypi.org/project/vehicular/0.1.0/", "requires_dist": ["feedparser", "jinja2", "gnureadline"], "requires_python": "", "summary": "a craigslist vehicle search cli app", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Vehicular</h1>\n<p>I like to ride motorcycles (Dualsports, to be specific) and it's well known that the\nbest place to look for a good deal on used bikes is craigslist.  In order to jump on\na deal, you've got to constantly troll craigslist for new posts.</p>\n<p>However, I like to automate things when I can, so I wrote this little CLI app to\nsearch for me.  It uses <a href=\"https://github.com/kurtmckee/feedparser\" rel=\"nofollow\">feedparser</a> to\nsort through craigslist rss feeds and sends you an email notification when it finds\nnew matches.</p>\n<h1>Usage</h1>\n<p>Vehicular runs in a custom shell that manages all the various search parameters.\nThere are a lot of possible search parameters, inside the shell run <code>help</code> to view\nall the commands. and <code>help &lt;command&gt;</code> to view help info for <code>&lt;command&gt;</code>.  Tab\nautocomplete works for commands that have specific options.  Using it is encouraged as\nincorrectly typed parameters will fail as invalid.</p>\n<p>Of all the parameters, only a few are required: <code>city</code>, <code>seller_type</code>,\n<code>vehicle_type</code> and <code>make_model</code>.</p>\n<ul>\n<li>\n<p><code>city</code></p>\n<ul>\n<li>Run <code>city help</code> to view all available cities in which to search.<br>\nTab autocomplete is your friend with this one.</li>\n</ul>\n</li>\n<li>\n<p><code>seller_type</code></p>\n<ul>\n<li>Defaults to search for results from both dealers and owners</li>\n<li>Run <code>seller_type dealer</code> or <code>seller_type owner</code> to change it to your desired\noption</li>\n</ul>\n</li>\n<li>\n<p><code>vehicle_type</code></p>\n<ul>\n<li>Craigslist splits vehicle listings up into motorcycles and cars/trucks</li>\n<li>run <code>vehicle_type motorcyle</code> or <code>vehicle_type cars/trucks</code> to select\nwhich search you want to run.</li>\n</ul>\n</li>\n<li>\n<p><code>make_model</code></p>\n<ul>\n<li>Selects the make / model you're looking for.  Pretty obvious once you think\nabout it.</li>\n</ul>\n</li>\n</ul>\n<p>All the other parameters are optional.</p>\n<p>After having selected the parameters, run <code>add_search</code>, which compiles the selected options into\nan RSS URL, which is stored in the database.  After having added the search, running\n<code>run_search</code> will parse the searches and send an email notification if matches are found.</p>\n<h1>Installation</h1>\n<p>Install via <code>pip install vehicular</code></p>\n<h1>License</h1>\n<p>GPLv3, see LICENSE.txt</p>\n\n          </div>"}, "last_serial": 4074017, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "2b671e06062534416bbd79fbfb9df679", "sha256": "11a1ee71226e9759bebd98d621d68c080e2da1ba0843851b3e33e38df1412a02"}, "downloads": -1, "filename": "vehicular-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b671e06062534416bbd79fbfb9df679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58004, "upload_time": "2018-07-17T15:03:10", "upload_time_iso_8601": "2018-07-17T15:03:10.071738Z", "url": "https://files.pythonhosted.org/packages/f9/d4/078ac71d791078202fd3af06e349d806ce7267c8a7552d8a9d95e89de81f/vehicular-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4136b376aabcec89d20efad07ea502", "sha256": "c4483855c2209434c5a5b588a2a274e4ee324bcdf8a38b1206c4f66c6b6eed17"}, "downloads": -1, "filename": "vehicular-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1e4136b376aabcec89d20efad07ea502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26475, "upload_time": "2018-07-17T15:03:11", "upload_time_iso_8601": "2018-07-17T15:03:11.048821Z", "url": "https://files.pythonhosted.org/packages/de/42/5d1232e91439be78fe9d7846d5dbb15e2be97a5d8379c170015d1ecb2fec/vehicular-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b671e06062534416bbd79fbfb9df679", "sha256": "11a1ee71226e9759bebd98d621d68c080e2da1ba0843851b3e33e38df1412a02"}, "downloads": -1, "filename": "vehicular-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2b671e06062534416bbd79fbfb9df679", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 58004, "upload_time": "2018-07-17T15:03:10", "upload_time_iso_8601": "2018-07-17T15:03:10.071738Z", "url": "https://files.pythonhosted.org/packages/f9/d4/078ac71d791078202fd3af06e349d806ce7267c8a7552d8a9d95e89de81f/vehicular-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4136b376aabcec89d20efad07ea502", "sha256": "c4483855c2209434c5a5b588a2a274e4ee324bcdf8a38b1206c4f66c6b6eed17"}, "downloads": -1, "filename": "vehicular-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1e4136b376aabcec89d20efad07ea502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26475, "upload_time": "2018-07-17T15:03:11", "upload_time_iso_8601": "2018-07-17T15:03:11.048821Z", "url": "https://files.pythonhosted.org/packages/de/42/5d1232e91439be78fe9d7846d5dbb15e2be97a5d8379c170015d1ecb2fec/vehicular-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:37:07 2020"}