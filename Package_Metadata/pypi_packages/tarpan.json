{"info": {"author": "Evgenii Neumerzhitckii", "author_email": "sausageskin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: Public Domain", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# A Python library for analysing cmdstanpy output\n\nThis is a collection of functions for analysing output of [cmdstanpy](https://github.com/stan-dev/cmdstanpy) library. The main idea is to do a quick data analysis by calling a single function that makes:\n\n* traceplots of samples,\n\n* text and plots of the summaries of model parameters,\n\n* histograms and pair plots of posterior distributions of parameters.\n\n\n<img src='https://github.com/evgenyneu/tarpan/raw/master/images/tarpan.jpg' alt='Picture of Tarpan'>\n\n*The only known illustration of a tarpan made from life, depicting a five month old colt (Borisov, 1841). Source: [Wikimedia Commons](https://commons.wikimedia.org/wiki/File:Tarpan.png).*\n\n\n## Setup\n\nFirst, run:\n\n```\npip install tarpan\n```\n\n\nFinally, install [cmdstan](https://github.com/stan-dev/cmdstan) by running:\n\n```\ninstall_cmdstan\n```\n\n\n## Complete analysis: `save_analysis`\n\nThis is the main function of the library that saves summaries\nand trace/pair/tree plots in\n[model_info](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple/model_info/analyse) directory.\nThe function is useful when you want to generate all types of summaries\nand plots at once.\n\n```Python\nfrom tarpan.cmdstanpy.analyse import save_analysis\n\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_analysis(fit, param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple)\n\nIf you don't need everything, you can call individual\nfunctions described below to make just one type of plot or a summary.\n\n\n### Analysis without cmdstanpy\n\nHere is how to analyse values from Pandas' data frame columns:\n\n```Python\nfrom tarpan.shared.analyse import save_analysis\nsave_analysis(df, param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a02_no_cmdstanpy)\n\n\n\n## Summary: `save_summary`\n\nCreates a summary of parameter distributions and saves it in text and CSV files.\n\n\n```Python\nfrom tarpan.cmdstanpy.summary import save_summary\n\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_summary(fit, param_names=['mu', 'tau', 'eta.1'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a01_save_summary)\n\nThe text summary format is such that the text can be pasted into Github/Gitlab/Bitbucket's Markdown file, like this:\n\n| Name   |   Mean |   Std |   Mode |    + |    - |   68CI- |   68CI+ |   95CI- |   95CI+ |   N_Eff |   R_hat |\n|:-------|-------:|------:|-------:|-----:|-----:|--------:|--------:|--------:|--------:|--------:|--------:|\n| mu     |   8.05 |  5.12 |   7.53 | 4.63 | 4.59 |    2.93 |   12.16 |   -1.84 |   18.74 |    1540 |    1.00 |\n| tau    |   6.41 |  5.72 |   2.36 | 5.41 | 2.35 |    0.00 |    7.76 |    0.00 |   17.07 |    1175 |    1.00 |\n| eta.1  |   0.39 |  0.92 |   0.60 | 0.71 | 1.13 |   -0.53 |    1.31 |   -1.48 |    2.19 |    3505 |    1.00 |\n\n\n### Summary columns\n\n*  **Name, Mean, Std** are the name of the parameter, its mean and standard deviation.\n\n*  **68CI-, 68CI+, 95CI-, 95CI+** are the 68% and 95% HPDIs (highest posterior density intervals). These values [are configurable](https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md).\n\n* **Mode, +, -** is a mode of distribution with upper and lower uncertainties, which are calculated as distances to 68% HPDI.\n\n* **N_Eff** is Stan's number of effective samples, the higher the better.\n\n* **R_hat** is a Stan's parameter representing the quality of the sampling. This value needs to be around 1.00. After generating a model I usually immediately look at this R_hat column to see if the sampling was good.\n\n\n### Summary without cmdstanpy\n\nHere is how to make summary of values from Pandas' data frame columns:\n\n```Python\nfrom tarpan.shared.summary import save_summary\nsave_summary(df, param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a03_no_cmdstanpy)\n\n\n\n## Tree plot: `save_tree_plot`\n\nThis function shows exactly the same information as `save_summary`, but in\nthe form a plot. The markers are the modes of the distributions, and the two error bars\nindicate 68% and 95% HPDIs (highest posterior density intervals).\n\n```Python\nfrom tarpan.cmdstanpy.tree_plot import save_tree_plot\n\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_tree_plot([fit], param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a01_single_fit)\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_tree_plot/a01_single_fit/model_info/tree_plot/summary.png\" width=\"600\" alt=\"Tree plot\">\n\n\n### Tree plot without cmdstanpy\n\nOne can make a tree plot by supplying a Panda's data frame that shows summaries of values for the frame's columns:\n\n```Python\nfrom tarpan.shared.tree_plot import save_tree_plot\nsave_tree_plot([df], param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a04_no_cmdstanpy)\n\n\n\n### Comparing multiple models on a tree plot\n\nSupply multiple fits in order to compare parameters from multiple models.\n\n```Python\nfrom tarpan.cmdstanpy.tree_plot import save_tree_plot\nfrom tarpan.shared.tree_plot import TreePlotParams\n\n# Sample from two models\nmodel1 = CmdStanModel(stan_file=\"your_model1.stan\")\nfit1 = model1.sample(data=your_data)\nmodel2 = CmdStanModel(stan_file=\"your_model2.stan\")\nfit2 = model2.sample(data=your_data)\n\n# Supply legend labels (optional)\ntree_params = TreePlotParams()\ntree_params.labels = [\"Model 1\", \"Model 2\", \"Exact\"]\ndata = [{\"mu\": 2.2, \"tau\": 1.3}]  # Add extra markers (optional)\n\nsave_tree_plot([fit1, fit2], extra_values=data, param_names=['mu', 'tau'],\n               tree_params=tree_params)\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a02_compare_fits)\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_tree_plot/a02_compare_fits/model_info/tree_plot_compare/summary.png\" width=\"600\" alt=\"Tree plot with multiple models\">\n\n\n## Comparing parameters of multiple models\n\nUse `save_compare_parameters` function to compare parameters between different models:\n\n|                      |                  mu |                 tau |\n|---------------------:|--------------------:|--------------------:|\n|              Model 1 | 7.53 (+4.63, -4.59) | 2.36 (+5.41, -2.35) |\n|              Model 2 | 8.87 (+9.05, -9.50) | 3.64 (+8.14, -3.61) |\n\nThis table is a numerical version of the plot created by `save_tree_plot`. The values here are modes of the distributions and uncertainties are distances to 68% HPD intervals.\n\n```Python\nfrom tarpan.cmdstanpy.compare_parameters import save_compare_parameters\nextra = [{\"mu\": 2.2, \"theta\": 1.3}]  # Add extra values (optional)\n\nsave_compare_parameters([fit1, fit2], labels=['Model 1', 'Model 2', 'Extra'],\n                        extra_values=extra,\n                        param_names=[\"mu\", \"theta\"])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a01_save_compare_parameters)\n\n\n### Use `save_compare_parameters` without cmdstanpy\n\nHere is how to compare parameters using Pandas data frames df1 and df2:\n\n```Python\nfrom tarpan.shared.compare_parameters import save_compare_parameters\nextra = [{\"mu\": 2.2, \"theta\": 1.3}]  # Add extra values (optional)\n\nsave_compare_parameters([df1, df2], labels=['Model 1', 'Model 2', 'Extra'],\n                        extra_values=extra,\n                        param_names=[\"mu\", \"theta\"])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a02_no_cmdstanpy)\n\n\n\n## Trace plot: `save_traceplot`\n\nThe plot shows the values of parameters samples.\nDifferent colors correspond to samples form different chains. Ideally,\nthe lines of different colors on the left plots are well mixed, and the\nright plot is fairly uniform.\n\n\n```Python\nfrom tarpan.cmdstanpy.traceplot import save_traceplot\n\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_traceplot(fit, param_names=['mu', 'tau', 'eta.1'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_traceplot/a01_save_traceplot)\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_traceplot/a01_save_traceplot/model_info/traceplot/traceplot_01.jpg\" width=\"900\" alt=\"Traceplot\">\n\n\n\n## Pair plot: `save_pair_plot`\n\nThe plot helps to see correlations between parameters and spot funnel\nshaped distributions that can result in sampling problems.\n\n```Python\nfrom tarpan.cmdstanpy.pair_plot import save_pair_plot\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_pair_plot(fit, param_names=['mu', 'tau', 'eta.1'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a01_pair_plot)\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_pair_plot/a01_pair_plot/model_info/pair_plot/pair_plot.jpg\" width=\"600\" alt=\"Pair plot\">\n\n\n### Pair plot without cmdstanpy\n\nHere is how to make a pair plot of values from Pandas' data frame columns:\n\n```Python\nfrom tarpan.shared.pair_plot import save_pair_plot\nsave_pair_plot(df, param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a02_no_cmdstanpy)\n\n\n\n## Histogram: `save_histogram`\n\nShow histograms of parameter distributions.\n\n```Python\nfrom tarpan.cmdstanpy.histogram import save_histogram\nmodel = CmdStanModel(stan_file=\"your_model.stan\")\nfit = model.sample(data=your_data)\nsave_histogram(fit, param_names=['mu', 'tau', 'eta.1', 'theta.1'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a01_save_histogram)\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_histogram/a01_save_histogram/model_info/histogram/histogram_01.jpg\" width=\"900\" alt=\"Histogram\">\n\n\n### Histogram without cmdstanpy\n\nHere is how to make histograms of values from Pandas' data frame columns:\n\n```Python\nfrom tarpan.shared.histogram import save_histogram\nsave_histogram(df, param_names=['mu', 'sigma'])\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a02_no_cmdstanpy)\n\n\n\n## Comparing models\n\nRun `save_compare` to compare multiple models using WAIC and PSIS methods in order to see which models are more compatible with the data.\n\n```python\nfrom tarpan.cmdstanpy.compare import save_compare\n\nmodel1 = CmdStanModel(stan_file=\"your_model1.stan\")\nfit1 = model1.sample(data=your_data)\nmodel2 = CmdStanModel(stan_file=\"your_model2.stan\")\nfit2 = model2.sample(data=your_data)\n\nmodels = {\n    \"Model\": fit1,\n    \"Another model\": fit2\n}\n\nsave_compare(models=models, lpd_column_name=\"lpd_pointwise\")\n```\n\nHere the `lpd_column_name` parameter takes the name of the array variable from the [generated quantities](docs/examples/save_compare/a01_compare/stan_model/height1_intercept.stan) block that contains log probability densities of all data points.\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare/a01_compare)\n\n\n### WAIC and PSIS plots\n\nThe `save_compare` function will create the plots showing WAIC and PSIS values (red round markers). The lower WAIC and PSIS values mean the model is more compatible with the data. The blue triangle marker show the difference between the model and the best model. The error bars correspond to standard errors.\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/compare_waic.png\" width=\"600\" alt=\"Compare models with WAIC\">\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/compare_psis.png\" width=\"600\" alt=\"Compare models with PSIS\">\n\n\n### Numerical summaries for WAIC and PSIS\n\nThe `save_compare` function will also create text and csv files which are text versions of the above plots.\n\nSummary columns are:\n\n* **PSIS/WAIC, SE**: PSIS and WAIC values and their standard errors.\n\n* **dPSIS/dWAIC, dSE**: The difference of PSIS and WAIC from the best model (i.e. model with lowest WAIC/PSIS) and the standard error of this difference.\n\n* **pWAIC/pPSIS**: the penalty (aka effective number of parameters). The purpose of number is\nto combat overfitting. Penalties are already included in the WAIC/PSIS numbers, so models with too many parameters will have larger penalties, and therefore, larger WAIC/PSIS values.\n\n* **Weight**: Very approximate measure of the relevance of the model, with higher numbers\ncorrespond to models that are more compatible with the data. Since this number is approximate and does not have uncertainty, it's better to use dWAIC/dPSIS with dSE to compare models.\n\n* **MaxK**: The maximum value of Pareto K parameter from the observations. If this value is above 0.5, and especially above 0.7, the PSIS/WAIC model comparisons might not be reliable.\n\n\n#### WAIC summary\n\n|                  |   WAIC |    SE |   dWAIC |   dSE |   pWAIC |   Weight |\n|:-----------------|-------:|------:|--------:|------:|--------:|---------:|\n| Fungus+treatment | 361.48 | 13.36 |         |       |    3.49 |     1.00 |\n| Treatment        | 402.68 | 10.66 |   41.20 |  9.82 |    2.53 |     0.00 |\n| Intercept        | 405.88 | 11.29 |   44.40 | 11.56 |    1.53 |     0.00 |\n\n\n#### PSIS summary\n\n|                  |   PSIS |    SE |   dPSIS |   dSE |   pPSIS |   MaxK |   Weight |\n|:-----------------|-------:|------:|--------:|------:|--------:|-------:|---------:|\n| Fungus+treatment | 361.48 | 13.36 |         |       |    3.49 |   0.25 |     1.00 |\n| Treatment        | 402.69 | 10.67 |   41.21 |  9.82 |    2.54 |   0.33 |     0.00 |\n| Intercept        | 405.88 | 11.29 |   44.40 | 11.56 |    1.53 |   0.28 |     0.00 |\n\n\n### Plots of Pareto K values\n\nThe `save_compare` function creates plots of Pareto K values for  data points. Points with Pareto K values higher than 0.7 are highlighted in red, with their indices shown below the markers. The red points are the ones that have large influence on the model. Having points above 0.7 could mean that WAIC and PSIS are failing and their results should be used with caution and large neon coloured disclaimers.\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/docs/examples/save_compare/a01_compare/model_info/height/pareto_k_divorse.png\" width=\"600\" alt=\"Plot of Pareto K values\">\n\n\n## Saving cmdstan samples to disk\n\nIt saves a lot of time to sample the model and save the results to disk, so\nthey can be used on the next run instead of waiting for the sampling again.\nThis can be done with `run` function:\n\n```python\nfrom tarpan.cmdstanpy.cache import run\n\n# Your function that creates CmdStanModel, runs its `sample` method\n# and returns the result.\n#\n# This function must take `output_dir` input parameter and pass it to `sample`.\n#\n# It may also have any other parameters you wish to pass from `run`.\ndef run_stan(output_dir, other_param):\n    model = CmdStanModel(stan_file=\"my_model.stan\")\n\n    fit = model.sample(\n        data=data,\n        output_dir=output_dir  # Pass to make CSVs in correct location\n    )\n\n    return fit  # Return the fit\n\n# Will run `run_stan` once, save model to disk and read it on next calls\nfit = run(func=run_stan, other_param=\"some data\")\n```\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/run/a01_run)\n\n\n## Scatter and KDE plot\n\nThe `save_scatter_and_kde` function saves a scatter and corresponding KDE (kernel density estimate) plot. The KDE plot takes into account uncertainties of individual values:\n\n```python\nfrom tarpan.plot.kde import save_scatter_and_kde\n\nvalues1 = [\n        -0.99, -1.37, -1.38, -1.51, -1.29, -1.34, -1.50, -0.93, -0.83,\n        -1.46, -1.07, -1.28, -0.73]\n\nuncertainties1 = [\n         0.12,  0.05,  0.11,  0.18,  0.03,  0.19,  0.18,  0.12,  0.19,\n         0.09,  0.11,  0.16,  0.08]\n\nvalues2 = [\n        -1.22, -1.15, -0.97, -0.68, -0.37, -0.48, -0.73, -0.61, -1.32,\n        -0.62, -1.13, -0.65, -0.90, -1.29, -1.19, -0.54, -0.64, -0.45,\n        -1.21, -0.75, -0.66, -0.71, -0.61, -0.59, -1.07, -0.65, -0.59]\n\nuncertainties2 = [\n         0.13,  0.14,  0.17,  0.07,  0.11,  0.12,  0.23,  0.05,  0.04,\n         0.30,  0.11,  0.13,  0.16,  0.03,  0.18,  0.20,  0.16,  0.16,\n         0.11,  0.09,  0.20,  0.10,  0.08,  0.04,  0.04,  0.23,  0.19]\n\nsave_scatter_and_kde(values=[values1, values2],\n                     uncertainties=[uncertainties1, uncertainties2],\n                     title=\"Sodium abundances in RGB stars of NGC 288\",\n                     xlabel=\"Sodium abundance [Na/H]\",\n                     ylabel=[\"Star number\", \"Probability density\"],\n                     legend_labels=[\"AGB\", \"RGB\"])\n```\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/images/scatter_kde.png\" width=\"700\" alt=\"Scatter-KDE plot\">\n\n\n### `gaussian_kde` function\n\nThe function returns the values for a KDE plot, taking into account uncertainties of individual values:\n\n```python\nfrom tarpan.plot.kde import gaussian_kde\nimport numpy as np\nimport matplotlib.pyplot as plt\n\nx = np.linspace(0, 1, 100)\ny = gaussian_kde(x, values, uncert)\nplt.fill_between(x, y)\n```\n\n\n## Make posterior-scatter-kde plot\n\nThe `save_posterior_scatter_and_kde` function makes a scatter-KDE plots\nof the data, same as `save_scatter_and_kde`. In addition, it plots\nthe posterior distributions.\n\n\n```python\nfrom tarpan.plot.posterior import save_posterior_scatter_and_kde\n\n# Plot one sample from posterior distribution\ndef model_pdf(x, row):\n    mu = row['mu.1']\n    sigma = row['sigma']\n\n    return stats.norm.pdf(x, mu, sigma)\n\n\nfig, axes = save_posterior_scatter_and_kde(\n    fits=[fit1, fit2],  # Two models returned by model.sample function\n    pdf=model_pdf,  # Function that plot posterior distribution\n    values=[data1[\"y\"], data2[\"y\"]],\n    uncertainties=[data1[\"uncertainties\"], data2[\"uncertainties\"]],\n    title=\"Sodium abundances in RGB stars of NGC 288\",\n    xlabel=\"Sodium abundance [Na/H]\",\n    ylabel=[\"Star number\", \"Probability density\"],\n    legend_labels=[\"AGB\", \"RGB\"])\n```\n\n<img src=\"https://github.com/evgenyneu/tarpan/raw/master/images/posterior_scatter_pde.png\" width=\"700\" alt=\"Posterior-scatter-KDE plot\">\n\n* [Full example code](https://github.com/evgenyneu/tarpan/tree/master/docs/examples/posterior/save_posterior_scatter_and_kde/a01_plot)\n\n\n\n## Common questions\n\n* [How to change the widths of HPD intervals?](https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md)\n\n* [Where are plot/summary files placed and how to change that?](https://github.com/evgenyneu/tarpan/blob/master/docs/file_names.md)\n\n\n\n## Run unit tests\n\n```\npytest\n```\n\n\n## The unlicense\n\nThis work is in [public domain](https://github.com/evgenyneu/tarpan/blob/master/LICENSE).\n\n\n## \ud83d\udc34\ud83d\udc34\ud83d\udc34\n\nThis work is dedicated to [Tarpan](https://en.wikipedia.org/wiki/Tarpan), an extinct subspecies of wild horse.\n\nSpecial thanks to Richard McElreath, who wrote [Statistical Rethinking textbook](https://xcelab.net/rm/statistical-rethinking/), as well as [Stan](https://discourse.mc-stan.org) and [arviz](https://github.com/arviz-devs/arviz) people.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/evgenyneu/tarpan", "keywords": "", "license": "Public Domain", "maintainer": "", "maintainer_email": "", "name": "tarpan", "package_url": "https://pypi.org/project/tarpan/", "platform": "", "project_url": "https://pypi.org/project/tarpan/", "project_urls": {"Homepage": "https://github.com/evgenyneu/tarpan"}, "release_url": "https://pypi.org/project/tarpan/0.3.9/", "requires_dist": ["cmdstanpy (<0.10.0,>=0.9.0)", "scipy (<2.0.0,>=1.4.1)", "tabulate (<0.9.0,>=0.8.6)", "pandas (<0.26.0,>=0.25.3)", "numpy (<2.0.0,>=1.18.1)", "matplotlib (<4.0.0,>=3.1.2)", "seaborn (<0.11.0,>=0.10.0)"], "requires_python": ">=3.7", "summary": "A collection of tools for analysing cmdspanpy output, written in Python", "version": "0.3.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>A Python library for analysing cmdstanpy output</h1>\n<p>This is a collection of functions for analysing output of <a href=\"https://github.com/stan-dev/cmdstanpy\" rel=\"nofollow\">cmdstanpy</a> library. The main idea is to do a quick data analysis by calling a single function that makes:</p>\n<ul>\n<li>\n<p>traceplots of samples,</p>\n</li>\n<li>\n<p>text and plots of the summaries of model parameters,</p>\n</li>\n<li>\n<p>histograms and pair plots of posterior distributions of parameters.</p>\n</li>\n</ul>\n<img alt=\"Picture of Tarpan\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/37f69937c8413c8b02ca76e36cc7784676c81252/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f696d616765732f74617270616e2e6a7067\">\n<p><em>The only known illustration of a tarpan made from life, depicting a five month old colt (Borisov, 1841). Source: <a href=\"https://commons.wikimedia.org/wiki/File:Tarpan.png\" rel=\"nofollow\">Wikimedia Commons</a>.</em></p>\n<h2>Setup</h2>\n<p>First, run:</p>\n<pre><code>pip install tarpan\n</code></pre>\n<p>Finally, install <a href=\"https://github.com/stan-dev/cmdstan\" rel=\"nofollow\">cmdstan</a> by running:</p>\n<pre><code>install_cmdstan\n</code></pre>\n<h2>Complete analysis: <code>save_analysis</code></h2>\n<p>This is the main function of the library that saves summaries\nand trace/pair/tree plots in\n<a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple/model_info/analyse\" rel=\"nofollow\">model_info</a> directory.\nThe function is useful when you want to generate all types of summaries\nand plots at once.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.analyse</span> <span class=\"kn\">import</span> <span class=\"n\">save_analysis</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_analysis</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a01_simple\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<p>If you don't need everything, you can call individual\nfunctions described below to make just one type of plot or a summary.</p>\n<h3>Analysis without cmdstanpy</h3>\n<p>Here is how to analyse values from Pandas' data frame columns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.analyse</span> <span class=\"kn\">import</span> <span class=\"n\">save_analysis</span>\n<span class=\"n\">save_analysis</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/analyse/a02_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Summary: <code>save_summary</code></h2>\n<p>Creates a summary of parameter distributions and saves it in text and CSV files.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.summary</span> <span class=\"kn\">import</span> <span class=\"n\">save_summary</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_summary</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'tau'</span><span class=\"p\">,</span> <span class=\"s1\">'eta.1'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a01_save_summary\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<p>The text summary format is such that the text can be pasted into Github/Gitlab/Bitbucket's Markdown file, like this:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Name</th>\n<th align=\"right\">Mean</th>\n<th align=\"right\">Std</th>\n<th align=\"right\">Mode</th>\n<th align=\"right\">+</th>\n<th align=\"right\">-</th>\n<th align=\"right\">68CI-</th>\n<th align=\"right\">68CI+</th>\n<th align=\"right\">95CI-</th>\n<th align=\"right\">95CI+</th>\n<th align=\"right\">N_Eff</th>\n<th align=\"right\">R_hat</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">mu</td>\n<td align=\"right\">8.05</td>\n<td align=\"right\">5.12</td>\n<td align=\"right\">7.53</td>\n<td align=\"right\">4.63</td>\n<td align=\"right\">4.59</td>\n<td align=\"right\">2.93</td>\n<td align=\"right\">12.16</td>\n<td align=\"right\">-1.84</td>\n<td align=\"right\">18.74</td>\n<td align=\"right\">1540</td>\n<td align=\"right\">1.00</td>\n</tr>\n<tr>\n<td align=\"left\">tau</td>\n<td align=\"right\">6.41</td>\n<td align=\"right\">5.72</td>\n<td align=\"right\">2.36</td>\n<td align=\"right\">5.41</td>\n<td align=\"right\">2.35</td>\n<td align=\"right\">0.00</td>\n<td align=\"right\">7.76</td>\n<td align=\"right\">0.00</td>\n<td align=\"right\">17.07</td>\n<td align=\"right\">1175</td>\n<td align=\"right\">1.00</td>\n</tr>\n<tr>\n<td align=\"left\">eta.1</td>\n<td align=\"right\">0.39</td>\n<td align=\"right\">0.92</td>\n<td align=\"right\">0.60</td>\n<td align=\"right\">0.71</td>\n<td align=\"right\">1.13</td>\n<td align=\"right\">-0.53</td>\n<td align=\"right\">1.31</td>\n<td align=\"right\">-1.48</td>\n<td align=\"right\">2.19</td>\n<td align=\"right\">3505</td>\n<td align=\"right\">1.00</td>\n</tr></tbody></table>\n<h3>Summary columns</h3>\n<ul>\n<li>\n<p><strong>Name, Mean, Std</strong> are the name of the parameter, its mean and standard deviation.</p>\n</li>\n<li>\n<p><strong>68CI-, 68CI+, 95CI-, 95CI+</strong> are the 68% and 95% HPDIs (highest posterior density intervals). These values <a href=\"https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md\" rel=\"nofollow\">are configurable</a>.</p>\n</li>\n<li>\n<p><strong>Mode, +, -</strong> is a mode of distribution with upper and lower uncertainties, which are calculated as distances to 68% HPDI.</p>\n</li>\n<li>\n<p><strong>N_Eff</strong> is Stan's number of effective samples, the higher the better.</p>\n</li>\n<li>\n<p><strong>R_hat</strong> is a Stan's parameter representing the quality of the sampling. This value needs to be around 1.00. After generating a model I usually immediately look at this R_hat column to see if the sampling was good.</p>\n</li>\n</ul>\n<h3>Summary without cmdstanpy</h3>\n<p>Here is how to make summary of values from Pandas' data frame columns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.summary</span> <span class=\"kn\">import</span> <span class=\"n\">save_summary</span>\n<span class=\"n\">save_summary</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_summary/a03_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Tree plot: <code>save_tree_plot</code></h2>\n<p>This function shows exactly the same information as <code>save_summary</code>, but in\nthe form a plot. The markers are the modes of the distributions, and the two error bars\nindicate 68% and 95% HPDIs (highest posterior density intervals).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.tree_plot</span> <span class=\"kn\">import</span> <span class=\"n\">save_tree_plot</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_tree_plot</span><span class=\"p\">([</span><span class=\"n\">fit</span><span class=\"p\">],</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a01_single_fit\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<img alt=\"Tree plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bdbe0788722d321ab71358e5b237d6dd8e21029/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f747265655f706c6f742f6130315f73696e676c655f6669742f6d6f64656c5f696e666f2f747265655f706c6f742f73756d6d6172792e706e67\" width=\"600\">\n<h3>Tree plot without cmdstanpy</h3>\n<p>One can make a tree plot by supplying a Panda's data frame that shows summaries of values for the frame's columns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.tree_plot</span> <span class=\"kn\">import</span> <span class=\"n\">save_tree_plot</span>\n<span class=\"n\">save_tree_plot</span><span class=\"p\">([</span><span class=\"n\">df</span><span class=\"p\">],</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a04_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h3>Comparing multiple models on a tree plot</h3>\n<p>Supply multiple fits in order to compare parameters from multiple models.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.tree_plot</span> <span class=\"kn\">import</span> <span class=\"n\">save_tree_plot</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.tree_plot</span> <span class=\"kn\">import</span> <span class=\"n\">TreePlotParams</span>\n\n<span class=\"c1\"># Sample from two models</span>\n<span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model1.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit1</span> <span class=\"o\">=</span> <span class=\"n\">model1</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model2.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit2</span> <span class=\"o\">=</span> <span class=\"n\">model2</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Supply legend labels (optional)</span>\n<span class=\"n\">tree_params</span> <span class=\"o\">=</span> <span class=\"n\">TreePlotParams</span><span class=\"p\">()</span>\n<span class=\"n\">tree_params</span><span class=\"o\">.</span><span class=\"n\">labels</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Model 1\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Model 2\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Exact\"</span><span class=\"p\">]</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"mu\"</span><span class=\"p\">:</span> <span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"s2\">\"tau\"</span><span class=\"p\">:</span> <span class=\"mf\">1.3</span><span class=\"p\">}]</span>  <span class=\"c1\"># Add extra markers (optional)</span>\n\n<span class=\"n\">save_tree_plot</span><span class=\"p\">([</span><span class=\"n\">fit1</span><span class=\"p\">,</span> <span class=\"n\">fit2</span><span class=\"p\">],</span> <span class=\"n\">extra_values</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'tau'</span><span class=\"p\">],</span>\n               <span class=\"n\">tree_params</span><span class=\"o\">=</span><span class=\"n\">tree_params</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_tree_plot/a02_compare_fits\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<img alt=\"Tree plot with multiple models\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee31d3e5267160187eaa734965ea5510d383c939/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f747265655f706c6f742f6130325f636f6d706172655f666974732f6d6f64656c5f696e666f2f747265655f706c6f745f636f6d706172652f73756d6d6172792e706e67\" width=\"600\">\n<h2>Comparing parameters of multiple models</h2>\n<p>Use <code>save_compare_parameters</code> function to compare parameters between different models:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\"></th>\n<th align=\"right\">mu</th>\n<th align=\"right\">tau</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">Model 1</td>\n<td align=\"right\">7.53 (+4.63, -4.59)</td>\n<td align=\"right\">2.36 (+5.41, -2.35)</td>\n</tr>\n<tr>\n<td align=\"right\">Model 2</td>\n<td align=\"right\">8.87 (+9.05, -9.50)</td>\n<td align=\"right\">3.64 (+8.14, -3.61)</td>\n</tr></tbody></table>\n<p>This table is a numerical version of the plot created by <code>save_tree_plot</code>. The values here are modes of the distributions and uncertainties are distances to 68% HPD intervals.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.compare_parameters</span> <span class=\"kn\">import</span> <span class=\"n\">save_compare_parameters</span>\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"mu\"</span><span class=\"p\">:</span> <span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"s2\">\"theta\"</span><span class=\"p\">:</span> <span class=\"mf\">1.3</span><span class=\"p\">}]</span>  <span class=\"c1\"># Add extra values (optional)</span>\n\n<span class=\"n\">save_compare_parameters</span><span class=\"p\">([</span><span class=\"n\">fit1</span><span class=\"p\">,</span> <span class=\"n\">fit2</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Model 1'</span><span class=\"p\">,</span> <span class=\"s1\">'Model 2'</span><span class=\"p\">,</span> <span class=\"s1\">'Extra'</span><span class=\"p\">],</span>\n                        <span class=\"n\">extra_values</span><span class=\"o\">=</span><span class=\"n\">extra</span><span class=\"p\">,</span>\n                        <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"theta\"</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a01_save_compare_parameters\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h3>Use <code>save_compare_parameters</code> without cmdstanpy</h3>\n<p>Here is how to compare parameters using Pandas data frames df1 and df2:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.compare_parameters</span> <span class=\"kn\">import</span> <span class=\"n\">save_compare_parameters</span>\n<span class=\"n\">extra</span> <span class=\"o\">=</span> <span class=\"p\">[{</span><span class=\"s2\">\"mu\"</span><span class=\"p\">:</span> <span class=\"mf\">2.2</span><span class=\"p\">,</span> <span class=\"s2\">\"theta\"</span><span class=\"p\">:</span> <span class=\"mf\">1.3</span><span class=\"p\">}]</span>  <span class=\"c1\"># Add extra values (optional)</span>\n\n<span class=\"n\">save_compare_parameters</span><span class=\"p\">([</span><span class=\"n\">df1</span><span class=\"p\">,</span> <span class=\"n\">df2</span><span class=\"p\">],</span> <span class=\"n\">labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Model 1'</span><span class=\"p\">,</span> <span class=\"s1\">'Model 2'</span><span class=\"p\">,</span> <span class=\"s1\">'Extra'</span><span class=\"p\">],</span>\n                        <span class=\"n\">extra_values</span><span class=\"o\">=</span><span class=\"n\">extra</span><span class=\"p\">,</span>\n                        <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"mu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"theta\"</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare_parameters/a02_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Trace plot: <code>save_traceplot</code></h2>\n<p>The plot shows the values of parameters samples.\nDifferent colors correspond to samples form different chains. Ideally,\nthe lines of different colors on the left plots are well mixed, and the\nright plot is fairly uniform.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.traceplot</span> <span class=\"kn\">import</span> <span class=\"n\">save_traceplot</span>\n\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_traceplot</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'tau'</span><span class=\"p\">,</span> <span class=\"s1\">'eta.1'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_traceplot/a01_save_traceplot\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<img alt=\"Traceplot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f82d6962ec07c31ee29686c8b6d7e22589e10672/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f7472616365706c6f742f6130315f736176655f7472616365706c6f742f6d6f64656c5f696e666f2f7472616365706c6f742f7472616365706c6f745f30312e6a7067\" width=\"900\">\n<h2>Pair plot: <code>save_pair_plot</code></h2>\n<p>The plot helps to see correlations between parameters and spot funnel\nshaped distributions that can result in sampling problems.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.pair_plot</span> <span class=\"kn\">import</span> <span class=\"n\">save_pair_plot</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_pair_plot</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'tau'</span><span class=\"p\">,</span> <span class=\"s1\">'eta.1'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a01_pair_plot\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<img alt=\"Pair plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f78bd48f54c690beed43866c3d1ad87e44e70db0/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f706169725f706c6f742f6130315f706169725f706c6f742f6d6f64656c5f696e666f2f706169725f706c6f742f706169725f706c6f742e6a7067\" width=\"600\">\n<h3>Pair plot without cmdstanpy</h3>\n<p>Here is how to make a pair plot of values from Pandas' data frame columns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.pair_plot</span> <span class=\"kn\">import</span> <span class=\"n\">save_pair_plot</span>\n<span class=\"n\">save_pair_plot</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_pair_plot/a02_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Histogram: <code>save_histogram</code></h2>\n<p>Show histograms of parameter distributions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.histogram</span> <span class=\"kn\">import</span> <span class=\"n\">save_histogram</span>\n<span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">save_histogram</span><span class=\"p\">(</span><span class=\"n\">fit</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'tau'</span><span class=\"p\">,</span> <span class=\"s1\">'eta.1'</span><span class=\"p\">,</span> <span class=\"s1\">'theta.1'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a01_save_histogram\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<img alt=\"Histogram\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c946e85446a7e0dc19c8ac540118ce4fcbcdb208/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f686973746f6772616d2f6130315f736176655f686973746f6772616d2f6d6f64656c5f696e666f2f686973746f6772616d2f686973746f6772616d5f30312e6a7067\" width=\"900\">\n<h3>Histogram without cmdstanpy</h3>\n<p>Here is how to make histograms of values from Pandas' data frame columns:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.shared.histogram</span> <span class=\"kn\">import</span> <span class=\"n\">save_histogram</span>\n<span class=\"n\">save_histogram</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">param_names</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'mu'</span><span class=\"p\">,</span> <span class=\"s1\">'sigma'</span><span class=\"p\">])</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_histogram/a02_no_cmdstanpy\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Comparing models</h2>\n<p>Run <code>save_compare</code> to compare multiple models using WAIC and PSIS methods in order to see which models are more compatible with the data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.compare</span> <span class=\"kn\">import</span> <span class=\"n\">save_compare</span>\n\n<span class=\"n\">model1</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model1.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit1</span> <span class=\"o\">=</span> <span class=\"n\">model1</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n<span class=\"n\">model2</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"your_model2.stan\"</span><span class=\"p\">)</span>\n<span class=\"n\">fit2</span> <span class=\"o\">=</span> <span class=\"n\">model2</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">your_data</span><span class=\"p\">)</span>\n\n<span class=\"n\">models</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"Model\"</span><span class=\"p\">:</span> <span class=\"n\">fit1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Another model\"</span><span class=\"p\">:</span> <span class=\"n\">fit2</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">save_compare</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">=</span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">lpd_column_name</span><span class=\"o\">=</span><span class=\"s2\">\"lpd_pointwise\"</span><span class=\"p\">)</span>\n</pre>\n<p>Here the <code>lpd_column_name</code> parameter takes the name of the array variable from the <a href=\"docs/examples/save_compare/a01_compare/stan_model/height1_intercept.stan\" rel=\"nofollow\">generated quantities</a> block that contains log probability densities of all data points.</p>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/save_compare/a01_compare\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h3>WAIC and PSIS plots</h3>\n<p>The <code>save_compare</code> function will create the plots showing WAIC and PSIS values (red round markers). The lower WAIC and PSIS values mean the model is more compatible with the data. The blue triangle marker show the difference between the model and the best model. The error bars correspond to standard errors.</p>\n<img alt=\"Compare models with WAIC\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e4a8abca9e7f4d731ebc558f4e348cdb305cfc8/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f636f6d706172652f6130315f636f6d706172652f6d6f64656c5f696e666f2f6865696768742f636f6d706172655f776169632e706e67\" width=\"600\">\n<img alt=\"Compare models with PSIS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ed89a087af4c621300959ab8d3efbd17bcf992c0/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f636f6d706172652f6130315f636f6d706172652f6d6f64656c5f696e666f2f6865696768742f636f6d706172655f707369732e706e67\" width=\"600\">\n<h3>Numerical summaries for WAIC and PSIS</h3>\n<p>The <code>save_compare</code> function will also create text and csv files which are text versions of the above plots.</p>\n<p>Summary columns are:</p>\n<ul>\n<li>\n<p><strong>PSIS/WAIC, SE</strong>: PSIS and WAIC values and their standard errors.</p>\n</li>\n<li>\n<p><strong>dPSIS/dWAIC, dSE</strong>: The difference of PSIS and WAIC from the best model (i.e. model with lowest WAIC/PSIS) and the standard error of this difference.</p>\n</li>\n<li>\n<p><strong>pWAIC/pPSIS</strong>: the penalty (aka effective number of parameters). The purpose of number is\nto combat overfitting. Penalties are already included in the WAIC/PSIS numbers, so models with too many parameters will have larger penalties, and therefore, larger WAIC/PSIS values.</p>\n</li>\n<li>\n<p><strong>Weight</strong>: Very approximate measure of the relevance of the model, with higher numbers\ncorrespond to models that are more compatible with the data. Since this number is approximate and does not have uncertainty, it's better to use dWAIC/dPSIS with dSE to compare models.</p>\n</li>\n<li>\n<p><strong>MaxK</strong>: The maximum value of Pareto K parameter from the observations. If this value is above 0.5, and especially above 0.7, the PSIS/WAIC model comparisons might not be reliable.</p>\n</li>\n</ul>\n<h4>WAIC summary</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"right\">WAIC</th>\n<th align=\"right\">SE</th>\n<th align=\"right\">dWAIC</th>\n<th align=\"right\">dSE</th>\n<th align=\"right\">pWAIC</th>\n<th align=\"right\">Weight</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Fungus+treatment</td>\n<td align=\"right\">361.48</td>\n<td align=\"right\">13.36</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\">3.49</td>\n<td align=\"right\">1.00</td>\n</tr>\n<tr>\n<td align=\"left\">Treatment</td>\n<td align=\"right\">402.68</td>\n<td align=\"right\">10.66</td>\n<td align=\"right\">41.20</td>\n<td align=\"right\">9.82</td>\n<td align=\"right\">2.53</td>\n<td align=\"right\">0.00</td>\n</tr>\n<tr>\n<td align=\"left\">Intercept</td>\n<td align=\"right\">405.88</td>\n<td align=\"right\">11.29</td>\n<td align=\"right\">44.40</td>\n<td align=\"right\">11.56</td>\n<td align=\"right\">1.53</td>\n<td align=\"right\">0.00</td>\n</tr></tbody></table>\n<h4>PSIS summary</h4>\n<table>\n<thead>\n<tr>\n<th align=\"left\"></th>\n<th align=\"right\">PSIS</th>\n<th align=\"right\">SE</th>\n<th align=\"right\">dPSIS</th>\n<th align=\"right\">dSE</th>\n<th align=\"right\">pPSIS</th>\n<th align=\"right\">MaxK</th>\n<th align=\"right\">Weight</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Fungus+treatment</td>\n<td align=\"right\">361.48</td>\n<td align=\"right\">13.36</td>\n<td align=\"right\"></td>\n<td align=\"right\"></td>\n<td align=\"right\">3.49</td>\n<td align=\"right\">0.25</td>\n<td align=\"right\">1.00</td>\n</tr>\n<tr>\n<td align=\"left\">Treatment</td>\n<td align=\"right\">402.69</td>\n<td align=\"right\">10.67</td>\n<td align=\"right\">41.21</td>\n<td align=\"right\">9.82</td>\n<td align=\"right\">2.54</td>\n<td align=\"right\">0.33</td>\n<td align=\"right\">0.00</td>\n</tr>\n<tr>\n<td align=\"left\">Intercept</td>\n<td align=\"right\">405.88</td>\n<td align=\"right\">11.29</td>\n<td align=\"right\">44.40</td>\n<td align=\"right\">11.56</td>\n<td align=\"right\">1.53</td>\n<td align=\"right\">0.28</td>\n<td align=\"right\">0.00</td>\n</tr></tbody></table>\n<h3>Plots of Pareto K values</h3>\n<p>The <code>save_compare</code> function creates plots of Pareto K values for  data points. Points with Pareto K values higher than 0.7 are highlighted in red, with their indices shown below the markers. The red points are the ones that have large influence on the model. Having points above 0.7 could mean that WAIC and PSIS are failing and their results should be used with caution and large neon coloured disclaimers.</p>\n<img alt=\"Plot of Pareto K values\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cd65b9df22d0f100e6993d4203c0b908494a5ee9/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f646f63732f6578616d706c65732f736176655f636f6d706172652f6130315f636f6d706172652f6d6f64656c5f696e666f2f6865696768742f70617265746f5f6b5f6469766f7273652e706e67\" width=\"600\">\n<h2>Saving cmdstan samples to disk</h2>\n<p>It saves a lot of time to sample the model and save the results to disk, so\nthey can be used on the next run instead of waiting for the sampling again.\nThis can be done with <code>run</code> function:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.cmdstanpy.cache</span> <span class=\"kn\">import</span> <span class=\"n\">run</span>\n\n<span class=\"c1\"># Your function that creates CmdStanModel, runs its `sample` method</span>\n<span class=\"c1\"># and returns the result.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># This function must take `output_dir` input parameter and pass it to `sample`.</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># It may also have any other parameters you wish to pass from `run`.</span>\n<span class=\"k\">def</span> <span class=\"nf\">run_stan</span><span class=\"p\">(</span><span class=\"n\">output_dir</span><span class=\"p\">,</span> <span class=\"n\">other_param</span><span class=\"p\">):</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">CmdStanModel</span><span class=\"p\">(</span><span class=\"n\">stan_file</span><span class=\"o\">=</span><span class=\"s2\">\"my_model.stan\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span>\n        <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">data</span><span class=\"p\">,</span>\n        <span class=\"n\">output_dir</span><span class=\"o\">=</span><span class=\"n\">output_dir</span>  <span class=\"c1\"># Pass to make CSVs in correct location</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">fit</span>  <span class=\"c1\"># Return the fit</span>\n\n<span class=\"c1\"># Will run `run_stan` once, save model to disk and read it on next calls</span>\n<span class=\"n\">fit</span> <span class=\"o\">=</span> <span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">run_stan</span><span class=\"p\">,</span> <span class=\"n\">other_param</span><span class=\"o\">=</span><span class=\"s2\">\"some data\"</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/run/a01_run\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Scatter and KDE plot</h2>\n<p>The <code>save_scatter_and_kde</code> function saves a scatter and corresponding KDE (kernel density estimate) plot. The KDE plot takes into account uncertainties of individual values:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.plot.kde</span> <span class=\"kn\">import</span> <span class=\"n\">save_scatter_and_kde</span>\n\n<span class=\"n\">values1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"o\">-</span><span class=\"mf\">0.99</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.37</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.38</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.51</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.29</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.34</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.50</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.93</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.83</span><span class=\"p\">,</span>\n        <span class=\"o\">-</span><span class=\"mf\">1.46</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.07</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.28</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.73</span><span class=\"p\">]</span>\n\n<span class=\"n\">uncertainties1</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n         <span class=\"mf\">0.12</span><span class=\"p\">,</span>  <span class=\"mf\">0.05</span><span class=\"p\">,</span>  <span class=\"mf\">0.11</span><span class=\"p\">,</span>  <span class=\"mf\">0.18</span><span class=\"p\">,</span>  <span class=\"mf\">0.03</span><span class=\"p\">,</span>  <span class=\"mf\">0.19</span><span class=\"p\">,</span>  <span class=\"mf\">0.18</span><span class=\"p\">,</span>  <span class=\"mf\">0.12</span><span class=\"p\">,</span>  <span class=\"mf\">0.19</span><span class=\"p\">,</span>\n         <span class=\"mf\">0.09</span><span class=\"p\">,</span>  <span class=\"mf\">0.11</span><span class=\"p\">,</span>  <span class=\"mf\">0.16</span><span class=\"p\">,</span>  <span class=\"mf\">0.08</span><span class=\"p\">]</span>\n\n<span class=\"n\">values2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n        <span class=\"o\">-</span><span class=\"mf\">1.22</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.15</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.97</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.68</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.37</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.48</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.73</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.61</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.32</span><span class=\"p\">,</span>\n        <span class=\"o\">-</span><span class=\"mf\">0.62</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.13</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.65</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.90</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.29</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.19</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.54</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.64</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.45</span><span class=\"p\">,</span>\n        <span class=\"o\">-</span><span class=\"mf\">1.21</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.75</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.66</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.71</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.61</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.59</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">1.07</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.65</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.59</span><span class=\"p\">]</span>\n\n<span class=\"n\">uncertainties2</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n         <span class=\"mf\">0.13</span><span class=\"p\">,</span>  <span class=\"mf\">0.14</span><span class=\"p\">,</span>  <span class=\"mf\">0.17</span><span class=\"p\">,</span>  <span class=\"mf\">0.07</span><span class=\"p\">,</span>  <span class=\"mf\">0.11</span><span class=\"p\">,</span>  <span class=\"mf\">0.12</span><span class=\"p\">,</span>  <span class=\"mf\">0.23</span><span class=\"p\">,</span>  <span class=\"mf\">0.05</span><span class=\"p\">,</span>  <span class=\"mf\">0.04</span><span class=\"p\">,</span>\n         <span class=\"mf\">0.30</span><span class=\"p\">,</span>  <span class=\"mf\">0.11</span><span class=\"p\">,</span>  <span class=\"mf\">0.13</span><span class=\"p\">,</span>  <span class=\"mf\">0.16</span><span class=\"p\">,</span>  <span class=\"mf\">0.03</span><span class=\"p\">,</span>  <span class=\"mf\">0.18</span><span class=\"p\">,</span>  <span class=\"mf\">0.20</span><span class=\"p\">,</span>  <span class=\"mf\">0.16</span><span class=\"p\">,</span>  <span class=\"mf\">0.16</span><span class=\"p\">,</span>\n         <span class=\"mf\">0.11</span><span class=\"p\">,</span>  <span class=\"mf\">0.09</span><span class=\"p\">,</span>  <span class=\"mf\">0.20</span><span class=\"p\">,</span>  <span class=\"mf\">0.10</span><span class=\"p\">,</span>  <span class=\"mf\">0.08</span><span class=\"p\">,</span>  <span class=\"mf\">0.04</span><span class=\"p\">,</span>  <span class=\"mf\">0.04</span><span class=\"p\">,</span>  <span class=\"mf\">0.23</span><span class=\"p\">,</span>  <span class=\"mf\">0.19</span><span class=\"p\">]</span>\n\n<span class=\"n\">save_scatter_and_kde</span><span class=\"p\">(</span><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">values1</span><span class=\"p\">,</span> <span class=\"n\">values2</span><span class=\"p\">],</span>\n                     <span class=\"n\">uncertainties</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">uncertainties1</span><span class=\"p\">,</span> <span class=\"n\">uncertainties2</span><span class=\"p\">],</span>\n                     <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Sodium abundances in RGB stars of NGC 288\"</span><span class=\"p\">,</span>\n                     <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Sodium abundance [Na/H]\"</span><span class=\"p\">,</span>\n                     <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Star number\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Probability density\"</span><span class=\"p\">],</span>\n                     <span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"AGB\"</span><span class=\"p\">,</span> <span class=\"s2\">\"RGB\"</span><span class=\"p\">])</span>\n</pre>\n<img alt=\"Scatter-KDE plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88609eb3640c994af14ed33df64470d0a0feff16/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f696d616765732f736361747465725f6b64652e706e67\" width=\"700\">\n<h3><code>gaussian_kde</code> function</h3>\n<p>The function returns the values for a KDE plot, taking into account uncertainties of individual values:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.plot.kde</span> <span class=\"kn\">import</span> <span class=\"n\">gaussian_kde</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">gaussian_kde</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">,</span> <span class=\"n\">uncert</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">fill_between</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n<h2>Make posterior-scatter-kde plot</h2>\n<p>The <code>save_posterior_scatter_and_kde</code> function makes a scatter-KDE plots\nof the data, same as <code>save_scatter_and_kde</code>. In addition, it plots\nthe posterior distributions.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tarpan.plot.posterior</span> <span class=\"kn\">import</span> <span class=\"n\">save_posterior_scatter_and_kde</span>\n\n<span class=\"c1\"># Plot one sample from posterior distribution</span>\n<span class=\"k\">def</span> <span class=\"nf\">model_pdf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"p\">):</span>\n    <span class=\"n\">mu</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'mu.1'</span><span class=\"p\">]</span>\n    <span class=\"n\">sigma</span> <span class=\"o\">=</span> <span class=\"n\">row</span><span class=\"p\">[</span><span class=\"s1\">'sigma'</span><span class=\"p\">]</span>\n\n    <span class=\"k\">return</span> <span class=\"n\">stats</span><span class=\"o\">.</span><span class=\"n\">norm</span><span class=\"o\">.</span><span class=\"n\">pdf</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">mu</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">axes</span> <span class=\"o\">=</span> <span class=\"n\">save_posterior_scatter_and_kde</span><span class=\"p\">(</span>\n    <span class=\"n\">fits</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">fit1</span><span class=\"p\">,</span> <span class=\"n\">fit2</span><span class=\"p\">],</span>  <span class=\"c1\"># Two models returned by model.sample function</span>\n    <span class=\"n\">pdf</span><span class=\"o\">=</span><span class=\"n\">model_pdf</span><span class=\"p\">,</span>  <span class=\"c1\"># Function that plot posterior distribution</span>\n    <span class=\"n\">values</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s2\">\"y\"</span><span class=\"p\">],</span> <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s2\">\"y\"</span><span class=\"p\">]],</span>\n    <span class=\"n\">uncertainties</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">data1</span><span class=\"p\">[</span><span class=\"s2\">\"uncertainties\"</span><span class=\"p\">],</span> <span class=\"n\">data2</span><span class=\"p\">[</span><span class=\"s2\">\"uncertainties\"</span><span class=\"p\">]],</span>\n    <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s2\">\"Sodium abundances in RGB stars of NGC 288\"</span><span class=\"p\">,</span>\n    <span class=\"n\">xlabel</span><span class=\"o\">=</span><span class=\"s2\">\"Sodium abundance [Na/H]\"</span><span class=\"p\">,</span>\n    <span class=\"n\">ylabel</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"Star number\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Probability density\"</span><span class=\"p\">],</span>\n    <span class=\"n\">legend_labels</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"AGB\"</span><span class=\"p\">,</span> <span class=\"s2\">\"RGB\"</span><span class=\"p\">])</span>\n</pre>\n<img alt=\"Posterior-scatter-KDE plot\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a8954138bbb63aab9b446c217407dd9f2e675d70/68747470733a2f2f6769746875622e636f6d2f657667656e796e65752f74617270616e2f7261772f6d61737465722f696d616765732f706f73746572696f725f736361747465725f7064652e706e67\" width=\"700\">\n<ul>\n<li><a href=\"https://github.com/evgenyneu/tarpan/tree/master/docs/examples/posterior/save_posterior_scatter_and_kde/a01_plot\" rel=\"nofollow\">Full example code</a></li>\n</ul>\n<h2>Common questions</h2>\n<ul>\n<li>\n<p><a href=\"https://github.com/evgenyneu/tarpan/blob/master/docs/hpdi.md\" rel=\"nofollow\">How to change the widths of HPD intervals?</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/evgenyneu/tarpan/blob/master/docs/file_names.md\" rel=\"nofollow\">Where are plot/summary files placed and how to change that?</a></p>\n</li>\n</ul>\n<h2>Run unit tests</h2>\n<pre><code>pytest\n</code></pre>\n<h2>The unlicense</h2>\n<p>This work is in <a href=\"https://github.com/evgenyneu/tarpan/blob/master/LICENSE\" rel=\"nofollow\">public domain</a>.</p>\n<h2>\ud83d\udc34\ud83d\udc34\ud83d\udc34</h2>\n<p>This work is dedicated to <a href=\"https://en.wikipedia.org/wiki/Tarpan\" rel=\"nofollow\">Tarpan</a>, an extinct subspecies of wild horse.</p>\n<p>Special thanks to Richard McElreath, who wrote <a href=\"https://xcelab.net/rm/statistical-rethinking/\" rel=\"nofollow\">Statistical Rethinking textbook</a>, as well as <a href=\"https://discourse.mc-stan.org\" rel=\"nofollow\">Stan</a> and <a href=\"https://github.com/arviz-devs/arviz\" rel=\"nofollow\">arviz</a> people.</p>\n\n          </div>"}, "last_serial": 6900403, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "7bdcf6b3dd6bd0cf89753b69b60434b4", "sha256": "cbc39cc81be97b1a884a219a00a400f29aa76276e4b3e56d7b938a6bb385b320"}, "downloads": -1, "filename": "tarpan-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7bdcf6b3dd6bd0cf89753b69b60434b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12016, "upload_time": "2020-01-22T08:04:04", "upload_time_iso_8601": "2020-01-22T08:04:04.877831Z", "url": "https://files.pythonhosted.org/packages/ad/63/052407090c3ebdcd05bab630dc984715f6dd6f7879cf9462c63515738c3d/tarpan-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bce1d5ff57a19359a066b685eb405f9f", "sha256": "9909da7dd71c35a428d0eb7a4c3d0492a66bce7eeaac88fbf9a8d1e83cc4aa64"}, "downloads": -1, "filename": "tarpan-0.1.1.tar.gz", "has_sig": false, "md5_digest": "bce1d5ff57a19359a066b685eb405f9f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10212, "upload_time": "2020-01-22T08:04:07", "upload_time_iso_8601": "2020-01-22T08:04:07.476003Z", "url": "https://files.pythonhosted.org/packages/f3/e3/a0aed3eacb647a892ca2217b470235978dd9fa72be956794badbd75370c9/tarpan-0.1.1.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "da616f38f8d7dd995a1fd5868bc9279d", "sha256": "59ddcff82361d328d937392fafd96112de7fe3f66b6fe02b2a6a8a9331c54a63"}, "downloads": -1, "filename": "tarpan-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "da616f38f8d7dd995a1fd5868bc9279d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 17933, "upload_time": "2020-01-23T05:49:12", "upload_time_iso_8601": "2020-01-23T05:49:12.508853Z", "url": "https://files.pythonhosted.org/packages/69/22/79118b45d00db3d5dfaad24f31968089f5230305050a25fabc8fda38e5d5/tarpan-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad2fbaeb3bc12f81086dfa52ba41b313", "sha256": "387c4e1faddf48ce18b41fbf19272cceb36cac7ad779819554b192ceb9a97a69"}, "downloads": -1, "filename": "tarpan-0.1.5.tar.gz", "has_sig": false, "md5_digest": "ad2fbaeb3bc12f81086dfa52ba41b313", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 14255, "upload_time": "2020-01-23T05:49:14", "upload_time_iso_8601": "2020-01-23T05:49:14.569068Z", "url": "https://files.pythonhosted.org/packages/db/51/7dd83e7fde24c742c6d49f7f31312ab86ce5d2d43f3961a8f79bd4a4fba0/tarpan-0.1.5.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "a0f09734481c0c0cb24b52553b45f669", "sha256": "98540921fb6b5398a7ba79b3cdad38adce587b23d6413dcf5c4dab270c0ebce6"}, "downloads": -1, "filename": "tarpan-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a0f09734481c0c0cb24b52553b45f669", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19421, "upload_time": "2020-01-25T00:27:38", "upload_time_iso_8601": "2020-01-25T00:27:38.498295Z", "url": "https://files.pythonhosted.org/packages/4e/5c/bc03687f996aa53e06cbacfa4c535e063e85b1a367b5c7f09650d3829209/tarpan-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4f55fe9d3cebfa074b637f47b40661d", "sha256": "159f6b1ba3be25e3305c1310228e30819932a0285441dd69d9c84b16e75a0089"}, "downloads": -1, "filename": "tarpan-0.1.7.tar.gz", "has_sig": false, "md5_digest": "a4f55fe9d3cebfa074b637f47b40661d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 15216, "upload_time": "2020-01-25T00:27:40", "upload_time_iso_8601": "2020-01-25T00:27:40.533609Z", "url": "https://files.pythonhosted.org/packages/89/a7/8bc10a7c564564fefe819f999f2bcce84ef8c96c900797f66444158a3ca9/tarpan-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "5fca0b7f87c2f931f2c5fd54bb81e1a0", "sha256": "599729b6c015e096c34e526a07f1c966fa949999dc6b9bdcd9312ab6084a33a7"}, "downloads": -1, "filename": "tarpan-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "5fca0b7f87c2f931f2c5fd54bb81e1a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19522, "upload_time": "2020-01-25T00:57:36", "upload_time_iso_8601": "2020-01-25T00:57:36.065990Z", "url": "https://files.pythonhosted.org/packages/37/f2/481228cb570fd1de31e66f25def3e0da20779f65047dab4dcdd620aae662/tarpan-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6bf94bf0608abe23230cf045ddfe97a", "sha256": "18731277b7152be8330c42e2d2461436b90b4a6461ab57383f015a68778fdec5"}, "downloads": -1, "filename": "tarpan-0.1.8.tar.gz", "has_sig": false, "md5_digest": "e6bf94bf0608abe23230cf045ddfe97a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 15355, "upload_time": "2020-01-25T00:57:44", "upload_time_iso_8601": "2020-01-25T00:57:44.177825Z", "url": "https://files.pythonhosted.org/packages/b2/0e/ee5501cc81e20e2f9376d0a86570e2db75e21c7e89169fdf262e1c8e7ec8/tarpan-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "eb37a0d88a6ea9bd0a68241efbf89387", "sha256": "aac7b6f965f7ed1787a7929da57edc69de5821d011747f0f4bf5e6709cf7ca21"}, "downloads": -1, "filename": "tarpan-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "eb37a0d88a6ea9bd0a68241efbf89387", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 19917, "upload_time": "2020-01-25T05:36:45", "upload_time_iso_8601": "2020-01-25T05:36:45.899608Z", "url": "https://files.pythonhosted.org/packages/a4/dc/db7a685c0613fcbc96646afe5c47d826d179aa5a0fba99659d9eda53e69e/tarpan-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf9c9aecae24fb24728ddbe9cb2b8164", "sha256": "e4ceb81da311161ac67265382e12ecee1be2959b343416a194c4ea25d68d081e"}, "downloads": -1, "filename": "tarpan-0.1.9.tar.gz", "has_sig": false, "md5_digest": "bf9c9aecae24fb24728ddbe9cb2b8164", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 13768, "upload_time": "2020-01-25T05:36:47", "upload_time_iso_8601": "2020-01-25T05:36:47.931131Z", "url": "https://files.pythonhosted.org/packages/0f/3f/77e0732f7621540e80be1871922b1c38568ff75d64f3a3383325f8b30845/tarpan-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "d2147b4d6d7e70f09054be500a60e76e", "sha256": "dd7311a1fa2c81b933afa196e2635b85beb19ac95c88467b56f9881fb46ed405"}, "downloads": -1, "filename": "tarpan-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d2147b4d6d7e70f09054be500a60e76e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25234, "upload_time": "2020-01-26T05:31:37", "upload_time_iso_8601": "2020-01-26T05:31:37.715432Z", "url": "https://files.pythonhosted.org/packages/50/af/4d33c0af9f82896651c4c94303aab49b1167a631c2377a83697b373a4ced/tarpan-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e1f974c56ce5713d94ae4151dfe2474c", "sha256": "e5a0e665aa682809adec204095e07192bb0f1eaf805a83b96d62948bb2146344"}, "downloads": -1, "filename": "tarpan-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e1f974c56ce5713d94ae4151dfe2474c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18005, "upload_time": "2020-01-26T05:31:39", "upload_time_iso_8601": "2020-01-26T05:31:39.969030Z", "url": "https://files.pythonhosted.org/packages/c7/f2/7b524aa09b9535ec16b2d1139a3ab690212aadb056df63a495211fb14598/tarpan-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "861d0ffca111c1d02da2ecd4244b13c2", "sha256": "dba782b06c3eb21cd225f2ed99b36c9d81c7222715c37f664521eefe588c00f7"}, "downloads": -1, "filename": "tarpan-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "861d0ffca111c1d02da2ecd4244b13c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25284, "upload_time": "2020-01-26T05:53:24", "upload_time_iso_8601": "2020-01-26T05:53:24.269781Z", "url": "https://files.pythonhosted.org/packages/c0/9a/2ac9f0bed8931ff46174feff2a9c552751ef96d7cc3d274412dd6320a80a/tarpan-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17d73ae9835847ac50465bce2ff98fc3", "sha256": "4f0a3ed8c9c8364cc038e0aee5d83113abcaeb9fabaf89572a3979ea1ff38c74"}, "downloads": -1, "filename": "tarpan-0.2.1.tar.gz", "has_sig": false, "md5_digest": "17d73ae9835847ac50465bce2ff98fc3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18110, "upload_time": "2020-01-26T05:53:26", "upload_time_iso_8601": "2020-01-26T05:53:26.210949Z", "url": "https://files.pythonhosted.org/packages/46/49/62bf4dd1fb408f17191a416e16b2d3ab40381f4e28115379682e0b593ed3/tarpan-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "ba5943a8bc394968dc02dd884bd43377", "sha256": "66056238af6c5ac5ac8af9a9f48d2ee896e7da1b83cfcc21c8c8ccdf810714fe"}, "downloads": -1, "filename": "tarpan-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ba5943a8bc394968dc02dd884bd43377", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25304, "upload_time": "2020-01-26T06:23:52", "upload_time_iso_8601": "2020-01-26T06:23:52.563261Z", "url": "https://files.pythonhosted.org/packages/96/77/8b1570886b9995a7219e2b5ecfea5fcb793503ef3e410c3a97471f29b61d/tarpan-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8587d01f242a731a3b8ec52dfa5684e", "sha256": "7c832240768711a4cdea59eb2ba1afc62b28743c8b6482d90b4450613de561f1"}, "downloads": -1, "filename": "tarpan-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e8587d01f242a731a3b8ec52dfa5684e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18120, "upload_time": "2020-01-26T06:23:54", "upload_time_iso_8601": "2020-01-26T06:23:54.604507Z", "url": "https://files.pythonhosted.org/packages/c6/05/3281cd5e03d330e5e5964e541c31f44e8e553e7695ca4ee64988e654dcf2/tarpan-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "305773d88b97a378ffdc031e447cafd6", "sha256": "b7f267d95fae85c2b4b94088e50071f7d3b36e94f4ef95b393ae45aff36f0eca"}, "downloads": -1, "filename": "tarpan-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "305773d88b97a378ffdc031e447cafd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 25427, "upload_time": "2020-01-27T02:21:13", "upload_time_iso_8601": "2020-01-27T02:21:13.798782Z", "url": "https://files.pythonhosted.org/packages/0a/5b/363260be8df3c58e0b851db0141818920b22d8c15072784ee33fb82afadd/tarpan-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6739a5a6bd3289f6c8c4d59c97d80213", "sha256": "e802eed596e29d1086fdcc8b5e7275adcf675ed6fc8ef52eaf94fdf108d27b20"}, "downloads": -1, "filename": "tarpan-0.2.4.tar.gz", "has_sig": false, "md5_digest": "6739a5a6bd3289f6c8c4d59c97d80213", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 18390, "upload_time": "2020-01-27T02:21:16", "upload_time_iso_8601": "2020-01-27T02:21:16.240444Z", "url": "https://files.pythonhosted.org/packages/d9/b5/c7694dfcc16c551dcbbcd2b1cfccdcfcf0c83533f1151368510338ff67d2/tarpan-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "d862d3b263383a30a1634b0ffaf083dd", "sha256": "b3714fdf4193a4c40e0d53660673d429931714b5ace119ca8c171aa3e278a270"}, "downloads": -1, "filename": "tarpan-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "d862d3b263383a30a1634b0ffaf083dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 27322, "upload_time": "2020-01-28T14:24:21", "upload_time_iso_8601": "2020-01-28T14:24:21.280956Z", "url": "https://files.pythonhosted.org/packages/17/aa/b9407a7f75b1854683631c63743e89ec9dd3dc87b34ee45e9086832777b0/tarpan-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22bb554f99f3824dc781f9c35fdfcbfa", "sha256": "e412b5ce1c1d4a87f97f304a0918e82b429d35a4d8a757ca319f5992be2204fb"}, "downloads": -1, "filename": "tarpan-0.2.5.tar.gz", "has_sig": false, "md5_digest": "22bb554f99f3824dc781f9c35fdfcbfa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20066, "upload_time": "2020-01-28T14:24:22", "upload_time_iso_8601": "2020-01-28T14:24:22.964131Z", "url": "https://files.pythonhosted.org/packages/f7/c0/b12f40dc2600eb437f9a0acccbc85ffcac1f20e85f642287120feb223c62/tarpan-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "4d4a5fea78b32a52abb6a3ab11f2c994", "sha256": "457f09cd5433c66d0684d126ac0790bd8e42668718f792522c8118df1e1b7972"}, "downloads": -1, "filename": "tarpan-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "4d4a5fea78b32a52abb6a3ab11f2c994", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 28573, "upload_time": "2020-01-30T05:25:26", "upload_time_iso_8601": "2020-01-30T05:25:26.259283Z", "url": "https://files.pythonhosted.org/packages/ab/d2/901d13b76f47d35f1147ed00681c140ebcb0f53bd684f10d97ef8d9099cc/tarpan-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b25e8b4f4e373f06af1d707c4727411", "sha256": "ca0a302e05ee4445e3182c5d4f0e77392813434f5a841bc29afef9ca8682129c"}, "downloads": -1, "filename": "tarpan-0.2.6.tar.gz", "has_sig": false, "md5_digest": "5b25e8b4f4e373f06af1d707c4727411", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 21038, "upload_time": "2020-01-30T05:25:28", "upload_time_iso_8601": "2020-01-30T05:25:28.348209Z", "url": "https://files.pythonhosted.org/packages/b3/96/85aedd48b3c4082774fe55d3948649362044b9c759a2982f7de7ac705e6a/tarpan-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "8afc9a48ee918e3e4bab1d7a62dce9cb", "sha256": "6c0caa97ecbbe05be6f428c0323c8441a6a0c650a273344cf96c175b0a40d46c"}, "downloads": -1, "filename": "tarpan-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "8afc9a48ee918e3e4bab1d7a62dce9cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 27107, "upload_time": "2020-01-31T03:01:04", "upload_time_iso_8601": "2020-01-31T03:01:04.309339Z", "url": "https://files.pythonhosted.org/packages/03/52/dd9234191d3519bb5bbad10f59fb9c9b046988ec50609255b01c6e6184bf/tarpan-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "797ac11a653e27ff2ad6c10d3096279f", "sha256": "d6dc2ecefe99607d9704ed496cc97f8c129b9a444be24b4b1414ce90bfd0be4f"}, "downloads": -1, "filename": "tarpan-0.2.7.tar.gz", "has_sig": false, "md5_digest": "797ac11a653e27ff2ad6c10d3096279f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20376, "upload_time": "2020-01-31T03:01:06", "upload_time_iso_8601": "2020-01-31T03:01:06.509763Z", "url": "https://files.pythonhosted.org/packages/19/36/595d1b5540997c17681114974fb22ce1658f4579fe09d657b9ac19555e5f/tarpan-0.2.7.tar.gz", "yanked": false}], "0.2.8": [{"comment_text": "", "digests": {"md5": "3d4471d71ff57dfd97d04c0b83993eb2", "sha256": "cbd79f41d10eab0162cb94bd0ba889fe1be7f4bf5251625da02795c86c97a58c"}, "downloads": -1, "filename": "tarpan-0.2.8-py3-none-any.whl", "has_sig": false, "md5_digest": "3d4471d71ff57dfd97d04c0b83993eb2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 27107, "upload_time": "2020-01-31T03:08:38", "upload_time_iso_8601": "2020-01-31T03:08:38.415333Z", "url": "https://files.pythonhosted.org/packages/ec/31/fefe474af3c211602fe11f0e493eb294e465de9c51171e9e5b2e58864493/tarpan-0.2.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "443f139d0f51226f3ecbf1a10ad89abe", "sha256": "bc737aafe1f36e74fbe0e33a20e106ca92a540aaac8924b4beee36bdb196174f"}, "downloads": -1, "filename": "tarpan-0.2.8.tar.gz", "has_sig": false, "md5_digest": "443f139d0f51226f3ecbf1a10ad89abe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 20377, "upload_time": "2020-01-31T03:08:40", "upload_time_iso_8601": "2020-01-31T03:08:40.484865Z", "url": "https://files.pythonhosted.org/packages/64/b4/6da0b0fa64a93df94b7b0d69a852375d02cc5f7c7fee4f6d171bf0e352c8/tarpan-0.2.8.tar.gz", "yanked": false}], "0.2.9": [{"comment_text": "", "digests": {"md5": "25f003a2a1811fe3b41d5a7d7f8e4921", "sha256": "1d4823be3308320ca04cc9655ef8823e37f75a40bcd9ce3c5233485126a733f5"}, "downloads": -1, "filename": "tarpan-0.2.9-py3-none-any.whl", "has_sig": false, "md5_digest": "25f003a2a1811fe3b41d5a7d7f8e4921", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 29838, "upload_time": "2020-01-31T03:12:28", "upload_time_iso_8601": "2020-01-31T03:12:28.141061Z", "url": "https://files.pythonhosted.org/packages/2d/50/c647bbd25fa1365612b85fb7444e2b3146ac5b99c0f67a7cce3fc3ea8efa/tarpan-0.2.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51a201f927cda50b38a226f862c4c362", "sha256": "788c0cf8f7927a2eb9e71944e61a91174b917e18e4de795fe8c63ceebd3dbe26"}, "downloads": -1, "filename": "tarpan-0.2.9.tar.gz", "has_sig": false, "md5_digest": "51a201f927cda50b38a226f862c4c362", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 22046, "upload_time": "2020-01-31T03:12:29", "upload_time_iso_8601": "2020-01-31T03:12:29.940618Z", "url": "https://files.pythonhosted.org/packages/f2/41/1b2d6d552f673b85c8f04c15019af3421b2edc189f8ecda3e5b418e62ba4/tarpan-0.2.9.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "2ced759c63296c653ae181766563a42b", "sha256": "222509e809033e7bc9ce39493e95bfcd7a0a86147f0528f1a12faeec0ebbc401"}, "downloads": -1, "filename": "tarpan-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2ced759c63296c653ae181766563a42b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30105, "upload_time": "2020-01-31T03:24:40", "upload_time_iso_8601": "2020-01-31T03:24:40.948073Z", "url": "https://files.pythonhosted.org/packages/ae/ae/5cf40ddb35274f19a165ba4ed3a044479cb4c0ea9256111db710d12def16/tarpan-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0525f48950db08e5eedbe51716ab8126", "sha256": "63fabcc2f3d7b34a49456af1a887f4b9ca903e6c96e66e390b1cc634c9b806bf"}, "downloads": -1, "filename": "tarpan-0.3.0.tar.gz", "has_sig": false, "md5_digest": "0525f48950db08e5eedbe51716ab8126", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 22501, "upload_time": "2020-01-31T03:24:43", "upload_time_iso_8601": "2020-01-31T03:24:43.144703Z", "url": "https://files.pythonhosted.org/packages/76/77/1c189c8605ae57ecd825a1592efd92230709a5a258faf26d8be473fa9bed/tarpan-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "ed5d6604ad7af93ecdadd8cb3a2882cb", "sha256": "3233d7868fb8db2abfd6dfab5491c94cadfe7d63df03ea81656c80820a78e0c3"}, "downloads": -1, "filename": "tarpan-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ed5d6604ad7af93ecdadd8cb3a2882cb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 30418, "upload_time": "2020-02-01T06:24:49", "upload_time_iso_8601": "2020-02-01T06:24:49.149330Z", "url": "https://files.pythonhosted.org/packages/77/48/3fb95da5138ad362807102cf4aa2ee76a10d325210acf56aed92fbf86d3e/tarpan-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2eb4b3afc8d3e01b611171da02a4cfc9", "sha256": "070bf21b7f831cc6cf1c24c67670adb7000da912f706d3bfb9b939b41f8f252a"}, "downloads": -1, "filename": "tarpan-0.3.1.tar.gz", "has_sig": false, "md5_digest": "2eb4b3afc8d3e01b611171da02a4cfc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 22822, "upload_time": "2020-02-01T06:24:51", "upload_time_iso_8601": "2020-02-01T06:24:51.412526Z", "url": "https://files.pythonhosted.org/packages/18/89/10d6599fbafc0f1692c33557ecba050ce5777f774973929b94c745f1e954/tarpan-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "357a8c2654b5c5fe24af7c62de2c80c9", "sha256": "ced7a0bacc2bea0f1540377a437cf1457e2097b29498f91f954c93b50ce1ce0d"}, "downloads": -1, "filename": "tarpan-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "357a8c2654b5c5fe24af7c62de2c80c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 35121, "upload_time": "2020-02-11T06:02:29", "upload_time_iso_8601": "2020-02-11T06:02:29.295715Z", "url": "https://files.pythonhosted.org/packages/4c/33/3f4daab7c6093b65ac69cf4499472fd40aef3344b98a9eb7173481c40857/tarpan-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2a81773a59b27a66073ff3484508486a", "sha256": "2601fb906265cc1d59fe4965735cdff2b72512799afdce80d049ca45e9aee7b3"}, "downloads": -1, "filename": "tarpan-0.3.2.tar.gz", "has_sig": false, "md5_digest": "2a81773a59b27a66073ff3484508486a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 25685, "upload_time": "2020-02-11T06:02:31", "upload_time_iso_8601": "2020-02-11T06:02:31.046265Z", "url": "https://files.pythonhosted.org/packages/d1/2d/0370b46ca047dd9ec9562c6399aab437c835f6a6034bedc962a0b2d9d999/tarpan-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "207ab6d571b2f8e7b9c807adfe600185", "sha256": "a065231a5a8dcc3f3452ec7ede9d3e7e91221b19ba9b15086bc5f1083a40b48a"}, "downloads": -1, "filename": "tarpan-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "207ab6d571b2f8e7b9c807adfe600185", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 35236, "upload_time": "2020-02-12T02:09:02", "upload_time_iso_8601": "2020-02-12T02:09:02.168048Z", "url": "https://files.pythonhosted.org/packages/66/e1/1b048b0b9e53275614b892c335495eed78b2147157c03a6c9da209a82176/tarpan-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a45994a5ffe366ac53ccb3e2814ad7e", "sha256": "83bf9a5979bc2242925b44426647e4b9179c242c1d17a30c6c5ffa6e2ad64919"}, "downloads": -1, "filename": "tarpan-0.3.3.tar.gz", "has_sig": false, "md5_digest": "0a45994a5ffe366ac53ccb3e2814ad7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 25843, "upload_time": "2020-02-12T02:09:07", "upload_time_iso_8601": "2020-02-12T02:09:07.115589Z", "url": "https://files.pythonhosted.org/packages/70/c6/e353f5e1693f2c8108056369d6cf145055a48577ec4305121bd6c3b6a64b/tarpan-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "a85fd72f2db1233e77b1e38eec25ef8f", "sha256": "ed6dae83b21fd49b82eb85e46ef8028a3ca33ceb34d55f440507c31091247d15"}, "downloads": -1, "filename": "tarpan-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a85fd72f2db1233e77b1e38eec25ef8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 39141, "upload_time": "2020-02-12T07:34:41", "upload_time_iso_8601": "2020-02-12T07:34:41.856793Z", "url": "https://files.pythonhosted.org/packages/e2/bc/a48b647b9fa78566545c21f5f36d4edecf3b985fb519f3946d4a6c59ece0/tarpan-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2bce48a0563b581a50d907780dafd910", "sha256": "bc175ec8471c62e6c834e769134971bc6410cc3bd9ff76d46e0670791af175f9"}, "downloads": -1, "filename": "tarpan-0.3.4.tar.gz", "has_sig": false, "md5_digest": "2bce48a0563b581a50d907780dafd910", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 28435, "upload_time": "2020-02-12T07:34:44", "upload_time_iso_8601": "2020-02-12T07:34:44.187281Z", "url": "https://files.pythonhosted.org/packages/84/2c/de0d5a6fb2a7887484077607d388cb74082540db3c151405943187b58588/tarpan-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "c07c97da4e184bcea836ee1f92d81a07", "sha256": "29e8e7b3eacae212617346842debca4e97774e898827713e213472ad5227001c"}, "downloads": -1, "filename": "tarpan-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "c07c97da4e184bcea836ee1f92d81a07", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 41879, "upload_time": "2020-02-15T23:24:50", "upload_time_iso_8601": "2020-02-15T23:24:50.793703Z", "url": "https://files.pythonhosted.org/packages/85/f1/4b6958fbb6d64d24fd1d4e237dd58418504fe23edaa5e0d28874dcf0ec32/tarpan-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09cae1041e7c7ea0a5960c331e66f307", "sha256": "c7ef2c298d72315ce75647b0e019a18f3ad51855252759563e52778822d65936"}, "downloads": -1, "filename": "tarpan-0.3.5.tar.gz", "has_sig": false, "md5_digest": "09cae1041e7c7ea0a5960c331e66f307", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 30448, "upload_time": "2020-02-15T23:24:52", "upload_time_iso_8601": "2020-02-15T23:24:52.995628Z", "url": "https://files.pythonhosted.org/packages/4b/bd/c2e38f71d00f210f28b07f3f4a6e9d0d7842107dd94d5818f504aae2ab80/tarpan-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "c0273fac8d7ca020526f32a7bc7f46cd", "sha256": "7f56cd985cb7ad54d0b2afc49587e640016e2a9418c0cb94bc975be1702e542b"}, "downloads": -1, "filename": "tarpan-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c0273fac8d7ca020526f32a7bc7f46cd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 42797, "upload_time": "2020-02-19T00:04:19", "upload_time_iso_8601": "2020-02-19T00:04:19.368971Z", "url": "https://files.pythonhosted.org/packages/0c/32/bca7c96635acbd600f3986d3e19cd3f879987fcbd5127edea07eee696919/tarpan-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25a86991faa22f16e939955712148938", "sha256": "3a939a469186b4b8424defe95bbf154aca9dcd9884ffe7de6c9f0c0c6f8f9c60"}, "downloads": -1, "filename": "tarpan-0.3.6.tar.gz", "has_sig": false, "md5_digest": "25a86991faa22f16e939955712148938", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 31192, "upload_time": "2020-02-19T00:04:21", "upload_time_iso_8601": "2020-02-19T00:04:21.702227Z", "url": "https://files.pythonhosted.org/packages/c9/18/f9fdd81c96007e1f5120ba0a55e9527ec6b61e9c9a1222241110be46b384/tarpan-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "f747b1fe16aa05c6de0b4eda85ba68d4", "sha256": "9dc9e152d8aa674adb29ecd784eec0b729982118be8cbbd1ed00349cb694487e"}, "downloads": -1, "filename": "tarpan-0.3.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f747b1fe16aa05c6de0b4eda85ba68d4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 62947, "upload_time": "2020-03-01T11:04:42", "upload_time_iso_8601": "2020-03-01T11:04:42.891345Z", "url": "https://files.pythonhosted.org/packages/73/cf/185734208859334a2b24f3256d5cb665c730d6c0850c385bf1e1073df33b/tarpan-0.3.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b4c83685c1528bfddb1b20bc5925edb", "sha256": "3b05adaa0f42cc54b0d3071bdc473d7e649ea77ffc04a45e842e31f20ba9170b"}, "downloads": -1, "filename": "tarpan-0.3.7.tar.gz", "has_sig": false, "md5_digest": "6b4c83685c1528bfddb1b20bc5925edb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 48658, "upload_time": "2020-03-01T11:04:45", "upload_time_iso_8601": "2020-03-01T11:04:45.221924Z", "url": "https://files.pythonhosted.org/packages/ed/1a/37aab9bb70d174c12c60e955d6e50d61c2511a1b7ac47c2a6928fe4408d4/tarpan-0.3.7.tar.gz", "yanked": false}], "0.3.8": [{"comment_text": "", "digests": {"md5": "d619904f1c22336d79eb1625083cc2c6", "sha256": "db92909beea3439d76df949027008c99353f59b9bb8c7f9bb6fd49f8bee1f6a2"}, "downloads": -1, "filename": "tarpan-0.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "d619904f1c22336d79eb1625083cc2c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 63426, "upload_time": "2020-03-12T01:27:38", "upload_time_iso_8601": "2020-03-12T01:27:38.273003Z", "url": "https://files.pythonhosted.org/packages/e6/9a/a9f53208746602f64bb23d77c21cf971a0f4334bde12154c2caf79ab5841/tarpan-0.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a12039d52bb4d0906caab08c55e886f", "sha256": "b8a6c098530ed8c8c218838601a32daab694cb61cc13817dfe3edb42d412a446"}, "downloads": -1, "filename": "tarpan-0.3.8.tar.gz", "has_sig": false, "md5_digest": "6a12039d52bb4d0906caab08c55e886f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 49372, "upload_time": "2020-03-12T01:27:40", "upload_time_iso_8601": "2020-03-12T01:27:40.351152Z", "url": "https://files.pythonhosted.org/packages/87/c1/28a28484373851fbe55a146a9be75b807ecaa95460a20f6074b001e86563/tarpan-0.3.8.tar.gz", "yanked": false}], "0.3.9": [{"comment_text": "", "digests": {"md5": "22398e9380c06e398985fe88eea6d16b", "sha256": "53799bc1d67778482473998ce24f1af6971f80117fb3d5ef81ac512cba8a9a32"}, "downloads": -1, "filename": "tarpan-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "22398e9380c06e398985fe88eea6d16b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 63428, "upload_time": "2020-03-28T04:20:21", "upload_time_iso_8601": "2020-03-28T04:20:21.501258Z", "url": "https://files.pythonhosted.org/packages/b8/21/cfaf152759d11160e0d4e4659cf518045587b0f2ea45bcbf62426c29c46c/tarpan-0.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b5a72afadcc38f3baafc18c1aaf719", "sha256": "0dd0b5b7996f6c60ab56fb5ae0c0e4087cec0b08af1621387d8b5c2e0fae53aa"}, "downloads": -1, "filename": "tarpan-0.3.9.tar.gz", "has_sig": false, "md5_digest": "68b5a72afadcc38f3baafc18c1aaf719", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 49369, "upload_time": "2020-03-28T04:20:25", "upload_time_iso_8601": "2020-03-28T04:20:25.719098Z", "url": "https://files.pythonhosted.org/packages/c1/94/89031a1edc7f7bae733aae09c8c6ca89f5914b836ae79f69cd1ca87fb7ba/tarpan-0.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "22398e9380c06e398985fe88eea6d16b", "sha256": "53799bc1d67778482473998ce24f1af6971f80117fb3d5ef81ac512cba8a9a32"}, "downloads": -1, "filename": "tarpan-0.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "22398e9380c06e398985fe88eea6d16b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 63428, "upload_time": "2020-03-28T04:20:21", "upload_time_iso_8601": "2020-03-28T04:20:21.501258Z", "url": "https://files.pythonhosted.org/packages/b8/21/cfaf152759d11160e0d4e4659cf518045587b0f2ea45bcbf62426c29c46c/tarpan-0.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "68b5a72afadcc38f3baafc18c1aaf719", "sha256": "0dd0b5b7996f6c60ab56fb5ae0c0e4087cec0b08af1621387d8b5c2e0fae53aa"}, "downloads": -1, "filename": "tarpan-0.3.9.tar.gz", "has_sig": false, "md5_digest": "68b5a72afadcc38f3baafc18c1aaf719", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 49369, "upload_time": "2020-03-28T04:20:25", "upload_time_iso_8601": "2020-03-28T04:20:25.719098Z", "url": "https://files.pythonhosted.org/packages/c1/94/89031a1edc7f7bae733aae09c8c6ca89f5914b836ae79f69cd1ca87fb7ba/tarpan-0.3.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:53 2020"}