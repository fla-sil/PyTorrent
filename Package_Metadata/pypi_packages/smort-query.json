{"info": {"author": "Mateusz Nowak", "author_email": "nowak.mateusz@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9"], "description": "# Smort Query\n[![PyPI version](https://badge.fury.io/py/smort-query.svg)](https://badge.fury.io/py/smort-query)\n[![Build Status](https://travis-ci.org/matiuszka/smort-query.svg?branch=master)](https://travis-ci.org/matiuszka/smort-query)\n[![codecov](https://codecov.io/gh/matiuszka/smort-query/branch/master/graph/badge.svg)](https://codecov.io/gh/matiuszka/smort-query)\n\n![alt text](https://media3.giphy.com/media/hFROvOhBPQVRm/giphy.gif \"Smort\")\n\nLazy evaluated query implementation for searching through Python objects\ninspired by [Django QuerySets](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#queryset-api-reference).\n\n - GitHub: https://github.com/matiuszka/smort-query\n - PyPi: https://pypi.org/project/smort-query\n\n## Rationale\n\nIn many moments of our programing tasks we have to filter iterables in\nsearch of the right objects in right order.\nI realized that most of the time code looks almost the same, but what kind of interface will be easiest to use ? In that moment I figured out that [Django QuerySets](https://docs.djangoproject.com/en/3.0/ref/models/querysets/#queryset-api-reference) implementation is kinda handy and well known.\n\nSo I decided to write small query engine that interface will be similar to Django one.\nBut it will work for Python objects. Additional assumption was that it will be lazy evaluated to\navoid memory consumption.\n\n## Lookup format\n\nWhole idea relays on keywords arguments naming format.\nLet's consider following qualname `attr1.attr2` which can we used to get or set value for attribute.\nThis engine do things similarly but instead of separating by dot(`.`) we are separating by `__` signs.\nSo above example can be converted to keyword argument name like that `attr1__attr2`. Due to fact that we can't use `.` in argument names.\n\nFor some methods like `filter` and `exclude`, we can also specify comparator.\nBy default those methods are comparing against equality `==`. But we can easily change it.\nIf we want to compare by using `<=` we can use `__le` or `__lte` postfix.\nSo we will end up with argument name like `attr1__attr2__lt`.\n\nAll supported comparators are described here in [supported comparators](#supported-comparators) section.\n\n## Installation\n\n```console\npip install smort-query\n```\n\n## Importing\n\n```python\nfrom smort_query import ObjectQuery\n# or by alias\nfrom smort_query import OQ\n```\n\n## How it works ?\n\n### Basics\n\nEach method in `ObjectQuery` produces new query. Which makes chaining very easy.\nThe most important thing is that `ObjectQuery` instances are unevaluated - it means that\nthey are not loading an objects to the memory even when we are chaining them.\n\nQuery sets can be evaluated in several ways:\n- Iteration:\n    ```python\n    query = ObjectQuery(range(5))\n\n    for obj in query:\n        print(obj)\n\n    \"\"\"out:\n    1\n    2\n    3\n    4\n    5\n    \"\"\"\n    ```\n- Checking length:\n    ```python\n    query = ObjectQuery(range(10))\n\n    len(query)\n    \"\"\"out:\n    10\n    \"\"\"\n    ```\n- Reversing query:\n    ```python\n    query = ObjectQuery(range(10))\n\n    query.reverse()\n    \"\"\"out:\n    <ObjectQuery for <reversed object at 0x04E8B460>>\n    \"\"\"\n\n    list(list(query.reverse()))\n    \"\"\"out\n    [9, 8, 7, 6, 5, 4, 3, 2, 1, 0]\n    \"\"\"\n    ```\n- Getting items:\n    - Getting by index evaluates query:\n        ```python\n        query = ObjectQuery(range(10))\n        query[5]\n        \"\"\"out:\n        5\n        \"\"\"\n        ```\n    - But slices not! They creates another query.\n        ```python\n        query = ObjectQuery(range(10))\n        query[5:0:-1]\n        \"\"\"out:\n        <ObjectQuery for <generator object islice_extended at 0x0608B338>>\n        \"\"\"\n        list(query[5:0:-1])\n        \"\"\"out:\n        [5, 4, 3, 2, 1]\n        \"\"\"\n        ```\n- Initializing other objects that used iterators/iterables (it is still almost same mechanism like normal iteration):\n    ```python\n    query1 = ObjectQuery(range(10))\n    query2 = ObjectQuery(range(10))\n\n    list(query1)\n    \"\"\"out:\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n    \"\"\"\n    tuple(query2)\n    \"\"\"out:\n    (0, 1, 2, 3, 4, 5, 6, 7, 8, 9)\n    \"\"\"\n    ```\n\n### User cases\n\nLet's consider fallowing code for populating faked humans:\n\n```python\nfrom random import randint, choice\n\n\nclass Human:\n    def __init__(self, name, age, sex, height, weight):\n        self.name = name\n        self.age = age\n        self.sex = sex\n        self.height = height\n        self.weight = weight\n\n    def __repr__(self):\n        return str(self.__dict__)\n\n\ndef make_random_human(name):\n    return Human(\n        name=name,\n        age=randint(20, 80),\n        sex=choice(('female', 'male')),\n        height=randint(160, 210),\n        weight=randint(60, 80),\n    )\n```\n\nCreating 10 random humans:\n```python\nhumans = [make_random_human(i) for i in range(10)]\n\"\"\"out:\n[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n```\n\n### Filtering and excluding\n\nFinding peoples from age between [30; 75). To that we will used specialized comparators:\n\n```python\nlist(ObjectQuery(humans).filter(age__ge=30, age__lt=75))\n\"\"\"out:\n[{'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n```\n\nWe can also excluding males in similar way:\n```python\nlist(ObjectQuery(humans).exclude(sex=\"male\"))\n\"\"\"out:\n[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n \"\"\"\n```\n\n### Ordering\n\nOrdering by `sex` attributes in ascending order:\n```python\nlist(ObjectQuery(humans).order_by(\"sex\"))\n\"\"\"out\n[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72}]\n\"\"\"\n```\n\nOrdering by `sex` attributes in descending order:\n```python\nlist(ObjectQuery(humans).order_by(\"-sex\"))\n\"\"\"out\n[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n```\n\nOrdering by multiple attributes:\n```python\nlist(ObjectQuery(humans).order_by(\"-sex\", \"height\"))\n\"\"\"out:\n[{'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71}]\n\"\"\"\n```\n\n### Annotate\n\nIf some attributes worth of filtering and ordering are not available by hand\nwe can calculate them on the fly:\n```python\n# Sorry for example if someone feels offended\nroot_query = ObjectQuery(humans)\n\nonly_females = root_query.filter(sex=\"female\")  # reduce objects for annotation calculation\nbmi_annotated_females = only_females.annotate(bmi=lambda obj: obj.weight / (obj.height / 100) ** 2)\noverweight_females = bmi_annotated_females.filter(bmi__gt=25)\noverweight_females_ordered_by_age = overweight_females.order_by(\"age\")\nlist(overweight_females_ordered_by_age)\n\"\"\"out:\n[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71, 'bmi': 27.390918560240728},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75, 'bmi': 25.95155709342561},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78, 'bmi': 26.061679307694877}]\n\"\"\"\n```\n\n### Copying\n\nEach method query is returning copy.\nWhere iteration over newly created ones does not affect object sources.\n\n```python\nroot_query = ObjectQuery(humans).filter(age__ge=30, age__lt=75)\nquery1 = root_query.filter(weight__gt=75)\nquery2 = root_query.filter(weight__in=[78, 62])\n\nlist(query1)\n\"\"\"out:\n[{'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n\nlist(query2)\n\"\"\"out:\n[{'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n\nlist(root_query)\n\"\"\"out:\n[{'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n```\n\nBut sometimes evaluating some query in middle of chain may break it, so when you explicitly\nwant to save somewhere copy of query and be sure that further actions on `root` will not \naffect on query, you can do:\n```python\nroot_query = ObjectQuery(humans)\ncopy = root_query.all()\n```\n\n### Reversing\n\nYou can also reverse query, but remember that it will evaluate query:\n```python\nroot_query = ObjectQuery(humans).reverse()\nlist(root_query)\n\"\"\"out:\n[{'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71}]\n\"\"\"\n```\n\n### OR\nBitwise OR combines two queries together. Same as `union` method.\nNote that after ORing two queries or even more, ordering might be needed:\n\n```python\nroot_query = ObjectQuery(humans)\nmales = root_query.filter(sex=\"male\")\nfemales = root_query.filter(sex=\"female\")\nboth1 = (males | females)\nboth2 = males.union(females)\n\nlist(both1)\n\"\"\"out:\n[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\nlist(both2)\n\"\"\"out:\n[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},\n {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},\n {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},\n {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},\n {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},\n {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},\n {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},\n {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},\n {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},\n {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]\n\"\"\"\n```\n\n## Supported Comparators\n\nProject supports many comparator that can be chosen as postfix for lookup:\n\n- Default comparator is `eq`\n- `eq` makes `a == b`\n- `exact` makes `a == b`\n- `in` makes `a in b`\n- `contains` makes `b in a`\n- `gt` makes `a > b`\n- `gte` makes `a >= b`\n- `ge` makes `a >= b`\n- `lt` makes `a < b`\n- `lte` makes `a <= b`\n- `le` makes `a <= b`\n\n## TODOs\n\n- The `asc()` and `desc()` methods which works same as `order_by()` but with specified order in advance.\n- The `unique_justseen()` and `unique_everseen()` methods to remove duplicates.\nComparison realized by passed attributes or delegated to objects equality `__eq__`.\n- The `intersection()` method for finding common objects in two queries.\nComparison realized by passed attributes or delegated to objects equality `__eq__`.\n- The `__len__` and `__getitem__` improvement for evaluating query only once per life cycle.\n\n## Contribution\n\nAny form of contribution is appreciated. Finding issues, new ideas, new features.\nAnd of course you are welcome to create PR for this project.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/matiuszka/smort-query", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "smort-query", "package_url": "https://pypi.org/project/smort-query/", "platform": "", "project_url": "https://pypi.org/project/smort-query/", "project_urls": {"Homepage": "https://github.com/matiuszka/smort-query"}, "release_url": "https://pypi.org/project/smort-query/1.1.0/", "requires_dist": ["more-itertools (==8.2.0)"], "requires_python": ">=3.6", "summary": "Django like query engine for any objects.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Smort Query</h1>\n<p><a href=\"https://badge.fury.io/py/smort-query\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08e0144ab16ac3985f1a99362dd55eb16fe755e7/68747470733a2f2f62616467652e667572792e696f2f70792f736d6f72742d71756572792e737667\"></a>\n<a href=\"https://travis-ci.org/matiuszka/smort-query\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09f5b12cdd298c1a7ff226dc7f704cc0fbf4306b/68747470733a2f2f7472617669732d63692e6f72672f6d61746975737a6b612f736d6f72742d71756572792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/matiuszka/smort-query\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4568db8a28584638e00b7c6d262a2178301587e0/68747470733a2f2f636f6465636f762e696f2f67682f6d61746975737a6b612f736d6f72742d71756572792f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p><img alt=\"alt text\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c2c4cca4b70eb0db56384f1a293c6cab14cf5c0a/68747470733a2f2f6d65646961332e67697068792e636f6d2f6d656469612f6846524f764f6842505156526d2f67697068792e676966\"></p>\n<p>Lazy evaluated query implementation for searching through Python objects\ninspired by <a href=\"https://docs.djangoproject.com/en/3.0/ref/models/querysets/#queryset-api-reference\" rel=\"nofollow\">Django QuerySets</a>.</p>\n<ul>\n<li>GitHub: <a href=\"https://github.com/matiuszka/smort-query\" rel=\"nofollow\">https://github.com/matiuszka/smort-query</a></li>\n<li>PyPi: <a href=\"https://pypi.org/project/smort-query\" rel=\"nofollow\">https://pypi.org/project/smort-query</a></li>\n</ul>\n<h2>Rationale</h2>\n<p>In many moments of our programing tasks we have to filter iterables in\nsearch of the right objects in right order.\nI realized that most of the time code looks almost the same, but what kind of interface will be easiest to use ? In that moment I figured out that <a href=\"https://docs.djangoproject.com/en/3.0/ref/models/querysets/#queryset-api-reference\" rel=\"nofollow\">Django QuerySets</a> implementation is kinda handy and well known.</p>\n<p>So I decided to write small query engine that interface will be similar to Django one.\nBut it will work for Python objects. Additional assumption was that it will be lazy evaluated to\navoid memory consumption.</p>\n<h2>Lookup format</h2>\n<p>Whole idea relays on keywords arguments naming format.\nLet's consider following qualname <code>attr1.attr2</code> which can we used to get or set value for attribute.\nThis engine do things similarly but instead of separating by dot(<code>.</code>) we are separating by <code>__</code> signs.\nSo above example can be converted to keyword argument name like that <code>attr1__attr2</code>. Due to fact that we can't use <code>.</code> in argument names.</p>\n<p>For some methods like <code>filter</code> and <code>exclude</code>, we can also specify comparator.\nBy default those methods are comparing against equality <code>==</code>. But we can easily change it.\nIf we want to compare by using <code>&lt;=</code> we can use <code>__le</code> or <code>__lte</code> postfix.\nSo we will end up with argument name like <code>attr1__attr2__lt</code>.</p>\n<p>All supported comparators are described here in <a href=\"#supported-comparators\" rel=\"nofollow\">supported comparators</a> section.</p>\n<h2>Installation</h2>\n<pre><span class=\"go\">pip install smort-query</span>\n</pre>\n<h2>Importing</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">smort_query</span> <span class=\"kn\">import</span> <span class=\"n\">ObjectQuery</span>\n<span class=\"c1\"># or by alias</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smort_query</span> <span class=\"kn\">import</span> <span class=\"n\">OQ</span>\n</pre>\n<h2>How it works ?</h2>\n<h3>Basics</h3>\n<p>Each method in <code>ObjectQuery</code> produces new query. Which makes chaining very easy.\nThe most important thing is that <code>ObjectQuery</code> instances are unevaluated - it means that\nthey are not loading an objects to the memory even when we are chaining them.</p>\n<p>Query sets can be evaluated in several ways:</p>\n<ul>\n<li>Iteration:\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">))</span>\n\n<span class=\"k\">for</span> <span class=\"n\">obj</span> <span class=\"ow\">in</span> <span class=\"n\">query</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">1</span>\n<span class=\"sd\">2</span>\n<span class=\"sd\">3</span>\n<span class=\"sd\">4</span>\n<span class=\"sd\">5</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n<li>Checking length:\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">10</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n<li>Reversing query:\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">&lt;ObjectQuery for &lt;reversed object at 0x04E8B460&gt;&gt;</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()))</span>\n<span class=\"sd\">\"\"\"out</span>\n<span class=\"sd\">[9, 8, 7, 6, 5, 4, 3, 2, 1, 0]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n<li>Getting items:\n<ul>\n<li>Getting by index evaluates query:\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">query</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">5</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n<li>But slices not! They creates another query.\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">query</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">&lt;ObjectQuery for &lt;generator object islice_extended at 0x0608B338&gt;&gt;</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">[</span><span class=\"mi\">5</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[5, 4, 3, 2, 1]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n</ul>\n</li>\n<li>Initializing other objects that used iterators/iterables (it is still almost same mechanism like normal iteration):\n<pre><span class=\"n\">query1</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"n\">query2</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query1</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"nb\">tuple</span><span class=\"p\">(</span><span class=\"n\">query2</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">(0, 1, 2, 3, 4, 5, 6, 7, 8, 9)</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n</li>\n</ul>\n<h3>User cases</h3>\n<p>Let's consider fallowing code for populating faked humans:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span><span class=\"p\">,</span> <span class=\"n\">choice</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Human</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">,</span> <span class=\"n\">sex</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">,</span> <span class=\"n\">weight</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">name</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">age</span> <span class=\"o\">=</span> <span class=\"n\">age</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">sex</span> <span class=\"o\">=</span> <span class=\"n\">sex</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">=</span> <span class=\"n\">height</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">=</span> <span class=\"n\">weight</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"vm\">__dict__</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">make_random_human</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">Human</span><span class=\"p\">(</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">age</span><span class=\"o\">=</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n        <span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"n\">choice</span><span class=\"p\">((</span><span class=\"s1\">'female'</span><span class=\"p\">,</span> <span class=\"s1\">'male'</span><span class=\"p\">)),</span>\n        <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">210</span><span class=\"p\">),</span>\n        <span class=\"n\">weight</span><span class=\"o\">=</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">60</span><span class=\"p\">,</span> <span class=\"mi\">80</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Creating 10 random humans:</p>\n<pre><span class=\"n\">humans</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">make_random_human</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)]</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Filtering and excluding</h3>\n<p>Finding peoples from age between [30; 75). To that we will used specialized comparators:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__ge</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">age__lt</span><span class=\"o\">=</span><span class=\"mi\">75</span><span class=\"p\">))</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>We can also excluding males in similar way:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">exclude</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"s2\">\"male\"</span><span class=\"p\">))</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\"> \"\"\"</span>\n</pre>\n<h3>Ordering</h3>\n<p>Ordering by <code>sex</code> attributes in ascending order:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"sex\"</span><span class=\"p\">))</span>\n<span class=\"sd\">\"\"\"out</span>\n<span class=\"sd\">[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>Ordering by <code>sex</code> attributes in descending order:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"-sex\"</span><span class=\"p\">))</span>\n<span class=\"sd\">\"\"\"out</span>\n<span class=\"sd\">[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>Ordering by multiple attributes:</p>\n<pre><span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"-sex\"</span><span class=\"p\">,</span> <span class=\"s2\">\"height\"</span><span class=\"p\">))</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Annotate</h3>\n<p>If some attributes worth of filtering and ordering are not available by hand\nwe can calculate them on the fly:</p>\n<pre><span class=\"c1\"># Sorry for example if someone feels offended</span>\n<span class=\"n\">root_query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span>\n\n<span class=\"n\">only_females</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"s2\">\"female\"</span><span class=\"p\">)</span>  <span class=\"c1\"># reduce objects for annotation calculation</span>\n<span class=\"n\">bmi_annotated_females</span> <span class=\"o\">=</span> <span class=\"n\">only_females</span><span class=\"o\">.</span><span class=\"n\">annotate</span><span class=\"p\">(</span><span class=\"n\">bmi</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">weight</span> <span class=\"o\">/</span> <span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">height</span> <span class=\"o\">/</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">overweight_females</span> <span class=\"o\">=</span> <span class=\"n\">bmi_annotated_females</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">bmi__gt</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">overweight_females_ordered_by_age</span> <span class=\"o\">=</span> <span class=\"n\">overweight_females</span><span class=\"o\">.</span><span class=\"n\">order_by</span><span class=\"p\">(</span><span class=\"s2\">\"age\"</span><span class=\"p\">)</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">overweight_females_ordered_by_age</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71, 'bmi': 27.390918560240728},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75, 'bmi': 25.95155709342561},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78, 'bmi': 26.061679307694877}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>Copying</h3>\n<p>Each method query is returning copy.\nWhere iteration over newly created ones does not affect object sources.</p>\n<pre><span class=\"n\">root_query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">age__ge</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">age__lt</span><span class=\"o\">=</span><span class=\"mi\">75</span><span class=\"p\">)</span>\n<span class=\"n\">query1</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">weight__gt</span><span class=\"o\">=</span><span class=\"mi\">75</span><span class=\"p\">)</span>\n<span class=\"n\">query2</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">weight__in</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mi\">78</span><span class=\"p\">,</span> <span class=\"mi\">62</span><span class=\"p\">])</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query1</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">query2</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">root_query</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<p>But sometimes evaluating some query in middle of chain may break it, so when you explicitly\nwant to save somewhere copy of query and be sure that further actions on <code>root</code> will not\naffect on query, you can do:</p>\n<pre><span class=\"n\">root_query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span>\n<span class=\"n\">copy</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h3>Reversing</h3>\n<p>You can also reverse query, but remember that it will evaluate query:</p>\n<pre><span class=\"n\">root_query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">reverse</span><span class=\"p\">()</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">root_query</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h3>OR</h3>\n<p>Bitwise OR combines two queries together. Same as <code>union</code> method.\nNote that after ORing two queries or even more, ordering might be needed:</p>\n<pre><span class=\"n\">root_query</span> <span class=\"o\">=</span> <span class=\"n\">ObjectQuery</span><span class=\"p\">(</span><span class=\"n\">humans</span><span class=\"p\">)</span>\n<span class=\"n\">males</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"s2\">\"male\"</span><span class=\"p\">)</span>\n<span class=\"n\">females</span> <span class=\"o\">=</span> <span class=\"n\">root_query</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">sex</span><span class=\"o\">=</span><span class=\"s2\">\"female\"</span><span class=\"p\">)</span>\n<span class=\"n\">both1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">males</span> <span class=\"o\">|</span> <span class=\"n\">females</span><span class=\"p\">)</span>\n<span class=\"n\">both2</span> <span class=\"o\">=</span> <span class=\"n\">males</span><span class=\"o\">.</span><span class=\"n\">union</span><span class=\"p\">(</span><span class=\"n\">females</span><span class=\"p\">)</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">both1</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">both2</span><span class=\"p\">)</span>\n<span class=\"sd\">\"\"\"out:</span>\n<span class=\"sd\">[{'name': 4, 'age': 73, 'sex': 'male', 'height': 174, 'weight': 62},</span>\n<span class=\"sd\"> {'name': 5, 'age': 75, 'sex': 'male', 'height': 189, 'weight': 77},</span>\n<span class=\"sd\"> {'name': 6, 'age': 64, 'sex': 'male', 'height': 179, 'weight': 63},</span>\n<span class=\"sd\"> {'name': 8, 'age': 64, 'sex': 'male', 'height': 188, 'weight': 72},</span>\n<span class=\"sd\"> {'name': 0, 'age': 24, 'sex': 'female', 'height': 161, 'weight': 71},</span>\n<span class=\"sd\"> {'name': 1, 'age': 33, 'sex': 'female', 'height': 205, 'weight': 67},</span>\n<span class=\"sd\"> {'name': 2, 'age': 45, 'sex': 'female', 'height': 186, 'weight': 74},</span>\n<span class=\"sd\"> {'name': 3, 'age': 48, 'sex': 'female', 'height': 173, 'weight': 78},</span>\n<span class=\"sd\"> {'name': 7, 'age': 35, 'sex': 'female', 'height': 170, 'weight': 75},</span>\n<span class=\"sd\"> {'name': 9, 'age': 43, 'sex': 'female', 'height': 198, 'weight': 78}]</span>\n<span class=\"sd\">\"\"\"</span>\n</pre>\n<h2>Supported Comparators</h2>\n<p>Project supports many comparator that can be chosen as postfix for lookup:</p>\n<ul>\n<li>Default comparator is <code>eq</code></li>\n<li><code>eq</code> makes <code>a == b</code></li>\n<li><code>exact</code> makes <code>a == b</code></li>\n<li><code>in</code> makes <code>a in b</code></li>\n<li><code>contains</code> makes <code>b in a</code></li>\n<li><code>gt</code> makes <code>a &gt; b</code></li>\n<li><code>gte</code> makes <code>a &gt;= b</code></li>\n<li><code>ge</code> makes <code>a &gt;= b</code></li>\n<li><code>lt</code> makes <code>a &lt; b</code></li>\n<li><code>lte</code> makes <code>a &lt;= b</code></li>\n<li><code>le</code> makes <code>a &lt;= b</code></li>\n</ul>\n<h2>TODOs</h2>\n<ul>\n<li>The <code>asc()</code> and <code>desc()</code> methods which works same as <code>order_by()</code> but with specified order in advance.</li>\n<li>The <code>unique_justseen()</code> and <code>unique_everseen()</code> methods to remove duplicates.\nComparison realized by passed attributes or delegated to objects equality <code>__eq__</code>.</li>\n<li>The <code>intersection()</code> method for finding common objects in two queries.\nComparison realized by passed attributes or delegated to objects equality <code>__eq__</code>.</li>\n<li>The <code>__len__</code> and <code>__getitem__</code> improvement for evaluating query only once per life cycle.</li>\n</ul>\n<h2>Contribution</h2>\n<p>Any form of contribution is appreciated. Finding issues, new ideas, new features.\nAnd of course you are welcome to create PR for this project.</p>\n\n          </div>"}, "last_serial": 6971605, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "db13b2b6865510af57dd31704705a437", "sha256": "64257748992c1680c094a145e010b3fb0d8950495f8585ef5379ef14a11cf8ab"}, "downloads": -1, "filename": "smort_query-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "db13b2b6865510af57dd31704705a437", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20048, "upload_time": "2020-04-05T16:13:35", "upload_time_iso_8601": "2020-04-05T16:13:35.950881Z", "url": "https://files.pythonhosted.org/packages/25/f0/63655a8cf63cc4bb7a776d6d9b8ff484f84eb3146078300eda3cd3a093cb/smort_query-1.0.0-py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "2a8e7233220d8e89deba36a0502e30fe", "sha256": "b08d0d78c711ae0dd0fbb615195d5bfcea077a30ce1b2e085d3a5388b95a714d"}, "downloads": -1, "filename": "smort_query-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a8e7233220d8e89deba36a0502e30fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9089, "upload_time": "2020-04-07T17:26:00", "upload_time_iso_8601": "2020-04-07T17:26:00.164065Z", "url": "https://files.pythonhosted.org/packages/aa/90/e6e2c219ea2a764322078605b1a60ea8640559833174c7d3625a8ce48a13/smort_query-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1092709c845a0aa6d00ed9c1f731c6a2", "sha256": "5f4eeac269f7d8fc223524b69df4c352b4c6bb17c274ec9bb463047b876d8aa6"}, "downloads": -1, "filename": "smort-query-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1092709c845a0aa6d00ed9c1f731c6a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12136, "upload_time": "2020-04-07T17:26:01", "upload_time_iso_8601": "2020-04-07T17:26:01.473030Z", "url": "https://files.pythonhosted.org/packages/6d/ed/0bd55012c8d824d99dbd1c4da1191529be5c6084a7a90b8ab7c0577031cf/smort-query-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2a8e7233220d8e89deba36a0502e30fe", "sha256": "b08d0d78c711ae0dd0fbb615195d5bfcea077a30ce1b2e085d3a5388b95a714d"}, "downloads": -1, "filename": "smort_query-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2a8e7233220d8e89deba36a0502e30fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9089, "upload_time": "2020-04-07T17:26:00", "upload_time_iso_8601": "2020-04-07T17:26:00.164065Z", "url": "https://files.pythonhosted.org/packages/aa/90/e6e2c219ea2a764322078605b1a60ea8640559833174c7d3625a8ce48a13/smort_query-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1092709c845a0aa6d00ed9c1f731c6a2", "sha256": "5f4eeac269f7d8fc223524b69df4c352b4c6bb17c274ec9bb463047b876d8aa6"}, "downloads": -1, "filename": "smort-query-1.1.0.tar.gz", "has_sig": false, "md5_digest": "1092709c845a0aa6d00ed9c1f731c6a2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12136, "upload_time": "2020-04-07T17:26:01", "upload_time_iso_8601": "2020-04-07T17:26:01.473030Z", "url": "https://files.pythonhosted.org/packages/6d/ed/0bd55012c8d824d99dbd1c4da1191529be5c6084a7a90b8ab7c0577031cf/smort-query-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:48 2020"}