{"info": {"author": "Rob Howley", "author_email": "howley.robert@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://opensource.org/licenses/MIT)\n\n# s3-streaming: handling (big) S3 files like regular files\nStoring, retrieving and using files in S3 is a regular activity so it should be easy. It should also ...\n* stream the data\n* have an api that is python file-io like\n* handle some of the desearization and compression stuff because why not\n\n## Install\n\n```bash\npip install s3-streaming\n```\n\n## Streaming S3 objects like regular files\n\n### The basics\nOpening and reading S3 objects is similar to regular python io. The only difference is that you need to provide a \n`boto3.session.Session` instance to handle the bucket access. \n\n```python\nimport boto3\nfrom s3streaming import s3_open\n\n\nwith s3_open('s3://bucket/key', boto_session=boto3.session.Session()) as f:\n    for next_line in f:\n        print(next_line)\n```\n\n### Injecting deserialization and compression handling in stream\nConsider a file that is `gzip` compressed and contains lines of `json`. There's some boilerplate in dealing with that,\nbut why bother? Just handle that in stream.\n\n```python\nfrom s3streaming import s3_open, deserialize, compression\n\n\nreader_settings = dict(\n  boto_session=boto3.session.Session(),\n  deserializer=deserialize.json_lines, \n  compression=compression.gzip\n)\n\nwith s3_open('s3://bucket/key.gzip', **reader_settings) as f:\n    for next_line in f:\n        print(next_line.keys())    # because the file was decompressed ...\n        print(next_line.values())  #   ... and the json is now a loaded dict!\n\n```\n\nOther `deserialize` options include \n* `csv`\n* `csv_as_dict`\n* `tsv`\n* `tsv_as_dict`\n* `string`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/robhowley/s3-streaming", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "s3-streaming", "package_url": "https://pypi.org/project/s3-streaming/", "platform": "", "project_url": "https://pypi.org/project/s3-streaming/", "project_urls": {"Homepage": "https://github.com/robhowley/s3-streaming"}, "release_url": "https://pypi.org/project/s3-streaming/0.0.3/", "requires_dist": null, "requires_python": "", "summary": "stream and (de)serialize s3 objects with no local footprint", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a></p>\n<h1>s3-streaming: handling (big) S3 files like regular files</h1>\n<p>Storing, retrieving and using files in S3 is a regular activity so it should be easy. It should also ...</p>\n<ul>\n<li>stream the data</li>\n<li>have an api that is python file-io like</li>\n<li>handle some of the desearization and compression stuff because why not</li>\n</ul>\n<h2>Install</h2>\n<pre>pip install s3-streaming\n</pre>\n<h2>Streaming S3 objects like regular files</h2>\n<h3>The basics</h3>\n<p>Opening and reading S3 objects is similar to regular python io. The only difference is that you need to provide a\n<code>boto3.session.Session</code> instance to handle the bucket access.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">boto3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">s3streaming</span> <span class=\"kn\">import</span> <span class=\"n\">s3_open</span>\n\n\n<span class=\"k\">with</span> <span class=\"n\">s3_open</span><span class=\"p\">(</span><span class=\"s1\">'s3://bucket/key'</span><span class=\"p\">,</span> <span class=\"n\">boto_session</span><span class=\"o\">=</span><span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">())</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">next_line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">next_line</span><span class=\"p\">)</span>\n</pre>\n<h3>Injecting deserialization and compression handling in stream</h3>\n<p>Consider a file that is <code>gzip</code> compressed and contains lines of <code>json</code>. There's some boilerplate in dealing with that,\nbut why bother? Just handle that in stream.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">s3streaming</span> <span class=\"kn\">import</span> <span class=\"n\">s3_open</span><span class=\"p\">,</span> <span class=\"n\">deserialize</span><span class=\"p\">,</span> <span class=\"n\">compression</span>\n\n\n<span class=\"n\">reader_settings</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n  <span class=\"n\">boto_session</span><span class=\"o\">=</span><span class=\"n\">boto3</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">Session</span><span class=\"p\">(),</span>\n  <span class=\"n\">deserializer</span><span class=\"o\">=</span><span class=\"n\">deserialize</span><span class=\"o\">.</span><span class=\"n\">json_lines</span><span class=\"p\">,</span> \n  <span class=\"n\">compression</span><span class=\"o\">=</span><span class=\"n\">compression</span><span class=\"o\">.</span><span class=\"n\">gzip</span>\n<span class=\"p\">)</span>\n\n<span class=\"k\">with</span> <span class=\"n\">s3_open</span><span class=\"p\">(</span><span class=\"s1\">'s3://bucket/key.gzip'</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">reader_settings</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">next_line</span> <span class=\"ow\">in</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">next_line</span><span class=\"o\">.</span><span class=\"n\">keys</span><span class=\"p\">())</span>    <span class=\"c1\"># because the file was decompressed ...</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">next_line</span><span class=\"o\">.</span><span class=\"n\">values</span><span class=\"p\">())</span>  <span class=\"c1\">#   ... and the json is now a loaded dict!</span>\n</pre>\n<p>Other <code>deserialize</code> options include</p>\n<ul>\n<li><code>csv</code></li>\n<li><code>csv_as_dict</code></li>\n<li><code>tsv</code></li>\n<li><code>tsv_as_dict</code></li>\n<li><code>string</code></li>\n</ul>\n\n          </div>"}, "last_serial": 6803016, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f51e615626fce9a558e114fc5d2fa487", "sha256": "ea7b8a4f6fc8f756b1c76452c6cf86e496fb8e9ab879b0379b0e1f22c04ea5e8"}, "downloads": -1, "filename": "s3_streaming-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f51e615626fce9a558e114fc5d2fa487", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3890, "upload_time": "2019-03-23T04:14:29", "upload_time_iso_8601": "2019-03-23T04:14:29.428639Z", "url": "https://files.pythonhosted.org/packages/a9/8b/a0d22ddb20f9c765ec53378ce36fdb4af9dbd985883fa2da53ed1fc33d63/s3_streaming-0.0.1-py2-none-any.whl", "yanked": false}], "0.0.1a0": [{"comment_text": "", "digests": {"md5": "249700c1ded558bf6ffeaf7a10660fc3", "sha256": "bb2da5c8f6afd938a1d2c6020d320413976b217aba0294ad99a02a207dba8f26"}, "downloads": -1, "filename": "s3_streaming-0.0.1a0-py2-none-any.whl", "has_sig": false, "md5_digest": "249700c1ded558bf6ffeaf7a10660fc3", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 3911, "upload_time": "2019-03-23T04:14:31", "upload_time_iso_8601": "2019-03-23T04:14:31.425329Z", "url": "https://files.pythonhosted.org/packages/0c/38/4cc6b8b0681d12ba74d904a11acc6ded6800ac7ae9ca46955f6769657d2e/s3_streaming-0.0.1a0-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "470963d85ae67ab7d6da33293a6b4774", "sha256": "7fdfaaa654e275d65d034bd17aa8a958a84d84fcbc8ff21abc70a59253d3f780"}, "downloads": -1, "filename": "s3-streaming-0.0.1a0.tar.gz", "has_sig": false, "md5_digest": "470963d85ae67ab7d6da33293a6b4774", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3160, "upload_time": "2019-03-23T04:14:32", "upload_time_iso_8601": "2019-03-23T04:14:32.673432Z", "url": "https://files.pythonhosted.org/packages/19/56/ac7da839610d08b17ca08f5f81b56c1ed6543def343c5dc6bcbb06d57e5c/s3-streaming-0.0.1a0.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e73cbbab34df6017be32d4a7bf02cb3b", "sha256": "ba75f2cc192ad0f11bc7e866c365b7cccba63862271ebdaf162d4a92f9854046"}, "downloads": -1, "filename": "s3_streaming-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e73cbbab34df6017be32d4a7bf02cb3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4701, "upload_time": "2020-03-12T21:57:35", "upload_time_iso_8601": "2020-03-12T21:57:35.462327Z", "url": "https://files.pythonhosted.org/packages/40/01/31c683ad495d7a4fa9c5437eea4b38d72ab3519a46898fce9f3a55e5c864/s3_streaming-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "53f47f1b9cd5595c2f460839cc690347", "sha256": "4cb79c5271e58d973fd887c7b7332033cfd0b400e98923676fc25b42d85e91d3"}, "downloads": -1, "filename": "s3_streaming-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "53f47f1b9cd5595c2f460839cc690347", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4545, "upload_time": "2020-03-13T01:27:20", "upload_time_iso_8601": "2020-03-13T01:27:20.850099Z", "url": "https://files.pythonhosted.org/packages/76/22/ea30383e94b45c333b26f3c1b4515c520466d7f76766134ac12905f08c9f/s3_streaming-0.0.3-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "53f47f1b9cd5595c2f460839cc690347", "sha256": "4cb79c5271e58d973fd887c7b7332033cfd0b400e98923676fc25b42d85e91d3"}, "downloads": -1, "filename": "s3_streaming-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "53f47f1b9cd5595c2f460839cc690347", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4545, "upload_time": "2020-03-13T01:27:20", "upload_time_iso_8601": "2020-03-13T01:27:20.850099Z", "url": "https://files.pythonhosted.org/packages/76/22/ea30383e94b45c333b26f3c1b4515c520466d7f76766134ac12905f08c9f/s3_streaming-0.0.3-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:59:34 2020"}