{"info": {"author": "Andreas Kr\u00fcger (DJ3EI)", "author_email": "dj3ei@famsik.de", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: Communications :: Ham Radio"], "description": "# This is an ADIF parser in Python.\n\n## Actual usage\n\nMain result of parsing: List of QSOs:\n\n* Each QSO is represented by one Python dict.\n* Keys in that dict are ADIF field names in upper case,\n* value for a key is whatever was found in the ADIF, as a string.\n\nOrder of QSOs in the list is same as in ADIF file.\n\nSecondary result of parsing: The ADIF headers. This is returned as a Python dict.\n\nNormally, you'd call `adif_io.read_from_file(filename)`.  But you can\nalso provide a string with an ADI-file's content, as follows:\n\n```\nimport adif_io\n\nqsos, header =  adif_io.read_from_string(\n    \"A sample ADIF content for demonstration.\\n\"\n    \"<adif_ver:5>3.1.0<eoh>\\n\"\n\n    \"<QSO_DATE:8>20190714 <TIME_ON:4>1140<CALL:5>LY0HQ\"\n    \"<MODE:2>CW<BAND:3>40M<RST_SENT:3>599<RST_RCVD:3>599\"\n    \"<STX_STRING:2>28<SRX_STRING:4>LRMD<EOR>\\n\"\n\n    \"<QSO_DATE:8>20190714<TIME_ON:4>1130<CALL:5>SE9HQ<MODE:2>CW<FREQ:1>7\"\n    \"<BAND:3>40M<RST_SENT:3>599<RST_RCVD:3>599\"\n    \"<SRX_STRING:3>SSA<DXCC:3>284<EOR>\")\n\nprint(\"QSOs: {}\\nADIF Header: {}\".format(qsos, header))\n```\n\nThis will print out\n\n\n> QSOs: [{'RST_SENT': '599', 'CALL': 'LY0HQ', 'MODE': 'CW', 'RST_RCVD': '599', 'QSO_DATE': '20190714', 'TIME_ON': '1140', 'BAND': '40M', 'STX_STRING': '28', 'SRX_STRING': 'LRMD'}, {'DXCC': '284', 'RST_SENT': '599', 'CALL': 'SE9HQ', 'MODE': 'CW', 'RST_RCVD': '599', 'BAND': '40M', 'FREQ': '7', 'QSO_DATE': '20190714', 'TIME_ON': '1130', 'SRX_STRING': 'SSA'}]     \n> ADIF Header: {'ADIF_VER': '3.1.0'}\n\n\n## Time on and time off\n\nGiven one `qso` dict, you can also have the QSO's start time calculated as a Python `datetime.datetime` value:\n\n    adif_io.time_on(qsos[0])\n\nIf your QSO data also includes `TIME_OFF` fields (and, ideally, though\nnot required, `QSO_DATE_OFF`), this will also work:\n\n    adif_io.time_off(qsos[0])\n\n## ADIF version\n\nThis was written with the ADIF version 3.1.0 in mind, but there is\nlittle ADIF-version-specific here.\n\n## Not supported: ADIF data types.\n\nThis parser knows nothing about ADIF data types or enumerations.\nEverything is a string. So in that sense, this parser is fairly simple.\n\nBut it does correcly handle things like:\n\n    <notes:66>In this QSO, we discussed ADIF and in particular the <eor> marker.\n\nSo, in that sense, this parser is somewhat sophisticated.\n\n## Only ADI.\n\nThis parser only handles ADI files. It knows nothing of the ADX file format.\n\n## For now: input only\n\nThere may be an ADIF output facility some time later.\n\n## Sample code\n\nHere is some sample code:\n\n```\nimport adif_io\n\nqsos_raw, adif_header = adif_io.read_from_file(\"log.adi\")\n\n# The QSOs are probably sorted by QSO time already, but make sure:\nfor qso in qsos_raw:\n    qso[\"t\"] = adif_io.time_on(qso)\nqsos_raw_sorted = sorted(qsos_raw, key = lambda qso: qso[\"t\"])\n```\n\nPandas / Jupyter users may want to add `import pandas as pd`\nup above and continue like this:\n\n```\nqsos = pd.DataFrame(qsos_raw_sorted)\nqsos.info()\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/andreas_krueger_py/adif_io", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "adif-io", "package_url": "https://pypi.org/project/adif-io/", "platform": "", "project_url": "https://pypi.org/project/adif-io/", "project_urls": {"Homepage": "https://gitlab.com/andreas_krueger_py/adif_io"}, "release_url": "https://pypi.org/project/adif-io/0.0.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Basic input of ADIF radio amateur log files.", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>This is an ADIF parser in Python.</h1>\n<h2>Actual usage</h2>\n<p>Main result of parsing: List of QSOs:</p>\n<ul>\n<li>Each QSO is represented by one Python dict.</li>\n<li>Keys in that dict are ADIF field names in upper case,</li>\n<li>value for a key is whatever was found in the ADIF, as a string.</li>\n</ul>\n<p>Order of QSOs in the list is same as in ADIF file.</p>\n<p>Secondary result of parsing: The ADIF headers. This is returned as a Python dict.</p>\n<p>Normally, you'd call <code>adif_io.read_from_file(filename)</code>.  But you can\nalso provide a string with an ADI-file's content, as follows:</p>\n<pre><code>import adif_io\n\nqsos, header =  adif_io.read_from_string(\n    \"A sample ADIF content for demonstration.\\n\"\n    \"&lt;adif_ver:5&gt;3.1.0&lt;eoh&gt;\\n\"\n\n    \"&lt;QSO_DATE:8&gt;20190714 &lt;TIME_ON:4&gt;1140&lt;CALL:5&gt;LY0HQ\"\n    \"&lt;MODE:2&gt;CW&lt;BAND:3&gt;40M&lt;RST_SENT:3&gt;599&lt;RST_RCVD:3&gt;599\"\n    \"&lt;STX_STRING:2&gt;28&lt;SRX_STRING:4&gt;LRMD&lt;EOR&gt;\\n\"\n\n    \"&lt;QSO_DATE:8&gt;20190714&lt;TIME_ON:4&gt;1130&lt;CALL:5&gt;SE9HQ&lt;MODE:2&gt;CW&lt;FREQ:1&gt;7\"\n    \"&lt;BAND:3&gt;40M&lt;RST_SENT:3&gt;599&lt;RST_RCVD:3&gt;599\"\n    \"&lt;SRX_STRING:3&gt;SSA&lt;DXCC:3&gt;284&lt;EOR&gt;\")\n\nprint(\"QSOs: {}\\nADIF Header: {}\".format(qsos, header))\n</code></pre>\n<p>This will print out</p>\n<blockquote>\n<p>QSOs: [{'RST_SENT': '599', 'CALL': 'LY0HQ', 'MODE': 'CW', 'RST_RCVD': '599', 'QSO_DATE': '20190714', 'TIME_ON': '1140', 'BAND': '40M', 'STX_STRING': '28', 'SRX_STRING': 'LRMD'}, {'DXCC': '284', 'RST_SENT': '599', 'CALL': 'SE9HQ', 'MODE': 'CW', 'RST_RCVD': '599', 'BAND': '40M', 'FREQ': '7', 'QSO_DATE': '20190714', 'TIME_ON': '1130', 'SRX_STRING': 'SSA'}]<br>\nADIF Header: {'ADIF_VER': '3.1.0'}</p>\n</blockquote>\n<h2>Time on and time off</h2>\n<p>Given one <code>qso</code> dict, you can also have the QSO's start time calculated as a Python <code>datetime.datetime</code> value:</p>\n<pre><code>adif_io.time_on(qsos[0])\n</code></pre>\n<p>If your QSO data also includes <code>TIME_OFF</code> fields (and, ideally, though\nnot required, <code>QSO_DATE_OFF</code>), this will also work:</p>\n<pre><code>adif_io.time_off(qsos[0])\n</code></pre>\n<h2>ADIF version</h2>\n<p>This was written with the ADIF version 3.1.0 in mind, but there is\nlittle ADIF-version-specific here.</p>\n<h2>Not supported: ADIF data types.</h2>\n<p>This parser knows nothing about ADIF data types or enumerations.\nEverything is a string. So in that sense, this parser is fairly simple.</p>\n<p>But it does correcly handle things like:</p>\n<pre><code>&lt;notes:66&gt;In this QSO, we discussed ADIF and in particular the &lt;eor&gt; marker.\n</code></pre>\n<p>So, in that sense, this parser is somewhat sophisticated.</p>\n<h2>Only ADI.</h2>\n<p>This parser only handles ADI files. It knows nothing of the ADX file format.</p>\n<h2>For now: input only</h2>\n<p>There may be an ADIF output facility some time later.</p>\n<h2>Sample code</h2>\n<p>Here is some sample code:</p>\n<pre><code>import adif_io\n\nqsos_raw, adif_header = adif_io.read_from_file(\"log.adi\")\n\n# The QSOs are probably sorted by QSO time already, but make sure:\nfor qso in qsos_raw:\n    qso[\"t\"] = adif_io.time_on(qso)\nqsos_raw_sorted = sorted(qsos_raw, key = lambda qso: qso[\"t\"])\n</code></pre>\n<p>Pandas / Jupyter users may want to add <code>import pandas as pd</code>\nup above and continue like this:</p>\n<pre><code>qsos = pd.DataFrame(qsos_raw_sorted)\nqsos.info()\n</code></pre>\n\n          </div>"}, "last_serial": 6111813, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "57a9388edb7866b12dde7d1e2079a631", "sha256": "a23066e8d72bd0ea35dc481810f94d41a656522eea27467a65fd535fa9aa720b"}, "downloads": -1, "filename": "adif_io-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "57a9388edb7866b12dde7d1e2079a631", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8753, "upload_time": "2019-11-10T11:28:23", "upload_time_iso_8601": "2019-11-10T11:28:23.293117Z", "url": "https://files.pythonhosted.org/packages/7b/05/a8754c966e7507685008c534234f2bd3322c82975f6da746eaf1d101a095/adif_io-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00eb634bbe4c753daefc7044c90a790a", "sha256": "13e1e38b725dfa86983d51f1cf13153891a43ca6cb0e35efbbee8fb9cd2ab586"}, "downloads": -1, "filename": "adif_io-0.0.2.tar.gz", "has_sig": false, "md5_digest": "00eb634bbe4c753daefc7044c90a790a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3998, "upload_time": "2019-11-10T11:28:25", "upload_time_iso_8601": "2019-11-10T11:28:25.500183Z", "url": "https://files.pythonhosted.org/packages/66/61/53c5962c5dedc94d63b998c171d9abfc1b349ccae96ba0090058e0eb824d/adif_io-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "924a45fb91f8b281fe3447ffc9fa979d", "sha256": "f137bcf396ec0740ac57f92c08fa2178619a22b7e570870eaa33a86745785126"}, "downloads": -1, "filename": "adif_io-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "924a45fb91f8b281fe3447ffc9fa979d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8754, "upload_time": "2019-11-10T14:36:52", "upload_time_iso_8601": "2019-11-10T14:36:52.579602Z", "url": "https://files.pythonhosted.org/packages/1a/62/b8899fc9e9c95b64e0ef819530f5a7b723e223d5662cd151cb5d1654495f/adif_io-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2548dd72a7448ed80eb3db0df8277f60", "sha256": "b069ab7d930ea017d44b55be7577e8cc4bd03fa7e8a286fd993178c09981150c"}, "downloads": -1, "filename": "adif_io-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2548dd72a7448ed80eb3db0df8277f60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3997, "upload_time": "2019-11-10T14:36:54", "upload_time_iso_8601": "2019-11-10T14:36:54.164780Z", "url": "https://files.pythonhosted.org/packages/35/44/c9130611e40d2537cbd785227b82072b2dfdbcc9736c5f9cf811fbc536cc/adif_io-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "924a45fb91f8b281fe3447ffc9fa979d", "sha256": "f137bcf396ec0740ac57f92c08fa2178619a22b7e570870eaa33a86745785126"}, "downloads": -1, "filename": "adif_io-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "924a45fb91f8b281fe3447ffc9fa979d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8754, "upload_time": "2019-11-10T14:36:52", "upload_time_iso_8601": "2019-11-10T14:36:52.579602Z", "url": "https://files.pythonhosted.org/packages/1a/62/b8899fc9e9c95b64e0ef819530f5a7b723e223d5662cd151cb5d1654495f/adif_io-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2548dd72a7448ed80eb3db0df8277f60", "sha256": "b069ab7d930ea017d44b55be7577e8cc4bd03fa7e8a286fd993178c09981150c"}, "downloads": -1, "filename": "adif_io-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2548dd72a7448ed80eb3db0df8277f60", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3997, "upload_time": "2019-11-10T14:36:54", "upload_time_iso_8601": "2019-11-10T14:36:54.164780Z", "url": "https://files.pythonhosted.org/packages/35/44/c9130611e40d2537cbd785227b82072b2dfdbcc9736c5f9cf811fbc536cc/adif_io-0.0.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:25 2020"}