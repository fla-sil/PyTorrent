{"info": {"author": "maisano", "author_email": "rickmaisano@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python"], "description": "Snatch: Simple Image Scraping in Python\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nConfigurable, extensible image scraping for Python. Inspired by the design and internals of Kenneth Reitz' `Requests <https://github.com/kennethreitz/requests>`_ library.\n\n.. code-block:: python\n\n    >>> from snatch import snatch\n    >>> images = snatch('http://octodex.github.com/pythocat/')\n    >>> images.extensions\n    [u'png']\n    >>> images[1]\n    <Image [\"pythocat.png\"]>\n    >>> images[1].url\n    u'http://octodex.github.com/images/pythocat.png'\n\nEasily usable, easily configurable:\n\n.. code-block:: python\n\n    >>> url = 'url/with/54/images'\n    >>> snatch(url)\n    <ImageList [54]>\n\n    # reduce your results by extension:\n    >>> _.with_extension('gif')\n    <ImageList [2]>\n\n    # or more explicitly limit your extension in the inital api call:\n    >>> snatch(url, with_extension=('gif',))\n    <ImageList [2]>\n\nIt's also very easy to hook your own filters or operations into Snatch's callbacks system. Let's say you only wanted to capture images that were larger than 250 px wide:\n\n.. code-block:: python\n\n    import requests\n    import Image\n    from StringIO import StringIO\n    from snatch import snatch\n\n    def wider_than_250(images):\n        def filter_fn(image):\n            if image.width is None:\n                res = requests.get(image.src)\n                img = Image.open(StringIO(res.content))\n                image.width = img.size[0]\n            return image.width > 250\n        return filter(filter_fn, images)\n\n    url = 'http://octodex.github.com/images/pythocat.png'\n    callbacks = {'complete': wider_than_250}\n    images = snatch(url, callbacks=callbacks)\n\n\nAnd even simpler to download all images from a URL:\n\n.. code-block:: python\n\n    import os\n    import requests\n    from snatch import snatch\n\n    directory = 'snatched-images'\n\n    if not os.path.exists(directory):\n        os.mkdir(directory)\n\n    for image in snatch('http://octodex.github.com/pythocat/'):\n        contents = requests.get(image.url).content\n        with open('%s/%s' % (directory, image.filename), 'w') as image_file:\n            image_file.write(contents)\n\n\n.. :changelog:\n\nRelease History\n---------------\n\n\n0.1.0 (2013-10-12)\n++++++++++++++++++\n\n- Initial write/scaffold, lots to fix/improve upon", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/maisano/snatch", "keywords": "image scraping", "license": "Copyright 2013 Richard Maisano\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n   http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.", "maintainer": null, "maintainer_email": null, "name": "snatch", "package_url": "https://pypi.org/project/snatch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/snatch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/maisano/snatch"}, "release_url": "https://pypi.org/project/snatch/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple image scraping in Python", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Configurable, extensible image scraping for Python. Inspired by the design and internals of Kenneth Reitz\u2019 <a href=\"https://github.com/kennethreitz/requests\" rel=\"nofollow\">Requests</a> library.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">snatch</span> <span class=\"kn\">import</span> <span class=\"n\">snatch</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">snatch</span><span class=\"p\">(</span><span class=\"s1\">'http://octodex.github.com/pythocat/'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">images</span><span class=\"o\">.</span><span class=\"n\">extensions</span>\n<span class=\"p\">[</span><span class=\"sa\">u</span><span class=\"s1\">'png'</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">images</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n<span class=\"o\">&lt;</span><span class=\"n\">Image</span> <span class=\"p\">[</span><span class=\"s2\">\"pythocat.png\"</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">images</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"sa\">u</span><span class=\"s1\">'http://octodex.github.com/images/pythocat.png'</span>\n</pre>\n<p>Easily usable, easily configurable:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'url/with/54/images'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snatch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ImageList</span> <span class=\"p\">[</span><span class=\"mi\">54</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># reduce your results by extension:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">_</span><span class=\"o\">.</span><span class=\"n\">with_extension</span><span class=\"p\">(</span><span class=\"s1\">'gif'</span><span class=\"p\">)</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ImageList</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># or more explicitly limit your extension in the inital api call:</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">snatch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">with_extension</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'gif'</span><span class=\"p\">,))</span>\n<span class=\"o\">&lt;</span><span class=\"n\">ImageList</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span><span class=\"o\">&gt;</span>\n</pre>\n<p>It\u2019s also very easy to hook your own filters or operations into Snatch\u2019s callbacks system. Let\u2019s say you only wanted to capture images that were larger than 250 px wide:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">import</span> <span class=\"nn\">Image</span>\n<span class=\"kn\">from</span> <span class=\"nn\">StringIO</span> <span class=\"kn\">import</span> <span class=\"n\">StringIO</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snatch</span> <span class=\"kn\">import</span> <span class=\"n\">snatch</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">wider_than_250</span><span class=\"p\">(</span><span class=\"n\">images</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">filter_fn</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">src</span><span class=\"p\">)</span>\n            <span class=\"n\">img</span> <span class=\"o\">=</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"n\">StringIO</span><span class=\"p\">(</span><span class=\"n\">res</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">))</span>\n            <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">=</span> <span class=\"n\">img</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n        <span class=\"k\">return</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">width</span> <span class=\"o\">&gt;</span> <span class=\"mi\">250</span>\n    <span class=\"k\">return</span> <span class=\"nb\">filter</span><span class=\"p\">(</span><span class=\"n\">filter_fn</span><span class=\"p\">,</span> <span class=\"n\">images</span><span class=\"p\">)</span>\n\n<span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://octodex.github.com/images/pythocat.png'</span>\n<span class=\"n\">callbacks</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'complete'</span><span class=\"p\">:</span> <span class=\"n\">wider_than_250</span><span class=\"p\">}</span>\n<span class=\"n\">images</span> <span class=\"o\">=</span> <span class=\"n\">snatch</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">callbacks</span><span class=\"o\">=</span><span class=\"n\">callbacks</span><span class=\"p\">)</span>\n</pre>\n<p>And even simpler to download all images from a URL:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">requests</span>\n<span class=\"kn\">from</span> <span class=\"nn\">snatch</span> <span class=\"kn\">import</span> <span class=\"n\">snatch</span>\n\n<span class=\"n\">directory</span> <span class=\"o\">=</span> <span class=\"s1\">'snatched-images'</span>\n\n<span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">exists</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">):</span>\n    <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">mkdir</span><span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">image</span> <span class=\"ow\">in</span> <span class=\"n\">snatch</span><span class=\"p\">(</span><span class=\"s1\">'http://octodex.github.com/pythocat/'</span><span class=\"p\">):</span>\n    <span class=\"n\">contents</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">url</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">content</span>\n    <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%s</span><span class=\"s1\">/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">directory</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">),</span> <span class=\"s1\">'w'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">image_file</span><span class=\"p\">:</span>\n        <span class=\"n\">image_file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">contents</span><span class=\"p\">)</span>\n</pre>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 (2013-10-12)</span></h2>\n<ul>\n<li>Initial write/scaffold, lots to fix/improve upon</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 936132, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "da988461a3cb4b5761b51bf9b0ce76d9", "sha256": "32e7e86b14de2064ee9860c4a99caa99a2a471fd5dc8201de83717d630f94aeb"}, "downloads": -1, "filename": "snatch-0.1.0.tar.gz", "has_sig": false, "md5_digest": "da988461a3cb4b5761b51bf9b0ce76d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6689, "upload_time": "2013-12-04T20:05:03", "upload_time_iso_8601": "2013-12-04T20:05:03.894845Z", "url": "https://files.pythonhosted.org/packages/25/10/9d44219c75316c268b334b3cf9becc673d811c61b04cca59d622e49684eb/snatch-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "da988461a3cb4b5761b51bf9b0ce76d9", "sha256": "32e7e86b14de2064ee9860c4a99caa99a2a471fd5dc8201de83717d630f94aeb"}, "downloads": -1, "filename": "snatch-0.1.0.tar.gz", "has_sig": false, "md5_digest": "da988461a3cb4b5761b51bf9b0ce76d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6689, "upload_time": "2013-12-04T20:05:03", "upload_time_iso_8601": "2013-12-04T20:05:03.894845Z", "url": "https://files.pythonhosted.org/packages/25/10/9d44219c75316c268b334b3cf9becc673d811c61b04cca59d622e49684eb/snatch-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:07:31 2020"}