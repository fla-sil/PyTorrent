{"info": {"author": "tetrau", "author_email": "tetrau01@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# integv\n[![pypi versions](https://img.shields.io/pypi/v/integv)](https://pypi.org/project/integv) [![python versions](https://img.shields.io/pypi/pyversions/integv)](https://pypi.org/project/integv) [![codecov](https://img.shields.io/codecov/c/github/tetrau/integv)](https://codecov.io/gh/tetrau/integv) [![unittest](https://github.com/tetrau/integv/workflows/unittest/badge.svg)](https://github.com/tetrau/integv)\n\n integv is a file integrity verifier based on the format of the file. It's \n capable of checking the integrity of multiple types of files without any \n additional information like Content-Length or checksum. The main goal of integv\n is to detect file corruption (mostly shortened) during file download caused by \n network glitch. But integv still can be used for many other purposes as well.\n\n# Installation\n\n ```bash\npip install integv\n```\n\n# Why integv\n\nSometimes when you download some media files using `requests`, a network glitch \nhappens and your file downloaded is corrupted. If there's a `Content-Length` \nheader, you can compare it to the downloaded file size. But the worst thing is \nmost of the time, media files are served using HTTP chunked transfer encoding, \nand there's no `Content-Length` header. So you don't know if the download file \nis good or not. And that's the time integv comes to help, just feed the \ndownloaded file to integv and it can verify the integrity of the file with zero \nother information like `Content-Length`. All integv needs are the type of the file.\n\nintegv has many advantages.\n\n1. integv is light, integv is written in pure python with 0 dependencies. Which \nmakes integv portable and easy to integrate into your project.\n\n2. integv is fast, integv does not try to decode the file, it just checks all the \nkey points in the file, so integv is much faster than other solutions that try\nto decode the file.\n\nHere's a comparison of verifying a 70 MB mp4 file using integv and FFmpeg.\nintegv only takes about 60 microseconds, FFmpeg takes about 10 seconds.\n\n ```\npython3 -m timeit \"import integv;integv.FileIntegrityVerifier().verify('../test.mp4')\"\n5000 loops, best of 5: 61.4 usec per loop\n\npython3 -m timeit \"import subprocess;subprocess.run('ffmpeg -v error -i ../test.mp4 -f null -', shell=True)\"\n1 loop, best of 5: 11.2 sec per loop\n```\n\n# Quick Start\n ```python\nimport integv\n\n# load a test mp4 file\nfile_path = \"./test/sample/video/sample.mp4\"\nwith open(file_path, \"rb\") as f:\n    file = f.read()\n\n# verify using the file and file_type\n# file_type can be a simple filename extension like \"mp4\" or \"jpg\"\n# or you can provide a full MIME type like \"video/mp4\" or \"image/jpeg\"\nintegv.verify(file, file_type=\"mp4\") # True\n\n# a corrupted file (in this case, shortened by one byte) will not pass the verification\nintegv.verify(file[:-1], file_type=\"mp4\") # False\n\n# the file input for the verifier can be bytes or a binary file like object\nintegv.verify(open(file_path, \"rb\"), file_type=\"mp4\") # True\n\n# it can also be a string representing a file path\n# if the file path contains a proper filename extension, the file_type is not needed.\nintegv.verify(file_path) # True\n```\n\n# Supported types\n\n### Video\n\n* **mp4:** `video/mp4`\n* **mkv:** `video/x-matroska`\n* **webm:** `video/webm`\n* **avi:** `video/vnd.avi`\n* **flv\\*:** `video/x-flv` \n\n\\* not f4v. Basically, f4v is just mp4 with a different name.\nFor f4v files, use mp4 integrity verifier.\n\n### Image\n\n* **jpeg:** `image/jpeg`\n* **png:** `image/png`\n* **gif:** `image/gif`\n* **webp** `image/webp`\n\n### Audio\n\n* **wav:** `audio/x-wav`\n* **ogg:** `audio/ogg`\n\n# Limitation of integv\nThe integv verifier only checks the file by the format information embedded in \nfile like file size in header, chunk size in chunk header, end of file markers,\netc. It does not try to decode the file which makes integv fast and simple.\nBut that also means the possibility of false negative (corrupted files can't be \ndetected). The baseline of all integv file integrity verifiers must be extremely \nsensitive to shortened files, which is very common in file downloaded from the\nnetwork. Some types of files like png contain checksum inside, which is less\nerror-prone. By all means, do not use integv for any kind of security \nverification. As a bad file which passes the verification can be simply forged.\n\n## Effectiveness of integv on different types of corruption\n### Types of corruption:\n* **S**mall **D**eletion at the **E**nd of the file. (**SDE**)\n\nA few bytes of data were deleted at the end of the file. The length of the file \nis reduced.\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY\n```\n\n* **L**arge **D**eletion at the **E**nd of the file. (**LDE**)\n\nA large chunk of data was deleted at the end of the file. The length of the \nfile is reduced.\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO\n```\n\n* **S**mall **S**ubstitution at the **E**nd of the file. (**SSE**)\n\nA few bytes of data were substituted at the end of file. The length of the file \nremains the same.\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYA\n```\n\n* **L**arge **S**ubstitution at the **E**nd of the file. (**LSE**)\n\nA large chunk of data was substituted at the end of file. The length of the \nfile remains the same.\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNAAAAAAAAAAAA\n```\n\n* **S**mall **D**eletion at a **R**andom position of the file. (**SDR**)\n\nA few bytes of data were deleted at a random position of the file. The length of \nthe file is reduced.\n\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLNOPQRSTUVWXYZ\n                                                      ^\n```\n\n* **L**arge **D**eletion at a **R**andom position of the file. (**LDR**)\n\nA large chunk of data was deleted at a random position of the file. The length \nof the file is reduced.\n\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLYZ\n                                                      ^\n```\n\n* **S**mall **S**ubstitution at a **R**andom position of the file. (**SSR**)\n\nA few bytes of data were substituted at a random position of the file. The length\nof the file remains the same.\n\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLANOPQRSTUVWXYZ\n                                                      ^\n```\n\n* **L**arge **S**ubstitution at a **R**andom position of the file. (**LSR**)\n\nA large chunk of data wass substituted at a random position of the file. The \nlength of the file remains the same.\n\n```\nOriginal file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLAAAAAAAAAAWXYZ\n                                                      ^\n```\n\n### Effectiveness Table\nFrom my personal experience, the most common types of corruption happen during\nfile downloading using `requests` or similar things are **SDE** and **LDE**.\n\n|           |    SDE   |    LDE   |     SSE    |     LSE    |     SDR    |     LDR    |     SSR    |     LSR    |\n|-----------|:--------:|:--------:|:----------:|:----------:|:----------:|:----------:|:----------:|:----------:|\n| mp4       | :smiley: | :smiley: | :frowning: |  :smiley:  |  :smiley:  |  :smiley:  | :frowning: |  :smiley:  |\n| mkv       | :smiley: | :smiley: | :frowning: |  :smiley:  |  :smiley:  |  :smiley:  | :frowning: |  :smiley:  |\n| webm      | :smiley: | :smiley: | :frowning: |  :smiley:  |  :smiley:  |  :smiley:  | :frowning: |  :smiley:  |\n| avi       | :smiley: | :smiley: | :frowning: | :frowning: |  :smiley:  |  :smiley:  | :frowning: | :frowning: |\n| flv       | :smiley: | :smiley: |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  | :frowning: |  :smiley:  |\n| jpeg      | :smiley: | :smiley: |  :smiley:  |  :smiley:  | :frowning: | :frowning: | :frowning: | :frowning: |\n| png       | :smiley: | :smiley: |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |\n| gif       | :smiley: | :smiley: |  :smiley:  |  :smiley:  | :frowning: | :frowning: | :frowning: | :frowning: |\n| webp      | :smiley: | :smiley: | :frowning: | :frowning: |  :smiley:  |  :smiley:  | :frowning: | :frowning: |\n| wav       | :smiley: | :smiley: | :frowning: | :frowning: |  :smiley:  |  :smiley:  | :frowning: | :frowning: |\n| ogg       | :smiley: | :smiley: | :frowning: |  :smiley:  |  :smiley:  |  :smiley:  | :frowning: |  :smiley:  |\n| ogg(slow) | :smiley: | :smiley: |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |  :smiley:  |\n\n# Advanced Usage\n## Using a FileIntegrityVerifier object\nYou can use a FileIntegrityVerifier object to verify your file just like \n`integv.verify`.\n\n```python\nfrom integv import FileIntegrityVerifier\n\nverifier = FileIntegrityVerifier()\nverifier.verify(\"./test/sample/video/sample.mp4\") # True\n```\n\n## Specialized File Integrity Verifier\nThere are some specialized file integrity verifier for different types of files.\nYou can find them in `integv.video`, `integv.image` and `integv.audio`. They are\nused exactly like the `FileIntegrityVerifier` except `file_type` are not needed.\n\n```python\nfrom integv.video import MP4IntegrityVerifier\n\nverifier = MP4IntegrityVerifier()\nverifier.verify(\"./test/sample/video/sample.mp4\") # True\n```\n\n## Optional `slow` argument in verifier initialization\nA boolean argument `slow` can be provided in verifier initialization. It will \nenable some sophisticated verification to eliminate false negatives. And that \nwill consume more time. The default value of `slow` is `False`. For now, only \none verifier, `OGGIntegrityVerifier` has a `slow` method of verification. \n\n```python\nfrom integv import FileIntegrityVerifier\n\nverifier = FileIntegrityVerifier()\nslow_verifier = FileIntegrityVerifier(slow=True)\n\nfile_path = \"./test/sample/audio/sample.ogg\"\nverifier.verify(file_path) # True\nslow_verifier.verify(file_path) # also True, but slower\n\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tetrau/integv", "keywords": "", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "integv", "package_url": "https://pypi.org/project/integv/", "platform": "", "project_url": "https://pypi.org/project/integv/", "project_urls": {"Homepage": "https://github.com/tetrau/integv"}, "release_url": "https://pypi.org/project/integv/1.3.0/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A file integrity verifier based on the format of the file.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>integv</h1>\n<p><a href=\"https://pypi.org/project/integv\" rel=\"nofollow\"><img alt=\"pypi versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e7f1feb7c89f5e0c4518efb32721e3c062c6cefd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f696e74656776\"></a> <a href=\"https://pypi.org/project/integv\" rel=\"nofollow\"><img alt=\"python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87f2a64901cca6c2a69053084110490d18c36b2f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f696e74656776\"></a> <a href=\"https://codecov.io/gh/tetrau/integv\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66ad45070cbf4bff081c849e5466aab1b6b1275e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f7465747261752f696e74656776\"></a> <a href=\"https://github.com/tetrau/integv\" rel=\"nofollow\"><img alt=\"unittest\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/687503ba0b3326c6867aec933c413adeb7ae3d77/68747470733a2f2f6769746875622e636f6d2f7465747261752f696e746567762f776f726b666c6f77732f756e6974746573742f62616467652e737667\"></a></p>\n<p>integv is a file integrity verifier based on the format of the file. It's\ncapable of checking the integrity of multiple types of files without any\nadditional information like Content-Length or checksum. The main goal of integv\nis to detect file corruption (mostly shortened) during file download caused by\nnetwork glitch. But integv still can be used for many other purposes as well.</p>\n<h1>Installation</h1>\n<pre>pip install integv\n</pre>\n<h1>Why integv</h1>\n<p>Sometimes when you download some media files using <code>requests</code>, a network glitch\nhappens and your file downloaded is corrupted. If there's a <code>Content-Length</code>\nheader, you can compare it to the downloaded file size. But the worst thing is\nmost of the time, media files are served using HTTP chunked transfer encoding,\nand there's no <code>Content-Length</code> header. So you don't know if the download file\nis good or not. And that's the time integv comes to help, just feed the\ndownloaded file to integv and it can verify the integrity of the file with zero\nother information like <code>Content-Length</code>. All integv needs are the type of the file.</p>\n<p>integv has many advantages.</p>\n<ol>\n<li>\n<p>integv is light, integv is written in pure python with 0 dependencies. Which\nmakes integv portable and easy to integrate into your project.</p>\n</li>\n<li>\n<p>integv is fast, integv does not try to decode the file, it just checks all the\nkey points in the file, so integv is much faster than other solutions that try\nto decode the file.</p>\n</li>\n</ol>\n<p>Here's a comparison of verifying a 70 MB mp4 file using integv and FFmpeg.\nintegv only takes about 60 microseconds, FFmpeg takes about 10 seconds.</p>\n<pre><code>python3 -m timeit \"import integv;integv.FileIntegrityVerifier().verify('../test.mp4')\"\n5000 loops, best of 5: 61.4 usec per loop\n\npython3 -m timeit \"import subprocess;subprocess.run('ffmpeg -v error -i ../test.mp4 -f null -', shell=True)\"\n1 loop, best of 5: 11.2 sec per loop\n</code></pre>\n<h1>Quick Start</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">integv</span>\n\n<span class=\"c1\"># load a test mp4 file</span>\n<span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./test/sample/video/sample.mp4\"</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n   <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># verify using the file and file_type</span>\n<span class=\"c1\"># file_type can be a simple filename extension like \"mp4\" or \"jpg\"</span>\n<span class=\"c1\"># or you can provide a full MIME type like \"video/mp4\" or \"image/jpeg\"</span>\n<span class=\"n\">integv</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">file_type</span><span class=\"o\">=</span><span class=\"s2\">\"mp4\"</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n\n<span class=\"c1\"># a corrupted file (in this case, shortened by one byte) will not pass the verification</span>\n<span class=\"n\">integv</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">file_type</span><span class=\"o\">=</span><span class=\"s2\">\"mp4\"</span><span class=\"p\">)</span> <span class=\"c1\"># False</span>\n\n<span class=\"c1\"># the file input for the verifier can be bytes or a binary file like object</span>\n<span class=\"n\">integv</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">),</span> <span class=\"n\">file_type</span><span class=\"o\">=</span><span class=\"s2\">\"mp4\"</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n\n<span class=\"c1\"># it can also be a string representing a file path</span>\n<span class=\"c1\"># if the file path contains a proper filename extension, the file_type is not needed.</span>\n<span class=\"n\">integv</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h1>Supported types</h1>\n<h3>Video</h3>\n<ul>\n<li><strong>mp4:</strong> <code>video/mp4</code></li>\n<li><strong>mkv:</strong> <code>video/x-matroska</code></li>\n<li><strong>webm:</strong> <code>video/webm</code></li>\n<li><strong>avi:</strong> <code>video/vnd.avi</code></li>\n<li><strong>flv*:</strong> <code>video/x-flv</code></li>\n</ul>\n<p>* not f4v. Basically, f4v is just mp4 with a different name.\nFor f4v files, use mp4 integrity verifier.</p>\n<h3>Image</h3>\n<ul>\n<li><strong>jpeg:</strong> <code>image/jpeg</code></li>\n<li><strong>png:</strong> <code>image/png</code></li>\n<li><strong>gif:</strong> <code>image/gif</code></li>\n<li><strong>webp</strong> <code>image/webp</code></li>\n</ul>\n<h3>Audio</h3>\n<ul>\n<li><strong>wav:</strong> <code>audio/x-wav</code></li>\n<li><strong>ogg:</strong> <code>audio/ogg</code></li>\n</ul>\n<h1>Limitation of integv</h1>\n<p>The integv verifier only checks the file by the format information embedded in\nfile like file size in header, chunk size in chunk header, end of file markers,\netc. It does not try to decode the file which makes integv fast and simple.\nBut that also means the possibility of false negative (corrupted files can't be\ndetected). The baseline of all integv file integrity verifiers must be extremely\nsensitive to shortened files, which is very common in file downloaded from the\nnetwork. Some types of files like png contain checksum inside, which is less\nerror-prone. By all means, do not use integv for any kind of security\nverification. As a bad file which passes the verification can be simply forged.</p>\n<h2>Effectiveness of integv on different types of corruption</h2>\n<h3>Types of corruption:</h3>\n<ul>\n<li><strong>S</strong>mall <strong>D</strong>eletion at the <strong>E</strong>nd of the file. (<strong>SDE</strong>)</li>\n</ul>\n<p>A few bytes of data were deleted at the end of the file. The length of the file\nis reduced.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXY\n</code></pre>\n<ul>\n<li><strong>L</strong>arge <strong>D</strong>eletion at the <strong>E</strong>nd of the file. (<strong>LDE</strong>)</li>\n</ul>\n<p>A large chunk of data was deleted at the end of the file. The length of the\nfile is reduced.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNO\n</code></pre>\n<ul>\n<li><strong>S</strong>mall <strong>S</strong>ubstitution at the <strong>E</strong>nd of the file. (<strong>SSE</strong>)</li>\n</ul>\n<p>A few bytes of data were substituted at the end of file. The length of the file\nremains the same.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYA\n</code></pre>\n<ul>\n<li><strong>L</strong>arge <strong>S</strong>ubstitution at the <strong>E</strong>nd of the file. (<strong>LSE</strong>)</li>\n</ul>\n<p>A large chunk of data was substituted at the end of file. The length of the\nfile remains the same.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNAAAAAAAAAAAA\n</code></pre>\n<ul>\n<li><strong>S</strong>mall <strong>D</strong>eletion at a <strong>R</strong>andom position of the file. (<strong>SDR</strong>)</li>\n</ul>\n<p>A few bytes of data were deleted at a random position of the file. The length of\nthe file is reduced.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLNOPQRSTUVWXYZ\n                                                      ^\n</code></pre>\n<ul>\n<li><strong>L</strong>arge <strong>D</strong>eletion at a <strong>R</strong>andom position of the file. (<strong>LDR</strong>)</li>\n</ul>\n<p>A large chunk of data was deleted at a random position of the file. The length\nof the file is reduced.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLYZ\n                                                      ^\n</code></pre>\n<ul>\n<li><strong>S</strong>mall <strong>S</strong>ubstitution at a <strong>R</strong>andom position of the file. (<strong>SSR</strong>)</li>\n</ul>\n<p>A few bytes of data were substituted at a random position of the file. The length\nof the file remains the same.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLANOPQRSTUVWXYZ\n                                                      ^\n</code></pre>\n<ul>\n<li><strong>L</strong>arge <strong>S</strong>ubstitution at a <strong>R</strong>andom position of the file. (<strong>LSR</strong>)</li>\n</ul>\n<p>A large chunk of data wass substituted at a random position of the file. The\nlength of the file remains the same.</p>\n<pre><code>Original file:  ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLMNOPQRSTUVWXYZ\nCorrupted file: ABCDEFGHIJKLMNOPQRSTUVWXYZABCDEFGHIJKLAAAAAAAAAAWXYZ\n                                                      ^\n</code></pre>\n<h3>Effectiveness Table</h3>\n<p>From my personal experience, the most common types of corruption happen during\nfile downloading using <code>requests</code> or similar things are <strong>SDE</strong> and <strong>LDE</strong>.</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th align=\"center\">SDE</th>\n<th align=\"center\">LDE</th>\n<th align=\"center\">SSE</th>\n<th align=\"center\">LSE</th>\n<th align=\"center\">SDR</th>\n<th align=\"center\">LDR</th>\n<th align=\"center\">SSR</th>\n<th align=\"center\">LSR</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>mp4</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>mkv</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>webm</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>avi</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n</tr>\n<tr>\n<td>flv</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>jpeg</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n</tr>\n<tr>\n<td>png</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>gif</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n</tr>\n<tr>\n<td>webp</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n</tr>\n<tr>\n<td>wav</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:frowning:</td>\n</tr>\n<tr>\n<td>ogg</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:frowning:</td>\n<td align=\"center\">:smiley:</td>\n</tr>\n<tr>\n<td>ogg(slow)</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n<td align=\"center\">:smiley:</td>\n</tr></tbody></table>\n<h1>Advanced Usage</h1>\n<h2>Using a FileIntegrityVerifier object</h2>\n<p>You can use a FileIntegrityVerifier object to verify your file just like\n<code>integv.verify</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">integv</span> <span class=\"kn\">import</span> <span class=\"n\">FileIntegrityVerifier</span>\n\n<span class=\"n\">verifier</span> <span class=\"o\">=</span> <span class=\"n\">FileIntegrityVerifier</span><span class=\"p\">()</span>\n<span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"s2\">\"./test/sample/video/sample.mp4\"</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h2>Specialized File Integrity Verifier</h2>\n<p>There are some specialized file integrity verifier for different types of files.\nYou can find them in <code>integv.video</code>, <code>integv.image</code> and <code>integv.audio</code>. They are\nused exactly like the <code>FileIntegrityVerifier</code> except <code>file_type</code> are not needed.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">integv.video</span> <span class=\"kn\">import</span> <span class=\"n\">MP4IntegrityVerifier</span>\n\n<span class=\"n\">verifier</span> <span class=\"o\">=</span> <span class=\"n\">MP4IntegrityVerifier</span><span class=\"p\">()</span>\n<span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"s2\">\"./test/sample/video/sample.mp4\"</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n</pre>\n<h2>Optional <code>slow</code> argument in verifier initialization</h2>\n<p>A boolean argument <code>slow</code> can be provided in verifier initialization. It will\nenable some sophisticated verification to eliminate false negatives. And that\nwill consume more time. The default value of <code>slow</code> is <code>False</code>. For now, only\none verifier, <code>OGGIntegrityVerifier</code> has a <code>slow</code> method of verification.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">integv</span> <span class=\"kn\">import</span> <span class=\"n\">FileIntegrityVerifier</span>\n\n<span class=\"n\">verifier</span> <span class=\"o\">=</span> <span class=\"n\">FileIntegrityVerifier</span><span class=\"p\">()</span>\n<span class=\"n\">slow_verifier</span> <span class=\"o\">=</span> <span class=\"n\">FileIntegrityVerifier</span><span class=\"p\">(</span><span class=\"n\">slow</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"n\">file_path</span> <span class=\"o\">=</span> <span class=\"s2\">\"./test/sample/audio/sample.ogg\"</span>\n<span class=\"n\">verifier</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span> <span class=\"c1\"># True</span>\n<span class=\"n\">slow_verifier</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"p\">(</span><span class=\"n\">file_path</span><span class=\"p\">)</span> <span class=\"c1\"># also True, but slower</span>\n</pre>\n\n          </div>"}, "last_serial": 6698947, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c71ccff6b6e248d56377a197eb74f208", "sha256": "355369bb217674d805b4450196d8d68abd4eba2b5370a62487cd582c5574c183"}, "downloads": -1, "filename": "integv-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c71ccff6b6e248d56377a197eb74f208", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 22721, "upload_time": "2020-02-22T19:16:20", "upload_time_iso_8601": "2020-02-22T19:16:20.830634Z", "url": "https://files.pythonhosted.org/packages/47/19/c77eff105a02ed553a77f934be9147f5922ff06efe3cca99e0c0893f17b6/integv-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "af1551c7bbee9ae3dd51a33eb35d3738", "sha256": "61ee03df5f8eca5e5c4718dca81b1fead44ed1a6a55b6d6bafdcf2c588ee65c9"}, "downloads": -1, "filename": "integv-1.0.0.tar.gz", "has_sig": false, "md5_digest": "af1551c7bbee9ae3dd51a33eb35d3738", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10535, "upload_time": "2020-02-22T19:16:23", "upload_time_iso_8601": "2020-02-22T19:16:23.157181Z", "url": "https://files.pythonhosted.org/packages/a4/c7/af3145b3d1d5ac6908f40f69428a3a31b78a36c05bcba27a5c07a4fa73c0/integv-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "cd9b73e53ae5bcbb07b6a4dfb55ea42d", "sha256": "08ce53340c6b2e3a85fac1290c10455b31ec68fbdf6389d7b08f5b9ab33de01f"}, "downloads": -1, "filename": "integv-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "cd9b73e53ae5bcbb07b6a4dfb55ea42d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23017, "upload_time": "2020-02-22T19:35:37", "upload_time_iso_8601": "2020-02-22T19:35:37.210347Z", "url": "https://files.pythonhosted.org/packages/a4/36/7c604d930270a6101a09531f51a0b5297e9d0c4021b58688fb5c2d980a6b/integv-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd138f588abaa7f25ab21ab032555c24", "sha256": "6ac8391ef3700f24ce5560c08ee6db9fc39bbeabbe79c7089aabaa40971004b2"}, "downloads": -1, "filename": "integv-1.0.1.tar.gz", "has_sig": false, "md5_digest": "bd138f588abaa7f25ab21ab032555c24", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10721, "upload_time": "2020-02-22T19:35:41", "upload_time_iso_8601": "2020-02-22T19:35:41.836546Z", "url": "https://files.pythonhosted.org/packages/5e/e8/667256b04e26e922661e30b436f0c9f4c7f2d79c7b2e2473663c67d5490f/integv-1.0.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "18bd24d32b8f1149516b72104dccbe33", "sha256": "c0119e035de935bff06d9feb44b7fc619188ea2f75d49ddb429cb57f2973d134"}, "downloads": -1, "filename": "integv-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "18bd24d32b8f1149516b72104dccbe33", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23070, "upload_time": "2020-02-23T09:52:14", "upload_time_iso_8601": "2020-02-23T09:52:14.066492Z", "url": "https://files.pythonhosted.org/packages/19/4b/e398b5f90c03b543b186d60842a6d267020e105f97f409a44432b55590ab/integv-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f24817d92cfb815244f1b2c1d5fe846", "sha256": "7005fbcec56b9d844a8fd1ae5ae096da4c939d28e0e834afdc2f54078466728e"}, "downloads": -1, "filename": "integv-1.1.1.tar.gz", "has_sig": false, "md5_digest": "7f24817d92cfb815244f1b2c1d5fe846", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 10797, "upload_time": "2020-02-23T09:52:16", "upload_time_iso_8601": "2020-02-23T09:52:16.104040Z", "url": "https://files.pythonhosted.org/packages/07/61/940c36e65485751490b8789b9a45a9f9df94e5f3452c3cdfb16337ac379f/integv-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "06e54b7a903ea5a68675a94427f606d3", "sha256": "da613127a48bdacaa21a4b043b9e69801ceb1497edeb2977473582a32a9510af"}, "downloads": -1, "filename": "integv-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06e54b7a903ea5a68675a94427f606d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 23354, "upload_time": "2020-02-24T06:39:29", "upload_time_iso_8601": "2020-02-24T06:39:29.669730Z", "url": "https://files.pythonhosted.org/packages/be/72/8b853f76b9a8cde80ebd48914a5ec5b203bde5951d0f0f7b4788f3102234/integv-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a435bb6f2c71a70b71c5a94aa8bcceb5", "sha256": "c74446e51f7e26aa351ffd76af19a8f2fe701db0737e00f6d5999f302a9d3ee1"}, "downloads": -1, "filename": "integv-1.2.0.tar.gz", "has_sig": false, "md5_digest": "a435bb6f2c71a70b71c5a94aa8bcceb5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11193, "upload_time": "2020-02-24T06:39:31", "upload_time_iso_8601": "2020-02-24T06:39:31.294825Z", "url": "https://files.pythonhosted.org/packages/03/96/abbf559c9079efa1745fc34f18fa8ef35f7f367ffd6694c9b8c224049cec/integv-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "bb7d997531e10d4837ae6ff2db288f54", "sha256": "8993b9da27abbe4407fb9b214fe1c43990c20cabe33f7166afdb4aef8201778b"}, "downloads": -1, "filename": "integv-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb7d997531e10d4837ae6ff2db288f54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24796, "upload_time": "2020-02-25T21:19:10", "upload_time_iso_8601": "2020-02-25T21:19:10.748274Z", "url": "https://files.pythonhosted.org/packages/0d/47/6ef13c171e23952cf2c25c984e9f65d246baeba9cfdc6b7a0e10407d6dee/integv-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0484bec2efca73e277dd2bdfecdb29e2", "sha256": "45b86c9bc6bbfce8badc00ae5cdd57878a5a56e2dee9dc416c80001ca1a245ae"}, "downloads": -1, "filename": "integv-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0484bec2efca73e277dd2bdfecdb29e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14172, "upload_time": "2020-02-25T21:19:12", "upload_time_iso_8601": "2020-02-25T21:19:12.540459Z", "url": "https://files.pythonhosted.org/packages/9c/98/25cfc16679434c810c97b782c516ae611193b95976e2e748657b2278a071/integv-1.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bb7d997531e10d4837ae6ff2db288f54", "sha256": "8993b9da27abbe4407fb9b214fe1c43990c20cabe33f7166afdb4aef8201778b"}, "downloads": -1, "filename": "integv-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "bb7d997531e10d4837ae6ff2db288f54", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 24796, "upload_time": "2020-02-25T21:19:10", "upload_time_iso_8601": "2020-02-25T21:19:10.748274Z", "url": "https://files.pythonhosted.org/packages/0d/47/6ef13c171e23952cf2c25c984e9f65d246baeba9cfdc6b7a0e10407d6dee/integv-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0484bec2efca73e277dd2bdfecdb29e2", "sha256": "45b86c9bc6bbfce8badc00ae5cdd57878a5a56e2dee9dc416c80001ca1a245ae"}, "downloads": -1, "filename": "integv-1.3.0.tar.gz", "has_sig": false, "md5_digest": "0484bec2efca73e277dd2bdfecdb29e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14172, "upload_time": "2020-02-25T21:19:12", "upload_time_iso_8601": "2020-02-25T21:19:12.540459Z", "url": "https://files.pythonhosted.org/packages/9c/98/25cfc16679434c810c97b782c516ae611193b95976e2e748657b2278a071/integv-1.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:33 2020"}