{"info": {"author": "Fabricio Roberto reinert", "author_email": "fabricio.reinert@live.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3.6"], "description": "# QueryOEM\nQuery OEM for information about workstations, laptops, servers and others.\n\n# How to Install\nJust issue ```pip install QueryOEM```\n\n# Supported OEM's\nOnly DELL is supported at this moment\n\n# Usage\n\nThere are two approaches. You can embbed it to your code or use it on the terminal.\n\n## CLI usage\n\nUse it on the terminal makes the task easier to achive\n\n### Query assets from terminal\nYou can query tags using ```python3 -m QueryOEM.cli --tag output=<output> format=<format> vendor=<vendor> <servicetags>```\n\nArguments\n- (Required) tags - Service tags, separated by space\n- (Required) output - Path to file to be saved\n- (Optional) format - Output format (Default is JSON - Only JSON available)\n- (Optional) vendor - OEM name (Default is Dell. Only Dell available)\n\nExample\n`python  -m QueryOEM.cli --tag output=~/my_assets format=json vendor=dell A0DA0CR A1DA1CR A2DA2CR`\n`python  -m QueryOEM.cli --tag output=~/my_assets A0DA0CR A1DA1CR A2DA2CR`\n`python  -m QueryOEM.cli --tag output=C:/temp/my_assets A0DA0CR`\n\n### Query assets from a text file\n\nYou can also create a tags.txt file, add 1 tag per line and query them in one single shot\n\nArguments\n- (Required) origin - Path to file containing service tags (1 per line)\n- (Required) output - Path to output file: Path to save output file\n- (Optional) vendor - Vendor - Default Dell\n- (Optional) format - Output format - Default JSON \n\n`python3 -m QueryOEM.cli --file origin=<text_file> output=<c:/temp/myfile>`\n\nExample:\n\ntags.txt\n```\nABC1234\nQWE1234\nIOP4321\n```\n\nThe run this code on the terminal\n```python -m QueryOEM.cli --file origin=tags.txt output=c:/temp/my_assets```\n\n## Embedded to your code\n\nThere are two diferent classes. **QueryOEM** will query a single equipment and **MultipleQueryOEM** is a wrapper\nwhich will return a list of **QueryOEM** instances.\n\nCheck the following usage for both classes:\n\n### Quering a single equipment\n```python\nimport QueryOEM\n\nmy_laptop = QueryOEM.QueryOEM(PART_NUMBER=\"XXXXXX\")\nmy_laptop.get_from_dell()\n\n# Return a dictionary\nprint(my_laptop.dell_data)\n\n# Return a JSON and save it into a file\nfopen = open('c:/temp/my_laptop.json', 'w')\nfopen.write(my_laptop.json_from_dell())\nfopen.close()\n```\n\n### Quering multiple equipments\n```python\nimport QueryOEM\n\nassets_list = MultipleQueryOEM(['XXXXXX','YYYYYY','WWWWWW','ZZZZZZ'])\nassets_list.get_from_dell()\n\n# Loop over the queried equipments\nfor i in assets_list.results:\n  print(i)\n\n# Retrieve a JSON containing all equipments\nJSON = assets_list.json_from_dell()\nfopen = open('c:/temp/assets_list.json', 'w')\nfopen.write(JSON)\nfopen.close()\n```\n\n\n# QueryOEM\nQuery OEM for information about workstations, laptops, servers and others.\n\n1.0.0 First Release, 07/04/2017\n- Installable module\n- Support Dell OEM\n- Query single/multuple service tags\n- Export to json\n\n1.0.1 07/05/2017\n- Dell: Added Send date from vendor on the response\n\n1.0.2 12/09/2017\n- Added CLI support by using python -m QueryOEM.cli\n\n1.0.3 12/09/2017\n- Small changes on CLI help text\n\n1.0.4 19/09/2017\n- CLI for --tag can be used to output a JSON file instead of terminal display\n- Added new arguments to --tag to fit new feature\n### To Do\n- Test suite\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/FRReinert/StationScrapping", "keywords": "OEM,Dell,Python,Web,Scrapping,JSON", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "QueryOEM", "package_url": "https://pypi.org/project/QueryOEM/", "platform": "", "project_url": "https://pypi.org/project/QueryOEM/", "project_urls": {"Homepage": "https://github.com/FRReinert/StationScrapping"}, "release_url": "https://pypi.org/project/QueryOEM/1.0.4/", "requires_dist": ["beautifulsoup4", "requests"], "requires_python": "", "summary": "Query OEM for product informations", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            # QueryOEM<br>Query OEM for information about workstations, laptops, servers and others.<br><br># How to Install<br>Just issue ```pip install QueryOEM```<br><br># Supported OEM's<br>Only DELL is supported at this moment<br><br># Usage<br><br>There are two approaches. You can embbed it to your code or use it on the terminal.<br><br>## CLI usage<br><br>Use it on the terminal makes the task easier to achive<br><br>### Query assets from terminal<br>You can query tags using ```python3 -m QueryOEM.cli --tag output=&lt;output&gt; format=&lt;format&gt; vendor=&lt;vendor&gt; &lt;servicetags&gt;```<br><br>Arguments<br>- (Required) tags - Service tags, separated by space<br>- (Required) output - Path to file to be saved<br>- (Optional) format - Output format (Default is JSON - Only JSON available)<br>- (Optional) vendor - OEM name (Default is Dell. Only Dell available)<br><br>Example<br>`python  -m QueryOEM.cli --tag output=~/my_assets format=json vendor=dell A0DA0CR A1DA1CR A2DA2CR`<br>`python  -m QueryOEM.cli --tag output=~/my_assets A0DA0CR A1DA1CR A2DA2CR`<br>`python  -m QueryOEM.cli --tag output=C:/temp/my_assets A0DA0CR`<br><br>### Query assets from a text file<br><br>You can also create a tags.txt file, add 1 tag per line and query them in one single shot<br><br>Arguments<br>- (Required) origin - Path to file containing service tags (1 per line)<br>- (Required) output - Path to output file: Path to save output file<br>- (Optional) vendor - Vendor - Default Dell<br>- (Optional) format - Output format - Default JSON <br><br>`python3 -m QueryOEM.cli --file origin=&lt;text_file&gt; output=&lt;c:/temp/myfile&gt;`<br><br>Example:<br><br>tags.txt<br>```<br>ABC1234<br>QWE1234<br>IOP4321<br>```<br><br>The run this code on the terminal<br>```python -m QueryOEM.cli --file origin=tags.txt output=c:/temp/my_assets```<br><br>## Embedded to your code<br><br>There are two diferent classes. **QueryOEM** will query a single equipment and **MultipleQueryOEM** is a wrapper<br>which will return a list of **QueryOEM** instances.<br><br>Check the following usage for both classes:<br><br>### Quering a single equipment<br>```python<br>import QueryOEM<br><br>my_laptop = QueryOEM.QueryOEM(PART_NUMBER=\"XXXXXX\")<br>my_laptop.get_from_dell()<br><br># Return a dictionary<br>print(my_laptop.dell_data)<br><br># Return a JSON and save it into a file<br>fopen = open('c:/temp/my_laptop.json', 'w')<br>fopen.write(my_laptop.json_from_dell())<br>fopen.close()<br>```<br><br>### Quering multiple equipments<br>```python<br>import QueryOEM<br><br>assets_list = MultipleQueryOEM(['XXXXXX','YYYYYY','WWWWWW','ZZZZZZ'])<br>assets_list.get_from_dell()<br><br># Loop over the queried equipments<br>for i in assets_list.results:<br>  print(i)<br><br># Retrieve a JSON containing all equipments<br>JSON = assets_list.json_from_dell()<br>fopen = open('c:/temp/assets_list.json', 'w')<br>fopen.write(JSON)<br>fopen.close()<br>```<br><br><br># QueryOEM<br>Query OEM for information about workstations, laptops, servers and others.<br><br>1.0.0 First Release, 07/04/2017<br>- Installable module<br>- Support Dell OEM<br>- Query single/multuple service tags<br>- Export to json<br><br>1.0.1 07/05/2017<br>- Dell: Added Send date from vendor on the response<br><br>1.0.2 12/09/2017<br>- Added CLI support by using python -m QueryOEM.cli<br><br>1.0.3 12/09/2017<br>- Small changes on CLI help text<br><br>1.0.4 19/09/2017<br>- CLI for --tag can be used to output a JSON file instead of terminal display<br>- Added new arguments to --tag to fit new feature<br>### To Do<br>- Test suite<br><br>\n          </div>"}, "last_serial": 3185800, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "d36effbcbbf27899f48ccb0a2f24c5ba", "sha256": "c03b28081b78f308607c66d4c6c1191fb7723f5647c0a49445fead0dcc0b3dd7"}, "downloads": -1, "filename": "QueryOEM-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d36effbcbbf27899f48ccb0a2f24c5ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9000, "upload_time": "2017-07-04T18:06:02", "upload_time_iso_8601": "2017-07-04T18:06:02.138894Z", "url": "https://files.pythonhosted.org/packages/b7/63/3b1976f796b218ebc5e85eb3ab917e852d7cdf0dd7543151ac6550773a72/QueryOEM-1.0.0-py3-none-any.whl", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b334440b8a7c2a80ef2a17ccfc6a8c78", "sha256": "a9d41493b3978430db95921d5fc4f6d627f8fb003391c6adfe7da113a98f56c1"}, "downloads": -1, "filename": "QueryOEM-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b334440b8a7c2a80ef2a17ccfc6a8c78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10016, "upload_time": "2017-07-05T13:52:03", "upload_time_iso_8601": "2017-07-05T13:52:03.212322Z", "url": "https://files.pythonhosted.org/packages/f2/cc/ff7927ab28fb8aefaf6ee4f16b8a7af579cb3182dfb961c90d1d60108427/QueryOEM-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "054d92e8ff95c2d0973a8fc821dd88fe", "sha256": "03ceaf40e9a2818a1ef5502d7951d1c073ca1c10d3a4996de87c13d4808dfd97"}, "downloads": -1, "filename": "QueryOEM-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "054d92e8ff95c2d0973a8fc821dd88fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12336, "upload_time": "2017-09-12T16:58:28", "upload_time_iso_8601": "2017-09-12T16:58:28.940793Z", "url": "https://files.pythonhosted.org/packages/fe/e4/455cd666b65e286adc454ff7d0936e70863da0f3c8706e5fff79f4c8b65a/QueryOEM-1.0.2-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "58990ffb71462125566266030b5c1d83", "sha256": "f1f5b69c1bd5f84c698b4e201b44667f4b13a70e066fb0dbe25d99b80f4a6dd5"}, "downloads": -1, "filename": "QueryOEM-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "58990ffb71462125566266030b5c1d83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13075, "upload_time": "2017-09-12T17:12:13", "upload_time_iso_8601": "2017-09-12T17:12:13.866898Z", "url": "https://files.pythonhosted.org/packages/da/56/7bb906757600ed8982914d8d21cab09d9a102a026eef03402a9fe9fb3d3b/QueryOEM-1.0.3-py3-none-any.whl", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "91ff5b4dc6767e4dfeb2b0de9ba885f7", "sha256": "97ff288c4c1133c34ae67dc0b74bfe447e3844f803ef8457d070b4ecdb05700e"}, "downloads": -1, "filename": "QueryOEM-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "91ff5b4dc6767e4dfeb2b0de9ba885f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13690, "upload_time": "2017-09-19T15:11:58", "upload_time_iso_8601": "2017-09-19T15:11:58.545554Z", "url": "https://files.pythonhosted.org/packages/f2/08/3194dc3abdbd9e57548d08324ce5e3ce0961c7528eb082429d97ba504bf6/QueryOEM-1.0.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "91ff5b4dc6767e4dfeb2b0de9ba885f7", "sha256": "97ff288c4c1133c34ae67dc0b74bfe447e3844f803ef8457d070b4ecdb05700e"}, "downloads": -1, "filename": "QueryOEM-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "91ff5b4dc6767e4dfeb2b0de9ba885f7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13690, "upload_time": "2017-09-19T15:11:58", "upload_time_iso_8601": "2017-09-19T15:11:58.545554Z", "url": "https://files.pythonhosted.org/packages/f2/08/3194dc3abdbd9e57548d08324ce5e3ce0961c7528eb082429d97ba504bf6/QueryOEM-1.0.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:37 2020"}