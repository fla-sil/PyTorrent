{"info": {"author": "Steve Johnson", "author_email": "steve@steveasleep.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "clubsandwich\n============\n\n**A roguelike framework for Python 3 using**\n`BearLibTerminal <http://foo.wyrd.name/en:bearlibterminal>`_\n\n`Source code <https://github.com/irskep/clubsandwich>`_\n\n`API docs <http://steveasleep.com/clubsandwich/>`_\n\nWhat is this?\n-------------\n\nImagine you want to write a roguelike, you don't want to roll your own\nframework from scratch, and you want to use Python.\n\nThe most mature option for doing this is\n`libtcod-cffi <https://pypi.python.org/pypi/libtcod-cffi>`_, which is a\nkitchen sink of roguelike development utilities like terminal graphics,\npathfinding, random numbers, noise generators, config file parsers, and data\nstructures. But it's pretty heavy, the docs aren't great, and it's an icky\nC API. And while it covers a lot of things you need for a roguelike, it doesn't\nhelp you much with your UI or state management.\n\nIf that sounds like a decent tradeoff, go try ``libtcod-cffi`` and be happy!\nBut there's another library,\n`BearLibTerminal <http://foo.wyrd.name/en:bearlibterminal>`_, that only\nhandles terminal graphics. It's tiny and understandable. Clubsandwich\nbuilds on BearLibTerminal (BLT...) to add a nice API, state management, easy\nUI, and some other helpful stuff.\n\nFeatures\n~~~~~~~~\n\nScroll down for examples.\n\n* Event loop\n* Scene manager\n* Geometry data structures\n* Convenience functions\n* UIKit-like interface framework\n* Script runner to help you iterate quickly\n\nDependencies\n~~~~~~~~~~~~\n\n* Python 3.4+\n* And BearLibTerminal, of course\n\nInstallation\n------------\n\nThis package is not yet on PyPI. It is under heavy development. But you can\nexpect reasonable API stability!\n\n.. code:: python\n\n    pip install -e 'git://github.com/irskep/clubsandwich.git@master#egg=clubsandwich'\n\n\n.. image:: readme_images/screenshot1.png\n\n.. image:: readme_images/screenshot2.png\n\nFeature examples\n----------------\n\nAn event loop\n~~~~~~~~~~~~~\n\nclubsandwich uses the `asyncio`_ library to run an asynchronous update loop.\nThe ``terminal_read(val)`` method is called whenever events are in the queue.\n``terminal_update()`` is called every frame.\n\n.. _asyncio: https://docs.python.org/3/library/asyncio.html\n\n.. code:: python\n\n    from clubsandwich.loop import BearLibTerminalEventLoop\n\n    class BasicLoop(BearLibTerminalEventLoop):\n        def terminal_read(self, val):\n            print(\"User pressed a key:\", val)\n\n        def terminal_update(self):\n            # this is called every frame\n            self.draw()\n\n\n    if __name__ == '__main__':\n        BasicLoop().run()\n\nA scene manager\n~~~~~~~~~~~~~~~\n\nMost games have more than one screen! This simple \"director\" object manages\nthem for you in a really obvious way.\n\n.. code:: python\n\n    from bearlibterminal import terminal\n    from clubsandwich.director import DirectorLoop, Scene\n\n    class BasicLoop2(DirectorLoop):\n        def get_initial_scene(self):\n            return MainMenuScene()\n\n    class MainMenuScene(Scene):\n        def terminal_update(self):\n            print(0, 0, \"Press Enter to begin game, Esc to quit\")\n\n        def terminal_read(self, val):\n            if val == terminal.TK_ENTER:\n                self.director.push_scene(GameScene())\n            elif val == terminal.TK_ESCAPE:\n                self.director.pop_scene()\n\n    class GameScene(Scene):\n        def terminal_update(self):\n            print(0, 0, \"You are playing the game, it is so fun! Press Esc to stop.\")\n\n        def terminal_read(self, val):\n            if val == terminal.TK_ESCAPE:\n                self.director.pop_scene()\n\n    if __name__ == '__main__':\n        BasicLoop2().run()\n\nA geometry library\n~~~~~~~~~~~~~~~~~~\n\nBasic data structures for ``Rect``, ``Point``, and ``Size``, and a very thin\nwrapper around ``bearlibterminal.terminal`` to support them.\n\n.. code:: python\n\n    from clubsandwich.blt.nice_terminal import terminal\n    from clubsandwich.geom import Rect, Size, Point\n\n    terminal.open()\n    terminal.bkcolor('#ff0000')\n    terminal.clear_area(Rect(Point(2, 2), Size(10, 10)))\n    terminal.refresh()\n    terminal.read()\n    terminal.close()\n\nConvenient terminal state access\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nA super simple wrapper around ``terminal.state()`` to conveniently read state\nvalues.\n\n.. code:: python\n\n    from clubsandwich.blt.state import blt_state\n    from clubsandwich.blt.nice_terminal import terminal\n    from clubsandwich.geom import Rect, Size, Point\n\n    terminal.open()\n    terminal.bkcolor('#ff0000')\n    terminal.clear_area(Rect(Point(2, 2), Size(10, 10)))\n    terminal.refresh()\n    # less verbose than terminal.state(terminal.TK_ESCAPE)!\n    while not blt_state.escape:\n    terminal.read()\n    terminal.close()\n\nTransform stack\n~~~~~~~~~~~~~~~\n\nEasily translate view coordinates between frames of reference.\n\n.. code:: python\n\n    from clubsandwich.blt.state import blt_state\n    from clubsandwich.blt.context import BearLibTerminalContext\n    from clubsandwich.geom import Rect, Size, Point\n\n    terminal = BearLibTerminalContext()\n\n    terminal.open()\n    terminal.bkcolor('#ff0000')\n    with terminal.translate(Point(blt_state.width, blt_state.height)):\n    terminal.clear_area(Rect(Point(2, 2), Size(10, 10)))\n    terminal.refresh()\n    # less verbose than terminal.state(terminal.TK_ESCAPE)!\n    while not blt_state.escape:\n    terminal.read()\n    terminal.close()\n\nA UIKit-like user interface library\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThis is too sophisticated for a short demo, but here's the code for the scene\nin the first screenshot:\n\n.. code:: python\n\n    from clubsandwich.ui import (\n        LabelView,\n        ButtonView,\n        UIScene,\n    )\n    LOGO = \"\"\"\n      _______     __     ____             __       _     __ \n     / ___/ /_ __/ /    / __/__ ____  ___/ /    __(_)___/ / \n    / /__/ / // / _ \\  _\\ \\/ _ `/ _ \\/ _  / |/|/ / / __/ _ \\\\\n    \\___/_/\\_,_/_.__/ /___/\\_,_/_//_/\\_,_/|__,__/_/\\__/_//_/\n    \"\"\"\n    class MainMenuScene(UIScene):\n        def __init__(self, *args, **kwargs):\n            views = [\n                LabelView(\n                    LOGO[1:].rstrip(),\n                    layout_options=LayoutOptions.row_top(0.5)),\n                LabelView(\n                    \"Try resizing the window!\",\n                    layout_options=LayoutOptions.centered('intrinsic', 'intrinsic')),\n                ButtonView(\n                    text=\"Play\", callback=self.play,\n                    layout_options=LayoutOptions.row_bottom(4).with_updates(\n                        left=0.2, width=0.2, right=None)),\n                ButtonView(\n                    text=\"Settings\", callback=self.show_settings,\n                    layout_options=LayoutOptions.row_bottom(4).with_updates(\n                        left=0.4, width=0.2, right=None)),\n                ButtonView(\n                    text=\"Quit\", callback=lambda: self.director.pop_scene(),\n                    layout_options=LayoutOptions.row_bottom(4).with_updates(\n                        left=0.6, width=0.2, right=None)),\n            ]\n            super().__init__(views, *args, **kwargs)\n\n        def play(self):\n            self.director.push_scene(CharacterCreationScene())\n\n        def show_settings(self):\n            self.director.push_scene(SettingsScene())\n\nScript runner\n~~~~~~~~~~~~~\n\nWhen you install clubsandwich, it adds a script called ``babysit`` to your\npath. This script does one very simple thing: it runs a command, and when that\ncommand exits, it runs it again. This repeats until you Ctrl+C the ``babysit``\nprocess.\n\nThis is useful when writing games because you don't want to have to keep\nswitching back to your terminal to run your script. Using ``babysit``, you can\njust quit your game whenever you make a change and it'll start back up again.\n\nYou can try it with the demo script like this:\n\n.. code:: sh\n\n    babysit python demo.py", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://steveasleep.com/clubsandwich", "keywords": "bearlibterminal,roguelike", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "clubsandwich", "package_url": "https://pypi.org/project/clubsandwich/", "platform": "", "project_url": "https://pypi.org/project/clubsandwich/", "project_urls": {"Homepage": "http://steveasleep.com/clubsandwich"}, "release_url": "https://pypi.org/project/clubsandwich/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "A roguelike framework", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>A roguelike framework for Python 3 using</strong>\n<a href=\"http://foo.wyrd.name/en:bearlibterminal\" rel=\"nofollow\">BearLibTerminal</a></p>\n<p><a href=\"https://github.com/irskep/clubsandwich\" rel=\"nofollow\">Source code</a></p>\n<p><a href=\"http://steveasleep.com/clubsandwich/\" rel=\"nofollow\">API docs</a></p>\n<div id=\"what-is-this\">\n<h2>What is this?</h2>\n<p>Imagine you want to write a roguelike, you don\u2019t want to roll your own\nframework from scratch, and you want to use Python.</p>\n<p>The most mature option for doing this is\n<a href=\"https://pypi.python.org/pypi/libtcod-cffi\" rel=\"nofollow\">libtcod-cffi</a>, which is a\nkitchen sink of roguelike development utilities like terminal graphics,\npathfinding, random numbers, noise generators, config file parsers, and data\nstructures. But it\u2019s pretty heavy, the docs aren\u2019t great, and it\u2019s an icky\nC API. And while it covers a lot of things you need for a roguelike, it doesn\u2019t\nhelp you much with your UI or state management.</p>\n<p>If that sounds like a decent tradeoff, go try <tt><span class=\"pre\">libtcod-cffi</span></tt> and be happy!\nBut there\u2019s another library,\n<a href=\"http://foo.wyrd.name/en:bearlibterminal\" rel=\"nofollow\">BearLibTerminal</a>, that only\nhandles terminal graphics. It\u2019s tiny and understandable. Clubsandwich\nbuilds on BearLibTerminal (BLT\u2026) to add a nice API, state management, easy\nUI, and some other helpful stuff.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<p>Scroll down for examples.</p>\n<ul>\n<li>Event loop</li>\n<li>Scene manager</li>\n<li>Geometry data structures</li>\n<li>Convenience functions</li>\n<li>UIKit-like interface framework</li>\n<li>Script runner to help you iterate quickly</li>\n</ul>\n</div>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<ul>\n<li>Python 3.4+</li>\n<li>And BearLibTerminal, of course</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>This package is not yet on PyPI. It is under heavy development. But you can\nexpect reasonable API stability!</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">e</span> <span class=\"s1\">'git://github.com/irskep/clubsandwich.git@master#egg=clubsandwich'</span>\n</pre>\n<img alt=\"readme_images/screenshot1.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3a60721a9587144ac629c9d7519483356c800bf3/726561646d655f696d616765732f73637265656e73686f74312e706e67\">\n<img alt=\"readme_images/screenshot2.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5b4ece7733b935ed53c6dcb3da1701a7bcbbadd0/726561646d655f696d616765732f73637265656e73686f74322e706e67\">\n</div>\n<div id=\"feature-examples\">\n<h2>Feature examples</h2>\n<div id=\"an-event-loop\">\n<h3>An event loop</h3>\n<p>clubsandwich uses the <a href=\"https://docs.python.org/3/library/asyncio.html\" rel=\"nofollow\">asyncio</a> library to run an asynchronous update loop.\nThe <tt>terminal_read(val)</tt> method is called whenever events are in the queue.\n<tt>terminal_update()</tt> is called every frame.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.loop</span> <span class=\"kn\">import</span> <span class=\"n\">BearLibTerminalEventLoop</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BasicLoop</span><span class=\"p\">(</span><span class=\"n\">BearLibTerminalEventLoop</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"User pressed a key:\"</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this is called every frame</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">draw</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">BasicLoop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"a-scene-manager\">\n<h3>A scene manager</h3>\n<p>Most games have more than one screen! This simple \u201cdirector\u201d object manages\nthem for you in a really obvious way.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bearlibterminal</span> <span class=\"kn\">import</span> <span class=\"n\">terminal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.director</span> <span class=\"kn\">import</span> <span class=\"n\">DirectorLoop</span><span class=\"p\">,</span> <span class=\"n\">Scene</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">BasicLoop2</span><span class=\"p\">(</span><span class=\"n\">DirectorLoop</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">get_initial_scene</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">MainMenuScene</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MainMenuScene</span><span class=\"p\">(</span><span class=\"n\">Scene</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"Press Enter to begin game, Esc to quit\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">TK_ENTER</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">push_scene</span><span class=\"p\">(</span><span class=\"n\">GameScene</span><span class=\"p\">())</span>\n        <span class=\"k\">elif</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">TK_ESCAPE</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">pop_scene</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">GameScene</span><span class=\"p\">(</span><span class=\"n\">Scene</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_update</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"s2\">\"You are playing the game, it is so fun! Press Esc to stop.\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">terminal_read</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">val</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">val</span> <span class=\"o\">==</span> <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">TK_ESCAPE</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">pop_scene</span><span class=\"p\">()</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">BasicLoop2</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"a-geometry-library\">\n<h3>A geometry library</h3>\n<p>Basic data structures for <tt>Rect</tt>, <tt>Point</tt>, and <tt>Size</tt>, and a very thin\nwrapper around <tt>bearlibterminal.terminal</tt> to support them.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.blt.nice_terminal</span> <span class=\"kn\">import</span> <span class=\"n\">terminal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.geom</span> <span class=\"kn\">import</span> <span class=\"n\">Rect</span><span class=\"p\">,</span> <span class=\"n\">Size</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">bkcolor</span><span class=\"p\">(</span><span class=\"s1\">'#ff0000'</span><span class=\"p\">)</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">clear_area</span><span class=\"p\">(</span><span class=\"n\">Rect</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"convenient-terminal-state-access\">\n<h3>Convenient terminal state access</h3>\n<p>A super simple wrapper around <tt>terminal.state()</tt> to conveniently read state\nvalues.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.blt.state</span> <span class=\"kn\">import</span> <span class=\"n\">blt_state</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.blt.nice_terminal</span> <span class=\"kn\">import</span> <span class=\"n\">terminal</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.geom</span> <span class=\"kn\">import</span> <span class=\"n\">Rect</span><span class=\"p\">,</span> <span class=\"n\">Size</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">bkcolor</span><span class=\"p\">(</span><span class=\"s1\">'#ff0000'</span><span class=\"p\">)</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">clear_area</span><span class=\"p\">(</span><span class=\"n\">Rect</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n<span class=\"c1\"># less verbose than terminal.state(terminal.TK_ESCAPE)!</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">blt_state</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">:</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"transform-stack\">\n<h3>Transform stack</h3>\n<p>Easily translate view coordinates between frames of reference.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.blt.state</span> <span class=\"kn\">import</span> <span class=\"n\">blt_state</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.blt.context</span> <span class=\"kn\">import</span> <span class=\"n\">BearLibTerminalContext</span>\n<span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.geom</span> <span class=\"kn\">import</span> <span class=\"n\">Rect</span><span class=\"p\">,</span> <span class=\"n\">Size</span><span class=\"p\">,</span> <span class=\"n\">Point</span>\n\n<span class=\"n\">terminal</span> <span class=\"o\">=</span> <span class=\"n\">BearLibTerminalContext</span><span class=\"p\">()</span>\n\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">bkcolor</span><span class=\"p\">(</span><span class=\"s1\">'#ff0000'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">translate</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">blt_state</span><span class=\"o\">.</span><span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">blt_state</span><span class=\"o\">.</span><span class=\"n\">height</span><span class=\"p\">)):</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">clear_area</span><span class=\"p\">(</span><span class=\"n\">Rect</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Size</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n<span class=\"c1\"># less verbose than terminal.state(terminal.TK_ESCAPE)!</span>\n<span class=\"k\">while</span> <span class=\"ow\">not</span> <span class=\"n\">blt_state</span><span class=\"o\">.</span><span class=\"n\">escape</span><span class=\"p\">:</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">terminal</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"a-uikit-like-user-interface-library\">\n<h3>A UIKit-like user interface library</h3>\n<p>This is too sophisticated for a short demo, but here\u2019s the code for the scene\nin the first screenshot:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">clubsandwich.ui</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n    <span class=\"n\">LabelView</span><span class=\"p\">,</span>\n    <span class=\"n\">ButtonView</span><span class=\"p\">,</span>\n    <span class=\"n\">UIScene</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"n\">LOGO</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"\"\n  _______     __     ____             __       _     __\n / ___/ /_ __/ /    / __/__ ____  ___/ /    __(_)___/ /\n/ /__/ / // / _ \\  _\\ \\/ _ `/ _ \\/ _  / |/|/ / / __/ _ </span><span class=\"se\">\\\\</span><span class=\"s2\">\n\\___/_/\\_,_/_.__/ /___/\\_,_/_//_/\\_,_/|__,__/_/\\__/_//_/\n\"\"\"</span>\n<span class=\"k\">class</span> <span class=\"nc\">MainMenuScene</span><span class=\"p\">(</span><span class=\"n\">UIScene</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"n\">views</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">LabelView</span><span class=\"p\">(</span>\n                <span class=\"n\">LOGO</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:]</span><span class=\"o\">.</span><span class=\"n\">rstrip</span><span class=\"p\">(),</span>\n                <span class=\"n\">layout_options</span><span class=\"o\">=</span><span class=\"n\">LayoutOptions</span><span class=\"o\">.</span><span class=\"n\">row_top</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)),</span>\n            <span class=\"n\">LabelView</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"Try resizing the window!\"</span><span class=\"p\">,</span>\n                <span class=\"n\">layout_options</span><span class=\"o\">=</span><span class=\"n\">LayoutOptions</span><span class=\"o\">.</span><span class=\"n\">centered</span><span class=\"p\">(</span><span class=\"s1\">'intrinsic'</span><span class=\"p\">,</span> <span class=\"s1\">'intrinsic'</span><span class=\"p\">)),</span>\n            <span class=\"n\">ButtonView</span><span class=\"p\">(</span>\n                <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Play\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">play</span><span class=\"p\">,</span>\n                <span class=\"n\">layout_options</span><span class=\"o\">=</span><span class=\"n\">LayoutOptions</span><span class=\"o\">.</span><span class=\"n\">row_bottom</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_updates</span><span class=\"p\">(</span>\n                    <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)),</span>\n            <span class=\"n\">ButtonView</span><span class=\"p\">(</span>\n                <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Settings\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">show_settings</span><span class=\"p\">,</span>\n                <span class=\"n\">layout_options</span><span class=\"o\">=</span><span class=\"n\">LayoutOptions</span><span class=\"o\">.</span><span class=\"n\">row_bottom</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_updates</span><span class=\"p\">(</span>\n                    <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.4</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)),</span>\n            <span class=\"n\">ButtonView</span><span class=\"p\">(</span>\n                <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"s2\">\"Quit\"</span><span class=\"p\">,</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">pop_scene</span><span class=\"p\">(),</span>\n                <span class=\"n\">layout_options</span><span class=\"o\">=</span><span class=\"n\">LayoutOptions</span><span class=\"o\">.</span><span class=\"n\">row_bottom</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_updates</span><span class=\"p\">(</span>\n                    <span class=\"n\">left</span><span class=\"o\">=</span><span class=\"mf\">0.6</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">right</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)),</span>\n        <span class=\"p\">]</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">views</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">play</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">push_scene</span><span class=\"p\">(</span><span class=\"n\">CharacterCreationScene</span><span class=\"p\">())</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">show_settings</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">director</span><span class=\"o\">.</span><span class=\"n\">push_scene</span><span class=\"p\">(</span><span class=\"n\">SettingsScene</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"script-runner\">\n<h3>Script runner</h3>\n<p>When you install clubsandwich, it adds a script called <tt>babysit</tt> to your\npath. This script does one very simple thing: it runs a command, and when that\ncommand exits, it runs it again. This repeats until you Ctrl+C the <tt>babysit</tt>\nprocess.</p>\n<p>This is useful when writing games because you don\u2019t want to have to keep\nswitching back to your terminal to run your script. Using <tt>babysit</tt>, you can\njust quit your game whenever you make a change and it\u2019ll start back up again.</p>\n<p>You can try it with the demo script like this:</p>\n<pre>babysit python demo.py\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2888095, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "15e9ac1c6c9280e2434f4447f6a70342", "sha256": "ff7e5f4379263e129312be68f1a9026b798b5cb914c3da44046221379c9977cb"}, "downloads": -1, "filename": "clubsandwich-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15e9ac1c6c9280e2434f4447f6a70342", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34180, "upload_time": "2017-05-21T03:03:03", "upload_time_iso_8601": "2017-05-21T03:03:03.201014Z", "url": "https://files.pythonhosted.org/packages/b9/17/6a5234bfb2db6db55e493d9ff7cdde685e2022f56b76ea4010a1c6ce699e/clubsandwich-0.1.0.tar.gz", "yanked": false}], "0.1.0a1": [{"comment_text": "", "digests": {"md5": "d25b3fd29f8ab98a8ca952945ce19429", "sha256": "b0c98a2b2c870af74307080ec21a2266493398e425f83eb08e7dbcaf3abdfade"}, "downloads": -1, "filename": "clubsandwich-0.1.0a1-py3.5.egg", "has_sig": false, "md5_digest": "d25b3fd29f8ab98a8ca952945ce19429", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 96378, "upload_time": "2017-05-21T03:03:05", "upload_time_iso_8601": "2017-05-21T03:03:05.310350Z", "url": "https://files.pythonhosted.org/packages/3b/a0/496c0b4f0d91325fcb8c5b24028925d12ec58c2c53599f10c9cd1fc5b735/clubsandwich-0.1.0a1-py3.5.egg", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "5842f86b3ca504d255b990d14a8ff290", "sha256": "5a1bce2f0914a1800fcdf7c9d3300be433853709140d873df5dbcbc889e635e6"}, "downloads": -1, "filename": "clubsandwich-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5842f86b3ca504d255b990d14a8ff290", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34218, "upload_time": "2017-05-21T03:07:41", "upload_time_iso_8601": "2017-05-21T03:07:41.057037Z", "url": "https://files.pythonhosted.org/packages/f7/2b/24ad8416f63ed69de33d7fa9265b7b4a87cd84c4efd7df35bd8bf7641252/clubsandwich-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e93b2b95b4984e7dd2f703a2f53127e1", "sha256": "19b94c680628424899ab367cc8024bd63cc8b69e43b4d468677dd301a0951e2e"}, "downloads": -1, "filename": "clubsandwich-0.1.2.tar.gz", "has_sig": false, "md5_digest": "e93b2b95b4984e7dd2f703a2f53127e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 34245, "upload_time": "2017-05-21T03:08:48", "upload_time_iso_8601": "2017-05-21T03:08:48.096385Z", "url": "https://files.pythonhosted.org/packages/8d/92/34fced576bb5d53d4ab8e7c22ff1c71e5d98464b66f0d1ba73c3e51376ab/clubsandwich-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b6d4d580196fa2c3ca98774c1602e5cb", "sha256": "78469078f6093ae9a7f03f9954b273285970b4ef763b3a0ca75b09c651511bb4"}, "downloads": -1, "filename": "clubsandwich-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b6d4d580196fa2c3ca98774c1602e5cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37563, "upload_time": "2017-05-21T03:12:28", "upload_time_iso_8601": "2017-05-21T03:12:28.127061Z", "url": "https://files.pythonhosted.org/packages/e5/18/3cdde64407f4eac991b8b02a47d24f5c917012483747a991b44285ca5388/clubsandwich-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b6d4d580196fa2c3ca98774c1602e5cb", "sha256": "78469078f6093ae9a7f03f9954b273285970b4ef763b3a0ca75b09c651511bb4"}, "downloads": -1, "filename": "clubsandwich-0.1.3.tar.gz", "has_sig": false, "md5_digest": "b6d4d580196fa2c3ca98774c1602e5cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37563, "upload_time": "2017-05-21T03:12:28", "upload_time_iso_8601": "2017-05-21T03:12:28.127061Z", "url": "https://files.pythonhosted.org/packages/e5/18/3cdde64407f4eac991b8b02a47d24f5c917012483747a991b44285ca5388/clubsandwich-0.1.3.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:40 2020"}