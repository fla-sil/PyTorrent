{"info": {"author": "Nacho Navarro", "author_email": "nachonavarroasv@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# Anomaly Detection: Seasonal ESD\n<a href=\"https://travis-ci.com/nachonavarro/seasonal-esd-anomaly-detection.svg?branch=master\"><img src=\"https://travis-ci.com/nachonavarro/seasonal-esd-anomaly-detection.svg?branch=master\" /></a>\n\nNote: All credit goes to Jordan Hochenbaum, Owen S. Vallis and Arun Kejariwa at Twitter, Inc. Any errors in the code are, of course, my mistake. Feel free to fix them.\n\n## Intro\nSeasonal ESD is an anomaly detection algorithm implemented at Twitter https://arxiv.org/pdf/1704.07706.pdf. What better definition than the one they use in their paper:\n\n> \"we developed two novel statistical techniques\n> for automatically detecting anomalies in cloud infrastructure\n> data. Specifically, the techniques employ statistical learning\n> to detect anomalies in both application, and system metrics.\n> Seasonal decomposition is employed to filter the trend and\n> seasonal components of the time series, followed by the use\n> of robust statistical metrics \u2013 median and median absolute\n> deviation (MAD) \u2013 to accurately detect anomalies, even in\n> the presence of seasonal spikes.\"\n\n## Installation\n\nTo install `sesd`, use pip:\n\n```\npip install sesd\n```\n\n\n### Explanation\nThe algorithm uses the Extreme Studentized Deviate test to calculate the anomalies. In fact, the novelty doesn't come\nin the fact that ESD is used, but rather on _what_ it is tested.\n\nThe problem with the ESD test on its own is that it assumes a normal data distribution, while real world data can have a multimodal distribution. To circumvent this, STL decomposition is used. Any time series can be decomposed with STL decomposition into a seasonal, trend, and residual component. The key is that the residual has a unimodal distribution that ESD can test. \n\nHowever, there is still the problem that extreme, spurious anomalies can corrupt the residual component. To fix it, the paper proposes to use the median to represent the \"stable\" trend, instead of the trend found by means of STL decomposition.\n\nFinally, for data sets that have a high percentage of anomalies, the research papers proposes to use the median and Median Absolute Deviate (MAD) instead of the mean and standard deviation to compute the zscore. Using MAD enables a more consistent measure of central tendency of a time series with a high percentage of anomalies.\n\n---\n\n## Usage\n\n```python\nimport numpy as np\nimport sesd\nts = np.random.random(100)\n# Introduce artificial anomalies\nts[14] = 9\nts[83] = 10\noutliers_indices = sesd.seasonal_esd(ts, hybrid=True, max_anomalies=2)\nfor idx in outliers_indices:\n    print(f'Anomaly index: {idx}, anomaly value: {ts[idx]}')\n\n>>> Anomaly index: 83, anomaly value: 10.0\n>>> Anomaly index: 14, anomaly value: 9.0\n```\n\n--- \n\n## Documentation\n\n\n* `seasonal_esd(seasonality=None, hybrid=False, max_anomalies=10, alpha=0.05)`: Computes the Seasonal Extreme Studentized Deviate of a time series. The steps taken are first to to decompose the time series into STL decomposition (trend, seasonality, residual). Then, calculate the Median Absolute Deviate (MAD) if hybrid (otherwise the median) and perform a regular ESD test on the residual, which we calculate as: `R = ts - seasonality - MAD or median.\n\n    * Arguments\n\n        * `ts`: The time series to compute the SESD.\n        * `periodicity`: The statsmodel library requires a periodicity to compute the STL decomposition If none is given, then it will automatically be calculated to be 20% of the total time series.\n        * `hybrid`: See Twitter\u2019s research paper for the difference.\n        * `max_anomalies: The number of times the Grubbs\u2019 Test will be applied to the time series.\n        * `alpha`: the significance level.\n\n    * Returns\n\n        * The indices of the anomalies in the time series.\n\n* `esd(timeseries, max_anomalies=10, alpha=0.05, hybrid=False)`: Computes the Extreme Studentized Deviate of a time series. A Grubbs Test is performed max_anomalies times with the caveat that each time the top value is removed. For more details visit http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\n\n    * Arguments\n\n        * `ts`: The time series to compute the ESD.\n        * `max_anomalies`: The number of times the Grubbs\u2019 Test will be applied to the time series.\n        * `alpha`: the significance level.\n        * `hybrid`: If set to fa`lse then the mean and standard deviation will be used to calculate the zscores in the Grubbs test. If set to true, then median and MAD will be used.\n\n    * Returns\n\n        * The indices of the anomalies in the time series.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nachonavarro/seasonal-esd-anomaly-detection", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sesd", "package_url": "https://pypi.org/project/sesd/", "platform": "", "project_url": "https://pypi.org/project/sesd/", "project_urls": {"Homepage": "https://github.com/nachonavarro/seasonal-esd-anomaly-detection"}, "release_url": "https://pypi.org/project/sesd/0.2/", "requires_dist": ["numpy", "scipy", "statsmodels"], "requires_python": "", "summary": "Anomaly detection algorithm implemented at Twitter", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Anomaly Detection: Seasonal ESD</h1>\n<p><a href=\"https://travis-ci.com/nachonavarro/seasonal-esd-anomaly-detection.svg?branch=master\" rel=\"nofollow\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31814de706621dbe2961e95b2b62cb5b911580ac/68747470733a2f2f7472617669732d63692e636f6d2f6e6163686f6e61766172726f2f736561736f6e616c2d6573642d616e6f6d616c792d646574656374696f6e2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Note: All credit goes to Jordan Hochenbaum, Owen S. Vallis and Arun Kejariwa at Twitter, Inc. Any errors in the code are, of course, my mistake. Feel free to fix them.</p>\n<h2>Intro</h2>\n<p>Seasonal ESD is an anomaly detection algorithm implemented at Twitter <a href=\"https://arxiv.org/pdf/1704.07706.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1704.07706.pdf</a>. What better definition than the one they use in their paper:</p>\n<blockquote>\n<p>\"we developed two novel statistical techniques\nfor automatically detecting anomalies in cloud infrastructure\ndata. Specifically, the techniques employ statistical learning\nto detect anomalies in both application, and system metrics.\nSeasonal decomposition is employed to filter the trend and\nseasonal components of the time series, followed by the use\nof robust statistical metrics \u2013 median and median absolute\ndeviation (MAD) \u2013 to accurately detect anomalies, even in\nthe presence of seasonal spikes.\"</p>\n</blockquote>\n<h2>Installation</h2>\n<p>To install <code>sesd</code>, use pip:</p>\n<pre><code>pip install sesd\n</code></pre>\n<h3>Explanation</h3>\n<p>The algorithm uses the Extreme Studentized Deviate test to calculate the anomalies. In fact, the novelty doesn't come\nin the fact that ESD is used, but rather on <em>what</em> it is tested.</p>\n<p>The problem with the ESD test on its own is that it assumes a normal data distribution, while real world data can have a multimodal distribution. To circumvent this, STL decomposition is used. Any time series can be decomposed with STL decomposition into a seasonal, trend, and residual component. The key is that the residual has a unimodal distribution that ESD can test.</p>\n<p>However, there is still the problem that extreme, spurious anomalies can corrupt the residual component. To fix it, the paper proposes to use the median to represent the \"stable\" trend, instead of the trend found by means of STL decomposition.</p>\n<p>Finally, for data sets that have a high percentage of anomalies, the research papers proposes to use the median and Median Absolute Deviate (MAD) instead of the mean and standard deviation to compute the zscore. Using MAD enables a more consistent measure of central tendency of a time series with a high percentage of anomalies.</p>\n<hr>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sesd</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"c1\"># Introduce artificial anomalies</span>\n<span class=\"n\">ts</span><span class=\"p\">[</span><span class=\"mi\">14</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">9</span>\n<span class=\"n\">ts</span><span class=\"p\">[</span><span class=\"mi\">83</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span>\n<span class=\"n\">outliers_indices</span> <span class=\"o\">=</span> <span class=\"n\">sesd</span><span class=\"o\">.</span><span class=\"n\">seasonal_esd</span><span class=\"p\">(</span><span class=\"n\">ts</span><span class=\"p\">,</span> <span class=\"n\">hybrid</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">max_anomalies</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">idx</span> <span class=\"ow\">in</span> <span class=\"n\">outliers_indices</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Anomaly index: </span><span class=\"si\">{</span><span class=\"n\">idx</span><span class=\"si\">}</span><span class=\"s1\">, anomaly value: </span><span class=\"si\">{</span><span class=\"n\">ts</span><span class=\"p\">[</span><span class=\"n\">idx</span><span class=\"p\">]</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Anomaly</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"mi\">83</span><span class=\"p\">,</span> <span class=\"n\">anomaly</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"mf\">10.0</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Anomaly</span> <span class=\"n\">index</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"n\">anomaly</span> <span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"mf\">9.0</span>\n</pre>\n<hr>\n<h2>Documentation</h2>\n<ul>\n<li>\n<p><code>seasonal_esd(seasonality=None, hybrid=False, max_anomalies=10, alpha=0.05)</code>: Computes the Seasonal Extreme Studentized Deviate of a time series. The steps taken are first to to decompose the time series into STL decomposition (trend, seasonality, residual). Then, calculate the Median Absolute Deviate (MAD) if hybrid (otherwise the median) and perform a regular ESD test on the residual, which we calculate as: `R = ts - seasonality - MAD or median.</p>\n<ul>\n<li>\n<p>Arguments</p>\n<ul>\n<li><code>ts</code>: The time series to compute the SESD.</li>\n<li><code>periodicity</code>: The statsmodel library requires a periodicity to compute the STL decomposition If none is given, then it will automatically be calculated to be 20% of the total time series.</li>\n<li><code>hybrid</code>: See Twitter\u2019s research paper for the difference.</li>\n<li>`max_anomalies: The number of times the Grubbs\u2019 Test will be applied to the time series.</li>\n<li><code>alpha</code>: the significance level.</li>\n</ul>\n</li>\n<li>\n<p>Returns</p>\n<ul>\n<li>The indices of the anomalies in the time series.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><code>esd(timeseries, max_anomalies=10, alpha=0.05, hybrid=False)</code>: Computes the Extreme Studentized Deviate of a time series. A Grubbs Test is performed max_anomalies times with the caveat that each time the top value is removed. For more details visit <a href=\"http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm\" rel=\"nofollow\">http://www.itl.nist.gov/div898/handbook/eda/section3/eda35h3.htm</a></p>\n<ul>\n<li>\n<p>Arguments</p>\n<ul>\n<li><code>ts</code>: The time series to compute the ESD.</li>\n<li><code>max_anomalies</code>: The number of times the Grubbs\u2019 Test will be applied to the time series.</li>\n<li><code>alpha</code>: the significance level.</li>\n<li><code>hybrid</code>: If set to fa`lse then the mean and standard deviation will be used to calculate the zscores in the Grubbs test. If set to true, then median and MAD will be used.</li>\n</ul>\n</li>\n<li>\n<p>Returns</p>\n<ul>\n<li>The indices of the anomalies in the time series.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6842834, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ee2b11b687e6688b76bbac5748a67b48", "sha256": "783d081bbb099b4d42fb6aa62aa3ed82bcdf87438dcdc1b40b2a388969aae9e3"}, "downloads": -1, "filename": "sesd-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee2b11b687e6688b76bbac5748a67b48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16176, "upload_time": "2018-12-16T14:00:19", "upload_time_iso_8601": "2018-12-16T14:00:19.365928Z", "url": "https://files.pythonhosted.org/packages/dc/d8/9403d9c8240cf86ff266249dd2b9789e5f524191e4491f802e70a6db841c/sesd-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8398b5dae520db6254dfeb4554dcc328", "sha256": "3971eb8cfabfb382138d9c6c1e3821d1ecb7da2ebe42df1c6369c57e464a3102"}, "downloads": -1, "filename": "sesd-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8398b5dae520db6254dfeb4554dcc328", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3647, "upload_time": "2018-12-16T14:00:23", "upload_time_iso_8601": "2018-12-16T14:00:23.539293Z", "url": "https://files.pythonhosted.org/packages/64/f8/98f1e101e4bc9456c433870b946cf3cfd5b7df612dc7cb370fbc38735cc1/sesd-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "ee0d78fe85b3ce11856eb24a4ab1a55e", "sha256": "19f7cfd3fdc2ed07f9a7fd37ab9c44f0d87cf7b88754606493f509c5976cfdf7"}, "downloads": -1, "filename": "sesd-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ee0d78fe85b3ce11856eb24a4ab1a55e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16199, "upload_time": "2018-12-16T14:06:43", "upload_time_iso_8601": "2018-12-16T14:06:43.292416Z", "url": "https://files.pythonhosted.org/packages/72/3e/423e0504ae4586163c322e824fc4df84ad56b665e96351b6868b9618732c/sesd-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "05745b8d21500aced45a8e43ad9652fb", "sha256": "13c118605f64a848023bbb7398985be175f2292edab79f7ed159d10e068fd20d"}, "downloads": -1, "filename": "sesd-0.1.1.tar.gz", "has_sig": false, "md5_digest": "05745b8d21500aced45a8e43ad9652fb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3699, "upload_time": "2018-12-16T14:06:45", "upload_time_iso_8601": "2018-12-16T14:06:45.041299Z", "url": "https://files.pythonhosted.org/packages/0d/53/c51b79f1820333cc4cac93eddef1a0840457a709514608f0eddb9fa99ff1/sesd-0.1.1.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "16fb996258a1b2bb5be2e88f584b140e", "sha256": "a7072e70f021a730fdc05a54dc9339c38489ee07ea367c8f95ca99447f647480"}, "downloads": -1, "filename": "sesd-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "16fb996258a1b2bb5be2e88f584b140e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16201, "upload_time": "2018-12-16T14:32:53", "upload_time_iso_8601": "2018-12-16T14:32:53.275749Z", "url": "https://files.pythonhosted.org/packages/d1/92/b88cedbab4f66442de7adfa03c2a83967721b7cdb48ace8ff94ffc5b9649/sesd-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "151351aef970abad764dbc2499f59037", "sha256": "23b950e06e38aa97b7eb822313375f20602b8f343e7ff4b4ba345b5c883af641"}, "downloads": -1, "filename": "sesd-0.1.4.tar.gz", "has_sig": false, "md5_digest": "151351aef970abad764dbc2499f59037", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3709, "upload_time": "2018-12-16T14:32:54", "upload_time_iso_8601": "2018-12-16T14:32:54.677224Z", "url": "https://files.pythonhosted.org/packages/69/06/18a3abb21d1928f1f172c83f4fb00d744173e59ecd54fcb23ca0486f9934/sesd-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "27339809de3e1d8a50f88b37d9020884", "sha256": "99134533bf431943a77c3ea2a8422257a2015894a39350786a7ecd60c62d1d96"}, "downloads": -1, "filename": "sesd-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "27339809de3e1d8a50f88b37d9020884", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16710, "upload_time": "2018-12-16T15:08:25", "upload_time_iso_8601": "2018-12-16T15:08:25.505940Z", "url": "https://files.pythonhosted.org/packages/53/9b/6bca572a89bd09d8806e2e39c051a9fff18ae7c1c1a8755c3c83f3ee2ca4/sesd-0.1.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "077d2e339d02edc5ff4b66bb57eb526e", "sha256": "3a9330859c4915247a048580eca1085edc04fecfdf035132151d12ba6acf6600"}, "downloads": -1, "filename": "sesd-0.1.5.tar.gz", "has_sig": false, "md5_digest": "077d2e339d02edc5ff4b66bb57eb526e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3957, "upload_time": "2018-12-16T15:08:26", "upload_time_iso_8601": "2018-12-16T15:08:26.848632Z", "url": "https://files.pythonhosted.org/packages/ca/0b/bf13e4d492ec2c45e09eaffa6a73c1f3ddab6e848b73794c492598a2ecd7/sesd-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "5b6322e0b6b29ceacf7ae0f7563899fb", "sha256": "8ed483afc8ca1a998fd4dd1a2263d03171b270664da063414f8be2f8075fcde6"}, "downloads": -1, "filename": "sesd-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5b6322e0b6b29ceacf7ae0f7563899fb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16825, "upload_time": "2019-05-05T13:59:30", "upload_time_iso_8601": "2019-05-05T13:59:30.544407Z", "url": "https://files.pythonhosted.org/packages/43/57/4ab45bc3fc7f5c08ce756ad37af960ce7932170e3f741b6f065162a6d7e4/sesd-0.1.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0a51478110aa1d3fa98a8458c336749d", "sha256": "41374b618f072d6859f90fa0f6cf4960b5a059fa2fdbc2b35949aa64987dabb3"}, "downloads": -1, "filename": "sesd-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0a51478110aa1d3fa98a8458c336749d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4148, "upload_time": "2019-05-05T13:59:32", "upload_time_iso_8601": "2019-05-05T13:59:32.144454Z", "url": "https://files.pythonhosted.org/packages/2b/1b/a6adc3362e23d7ad87d0c4c2380f0921fa71e49f356c38fe966b95d7ffcc/sesd-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "12da131d296e9547b8e26d6d1a780b7c", "sha256": "1cbc58e95d23d02dd548f1cdf8c803ac08013f4d8150c0c2637afcf81aa0118a"}, "downloads": -1, "filename": "sesd-0.1.7.tar.gz", "has_sig": false, "md5_digest": "12da131d296e9547b8e26d6d1a780b7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4208, "upload_time": "2019-11-22T23:54:23", "upload_time_iso_8601": "2019-11-22T23:54:23.907602Z", "url": "https://files.pythonhosted.org/packages/9e/13/beedfe4f9007ac838f9449460f919270f3c3cd558cf3b56044272c619138/sesd-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "462e28164eeec35be63d5336c2c3894b", "sha256": "8c777df810c505c0c726fe08c8a539945360eb1420da4f981dc19ce488bfa647"}, "downloads": -1, "filename": "sesd-0.1.8.tar.gz", "has_sig": false, "md5_digest": "462e28164eeec35be63d5336c2c3894b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4277, "upload_time": "2019-11-23T00:04:55", "upload_time_iso_8601": "2019-11-23T00:04:55.525974Z", "url": "https://files.pythonhosted.org/packages/1f/f2/99c8c45daff97ba18cdbac7faec7e612be599c23a94012972dbdc1624264/sesd-0.1.8.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f8159b6dffe3bac1d47261275d044e55", "sha256": "2a789984a824564b035d06d36fc9dac6733e442817f796f1ae259b190b565f48"}, "downloads": -1, "filename": "sesd-0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f8159b6dffe3bac1d47261275d044e55", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17013, "upload_time": "2020-03-19T12:14:24", "upload_time_iso_8601": "2020-03-19T12:14:24.222787Z", "url": "https://files.pythonhosted.org/packages/5d/97/80da883a27de25dce5e3b66bc2a2de97176f876490db4a4846a9b09b9a7e/sesd-0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3387cad7900194469780d72924b09912", "sha256": "36874c0231bbd5f96b069d82fc1e6e73743f6e3dce62f688fe60a07550396397"}, "downloads": -1, "filename": "sesd-0.2.tar.gz", "has_sig": false, "md5_digest": "3387cad7900194469780d72924b09912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4349, "upload_time": "2020-03-19T12:14:28", "upload_time_iso_8601": "2020-03-19T12:14:28.107893Z", "url": "https://files.pythonhosted.org/packages/d6/9d/5b396ffdc56ee713d2377c31a2219e3e74143aab448360df6946761a7204/sesd-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8159b6dffe3bac1d47261275d044e55", "sha256": "2a789984a824564b035d06d36fc9dac6733e442817f796f1ae259b190b565f48"}, "downloads": -1, "filename": "sesd-0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "f8159b6dffe3bac1d47261275d044e55", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17013, "upload_time": "2020-03-19T12:14:24", "upload_time_iso_8601": "2020-03-19T12:14:24.222787Z", "url": "https://files.pythonhosted.org/packages/5d/97/80da883a27de25dce5e3b66bc2a2de97176f876490db4a4846a9b09b9a7e/sesd-0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3387cad7900194469780d72924b09912", "sha256": "36874c0231bbd5f96b069d82fc1e6e73743f6e3dce62f688fe60a07550396397"}, "downloads": -1, "filename": "sesd-0.2.tar.gz", "has_sig": false, "md5_digest": "3387cad7900194469780d72924b09912", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4349, "upload_time": "2020-03-19T12:14:28", "upload_time_iso_8601": "2020-03-19T12:14:28.107893Z", "url": "https://files.pythonhosted.org/packages/d6/9d/5b396ffdc56ee713d2377c31a2219e3e74143aab448360df6946761a7204/sesd-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:50 2020"}