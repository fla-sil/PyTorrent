{"info": {"author": "Edgardo Obreg\u00f3n", "author_email": "edraobdu@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Printy\n\n![Travis (.org)](https://img.shields.io/travis/edraobdu/printy?logo=travis&style=flat-square) \n![Codecov](https://img.shields.io/codecov/c/gh/edraobdu/printy?logo=codecov&style=flat-square)\n![PyPI](https://img.shields.io/pypi/v/printy?style=flat-square)\n![PyPI - Wheel](https://img.shields.io/pypi/wheel/printy?style=flat-square)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/printy?logo=python&logoColor=blue&style=flat-square)\n[![All Contributors](https://img.shields.io/badge/all_contributors-4-orange.svg?style=flat-square)](#contributors-)\n![PyPI - License](https://img.shields.io/pypi/l/printy?style=flat-square)\n\nPrinty is a **light** and **cross-platform** library that extends the functionalities of the \nbuilt-in functions ```print()``` and ```input()```. Printy stands out for its\nsimplicity and for being and easy to use library, it lets you colorize and apply some standard formats \nto your text with an intuitive and friendly API based on **flags**.\n\n![Printy demo](.github/demo_printy.gif)\n\n![Inputy Demo](.github/demo_inputy.gif)\n\n_<sub>NOTE: Printy manages the most common and simple tasks when it comes to print \ntext and to validate some input. If you want to have more control over the \nconsole output check out **[Rich](https://github.com/willmcgugan/rich)** by @willmcgugan, \nan amazing library that let's you do much more cool things!!</sub>_\n\n## Table of Contents\n\n1. [Installation](#installation)\n2. [How to use it?](#how-to-use-it)\n    1. [Using global flags](#using-global-flags)\n    2. [Using inline flags](#using-inline-flags)\n3. [What about input()?](#what-about-input)\n4. [Curious?](#curious)\n5. [API](#api)\n    1. [printy()](#printy)\n    2. [inputy()](#inputy)\n    3. [List 1: flags](#list-1-flags)\n    4. [List 2: types](#list-2-types)\n    5. [List 2: conditions](#list-3-conditions)\n6. [Changelog](#changelog)\n7. [Dependencies](#dependencies)\n8. [Contributing](#contributing)\n9. [Contributors](#contributors-)\n\n## Installation\n\nyou can either clone this repository or install it via pip\n```python\npip install printy\n```\n\n## How to use it?\n\nOnce you install printy, you can find a short but concise documentation about the\navailable flags and the syntax by running the following command on your console:\n```python\npython -m printy\n```\n\nThis will print out some instructions right away.\n\n![Printy Help me](.github/printy_helpme.png)\n\n#### Using global flags\n\nFirst of all, import printy:\n```python\nfrom printy import printy\n```\n\nPrinty is still a 'print' statement, so you can use it as it is:\n```python\nprinty(\"text with no format\")\n```\n\n![Printy no format](.github/printy_no_format.png)\n\nYou can use a global set of flags to specify a format you want to apply to the text,\nlet's say we want to colorize a text with a bold blue and also adding an underline:\n```python\nprinty(\"Text with a bold blue color and underlined\", 'bBU')\n```\n![Printy global bold blue](.github/printy_global_bold_blue.png)\n\n#### Using inline flags\nAlthough applying a global format is interesting, it is not as much as applying\nsome specific format to some section of the text only. For that, printy uses a \nintuitive syntax to accomplish that goal. Use the [] to specify the flags to use\nfor formatting the text, right before the text, and the @ to finish the formatting \nsection:\n```python\nprinty(\"Predefined format [rI]This is red and with italic style@ also predefined format\")\n```\n![Printy inline red italic](.github/printy_inline_red_italic.png)\n\nThe text that is not surrounded by the format syntax will remain with the predefined \nformat.\n\nBut you can always override this predefined format for inline format specifying the flags \nin the 'predefined' parameter\n```python\nprinty(\"Now this is blue [rI]Still red italic@ and also blue\", predefined=\"b\")\n```\n![printy changing predefined](.github/printy_changing_predefined.png)\n\nOr, you can override the whole format without changing the inline format with a global flag:\n```python\nprinty(\"Now i am still blue, [rI]and also me@, and me as well \", \"b\")\n```\n![Printy overriding inline with global](.github/printy_override_inline_with_global.png)\n\nYou can combine it with f-strings:\n```python\na = 60\nprinty(f\"The day has [yB]{ 24 * a }@ minutes\")\n```\n![Printy f-strings](.github/printy_f_strings.png)\n\nPrinty also supports reading from a file, just pass the path to your file\nin the file parameter:\n\n```python\n# NOTE: Here, it is necessary to specify the flags (if you want) \n# in the 'flags' parameter\nprinty(file=\"/path/to/your/file/file.extension\", flags=\"cU\")\n```\n![Printy from file](.github/printy_from_file.png)\n\n\n## What about input()?\n\nPrinty also includes an alternative function for the builtin input(), that, not only\nlets us applies formats to the prompted message (if passed), but also, we can force\nthe user to enter a certain type of data.\n```python\nfrom printy import inputy\n```\nLet's say we want to get an integer from the user's input, for that, we can set\ntype='int' in the 'inputy' function (we can specify formats the same way we'd do\n with printy)\n```python\nfruits = [\"Apple\", \"Orange\", \"Pineapple\"]\nfruit = inputy(\"Select a fruit: \", options=fruits, condition=\"i\")\n\nqty = inputy(\"How many [yBU]%ss@ do you want?\" % fruit, predefined=\"rB\", type=\"int\", condition=\"+\")\n\nconfirmation = inputy(\"Are you sure you want [r]%d@ %ss?\" % (qty, fruit), type=\"bool\", options=[\"y\", \"n\"], condition=\"i\")\n```\n\nIn all of the above examples, if the user enters a value with a type other than \nthe one specified in 'type' (default is 'str'), the message will show again and will prompt also a warning \n(and so on until the user enters a valid value according to the type)\n\nYou can pass certain conditions to validate the input, for example, you can \npass ```condition=\"+\"``` on an input with type 'int' to force the user to enter\na positive integer (valid also for 'float'), check the complete options below\n\n**The best part** is that the returned value's type is also the one of the specified \ntype, therefore, from the above examples, both *fruit* will be str, *qty* will be integer, and\n*confirmation* will be a boolean, so, you're gonna get the information right as you need it.   \n\n![Printy inputy Demo](.github/inputy_example.png)\n\n\n## Curious?\n\nIf you want to know what's behind the scenes, you can get the text with all the ANSI escaped sequences,\nfor that, use the ```raw_format()``` function.\n\n```python\nfrom printy import raw_format\nraw_text = raw_format(\"Some [rB]formatted@ [yIU]text@\")\nprint(repr(raw_text))  \nprint(raw_text)\n```\n\n![Printy raw format](.github/printy_raw_format.png)\n\nFor convenience, we have stored all colors and formats flags in list, in case you need them:\n\n```python\nfrom printy import COLORS, FORMATS\nprint(COLORS)\nprint(FORMATS)\n```\n\n![Printy COLORS FORMATS](.github/printy_COLORS_FORMATS.png)\n\n## API\n\n### printy()\n\n| Parameters | type |  | Description |\n| --- | --- | --- | --- |\n| value | str | required | Value to be formatted |\n| flags | str | optional | Global flags to be applied, they can be passed in the 'value' with the following syntax: [flags]value@ (check [List 1](#list-1-flags) for more info)|\n| predefined | str | optional | A set of flags to apply to the value as its predefined value |\n| file | str | optional | A path to a file where we want to read the value from | \n| end | str | optional | A value to be appended to the value, default is '\\n' |\n\n### inputy()\n<sub>plus printy() parameters</sub>\n\n| Parameters | type |  | Description |\n| --- | --- | --- | --- |\n| type | str | optional | Type of value we want the user to enter (check [List 2](#list-2-types) for more info)|\n| options | list | optional | Valid only for types 'str' and 'bool', a list of options to scope the value |\n| render_options | bool | optional | Specify whether we want to display the options to the user or not | \n| default | str | optional | If no value is entered, this one will be taken, make sure that it belongs to the options list (if passed) | \n| condition | str | optional | A character that applies certain restrictions to the value (check [List 3](#list-3-conditions) for mor info |\n\n### List 1 'flags'\n\n**COLORS**\n- k - Applies a black color to the text\n- g - Applies a grey color to the text\n- w - Applies a white color to the text\n- <r - Applies a darkred color to the text\n- r - Applies a red color to the text\n- r> - Applies a lightred color to the text\n- <n - Applies a darkgreen color to the text\n- n - Applies a green color to the text\n- n> - Applies a lightgreen color to the text\n- <y - Applies a darkyellow color to the text\n- y - Applies a yellow color to the text\n- y> - Applies a lightyellow color to the text\n- <b - Applies a darkblue color to the text\n- b - Applies a blue color to the text\n- b> - Applies a lightblue color to the text\n- <m - Applies a darkmagenta color to the text\n- m - Applies a magenta color to the text\n- m> - Applies a lightmagenta color to the text\n- <c - Applies a darkcyan color to the text\n- c - Applies a cyan color to the text\n- c> - Applies a lightcyan color to the text\n- <o - Applies a darkorange color to the text\n- o - Applies a orange color to the text\n- o> - Applies a lightorange color to the text\n- \\<p - Applies a darkpurple color to the text\n- p - Applies a purple color to the text\n- p> - Applies a lightpurple color to the text\n\n**FORMATS**\n- B - Applies a bold font weight to the text\n- U - Applies an underline to the text\n- I - Applies an italic font type to the text\n- H - Highlights the text\n- S - crosses out the text, aka Strike\n\n### List 2 'types'\n- 'int': Value must be an integer or a string that can be turn into an integer, returns the value as an integer\n- 'float': Value must be a float or a string that can be turn into a float, returns the value as a float\n- 'bool': A string matching 'True' or 'False' if no options are passed, otherwise, a string that matches one of the options, returns the value as a boolean\n- 'str': The default type, if 'options' is passed, then the string must match one of the options or its item number.\n\n### List 3 'conditions'\n- '+': Valid for 'int' and 'float' types only. The value must be a **positive** number\n- '-': Valid for 'int' and 'float' types only. The value must be a **negative** number\n- 'i': valid for 'str' and 'bool' types only. The value is case insensitive, by default it is case sensitive\n\n\n## Changelog\n\n[Changelog.md](CHANGELOG.md)\n\n## Dependencies\n\nPrinty currently supports Python 3.5 and up. Printy is a cross-platform library\n\n## Contributing\n\nPlease feel free to contact me if you want to be part of the project and contribute.\nFork or clone, push to your fork, make a pull request, let's make this a better app \nevery day!!\n\n## Contributors \u2728\n\nThanks goes to these wonderful people ([emoji key](https://allcontributors.org/docs/en/emoji-key)):\n\n<!-- ALL-CONTRIBUTORS-LIST:START - Do not remove or modify this section -->\n<!-- prettier-ignore-start -->\n<!-- markdownlint-disable -->\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/edraobdu\"><img src=\"https://avatars3.githubusercontent.com/u/31775663?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Edgardo Obreg\u00f3n</b></sub></a><br /><a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"#example-edraobdu\" title=\"Examples\">\ud83d\udca1</a> <a href=\"#ideas-edraobdu\" title=\"Ideas, Planning, & Feedback\">\ud83e\udd14</a> <a href=\"#maintenance-edraobdu\" title=\"Maintenance\">\ud83d\udea7</a> <a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" title=\"Documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/edraobdu/printy/issues?q=author%3Aedraobdu\" title=\"Bug reports\">\ud83d\udc1b</a></td>    \n    <td align=\"center\"><a href=\"https://github.com/farahduk\"><img src=\"https://avatars3.githubusercontent.com/u/15660335?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>farahduk</b></sub></a><br /><a href=\"#ideas-farahduk\" title=\"Ideas, Planning, & Feedback\">\ud83e\udd14</a> <a href=\"https://github.com/edraobdu/printy/commits?author=farahduk\" title=\"Code\">\ud83d\udcbb</a> <a href=\"#maintenance-farahduk\" title=\"Maintenance\">\ud83d\udea7</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mihirs16\"><img src=\"https://avatars3.githubusercontent.com/u/44063783?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>Mihir Singh</b></sub></a><br /><a href=\"https://github.com/edraobdu/printy/commits?author=mihirs16\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"https://github.com/edraobdu/printy/commits?author=mihirs16\" title=\"Code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://soundcloud.com/lalalaaalala\"><img src=\"https://avatars1.githubusercontent.com/u/7810348?v=4\" width=\"100px;\" alt=\"\"/><br /><sub><b>musicprogram</b></sub></a><br /><a href=\"#userTesting-musicprogram\" title=\"User Testing\">\ud83d\udcd3</a></td>\n  </tr>\n</table>\n\n<!-- markdownlint-enable -->\n<!-- prettier-ignore-end -->\n<!-- ALL-CONTRIBUTORS-LIST:END -->\n\nThis project follows the [all-contributors](https://github.com/all-contributors/all-contributors) specification. Contributions of any kind welcome!\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/edraobdu/printy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "printy", "package_url": "https://pypi.org/project/printy/", "platform": "", "project_url": "https://pypi.org/project/printy/", "project_urls": {"Homepage": "https://github.com/edraobdu/printy"}, "release_url": "https://pypi.org/project/printy/2.0.1/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Colorize the print statement by global or inline flags", "version": "2.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Printy</h1>\n<p><img alt=\"Travis (.org)\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fae3842f7ba57d27046cf7d375ee9f2c6ebc197d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f656472616f6264752f7072696e74793f6c6f676f3d747261766973267374796c653d666c61742d737175617265\">\n<img alt=\"Codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/da3fbe6cb34f0ccc8eb8088f8c36bf0374e931c5/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f67682f656472616f6264752f7072696e74793f6c6f676f3d636f6465636f76267374796c653d666c61742d737175617265\">\n<img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a284b29c561f71694292e46bdfe2fb79d976219b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7072696e74793f7374796c653d666c61742d737175617265\">\n<img alt=\"PyPI - Wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29e6fea0e52d9d5ce50872f3e9740cb91307dec0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f7072696e74793f7374796c653d666c61742d737175617265\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/216de955ae625298941fd8ba91eec3cf79e48627/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7072696e74793f6c6f676f3d707974686f6e266c6f676f436f6c6f723d626c7565267374796c653d666c61742d737175617265\">\n<a href=\"#contributors-\" rel=\"nofollow\"><img alt=\"All Contributors\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b385b426f9b225c11e197f20efd23f4b271832aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f616c6c5f636f6e7472696275746f72732d342d6f72616e67652e7376673f7374796c653d666c61742d737175617265\"></a>\n<img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6672968d55bb6d12504995249d17d51c8b94bbf8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7072696e74793f7374796c653d666c61742d737175617265\"></p>\n<p>Printy is a <strong>light</strong> and <strong>cross-platform</strong> library that extends the functionalities of the\nbuilt-in functions <code>print()</code> and <code>input()</code>. Printy stands out for its\nsimplicity and for being and easy to use library, it lets you colorize and apply some standard formats\nto your text with an intuitive and friendly API based on <strong>flags</strong>.</p>\n<p><img alt=\"Printy demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/135f9fbba77576dd2f7c64cf41c8daa6619977cb/2e6769746875622f64656d6f5f7072696e74792e676966\"></p>\n<p><img alt=\"Inputy Demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46d349fc9e34256db97125d9ec4d789539ac3086/2e6769746875622f64656d6f5f696e707574792e676966\"></p>\n<p><em><sub>NOTE: Printy manages the most common and simple tasks when it comes to print\ntext and to validate some input. If you want to have more control over the\nconsole output check out <strong><a href=\"https://github.com/willmcgugan/rich\" rel=\"nofollow\">Rich</a></strong> by @willmcgugan,\nan amazing library that let's you do much more cool things!!</sub></em></p>\n<h2>Table of Contents</h2>\n<ol>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#how-to-use-it\" rel=\"nofollow\">How to use it?</a>\n<ol>\n<li><a href=\"#using-global-flags\" rel=\"nofollow\">Using global flags</a></li>\n<li><a href=\"#using-inline-flags\" rel=\"nofollow\">Using inline flags</a></li>\n</ol>\n</li>\n<li><a href=\"#what-about-input\" rel=\"nofollow\">What about input()?</a></li>\n<li><a href=\"#curious\" rel=\"nofollow\">Curious?</a></li>\n<li><a href=\"#api\" rel=\"nofollow\">API</a>\n<ol>\n<li><a href=\"#printy\" rel=\"nofollow\">printy()</a></li>\n<li><a href=\"#inputy\" rel=\"nofollow\">inputy()</a></li>\n<li><a href=\"#list-1-flags\" rel=\"nofollow\">List 1: flags</a></li>\n<li><a href=\"#list-2-types\" rel=\"nofollow\">List 2: types</a></li>\n<li><a href=\"#list-3-conditions\" rel=\"nofollow\">List 2: conditions</a></li>\n</ol>\n</li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#contributors-\" rel=\"nofollow\">Contributors</a></li>\n</ol>\n<h2>Installation</h2>\n<p>you can either clone this repository or install it via pip</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">printy</span>\n</pre>\n<h2>How to use it?</h2>\n<p>Once you install printy, you can find a short but concise documentation about the\navailable flags and the syntax by running the following command on your console:</p>\n<pre><span class=\"n\">python</span> <span class=\"o\">-</span><span class=\"n\">m</span> <span class=\"n\">printy</span>\n</pre>\n<p>This will print out some instructions right away.</p>\n<p><img alt=\"Printy Help me\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0d2fe5798fde498b38dc9d12379a135fcf579d93/2e6769746875622f7072696e74795f68656c706d652e706e67\"></p>\n<h4>Using global flags</h4>\n<p>First of all, import printy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">printy</span> <span class=\"kn\">import</span> <span class=\"n\">printy</span>\n</pre>\n<p>Printy is still a 'print' statement, so you can use it as it is:</p>\n<pre><span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"s2\">\"text with no format\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy no format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/baf7061c548e68dead8818cc5229918e90d13320/2e6769746875622f7072696e74795f6e6f5f666f726d61742e706e67\"></p>\n<p>You can use a global set of flags to specify a format you want to apply to the text,\nlet's say we want to colorize a text with a bold blue and also adding an underline:</p>\n<pre><span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"s2\">\"Text with a bold blue color and underlined\"</span><span class=\"p\">,</span> <span class=\"s1\">'bBU'</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy global bold blue\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7ad36000c73b3d6ce03e9789bea0358ae84cbbc4/2e6769746875622f7072696e74795f676c6f62616c5f626f6c645f626c75652e706e67\"></p>\n<h4>Using inline flags</h4>\n<p>Although applying a global format is interesting, it is not as much as applying\nsome specific format to some section of the text only. For that, printy uses a\nintuitive syntax to accomplish that goal. Use the [] to specify the flags to use\nfor formatting the text, right before the text, and the @ to finish the formatting\nsection:</p>\n<pre><span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"s2\">\"Predefined format [rI]This is red and with italic style@ also predefined format\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy inline red italic\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cfc21a8a5c7b0dcb1b1233785dd6bc01ba0d5915/2e6769746875622f7072696e74795f696e6c696e655f7265645f6974616c69632e706e67\"></p>\n<p>The text that is not surrounded by the format syntax will remain with the predefined\nformat.</p>\n<p>But you can always override this predefined format for inline format specifying the flags\nin the 'predefined' parameter</p>\n<pre><span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"s2\">\"Now this is blue [rI]Still red italic@ and also blue\"</span><span class=\"p\">,</span> <span class=\"n\">predefined</span><span class=\"o\">=</span><span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"printy changing predefined\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/122429686a06b6826b92c25e86c72a150d7469bd/2e6769746875622f7072696e74795f6368616e67696e675f707265646566696e65642e706e67\"></p>\n<p>Or, you can override the whole format without changing the inline format with a global flag:</p>\n<pre><span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"s2\">\"Now i am still blue, [rI]and also me@, and me as well \"</span><span class=\"p\">,</span> <span class=\"s2\">\"b\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy overriding inline with global\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c249a8522ffd3fa96755b772e5b9693fc7ce323f/2e6769746875622f7072696e74795f6f766572726964655f696e6c696e655f776974685f676c6f62616c2e706e67\"></p>\n<p>You can combine it with f-strings:</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"mi\">60</span>\n<span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"The day has [yB]</span><span class=\"si\">{</span> <span class=\"mi\">24</span> <span class=\"o\">*</span> <span class=\"n\">a</span> <span class=\"si\">}</span><span class=\"s2\">@ minutes\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy f-strings\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ec9ddf41afd5bc23d719f0da3c51115e57af419/2e6769746875622f7072696e74795f665f737472696e67732e706e67\"></p>\n<p>Printy also supports reading from a file, just pass the path to your file\nin the file parameter:</p>\n<pre><span class=\"c1\"># NOTE: Here, it is necessary to specify the flags (if you want) </span>\n<span class=\"c1\"># in the 'flags' parameter</span>\n<span class=\"n\">printy</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/your/file/file.extension\"</span><span class=\"p\">,</span> <span class=\"n\">flags</span><span class=\"o\">=</span><span class=\"s2\">\"cU\"</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy from file\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea2c74911ab0eb81503e3e3378171ed83a13cba6/2e6769746875622f7072696e74795f66726f6d5f66696c652e706e67\"></p>\n<h2>What about input()?</h2>\n<p>Printy also includes an alternative function for the builtin input(), that, not only\nlets us applies formats to the prompted message (if passed), but also, we can force\nthe user to enter a certain type of data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">printy</span> <span class=\"kn\">import</span> <span class=\"n\">inputy</span>\n</pre>\n<p>Let's say we want to get an integer from the user's input, for that, we can set\ntype='int' in the 'inputy' function (we can specify formats the same way we'd do\nwith printy)</p>\n<pre><span class=\"n\">fruits</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"Apple\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Orange\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Pineapple\"</span><span class=\"p\">]</span>\n<span class=\"n\">fruit</span> <span class=\"o\">=</span> <span class=\"n\">inputy</span><span class=\"p\">(</span><span class=\"s2\">\"Select a fruit: \"</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"n\">fruits</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"s2\">\"i\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">qty</span> <span class=\"o\">=</span> <span class=\"n\">inputy</span><span class=\"p\">(</span><span class=\"s2\">\"How many [yBU]</span><span class=\"si\">%s</span><span class=\"s2\">s@ do you want?\"</span> <span class=\"o\">%</span> <span class=\"n\">fruit</span><span class=\"p\">,</span> <span class=\"n\">predefined</span><span class=\"o\">=</span><span class=\"s2\">\"rB\"</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"int\"</span><span class=\"p\">,</span> <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"s2\">\"+\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">confirmation</span> <span class=\"o\">=</span> <span class=\"n\">inputy</span><span class=\"p\">(</span><span class=\"s2\">\"Are you sure you want [r]</span><span class=\"si\">%d</span><span class=\"s2\">@ </span><span class=\"si\">%s</span><span class=\"s2\">s?\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">qty</span><span class=\"p\">,</span> <span class=\"n\">fruit</span><span class=\"p\">),</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s2\">\"bool\"</span><span class=\"p\">,</span> <span class=\"n\">options</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"s2\">\"n\"</span><span class=\"p\">],</span> <span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"s2\">\"i\"</span><span class=\"p\">)</span>\n</pre>\n<p>In all of the above examples, if the user enters a value with a type other than\nthe one specified in 'type' (default is 'str'), the message will show again and will prompt also a warning\n(and so on until the user enters a valid value according to the type)</p>\n<p>You can pass certain conditions to validate the input, for example, you can\npass <code>condition=\"+\"</code> on an input with type 'int' to force the user to enter\na positive integer (valid also for 'float'), check the complete options below</p>\n<p><strong>The best part</strong> is that the returned value's type is also the one of the specified\ntype, therefore, from the above examples, both <em>fruit</em> will be str, <em>qty</em> will be integer, and\n<em>confirmation</em> will be a boolean, so, you're gonna get the information right as you need it.</p>\n<p><img alt=\"Printy inputy Demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f89ec25ba190a11b3f34cdda34299fcf700e9044/2e6769746875622f696e707574795f6578616d706c652e706e67\"></p>\n<h2>Curious?</h2>\n<p>If you want to know what's behind the scenes, you can get the text with all the ANSI escaped sequences,\nfor that, use the <code>raw_format()</code> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">printy</span> <span class=\"kn\">import</span> <span class=\"n\">raw_format</span>\n<span class=\"n\">raw_text</span> <span class=\"o\">=</span> <span class=\"n\">raw_format</span><span class=\"p\">(</span><span class=\"s2\">\"Some [rB]formatted@ [yIU]text@\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">raw_text</span><span class=\"p\">))</span>  \n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">raw_text</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy raw format\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/02ab8907551052785a875aa78a0ec0b7e13e834a/2e6769746875622f7072696e74795f7261775f666f726d61742e706e67\"></p>\n<p>For convenience, we have stored all colors and formats flags in list, in case you need them:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">printy</span> <span class=\"kn\">import</span> <span class=\"n\">COLORS</span><span class=\"p\">,</span> <span class=\"n\">FORMATS</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">COLORS</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">FORMATS</span><span class=\"p\">)</span>\n</pre>\n<p><img alt=\"Printy COLORS FORMATS\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/704194a49d8fd9b3e8bf0cfeca298b123c7ed90f/2e6769746875622f7072696e74795f434f4c4f52535f464f524d4154532e706e67\"></p>\n<h2>API</h2>\n<h3>printy()</h3>\n<table>\n<thead>\n<tr>\n<th>Parameters</th>\n<th>type</th>\n<th></th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>value</td>\n<td>str</td>\n<td>required</td>\n<td>Value to be formatted</td>\n</tr>\n<tr>\n<td>flags</td>\n<td>str</td>\n<td>optional</td>\n<td>Global flags to be applied, they can be passed in the 'value' with the following syntax: [flags]value@ (check <a href=\"#list-1-flags\" rel=\"nofollow\">List 1</a> for more info)</td>\n</tr>\n<tr>\n<td>predefined</td>\n<td>str</td>\n<td>optional</td>\n<td>A set of flags to apply to the value as its predefined value</td>\n</tr>\n<tr>\n<td>file</td>\n<td>str</td>\n<td>optional</td>\n<td>A path to a file where we want to read the value from</td>\n</tr>\n<tr>\n<td>end</td>\n<td>str</td>\n<td>optional</td>\n<td>A value to be appended to the value, default is '\\n'</td>\n</tr></tbody></table>\n<h3>inputy()</h3>\n<p><sub>plus printy() parameters</sub></p>\n<table>\n<thead>\n<tr>\n<th>Parameters</th>\n<th>type</th>\n<th></th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>type</td>\n<td>str</td>\n<td>optional</td>\n<td>Type of value we want the user to enter (check <a href=\"#list-2-types\" rel=\"nofollow\">List 2</a> for more info)</td>\n</tr>\n<tr>\n<td>options</td>\n<td>list</td>\n<td>optional</td>\n<td>Valid only for types 'str' and 'bool', a list of options to scope the value</td>\n</tr>\n<tr>\n<td>render_options</td>\n<td>bool</td>\n<td>optional</td>\n<td>Specify whether we want to display the options to the user or not</td>\n</tr>\n<tr>\n<td>default</td>\n<td>str</td>\n<td>optional</td>\n<td>If no value is entered, this one will be taken, make sure that it belongs to the options list (if passed)</td>\n</tr>\n<tr>\n<td>condition</td>\n<td>str</td>\n<td>optional</td>\n<td>A character that applies certain restrictions to the value (check <a href=\"#list-3-conditions\" rel=\"nofollow\">List 3</a> for mor info</td>\n</tr></tbody></table>\n<h3>List 1 'flags'</h3>\n<p><strong>COLORS</strong></p>\n<ul>\n<li>k - Applies a black color to the text</li>\n<li>g - Applies a grey color to the text</li>\n<li>w - Applies a white color to the text</li>\n<li>&lt;r - Applies a darkred color to the text</li>\n<li>r - Applies a red color to the text</li>\n<li>r&gt; - Applies a lightred color to the text</li>\n<li>&lt;n - Applies a darkgreen color to the text</li>\n<li>n - Applies a green color to the text</li>\n<li>n&gt; - Applies a lightgreen color to the text</li>\n<li>&lt;y - Applies a darkyellow color to the text</li>\n<li>y - Applies a yellow color to the text</li>\n<li>y&gt; - Applies a lightyellow color to the text</li>\n<li>&lt;b - Applies a darkblue color to the text</li>\n<li>b - Applies a blue color to the text</li>\n<li>b&gt; - Applies a lightblue color to the text</li>\n<li>&lt;m - Applies a darkmagenta color to the text</li>\n<li>m - Applies a magenta color to the text</li>\n<li>m&gt; - Applies a lightmagenta color to the text</li>\n<li>&lt;c - Applies a darkcyan color to the text</li>\n<li>c - Applies a cyan color to the text</li>\n<li>c&gt; - Applies a lightcyan color to the text</li>\n<li>&lt;o - Applies a darkorange color to the text</li>\n<li>o - Applies a orange color to the text</li>\n<li>o&gt; - Applies a lightorange color to the text</li>\n<li>&lt;p - Applies a darkpurple color to the text</li>\n<li>p - Applies a purple color to the text</li>\n<li>p&gt; - Applies a lightpurple color to the text</li>\n</ul>\n<p><strong>FORMATS</strong></p>\n<ul>\n<li>B - Applies a bold font weight to the text</li>\n<li>U - Applies an underline to the text</li>\n<li>I - Applies an italic font type to the text</li>\n<li>H - Highlights the text</li>\n<li>S - crosses out the text, aka Strike</li>\n</ul>\n<h3>List 2 'types'</h3>\n<ul>\n<li>'int': Value must be an integer or a string that can be turn into an integer, returns the value as an integer</li>\n<li>'float': Value must be a float or a string that can be turn into a float, returns the value as a float</li>\n<li>'bool': A string matching 'True' or 'False' if no options are passed, otherwise, a string that matches one of the options, returns the value as a boolean</li>\n<li>'str': The default type, if 'options' is passed, then the string must match one of the options or its item number.</li>\n</ul>\n<h3>List 3 'conditions'</h3>\n<ul>\n<li>'+': Valid for 'int' and 'float' types only. The value must be a <strong>positive</strong> number</li>\n<li>'-': Valid for 'int' and 'float' types only. The value must be a <strong>negative</strong> number</li>\n<li>'i': valid for 'str' and 'bool' types only. The value is case insensitive, by default it is case sensitive</li>\n</ul>\n<h2>Changelog</h2>\n<p><a href=\"CHANGELOG.md\" rel=\"nofollow\">Changelog.md</a></p>\n<h2>Dependencies</h2>\n<p>Printy currently supports Python 3.5 and up. Printy is a cross-platform library</p>\n<h2>Contributing</h2>\n<p>Please feel free to contact me if you want to be part of the project and contribute.\nFork or clone, push to your fork, make a pull request, let's make this a better app\nevery day!!</p>\n<h2>Contributors \u2728</h2>\n<p>Thanks goes to these wonderful people (<a href=\"https://allcontributors.org/docs/en/emoji-key\" rel=\"nofollow\">emoji key</a>):</p>\n\n\n\n<table>\n  <tr>\n    <td align=\"center\"><a href=\"https://github.com/edraobdu\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5c0df64a7741287efee03b7fbb48fea4bfe5a658/68747470733a2f2f61766174617273332e67697468756275736572636f6e74656e742e636f6d2f752f33313737353636333f763d34\" width=\"100px;\"><br><sub><b>Edgardo Obreg\u00f3n</b></sub></a><br><a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" rel=\"nofollow\" title=\"Code\">\ud83d\udcbb</a> <a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" rel=\"nofollow\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"#example-edraobdu\" rel=\"nofollow\" title=\"Examples\">\ud83d\udca1</a> <a href=\"#ideas-edraobdu\" rel=\"nofollow\" title=\"Ideas, Planning, &amp; Feedback\">\ud83e\udd14</a> <a href=\"#maintenance-edraobdu\" rel=\"nofollow\" title=\"Maintenance\">\ud83d\udea7</a> <a href=\"https://github.com/edraobdu/printy/commits?author=edraobdu\" rel=\"nofollow\" title=\"Documentation\">\ud83d\udcd6</a> <a href=\"https://github.com/edraobdu/printy/issues?q=author%3Aedraobdu\" rel=\"nofollow\" title=\"Bug reports\">\ud83d\udc1b</a></td>    \n    <td align=\"center\"><a href=\"https://github.com/farahduk\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a0d60e7936adff433e474abe09ea4cefd68c5f9b/68747470733a2f2f61766174617273332e67697468756275736572636f6e74656e742e636f6d2f752f31353636303333353f763d34\" width=\"100px;\"><br><sub><b>farahduk</b></sub></a><br><a href=\"#ideas-farahduk\" rel=\"nofollow\" title=\"Ideas, Planning, &amp; Feedback\">\ud83e\udd14</a> <a href=\"https://github.com/edraobdu/printy/commits?author=farahduk\" rel=\"nofollow\" title=\"Code\">\ud83d\udcbb</a> <a href=\"#maintenance-farahduk\" rel=\"nofollow\" title=\"Maintenance\">\ud83d\udea7</a></td>\n    <td align=\"center\"><a href=\"https://github.com/mihirs16\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46d08ee59cb12a97414a402c08f8c73697a0d2c3/68747470733a2f2f61766174617273332e67697468756275736572636f6e74656e742e636f6d2f752f34343036333738333f763d34\" width=\"100px;\"><br><sub><b>Mihir Singh</b></sub></a><br><a href=\"https://github.com/edraobdu/printy/commits?author=mihirs16\" rel=\"nofollow\" title=\"Tests\">\u26a0\ufe0f</a> <a href=\"https://github.com/edraobdu/printy/commits?author=mihirs16\" rel=\"nofollow\" title=\"Code\">\ud83d\udcbb</a></td>\n    <td align=\"center\"><a href=\"https://soundcloud.com/lalalaaalala\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f65330cea9fc7d6a79b5de03b38fddb72eda1b44/68747470733a2f2f61766174617273312e67697468756275736572636f6e74656e742e636f6d2f752f373831303334383f763d34\" width=\"100px;\"><br><sub><b>musicprogram</b></sub></a><br><a href=\"#userTesting-musicprogram\" rel=\"nofollow\" title=\"User Testing\">\ud83d\udcd3</a></td>\n  </tr>\n</table>\n\n\n\n<p>This project follows the <a href=\"https://github.com/all-contributors/all-contributors\" rel=\"nofollow\">all-contributors</a> specification. Contributions of any kind welcome!</p>\n\n          </div>"}, "last_serial": 7148672, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "1f48d0864925d4979f774ae24dd62e77", "sha256": "73d94f6b355fbbfe3db6a92bc8904bff6203551a22276c2570e716589bc8de43"}, "downloads": -1, "filename": "printy-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1f48d0864925d4979f774ae24dd62e77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5654, "upload_time": "2020-04-11T17:50:23", "upload_time_iso_8601": "2020-04-11T17:50:23.108156Z", "url": "https://files.pythonhosted.org/packages/2f/d9/8cc7d5ac32935876b29f66b6fa6e4a85f25e5bd1f2295eef259ff5e56cfd/printy-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f2acf96b5a01a89560f600b37913c09", "sha256": "6b939fc8aef60dbd1b0db59a69cf8ea85675446f1090191a02b3619c0666d6df"}, "downloads": -1, "filename": "printy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "5f2acf96b5a01a89560f600b37913c09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4035, "upload_time": "2020-04-11T17:50:25", "upload_time_iso_8601": "2020-04-11T17:50:25.314955Z", "url": "https://files.pythonhosted.org/packages/49/0f/e6428526f167300bd8b070db039a699ab00f40125e0165aedb4478ff4f7d/printy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "c504b758af7b51246609269991c64b95", "sha256": "23aa353a2f7498a51070c0c4c66cc5d6a16245faab74ddb376674b81801470a4"}, "downloads": -1, "filename": "printy-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "c504b758af7b51246609269991c64b95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7608, "upload_time": "2020-04-11T19:28:36", "upload_time_iso_8601": "2020-04-11T19:28:36.535273Z", "url": "https://files.pythonhosted.org/packages/80/06/0a811ba2d72f3a903f2f86a8ff0dae970be6bfb26c39f85ec1fed5df1975/printy-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa39be15a6d4cc519fdb8d82bf892eb1", "sha256": "fbd921a66455812cb574904a46a085596c960987056ac3cdb8a9d46b0cf91760"}, "downloads": -1, "filename": "printy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "aa39be15a6d4cc519fdb8d82bf892eb1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 5942, "upload_time": "2020-04-11T19:28:38", "upload_time_iso_8601": "2020-04-11T19:28:38.754368Z", "url": "https://files.pythonhosted.org/packages/17/0e/e88e034dc78fd6d149c34b027e3d1e343c2afffefbcebb3d17d1a2def4c0/printy-1.0.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "5fb54d520f55413599f6d172bee19ba1", "sha256": "fceaf5f930f270466439d7d3ad8b41c7cc349a4ce68d8cdb102a0a1f04900055"}, "downloads": -1, "filename": "printy-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "5fb54d520f55413599f6d172bee19ba1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 9206, "upload_time": "2020-04-13T07:40:29", "upload_time_iso_8601": "2020-04-13T07:40:29.163812Z", "url": "https://files.pythonhosted.org/packages/3c/a4/a773bbf9efeefa817fedd5d0a240831e28a68b384bca0cf353ff41131fb9/printy-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e228e98f934d946df2eac2e2f0655eb0", "sha256": "56627d2052f1d605c3e6f6d649c503973ebb9bff40b506552d7967dcbcedba57"}, "downloads": -1, "filename": "printy-1.1.1.tar.gz", "has_sig": false, "md5_digest": "e228e98f934d946df2eac2e2f0655eb0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7432, "upload_time": "2020-04-13T07:40:30", "upload_time_iso_8601": "2020-04-13T07:40:30.033440Z", "url": "https://files.pythonhosted.org/packages/1b/76/de931b73b68fc8590aa6ab4c64a1179affa4189b3b67e34397478707e6b8/printy-1.1.1.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "ffccb4c23c8ad99fdfdaf9d81b52212c", "sha256": "17d78701dadf4c953b7aca17c0bccc48ff77d65fcdee2701f2ef654cc290ed52"}, "downloads": -1, "filename": "printy-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ffccb4c23c8ad99fdfdaf9d81b52212c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17004, "upload_time": "2020-04-14T22:06:41", "upload_time_iso_8601": "2020-04-14T22:06:41.641130Z", "url": "https://files.pythonhosted.org/packages/35/af/d91851b6b351e5d5b3a777ecbe61e656b8f0436b64280a19ce4c999f8a17/printy-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae1a89684215882c5ae18426b7cbd036", "sha256": "29ac7499ee20e9e2991c2c87ff90139c1ec5948df6d08b62e98356e13f336bef"}, "downloads": -1, "filename": "printy-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ae1a89684215882c5ae18426b7cbd036", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 14608, "upload_time": "2020-04-14T22:06:42", "upload_time_iso_8601": "2020-04-14T22:06:42.805575Z", "url": "https://files.pythonhosted.org/packages/dc/ab/a4b9de05028f014fb999ea5a60ae14e286fb530fc651e40bc33fbd8cec83/printy-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "9ce802253edbd4bea6f36c60970fed15", "sha256": "c8f1536ec985812c3868db3207fe820fd2a499990be4518dc78d700360035b5c"}, "downloads": -1, "filename": "printy-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "9ce802253edbd4bea6f36c60970fed15", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 17033, "upload_time": "2020-04-15T02:09:55", "upload_time_iso_8601": "2020-04-15T02:09:55.223276Z", "url": "https://files.pythonhosted.org/packages/fc/df/30bdab1f28d6468d692c344f13a799ef148520ac81b8c3752b91ea4955cc/printy-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aab614f566ea0cad75a9ca5e463fb893", "sha256": "187b3b83fce273f5ea34f2e8c8136fe614dff5913bbb322baf817b85c65dac33"}, "downloads": -1, "filename": "printy-1.2.1.tar.gz", "has_sig": false, "md5_digest": "aab614f566ea0cad75a9ca5e463fb893", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17509, "upload_time": "2020-04-15T02:09:57", "upload_time_iso_8601": "2020-04-15T02:09:57.675986Z", "url": "https://files.pythonhosted.org/packages/fa/8f/2ddbac48e2f27a49b6c69a0663f9f2bebe4822875e1d148d298ba294f470/printy-1.2.1.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "f45bd6f3efd7c1bd97c39227aedcc980", "sha256": "5d649b31e8e639ee1400dc79de89ccfd89a79853d3510e299e768051d0cfe5d4"}, "downloads": -1, "filename": "printy-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f45bd6f3efd7c1bd97c39227aedcc980", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 19730, "upload_time": "2020-04-27T23:08:07", "upload_time_iso_8601": "2020-04-27T23:08:07.855329Z", "url": "https://files.pythonhosted.org/packages/19/4b/55322e13a8b8acd40eb5dcdabc298ac3f5210e2af543a74327a9b9ab860d/printy-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13ffe490699839d45a43b87be6620930", "sha256": "a021549730cb7eddebb3148de5f408607eacc351a3fe6acea1a323d1af955d41"}, "downloads": -1, "filename": "printy-2.0.0.tar.gz", "has_sig": false, "md5_digest": "13ffe490699839d45a43b87be6620930", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17100, "upload_time": "2020-04-27T23:08:08", "upload_time_iso_8601": "2020-04-27T23:08:08.838706Z", "url": "https://files.pythonhosted.org/packages/76/75/70566db968b6240445445ccc2ced0582ec9d64cca03cf62bea8be9e5a63d/printy-2.0.0.tar.gz", "yanked": false}], "2.0.1": [{"comment_text": "", "digests": {"md5": "ccaba8dd7c6032f987f0a50d1fbfd350", "sha256": "35bab6164b776b5eb127999e8f0c15d0b255a8a972dc45ae15ec9665d5bd97fc"}, "downloads": -1, "filename": "printy-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ccaba8dd7c6032f987f0a50d1fbfd350", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20261, "upload_time": "2020-05-01T22:34:13", "upload_time_iso_8601": "2020-05-01T22:34:13.100094Z", "url": "https://files.pythonhosted.org/packages/ea/81/349652170c6c133591c8f4e5d391f947497f4c2408925f352192915f5218/printy-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0f64de6d814b986aeac818851238d68", "sha256": "e56ec11b30f290d8ff38bc56b865428dc94702baf38f8fff9659cc8dca620466"}, "downloads": -1, "filename": "printy-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c0f64de6d814b986aeac818851238d68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17838, "upload_time": "2020-05-01T22:34:14", "upload_time_iso_8601": "2020-05-01T22:34:14.664200Z", "url": "https://files.pythonhosted.org/packages/bf/01/b758ea6988ec7ad232153a62380b69137c1474b25ed09b811f5477a1e571/printy-2.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccaba8dd7c6032f987f0a50d1fbfd350", "sha256": "35bab6164b776b5eb127999e8f0c15d0b255a8a972dc45ae15ec9665d5bd97fc"}, "downloads": -1, "filename": "printy-2.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ccaba8dd7c6032f987f0a50d1fbfd350", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 20261, "upload_time": "2020-05-01T22:34:13", "upload_time_iso_8601": "2020-05-01T22:34:13.100094Z", "url": "https://files.pythonhosted.org/packages/ea/81/349652170c6c133591c8f4e5d391f947497f4c2408925f352192915f5218/printy-2.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c0f64de6d814b986aeac818851238d68", "sha256": "e56ec11b30f290d8ff38bc56b865428dc94702baf38f8fff9659cc8dca620466"}, "downloads": -1, "filename": "printy-2.0.1.tar.gz", "has_sig": false, "md5_digest": "c0f64de6d814b986aeac818851238d68", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17838, "upload_time": "2020-05-01T22:34:14", "upload_time_iso_8601": "2020-05-01T22:34:14.664200Z", "url": "https://files.pythonhosted.org/packages/bf/01/b758ea6988ec7ad232153a62380b69137c1474b25ed09b811f5477a1e571/printy-2.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:15 2020"}