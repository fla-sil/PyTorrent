{"info": {"author": "Jeremy Cohen", "author_email": "jeremy.cohen@imperial.ac.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# django-drf-filepond: A filepond server implementation for Django + Django REST Framework\n\n[![PyPI version](https://img.shields.io/pypi/v/django-drf-filepond.svg)](https://pypi.python.org/pypi/django-drf-filepond/) [![Supported python versions](https://img.shields.io/pypi/pyversions/django-drf-filepond)](https://pypi.python.org/pypi/django-drf-filepond/) [![Build Status](https://travis-ci.org/ImperialCollegeLondon/django-drf-filepond.svg?branch=master)](https://travis-ci.org/ImperialCollegeLondon/django-drf-filepond) [![Documentation Status](https://readthedocs.org/projects/django-drf-filepond/badge/?version=latest)](http://django-drf-filepond.readthedocs.io/?badge=latest)\n\n**django-drf-filepond** is a Django app that provides a [filepond](https://github.com/pqina/filepond) server-side implementation for Django/Django REST Framework projects. The app can be easily added to your Django projects to provide a server-side API for the filepond file upload library.\n\ndjango-drf-filepond supports remote storage of uploads via [*django-storages*](https://django-storages.readthedocs.io/)\n\n:new: Support for filepond chunked uploads now available from version 0.3.0.\n\nFurther documentation and a tutorial are available at [https://django-drf-filepond.readthedocs.io](https://django-drf-filepond.readthedocs.io).\n\n### Installation\n\nThe app can be installed from PyPi:\n\n```\npip install django-drf-filepond\n```\n\nor add it to your list of dependencies in a [_requirements.txt_](https://pip.pypa.io/en/stable/user_guide/#requirements-files) file.\n\n### Configuration\n\nThere are three key configuration updates to make within your Django application to set up django-drf-filepond:\n\n##### 1. Add the app to INSTALLED_APPS:\n\nAdd 'django-drf-filepond' to `INSTALLED_APPS` in your Django settings file (e.g. `settings.py`):\n\n```python\n...\n\nINSTALLED_APPS = [\n\t...,\n\t'django_drf_filepond'\n]\n\n...\n```\n\n##### 2. Set the temporary file upload location:\n\nSet the location where you want django-drf-filepond to store temporary file uploads by adding the `DJANGO_DRF_FILEPOND_UPLOAD_TMP` configuration variable to your settings file, e.g.:\n\n```python\nimport os\n...\nDJANGO_DRF_FILEPOND_UPLOAD_TMP = os.path.join(BASE_DIR, 'filepond-temp-uploads')\n...\n```\n\n##### 3. Include the app urls into your main url configuration\n\nAdd the URL mappings for django-drf-filepond to your URL configuration in `urls.py`:\n\n```python\nfrom django.conf.urls import url, include\n\nurlpatterns = [\n\t...\n\turl(r'^fp/', include('django_drf_filepond.urls')),\n]\n```\n\nOn the client side, you need to set the endpoints of the `process`, `revert`, `fetch`, `load`, `restore` and `patch` functions to match the endpoint used in your path statement above. For example if the first parameter to `url` is `fp/` then the endpoint for the process function will be `/fp/process/`.\n\n##### (Optional) 4. File storage configuration\n\nInitially, uploaded files are stored in a temporary staging area (the location you set in item 2 above, with the `DJANGO_DRF_FILEPOND_UPLOAD_TMP` parameter. At this point, an uploaded file is still shown in the filepond UI on the client and the user can choose to cancel the upload resulting in the file being deleted from temporary storage and the upload being cancelled. When a user confirms a file upload, e.g. by submitting the form in which the filepond component is embedded, any temporary uploads need to be moved to a permanent storage location.\n\nThere are three different options for file storage:\n\n- Use a location on a local filesystem on the host server for file storage \n  (see Section 4.1)\n\n- Use a remote file storage backend via the [*django-storages*](https://django-storages.readthedocs.io/en/latest>) library (see Section 4.2)\n\n- Manage file storage yourself, independently of *django-drf-filepond* (in this case, filepond ``load`` functionality is not supported)\n\nMore detailed information on handling file uploads and using the *django-drf-filepond* API to store them is provided in the *Working with file uploads* section below.\n\n###### 4.1 Storage of filepond uploads using the local file system\n\nTo use the local filesystem for storage, you need to specify where to store files. Set the `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` parameter in your Django application settings file to specify the base location where stored uploads will be placed, e.g.:\n\n```python\n...\nDJANGO_DRF_FILEPOND_FILE_STORE_PATH = os.path.join(BASE_DIR, 'stored_uploads')\n...\n```\n\nThe specified path for each stored upload will then be created relative to this location. For example, given the setting shown above, if `BASE_DIR` were `/tmp/django-drf-filepond`, then a temporary upload with the specified target location of either `/mystoredupload/uploaded_file.txt` or `mystoredupload/uploaded_file.txt` would be stored to `/tmp/django-drf-filepond/stored_uploads/mystoredupload/uploaded_file.txt`\n\nWhen using local file storage, `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` is the only required setting.\n\n###### 4.2 Remote storage of filepond uploads via django-storages\n\nThe [*django-storages*](https://github.com/jschneier/django-storages>) library provides support for a number of different remote file storage backends. The [django-storages documentation](https://django-storages.readthedocs.io/en/latest) lists the supported backends.\n\nTo enable *django-storages* support for django-drf-filepond, set the `DJANGO_DRF_FILEPOND_STORAGES_BACKEND` parameter in your application configuration to the *django-storages* backend that you wish to use. You need to specify the fully-qualified class name for the storage backend that you want to use. This is the same value that would be used for the *django-storages* `DEFAULT_FILE_STORAGE` parameter and the required value can be found either by looking at the [django-storages documentation](https://django-storages.readthedocs.io/en/latest) for the backend that you want to use, or by looking at the [code on GitHub](https://github.com/jschneier/django-storages/tree/master/storages/backends).\n\nFor example, if you want to use the SFTP storage backend, add the following to your application settings:\n\n```python\n...\nDJANGO_DRF_FILEPOND_STORAGES_BACKEND = \\\n\t'storages.backends.sftpstorage.SFTPStorage'\n...\n```\n\nor, for the Amazon S3 backend:\n\n```python\n...\nDJANGO_DRF_FILEPOND_STORAGES_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'\n...\n```\n\nFor each storage backend, there are a number of additional *django-storages* configuration options that must be specified. These are detailed in the *django-storages* documentation.\n\nThe following is an example of a complete set of configuration parameters for using an Amazon S3 storage backend for django-drf-filepond via django-storages:\n\n```python\n\t...\n\tDJANGO_DRF_FILEPOND_STORAGES_BACKEND = 'storages.backends.s3boto3.S3Boto3Storage'\n\tAWS_ACCESS_KEY_ID = '<YOUR AWS ACCESS KEY>'\n\tAWS_SECRET_ACCESS_KEY = '<YOUR AWS SECRET KEY>'\n\tAWS_STORAGE_BUCKET_NAME = 'django-drf-filepond'\n\tAWS_AUTO_CREATE_BUCKET = True\n\tAWS_S3_REGION_NAME = 'eu-west-1'\n\t...\n```\n\n*NOTE: django-storages is now included as a core dependency of django-drf-filepond. However, the different django-storages backends each have their own additional dependencies __which you need to install manually__ or add to your own app's dependencies.*\n\n*You can add additional dependencies using* `pip` *by specifying the optional extras feature tag, e.g. to install additional dependencies required for django-storages' Amazon S3 support run*:\n\n```shell\n\t$ pip install django-storages[boto3]\n```\t\n\nSee the *Working with file uploads* section for more details on how to use the django-drf-filepond API to store files to a local or remote file store. \n\n*NOTE:* `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` *is not used when using a remote file store backend. It is recommended to remove this setting or leave it set to None.*\n\n*The base storage location for a remote file storage backend from django-storages is set using a setting specific to the backend that you are using - see the django-storages documentation for your chosen backend for further information.*\n\n###### (Optional) 4. Set the permanent file store location\n\nIf you wish to let django-drf-filepond manage the permanent storage of file uploads  _(note that this is required if you wish to use the `load` method)_, you need to set `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` in your application settings file, e.g.\n\n```python\n...\nDJANGO_DRF_FILEPOND_FILE_STORE_PATH = os.path.join(BASE_DIR, 'stored_uploads')\n...\n```\nSee _\"Working with file uploads\"_ below for more information on how to move temporary uploads to _django-drf-filepond_-managed permanent storage.\n\n### Working with file uploads\n\nWhen a file is uploaded from a filepond client, the file is placed into a uniquely named directory within the temporary upload directory specified by the `DJANGO_DRF_FILEPOND_UPLOAD_TMP` parameter. As per the filepond [server spec](https://pqina.nl/filepond/docs/patterns/api/server/), the server returns a unique identifier for the file upload. In this case, the identifier is a 22-character unique ID generated using the [shortuuid](https://github.com/skorokithakis/shortuuid) library. This ID is the name used for the directory created under `DJANGO_DRF_FILEPOND_UPLOAD_TMP` into which the file is placed. At present, the file also has a separate unique identifier which hides the original name of the file on the server filesystem. The original filename is stored within the django-drf-filepond app's database.\n\nWhen/if the client subsequently submits the form associated with the filepond instance that triggered the upload, the unique directory ID will be passed and this can be used to look up the temporary file.\n\n#### Chunked uploads\n\n_django-drf-filepond_ now supports filepond [chunked uploads](https://pqina.nl/filepond/docs/patterns/api/server/#chunk-uploads). There is no configuration required for _django-drf-filepond_ on the server side to handle chunked uploads.\n\nOn the client side, you need to ensure that your [filepond configuration](https://pqina.nl/filepond/docs/patterns/api/filepond-instance/#server-configuration) specifies server endpoints for both the `process` and `patch` methods and that you have the required configuration options in place to enable chunked uploads. For example, if you want to enable `chunkUploads` and send uploads in 500,000 byte chunks, your filepond configuration should include properties similar to the following:\n\n```python\nFilePond.setOptions({\n    ...\n    chunkUploads: true,\n    chunkSize: 500000,\n    server: {\n        url: 'https://.../fp',\n        process: '/process/',\n        patch: '/patch/',\n        revert: '/revert/',\n        fetch: '/fetch/?target='\n    }\n    ...\n});\n```\n\n#### Storing file uploads\n\nThere are two different approaches for handling temporary uploads that need to be stored permanently on a server after being uploaded from a filepond client via django-drf-filepond. _These two approaches are not mutually exclusive and you can choose to use one approach for some files and the other approach for other files if you wish._\n\n\n\n##### 1. Manual handling of file storage\n\nUsing this approach, you move the file initially stored as a temporary upload by _django-drf-filepond_ to a storage location of your choice and the file then becomes independent of _django-drf-filepond_. The following example shows how to lookup a temporary upload given its unique upload ID and move it to a permanent storage location. The temporary upload record is then deleted and _django-drf-filepond_ no longer has any awareness of the file:\n\n```python\nimport os\nfrom django_drf_filepond.models import TemporaryUpload\n\n# Get the temporary upload record\ntu = TemporaryUpload.objects.get(upload_id='<22-char unique ID>')\n\n# Move the file somewhere for permanent storage\n# The file will be saved with its original name\nos.rename(tu.get_file_path(), '/path/to/permanent/location/%s' % tu.upload_name)\n\n# Delete the temporary upload record and the temporary directory\ntu.delete()\n```\n\n##### 2. Use django-drf-filepond's API to store a temporary upload to permanent storage\n\n**Note:** You must use this approach for storing any files that you subsequently want to access using filepond's `load` function.\n\nUsing this approach, the file is stored either to local storage or to a remote storage service depending on the file store configuration you are using. \n\n###### 2.1 `store_upload`\n\n`store_upload` stores a temporary upload, uploaded as a result of adding it to the filepond component in a web page, to permanent storage. \n\nIf you have configured *django-drf-filepond* to use local file storage by setting the `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` parameter in your application settings, the file will be stored to a location under this directory.\n\nIf you have configured a remote file store via *django-storages*, the stored upload will be sent to the configured storage backend via *django-storages*.\n\n_**Parameters:**_\n\n`upload_id`: The unique ID assigned to the upload by *django-drf-filepond* when the file was initially uploaded via filepond.\n\n`destination_file_path`: The location where the file should be stored. This location will be appended to the base file storage location as defined using the `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` parameter, or, for remote storage backends, the location configured using the relevant *django-storages* parameters. If you pass an absolute path beginning with `/`, the leading `/` will be removed. The path that you provide should also include the target filename.\n\n_**Returns:**_\n\nA `django_drf_filepond.models.StoredUpload` object representing the stored upload.\n\nRaises `django.core.exceptions.ImproperlyConfigured` if using a local file store and `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` has not been set.\n\nRaises `ValueError` if:\n\n - an `upload_id` is provided in an invalid format\n - the `destination_file_path` is not provided\n - a `django_drf_filepond.models.TemporaryUpload` record for the provided `upload_id` is not found\n\n\n\n\n\n*Example:*\n\n```python\nfrom django_drf_filepond.api import store_upload\n\n# Given a variable upload_id containing a 22-character unique file upload ID:\nsu = store_upload(upload_id, destination_file_path='target_dir/filename.ext')\n# destination_file_path is a relative path (including target filename. \n# The path will created under the file store directory and the original \n# temporary upload will be deleted.\n\n``` \n\n###### 2.2 `get_stored_upload` / `get_stored_upload_file_data`\n\nGet access to a stored upload and the associated file data.\n\n`get_stored_upload`: Given an `upload_id`, return the associated `django_drf_filepond.models.StoredUpload` object.\n\nThrows `django_drf_filepond.models.StoredUpload.DoesNotExist` if a database record doesn't exist for the specified `upload_id`.\n\n`get_stored_upload_file_data`: Given a StoredUpload object, return the file data for the upload as a Python [file-like object](https://docs.python.org/3/glossary.html#term-file-like-object).\n\n_**Parameters:**_\n\n`stored_upload`: A `django_drf_filepond.models.StoredUpload` object for which you want retrieve the file data.\n\n_**Returns:**_\n\nReturns a tuple `(filename, bytes_io)` where `filename` is a string representing the name of the stored file being returned and `bytes_io` is an `io.BytesIO` object from which the file data can be read. If an error occurs, raises an exception:\n\n - `django_drf_filepond.exceptions.ConfigurationError`: Thrown if using a local file store and `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` is not set or the specified location does not exist, or is not a directory.\n - `FileNotFoundError`: Thrown if using a remote file store and the file store API reports that the file doesn't exist. If using a local file store, thrown if the file does not exist or the location is a directory and not a file.\n - `IOError`: Thrown if using a local file store and reading the file fails.\n\n*Example:*\n\n```python\nfrom django_drf_filepond.api import get_stored_upload\nfrom django_drf_filepond.api import get_stored_upload_file_data\n\n# Given a variable upload_id containing a 22-character unique \n# upload ID representing a stored upload:\nsu = get_store_upload(upload_id)\n(filename, bytes_io) = get_store_upload_file_data(su)\nfile_data = bytes_io.read()\n``` \n\n###### 2.3 `delete_stored_upload`\n\n`delete_stored_upload` deletes a stored upload record and, optionally, the associated file that is stored on either a local disk or a remote file storage service.\n\n_**Parameters:**_\n\n`upload_id`: The unique ID assigned to the upload by *django-drf-filepond* when the file was initially uploaded via filepond.\n\n`delete_file`: `True` to delete the file associated with the record, `False` to leave the file in place.\n\n_**Returns:**_\n\nReturns `True` if the stored upload is deleted successfully, otherwise raises an exception:\n\n - `django_drf_filepond.models.StoredUpload.DoesNotExist` exception if no upload exists for the specified `upload_id`.\n - `django_drf_filepond.exceptions.ConfigurationError`: Thrown if using a local file store and `DJANGO_DRF_FILEPOND_FILE_STORE_PATH` is not set or the specified location does not exist, or is not a directory.\n - `FileNotFoundError`: Thrown if using a remote file store and the file store API reports that the file doesn't exist. If using a local file store, thrown if the file does not exist or the location is a directory and not a file.\n - `OSError`: Thrown if using a local file store and the file deletion fails.\n\n```python\nfrom django_drf_filepond.api import delete_stored_upload\n\n# Given a variable upload_id containing a 22-character unique \n# upload ID representing a stored upload:\ndelete_stored_upload(upload_id, delete_file=True)\n# delete_file=True will delete the file from the local \n# disk or the remote storage service.\n``` \n\n#### DRF Permissions\n\nBy default no permissions are applied on API endpoints. If you want to assign certain permissions such as ```rest_framework.permissions.IsAuthenticated``` you can do it like so:\n\n```python\nDJANGO_DRF_FILEPOND_PERMISSION_CLASSES = {\n    'GET_FETCH': ['rest_framework.permissions.IsAuthenticated', ],\n    'GET_LOAD': ['rest_framework.permissions.IsAuthenticated', ],\n    'POST_PROCESS': ['rest_framework.permissions.IsAuthenticated', ],\n    'GET_RESTORE': ['rest_framework.permissions.IsAuthenticated', ],\n    'DELETE_REVERT': ['rest_framework.permissions.IsAuthenticated', ],\n    'PATCH_PATCH': ['rest_framework.permissions.IsAuthenticated', ],\n}\n```\n\nYou can add more than one permission for each endpoint. \n\nThe above list includes all the permission names currently defined on django-drf-filepond views. The naming convention used is `<METHOD_NAME>_<ENDPOINT_NAME>` where `<METHOD_NAME>` is the method name used for a request and `<ENDPOINT_NAME>` is the URL endpoint called. So, for example, a `POST` request to `/fp/process` would be handled by the permission classes defined for `POST_PROCESS`.\n\n### License\n\nThis repository is licensed under a BSD 3-Clause license. Please see the [LICENSE](LICENSE) file in the root of the repository.\n\n### Acknowledgements\n\nThanks to [pqina](https://github.com/pqina) for producing the [filepond](https://pqina.nl/filepond/) file upload library that this Django app provides server-side support for.\n\nThe django-drf-filepond app has been built as part of work that is being supported by UK Research and Innovation (Engineering and Physical Sciences Research Council) under grant EP/R025460/1.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/ImperialCollegeLondon/django-drf-filepond.git", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ImperialCollegeLondon/django-drf-filepond", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "django-drf-filepond", "package_url": "https://pypi.org/project/django-drf-filepond/", "platform": "", "project_url": "https://pypi.org/project/django-drf-filepond/", "project_urls": {"Download": "https://github.com/ImperialCollegeLondon/django-drf-filepond.git", "Homepage": "https://github.com/ImperialCollegeLondon/django-drf-filepond"}, "release_url": "https://pypi.org/project/django-drf-filepond/0.3.0/", "requires_dist": ["shortuuid (>=0.5.0)", "requests (>=2.20.1)", "django-storages (>=1.8)", "six (>=1.14.0)", "Django (<2.0.0,>=1.11.27) ; python_version == \"2.7\"", "djangorestframework (==3.9.3) ; python_version == \"2.7\"", "Django (<3.0.0,>=2.2.9) ; python_version == \"3.5\"", "djangorestframework (>=3.9.3) ; python_version >= \"3.5\"", "Django (>=2.2) ; python_version >= \"3.6\""], "requires_python": "", "summary": "Filepond server app for Django REST Framework", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>django-drf-filepond: A filepond server implementation for Django + Django REST Framework</h1>\n<p><a href=\"https://pypi.python.org/pypi/django-drf-filepond/\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0f5d554a2078b903ad848f4072204154592dba91/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f2d6472662d66696c65706f6e642e737667\"></a> <a href=\"https://pypi.python.org/pypi/django-drf-filepond/\" rel=\"nofollow\"><img alt=\"Supported python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1548836a968dcbd1c93c93c441804b893029b42b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f2d6472662d66696c65706f6e64\"></a> <a href=\"https://travis-ci.org/ImperialCollegeLondon/django-drf-filepond\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/59c67cdd47b451d5d9cc640a9f6a3a28af9b6417/68747470733a2f2f7472617669732d63692e6f72672f496d70657269616c436f6c6c6567654c6f6e646f6e2f646a616e676f2d6472662d66696c65706f6e642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"http://django-drf-filepond.readthedocs.io/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a42015752f3c5f0038c7b755ca0ec97f7e05d670/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f646a616e676f2d6472662d66696c65706f6e642f62616467652f3f76657273696f6e3d6c6174657374\"></a></p>\n<p><strong>django-drf-filepond</strong> is a Django app that provides a <a href=\"https://github.com/pqina/filepond\" rel=\"nofollow\">filepond</a> server-side implementation for Django/Django REST Framework projects. The app can be easily added to your Django projects to provide a server-side API for the filepond file upload library.</p>\n<p>django-drf-filepond supports remote storage of uploads via <a href=\"https://django-storages.readthedocs.io/\" rel=\"nofollow\"><em>django-storages</em></a></p>\n<p>:new: Support for filepond chunked uploads now available from version 0.3.0.</p>\n<p>Further documentation and a tutorial are available at <a href=\"https://django-drf-filepond.readthedocs.io\" rel=\"nofollow\">https://django-drf-filepond.readthedocs.io</a>.</p>\n<h3>Installation</h3>\n<p>The app can be installed from PyPi:</p>\n<pre><code>pip install django-drf-filepond\n</code></pre>\n<p>or add it to your list of dependencies in a <a href=\"https://pip.pypa.io/en/stable/user_guide/#requirements-files\" rel=\"nofollow\"><em>requirements.txt</em></a> file.</p>\n<h3>Configuration</h3>\n<p>There are three key configuration updates to make within your Django application to set up django-drf-filepond:</p>\n<h5>1. Add the app to INSTALLED_APPS:</h5>\n<p>Add 'django-drf-filepond' to <code>INSTALLED_APPS</code> in your Django settings file (e.g. <code>settings.py</code>):</p>\n<pre><span class=\"o\">...</span>\n\n<span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"o\">...</span><span class=\"p\">,</span>\n\t<span class=\"s1\">'django_drf_filepond'</span>\n<span class=\"p\">]</span>\n\n<span class=\"o\">...</span>\n</pre>\n<h5>2. Set the temporary file upload location:</h5>\n<p>Set the location where you want django-drf-filepond to store temporary file uploads by adding the <code>DJANGO_DRF_FILEPOND_UPLOAD_TMP</code> configuration variable to your settings file, e.g.:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"o\">...</span>\n<span class=\"n\">DJANGO_DRF_FILEPOND_UPLOAD_TMP</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'filepond-temp-uploads'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<h5>3. Include the app urls into your main url configuration</h5>\n<p>Add the URL mappings for django-drf-filepond to your URL configuration in <code>urls.py</code>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n\t<span class=\"o\">...</span>\n\t<span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^fp/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django_drf_filepond.urls'</span><span class=\"p\">)),</span>\n<span class=\"p\">]</span>\n</pre>\n<p>On the client side, you need to set the endpoints of the <code>process</code>, <code>revert</code>, <code>fetch</code>, <code>load</code>, <code>restore</code> and <code>patch</code> functions to match the endpoint used in your path statement above. For example if the first parameter to <code>url</code> is <code>fp/</code> then the endpoint for the process function will be <code>/fp/process/</code>.</p>\n<h5>(Optional) 4. File storage configuration</h5>\n<p>Initially, uploaded files are stored in a temporary staging area (the location you set in item 2 above, with the <code>DJANGO_DRF_FILEPOND_UPLOAD_TMP</code> parameter. At this point, an uploaded file is still shown in the filepond UI on the client and the user can choose to cancel the upload resulting in the file being deleted from temporary storage and the upload being cancelled. When a user confirms a file upload, e.g. by submitting the form in which the filepond component is embedded, any temporary uploads need to be moved to a permanent storage location.</p>\n<p>There are three different options for file storage:</p>\n<ul>\n<li>\n<p>Use a location on a local filesystem on the host server for file storage\n(see Section 4.1)</p>\n</li>\n<li>\n<p>Use a remote file storage backend via the <a href=\"https://django-storages.readthedocs.io/en/latest%3E\" rel=\"nofollow\"><em>django-storages</em></a> library (see Section 4.2)</p>\n</li>\n<li>\n<p>Manage file storage yourself, independently of <em>django-drf-filepond</em> (in this case, filepond <code>load</code> functionality is not supported)</p>\n</li>\n</ul>\n<p>More detailed information on handling file uploads and using the <em>django-drf-filepond</em> API to store them is provided in the <em>Working with file uploads</em> section below.</p>\n<h6>4.1 Storage of filepond uploads using the local file system</h6>\n<p>To use the local filesystem for storage, you need to specify where to store files. Set the <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> parameter in your Django application settings file to specify the base location where stored uploads will be placed, e.g.:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">DJANGO_DRF_FILEPOND_FILE_STORE_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'stored_uploads'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>The specified path for each stored upload will then be created relative to this location. For example, given the setting shown above, if <code>BASE_DIR</code> were <code>/tmp/django-drf-filepond</code>, then a temporary upload with the specified target location of either <code>/mystoredupload/uploaded_file.txt</code> or <code>mystoredupload/uploaded_file.txt</code> would be stored to <code>/tmp/django-drf-filepond/stored_uploads/mystoredupload/uploaded_file.txt</code></p>\n<p>When using local file storage, <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> is the only required setting.</p>\n<h6>4.2 Remote storage of filepond uploads via django-storages</h6>\n<p>The <a href=\"https://github.com/jschneier/django-storages%3E\" rel=\"nofollow\"><em>django-storages</em></a> library provides support for a number of different remote file storage backends. The <a href=\"https://django-storages.readthedocs.io/en/latest\" rel=\"nofollow\">django-storages documentation</a> lists the supported backends.</p>\n<p>To enable <em>django-storages</em> support for django-drf-filepond, set the <code>DJANGO_DRF_FILEPOND_STORAGES_BACKEND</code> parameter in your application configuration to the <em>django-storages</em> backend that you wish to use. You need to specify the fully-qualified class name for the storage backend that you want to use. This is the same value that would be used for the <em>django-storages</em> <code>DEFAULT_FILE_STORAGE</code> parameter and the required value can be found either by looking at the <a href=\"https://django-storages.readthedocs.io/en/latest\" rel=\"nofollow\">django-storages documentation</a> for the backend that you want to use, or by looking at the <a href=\"https://github.com/jschneier/django-storages/tree/master/storages/backends\" rel=\"nofollow\">code on GitHub</a>.</p>\n<p>For example, if you want to use the SFTP storage backend, add the following to your application settings:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">DJANGO_DRF_FILEPOND_STORAGES_BACKEND</span> <span class=\"o\">=</span> \\\n\t<span class=\"s1\">'storages.backends.sftpstorage.SFTPStorage'</span>\n<span class=\"o\">...</span>\n</pre>\n<p>or, for the Amazon S3 backend:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">DJANGO_DRF_FILEPOND_STORAGES_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'storages.backends.s3boto3.S3Boto3Storage'</span>\n<span class=\"o\">...</span>\n</pre>\n<p>For each storage backend, there are a number of additional <em>django-storages</em> configuration options that must be specified. These are detailed in the <em>django-storages</em> documentation.</p>\n<p>The following is an example of a complete set of configuration parameters for using an Amazon S3 storage backend for django-drf-filepond via django-storages:</p>\n<pre>\t<span class=\"o\">...</span>\n\t<span class=\"n\">DJANGO_DRF_FILEPOND_STORAGES_BACKEND</span> <span class=\"o\">=</span> <span class=\"s1\">'storages.backends.s3boto3.S3Boto3Storage'</span>\n\t<span class=\"n\">AWS_ACCESS_KEY_ID</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;YOUR AWS ACCESS KEY&gt;'</span>\n\t<span class=\"n\">AWS_SECRET_ACCESS_KEY</span> <span class=\"o\">=</span> <span class=\"s1\">'&lt;YOUR AWS SECRET KEY&gt;'</span>\n\t<span class=\"n\">AWS_STORAGE_BUCKET_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'django-drf-filepond'</span>\n\t<span class=\"n\">AWS_AUTO_CREATE_BUCKET</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\t<span class=\"n\">AWS_S3_REGION_NAME</span> <span class=\"o\">=</span> <span class=\"s1\">'eu-west-1'</span>\n\t<span class=\"o\">...</span>\n</pre>\n<p><em>NOTE: django-storages is now included as a core dependency of django-drf-filepond. However, the different django-storages backends each have their own additional dependencies <strong>which you need to install manually</strong> or add to your own app's dependencies.</em></p>\n<p><em>You can add additional dependencies using</em> <code>pip</code> <em>by specifying the optional extras feature tag, e.g. to install additional dependencies required for django-storages' Amazon S3 support run</em>:</p>\n<pre>\t$ pip install django-storages<span class=\"o\">[</span>boto3<span class=\"o\">]</span>\n</pre>\n<p>See the <em>Working with file uploads</em> section for more details on how to use the django-drf-filepond API to store files to a local or remote file store.</p>\n<p><em>NOTE:</em> <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> <em>is not used when using a remote file store backend. It is recommended to remove this setting or leave it set to None.</em></p>\n<p><em>The base storage location for a remote file storage backend from django-storages is set using a setting specific to the backend that you are using - see the django-storages documentation for your chosen backend for further information.</em></p>\n<h6>(Optional) 4. Set the permanent file store location</h6>\n<p>If you wish to let django-drf-filepond manage the permanent storage of file uploads  <em>(note that this is required if you wish to use the <code>load</code> method)</em>, you need to set <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> in your application settings file, e.g.</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">DJANGO_DRF_FILEPOND_FILE_STORE_PATH</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">BASE_DIR</span><span class=\"p\">,</span> <span class=\"s1\">'stored_uploads'</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>See <em>\"Working with file uploads\"</em> below for more information on how to move temporary uploads to <em>django-drf-filepond</em>-managed permanent storage.</p>\n<h3>Working with file uploads</h3>\n<p>When a file is uploaded from a filepond client, the file is placed into a uniquely named directory within the temporary upload directory specified by the <code>DJANGO_DRF_FILEPOND_UPLOAD_TMP</code> parameter. As per the filepond <a href=\"https://pqina.nl/filepond/docs/patterns/api/server/\" rel=\"nofollow\">server spec</a>, the server returns a unique identifier for the file upload. In this case, the identifier is a 22-character unique ID generated using the <a href=\"https://github.com/skorokithakis/shortuuid\" rel=\"nofollow\">shortuuid</a> library. This ID is the name used for the directory created under <code>DJANGO_DRF_FILEPOND_UPLOAD_TMP</code> into which the file is placed. At present, the file also has a separate unique identifier which hides the original name of the file on the server filesystem. The original filename is stored within the django-drf-filepond app's database.</p>\n<p>When/if the client subsequently submits the form associated with the filepond instance that triggered the upload, the unique directory ID will be passed and this can be used to look up the temporary file.</p>\n<h4>Chunked uploads</h4>\n<p><em>django-drf-filepond</em> now supports filepond <a href=\"https://pqina.nl/filepond/docs/patterns/api/server/#chunk-uploads\" rel=\"nofollow\">chunked uploads</a>. There is no configuration required for <em>django-drf-filepond</em> on the server side to handle chunked uploads.</p>\n<p>On the client side, you need to ensure that your <a href=\"https://pqina.nl/filepond/docs/patterns/api/filepond-instance/#server-configuration\" rel=\"nofollow\">filepond configuration</a> specifies server endpoints for both the <code>process</code> and <code>patch</code> methods and that you have the required configuration options in place to enable chunked uploads. For example, if you want to enable <code>chunkUploads</code> and send uploads in 500,000 byte chunks, your filepond configuration should include properties similar to the following:</p>\n<pre><span class=\"n\">FilePond</span><span class=\"o\">.</span><span class=\"n\">setOptions</span><span class=\"p\">({</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">chunkUploads</span><span class=\"p\">:</span> <span class=\"n\">true</span><span class=\"p\">,</span>\n    <span class=\"n\">chunkSize</span><span class=\"p\">:</span> <span class=\"mi\">500000</span><span class=\"p\">,</span>\n    <span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"n\">url</span><span class=\"p\">:</span> <span class=\"s1\">'https://.../fp'</span><span class=\"p\">,</span>\n        <span class=\"n\">process</span><span class=\"p\">:</span> <span class=\"s1\">'/process/'</span><span class=\"p\">,</span>\n        <span class=\"n\">patch</span><span class=\"p\">:</span> <span class=\"s1\">'/patch/'</span><span class=\"p\">,</span>\n        <span class=\"n\">revert</span><span class=\"p\">:</span> <span class=\"s1\">'/revert/'</span><span class=\"p\">,</span>\n        <span class=\"n\">fetch</span><span class=\"p\">:</span> <span class=\"s1\">'/fetch/?target='</span>\n    <span class=\"p\">}</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">});</span>\n</pre>\n<h4>Storing file uploads</h4>\n<p>There are two different approaches for handling temporary uploads that need to be stored permanently on a server after being uploaded from a filepond client via django-drf-filepond. <em>These two approaches are not mutually exclusive and you can choose to use one approach for some files and the other approach for other files if you wish.</em></p>\n<h5>1. Manual handling of file storage</h5>\n<p>Using this approach, you move the file initially stored as a temporary upload by <em>django-drf-filepond</em> to a storage location of your choice and the file then becomes independent of <em>django-drf-filepond</em>. The following example shows how to lookup a temporary upload given its unique upload ID and move it to a permanent storage location. The temporary upload record is then deleted and <em>django-drf-filepond</em> no longer has any awareness of the file:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_drf_filepond.models</span> <span class=\"kn\">import</span> <span class=\"n\">TemporaryUpload</span>\n\n<span class=\"c1\"># Get the temporary upload record</span>\n<span class=\"n\">tu</span> <span class=\"o\">=</span> <span class=\"n\">TemporaryUpload</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">upload_id</span><span class=\"o\">=</span><span class=\"s1\">'&lt;22-char unique ID&gt;'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Move the file somewhere for permanent storage</span>\n<span class=\"c1\"># The file will be saved with its original name</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">rename</span><span class=\"p\">(</span><span class=\"n\">tu</span><span class=\"o\">.</span><span class=\"n\">get_file_path</span><span class=\"p\">(),</span> <span class=\"s1\">'/path/to/permanent/location/</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"n\">tu</span><span class=\"o\">.</span><span class=\"n\">upload_name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Delete the temporary upload record and the temporary directory</span>\n<span class=\"n\">tu</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n<h5>2. Use django-drf-filepond's API to store a temporary upload to permanent storage</h5>\n<p><strong>Note:</strong> You must use this approach for storing any files that you subsequently want to access using filepond's <code>load</code> function.</p>\n<p>Using this approach, the file is stored either to local storage or to a remote storage service depending on the file store configuration you are using.</p>\n<h6>2.1 <code>store_upload</code></h6>\n<p><code>store_upload</code> stores a temporary upload, uploaded as a result of adding it to the filepond component in a web page, to permanent storage.</p>\n<p>If you have configured <em>django-drf-filepond</em> to use local file storage by setting the <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> parameter in your application settings, the file will be stored to a location under this directory.</p>\n<p>If you have configured a remote file store via <em>django-storages</em>, the stored upload will be sent to the configured storage backend via <em>django-storages</em>.</p>\n<p><em><strong>Parameters:</strong></em></p>\n<p><code>upload_id</code>: The unique ID assigned to the upload by <em>django-drf-filepond</em> when the file was initially uploaded via filepond.</p>\n<p><code>destination_file_path</code>: The location where the file should be stored. This location will be appended to the base file storage location as defined using the <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> parameter, or, for remote storage backends, the location configured using the relevant <em>django-storages</em> parameters. If you pass an absolute path beginning with <code>/</code>, the leading <code>/</code> will be removed. The path that you provide should also include the target filename.</p>\n<p><em><strong>Returns:</strong></em></p>\n<p>A <code>django_drf_filepond.models.StoredUpload</code> object representing the stored upload.</p>\n<p>Raises <code>django.core.exceptions.ImproperlyConfigured</code> if using a local file store and <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> has not been set.</p>\n<p>Raises <code>ValueError</code> if:</p>\n<ul>\n<li>an <code>upload_id</code> is provided in an invalid format</li>\n<li>the <code>destination_file_path</code> is not provided</li>\n<li>a <code>django_drf_filepond.models.TemporaryUpload</code> record for the provided <code>upload_id</code> is not found</li>\n</ul>\n<p><em>Example:</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_drf_filepond.api</span> <span class=\"kn\">import</span> <span class=\"n\">store_upload</span>\n\n<span class=\"c1\"># Given a variable upload_id containing a 22-character unique file upload ID:</span>\n<span class=\"n\">su</span> <span class=\"o\">=</span> <span class=\"n\">store_upload</span><span class=\"p\">(</span><span class=\"n\">upload_id</span><span class=\"p\">,</span> <span class=\"n\">destination_file_path</span><span class=\"o\">=</span><span class=\"s1\">'target_dir/filename.ext'</span><span class=\"p\">)</span>\n<span class=\"c1\"># destination_file_path is a relative path (including target filename. </span>\n<span class=\"c1\"># The path will created under the file store directory and the original </span>\n<span class=\"c1\"># temporary upload will be deleted.</span>\n</pre>\n<h6>2.2 <code>get_stored_upload</code> / <code>get_stored_upload_file_data</code></h6>\n<p>Get access to a stored upload and the associated file data.</p>\n<p><code>get_stored_upload</code>: Given an <code>upload_id</code>, return the associated <code>django_drf_filepond.models.StoredUpload</code> object.</p>\n<p>Throws <code>django_drf_filepond.models.StoredUpload.DoesNotExist</code> if a database record doesn't exist for the specified <code>upload_id</code>.</p>\n<p><code>get_stored_upload_file_data</code>: Given a StoredUpload object, return the file data for the upload as a Python <a href=\"https://docs.python.org/3/glossary.html#term-file-like-object\" rel=\"nofollow\">file-like object</a>.</p>\n<p><em><strong>Parameters:</strong></em></p>\n<p><code>stored_upload</code>: A <code>django_drf_filepond.models.StoredUpload</code> object for which you want retrieve the file data.</p>\n<p><em><strong>Returns:</strong></em></p>\n<p>Returns a tuple <code>(filename, bytes_io)</code> where <code>filename</code> is a string representing the name of the stored file being returned and <code>bytes_io</code> is an <code>io.BytesIO</code> object from which the file data can be read. If an error occurs, raises an exception:</p>\n<ul>\n<li><code>django_drf_filepond.exceptions.ConfigurationError</code>: Thrown if using a local file store and <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> is not set or the specified location does not exist, or is not a directory.</li>\n<li><code>FileNotFoundError</code>: Thrown if using a remote file store and the file store API reports that the file doesn't exist. If using a local file store, thrown if the file does not exist or the location is a directory and not a file.</li>\n<li><code>IOError</code>: Thrown if using a local file store and reading the file fails.</li>\n</ul>\n<p><em>Example:</em></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_drf_filepond.api</span> <span class=\"kn\">import</span> <span class=\"n\">get_stored_upload</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django_drf_filepond.api</span> <span class=\"kn\">import</span> <span class=\"n\">get_stored_upload_file_data</span>\n\n<span class=\"c1\"># Given a variable upload_id containing a 22-character unique </span>\n<span class=\"c1\"># upload ID representing a stored upload:</span>\n<span class=\"n\">su</span> <span class=\"o\">=</span> <span class=\"n\">get_store_upload</span><span class=\"p\">(</span><span class=\"n\">upload_id</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">bytes_io</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">get_store_upload_file_data</span><span class=\"p\">(</span><span class=\"n\">su</span><span class=\"p\">)</span>\n<span class=\"n\">file_data</span> <span class=\"o\">=</span> <span class=\"n\">bytes_io</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n</pre>\n<h6>2.3 <code>delete_stored_upload</code></h6>\n<p><code>delete_stored_upload</code> deletes a stored upload record and, optionally, the associated file that is stored on either a local disk or a remote file storage service.</p>\n<p><em><strong>Parameters:</strong></em></p>\n<p><code>upload_id</code>: The unique ID assigned to the upload by <em>django-drf-filepond</em> when the file was initially uploaded via filepond.</p>\n<p><code>delete_file</code>: <code>True</code> to delete the file associated with the record, <code>False</code> to leave the file in place.</p>\n<p><em><strong>Returns:</strong></em></p>\n<p>Returns <code>True</code> if the stored upload is deleted successfully, otherwise raises an exception:</p>\n<ul>\n<li><code>django_drf_filepond.models.StoredUpload.DoesNotExist</code> exception if no upload exists for the specified <code>upload_id</code>.</li>\n<li><code>django_drf_filepond.exceptions.ConfigurationError</code>: Thrown if using a local file store and <code>DJANGO_DRF_FILEPOND_FILE_STORE_PATH</code> is not set or the specified location does not exist, or is not a directory.</li>\n<li><code>FileNotFoundError</code>: Thrown if using a remote file store and the file store API reports that the file doesn't exist. If using a local file store, thrown if the file does not exist or the location is a directory and not a file.</li>\n<li><code>OSError</code>: Thrown if using a local file store and the file deletion fails.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_drf_filepond.api</span> <span class=\"kn\">import</span> <span class=\"n\">delete_stored_upload</span>\n\n<span class=\"c1\"># Given a variable upload_id containing a 22-character unique </span>\n<span class=\"c1\"># upload ID representing a stored upload:</span>\n<span class=\"n\">delete_stored_upload</span><span class=\"p\">(</span><span class=\"n\">upload_id</span><span class=\"p\">,</span> <span class=\"n\">delete_file</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"c1\"># delete_file=True will delete the file from the local </span>\n<span class=\"c1\"># disk or the remote storage service.</span>\n</pre>\n<h4>DRF Permissions</h4>\n<p>By default no permissions are applied on API endpoints. If you want to assign certain permissions such as <code>rest_framework.permissions.IsAuthenticated</code> you can do it like so:</p>\n<pre><span class=\"n\">DJANGO_DRF_FILEPOND_PERMISSION_CLASSES</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'GET_FETCH'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n    <span class=\"s1\">'GET_LOAD'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n    <span class=\"s1\">'POST_PROCESS'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n    <span class=\"s1\">'GET_RESTORE'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n    <span class=\"s1\">'DELETE_REVERT'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n    <span class=\"s1\">'PATCH_PATCH'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'rest_framework.permissions.IsAuthenticated'</span><span class=\"p\">,</span> <span class=\"p\">],</span>\n<span class=\"p\">}</span>\n</pre>\n<p>You can add more than one permission for each endpoint.</p>\n<p>The above list includes all the permission names currently defined on django-drf-filepond views. The naming convention used is <code>&lt;METHOD_NAME&gt;_&lt;ENDPOINT_NAME&gt;</code> where <code>&lt;METHOD_NAME&gt;</code> is the method name used for a request and <code>&lt;ENDPOINT_NAME&gt;</code> is the URL endpoint called. So, for example, a <code>POST</code> request to <code>/fp/process</code> would be handled by the permission classes defined for <code>POST_PROCESS</code>.</p>\n<h3>License</h3>\n<p>This repository is licensed under a BSD 3-Clause license. Please see the <a href=\"LICENSE\" rel=\"nofollow\">LICENSE</a> file in the root of the repository.</p>\n<h3>Acknowledgements</h3>\n<p>Thanks to <a href=\"https://github.com/pqina\" rel=\"nofollow\">pqina</a> for producing the <a href=\"https://pqina.nl/filepond/\" rel=\"nofollow\">filepond</a> file upload library that this Django app provides server-side support for.</p>\n<p>The django-drf-filepond app has been built as part of work that is being supported by UK Research and Innovation (Engineering and Physical Sciences Research Council) under grant EP/R025460/1.</p>\n\n          </div>"}, "last_serial": 7120983, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "6740a894865eb0d2fbf142ee73c44449", "sha256": "47d339447860aa919af490eef26858202cca1b622195a3003b9f1421f9bfb2e7"}, "downloads": -1, "filename": "django_drf_filepond-0.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6740a894865eb0d2fbf142ee73c44449", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14393, "upload_time": "2018-12-05T17:58:21", "upload_time_iso_8601": "2018-12-05T17:58:21.318657Z", "url": "https://files.pythonhosted.org/packages/2a/16/ce324638423d840980817684f7737992abffa37e64a01fd1362deb627200/django_drf_filepond-0.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "800d7e30bb4bbce3032e3169fbc2a384", "sha256": "7a0296831c21939e03be0aa9b13af4f356db3c156590290ccd35d184045b0173"}, "downloads": -1, "filename": "django-drf-filepond-0.0.2.tar.gz", "has_sig": false, "md5_digest": "800d7e30bb4bbce3032e3169fbc2a384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9639, "upload_time": "2018-12-05T17:58:23", "upload_time_iso_8601": "2018-12-05T17:58:23.857369Z", "url": "https://files.pythonhosted.org/packages/1a/30/8837f99da3533b502881471d8ac4ddc1c0e150be4576d69ed7308253af5c/django-drf-filepond-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "5c2f02e5a71931343a97398c64cccd1c", "sha256": "3f3ceb73f1a2f76162866c6987a10474a9cbc02ed55c303f500ca398b894c140"}, "downloads": -1, "filename": "django_drf_filepond-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5c2f02e5a71931343a97398c64cccd1c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 14700, "upload_time": "2019-01-19T20:44:56", "upload_time_iso_8601": "2019-01-19T20:44:56.538828Z", "url": "https://files.pythonhosted.org/packages/e6/34/a5457d8567dd857fb4464617d2e01bc3a6fa2ec20afe59811ce624e8a768/django_drf_filepond-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4e1072994fa7cca6b6856dffc9ebc55c", "sha256": "b56348b3a7665af7b27abf0f01be64173fae5409c6c370303616c1d400c39f7d"}, "downloads": -1, "filename": "django-drf-filepond-0.0.4.tar.gz", "has_sig": false, "md5_digest": "4e1072994fa7cca6b6856dffc9ebc55c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9984, "upload_time": "2019-01-19T20:44:58", "upload_time_iso_8601": "2019-01-19T20:44:58.431241Z", "url": "https://files.pythonhosted.org/packages/52/b6/bf1cdfcec3515f5dee4fce4416479231065d28136ef21282b3c308d0cb5b/django-drf-filepond-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "ae9875e6b16a0921340e6f701747527b", "sha256": "54ecdcd4c766df7b695348c7268011150562b7d81bf1ddd1978951779aa65b61"}, "downloads": -1, "filename": "django_drf_filepond-0.0.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ae9875e6b16a0921340e6f701747527b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19441, "upload_time": "2019-02-20T21:49:45", "upload_time_iso_8601": "2019-02-20T21:49:45.211753Z", "url": "https://files.pythonhosted.org/packages/22/1a/12e8ad4a1f0966735176ac8261048121061625f67a7986c158ad1fe9e888/django_drf_filepond-0.0.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96a84436ea33cab460f38edeccadb05a", "sha256": "dc44e9a1a79c21e0030a49c839fa52dc208cc2f9afbe722987741f3557e9242e"}, "downloads": -1, "filename": "django-drf-filepond-0.0.5.tar.gz", "has_sig": false, "md5_digest": "96a84436ea33cab460f38edeccadb05a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13649, "upload_time": "2019-02-20T21:49:47", "upload_time_iso_8601": "2019-02-20T21:49:47.234891Z", "url": "https://files.pythonhosted.org/packages/e9/e2/1385dc4c1cb1353b18821a616d40a49dbfdfc80b1ea89ea6d38e0036ed0f/django-drf-filepond-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "55b652756000b9eac4453304a73ef75e", "sha256": "4b1431306dc058fcddb1cbb2c05afed0a31b59b8f5389e80e20a1468b63ee3de"}, "downloads": -1, "filename": "django_drf_filepond-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "55b652756000b9eac4453304a73ef75e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 19569, "upload_time": "2019-05-23T15:07:49", "upload_time_iso_8601": "2019-05-23T15:07:49.678163Z", "url": "https://files.pythonhosted.org/packages/97/81/efd2ef85e7d6a34b400d677b5aa826b74d3ba724d39cd2564f765eafaee5/django_drf_filepond-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd969d403fa12bc3dc3a1d08016e85aa", "sha256": "8d978de265173e828f916ed6d6ff9b8e3a1aa905491997de4fa44d0c3259c6d4"}, "downloads": -1, "filename": "django-drf-filepond-0.1.0.tar.gz", "has_sig": false, "md5_digest": "dd969d403fa12bc3dc3a1d08016e85aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13814, "upload_time": "2019-05-23T15:07:51", "upload_time_iso_8601": "2019-05-23T15:07:51.339529Z", "url": "https://files.pythonhosted.org/packages/2f/ea/c82001e6589c2432deadcf929ae011f6728753b4aadd3fe9908d3e718fca/django-drf-filepond-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "201248805515fb42675d79030f9dee77", "sha256": "e08a746995b7bd3951b3b48a83c7754252cdfa3f838a5a77c0213a0670816732"}, "downloads": -1, "filename": "django_drf_filepond-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "201248805515fb42675d79030f9dee77", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 20093, "upload_time": "2019-08-03T17:25:28", "upload_time_iso_8601": "2019-08-03T17:25:28.444301Z", "url": "https://files.pythonhosted.org/packages/4c/c8/270d2981afe8c95dacb085eb81df6168d7a57bc81dd64311b50e86827828/django_drf_filepond-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5a81b4adbd3b518579fe308904b15d18", "sha256": "2ca9e65039c2beb1006fdce9357347d2d17794da8a9b0db5b044de7e0de084ea"}, "downloads": -1, "filename": "django-drf-filepond-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5a81b4adbd3b518579fe308904b15d18", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13873, "upload_time": "2019-08-03T17:25:32", "upload_time_iso_8601": "2019-08-03T17:25:32.489424Z", "url": "https://files.pythonhosted.org/packages/ff/18/7b47301c2445b4c2544ea96ad2e8f7a6d9166331c8a1a35b2f8188d0fe40/django-drf-filepond-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3ca5903e866f0c36fe3ae35ce61c7328", "sha256": "405db4e281870ffaa68db119d62d03cf7d1523fd08901c369e8b9bc413008609"}, "downloads": -1, "filename": "django_drf_filepond-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3ca5903e866f0c36fe3ae35ce61c7328", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21482, "upload_time": "2019-09-06T17:19:45", "upload_time_iso_8601": "2019-09-06T17:19:45.417099Z", "url": "https://files.pythonhosted.org/packages/6a/7c/bffe0218b485010958fe5d2056c60f3eb11328e0ee142c622afd9cb6e59d/django_drf_filepond-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "39a0549533fa81a0715394f3b4a48dcf", "sha256": "94585bc0a0818958169fceab9139a9e733ce15c1838e72722aa5e48032f2076d"}, "downloads": -1, "filename": "django-drf-filepond-0.1.2.tar.gz", "has_sig": false, "md5_digest": "39a0549533fa81a0715394f3b4a48dcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14224, "upload_time": "2019-09-06T17:19:46", "upload_time_iso_8601": "2019-09-06T17:19:46.730787Z", "url": "https://files.pythonhosted.org/packages/f0/20/d62caf7518ed2a7c3949fa88d86b993643dd0e600cbc3e19ca67300c3a7f/django-drf-filepond-0.1.2.tar.gz", "yanked": false}], "0.2.0rc1": [{"comment_text": "", "digests": {"md5": "c3e3f494716a09bbb1778fb7277d3200", "sha256": "c95e2b42c41f88bbdda196ef23c684f6561cfb36e2b44de95d085e3348ab4b51"}, "downloads": -1, "filename": "django_drf_filepond-0.2.0rc1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c3e3f494716a09bbb1778fb7277d3200", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27509, "upload_time": "2019-09-20T10:38:28", "upload_time_iso_8601": "2019-09-20T10:38:28.412474Z", "url": "https://files.pythonhosted.org/packages/61/0b/4deacb8da5086fa369ab61029bbb46553505c27043a156eea04415c76304/django_drf_filepond-0.2.0rc1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84bade52c31cb8ba41df029815e29b84", "sha256": "d95a5d6a6e03c5817677bb2250d09c2f88ad2eab2f7450b3cd2642b75ed5d696"}, "downloads": -1, "filename": "django-drf-filepond-0.2.0rc1.tar.gz", "has_sig": false, "md5_digest": "84bade52c31cb8ba41df029815e29b84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20763, "upload_time": "2019-09-20T10:38:29", "upload_time_iso_8601": "2019-09-20T10:38:29.826832Z", "url": "https://files.pythonhosted.org/packages/f0/a9/fbd9b41b1de3e3e4d114926b407e450aa186a1e0f166579a72a3d00d1f76/django-drf-filepond-0.2.0rc1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3aa93e7423bd4264db20f676a66c2231", "sha256": "de0145e9f45587d2b7a9620b34bda507969ddbab998040f7ca566d044fcccbaf"}, "downloads": -1, "filename": "django_drf_filepond-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3aa93e7423bd4264db20f676a66c2231", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27473, "upload_time": "2019-09-26T13:19:56", "upload_time_iso_8601": "2019-09-26T13:19:56.496751Z", "url": "https://files.pythonhosted.org/packages/52/91/ea80145c194cec10e48b6cbc4f3eab9afd5c2169e7f3763a57105d1202bb/django_drf_filepond-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2d9c71080ba0216f5e1157e9fbc8b8a", "sha256": "b840953752bfd280a7d593ba3022f7a80b8339e174bbf7b474713bfb9d437f9c"}, "downloads": -1, "filename": "django-drf-filepond-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c2d9c71080ba0216f5e1157e9fbc8b8a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25408, "upload_time": "2019-09-26T13:19:58", "upload_time_iso_8601": "2019-09-26T13:19:58.098780Z", "url": "https://files.pythonhosted.org/packages/7b/52/fed0835878120ce4d33c5b7de95758f92b35322785cb2f53387343c09286/django-drf-filepond-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "767598dcec37092aeff61020fc368e93", "sha256": "36198e7f12642a3b7d2368c89ada4e0afe005b7a4456d3b9f836cfe8402c4af3"}, "downloads": -1, "filename": "django_drf_filepond-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "767598dcec37092aeff61020fc368e93", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27782, "upload_time": "2019-12-16T15:55:18", "upload_time_iso_8601": "2019-12-16T15:55:18.689733Z", "url": "https://files.pythonhosted.org/packages/01/60/138895bb72cf95f48814bf0bb1c1506b094341fa09b21fbeae22a4740850/django_drf_filepond-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "afe299f6fa34ffcecd13b58f368d0e02", "sha256": "2c961be895cf0673a6d4f970efb7d247b643fb8f28d46c0443e2c0669e779ee5"}, "downloads": -1, "filename": "django-drf-filepond-0.2.2.tar.gz", "has_sig": false, "md5_digest": "afe299f6fa34ffcecd13b58f368d0e02", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25692, "upload_time": "2019-12-16T15:55:20", "upload_time_iso_8601": "2019-12-16T15:55:20.441120Z", "url": "https://files.pythonhosted.org/packages/72/f8/f525f36853a5735d5bdd3ecfcd847ff2f2e33d4bb9065e9a7b29a30bfcb8/django-drf-filepond-0.2.2.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "7d76fc39396602bb89d6045d642376de", "sha256": "1ab05217abf50f5faeadcfc9714dcac5f2b0dfeb82a70a770cbbfb43eeaa8e78"}, "downloads": -1, "filename": "django_drf_filepond-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7d76fc39396602bb89d6045d642376de", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 30118, "upload_time": "2020-02-24T22:48:48", "upload_time_iso_8601": "2020-02-24T22:48:48.313983Z", "url": "https://files.pythonhosted.org/packages/9c/61/b12c5e273b9476b2b4b56df17cc63b5e88d682f741693e15e5d28577c58e/django_drf_filepond-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e4b9bc48a832a8662fbadee81dc01e0", "sha256": "09858b3f9751aee65006edfa3c01d624f1fa908eec3d1a5356e2a14e02f5c315"}, "downloads": -1, "filename": "django-drf-filepond-0.2.4.tar.gz", "has_sig": false, "md5_digest": "1e4b9bc48a832a8662fbadee81dc01e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22270, "upload_time": "2020-02-24T22:48:50", "upload_time_iso_8601": "2020-02-24T22:48:50.042554Z", "url": "https://files.pythonhosted.org/packages/d3/52/aadd8f0caec84a78d34eb90a4c1368638ced3c8c725391b6462d098ba3b8/django-drf-filepond-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "8e0116e0182bd35374572c9634d196fd", "sha256": "8bba84c00ccf6d2768695dd43da6808620fcbf4d14ed8881580a15dc68ad90a7"}, "downloads": -1, "filename": "django_drf_filepond-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e0116e0182bd35374572c9634d196fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37549, "upload_time": "2020-04-28T15:04:15", "upload_time_iso_8601": "2020-04-28T15:04:15.679952Z", "url": "https://files.pythonhosted.org/packages/ee/0d/e17c34cad33fe1beb33ccd378455f412328378b6a58a8a47393a7cd91222/django_drf_filepond-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f53aca3a8c7438ddea5a41056a4f8c5", "sha256": "8cd67934a68900b1f88a60d8609da07821428a98848ffe26edb41a7f9fb56eda"}, "downloads": -1, "filename": "django-drf-filepond-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5f53aca3a8c7438ddea5a41056a4f8c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27774, "upload_time": "2020-04-28T15:04:17", "upload_time_iso_8601": "2020-04-28T15:04:17.174954Z", "url": "https://files.pythonhosted.org/packages/b5/09/c55cef7287116797a560760aeaa57f9589fcbaaceb27f32bb63c4362a3d1/django-drf-filepond-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e0116e0182bd35374572c9634d196fd", "sha256": "8bba84c00ccf6d2768695dd43da6808620fcbf4d14ed8881580a15dc68ad90a7"}, "downloads": -1, "filename": "django_drf_filepond-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e0116e0182bd35374572c9634d196fd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 37549, "upload_time": "2020-04-28T15:04:15", "upload_time_iso_8601": "2020-04-28T15:04:15.679952Z", "url": "https://files.pythonhosted.org/packages/ee/0d/e17c34cad33fe1beb33ccd378455f412328378b6a58a8a47393a7cd91222/django_drf_filepond-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f53aca3a8c7438ddea5a41056a4f8c5", "sha256": "8cd67934a68900b1f88a60d8609da07821428a98848ffe26edb41a7f9fb56eda"}, "downloads": -1, "filename": "django-drf-filepond-0.3.0.tar.gz", "has_sig": false, "md5_digest": "5f53aca3a8c7438ddea5a41056a4f8c5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27774, "upload_time": "2020-04-28T15:04:17", "upload_time_iso_8601": "2020-04-28T15:04:17.174954Z", "url": "https://files.pythonhosted.org/packages/b5/09/c55cef7287116797a560760aeaa57f9589fcbaaceb27f32bb63c4362a3d1/django-drf-filepond-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:30 2020"}