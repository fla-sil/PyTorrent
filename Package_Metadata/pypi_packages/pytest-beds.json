{"info": {"author": "herr kaste", "author_email": "herr.kaste@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "Convenience plugin on top of the testbed the Google Appengine (GAE) SDK already provides.\n\n.. image:: https://travis-ci.org/kaste/pytest-beds.svg?branch=master\n    :target: https://travis-ci.org/kaste/pytest-beds\n\nInstall\n=======\n\n``pip install pytest-beds``\n\nAfter that the plugin is enabled by default. You can use specific fixtures (see below) to activate the Testbed and stub specific services.\n\n\nOptions\n=======\n\n``--no-gae``\n    Disable the plugin, esp. do not change the python paths and try to import dev_appserver.\n\n``--sdk-path PATH``\n    The plugin assumes it can just ``import dev_apserver``. If that fails it looks up the SDK path in the environment variable ``GAE``. Otherwise, you can specify the path to the SDK by using the ``--sdk-path PATH`` option.\n\n``--project-root PATH``\n    Secondly, the plugin assume that your current path is the projects root folder, t.i. the dirctory which holds the app.yaml. You can specify a different path using ``--project-root PATH``.\n\n``--noisy-tasklets``\n    By default the plugin shortens the tracebacks when using ndb tasklets, so they don't include the eventloop's internal noise.\n    Use this switch to make ndb noisy again.\n\n\nFixtures\n========\n\nThe plugin provides fixtures to stub the different services. Usage is therefore simple and straightforward::\n\n    # Say, if you create a Foo you hit the database and put some work on queue\n    def test_foo(ndb, taskqueue):\n        foo = Foo.create()\n\n        assert Foo.query().fetch() == [foo]\n\nList of builtin fixtures::\n\n    bed\n    mailer\n    channel\n    urlfetch\n    memcache\n    taskqueue\n    blobstore\n    ndb\n    users\n\n\nUsers\n-----\n\nThere are two fixtures ``anonymous`` and ``login`` to handle the users-stub.\n\n``anonymous``\n    Prepares the user stub so that ``users.get_current_user()`` will return None\n\n``login``\n    Prepares the user stub and returns a function to login actual users::\n\n        def test_login(login):\n            # at this point users.get_current_user() will return None\n\n            login(id=1, email='foo@gmail.com')\n            # now users.get_current_user() will return a user\n\n            login.logout()\n            # now users.get_current_user() will return None again\n\n\nDeferreds\n---------\n\nThe ``deferreds`` fixture inits the taskqueue stub, but returns a useful object, so you can actually run the deferred functions::\n\n    def test_work(deferreds):\n        deferred.defer(work, 'to be done')\n\n        deferreds.consume()\n\n        assert 'work has been done'", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kaste/pytest-beds", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pytest-beds", "package_url": "https://pypi.org/project/pytest-beds/", "platform": "linux,osx,win32", "project_url": "https://pypi.org/project/pytest-beds/", "project_urls": {"Homepage": "https://github.com/kaste/pytest-beds"}, "release_url": "https://pypi.org/project/pytest-beds/0.3.0/", "requires_dist": null, "requires_python": "", "summary": "Fixtures for testing Google Appengine (GAE) apps", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Convenience plugin on top of the testbed the Google Appengine (GAE) SDK already provides.</p>\n<a href=\"https://travis-ci.org/kaste/pytest-beds\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/kaste/pytest-beds.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/44cbc42bb7e2bfaec6bda268a28d3202e8a30c4c/68747470733a2f2f7472617669732d63692e6f72672f6b617374652f7079746573742d626564732e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"install\">\n<h2>Install</h2>\n<p><tt>pip install <span class=\"pre\">pytest-beds</span></tt></p>\n<p>After that the plugin is enabled by default. You can use specific fixtures (see below) to activate the Testbed and stub specific services.</p>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<dl>\n<dt><tt><span class=\"pre\">--no-gae</span></tt></dt>\n<dd>Disable the plugin, esp. do not change the python paths and try to import dev_appserver.</dd>\n<dt><tt><span class=\"pre\">--sdk-path</span> PATH</tt></dt>\n<dd>The plugin assumes it can just <tt>import dev_apserver</tt>. If that fails it looks up the SDK path in the environment variable <tt>GAE</tt>. Otherwise, you can specify the path to the SDK by using the <tt><span class=\"pre\">--sdk-path</span> PATH</tt> option.</dd>\n<dt><tt><span class=\"pre\">--project-root</span> PATH</tt></dt>\n<dd>Secondly, the plugin assume that your current path is the projects root folder, t.i. the dirctory which holds the app.yaml. You can specify a different path using <tt><span class=\"pre\">--project-root</span> PATH</tt>.</dd>\n<dt><tt><span class=\"pre\">--noisy-tasklets</span></tt></dt>\n<dd>By default the plugin shortens the tracebacks when using ndb tasklets, so they don\u2019t include the eventloop\u2019s internal noise.\nUse this switch to make ndb noisy again.</dd>\n</dl>\n</div>\n<div id=\"fixtures\">\n<h2>Fixtures</h2>\n<p>The plugin provides fixtures to stub the different services. Usage is therefore simple and straightforward:</p>\n<pre># Say, if you create a Foo you hit the database and put some work on queue\ndef test_foo(ndb, taskqueue):\n    foo = Foo.create()\n\n    assert Foo.query().fetch() == [foo]\n</pre>\n<p>List of builtin fixtures:</p>\n<pre>bed\nmailer\nchannel\nurlfetch\nmemcache\ntaskqueue\nblobstore\nndb\nusers\n</pre>\n<div id=\"users\">\n<h3>Users</h3>\n<p>There are two fixtures <tt>anonymous</tt> and <tt>login</tt> to handle the users-stub.</p>\n<dl>\n<dt><tt>anonymous</tt></dt>\n<dd>Prepares the user stub so that <tt>users.get_current_user()</tt> will return None</dd>\n<dt><tt>login</tt></dt>\n<dd><p>Prepares the user stub and returns a function to login actual users:</p>\n<pre>def test_login(login):\n    # at this point users.get_current_user() will return None\n\n    login(id=1, email='foo@gmail.com')\n    # now users.get_current_user() will return a user\n\n    login.logout()\n    # now users.get_current_user() will return None again\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"deferreds\">\n<h3>Deferreds</h3>\n<p>The <tt>deferreds</tt> fixture inits the taskqueue stub, but returns a useful object, so you can actually run the deferred functions:</p>\n<pre>def test_work(deferreds):\n    deferred.defer(work, 'to be done')\n\n    deferreds.consume()\n\n    assert 'work has been done'\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2155541, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c277b613af60ef270973f437a90ac582", "sha256": "4bc789695c6259c64bb0d93e5e2bfd154bcbd9c54edb6a564c7d32d78a577fb1"}, "downloads": -1, "filename": "pytest-beds-0.0.1.zip", "has_sig": false, "md5_digest": "c277b613af60ef270973f437a90ac582", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10901, "upload_time": "2014-04-28T14:59:37", "upload_time_iso_8601": "2014-04-28T14:59:37.481305Z", "url": "https://files.pythonhosted.org/packages/69/47/9eb7652c5889bb2e6ddb5fb63da7b09f786b312229d6a8dcc88dec01383a/pytest-beds-0.0.1.zip", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "38a7ad62e7aef9293bc6752fdcf9be59", "sha256": "f6dbb2ebefe2eab436a7a96110efcfa80d232843b7934b6e2891036d3707d939"}, "downloads": -1, "filename": "pytest-beds-0.0.2.tar.gz", "has_sig": false, "md5_digest": "38a7ad62e7aef9293bc6752fdcf9be59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5823, "upload_time": "2016-04-26T10:00:11", "upload_time_iso_8601": "2016-04-26T10:00:11.351224Z", "url": "https://files.pythonhosted.org/packages/5c/60/14e64759dd9a7372277ae3988d6ba8a771720ba74b978793ea9fa3f4120c/pytest-beds-0.0.2.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e9058f6bc049fda570b7581247171d1a", "sha256": "249d9ad303ca407bab946d03d76ed865f81c0ee50cd69311f405efaf09515e6a"}, "downloads": -1, "filename": "pytest-beds-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e9058f6bc049fda570b7581247171d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5890, "upload_time": "2016-06-07T19:56:39", "upload_time_iso_8601": "2016-06-07T19:56:39.354876Z", "url": "https://files.pythonhosted.org/packages/83/10/6518de8556d05c17b73bb5bd29ad084ed8c645c3500a25997ce8dc96dce7/pytest-beds-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9058f6bc049fda570b7581247171d1a", "sha256": "249d9ad303ca407bab946d03d76ed865f81c0ee50cd69311f405efaf09515e6a"}, "downloads": -1, "filename": "pytest-beds-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e9058f6bc049fda570b7581247171d1a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5890, "upload_time": "2016-06-07T19:56:39", "upload_time_iso_8601": "2016-06-07T19:56:39.354876Z", "url": "https://files.pythonhosted.org/packages/83/10/6518de8556d05c17b73bb5bd29ad084ed8c645c3500a25997ce8dc96dce7/pytest-beds-0.3.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:23 2020"}