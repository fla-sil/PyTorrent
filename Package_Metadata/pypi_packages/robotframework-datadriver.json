{"info": {"author": "Ren\u00e9 Rohner(Snooz82)", "author_email": "snooz@posteo.de", "bugtrack_url": null, "classifiers": ["Framework :: Robot Framework", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Testing", "Topic :: Software Development :: Testing :: Acceptance"], "description": "|\n|\n\n===================================================\nrobotframework-datadriver\n===================================================\n\nDataDriver is a Data-Driven Testing library for Robot Framework.\nThis document explains how to use the DataDriver library listener. For\ninformation about installation, support, and more, please visit the\n`project page <https://github.com/Snooz82/robotframework-datadriver>`_\n\nFor more information about Robot Framework, see http://robotframework.org.\n\nDataDriver is used/imported as Library but does not provide keywords\nwhich can be used in a test. DataDriver uses the Listener Interface\nVersion 3 to manipulate the test cases and creates new test cases based\non a Data-File that contains the data for Data-Driven Testing. These\ndata file may be .csv , .xls or .xlsx files.\n\nData Driver is also able to cooperate with Microsoft PICT. An Open\nSource Windows tool for data combination testing. Pict is able to\ngenerate data combinations based on textual model definitions.\nhttps://github.com/Microsoft/pict\n\n|\n\nInstallation\n------------\n\nIf you already have Python >= 3.6 with pip installed, you can simply\nrun:\n\n``pip install --upgrade robotframework-datadriver``\n\n|\n\nExcel Support\n~~~~~~~~~~~~~\n\nFor file support of ``xls`` or ``xlsx`` file you need to install the extra XLS or the dependencies.\nIt contains the dependencies of pandas, numpy and xlrd. Just add [XLS] to your installation.\nNew since version 3.6.\n\n``pip install --upgrade robotframework-datadriver[XLS]``\n\n|\n\nPython 2\n~~~~~~~~\n\nor if you have Python 2 and 3 installed in parallel you may use\n\n``pip3 install --upgrade robotframework-datadriver``\n\nDataDriver in compatible with Python 2.7 only in Version 0.2.7.\n\n``pip install --upgrade robotframework-datadriver==0.2.7``\n\nBecause Python 2.7 is deprecated, there are no new feature to python 2.7 compatible version.\n\n|\n\nTable of contents\n-----------------\n\n-  `What DataDriver does`_\n-  `How DataDriver works`_\n-  `Usage`_\n-  `Structure of test suite`_\n-  `Structure of data file`_\n-  `Data Sources`_\n-  `File Encoding and CSV Dialect`_\n-  `Custom DataReader Classes`_\n-  `Selection of Test Cases to execute`_\n\n|\n\nWhat DataDriver does\n--------------------\n\nDataDriver is an alternative approach to create Data-Driven Tests with\nRobot Framework. DataDriver creates multiple test cases based on a test\ntemplate and data content of a csv or Excel file. All created tests\nshare the same test sequence (keywords) and differ in the test data.\nBecause these tests are created on runtime only the template has to be\nspecified within the robot test specification and the used data are\nspecified in an external data file.\n\nDataDriver gives an alternative to the build in data driven approach\nlike:\n\n.. code :: robotframework\n\n    *** Settings ***\n    Resource    login_resources.robot\n\n    Suite Setup    Open my Browser\n    Suite Teardown    Close Browsers\n    Test Setup      Open Login Page\n    Test Template    Invalid login\n\n\n    *** Test Cases ***       User        Passwort\n    Right user empty pass    demo        ${EMPTY}\n    Right user wrong pass    demo        FooBar\n\n    Empty user right pass    ${EMPTY}    mode\n    Empty user empty pass    ${EMPTY}    ${EMPTY}\n    Empty user wrong pass    ${EMPTY}    FooBar\n\n    Wrong user right pass    FooBar      mode\n    Wrong user empty pass    FooBar      ${EMPTY}\n    Wrong user wrong pass    FooBar      FooBar\n\n    *** Keywords ***\n    Invalid login\n        [Arguments]    ${username}    ${password}\n        Input username    ${username}\n        Input pwd    ${password}\n        click login button\n        Error page should be visible\n\nThis inbuild approach is fine for a hand full of data and a hand full of\ntest cases. If you have generated or calculated data and specially if\nyou have a variable amount of test case / combinations these robot files\nbecom quite a pain. With datadriver you may write the same test case\nsyntax but only once and deliver the data from en external data file.\n\nOne of the rare reasons when Microsoft\u00ae Excel or LibreOffice Calc may be\nused in testing\u2026 ;-)\n\n`See example test suite <#example-suite>`__\n\n`See example csv table <#example-csv>`__\n\n|\n\nHow DataDriver works\n--------------------\n\nWhen the DataDriver is used in a test suite it will be activated before\nthe test suite starts. It uses the Listener Interface Version 3 of Robot\nFramework to read and modify the test specification objects. After\nactivation it searches for the ``Test Template`` -Keyword to analyze the\n``[Arguments]`` it has. As a second step, it loads the data from the\nspecified CSV file. Based on the ``Test Template`` -Keyword, DataDriver\ncreates as much test cases as lines are in the CSV file. As values for\nthe arguments of the ``Test Template`` -Keyword it reads values from the\ncolumn of the CSV file with the matching name of the ``[Arguments]``.\nFor each line of the CSV data table, one test case will be created. It\nis also possible to specify test case names, tags and documentation for\neach test case in the specific test suite related CSV file.\n\n|\n\nUsage\n-----\n\nData Driver is a \"Listener\" but should not be set as a global listener\nas command line option of robot. Because Data Driver is a listener and a\nlibrary at the same time it sets itself as a listener when this library\nis imported into a test suite.\n\nTo use it, just use it as Library in your suite. You may use the first\nargument (option) which may set the file name or path to the data file.\n\nWithout any options set, it loads a .csv file which has the same name\nand path like the test suite .robot .\n\n\n**Example:**\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver\n\nOptions\n~~~~~~~\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver\n    ...    file=${None}\n    ...    encoding=cp1252\n    ...    dialect=Excel-EU\n    ...    delimiter=;\n    ...    quotechar=\"\n    ...    escapechar=\\\\\\\\\n    ...    doublequote=True\n    ...    skipinitialspace=False\n    ...    lineterminator=\\\\r\\\\n\n    ...    sheet_name=0\n    ...    reader_class=${None}\n    ...    file_search_strategy=PATH\n    ...    file_regex=(?i)(.*?)(\\\\.csv)\n    ...    include=${None}\n    ...    exclude=${None}\n\n|\n\nEncoding\n^^^^^^^^\n\n``encoding`` must be set if it shall not be cp1252.\n\n**cp1252** is:\n\n- Code Page 1252\n- Windows-1252\n- Windows Western European\n\nMost characters are same between ISO-8859-1 (Latin-1) except for the code points 128-159 (0x80-0x9F).\nThese Characters are available in cp1252 which are not present in Latin-1.\n\n``\u20ac \u201a \u0192 \u201e \u2026 \u2020 \u2021 \u02c6 \u2030 \u0160 \u2039 \u0152 \u017d \u2018 \u2019 \u201c \u201d \u2022 \u2013 \u2014 \u02dc \u2122 \u0161 \u203a \u0153 \u017e \u0178``\n\nSee `Python Standard Encoding <https://docs.python.org/3/library/codecs.html#standard-encodings>`_ for more encodings\n\n|\n\nExample Excel (US / comma seperated)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDialect Defaults:\n\n.. code :: python\n\n    delimiter = ','\n    quotechar = '\"'\n    doublequote = True\n    skipinitialspace = False\n    lineterminator = '\\\\r\\\\n'\n    quoting = QUOTE_MINIMAL\n\nUsage in Robot Framework\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    my_data_file.csv    dialect=excel    encoding=${None}\n\n|\n\nExample Excel Tab (\\\\\\\\t seperated)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nDialect Defaults:\n\n.. code :: python\n\n    delimiter = '\\\\t'\n    quotechar = '\"'\n    doublequote = True\n    skipinitialspace = False\n    lineterminator = '\\\\r\\\\n'\n    quoting = QUOTE_MINIMAL\n\nUsage in Robot Framework\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    my_data_file.csv    dialect=excel_tab\n\n|\n\nExample Unix Dialect\n^^^^^^^^^^^^^^^^^^^^\n\nDialect Defaults:\n\n.. code :: python\n\n    delimiter = ','\n    quotechar = '\"'\n    doublequote = True\n    skipinitialspace = False\n    lineterminator = '\\\\n'\n    quoting = QUOTE_ALL\n\nUsage in Robot Framework\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    my_data_file.csv    dialect=unix_dialect\n\n|\n\nExample User Defined\n^^^^^^^^^^^^^^^^^^^^\n\nUser may define the format completely free.\nIf an option is not set, the default values are used.\nTo register a userdefined format user have to set the\noption ``dialect`` to ``UserDefined``\n\n\nUsage in Robot Framework\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    my_data_file.csv\n    ...    dialect=UserDefined\n    ...    delimiter=.\n    ...    lineterminator=\\\\n\n\n\n|\n\nLimitation\n~~~~~~~~~~\n\n|\n\nEclipse plug-in RED\n^^^^^^^^^^^^^^^^^^^\n\nThere are known issues if the Eclipse plug-in RED is used. Because the\ndebugging Listener of this tool pre-calculates the number of test cases\nbefore the creation of test cases by the Data Driver. This leads to the\nsituation that the RED listener throws exceptions because it is called\nfor each test step but the RED GUI already stopped debugging so that the\nlistener cannot send Information to the GUI. This does not influence the\nexecution in any way but produces a lot of unwanted exceptions in the\nLog.\n\n|\n\nVariable types\n^^^^^^^^^^^^^^\n\nIn this early Version of DataDriver, only scalar variables are\nsupported. Lists and dictionaries may be added in the next releases.\n\n|\n\nMS Excel and typed cells\n^^^^^^^^^^^^^^^^^^^^^^^^\n\nMicrosoft Excel xls or xlsx file have the possibility to type thair data\ncells. Numbers are typically of the type float. If these data are not\nexplicitly defined as text in Excel, pandas will read it as the type\nthat is has in excel. Because we have to work with strings in Robot\nFramework these data are converted to string. This leads to the\nsituation that a European time value like \"04.02.2019\" (4th January\n2019) is handed over to Robot Framework in Iso time \"2019-01-04\n00:00:00\". This may cause unwanted behavior. To mitigate this risk you\nshould define Excel based files explicitly as text within Excel.\n\n|\n\nHow to activate the Data Driver\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo activate the DataDriver for a test suite (one specific \\*.robot file)\njust import it as a library. You may also specify some options if the\ndefault parameters do not fit your needs.\n\n**Example**:\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library          DataDriver\n    Test Template    Invalid Logins\n\n|\n\nStructure of test suite\n-----------------------\n\n|\n\nRequirements\n~~~~~~~~~~~~\n\nIn the Moment there are some requirements how a test\nsuite must be structured so that the DataDriver can get all the\ninformation it needs.\n\n - only the first test case will be used as a template. All other test\n   cases will be deleted.\n - Test cases have to be defined with a\n   ``Test Template``. Reason for this is, that the DataDriver needs to\n   know the names of the test case arguments. Test cases do not have\n   named arguments. Keywords do.\n - The keyword which is used as\n   ``Test Template`` must be defined within the test suite (in the same\n   \\*.robot file). If the keyword which is used as ``Test Template`` is\n   defined in a ``Resource`` the DataDriver has no access to its\n   arguments names.\n\n|\n\nExample Test Suite\n~~~~~~~~~~~~~~~~~~\n\n.. code :: robotframework\n\n    ***Settings***\n    Library           DataDriver\n    Resource          login_resources.robot\n    Suite Setup       Open my Browser\n    Suite Teardown    Close Browsers\n    Test Setup        Open Login Page\n    Test Template     Invalid Login\n\n    *** Test Case ***\n    Login with user ${username} and password ${password}    Default    UserData\n\n    ***** *Keywords* *****\n    Invalid login\n        [Arguments]    ${username}    ${password}\n        Input username    ${username}\n        Input pwd    ${password}\n        click login button\n        Error page should be visible\n\nIn this example, the DataDriver is activated by using it as a Library.\nIt is used with default settings.\nAs ``Test Template`` the keyword ``Invalid Login`` is used. This\nkeyword has two arguments. Argument names are ``${username}`` and\n``${password}``. These names have to be in the CSV file as column\nheader. The test case has two variable names included in its name,\nwhich does not have any functionality in Robot Framework. However, the\nData Driver will use the test case name as a template name and\nreplaces the variables with the specific value of the single generated\ntest case.\nThis template test will only be used as a template. The specified data\n``Default`` and ``UserData`` would only be used if no CSV file has\nbeen found.\n\n|\n\nStructure of data file\n----------------------\n\n|\n\nmin. required columns\n~~~~~~~~~~~~~~~~~~~~~\n\n-  ``*** Test Cases ***`` column has to be the first one.\n-  *Argument columns:* For each argument of the ``Test Template``\n   keyword one column must be existing in the data file as data source.\n   The name of this column must match the variable name and syntax.\n\n|\n\noptional columns\n~~~~~~~~~~~~~~~~\n\n-  *[Tags]* column may be used to add specific tags to a test case. Tags\n   may be comma separated.\n-  *[Documentation]* column may be used to add specific test case\n   documentation.\n\n|\n\nExample Data file\n~~~~~~~~~~~~~~~~~\n\n+-------------+-------------+-------------+-------------+-------------+\n| \\**\\* Test  | ${username} | ${password} | [Tags]      | [Documentat |\n| Cases \\**\\* |             |             |             | ion]        |\n|             |             |             |             |             |\n+=============+=============+=============+=============+=============+\n| Right user  | demo        | ${EMPTY}    | 1           | This is a   |\n| empty pass  |             |             |             | test case   |\n|             |             |             |             | documentati |\n|             |             |             |             | on          |\n|             |             |             |             | of the      |\n|             |             |             |             | first one.  |\n+-------------+-------------+-------------+-------------+-------------+\n| Right user  | demo        | FooBar      | 2           |             |\n| wrong pass  |             |             |             |             |\n+-------------+-------------+-------------+-------------+-------------+\n| empty user  | ${EMPTY}    | mode        | 1,2,3,4     | This test   |\n| mode pass   |             |             |             | case has    |\n|             |             |             |             | the Tags    |\n|             |             |             |             | 1,2,3 and 4 |\n|             |             |             |             | assigned.   |\n+-------------+-------------+-------------+-------------+-------------+\n|             | ${EMPTY}    | ${EMPTY}    |             | This test   |\n|             |             |             |             | case has a  |\n|             |             |             |             | generated   |\n|             |             |             |             | name based  |\n|             |             |             |             | on template |\n|             |             |             |             | name.       |\n+-------------+-------------+-------------+-------------+-------------+\n|             | ${EMPTY}    | FooBar      |             | This test   |\n|             |             |             |             | case has a  |\n|             |             |             |             | generated   |\n|             |             |             |             | name based  |\n|             |             |             |             | on template |\n|             |             |             |             | name.       |\n+-------------+-------------+-------------+-------------+-------------+\n|             | FooBar      | mode        |             | This test   |\n|             |             |             |             | case has a  |\n|             |             |             |             | generated   |\n|             |             |             |             | name based  |\n|             |             |             |             | on template |\n|             |             |             |             | name.       |\n+-------------+-------------+-------------+-------------+-------------+\n|             | FooBar      | ${EMPTY}    |             | This test   |\n|             |             |             |             | case has a  |\n|             |             |             |             | generated   |\n|             |             |             |             | name based  |\n|             |             |             |             | on template |\n|             |             |             |             | name.       |\n+-------------+-------------+-------------+-------------+-------------+\n|             | FooBar      | FooBar      |             | This test   |\n|             |             |             |             | case has a  |\n|             |             |             |             | generated   |\n|             |             |             |             | name based  |\n|             |             |             |             | on template |\n|             |             |             |             | name.       |\n+-------------+-------------+-------------+-------------+-------------+\n\nIn this data file, eight test cases are defined. Each line specifies one\ntest case. The first two test cases have specific names. The other six\ntest cases will generate names based on template test cases name with\nthe replacement of variables in this name. The order of columns is\nirrelevant except the first column, ``*** Test Cases ***``\n\n|\n\nData Sources\n------------\n\n|\n\nCSV / TSV (Character-separated values)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBy default DataDriver reads csv files. With the `Encoding and CSV\nDialect <#EncodingandCSVDialect>`__ settings you may configure which\nstructure your data source has.\n\n|\n\nXLS / XLSX Files\n~~~~~~~~~~~~~~~~\n\nIf you want to use Excel based data sources, you may just set the file\nto the extention or you may point to the correct file. If the extention\nis \".xls\" or \".xlsx\" DataDriver will interpret it as Excel file.\nYou may select the sheet which will be read by the option ``sheet_name``.\nBy default it is set to 0 which will be the first table sheet.\nYou may use sheet index (0 is first sheet) or sheet name(case sensitive).\nXLS interpreter will ignore all other options like encoding, delimiters etc.\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    .xlsx\n\nor:\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    file=my_data_source.xlsx    sheet_name=2nd Sheet\n\n|\n\nPICT (Pairwise Independent Combinatorial Testing)\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nPict is able to generate data files based on a model file.\nhttps://github.com/Microsoft/pict\n\nDocumentation: https://github.com/Microsoft/pict/blob/master/doc/pict.md\n\n|\n\nRequirements\n^^^^^^^^^^^^\n\n-  Path to pict.exe must be set in the %PATH% environment variable.\n-  Data model file has the file extention \".pict\"\n-  Pict model file must be encoded in UTF-8\n\n|\n\nHow it works\n^^^^^^^^^^^^\n\nIf the file option is set to a file with the extention pict, DataDriver\nwill hand over this file to pict.exe and let it automatically generates\na file with the extention \".pictout\". This file will the be used as data\nsource for the test generation. (It is tab seperated and UTF-8 encoded)\nExcept the file option all other options of the library will be ignored.\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    my_model_file.pict\n\n|\n\nFile Encoding and CSV Dialect\n-----------------------------\n\nCSV is far away from well designed and has absolutely no \"common\"\nformat. Therefore it is possible to define your own dialect or use\npredefined. The default is Excel-EU which is a semicolon separated\nfile.\nThese Settings are changeable as options of the Data Driver Library.\n\n|\n\nfile=\n~~~~~\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library         DataDriver    file=../data/my_data_source.csv\n\n\n-  None(default): Data Driver will search in the test suites folder if a\n   \\*.csv file with the same name than the test suite \\*.robot file exists\n-  only file extention: if you just set a file extentions like \".xls\" or\n   \".xlsx\" DataDriver will search\n-  absolute path: If an absolute path to a file is set, DataDriver tries\n   to find and open the given data file.\n-  relative path: If the option does not point to a data file as an\n   absolute path, Data Driver tries to find a data file relative to the\n   folder where the test suite is located.\n\n|\n\nencoding=\n~~~~~~~~~\n\nmay set the encoding of the CSV file. i.e.\n``cp1252, ascii, iso-8859-1, latin-1, utf_8, utf_16, utf_16_be, utf_16_le``,\netc\u2026 https://docs.python.org/3.7/library/codecs.html#standard-encodings\n\n|\n\ndialect=\n~~~~~~~~\n\nYou may change the CSV Dialect here. If the Dialect is set to\n\u2018UserDefined\u2019 the following options are used. Otherwise, they are\nignored.\nsupported Dialects are:\n\n.. code:: python\n\n    \"excel\"\n        delimiter = ','\n        quotechar = '\"'\n        doublequote = True\n        skipinitialspace = False\n        lineterminator = '\\\\r\\\\n'\n        quoting = QUOTE_MINIMAL\n\n    \"excel-tab\"\n        delimiter = '\\\\t'\n\n    \"unix\"\n        delimiter = ','\n        quotechar = '\"'\n        doublequote = True\n        skipinitialspace = False\n        lineterminator = '\\\\n'\n        quoting = QUOTE_ALL\n\n|\n\nDefaults:\n~~~~~~~~~\n\n.. code:: python\n\n    file=None,\n    encoding='cp1252',\n    dialect='Excel-EU',\n    delimiter=';',\n    quotechar='\"',\n    escapechar='\\\\\\\\',\n    doublequote=True,\n    skipinitialspace=False,\n    lineterminator='\\\\r\\\\n',\n    sheet_name=0\n\n|\n\nCustom DataReader Classes\n-------------------------\n\nIt is possible to write your own DataReader Class as a plugin for DataDriver.\nDataReader Classes are called from DataDriver to return a list of TestCaseData.\n\n|\n\nUsing Custom DataReader\n~~~~~~~~~~~~~~~~~~~~~~~\n\nDataReader classes are loaded dynamically into DataDriver while runtime.\nDataDriver identifies the DataReader to load by the file extantion of the data file or by the option ``reader_class``.\n\n|\n\nSelect Reader by File Extension:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    file=mydata.csv\n\nThis will load the class ``csv_reader`` from ``csv_reader.py`` from the same folder.\n\n|\n\nSelect Reader by Option:\n^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code :: robotframework\n\n    *** Settings ***\n        Library    DataDriver   file=mydata.csv    reader_class=generic_csv_reader    dialect=userdefined   delimiter=\\\\t    encoding=UTF-8\n\nThis will load the class ``generic_csv_reader`` from ``generic_csv_reader.py`` from same folder.\n\n|\n\nCreate Custom Reader\n~~~~~~~~~~~~~~~~~~~~\n\nRecommendation:\n\nHave a look to the Source Code of existing DataReader like ``csv_reader.py`` or ``generic_csv_reader.py`` .\n\nTo write your own reader, create a class inherited from ``AbstractReaderClass``.\n\nYour class will get all available configs from DataDriver as an object of ``ReaderConfig`` on ``__init__``.\n\nDataDriver will call the method ``get_data_from_source``\nThis method should then load your data from your custom source and stores them into list of object of ``TestCaseData``.\nThis List of ``TestCaseData`` will be returned to DataDriver.\n\n``AbstractReaderClass`` has also some optional helper methods that may be useful.\n\nYou can either place the custom reader with the others in DataDriver folder or anywhere on the disk.\nIn the first case or if your custom reader is in python path just use it like the others by name:\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library          DataDriver    reader_class=my_reader\n\nIn case it is somewhere on the disk, it is possible to use an absolute or relative path to a custom Reader.\nImports of custom readers follow the same rules like importing Robot Framework libraries.\nPath can be relative to ${EXECDIR} or to DataDriver/__init__.py:\n\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library          DataDriver    reader_class=C:/data/my_reader.py    # set custom reader\n    ...                            file_search_strategy=None            # set DataDriver to not check file\n    ...                            min=0                                # kwargs arguments for custom reader\n    ...                            max=62\n\nThis `my_reader.py` should implement a class inherited from AbstractReaderClass that is named `my_reader`.\n\n.. code :: python\n\n    from DataDriver.AbstractReaderClass import AbstractReaderClass  # inherit class from AbstractReaderClass\n    from DataDriver.ReaderConfig import TestCaseData  # return list of TestCaseData to DataDriver\n\n\n    class my_reader(AbstractReaderClass):\n\n        def get_data_from_source(self):  # This method will be called from DataDriver to get the TestCaseData list.\n            test_data = []\n            for i in range(int(self.kwargs['min']), int(self.kwargs['max'])):  # Dummy code to just generate some data\n                args = {'${var_1}': str(i), '${var_2}': str(i)}  # args is a dictionary. Variable name is the key, value is value.\n                test_data.append(TestCaseData(f'test {i}', args, ['tag']))  # add a TestCaseData object to the list of tests.\n            return test_data  # return the list of TestCaseData to DataDriver\n\n\nSee other readers as example.\n\n|\n\nSelection of Test Cases to execute\n----------------------------------\n\nBecause test cases that are created by DataDriver after parsing while execution,\nit is not possible to use some Robot Framework methods to select test cases.\n\n\nExamples for options that have to be used differently:\n\n+-------------------+-----------------------------------------------------------------------+\n| robot option      | Description                                                           |\n+===================+=======================================================================+\n| ``--test``        | Selects the test cases by name.                                       |\n+-------------------+-----------------------------------------------------------------------+\n| ``--task``        | Alias for --test that can be used when executing tasks.               |\n+-------------------+-----------------------------------------------------------------------+\n| ``--rerunfailed`` | Selects failed tests from an earlier output file to be re-executed.   |\n+-------------------+-----------------------------------------------------------------------+\n| ``--include``     | Selects the test cases by tag.                                        |\n+-------------------+-----------------------------------------------------------------------+\n| ``--exclude``     | Selects the test cases by tag.                                        |\n+-------------------+-----------------------------------------------------------------------+\n\n|\n\nSelection of test cases by name\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n|\n\nSelect a single test case:\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo execute just a single test case by its exact name it is possible to execute the test suite\nand set the global variable ${DYNAMICTEST} with the name of the test case to execute as value.\nPattern must be ``suitename.testcasename``.\n\nExample:\n\n.. code ::\n\n    robot --variable \"DYNAMICTEST:my suite name.test case to be executed\" my_suite_name.robot\n\nPabot uses this feature to execute a single test case when using ``--testlevelsplit``\n\n|\n\nSelect a list of test cases:\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is possible to set a list of test case names by using the variable ${DYNAMICTESTS} (plural).\nThis variable must be a string and the list of names must be pipe-seperated (``|``).\n\nExample:\n\n.. code::\n\n    robot --variable DYNAMICTESTS:firstsuitename.testcase1|firstsuitename.testcase3|anothersuitename.othertestcase foldername\n\nIt is also possible to set the variable @{DYNAMICTESTS} as a list variable from i.e. python code.\n\n|\n\nRe-run failed test cases:\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nBecause it is not possible to use the command line argument ``--rerunfailed`` from robot directly,\nDataDriver brings a Pre-Run-Modifier that handles this issue.\n\nNormally reexecution of failed testcases has three steps.\n\n- original execution\n- re-execution the failed ones based on original execution output\n- merging original execution output with re-execution output\n\nThe DataDriver.rerunfailed Pre-Run-Modifier removes all passed test cases based on a former output.xml.\n\nExample:\n\n.. code ::\n\n    robot --output original.xml tests                                                    # first execute all tests\n    robot --prerunmodifier DataDriver.rerunfailed:original.xml --output rerun.xml tests  # then re-execute failing\n    rebot --merge original.xml rerun.xml                                                 # finally merge results\n\n\nBe aware, that in this case it is not allowed to use \"``:``\" as character in the original output file path.\nIf you want to set a full path on windows like ``e:\\\\myrobottest\\\\output.xml`` you have to use \"``;``\"\nas argument seperator.\n\nExample:\n\n.. code ::\n\n    robot --prerunmodifier DataDriver.rerunfailed;e:\\\\myrobottest\\\\output.xml --output e:\\\\myrobottest\\\\rerun.xml tests\n\n\n|\n\nFiltering with tags.\n~~~~~~~~~~~~~~~~~~~~\n\nNew in ``0.3.1``\n\nIt is possible to use tags to filter the data source.\nTo use this, tags must be assigned to the test cases in data source.\n\n|\n\nRobot Framework Command Line Arguments\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nTo filter the source, the normal command line arguments of Robot Framework can be used.\nSee Robot Framework Userguide_ for more information\nBe aware that the filtering of Robot Framework itself is done before DataDriver is called.\nThis means if the Template test is already filtered out by Robot Framework, DataDriver can never be called.\nIf you want to use ``--include`` the DataDriver TestSuite should have a ``DefaultTag`` or ``ForceTag`` that\nfulfills these requirements.\n\n.. _Userguide: http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#tag-patterns\n\nExample: ``robot --include 1OR2 --exclude foo DataDriven.robot``\n\n|\n\nFilter based on Library Options\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nIt is also possible to filter the data source by an init option of DataDriver.\nIf these Options are set, Robot Framework Filtering will be ignored.\n\nExample:\n\n.. code :: robotframework\n\n    *** Settings ***\n    Library    DataDriver    include=1OR2    exclude=foo\n\n|\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Snooz82/robotframework-datadriver", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "robotframework-datadriver", "package_url": "https://pypi.org/project/robotframework-datadriver/", "platform": "", "project_url": "https://pypi.org/project/robotframework-datadriver/", "project_urls": {"Homepage": "https://github.com/Snooz82/robotframework-datadriver"}, "release_url": "https://pypi.org/project/robotframework-datadriver/0.3.6/", "requires_dist": ["robotframework (>=3.1)", "docutils", "Pygments", "numpy ; extra == 'xls'", "pandas ; extra == 'xls'", "xlrd (>=1.0.0) ; extra == 'xls'"], "requires_python": ">3.6", "summary": "A library for Data-Driven Testing.", "version": "0.3.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div>\n<div><br></div>\n<div><br></div>\n</div>\n<div id=\"robotframework-datadriver\">\n<h2>robotframework-datadriver</h2>\n<p>DataDriver is a Data-Driven Testing library for Robot Framework.\nThis document explains how to use the DataDriver library listener. For\ninformation about installation, support, and more, please visit the\n<a href=\"https://github.com/Snooz82/robotframework-datadriver\" rel=\"nofollow\">project page</a></p>\n<p>For more information about Robot Framework, see <a href=\"http://robotframework.org\" rel=\"nofollow\">http://robotframework.org</a>.</p>\n<p>DataDriver is used/imported as Library but does not provide keywords\nwhich can be used in a test. DataDriver uses the Listener Interface\nVersion 3 to manipulate the test cases and creates new test cases based\non a Data-File that contains the data for Data-Driven Testing. These\ndata file may be .csv , .xls or .xlsx files.</p>\n<p>Data Driver is also able to cooperate with Microsoft PICT. An Open\nSource Windows tool for data combination testing. Pict is able to\ngenerate data combinations based on textual model definitions.\n<a href=\"https://github.com/Microsoft/pict\" rel=\"nofollow\">https://github.com/Microsoft/pict</a></p>\n<div>\n<div><br></div>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>If you already have Python &gt;= 3.6 with pip installed, you can simply\nrun:</p>\n<p><tt>pip install <span class=\"pre\">--upgrade</span> <span class=\"pre\">robotframework-datadriver</span></tt></p>\n<div>\n<div><br></div>\n</div>\n<div id=\"excel-support\">\n<h4>Excel Support</h4>\n<p>For file support of <tt>xls</tt> or <tt>xlsx</tt> file you need to install the extra XLS or the dependencies.\nIt contains the dependencies of pandas, numpy and xlrd. Just add [XLS] to your installation.\nNew since version 3.6.</p>\n<p><tt>pip install <span class=\"pre\">--upgrade</span> <span class=\"pre\">robotframework-datadriver[XLS]</span></tt></p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"python-2\">\n<h4>Python 2</h4>\n<p>or if you have Python 2 and 3 installed in parallel you may use</p>\n<p><tt>pip3 install <span class=\"pre\">--upgrade</span> <span class=\"pre\">robotframework-datadriver</span></tt></p>\n<p>DataDriver in compatible with Python 2.7 only in Version 0.2.7.</p>\n<p><tt>pip install <span class=\"pre\">--upgrade</span> <span class=\"pre\">robotframework-datadriver==0.2.7</span></tt></p>\n<p>Because Python 2.7 is deprecated, there are no new feature to python 2.7 compatible version.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"table-of-contents\">\n<h3>Table of contents</h3>\n<ul>\n<li><a href=\"#what-datadriver-does\" rel=\"nofollow\">What DataDriver does</a></li>\n<li><a href=\"#how-datadriver-works\" rel=\"nofollow\">How DataDriver works</a></li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#structure-of-test-suite\" rel=\"nofollow\">Structure of test suite</a></li>\n<li><a href=\"#structure-of-data-file\" rel=\"nofollow\">Structure of data file</a></li>\n<li><a href=\"#data-sources\" rel=\"nofollow\">Data Sources</a></li>\n<li><a href=\"#file-encoding-and-csv-dialect\" rel=\"nofollow\">File Encoding and CSV Dialect</a></li>\n<li><a href=\"#custom-datareader-classes\" rel=\"nofollow\">Custom DataReader Classes</a></li>\n<li><a href=\"#selection-of-test-cases-to-execute\" rel=\"nofollow\">Selection of Test Cases to execute</a></li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"what-datadriver-does\">\n<h3>What DataDriver does</h3>\n<p>DataDriver is an alternative approach to create Data-Driven Tests with\nRobot Framework. DataDriver creates multiple test cases based on a test\ntemplate and data content of a csv or Excel file. All created tests\nshare the same test sequence (keywords) and differ in the test data.\nBecause these tests are created on runtime only the template has to be\nspecified within the robot test specification and the used data are\nspecified in an external data file.</p>\n<p>DataDriver gives an alternative to the build in data driven approach\nlike:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Resource</span><span class=\"p\">    </span><span class=\"nn\">login_resources.robot</span><span class=\"p\">\n\n</span><span class=\"kn\">Suite Setup</span><span class=\"p\">    </span><span class=\"nf\">Open my Browser</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">    </span><span class=\"nf\">Close Browsers</span><span class=\"p\">\n</span><span class=\"kn\">Test Setup</span><span class=\"p\">      </span><span class=\"nf\">Open Login Page</span><span class=\"p\">\n</span><span class=\"kn\">Test Template</span><span class=\"p\">    </span><span class=\"nf\">Invalid login</span><span class=\"p\">\n\n\n</span><span class=\"gh\">*** Test Cases ***</span><span class=\"p\">       </span><span class=\"gh\">User</span><span class=\"p\">        </span><span class=\"gh\">Passwort</span><span class=\"p\">\n</span><span class=\"gu\">Right user empty pass</span><span class=\"p\">    </span><span class=\"s\">demo</span><span class=\"p\">        ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}\n</span><span class=\"gu\">Right user wrong pass</span><span class=\"p\">    </span><span class=\"s\">demo</span><span class=\"p\">        </span><span class=\"s\">FooBar</span><span class=\"p\">\n\n</span><span class=\"gu\">Empty user right pass</span><span class=\"p\">    ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}    </span><span class=\"s\">mode</span><span class=\"p\">\n</span><span class=\"gu\">Empty user empty pass</span><span class=\"p\">    ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}    ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}\n</span><span class=\"gu\">Empty user wrong pass</span><span class=\"p\">    ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}    </span><span class=\"s\">FooBar</span><span class=\"p\">\n\n</span><span class=\"gu\">Wrong user right pass</span><span class=\"p\">    </span><span class=\"s\">FooBar</span><span class=\"p\">      </span><span class=\"s\">mode</span><span class=\"p\">\n</span><span class=\"gu\">Wrong user empty pass</span><span class=\"p\">    </span><span class=\"s\">FooBar</span><span class=\"p\">      ${</span><span class=\"nv\">EMPTY</span><span class=\"p\">}\n</span><span class=\"gu\">Wrong user wrong pass</span><span class=\"p\">    </span><span class=\"s\">FooBar</span><span class=\"p\">      </span><span class=\"s\">FooBar</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Keywords ***</span><span class=\"p\">\n</span><span class=\"gu\">Invalid login</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]    ${</span><span class=\"nv\">username</span><span class=\"p\">}    ${</span><span class=\"nv\">password</span><span class=\"p\">}\n    </span><span class=\"nf\">Input username</span><span class=\"p\">    ${</span><span class=\"nv\">username</span><span class=\"p\">}\n    </span><span class=\"nf\">Input pwd</span><span class=\"p\">    ${</span><span class=\"nv\">password</span><span class=\"p\">}\n    </span><span class=\"nf\">click login button</span><span class=\"p\">\n    </span><span class=\"nf\">Error page should be visible</span>\n</pre>\n<p>This inbuild approach is fine for a hand full of data and a hand full of\ntest cases. If you have generated or calculated data and specially if\nyou have a variable amount of test case / combinations these robot files\nbecom quite a pain. With datadriver you may write the same test case\nsyntax but only once and deliver the data from en external data file.</p>\n<p>One of the rare reasons when Microsoft\u00ae Excel or LibreOffice Calc may be\nused in testing\u2026 ;-)</p>\n<p><a href=\"#example-suite\" rel=\"nofollow\">See example test suite</a></p>\n<p><a href=\"#example-csv\" rel=\"nofollow\">See example csv table</a></p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"how-datadriver-works\">\n<h3>How DataDriver works</h3>\n<p>When the DataDriver is used in a test suite it will be activated before\nthe test suite starts. It uses the Listener Interface Version 3 of Robot\nFramework to read and modify the test specification objects. After\nactivation it searches for the <tt>Test Template</tt> -Keyword to analyze the\n<tt>[Arguments]</tt> it has. As a second step, it loads the data from the\nspecified CSV file. Based on the <tt>Test Template</tt> -Keyword, DataDriver\ncreates as much test cases as lines are in the CSV file. As values for\nthe arguments of the <tt>Test Template</tt> -Keyword it reads values from the\ncolumn of the CSV file with the matching name of the <tt>[Arguments]</tt>.\nFor each line of the CSV data table, one test case will be created. It\nis also possible to specify test case names, tags and documentation for\neach test case in the specific test suite related CSV file.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>Data Driver is a \u201cListener\u201d but should not be set as a global listener\nas command line option of robot. Because Data Driver is a listener and a\nlibrary at the same time it sets itself as a listener when this library\nis imported into a test suite.</p>\n<p>To use it, just use it as Library in your suite. You may use the first\nargument (option) which may set the file name or path to the data file.</p>\n<p>Without any options set, it loads a .csv file which has the same name\nand path like the test suite .robot .</p>\n<p><strong>Example:</strong></p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span>\n</pre>\n<div id=\"options\">\n<h4>Options</h4>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">\n...    </span><span class=\"s\">file=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}\n...    </span><span class=\"s\">encoding=cp1252</span><span class=\"p\">\n...    </span><span class=\"s\">dialect=Excel-EU</span><span class=\"p\">\n...    </span><span class=\"s\">delimiter=;</span><span class=\"p\">\n...    </span><span class=\"s\">quotechar=\"</span><span class=\"p\">\n...    </span><span class=\"s\">escapechar=\\\\\\\\</span><span class=\"p\">\n...    </span><span class=\"s\">doublequote=True</span><span class=\"p\">\n...    </span><span class=\"s\">skipinitialspace=False</span><span class=\"p\">\n...    </span><span class=\"s\">lineterminator=\\\\r\\\\n</span><span class=\"p\">\n...    </span><span class=\"s\">sheet_name=0</span><span class=\"p\">\n...    </span><span class=\"s\">reader_class=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}\n...    </span><span class=\"s\">file_search_strategy=PATH</span><span class=\"p\">\n...    </span><span class=\"s\">file_regex=(?i)(.*?)(\\\\.csv)</span><span class=\"p\">\n...    </span><span class=\"s\">include=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}\n...    </span><span class=\"s\">exclude=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n<div id=\"encoding\">\n<h5>Encoding</h5>\n<p><tt>encoding</tt> must be set if it shall not be cp1252.</p>\n<p><strong>cp1252</strong> is:</p>\n<ul>\n<li>Code Page 1252</li>\n<li>Windows-1252</li>\n<li>Windows Western European</li>\n</ul>\n<p>Most characters are same between ISO-8859-1 (Latin-1) except for the code points 128-159 (0x80-0x9F).\nThese Characters are available in cp1252 which are not present in Latin-1.</p>\n<p><tt>\u20ac \u201a \u0192 \u201e \u2026 \u2020 \u2021 \u02c6 \u2030 \u0160 \u2039 \u0152 \u017d \u2018 \u2019 \u201c \u201d \u2022 \u2013 \u2014 \u02dc \u2122 \u0161 \u203a \u0153 \u017e \u0178</tt></p>\n<p>See <a href=\"https://docs.python.org/3/library/codecs.html#standard-encodings\" rel=\"nofollow\">Python Standard Encoding</a> for more encodings</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-excel-us-comma-seperated\">\n<h5>Example Excel (US / comma seperated)</h5>\n<p>Dialect Defaults:</p>\n<pre><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">','</span>\n<span class=\"n\">quotechar</span> <span class=\"o\">=</span> <span class=\"s1\">'\"'</span>\n<span class=\"n\">doublequote</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">lineterminator</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">r</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n<span class=\"n\">quoting</span> <span class=\"o\">=</span> <span class=\"n\">QUOTE_MINIMAL</span>\n</pre>\n<p>Usage in Robot Framework</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">my_data_file.csv</span><span class=\"p\">    </span><span class=\"s\">dialect=excel</span><span class=\"p\">    </span><span class=\"s\">encoding=</span><span class=\"p\">${</span><span class=\"nv\">None</span><span class=\"p\">}</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-excel-tab-t-seperated\">\n<h5>Example Excel Tab (\\t seperated)</h5>\n<p>Dialect Defaults:</p>\n<pre><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">t'</span>\n<span class=\"n\">quotechar</span> <span class=\"o\">=</span> <span class=\"s1\">'\"'</span>\n<span class=\"n\">doublequote</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">lineterminator</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">r</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n<span class=\"n\">quoting</span> <span class=\"o\">=</span> <span class=\"n\">QUOTE_MINIMAL</span>\n</pre>\n<p>Usage in Robot Framework</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">my_data_file.csv</span><span class=\"p\">    </span><span class=\"s\">dialect=excel_tab</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-unix-dialect\">\n<h5>Example Unix Dialect</h5>\n<p>Dialect Defaults:</p>\n<pre><span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">','</span>\n<span class=\"n\">quotechar</span> <span class=\"o\">=</span> <span class=\"s1\">'\"'</span>\n<span class=\"n\">doublequote</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">lineterminator</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n<span class=\"n\">quoting</span> <span class=\"o\">=</span> <span class=\"n\">QUOTE_ALL</span>\n</pre>\n<p>Usage in Robot Framework</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">my_data_file.csv</span><span class=\"p\">    </span><span class=\"s\">dialect=unix_dialect</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-user-defined\">\n<h5>Example User Defined</h5>\n<p>User may define the format completely free.\nIf an option is not set, the default values are used.\nTo register a userdefined format user have to set the\noption <tt>dialect</tt> to <tt>UserDefined</tt></p>\n<p>Usage in Robot Framework</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">my_data_file.csv</span><span class=\"p\">\n...    </span><span class=\"s\">dialect=UserDefined</span><span class=\"p\">\n...    </span><span class=\"s\">delimiter=.</span><span class=\"p\">\n...    </span><span class=\"s\">lineterminator=\\\\n</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"limitation\">\n<h4>Limitation</h4>\n<div>\n<div><br></div>\n</div>\n<div id=\"eclipse-plug-in-red\">\n<h5>Eclipse plug-in RED</h5>\n<p>There are known issues if the Eclipse plug-in RED is used. Because the\ndebugging Listener of this tool pre-calculates the number of test cases\nbefore the creation of test cases by the Data Driver. This leads to the\nsituation that the RED listener throws exceptions because it is called\nfor each test step but the RED GUI already stopped debugging so that the\nlistener cannot send Information to the GUI. This does not influence the\nexecution in any way but produces a lot of unwanted exceptions in the\nLog.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"variable-types\">\n<h5>Variable types</h5>\n<p>In this early Version of DataDriver, only scalar variables are\nsupported. Lists and dictionaries may be added in the next releases.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"ms-excel-and-typed-cells\">\n<h5>MS Excel and typed cells</h5>\n<p>Microsoft Excel xls or xlsx file have the possibility to type thair data\ncells. Numbers are typically of the type float. If these data are not\nexplicitly defined as text in Excel, pandas will read it as the type\nthat is has in excel. Because we have to work with strings in Robot\nFramework these data are converted to string. This leads to the\nsituation that a European time value like \u201c04.02.2019\u201d (4th January\n2019) is handed over to Robot Framework in Iso time \u201c2019-01-04\n00:00:00\u201d. This may cause unwanted behavior. To mitigate this risk you\nshould define Excel based files explicitly as text within Excel.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"how-to-activate-the-data-driver\">\n<h4>How to activate the Data Driver</h4>\n<p>To activate the DataDriver for a test suite (one specific *.robot file)\njust import it as a library. You may also specify some options if the\ndefault parameters do not fit your needs.</p>\n<p><strong>Example</strong>:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">          </span><span class=\"nn\">DataDriver</span><span class=\"p\">\n</span><span class=\"kn\">Test Template</span><span class=\"p\">    </span><span class=\"nf\">Invalid Logins</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"structure-of-test-suite\">\n<h3>Structure of test suite</h3>\n<div>\n<div><br></div>\n</div>\n<div id=\"requirements\">\n<h4>Requirements</h4>\n<p>In the Moment there are some requirements how a test\nsuite must be structured so that the DataDriver can get all the\ninformation it needs.</p>\n<blockquote>\n<ul>\n<li>only the first test case will be used as a template. All other test\ncases will be deleted.</li>\n<li>Test cases have to be defined with a\n<tt>Test Template</tt>. Reason for this is, that the DataDriver needs to\nknow the names of the test case arguments. Test cases do not have\nnamed arguments. Keywords do.</li>\n<li>The keyword which is used as\n<tt>Test Template</tt> must be defined within the test suite (in the same\n*.robot file). If the keyword which is used as <tt>Test Template</tt> is\ndefined in a <tt>Resource</tt> the DataDriver has no access to its\narguments names.</li>\n</ul>\n</blockquote>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-test-suite\">\n<h4>Example Test Suite</h4>\n<pre><span class=\"gh\">***Settings***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">           </span><span class=\"nn\">DataDriver</span><span class=\"p\">\n</span><span class=\"kn\">Resource</span><span class=\"p\">          </span><span class=\"nn\">login_resources.robot</span><span class=\"p\">\n</span><span class=\"kn\">Suite Setup</span><span class=\"p\">       </span><span class=\"nf\">Open my Browser</span><span class=\"p\">\n</span><span class=\"kn\">Suite Teardown</span><span class=\"p\">    </span><span class=\"nf\">Close Browsers</span><span class=\"p\">\n</span><span class=\"kn\">Test Setup</span><span class=\"p\">        </span><span class=\"nf\">Open Login Page</span><span class=\"p\">\n</span><span class=\"kn\">Test Template</span><span class=\"p\">     </span><span class=\"nf\">Invalid Login</span><span class=\"p\">\n\n</span><span class=\"gh\">*** Test Case ***</span><span class=\"p\">\n</span><span class=\"gu\">Login with user </span><span class=\"p\">${</span><span class=\"nv\">username</span><span class=\"p\">}</span><span class=\"gu\"> and password </span><span class=\"p\">${</span><span class=\"nv\">password</span><span class=\"p\">}    </span><span class=\"s\">Default</span><span class=\"p\">    </span><span class=\"s\">UserData</span><span class=\"p\">\n\n</span><span class=\"gh\">***** *Keywords* *****</span><span class=\"p\">\n</span><span class=\"gu\">Invalid login</span><span class=\"p\">\n    [</span><span class=\"kn\">Arguments</span><span class=\"p\">]    ${</span><span class=\"nv\">username</span><span class=\"p\">}    ${</span><span class=\"nv\">password</span><span class=\"p\">}\n    </span><span class=\"nf\">Input username</span><span class=\"p\">    ${</span><span class=\"nv\">username</span><span class=\"p\">}\n    </span><span class=\"nf\">Input pwd</span><span class=\"p\">    ${</span><span class=\"nv\">password</span><span class=\"p\">}\n    </span><span class=\"nf\">click login button</span><span class=\"p\">\n    </span><span class=\"nf\">Error page should be visible</span>\n</pre>\n<p>In this example, the DataDriver is activated by using it as a Library.\nIt is used with default settings.\nAs <tt>Test Template</tt> the keyword <tt>Invalid Login</tt> is used. This\nkeyword has two arguments. Argument names are <tt>${username}</tt> and\n<tt>${password}</tt>. These names have to be in the CSV file as column\nheader. The test case has two variable names included in its name,\nwhich does not have any functionality in Robot Framework. However, the\nData Driver will use the test case name as a template name and\nreplaces the variables with the specific value of the single generated\ntest case.\nThis template test will only be used as a template. The specified data\n<tt>Default</tt> and <tt>UserData</tt> would only be used if no CSV file has\nbeen found.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"structure-of-data-file\">\n<h3>Structure of data file</h3>\n<div>\n<div><br></div>\n</div>\n<div id=\"min-required-columns\">\n<h4>min. required columns</h4>\n<ul>\n<li><tt>*** Test Cases ***</tt> column has to be the first one.</li>\n<li><em>Argument columns:</em> For each argument of the <tt>Test Template</tt>\nkeyword one column must be existing in the data file as data source.\nThe name of this column must match the variable name and syntax.</li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"optional-columns\">\n<h4>optional columns</h4>\n<ul>\n<li><em>[Tags]</em> column may be used to add specific tags to a test case. Tags\nmay be comma separated.</li>\n<li><em>[Documentation]</em> column may be used to add specific test case\ndocumentation.</li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"example-data-file\">\n<h4>Example Data file</h4>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>*** Test\nCases ***</th>\n<th>${username}</th>\n<th>${password}</th>\n<th>[Tags]</th>\n<th>[Documentat\nion]</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Right user\nempty pass</td>\n<td>demo</td>\n<td>${EMPTY}</td>\n<td>1</td>\n<td>This is a\ntest case\ndocumentati\non\nof the\nfirst one.</td>\n</tr>\n<tr><td>Right user\nwrong pass</td>\n<td>demo</td>\n<td>FooBar</td>\n<td>2</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>empty user\nmode pass</td>\n<td>${EMPTY}</td>\n<td>mode</td>\n<td>1,2,3,4</td>\n<td>This test\ncase has\nthe Tags\n1,2,3 and 4\nassigned.</td>\n</tr>\n<tr><td>\u00a0</td>\n<td>${EMPTY}</td>\n<td>${EMPTY}</td>\n<td>\u00a0</td>\n<td>This test\ncase has a\ngenerated\nname based\non template\nname.</td>\n</tr>\n<tr><td>\u00a0</td>\n<td>${EMPTY}</td>\n<td>FooBar</td>\n<td>\u00a0</td>\n<td>This test\ncase has a\ngenerated\nname based\non template\nname.</td>\n</tr>\n<tr><td>\u00a0</td>\n<td>FooBar</td>\n<td>mode</td>\n<td>\u00a0</td>\n<td>This test\ncase has a\ngenerated\nname based\non template\nname.</td>\n</tr>\n<tr><td>\u00a0</td>\n<td>FooBar</td>\n<td>${EMPTY}</td>\n<td>\u00a0</td>\n<td>This test\ncase has a\ngenerated\nname based\non template\nname.</td>\n</tr>\n<tr><td>\u00a0</td>\n<td>FooBar</td>\n<td>FooBar</td>\n<td>\u00a0</td>\n<td>This test\ncase has a\ngenerated\nname based\non template\nname.</td>\n</tr>\n</tbody>\n</table>\n<p>In this data file, eight test cases are defined. Each line specifies one\ntest case. The first two test cases have specific names. The other six\ntest cases will generate names based on template test cases name with\nthe replacement of variables in this name. The order of columns is\nirrelevant except the first column, <tt>*** Test Cases ***</tt></p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"data-sources\">\n<h3>Data Sources</h3>\n<div>\n<div><br></div>\n</div>\n<div id=\"csv-tsv-character-separated-values\">\n<h4>CSV / TSV (Character-separated values)</h4>\n<p>By default DataDriver reads csv files. With the <a href=\"#EncodingandCSVDialect\" rel=\"nofollow\">Encoding and CSV\nDialect</a> settings you may configure which\nstructure your data source has.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"xls-xlsx-files\">\n<h4>XLS / XLSX Files</h4>\n<p>If you want to use Excel based data sources, you may just set the file\nto the extention or you may point to the correct file. If the extention\nis \u201c.xls\u201d or \u201c.xlsx\u201d DataDriver will interpret it as Excel file.\nYou may select the sheet which will be read by the option <tt>sheet_name</tt>.\nBy default it is set to 0 which will be the first table sheet.\nYou may use sheet index (0 is first sheet) or sheet name(case sensitive).\nXLS interpreter will ignore all other options like encoding, delimiters etc.</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">.xlsx</span>\n</pre>\n<p>or:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">file=my_data_source.xlsx</span><span class=\"p\">    </span><span class=\"s\">sheet_name=2nd Sheet</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"pict-pairwise-independent-combinatorial-testing\">\n<h4>PICT (Pairwise Independent Combinatorial Testing)</h4>\n<p>Pict is able to generate data files based on a model file.\n<a href=\"https://github.com/Microsoft/pict\" rel=\"nofollow\">https://github.com/Microsoft/pict</a></p>\n<p>Documentation: <a href=\"https://github.com/Microsoft/pict/blob/master/doc/pict.md\" rel=\"nofollow\">https://github.com/Microsoft/pict/blob/master/doc/pict.md</a></p>\n<div>\n<div><br></div>\n</div>\n<div id=\"id1\">\n<h5>Requirements</h5>\n<ul>\n<li>Path to pict.exe must be set in the %PATH% environment variable.</li>\n<li>Data model file has the file extention \u201c.pict\u201d</li>\n<li>Pict model file must be encoded in UTF-8</li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"how-it-works\">\n<h5>How it works</h5>\n<p>If the file option is set to a file with the extention pict, DataDriver\nwill hand over this file to pict.exe and let it automatically generates\na file with the extention \u201c.pictout\u201d. This file will the be used as data\nsource for the test generation. (It is tab seperated and UTF-8 encoded)\nExcept the file option all other options of the library will be ignored.</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">my_model_file.pict</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n</div>\n<div id=\"file-encoding-and-csv-dialect\">\n<h3>File Encoding and CSV Dialect</h3>\n<p>CSV is far away from well designed and has absolutely no \u201ccommon\u201d\nformat. Therefore it is possible to define your own dialect or use\npredefined. The default is Excel-EU which is a semicolon separated\nfile.\nThese Settings are changeable as options of the Data Driver Library.</p>\n<div>\n<div><br></div>\n</div>\n<div id=\"file\">\n<h4>file=</h4>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">         </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">file=../data/my_data_source.csv</span>\n</pre>\n<ul>\n<li>None(default): Data Driver will search in the test suites folder if a\n*.csv file with the same name than the test suite *.robot file exists</li>\n<li>only file extention: if you just set a file extentions like \u201c.xls\u201d or\n\u201c.xlsx\u201d DataDriver will search</li>\n<li>absolute path: If an absolute path to a file is set, DataDriver tries\nto find and open the given data file.</li>\n<li>relative path: If the option does not point to a data file as an\nabsolute path, Data Driver tries to find a data file relative to the\nfolder where the test suite is located.</li>\n</ul>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"id2\">\n<h4>encoding=</h4>\n<p>may set the encoding of the CSV file. i.e.\n<tt>cp1252, ascii, <span class=\"pre\">iso-8859-1,</span> <span class=\"pre\">latin-1,</span> utf_8, utf_16, utf_16_be, utf_16_le</tt>,\netc\u2026 <a href=\"https://docs.python.org/3.7/library/codecs.html#standard-encodings\" rel=\"nofollow\">https://docs.python.org/3.7/library/codecs.html#standard-encodings</a></p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"dialect\">\n<h4>dialect=</h4>\n<p>You may change the CSV Dialect here. If the Dialect is set to\n\u2018UserDefined\u2019 the following options are used. Otherwise, they are\nignored.\nsupported Dialects are:</p>\n<pre><span class=\"s2\">\"excel\"</span>\n    <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">','</span>\n    <span class=\"n\">quotechar</span> <span class=\"o\">=</span> <span class=\"s1\">'\"'</span>\n    <span class=\"n\">doublequote</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">lineterminator</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">r</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n    <span class=\"n\">quoting</span> <span class=\"o\">=</span> <span class=\"n\">QUOTE_MINIMAL</span>\n\n<span class=\"s2\">\"excel-tab\"</span>\n    <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">t'</span>\n\n<span class=\"s2\">\"unix\"</span>\n    <span class=\"n\">delimiter</span> <span class=\"o\">=</span> <span class=\"s1\">','</span>\n    <span class=\"n\">quotechar</span> <span class=\"o\">=</span> <span class=\"s1\">'\"'</span>\n    <span class=\"n\">doublequote</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">skipinitialspace</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n    <span class=\"n\">lineterminator</span> <span class=\"o\">=</span> <span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span>\n    <span class=\"n\">quoting</span> <span class=\"o\">=</span> <span class=\"n\">QUOTE_ALL</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"defaults\">\n<h4>Defaults:</h4>\n<pre><span class=\"n\">file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n<span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s1\">'cp1252'</span><span class=\"p\">,</span>\n<span class=\"n\">dialect</span><span class=\"o\">=</span><span class=\"s1\">'Excel-EU'</span><span class=\"p\">,</span>\n<span class=\"n\">delimiter</span><span class=\"o\">=</span><span class=\"s1\">';'</span><span class=\"p\">,</span>\n<span class=\"n\">quotechar</span><span class=\"o\">=</span><span class=\"s1\">'\"'</span><span class=\"p\">,</span>\n<span class=\"n\">escapechar</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\\\\\\\</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n<span class=\"n\">doublequote</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n<span class=\"n\">skipinitialspace</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n<span class=\"n\">lineterminator</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\\\</span><span class=\"s1\">r</span><span class=\"se\">\\\\</span><span class=\"s1\">n'</span><span class=\"p\">,</span>\n<span class=\"n\">sheet_name</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"custom-datareader-classes\">\n<h3>Custom DataReader Classes</h3>\n<p>It is possible to write your own DataReader Class as a plugin for DataDriver.\nDataReader Classes are called from DataDriver to return a list of TestCaseData.</p>\n<div>\n<div><br></div>\n</div>\n<div id=\"using-custom-datareader\">\n<h4>Using Custom DataReader</h4>\n<p>DataReader classes are loaded dynamically into DataDriver while runtime.\nDataDriver identifies the DataReader to load by the file extantion of the data file or by the option <tt>reader_class</tt>.</p>\n<div>\n<div><br></div>\n</div>\n<div id=\"select-reader-by-file-extension\">\n<h5>Select Reader by File Extension:</h5>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">file=mydata.csv</span>\n</pre>\n<p>This will load the class <tt>csv_reader</tt> from <tt>csv_reader.py</tt> from the same folder.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"select-reader-by-option\">\n<h5>Select Reader by Option:</h5>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n    </span><span class=\"s\">Library</span><span class=\"p\">    </span><span class=\"s\">DataDriver</span><span class=\"p\">   </span><span class=\"s\">file=mydata.csv</span><span class=\"p\">    </span><span class=\"s\">reader_class=generic_csv_reader</span><span class=\"p\">    </span><span class=\"s\">dialect=userdefined</span><span class=\"p\">   </span><span class=\"s\">delimiter=\\\\t</span><span class=\"p\">    </span><span class=\"s\">encoding=UTF-8</span>\n</pre>\n<p>This will load the class <tt>generic_csv_reader</tt> from <tt>generic_csv_reader.py</tt> from same folder.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"create-custom-reader\">\n<h4>Create Custom Reader</h4>\n<p>Recommendation:</p>\n<p>Have a look to the Source Code of existing DataReader like <tt>csv_reader.py</tt> or <tt>generic_csv_reader.py</tt> .</p>\n<p>To write your own reader, create a class inherited from <tt>AbstractReaderClass</tt>.</p>\n<p>Your class will get all available configs from DataDriver as an object of <tt>ReaderConfig</tt> on <tt>__init__</tt>.</p>\n<p>DataDriver will call the method <tt>get_data_from_source</tt>\nThis method should then load your data from your custom source and stores them into list of object of <tt>TestCaseData</tt>.\nThis List of <tt>TestCaseData</tt> will be returned to DataDriver.</p>\n<p><tt>AbstractReaderClass</tt> has also some optional helper methods that may be useful.</p>\n<p>You can either place the custom reader with the others in DataDriver folder or anywhere on the disk.\nIn the first case or if your custom reader is in python path just use it like the others by name:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">          </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">reader_class=my_reader</span>\n</pre>\n<p>In case it is somewhere on the disk, it is possible to use an absolute or relative path to a custom Reader.\nImports of custom readers follow the same rules like importing Robot Framework libraries.\nPath can be relative to ${EXECDIR} or to DataDriver/__init__.py:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">          </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">reader_class=C:/data/my_reader.py</span><span class=\"p\">    </span><span class=\"c\"># set custom reader\n</span><span class=\"p\">...                            </span><span class=\"s\">file_search_strategy=None</span><span class=\"p\">            </span><span class=\"c\"># set DataDriver to not check file\n</span><span class=\"p\">...                            </span><span class=\"s\">min=0</span><span class=\"p\">                                </span><span class=\"c\"># kwargs arguments for custom reader\n</span><span class=\"p\">...                            </span><span class=\"s\">max=62</span>\n</pre>\n<p>This <cite>my_reader.py</cite> should implement a class inherited from AbstractReaderClass that is named <cite>my_reader</cite>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">DataDriver.AbstractReaderClass</span> <span class=\"kn\">import</span> <span class=\"n\">AbstractReaderClass</span>  <span class=\"c1\"># inherit class from AbstractReaderClass</span>\n<span class=\"kn\">from</span> <span class=\"nn\">DataDriver.ReaderConfig</span> <span class=\"kn\">import</span> <span class=\"n\">TestCaseData</span>  <span class=\"c1\"># return list of TestCaseData to DataDriver</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">my_reader</span><span class=\"p\">(</span><span class=\"n\">AbstractReaderClass</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get_data_from_source</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>  <span class=\"c1\"># This method will be called from DataDriver to get the TestCaseData list.</span>\n        <span class=\"n\">test_data</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'min'</span><span class=\"p\">]),</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'max'</span><span class=\"p\">])):</span>  <span class=\"c1\"># Dummy code to just generate some data</span>\n            <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'$</span><span class=\"si\">{var_1}</span><span class=\"s1\">'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">),</span> <span class=\"s1\">'$</span><span class=\"si\">{var_2}</span><span class=\"s1\">'</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)}</span>  <span class=\"c1\"># args is a dictionary. Variable name is the key, value is value.</span>\n            <span class=\"n\">test_data</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">TestCaseData</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'test </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s1\">'tag'</span><span class=\"p\">]))</span>  <span class=\"c1\"># add a TestCaseData object to the list of tests.</span>\n        <span class=\"k\">return</span> <span class=\"n\">test_data</span>  <span class=\"c1\"># return the list of TestCaseData to DataDriver</span>\n</pre>\n<p>See other readers as example.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"selection-of-test-cases-to-execute\">\n<h3>Selection of Test Cases to execute</h3>\n<p>Because test cases that are created by DataDriver after parsing while execution,\nit is not possible to use some Robot Framework methods to select test cases.</p>\n<p>Examples for options that have to be used differently:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>robot option</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><tt><span class=\"pre\">--test</span></tt></td>\n<td>Selects the test cases by name.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--task</span></tt></td>\n<td>Alias for \u2013test that can be used when executing tasks.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--rerunfailed</span></tt></td>\n<td>Selects failed tests from an earlier output file to be re-executed.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--include</span></tt></td>\n<td>Selects the test cases by tag.</td>\n</tr>\n<tr><td><tt><span class=\"pre\">--exclude</span></tt></td>\n<td>Selects the test cases by tag.</td>\n</tr>\n</tbody>\n</table>\n<div>\n<div><br></div>\n</div>\n<div id=\"selection-of-test-cases-by-name\">\n<h4>Selection of test cases by name</h4>\n<div>\n<div><br></div>\n</div>\n<div id=\"select-a-single-test-case\">\n<h5>Select a single test case:</h5>\n<p>To execute just a single test case by its exact name it is possible to execute the test suite\nand set the global variable ${DYNAMICTEST} with the name of the test case to execute as value.\nPattern must be <tt>suitename.testcasename</tt>.</p>\n<p>Example:</p>\n<pre>robot --variable \"DYNAMICTEST:my suite name.test case to be executed\" my_suite_name.robot\n</pre>\n<p>Pabot uses this feature to execute a single test case when using <tt><span class=\"pre\">--testlevelsplit</span></tt></p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"select-a-list-of-test-cases\">\n<h5>Select a list of test cases:</h5>\n<p>It is possible to set a list of test case names by using the variable ${DYNAMICTESTS} (plural).\nThis variable must be a string and the list of names must be pipe-seperated (<tt>|</tt>).</p>\n<p>Example:</p>\n<pre>robot --variable DYNAMICTESTS:firstsuitename.testcase1|firstsuitename.testcase3|anothersuitename.othertestcase foldername\n</pre>\n<p>It is also possible to set the variable @{DYNAMICTESTS} as a list variable from i.e. python code.</p>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n<div id=\"re-run-failed-test-cases\">\n<h4>Re-run failed test cases:</h4>\n<p>Because it is not possible to use the command line argument <tt><span class=\"pre\">--rerunfailed</span></tt> from robot directly,\nDataDriver brings a Pre-Run-Modifier that handles this issue.</p>\n<p>Normally reexecution of failed testcases has three steps.</p>\n<ul>\n<li>original execution</li>\n<li>re-execution the failed ones based on original execution output</li>\n<li>merging original execution output with re-execution output</li>\n</ul>\n<p>The DataDriver.rerunfailed Pre-Run-Modifier removes all passed test cases based on a former output.xml.</p>\n<p>Example:</p>\n<pre>robot --output original.xml tests                                                    # first execute all tests\nrobot --prerunmodifier DataDriver.rerunfailed:original.xml --output rerun.xml tests  # then re-execute failing\nrebot --merge original.xml rerun.xml                                                 # finally merge results\n</pre>\n<p>Be aware, that in this case it is not allowed to use \u201c<tt>:</tt>\u201d as character in the original output file path.\nIf you want to set a full path on windows like <tt><span class=\"pre\">e:\\\\myrobottest\\\\output.xml</span></tt> you have to use \u201c<tt>;</tt>\u201d\nas argument seperator.</p>\n<p>Example:</p>\n<pre>robot --prerunmodifier DataDriver.rerunfailed;e:\\\\myrobottest\\\\output.xml --output e:\\\\myrobottest\\\\rerun.xml tests\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"filtering-with-tags\">\n<h4>Filtering with tags.</h4>\n<p>New in <tt>0.3.1</tt></p>\n<p>It is possible to use tags to filter the data source.\nTo use this, tags must be assigned to the test cases in data source.</p>\n<div>\n<div><br></div>\n</div>\n<div id=\"robot-framework-command-line-arguments\">\n<h5>Robot Framework Command Line Arguments</h5>\n<p>To filter the source, the normal command line arguments of Robot Framework can be used.\nSee Robot Framework <a href=\"http://robotframework.org/robotframework/latest/RobotFrameworkUserGuide.html#tag-patterns\" rel=\"nofollow\">Userguide</a> for more information\nBe aware that the filtering of Robot Framework itself is done before DataDriver is called.\nThis means if the Template test is already filtered out by Robot Framework, DataDriver can never be called.\nIf you want to use <tt><span class=\"pre\">--include</span></tt> the DataDriver TestSuite should have a <tt>DefaultTag</tt> or <tt>ForceTag</tt> that\nfulfills these requirements.</p>\n<p>Example: <tt>robot <span class=\"pre\">--include</span> 1OR2 <span class=\"pre\">--exclude</span> foo DataDriven.robot</tt></p>\n<div>\n<div><br></div>\n</div>\n</div>\n<div id=\"filter-based-on-library-options\">\n<h5>Filter based on Library Options</h5>\n<p>It is also possible to filter the data source by an init option of DataDriver.\nIf these Options are set, Robot Framework Filtering will be ignored.</p>\n<p>Example:</p>\n<pre><span class=\"gh\">*** Settings ***</span><span class=\"p\">\n</span><span class=\"kn\">Library</span><span class=\"p\">    </span><span class=\"nn\">DataDriver</span><span class=\"p\">    </span><span class=\"s\">include=1OR2</span><span class=\"p\">    </span><span class=\"s\">exclude=foo</span>\n</pre>\n<div>\n<div><br></div>\n</div>\n</div>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7001558, "releases": {"0.0.3": [{"comment_text": "", "digests": {"md5": "37f3159daecb2f085a97b14ff4d5a27e", "sha256": "cb263712cbb2cf807bde3d339808cc9c5708824cb81eabb394099dd4b9ee5f79"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "37f3159daecb2f085a97b14ff4d5a27e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14948, "upload_time": "2019-02-03T10:10:50", "upload_time_iso_8601": "2019-02-03T10:10:50.181925Z", "url": "https://files.pythonhosted.org/packages/c4/21/696e133bbae54ac707a42db1e460859b167b556dea040c84a51cdff6dc0b/robotframework_datadriver-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c2df712c53be756a6004cc3ebb961086", "sha256": "66a30202b164b17b1e872b606a2aba472d1bb9de109eaaab0d3f51553999ac7f"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.3.tar.gz", "has_sig": false, "md5_digest": "c2df712c53be756a6004cc3ebb961086", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64197, "upload_time": "2019-02-03T10:10:52", "upload_time_iso_8601": "2019-02-03T10:10:52.405068Z", "url": "https://files.pythonhosted.org/packages/5d/d2/d980c9fecca7bc595c1c86a9f8eaf67cc4c740b41317431c43cef2125c80/robotframework-datadriver-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e58468ffdd58d621f29a3489fd47fdf7", "sha256": "b621b4692b216479f2b4f3ba9b286bf9c7cf3673a11787b1f42af19d13fff012"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "e58468ffdd58d621f29a3489fd47fdf7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15498, "upload_time": "2019-02-03T21:24:15", "upload_time_iso_8601": "2019-02-03T21:24:15.302343Z", "url": "https://files.pythonhosted.org/packages/d7/13/198e9fc17cb6da2d793d8c9ee60a2220376fa53e628dee54d5daf041965e/robotframework_datadriver-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d736eb5024b0df3eb66aa6ddeae4d5fd", "sha256": "3856784961ee25ef1e9066672ec9da3296ab35cce2a94629eda3d9990f0c8a35"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.4.tar.gz", "has_sig": false, "md5_digest": "d736eb5024b0df3eb66aa6ddeae4d5fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65528, "upload_time": "2019-02-03T21:24:16", "upload_time_iso_8601": "2019-02-03T21:24:16.858585Z", "url": "https://files.pythonhosted.org/packages/59/09/931e53afa77ae6dfaf3131d563a30e22ac1432ad8a982becc6eb2212504d/robotframework-datadriver-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "e64719e31a5ba1142d390de543d5c1a6", "sha256": "e2633cf292d72b0cc408ea087fb3e315480a59bc315e393692c66b70e8b9d3e4"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "e64719e31a5ba1142d390de543d5c1a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 19446, "upload_time": "2019-02-04T22:57:22", "upload_time_iso_8601": "2019-02-04T22:57:22.569578Z", "url": "https://files.pythonhosted.org/packages/af/3d/ed32f27d8e87f4d830e038732c2d5a4e45628a97a408b6d194371d3484e1/robotframework_datadriver-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f7ab27372f7c1e06bc0fa46cadb4858", "sha256": "8c3ff3afc04dc6e553dab28d2c659f43fa9b886f059ab2dec3025b76dcb2570c"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.5.tar.gz", "has_sig": false, "md5_digest": "2f7ab27372f7c1e06bc0fa46cadb4858", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 70306, "upload_time": "2019-02-04T22:57:24", "upload_time_iso_8601": "2019-02-04T22:57:24.239803Z", "url": "https://files.pythonhosted.org/packages/3c/83/c0dc98d43fc866fdfe567f576b5bd6a7e38e33f3358350c45fb4afbfe4b3/robotframework-datadriver-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "50ccdcd566abb82ce12ebe32fb773bec", "sha256": "a844c0ce8978c34aaf3d0604058dad619281499e771518db3ad8113e97b99851"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "50ccdcd566abb82ce12ebe32fb773bec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 19481, "upload_time": "2019-05-17T13:42:20", "upload_time_iso_8601": "2019-05-17T13:42:20.149255Z", "url": "https://files.pythonhosted.org/packages/ee/79/14c6f4b67b22eab65bdd04bda92e61293df69430c7f74b675b8fec1a8ae7/robotframework_datadriver-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8e455c8938bc844ae0b3b9cfe3b5efaa", "sha256": "b779e83a6d080e6fd6291bb00a7f4f514119b7d7880309d24748259c9a89c31e"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.6.tar.gz", "has_sig": false, "md5_digest": "8e455c8938bc844ae0b3b9cfe3b5efaa", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 80408, "upload_time": "2019-05-17T13:42:21", "upload_time_iso_8601": "2019-05-17T13:42:21.705797Z", "url": "https://files.pythonhosted.org/packages/2e/bf/b7937633a5d2cfcac32dbfc75e485efcf20011b788bb4e5ea451979dc5db/robotframework-datadriver-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "c3d70aa4ee0a989c2f37d3ce139a20c8", "sha256": "9d9d7aa3dde3fd75b35adc7fa84a36792e7bf8429cc2031bf273dd71f48fe240"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c3d70aa4ee0a989c2f37d3ce139a20c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 22541, "upload_time": "2019-05-17T23:15:05", "upload_time_iso_8601": "2019-05-17T23:15:05.639204Z", "url": "https://files.pythonhosted.org/packages/e4/44/fa4a9f07e2e47c28f38ebac0654e405657afba80449d8ffed16b02a40fb4/robotframework_datadriver-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "873f19ba92a79d9a65ee8b868edb690f", "sha256": "6f7e096b6c9991cf33e7059ab8f5999b55b82cc1701026e04acd2694e0ffb12b"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.7.tar.gz", "has_sig": false, "md5_digest": "873f19ba92a79d9a65ee8b868edb690f", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 231034, "upload_time": "2019-05-17T23:15:07", "upload_time_iso_8601": "2019-05-17T23:15:07.451926Z", "url": "https://files.pythonhosted.org/packages/1e/1f/bf1308b4d632397a878c4dbde9668f05917d7fefc5b0feafcf32ff5a251b/robotframework-datadriver-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "7886a9f59f8c0e676c65e4f0ac3aebb7", "sha256": "b8879db850d36c329d0dcf02cefe5b6c15d8564e19521e7918f45c708f064538"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "7886a9f59f8c0e676c65e4f0ac3aebb7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 22537, "upload_time": "2019-05-17T23:22:54", "upload_time_iso_8601": "2019-05-17T23:22:54.693058Z", "url": "https://files.pythonhosted.org/packages/0e/2d/9b168c7f7b1468574a0dac113e78a994fa1a0e9103beb027627de2f20d4a/robotframework_datadriver-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "98cce61a55caeaaed2f1185879cea655", "sha256": "62d0b8f37d701471af45c12de55fd4ba6061a6570890febd8fac1cc07468a62a"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.8.tar.gz", "has_sig": false, "md5_digest": "98cce61a55caeaaed2f1185879cea655", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 231026, "upload_time": "2019-05-17T23:22:56", "upload_time_iso_8601": "2019-05-17T23:22:56.362061Z", "url": "https://files.pythonhosted.org/packages/ea/dd/8024ed184ca99e0731675304d01d0d8d958cb43fb144d335d1929391d894/robotframework-datadriver-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "9772a11563bf7b8f30271a6bf0361600", "sha256": "8e92cb31b084a518615301fae7b977a3386af5cf18f9363419485e9a5896004f"}, "downloads": -1, "filename": "robotframework_datadriver-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "9772a11563bf7b8f30271a6bf0361600", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 22704, "upload_time": "2019-06-16T20:34:54", "upload_time_iso_8601": "2019-06-16T20:34:54.220797Z", "url": "https://files.pythonhosted.org/packages/8a/78/890cf1079cf884fc8bc460590c99fe4e9c42bf167857e66952c8719d6997/robotframework_datadriver-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "84f11b3d97235aa4dfbe2c11b71cfc61", "sha256": "9d748094bf1975bcbfac27d3c42f3023b25fd3e27a755b49d8ee9d3a740cec0e"}, "downloads": -1, "filename": "robotframework-datadriver-0.0.9.tar.gz", "has_sig": false, "md5_digest": "84f11b3d97235aa4dfbe2c11b71cfc61", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 90761, "upload_time": "2019-06-16T20:34:56", "upload_time_iso_8601": "2019-06-16T20:34:56.566810Z", "url": "https://files.pythonhosted.org/packages/48/87/3fb26840c21e011f850953bcea4fc6fd9a44fd15873acf7d2a8a704d6d6f/robotframework-datadriver-0.0.9.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "a1ea5d2ac67ec921479ac4bc493a7fdb", "sha256": "bfe094639bc23803dfb69e977e6e817a93b3cbe29002d9ad241d3da90fb4790d"}, "downloads": -1, "filename": "robotframework_datadriver-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a1ea5d2ac67ec921479ac4bc493a7fdb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 27393, "upload_time": "2019-07-03T23:57:44", "upload_time_iso_8601": "2019-07-03T23:57:44.759842Z", "url": "https://files.pythonhosted.org/packages/8d/9f/f3e285a03798d99cd654f680d86982d25caf2b5077ba364ea97720edb0ee/robotframework_datadriver-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15024b7f0535da09911ce421d6755b44", "sha256": "ddbfc24aff6940b0f1d324c125530c2ef8402175dc004bde67c6abe4c06b6400"}, "downloads": -1, "filename": "robotframework-datadriver-0.1.0.tar.gz", "has_sig": false, "md5_digest": "15024b7f0535da09911ce421d6755b44", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 99963, "upload_time": "2019-07-03T23:57:46", "upload_time_iso_8601": "2019-07-03T23:57:46.741073Z", "url": "https://files.pythonhosted.org/packages/13/14/e9ca7f99e9e479dc8e3d3264aad1c7949b5f26ee9b378ba829c92547557f/robotframework-datadriver-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9bb9061760c4ab61b29209609fd65db6", "sha256": "57fd58b59e6b314ccbf98129745bc7e31afc264bb6d54fec95d758f8c03abf5a"}, "downloads": -1, "filename": "robotframework_datadriver-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9bb9061760c4ab61b29209609fd65db6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 30023, "upload_time": "2019-07-04T22:17:51", "upload_time_iso_8601": "2019-07-04T22:17:51.338994Z", "url": "https://files.pythonhosted.org/packages/09/ac/872a535bc13b95ba57b85806fad318de6a467a603915274068d61b13d75f/robotframework_datadriver-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3518812fec6306f7fd74d5b28dcb1d1", "sha256": "f66b0745d45f95e010ef254eb0f1fae3ebc9e8fbda7e3c18b238ec404579d92d"}, "downloads": -1, "filename": "robotframework-datadriver-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b3518812fec6306f7fd74d5b28dcb1d1", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 100674, "upload_time": "2019-07-04T22:17:53", "upload_time_iso_8601": "2019-07-04T22:17:53.441111Z", "url": "https://files.pythonhosted.org/packages/95/9b/dddd3210e6189aebdc26a8417b0bad1bbdb3e9dd9564d7e40ef403494d0d/robotframework-datadriver-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "3d25d7f3dbda2e1baf401035a4f3d11e", "sha256": "76e466ff7d1a3bd4ea67651569b62e5fe51e86e29688cee815bada241ad7e91d"}, "downloads": -1, "filename": "robotframework_datadriver-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3d25d7f3dbda2e1baf401035a4f3d11e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 31554, "upload_time": "2019-07-05T14:59:35", "upload_time_iso_8601": "2019-07-05T14:59:35.543714Z", "url": "https://files.pythonhosted.org/packages/a9/fd/5b141105539da3efe59dbbc9df00baa4a0f8137f5cc6e6f80f54faa1a9b8/robotframework_datadriver-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0062d81937d6902e99239de42800d59e", "sha256": "e72607e569e301a461abbd7ca16daac5d7c99a52e8671fdc088a16ef630d6b81"}, "downloads": -1, "filename": "robotframework-datadriver-0.2.1.tar.gz", "has_sig": false, "md5_digest": "0062d81937d6902e99239de42800d59e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 101506, "upload_time": "2019-07-05T14:59:37", "upload_time_iso_8601": "2019-07-05T14:59:37.203466Z", "url": "https://files.pythonhosted.org/packages/46/89/4517211bf42d7574b288d9ab959188319129d04ec544ed33f9410894606a/robotframework-datadriver-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "0c02ae647a7c507c138f58edb20f63bf", "sha256": "4a378cde09438c15efb55558224c1b8ff9be1d7eb68f7df62eec39f5aeb65de6"}, "downloads": -1, "filename": "robotframework_datadriver-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "0c02ae647a7c507c138f58edb20f63bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 31576, "upload_time": "2019-07-24T09:59:51", "upload_time_iso_8601": "2019-07-24T09:59:51.058655Z", "url": "https://files.pythonhosted.org/packages/92/dc/fbce29520cb67037d4be4a1e717d36010ca681cc1bbb44c72772e47144ea/robotframework_datadriver-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4f19ae01f2197a5b5020ee5e7a73db3", "sha256": "eef59e241c40e061eb26a772f436e0b9f669347a87ade8fee7fbf414f3209949"}, "downloads": -1, "filename": "robotframework-datadriver-0.2.2.tar.gz", "has_sig": false, "md5_digest": "b4f19ae01f2197a5b5020ee5e7a73db3", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 101534, "upload_time": "2019-07-24T09:59:53", "upload_time_iso_8601": "2019-07-24T09:59:53.109951Z", "url": "https://files.pythonhosted.org/packages/13/b3/bd39b02d59f8f30e95d0895080d37ee180b8b0d6079eae70ff053320b877/robotframework-datadriver-0.2.2.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "a6e831f5e1c127bea37d7a68f46c80dd", "sha256": "5e65da7278e01b3214730e8a870fd1667b8133c6b22992dc91fbbb3f70191763"}, "downloads": -1, "filename": "robotframework_datadriver-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "a6e831f5e1c127bea37d7a68f46c80dd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*", "size": 31875, "upload_time": "2019-07-27T00:05:53", "upload_time_iso_8601": "2019-07-27T00:05:53.320962Z", "url": "https://files.pythonhosted.org/packages/dd/d0/e3a32a8e2a3afddd3bfacb09047df747aa1dd391f7d57da447d58a1c5436/robotframework_datadriver-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cf2ca56cd9755253f3659b210ca8fa59", "sha256": "c4636fa5628e10fdfb38af00c901e4bc44fd83ca2eabf49633c5fee734d9cd7a"}, "downloads": -1, "filename": "robotframework-datadriver-0.2.7.tar.gz", "has_sig": false, "md5_digest": "cf2ca56cd9755253f3659b210ca8fa59", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7,!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,!=3.5.*", "size": 101904, "upload_time": "2019-07-27T00:05:55", "upload_time_iso_8601": "2019-07-27T00:05:55.481570Z", "url": "https://files.pythonhosted.org/packages/03/75/5244c0605e29ecbe51bfaa8cfbb5e742b87ba9ffd78d17b918e8d6a9d756/robotframework-datadriver-0.2.7.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "c7d921bc0b66b065ae9acfe6f9f4823e", "sha256": "2a5d1334e53337cd175db5fa5848cf9b6b6b187b1ddc4a06efad74d1e4b2029b"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c7d921bc0b66b065ae9acfe6f9f4823e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 31571, "upload_time": "2019-07-27T00:39:37", "upload_time_iso_8601": "2019-07-27T00:39:37.054087Z", "url": "https://files.pythonhosted.org/packages/9d/34/c03cf5330dd3dd0e6924ded54c491d7443bbc8a0ca2145aae2a466e4d9f7/robotframework_datadriver-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1343bd1f441e2415311352d011396003", "sha256": "64aba645dec5618b21c638850c24f78cf85bf6187225f657735d0b9ac54d1a58"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1343bd1f441e2415311352d011396003", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 101492, "upload_time": "2019-07-27T00:39:39", "upload_time_iso_8601": "2019-07-27T00:39:39.475386Z", "url": "https://files.pythonhosted.org/packages/2c/1f/d7aa3de3352ea4639409e1af643b9307f7f3a014ebd899d7d6ed05b6af4c/robotframework-datadriver-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "763e30ff3b0bdfbf5a51cb2c5bb2623d", "sha256": "2cbe4aecf10fd61e001b6be4e7e90617d650cc31349ad9ddf83a4a12bfe1acc9"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "763e30ff3b0bdfbf5a51cb2c5bb2623d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 32854, "upload_time": "2019-08-12T15:04:49", "upload_time_iso_8601": "2019-08-12T15:04:49.552666Z", "url": "https://files.pythonhosted.org/packages/92/f3/19b489a7c927007474b545e58cfb781ba2bfd043b9894065919084150d60/robotframework_datadriver-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e84082a912ac246ac8399d82215b17c3", "sha256": "e73c50e693a50bc0dfa2e45d7dd23385a4dddee9c57bfbc8a630ff68a109ddb4"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.1.tar.gz", "has_sig": false, "md5_digest": "e84082a912ac246ac8399d82215b17c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 104772, "upload_time": "2019-08-12T15:04:51", "upload_time_iso_8601": "2019-08-12T15:04:51.684647Z", "url": "https://files.pythonhosted.org/packages/78/1f/53643c146fea073813066f8f4a617a14f28f013acf4c481163e88a7a05da/robotframework-datadriver-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "941748893e280a2ae15ef02e88b6797c", "sha256": "d4ae6d1d5287c665e418b6cbd24ab8b9d6dcbb0f0add8182d82585aebbc92ea3"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "941748893e280a2ae15ef02e88b6797c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 33240, "upload_time": "2019-09-16T05:20:24", "upload_time_iso_8601": "2019-09-16T05:20:24.607298Z", "url": "https://files.pythonhosted.org/packages/24/88/c87f3a47b68a3f026cabc45e4b81641eb31b6d33454afdd3d09083c51541/robotframework_datadriver-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "55d53474d13c87b5deb64c4f2c798816", "sha256": "84d59072799e79541ec5523f424d703e79efee6d763b27ff4c1afded869d5abe"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.2.tar.gz", "has_sig": false, "md5_digest": "55d53474d13c87b5deb64c4f2c798816", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 105203, "upload_time": "2019-09-16T05:20:26", "upload_time_iso_8601": "2019-09-16T05:20:26.937084Z", "url": "https://files.pythonhosted.org/packages/b1/bc/5ddff131f0922132cb79245fc8e260ffd6115877ce9819cebf6c51d50165/robotframework-datadriver-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "70b45d3b44143f4444d41d53ef60be79", "sha256": "c9c4de4dd7d5bbc80cb13fb20778f859880e8ff951208753db9a6268f0b7157b"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "70b45d3b44143f4444d41d53ef60be79", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 61555, "upload_time": "2019-10-09T15:11:53", "upload_time_iso_8601": "2019-10-09T15:11:53.198781Z", "url": "https://files.pythonhosted.org/packages/76/03/85870a78b676a0153138ad20267054126a5dd472c56ec32cc140afec5157/robotframework_datadriver-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ced97d39c3efcd3a1452eac5b8c95e82", "sha256": "cf320147c58089de0553ce1e23f99e185a28aaaa5c5f7aad384b65481ceca8fb"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.3.tar.gz", "has_sig": false, "md5_digest": "ced97d39c3efcd3a1452eac5b8c95e82", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 114847, "upload_time": "2019-10-09T15:11:55", "upload_time_iso_8601": "2019-10-09T15:11:55.773660Z", "url": "https://files.pythonhosted.org/packages/f4/1a/df7fcb334459d643cac887aee6f22c51466e0b002635aa547f5ed373f471/robotframework-datadriver-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "2fa4c6af2529d4b4a8d32ca7afd4c8aa", "sha256": "c74356a3414ce04fb7e4ed222d2096d6f04ee26de4e0fe01ea4e02f69b456c01"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2fa4c6af2529d4b4a8d32ca7afd4c8aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 63481, "upload_time": "2019-11-25T23:25:10", "upload_time_iso_8601": "2019-11-25T23:25:10.527479Z", "url": "https://files.pythonhosted.org/packages/2e/c1/d6ec4cc9632f5d38aeb09e5fa02ec43dc14079d0e43c1c9a5fabcdafebbe/robotframework_datadriver-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0d8f2e034807b321c239c998a0d7d81", "sha256": "2b164b88c8320eb01f9ba69df49d76e013f8e7faf821359a4c089b29176e4e85"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.4.tar.gz", "has_sig": false, "md5_digest": "d0d8f2e034807b321c239c998a0d7d81", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 361851, "upload_time": "2019-11-25T23:25:13", "upload_time_iso_8601": "2019-11-25T23:25:13.402637Z", "url": "https://files.pythonhosted.org/packages/a8/c8/a3d69c984814b379b8e6803f5e069e888f18a954b23ca2c8199c9ebbe2dd/robotframework-datadriver-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "a363364b4627ff92f3c7ac73ee16abfa", "sha256": "1dc69f5347005e9c27c4d19ac2169518a2f51e00471615466c41fd1c8381d09f"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "a363364b4627ff92f3c7ac73ee16abfa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 35014, "upload_time": "2019-11-27T07:32:45", "upload_time_iso_8601": "2019-11-27T07:32:45.306386Z", "url": "https://files.pythonhosted.org/packages/4f/52/eb8ae67609032c4d88ac7d98e475c9e4f3868c538a94c7189dcc06790149/robotframework_datadriver-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "778fbfdf175fd9fd8d66c842ba54cc0d", "sha256": "e884a06f94928233abcdc242be992e887a9148cea38c21b7b125fa7851d34ddb"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.5.tar.gz", "has_sig": false, "md5_digest": "778fbfdf175fd9fd8d66c842ba54cc0d", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 361876, "upload_time": "2019-11-27T07:34:30", "upload_time_iso_8601": "2019-11-27T07:34:30.329271Z", "url": "https://files.pythonhosted.org/packages/c3/60/70e1f8584a7645e1f82cb5aa9d52947fd39adf189fde6bb81f0568ab7bad/robotframework-datadriver-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "3c4f95c10bd316c72cfbbaf281fa74e1", "sha256": "13961a04919407d7d0563219dce05b9a55c450d61ba34c9f49f98650a6506c2a"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "3c4f95c10bd316c72cfbbaf281fa74e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 35412, "upload_time": "2019-11-27T23:53:58", "upload_time_iso_8601": "2019-11-27T23:53:58.317212Z", "url": "https://files.pythonhosted.org/packages/a9/a8/0d351bdafb2d39b22458ce57d7c63ba2e483508d8dbd114626e569e5faf4/robotframework_datadriver-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56616763bf3db7bc146932a0dac16b0e", "sha256": "9254b8e1a4591987ca92706a756de9ff57bc420d833f8cf23c5f1dac81ec1118"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.6.tar.gz", "has_sig": false, "md5_digest": "56616763bf3db7bc146932a0dac16b0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 363172, "upload_time": "2019-11-27T23:54:00", "upload_time_iso_8601": "2019-11-27T23:54:00.696875Z", "url": "https://files.pythonhosted.org/packages/f0/ba/466e5efd4f84e1770bd9649ee57c598110989ed82f93010ef01ba0713876/robotframework-datadriver-0.3.6.tar.gz", "yanked": false}], "0.4.0a1": [{"comment_text": "", "digests": {"md5": "b53ba508da23ca2235e373a3968f30d7", "sha256": "ecb55391f968e3afc70512a195d0c18c543ccebe60521e79095e51c226a1523e"}, "downloads": -1, "filename": "robotframework_datadriver-0.4.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "b53ba508da23ca2235e373a3968f30d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 38379, "upload_time": "2020-03-01T17:29:30", "upload_time_iso_8601": "2020-03-01T17:29:30.893947Z", "url": "https://files.pythonhosted.org/packages/e9/9f/a11bc9b06475b8bf90d6dd17cc969866cc3e08ecdc6cae04af3a96c4bee9/robotframework_datadriver-0.4.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4552fb00cf4a9055c38f34799cfa0000", "sha256": "d978a19e1872d4fd99f5a2fd8052cb9a0b51e5f54c25da33ced6ae8795083439"}, "downloads": -1, "filename": "robotframework-datadriver-0.4.0a1.tar.gz", "has_sig": false, "md5_digest": "4552fb00cf4a9055c38f34799cfa0000", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 219184, "upload_time": "2020-03-01T17:29:32", "upload_time_iso_8601": "2020-03-01T17:29:32.762894Z", "url": "https://files.pythonhosted.org/packages/f3/3f/4de6cc60e95c96acc8dd90737308fba79909cf91a602d3e0089f236902d2/robotframework-datadriver-0.4.0a1.tar.gz", "yanked": false}], "0.4.0a2": [{"comment_text": "", "digests": {"md5": "f34e72b5dab8c091ae79a594e0692d6b", "sha256": "ed1d13a8ca28ed218392cfb09f57f5244a81dda6be5b20ba520a93dea9d0d68d"}, "downloads": -1, "filename": "robotframework_datadriver-0.4.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "f34e72b5dab8c091ae79a594e0692d6b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38836, "upload_time": "2020-03-04T18:28:17", "upload_time_iso_8601": "2020-03-04T18:28:17.329718Z", "url": "https://files.pythonhosted.org/packages/47/36/2e50811a9c16fd72bf84153736e3efef27d6251f3e4e6fe4eedb2704cba7/robotframework_datadriver-0.4.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b31113e80eb0428b153a522daa024ba5", "sha256": "43b0d0fead1eea84b30aeb8914d16e98a22ae511597d826dc38af1f719af7c66"}, "downloads": -1, "filename": "robotframework-datadriver-0.4.0a2.tar.gz", "has_sig": false, "md5_digest": "b31113e80eb0428b153a522daa024ba5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 373547, "upload_time": "2020-03-04T18:28:19", "upload_time_iso_8601": "2020-03-04T18:28:19.821027Z", "url": "https://files.pythonhosted.org/packages/d4/9f/feb894663ea570db198ed5dab31c4495628c806160b0e0e4a11ccb716ffa/robotframework-datadriver-0.4.0a2.tar.gz", "yanked": false}], "0.4.0b1": [{"comment_text": "", "digests": {"md5": "d51841c67ccc5626c47a39ef2846915c", "sha256": "0cabe05ec77b155426c6bfe6865acc25230d88bb3912fa7523917dd942b12ae3"}, "downloads": -1, "filename": "robotframework_datadriver-0.4.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "d51841c67ccc5626c47a39ef2846915c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38247, "upload_time": "2020-04-11T20:43:55", "upload_time_iso_8601": "2020-04-11T20:43:55.426636Z", "url": "https://files.pythonhosted.org/packages/cf/09/fee78fcf7e7eb1a000ef29f05acd5cf640ad5b4c7bd2210ed6327c97b1e3/robotframework_datadriver-0.4.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10d3b9db8832ff30e33bfba47a11775c", "sha256": "3910a7e99495f2394804992501811b4928e45793ce1de9dba81ed58ade8286b4"}, "downloads": -1, "filename": "robotframework-datadriver-0.4.0b1.tar.gz", "has_sig": false, "md5_digest": "10d3b9db8832ff30e33bfba47a11775c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 372252, "upload_time": "2020-04-11T20:43:57", "upload_time_iso_8601": "2020-04-11T20:43:57.872168Z", "url": "https://files.pythonhosted.org/packages/6d/6b/30c19d514ac86957187f24f93c16e45946b1322bf9588fc97cc8ba62e776/robotframework-datadriver-0.4.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3c4f95c10bd316c72cfbbaf281fa74e1", "sha256": "13961a04919407d7d0563219dce05b9a55c450d61ba34c9f49f98650a6506c2a"}, "downloads": -1, "filename": "robotframework_datadriver-0.3.6-py3-none-any.whl", "has_sig": false, "md5_digest": "3c4f95c10bd316c72cfbbaf281fa74e1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.6", "size": 35412, "upload_time": "2019-11-27T23:53:58", "upload_time_iso_8601": "2019-11-27T23:53:58.317212Z", "url": "https://files.pythonhosted.org/packages/a9/a8/0d351bdafb2d39b22458ce57d7c63ba2e483508d8dbd114626e569e5faf4/robotframework_datadriver-0.3.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "56616763bf3db7bc146932a0dac16b0e", "sha256": "9254b8e1a4591987ca92706a756de9ff57bc420d833f8cf23c5f1dac81ec1118"}, "downloads": -1, "filename": "robotframework-datadriver-0.3.6.tar.gz", "has_sig": false, "md5_digest": "56616763bf3db7bc146932a0dac16b0e", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.6", "size": 363172, "upload_time": "2019-11-27T23:54:00", "upload_time_iso_8601": "2019-11-27T23:54:00.696875Z", "url": "https://files.pythonhosted.org/packages/f0/ba/466e5efd4f84e1770bd9649ee57c598110989ed82f93010ef01ba0713876/robotframework-datadriver-0.3.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:01:57 2020"}