{"info": {"author": "['Vincent D. Warmerdam', 'Rogier van der Geer']", "author_email": "vincentwarmerdam@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "\n[![Build Status](https://travis-ci.org/godatadriven/evol.svg?branch=master)](https://travis-ci.org/godatadriven/evol) [![Documentation Status](https://readthedocs.org/projects/evol/badge/?version=latest)](https://evol.readthedocs.io/en/latest/?badge=latest)[![Downloads](https://pepy.tech/badge/evol)](https://pepy.tech/project/evol)\n\n\n![Imgur](https://i.imgur.com/7MHcIq1.png)\n\n`Evol` is clear dsl for composable evolutionary algorithms that optimised for joy.\n\n## Installation\n\nWe currently support python3.6 and python3.7 and you can install it via pip.\n\n```\npip install evol\n```\n\n## Documentation\n\nFor more details you can read the [docs](https://evol.readthedocs.io/en/latest/) but we advice everyone to get start by first checking out the examples in the `/examples` directory. These stand alone examples should show the spirit of usage better than the docs.\n\n## The Gist\n\nThe main idea is that you should be able to define a complex algorithm\nin a composable way. To explain what we mean by this:  let's consider\ntwo evolutionary algorithms for travelling salesman problems.\n\nThe first approach takes a collections of solutions and applies:\n\n1. a survival where only the top 50% solutions survive\n2. the population reproduces using a crossover of genes\n3. certain members mutate\n4. repeat this, maybe 1000 times or more!\n\n<img src=\"https://i.imgur.com/is9g07u.png\" alt=\"Drawing\" style=\"width: 100%;\"/>\n\nWe can also think of another approach:\n\n1. pick the best solution of the population\n2. make random changes to this parent and generate new solutions\n3. repeat this, maybe 1000 times or more!\n\n<img src=\"https://i.imgur.com/JRSWbTd.png\" alt=\"Drawing\" style=\"width: 100%;\"/>\n\nOne could even combine the two algorithms into a new one:\n\n1. run algorithm 1 50 times\n2. run algorithm 2 10 times\n3. repeat this, maybe 1000 times or more!\n\n<img src=\"https://i.imgur.com/SZTBWX2.png\" alt=\"Drawing\" style=\"width: 100%;\"/>\n\nYou might notice that many parts of these algorithms are similar and it\nis the goal of this library is to automate these parts. We hope to\nprovide an API that is fun to use and easy to tweak your heuristics in.\n\nA working example of something silimar to what is depicted above is shown below. You can also find this code as an example in the `/examples/simple_nonlinear.py`. \n\n```python\nimport random\nfrom evol import Population, Evolution\n\nrandom.seed(42)\n\ndef random_start():\n    \"\"\"\n    This function generates a random (x,y) coordinate\n    \"\"\"\n    return (random.random() - 0.5) * 20, (random.random() - 0.5) * 20\n\ndef func_to_optimise(xy):\n    \"\"\"\n    This is the function we want to optimise (maximize)\n    \"\"\"\n    x, y = xy\n    return -(1-x)**2 - 2*(2-x**2)**2\n\ndef pick_random_parents(pop):\n    \"\"\"\n    This is how we are going to select parents from the population\n    \"\"\"\n    mom = random.choice(pop)\n    dad = random.choice(pop)\n    return mom, dad\n\ndef make_child(mom, dad):\n    \"\"\"\n    This function describes how two candidates combine into a new candidate\n    Note that the output is a tuple, just like the output of `random_start`\n    We leave it to the developer to ensure that chromosomes are of the same type\n    \"\"\"\n    child_x = (mom[0] + dad[0])/2\n    child_y = (mom[1] + dad[1])/2\n    return child_x, child_y\n\ndef add_noise(chromosome, sigma):\n    \"\"\"\n    This is a function that will add some noise to the chromosome.\n    \"\"\"\n    new_x = chromosome[0] + (random.random()-0.5) * sigma\n    new_y = chromosome[1] + (random.random()-0.5) * sigma\n    return new_x, new_y\n\n# We start by defining a population with candidates.\npop = Population(chromosomes=[random_start() for _ in range(200)],\n                 eval_function=func_to_optimise, maximize=True)\n\n# We define a sequence of steps to change these candidates\nevo1 = (Evolution()\n       .survive(fraction=0.5)\n       .breed(parent_picker=pick_random_parents, combiner=make_child)\n       .mutate(func=add_noise, sigma=1))\n\n# We define another sequence of steps to change these candidates\nevo2 = (Evolution()\n       .survive(n=1)\n       .breed(parent_picker=pick_random_parents, combiner=make_child)\n       .mutate(func=add_noise, sigma=0.2))\n\n# We are combining two evolutions into a third one. You don't have to\n# but this approach demonstrates the flexibility of the library.\nevo3 = (Evolution()\n       .repeat(evo1, n=50)\n       .repeat(evo2, n=10)\n       .evaluate())\n\n# In this step we are telling evol to apply the evolutions\n# to the population of candidates.\npop = pop.evolve(evo3, n=5)\nprint(f\"the best score found: {max([i.fitness for i in pop])}\")\n```\n\nRoadmap 2019\n--------\n\nFor 2019 we have the following items on the shortlist, if you feel like \ncontributing or sharing thoughts, feel welcome to discuss it in the issues. \n\n- parallel processing support\n- proper logging/serialising support via callback steps \n- automatic generation of documentation \n- more support for building blocks for certain problems \n- more support for predefined problems to help students\n\nGetting Started\n---------------------------------------\n\nThe best place to get started is the `/examples` folder on github.\nThis folder contains self contained examples that work out of the\nbox.\n\n## How does it compare to ...\n\n- [... deap?](https://github.com/DEAP/deap) We think our library is more composable and pythonic while not removing any functionality. Our library may be a bit slower though.\n- [... hyperopt?](http://jaberg.github.io/hyperopt/) Since we force the user to make the actual algorithm we are less black boxy. Hyperopt is meant for hyperparameter tuning for machine learning and has better support for search in scikit learn.\n- [... inspyred?](https://pypi.org/project/inspyred/) The library offers a simple way to get started but it seems the project is less actively maintained than ours. \n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/godatadriven/evol", "keywords": "genetic,algorithms,heuristics", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "evol", "package_url": "https://pypi.org/project/evol/", "platform": "", "project_url": "https://pypi.org/project/evol/", "project_urls": {"Homepage": "https://github.com/godatadriven/evol"}, "release_url": "https://pypi.org/project/evol/0.5.1/", "requires_dist": ["multiprocess (>=0.70.6.1)", "Sphinx (>=2.0.0) ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "A Grammar for Evolutionary Algorithms and Heuristics", "version": "0.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/godatadriven/evol\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/06453bb3dbdea2baefdb3e45ded042057f0dd277/68747470733a2f2f7472617669732d63692e6f72672f676f6461746164726976656e2f65766f6c2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://evol.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8f0727908026a34184bf8a273a288d7978912386/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f65766f6c2f62616467652f3f76657273696f6e3d6c6174657374\"></a><a href=\"https://pepy.tech/project/evol\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d63b9125e75ca868f0ba1a67a85c3e8777c23f8/68747470733a2f2f706570792e746563682f62616467652f65766f6c\"></a></p>\n<p><img alt=\"Imgur\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50f86ccb6b734c6479dda4e3e0a4e305695afb75/68747470733a2f2f692e696d6775722e636f6d2f374d48634971312e706e67\"></p>\n<p><code>Evol</code> is clear dsl for composable evolutionary algorithms that optimised for joy.</p>\n<h2>Installation</h2>\n<p>We currently support python3.6 and python3.7 and you can install it via pip.</p>\n<pre><code>pip install evol\n</code></pre>\n<h2>Documentation</h2>\n<p>For more details you can read the <a href=\"https://evol.readthedocs.io/en/latest/\" rel=\"nofollow\">docs</a> but we advice everyone to get start by first checking out the examples in the <code>/examples</code> directory. These stand alone examples should show the spirit of usage better than the docs.</p>\n<h2>The Gist</h2>\n<p>The main idea is that you should be able to define a complex algorithm\nin a composable way. To explain what we mean by this:  let's consider\ntwo evolutionary algorithms for travelling salesman problems.</p>\n<p>The first approach takes a collections of solutions and applies:</p>\n<ol>\n<li>a survival where only the top 50% solutions survive</li>\n<li>the population reproduces using a crossover of genes</li>\n<li>certain members mutate</li>\n<li>repeat this, maybe 1000 times or more!</li>\n</ol>\n<img alt=\"Drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/74587d02086de0f74b1cf00feca74781b3b068e0/68747470733a2f2f692e696d6775722e636f6d2f697339673037752e706e67\">\n<p>We can also think of another approach:</p>\n<ol>\n<li>pick the best solution of the population</li>\n<li>make random changes to this parent and generate new solutions</li>\n<li>repeat this, maybe 1000 times or more!</li>\n</ol>\n<img alt=\"Drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1239edf3c529d20b77fc26b3f92cf352c7cd80ec/68747470733a2f2f692e696d6775722e636f6d2f4a5253576254642e706e67\">\n<p>One could even combine the two algorithms into a new one:</p>\n<ol>\n<li>run algorithm 1 50 times</li>\n<li>run algorithm 2 10 times</li>\n<li>repeat this, maybe 1000 times or more!</li>\n</ol>\n<img alt=\"Drawing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/222c7d605e5160db94a53cea06091aa33cbbff7b/68747470733a2f2f692e696d6775722e636f6d2f535a54425758322e706e67\">\n<p>You might notice that many parts of these algorithms are similar and it\nis the goal of this library is to automate these parts. We hope to\nprovide an API that is fun to use and easy to tweak your heuristics in.</p>\n<p>A working example of something silimar to what is depicted above is shown below. You can also find this code as an example in the <code>/examples/simple_nonlinear.py</code>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">from</span> <span class=\"nn\">evol</span> <span class=\"kn\">import</span> <span class=\"n\">Population</span><span class=\"p\">,</span> <span class=\"n\">Evolution</span>\n\n<span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">random_start</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This function generates a random (x,y) coordinate</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span> <span class=\"o\">-</span> <span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"mi\">20</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">func_to_optimise</span><span class=\"p\">(</span><span class=\"n\">xy</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This is the function we want to optimise (maximize)</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">xy</span>\n    <span class=\"k\">return</span> <span class=\"o\">-</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">-</span> <span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"o\">-</span><span class=\"n\">x</span><span class=\"o\">**</span><span class=\"mi\">2</span><span class=\"p\">)</span><span class=\"o\">**</span><span class=\"mi\">2</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">pick_random_parents</span><span class=\"p\">(</span><span class=\"n\">pop</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This is how we are going to select parents from the population</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">mom</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">pop</span><span class=\"p\">)</span>\n    <span class=\"n\">dad</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">pop</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">mom</span><span class=\"p\">,</span> <span class=\"n\">dad</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">make_child</span><span class=\"p\">(</span><span class=\"n\">mom</span><span class=\"p\">,</span> <span class=\"n\">dad</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This function describes how two candidates combine into a new candidate</span>\n<span class=\"sd\">    Note that the output is a tuple, just like the output of `random_start`</span>\n<span class=\"sd\">    We leave it to the developer to ensure that chromosomes are of the same type</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">child_x</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mom</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dad</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n    <span class=\"n\">child_y</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">mom</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"n\">dad</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])</span><span class=\"o\">/</span><span class=\"mi\">2</span>\n    <span class=\"k\">return</span> <span class=\"n\">child_x</span><span class=\"p\">,</span> <span class=\"n\">child_y</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">add_noise</span><span class=\"p\">(</span><span class=\"n\">chromosome</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    This is a function that will add some noise to the chromosome.</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"n\">new_x</span> <span class=\"o\">=</span> <span class=\"n\">chromosome</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sigma</span>\n    <span class=\"n\">new_y</span> <span class=\"o\">=</span> <span class=\"n\">chromosome</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"p\">(</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">()</span><span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"n\">sigma</span>\n    <span class=\"k\">return</span> <span class=\"n\">new_x</span><span class=\"p\">,</span> <span class=\"n\">new_y</span>\n\n<span class=\"c1\"># We start by defining a population with candidates.</span>\n<span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"n\">Population</span><span class=\"p\">(</span><span class=\"n\">chromosomes</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">random_start</span><span class=\"p\">()</span> <span class=\"k\">for</span> <span class=\"n\">_</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">200</span><span class=\"p\">)],</span>\n                 <span class=\"n\">eval_function</span><span class=\"o\">=</span><span class=\"n\">func_to_optimise</span><span class=\"p\">,</span> <span class=\"n\">maximize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We define a sequence of steps to change these candidates</span>\n<span class=\"n\">evo1</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Evolution</span><span class=\"p\">()</span>\n       <span class=\"o\">.</span><span class=\"n\">survive</span><span class=\"p\">(</span><span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">breed</span><span class=\"p\">(</span><span class=\"n\">parent_picker</span><span class=\"o\">=</span><span class=\"n\">pick_random_parents</span><span class=\"p\">,</span> <span class=\"n\">combiner</span><span class=\"o\">=</span><span class=\"n\">make_child</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">add_noise</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># We define another sequence of steps to change these candidates</span>\n<span class=\"n\">evo2</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Evolution</span><span class=\"p\">()</span>\n       <span class=\"o\">.</span><span class=\"n\">survive</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">breed</span><span class=\"p\">(</span><span class=\"n\">parent_picker</span><span class=\"o\">=</span><span class=\"n\">pick_random_parents</span><span class=\"p\">,</span> <span class=\"n\">combiner</span><span class=\"o\">=</span><span class=\"n\">make_child</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">mutate</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"o\">=</span><span class=\"n\">add_noise</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># We are combining two evolutions into a third one. You don't have to</span>\n<span class=\"c1\"># but this approach demonstrates the flexibility of the library.</span>\n<span class=\"n\">evo3</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">Evolution</span><span class=\"p\">()</span>\n       <span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">evo1</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">repeat</span><span class=\"p\">(</span><span class=\"n\">evo2</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n       <span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># In this step we are telling evol to apply the evolutions</span>\n<span class=\"c1\"># to the population of candidates.</span>\n<span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"n\">pop</span><span class=\"o\">.</span><span class=\"n\">evolve</span><span class=\"p\">(</span><span class=\"n\">evo3</span><span class=\"p\">,</span> <span class=\"n\">n</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">\"the best score found: </span><span class=\"si\">{</span><span class=\"nb\">max</span><span class=\"p\">([</span><span class=\"n\">i</span><span class=\"o\">.</span><span class=\"n\">fitness</span> <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"n\">pop</span><span class=\"p\">])</span><span class=\"si\">}</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n</pre>\n<h2>Roadmap 2019</h2>\n<p>For 2019 we have the following items on the shortlist, if you feel like\ncontributing or sharing thoughts, feel welcome to discuss it in the issues.</p>\n<ul>\n<li>parallel processing support</li>\n<li>proper logging/serialising support via callback steps</li>\n<li>automatic generation of documentation</li>\n<li>more support for building blocks for certain problems</li>\n<li>more support for predefined problems to help students</li>\n</ul>\n<h2>Getting Started</h2>\n<p>The best place to get started is the <code>/examples</code> folder on github.\nThis folder contains self contained examples that work out of the\nbox.</p>\n<h2>How does it compare to ...</h2>\n<ul>\n<li><a href=\"https://github.com/DEAP/deap\" rel=\"nofollow\">... deap?</a> We think our library is more composable and pythonic while not removing any functionality. Our library may be a bit slower though.</li>\n<li><a href=\"http://jaberg.github.io/hyperopt/\" rel=\"nofollow\">... hyperopt?</a> Since we force the user to make the actual algorithm we are less black boxy. Hyperopt is meant for hyperparameter tuning for machine learning and has better support for search in scikit learn.</li>\n<li><a href=\"https://pypi.org/project/inspyred/\" rel=\"nofollow\">... inspyred?</a> The library offers a simple way to get started but it seems the project is less actively maintained than ours.</li>\n</ul>\n\n          </div>"}, "last_serial": 5753922, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "082c26d72e489ed12c49b585e606d10b", "sha256": "33663084852b01bd446ad83633d5aa97e647fadedb72d32b698f2ad0debb66a8"}, "downloads": -1, "filename": "evol-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "082c26d72e489ed12c49b585e606d10b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16201, "upload_time": "2017-11-30T16:22:34", "upload_time_iso_8601": "2017-11-30T16:22:34.329812Z", "url": "https://files.pythonhosted.org/packages/cc/cc/21dfd1cdc692c2201a9f59ca9d732c5f7697e5f27eb72ade32baf0ff422e/evol-0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87e1fdb2a9113b9f610cd176a10460f3", "sha256": "cd5e11be6b3363705944beca9e2be3bd25dd83743abed997f518050ae6902276"}, "downloads": -1, "filename": "evol-0.1.tar.gz", "has_sig": false, "md5_digest": "87e1fdb2a9113b9f610cd176a10460f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5508, "upload_time": "2017-11-30T16:22:37", "upload_time_iso_8601": "2017-11-30T16:22:37.571979Z", "url": "https://files.pythonhosted.org/packages/e5/3b/ec237a4393d50e2dd9f98c3946f1c5cebeece0109c97283a1d7392e0870d/evol-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "aa606570e2b0f3f5e0b799528a7342bf", "sha256": "2a98395057891e35caca2c6c0cfef161c6bbb879def87cb7cd701d3992717d50"}, "downloads": -1, "filename": "evol-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa606570e2b0f3f5e0b799528a7342bf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 16309, "upload_time": "2017-11-30T19:28:06", "upload_time_iso_8601": "2017-11-30T19:28:06.154171Z", "url": "https://files.pythonhosted.org/packages/95/42/495e9281c5201e35570ad71a6f8065e0ef1bcb1b9284a8d50fdcdad7b17c/evol-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "335a7db604bc5ac7417f829925a6fe74", "sha256": "6e5474cd362c62016e6b3c7535a7e6738e6a3acc54ea0b984fc5c870f4fbb53a"}, "downloads": -1, "filename": "evol-0.1.1.tar.gz", "has_sig": false, "md5_digest": "335a7db604bc5ac7417f829925a6fe74", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6579, "upload_time": "2017-11-30T19:28:07", "upload_time_iso_8601": "2017-11-30T19:28:07.515175Z", "url": "https://files.pythonhosted.org/packages/7f/9d/b513ea3d34b3def98114a2eebab72d7be932d0b81bb0ceb23b229c2e102b/evol-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "5bc47ef08f8a03172eea8adfcb565ca3", "sha256": "d700bc20209947307eb34dcbd23552433ad451ff3fd07d067f6c67db30fed9b2"}, "downloads": -1, "filename": "evol-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5bc47ef08f8a03172eea8adfcb565ca3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 21165, "upload_time": "2018-01-04T16:41:55", "upload_time_iso_8601": "2018-01-04T16:41:55.590727Z", "url": "https://files.pythonhosted.org/packages/69/c8/58b816a2893087b80df08db2bc0889aa124f55c3adc87d9403d23c1e22c1/evol-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "74232dc0c40a0477ab15aad43963d965", "sha256": "962d41e4cb82ef43e3517dfa968e3ee3e2ceb52cefafd7dfdcafb1c0b16124ea"}, "downloads": -1, "filename": "evol-0.1.2.tar.gz", "has_sig": false, "md5_digest": "74232dc0c40a0477ab15aad43963d965", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11719, "upload_time": "2018-01-04T16:41:57", "upload_time_iso_8601": "2018-01-04T16:41:57.699810Z", "url": "https://files.pythonhosted.org/packages/dc/ac/0825bf50ba08c16d5604e0afe01ae070f8712d98753a8181ee499bbfa2c7/evol-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "0b67ecb15cc66b0660773e5a757dcdc0", "sha256": "c55566836d7578ca21bf9b6cbb0e402f168aed56861f8f126ea61422c38d2032"}, "downloads": -1, "filename": "evol-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0b67ecb15cc66b0660773e5a757dcdc0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24017, "upload_time": "2018-01-26T20:16:10", "upload_time_iso_8601": "2018-01-26T20:16:10.423969Z", "url": "https://files.pythonhosted.org/packages/18/86/12bac1db40288c1957049c37fcbcb800f6955919338e63be6bdcb8a59cbd/evol-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a19c805152806fc42aa19ad330044a7f", "sha256": "12a5bedd82571382ee6933aed19629d0742a1f714aa330c8949b3ba9f47bfc0f"}, "downloads": -1, "filename": "evol-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a19c805152806fc42aa19ad330044a7f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14071, "upload_time": "2018-01-26T20:16:11", "upload_time_iso_8601": "2018-01-26T20:16:11.526671Z", "url": "https://files.pythonhosted.org/packages/9d/50/659fa9f44efd92d1373d281311aac265485fc0db17ade00e3b54bd6c74f1/evol-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "fb133266bd3c26c8ce879c3d678d5f1a", "sha256": "b76b902156a1ab2c8cdd9321fb7160b4881ac50d31c19a2272f55886cbfe8965"}, "downloads": -1, "filename": "evol-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fb133266bd3c26c8ce879c3d678d5f1a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24733, "upload_time": "2018-03-28T20:50:36", "upload_time_iso_8601": "2018-03-28T20:50:36.864129Z", "url": "https://files.pythonhosted.org/packages/d9/1d/092b4429b0ae7d3be52e61c1f5ae046e9cb4047c105f4ee53493cec6add4/evol-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a89cfbd336cea298dd92e6d5ec08b08d", "sha256": "ec194054950231c44072f3554964dc98ac8cbb3c4896f0d79596cb9be3312123"}, "downloads": -1, "filename": "evol-0.2.1.tar.gz", "has_sig": false, "md5_digest": "a89cfbd336cea298dd92e6d5ec08b08d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14617, "upload_time": "2018-03-28T20:50:39", "upload_time_iso_8601": "2018-03-28T20:50:39.962176Z", "url": "https://files.pythonhosted.org/packages/31/46/c80651b968755680fe1db10288e1753f6c5c55317307fc227632a53668e3/evol-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "2dfd09c7ba3dbfc2ff71faadd047c3c8", "sha256": "0b857a5082570427c09ee7b042caf5d0b774d00beabe5e6ef1658561be13c122"}, "downloads": -1, "filename": "evol-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2dfd09c7ba3dbfc2ff71faadd047c3c8", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 19370, "upload_time": "2018-09-26T14:56:30", "upload_time_iso_8601": "2018-09-26T14:56:30.230186Z", "url": "https://files.pythonhosted.org/packages/bf/1c/34e5346b2b059c62f776aea5e81514ec92f43c632f0bfc66c9042072c6d1/evol-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "06156ea5533224ef86bb6c6f779307d6", "sha256": "5bee2942f695f3337c7bbe6a57cd8c8d583aab9f6fb1493d567cbac1d0819910"}, "downloads": -1, "filename": "evol-0.2.2.tar.gz", "has_sig": false, "md5_digest": "06156ea5533224ef86bb6c6f779307d6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15431, "upload_time": "2018-09-26T14:56:31", "upload_time_iso_8601": "2018-09-26T14:56:31.613404Z", "url": "https://files.pythonhosted.org/packages/91/ad/a2c3a0e144fa3688a5b3b3e173ba1d4d84b0e8304c22bf3c64b81e11c61b/evol-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "7082e7b6ed6e9233d9a7194695df38c0", "sha256": "4f046d4c4d75cf08344c835c97f6654066a0b3ecf4c3279b54d387a403af1027"}, "downloads": -1, "filename": "evol-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7082e7b6ed6e9233d9a7194695df38c0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 30603, "upload_time": "2019-07-16T10:20:08", "upload_time_iso_8601": "2019-07-16T10:20:08.347121Z", "url": "https://files.pythonhosted.org/packages/25/d5/87bc3aa2efba3961bb44ff5131b76f80f972a8c1e3220e8c3bf1edf8917a/evol-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f307bc1e6ca6688ff38633dae84aa3d", "sha256": "1758527b749ace41ee21268550ed977921b63617edf84dc0f37edb292b63a64b"}, "downloads": -1, "filename": "evol-0.2.3.tar.gz", "has_sig": false, "md5_digest": "5f307bc1e6ca6688ff38633dae84aa3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22912, "upload_time": "2019-07-16T10:20:10", "upload_time_iso_8601": "2019-07-16T10:20:10.264120Z", "url": "https://files.pythonhosted.org/packages/05/9c/ded6893ad85ba3c430cfd5f6060c749923fbf1cb2a8e8ffe8fc4c6baddcf/evol-0.2.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "26abb4935ed2ff491e6f86290cda1bb3", "sha256": "4dad300dd259ce677c638245c1127306f8e5f0d9336c00d2f761d1aa20dac173"}, "downloads": -1, "filename": "evol-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26abb4935ed2ff491e6f86290cda1bb3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 19573, "upload_time": "2018-11-18T11:09:02", "upload_time_iso_8601": "2018-11-18T11:09:02.874541Z", "url": "https://files.pythonhosted.org/packages/32/14/f68d362296c38ee6dbd863514b3f3905b0c564faf1481bd70ad8ec843573/evol-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "10a2852fe0dfcd65a9b695cab676d0f1", "sha256": "ee5ade72db9ecd25c621e1f35dcc823dc1a8352e5a74e31596505881d44a91dc"}, "downloads": -1, "filename": "evol-0.3.1.tar.gz", "has_sig": false, "md5_digest": "10a2852fe0dfcd65a9b695cab676d0f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15770, "upload_time": "2018-11-18T11:09:04", "upload_time_iso_8601": "2018-11-18T11:09:04.918784Z", "url": "https://files.pythonhosted.org/packages/7d/5c/53d3d151bb242ec20134acb1433daff182a4f3d303e1e6a80e91ffb64494/evol-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "52c7d6e141b64a157937be836b42f0cf", "sha256": "f28f981c2dd2265e8b988da971ea99556df9cf01703f582b706e8b9b3902d93b"}, "downloads": -1, "filename": "evol-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "52c7d6e141b64a157937be836b42f0cf", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 29669, "upload_time": "2019-01-22T18:30:30", "upload_time_iso_8601": "2019-01-22T18:30:30.910070Z", "url": "https://files.pythonhosted.org/packages/27/4c/0acccdfb9143ec82214736662fe4d5d0e5858688e1b36bfba2c04d65a169/evol-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d376cb1bd8da481e82691998f7470cff", "sha256": "4c11936c3f4099c9c881a8e6640a6125c57dc3b3674991347bc2b1aaf93dbd11"}, "downloads": -1, "filename": "evol-0.4.0.tar.gz", "has_sig": false, "md5_digest": "d376cb1bd8da481e82691998f7470cff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22762, "upload_time": "2019-01-22T18:30:32", "upload_time_iso_8601": "2019-01-22T18:30:32.600827Z", "url": "https://files.pythonhosted.org/packages/ba/83/e703a9c55b6ee25ce3a731717e5e0d812f640d9c216458f17a8bc3e946df/evol-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "2140e4e27cab4e6667451cc0b130694f", "sha256": "755f8fa1e531283317e098039ad4003a745ff332df633123d6009ca4b3fed062"}, "downloads": -1, "filename": "evol-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2140e4e27cab4e6667451cc0b130694f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 32408, "upload_time": "2019-08-02T11:59:48", "upload_time_iso_8601": "2019-08-02T11:59:48.596645Z", "url": "https://files.pythonhosted.org/packages/8c/71/4a554c2dcb0688e544c469e55d1bd41ce28147d56266ed541db78cb70e2b/evol-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fa3b40b44d22d2da1322b7eca50903c9", "sha256": "0447b7faeb65adf0cda6a894b99715f91eee2b8b59c80950aec892f786061635"}, "downloads": -1, "filename": "evol-0.4.1.tar.gz", "has_sig": false, "md5_digest": "fa3b40b44d22d2da1322b7eca50903c9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23043, "upload_time": "2019-08-02T11:59:50", "upload_time_iso_8601": "2019-08-02T11:59:50.225693Z", "url": "https://files.pythonhosted.org/packages/7a/ab/3be352a5a0c9e32913f23d3d7410b5b3d82f7d060785cc05aa45d39b39d5/evol-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "28b6691de2e4bbfad7255e9ba2c56d66", "sha256": "3839e4b89e49755299f53a912667c8aba86dc301410595359d252835001a2fe4"}, "downloads": -1, "filename": "evol-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "28b6691de2e4bbfad7255e9ba2c56d66", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 34447, "upload_time": "2019-08-29T11:03:41", "upload_time_iso_8601": "2019-08-29T11:03:41.696512Z", "url": "https://files.pythonhosted.org/packages/79/41/9488a546a4f62aa2a24603dc015bd3a9d5e15d62ec2293d9998fcb5690ee/evol-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d070df7ec02aa4262f3c50e3c3034f5", "sha256": "9b053a788402f2b20bceec20f3e0f6b67c6d7ab87b94d7596c33577a324290eb"}, "downloads": -1, "filename": "evol-0.5.0.tar.gz", "has_sig": false, "md5_digest": "2d070df7ec02aa4262f3c50e3c3034f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26098, "upload_time": "2019-08-29T11:03:43", "upload_time_iso_8601": "2019-08-29T11:03:43.213368Z", "url": "https://files.pythonhosted.org/packages/f9/86/fdf8b6172db5ec56210e0e5a918745aaeb30cbdf8b645b2c70bb8d8af62b/evol-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "ed8ae1d97b4c188f9e229724b6433cdd", "sha256": "7ed50a66f8bbd1cc82fd4e7424fa269b7d63d94179b8cb186756229db78abf92"}, "downloads": -1, "filename": "evol-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8ae1d97b4c188f9e229724b6433cdd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 34440, "upload_time": "2019-08-29T15:17:29", "upload_time_iso_8601": "2019-08-29T15:17:29.904236Z", "url": "https://files.pythonhosted.org/packages/d8/7d/ce4933cca22c0420ba54b0d41a784ddf373612bd7c35e7424ab2cb22e13d/evol-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "409a50be3ed7981851674ce7c7d9638f", "sha256": "da145355e0e411d3b7d1fe8d3b72294ffd2321d9dc7d547ad0fc03537ec2912d"}, "downloads": -1, "filename": "evol-0.5.1.tar.gz", "has_sig": false, "md5_digest": "409a50be3ed7981851674ce7c7d9638f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26091, "upload_time": "2019-08-29T15:17:32", "upload_time_iso_8601": "2019-08-29T15:17:32.053595Z", "url": "https://files.pythonhosted.org/packages/0e/bb/c908b6cc84d936e9863472f41574ba984aa63f95cd29b1137b643b2b5a62/evol-0.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed8ae1d97b4c188f9e229724b6433cdd", "sha256": "7ed50a66f8bbd1cc82fd4e7424fa269b7d63d94179b8cb186756229db78abf92"}, "downloads": -1, "filename": "evol-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ed8ae1d97b4c188f9e229724b6433cdd", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 34440, "upload_time": "2019-08-29T15:17:29", "upload_time_iso_8601": "2019-08-29T15:17:29.904236Z", "url": "https://files.pythonhosted.org/packages/d8/7d/ce4933cca22c0420ba54b0d41a784ddf373612bd7c35e7424ab2cb22e13d/evol-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "409a50be3ed7981851674ce7c7d9638f", "sha256": "da145355e0e411d3b7d1fe8d3b72294ffd2321d9dc7d547ad0fc03537ec2912d"}, "downloads": -1, "filename": "evol-0.5.1.tar.gz", "has_sig": false, "md5_digest": "409a50be3ed7981851674ce7c7d9638f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26091, "upload_time": "2019-08-29T15:17:32", "upload_time_iso_8601": "2019-08-29T15:17:32.053595Z", "url": "https://files.pythonhosted.org/packages/0e/bb/c908b6cc84d936e9863472f41574ba984aa63f95cd29b1137b643b2b5a62/evol-0.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:06 2020"}