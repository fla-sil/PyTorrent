{"info": {"author": "Martin Vejn\u00e1r", "author_email": "vejnar.martin@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries"], "description": "# typedobject\n\nDefine real, inheritable, and efficient Python classes using `TypedDict`-like\nsyntax.\n\n## Getting started\n\nInstall from pip.\n\n    python -m pip install typedobject\n\nThen, annotate your class with `typedobject` and declare its member fields\nusing variable annotations.\n\n    from typedobject import typedobject\n\n    @typedobject\n    class Point:\n        x: int\n        y: int\n\nThen construct the object using either positional or keyword arguments.\n\n    pt1 = Point(10, 20)\n    pt2 = Point(x=10, y=20)\n    assert pt1 == pt2\n\nYou can define methods, including `__init__`.\n\n    @typedobject\n    class Rectangle:\n        pt1: Point\n        pt2: Point\n\n        def __init__(self, x1, y1, x2, y2):\n            self.pt1 = Point(x1, y1)\n            self.pt2 = Point(x2, y2)\n\n        def area(self):\n            return (self.pt2.x - self.pt1.x) * (self.pt2.y - self.pt1.y)\n\n    rect = Rectangle(1, 1, 3, 3)\n    assert rect.area() == 4\n\nUnlike `TypedDict`, the defined classes are actually fresh new classes,\nnot `dict`s.\n\n    assert isinstance(rect, Rectangle)\n    assert not isinstance(rect, Point)\n\nInheritance works just fine.\n\n    @typedobject\n    class RoundedRect(Rectangle):\n        corner_radius: int\n\n    rr = RoundedRect(Point(1, 1), Point(3, 3), 1)\n\nNote that the derived class overrides `__init__`, unless you use `.no_init`.\n\n    @typedobject.no_init\n    class RoundedRect2(Rectangle):\n        corner_radius: int\n\n    rr = RoundedRect2(1, 1, 3, 3)\n    assert not hasattr(rr, 'corner_radius')\n\nTyped object classes, unlike `dataclass`, specify `__slots__`, which makes\naccess to attributes faster and makes objects take less memory, but prevents\nadding new fields dynamically.\n\nThey also prevent multiple inheritance.\n\n    # raises TypeError\n    class RectangleWithAPoint(Rectangle, Point):\n        pass\n\nYou can, however, inject mixins.\n\n    class TwoDObjectMixin:\n        def area(self):\n            return self.width() * self.height()\n\n    @typedobject\n    class Rectangle2(TwoDObjectMixin):\n        pt1: Point\n        pt2: Point\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/avakar/typedobject", "keywords": "", "license": "0BSD", "maintainer": "", "maintainer_email": "", "name": "typedobject", "package_url": "https://pypi.org/project/typedobject/", "platform": "", "project_url": "https://pypi.org/project/typedobject/", "project_urls": {"Homepage": "https://github.com/avakar/typedobject"}, "release_url": "https://pypi.org/project/typedobject/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Define real, inheritable, and efficient Python classes using variable annotations", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>typedobject</h1>\n<p>Define real, inheritable, and efficient Python classes using <code>TypedDict</code>-like\nsyntax.</p>\n<h2>Getting started</h2>\n<p>Install from pip.</p>\n<pre><code>python -m pip install typedobject\n</code></pre>\n<p>Then, annotate your class with <code>typedobject</code> and declare its member fields\nusing variable annotations.</p>\n<pre><code>from typedobject import typedobject\n\n@typedobject\nclass Point:\n    x: int\n    y: int\n</code></pre>\n<p>Then construct the object using either positional or keyword arguments.</p>\n<pre><code>pt1 = Point(10, 20)\npt2 = Point(x=10, y=20)\nassert pt1 == pt2\n</code></pre>\n<p>You can define methods, including <code>__init__</code>.</p>\n<pre><code>@typedobject\nclass Rectangle:\n    pt1: Point\n    pt2: Point\n\n    def __init__(self, x1, y1, x2, y2):\n        self.pt1 = Point(x1, y1)\n        self.pt2 = Point(x2, y2)\n\n    def area(self):\n        return (self.pt2.x - self.pt1.x) * (self.pt2.y - self.pt1.y)\n\nrect = Rectangle(1, 1, 3, 3)\nassert rect.area() == 4\n</code></pre>\n<p>Unlike <code>TypedDict</code>, the defined classes are actually fresh new classes,\nnot <code>dict</code>s.</p>\n<pre><code>assert isinstance(rect, Rectangle)\nassert not isinstance(rect, Point)\n</code></pre>\n<p>Inheritance works just fine.</p>\n<pre><code>@typedobject\nclass RoundedRect(Rectangle):\n    corner_radius: int\n\nrr = RoundedRect(Point(1, 1), Point(3, 3), 1)\n</code></pre>\n<p>Note that the derived class overrides <code>__init__</code>, unless you use <code>.no_init</code>.</p>\n<pre><code>@typedobject.no_init\nclass RoundedRect2(Rectangle):\n    corner_radius: int\n\nrr = RoundedRect2(1, 1, 3, 3)\nassert not hasattr(rr, 'corner_radius')\n</code></pre>\n<p>Typed object classes, unlike <code>dataclass</code>, specify <code>__slots__</code>, which makes\naccess to attributes faster and makes objects take less memory, but prevents\nadding new fields dynamically.</p>\n<p>They also prevent multiple inheritance.</p>\n<pre><code># raises TypeError\nclass RectangleWithAPoint(Rectangle, Point):\n    pass\n</code></pre>\n<p>You can, however, inject mixins.</p>\n<pre><code>class TwoDObjectMixin:\n    def area(self):\n        return self.width() * self.height()\n\n@typedobject\nclass Rectangle2(TwoDObjectMixin):\n    pt1: Point\n    pt2: Point\n</code></pre>\n\n          </div>"}, "last_serial": 7025601, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "41b900d9dc90843279b0faa64abd36b2", "sha256": "4f0c9b161681112cc60eb2792de8c990595a7baa1b38cf5e07d0f4c834a16721"}, "downloads": -1, "filename": "typedobject-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "41b900d9dc90843279b0faa64abd36b2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4440, "upload_time": "2020-03-25T15:02:33", "upload_time_iso_8601": "2020-03-25T15:02:33.977537Z", "url": "https://files.pythonhosted.org/packages/96/2c/e9a0643a649c3aef21a9f830ca56ef491eac9fe331cc617e6e482e683db4/typedobject-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2c565ef49a7c44cf9f3975c14954967", "sha256": "ee95956fe41d0136f628e47451fef519a944ce450dde53e5b219b6146d7da9af"}, "downloads": -1, "filename": "typedobject-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a2c565ef49a7c44cf9f3975c14954967", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4656, "upload_time": "2020-03-25T15:02:36", "upload_time_iso_8601": "2020-03-25T15:02:36.136847Z", "url": "https://files.pythonhosted.org/packages/e4/3c/686a2f39a40554d3ed0a8ec85702f89aaafa1c65304827c2426aa09eed01/typedobject-1.0.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "1dbb2f9dc41ef40b6e8735de59b09e4c", "sha256": "e7ff5532c90976c0572a831089d6c9e32c804a10d9d9a49b801258131964d0d2"}, "downloads": -1, "filename": "typedobject-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1dbb2f9dc41ef40b6e8735de59b09e4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6901, "upload_time": "2020-04-15T16:03:20", "upload_time_iso_8601": "2020-04-15T16:03:20.446525Z", "url": "https://files.pythonhosted.org/packages/85/48/846f27baec3446a51f0a694dde9c97ce6cc0f14fb700af2fadeebe83ea2d/typedobject-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de79232d76855ea4c9760a7c48465964", "sha256": "7881c7d5994be8b3c5ec2e774ea1d34aa35c8e3787fe352e04b0b8c4a35dee66"}, "downloads": -1, "filename": "typedobject-1.1.1.tar.gz", "has_sig": false, "md5_digest": "de79232d76855ea4c9760a7c48465964", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7899, "upload_time": "2020-04-15T16:03:28", "upload_time_iso_8601": "2020-04-15T16:03:28.363804Z", "url": "https://files.pythonhosted.org/packages/cc/46/79d1674c0adfbc9846b78c05c194cd6bca9c79a807a31785fc5770445c60/typedobject-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1dbb2f9dc41ef40b6e8735de59b09e4c", "sha256": "e7ff5532c90976c0572a831089d6c9e32c804a10d9d9a49b801258131964d0d2"}, "downloads": -1, "filename": "typedobject-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1dbb2f9dc41ef40b6e8735de59b09e4c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6901, "upload_time": "2020-04-15T16:03:20", "upload_time_iso_8601": "2020-04-15T16:03:20.446525Z", "url": "https://files.pythonhosted.org/packages/85/48/846f27baec3446a51f0a694dde9c97ce6cc0f14fb700af2fadeebe83ea2d/typedobject-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "de79232d76855ea4c9760a7c48465964", "sha256": "7881c7d5994be8b3c5ec2e774ea1d34aa35c8e3787fe352e04b0b8c4a35dee66"}, "downloads": -1, "filename": "typedobject-1.1.1.tar.gz", "has_sig": false, "md5_digest": "de79232d76855ea4c9760a7c48465964", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7899, "upload_time": "2020-04-15T16:03:28", "upload_time_iso_8601": "2020-04-15T16:03:28.363804Z", "url": "https://files.pythonhosted.org/packages/cc/46/79d1674c0adfbc9846b78c05c194cd6bca9c79a807a31785fc5770445c60/typedobject-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:51 2020"}