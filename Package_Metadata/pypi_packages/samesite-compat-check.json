{"info": {"author": "Malthe J\u00f8rgensen", "author_email": "malthe.jorgensen@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "samesite-compat-check\n=====================\n\n[![Latest PyPI version](https://img.shields.io/pypi/v/samesite-compat-check.svg)](https://pypi.python.org/pypi/samesite-compat-check)\n[![Latest Travis CI build status](https://travis-ci.org/peergradeio/samesite-compat-check.png)](https://travis-ci.org/peergradeio/samesite-compat-check)\n\nThis is a Python port of the [Chromium project's browser compatibility check] for `SameSite=None`-cookies.\n\nsamesite-compat-check exposes a single function `should_send_same_site_none`\nwhich takes a `User-Agent` string and returns `True` if `SameSite=None` is\nsupported by the browser with the given `User-Agent` and `False` if not.\n\nIf `User-Agent` is `None` then `should_send_same_site_none` returns `True`.  \n_This is the only addition on top of the pseudocode from the Chromium project_\n\nThe reason for this added behavior is to handle the case where the\n`User-Agent`-header is not sent. The logic is that only  browsers that\nspecifically mishandle `SameSite=None` should have the attribute omitted. You\ncan safely send `SameSite=None`-attribute to a browser that doesn't recognize\nthe attribute (e.g. an older browser). As in that case `SameSite` will be\nignored, and you'll automatically get the behavior you intended, as cookies\nbefore the `SameSite`-attibute were introduced worked as similar to\n`SameSite=None`.\n\nSameSite cookies\n----------------\nYou probably already know what `SameSite`-cookies are -- if not, I recommend you\nread <https://web.dev/samesite-cookies-explained/> at the very least.\n\n`SameSite=None`-cookies are mostly relevant to people who needs cookies on CORS\nrequests or need cookies inside an iframe. So if you don't use cookies when\ndoing CORS or in iframes (or use `SameSite=None` for some other reason) you\ncan safely ignore this package.\n\nYou may say -- who uses iframes nowadays? Well, plenty of things do!\nYoutube Embeds, the Intercom widget, that new little \"Log in with Google\"\npopover on sites like Medium.\n\nWell, if you're one those people who need `SameSite=None`, you'll find that a\ngood portion of your users have browsers that are incompatible with `SameSite`\ncookies that have the value `None`.\n\nThat's where this library comes in. It checks the `User-Agent` string, and returns\nwhether it is from a browser that is incompatible. \n\nRecommendation is to just not use `SameSite` for those browsers. Since the\nbrowsers are \"old\" and don't enforce the `SameSite`-rules for cookies where\nthe flag is not present, they will have the right behavior when you don't send\n`SameSite=None`.\n\nYou'll need to pass in the value of the `User-Agent`-header from the library\nyou're using (Django, Flask...) and then either set or not set `SameSite=None`\non the cookie.\n\n[Chromium project's browser compatibility check]: https://www.chromium.org/updates/same-site/incompatible-clients\n\nUsage\n-----\nGeneral use:\n\n```python\nfrom samesite_compat_check import should_send_same_site_none\n\nif should_send_same_site_none(user_agent):\n    # Set cookie with `SameSite=None`\nelse:\n    # Set cookie without any `SameSite` attribute\n```\n\n### Django\n\n```python\nif should_send_same_site_none(request.META['HTTP_USER_AGENT']):\n    response.cookies['my_precious_cookie']['samesite'] = 'None'\nelse:\n    pass\n```\n\nSetting `response.set_cookie(..., samesite='none')` will be allowed from\nDjango 3.1 and onwards. Currently only `lax` and `strict` are allowed in\n`response.set_cookie()`. Django only allows lowercase values for `samesite`.\nAccoring to the spec lowercase/uppercase should not matter, however I have not\ntested that particular detail in a browser.\n\n### Flask\n\n```python\nfrom flask import request\n\nkwargs = {}\nif should_send_same_site_none(request.headers.get('User-Agent')):\n    kwargs['samesite'] = 'None'\n\n# Requires Werkzeug>=1.0.0 (a Flask dependency) in order to use `samesite` \nresponse.set_cookie(\n    'my_precious_cookie', value='123abc', secure=True, **kwargs\n)\n```\n\nRequirements\n------------\n`samesite-compat-check` has no dependencies and is tested on\nPython 2.7, 3.4, 3.5, 3.6, 3.7, 3.8, and PyPy 3.\n\nInstallation\n------------\n\n    pip install samesite-compat-check\n    \nUseful references\n----------------\n* <https://github.com/jotes/django-cookies-samesite>  \n  This package serves as a good example of implementing the SameSite cookie in Django.  \n  However, only checks for Chrome/Chromium version 51-66, not iOS, macOS, and UC Browser.\n  However \n* <https://github.com/GoogleChromeLabs/samesite-examples>  \n  This repo has examples for setting a cookie with the SameSite-attribute in Python and in Flask,\n  but does not implement any of the browser incompatibility checks.\n* <https://github.com/linsight/should-send-same-site-none>  \n  A Javascript package similar to this one.\n* <https://itnext.io/user-agent-sniffing-only-way-to-deal-with-upcoming-samesite-cookie-changes-6f79a18e541>  \n  An alternative implementation in Javascript that isn't based off the Chromium project pseudocode.\n\nAuthors\n-------\n`samesite-compat-check` was written by `Malthe J\u00f8rgensen <malthe.jorgensen@gmail.com>` at Peergrade Inc.,\nand is a port of Chromium's pseudocode for checking browsers incompatible with `SameSite=None` cookies\nwhich can be found here:\n<https://www.chromium.org/updates/same-site/incompatible-clients>\n\nThat pseudocode is Copyright 2019 Google LLC. and released under the Apache 2.0\nlicense.\n\nThe tests use a sample of User-Agent strings from <https://developers.whatismybrowser.com/useragents/>.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/peergradeio/samesite-compat-check", "keywords": "", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "samesite-compat-check", "package_url": "https://pypi.org/project/samesite-compat-check/", "platform": "", "project_url": "https://pypi.org/project/samesite-compat-check/", "project_urls": {"Homepage": "https://github.com/peergradeio/samesite-compat-check"}, "release_url": "https://pypi.org/project/samesite-compat-check/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "A port of Chrome's browser compatibility check for SameSite=None cookies", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>samesite-compat-check</h1>\n<p><a href=\"https://pypi.python.org/pypi/samesite-compat-check\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d217135e4518b6aa321839c6b6f212bb6f669bad/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f73616d65736974652d636f6d7061742d636865636b2e737667\"></a>\n<a href=\"https://travis-ci.org/peergradeio/samesite-compat-check\" rel=\"nofollow\"><img alt=\"Latest Travis CI build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9d7d175c40784676c6ce31b40c4a4147433987d0/68747470733a2f2f7472617669732d63692e6f72672f706565726772616465696f2f73616d65736974652d636f6d7061742d636865636b2e706e67\"></a></p>\n<p>This is a Python port of the <a href=\"https://www.chromium.org/updates/same-site/incompatible-clients\" rel=\"nofollow\">Chromium project's browser compatibility check</a> for <code>SameSite=None</code>-cookies.</p>\n<p>samesite-compat-check exposes a single function <code>should_send_same_site_none</code>\nwhich takes a <code>User-Agent</code> string and returns <code>True</code> if <code>SameSite=None</code> is\nsupported by the browser with the given <code>User-Agent</code> and <code>False</code> if not.</p>\n<p>If <code>User-Agent</code> is <code>None</code> then <code>should_send_same_site_none</code> returns <code>True</code>.<br>\n<em>This is the only addition on top of the pseudocode from the Chromium project</em></p>\n<p>The reason for this added behavior is to handle the case where the\n<code>User-Agent</code>-header is not sent. The logic is that only  browsers that\nspecifically mishandle <code>SameSite=None</code> should have the attribute omitted. You\ncan safely send <code>SameSite=None</code>-attribute to a browser that doesn't recognize\nthe attribute (e.g. an older browser). As in that case <code>SameSite</code> will be\nignored, and you'll automatically get the behavior you intended, as cookies\nbefore the <code>SameSite</code>-attibute were introduced worked as similar to\n<code>SameSite=None</code>.</p>\n<h2>SameSite cookies</h2>\n<p>You probably already know what <code>SameSite</code>-cookies are -- if not, I recommend you\nread <a href=\"https://web.dev/samesite-cookies-explained/\" rel=\"nofollow\">https://web.dev/samesite-cookies-explained/</a> at the very least.</p>\n<p><code>SameSite=None</code>-cookies are mostly relevant to people who needs cookies on CORS\nrequests or need cookies inside an iframe. So if you don't use cookies when\ndoing CORS or in iframes (or use <code>SameSite=None</code> for some other reason) you\ncan safely ignore this package.</p>\n<p>You may say -- who uses iframes nowadays? Well, plenty of things do!\nYoutube Embeds, the Intercom widget, that new little \"Log in with Google\"\npopover on sites like Medium.</p>\n<p>Well, if you're one those people who need <code>SameSite=None</code>, you'll find that a\ngood portion of your users have browsers that are incompatible with <code>SameSite</code>\ncookies that have the value <code>None</code>.</p>\n<p>That's where this library comes in. It checks the <code>User-Agent</code> string, and returns\nwhether it is from a browser that is incompatible.</p>\n<p>Recommendation is to just not use <code>SameSite</code> for those browsers. Since the\nbrowsers are \"old\" and don't enforce the <code>SameSite</code>-rules for cookies where\nthe flag is not present, they will have the right behavior when you don't send\n<code>SameSite=None</code>.</p>\n<p>You'll need to pass in the value of the <code>User-Agent</code>-header from the library\nyou're using (Django, Flask...) and then either set or not set <code>SameSite=None</code>\non the cookie.</p>\n<h2>Usage</h2>\n<p>General use:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">samesite_compat_check</span> <span class=\"kn\">import</span> <span class=\"n\">should_send_same_site_none</span>\n\n<span class=\"k\">if</span> <span class=\"n\">should_send_same_site_none</span><span class=\"p\">(</span><span class=\"n\">user_agent</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Set cookie with `SameSite=None`</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Set cookie without any `SameSite` attribute</span>\n</pre>\n<h3>Django</h3>\n<pre><span class=\"k\">if</span> <span class=\"n\">should_send_same_site_none</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">META</span><span class=\"p\">[</span><span class=\"s1\">'HTTP_USER_AGENT'</span><span class=\"p\">]):</span>\n    <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">cookies</span><span class=\"p\">[</span><span class=\"s1\">'my_precious_cookie'</span><span class=\"p\">][</span><span class=\"s1\">'samesite'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'None'</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n</pre>\n<p>Setting <code>response.set_cookie(..., samesite='none')</code> will be allowed from\nDjango 3.1 and onwards. Currently only <code>lax</code> and <code>strict</code> are allowed in\n<code>response.set_cookie()</code>. Django only allows lowercase values for <code>samesite</code>.\nAccoring to the spec lowercase/uppercase should not matter, however I have not\ntested that particular detail in a browser.</p>\n<h3>Flask</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask</span> <span class=\"kn\">import</span> <span class=\"n\">request</span>\n\n<span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{}</span>\n<span class=\"k\">if</span> <span class=\"n\">should_send_same_site_none</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">headers</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'User-Agent'</span><span class=\"p\">)):</span>\n    <span class=\"n\">kwargs</span><span class=\"p\">[</span><span class=\"s1\">'samesite'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'None'</span>\n\n<span class=\"c1\"># Requires Werkzeug&gt;=1.0.0 (a Flask dependency) in order to use `samesite` </span>\n<span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">set_cookie</span><span class=\"p\">(</span>\n    <span class=\"s1\">'my_precious_cookie'</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"o\">=</span><span class=\"s1\">'123abc'</span><span class=\"p\">,</span> <span class=\"n\">secure</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>Requirements</h2>\n<p><code>samesite-compat-check</code> has no dependencies and is tested on\nPython 2.7, 3.4, 3.5, 3.6, 3.7, 3.8, and PyPy 3.</p>\n<h2>Installation</h2>\n<pre><code>pip install samesite-compat-check\n</code></pre>\n<h2>Useful references</h2>\n<ul>\n<li><a href=\"https://github.com/jotes/django-cookies-samesite\" rel=\"nofollow\">https://github.com/jotes/django-cookies-samesite</a><br>\nThis package serves as a good example of implementing the SameSite cookie in Django.<br>\nHowever, only checks for Chrome/Chromium version 51-66, not iOS, macOS, and UC Browser.\nHowever</li>\n<li><a href=\"https://github.com/GoogleChromeLabs/samesite-examples\" rel=\"nofollow\">https://github.com/GoogleChromeLabs/samesite-examples</a><br>\nThis repo has examples for setting a cookie with the SameSite-attribute in Python and in Flask,\nbut does not implement any of the browser incompatibility checks.</li>\n<li><a href=\"https://github.com/linsight/should-send-same-site-none\" rel=\"nofollow\">https://github.com/linsight/should-send-same-site-none</a><br>\nA Javascript package similar to this one.</li>\n<li><a href=\"https://itnext.io/user-agent-sniffing-only-way-to-deal-with-upcoming-samesite-cookie-changes-6f79a18e541\" rel=\"nofollow\">https://itnext.io/user-agent-sniffing-only-way-to-deal-with-upcoming-samesite-cookie-changes-6f79a18e541</a><br>\nAn alternative implementation in Javascript that isn't based off the Chromium project pseudocode.</li>\n</ul>\n<h2>Authors</h2>\n<p><code>samesite-compat-check</code> was written by <code>Malthe J\u00f8rgensen &lt;malthe.jorgensen@gmail.com&gt;</code> at Peergrade Inc.,\nand is a port of Chromium's pseudocode for checking browsers incompatible with <code>SameSite=None</code> cookies\nwhich can be found here:\n<a href=\"https://www.chromium.org/updates/same-site/incompatible-clients\" rel=\"nofollow\">https://www.chromium.org/updates/same-site/incompatible-clients</a></p>\n<p>That pseudocode is Copyright 2019 Google LLC. and released under the Apache 2.0\nlicense.</p>\n<p>The tests use a sample of User-Agent strings from <a href=\"https://developers.whatismybrowser.com/useragents/\" rel=\"nofollow\">https://developers.whatismybrowser.com/useragents/</a>.</p>\n\n          </div>"}, "last_serial": 6926044, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7ac5a5c030c21bf763a89c4bb11663e0", "sha256": "707459769d01948bcf7484d93e8b31f7396887c372b075316b16f339eb2a6b8c"}, "downloads": -1, "filename": "samesite-compat-check-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7ac5a5c030c21bf763a89c4bb11663e0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4781, "upload_time": "2020-04-01T08:23:52", "upload_time_iso_8601": "2020-04-01T08:23:52.443713Z", "url": "https://files.pythonhosted.org/packages/65/e6/4e89b04c0a1e2768c1a43d23f64fe080900d84fa667b5358508c1c27b12f/samesite-compat-check-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2d078e69670980304e720aee06dcca31", "sha256": "3865a5bdfcba1cc8dd48c91340e012ffce0ce6e32877d1bbb66b45ce1d75581f"}, "downloads": -1, "filename": "samesite-compat-check-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2d078e69670980304e720aee06dcca31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4779, "upload_time": "2020-04-01T08:23:53", "upload_time_iso_8601": "2020-04-01T08:23:53.599315Z", "url": "https://files.pythonhosted.org/packages/73/10/917d6bf3f9d7e4d027cc90ea1f7ca4a73caacd679ae06e5d20630e381ad3/samesite-compat-check-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "b903b85873c004ca9e5f20586f06a7da", "sha256": "2782d68195aae8ebf1ee742c8829e27827d061ca1d07333374bbcb1898b81670"}, "downloads": -1, "filename": "samesite-compat-check-0.1.2.tar.gz", "has_sig": false, "md5_digest": "b903b85873c004ca9e5f20586f06a7da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4925, "upload_time": "2020-04-01T08:23:54", "upload_time_iso_8601": "2020-04-01T08:23:54.692297Z", "url": "https://files.pythonhosted.org/packages/e5/e0/de9a7f67b84ec51fd29c0508fee2a26b2ae5016617404da9a411a5704ada/samesite-compat-check-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f07e95605c3a32a613266b27c919bbcf", "sha256": "c74ffbbb9f96f9b1eb60c1376d17fed0fd6838b4ebebc53735fc99b1d7437506"}, "downloads": -1, "filename": "samesite-compat-check-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f07e95605c3a32a613266b27c919bbcf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4925, "upload_time": "2020-03-21T23:03:02", "upload_time_iso_8601": "2020-03-21T23:03:02.718460Z", "url": "https://files.pythonhosted.org/packages/60/ec/2fdb08c31376f5d5720e5e45601ff1ec6d4b4e4ca51e46e11bf47c2ad168/samesite-compat-check-0.1.3.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1dbfbf4b45bd6a51a03e6e9de2a724cb", "sha256": "3a1b74102685591b35917a7e60f1ce17b26171b72f4c9a3798b728dea2e54598"}, "downloads": -1, "filename": "samesite-compat-check-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1dbfbf4b45bd6a51a03e6e9de2a724cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2020-04-01T08:23:56", "upload_time_iso_8601": "2020-04-01T08:23:56.551043Z", "url": "https://files.pythonhosted.org/packages/4e/3b/34777cda63e226dc560e1ad3a0083264436664db9a4f40e26fe2e6cd10da/samesite-compat-check-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1dbfbf4b45bd6a51a03e6e9de2a724cb", "sha256": "3a1b74102685591b35917a7e60f1ce17b26171b72f4c9a3798b728dea2e54598"}, "downloads": -1, "filename": "samesite-compat-check-0.2.0.tar.gz", "has_sig": false, "md5_digest": "1dbfbf4b45bd6a51a03e6e9de2a724cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5212, "upload_time": "2020-04-01T08:23:56", "upload_time_iso_8601": "2020-04-01T08:23:56.551043Z", "url": "https://files.pythonhosted.org/packages/4e/3b/34777cda63e226dc560e1ad3a0083264436664db9a4f40e26fe2e6cd10da/samesite-compat-check-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:59 2020"}