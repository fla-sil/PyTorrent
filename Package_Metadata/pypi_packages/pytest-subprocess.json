{"info": {"author": "Andrzej Klajnert", "author_email": "python@aklajnert.pl", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "pytest-subprocess\n=================\n\n.. image:: https://img.shields.io/pypi/v/pytest-subprocess.svg\n    :target: https://pypi.org/project/pytest-subprocess\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-subprocess.svg\n    :target: https://pypi.org/project/pytest-subprocess\n    :alt: Python versions\n\n.. image:: https://dev.azure.com/aklajnert/pytest-subprocess/_apis/build/status/aklajnert.pytest-subprocess?branchName=master\n    :target: https://dev.azure.com/aklajnert/pytest-subprocess/_build/latest?definitionId=6&branchName=master\n    :alt: See Build Status on Azure Pipelines\n\n.. image:: https://codecov.io/gh/aklajnert/pytest-subprocess/branch/master/graph/badge.svg?token=JAU1cGoYL8\n  :target: https://codecov.io/gh/aklajnert/pytest-subprocess\n\n.. image:: https://readthedocs.org/projects/pytest-subprocess/badge/?version=latest\n   :target: https://pytest-subprocess.readthedocs.io/en/latest/?badge=latest\n   :alt: Documentation Status\n\nA plugin to fake subprocess for pytest\n\n.. contents:: :local:\n\n.. include-start\n\nUsage\n=====\n\nThe plugin adds the ``fake_subprocess`` fixture. It can be used it to register\nsubprocess results so you won't need to rely on the real processes. The plugin\nhooks on the ``subprocess.Popen()``, which is the base for other subprocess\nfunctions. That makes the ``subprocess.run()``, ``subprocess.call()``,\n``subprocess.check_call()`` and ``subprocess.check_output()`` methods\nalso functional.\n\nInstallation\n------------\n\nYou can install ``pytest-subprocess`` via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-subprocess\n\n\nBasic usage\n-----------\n\nThe most important method is ``fake_process.register_subprocess()`` which\nallows defining the fake processes behavior.\n\n.. code-block:: python\n\n    def test_git(fake_process):\n        fake_process.register_subprocess(\n            [\"git\", \"branch\"], stdout=[\"* fake_branch\", \"  master\"]\n        )\n\n        process = subprocess.Popen(\n            [\"git\", \"branch\"],\n            stdout=subprocess.PIPE,\n            universal_newlines=True,\n        )\n        out, _ = process.communicate()\n\n        assert process.returncode == 0\n        assert out == \"* fake_branch\\n  master\\n\"\n\nPassing input\n-------------\n\nBy default, if you use ``input`` argument to the ``Popen.communicate()``\nmethod, it won't crash, but also won't do anything useful. By passing\na function as ``stdin_callable`` argument for the\n``fake_process.register_subprocess()`` method you can specify the behavior\nbased on the input. The function shall accept one argument, which will be\nthe input data. If the function will return a dictionary with ``stdout`` or\n``stderr`` keys, its value will be appended to according stream.\n\n.. code-block:: python\n\n    def test_pass_input(fake_process):\n        def stdin_function(input):\n            return {\n                \"stdout\": \"This input was added: {data}\".format(\n                    data=input.decode()\n                )\n            }\n\n        fake_process.register_subprocess(\n            [\"command\"],\n            stdout=[b\"Just stdout\"],\n            stdin_callable=stdin_function,\n        )\n\n        process = subprocess.Popen(\n            [\"command\"], stdin=subprocess.PIPE, stdout=subprocess.PIPE,\n        )\n        out, _ = process.communicate(input=b\"sample input\")\n\n        assert out.splitlines() == [\n            b\"Just stdout\",\n            b\"This input was added: sample input\",\n        ]\n\nUnregistered commands\n---------------------\n\nBy default, when the ``fake_process`` fixture is being used, any attempt to\nrun subprocess that has not been registered will raise\nthe ``ProcessNotRegisteredError`` exception. To allow it, use\n``fake_process.allow_unregistered(True)``, which will execute all unregistered\nprocesses with real ``subprocess``, or use\n``fake_process.pass_command(\"command\")`` to allow just a single command.\n\n.. code-block:: python\n\n    def test_real_process(fake_process):\n        with pytest.raises(pytest_subprocess.ProcessNotRegisteredError):\n            # this will fail, as \"ls\" command is not registered\n            subprocess.call(\"ls\")\n\n        fake_process.pass_command(\"ls\")\n        # now it should be fine\n        assert subprocess.call(\"ls\") == 0\n\n        # allow all commands to be called by real subprocess\n        fake_process.allow_unregistered(True)\n        assert subprocess.call([\"ls\", \"-l\"]) == 0\n\n\nDiffering results\n-----------------\n\nEach ``register_subprocess()`` or ``pass_command()`` method call will register\nonly one command execution. You can call those methods multiple times, to\nchange the faked output on each subprocess run. When you call subprocess more\nwill be raised. To prevent that, call ``fake_process.keep_last_process(True)``,\nwhich will keep the last registered process forever.\n\n.. code-block:: python\n\n    def test_different_output(fake_process):\n        # register process with output changing each execution\n        fake_process.register_subprocess(\"test\", stdout=\"first execution\")\n        # the second execution will return non-zero exit code\n        fake_process.register_subprocess(\n            \"test\", stdout=\"second execution\", returncode=1\n        )\n\n        assert subprocess.check_output(\"test\") == b\"first execution\\n\"\n        second_process = subprocess.run(\"test\", stdout=subprocess.PIPE)\n        assert second_process.stdout == b\"second execution\\n\"\n        assert second_process.returncode == 1\n\n        # 3rd time shall raise an exception\n        with pytest.raises(pytest_subprocess.ProcessNotRegisteredError):\n            subprocess.check_call(\"test\")\n\n        # now, register two processes once again,\n        # but the last one will be kept forever\n        fake_process.register_subprocess(\"test\", stdout=\"first execution\")\n        fake_process.register_subprocess(\"test\", stdout=\"second execution\")\n        fake_process.keep_last_process(True)\n\n        # now the processes can be called forever\n        assert subprocess.check_output(\"test\") == b\"first execution\\n\"\n        assert subprocess.check_output(\"test\") == b\"second execution\\n\"\n        assert subprocess.check_output(\"test\") == b\"second execution\\n\"\n        assert subprocess.check_output(\"test\") == b\"second execution\\n\"\n\n\nUsing callbacks\n---------------\n\nYou can pass a function as ``callback`` argument to the ``register_subprocess()``\nmethod which will be executed instead of the real subprocess. The callback function\ncan raise exceptions which will be interpreted in tests as an exception raised\nby the subprocess. The fixture will pass ``FakePopen`` class instance into the\ncallback function, that can be used to change the return code or modify output\nstreams.\n\n.. code-block:: python\n\n    def callback_function(process):\n        process.returncode = 1\n        raise PermissionError(\"exception raised by subprocess\")\n\n\n    def test_raise_exception(fake_process):\n        fake_process.register_subprocess([\"test\"], callback=callback_function)\n\n        with pytest.raises(\n            PermissionError, match=\"exception raised by subprocess\"\n        ):\n            process = subprocess.Popen([\"test\"])\n            process.wait()\n\n        assert process.returncode == 1\n\nIt is possible to pass additional keyword arguments into ``callback`` by using\nthe ``callback_kwargs`` argument:\n\n.. code-block:: python\n\n    def callback_function_with_kwargs(process, return_code):\n        process.returncode = return_code\n\n\n    def test_callback_with_arguments(fake_process):\n        return_code = 127\n\n        fake_process.register_subprocess(\n            [\"test\"],\n            callback=callback_function_with_kwargs,\n            callback_kwargs={\"return_code\": return_code},\n        )\n\n        process = subprocess.Popen([\"test\"])\n        process.wait()\n\n        assert process.returncode == return_code\n\nAs a context manager\n--------------------\n\nThe ``fake_process`` fixture provides ``context()`` method that allows us to\nuse it as a context manager. It can be used to limit the scope when a certain\ncommand is allowed, e.g. to make sure that the code doesn't want to execute\nit somewhere else.\n\n.. code-block:: python\n\n    def test_context_manager(fake_process):\n        with pytest.raises(pytest_subprocess.ProcessNotRegisteredError):\n            # command not registered, so will raise an exception\n            subprocess.check_call(\"test\")\n\n        with fake_process.context() as nested_process:\n            nested_process.register_subprocess(\"test\", occurrences=3)\n            # now, we can call the command 3 times without error\n            assert subprocess.check_call(\"test\") == 0\n            assert subprocess.check_call(\"test\") == 0\n\n        # the command was called 2 times, so one occurrence left, but since the\n        # context manager has been left, it is not registered anymore\n        with pytest.raises(pytest_subprocess.ProcessNotRegisteredError):\n            subprocess.check_call(\"test\")\n\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org/project\n\n\n.. include-end\n\nDocumentation\n-------------\n\nFor full documentation, including API reference, please see https://pytest-subprocess.readthedocs.io/en/latest/.\n\nContributing\n------------\nContributions are very welcome. Tests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nLicense\n-------\n\nDistributed under the terms of the `MIT`_ license, \"pytest-subprocess\" is free and open source software\n\n\nIssues\n------\n\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n----\n\nThis `pytest`_ plugin was generated with `Cookiecutter`_ along with `@hackebrot`_'s `cookiecutter-pytest-plugin`_ template.\n\n.. _`Cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`BSD-3`: http://opensource.org/licenses/BSD-3-Clause\n.. _`GNU GPL v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/aklajnert/pytest-subprocess/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n\nHistory\n=======\n\n0.1.4 (2020-04-28)  \n------------------\n\nBug fixes  \n~~~~~~~~~\n* `#22 <https://github.com/aklajnert/pytest-subprocess/pulls//22>`_: The `returncode` will not be ignored when `callback` is used.\n* `#21 <https://github.com/aklajnert/pytest-subprocess/pulls//21>`_: The exception raised from callback will take precedence over those from subprocess.\n* `#20 <https://github.com/aklajnert/pytest-subprocess/pulls//20>`_: Registering process will be now consistent regardless of the command type.\n* `#19 <https://github.com/aklajnert/pytest-subprocess/pulls//19>`_: Fixed crash for stderr redirect with an empty stream definition.\n\n0.1.3 (2020-03-04)  \n------------------\n\nFeatures  \n~~~~~~~~\n* `#13 <https://github.com/aklajnert/pytest-subprocess/pulls//13>`_: Allow passing keyword arguments into callbacks.\n\nBug fixes  \n~~~~~~~~~\n* `#12 <https://github.com/aklajnert/pytest-subprocess/pulls//12>`_: Properly raise exceptions from callback functions.\n\nDocumentation changes  \n~~~~~~~~~~~~~~~~~~~~~\n* `#15 <https://github.com/aklajnert/pytest-subprocess/pulls//15>`_: Add documentation chapter about the callback functions.\n\n0.1.2 (2020-01-17)  \n------------------\n\nFeatures  \n~~~~~~~~\n* `#3 <https://github.com/aklajnert/pytest-subprocess/pulls//3>`_: Add basic support for process input.\n\nBug fixes  \n~~~~~~~~~\n* `#5 <https://github.com/aklajnert/pytest-subprocess/pulls//5>`_: Make ``wait()`` method to raise ``TimeoutError`` after the desired time will elapse.\n\nDocumentation changes  \n~~~~~~~~~~~~~~~~~~~~~\n* `#7 <https://github.com/aklajnert/pytest-subprocess/pulls//7>`_, `#8 <https://github.com/aklajnert/pytest-subprocess/pulls//8>`_, `#9 <https://github.com/aklajnert/pytest-subprocess/pulls//9>`_: Create Sphinx documentation.\n\nOther changes  \n~~~~~~~~~~~~~\n* `#10 <https://github.com/aklajnert/pytest-subprocess/pulls//10>`_:  Switch from ``tox`` to ``nox`` for running tests and tasks.\n* `#4 <https://github.com/aklajnert/pytest-subprocess/pulls//4>`_: Add classifier for Python 3.9. Update CI config to test also on that interpreter version.\n\n0.1.1 (2019-11-24)  \n------------------\n\nOther changes  \n~~~~~~~~~~~~~\n* `#1 <https://github.com/aklajnert/pytest-subprocess/pulls//1>`_, `#2 <https://github.com/aklajnert/pytest-subprocess/pulls//2>`_: Enable support for Python 3.4, add CI tests for that version.\n\n0.1.0 (2019-11-23)  \n------------------\n\nInitial release  \n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "Andrzej Klajnert", "maintainer_email": "python@aklajnert.pl", "name": "pytest-subprocess", "package_url": "https://pypi.org/project/pytest-subprocess/", "platform": "", "project_url": "https://pypi.org/project/pytest-subprocess/", "project_urls": {"Documentation": "https://pytest-subprocess.readthedocs.io", "Source": "https://github.com/aklajnert/pytest-subprocess", "Tracker": "https://github.com/aklajnert/pytest-subprocess/issues"}, "release_url": "https://pypi.org/project/pytest-subprocess/0.1.4/", "requires_dist": ["pytest (>=4.0.0)", "nox ; extra == 'dev'", "changelogd ; extra == 'dev'", "sphinx ; extra == 'docs'", "sphinxcontrib-napoleon ; extra == 'docs'", "sphinx-autodoc-typehints ; extra == 'docs'", "changelogd ; extra == 'docs'", "pytest (>=4.0) ; extra == 'test'", "coverage ; extra == 'test'", "docutils (>=0.12) ; extra == 'test'", "Pygments (>=2.0) ; extra == 'test'", "pytest-azurepipelines ; extra == 'test'"], "requires_python": ">=3.4", "summary": "A plugin to fake subprocess for pytest", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pytest-subprocess\">\n<h2>pytest-subprocess</h2>\n<a href=\"https://pypi.org/project/pytest-subprocess\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a02de5b5d6d272f6f64c9a822a7400ec4175a912/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d73756270726f636573732e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-subprocess\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1e58ace5b4ce5b067a50557387930227dcd9722/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d73756270726f636573732e737667\"></a>\n<a href=\"https://dev.azure.com/aklajnert/pytest-subprocess/_build/latest?definitionId=6&amp;branchName=master\" rel=\"nofollow\"><img alt=\"See Build Status on Azure Pipelines\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5aef1830214f1fc16270d9bc1d75ac54a1e72c3a/68747470733a2f2f6465762e617a7572652e636f6d2f616b6c616a6e6572742f7079746573742d73756270726f636573732f5f617069732f6275696c642f7374617475732f616b6c616a6e6572742e7079746573742d73756270726f636573733f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/aklajnert/pytest-subprocess\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/aklajnert/pytest-subprocess/branch/master/graph/badge.svg?token=JAU1cGoYL8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51871dc8ee6a58b98d4ddecd496e855f4ac3d160/68747470733a2f2f636f6465636f762e696f2f67682f616b6c616a6e6572742f7079746573742d73756270726f636573732f6272616e63682f6d61737465722f67726170682f62616467652e7376673f746f6b656e3d4a41553163476f594c38\"></a>\n<a href=\"https://pytest-subprocess.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f9b602f8beb330aa211fc2eb6c9276867426222/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f7079746573742d73756270726f636573732f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<p>A plugin to fake subprocess for pytest</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>The plugin adds the <tt>fake_subprocess</tt> fixture. It can be used it to register\nsubprocess results so you won\u2019t need to rely on the real processes. The plugin\nhooks on the <tt>subprocess.Popen()</tt>, which is the base for other subprocess\nfunctions. That makes the <tt>subprocess.run()</tt>, <tt>subprocess.call()</tt>,\n<tt>subprocess.check_call()</tt> and <tt>subprocess.check_output()</tt> methods\nalso functional.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install <tt><span class=\"pre\">pytest-subprocess</span></tt> via <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.org/project\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install pytest-subprocess\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h3>Basic usage</h3>\n<p>The most important method is <tt>fake_process.register_subprocess()</tt> which\nallows defining the fake processes behavior.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_git</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span> <span class=\"s2\">\"branch\"</span><span class=\"p\">],</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"* fake_branch\"</span><span class=\"p\">,</span> <span class=\"s2\">\"  master\"</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"git\"</span><span class=\"p\">,</span> <span class=\"s2\">\"branch\"</span><span class=\"p\">],</span>\n        <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n        <span class=\"n\">universal_newlines</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n    <span class=\"k\">assert</span> <span class=\"n\">out</span> <span class=\"o\">==</span> <span class=\"s2\">\"* fake_branch</span><span class=\"se\">\\n</span><span class=\"s2\">  master</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</pre>\n</div>\n<div id=\"passing-input\">\n<h3>Passing input</h3>\n<p>By default, if you use <tt>input</tt> argument to the <tt>Popen.communicate()</tt>\nmethod, it won\u2019t crash, but also won\u2019t do anything useful. By passing\na function as <tt>stdin_callable</tt> argument for the\n<tt>fake_process.register_subprocess()</tt> method you can specify the behavior\nbased on the input. The function shall accept one argument, which will be\nthe input data. If the function will return a dictionary with <tt>stdout</tt> or\n<tt>stderr</tt> keys, its value will be appended to according stream.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_pass_input</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">stdin_function</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"stdout\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This input was added: </span><span class=\"si\">{data}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"n\">data</span><span class=\"o\">=</span><span class=\"nb\">input</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">()</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">}</span>\n\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"command\"</span><span class=\"p\">],</span>\n        <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"sa\">b</span><span class=\"s2\">\"Just stdout\"</span><span class=\"p\">],</span>\n        <span class=\"n\">stdin_callable</span><span class=\"o\">=</span><span class=\"n\">stdin_function</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"command\"</span><span class=\"p\">],</span> <span class=\"n\">stdin</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"n\">_</span> <span class=\"o\">=</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">communicate</span><span class=\"p\">(</span><span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"sa\">b</span><span class=\"s2\">\"sample input\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">splitlines</span><span class=\"p\">()</span> <span class=\"o\">==</span> <span class=\"p\">[</span>\n        <span class=\"sa\">b</span><span class=\"s2\">\"Just stdout\"</span><span class=\"p\">,</span>\n        <span class=\"sa\">b</span><span class=\"s2\">\"This input was added: sample input\"</span><span class=\"p\">,</span>\n    <span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"unregistered-commands\">\n<h3>Unregistered commands</h3>\n<p>By default, when the <tt>fake_process</tt> fixture is being used, any attempt to\nrun subprocess that has not been registered will raise\nthe <tt>ProcessNotRegisteredError</tt> exception. To allow it, use\n<tt>fake_process.allow_unregistered(True)</tt>, which will execute all unregistered\nprocesses with real <tt>subprocess</tt>, or use\n<tt><span class=\"pre\">fake_process.pass_command(\"command\")</span></tt> to allow just a single command.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_real_process</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">pytest_subprocess</span><span class=\"o\">.</span><span class=\"n\">ProcessNotRegisteredError</span><span class=\"p\">):</span>\n        <span class=\"c1\"># this will fail, as \"ls\" command is not registered</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s2\">\"ls\"</span><span class=\"p\">)</span>\n\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">pass_command</span><span class=\"p\">(</span><span class=\"s2\">\"ls\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># now it should be fine</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"s2\">\"ls\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># allow all commands to be called by real subprocess</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">allow_unregistered</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">([</span><span class=\"s2\">\"ls\"</span><span class=\"p\">,</span> <span class=\"s2\">\"-l\"</span><span class=\"p\">])</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n</pre>\n</div>\n<div id=\"differing-results\">\n<h3>Differing results</h3>\n<p>Each <tt>register_subprocess()</tt> or <tt>pass_command()</tt> method call will register\nonly one command execution. You can call those methods multiple times, to\nchange the faked output on each subprocess run. When you call subprocess more\nwill be raised. To prevent that, call <tt>fake_process.keep_last_process(True)</tt>,\nwhich will keep the last registered process forever.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_different_output</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"c1\"># register process with output changing each execution</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"s2\">\"first execution\"</span><span class=\"p\">)</span>\n    <span class=\"c1\"># the second execution will return non-zero exit code</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span>\n        <span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"s2\">\"second execution\"</span><span class=\"p\">,</span> <span class=\"n\">returncode</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"first execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"n\">second_process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">PIPE</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"n\">second_process</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"second execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">second_process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n\n    <span class=\"c1\"># 3rd time shall raise an exception</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">pytest_subprocess</span><span class=\"o\">.</span><span class=\"n\">ProcessNotRegisteredError</span><span class=\"p\">):</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># now, register two processes once again,</span>\n    <span class=\"c1\"># but the last one will be kept forever</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"s2\">\"first execution\"</span><span class=\"p\">)</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"s2\">\"second execution\"</span><span class=\"p\">)</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">keep_last_process</span><span class=\"p\">(</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># now the processes can be called forever</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"first execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"second execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"second execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n    <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_output</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"sa\">b</span><span class=\"s2\">\"second execution</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span>\n</pre>\n</div>\n<div id=\"using-callbacks\">\n<h3>Using callbacks</h3>\n<p>You can pass a function as <tt>callback</tt> argument to the <tt>register_subprocess()</tt>\nmethod which will be executed instead of the real subprocess. The callback function\ncan raise exceptions which will be interpreted in tests as an exception raised\nby the subprocess. The fixture will pass <tt>FakePopen</tt> class instance into the\ncallback function, that can be used to change the return code or modify output\nstreams.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">callback_function</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">):</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"mi\">1</span>\n    <span class=\"k\">raise</span> <span class=\"ne\">PermissionError</span><span class=\"p\">(</span><span class=\"s2\">\"exception raised by subprocess\"</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_raise_exception</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">([</span><span class=\"s2\">\"test\"</span><span class=\"p\">],</span> <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">callback_function</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span>\n        <span class=\"ne\">PermissionError</span><span class=\"p\">,</span> <span class=\"n\">match</span><span class=\"o\">=</span><span class=\"s2\">\"exception raised by subprocess\"</span>\n    <span class=\"p\">):</span>\n        <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">([</span><span class=\"s2\">\"test\"</span><span class=\"p\">])</span>\n        <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"mi\">1</span>\n</pre>\n<p>It is possible to pass additional keyword arguments into <tt>callback</tt> by using\nthe <tt>callback_kwargs</tt> argument:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">callback_function_with_kwargs</span><span class=\"p\">(</span><span class=\"n\">process</span><span class=\"p\">,</span> <span class=\"n\">return_code</span><span class=\"p\">):</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">=</span> <span class=\"n\">return_code</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">test_callback_with_arguments</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"n\">return_code</span> <span class=\"o\">=</span> <span class=\"mi\">127</span>\n\n    <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span>\n        <span class=\"p\">[</span><span class=\"s2\">\"test\"</span><span class=\"p\">],</span>\n        <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">callback_function_with_kwargs</span><span class=\"p\">,</span>\n        <span class=\"n\">callback_kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s2\">\"return_code\"</span><span class=\"p\">:</span> <span class=\"n\">return_code</span><span class=\"p\">},</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">process</span> <span class=\"o\">=</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">Popen</span><span class=\"p\">([</span><span class=\"s2\">\"test\"</span><span class=\"p\">])</span>\n    <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>\n\n    <span class=\"k\">assert</span> <span class=\"n\">process</span><span class=\"o\">.</span><span class=\"n\">returncode</span> <span class=\"o\">==</span> <span class=\"n\">return_code</span>\n</pre>\n</div>\n<div id=\"as-a-context-manager\">\n<h3>As a context manager</h3>\n<p>The <tt>fake_process</tt> fixture provides <tt>context()</tt> method that allows us to\nuse it as a context manager. It can be used to limit the scope when a certain\ncommand is allowed, e.g. to make sure that the code doesn\u2019t want to execute\nit somewhere else.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_context_manager</span><span class=\"p\">(</span><span class=\"n\">fake_process</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">pytest_subprocess</span><span class=\"o\">.</span><span class=\"n\">ProcessNotRegisteredError</span><span class=\"p\">):</span>\n        <span class=\"c1\"># command not registered, so will raise an exception</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n\n    <span class=\"k\">with</span> <span class=\"n\">fake_process</span><span class=\"o\">.</span><span class=\"n\">context</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">nested_process</span><span class=\"p\">:</span>\n        <span class=\"n\">nested_process</span><span class=\"o\">.</span><span class=\"n\">register_subprocess</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">,</span> <span class=\"n\">occurrences</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"c1\"># now, we can call the command 3 times without error</span>\n        <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"k\">assert</span> <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n    <span class=\"c1\"># the command was called 2 times, so one occurrence left, but since the</span>\n    <span class=\"c1\"># context manager has been left, it is not registered anymore</span>\n    <span class=\"k\">with</span> <span class=\"n\">pytest</span><span class=\"o\">.</span><span class=\"n\">raises</span><span class=\"p\">(</span><span class=\"n\">pytest_subprocess</span><span class=\"o\">.</span><span class=\"n\">ProcessNotRegisteredError</span><span class=\"p\">):</span>\n        <span class=\"n\">subprocess</span><span class=\"o\">.</span><span class=\"n\">check_call</span><span class=\"p\">(</span><span class=\"s2\">\"test\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>For full documentation, including API reference, please see <a href=\"https://pytest-subprocess.readthedocs.io/en/latest/\" rel=\"nofollow\">https://pytest-subprocess.readthedocs.io/en/latest/</a>.</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Contributions are very welcome. Tests can be run with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license, \u201cpytest-subprocess\u201d is free and open source software</p>\n</div>\n<div id=\"issues\">\n<h3>Issues</h3>\n<p>If you encounter any problems, please <a href=\"https://github.com/aklajnert/pytest-subprocess/issues\" rel=\"nofollow\">file an issue</a> along with a detailed description.</p>\n<hr class=\"docutils\">\n<p>This <a href=\"https://github.com/pytest-dev/pytest\" rel=\"nofollow\">pytest</a> plugin was generated with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> along with <a href=\"https://github.com/hackebrot\" rel=\"nofollow\">@hackebrot</a>\u2019s <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\" rel=\"nofollow\">cookiecutter-pytest-plugin</a> template.</p>\n</div>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.4 (2020-04-28)</h3>\n<h3 id=\"bug-fixes\"><span class=\"section-subtitle\">Bug fixes</span></h3>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//22\" rel=\"nofollow\">#22</a>: The <cite>returncode</cite> will not be ignored when <cite>callback</cite> is used.</li>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//21\" rel=\"nofollow\">#21</a>: The exception raised from callback will take precedence over those from subprocess.</li>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//20\" rel=\"nofollow\">#20</a>: Registering process will be now consistent regardless of the command type.</li>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//19\" rel=\"nofollow\">#19</a>: Fixed crash for stderr redirect with an empty stream definition.</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3>0.1.3 (2020-03-04)</h3>\n<div id=\"features\">\n<h4>Features</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//13\" rel=\"nofollow\">#13</a>: Allow passing keyword arguments into callbacks.</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h4>Bug fixes</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//12\" rel=\"nofollow\">#12</a>: Properly raise exceptions from callback functions.</li>\n</ul>\n</div>\n<div id=\"documentation-changes\">\n<h4>Documentation changes</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//15\" rel=\"nofollow\">#15</a>: Add documentation chapter about the callback functions.</li>\n</ul>\n</div>\n</div>\n<div id=\"id11\">\n<h3>0.1.2 (2020-01-17)</h3>\n<div id=\"id12\">\n<h4>Features</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//3\" rel=\"nofollow\">#3</a>: Add basic support for process input.</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h4>Bug fixes</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//5\" rel=\"nofollow\">#5</a>: Make <tt>wait()</tt> method to raise <tt>TimeoutError</tt> after the desired time will elapse.</li>\n</ul>\n</div>\n<div id=\"id16\">\n<h4>Documentation changes</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//7\" rel=\"nofollow\">#7</a>, <a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//8\" rel=\"nofollow\">#8</a>, <a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//9\" rel=\"nofollow\">#9</a>: Create Sphinx documentation.</li>\n</ul>\n</div>\n<div id=\"other-changes\">\n<h4>Other changes</h4>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//10\" rel=\"nofollow\">#10</a>:  Switch from <tt>tox</tt> to <tt>nox</tt> for running tests and tasks.</li>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//4\" rel=\"nofollow\">#4</a>: Add classifier for Python 3.9. Update CI config to test also on that interpreter version.</li>\n</ul>\n</div>\n</div>\n<div id=\"id22\">\n<h3>0.1.1 (2019-11-24)</h3>\n<h3 id=\"id23\"><span class=\"section-subtitle\">Other changes</span></h3>\n<ul>\n<li><a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//1\" rel=\"nofollow\">#1</a>, <a href=\"https://github.com/aklajnert/pytest-subprocess/pulls//2\" rel=\"nofollow\">#2</a>: Enable support for Python 3.4, add CI tests for that version.</li>\n</ul>\n</div>\n<div id=\"id26\">\n<h3>0.1.0 (2019-11-23)</h3>\n<p>Initial release</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7117963, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "07e123da7be91718e0efeed10d1ed26c", "sha256": "e488cd9fa8df2c8fec6920676feda4d121337f94139ddf1a2bbba6bda11c700a"}, "downloads": -1, "filename": "pytest_subprocess-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "07e123da7be91718e0efeed10d1ed26c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 13579, "upload_time": "2019-11-23T19:53:03", "upload_time_iso_8601": "2019-11-23T19:53:03.181272Z", "url": "https://files.pythonhosted.org/packages/31/f8/d79a00f691083acb9f34711334fc25af2d57e8a809183e552280c0ddabe4/pytest_subprocess-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "102611c4ebe0eb72748e39ad2998ec6c", "sha256": "c5db26486c9cc12fda730278bab45fba5b26b5e086b4949f2d07d6c8e3eb0c32"}, "downloads": -1, "filename": "pytest-subprocess-0.1.0.tar.gz", "has_sig": false, "md5_digest": "102611c4ebe0eb72748e39ad2998ec6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 13874, "upload_time": "2019-11-23T19:53:05", "upload_time_iso_8601": "2019-11-23T19:53:05.881348Z", "url": "https://files.pythonhosted.org/packages/a2/58/686a887e6aa39c529d1856ef1f46e1ec5acca56f3edd45e1b05bf4192fba/pytest-subprocess-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "b6a7bf8bf0c33ab177d38c3719422a5d", "sha256": "de9a89e4b209e1d533e2413d9803890728a37299e06ee0ccf2ea63c616d6a472"}, "downloads": -1, "filename": "pytest_subprocess-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b6a7bf8bf0c33ab177d38c3719422a5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 9717, "upload_time": "2019-11-24T09:39:39", "upload_time_iso_8601": "2019-11-24T09:39:39.315452Z", "url": "https://files.pythonhosted.org/packages/d3/6a/4c828bd7b0939969967abf72a48e5c6f2fef20e3e8a6770dca1f967f88bc/pytest_subprocess-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42b2251dbd603dc56fd0777e0d4644c4", "sha256": "f90893109088bbe4d97a9303182287c8f33dc0d94d7b2cf2535516e2343dff7b"}, "downloads": -1, "filename": "pytest-subprocess-0.1.1.tar.gz", "has_sig": false, "md5_digest": "42b2251dbd603dc56fd0777e0d4644c4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 10790, "upload_time": "2019-11-24T09:39:41", "upload_time_iso_8601": "2019-11-24T09:39:41.105773Z", "url": "https://files.pythonhosted.org/packages/2c/03/894efdd1cc4a16f934e6728b8fc3989d9961fec672c088d22703637ea0d8/pytest-subprocess-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "cce9281112ba4f698575041d32d7b2c6", "sha256": "f43b73cca81dd25525ea09230561d32bf9c19193564e32adb9d99e9b93aec196"}, "downloads": -1, "filename": "pytest_subprocess-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cce9281112ba4f698575041d32d7b2c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 27895, "upload_time": "2020-01-17T17:51:50", "upload_time_iso_8601": "2020-01-17T17:51:50.341814Z", "url": "https://files.pythonhosted.org/packages/c1/bb/52fc5908dc02494a63cddfb6d00e37aec94e71186c751b65010034d70e14/pytest_subprocess-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8de552d86902f277752915a519635137", "sha256": "b6c91060a36d3bbc65c84d84f9223546fad3667c2b62a744baf257f100a3a8ad"}, "downloads": -1, "filename": "pytest-subprocess-0.1.2.tar.gz", "has_sig": false, "md5_digest": "8de552d86902f277752915a519635137", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 29005, "upload_time": "2020-01-17T17:51:52", "upload_time_iso_8601": "2020-01-17T17:51:52.113030Z", "url": "https://files.pythonhosted.org/packages/8e/00/4143a1e46b621e25d679a3eb68e81a36735a2a652cab5cc095c2fd293d49/pytest-subprocess-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "b63ed8fa1231fcee447c4d90291b5cdd", "sha256": "3dea1ac447a79bab717b6a492effa42fbd8b62f1c0ce4ba69b2abfaac9a925c6"}, "downloads": -1, "filename": "pytest_subprocess-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "b63ed8fa1231fcee447c4d90291b5cdd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 12106, "upload_time": "2020-03-04T08:03:23", "upload_time_iso_8601": "2020-03-04T08:03:23.937692Z", "url": "https://files.pythonhosted.org/packages/02/7b/6db38a5a4b0520fc58f714bddefdba569aa4b5ff3064d7ce19c69cd07244/pytest_subprocess-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ed4d52b1bb7ee2725fb82c23a2b2b723", "sha256": "2ccec855ab1458e84c03cfd45afc068c182d05912a5658bfdd03b2779f476143"}, "downloads": -1, "filename": "pytest-subprocess-0.1.3.tar.gz", "has_sig": false, "md5_digest": "ed4d52b1bb7ee2725fb82c23a2b2b723", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 15433, "upload_time": "2020-03-04T08:03:25", "upload_time_iso_8601": "2020-03-04T08:03:25.968266Z", "url": "https://files.pythonhosted.org/packages/4a/ef/edda20f91c23d439569e19a68ac6e020bda223d995325e563a78eabcb3f1/pytest-subprocess-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "cbe885276febfcd95f4ac937819e326d", "sha256": "bf3bfc88f59496830efd161e679435516815ae135e7bdc1d6f1025561d614d1b"}, "downloads": -1, "filename": "pytest_subprocess-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cbe885276febfcd95f4ac937819e326d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 12297, "upload_time": "2020-04-28T07:48:12", "upload_time_iso_8601": "2020-04-28T07:48:12.114661Z", "url": "https://files.pythonhosted.org/packages/0a/f2/872a5f06009979c642dddd37a6a73bfcc0cdd5e8b6ea47adcf0008b87e06/pytest_subprocess-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a190ecff40b4a2f7308b9a30783246d", "sha256": "929791c6a301aed3fd13a55423a0132662b5a8acc42f596bb0ff8522ef77833f"}, "downloads": -1, "filename": "pytest-subprocess-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6a190ecff40b4a2f7308b9a30783246d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 15893, "upload_time": "2020-04-28T07:48:13", "upload_time_iso_8601": "2020-04-28T07:48:13.604826Z", "url": "https://files.pythonhosted.org/packages/94/e8/da274bfedc947a84d3d79925a5329777af81a48c9bbd1a44001a7ecf2121/pytest-subprocess-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "cbe885276febfcd95f4ac937819e326d", "sha256": "bf3bfc88f59496830efd161e679435516815ae135e7bdc1d6f1025561d614d1b"}, "downloads": -1, "filename": "pytest_subprocess-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "cbe885276febfcd95f4ac937819e326d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4", "size": 12297, "upload_time": "2020-04-28T07:48:12", "upload_time_iso_8601": "2020-04-28T07:48:12.114661Z", "url": "https://files.pythonhosted.org/packages/0a/f2/872a5f06009979c642dddd37a6a73bfcc0cdd5e8b6ea47adcf0008b87e06/pytest_subprocess-0.1.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6a190ecff40b4a2f7308b9a30783246d", "sha256": "929791c6a301aed3fd13a55423a0132662b5a8acc42f596bb0ff8522ef77833f"}, "downloads": -1, "filename": "pytest-subprocess-0.1.4.tar.gz", "has_sig": false, "md5_digest": "6a190ecff40b4a2f7308b9a30783246d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 15893, "upload_time": "2020-04-28T07:48:13", "upload_time_iso_8601": "2020-04-28T07:48:13.604826Z", "url": "https://files.pythonhosted.org/packages/94/e8/da274bfedc947a84d3d79925a5329777af81a48c9bbd1a44001a7ecf2121/pytest-subprocess-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:40 2020"}