{"info": {"author": "TEONITE", "author_email": "support@teonite.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "Command-line interface for update-tracker.\n\n## Installation\n```\npip install uptr --no-cache -U\n```\nIt can be installed in virtualenv, or globally.\n\n## Usage\n\nCommands are organised in groups to manage user, project and package.\nAll options in the commands listed here have shorter variants. You can see them with `uptr <group> <command> -h` command.\n\n### Registration, activation, login.\nTo register, run:\n```\nuptr user register --email <your email> --password <your password>\n```\nIf you prefer to not provide pcredentials in command line, you can use environment variables `EMAIL` and `PASSWORD`.\n\nAfter you register, we'll send you an email to verify it's really yours. There'll be a command for you to run to activate account.\n\nAfter your account is activated, you can login with next command:\n```\nuptr user login --email <your email> --password <your password>\n```\nYou can use environment variables here also.\nYour access token will be stored at `~/.uptr.yaml`.\n\nIf you'd like to logout, you can run\n```\nuptr user logout\n```\nIt will erase your token from `~/.uptr.yaml`.\n\n### Projects management\nAfter you logged in, you can start a new project with command:\n```\nuptr project start --name <your project name>\n```\nIf you want to have spaces in your project name, please enclose it in quotes:\n```\nuptr project start --name \"Some project with spaces in names\"\n```\nTo verify it've successfully created, or just to see a list of your projects run:\n```\nuptr project list\n```\nOutput is tab-separated lines of name, id, and a flag to mark a project is pinned.\n\n##### Pinning a project\nGiven in most cases you'll have a tracking project per programming project, to minimize arguments required to operate packages, you can set a default project for some directory:\n```\nuptr project pin --project-id <project id>\n```\nYou can get project id from the second column of `uptr project list` output.\nTo check if pinning was succesful, you can look at projects list.\n\n##### Notifications management\nEvery time a global package version is updated, and your version is less then global version, we send you a mail notification.\nNext, we will send notifications according to your notification preferences, which are set per project:\n```\nuptr project notifications --count 2 --delay 2 --project-id 18\n```\nHere, this means you'll have 2 notifications (after default one) sent with 2 days delay.\nIf you have a pinned project, you can omit `--project-id` option.\nIf you will not provide any of `count` or `delay` parameters, you'll see a message like:\n ```\n You are notified 2 times with 3 days delay.\n ```\nWhich shows your current settings. Also, it's shown after an update.\n\n### Packages management\nFirst of all, all packages exist in the scope of a project. In case you don't have a pinned project, or want to use not default one, you have to provide its id as:\n```\nuptr package --project-id <id> <command> <command options>\n```\nTo add package, run:\n```\nuptr package upsert --distname <distribution name> --master-site <master site> --package-version <package version>\n```\nIf your package is on pypi, dockerhub or github, distibution name is not required.\nFor example, to track Django:\n```\nuptr package upsert -m https://pypi.org/project/Django/ -p 1.11.12\n```\nNext, you'll have mail notifications about outdated packages.\nTo update package version, run `upsert` again.\n```\nuptr package upsert -m https://pypi.org/project/Django/ -p 2.0.5\n```\nIf you don't want to remember distribution site url for pypi or dockerhub (as it's not just copypasting of url, like in case of github, you can use dedicated commands:\n```\nuptr package dockerhub -d postgres -p 9.6.8\nuptr package pypi -d Django -p 1.11\n```\nFor github, so that you don't have to invent package name, you can run:\n```\nutrp package github -m http://github.com/docker/docker -p 16.01.0\n```\nThis way you'll have `/docker/docker` name created automatically.\n\nTo see packages list, run:\n```\nuptr package list\n```\nOutput is tab-separated lines of name, current version, latest version, master site, id.\n\nIf you don't want a package to be tracked anymore, run:\n```\nuptr package delete --package-id <package id>\n```\nYou can get package id from the last column of `uptr package list` output.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/teonite/update-tracker-backend", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "uptr", "package_url": "https://pypi.org/project/uptr/", "platform": "", "project_url": "https://pypi.org/project/uptr/", "project_urls": {"Homepage": "https://gitlab.com/teonite/update-tracker-backend"}, "release_url": "https://pypi.org/project/uptr/0.0.10/", "requires_dist": null, "requires_python": "", "summary": "Command line interface for update tracker.", "version": "0.0.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            Command-line interface for update-tracker.<br><br>## Installation<br>```<br>pip install uptr --no-cache -U<br>```<br>It can be installed in virtualenv, or globally.<br><br>## Usage<br><br>Commands are organised in groups to manage user, project and package.<br>All options in the commands listed here have shorter variants. You can see them with `uptr &lt;group&gt; &lt;command&gt; -h` command.<br><br>### Registration, activation, login.<br>To register, run:<br>```<br>uptr user register --email &lt;your email&gt; --password &lt;your password&gt;<br>```<br>If you prefer to not provide pcredentials in command line, you can use environment variables `EMAIL` and `PASSWORD`.<br><br>After you register, we'll send you an email to verify it's really yours. There'll be a command for you to run to activate account.<br><br>After your account is activated, you can login with next command:<br>```<br>uptr user login --email &lt;your email&gt; --password &lt;your password&gt;<br>```<br>You can use environment variables here also.<br>Your access token will be stored at `~/.uptr.yaml`.<br><br>If you'd like to logout, you can run<br>```<br>uptr user logout<br>```<br>It will erase your token from `~/.uptr.yaml`.<br><br>### Projects management<br>After you logged in, you can start a new project with command:<br>```<br>uptr project start --name &lt;your project name&gt;<br>```<br>If you want to have spaces in your project name, please enclose it in quotes:<br>```<br>uptr project start --name \"Some project with spaces in names\"<br>```<br>To verify it've successfully created, or just to see a list of your projects run:<br>```<br>uptr project list<br>```<br>Output is tab-separated lines of name, id, and a flag to mark a project is pinned.<br><br>##### Pinning a project<br>Given in most cases you'll have a tracking project per programming project, to minimize arguments required to operate packages, you can set a default project for some directory:<br>```<br>uptr project pin --project-id &lt;project id&gt;<br>```<br>You can get project id from the second column of `uptr project list` output.<br>To check if pinning was succesful, you can look at projects list.<br><br>##### Notifications management<br>Every time a global package version is updated, and your version is less then global version, we send you a mail notification.<br>Next, we will send notifications according to your notification preferences, which are set per project:<br>```<br>uptr project notifications --count 2 --delay 2 --project-id 18<br>```<br>Here, this means you'll have 2 notifications (after default one) sent with 2 days delay.<br>If you have a pinned project, you can omit `--project-id` option.<br>If you will not provide any of `count` or `delay` parameters, you'll see a message like:<br> ```<br> You are notified 2 times with 3 days delay.<br> ```<br>Which shows your current settings. Also, it's shown after an update.<br><br>### Packages management<br>First of all, all packages exist in the scope of a project. In case you don't have a pinned project, or want to use not default one, you have to provide its id as:<br>```<br>uptr package --project-id &lt;id&gt; &lt;command&gt; &lt;command options&gt;<br>```<br>To add package, run:<br>```<br>uptr package upsert --distname &lt;distribution name&gt; --master-site &lt;master site&gt; --package-version &lt;package version&gt;<br>```<br>If your package is on pypi, dockerhub or github, distibution name is not required.<br>For example, to track Django:<br>```<br>uptr package upsert -m https://pypi.org/project/Django/ -p 1.11.12<br>```<br>Next, you'll have mail notifications about outdated packages.<br>To update package version, run `upsert` again.<br>```<br>uptr package upsert -m https://pypi.org/project/Django/ -p 2.0.5<br>```<br>If you don't want to remember distribution site url for pypi or dockerhub (as it's not just copypasting of url, like in case of github, you can use dedicated commands:<br>```<br>uptr package dockerhub -d postgres -p 9.6.8<br>uptr package pypi -d Django -p 1.11<br>```<br>For github, so that you don't have to invent package name, you can run:<br>```<br>utrp package github -m http://github.com/docker/docker -p 16.01.0<br>```<br>This way you'll have `/docker/docker` name created automatically.<br><br>To see packages list, run:<br>```<br>uptr package list<br>```<br>Output is tab-separated lines of name, current version, latest version, master site, id.<br><br>If you don't want a package to be tracked anymore, run:<br>```<br>uptr package delete --package-id &lt;package id&gt;<br>```<br>You can get package id from the last column of `uptr package list` output.<br>\n          </div>"}, "last_serial": 4187692, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "21cb0f8bcaa901e9c09c9348aa3e194d", "sha256": "ff59d02d7046d650f70caa1dc215c5c5dd57c54c786f6c60a9fa8615cbd81e93"}, "downloads": -1, "filename": "uptr-0.0.10.tar.gz", "has_sig": false, "md5_digest": "21cb0f8bcaa901e9c09c9348aa3e194d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7008, "upload_time": "2018-08-20T09:12:00", "upload_time_iso_8601": "2018-08-20T09:12:00.766612Z", "url": "https://files.pythonhosted.org/packages/2f/ef/c68c804ca7df19bd488c1de6845a16d6160622fb7699a57cdb73bda48a7f/uptr-0.0.10.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "21cb0f8bcaa901e9c09c9348aa3e194d", "sha256": "ff59d02d7046d650f70caa1dc215c5c5dd57c54c786f6c60a9fa8615cbd81e93"}, "downloads": -1, "filename": "uptr-0.0.10.tar.gz", "has_sig": false, "md5_digest": "21cb0f8bcaa901e9c09c9348aa3e194d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7008, "upload_time": "2018-08-20T09:12:00", "upload_time_iso_8601": "2018-08-20T09:12:00.766612Z", "url": "https://files.pythonhosted.org/packages/2f/ef/c68c804ca7df19bd488c1de6845a16d6160622fb7699a57cdb73bda48a7f/uptr-0.0.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:39:43 2020"}