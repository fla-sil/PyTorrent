{"info": {"author": "Jesse Michel and Kyle Swanson", "author_email": "jessem.michel@gmail.com, swansonk.14@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Typing :: Typed"], "description": "<p align=\"center\">\n   <img src=\"images/logo.png\" width=\"40%\" align=\"middle\">\n</p>\n\n# Typed Argument Parser (Tap)\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/typed-argument-parser)](https://badge.fury.io/py/typed-argument-parser)\n[![PyPI version](https://badge.fury.io/py/typed-argument-parser.svg)](https://badge.fury.io/py/typed-argument-parser)\n[![Build Status](https://travis-ci.com/swansonk14/typed-argument-parser.svg?branch=master)](https://travis-ci.com/swansonk14/typed-argument-parser)\n\nTap is a typed modernization of Python's [argparse](https://docs.python.org/3/library/argparse.html) library.\n\nTap provides the following benefits:\n- Static type checking\n- Code completion\n- Source code navigation (e.g. go to definition and go to implementation)\n\n![Tap](https://github.com/swansonk14/typed-argument-parser/raw/master/images/tap.png)\n\n## Table of Contents\n\n* [Installation](#installation)\n* [Tap is Python-native](#tap-is-python-native)\n* [Tap features](#tap-features)\n    + [Arguments](#arguments)\n    + [Help string](#help-string)\n    + [Flexibility of `add_arguments`](#flexibility-of-add_arguments)\n    + [Types](#types)\n    + [Argument processing with `process_args`](#argument-processing-with-process_args)\n    + [Processing known args](#processing-known-args)\n    + [Subclassing](#subclassing)\n    + [Printing](#printing)\n    + [Reproducibility](#reproducibility)\n      - [Reproducibility info](#reproducibility-info)\n    + [Saving and loading arguments](#saving-and-loading-arguments)\n      - [Save](#save)\n      - [Load](#load)\n      - [Load from dict](#load-from-dict)\n\n## Installation\n\nTap requires Python 3.6+\n\nTo install Tap from PyPI run: \n```\npip install typed-argument-parser\n```\n\nTo install Tap from source, run the following commands:\n\n```\ngit clone https://github.com/swansonk14/typed-argument-parser.git\ncd typed-argument-parser\npip install -e .\n```\n\n## Tap is Python-native\nTo see this, let's look at an example:\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\n\nclass SimpleArgumentParser(Tap):\n    name: str  # Your name\n    language: str = 'Python'  # Programming language\n    package: str = 'Tap'  # Package name\n    stars: int  # Number of stars\n    max_stars: int = 5  # Maximum stars\n\nargs = SimpleArgumentParser().parse_args()\n\nprint(f'My name is {args.name} and I give the {args.language} package '\n      f'{args.package} {args.stars}/{args.max_stars} stars!')\n```\n\nYou use Tap the same way you use standard argparse.\n\n```\n>>> python main.py --name Jesse --stars 5\nMy name is Jesse and I give the Python package Tap 5/5 stars!\n```\n\nThe equivalent argparse code is:\n```python\n\"\"\"main.py\"\"\"\n\nfrom argparse import ArgumentParser\n\nparser = ArgumentParser()\nparser.add_argument('--name', type=str, required=True,\n                    help='Your name')\nparser.add_argument('--language', type=str, default='Python',\n                    help='Programming language')\nparser.add_argument('--package', type=str, default='Tap',\n                    help='Package name')\nparser.add_argument('--stars', type=int, required=True,\n                    help='Number of stars')\nparser.add_argument('--max_stars', type=int, default=5,\n                    help='Maximum stars')\nargs = parser.parse_args()\n\nprint(f'My name is {args.name} and I give the {args.language} package '\n      f'{args.package} {args.stars}/{args.max_stars} stars!')\n```\n\nThe advantages of being Python-native include being able to:\n- Overwrite convenient built-in methods (e.g. `process_args` ensures consistency among arguments)\n- Add custom methods\n- Inherit from your own template classes\n\n## Tap features\n\nNow we are going to highlight some of our favorite features and give examples of how they work in practice.\n\n### Arguments\n\nArguments are specified as class variables defined in a subclass of `Tap`. Variables defined as `name: type` are required arguments while variables defined as `name: type = value` are not required and default to the provided value.\n\n```python\nclass MyTap(Tap):\n    required_arg: str\n    default_arg: str = 'default value'\n```\n\n### Help string\n\nSingle line comments are automatically parsed into the help string provided when running `python main.py -h`. The type and default values of arguments are also provided in the help string.\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\n\nclass MyTap(Tap):\n    x: float  # What am I?\n    pi: float = 3.14  # I'm pi!\n\nargs = MyTap().parse_args()\n```\n\nRunning `python main.py -h` results in the following:\n\n```\n>>> python main.py -h\nusage: demo.py --x X [--pi PI] [-h]\n\noptional arguments:\n  --x X       (float, required) What am I?\n  --pi PI     (float, default=3.14) I'm pi!\n  -h, --help  show this help message and exit\n```\n\n### Flexibility of `add_arguments`\n\nPython's argparse provides a number of advanced argument parsing features with the `add_argument` method. Since Tap is a wrapper around argparse, Tap provides all of the same functionality.\n\nTo make use of this functionality, first define arguments as class variables as usual, then override Tap's `add_arguments` and use `self.add_argument` just as you would use argparse's `add_argument`.\n\n```python\nfrom tap import Tap\n\nclass MyTap(Tap):\n    positional_argument: str\n    list_of_three_things: List[str]\n    argument_with_really_long_name: int\n\n    def add_arguments(self):\n        self.add_argument('positional_argument')\n        self.add_argument('--list_of_three_things', nargs=3)\n        self.add_argument('-arg', '--argument_with_really_long_name')\n```\n\n### Types\n\nTap automatically handles all of the following types:\n\n```python\nstr, int, float, bool\nOptional, Optional[str], Optional[int], Optional[float], Optional[bool]\nList, List[str], List[int], List[float], List[bool]\nSet, Set[str], Set[int], Set[float], Set[bool]\nTuple, Tuple[Type1, Type2, etc.], Tuple[Type, ...]  \nLiteral\n```\n\n#### `str`, `int`, and `float`\n\nEach is automatically parsed to their respective types, just like argparse.\n\n#### `bool`\n\nIf an argument `arg` is specified as `arg: bool` or `arg: bool = False`, then adding the `--arg` flag to the command line will set `arg` to `True`. If `arg` is specified as `arg: bool = True`, then adding `--arg` sets `arg` to `False`.\n\nNote that if the `Tap` instance is created with `explicit_bool=True`, then booleans can be specified on the command line as `--arg True` or `--arg False` rather than `--arg`. Additionally, booleans can be specified by prefixes of `True` and `False` with any capitalization as well as `1` or `0` (e.g. for True, `--arg tRu`, `--arg T`, `--arg 1` all suffice). \n\n#### `Optional`\n\nThese arguments are parsed in exactly the same way as `str`, `int`, `float`, and `bool`. Note bools can be specified using the same rules as above and that `Optional` is equivalent to `Optional[str]`.\n\n#### `List`\n\nIf an argument `arg` is a `List`, simply specify the values separated by spaces just as you would with regular argparse. For example, `--arg 1 2 3` parses to `arg = [1, 2, 3]`.\n\n#### `Set`\n\nIdentical to `List` but parsed into a set rather than a list.\n\n#### `Tuple`\n\nTuples can be used to specify a fixed number of arguments with specified types using the syntax `Tuple[Type1, Type2, etc.]` (e.g. `Tuple[str, int, bool, str]`). Tuples with a variable number of arguments are specified by `Tuple[Type, ...]` (e.g. `Tuple[int, ...]`). Note `Tuple` defaults to `Tuple[str, ...]`.\n\n#### `Literal`\n\nLiteral is analagous to `argparse`'s [choices](https://docs.python.org/3/library/argparse.html#choices), which specifies the values that an argument can take. For example, if arg can only be one of 'H', 1, False, or 1.0078 then you would specify that `arg: Literal['H', 1, False, 1.0078]`. For instance, `--arg False` assigns arg to False and `--arg True` throws error. The `Literal` type was introduced in Python 3.8 ([PEP 586](https://www.python.org/dev/peps/pep-0586/)) and can be imported with `from typing_extensions import Literal`.\n\n#### Complex types\n\nMore complex types _must_ be specified with the `type` keyword argument in `add_argument`, as in the example below.\n\n```python\ndef to_number(string: str):\n    return float(string) if '.' in string else int(string)\n\nclass MyTap(Tap):\n    number: Union[int, float]\n\n    def add_arguments(self):\n        self.add_argument('--number', type=to_number)\n```\n\n### Argument processing with `process_args`\n\nWith complex argument parsing, arguments often end up having interdependencies. This means that it may be necessary to disallow certain combinations of arguments or to modify some arguments based on other arguments.\n\nTo handle such cases, simply override `process_args` and add the required logic. `process_args` is automatically called when `parse_args` is called.\n\n```python\nclass MyTap(Tap):\n    package: str\n    is_cool: bool\n    stars: int\n\n    def process_args(self):\n        # Validate arguments\n        if self.is_cool and self.stars < 4:\n            raise ValueError('Cool packages cannot have fewer than 4 stars')\n\n        # Modify arguments\n        if self.package == 'Tap':\n            self.is_cool = True\n            self.stars = 5\n```\n\n### Processing known args\n\nSimilar to argparse's `parse_known_args`, Tap is capable of parsing only arguments that it is aware of without raising an error due to additional arguments. This can be done by calling `parse_args` with `known_only=True`. The remaining un-parsed arguments are then available by accessing the `extra_args` field of the Tap object.\n\n```python\nclass MyTap(Tap):\n    package: str\n\nargs = MyTap().parse_args(['--package', 'Tap', '--other_arg', 'value'], known_only=True)\nprint(args.extra_args)  # ['--other_arg', 'value']\n```\n\n### Subclassing\n\nIt is sometimes useful to define a template Tap and then subclass it for different use cases. Since Tap is a native Python class, inheritance is built-in, making it easy to customize from a template Tap.\n\nIn the example below, `StarsTap` and `AwardsTap` inherit the arguments (`package` and `is_cool`) and the methods (`process_args`) from `BaseTap`.\n\n```python\nclass BaseTap(Tap):\n    package: str\n    is_cool: bool\n\n    def process_args(self):\n        if self.package == 'Tap':\n            self.is_cool = True\n\n\nclass StarsTap(BaseTap):\n    stars: int\n\n\nclass AwardsTap(BaseTap):\n    awards: List[str]\n```\n\n### Printing\n\nTap uses Python's [pretty printer](https://docs.python.org/3/library/pprint.html) to print out arguments in an easy-to-read format.\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\nfrom typing import List\n\nclass MyTap(Tap):\n    package: str\n    is_cool: bool = True\n    awards: List[str] = ['amazing', 'wow', 'incredible', 'awesome']\n\nargs = MyTap().parse_args()\nprint(args)\n```\n\nRunning `python main.py --package Tap` results in:\n\n```\n>>> python main.py\n{'awards': ['amazing', 'wow', 'incredible', 'awesome'],\n 'is_cool': True,\n 'package': 'Tap'}\n```\n\n### Reproducibility\n\nTap makes reproducibility easy, especially when running code in a git repo.\n\n#### Reproducibility info\n\nSpecifically, Tap has a method called `get_reproducibility_info` that returns a dictionary containing all the information necessary to replicate the settings under which the code was run. This dictionary includes:\n- Python command\n    - The Python command that was used to run the program\n    - Ex. `python main.py --package Tap`\n- Time\n    - The time when the command was run\n    - Ex. `Thu Aug 15 00:09:13 2019`\n- Git root\n    - The root of the git repo containing the code\n    - Ex. `/Users/swansonk14/typed-argument-parser`\n- Git url\n    - The url to the git repo, specifically pointing to the current git hash (i.e. the hash of HEAD in the local repo)\n    - Ex. [https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998](https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998)\n- Uncommited changes\n    - Whether there are any uncommitted changes in the git repo (i.e. whether the code is different from the code at the above git hash)\n    - Ex. `True` or `False`\n\n### Saving and loading arguments\n\n#### Save\n\nTap has a method called `save` which saves all arguments, along with the reproducibility info, to a JSON file.\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\n\nclass MyTap(Tap):\n    package: str\n    is_cool: bool = True\n    stars: int = 5\n\nargs = MyTap().parse_args()\nargs.save('args.json')\n```\n\nAfter running `python main.py --package Tap`, the file `args.json` will contain:\n\n```\n{\n    \"is_cool\": true,\n    \"package\": \"Tap\",\n    \"reproducibility\": {\n        \"command_line\": \"python main.py --package Tap\",\n        \"git_has_uncommitted_changes\": false,\n        \"git_root\": \"/Users/swansonk14/typed-argument-parser\",\n        \"git_url\": \"https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998\",\n        \"time\": \"Thu Aug 15 00:18:31 2019\"\n    },\n    \"stars\": 5\n}\n```\n\nNote: More complex types will be encoded in JSON as a pickle string.\n\n#### Load\n\nArguments can be loaded from a JSON file rather than parsed from the command line.\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\n\nclass MyTap(Tap):\n    package: str\n    is_cool: bool = True\n    stars: int = 5\n\nargs = MyTap()\nargs.load('args.json')\n```\n\nNote: All required arguments (in this case `package`) must be present in the JSON file if not already set in the Tap object.\n\n#### Load from dict\n\nArguments can be loaded from a Python dictionary rather than parsed from the command line.\n\n```python\n\"\"\"main.py\"\"\"\n\nfrom tap import Tap\n\nclass MyTap(Tap):\n    package: str\n    is_cool: bool = True\n    stars: int = 5\n\nargs = MyTap()\nargs.from_dict({\n    'package': 'Tap',\n    'stars': 20\n})\n```\n\nNote: As with `load`, all required arguments must be present in the dictionary if not already set in the Tap object. All values in the provided dictionary will overwrite values currently in the Tap object.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/swansonk14/typed-argument-parser/v_1.4.3.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/swansonk14/typed-argument-parser", "keywords": "typing,argument parser,python", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "typed-argument-parser", "package_url": "https://pypi.org/project/typed-argument-parser/", "platform": "", "project_url": "https://pypi.org/project/typed-argument-parser/", "project_urls": {"Download": "https://github.com/swansonk14/typed-argument-parser/v_1.4.3.tar.gz", "Homepage": "https://github.com/swansonk14/typed-argument-parser"}, "release_url": "https://pypi.org/project/typed-argument-parser/1.4.3/", "requires_dist": null, "requires_python": "", "summary": "Typed Argument Parser", "version": "1.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\">\n   <img align=\"middle\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/08396b80bc7d8ede344e3dc16fcd5891658fa9b3/696d616765732f6c6f676f2e706e67\" width=\"40%\">\n</p>\n<h1>Typed Argument Parser (Tap)</h1>\n<p><a href=\"https://badge.fury.io/py/typed-argument-parser\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/84548feada77ff2f9cb54570b2b6530fbe06a962/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f74797065642d617267756d656e742d706172736572\"></a>\n<a href=\"https://badge.fury.io/py/typed-argument-parser\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4f2fb20e38498b3b15b0945e7c687e622b9d5499/68747470733a2f2f62616467652e667572792e696f2f70792f74797065642d617267756d656e742d7061727365722e737667\"></a>\n<a href=\"https://travis-ci.com/swansonk14/typed-argument-parser\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/175bc699f46eecf93a44099605f1e784c16874e6/68747470733a2f2f7472617669732d63692e636f6d2f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Tap is a typed modernization of Python's <a href=\"https://docs.python.org/3/library/argparse.html\" rel=\"nofollow\">argparse</a> library.</p>\n<p>Tap provides the following benefits:</p>\n<ul>\n<li>Static type checking</li>\n<li>Code completion</li>\n<li>Source code navigation (e.g. go to definition and go to implementation)</li>\n</ul>\n<p><img alt=\"Tap\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d1a224ea08721fe5ff97f4de1d41236da34eb6d7/68747470733a2f2f6769746875622e636f6d2f7377616e736f6e6b31342f74797065642d617267756d656e742d7061727365722f7261772f6d61737465722f696d616765732f7461702e706e67\"></p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#tap-is-python-native\" rel=\"nofollow\">Tap is Python-native</a></li>\n<li><a href=\"#tap-features\" rel=\"nofollow\">Tap features</a>\n<ul>\n<li><a href=\"#arguments\" rel=\"nofollow\">Arguments</a></li>\n<li><a href=\"#help-string\" rel=\"nofollow\">Help string</a></li>\n<li><a href=\"#flexibility-of-add_arguments\" rel=\"nofollow\">Flexibility of <code>add_arguments</code></a></li>\n<li><a href=\"#types\" rel=\"nofollow\">Types</a></li>\n<li><a href=\"#argument-processing-with-process_args\" rel=\"nofollow\">Argument processing with <code>process_args</code></a></li>\n<li><a href=\"#processing-known-args\" rel=\"nofollow\">Processing known args</a></li>\n<li><a href=\"#subclassing\" rel=\"nofollow\">Subclassing</a></li>\n<li><a href=\"#printing\" rel=\"nofollow\">Printing</a></li>\n<li><a href=\"#reproducibility\" rel=\"nofollow\">Reproducibility</a>\n<ul>\n<li><a href=\"#reproducibility-info\" rel=\"nofollow\">Reproducibility info</a></li>\n</ul>\n</li>\n<li><a href=\"#saving-and-loading-arguments\" rel=\"nofollow\">Saving and loading arguments</a>\n<ul>\n<li><a href=\"#save\" rel=\"nofollow\">Save</a></li>\n<li><a href=\"#load\" rel=\"nofollow\">Load</a></li>\n<li><a href=\"#load-from-dict\" rel=\"nofollow\">Load from dict</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Tap requires Python 3.6+</p>\n<p>To install Tap from PyPI run:</p>\n<pre><code>pip install typed-argument-parser\n</code></pre>\n<p>To install Tap from source, run the following commands:</p>\n<pre><code>git clone https://github.com/swansonk14/typed-argument-parser.git\ncd typed-argument-parser\npip install -e .\n</code></pre>\n<h2>Tap is Python-native</h2>\n<p>To see this, let's look at an example:</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SimpleArgumentParser</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>  <span class=\"c1\"># Your name</span>\n    <span class=\"n\">language</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'Python'</span>  <span class=\"c1\"># Programming language</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'Tap'</span>  <span class=\"c1\"># Package name</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>  <span class=\"c1\"># Number of stars</span>\n    <span class=\"n\">max_stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>  <span class=\"c1\"># Maximum stars</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">SimpleArgumentParser</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'My name is </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> and I give the </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"si\">}</span><span class=\"s1\"> package '</span>\n      <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">package</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">stars</span><span class=\"si\">}</span><span class=\"s1\">/</span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">max_stars</span><span class=\"si\">}</span><span class=\"s1\"> stars!'</span><span class=\"p\">)</span>\n</pre>\n<p>You use Tap the same way you use standard argparse.</p>\n<pre><code>&gt;&gt;&gt; python main.py --name Jesse --stars 5\nMy name is Jesse and I give the Python package Tap 5/5 stars!\n</code></pre>\n<p>The equivalent argparse code is:</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">argparse</span> <span class=\"kn\">import</span> <span class=\"n\">ArgumentParser</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--name'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Your name'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--language'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'Python'</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Programming language'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--package'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"s1\">'Tap'</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Package name'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--stars'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">required</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Number of stars'</span><span class=\"p\">)</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--max_stars'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">default</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                    <span class=\"n\">help</span><span class=\"o\">=</span><span class=\"s1\">'Maximum stars'</span><span class=\"p\">)</span>\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'My name is </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"si\">}</span><span class=\"s1\"> and I give the </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">language</span><span class=\"si\">}</span><span class=\"s1\"> package '</span>\n      <span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">package</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">stars</span><span class=\"si\">}</span><span class=\"s1\">/</span><span class=\"si\">{</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">max_stars</span><span class=\"si\">}</span><span class=\"s1\"> stars!'</span><span class=\"p\">)</span>\n</pre>\n<p>The advantages of being Python-native include being able to:</p>\n<ul>\n<li>Overwrite convenient built-in methods (e.g. <code>process_args</code> ensures consistency among arguments)</li>\n<li>Add custom methods</li>\n<li>Inherit from your own template classes</li>\n</ul>\n<h2>Tap features</h2>\n<p>Now we are going to highlight some of our favorite features and give examples of how they work in practice.</p>\n<h3>Arguments</h3>\n<p>Arguments are specified as class variables defined in a subclass of <code>Tap</code>. Variables defined as <code>name: type</code> are required arguments while variables defined as <code>name: type = value</code> are not required and default to the provided value.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">required_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">default_arg</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">'default value'</span>\n</pre>\n<h3>Help string</h3>\n<p>Single line comments are automatically parsed into the help string provided when running <code>python main.py -h</code>. The type and default values of arguments are also provided in the help string.</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"nb\">float</span>  <span class=\"c1\"># What am I?</span>\n    <span class=\"n\">pi</span><span class=\"p\">:</span> <span class=\"nb\">float</span> <span class=\"o\">=</span> <span class=\"mf\">3.14</span>  <span class=\"c1\"># I'm pi!</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n</pre>\n<p>Running <code>python main.py -h</code> results in the following:</p>\n<pre><code>&gt;&gt;&gt; python main.py -h\nusage: demo.py --x X [--pi PI] [-h]\n\noptional arguments:\n  --x X       (float, required) What am I?\n  --pi PI     (float, default=3.14) I'm pi!\n  -h, --help  show this help message and exit\n</code></pre>\n<h3>Flexibility of <code>add_arguments</code></h3>\n<p>Python's argparse provides a number of advanced argument parsing features with the <code>add_argument</code> method. Since Tap is a wrapper around argparse, Tap provides all of the same functionality.</p>\n<p>To make use of this functionality, first define arguments as class variables as usual, then override Tap's <code>add_arguments</code> and use <code>self.add_argument</code> just as you would use argparse's <code>add_argument</code>.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">positional_argument</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">list_of_three_things</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    <span class=\"n\">argument_with_really_long_name</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'positional_argument'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--list_of_three_things'</span><span class=\"p\">,</span> <span class=\"n\">nargs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'-arg'</span><span class=\"p\">,</span> <span class=\"s1\">'--argument_with_really_long_name'</span><span class=\"p\">)</span>\n</pre>\n<h3>Types</h3>\n<p>Tap automatically handles all of the following types:</p>\n<pre><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"nb\">bool</span>\n<span class=\"n\">Optional</span><span class=\"p\">,</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>\n<span class=\"n\">List</span><span class=\"p\">,</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>\n<span class=\"n\">Set</span><span class=\"p\">,</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">],</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">],</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">float</span><span class=\"p\">],</span> <span class=\"n\">Set</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">]</span>\n<span class=\"n\">Tuple</span><span class=\"p\">,</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Type1</span><span class=\"p\">,</span> <span class=\"n\">Type2</span><span class=\"p\">,</span> <span class=\"n\">etc</span><span class=\"o\">.</span><span class=\"p\">],</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">Type</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>  \n<span class=\"n\">Literal</span>\n</pre>\n<h4><code>str</code>, <code>int</code>, and <code>float</code></h4>\n<p>Each is automatically parsed to their respective types, just like argparse.</p>\n<h4><code>bool</code></h4>\n<p>If an argument <code>arg</code> is specified as <code>arg: bool</code> or <code>arg: bool = False</code>, then adding the <code>--arg</code> flag to the command line will set <code>arg</code> to <code>True</code>. If <code>arg</code> is specified as <code>arg: bool = True</code>, then adding <code>--arg</code> sets <code>arg</code> to <code>False</code>.</p>\n<p>Note that if the <code>Tap</code> instance is created with <code>explicit_bool=True</code>, then booleans can be specified on the command line as <code>--arg True</code> or <code>--arg False</code> rather than <code>--arg</code>. Additionally, booleans can be specified by prefixes of <code>True</code> and <code>False</code> with any capitalization as well as <code>1</code> or <code>0</code> (e.g. for True, <code>--arg tRu</code>, <code>--arg T</code>, <code>--arg 1</code> all suffice).</p>\n<h4><code>Optional</code></h4>\n<p>These arguments are parsed in exactly the same way as <code>str</code>, <code>int</code>, <code>float</code>, and <code>bool</code>. Note bools can be specified using the same rules as above and that <code>Optional</code> is equivalent to <code>Optional[str]</code>.</p>\n<h4><code>List</code></h4>\n<p>If an argument <code>arg</code> is a <code>List</code>, simply specify the values separated by spaces just as you would with regular argparse. For example, <code>--arg 1 2 3</code> parses to <code>arg = [1, 2, 3]</code>.</p>\n<h4><code>Set</code></h4>\n<p>Identical to <code>List</code> but parsed into a set rather than a list.</p>\n<h4><code>Tuple</code></h4>\n<p>Tuples can be used to specify a fixed number of arguments with specified types using the syntax <code>Tuple[Type1, Type2, etc.]</code> (e.g. <code>Tuple[str, int, bool, str]</code>). Tuples with a variable number of arguments are specified by <code>Tuple[Type, ...]</code> (e.g. <code>Tuple[int, ...]</code>). Note <code>Tuple</code> defaults to <code>Tuple[str, ...]</code>.</p>\n<h4><code>Literal</code></h4>\n<p>Literal is analagous to <code>argparse</code>'s <a href=\"https://docs.python.org/3/library/argparse.html#choices\" rel=\"nofollow\">choices</a>, which specifies the values that an argument can take. For example, if arg can only be one of 'H', 1, False, or 1.0078 then you would specify that <code>arg: Literal['H', 1, False, 1.0078]</code>. For instance, <code>--arg False</code> assigns arg to False and <code>--arg True</code> throws error. The <code>Literal</code> type was introduced in Python 3.8 (<a href=\"https://www.python.org/dev/peps/pep-0586/\" rel=\"nofollow\">PEP 586</a>) and can be imported with <code>from typing_extensions import Literal</code>.</p>\n<h4>Complex types</h4>\n<p>More complex types <em>must</em> be specified with the <code>type</code> keyword argument in <code>add_argument</code>, as in the example below.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">to_number</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"s1\">'.'</span> <span class=\"ow\">in</span> <span class=\"n\">string</span> <span class=\"k\">else</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">string</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">number</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">float</span><span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">add_arguments</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"s1\">'--number'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"n\">to_number</span><span class=\"p\">)</span>\n</pre>\n<h3>Argument processing with <code>process_args</code></h3>\n<p>With complex argument parsing, arguments often end up having interdependencies. This means that it may be necessary to disallow certain combinations of arguments or to modify some arguments based on other arguments.</p>\n<p>To handle such cases, simply override <code>process_args</code> and add the required logic. <code>process_args</code> is automatically called when <code>parse_args</code> is called.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Validate arguments</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_cool</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stars</span> <span class=\"o\">&lt;</span> <span class=\"mi\">4</span><span class=\"p\">:</span>\n            <span class=\"k\">raise</span> <span class=\"ne\">ValueError</span><span class=\"p\">(</span><span class=\"s1\">'Cool packages cannot have fewer than 4 stars'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># Modify arguments</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">package</span> <span class=\"o\">==</span> <span class=\"s1\">'Tap'</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_cool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stars</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n</pre>\n<h3>Processing known args</h3>\n<p>Similar to argparse's <code>parse_known_args</code>, Tap is capable of parsing only arguments that it is aware of without raising an error due to additional arguments. This can be done by calling <code>parse_args</code> with <code>known_only=True</code>. The remaining un-parsed arguments are then available by accessing the <code>extra_args</code> field of the Tap object.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">([</span><span class=\"s1\">'--package'</span><span class=\"p\">,</span> <span class=\"s1\">'Tap'</span><span class=\"p\">,</span> <span class=\"s1\">'--other_arg'</span><span class=\"p\">,</span> <span class=\"s1\">'value'</span><span class=\"p\">],</span> <span class=\"n\">known_only</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">extra_args</span><span class=\"p\">)</span>  <span class=\"c1\"># ['--other_arg', 'value']</span>\n</pre>\n<h3>Subclassing</h3>\n<p>It is sometimes useful to define a template Tap and then subclass it for different use cases. Since Tap is a native Python class, inheritance is built-in, making it easy to customize from a template Tap.</p>\n<p>In the example below, <code>StarsTap</code> and <code>AwardsTap</code> inherit the arguments (<code>package</code> and <code>is_cool</code>) and the methods (<code>process_args</code>) from <code>BaseTap</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">process_args</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">package</span> <span class=\"o\">==</span> <span class=\"s1\">'Tap'</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_cool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">StarsTap</span><span class=\"p\">(</span><span class=\"n\">BaseTap</span><span class=\"p\">):</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AwardsTap</span><span class=\"p\">(</span><span class=\"n\">BaseTap</span><span class=\"p\">):</span>\n    <span class=\"n\">awards</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n</pre>\n<h3>Printing</h3>\n<p>Tap uses Python's <a href=\"https://docs.python.org/3/library/pprint.html\" rel=\"nofollow\">pretty printer</a> to print out arguments in an easy-to-read format.</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n<span class=\"kn\">from</span> <span class=\"nn\">typing</span> <span class=\"kn\">import</span> <span class=\"n\">List</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">awards</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'amazing'</span><span class=\"p\">,</span> <span class=\"s1\">'wow'</span><span class=\"p\">,</span> <span class=\"s1\">'incredible'</span><span class=\"p\">,</span> <span class=\"s1\">'awesome'</span><span class=\"p\">]</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n</pre>\n<p>Running <code>python main.py --package Tap</code> results in:</p>\n<pre><code>&gt;&gt;&gt; python main.py\n{'awards': ['amazing', 'wow', 'incredible', 'awesome'],\n 'is_cool': True,\n 'package': 'Tap'}\n</code></pre>\n<h3>Reproducibility</h3>\n<p>Tap makes reproducibility easy, especially when running code in a git repo.</p>\n<h4>Reproducibility info</h4>\n<p>Specifically, Tap has a method called <code>get_reproducibility_info</code> that returns a dictionary containing all the information necessary to replicate the settings under which the code was run. This dictionary includes:</p>\n<ul>\n<li>Python command\n<ul>\n<li>The Python command that was used to run the program</li>\n<li>Ex. <code>python main.py --package Tap</code></li>\n</ul>\n</li>\n<li>Time\n<ul>\n<li>The time when the command was run</li>\n<li>Ex. <code>Thu Aug 15 00:09:13 2019</code></li>\n</ul>\n</li>\n<li>Git root\n<ul>\n<li>The root of the git repo containing the code</li>\n<li>Ex. <code>/Users/swansonk14/typed-argument-parser</code></li>\n</ul>\n</li>\n<li>Git url\n<ul>\n<li>The url to the git repo, specifically pointing to the current git hash (i.e. the hash of HEAD in the local repo)</li>\n<li>Ex. <a href=\"https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998\" rel=\"nofollow\">https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998</a></li>\n</ul>\n</li>\n<li>Uncommited changes\n<ul>\n<li>Whether there are any uncommitted changes in the git repo (i.e. whether the code is different from the code at the above git hash)</li>\n<li>Ex. <code>True</code> or <code>False</code></li>\n</ul>\n</li>\n</ul>\n<h3>Saving and loading arguments</h3>\n<h4>Save</h4>\n<p>Tap has a method called <code>save</code> which saves all arguments, along with the reproducibility info, to a JSON file.</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n<span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'args.json'</span><span class=\"p\">)</span>\n</pre>\n<p>After running <code>python main.py --package Tap</code>, the file <code>args.json</code> will contain:</p>\n<pre><code>{\n    \"is_cool\": true,\n    \"package\": \"Tap\",\n    \"reproducibility\": {\n        \"command_line\": \"python main.py --package Tap\",\n        \"git_has_uncommitted_changes\": false,\n        \"git_root\": \"/Users/swansonk14/typed-argument-parser\",\n        \"git_url\": \"https://github.com/swansonk14/typed-argument-parser/tree/446cf046631d6bdf7cab6daec93bf7a02ac00998\",\n        \"time\": \"Thu Aug 15 00:18:31 2019\"\n    },\n    \"stars\": 5\n}\n</code></pre>\n<p>Note: More complex types will be encoded in JSON as a pickle string.</p>\n<h4>Load</h4>\n<p>Arguments can be loaded from a JSON file rather than parsed from the command line.</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span>\n<span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'args.json'</span><span class=\"p\">)</span>\n</pre>\n<p>Note: All required arguments (in this case <code>package</code>) must be present in the JSON file if not already set in the Tap object.</p>\n<h4>Load from dict</h4>\n<p>Arguments can be loaded from a Python dictionary rather than parsed from the command line.</p>\n<pre><span class=\"sd\">\"\"\"main.py\"\"\"</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">tap</span> <span class=\"kn\">import</span> <span class=\"n\">Tap</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyTap</span><span class=\"p\">(</span><span class=\"n\">Tap</span><span class=\"p\">):</span>\n    <span class=\"n\">package</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">is_cool</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n    <span class=\"n\">stars</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n\n<span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">MyTap</span><span class=\"p\">()</span>\n<span class=\"n\">args</span><span class=\"o\">.</span><span class=\"n\">from_dict</span><span class=\"p\">({</span>\n    <span class=\"s1\">'package'</span><span class=\"p\">:</span> <span class=\"s1\">'Tap'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'stars'</span><span class=\"p\">:</span> <span class=\"mi\">20</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Note: As with <code>load</code>, all required arguments must be present in the dictionary if not already set in the Tap object. All values in the provided dictionary will overwrite values currently in the Tap object.</p>\n\n          </div>"}, "last_serial": 7078833, "releases": {"1.2": [{"comment_text": "", "digests": {"md5": "7377c835671401da0997cb6bcfabb689", "sha256": "a8cea9fd206093c74437596131612dcb3044c36c2010f3e21576a3b35c0383bf"}, "downloads": -1, "filename": "typed-argument-parser-1.2.tar.gz", "has_sig": false, "md5_digest": "7377c835671401da0997cb6bcfabb689", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14589, "upload_time": "2019-08-23T05:31:02", "upload_time_iso_8601": "2019-08-23T05:31:02.977016Z", "url": "https://files.pythonhosted.org/packages/16/33/8f6a4d242ac77d388e32d372b04a7312c3e84408f97306fb4c5dec119019/typed-argument-parser-1.2.tar.gz", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "64c1cd87a07405303b5eaa39dc16c14a", "sha256": "62058aff3deccee9b6ffcb3acfe46a2878fb65dcf411945a9ea948f07340c041"}, "downloads": -1, "filename": "typed-argument-parser-1.3.tar.gz", "has_sig": false, "md5_digest": "64c1cd87a07405303b5eaa39dc16c14a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14669, "upload_time": "2019-09-08T02:21:53", "upload_time_iso_8601": "2019-09-08T02:21:53.284108Z", "url": "https://files.pythonhosted.org/packages/a9/85/4474242da08b1121ab2a05e529e640bdf7e5936c34de7417f154347004d0/typed-argument-parser-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "25411f4dd336600ff096bf545114e736", "sha256": "45b02038dfb8e01fafb39bb27d5be34039b11cfd4f70b0e16b346327431fd1ab"}, "downloads": -1, "filename": "typed-argument-parser-1.4.tar.gz", "has_sig": false, "md5_digest": "25411f4dd336600ff096bf545114e736", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16832, "upload_time": "2019-12-27T23:59:36", "upload_time_iso_8601": "2019-12-27T23:59:36.242537Z", "url": "https://files.pythonhosted.org/packages/da/8a/39adbc1667398ccc89fb18194a54be3362f71bc0835f07d4ea78443b4481/typed-argument-parser-1.4.tar.gz", "yanked": false}], "1.4.1": [{"comment_text": "", "digests": {"md5": "d1bdfc17ef19d596288fc07b868b7ca7", "sha256": "7a40a25da031906a92060ba5603f0cf17abf07b0fcc99fe006c020a23b2f0bd2"}, "downloads": -1, "filename": "typed-argument-parser-1.4.1.tar.gz", "has_sig": false, "md5_digest": "d1bdfc17ef19d596288fc07b868b7ca7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18077, "upload_time": "2020-03-30T04:20:26", "upload_time_iso_8601": "2020-03-30T04:20:26.699445Z", "url": "https://files.pythonhosted.org/packages/67/30/e43030c4c396ea3e32f1f9208d4c9bc30bb47498f93ae1ab5d9ef48b4d09/typed-argument-parser-1.4.1.tar.gz", "yanked": false}], "1.4.2": [{"comment_text": "", "digests": {"md5": "ac25f3086b19e7f0136c142ea563eb93", "sha256": "f4c4a3d3e55ee1fc7d73e7734c1aecfa7ba487edab4abffc256781283e31e0ec"}, "downloads": -1, "filename": "typed-argument-parser-1.4.2.tar.gz", "has_sig": false, "md5_digest": "ac25f3086b19e7f0136c142ea563eb93", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20786, "upload_time": "2020-04-13T04:43:34", "upload_time_iso_8601": "2020-04-13T04:43:34.125131Z", "url": "https://files.pythonhosted.org/packages/ff/32/23c87fae6d3e2d097e4318f6608d5d4da5630602feb9fd21f6987afdd11a/typed-argument-parser-1.4.2.tar.gz", "yanked": false}], "1.4.3": [{"comment_text": "", "digests": {"md5": "e9c218d4d97cacaea2006afc2c2cab8c", "sha256": "ae2bb35ddf506c137d2d14a0fe391b087a47a336dc627e7ca16f5d101377ab95"}, "downloads": -1, "filename": "typed-argument-parser-1.4.3.tar.gz", "has_sig": false, "md5_digest": "e9c218d4d97cacaea2006afc2c2cab8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21062, "upload_time": "2020-04-22T18:58:15", "upload_time_iso_8601": "2020-04-22T18:58:15.792182Z", "url": "https://files.pythonhosted.org/packages/28/55/6c502d8dd957c279335bcea30b182cdc0417c1c689d71e0708ce034754eb/typed-argument-parser-1.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e9c218d4d97cacaea2006afc2c2cab8c", "sha256": "ae2bb35ddf506c137d2d14a0fe391b087a47a336dc627e7ca16f5d101377ab95"}, "downloads": -1, "filename": "typed-argument-parser-1.4.3.tar.gz", "has_sig": false, "md5_digest": "e9c218d4d97cacaea2006afc2c2cab8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21062, "upload_time": "2020-04-22T18:58:15", "upload_time_iso_8601": "2020-04-22T18:58:15.792182Z", "url": "https://files.pythonhosted.org/packages/28/55/6c502d8dd957c279335bcea30b182cdc0417c1c689d71e0708ce034754eb/typed-argument-parser-1.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:42:55 2020"}