{"info": {"author": "Divio AG", "author_email": "info@divio.ch", "bugtrack_url": null, "classifiers": [], "description": "#############\nAldryn Django\n#############\n\n\n|PyPI Version|\n\nAn opinionated Django setup bundled as an Aldryn Addon.\n\nThis package will auto configure Django, including admin and some other basic\npackages. It also handles sane configuration of the database connection and\nstatic and media files.\n\nThe goal is to keep the footprint inside the django website project as small\nas possible, so updating things usually just means bumping a version in\n``requirements.txt`` and no other changes in the project.\n\n======================\nInstallation & Updates\n======================\n\n*********************\nAldryn Platform Users\n*********************\n\nNothing to do. ``aldryn-django`` is part of the Aldryn Platform.\n\n*******************\nManual Installation\n*******************\n\n.. important:: Please follow the setup instructions for installing\n               ``aldryn-addons`` first!\n\n\nAdd ``aldryn-django`` to your projects ``requirements.txt`` or pip install it.\n::\n\n    pip install aldryn-django==1.6.11.1\n\n\nThe version is made up of the Django release with an added digit for the\nrelease version of this package itself.\n\nIf you followed the ``aldryn-addons`` installation instructions, you should\nalready have a ``ALDRYN_ADDONS`` setting. Add ``aldryn-django`` to it.::\n\n    INSTALLED_ADDONS = [\n        'aldryn-django',\n    ]\n\nCreate the ``addons/aldryn-django`` directory at the same level as your\n``manage.py``. Then copy ``addon.json``, ``aldryn_config.py`` from\nthe matching sourcecode into it.\nAlso create a ``settings.json`` file in the same directory with the follwing\ncontent::\n\n    {\n        \"languages\": \"[\\\"en\\\", \\\"de\\\"]\"\n    }\n\n.. Note:: The need to manually copy ``aldryn_config.py`` and ``addon.json`` is\n          due to legacy compatibility with the Aldryn Platform and will no\n          longer be necessary in a later release of aldryn-addons.\n\n\nmanage.py and wsgi.py\n=====================\n\nAldryn django comes with entrypoints for ``manage.py`` and ``wsgi.py``. This\nmakes it possible to just have a small snippet of code in the website project\nthat should never change inside those files. The details of local project\nsetup (e.g reading environment variables from a ``.env`` file) are then up to\nthe currently installed version of ``aldryn-django``. Also other opinionated\nthings can be done, like using a production-grade wsgi middleware to serve\nstatic and media files.\n\n\nput this in manage.py::\n\n    #!/usr/bin/env python\n    import os\n    from aldryn_django import startup\n\n\n    if __name__ == \"__main__\":\n        startup.manage(path=os.path.dirname(os.path.abspath(__file__)))\n\n\nput this in wsgi.py::\n\n    import os\n    from aldryn_django import startup\n\n\n    application = startup.wsgi(path=os.path.dirname(__file__))\n\n\n====\nAPIs\n====\n\n**********\nMigrations\n**********\n\nTo run migrations, call the command ``aldryn-django migrate``. This will run\na series of commands for the migration stage of a project.\n``aldryn-django`` will run ``python manage.py syncdb`` and\n``python manage.py migrate`` (and on Django>=1.7 just\n``python manage.py migrate``). But any Addon can add stuff to this migration\nstep by appending commands to the ``MIGRATION_COMMANDS`` setting. For example\n``aldryn-cms`` (django-cms as an Addon) will run\n``python manage.py cms fix-tree`` at the migration stage.\n\n\n*****************\nProduction Server\n*****************\n\nCalling ``aldryn-django web`` will start an opinionated Django setup for\nproduction (currently uwsgi based).\n\n\n============\nContributing\n============\n\nThis is a community project. We love to get any feedback in the form of\n`issues`_ and `pull requests`_. Before submitting your pull request, please\nreview our guidelines for `Aldryn addons`_.\n\n.. _issues: https://github.com/aldryn/aldryn-django/issues\n.. _pull requests: https://github.com/aldryn/aldryn-django/pulls\n.. _Aldryn addons: http://docs.aldryn.com/en/latest/reference/addons/index.html\n.. _aldryn-django: https://github.com/aldryn/aldryn-django\n\n.. |PyPI Version| image:: http://img.shields.io/pypi/v/aldryn-django.svg\n   :target: https://pypi.python.org/pypi/aldryn-django\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aldryn/aldryn-django", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "aldryn-django", "package_url": "https://pypi.org/project/aldryn-django/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/aldryn-django/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/aldryn/aldryn-django"}, "release_url": "https://pypi.org/project/aldryn-django/1.6.11.1/", "requires_dist": null, "requires_python": null, "summary": "An opinionated Django setup bundled as an Aldryn Addon", "version": "1.6.11.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.python.org/pypi/aldryn-django\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4efd8ba12bf57908fde5f302b2b6772c96e6f310/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f616c6472796e2d646a616e676f2e737667\"></a></p>\n<p>An opinionated Django setup bundled as an Aldryn Addon.</p>\n<p>This package will auto configure Django, including admin and some other basic\npackages. It also handles sane configuration of the database connection and\nstatic and media files.</p>\n<p>The goal is to keep the footprint inside the django website project as small\nas possible, so updating things usually just means bumping a version in\n<tt>requirements.txt</tt> and no other changes in the project.</p>\n<div id=\"installation-updates\">\n<h2>Installation &amp; Updates</h2>\n<div id=\"aldryn-platform-users\">\n<h3>Aldryn Platform Users</h3>\n<p>Nothing to do. <tt><span class=\"pre\">aldryn-django</span></tt> is part of the Aldryn Platform.</p>\n</div>\n<div id=\"manual-installation\">\n<h3>Manual Installation</h3>\n<div>\n<p>Important</p>\n<p>Please follow the setup instructions for installing\n<tt><span class=\"pre\">aldryn-addons</span></tt> first!</p>\n</div>\n<p>Add <tt><span class=\"pre\">aldryn-django</span></tt> to your projects <tt>requirements.txt</tt> or pip install it.</p>\n<pre>pip install aldryn-django==1.6.11.1\n</pre>\n<p>The version is made up of the Django release with an added digit for the\nrelease version of this package itself.</p>\n<p>If you followed the <tt><span class=\"pre\">aldryn-addons</span></tt> installation instructions, you should\nalready have a <tt>ALDRYN_ADDONS</tt> setting. Add <tt><span class=\"pre\">aldryn-django</span></tt> to it.:</p>\n<pre>INSTALLED_ADDONS = [\n    'aldryn-django',\n]\n</pre>\n<p>Create the <tt><span class=\"pre\">addons/aldryn-django</span></tt> directory at the same level as your\n<tt>manage.py</tt>. Then copy <tt>addon.json</tt>, <tt>aldryn_config.py</tt> from\nthe matching sourcecode into it.\nAlso create a <tt>settings.json</tt> file in the same directory with the follwing\ncontent:</p>\n<pre>{\n    \"languages\": \"[\\\"en\\\", \\\"de\\\"]\"\n}\n</pre>\n<div>\n<p>Note</p>\n<p>The need to manually copy <tt>aldryn_config.py</tt> and <tt>addon.json</tt> is\ndue to legacy compatibility with the Aldryn Platform and will no\nlonger be necessary in a later release of aldryn-addons.</p>\n</div>\n<div id=\"manage-py-and-wsgi-py\">\n<h4>manage.py and wsgi.py</h4>\n<p>Aldryn django comes with entrypoints for <tt>manage.py</tt> and <tt>wsgi.py</tt>. This\nmakes it possible to just have a small snippet of code in the website project\nthat should never change inside those files. The details of local project\nsetup (e.g reading environment variables from a <tt>.env</tt> file) are then up to\nthe currently installed version of <tt><span class=\"pre\">aldryn-django</span></tt>. Also other opinionated\nthings can be done, like using a production-grade wsgi middleware to serve\nstatic and media files.</p>\n<p>put this in manage.py:</p>\n<pre>#!/usr/bin/env python\nimport os\nfrom aldryn_django import startup\n\n\nif __name__ == \"__main__\":\n    startup.manage(path=os.path.dirname(os.path.abspath(__file__)))\n</pre>\n<p>put this in wsgi.py:</p>\n<pre>import os\nfrom aldryn_django import startup\n\n\napplication = startup.wsgi(path=os.path.dirname(__file__))\n</pre>\n</div>\n</div>\n</div>\n<div id=\"apis\">\n<h2>APIs</h2>\n<div id=\"migrations\">\n<h3>Migrations</h3>\n<p>To run migrations, call the command <tt><span class=\"pre\">aldryn-django</span> migrate</tt>. This will run\na series of commands for the migration stage of a project.\n<tt><span class=\"pre\">aldryn-django</span></tt> will run <tt>python manage.py syncdb</tt> and\n<tt>python manage.py migrate</tt> (and on Django&gt;=1.7 just\n<tt>python manage.py migrate</tt>). But any Addon can add stuff to this migration\nstep by appending commands to the <tt>MIGRATION_COMMANDS</tt> setting. For example\n<tt><span class=\"pre\">aldryn-cms</span></tt> (django-cms as an Addon) will run\n<tt>python manage.py cms <span class=\"pre\">fix-tree</span></tt> at the migration stage.</p>\n</div>\n<div id=\"production-server\">\n<h3>Production Server</h3>\n<p>Calling <tt><span class=\"pre\">aldryn-django</span> web</tt> will start an opinionated Django setup for\nproduction (currently uwsgi based).</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>This is a community project. We love to get any feedback in the form of\n<a href=\"https://github.com/aldryn/aldryn-django/issues\" rel=\"nofollow\">issues</a> and <a href=\"https://github.com/aldryn/aldryn-django/pulls\" rel=\"nofollow\">pull requests</a>. Before submitting your pull request, please\nreview our guidelines for <a href=\"http://docs.aldryn.com/en/latest/reference/addons/index.html\" rel=\"nofollow\">Aldryn addons</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 2475928, "releases": {"1.6.11.0": [{"comment_text": "", "digests": {"md5": "1cbefcb0bf979662abbde69efd72aeff", "sha256": "a15173105576f34e772c4bca880663a1d2e1d21c1dee5bf7e5653ab1a11ba4b9"}, "downloads": -1, "filename": "aldryn-django-1.6.11.0.tar.gz", "has_sig": false, "md5_digest": "1cbefcb0bf979662abbde69efd72aeff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8245, "upload_time": "2015-08-27T23:59:46", "upload_time_iso_8601": "2015-08-27T23:59:46.306139Z", "url": "https://files.pythonhosted.org/packages/62/04/0c7c17f38ff821874e12919b84d620dabe9a3ead590be42b8e553d3361fb/aldryn-django-1.6.11.0.tar.gz", "yanked": false}], "1.6.11.1": [{"comment_text": "", "digests": {"md5": "865240f12230d6a29f0c4d0adcb16179", "sha256": "04adf58780e4b945d0d34260c92e27f5f347afcf4d116ef9996a5d496de1e0cb"}, "downloads": -1, "filename": "aldryn-django-1.6.11.1.tar.gz", "has_sig": false, "md5_digest": "865240f12230d6a29f0c4d0adcb16179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8160, "upload_time": "2015-09-18T09:46:40", "upload_time_iso_8601": "2015-09-18T09:46:40.005288Z", "url": "https://files.pythonhosted.org/packages/d7/4f/77ba2fe9e2cf6090db23e0d2095c60add4089ac9d6a0488c12b63ec68f9a/aldryn-django-1.6.11.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "865240f12230d6a29f0c4d0adcb16179", "sha256": "04adf58780e4b945d0d34260c92e27f5f347afcf4d116ef9996a5d496de1e0cb"}, "downloads": -1, "filename": "aldryn-django-1.6.11.1.tar.gz", "has_sig": false, "md5_digest": "865240f12230d6a29f0c4d0adcb16179", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8160, "upload_time": "2015-09-18T09:46:40", "upload_time_iso_8601": "2015-09-18T09:46:40.005288Z", "url": "https://files.pythonhosted.org/packages/d7/4f/77ba2fe9e2cf6090db23e0d2095c60add4089ac9d6a0488c12b63ec68f9a/aldryn-django-1.6.11.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:19:59 2020"}