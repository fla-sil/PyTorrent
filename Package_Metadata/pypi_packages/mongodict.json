{"info": {"author": "\u00c1lvaro Justen", "author_email": "alvarojusten@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.2", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "mongodict - MongoDB-backed Python dict-like interface\n=====================================================\n\nSo you are storing some key-values in a ``dict`` but your data became huge than\nyour memory or you want to persist it on the disk? Then `mongodict\n<https://github.com/turicas/mongodict>`_ is for\nyou!\n\nAs it uses `MongoDB <http://mongodb.org/>`_ to store the data, you get all cool\n`MongoDB <http://mongodb.org/>`_ things, like shardings and replicas. It uses\nthe `pickle` module available on Python standard library to\nserialize/deserialize data and store everything as `bson.Binary` in MongoDB.\nYou can also provide another codec (serializer/deserializer).\n\n`mongodict <https://github.com/turicas/mongodict>`_ is tested under\n`Python 2.7.5 <http://www.python.org/getit/releases/2.7/>`_ and\n`Python 3.3.2 <http://www.python.org/getit/releases/3.2/>`_.\n\n\nInstallation\n------------\n\nAs simple as::\n\n    pip install mongodict\n\n\nUsage\n-----\n\nAs it uses\n`collections.MutableMapping <http://docs.python.org/library/collections.html#collections.MutableMapping>`_\nas its base, you just need to change the line which creates your ``dict``.\nFor instace, just replace::\n\n    >>> my_dict = {}\n\nwith::\n\n    >>> from mongodict import MongoDict\n    >>> my_dict = MongoDict(host='localhost', port=27017, database='my_dict',\n                            collection='store')\n\nand then use it like a normal ``dict``::\n\n    >>> my_dict['python'] = 'rules'\n    >>> print my_dict['python']\n    rules\n    >>> del my_dict['python']\n    >>> print my_dict['python']\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      File \"mongodict.py\", line 82, in __getitem__\n        raise KeyError(key)\n    KeyError: u'python'\n    >>> my_dict['spam'] = 'eggs'\n    >>> my_dict['ham'] = 'damn'\n    >>> for key, value in my_dict.items():\n    ...    print '{} = {}'.format(key, value)\n    ...\n    spam = eggs\n    ham = damn\n\nIf you want to use another codec, you should pass serialize and deserialize\nfunctions to the class during the initialization. For example, to use JSON::\n\n    >>> import json\n    >>> json_dict = MongoDict(host='localhost', port=27017,\n                              database='json_dict', collection='store',\n                              codec=(json.dumps, json.loads))\n    >>> # use json_dict as usual\n\nEnjoy! :-)\n\n.. NOTE::\n   There is no kind of in-memory cache, so all key lookups will be translated\n   in a `MongoDB <http://mongodb.org/>`_ query but as\n   `MongoDB <http://mongodb.org/>`_'s server put everything it can in memory,\n   probably it'll not be a problem (if your working set is always entire in\n   memory).\n\n\nAuthentication\n--------------\n\nIf you want to use MongoDB's authentication to the database ``MongoDict`` is\nconnecting to, you just need to provide an ``auth`` parameter, as in this\nexample::\n\n\n    from mongodict import MongoDict\n\n\n    my_dict = MongoDict(host='localhost', port=27017, database='mydb',\n                        collection='mongodict',\n                        auth=('my username', 'my password'))\n\n\n\nWhy not Redis?\n--------------\n\n`Redis <http://redis.io/>`_ is \"remote directory server\" - it's a great piece\nof software and can do the job if all your data fit on memory. By other side,\n`MongoDB <http://mongodb.org/>`_ already have mature sharding and replica set\nfeatures. So, if you need to store lots of key-value pairs that don't fit on\nmemory, `mongodict <https://github.com/turicas/mongodict>`_ can solve your\nproblem.\n\n.. NOTE::\n   `mongodict <https://github.com/turicas/mongodict>`_ does not have the same\n   API other key-value software have\n   (like `memcached <http://memcached.org/>`_). Some features are missing to\n   compete directly with these kind of software (by now we have only the\n   ``dict``-like behaviour), but I have plans to add it soon.\n\n\nContributing\n------------\n\n- This software uses `Semantic Versioning <http://semver.org/>`_.\n- This software uses\n  `Test-Driven Development <http://en.wikipedia.org/wiki/Test-driven_development>`_.\n\nYou can run the tests either with or without\n`tox <http://tox.readthedocs.org/en/latest/index.html>`_.\n\nWithout tox\n~~~~~~~~~~~\n\nThis is the simplest approach: you'll test only for one Python version. To do\nit, just execute::\n\n    mkvirtualenv --no-site-packages mongodict-without-tox\n    pip install -r requirements/develop.txt\n    make test\n\n\nWith tox\n~~~~~~~~\n\nWith `tox <http://tox.readthedocs.org/en/latest/index.html>`_ you can test for\nmore than one Python version (currently for 2.7 and 3.2). You just need to\ncreate a virtualenv, install and run it::\n\n    mkvirtualenv --no-site-packages tox-for-mongodict\n    pip install tox\n    tox\n\n`tox <http://tox.readthedocs.org/en/latest/index.html>`_ will create one\nvirtualenv for each Python version, install requirements and then run the tests\nfor each of them. Note that you need the python binaries available in your\nsystem (2.7 and 3.2) to run the tests.\n\n\nAuthor\n------\n\nThis software was written and is maintained by\n`\u00c1lvaro Justen (aka Turicas) <https://github.com/turicas>`_.\nPlease contact me at ``alvarojusten`` *at* ``gmail`` *dot* ``com``.\n\n\nLicense\n-------\n\nIt's licensed under `GPL version 3 <https://www.gnu.org/licenses/gpl-3.0.html>`_.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/turicas/mongodict/", "keywords": "key-value,database,mongodb,dictionary", "license": "GPL3", "maintainer": null, "maintainer_email": null, "name": "mongodict", "package_url": "https://pypi.org/project/mongodict/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mongodict/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/turicas/mongodict/"}, "release_url": "https://pypi.org/project/mongodict/0.3.1/", "requires_dist": null, "requires_python": null, "summary": "MongoDB-backed Python dict-like interface", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>So you are storing some key-values in a <tt>dict</tt> but your data became huge than\nyour memory or you want to persist it on the disk? Then <a href=\"https://github.com/turicas/mongodict\" rel=\"nofollow\">mongodict</a> is for\nyou!</p>\n<p>As it uses <a href=\"http://mongodb.org/\" rel=\"nofollow\">MongoDB</a> to store the data, you get all cool\n<a href=\"http://mongodb.org/\" rel=\"nofollow\">MongoDB</a> things, like shardings and replicas. It uses\nthe <cite>pickle</cite> module available on Python standard library to\nserialize/deserialize data and store everything as <cite>bson.Binary</cite> in MongoDB.\nYou can also provide another codec (serializer/deserializer).</p>\n<p><a href=\"https://github.com/turicas/mongodict\" rel=\"nofollow\">mongodict</a> is tested under\n<a href=\"http://www.python.org/getit/releases/2.7/\" rel=\"nofollow\">Python 2.7.5</a> and\n<a href=\"http://www.python.org/getit/releases/3.2/\" rel=\"nofollow\">Python 3.3.2</a>.</p>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>As simple as:</p>\n<pre>pip install mongodict\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>As it uses\n<a href=\"http://docs.python.org/library/collections.html#collections.MutableMapping\" rel=\"nofollow\">collections.MutableMapping</a>\nas its base, you just need to change the line which creates your <tt>dict</tt>.\nFor instace, just replace:</p>\n<pre>&gt;&gt;&gt; my_dict = {}\n</pre>\n<p>with:</p>\n<pre>&gt;&gt;&gt; from mongodict import MongoDict\n&gt;&gt;&gt; my_dict = MongoDict(host='localhost', port=27017, database='my_dict',\n                        collection='store')\n</pre>\n<p>and then use it like a normal <tt>dict</tt>:</p>\n<pre>&gt;&gt;&gt; my_dict['python'] = 'rules'\n&gt;&gt;&gt; print my_dict['python']\nrules\n&gt;&gt;&gt; del my_dict['python']\n&gt;&gt;&gt; print my_dict['python']\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"mongodict.py\", line 82, in __getitem__\n    raise KeyError(key)\nKeyError: u'python'\n&gt;&gt;&gt; my_dict['spam'] = 'eggs'\n&gt;&gt;&gt; my_dict['ham'] = 'damn'\n&gt;&gt;&gt; for key, value in my_dict.items():\n...    print '{} = {}'.format(key, value)\n...\nspam = eggs\nham = damn\n</pre>\n<p>If you want to use another codec, you should pass serialize and deserialize\nfunctions to the class during the initialization. For example, to use JSON:</p>\n<pre>&gt;&gt;&gt; import json\n&gt;&gt;&gt; json_dict = MongoDict(host='localhost', port=27017,\n                          database='json_dict', collection='store',\n                          codec=(json.dumps, json.loads))\n&gt;&gt;&gt; # use json_dict as usual\n</pre>\n<p>Enjoy! :-)</p>\n<div>\n<p>Note</p>\n<p>There is no kind of in-memory cache, so all key lookups will be translated\nin a <a href=\"http://mongodb.org/\" rel=\"nofollow\">MongoDB</a> query but as\n<a href=\"http://mongodb.org/\" rel=\"nofollow\">MongoDB</a>\u2019s server put everything it can in memory,\nprobably it\u2019ll not be a problem (if your working set is always entire in\nmemory).</p>\n</div>\n</div>\n<div id=\"authentication\">\n<h2>Authentication</h2>\n<p>If you want to use MongoDB\u2019s authentication to the database <tt>MongoDict</tt> is\nconnecting to, you just need to provide an <tt>auth</tt> parameter, as in this\nexample:</p>\n<pre>from mongodict import MongoDict\n\n\nmy_dict = MongoDict(host='localhost', port=27017, database='mydb',\n                    collection='mongodict',\n                    auth=('my username', 'my password'))\n</pre>\n</div>\n<div id=\"why-not-redis\">\n<h2>Why not Redis?</h2>\n<p><a href=\"http://redis.io/\" rel=\"nofollow\">Redis</a> is \u201cremote directory server\u201d - it\u2019s a great piece\nof software and can do the job if all your data fit on memory. By other side,\n<a href=\"http://mongodb.org/\" rel=\"nofollow\">MongoDB</a> already have mature sharding and replica set\nfeatures. So, if you need to store lots of key-value pairs that don\u2019t fit on\nmemory, <a href=\"https://github.com/turicas/mongodict\" rel=\"nofollow\">mongodict</a> can solve your\nproblem.</p>\n<div>\n<p>Note</p>\n<p><a href=\"https://github.com/turicas/mongodict\" rel=\"nofollow\">mongodict</a> does not have the same\nAPI other key-value software have\n(like <a href=\"http://memcached.org/\" rel=\"nofollow\">memcached</a>). Some features are missing to\ncompete directly with these kind of software (by now we have only the\n<tt>dict</tt>-like behaviour), but I have plans to add it soon.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ul>\n<li>This software uses <a href=\"http://semver.org/\" rel=\"nofollow\">Semantic Versioning</a>.</li>\n<li>This software uses\n<a href=\"http://en.wikipedia.org/wiki/Test-driven_development\" rel=\"nofollow\">Test-Driven Development</a>.</li>\n</ul>\n<p>You can run the tests either with or without\n<a href=\"http://tox.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">tox</a>.</p>\n<div id=\"without-tox\">\n<h3>Without tox</h3>\n<p>This is the simplest approach: you\u2019ll test only for one Python version. To do\nit, just execute:</p>\n<pre>mkvirtualenv --no-site-packages mongodict-without-tox\npip install -r requirements/develop.txt\nmake test\n</pre>\n</div>\n<div id=\"with-tox\">\n<h3>With tox</h3>\n<p>With <a href=\"http://tox.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">tox</a> you can test for\nmore than one Python version (currently for 2.7 and 3.2). You just need to\ncreate a virtualenv, install and run it:</p>\n<pre>mkvirtualenv --no-site-packages tox-for-mongodict\npip install tox\ntox\n</pre>\n<p><a href=\"http://tox.readthedocs.org/en/latest/index.html\" rel=\"nofollow\">tox</a> will create one\nvirtualenv for each Python version, install requirements and then run the tests\nfor each of them. Note that you need the python binaries available in your\nsystem (2.7 and 3.2) to run the tests.</p>\n</div>\n</div>\n<div id=\"author\">\n<h2>Author</h2>\n<p>This software was written and is maintained by\n<a href=\"https://github.com/turicas\" rel=\"nofollow\">\u00c1lvaro Justen (aka Turicas)</a>.\nPlease contact me at <tt>alvarojusten</tt> <em>at</em> <tt>gmail</tt> <em>dot</em> <tt>com</tt>.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>It\u2019s licensed under <a href=\"https://www.gnu.org/licenses/gpl-3.0.html\" rel=\"nofollow\">GPL version 3</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1001732, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "7822cfe0339737a0552449782c811e4c", "sha256": "1d53574b95baa69fe05fb2cc6cdbc931a039ea275cf7d0faa509e0eeb876bf7e"}, "downloads": -1, "filename": "mongodict-0.1.0.tar.gz", "has_sig": false, "md5_digest": "7822cfe0339737a0552449782c811e4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14657, "upload_time": "2012-07-18T11:52:42", "upload_time_iso_8601": "2012-07-18T11:52:42.062637Z", "url": "https://files.pythonhosted.org/packages/5c/c2/cf37dd827b8941daa978605003439f78be22cc7d3ef89da37742e453fa37/mongodict-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "2a57e38b758ab5dcbb4b19b56901cfd5", "sha256": "b7742773b9bd76227756294f97ecccee6399c14bd90330e22f90a99f9da44d04"}, "downloads": -1, "filename": "mongodict-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2a57e38b758ab5dcbb4b19b56901cfd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15054, "upload_time": "2012-07-18T16:07:03", "upload_time_iso_8601": "2012-07-18T16:07:03.081943Z", "url": "https://files.pythonhosted.org/packages/8e/2d/da52a1956d5acfcab331db416d1a21c5dbb1576a97436ca0d28e4a1c5317/mongodict-0.1.1.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "71b29c6cf74dfaa77b053b3662fe5bcb", "sha256": "fbb283def8fe11696dac0815221420919226e49c4043812252c78f8c25b97087"}, "downloads": -1, "filename": "mongodict-0.2.0.tar.gz", "has_sig": false, "md5_digest": "71b29c6cf74dfaa77b053b3662fe5bcb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15419, "upload_time": "2012-08-06T11:22:53", "upload_time_iso_8601": "2012-08-06T11:22:53.227499Z", "url": "https://files.pythonhosted.org/packages/b7/cf/5549d722536f005e645dfb4e5154d59978ac8904f56058c46830572fa111/mongodict-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "d11b78ac3c5e8f7723dc305ec7fcd69e", "sha256": "b215113a44b5957cf461c860bd113255c3cef6b422eb39c4a59b29562aef7a70"}, "downloads": -1, "filename": "mongodict-0.2.1.tar.gz", "has_sig": false, "md5_digest": "d11b78ac3c5e8f7723dc305ec7fcd69e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15592, "upload_time": "2012-12-18T23:52:17", "upload_time_iso_8601": "2012-12-18T23:52:17.184027Z", "url": "https://files.pythonhosted.org/packages/6c/8a/b1bd5b90a6234441ab8f1b3fe6152a5b37a2610a4a9d29ae2bc19536b8ca/mongodict-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "58a83d9136a5f06b80a63011913304c4", "sha256": "ff5867db78c9f79bd4f95e04ae6943bb93b7d194e45220697207e0e7378d419e"}, "downloads": -1, "filename": "mongodict-0.3.0.tar.gz", "has_sig": false, "md5_digest": "58a83d9136a5f06b80a63011913304c4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16079, "upload_time": "2013-05-22T14:05:34", "upload_time_iso_8601": "2013-05-22T14:05:34.612459Z", "url": "https://files.pythonhosted.org/packages/fa/2c/1a7ccc194f2ffc49dc8b2e9087db3e2abd034c77f6fe10e652bbe8df4d86/mongodict-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "57f8bb308156c1891d790bb107eb4f9d", "sha256": "9c66d65fd1cd3e1e03fed9d5c11c6e3603a10b2a60c9dbd703f58ca15d55655b"}, "downloads": -1, "filename": "mongodict-0.3.1.tar.gz", "has_sig": false, "md5_digest": "57f8bb308156c1891d790bb107eb4f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18313, "upload_time": "2014-02-17T03:53:29", "upload_time_iso_8601": "2014-02-17T03:53:29.992185Z", "url": "https://files.pythonhosted.org/packages/aa/27/64b9b903ed125a4c26dd9fc28921e90bfd3eca0bdce91ce8faac502e61e7/mongodict-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "57f8bb308156c1891d790bb107eb4f9d", "sha256": "9c66d65fd1cd3e1e03fed9d5c11c6e3603a10b2a60c9dbd703f58ca15d55655b"}, "downloads": -1, "filename": "mongodict-0.3.1.tar.gz", "has_sig": false, "md5_digest": "57f8bb308156c1891d790bb107eb4f9d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18313, "upload_time": "2014-02-17T03:53:29", "upload_time_iso_8601": "2014-02-17T03:53:29.992185Z", "url": "https://files.pythonhosted.org/packages/aa/27/64b9b903ed125a4c26dd9fc28921e90bfd3eca0bdce91ce8faac502e61e7/mongodict-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:19 2020"}