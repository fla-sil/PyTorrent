{"info": {"author": "Lorenz Leitner", "author_email": "lrnz.ltnr@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.8"], "description": "# spmf-py\nPython Wrapper for SPMF \ud83d\udc0d \ud83c\udf81\n\n## Information\nThe [SPMF](http://www.philippe-fournier-viger.com/spmf) [[1](https://github.com/LoLei/spmf-py#bibliography)] data mining Java library usable in Python.  \n\nEssentially, this module calls the Java command line tool of SPMF, passes the user arguments to it, and parses the output.  \nIn addition, transformation of the data to Pandas DataFrame and CSV is possible.\n\nIn theory, all algorithms featured in SPMF are callable. Nothing is hardcoded, the desired algorithm and its parameters need to be perused in the [SPMF documentation](http://www.philippe-fournier-viger.com/spmf/index.php?link=documentation.php).\n\n## Installation\n[`pip install spmf`](https://pypi.org/project/spmf/)\n\n## Usage\nExample:  \n```python\nfrom spmf import Spmf\n\nspmf = Spmf(\"PrefixSpan\", input_filename=\"contextPrefixSpan.txt\",\n            output_filename=\"output.txt\", arguments=[0.7, 5])\nspmf.run()\nprint(spmf.to_pandas_dataframe(pickle=True))\nspmf.to_csv(\"output.csv\")\n```\n\nOutput:\n```\n=============  PREFIXSPAN 0.99-2016 - STATISTICS =============\n Total time ~ 2 ms\n Frequent sequences count : 14\n Max memory (mb) : 6.487663269042969\n minsup = 3 sequences.\n Pattern count : 14\n===================================================\n\n      pattern sup\n0         [1]   4\n1      [1, 2]   4\n2      [1, 3]   4\n3   [1, 3, 2]   3\n4   [1, 3, 3]   3\n5         [2]   4\n6      [2, 3]   3\n7         [3]   4\n8      [3, 2]   3\n9      [3, 3]   3\n10        [4]   3\n11     [4, 3]   3\n12        [5]   3\n13        [6]   3\n```\n\nThe usage is similar to the one described in the SPMF [documentation](http://www.philippe-fournier-viger.com/spmf/index.php?link=documentation.php).  \nFor all Python parameters, see the [Spmf class](https://github.com/LoLei/spmf-py/blob/master/spmf/__init__.py).  \n\n### SPMF Arguments\nThe `arguments` parameter are the arguments that are passed to SPMF and depend on the chosen algorithm. SPMF handles optional parameters as an ordered list. As there are no named parameters for the algorithms, if e.g. only the first and the last parameter of an algorithm are to be used, the ones in between must be filled with `\"\"` blank strings.  \nFor advanced usage examples, see [`examples`](https://github.com/LoLei/spmf-py/tree/master/examples).\n\n### SPMF Executable\nDownload it from the [SPMF Website](http://www.philippe-fournier-viger.com/spmf/index.php?link=download.php).  \nIt is assumed that the SPMF binary `spmf.jar` is located in the same directory as `spmf-py`. If it is not, either symlink it, or use the `spmf_bin_location_dir` parameter.\n\n### Input Formats\nEither use an input file as specified by SPMF, or use one of the in-line formats as seen in [`examples`](https://github.com/LoLei/spmf-py/tree/master/examples).\n\n## Background\nWhy? If you're in a Python pipeline, like a Jupyter Notebook, it might be cumbersome to use Java as an intermediate step. Using `spmf-py` you can stay in your pipeline as though Java is never used at all.\n\n## Bibliography\n```\nFournier-Viger, P., Lin, C.W., Gomariz, A., Gueniche, T., Soltani, A., Deng, Z., Lam, H. T. (2016).  \nThe SPMF Open-Source Data Mining Library Version 2.  \nProc. 19th European Conference on Principles of Data Mining and Knowledge Discovery (PKDD 2016) Part III, Springer LNCS 9853,  pp. 36-40.\n```\n\n## Disclaimer\nThis module has not been tested for all 184 algorithms offered in SPMF. Calling them and writing to the output file should be possible for all. Output parsing however should work for those that have outputs like the sequential pattern mining algorithms. It was not tested it with other types, some adaption of the output parsing might be necessary. If something is not working, submit an issue or create a PR yourself!\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lolei/spmf-py", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "spmf", "package_url": "https://pypi.org/project/spmf/", "platform": "", "project_url": "https://pypi.org/project/spmf/", "project_urls": {"Homepage": "https://github.com/lolei/spmf-py"}, "release_url": "https://pypi.org/project/spmf/1.1/", "requires_dist": null, "requires_python": ">=3", "summary": "Python Wrapper for SPMF", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>spmf-py</h1>\n<p>Python Wrapper for SPMF \ud83d\udc0d \ud83c\udf81</p>\n<h2>Information</h2>\n<p>The <a href=\"http://www.philippe-fournier-viger.com/spmf\" rel=\"nofollow\">SPMF</a> [<a href=\"https://github.com/LoLei/spmf-py#bibliography\" rel=\"nofollow\">1</a>] data mining Java library usable in Python.</p>\n<p>Essentially, this module calls the Java command line tool of SPMF, passes the user arguments to it, and parses the output.<br>\nIn addition, transformation of the data to Pandas DataFrame and CSV is possible.</p>\n<p>In theory, all algorithms featured in SPMF are callable. Nothing is hardcoded, the desired algorithm and its parameters need to be perused in the <a href=\"http://www.philippe-fournier-viger.com/spmf/index.php?link=documentation.php\" rel=\"nofollow\">SPMF documentation</a>.</p>\n<h2>Installation</h2>\n<p><a href=\"https://pypi.org/project/spmf/\" rel=\"nofollow\"><code>pip install spmf</code></a></p>\n<h2>Usage</h2>\n<p>Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">spmf</span> <span class=\"kn\">import</span> <span class=\"n\">Spmf</span>\n\n<span class=\"n\">spmf</span> <span class=\"o\">=</span> <span class=\"n\">Spmf</span><span class=\"p\">(</span><span class=\"s2\">\"PrefixSpan\"</span><span class=\"p\">,</span> <span class=\"n\">input_filename</span><span class=\"o\">=</span><span class=\"s2\">\"contextPrefixSpan.txt\"</span><span class=\"p\">,</span>\n            <span class=\"n\">output_filename</span><span class=\"o\">=</span><span class=\"s2\">\"output.txt\"</span><span class=\"p\">,</span> <span class=\"n\">arguments</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.7</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">])</span>\n<span class=\"n\">spmf</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">spmf</span><span class=\"o\">.</span><span class=\"n\">to_pandas_dataframe</span><span class=\"p\">(</span><span class=\"n\">pickle</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n<span class=\"n\">spmf</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s2\">\"output.csv\"</span><span class=\"p\">)</span>\n</pre>\n<p>Output:</p>\n<pre><code>=============  PREFIXSPAN 0.99-2016 - STATISTICS =============\n Total time ~ 2 ms\n Frequent sequences count : 14\n Max memory (mb) : 6.487663269042969\n minsup = 3 sequences.\n Pattern count : 14\n===================================================\n\n      pattern sup\n0         [1]   4\n1      [1, 2]   4\n2      [1, 3]   4\n3   [1, 3, 2]   3\n4   [1, 3, 3]   3\n5         [2]   4\n6      [2, 3]   3\n7         [3]   4\n8      [3, 2]   3\n9      [3, 3]   3\n10        [4]   3\n11     [4, 3]   3\n12        [5]   3\n13        [6]   3\n</code></pre>\n<p>The usage is similar to the one described in the SPMF <a href=\"http://www.philippe-fournier-viger.com/spmf/index.php?link=documentation.php\" rel=\"nofollow\">documentation</a>.<br>\nFor all Python parameters, see the <a href=\"https://github.com/LoLei/spmf-py/blob/master/spmf/__init__.py\" rel=\"nofollow\">Spmf class</a>.</p>\n<h3>SPMF Arguments</h3>\n<p>The <code>arguments</code> parameter are the arguments that are passed to SPMF and depend on the chosen algorithm. SPMF handles optional parameters as an ordered list. As there are no named parameters for the algorithms, if e.g. only the first and the last parameter of an algorithm are to be used, the ones in between must be filled with <code>\"\"</code> blank strings.<br>\nFor advanced usage examples, see <a href=\"https://github.com/LoLei/spmf-py/tree/master/examples\" rel=\"nofollow\"><code>examples</code></a>.</p>\n<h3>SPMF Executable</h3>\n<p>Download it from the <a href=\"http://www.philippe-fournier-viger.com/spmf/index.php?link=download.php\" rel=\"nofollow\">SPMF Website</a>.<br>\nIt is assumed that the SPMF binary <code>spmf.jar</code> is located in the same directory as <code>spmf-py</code>. If it is not, either symlink it, or use the <code>spmf_bin_location_dir</code> parameter.</p>\n<h3>Input Formats</h3>\n<p>Either use an input file as specified by SPMF, or use one of the in-line formats as seen in <a href=\"https://github.com/LoLei/spmf-py/tree/master/examples\" rel=\"nofollow\"><code>examples</code></a>.</p>\n<h2>Background</h2>\n<p>Why? If you're in a Python pipeline, like a Jupyter Notebook, it might be cumbersome to use Java as an intermediate step. Using <code>spmf-py</code> you can stay in your pipeline as though Java is never used at all.</p>\n<h2>Bibliography</h2>\n<pre><code>Fournier-Viger, P., Lin, C.W., Gomariz, A., Gueniche, T., Soltani, A., Deng, Z., Lam, H. T. (2016).  \nThe SPMF Open-Source Data Mining Library Version 2.  \nProc. 19th European Conference on Principles of Data Mining and Knowledge Discovery (PKDD 2016) Part III, Springer LNCS 9853,  pp. 36-40.\n</code></pre>\n<h2>Disclaimer</h2>\n<p>This module has not been tested for all 184 algorithms offered in SPMF. Calling them and writing to the output file should be possible for all. Output parsing however should work for those that have outputs like the sequential pattern mining algorithms. It was not tested it with other types, some adaption of the output parsing might be necessary. If something is not working, submit an issue or create a PR yourself!</p>\n\n          </div>"}, "last_serial": 7093847, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "812de704f6ba9407bb8db26bd5566a12", "sha256": "c5ae82350fe91907136d67e07a29a4f90bebce2572f62c6366536369ab5686c0"}, "downloads": -1, "filename": "spmf-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "812de704f6ba9407bb8db26bd5566a12", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 16942, "upload_time": "2020-04-22T15:04:44", "upload_time_iso_8601": "2020-04-22T15:04:44.025841Z", "url": "https://files.pythonhosted.org/packages/46/89/5bbbb593cb056f4ae5c899d8858f73e3bbd8bcdf7918ca0943fbe097f510/spmf-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0380a545491eb10adec9e94212ec97d", "sha256": "7b2cb5ece49a4e19f385c028addf71ba51d6746a22e39df95cb7b03bc88528d9"}, "downloads": -1, "filename": "spmf-1.0.tar.gz", "has_sig": false, "md5_digest": "d0380a545491eb10adec9e94212ec97d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4693, "upload_time": "2020-04-22T15:04:46", "upload_time_iso_8601": "2020-04-22T15:04:46.764087Z", "url": "https://files.pythonhosted.org/packages/29/ec/dad07f58250b6784e24689d33e702e019fb4a06dd1f21808f6dd69dc2e54/spmf-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "612cb6f52721a6dbd5c1c36994f17034", "sha256": "c6d59e82e1a862ba1815b01e3be2353f22fdc65435b6f53690ec88583f851c79"}, "downloads": -1, "filename": "spmf-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "612cb6f52721a6dbd5c1c36994f17034", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17125, "upload_time": "2020-04-24T15:21:56", "upload_time_iso_8601": "2020-04-24T15:21:56.169397Z", "url": "https://files.pythonhosted.org/packages/4c/45/5a95e576d8ac4357cb4076ad8f302a56ca302aa197f12295a90b88ac14d3/spmf-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7533031a418271dbbe2af3d4fcf741b8", "sha256": "dee670484dbeeedb7b8ef35bba7ce2e6c73ba87da10fd1173dc3d9e385ca7121"}, "downloads": -1, "filename": "spmf-1.1.tar.gz", "has_sig": false, "md5_digest": "7533031a418271dbbe2af3d4fcf741b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4925, "upload_time": "2020-04-24T15:21:58", "upload_time_iso_8601": "2020-04-24T15:21:58.346892Z", "url": "https://files.pythonhosted.org/packages/2e/eb/702e849ffb9a4098ae0b9916516d9bcefabf08996ed73b0e039fb0a10ae9/spmf-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "612cb6f52721a6dbd5c1c36994f17034", "sha256": "c6d59e82e1a862ba1815b01e3be2353f22fdc65435b6f53690ec88583f851c79"}, "downloads": -1, "filename": "spmf-1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "612cb6f52721a6dbd5c1c36994f17034", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 17125, "upload_time": "2020-04-24T15:21:56", "upload_time_iso_8601": "2020-04-24T15:21:56.169397Z", "url": "https://files.pythonhosted.org/packages/4c/45/5a95e576d8ac4357cb4076ad8f302a56ca302aa197f12295a90b88ac14d3/spmf-1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7533031a418271dbbe2af3d4fcf741b8", "sha256": "dee670484dbeeedb7b8ef35bba7ce2e6c73ba87da10fd1173dc3d9e385ca7121"}, "downloads": -1, "filename": "spmf-1.1.tar.gz", "has_sig": false, "md5_digest": "7533031a418271dbbe2af3d4fcf741b8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4925, "upload_time": "2020-04-24T15:21:58", "upload_time_iso_8601": "2020-04-24T15:21:58.346892Z", "url": "https://files.pythonhosted.org/packages/2e/eb/702e849ffb9a4098ae0b9916516d9bcefabf08996ed73b0e039fb0a10ae9/spmf-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:38 2020"}