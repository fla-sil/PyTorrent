{"info": {"author": "Wirepas Ltd", "author_email": "opensource@wirepas.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries"], "description": "# Backend-client\n\n[![Open in Gitpod](https://gitpod.io/button/open-in-gitpod.svg)](https://gitpod.io/#https://github.com/wirepas/backend-client)\n\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/bf0c23237cf04ea6ac48e98cf10b6a7b)](https://www.codacy.com/manual/wirepas/backend-client?utm_source=github.com&utm_medium=referral&utm_content=wirepas/backend-client&utm_campaign=Badge_Grade) [![Build Status](https://travis-ci.com/wirepas/backend-apis.svg?branch=master)](https://travis-ci.com/wirepas/backend-client)  [![Documentation Status](https://readthedocs.org/projects/backend-client/badge/?version=latest)](https://backend-client.readthedocs.io/en/latest/?badge=latest) [![PyPi](https://img.shields.io/pypi/v/wirepas-backend-client.svg)](https://pypi.org/project/wirepas-backend-client/)\n\n<!-- MarkdownTOC levels=\"1,2,3\" autolink=\"true\"  style=\"ordered\"  -->\n\n1. [Introduction](#introduction)\n1. [Installation](#installation)\n    1. [Host dependencies](#host-dependencies)\n    1. [Setting up a Python virtual environment](#setting-up-a-python-virtual-environment)\n    1. [Installing from PyPi](#installing-from-pypi)\n    1. [Installing from Github](#installing-from-github)\n1. [Entrypoints](#entrypoints)\n    1. [Gateway command line interface](#gateway-command-line-interface)\n    1. [WPE Viewer](#wpe-viewer)\n    1. [WNT Viewer](#wnt-viewer)\n    1. [Provisioning server](#provisioning-server)\n1. [Framework](#framework)\n    1. [Structure](#structure)\n    1. [Examples](#examples)\n1. [Logging to fluentd](#logging-to-fluentd)\n1. [Building and running over Docker](#building-and-running-over-docker)\n    1. [Dockerhub](#dockerhub)\n    1. [Running with docker](#running-with-docker)\n    1. [Running with compose](#running-with-compose)\n    1. [Building the image locally](#building-the-image-locally)\n1. [Source documentation](#source-documentation)\n1. [Contributing](#contributing)\n1. [License](#license)\n\n<!-- /MarkdownTOC -->\n\n## Introduction\n\nThe Backend Client is a tool to serve as a decoder and a test framework\nwhere you can extend the existing interfaces to develop your own test cases.\nInteractions with\na [gateway][wirepas_gateway] must be compliant with the Wirepas\nBackend to Gateway API.\n\nIn addition to the interaction with the Backend to Gateway Public API,\nthe Backend Client has also support for Wirepas Positioning Engine and Wirepas\nNetwork Tool. Support for these tools is still work in progress\n(see [milestones][backend_client_gh_milestones] and [projects][backend_client_gh_projects]).\nHowever, you can already benefit from existing\nentrypoints to help you capture data and debug your\nintegration (see [entrypoints](#entrypoints)).\n\nFigure 1 illustrates the horizon where Backend Client is located.\n\n![Architecture overview][here_img_overview]\n\n**Figure 1** - Backend Client role in the Wirepas ecosystem.\n\n## Installation\n\nThe Backend Client is written in python and it requires a valid MQTT\nbroker target to connect to, WNT or WPE credentials.\n\nIf you need help installing a MQTT broker or auxiliary software please\nrefer to our tutorials repository.\n\n### Host dependencies\n\nThe main requirements of Backend Client are:\n\n-   Python 3.7\n-   Pip (we recommend the latest available)\n-   Linux system\n\nCertain Backend Client's dependencies must be\ncompiled locally upon installation,\nthus require the installation of specific development headers.\n\nUnder Debian, the extra requirements are met with:\n\n```bash\n    sudo apt-get install default-libmysqlclient-dev \\\n                         gcc \\\n                         python3-dev\n```\n\nPlease be advised that the name of such packages might change depending on your\nLinux system. Please refer to the Dockerfiles\nunder the [container folder][here_container] for more detailed information.\n\nWindows native environments are not supported. For help running the tool\nin Windows, please use the Linux subsystem, Docker or a virtual machine.\n\n### Setting up a Python virtual environment\n\nAs a recommendation, it is good practice to install and run the\napplication on a virtual python environment. Such approach avoids\npossible issues with conflicting package versions.\n\nWe recommend you use either [virtualenv][virtualenv] or [pipenv][pipenv]:\n\n```shell\n    pip3 install virtualenv\n    pip3 install pipenv\n```\n\nIf you choose to install and run the Backend Client inside a virtual\nenvironment, please activate the environment before moving with the next\nsteps.\n\nA virtual environment with virtualenv is created and activated\nwith:\n\n```shell\n    virtualenv wm_bcli_env\n    source wm_bcli_env/bin/activate\n```\n\nFor pipenv, a virtual environment is created and activated by:\n\n```shell\n    pipenv --three\n    pipenv shell\n```\n\nOnce you activate your environment your can safely install the python\npackage under it.\n\nFor more information please refer to the tool's webpage.\n\n### Installing from PyPi\n\nThe Backend Client is available from\n[PyPi][backend_client_pypi] and you can install the latest stable version\nwith:\n\n```shell\n    pip install wirepas-backend-client\n```\n\nIf you wish to install a particular version please see the release history\nfrom PyPi.\n\n### Installing from Github\n\nFirst of all, make sure to clone the repository using the https address.\n\nCheckout the\n[git tag that corresponds to the release version][backend_client_gh_releases]\nyou want to install and install the package with:\n\n```shell\n    pip3 install .\n```\n\nIf you leave your branch checked out to the top of master, it is likely that\nyou might run into a few issues. If you find them, please be so kind to\nraise them to us through an [issue or bug report][backend_client_gh_issues].\n\nIf you want to develop or patch a bug under your local environment,\nyou can install the package in development mode through:\n\n```shell\n    pip3 install -e .\n```\n\nWhen installed in development mode, changes to the source files will be\nimmediately visible.\n\n## Entrypoints\n\nAfter installation, the Backend Client exposes several\n[shell entrypoints][here_setup_entrypoints] that\ncan be run from any location in your system. This section describes their\nusage in more detail.\n\n### Gateway command line interface\n\nThe Backend Client exposes an interactive gateway command line which is\nmeant to interact with a gateway and sink pair connected to a given\nMQTT broker.\n\nTo start an interactive command line to interact with a broker located\nin your _localhost_ environment type:\n\n```shell\n    wm-gw-cli\n```\n\nConnecting to a remote server requires you to specify the values as an\nargument or by reading from a yaml settings file. To view all the\narguments, please issue the command:\n\n```shell\n    wm-gw-cli --help\n```\n\n#### Connecting to the MQTT broker\n\nFor the gateway client to function properly, it needs to establish a\nconnection to the same MQTT broker where one or multiple gateways\nare connected to.\n\nTo do so, let's assume the following MQTT credentials are saved in\n./examples/settings.yml:\n\n```yaml\n # examples/settings.yml\n # Example on how to set the MQTT credentials towards a local broker\n # with basic authentication\n mqtt_hostname: 127.0.0.1\n mqtt_password: password\n mqtt_username: username\n mqtt_port: 1883 # defaults to 8883 (secure port)\n mqtt_force_unsecure: True  # defaults to False (secure)\n```\n\nTo start the gateway against the MQTT broker specified in\n./examples/settings.yml, issue the following command:\n\n```shell\n    wm-gw-cli --settings ./examples/settings.yml\n```\n\nOnce the client launches, you will be greeted with:\n\n```shell\n    Welcome to the Wirepas Gateway Client cli!\n    Connecting to mosquittouser@127.0.0.1:1883 (unsecure: True)\n\n    Type help or ? to list commands\n\n    Type ! to escape shell commands\n    Use Arrow Up/Down to navigate your command history\n    Use CTRL-D or bye to exit\n\n    09:50.17 | wm-gw-cli >\n```\n\n#### Commands\n\nThe gateway client has a set of commands which you can view by typing ?\nin the client's shell:\n\n```shell\n    wm-gw-cli > ?\n\n    Documented commands (type help <topic>):\n    ========================================\n    EOF                     playback           set_loop_iterations\n    bye                     q                  set_loop_timeout\n    clear_offline_gateways  record             set_reply_greeting\n    eof                     scratchpad_status  set_sink\n    gateway_configuration   scratchpad_update  settings\n    gateways                scratchpad_upload  shell\n    help                    selection          sinks\n    list                    send_data          toggle_byte_print\n    ls                      set_app_config     toggle_pretty_print\n    networks                set_config         track_devices\n    nodes                   set_gateway        track_data_packets\n```\n\nFor each available command you can get more help if you type\n**?command** for example, to view how to send a datagram,\ntype in the shell:\n\n```shell\n    wm-gw-cli > ?send_data\n```\n\nWhen typing commands, you can use the up and down arrows to browse your\nshell history. There is also support for running host shell commands, by\nprefacing the command with **!**.\n\n#### Viewing connected devices\n\nUpon a MQTT connection, the Backend Client will start populating an\ninternal structure based on any incoming message. The topic is parsed\nand the information about the network devices are constructed.\n\nThe operation happens as messages are published from the network. It\nwill take time to build a full map of the network, which will be faster\ndepending on your network's packets per second.\n\nTo browse the devices, please type:\n\n```shell\n    wm-gw-cli > ls\n```\n\nThe output will show the devices that have been currently found. In case\nyou wish to view periodically which devices you have on your network,\ntype in the following command:\n\n```shell\n    wm-gw-cli > ?track_devices\n```\n\nTo exit the tracking loop, give a new line feed to the input stream and\nit will go back to the main command shell.\n\n#### Device settings\n\nWhen sending a downstream datagram, it is necessary to obey the\nBackend to Gateway API (WM-RM-128).\nFor that reason, it is mandatory to know what is the target\ngateway identifier and in most cases the sink id as well.\n\n##### Selecting the target gateway and sink\n\nThe wm-gw-cli provides an easy way to select the target gateway and sink. To\nmake your choice, please type the following commands:\n\n```shell\n    wm-gw-cli > set_gateway\n    0 : 2485378023427 : GatewayState.ONLINE\n    1 : 2485378023426 : GatewayState.OFFLINE\n    Please enter your gateway selection [0]: 0\n    wm-gw-cli > set_sink\n    0 : 3806491:2485378023427:sink0\n    Please enter your sink selection [0]: 0\n```\n\nWhen setting the gateway, the wm-gw-cli shows you the following information\n_object index : gateway id : state._ Similarly, for the sink, the wm-gw-cli\npresents the object _index : network : gateway id: sink id_.\n\nTo make your selection, type the desired object index and press enter.\n\nOnce your selection is done, your commands will target that gateway id\nand sink id. If you wish to view what your current selection is, use the\ncommand:\n\n```shell\n    wm-gw-cli > selection\n```\n\n:warning: **WARNING** :warning:\n\nThe wm-gw-cli prompt will update itself with the current gateway and sink id.\nThroughout this document, that information has been edited out of the\nprompt.\n\n##### Set app config\n\nSetting the app config requires that your gateway and sink are selected.\nIn case you have not done the selection prior to this command, the wm-gw-cli\nwill ask for them.\n\nWhen setting the app config, you are setting three values on the target\nsink:\n\n-   Diagnostic interval: the interval of network diagnostics (0, 30, 60,\n    300, 600, 1800)\n\n-   App config: A payload of a given size distributed to all associated\n    devices on the network;\n\n-   App config sequence: The sequence of the new app config (must be\n    higher than the current one - otherwise the app config won't take\n    effect, please refer to WM-RM-100).\n\nThe app config payload is given either as a set of binary data without\ntrailing 0x or as a utf8 data. For example, to send the\nbinary _0x10x40x5_ you should type _010405_.\nIf you simply want to have a text string on\nyour app config, you can for example type \"sink by the window\".\n\nAs an example, on the wm-gw-cli you would type:\n\n```shell\n    # Remember! no white spaces allowing in the payload!\n    # If you want to toggle byte string to hex string in the\n    # app_config_data, please see toggle_byte_print\n\n    wm-gw-cli > set_app_config 10 sink_by_the_window 30\n    answer <<\n        gw_id: 2485378023427\n        sink_id: sink0\n        req_id: 12079559850249952277\n        res: GatewayResultCode.GW_RES_OK\n        sink_id: sink0\n        current_ac_range_min: 2000\n        current_ac_range_max: 8000\n        min_ac: 2000\n        max_ac: 8000\n        max_mtu: 102\n        min_ch: 1\n        max_ch: 27\n        hw_magic: 3\n        stack_profile: 1\n        app_config_max_size: 80\n        are_keys_set: False\n        firmware_version: [3, 4, 37, 0]\n        node_role: 17\n        node_address: 4193520\n        network_address: 3806491\n        network_channel: 22\n        app_config_diag: 30\n        app_config_seq: 10\n        app_config_data:\n        b'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00'\n        channel_map: 286331153\n        started: True\n```\n\nThe answer will carry the gateway result and present you the new app\nconfig.\n\n##### Viewing gateway configuration\n\nThe wm-gw-cli allows you to see the current gateway configuration by typing:\n\n```shell\n    wm-gw-cli > gateway_configuration\n    requesting configuration for 2485378023427\n    answer <<\n        gw_id: 2485378023427\n        sink_id: None\n        req_ gw_id: 2485378023427\n        sink_id: sink0\n        req_id: 12079559850249952277\n        res: GatewayResultCode.GW_RES_OK\n        sink_id: sink0\n        current_ac_range_min: 2000\n        current_ac_range_max: 8000\n        min_ac: 2000\n        max_ac: 8000\n        max_mtu: 102\n        min_ch: 1\n        max_ch: 27\n        hw_magic: 3\n        stack_profile: 1\n        app_config_max_size: 80\n        are_keys_set: False\n        firmware_version: [3, 4, 37, 0]\n        node_role: 17\n        node_address: 4193520\n        network_address: 3806491\n        network_channel: 22\n        app_config_diag: 30\n        app_config_seq: 10\n        app_config_data:\n        b git'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00'\n        channel_map: 286331153\n        started: Trueid: 13018941017451207243\n        res: GatewayResultCode.GW_RES_OK\n        sink_id: sink0\n        node_role: 17\n        node_address: 4193520\n        network_address: 3806491\n        network_channel: 22\n        app_config_diag: 30\n        app_config_seq: 10\n        app_config_data:\n        b'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\n        \\x00\\x00\\x00'\n        channel_map: 286331153\n        started: True\n        current_ac_range_min: 2000\n        current_ac_range_max: 8000\n        min_ac: 2000\n        max_ac: 8000\n        max_mtu: 102\n        min_ch: 1\n        max_ch: 27\n        hw_magic: 3\n        stack_profile: 1\n        app_config_max_size: 80\n        are_keys_set: False\n        firmware_version: [3, 4, 37, 0]\n```\n\n##### Upload and process a scratchpad\n\nThe wm-gw-cli supports uploading a new scratchpad and asking the sink to take\nit into use. _A full network OTAP is not currently supported with the\nwm-gw-cli._ To initiate a network OTAP, you will have to send the\ncorresponding datagrams as mentioned in the remote API documentation.\n\nThe scratchpad commands are available as:\n\n-   scratchpad_status\n-   scratchpad_update\n-   scratchpad_upload\n\n:warning: **WARNING** :warning:\n\nAn incorrect scratchpad or an incorrect OTAP can damage your network\npermanently. Please use these commands with care.\n\n### WPE Viewer\n\nThe WPE viewer, _wm-wpe-viewer_, provides a simple way to check\nif a WPE service and consume location updates for a given network.\n\nThe WPE viewer entrypoint requires correct population of the following\nsettings:\n\n```yaml\n    #examples/settings.yml\n    wpe_service_definition: ./mywpesettings.json\n    wpe_network: 1092 #optional\n```\n\nThe _mywpesettings.json_ consists of a standard WPE client configuration\nfile. Please refer to WPE's official documentation for more details\non how to obtain and configure such file.\n\nThe wpe network is the network identifier on which your devices operate.\nIf you leave the parameter unset, the entrypoint will only perform a\nping to the backend specified under the json file.\n\n### WNT Viewer\n\nThe WNT viewer, _wm-wnt-viewer_, provides a simple way to check\nif a WNT service is reachable and to consume messages streamed by WNT on\nits realtime metadata websocket. These message contain network and node\ndiagnostic information. Please refer to WNT's public API documentation\nfor further information.\n\nThe WNT viewer entrypoint requires correct population of the following\nsettings:\n\n```yaml\n    #examples/settings.yml\n    wnt_username: \"wntuser\"\n    wnt_password: \"98asuyd907171ehjmasd\"\n    wnt_hostname: \"wnthost.com\"\n```\n\n### Provisioning server\nThe provisioning server, _wm-provisioning-server_, provides an example\nimplementation of the server side of the provisioning protocol. It must be used\nwith the _provisioning_joining_node_ application of the SDK. Please refer to\nthe provisioning reference manual for further information.\n\nThe Provisioning server entrypoint requires correct population of the following settings:\n\n```yaml\n    #examples/settings.yml\n    mqtt_hostname: mqtt_broker_address_or_ip\n    mqtt_password: password\n    mqtt_username: username\n    mqtt_port: 1883 # defaults to 8883 (secure port)\n    mqtt_force_unsecure: True  # defaults to False (secure)\n\n    provisioning_config: \"./myprovisioningconfig.yml\"\n```\n\nThe _myprovisioningconfig.yml_ consists of a list of authorized nodes and their\nassociated provisioning data.\n\n## Framework\n\nBesides the useful entrypoints to interact with Wirepas services, the goal of\nthe Backend Client is to provide you a framework around which you can\nbuild test cases to help you during your integration, research and\ndevelopment phases.\n\n### Structure\n\nThe framework or package is organized in several submodules:\n\n1.  [api][bcli_api]\n    1.  [api/influx][bcli_api_influx]\n    2.  [api/mqtt][bcli_api_mqtt]\n    3.  [api/mysql][bcli_api_mysql]\n    4.  [api/wnt][bcli_api_wnt]\n    5.  [api/wpe][bcli_api_wpe]\n2.  [management][bcli_management]\n3.  [mesh][bcli_mesh]\n    1.  [mesh/interfaces][bcli_mesh_interfaces]\n    2.  [mesh/interfaces/mqtt][bcli_mesh_interfaces_mqtt]\n    3.  [mesh/interfaces/remote_api][bcli_mesh_interfaces_remote_api]\n    4.  [mesh/interfaces/beacon_api][bcli_mesh_interfaces_beacon_api]\n4.  [messages][bcli_messages]\n5.  [test][bcli_test]\n6.  [tools][bcli_tools]\n7.  [cli][bcli_cli]\n\n#### API submodule\n\nThe [api submodule][bcli_api] contains the interfaces to connect\nand handle data coming in and out of Wirepas' services and other\n3rd party services such as databases\nand message brokers.\n\nEach API or interface folder is organized with connectors, handlers and\nsettings. The connectors file contains classes to establish a connection to\nthe target interface. The handlers contain classes to process streams of input\nand output data. The settings file allows for handling parameter\ntranslation from input to class arguments (if needed).\n\n#### Management submodule\n\nThe [management submodule][bcli_management] contains files regarding\nthe runtime management of the framework.\nIn particular the daemon which simplifies the multiprocess aspect\nof the Backend Client.\n\n#### Mesh submodule\n\nThe [mesh submodule][bcli_mesh] contains files related to how\ndevices are mapped within the Backend Client.\nIn addition to those, the submodule contains an interfaces\nfolder which contains specializations on how to handle specific Wirepas's\nAPIs, such as the [Gateway to Backend API][bcli_mesh_interfaces_mqtt].\n\n:pencil2: **NOTE** :pencil2:\n\nIn our redesign effort we are targeting to improve the device\nclasses and implement remote API support. Please follow the\nframework development for more up to date information.\n\n#### Messages submodule\n\nThe [messages submodule][bcli_messages] consists of a collection of\nmessage handler or decoders that handle translation of known APDUS,\nbased on the endpoint they are associated to.\n\n:pencil2: **NOTE** :pencil2:\n\nWe are considering moving the message handlers into the overarching Wirepas\nBackend APIs project. Please follow the framework development for more up to\ndate information.\n\n#### Test submodule\n\nThe [test submodule][bcli_test] contains classes to handle internal task\nscheduling and scripts to address particular mesh use cases.\n\n#### Tools submodule\n\nThe [tools submodule][bcli_tools] contains a collection of files\nwith classes that handle the acquisition of user\ninput, setup of the logging interface and general\npurpose utility methods and classes.\n\n#### Cli submodule\n\nCurrently still a [single file][wm_gw_cli], this upcoming submodule\nwill contain a re-factor of the gateway client to allow easier\ncustomization and construction of custom command line interfaces.\n\n### Examples\n\nTo better understand the framework inner-working and how you can extend it,\nwe recommend that you take a look at the examples\nwe have available in the [examples folder][examples]:\n\n-   [mqtt_viewer.py][examples_mqtt_viewer]: connects to a MQTT broker and\n    decodes on the fly any message that is known to the\n    framework (see [cookbook][wirepas_cookbook_viz] for usage example)\n\n-   [find_all_nodes.py][examples_find_all_nodes]: simple interaction with\n    the Gateway to Backend API that enumerates and prints outs discovered devices\n\n-   [influx_viewer.py][examples_influx_viewer]: run custom queries or\n    export date ranges from an influx database where WNT is storing data\n\n-   [settings.yml][example_settings]: an example of a yaml file that with\n    commented out settings\n\n-   [provisioning_config.yml][example_provisioning]: an example of a yaml file\n    for the provisioning server\n\nBackend Client's entrypoints also act as a good way to guide your development:\n\n-   [wm-gw-cli][wm_gw_cli]: code behind the gateway command line\n    interface that exemplifies how to build requests to the sink,\n    receive and send data packets\n\n-   [wm-wnt-viewer][wm_wnt]: example on how to consume data streamed\n    by a WNT backend\n\n-   [wm-wpe-viewer][wm_wpe]: example on how to consume data streamed\n    by a WPE backend\n\n-   [wm-provisioning-server][provisioning_server]: an example implementation\n    of the server side of the wirepas provisioning protocol\n\nFor an example on how to build use case test cases, please refer to\nthe [kpi_adv.py][kpi_adv] script.\n\n## Logging to fluentd\n\nThe Backend Client has integrated logging with fluentd through Python's\nlogging facility.\n\nRouting data to a fluentd host requires that you define the target host\nwhen executing a Backend Client script.\n\nTo configure the target host, tag and record for the stream, ensure that\nyou configure the examples/settings.yml file with\n\n```yaml\n    # tags stream with app.mesh\n    fluentd_hostname: \"myfluenthost\"\n    fluentd_record: mesh\n    fluentd_tag: app\n```\n\n## Building and running over Docker\n\nDocker allows application to run on a sandbox containing\nall the dependencies needed to run and execute them.\nIf you are not familiar with Docker, please refer to the\nofficial documentation at [docker.com][docker].\n\n### Dockerhub\n\nBackend Client builds are available\nfrom dockerhub under the [Backend Client registry][backend_client_dockerhub].\n\nThe latest tag points to the current stable release,\nwhereas the edge tag points to the top of master.\n\nThe latest tag is built automatically at dockerhub whenever this repository\nis tagged.\n\nThe edge tag is built after each single merge into master.\n\nTo pull the Backend Client image from dockerhub use:\n\n```shell\n    docker pull wirepas/backend-client:latest\n    docker pull wirepas/backend-client:<tag>\n```\n\n### Running with docker\n\nAs the container will have no access to your local environment, you will have\nto propagate the input parameters by mounting a local file inside the\ncontainer,eg, _examples/settings.yml_.\n\nThe default image command will launch the gateway client with the settings\npresent under _/home/wirepas/vars/settings.yml_ (container path).\n\nTo run it with docker type\n\n```shell\n    docker run -it \\\n               -v $(pwd)/examples/settings.yml:/home/wirepas/backend-client/vars/settings.yml \\\n               --net=host \\\n               wirepas/backend-client \\\n               wm-gw-cli \\\n               --settings /home/wirepas/backend-client/vars/settings.yml \\\n               --debug_level=critical\n```\n\n:warning: **WARNING** :warning:\n\nIf you want to run against a MQTT running in your host (localhost),\nyou must overlay the container over your host's network.\nTo do so, you must set the docker run parameter _--net=host._\n\n### Running with compose\n\nTo run the Backend Client using docker compose, drop or move the settings\nfile in **container/examples/settings.yml** and start the service with:\n\n```shell\n    docker-compose container/docker-compose.yml up\n```\n\nBy default this will start the [MQTT viewer example][examples_mqtt_viewer].\n\nIf you wish to run the gateway command client you can do so with:\n\n```shell\n    docker-compose -f container/docker-compose.yml \\\n                   run \\\n                   backend-client wm-gw-cli \\\n                   --settings /home/wirepas/backend-client/vars/settings.yml\n```\n\nIf you prefer alpine based images, please change _slim_ to _alpine_.\n\n### Building the image locally\n\nTo build the image locally in the root of the repo type:\n\n```shell\n    docker build -f container/slim/Dockerfile -t backend-client .\n```\n\nAlternatively you can also build using the docker-compose.yml present in\nthe root of the directory:\n\n```shell\n    docker-compose -f container/docker-compose.yml  build\n```\n\n## Source documentation\n\nThe source documentation is found from\n[read the docs.][backend_client_rtd]\n\n## Contributing\n\nWe welcome your contributions!\n\nPlease read the [instructions on how to do it][here_contribution]\nand please review our [code of conduct][here_code_of_conduct].\n\n## License\n\nCopyright 2019 Wirepas Ltd licensed under Apache License,\nVersion 2.0 See file [LICENSE][here_license] for full license details.\n\n<!--- references --->\n\n[bcli_api]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api\n\n[bcli_management]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/management\n\n[bcli_mesh]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh\n\n[bcli_messages]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/messages\n\n[bcli_test]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/test\n\n[bcli_tools]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/tools\n\n[bcli_cli]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/cli.py\n\n[bcli_api_influx]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/influx\n\n[bcli_api_mqtt]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/mqtt\n\n[bcli_api_mysql]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/mysql\n\n[bcli_api_wnt]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/wnt\n\n[bcli_api_wpe]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/wpe\n\n[bcli_mesh_interfaces]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces\n\n[bcli_mesh_interfaces_mqtt]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/mqtt.py\n\n[bcli_mesh_interfaces_remote_api]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/remote_api.py\n\n[bcli_mesh_interfaces_beacon_api]: https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/beacon_api.py\n\n[examples]: https://github.com/wirepas/backend-client/tree/master/examples\n\n[examples_mqtt_viewer]: https://github.com/wirepas/backend-client/blob/master/examples/mqtt_viewer.py\n\n[examples_find_all_nodes]: https://github.com/wirepas/backend-client/blob/master/examples/find_all_nodes.py\n\n[examples_influx_viewer]: https://github.com/wirepas/backend-client/blob/master/examples/influx_viewer.py\n\n[example_settings]: https://github.com/wirepas/backend-client/blob/master/examples/settings.yml\n\n[example_provisioning]: https://github.com/wirepas/backend-client/blob/master/examples/provisioning_config.yml\n\n[kpi_adv]: https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/test/kpi_adv.py\n\n[wm_gw_cli]: https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/cli.py\n\n[wm_wnt]: https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/api/wnt/__main__.py\n\n[wm_wpe]: https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/api/wpe/__main__.py\n\n[provisioning_server]: https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/provisioning/provisioning_server.py\n\n[backend_client_dockerhub]: https://hub.docker.com/r/wirepas/backend-client\n\n[backend_client_pypi]: https://pypi.org/project/wirepas-backend-client/\n\n[backend_client_rtd]: https://backend-client.readthedocs.io/en/latest/\n\n[backend_client_gh_issues]: https://github.com/wirepas/backend-client/issues\n\n[backend_client_gh_releases]: https://github.com/wirepas/backend-client/releases\n\n[backend_client_gh_milestones]: https://github.com/wirepas/backend-client/milestones\n\n[backend_client_gh_projects]: https://github.com/wirepas/backend-client/projects\n\n[here_img_overview]: https://github.com/wirepas/backend-client/blob/master/img/wm-backend-client-overview.png?raw=true\n\n[here_container]: https://github.com/wirepas/backend-client/tree/master/container\n\n[here_contribution]: https://github.com/wirepas/backend-client/blob/master/CONTRIBUTING.md\n\n[here_code_of_conduct]: https://github.com/wirepas/backend-client/blob/master/CODE_OF_CONDUCT.md\n\n[here_license]: https://github.com/wirepas/backend-client/blob/master/LICENSE\n\n[here_setup_entrypoints]: https://github.com/wirepas/backend-client/blob/d18adb2e7927f1d19bee1d739964072fcb737889/setup.py#L84\n\n[wirepas_cookbook_viz]: https://github.com/wirepas/tutorials/blob/master/cookbook/visualizations.md\n\n[wirepas_gateway]: https://github.com/wirepas/gateway\n\n[pipenv]: https://docs.pipenv.org/en/latest/\n\n[virtualenv]: https://virtualenv.pypa.io/en/latest/\n\n[docker]: https://www.docker.com\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wirepas/backend-client", "keywords": "wirepas connectivity iot mesh", "license": "Apache-2", "maintainer": "", "maintainer_email": "", "name": "wirepas-backend-client", "package_url": "https://pypi.org/project/wirepas-backend-client/", "platform": "", "project_url": "https://pypi.org/project/wirepas-backend-client/", "project_urls": {"Homepage": "https://github.com/wirepas/backend-client"}, "release_url": "https://pypi.org/project/wirepas-backend-client/1.3.2/", "requires_dist": ["PyYAML (==5.3)", "cbor2 (==4.1.2)", "fluent-logger (==0.9.4)", "influxdb (==5.2.3)", "mysqlclient (==1.4.6)", "paho-mqtt (==1.5.0)", "pandas (==0.25.3)", "pycryptodome (==3.9.4)", "websocket-client (==0.48.0)", "wirepas-messaging (==1.3.0)"], "requires_python": "", "summary": "Interfaces to interact with Wirepas backend services.", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Backend-client</h1>\n<p><a href=\"https://gitpod.io/#https://github.com/wirepas/backend-client\" rel=\"nofollow\"><img alt=\"Open in Gitpod\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/29af31bab3a673f78a5b856a188b44a484743780/68747470733a2f2f676974706f642e696f2f627574746f6e2f6f70656e2d696e2d676974706f642e737667\"></a></p>\n<p><a href=\"https://www.codacy.com/manual/wirepas/backend-client?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=wirepas/backend-client&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5f6419e7bfa9e425ed48aca0b655ca88b8b81775/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f6266306332333233376366303465613661633438653938636631306236613762\"></a> <a href=\"https://travis-ci.com/wirepas/backend-client\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f32d8d0b2b4851b1700b423d9858c2a8d8e31bfc/68747470733a2f2f7472617669732d63692e636f6d2f776972657061732f6261636b656e642d617069732e7376673f6272616e63683d6d6173746572\"></a>  <a href=\"https://backend-client.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a2bf126cbceef188f90cf0558f789ac10c2fdae9/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6261636b656e642d636c69656e742f62616467652f3f76657273696f6e3d6c6174657374\"></a> <a href=\"https://pypi.org/project/wirepas-backend-client/\" rel=\"nofollow\"><img alt=\"PyPi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0c72b0da49b4d6f718f632454d08f4776da167c4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f776972657061732d6261636b656e642d636c69656e742e737667\"></a></p>\n\n<ol>\n<li><a href=\"#introduction\" rel=\"nofollow\">Introduction</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ol>\n<li><a href=\"#host-dependencies\" rel=\"nofollow\">Host dependencies</a></li>\n<li><a href=\"#setting-up-a-python-virtual-environment\" rel=\"nofollow\">Setting up a Python virtual environment</a></li>\n<li><a href=\"#installing-from-pypi\" rel=\"nofollow\">Installing from PyPi</a></li>\n<li><a href=\"#installing-from-github\" rel=\"nofollow\">Installing from Github</a></li>\n</ol>\n</li>\n<li><a href=\"#entrypoints\" rel=\"nofollow\">Entrypoints</a>\n<ol>\n<li><a href=\"#gateway-command-line-interface\" rel=\"nofollow\">Gateway command line interface</a></li>\n<li><a href=\"#wpe-viewer\" rel=\"nofollow\">WPE Viewer</a></li>\n<li><a href=\"#wnt-viewer\" rel=\"nofollow\">WNT Viewer</a></li>\n<li><a href=\"#provisioning-server\" rel=\"nofollow\">Provisioning server</a></li>\n</ol>\n</li>\n<li><a href=\"#framework\" rel=\"nofollow\">Framework</a>\n<ol>\n<li><a href=\"#structure\" rel=\"nofollow\">Structure</a></li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n</ol>\n</li>\n<li><a href=\"#logging-to-fluentd\" rel=\"nofollow\">Logging to fluentd</a></li>\n<li><a href=\"#building-and-running-over-docker\" rel=\"nofollow\">Building and running over Docker</a>\n<ol>\n<li><a href=\"#dockerhub\" rel=\"nofollow\">Dockerhub</a></li>\n<li><a href=\"#running-with-docker\" rel=\"nofollow\">Running with docker</a></li>\n<li><a href=\"#running-with-compose\" rel=\"nofollow\">Running with compose</a></li>\n<li><a href=\"#building-the-image-locally\" rel=\"nofollow\">Building the image locally</a></li>\n</ol>\n</li>\n<li><a href=\"#source-documentation\" rel=\"nofollow\">Source documentation</a></li>\n<li><a href=\"#contributing\" rel=\"nofollow\">Contributing</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ol>\n\n<h2>Introduction</h2>\n<p>The Backend Client is a tool to serve as a decoder and a test framework\nwhere you can extend the existing interfaces to develop your own test cases.\nInteractions with\na <a href=\"https://github.com/wirepas/gateway\" rel=\"nofollow\">gateway</a> must be compliant with the Wirepas\nBackend to Gateway API.</p>\n<p>In addition to the interaction with the Backend to Gateway Public API,\nthe Backend Client has also support for Wirepas Positioning Engine and Wirepas\nNetwork Tool. Support for these tools is still work in progress\n(see <a href=\"https://github.com/wirepas/backend-client/milestones\" rel=\"nofollow\">milestones</a> and <a href=\"https://github.com/wirepas/backend-client/projects\" rel=\"nofollow\">projects</a>).\nHowever, you can already benefit from existing\nentrypoints to help you capture data and debug your\nintegration (see <a href=\"#entrypoints\" rel=\"nofollow\">entrypoints</a>).</p>\n<p>Figure 1 illustrates the horizon where Backend Client is located.</p>\n<p><img alt=\"Architecture overview\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a20f675527d3322283812bf57f1b264e77377a83/68747470733a2f2f6769746875622e636f6d2f776972657061732f6261636b656e642d636c69656e742f626c6f622f6d61737465722f696d672f776d2d6261636b656e642d636c69656e742d6f766572766965772e706e673f7261773d74727565\"></p>\n<p><strong>Figure 1</strong> - Backend Client role in the Wirepas ecosystem.</p>\n<h2>Installation</h2>\n<p>The Backend Client is written in python and it requires a valid MQTT\nbroker target to connect to, WNT or WPE credentials.</p>\n<p>If you need help installing a MQTT broker or auxiliary software please\nrefer to our tutorials repository.</p>\n<h3>Host dependencies</h3>\n<p>The main requirements of Backend Client are:</p>\n<ul>\n<li>Python 3.7</li>\n<li>Pip (we recommend the latest available)</li>\n<li>Linux system</li>\n</ul>\n<p>Certain Backend Client's dependencies must be\ncompiled locally upon installation,\nthus require the installation of specific development headers.</p>\n<p>Under Debian, the extra requirements are met with:</p>\n<pre>    sudo apt-get install default-libmysqlclient-dev <span class=\"se\">\\</span>\n                         gcc <span class=\"se\">\\</span>\n                         python3-dev\n</pre>\n<p>Please be advised that the name of such packages might change depending on your\nLinux system. Please refer to the Dockerfiles\nunder the <a href=\"https://github.com/wirepas/backend-client/tree/master/container\" rel=\"nofollow\">container folder</a> for more detailed information.</p>\n<p>Windows native environments are not supported. For help running the tool\nin Windows, please use the Linux subsystem, Docker or a virtual machine.</p>\n<h3>Setting up a Python virtual environment</h3>\n<p>As a recommendation, it is good practice to install and run the\napplication on a virtual python environment. Such approach avoids\npossible issues with conflicting package versions.</p>\n<p>We recommend you use either <a href=\"https://virtualenv.pypa.io/en/latest/\" rel=\"nofollow\">virtualenv</a> or <a href=\"https://docs.pipenv.org/en/latest/\" rel=\"nofollow\">pipenv</a>:</p>\n<pre>    pip3 install virtualenv\n    pip3 install pipenv\n</pre>\n<p>If you choose to install and run the Backend Client inside a virtual\nenvironment, please activate the environment before moving with the next\nsteps.</p>\n<p>A virtual environment with virtualenv is created and activated\nwith:</p>\n<pre>    virtualenv wm_bcli_env\n    <span class=\"nb\">source</span> wm_bcli_env/bin/activate\n</pre>\n<p>For pipenv, a virtual environment is created and activated by:</p>\n<pre>    pipenv --three\n    pipenv shell\n</pre>\n<p>Once you activate your environment your can safely install the python\npackage under it.</p>\n<p>For more information please refer to the tool's webpage.</p>\n<h3>Installing from PyPi</h3>\n<p>The Backend Client is available from\n<a href=\"https://pypi.org/project/wirepas-backend-client/\" rel=\"nofollow\">PyPi</a> and you can install the latest stable version\nwith:</p>\n<pre>    pip install wirepas-backend-client\n</pre>\n<p>If you wish to install a particular version please see the release history\nfrom PyPi.</p>\n<h3>Installing from Github</h3>\n<p>First of all, make sure to clone the repository using the https address.</p>\n<p>Checkout the\n<a href=\"https://github.com/wirepas/backend-client/releases\" rel=\"nofollow\">git tag that corresponds to the release version</a>\nyou want to install and install the package with:</p>\n<pre>    pip3 install .\n</pre>\n<p>If you leave your branch checked out to the top of master, it is likely that\nyou might run into a few issues. If you find them, please be so kind to\nraise them to us through an <a href=\"https://github.com/wirepas/backend-client/issues\" rel=\"nofollow\">issue or bug report</a>.</p>\n<p>If you want to develop or patch a bug under your local environment,\nyou can install the package in development mode through:</p>\n<pre>    pip3 install -e .\n</pre>\n<p>When installed in development mode, changes to the source files will be\nimmediately visible.</p>\n<h2>Entrypoints</h2>\n<p>After installation, the Backend Client exposes several\n<a href=\"https://github.com/wirepas/backend-client/blob/d18adb2e7927f1d19bee1d739964072fcb737889/setup.py#L84\" rel=\"nofollow\">shell entrypoints</a> that\ncan be run from any location in your system. This section describes their\nusage in more detail.</p>\n<h3>Gateway command line interface</h3>\n<p>The Backend Client exposes an interactive gateway command line which is\nmeant to interact with a gateway and sink pair connected to a given\nMQTT broker.</p>\n<p>To start an interactive command line to interact with a broker located\nin your <em>localhost</em> environment type:</p>\n<pre>    wm-gw-cli\n</pre>\n<p>Connecting to a remote server requires you to specify the values as an\nargument or by reading from a yaml settings file. To view all the\narguments, please issue the command:</p>\n<pre>    wm-gw-cli --help\n</pre>\n<h4>Connecting to the MQTT broker</h4>\n<p>For the gateway client to function properly, it needs to establish a\nconnection to the same MQTT broker where one or multiple gateways\nare connected to.</p>\n<p>To do so, let's assume the following MQTT credentials are saved in\n./examples/settings.yml:</p>\n<pre> <span class=\"c1\"># examples/settings.yml</span>\n <span class=\"c1\"># Example on how to set the MQTT credentials towards a local broker</span>\n <span class=\"c1\"># with basic authentication</span>\n <span class=\"nt\">mqtt_hostname</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">127.0.0.1</span>\n <span class=\"nt\">mqtt_password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">password</span>\n <span class=\"nt\">mqtt_username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">username</span>\n <span class=\"nt\">mqtt_port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span> <span class=\"c1\"># defaults to 8883 (secure port)</span>\n <span class=\"nt\">mqtt_force_unsecure</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>  <span class=\"c1\"># defaults to False (secure)</span>\n</pre>\n<p>To start the gateway against the MQTT broker specified in\n./examples/settings.yml, issue the following command:</p>\n<pre>    wm-gw-cli --settings ./examples/settings.yml\n</pre>\n<p>Once the client launches, you will be greeted with:</p>\n<pre>    Welcome to the Wirepas Gateway Client cli!\n    Connecting to mosquittouser@127.0.0.1:1883 <span class=\"o\">(</span>unsecure: True<span class=\"o\">)</span>\n\n    Type <span class=\"nb\">help</span> or ? to list commands\n\n    Type ! to escape shell commands\n    Use Arrow Up/Down to navigate your <span class=\"nb\">command</span> <span class=\"nb\">history</span>\n    Use CTRL-D or bye to <span class=\"nb\">exit</span>\n\n    <span class=\"m\">09</span>:50.17 <span class=\"p\">|</span> wm-gw-cli &gt;\n</pre>\n<h4>Commands</h4>\n<p>The gateway client has a set of commands which you can view by typing ?\nin the client's shell:</p>\n<pre>    wm-gw-cli &gt; ?\n\n    Documented commands <span class=\"o\">(</span><span class=\"nb\">type</span> <span class=\"nb\">help</span> &lt;topic&gt;<span class=\"o\">)</span>:\n    <span class=\"o\">========================================</span>\n    EOF                     playback           set_loop_iterations\n    bye                     q                  set_loop_timeout\n    clear_offline_gateways  record             set_reply_greeting\n    eof                     scratchpad_status  set_sink\n    gateway_configuration   scratchpad_update  settings\n    gateways                scratchpad_upload  shell\n    <span class=\"nb\">help</span>                    selection          sinks\n    list                    send_data          toggle_byte_print\n    ls                      set_app_config     toggle_pretty_print\n    networks                set_config         track_devices\n    nodes                   set_gateway        track_data_packets\n</pre>\n<p>For each available command you can get more help if you type\n<strong>?command</strong> for example, to view how to send a datagram,\ntype in the shell:</p>\n<pre>    wm-gw-cli &gt; ?send_data\n</pre>\n<p>When typing commands, you can use the up and down arrows to browse your\nshell history. There is also support for running host shell commands, by\nprefacing the command with <strong>!</strong>.</p>\n<h4>Viewing connected devices</h4>\n<p>Upon a MQTT connection, the Backend Client will start populating an\ninternal structure based on any incoming message. The topic is parsed\nand the information about the network devices are constructed.</p>\n<p>The operation happens as messages are published from the network. It\nwill take time to build a full map of the network, which will be faster\ndepending on your network's packets per second.</p>\n<p>To browse the devices, please type:</p>\n<pre>    wm-gw-cli &gt; ls\n</pre>\n<p>The output will show the devices that have been currently found. In case\nyou wish to view periodically which devices you have on your network,\ntype in the following command:</p>\n<pre>    wm-gw-cli &gt; ?track_devices\n</pre>\n<p>To exit the tracking loop, give a new line feed to the input stream and\nit will go back to the main command shell.</p>\n<h4>Device settings</h4>\n<p>When sending a downstream datagram, it is necessary to obey the\nBackend to Gateway API (WM-RM-128).\nFor that reason, it is mandatory to know what is the target\ngateway identifier and in most cases the sink id as well.</p>\n<h5>Selecting the target gateway and sink</h5>\n<p>The wm-gw-cli provides an easy way to select the target gateway and sink. To\nmake your choice, please type the following commands:</p>\n<pre>    wm-gw-cli &gt; set_gateway\n    <span class=\"m\">0</span> : <span class=\"m\">2485378023427</span> : GatewayState.ONLINE\n    <span class=\"m\">1</span> : <span class=\"m\">2485378023426</span> : GatewayState.OFFLINE\n    Please enter your gateway selection <span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>: <span class=\"m\">0</span>\n    wm-gw-cli &gt; set_sink\n    <span class=\"m\">0</span> : <span class=\"m\">3806491</span>:2485378023427:sink0\n    Please enter your sink selection <span class=\"o\">[</span><span class=\"m\">0</span><span class=\"o\">]</span>: <span class=\"m\">0</span>\n</pre>\n<p>When setting the gateway, the wm-gw-cli shows you the following information\n<em>object index : gateway id : state.</em> Similarly, for the sink, the wm-gw-cli\npresents the object <em>index : network : gateway id: sink id</em>.</p>\n<p>To make your selection, type the desired object index and press enter.</p>\n<p>Once your selection is done, your commands will target that gateway id\nand sink id. If you wish to view what your current selection is, use the\ncommand:</p>\n<pre>    wm-gw-cli &gt; selection\n</pre>\n<p>:warning: <strong>WARNING</strong> :warning:</p>\n<p>The wm-gw-cli prompt will update itself with the current gateway and sink id.\nThroughout this document, that information has been edited out of the\nprompt.</p>\n<h5>Set app config</h5>\n<p>Setting the app config requires that your gateway and sink are selected.\nIn case you have not done the selection prior to this command, the wm-gw-cli\nwill ask for them.</p>\n<p>When setting the app config, you are setting three values on the target\nsink:</p>\n<ul>\n<li>\n<p>Diagnostic interval: the interval of network diagnostics (0, 30, 60,\n300, 600, 1800)</p>\n</li>\n<li>\n<p>App config: A payload of a given size distributed to all associated\ndevices on the network;</p>\n</li>\n<li>\n<p>App config sequence: The sequence of the new app config (must be\nhigher than the current one - otherwise the app config won't take\neffect, please refer to WM-RM-100).</p>\n</li>\n</ul>\n<p>The app config payload is given either as a set of binary data without\ntrailing 0x or as a utf8 data. For example, to send the\nbinary <em>0x10x40x5</em> you should type <em>010405</em>.\nIf you simply want to have a text string on\nyour app config, you can for example type \"sink by the window\".</p>\n<p>As an example, on the wm-gw-cli you would type:</p>\n<pre>    <span class=\"c1\"># Remember! no white spaces allowing in the payload!</span>\n    <span class=\"c1\"># If you want to toggle byte string to hex string in the</span>\n    <span class=\"c1\"># app_config_data, please see toggle_byte_print</span>\n\n    wm-gw-cli &gt; set_app_config <span class=\"m\">10</span> sink_by_the_window <span class=\"m\">30</span>\n    answer <span class=\"s\">&lt;&lt;</span>\n<span class=\"s\">        gw_id: 2485378023427</span>\n<span class=\"s\">        sink_id: sink0</span>\n<span class=\"s\">        req_id: 12079559850249952277</span>\n<span class=\"s\">        res: GatewayResultCode.GW_RES_OK</span>\n<span class=\"s\">        sink_id: sink0</span>\n<span class=\"s\">        current_ac_rang</span>e_min: <span class=\"m\">2000</span>\n        current_ac_range_max: <span class=\"m\">8000</span>\n        min_ac: <span class=\"m\">2000</span>\n        max_ac: <span class=\"m\">8000</span>\n        max_mtu: <span class=\"m\">102</span>\n        min_ch: <span class=\"m\">1</span>\n        max_ch: <span class=\"m\">27</span>\n        hw_magic: <span class=\"m\">3</span>\n        stack_profile: <span class=\"m\">1</span>\n        app_config_max_size: <span class=\"m\">80</span>\n        are_keys_set: False\n        firmware_version: <span class=\"o\">[</span><span class=\"m\">3</span>, <span class=\"m\">4</span>, <span class=\"m\">37</span>, <span class=\"m\">0</span><span class=\"o\">]</span>\n        node_role: <span class=\"m\">17</span>\n        node_address: <span class=\"m\">4193520</span>\n        network_address: <span class=\"m\">3806491</span>\n        network_channel: <span class=\"m\">22</span>\n        app_config_diag: <span class=\"m\">30</span>\n        app_config_seq: <span class=\"m\">10</span>\n        app_config_data:\n        b<span class=\"s1\">'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00'</span>\n        channel_map: <span class=\"m\">286331153</span>\n        started: True\n</pre>\n<p>The answer will carry the gateway result and present you the new app\nconfig.</p>\n<h5>Viewing gateway configuration</h5>\n<p>The wm-gw-cli allows you to see the current gateway configuration by typing:</p>\n<pre>    wm-gw-cli &gt; gateway_configuration\n    requesting configuration <span class=\"k\">for</span> <span class=\"m\">2485378023427</span>\n    answer <span class=\"s\">&lt;&lt;</span>\n<span class=\"s\">        gw_id: 2485378023427</span>\n<span class=\"s\">        sink_id: None</span>\n<span class=\"s\">        req_ gw_id</span>: <span class=\"m\">2485378023427</span>\n        sink_id: sink0\n        req_id: <span class=\"m\">12079559850249952277</span>\n        res: GatewayResultCode.GW_RES_OK\n        sink_id: sink0\n        current_ac_range_min: <span class=\"m\">2000</span>\n        current_ac_range_max: <span class=\"m\">8000</span>\n        min_ac: <span class=\"m\">2000</span>\n        max_ac: <span class=\"m\">8000</span>\n        max_mtu: <span class=\"m\">102</span>\n        min_ch: <span class=\"m\">1</span>\n        max_ch: <span class=\"m\">27</span>\n        hw_magic: <span class=\"m\">3</span>\n        stack_profile: <span class=\"m\">1</span>\n        app_config_max_size: <span class=\"m\">80</span>\n        are_keys_set: False\n        firmware_version: <span class=\"o\">[</span><span class=\"m\">3</span>, <span class=\"m\">4</span>, <span class=\"m\">37</span>, <span class=\"m\">0</span><span class=\"o\">]</span>\n        node_role: <span class=\"m\">17</span>\n        node_address: <span class=\"m\">4193520</span>\n        network_address: <span class=\"m\">3806491</span>\n        network_channel: <span class=\"m\">22</span>\n        app_config_diag: <span class=\"m\">30</span>\n        app_config_seq: <span class=\"m\">10</span>\n        app_config_data:\n        b git<span class=\"s1\">'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00'</span>\n        channel_map: <span class=\"m\">286331153</span>\n        started: Trueid: <span class=\"m\">13018941017451207243</span>\n        res: GatewayResultCode.GW_RES_OK\n        sink_id: sink0\n        node_role: <span class=\"m\">17</span>\n        node_address: <span class=\"m\">4193520</span>\n        network_address: <span class=\"m\">3806491</span>\n        network_channel: <span class=\"m\">22</span>\n        app_config_diag: <span class=\"m\">30</span>\n        app_config_seq: <span class=\"m\">10</span>\n        app_config_data:\n        b<span class=\"s1\">'sink_by_the_window\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00</span>\n<span class=\"s1\">        \\x00\\x00\\x00'</span>\n        channel_map: <span class=\"m\">286331153</span>\n        started: True\n        current_ac_range_min: <span class=\"m\">2000</span>\n        current_ac_range_max: <span class=\"m\">8000</span>\n        min_ac: <span class=\"m\">2000</span>\n        max_ac: <span class=\"m\">8000</span>\n        max_mtu: <span class=\"m\">102</span>\n        min_ch: <span class=\"m\">1</span>\n        max_ch: <span class=\"m\">27</span>\n        hw_magic: <span class=\"m\">3</span>\n        stack_profile: <span class=\"m\">1</span>\n        app_config_max_size: <span class=\"m\">80</span>\n        are_keys_set: False\n        firmware_version: <span class=\"o\">[</span><span class=\"m\">3</span>, <span class=\"m\">4</span>, <span class=\"m\">37</span>, <span class=\"m\">0</span><span class=\"o\">]</span>\n</pre>\n<h5>Upload and process a scratchpad</h5>\n<p>The wm-gw-cli supports uploading a new scratchpad and asking the sink to take\nit into use. <em>A full network OTAP is not currently supported with the\nwm-gw-cli.</em> To initiate a network OTAP, you will have to send the\ncorresponding datagrams as mentioned in the remote API documentation.</p>\n<p>The scratchpad commands are available as:</p>\n<ul>\n<li>scratchpad_status</li>\n<li>scratchpad_update</li>\n<li>scratchpad_upload</li>\n</ul>\n<p>:warning: <strong>WARNING</strong> :warning:</p>\n<p>An incorrect scratchpad or an incorrect OTAP can damage your network\npermanently. Please use these commands with care.</p>\n<h3>WPE Viewer</h3>\n<p>The WPE viewer, <em>wm-wpe-viewer</em>, provides a simple way to check\nif a WPE service and consume location updates for a given network.</p>\n<p>The WPE viewer entrypoint requires correct population of the following\nsettings:</p>\n<pre>    <span class=\"c1\">#examples/settings.yml</span>\n    <span class=\"nt\">wpe_service_definition</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">./mywpesettings.json</span>\n    <span class=\"nt\">wpe_network</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1092</span> <span class=\"c1\">#optional</span>\n</pre>\n<p>The <em>mywpesettings.json</em> consists of a standard WPE client configuration\nfile. Please refer to WPE's official documentation for more details\non how to obtain and configure such file.</p>\n<p>The wpe network is the network identifier on which your devices operate.\nIf you leave the parameter unset, the entrypoint will only perform a\nping to the backend specified under the json file.</p>\n<h3>WNT Viewer</h3>\n<p>The WNT viewer, <em>wm-wnt-viewer</em>, provides a simple way to check\nif a WNT service is reachable and to consume messages streamed by WNT on\nits realtime metadata websocket. These message contain network and node\ndiagnostic information. Please refer to WNT's public API documentation\nfor further information.</p>\n<p>The WNT viewer entrypoint requires correct population of the following\nsettings:</p>\n<pre>    <span class=\"c1\">#examples/settings.yml</span>\n    <span class=\"nt\">wnt_username</span><span class=\"p\">:</span> <span class=\"s\">\"wntuser\"</span>\n    <span class=\"nt\">wnt_password</span><span class=\"p\">:</span> <span class=\"s\">\"98asuyd907171ehjmasd\"</span>\n    <span class=\"nt\">wnt_hostname</span><span class=\"p\">:</span> <span class=\"s\">\"wnthost.com\"</span>\n</pre>\n<h3>Provisioning server</h3>\n<p>The provisioning server, <em>wm-provisioning-server</em>, provides an example\nimplementation of the server side of the provisioning protocol. It must be used\nwith the <em>provisioning_joining_node</em> application of the SDK. Please refer to\nthe provisioning reference manual for further information.</p>\n<p>The Provisioning server entrypoint requires correct population of the following settings:</p>\n<pre>    <span class=\"c1\">#examples/settings.yml</span>\n    <span class=\"nt\">mqtt_hostname</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mqtt_broker_address_or_ip</span>\n    <span class=\"nt\">mqtt_password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">password</span>\n    <span class=\"nt\">mqtt_username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">username</span>\n    <span class=\"nt\">mqtt_port</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1883</span> <span class=\"c1\"># defaults to 8883 (secure port)</span>\n    <span class=\"nt\">mqtt_force_unsecure</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">True</span>  <span class=\"c1\"># defaults to False (secure)</span>\n\n    <span class=\"nt\">provisioning_config</span><span class=\"p\">:</span> <span class=\"s\">\"./myprovisioningconfig.yml\"</span>\n</pre>\n<p>The <em>myprovisioningconfig.yml</em> consists of a list of authorized nodes and their\nassociated provisioning data.</p>\n<h2>Framework</h2>\n<p>Besides the useful entrypoints to interact with Wirepas services, the goal of\nthe Backend Client is to provide you a framework around which you can\nbuild test cases to help you during your integration, research and\ndevelopment phases.</p>\n<h3>Structure</h3>\n<p>The framework or package is organized in several submodules:</p>\n<ol>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api\" rel=\"nofollow\">api</a>\n<ol>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/influx\" rel=\"nofollow\">api/influx</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/mqtt\" rel=\"nofollow\">api/mqtt</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/mysql\" rel=\"nofollow\">api/mysql</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/wnt\" rel=\"nofollow\">api/wnt</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api/wpe\" rel=\"nofollow\">api/wpe</a></li>\n</ol>\n</li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/management\" rel=\"nofollow\">management</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh\" rel=\"nofollow\">mesh</a>\n<ol>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces\" rel=\"nofollow\">mesh/interfaces</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/mqtt.py\" rel=\"nofollow\">mesh/interfaces/mqtt</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/remote_api.py\" rel=\"nofollow\">mesh/interfaces/remote_api</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/beacon_api.py\" rel=\"nofollow\">mesh/interfaces/beacon_api</a></li>\n</ol>\n</li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/messages\" rel=\"nofollow\">messages</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/test\" rel=\"nofollow\">test</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/tools\" rel=\"nofollow\">tools</a></li>\n<li><a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/cli.py\" rel=\"nofollow\">cli</a></li>\n</ol>\n<h4>API submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/api\" rel=\"nofollow\">api submodule</a> contains the interfaces to connect\nand handle data coming in and out of Wirepas' services and other\n3rd party services such as databases\nand message brokers.</p>\n<p>Each API or interface folder is organized with connectors, handlers and\nsettings. The connectors file contains classes to establish a connection to\nthe target interface. The handlers contain classes to process streams of input\nand output data. The settings file allows for handling parameter\ntranslation from input to class arguments (if needed).</p>\n<h4>Management submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/management\" rel=\"nofollow\">management submodule</a> contains files regarding\nthe runtime management of the framework.\nIn particular the daemon which simplifies the multiprocess aspect\nof the Backend Client.</p>\n<h4>Mesh submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh\" rel=\"nofollow\">mesh submodule</a> contains files related to how\ndevices are mapped within the Backend Client.\nIn addition to those, the submodule contains an interfaces\nfolder which contains specializations on how to handle specific Wirepas's\nAPIs, such as the <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/mesh/interfaces/mqtt.py\" rel=\"nofollow\">Gateway to Backend API</a>.</p>\n<p>:pencil2: <strong>NOTE</strong> :pencil2:</p>\n<p>In our redesign effort we are targeting to improve the device\nclasses and implement remote API support. Please follow the\nframework development for more up to date information.</p>\n<h4>Messages submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/messages\" rel=\"nofollow\">messages submodule</a> consists of a collection of\nmessage handler or decoders that handle translation of known APDUS,\nbased on the endpoint they are associated to.</p>\n<p>:pencil2: <strong>NOTE</strong> :pencil2:</p>\n<p>We are considering moving the message handlers into the overarching Wirepas\nBackend APIs project. Please follow the framework development for more up to\ndate information.</p>\n<h4>Test submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/test\" rel=\"nofollow\">test submodule</a> contains classes to handle internal task\nscheduling and scripts to address particular mesh use cases.</p>\n<h4>Tools submodule</h4>\n<p>The <a href=\"https://github.com/wirepas/backend-client/tree/master/wirepas_backend_client/tools\" rel=\"nofollow\">tools submodule</a> contains a collection of files\nwith classes that handle the acquisition of user\ninput, setup of the logging interface and general\npurpose utility methods and classes.</p>\n<h4>Cli submodule</h4>\n<p>Currently still a <a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/cli.py\" rel=\"nofollow\">single file</a>, this upcoming submodule\nwill contain a re-factor of the gateway client to allow easier\ncustomization and construction of custom command line interfaces.</p>\n<h3>Examples</h3>\n<p>To better understand the framework inner-working and how you can extend it,\nwe recommend that you take a look at the examples\nwe have available in the <a href=\"https://github.com/wirepas/backend-client/tree/master/examples\" rel=\"nofollow\">examples folder</a>:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/examples/mqtt_viewer.py\" rel=\"nofollow\">mqtt_viewer.py</a>: connects to a MQTT broker and\ndecodes on the fly any message that is known to the\nframework (see <a href=\"https://github.com/wirepas/tutorials/blob/master/cookbook/visualizations.md\" rel=\"nofollow\">cookbook</a> for usage example)</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/examples/find_all_nodes.py\" rel=\"nofollow\">find_all_nodes.py</a>: simple interaction with\nthe Gateway to Backend API that enumerates and prints outs discovered devices</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/examples/influx_viewer.py\" rel=\"nofollow\">influx_viewer.py</a>: run custom queries or\nexport date ranges from an influx database where WNT is storing data</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/examples/settings.yml\" rel=\"nofollow\">settings.yml</a>: an example of a yaml file that with\ncommented out settings</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/examples/provisioning_config.yml\" rel=\"nofollow\">provisioning_config.yml</a>: an example of a yaml file\nfor the provisioning server</p>\n</li>\n</ul>\n<p>Backend Client's entrypoints also act as a good way to guide your development:</p>\n<ul>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/cli.py\" rel=\"nofollow\">wm-gw-cli</a>: code behind the gateway command line\ninterface that exemplifies how to build requests to the sink,\nreceive and send data packets</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/api/wnt/__main__.py\" rel=\"nofollow\">wm-wnt-viewer</a>: example on how to consume data streamed\nby a WNT backend</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/api/wpe/__main__.py\" rel=\"nofollow\">wm-wpe-viewer</a>: example on how to consume data streamed\nby a WPE backend</p>\n</li>\n<li>\n<p><a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/provisioning/provisioning_server.py\" rel=\"nofollow\">wm-provisioning-server</a>: an example implementation\nof the server side of the wirepas provisioning protocol</p>\n</li>\n</ul>\n<p>For an example on how to build use case test cases, please refer to\nthe <a href=\"https://github.com/wirepas/backend-client/blob/master/wirepas_backend_client/test/kpi_adv.py\" rel=\"nofollow\">kpi_adv.py</a> script.</p>\n<h2>Logging to fluentd</h2>\n<p>The Backend Client has integrated logging with fluentd through Python's\nlogging facility.</p>\n<p>Routing data to a fluentd host requires that you define the target host\nwhen executing a Backend Client script.</p>\n<p>To configure the target host, tag and record for the stream, ensure that\nyou configure the examples/settings.yml file with</p>\n<pre>    <span class=\"c1\"># tags stream with app.mesh</span>\n    <span class=\"nt\">fluentd_hostname</span><span class=\"p\">:</span> <span class=\"s\">\"myfluenthost\"</span>\n    <span class=\"nt\">fluentd_record</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">mesh</span>\n    <span class=\"nt\">fluentd_tag</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">app</span>\n</pre>\n<h2>Building and running over Docker</h2>\n<p>Docker allows application to run on a sandbox containing\nall the dependencies needed to run and execute them.\nIf you are not familiar with Docker, please refer to the\nofficial documentation at <a href=\"https://www.docker.com\" rel=\"nofollow\">docker.com</a>.</p>\n<h3>Dockerhub</h3>\n<p>Backend Client builds are available\nfrom dockerhub under the <a href=\"https://hub.docker.com/r/wirepas/backend-client\" rel=\"nofollow\">Backend Client registry</a>.</p>\n<p>The latest tag points to the current stable release,\nwhereas the edge tag points to the top of master.</p>\n<p>The latest tag is built automatically at dockerhub whenever this repository\nis tagged.</p>\n<p>The edge tag is built after each single merge into master.</p>\n<p>To pull the Backend Client image from dockerhub use:</p>\n<pre>    docker pull wirepas/backend-client:latest\n    docker pull wirepas/backend-client:&lt;tag&gt;\n</pre>\n<h3>Running with docker</h3>\n<p>As the container will have no access to your local environment, you will have\nto propagate the input parameters by mounting a local file inside the\ncontainer,eg, <em>examples/settings.yml</em>.</p>\n<p>The default image command will launch the gateway client with the settings\npresent under <em>/home/wirepas/vars/settings.yml</em> (container path).</p>\n<p>To run it with docker type</p>\n<pre>    docker run -it <span class=\"se\">\\</span>\n               -v <span class=\"k\">$(</span><span class=\"nb\">pwd</span><span class=\"k\">)</span>/examples/settings.yml:/home/wirepas/backend-client/vars/settings.yml <span class=\"se\">\\</span>\n               --net<span class=\"o\">=</span>host <span class=\"se\">\\</span>\n               wirepas/backend-client <span class=\"se\">\\</span>\n               wm-gw-cli <span class=\"se\">\\</span>\n               --settings /home/wirepas/backend-client/vars/settings.yml <span class=\"se\">\\</span>\n               --debug_level<span class=\"o\">=</span>critical\n</pre>\n<p>:warning: <strong>WARNING</strong> :warning:</p>\n<p>If you want to run against a MQTT running in your host (localhost),\nyou must overlay the container over your host's network.\nTo do so, you must set the docker run parameter <em>--net=host.</em></p>\n<h3>Running with compose</h3>\n<p>To run the Backend Client using docker compose, drop or move the settings\nfile in <strong>container/examples/settings.yml</strong> and start the service with:</p>\n<pre>    docker-compose container/docker-compose.yml up\n</pre>\n<p>By default this will start the <a href=\"https://github.com/wirepas/backend-client/blob/master/examples/mqtt_viewer.py\" rel=\"nofollow\">MQTT viewer example</a>.</p>\n<p>If you wish to run the gateway command client you can do so with:</p>\n<pre>    docker-compose -f container/docker-compose.yml <span class=\"se\">\\</span>\n                   run <span class=\"se\">\\</span>\n                   backend-client wm-gw-cli <span class=\"se\">\\</span>\n                   --settings /home/wirepas/backend-client/vars/settings.yml\n</pre>\n<p>If you prefer alpine based images, please change <em>slim</em> to <em>alpine</em>.</p>\n<h3>Building the image locally</h3>\n<p>To build the image locally in the root of the repo type:</p>\n<pre>    docker build -f container/slim/Dockerfile -t backend-client .\n</pre>\n<p>Alternatively you can also build using the docker-compose.yml present in\nthe root of the directory:</p>\n<pre>    docker-compose -f container/docker-compose.yml  build\n</pre>\n<h2>Source documentation</h2>\n<p>The source documentation is found from\n<a href=\"https://backend-client.readthedocs.io/en/latest/\" rel=\"nofollow\">read the docs.</a></p>\n<h2>Contributing</h2>\n<p>We welcome your contributions!</p>\n<p>Please read the <a href=\"https://github.com/wirepas/backend-client/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">instructions on how to do it</a>\nand please review our <a href=\"https://github.com/wirepas/backend-client/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">code of conduct</a>.</p>\n<h2>License</h2>\n<p>Copyright 2019 Wirepas Ltd licensed under Apache License,\nVersion 2.0 See file <a href=\"https://github.com/wirepas/backend-client/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> for full license details.</p>\n\n\n          </div>"}, "last_serial": 6984791, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "767c9e33e73fcfeb4e1c9babbc5f2f52", "sha256": "fc9e9f699071090d80a7b18c4fa6b3c6d8343fde91977d13653f76a0ad76ae9c"}, "downloads": -1, "filename": "wirepas_backend_client-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "767c9e33e73fcfeb4e1c9babbc5f2f52", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 94661, "upload_time": "2019-03-27T11:50:48", "upload_time_iso_8601": "2019-03-27T11:50:48.434105Z", "url": "https://files.pythonhosted.org/packages/71/b0/53951e6c800b6a129f49c53feb266ee215cbe7a0d9d4234ea4c3bba48e5b/wirepas_backend_client-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3871c943f4c28480419b9d272e6b5f75", "sha256": "14afc0524aa1c8897641ca22c8dc29ccca2bfae06c50a38567ff95c950789d5f"}, "downloads": -1, "filename": "wirepas_backend_client-1.1.0.tar.gz", "has_sig": false, "md5_digest": "3871c943f4c28480419b9d272e6b5f75", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 64355, "upload_time": "2019-03-27T11:50:51", "upload_time_iso_8601": "2019-03-27T11:50:51.042330Z", "url": "https://files.pythonhosted.org/packages/ae/27/8a7298efa9daf575349c54812969eff6b3707dc36e1d44f8aac4bc53cd50/wirepas_backend_client-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "e84a1df1af3e7c8f0ed17e7de09754bc", "sha256": "3613a17dbaca16823d5940229202b4de0b8396abc0770c8565980a23f777ad31"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e84a1df1af3e7c8f0ed17e7de09754bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140817, "upload_time": "2019-09-20T07:14:32", "upload_time_iso_8601": "2019-09-20T07:14:32.235196Z", "url": "https://files.pythonhosted.org/packages/68/3c/b4ce741df929c7cc0b2d0be71fe4927db231ac9b9862776647dfd1289c60/wirepas_backend_client-1.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2565513cb035dbdfc747faaf8fbe1af", "sha256": "b1493bb784120610e73c84c407c6c0b4b10230b7afdb461e79495335448b6fe5"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0.tar.gz", "has_sig": false, "md5_digest": "d2565513cb035dbdfc747faaf8fbe1af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103709, "upload_time": "2019-09-20T07:14:34", "upload_time_iso_8601": "2019-09-20T07:14:34.691666Z", "url": "https://files.pythonhosted.org/packages/df/29/0e4d41af7f177d69fe341655133279831aa02b7974dba4acca921c90dfcf/wirepas_backend_client-1.2.0.tar.gz", "yanked": false}], "1.2.0rc2": [{"comment_text": "", "digests": {"md5": "3af139e5e68df313483ef74b25fb1965", "sha256": "f34f52d1d97d8a6f0d6c92c39c5afd72e9c89680bb583930afb7c0942794d4b4"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "3af139e5e68df313483ef74b25fb1965", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 126781, "upload_time": "2019-09-12T11:02:30", "upload_time_iso_8601": "2019-09-12T11:02:30.075824Z", "url": "https://files.pythonhosted.org/packages/f5/44/50b3a9c580c06776c497ff32ce83d7dd12bfb2deaad63e321ed54fdbe77e/wirepas_backend_client-1.2.0rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2810ceff7747479d0bfcb336d062d851", "sha256": "8c19f03dfc179914da63d00e045a62357934ff4622ecdd0d02945bfe6a56b8ba"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0rc2.tar.gz", "has_sig": false, "md5_digest": "2810ceff7747479d0bfcb336d062d851", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 81868, "upload_time": "2019-09-12T11:02:32", "upload_time_iso_8601": "2019-09-12T11:02:32.356925Z", "url": "https://files.pythonhosted.org/packages/77/df/e4467d5dbdeb155fc56a4f63c1698cc7709bd6ac16387bc3f7ddd3d94c4c/wirepas_backend_client-1.2.0rc2.tar.gz", "yanked": false}], "1.2.0rc3": [{"comment_text": "", "digests": {"md5": "d8e65bfe8a7477e890472aebb9bfce7c", "sha256": "e7821f74e4af21ad4528582c747b19d70bf4d387bcacfba747f0a4d13c7e9402"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "d8e65bfe8a7477e890472aebb9bfce7c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 127740, "upload_time": "2019-09-17T09:41:16", "upload_time_iso_8601": "2019-09-17T09:41:16.531972Z", "url": "https://files.pythonhosted.org/packages/e8/34/9c2846434bf1266cf9ab750af57ff51f7ae240ee64f5c0a239ae746ee3df/wirepas_backend_client-1.2.0rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0e838df28ca3e41e90846fe3018f08b", "sha256": "706bfaa0bf5e58fc40af61c8f4c694bfde530ed45470422f4a7e151d6078d113"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.0rc3.tar.gz", "has_sig": false, "md5_digest": "a0e838df28ca3e41e90846fe3018f08b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 82984, "upload_time": "2019-09-17T09:41:18", "upload_time_iso_8601": "2019-09-17T09:41:18.883475Z", "url": "https://files.pythonhosted.org/packages/a7/26/c480d0ce37ce853a71668eb633868131e1baaeaa52f8aba29acea0cfe085/wirepas_backend_client-1.2.0rc3.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "23c8e535dfdcef08ac50f3adaff4f1fc", "sha256": "fe600c0ef73f601bf274efd8372e308494a1fbbbbe565b3ef283d8c1047d4482"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "23c8e535dfdcef08ac50f3adaff4f1fc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140862, "upload_time": "2019-10-01T08:31:17", "upload_time_iso_8601": "2019-10-01T08:31:17.774650Z", "url": "https://files.pythonhosted.org/packages/3e/0f/28fedbea0a790861a863035328d513fe4e0928de48b16aeb986631c5ad9e/wirepas_backend_client-1.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "17acd29467f6423e77e2405c7cb2568a", "sha256": "64e1986a953c6905390b0f8f197dc75547e0780d346ad1f857ebc10c329bdd9d"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.1.tar.gz", "has_sig": false, "md5_digest": "17acd29467f6423e77e2405c7cb2568a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103756, "upload_time": "2019-10-01T08:31:20", "upload_time_iso_8601": "2019-10-01T08:31:20.353996Z", "url": "https://files.pythonhosted.org/packages/e1/40/bd62e30e3dec99b84e66e69c8bc6a941bd7a00e21940530a8a93c073246c/wirepas_backend_client-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "e525a1cebed1816865b6e1f28679d7bf", "sha256": "1a915f51daf6feb9575ed3950a04fa5e1fdb05526ae0eb6579ad5b2ad3714d17"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e525a1cebed1816865b6e1f28679d7bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140642, "upload_time": "2020-01-15T08:19:07", "upload_time_iso_8601": "2020-01-15T08:19:07.305836Z", "url": "https://files.pythonhosted.org/packages/a3/bb/bf8810f8b892ba30bac5d31e8d13da491b697e02222066b5e84aea009cca/wirepas_backend_client-1.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fcfe75041ea0cb8524b2319093bc3bd2", "sha256": "3f82f3bd2066a11238a3219dca115bcca84f614da422cfb8fc58028e11d51f93"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2.tar.gz", "has_sig": false, "md5_digest": "fcfe75041ea0cb8524b2319093bc3bd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102491, "upload_time": "2020-01-15T08:19:09", "upload_time_iso_8601": "2020-01-15T08:19:09.436203Z", "url": "https://files.pythonhosted.org/packages/47/58/59dccc04a2a8b69bea349d7cc5c6de54261334a48ba190f1f88a6657b570/wirepas_backend_client-1.2.2.tar.gz", "yanked": false}], "1.2.2rc1": [{"comment_text": "", "digests": {"md5": "7baf8a850d97f130d0607f4fcd583ccc", "sha256": "147ef91ac2356960186fa4b3f142e5bc1122d233318e5fe64aaaca4df011c235"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "7baf8a850d97f130d0607f4fcd583ccc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140551, "upload_time": "2019-12-18T07:45:16", "upload_time_iso_8601": "2019-12-18T07:45:16.177317Z", "url": "https://files.pythonhosted.org/packages/10/c9/bf71cd76fdb53e74aab74cb4b33672ffabaadf988a0dc0f3c18ac3455308/wirepas_backend_client-1.2.2rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "69cec3ebc52a58998d468cb1858ed1cd", "sha256": "ac7a73d1d8e86a552ba46fcae00e2a062bf0b61f9e96a26bc7a6b852267f8218"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc1.tar.gz", "has_sig": false, "md5_digest": "69cec3ebc52a58998d468cb1858ed1cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102409, "upload_time": "2019-12-18T07:45:18", "upload_time_iso_8601": "2019-12-18T07:45:18.694574Z", "url": "https://files.pythonhosted.org/packages/01/93/5bfe3bf579dae04dd7d1446f87c98756f40f47042ef6428963bd1277dea6/wirepas_backend_client-1.2.2rc1.tar.gz", "yanked": false}], "1.2.2rc2": [{"comment_text": "", "digests": {"md5": "3c1ae1c400e0ced27ffe577290365e46", "sha256": "bda7f72537186bfa5d50b2d8eed86f0477e08db50c836e4a9b6af1282207ff62"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "3c1ae1c400e0ced27ffe577290365e46", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140652, "upload_time": "2019-12-20T13:51:07", "upload_time_iso_8601": "2019-12-20T13:51:07.670286Z", "url": "https://files.pythonhosted.org/packages/4e/f9/4262a9b305e8f5067b6e04de230efb725609d086b8a92438ad56e60e3ed7/wirepas_backend_client-1.2.2rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "243dedc530646bb239d615d85a77cc3e", "sha256": "7f527945408a315e8ca6ba67105cc03910a19b8ab53704050c0cfd5279903146"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc2.tar.gz", "has_sig": false, "md5_digest": "243dedc530646bb239d615d85a77cc3e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102391, "upload_time": "2019-12-20T13:51:09", "upload_time_iso_8601": "2019-12-20T13:51:09.900456Z", "url": "https://files.pythonhosted.org/packages/73/4a/82a69c012e2d75b70b038e4789ccab430c74c9404de945b59359169fcf9c/wirepas_backend_client-1.2.2rc2.tar.gz", "yanked": false}], "1.2.2rc3": [{"comment_text": "", "digests": {"md5": "276669ca361136ff81b89a843dfe9ab1", "sha256": "6b5134b3023b221e96125547479edfaf272ea7d4d5962eb5971477ae10d74c4b"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc3-py3-none-any.whl", "has_sig": false, "md5_digest": "276669ca361136ff81b89a843dfe9ab1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140656, "upload_time": "2020-01-08T07:37:54", "upload_time_iso_8601": "2020-01-08T07:37:54.948111Z", "url": "https://files.pythonhosted.org/packages/2a/b4/0a94aa2dfbdb789559281c4583d660a7e350ab0a10550a41ebabe14d7032/wirepas_backend_client-1.2.2rc3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2f841a2ced4b9e8ff23a6915e4f34dae", "sha256": "9c625a4af061004050b8643c386fe17c8534a8d36616aa522f4e97e9e9370f28"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.2rc3.tar.gz", "has_sig": false, "md5_digest": "2f841a2ced4b9e8ff23a6915e4f34dae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102388, "upload_time": "2020-01-08T07:37:57", "upload_time_iso_8601": "2020-01-08T07:37:57.022831Z", "url": "https://files.pythonhosted.org/packages/4d/66/d4d294e043b80e2ef5a1dc7adf810b24dd274bea8d7723cab5c4d2f65a80/wirepas_backend_client-1.2.2rc3.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "728dc67eb0df7c6d7cc2591821bcf9e4", "sha256": "61d09390061430eab4bd982eb4c5c869bde0f0b0394f70e4c2964a262d3a55e5"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "728dc67eb0df7c6d7cc2591821bcf9e4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140695, "upload_time": "2020-01-16T14:24:34", "upload_time_iso_8601": "2020-01-16T14:24:34.305485Z", "url": "https://files.pythonhosted.org/packages/88/4a/06d1223aef7abb6303c1e7d709c0fbd57a9fa892462dbc54da22997ad7da/wirepas_backend_client-1.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f5ea9a4c9532768cff557bab2837360e", "sha256": "8ead4b6cfc0cac759e093d929deca6723d8a89fbcaf1237b28e7c2c09af3c3d2"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.3.tar.gz", "has_sig": false, "md5_digest": "f5ea9a4c9532768cff557bab2837360e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 102539, "upload_time": "2020-01-16T14:24:37", "upload_time_iso_8601": "2020-01-16T14:24:37.184632Z", "url": "https://files.pythonhosted.org/packages/2c/64/cb5b65b51b631fdde70a9862c83aa03e3d9085fdead541b683428f74ff61/wirepas_backend_client-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "1715581308b24a794682be9ab5ceca44", "sha256": "2def2fe9f5b907f735f9d66b70533116630aabef6dacb00bc3afb41583ca5174"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "1715581308b24a794682be9ab5ceca44", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 140228, "upload_time": "2020-01-27T10:11:05", "upload_time_iso_8601": "2020-01-27T10:11:05.124293Z", "url": "https://files.pythonhosted.org/packages/be/ea/1458f785f805ed2ad7c083b89b039d6976dca61bced69355485291b84ea3/wirepas_backend_client-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b90d2ad1068be5d3042f25e6b45dfbf", "sha256": "0a0b213d1f83f3464b16771caeb40311bc303b6cf4731bbf4d49830b1645c133"}, "downloads": -1, "filename": "wirepas_backend_client-1.2.4.tar.gz", "has_sig": false, "md5_digest": "8b90d2ad1068be5d3042f25e6b45dfbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 103023, "upload_time": "2020-01-27T10:11:07", "upload_time_iso_8601": "2020-01-27T10:11:07.794172Z", "url": "https://files.pythonhosted.org/packages/2e/f3/65da381fa71c8d9decf4250ad58cf68d5ca2d04cae99ca1ffb387b077f81/wirepas_backend_client-1.2.4.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "a5c4703fe0ea6d5023ffe97de6a919c9", "sha256": "e6d6a1f38b3774dab9fe3d8dcd757a33afa0c8700618b7a17e6d551a2c79e41c"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a5c4703fe0ea6d5023ffe97de6a919c9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 151288, "upload_time": "2020-01-30T13:38:35", "upload_time_iso_8601": "2020-01-30T13:38:35.935940Z", "url": "https://files.pythonhosted.org/packages/e8/30/d290341e04bc8ae1a9f0351e7a8995fb5140b753827f193b121d445f2a38/wirepas_backend_client-1.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b656742edf98857e1d3de3df64983f6", "sha256": "3c7311b63fee2a7f5c84ba7e30e006a105cbb68c4bd6b484b8f8467581f7c56e"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.0.tar.gz", "has_sig": false, "md5_digest": "6b656742edf98857e1d3de3df64983f6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 111842, "upload_time": "2020-01-30T13:38:38", "upload_time_iso_8601": "2020-01-30T13:38:38.942431Z", "url": "https://files.pythonhosted.org/packages/6c/6b/7fb56aa33c91b7b983de268b6b6f076acfb242a4dca8a9341cac275f5eff/wirepas_backend_client-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "4303fdf0d3af0e07d420c8c1595c29aa", "sha256": "43f6dd18137ab690df34acd578903146663325f74c6633754b9eef1b97c98b6e"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4303fdf0d3af0e07d420c8c1595c29aa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 154256, "upload_time": "2020-02-04T14:01:29", "upload_time_iso_8601": "2020-02-04T14:01:29.603000Z", "url": "https://files.pythonhosted.org/packages/fc/40/7f5f2d9bbaf10eaa39ec1689c9bb5dbe26b2c284d14ce6ad73916108ea79/wirepas_backend_client-1.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b6f62e3aec0ad85b00028ff69f91d63", "sha256": "749702541aa5e23e73dba69c39bbfdb8b2eda34020471eb08ddd69dd5b93222f"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.1.tar.gz", "has_sig": false, "md5_digest": "4b6f62e3aec0ad85b00028ff69f91d63", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 113194, "upload_time": "2020-02-04T14:01:32", "upload_time_iso_8601": "2020-02-04T14:01:32.334782Z", "url": "https://files.pythonhosted.org/packages/d9/62/e69b8d7856c206f99c38626449880e1beb61ed8dc78417a30fc072fec9b1/wirepas_backend_client-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "3a8973d45c6e828b8ac6cb68300a5904", "sha256": "d72426bc959dea8be2ac65628b481df31284dc218ff4b319ae5190ffe0f8ece4"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3a8973d45c6e828b8ac6cb68300a5904", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156497, "upload_time": "2020-02-14T13:48:21", "upload_time_iso_8601": "2020-02-14T13:48:21.149632Z", "url": "https://files.pythonhosted.org/packages/2f/17/443bb0cc1ac79f9fec0bf07bad48216e5136bf956c39981280f75b51e930/wirepas_backend_client-1.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff2cf54d175f1508c1a94153945dc061", "sha256": "11f9215e8421b6331757014bed0771ca243ca142355e6198493e8c164cc65e4c"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2.tar.gz", "has_sig": false, "md5_digest": "ff2cf54d175f1508c1a94153945dc061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115658, "upload_time": "2020-02-14T13:48:24", "upload_time_iso_8601": "2020-02-14T13:48:24.231871Z", "url": "https://files.pythonhosted.org/packages/50/86/fc0b1b955838997b8710533b6b92b1bb62555563bb1d1c0c1d3a7d4b0b00/wirepas_backend_client-1.3.2.tar.gz", "yanked": false}], "1.3.2rc1": [{"comment_text": "", "digests": {"md5": "741f2acc8bf65e2b1e2a98b1987828e8", "sha256": "d7694981af199952d91b98dc378aca2790dce4cb37e8282673299cdfeccc8529"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "741f2acc8bf65e2b1e2a98b1987828e8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156586, "upload_time": "2020-02-14T10:19:27", "upload_time_iso_8601": "2020-02-14T10:19:27.152476Z", "url": "https://files.pythonhosted.org/packages/2e/c7/2b3f2a6b8dd71ab2e5efb5237269c866153cb7c4c0271b7589c8b54298d2/wirepas_backend_client-1.3.2rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f059ea6c41902b697ebaea59ea77646c", "sha256": "cea91c05267d68e6c500da9096cdaedd28f091f0ddfce9c192f57d32a23c18a1"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2rc1.tar.gz", "has_sig": false, "md5_digest": "f059ea6c41902b697ebaea59ea77646c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115652, "upload_time": "2020-02-14T10:19:29", "upload_time_iso_8601": "2020-02-14T10:19:29.314025Z", "url": "https://files.pythonhosted.org/packages/1a/5b/d984908e7e7bc55154a1f130658fed493c5eaef6c97cb7f3c02c38b0128c/wirepas_backend_client-1.3.2rc1.tar.gz", "yanked": false}], "1.3.3rc1": [{"comment_text": "", "digests": {"md5": "9fd99aeb8500cbf35e23a370d67d0e05", "sha256": "95976b20860fda9788b92089178627ac9b4f645753cc54be4abbaaa50a5dedc5"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.3rc1-py3-none-any.whl", "has_sig": false, "md5_digest": "9fd99aeb8500cbf35e23a370d67d0e05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 157605, "upload_time": "2020-02-18T12:00:43", "upload_time_iso_8601": "2020-02-18T12:00:43.743627Z", "url": "https://files.pythonhosted.org/packages/19/20/77853af99e1de4a145ba0c25298ba9eac5f5b0d5a077000541b1f288b5f1/wirepas_backend_client-1.3.3rc1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fb2bc2acfa43881482f91f0c26626033", "sha256": "603582d588b31df5fb025f59ee550669e405f9923c716e24be87ffdc0e731fc2"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.3rc1.tar.gz", "has_sig": false, "md5_digest": "fb2bc2acfa43881482f91f0c26626033", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 116711, "upload_time": "2020-02-18T12:00:46", "upload_time_iso_8601": "2020-02-18T12:00:46.406779Z", "url": "https://files.pythonhosted.org/packages/a2/82/22b7b6445146b1b3b3eddbe8febc95d00e602aae2c474cd3591c409a5567/wirepas_backend_client-1.3.3rc1.tar.gz", "yanked": false}], "1.3.3rc2": [{"comment_text": "", "digests": {"md5": "d5e564c7560bdb1ce6a4579bd8bd9652", "sha256": "8aa7d68ce702ae96cdb5e48c9c79e0cf840c881bbd1e5f98bb6538398ca24091"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.3rc2-py3-none-any.whl", "has_sig": false, "md5_digest": "d5e564c7560bdb1ce6a4579bd8bd9652", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 158303, "upload_time": "2020-02-20T08:54:46", "upload_time_iso_8601": "2020-02-20T08:54:46.073806Z", "url": "https://files.pythonhosted.org/packages/32/10/1bf59d9c5a202635ccc3505d2203f664c059d5f83f5026716d38f1b90b4f/wirepas_backend_client-1.3.3rc2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "508b05274711d7c3a59f027e5888b264", "sha256": "ddfdebaf67c21fcffc0672a8f1e8b4d9348418f065d57e473d17f7fd3ae2207e"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.3rc2.tar.gz", "has_sig": false, "md5_digest": "508b05274711d7c3a59f027e5888b264", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 117400, "upload_time": "2020-02-20T08:54:48", "upload_time_iso_8601": "2020-02-20T08:54:48.721856Z", "url": "https://files.pythonhosted.org/packages/e4/34/7bfec806e25f3579261405ed458f8ab10e70949dbdadd11e17ad8cf6eac3/wirepas_backend_client-1.3.3rc2.tar.gz", "yanked": false}], "1.3.4rc4": [{"comment_text": "", "digests": {"md5": "3ecd284ecc3cb763cd4ac9cc053f0a5c", "sha256": "ae5f7298f53bed0ed06cd9173d0a91e2936e76b57d3c26e720036acc45e21fb3"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.4rc4-py3-none-any.whl", "has_sig": false, "md5_digest": "3ecd284ecc3cb763cd4ac9cc053f0a5c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 165932, "upload_time": "2020-04-09T10:19:29", "upload_time_iso_8601": "2020-04-09T10:19:29.045847Z", "url": "https://files.pythonhosted.org/packages/66/d9/a442b9b09d9a1b7eb0c0203e192823ef3d7047d1859d9ab7958e8b3790ab/wirepas_backend_client-1.3.4rc4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b43119ae678b834f229c52280a29bbe", "sha256": "31d88d587e6f7978a366f6a817fc6c68927ce3297d294ea687be095e2bbe4214"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.4rc4.tar.gz", "has_sig": false, "md5_digest": "2b43119ae678b834f229c52280a29bbe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 123571, "upload_time": "2020-04-09T10:19:31", "upload_time_iso_8601": "2020-04-09T10:19:31.465197Z", "url": "https://files.pythonhosted.org/packages/1f/07/0d107358ba838f74043be4d4dacfeb9f322032f2a16a76beff3b2af4ff4a/wirepas_backend_client-1.3.4rc4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3a8973d45c6e828b8ac6cb68300a5904", "sha256": "d72426bc959dea8be2ac65628b481df31284dc218ff4b319ae5190ffe0f8ece4"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3a8973d45c6e828b8ac6cb68300a5904", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 156497, "upload_time": "2020-02-14T13:48:21", "upload_time_iso_8601": "2020-02-14T13:48:21.149632Z", "url": "https://files.pythonhosted.org/packages/2f/17/443bb0cc1ac79f9fec0bf07bad48216e5136bf956c39981280f75b51e930/wirepas_backend_client-1.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff2cf54d175f1508c1a94153945dc061", "sha256": "11f9215e8421b6331757014bed0771ca243ca142355e6198493e8c164cc65e4c"}, "downloads": -1, "filename": "wirepas_backend_client-1.3.2.tar.gz", "has_sig": false, "md5_digest": "ff2cf54d175f1508c1a94153945dc061", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 115658, "upload_time": "2020-02-14T13:48:24", "upload_time_iso_8601": "2020-02-14T13:48:24.231871Z", "url": "https://files.pythonhosted.org/packages/50/86/fc0b1b955838997b8710533b6b92b1bb62555563bb1d1c0c1d3a7d4b0b00/wirepas_backend_client-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:28:43 2020"}