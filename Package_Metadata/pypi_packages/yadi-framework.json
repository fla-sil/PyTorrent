{"info": {"author": "fcracker79", "author_email": "fcracker79@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development"], "description": "|build status| |Pypi|\n\nYADI\n====\n\nYet Another Dependency Injection framework\n\nYADI is a dependency injection framework. It supports both classes and\nfunction in a declarative fashion.\n\nInstallation\n------------\n\n.. code:: sh\n\n    pip install yadi-framework\n\nBasic examples\n--------------\n\nThis is a simple injection example:\n\n.. code:: python\n\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject\n    from yadi.types import Yadi\n\n\n    @inject()\n    class Component1:\n        pass\n\n\n    @inject()\n    class Component2:\n        def __init__(self, c1: Yadi[Component1]):\n            self.c1 = c1\n\n\n    @inject()\n    class Component3:\n        def __init__(self, c1: Yadi[Component1]):\n            self.c1 = c1\n\n\n    c2 = DEFAULT_CONTEXT.get_bean(Component2)  # type: Component2\n    c3 = DEFAULT_CONTEXT.get_bean(Component3)  # type: Component3\n    print(Component1 is type(c2.c1))  # True\n    print(c2.c1 is c3.c1)  # True\n\nHere it is an example of how to inject functions:\n\n.. code:: python\n\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject\n    from yadi.types import Yadi\n\n\n    @inject()\n    class Component:\n        pass\n\n\n    @inject(name='another_function')\n    def h(x, y, z=None):\n        assert isinstance(x, Component)\n        print('Function h:', type(x))\n\n\n    @inject(name='my_function')\n    def f(a: Yadi[Component], b, c: Yadi['another_function'] = None, d: str = None):\n        c(a, b, z=d)\n\n\n    DEFAULT_CONTEXT.get_bean('my_function')(23, d=5)  # Function h: <class '__main__.Component'>\n\nScopes\n------\n\nBy default, all the beans are saved as Singleton. Each singleton is\nstored in its context, that is, there is a single instance *for each\ncontext instance*.\n\nAlternatively, it is possible to save beans as Prototypes, that is, a\ndifferent instance is generated whenever the bean is referred to.\n\n.. code:: python\n\n    from yadi import context\n    from yadi import types\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject\n\n\n    @inject(scope=context.PROTOTYPE, name='a component 1')\n    class Component1:\n        pass\n\n\n    @inject(name='a component 2')\n    class Component2:\n        def __init__(\n                self,\n                f1: types.Yadi[Component1],\n                f2: types.Yadi['a component 1']):\n            self.f1, self.f2 = f1, f2\n\n\n    @inject(name='a component 3')\n    class Component3:\n        def __init__(\n                self,\n                f1: types.Yadi[Component1],\n                f2: types.Yadi['a component 1']):\n            self.f1, self.f2 = f1, f2\n\n\n    c2 = DEFAULT_CONTEXT.get_bean('a component 2')  # type: Component2\n    c3 = DEFAULT_CONTEXT.get_bean('a component 3')  # type: Component3\n\n    print(isinstance(c2.f1, Component1))  # True\n    print(isinstance(c2.f2, Component1))  # True\n\n    print(isinstance(c3.f1, Component1))  # True\n    print(isinstance(c3.f2, Component1))  # True\n\n    print(c2.f1 == c2.f2)  # False\n    print(c3.f1 == c3.f2)  # False\n    print(c2.f1 == c3.f1)  # False\n    print(c2.f1 == c3.f2)  # False\n    print(c2.f2 == c3.f1)  # False\n    print(c2.f2 == c3.f2)  # False\n\nIt is also possible to define custom scopes and add them to a context.\n\nHere it is an example of thread-local scope:\n\n.. code:: python\n\n    import threading\n\n    from yadi.context import Scope\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject\n\n\n    class ThreadLocalScope(Scope):\n        def __init__(self):\n            self._tl = threading.local()\n\n        def get(self, key: str):\n            return getattr(self._tl, key, None)\n\n        def set(self, key: str, obj: object):\n            setattr(self._tl, key, obj)\n\n        @property\n        def name(self):\n            return 'threadlocal'\n\n        @property\n        def level(self):\n            return 100\n\n\n    DEFAULT_CONTEXT.add_scope(ThreadLocalScope())\n\n\n    @inject(scope='threadlocal', name='a component 1')\n    class Component1:\n        pass\n\n\n    c1 = DEFAULT_CONTEXT.get_bean('a component 1')\n    c1_2 = DEFAULT_CONTEXT.get_bean('a component 1')\n\n    thread_c1 = []\n    c1_t = None\n\n\n    def _f():\n        global c1_t\n        c1_t = DEFAULT_CONTEXT.get_bean('a component 1')\n        print(c1_t == DEFAULT_CONTEXT.get_bean('a component 1'))  # True\n        thread_c1.append(c1_t)\n\n\n    t = threading.Thread(target=_f)\n    t.start()\n    t.join()\n\n    print(c1 == c1_2)  # True\n    print(c1 == c1_t)  # False\n\n**Scoped proxies**\n\nLet's suppose to inject a thread-local scoped bean in a singleton. As a\nresult, different thread sharing the same singleton should not share the\nsame thread local bean, which is not possible.\n\nIn order to solve this issue, YADI creates a proxy around the injected\nbean that delegates any access to the current bean in the context.\n\nMore in general, scopes have a ``level`` attribute: if the injected bean\nhas a higher scope level than the container bean, the injected bean is\nwrapped into a scoped proxy.\n\nHere it is an example of scoped proxies (don't worry, you do not have to\ndo anything to make it work).\n\n.. code:: python\n\n    import random\n    import threading\n\n    from yadi.bean_factories import _ScopedProxy\n    from yadi.context import Scope\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject\n    from yadi.types import Yadi\n\n\n    class ThreadLocalScope(Scope):\n        def __init__(self):\n            self._tl = threading.local()\n\n        def get(self, key: str):\n            return getattr(self._tl, key, None)\n\n        def set(self, key: str, obj: object):\n            setattr(self._tl, key, obj)\n\n        @property\n        def name(self):\n            return 'threadlocal'\n\n        @property\n        def level(self):\n            return 100\n\n\n    DEFAULT_CONTEXT.add_scope(ThreadLocalScope())\n\n\n    @inject(scope='threadlocal')\n    class Component1:\n        def __init__(self):\n            self.object_id = random.randint(0, 1000000)\n\n\n    @inject(name='a component')\n    class Component2:\n        def __init__(self, f1: Yadi[Component1]):\n            self.f1 = f1\n\n\n    component = DEFAULT_CONTEXT.get_bean('a component')\n    component_thread_id = []\n    print('Main thread, scoped proxy type', type(component.f1) == _ScopedProxy)  # Main thread, scoped proxy type True\n\n\n    def _f():\n        component_thread = DEFAULT_CONTEXT.get_bean('a component')\n        print('Subthread, scoped proxy type', type(component_thread.f1) == _ScopedProxy)\n        component_thread_id.append(component_thread.f1.object_id)\n        print(\n            'Subthread, bean id',\n            component_thread.f1.object_id == DEFAULT_CONTEXT.get_bean('a component').f1.object_id)\n\n\n    t = threading.Thread(target=_f)\n    t.start()\n    t.join()  # Subthread, scoped proxy type True\n              # Subthread, bean id True\n\n    print('Main thread, bean id', component.f1.object_id == component_thread_id[0])  # Main thread, bean id False\n\nContexts\n--------\n\nAll the components are kept in a context.\n\nBy default, the ``inject`` decorator keeps the beans instances in\n``yadi.context_impl.DEFAULT_CONTEXT``.\n\nYou might want to instantiate a new context and pass it as a ``context``\nkeyword argument of ``inject`` decorator.\n\nLife cycle\n----------\n\nIt is possible to trigger beans whenever one of them is created. In\norder to define the method(s) to trigger, it is necessary to decorated\nthem with ``post_create``, as follows:\n\n.. code:: python\n\n    from yadi.context_impl import DEFAULT_CONTEXT\n    from yadi.decorators import inject, post_create\n    from yadi.types import Yadi\n\n\n    @inject()\n    class Component1:\n        pass\n\n    @inject()\n    class Component2:\n        def __init__(self, c1: Yadi[Component1]):\n            self.c1 = c1\n            self.invoked_post_create = 0\n\n        @post_create\n        def finished_creating(self):\n            print('Component 1:', self.c1)  # Component 1: <__main__.Component1 object at 0x7f42e90d2e48>\n            self.invoked_post_create += 1\n\n\n    component_2 = DEFAULT_CONTEXT.get_bean(Component2)  # type: Component2\n    print('post_create invokations:', component_2.invoked_post_create)  # post_create invokations: 1\n    DEFAULT_CONTEXT.get_bean(Component2)\n    print('post_create invokations:', component_2.invoked_post_create)  # post_create invokations: 1\n\n.. |build status| image:: https://img.shields.io/travis/fcracker79/yadi/master.svg?style=flat-square\n   :target: https://travis-ci.org/fcracker79/yadi\n.. |Pypi| image:: https://img.shields.io/pypi/v/yadi-framework.svg\n   :target: https://img.shields.io/pypi/v/yadi-framework.svg", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fcracker79/yadi", "keywords": "dependency injection", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yadi-framework", "package_url": "https://pypi.org/project/yadi-framework/", "platform": "", "project_url": "https://pypi.org/project/yadi-framework/", "project_urls": {"Homepage": "https://github.com/fcracker79/yadi"}, "release_url": "https://pypi.org/project/yadi-framework/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "YADI - Yet another dependency injection framework", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/fcracker79/yadi\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87f25c9514b884c048748d2a903af9d199ec1caf/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f66637261636b657237392f796164692f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a> <a href=\"https://img.shields.io/pypi/v/yadi-framework.svg\" rel=\"nofollow\"><img alt=\"Pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d04e3633ac3f3aaa3ce30f332b273bb57ca74844/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f796164692d6672616d65776f726b2e737667\"></a></p>\n<div id=\"yadi\">\n<h2>YADI</h2>\n<p>Yet Another Dependency Injection framework</p>\n<p>YADI is a dependency injection framework. It supports both classes and\nfunction in a declarative fashion.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>pip install yadi-framework\n</pre>\n</div>\n<div id=\"basic-examples\">\n<h3>Basic examples</h3>\n<p>This is a simple injection example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.types</span> <span class=\"kn\">import</span> <span class=\"n\">Yadi</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component1</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component2</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component3</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span>\n\n\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"n\">Component2</span><span class=\"p\">)</span>  <span class=\"c1\"># type: Component2</span>\n<span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"n\">Component3</span><span class=\"p\">)</span>  <span class=\"c1\"># type: Component3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">Component1</span> <span class=\"ow\">is</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">c1</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">c1</span> <span class=\"ow\">is</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">c1</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n</pre>\n<p>Here it is an example of how to inject functions:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.types</span> <span class=\"kn\">import</span> <span class=\"n\">Yadi</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'another_function'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">h</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">Component</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Function h:'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">))</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'my_function'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">f</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"s1\">'another_function'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"n\">c</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">z</span><span class=\"o\">=</span><span class=\"n\">d</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'my_function'</span><span class=\"p\">)(</span><span class=\"mi\">23</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>  <span class=\"c1\"># Function h: &lt;class '__main__.Component'&gt;</span>\n</pre>\n</div>\n<div id=\"scopes\">\n<h3>Scopes</h3>\n<p>By default, all the beans are saved as Singleton. Each singleton is\nstored in its context, that is, there is a single instance <em>for each\ncontext instance</em>.</p>\n<p>Alternatively, it is possible to save beans as Prototypes, that is, a\ndifferent instance is generated whenever the bean is referred to.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yadi</span> <span class=\"kn\">import</span> <span class=\"n\">context</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi</span> <span class=\"kn\">import</span> <span class=\"n\">types</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"n\">context</span><span class=\"o\">.</span><span class=\"n\">PROTOTYPE</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a component 1'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component1</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a component 2'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component2</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">f1</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">],</span>\n            <span class=\"n\">f2</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"s1\">'a component 1'</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a component 3'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component3</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"p\">,</span>\n            <span class=\"n\">f1</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">],</span>\n            <span class=\"n\">f2</span><span class=\"p\">:</span> <span class=\"n\">types</span><span class=\"o\">.</span><span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"s1\">'a component 1'</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f2</span> <span class=\"o\">=</span> <span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">f2</span>\n\n\n<span class=\"n\">c2</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 2'</span><span class=\"p\">)</span>  <span class=\"c1\"># type: Component2</span>\n<span class=\"n\">c3</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 3'</span><span class=\"p\">)</span>  <span class=\"c1\"># type: Component3</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">Component1</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">Component1</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">,</span> <span class=\"n\">Component1</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">,</span> <span class=\"n\">Component1</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f1</span> <span class=\"o\">==</span> <span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f1</span> <span class=\"o\">==</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f1</span> <span class=\"o\">==</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f1</span> <span class=\"o\">==</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f2</span> <span class=\"o\">==</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c2</span><span class=\"o\">.</span><span class=\"n\">f2</span> <span class=\"o\">==</span> <span class=\"n\">c3</span><span class=\"o\">.</span><span class=\"n\">f2</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n</pre>\n<p>It is also possible to define custom scopes and add them to a context.</p>\n<p>Here it is an example of thread-local scope:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.context</span> <span class=\"kn\">import</span> <span class=\"n\">Scope</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ThreadLocalScope</span><span class=\"p\">(</span><span class=\"n\">Scope</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'threadlocal'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">100</span>\n\n\n<span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">add_scope</span><span class=\"p\">(</span><span class=\"n\">ThreadLocalScope</span><span class=\"p\">())</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s1\">'threadlocal'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a component 1'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component1</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 1'</span><span class=\"p\">)</span>\n<span class=\"n\">c1_2</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 1'</span><span class=\"p\">)</span>\n\n<span class=\"n\">thread_c1</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"n\">c1_t</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_f</span><span class=\"p\">():</span>\n    <span class=\"k\">global</span> <span class=\"n\">c1_t</span>\n    <span class=\"n\">c1_t</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 1'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c1_t</span> <span class=\"o\">==</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component 1'</span><span class=\"p\">))</span>  <span class=\"c1\"># True</span>\n    <span class=\"n\">thread_c1</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">c1_t</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_f</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c1_2</span><span class=\"p\">)</span>  <span class=\"c1\"># True</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c1</span> <span class=\"o\">==</span> <span class=\"n\">c1_t</span><span class=\"p\">)</span>  <span class=\"c1\"># False</span>\n</pre>\n<p><strong>Scoped proxies</strong></p>\n<p>Let\u2019s suppose to inject a thread-local scoped bean in a singleton. As a\nresult, different thread sharing the same singleton should not share the\nsame thread local bean, which is not possible.</p>\n<p>In order to solve this issue, YADI creates a proxy around the injected\nbean that delegates any access to the current bean in the context.</p>\n<p>More in general, scopes have a <tt>level</tt> attribute: if the injected bean\nhas a higher scope level than the container bean, the injected bean is\nwrapped into a scoped proxy.</p>\n<p>Here it is an example of scoped proxies (don\u2019t worry, you do not have to\ndo anything to make it work).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">random</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.bean_factories</span> <span class=\"kn\">import</span> <span class=\"n\">_ScopedProxy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.context</span> <span class=\"kn\">import</span> <span class=\"n\">Scope</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.types</span> <span class=\"kn\">import</span> <span class=\"n\">Yadi</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ThreadLocalScope</span><span class=\"p\">(</span><span class=\"n\">Scope</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">local</span><span class=\"p\">()</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">get</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">getattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">set</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">:</span> <span class=\"nb\">object</span><span class=\"p\">):</span>\n        <span class=\"nb\">setattr</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_tl</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">obj</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">name</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'threadlocal'</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">level</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"mi\">100</span>\n\n\n<span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">add_scope</span><span class=\"p\">(</span><span class=\"n\">ThreadLocalScope</span><span class=\"p\">())</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"o\">=</span><span class=\"s1\">'threadlocal'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component1</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">object_id</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1000000</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'a component'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component2</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">f1</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f1</span> <span class=\"o\">=</span> <span class=\"n\">f1</span>\n\n\n<span class=\"n\">component</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component'</span><span class=\"p\">)</span>\n<span class=\"n\">component_thread_id</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Main thread, scoped proxy type'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">_ScopedProxy</span><span class=\"p\">)</span>  <span class=\"c1\"># Main thread, scoped proxy type True</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_f</span><span class=\"p\">():</span>\n    <span class=\"n\">component_thread</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Subthread, scoped proxy type'</span><span class=\"p\">,</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">component_thread</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"n\">_ScopedProxy</span><span class=\"p\">)</span>\n    <span class=\"n\">component_thread_id</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">component_thread</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">object_id</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Subthread, bean id'</span><span class=\"p\">,</span>\n        <span class=\"n\">component_thread</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">object_id</span> <span class=\"o\">==</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"s1\">'a component'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">object_id</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Thread</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"n\">_f</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">()</span>  <span class=\"c1\"># Subthread, scoped proxy type True</span>\n          <span class=\"c1\"># Subthread, bean id True</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Main thread, bean id'</span><span class=\"p\">,</span> <span class=\"n\">component</span><span class=\"o\">.</span><span class=\"n\">f1</span><span class=\"o\">.</span><span class=\"n\">object_id</span> <span class=\"o\">==</span> <span class=\"n\">component_thread_id</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>  <span class=\"c1\"># Main thread, bean id False</span>\n</pre>\n</div>\n<div id=\"contexts\">\n<h3>Contexts</h3>\n<p>All the components are kept in a context.</p>\n<p>By default, the <tt>inject</tt> decorator keeps the beans instances in\n<tt>yadi.context_impl.DEFAULT_CONTEXT</tt>.</p>\n<p>You might want to instantiate a new context and pass it as a <tt>context</tt>\nkeyword argument of <tt>inject</tt> decorator.</p>\n</div>\n<div id=\"life-cycle\">\n<h3>Life cycle</h3>\n<p>It is possible to trigger beans whenever one of them is created. In\norder to define the method(s) to trigger, it is necessary to decorated\nthem with <tt>post_create</tt>, as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">yadi.context_impl</span> <span class=\"kn\">import</span> <span class=\"n\">DEFAULT_CONTEXT</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.decorators</span> <span class=\"kn\">import</span> <span class=\"n\">inject</span><span class=\"p\">,</span> <span class=\"n\">post_create</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yadi.types</span> <span class=\"kn\">import</span> <span class=\"n\">Yadi</span>\n\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component1</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nd\">@inject</span><span class=\"p\">()</span>\n<span class=\"k\">class</span> <span class=\"nc\">Component2</span><span class=\"p\">:</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">c1</span><span class=\"p\">:</span> <span class=\"n\">Yadi</span><span class=\"p\">[</span><span class=\"n\">Component1</span><span class=\"p\">]):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c1</span> <span class=\"o\">=</span> <span class=\"n\">c1</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invoked_post_create</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n\n    <span class=\"nd\">@post_create</span>\n    <span class=\"k\">def</span> <span class=\"nf\">finished_creating</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Component 1:'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">c1</span><span class=\"p\">)</span>  <span class=\"c1\"># Component 1: &lt;__main__.Component1 object at 0x7f42e90d2e48&gt;</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">invoked_post_create</span> <span class=\"o\">+=</span> <span class=\"mi\">1</span>\n\n\n<span class=\"n\">component_2</span> <span class=\"o\">=</span> <span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"n\">Component2</span><span class=\"p\">)</span>  <span class=\"c1\"># type: Component2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'post_create invokations:'</span><span class=\"p\">,</span> <span class=\"n\">component_2</span><span class=\"o\">.</span><span class=\"n\">invoked_post_create</span><span class=\"p\">)</span>  <span class=\"c1\"># post_create invokations: 1</span>\n<span class=\"n\">DEFAULT_CONTEXT</span><span class=\"o\">.</span><span class=\"n\">get_bean</span><span class=\"p\">(</span><span class=\"n\">Component2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'post_create invokations:'</span><span class=\"p\">,</span> <span class=\"n\">component_2</span><span class=\"o\">.</span><span class=\"n\">invoked_post_create</span><span class=\"p\">)</span>  <span class=\"c1\"># post_create invokations: 1</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3663448, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8d5eb06e5d083b4e41329f53c93d58e8", "sha256": "1b9a1832fe9f5e2ad29b8f0b6dac2b804afd6863956b3a9740699503e67b2f2c"}, "downloads": -1, "filename": "yadi-framework-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8d5eb06e5d083b4e41329f53c93d58e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4072, "upload_time": "2018-03-10T09:49:19", "upload_time_iso_8601": "2018-03-10T09:49:19.060924Z", "url": "https://files.pythonhosted.org/packages/6c/3e/6c36531a4994daafa0e6db15137f9af9a856048ffc9638b8beecbe6a2ebb/yadi-framework-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "2cf3c2bd624d7c20c8d676e23389b92f", "sha256": "e496f0dbed01de2c251653c7b4b147e815010a8fe5c7917ce7b23e2104d7c2a1"}, "downloads": -1, "filename": "yadi-framework-0.0.2.tar.gz", "has_sig": false, "md5_digest": "2cf3c2bd624d7c20c8d676e23389b92f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4585, "upload_time": "2018-03-10T17:32:02", "upload_time_iso_8601": "2018-03-10T17:32:02.399880Z", "url": "https://files.pythonhosted.org/packages/c2/64/9d94152ed5d07aaf9428562d65d6dc8dd610b460c318095e65f92cbac981/yadi-framework-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "f2b8834c288c9ce91f2691c7b3b36d04", "sha256": "9df581e6feb26f0589fe87e2a2f57e9f0d02317de3c6bf3e01cc63897c27ba69"}, "downloads": -1, "filename": "yadi-framework-0.0.3.tar.gz", "has_sig": false, "md5_digest": "f2b8834c288c9ce91f2691c7b3b36d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6005, "upload_time": "2018-03-11T14:43:05", "upload_time_iso_8601": "2018-03-11T14:43:05.525107Z", "url": "https://files.pythonhosted.org/packages/49/11/2a178cabfc9644408afed742159a1bd221c2bd91fa0a65b2234cd674c09a/yadi-framework-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "cc44d1b8a001ab525addc76a9b511a96", "sha256": "64efec51b0ab2637ac4ef7cde73188b38ce16da68a943b56969a215352a37ece"}, "downloads": -1, "filename": "yadi-framework-0.0.4.tar.gz", "has_sig": false, "md5_digest": "cc44d1b8a001ab525addc76a9b511a96", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5997, "upload_time": "2018-03-11T15:43:12", "upload_time_iso_8601": "2018-03-11T15:43:12.462064Z", "url": "https://files.pythonhosted.org/packages/ee/dc/09d103cba36a1b94ab264df672f503306d25e54697b432d26bbf73dbcf9f/yadi-framework-0.0.4.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "6e7877817d5054a17834bc4b8d5e0ce8", "sha256": "5993b66b90f90beda6c4ef1793c692aa6f755d4ff047f26364aafa072c6cb891"}, "downloads": -1, "filename": "yadi-framework-0.0.6.tar.gz", "has_sig": false, "md5_digest": "6e7877817d5054a17834bc4b8d5e0ce8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8313, "upload_time": "2018-03-12T22:21:57", "upload_time_iso_8601": "2018-03-12T22:21:57.012850Z", "url": "https://files.pythonhosted.org/packages/ec/94/3fe1e7705820c74a773846602e191cf983ddbde23b1650c75a045bb7edff/yadi-framework-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6e7877817d5054a17834bc4b8d5e0ce8", "sha256": "5993b66b90f90beda6c4ef1793c692aa6f755d4ff047f26364aafa072c6cb891"}, "downloads": -1, "filename": "yadi-framework-0.0.6.tar.gz", "has_sig": false, "md5_digest": "6e7877817d5054a17834bc4b8d5e0ce8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8313, "upload_time": "2018-03-12T22:21:57", "upload_time_iso_8601": "2018-03-12T22:21:57.012850Z", "url": "https://files.pythonhosted.org/packages/ec/94/3fe1e7705820c74a773846602e191cf983ddbde23b1650c75a045bb7edff/yadi-framework-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:23:46 2020"}