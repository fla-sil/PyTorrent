{"info": {"author": "Spencer Lyon", "author_email": "spencer.lyon@stern.nyu.edu", "bugtrack_url": null, "classifiers": [], "description": "distcan\n=======\n\nProbability **dist**\\ ributions for python in their **can**\\ onical\nform. Documentation (TODO: link)\n\n``scipy.stats`` is the go to library for working with probability\ndistributions in python. It is an impressive package that exposes an\n*internally consistent* API for working with almost 100 distributions.\nBut, there are some shortcomings...\n\n-  Instead of using the common names for the parameters of distributions\n   (e.g. Normal distribution mean and standard deviation being named mu\n   and sigma), ``scipy.stats`` has keyword arguments (or combinations of\n   them) ``loc``, ``scale``, and ``shape`` *assume* the roles of\n   canonical parameters\n-  Related to the non-conventional parameter naming, the documentation\n   displays expressions for the pdf that often doesn't match the\n   canonical form of the pdf easily found online or in standard\n   references. This makes it difficult to tell exactly what distribution\n   you are working with\n-  Some distributions are included in ``scipy.stats``, but under a\n   different name a different documented form for the pdf. For example,\n   to create an InverseGamma(5, 6) distribution, you would call\n   ``scipy.stats.invgamma(5, scale=6)``\n\nEnter ``distcan``\n-----------------\n\nThe ``distcan`` library aims to address these problems in an easily\nextensible way. Some goals of this project are\n\n-  Represent probability distributions in their canonical form, with\n   parameters given their standard names\n-  Expose an API that is encompasses functionality in ``scipy.stats``\n   and\n   ```Distributions.jl`` <https://github.com/JuliaStats/Distributions.jl>`__\n   (a Julia package that motivated the creation of ``distcan``), with\n   naming conventions that are consistent for users of both packages\n-  Have documentation that accurately describes the distribution being\n   used\n\nBy leveraging the great code in ``scipy.stats``, we are well on our way\nto completing these goals.\n\nFunctionality\n~~~~~~~~~~~~~\n\nAll the functionality of ``scipy.stats``, plus a few other convenience\nmethods, is exposed by each distribution. This includes the following\nmethods:\n\n-  ``pdf``: evaluate the probability density function\n-  ``logpdf``: evaluate the log of the pdf\n-  ``cdf``: evaluate the cumulative density function\n-  ``logcdf``: evaluate the log of the cdf\n-  ``rvs``: draw random samples from the distribution\n-  ``moment``: evaluate nth non-central moment\n-  ``stats``: some statistics of the RV (such as mean, variance,\n   skewness, kurtosis)\n-  ``fit`` (when available in scipy.stats): return the maximum\n   likelihood estimators of the distribution, given data\n-  ``sf`` (also given name ccdf): compute the survival function (or\n   complementary cumulative density function)\n-  ``logsf`` (also given name logccdf): compute the log of the survival\n   function (or complementary cumulative density function)\n-  ``isf``: compute the inverse of the survival function (or\n   complementary cumulative density function)\n-  ``ppf`` (also give name quantile): compute the percent point function\n   (or quantile), which is the inverse of the cdf. This is commonly used\n   to compute critical values.\n-  ``loglikelihood`` (not in scipy): the loglikelihood of the\n   distribution with respect to all the samples in x\n-  ``invlogcdf`` (not in scipy): evaluate inverse function of the logcdf\n-  ``cquantile`` (not in scipy): evaluate the complementary quantile\n   function. Equal to ``d.ppf(1-x)`` for x in (0, 1). Could be used to\n   compute the lower critical values of a distribution\n-  ``invlogccdf`` (not in scipy): evaluate inverse function of the\n   logccdf\n\nAdditionally, each distribution has the following properties (accessed\nas ``dist_object.property_name`` -- i.e. without parenthesis):\n\n-  ``mean``: the mean of the distribution\n-  ``var``: the var of the distribution\n-  ``std``: the std of the distribution\n-  ``skewness``: the skewness of the distribution\n-  ``kurtosis``: the kurtosis of the distribution\n-  ``median``: the median of the distribution\n-  ``mode``: the mode of the distribution\n-  ``isplaykurtic``: boolean indicating if kurtosis is greater than zero\n-  ``isleptokurtic``: boolean indicating if kurtosis is less than zero\n-  ``ismesokurtic``: boolean indicating if kurtosis is equal to zero\n-  ``entropy``: the entropy of the distribution\n-  ``params`` (not in scipy): return a tuple of the distributions\n   parameters\n\nContributors\n------------\n\n-  Spencer Lyon (spencer.lyon@stern.nyu.edu)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spencerlyon2/distcan", "keywords": "statistics,distributions", "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "distcan", "package_url": "https://pypi.org/project/distcan/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/distcan/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/spencerlyon2/distcan"}, "release_url": "https://pypi.org/project/distcan/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "Probability distributions in their canonical form", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Probability <strong>dist</strong>ributions for python in their <strong>can</strong>onical\nform. Documentation (TODO: link)</p>\n<p><tt>scipy.stats</tt> is the go to library for working with probability\ndistributions in python. It is an impressive package that exposes an\n<em>internally consistent</em> API for working with almost 100 distributions.\nBut, there are some shortcomings\u2026</p>\n<ul>\n<li>Instead of using the common names for the parameters of distributions\n(e.g. Normal distribution mean and standard deviation being named mu\nand sigma), <tt>scipy.stats</tt> has keyword arguments (or combinations of\nthem) <tt>loc</tt>, <tt>scale</tt>, and <tt>shape</tt> <em>assume</em> the roles of\ncanonical parameters</li>\n<li>Related to the non-conventional parameter naming, the documentation\ndisplays expressions for the pdf that often doesn\u2019t match the\ncanonical form of the pdf easily found online or in standard\nreferences. This makes it difficult to tell exactly what distribution\nyou are working with</li>\n<li>Some distributions are included in <tt>scipy.stats</tt>, but under a\ndifferent name a different documented form for the pdf. For example,\nto create an InverseGamma(5, 6) distribution, you would call\n<tt>scipy.stats.invgamma(5, scale=6)</tt></li>\n</ul>\n<div id=\"enter-distcan\">\n<h2>Enter <tt>distcan</tt></h2>\n<p>The <tt>distcan</tt> library aims to address these problems in an easily\nextensible way. Some goals of this project are</p>\n<ul>\n<li>Represent probability distributions in their canonical form, with\nparameters given their standard names</li>\n<li>Expose an API that is encompasses functionality in <tt>scipy.stats</tt>\nand\n<tt>`Distributions.jl</tt> &lt;<a href=\"https://github.com/JuliaStats/Distributions.jl\" rel=\"nofollow\">https://github.com/JuliaStats/Distributions.jl</a>&gt;`__\n(a Julia package that motivated the creation of <tt>distcan</tt>), with\nnaming conventions that are consistent for users of both packages</li>\n<li>Have documentation that accurately describes the distribution being\nused</li>\n</ul>\n<p>By leveraging the great code in <tt>scipy.stats</tt>, we are well on our way\nto completing these goals.</p>\n<div id=\"functionality\">\n<h3>Functionality</h3>\n<p>All the functionality of <tt>scipy.stats</tt>, plus a few other convenience\nmethods, is exposed by each distribution. This includes the following\nmethods:</p>\n<ul>\n<li><tt>pdf</tt>: evaluate the probability density function</li>\n<li><tt>logpdf</tt>: evaluate the log of the pdf</li>\n<li><tt>cdf</tt>: evaluate the cumulative density function</li>\n<li><tt>logcdf</tt>: evaluate the log of the cdf</li>\n<li><tt>rvs</tt>: draw random samples from the distribution</li>\n<li><tt>moment</tt>: evaluate nth non-central moment</li>\n<li><tt>stats</tt>: some statistics of the RV (such as mean, variance,\nskewness, kurtosis)</li>\n<li><tt>fit</tt> (when available in scipy.stats): return the maximum\nlikelihood estimators of the distribution, given data</li>\n<li><tt>sf</tt> (also given name ccdf): compute the survival function (or\ncomplementary cumulative density function)</li>\n<li><tt>logsf</tt> (also given name logccdf): compute the log of the survival\nfunction (or complementary cumulative density function)</li>\n<li><tt>isf</tt>: compute the inverse of the survival function (or\ncomplementary cumulative density function)</li>\n<li><tt>ppf</tt> (also give name quantile): compute the percent point function\n(or quantile), which is the inverse of the cdf. This is commonly used\nto compute critical values.</li>\n<li><tt>loglikelihood</tt> (not in scipy): the loglikelihood of the\ndistribution with respect to all the samples in x</li>\n<li><tt>invlogcdf</tt> (not in scipy): evaluate inverse function of the logcdf</li>\n<li><tt>cquantile</tt> (not in scipy): evaluate the complementary quantile\nfunction. Equal to <tt><span class=\"pre\">d.ppf(1-x)</span></tt> for x in (0, 1). Could be used to\ncompute the lower critical values of a distribution</li>\n<li><tt>invlogccdf</tt> (not in scipy): evaluate inverse function of the\nlogccdf</li>\n</ul>\n<p>Additionally, each distribution has the following properties (accessed\nas <tt>dist_object.property_name</tt> \u2013 i.e. without parenthesis):</p>\n<ul>\n<li><tt>mean</tt>: the mean of the distribution</li>\n<li><tt>var</tt>: the var of the distribution</li>\n<li><tt>std</tt>: the std of the distribution</li>\n<li><tt>skewness</tt>: the skewness of the distribution</li>\n<li><tt>kurtosis</tt>: the kurtosis of the distribution</li>\n<li><tt>median</tt>: the median of the distribution</li>\n<li><tt>mode</tt>: the mode of the distribution</li>\n<li><tt>isplaykurtic</tt>: boolean indicating if kurtosis is greater than zero</li>\n<li><tt>isleptokurtic</tt>: boolean indicating if kurtosis is less than zero</li>\n<li><tt>ismesokurtic</tt>: boolean indicating if kurtosis is equal to zero</li>\n<li><tt>entropy</tt>: the entropy of the distribution</li>\n<li><tt>params</tt> (not in scipy): return a tuple of the distributions\nparameters</li>\n</ul>\n</div>\n</div>\n<div id=\"contributors\">\n<h2>Contributors</h2>\n<ul>\n<li>Spencer Lyon (<a href=\"mailto:spencer.lyon%40stern.nyu.edu\">spencer<span>.</span>lyon<span>@</span>stern<span>.</span>nyu<span>.</span>edu</a>)</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1389679, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c98538fec352555d9dbce4a9b02509a1", "sha256": "1714e73af979d8d25d188df6158f95ae500c2060f710bb3395832efb9abb33c9"}, "downloads": -1, "filename": "distcan-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c98538fec352555d9dbce4a9b02509a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7555, "upload_time": "2015-01-20T18:50:07", "upload_time_iso_8601": "2015-01-20T18:50:07.765530Z", "url": "https://files.pythonhosted.org/packages/52/a7/1fe81fc4a6a6822d70f61950c9bf2b62b51ae9d701d8111923917250d0e1/distcan-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c98538fec352555d9dbce4a9b02509a1", "sha256": "1714e73af979d8d25d188df6158f95ae500c2060f710bb3395832efb9abb33c9"}, "downloads": -1, "filename": "distcan-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c98538fec352555d9dbce4a9b02509a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7555, "upload_time": "2015-01-20T18:50:07", "upload_time_iso_8601": "2015-01-20T18:50:07.765530Z", "url": "https://files.pythonhosted.org/packages/52/a7/1fe81fc4a6a6822d70f61950c9bf2b62b51ae9d701d8111923917250d0e1/distcan-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:05 2020"}