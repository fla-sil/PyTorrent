{"info": {"author": "fcracker79", "author_email": "fcracker79@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "|build status|\n\nreactive-grpc\n=============\n\nA simple gRPC bridge to reactive streams.\n\nExample: Given the following Protocol buffers definition:\n\n::\n\n    syntax = \"proto3\";\n\n    package rxgrpc.test;\n\n    service TestService {\n      rpc GetOneToOne(TestRequest) returns (TestResponse) {}\n      rpc GetOneToStream(TestRequest) returns (stream TestResponse) {}\n      rpc GetStreamToOne(stream TestRequest) returns (TestResponse) {}\n      rpc GetStreamToStream(stream TestRequest) returns (stream TestResponse) {}\n    }\n\n    message TestRequest {\n      string message = 1;\n    }\n\n    message TestResponse {\n      string message = 1;\n    }\n\nand a simple Servicer class:\n\n.. code:: python\n\n    from test.proto.test_pb2_grpc import TestServiceServicer\n    from test.proto import test_pb2\n\n\n    class _Servicer(TestServiceServicer):\n        def GetOneToOne(self, request: test_pb2.TestRequest, context):\n            return test_pb2.TestResponse(message='response: {}'.format(request.message))\n\n        def GetOneToStream(self, request, context):\n            for i in range(3):\n                yield test_pb2.TestResponse(message='response {}: {}'.format(i, request.message))\n\n        def GetStreamToOne(self, request_iterator, context):\n            return test_pb2.TestResponse(\n                message='response: {}'.format(\n                    ', '.join(map(lambda d: d.message, request_iterator))\n                )\n            )\n\n        def GetStreamToStream(self, request_iterator, context):\n            yield from map(\n                lambda d: test_pb2.TestResponse(message='response: {}'.format(d.message)),\n                request_iterator\n            )\n\nA simple gRPC reactive server where request messages are transformed can\nbe created as follows:\n\n.. code:: python\n\n    from test.proto import test_pb2_grpc, test_pb2\n    from rxgrpc import server, mappers\n    from rx import operators\n    from test.proto.test_pb2_grpc import TestServiceServicer\n\n\n    class _Servicer(TestServiceServicer):\n        # ...\n        pass\n\n\n    workers = 3\n    rx_server = server.create_server(test_pb2, workers)\n    test_pb2_grpc.add_TestServiceServicer_to_server(_Servicer(), rx_server)\n    rx_server.add_insecure_port('[::]:50051')\n\n    def _transform_message(m: test_pb2.TestRequest) -> test_pb2.TestRequest:\n        return test_pb2.TestRequest(message='TRANSFORMED {}'.format(m.message))\n\n    rx_server.set_grpc_observable(\n        rx_server.grpc_pipe(\n            operators.map(mappers.grpc_invocation_map(_transform_message)),\n            method_name='/rxgrpc.test.TestService/GetOneToOne'),\n        method_name='/rxgrpc.test.TestService/GetOneToOne'\n    )\n\n    rx_server.start()\n\nHere it is an example of a filter for a streaming input:\n\n.. code:: python\n\n    from rxgrpc import operators\n    from test.proto import test_pb2\n\n\n    def _filter_message(m: test_pb2.TestRequest) -> test_pb2.TestRequest:\n        return bool(int(m.message[-1]) % 2)\n\n    server = ...\n    server.set_grpc_observable(\n        server.grpc_pipe(\n            operators.filter(_filter_message),\n            method_name='/rxgrpc.test.TestService/GetStreamToOne'),\n        method_name='/rxgrpc.test.TestService/GetStreamToOne'\n    )\n\n.. |build status| image:: https://img.shields.io/travis/fcracker79/reactive-grpc/master.svg?style=flat-square\n   :target: https://travis-ci.org/fcracker79/reactive-grpc", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/fcracker79/reactive-grpc", "keywords": "reactive reactive-programming grpc protobuf", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "reactive-grpc", "package_url": "https://pypi.org/project/reactive-grpc/", "platform": "", "project_url": "https://pypi.org/project/reactive-grpc/", "project_urls": {"Homepage": "https://github.com/fcracker79/reactive-grpc"}, "release_url": "https://pypi.org/project/reactive-grpc/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Python reactive gRPC support", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/fcracker79/reactive-grpc\" rel=\"nofollow\"><img alt=\"build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/597109449b056dc09a2ac5cd4111ece3d67a7c1c/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f66637261636b657237392f72656163746976652d677270632f6d61737465722e7376673f7374796c653d666c61742d737175617265\"></a></p>\n<div id=\"reactive-grpc\">\n<h2>reactive-grpc</h2>\n<p>A simple gRPC bridge to reactive streams.</p>\n<p>Example: Given the following Protocol buffers definition:</p>\n<pre>syntax = \"proto3\";\n\npackage rxgrpc.test;\n\nservice TestService {\n  rpc GetOneToOne(TestRequest) returns (TestResponse) {}\n  rpc GetOneToStream(TestRequest) returns (stream TestResponse) {}\n  rpc GetStreamToOne(stream TestRequest) returns (TestResponse) {}\n  rpc GetStreamToStream(stream TestRequest) returns (stream TestResponse) {}\n}\n\nmessage TestRequest {\n  string message = 1;\n}\n\nmessage TestResponse {\n  string message = 1;\n}\n</pre>\n<p>and a simple Servicer class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">test.proto.test_pb2_grpc</span> <span class=\"kn\">import</span> <span class=\"n\">TestServiceServicer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test.proto</span> <span class=\"kn\">import</span> <span class=\"n\">test_pb2</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_Servicer</span><span class=\"p\">(</span><span class=\"n\">TestServiceServicer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">GetOneToOne</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">:</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestResponse</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'response: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">GetOneToStream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">):</span>\n            <span class=\"k\">yield</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestResponse</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'response </span><span class=\"si\">{}</span><span class=\"s1\">: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">GetStreamToOne</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request_iterator</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestResponse</span><span class=\"p\">(</span>\n            <span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'response: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n                <span class=\"s1\">', '</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">,</span> <span class=\"n\">request_iterator</span><span class=\"p\">))</span>\n            <span class=\"p\">)</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">GetStreamToStream</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request_iterator</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n        <span class=\"k\">yield from</span> <span class=\"nb\">map</span><span class=\"p\">(</span>\n            <span class=\"k\">lambda</span> <span class=\"n\">d</span><span class=\"p\">:</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestResponse</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'response: </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">)),</span>\n            <span class=\"n\">request_iterator</span>\n        <span class=\"p\">)</span>\n</pre>\n<p>A simple gRPC reactive server where request messages are transformed can\nbe created as follows:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">test.proto</span> <span class=\"kn\">import</span> <span class=\"n\">test_pb2_grpc</span><span class=\"p\">,</span> <span class=\"n\">test_pb2</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rxgrpc</span> <span class=\"kn\">import</span> <span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">mappers</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rx</span> <span class=\"kn\">import</span> <span class=\"n\">operators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test.proto.test_pb2_grpc</span> <span class=\"kn\">import</span> <span class=\"n\">TestServiceServicer</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">_Servicer</span><span class=\"p\">(</span><span class=\"n\">TestServiceServicer</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">pass</span>\n\n\n<span class=\"n\">workers</span> <span class=\"o\">=</span> <span class=\"mi\">3</span>\n<span class=\"n\">rx_server</span> <span class=\"o\">=</span> <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"n\">test_pb2</span><span class=\"p\">,</span> <span class=\"n\">workers</span><span class=\"p\">)</span>\n<span class=\"n\">test_pb2_grpc</span><span class=\"o\">.</span><span class=\"n\">add_TestServiceServicer_to_server</span><span class=\"p\">(</span><span class=\"n\">_Servicer</span><span class=\"p\">(),</span> <span class=\"n\">rx_server</span><span class=\"p\">)</span>\n<span class=\"n\">rx_server</span><span class=\"o\">.</span><span class=\"n\">add_insecure_port</span><span class=\"p\">(</span><span class=\"s1\">'[::]:50051'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">_transform_message</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">(</span><span class=\"n\">message</span><span class=\"o\">=</span><span class=\"s1\">'TRANSFORMED </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">))</span>\n\n<span class=\"n\">rx_server</span><span class=\"o\">.</span><span class=\"n\">set_grpc_observable</span><span class=\"p\">(</span>\n    <span class=\"n\">rx_server</span><span class=\"o\">.</span><span class=\"n\">grpc_pipe</span><span class=\"p\">(</span>\n        <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"n\">mappers</span><span class=\"o\">.</span><span class=\"n\">grpc_invocation_map</span><span class=\"p\">(</span><span class=\"n\">_transform_message</span><span class=\"p\">)),</span>\n        <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"s1\">'/rxgrpc.test.TestService/GetOneToOne'</span><span class=\"p\">),</span>\n    <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"s1\">'/rxgrpc.test.TestService/GetOneToOne'</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">rx_server</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n</pre>\n<p>Here it is an example of a filter for a streaming input:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rxgrpc</span> <span class=\"kn\">import</span> <span class=\"n\">operators</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test.proto</span> <span class=\"kn\">import</span> <span class=\"n\">test_pb2</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_filter_message</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">:</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">test_pb2</span><span class=\"o\">.</span><span class=\"n\">TestRequest</span><span class=\"p\">:</span>\n    <span class=\"k\">return</span> <span class=\"nb\">bool</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">message</span><span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">])</span> <span class=\"o\">%</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">server</span> <span class=\"o\">=</span> <span class=\"o\">...</span>\n<span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">set_grpc_observable</span><span class=\"p\">(</span>\n    <span class=\"n\">server</span><span class=\"o\">.</span><span class=\"n\">grpc_pipe</span><span class=\"p\">(</span>\n        <span class=\"n\">operators</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">_filter_message</span><span class=\"p\">),</span>\n        <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"s1\">'/rxgrpc.test.TestService/GetStreamToOne'</span><span class=\"p\">),</span>\n    <span class=\"n\">method_name</span><span class=\"o\">=</span><span class=\"s1\">'/rxgrpc.test.TestService/GetStreamToOne'</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4994678, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c8a68c637204389ca581bbee6ced09ca", "sha256": "6de728b2fa325532794fdc202ddfd8dc4e1c266cb6c692e1e8eb7ae7714035b3"}, "downloads": -1, "filename": "reactive-grpc-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c8a68c637204389ca581bbee6ced09ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4905, "upload_time": "2019-03-24T18:02:01", "upload_time_iso_8601": "2019-03-24T18:02:01.367607Z", "url": "https://files.pythonhosted.org/packages/31/ad/6d28ca0143aa92bb23b139c027eab3931c0f45d0a9f58a65c7bf95572472/reactive-grpc-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "d790412d5d052eb8bab80f96d5e195b5", "sha256": "88585707c4996894987deff715f24173ce83448019ae40a6d93a5ace10125bf7"}, "downloads": -1, "filename": "reactive-grpc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d790412d5d052eb8bab80f96d5e195b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5511, "upload_time": "2019-03-27T20:34:18", "upload_time_iso_8601": "2019-03-27T20:34:18.226923Z", "url": "https://files.pythonhosted.org/packages/22/d1/6f356fb5c1911f151c2cfe80ce1579f70b63bbc13826f55ede1c8130370d/reactive-grpc-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d790412d5d052eb8bab80f96d5e195b5", "sha256": "88585707c4996894987deff715f24173ce83448019ae40a6d93a5ace10125bf7"}, "downloads": -1, "filename": "reactive-grpc-0.0.2.tar.gz", "has_sig": false, "md5_digest": "d790412d5d052eb8bab80f96d5e195b5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5511, "upload_time": "2019-03-27T20:34:18", "upload_time_iso_8601": "2019-03-27T20:34:18.226923Z", "url": "https://files.pythonhosted.org/packages/22/d1/6f356fb5c1911f151c2cfe80ce1579f70b63bbc13826f55ede1c8130370d/reactive-grpc-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:31 2020"}