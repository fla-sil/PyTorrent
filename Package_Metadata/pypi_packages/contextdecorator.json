{"info": {"author": "Michael Foord", "author_email": "michael@voidspace.org.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.4", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.0", "Programming Language :: Python :: 3.1", "Programming Language :: Python :: 3.2", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "If you're a library or framework creator then it is nice to be able to create\r\nAPIs that can be used *either* as decorators or context managers.\r\n\r\nThe contextdecorator module is a backport of new features added to the\r\n`contextlib module <http://docs.python.org/library/contextlib.html>`_ in \r\nPython 3.2. contextdecorator works with Python 2.4+ including Python 3.\r\n\r\nContext managers inheriting from ``ContextDecorator`` have to implement \r\n``__enter__`` and ``__exit__`` as normal. \r\n`__exit__ <http://docs.python.org/reference/datamodel.html#object.__exit__>`_ \r\nretains its optional exception handling even when used as a decorator.\r\n\r\nExample::\r\n\r\n   from contextdecorator import ContextDecorator\r\n\r\n   class mycontext(ContextDecorator):\r\n      def __enter__(self):\r\n         print 'Starting'\r\n         return self\r\n\r\n      def __exit__(self, *exc):\r\n         print 'Finishing'\r\n         return False\r\n\r\n   >>> @mycontext()\r\n   ... def function():\r\n   ...    print 'The bit in the middle'\r\n   ...\r\n   >>> function()\r\n   Starting\r\n   The bit in the middle\r\n   Finishing\r\n\r\n   >>> with mycontext():\r\n   ...    print 'The bit in the middle'\r\n   ...\r\n   Starting\r\n   The bit in the middle\r\n   Finishing\r\n\r\nExisting context managers that already have a base class can be extended by\r\nusing ``ContextDecorator`` as a mixin class::\r\n\r\n   from contextdecorator import ContextDecorator\r\n\r\n   class mycontext(ContextBaseClass, ContextDecorator):\r\n      def __enter__(self):\r\n         return self\r\n\r\n      def __exit__(self, *exc):\r\n         return False\r\n\r\ncontextdecorator also contains an implementation of `contextlib.contextmanager\r\n<http://docs.python.org/library/contextlib.html#contextlib.contextmanager>`_\r\nthat uses ``ContextDecorator``. The context managers it creates can be used as\r\ndecorators as well as in with statements. ::\r\n\r\n   from contextdecorator import contextmanager\r\n   \r\n   @contextmanager\r\n   def mycontext(*args):\r\n      print 'Started'\r\n      try:\r\n         yield\r\n      finally:\r\n         print 'Finished!'\r\n\r\n   >>> @mycontext('some', 'args')\r\n   ... def function():\r\n   ...    print 'In the middle'\r\n   ... \r\n   Started\r\n   In the middle\r\n   Finished!\r\n   \r\n   >>> with mycontext('some', 'args'):\r\n   ...    print 'In the middle'\r\n   ... \r\n   Started\r\n   In the middle\r\n   Finished!\r\n\r\nRepository and issue tracker:\r\n\r\n* `contextdecorator on google code <http://code.google.com/p/contextdecorator/>`_\r\n\r\nThe project is available for download from `PyPI\r\n<http://pypi.python.org/pypi/contextdecorator>`_\r\nso it can be easily installed:\r\n\r\n    | ``pip install -U contextdecorator``\r\n    | ``easy_install -U contextdecorator``\r\n\r\nThe tests require `unittest2 <http://pypi.python.org/pypi/unittest2>`_\r\nto run.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": "decorator,with,context", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "contextdecorator", "package_url": "https://pypi.org/project/contextdecorator/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/contextdecorator/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/contextdecorator/0.10.0/", "requires_dist": null, "requires_python": null, "summary": "Create APIs that work as decorators and as context managers.", "version": "0.10.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>If you\u2019re a library or framework creator then it is nice to be able to create\nAPIs that can be used <em>either</em> as decorators or context managers.</p>\n<p>The contextdecorator module is a backport of new features added to the\n<a href=\"http://docs.python.org/library/contextlib.html\" rel=\"nofollow\">contextlib module</a> in\nPython 3.2. contextdecorator works with Python 2.4+ including Python 3.</p>\n<p>Context managers inheriting from <tt>ContextDecorator</tt> have to implement\n<tt>__enter__</tt> and <tt>__exit__</tt> as normal.\n<a href=\"http://docs.python.org/reference/datamodel.html#object.__exit__\" rel=\"nofollow\">__exit__</a>\nretains its optional exception handling even when used as a decorator.</p>\n<p>Example:</p>\n<pre>from contextdecorator import ContextDecorator\n\nclass mycontext(ContextDecorator):\n   def __enter__(self):\n      print 'Starting'\n      return self\n\n   def __exit__(self, *exc):\n      print 'Finishing'\n      return False\n\n&gt;&gt;&gt; @mycontext()\n... def function():\n...    print 'The bit in the middle'\n...\n&gt;&gt;&gt; function()\nStarting\nThe bit in the middle\nFinishing\n\n&gt;&gt;&gt; with mycontext():\n...    print 'The bit in the middle'\n...\nStarting\nThe bit in the middle\nFinishing\n</pre>\n<p>Existing context managers that already have a base class can be extended by\nusing <tt>ContextDecorator</tt> as a mixin class:</p>\n<pre>from contextdecorator import ContextDecorator\n\nclass mycontext(ContextBaseClass, ContextDecorator):\n   def __enter__(self):\n      return self\n\n   def __exit__(self, *exc):\n      return False\n</pre>\n<p>contextdecorator also contains an implementation of <a href=\"http://docs.python.org/library/contextlib.html#contextlib.contextmanager\" rel=\"nofollow\">contextlib.contextmanager</a>\nthat uses <tt>ContextDecorator</tt>. The context managers it creates can be used as\ndecorators as well as in with statements.</p>\n<pre>from contextdecorator import contextmanager\n\n@contextmanager\ndef mycontext(*args):\n   print 'Started'\n   try:\n      yield\n   finally:\n      print 'Finished!'\n\n&gt;&gt;&gt; @mycontext('some', 'args')\n... def function():\n...    print 'In the middle'\n...\nStarted\nIn the middle\nFinished!\n\n&gt;&gt;&gt; with mycontext('some', 'args'):\n...    print 'In the middle'\n...\nStarted\nIn the middle\nFinished!\n</pre>\n<p>Repository and issue tracker:</p>\n<ul>\n<li><a href=\"http://code.google.com/p/contextdecorator/\" rel=\"nofollow\">contextdecorator on google code</a></li>\n</ul>\n<p>The project is available for download from <a href=\"http://pypi.python.org/pypi/contextdecorator\" rel=\"nofollow\">PyPI</a>\nso it can be easily installed:</p>\n<blockquote>\n<div>\n<div><tt>pip install <span class=\"pre\">-U</span> contextdecorator</tt></div>\n<div><tt>easy_install <span class=\"pre\">-U</span> contextdecorator</tt></div>\n</div>\n</blockquote>\n<p>The tests require <a href=\"http://pypi.python.org/pypi/unittest2\" rel=\"nofollow\">unittest2</a>\nto run.</p>\n\n          </div>"}, "last_serial": 788400, "releases": {"0.0": [], "0.10.0": [{"comment_text": "", "digests": {"md5": "779973c0e9502c9fdc7add9628cbb58d", "sha256": "44645affa722c72b4931d48a4ff9265a8df19373e20e12334bca4ec2104f8619"}, "downloads": -1, "filename": "contextdecorator-0.10.0.tar.gz", "has_sig": false, "md5_digest": "779973c0e9502c9fdc7add9628cbb58d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4584, "upload_time": "2010-06-30T14:38:17", "upload_time_iso_8601": "2010-06-30T14:38:17.354563Z", "url": "https://files.pythonhosted.org/packages/77/43/03f264fa07fb0f794bfe174751eb6e6e294a89fc53af87ea1cb0df26ac18/contextdecorator-0.10.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ef3ed0500116cc2ee42714b38e2c893", "sha256": "e6ee12393ea89a6222152cd103d8f55397ff13e08cb513f48ccc2739768b9171"}, "downloads": -1, "filename": "contextdecorator-0.10.0.zip", "has_sig": false, "md5_digest": "2ef3ed0500116cc2ee42714b38e2c893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6775, "upload_time": "2010-06-30T14:38:56", "upload_time_iso_8601": "2010-06-30T14:38:56.665186Z", "url": "https://files.pythonhosted.org/packages/f6/8b/bb30402c613cb77ab5822ed71ac00f4349231519161ed0265bfb5f5aaae4/contextdecorator-0.10.0.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "779973c0e9502c9fdc7add9628cbb58d", "sha256": "44645affa722c72b4931d48a4ff9265a8df19373e20e12334bca4ec2104f8619"}, "downloads": -1, "filename": "contextdecorator-0.10.0.tar.gz", "has_sig": false, "md5_digest": "779973c0e9502c9fdc7add9628cbb58d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4584, "upload_time": "2010-06-30T14:38:17", "upload_time_iso_8601": "2010-06-30T14:38:17.354563Z", "url": "https://files.pythonhosted.org/packages/77/43/03f264fa07fb0f794bfe174751eb6e6e294a89fc53af87ea1cb0df26ac18/contextdecorator-0.10.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ef3ed0500116cc2ee42714b38e2c893", "sha256": "e6ee12393ea89a6222152cd103d8f55397ff13e08cb513f48ccc2739768b9171"}, "downloads": -1, "filename": "contextdecorator-0.10.0.zip", "has_sig": false, "md5_digest": "2ef3ed0500116cc2ee42714b38e2c893", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6775, "upload_time": "2010-06-30T14:38:56", "upload_time_iso_8601": "2010-06-30T14:38:56.665186Z", "url": "https://files.pythonhosted.org/packages/f6/8b/bb30402c613cb77ab5822ed71ac00f4349231519161ed0265bfb5f5aaae4/contextdecorator-0.10.0.zip", "yanked": false}], "timestamp": "Fri May  8 00:43:33 2020"}