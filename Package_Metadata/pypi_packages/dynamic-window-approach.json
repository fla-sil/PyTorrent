{"info": {"author": "G\u00f6ktu\u011f Karaka\u015fl\u0131", "author_email": "karakasligk@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3"], "description": "Dynamic Window Approach\n===================================\n\n2D Dynamic Window Approach [<cite>[1]</cite>](#ref1) Motion Planning algorithm written in C with Python Bindings.\n\n![Python Demo](https://raw.githubusercontent.com/goktug97/DynamicWindowApproach/master/dwa.gif)\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n**Table of Contents**\n\n- [Dynamic Window Approach](#dynamic-window-approach)\n    - [Requirements](#requirements)\n        - [Python](#python)\n        - [C Libraries (Optional for the Demo)](#c-libraries-optional-for-the-demo)\n    - [Installation](#installation)\n        - [Compile and Install C Library](#compile-and-install-c-library)\n        - [Install Python Bindings](#install-python-bindings)\n            - [PyPI](#pypi)\n            - [Source](#source)\n    - [Usage](#usage)\n    - [Documentation](#documentation)\n        - [Structs and Classes](#structs-and-classes)\n            - [Rect](#rect)\n            - [Config](#config)\n            - [Velocity](#velocity)\n            - [Point](#point)\n            - [PointCloud](#pointcloud)\n            - [Pose](#pose)\n            - [DynamicWindow](#dynamicwindow)\n        - [Functions](#functions)\n            - [planning](#planning)\n            - [createDynamicWindow](#createdynamicwindow)\n            - [freeDynamicWindow](#freedynamicwindow)\n            - [motion](#motion)\n            - [calculateVelocityCost](#calculatevelocitycost)\n            - [calculateHeadingCost](#calculateheadingcost)\n            - [calculateClearanceCost](#calculateclearancecost)\n            - [createPointCloud](#createpointcloud)\n            - [freePointCloud](#freepointcloud)\n    - [References](#references)\n    - [License](#license)\n\n<!-- markdown-toc end -->\n\n## Requirements\n\n### Python\n\n* Python >= 3.6\n* cython\n* numpy\n* cv2 (Optional for the demo)\n\n### C Libraries (Optional for the Demo)\n\n* SDL\n* OpenGL\n\n## Installation\n\nYou can directly install Python bindings without compiling the library.\n\n### Compile and Install C Library\n\n```bash\ngit clone https://github.com/goktug97/DynamicWindowApproach\ncd DynamicWindowApproach\nmkdir build\ncd build\ncmake ..\nmake\nmake install\n# Optional: Build Demo\nmake demo\n```\n\n### Install Python Bindings\n\n#### PyPI\n\n```bash\npip3 install dynamic-window-approach --user\n```\n\n#### Source\n\n```bash\ngit clone https://github.com/goktug97/DynamicWindowApproach\ncd DynamicWindowApproach\npython3 setup.py install --user\n```\n\n## Usage\n\n- Only function you need to run to plan the next move is the\n[planning](#planning) function.  Rest of the code for both C and\nPython examples are just to create simulation environment and GUI.\nThe 2 examples that you can find in\n[examples](https://github.com/goktug97/DynamicWindowApproach/blob/master/examples/)\nfolder is the same demo but implemented using different libraries for\nvisualization.\n\n- The Python example uses OpenCV and you can run it by executing `python3 demo.py`\nin the examples folder.\n\n- The C example uses OpenGL and SDL and you can run it by executing `./demo` in\nbin folder. The bin folder is created after the compile so if you didn't \ncompile the demo while installing the library. Go to `build` directory and run\n`make demo`.\n\n- There is also a web application demo in\na different repository which can be find at [DWA Web\nDemo](https://github.com/goktug97/DWAWebDemo).\n\n## Documentation\n\nWhile the [planning](#planning) function is the only function that a user needs\nto call for the planning, all of the functions are exposed to the user\nfor both C and Python for no reasons.\n\n### Structs and Classes\nIf you are using Python bindings, you don't need to use any of these\nclasses except [Config](#config). The functions accept built-in or\nnumpy types. The functions create required classes inside for easy\nusage. For example a snippet from the [planning](#planning) function;\n\n``` cython\ncdef float x, y, yaw, v , w, gx, gy\ncdef PointCloud _point_cloud = PointCloud(point_cloud)\nx, y, yaw = pose\nv, w = velocity\ngx, gy = goal\ncdef Pose _pose = Pose(Point(x, y), yaw)\ncdef Velocity _velocity = Velocity(v, w)\ncdef Point _goal = Point(gx, gy)\n```\n\n- Structs are for C\n- Classes are for Python\n\n#### Rect\n\n- *struct* Rect\n\n    * Given center of the robot is (0, 0)\n    * **Parameters**:\n      - **xmin** - floating-point minimum x-coordinate of the robot.\n      - **ymin** - floating-point minimum y-coordinate of the robot.\n      - **xmax** - floating-point maximum x-coordinate of the robot.\n      - **ymax** - floating-point maximum y-coordinate of the robot.\n\n#### Config\n\n- *struct* Config\n\n    * **Parameters**:\n        - **maxSpeed** - floating-point maximum linear speed robot can reach [m/s]\n        - **minSpeed** - floating-point minimum linea speed robot can fall [m/s]\n        - **maxYawrate** - floating-point maximum angular spped robot can reach [yaw/s]\n        - **maxAccel** - floating-point maximum linear acceleration robot can reach [m/ss]\n        - **maxdYawrate** - floating-point maximum angular acceleration robot can reach [yaw/ss]\n        - **velocityResolution** - floating-point linear speed resolution [m/s]\n        - **yawrateResolution** - floating-point angular speed resolution [m/s]\n        - **dt** - floating-point time change [s]\n        - **predictTime** - floating-point simulation time [s]\n        - **heading** - floating-point heading cost weight\n        - **clearance** - floating-point clearance cost weight\n        - **velocity** - floating-point velocity cost weight\n        - **base** - [Rect](#rect)\n\n- *class* Config\n\n    ``` python\n    Config(float max_speed, float min_speed,\n           float max_yawrate, float max_accel, float max_dyawrate,\n           float velocity_resolution, float yawrate_resolution, float dt,\n           float predict_time, float heading, float clearance, float velocity,\n           list base)\n    ```\n\n#### Velocity\n\n- *struct* Velocity\n\n    * **Parameters**:\n        - **linearVelocity** - floating-point linear velocity of the robot [m/s]\n        - **angularVelocity** - floating-point angular velocity of the robot [yaw/s]\n\n- *class* Velocity\n\n    ``` python\n    Velocity(float linear_velocity, float angular_velocity)\n    ```\n\n#### Point\n\n- *struct* Point\n\n    * **Parameters**:\n        - **x** \u2013 floating-point x-coordinate of the point.\n        - **y** \u2013 floating-point y-coordinate of the point.\n\n- *class* Point\n\n    ``` python\n    Point(float x, float y)\n    ```\n\n#### PointCloud\n\n- *struct* PointCloud\n\n  * int **size**\n    - Number of points.\n  * Point ***points**\n    - Array of [points](#point).\n\n- *class* PointCloud\n\n    ``` python\n    PointCloud(np.ndarray[np.float32_t, ndim=2] point_cloud)\n    ```\n\n#### Pose\n\n- *struct* Pose\n  * Point **point**\n    - Coordinate of the robot.\n  * float **yaw**\n    - Angle of the robot.\n\n- *class* Pose\n\n    ``` python\n    Pose(Point point, float yaw)\n    ```\n\n#### DynamicWindow\n\n- *struct* DynamicWindow\n  * int **nPossibleV**:\n    - Number of linear velocities in the Dynamic Window.\n  * float ***possibleV**:\n    - Array of linear velocities with resolution of [Config.velocityResolution](#config)\n  * int **nPossibleW**:\n    - Number of angular velocities in the Dynamic Window\n  * float ***possibleW**:\n    - Array of angular velocities with resolution of [Config.yawrateResolution](#config)\n\n- *class* DynamicWindow\n\n    ```python\n    DynamicWindow(tuple velocity, Config config)\n    ```\n\n### Functions\n\n#### planning\n\nCalculates best linear and angular velocities given the state. Only\nrequired function to use this library.\n\n- C\n\n    ``` c++\n    Velocity planning (Pose pose, Velocity velocity, Point goal, PointCloud *pointCloud, Config config);\n    ```\n\n    * **Parameters:**\n        - **pose:** [Pose](#pose)\n        - **velocity:** [Velocity](#velocity)\n        - **goal:** [Point](#point)\n        - **pointCloud:** [PointCloud](#pointcloud)\n        - **config:** [Config](#config)\n\n- Python\n\n    ``` python\n    linear_velocity, angular_velocity = planning(pose, velocity, goal, point_cloud, config)\n    ```\n\n    * **Parameters:**\n        - **pose:** tuple: (x, y, yaw)\n        - **velocity:** tuple: (Linear Velocity, Angular Velocity)\n        - **goal:** tuple: (x, y)\n        - **point_cloud:** Numpy Array of shape (N, 2) and type np.float32\n        - **config:** [Config](#config)\n\n#### createDynamicWindow\n\nGiven robot configuration and current velocities, calculates [DynamicWindow](#dynamicwindow).\nThe memory is allocated dynamically inside of the function and must be freed using \n[freeDynamicWindow](#freedynamicwindow) function.\n\n- C\n\n    ``` c++\n    void createDynamicWindow(Velocity velocity, Config config, DynamicWindow **dynamicWindow);\n    ```\n\n    * **Parameters:**\n        - **velocity:** [Velocity](#velocity)\n        - **config:** [Config](#config)\n        - **dynamicWindow:** [DynamicWindow](#dynamicwindow)\n\n- Python\n\n    [DynamicWindow](#dynamicwindow) class is used to create a DynamicWindow instance.\n\n    ``` python\n    dw = dwa.DynamicWindow(velocity, config):\n    print(dw.possible_v, dw.possible_w)\n    ```\n\n    * **Parameters:**\n        - **velocity:** tuple: (Linear Velocity, Angular Velocity)\n        - **config:** [Config](#config) class\n\n[Dynamic Window <cite>[2]</cite>](https://raw.githubusercontent.com/goktug97/DynamicWindowApproach/master/img/dynamic_window.jpg)\n\n#### freeDynamicWindow\n\nFree dynamically allocated memory.\n\n- C\n\n    ``` c++\n    void freeDynamicWindow(DynamicWindow *dynamicWindow);\n    ```\n\n    * **Parameters:**\n        - **dynamicWindow:** [DynamicWindow](#dynamicwindow)\n\n- Python\n\n    Handled by the [DynamicWindow](#dynamicwindow) class. See below.\n\n    ``` python\n    def __dealloc__(self):\n        if self.thisptr is not NULL:\n            cdwa.freeDynamicWindow(self.thisptr)\n\n    ```\n\n#### motion\n\nGiven current position and velocities, calculates next position after\ngiven dt using differential drive motion model. Can be used to\nsimulate motion in a simulated environment.\n\n- C\n\n    ``` c++\n    Pose motion(Pose pose, Velocity velocity, float dt);\n    ```\n\n    * **Parameters:**\n        - **pose:** [Pose](#pose)\n        - **velocity:** [Velocity](#velocity)\n        - **dt:** float (seconds)\n\n- Python\n\n    ``` python\n    x, y, yaw = motion(pose, velocity, dt)\n    ```\n\n    * **Parameters:**\n        - **pose:** tuple: (x, y, yaw)\n        - **velocity:** tuple: (Linear Velocity, Angular Velocity)\n\n#### calculateVelocityCost\n\n- C\n\n    ``` c++\n    float calculateVelocityCost(Velocity velocity, Config config);\n    ```\n\n    * **Parameters:**\n        - **velocity:** [Velocity](#velocity)\n        - **config:** [Config](#config)\n\n- Python\n\n    ``` python\n    velocity_cost = calculate_velocity_cost(velocity, config)\n    ```\n\n    * **Parameters:**\n        - **velocity:** tuple: (Linear Velocity, Angular Velocity)\n        - **config:** [Config](#config)\n\n#### calculateHeadingCost\n\n- C\n\n    ``` c++\n    float calculateHeadingCost(Pose pose, Point goal);\n    ```\n\n    * **Parameters:**\n        - **pose:** [Pose](#pose)\n        - **goal:** [Point](#point)\n\n- Python\n\n    ``` python\n    heading_cost = calculate_heading_cost(pose, goal)\n    ```\n\n    * **Parameters:**\n        - **pose:** tuple: (x, y, yaw)\n        - **goal:** tuple: (x, y)\n\n#### calculateClearanceCost\n\n- C\n\n    ``` c++\n    float calculateClearanceCost(Pose pose, Velocity velocity, PointCloud *pointCloud, Config config);\n    ```\n\n    * **Parameters:**\n        - **pose:** [Pose](#pose)\n        - **velocity:** [Velocity](#velocity)\n        - **pointCloud:** [PointCloud](#pointcloud)\n        - **config:** [Config](#config)\n\n- Python\n\n    ``` python\n    def calculate_clearance_cost(pose, velocity, point_cloud, config):\n    ```\n\n    * **Parameters:**\n        - **pose:** tuple: (x, y, yaw) \n        - **velocity:** tuple: (Linear Velocity, Angular Velocity)\n        - **point_cloud:** Numpy Array of shape (N, 2) and type np.float32\n        - **config:** [Config](#config)\n\n#### createPointCloud\n\nGiven a size, creates a [PointCloud](#pointcloud). Must be freed using [freePointCloud](#freepointcloud).\n\n- C\n\n    ``` c++\n    PointCloud* createPointCloud(int size);\n    ```\n\n    ``` c++\n    for (int i = 0; i < pointCloud->size; ++i) {\n      pointCloud->points[i].x = 0.0\n      pointCloud->points[i].y = 0.0\n    }\n    ```\n\n    * **Parameters:**\n        - **size:** int\n\n- Python\n\n    [PointCloud](#pointcloud) class is used to create a PointCloud instance. All\n    functions in python accepts numpy array instead of PointCloud instance. The\n    PointCloud instance is created inside of the function.\n\n    ``` python\n    size = 600\n    point_cloud = np.zeros((size, 2), dtype=np.float32)\n    point_cloud = dwa.PointCloud(point_cloud)\n    ```\n\n#### freePointCloud\n\n- C\n\n    ``` c++\n    void freePointCloud(PointCloud* pointCloud);\n    ```\n\n    * **Parameters:**\n        - **pointCloud:** [PointCloud](#pointcloud)\n\n- Python\n\n    Handled by the [PointCloud](#pointcloud) class. See below.\n\n    ``` python\n    def __dealloc__(self):\n        if self.thisptr is not NULL:\n            cdwa.freePointCloud(self.thisptr)\n    ```\n\n## References\n\n<a name=\"ref1\"/>\n\n1. D. Fox, W. Burgard and S. Thrun, \"The dynamic window approach to\ncollision avoidance,\" in IEEE Robotics & Automation Magazine, vol. 4,\nno. 1, pp. 23-33, March 1997.  doi: 10.1109/100.580977 URL:\nhttp://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&arnumber=580977&isnumber=12589\n\n<a name=\"ref2\"/>\n\n2. http://ais.informatik.uni-freiburg.de/teaching/ss19/robotics/slides/19-pathplanning-long.pdf\n\n## License\nMIT License.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/goktug97/DynamicWindowApproach/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/goktug97/DynamicWindowApproach", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dynamic-window-approach", "package_url": "https://pypi.org/project/dynamic-window-approach/", "platform": "", "project_url": "https://pypi.org/project/dynamic-window-approach/", "project_urls": {"Download": "https://github.com/goktug97/DynamicWindowApproach/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/goktug97/DynamicWindowApproach"}, "release_url": "https://pypi.org/project/dynamic-window-approach/1.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Dynamic Window Approach algorithm written in C with Python Bindings", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Dynamic Window Approach</h1>\n<p>2D Dynamic Window Approach <a href=\"#ref1\" rel=\"nofollow\"><cite>[1]</cite></a> Motion Planning algorithm written in C with Python Bindings.</p>\n<p><img alt=\"Python Demo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3fce95cee48f3f6a228a308484e6dc60dacd41d0/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f676f6b74756739372f44796e616d696357696e646f77417070726f6163682f6d61737465722f6477612e676966\"></p>\n\n<p><strong>Table of Contents</strong></p>\n<ul>\n<li><a href=\"#dynamic-window-approach\" rel=\"nofollow\">Dynamic Window Approach</a>\n<ul>\n<li><a href=\"#requirements\" rel=\"nofollow\">Requirements</a>\n<ul>\n<li><a href=\"#python\" rel=\"nofollow\">Python</a></li>\n<li><a href=\"#c-libraries-optional-for-the-demo\" rel=\"nofollow\">C Libraries (Optional for the Demo)</a></li>\n</ul>\n</li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#compile-and-install-c-library\" rel=\"nofollow\">Compile and Install C Library</a></li>\n<li><a href=\"#install-python-bindings\" rel=\"nofollow\">Install Python Bindings</a>\n<ul>\n<li><a href=\"#pypi\" rel=\"nofollow\">PyPI</a></li>\n<li><a href=\"#source\" rel=\"nofollow\">Source</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#documentation\" rel=\"nofollow\">Documentation</a>\n<ul>\n<li><a href=\"#structs-and-classes\" rel=\"nofollow\">Structs and Classes</a>\n<ul>\n<li><a href=\"#rect\" rel=\"nofollow\">Rect</a></li>\n<li><a href=\"#config\" rel=\"nofollow\">Config</a></li>\n<li><a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><a href=\"#point\" rel=\"nofollow\">Point</a></li>\n<li><a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a></li>\n<li><a href=\"#pose\" rel=\"nofollow\">Pose</a></li>\n<li><a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a></li>\n</ul>\n</li>\n<li><a href=\"#functions\" rel=\"nofollow\">Functions</a>\n<ul>\n<li><a href=\"#planning\" rel=\"nofollow\">planning</a></li>\n<li><a href=\"#createdynamicwindow\" rel=\"nofollow\">createDynamicWindow</a></li>\n<li><a href=\"#freedynamicwindow\" rel=\"nofollow\">freeDynamicWindow</a></li>\n<li><a href=\"#motion\" rel=\"nofollow\">motion</a></li>\n<li><a href=\"#calculatevelocitycost\" rel=\"nofollow\">calculateVelocityCost</a></li>\n<li><a href=\"#calculateheadingcost\" rel=\"nofollow\">calculateHeadingCost</a></li>\n<li><a href=\"#calculateclearancecost\" rel=\"nofollow\">calculateClearanceCost</a></li>\n<li><a href=\"#createpointcloud\" rel=\"nofollow\">createPointCloud</a></li>\n<li><a href=\"#freepointcloud\" rel=\"nofollow\">freePointCloud</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#references\" rel=\"nofollow\">References</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n</li>\n</ul>\n\n<h2>Requirements</h2>\n<h3>Python</h3>\n<ul>\n<li>Python &gt;= 3.6</li>\n<li>cython</li>\n<li>numpy</li>\n<li>cv2 (Optional for the demo)</li>\n</ul>\n<h3>C Libraries (Optional for the Demo)</h3>\n<ul>\n<li>SDL</li>\n<li>OpenGL</li>\n</ul>\n<h2>Installation</h2>\n<p>You can directly install Python bindings without compiling the library.</p>\n<h3>Compile and Install C Library</h3>\n<pre>git clone https://github.com/goktug97/DynamicWindowApproach\n<span class=\"nb\">cd</span> DynamicWindowApproach\nmkdir build\n<span class=\"nb\">cd</span> build\ncmake ..\nmake\nmake install\n<span class=\"c1\"># Optional: Build Demo</span>\nmake demo\n</pre>\n<h3>Install Python Bindings</h3>\n<h4>PyPI</h4>\n<pre>pip3 install dynamic-window-approach --user\n</pre>\n<h4>Source</h4>\n<pre>git clone https://github.com/goktug97/DynamicWindowApproach\n<span class=\"nb\">cd</span> DynamicWindowApproach\npython3 setup.py install --user\n</pre>\n<h2>Usage</h2>\n<ul>\n<li>\n<p>Only function you need to run to plan the next move is the\n<a href=\"#planning\" rel=\"nofollow\">planning</a> function.  Rest of the code for both C and\nPython examples are just to create simulation environment and GUI.\nThe 2 examples that you can find in\n<a href=\"https://github.com/goktug97/DynamicWindowApproach/blob/master/examples/\" rel=\"nofollow\">examples</a>\nfolder is the same demo but implemented using different libraries for\nvisualization.</p>\n</li>\n<li>\n<p>The Python example uses OpenCV and you can run it by executing <code>python3 demo.py</code>\nin the examples folder.</p>\n</li>\n<li>\n<p>The C example uses OpenGL and SDL and you can run it by executing <code>./demo</code> in\nbin folder. The bin folder is created after the compile so if you didn't\ncompile the demo while installing the library. Go to <code>build</code> directory and run\n<code>make demo</code>.</p>\n</li>\n<li>\n<p>There is also a web application demo in\na different repository which can be find at <a href=\"https://github.com/goktug97/DWAWebDemo\" rel=\"nofollow\">DWA Web\nDemo</a>.</p>\n</li>\n</ul>\n<h2>Documentation</h2>\n<p>While the <a href=\"#planning\" rel=\"nofollow\">planning</a> function is the only function that a user needs\nto call for the planning, all of the functions are exposed to the user\nfor both C and Python for no reasons.</p>\n<h3>Structs and Classes</h3>\n<p>If you are using Python bindings, you don't need to use any of these\nclasses except <a href=\"#config\" rel=\"nofollow\">Config</a>. The functions accept built-in or\nnumpy types. The functions create required classes inside for easy\nusage. For example a snippet from the <a href=\"#planning\" rel=\"nofollow\">planning</a> function;</p>\n<pre><span class=\"k\">cdef</span> <span class=\"kt\">float</span> <span class=\"nf\">x</span><span class=\"p\">,</span> <span class=\"nf\">y</span><span class=\"p\">,</span> <span class=\"nf\">yaw</span><span class=\"p\">,</span> <span class=\"nf\">v</span> <span class=\"p\">,</span> <span class=\"nf\">w</span><span class=\"p\">,</span> <span class=\"nf\">gx</span><span class=\"p\">,</span> <span class=\"nf\">gy</span>\n<span class=\"k\">cdef</span> <span class=\"kt\">PointCloud</span> <span class=\"nf\">_point_cloud</span> <span class=\"o\">=</span> <span class=\"n\">PointCloud</span><span class=\"p\">(</span><span class=\"n\">point_cloud</span><span class=\"p\">)</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"n\">pose</span>\n<span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span> <span class=\"o\">=</span> <span class=\"n\">velocity</span>\n<span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span> <span class=\"o\">=</span> <span class=\"n\">goal</span>\n<span class=\"k\">cdef</span> <span class=\"kt\">Pose</span> <span class=\"nf\">_pose</span> <span class=\"o\">=</span> <span class=\"n\">Pose</span><span class=\"p\">(</span><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">),</span> <span class=\"n\">yaw</span><span class=\"p\">)</span>\n<span class=\"k\">cdef</span> <span class=\"kt\">Velocity</span> <span class=\"nf\">_velocity</span> <span class=\"o\">=</span> <span class=\"n\">Velocity</span><span class=\"p\">(</span><span class=\"n\">v</span><span class=\"p\">,</span> <span class=\"n\">w</span><span class=\"p\">)</span>\n<span class=\"k\">cdef</span> <span class=\"kt\">Point</span> <span class=\"nf\">_goal</span> <span class=\"o\">=</span> <span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"n\">gx</span><span class=\"p\">,</span> <span class=\"n\">gy</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Structs are for C</li>\n<li>Classes are for Python</li>\n</ul>\n<h4>Rect</h4>\n<ul>\n<li>\n<p><em>struct</em> Rect</p>\n<ul>\n<li>Given center of the robot is (0, 0)</li>\n<li><strong>Parameters</strong>:\n<ul>\n<li><strong>xmin</strong> - floating-point minimum x-coordinate of the robot.</li>\n<li><strong>ymin</strong> - floating-point minimum y-coordinate of the robot.</li>\n<li><strong>xmax</strong> - floating-point maximum x-coordinate of the robot.</li>\n<li><strong>ymax</strong> - floating-point maximum y-coordinate of the robot.</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>Config</h4>\n<ul>\n<li>\n<p><em>struct</em> Config</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><strong>maxSpeed</strong> - floating-point maximum linear speed robot can reach [m/s]</li>\n<li><strong>minSpeed</strong> - floating-point minimum linea speed robot can fall [m/s]</li>\n<li><strong>maxYawrate</strong> - floating-point maximum angular spped robot can reach [yaw/s]</li>\n<li><strong>maxAccel</strong> - floating-point maximum linear acceleration robot can reach [m/ss]</li>\n<li><strong>maxdYawrate</strong> - floating-point maximum angular acceleration robot can reach [yaw/ss]</li>\n<li><strong>velocityResolution</strong> - floating-point linear speed resolution [m/s]</li>\n<li><strong>yawrateResolution</strong> - floating-point angular speed resolution [m/s]</li>\n<li><strong>dt</strong> - floating-point time change [s]</li>\n<li><strong>predictTime</strong> - floating-point simulation time [s]</li>\n<li><strong>heading</strong> - floating-point heading cost weight</li>\n<li><strong>clearance</strong> - floating-point clearance cost weight</li>\n<li><strong>velocity</strong> - floating-point velocity cost weight</li>\n<li><strong>base</strong> - <a href=\"#rect\" rel=\"nofollow\">Rect</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> Config</p>\n<pre><span class=\"n\">Config</span><span class=\"p\">(</span><span class=\"nb\">float</span> <span class=\"n\">max_speed</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">min_speed</span><span class=\"p\">,</span>\n       <span class=\"nb\">float</span> <span class=\"n\">max_yawrate</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">max_accel</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">max_dyawrate</span><span class=\"p\">,</span>\n       <span class=\"nb\">float</span> <span class=\"n\">velocity_resolution</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">yawrate_resolution</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">dt</span><span class=\"p\">,</span>\n       <span class=\"nb\">float</span> <span class=\"n\">predict_time</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">heading</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">clearance</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">velocity</span><span class=\"p\">,</span>\n       <span class=\"nb\">list</span> <span class=\"n\">base</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>Velocity</h4>\n<ul>\n<li>\n<p><em>struct</em> Velocity</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><strong>linearVelocity</strong> - floating-point linear velocity of the robot [m/s]</li>\n<li><strong>angularVelocity</strong> - floating-point angular velocity of the robot [yaw/s]</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> Velocity</p>\n<pre><span class=\"n\">Velocity</span><span class=\"p\">(</span><span class=\"nb\">float</span> <span class=\"n\">linear_velocity</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">angular_velocity</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>Point</h4>\n<ul>\n<li>\n<p><em>struct</em> Point</p>\n<ul>\n<li><strong>Parameters</strong>:\n<ul>\n<li><strong>x</strong> \u2013 floating-point x-coordinate of the point.</li>\n<li><strong>y</strong> \u2013 floating-point y-coordinate of the point.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> Point</p>\n<pre><span class=\"n\">Point</span><span class=\"p\">(</span><span class=\"nb\">float</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>PointCloud</h4>\n<ul>\n<li>\n<p><em>struct</em> PointCloud</p>\n<ul>\n<li>int <strong>size</strong>\n<ul>\n<li>Number of points.</li>\n</ul>\n</li>\n<li>Point *<strong>points</strong>\n<ul>\n<li>Array of <a href=\"#point\" rel=\"nofollow\">points</a>.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> PointCloud</p>\n<pre><span class=\"n\">PointCloud</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">ndarray</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32_t</span><span class=\"p\">,</span> <span class=\"n\">ndim</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"n\">point_cloud</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>Pose</h4>\n<ul>\n<li>\n<p><em>struct</em> Pose</p>\n<ul>\n<li>Point <strong>point</strong>\n<ul>\n<li>Coordinate of the robot.</li>\n</ul>\n</li>\n<li>float <strong>yaw</strong>\n<ul>\n<li>Angle of the robot.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> Pose</p>\n<pre><span class=\"n\">Pose</span><span class=\"p\">(</span><span class=\"n\">Point</span> <span class=\"n\">point</span><span class=\"p\">,</span> <span class=\"nb\">float</span> <span class=\"n\">yaw</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>DynamicWindow</h4>\n<ul>\n<li>\n<p><em>struct</em> DynamicWindow</p>\n<ul>\n<li>int <strong>nPossibleV</strong>:\n<ul>\n<li>Number of linear velocities in the Dynamic Window.</li>\n</ul>\n</li>\n<li>float *<strong>possibleV</strong>:\n<ul>\n<li>Array of linear velocities with resolution of <a href=\"#config\" rel=\"nofollow\">Config.velocityResolution</a></li>\n</ul>\n</li>\n<li>int <strong>nPossibleW</strong>:\n<ul>\n<li>Number of angular velocities in the Dynamic Window</li>\n</ul>\n</li>\n<li>float *<strong>possibleW</strong>:\n<ul>\n<li>Array of angular velocities with resolution of <a href=\"#config\" rel=\"nofollow\">Config.yawrateResolution</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p><em>class</em> DynamicWindow</p>\n<pre><span class=\"n\">DynamicWindow</span><span class=\"p\">(</span><span class=\"nb\">tuple</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">Config</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h3>Functions</h3>\n<h4>planning</h4>\n<p>Calculates best linear and angular velocities given the state. Only\nrequired function to use this library.</p>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"n\">Velocity</span> <span class=\"nf\">planning</span> <span class=\"p\">(</span><span class=\"n\">Pose</span> <span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">Velocity</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">Point</span> <span class=\"n\">goal</span><span class=\"p\">,</span> <span class=\"n\">PointCloud</span> <span class=\"o\">*</span><span class=\"n\">pointCloud</span><span class=\"p\">,</span> <span class=\"n\">Config</span> <span class=\"n\">config</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> <a href=\"#pose\" rel=\"nofollow\">Pose</a></li>\n<li><strong>velocity:</strong> <a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><strong>goal:</strong> <a href=\"#point\" rel=\"nofollow\">Point</a></li>\n<li><strong>pointCloud:</strong> <a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a></li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<pre><span class=\"n\">linear_velocity</span><span class=\"p\">,</span> <span class=\"n\">angular_velocity</span> <span class=\"o\">=</span> <span class=\"n\">planning</span><span class=\"p\">(</span><span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">,</span> <span class=\"n\">point_cloud</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> tuple: (x, y, yaw)</li>\n<li><strong>velocity:</strong> tuple: (Linear Velocity, Angular Velocity)</li>\n<li><strong>goal:</strong> tuple: (x, y)</li>\n<li><strong>point_cloud:</strong> Numpy Array of shape (N, 2) and type np.float32</li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>createDynamicWindow</h4>\n<p>Given robot configuration and current velocities, calculates <a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a>.\nThe memory is allocated dynamically inside of the function and must be freed using\n<a href=\"#freedynamicwindow\" rel=\"nofollow\">freeDynamicWindow</a> function.</p>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">void</span> <span class=\"nf\">createDynamicWindow</span><span class=\"p\">(</span><span class=\"n\">Velocity</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">Config</span> <span class=\"n\">config</span><span class=\"p\">,</span> <span class=\"n\">DynamicWindow</span> <span class=\"o\">**</span><span class=\"n\">dynamicWindow</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>velocity:</strong> <a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n<li><strong>dynamicWindow:</strong> <a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<p><a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a> class is used to create a DynamicWindow instance.</p>\n<pre><span class=\"n\">dw</span> <span class=\"o\">=</span> <span class=\"n\">dwa</span><span class=\"o\">.</span><span class=\"n\">DynamicWindow</span><span class=\"p\">(</span><span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">possible_v</span><span class=\"p\">,</span> <span class=\"n\">dw</span><span class=\"o\">.</span><span class=\"n\">possible_w</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>velocity:</strong> tuple: (Linear Velocity, Angular Velocity)</li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a> class</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p><a href=\"https://raw.githubusercontent.com/goktug97/DynamicWindowApproach/master/img/dynamic_window.jpg\" rel=\"nofollow\">Dynamic Window <cite>[2]</cite></a></p>\n<h4>freeDynamicWindow</h4>\n<p>Free dynamically allocated memory.</p>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">void</span> <span class=\"nf\">freeDynamicWindow</span><span class=\"p\">(</span><span class=\"n\">DynamicWindow</span> <span class=\"o\">*</span><span class=\"n\">dynamicWindow</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>dynamicWindow:</strong> <a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<p>Handled by the <a href=\"#dynamicwindow\" rel=\"nofollow\">DynamicWindow</a> class. See below.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">__dealloc__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thisptr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">NULL</span><span class=\"p\">:</span>\n        <span class=\"n\">cdwa</span><span class=\"o\">.</span><span class=\"n\">freeDynamicWindow</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thisptr</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>motion</h4>\n<p>Given current position and velocities, calculates next position after\ngiven dt using differential drive motion model. Can be used to\nsimulate motion in a simulated environment.</p>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"n\">Pose</span> <span class=\"nf\">motion</span><span class=\"p\">(</span><span class=\"n\">Pose</span> <span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">Velocity</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"kt\">float</span> <span class=\"n\">dt</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> <a href=\"#pose\" rel=\"nofollow\">Pose</a></li>\n<li><strong>velocity:</strong> <a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><strong>dt:</strong> float (seconds)</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<pre><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">yaw</span> <span class=\"o\">=</span> <span class=\"n\">motion</span><span class=\"p\">(</span><span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">dt</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> tuple: (x, y, yaw)</li>\n<li><strong>velocity:</strong> tuple: (Linear Velocity, Angular Velocity)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>calculateVelocityCost</h4>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">float</span> <span class=\"nf\">calculateVelocityCost</span><span class=\"p\">(</span><span class=\"n\">Velocity</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">Config</span> <span class=\"n\">config</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>velocity:</strong> <a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<pre><span class=\"n\">velocity_cost</span> <span class=\"o\">=</span> <span class=\"n\">calculate_velocity_cost</span><span class=\"p\">(</span><span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>velocity:</strong> tuple: (Linear Velocity, Angular Velocity)</li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>calculateHeadingCost</h4>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">float</span> <span class=\"nf\">calculateHeadingCost</span><span class=\"p\">(</span><span class=\"n\">Pose</span> <span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">Point</span> <span class=\"n\">goal</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> <a href=\"#pose\" rel=\"nofollow\">Pose</a></li>\n<li><strong>goal:</strong> <a href=\"#point\" rel=\"nofollow\">Point</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<pre><span class=\"n\">heading_cost</span> <span class=\"o\">=</span> <span class=\"n\">calculate_heading_cost</span><span class=\"p\">(</span><span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">goal</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> tuple: (x, y, yaw)</li>\n<li><strong>goal:</strong> tuple: (x, y)</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>calculateClearanceCost</h4>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">float</span> <span class=\"nf\">calculateClearanceCost</span><span class=\"p\">(</span><span class=\"n\">Pose</span> <span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">Velocity</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">PointCloud</span> <span class=\"o\">*</span><span class=\"n\">pointCloud</span><span class=\"p\">,</span> <span class=\"n\">Config</span> <span class=\"n\">config</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> <a href=\"#pose\" rel=\"nofollow\">Pose</a></li>\n<li><strong>velocity:</strong> <a href=\"#velocity\" rel=\"nofollow\">Velocity</a></li>\n<li><strong>pointCloud:</strong> <a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a></li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">calculate_clearance_cost</span><span class=\"p\">(</span><span class=\"n\">pose</span><span class=\"p\">,</span> <span class=\"n\">velocity</span><span class=\"p\">,</span> <span class=\"n\">point_cloud</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">):</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pose:</strong> tuple: (x, y, yaw)</li>\n<li><strong>velocity:</strong> tuple: (Linear Velocity, Angular Velocity)</li>\n<li><strong>point_cloud:</strong> Numpy Array of shape (N, 2) and type np.float32</li>\n<li><strong>config:</strong> <a href=\"#config\" rel=\"nofollow\">Config</a></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4>createPointCloud</h4>\n<p>Given a size, creates a <a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a>. Must be freed using <a href=\"#freepointcloud\" rel=\"nofollow\">freePointCloud</a>.</p>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"n\">PointCloud</span><span class=\"o\">*</span> <span class=\"nf\">createPointCloud</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">size</span><span class=\"p\">);</span>\n</pre>\n<pre><span class=\"k\">for</span> <span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">i</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span> <span class=\"n\">i</span> <span class=\"o\">&lt;</span> <span class=\"n\">pointCloud</span><span class=\"o\">-&gt;</span><span class=\"n\">size</span><span class=\"p\">;</span> <span class=\"o\">++</span><span class=\"n\">i</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n  <span class=\"n\">pointCloud</span><span class=\"o\">-&gt;</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n  <span class=\"n\">pointCloud</span><span class=\"o\">-&gt;</span><span class=\"n\">points</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">].</span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"mf\">0.0</span>\n<span class=\"p\">}</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>size:</strong> int</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<p><a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a> class is used to create a PointCloud instance. All\nfunctions in python accepts numpy array instead of PointCloud instance. The\nPointCloud instance is created inside of the function.</p>\n<pre><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">600</span>\n<span class=\"n\">point_cloud</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">size</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n<span class=\"n\">point_cloud</span> <span class=\"o\">=</span> <span class=\"n\">dwa</span><span class=\"o\">.</span><span class=\"n\">PointCloud</span><span class=\"p\">(</span><span class=\"n\">point_cloud</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h4>freePointCloud</h4>\n<ul>\n<li>\n<p>C</p>\n<pre><span class=\"kt\">void</span> <span class=\"nf\">freePointCloud</span><span class=\"p\">(</span><span class=\"n\">PointCloud</span><span class=\"o\">*</span> <span class=\"n\">pointCloud</span><span class=\"p\">);</span>\n</pre>\n<ul>\n<li><strong>Parameters:</strong>\n<ul>\n<li><strong>pointCloud:</strong> <a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li>\n<p>Python</p>\n<p>Handled by the <a href=\"#pointcloud\" rel=\"nofollow\">PointCloud</a> class. See below.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">__dealloc__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thisptr</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">NULL</span><span class=\"p\">:</span>\n        <span class=\"n\">cdwa</span><span class=\"o\">.</span><span class=\"n\">freePointCloud</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">thisptr</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>References</h2>\n<a>\n</a><ol><a>\n</a><li><a>D. Fox, W. Burgard and S. Thrun, \"The dynamic window approach to\ncollision avoidance,\" in IEEE Robotics &amp; Automation Magazine, vol. 4,\nno. 1, pp. 23-33, March 1997.  doi: 10.1109/100.580977 URL:\n</a><a href=\"http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=580977&amp;isnumber=12589\" rel=\"nofollow\">http://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=580977&amp;isnumber=12589</a></li>\n</ol>\n<a>\n</a><ol><a>\n</a><li><a></a><a href=\"http://ais.informatik.uni-freiburg.de/teaching/ss19/robotics/slides/19-pathplanning-long.pdf\" rel=\"nofollow\">http://ais.informatik.uni-freiburg.de/teaching/ss19/robotics/slides/19-pathplanning-long.pdf</a></li>\n</ol>\n<h2>License</h2>\n<p>MIT License.</p>\n\n          </div>"}, "last_serial": 6386912, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "49076cbe58c2500f37968ac6ae5ac448", "sha256": "e44c1aa6995766cde9301b8ddb25f7102ba2d7a0ed3ce34d28cfe508b034bfce"}, "downloads": -1, "filename": "dynamic-window-approach-1.0.1.tar.gz", "has_sig": false, "md5_digest": "49076cbe58c2500f37968ac6ae5ac448", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 75298, "upload_time": "2019-12-24T16:46:34", "upload_time_iso_8601": "2019-12-24T16:46:34.123713Z", "url": "https://files.pythonhosted.org/packages/d2/35/ec3daa0ca37fa98993a1515eccca6c6595a081c7659c4ceed9308f6f7d1d/dynamic-window-approach-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "2a03618fd09ac920696aece3be74d908", "sha256": "396a193c37cb52f77b18db388f64decf074a9ddd085e3e04f1f36918464001cf"}, "downloads": -1, "filename": "dynamic_window_approach-1.0.2-py3.8-linux-x86_64.egg", "has_sig": false, "md5_digest": "2a03618fd09ac920696aece3be74d908", "packagetype": "bdist_egg", "python_version": "3.8", "requires_python": ">=3.6", "size": 208908, "upload_time": "2019-12-25T18:26:08", "upload_time_iso_8601": "2019-12-25T18:26:08.609265Z", "url": "https://files.pythonhosted.org/packages/1d/e1/e7152b46b3ead0081a29fb2d4d775c318f69481b704d59187c634a174d93/dynamic_window_approach-1.0.2-py3.8-linux-x86_64.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1804fb00e2076c19d9ee7beb98e7988", "sha256": "63897884a7f8ebca403983718fe12644c391a2114418ad093d8710b0be3fef76"}, "downloads": -1, "filename": "dynamic-window-approach-1.0.2.tar.gz", "has_sig": false, "md5_digest": "b1804fb00e2076c19d9ee7beb98e7988", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 75314, "upload_time": "2019-12-25T18:26:11", "upload_time_iso_8601": "2019-12-25T18:26:11.124618Z", "url": "https://files.pythonhosted.org/packages/df/e2/398ef1b74fdb4916b120725b47f8270939275b713a5bb136e04ff81a9e45/dynamic-window-approach-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "fdcd8c17b597b50d2b813230c5388175", "sha256": "fe8a7ae35a5cccf802d7c804d6c2b2dcedf6fd43a964a698921cd70e537f297a"}, "downloads": -1, "filename": "dynamic-window-approach-1.0.3.tar.gz", "has_sig": false, "md5_digest": "fdcd8c17b597b50d2b813230c5388175", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 75685, "upload_time": "2019-12-25T18:55:46", "upload_time_iso_8601": "2019-12-25T18:55:46.186176Z", "url": "https://files.pythonhosted.org/packages/be/2b/552e733c198815945abf4408be155a1748f5d0073f4bdeb7f15af36cb59f/dynamic-window-approach-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "c9c957d6cd2d48a00c66b62372b6cfa5", "sha256": "0763f9eb454a9de1e789e9981de5527f5baf0ae5fe019f70132dfda9e1c7e44b"}, "downloads": -1, "filename": "dynamic-window-approach-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c9c957d6cd2d48a00c66b62372b6cfa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 152661, "upload_time": "2020-01-02T16:56:16", "upload_time_iso_8601": "2020-01-02T16:56:16.210457Z", "url": "https://files.pythonhosted.org/packages/74/60/f41345dc8a4bc4e0f62345be4b18ad93fb63513c305f9e3da5590f60be6a/dynamic-window-approach-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c9c957d6cd2d48a00c66b62372b6cfa5", "sha256": "0763f9eb454a9de1e789e9981de5527f5baf0ae5fe019f70132dfda9e1c7e44b"}, "downloads": -1, "filename": "dynamic-window-approach-1.1.0.tar.gz", "has_sig": false, "md5_digest": "c9c957d6cd2d48a00c66b62372b6cfa5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 152661, "upload_time": "2020-01-02T16:56:16", "upload_time_iso_8601": "2020-01-02T16:56:16.210457Z", "url": "https://files.pythonhosted.org/packages/74/60/f41345dc8a4bc4e0f62345be4b18ad93fb63513c305f9e3da5590f60be6a/dynamic-window-approach-1.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:42 2020"}