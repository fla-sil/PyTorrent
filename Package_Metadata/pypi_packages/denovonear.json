{"info": {"author": "Jeremy McRae", "author_email": "jeremy.mcrae@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "![travis](https://travis-ci.org/jeremymcrae/denovonear.svg?branch=master)\n\n### Denovonear\n\nThis code assesses whether de novo single-nucleotide variants are closer\ntogether within the coding sequence of a gene than expected by chance. We use\nlocal-sequence based mutation rates to account for differential mutability of\nregions. The default rates are per-trinucleotide based see [Nature Genetics\n46:944\u2013950](http://www.nature.com/ng/journal/v46/n9/full/ng.3050.html), but\nyou can use your own rates, or even longer sequence contexts, such as 5-mers or\n7-mers.\n\n### Install\n```sh\npip install denovonear\n```\n\n\n### Usage\nAnalyse *de novo* mutations within python:\n\n```py\nfrom denovonear.cluster_test import cluster_de_novos\n\nsymbol = 'PPP2R5D'\nde_novos = {'missense': [42975003, 42975003, 42975003, 42975013], 'nonsense': []}\np_values = cluster_de_novos(symbol, de_novos, iterations=1000000)\n```\n\nPull out site-specific rates by creating Transcript objects, then get the\nrates by consequence at each site\n\n```py\nfrom denovonear.ensembl_requester import EnsemblRequest\nfrom denovonear.load_mutation_rates import load_mutation_rates\nfrom denovonear.load_gene import construct_gene_object\nfrom denovonear.site_specific_rates import SiteRates\n\n# convenience object to extract transcript coordinates and sequence from Ensembl\nensembl = EnsemblRequest(cache_folder='cache', genome_build='grch37')\ntranscript = construct_gene_object(ensembl, 'ENST00000346085')\nmut_rates = load_mutation_rates()\n\nrates = SiteRates(transcript, mut_rates)\n\n# rates are stored by consequence, but you can iterate through to find all\n# possible sites in and around the CDS:\nfor cq in ['missense', 'nonsense', 'splice_lof', 'synonymous']:\n    for site in rates[cq]:\n        site['pos'] = transcript.get_position_on_chrom(site['pos'], site['offset'])\n\n# or if you just want the summed rate\nrates['missense'].get_summed_rate()\n```\n\nYou can also analyse de novo clustering via the denovonear command:\n\n```sh\ndenovonear cluster \\\n   --in data/example_de_novos.txt \\\n   --out output.txt\n```\n\nThat command uses a minimal example de novo input file, included in the git\nrepository. The input is a tab-separated file with a line for each de novo\nevent. The columns are HGNC symbol, chromosome, position, VEP consequence for\nthe variant, and whether the de novo is a SNP or indel (the analysis excludes\nindels).\n\nOther options are:\n\n* `--rates PATH_TO_RATES`\n* `--cache-folder PATH_TO_CACHE_DIR`\n* `--genome-build \"grch37\" or \"grch38\" (default=grch37)`\n\nThe optional rates file is a table separated file with three columns: 'from',\n'to', and 'mu_snp'. The 'from' column contains DNA sequence (where the length\nis an odd number) with the base to change at the central nucleotide. The 'to'\ncolumn contains the sequence with the central base modified. The 'mu_snp' column\ncontains the probability of the change (as per site per generation).\n\nThe cache folder defaults to making a folder named \"cache\" within the working\ndirectory. The genome build indicates which genome build the coordinates of the\nde novo variants are based on, and defaults to GRCh37.\n\n### Identify transcripts containing de novo events\n\nYou can identify transcripts containing de novos events with the\n`identify_transcripts.py` script. This either identifies all transcripts for a\ngene with one or more de novo events, or identifies the minimal set of\ntranscripts to contain all de novos (where transcripts are prioritised on the\nbasis of number of de novo events, and length of coding sequence). Transcripts\ncan be identified with:\n\n.. code:: bash\n\n    denovonear transcripts \\\n        --de-novos data/example_de_novos.txt \\\n        --out output.txt \\\n        --all-transcripts\n\nOther options are:\n\n* `--minimise-transcripts` in place of `--all-transcripts`, to find the minimal\n  set of transcripts\n* `--genome-build \"grch37\" or \"grch38\" (default=grch37)`\n\n### Gene or transcript based mutation rates\nYou can generate mutation rates for either the union of alternative transcripts\nfor a gene, or for a specific Ensembl transcript ID with the\n`construct_mutation_rates.py` script. Lof and missense mutation rates can be\ngenerated with:\n\n```sh\ndenovonear rates \\\n    --genes data/example_gene_ids.txt \\\n    --out output.txt\n```\n\nThe tab-separated output file will contain one row per gene/transcript, with\neach line containing a transcript ID or gene symbol, a log10 transformed\nmissense mutation rate, a log10 transformed nonsense mutation rate, and a log10\ntransformed synonymous mutation rate.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jeremymcrae/denovonear", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "denovonear", "package_url": "https://pypi.org/project/denovonear/", "platform": "", "project_url": "https://pypi.org/project/denovonear/", "project_urls": {"Homepage": "https://github.com/jeremymcrae/denovonear"}, "release_url": "https://pypi.org/project/denovonear/0.8.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Package to examine de novo clustering", "version": "0.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"travis\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a5577661ee22780230d1904ffb9b73a1016b4ce3/68747470733a2f2f7472617669732d63692e6f72672f6a6572656d796d637261652f64656e6f766f6e6561722e7376673f6272616e63683d6d6173746572\"></p>\n<h3>Denovonear</h3>\n<p>This code assesses whether de novo single-nucleotide variants are closer\ntogether within the coding sequence of a gene than expected by chance. We use\nlocal-sequence based mutation rates to account for differential mutability of\nregions. The default rates are per-trinucleotide based see <a href=\"http://www.nature.com/ng/journal/v46/n9/full/ng.3050.html\" rel=\"nofollow\">Nature Genetics\n46:944\u2013950</a>, but\nyou can use your own rates, or even longer sequence contexts, such as 5-mers or\n7-mers.</p>\n<h3>Install</h3>\n<pre>pip install denovonear\n</pre>\n<h3>Usage</h3>\n<p>Analyse <em>de novo</em> mutations within python:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">denovonear.cluster_test</span> <span class=\"kn\">import</span> <span class=\"n\">cluster_de_novos</span>\n\n<span class=\"n\">symbol</span> <span class=\"o\">=</span> <span class=\"s1\">'PPP2R5D'</span>\n<span class=\"n\">de_novos</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'missense'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">42975003</span><span class=\"p\">,</span> <span class=\"mi\">42975003</span><span class=\"p\">,</span> <span class=\"mi\">42975003</span><span class=\"p\">,</span> <span class=\"mi\">42975013</span><span class=\"p\">],</span> <span class=\"s1\">'nonsense'</span><span class=\"p\">:</span> <span class=\"p\">[]}</span>\n<span class=\"n\">p_values</span> <span class=\"o\">=</span> <span class=\"n\">cluster_de_novos</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"p\">,</span> <span class=\"n\">de_novos</span><span class=\"p\">,</span> <span class=\"n\">iterations</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">)</span>\n</pre>\n<p>Pull out site-specific rates by creating Transcript objects, then get the\nrates by consequence at each site</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">denovonear.ensembl_requester</span> <span class=\"kn\">import</span> <span class=\"n\">EnsemblRequest</span>\n<span class=\"kn\">from</span> <span class=\"nn\">denovonear.load_mutation_rates</span> <span class=\"kn\">import</span> <span class=\"n\">load_mutation_rates</span>\n<span class=\"kn\">from</span> <span class=\"nn\">denovonear.load_gene</span> <span class=\"kn\">import</span> <span class=\"n\">construct_gene_object</span>\n<span class=\"kn\">from</span> <span class=\"nn\">denovonear.site_specific_rates</span> <span class=\"kn\">import</span> <span class=\"n\">SiteRates</span>\n\n<span class=\"c1\"># convenience object to extract transcript coordinates and sequence from Ensembl</span>\n<span class=\"n\">ensembl</span> <span class=\"o\">=</span> <span class=\"n\">EnsemblRequest</span><span class=\"p\">(</span><span class=\"n\">cache_folder</span><span class=\"o\">=</span><span class=\"s1\">'cache'</span><span class=\"p\">,</span> <span class=\"n\">genome_build</span><span class=\"o\">=</span><span class=\"s1\">'grch37'</span><span class=\"p\">)</span>\n<span class=\"n\">transcript</span> <span class=\"o\">=</span> <span class=\"n\">construct_gene_object</span><span class=\"p\">(</span><span class=\"n\">ensembl</span><span class=\"p\">,</span> <span class=\"s1\">'ENST00000346085'</span><span class=\"p\">)</span>\n<span class=\"n\">mut_rates</span> <span class=\"o\">=</span> <span class=\"n\">load_mutation_rates</span><span class=\"p\">()</span>\n\n<span class=\"n\">rates</span> <span class=\"o\">=</span> <span class=\"n\">SiteRates</span><span class=\"p\">(</span><span class=\"n\">transcript</span><span class=\"p\">,</span> <span class=\"n\">mut_rates</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># rates are stored by consequence, but you can iterate through to find all</span>\n<span class=\"c1\"># possible sites in and around the CDS:</span>\n<span class=\"k\">for</span> <span class=\"n\">cq</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'missense'</span><span class=\"p\">,</span> <span class=\"s1\">'nonsense'</span><span class=\"p\">,</span> <span class=\"s1\">'splice_lof'</span><span class=\"p\">,</span> <span class=\"s1\">'synonymous'</span><span class=\"p\">]:</span>\n    <span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">rates</span><span class=\"p\">[</span><span class=\"n\">cq</span><span class=\"p\">]:</span>\n        <span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">transcript</span><span class=\"o\">.</span><span class=\"n\">get_position_on_chrom</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s1\">'pos'</span><span class=\"p\">],</span> <span class=\"n\">site</span><span class=\"p\">[</span><span class=\"s1\">'offset'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># or if you just want the summed rate</span>\n<span class=\"n\">rates</span><span class=\"p\">[</span><span class=\"s1\">'missense'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_summed_rate</span><span class=\"p\">()</span>\n</pre>\n<p>You can also analyse de novo clustering via the denovonear command:</p>\n<pre>denovonear cluster <span class=\"se\">\\</span>\n   --in data/example_de_novos.txt <span class=\"se\">\\</span>\n   --out output.txt\n</pre>\n<p>That command uses a minimal example de novo input file, included in the git\nrepository. The input is a tab-separated file with a line for each de novo\nevent. The columns are HGNC symbol, chromosome, position, VEP consequence for\nthe variant, and whether the de novo is a SNP or indel (the analysis excludes\nindels).</p>\n<p>Other options are:</p>\n<ul>\n<li><code>--rates PATH_TO_RATES</code></li>\n<li><code>--cache-folder PATH_TO_CACHE_DIR</code></li>\n<li><code>--genome-build \"grch37\" or \"grch38\" (default=grch37)</code></li>\n</ul>\n<p>The optional rates file is a table separated file with three columns: 'from',\n'to', and 'mu_snp'. The 'from' column contains DNA sequence (where the length\nis an odd number) with the base to change at the central nucleotide. The 'to'\ncolumn contains the sequence with the central base modified. The 'mu_snp' column\ncontains the probability of the change (as per site per generation).</p>\n<p>The cache folder defaults to making a folder named \"cache\" within the working\ndirectory. The genome build indicates which genome build the coordinates of the\nde novo variants are based on, and defaults to GRCh37.</p>\n<h3>Identify transcripts containing de novo events</h3>\n<p>You can identify transcripts containing de novos events with the\n<code>identify_transcripts.py</code> script. This either identifies all transcripts for a\ngene with one or more de novo events, or identifies the minimal set of\ntranscripts to contain all de novos (where transcripts are prioritised on the\nbasis of number of de novo events, and length of coding sequence). Transcripts\ncan be identified with:</p>\n<p>.. code:: bash</p>\n<pre><code>denovonear transcripts \\\n    --de-novos data/example_de_novos.txt \\\n    --out output.txt \\\n    --all-transcripts\n</code></pre>\n<p>Other options are:</p>\n<ul>\n<li><code>--minimise-transcripts</code> in place of <code>--all-transcripts</code>, to find the minimal\nset of transcripts</li>\n<li><code>--genome-build \"grch37\" or \"grch38\" (default=grch37)</code></li>\n</ul>\n<h3>Gene or transcript based mutation rates</h3>\n<p>You can generate mutation rates for either the union of alternative transcripts\nfor a gene, or for a specific Ensembl transcript ID with the\n<code>construct_mutation_rates.py</code> script. Lof and missense mutation rates can be\ngenerated with:</p>\n<pre>denovonear rates <span class=\"se\">\\</span>\n    --genes data/example_gene_ids.txt <span class=\"se\">\\</span>\n    --out output.txt\n</pre>\n<p>The tab-separated output file will contain one row per gene/transcript, with\neach line containing a transcript ID or gene symbol, a log10 transformed\nmissense mutation rate, a log10 transformed nonsense mutation rate, and a log10\ntransformed synonymous mutation rate.</p>\n\n          </div>"}, "last_serial": 6890860, "releases": {"0.5.0": [{"comment_text": "", "digests": {"md5": "3be848cbca3b70009343dfb2d37ebe47", "sha256": "a321123c913a0bde2c209e574d064032a65007545c9fe8f49ec2f0ea64c91e94"}, "downloads": -1, "filename": "denovonear-0.5.0.tar.gz", "has_sig": false, "md5_digest": "3be848cbca3b70009343dfb2d37ebe47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 146017, "upload_time": "2017-07-26T14:21:30", "upload_time_iso_8601": "2017-07-26T14:21:30.574031Z", "url": "https://files.pythonhosted.org/packages/5f/25/aa72bf3769052c8002b830283a8bbacb2cd6e1a2a22c12ee9859022fece0/denovonear-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "6fb3a8c9e4b9754f22d5ef7a57916976", "sha256": "c3c7922d17f3f1b7173077428b0721fb4d0c45fcc242b7d75a2c766c0f9a1853"}, "downloads": -1, "filename": "denovonear-0.5.1.tar.gz", "has_sig": false, "md5_digest": "6fb3a8c9e4b9754f22d5ef7a57916976", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 180124, "upload_time": "2017-07-26T15:18:01", "upload_time_iso_8601": "2017-07-26T15:18:01.868644Z", "url": "https://files.pythonhosted.org/packages/0a/62/5608d43d65589a21a7f6b725ec78fcce289da0e725280b7d874f8ddbe3ad/denovonear-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "73e965628238fc204aa3a92a4bdbd17e", "sha256": "c949e557ddf9691e6b48f00208f6e37f5d4d249ee8089873c6775fe67d20f661"}, "downloads": -1, "filename": "denovonear-0.5.2.tar.gz", "has_sig": false, "md5_digest": "73e965628238fc204aa3a92a4bdbd17e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 180137, "upload_time": "2017-07-27T09:16:51", "upload_time_iso_8601": "2017-07-27T09:16:51.335004Z", "url": "https://files.pythonhosted.org/packages/75/b3/535a16bff66cb3cb259afae1d4e1003258b4cb4af7bc81c7b2c76adc6ff2/denovonear-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "ade1b34c5e2712c237c9783d434f447a", "sha256": "da55e20be91e97f9a1bd83be32284afd89923d54113b00b1fe9295cbcbf662bc"}, "downloads": -1, "filename": "denovonear-0.5.3.tar.gz", "has_sig": false, "md5_digest": "ade1b34c5e2712c237c9783d434f447a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 180146, "upload_time": "2017-07-27T09:32:38", "upload_time_iso_8601": "2017-07-27T09:32:38.691855Z", "url": "https://files.pythonhosted.org/packages/38/f3/215256488f842106a640294ec42b9fe1fe4f7a7e8748b7ff6ac0374a717e/denovonear-0.5.3.tar.gz", "yanked": false}], "0.5.4": [{"comment_text": "", "digests": {"md5": "ae057afb80f662556adf342e2e1bd7f3", "sha256": "fa9333c246d3db5abe98d79be6bd4eeb5354e45f08421bebf7fe4f8c30ff5649"}, "downloads": -1, "filename": "denovonear-0.5.4.tar.gz", "has_sig": false, "md5_digest": "ae057afb80f662556adf342e2e1bd7f3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 208801, "upload_time": "2018-02-01T22:56:10", "upload_time_iso_8601": "2018-02-01T22:56:10.770747Z", "url": "https://files.pythonhosted.org/packages/0a/ec/c9f261454f065ec4284084deffa852884382211030834ea1d29a785892de/denovonear-0.5.4.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "9c039f890280643023394c29d63fcf10", "sha256": "d5b8baa3eac2c0c9b5bfa3337071e527fe10ce17d38c38f39aa5fe0f5b8d9a68"}, "downloads": -1, "filename": "denovonear-0.6.0.tar.gz", "has_sig": false, "md5_digest": "9c039f890280643023394c29d63fcf10", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 215100, "upload_time": "2018-05-23T23:17:18", "upload_time_iso_8601": "2018-05-23T23:17:18.890671Z", "url": "https://files.pythonhosted.org/packages/5f/6f/d9869072c8823a143f8022acdc017b8d726fe74b50f7ae5cca233c4e879c/denovonear-0.6.0.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "b7cc176df54813e5bad8389330d1530f", "sha256": "0e23977dab1b5cc639dc74b0321d25a353e1f0a4e384afe067870c1cb5928d40"}, "downloads": -1, "filename": "denovonear-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b7cc176df54813e5bad8389330d1530f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 215086, "upload_time": "2018-05-23T23:57:37", "upload_time_iso_8601": "2018-05-23T23:57:37.364243Z", "url": "https://files.pythonhosted.org/packages/1a/59/a68dfe4f5ac02503d88d695f2e060b00125c319933b945545b74f27a6f4d/denovonear-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "6f714117b365ecddbafc8c64fdd15595", "sha256": "679732995cf26bd83452c2f5f90b4c72064c8c3c2410097e230406112c1e73fe"}, "downloads": -1, "filename": "denovonear-0.6.3.tar.gz", "has_sig": false, "md5_digest": "6f714117b365ecddbafc8c64fdd15595", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 215260, "upload_time": "2018-05-25T21:55:00", "upload_time_iso_8601": "2018-05-25T21:55:00.270327Z", "url": "https://files.pythonhosted.org/packages/e0/86/ec2d7fde0f0afea70f6861078069556d45c844d5516dd51d339ed931bed5/denovonear-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "8697aa24856e0de45318ce7c7f00a07b", "sha256": "2b71b65aea39556c16f37ff983c88e09c566317c37653a64aeadceb924a48949"}, "downloads": -1, "filename": "denovonear-0.6.4.tar.gz", "has_sig": false, "md5_digest": "8697aa24856e0de45318ce7c7f00a07b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 214915, "upload_time": "2018-09-24T18:12:10", "upload_time_iso_8601": "2018-09-24T18:12:10.642255Z", "url": "https://files.pythonhosted.org/packages/d2/65/ec29b0b96fc99df3af00de418f640f0025da30a8adf6a1fad24684e2f127/denovonear-0.6.4.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "38466f20b275c59eda4228db7e0f68c7", "sha256": "39dffd0001805eb6bb57cda051cba82da8b198ffd297b7eb8588913fd453e5d7"}, "downloads": -1, "filename": "denovonear-0.7.0.tar.gz", "has_sig": false, "md5_digest": "38466f20b275c59eda4228db7e0f68c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 215641, "upload_time": "2019-04-19T15:32:56", "upload_time_iso_8601": "2019-04-19T15:32:56.782993Z", "url": "https://files.pythonhosted.org/packages/f4/74/2b095897dc12359e79c4a0c4e31bf703c91d3022a411644d939c31c4723d/denovonear-0.7.0.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "f107b1122c161b16269ab60ee326c9e2", "sha256": "879ee5e01c08ecacc4dd6defd235c61f886cea453b110cd601aa3b84e9553b9d"}, "downloads": -1, "filename": "denovonear-0.8.0.tar.gz", "has_sig": false, "md5_digest": "f107b1122c161b16269ab60ee326c9e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 214505, "upload_time": "2019-09-09T18:46:47", "upload_time_iso_8601": "2019-09-09T18:46:47.661728Z", "url": "https://files.pythonhosted.org/packages/1d/da/7e29323a5caad1d27247d9c08e4f98ef9f6332afae998c7750f72ad07306/denovonear-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "d2873b33acd847badf7b54815511538d", "sha256": "01a1fffa94a35b39e77ecafac6263d4a7a11f3ace453699e00c0761d6708e576"}, "downloads": -1, "filename": "denovonear-0.8.1.tar.gz", "has_sig": false, "md5_digest": "d2873b33acd847badf7b54815511538d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 214541, "upload_time": "2019-09-09T21:09:11", "upload_time_iso_8601": "2019-09-09T21:09:11.149167Z", "url": "https://files.pythonhosted.org/packages/c4/17/06377d6ebd931ec0d1bcd7b2c0df67da483d90cc59503a4fe5c163cd6c14/denovonear-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "3d77704b57d9aa957fe2bde2345df4fb", "sha256": "9ad038ee99c90af080e3fe968015ab78f9d869474b65ec95dedcf63cdee8b05f"}, "downloads": -1, "filename": "denovonear-0.8.2.tar.gz", "has_sig": false, "md5_digest": "3d77704b57d9aa957fe2bde2345df4fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 214565, "upload_time": "2019-09-11T22:09:36", "upload_time_iso_8601": "2019-09-11T22:09:36.040158Z", "url": "https://files.pythonhosted.org/packages/ef/b4/e860d4a4ead9864f588d6a02e1d5f5f4faa83f7c90991c5665d0161cbd55/denovonear-0.8.2.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "b401f7799a412af0072c165799934f4f", "sha256": "f725d7598a6470a5bff613253d1b7ebdf844c0ce592dfe31015e38e530e90be1"}, "downloads": -1, "filename": "denovonear-0.8.4.tar.gz", "has_sig": false, "md5_digest": "b401f7799a412af0072c165799934f4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 215545, "upload_time": "2020-03-26T19:43:36", "upload_time_iso_8601": "2020-03-26T19:43:36.114739Z", "url": "https://files.pythonhosted.org/packages/a8/fb/8601613cae1e1165ca87dd3f39442ae6f72768d1854cf05fc91fe54c74e3/denovonear-0.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b401f7799a412af0072c165799934f4f", "sha256": "f725d7598a6470a5bff613253d1b7ebdf844c0ce592dfe31015e38e530e90be1"}, "downloads": -1, "filename": "denovonear-0.8.4.tar.gz", "has_sig": false, "md5_digest": "b401f7799a412af0072c165799934f4f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 215545, "upload_time": "2020-03-26T19:43:36", "upload_time_iso_8601": "2020-03-26T19:43:36.114739Z", "url": "https://files.pythonhosted.org/packages/a8/fb/8601613cae1e1165ca87dd3f39442ae6f72768d1854cf05fc91fe54c74e3/denovonear-0.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:06 2020"}