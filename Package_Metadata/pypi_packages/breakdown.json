{"info": {"author": "Concentric Sky", "author_email": "code@concentricsky.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Framework :: Django", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Topic :: Text Processing :: Markup :: HTML"], "description": "Description\n===========\n\nBreakdown is a lightweight python webserver that parses jinja2 templates.  It's intended to be used by designers for doing rapid prototyping.\n\n\nBasic Usage\n===========\n\nBreakdown needs a ``templates`` directory and a ``static`` directory to serve from.  If your working directory contains these, you can simply run breakdown with no arguments::\n\n    $ breakdown\n\nOr, you can specify the path to a directory containing ``templates`` and ``static``::\n\n    $ breakdown /path/to/project\n\nBreakdown will also work with a django project structure.  If the project path contains an ``apps`` directory, breakdown will automatically detect this and combine the ``static`` and ``templates`` directories for each django app.  You'll also get a listing of the directories it found.  Here's the output of running breakdown on a django project with two apps: 'mainsite' and 'blog'::\n\n    $ breakdown ~/django/myproject\n    Serving templates from:\n      /Users/josh/django/myproject/apps/blog/templates\n      /Users/josh/django/myproject/apps/mainsite/templates\n\n    Serving static data from:\n      /Users/josh/django/myproject/apps/blog/static\n      /Users/josh/django/myproject/apps/mainsite/static\n\nTemplate Context Objects\n------------------------\n\nYou can define values for template variables by supplying a json dictionary for each page.\n\nWhen loading a template, breakdown will attempt to load a json dictionary of the same name from the context directory (``context`` by default) and add it to the page context. For example, when loading ``blog/article_detail.html`` breakdown will look for ``<project root>/context/blog/article_detail.json``.  \n\nFor all pages, breakdown also attempts to load ``<project root>/context/base.json``.  Any values defined here will be available on all pages, and will be overridden by any of the same name defined in individual page context objects.\n\nFor example, if we define ``base.json`` like this::\n\n    {\n     \"request\": {\n        \"user\": {\n             \"name\":\"Austin\",\n             \"member\": \"Member #4812\"\n         }\n     },\n     \"object\": {\n        \"id\": 555,\n        \"title\": \"Excellent Blog Post\"\n     }\n    }\n\nthen ``request`` and ``object`` become available to all templates, and ``{{request.user.name}}`` yields ``Austin``.\n\nYou can specify a function by adding a key with trailing parentheses::\n\n    {\n     \"request\": {\n        \"user\": {\n             \"name\":\"Austin\",\n             \"is_authenticated()\": true,\n             \"birth_year()\": 1982,\n             \"middle_name()\": \"David\",\n             \"member\": \"Member #4812\"\n         }\n     }\n    }\n\nThe trailing parentheses are removed, and now ``{{request.user.is_authenticated()}}`` returns ``True``.  Functions defined in this way ignore any arguments and return the value specified in the json dictionary. ``{{request.user.is_authenticated(arg1, arg2, arg3)}}`` also returns ``True``. However, these functions cannot be used without parentheses and ``{{request.user.is_authenticated}}`` prints something like ``at 0x101f32f50>``.\n\nIf you define a ``__unicode__`` or ``__unicode__()`` key, its value will be used when referencing its enclosing object directly.  With a context object such as either::\n\n    {\n      \"request\": {\n        \"user\": {\n             \"name\":\"Austin\",\n             \"__unicode__\": \"User named Austin\"\n         }\n     }\n    }\n\nor::\n\n    {\n      \"request\": {\n        \"user\": {\n             \"name\":\"Austin\",\n             \"__unicode__()\": \"User named Austin\"\n         }\n     }\n    }\n\nreferencing ``{{request.user}}`` will yield ``User named Austin``.\n\nBreakdown does not support full context object inheritance, but top-level values defined for individual pages override those defined in ``base.json``.  If you define ``<project root>/context/blog/article_detail.json`` like this::\n\n    {\n      \"blog\": {\n        \"title\": \"Skiing Blog\"\n      },\n      \"request\": {\n        \"user\": {\n          \"name\": \"Josh\"\n        }\n      }\n    }\n\nthen in ``/blog/article_detail.html`` a reference to ``{{request.user.name}}`` will print ``Josh``, ``{{request.user.birth_year}}`` is blank, and ``{{request.user}}`` yields ``{u'name': u'Josh'}``.\n\n\nViewing Templates\n-----------------\n\nOnce breakdown is running, it will print the local URL the webserver is listening on::\n\n    Server running at http://127.0.0.1:5000 ...\n\nYou can now view templates in your browser by navigating to http://127.0.0.1:5000.  However, you won't see anything here unless one of your template directories contains a file named ``index.html``.  The URL of any template (besides ``index.html``) will be identical to its filename, with all relative paths preserved.  Below is an example of template filenames and their corresponding URL on the local server:\n\n==================== ====================================\n**Template**         **URL**\n-------------------- ------------------------------------\nindex.html           http://127.0.0.1:5000/\narticle.html         http://127.0.0.1:5000/article\nblog/index.html      http://127.0.0.1:5000/blog\nblog/post.html       http://127.0.0.1:5000/blog/post\n==================== ====================================\n\n*Note: The server will accept template URLs with or without .html appended to them*\n\nAdditional Features\n===================\n\nTemplate tags\n-------------\n\nFor convenience, A few template functions have been added to the `jinja2 template API <http://jinja.pocoo.org/docs/templates/>`_:\n\n################\n{{ greeking() }}\n################\n\nGenerates a block of randomized lorem ipsum text marked-up with various HTML elements: ``<em>``, ``<strong>``, ``<code>``, ``<a>``, ``<ol>``, and ``<ul>``.\n\n##########################\n{{ image(width, height) }}\n##########################\n\nIf you have `PIL <http://www.pythonware.com/products/pil/>`_ installed, you can use this function to generate an ``<img>`` tag with a sample image of the specified size (without PIL, the width/height are ignored and you get a large sample image)\n\n#############################\n{{ url(\\*args, \\*\\*kwargs) }}\n#############################\n\nIgnores all arguments and returns ``'#'``.\n\nCleverCSS\n---------\n\nBreakdown also supports automatic `CleverCSS <http://http://sandbox.pocoo.org/clevercss/>`_ parsing.  If the file ``foo.css`` is requested and not found, breakdown will then look for a matching ``foo.clevercss`` and compile it to vanilla css on the fly.\n\nExport mode\n-----------\n\nBreakdown can run in an alternate *export* mode which dumps all of the rendered templates to a directory that you specify.  It also collects all of your static files (similar to djangos ``collectstatic`` command) to a **static/** directory.  This mode can be enabled with ``-e`` and a path to export to; e.g.: ``breakdown -e output``\n\n**NOTE**: If you want to be able to browse the exported content from the file system directly, you should make sure that your links to other templates end with '.html'\n\n    \nAdvanced\n========\n\n**Command line options**:\n  -h, --help                        show this help message and exit\n  -p PORT, --port=PORT              run server on an alternate port (default is 5000)\n  -m, --media                       treat MEDIA_URL as STATIC_URL in templates\n  -s, --static-url                  override STATIC_URL (default is /static/)\n  -v, --version                     display the version number and exit\n  -c DIR, --context_dir_name=DIR    set the directory name for context object files (default is ``context``)\n  -e DIR, --export=DIR              export HTML to directory instead of running server", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "UNKNOWN", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "breakdown", "package_url": "https://pypi.org/project/breakdown/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/breakdown/", "project_urls": {"Download": "UNKNOWN", "Homepage": "UNKNOWN"}, "release_url": "https://pypi.org/project/breakdown/1.0.9/", "requires_dist": null, "requires_python": null, "summary": "Lightweight jinja2 template prototyping server", "version": "1.0.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"description\">\n<h2>Description</h2>\n<p>Breakdown is a lightweight python webserver that parses jinja2 templates.  It\u2019s intended to be used by designers for doing rapid prototyping.</p>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<p>Breakdown needs a <tt>templates</tt> directory and a <tt>static</tt> directory to serve from.  If your working directory contains these, you can simply run breakdown with no arguments:</p>\n<pre>$ breakdown\n</pre>\n<p>Or, you can specify the path to a directory containing <tt>templates</tt> and <tt>static</tt>:</p>\n<pre>$ breakdown /path/to/project\n</pre>\n<p>Breakdown will also work with a django project structure.  If the project path contains an <tt>apps</tt> directory, breakdown will automatically detect this and combine the <tt>static</tt> and <tt>templates</tt> directories for each django app.  You\u2019ll also get a listing of the directories it found.  Here\u2019s the output of running breakdown on a django project with two apps: \u2018mainsite\u2019 and \u2018blog\u2019:</p>\n<pre>$ breakdown ~/django/myproject\nServing templates from:\n  /Users/josh/django/myproject/apps/blog/templates\n  /Users/josh/django/myproject/apps/mainsite/templates\n\nServing static data from:\n  /Users/josh/django/myproject/apps/blog/static\n  /Users/josh/django/myproject/apps/mainsite/static\n</pre>\n<div id=\"template-context-objects\">\n<h3>Template Context Objects</h3>\n<p>You can define values for template variables by supplying a json dictionary for each page.</p>\n<p>When loading a template, breakdown will attempt to load a json dictionary of the same name from the context directory (<tt>context</tt> by default) and add it to the page context. For example, when loading <tt>blog/article_detail.html</tt> breakdown will look for <tt>&lt;project <span class=\"pre\">root&gt;/context/blog/article_detail.json</span></tt>.</p>\n<p>For all pages, breakdown also attempts to load <tt>&lt;project <span class=\"pre\">root&gt;/context/base.json</span></tt>.  Any values defined here will be available on all pages, and will be overridden by any of the same name defined in individual page context objects.</p>\n<p>For example, if we define <tt>base.json</tt> like this:</p>\n<pre>{\n \"request\": {\n    \"user\": {\n         \"name\":\"Austin\",\n         \"member\": \"Member #4812\"\n     }\n },\n \"object\": {\n    \"id\": 555,\n    \"title\": \"Excellent Blog Post\"\n }\n}\n</pre>\n<p>then <tt>request</tt> and <tt>object</tt> become available to all templates, and <tt>{{request.user.name}}</tt> yields <tt>Austin</tt>.</p>\n<p>You can specify a function by adding a key with trailing parentheses:</p>\n<pre>{\n \"request\": {\n    \"user\": {\n         \"name\":\"Austin\",\n         \"is_authenticated()\": true,\n         \"birth_year()\": 1982,\n         \"middle_name()\": \"David\",\n         \"member\": \"Member #4812\"\n     }\n }\n}\n</pre>\n<p>The trailing parentheses are removed, and now <tt><span class=\"pre\">{{request.user.is_authenticated()}}</span></tt> returns <tt>True</tt>.  Functions defined in this way ignore any arguments and return the value specified in the json dictionary. <tt>{{request.user.is_authenticated(arg1, arg2, <span class=\"pre\">arg3)}}</span></tt> also returns <tt>True</tt>. However, these functions cannot be used without parentheses and <tt>{{request.user.is_authenticated}}</tt> prints something like <tt>at 0x101f32f50&gt;</tt>.</p>\n<p>If you define a <tt>__unicode__</tt> or <tt>__unicode__()</tt> key, its value will be used when referencing its enclosing object directly.  With a context object such as either:</p>\n<pre>{\n  \"request\": {\n    \"user\": {\n         \"name\":\"Austin\",\n         \"__unicode__\": \"User named Austin\"\n     }\n }\n}\n</pre>\n<p>or:</p>\n<pre>{\n  \"request\": {\n    \"user\": {\n         \"name\":\"Austin\",\n         \"__unicode__()\": \"User named Austin\"\n     }\n }\n}\n</pre>\n<p>referencing <tt>{{request.user}}</tt> will yield <tt>User named Austin</tt>.</p>\n<p>Breakdown does not support full context object inheritance, but top-level values defined for individual pages override those defined in <tt>base.json</tt>.  If you define <tt>&lt;project <span class=\"pre\">root&gt;/context/blog/article_detail.json</span></tt> like this:</p>\n<pre>{\n  \"blog\": {\n    \"title\": \"Skiing Blog\"\n  },\n  \"request\": {\n    \"user\": {\n      \"name\": \"Josh\"\n    }\n  }\n}\n</pre>\n<p>then in <tt>/blog/article_detail.html</tt> a reference to <tt>{{request.user.name}}</tt> will print <tt>Josh</tt>, <tt>{{request.user.birth_year}}</tt> is blank, and <tt>{{request.user}}</tt> yields <tt>{u'name': u'Josh'}</tt>.</p>\n</div>\n<div id=\"viewing-templates\">\n<h3>Viewing Templates</h3>\n<p>Once breakdown is running, it will print the local URL the webserver is listening on:</p>\n<pre>Server running at http://127.0.0.1:5000 ...\n</pre>\n<p>You can now view templates in your browser by navigating to <a href=\"http://127.0.0.1:5000\" rel=\"nofollow\">http://127.0.0.1:5000</a>.  However, you won\u2019t see anything here unless one of your template directories contains a file named <tt>index.html</tt>.  The URL of any template (besides <tt>index.html</tt>) will be identical to its filename, with all relative paths preserved.  Below is an example of template filenames and their corresponding URL on the local server:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<tbody>\n<tr><td><strong>Template</strong></td>\n<td><strong>URL</strong></td>\n</tr>\n<tr><td>index.html</td>\n<td><a href=\"http://127.0.0.1:5000/\" rel=\"nofollow\">http://127.0.0.1:5000/</a></td>\n</tr>\n<tr><td>article.html</td>\n<td><a href=\"http://127.0.0.1:5000/article\" rel=\"nofollow\">http://127.0.0.1:5000/article</a></td>\n</tr>\n<tr><td>blog/index.html</td>\n<td><a href=\"http://127.0.0.1:5000/blog\" rel=\"nofollow\">http://127.0.0.1:5000/blog</a></td>\n</tr>\n<tr><td>blog/post.html</td>\n<td><a href=\"http://127.0.0.1:5000/blog/post\" rel=\"nofollow\">http://127.0.0.1:5000/blog/post</a></td>\n</tr>\n</tbody>\n</table>\n<p><em>Note: The server will accept template URLs with or without .html appended to them</em></p>\n</div>\n</div>\n<div id=\"additional-features\">\n<h2>Additional Features</h2>\n<div id=\"template-tags\">\n<h3>Template tags</h3>\n<p>For convenience, A few template functions have been added to the <a href=\"http://jinja.pocoo.org/docs/templates/\" rel=\"nofollow\">jinja2 template API</a>:</p>\n<div id=\"greeking\">\n<h4>{{ greeking() }}</h4>\n<p>Generates a block of randomized lorem ipsum text marked-up with various HTML elements: <tt>&lt;em&gt;</tt>, <tt>&lt;strong&gt;</tt>, <tt>&lt;code&gt;</tt>, <tt>&lt;a&gt;</tt>, <tt>&lt;ol&gt;</tt>, and <tt>&lt;ul&gt;</tt>.</p>\n</div>\n<div id=\"image-width-height\">\n<h4>{{ image(width, height) }}</h4>\n<p>If you have <a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">PIL</a> installed, you can use this function to generate an <tt>&lt;img&gt;</tt> tag with a sample image of the specified size (without PIL, the width/height are ignored and you get a large sample image)</p>\n</div>\n<div id=\"url-args-kwargs\">\n<h4>{{ url(*args, **kwargs) }}</h4>\n<p>Ignores all arguments and returns <tt>'#'</tt>.</p>\n</div>\n</div>\n<div id=\"clevercss\">\n<h3>CleverCSS</h3>\n<p>Breakdown also supports automatic <a href=\"http://http://sandbox.pocoo.org/clevercss/\" rel=\"nofollow\">CleverCSS</a> parsing.  If the file <tt>foo.css</tt> is requested and not found, breakdown will then look for a matching <tt>foo.clevercss</tt> and compile it to vanilla css on the fly.</p>\n</div>\n<div id=\"export-mode\">\n<h3>Export mode</h3>\n<p>Breakdown can run in an alternate <em>export</em> mode which dumps all of the rendered templates to a directory that you specify.  It also collects all of your static files (similar to djangos <tt>collectstatic</tt> command) to a <strong>static/</strong> directory.  This mode can be enabled with <tt><span class=\"pre\">-e</span></tt> and a path to export to; e.g.: <tt>breakdown <span class=\"pre\">-e</span> output</tt></p>\n<p><strong>NOTE</strong>: If you want to be able to browse the exported content from the file system directly, you should make sure that your links to other templates end with \u2018.html\u2019</p>\n</div>\n</div>\n<div id=\"advanced\">\n<h2>Advanced</h2>\n<dl>\n<dt><strong>Command line options</strong>:</dt>\n<dd><table>\n<col>\n<col>\n<tbody>\n<tr><td>\n<kbd><span class=\"option\">-h</span>, <span class=\"option\">--help</span></kbd></td>\n<td>show this help message and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-p <var>PORT</var></span>, <span class=\"option\">--port=<var>PORT</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>run server on an alternate port (default is 5000)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-m</span>, <span class=\"option\">--media</span></kbd></td>\n<td>treat MEDIA_URL as STATIC_URL in templates</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-s</span>, <span class=\"option\">--static-url</span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>override STATIC_URL (default is /static/)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-v</span>, <span class=\"option\">--version</span></kbd></td>\n<td>display the version number and exit</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-c <var>DIR</var></span>, <span class=\"option\">--context_dir_name=<var>DIR</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>set the directory name for context object files (default is <tt>context</tt>)</td></tr>\n<tr><td>\n<kbd><span class=\"option\">-e <var>DIR</var></span>, <span class=\"option\">--export=<var>DIR</var></span></kbd></td>\n</tr>\n<tr><td>\u00a0</td><td>export HTML to directory instead of running server</td></tr>\n</tbody>\n</table>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 787040, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "9589587652117918e8db656d4fdc9a21", "sha256": "69a24236dc4746a4776df9d97cb33e71c5ad09ad2457504aa5a77f0a76091b20"}, "downloads": -1, "filename": "breakdown-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9589587652117918e8db656d4fdc9a21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6157, "upload_time": "2012-01-06T21:53:40", "upload_time_iso_8601": "2012-01-06T21:53:40.091678Z", "url": "https://files.pythonhosted.org/packages/6c/88/2d68b69d12fcbc727b50d3de17993419fd0fd89d44099145e2509263a5c6/breakdown-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b0139ed27d48de094d96380d457cc66a", "sha256": "8daf2af70b8b37d3eb7d9fe3b2f4ac56810b9d88cdebab46c24f86f99d934a38"}, "downloads": -1, "filename": "breakdown-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b0139ed27d48de094d96380d457cc66a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6348, "upload_time": "2012-01-06T23:01:09", "upload_time_iso_8601": "2012-01-06T23:01:09.469808Z", "url": "https://files.pythonhosted.org/packages/e8/3f/22c62b06bf07ff6d6f6543805dacc8cebfa14d03eb182e2e50baf7ec1022/breakdown-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "980bdd3480bce3cb331b37f7c8a8b3a3", "sha256": "9d46eb49a7f646a980fde9dcbf1367005965d7d05bc979179c59d8d56ff0c405"}, "downloads": -1, "filename": "breakdown-1.0.2.tar.gz", "has_sig": false, "md5_digest": "980bdd3480bce3cb331b37f7c8a8b3a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6973, "upload_time": "2012-02-03T02:19:19", "upload_time_iso_8601": "2012-02-03T02:19:19.188107Z", "url": "https://files.pythonhosted.org/packages/91/90/0554d6dda6806c7f57b152b00b9c177683dce62db55e85feebf4e1516d83/breakdown-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "04c99bcefab27afdaa25f1442bb12d20", "sha256": "5114d7510037d134479b3305d9e3684f78902b17b00bfb237428dc0c9a17af05"}, "downloads": -1, "filename": "breakdown-1.0.3.tar.gz", "has_sig": false, "md5_digest": "04c99bcefab27afdaa25f1442bb12d20", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7619, "upload_time": "2012-02-15T19:09:49", "upload_time_iso_8601": "2012-02-15T19:09:49.669677Z", "url": "https://files.pythonhosted.org/packages/86/69/1671b3a938f07a7ccb527dc7b434900f103e7b404d178abd35cd8bbb78c9/breakdown-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "297a0700b01e7090a2e1d5409aa2ac83", "sha256": "6ea98e3d007129d7f77e722a14bab10c459732cdc55096268cb6e50813e54db1"}, "downloads": -1, "filename": "breakdown-1.0.4.tar.gz", "has_sig": false, "md5_digest": "297a0700b01e7090a2e1d5409aa2ac83", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8013, "upload_time": "2012-02-15T22:23:00", "upload_time_iso_8601": "2012-02-15T22:23:00.362313Z", "url": "https://files.pythonhosted.org/packages/57/c9/70d36d6047eb759ff8f9df07c9ddba8e788a9d3d0214365d1a21941b66ce/breakdown-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "52e24b934d84a7cd1f047f6a021b115c", "sha256": "82cedac01a515689adb2530a35da19b1db6820866001f903c48f41c8c1f706fd"}, "downloads": -1, "filename": "breakdown-1.0.5.tar.gz", "has_sig": false, "md5_digest": "52e24b934d84a7cd1f047f6a021b115c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8107, "upload_time": "2012-02-22T20:40:13", "upload_time_iso_8601": "2012-02-22T20:40:13.751498Z", "url": "https://files.pythonhosted.org/packages/2d/f1/9bbc9925e482ef656cf25f897da181e60c30df9d1893c49182094092b95e/breakdown-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "cc35bfc560311a2ffdc7b23742ca8b52", "sha256": "7ed104d70fc98ed2ed67649156006f99120cb261feb872c3a4c3e30d4cb22235"}, "downloads": -1, "filename": "breakdown-1.0.6.tar.gz", "has_sig": false, "md5_digest": "cc35bfc560311a2ffdc7b23742ca8b52", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8867, "upload_time": "2012-05-09T21:33:32", "upload_time_iso_8601": "2012-05-09T21:33:32.994933Z", "url": "https://files.pythonhosted.org/packages/67/5e/865edd3436b49d40213fa7c0f886e2071afc3e67d2b7791e548cf05b16e0/breakdown-1.0.6.tar.gz", "yanked": false}], "1.0.7": [{"comment_text": "", "digests": {"md5": "c2bfd1ab113360bc95ad0991179f731b", "sha256": "bdb2be7770e7b528dc415ae6006a607a5bd71c742f5a2a5fd886fd551377f458"}, "downloads": -1, "filename": "breakdown-1.0.7.tar.gz", "has_sig": false, "md5_digest": "c2bfd1ab113360bc95ad0991179f731b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13150, "upload_time": "2012-10-31T18:49:06", "upload_time_iso_8601": "2012-10-31T18:49:06.120396Z", "url": "https://files.pythonhosted.org/packages/94/1c/d95839ac88141405f65d1ed512e1a2ec3825731b9d1c89b13794de27b1ec/breakdown-1.0.7.tar.gz", "yanked": false}], "1.0.8": [{"comment_text": "", "digests": {"md5": "c2123092b62b1f465e94776b1f28cb6e", "sha256": "fe57a94d98c6c94b6bbfbcf67b90e9ddf3c40756831eabbaf8fe96b4691f0045"}, "downloads": -1, "filename": "breakdown-1.0.8.tar.gz", "has_sig": false, "md5_digest": "c2123092b62b1f465e94776b1f28cb6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13385, "upload_time": "2013-01-18T00:04:13", "upload_time_iso_8601": "2013-01-18T00:04:13.936054Z", "url": "https://files.pythonhosted.org/packages/ae/c0/dcb1d4a59b1acf368b2bc8b753be8a547cb07697e60c06b65c948b7936d2/breakdown-1.0.8.tar.gz", "yanked": false}], "1.0.9": [{"comment_text": "", "digests": {"md5": "27a2d04fb5de2203834f32555efc24b1", "sha256": "088f4ef6faf97055fdc6a9601615dbc49fbf0b315249063058322aeb3a31dc65"}, "downloads": -1, "filename": "breakdown-1.0.9.tar.gz", "has_sig": false, "md5_digest": "27a2d04fb5de2203834f32555efc24b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13527, "upload_time": "2013-02-05T00:35:34", "upload_time_iso_8601": "2013-02-05T00:35:34.971051Z", "url": "https://files.pythonhosted.org/packages/3e/99/444fc512b4317a5d49c9e87740325005be4c27e0e8321f53364a8df54d43/breakdown-1.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "27a2d04fb5de2203834f32555efc24b1", "sha256": "088f4ef6faf97055fdc6a9601615dbc49fbf0b315249063058322aeb3a31dc65"}, "downloads": -1, "filename": "breakdown-1.0.9.tar.gz", "has_sig": false, "md5_digest": "27a2d04fb5de2203834f32555efc24b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13527, "upload_time": "2013-02-05T00:35:34", "upload_time_iso_8601": "2013-02-05T00:35:34.971051Z", "url": "https://files.pythonhosted.org/packages/3e/99/444fc512b4317a5d49c9e87740325005be4c27e0e8321f53364a8df54d43/breakdown-1.0.9.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:21 2020"}