{"info": {"author": "Peter Salnikov", "author_email": "opensource@exrny.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "|Build Status|\n\nWhy I did this fork and what will happen here?\n==============================================\n\nThis project was forked from Pynt. `Raghunandan\nRao <https://github.com/rags/pynt>`__\n\nWe appreciate work made by `Raghunandan Rao <https://github.com/rags>`__\nand will push any good parts of out changes to initial\n`rags/pynt <https://github.com/rags/pynt>`__ repo.\n\nAim of this exr-builder project is to support exrny.com applications\nwith lightweight and easy to use python devops tool. We are going to\naccumulate work done by `Raghunandan Rao <https://github.com/rags>`__\nand other pynt contributers here. Our own changes and new features will\nbe implemented here and pushed as PR to original pynt repo.\n\nA pynt of Python build.\n=======================\n\nFeatures\n--------\n\n-  Easy to learn.\n-  Build tasks are just python funtions.\n-  Manages dependencies between tasks.\n-  Automatically generates a command line interface.\n-  Rake style param passing to tasks\n-  Supports python 2.7 and python 3.x\n\nTodo Features\n-------------\n\n-  Async tasks\n-  Additional tasks timing reporting\n\nInstallation\n------------\n\nYou can install exr-builder from the Python Package Index (PyPI) or from\nsource.\n\nUsing pip\n\n.. code:: bash\n\n    $ pip install exr-builder\n\nUsing easy_install\n\n.. code:: bash\n\n    $ easy_install exr-builder\n\nExample\n-------\n\nThe build script is written in pure Python and exr-builder takes care of\nmanaging any dependencies between tasks and generating a command line\ninterface.\n\nWriting build tasks is really simple, all you need to know is the @task\ndecorator. Tasks are just regular Python functions marked with the\n``@task()`` decorator. Dependencies are specified with ``@task()`` too.\nTasks can be ignored with the ``@task(ignore=True)``. Disabling a task\nis an useful feature to have in situations where you have one task that\na lot of other tasks depend on and you want to quickly remove it from\nthe dependency chains of all the dependent tasks.\n\n**build.py**\n------------\n\n.. code:: python\n\n\n    #!/usr/bin/python\n\n    import sys\n    from exr.builder import task\n\n    @task()\n    def clean():\n        '''Clean build directory.'''\n        print 'Cleaning build directory...'\n\n    @task(clean)\n    def html(target='.'):\n        '''Generate HTML.'''\n        print 'Generating HTML in directory \"%s\"' %  target\n\n    @task(clean, ignore=True)\n    def images():\n        '''Prepare images.'''\n        print 'Preparing images...'\n\n    @task(html,images)\n    def start_server(server='localhost', port = '80'):\n        '''Start the server'''\n        print 'Starting server at %s:%s' % (server, port)\n\n    @task(start_server) #Depends on task with all optional params\n    def stop_server():\n        print 'Stopping server....'\n\n    @task()\n    def copy_file(src, dest):\n        print 'Copying from %s to %s' % (src, dest)\n\n    @task()\n    def echo(*args,**kwargs):\n        print args\n        print kwargs\n        \n    # Default task (if specified) is run when no task is specified in the command line\n    # make sure you define the variable __DEFAULT__ after the task is defined\n    # A good convention is to define it at the end of the module\n    # __DEFAULT__ is an optional member\n\n    __DEFAULT__=start_server\n\n**Running exr-builder tasks**\n-----------------------------\n\nThe command line interface and help is automatically generated. Task\ndescriptions are extracted from function docstrings.\n\n.. code:: bash\n\n    $ exrb -h\n    usage: exrb [-h] [-l] [-v] [-f file] [task [task ...]]\n\n    positional arguments:\n      task                  perform specified task and all its dependencies\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -l, --list-tasks      List the tasks\n      -v, --version         Display the version information\n      -f file, --file file  Build file to read the tasks from. Default is\n                            'build.py'\n\n.. code:: bash\n\n    $ exrb -l\n    Tasks in build file ./build.py:\n      clean                       Clean build directory.\n      copy_file                   \n      echo                        \n      html                        Generate HTML.\n      images           [Ignored]  Prepare images.\n      start_server     [Default]  Start the server\n      stop_server                 \n\n    Powered by exr-builder - A Lightweight Python Build Tool.\n\nexr-builder takes care of dependencies between tasks. In the following\ncase start_server depends on clean, html and image generation (image\ntask is ignored).\n\n.. code:: bash\n\n    $ exrb #Runs the default task start_server. It does exactly what \"exrb start_server\" would do.\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Ignoring task \"images\" ]\n    [ example.py - Starting task \"start_server\" ]\n    Starting server at localhost:80\n    [ example.py - Completed task \"start_server\" ]\n\nThe first few characters of the task name is enough to execute the task,\nas long as the partial name is unambigious. You can specify multiple\ntasks to run in the commandline. Again the dependencies are taken taken\ncare of.\n\n.. code:: bash\n\n    $ exrb cle ht cl\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n\nThe \u2018html\u2019 task dependency \u2018clean\u2019 is run only once. But clean can be\nexplicitly run again later.\n\nexrb tasks can accept parameters from commandline.\n\n.. code:: bash\n\n    $ exrb \"copy_file[/path/to/foo, path_to_bar]\"\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"copy_file\" ]\n    Copying from /path/to/foo to path_to_bar\n    [ example.py - Completed task \"copy_file\" ]\n\nexrb can also accept keyword arguments.\n\n.. code:: bash\n\n    $ exrb start[port=8888]\n    [ example.py - Starting task \"clean\" ]\n    Cleaning build directory...\n    [ example.py - Completed task \"clean\" ]\n    [ example.py - Starting task \"html\" ]\n    Generating HTML in directory \".\"\n    [ example.py - Completed task \"html\" ]\n    [ example.py - Ignoring task \"images\" ]\n    [ example.py - Starting task \"start_server\" ]\n    Starting server at localhost:8888\n    [ example.py - Completed task \"start_server\" ]\n        \n    $ exrb echo[hello,world,foo=bar,blah=123]\n    [ example.py - Starting task \"echo\" ]\n    ('hello', 'world')\n    {'blah': '123', 'foo': 'bar'}\n    [ example.py - Completed task \"echo\" ]\n\n**Organizing build scripts**\n----------------------------\n\nYou can break up your build files into modules and simple import them\ninto your main build file.\n\n.. code:: python\n\n    from deploy_tasks import *\n    from test_tasks import functional_tests, report_coverage\n\nContributors/Contributing\n-------------------------\n\n-  Raghunandan Rao - exr-builder is preceded by and forked from\n   `pynt <https://github.com/rags/pynt>`__, which was created by\n   `Raghunandan Rao <https://github.com/rags/pynt>`__.\n-  Calum J. Eadie - pynt is preceded by and forked from\n   `microbuild <https://github.com/CalumJEadie/microbuild>`__, which was\n   created by `Calum J. Eadie <https://github.com/CalumJEadie>`__.\n\nIf you want to make changes the repo is at\nhttps://github.com/exrny/exr-builder. You will need\n`pytest <http://www.pytest.org>`__ to run the tests\n\n.. code:: bash\n\n    $ ./b t\n\nIt will be great if you can raise a `pull\nrequest <https://help.github.com/articles/using-pull-requests>`__ once\nyou are done.\n\nIf you find any bugs or need new features please raise a ticket in the\n`issues section <https://github.com/exrny/exr-builder/issues>`__ of the\ngithub repo.\n\nLicense\n-------\n\nexr-builder is licensed under a `MIT\nlicense <http://opensource.org/licenses/MIT>`__\n\n.. |Build Status| image:: https://travis-ci.org/exrny/exr-builder.png?branch=master\n   :target: https://travis-ci.org/exrny/exr-builder\n\nChanges\n=======\n\n0.1.0 - 04/02/2018\n------------------\n\n-  Initial commit", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://code.exrny.com/opensource/exr-builder/", "keywords": "devops,build tool", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "exr-builder", "package_url": "https://pypi.org/project/exr-builder/", "platform": "", "project_url": "https://pypi.org/project/exr-builder/", "project_urls": {"Homepage": "https://code.exrny.com/opensource/exr-builder/"}, "release_url": "https://pypi.org/project/exr-builder/0.1.7/", "requires_dist": null, "requires_python": "", "summary": "Lightweight Python Build Tool.", "version": "0.1.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/exrny/exr-builder\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/343a19c1867ac9a0ca082b017711bf5d6a679086/68747470733a2f2f7472617669732d63692e6f72672f6578726e792f6578722d6275696c6465722e706e673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"why-i-did-this-fork-and-what-will-happen-here\">\n<h2>Why I did this fork and what will happen here?</h2>\n<p>This project was forked from Pynt. <a href=\"https://github.com/rags/pynt\" rel=\"nofollow\">Raghunandan\nRao</a></p>\n<p>We appreciate work made by <a href=\"https://github.com/rags\" rel=\"nofollow\">Raghunandan Rao</a>\nand will push any good parts of out changes to initial\n<a href=\"https://github.com/rags/pynt\" rel=\"nofollow\">rags/pynt</a> repo.</p>\n<p>Aim of this exr-builder project is to support exrny.com applications\nwith lightweight and easy to use python devops tool. We are going to\naccumulate work done by <a href=\"https://github.com/rags\" rel=\"nofollow\">Raghunandan Rao</a>\nand other pynt contributers here. Our own changes and new features will\nbe implemented here and pushed as PR to original pynt repo.</p>\n</div>\n<div id=\"a-pynt-of-python-build\">\n<h2>A pynt of Python build.</h2>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>Easy to learn.</li>\n<li>Build tasks are just python funtions.</li>\n<li>Manages dependencies between tasks.</li>\n<li>Automatically generates a command line interface.</li>\n<li>Rake style param passing to tasks</li>\n<li>Supports python 2.7 and python 3.x</li>\n</ul>\n</div>\n<div id=\"todo-features\">\n<h3>Todo Features</h3>\n<ul>\n<li>Async tasks</li>\n<li>Additional tasks timing reporting</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install exr-builder from the Python Package Index (PyPI) or from\nsource.</p>\n<p>Using pip</p>\n<pre>$ pip install exr-builder\n</pre>\n<p>Using easy_install</p>\n<pre>$ easy_install exr-builder\n</pre>\n</div>\n<div id=\"example\">\n<h3>Example</h3>\n<p>The build script is written in pure Python and exr-builder takes care of\nmanaging any dependencies between tasks and generating a command line\ninterface.</p>\n<p>Writing build tasks is really simple, all you need to know is the @task\ndecorator. Tasks are just regular Python functions marked with the\n<tt>@task()</tt> decorator. Dependencies are specified with <tt>@task()</tt> too.\nTasks can be ignored with the <tt>@task(ignore=True)</tt>. Disabling a task\nis an useful feature to have in situations where you have one task that\na lot of other tasks depend on and you want to quickly remove it from\nthe dependency chains of all the dependent tasks.</p>\n</div>\n<div id=\"build-py\">\n<h3><strong>build.py</strong></h3>\n<pre><span class=\"ch\">#!/usr/bin/python</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">exr.builder</span> <span class=\"kn\">import</span> <span class=\"n\">task</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">clean</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''Clean build directory.'''</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Cleaning build directory...'</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">clean</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">html</span><span class=\"p\">(</span><span class=\"n\">target</span><span class=\"o\">=</span><span class=\"s1\">'.'</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Generate HTML.'''</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Generating HTML in directory \"</span><span class=\"si\">%s</span><span class=\"s1\">\"'</span> <span class=\"o\">%</span>  <span class=\"n\">target</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">clean</span><span class=\"p\">,</span> <span class=\"n\">ignore</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">images</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''Prepare images.'''</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Preparing images...'</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">html</span><span class=\"p\">,</span><span class=\"n\">images</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">start_server</span><span class=\"p\">(</span><span class=\"n\">server</span><span class=\"o\">=</span><span class=\"s1\">'localhost'</span><span class=\"p\">,</span> <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"s1\">'80'</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Start the server'''</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Starting server at </span><span class=\"si\">%s</span><span class=\"s1\">:</span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">server</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">(</span><span class=\"n\">start_server</span><span class=\"p\">)</span> <span class=\"c1\">#Depends on task with all optional params</span>\n<span class=\"k\">def</span> <span class=\"nf\">stop_server</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Stopping server....'</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">copy_file</span><span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"s1\">'Copying from </span><span class=\"si\">%s</span><span class=\"s1\"> to </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">src</span><span class=\"p\">,</span> <span class=\"n\">dest</span><span class=\"p\">)</span>\n\n<span class=\"nd\">@task</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">echo</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span> <span class=\"n\">args</span>\n    <span class=\"nb\">print</span> <span class=\"n\">kwargs</span>\n\n<span class=\"c1\"># Default task (if specified) is run when no task is specified in the command line</span>\n<span class=\"c1\"># make sure you define the variable __DEFAULT__ after the task is defined</span>\n<span class=\"c1\"># A good convention is to define it at the end of the module</span>\n<span class=\"c1\"># __DEFAULT__ is an optional member</span>\n\n<span class=\"n\">__DEFAULT__</span><span class=\"o\">=</span><span class=\"n\">start_server</span>\n</pre>\n</div>\n<div id=\"running-exr-builder-tasks\">\n<h3><strong>Running exr-builder tasks</strong></h3>\n<p>The command line interface and help is automatically generated. Task\ndescriptions are extracted from function docstrings.</p>\n<pre>$ exrb -h\nusage: exrb <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-l<span class=\"o\">]</span> <span class=\"o\">[</span>-v<span class=\"o\">]</span> <span class=\"o\">[</span>-f file<span class=\"o\">]</span> <span class=\"o\">[</span>task <span class=\"o\">[</span>task ...<span class=\"o\">]]</span>\n\npositional arguments:\n  task                  perform specified task and all its dependencies\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -l, --list-tasks      List the tasks\n  -v, --version         Display the version information\n  -f file, --file file  Build file to <span class=\"nb\">read</span> the tasks from. Default is\n                        <span class=\"s1\">'build.py'</span>\n</pre>\n<pre>$ exrb -l\nTasks in build file ./build.py:\n  clean                       Clean build directory.\n  copy_file\n  <span class=\"nb\">echo</span>\n  html                        Generate HTML.\n  images           <span class=\"o\">[</span>Ignored<span class=\"o\">]</span>  Prepare images.\n  start_server     <span class=\"o\">[</span>Default<span class=\"o\">]</span>  Start the server\n  stop_server\n\nPowered by exr-builder - A Lightweight Python Build Tool.\n</pre>\n<p>exr-builder takes care of dependencies between tasks. In the following\ncase start_server depends on clean, html and image generation (image\ntask is ignored).</p>\n<pre>$ exrb <span class=\"c1\">#Runs the default task start_server. It does exactly what \"exrb start_server\" would do.\n</span><span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\nCleaning build directory...\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\nGenerating HTML in directory <span class=\"s2\">\".\"</span>\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Ignoring task <span class=\"s2\">\"images\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"start_server\"</span> <span class=\"o\">]</span>\nStarting server at localhost:80\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"start_server\"</span> <span class=\"o\">]</span>\n</pre>\n<p>The first few characters of the task name is enough to execute the task,\nas long as the partial name is unambigious. You can specify multiple\ntasks to run in the commandline. Again the dependencies are taken taken\ncare of.</p>\n<pre>$ exrb cle ht cl\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\nCleaning build directory...\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\nGenerating HTML in directory <span class=\"s2\">\".\"</span>\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\nCleaning build directory...\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\n</pre>\n<p>The \u2018html\u2019 task dependency \u2018clean\u2019 is run only once. But clean can be\nexplicitly run again later.</p>\n<p>exrb tasks can accept parameters from commandline.</p>\n<pre>$ exrb <span class=\"s2\">\"copy_file[/path/to/foo, path_to_bar]\"</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\nCleaning build directory...\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"copy_file\"</span> <span class=\"o\">]</span>\nCopying from /path/to/foo to path_to_bar\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"copy_file\"</span> <span class=\"o\">]</span>\n</pre>\n<p>exrb can also accept keyword arguments.</p>\n<pre>$ exrb start<span class=\"o\">[</span><span class=\"nv\">port</span><span class=\"o\">=</span><span class=\"m\">8888</span><span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\nCleaning build directory...\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"clean\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\nGenerating HTML in directory <span class=\"s2\">\".\"</span>\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"html\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Ignoring task <span class=\"s2\">\"images\"</span> <span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"start_server\"</span> <span class=\"o\">]</span>\nStarting server at localhost:8888\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"start_server\"</span> <span class=\"o\">]</span>\n\n$ exrb echo<span class=\"o\">[</span>hello,world,foo<span class=\"o\">=</span>bar,blah<span class=\"o\">=</span><span class=\"m\">123</span><span class=\"o\">]</span>\n<span class=\"o\">[</span> example.py - Starting task <span class=\"s2\">\"echo\"</span> <span class=\"o\">]</span>\n<span class=\"o\">(</span><span class=\"s1\">'hello'</span>, <span class=\"s1\">'world'</span><span class=\"o\">)</span>\n<span class=\"o\">{</span><span class=\"s1\">'blah'</span>: <span class=\"s1\">'123'</span>, <span class=\"s1\">'foo'</span>: <span class=\"s1\">'bar'</span><span class=\"o\">}</span>\n<span class=\"o\">[</span> example.py - Completed task <span class=\"s2\">\"echo\"</span> <span class=\"o\">]</span>\n</pre>\n</div>\n<div id=\"organizing-build-scripts\">\n<h3><strong>Organizing build scripts</strong></h3>\n<p>You can break up your build files into modules and simple import them\ninto your main build file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">deploy_tasks</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"kn\">from</span> <span class=\"nn\">test_tasks</span> <span class=\"kn\">import</span> <span class=\"n\">functional_tests</span><span class=\"p\">,</span> <span class=\"n\">report_coverage</span>\n</pre>\n</div>\n<div id=\"contributors-contributing\">\n<h3>Contributors/Contributing</h3>\n<ul>\n<li>Raghunandan Rao - exr-builder is preceded by and forked from\n<a href=\"https://github.com/rags/pynt\" rel=\"nofollow\">pynt</a>, which was created by\n<a href=\"https://github.com/rags/pynt\" rel=\"nofollow\">Raghunandan Rao</a>.</li>\n<li>Calum J. Eadie - pynt is preceded by and forked from\n<a href=\"https://github.com/CalumJEadie/microbuild\" rel=\"nofollow\">microbuild</a>, which was\ncreated by <a href=\"https://github.com/CalumJEadie\" rel=\"nofollow\">Calum J. Eadie</a>.</li>\n</ul>\n<p>If you want to make changes the repo is at\n<a href=\"https://github.com/exrny/exr-builder\" rel=\"nofollow\">https://github.com/exrny/exr-builder</a>. You will need\n<a href=\"http://www.pytest.org\" rel=\"nofollow\">pytest</a> to run the tests</p>\n<pre>$ ./b t\n</pre>\n<p>It will be great if you can raise a <a href=\"https://help.github.com/articles/using-pull-requests\" rel=\"nofollow\">pull\nrequest</a> once\nyou are done.</p>\n<p>If you find any bugs or need new features please raise a ticket in the\n<a href=\"https://github.com/exrny/exr-builder/issues\" rel=\"nofollow\">issues section</a> of the\ngithub repo.</p>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>exr-builder is licensed under a <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT\nlicense</a></p>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<h2 id=\"id1\"><span class=\"section-subtitle\">0.1.0 - 04/02/2018</span></h2>\n<ul>\n<li>Initial commit</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3739182, "releases": {"0.1.5": [{"comment_text": "", "digests": {"md5": "d5d9531692d123eb589e2f3d9e8eafe7", "sha256": "4e939fd9483a394c145dd4d1705aafdafb3dfa4512d0b810b7146d57d118a916"}, "downloads": -1, "filename": "exr-builder-0.1.5.tar.gz", "has_sig": false, "md5_digest": "d5d9531692d123eb589e2f3d9e8eafe7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9081, "upload_time": "2018-02-13T20:55:07", "upload_time_iso_8601": "2018-02-13T20:55:07.535970Z", "url": "https://files.pythonhosted.org/packages/4e/20/36822c63d266624bd1c750dc8c9903e8378fad226bce79d006849129214f/exr-builder-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "bc361095f6adc53bf6b5077ff8e4d416", "sha256": "55dc02d9b4ae631c155876b08bcd08372fefcd52781a156094727b50d5be9cda"}, "downloads": -1, "filename": "exr-builder-0.1.6.tar.gz", "has_sig": false, "md5_digest": "bc361095f6adc53bf6b5077ff8e4d416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9080, "upload_time": "2018-02-13T21:01:22", "upload_time_iso_8601": "2018-02-13T21:01:22.163311Z", "url": "https://files.pythonhosted.org/packages/43/12/2f3161f7811c290336382dd4bc400909ab753519d87120418ec539476b72/exr-builder-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "95b9a5135359e754c44ddd0a15248fc8", "sha256": "66d6999acc3cb26a3e5076fe8dfed23455b284870dfc673c7dd2ab6a2d81a0d1"}, "downloads": -1, "filename": "exr-builder-0.1.7.tar.gz", "has_sig": false, "md5_digest": "95b9a5135359e754c44ddd0a15248fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9210, "upload_time": "2018-04-05T21:40:25", "upload_time_iso_8601": "2018-04-05T21:40:25.830753Z", "url": "https://files.pythonhosted.org/packages/d7/0a/7492b2adea71daed879e56115a2b9a5682c3434e13c1d4c392500ce38947/exr-builder-0.1.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "95b9a5135359e754c44ddd0a15248fc8", "sha256": "66d6999acc3cb26a3e5076fe8dfed23455b284870dfc673c7dd2ab6a2d81a0d1"}, "downloads": -1, "filename": "exr-builder-0.1.7.tar.gz", "has_sig": false, "md5_digest": "95b9a5135359e754c44ddd0a15248fc8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9210, "upload_time": "2018-04-05T21:40:25", "upload_time_iso_8601": "2018-04-05T21:40:25.830753Z", "url": "https://files.pythonhosted.org/packages/d7/0a/7492b2adea71daed879e56115a2b9a5682c3434e13c1d4c392500ce38947/exr-builder-0.1.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:34 2020"}