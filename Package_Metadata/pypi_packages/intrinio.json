{"info": {"author": "nhedlund", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "intrinio\n========\n\n|Build Status|\n\nUnofficial Intrinio API client for Python. It gives easy access to\nfinancial data.\n\nSetup\n-----\n\nInstall this package by using the pip tool:\n\n.. code:: bash\n\n    pip install intrinio\n\nBefore retrieving data using the package the API username and password\nhas to be configured, either by setting the username and password\nattributes of the intrinio package:\n\n.. code:: python\n\n    import intrinio\n    intrinio.client.username = 'USERNAME_FROM_INTRINIO'\n    intrinio.client.password = 'PASSWORD_FROM_INTRINIO'\n\nOr by setting the system environment variables:\n\n-  INTRINIO\\_USERNAME\n-  INTRINIO\\_PASSWORD\n\nQuick start\n-----------\n\nInstall the intrinio package, import it and set username and password as\nabove first.\n\nGet prices starting at 2016-01-01 for Apple:\n\n.. code:: python\n\n    intrinio.prices('AAPL', start_date='2016-01-01')\n\nGet yearly fundamentals including PE ratio, net debt, total capital and\nover 100 other variables for Apple:\n\n.. code:: python\n\n    intrinio.financials('AAPL')\n\nGet company information about Google:\n\n.. code:: python\n\n    intrinio.companies('GOOG')\n\nGet company information about Google using the low level **get**\nfunction:\n\n.. code:: python\n\n    intrinio.get('companies', identifier='GOOG')\n\nGet cik, lei, name and ticker of companies with \"Bank\" in their company\nname:\n\n.. code:: python\n\n    intrinio.companies(query='Bank')\n\nScreen stocks with PE higher than 10:\n\n.. code:: python\n\n    intrinio.screener('pricetoearnings~gt~10')\n\nUsage\n-----\n\nThere are a high- and low level functions used to access the Intrinio\nAPI.\n\nThe high level functions are mostly simple wrappers of the **get**\nfunction that retrieves all data with optional parameters to filter the\ndata. They might also do some data conversion like for example the\nprices endpoint where the date column is used as the index for the\nPandas DataFrame.\n\nFor more information about available endpoints and their parameters, see\nIntrinio API documentation at: `Intrinio\nDocs <http://docs.intrinio.com/>`__\n\nLow level functions\n~~~~~~~~~~~~~~~~~~~\n\n-  get(endpoint, \\*\\*parameters):\n\n   Get complete dataset from an endpoint using optional query\n   parameters.\n\n   Args:\n\n   ::\n\n       endpoint: Intrinio endpoint, for example: companies\n       parameters: Optional query parameters\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  get\\_page(endpoint, page\\_number=1, page\\_size=None, \\*\\*parameters):\n\n   Get a dataset page from an endpoint using optional query parameters.\n\n   Args:\n\n   ::\n\n       endpoint: Intrinio endpoint, for example: companies\n       page_number: Optional page number where 1 is first page (default 1)\n       page_size: Optional page size (default max page size for the endpoint)\n       parameters: Optional query parameters\n\n   Returns: Dataset page as a Pandas DataFrame with an additional\n   total\\_pages attribute\n\nHigh level functions\n~~~~~~~~~~~~~~~~~~~~\n\n-  companies(identifier=None, query=None):\n\n   Get companies with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Identifier for the legal entity or a security associated\n           with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\n       query: Search of company name or ticker symbol\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  securities(identifier=None, query=None, exch\\_symbol=None):\n\n   Get securities with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Identifier for the legal entity or a security associated\n           with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\n       query: Search of security name or ticker symbol\n       exch_symbol: Exchange symbol\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  indices(identifier=None, query=None, type=None):\n\n   Get indices with optional filtering using parameters.\n\n   Args:\n\n   ::\n\n       identifier: Intrinio symbol associated with the index\n       query: Search of index name or symbol\n       type: Type of indices: stock_market | economic | sic\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  prices(identifier, start\\_date=None, end\\_date=None,\n   frequency='daily', sort\\_order='desc'):\n\n   Get historical stock market prices or indices.\n\n   Args:\n\n   ::\n\n       identifier: Stock market symbol or index\n       start_date: Start date of prices (default no filter)\n       end_date: Last date (default today)\n       frequency: Frequency of prices: daily (default) | weekly | monthly |\n           quarterly | yearly\n       sort_order: Order of prices: asc | desc (default)\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  news(identifier):\n\n   Get news for a company.\n\n   Args:\n\n   ::\n\n       identifier: stock market ticker symbol associated with the company's\n           common stock. If the company is foreign, use the stock exchange\n           code, followed by a colon, then the ticker.\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  financials(identifier, type='FY', statement='calculations'):\n\n   Get standardized fundamental data for a company.\n\n   Args:\n\n   ::\n\n       identifier: stock market ticker symbol associated with the company's\n           common stock. If the company is foreign, use the stock exchange\n           code, followed by a colon, then the ticker.\n       type: Period type: FY (default) | QTR | TTM | YTD\n       statement: Type of fundamental data: calculations (default) |\n           income_statement | balance_sheet | cash_flow_statement\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  financials\\_period(identifier, fiscal\\_year, fiscal\\_period='FY',\n   statement='calculations'):\n\n   Get standardized fundamental data for a single period for a company.\n\n   Args:\n\n   ::\n\n       fiscal_year: Year\n       fiscal_period: FY (default) | Q1 | Q2 | Q3 | Q4 | Q1TTM | Q2TTM | Q3TTM\n           | Q2YTD | Q3YTD\n       identifier: stock market ticker symbol associated with the company's\n           common stock. If the company is foreign, use the stock exchange\n           code, followed by a colon, then the ticker.\n       statement: Type of fundamental data: calculations (default) |\n           income_statement | balance_sheet | cash_flow_statement\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  fundamentals(identifier, type='FY', statement='calculations'):\n\n   Get available periods with standardized fundamental data for a\n   company.\n\n   Args:\n\n   ::\n\n       identifier: stock market ticker symbol associated with the company's\n           common stock. If the company is foreign, use the stock exchange\n           code, followed by a colon, then the ticker.\n       type: Period type: FY (default) | QTR | TTM | YTD\n       statement: Type of fundamental data: calculations (default) |\n           income_statement | balance_sheet | cash_flow_statement\n\n   Returns: Dataset as a Pandas DataFrame\n\n-  screener(conditions, order\\_column=None, order\\_direction=None,\n   primary\\_only=None, logic=None):\n\n   Find securities that meet a list of conditions.\n\n   Args:\n\n   ::\n\n       conditions: Comma-separated list of conditions. Each condition\n           consists of three or four elements separated by tildes (~):\n           Data_tag~Operator~Value~Label(Optional)\n       order_column: A data tag by which to order the results\n       order_direction: Order of the results: asc (default) | desc\n       primary_only: Return only primary securities (excluding special\n           securities such as preferred shares)\n       logic: How the conditions are applied using AND by default\n\n   Returns: List of tickers that meet the conditions as a Pandas\n   DataFrame\n\nTests\n-----\n\nThe tests will cache API requests in ~/.cache/intrinio to make the tests\ngo faster and avoid excessive API traffic. It is not recommended to use\ncaching for non-testing purposes, it should only be used for tests.\n\nRun the tests using pytest in the root directory of the project:\n\n.. code:: bash\n\n    py.test\n\nOr run the runtests script to also generate a coverage report (saved to\ntmp/).\n\n.. code:: bash\n\n    bin/runtests\n\nVersion history\n---------------\n\n-  See CHANGELOG.md\n\nLicense\n-------\n\n-  MIT License\n\n.. |Build Status| image:: https://travis-ci.org/nhedlund/intrinio.svg?branch=master\n   :target: https://travis-ci.org/nhedlund/intrinio", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nhedlund/intrinio", "keywords": "intrinio,API,data,client,quant,finance", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "intrinio", "package_url": "https://pypi.org/project/intrinio/", "platform": "", "project_url": "https://pypi.org/project/intrinio/", "project_urls": {"Homepage": "https://github.com/nhedlund/intrinio"}, "release_url": "https://pypi.org/project/intrinio/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "Intrinio API client", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/nhedlund/intrinio\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21c5260a6216be048d525d11e98b15741c102c91/68747470733a2f2f7472617669732d63692e6f72672f6e6865646c756e642f696e7472696e696f2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Unofficial Intrinio API client for Python. It gives easy access to\nfinancial data.</p>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>Install this package by using the pip tool:</p>\n<pre>pip install intrinio\n</pre>\n<p>Before retrieving data using the package the API username and password\nhas to be configured, either by setting the username and password\nattributes of the intrinio package:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">intrinio</span>\n<span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">username</span> <span class=\"o\">=</span> <span class=\"s1\">'USERNAME_FROM_INTRINIO'</span>\n<span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">password</span> <span class=\"o\">=</span> <span class=\"s1\">'PASSWORD_FROM_INTRINIO'</span>\n</pre>\n<p>Or by setting the system environment variables:</p>\n<ul>\n<li>INTRINIO_USERNAME</li>\n<li>INTRINIO_PASSWORD</li>\n</ul>\n</div>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<p>Install the intrinio package, import it and set username and password as\nabove first.</p>\n<p>Get prices starting at 2016-01-01 for Apple:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">prices</span><span class=\"p\">(</span><span class=\"s1\">'AAPL'</span><span class=\"p\">,</span> <span class=\"n\">start_date</span><span class=\"o\">=</span><span class=\"s1\">'2016-01-01'</span><span class=\"p\">)</span>\n</pre>\n<p>Get yearly fundamentals including PE ratio, net debt, total capital and\nover 100 other variables for Apple:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">financials</span><span class=\"p\">(</span><span class=\"s1\">'AAPL'</span><span class=\"p\">)</span>\n</pre>\n<p>Get company information about Google:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">companies</span><span class=\"p\">(</span><span class=\"s1\">'GOOG'</span><span class=\"p\">)</span>\n</pre>\n<p>Get company information about Google using the low level <strong>get</strong>\nfunction:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'companies'</span><span class=\"p\">,</span> <span class=\"n\">identifier</span><span class=\"o\">=</span><span class=\"s1\">'GOOG'</span><span class=\"p\">)</span>\n</pre>\n<p>Get cik, lei, name and ticker of companies with \u201cBank\u201d in their company\nname:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">companies</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"s1\">'Bank'</span><span class=\"p\">)</span>\n</pre>\n<p>Screen stocks with PE higher than 10:</p>\n<pre><span class=\"n\">intrinio</span><span class=\"o\">.</span><span class=\"n\">screener</span><span class=\"p\">(</span><span class=\"s1\">'pricetoearnings~gt~10'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>There are a high- and low level functions used to access the Intrinio\nAPI.</p>\n<p>The high level functions are mostly simple wrappers of the <strong>get</strong>\nfunction that retrieves all data with optional parameters to filter the\ndata. They might also do some data conversion like for example the\nprices endpoint where the date column is used as the index for the\nPandas DataFrame.</p>\n<p>For more information about available endpoints and their parameters, see\nIntrinio API documentation at: <a href=\"http://docs.intrinio.com/\" rel=\"nofollow\">Intrinio\nDocs</a></p>\n<div id=\"low-level-functions\">\n<h3>Low level functions</h3>\n<ul>\n<li><p>get(endpoint, **parameters):</p>\n<p>Get complete dataset from an endpoint using optional query\nparameters.</p>\n<p>Args:</p>\n<pre>endpoint: Intrinio endpoint, for example: companies\nparameters: Optional query parameters\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>get_page(endpoint, page_number=1, page_size=None, **parameters):</p>\n<p>Get a dataset page from an endpoint using optional query parameters.</p>\n<p>Args:</p>\n<pre>endpoint: Intrinio endpoint, for example: companies\npage_number: Optional page number where 1 is first page (default 1)\npage_size: Optional page size (default max page size for the endpoint)\nparameters: Optional query parameters\n</pre>\n<p>Returns: Dataset page as a Pandas DataFrame with an additional\ntotal_pages attribute</p>\n</li>\n</ul>\n</div>\n<div id=\"high-level-functions\">\n<h3>High level functions</h3>\n<ul>\n<li><p>companies(identifier=None, query=None):</p>\n<p>Get companies with optional filtering using parameters.</p>\n<p>Args:</p>\n<pre>identifier: Identifier for the legal entity or a security associated\n    with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\nquery: Search of company name or ticker symbol\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>securities(identifier=None, query=None, exch_symbol=None):</p>\n<p>Get securities with optional filtering using parameters.</p>\n<p>Args:</p>\n<pre>identifier: Identifier for the legal entity or a security associated\n    with the company: TICKER SYMBOL | FIGI | OTHER IDENTIFIER\nquery: Search of security name or ticker symbol\nexch_symbol: Exchange symbol\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>indices(identifier=None, query=None, type=None):</p>\n<p>Get indices with optional filtering using parameters.</p>\n<p>Args:</p>\n<pre>identifier: Intrinio symbol associated with the index\nquery: Search of index name or symbol\ntype: Type of indices: stock_market | economic | sic\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>prices(identifier, start_date=None, end_date=None,\nfrequency=\u2019daily\u2019, sort_order=\u2019desc\u2019):</p>\n<p>Get historical stock market prices or indices.</p>\n<p>Args:</p>\n<pre>identifier: Stock market symbol or index\nstart_date: Start date of prices (default no filter)\nend_date: Last date (default today)\nfrequency: Frequency of prices: daily (default) | weekly | monthly |\n    quarterly | yearly\nsort_order: Order of prices: asc | desc (default)\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>news(identifier):</p>\n<p>Get news for a company.</p>\n<p>Args:</p>\n<pre>identifier: stock market ticker symbol associated with the company's\n    common stock. If the company is foreign, use the stock exchange\n    code, followed by a colon, then the ticker.\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>financials(identifier, type=\u2019FY\u2019, statement=\u2019calculations\u2019):</p>\n<p>Get standardized fundamental data for a company.</p>\n<p>Args:</p>\n<pre>identifier: stock market ticker symbol associated with the company's\n    common stock. If the company is foreign, use the stock exchange\n    code, followed by a colon, then the ticker.\ntype: Period type: FY (default) | QTR | TTM | YTD\nstatement: Type of fundamental data: calculations (default) |\n    income_statement | balance_sheet | cash_flow_statement\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>financials_period(identifier, fiscal_year, fiscal_period=\u2019FY\u2019,\nstatement=\u2019calculations\u2019):</p>\n<p>Get standardized fundamental data for a single period for a company.</p>\n<p>Args:</p>\n<pre>fiscal_year: Year\nfiscal_period: FY (default) | Q1 | Q2 | Q3 | Q4 | Q1TTM | Q2TTM | Q3TTM\n    | Q2YTD | Q3YTD\nidentifier: stock market ticker symbol associated with the company's\n    common stock. If the company is foreign, use the stock exchange\n    code, followed by a colon, then the ticker.\nstatement: Type of fundamental data: calculations (default) |\n    income_statement | balance_sheet | cash_flow_statement\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>fundamentals(identifier, type=\u2019FY\u2019, statement=\u2019calculations\u2019):</p>\n<p>Get available periods with standardized fundamental data for a\ncompany.</p>\n<p>Args:</p>\n<pre>identifier: stock market ticker symbol associated with the company's\n    common stock. If the company is foreign, use the stock exchange\n    code, followed by a colon, then the ticker.\ntype: Period type: FY (default) | QTR | TTM | YTD\nstatement: Type of fundamental data: calculations (default) |\n    income_statement | balance_sheet | cash_flow_statement\n</pre>\n<p>Returns: Dataset as a Pandas DataFrame</p>\n</li>\n<li><p>screener(conditions, order_column=None, order_direction=None,\nprimary_only=None, logic=None):</p>\n<p>Find securities that meet a list of conditions.</p>\n<p>Args:</p>\n<pre>conditions: Comma-separated list of conditions. Each condition\n    consists of three or four elements separated by tildes (~):\n    Data_tag~Operator~Value~Label(Optional)\norder_column: A data tag by which to order the results\norder_direction: Order of the results: asc (default) | desc\nprimary_only: Return only primary securities (excluding special\n    securities such as preferred shares)\nlogic: How the conditions are applied using AND by default\n</pre>\n<p>Returns: List of tickers that meet the conditions as a Pandas\nDataFrame</p>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>The tests will cache API requests in ~/.cache/intrinio to make the tests\ngo faster and avoid excessive API traffic. It is not recommended to use\ncaching for non-testing purposes, it should only be used for tests.</p>\n<p>Run the tests using pytest in the root directory of the project:</p>\n<pre>py.test\n</pre>\n<p>Or run the runtests script to also generate a coverage report (saved to\ntmp/).</p>\n<pre>bin/runtests\n</pre>\n</div>\n<div id=\"version-history\">\n<h2>Version history</h2>\n<ul>\n<li>See CHANGELOG.md</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<ul>\n<li>MIT License</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 3701330, "releases": {"0.1.14": [{"comment_text": "", "digests": {"md5": "5ac2dd7e01a24a37057e98166a2ead2d", "sha256": "d913a1760608e7e80f2dae664fa166d4a1156f768818acc69069d174b7a12264"}, "downloads": -1, "filename": "intrinio-0.1.14.tar.gz", "has_sig": false, "md5_digest": "5ac2dd7e01a24a37057e98166a2ead2d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4874, "upload_time": "2017-01-16T13:05:38", "upload_time_iso_8601": "2017-01-16T13:05:38.230649Z", "url": "https://files.pythonhosted.org/packages/c6/47/a4926f944f3f193b3a06b6f0a78f334575a5d8a0796765fb1495ddfc7cfa/intrinio-0.1.14.tar.gz", "yanked": false}], "0.1.15": [{"comment_text": "", "digests": {"md5": "7a080fa9c6c1f3dac73bf6d08a41a4dc", "sha256": "5203143954993774fb658c1715d9369298f4bf96a6714a80caa7452d623c503e"}, "downloads": -1, "filename": "intrinio-0.1.15.tar.gz", "has_sig": false, "md5_digest": "7a080fa9c6c1f3dac73bf6d08a41a4dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4914, "upload_time": "2017-02-05T16:50:02", "upload_time_iso_8601": "2017-02-05T16:50:02.245589Z", "url": "https://files.pythonhosted.org/packages/d5/30/7a00b26383ee89ac8849579688d07115f66c8446d3ef12742865aac9204e/intrinio-0.1.15.tar.gz", "yanked": false}], "0.1.16": [{"comment_text": "", "digests": {"md5": "790b2663244ce4037e0b23ae354e1745", "sha256": "c1493e3b69623db72964e8f7cd6cb99f23b434601aed8100530abbb22d14a977"}, "downloads": -1, "filename": "intrinio-0.1.16.tar.gz", "has_sig": false, "md5_digest": "790b2663244ce4037e0b23ae354e1745", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5001, "upload_time": "2017-06-07T17:11:03", "upload_time_iso_8601": "2017-06-07T17:11:03.135182Z", "url": "https://files.pythonhosted.org/packages/bd/ef/eae883d1436dea57424d8da968a3fe1d5d5d0144a2427e0e488299f9ec1c/intrinio-0.1.16.tar.gz", "yanked": false}], "0.1.17": [{"comment_text": "", "digests": {"md5": "90f5f23e3ff861a9542a1beab06efcf1", "sha256": "72df2799736d3929256de0cb6e87e74a259e7d42d551bbf9e385917b56fb1fea"}, "downloads": -1, "filename": "intrinio-0.1.17.tar.gz", "has_sig": false, "md5_digest": "90f5f23e3ff861a9542a1beab06efcf1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5787, "upload_time": "2017-09-28T17:05:06", "upload_time_iso_8601": "2017-09-28T17:05:06.384361Z", "url": "https://files.pythonhosted.org/packages/7a/06/e16d8c50f4aa0a37cf9cf0e4b169e8059ce98b9f473570ae438f4ac36436/intrinio-0.1.17.tar.gz", "yanked": false}], "0.1.18": [{"comment_text": "", "digests": {"md5": "99eb55666c51f37a7d2e88ba19d40dc5", "sha256": "2ab46e8585274e99c3e4a31d0b526aa0a4a275a0f2868928e1cad58f799aa493"}, "downloads": -1, "filename": "intrinio-0.1.18.tar.gz", "has_sig": false, "md5_digest": "99eb55666c51f37a7d2e88ba19d40dc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6587, "upload_time": "2018-01-01T13:53:17", "upload_time_iso_8601": "2018-01-01T13:53:17.737806Z", "url": "https://files.pythonhosted.org/packages/27/d4/979ce10b9fdfe134d6fa49808606d8be9a96af5a7dc04ecca65bc153a330/intrinio-0.1.18.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "af528fbc28beb2fd0b6a1acf395a4fd7", "sha256": "98551dea3ca1e3f0d05e1a77b6b8d1ba53c6994fbe83862ada54ff36148072c0"}, "downloads": -1, "filename": "intrinio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "af528fbc28beb2fd0b6a1acf395a4fd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8018, "upload_time": "2018-02-01T18:29:22", "upload_time_iso_8601": "2018-02-01T18:29:22.475623Z", "url": "https://files.pythonhosted.org/packages/6e/74/b1bb61fca7be8c7563183f702810f08ae346dcea49a20908e4613dc17cb7/intrinio-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "71c3498d8f5d05d70fa8a916769d9ad0", "sha256": "a42af826de4873df38079d32eb77ea314a128d50c8af4f03d1a138dd07d84057"}, "downloads": -1, "filename": "intrinio-0.2.1.tar.gz", "has_sig": false, "md5_digest": "71c3498d8f5d05d70fa8a916769d9ad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7176, "upload_time": "2018-03-24T09:36:46", "upload_time_iso_8601": "2018-03-24T09:36:46.704477Z", "url": "https://files.pythonhosted.org/packages/3c/bb/71afeb08e8f779f7f4eba3145290a3d6a545746a5ef89c96a1e1adec5df9/intrinio-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "71c3498d8f5d05d70fa8a916769d9ad0", "sha256": "a42af826de4873df38079d32eb77ea314a128d50c8af4f03d1a138dd07d84057"}, "downloads": -1, "filename": "intrinio-0.2.1.tar.gz", "has_sig": false, "md5_digest": "71c3498d8f5d05d70fa8a916769d9ad0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7176, "upload_time": "2018-03-24T09:36:46", "upload_time_iso_8601": "2018-03-24T09:36:46.704477Z", "url": "https://files.pythonhosted.org/packages/3c/bb/71afeb08e8f779f7f4eba3145290a3d6a545746a5ef89c96a1e1adec5df9/intrinio-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:21 2020"}