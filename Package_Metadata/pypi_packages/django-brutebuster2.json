{"info": {"author": "MTR Design", "author_email": "office@mtr-design.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "Description\n===========\nBruteBuster is a simple, pluggable Django app that can help you protect against password bruteforcing attempts.\n\nThe module overrides the default authenticate() function from django.contrib.auth, so it provides automated protection both for your custom login pages and for the admin login page.\n\nEach block is applied against a unique username/IP address combination. In this way, bruteforcing attempts coming from a different IP address would not prevent the original user from logging in.\n\nInstallation\n------------\n1. Install the BruteBuster module to your Python path\n```\n#pip install django-brutebuster2\n```\nTo verify that the Python module is available, you can run the Django shell and check the value of BruteBuster.version:\n```\n$python manage.py shell\n(InteractiveConsole)\n>>> import BruteBuster\n>>> print(BruteBuster.version)\n0.2.0\n```\nIf you don't see any errors, then congrats! The hard part is over.\n\n2. Add BruteBuster to your INSTALLED_APPS list in settings.py\n3. Add BruteBuster.middleware.RequestMiddleware to your MIDDLEWARE_CLASSES in settings.py\n4. Run python manage.py migrate --run-syncdb to add the BruteBuster table to your database\n5. That's it! Don't forget to restart your server, if needed.\n\nOperation\n---------\nIf everything is working properly, you should see a Failed attempts table in the Django admin interface. Whenever a failed login is detected, the Failures counter for the respective Username/IP address combo is incremented. If the counter goes over a certain threshold (called BB_MAX_FAILURES), login attempts for this User and IP are blocked until BB_BLOCK_INTERVAL (minutes) passes without a failed login.\n\nThe default BB_MAX_FAILURES value is 5, and the default BB_BLOCK_INTERVAL is 3 (minutes). Both values can be overridden in settings.py.\n\nDisplay\n-------\nAll active blocks will have a 'Blocked' column set to True in the Failed Attempts table in the Django admin.\n\nBlock removal\n-------------\nThe easiest way to remove a block is to delete the corresponding line from the Failed Attempts table. It is completely safe to remove data from this table (the worst that could happen is to remove some existing block)\n\nFuture\n------\nFound some bug? Got a suggestion? Need a feature that's not present yet? In any case we would love to hear back from you. You can use the contact form, or simply throw us an email at office () mtr-design.com.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mtrdesign/django-brutebuster/", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-brutebuster2", "package_url": "https://pypi.org/project/django-brutebuster2/", "platform": "", "project_url": "https://pypi.org/project/django-brutebuster2/", "project_urls": {"Homepage": "https://github.com/mtrdesign/django-brutebuster/"}, "release_url": "https://pypi.org/project/django-brutebuster2/0.2.0/", "requires_dist": null, "requires_python": "", "summary": "Django Bruteforce Buster", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Description</h1>\n<p>BruteBuster is a simple, pluggable Django app that can help you protect against password bruteforcing attempts.</p>\n<p>The module overrides the default authenticate() function from django.contrib.auth, so it provides automated protection both for your custom login pages and for the admin login page.</p>\n<p>Each block is applied against a unique username/IP address combination. In this way, bruteforcing attempts coming from a different IP address would not prevent the original user from logging in.</p>\n<h2>Installation</h2>\n<ol>\n<li>Install the BruteBuster module to your Python path</li>\n</ol>\n<pre><code>#pip install django-brutebuster2\n</code></pre>\n<p>To verify that the Python module is available, you can run the Django shell and check the value of BruteBuster.version:</p>\n<pre><code>$python manage.py shell\n(InteractiveConsole)\n&gt;&gt;&gt; import BruteBuster\n&gt;&gt;&gt; print(BruteBuster.version)\n0.2.0\n</code></pre>\n<p>If you don't see any errors, then congrats! The hard part is over.</p>\n<ol>\n<li>Add BruteBuster to your INSTALLED_APPS list in settings.py</li>\n<li>Add BruteBuster.middleware.RequestMiddleware to your MIDDLEWARE_CLASSES in settings.py</li>\n<li>Run python manage.py migrate --run-syncdb to add the BruteBuster table to your database</li>\n<li>That's it! Don't forget to restart your server, if needed.</li>\n</ol>\n<h2>Operation</h2>\n<p>If everything is working properly, you should see a Failed attempts table in the Django admin interface. Whenever a failed login is detected, the Failures counter for the respective Username/IP address combo is incremented. If the counter goes over a certain threshold (called BB_MAX_FAILURES), login attempts for this User and IP are blocked until BB_BLOCK_INTERVAL (minutes) passes without a failed login.</p>\n<p>The default BB_MAX_FAILURES value is 5, and the default BB_BLOCK_INTERVAL is 3 (minutes). Both values can be overridden in settings.py.</p>\n<h2>Display</h2>\n<p>All active blocks will have a 'Blocked' column set to True in the Failed Attempts table in the Django admin.</p>\n<h2>Block removal</h2>\n<p>The easiest way to remove a block is to delete the corresponding line from the Failed Attempts table. It is completely safe to remove data from this table (the worst that could happen is to remove some existing block)</p>\n<h2>Future</h2>\n<p>Found some bug? Got a suggestion? Need a feature that's not present yet? In any case we would love to hear back from you. You can use the contact form, or simply throw us an email at office () mtr-design.com.</p>\n\n          </div>"}, "last_serial": 4547754, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "1a32b9ed42a1bf0f37d7c8e7ca49fe67", "sha256": "b4e65bad88c96b793300a075db51979851af9168a8c5b87ddcd29f0064dfedcb"}, "downloads": -1, "filename": "django_brutebuster2-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a32b9ed42a1bf0f37d7c8e7ca49fe67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7027, "upload_time": "2018-11-30T16:29:22", "upload_time_iso_8601": "2018-11-30T16:29:22.098270Z", "url": "https://files.pythonhosted.org/packages/a0/5a/d1f8499fcf70d7ab21ff78202ff8e8018e6f55301cf3d96d58ea5e9fae84/django_brutebuster2-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6463b3cbf4e4ad4c785da4617ceb17f", "sha256": "f5260925263f76fa21a6109617c7f2ac5c5e91189180be70adfb8dc72791724c"}, "downloads": -1, "filename": "django-brutebuster2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b6463b3cbf4e4ad4c785da4617ceb17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4482, "upload_time": "2018-11-30T16:29:23", "upload_time_iso_8601": "2018-11-30T16:29:23.715215Z", "url": "https://files.pythonhosted.org/packages/26/ce/c1fac86653f96c08a2c35a161fc6acd21ac53b235d77ff5f68f800f16159/django-brutebuster2-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1a32b9ed42a1bf0f37d7c8e7ca49fe67", "sha256": "b4e65bad88c96b793300a075db51979851af9168a8c5b87ddcd29f0064dfedcb"}, "downloads": -1, "filename": "django_brutebuster2-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a32b9ed42a1bf0f37d7c8e7ca49fe67", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7027, "upload_time": "2018-11-30T16:29:22", "upload_time_iso_8601": "2018-11-30T16:29:22.098270Z", "url": "https://files.pythonhosted.org/packages/a0/5a/d1f8499fcf70d7ab21ff78202ff8e8018e6f55301cf3d96d58ea5e9fae84/django_brutebuster2-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b6463b3cbf4e4ad4c785da4617ceb17f", "sha256": "f5260925263f76fa21a6109617c7f2ac5c5e91189180be70adfb8dc72791724c"}, "downloads": -1, "filename": "django-brutebuster2-0.2.0.tar.gz", "has_sig": false, "md5_digest": "b6463b3cbf4e4ad4c785da4617ceb17f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4482, "upload_time": "2018-11-30T16:29:23", "upload_time_iso_8601": "2018-11-30T16:29:23.715215Z", "url": "https://files.pythonhosted.org/packages/26/ce/c1fac86653f96c08a2c35a161fc6acd21ac53b235d77ff5f68f800f16159/django-brutebuster2-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:19 2020"}