{"info": {"author": "Dima Tisnek", "author_email": "dimaqq@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: AsyncIO", "License :: OSI Approved :: MIT License", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3.9", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Debuggers"], "description": "# Await, What?\n\nTell you what waits for what in an `async/await` program.\n\n## Sprint Setup\n\nComms: https://gitter.im/awaitwhat/community\n\n* [Python3.8](https://www.python.org/downloads/release/python-380b4/) (preferred) or [Python 3.7](https://www.python.org/downloads/release/python-374/)\n* Your platform dev tools (compiler, etc).\n* Ensure that `python` is 3.8 or 3.7\n* Install `poetry`\n* Install `graphviz`\n* Clone this repository\n* Look at [tests](https://github.com/dimaqq/awaitwhat/tree/master/test)\n* Look at [issues](https://github.com/dimaqq/awaitwhat/issues)\n\n```\n> python --version\nPython 3.8.0b4  #\ud83e\udde1\nPython 3.7.4    #\ud83d\udc4c\n> dot -V\ndot - graphviz version 2.40.1\n\u2026 ~/x/awaitwhat>\ncurl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n# add ~/.poetry/bin to your PATH\ngit clone git@github.com:dimaqq/awaitwhat.git\ncd awaitwhat\npoetry shell    # creates a venv and drops you in it\npoetry install  # installs projects dependencies in a venv\npoetry build    # builds a C extension in this project\nenv PYTHONPATH=. python examples/test_shield.py | tee graph.dot\ndot -Tsvg graph.dot -o graph.svg\nopen graph.svg  # or load it in a browser\n```\n\n### TL;DR\n\nSay you have this code:\n```py\n\nasync def job():\n    await foo()\n\n\nasync def foo():\n    await bar()\n\n\nasync def bar():\n    await baz()\n\n\nasync def baz():\n    await leaf()\n\n\nasync def leaf():\n    await asyncio.sleep(1)  # imagine you don't know this\n\n\nasync def work():\n    await asyncio.gather(..., job())\n```\n\nNow that code is stuck and and you want to know why.\n\n#### Python built-in\n```py\nStack for <Task pending coro=<job() \u2026> wait_for=<Future pending cb=[<TaskWakeupMethWrapper \u2026>()]> cb=[\u2026]> (most recent call last):\n  File \"test/test_stack.py\", line 34, in job\n    await foo()\n```\n\n#### This library\n```py\nStack for <Task pending coro=<job() \u2026> wait_for=<Future pending cb=[<TaskWakeupMethWrapper \u2026>()]> cb=[\u2026]> (most recent call last):\n  File \"test/test_stack.py\", line 34, in job\n    await foo()\n  File \"test/test_stack.py\", line 38, in foo\n    await bar()\n  File \"test/test_stack.py\", line 42, in bar\n    await baz()\n  File \"test/test_stack.py\", line 46, in baz\n    await leaf()\n  File \"test/test_stack.py\", line 50, in leaf\n    await asyncio.sleep(1)\n  File \"/\u2026/asyncio/tasks.py\", line 568, in sleep\n    return await future\n  File \"<Sentinel>\", line 0, in <_asyncio.FutureIter object at 0x7fb6981690d8>: \u2026\n```\n\n### Dependency Graph\n\n<img src=\"https://raw.github.com/dimaqq/awaitwhat/master/doc/test_future.svg?sanitize=true\">\n\n### References\n\nhttps://mail.python.org/archives/list/async-sig@python.org/thread/6E2LRVLKYSMGEAZ7OYOYR3PMZUUYSS3K/\n\n> Hi group,\n>\n> I'm recently debugging a long-running asyncio program that appears to get stuck about once a week.\n>\n> The tools I've discovered so far are:\n> * high level: `asyncio.all_tasks()` + `asyncio.Task.get_stack()`\n> * low level: `loop._selector._fd_to_key`\n>\n> What's missing is the middle level, i.e. stack-like linkage of what is waiting for what. For a practical example, consider:\n>\n> ```py\n> async def leaf(): await somesocket.recv()\n> async def baz(): await leaf()\n> async def bar(): await baz()\n> async def foo(): await bar()\n> async def job(): await foo()\n> async def work(): await asyncio.gather(..., job())\n> async def main(): asyncio.run(work())\n> ```\n>\n> The task stack will contain:\n> * main and body of work with line number\n> * job task with line number pointing to foo\n>\n> The file descriptor mapping, socket fd, `loop._recv()` and a `Future`.\n>\n> What's missing are connections `foo->bar->baz->leaf`.\n> That is, I can't tell which task is waiting for what terminal `Future`.\n>\n> Is this problem solved in some way that I'm not aware of?\n> Is there a library or external tool for this already?\n>\n> Perhaps, if I could get a list of all pending coroutines, I could figure out what's wrong.\n>\n> If no such API exists, I'm thinking of the following:\n>\n> ```py\n> async def foo():\n>     await bar()\n>\n> In [37]: dis.dis(foo)\n>   1           0 LOAD_GLOBAL              0 (bar)\n>               2 CALL_FUNCTION            0\n>               4 GET_AWAITABLE\n>               6 LOAD_CONST               0 (None)\n>               8 YIELD_FROM\n>              10 POP_TOP\n>              12 LOAD_CONST               0 (None)\n>              14 RETURN_VALUE\n> ```\n>\n> Starting from a pending task, I'd get it's coroutine and:\n>\n> Get the coroutine frame, and if current instruction is `YIELD_FROM`, then the reference to the awaitable should be on the top of the stack.\n> If that reference points to a pending coroutine, I'd add that to the \"forward trace\" and repeat.\n>\n> At some point I'd reach an awaitable that's not a pending coroutine, which may be: another `Task` (I already got those), a low-level `Future` (can be looked up in event loop), an `Event` (tough luck, shoulda logged all `Event`'s on creation) or a dozen other corner cases.\n>\n> What do y'all think of this approach?\n>\n> Thanks,\n> D.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/dimaqq/awaitwhat", "keywords": "asyncio", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "awaitwhat", "package_url": "https://pypi.org/project/awaitwhat/", "platform": "", "project_url": "https://pypi.org/project/awaitwhat/", "project_urls": {"Documentation": "https://github.com/dimaqq/awaitwhat", "Homepage": "https://github.com/dimaqq/awaitwhat", "Repository": "https://github.com/dimaqq/awaitwhat"}, "release_url": "https://pypi.org/project/awaitwhat/20.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "async/await introspection", "version": "20.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Await, What?</h1>\n<p>Tell you what waits for what in an <code>async/await</code> program.</p>\n<h2>Sprint Setup</h2>\n<p>Comms: <a href=\"https://gitter.im/awaitwhat/community\" rel=\"nofollow\">https://gitter.im/awaitwhat/community</a></p>\n<ul>\n<li><a href=\"https://www.python.org/downloads/release/python-380b4/\" rel=\"nofollow\">Python3.8</a> (preferred) or <a href=\"https://www.python.org/downloads/release/python-374/\" rel=\"nofollow\">Python 3.7</a></li>\n<li>Your platform dev tools (compiler, etc).</li>\n<li>Ensure that <code>python</code> is 3.8 or 3.7</li>\n<li>Install <code>poetry</code></li>\n<li>Install <code>graphviz</code></li>\n<li>Clone this repository</li>\n<li>Look at <a href=\"https://github.com/dimaqq/awaitwhat/tree/master/test\" rel=\"nofollow\">tests</a></li>\n<li>Look at <a href=\"https://github.com/dimaqq/awaitwhat/issues\" rel=\"nofollow\">issues</a></li>\n</ul>\n<pre><code>&gt; python --version\nPython 3.8.0b4  #\ud83e\udde1\nPython 3.7.4    #\ud83d\udc4c\n&gt; dot -V\ndot - graphviz version 2.40.1\n\u2026 ~/x/awaitwhat&gt;\ncurl -sSL https://raw.githubusercontent.com/sdispater/poetry/master/get-poetry.py | python\n# add ~/.poetry/bin to your PATH\ngit clone git@github.com:dimaqq/awaitwhat.git\ncd awaitwhat\npoetry shell    # creates a venv and drops you in it\npoetry install  # installs projects dependencies in a venv\npoetry build    # builds a C extension in this project\nenv PYTHONPATH=. python examples/test_shield.py | tee graph.dot\ndot -Tsvg graph.dot -o graph.svg\nopen graph.svg  # or load it in a browser\n</code></pre>\n<h3>TL;DR</h3>\n<p>Say you have this code:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">job</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">baz</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">leaf</span><span class=\"p\">()</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">leaf</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>  <span class=\"c1\"># imagine you don't know this</span>\n\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">job</span><span class=\"p\">())</span>\n</pre>\n<p>Now that code is stuck and and you want to know why.</p>\n<h4>Python built-in</h4>\n<pre><span class=\"n\">Stack</span> <span class=\"k\">for</span> <span class=\"o\">&lt;</span><span class=\"n\">Task</span> <span class=\"n\">pending</span> <span class=\"n\">coro</span><span class=\"o\">=&lt;</span><span class=\"n\">job</span><span class=\"p\">()</span> <span class=\"err\">\u2026</span><span class=\"o\">&gt;</span> <span class=\"n\">wait_for</span><span class=\"o\">=&lt;</span><span class=\"n\">Future</span> <span class=\"n\">pending</span> <span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">TaskWakeupMethWrapper</span> <span class=\"err\">\u2026</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"o\">&gt;</span> <span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"err\">\u2026</span><span class=\"p\">]</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">job</span>\n    <span class=\"k\">await</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n</pre>\n<h4>This library</h4>\n<pre><span class=\"n\">Stack</span> <span class=\"k\">for</span> <span class=\"o\">&lt;</span><span class=\"n\">Task</span> <span class=\"n\">pending</span> <span class=\"n\">coro</span><span class=\"o\">=&lt;</span><span class=\"n\">job</span><span class=\"p\">()</span> <span class=\"err\">\u2026</span><span class=\"o\">&gt;</span> <span class=\"n\">wait_for</span><span class=\"o\">=&lt;</span><span class=\"n\">Future</span> <span class=\"n\">pending</span> <span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"n\">TaskWakeupMethWrapper</span> <span class=\"err\">\u2026</span><span class=\"o\">&gt;</span><span class=\"p\">()]</span><span class=\"o\">&gt;</span> <span class=\"n\">cb</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"err\">\u2026</span><span class=\"p\">]</span><span class=\"o\">&gt;</span> <span class=\"p\">(</span><span class=\"n\">most</span> <span class=\"n\">recent</span> <span class=\"n\">call</span> <span class=\"n\">last</span><span class=\"p\">):</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">job</span>\n    <span class=\"k\">await</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">38</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">foo</span>\n    <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">bar</span>\n    <span class=\"k\">await</span> <span class=\"n\">baz</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">46</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">baz</span>\n    <span class=\"k\">await</span> <span class=\"n\">leaf</span><span class=\"p\">()</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"test/test_stack.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">leaf</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"/\u2026/asyncio/tasks.py\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">568</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"n\">sleep</span>\n    <span class=\"k\">return</span> <span class=\"k\">await</span> <span class=\"n\">future</span>\n  <span class=\"n\">File</span> <span class=\"s2\">\"&lt;Sentinel&gt;\"</span><span class=\"p\">,</span> <span class=\"n\">line</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"ow\">in</span> <span class=\"o\">&lt;</span><span class=\"n\">_asyncio</span><span class=\"o\">.</span><span class=\"n\">FutureIter</span> <span class=\"nb\">object</span> <span class=\"n\">at</span> <span class=\"mh\">0x7fb6981690d8</span><span class=\"o\">&gt;</span><span class=\"p\">:</span> <span class=\"err\">\u2026</span>\n</pre>\n<h3>Dependency Graph</h3>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5ada593a6169c8563b8e466461317d5ff2c8d048/68747470733a2f2f7261772e6769746875622e636f6d2f64696d6171712f6177616974776861742f6d61737465722f646f632f746573745f6675747572652e7376673f73616e6974697a653d74727565\">\n<h3>References</h3>\n<p><a href=\"https://mail.python.org/archives/list/async-sig@python.org/thread/6E2LRVLKYSMGEAZ7OYOYR3PMZUUYSS3K/\" rel=\"nofollow\">https://mail.python.org/archives/list/async-sig@python.org/thread/6E2LRVLKYSMGEAZ7OYOYR3PMZUUYSS3K/</a></p>\n<blockquote>\n<p>Hi group,</p>\n<p>I'm recently debugging a long-running asyncio program that appears to get stuck about once a week.</p>\n<p>The tools I've discovered so far are:</p>\n<ul>\n<li>high level: <code>asyncio.all_tasks()</code> + <code>asyncio.Task.get_stack()</code></li>\n<li>low level: <code>loop._selector._fd_to_key</code></li>\n</ul>\n<p>What's missing is the middle level, i.e. stack-like linkage of what is waiting for what. For a practical example, consider:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">leaf</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">somesocket</span><span class=\"o\">.</span><span class=\"n\">recv</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">baz</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">leaf</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">bar</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">baz</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">job</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">foo</span><span class=\"p\">()</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">work</span><span class=\"p\">():</span> <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"n\">job</span><span class=\"p\">())</span>\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">work</span><span class=\"p\">())</span>\n</pre>\n<p>The task stack will contain:</p>\n<ul>\n<li>main and body of work with line number</li>\n<li>job task with line number pointing to foo</li>\n</ul>\n<p>The file descriptor mapping, socket fd, <code>loop._recv()</code> and a <code>Future</code>.</p>\n<p>What's missing are connections <code>foo-&gt;bar-&gt;baz-&gt;leaf</code>.\nThat is, I can't tell which task is waiting for what terminal <code>Future</code>.</p>\n<p>Is this problem solved in some way that I'm not aware of?\nIs there a library or external tool for this already?</p>\n<p>Perhaps, if I could get a list of all pending coroutines, I could figure out what's wrong.</p>\n<p>If no such API exists, I'm thinking of the following:</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">foo</span><span class=\"p\">():</span>\n    <span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"p\">()</span>\n\n<span class=\"n\">In</span> <span class=\"p\">[</span><span class=\"mi\">37</span><span class=\"p\">]:</span> <span class=\"n\">dis</span><span class=\"o\">.</span><span class=\"n\">dis</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">)</span>\n  <span class=\"mi\">1</span>           <span class=\"mi\">0</span> <span class=\"n\">LOAD_GLOBAL</span>              <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">)</span>\n              <span class=\"mi\">2</span> <span class=\"n\">CALL_FUNCTION</span>            <span class=\"mi\">0</span>\n              <span class=\"mi\">4</span> <span class=\"n\">GET_AWAITABLE</span>\n              <span class=\"mi\">6</span> <span class=\"n\">LOAD_CONST</span>               <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n              <span class=\"mi\">8</span> <span class=\"n\">YIELD_FROM</span>\n             <span class=\"mi\">10</span> <span class=\"n\">POP_TOP</span>\n             <span class=\"mi\">12</span> <span class=\"n\">LOAD_CONST</span>               <span class=\"mi\">0</span> <span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n             <span class=\"mi\">14</span> <span class=\"n\">RETURN_VALUE</span>\n</pre>\n<p>Starting from a pending task, I'd get it's coroutine and:</p>\n<p>Get the coroutine frame, and if current instruction is <code>YIELD_FROM</code>, then the reference to the awaitable should be on the top of the stack.\nIf that reference points to a pending coroutine, I'd add that to the \"forward trace\" and repeat.</p>\n<p>At some point I'd reach an awaitable that's not a pending coroutine, which may be: another <code>Task</code> (I already got those), a low-level <code>Future</code> (can be looked up in event loop), an <code>Event</code> (tough luck, shoulda logged all <code>Event</code>'s on creation) or a dozen other corner cases.</p>\n<p>What do y'all think of this approach?</p>\n<p>Thanks,\nD.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6530577, "releases": {"19.1a1": [{"comment_text": "", "digests": {"md5": "45dbb724de2d158fa214e5fd4a465ec1", "sha256": "b65871e941f517fd74127bc10964d490c5347036eda5b5024da4d2cf4d915312"}, "downloads": -1, "filename": "awaitwhat-19.1a1-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "45dbb724de2d158fa214e5fd4a465ec1", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 5722, "upload_time": "2019-08-29T00:55:41", "upload_time_iso_8601": "2019-08-29T00:55:41.224442Z", "url": "https://files.pythonhosted.org/packages/87/ad/a63094c52f26a6ed1bbe1ee86cd2e4d7607b031875b3df5b2754d1edd810/awaitwhat-19.1a1-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c862eea3a9fa5c0dd72cc9de7786f708", "sha256": "bb5fbfa16965def86e508b32260a8127438bc19e7963841257d50b39da56e4f9"}, "downloads": -1, "filename": "awaitwhat-19.1a1.tar.gz", "has_sig": false, "md5_digest": "c862eea3a9fa5c0dd72cc9de7786f708", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 4607, "upload_time": "2019-08-29T00:55:43", "upload_time_iso_8601": "2019-08-29T00:55:43.619321Z", "url": "https://files.pythonhosted.org/packages/7d/ae/c46abed435b69c762c8958934ff03de19780c50be9e7629d009f2f1e2759/awaitwhat-19.1a1.tar.gz", "yanked": false}], "19.1a2": [{"comment_text": "", "digests": {"md5": "894c9d0afbef373a872d6deabaa699c3", "sha256": "fcc9404246ee828891a7c55f83a477532b9218936a2db362abc9d383ed8033ef"}, "downloads": -1, "filename": "awaitwhat-19.1a2-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "894c9d0afbef373a872d6deabaa699c3", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 8678, "upload_time": "2019-08-29T05:37:25", "upload_time_iso_8601": "2019-08-29T05:37:25.629322Z", "url": "https://files.pythonhosted.org/packages/72/ba/5a6241a96c9a74669565c8bb710c15213aa6d14e41829b7ae9e86a5307a4/awaitwhat-19.1a2-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9055491725b1bea3bfcbc9f410a7e0d8", "sha256": "cd4a88a68c8beee50862d0fc674ac20ce83549ea338a46c3c43d1b2a94937cf2"}, "downloads": -1, "filename": "awaitwhat-19.1a2.tar.gz", "has_sig": false, "md5_digest": "9055491725b1bea3bfcbc9f410a7e0d8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6733, "upload_time": "2019-08-29T05:37:27", "upload_time_iso_8601": "2019-08-29T05:37:27.844012Z", "url": "https://files.pythonhosted.org/packages/bd/09/e754ca9583b94e33722eedbd89267c7ee2c26b90a0a65bf46f6f0213e69a/awaitwhat-19.1a2.tar.gz", "yanked": false}], "19.1a3": [{"comment_text": "", "digests": {"md5": "002c46dacaadd6f3a1d1fbe33302c637", "sha256": "8003764a27066dfba7be6db66a794ba535d641bf365f32df5e95413ac5eb3738"}, "downloads": -1, "filename": "awaitwhat-19.1a3-cp37-cp37m-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "002c46dacaadd6f3a1d1fbe33302c637", "packagetype": "bdist_wheel", "python_version": "cp37", "requires_python": ">=3.7", "size": 8944, "upload_time": "2019-08-29T07:54:45", "upload_time_iso_8601": "2019-08-29T07:54:45.468841Z", "url": "https://files.pythonhosted.org/packages/0c/b5/bd6a15c4fb96015808f2461b9a93e9b1b91f682553b5bc23fa451d33a901/awaitwhat-19.1a3-cp37-cp37m-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dfa87e94961dbc25e1a2a14d37b614b5", "sha256": "cc93532ad541e5a674b9931ce5f384a2686769680ad6b40e5a59f14c7349e834"}, "downloads": -1, "filename": "awaitwhat-19.1a3.tar.gz", "has_sig": false, "md5_digest": "dfa87e94961dbc25e1a2a14d37b614b5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 6981, "upload_time": "2019-08-29T07:54:47", "upload_time_iso_8601": "2019-08-29T07:54:47.161879Z", "url": "https://files.pythonhosted.org/packages/78/c4/6020c9f81989b248e3dff7c58682ba9e1c1922cca748db5ccea7ff8b1418/awaitwhat-19.1a3.tar.gz", "yanked": false}], "19.1a5": [{"comment_text": "", "digests": {"md5": "1a64a3dc88c987c7dd41b28aaf6bbe44", "sha256": "1106772ae2aff8dd759e9beca3fe2bb60521791c45d919b419796139d46925a8"}, "downloads": -1, "filename": "awaitwhat-19.1a5-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "1a64a3dc88c987c7dd41b28aaf6bbe44", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.7", "size": 10862, "upload_time": "2019-10-23T03:01:22", "upload_time_iso_8601": "2019-10-23T03:01:22.312138Z", "url": "https://files.pythonhosted.org/packages/12/e6/56e9035d3fbcfdafa37c9a5d7795c877b8f71b09b3e074a9592037cf6789/awaitwhat-19.1a5-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3829dd16dd43d611f4d7c5d7c2a3edd0", "sha256": "bffbb4ef66c83278f7180229edb1f2ba688dcb2fd5395d413ccba1ce26b48829"}, "downloads": -1, "filename": "awaitwhat-19.1a5-cp39-cp39-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "3829dd16dd43d611f4d7c5d7c2a3edd0", "packagetype": "bdist_wheel", "python_version": "cp39", "requires_python": ">=3.7", "size": 10859, "upload_time": "2020-01-28T05:59:05", "upload_time_iso_8601": "2020-01-28T05:59:05.381330Z", "url": "https://files.pythonhosted.org/packages/19/bd/0a8c0a12c9267da9e532709984d7015dbdadc05e9772de964d36ac3f973f/awaitwhat-19.1a5-cp39-cp39-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cad02ca09cdaa1c66ddae07e8ba395fa", "sha256": "12005c78b48af73922e7c0631041bc0003a5d9be9dfd059b4cdbfbc0ecc586da"}, "downloads": -1, "filename": "awaitwhat-19.1a5.tar.gz", "has_sig": false, "md5_digest": "cad02ca09cdaa1c66ddae07e8ba395fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8374, "upload_time": "2019-10-23T03:01:23", "upload_time_iso_8601": "2019-10-23T03:01:23.605422Z", "url": "https://files.pythonhosted.org/packages/cb/7d/7427234da5f265a05d935b89756b2797f08ba6536a3f43b220b62976405c/awaitwhat-19.1a5.tar.gz", "yanked": false}], "20.1": [{"comment_text": "", "digests": {"md5": "58e4f39e8bce895147da3db2a79a3400", "sha256": "b0aada24f701cd492886a6791eb7587f7df7560c817a52e32016660f69c88188"}, "downloads": -1, "filename": "awaitwhat-20.1-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "58e4f39e8bce895147da3db2a79a3400", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.7", "size": 11574, "upload_time": "2020-01-28T07:10:26", "upload_time_iso_8601": "2020-01-28T07:10:26.133110Z", "url": "https://files.pythonhosted.org/packages/42/91/cd42c2140817f22f8f6e82bf841beba259a02bfef727d08fe6ad1bddccfa/awaitwhat-20.1-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b6923326ea89ee4b32370388e99d3b", "sha256": "eb7fce0b1763747f60da0aa48bd77c0b8850b59cdf0d86007df943379661854a"}, "downloads": -1, "filename": "awaitwhat-20.1-cp39-cp39-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "d3b6923326ea89ee4b32370388e99d3b", "packagetype": "bdist_wheel", "python_version": "cp39", "requires_python": ">=3.7", "size": 11578, "upload_time": "2020-01-28T07:10:28", "upload_time_iso_8601": "2020-01-28T07:10:28.093406Z", "url": "https://files.pythonhosted.org/packages/75/3a/93a47a388884ce3b412f3c09d8e91ceabd474cbeb998a878ba8d047e3422/awaitwhat-20.1-cp39-cp39-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "620605f6267c54d0969e95489b11a8ac", "sha256": "99cd12111ab48e817edb7d1e285d16ffde99e42c4d335b8bbc5646bcd7a1e19b"}, "downloads": -1, "filename": "awaitwhat-20.1.tar.gz", "has_sig": false, "md5_digest": "620605f6267c54d0969e95489b11a8ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8773, "upload_time": "2020-01-28T07:10:29", "upload_time_iso_8601": "2020-01-28T07:10:29.435539Z", "url": "https://files.pythonhosted.org/packages/c6/d9/f8c478053970fbb0b62259fd3cf25e9b4c864ab9cbf4294967c119f607dd/awaitwhat-20.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "58e4f39e8bce895147da3db2a79a3400", "sha256": "b0aada24f701cd492886a6791eb7587f7df7560c817a52e32016660f69c88188"}, "downloads": -1, "filename": "awaitwhat-20.1-cp38-cp38-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "58e4f39e8bce895147da3db2a79a3400", "packagetype": "bdist_wheel", "python_version": "cp38", "requires_python": ">=3.7", "size": 11574, "upload_time": "2020-01-28T07:10:26", "upload_time_iso_8601": "2020-01-28T07:10:26.133110Z", "url": "https://files.pythonhosted.org/packages/42/91/cd42c2140817f22f8f6e82bf841beba259a02bfef727d08fe6ad1bddccfa/awaitwhat-20.1-cp38-cp38-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3b6923326ea89ee4b32370388e99d3b", "sha256": "eb7fce0b1763747f60da0aa48bd77c0b8850b59cdf0d86007df943379661854a"}, "downloads": -1, "filename": "awaitwhat-20.1-cp39-cp39-macosx_10_9_x86_64.whl", "has_sig": false, "md5_digest": "d3b6923326ea89ee4b32370388e99d3b", "packagetype": "bdist_wheel", "python_version": "cp39", "requires_python": ">=3.7", "size": 11578, "upload_time": "2020-01-28T07:10:28", "upload_time_iso_8601": "2020-01-28T07:10:28.093406Z", "url": "https://files.pythonhosted.org/packages/75/3a/93a47a388884ce3b412f3c09d8e91ceabd474cbeb998a878ba8d047e3422/awaitwhat-20.1-cp39-cp39-macosx_10_9_x86_64.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "620605f6267c54d0969e95489b11a8ac", "sha256": "99cd12111ab48e817edb7d1e285d16ffde99e42c4d335b8bbc5646bcd7a1e19b"}, "downloads": -1, "filename": "awaitwhat-20.1.tar.gz", "has_sig": false, "md5_digest": "620605f6267c54d0969e95489b11a8ac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 8773, "upload_time": "2020-01-28T07:10:29", "upload_time_iso_8601": "2020-01-28T07:10:29.435539Z", "url": "https://files.pythonhosted.org/packages/c6/d9/f8c478053970fbb0b62259fd3cf25e9b4c864ab9cbf4294967c119f607dd/awaitwhat-20.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:01 2020"}