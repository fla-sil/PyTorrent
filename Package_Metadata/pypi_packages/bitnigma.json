{"info": {"author": "Samuel P. Gillispie II", "author_email": "spgill@vt.edu", "bugtrack_url": null, "classifiers": ["Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "Enigma Byte Machine === Using the same principles that `my 'classic'\nEnigma simulation <http://github.com/spgill/enigma>`__ is built on; I\nreverse-engineered a newer, stronger, more robust Enigma encryption\nscheme that is capable of encoding any standard 8-bit character (also\nknown as a byte). By removing the 26 character limitation, we are now\nable to encrypt entire binary files using the same basic mechanics as\nthe original Enigma machine.\n\nTechnical Details\n-----------------\n\n-  Developed and tested on Python 3.6.1 for Windows.\n\n   -  support for other python versions (>= 3.6.0) and other operating\n      systems is likely, but not guaranteed.\n\n-  Designed to be invoked as a module, but can be run from the\n   ``__main__.py`` script just as well.\n-  Can be imported and used in your own applications, but no\n   documentation is provided yet (though it shouldn't be too hard to\n   figure out).\n-  Requires ``requests`` module and internet connection to correctly\n   build readme (conversion from Markdown to reStructuredText).\n\nDownloading\n-----------\n\nThis package is now available on PyPI, and may be installed using\n``pip install bitnigma`` or directly from the repo using\n``pip install git+git://github.com/spgill/bitnigma``.\n\nUsage\n-----\n\n::\n\n    usage: python -m bitnigma [-h] [--plugboard PLUGBOARD [PLUGBOARD ...]]\n                       [--rotors ROTORS [ROTORS ...]] [--reflector REFLECTOR]\n                       [--state STATE] [--state-create] [--state-update]\n                       [--state-print] [--state-seed STATE_SEED]\n                       [--state-seed-file STATE_SEED_FILE] [--input INPUT]\n                       [--input-std] [--input-path INPUT_PATH] [--output-std]\n                       [--output-path OUTPUT_PATH] [--chunk-size CHUNK_SIZE]\n                       [--benchmark] [--progress]\n\n    Process some data through a simulated Enigma machine\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --plugboard PLUGBOARD [PLUGBOARD ...], -pl PLUGBOARD [PLUGBOARD ...]\n                            Specify a list of byte pairings for the plugboard. ex;\n                            10:25 50:77 102:33\n      --rotors ROTORS [ROTORS ...], -ro ROTORS [ROTORS ...]\n                            Specify a list of rotors in the following format:\n                            SHORTNAME[:SETTING] ex; byte1:52\n      --reflector REFLECTOR, -rf REFLECTOR\n                            Specify a reflector by its shortname.\n      --state STATE, -s STATE\n                            Path for the state file (reading or writing). States\n                            can be used in lieu of manually specifying rotors and\n                            reflectors every time.\n      --state-create, -sc   Take the plugboard, rotor, and reflector args and save\n                            them to the state file (and then exit).\n      --state-update, -su   After processing, save the changed rotor state back to\n                            the state file. This allows for a continuous rotor\n                            progression over multiple program invocations. THERE\n                            IS NO ROLLBACK, SO BACK UP THE STATE.\n      --state-print, -sp    Print the state information to stdout and then exit.\n      --state-seed STATE_SEED, -ss STATE_SEED\n                            String seed for to create a randomly generated state.\n      --state-seed-file STATE_SEED_FILE, -ssf STATE_SEED_FILE\n                            File to use as seed for a randomly generated state.\n      --input INPUT, -i INPUT\n                            Input a string via this command line argument.\n      --input-std, -is      Read data from stdin pipe.\n      --input-path INPUT_PATH, -ip INPUT_PATH\n                            Open and read data from file path.\n      --output-std, -os     Write output to the stdout pipe.\n      --output-path OUTPUT_PATH, -op OUTPUT_PATH\n                            Write output to the specified file path.\n      --chunk-size CHUNK_SIZE, -c CHUNK_SIZE\n                            Chunk size for reading and writing data.\n      --benchmark, -b       Benchmark the processing time (prints results to\n                            stderr).\n      --progress, -p        Show the progress meter; written to stderr.\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/spgill/bitnigma", "keywords": "enigma machine encrypt encryption rotor rotors", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bitnigma", "package_url": "https://pypi.org/project/bitnigma/", "platform": "", "project_url": "https://pypi.org/project/bitnigma/", "project_urls": {"Homepage": "https://github.com/spgill/bitnigma"}, "release_url": "https://pypi.org/project/bitnigma/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "Python byte-enabled Enigma-like simulation.", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Enigma Byte Machine === Using the same principles that <a href=\"http://github.com/spgill/enigma\" rel=\"nofollow\">my \u2018classic\u2019\nEnigma simulation</a> is built on; I\nreverse-engineered a newer, stronger, more robust Enigma encryption\nscheme that is capable of encoding any standard 8-bit character (also\nknown as a byte). By removing the 26 character limitation, we are now\nable to encrypt entire binary files using the same basic mechanics as\nthe original Enigma machine.</p>\n<div id=\"technical-details\">\n<h2>Technical Details</h2>\n<ul>\n<li>Developed and tested on Python 3.6.1 for Windows.<ul>\n<li>support for other python versions (&gt;= 3.6.0) and other operating\nsystems is likely, but not guaranteed.</li>\n</ul>\n</li>\n<li>Designed to be invoked as a module, but can be run from the\n<tt>__main__.py</tt> script just as well.</li>\n<li>Can be imported and used in your own applications, but no\ndocumentation is provided yet (though it shouldn\u2019t be too hard to\nfigure out).</li>\n<li>Requires <tt>requests</tt> module and internet connection to correctly\nbuild readme (conversion from Markdown to reStructuredText).</li>\n</ul>\n</div>\n<div id=\"downloading\">\n<h2>Downloading</h2>\n<p>This package is now available on PyPI, and may be installed using\n<tt>pip install bitnigma</tt> or directly from the repo using\n<tt>pip install <span class=\"pre\">git+git://github.com/spgill/bitnigma</span></tt>.</p>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<pre>usage: python -m bitnigma [-h] [--plugboard PLUGBOARD [PLUGBOARD ...]]\n                   [--rotors ROTORS [ROTORS ...]] [--reflector REFLECTOR]\n                   [--state STATE] [--state-create] [--state-update]\n                   [--state-print] [--state-seed STATE_SEED]\n                   [--state-seed-file STATE_SEED_FILE] [--input INPUT]\n                   [--input-std] [--input-path INPUT_PATH] [--output-std]\n                   [--output-path OUTPUT_PATH] [--chunk-size CHUNK_SIZE]\n                   [--benchmark] [--progress]\n\nProcess some data through a simulated Enigma machine\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --plugboard PLUGBOARD [PLUGBOARD ...], -pl PLUGBOARD [PLUGBOARD ...]\n                        Specify a list of byte pairings for the plugboard. ex;\n                        10:25 50:77 102:33\n  --rotors ROTORS [ROTORS ...], -ro ROTORS [ROTORS ...]\n                        Specify a list of rotors in the following format:\n                        SHORTNAME[:SETTING] ex; byte1:52\n  --reflector REFLECTOR, -rf REFLECTOR\n                        Specify a reflector by its shortname.\n  --state STATE, -s STATE\n                        Path for the state file (reading or writing). States\n                        can be used in lieu of manually specifying rotors and\n                        reflectors every time.\n  --state-create, -sc   Take the plugboard, rotor, and reflector args and save\n                        them to the state file (and then exit).\n  --state-update, -su   After processing, save the changed rotor state back to\n                        the state file. This allows for a continuous rotor\n                        progression over multiple program invocations. THERE\n                        IS NO ROLLBACK, SO BACK UP THE STATE.\n  --state-print, -sp    Print the state information to stdout and then exit.\n  --state-seed STATE_SEED, -ss STATE_SEED\n                        String seed for to create a randomly generated state.\n  --state-seed-file STATE_SEED_FILE, -ssf STATE_SEED_FILE\n                        File to use as seed for a randomly generated state.\n  --input INPUT, -i INPUT\n                        Input a string via this command line argument.\n  --input-std, -is      Read data from stdin pipe.\n  --input-path INPUT_PATH, -ip INPUT_PATH\n                        Open and read data from file path.\n  --output-std, -os     Write output to the stdout pipe.\n  --output-path OUTPUT_PATH, -op OUTPUT_PATH\n                        Write output to the specified file path.\n  --chunk-size CHUNK_SIZE, -c CHUNK_SIZE\n                        Chunk size for reading and writing data.\n  --benchmark, -b       Benchmark the processing time (prints results to\n                        stderr).\n  --progress, -p        Show the progress meter; written to stderr.\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2734568, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "7d03946f6260dccade2b936623026b9f", "sha256": "5d51c2816f395cf26bd7392a1f479ecfe6a7e1ed552655e835a36ea7f7457fa8"}, "downloads": -1, "filename": "bitnigma-1.0.1.zip", "has_sig": false, "md5_digest": "7d03946f6260dccade2b936623026b9f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18912, "upload_time": "2016-09-19T16:02:47", "upload_time_iso_8601": "2016-09-19T16:02:47.279724Z", "url": "https://files.pythonhosted.org/packages/0c/e2/15e1364b44c82e603f22961910ff77561e1ae699b00ce04dc2afdc03d78e/bitnigma-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4814b1fc7ea99975b3ac982f93942cd6", "sha256": "282539ecfb70811b7e102381a7f86c6d989f08deb7d6cfd001e973079ed67074"}, "downloads": -1, "filename": "bitnigma-1.0.2.zip", "has_sig": false, "md5_digest": "4814b1fc7ea99975b3ac982f93942cd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18919, "upload_time": "2016-09-19T16:56:34", "upload_time_iso_8601": "2016-09-19T16:56:34.478424Z", "url": "https://files.pythonhosted.org/packages/9d/ed/013ad51bd9b8ee6c26bc7463623c1e40a6a11096f4c96bbe43cac54ccd64/bitnigma-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "32b5c71026067c9d593ab19b84916259", "sha256": "2e7e6e390bb23b6d4982e0d53e107e7321ac6657e40e3e022cae791436101474"}, "downloads": -1, "filename": "bitnigma-1.0.3.zip", "has_sig": false, "md5_digest": "32b5c71026067c9d593ab19b84916259", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19127, "upload_time": "2016-10-17T15:27:37", "upload_time_iso_8601": "2016-10-17T15:27:37.383343Z", "url": "https://files.pythonhosted.org/packages/37/d0/bd1b6f9e740b4ad0b12d9184114037f07b48d5492598acc59b2088109392/bitnigma-1.0.3.zip", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "5888f96a2d9873e0412e239a96dd494e", "sha256": "7593d46604b2aa838ef97d8a4850027b10c579d3cfeb89c48585107d17ee7d10"}, "downloads": -1, "filename": "bitnigma-1.0.4.zip", "has_sig": false, "md5_digest": "5888f96a2d9873e0412e239a96dd494e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19148, "upload_time": "2016-10-17T15:37:30", "upload_time_iso_8601": "2016-10-17T15:37:30.905591Z", "url": "https://files.pythonhosted.org/packages/8e/97/407bdfae5212112088c6296230e0a0031d70160b511f11948106e796b173/bitnigma-1.0.4.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4c149aa2b4d318d53c79c1dc04b3a9dc", "sha256": "571bd985607e99b07bd2a2a2eb637cd94160b1b8def766b57ee0e7f3fafd8e92"}, "downloads": -1, "filename": "bitnigma-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4c149aa2b4d318d53c79c1dc04b3a9dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18529, "upload_time": "2017-03-27T21:25:28", "upload_time_iso_8601": "2017-03-27T21:25:28.309998Z", "url": "https://files.pythonhosted.org/packages/91/2c/62b367eff7d95db1abfcbbb27b0208240a30aff6340ac519a7ab6fabb5f8/bitnigma-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d000a6b22ee31c4996fc305333fd544", "sha256": "7e172be58ef89f077b242669bc3b8d4a691c767c14d589a966448518727d5ecd"}, "downloads": -1, "filename": "bitnigma-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0d000a6b22ee31c4996fc305333fd544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13547, "upload_time": "2017-03-27T21:25:29", "upload_time_iso_8601": "2017-03-27T21:25:29.957022Z", "url": "https://files.pythonhosted.org/packages/05/a3/26001083932974adf76f565161d0d4fb408e2c242f2db76b3a6d35b3913b/bitnigma-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4c149aa2b4d318d53c79c1dc04b3a9dc", "sha256": "571bd985607e99b07bd2a2a2eb637cd94160b1b8def766b57ee0e7f3fafd8e92"}, "downloads": -1, "filename": "bitnigma-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4c149aa2b4d318d53c79c1dc04b3a9dc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18529, "upload_time": "2017-03-27T21:25:28", "upload_time_iso_8601": "2017-03-27T21:25:28.309998Z", "url": "https://files.pythonhosted.org/packages/91/2c/62b367eff7d95db1abfcbbb27b0208240a30aff6340ac519a7ab6fabb5f8/bitnigma-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d000a6b22ee31c4996fc305333fd544", "sha256": "7e172be58ef89f077b242669bc3b8d4a691c767c14d589a966448518727d5ecd"}, "downloads": -1, "filename": "bitnigma-1.1.0.tar.gz", "has_sig": false, "md5_digest": "0d000a6b22ee31c4996fc305333fd544", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13547, "upload_time": "2017-03-27T21:25:29", "upload_time_iso_8601": "2017-03-27T21:25:29.957022Z", "url": "https://files.pythonhosted.org/packages/05/a3/26001083932974adf76f565161d0d4fb408e2c242f2db76b3a6d35b3913b/bitnigma-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:15 2020"}