{"info": {"author": "Bart\u0142omiej \u017bmudzi\u0144ski", "author_email": "zmudzinski.bartek@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 2.2", "Framework :: Django :: 3.0", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "\n## django_select2_admin_filters\n\nThis extension is based on [django-select2](https://github.com/applegrew/django-select2) and works with or without Grappelli.\n\n## Installation\n\n* Install using pip\n\n    ```\n    pip install django-select2-admin-filters\n    ```\n\n* Update INSTALLED_APPS, you need too put django_select2_admin_filters after admin and django_select2\n\n    ```python\n    INSTALLED_APPS = [\n        'django.contrib.admin',\n        #\n        'django_select2',\n        'django_select2_admin_filters',\n    ]\n    ```\n\n* Update urls.py to use model filters (refer to [django-select2 documentation](https://django-select2.readthedocs.io/en/latest/get_started.html#installation))\n\n    ```\n    path('select2/', include('django_select2.urls')),\n    ```\n\n## Filters\n\nFilters are generally of two types, but each of them can be single or multiple selectable:\n* ChoiceFilter\n  * ChoiceSelect2Filter\n  * MultipleChoiceSelect2Filter\n* ModelFilter\n  * ModelSelect2Filter\n  * MultipleModelSelect2Filter\n\n## Usage\n\n* Use filter in your admin.py\n    ```python\n      from django.contrib import admin\n      from libs.django_select2_admin_filters.admin import (\n          Select2AdminFilterMixin)\n      from libs.django_select2_admin_filters.filters import (\n          ChoiceSelect2Filter, MultipleChoiceSelect2Filter,\n          ModelSelect2Filter, MultipleModelSelect2Filter)\n      from your_app.models import Country, Person, Profession\n\n\n      class CountryFilter(ModelSelect2Filter):\n          title = 'Country of residence'                 # filter's title\n          parameter_name = 'country'                     # parameter used in url and by default field name of Foreign Key used to filter results\n          autocomplete_queryset = Country.objects.all()  # queryset to autocomplete\n          search_fields = ['name__icontains']            # fields of Country model used to filtering\n\n          # optionally you can override queryset method\n          def queryset(self, request, queryset):\n              val = self.value()\n              if val:\n                  return queryset.filter(country_of_residence=val)\n              return queryset\n\n\n      class ProfessionFilter(MultipleModelSelect2Filter):\n          title = 'Profession'\n          parameter_name = 'profession'\n          autocomplete_queryset = Profession.objects.all()\n          search_fields = ['name__icontains']\n\n          def queryset(self, request, queryset):\n              val = self.value_as_list()\n              if len(val) > 0:\n                  return queryset.filter(professions__profession_id__in=val)\n              return queryset\n\n\n      class StatusFilter(ChoiceSelect2Filter):\n          title = 'Status'\n          parameter_name = 'status'\n          autocomplete_choice_list = [    # list of choices\n              (1, 'Active',),\n              (2, 'Suspended',),\n              (3, 'Deleted',),\n          ]\n\n\n      @admin.register(Person)\n      class PersonAdmin(Select2AdminFilterMixin, admin.ModelAdmin):\n\n          # change_list_template = 'admin/change_list_filter_sidebar.html' <- DON'T override change_list_template\n          list_filter = (CountryFilter, ProfessionFilter, StatusFilter,) # actually you cannot mix filters with traditional filters\n\n    ```\n\n## TODO\n\n* add tests\n* add handling `dependent_fields`\n\n## Author\n\n* [Bart\u0142omiej \u017bmudzi\u0144ski](https://github.com/bartekzmudzinski)\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-select2-admin-filters", "package_url": "https://pypi.org/project/django-select2-admin-filters/", "platform": "", "project_url": "https://pypi.org/project/django-select2-admin-filters/", "project_urls": {"Source": "https://github.com/the-bit-by-bit/django-select2-admin-filters"}, "release_url": "https://pypi.org/project/django-select2-admin-filters/0.1.0/", "requires_dist": ["django (>=2.2)"], "requires_python": ">=3.5", "summary": "A simple extension to Django app to render filters in django admin panel as autocomplete widget.", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>django_select2_admin_filters</h2>\n<p>This extension is based on <a href=\"https://github.com/applegrew/django-select2\" rel=\"nofollow\">django-select2</a> and works with or without Grappelli.</p>\n<h2>Installation</h2>\n<ul>\n<li>\n<p>Install using pip</p>\n<pre><code>pip install django-select2-admin-filters\n</code></pre>\n</li>\n<li>\n<p>Update INSTALLED_APPS, you need too put django_select2_admin_filters after admin and django_select2</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'django.contrib.admin'</span><span class=\"p\">,</span>\n    <span class=\"c1\">#</span>\n    <span class=\"s1\">'django_select2'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_select2_admin_filters'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</li>\n<li>\n<p>Update urls.py to use model filters (refer to <a href=\"https://django-select2.readthedocs.io/en/latest/get_started.html#installation\" rel=\"nofollow\">django-select2 documentation</a>)</p>\n<pre><code>path('select2/', include('django_select2.urls')),\n</code></pre>\n</li>\n</ul>\n<h2>Filters</h2>\n<p>Filters are generally of two types, but each of them can be single or multiple selectable:</p>\n<ul>\n<li>ChoiceFilter\n<ul>\n<li>ChoiceSelect2Filter</li>\n<li>MultipleChoiceSelect2Filter</li>\n</ul>\n</li>\n<li>ModelFilter\n<ul>\n<li>ModelSelect2Filter</li>\n<li>MultipleModelSelect2Filter</li>\n</ul>\n</li>\n</ul>\n<h2>Usage</h2>\n<ul>\n<li>Use filter in your admin.py\n<pre>  <span class=\"kn\">from</span> <span class=\"nn\">django.contrib</span> <span class=\"kn\">import</span> <span class=\"n\">admin</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">libs.django_select2_admin_filters.admin</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n      <span class=\"n\">Select2AdminFilterMixin</span><span class=\"p\">)</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">libs.django_select2_admin_filters.filters</span> <span class=\"kn\">import</span> <span class=\"p\">(</span>\n      <span class=\"n\">ChoiceSelect2Filter</span><span class=\"p\">,</span> <span class=\"n\">MultipleChoiceSelect2Filter</span><span class=\"p\">,</span>\n      <span class=\"n\">ModelSelect2Filter</span><span class=\"p\">,</span> <span class=\"n\">MultipleModelSelect2Filter</span><span class=\"p\">)</span>\n  <span class=\"kn\">from</span> <span class=\"nn\">your_app.models</span> <span class=\"kn\">import</span> <span class=\"n\">Country</span><span class=\"p\">,</span> <span class=\"n\">Person</span><span class=\"p\">,</span> <span class=\"n\">Profession</span>\n\n\n  <span class=\"k\">class</span> <span class=\"nc\">CountryFilter</span><span class=\"p\">(</span><span class=\"n\">ModelSelect2Filter</span><span class=\"p\">):</span>\n      <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Country of residence'</span>                 <span class=\"c1\"># filter's title</span>\n      <span class=\"n\">parameter_name</span> <span class=\"o\">=</span> <span class=\"s1\">'country'</span>                     <span class=\"c1\"># parameter used in url and by default field name of Foreign Key used to filter results</span>\n      <span class=\"n\">autocomplete_queryset</span> <span class=\"o\">=</span> <span class=\"n\">Country</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>  <span class=\"c1\"># queryset to autocomplete</span>\n      <span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name__icontains'</span><span class=\"p\">]</span>            <span class=\"c1\"># fields of Country model used to filtering</span>\n\n      <span class=\"c1\"># optionally you can override queryset method</span>\n      <span class=\"k\">def</span> <span class=\"nf\">queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n          <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">()</span>\n          <span class=\"k\">if</span> <span class=\"n\">val</span><span class=\"p\">:</span>\n              <span class=\"k\">return</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">country_of_residence</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)</span>\n          <span class=\"k\">return</span> <span class=\"n\">queryset</span>\n\n\n  <span class=\"k\">class</span> <span class=\"nc\">ProfessionFilter</span><span class=\"p\">(</span><span class=\"n\">MultipleModelSelect2Filter</span><span class=\"p\">):</span>\n      <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Profession'</span>\n      <span class=\"n\">parameter_name</span> <span class=\"o\">=</span> <span class=\"s1\">'profession'</span>\n      <span class=\"n\">autocomplete_queryset</span> <span class=\"o\">=</span> <span class=\"n\">Profession</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n      <span class=\"n\">search_fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'name__icontains'</span><span class=\"p\">]</span>\n\n      <span class=\"k\">def</span> <span class=\"nf\">queryset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">queryset</span><span class=\"p\">):</span>\n          <span class=\"n\">val</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">value_as_list</span><span class=\"p\">()</span>\n          <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">val</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n              <span class=\"k\">return</span> <span class=\"n\">queryset</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">professions__profession_id__in</span><span class=\"o\">=</span><span class=\"n\">val</span><span class=\"p\">)</span>\n          <span class=\"k\">return</span> <span class=\"n\">queryset</span>\n\n\n  <span class=\"k\">class</span> <span class=\"nc\">StatusFilter</span><span class=\"p\">(</span><span class=\"n\">ChoiceSelect2Filter</span><span class=\"p\">):</span>\n      <span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"s1\">'Status'</span>\n      <span class=\"n\">parameter_name</span> <span class=\"o\">=</span> <span class=\"s1\">'status'</span>\n      <span class=\"n\">autocomplete_choice_list</span> <span class=\"o\">=</span> <span class=\"p\">[</span>    <span class=\"c1\"># list of choices</span>\n          <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'Active'</span><span class=\"p\">,),</span>\n          <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'Suspended'</span><span class=\"p\">,),</span>\n          <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'Deleted'</span><span class=\"p\">,),</span>\n      <span class=\"p\">]</span>\n\n\n  <span class=\"nd\">@admin</span><span class=\"o\">.</span><span class=\"n\">register</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">)</span>\n  <span class=\"k\">class</span> <span class=\"nc\">PersonAdmin</span><span class=\"p\">(</span><span class=\"n\">Select2AdminFilterMixin</span><span class=\"p\">,</span> <span class=\"n\">admin</span><span class=\"o\">.</span><span class=\"n\">ModelAdmin</span><span class=\"p\">):</span>\n\n      <span class=\"c1\"># change_list_template = 'admin/change_list_filter_sidebar.html' &lt;- DON'T override change_list_template</span>\n      <span class=\"n\">list_filter</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"n\">CountryFilter</span><span class=\"p\">,</span> <span class=\"n\">ProfessionFilter</span><span class=\"p\">,</span> <span class=\"n\">StatusFilter</span><span class=\"p\">,)</span> <span class=\"c1\"># actually you cannot mix filters with traditional filters</span>\n</pre>\n</li>\n</ul>\n<h2>TODO</h2>\n<ul>\n<li>add tests</li>\n<li>add handling <code>dependent_fields</code></li>\n</ul>\n<h2>Author</h2>\n<ul>\n<li><a href=\"https://github.com/bartekzmudzinski\" rel=\"nofollow\">Bart\u0142omiej \u017bmudzi\u0144ski</a></li>\n</ul>\n\n          </div>"}, "last_serial": 7164910, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "6591fd7e802815a8e5360dc19c03a49b", "sha256": "026c90cf1ad79a1e60149f1d69c6bd3d392c063708d0168cfbb6d2de4559547b"}, "downloads": -1, "filename": "django_select2_admin_filters-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6591fd7e802815a8e5360dc19c03a49b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6374, "upload_time": "2020-05-04T14:44:54", "upload_time_iso_8601": "2020-05-04T14:44:54.741135Z", "url": "https://files.pythonhosted.org/packages/22/6a/590a8a9628694d75103a527386ed6725a97bbd6df2cffd50897ca15595dd/django_select2_admin_filters-0.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6591fd7e802815a8e5360dc19c03a49b", "sha256": "026c90cf1ad79a1e60149f1d69c6bd3d392c063708d0168cfbb6d2de4559547b"}, "downloads": -1, "filename": "django_select2_admin_filters-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6591fd7e802815a8e5360dc19c03a49b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 6374, "upload_time": "2020-05-04T14:44:54", "upload_time_iso_8601": "2020-05-04T14:44:54.741135Z", "url": "https://files.pythonhosted.org/packages/22/6a/590a8a9628694d75103a527386ed6725a97bbd6df2cffd50897ca15595dd/django_select2_admin_filters-0.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:40 2020"}