{"info": {"author": "Giampaolo Eusebi", "author_email": "giampaolo.eusebi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Manufacturing", "Intended Audience :: Science/Research", "License :: OSI Approved", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: C", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Software Development :: Embedded Systems", "Topic :: Utilities"], "description": "# Thermistor utilities\n\nA python based library implementing models to convert thermistor values \nfrom temperature to resistance and vice versa.\n\n## Steinhart--Hart model\n\n### Implementation precision\n\n![SH resistance to temperature chart](https://gitlab.com/geusebi/thermistor-utils/raw/master/charts/sh-res-temp.png \"Steinhart & Hart model (py) resistance to temperature chart\")\n![SH temperature to resistance chart](https://gitlab.com/geusebi/thermistor-utils/raw/master/charts/sh-temp-res.png \"Steinhart & Hart model (py) temperature to resistance chart\")\n\n### How to use\n\n```python\n# import the Steinhart--Hart and or the Beta converter\nfrom thermistor_utils import SH_converter\n```\n\nCreate a converter from A, B, and C coefficients:\n\n```python\nA, B, C = (0.0008402250578523375, 0.00025963477647737156, 1.5674403473853433e-07, )\nconv = SH_converter(A, B, C)\n```\n\nIf they're not available the converter could compute the values from \nthree evenly spaced readings of temperature and resistance.\n\nCreate the converter from temp/res readings:\n\n```python\nreadings = (\n    (0, 27445),\n    (25, 10000),\n    (50, 4160),\n)\nconv = SH_converter.from_points(readings)\n```\n\nPrinting the coefficients in a form suitable for subsequent use in \npython and C:\n\n```python\nprint(repr(conv))\n\n# SH_converter(0.0008402250578523375, 0.00025963477647737156, 1.5674403473853433e-07, 0, 50)\n\nprint(conv.to_cstr())\n\n# {0.0008402250578523375, 0.00025963477647737156, 1.5674403473853433e-07, 0, 50}\n\n# compact but less precise representation\n# (inverse of coefficients and no temperature range)\nprint(conv.to_cstr(compact=True, with_temps=False))\n\n# {1./1190, 1./3852, 1./6379828}\n```\n\nUse the reference implementation in C (example-1.c):\n\n```c\n#include <stdio.h>\n#include <thermistor_utils.h>\n\nint main(void)\n{\n    struct sh_s coefficients = {\n        0.0008402250578523375,\n        0.00025963477647737156,\n        1.5674403473853433e-07\n    };\n\n    // 25C to Ohm and 10k Ohm to Celsius\n    double  R_at_25   = sh_resistance(coefficients, 25),\n            T_at_10000 = sh_temperature(coefficients, 10000);\n\n    printf(\"25 Celsius -> %.0f Ohms\\n\", R_at_25);\n    printf(\"10k Ohms   -> %.0f Celsius\\n\", T_at_10000);\n}\n```\n\nTo compile and run from the examples directory:\n\n```bash\n$ mkdir -p ../bin\n$ gcc -o ../bin/example-1 \\\n    -I../src/include \\\n    ../src/sh_converter.c \\\n    -lm \\\n    example-1.c\n\n$ ../bin/example-1\n25 Celsius -> 10000 Ohms\n10k Ohms   -> 25 Celsius\n```\n\n## Beta model\n\n### Implementation precision\n\n![Beta resistance to temperature chart](https://gitlab.com/geusebi/thermistor-utils/raw/master/charts/beta-res-temp.png \"Beta model (py) resistance to temperature chart\")\n![Beta temperature to resistance chart](https://gitlab.com/geusebi/thermistor-utils/raw/master/charts/beta-temp-res.png \"Beta model (py) temperature to resistance chart\")\n\n### How to use\n\n```python\n# import the Steinhart--Hart and or the Beta converter\nfrom thermistor_utils import Beta_converter\n```\n\nCreate a converter from beta values:\n\n```python\nbeta, R0, T0 = (3380, 10000, 25)\nconv = Beta_converter(beta, R0, T0)\n```\n\nPrinting the beta values in a form suitable for subsequent use in \npython and C:\n\n```python\nprint(repr(conv))\n\n# Beta_converter(3380, 10000, 25)\n\nprint(conv.to_cstr())\n\n# {3380, 10000, 25}\n```\n\nUse the reference implementation in C (example-2.c):\n\n```c\n#include <stdio.h>\n#include <thermistor_utils.h>\n\nint main(void)\n{\n    struct beta_s bpar = {3380, 10000, 25};\n\n    // 25C to Ohm and 10k Ohm to Celsius\n    double  R_at_25   = beta_resistance(bpar, 25),\n            T_at_10000 = beta_temperature(bpar, 10000);\n\n    printf(\"25 Celsius -> %.0f Ohms\\n\", R_at_25);\n    printf(\"10k Ohms   -> %.0f Celsius\\n\", T_at_10000);\n}\n```\n\nTo compile and run from the examples directory:\n\n```bash\n$ mkdir -p ../bin\n$ gcc -o ../bin/example-2 \\\n      -I../src/include \\\n      ../src/beta_converter.c \\\n      -lm \\\n      example-2.c\n\n$ ../bin/example-2\n25 Celsius -> 10000 Ohms\n10k Ohms   -> 25 Celsius\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/geusebi/thermistor-utils", "keywords": "", "license": "GNU LGPL 3.0", "maintainer": "", "maintainer_email": "", "name": "thermistor-utils", "package_url": "https://pypi.org/project/thermistor-utils/", "platform": "", "project_url": "https://pypi.org/project/thermistor-utils/", "project_urls": {"Homepage": "https://gitlab.com/geusebi/thermistor-utils"}, "release_url": "https://pypi.org/project/thermistor-utils/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Steinhart -- Hart and Beta thermistor temperature model in Python and C. Implementation and utilities", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Thermistor utilities</h1>\n<p>A python based library implementing models to convert thermistor values\nfrom temperature to resistance and vice versa.</p>\n<h2>Steinhart--Hart model</h2>\n<h3>Implementation precision</h3>\n<p><img alt=\"SH resistance to temperature chart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2336356f1b7f59efd722d1af700e1c0da69e7bef/68747470733a2f2f6769746c61622e636f6d2f676575736562692f746865726d6973746f722d7574696c732f7261772f6d61737465722f6368617274732f73682d7265732d74656d702e706e67\">\n<img alt=\"SH temperature to resistance chart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f968d7e152029e8b937491cee100bee7252a0772/68747470733a2f2f6769746c61622e636f6d2f676575736562692f746865726d6973746f722d7574696c732f7261772f6d61737465722f6368617274732f73682d74656d702d7265732e706e67\"></p>\n<h3>How to use</h3>\n<pre><span class=\"c1\"># import the Steinhart--Hart and or the Beta converter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thermistor_utils</span> <span class=\"kn\">import</span> <span class=\"n\">SH_converter</span>\n</pre>\n<p>Create a converter from A, B, and C coefficients:</p>\n<pre><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mf\">0.0008402250578523375</span><span class=\"p\">,</span> <span class=\"mf\">0.00025963477647737156</span><span class=\"p\">,</span> <span class=\"mf\">1.5674403473853433e-07</span><span class=\"p\">,</span> <span class=\"p\">)</span>\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">SH_converter</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">,</span> <span class=\"n\">B</span><span class=\"p\">,</span> <span class=\"n\">C</span><span class=\"p\">)</span>\n</pre>\n<p>If they're not available the converter could compute the values from\nthree evenly spaced readings of temperature and resistance.</p>\n<p>Create the converter from temp/res readings:</p>\n<pre><span class=\"n\">readings</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">27445</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">25</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">4160</span><span class=\"p\">),</span>\n<span class=\"p\">)</span>\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">SH_converter</span><span class=\"o\">.</span><span class=\"n\">from_points</span><span class=\"p\">(</span><span class=\"n\">readings</span><span class=\"p\">)</span>\n</pre>\n<p>Printing the coefficients in a form suitable for subsequent use in\npython and C:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">conv</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># SH_converter(0.0008402250578523375, 0.00025963477647737156, 1.5674403473853433e-07, 0, 50)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">to_cstr</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># {0.0008402250578523375, 0.00025963477647737156, 1.5674403473853433e-07, 0, 50}</span>\n\n<span class=\"c1\"># compact but less precise representation</span>\n<span class=\"c1\"># (inverse of coefficients and no temperature range)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">to_cstr</span><span class=\"p\">(</span><span class=\"n\">compact</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">with_temps</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># {1./1190, 1./3852, 1./6379828}</span>\n</pre>\n<p>Use the reference implementation in C (example-1.c):</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;thermistor_utils.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">sh_s</span> <span class=\"n\">coefficients</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"mf\">0.0008402250578523375</span><span class=\"p\">,</span>\n        <span class=\"mf\">0.00025963477647737156</span><span class=\"p\">,</span>\n        <span class=\"mf\">1.5674403473853433e-07</span>\n    <span class=\"p\">};</span>\n\n    <span class=\"c1\">// 25C to Ohm and 10k Ohm to Celsius</span>\n    <span class=\"kt\">double</span>  <span class=\"n\">R_at_25</span>   <span class=\"o\">=</span> <span class=\"n\">sh_resistance</span><span class=\"p\">(</span><span class=\"n\">coefficients</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span>\n            <span class=\"n\">T_at_10000</span> <span class=\"o\">=</span> <span class=\"n\">sh_temperature</span><span class=\"p\">(</span><span class=\"n\">coefficients</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"25 Celsius -&gt; %.0f Ohms</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">R_at_25</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"10k Ohms   -&gt; %.0f Celsius</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">T_at_10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To compile and run from the examples directory:</p>\n<pre>$ mkdir -p ../bin\n$ gcc -o ../bin/example-1 <span class=\"se\">\\</span>\n    -I../src/include <span class=\"se\">\\</span>\n    ../src/sh_converter.c <span class=\"se\">\\</span>\n    -lm <span class=\"se\">\\</span>\n    example-1.c\n\n$ ../bin/example-1\n<span class=\"m\">25</span> Celsius -&gt; <span class=\"m\">10000</span> Ohms\n10k Ohms   -&gt; <span class=\"m\">25</span> Celsius\n</pre>\n<h2>Beta model</h2>\n<h3>Implementation precision</h3>\n<p><img alt=\"Beta resistance to temperature chart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1e4238d52d0a73d0ac6554a1353ba697fc123f80/68747470733a2f2f6769746c61622e636f6d2f676575736562692f746865726d6973746f722d7574696c732f7261772f6d61737465722f6368617274732f626574612d7265732d74656d702e706e67\">\n<img alt=\"Beta temperature to resistance chart\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/356bcdd839c7a7482d32bdad668f16c67c4acbbf/68747470733a2f2f6769746c61622e636f6d2f676575736562692f746865726d6973746f722d7574696c732f7261772f6d61737465722f6368617274732f626574612d74656d702d7265732e706e67\"></p>\n<h3>How to use</h3>\n<pre><span class=\"c1\"># import the Steinhart--Hart and or the Beta converter</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thermistor_utils</span> <span class=\"kn\">import</span> <span class=\"n\">Beta_converter</span>\n</pre>\n<p>Create a converter from beta values:</p>\n<pre><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"n\">T0</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"mi\">3380</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">Beta_converter</span><span class=\"p\">(</span><span class=\"n\">beta</span><span class=\"p\">,</span> <span class=\"n\">R0</span><span class=\"p\">,</span> <span class=\"n\">T0</span><span class=\"p\">)</span>\n</pre>\n<p>Printing the beta values in a form suitable for subsequent use in\npython and C:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">conv</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Beta_converter(3380, 10000, 25)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">to_cstr</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># {3380, 10000, 25}</span>\n</pre>\n<p>Use the reference implementation in C (example-2.c):</p>\n<pre><span class=\"cp\">#include</span> <span class=\"cpf\">&lt;stdio.h&gt;</span><span class=\"cp\"></span>\n<span class=\"cp\">#include</span> <span class=\"cpf\">&lt;thermistor_utils.h&gt;</span><span class=\"cp\"></span>\n\n<span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">(</span><span class=\"kt\">void</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"k\">struct</span> <span class=\"n\">beta_s</span> <span class=\"n\">bpar</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"mi\">3380</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">};</span>\n\n    <span class=\"c1\">// 25C to Ohm and 10k Ohm to Celsius</span>\n    <span class=\"kt\">double</span>  <span class=\"n\">R_at_25</span>   <span class=\"o\">=</span> <span class=\"n\">beta_resistance</span><span class=\"p\">(</span><span class=\"n\">bpar</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">),</span>\n            <span class=\"n\">T_at_10000</span> <span class=\"o\">=</span> <span class=\"n\">beta_temperature</span><span class=\"p\">(</span><span class=\"n\">bpar</span><span class=\"p\">,</span> <span class=\"mi\">10000</span><span class=\"p\">);</span>\n\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"25 Celsius -&gt; %.0f Ohms</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">R_at_25</span><span class=\"p\">);</span>\n    <span class=\"n\">printf</span><span class=\"p\">(</span><span class=\"s\">\"10k Ohms   -&gt; %.0f Celsius</span><span class=\"se\">\\n</span><span class=\"s\">\"</span><span class=\"p\">,</span> <span class=\"n\">T_at_10000</span><span class=\"p\">);</span>\n<span class=\"p\">}</span>\n</pre>\n<p>To compile and run from the examples directory:</p>\n<pre>$ mkdir -p ../bin\n$ gcc -o ../bin/example-2 <span class=\"se\">\\</span>\n      -I../src/include <span class=\"se\">\\</span>\n      ../src/beta_converter.c <span class=\"se\">\\</span>\n      -lm <span class=\"se\">\\</span>\n      example-2.c\n\n$ ../bin/example-2\n<span class=\"m\">25</span> Celsius -&gt; <span class=\"m\">10000</span> Ohms\n10k Ohms   -&gt; <span class=\"m\">25</span> Celsius\n</pre>\n\n          </div>"}, "last_serial": 6265819, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "575e42f11cc584098ccbbbce2148c749", "sha256": "dc327e013a93ab362092c5a9645c51788619c006171eadcd692a3598f71ab202"}, "downloads": -1, "filename": "thermistor_utils-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "575e42f11cc584098ccbbbce2148c749", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8340, "upload_time": "2019-12-09T03:55:28", "upload_time_iso_8601": "2019-12-09T03:55:28.382720Z", "url": "https://files.pythonhosted.org/packages/8d/80/f2bfa2b431825ed4ea62b8dc5c00474228d2872c425ea72936455a581858/thermistor_utils-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fe21ec7ab89e83e68c237ad1755b6826", "sha256": "004782c9ddefb70baedbdee68c36ef923dd4e3009e11e2a27ee37cda3e43f57d"}, "downloads": -1, "filename": "thermistor_utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "fe21ec7ab89e83e68c237ad1755b6826", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4664, "upload_time": "2019-12-09T03:55:31", "upload_time_iso_8601": "2019-12-09T03:55:31.567878Z", "url": "https://files.pythonhosted.org/packages/d2/4f/0eaf7314e66fe4386943216f61fb210d36f6de1b141d20e045c15f95e233/thermistor_utils-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c12f861ac7428d68d0a289e087a721bb", "sha256": "ab0a25992c45acb844a5c42604ef91c343f064b10d785518d35f3226d233c2a4"}, "downloads": -1, "filename": "thermistor_utils-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c12f861ac7428d68d0a289e087a721bb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8340, "upload_time": "2019-12-09T04:52:47", "upload_time_iso_8601": "2019-12-09T04:52:47.627353Z", "url": "https://files.pythonhosted.org/packages/df/c1/47479ca7e6c87bb4f89a06a98f384f21560617053b58a2d8605c103ffd29/thermistor_utils-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64b4c66ef67fefba531a115e1582ed8f", "sha256": "6ed22d3dd04fa046011629bbb203b36cc10b46727dc6c5aa9502e9998972ad4a"}, "downloads": -1, "filename": "thermistor_utils-0.0.2.tar.gz", "has_sig": false, "md5_digest": "64b4c66ef67fefba531a115e1582ed8f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5295, "upload_time": "2019-12-09T04:52:48", "upload_time_iso_8601": "2019-12-09T04:52:48.958098Z", "url": "https://files.pythonhosted.org/packages/20/05/865c9cfe79e22248b61e82aad487f1c89b8e7c25471cd778d84b6ed9055a/thermistor_utils-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "498a533d2ddf8e9e021ddb6922178e38", "sha256": "4fc88ba544dc42609944277fe377d7532835857e5440906a253ce3146afc3a67"}, "downloads": -1, "filename": "thermistor_utils-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "498a533d2ddf8e9e021ddb6922178e38", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8356, "upload_time": "2019-12-09T07:57:01", "upload_time_iso_8601": "2019-12-09T07:57:01.644682Z", "url": "https://files.pythonhosted.org/packages/e3/ea/eff8c51d47eb3be8fccf850a35f47dd79119b5829b41db96e6342158b465/thermistor_utils-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "92dcfe6885752f92f0f975b91904adc5", "sha256": "706a5c093b107e882c45bf1f6085c84ea1936eefcfbfc6848077566966fbd939"}, "downloads": -1, "filename": "thermistor_utils-0.0.3.tar.gz", "has_sig": false, "md5_digest": "92dcfe6885752f92f0f975b91904adc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5568, "upload_time": "2019-12-09T07:57:02", "upload_time_iso_8601": "2019-12-09T07:57:02.827306Z", "url": "https://files.pythonhosted.org/packages/8e/76/aa456fde9109d888cb5174c1cf075869f4ffd751b05752ef99f15ca0ff14/thermistor_utils-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "2548a51da240da047047e4a31e2f3b9c", "sha256": "00923bc0e9d9728e3c2db5f10c29801baa9fa4842750f41ab5451365b2fc2c7c"}, "downloads": -1, "filename": "thermistor_utils-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2548a51da240da047047e4a31e2f3b9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8355, "upload_time": "2019-12-09T10:56:20", "upload_time_iso_8601": "2019-12-09T10:56:20.057893Z", "url": "https://files.pythonhosted.org/packages/4c/ce/bb89b5e80b1c1dd1e861bdfc105791a48abb63234f555bd78a2cef288d0c/thermistor_utils-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e90089bcaed97aeba019ab399c9206f4", "sha256": "a648689bb6e55129cb14403aae985068246e1365d74b154db33f2a86a38a415c"}, "downloads": -1, "filename": "thermistor_utils-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e90089bcaed97aeba019ab399c9206f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5302, "upload_time": "2019-12-09T10:56:21", "upload_time_iso_8601": "2019-12-09T10:56:21.104675Z", "url": "https://files.pythonhosted.org/packages/b4/66/f90da1f82fe207fe9cf677bb24cfd8b133345c940266dbcae7e1dbafa6fd/thermistor_utils-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2548a51da240da047047e4a31e2f3b9c", "sha256": "00923bc0e9d9728e3c2db5f10c29801baa9fa4842750f41ab5451365b2fc2c7c"}, "downloads": -1, "filename": "thermistor_utils-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2548a51da240da047047e4a31e2f3b9c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8355, "upload_time": "2019-12-09T10:56:20", "upload_time_iso_8601": "2019-12-09T10:56:20.057893Z", "url": "https://files.pythonhosted.org/packages/4c/ce/bb89b5e80b1c1dd1e861bdfc105791a48abb63234f555bd78a2cef288d0c/thermistor_utils-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e90089bcaed97aeba019ab399c9206f4", "sha256": "a648689bb6e55129cb14403aae985068246e1365d74b154db33f2a86a38a415c"}, "downloads": -1, "filename": "thermistor_utils-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e90089bcaed97aeba019ab399c9206f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5302, "upload_time": "2019-12-09T10:56:21", "upload_time_iso_8601": "2019-12-09T10:56:21.104675Z", "url": "https://files.pythonhosted.org/packages/b4/66/f90da1f82fe207fe9cf677bb24cfd8b133345c940266dbcae7e1dbafa6fd/thermistor_utils-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:02 2020"}