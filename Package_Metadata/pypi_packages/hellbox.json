{"info": {"author": "Jack Jennings", "author_email": "jack@standard-library.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Build Tools"], "description": "\nHellbox\n=======\n\n.. image:: https://travis-ci.org/hellboxpy/hellbox.svg?branch=master\n    :target: https://travis-ci.org/hellboxpy/hellbox\n\nHellbox is a modular, editor-agnostic build system designed for font development. Hellbox is similar to some \"Flow-based Programming\" environments, consisting of a system of chained blackbox components.\n\n**Hellbox is in the early stages of development. This document is more of a roadmap than documentation of the current implementation. Expect API changes without notice until v1.0.**\n\nGoals\n-----\n\n* **Consistency** Hellbox tasks don't take arguments by design, favoring consistent task output\n* **Modularity** Hellbox packages should be resuable and composable, while maintaining flexibility for custom workflows\n* **Isolation** Hellbox tasks and packages are version locked and isolated from other projects and Python installations\n\nOverview\n--------\n\nHellbox aims to provide both an environment and framework for defining build pipelines.\n\nHellbox tasks are composed of \"chutes\" \u2014 modules that perform a single operation over one or more files. Chutes are connected together using the ``>>`` operator, linking the output of one chute to the input of the next.\n\n.. code-block:: python\n\n    from hellbox import Hellbox\n    from hellbox_generate_otf import GenerateOtf\n\n    with Hellbox(\"build\") as task:\n        task.describe(\"Builds .otf files from .ufo source\")\n        task.read(\"*.ufo\") >> GenerateOtf() >> task.write(\"./otf\")\n\nWith the above configuration, running ``hell run build`` will generate OTF files from all of the UFO sources, and write them to the ``otf`` directory.\n\nInstallation\n------------\n\nFirst `install hell`_, a CLI for managing hellbox projects. Then run ``hell init`` inside of your project (or ``hell install`` inside of an existing hellbox-enabled project).\n\nThis will set up a new virtual environment with Python 3 using `pipenv`, create a ``Hellfile.py`` for defining tasks, and install the ``hellbox`` library itself.\n\n.. _`install hell`: https://github.com/hellboxpy/hell#installation\n\nChutes\n------\n\nThere are two ways of defining a Hellbox chute, depending on the complexity and amount of configuration required.\n\nThe basic setup for defining your own chutes requires you to create a new subclass of ``Chute``. You must define a method ``run`` which accepts a single ``files`` argument (an array) and returns a new array of modified files. Besides ``run``, you can define any other methods you like on the new class.\n\n.. code-block:: python\n\n    from hellbox.chute import Chute\n\n    class FilterFilesByExt(Chute):\n\n        def __init__(self, *extensions):\n            self.extensions = extensions\n\n        def run(self, files):\n            return [f for f in files if f.extension in self.extensions]\n\nYou can then use your chute in your Hellfile as such:\n\n.. code-block:: python\n\n  with Hellbox(\"backup\") as task:\n      task.read(\"build/*\") >> FilterFilesByExt(\"otf\", \"txt\") >> task.write(\"backup\")\n\nIf your chute doesn't require arguments when initialized, you may prefer to define it with a function instead of a class. Using the ``@Chute.create`` function decorator makes a function definition act like a subclass of Chute:\n\n.. code-block:: python\n\n    from hellbox.chute import Chute\n\n    @Chute.create\n    def GenerateWoff2(files):\n        # do something to files...\n        return files\n\n    with Hellbox(\"webfonts\") as task:\n        task.read(\"build/*.ttf\") >> GenerateWoff2() >> task.write(\"webfonts\")\n\nCLI\n---\n\nHellbox comes with a command line tool `hell`_ which offers a thin layer over ``pipenv``. Using the CLI is highly recommended, as it makes working in isolation dead simple.\n\n.. _`hell`: https://github.com/hellboxpy/hell/blob/master/README.md#installation\n\nDevelopment\n-----------\n\nInstall development dependencies with ``make``. Run tests with ``make test``.\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/hellboxpy/hellbox", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "hellbox", "package_url": "https://pypi.org/project/hellbox/", "platform": "", "project_url": "https://pypi.org/project/hellbox/", "project_urls": {"Homepage": "http://github.com/hellboxpy/hellbox"}, "release_url": "https://pypi.org/project/hellbox/0.1.3/", "requires_dist": ["glob2"], "requires_python": ">=3.6.0", "summary": "Build system for font development.", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/hellboxpy/hellbox\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/hellboxpy/hellbox.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0bbbd50d3f9ea437831c6c0cf606ea7a254518d2/68747470733a2f2f7472617669732d63692e6f72672f68656c6c626f7870792f68656c6c626f782e7376673f6272616e63683d6d6173746572\"></a>\n<p>Hellbox is a modular, editor-agnostic build system designed for font development. Hellbox is similar to some \u201cFlow-based Programming\u201d environments, consisting of a system of chained blackbox components.</p>\n<p><strong>Hellbox is in the early stages of development. This document is more of a roadmap than documentation of the current implementation. Expect API changes without notice until v1.0.</strong></p>\n<div id=\"goals\">\n<h2>Goals</h2>\n<ul>\n<li><strong>Consistency</strong> Hellbox tasks don\u2019t take arguments by design, favoring consistent task output</li>\n<li><strong>Modularity</strong> Hellbox packages should be resuable and composable, while maintaining flexibility for custom workflows</li>\n<li><strong>Isolation</strong> Hellbox tasks and packages are version locked and isolated from other projects and Python installations</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>Hellbox aims to provide both an environment and framework for defining build pipelines.</p>\n<p>Hellbox tasks are composed of \u201cchutes\u201d \u2014 modules that perform a single operation over one or more files. Chutes are connected together using the <tt>&gt;&gt;</tt> operator, linking the output of one chute to the input of the next.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hellbox</span> <span class=\"kn\">import</span> <span class=\"n\">Hellbox</span>\n<span class=\"kn\">from</span> <span class=\"nn\">hellbox_generate_otf</span> <span class=\"kn\">import</span> <span class=\"n\">GenerateOtf</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Hellbox</span><span class=\"p\">(</span><span class=\"s2\">\"build\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">describe</span><span class=\"p\">(</span><span class=\"s2\">\"Builds .otf files from .ufo source\"</span><span class=\"p\">)</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"*.ufo\"</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">GenerateOtf</span><span class=\"p\">()</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"./otf\"</span><span class=\"p\">)</span>\n</pre>\n<p>With the above configuration, running <tt>hell run build</tt> will generate OTF files from all of the UFO sources, and write them to the <tt>otf</tt> directory.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>First <a href=\"https://github.com/hellboxpy/hell#installation\" rel=\"nofollow\">install hell</a>, a CLI for managing hellbox projects. Then run <tt>hell init</tt> inside of your project (or <tt>hell install</tt> inside of an existing hellbox-enabled project).</p>\n<p>This will set up a new virtual environment with Python 3 using <cite>pipenv</cite>, create a <tt>Hellfile.py</tt> for defining tasks, and install the <tt>hellbox</tt> library itself.</p>\n</div>\n<div id=\"chutes\">\n<h2>Chutes</h2>\n<p>There are two ways of defining a Hellbox chute, depending on the complexity and amount of configuration required.</p>\n<p>The basic setup for defining your own chutes requires you to create a new subclass of <tt>Chute</tt>. You must define a method <tt>run</tt> which accepts a single <tt>files</tt> argument (an array) and returns a new array of modified files. Besides <tt>run</tt>, you can define any other methods you like on the new class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hellbox.chute</span> <span class=\"kn\">import</span> <span class=\"n\">Chute</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">FilterFilesByExt</span><span class=\"p\">(</span><span class=\"n\">Chute</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">extensions</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extensions</span> <span class=\"o\">=</span> <span class=\"n\">extensions</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">files</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">[</span><span class=\"n\">f</span> <span class=\"k\">for</span> <span class=\"n\">f</span> <span class=\"ow\">in</span> <span class=\"n\">files</span> <span class=\"k\">if</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">extension</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">extensions</span><span class=\"p\">]</span>\n</pre>\n<p>You can then use your chute in your Hellfile as such:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">Hellbox</span><span class=\"p\">(</span><span class=\"s2\">\"backup\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"build/*\"</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">FilterFilesByExt</span><span class=\"p\">(</span><span class=\"s2\">\"otf\"</span><span class=\"p\">,</span> <span class=\"s2\">\"txt\"</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"backup\"</span><span class=\"p\">)</span>\n</pre>\n<p>If your chute doesn\u2019t require arguments when initialized, you may prefer to define it with a function instead of a class. Using the <tt>@Chute.create</tt> function decorator makes a function definition act like a subclass of Chute:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">hellbox.chute</span> <span class=\"kn\">import</span> <span class=\"n\">Chute</span>\n\n<span class=\"nd\">@Chute</span><span class=\"o\">.</span><span class=\"n\">create</span>\n<span class=\"k\">def</span> <span class=\"nf\">GenerateWoff2</span><span class=\"p\">(</span><span class=\"n\">files</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do something to files...</span>\n    <span class=\"k\">return</span> <span class=\"n\">files</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Hellbox</span><span class=\"p\">(</span><span class=\"s2\">\"webfonts\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">task</span><span class=\"p\">:</span>\n    <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"s2\">\"build/*.ttf\"</span><span class=\"p\">)</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">GenerateWoff2</span><span class=\"p\">()</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"webfonts\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>Hellbox comes with a command line tool <a href=\"https://github.com/hellboxpy/hell/blob/master/README.md#installation\" rel=\"nofollow\">hell</a> which offers a thin layer over <tt>pipenv</tt>. Using the CLI is highly recommended, as it makes working in isolation dead simple.</p>\n</div>\n<div id=\"development\">\n<h2>Development</h2>\n<p>Install development dependencies with <tt>make</tt>. Run tests with <tt>make test</tt>.</p>\n</div>\n\n          </div>"}, "last_serial": 5125954, "releases": {"0.1.3": [{"comment_text": "", "digests": {"md5": "b1358f6953499a5e33f3a55370f6dc18", "sha256": "08f6b08d6796fc4edaefb4b8cacee57e79d8c1628112b297702d4e1479ab51b7"}, "downloads": -1, "filename": "hellbox-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1358f6953499a5e33f3a55370f6dc18", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8924, "upload_time": "2019-04-10T21:06:21", "upload_time_iso_8601": "2019-04-10T21:06:21.891597Z", "url": "https://files.pythonhosted.org/packages/df/dc/d9f9c7e869464c49706f344ca72d978f1ef45973b2c9a40fea1adeb0d704/hellbox-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "687e135514877029d5c5039020c1d58d", "sha256": "23ac513d45ef32f9ba692c9213900e551f361a4724c14afbe465f2e9cb665c3d"}, "downloads": -1, "filename": "hellbox-0.1.3.tar.gz", "has_sig": false, "md5_digest": "687e135514877029d5c5039020c1d58d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8192, "upload_time": "2019-04-10T21:06:23", "upload_time_iso_8601": "2019-04-10T21:06:23.953638Z", "url": "https://files.pythonhosted.org/packages/10/60/b5d1db999cc6c10eb8f06ba3ae962c23f62c041e1c6ac58f2b3d3cfdc4a3/hellbox-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b1358f6953499a5e33f3a55370f6dc18", "sha256": "08f6b08d6796fc4edaefb4b8cacee57e79d8c1628112b297702d4e1479ab51b7"}, "downloads": -1, "filename": "hellbox-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b1358f6953499a5e33f3a55370f6dc18", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 8924, "upload_time": "2019-04-10T21:06:21", "upload_time_iso_8601": "2019-04-10T21:06:21.891597Z", "url": "https://files.pythonhosted.org/packages/df/dc/d9f9c7e869464c49706f344ca72d978f1ef45973b2c9a40fea1adeb0d704/hellbox-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "687e135514877029d5c5039020c1d58d", "sha256": "23ac513d45ef32f9ba692c9213900e551f361a4724c14afbe465f2e9cb665c3d"}, "downloads": -1, "filename": "hellbox-0.1.3.tar.gz", "has_sig": false, "md5_digest": "687e135514877029d5c5039020c1d58d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8192, "upload_time": "2019-04-10T21:06:23", "upload_time_iso_8601": "2019-04-10T21:06:23.953638Z", "url": "https://files.pythonhosted.org/packages/10/60/b5d1db999cc6c10eb8f06ba3ae962c23f62c041e1c6ac58f2b3d3cfdc4a3/hellbox-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:46 2020"}