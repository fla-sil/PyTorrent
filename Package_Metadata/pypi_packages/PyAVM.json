{"info": {"author": "Thomas Robitaille", "author_email": "thomas.robitaille@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python"], "description": "|Build Status| |Coverage Status|\n\nAbout\n-----\n\nPyAVM is a module to represent, read, and write metadata following the\n`*Astronomy Visualization\nMetadata* <http://www.virtualastronomy.org/avm_metadata.php>`__ (AVM)\nstandard.\n\nRequirements\n------------\n\nPyAVM supports Python 2.7 and 3.5+. No other dependencies are needed\nsimply to read and embed AVM meta-data.\n\nHowever, the following optional dependencies are needed for more\nadvanced functionality:\n\n-  `Numpy <http://www.numpy.org>`__ 1.10 or later\n-  `Astropy <http://www.astropy.org>`__ to handle WCS objects and FITS\n   headers\n-  `py.test <http://www.pytest.org>`__ and\n   `PIL <http://www.pythonware.com/products/pil/>`__ for tests\n\nInstalling and Reporting issues\n-------------------------------\n\nPyAVM can be installed with pip::\n\n    pip install pyavm\n\nPlease report any issues you encounter via the `issue\ntracker <https://github.com/astrofrog/pyavm/issues>`__ on GitHub.\n\nUsing PyAVM\n-----------\n\nImporting\n~~~~~~~~~\n\nPyAVM provides the ``AVM`` class to represent AVM meta-data, and is\nimported as follows:\n\n.. code:: python\n\n    >>> from pyavm import AVM\n\nParsing files\n~~~~~~~~~~~~~\n\nTo parse AVM meta-data from an existing image, simply call the\n``from_image`` class method using the filename of the image (or any\nfile-like object):\n\n.. code:: python\n\n    >>> avm = AVM.from_image('myexample.jpg')\n\nOnly JPEG and PNG files are properly supported in that the parsing\nfollows the JPEG and PNG specification. For other file formats, PyAVM\nwill simply scan the contents of the file, looking for an XMP packet.\nThis method is less reliable, but should work in most real-life cases.\n\nAccessing and setting the meta-data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can view the contents of the AVM object by using\n\n.. code:: python\n\n    >>> print(avm)\n\nThe AVM meta-data can be accessed using the attribute notation:\n\n.. code:: python\n\n    >>> avm.Spatial.Equinox\n    'J2000'\n    >>> avm.Publisher\n    'Chandra X-ray Observatory'\n\nTags can be modified:\n\n.. code:: python\n\n    >>> avm.Spatial.Equinox = \"B1950\"\n    >>> avm.Spatial.Notes = \"The WCS information was updated on 04/02/2010\"\n\nCreating an AVM object from scratch\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo create an empty AVM meta-data holder, simply call ``AVM()`` without\nany arguments:\n\n.. code:: python\n\n    >>> avm = AVM()\n\nNote that this will create an AVM object following the 1.2\nspecification. If necessary, you can specify which version of the\nstandard to use:\n\n.. code:: python\n\n    >>> avm = AVM(version=1.1)\n\nConverting to a WCS object\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to create an Astropy WCS object from the AVM meta-data:\n\n.. code:: python\n\n    >>> wcs = avm.to_wcs()\n\nBy default, ``Spatial.FITSheader`` will be used if available, but if\nnot, the WCS information is extracted from the other ``Spatial.*`` tags.\nTo force PyAVM to not try ``Spatial.FITSheader``, use:\n\n.. code:: python\n\n    >>> wcs = avm.to_wcs(use_full_header=False)\n\nInitializing from a FITS header\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nTo create an AVM meta-data object from a FITS header, simply pass the\nheader (as an Astropy Header instance) to the ``from_header`` class\nmethod:\n\n.. code:: python\n\n    >>> from astropy.io import fits\n    >>> header = fits.getheader('image.fits')\n    >>> avm = AVM.from_header(header)\n\nBy default, the AVM tag ``Spatial.FITSheader`` will be created,\ncontaining the full header (in addition to the other ``Spatial.*``\ntags). This can be disabled with:\n\n.. code:: python\n\n    >>> avm = AVM.from_header(header, include_full_header=False)\n\nInitializing from a WCS object\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nSimilarly, it is possible to create an AVM meta-data object from an\nAstropy WCS instance:\n\n.. code:: python\n\n    >>> from astropy.wcs import WCS\n    >>> from pyavm import AVM\n    >>> wcs = WCS('image.fits')\n    >>> avm = AVM.from_wcs(wcs)\n\nTagging images with AVM meta-data\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt is possible to embed AVM meta-data into an image file:\n\n.. code:: python\n\n    >>> avm.embed('original_image.jpg', 'tagged_image.jpg')\n\nAt this time, only JPG and PNG files are supported for embedding.\n\n.. |Build Status| image:: https://travis-ci.org/astrofrog/pyavm.svg?branch=master\n   :target: https://travis-ci.org/astrofrog/pyavm\n.. |Coverage Status| image:: https://coveralls.io/repos/astrofrog/pyavm/badge.svg?branch=master\n   :target: https://coveralls.io/r/astrofrog/pyavm?branch=master\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://astrofrog.github.io/pyavm/", "keywords": "Scientific/Engineering", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "PyAVM", "package_url": "https://pypi.org/project/PyAVM/", "platform": "", "project_url": "https://pypi.org/project/PyAVM/", "project_urls": {"Homepage": "http://astrofrog.github.io/pyavm/"}, "release_url": "https://pypi.org/project/PyAVM/0.9.4/", "requires_dist": null, "requires_python": "", "summary": "Simple pure-python AVM meta-data handling", "version": "0.9.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/astrofrog/pyavm\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b1e4d2a9cdeeef251278e4942b9501baab30d826/68747470733a2f2f7472617669732d63692e6f72672f617374726f66726f672f707961766d2e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://coveralls.io/r/astrofrog/pyavm?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d92e02ac738d4bd09b35a044c554e03f8240329e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f617374726f66726f672f707961766d2f62616467652e7376673f6272616e63683d6d6173746572\"></a></p>\n<div id=\"about\">\n<h2>About</h2>\n<p>PyAVM is a module to represent, read, and write metadata following the\n<a href=\"http://www.virtualastronomy.org/avm_metadata.php\" rel=\"nofollow\">*Astronomy Visualization\nMetadata*</a> (AVM)\nstandard.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>PyAVM supports Python 2.7 and 3.5+. No other dependencies are needed\nsimply to read and embed AVM meta-data.</p>\n<p>However, the following optional dependencies are needed for more\nadvanced functionality:</p>\n<ul>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">Numpy</a> 1.10 or later</li>\n<li><a href=\"http://www.astropy.org\" rel=\"nofollow\">Astropy</a> to handle WCS objects and FITS\nheaders</li>\n<li><a href=\"http://www.pytest.org\" rel=\"nofollow\">py.test</a> and\n<a href=\"http://www.pythonware.com/products/pil/\" rel=\"nofollow\">PIL</a> for tests</li>\n</ul>\n</div>\n<div id=\"installing-and-reporting-issues\">\n<h2>Installing and Reporting issues</h2>\n<p>PyAVM can be installed with pip:</p>\n<pre>pip install pyavm\n</pre>\n<p>Please report any issues you encounter via the <a href=\"https://github.com/astrofrog/pyavm/issues\" rel=\"nofollow\">issue\ntracker</a> on GitHub.</p>\n</div>\n<div id=\"using-pyavm\">\n<h2>Using PyAVM</h2>\n<div id=\"importing\">\n<h3>Importing</h3>\n<p>PyAVM provides the <tt>AVM</tt> class to represent AVM meta-data, and is\nimported as follows:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyavm</span> <span class=\"kn\">import</span> <span class=\"n\">AVM</span>\n</pre>\n</div>\n<div id=\"parsing-files\">\n<h3>Parsing files</h3>\n<p>To parse AVM meta-data from an existing image, simply call the\n<tt>from_image</tt> class method using the filename of the image (or any\nfile-like object):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"o\">.</span><span class=\"n\">from_image</span><span class=\"p\">(</span><span class=\"s1\">'myexample.jpg'</span><span class=\"p\">)</span>\n</pre>\n<p>Only JPEG and PNG files are properly supported in that the parsing\nfollows the JPEG and PNG specification. For other file formats, PyAVM\nwill simply scan the contents of the file, looking for an XMP packet.\nThis method is less reliable, but should work in most real-life cases.</p>\n</div>\n<div id=\"accessing-and-setting-the-meta-data\">\n<h3>Accessing and setting the meta-data</h3>\n<p>You can view the contents of the AVM object by using</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">avm</span><span class=\"p\">)</span>\n</pre>\n<p>The AVM meta-data can be accessed using the attribute notation:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">Spatial</span><span class=\"o\">.</span><span class=\"n\">Equinox</span>\n<span class=\"s1\">'J2000'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">Publisher</span>\n<span class=\"s1\">'Chandra X-ray Observatory'</span>\n</pre>\n<p>Tags can be modified:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">Spatial</span><span class=\"o\">.</span><span class=\"n\">Equinox</span> <span class=\"o\">=</span> <span class=\"s2\">\"B1950\"</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">Spatial</span><span class=\"o\">.</span><span class=\"n\">Notes</span> <span class=\"o\">=</span> <span class=\"s2\">\"The WCS information was updated on 04/02/2010\"</span>\n</pre>\n</div>\n<div id=\"creating-an-avm-object-from-scratch\">\n<h3>Creating an AVM object from scratch</h3>\n<p>To create an empty AVM meta-data holder, simply call <tt>AVM()</tt> without\nany arguments:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"p\">()</span>\n</pre>\n<p>Note that this will create an AVM object following the 1.2\nspecification. If necessary, you can specify which version of the\nstandard to use:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"p\">(</span><span class=\"n\">version</span><span class=\"o\">=</span><span class=\"mf\">1.1</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"converting-to-a-wcs-object\">\n<h3>Converting to a WCS object</h3>\n<p>It is possible to create an Astropy WCS object from the AVM meta-data:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wcs</span> <span class=\"o\">=</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">to_wcs</span><span class=\"p\">()</span>\n</pre>\n<p>By default, <tt>Spatial.FITSheader</tt> will be used if available, but if\nnot, the WCS information is extracted from the other <tt>Spatial.*</tt> tags.\nTo force PyAVM to not try <tt>Spatial.FITSheader</tt>, use:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wcs</span> <span class=\"o\">=</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">to_wcs</span><span class=\"p\">(</span><span class=\"n\">use_full_header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"initializing-from-a-fits-header\">\n<h3>Initializing from a FITS header</h3>\n<p>To create an AVM meta-data object from a FITS header, simply pass the\nheader (as an Astropy Header instance) to the <tt>from_header</tt> class\nmethod:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">astropy.io</span> <span class=\"kn\">import</span> <span class=\"n\">fits</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">header</span> <span class=\"o\">=</span> <span class=\"n\">fits</span><span class=\"o\">.</span><span class=\"n\">getheader</span><span class=\"p\">(</span><span class=\"s1\">'image.fits'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"o\">.</span><span class=\"n\">from_header</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">)</span>\n</pre>\n<p>By default, the AVM tag <tt>Spatial.FITSheader</tt> will be created,\ncontaining the full header (in addition to the other <tt>Spatial.*</tt>\ntags). This can be disabled with:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"o\">.</span><span class=\"n\">from_header</span><span class=\"p\">(</span><span class=\"n\">header</span><span class=\"p\">,</span> <span class=\"n\">include_full_header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"initializing-from-a-wcs-object\">\n<h3>Initializing from a WCS object</h3>\n<p>Similarly, it is possible to create an AVM meta-data object from an\nAstropy WCS instance:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">astropy.wcs</span> <span class=\"kn\">import</span> <span class=\"n\">WCS</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">pyavm</span> <span class=\"kn\">import</span> <span class=\"n\">AVM</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">wcs</span> <span class=\"o\">=</span> <span class=\"n\">WCS</span><span class=\"p\">(</span><span class=\"s1\">'image.fits'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span> <span class=\"o\">=</span> <span class=\"n\">AVM</span><span class=\"o\">.</span><span class=\"n\">from_wcs</span><span class=\"p\">(</span><span class=\"n\">wcs</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"tagging-images-with-avm-meta-data\">\n<h3>Tagging images with AVM meta-data</h3>\n<p>It is possible to embed AVM meta-data into an image file:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">avm</span><span class=\"o\">.</span><span class=\"n\">embed</span><span class=\"p\">(</span><span class=\"s1\">'original_image.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'tagged_image.jpg'</span><span class=\"p\">)</span>\n</pre>\n<p>At this time, only JPG and PNG files are supported for embedding.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3075085, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "e3e03cab3ad5f87e9dd39080ec8fe50d", "sha256": "cfbc0731d2b40698656fe2a1d50919d60bf7a1da86a35c9112ea36fbb52f274a"}, "downloads": -1, "filename": "PyAVM-0.1.0.tar.gz", "has_sig": false, "md5_digest": "e3e03cab3ad5f87e9dd39080ec8fe50d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4121, "upload_time": "2011-05-06T22:11:30", "upload_time_iso_8601": "2011-05-06T22:11:30.732185Z", "url": "https://files.pythonhosted.org/packages/46/e6/6ca1d7c682b23a277fbd069b1ee59d74d44257b1739a1415053f936ade0c/PyAVM-0.1.0.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b61903f778e07a4d1571dbaa0be5d26", "sha256": "61819834f03794fd22935eee060d6160e46ee4ef3c01ef9f67a419bd40287b70"}, "downloads": -1, "filename": "PyAVM-0.1.0.zip", "has_sig": false, "md5_digest": "5b61903f778e07a4d1571dbaa0be5d26", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7723, "upload_time": "2011-05-06T22:11:30", "upload_time_iso_8601": "2011-05-06T22:11:30.002021Z", "url": "https://files.pythonhosted.org/packages/35/5b/27b885bda50b29d719bb284267c7ea09ab3b6616a1f3f9f043588f685d99/PyAVM-0.1.0.zip", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "fa15bc3ad737de28e630af85d0b29e84", "sha256": "c2fe1764da24752e99d55d792c4685d78c301f7410878124a9372ec7c2e95a32"}, "downloads": -1, "filename": "PyAVM-0.1.1.tar.gz", "has_sig": false, "md5_digest": "fa15bc3ad737de28e630af85d0b29e84", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7377, "upload_time": "2011-05-08T22:37:05", "upload_time_iso_8601": "2011-05-08T22:37:05.383266Z", "url": "https://files.pythonhosted.org/packages/2b/fa/1f3b9f2b8fcdf0633c0c665972977851f096e37564c5cc80f4cb2ea14f9f/PyAVM-0.1.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "cc27efcc64ce7c486a39a5aac5cd0fb8", "sha256": "c81ce8b808a2960235765e7a7d67f3c6617123fe75d0a3430990d48741d7bf1f"}, "downloads": -1, "filename": "PyAVM-0.1.1.zip", "has_sig": false, "md5_digest": "cc27efcc64ce7c486a39a5aac5cd0fb8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11724, "upload_time": "2011-05-08T22:37:06", "upload_time_iso_8601": "2011-05-08T22:37:06.124452Z", "url": "https://files.pythonhosted.org/packages/4c/dc/ba96d0c546d176b36bd0ce7ade6879f93ff5f60efc37e40ba14e0f0d018d/PyAVM-0.1.1.zip", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "ebc4e948a5105fe80e87bd37bfc286b2", "sha256": "85ae7bb5e45b684b9e1c65ba76209bf691b414b2200ef139088c5a8b44fd6a73"}, "downloads": -1, "filename": "PyAVM-0.1.2.tar.gz", "has_sig": false, "md5_digest": "ebc4e948a5105fe80e87bd37bfc286b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7911, "upload_time": "2011-05-09T01:07:56", "upload_time_iso_8601": "2011-05-09T01:07:56.940338Z", "url": "https://files.pythonhosted.org/packages/4e/ba/2a99f5bca8189279f2fa5eb310efee1dc2c803475abfee22a228a8fe431b/PyAVM-0.1.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "b51786382dae233cc83635591ddeb1e8", "sha256": "1a852f77e44b2b3b0ad47493e9cfde6d2c5ff63bf4ab982809174bb8dd4316cf"}, "downloads": -1, "filename": "PyAVM-0.1.2.zip", "has_sig": false, "md5_digest": "b51786382dae233cc83635591ddeb1e8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12319, "upload_time": "2011-05-09T01:07:57", "upload_time_iso_8601": "2011-05-09T01:07:57.657966Z", "url": "https://files.pythonhosted.org/packages/cf/54/6394a36cf20b5ef04fb380c1b0a1aac58410c349c65b11d72f4f8eb5afa1/PyAVM-0.1.2.zip", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f5720be21e3f8830e4c1180671d918ce", "sha256": "c2b320070dec77182f1d77d100bd47928ae1c54f96c08a079874dab6c5701188"}, "downloads": -1, "filename": "PyAVM-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f5720be21e3f8830e4c1180671d918ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7709, "upload_time": "2013-01-26T17:23:20", "upload_time_iso_8601": "2013-01-26T17:23:20.820288Z", "url": "https://files.pythonhosted.org/packages/7f/6c/f5cabef23a905b3ac4d1179d64c6c1764ade8afdfb2fa5cf5a3808117d31/PyAVM-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a562139c0379d79fe8c87ac557291644", "sha256": "fbf2e342f08f38c1498f9061f951b0a6d95470ed74518253577b3cfec6a37a03"}, "downloads": -1, "filename": "PyAVM-0.1.4.tar.gz", "has_sig": false, "md5_digest": "a562139c0379d79fe8c87ac557291644", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7926, "upload_time": "2013-01-26T17:22:51", "upload_time_iso_8601": "2013-01-26T17:22:51.689928Z", "url": "https://files.pythonhosted.org/packages/35/d7/066f643a46a948f02c1e454bb31753eb744e70b45598d70359b3cfa5a895/PyAVM-0.1.4.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "403a131e6063722907ad4fe4658494df", "sha256": "2be6513cbd8219e2c849e06ed18b2c31f0760517f55a5da7aa5a211f589a41ea"}, "downloads": -1, "filename": "PyAVM-0.9.0.tar.gz", "has_sig": false, "md5_digest": "403a131e6063722907ad4fe4658494df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 100145, "upload_time": "2013-04-21T09:58:17", "upload_time_iso_8601": "2013-04-21T09:58:17.768587Z", "url": "https://files.pythonhosted.org/packages/4e/0d/46d3a44e440df7480f98583c1abdd228a7ef1fe7a07b8c1a5f6d4ee55a73/PyAVM-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "db5eb5284c9d432d7aedb67ecbdf00b3", "sha256": "5b44dc29ee595849aed94af2db4fe670851a793713b1a3063bca2dee85aa415a"}, "downloads": -1, "filename": "PyAVM-0.9.1.tar.gz", "has_sig": false, "md5_digest": "db5eb5284c9d432d7aedb67ecbdf00b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 99461, "upload_time": "2013-04-21T11:22:42", "upload_time_iso_8601": "2013-04-21T11:22:42.696376Z", "url": "https://files.pythonhosted.org/packages/f9/fe/8d21143060dec8a3278b02fcbe4c7f2b9a483e1ef75b608b5a7c3cf28d8c/PyAVM-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "da9b19ba6f4ccafcccb644fbd998bade", "sha256": "4bfc4bcb820d239b09d1f9c5a4cd1a3e0fc63af71d96f884a020cb7cc0c800fa"}, "downloads": -1, "filename": "PyAVM-0.9.2.tar.gz", "has_sig": false, "md5_digest": "da9b19ba6f4ccafcccb644fbd998bade", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 101071, "upload_time": "2014-11-26T13:09:08", "upload_time_iso_8601": "2014-11-26T13:09:08.521437Z", "url": "https://files.pythonhosted.org/packages/85/56/85144e0b8747ae5678fea3bbf5269747aa9dd26053693438254f84479abc/PyAVM-0.9.2.tar.gz", "yanked": false}], "0.9.3": [{"comment_text": "", "digests": {"md5": "c8639b5f09e82192197c1992e4361f4f", "sha256": "1fe364233367885b2de5bcee81eb13414303c3c73348185ff7d6263c16b2c7d4"}, "downloads": -1, "filename": "PyAVM-0.9.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8639b5f09e82192197c1992e4361f4f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 377761, "upload_time": "2017-07-30T20:17:59", "upload_time_iso_8601": "2017-07-30T20:17:59.198083Z", "url": "https://files.pythonhosted.org/packages/6f/be/3296859eedef19cdb2857f855e349e2b7cccb1a7c4d7c50ae9ed7c04cb3e/PyAVM-0.9.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "87fdf3adfba350316122c8ae9f68aabf", "sha256": "ea90ddfbc3c8705f21ca24e205dc0208510905b5b69829db38c7d0e53928873a"}, "downloads": -1, "filename": "PyAVM-0.9.3.tar.gz", "has_sig": false, "md5_digest": "87fdf3adfba350316122c8ae9f68aabf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 220824, "upload_time": "2017-07-30T20:18:00", "upload_time_iso_8601": "2017-07-30T20:18:00.993394Z", "url": "https://files.pythonhosted.org/packages/90/d5/6baa5efffc59b626038e4eebdd4d70ae11d68eb5439cdd9cbd951910458b/PyAVM-0.9.3.tar.gz", "yanked": false}], "0.9.4": [{"comment_text": "", "digests": {"md5": "26d7e8bdab517cb0c39470fe0c7c696f", "sha256": "962331c5869fb6fa23e483e5760874262355579dc4c9cb5ff1d0288dc82d5102"}, "downloads": -1, "filename": "PyAVM-0.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26d7e8bdab517cb0c39470fe0c7c696f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 379385, "upload_time": "2017-08-05T15:43:23", "upload_time_iso_8601": "2017-08-05T15:43:23.314075Z", "url": "https://files.pythonhosted.org/packages/dc/5c/da82e7976856dbea5e3b79815e59c0614406601cc628dc2ded65fd9da4f1/PyAVM-0.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f5f34bfbf7c62b93a68b0fedbeff473", "sha256": "f298b864e5bc101ecbb0e46252e95e18a180ac28ba6ec362e63c12a7e914e386"}, "downloads": -1, "filename": "PyAVM-0.9.4.tar.gz", "has_sig": false, "md5_digest": "3f5f34bfbf7c62b93a68b0fedbeff473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221928, "upload_time": "2017-08-05T15:43:25", "upload_time_iso_8601": "2017-08-05T15:43:25.296971Z", "url": "https://files.pythonhosted.org/packages/b9/36/c5f3f0ea2b60f76201aa9ce1c42d221c67d2a5f9b6bb1c5c5e8ee9dfe9f5/PyAVM-0.9.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "26d7e8bdab517cb0c39470fe0c7c696f", "sha256": "962331c5869fb6fa23e483e5760874262355579dc4c9cb5ff1d0288dc82d5102"}, "downloads": -1, "filename": "PyAVM-0.9.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "26d7e8bdab517cb0c39470fe0c7c696f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 379385, "upload_time": "2017-08-05T15:43:23", "upload_time_iso_8601": "2017-08-05T15:43:23.314075Z", "url": "https://files.pythonhosted.org/packages/dc/5c/da82e7976856dbea5e3b79815e59c0614406601cc628dc2ded65fd9da4f1/PyAVM-0.9.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f5f34bfbf7c62b93a68b0fedbeff473", "sha256": "f298b864e5bc101ecbb0e46252e95e18a180ac28ba6ec362e63c12a7e914e386"}, "downloads": -1, "filename": "PyAVM-0.9.4.tar.gz", "has_sig": false, "md5_digest": "3f5f34bfbf7c62b93a68b0fedbeff473", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 221928, "upload_time": "2017-08-05T15:43:25", "upload_time_iso_8601": "2017-08-05T15:43:25.296971Z", "url": "https://files.pythonhosted.org/packages/b9/36/c5f3f0ea2b60f76201aa9ce1c42d221c67d2a5f9b6bb1c5c5e8ee9dfe9f5/PyAVM-0.9.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:09:31 2020"}