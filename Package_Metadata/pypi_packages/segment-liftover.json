{"info": {"author": "Bo Gao", "author_email": "kaye_gao@hotmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Bio-Informatics"], "description": "# segment_liftover\nConverting genome coordinates between different genome assemblies is a common task in bioinformatics. Services and tools such as UCSC Liftover, NCBI Remap and CrossMap are available to perform such conversion.\n\nWhen converting a genomic segment, those conversion tools will break the segment into smaller parts if the segment is not continuous in the new assembly. However, in some circumstances such as copy number analyses, where the quantitative representation of a genomic range takes precedence over base-specific representation, the integrity of a single segment needs to be kept.\n\nMoreover, all those tools are designed for single file processing, and offer nothing to facilitate batch processing. But in Bioinformatic studies, it is very often that people need to deal with hundreds and even thousands of files at a time. \n\n*segment_liftover* is a Python program that can convert segments between genome assemblies, without breaking them apart. Part of its functionality is based on re-conversion by locus approximation, in instances where a precise conversion of genomic positions fails.\n\nKey features:\n- converts continuous segments\n- performs approximate conversion when direct conversion fails\n- batch processing of any number of files\n- automatic folder traversal and file discovery\n- detailed logs\n- resuming from interruption\n- accept both segment (i.e. start => end) and probe (i.e., single position) data\n\n### Program dependency\n*segment_liftover* depends on the *UCSC Liftover program*, which can be found [here](https://genome-store.ucsc.edu/).\nPlease note that the UCSC Liftover is only free for non-commercial use. Despite the inconvenience of licensing, Liftover offers some very convenient features:\n- it is a stand-alone command-line tool\n- it can convert assemblies of any species, even between species\n- it runs locally and does not require network access\n\n## How to install\nThe easiest way is to install through pip:\n\n```\npip install segment_liftover\nsegment_liftover --help\n```\n\nAnother option is to copy ```segment_liftover/segmentLiftover.py``` and ```segment_liftover/chains/*``` from [github](https://github.com/baudisgroup/segment-liftover). Dependencies need to be installed manually.\n\n```\npython3 segmentLiftover.py --help\n```\n\n**Important: Add the UCSC ```liftOver``` program to your working directory, or use -l to specify its location.**\n\n\n## How to use\nSee the [manual](https://github.com/baudisgroup/segment-liftover/blob/master/manual.md) for details.\n\n### Quick start\n\n```\nsegment_liftover -l ./liftOver -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv -so seg.tsv\n```\n\n### Demo mode\n\n```\nsegment_liftover -l .liftOver --demo .\n```\n\nThis will copy a few example files to the current directory and run a quick conversion with default settings.\n\n### General Usage\n```\nUsage: segment_liftover [OPTIONS]\n\nOptions:\n  -i, --input_dir TEXT            The directory to start processing.\n  -o, --output_dir TEXT           The directory to write new files.\n  -c, --chain_file TEXT           Specify the chain file name.\n  -si, --segment_input_file TEXT  Specify the segment input file name.\n  -so, --segment_output_file TEXT\n                                  Specify the segment output file name.\n  -pi, --probe_input_file TEXT    Specify the probe input file name.\n  -po, --probe_output_file TEXT   Specify the probe output file name.\n  -l, --liftover TEXT             Specify the location of the UCSC liftover\n                                  program.\n  -t, --test_mode INTEGER         Only process a limited number of files.\n  -f, --file_indexing             Only generate the index file.\n  -x, --index_file FILENAME       Specify an index file containing file paths.\n  -m, --mapping_file FILENAME     Specify a pre-defined file of position\n                                  mappings.\n  --step_size INTEGER             The step size of approximate conversion (in\n                                  bases, default:400).\n  --range INTEGER                 The searching range of approximate\n                                  conversion (in kilo bases, default:10).\n  --beta FLOAT                    Parameter in quality control.\n  --no_approximate_conversion     Do not perform approximate conversion.\n  --new_segment_header TEXT...    Specify 4 new column names for new segment\n                                  files.\n  --new_probe_header TEXT...      Specify 3 new column names for new probe\n                                  files.\n  --resume TEXT...                Specify a index file and a progress file to\n                                  resume an interrupted job.\n  --demo TEXT                     Copy example files to a user defined\n                                  directory and run a demonstration.\n  --log_path TEXT                 Specify the directory to write logging\n                                  files.\n  --help                          Show this message and exit.\n```\n\nRequired options are:\n\n- ```-i, --input_dir TEXT```\n- ```-o, --output_dir TEXT```\n- ```-c, --chain_file TEXT```\n- either of both of ```-si, --segment_input_file TEXT``` and ```-pi, --probe_input_file TEXT```\n\n\n### The liftOver program\n\nBy default, *segment_liftover* looks system path for the *UCSC liftOver* program. It can also be manually specified with the ```-l``` option.\n\n### Start with your input file\n\n*segment_liftover* is designed to process a large number of files in one run.\n\n- It requires **_an input directory_**, and will traverse through all sub-directories to index all files matching **_the input file name_**.\n- It requires **_an output directory_**, and will keep the original directory structure in the output directory.\n- Segment and probe files are treated differently - therefore, you need to use different options to pass the input file name.\n- You can also create a list of input files to start. Please see [manual](https://github.com/baudisgroup/segment-liftover/blob/master/manual.md) for more details.\n- Regular expressions are supported for input names.\n\n### Input file format\nUse ```-si filename``` for segment file names. All files should:\n\n- be **tab separated**, without quoted values\n- have at least **4** columns as id, chromosome, start and end (names do not matter, order does).\n\nExtra columns will be copied over.\n\nAn example:\n\n```\nid\tchro\tstart\tstop\tvalue_1\tvalue_2\nGSM378022\t1\t775852\t143752373\t0.025\t9992\nGSM378022\t1\t143782024\t214220966\t0.1607\t6381\nGSM378022\t2\t88585000\t144628991\t0.0131\t4256\nGSM378022\t2\t144635510\t146290468\t0.1432\t146\nGSM378022\t3\t48603\t8994748\t0.0544\t1469\n```\n\nUse ```-pi filename``` for probe file names. All files should:\n\n- be **tab separated**, without quoted values\n- have at least **3** columns as id, chromosome and position (names do not matter, order does).\n\nExtra columns will be copied over.\n\nAn example:\n\n```\nPROBEID\tCHRO\tBASEPOS\tVALUE\nID_2_1\t1\t51599\t-0.6846\nID_3_2\t1\t51672\t-0.2546\nID_4_3\t1\t51687\t0.0833\nID_5_4\t1\t52016\t-0.5201\nID_6_5\t1\t52784\t0.1997\nID_7_6\t1\t52801\t-0.3800\nID_8_7\t1\t62568\t-0.2435\nID_9_8\t1\t62640\t0.3516\nID_10_9\t1\t72034\t-0.5687\n```\n\n### Chromosome names\n\nTwo formats are supported: chr10 or 10.\n\n### Chain files\nA chain file is required by the _UCSC liftOver_ program to convert from one assembly to another, therefore it's also **required** by *segment_liftover*.\n\nCommon chain files for human genome editions (from UCSC) are provider as part of *segment_liftover*. Please check the [manual](https://github.com/baudisgroup/segment-liftover/blob/master/manual.md) for details.\n\nOther chain files can be accessed [at the UCSC download area](http://hgdownload.cse.ucsc.edu/downloads.html)\n\n### Output files\n- The file structure of the input directory will be kept in output directory.\n- Output files can be renamed with ```-so, --segment_output_file TEXT``` or ```-po, --probe_output_file TEXT```\n\n\n### Log files\n\nBy default, a ```log/``` directory is created in the output directory after the conversion.\n```\n./logs/parameters.log\tThe command history and parameter settings.\n./logs/fileList.log    The indexing file from traversing input_dir.\n./logs/general.log    The main log file, keeps records for all the works done and errors encountered.\n./logs/progress.log    A list of successfully processed files.\n./logs/unconverted.log    A list of all positions that could not be lifted and re-converted.\n./logs/approximate_conversion.log    A list of all the approximately converted positions (when LiftOver fails).\n./logs/failed_files.log\t\tA list of files failed to be converted.\n```\n\nIf *segment_liftover* does not work as expected, you can check **general.log** for execution details.\n\nIf you are interested in unique re-converted or unconverted results, you can check **approximate_conversion.log**.\n\nIf you want to get information of rejection or conversion result of a specific file, you can check **unconverted.log**.\n\n### Overwriting behavior\nThe script **WILL overwrite ```output_dir```**\n\n### Python dependencies\nThe script is developed in python3.6\n\nPackages: click6.7, pandas0.20.1\n\n## Advanced use\n\n### Start from a file\nWith the **index_file** option, you can provide a file containing files you want to process. One file name per line, using the file's full path.\n\nAfter each run, a **fileList.log** file can be found in **./logs/**, which can be used as quick start for next time. You can also generate a _file list_ using the following command:\n\n```\n>segment_liftover -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv -x ./myfilelist.txt\n```\n\n### Reuse approximate conversion results\nWith the **--mapping_file** option, you can reuse a previously generated log file to speed up processing.\n\nAfter each run, a **approximate_conversion.log** file can be found in **./logs/**.\n\n### Specify parameters of approximate conversion\nWith ```--step_size``` and ```--range```, you can control the resolution and scope of searching for the closest liftable position when a position can not be lifted. The default values are *500* (bases) and *10* (kilo-bases).\n\n<!--### Choose good parameters\n-->\n### Resume from interruption\nIf the execution of the script is interrupted, it can be resumed using **--resume** as following:\n\n```\n>segment_liftover --resume ./logs/fileList.log ./logs/progress.log -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv \n```\n\n### Parallel processing\n*segment_liftover* does not support multiprocessing directly, but very tasks can be divided into smaller tasks and run parallel with ease.\n\n- First, generate a **fileList** as instructed in *Start from a file* section.\n- Then (optional), shuffle the lines in the **fileList**.\n- Next, split **fileList** into smaller files and put them in separated folders.\n- Finally, run *lift_over* with option **--index_file** in each folder.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/baudisgroup/segment-liftover", "keywords": "segment probe genome coordinate liftover", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "segment-liftover", "package_url": "https://pypi.org/project/segment-liftover/", "platform": "", "project_url": "https://pypi.org/project/segment-liftover/", "project_urls": {"Homepage": "https://github.com/baudisgroup/segment-liftover"}, "release_url": "https://pypi.org/project/segment-liftover/0.955/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Convert segments between genomic assemblies in whole.", "version": "0.955", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>segment_liftover</h1>\n<p>Converting genome coordinates between different genome assemblies is a common task in bioinformatics. Services and tools such as UCSC Liftover, NCBI Remap and CrossMap are available to perform such conversion.</p>\n<p>When converting a genomic segment, those conversion tools will break the segment into smaller parts if the segment is not continuous in the new assembly. However, in some circumstances such as copy number analyses, where the quantitative representation of a genomic range takes precedence over base-specific representation, the integrity of a single segment needs to be kept.</p>\n<p>Moreover, all those tools are designed for single file processing, and offer nothing to facilitate batch processing. But in Bioinformatic studies, it is very often that people need to deal with hundreds and even thousands of files at a time.</p>\n<p><em>segment_liftover</em> is a Python program that can convert segments between genome assemblies, without breaking them apart. Part of its functionality is based on re-conversion by locus approximation, in instances where a precise conversion of genomic positions fails.</p>\n<p>Key features:</p>\n<ul>\n<li>converts continuous segments</li>\n<li>performs approximate conversion when direct conversion fails</li>\n<li>batch processing of any number of files</li>\n<li>automatic folder traversal and file discovery</li>\n<li>detailed logs</li>\n<li>resuming from interruption</li>\n<li>accept both segment (i.e. start =&gt; end) and probe (i.e., single position) data</li>\n</ul>\n<h3>Program dependency</h3>\n<p><em>segment_liftover</em> depends on the <em>UCSC Liftover program</em>, which can be found <a href=\"https://genome-store.ucsc.edu/\" rel=\"nofollow\">here</a>.\nPlease note that the UCSC Liftover is only free for non-commercial use. Despite the inconvenience of licensing, Liftover offers some very convenient features:</p>\n<ul>\n<li>it is a stand-alone command-line tool</li>\n<li>it can convert assemblies of any species, even between species</li>\n<li>it runs locally and does not require network access</li>\n</ul>\n<h2>How to install</h2>\n<p>The easiest way is to install through pip:</p>\n<pre><code>pip install segment_liftover\nsegment_liftover --help\n</code></pre>\n<p>Another option is to copy <code>segment_liftover/segmentLiftover.py</code> and <code>segment_liftover/chains/*</code> from <a href=\"https://github.com/baudisgroup/segment-liftover\" rel=\"nofollow\">github</a>. Dependencies need to be installed manually.</p>\n<pre><code>python3 segmentLiftover.py --help\n</code></pre>\n<p><strong>Important: Add the UCSC <code>liftOver</code> program to your working directory, or use -l to specify its location.</strong></p>\n<h2>How to use</h2>\n<p>See the <a href=\"https://github.com/baudisgroup/segment-liftover/blob/master/manual.md\" rel=\"nofollow\">manual</a> for details.</p>\n<h3>Quick start</h3>\n<pre><code>segment_liftover -l ./liftOver -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv -so seg.tsv\n</code></pre>\n<h3>Demo mode</h3>\n<pre><code>segment_liftover -l .liftOver --demo .\n</code></pre>\n<p>This will copy a few example files to the current directory and run a quick conversion with default settings.</p>\n<h3>General Usage</h3>\n<pre><code>Usage: segment_liftover [OPTIONS]\n\nOptions:\n  -i, --input_dir TEXT            The directory to start processing.\n  -o, --output_dir TEXT           The directory to write new files.\n  -c, --chain_file TEXT           Specify the chain file name.\n  -si, --segment_input_file TEXT  Specify the segment input file name.\n  -so, --segment_output_file TEXT\n                                  Specify the segment output file name.\n  -pi, --probe_input_file TEXT    Specify the probe input file name.\n  -po, --probe_output_file TEXT   Specify the probe output file name.\n  -l, --liftover TEXT             Specify the location of the UCSC liftover\n                                  program.\n  -t, --test_mode INTEGER         Only process a limited number of files.\n  -f, --file_indexing             Only generate the index file.\n  -x, --index_file FILENAME       Specify an index file containing file paths.\n  -m, --mapping_file FILENAME     Specify a pre-defined file of position\n                                  mappings.\n  --step_size INTEGER             The step size of approximate conversion (in\n                                  bases, default:400).\n  --range INTEGER                 The searching range of approximate\n                                  conversion (in kilo bases, default:10).\n  --beta FLOAT                    Parameter in quality control.\n  --no_approximate_conversion     Do not perform approximate conversion.\n  --new_segment_header TEXT...    Specify 4 new column names for new segment\n                                  files.\n  --new_probe_header TEXT...      Specify 3 new column names for new probe\n                                  files.\n  --resume TEXT...                Specify a index file and a progress file to\n                                  resume an interrupted job.\n  --demo TEXT                     Copy example files to a user defined\n                                  directory and run a demonstration.\n  --log_path TEXT                 Specify the directory to write logging\n                                  files.\n  --help                          Show this message and exit.\n</code></pre>\n<p>Required options are:</p>\n<ul>\n<li><code>-i, --input_dir TEXT</code></li>\n<li><code>-o, --output_dir TEXT</code></li>\n<li><code>-c, --chain_file TEXT</code></li>\n<li>either of both of <code>-si, --segment_input_file TEXT</code> and <code>-pi, --probe_input_file TEXT</code></li>\n</ul>\n<h3>The liftOver program</h3>\n<p>By default, <em>segment_liftover</em> looks system path for the <em>UCSC liftOver</em> program. It can also be manually specified with the <code>-l</code> option.</p>\n<h3>Start with your input file</h3>\n<p><em>segment_liftover</em> is designed to process a large number of files in one run.</p>\n<ul>\n<li>It requires <strong><em>an input directory</em></strong>, and will traverse through all sub-directories to index all files matching <strong><em>the input file name</em></strong>.</li>\n<li>It requires <strong><em>an output directory</em></strong>, and will keep the original directory structure in the output directory.</li>\n<li>Segment and probe files are treated differently - therefore, you need to use different options to pass the input file name.</li>\n<li>You can also create a list of input files to start. Please see <a href=\"https://github.com/baudisgroup/segment-liftover/blob/master/manual.md\" rel=\"nofollow\">manual</a> for more details.</li>\n<li>Regular expressions are supported for input names.</li>\n</ul>\n<h3>Input file format</h3>\n<p>Use <code>-si filename</code> for segment file names. All files should:</p>\n<ul>\n<li>be <strong>tab separated</strong>, without quoted values</li>\n<li>have at least <strong>4</strong> columns as id, chromosome, start and end (names do not matter, order does).</li>\n</ul>\n<p>Extra columns will be copied over.</p>\n<p>An example:</p>\n<pre><code>id\tchro\tstart\tstop\tvalue_1\tvalue_2\nGSM378022\t1\t775852\t143752373\t0.025\t9992\nGSM378022\t1\t143782024\t214220966\t0.1607\t6381\nGSM378022\t2\t88585000\t144628991\t0.0131\t4256\nGSM378022\t2\t144635510\t146290468\t0.1432\t146\nGSM378022\t3\t48603\t8994748\t0.0544\t1469\n</code></pre>\n<p>Use <code>-pi filename</code> for probe file names. All files should:</p>\n<ul>\n<li>be <strong>tab separated</strong>, without quoted values</li>\n<li>have at least <strong>3</strong> columns as id, chromosome and position (names do not matter, order does).</li>\n</ul>\n<p>Extra columns will be copied over.</p>\n<p>An example:</p>\n<pre><code>PROBEID\tCHRO\tBASEPOS\tVALUE\nID_2_1\t1\t51599\t-0.6846\nID_3_2\t1\t51672\t-0.2546\nID_4_3\t1\t51687\t0.0833\nID_5_4\t1\t52016\t-0.5201\nID_6_5\t1\t52784\t0.1997\nID_7_6\t1\t52801\t-0.3800\nID_8_7\t1\t62568\t-0.2435\nID_9_8\t1\t62640\t0.3516\nID_10_9\t1\t72034\t-0.5687\n</code></pre>\n<h3>Chromosome names</h3>\n<p>Two formats are supported: chr10 or 10.</p>\n<h3>Chain files</h3>\n<p>A chain file is required by the <em>UCSC liftOver</em> program to convert from one assembly to another, therefore it's also <strong>required</strong> by <em>segment_liftover</em>.</p>\n<p>Common chain files for human genome editions (from UCSC) are provider as part of <em>segment_liftover</em>. Please check the <a href=\"https://github.com/baudisgroup/segment-liftover/blob/master/manual.md\" rel=\"nofollow\">manual</a> for details.</p>\n<p>Other chain files can be accessed <a href=\"http://hgdownload.cse.ucsc.edu/downloads.html\" rel=\"nofollow\">at the UCSC download area</a></p>\n<h3>Output files</h3>\n<ul>\n<li>The file structure of the input directory will be kept in output directory.</li>\n<li>Output files can be renamed with <code>-so, --segment_output_file TEXT</code> or <code>-po, --probe_output_file TEXT</code></li>\n</ul>\n<h3>Log files</h3>\n<p>By default, a <code>log/</code> directory is created in the output directory after the conversion.</p>\n<pre><code>./logs/parameters.log\tThe command history and parameter settings.\n./logs/fileList.log    The indexing file from traversing input_dir.\n./logs/general.log    The main log file, keeps records for all the works done and errors encountered.\n./logs/progress.log    A list of successfully processed files.\n./logs/unconverted.log    A list of all positions that could not be lifted and re-converted.\n./logs/approximate_conversion.log    A list of all the approximately converted positions (when LiftOver fails).\n./logs/failed_files.log\t\tA list of files failed to be converted.\n</code></pre>\n<p>If <em>segment_liftover</em> does not work as expected, you can check <strong>general.log</strong> for execution details.</p>\n<p>If you are interested in unique re-converted or unconverted results, you can check <strong>approximate_conversion.log</strong>.</p>\n<p>If you want to get information of rejection or conversion result of a specific file, you can check <strong>unconverted.log</strong>.</p>\n<h3>Overwriting behavior</h3>\n<p>The script <strong>WILL overwrite <code>output_dir</code></strong></p>\n<h3>Python dependencies</h3>\n<p>The script is developed in python3.6</p>\n<p>Packages: click6.7, pandas0.20.1</p>\n<h2>Advanced use</h2>\n<h3>Start from a file</h3>\n<p>With the <strong>index_file</strong> option, you can provide a file containing files you want to process. One file name per line, using the file's full path.</p>\n<p>After each run, a <strong>fileList.log</strong> file can be found in <strong>./logs/</strong>, which can be used as quick start for next time. You can also generate a <em>file list</em> using the following command:</p>\n<pre><code>&gt;segment_liftover -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv -x ./myfilelist.txt\n</code></pre>\n<h3>Reuse approximate conversion results</h3>\n<p>With the <strong>--mapping_file</strong> option, you can reuse a previously generated log file to speed up processing.</p>\n<p>After each run, a <strong>approximate_conversion.log</strong> file can be found in <strong>./logs/</strong>.</p>\n<h3>Specify parameters of approximate conversion</h3>\n<p>With <code>--step_size</code> and <code>--range</code>, you can control the resolution and scope of searching for the closest liftable position when a position can not be lifted. The default values are <em>500</em> (bases) and <em>10</em> (kilo-bases).</p>\n\n<h3>Resume from interruption</h3>\n<p>If the execution of the script is interrupted, it can be resumed using <strong>--resume</strong> as following:</p>\n<pre><code>&gt;segment_liftover --resume ./logs/fileList.log ./logs/progress.log -i /Volumes/data/hg18/ -o /Volumes/data/hg19/ -c hg18ToHg19 -si segments.tsv \n</code></pre>\n<h3>Parallel processing</h3>\n<p><em>segment_liftover</em> does not support multiprocessing directly, but very tasks can be divided into smaller tasks and run parallel with ease.</p>\n<ul>\n<li>First, generate a <strong>fileList</strong> as instructed in <em>Start from a file</em> section.</li>\n<li>Then (optional), shuffle the lines in the <strong>fileList</strong>.</li>\n<li>Next, split <strong>fileList</strong> into smaller files and put them in separated folders.</li>\n<li>Finally, run <em>lift_over</em> with option <strong>--index_file</strong> in each folder.</li>\n</ul>\n\n          </div>"}, "last_serial": 5430185, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "5ddce3eecf17787458b1dd8c84c2d854", "sha256": "728f47cc3230cc43e042d9c4d12023eb5270da2d18529482b313f02638859e5d"}, "downloads": -1, "filename": "segment_liftover-0.9-py3.6.egg", "has_sig": false, "md5_digest": "5ddce3eecf17787458b1dd8c84c2d854", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 2207513, "upload_time": "2017-12-19T15:06:16", "upload_time_iso_8601": "2017-12-19T15:06:16.867517Z", "url": "https://files.pythonhosted.org/packages/c1/96/e88e0b970318671cc0e3279780c2a45d10a382f721b253fa564e11c945c7/segment_liftover-0.9-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a60229fb1fedd03787813da82d8783bf", "sha256": "2a86ada8dbb997bccc6903bee67433a716a02ac41a74c89937a56dd0348755de"}, "downloads": -1, "filename": "segment_liftover-0.9.tar.gz", "has_sig": false, "md5_digest": "a60229fb1fedd03787813da82d8783bf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2205747, "upload_time": "2017-12-19T14:55:59", "upload_time_iso_8601": "2017-12-19T14:55:59.652809Z", "url": "https://files.pythonhosted.org/packages/27/c4/a21dad39618b34e6d8c70e01856fb446dc386942fb604fb60b60dfa5f167/segment_liftover-0.9.tar.gz", "yanked": false}], "0.91": [{"comment_text": "", "digests": {"md5": "9a732b5eb265f0fa93bc5bf409be0910", "sha256": "4f44e3c9aeaeaf2ffe0aaff9c107149e98a45da1509c3491442cf6cfc9d82cf3"}, "downloads": -1, "filename": "segment_liftover-0.91.tar.gz", "has_sig": false, "md5_digest": "9a732b5eb265f0fa93bc5bf409be0910", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2205771, "upload_time": "2017-12-19T15:15:20", "upload_time_iso_8601": "2017-12-19T15:15:20.688960Z", "url": "https://files.pythonhosted.org/packages/df/33/c39a074e3f2700265fe600c8156cc7d5592988a9195cffcace6039cea7b5/segment_liftover-0.91.tar.gz", "yanked": false}], "0.92": [{"comment_text": "", "digests": {"md5": "d3e720b76005350076834ff5cf8a91ec", "sha256": "14ea8d28d9bcccad72293c497622452a780bda3031e8c869687a5240e12f5d0c"}, "downloads": -1, "filename": "segment_liftover-0.92.tar.gz", "has_sig": false, "md5_digest": "d3e720b76005350076834ff5cf8a91ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206019, "upload_time": "2017-12-19T15:53:24", "upload_time_iso_8601": "2017-12-19T15:53:24.000059Z", "url": "https://files.pythonhosted.org/packages/e0/a6/5405650cdf8a3974f7d886faa89de017d4d20ca57e9338b93ba8f1e4b9f4/segment_liftover-0.92.tar.gz", "yanked": false}], "0.93": [{"comment_text": "", "digests": {"md5": "9decf252c85ae362f50b55d0dc4d4751", "sha256": "0b38ef2b29bc459c351318d2b76b125e8ca7680144311a611b24a2c23dac30f8"}, "downloads": -1, "filename": "segment_liftover-0.93.tar.gz", "has_sig": false, "md5_digest": "9decf252c85ae362f50b55d0dc4d4751", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206032, "upload_time": "2017-12-20T12:40:20", "upload_time_iso_8601": "2017-12-20T12:40:20.800900Z", "url": "https://files.pythonhosted.org/packages/df/22/63540a0befcb1083211d6c07189a3a9747fdc45dbcb84ee81e004e4edb51/segment_liftover-0.93.tar.gz", "yanked": false}], "0.94": [{"comment_text": "", "digests": {"md5": "a5324a3367fa1880e1e93f56f12decd9", "sha256": "134c633bad0a2053d3e4bf437e008b16dcfcc00b6c8d173bfc3189c549dbb3fb"}, "downloads": -1, "filename": "segment_liftover-0.94.tar.gz", "has_sig": false, "md5_digest": "a5324a3367fa1880e1e93f56f12decd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206147, "upload_time": "2018-01-19T08:28:06", "upload_time_iso_8601": "2018-01-19T08:28:06.521781Z", "url": "https://files.pythonhosted.org/packages/c2/4f/f82a8d204b6e0c39e91837569df49b119c09511508d7c0334ad82c1bf273/segment_liftover-0.94.tar.gz", "yanked": false}], "0.941": [{"comment_text": "", "digests": {"md5": "3bc7d365741164bd435bf88f4d1b55c5", "sha256": "5efe100bc263e89e5898d50225bd9c67704e53f2a56e2bfb128f15de2513531d"}, "downloads": -1, "filename": "segment_liftover-0.941.tar.gz", "has_sig": false, "md5_digest": "3bc7d365741164bd435bf88f4d1b55c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206163, "upload_time": "2018-01-19T08:45:40", "upload_time_iso_8601": "2018-01-19T08:45:40.841790Z", "url": "https://files.pythonhosted.org/packages/2c/47/fb1db03d8fc45871dbae3ba3e0625d139aa99fc36bef5fc060ab07908ea2/segment_liftover-0.941.tar.gz", "yanked": false}], "0.942": [{"comment_text": "", "digests": {"md5": "e37ad1adce7d58f1ce3a4d93dfe3eaa7", "sha256": "66b4cfeeea251f6ca17c311f7f2cb8c02e24ec7d5c4163570317cd44a0572323"}, "downloads": -1, "filename": "segment_liftover-0.942.tar.gz", "has_sig": false, "md5_digest": "e37ad1adce7d58f1ce3a4d93dfe3eaa7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206178, "upload_time": "2018-01-19T09:41:36", "upload_time_iso_8601": "2018-01-19T09:41:36.293578Z", "url": "https://files.pythonhosted.org/packages/cb/cc/342f43658542b61b9aaaad88ce141f73ea48374dcc45b25300663874b79f/segment_liftover-0.942.tar.gz", "yanked": false}], "0.943": [{"comment_text": "", "digests": {"md5": "fb34713ac4e786fc6f9f5896028fdc69", "sha256": "9caa8d2418011b146fc52e8757e2ebcb3358f1210f5cf9e2d121366ce602e751"}, "downloads": -1, "filename": "segment_liftover-0.943.tar.gz", "has_sig": false, "md5_digest": "fb34713ac4e786fc6f9f5896028fdc69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206713, "upload_time": "2018-01-31T11:22:53", "upload_time_iso_8601": "2018-01-31T11:22:53.196383Z", "url": "https://files.pythonhosted.org/packages/88/11/bbcbe5959283acf464342b43f376ea3df7a1a7296dc0c3fb575d4b8218f2/segment_liftover-0.943.tar.gz", "yanked": false}], "0.944": [{"comment_text": "", "digests": {"md5": "3c338bfed6b6a7deb6dea362ff9e3486", "sha256": "56d48609e8a570e455114f7999b0bf07311880e83fa0d196d1e4a442d64dd1d0"}, "downloads": -1, "filename": "segment_liftover-0.944.tar.gz", "has_sig": false, "md5_digest": "3c338bfed6b6a7deb6dea362ff9e3486", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206727, "upload_time": "2018-02-01T10:09:36", "upload_time_iso_8601": "2018-02-01T10:09:36.834768Z", "url": "https://files.pythonhosted.org/packages/cf/a7/5de94f4bc98c146fdac06f1c659f2942ef33f89c4fc24c92ec35e24380b8/segment_liftover-0.944.tar.gz", "yanked": false}], "0.945": [{"comment_text": "", "digests": {"md5": "1bc4f832836f145edc3c7be75a6ef1f1", "sha256": "38d11a565f813393d0476fc70804a3e3fc33a5c31247a34f888eb4790a763a18"}, "downloads": -1, "filename": "segment_liftover-0.945.tar.gz", "has_sig": false, "md5_digest": "1bc4f832836f145edc3c7be75a6ef1f1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208425, "upload_time": "2018-02-02T12:14:23", "upload_time_iso_8601": "2018-02-02T12:14:23.863624Z", "url": "https://files.pythonhosted.org/packages/8d/10/ce264210a6f8540383f73081383be1c9c24dcfd2f8ec00874d772a72c637/segment_liftover-0.945.tar.gz", "yanked": false}], "0.946": [{"comment_text": "", "digests": {"md5": "873bcb41e58039b70681d0cd00c642ea", "sha256": "fa2c5578b5c20529723098ef5253d08e7a356f194bfd7ca1413452279b46c87f"}, "downloads": -1, "filename": "segment_liftover-0.946.tar.gz", "has_sig": false, "md5_digest": "873bcb41e58039b70681d0cd00c642ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208599, "upload_time": "2018-02-08T16:20:04", "upload_time_iso_8601": "2018-02-08T16:20:04.763445Z", "url": "https://files.pythonhosted.org/packages/96/c4/55e7d32b13acc65355bf4654b3f26328c35bb04e90c906f945f6f5e1314c/segment_liftover-0.946.tar.gz", "yanked": false}], "0.947": [{"comment_text": "", "digests": {"md5": "17a54613b6e02e58f172d877d8f0f1c3", "sha256": "727170f2fc30b589d3f1dfaf1081842ff34f8a9255021bf0735a8c6323b18e1d"}, "downloads": -1, "filename": "segment_liftover-0.947.tar.gz", "has_sig": false, "md5_digest": "17a54613b6e02e58f172d877d8f0f1c3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208612, "upload_time": "2018-02-21T14:52:14", "upload_time_iso_8601": "2018-02-21T14:52:14.061468Z", "url": "https://files.pythonhosted.org/packages/cd/d9/14cedfc9d2b4ccfa240d997a7de00f0149f30079a0dea794c598bfbe0463/segment_liftover-0.947.tar.gz", "yanked": false}], "0.948": [{"comment_text": "", "digests": {"md5": "a557eea1b60a60d022bcabb3f2093e29", "sha256": "10b4ec470b5c17678c454a62a5a745c133ce0528db8a1c843acdc25feeba642c"}, "downloads": -1, "filename": "segment_liftover-0.948.tar.gz", "has_sig": false, "md5_digest": "a557eea1b60a60d022bcabb3f2093e29", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208615, "upload_time": "2018-03-01T15:28:17", "upload_time_iso_8601": "2018-03-01T15:28:17.804030Z", "url": "https://files.pythonhosted.org/packages/3f/8e/f41e6ff48fe673dfe876e47742fa14879c17d3909a91a7426691e555d7cc/segment_liftover-0.948.tar.gz", "yanked": false}], "0.949": [{"comment_text": "", "digests": {"md5": "850a77a2fcee77ff575872e1bcf4bf70", "sha256": "da7c59e23c2f2b3c5b63cfa32fa6254f082afdf5dbba8f02026d3f64c587bb77"}, "downloads": -1, "filename": "segment_liftover-0.949.tar.gz", "has_sig": false, "md5_digest": "850a77a2fcee77ff575872e1bcf4bf70", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208724, "upload_time": "2018-03-12T15:49:05", "upload_time_iso_8601": "2018-03-12T15:49:05.785079Z", "url": "https://files.pythonhosted.org/packages/5c/d9/1ba7547244ccd8c5524eb20b32fd503c62a9397bd6026caca126093d92b4/segment_liftover-0.949.tar.gz", "yanked": false}], "0.94a0": [{"comment_text": "", "digests": {"md5": "4137e47bbd6610ada9173d341be7e9bc", "sha256": "1891f74ebc1bf6ea2c70f2bca1818eaf53d98acc227379a2f1f473a921bffd8f"}, "downloads": -1, "filename": "segment_liftover-0.94a0.tar.gz", "has_sig": false, "md5_digest": "4137e47bbd6610ada9173d341be7e9bc", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2206173, "upload_time": "2018-01-19T08:39:32", "upload_time_iso_8601": "2018-01-19T08:39:32.977205Z", "url": "https://files.pythonhosted.org/packages/be/be/d9428f0c7d0462866927475c232326eaa34c9eee697467d601a8d208e2d7/segment_liftover-0.94a0.tar.gz", "yanked": false}], "0.950": [{"comment_text": "", "digests": {"md5": "8b7087350cccdf8516e3dbaab494a046", "sha256": "889d63a736dcb4f8510f3005a0120e7fa3bb2d6ec67c73629d3205519ab75722"}, "downloads": -1, "filename": "segment_liftover-0.950.tar.gz", "has_sig": false, "md5_digest": "8b7087350cccdf8516e3dbaab494a046", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2208768, "upload_time": "2018-05-30T14:58:21", "upload_time_iso_8601": "2018-05-30T14:58:21.903338Z", "url": "https://files.pythonhosted.org/packages/fa/75/804943f3b4b1722a27d1ddea75d6506d2209fc0d15bb06f43d08a187a65a/segment_liftover-0.950.tar.gz", "yanked": false}], "0.951": [{"comment_text": "", "digests": {"md5": "e791187cb9a489fdefca8e222e43b834", "sha256": "fe3d3ab5844faa8228cf3fdf7bcaae15efff1d0361843ee6b344287c96f0ca0b"}, "downloads": -1, "filename": "segment_liftover-0.951.tar.gz", "has_sig": false, "md5_digest": "e791187cb9a489fdefca8e222e43b834", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2372815, "upload_time": "2018-05-30T15:09:19", "upload_time_iso_8601": "2018-05-30T15:09:19.904888Z", "url": "https://files.pythonhosted.org/packages/b4/bd/9aecd724826a7b4a8e44c8507b390460c4442ecbf07aa418a8488ec13563/segment_liftover-0.951.tar.gz", "yanked": false}], "0.952": [{"comment_text": "", "digests": {"md5": "88da287a9f36dd00affe67fb5ad8024b", "sha256": "5e029b4e6f763a853116478b7e8fce76fe170211cb1c3317f08811c4e48b2d21"}, "downloads": -1, "filename": "segment_liftover-0.952.tar.gz", "has_sig": false, "md5_digest": "88da287a9f36dd00affe67fb5ad8024b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2372818, "upload_time": "2018-09-19T09:18:10", "upload_time_iso_8601": "2018-09-19T09:18:10.688475Z", "url": "https://files.pythonhosted.org/packages/f8/e0/632cd11ad1bf1f7963c440c370b515cdbc843eb5c7a03c6003b10680aa8a/segment_liftover-0.952.tar.gz", "yanked": false}], "0.953": [{"comment_text": "", "digests": {"md5": "e79bb092fbc595842136b63995713662", "sha256": "42174f60c894076c8d32cb84e4406421196c043e36ec5d2c05e18f159a5e4e18"}, "downloads": -1, "filename": "segment_liftover-0.953.tar.gz", "has_sig": false, "md5_digest": "e79bb092fbc595842136b63995713662", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2372926, "upload_time": "2019-06-12T10:33:00", "upload_time_iso_8601": "2019-06-12T10:33:00.471426Z", "url": "https://files.pythonhosted.org/packages/8b/47/7c1e0f276e0af57796aa8c3e017f1c919c6566c424a954d19a9d95c90cdf/segment_liftover-0.953.tar.gz", "yanked": false}], "0.954": [{"comment_text": "", "digests": {"md5": "c97a0c4e5bc9078b077005fdbaccc157", "sha256": "b82b47b94defb70ea850b30963dc3739dd3ac98cdbe70018111710bf26ceda9f"}, "downloads": -1, "filename": "segment_liftover-0.954.tar.gz", "has_sig": false, "md5_digest": "c97a0c4e5bc9078b077005fdbaccc157", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2372980, "upload_time": "2019-06-12T10:37:07", "upload_time_iso_8601": "2019-06-12T10:37:07.883484Z", "url": "https://files.pythonhosted.org/packages/2f/f2/3b997196a532e06028b8726d65eca5c20868009c879f133393bf4107a1c3/segment_liftover-0.954.tar.gz", "yanked": false}], "0.955": [{"comment_text": "", "digests": {"md5": "0a501d42cbc685357b818ffc672416d0", "sha256": "63735896f2371fa0f7b6dcc1a28c7f2366ba7006d8220ea4f02b3f9ae081d94e"}, "downloads": -1, "filename": "segment_liftover-0.955.tar.gz", "has_sig": false, "md5_digest": "0a501d42cbc685357b818ffc672416d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2373824, "upload_time": "2019-06-21T10:47:34", "upload_time_iso_8601": "2019-06-21T10:47:34.238799Z", "url": "https://files.pythonhosted.org/packages/2e/6c/4fd84f371f784b42bb5e830dd17453ceebe1a872139dc573759135ff1b8a/segment_liftover-0.955.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0a501d42cbc685357b818ffc672416d0", "sha256": "63735896f2371fa0f7b6dcc1a28c7f2366ba7006d8220ea4f02b3f9ae081d94e"}, "downloads": -1, "filename": "segment_liftover-0.955.tar.gz", "has_sig": false, "md5_digest": "0a501d42cbc685357b818ffc672416d0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2373824, "upload_time": "2019-06-21T10:47:34", "upload_time_iso_8601": "2019-06-21T10:47:34.238799Z", "url": "https://files.pythonhosted.org/packages/2e/6c/4fd84f371f784b42bb5e830dd17453ceebe1a872139dc573759135ff1b8a/segment_liftover-0.955.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:43 2020"}