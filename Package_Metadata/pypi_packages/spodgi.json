{"info": {"author": "Jerven Bolleman", "author_email": "me@jerven.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# SpOdgi\n\n[![PyPI version](https://badge.fury.io/py/spodgi.svg)](https://badge.fury.io/py/spodgi)\n\nUse a general graph query language SPARQL to investigate genome variation graphs!\n\nCurrently it exposes any [Odgi](https://github.com/vgteam/odgi) genome variation graph via SPARQL a W3C standard query language. At the moment this is read only mode, and one can not modify the graph using SPARQL update yet.\n\n# Benefit\n\nAny Odgi file is now a SPARQL capable database! No translation or extra storage required.\nReady for use by [FAIR accessors](https://peerj.com/articles/cs-110/).\n\n# Help wanted\n\nThis is a hobby for me, but could be very useful for others so please join and hack on this ;)\n\nI am especially in need of current best practices for packaging and testing of code in python. There is a `setup.py` but it is rough and probably needs a lot of work.\n\n# How to run\n\nYou need to have Odgi build locally and added it's pybind module directory to your PYTHONPATH. If you work like me it would be checked out in `~/git/odgi` and then you can use the env.sh script\n\nYou need to have an Odgi file. So conversion from GFA\nneeds to be done using `odgi build -g test/t.gfa -o test/o.odgi`\n\n## How to run with docker\n\nThere is a Docker file in `docker/`. \nWhich you can build with \n\n```bash\ndocker build -t spodgi docker/\n# or podman\ndocker build -t spodgi docker/\n```\nThen run interactivily with\n```\ndocker run -it spodgi\n```\n\n# Running a SPARQL query on a Odgi\n\n```bash\n./sparql_odgi.py  test/t.odgi 'ASK {<http://example.org/node/1> a <http://biohackathon.org/resource/vg#Node>}'\n```\n\nFinding the nodes with sequences that are longer than 5 nucleotides\n\n```bash\n./sparql_odgi.py  test/t.odgi 'PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> SELECT ?seq WHERE {?x rdf:value ?seq . FILTER(strlen(?seq) >5)}'\n\n```\nSee more example queries in the queries directory. You can run them like this.\n\n```bash\n./sparql_odgi.py test/t.odgi \"$(cat queries/selectAllSteps.rq)\"\n```\n\n# Variation Graphs as RDF/semantic graphs.\n\nThe modelling is following what is described in the [vg](https://github.com/vgteam/vg) repository. \nSuch as in the [ontology directory](https://github.com/vgteam/vg/tree/master/ontology)\n\n# Converting an Odgi into RDF\n\nThe code should support all RDF serialisations supported by RDFLib.\n\n```bash\n./odgi_to_rdf.py --syntax=ttl test/t.odgi test/t.ttl\n```\nThis makes the same kind of turtle as done by the `vg view -t` code.\nHowever, it adds more `rdf:type` statements as well as makes it easier to map from a linear genome because each step is also a region on the linear genome encoded using `faldo:Region` as it  would be in the Ensembl or UniProt RDF.\n\n# How can this work?\n\n## Mapping between types/predicates and known objects\n\nThe trick is that in VG RDF there are almost one to one mappings between a `rdf:type` or a predicate and a handlgegraph object type. For example if we see `vg:Node` we know we are dealing with a `handle`, if we see `rdf:value` as predicate we know it works on the node sequences. All [VG](http://biohackathon.org/resource/vg) and [FALDO](http://biohackathon.org/resource/faldo) predicates, classes and literals map straight forwards to a known set of Odgi/libhandlegraph methods and objects.\n\n| Predicate | Object/Class |\n|--------------|-----------------|\n| `rdf:value` | Node->sequence |\n| `vg:links` | Node->Node (Edge) |\n| `vg:linksReverseToReverse` | Node->Node (Edge) |\n| `vg:linksReverseToForward` | Node->Node (Edge) |\n| `vg:linksForwardToReverse` | Node->Node (Edge) |\n| `vg:linksForwardToForward` | Node->Node (Edge) |\n| `vg:reverseOfNode` | Step->Node |\n| `vg:node` | Step->Node |\n| `vg:path` | Step->Path |\n| `vg:rank` | Step->count allong it's Path |\n| `vg:offset` | Step->count allong it's Path |\n| `faldo:begin` | Step->position |\n| `faldo:end` | Step->position + Node->sequence.length|\n| `faldo:reference` | Step->Path |\n| `rdf:label` | Path->name |\n\n| Types | Object/Class |\n|----------|----------|\n| `vg:Node` | `Node` |\n| `vg:Step` | `Step` |\n| `faldo:Region` | `Step` |\n| `vg:Path` | `Path` |\n| `faldo:ExactPosition` | Step->begin/end (all are known exactly) |\n| `faldo:Position` | Step->begin/end (all are known exactly, but allows easier querying) |\n\n## SPARQL engines need one method to override\n\nThe way the SPARQL engines are build allows us to get the full (if not optimal) solutions by just implementating a single method. In the RDFLib case this is called `triples` which accepts a triple pattern and a `Context` (Named graph).\n\nFor each triple pattern we generate all possible matching triples using python generators (`yield`). For example if we see in triple pattern with `rdf:type` as predicate we know we need to iterate over all Odgi objects and return for each of them the triples where the `rdf:type` is set. If the predicate is not known we return an empty generator.\n\n## Why VG ?\n\nvG is the first useful graph genome variation toolkit. That has supported writing and reading RDF since 2016. This introduced the predicates and classes needed for describing and navigating through the graph genome topology.\n\n## Why FALDO\n\n[FALDO](https://jbiomedsem.biomedcentral.com/articles/10.1186/s13326-016-0067-z) is a way to describe a linear coordinate space as used in [UniProt](https://sparql.uniprot.org) and the [Ensembl/EBI RDF platform](http://rdf.ebi.ac.uk) and other sequence orientated databases. Supporting FALDO makes it easier to use queries designed for the linear view on the graph genome view, allowing both kinds of views on the same data. \n\n# How to run\n\nCurrently this needs a specific branch of Odgi for more python support (specifically equals methods on step objects).\nOnce that is installed and build you can look into the [env.sh](/env.sh), to make sure the Odgi pythonmodule is on your path.\n\nThen you can use the setup.py to install SpOdgi.\n\n# Notes\n\n## Methods in Odgi\n\nThe code to access Odgi methods/objects is listed in [Odgi src pythonmodule.cpp](https://github.com/vgteam/odgi/blob/master/src/pythonmodule.cpp)\n\n## RDFLib 5.x\n\nThere is a coming RDFLib 5.x this code is tested on it. \nAs 5.x will support federated queries it is better to use this than 4.x\n\n## Python3 Generators\n\nWe use python generators to allow the RDFLib to lazily evaluate the queries.\n```python\nyield from\nyield\n```\nare common in the code base.\nThese don't map nicely to the internal iterators of libhandlegraph style.\nBut with pybind we can have the most important methods be lazy.\n\n## Avoiding fetching known data\n\nOdgi is the storarge of the genome graph. We don't add a byte of overhead to the core storage.\nHowever SPARQL is join orientated (joins are implicit on variable reuse).\nJoins are normally expensive. \nTo avoid needing to re-join data we already fetched from disk/Odgi multiple times for a simple patter we attach the reference to the Odgi object(C++ pointers) to the associated RDFLib URIRef objects.\n\nWe do this by extending URIRef with our own implementations in [](/spodgi/blob/master/spodgi/terms.py).\nThis is useful because the lazy manner of generator use in the RDFLib query engine leads to normal reasonable queries encouraging Odgi objects to have a short live time.\n\nThis is also made possible because we use predictable patterns in our IRIs. For example we encode the path/step_rank/position for the `faldo:Position` objects in their IRIs. This means that given an IRI like this we can use the Odgi (or other libhandlegraph) indexes for efficient access.\n\n## Odgi does not have an index for Rank/Position of Steps\n\nThis means we need to use an iterator from 0 for every step access. We can be no faster than Odgi here.\nUnfortunately a lot of interesting queries for visualisation are very much driven by a natural linearisation of the genome variation graph.\n\nOther linhandlegraphs do have this (e.g. [xg](https://github.com/vgteam/xg)) and there are ways to index this reasonably well without much overhead in the python code.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/JervenBolleman/spodgi/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/JervenBolleman/spdogi", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "spodgi", "package_url": "https://pypi.org/project/spodgi/", "platform": "any", "project_url": "https://pypi.org/project/spodgi/", "project_urls": {"Download": "https://github.com/JervenBolleman/spodgi/master", "Homepage": "http://github.com/JervenBolleman/spdogi"}, "release_url": "https://pypi.org/project/spodgi/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "rdflib extension adding genome graph ODGI back-end store", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SpOdgi</h1>\n<p><a href=\"https://badge.fury.io/py/spodgi\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9b4d72254b28bd8df6a7c88fb6993953eae31b7/68747470733a2f2f62616467652e667572792e696f2f70792f73706f6467692e737667\"></a></p>\n<p>Use a general graph query language SPARQL to investigate genome variation graphs!</p>\n<p>Currently it exposes any <a href=\"https://github.com/vgteam/odgi\" rel=\"nofollow\">Odgi</a> genome variation graph via SPARQL a W3C standard query language. At the moment this is read only mode, and one can not modify the graph using SPARQL update yet.</p>\n<h1>Benefit</h1>\n<p>Any Odgi file is now a SPARQL capable database! No translation or extra storage required.\nReady for use by <a href=\"https://peerj.com/articles/cs-110/\" rel=\"nofollow\">FAIR accessors</a>.</p>\n<h1>Help wanted</h1>\n<p>This is a hobby for me, but could be very useful for others so please join and hack on this ;)</p>\n<p>I am especially in need of current best practices for packaging and testing of code in python. There is a <code>setup.py</code> but it is rough and probably needs a lot of work.</p>\n<h1>How to run</h1>\n<p>You need to have Odgi build locally and added it's pybind module directory to your PYTHONPATH. If you work like me it would be checked out in <code>~/git/odgi</code> and then you can use the env.sh script</p>\n<p>You need to have an Odgi file. So conversion from GFA\nneeds to be done using <code>odgi build -g test/t.gfa -o test/o.odgi</code></p>\n<h2>How to run with docker</h2>\n<p>There is a Docker file in <code>docker/</code>.\nWhich you can build with</p>\n<pre>docker build -t spodgi docker/\n<span class=\"c1\"># or podman</span>\ndocker build -t spodgi docker/\n</pre>\n<p>Then run interactivily with</p>\n<pre><code>docker run -it spodgi\n</code></pre>\n<h1>Running a SPARQL query on a Odgi</h1>\n<pre>./sparql_odgi.py  test/t.odgi <span class=\"s1\">'ASK {&lt;http://example.org/node/1&gt; a &lt;http://biohackathon.org/resource/vg#Node&gt;}'</span>\n</pre>\n<p>Finding the nodes with sequences that are longer than 5 nucleotides</p>\n<pre>./sparql_odgi.py  test/t.odgi <span class=\"s1\">'PREFIX rdf:&lt;http://www.w3.org/1999/02/22-rdf-syntax-ns#&gt; SELECT ?seq WHERE {?x rdf:value ?seq . FILTER(strlen(?seq) &gt;5)}'</span>\n</pre>\n<p>See more example queries in the queries directory. You can run them like this.</p>\n<pre>./sparql_odgi.py test/t.odgi <span class=\"s2\">\"</span><span class=\"k\">$(</span>cat queries/selectAllSteps.rq<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n<h1>Variation Graphs as RDF/semantic graphs.</h1>\n<p>The modelling is following what is described in the <a href=\"https://github.com/vgteam/vg\" rel=\"nofollow\">vg</a> repository.\nSuch as in the <a href=\"https://github.com/vgteam/vg/tree/master/ontology\" rel=\"nofollow\">ontology directory</a></p>\n<h1>Converting an Odgi into RDF</h1>\n<p>The code should support all RDF serialisations supported by RDFLib.</p>\n<pre>./odgi_to_rdf.py --syntax<span class=\"o\">=</span>ttl test/t.odgi test/t.ttl\n</pre>\n<p>This makes the same kind of turtle as done by the <code>vg view -t</code> code.\nHowever, it adds more <code>rdf:type</code> statements as well as makes it easier to map from a linear genome because each step is also a region on the linear genome encoded using <code>faldo:Region</code> as it  would be in the Ensembl or UniProt RDF.</p>\n<h1>How can this work?</h1>\n<h2>Mapping between types/predicates and known objects</h2>\n<p>The trick is that in VG RDF there are almost one to one mappings between a <code>rdf:type</code> or a predicate and a handlgegraph object type. For example if we see <code>vg:Node</code> we know we are dealing with a <code>handle</code>, if we see <code>rdf:value</code> as predicate we know it works on the node sequences. All <a href=\"http://biohackathon.org/resource/vg\" rel=\"nofollow\">VG</a> and <a href=\"http://biohackathon.org/resource/faldo\" rel=\"nofollow\">FALDO</a> predicates, classes and literals map straight forwards to a known set of Odgi/libhandlegraph methods and objects.</p>\n<table>\n<thead>\n<tr>\n<th>Predicate</th>\n<th>Object/Class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>rdf:value</code></td>\n<td>Node-&gt;sequence</td>\n</tr>\n<tr>\n<td><code>vg:links</code></td>\n<td>Node-&gt;Node (Edge)</td>\n</tr>\n<tr>\n<td><code>vg:linksReverseToReverse</code></td>\n<td>Node-&gt;Node (Edge)</td>\n</tr>\n<tr>\n<td><code>vg:linksReverseToForward</code></td>\n<td>Node-&gt;Node (Edge)</td>\n</tr>\n<tr>\n<td><code>vg:linksForwardToReverse</code></td>\n<td>Node-&gt;Node (Edge)</td>\n</tr>\n<tr>\n<td><code>vg:linksForwardToForward</code></td>\n<td>Node-&gt;Node (Edge)</td>\n</tr>\n<tr>\n<td><code>vg:reverseOfNode</code></td>\n<td>Step-&gt;Node</td>\n</tr>\n<tr>\n<td><code>vg:node</code></td>\n<td>Step-&gt;Node</td>\n</tr>\n<tr>\n<td><code>vg:path</code></td>\n<td>Step-&gt;Path</td>\n</tr>\n<tr>\n<td><code>vg:rank</code></td>\n<td>Step-&gt;count allong it's Path</td>\n</tr>\n<tr>\n<td><code>vg:offset</code></td>\n<td>Step-&gt;count allong it's Path</td>\n</tr>\n<tr>\n<td><code>faldo:begin</code></td>\n<td>Step-&gt;position</td>\n</tr>\n<tr>\n<td><code>faldo:end</code></td>\n<td>Step-&gt;position + Node-&gt;sequence.length</td>\n</tr>\n<tr>\n<td><code>faldo:reference</code></td>\n<td>Step-&gt;Path</td>\n</tr>\n<tr>\n<td><code>rdf:label</code></td>\n<td>Path-&gt;name</td>\n</tr></tbody></table>\n<table>\n<thead>\n<tr>\n<th>Types</th>\n<th>Object/Class</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>vg:Node</code></td>\n<td><code>Node</code></td>\n</tr>\n<tr>\n<td><code>vg:Step</code></td>\n<td><code>Step</code></td>\n</tr>\n<tr>\n<td><code>faldo:Region</code></td>\n<td><code>Step</code></td>\n</tr>\n<tr>\n<td><code>vg:Path</code></td>\n<td><code>Path</code></td>\n</tr>\n<tr>\n<td><code>faldo:ExactPosition</code></td>\n<td>Step-&gt;begin/end (all are known exactly)</td>\n</tr>\n<tr>\n<td><code>faldo:Position</code></td>\n<td>Step-&gt;begin/end (all are known exactly, but allows easier querying)</td>\n</tr></tbody></table>\n<h2>SPARQL engines need one method to override</h2>\n<p>The way the SPARQL engines are build allows us to get the full (if not optimal) solutions by just implementating a single method. In the RDFLib case this is called <code>triples</code> which accepts a triple pattern and a <code>Context</code> (Named graph).</p>\n<p>For each triple pattern we generate all possible matching triples using python generators (<code>yield</code>). For example if we see in triple pattern with <code>rdf:type</code> as predicate we know we need to iterate over all Odgi objects and return for each of them the triples where the <code>rdf:type</code> is set. If the predicate is not known we return an empty generator.</p>\n<h2>Why VG ?</h2>\n<p>vG is the first useful graph genome variation toolkit. That has supported writing and reading RDF since 2016. This introduced the predicates and classes needed for describing and navigating through the graph genome topology.</p>\n<h2>Why FALDO</h2>\n<p><a href=\"https://jbiomedsem.biomedcentral.com/articles/10.1186/s13326-016-0067-z\" rel=\"nofollow\">FALDO</a> is a way to describe a linear coordinate space as used in <a href=\"https://sparql.uniprot.org\" rel=\"nofollow\">UniProt</a> and the <a href=\"http://rdf.ebi.ac.uk\" rel=\"nofollow\">Ensembl/EBI RDF platform</a> and other sequence orientated databases. Supporting FALDO makes it easier to use queries designed for the linear view on the graph genome view, allowing both kinds of views on the same data.</p>\n<h1>How to run</h1>\n<p>Currently this needs a specific branch of Odgi for more python support (specifically equals methods on step objects).\nOnce that is installed and build you can look into the <a href=\"/env.sh\" rel=\"nofollow\">env.sh</a>, to make sure the Odgi pythonmodule is on your path.</p>\n<p>Then you can use the setup.py to install SpOdgi.</p>\n<h1>Notes</h1>\n<h2>Methods in Odgi</h2>\n<p>The code to access Odgi methods/objects is listed in <a href=\"https://github.com/vgteam/odgi/blob/master/src/pythonmodule.cpp\" rel=\"nofollow\">Odgi src pythonmodule.cpp</a></p>\n<h2>RDFLib 5.x</h2>\n<p>There is a coming RDFLib 5.x this code is tested on it.\nAs 5.x will support federated queries it is better to use this than 4.x</p>\n<h2>Python3 Generators</h2>\n<p>We use python generators to allow the RDFLib to lazily evaluate the queries.</p>\n<pre><span class=\"k\">yield from</span>\n<span class=\"k\">yield</span>\n</pre>\n<p>are common in the code base.\nThese don't map nicely to the internal iterators of libhandlegraph style.\nBut with pybind we can have the most important methods be lazy.</p>\n<h2>Avoiding fetching known data</h2>\n<p>Odgi is the storarge of the genome graph. We don't add a byte of overhead to the core storage.\nHowever SPARQL is join orientated (joins are implicit on variable reuse).\nJoins are normally expensive.\nTo avoid needing to re-join data we already fetched from disk/Odgi multiple times for a simple patter we attach the reference to the Odgi object(C++ pointers) to the associated RDFLib URIRef objects.</p>\n<p>We do this by extending URIRef with our own implementations in <a href=\"/spodgi/blob/master/spodgi/terms.py\" rel=\"nofollow\"></a>.\nThis is useful because the lazy manner of generator use in the RDFLib query engine leads to normal reasonable queries encouraging Odgi objects to have a short live time.</p>\n<p>This is also made possible because we use predictable patterns in our IRIs. For example we encode the path/step_rank/position for the <code>faldo:Position</code> objects in their IRIs. This means that given an IRI like this we can use the Odgi (or other libhandlegraph) indexes for efficient access.</p>\n<h2>Odgi does not have an index for Rank/Position of Steps</h2>\n<p>This means we need to use an iterator from 0 for every step access. We can be no faster than Odgi here.\nUnfortunately a lot of interesting queries for visualisation are very much driven by a natural linearisation of the genome variation graph.</p>\n<p>Other linhandlegraphs do have this (e.g. <a href=\"https://github.com/vgteam/xg\" rel=\"nofollow\">xg</a>) and there are ways to index this reasonably well without much overhead in the python code.</p>\n\n          </div>"}, "last_serial": 7063201, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "ab264a07557b991a3b996a5087c439bf", "sha256": "6c5242db80f38316d751dafa56496efcdbe45cb90a5ca78066f750a31d5641b1"}, "downloads": -1, "filename": "spodgi-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "ab264a07557b991a3b996a5087c439bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 9949, "upload_time": "2019-11-19T18:46:37", "upload_time_iso_8601": "2019-11-19T18:46:37.426308Z", "url": "https://files.pythonhosted.org/packages/c2/97/bab8dd77115215ec302c1dfa8ad272ee45c20ea167a3b00d41e448675fc1/spodgi-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "634c34a0c185238f05c5c2bdd0ab15d5", "sha256": "2834332f71159abe87f3b4cd60dbc95287c238d543d0d72ce174b7f363872420"}, "downloads": -1, "filename": "spodgi-0.0.2.tar.gz", "has_sig": false, "md5_digest": "634c34a0c185238f05c5c2bdd0ab15d5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11778, "upload_time": "2019-11-19T18:46:39", "upload_time_iso_8601": "2019-11-19T18:46:39.863477Z", "url": "https://files.pythonhosted.org/packages/1d/84/6faad9bd22a7972fe42bdc698d41220ec1da96d60ca20a485adaca3aee3f/spodgi-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "d8250b9f83f180802ebad444eafde5c1", "sha256": "6eb35610d21d851ffb9048a28b77309e948d9f1c6b01e65d6f2849735027d7dc"}, "downloads": -1, "filename": "spodgi-0.0.3-py3.7.egg", "has_sig": false, "md5_digest": "d8250b9f83f180802ebad444eafde5c1", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 22197, "upload_time": "2020-04-20T20:26:17", "upload_time_iso_8601": "2020-04-20T20:26:17.497736Z", "url": "https://files.pythonhosted.org/packages/c8/d4/eda715634885a2eedbffb58cf870cf635d39a4f34f55108d457daece4377/spodgi-0.0.3-py3.7.egg", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "9ea70a331b80a6a94dde3e90c60c2562", "sha256": "d5c564794c781fd6f6d126be9f58140368abf97f2123e9fdcca36c1020df3e9d"}, "downloads": -1, "filename": "spodgi-0.0.4-py3.7.egg", "has_sig": false, "md5_digest": "9ea70a331b80a6a94dde3e90c60c2562", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 22302, "upload_time": "2020-04-20T20:26:18", "upload_time_iso_8601": "2020-04-20T20:26:18.621625Z", "url": "https://files.pythonhosted.org/packages/85/3b/d93d2a484c9072cc2a617690636e5db6acac40ce82d14238fcf372ee94fa/spodgi-0.0.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "643af658ffb815bb87561a51190f1705", "sha256": "d8a68a954da77af18757eefa0d075bb52308b25b837d28a780036b29838939f5"}, "downloads": -1, "filename": "spodgi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "643af658ffb815bb87561a51190f1705", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13839, "upload_time": "2020-04-20T20:26:20", "upload_time_iso_8601": "2020-04-20T20:26:20.220041Z", "url": "https://files.pythonhosted.org/packages/ca/7e/1695550438d707c3fd7fb6c4e2d9ce7ff2a3f96461b2e5af5cb05a169012/spodgi-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9ea70a331b80a6a94dde3e90c60c2562", "sha256": "d5c564794c781fd6f6d126be9f58140368abf97f2123e9fdcca36c1020df3e9d"}, "downloads": -1, "filename": "spodgi-0.0.4-py3.7.egg", "has_sig": false, "md5_digest": "9ea70a331b80a6a94dde3e90c60c2562", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": ">=3.6", "size": 22302, "upload_time": "2020-04-20T20:26:18", "upload_time_iso_8601": "2020-04-20T20:26:18.621625Z", "url": "https://files.pythonhosted.org/packages/85/3b/d93d2a484c9072cc2a617690636e5db6acac40ce82d14238fcf372ee94fa/spodgi-0.0.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "643af658ffb815bb87561a51190f1705", "sha256": "d8a68a954da77af18757eefa0d075bb52308b25b837d28a780036b29838939f5"}, "downloads": -1, "filename": "spodgi-0.0.4.tar.gz", "has_sig": false, "md5_digest": "643af658ffb815bb87561a51190f1705", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13839, "upload_time": "2020-04-20T20:26:20", "upload_time_iso_8601": "2020-04-20T20:26:20.220041Z", "url": "https://files.pythonhosted.org/packages/ca/7e/1695550438d707c3fd7fb6c4e2d9ce7ff2a3f96461b2e5af5cb05a169012/spodgi-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:38 2020"}