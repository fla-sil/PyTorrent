{"info": {"author": "Konstantin Tretyakov", "author_email": "kt@ut.ee", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: IPython", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "=================================================\nIPython Magic for sending notifications to Slack\n=================================================\n\nInstallation\n------------\n::\n\n    $ pip install ipyslack\n    \nUsage\n-----\n1. Load the extension::\n\n    %load_ext ipyslack\n\n2. Configure Slack API::\n\n    %slack_setup -t <api_token> -c <target_channel>\n\n   To obtain the API token visit `this page <https://api.slack.com/custom-integrations/legacy-tokens>`_.\n   The ``<target_channel>`` parameter may either denote a channel (e.g. ``#general``) or a user (e.g. ``@me``).\n    \n   Adding the option ``-u true`` to ``%slack_setup`` will make yourself the sender of all messages. Otherwise (default) the messages originate from ``slackbot``.\n\n   In order to avoid having to write the API token in every notebook, you can create a file containing the same configuration line::\n   \n     -t <api_token> -c <target_channel> -u false\n    \n   You can then load this configuration in the notebook by invoking::\n   \n     %slack_setup <filename>\n     \n   Even simpler, if you don't call ``%slack_setup`` at all, the extension will try to auto-configure itself on first use\n   by searching for the files ``~/.ipyslack.cfg`` and ``.ipyslack.cfg`` (in this order) and\n   trying to load configuration from these.\n   \n   Later files in this search order override the settings of the previous ones. That is, you can specify ``-t <api_token> -c #default_group`` \n   in the global ``~/.ipyslack.cfg``, and only override ``-c #project_group`` in the local ``.ipyslack.cfg``.\n   \n3. Now adding::\n\n    %%slack_notify <message>\n\n   at the top of any cell will send ``<message>`` to ``<target_channel>`` whenever cell execution is completed. \n\n   The patterns ``{out}`` and ``{err}`` within ``<message>`` will be substituted with stdout or stderr from the cell's execution. The pattern ``{exc}`` denotes the exception (if any was thrown). The string ``\\n`` denotes a new line. Simiarly, any variable named ``x`` in your workspace can be referred to as ``{x}`` (in fact, you can use the standard format string notation).\n\n   Example::\n\n     %%slack_notify *Completed {len(results)} trials. Last result: {results[-1]}!* :heavy_plus_sign:\\nStdout: {out}\\nStderr: {err}\\nException: {exc}\n\n4. In addition, the line-magic ``%slack_send <message>`` lets you send notifications about partial results. E.g.::\n\n      %%slack_notify Completed. Final accuracy: {accuracy}. {exc}\n      ... computation ...\n      %slack_send Half-way! Current accuracy: {accuracy}\n      ... computation ...\n\nSee also\n--------\n\n* IPyTelegram: https://github.com/kalaidin/ipytelegram/", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/konstantint/ipyslack", "keywords": "matplotlib plotting charts venn-diagrams", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "ipyslack", "package_url": "https://pypi.org/project/ipyslack/", "platform": "Platform Independent", "project_url": "https://pypi.org/project/ipyslack/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/konstantint/ipyslack"}, "release_url": "https://pypi.org/project/ipyslack/1.2.1/", "requires_dist": null, "requires_python": null, "summary": "IPython magic for sending slack notifications", "version": "1.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<pre>$ pip install ipyslack\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ol>\n<li><p>Load the extension:</p>\n<pre>%load_ext ipyslack\n</pre>\n</li>\n<li><p>Configure Slack API:</p>\n<pre>%slack_setup -t &lt;api_token&gt; -c &lt;target_channel&gt;\n</pre>\n<p>To obtain the API token visit <a href=\"https://api.slack.com/custom-integrations/legacy-tokens\" rel=\"nofollow\">this page</a>.\nThe <tt>&lt;target_channel&gt;</tt> parameter may either denote a channel (e.g. <tt>#general</tt>) or a user (e.g. <tt>@me</tt>).</p>\n<p>Adding the option <tt><span class=\"pre\">-u</span> true</tt> to <tt>%slack_setup</tt> will make yourself the sender of all messages. Otherwise (default) the messages originate from <tt>slackbot</tt>.</p>\n<p>In order to avoid having to write the API token in every notebook, you can create a file containing the same configuration line:</p>\n<pre>-t &lt;api_token&gt; -c &lt;target_channel&gt; -u false\n</pre>\n<p>You can then load this configuration in the notebook by invoking:</p>\n<pre>%slack_setup &lt;filename&gt;\n</pre>\n<p>Even simpler, if you don\u2019t call <tt>%slack_setup</tt> at all, the extension will try to auto-configure itself on first use\nby searching for the files <tt><span class=\"pre\">~/.ipyslack.cfg</span></tt> and <tt>.ipyslack.cfg</tt> (in this order) and\ntrying to load configuration from these.</p>\n<p>Later files in this search order override the settings of the previous ones. That is, you can specify <tt><span class=\"pre\">-t</span> &lt;api_token&gt; <span class=\"pre\">-c</span> #default_group</tt>\nin the global <tt><span class=\"pre\">~/.ipyslack.cfg</span></tt>, and only override <tt><span class=\"pre\">-c</span> #project_group</tt> in the local <tt>.ipyslack.cfg</tt>.</p>\n</li>\n<li><p>Now adding:</p>\n<pre>%%slack_notify &lt;message&gt;\n</pre>\n<p>at the top of any cell will send <tt>&lt;message&gt;</tt> to <tt>&lt;target_channel&gt;</tt> whenever cell execution is completed.</p>\n<p>The patterns <tt>{out}</tt> and <tt>{err}</tt> within <tt>&lt;message&gt;</tt> will be substituted with stdout or stderr from the cell\u2019s execution. The pattern <tt>{exc}</tt> denotes the exception (if any was thrown). The string <tt>\\n</tt> denotes a new line. Simiarly, any variable named <tt>x</tt> in your workspace can be referred to as <tt>{x}</tt> (in fact, you can use the standard format string notation).</p>\n<p>Example:</p>\n<pre>%%slack_notify *Completed {len(results)} trials. Last result: {results[-1]}!* :heavy_plus_sign:\\nStdout: {out}\\nStderr: {err}\\nException: {exc}\n</pre>\n</li>\n<li><p>In addition, the line-magic <tt>%slack_send &lt;message&gt;</tt> lets you send notifications about partial results. E.g.:</p>\n<pre>%%slack_notify Completed. Final accuracy: {accuracy}. {exc}\n... computation ...\n%slack_send Half-way! Current accuracy: {accuracy}\n... computation ...\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"see-also\">\n<h2>See also</h2>\n<ul>\n<li>IPyTelegram: <a href=\"https://github.com/kalaidin/ipytelegram/\" rel=\"nofollow\">https://github.com/kalaidin/ipytelegram/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 2932817, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "0af276571013c7fefce9b3f43b1770ae", "sha256": "826273cf038e2a09327990260db6c4db867be21aed23dfd2dc3604a26c95035a"}, "downloads": -1, "filename": "ipyslack-1.0.zip", "has_sig": false, "md5_digest": "0af276571013c7fefce9b3f43b1770ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6511, "upload_time": "2017-06-04T14:20:37", "upload_time_iso_8601": "2017-06-04T14:20:37.615831Z", "url": "https://files.pythonhosted.org/packages/8d/3c/ede8add9d3c89dd402de442473fde8db3f3fe22c2152adf161257325ab04/ipyslack-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "5fd69e2c5e4e44bbadc923b052867222", "sha256": "b54def3c988907412968ac75d88fe9744da7c060e668e29278ab78780e3f0a99"}, "downloads": -1, "filename": "ipyslack-1.1.zip", "has_sig": false, "md5_digest": "5fd69e2c5e4e44bbadc923b052867222", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7783, "upload_time": "2017-06-07T13:57:14", "upload_time_iso_8601": "2017-06-07T13:57:14.208765Z", "url": "https://files.pythonhosted.org/packages/11/ce/6eb05080ec27a162c87b4a6101387938264f7e8f542428b672870b4985ee/ipyslack-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "a1aadc560767fe53b856e244e0634466", "sha256": "5f6a564bc7bed5e7028004e26bfff510dec5c8a358c0eae506d69ec65539042c"}, "downloads": -1, "filename": "ipyslack-1.2.zip", "has_sig": false, "md5_digest": "a1aadc560767fe53b856e244e0634466", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8403, "upload_time": "2017-06-07T17:07:10", "upload_time_iso_8601": "2017-06-07T17:07:10.167368Z", "url": "https://files.pythonhosted.org/packages/c8/b2/6862f34fbe3aa6c8324d3bdf1ab2d84d5be2c6b26e82bc3cd922fee28b92/ipyslack-1.2.zip", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "76a7d1a261c35e89822985ffc575fcc9", "sha256": "0c95e8f2bb59d8aebb779d54786b9c5bee0e8ec20ff328689566c45e70ae0494"}, "downloads": -1, "filename": "ipyslack-1.2.1.zip", "has_sig": false, "md5_digest": "76a7d1a261c35e89822985ffc575fcc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8475, "upload_time": "2017-06-07T17:09:20", "upload_time_iso_8601": "2017-06-07T17:09:20.268518Z", "url": "https://files.pythonhosted.org/packages/13/d7/3c6cd4a2655fe997254e6145475e2521c5752221f90435c095dfb15dc7e5/ipyslack-1.2.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "76a7d1a261c35e89822985ffc575fcc9", "sha256": "0c95e8f2bb59d8aebb779d54786b9c5bee0e8ec20ff328689566c45e70ae0494"}, "downloads": -1, "filename": "ipyslack-1.2.1.zip", "has_sig": false, "md5_digest": "76a7d1a261c35e89822985ffc575fcc9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8475, "upload_time": "2017-06-07T17:09:20", "upload_time_iso_8601": "2017-06-07T17:09:20.268518Z", "url": "https://files.pythonhosted.org/packages/13/d7/3c6cd4a2655fe997254e6145475e2521c5752221f90435c095dfb15dc7e5/ipyslack-1.2.1.zip", "yanked": false}], "timestamp": "Fri May  8 00:54:26 2020"}