{"info": {"author": "Jackson Maxfield Brown", "author_email": "jacksonb@alleninstitute.org", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: Free for non-commercial use", "Natural Language :: English", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# AICS Dask Utils\n\n[![Build Status](https://github.com/AllenCellModeling/aics_dask_utils/workflows/Build%20Master/badge.svg)](https://github.com/AllenCellModeling/aics_dask_utils/actions)\n[![Documentation](https://github.com/AllenCellModeling/aics_dask_utils/workflows/Documentation/badge.svg)](https://AllenCellModeling.github.io/aics_dask_utils)\n[![Code Coverage](https://codecov.io/gh/AllenCellModeling/aics_dask_utils/branch/master/graph/badge.svg)](https://codecov.io/gh/AllenCellModeling/aics_dask_utils)\n\nDocumentation related to Dask, Distributed, and related packages.\nUtility functions commonly used by AICS projects.\n\n---\n\n## Features\n* Distributed handler to manage various debugging or cluster configurations\n* Documentation on example cluster deployments\n\n## Basics\nBefore we jump into quick starts there are some basic definitions to understand.\n\n#### Task\nA task is a single static function to be processed. Simple enough. However, relevant to\nAICS, is that when using `aicsimageio` (and / or `dask.array.Array`), your image (or\n`dask.array.Array`) is split up into _many_ tasks. This is dependent on the image reader\nand the size of the file you are reading. But in general it is safe to assume that each\nimage you read is split many thousands of tasks. If you want to see how many tasks your\nimage is split into you can either compute:\n\n1. Psuedo-code: `sum(2 * size(channel) for channel if channel not in [\"Y\", \"X\"])`\n2. Dask graph length: `len(AICSImage.dask_data.__dask_graph__())`\n\n#### Map\nApply a given function to the provided iterables as used as parameters to the function.\nGiven `lambda x: x + 1` and `[1, 2, 3]`, the result of `map(func, *iterables)` in this\ncase would be `[2, 3, 4]`. Usually, you are provided back an iterable of `future`\nobjects back from a `map` operation. The results from the map operation are not\nguaranteed to be in the order of the iterable that went in as operations are started as\nresources become available and item to item variance may result in different output\nordering.\n\n#### Future\nAn object that will become available but is currently not defined. There is no guarantee\nthat the object is a valid result or an error and you should handle errors once the\nfuture's state has resolved (usually this means after a `gather` operation).\n\n#### Gather\nBlock the process from moving forward until all futures are resolved. Control flow here\nwould mean that you could potentially generate thousands of futures and keep moving on\nlocally while those futures slowly resolve but if you ever want a hard stop and wait for\nsome set of futures to complete, you would need gather them.\n\n##### Other Comments\nDask tries to mirror the standard library `concurrent.futures` wherever possible which\nis what allows for this library to have simple wrappers around Dask to allow for easy\ndebugging as we are simply swapping out `distributed.Client.map` with\n`concurrent.futures.ThreadPoolExecutor.map` for example. If at any point in your code\nyou don't want to use `dask` for some reason or another, it is equally valid to use\n`concurrent.futures.ThreadPoolExecutor` or `concurrent.futures.ProcessPoolExecutor`.\n\n### Basic Mapping with Distributed Handler\nIf you have an iterable (or iterables) that would result in less than hundreds of\nthousands of tasks, it you can simply use the normal `map` provided by the\n`DistributedHandler.client`.\n\n**Important Note:** Notice, \"... iterable that would _result_ in less than hundreds\nof thousands of tasks...\". This is important because what happens when you try to `map`\nover a thousand image paths, each which spawns an `AICSImage` object. Each one adds\nthousands more tasks to the scheduler to complete. This will break and you should look\nto [Large Iterable Batching](#large-iterable-batching) instead.\n\n```python\nfrom aics_dask_utils import DistributedHandler\n\n# `None` address provided means use local machine threads\nwith DistributedHandler(None) as handler:\n    futures = handler.client.map(\n        lambda x: x + 1,\n        [1, 2, 3]\n    )\n\n    results = handler.gather(futures)\n\nfrom distributed import LocalCluster\ncluster = LocalCluster()\n\n# Actual address provided means use the dask scheduler\nwith DistributedHandler(cluster.scheduler_address) as handler:\n    futures = handler.client.map(\n        lambda x: x + 1,\n        [1, 2, 3]\n    )\n\n    results = handler.gather(futures)\n```\n\n### Large Iterable Batching\nIf you have an iterable (or iterables) that would result in more than hundreds of\nthousands of tasks, you should use `handler.batched_map` to reduce the load on the\nclient. This will batch your requests rather than send than all at once.\n\n```python\nfrom aics_dask_utils import DistributedHandler\n\n# `None` address provided means use local machine threads\nwith DistributedHandler(None) as handler:\n    results = handler.batched_map(\n        lambda x: x + 1,\n        range(1e9) # 1 billion\n    )\n\nfrom distributed import LocalCluster\ncluster = LocalCluster()\n\n# Actual address provided means use the dask scheduler\nwith DistributedHandler(cluster.scheduler_address) as handler:\n    results = handler.batched_map(\n        lambda x: x + 1,\n        range(1e9) # 1 billion\n    )\n```\n\n**Note:** Notice that there is no `handler.gather` call after `batched_map`. This is\nbecause `batched_map` gathers results at the end of each batch rather than simply\nreturning their future's.\n\n## Installation\n**Stable Release:** `pip install aics_dask_utils`<br>\n**Development Head:** `pip install git+https://github.com/AllenCellModeling/aics_dask_utils.git`\n\n## Documentation\nFor full package documentation please visit\n[AllenCellModeling.github.io/aics_dask_utils](https://AllenCellModeling.github.io/aics_dask_utils).\n\n## Development\nSee [CONTRIBUTING.md](CONTRIBUTING.md) for information related to developing the code.\n\n## Additional Comments\nThis README, provided tooling, and documentation are not meant to be all encompassing\nof the various operations you can do with `dask` and other similar computing systems.\nFor further reading go to [dask.org](https://dask.org/).\n\n**Free software: Allen Institute Software License**\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/AllenCellModeling/aics_dask_utils", "keywords": "aics_dask_utils", "license": "Allen Institute Software License", "maintainer": "", "maintainer_email": "", "name": "aics-dask-utils", "package_url": "https://pypi.org/project/aics-dask-utils/", "platform": "", "project_url": "https://pypi.org/project/aics-dask-utils/", "project_urls": {"Homepage": "https://github.com/AllenCellModeling/aics_dask_utils"}, "release_url": "https://pypi.org/project/aics-dask-utils/0.1.0/", "requires_dist": ["distributed (>=2.12.0)", "distributed (>=2.12.0) ; extra == 'all'", "codecov ; extra == 'all'", "flake8 ; extra == 'all'", "black ; extra == 'all'", "pytest ; extra == 'all'", "pytest-cov ; extra == 'all'", "pytest-raises ; extra == 'all'", "pytest-runner ; extra == 'all'", "black (>=19.10b0bumpversion>=0.5.3) ; extra == 'all'", "coverage (>=5.0a4) ; extra == 'all'", "flake8 (>=3.7.7) ; extra == 'all'", "ipython (>=7.5.0) ; extra == 'all'", "m2r (>=0.2.1) ; extra == 'all'", "pytest (>=4.3.0) ; extra == 'all'", "pytest-cov (==2.6.1) ; extra == 'all'", "pytest-raises (>=0.10) ; extra == 'all'", "pytest-runner (>=4.4) ; extra == 'all'", "Sphinx (<3,>=2.0.0b1) ; extra == 'all'", "sphinx-rtd-theme (>=0.1.2) ; extra == 'all'", "tox (>=3.5.2) ; extra == 'all'", "twine (>=1.13.0) ; extra == 'all'", "wheel (>=0.33.1) ; extra == 'all'", "altair ; extra == 'all'", "jupyterlab ; extra == 'all'", "matplotlib ; extra == 'all'", "black (>=19.10b0bumpversion>=0.5.3) ; extra == 'dev'", "coverage (>=5.0a4) ; extra == 'dev'", "flake8 (>=3.7.7) ; extra == 'dev'", "ipython (>=7.5.0) ; extra == 'dev'", "m2r (>=0.2.1) ; extra == 'dev'", "pytest (>=4.3.0) ; extra == 'dev'", "pytest-cov (==2.6.1) ; extra == 'dev'", "pytest-raises (>=0.10) ; extra == 'dev'", "pytest-runner (>=4.4) ; extra == 'dev'", "Sphinx (<3,>=2.0.0b1) ; extra == 'dev'", "sphinx-rtd-theme (>=0.1.2) ; extra == 'dev'", "tox (>=3.5.2) ; extra == 'dev'", "twine (>=1.13.0) ; extra == 'dev'", "wheel (>=0.33.1) ; extra == 'dev'", "altair ; extra == 'interactive'", "jupyterlab ; extra == 'interactive'", "matplotlib ; extra == 'interactive'", "pytest-runner ; extra == 'setup'", "codecov ; extra == 'test'", "flake8 ; extra == 'test'", "black ; extra == 'test'", "pytest ; extra == 'test'", "pytest-cov ; extra == 'test'", "pytest-raises ; extra == 'test'"], "requires_python": ">=3.6", "summary": "Utility functions and documentation related to Dask and AICS", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AICS Dask Utils</h1>\n<p><a href=\"https://github.com/AllenCellModeling/aics_dask_utils/actions\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7863fb200a4610dc6327310acc1048610d5beabd/68747470733a2f2f6769746875622e636f6d2f416c6c656e43656c6c4d6f64656c696e672f616963735f6461736b5f7574696c732f776f726b666c6f77732f4275696c642532304d61737465722f62616467652e737667\"></a>\n<a href=\"https://AllenCellModeling.github.io/aics_dask_utils\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bcb2b8eb63138aeef847f7cb3753cfd2641b65f7/68747470733a2f2f6769746875622e636f6d2f416c6c656e43656c6c4d6f64656c696e672f616963735f6461736b5f7574696c732f776f726b666c6f77732f446f63756d656e746174696f6e2f62616467652e737667\"></a>\n<a href=\"https://codecov.io/gh/AllenCellModeling/aics_dask_utils\" rel=\"nofollow\"><img alt=\"Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64ba3e7ee774618f0652635dccda6833d008c3f2/68747470733a2f2f636f6465636f762e696f2f67682f416c6c656e43656c6c4d6f64656c696e672f616963735f6461736b5f7574696c732f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a></p>\n<p>Documentation related to Dask, Distributed, and related packages.\nUtility functions commonly used by AICS projects.</p>\n<hr>\n<h2>Features</h2>\n<ul>\n<li>Distributed handler to manage various debugging or cluster configurations</li>\n<li>Documentation on example cluster deployments</li>\n</ul>\n<h2>Basics</h2>\n<p>Before we jump into quick starts there are some basic definitions to understand.</p>\n<h4>Task</h4>\n<p>A task is a single static function to be processed. Simple enough. However, relevant to\nAICS, is that when using <code>aicsimageio</code> (and / or <code>dask.array.Array</code>), your image (or\n<code>dask.array.Array</code>) is split up into <em>many</em> tasks. This is dependent on the image reader\nand the size of the file you are reading. But in general it is safe to assume that each\nimage you read is split many thousands of tasks. If you want to see how many tasks your\nimage is split into you can either compute:</p>\n<ol>\n<li>Psuedo-code: <code>sum(2 * size(channel) for channel if channel not in [\"Y\", \"X\"])</code></li>\n<li>Dask graph length: <code>len(AICSImage.dask_data.__dask_graph__())</code></li>\n</ol>\n<h4>Map</h4>\n<p>Apply a given function to the provided iterables as used as parameters to the function.\nGiven <code>lambda x: x + 1</code> and <code>[1, 2, 3]</code>, the result of <code>map(func, *iterables)</code> in this\ncase would be <code>[2, 3, 4]</code>. Usually, you are provided back an iterable of <code>future</code>\nobjects back from a <code>map</code> operation. The results from the map operation are not\nguaranteed to be in the order of the iterable that went in as operations are started as\nresources become available and item to item variance may result in different output\nordering.</p>\n<h4>Future</h4>\n<p>An object that will become available but is currently not defined. There is no guarantee\nthat the object is a valid result or an error and you should handle errors once the\nfuture's state has resolved (usually this means after a <code>gather</code> operation).</p>\n<h4>Gather</h4>\n<p>Block the process from moving forward until all futures are resolved. Control flow here\nwould mean that you could potentially generate thousands of futures and keep moving on\nlocally while those futures slowly resolve but if you ever want a hard stop and wait for\nsome set of futures to complete, you would need gather them.</p>\n<h5>Other Comments</h5>\n<p>Dask tries to mirror the standard library <code>concurrent.futures</code> wherever possible which\nis what allows for this library to have simple wrappers around Dask to allow for easy\ndebugging as we are simply swapping out <code>distributed.Client.map</code> with\n<code>concurrent.futures.ThreadPoolExecutor.map</code> for example. If at any point in your code\nyou don't want to use <code>dask</code> for some reason or another, it is equally valid to use\n<code>concurrent.futures.ThreadPoolExecutor</code> or <code>concurrent.futures.ProcessPoolExecutor</code>.</p>\n<h3>Basic Mapping with Distributed Handler</h3>\n<p>If you have an iterable (or iterables) that would result in less than hundreds of\nthousands of tasks, it you can simply use the normal <code>map</code> provided by the\n<code>DistributedHandler.client</code>.</p>\n<p><strong>Important Note:</strong> Notice, \"... iterable that would <em>result</em> in less than hundreds\nof thousands of tasks...\". This is important because what happens when you try to <code>map</code>\nover a thousand image paths, each which spawns an <code>AICSImage</code> object. Each one adds\nthousands more tasks to the scheduler to complete. This will break and you should look\nto <a href=\"#large-iterable-batching\" rel=\"nofollow\">Large Iterable Batching</a> instead.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aics_dask_utils</span> <span class=\"kn\">import</span> <span class=\"n\">DistributedHandler</span>\n\n<span class=\"c1\"># `None` address provided means use local machine threads</span>\n<span class=\"k\">with</span> <span class=\"n\">DistributedHandler</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handler</span><span class=\"p\">:</span>\n    <span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">futures</span><span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">distributed</span> <span class=\"kn\">import</span> <span class=\"n\">LocalCluster</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">LocalCluster</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Actual address provided means use the dask scheduler</span>\n<span class=\"k\">with</span> <span class=\"n\">DistributedHandler</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">scheduler_address</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handler</span><span class=\"p\">:</span>\n    <span class=\"n\">futures</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n    <span class=\"p\">)</span>\n\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">gather</span><span class=\"p\">(</span><span class=\"n\">futures</span><span class=\"p\">)</span>\n</pre>\n<h3>Large Iterable Batching</h3>\n<p>If you have an iterable (or iterables) that would result in more than hundreds of\nthousands of tasks, you should use <code>handler.batched_map</code> to reduce the load on the\nclient. This will batch your requests rather than send than all at once.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">aics_dask_utils</span> <span class=\"kn\">import</span> <span class=\"n\">DistributedHandler</span>\n\n<span class=\"c1\"># `None` address provided means use local machine threads</span>\n<span class=\"k\">with</span> <span class=\"n\">DistributedHandler</span><span class=\"p\">(</span><span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handler</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">batched_map</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mf\">1e9</span><span class=\"p\">)</span> <span class=\"c1\"># 1 billion</span>\n    <span class=\"p\">)</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">distributed</span> <span class=\"kn\">import</span> <span class=\"n\">LocalCluster</span>\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">LocalCluster</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Actual address provided means use the dask scheduler</span>\n<span class=\"k\">with</span> <span class=\"n\">DistributedHandler</span><span class=\"p\">(</span><span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">scheduler_address</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">handler</span><span class=\"p\">:</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">batched_map</span><span class=\"p\">(</span>\n        <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mf\">1e9</span><span class=\"p\">)</span> <span class=\"c1\"># 1 billion</span>\n    <span class=\"p\">)</span>\n</pre>\n<p><strong>Note:</strong> Notice that there is no <code>handler.gather</code> call after <code>batched_map</code>. This is\nbecause <code>batched_map</code> gathers results at the end of each batch rather than simply\nreturning their future's.</p>\n<h2>Installation</h2>\n<p><strong>Stable Release:</strong> <code>pip install aics_dask_utils</code><br>\n<strong>Development Head:</strong> <code>pip install git+https://github.com/AllenCellModeling/aics_dask_utils.git</code></p>\n<h2>Documentation</h2>\n<p>For full package documentation please visit\n<a href=\"https://AllenCellModeling.github.io/aics_dask_utils\" rel=\"nofollow\">AllenCellModeling.github.io/aics_dask_utils</a>.</p>\n<h2>Development</h2>\n<p>See <a href=\"CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a> for information related to developing the code.</p>\n<h2>Additional Comments</h2>\n<p>This README, provided tooling, and documentation are not meant to be all encompassing\nof the various operations you can do with <code>dask</code> and other similar computing systems.\nFor further reading go to <a href=\"https://dask.org/\" rel=\"nofollow\">dask.org</a>.</p>\n<p><strong>Free software: Allen Institute Software License</strong></p>\n\n          </div>"}, "last_serial": 7097010, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "52421c542d342691316b70ba92de93f3", "sha256": "007fe919ca2365a16990180bd232bcb4c0be9f5aa43bbc3d6447acb990b64754"}, "downloads": -1, "filename": "aics_dask_utils-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "52421c542d342691316b70ba92de93f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 7831, "upload_time": "2020-04-24T23:52:37", "upload_time_iso_8601": "2020-04-24T23:52:37.416118Z", "url": "https://files.pythonhosted.org/packages/a0/c0/2045ca464c8b9c12c4cfb1f2b94440020e099e131eee46f5c99a94400f97/aics_dask_utils-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b78716a6ad3e4d197a709c5c1e58347", "sha256": "085d382608935890459125cc7acbfe74afec416b464799366c9becba90293b65"}, "downloads": -1, "filename": "aics_dask_utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8b78716a6ad3e4d197a709c5c1e58347", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11670, "upload_time": "2020-04-24T23:52:39", "upload_time_iso_8601": "2020-04-24T23:52:39.666784Z", "url": "https://files.pythonhosted.org/packages/05/df/f84df8fae2eebbd337ecd8dc3c0070fc5c3a8de3378c80b3af5bb027f399/aics_dask_utils-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "52421c542d342691316b70ba92de93f3", "sha256": "007fe919ca2365a16990180bd232bcb4c0be9f5aa43bbc3d6447acb990b64754"}, "downloads": -1, "filename": "aics_dask_utils-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "52421c542d342691316b70ba92de93f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 7831, "upload_time": "2020-04-24T23:52:37", "upload_time_iso_8601": "2020-04-24T23:52:37.416118Z", "url": "https://files.pythonhosted.org/packages/a0/c0/2045ca464c8b9c12c4cfb1f2b94440020e099e131eee46f5c99a94400f97/aics_dask_utils-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b78716a6ad3e4d197a709c5c1e58347", "sha256": "085d382608935890459125cc7acbfe74afec416b464799366c9becba90293b65"}, "downloads": -1, "filename": "aics_dask_utils-0.1.0.tar.gz", "has_sig": false, "md5_digest": "8b78716a6ad3e4d197a709c5c1e58347", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11670, "upload_time": "2020-04-24T23:52:39", "upload_time_iso_8601": "2020-04-24T23:52:39.666784Z", "url": "https://files.pythonhosted.org/packages/05/df/f84df8fae2eebbd337ecd8dc3c0070fc5c3a8de3378c80b3af5bb027f399/aics_dask_utils-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:22:10 2020"}