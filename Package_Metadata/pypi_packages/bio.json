{"info": {"author": "Yani Lathouris", "author_email": "ylathouris@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Build Tools"], "description": "[![CircleCI](https://circleci.com/gh/ylathouris/bio.svg?style=shield)](https://circleci.com/gh/ylathouris/bia)  ![Coverage](coverage.svg)\n\n---\n\n# Code Bio\n\nThe `bio` package provides utilities for profiling python code. \n\n* [Decorator](#decorator.profile)\n* [Context Manager](#contextmanager.profiler)\n\n</br>\n\n## Installation\n\n```\npip install bio\n```\n\n</br>\n\n### <a name=\"decorator.profile\"></a>Decorator\n\n```python\nimport bio\n\n@bio.profile()\ndef my_functon():\n    # Do stuff here\n```\n\nUsing the `@bio.profile()` decorator with no arguments will simply print \nthe output to `stdout`. Alternatively, you can provide the file location \nfor the profiler output.\n\n```python\n@bio.profile(\"/path/to/file.prof\")\ndef my_functon():\n    # Do stuff here\n```\n\nIn the example shown above, the output will be written to both `stdout` \nand the given file location. If you would prefer not to write to `stdout` \nyou can use the `quiet=True` option.\n\n```python\n@bio.profile(\"/path/to/file.prof\", quiet=True)\ndef my_functon():\n    # Do stuff here\n```\n\n</br>\n\n### <a name=\"conextmanager.profiler\"></a>Context Manager\n\n```python\nimport bio\n\nwith bio.profiler(\"/path/to/file.prof\"):\n    # Do stuff here\n```\n\n</br>\n\n# Developers\n\n\n### <a name=\"testing\"></a>Testing\n\nBio uses [tox] for testing. To run the tests, simply do:\n\n```\ntox\n```\n\nThe configuration for [tox] can be found in the **tox.ini** file. Bio \nuses [pytest] as the preferred testing framework. Prior to running the \ntests, [tox] will execute an auto-formatting tool called [black]. After \nthe tests have completed, [tox] will create the coverage badge (shown at\nthe top of this page) using the [coverage_badge] tool.\n\n\n[tox]: https://tox.readthedocs.io/en/latest/\n[pytest]: https://docs.pytest.org/en/latest\n[black]: https://github.com/ambv/black\n[coverage_badge]: https://github.com/dbrgn/coverage-badge\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ylathouris/bio", "keywords": "io,load,dump,read,write,parse,format,utils", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bio", "package_url": "https://pypi.org/project/bio/", "platform": "", "project_url": "https://pypi.org/project/bio/", "project_urls": {"Homepage": "https://github.com/ylathouris/bio", "Say Thanks!": "http://saythanks.io/to/ylathouris", "Source": "https://github.com/ylathouris/bio", "Tracker": "https://github.com/ylathouris/bio/issues"}, "release_url": "https://pypi.org/project/bio/0.1.0/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "summary": "Python Profiler", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://circleci.com/gh/ylathouris/bia\" rel=\"nofollow\"><img alt=\"CircleCI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/81cd2103cd0b33e9a7e887322c7dab704e873d3e/68747470733a2f2f636972636c6563692e636f6d2f67682f796c6174686f757269732f62696f2e7376673f7374796c653d736869656c64\"></a>  <img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0a64f84ff993066f90d9885f5981b728963c18e7/636f7665726167652e737667\"></p>\n<hr>\n<h1>Code Bio</h1>\n<p>The <code>bio</code> package provides utilities for profiling python code.</p>\n<ul>\n<li><a href=\"#decorator.profile\" rel=\"nofollow\">Decorator</a></li>\n<li><a href=\"#contextmanager.profiler\" rel=\"nofollow\">Context Manager</a></li>\n</ul>\n<br>\n<h2>Installation</h2>\n<pre><code>pip install bio\n</code></pre>\n<br>\n<h3><a></a>Decorator</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bio</span>\n\n<span class=\"nd\">@bio</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_functon</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff here</span>\n</pre>\n<p>Using the <code>@bio.profile()</code> decorator with no arguments will simply print\nthe output to <code>stdout</code>. Alternatively, you can provide the file location\nfor the profiler output.</p>\n<pre><span class=\"nd\">@bio</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file.prof\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_functon</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff here</span>\n</pre>\n<p>In the example shown above, the output will be written to both <code>stdout</code>\nand the given file location. If you would prefer not to write to <code>stdout</code>\nyou can use the <code>quiet=True</code> option.</p>\n<pre><span class=\"nd\">@bio</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file.prof\"</span><span class=\"p\">,</span> <span class=\"n\">quiet</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">my_functon</span><span class=\"p\">():</span>\n    <span class=\"c1\"># Do stuff here</span>\n</pre>\n<br>\n<h3><a></a>Context Manager</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">bio</span>\n\n<span class=\"k\">with</span> <span class=\"n\">bio</span><span class=\"o\">.</span><span class=\"n\">profiler</span><span class=\"p\">(</span><span class=\"s2\">\"/path/to/file.prof\"</span><span class=\"p\">):</span>\n    <span class=\"c1\"># Do stuff here</span>\n</pre>\n<br>\n<h1>Developers</h1>\n<h3><a></a>Testing</h3>\n<p>Bio uses <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a> for testing. To run the tests, simply do:</p>\n<pre><code>tox\n</code></pre>\n<p>The configuration for <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a> can be found in the <strong>tox.ini</strong> file. Bio\nuses <a href=\"https://docs.pytest.org/en/latest\" rel=\"nofollow\">pytest</a> as the preferred testing framework. Prior to running the\ntests, <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a> will execute an auto-formatting tool called <a href=\"https://github.com/ambv/black\" rel=\"nofollow\">black</a>. After\nthe tests have completed, <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a> will create the coverage badge (shown at\nthe top of this page) using the <a href=\"https://github.com/dbrgn/coverage-badge\" rel=\"nofollow\">coverage_badge</a> tool.</p>\n\n          </div>"}, "last_serial": 4820027, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "b67f9cace4cd1156e4f1ad77e17a8566", "sha256": "1a482e2f3aa0b83ebf08cb5e5a099c527463f4a95182bc81fd31a2217a265f5a"}, "downloads": -1, "filename": "bio-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b67f9cace4cd1156e4f1ad77e17a8566", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 3825, "upload_time": "2019-02-14T12:01:03", "upload_time_iso_8601": "2019-02-14T12:01:03.651111Z", "url": "https://files.pythonhosted.org/packages/14/c2/43663d53b93ef7b4d42cd3550631552887f36db02c0150d803c69ba636a6/bio-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44079076edf90c17c316204dda2ec0a4", "sha256": "23535a9cb11aaa4b792e4c9b3a88c76ccfe0df6710b282da3a4e2427193df643"}, "downloads": -1, "filename": "bio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44079076edf90c17c316204dda2ec0a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 3054, "upload_time": "2019-02-14T12:01:09", "upload_time_iso_8601": "2019-02-14T12:01:09.217538Z", "url": "https://files.pythonhosted.org/packages/05/9f/d92e035de36200d9929927f5f15dcc1f251f9fd9181f5db206700be74900/bio-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b67f9cace4cd1156e4f1ad77e17a8566", "sha256": "1a482e2f3aa0b83ebf08cb5e5a099c527463f4a95182bc81fd31a2217a265f5a"}, "downloads": -1, "filename": "bio-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b67f9cace4cd1156e4f1ad77e17a8566", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 3825, "upload_time": "2019-02-14T12:01:03", "upload_time_iso_8601": "2019-02-14T12:01:03.651111Z", "url": "https://files.pythonhosted.org/packages/14/c2/43663d53b93ef7b4d42cd3550631552887f36db02c0150d803c69ba636a6/bio-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44079076edf90c17c316204dda2ec0a4", "sha256": "23535a9cb11aaa4b792e4c9b3a88c76ccfe0df6710b282da3a4e2427193df643"}, "downloads": -1, "filename": "bio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "44079076edf90c17c316204dda2ec0a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, <4", "size": 3054, "upload_time": "2019-02-14T12:01:09", "upload_time_iso_8601": "2019-02-14T12:01:09.217538Z", "url": "https://files.pythonhosted.org/packages/05/9f/d92e035de36200d9929927f5f15dcc1f251f9fd9181f5db206700be74900/bio-0.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:27 2020"}