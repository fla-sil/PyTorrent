{"info": {"author": "myl7", "author_email": "myl7.ustc@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: Proxy Servers", "Typing :: Typed"], "description": "# ssrcli\n\n[![Build Status](https://travis-ci.org/myl7/ssrcli.svg?branch=master)](https://travis-ci.org/myl7/ssrcli)\n[![codecov.io Code Coverage](https://codecov.io/gh/myl7/ssrcli/branch/master/graph/badge.svg)](https://codecov.io/gh/myl7/ssrcli)\n[![Known Vulnerabilities](https://snyk.io/test/github/myl7/ssrcli/badge.svg?targetFile=requirements.txt)](https://snyk.io/test/github/myl7/ssrcli?targetFile=requirements.txt)\n[![Maintainability](https://api.codeclimate.com/v1/badges/b3c6db1a25f3fd84d654/maintainability)](https://codeclimate.com/github/myl7/ssrcli/maintainability)\n\nSSR management client on Linux with command line interface\n\n## Features\n\n- Command line interface, which is friendly for headless environment\n- All-in-one management for SSR application, configuration and subscription\n- pacman-style commands, which is short and easy for use\n- Support subscription update, configuration share URL and more useful function\n\n## Prerequisites\n\n- `Python` >= 3.6\n- `git` for SSR installation\n- `lsof` to check local port\n\n## Get Started\n\nFirst install this package from PyPI:\n\n```shell\npip3 install ssrcli\n```\n\nThen use ssrcli to install SSR:\n\n```shell\nssrcli --install\n```\n\nFollowing [XDG Base Directory Specification](https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html),\nSSR will be downloaded to `~/.local/share/shadowsocksr`\n\nThen add your SSR configuration using ssrcli and use it. For example, if you have a SSR subscription url, do:\n\n```shell\n# Add a subscription\nssrcli -Saj '{\"name\": \"<the name>\", \"url\": \"<the url>\"}'\n# Update all subscription\nssrcli -Sua\n# List all got configuration\nssrcli -Cla\n# Choose one. With its id, use the configuration\nssrcli -Csc '<the id>'\n# Start SSR\nssrcli -O\n# Or restart SSR, which would ensure SSR is on\nssrcli -R\n```\n\nFor more information, refer to the below content of this readme or `ssrcli -h`\n\n## Config\n\nWe recommend not to use a custom ssrcli config file for the default config is enough and good\n\nssrcli will go through XDG_CONFIG_DIRS to search for `ssrcli/ssrcli-config.json` to load.\nFollowing XDG Standard, you should put your config file as `~/.config/ssrcli/ssrcli-config.json`.\nThis is a JSON file which can optionally contains the below options. Both upper case and lower case is OK.\n\n|         Name          |          Default Value           |                  Description                  |\n|-----------------------|----------------------------------|-----------------------------------------------|\n| DB_PATH               | ~/.local/share/ssrcli/db.sqlite3 | Path to the database file containing all data |\n| SSR_APP_PATH          | ~/.local/share/shadowsocksr      | Path to the folder containing SSR             |\n| SSR_CONF_PATH         | ~/.config/ssrcli/ssr-config.json | Path to the SSR config file                   |\n| SSR_LOCAL_PORT        | 1080                             | Local port used by SSR                        |\n| SSR_CONF_EXTRA_FIELDS | See below                        | Extra JSON content added to SSR config file   |\n| UPDATE_TIMEOUT        | 10                               | Timeout when updating (Unit: s)               |\n| UPDATE_RETRY          | 5                                | Retry times when update failed                |\n\nThe default value of SSR_CONF_EXTRA_FIELDS is:\n\n```json\n{\n  \"local_address\": \"127.0.0.1\",\n  \"local_port\": \"$SSR_LOCAL_PORT\",\n  \"timeout\": 300\n}\n```\n\nIn this JSON \\$SSR_LOCAL_PORT will be replaced by the same-name config argument SSR_LOCAL_PORT\n\n## Usage\n\nShow help and version:\n\nMore options could be found here\n\n```shell\nssrcli -h\nssrcli -V\n```\n\nBelow we shorten configuration as conf and subscription as sub\n\nInstall/remove SSR with `--install` and `--remove`\n\nStart/stop/restart SSR with `-O`(on), `-F`(off) and `-R`(restart)\n\nTest SSR integrity with `--test`\n\nManage conf with `-C` and sub with `-S`\n\nBoth conf and sub support `-l`(list), `-n`(add), `-d`(delete)\n\nConf additionally support `-s`(use), sub additionally support `-u`(update)\n\nYou can pass multi `-c <id>` to choose multi objects to be processed\n\nYou can pass `-j <json>` to provide information. The option value should be a valid JSON with all required fields.\n\nYou can add `-a` to perform action on all objects, and usually without `-a`, the default objects of a action is all\nobjects except for `-d`(delete). Without given objects `-d`(delete) will raise a exception.\n\nAs for update, when updating a sub, all old conf belonging to the sub will be removed\n\nYou can pass `-r`(current) to ssrcli when using `-l`(list) to show currently used SSR conf\n\nFor more information, type `ssrcli -h` to read. The below is some examples:\n\n```shell\n# Show help\nssrcli -h\n# Add a conf from JSON\nssrcli -Caj '{\n  \"server\": \"::1\",\n  \"server_port\": 30000,\n  \"protocol\": \"origin\",\n  \"method\": \"none\",\n  \"obfs\": \"plain\",\n  \"password\": \"test\",\n  \"obfs_param\": \"\",\n  \"protocol_param\": \"\",\n  \"remarks\": \"test\",\n  \"group\": \"test\"\n  }'\n# Add a sub from JSON\nssrcli -Caj '{\"name\": \"test\", \"url\": \"https://test.test\"}'\n# List all conf with currently used conf\nssrcli -Clar\n# Update all sub with proxy\nssrcli -Suap '{\"socks5\": \"127.0.0.1:1080\"}'\n```\n\n## Test\n\nFirst install the test requirements in `requirements.txt`\n\nThen Move to `tests` folder and start the tests with `test.sh` script:\n\n```shell\ncd tests  # IMPORTANT, as many tests would rely on the relative path\n./test.sh\n```\n\nIn tests, port 1080, 8001, 8002 will be used. Make sure them bindable or change the ports in `test.sh` and `shared.py`.\n\nInternet is required to download SSR.\nOr you can use another pytest command in `test.sh` with downloading SSR to `tests/shadowsocksr` previously.\n\nFor the use of Popen, after a failed test port 1080 may be bind by left SSR. Just kill it.\n\n## License\n\nMIT", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/myl7/ssrcli", "keywords": "ssr,ssr-client", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "ssrcli", "package_url": "https://pypi.org/project/ssrcli/", "platform": "Linux", "project_url": "https://pypi.org/project/ssrcli/", "project_urls": {"Homepage": "https://github.com/myl7/ssrcli"}, "release_url": "https://pypi.org/project/ssrcli/3.1.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "SSR management client with shell interface", "version": "3.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ssrcli</h1>\n<p><a href=\"https://travis-ci.org/myl7/ssrcli\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eea5fa47fa539e7f66c96f5fbfdd3089e4524bfe/68747470733a2f2f7472617669732d63692e6f72672f6d796c372f737372636c692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/myl7/ssrcli\" rel=\"nofollow\"><img alt=\"codecov.io Code Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d78be5ea95de257485aa5fa30e502dfa5fbc34a/68747470733a2f2f636f6465636f762e696f2f67682f6d796c372f737372636c692f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://snyk.io/test/github/myl7/ssrcli?targetFile=requirements.txt\" rel=\"nofollow\"><img alt=\"Known Vulnerabilities\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fb8bbe07668da50386398131d0781efac15339b0/68747470733a2f2f736e796b2e696f2f746573742f6769746875622f6d796c372f737372636c692f62616467652e7376673f74617267657446696c653d726571756972656d656e74732e747874\"></a>\n<a href=\"https://codeclimate.com/github/myl7/ssrcli/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e39dd5d79ce07598bf0ca8394c5e6f26c1b64437/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f62336336646231613235663366643834643635342f6d61696e7461696e6162696c697479\"></a></p>\n<p>SSR management client on Linux with command line interface</p>\n<h2>Features</h2>\n<ul>\n<li>Command line interface, which is friendly for headless environment</li>\n<li>All-in-one management for SSR application, configuration and subscription</li>\n<li>pacman-style commands, which is short and easy for use</li>\n<li>Support subscription update, configuration share URL and more useful function</li>\n</ul>\n<h2>Prerequisites</h2>\n<ul>\n<li><code>Python</code> &gt;= 3.6</li>\n<li><code>git</code> for SSR installation</li>\n<li><code>lsof</code> to check local port</li>\n</ul>\n<h2>Get Started</h2>\n<p>First install this package from PyPI:</p>\n<pre>pip3 install ssrcli\n</pre>\n<p>Then use ssrcli to install SSR:</p>\n<pre>ssrcli --install\n</pre>\n<p>Following <a href=\"https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html\" rel=\"nofollow\">XDG Base Directory Specification</a>,\nSSR will be downloaded to <code>~/.local/share/shadowsocksr</code></p>\n<p>Then add your SSR configuration using ssrcli and use it. For example, if you have a SSR subscription url, do:</p>\n<pre><span class=\"c1\"># Add a subscription</span>\nssrcli -Saj <span class=\"s1\">'{\"name\": \"&lt;the name&gt;\", \"url\": \"&lt;the url&gt;\"}'</span>\n<span class=\"c1\"># Update all subscription</span>\nssrcli -Sua\n<span class=\"c1\"># List all got configuration</span>\nssrcli -Cla\n<span class=\"c1\"># Choose one. With its id, use the configuration</span>\nssrcli -Csc <span class=\"s1\">'&lt;the id&gt;'</span>\n<span class=\"c1\"># Start SSR</span>\nssrcli -O\n<span class=\"c1\"># Or restart SSR, which would ensure SSR is on</span>\nssrcli -R\n</pre>\n<p>For more information, refer to the below content of this readme or <code>ssrcli -h</code></p>\n<h2>Config</h2>\n<p>We recommend not to use a custom ssrcli config file for the default config is enough and good</p>\n<p>ssrcli will go through XDG_CONFIG_DIRS to search for <code>ssrcli/ssrcli-config.json</code> to load.\nFollowing XDG Standard, you should put your config file as <code>~/.config/ssrcli/ssrcli-config.json</code>.\nThis is a JSON file which can optionally contains the below options. Both upper case and lower case is OK.</p>\n<table>\n<thead>\n<tr>\n<th>Name</th>\n<th>Default Value</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>DB_PATH</td>\n<td>~/.local/share/ssrcli/db.sqlite3</td>\n<td>Path to the database file containing all data</td>\n</tr>\n<tr>\n<td>SSR_APP_PATH</td>\n<td>~/.local/share/shadowsocksr</td>\n<td>Path to the folder containing SSR</td>\n</tr>\n<tr>\n<td>SSR_CONF_PATH</td>\n<td>~/.config/ssrcli/ssr-config.json</td>\n<td>Path to the SSR config file</td>\n</tr>\n<tr>\n<td>SSR_LOCAL_PORT</td>\n<td>1080</td>\n<td>Local port used by SSR</td>\n</tr>\n<tr>\n<td>SSR_CONF_EXTRA_FIELDS</td>\n<td>See below</td>\n<td>Extra JSON content added to SSR config file</td>\n</tr>\n<tr>\n<td>UPDATE_TIMEOUT</td>\n<td>10</td>\n<td>Timeout when updating (Unit: s)</td>\n</tr>\n<tr>\n<td>UPDATE_RETRY</td>\n<td>5</td>\n<td>Retry times when update failed</td>\n</tr></tbody></table>\n<p>The default value of SSR_CONF_EXTRA_FIELDS is:</p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"local_address\"</span><span class=\"p\">:</span> <span class=\"s2\">\"127.0.0.1\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"local_port\"</span><span class=\"p\">:</span> <span class=\"s2\">\"$SSR_LOCAL_PORT\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"timeout\"</span><span class=\"p\">:</span> <span class=\"mi\">300</span>\n<span class=\"p\">}</span>\n</pre>\n<p>In this JSON $SSR_LOCAL_PORT will be replaced by the same-name config argument SSR_LOCAL_PORT</p>\n<h2>Usage</h2>\n<p>Show help and version:</p>\n<p>More options could be found here</p>\n<pre>ssrcli -h\nssrcli -V\n</pre>\n<p>Below we shorten configuration as conf and subscription as sub</p>\n<p>Install/remove SSR with <code>--install</code> and <code>--remove</code></p>\n<p>Start/stop/restart SSR with <code>-O</code>(on), <code>-F</code>(off) and <code>-R</code>(restart)</p>\n<p>Test SSR integrity with <code>--test</code></p>\n<p>Manage conf with <code>-C</code> and sub with <code>-S</code></p>\n<p>Both conf and sub support <code>-l</code>(list), <code>-n</code>(add), <code>-d</code>(delete)</p>\n<p>Conf additionally support <code>-s</code>(use), sub additionally support <code>-u</code>(update)</p>\n<p>You can pass multi <code>-c &lt;id&gt;</code> to choose multi objects to be processed</p>\n<p>You can pass <code>-j &lt;json&gt;</code> to provide information. The option value should be a valid JSON with all required fields.</p>\n<p>You can add <code>-a</code> to perform action on all objects, and usually without <code>-a</code>, the default objects of a action is all\nobjects except for <code>-d</code>(delete). Without given objects <code>-d</code>(delete) will raise a exception.</p>\n<p>As for update, when updating a sub, all old conf belonging to the sub will be removed</p>\n<p>You can pass <code>-r</code>(current) to ssrcli when using <code>-l</code>(list) to show currently used SSR conf</p>\n<p>For more information, type <code>ssrcli -h</code> to read. The below is some examples:</p>\n<pre><span class=\"c1\"># Show help</span>\nssrcli -h\n<span class=\"c1\"># Add a conf from JSON</span>\nssrcli -Caj <span class=\"s1\">'{</span>\n<span class=\"s1\">  \"server\": \"::1\",</span>\n<span class=\"s1\">  \"server_port\": 30000,</span>\n<span class=\"s1\">  \"protocol\": \"origin\",</span>\n<span class=\"s1\">  \"method\": \"none\",</span>\n<span class=\"s1\">  \"obfs\": \"plain\",</span>\n<span class=\"s1\">  \"password\": \"test\",</span>\n<span class=\"s1\">  \"obfs_param\": \"\",</span>\n<span class=\"s1\">  \"protocol_param\": \"\",</span>\n<span class=\"s1\">  \"remarks\": \"test\",</span>\n<span class=\"s1\">  \"group\": \"test\"</span>\n<span class=\"s1\">  }'</span>\n<span class=\"c1\"># Add a sub from JSON</span>\nssrcli -Caj <span class=\"s1\">'{\"name\": \"test\", \"url\": \"https://test.test\"}'</span>\n<span class=\"c1\"># List all conf with currently used conf</span>\nssrcli -Clar\n<span class=\"c1\"># Update all sub with proxy</span>\nssrcli -Suap <span class=\"s1\">'{\"socks5\": \"127.0.0.1:1080\"}'</span>\n</pre>\n<h2>Test</h2>\n<p>First install the test requirements in <code>requirements.txt</code></p>\n<p>Then Move to <code>tests</code> folder and start the tests with <code>test.sh</code> script:</p>\n<pre><span class=\"nb\">cd</span> tests  <span class=\"c1\"># IMPORTANT, as many tests would rely on the relative path</span>\n./test.sh\n</pre>\n<p>In tests, port 1080, 8001, 8002 will be used. Make sure them bindable or change the ports in <code>test.sh</code> and <code>shared.py</code>.</p>\n<p>Internet is required to download SSR.\nOr you can use another pytest command in <code>test.sh</code> with downloading SSR to <code>tests/shadowsocksr</code> previously.</p>\n<p>For the use of Popen, after a failed test port 1080 may be bind by left SSR. Just kill it.</p>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6221246, "releases": {"3.1.0": [{"comment_text": "", "digests": {"md5": "a160988aec70bca85b9090f6c93e75e3", "sha256": "7a481e0ec98e829d4ded8f739b44e2bef19790712f09615b4d1ce44437eec08b"}, "downloads": -1, "filename": "ssrcli-3.1.0.tar.gz", "has_sig": false, "md5_digest": "a160988aec70bca85b9090f6c93e75e3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8967, "upload_time": "2019-11-29T18:38:59", "upload_time_iso_8601": "2019-11-29T18:38:59.647934Z", "url": "https://files.pythonhosted.org/packages/55/8c/fe8fdc013e527a54dbb8c90336b505afb66180a877d90474c9b7cdb5be16/ssrcli-3.1.0.tar.gz", "yanked": false}], "3.1.1": [{"comment_text": "", "digests": {"md5": "06ac5bb89b6c1c0c2263c5d78589618b", "sha256": "18c2eabd09e67bb835a2b04dc57d11fb32f1de0e3d9d13af7cf58b0370865b0d"}, "downloads": -1, "filename": "ssrcli-3.1.1.tar.gz", "has_sig": false, "md5_digest": "06ac5bb89b6c1c0c2263c5d78589618b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8752, "upload_time": "2019-11-30T08:01:45", "upload_time_iso_8601": "2019-11-30T08:01:45.022279Z", "url": "https://files.pythonhosted.org/packages/57/d8/d6040c523bc382d0b4de738ad0b2833d6b1a880a43f94fb3f2a8088ff8eb/ssrcli-3.1.1.tar.gz", "yanked": false}], "3.1.2": [{"comment_text": "", "digests": {"md5": "a2b380e83e11f3e64e2f4f14aa26e07f", "sha256": "282d431dfca1ebbcfb6f578adf9f607e796dfe0500ff042e55cfa1e857fb0a41"}, "downloads": -1, "filename": "ssrcli-3.1.2.tar.gz", "has_sig": false, "md5_digest": "a2b380e83e11f3e64e2f4f14aa26e07f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13589, "upload_time": "2019-11-30T10:26:40", "upload_time_iso_8601": "2019-11-30T10:26:40.246473Z", "url": "https://files.pythonhosted.org/packages/16/e2/6d10ab958d63682545c1de4b0729e9db029361f94438ff6496cd1f3079ca/ssrcli-3.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a2b380e83e11f3e64e2f4f14aa26e07f", "sha256": "282d431dfca1ebbcfb6f578adf9f607e796dfe0500ff042e55cfa1e857fb0a41"}, "downloads": -1, "filename": "ssrcli-3.1.2.tar.gz", "has_sig": false, "md5_digest": "a2b380e83e11f3e64e2f4f14aa26e07f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13589, "upload_time": "2019-11-30T10:26:40", "upload_time_iso_8601": "2019-11-30T10:26:40.246473Z", "url": "https://files.pythonhosted.org/packages/16/e2/6d10ab958d63682545c1de4b0729e9db029361f94438ff6496cd1f3079ca/ssrcli-3.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:57 2020"}