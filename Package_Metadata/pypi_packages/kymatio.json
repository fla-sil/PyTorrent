{"info": {"author": "Edouard Oyallon, Eugene Belilovsky, Sergey Zagoruyko, Michael Eickenberg, Mathieu Andreux, Georgios Exarchakis, Louis Thiry, Vincent Lostanlen, Joakim And\u00e9n, Tom\u00e1s Angles, Gabriel Huang, Roberto Leonarduzzi", "author_email": "edouard.oyallon@lip6.fr, belilove@iro.umontreal.ca, sergey.zagoruyko@inria.fr, michael.eickenberg@berkeley.edu, mathieu.andreux@ens.fr, georgios.exarchakis@ens.fr, louis.thiry@ens.fr, vincent.lostanlen@nyu.edu, janden@flatironinstitute.org, tomas.angles@ens.fr, gabriel.huang@umontreal.ca, roberto.leonarduzzi@ens.fr", "bugtrack_url": null, "classifiers": ["Intended Audience :: Education", "Intended Audience :: Science/Research", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: MacOS", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Multimedia :: Graphics :: 3D Modeling", "Topic :: Multimedia :: Sound/Audio :: Analysis", "Topic :: Scientific/Engineering :: Artificial Intelligence", "Topic :: Scientific/Engineering :: Chemistry", "Topic :: Scientific/Engineering :: Image Recognition", "Topic :: Scientific/Engineering :: Information Analysis", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Kymatio: Wavelet scattering in Python\n======================================\n\nKymatio is an implementation of the wavelet scattering transform in the Python programming language, suitable for large-scale numerical experiments in signal processing and machine learning.\nScattering transforms are translation-invariant signal representations implemented as convolutional networks whose filters are not learned, but fixed (as wavelet filters).\n\n\n\nUse Kymatio if you need a library that:\n* supports 1-D, 2-D, and 3-D wavelets,\n* integrates wavelet scattering in a deep learning architecture, and\n* runs seamlessly on CPU and GPU hardware, with major deep learning APIs, such\n  as PyTorch and TensorFlow.\n\n# The Kymatio environment\n\n## Flexibility\n\nThe Kymatio organization associates the developers of several pre-existing packages for wavelet scattering, including `ScatNet`, `scattering.m`, `PyScatWave`, `WaveletScattering.jl`, and `PyScatHarm`.\n\nThe resort to PyTorch tensors as inputs to Kymatio allows the programmer to backpropagate the gradient of wavelet scattering coefficients, thus integrating them within an end-to-end trainable pipeline, such as a deep neural network.\n\n## Portability\n\nEach of these algorithms is written in a high-level imperative paradigm, making it portable to any Python library for array operations as long as it enables complex-valued linear algebra and a fast Fourier transform (FFT).\n\nEach algorithm comes packaged with a frontend and backend. The frontend takes care of\ninterfacing with the user. The backend defines functions necessary for\ncomputation of the scattering transform.\n\nCurrently, there are six available frontend\u2013backend pairs, NumPy (CPU), scikit-learn (CPU), pure PyTorch (CPU and GPU), PyTorch+scikit-cuda (GPU), TensorFlow (CPU and GPU), and Keras (CPU and GPU).\n\n## Scalability\n\nKymatio integrates the construction of wavelet filter banks in 1D, 2D, and 3D, as well as memory-efficient algorithms for extracting wavelet scattering coefficients, under a common application programming interface.\n\nRunning Kymatio on a graphics processing unit (GPU) rather than a multi-core conventional central processing unit (CPU) allows for significant speedups in computing the scattering transform.\nThe current speedup with respect to CPU-based MATLAB code is of the order of 10 in 1D and 3D and of the order of 100 in 2D.\n\nWe refer to our [official benchmarks](https://www.kymat.io/userguide.html#benchmarks) for further details.\n\n## How to cite\n\nIf you use this package, please cite the following paper:\n\nAndreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And\u00e9n J., Belilovsky E., Bruna J., Lostanlen V., Hirn M. J., Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio: Scattering Transforms in Python. arXiv preprint arXiv:1812.11214. [(paper)](https://arxiv.org/abs/1812.11214)\n\n# Installation\n\n\n## Dependencies\n\nKymatio requires:\n\n* Python (>= 3.5)\n* SciPy (>= 0.13)\n\n\n### Standard installation (on CPU hardware)\nWe strongly recommend running Kymatio in an Anaconda environment, because this simplifies the installation of other\ndependencies. You may install the latest version of Kymatio using the package manager `pip`, which will automatically download\nKymatio from the Python Package Index (PyPI):\n\n```\npip install kymatio\n```\n\nLinux and macOS are the two officially supported operating systems.\n\n\n# Frontend\n\n## NumPy\n\nTo explicitly call the `numpy` frontend, run:\n\n```\nfrom kymatio.numpy import Scattering2D\nscattering = Scattering2D(J=2, shape=(32, 32))\n```\n\n## Scikit-learn\n\nAfter installing the latest version of scikit-learn, you can call `Scattering2D` as a `Transformer` using:\n\n```\nfrom kymatio.sklearn import Scattering2D\n\nscattering_transformer = Scattering2D(2, (32, 32))\n```\n\n## PyTorch\n\nAfter installing the latest version of PyTorch, you can call `Scattering2D` as a `torch.nn.Module` using:\n\n```\nfrom kymatio.torch import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32))\n```\n\n## TensorFlow\n\nAfter installing the latest version of TensorFlow, you can call `Scattering2D` as a `tf.Module` using:\n\n```\nfrom kymatio.tensorflow import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32))\n```\n\n## Keras\n\nAlternatively, with TensorFlow installed, you can call `Scattering2D` as a Keras `Layer` using:\n\n```\nfrom tensorflow.keras.layers import Input\nfrom kymatio.keras import Scattering2D\n\ninputs = Input(shape=(32, 32))\nscattering = Scattering2D(J=2)(inputs)\n```\n\n# Installation from source\n\nAssuming the Kymatio source has been downloaded, you may install it by running\n\n```\npip install -r requirements.txt\npython setup.py install\n```\n\nDevelopers can also install Kymatio via:\n\n```\npip install -r requirements.txt\npython setup.py develop\n```\n\n\n## GPU acceleration\n\nCertain frontends, `numpy` and `sklearn`, only allow processing on the CPU and are therefore slower. The `torch`, `tensorflow`, and `keras` frontends, however, also support GPU processing, which can significantly accelerate computations. Additionally, the `torch` backend supports an optimized `skcuda` backend which currently provides the fastest performance in computing scattering transforms. In 2D, it may be instantiated using:\n\n```\nfrom kymatio.torch import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32), backend='torch_skcuda')\n```\n\nThis is particularly useful when working with large images, such as those in ImageNet, which are of size 224\u00d7224.\n\n## PyTorch and scikit-cuda\n\nTo run Kymatio on a graphics processing unit (GPU), you can either use the PyTorch-style `cuda()` method to move your\nobject to GPU. Kymatio is designed to operate on a variety of backends for tensor operations. For extra speed, install\nthe CUDA library and the `skcuda` dependency by running the following pip command:\n\n```\npip install scikit-cuda cupy\n```\n\nThe user may control the choice of backend at runtime via for instance:\n\n```\nfrom kymatio.torch import Scattering2D\nscattering = Scattering2D(J=2, shape=(32, 32)), backend='torch_skcuda')\n```\n\n# Documentation\n\nThe documentation of Kymatio is officially hosted on the [kymat.io](https://www.kymat.io/) website.\n\n\n## Online resources\n\n* [GitHub repository](https://github.com/kymatio/kymatio)\n* [GitHub issue tracker](https://github.com/kymatio/kymatio/issues)\n* [BSD-3-Clause license](https://github.com/kymatio/kymatio/blob/master/LICENSE.md)\n* [List of authors](https://github.com/kymatio/kymatio/blob/master/AUTHORS.md)\n* [Code of conduct](https://github.com/kymatio/kymatio/blob/master/CODE_OF_CONDUCT.md)\n\n\n## Building the documentation from source\nThe documentation can also be found in the `doc/` subfolder of the GitHub repository.\nTo build the documentation locally, please clone this repository and run\n\n```\npip install -r requirements_optional.txt\ncd doc; make clean; make html\n```\n\n## Support\n\nWe wish to thank the Scientific Computing Core at the Flatiron Institute for the use of their computing resources for testing.\n\n<a href=\"https://www.flatironinstitute.org/\"><img src=\"https://itensor.org/flatiron_logo.png\" height=\"100\"></a>\n\nWe would also like to thank \u00c9cole Normale Sup\u00e9rieure for their support.\n\n\n## Kymatio\n\nKyma (*\u03ba\u03cd\u03bc\u03b1*) means *wave* in Greek. By the same token, Kymatio (*\u03ba\u03c5\u03bc\u03ac\u03c4\u03b9\u03bf*) means *wavelet*.\n\nNote that the organization and the library are capitalized (*Kymatio*) whereas the corresponding Python module is written in lowercase (`import kymatio`).\n\nThe recommended pronunciation for Kymatio is *kim-ah-tio*. In other words, it rhymes with patio, not with ratio.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/kymatio/kymatio/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://www.kymat.io", "keywords": "", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "kymatio", "package_url": "https://pypi.org/project/kymatio/", "platform": "", "project_url": "https://pypi.org/project/kymatio/", "project_urls": {"Authors": "https://github.com/kymatio/kymatio/blob/master/AUTHORS.md", "Documentation": "https://www.kymat.io/codereference.html", "Download": "https://github.com/kymatio/kymatio/releases", "Homepage": "https://www.kymat.io", "Source": "https://github.com/kymatio/kymatio/", "Tracker": "https://github.com/kymatio/kymatio/issues"}, "release_url": "https://pypi.org/project/kymatio/0.2.0/", "requires_dist": ["numpy", "scipy", "appdirs", "configparser", "packaging"], "requires_python": ">=3.5", "summary": "Wavelet scattering transforms in Python with GPU acceleration", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Kymatio: Wavelet scattering in Python</h1>\n<p>Kymatio is an implementation of the wavelet scattering transform in the Python programming language, suitable for large-scale numerical experiments in signal processing and machine learning.\nScattering transforms are translation-invariant signal representations implemented as convolutional networks whose filters are not learned, but fixed (as wavelet filters).</p>\n<p>Use Kymatio if you need a library that:</p>\n<ul>\n<li>supports 1-D, 2-D, and 3-D wavelets,</li>\n<li>integrates wavelet scattering in a deep learning architecture, and</li>\n<li>runs seamlessly on CPU and GPU hardware, with major deep learning APIs, such\nas PyTorch and TensorFlow.</li>\n</ul>\n<h1>The Kymatio environment</h1>\n<h2>Flexibility</h2>\n<p>The Kymatio organization associates the developers of several pre-existing packages for wavelet scattering, including <code>ScatNet</code>, <code>scattering.m</code>, <code>PyScatWave</code>, <code>WaveletScattering.jl</code>, and <code>PyScatHarm</code>.</p>\n<p>The resort to PyTorch tensors as inputs to Kymatio allows the programmer to backpropagate the gradient of wavelet scattering coefficients, thus integrating them within an end-to-end trainable pipeline, such as a deep neural network.</p>\n<h2>Portability</h2>\n<p>Each of these algorithms is written in a high-level imperative paradigm, making it portable to any Python library for array operations as long as it enables complex-valued linear algebra and a fast Fourier transform (FFT).</p>\n<p>Each algorithm comes packaged with a frontend and backend. The frontend takes care of\ninterfacing with the user. The backend defines functions necessary for\ncomputation of the scattering transform.</p>\n<p>Currently, there are six available frontend\u2013backend pairs, NumPy (CPU), scikit-learn (CPU), pure PyTorch (CPU and GPU), PyTorch+scikit-cuda (GPU), TensorFlow (CPU and GPU), and Keras (CPU and GPU).</p>\n<h2>Scalability</h2>\n<p>Kymatio integrates the construction of wavelet filter banks in 1D, 2D, and 3D, as well as memory-efficient algorithms for extracting wavelet scattering coefficients, under a common application programming interface.</p>\n<p>Running Kymatio on a graphics processing unit (GPU) rather than a multi-core conventional central processing unit (CPU) allows for significant speedups in computing the scattering transform.\nThe current speedup with respect to CPU-based MATLAB code is of the order of 10 in 1D and 3D and of the order of 100 in 2D.</p>\n<p>We refer to our <a href=\"https://www.kymat.io/userguide.html#benchmarks\" rel=\"nofollow\">official benchmarks</a> for further details.</p>\n<h2>How to cite</h2>\n<p>If you use this package, please cite the following paper:</p>\n<p>Andreux M., Angles T., Exarchakis G., Leonarduzzi R., Rochette G., Thiry L., Zarka J., Mallat S., And\u00e9n J., Belilovsky E., Bruna J., Lostanlen V., Hirn M. J., Oyallon E., Zhang S., Cella C., Eickenberg M. (2019). Kymatio: Scattering Transforms in Python. arXiv preprint arXiv:1812.11214. <a href=\"https://arxiv.org/abs/1812.11214\" rel=\"nofollow\">(paper)</a></p>\n<h1>Installation</h1>\n<h2>Dependencies</h2>\n<p>Kymatio requires:</p>\n<ul>\n<li>Python (&gt;= 3.5)</li>\n<li>SciPy (&gt;= 0.13)</li>\n</ul>\n<h3>Standard installation (on CPU hardware)</h3>\n<p>We strongly recommend running Kymatio in an Anaconda environment, because this simplifies the installation of other\ndependencies. You may install the latest version of Kymatio using the package manager <code>pip</code>, which will automatically download\nKymatio from the Python Package Index (PyPI):</p>\n<pre><code>pip install kymatio\n</code></pre>\n<p>Linux and macOS are the two officially supported operating systems.</p>\n<h1>Frontend</h1>\n<h2>NumPy</h2>\n<p>To explicitly call the <code>numpy</code> frontend, run:</p>\n<pre><code>from kymatio.numpy import Scattering2D\nscattering = Scattering2D(J=2, shape=(32, 32))\n</code></pre>\n<h2>Scikit-learn</h2>\n<p>After installing the latest version of scikit-learn, you can call <code>Scattering2D</code> as a <code>Transformer</code> using:</p>\n<pre><code>from kymatio.sklearn import Scattering2D\n\nscattering_transformer = Scattering2D(2, (32, 32))\n</code></pre>\n<h2>PyTorch</h2>\n<p>After installing the latest version of PyTorch, you can call <code>Scattering2D</code> as a <code>torch.nn.Module</code> using:</p>\n<pre><code>from kymatio.torch import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32))\n</code></pre>\n<h2>TensorFlow</h2>\n<p>After installing the latest version of TensorFlow, you can call <code>Scattering2D</code> as a <code>tf.Module</code> using:</p>\n<pre><code>from kymatio.tensorflow import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32))\n</code></pre>\n<h2>Keras</h2>\n<p>Alternatively, with TensorFlow installed, you can call <code>Scattering2D</code> as a Keras <code>Layer</code> using:</p>\n<pre><code>from tensorflow.keras.layers import Input\nfrom kymatio.keras import Scattering2D\n\ninputs = Input(shape=(32, 32))\nscattering = Scattering2D(J=2)(inputs)\n</code></pre>\n<h1>Installation from source</h1>\n<p>Assuming the Kymatio source has been downloaded, you may install it by running</p>\n<pre><code>pip install -r requirements.txt\npython setup.py install\n</code></pre>\n<p>Developers can also install Kymatio via:</p>\n<pre><code>pip install -r requirements.txt\npython setup.py develop\n</code></pre>\n<h2>GPU acceleration</h2>\n<p>Certain frontends, <code>numpy</code> and <code>sklearn</code>, only allow processing on the CPU and are therefore slower. The <code>torch</code>, <code>tensorflow</code>, and <code>keras</code> frontends, however, also support GPU processing, which can significantly accelerate computations. Additionally, the <code>torch</code> backend supports an optimized <code>skcuda</code> backend which currently provides the fastest performance in computing scattering transforms. In 2D, it may be instantiated using:</p>\n<pre><code>from kymatio.torch import Scattering2D\n\nscattering = Scattering2D(J=2, shape=(32, 32), backend='torch_skcuda')\n</code></pre>\n<p>This is particularly useful when working with large images, such as those in ImageNet, which are of size 224\u00d7224.</p>\n<h2>PyTorch and scikit-cuda</h2>\n<p>To run Kymatio on a graphics processing unit (GPU), you can either use the PyTorch-style <code>cuda()</code> method to move your\nobject to GPU. Kymatio is designed to operate on a variety of backends for tensor operations. For extra speed, install\nthe CUDA library and the <code>skcuda</code> dependency by running the following pip command:</p>\n<pre><code>pip install scikit-cuda cupy\n</code></pre>\n<p>The user may control the choice of backend at runtime via for instance:</p>\n<pre><code>from kymatio.torch import Scattering2D\nscattering = Scattering2D(J=2, shape=(32, 32)), backend='torch_skcuda')\n</code></pre>\n<h1>Documentation</h1>\n<p>The documentation of Kymatio is officially hosted on the <a href=\"https://www.kymat.io/\" rel=\"nofollow\">kymat.io</a> website.</p>\n<h2>Online resources</h2>\n<ul>\n<li><a href=\"https://github.com/kymatio/kymatio\" rel=\"nofollow\">GitHub repository</a></li>\n<li><a href=\"https://github.com/kymatio/kymatio/issues\" rel=\"nofollow\">GitHub issue tracker</a></li>\n<li><a href=\"https://github.com/kymatio/kymatio/blob/master/LICENSE.md\" rel=\"nofollow\">BSD-3-Clause license</a></li>\n<li><a href=\"https://github.com/kymatio/kymatio/blob/master/AUTHORS.md\" rel=\"nofollow\">List of authors</a></li>\n<li><a href=\"https://github.com/kymatio/kymatio/blob/master/CODE_OF_CONDUCT.md\" rel=\"nofollow\">Code of conduct</a></li>\n</ul>\n<h2>Building the documentation from source</h2>\n<p>The documentation can also be found in the <code>doc/</code> subfolder of the GitHub repository.\nTo build the documentation locally, please clone this repository and run</p>\n<pre><code>pip install -r requirements_optional.txt\ncd doc; make clean; make html\n</code></pre>\n<h2>Support</h2>\n<p>We wish to thank the Scientific Computing Core at the Flatiron Institute for the use of their computing resources for testing.</p>\n<p><a href=\"https://www.flatironinstitute.org/\" rel=\"nofollow\"><img height=\"100\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96b091bd6d1b77fb79e2c2373c7179f18c2e4307/68747470733a2f2f6974656e736f722e6f72672f666c617469726f6e5f6c6f676f2e706e67\"></a></p>\n<p>We would also like to thank \u00c9cole Normale Sup\u00e9rieure for their support.</p>\n<h2>Kymatio</h2>\n<p>Kyma (<em>\u03ba\u03cd\u03bc\u03b1</em>) means <em>wave</em> in Greek. By the same token, Kymatio (<em>\u03ba\u03c5\u03bc\u03ac\u03c4\u03b9\u03bf</em>) means <em>wavelet</em>.</p>\n<p>Note that the organization and the library are capitalized (<em>Kymatio</em>) whereas the corresponding Python module is written in lowercase (<code>import kymatio</code>).</p>\n<p>The recommended pronunciation for Kymatio is <em>kim-ah-tio</em>. In other words, it rhymes with patio, not with ratio.</p>\n\n          </div>"}, "last_serial": 6825683, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "a84269233c29d34948eff9c6dbcd65fd", "sha256": "bbae6184d536067e5ec005938853d71cfa6ec341e55f9ccc75ea9f6f727ac932"}, "downloads": -1, "filename": "kymatio-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a84269233c29d34948eff9c6dbcd65fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 54998, "upload_time": "2019-06-14T00:36:10", "upload_time_iso_8601": "2019-06-14T00:36:10.753316Z", "url": "https://files.pythonhosted.org/packages/a6/b1/63c780db2adf4810397272bb3a2c15592d9860b2c85525f2658db2f9a248/kymatio-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "221f2fc5c6f0c446d66a6ec0a0caaece", "sha256": "a654695a897e9a0755d28a40795b66795563761de640710eb3c4cf71da509de2"}, "downloads": -1, "filename": "kymatio-0.1.0.tar.gz", "has_sig": false, "md5_digest": "221f2fc5c6f0c446d66a6ec0a0caaece", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 45332, "upload_time": "2019-06-14T00:36:12", "upload_time_iso_8601": "2019-06-14T00:36:12.699435Z", "url": "https://files.pythonhosted.org/packages/d1/6d/c5c5c892fef8a44908c9aa0ef94f3130af972cd1561accf712b119e5b406/kymatio-0.1.0.tar.gz", "yanked": false}], "0.1.0a0": [{"comment_text": "", "digests": {"md5": "31bbb259a5f986457c8ca8591b5b7f8f", "sha256": "62b8a06a2c4b47638603a30be6891c28b3150ee53b28bc485d6a97b7ef74835d"}, "downloads": -1, "filename": "kymatio-0.1.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "31bbb259a5f986457c8ca8591b5b7f8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 54767, "upload_time": "2018-12-17T14:13:39", "upload_time_iso_8601": "2018-12-17T14:13:39.716879Z", "url": "https://files.pythonhosted.org/packages/e1/e0/d466795f512735df1ba7482f37b92d8162d870036f94d0ea8136f9f2ce04/kymatio-0.1.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f13f8d4aa02d9a6ef42b7228da45d21f", "sha256": "8b86b7b136e9790593831dfe2fe6e2d6a3b7eee4091fdd8c9b63518560ee8732"}, "downloads": -1, "filename": "kymatio-0.1.0a0.tar.gz", "has_sig": false, "md5_digest": "f13f8d4aa02d9a6ef42b7228da45d21f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 44709, "upload_time": "2018-12-17T14:13:42", "upload_time_iso_8601": "2018-12-17T14:13:42.578784Z", "url": "https://files.pythonhosted.org/packages/79/20/e8d8ff0aa0f4635ac11a5d380637128b94d3537f0f2a460821ab4fa09088/kymatio-0.1.0a0.tar.gz", "yanked": false}], "0.1.0b0": [{"comment_text": "", "digests": {"md5": "626b1942487372f3c7220c21ef5ef4bd", "sha256": "7ba2742bb5c5d591b86e3e747e2b4ef03c1475c39924a9c96a67487bae508164"}, "downloads": -1, "filename": "kymatio-0.1.0b0-py3-none-any.whl", "has_sig": false, "md5_digest": "626b1942487372f3c7220c21ef5ef4bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 55026, "upload_time": "2019-01-18T18:08:36", "upload_time_iso_8601": "2019-01-18T18:08:36.500629Z", "url": "https://files.pythonhosted.org/packages/ba/99/5acb7f09e0752a0094fa1fc7147e33b679b92c8a4d483d7dee5715d2a10f/kymatio-0.1.0b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8878ddca45622a89d44dea0b64f1f79", "sha256": "9ff29f4c77b09dee19e183a81b2aa0e5b435e0ed0aa87bd90dcef27e9057ce30"}, "downloads": -1, "filename": "kymatio-0.1.0b0.tar.gz", "has_sig": false, "md5_digest": "f8878ddca45622a89d44dea0b64f1f79", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 45274, "upload_time": "2019-01-18T18:08:38", "upload_time_iso_8601": "2019-01-18T18:08:38.335157Z", "url": "https://files.pythonhosted.org/packages/98/d0/d325ea72797d99c89aa2c191adcb10d9b54b2d1f2731f4ae3845a0babd43/kymatio-0.1.0b0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "888ea3a814c8d7a3ccf1f7b561e1bbd6", "sha256": "bb9f272893b76eeb5b2d1e05112db855f6a0e7dcfebfd4c233e2cd0da3fc0873"}, "downloads": -1, "filename": "kymatio-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "888ea3a814c8d7a3ccf1f7b561e1bbd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 92746, "upload_time": "2020-03-17T02:37:04", "upload_time_iso_8601": "2020-03-17T02:37:04.466413Z", "url": "https://files.pythonhosted.org/packages/10/ae/88e1a04fe72c71c703cd9230691e4bcc6ea1300f187cfc729ddec8b31bcf/kymatio-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f251123d1138ae8d6d5b925ab3b1c0a", "sha256": "32fbb2b5c1ceeeadc30029d6d9d4590a35052cc7c685cf2bb049690708bd3dfb"}, "downloads": -1, "filename": "kymatio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5f251123d1138ae8d6d5b925ab3b1c0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 60256, "upload_time": "2020-03-17T02:37:05", "upload_time_iso_8601": "2020-03-17T02:37:05.902270Z", "url": "https://files.pythonhosted.org/packages/85/85/5a1fa11387bb0eecadfa190d0158a1bc1f19e7b024afb994752b9226eff3/kymatio-0.2.0.tar.gz", "yanked": false}], "0.2b0": [{"comment_text": "", "digests": {"md5": "46f91e3b4a1fadde51886e0e94494030", "sha256": "ce2c592dce2fb3446d6027ae5ac24ef1065038ee2b6f979e275893037b67aaeb"}, "downloads": -1, "filename": "kymatio-0.2b0-py3-none-any.whl", "has_sig": false, "md5_digest": "46f91e3b4a1fadde51886e0e94494030", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 92746, "upload_time": "2020-03-13T14:05:28", "upload_time_iso_8601": "2020-03-13T14:05:28.461587Z", "url": "https://files.pythonhosted.org/packages/58/cd/530fcdd0040a2f3b5511153b451732ff1f29fcabee575fdcd52c4ef7d7ed/kymatio-0.2b0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b517e540742c477417037ac69d5daf77", "sha256": "e01a51913dcebf7036c9c9df55244e269d3cdff53b39938e565254cf5dc73fbe"}, "downloads": -1, "filename": "kymatio-0.2b0.tar.gz", "has_sig": false, "md5_digest": "b517e540742c477417037ac69d5daf77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 60231, "upload_time": "2020-03-13T14:05:29", "upload_time_iso_8601": "2020-03-13T14:05:29.728070Z", "url": "https://files.pythonhosted.org/packages/07/73/17b1e9a979a643ef8357a254ab984e77b1247995e2187fc1945ee1721758/kymatio-0.2b0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "888ea3a814c8d7a3ccf1f7b561e1bbd6", "sha256": "bb9f272893b76eeb5b2d1e05112db855f6a0e7dcfebfd4c233e2cd0da3fc0873"}, "downloads": -1, "filename": "kymatio-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "888ea3a814c8d7a3ccf1f7b561e1bbd6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 92746, "upload_time": "2020-03-17T02:37:04", "upload_time_iso_8601": "2020-03-17T02:37:04.466413Z", "url": "https://files.pythonhosted.org/packages/10/ae/88e1a04fe72c71c703cd9230691e4bcc6ea1300f187cfc729ddec8b31bcf/kymatio-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f251123d1138ae8d6d5b925ab3b1c0a", "sha256": "32fbb2b5c1ceeeadc30029d6d9d4590a35052cc7c685cf2bb049690708bd3dfb"}, "downloads": -1, "filename": "kymatio-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5f251123d1138ae8d6d5b925ab3b1c0a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 60256, "upload_time": "2020-03-17T02:37:05", "upload_time_iso_8601": "2020-03-17T02:37:05.902270Z", "url": "https://files.pythonhosted.org/packages/85/85/5a1fa11387bb0eecadfa190d0158a1bc1f19e7b024afb994752b9226eff3/kymatio-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:25 2020"}