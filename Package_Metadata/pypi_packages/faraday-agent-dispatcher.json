{"info": {"author": "Eric Horvat", "author_email": "erich@infobytesec.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "Faraday Agents Dispatcher helps user develop integrations with\n[Faraday][faraday] written in any language. <!-- For more information, check [this\nblogpost][blogpost] or continue reading. -->\n\n[faraday]: https://github.com/infobyte/faraday/\n[blogpost]: https://medium.com/faraday\n\n# Installation\n\nJust run `pip3 install faraday_agent_dispatcher` and you should see the\n`faraday-dispatcher` command in your system.\n\nTo setup a development environment (this is, to change code of the dispatcher\nitself, not to write your own integrations), you should clone this repo and run\n`python setup.py develop`.\n\n# Running Faraday Agent Dispatcher for first time\n\n1. Generate a configuration file running `faraday-dispatcher\nconfig-wizard`.\n\n2. Run the agent with `faraday-dispatcher run` command. The config file\nthat it creates will be located in `~/.faraday/config/dispatcher.ini`\nif you do not pass a custom path.\n\nYou should complete the agent configuration with your registration\ntoken, located at http://localhost:5985/#/admin/agents. Check that the\nserver section has the correct information about your Faraday\nServer instance. Then, complete the agent section with the desired name\nof your agent. Finally, [add the executors](#configuring-a-executor)\n\n# Executors\n\n## Creating your own executors\n\nAn executor is a script that prints out **single-line** JSON data to\nstdout. Remember that if you print any other data to stdout, the\ndispatcher will trigger an error. If you want to print debugging or\nlogging information you should use stderr for that.\n\nEvery line written to stdout by the executor will be decoded by the\ndispatcher and sent to Faraday using the Bulk Create endpoint.\nTherefore, the JSON you print must have the schema that the endpoint\nrequires (this schema is detailed [below](#bulk-create-json-format)).\nOtherwise, the dispatcher will complain because you supplied invalid\ndata to it.\n\nIf you want to debug your executor, the simplest way to do it is by\nrunning it directly instead of with the Dispatcher. Since the executor\njust prints JSON data to stdout, you will be able to see all\ninformation it wants to send to Faraday, but without actually sending\nit.\n\n## Configuring a executor\n\nAfter writing your executor, you have to add it with the\n`faraday-dispatcher config-wizard` within the executor section, adding\nits name, command to execute and the max size of the JSON to send to\nFaraday Server. Additionally, you can configure the Environment\nvariables and Arguments in their proper section.\n\n## Running a executor\n\nTo run an executor use the `faraday-dispatcher config-wizard` command,\nand play it from the Faraday Server. The executor will use the\nenvironment variables set and ask for the arguments.\n\n# Bulk Create JSON format\n\nTODO\n\n# Running multiple dispatchers\n\nIf you want to have more than one dispatcher, each one runninng its own\nexecutors, the preferred of doing this is to create different\nconfiguration files for each one (for example,\n`~/.faraday/config/dispatcher-1.ini` and\n`~/.faraday/config/dispatcher-2.ini`). Then, you can run two different\nDispatcher instances with `faraday-dispatcher --config-file\nPATH_TO_A_CONFIG_FILE`.\n\n# Contributed executors\n\nInside the [`contrib/`][contrib] directory you can find some already\ncreated executors. Here is a short description of each one:\n\n* `basic_example.py`: The Hello World of Faraday executors. It will\n  create a host with an associeted vulnerability to it\n* `heroku_discovery_agent.py`: Load host and service information from\n  your Heroku account\n* `prowlerSample.py`: Run the [**prowler**][prowler] command and send\n  its output to Faraday\n* `responder.py`: Run [**Responder**][responder] and send its output\n  to Faraday\n* `brainfuck.sh`: A proof-of-concept to demonstrate you can create\n  an executor in any programming language, including [Brainfuck][brainfuck]!\n\n[contrib]: https://github.com/infobyte/faraday_agent_dispatcher/tree/master/contrib\n[brainfuck]: https://en.wikipedia.org/wiki/Brainfuck\n[prowler]: https://github.com/toniblyx/prowler\n[responder]: https://github.com/lgandx/Responder\n\n# Roadmap\n\nWe are currently working on new executors, apart from improving the\nexperience using the agents.\n\nCurrently, you have to manually add each parameter and environment\nvariable when adding a `contrib` executor. It will be possible to add\nthem quicker in a automatic way.\n\nWe would also like to give some agents read access to their workspace,\nso they can benefit of the existing data in order to find more valuable\ninformation.\n\n\n1.1 [Apr 22th, 2020]:\n---\n * The dispatcher now runs with a `faraday-dispatcher run` command\n * `faraday-dispatcher wizard` command added which generates configuration .ini file\n * Manage execution_id within WS and API communication\n * The route of [Faraday](faraday) ws comunication change from / to /websockets \n * Better error management, now shows error and exceptions depending on log levels\n * Better management of invalid token errors\n * Add ssl support\n\n1.0 [Dec 17th, 2019]:\n---\n * You can add fixed parameters than shouldn't came by the web (e.g. passwords) are set in the dispatcher.ini\n * Now its possible to manage multiple executors within one agent\n * Now is possible to receive params from the [Faraday](faraday) server\n\n0.1 [Oct 31th, 2019]:\n---\n * First beta version published \n * Basic structure implemented, with executor with fixed values\n\n[faraday]: http://github.com/infobyte/faraday\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/infobyte/faraday_agent_dispatcher", "keywords": "faraday integration", "license": "GNU General Public License v3", "maintainer": "", "maintainer_email": "", "name": "faraday-agent-dispatcher", "package_url": "https://pypi.org/project/faraday-agent-dispatcher/", "platform": "", "project_url": "https://pypi.org/project/faraday-agent-dispatcher/", "project_urls": {"Homepage": "https://github.com/infobyte/faraday_agent_dispatcher"}, "release_url": "https://pypi.org/project/faraday-agent-dispatcher/1.1/", "requires_dist": ["Click (>=6.0)", "websockets", "aiohttp (<4.0.0)", "syslog-rfc5424-formatter", "pytest", "pytest-aiohttp", "requests", "itsdangerous", "giteasychangelog ; extra == 'dev'"], "requires_python": "", "summary": "Faraday agent dispatcher to communicate an agent to faraday", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Faraday Agents Dispatcher helps user develop integrations with\n<a href=\"https://github.com/infobyte/faraday/\" rel=\"nofollow\">Faraday</a> written in any language. </p>\n<h1>Installation</h1>\n<p>Just run <code>pip3 install faraday_agent_dispatcher</code> and you should see the\n<code>faraday-dispatcher</code> command in your system.</p>\n<p>To setup a development environment (this is, to change code of the dispatcher\nitself, not to write your own integrations), you should clone this repo and run\n<code>python setup.py develop</code>.</p>\n<h1>Running Faraday Agent Dispatcher for first time</h1>\n<ol>\n<li>\n<p>Generate a configuration file running <code>faraday-dispatcher config-wizard</code>.</p>\n</li>\n<li>\n<p>Run the agent with <code>faraday-dispatcher run</code> command. The config file\nthat it creates will be located in <code>~/.faraday/config/dispatcher.ini</code>\nif you do not pass a custom path.</p>\n</li>\n</ol>\n<p>You should complete the agent configuration with your registration\ntoken, located at <a href=\"http://localhost:5985/#/admin/agents\" rel=\"nofollow\">http://localhost:5985/#/admin/agents</a>. Check that the\nserver section has the correct information about your Faraday\nServer instance. Then, complete the agent section with the desired name\nof your agent. Finally, <a href=\"#configuring-a-executor\" rel=\"nofollow\">add the executors</a></p>\n<h1>Executors</h1>\n<h2>Creating your own executors</h2>\n<p>An executor is a script that prints out <strong>single-line</strong> JSON data to\nstdout. Remember that if you print any other data to stdout, the\ndispatcher will trigger an error. If you want to print debugging or\nlogging information you should use stderr for that.</p>\n<p>Every line written to stdout by the executor will be decoded by the\ndispatcher and sent to Faraday using the Bulk Create endpoint.\nTherefore, the JSON you print must have the schema that the endpoint\nrequires (this schema is detailed <a href=\"#bulk-create-json-format\" rel=\"nofollow\">below</a>).\nOtherwise, the dispatcher will complain because you supplied invalid\ndata to it.</p>\n<p>If you want to debug your executor, the simplest way to do it is by\nrunning it directly instead of with the Dispatcher. Since the executor\njust prints JSON data to stdout, you will be able to see all\ninformation it wants to send to Faraday, but without actually sending\nit.</p>\n<h2>Configuring a executor</h2>\n<p>After writing your executor, you have to add it with the\n<code>faraday-dispatcher config-wizard</code> within the executor section, adding\nits name, command to execute and the max size of the JSON to send to\nFaraday Server. Additionally, you can configure the Environment\nvariables and Arguments in their proper section.</p>\n<h2>Running a executor</h2>\n<p>To run an executor use the <code>faraday-dispatcher config-wizard</code> command,\nand play it from the Faraday Server. The executor will use the\nenvironment variables set and ask for the arguments.</p>\n<h1>Bulk Create JSON format</h1>\n<p>TODO</p>\n<h1>Running multiple dispatchers</h1>\n<p>If you want to have more than one dispatcher, each one runninng its own\nexecutors, the preferred of doing this is to create different\nconfiguration files for each one (for example,\n<code>~/.faraday/config/dispatcher-1.ini</code> and\n<code>~/.faraday/config/dispatcher-2.ini</code>). Then, you can run two different\nDispatcher instances with <code>faraday-dispatcher --config-file PATH_TO_A_CONFIG_FILE</code>.</p>\n<h1>Contributed executors</h1>\n<p>Inside the <a href=\"https://github.com/infobyte/faraday_agent_dispatcher/tree/master/contrib\" rel=\"nofollow\"><code>contrib/</code></a> directory you can find some already\ncreated executors. Here is a short description of each one:</p>\n<ul>\n<li><code>basic_example.py</code>: The Hello World of Faraday executors. It will\ncreate a host with an associeted vulnerability to it</li>\n<li><code>heroku_discovery_agent.py</code>: Load host and service information from\nyour Heroku account</li>\n<li><code>prowlerSample.py</code>: Run the <a href=\"https://github.com/toniblyx/prowler\" rel=\"nofollow\"><strong>prowler</strong></a> command and send\nits output to Faraday</li>\n<li><code>responder.py</code>: Run <a href=\"https://github.com/lgandx/Responder\" rel=\"nofollow\"><strong>Responder</strong></a> and send its output\nto Faraday</li>\n<li><code>brainfuck.sh</code>: A proof-of-concept to demonstrate you can create\nan executor in any programming language, including <a href=\"https://en.wikipedia.org/wiki/Brainfuck\" rel=\"nofollow\">Brainfuck</a>!</li>\n</ul>\n<h1>Roadmap</h1>\n<p>We are currently working on new executors, apart from improving the\nexperience using the agents.</p>\n<p>Currently, you have to manually add each parameter and environment\nvariable when adding a <code>contrib</code> executor. It will be possible to add\nthem quicker in a automatic way.</p>\n<p>We would also like to give some agents read access to their workspace,\nso they can benefit of the existing data in order to find more valuable\ninformation.</p>\n<h2>1.1 [Apr 22th, 2020]:</h2>\n<ul>\n<li>The dispatcher now runs with a <code>faraday-dispatcher run</code> command</li>\n<li><code>faraday-dispatcher wizard</code> command added which generates configuration .ini file</li>\n<li>Manage execution_id within WS and API communication</li>\n<li>The route of <a href=\"faraday\" rel=\"nofollow\">Faraday</a> ws comunication change from / to /websockets</li>\n<li>Better error management, now shows error and exceptions depending on log levels</li>\n<li>Better management of invalid token errors</li>\n<li>Add ssl support</li>\n</ul>\n<h2>1.0 [Dec 17th, 2019]:</h2>\n<ul>\n<li>You can add fixed parameters than shouldn't came by the web (e.g. passwords) are set in the dispatcher.ini</li>\n<li>Now its possible to manage multiple executors within one agent</li>\n<li>Now is possible to receive params from the <a href=\"faraday\" rel=\"nofollow\">Faraday</a> server</li>\n</ul>\n<h2>0.1 [Oct 31th, 2019]:</h2>\n<ul>\n<li>First beta version published</li>\n<li>Basic structure implemented, with executor with fixed values</li>\n</ul>\n\n          </div>"}, "last_serial": 7073033, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "2c89eae4cede59861ed01aafad0d36a7", "sha256": "d7a549af9047f1af0d824cf29dd93c5449241266a24e8687d3399cb15bfc61ae"}, "downloads": -1, "filename": "faraday_agent_dispatcher-1.0.tar.gz", "has_sig": false, "md5_digest": "2c89eae4cede59861ed01aafad0d36a7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47075, "upload_time": "2019-12-19T16:24:16", "upload_time_iso_8601": "2019-12-19T16:24:16.933884Z", "url": "https://files.pythonhosted.org/packages/7f/7b/7627af71aaf127014238040b78ad8eaf416facda3d0755af69f382399c36/faraday_agent_dispatcher-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "aa78bd6d6f69486bc49632093cf15057", "sha256": "55e274c9d8e5567b9083cbd479cd09e3a7d72f142417802a43922080dc4a308e"}, "downloads": -1, "filename": "faraday_agent_dispatcher-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa78bd6d6f69486bc49632093cf15057", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34547, "upload_time": "2020-04-22T02:47:38", "upload_time_iso_8601": "2020-04-22T02:47:38.319926Z", "url": "https://files.pythonhosted.org/packages/b6/05/77c85eb135a6c4e0ad58ab676879869f5e7b14f9e2546e85ef12f3a1a867/faraday_agent_dispatcher-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7a5c2d6b664bd49474e3039e93653cc", "sha256": "92106dce2a888f4e39b62217e777824730a557c55955aafaddded7db2e3b7e94"}, "downloads": -1, "filename": "faraday_agent_dispatcher-1.1.tar.gz", "has_sig": false, "md5_digest": "c7a5c2d6b664bd49474e3039e93653cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65282, "upload_time": "2020-04-22T02:47:40", "upload_time_iso_8601": "2020-04-22T02:47:40.058172Z", "url": "https://files.pythonhosted.org/packages/7f/7a/5cb26f3d9e566252f89d84e17c53c41d7fb0c7a2a1feb8b8c8aa9dbe333b/faraday_agent_dispatcher-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "aa78bd6d6f69486bc49632093cf15057", "sha256": "55e274c9d8e5567b9083cbd479cd09e3a7d72f142417802a43922080dc4a308e"}, "downloads": -1, "filename": "faraday_agent_dispatcher-1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "aa78bd6d6f69486bc49632093cf15057", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 34547, "upload_time": "2020-04-22T02:47:38", "upload_time_iso_8601": "2020-04-22T02:47:38.319926Z", "url": "https://files.pythonhosted.org/packages/b6/05/77c85eb135a6c4e0ad58ab676879869f5e7b14f9e2546e85ef12f3a1a867/faraday_agent_dispatcher-1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7a5c2d6b664bd49474e3039e93653cc", "sha256": "92106dce2a888f4e39b62217e777824730a557c55955aafaddded7db2e3b7e94"}, "downloads": -1, "filename": "faraday_agent_dispatcher-1.1.tar.gz", "has_sig": false, "md5_digest": "c7a5c2d6b664bd49474e3039e93653cc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 65282, "upload_time": "2020-04-22T02:47:40", "upload_time_iso_8601": "2020-04-22T02:47:40.058172Z", "url": "https://files.pythonhosted.org/packages/7f/7a/5cb26f3d9e566252f89d84e17c53c41d7fb0c7a2a1feb8b8c8aa9dbe333b/faraday_agent_dispatcher-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:44 2020"}