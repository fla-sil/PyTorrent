{"info": {"author": "Gary Monson", "author_email": "gary.monson@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Topic :: Internet :: WWW/HTTP :: WSGI :: Middleware", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Falcon JSON IO\n==============\n\nValidate HTTP request and response body by defining acceptable values\nwith JSON schema. For use with the `Falcon web\nframework <http://falconframework.org/>`__.\n\nTest status\n-----------\n\n|Codeship Status for garymonson/falcon-json-io|\n\nUsage overview\n--------------\n\nDefine your request body schema, and your endpoint is only called if the\nrequest matches your specification. Otherwise, an error is returned to\nthe caller.\n\nDefine your response body schema, and your response is validated before\nreturning to the sender. A response that does not match the\nspecification will return a 500 error instead.\n\nRetrieve your request JSON using req.context['doc'].\n\nSet your JSON response in req.context['result'].\n\nUsing the middleware\n--------------------\n\nEnabled the middleware:\n\n::\n\n    app = falcon.API(\n        middleware=[\n            falconjsonio.middleware.RequireJSON(),\n            falconjsonio.middleware.JSONTranslator(),\n        ],\n    )\n\nDefine your requirements:\n\n::\n\n    from falconjsonio.schema import request_schema, response_schema\n\n    people_post_request_schema = {\n        'type':       'object',\n        'properties': {\n            'title':  {'type': 'string'},\n            'name':   {'type': 'string'},\n            'dob':    {'type': 'date-time'},\n            'email':  {'type': 'email'},\n        },\n        'required': ['name', 'dob'],\n    }\n    people_post_response_schema = {\n        'oneOf': [\n            {\n                'type':       'object',\n                'properties': {\n                    'href': {'type': uri'},\n                },\n                'required': ['uri'],\n            },\n            {\n                'type':       'object',\n                'properties': {\n                    'error': {'type': 'string'},\n                },\n                'required': ['error'],\n            },\n        ],\n    }\n\n    # ...\n\n    class People(object):\n        @response_schema(people_get_response_schema)\n        def on_get(self, req, resp):\n            # Put your JSON response here:\n            req.context['result'] = {'some': 'json'}\n\n        @request_schema(people_post_request_schema)\n        @response_schema(people_post_response_schema)\n        def on_post(self, req, resp):\n            # JSON request supplied here:\n            form = req.context['doc']\n            # Put your JSON response here:\n            req.context['result'] = {'some': 'json'}\n\nHook the endpoint in, of course:\n\n::\n\n    app.add_route('/people', People())\n\nIf your methods are inherited from a parent class, you can apply the\ndecorator to the resource class instead, and pass the method name to the\ndecorator:\n\n::\n\n    class People(object):\n        def on_get(self, req, resp):\n            # Put your JSON response here:\n            req.context['result'] = {'some': 'json'}\n\n        def on_post(self, req, resp):\n            # JSON request supplied here:\n            form = req.context['doc']\n            # Put your JSON response here:\n            req.context['result'] = {'some': 'json'}\n\n    @response_schema(schema=people_get_response_schema, method_name='on_get')\n    @request_schema(schema=people_post_request_schema, method_name='on_post')\n    @response_schema(schema=people_post_response_schema, method_name='on_post')\n    class ChildPeople(People):\n        pass\n\nThis is especially useful when you have a parent class with all the\nsmarts, and your child classes merely declare a few settings for the\nparent class (e.g.\n`falcon-autocrud <https://pypi.python.org/pypi/falcon-autocrud>`__)\n\nQuick start for contributing\n----------------------------\n\n::\n\n    virtualenv -p `which python3` virtualenv\n    source virtualenv/bin/activate\n    pip install -r requirements.txt\n    pip install -r dev_requirements.txt\n    nosetests\n\n.. |Codeship Status for garymonson/falcon-json-io| image:: https://codeship.com/projects/c370db70-b520-0133-3191-1af10c27659b/status?branch=master\n   :target: https://codeship.com/projects/134051\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://bitbucket.org/garymonson/falcon-json-io", "keywords": "json schema falcon", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "falconjsonio", "package_url": "https://pypi.org/project/falconjsonio/", "platform": "", "project_url": "https://pypi.org/project/falconjsonio/", "project_urls": {"Homepage": "https://bitbucket.org/garymonson/falcon-json-io"}, "release_url": "https://pypi.org/project/falconjsonio/1.0.2/", "requires_dist": null, "requires_python": "", "summary": "JSON-Schema input and output for Falcon", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Validate HTTP request and response body by defining acceptable values\nwith JSON schema. For use with the <a href=\"http://falconframework.org/\" rel=\"nofollow\">Falcon web\nframework</a>.</p>\n<div id=\"test-status\">\n<h2>Test status</h2>\n<p><a href=\"https://codeship.com/projects/134051\" rel=\"nofollow\"><img alt=\"Codeship Status for garymonson/falcon-json-io\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b21ca8dae3cd4e3217944ca87b729f54464608de/68747470733a2f2f636f6465736869702e636f6d2f70726f6a656374732f63333730646237302d623532302d303133332d333139312d3161663130633237363539622f7374617475733f6272616e63683d6d6173746572\"></a></p>\n</div>\n<div id=\"usage-overview\">\n<h2>Usage overview</h2>\n<p>Define your request body schema, and your endpoint is only called if the\nrequest matches your specification. Otherwise, an error is returned to\nthe caller.</p>\n<p>Define your response body schema, and your response is validated before\nreturning to the sender. A response that does not match the\nspecification will return a 500 error instead.</p>\n<p>Retrieve your request JSON using req.context[\u2018doc\u2019].</p>\n<p>Set your JSON response in req.context[\u2018result\u2019].</p>\n</div>\n<div id=\"using-the-middleware\">\n<h2>Using the middleware</h2>\n<p>Enabled the middleware:</p>\n<pre>app = falcon.API(\n    middleware=[\n        falconjsonio.middleware.RequireJSON(),\n        falconjsonio.middleware.JSONTranslator(),\n    ],\n)\n</pre>\n<p>Define your requirements:</p>\n<pre>from falconjsonio.schema import request_schema, response_schema\n\npeople_post_request_schema = {\n    'type':       'object',\n    'properties': {\n        'title':  {'type': 'string'},\n        'name':   {'type': 'string'},\n        'dob':    {'type': 'date-time'},\n        'email':  {'type': 'email'},\n    },\n    'required': ['name', 'dob'],\n}\npeople_post_response_schema = {\n    'oneOf': [\n        {\n            'type':       'object',\n            'properties': {\n                'href': {'type': uri'},\n            },\n            'required': ['uri'],\n        },\n        {\n            'type':       'object',\n            'properties': {\n                'error': {'type': 'string'},\n            },\n            'required': ['error'],\n        },\n    ],\n}\n\n# ...\n\nclass People(object):\n    @response_schema(people_get_response_schema)\n    def on_get(self, req, resp):\n        # Put your JSON response here:\n        req.context['result'] = {'some': 'json'}\n\n    @request_schema(people_post_request_schema)\n    @response_schema(people_post_response_schema)\n    def on_post(self, req, resp):\n        # JSON request supplied here:\n        form = req.context['doc']\n        # Put your JSON response here:\n        req.context['result'] = {'some': 'json'}\n</pre>\n<p>Hook the endpoint in, of course:</p>\n<pre>app.add_route('/people', People())\n</pre>\n<p>If your methods are inherited from a parent class, you can apply the\ndecorator to the resource class instead, and pass the method name to the\ndecorator:</p>\n<pre>class People(object):\n    def on_get(self, req, resp):\n        # Put your JSON response here:\n        req.context['result'] = {'some': 'json'}\n\n    def on_post(self, req, resp):\n        # JSON request supplied here:\n        form = req.context['doc']\n        # Put your JSON response here:\n        req.context['result'] = {'some': 'json'}\n\n@response_schema(schema=people_get_response_schema, method_name='on_get')\n@request_schema(schema=people_post_request_schema, method_name='on_post')\n@response_schema(schema=people_post_response_schema, method_name='on_post')\nclass ChildPeople(People):\n    pass\n</pre>\n<p>This is especially useful when you have a parent class with all the\nsmarts, and your child classes merely declare a few settings for the\nparent class (e.g.\n<a href=\"https://pypi.python.org/pypi/falcon-autocrud\" rel=\"nofollow\">falcon-autocrud</a>)</p>\n</div>\n<div id=\"quick-start-for-contributing\">\n<h2>Quick start for contributing</h2>\n<pre>virtualenv -p `which python3` virtualenv\nsource virtualenv/bin/activate\npip install -r requirements.txt\npip install -r dev_requirements.txt\nnosetests\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2928866, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "8588c648fb629ba22a45440c9dc48672", "sha256": "ef4470a89b3684fceab8c06a4298264437a6ea7db82db28dccc0d57b671b41f9"}, "downloads": -1, "filename": "falconjsonio-0.1.10.tar.gz", "has_sig": false, "md5_digest": "8588c648fb629ba22a45440c9dc48672", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6821, "upload_time": "2016-05-08T10:05:34", "upload_time_iso_8601": "2016-05-08T10:05:34.173648Z", "url": "https://files.pythonhosted.org/packages/c9/58/c91e59eeb5535fff16758f0e48e896a2e333b9f3249c02287053b9046be6/falconjsonio-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "7084f6b23734a50493850428e5e40d28", "sha256": "526f756d1ef3d377143ae87b65a6d747ac38601d6de44cf17960f68200e51fea"}, "downloads": -1, "filename": "falconjsonio-0.1.11.tar.gz", "has_sig": false, "md5_digest": "7084f6b23734a50493850428e5e40d28", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6835, "upload_time": "2016-05-12T10:14:24", "upload_time_iso_8601": "2016-05-12T10:14:24.675283Z", "url": "https://files.pythonhosted.org/packages/16/80/e2cd1c94319ef0d7cc2201a1f6512e01d62f684125a7340ab7fdce34d290/falconjsonio-0.1.11.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "0299958c5c1ae825bf7733bcb561096d", "sha256": "6d992ec5092cc95e0a34d65d57382569d2d25fd1bed75b03b5a109bf31355fde"}, "downloads": -1, "filename": "falconjsonio-0.1.5.tar.gz", "has_sig": false, "md5_digest": "0299958c5c1ae825bf7733bcb561096d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5429, "upload_time": "2015-11-19T10:10:23", "upload_time_iso_8601": "2015-11-19T10:10:23.289495Z", "url": "https://files.pythonhosted.org/packages/05/1f/a8325ebbe5e74501ad7bd02c1267c93875012eff2992beacb1e07ab16457/falconjsonio-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "f9e6c752abf54e898449e750c93e8481", "sha256": "245d587bb49236a6d97d68ca669e4f3b30ab742b87f65a22abcbfc60474c0d96"}, "downloads": -1, "filename": "falconjsonio-0.1.6.tar.gz", "has_sig": false, "md5_digest": "f9e6c752abf54e898449e750c93e8481", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6298, "upload_time": "2015-12-31T05:44:10", "upload_time_iso_8601": "2015-12-31T05:44:10.402424Z", "url": "https://files.pythonhosted.org/packages/e2/33/0a621a7cd1e0f0c992b67b2c0120cb89318e3d045a56414c1f428f233165/falconjsonio-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "d5ab173ffe4ce3015b15039e375e5944", "sha256": "61ef815a8c6750c46546811b75f8cc631e33a5a71a996a63682003195dab16f3"}, "downloads": -1, "filename": "falconjsonio-0.1.7.tar.gz", "has_sig": false, "md5_digest": "d5ab173ffe4ce3015b15039e375e5944", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6358, "upload_time": "2016-01-22T10:03:18", "upload_time_iso_8601": "2016-01-22T10:03:18.166822Z", "url": "https://files.pythonhosted.org/packages/a6/1d/ba7d733b79762e17c43f20c5dc45c02c3bd2743480951b506876691ac98c/falconjsonio-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "7d4af4920ee91779f2ae7db0eb7d25ea", "sha256": "de353c2a08653a2037b095438b97bc9c7d8506c8cc3a4c76a7da71aab6b0619b"}, "downloads": -1, "filename": "falconjsonio-0.1.8.tar.gz", "has_sig": false, "md5_digest": "7d4af4920ee91779f2ae7db0eb7d25ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6695, "upload_time": "2016-04-25T16:17:11", "upload_time_iso_8601": "2016-04-25T16:17:11.473480Z", "url": "https://files.pythonhosted.org/packages/ef/30/c2dd7a9461ae9d8c28775e16162a6b51a9314f3c76899c87ebe132d3993b/falconjsonio-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "b6961c0dfad3f97432cc19b9d70fe283", "sha256": "d566d7afaaf72216aa12fa2b4cf1900d71816e5772a44ed14b9291117d4a4cc9"}, "downloads": -1, "filename": "falconjsonio-0.1.9.tar.gz", "has_sig": false, "md5_digest": "b6961c0dfad3f97432cc19b9d70fe283", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6608, "upload_time": "2016-04-25T16:41:28", "upload_time_iso_8601": "2016-04-25T16:41:28.344477Z", "url": "https://files.pythonhosted.org/packages/cd/0a/eccb30f8d7d7fded7a4ff6da789afc270aafce0ca06d5d700ea42775d5e3/falconjsonio-0.1.9.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "130e75263dbe7d1dddbd384b27b274af", "sha256": "dc3590d779e43f48f53b9b99fbcdc7b46f352854b2b7234e27618770a855c494"}, "downloads": -1, "filename": "falconjsonio-1.0.1.tar.gz", "has_sig": false, "md5_digest": "130e75263dbe7d1dddbd384b27b274af", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6839, "upload_time": "2016-05-12T10:29:18", "upload_time_iso_8601": "2016-05-12T10:29:18.804239Z", "url": "https://files.pythonhosted.org/packages/55/ef/bed6ba9339c35ccc63190adb2268566c0b417824ca0bcfd09355ffbde141/falconjsonio-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "5120ef6b9e977a216be781a3657dcb9c", "sha256": "119d7900a1c3072e2130199c481bb9b87d4112daf272dd2af833656fff88ad79"}, "downloads": -1, "filename": "falconjsonio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5120ef6b9e977a216be781a3657dcb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8731, "upload_time": "2017-06-06T11:15:13", "upload_time_iso_8601": "2017-06-06T11:15:13.775608Z", "url": "https://files.pythonhosted.org/packages/8b/9d/3d5118f0eb327023bc8fc815075bbf12e3d5f2b153fd891ad37716fe006b/falconjsonio-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5120ef6b9e977a216be781a3657dcb9c", "sha256": "119d7900a1c3072e2130199c481bb9b87d4112daf272dd2af833656fff88ad79"}, "downloads": -1, "filename": "falconjsonio-1.0.2.tar.gz", "has_sig": false, "md5_digest": "5120ef6b9e977a216be781a3657dcb9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8731, "upload_time": "2017-06-06T11:15:13", "upload_time_iso_8601": "2017-06-06T11:15:13.775608Z", "url": "https://files.pythonhosted.org/packages/8b/9d/3d5118f0eb327023bc8fc815075bbf12e3d5f2b153fd891ad37716fe006b/falconjsonio-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:52 2020"}