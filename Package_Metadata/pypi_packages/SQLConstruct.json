{"info": {"author": "Vladimir Magamedov", "author_email": "vladimir@magamedov.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Database :: Front-Ends"], "description": "============\nSQLConstruct\n============\n\n`SQLConstruct` is a functional approach to query database using `SQLAlchemy`\nlibrary. It was written to reach more speed without introducing unmaintainable\nand verbose code. On the contrary, code becomes simpler, so there are less\nchances of shooting yourself in the foot.\n\nMain problems it aims to solve:\n\n- ORM overhead in read-only ``SELECT`` queries;\n- Network traffic when loading unnecessary columns;\n- Code complexity;\n- N+1 problem.\n\nFinal\n=====\n\nYou describe what you want to get from the database:\n\n.. code-block:: python\n\n    from sqlconstruct import Construct, if_\n\n    product_struct = Construct({\n        'name': Product.name,\n        'url': url_for_product.defn(Product),\n        'image_url': if_(\n            Image.id,\n            then_=url_for_image.defn(Image, 100, 100),\n            else_=None,\n        ),\n    })\n\nAnd you get it. `SQLConstruct` knows which columns you need and how transform\nthem into suitable to use format:\n\n.. code-block:: python\n\n    >>> product = (\n    ...     session.query(product_struct)\n    ...     .outerjoin(Product.image)\n    ...     .first()\n    ... )\n    ...\n    >>> product.name\n    'Foo product'\n    >>> product.url\n    '/p1-foo-product.html'\n    >>> product.image_url\n    '//images.example.st/123-100x100-foo.jpg'\n\nFull story\n==========\n\nBasic preparations:\n\n.. code-block:: python\n\n    from sqlalchemy import create_engine\n    from sqlalchemy import Column, Integer, String, Text, ForeignKey\n    from sqlalchemy.orm import Session, relationship, eagerload\n    from sqlalchemy.ext.declarative import declarative_base\n\n    engine = create_engine('sqlite://')\n    Base = declarative_base()\n\n    class Image(Base):\n        __tablename__ = 'image'\n\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n\n    class Product(Base):\n        __tablename__ = 'product'\n\n        id = Column(Integer, primary_key=True)\n        name = Column(String)\n        image_id = Column(Integer, ForeignKey(Image.id))\n        description = Column(Text)\n\n        image = relationship(Image)\n\n    Base.metadata.create_all(engine)\n\n    session = Session(engine)\n    session.add(Product(name='Foo product', image=Image(name='Foo.jpg')))\n    session.commit()\n\n    def slugify(name):\n        # very dumb implementation, just for an example\n        return name.lower().replace(' ', '-')\n\n    def url_for_product(product):\n        return '/p{id}-{name}.html'.format(\n            id=product.id,\n            name=slugify(product.name),\n        )\n\n    def url_for_image(image, width, height):\n        return '//images.example.st/{id}-{width}x{height}-{name}'.format(\n            id=image.id,\n            width=width,\n            height=height,\n            name=slugify(image.name),\n        )\n\nUsual way:\n\n.. code-block:: python\n\n    >>> product = (\n    ...     session.query(Product)\n    ...     .options(eagerload(Product.image))\n    ...     .first()\n    ... )\n    ...\n    >>> product.name\n    u'Foo product'\n    >>> url_for_product(product)\n    '/p1-foo-product.html'\n    >>> url_for_image(product.image, 100, 100) if product.image else None\n    '//images.example.st/1-100x100-foo.jpg'\n\nDisadvantages:\n\n- ``description`` column isn't deferred, it will be loaded every time;\n- if you will mark ``description`` column as deferred, this can introduce N+1\n  problem somewhere else in your project;\n- if you forgot to ``eagerload`` ``Product.image`` you will also get N+1\n  problem;\n- you have to pass model instances as arguments everywhere in the project and\n  this tends to code complexity, because you don't know how they will be used in\n  the future;\n- model instances creation isn't cheap, CPU time grows with number of columns,\n  even if they are all deferred.\n\nInitial solution:\n\n.. code-block:: python\n\n    from sqlconstruct import Construct, apply_, if_\n\n    def url_for_product(product_id, product_name):\n        return '/p{id}-{name}.html'.format(\n            id=product_id,\n            name=slugify(product_name),\n        )\n\n    def url_for_image(image_id, image_name, width, height):\n        return '//images.example.st/{id}-{width}x{height}-{name}'.format(\n            id=image_id,\n            width=width,\n            height=height,\n            name=slugify(image_name),\n        )\n\n    product_struct = Construct({\n        'name': Product.name,\n        'url': apply_(url_for_product, args=[Product.id, Product.name]),\n        'image_url': if_(\n            Image.id,\n            then_=apply_(url_for_image, args=[Image.id, Image.name, 100, 100]),\n            else_=None,\n        ),\n    })\n\nUsage:\n\n.. code-block:: python\n\n    >>> product = (\n    ...     session.query(product_struct)\n    ...     .outerjoin(Product.image)\n    ...     .first()\n    ... )\n    ...\n    >>> product.name\n    u'Foo product'\n    >>> product.url\n    '/p1-foo-product.html'\n    >>> product.image_url\n    '//images.example.st/1-100x100-foo.jpg'\n\nAdvantages:\n\n- you're loading only what you need, no extra network traffic, no need to\n  defer/undefer columns;\n- ``url_for_product`` and ``url_for_image`` functions can't add complexity,\n  because they are forced to define all needed columns as arguments;\n- you're working with precomputed values (urls in this example).\n\nDisadvantages:\n\n- code of functions is hard to refactor and reuse, because you should specify or\n  pass all the arguments every time;\n- you should be careful with joins, because if you wouldn't specify them\n  explicitly, `SQLAlchemy` will produce cartesian product of the tables\n  (``SELECT ... FROM product, image WHERE ...``), which will return wrong\n  results and hurt your performance.\n\nTo address first disadvantage, `SQLConstruct` provides ``define`` decorator,\nwhich gives you ability to define hybrid functions to use them in different\nways:\n\n.. code-block:: python\n\n    from sqlconstruct import define\n\n    @define\n    def url_for_product(product):\n        def body(product_id, product_name):\n            return '/p{id}-{name}.html'.format(\n                id=product_id,\n                name=slugify(product_name),\n            )\n        return body, [product.id, product.name]\n\n    @define\n    def url_for_image(image, width, height):\n        def body(image_id, image_name, width, height):\n            return '//images.example.st/{id}-{width}x{height}-{name}'.format(\n                id=image_id,\n                width=width,\n                height=height,\n                name=slugify(image_name),\n            )\n        return body, [image.id, image.name, width, height]\n\nNow these functions can be used in these ways:\n\n.. code-block:: python\n\n    >>> product = session.query(Product).first()\n    >>> url_for_product(product)  # objective style\n    '/p1-foo-product.html'\n    >>> url_for_product.defn(Product)  # apply_ declaration\n    <sqlconstruct.apply_ at 0x000000000>\n    >>> url_for_product.func(product.id, product.name)  # functional style\n    '/p1-foo-product.html'\n\nModified final ``Construct`` definition:\n\n.. code-block:: python\n\n    product_struct = Construct({\n        'name': Product.name,\n        'url': url_for_product.defn(Product),\n        'image_url': if_(\n            Image.id,\n            then_=url_for_image.defn(Image, 100, 100),\n            else_=None,\n        ),\n    })\n\nInstallation\n============\n\nTo install `SQLConstruct`, simply:\n\n.. code-block:: shell\n\n    $ pip install sqlconstruct\n\nTested `Python` versions: 2.7, 3.4, PyPy.\n\nTested `SQLAlchemy` versions: 0.7, 0.8, 0.9, 1.0, 1.1.\n\nExamples above are using `SQLAlchemy` >= 0.9, if you are using older versions,\nyou will have to do next changes in your project configuration:\n\n.. code-block:: python\n\n    from sqlconstruct import QueryMixin\n    from sqlalchemy.orm.query import Query as BaseQuery\n\n    class Query(QueryMixin, BaseQuery):\n        pass\n\n    session = Session(engine, query_cls=Query)\n\nFlask-SQLAlchemy:\n\n.. code-block:: python\n\n    from flask.ext.sqlalchemy import SQLAlchemy\n\n    db = SQLAlchemy(app, session_options={'query_cls': Query})\n\nor\n\n.. code-block:: python\n\n    db = SQLAlchemy(session_options={'query_cls': Query})\n    db.init_app(app)\n\nLicense\n=======\n\n`SQLConstruct` is distributed under the BSD license. See LICENSE.txt for more\ndetails.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/vmagamedov/sqlconstruct", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "SQLConstruct", "package_url": "https://pypi.org/project/SQLConstruct/", "platform": "", "project_url": "https://pypi.org/project/SQLConstruct/", "project_urls": {"Homepage": "https://github.com/vmagamedov/sqlconstruct"}, "release_url": "https://pypi.org/project/SQLConstruct/0.2.3/", "requires_dist": null, "requires_python": "", "summary": "Functional approach to query database using SQLAlchemy", "version": "0.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>SQLConstruct</cite> is a functional approach to query database using <cite>SQLAlchemy</cite>\nlibrary. It was written to reach more speed without introducing unmaintainable\nand verbose code. On the contrary, code becomes simpler, so there are less\nchances of shooting yourself in the foot.</p>\n<p>Main problems it aims to solve:</p>\n<ul>\n<li>ORM overhead in read-only <tt>SELECT</tt> queries;</li>\n<li>Network traffic when loading unnecessary columns;</li>\n<li>Code complexity;</li>\n<li>N+1 problem.</li>\n</ul>\n<div id=\"final\">\n<h2>Final</h2>\n<p>You describe what you want to get from the database:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">Construct</span><span class=\"p\">,</span> <span class=\"n\">if_</span>\n\n<span class=\"n\">product_struct</span> <span class=\"o\">=</span> <span class=\"n\">Construct</span><span class=\"p\">({</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"n\">url_for_product</span><span class=\"o\">.</span><span class=\"n\">defn</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">),</span>\n    <span class=\"s1\">'image_url'</span><span class=\"p\">:</span> <span class=\"n\">if_</span><span class=\"p\">(</span>\n        <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">then_</span><span class=\"o\">=</span><span class=\"n\">url_for_image</span><span class=\"o\">.</span><span class=\"n\">defn</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n        <span class=\"n\">else_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre>\n<p>And you get it. <cite>SQLConstruct</cite> knows which columns you need and how transform\nthem into suitable to use format:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">product_struct</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">outerjoin</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"s1\">'Foo product'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"s1\">'/p1-foo-product.html'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">image_url</span>\n<span class=\"s1\">'//images.example.st/123-100x100-foo.jpg'</span>\n</pre>\n</div>\n<div id=\"full-story\">\n<h2>Full story</h2>\n<p>Basic preparations:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">create_engine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">Column</span><span class=\"p\">,</span> <span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">String</span><span class=\"p\">,</span> <span class=\"n\">Text</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.orm</span> <span class=\"kn\">import</span> <span class=\"n\">Session</span><span class=\"p\">,</span> <span class=\"n\">relationship</span><span class=\"p\">,</span> <span class=\"n\">eagerload</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.ext.declarative</span> <span class=\"kn\">import</span> <span class=\"n\">declarative_base</span>\n\n<span class=\"n\">engine</span> <span class=\"o\">=</span> <span class=\"n\">create_engine</span><span class=\"p\">(</span><span class=\"s1\">'sqlite://'</span><span class=\"p\">)</span>\n<span class=\"n\">Base</span> <span class=\"o\">=</span> <span class=\"n\">declarative_base</span><span class=\"p\">()</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Image</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'image'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Product</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">):</span>\n    <span class=\"n\">__tablename__</span> <span class=\"o\">=</span> <span class=\"s1\">'product'</span>\n\n    <span class=\"nb\">id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">primary_key</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">String</span><span class=\"p\">)</span>\n    <span class=\"n\">image_id</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">,</span> <span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">))</span>\n    <span class=\"n\">description</span> <span class=\"o\">=</span> <span class=\"n\">Column</span><span class=\"p\">(</span><span class=\"n\">Text</span><span class=\"p\">)</span>\n\n    <span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">relationship</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">)</span>\n\n<span class=\"n\">Base</span><span class=\"o\">.</span><span class=\"n\">metadata</span><span class=\"o\">.</span><span class=\"n\">create_all</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">)</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Foo product'</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"o\">=</span><span class=\"n\">Image</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Foo.jpg'</span><span class=\"p\">)))</span>\n<span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">commit</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">slugify</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">):</span>\n    <span class=\"c1\"># very dumb implementation, just for an example</span>\n    <span class=\"k\">return</span> <span class=\"n\">name</span><span class=\"o\">.</span><span class=\"n\">lower</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">' '</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">url_for_product</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'/p</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">.html'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">url_for_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'//images.example.st/</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{width}</span><span class=\"s1\">x</span><span class=\"si\">{height}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Usual way:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">options</span><span class=\"p\">(</span><span class=\"n\">eagerload</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Foo product'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_for_product</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">)</span>\n<span class=\"s1\">'/p1-foo-product.html'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_for_image</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">image</span> <span class=\"k\">else</span> <span class=\"kc\">None</span>\n<span class=\"s1\">'//images.example.st/1-100x100-foo.jpg'</span>\n</pre>\n<p>Disadvantages:</p>\n<ul>\n<li><tt>description</tt> column isn\u2019t deferred, it will be loaded every time;</li>\n<li>if you will mark <tt>description</tt> column as deferred, this can introduce N+1\nproblem somewhere else in your project;</li>\n<li>if you forgot to <tt>eagerload</tt> <tt>Product.image</tt> you will also get N+1\nproblem;</li>\n<li>you have to pass model instances as arguments everywhere in the project and\nthis tends to code complexity, because you don\u2019t know how they will be used in\nthe future;</li>\n<li>model instances creation isn\u2019t cheap, CPU time grows with number of columns,\neven if they are all deferred.</li>\n</ul>\n<p>Initial solution:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">Construct</span><span class=\"p\">,</span> <span class=\"n\">apply_</span><span class=\"p\">,</span> <span class=\"n\">if_</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">url_for_product</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">,</span> <span class=\"n\">product_name</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'/p</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">.html'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">product_id</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">product_name</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">url_for_image</span><span class=\"p\">(</span><span class=\"n\">image_id</span><span class=\"p\">,</span> <span class=\"n\">image_name</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'//images.example.st/</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{width}</span><span class=\"s1\">x</span><span class=\"si\">{height}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n        <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">image_id</span><span class=\"p\">,</span>\n        <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span>\n        <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">,</span>\n        <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"p\">),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">product_struct</span> <span class=\"o\">=</span> <span class=\"n\">Construct</span><span class=\"p\">({</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"n\">apply_</span><span class=\"p\">(</span><span class=\"n\">url_for_product</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]),</span>\n    <span class=\"s1\">'image_url'</span><span class=\"p\">:</span> <span class=\"n\">if_</span><span class=\"p\">(</span>\n        <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">then_</span><span class=\"o\">=</span><span class=\"n\">apply_</span><span class=\"p\">(</span><span class=\"n\">url_for_image</span><span class=\"p\">,</span> <span class=\"n\">args</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">]),</span>\n        <span class=\"n\">else_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre>\n<p>Usage:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n<span class=\"o\">...</span>     <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">product_struct</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">outerjoin</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>     <span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">...</span> <span class=\"p\">)</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span>\n<span class=\"sa\">u</span><span class=\"s1\">'Foo product'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">url</span>\n<span class=\"s1\">'/p1-foo-product.html'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">image_url</span>\n<span class=\"s1\">'//images.example.st/1-100x100-foo.jpg'</span>\n</pre>\n<p>Advantages:</p>\n<ul>\n<li>you\u2019re loading only what you need, no extra network traffic, no need to\ndefer/undefer columns;</li>\n<li><tt>url_for_product</tt> and <tt>url_for_image</tt> functions can\u2019t add complexity,\nbecause they are forced to define all needed columns as arguments;</li>\n<li>you\u2019re working with precomputed values (urls in this example).</li>\n</ul>\n<p>Disadvantages:</p>\n<ul>\n<li>code of functions is hard to refactor and reuse, because you should specify or\npass all the arguments every time;</li>\n<li>you should be careful with joins, because if you wouldn\u2019t specify them\nexplicitly, <cite>SQLAlchemy</cite> will produce cartesian product of the tables\n(<tt>SELECT ... FROM product, image WHERE ...</tt>), which will return wrong\nresults and hurt your performance.</li>\n</ul>\n<p>To address first disadvantage, <cite>SQLConstruct</cite> provides <tt>define</tt> decorator,\nwhich gives you ability to define hybrid functions to use them in different\nways:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">define</span>\n\n<span class=\"nd\">@define</span>\n<span class=\"k\">def</span> <span class=\"nf\">url_for_product</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"n\">product_id</span><span class=\"p\">,</span> <span class=\"n\">product_name</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'/p</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">.html'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">product_id</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">product_name</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]</span>\n\n<span class=\"nd\">@define</span>\n<span class=\"k\">def</span> <span class=\"nf\">url_for_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">body</span><span class=\"p\">(</span><span class=\"n\">image_id</span><span class=\"p\">,</span> <span class=\"n\">image_name</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s1\">'//images.example.st/</span><span class=\"si\">{id}</span><span class=\"s1\">-</span><span class=\"si\">{width}</span><span class=\"s1\">x</span><span class=\"si\">{height}</span><span class=\"s1\">-</span><span class=\"si\">{name}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"nb\">id</span><span class=\"o\">=</span><span class=\"n\">image_id</span><span class=\"p\">,</span>\n            <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"n\">width</span><span class=\"p\">,</span>\n            <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"n\">height</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">slugify</span><span class=\"p\">(</span><span class=\"n\">image_name</span><span class=\"p\">),</span>\n        <span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">body</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"p\">]</span>\n</pre>\n<p>Now these functions can be used in these ways:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">product</span> <span class=\"o\">=</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">first</span><span class=\"p\">()</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_for_product</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"p\">)</span>  <span class=\"c1\"># objective style</span>\n<span class=\"s1\">'/p1-foo-product.html'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_for_product</span><span class=\"o\">.</span><span class=\"n\">defn</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">)</span>  <span class=\"c1\"># apply_ declaration</span>\n<span class=\"o\">&lt;</span><span class=\"n\">sqlconstruct</span><span class=\"o\">.</span><span class=\"n\">apply_</span> <span class=\"n\">at</span> <span class=\"mh\">0x000000000</span><span class=\"o\">&gt;</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">url_for_product</span><span class=\"o\">.</span><span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>  <span class=\"c1\"># functional style</span>\n<span class=\"s1\">'/p1-foo-product.html'</span>\n</pre>\n<p>Modified final <tt>Construct</tt> definition:</p>\n<pre><span class=\"n\">product_struct</span> <span class=\"o\">=</span> <span class=\"n\">Construct</span><span class=\"p\">({</span>\n    <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"n\">Product</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span>\n    <span class=\"s1\">'url'</span><span class=\"p\">:</span> <span class=\"n\">url_for_product</span><span class=\"o\">.</span><span class=\"n\">defn</span><span class=\"p\">(</span><span class=\"n\">Product</span><span class=\"p\">),</span>\n    <span class=\"s1\">'image_url'</span><span class=\"p\">:</span> <span class=\"n\">if_</span><span class=\"p\">(</span>\n        <span class=\"n\">Image</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span>\n        <span class=\"n\">then_</span><span class=\"o\">=</span><span class=\"n\">url_for_image</span><span class=\"o\">.</span><span class=\"n\">defn</span><span class=\"p\">(</span><span class=\"n\">Image</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span>\n        <span class=\"n\">else_</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"p\">),</span>\n<span class=\"p\">})</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install <cite>SQLConstruct</cite>, simply:</p>\n<pre>$ pip install sqlconstruct\n</pre>\n<p>Tested <cite>Python</cite> versions: 2.7, 3.4, PyPy.</p>\n<p>Tested <cite>SQLAlchemy</cite> versions: 0.7, 0.8, 0.9, 1.0, 1.1.</p>\n<p>Examples above are using <cite>SQLAlchemy</cite> &gt;= 0.9, if you are using older versions,\nyou will have to do next changes in your project configuration:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sqlconstruct</span> <span class=\"kn\">import</span> <span class=\"n\">QueryMixin</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sqlalchemy.orm.query</span> <span class=\"kn\">import</span> <span class=\"n\">Query</span> <span class=\"k\">as</span> <span class=\"n\">BaseQuery</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">QueryMixin</span><span class=\"p\">,</span> <span class=\"n\">BaseQuery</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">Session</span><span class=\"p\">(</span><span class=\"n\">engine</span><span class=\"p\">,</span> <span class=\"n\">query_cls</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n</pre>\n<p>Flask-SQLAlchemy:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">flask.ext.sqlalchemy</span> <span class=\"kn\">import</span> <span class=\"n\">SQLAlchemy</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">,</span> <span class=\"n\">session_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'query_cls'</span><span class=\"p\">:</span> <span class=\"n\">Query</span><span class=\"p\">})</span>\n</pre>\n<p>or</p>\n<pre><span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">SQLAlchemy</span><span class=\"p\">(</span><span class=\"n\">session_options</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'query_cls'</span><span class=\"p\">:</span> <span class=\"n\">Query</span><span class=\"p\">})</span>\n<span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">init_app</span><span class=\"p\">(</span><span class=\"n\">app</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p><cite>SQLConstruct</cite> is distributed under the BSD license. See LICENSE.txt for more\ndetails.</p>\n</div>\n\n          </div>"}, "last_serial": 2611813, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "bb0171320d55212a810a7eb2e31d5dbf", "sha256": "1c9ce8af5068157dd3ccf28bf3746dfb52ab11dc3a42c48cfe0d9f53c94730ef"}, "downloads": -1, "filename": "SQLConstruct-0.2.0.tar.gz", "has_sig": false, "md5_digest": "bb0171320d55212a810a7eb2e31d5dbf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9744, "upload_time": "2014-10-07T12:34:24", "upload_time_iso_8601": "2014-10-07T12:34:24.608172Z", "url": "https://files.pythonhosted.org/packages/7f/f2/1b76380d8d8df4d6f73c82be1ce7aa7119a2e5695abcb4565f652b89093c/SQLConstruct-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c663f6587226d97dbf097a6ce75c728f", "sha256": "1cee622fddb811de5194e4fbdb821fd31e74b540a51ca0f0c9f927901ade7d2b"}, "downloads": -1, "filename": "SQLConstruct-0.2.1.tar.gz", "has_sig": false, "md5_digest": "c663f6587226d97dbf097a6ce75c728f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9773, "upload_time": "2015-08-13T13:33:35", "upload_time_iso_8601": "2015-08-13T13:33:35.102490Z", "url": "https://files.pythonhosted.org/packages/41/7d/e9433b2eab4e258e8b183cf2c156b17245471991450d6761d3ecdec83f66/SQLConstruct-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "4e58e83327d79b7ad4d730880b153fce", "sha256": "17a6415ea9349ce49e8ec5f259b98f4c5760ecfee5723f512b2fc7c39093eb4d"}, "downloads": -1, "filename": "SQLConstruct-0.2.2.tar.gz", "has_sig": false, "md5_digest": "4e58e83327d79b7ad4d730880b153fce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9812, "upload_time": "2015-08-13T13:38:27", "upload_time_iso_8601": "2015-08-13T13:38:27.676093Z", "url": "https://files.pythonhosted.org/packages/c4/d1/968f5da66722d82094ddb85548f14975d209e4e3349d44ac646db294d221/SQLConstruct-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "080eabf49301088d4a0cc348788a4407", "sha256": "ae1cf72c04d80c9ed76f982abd90779ee9a8bd6f29f3611c09b24c0c8a9f6f28"}, "downloads": -1, "filename": "SQLConstruct-0.2.3.tar.gz", "has_sig": false, "md5_digest": "080eabf49301088d4a0cc348788a4407", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9773, "upload_time": "2017-02-01T15:12:43", "upload_time_iso_8601": "2017-02-01T15:12:43.295388Z", "url": "https://files.pythonhosted.org/packages/b2/87/36f5bac7a384b4210a007f622686cbb99acd902d94713e9285faa4505729/SQLConstruct-0.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "080eabf49301088d4a0cc348788a4407", "sha256": "ae1cf72c04d80c9ed76f982abd90779ee9a8bd6f29f3611c09b24c0c8a9f6f28"}, "downloads": -1, "filename": "SQLConstruct-0.2.3.tar.gz", "has_sig": false, "md5_digest": "080eabf49301088d4a0cc348788a4407", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9773, "upload_time": "2017-02-01T15:12:43", "upload_time_iso_8601": "2017-02-01T15:12:43.295388Z", "url": "https://files.pythonhosted.org/packages/b2/87/36f5bac7a384b4210a007f622686cbb99acd902d94713e9285faa4505729/SQLConstruct-0.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:47 2020"}