{"info": {"author": "Joao Henry Huam\u00e1n Chinchay", "author_email": "joaohenry23@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "# metlib\nPython package to performs meteorological calculations\n<br><br>\n\n# Requirements\n- [numpy](https://numpy.org/)\n- [xarray](http://xarray.pydata.org/en/stable/)\n<br><br>\n\n# Usage\nSee the next jupyter notebook examples where are calculated the relative vorticity, the horizontal divergence of wind and the temperature advection, also are showed how to creates lat-lon plots and vertical profile plots along latitude, longitude or time.\n\n- Using [netCDF4](https://github.com/Unidata/netcdf4-python):\n  * creates lat-lon plots using [basemap](https://matplotlib.org/basemap/)/[cartopy](https://scitools.org.uk/cartopy/docs/latest/), [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex01.ipynb)**).\n  * creates vertical profile plots using [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex04.ipynb)**).<br><br>\n\n- Using [xarray](http://xarray.pydata.org/en/stable/):\n  * creates lat-lon plots using [basemap](https://matplotlib.org/basemap/)/[cartopy](https://scitools.org.uk/cartopy/docs/latest/), [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex02.ipynb)**).\n  * creates vertical profile plots using [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex05.ipynb)**).<br><br>\n\n- Using [xarray](http://xarray.pydata.org/en/stable/) and [xarray.plot](http://xarray.pydata.org/en/stable/plotting.html):\n  * creates lat-lon plots using [xarray.plot](http://xarray.pydata.org/en/stable/plotting.html), [cartopy](https://scitools.org.uk/cartopy/docs/latest/), [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex03.ipynb)**).\n  * creates vertical profile plots using [xarray.plot](http://xarray.pydata.org/en/stable/plotting.html), [matplotlib](https://matplotlib.org/) and [pcolormesh](https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html)/[contourf](https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html) (**[example](https://github.com/joaohenry23/metlib/blob/master/examples/ex06.ipynb)**).\n<br><br>\n\n# Reference Guide\nClick on the item to see the function and their description.\n<details><summary>Central difference finites</summary>\n<br>\n\n**cdiff**(Field, Dim)\n```\n   Calculates a centered finite difference of Numpy array or Xarray.DataArray.\n\n\n   Parameters\n   ----------\n   Field: Numpy array or Xarray.DataArray\n          Their structure can be:\n          - 1D [x]\n          - 2D [y,x]\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   Dim: String (str)\n        Defines axis of derivative and can be 'X', 'Y', 'Z', 'T'.\n\n\n   Returns\n   -------\n   CDIFF: Numpy array or Xarray.DataArray\n          Centered finite difference in Dim of Field. The shape is the same that input(Field).\n```\n<br>\n</details>\n\n<details><summary>Relative vorticity</summary>\n<br>\n\n**relative_vorticity**(UComp, VComp, Lon=None, Lat=None)\n```\n   Calculates the relative vorticity of horizontal wind.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   vor: Numpy array or Xarray.DataArray\n        Relative vorticity of Ucomp and Vcomp [s**-1]\n```\n<br>\n</details>\n\n<details><summary>Absolute vorticity</summary>\n<br>\n\n**absolute_vorticity**(UComp, VComp, Lon=None, Lat=None)\n```\n   Calculates the absolute vorticity of horizontal wind.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   avor: Numpy array or Xarray.DataArray\n         Absolute relative vorticity of Ucomp and Vcomp [s**-1]\n```\n<br>\n</details>\n\n<details><summary>Divergence</summary>\n<br>\n\n**divergence**(UComp, VComp, Lon=None, Lat=None)\n```\n   Calculates the divergence of horizontal wind or some vector field.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   div: Numpy array or Xarray.DataArray\n        Horizontal divergence of Ucomp and Vcomp [1/s]\n        Negative divergence is also known as convergence.\n```\n<br>\n</details>\n\n<details> <summary>Advection</summary>\n<br>\n\n**advection**(Field, UComp, VComp, Lon=None, Lat=None)\n```\n   Calculates the horizontal adveccion of Field. \n\n\n   Parameters\n   ----------\n   Field: Numpy array or Xarray.DataArray\n          Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   adv: Numpy array or Xarray.DataArray\n        Horizontal advection of Field [Field_units/s]\n```\n<br>\n</details>\n\n<details><summary>Potential temperature</summary>\n<br>\n\n**potential_temperature**(Temperature, Levels=None)\n```\n   Calculates the potential temperature.\n\n\n   Parameters\n   ----------\n   Temperature: Numpy array or Xarray.DataArray\n                Temperature field in Kelvin. Their structure can be:\n                - 2D [y,x]\n                - 3D [z,y,x] or [t,y,x]\n                - 4D [t,z,y,x]\n\n\n   Levels: Numpy array\n           1D array with pressure levels of Temperature.\n\n\n   Returns\n   -------\n   PTemp: Numpy array or Xarray.DataArray\n          Potential temperature [K].\n```\n<br>\n</details>\n\n<details><summary>Potential vorticity</summary>\n<br>\n\n**potential_vorticity**(Temperature, UComp, VComp, Lon=None, Lat=None, Levels=None)\n```\n   Calculates the baroclinic potential vorticity.\n\n\n   Parameters\n   ----------\n   Temperature: Numpy array or Xarray.DataArray\n                Temperature field in Kelvin. Their structure can be:\n                - 3D [z,y,x]\n                - 4D [t,z,y,x]\n\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Levels: Numpy array\n           1D array with pressure levels of Temperature.\n           If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   PVor: Numpy array or Xarray.DataArray\n         Baroclinic potential voticity [1/s].\n```\n<br>\n</details>\n<br><br>\n\n# Installation\nYou can install metlib on Python 2 or 3 on Linux, Windows or other using the following commands (I recommend doing it within your favorite Python environment).\n<br>\n\n**From PYPI using pip (recommended method)**\n\n```\npip install metlib\n```\n<br>\n\n**From github**\n\n- Download ZIP (**metlib-master.zip**) and following commands:\n```\nunzip metlib-master.zip\ncd metlib-master\npython setup.py install\ncd ..  # it is necessary to leave the installation folder\n```\n<br>\n\n- or also, cloning the github package:\n```\nclone https://github.com/joaohenry23/metlib.git\ncd metlib\npython setup.py install\ncd ..  # it is necessary to leave the installation folder\n```\n<br>\n\n**Check if package was installed**\n\n```\npip show metlib\n```\n<br>\n\n**Update to the latest version**\n\n```\npip install --upgrade metlib\n```\n<br>\n<br>\n\n# Support\nIf you have any questions, do not hesitate to write to:\n```\njoaohenry23@gmail.com\n\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joaohenry23/metlib", "keywords": "", "license": "BSD 3-Clause", "maintainer": "", "maintainer_email": "", "name": "metlib", "package_url": "https://pypi.org/project/metlib/", "platform": "", "project_url": "https://pypi.org/project/metlib/", "project_urls": {"Homepage": "https://github.com/joaohenry23/metlib"}, "release_url": "https://pypi.org/project/metlib/0.0.1.2/", "requires_dist": ["numpy", "xarray"], "requires_python": ">=2.7", "summary": "Python package to performs meteorological calculations", "version": "0.0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>metlib</h1>\n<p>Python package to performs meteorological calculations\n<br><br></p>\n<h1>Requirements</h1>\n<ul>\n<li><a href=\"https://numpy.org/\" rel=\"nofollow\">numpy</a></li>\n<li><a href=\"http://xarray.pydata.org/en/stable/\" rel=\"nofollow\">xarray</a>\n<br><br></li>\n</ul>\n<h1>Usage</h1>\n<p>See the next jupyter notebook examples where are calculated the relative vorticity, the horizontal divergence of wind and the temperature advection, also are showed how to creates lat-lon plots and vertical profile plots along latitude, longitude or time.</p>\n<ul>\n<li>\n<p>Using <a href=\"https://github.com/Unidata/netcdf4-python\" rel=\"nofollow\">netCDF4</a>:</p>\n<ul>\n<li>creates lat-lon plots using <a href=\"https://matplotlib.org/basemap/\" rel=\"nofollow\">basemap</a>/<a href=\"https://scitools.org.uk/cartopy/docs/latest/\" rel=\"nofollow\">cartopy</a>, <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex01.ipynb\" rel=\"nofollow\">example</a></strong>).</li>\n<li>creates vertical profile plots using <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex04.ipynb\" rel=\"nofollow\">example</a></strong>).<br><br></li>\n</ul>\n</li>\n<li>\n<p>Using <a href=\"http://xarray.pydata.org/en/stable/\" rel=\"nofollow\">xarray</a>:</p>\n<ul>\n<li>creates lat-lon plots using <a href=\"https://matplotlib.org/basemap/\" rel=\"nofollow\">basemap</a>/<a href=\"https://scitools.org.uk/cartopy/docs/latest/\" rel=\"nofollow\">cartopy</a>, <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex02.ipynb\" rel=\"nofollow\">example</a></strong>).</li>\n<li>creates vertical profile plots using <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex05.ipynb\" rel=\"nofollow\">example</a></strong>).<br><br></li>\n</ul>\n</li>\n<li>\n<p>Using <a href=\"http://xarray.pydata.org/en/stable/\" rel=\"nofollow\">xarray</a> and <a href=\"http://xarray.pydata.org/en/stable/plotting.html\" rel=\"nofollow\">xarray.plot</a>:</p>\n<ul>\n<li>creates lat-lon plots using <a href=\"http://xarray.pydata.org/en/stable/plotting.html\" rel=\"nofollow\">xarray.plot</a>, <a href=\"https://scitools.org.uk/cartopy/docs/latest/\" rel=\"nofollow\">cartopy</a>, <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex03.ipynb\" rel=\"nofollow\">example</a></strong>).</li>\n<li>creates vertical profile plots using <a href=\"http://xarray.pydata.org/en/stable/plotting.html\" rel=\"nofollow\">xarray.plot</a>, <a href=\"https://matplotlib.org/\" rel=\"nofollow\">matplotlib</a> and <a href=\"https://matplotlib.org/3.1.1/api/_as_gen/matplotlib.pyplot.pcolormesh.html\" rel=\"nofollow\">pcolormesh</a>/<a href=\"https://matplotlib.org/api/_as_gen/matplotlib.pyplot.contourf.html\" rel=\"nofollow\">contourf</a> (<strong><a href=\"https://github.com/joaohenry23/metlib/blob/master/examples/ex06.ipynb\" rel=\"nofollow\">example</a></strong>).\n<br><br></li>\n</ul>\n</li>\n</ul>\n<h1>Reference Guide</h1>\n<p>Click on the item to see the function and their description.</p>\n<details><summary>Central difference finites</summary>\n<br>\n<p><strong>cdiff</strong>(Field, Dim)</p>\n<pre><code>   Calculates a centered finite difference of Numpy array or Xarray.DataArray.\n\n\n   Parameters\n   ----------\n   Field: Numpy array or Xarray.DataArray\n          Their structure can be:\n          - 1D [x]\n          - 2D [y,x]\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   Dim: String (str)\n        Defines axis of derivative and can be 'X', 'Y', 'Z', 'T'.\n\n\n   Returns\n   -------\n   CDIFF: Numpy array or Xarray.DataArray\n          Centered finite difference in Dim of Field. The shape is the same that input(Field).\n</code></pre>\n<br>\n</details>\n<details><summary>Relative vorticity</summary>\n<br>\n<p><strong>relative_vorticity</strong>(UComp, VComp, Lon=None, Lat=None)</p>\n<pre><code>   Calculates the relative vorticity of horizontal wind.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   vor: Numpy array or Xarray.DataArray\n        Relative vorticity of Ucomp and Vcomp [s**-1]\n</code></pre>\n<br>\n</details>\n<details><summary>Absolute vorticity</summary>\n<br>\n<p><strong>absolute_vorticity</strong>(UComp, VComp, Lon=None, Lat=None)</p>\n<pre><code>   Calculates the absolute vorticity of horizontal wind.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   avor: Numpy array or Xarray.DataArray\n         Absolute relative vorticity of Ucomp and Vcomp [s**-1]\n</code></pre>\n<br>\n</details>\n<details><summary>Divergence</summary>\n<br>\n<p><strong>divergence</strong>(UComp, VComp, Lon=None, Lat=None)</p>\n<pre><code>   Calculates the divergence of horizontal wind or some vector field.\n\n\n   Parameters\n   ----------\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   div: Numpy array or Xarray.DataArray\n        Horizontal divergence of Ucomp and Vcomp [1/s]\n        Negative divergence is also known as convergence.\n</code></pre>\n<br>\n</details>\n<details> <summary>Advection</summary>\n<br>\n<p><strong>advection</strong>(Field, UComp, VComp, Lon=None, Lat=None)</p>\n<pre><code>   Calculates the horizontal adveccion of Field. \n\n\n   Parameters\n   ----------\n   Field: Numpy array or Xarray.DataArray\n          Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 2D [y,x]\n          - 3D [z,y,x] or [t,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   adv: Numpy array or Xarray.DataArray\n        Horizontal advection of Field [Field_units/s]\n</code></pre>\n<br>\n</details>\n<details><summary>Potential temperature</summary>\n<br>\n<p><strong>potential_temperature</strong>(Temperature, Levels=None)</p>\n<pre><code>   Calculates the potential temperature.\n\n\n   Parameters\n   ----------\n   Temperature: Numpy array or Xarray.DataArray\n                Temperature field in Kelvin. Their structure can be:\n                - 2D [y,x]\n                - 3D [z,y,x] or [t,y,x]\n                - 4D [t,z,y,x]\n\n\n   Levels: Numpy array\n           1D array with pressure levels of Temperature.\n\n\n   Returns\n   -------\n   PTemp: Numpy array or Xarray.DataArray\n          Potential temperature [K].\n</code></pre>\n<br>\n</details>\n<details><summary>Potential vorticity</summary>\n<br>\n<p><strong>potential_vorticity</strong>(Temperature, UComp, VComp, Lon=None, Lat=None, Levels=None)</p>\n<pre><code>   Calculates the baroclinic potential vorticity.\n\n\n   Parameters\n   ----------\n   Temperature: Numpy array or Xarray.DataArray\n                Temperature field in Kelvin. Their structure can be:\n                - 3D [z,y,x]\n                - 4D [t,z,y,x]\n\n   UComp: Numpy array or Xarray.DataArray\n          Zonal component of wind. Their structure can be:\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   VComp: Numpy array or Xarray.DataArray\n          Meridional component of wind. Their structure can be:\n          - 3D [z,y,x]\n          - 4D [t,z,y,x]\n\n   Lon: Numpy array\n        2D array with the longitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n   Lat: Numpy array\n        2D array with the latitudes of UComp and VComp.\n        If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Levels: Numpy array\n           1D array with pressure levels of Temperature.\n           If UComp and VComp are xarray.DataArray is not necessary define this parameter.\n\n\n   Returns\n   -------\n   PVor: Numpy array or Xarray.DataArray\n         Baroclinic potential voticity [1/s].\n</code></pre>\n<br>\n</details>\n<br><br>\n<h1>Installation</h1>\n<p>You can install metlib on Python 2 or 3 on Linux, Windows or other using the following commands (I recommend doing it within your favorite Python environment).\n<br></p>\n<p><strong>From PYPI using pip (recommended method)</strong></p>\n<pre><code>pip install metlib\n</code></pre>\n<br>\n<p><strong>From github</strong></p>\n<ul>\n<li>Download ZIP (<strong>metlib-master.zip</strong>) and following commands:</li>\n</ul>\n<pre><code>unzip metlib-master.zip\ncd metlib-master\npython setup.py install\ncd ..  # it is necessary to leave the installation folder\n</code></pre>\n<br>\n<ul>\n<li>or also, cloning the github package:</li>\n</ul>\n<pre><code>clone https://github.com/joaohenry23/metlib.git\ncd metlib\npython setup.py install\ncd ..  # it is necessary to leave the installation folder\n</code></pre>\n<br>\n<p><strong>Check if package was installed</strong></p>\n<pre><code>pip show metlib\n</code></pre>\n<br>\n<p><strong>Update to the latest version</strong></p>\n<pre><code>pip install --upgrade metlib\n</code></pre>\n<br>\n<br>\n<h1>Support</h1>\n<p>If you have any questions, do not hesitate to write to:</p>\n<pre><code>joaohenry23@gmail.com\n\n</code></pre>\n\n          </div>"}, "last_serial": 7098819, "releases": {"0.0.1.2": [{"comment_text": "", "digests": {"md5": "48bbc181c4c42b4776936c0202571339", "sha256": "e9bda062c60be7be47b6f0ba376dffd00d8fadc9faa83d86d0abd93c5a3427a0"}, "downloads": -1, "filename": "metlib-0.0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "48bbc181c4c42b4776936c0202571339", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7714, "upload_time": "2020-04-25T09:58:41", "upload_time_iso_8601": "2020-04-25T09:58:41.781415Z", "url": "https://files.pythonhosted.org/packages/7f/f1/ed5ee19a369f6d03d9c953d4579d1cf344aacb8157d7916cf97c2ec562b6/metlib-0.0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00e73aeab52caa391b77baac8353df77", "sha256": "15f848cd9931ec03e9e243aab206611a7bcde5fad56874a272b988a798e0f98b"}, "downloads": -1, "filename": "metlib-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "00e73aeab52caa391b77baac8353df77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6244, "upload_time": "2020-04-25T09:58:43", "upload_time_iso_8601": "2020-04-25T09:58:43.991396Z", "url": "https://files.pythonhosted.org/packages/86/fe/65f78600f4ce0fc5de49529ce88147fe1c2d93783227a089150aba2f39c1/metlib-0.0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48bbc181c4c42b4776936c0202571339", "sha256": "e9bda062c60be7be47b6f0ba376dffd00d8fadc9faa83d86d0abd93c5a3427a0"}, "downloads": -1, "filename": "metlib-0.0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "48bbc181c4c42b4776936c0202571339", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7", "size": 7714, "upload_time": "2020-04-25T09:58:41", "upload_time_iso_8601": "2020-04-25T09:58:41.781415Z", "url": "https://files.pythonhosted.org/packages/7f/f1/ed5ee19a369f6d03d9c953d4579d1cf344aacb8157d7916cf97c2ec562b6/metlib-0.0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00e73aeab52caa391b77baac8353df77", "sha256": "15f848cd9931ec03e9e243aab206611a7bcde5fad56874a272b988a798e0f98b"}, "downloads": -1, "filename": "metlib-0.0.1.2.tar.gz", "has_sig": false, "md5_digest": "00e73aeab52caa391b77baac8353df77", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6244, "upload_time": "2020-04-25T09:58:43", "upload_time_iso_8601": "2020-04-25T09:58:43.991396Z", "url": "https://files.pythonhosted.org/packages/86/fe/65f78600f4ce0fc5de49529ce88147fe1c2d93783227a089150aba2f39c1/metlib-0.0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:41 2020"}