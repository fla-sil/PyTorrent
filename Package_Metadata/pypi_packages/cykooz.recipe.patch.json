{"info": {"author": "Kirill Kuzminykh", "author_email": "saikuz@mail.ru", "bugtrack_url": null, "classifiers": ["Framework :: Buildout", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License (GPL)", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "This is a fork of ``emencia.recipe.patch``. Main differences are:\n\n- Added Python 3 support.\n\nLinks:\n\n- https://pypi.python.org/pypi/cykooz.recipe.patch - Download\n- https://github.com/cykooz/cykooz.recipe.patch - Source code\n\n\nSupported options\n=================\n\nThe recipe supports the following options:\n\npath\n    Define a directory in which the patch should be applied. For\n    example::\n\n        path = src/some/directory/\n\negg\n    Define which egg should be patched. You can also pin to a specific\n    version. For example::\n\n        egg = some.egg<=1.1.1\n\npatches\n    Paths to patch files. These patches are applied in order. For\n    example::\n\n        patches = patches/my_very_sprecial.patch\n                  patches/another_loverly.patch\n\nExample usage\n=============\n\nOur demo package which we will patch:\n\n    >>> mkdir(sample_buildout, 'demo')\n    >>> write(sample_buildout, 'demo', 'README.txt', \" \")\n    >>> write(sample_buildout, 'demo', 'demo.py',\n    ... \"\"\"# demo egg\n    ... \"\"\")\n    >>> write(sample_buildout, 'demo', 'setup.py',\n    ... \"\"\"\n    ... from setuptools import setup\n    ...\n    ... setup(\n    ...     name = \"demo\",\n    ...     version='1.0',\n    ...     py_modules=['demo']\n    ...     )\n    ... \"\"\")\n    >>> print_(system(buildout + ' setup demo bdist_egg')) # doctest: +ELLIPSIS\n    Running setup script 'demo/setup.py'.\n    ...\n\nCreate our patch:\n\n    >>> write(sample_buildout, 'demo.patch',\n    ... \"\"\"diff --git demo.py demo.py\n    ... --- demo.py\n    ... +++ demo.py\n    ... @@ -1 +1,2 @@\n    ...  # demo egg\n    ... +# patching\n    ... \"\"\")\n\nLet's write out buildout.cfg to patch our demo package:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = demo-patch\n    ... index = demo/dist/\n    ...\n    ... [demo-patch]\n    ... recipe = cykooz.recipe.patch\n    ... egg = demo==1.0\n    ... patches = demo.patch\n    ... \"\"\")\n\nOur final egg name depends on current python version:\n\n    >>> import sys\n    >>> demoegg = 'demo-1.0-py%d.%d.egg' % sys.version_info[:2]\n\nRunning the buildout gives us:\n\n    >>> print_(system(buildout))\n    Installing demo-patch.\n    Getting distribution for 'demo==1.0'.\n    Got demo 1.0.\n    patch: reading patch .../demo.patch\n    ...\n    patch: patching file demo.py\n    patch: successfully patched .../demo-1.0...\n    ...\n\n    >>> ls(sample_buildout, 'develop-eggs', demoegg)\n    d  EGG-INFO\n    -  demo.py\n    -  demo.pyc\n    -  demo.pyo\n    >>> cat(sample_buildout, 'demo', 'demo.py')\n    # demo egg\n    >>> cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n    # demo egg\n    # patching\n\nMultiple patches\n----------------\n\nIf you have more than one patch to apply:\n\n    >>> write(sample_buildout, 'another.patch',\n    ... \"\"\"diff --git demo.py demo.py\n    ... --- demo.py\n    ... +++ demo.py\n    ... @@ -1,2 +1 @@\n    ... -# demo egg\n    ...  # patching\n    ... \"\"\")\n\nUpdate your buildout.cfg to list the new patch. In this case,\nanother.patch should be applied after demo.patch:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = demo-patch\n    ... index = demo/dist/\n    ...\n    ... [demo-patch]\n    ... recipe = cykooz.recipe.patch\n    ... egg = demo==1.0\n    ... patches =\n    ...     demo.patch\n    ...     another.patch\n    ... \"\"\")\n\nRunning the buildout gives us:\n\n    >>> rmdir(sample_buildout, 'develop-eggs', demoegg)\n    >>> remove(sample_buildout, '.installed.cfg')\n    >>> _ = system(buildout + ' setup demo bdist_egg')\n    >>> print_(system(buildout))\n    Installing demo-patch.\n    Getting distribution for 'demo==1.0'.\n    Got demo 1.0.\n    patch: reading patch .../demo.patch\n    ...\n    patch: patching file demo.py\n    patch: successfully patched .../demo-1.0...\n    patch: reading patch .../another.patch\n    ...\n    patch: patching file demo.py\n    patch: successfully patched .../demo-1.0...\n    ...\n\n    >>> cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n    # patching\n\nPatching an egg installed in another part\n-----------------------------------------\n\nAnother possibility is to install an egg with zc.recipe.egg (or\nprobably any other recipe) and patch it afterwards.  However, it is\nnecessary to install the egg unzipped, and the egg may end up in the\neggs-folder instead the develop-eggs folder.\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = demo-egg demo-patch\n    ... index = demo/dist/\n    ...\n    ... [demo-egg]\n    ... recipe = zc.recipe.egg\n    ... eggs = demo==1.0\n    ...\n    ... [demo-patch]\n    ... recipe = cykooz.recipe.patch\n    ... egg = ${demo-egg:eggs}\n    ... patches = demo.patch\n    ... \"\"\")\n\nRunning the buildout gives us:\n\n    >>> rmdir(sample_buildout, 'develop-eggs', demoegg)\n    >>> remove(sample_buildout, '.installed.cfg')\n    >>> _ = system(buildout + ' setup demo bdist_egg')\n    >>> print_(system(buildout))\n    Installing demo-egg.\n    Getting distribution for 'demo==1.0'.\n    Got demo 1.0.\n    Installing demo-patch.\n    patch: reading patch .../demo.patch\n    ...\n    patch: patching file demo.py\n    patch: successfully patched .../demo-1.0...\n\n    >>> ls(sample_buildout, 'eggs', demoegg)\n    d  EGG-INFO\n    -  demo.py\n    -  demo.pyc\n    -  demo.pyo\n    >>> cat(sample_buildout, 'demo', 'demo.py')\n    # demo egg\n    >>> cat(sample_buildout, 'eggs', demoegg, 'demo.py')\n    # demo egg\n    # patching\n\nBroken patches\n--------------\n\nIf one of the patches is broken:\n\n    >>> write(sample_buildout, 'missing-file.patch',\n    ... \"\"\"diff --git missing-file.py missing-file.py\n    ... --- missing-file.py\n    ... +++ missing-file.py\n    ... @@ -1,2 +0 @@\n    ... -# BROKEN\n    ... -# PATCH\n    ... \"\"\")\n\nWhen you try to apply multiple patches, it will fail to apply any\nsubsequent patches, letting you fix the problem:\n\n    >>> write(sample_buildout, 'buildout.cfg',\n    ... \"\"\"\n    ... [buildout]\n    ... parts = demo-patch\n    ... index = demo/dist/\n    ...\n    ... [demo-patch]\n    ... recipe = cykooz.recipe.patch\n    ... egg = demo==1.0\n    ... patches = missing-file.patch\n    ...           demo.patch\n    ... \"\"\")\n\nRunning the buildout gives us:\n\n    >>> rmdir(sample_buildout, 'eggs', demoegg)\n    >>> remove(sample_buildout, '.installed.cfg')\n    >>> _ = system(buildout + ' setup demo bdist_egg')\n    >>> print_(system(buildout))\n    Installing demo-patch.\n    Getting distribution for 'demo==1.0'.\n    Got demo 1.0.\n    patch: reading patch .../missing-file.patch\n    ...\n    patch: The next patch would delete the file missing-file.py,\n    patch: which does not exist!  Skipping patch.\n    patch: patch: **** malformed patch at line 6:\n    ...\n    While:\n      Installing demo-patch.\n    Error: could not apply .../missing-file.patch\n\n    >>> cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n    # demo egg\n\nDownload\n********", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cykooz/cykooz.recipe.patch", "keywords": "buildout recipe patch", "license": "GPL", "maintainer": null, "maintainer_email": null, "name": "cykooz.recipe.patch", "package_url": "https://pypi.org/project/cykooz.recipe.patch/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/cykooz.recipe.patch/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/cykooz/cykooz.recipe.patch"}, "release_url": "https://pypi.org/project/cykooz.recipe.patch/0.1/", "requires_dist": null, "requires_python": null, "summary": "recipe for patching eggs", "version": "0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a fork of <tt>emencia.recipe.patch</tt>. Main differences are:</p>\n<ul>\n<li>Added Python 3 support.</li>\n</ul>\n<p>Links:</p>\n<ul>\n<li><a href=\"https://pypi.python.org/pypi/cykooz.recipe.patch\" rel=\"nofollow\">https://pypi.python.org/pypi/cykooz.recipe.patch</a> - Download</li>\n<li><a href=\"https://github.com/cykooz/cykooz.recipe.patch\" rel=\"nofollow\">https://github.com/cykooz/cykooz.recipe.patch</a> - Source code</li>\n</ul>\n<div id=\"supported-options\">\n<h2>Supported options</h2>\n<p>The recipe supports the following options:</p>\n<dl>\n<dt>path</dt>\n<dd><p>Define a directory in which the patch should be applied. For\nexample:</p>\n<pre>path = src/some/directory/\n</pre>\n</dd>\n<dt>egg</dt>\n<dd><p>Define which egg should be patched. You can also pin to a specific\nversion. For example:</p>\n<pre>egg = some.egg&lt;=1.1.1\n</pre>\n</dd>\n<dt>patches</dt>\n<dd><p>Paths to patch files. These patches are applied in order. For\nexample:</p>\n<pre>patches = patches/my_very_sprecial.patch\n          patches/another_loverly.patch\n</pre>\n</dd>\n</dl>\n</div>\n<div id=\"example-usage\">\n<h2>Example usage</h2>\n<p>Our demo package which we will patch:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; mkdir(sample_buildout, 'demo')\n&gt;&gt;&gt; write(sample_buildout, 'demo', 'README.txt', \" \")\n&gt;&gt;&gt; write(sample_buildout, 'demo', 'demo.py',\n... \"\"\"# demo egg\n... \"\"\")\n&gt;&gt;&gt; write(sample_buildout, 'demo', 'setup.py',\n... \"\"\"\n... from setuptools import setup\n...\n... setup(\n...     name = \"demo\",\n...     version='1.0',\n...     py_modules=['demo']\n...     )\n... \"\"\")\n&gt;&gt;&gt; print_(system(buildout + ' setup demo bdist_egg')) # doctest: +ELLIPSIS\nRunning setup script 'demo/setup.py'.\n...\n</pre>\n</blockquote>\n<p>Create our patch:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'demo.patch',\n... \"\"\"diff --git demo.py demo.py\n... --- demo.py\n... +++ demo.py\n... @@ -1 +1,2 @@\n...  # demo egg\n... +# patching\n... \"\"\")\n</pre>\n</blockquote>\n<p>Let\u2019s write out buildout.cfg to patch our demo package:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = demo-patch\n... index = demo/dist/\n...\n... [demo-patch]\n... recipe = cykooz.recipe.patch\n... egg = demo==1.0\n... patches = demo.patch\n... \"\"\")\n</pre>\n</blockquote>\n<p>Our final egg name depends on current python version:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import sys\n&gt;&gt;&gt; demoegg = 'demo-1.0-py%d.%d.egg' % sys.version_info[:2]\n</pre>\n</blockquote>\n<p>Running the buildout gives us:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; print_(system(buildout))\nInstalling demo-patch.\nGetting distribution for 'demo==1.0'.\nGot demo 1.0.\npatch: reading patch .../demo.patch\n...\npatch: patching file demo.py\npatch: successfully patched .../demo-1.0...\n...\n</pre>\n<pre>&gt;&gt;&gt; ls(sample_buildout, 'develop-eggs', demoegg)\nd  EGG-INFO\n-  demo.py\n-  demo.pyc\n-  demo.pyo\n&gt;&gt;&gt; cat(sample_buildout, 'demo', 'demo.py')\n# demo egg\n&gt;&gt;&gt; cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n# demo egg\n# patching\n</pre>\n</blockquote>\n<div id=\"multiple-patches\">\n<h3>Multiple patches</h3>\n<p>If you have more than one patch to apply:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'another.patch',\n... \"\"\"diff --git demo.py demo.py\n... --- demo.py\n... +++ demo.py\n... @@ -1,2 +1 @@\n... -# demo egg\n...  # patching\n... \"\"\")\n</pre>\n</blockquote>\n<p>Update your buildout.cfg to list the new patch. In this case,\nanother.patch should be applied after demo.patch:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = demo-patch\n... index = demo/dist/\n...\n... [demo-patch]\n... recipe = cykooz.recipe.patch\n... egg = demo==1.0\n... patches =\n...     demo.patch\n...     another.patch\n... \"\"\")\n</pre>\n</blockquote>\n<p>Running the buildout gives us:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rmdir(sample_buildout, 'develop-eggs', demoegg)\n&gt;&gt;&gt; remove(sample_buildout, '.installed.cfg')\n&gt;&gt;&gt; _ = system(buildout + ' setup demo bdist_egg')\n&gt;&gt;&gt; print_(system(buildout))\nInstalling demo-patch.\nGetting distribution for 'demo==1.0'.\nGot demo 1.0.\npatch: reading patch .../demo.patch\n...\npatch: patching file demo.py\npatch: successfully patched .../demo-1.0...\npatch: reading patch .../another.patch\n...\npatch: patching file demo.py\npatch: successfully patched .../demo-1.0...\n...\n</pre>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n# patching\n</pre>\n</blockquote>\n</div>\n<div id=\"patching-an-egg-installed-in-another-part\">\n<h3>Patching an egg installed in another part</h3>\n<p>Another possibility is to install an egg with zc.recipe.egg (or\nprobably any other recipe) and patch it afterwards.  However, it is\nnecessary to install the egg unzipped, and the egg may end up in the\neggs-folder instead the develop-eggs folder.</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = demo-egg demo-patch\n... index = demo/dist/\n...\n... [demo-egg]\n... recipe = zc.recipe.egg\n... eggs = demo==1.0\n...\n... [demo-patch]\n... recipe = cykooz.recipe.patch\n... egg = ${demo-egg:eggs}\n... patches = demo.patch\n... \"\"\")\n</pre>\n</blockquote>\n<p>Running the buildout gives us:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rmdir(sample_buildout, 'develop-eggs', demoegg)\n&gt;&gt;&gt; remove(sample_buildout, '.installed.cfg')\n&gt;&gt;&gt; _ = system(buildout + ' setup demo bdist_egg')\n&gt;&gt;&gt; print_(system(buildout))\nInstalling demo-egg.\nGetting distribution for 'demo==1.0'.\nGot demo 1.0.\nInstalling demo-patch.\npatch: reading patch .../demo.patch\n...\npatch: patching file demo.py\npatch: successfully patched .../demo-1.0...\n</pre>\n<pre>&gt;&gt;&gt; ls(sample_buildout, 'eggs', demoegg)\nd  EGG-INFO\n-  demo.py\n-  demo.pyc\n-  demo.pyo\n&gt;&gt;&gt; cat(sample_buildout, 'demo', 'demo.py')\n# demo egg\n&gt;&gt;&gt; cat(sample_buildout, 'eggs', demoegg, 'demo.py')\n# demo egg\n# patching\n</pre>\n</blockquote>\n</div>\n<div id=\"broken-patches\">\n<h3>Broken patches</h3>\n<p>If one of the patches is broken:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'missing-file.patch',\n... \"\"\"diff --git missing-file.py missing-file.py\n... --- missing-file.py\n... +++ missing-file.py\n... @@ -1,2 +0 @@\n... -# BROKEN\n... -# PATCH\n... \"\"\")\n</pre>\n</blockquote>\n<p>When you try to apply multiple patches, it will fail to apply any\nsubsequent patches, letting you fix the problem:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; write(sample_buildout, 'buildout.cfg',\n... \"\"\"\n... [buildout]\n... parts = demo-patch\n... index = demo/dist/\n...\n... [demo-patch]\n... recipe = cykooz.recipe.patch\n... egg = demo==1.0\n... patches = missing-file.patch\n...           demo.patch\n... \"\"\")\n</pre>\n</blockquote>\n<p>Running the buildout gives us:</p>\n<blockquote>\n<pre>&gt;&gt;&gt; rmdir(sample_buildout, 'eggs', demoegg)\n&gt;&gt;&gt; remove(sample_buildout, '.installed.cfg')\n&gt;&gt;&gt; _ = system(buildout + ' setup demo bdist_egg')\n&gt;&gt;&gt; print_(system(buildout))\nInstalling demo-patch.\nGetting distribution for 'demo==1.0'.\nGot demo 1.0.\npatch: reading patch .../missing-file.patch\n...\npatch: The next patch would delete the file missing-file.py,\npatch: which does not exist!  Skipping patch.\npatch: patch: **** malformed patch at line 6:\n...\nWhile:\n  Installing demo-patch.\nError: could not apply .../missing-file.patch\n</pre>\n<pre>&gt;&gt;&gt; cat(sample_buildout, 'develop-eggs', demoegg, 'demo.py')\n# demo egg\n</pre>\n</blockquote>\n<div id=\"download\">\n<h4>Download</h4>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1788280, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "a3b318896028ed46a164e4b0acde1fde", "sha256": "0534de17aedec91a9fd9ef593771e0bcf674d4f3bcb8ffc4a3a44ad849f6b2da"}, "downloads": -1, "filename": "cykooz.recipe.patch-0.1.tar.gz", "has_sig": false, "md5_digest": "a3b318896028ed46a164e4b0acde1fde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14619, "upload_time": "2015-10-27T12:14:00", "upload_time_iso_8601": "2015-10-27T12:14:00.785972Z", "url": "https://files.pythonhosted.org/packages/04/4b/313de179aa98041b9d50dc45ad1840b0c0fe1edf355295a12a01c26c91a9/cykooz.recipe.patch-0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a3b318896028ed46a164e4b0acde1fde", "sha256": "0534de17aedec91a9fd9ef593771e0bcf674d4f3bcb8ffc4a3a44ad849f6b2da"}, "downloads": -1, "filename": "cykooz.recipe.patch-0.1.tar.gz", "has_sig": false, "md5_digest": "a3b318896028ed46a164e4b0acde1fde", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14619, "upload_time": "2015-10-27T12:14:00", "upload_time_iso_8601": "2015-10-27T12:14:00.785972Z", "url": "https://files.pythonhosted.org/packages/04/4b/313de179aa98041b9d50dc45ad1840b0c0fe1edf355295a12a01c26c91a9/cykooz.recipe.patch-0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:06 2020"}