{"info": {"author": "Manuel A. V\u00e1zquez", "author_email": "manuavazquez@gmail.com", "bugtrack_url": null, "classifiers": ["Environment :: Console", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# gift-wrapper\n\nThis is Python software to easily build [GIFT](https://docs.moodle.org/38/en/GIFT_format) -based [question banks](https://docs.moodle.org/38/en/Question_bank) in [Moodle](https://moodle.org/). Other similar tools are available (you can search for *Tools that create or process GIFTs* in [Moodle's GIFT page](https://docs.moodle.org/38/en/GIFT_format)) but none of them fitted well my workflow. What I need is (the goals of `gift-wrapper` are):\n\n* to write questions in plain text, and as many as I like in a single file\n* to write latex formulas directly\n* to easily/seamlessly include images\n\nThe most interesting point is probably the last one.\n\n## Requirements\n\nPython requirements are:\n\n- Python &#8805; 3.6\n- [paramiko](http://www.paramiko.org/)\n- [colorama](https://pypi.org/project/colorama/)\n- [pyyaml](https://pypi.org/project/PyYAML/)\n- [tqdm](https://github.com/tqdm/tqdm)\n\nNow, if you want to make the most of the software you also need:\n\n* [pdflatex](https://en.wikipedia.org/wiki/PdfTeX) (i.e. a [TeX](https://en.wikipedia.org/wiki/TeX) distribution)\n* [pdf2svg](https://github.com/dawbarton/pdf2svg/)\n* disk space in a remote server that can host your images\n\n## Install\n\n```\npip install gift-wrapper\n```\n\nshould suffice.\n\n### Manual setup\n\nIf you rather clone this repository, (in order to, potentially, get the latest additions/modifications)  \n\n```\npip install pyyaml paramiko tqdm colorama\n```\n\nshould install all the additional requirements. If you use [Anaconda](https://anaconda.org/), the [bash](https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29) script `make_conda_environment.sh` will make a proper environment (named `gift`).\n\nAfter that, you should be able to run the program. You can either download the [latest release](https://github.com/manuvazquez/gift-wrapper/releases/latest) (not necessarily up-to-date) or click *Clone or download* above to get the most recent version.\n\n## Usage\n\nThe main program is `wrap.py` and you can check the available command-line options with\n```\nwrap.py -h\n```\nor\n```\npython wrap.py -h\n```\nif you did a manual installation and `wrap.py` doesn't have execution permissions. \n\nIf you don't pass any argument, `parameters.yaml` and `bank.yaml` files are expected. The former is a settings file wheras the latter is the actual *input file* in which you must write the questions.\n\nThe output will be a text file in GIFT format with the same name as the input one (the file with the questions) but `.gift.txt` extension (by default, `bank.gift.txt` then). It seems that *sometimes* Moodle has troubles importing (recognizing) a text file if the extension is not `.txt`. \n\n### Parameters\n\n`parameters.yaml` is a [YAML](https://en.wikipedia.org/wiki/YAML) file intended to hold settings that you only need to specify once. Right now, it only contains parameters related to `images hosting` (needed to copy your images to a remote server). All the options are either self-explanatory or explained through comments. It should be fairly easy to tweak the [included example](parameters.yaml) for your own setup.\n\n### Questions\n\nQuestions are specified through another *YAML* file. The first parameter, `pictures base directory`, refers to the base directory that will be created in the remote host for all your embedded images. It is meant to separate different question banks (so that you can have, e.g., directories `quiz 1` and `quiz 2`). The remaining of the file is a **list of categories**, and inside each one there is a **list of questions**. Hopefully, the format is clear from either the name of the settings and/or its companion comments. You are probably better off taking a look at the [provided example](bank.yaml).\n\n### Example\n\nIf you run the program inside the `gift-wrapper` directory as is, it will process the sample `bank.yaml` which includes a `.tex`, a `.svg` and some mathematical formulas, and will generate a `bank.gift.txt` file which you can import from Moodle (choosing the GIFT format when asked).\n\n## Including images\n\n`gift-wrapper` has been designed to work with [svg](https://en.wikipedia.org/wiki/Scalable_Vector_Graphics) images. Then, in order to include any image in a question, two scenarios are contemplated:\n\n* you already have an svg\n* you have a TeX file **that can be compiled with *pdflatex***\n\nIn any case, you just need to write the path to the file inside the text of the question (whether in the `statement`, the `answer` or the `feedbak`). If in the second scenario, i.e., you are including a *TeX* file, this will be compiled into a pdf with *pdflatex*, and then converted to an svg with *pdf2svg*. Hence, a *svg* file will be, in the end, available for every image.\n\nImages (*svg*s) are then copied to a remote host, and properly linked in the output GIFT file.\n\n### Browser compatibility\n\nIt seems (it has been reported) not every browser properly handles svg images (maybe other types too) embedded in a question as an URL. My experience so far is both [Firefox](https://www.mozilla.org/en-US/firefox) and [Chromium](https://www.chromium.org/Home) (at the time of writing this) work just fine. \n\n### Do I really need pdf2svg?\n\nOnly if you want automatic conversion from `.tex` (passing through `.pdf`) to `.svg`, i.e., only if you embed a `.tex` somewhere.\nAlso, there is (probably) nothing special about *pdf2svg* and, in principle, you can use any command-line program that takes as arguments the input pdf and the output svg. However, I've only tested the program with *pdf2svg* since it's the one included in [Gentoo Linux](https://www.gentoo.org/).\n\n## Remote access\n\nImages should be copied into some remote host that is public so that it can be accessed by Moodle. This is done automatically for every embedded image (svg or tex). In the `parameters.yaml` file, within `ssh` either\n\n* user and password, or\n* user and path to a public key file\n\n(but **not both**) should be specified.\n\nYou can run the program locally, i.e., omitting the transferring of the images to a remote host by using `-l` command line argument. This is especially meaningful if you don't have any embedded image in your questions (and hence nothing needs to be copied to a remote host).\n\n## Latex support\n\nOnly formulas inside `$`s are processed (no, e.g., `\\textit` or `\\textbf` inside the text), and within them, these are the commands/symbols that have been tested so far\n\n- greek letters\n- subindexes\n- calligraphic symbols, i.e., prefixed by `\\cal`\n- fractions with `\\frac{}{}`\n- `\\underline`\n- `\\left(` and `\\right)`\n- `\\left[` and `\\right]`\n- `\\begin{bmatrix}` and `\\end{bmatrix}`\n- symbols `\\sim`, `\\approx`\n\nMore things are probably OK, but I have not tried them yet.\n\n### Safety checks\n\nBy default, `wrap.py` checks whether or not the formulas you wrote between `$`'s can actually be compiled. Right now this involves a call to `pdflatex` *for every formula*, meaning that it can significantly slow down the process. It can be disabled by passing ` --no-checks` (or simply `-n`). It is probably a good idea to actually check the formulas every once in a while (e.g., every time you add a new one), though, since *bad* latex formulas will be (silently) imported by Moodle anyway, and not only will they be incorrectly rendered but they may also mess up subsequent content.  \n\n## Current limitations\n\n- only *numerical* and *multiple-choice* questions are supported (notice that the GIFT format itself doesn't support every type of question available in Moodle)\n\n- only one category can be specified for every list of questions\n\n- the latex support is very basic\n\n- embedded paths to images are only parsed correctly when surrounded by things usually recognized as whitespace (\" \", new line)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/manuvazquez/gift-wrapper", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "gift-wrapper", "package_url": "https://pypi.org/project/gift-wrapper/", "platform": "", "project_url": "https://pypi.org/project/gift-wrapper/", "project_urls": {"Homepage": "https://github.com/manuvazquez/gift-wrapper"}, "release_url": "https://pypi.org/project/gift-wrapper/1.2.5.1/", "requires_dist": ["paramiko (>=2.7.1)", "colorama (>=0.4.3)", "PyYAML (>=5.3.1)", "tqdm (>=4.44.1)"], "requires_python": ">=3.6", "summary": "Build GIFT (Moodle compatible) files easily", "version": "1.2.5.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>gift-wrapper</h1>\n<p>This is Python software to easily build <a href=\"https://docs.moodle.org/38/en/GIFT_format\" rel=\"nofollow\">GIFT</a> -based <a href=\"https://docs.moodle.org/38/en/Question_bank\" rel=\"nofollow\">question banks</a> in <a href=\"https://moodle.org/\" rel=\"nofollow\">Moodle</a>. Other similar tools are available (you can search for <em>Tools that create or process GIFTs</em> in <a href=\"https://docs.moodle.org/38/en/GIFT_format\" rel=\"nofollow\">Moodle's GIFT page</a>) but none of them fitted well my workflow. What I need is (the goals of <code>gift-wrapper</code> are):</p>\n<ul>\n<li>to write questions in plain text, and as many as I like in a single file</li>\n<li>to write latex formulas directly</li>\n<li>to easily/seamlessly include images</li>\n</ul>\n<p>The most interesting point is probably the last one.</p>\n<h2>Requirements</h2>\n<p>Python requirements are:</p>\n<ul>\n<li>Python \u2265 3.6</li>\n<li><a href=\"http://www.paramiko.org/\" rel=\"nofollow\">paramiko</a></li>\n<li><a href=\"https://pypi.org/project/colorama/\" rel=\"nofollow\">colorama</a></li>\n<li><a href=\"https://pypi.org/project/PyYAML/\" rel=\"nofollow\">pyyaml</a></li>\n<li><a href=\"https://github.com/tqdm/tqdm\" rel=\"nofollow\">tqdm</a></li>\n</ul>\n<p>Now, if you want to make the most of the software you also need:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/PdfTeX\" rel=\"nofollow\">pdflatex</a> (i.e. a <a href=\"https://en.wikipedia.org/wiki/TeX\" rel=\"nofollow\">TeX</a> distribution)</li>\n<li><a href=\"https://github.com/dawbarton/pdf2svg/\" rel=\"nofollow\">pdf2svg</a></li>\n<li>disk space in a remote server that can host your images</li>\n</ul>\n<h2>Install</h2>\n<pre><code>pip install gift-wrapper\n</code></pre>\n<p>should suffice.</p>\n<h3>Manual setup</h3>\n<p>If you rather clone this repository, (in order to, potentially, get the latest additions/modifications)</p>\n<pre><code>pip install pyyaml paramiko tqdm colorama\n</code></pre>\n<p>should install all the additional requirements. If you use <a href=\"https://anaconda.org/\" rel=\"nofollow\">Anaconda</a>, the <a href=\"https://en.wikipedia.org/wiki/Bash_%28Unix_shell%29\" rel=\"nofollow\">bash</a> script <code>make_conda_environment.sh</code> will make a proper environment (named <code>gift</code>).</p>\n<p>After that, you should be able to run the program. You can either download the <a href=\"https://github.com/manuvazquez/gift-wrapper/releases/latest\" rel=\"nofollow\">latest release</a> (not necessarily up-to-date) or click <em>Clone or download</em> above to get the most recent version.</p>\n<h2>Usage</h2>\n<p>The main program is <code>wrap.py</code> and you can check the available command-line options with</p>\n<pre><code>wrap.py -h\n</code></pre>\n<p>or</p>\n<pre><code>python wrap.py -h\n</code></pre>\n<p>if you did a manual installation and <code>wrap.py</code> doesn't have execution permissions.</p>\n<p>If you don't pass any argument, <code>parameters.yaml</code> and <code>bank.yaml</code> files are expected. The former is a settings file wheras the latter is the actual <em>input file</em> in which you must write the questions.</p>\n<p>The output will be a text file in GIFT format with the same name as the input one (the file with the questions) but <code>.gift.txt</code> extension (by default, <code>bank.gift.txt</code> then). It seems that <em>sometimes</em> Moodle has troubles importing (recognizing) a text file if the extension is not <code>.txt</code>.</p>\n<h3>Parameters</h3>\n<p><code>parameters.yaml</code> is a <a href=\"https://en.wikipedia.org/wiki/YAML\" rel=\"nofollow\">YAML</a> file intended to hold settings that you only need to specify once. Right now, it only contains parameters related to <code>images hosting</code> (needed to copy your images to a remote server). All the options are either self-explanatory or explained through comments. It should be fairly easy to tweak the <a href=\"parameters.yaml\" rel=\"nofollow\">included example</a> for your own setup.</p>\n<h3>Questions</h3>\n<p>Questions are specified through another <em>YAML</em> file. The first parameter, <code>pictures base directory</code>, refers to the base directory that will be created in the remote host for all your embedded images. It is meant to separate different question banks (so that you can have, e.g., directories <code>quiz 1</code> and <code>quiz 2</code>). The remaining of the file is a <strong>list of categories</strong>, and inside each one there is a <strong>list of questions</strong>. Hopefully, the format is clear from either the name of the settings and/or its companion comments. You are probably better off taking a look at the <a href=\"bank.yaml\" rel=\"nofollow\">provided example</a>.</p>\n<h3>Example</h3>\n<p>If you run the program inside the <code>gift-wrapper</code> directory as is, it will process the sample <code>bank.yaml</code> which includes a <code>.tex</code>, a <code>.svg</code> and some mathematical formulas, and will generate a <code>bank.gift.txt</code> file which you can import from Moodle (choosing the GIFT format when asked).</p>\n<h2>Including images</h2>\n<p><code>gift-wrapper</code> has been designed to work with <a href=\"https://en.wikipedia.org/wiki/Scalable_Vector_Graphics\" rel=\"nofollow\">svg</a> images. Then, in order to include any image in a question, two scenarios are contemplated:</p>\n<ul>\n<li>you already have an svg</li>\n<li>you have a TeX file <strong>that can be compiled with <em>pdflatex</em></strong></li>\n</ul>\n<p>In any case, you just need to write the path to the file inside the text of the question (whether in the <code>statement</code>, the <code>answer</code> or the <code>feedbak</code>). If in the second scenario, i.e., you are including a <em>TeX</em> file, this will be compiled into a pdf with <em>pdflatex</em>, and then converted to an svg with <em>pdf2svg</em>. Hence, a <em>svg</em> file will be, in the end, available for every image.</p>\n<p>Images (<em>svg</em>s) are then copied to a remote host, and properly linked in the output GIFT file.</p>\n<h3>Browser compatibility</h3>\n<p>It seems (it has been reported) not every browser properly handles svg images (maybe other types too) embedded in a question as an URL. My experience so far is both <a href=\"https://www.mozilla.org/en-US/firefox\" rel=\"nofollow\">Firefox</a> and <a href=\"https://www.chromium.org/Home\" rel=\"nofollow\">Chromium</a> (at the time of writing this) work just fine.</p>\n<h3>Do I really need pdf2svg?</h3>\n<p>Only if you want automatic conversion from <code>.tex</code> (passing through <code>.pdf</code>) to <code>.svg</code>, i.e., only if you embed a <code>.tex</code> somewhere.\nAlso, there is (probably) nothing special about <em>pdf2svg</em> and, in principle, you can use any command-line program that takes as arguments the input pdf and the output svg. However, I've only tested the program with <em>pdf2svg</em> since it's the one included in <a href=\"https://www.gentoo.org/\" rel=\"nofollow\">Gentoo Linux</a>.</p>\n<h2>Remote access</h2>\n<p>Images should be copied into some remote host that is public so that it can be accessed by Moodle. This is done automatically for every embedded image (svg or tex). In the <code>parameters.yaml</code> file, within <code>ssh</code> either</p>\n<ul>\n<li>user and password, or</li>\n<li>user and path to a public key file</li>\n</ul>\n<p>(but <strong>not both</strong>) should be specified.</p>\n<p>You can run the program locally, i.e., omitting the transferring of the images to a remote host by using <code>-l</code> command line argument. This is especially meaningful if you don't have any embedded image in your questions (and hence nothing needs to be copied to a remote host).</p>\n<h2>Latex support</h2>\n<p>Only formulas inside <code>$</code>s are processed (no, e.g., <code>\\textit</code> or <code>\\textbf</code> inside the text), and within them, these are the commands/symbols that have been tested so far</p>\n<ul>\n<li>greek letters</li>\n<li>subindexes</li>\n<li>calligraphic symbols, i.e., prefixed by <code>\\cal</code></li>\n<li>fractions with <code>\\frac{}{}</code></li>\n<li><code>\\underline</code></li>\n<li><code>\\left(</code> and <code>\\right)</code></li>\n<li><code>\\left[</code> and <code>\\right]</code></li>\n<li><code>\\begin{bmatrix}</code> and <code>\\end{bmatrix}</code></li>\n<li>symbols <code>\\sim</code>, <code>\\approx</code></li>\n</ul>\n<p>More things are probably OK, but I have not tried them yet.</p>\n<h3>Safety checks</h3>\n<p>By default, <code>wrap.py</code> checks whether or not the formulas you wrote between <code>$</code>'s can actually be compiled. Right now this involves a call to <code>pdflatex</code> <em>for every formula</em>, meaning that it can significantly slow down the process. It can be disabled by passing <code>--no-checks</code> (or simply <code>-n</code>). It is probably a good idea to actually check the formulas every once in a while (e.g., every time you add a new one), though, since <em>bad</em> latex formulas will be (silently) imported by Moodle anyway, and not only will they be incorrectly rendered but they may also mess up subsequent content.</p>\n<h2>Current limitations</h2>\n<ul>\n<li>\n<p>only <em>numerical</em> and <em>multiple-choice</em> questions are supported (notice that the GIFT format itself doesn't support every type of question available in Moodle)</p>\n</li>\n<li>\n<p>only one category can be specified for every list of questions</p>\n</li>\n<li>\n<p>the latex support is very basic</p>\n</li>\n<li>\n<p>embedded paths to images are only parsed correctly when surrounded by things usually recognized as whitespace (\" \", new line)</p>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 7180503, "releases": {"1.2.4": [{"comment_text": "", "digests": {"md5": "c9778515e95c5300d72e73b663683f6d", "sha256": "677c07883107f1d7849a5a5bad0c6601405659a54bd4ecb9e2f5e79c69864e95"}, "downloads": -1, "filename": "gift_wrapper-1.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "c9778515e95c5300d72e73b663683f6d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 20690, "upload_time": "2020-05-01T14:22:26", "upload_time_iso_8601": "2020-05-01T14:22:26.178662Z", "url": "https://files.pythonhosted.org/packages/e7/d9/02ca53774c7bfe841d8446e71b2cc00fa8e454e62bf20a8ab3ceae886a04/gift_wrapper-1.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5937fb99090b737d2356f2ec2a76e72f", "sha256": "fd2794bca71b7e576e0eb6e60d9ab73c9c462fa9b7b2573b1365ff751537b3cd"}, "downloads": -1, "filename": "gift-wrapper-1.2.4.tar.gz", "has_sig": false, "md5_digest": "5937fb99090b737d2356f2ec2a76e72f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16250, "upload_time": "2020-05-01T14:22:27", "upload_time_iso_8601": "2020-05-01T14:22:27.331159Z", "url": "https://files.pythonhosted.org/packages/ad/5a/214e00da309720809b7e852c524bcecc695eb87bdc7a3fe4c3c36c8aaa2f/gift-wrapper-1.2.4.tar.gz", "yanked": false}], "1.2.5.1": [{"comment_text": "", "digests": {"md5": "2d324bd571e73042745cd0e0f45f9ec0", "sha256": "aa037036195b781c11293151ba8e9ed3613e037503f31cb11f04cb619dba9979"}, "downloads": -1, "filename": "gift_wrapper-1.2.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2d324bd571e73042745cd0e0f45f9ec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21277, "upload_time": "2020-05-06T11:35:59", "upload_time_iso_8601": "2020-05-06T11:35:59.927170Z", "url": "https://files.pythonhosted.org/packages/05/92/5b04875e35fb5ea1c44ccade581904de167ee373fdb50c5b575ca9b714ef/gift_wrapper-1.2.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c4be3578a2ce5659853eda112802ebb", "sha256": "dd74c499738ae7d2a288b584ded255488d4ea18ffa83eb33b2e83a5eecd9d45c"}, "downloads": -1, "filename": "gift-wrapper-1.2.5.1.tar.gz", "has_sig": false, "md5_digest": "5c4be3578a2ce5659853eda112802ebb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16752, "upload_time": "2020-05-06T11:36:01", "upload_time_iso_8601": "2020-05-06T11:36:01.124286Z", "url": "https://files.pythonhosted.org/packages/62/d4/e88b5c33d8bd29f6f3fdc0c98777767d54cf6900287d8cfc61cd5553d92d/gift-wrapper-1.2.5.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2d324bd571e73042745cd0e0f45f9ec0", "sha256": "aa037036195b781c11293151ba8e9ed3613e037503f31cb11f04cb619dba9979"}, "downloads": -1, "filename": "gift_wrapper-1.2.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2d324bd571e73042745cd0e0f45f9ec0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21277, "upload_time": "2020-05-06T11:35:59", "upload_time_iso_8601": "2020-05-06T11:35:59.927170Z", "url": "https://files.pythonhosted.org/packages/05/92/5b04875e35fb5ea1c44ccade581904de167ee373fdb50c5b575ca9b714ef/gift_wrapper-1.2.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5c4be3578a2ce5659853eda112802ebb", "sha256": "dd74c499738ae7d2a288b584ded255488d4ea18ffa83eb33b2e83a5eecd9d45c"}, "downloads": -1, "filename": "gift-wrapper-1.2.5.1.tar.gz", "has_sig": false, "md5_digest": "5c4be3578a2ce5659853eda112802ebb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16752, "upload_time": "2020-05-06T11:36:01", "upload_time_iso_8601": "2020-05-06T11:36:01.124286Z", "url": "https://files.pythonhosted.org/packages/62/d4/e88b5c33d8bd29f6f3fdc0c98777767d54cf6900287d8cfc61cd5553d92d/gift-wrapper-1.2.5.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:28 2020"}