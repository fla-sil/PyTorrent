{"info": {"author": "Naphat Amundsen", "author_email": "naphat@live.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# PyPat-Console\nA simple and sexy way to make an console interface\n\n# How to setup\nFirst install the package with the command (make sure you have Python 3.6 or higher)\n```\npip install pypatconsole\n```\nThen you can import ``pypatconsole`` in Python. The package lets you import three functions: ``menu``, ``list_local_cases`` and ``clear_screen``. Usage of ``menu`` will be illustrated below. ``list_local_cases`` takes the output from ``locals()`` and lists all the functions in the local scope. ``clear_screen`` clears your screen, hence the name.\n\n# How to implement\nSimply implement the cases (as functions) in a Python file, then to initialize the interface you simply use the ``menu`` function at the bottom\n```python\nfrom pypatconsole import menu\n\n            .\n            .\n            .\n\nmenu(locals(), title=' Main menu title here ', main=True)\n```\nYou can import whatever modules, classes and functions you want in the file without them interfering with the functions defined your file. You will need to implement docstrings to every case. The first line of text in the docstring will be used as the description in the console interface.\n\nThe order of the cases is alphabetically sorted by the function name.\n\nThe function signature of ``menu`` along with its docstring is as follows:\n```python\ndef menu(cases: Union[list, dict, ModuleType], title: str=' Title ',\n                blank_proceedure: Union[str, Callable]='return',\n                decorator: Callable=None, run: bool=True, main: bool=False):\n    '''\n    Factory function for the CLI class. This function initializes a menu.\n\n    Parameters\n    ------------\n    cases: Can be output of locals() (a dictionary) from the scope of the cases\n\n           Or a list functions\n\n           Or a module containing the case functions\n\n    title: title of menu\n\n    blank_proceedure: What to do the when given blank input. Can be user defined\n                      function, or it can be a string. Available string options\n                      are:\n\n                      'return', will return to parent menu, if you are at main\n                      menu, this will exit the program\n\n                      'pass', does nothing. This should only be used for the\n                      main menu\n\n                      'exit', exits the program\n\n    decorator: Whether to decorate functions\n\n    run: To run menu instantly or not\n\n    Returns\n    --------\n    CLI (Command Line Interface) object. Use .run() method to activate menu.\n    '''\n```\n\n### Examples\n\nSay we are editing console.py\n```python\nfrom random import randint\nfrom time import sleep\nfrom pypatconsole import menu\n\ndef case1():\n    '''\n    FizzBuzz!\n\n    When you get the urge to fizz your buzz\n    if you know what I mean\n    '''\n    for i in range(21):\n        stringy = ''\n\n        fizz = i % 3 == 0\n        buzz = i % 5 == 0\n\n        if fizz:\n            stringy = stringy + 'Fizz'\n        if buzz:\n            stringy = stringy + 'Buzz'\n        if not (fizz or buzz):\n            stringy = i\n\n        print(stringy)\n        sleep(0.1)\n\ndef case2():\n    '''\n    Print a small random integer\n    '''\n    print(randint(0,9))\n    sleep(0.5)\n\nmenu(locals(), title=' Main menu ', main=True, blank_proceedure='pass')\n```\n\nwill result with this when running: ```python console.py```:\n\n```\n-------------- Main menu ---------------\n1. FizzBuzz!\n2. Print a small random integer\n\nInput:\n```\n## Special cases\nEntering ``..`` will exit the current menu, effectively moving you to the parent menu if you are implementing nested cases. If you are in the main menu it will exit the program.\n\nEntering ``q`` will exit the program (of course Ctrl+C works as well)\n\nEntering ``h`` will display this text that explains the special cases.\n\n## Arguments\nThe cases can take arguments as well! Simply implement them as functions with type hints (type hints are mandatory for the case functions):\n````python\nfrom pypatconsole import menu\n\ndef case1(a: int, b: int):\n    '''Add two integers'''\n    print(a+b)\n\ndef case1(a: str, b: str):\n    '''Append two strings'''\n    print(a+b)\n\ndef case3(a: list):\n    '''Print elements in list and their types'''\n    [print(f'Element {i}: {elem}, type: {type(elem)}') for i, elem\n                                                        in enumerate(a)]\n\nmenu(locals(), title=' Main menu ', main=True)\n````\nThen simply give the arguments along with the choice:\n````\n-------------- Main menu ---------------\n1. Add two integers\n2. Append two strings\n3. Print elements in list and their types\n\n\nInput: 1 60 9\n\n69\n````\n````\nInput: 2 \"cat and dog\" mathemathics\n\ncat and dogmathemathics\n\nNote: Single token strings don't even need quotes\n````\n````\nInput: 3 ['cat',69,420.0]\n\nElement 0: cat, type: <class 'str'>\nElement 1: 69, type: <class 'int'>\nElement 2: 420.0, type: <class 'float'>\n\nNote: You cannot have any spaces when giving lists, tuples, dicts and such as the input parser will break them.\n````\n\nThe program will read the desired types from the function signature, then it will convert the input into the appropriate types. The only supported types are the built in Python types:\n- str\n- int\n- float\n- tuple\n- list\n- set\n- dict\n\n## Nested cases\nIf you want to implement nested cases, then you can simply reuse the menu function in the function scope. When doing nested cases, you should not give the keyword ``main=True`` to the ``menu`` function.\n\n```python\nfrom pypatconsole import menu\n\ndef parentcase1():\n    '''Fizz'''\n    def subcase1():\n        '''docstring1'''\n        pass\n\n    def subcase2():\n        '''docstring2'''\n        pass\n\n    menu(locals(), title= ' Title here ')\nmenu(locals(), title=' Main menu ', main=True)\n```\nYou can create another module for the other cases and pass them as well:\n```python\nfrom pypatconsole import menu\nimport other_cases\n\ndef samplecase():\n    '''Foo'''\n    menu(other_cases, title= ' Title here ')\nmenu(other_cases, title= ' Main menu ', main=True)\n```\n\nor you can give a list of functions, which will enable you to force the ordering of the cases as well:\n```python\nfrom pypatconsole import menu\n\ndef parentcase1():\n    '''Fizz'''\n    def subcase1():\n        '''docstring1'''\n        pass\n\n    def subcase2():\n        '''docstring2'''\n        pass\n\n    menu([subcase2, subcase1], title= ' Title here ')\nmenu(locals(), title=' Main menu ')\n```\n## What if want to define functions without having them displayed in the menu?\nOf what I can think of: you can either define your functions in another python file and import that, or you can create a class (in the same file as the case functions) that consists of your functions as static methods.\n\n## Optional: Decorator\nTo enforce a common behavior when entering and leaving a case within a menu, you give a decorator to the ``menu`` function. However, it is important that the decorator  implements the ``__wrapped__`` attribute (this is to handle docstrings of wrappers as arguments for wrapped functions). Generally, it should look like this\n\n```python\nimport sleep\n\ndef case_decorator(func):\n    '''Decorator to enforce commmon behavior for cases'''\n\n    def case_wrapper(*args, **kwargs):\n        '''Verbosity wrapper'''\n        print('Yeah! Going in!')\n        sleep(1)\n        retobj = func(*args, **kwargs)\n        print('Woah! Going out!')\n        sleep(1)\n        return retobj\n    # This is necessary in order to unwrap using inspect module\n    case_wrapper.__wrapped__ = func\n    return case_wrapper\n```\nSince the decorator is a function, you cannot have it in the same namespace as the case functions, so you can for example implement it in another file. To use it you do as following:\n```python\nfrom pypatconsole import menu\nfrom case_decorator import case_decorator\n\n# A lot of cases here\n\nmenu(locals(), decorator=case_decorator, main=True)\n```\n\n# Why\nSometimes you want to have a simple console interface so you can do things step by step.\nHere are some applications:\n\n## Stock data pipeline\nData scraping and data cleaning pipeline for stock data\n```\n------------- Mulababy420 --------------\n1. Update all data\n2. Obtain Oslo Bors quotes and returns\n3. Scrape Oslo bors HTML files\n4. Scrape Yahoo Finance\n5. Backup current data\n6. Exit program\nEnter choice:\n```\nSometimes I don't want to run everything at once. Maybe I just want to backup data instead of doing all everything. PyPat-Console will enable a very quick implementation of a console.\nWithout the console I would need to find the right file to run (and maybe comment things out first as well). The console organizes everything into one place.\n\n## Database interface\n```\n------BergenDB------\n1. Log rent\n2. Log power\n3. Print table\n4. Plot table\n5. Commit changes\n6. Discard changes\n7. Exit\n```\nI log my rent and power bills in a SQL database. I have made a Python API to manage the database, and I just do everything through the interface. No need to script anything or write any SQL queries.\n\n## Control your Google Compute VM\n```\n----------------GCE-----------------                                                                      \n1. SSH to personal instance\n2. SSH to project instance\n3. start/stop personal instance (0 to stop, 1 to start, 2 to restart)\n4. start/stop project instance (0 to stop, 1 to start, 2 to restart)\n5. Get status personal instance\n6. Get status project instance\n7. Other instance control      \n\nEntering blank returns to parent menu\nInput:\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Laohachot/PyPat-Console", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pypatconsole", "package_url": "https://pypi.org/project/pypatconsole/", "platform": "", "project_url": "https://pypi.org/project/pypatconsole/", "project_urls": {"Homepage": "https://github.com/Laohachot/PyPat-Console"}, "release_url": "https://pypi.org/project/pypatconsole/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple and sexy console interface", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyPat-Console</h1>\n<p>A simple and sexy way to make an console interface</p>\n<h1>How to setup</h1>\n<p>First install the package with the command (make sure you have Python 3.6 or higher)</p>\n<pre><code>pip install pypatconsole\n</code></pre>\n<p>Then you can import <code>pypatconsole</code> in Python. The package lets you import three functions: <code>menu</code>, <code>list_local_cases</code> and <code>clear_screen</code>. Usage of <code>menu</code> will be illustrated below. <code>list_local_cases</code> takes the output from <code>locals()</code> and lists all the functions in the local scope. <code>clear_screen</code> clears your screen, hence the name.</p>\n<h1>How to implement</h1>\n<p>Simply implement the cases (as functions) in a Python file, then to initialize the interface you simply use the <code>menu</code> function at the bottom</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n            <span class=\"o\">.</span>\n            <span class=\"o\">.</span>\n            <span class=\"o\">.</span>\n\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">' Main menu title here '</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can import whatever modules, classes and functions you want in the file without them interfering with the functions defined your file. You will need to implement docstrings to every case. The first line of text in the docstring will be used as the description in the console interface.</p>\n<p>The order of the cases is alphabetically sorted by the function name.</p>\n<p>The function signature of <code>menu</code> along with its docstring is as follows:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">menu</span><span class=\"p\">(</span><span class=\"n\">cases</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">list</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">ModuleType</span><span class=\"p\">],</span> <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">' Title '</span><span class=\"p\">,</span>\n                <span class=\"n\">blank_proceedure</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Callable</span><span class=\"p\">]</span><span class=\"o\">=</span><span class=\"s1\">'return'</span><span class=\"p\">,</span>\n                <span class=\"n\">decorator</span><span class=\"p\">:</span> <span class=\"n\">Callable</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">run</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"p\">:</span> <span class=\"nb\">bool</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    Factory function for the CLI class. This function initializes a menu.</span>\n\n<span class=\"sd\">    Parameters</span>\n<span class=\"sd\">    ------------</span>\n<span class=\"sd\">    cases: Can be output of locals() (a dictionary) from the scope of the cases</span>\n\n<span class=\"sd\">           Or a list functions</span>\n\n<span class=\"sd\">           Or a module containing the case functions</span>\n\n<span class=\"sd\">    title: title of menu</span>\n\n<span class=\"sd\">    blank_proceedure: What to do the when given blank input. Can be user defined</span>\n<span class=\"sd\">                      function, or it can be a string. Available string options</span>\n<span class=\"sd\">                      are:</span>\n\n<span class=\"sd\">                      'return', will return to parent menu, if you are at main</span>\n<span class=\"sd\">                      menu, this will exit the program</span>\n\n<span class=\"sd\">                      'pass', does nothing. This should only be used for the</span>\n<span class=\"sd\">                      main menu</span>\n\n<span class=\"sd\">                      'exit', exits the program</span>\n\n<span class=\"sd\">    decorator: Whether to decorate functions</span>\n\n<span class=\"sd\">    run: To run menu instantly or not</span>\n\n<span class=\"sd\">    Returns</span>\n<span class=\"sd\">    --------</span>\n<span class=\"sd\">    CLI (Command Line Interface) object. Use .run() method to activate menu.</span>\n<span class=\"sd\">    '''</span>\n</pre>\n<h3>Examples</h3>\n<p>Say we are editing console.py</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">random</span> <span class=\"kn\">import</span> <span class=\"n\">randint</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case1</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    FizzBuzz!</span>\n\n<span class=\"sd\">    When you get the urge to fizz your buzz</span>\n<span class=\"sd\">    if you know what I mean</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">21</span><span class=\"p\">):</span>\n        <span class=\"n\">stringy</span> <span class=\"o\">=</span> <span class=\"s1\">''</span>\n\n        <span class=\"n\">fizz</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">3</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n        <span class=\"n\">buzz</span> <span class=\"o\">=</span> <span class=\"n\">i</span> <span class=\"o\">%</span> <span class=\"mi\">5</span> <span class=\"o\">==</span> <span class=\"mi\">0</span>\n\n        <span class=\"k\">if</span> <span class=\"n\">fizz</span><span class=\"p\">:</span>\n            <span class=\"n\">stringy</span> <span class=\"o\">=</span> <span class=\"n\">stringy</span> <span class=\"o\">+</span> <span class=\"s1\">'Fizz'</span>\n        <span class=\"k\">if</span> <span class=\"n\">buzz</span><span class=\"p\">:</span>\n            <span class=\"n\">stringy</span> <span class=\"o\">=</span> <span class=\"n\">stringy</span> <span class=\"o\">+</span> <span class=\"s1\">'Buzz'</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"p\">(</span><span class=\"n\">fizz</span> <span class=\"ow\">or</span> <span class=\"n\">buzz</span><span class=\"p\">):</span>\n            <span class=\"n\">stringy</span> <span class=\"o\">=</span> <span class=\"n\">i</span>\n\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">stringy</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.1</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case2</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''</span>\n<span class=\"sd\">    Print a small random integer</span>\n<span class=\"sd\">    '''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">9</span><span class=\"p\">))</span>\n    <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.5</span><span class=\"p\">)</span>\n\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">' Main menu '</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">blank_proceedure</span><span class=\"o\">=</span><span class=\"s1\">'pass'</span><span class=\"p\">)</span>\n</pre>\n<p>will result with this when running: <code>python console.py</code>:</p>\n<pre><code>-------------- Main menu ---------------\n1. FizzBuzz!\n2. Print a small random integer\n\nInput:\n</code></pre>\n<h2>Special cases</h2>\n<p>Entering <code>..</code> will exit the current menu, effectively moving you to the parent menu if you are implementing nested cases. If you are in the main menu it will exit the program.</p>\n<p>Entering <code>q</code> will exit the program (of course Ctrl+C works as well)</p>\n<p>Entering <code>h</code> will display this text that explains the special cases.</p>\n<h2>Arguments</h2>\n<p>The cases can take arguments as well! Simply implement them as functions with type hints (type hints are mandatory for the case functions):</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case1</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Add two integers'''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case1</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Append two strings'''</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">+</span><span class=\"n\">b</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case3</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Print elements in list and their types'''</span>\n    <span class=\"p\">[</span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'Element </span><span class=\"si\">{</span><span class=\"n\">i</span><span class=\"si\">}</span><span class=\"s1\">: </span><span class=\"si\">{</span><span class=\"n\">elem</span><span class=\"si\">}</span><span class=\"s1\">, type: </span><span class=\"si\">{</span><span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">elem</span><span class=\"p\">)</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">i</span><span class=\"p\">,</span> <span class=\"n\">elem</span>\n                                                        <span class=\"ow\">in</span> <span class=\"nb\">enumerate</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">)]</span>\n\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">' Main menu '</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Then simply give the arguments along with the choice:</p>\n<pre><code>-------------- Main menu ---------------\n1. Add two integers\n2. Append two strings\n3. Print elements in list and their types\n\n\nInput: 1 60 9\n\n69\n</code></pre>\n<pre><code>Input: 2 \"cat and dog\" mathemathics\n\ncat and dogmathemathics\n\nNote: Single token strings don't even need quotes\n</code></pre>\n<pre><code>Input: 3 ['cat',69,420.0]\n\nElement 0: cat, type: &lt;class 'str'&gt;\nElement 1: 69, type: &lt;class 'int'&gt;\nElement 2: 420.0, type: &lt;class 'float'&gt;\n\nNote: You cannot have any spaces when giving lists, tuples, dicts and such as the input parser will break them.\n</code></pre>\n<p>The program will read the desired types from the function signature, then it will convert the input into the appropriate types. The only supported types are the built in Python types:</p>\n<ul>\n<li>str</li>\n<li>int</li>\n<li>float</li>\n<li>tuple</li>\n<li>list</li>\n<li>set</li>\n<li>dict</li>\n</ul>\n<h2>Nested cases</h2>\n<p>If you want to implement nested cases, then you can simply reuse the menu function in the function scope. When doing nested cases, you should not give the keyword <code>main=True</code> to the <code>menu</code> function.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parentcase1</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''Fizz'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subcase1</span><span class=\"p\">():</span>\n        <span class=\"sd\">'''docstring1'''</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">subcase2</span><span class=\"p\">():</span>\n        <span class=\"sd\">'''docstring2'''</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span> <span class=\"s1\">' Title here '</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">' Main menu '</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>You can create another module for the other cases and pass them as well:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n<span class=\"kn\">import</span> <span class=\"nn\">other_cases</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">samplecase</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''Foo'''</span>\n    <span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"n\">other_cases</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span> <span class=\"s1\">' Title here '</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"n\">other_cases</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"o\">=</span> <span class=\"s1\">' Main menu '</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>or you can give a list of functions, which will enable you to force the ordering of the cases as well:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">parentcase1</span><span class=\"p\">():</span>\n    <span class=\"sd\">'''Fizz'''</span>\n    <span class=\"k\">def</span> <span class=\"nf\">subcase1</span><span class=\"p\">():</span>\n        <span class=\"sd\">'''docstring1'''</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">subcase2</span><span class=\"p\">():</span>\n        <span class=\"sd\">'''docstring2'''</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"n\">menu</span><span class=\"p\">([</span><span class=\"n\">subcase2</span><span class=\"p\">,</span> <span class=\"n\">subcase1</span><span class=\"p\">],</span> <span class=\"n\">title</span><span class=\"o\">=</span> <span class=\"s1\">' Title here '</span><span class=\"p\">)</span>\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">title</span><span class=\"o\">=</span><span class=\"s1\">' Main menu '</span><span class=\"p\">)</span>\n</pre>\n<h2>What if want to define functions without having them displayed in the menu?</h2>\n<p>Of what I can think of: you can either define your functions in another python file and import that, or you can create a class (in the same file as the case functions) that consists of your functions as static methods.</p>\n<h2>Optional: Decorator</h2>\n<p>To enforce a common behavior when entering and leaving a case within a menu, you give a decorator to the <code>menu</code> function. However, it is important that the decorator  implements the <code>__wrapped__</code> attribute (this is to handle docstrings of wrappers as arguments for wrapped functions). Generally, it should look like this</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">case_decorator</span><span class=\"p\">(</span><span class=\"n\">func</span><span class=\"p\">):</span>\n    <span class=\"sd\">'''Decorator to enforce commmon behavior for cases'''</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">case_wrapper</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''Verbosity wrapper'''</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Yeah! Going in!'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"n\">retobj</span> <span class=\"o\">=</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Woah! Going out!'</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">retobj</span>\n    <span class=\"c1\"># This is necessary in order to unwrap using inspect module</span>\n    <span class=\"n\">case_wrapper</span><span class=\"o\">.</span><span class=\"n\">__wrapped__</span> <span class=\"o\">=</span> <span class=\"n\">func</span>\n    <span class=\"k\">return</span> <span class=\"n\">case_wrapper</span>\n</pre>\n<p>Since the decorator is a function, you cannot have it in the same namespace as the case functions, so you can for example implement it in another file. To use it you do as following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pypatconsole</span> <span class=\"kn\">import</span> <span class=\"n\">menu</span>\n<span class=\"kn\">from</span> <span class=\"nn\">case_decorator</span> <span class=\"kn\">import</span> <span class=\"n\">case_decorator</span>\n\n<span class=\"c1\"># A lot of cases here</span>\n\n<span class=\"n\">menu</span><span class=\"p\">(</span><span class=\"nb\">locals</span><span class=\"p\">(),</span> <span class=\"n\">decorator</span><span class=\"o\">=</span><span class=\"n\">case_decorator</span><span class=\"p\">,</span> <span class=\"n\">main</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h1>Why</h1>\n<p>Sometimes you want to have a simple console interface so you can do things step by step.\nHere are some applications:</p>\n<h2>Stock data pipeline</h2>\n<p>Data scraping and data cleaning pipeline for stock data</p>\n<pre><code>------------- Mulababy420 --------------\n1. Update all data\n2. Obtain Oslo Bors quotes and returns\n3. Scrape Oslo bors HTML files\n4. Scrape Yahoo Finance\n5. Backup current data\n6. Exit program\nEnter choice:\n</code></pre>\n<p>Sometimes I don't want to run everything at once. Maybe I just want to backup data instead of doing all everything. PyPat-Console will enable a very quick implementation of a console.\nWithout the console I would need to find the right file to run (and maybe comment things out first as well). The console organizes everything into one place.</p>\n<h2>Database interface</h2>\n<pre><code>------BergenDB------\n1. Log rent\n2. Log power\n3. Print table\n4. Plot table\n5. Commit changes\n6. Discard changes\n7. Exit\n</code></pre>\n<p>I log my rent and power bills in a SQL database. I have made a Python API to manage the database, and I just do everything through the interface. No need to script anything or write any SQL queries.</p>\n<h2>Control your Google Compute VM</h2>\n<pre><code>----------------GCE-----------------                                                                      \n1. SSH to personal instance\n2. SSH to project instance\n3. start/stop personal instance (0 to stop, 1 to start, 2 to restart)\n4. start/stop project instance (0 to stop, 1 to start, 2 to restart)\n5. Get status personal instance\n6. Get status project instance\n7. Other instance control      \n\nEntering blank returns to parent menu\nInput:\n</code></pre>\n\n          </div>"}, "last_serial": 6989624, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "49d64074ff4b6b8312e938776b1a9081", "sha256": "f677597608e7a0600c4871c92c03245eb5454476c4bbc0275f111591aba09b5c"}, "downloads": -1, "filename": "pypatconsole-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "49d64074ff4b6b8312e938776b1a9081", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11736, "upload_time": "2020-04-04T17:25:02", "upload_time_iso_8601": "2020-04-04T17:25:02.819086Z", "url": "https://files.pythonhosted.org/packages/d6/69/8210942d78e727f72f8017d131c4eab255f315213fc0d69872bac2993ac8/pypatconsole-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99118fed52226429c076e7ce13ab555a", "sha256": "1a48209baf56976586b53b7bcba84be9e807393effa28b5776ec8b846b389284"}, "downloads": -1, "filename": "pypatconsole-0.0.1.tar.gz", "has_sig": false, "md5_digest": "99118fed52226429c076e7ce13ab555a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11718, "upload_time": "2020-04-04T17:25:07", "upload_time_iso_8601": "2020-04-04T17:25:07.502168Z", "url": "https://files.pythonhosted.org/packages/37/86/69becaf2cd547c0d56e34abda7e3bc0ab013877ebdb92c945085e435aa2a/pypatconsole-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "5eb50ff157888ab2e1c6acb9cad27c72", "sha256": "b3af1e5ec70e2256ee72d2d3118ac38c698d6e3055ca0a7814a2093ae6294fbb"}, "downloads": -1, "filename": "pypatconsole-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "5eb50ff157888ab2e1c6acb9cad27c72", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 11733, "upload_time": "2020-04-04T17:25:04", "upload_time_iso_8601": "2020-04-04T17:25:04.937757Z", "url": "https://files.pythonhosted.org/packages/ae/72/8f8330279a0722cbddad453d40e32bf653c2a96d7a6fb1a8979a1401e019/pypatconsole-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3715b7d1408fd7f5447b2549f80264a4", "sha256": "31e592186cf200c21c8d1c16ac2cc3e5a83fff415fb14e4d4c0fe4d69caa601b"}, "downloads": -1, "filename": "pypatconsole-0.0.2.tar.gz", "has_sig": false, "md5_digest": "3715b7d1408fd7f5447b2549f80264a4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11715, "upload_time": "2020-04-04T17:25:08", "upload_time_iso_8601": "2020-04-04T17:25:08.513755Z", "url": "https://files.pythonhosted.org/packages/e9/cb/a9458ff5003a1dfd2cc9f3ffb330d6b12fb9299ccfef5401cc30d36dc500/pypatconsole-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "842951407c2df5215582df5bcc9da36e", "sha256": "a2a05045419cebdf330938dccea5bbbfc20f834e64009f3f426595877c1f83cd"}, "downloads": -1, "filename": "pypatconsole-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "842951407c2df5215582df5bcc9da36e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12136, "upload_time": "2020-04-04T17:25:06", "upload_time_iso_8601": "2020-04-04T17:25:06.015000Z", "url": "https://files.pythonhosted.org/packages/7c/1f/f8e6f5ada90084e99d494fff39a9f87a59ad797f1f96e2b2fd51d55398f1/pypatconsole-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3d5d7c11421bb806e9a95b138ec295c", "sha256": "ca5a778a6002ce594f90716f4f0ed77598c1a8f0a756e5216d58efd4467554ea"}, "downloads": -1, "filename": "pypatconsole-0.0.3.tar.gz", "has_sig": false, "md5_digest": "d3d5d7c11421bb806e9a95b138ec295c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12446, "upload_time": "2020-04-04T17:25:09", "upload_time_iso_8601": "2020-04-04T17:25:09.489077Z", "url": "https://files.pythonhosted.org/packages/3b/02/5ffc2961f288eef0cc3db96462589ac1e60ecdbe79ff99954362cd90c92e/pypatconsole-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "3ebbf9a36bceb058f823b56dc36a0acd", "sha256": "e485fa3b4cce7e4e46f65649298172a53559e5ef797dd57e6005d5d12f095723"}, "downloads": -1, "filename": "pypatconsole-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3ebbf9a36bceb058f823b56dc36a0acd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12248, "upload_time": "2020-04-04T18:40:38", "upload_time_iso_8601": "2020-04-04T18:40:38.341016Z", "url": "https://files.pythonhosted.org/packages/4e/63/9dfe42d88ff69636332cd4982f5f9a9f7cab0848d5a7db65f20352157925/pypatconsole-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13993b5ed5010512906686c55b66b335", "sha256": "1d10154a6a6f85d5bd30629e94e2819c0cdcc2b2e6984afe28760d5bbce00719"}, "downloads": -1, "filename": "pypatconsole-0.0.4.tar.gz", "has_sig": false, "md5_digest": "13993b5ed5010512906686c55b66b335", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12564, "upload_time": "2020-04-04T18:40:42", "upload_time_iso_8601": "2020-04-04T18:40:42.357595Z", "url": "https://files.pythonhosted.org/packages/0c/12/b036eec7d5a9465699f21ee0359ada3f92bc10089b9699529f281b45b905/pypatconsole-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "63809b47522e452f587c8ea2449d04c2", "sha256": "572d7a298d32f6fdbd641a7a93441bfa9e566ac5bb29e7105e139885f8500ccb"}, "downloads": -1, "filename": "pypatconsole-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "63809b47522e452f587c8ea2449d04c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12314, "upload_time": "2020-04-09T22:31:23", "upload_time_iso_8601": "2020-04-09T22:31:23.282441Z", "url": "https://files.pythonhosted.org/packages/1a/e5/a65a2a2235dd8ef72564306ca0dcdfe93debdc735da624d76bcdd2214811/pypatconsole-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e240704273a6b23e47ce57ba5f3a43eb", "sha256": "10350891e11c3af4663a47c327e47fce21b7a1cc0643ccf0faca8c50d56fa1c6"}, "downloads": -1, "filename": "pypatconsole-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e240704273a6b23e47ce57ba5f3a43eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12656, "upload_time": "2020-04-09T22:31:27", "upload_time_iso_8601": "2020-04-09T22:31:27.744880Z", "url": "https://files.pythonhosted.org/packages/38/1f/b5eb190e4140c83d7e63b7bed212bcd1eb15643176c060b7ccaa3cc70045/pypatconsole-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63809b47522e452f587c8ea2449d04c2", "sha256": "572d7a298d32f6fdbd641a7a93441bfa9e566ac5bb29e7105e139885f8500ccb"}, "downloads": -1, "filename": "pypatconsole-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "63809b47522e452f587c8ea2449d04c2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12314, "upload_time": "2020-04-09T22:31:23", "upload_time_iso_8601": "2020-04-09T22:31:23.282441Z", "url": "https://files.pythonhosted.org/packages/1a/e5/a65a2a2235dd8ef72564306ca0dcdfe93debdc735da624d76bcdd2214811/pypatconsole-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e240704273a6b23e47ce57ba5f3a43eb", "sha256": "10350891e11c3af4663a47c327e47fce21b7a1cc0643ccf0faca8c50d56fa1c6"}, "downloads": -1, "filename": "pypatconsole-0.0.5.tar.gz", "has_sig": false, "md5_digest": "e240704273a6b23e47ce57ba5f3a43eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12656, "upload_time": "2020-04-09T22:31:27", "upload_time_iso_8601": "2020-04-09T22:31:27.744880Z", "url": "https://files.pythonhosted.org/packages/38/1f/b5eb190e4140c83d7e63b7bed212bcd1eb15643176c060b7ccaa3cc70045/pypatconsole-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:52 2020"}