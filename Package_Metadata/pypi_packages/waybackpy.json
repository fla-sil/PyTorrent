{"info": {"author": "akamhy", "author_email": "akash3pro@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.2", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Build Tools"], "description": "# waybackpy\n[![Build Status](https://travis-ci.org/akamhy/waybackpy.svg?branch=master)](https://travis-ci.org/akamhy/waybackpy)\n[![Downloads](https://img.shields.io/pypi/dm/waybackpy.svg)](https://pypistats.org/packages/waybackpy)\n[![Release](https://img.shields.io/github/v/release/akamhy/waybackpy.svg)](https://github.com/akamhy/waybackpy/releases)\n[![Codacy Badge](https://api.codacy.com/project/badge/Grade/255459cede9341e39436ec8866d3fb65)](https://www.codacy.com/manual/akamhy/waybackpy?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=akamhy/waybackpy&amp;utm_campaign=Badge_Grade)\n[![License: MIT](https://img.shields.io/badge/License-MIT-yellow.svg)](https://github.com/akamhy/waybackpy/blob/master/LICENSE)\n[![Maintainability](https://api.codeclimate.com/v1/badges/942f13d8177a56c1c906/maintainability)](https://codeclimate.com/github/akamhy/waybackpy/maintainability)\n[![CodeFactor](https://www.codefactor.io/repository/github/akamhy/waybackpy/badge)](https://www.codefactor.io/repository/github/akamhy/waybackpy)\n[![made-with-python](https://img.shields.io/badge/Made%20with-Python-1f425f.svg)](https://www.python.org/)\n![pypi](https://img.shields.io/pypi/v/waybackpy.svg)\n![PyPI - Python Version](https://img.shields.io/pypi/pyversions/waybackpy?style=flat-square)\n[![Maintenance](https://img.shields.io/badge/Maintained%3F-yes-green.svg)](https://github.com/akamhy/waybackpy/graphs/commit-activity)\n\n\n\n![Internet Archive](https://upload.wikimedia.org/wikipedia/commons/thumb/8/84/Internet_Archive_logo_and_wordmark.svg/84px-Internet_Archive_logo_and_wordmark.svg.png)\n![Wayback Machine](https://upload.wikimedia.org/wikipedia/commons/thumb/0/01/Wayback_Machine_logo_2010.svg/284px-Wayback_Machine_logo_2010.svg.png)\n\nThe waybackpy is a python wrapper for [Internet Archive](https://en.wikipedia.org/wiki/Internet_Archive)'s [Wayback Machine](https://en.wikipedia.org/wiki/Wayback_Machine).\n\nTable of contents\n=================\n<!--ts-->\n\n* [Installation](https://github.com/akamhy/waybackpy#installation)\n\n* [Usage](https://github.com/akamhy/waybackpy#usage)\n  * [Saving an url using save()](https://github.com/akamhy/waybackpy#capturing-aka-saving-an-url-using-save)\n  * [Receiving the oldest archive for an URL Using oldest()](https://github.com/akamhy/waybackpy#receiving-the-oldest-archive-for-an-url-using-oldest)\n  * [Receiving the recent most/newest archive for an URL using newest()](https://github.com/akamhy/waybackpy#receiving-the-newest-archive-for-an-url-using-newest)\n  * [Receiving archive close to a specified year, month, day, hour, and minute using near()](https://github.com/akamhy/waybackpy#receiving-archive-close-to-a-specified-year-month-day-hour-and-minute-using-near)\n  * [Get the content of webpage using get()](https://github.com/akamhy/waybackpy#get-the-content-of-webpage-using-get)\n  * [Count total archives for an URL using total_archives()](https://github.com/akamhy/waybackpy#count-total-archives-for-an-url-using-total_archives)\n\n\n* [Tests](https://github.com/akamhy/waybackpy#tests)\n\n* [Dependency](https://github.com/akamhy/waybackpy#dependency)\n\n* [License](https://github.com/akamhy/waybackpy#license)\n\n<!--te-->\n\n## Installation\nUsing [pip](https://en.wikipedia.org/wiki/Pip_(package_manager)):\n\n**pip install waybackpy**\n\n\n\n## Usage\n\n#### Capturing aka Saving an url Using save()\n\n```diff\n+ waybackpy.save(url, UA=user_agent)\n```\n> url is mandatory. UA is not, but highly recommended.\n```python\nimport waybackpy\n# Capturing a new archive on Wayback machine.\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\narchived_url = waybackpy.save(\"https://github.com/akamhy/waybackpy\", UA = \"Any-User-Agent\")\nprint(archived_url)\n```\nThis should print something similar to the following archived URL:\n\n<https://web.archive.org/web/20200504141153/https://github.com/akamhy/waybackpy>\n\n#### Receiving the oldest archive for an URL Using oldest()\n\n```diff\n+ waybackpy.oldest(url, UA=user_agent)\n```\n> url is mandatory. UA is not, but highly recommended.\n\n\n```python\nimport waybackpy\n# retrieving the oldest archive on Wayback machine.\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\noldest_archive = waybackpy.oldest(\"https://www.google.com/\", UA = \"Any-User-Agent\")\nprint(oldest_archive)\n```\nThis returns the oldest available archive for <https://google.com>.\n\n<http://web.archive.org/web/19981111184551/http://google.com:80/>\n\n#### Receiving the newest archive for an URL using newest()\n\n```diff\n+ waybackpy.newest(url, UA=user_agent)\n```\n> url is mandatory. UA is not, but highly recommended.\n\n\n```python\nimport waybackpy\n# retrieving the newest archive on Wayback machine.\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\nnewest_archive = waybackpy.newest(\"https://www.microsoft.com/en-us\", UA = \"Any-User-Agent\")\nprint(newest_archive)\n```\nThis returns the newest available archive for <https://www.microsoft.com/en-us>, something just like this:\n\n<http://web.archive.org/web/20200429033402/https://www.microsoft.com/en-us/>\n\n#### Receiving archive close to a specified year, month, day, hour, and minute using near()\n\n```diff\n+ waybackpy.near(url, year=2020, month=1, day=1, hour=1, minute=1, UA=user_agent)\n```\n> url is mandotory. year,month,day,hour and minute are optional arguments. UA is not mandotory, but higly recomended.\n\n\n```python\nimport waybackpy\n# retriving the the closest archive from a specified year.\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\n# supported argumnets are year,month,day,hour and minute\narchive_near_year = waybackpy.near(\"https://www.facebook.com/\", year=2010, UA =\"Any-User-Agent\")\nprint(archive_near_year)\n```\nreturns : <http://web.archive.org/web/20100504071154/http://www.facebook.com/>\n\n```waybackpy.near(\"https://www.facebook.com/\", year=2010, month=1, UA =\"Any-User-Agent\")``` returns: <http://web.archive.org/web/20101111173430/http://www.facebook.com//>\n\n```waybackpy.near(\"https://www.oracle.com/index.html\", year=2019, month=1, day=5, UA =\"Any-User-Agent\")``` returns: <http://web.archive.org/web/20190105054437/https://www.oracle.com/index.html>\n> Please note that if you only specify the year, the current month and day are default arguments for month and day respectively. Do not expect just putting the year parameter would return the archive closer to January but the current month you are using the package. If you are using it in July 2018 and let's say you use ```waybackpy.near(\"https://www.facebook.com/\", year=2011, UA =\"Any-User-Agent\")``` then you would be returned the nearest archive to July 2011 and not January 2011. You need to specify the month \"1\" for January.\n\n> Do not pad (don't use zeros in the month, year, day, minute, and hour arguments). e.g. For January, set month = 1 and not month = 01.\n\n#### Get the content of webpage using get()\n\n```diff\n+ waybackpy.get(url, encoding=\"UTF-8\", UA=user_agent)\n```\n> url is mandatory. UA is not, but highly recommended. encoding is detected automatically, don't specify unless necessary.\n\n```python\nfrom waybackpy import get\n# retriving the webpage from any url including the archived urls. Don't need to import other libraies :)\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\n# supported argumnets are url, encoding and UA\nwebpage = get(\"https://example.com/\", UA=\"User-Agent\")\nprint(webpage)\n```\n> This should print the source code for <https://example.com/>.\n\n#### Count total archives for an URL using total_archives()\n\n```diff\n+ waybackpy.total_archives(url, UA=user_agent)\n```\n> url is mandatory. UA is not, but highly recommended.\n\n```python\nfrom waybackpy import total_archives\n# retriving the webpage from any url including the archived urls. Don't need to import other libraies :)\n# Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.\n# supported argumnets are url and UA\ncount = total_archives(\"https://en.wikipedia.org/wiki/Python (programming language)\", UA=\"User-Agent\")\nprint(count)\n```\n> This should print an integer (int), which is the number of total archives on archive.org\n\n## Tests\n* [Here](https://github.com/akamhy/waybackpy/tree/master/tests)\n\n## Dependency\n* None, just python standard libraries (json, urllib and datetime). Both python 2 and 3 are supported :)\n\n\n## License\n\n[MIT License](https://github.com/akamhy/waybackpy/blob/master/LICENSE)", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/akamhy/waybackpy/archive/v1.6.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://akamhy.github.io/waybackpy/", "keywords": "wayback,archive,archive website,wayback machine,Internet Archive", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "waybackpy", "package_url": "https://pypi.org/project/waybackpy/", "platform": "", "project_url": "https://pypi.org/project/waybackpy/", "project_urls": {"Documentation": "https://waybackpy.readthedocs.io", "Download": "https://github.com/akamhy/waybackpy/archive/v1.6.tar.gz", "Homepage": "https://akamhy.github.io/waybackpy/", "Source": "https://github.com/akamhy/waybackpy"}, "release_url": "https://pypi.org/project/waybackpy/1.6/", "requires_dist": null, "requires_python": ">=2.7", "summary": "A python wrapper for Internet Archive's Wayback Machine API. Archive pages and retrieve archived pages easily.", "version": "1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>waybackpy</h1>\n<p><a href=\"https://travis-ci.org/akamhy/waybackpy\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6469c59bc96b2be599922aa56fbf3cd3ac51580e/68747470733a2f2f7472617669732d63692e6f72672f616b616d68792f7761796261636b70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypistats.org/packages/waybackpy\" rel=\"nofollow\"><img alt=\"Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ad889f0ed05835e2cd686caa330418151903b0d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7761796261636b70792e737667\"></a>\n<a href=\"https://github.com/akamhy/waybackpy/releases\" rel=\"nofollow\"><img alt=\"Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/623a37ab449ee784647a20814e466e6a48a84238/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f762f72656c656173652f616b616d68792f7761796261636b70792e737667\"></a>\n<a href=\"https://www.codacy.com/manual/akamhy/waybackpy?utm_source=github.com&amp;utm_medium=referral&amp;utm_content=akamhy/waybackpy&amp;utm_campaign=Badge_Grade\" rel=\"nofollow\"><img alt=\"Codacy Badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2fd0220b23467e7b45ca546af2884984ccb4d82/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f47726164652f3235353435396365646539333431653339343336656338383636643366623635\"></a>\n<a href=\"https://github.com/akamhy/waybackpy/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License: MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8645b002dd7ec1b54275a80574942e7a318e03c6/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d79656c6c6f772e737667\"></a>\n<a href=\"https://codeclimate.com/github/akamhy/waybackpy/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/915c1d3c27a71283a274a761de0afe91eeeb2448/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f39343266313364383137376135366331633930362f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://www.codefactor.io/repository/github/akamhy/waybackpy\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/985db85f352e5cb4fd53f9c0a727b571d3cdcf62/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f616b616d68792f7761796261636b70792f6261646765\"></a>\n<a href=\"https://www.python.org/\" rel=\"nofollow\"><img alt=\"made-with-python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68a99107ffdf24c5fb2cc4bca38b7b662e501b97/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d616465253230776974682d507974686f6e2d3166343235662e737667\"></a>\n<img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7668a3c814ea34fbd63ca915104153ef4e3f4fb7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7761796261636b70792e737667\">\n<img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c7cc602fc429b6c845f8088c8a176767ded910d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7761796261636b70793f7374796c653d666c61742d737175617265\">\n<a href=\"https://github.com/akamhy/waybackpy/graphs/commit-activity\" rel=\"nofollow\"><img alt=\"Maintenance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90bf1b2a4d99698c4dffbc494b9734690a777fec/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4d61696e7461696e65642533462d7965732d677265656e2e737667\"></a></p>\n<p><img alt=\"Internet Archive\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/833932ca0b9929ca4d098242c01a2a202b9bd176/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f382f38342f496e7465726e65745f417263686976655f6c6f676f5f616e645f776f72646d61726b2e7376672f383470782d496e7465726e65745f417263686976655f6c6f676f5f616e645f776f72646d61726b2e7376672e706e67\">\n<img alt=\"Wayback Machine\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8211818c5b7b33c9670ae423201763d3a39d3404/68747470733a2f2f75706c6f61642e77696b696d656469612e6f72672f77696b6970656469612f636f6d6d6f6e732f7468756d622f302f30312f5761796261636b5f4d616368696e655f6c6f676f5f323031302e7376672f32383470782d5761796261636b5f4d616368696e655f6c6f676f5f323031302e7376672e706e67\"></p>\n<p>The waybackpy is a python wrapper for <a href=\"https://en.wikipedia.org/wiki/Internet_Archive\" rel=\"nofollow\">Internet Archive</a>'s <a href=\"https://en.wikipedia.org/wiki/Wayback_Machine\" rel=\"nofollow\">Wayback Machine</a>.</p>\n<h1>Table of contents</h1>\n\n<ul>\n<li>\n<p><a href=\"https://github.com/akamhy/waybackpy#installation\" rel=\"nofollow\">Installation</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/akamhy/waybackpy#usage\" rel=\"nofollow\">Usage</a></p>\n<ul>\n<li><a href=\"https://github.com/akamhy/waybackpy#capturing-aka-saving-an-url-using-save\" rel=\"nofollow\">Saving an url using save()</a></li>\n<li><a href=\"https://github.com/akamhy/waybackpy#receiving-the-oldest-archive-for-an-url-using-oldest\" rel=\"nofollow\">Receiving the oldest archive for an URL Using oldest()</a></li>\n<li><a href=\"https://github.com/akamhy/waybackpy#receiving-the-newest-archive-for-an-url-using-newest\" rel=\"nofollow\">Receiving the recent most/newest archive for an URL using newest()</a></li>\n<li><a href=\"https://github.com/akamhy/waybackpy#receiving-archive-close-to-a-specified-year-month-day-hour-and-minute-using-near\" rel=\"nofollow\">Receiving archive close to a specified year, month, day, hour, and minute using near()</a></li>\n<li><a href=\"https://github.com/akamhy/waybackpy#get-the-content-of-webpage-using-get\" rel=\"nofollow\">Get the content of webpage using get()</a></li>\n<li><a href=\"https://github.com/akamhy/waybackpy#count-total-archives-for-an-url-using-total_archives\" rel=\"nofollow\">Count total archives for an URL using total_archives()</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"https://github.com/akamhy/waybackpy#tests\" rel=\"nofollow\">Tests</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/akamhy/waybackpy#dependency\" rel=\"nofollow\">Dependency</a></p>\n</li>\n<li>\n<p><a href=\"https://github.com/akamhy/waybackpy#license\" rel=\"nofollow\">License</a></p>\n</li>\n</ul>\n\n<h2>Installation</h2>\n<p>Using <a href=\"https://en.wikipedia.org/wiki/Pip_(package_manager)\" rel=\"nofollow\">pip</a>:</p>\n<p><strong>pip install waybackpy</strong></p>\n<h2>Usage</h2>\n<h4>Capturing aka Saving an url Using save()</h4>\n<pre><span class=\"gi\">+ waybackpy.save(url, UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandatory. UA is not, but highly recommended.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">waybackpy</span>\n<span class=\"c1\"># Capturing a new archive on Wayback machine.</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"n\">archived_url</span> <span class=\"o\">=</span> <span class=\"n\">waybackpy</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"https://github.com/akamhy/waybackpy\"</span><span class=\"p\">,</span> <span class=\"n\">UA</span> <span class=\"o\">=</span> <span class=\"s2\">\"Any-User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">archived_url</span><span class=\"p\">)</span>\n</pre>\n<p>This should print something similar to the following archived URL:</p>\n<p><a href=\"https://web.archive.org/web/20200504141153/https://github.com/akamhy/waybackpy\" rel=\"nofollow\">https://web.archive.org/web/20200504141153/https://github.com/akamhy/waybackpy</a></p>\n<h4>Receiving the oldest archive for an URL Using oldest()</h4>\n<pre><span class=\"gi\">+ waybackpy.oldest(url, UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandatory. UA is not, but highly recommended.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">waybackpy</span>\n<span class=\"c1\"># retrieving the oldest archive on Wayback machine.</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"n\">oldest_archive</span> <span class=\"o\">=</span> <span class=\"n\">waybackpy</span><span class=\"o\">.</span><span class=\"n\">oldest</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.google.com/\"</span><span class=\"p\">,</span> <span class=\"n\">UA</span> <span class=\"o\">=</span> <span class=\"s2\">\"Any-User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">oldest_archive</span><span class=\"p\">)</span>\n</pre>\n<p>This returns the oldest available archive for <a href=\"https://google.com\" rel=\"nofollow\">https://google.com</a>.</p>\n<p><a href=\"http://web.archive.org/web/19981111184551/http://google.com:80/\" rel=\"nofollow\">http://web.archive.org/web/19981111184551/http://google.com:80/</a></p>\n<h4>Receiving the newest archive for an URL using newest()</h4>\n<pre><span class=\"gi\">+ waybackpy.newest(url, UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandatory. UA is not, but highly recommended.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">waybackpy</span>\n<span class=\"c1\"># retrieving the newest archive on Wayback machine.</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"n\">newest_archive</span> <span class=\"o\">=</span> <span class=\"n\">waybackpy</span><span class=\"o\">.</span><span class=\"n\">newest</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.microsoft.com/en-us\"</span><span class=\"p\">,</span> <span class=\"n\">UA</span> <span class=\"o\">=</span> <span class=\"s2\">\"Any-User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">newest_archive</span><span class=\"p\">)</span>\n</pre>\n<p>This returns the newest available archive for <a href=\"https://www.microsoft.com/en-us\" rel=\"nofollow\">https://www.microsoft.com/en-us</a>, something just like this:</p>\n<p><a href=\"http://web.archive.org/web/20200429033402/https://www.microsoft.com/en-us/\" rel=\"nofollow\">http://web.archive.org/web/20200429033402/https://www.microsoft.com/en-us/</a></p>\n<h4>Receiving archive close to a specified year, month, day, hour, and minute using near()</h4>\n<pre><span class=\"gi\">+ waybackpy.near(url, year=2020, month=1, day=1, hour=1, minute=1, UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandotory. year,month,day,hour and minute are optional arguments. UA is not mandotory, but higly recomended.</p>\n</blockquote>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">waybackpy</span>\n<span class=\"c1\"># retriving the the closest archive from a specified year.</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"c1\"># supported argumnets are year,month,day,hour and minute</span>\n<span class=\"n\">archive_near_year</span> <span class=\"o\">=</span> <span class=\"n\">waybackpy</span><span class=\"o\">.</span><span class=\"n\">near</span><span class=\"p\">(</span><span class=\"s2\">\"https://www.facebook.com/\"</span><span class=\"p\">,</span> <span class=\"n\">year</span><span class=\"o\">=</span><span class=\"mi\">2010</span><span class=\"p\">,</span> <span class=\"n\">UA</span> <span class=\"o\">=</span><span class=\"s2\">\"Any-User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">archive_near_year</span><span class=\"p\">)</span>\n</pre>\n<p>returns : <a href=\"http://web.archive.org/web/20100504071154/http://www.facebook.com/\" rel=\"nofollow\">http://web.archive.org/web/20100504071154/http://www.facebook.com/</a></p>\n<p><code>waybackpy.near(\"https://www.facebook.com/\", year=2010, month=1, UA =\"Any-User-Agent\")</code> returns: <a href=\"http://web.archive.org/web/20101111173430/http://www.facebook.com//\" rel=\"nofollow\">http://web.archive.org/web/20101111173430/http://www.facebook.com//</a></p>\n<p><code>waybackpy.near(\"https://www.oracle.com/index.html\", year=2019, month=1, day=5, UA =\"Any-User-Agent\")</code> returns: <a href=\"http://web.archive.org/web/20190105054437/https://www.oracle.com/index.html\" rel=\"nofollow\">http://web.archive.org/web/20190105054437/https://www.oracle.com/index.html</a></p>\n<blockquote>\n<p>Please note that if you only specify the year, the current month and day are default arguments for month and day respectively. Do not expect just putting the year parameter would return the archive closer to January but the current month you are using the package. If you are using it in July 2018 and let's say you use <code>waybackpy.near(\"https://www.facebook.com/\", year=2011, UA =\"Any-User-Agent\")</code> then you would be returned the nearest archive to July 2011 and not January 2011. You need to specify the month \"1\" for January.</p>\n</blockquote>\n<blockquote>\n<p>Do not pad (don't use zeros in the month, year, day, minute, and hour arguments). e.g. For January, set month = 1 and not month = 01.</p>\n</blockquote>\n<h4>Get the content of webpage using get()</h4>\n<pre><span class=\"gi\">+ waybackpy.get(url, encoding=\"UTF-8\", UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandatory. UA is not, but highly recommended. encoding is detected automatically, don't specify unless necessary.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">waybackpy</span> <span class=\"kn\">import</span> <span class=\"n\">get</span>\n<span class=\"c1\"># retriving the webpage from any url including the archived urls. Don't need to import other libraies :)</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"c1\"># supported argumnets are url, encoding and UA</span>\n<span class=\"n\">webpage</span> <span class=\"o\">=</span> <span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"https://example.com/\"</span><span class=\"p\">,</span> <span class=\"n\">UA</span><span class=\"o\">=</span><span class=\"s2\">\"User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">webpage</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>This should print the source code for <a href=\"https://example.com/\" rel=\"nofollow\">https://example.com/</a>.</p>\n</blockquote>\n<h4>Count total archives for an URL using total_archives()</h4>\n<pre><span class=\"gi\">+ waybackpy.total_archives(url, UA=user_agent)</span>\n</pre>\n<blockquote>\n<p>url is mandatory. UA is not, but highly recommended.</p>\n</blockquote>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">waybackpy</span> <span class=\"kn\">import</span> <span class=\"n\">total_archives</span>\n<span class=\"c1\"># retriving the webpage from any url including the archived urls. Don't need to import other libraies :)</span>\n<span class=\"c1\"># Default user-agent (UA) is \"waybackpy python package\", if not specified in the call.</span>\n<span class=\"c1\"># supported argumnets are url and UA</span>\n<span class=\"n\">count</span> <span class=\"o\">=</span> <span class=\"n\">total_archives</span><span class=\"p\">(</span><span class=\"s2\">\"https://en.wikipedia.org/wiki/Python (programming language)\"</span><span class=\"p\">,</span> <span class=\"n\">UA</span><span class=\"o\">=</span><span class=\"s2\">\"User-Agent\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">count</span><span class=\"p\">)</span>\n</pre>\n<blockquote>\n<p>This should print an integer (int), which is the number of total archives on archive.org</p>\n</blockquote>\n<h2>Tests</h2>\n<ul>\n<li><a href=\"https://github.com/akamhy/waybackpy/tree/master/tests\" rel=\"nofollow\">Here</a></li>\n</ul>\n<h2>Dependency</h2>\n<ul>\n<li>None, just python standard libraries (json, urllib and datetime). Both python 2 and 3 are supported :)</li>\n</ul>\n<h2>License</h2>\n<p><a href=\"https://github.com/akamhy/waybackpy/blob/master/LICENSE\" rel=\"nofollow\">MIT License</a></p>\n\n          </div>"}, "last_serial": 7189155, "releases": {"1.3": [{"comment_text": "", "digests": {"md5": "9cd4220024deb23e5dfba67f8c968946", "sha256": "83d82de21ef1b26684038849ef44dfd6e3ee03b1e987c9b3753386a9e87ce5d2"}, "downloads": -1, "filename": "waybackpy-1.3.tar.gz", "has_sig": false, "md5_digest": "9cd4220024deb23e5dfba67f8c968946", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4988, "upload_time": "2020-05-05T06:00:54", "upload_time_iso_8601": "2020-05-05T06:00:54.716783Z", "url": "https://files.pythonhosted.org/packages/b9/4d/c8ea91b662927c65f0ee2c9e0245f70ca7293b7b061cc698fc1eb29b2120/waybackpy-1.3.tar.gz", "yanked": false}], "1.4": [{"comment_text": "", "digests": {"md5": "6e9ebcf1a552bd4dc17df2a00f417ae3", "sha256": "68c7b0d783267eb7e6750104c0b734783dc3fc6ee7a706d3ff2305e1611e76d7"}, "downloads": -1, "filename": "waybackpy-1.4.tar.gz", "has_sig": false, "md5_digest": "6e9ebcf1a552bd4dc17df2a00f417ae3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 5346, "upload_time": "2020-05-05T13:45:45", "upload_time_iso_8601": "2020-05-05T13:45:45.021141Z", "url": "https://files.pythonhosted.org/packages/c6/da/05161ba454a777ad0576768bd6bd5d55f65e9c0e69093bad28bfdd9f2bf6/waybackpy-1.4.tar.gz", "yanked": false}], "1.6": [{"comment_text": "", "digests": {"md5": "039e143875869e61c1c53875ac63921b", "sha256": "a412d180e74ffbc75a275de2728f70cb2d0b4e7f4458c2fc5b7366a5e4e4e507"}, "downloads": -1, "filename": "waybackpy-1.6.tar.gz", "has_sig": false, "md5_digest": "039e143875869e61c1c53875ac63921b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6449, "upload_time": "2020-05-07T14:48:34", "upload_time_iso_8601": "2020-05-07T14:48:34.450480Z", "url": "https://files.pythonhosted.org/packages/57/94/42c5bdfe032001c3a5e44171a87d63eb584dba4bb5ed9dc6327041e2b0f9/waybackpy-1.6.tar.gz", "yanked": false}], "v1.1": [{"comment_text": "", "digests": {"md5": "c50d051dd8da76af81fab21097b4c03c", "sha256": "4cf924c52c298b42ba5ad8bd7ba1d2f4deea6c07159cb2cd5ca28803b9b7f4b4"}, "downloads": -1, "filename": "waybackpy-v1.1.tar.gz", "has_sig": false, "md5_digest": "c50d051dd8da76af81fab21097b4c03c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2135, "upload_time": "2020-05-04T11:02:09", "upload_time_iso_8601": "2020-05-04T11:02:09.163566Z", "url": "https://files.pythonhosted.org/packages/3d/6d/966f5d74519cdf7ac698ec7ed37e2406fc69d0e70be9228fd72649a77db5/waybackpy-v1.1.tar.gz", "yanked": false}], "v1.2": [{"comment_text": "", "digests": {"md5": "6cc6cbc650eadb8c77c1ee4028791464", "sha256": "073dfa86dacbd26f887ce4f6ad32d18406de4682f37469c31fad8727db767bb6"}, "downloads": -1, "filename": "waybackpy-v1.2.tar.gz", "has_sig": false, "md5_digest": "6cc6cbc650eadb8c77c1ee4028791464", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4262, "upload_time": "2020-05-05T04:57:51", "upload_time_iso_8601": "2020-05-05T04:57:51.751847Z", "url": "https://files.pythonhosted.org/packages/fd/70/c2fdd29c9adedacdd99d6d2e0e7a5c23281b816e02f4990fb3ee5a9d4275/waybackpy-v1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "039e143875869e61c1c53875ac63921b", "sha256": "a412d180e74ffbc75a275de2728f70cb2d0b4e7f4458c2fc5b7366a5e4e4e507"}, "downloads": -1, "filename": "waybackpy-1.6.tar.gz", "has_sig": false, "md5_digest": "039e143875869e61c1c53875ac63921b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 6449, "upload_time": "2020-05-07T14:48:34", "upload_time_iso_8601": "2020-05-07T14:48:34.450480Z", "url": "https://files.pythonhosted.org/packages/57/94/42c5bdfe032001c3a5e44171a87d63eb584dba4bb5ed9dc6327041e2b0f9/waybackpy-1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:52 2020"}