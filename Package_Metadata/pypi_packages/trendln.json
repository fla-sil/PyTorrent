{"info": {"author": "Gregory Morse", "author_email": "gregory.morse@live.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# trendln\n\nSupport and Resistance Trend lines Calculator for Financial Analysis\n====================================================================\n\n[![PyPI - Python Version](https://img.shields.io/pypi/pyversions/trendln)](https://pypi.python.org/pypi/trendln)\n[![PyPI - Version](https://img.shields.io/pypi/v/trendln.svg?maxAge=60)](https://pypi.python.org/pypi/trendln)\n[![PyPI - Status](https://img.shields.io/pypi/status/trendln.svg?maxAge=60)](https://pypi.python.org/pypi/trendln)\n[![PyPI - Downloads](https://img.shields.io/pypi/dm/trendln.svg?maxAge=2592000&label=installs&color=%2327B1FF)](https://pypi.python.org/pypi/trendln)\n[![PyPI - License](https://img.shields.io/pypi/l/trendln)](https://pypi.python.org/pypi/trendln)\n[![PyPI - Implementation](https://img.shields.io/pypi/implementation/trendln)](https://pypi.python.org/pypi/trendln)\n[![Latest push build on default branch](https://travis-ci.com/GregoryMorse/trendln.svg?branch=master)](https://travis-ci.com/GregoryMorse/trendln)\n[![GitHub stars](https://img.shields.io/github/stars/GregoryMorse/trendln?style=social)](https://github.com/GregoryMorse/trendln)\n\nNote\n----\n\nThis library can calculate and plot trend lines for any time series, not only for its primary intended purpose of financial analysis.\n\n[Changelog \u00bb](./CHANGELOG.md)\n\n---\n\n==> Check out this article on [Programmatic Identification of Support/Resistance Trend lines with Python](https://towardsdatascience.com/programmatic-identification-of-support-resistance-trend-lines-with-python-d797a4a90530) or [alternatively here](https://medium.com/@gregory.morse1/programmatic-identification-of-support-resistance-trend-lines-with-python-d797a4a90530)\nfor details on how the library and its features are implemented and work.\n\n---\n\nQuick Start\n===========\n\nCalculation Only\n----------------\n\nThe **calc_support_resistance** function will calculate all support and\nresistance information including local extrema, average and their\ntrend lines using several different methods:\n\n\timport trendln\n\t# this will serve as an example for security or index closing prices, or low and high prices\n\timport yfinance as yf # requires yfinance - pip install yfinance\n\ttick = yf.Ticker('^GSPC') # S&P500\n\thist = tick.history(period=\"max\", rounding=True)\n\tmins, maxs = calc_support_resistance(hist[-1000:].Close)\n\tminimaIdxs, pmin, mintrend, minwindows = calc_support_resistance((hist[-1000:].Low, None)) #support only\n\tmins, maxs = calc_support_resistance((hist[-1000:].Low, hist[-1000:].High))\n\t(minimaIdxs, pmin, mintrend, minwindows), (maximaIdxs, pmax, maxtrend, maxwindows) = mins, maxs\n\n\t(minimaIdxs, pmin, mintrend, minwindows), (maximaIdxs, pmax, maxtrend, maxwindows) = \\\n\t\tcalc_support_resistance(\n\t\t# list/numpy ndarray/pandas Series of data as bool/int/float and if not a list also unsigned\n\t\t# or 2-tuple (support, resistance) where support and resistance are 1-dimensional array-like or one or the other is None\n\t\t# can calculate only support, only resistance, both for different data, or both for identical data\n\t\th,\n\n\t\t# METHOD_NAIVE - any local minima or maxima only for a single interval (currently requires pandas)\n\t\t# METHOD_NAIVECONSEC - any local minima or maxima including those for consecutive constant intervals (currently requires pandas)\n\t\t# METHOD_NUMDIFF (default) - numerical differentiation determined local minima or maxima (requires findiff)\n\t\textmethod = METHOD_NUMDIFF,\n\t\t\n\t\t# METHOD_NCUBED - simple exhuastive 3 point search (slowest)\n\t\t# METHOD_NSQUREDLOGN (default) - 2 point sorted slope search (fast)\n\t\t# METHOD_HOUGHPOINTS - Hough line transform optimized for points\n\t\t# METHOD_HOUGHLINES - image-based Hough line transform (requires scikit-image)\n\t\t# METHOD_PROBHOUGH - image-based Probabilistic Hough line transform (requires scikit-image)\n\t\tmethod=METHOD_NSQUREDLOGN,\n\t\t\n\t\t# window size when searching for trend lines prior to merging together\n\t\twindow=125,\n\t\t\n\t\t# maximum percentage slope standard error\n\t\terrpct = 0.005,\n\t\t\n\t\t# for all METHOD_*HOUGH*, the smallest unit increment for discretization e.g. cents/pennies 0.01\n\t\though_scale=0.01\n\t\t\n\t\t# only for METHOD_PROBHOUGH, number of iterations to run\n\t\though_prob_iter=10,\n\t\t\n\t\t# sort by area under wrong side of curve, otherwise sort by slope standard error\n\t\tsortError=False,\n\t\t\n\t\t# accuracy if using METHOD_NUMDIFF for example 5-point stencil is accuracy=3\n\t\taccuracy=1)\n\t# if h is a 2-tuple with one value as None, then a 2-tuple is not returned, but the appropriate tuple instead\n\t# minimaIdxs - sorted list of indexes to the local minima\n\t# pmin - [slope, intercept] of average best fit line through all local minima points\n\t# mintrend - sorted list containing (points, result) for local minima trend lines\n\t\t# points - list of indexes to points in trend line\n\t\t# result - (slope, intercept, SSR, slopeErr, interceptErr, areaAvg)\n\t\t\t# slope - slope of best fit trend line\n\t\t\t# intercept - y-intercept of best fit trend line\n\t\t\t# SSR - sum of squares due to regression\n\t\t\t# slopeErr - standard error of slope\n\t\t\t# interceptErr - standard error of intercept\n\t\t\t# areaAvg - Reimann sum area of difference between best fit trend line\n\t\t\t#   and actual data points averaged per time unit\n\t# minwindows - list of windows each containing mintrend for that window\n\t\n\t# maximaIdxs - sorted list of indexes to the local maxima\n\t# pmax - [slope, intercept] of average best fit line through all local maxima points\n\t# maxtrend - sorted list containing (points, result) for local maxima trend lines\n\t\t#see for mintrend above\n\t# maxwindows - list of windows each containing maxtrend for that window\n\nThe **get_extrema** function will calculate all of the local minima and local maxima\nwithout performing the full trend line calculation.\n\t\n\tminimaIdxs, maximaIdxs = get_extrema(hist[-1000:].Close)\n\tmaximaIdxs = get_extrema((None, hist[-1000:].High)) #maxima only\n\tminimaIdxs, maximaIdxs = get_extrema((hist[-1000:].Low, hist[-1000:].High))\n\t\n\tminimaIdxs, maximaIdxs = get_extrema(\n\t\th,\n\t\textmethod=METHOD_NUMDIFF,\n\t\taccuracy=1)\n\t# parameters and results are as per defined for calc_support_resistance\n\nPlotting Calculations\n---------------------\nThe **plot_support_resistance** function will calculate and plot the average\nand top 2 support and resistance lines, along with marking extrema used with\na maximum history length, and otherwise identical arguments to the\ncalculation function.\n\n\tfig = plot_support_resistance(hist[-1000:].Close) # requires matplotlib - pip install matplotlib\n\tplt.savefig('suppres.svg', format='svg')\n\tplt.show()\n\tplt.clf() #clear figure\n\t\n\tfig = plot_support_resistance(\n\t\thist, #as per h for calc_support_resistance\n\t\txformatter = None, #x-axis data formatter turning numeric indexes to display output\n\t\t  # e.g. ticker.FuncFormatter(func) otherwise just display numeric indexes\n\t\tnumbest = 2, #number of best support and best resistance lines to display\n\t\tfromwindows = True, #draw numbest best from each window, otherwise draw numbest across whole range\n\t\tpctbound = 0.1, # bound trend line based on this maximum percentage of the data range above the high or below the low\n\t\textmethod = METHOD_NUMDIFF,\n\t\tmethod=METHOD_NSQUREDLOGN,\n\t\twindow=125,\n\t\terrpct = 0.005,\n\t\though_prob_iter=10,\n\t\tsortError=False,\n\t\taccuracy=1)\n\t# other parameters as per calc_support_resistance\n\t# fig - returns matplotlib.pyplot.gcf() or the current figure\n\t\n\tfig = plot_sup_res_date((hist[-1000:].Low, hist[-1000:].High), hist[-1000:].index) #requires pandas\n\tplt.savefig('suppres.svg', format='svg')\n\tplt.show()\n\tplt.clf() #clear figure\n\t\n\tfig = plot_sup_res_date( #automatic date formatter based on US trading calendar\n\t\thist, #as per h for calc_support_resistance\n\t\tidx, #date index from pandas\n\t\tnumbest = 2,\n\t\tfromwindows = True,\n\t\tpctbound = 0.1,\n\t\textmethod = METHOD_NUMDIFF,\n\t\tmethod=METHOD_NSQUREDLOGN,\n\t\twindow=125,\n\t\terrpct = 0.005,\n\t\though_scale=0.01,\n\t\though_prob_iter=10,\n\t\tsortError=False,\n\t\taccuracy=1)\n\t# other parameters as per plot_support_resistance\n\t\n\tplot_sup_res_learn( #draw learning figures, included for reference material only\n\t\tcurdir, #base output directory for png and svg images, will be saved in 'data' subfolder\n\t\thist) #pandas DataFrame containing Close and date index\n\t\n![Example output of plotting support resistance](https://github.com/GregoryMorse/trendln/blob/master/img/suppres.svg)\n\nInstallation\n------------\n\nInstall ``trendln`` using ``pip``:\n\n    $ pip install trendln --upgrade --no-cache-dir\n\n\nInstall ``trendln`` using ``conda``:\n\n    $ conda install -c GregoryMorse trendln\n\nInstallation sanity check:\n\n\timport trendln\n\t#requires yfinance library install, not a package requirement, but used to assist with sanity check\n\t#pip install yfinance\n\tdirectory = '.' # a 'data' folder will be created here if not existing to store images\n\ttrendln.test_sup_res(directory) #simple tests that all methods are executing correct, assertion or other error indicates problem\n\nRequirements\n------------\n\n* [Python](https://www.python.org) >= 2.7, 3.4+\n* [numpy](http://www.numpy.org) >= 1.15\n* [findiff](https://github.com/maroba/findiff) >= 0.7.0 (if using default numerical differentiation method)\n* [scikit-image](https://scikit-image.org) >= 0.14.0 (if using image-based Hough line transform or its probabilistic variant)\n* [pandas](https://github.com/pydata/pandas) >= 0.23.1 (if using date plotting function, or using naive minima/maxima methods)\n* [matplotlib](https://matplotlib.org) >= 2.2.4 (if using any plotting function)\n\n\nLicense\n-------\n\n**trendln** is distributed under the **MIT License**. See the [LICENSE](./LICENSE) file in the release for details.\n\nSupport\n-------\n\nAny questions, issues or ideas can kindly be submitted for review.\n\n**Gregory Morse**\n<gregory.morse@live.com>", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/GregoryMorse/trendln", "keywords": "trendlines,trend lines,trend,support,resistance,trends,technical,indicators,financial,analysis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "trendln", "package_url": "https://pypi.org/project/trendln/", "platform": "any", "project_url": "https://pypi.org/project/trendln/", "project_urls": {"Homepage": "https://github.com/GregoryMorse/trendln"}, "release_url": "https://pypi.org/project/trendln/0.1.10/", "requires_dist": null, "requires_python": "", "summary": "Support and Resistance Trend lines Calculator for Financial Analysis", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>trendln</h1>\n<h1>Support and Resistance Trend lines Calculator for Financial Analysis</h1>\n<p><a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04de898cbed83fa3c7dec10c4c9f1b82e870c5a5/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7472656e646c6e\"></a>\n<a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/75717a35378300067353c19415b9a8e90b35075b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7472656e646c6e2e7376673f6d61784167653d3630\"></a>\n<a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89906c09dc475e4f7580b47a0b8f1ae260e7e4f3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f7472656e646c6e2e7376673f6d61784167653d3630\"></a>\n<a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5d7a53c6623625e59e8d69bb84443d0c37f27395/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f7472656e646c6e2e7376673f6d61784167653d32353932303030266c6162656c3d696e7374616c6c7326636f6c6f723d253233323742314646\"></a>\n<a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d9e6e0d866dffc4fe37a493f6db58cedf2244b1c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f7472656e646c6e\"></a>\n<a href=\"https://pypi.python.org/pypi/trendln\" rel=\"nofollow\"><img alt=\"PyPI - Implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8b92c435f94b4e938113bc7eafa816ea17fffeaf/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f7472656e646c6e\"></a>\n<a href=\"https://travis-ci.com/GregoryMorse/trendln\" rel=\"nofollow\"><img alt=\"Latest push build on default branch\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/87ed130823a12aeca7217e85f0a15113d97244f0/68747470733a2f2f7472617669732d63692e636f6d2f477265676f72794d6f7273652f7472656e646c6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/GregoryMorse/trendln\" rel=\"nofollow\"><img alt=\"GitHub stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05c351527cc392c8a4abe1a234e845083f2409fe/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f477265676f72794d6f7273652f7472656e646c6e3f7374796c653d736f6369616c\"></a></p>\n<h2>Note</h2>\n<p>This library can calculate and plot trend lines for any time series, not only for its primary intended purpose of financial analysis.</p>\n<p><a href=\"./CHANGELOG.md\" rel=\"nofollow\">Changelog \u00bb</a></p>\n<hr>\n<p>==&gt; Check out this article on <a href=\"https://towardsdatascience.com/programmatic-identification-of-support-resistance-trend-lines-with-python-d797a4a90530\" rel=\"nofollow\">Programmatic Identification of Support/Resistance Trend lines with Python</a> or <a href=\"https://medium.com/@gregory.morse1/programmatic-identification-of-support-resistance-trend-lines-with-python-d797a4a90530\" rel=\"nofollow\">alternatively here</a>\nfor details on how the library and its features are implemented and work.</p>\n<hr>\n<h1>Quick Start</h1>\n<h2>Calculation Only</h2>\n<p>The <strong>calc_support_resistance</strong> function will calculate all support and\nresistance information including local extrema, average and their\ntrend lines using several different methods:</p>\n<pre><code>import trendln\n# this will serve as an example for security or index closing prices, or low and high prices\nimport yfinance as yf # requires yfinance - pip install yfinance\ntick = yf.Ticker('^GSPC') # S&amp;P500\nhist = tick.history(period=\"max\", rounding=True)\nmins, maxs = calc_support_resistance(hist[-1000:].Close)\nminimaIdxs, pmin, mintrend, minwindows = calc_support_resistance((hist[-1000:].Low, None)) #support only\nmins, maxs = calc_support_resistance((hist[-1000:].Low, hist[-1000:].High))\n(minimaIdxs, pmin, mintrend, minwindows), (maximaIdxs, pmax, maxtrend, maxwindows) = mins, maxs\n\n(minimaIdxs, pmin, mintrend, minwindows), (maximaIdxs, pmax, maxtrend, maxwindows) = \\\n\tcalc_support_resistance(\n\t# list/numpy ndarray/pandas Series of data as bool/int/float and if not a list also unsigned\n\t# or 2-tuple (support, resistance) where support and resistance are 1-dimensional array-like or one or the other is None\n\t# can calculate only support, only resistance, both for different data, or both for identical data\n\th,\n\n\t# METHOD_NAIVE - any local minima or maxima only for a single interval (currently requires pandas)\n\t# METHOD_NAIVECONSEC - any local minima or maxima including those for consecutive constant intervals (currently requires pandas)\n\t# METHOD_NUMDIFF (default) - numerical differentiation determined local minima or maxima (requires findiff)\n\textmethod = METHOD_NUMDIFF,\n\t\n\t# METHOD_NCUBED - simple exhuastive 3 point search (slowest)\n\t# METHOD_NSQUREDLOGN (default) - 2 point sorted slope search (fast)\n\t# METHOD_HOUGHPOINTS - Hough line transform optimized for points\n\t# METHOD_HOUGHLINES - image-based Hough line transform (requires scikit-image)\n\t# METHOD_PROBHOUGH - image-based Probabilistic Hough line transform (requires scikit-image)\n\tmethod=METHOD_NSQUREDLOGN,\n\t\n\t# window size when searching for trend lines prior to merging together\n\twindow=125,\n\t\n\t# maximum percentage slope standard error\n\terrpct = 0.005,\n\t\n\t# for all METHOD_*HOUGH*, the smallest unit increment for discretization e.g. cents/pennies 0.01\n\though_scale=0.01\n\t\n\t# only for METHOD_PROBHOUGH, number of iterations to run\n\though_prob_iter=10,\n\t\n\t# sort by area under wrong side of curve, otherwise sort by slope standard error\n\tsortError=False,\n\t\n\t# accuracy if using METHOD_NUMDIFF for example 5-point stencil is accuracy=3\n\taccuracy=1)\n# if h is a 2-tuple with one value as None, then a 2-tuple is not returned, but the appropriate tuple instead\n# minimaIdxs - sorted list of indexes to the local minima\n# pmin - [slope, intercept] of average best fit line through all local minima points\n# mintrend - sorted list containing (points, result) for local minima trend lines\n\t# points - list of indexes to points in trend line\n\t# result - (slope, intercept, SSR, slopeErr, interceptErr, areaAvg)\n\t\t# slope - slope of best fit trend line\n\t\t# intercept - y-intercept of best fit trend line\n\t\t# SSR - sum of squares due to regression\n\t\t# slopeErr - standard error of slope\n\t\t# interceptErr - standard error of intercept\n\t\t# areaAvg - Reimann sum area of difference between best fit trend line\n\t\t#   and actual data points averaged per time unit\n# minwindows - list of windows each containing mintrend for that window\n\n# maximaIdxs - sorted list of indexes to the local maxima\n# pmax - [slope, intercept] of average best fit line through all local maxima points\n# maxtrend - sorted list containing (points, result) for local maxima trend lines\n\t#see for mintrend above\n# maxwindows - list of windows each containing maxtrend for that window\n</code></pre>\n<p>The <strong>get_extrema</strong> function will calculate all of the local minima and local maxima\nwithout performing the full trend line calculation.</p>\n<pre><code>minimaIdxs, maximaIdxs = get_extrema(hist[-1000:].Close)\nmaximaIdxs = get_extrema((None, hist[-1000:].High)) #maxima only\nminimaIdxs, maximaIdxs = get_extrema((hist[-1000:].Low, hist[-1000:].High))\n\nminimaIdxs, maximaIdxs = get_extrema(\n\th,\n\textmethod=METHOD_NUMDIFF,\n\taccuracy=1)\n# parameters and results are as per defined for calc_support_resistance\n</code></pre>\n<h2>Plotting Calculations</h2>\n<p>The <strong>plot_support_resistance</strong> function will calculate and plot the average\nand top 2 support and resistance lines, along with marking extrema used with\na maximum history length, and otherwise identical arguments to the\ncalculation function.</p>\n<pre><code>fig = plot_support_resistance(hist[-1000:].Close) # requires matplotlib - pip install matplotlib\nplt.savefig('suppres.svg', format='svg')\nplt.show()\nplt.clf() #clear figure\n\nfig = plot_support_resistance(\n\thist, #as per h for calc_support_resistance\n\txformatter = None, #x-axis data formatter turning numeric indexes to display output\n\t  # e.g. ticker.FuncFormatter(func) otherwise just display numeric indexes\n\tnumbest = 2, #number of best support and best resistance lines to display\n\tfromwindows = True, #draw numbest best from each window, otherwise draw numbest across whole range\n\tpctbound = 0.1, # bound trend line based on this maximum percentage of the data range above the high or below the low\n\textmethod = METHOD_NUMDIFF,\n\tmethod=METHOD_NSQUREDLOGN,\n\twindow=125,\n\terrpct = 0.005,\n\though_prob_iter=10,\n\tsortError=False,\n\taccuracy=1)\n# other parameters as per calc_support_resistance\n# fig - returns matplotlib.pyplot.gcf() or the current figure\n\nfig = plot_sup_res_date((hist[-1000:].Low, hist[-1000:].High), hist[-1000:].index) #requires pandas\nplt.savefig('suppres.svg', format='svg')\nplt.show()\nplt.clf() #clear figure\n\nfig = plot_sup_res_date( #automatic date formatter based on US trading calendar\n\thist, #as per h for calc_support_resistance\n\tidx, #date index from pandas\n\tnumbest = 2,\n\tfromwindows = True,\n\tpctbound = 0.1,\n\textmethod = METHOD_NUMDIFF,\n\tmethod=METHOD_NSQUREDLOGN,\n\twindow=125,\n\terrpct = 0.005,\n\though_scale=0.01,\n\though_prob_iter=10,\n\tsortError=False,\n\taccuracy=1)\n# other parameters as per plot_support_resistance\n\nplot_sup_res_learn( #draw learning figures, included for reference material only\n\tcurdir, #base output directory for png and svg images, will be saved in 'data' subfolder\n\thist) #pandas DataFrame containing Close and date index\n</code></pre>\n<p><img alt=\"Example output of plotting support resistance\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4385c729fd38818d64506c90475f992ea20906f5/68747470733a2f2f6769746875622e636f6d2f477265676f72794d6f7273652f7472656e646c6e2f626c6f622f6d61737465722f696d672f737570707265732e737667\"></p>\n<h2>Installation</h2>\n<p>Install <code>trendln</code> using <code>pip</code>:</p>\n<pre><code>$ pip install trendln --upgrade --no-cache-dir\n</code></pre>\n<p>Install <code>trendln</code> using <code>conda</code>:</p>\n<pre><code>$ conda install -c GregoryMorse trendln\n</code></pre>\n<p>Installation sanity check:</p>\n<pre><code>import trendln\n#requires yfinance library install, not a package requirement, but used to assist with sanity check\n#pip install yfinance\ndirectory = '.' # a 'data' folder will be created here if not existing to store images\ntrendln.test_sup_res(directory) #simple tests that all methods are executing correct, assertion or other error indicates problem\n</code></pre>\n<h2>Requirements</h2>\n<ul>\n<li><a href=\"https://www.python.org\" rel=\"nofollow\">Python</a> &gt;= 2.7, 3.4+</li>\n<li><a href=\"http://www.numpy.org\" rel=\"nofollow\">numpy</a> &gt;= 1.15</li>\n<li><a href=\"https://github.com/maroba/findiff\" rel=\"nofollow\">findiff</a> &gt;= 0.7.0 (if using default numerical differentiation method)</li>\n<li><a href=\"https://scikit-image.org\" rel=\"nofollow\">scikit-image</a> &gt;= 0.14.0 (if using image-based Hough line transform or its probabilistic variant)</li>\n<li><a href=\"https://github.com/pydata/pandas\" rel=\"nofollow\">pandas</a> &gt;= 0.23.1 (if using date plotting function, or using naive minima/maxima methods)</li>\n<li><a href=\"https://matplotlib.org\" rel=\"nofollow\">matplotlib</a> &gt;= 2.2.4 (if using any plotting function)</li>\n</ul>\n<h2>License</h2>\n<p><strong>trendln</strong> is distributed under the <strong>MIT License</strong>. See the <a href=\"./LICENSE\" rel=\"nofollow\">LICENSE</a> file in the release for details.</p>\n<h2>Support</h2>\n<p>Any questions, issues or ideas can kindly be submitted for review.</p>\n<p><strong>Gregory Morse</strong>\n<a href=\"mailto:gregory.morse@live.com\">gregory.morse@live.com</a></p>\n\n          </div>"}, "last_serial": 6172563, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "993c121670d34fe2209786b5e58b6008", "sha256": "ccd32c897b028845f05a1bc189b72f85f01c29a842dd25ab0bfa5b3d5b80f85f"}, "downloads": -1, "filename": "trendln-0.1.10.tar.gz", "has_sig": false, "md5_digest": "993c121670d34fe2209786b5e58b6008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23615, "upload_time": "2019-11-21T02:03:11", "upload_time_iso_8601": "2019-11-21T02:03:11.367792Z", "url": "https://files.pythonhosted.org/packages/f0/24/2d102e8a8173c019f8d2efc2f24e9f33ed6ec7509cbe0d1076feedf26416/trendln-0.1.10.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "74e0b4fe6479d46df39667cacd080af4", "sha256": "e2131c5e724258597f828e3210084d41f8eeedc38b462c8a33c9fbb772935f06"}, "downloads": -1, "filename": "trendln-0.1.8.tar.gz", "has_sig": false, "md5_digest": "74e0b4fe6479d46df39667cacd080af4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20498, "upload_time": "2019-10-14T09:05:35", "upload_time_iso_8601": "2019-10-14T09:05:35.364259Z", "url": "https://files.pythonhosted.org/packages/fd/fa/f27aaf83119a7e76e099972e94979ba58860b6ad917bf16ebeee465f0b6b/trendln-0.1.8.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "993c121670d34fe2209786b5e58b6008", "sha256": "ccd32c897b028845f05a1bc189b72f85f01c29a842dd25ab0bfa5b3d5b80f85f"}, "downloads": -1, "filename": "trendln-0.1.10.tar.gz", "has_sig": false, "md5_digest": "993c121670d34fe2209786b5e58b6008", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23615, "upload_time": "2019-11-21T02:03:11", "upload_time_iso_8601": "2019-11-21T02:03:11.367792Z", "url": "https://files.pythonhosted.org/packages/f0/24/2d102e8a8173c019f8d2efc2f24e9f33ed6ec7509cbe0d1076feedf26416/trendln-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:26 2020"}