{"info": {"author": "Steinwurf ApS", "author_email": "contact@steinwurf.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Plugins", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Software Development", "Topic :: Software Development :: Testing"], "description": "===================\npytest-datarecorder\n===================\n\n.. image:: https://travis-ci.org/steinwurf/pytest-datarecorder.svg?branch=master\n    :target: https://travis-ci.org/steinwurf/pytest-datarecorder\n\nTesting code that generates output can be tedious to maintain\n ``pytest-datarecorder`` aims to simplify this task.\n\n.. contents:: Table of Contents:\n   :local:\n\nInstallation\n============\n\nTo install pytest-datarecorder::\n\n    pip install pytest-datarecorder\n\nUsage\n=====\n\nTo make it easy to use in with py.test the DataRecorder object can be\ninjected into a test function by using the datarecorder fixture.\n\nExample::\n\n    def test_this_function(datarecorder):\n\n        datarecorder.record_data(\n            data={'a':1, 'b':2}, recording_file=\"test/data/recording.json\")\n\nThe ``data`` passed will be serialized to JSON since the recording file\nhas a ``.json`` extension. If ``data`` changes, we will get an exception\ncontaining a diff with what changed. If we want to accept the changes\nwe simply delete the recording and run the code again.\n\nRelase new version\n==================\n\n1. Edit NEWS.rst and wscript (set correct VERSION)\n2. Run ::\n\n    ./waf upload\n\nSource code\n===========\n\nThe main functionality is found in ``src/datarecorder.py`` and the\ncorresponding unit test is in ``test/test_datarecorder.py`` if you\nwant to play/modify/fix the code this would, in most cases, be the place\nto start.\n\nDeveloper Notes\n===============\n\nWe try to make our projects as independent as possible of a local system setup.\nFor example with our native code (C/C++) we compile as much as possible from\nsource, since this makes us independent of what is currently installed\n(libraries etc.) on a specific machine.\n\nTo \"fetch\" sources we use Waf (https://waf.io/) augmented with dependency\nresolution capabilities: https://github.com/steinwurf/waf\n\nThe goal is to enable a work-flow where running::\n\n    ./waf configure\n    ./waf build --run_tests\n\nConfigures, builds and runs any available tests for a given project, such that\nyou as a developer can start hacking at the code.\n\nFor Python project this is a bit unconventional, but we think it works well.\n\nTests\n=====\n\nThe tests will run automatically by passing ``--run_tests`` to waf::\n\n    ./waf --run_tests\n\nThis follows what seems to be \"best practice\" advise, namely to install the\npackage in editable mode in a virtualenv.\n\nNotes\n=====\n\n* Why use an ``src`` folder (https://hynek.me/articles/testing-packaging/).\n  tl;dr you should run your tests in the same environment as your users would\n  run your code. So by placing the source files in a non-importable folder you\n  avoid accidentally having access to resources not added to the Python\n  package your users will install...\n* Python packaging guide: https://packaging.python.org/distributing/\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/steinwurf/pytest-datarecorder", "keywords": "pytest py.test testing unit tests plugin", "license": "BSD 3-clause \"New\" or \"Revised\" License", "maintainer": "", "maintainer_email": "", "name": "pytest-datarecorder", "package_url": "https://pypi.org/project/pytest-datarecorder/", "platform": "", "project_url": "https://pypi.org/project/pytest-datarecorder/", "project_urls": {"Homepage": "https://github.com/steinwurf/pytest-datarecorder"}, "release_url": "https://pypi.org/project/pytest-datarecorder/1.3.0/", "requires_dist": ["pytest"], "requires_python": "", "summary": "A py.test plugin recording and comparing test output.", "version": "1.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/steinwurf/pytest-datarecorder\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/steinwurf/pytest-datarecorder.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8632ef97fd5f391b85413ae22d3abf199378626/68747470733a2f2f7472617669732d63692e6f72672f737465696e777572662f7079746573742d646174617265636f726465722e7376673f6272616e63683d6d6173746572\"></a>\n<dl>\n<dt>Testing code that generates output can be tedious to maintain</dt>\n<dd><tt><span class=\"pre\">pytest-datarecorder</span></tt> aims to simplify this task.</dd>\n</dl>\n<div id=\"table-of-contents\">\n<p>Table of Contents:</p>\n<ul>\n<li><a href=\"#installation\" id=\"id1\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#usage\" id=\"id2\" rel=\"nofollow\">Usage</a></li>\n<li><a href=\"#relase-new-version\" id=\"id3\" rel=\"nofollow\">Relase new version</a></li>\n<li><a href=\"#source-code\" id=\"id4\" rel=\"nofollow\">Source code</a></li>\n<li><a href=\"#developer-notes\" id=\"id5\" rel=\"nofollow\">Developer Notes</a></li>\n<li><a href=\"#tests\" id=\"id6\" rel=\"nofollow\">Tests</a></li>\n<li><a href=\"#notes\" id=\"id7\" rel=\"nofollow\">Notes</a></li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2><a href=\"#id1\" rel=\"nofollow\">Installation</a></h2>\n<p>To install pytest-datarecorder:</p>\n<pre>pip install pytest-datarecorder\n</pre>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id2\" rel=\"nofollow\">Usage</a></h2>\n<p>To make it easy to use in with py.test the DataRecorder object can be\ninjected into a test function by using the datarecorder fixture.</p>\n<p>Example:</p>\n<pre>def test_this_function(datarecorder):\n\n    datarecorder.record_data(\n        data={'a':1, 'b':2}, recording_file=\"test/data/recording.json\")\n</pre>\n<p>The <tt>data</tt> passed will be serialized to JSON since the recording file\nhas a <tt>.json</tt> extension. If <tt>data</tt> changes, we will get an exception\ncontaining a diff with what changed. If we want to accept the changes\nwe simply delete the recording and run the code again.</p>\n</div>\n<div id=\"relase-new-version\">\n<h2><a href=\"#id3\" rel=\"nofollow\">Relase new version</a></h2>\n<ol>\n<li><p>Edit NEWS.rst and wscript (set correct VERSION)</p>\n</li>\n<li><p>Run</p>\n<pre>./waf upload\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"source-code\">\n<h2><a href=\"#id4\" rel=\"nofollow\">Source code</a></h2>\n<p>The main functionality is found in <tt>src/datarecorder.py</tt> and the\ncorresponding unit test is in <tt>test/test_datarecorder.py</tt> if you\nwant to play/modify/fix the code this would, in most cases, be the place\nto start.</p>\n</div>\n<div id=\"developer-notes\">\n<h2><a href=\"#id5\" rel=\"nofollow\">Developer Notes</a></h2>\n<p>We try to make our projects as independent as possible of a local system setup.\nFor example with our native code (C/C++) we compile as much as possible from\nsource, since this makes us independent of what is currently installed\n(libraries etc.) on a specific machine.</p>\n<p>To \u201cfetch\u201d sources we use Waf (<a href=\"https://waf.io/\" rel=\"nofollow\">https://waf.io/</a>) augmented with dependency\nresolution capabilities: <a href=\"https://github.com/steinwurf/waf\" rel=\"nofollow\">https://github.com/steinwurf/waf</a></p>\n<p>The goal is to enable a work-flow where running:</p>\n<pre>./waf configure\n./waf build --run_tests\n</pre>\n<p>Configures, builds and runs any available tests for a given project, such that\nyou as a developer can start hacking at the code.</p>\n<p>For Python project this is a bit unconventional, but we think it works well.</p>\n</div>\n<div id=\"tests\">\n<h2><a href=\"#id6\" rel=\"nofollow\">Tests</a></h2>\n<p>The tests will run automatically by passing <tt><span class=\"pre\">--run_tests</span></tt> to waf:</p>\n<pre>./waf --run_tests\n</pre>\n<p>This follows what seems to be \u201cbest practice\u201d advise, namely to install the\npackage in editable mode in a virtualenv.</p>\n</div>\n<div id=\"notes\">\n<h2><a href=\"#id7\" rel=\"nofollow\">Notes</a></h2>\n<ul>\n<li>Why use an <tt>src</tt> folder (<a href=\"https://hynek.me/articles/testing-packaging/\" rel=\"nofollow\">https://hynek.me/articles/testing-packaging/</a>).\ntl;dr you should run your tests in the same environment as your users would\nrun your code. So by placing the source files in a non-importable folder you\navoid accidentally having access to resources not added to the Python\npackage your users will install\u2026</li>\n<li>Python packaging guide: <a href=\"https://packaging.python.org/distributing/\" rel=\"nofollow\">https://packaging.python.org/distributing/</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7063406, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "4c643fc1ccc2b738dbf4d25d6b829509", "sha256": "0498f7e9e42b8901490539253cfa5c047578166b3bd015b60368fa98b8ab91b0"}, "downloads": -1, "filename": "pytest_datarecorder-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "4c643fc1ccc2b738dbf4d25d6b829509", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6718, "upload_time": "2020-01-22T12:28:56", "upload_time_iso_8601": "2020-01-22T12:28:56.717262Z", "url": "https://files.pythonhosted.org/packages/d8/ce/1dc6ef188dd8f1788c5a350abf1c1289d0e3259c45eea9f49caabd99688d/pytest_datarecorder-1.0.1-py2.py3-none-any.whl", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "8ee8c0391838cc272da18a8e7176fe4b", "sha256": "7775ff6c5ca7eddaa233cf0b70e212f1e8f539c21c8593a322102c8b72b4c9d5"}, "downloads": -1, "filename": "pytest_datarecorder-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8ee8c0391838cc272da18a8e7176fe4b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6721, "upload_time": "2020-01-24T09:40:19", "upload_time_iso_8601": "2020-01-24T09:40:19.061849Z", "url": "https://files.pythonhosted.org/packages/09/21/3c55365ee4deed3f24c4c4abf12f9cadad323c45907a864a63035aa4b6e9/pytest_datarecorder-1.1.0-py2.py3-none-any.whl", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "15fca4c38bea3e6b9fe42601a51188b3", "sha256": "526524880ffccce78f1fc4b082c4fa64c60d5e528750b45df93c1bae9c1ad69c"}, "downloads": -1, "filename": "pytest_datarecorder-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15fca4c38bea3e6b9fe42601a51188b3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6815, "upload_time": "2020-01-25T20:55:30", "upload_time_iso_8601": "2020-01-25T20:55:30.365198Z", "url": "https://files.pythonhosted.org/packages/56/2e/1ca8c0129ed532b8f8b3e53f04ad071d636f5ad7410bc7dca1be8f9c037b/pytest_datarecorder-1.2.0-py2.py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "0e1c7d0cd209221851131fec24c26229", "sha256": "db45ac920fa58d661517270d79e0f0ed6cd988a182d8eaeb52ab701a7b629148"}, "downloads": -1, "filename": "pytest_datarecorder-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e1c7d0cd209221851131fec24c26229", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6914, "upload_time": "2020-04-20T21:04:04", "upload_time_iso_8601": "2020-04-20T21:04:04.848909Z", "url": "https://files.pythonhosted.org/packages/30/73/ccce3a76a0be816f556bce34c072cb14f1eb70853af3408efd837f401f3a/pytest_datarecorder-1.3.0-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0e1c7d0cd209221851131fec24c26229", "sha256": "db45ac920fa58d661517270d79e0f0ed6cd988a182d8eaeb52ab701a7b629148"}, "downloads": -1, "filename": "pytest_datarecorder-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0e1c7d0cd209221851131fec24c26229", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6914, "upload_time": "2020-04-20T21:04:04", "upload_time_iso_8601": "2020-04-20T21:04:04.848909Z", "url": "https://files.pythonhosted.org/packages/30/73/ccce3a76a0be816f556bce34c072cb14f1eb70853af3408efd837f401f3a/pytest_datarecorder-1.3.0-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 02:55:17 2020"}