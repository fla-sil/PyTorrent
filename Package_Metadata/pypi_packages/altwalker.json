{"info": {"author": "Altom Consulting", "author_email": "altwalker@altom.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: C#", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Testing"], "description": "# AltWalker\n\nAltWalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.\n\nRead the documentation on https://altom.gitlab.io/altwalker/altwalker.\n\n## Table of Contents\n\n* [Overview](#overview)\n* [Installation](#installation)\n* [Quickstart](#quickstart)\n* [Setting Up a Development Environment](#setting-up-a-development-environment)\n* [Support](#support)\n* [License](#license)\n\n## Overview\n\nAltWalker is an open source, Model-Based testing framework for automating your test execution. You\ndesign your tests as a directed graph and AltWalker executes them. It relies on\n[GraphWalker](http://graphwalker.github.io/) to generate paths through your graph.\n\n### Model-Based Testing\n\n[Model-Based Testing](https://en.wikipedia.org/wiki/Model-based_testing) is a testing\ntechnique which offers a way of generating test cases based on models that describe the behaviour\n(functionality) of the system under test.\n\nThe goal when designing models is to represent the part of the system under test, usually\nby one model for each functionality of your system.\n\nWith the help of graph theory we can dynamically generate multiple test scripts. A test script is a path passing through the model from a starting point till\na condition is met.\n\nWhy use Model-Based Testing:\n\n* the abstraction layer added by the model gives your tests a better structure\n* the model can be updated to reflect the requirements changes making the tests easy to maintain\n* dynamically generates multiple test scripts based on different conditions (like coverage or length)\n* allows for a large number of tests to be created which results in a larger part of the system under test to be covered.\n\n### AltWalker\n\nAltWalker is a test execution tool, which  aims to make it easy to write and run your model-based tests. AltWalker uses GraphWalker to generate a path through the models.\n\nFor the test structure it uses an Object-Oriented approach inspired by python's `unittest` module. Every model is mapped to a class with the same name and each vertex and edge from the model is mapped to a method inside the class.\n\nAltWalker also borrows the concept of test fixture from unit tests, and implements the following fixtures:\n`setUpRun`, `tearDownRun`, `setUpModel` and `tearDownModel`.\n\nNow it supports running tests written in .NET/C# and Python3.\n\n### AltWalker Components\n\nAltWalker has the following components:\n\n* __Model__: a directed graph, supplied by the user as a json or graphml file.\n    A graph is composed from a list of vertices and a list of edges.\n\n* __Generator__ and __Stop Condition__: used to specify how to generate a\n    path and to decide when a path is complete.\n\n* __Test Code__: the implementation of the model(s) as code. Each model is mapped to a\n    class and each vertex and edge is mapped to a method.\n\n* __Planner__: uses the _model(s)_ and a pair of _generator_ and _stop condition_\n    to provide a path (a sequence of steps) through the model(s).\n\n    Currently AltWalker provides two planners:\n\n    * Online Planner\n    * Offline Planner\n\n* __Reporter__: reports the output of the tests, the reporter is called on\n    each event (e.g. `step_start`, `step_end`, ...).\n\n* __Executor__: for each step in the plan it looks up and calls the named method\n    from the _test code_. In addition to the step methods, it also calls\n    fixture methods if present (e.g. `setUpModel`, `tearDownModel` ...).\n\n    Currently AltWalker provides three executors:\n\n    * Python Executor\n    * .NET Executor\n\n    And an __Http Executor__ that allows you to hook up your own executor via HTTP. You can read\n    more about the Http Executor on the [How to: Write your own executor](https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html)\n    page.\n\n* __Walker__: the test runner. Coordinates the execution of a test asking the `Planner`\n    for the next step, executing the step using the `Executor` and reporting the progress\n    using the `Reporter`.\n\n\nThere are two ways to run your tests:\n\n* __Online Mode__ (using the Online Planner): Generate one step and then execute\n    the step, until the path is complete.\n\n* __Offline Mode__ (using the Offline Planner): Run a path from a sequence of steps.\n    Usually the path is generated using the `offline` command.\n\n## Installation\n\nPrerequisites:\n\n* [Python3](https://www.python.org/) (with pip3)\n* [Java 8](https://openjdk.java.net/)\n* [GraphWalker CLI](http://graphwalker.github.io/)\n* [.NET Core](Optional) (Optional)\n* [git](https://git-scm.com/) (Optional)\n\n### Install GraphWalker\n\n* MacOS/Linux:\n\n```bash\n$ wget https://github.com/GraphWalker/graphwalker-project/releases/download/4.0.1/graphwalker-cli-4.0.1.jar && \\\n  mkdir -p ~/graphwalker && \\\n  mv graphwalker-cli-4.0.1.jar ~/graphwalker/ && \\\n  echo -e '#!/bin/bash\\njava -jar ~/graphwalker/graphwalker-cli-4.0.1.jar \"$@\"' > ~/graphwalker/graphwalker-cli.sh && \\\n  chmod +x ~/graphwalker/graphwalker-cli.sh && \\\n  ln -s ~/graphwalker/graphwalker-cli.sh /usr/local/bin/gw\n```\n\n* Windows:\n\n```\n$ setx PATH \"%PATH%;C:\\graphwalker\" & :: Adds graphwalker to current user PATH\n  cd C:\\\n  mkdir graphwalker\n  cd graphwalker\n  powershell -Command \"[Net.ServicePointManager]::SecurityProtocol = 'tls12'; Invoke-WebRequest -Uri 'https://github.com/GraphWalker/graphwalker-project/releases/download/4.0.1/graphwalker-cli-4.0.1.jar' -outfile 'graphwalker-cli-4.0.1.jar'\" & :: Downloads graphwalker using powershell command Invoke-Request\n  @echo off\n  @echo @echo off> gw.bat\n  @echo java -jar C:\\graphwalker\\graphwalker-cli-4.0.1.jar %*>> gw.bat\n  @echo on\n```\n\nAfter running the command check that you correctly installed GraphWalker by running:\n\n```\n$ gw --version\n```\n\n### Install AltWalker\n\nUse the following command to install AltWalker:\n\n```\n$ pip3 install altwalker\n```\n\nAltWalker is now installed. Check that you correctly installed AltWalker by running:\n\n```\n$ altwalker --version\n```\n\n#### Living on the edge\n\nIf you want to work with the latest code before it\u2019s released, install or update the code from the `develop` branch:\n\n```\n$ pip3 install -U git+https://gitlab.com/altom/altwalker/altwalker\n```\n\nFor a more detailed tutorial read the [Installation](https://altom.gitlab.io/altwalker/altwalker/installation.html) section from the documentation.\n\n## Quickstart\n\nMake a sample project and run the tests.\n\n```\n$ altwalker init test-project -l python\n$ cd test-project\n$ altwalker online tests -m models/default.json \"random(vertex_coverage(100))\"\nRunning:\n[2019-08-06 16:28:44.030077] ModelName.vertex_A Running\n[2019-08-06 16:28:44.030940] ModelName.vertex_A Status: PASSED\n\n[2019-08-06 16:28:44.048492] ModelName.edge_A Running\n[2019-08-06 16:28:44.048729] ModelName.edge_A Status: PASSED\n\n[2019-08-06 16:28:44.064495] ModelName.vertex_B Running\n[2019-08-06 16:28:44.064746] ModelName.vertex_B Status: PASSED\n\nStatistics:\n\n  Model Coverage..................100%\n  Number of Models...................1\n  Completed Models...................1\n  Failed Models......................0\n  Incomplete Models..................0\n  Not Executed Models................0\n\n  Edge Coverage...................100%\n  Number of Edges....................1\n  Visited Edges......................1\n  Unvisited Edges....................0\n\n  Vertex Coverage.................100%\n  Number of Vertices.................2\n  Visited Vertices...................2\n  Unvisited Vertices.................0\n\nStatus:  PASS\n```\n\n## Setting Up a Development Environment\n\nClone the repository:\n\n```\n$ git clone https://gitlab.com/altom/altwalker/altwalker/\n$ cd altwalker\n```\n\nInstall python dependencies:\n\n```\n$ pip3 install -r requirements.txt && \\\n  pip3 install -r requirements-dev.txt\n```\n\n### Running Tests\n\n```\n$ pytest tests -s -v\n```\n\n#### Running tests with tox inside docker\n\n```\n$ docker run  -it --rm -v \"$(pwd):/altwalker\" -w \"/altwalker\" robert96/graphwalker-cli:tox tox\n```\n\n### CLI\n\nAfter you install the python dependencies to setup AltWalker CLI locally from code run:\n\n```\n$ pip3 install --editable .\n```\n\nThen from any command line you can access:\n\n```\n$ altwalker --help\n```\n\n### Documentation\n\nAfter you install the python dependencies to generate the documentation run:\n\n```\n$ cd docs && \\\n  make clean && \\\n  make html\n```\n\nTo see the documentation run:\n\n```\n$ open _build/html/index.html\n```\n\n__Further Reading/Useful Links__:\n\n* [Google Style Docstring Example](https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google)\n* [Google Style Guide](https://google.github.io/styleguide/pyguide.html)\n\n## Support\n\nJoin our Gitter chat room [here](https://gitter.im/altwalker/community) to chat with us or with other members of the community.\n\n## License\n\nAltWalker is licensed under the GNU General Public License v3.0.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/altom/altwalker/altwalker/", "keywords": "model-based-testing testing tests", "license": "GNU GPLv3", "maintainer": "", "maintainer_email": "", "name": "altwalker", "package_url": "https://pypi.org/project/altwalker/", "platform": "", "project_url": "https://pypi.org/project/altwalker/", "project_urls": {"Bug Tracker": "https://gitlab.com/altom/altwalker/altwalker/issues?label_name=Bug", "Documentation": "https://altom.gitlab.io/altwalker/altwalker/", "Homepage": "https://gitlab.com/altom/altwalker/altwalker/", "Source": "https://gitlab.com/altom/altwalker/altwalker/"}, "release_url": "https://pypi.org/project/altwalker/0.2.7/", "requires_dist": null, "requires_python": ">=3.4.0", "summary": "Altwalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>AltWalker</h1>\n<p>AltWalker is an open source, Model-Based Testing framework. Write your tests in Python or C# and use GraphWalker to generate a path through your model.</p>\n<p>Read the documentation on <a href=\"https://altom.gitlab.io/altwalker/altwalker\" rel=\"nofollow\">https://altom.gitlab.io/altwalker/altwalker</a>.</p>\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#overview\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quickstart\" rel=\"nofollow\">Quickstart</a></li>\n<li><a href=\"#setting-up-a-development-environment\" rel=\"nofollow\">Setting Up a Development Environment</a></li>\n<li><a href=\"#support\" rel=\"nofollow\">Support</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n<h2>Overview</h2>\n<p>AltWalker is an open source, Model-Based testing framework for automating your test execution. You\ndesign your tests as a directed graph and AltWalker executes them. It relies on\n<a href=\"http://graphwalker.github.io/\" rel=\"nofollow\">GraphWalker</a> to generate paths through your graph.</p>\n<h3>Model-Based Testing</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Model-based_testing\" rel=\"nofollow\">Model-Based Testing</a> is a testing\ntechnique which offers a way of generating test cases based on models that describe the behaviour\n(functionality) of the system under test.</p>\n<p>The goal when designing models is to represent the part of the system under test, usually\nby one model for each functionality of your system.</p>\n<p>With the help of graph theory we can dynamically generate multiple test scripts. A test script is a path passing through the model from a starting point till\na condition is met.</p>\n<p>Why use Model-Based Testing:</p>\n<ul>\n<li>the abstraction layer added by the model gives your tests a better structure</li>\n<li>the model can be updated to reflect the requirements changes making the tests easy to maintain</li>\n<li>dynamically generates multiple test scripts based on different conditions (like coverage or length)</li>\n<li>allows for a large number of tests to be created which results in a larger part of the system under test to be covered.</li>\n</ul>\n<h3>AltWalker</h3>\n<p>AltWalker is a test execution tool, which  aims to make it easy to write and run your model-based tests. AltWalker uses GraphWalker to generate a path through the models.</p>\n<p>For the test structure it uses an Object-Oriented approach inspired by python's <code>unittest</code> module. Every model is mapped to a class with the same name and each vertex and edge from the model is mapped to a method inside the class.</p>\n<p>AltWalker also borrows the concept of test fixture from unit tests, and implements the following fixtures:\n<code>setUpRun</code>, <code>tearDownRun</code>, <code>setUpModel</code> and <code>tearDownModel</code>.</p>\n<p>Now it supports running tests written in .NET/C# and Python3.</p>\n<h3>AltWalker Components</h3>\n<p>AltWalker has the following components:</p>\n<ul>\n<li>\n<p><strong>Model</strong>: a directed graph, supplied by the user as a json or graphml file.\nA graph is composed from a list of vertices and a list of edges.</p>\n</li>\n<li>\n<p><strong>Generator</strong> and <strong>Stop Condition</strong>: used to specify how to generate a\npath and to decide when a path is complete.</p>\n</li>\n<li>\n<p><strong>Test Code</strong>: the implementation of the model(s) as code. Each model is mapped to a\nclass and each vertex and edge is mapped to a method.</p>\n</li>\n<li>\n<p><strong>Planner</strong>: uses the <em>model(s)</em> and a pair of <em>generator</em> and <em>stop condition</em>\nto provide a path (a sequence of steps) through the model(s).</p>\n<p>Currently AltWalker provides two planners:</p>\n<ul>\n<li>Online Planner</li>\n<li>Offline Planner</li>\n</ul>\n</li>\n<li>\n<p><strong>Reporter</strong>: reports the output of the tests, the reporter is called on\neach event (e.g. <code>step_start</code>, <code>step_end</code>, ...).</p>\n</li>\n<li>\n<p><strong>Executor</strong>: for each step in the plan it looks up and calls the named method\nfrom the <em>test code</em>. In addition to the step methods, it also calls\nfixture methods if present (e.g. <code>setUpModel</code>, <code>tearDownModel</code> ...).</p>\n<p>Currently AltWalker provides three executors:</p>\n<ul>\n<li>Python Executor</li>\n<li>.NET Executor</li>\n</ul>\n<p>And an <strong>Http Executor</strong> that allows you to hook up your own executor via HTTP. You can read\nmore about the Http Executor on the <a href=\"https://altom.gitlab.io/altwalker/altwalker/how-tos/custom-executor.html\" rel=\"nofollow\">How to: Write your own executor</a>\npage.</p>\n</li>\n<li>\n<p><strong>Walker</strong>: the test runner. Coordinates the execution of a test asking the <code>Planner</code>\nfor the next step, executing the step using the <code>Executor</code> and reporting the progress\nusing the <code>Reporter</code>.</p>\n</li>\n</ul>\n<p>There are two ways to run your tests:</p>\n<ul>\n<li>\n<p><strong>Online Mode</strong> (using the Online Planner): Generate one step and then execute\nthe step, until the path is complete.</p>\n</li>\n<li>\n<p><strong>Offline Mode</strong> (using the Offline Planner): Run a path from a sequence of steps.\nUsually the path is generated using the <code>offline</code> command.</p>\n</li>\n</ul>\n<h2>Installation</h2>\n<p>Prerequisites:</p>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python3</a> (with pip3)</li>\n<li><a href=\"https://openjdk.java.net/\" rel=\"nofollow\">Java 8</a></li>\n<li><a href=\"http://graphwalker.github.io/\" rel=\"nofollow\">GraphWalker CLI</a></li>\n<li><a href=\"Optional\" rel=\"nofollow\">.NET Core</a> (Optional)</li>\n<li><a href=\"https://git-scm.com/\" rel=\"nofollow\">git</a> (Optional)</li>\n</ul>\n<h3>Install GraphWalker</h3>\n<ul>\n<li>MacOS/Linux:</li>\n</ul>\n<pre>$ wget https://github.com/GraphWalker/graphwalker-project/releases/download/4.0.1/graphwalker-cli-4.0.1.jar <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>\n  mkdir -p ~/graphwalker <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>\n  mv graphwalker-cli-4.0.1.jar ~/graphwalker/ <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>\n  <span class=\"nb\">echo</span> -e <span class=\"s1\">'#!/bin/bash\\njava -jar ~/graphwalker/graphwalker-cli-4.0.1.jar \"$@\"'</span> &gt; ~/graphwalker/graphwalker-cli.sh <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>\n  chmod +x ~/graphwalker/graphwalker-cli.sh <span class=\"o\">&amp;&amp;</span> <span class=\"se\">\\</span>\n  ln -s ~/graphwalker/graphwalker-cli.sh /usr/local/bin/gw\n</pre>\n<ul>\n<li>Windows:</li>\n</ul>\n<pre><code>$ setx PATH \"%PATH%;C:\\graphwalker\" &amp; :: Adds graphwalker to current user PATH\n  cd C:\\\n  mkdir graphwalker\n  cd graphwalker\n  powershell -Command \"[Net.ServicePointManager]::SecurityProtocol = 'tls12'; Invoke-WebRequest -Uri 'https://github.com/GraphWalker/graphwalker-project/releases/download/4.0.1/graphwalker-cli-4.0.1.jar' -outfile 'graphwalker-cli-4.0.1.jar'\" &amp; :: Downloads graphwalker using powershell command Invoke-Request\n  @echo off\n  @echo @echo off&gt; gw.bat\n  @echo java -jar C:\\graphwalker\\graphwalker-cli-4.0.1.jar %*&gt;&gt; gw.bat\n  @echo on\n</code></pre>\n<p>After running the command check that you correctly installed GraphWalker by running:</p>\n<pre><code>$ gw --version\n</code></pre>\n<h3>Install AltWalker</h3>\n<p>Use the following command to install AltWalker:</p>\n<pre><code>$ pip3 install altwalker\n</code></pre>\n<p>AltWalker is now installed. Check that you correctly installed AltWalker by running:</p>\n<pre><code>$ altwalker --version\n</code></pre>\n<h4>Living on the edge</h4>\n<p>If you want to work with the latest code before it\u2019s released, install or update the code from the <code>develop</code> branch:</p>\n<pre><code>$ pip3 install -U git+https://gitlab.com/altom/altwalker/altwalker\n</code></pre>\n<p>For a more detailed tutorial read the <a href=\"https://altom.gitlab.io/altwalker/altwalker/installation.html\" rel=\"nofollow\">Installation</a> section from the documentation.</p>\n<h2>Quickstart</h2>\n<p>Make a sample project and run the tests.</p>\n<pre><code>$ altwalker init test-project -l python\n$ cd test-project\n$ altwalker online tests -m models/default.json \"random(vertex_coverage(100))\"\nRunning:\n[2019-08-06 16:28:44.030077] ModelName.vertex_A Running\n[2019-08-06 16:28:44.030940] ModelName.vertex_A Status: PASSED\n\n[2019-08-06 16:28:44.048492] ModelName.edge_A Running\n[2019-08-06 16:28:44.048729] ModelName.edge_A Status: PASSED\n\n[2019-08-06 16:28:44.064495] ModelName.vertex_B Running\n[2019-08-06 16:28:44.064746] ModelName.vertex_B Status: PASSED\n\nStatistics:\n\n  Model Coverage..................100%\n  Number of Models...................1\n  Completed Models...................1\n  Failed Models......................0\n  Incomplete Models..................0\n  Not Executed Models................0\n\n  Edge Coverage...................100%\n  Number of Edges....................1\n  Visited Edges......................1\n  Unvisited Edges....................0\n\n  Vertex Coverage.................100%\n  Number of Vertices.................2\n  Visited Vertices...................2\n  Unvisited Vertices.................0\n\nStatus:  PASS\n</code></pre>\n<h2>Setting Up a Development Environment</h2>\n<p>Clone the repository:</p>\n<pre><code>$ git clone https://gitlab.com/altom/altwalker/altwalker/\n$ cd altwalker\n</code></pre>\n<p>Install python dependencies:</p>\n<pre><code>$ pip3 install -r requirements.txt &amp;&amp; \\\n  pip3 install -r requirements-dev.txt\n</code></pre>\n<h3>Running Tests</h3>\n<pre><code>$ pytest tests -s -v\n</code></pre>\n<h4>Running tests with tox inside docker</h4>\n<pre><code>$ docker run  -it --rm -v \"$(pwd):/altwalker\" -w \"/altwalker\" robert96/graphwalker-cli:tox tox\n</code></pre>\n<h3>CLI</h3>\n<p>After you install the python dependencies to setup AltWalker CLI locally from code run:</p>\n<pre><code>$ pip3 install --editable .\n</code></pre>\n<p>Then from any command line you can access:</p>\n<pre><code>$ altwalker --help\n</code></pre>\n<h3>Documentation</h3>\n<p>After you install the python dependencies to generate the documentation run:</p>\n<pre><code>$ cd docs &amp;&amp; \\\n  make clean &amp;&amp; \\\n  make html\n</code></pre>\n<p>To see the documentation run:</p>\n<pre><code>$ open _build/html/index.html\n</code></pre>\n<p><strong>Further Reading/Useful Links</strong>:</p>\n<ul>\n<li><a href=\"https://sphinxcontrib-napoleon.readthedocs.io/en/latest/example_google.html#example-google\" rel=\"nofollow\">Google Style Docstring Example</a></li>\n<li><a href=\"https://google.github.io/styleguide/pyguide.html\" rel=\"nofollow\">Google Style Guide</a></li>\n</ul>\n<h2>Support</h2>\n<p>Join our Gitter chat room <a href=\"https://gitter.im/altwalker/community\" rel=\"nofollow\">here</a> to chat with us or with other members of the community.</p>\n<h2>License</h2>\n<p>AltWalker is licensed under the GNU General Public License v3.0.</p>\n\n          </div>"}, "last_serial": 6537584, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "c33f726c9960a39fd77b7e38e449f8c0", "sha256": "75045849146a039487ea2d71aa023e98ba11b639b660ef2e8a9b5f5287cd282f"}, "downloads": -1, "filename": "altwalker-0.1.0.tar.gz", "has_sig": false, "md5_digest": "c33f726c9960a39fd77b7e38e449f8c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 38541, "upload_time": "2019-02-28T13:29:58", "upload_time_iso_8601": "2019-02-28T13:29:58.931140Z", "url": "https://files.pythonhosted.org/packages/30/63/8bda882c9ae600caa112e26666d9d41901551e08bea45aecc54c5bbea843/altwalker-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "db48113f3babed6a52acdccb542e8cf3", "sha256": "c0e5a711105d60ba4bdec9e13793cc201cb7e07ea02aa7902a0512e21760d5c6"}, "downloads": -1, "filename": "altwalker-0.1.1.tar.gz", "has_sig": false, "md5_digest": "db48113f3babed6a52acdccb542e8cf3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 38764, "upload_time": "2019-03-13T13:45:10", "upload_time_iso_8601": "2019-03-13T13:45:10.473323Z", "url": "https://files.pythonhosted.org/packages/2b/5f/46818f9fae2c39c90a566bcf96b2667e2e2d3cf2d07ed8136f78bdcf38ba/altwalker-0.1.1.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f71d22385e7257af104102a937d07cce", "sha256": "9bc338c4ae4025df2fe04f0380be43091792713d794705d9672059f11771025d"}, "downloads": -1, "filename": "altwalker-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f71d22385e7257af104102a937d07cce", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.4.0", "size": 53994, "upload_time": "2019-05-08T14:27:36", "upload_time_iso_8601": "2019-05-08T14:27:36.422650Z", "url": "https://files.pythonhosted.org/packages/c2/69/49816b6e3486f15b4771169f286072b141f07cd1fdefb73b8a84f18f65bf/altwalker-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "985c47f322414b1c3b70cdbda98d9e1c", "sha256": "a728edcc19d2be50c16a43df5f291b87c11cd5f1909e68dbfa3d2457fbf8827b"}, "downloads": -1, "filename": "altwalker-0.2.1.tar.gz", "has_sig": false, "md5_digest": "985c47f322414b1c3b70cdbda98d9e1c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 46687, "upload_time": "2019-05-08T14:27:37", "upload_time_iso_8601": "2019-05-08T14:27:37.916869Z", "url": "https://files.pythonhosted.org/packages/86/b9/1b1183ceca44a34be2a546a168327b9d9d198313a4c1a1f926f7f00028de/altwalker-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "82b96be7b1f7b1f28f04abd4c3c6bdba", "sha256": "a28efc696da3394372061e3bad73435bb80050ae975189752c8e75ef11196ed1"}, "downloads": -1, "filename": "altwalker-0.2.2.tar.gz", "has_sig": false, "md5_digest": "82b96be7b1f7b1f28f04abd4c3c6bdba", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 50018, "upload_time": "2019-06-21T07:37:58", "upload_time_iso_8601": "2019-06-21T07:37:58.182972Z", "url": "https://files.pythonhosted.org/packages/ec/56/fb4b6348dd90ff33e5a221e11a471315d32783caeec65a1448ab076ee298/altwalker-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "dfcbd3fafd6a0250d1ce5c776137ee69", "sha256": "72d6c362a6afcf921bb222c3ce1c2f7d673543a9549ca0149c1d1b36aa1a6a07"}, "downloads": -1, "filename": "altwalker-0.2.3.tar.gz", "has_sig": false, "md5_digest": "dfcbd3fafd6a0250d1ce5c776137ee69", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 52685, "upload_time": "2019-07-30T10:47:02", "upload_time_iso_8601": "2019-07-30T10:47:02.927490Z", "url": "https://files.pythonhosted.org/packages/67/09/a483672a7d75a3b833073ea0966d8016fb21b0c477ceb7c16663d79e2e4a/altwalker-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "32cf548dc09b76563ef7105a77485441", "sha256": "6cbd9c7393509e808dcb222ed05a08ec4a14323115729d4e329f65965a3a683e"}, "downloads": -1, "filename": "altwalker-0.2.4.tar.gz", "has_sig": false, "md5_digest": "32cf548dc09b76563ef7105a77485441", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 54498, "upload_time": "2019-09-02T09:10:24", "upload_time_iso_8601": "2019-09-02T09:10:24.040688Z", "url": "https://files.pythonhosted.org/packages/08/d7/c4ff090580552cc9bd919365febd8abaf3f5059b530fc237e604a3ae691a/altwalker-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "6c2f87ae6b035c1e1526d399ff49f05b", "sha256": "019e2bc30b8f2d8545151ad989c81ee4c67148a71c6f94956dfc9665cd88100d"}, "downloads": -1, "filename": "altwalker-0.2.5.tar.gz", "has_sig": false, "md5_digest": "6c2f87ae6b035c1e1526d399ff49f05b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 58163, "upload_time": "2019-11-07T16:55:47", "upload_time_iso_8601": "2019-11-07T16:55:47.822169Z", "url": "https://files.pythonhosted.org/packages/2c/2e/1f7b3794c28e62250c3e58b7540ef6605b388ccf60ce2d1b89d7b4bc5883/altwalker-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "da6b216a740d4578dbf2ae60366e3480", "sha256": "d67dd035fd514dba82b443de7536687991859288be705f2ad37e5ce18e01caba"}, "downloads": -1, "filename": "altwalker-0.2.6.tar.gz", "has_sig": false, "md5_digest": "da6b216a740d4578dbf2ae60366e3480", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 57771, "upload_time": "2019-12-03T12:37:20", "upload_time_iso_8601": "2019-12-03T12:37:20.151697Z", "url": "https://files.pythonhosted.org/packages/3e/9f/c379cbd56c3fcc71144f3a0d954d3b40dbe3f8f2eb9cb927a95e7b3bb443/altwalker-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "551516ba4fd8a8c6b6dae5466bf2856b", "sha256": "d65284727aa6badaf7fe9f18a07b12b70ae13b0c6a2e58cc99f5ca09ea581e01"}, "downloads": -1, "filename": "altwalker-0.2.7.tar.gz", "has_sig": false, "md5_digest": "551516ba4fd8a8c6b6dae5466bf2856b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 58694, "upload_time": "2020-01-29T12:35:23", "upload_time_iso_8601": "2020-01-29T12:35:23.646841Z", "url": "https://files.pythonhosted.org/packages/5a/5c/2e052fb450d9a828a7d734b8c687d08cc28efb9c48bc7546c060eb8d00e6/altwalker-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "551516ba4fd8a8c6b6dae5466bf2856b", "sha256": "d65284727aa6badaf7fe9f18a07b12b70ae13b0c6a2e58cc99f5ca09ea581e01"}, "downloads": -1, "filename": "altwalker-0.2.7.tar.gz", "has_sig": false, "md5_digest": "551516ba4fd8a8c6b6dae5466bf2856b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4.0", "size": 58694, "upload_time": "2020-01-29T12:35:23", "upload_time_iso_8601": "2020-01-29T12:35:23.646841Z", "url": "https://files.pythonhosted.org/packages/5a/5c/2e052fb450d9a828a7d734b8c687d08cc28efb9c48bc7546c060eb8d00e6/altwalker-0.2.7.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:18:26 2020"}