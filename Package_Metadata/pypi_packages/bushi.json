{"info": {"author": "Alfi Maulana", "author_email": "alfi.maulana.f@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Bushi\n\nThis package contains functions to handle commands in a **Linux** based terminal.\nThe main purpose of this package is to replace **Shell Script** with a simplier **Python** based functions.\n\n# Target\n\n## Version 1.0\n\n### Major\n\n- ~~Terminal input and output formatting.~~ _(done since `0.1.0`)_\n- ~~Manage multiple sessions with `tmux` command~~. _(done since `0.3.0`)_\n- Build a **ROS** based package with `colcon` command.\n- Manage a **Git** repository with `git` command.\n- Manage an **APT** package with `apt-get` command.\n\n### Minor\n\n- ~~`cmd.run()` must preserve the output formating.~~ _(aborted, `cmd.run()` changes to not pipe output)_\n\n# Changelogs\n\n## Version 0.3.0 _(14/03/2020)_\n\n- Add `tmux` class that handle multiple session with the following functionalities:\n  - Check existence of a session using `tmux.session_exist()`.\n  - Kill a session using `tmux.session_kill()`.\n  - Detach from current session using `tmux.detach()`.\n  - Run a separate process with output on different session using `tmux.session_run()` with the following functionalities:\n    - It will call `bushi-tmux-runner` that handle how the process is called and how it return the process returncode to the parent process.\n    - It uses to replace `tmux.run()` where we want to do a process while viewing its output.\n    - Process failed when the **tmux** session was detached.\n    - On keyboard interrupt, or when the process failed, it will continue with detaching the current session.\n- Modify functions in `io` as follow:\n  - Change how a process thread is called, it will only be created when needed, else it will be destroyed.\n  - Call `io.process_stop()` instead of changing `io.__process_text` to stop the process thread.\n  - Add `io.press_enter()` function that try to wait for `enter` key before continue the program.\n  - Add `io.ask_yes_no()` function that will ask question that accept `yes` or `no` input and return that value as `True` and `False` respectively.\n    If the input is invalid, it will terminate the program.\n- Modify a function in `cmd` as follow:\n  - Change `cmd.run()` to call `subprocess.run()` instead of `subprocess.pOpen()` that pipe the output to the parent process.\n\n## Version 0.2.0 _(13/03/2020)_\n\n- Add `cmd` class that handle subprocess run with the following functionalities:\n  - `run()` to run a subprocess with outputs.\n  - `runmuted()` to run a subprocess without any outputs.\n- Add `path` class that handle files and directories with the following functionalities:\n  - Check existence of files and directories using `isfile()`, and `isdir()`.\n  - Get and change working directory using `getdir()` and `changedir()` respectively.\n  - Some others functionality that also exist in the `os.path`.\n- Modify functions in the `io` as follow:\n  - Change how output should behave.\n  - Modify output format for the process command.\n  - Change how process symbol be animated.\n  - Output the duration in the process command.\n\n## Version 0.1.0 _(12/03/2020)_\n\n- Add `io` class that handle terminal input and output with the following functionalities:\n  - Output to the terminal using `info()`, `warn()`, `fail()`, `succes()`, `info_list()`, `warn_list()`, `fail_list()`, `success_list()`, and `process()`.\n  - Input from the terminal using `ask()`, and `ask_secret()`.\n  - Both input and output will emphasize a string between `*`. _(ex: `*here*`)_\n  - Exit current process using `terminate()`.\n    With empty argument, this function will return `0`.\n    Else, it will output the arguments and return `1`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/ichiro-its/bushi", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "bushi", "package_url": "https://pypi.org/project/bushi/", "platform": "", "project_url": "https://pypi.org/project/bushi/", "project_urls": {"Homepage": "https://gitlab.com/ichiro-its/bushi"}, "release_url": "https://pypi.org/project/bushi/0.3.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Linux command line interface package", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Bushi</h1>\n<p>This package contains functions to handle commands in a <strong>Linux</strong> based terminal.\nThe main purpose of this package is to replace <strong>Shell Script</strong> with a simplier <strong>Python</strong> based functions.</p>\n<h1>Target</h1>\n<h2>Version 1.0</h2>\n<h3>Major</h3>\n<ul>\n<li><del>Terminal input and output formatting.</del> <em>(done since <code>0.1.0</code>)</em></li>\n<li><del>Manage multiple sessions with <code>tmux</code> command</del>. <em>(done since <code>0.3.0</code>)</em></li>\n<li>Build a <strong>ROS</strong> based package with <code>colcon</code> command.</li>\n<li>Manage a <strong>Git</strong> repository with <code>git</code> command.</li>\n<li>Manage an <strong>APT</strong> package with <code>apt-get</code> command.</li>\n</ul>\n<h3>Minor</h3>\n<ul>\n<li><del><code>cmd.run()</code> must preserve the output formating.</del> <em>(aborted, <code>cmd.run()</code> changes to not pipe output)</em></li>\n</ul>\n<h1>Changelogs</h1>\n<h2>Version 0.3.0 <em>(14/03/2020)</em></h2>\n<ul>\n<li>Add <code>tmux</code> class that handle multiple session with the following functionalities:\n<ul>\n<li>Check existence of a session using <code>tmux.session_exist()</code>.</li>\n<li>Kill a session using <code>tmux.session_kill()</code>.</li>\n<li>Detach from current session using <code>tmux.detach()</code>.</li>\n<li>Run a separate process with output on different session using <code>tmux.session_run()</code> with the following functionalities:\n<ul>\n<li>It will call <code>bushi-tmux-runner</code> that handle how the process is called and how it return the process returncode to the parent process.</li>\n<li>It uses to replace <code>tmux.run()</code> where we want to do a process while viewing its output.</li>\n<li>Process failed when the <strong>tmux</strong> session was detached.</li>\n<li>On keyboard interrupt, or when the process failed, it will continue with detaching the current session.</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Modify functions in <code>io</code> as follow:\n<ul>\n<li>Change how a process thread is called, it will only be created when needed, else it will be destroyed.</li>\n<li>Call <code>io.process_stop()</code> instead of changing <code>io.__process_text</code> to stop the process thread.</li>\n<li>Add <code>io.press_enter()</code> function that try to wait for <code>enter</code> key before continue the program.</li>\n<li>Add <code>io.ask_yes_no()</code> function that will ask question that accept <code>yes</code> or <code>no</code> input and return that value as <code>True</code> and <code>False</code> respectively.\nIf the input is invalid, it will terminate the program.</li>\n</ul>\n</li>\n<li>Modify a function in <code>cmd</code> as follow:\n<ul>\n<li>Change <code>cmd.run()</code> to call <code>subprocess.run()</code> instead of <code>subprocess.pOpen()</code> that pipe the output to the parent process.</li>\n</ul>\n</li>\n</ul>\n<h2>Version 0.2.0 <em>(13/03/2020)</em></h2>\n<ul>\n<li>Add <code>cmd</code> class that handle subprocess run with the following functionalities:\n<ul>\n<li><code>run()</code> to run a subprocess with outputs.</li>\n<li><code>runmuted()</code> to run a subprocess without any outputs.</li>\n</ul>\n</li>\n<li>Add <code>path</code> class that handle files and directories with the following functionalities:\n<ul>\n<li>Check existence of files and directories using <code>isfile()</code>, and <code>isdir()</code>.</li>\n<li>Get and change working directory using <code>getdir()</code> and <code>changedir()</code> respectively.</li>\n<li>Some others functionality that also exist in the <code>os.path</code>.</li>\n</ul>\n</li>\n<li>Modify functions in the <code>io</code> as follow:\n<ul>\n<li>Change how output should behave.</li>\n<li>Modify output format for the process command.</li>\n<li>Change how process symbol be animated.</li>\n<li>Output the duration in the process command.</li>\n</ul>\n</li>\n</ul>\n<h2>Version 0.1.0 <em>(12/03/2020)</em></h2>\n<ul>\n<li>Add <code>io</code> class that handle terminal input and output with the following functionalities:\n<ul>\n<li>Output to the terminal using <code>info()</code>, <code>warn()</code>, <code>fail()</code>, <code>succes()</code>, <code>info_list()</code>, <code>warn_list()</code>, <code>fail_list()</code>, <code>success_list()</code>, and <code>process()</code>.</li>\n<li>Input from the terminal using <code>ask()</code>, and <code>ask_secret()</code>.</li>\n<li>Both input and output will emphasize a string between <code>*</code>. <em>(ex: <code>*here*</code>)</em></li>\n<li>Exit current process using <code>terminate()</code>.\nWith empty argument, this function will return <code>0</code>.\nElse, it will output the arguments and return <code>1</code>.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6808959, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "bb528f06846cf199228de5b161b53e32", "sha256": "cf632f8de831c550849a0f53a8fe7066d28f4925847d304442ba0197c03fc1b5"}, "downloads": -1, "filename": "bushi-0.1.0.tar.gz", "has_sig": false, "md5_digest": "bb528f06846cf199228de5b161b53e32", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2463, "upload_time": "2020-03-12T10:36:03", "upload_time_iso_8601": "2020-03-12T10:36:03.562013Z", "url": "https://files.pythonhosted.org/packages/27/20/e5fe41407348046a7087b23655795a9510e20759a4ff1655686b99d1d453/bushi-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f9a5bb3a5dfae3ed0ea7dfb4e381f829", "sha256": "04600a8f2b7194c010312094d2cb65ccc1da1ed7c41fe94882223a74d2647adb"}, "downloads": -1, "filename": "bushi-0.2.1.tar.gz", "has_sig": false, "md5_digest": "f9a5bb3a5dfae3ed0ea7dfb4e381f829", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3493, "upload_time": "2020-03-12T17:55:56", "upload_time_iso_8601": "2020-03-12T17:55:56.774432Z", "url": "https://files.pythonhosted.org/packages/c8/be/ff21dc24fe0d7a696ee16db8c275e4f1d47db635eb6d55dacd96d186759b/bushi-0.2.1.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "e040ba53413937db58f9bdfd2a6f1a7e", "sha256": "673dc63544bfc528e1fe2f041da5d679a6f36dc9d6bf695b04d511a58bebfd87"}, "downloads": -1, "filename": "bushi-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e040ba53413937db58f9bdfd2a6f1a7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4980, "upload_time": "2020-03-13T21:15:35", "upload_time_iso_8601": "2020-03-13T21:15:35.660671Z", "url": "https://files.pythonhosted.org/packages/8f/7d/a2a70df138ffd27b856185c523dd07c4f6ffc36d4c541082ae1f50f716fc/bushi-0.3.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e040ba53413937db58f9bdfd2a6f1a7e", "sha256": "673dc63544bfc528e1fe2f041da5d679a6f36dc9d6bf695b04d511a58bebfd87"}, "downloads": -1, "filename": "bushi-0.3.0.tar.gz", "has_sig": false, "md5_digest": "e040ba53413937db58f9bdfd2a6f1a7e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4980, "upload_time": "2020-03-13T21:15:35", "upload_time_iso_8601": "2020-03-13T21:15:35.660671Z", "url": "https://files.pythonhosted.org/packages/8f/7d/a2a70df138ffd27b856185c523dd07c4f6ffc36d4c541082ae1f50f716fc/bushi-0.3.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:35:56 2020"}