{"info": {"author": "Dusty Phillips", "author_email": "dusty@buchuki.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Topic :: Software Development :: Version Control"], "description": "..\n  Copyright 2012-2013 Dusty Phillips\n\n  This file is part of gitifyhg.\n  gitifyhg is free software: you can redistribute it and/or modify\n  it under the terms of the GNU General Public License as published by\n  the Free Software Foundation, either version 3 of the License, or\n  (at your option) any later version.\n \n  gitifyhg is distributed in the hope that it will be useful,\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n  GNU General Public License for more details.\n \n  You should have received a copy of the GNU General Public License\n  along with gitifyhg.  If not, see <http://www.gnu.org/licenses/>.\n\n\ngitifyhg\n========\nThis git remote allows you to do local development in a git repository and push \nchanges to an upstream mercurial repository. It does this seamlessly and allows\npushing and pulling to named branches in the upstream repository.\n\n``gitifyhg`` does not rely on hg-git, and allows you to push and pull to and from\na mercurial repository from right inside git. You do not need to adapt your\ngit workflow in any way aside from cloning a gitifyhg url.\n\nThis is a robust and usable git to hg bridge that has been tested in production settings. It has a large test suite and better documentation than\nthe `alternatives we know about <https://github.com/buchuki/gitifyhg/wiki/List-of-git-hg-bridges>`_.\nIt has been tested on several large mercurial repositories (including that\nof mercurial itself and the pypy repository) that break with various other\ngit-to-hg bridge projects and is used daily in normal workflow scenarios.\n\nThat said, gitifyhg is not yet complete. Some of the features that\nare not fully working include:\n\n* anonymous branches are dropped, only the tip of a named branch iqs kept\n* remote branch and bookmark tracking is not 100% stable\n* pushing octopus merges is not supported\n* cloning mercurial branches that are subdirectories of other branches fails\n* cloning duplicate case sensitive names on case insensitive filesystems (mac, windows) fails\n\nHowever, if you are looking for a git-svn type of workflow that allows you to\nclone mercurial repositories, work in local git branches, rebase those\nbranches and push them back to mercurial, you have found it. It works. Try it.\n\nUnfortunately, though, maintenance of gitifyhg has fallen off. You can pick it up if you like, but you may also be interested in working on the `git-remote-hg` script that is shipping with the main git project.  We're told it's more functional than it once was and that the improvements gitifyhg once had over it have been addressed. We have not confirmed this, but it's worth checking out. Because it has support from the git developers, it's probably the best project to get behind at this time.\n \nURLS\n----\n* `source <https://github.com/buchuki/gitifyhg>`_\n* `issues <https://github.com/buchuki/gitifyhg/issues>`_\n* `pypi package <https://pypi.python.org/pypi/gitifyhg/>`_\n* `Dusty Phillips <https://archlinux.me/dusty>`_\n* `Inspired by Felipe Contreras\n  <https://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2/>`_\n\nDependencies\n------------\n``gitifyhg`` has been tested to run on CPython 2.6 and 2.7. Any python that\nsupports Mercurial should be supported. Sadly, this excludes both pypy and\nCPython 3.\n\n``gitifyhg`` requires at least Mercurial 1.9, older versions are currently\nnot supported. We perform continuous testing against various Mercurial\nversions ranging from 1.9 to 2.5. However, this does not completely rule\nout the possibility of compatibility issues, so we recommend using Mercurial\n2.4.x or 2.5.x, as this is what ``gitifyhg`` is primarily developed for.\nShould you actually encounter any compatibility issues with any older or\nnewer Mercurial versions, please submit an issue.\n\nIt has been tested on Arch Linux and Mac OS X. In general it should\nwork equally well on other Unix-like operating systems like *BSD or Solaris.\nAll bets are off with Windows, but please let us know if it works or you fixed\nit.\n\n``gitifyhg`` explicitly depends on:\n\n* `path.py <https://github.com/jaraco/path.py>`_\n* `Mercurial <http://mercurial.selenic.com/>`_\n\nThese packages will be installed automatically by ``easy_install``, \n``pip``, ``setup.py install``, or ``setup.py develop``.\n\n``gitifyhg`` also expects the following to be installed on your OS:\n\n* `python2 <http://python.org/>`_\n* `git <http://git-scm.com/>`_\n\nInstall\n-------\n``gitifyhg`` is a properly designed Python package. You can get it from\n`pypi <https://pypi.python.org>`_ using either ::\n\n  pip install gitifyhg\n\nor ::\n\n  easy_install gitifyhg\n\n``gitifyhg`` works in a `virtualenv <http://www.virtualenv.org/>`_, but you're\nprobably just as well off to install it at the system level.\n\nYou can also install ``gitifyhg`` manually with ::\n\n  git clone https://github.com/buchuki/gitifyhg.git\n  python setup.py install\n\nIf you want to hack on it, use ``setup.py develop``, instead. In this case, you\nprobably **are** better off using a ``virtualenv``.\n\nInstructions\n------------\n``gitifyhg`` is a git remote. Once installed, you can clone any Mercurial repo\nusing ::\n\n    git clone gitifyhg::<any mercurial url>\n\nNow run ``git branch -r`` to see the list of Mercurial branches. If it was\na named branch upstream, it will be named branches/<branchname> in git.\nBookmarks are referred to directly by their name.\nFor now, we recommend only interacting with named branches.\n\n``master`` automatically tracks the default branch. You can check out any\nnamed mercurial branch using ::\n\n  git checkout --track origin/branches/<branchname>\n\nAs a standard git practice, we recommend creating your own local branch\nto work on. Then change to the tracked branch and ``git pull`` to get\nupstream changes. Rebase your working branch onto that branch before pushing ::\n\n  git checkout -b working_<branchname>\n  # hack add commit ad nauseam\n  git checkout branches/<branchname>\n  git pull\n  git checkout working_<branchname>\n  git rebase branches/<branchname>\n  git checkout branches/<branchname>\n  git merge working_<branchname>\n  git push\n\nYou can create new named upstream branches by giving them the ``branches/``\nprefix ::\n\n  git checkout -b \"branches/my_new_branch\"\n  # hack add commit\n  git push --set-upstream origin branches/my_new_branch\n\nAnd that's really it, you just use standard git commands and the remote\ntakes care of the details. Just be cautious of incoming anonymous branches,\ndon't do any octopus merges and you should be set.\n\nCaveats\n~~~~~~~\nMercurial allows spaces in branch, bookmark, and tag names, while\ngit does not. To keep git from choking if upstream has spaces in names, gitifyhg\nwill replace them with three underscores and has the sense to convert between\nthe two formats when pushing and pulling.\n\nMercurial does not support lightweight tags. Tags in mercurial that get pushed\nto the remote repo require an extra commit in he mercurial history. If you push\na lightweight tag, then gitifyhg will set a default user, date, and commit\nmessage for you. However, if you create a heavyweight tag using\n``git tag <tagname> --message=\"commit message\"``, gitifyhg will use the commit\ninformation associated with that tag when you run ``git push --tags``.\n\nBy default, gitifyhg ignores branches that have been closed in Mercurial. This\nsupplies a substantial cloning speedup on large repos, and alleviates a few\nissues we are still working out in conflicting branch names. If you would like\nto clone a repository including closed branches, first set the\nGITIFYHG_ALLOW_CLOSED_BRANCHES environment variable.\n\nIf you have any trouble, please let us know via the issue tracker, preferably\nwith pull requests containing test cases.\n\nCommunicating with Mercurial Users\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nOne problem with using git to access Mercurial repos is that the sha identifiers\nin the two DVCSs are different. This makes it difficult to discuss or share\npatches on mailing lists or other mediums.\n\nGitifyhg alleviates this by storing Mercurial's sha1 identifiers in a git-notes\nref. If you need to discuss SHA1s with upstream Mercurial users, issue\nthe following commands::\n\n  $ ls .git/refs/notes/\n  hg  hg-ceda6818a39a022ef11ba5ee2d7964f57cb3accf\n  # note the SHA1 above and adapt the following command\n  git symbolic-ref refs/notes/hg refs/notes/hg-ceda6818a39a022ef11ba5ee2d7964f57cb3accf\n  git config core.notesRef refs/notes/hg\n\nFrom now on, your git-log output will include lines that look like the\nfollowing for each pulled ref::\n\n  Notes (hg):\n    e6eabc9d7e24f55e829d0848380f6645e57f4b6a\n\nThat is the Mercurial SHA1 identifier of the commit in question; you can paste\nthat into an e-mail or chat message to discuss a specific commit with other\nusers.\n\nIf somebody else mentions a commit by it's hg SHA1 identifier, you can search\nfor that commit in git using::\n\n  git log --grep=<HGSHA1>\n\nDevelopment\n-----------\nYou can hack on gitifyhg by forking the\n`github <https://github.com/buchuki/gitifyhg>`_ repository. All the code is\nin the ``gitifyhg.py`` file, and tests are in the ``test`` directory.\n\nWe recommend developing in a `virtualenv <http://www.virtualenv.org/>`_ ::\n\n  cd gitifyhg\n  virtualenv -p python2.7 venv\n  . venv/bin/activate\n  python setup.py develop\n\nThere is currently a problem where if you have a development version of gitifyhg\nin an active virtualenv and a stable version installed at the system level, git\nwill pick the system level gitifyhg regardless of the PATH setting in the\nvirtualenv. The only workaround I have found is to temporarily uninstall the\nsystem version.\n\nIf you want debugging information out of gitifyhg, set the DEBUG_GITIFYHG=on \nenvironment variable. This is done automatically if you are running the test\nsuite.\n\nThe gitifyhg remote is called by git and commands are passed on stdin.\nOutput is sent to stdout. The protocol is described at\nhttps://www.kernel.org/pub/software/scm/git/docs/git-remote-helpers.html\nThe git remote prints INPUT and OUTPUT lines for each of these to help\nintrospect the protocol.\n\nWe expect pep8 compliance on contributions. If possible, enable highlighting\nof pep8 violations in your editor before committing.\n\nThe gitifyhg mailing list is hosted on \n`Google groups <https://groups.google.com/group/gitifyhg>`_, but we\nprefer the `issue tracker <https://github.com/buchuki/gitifyhg/issues>`_\nfor most development and decision-making related discussions.\n\nTesting\n=======\n\nTests are continuously run by Travis-CI: |BuildStatus|_\n\n.. |BuildStatus| image:: https://secure.travis-ci.org/buchuki/gitifyhg.png\n.. _BuildStatus: http://travis-ci.org/buchuki/gitifyhg\n\nNote that testing has recently changed. We used to use `py.test <http://pytest.org/>`_\nand `tox <http://tox.testrun.org/>`_ to run our tests. We've recently switched to\n`sharness <https://github.com/mlafeldt/sharness>`_ both because it's easier to\ntest command-line tools with and because it is the same infrastructure used by\ngit itself.\n\nTo test with sharness, simply `cd test` and run `make`. You can run individual\ntest files with `./test-name.t`.\n\nLicense\n-------\n\ngitifyhg is copyright 2012-2013 Dusty Phillips and is licensed under the\n`GNU General Public License <https://www.gnu.org/licenses/gpl.html>`_\n\nCredits\n-------\nDusty Phillips is the primary author of ``gitifyhg``.\n\nThe current version was heavily inspired by and borrows code from Felipe Contreras's\n`git-remote-hg <https://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2/>`_\nproject.\n\nOther contributors include (alphabetical order):\n\n* Alex Sydell\n* Jason Chu\n* Jed Brown\n* Max Horn\n* Paul Price\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/buchuki/gitifyhg", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "gitifyhg", "package_url": "https://pypi.org/project/gitifyhg/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/gitifyhg/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/buchuki/gitifyhg"}, "release_url": "https://pypi.org/project/gitifyhg/0.8.4/", "requires_dist": null, "requires_python": null, "summary": "Use git as client for hg repos", "version": "0.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            ..<br>  Copyright 2012-2013 Dusty Phillips<br><br>  This file is part of gitifyhg.<br>  gitifyhg is free software: you can redistribute it and/or modify<br>  it under the terms of the GNU General Public License as published by<br>  the Free Software Foundation, either version 3 of the License, or<br>  (at your option) any later version.<br> <br>  gitifyhg is distributed in the hope that it will be useful,<br>  but WITHOUT ANY WARRANTY; without even the implied warranty of<br>  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>  GNU General Public License for more details.<br> <br>  You should have received a copy of the GNU General Public License<br>  along with gitifyhg.  If not, see &lt;http://www.gnu.org/licenses/&gt;.<br><br><br>gitifyhg<br>========<br>This git remote allows you to do local development in a git repository and push <br>changes to an upstream mercurial repository. It does this seamlessly and allows<br>pushing and pulling to named branches in the upstream repository.<br><br>``gitifyhg`` does not rely on hg-git, and allows you to push and pull to and from<br>a mercurial repository from right inside git. You do not need to adapt your<br>git workflow in any way aside from cloning a gitifyhg url.<br><br>This is a robust and usable git to hg bridge that has been tested in production settings. It has a large test suite and better documentation than<br>the `alternatives we know about &lt;https://github.com/buchuki/gitifyhg/wiki/List-of-git-hg-bridges&gt;`_.<br>It has been tested on several large mercurial repositories (including that<br>of mercurial itself and the pypy repository) that break with various other<br>git-to-hg bridge projects and is used daily in normal workflow scenarios.<br><br>That said, gitifyhg is not yet complete. Some of the features that<br>are not fully working include:<br><br>* anonymous branches are dropped, only the tip of a named branch iqs kept<br>* remote branch and bookmark tracking is not 100% stable<br>* pushing octopus merges is not supported<br>* cloning mercurial branches that are subdirectories of other branches fails<br>* cloning duplicate case sensitive names on case insensitive filesystems (mac, windows) fails<br><br>However, if you are looking for a git-svn type of workflow that allows you to<br>clone mercurial repositories, work in local git branches, rebase those<br>branches and push them back to mercurial, you have found it. It works. Try it.<br><br>Unfortunately, though, maintenance of gitifyhg has fallen off. You can pick it up if you like, but you may also be interested in working on the `git-remote-hg` script that is shipping with the main git project.  We're told it's more functional than it once was and that the improvements gitifyhg once had over it have been addressed. We have not confirmed this, but it's worth checking out. Because it has support from the git developers, it's probably the best project to get behind at this time.<br> <br>URLS<br>----<br>* `source &lt;https://github.com/buchuki/gitifyhg&gt;`_<br>* `issues &lt;https://github.com/buchuki/gitifyhg/issues&gt;`_<br>* `pypi package &lt;https://pypi.python.org/pypi/gitifyhg/&gt;`_<br>* `Dusty Phillips &lt;https://archlinux.me/dusty&gt;`_<br>* `Inspired by Felipe Contreras<br>  &lt;https://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2/&gt;`_<br><br>Dependencies<br>------------<br>``gitifyhg`` has been tested to run on CPython 2.6 and 2.7. Any python that<br>supports Mercurial should be supported. Sadly, this excludes both pypy and<br>CPython 3.<br><br>``gitifyhg`` requires at least Mercurial 1.9, older versions are currently<br>not supported. We perform continuous testing against various Mercurial<br>versions ranging from 1.9 to 2.5. However, this does not completely rule<br>out the possibility of compatibility issues, so we recommend using Mercurial<br>2.4.x or 2.5.x, as this is what ``gitifyhg`` is primarily developed for.<br>Should you actually encounter any compatibility issues with any older or<br>newer Mercurial versions, please submit an issue.<br><br>It has been tested on Arch Linux and Mac OS X. In general it should<br>work equally well on other Unix-like operating systems like *BSD or Solaris.<br>All bets are off with Windows, but please let us know if it works or you fixed<br>it.<br><br>``gitifyhg`` explicitly depends on:<br><br>* `path.py &lt;https://github.com/jaraco/path.py&gt;`_<br>* `Mercurial &lt;http://mercurial.selenic.com/&gt;`_<br><br>These packages will be installed automatically by ``easy_install``, <br>``pip``, ``setup.py install``, or ``setup.py develop``.<br><br>``gitifyhg`` also expects the following to be installed on your OS:<br><br>* `python2 &lt;http://python.org/&gt;`_<br>* `git &lt;http://git-scm.com/&gt;`_<br><br>Install<br>-------<br>``gitifyhg`` is a properly designed Python package. You can get it from<br>`pypi &lt;https://pypi.python.org&gt;`_ using either ::<br><br>  pip install gitifyhg<br><br>or ::<br><br>  easy_install gitifyhg<br><br>``gitifyhg`` works in a `virtualenv &lt;http://www.virtualenv.org/&gt;`_, but you're<br>probably just as well off to install it at the system level.<br><br>You can also install ``gitifyhg`` manually with ::<br><br>  git clone https://github.com/buchuki/gitifyhg.git<br>  python setup.py install<br><br>If you want to hack on it, use ``setup.py develop``, instead. In this case, you<br>probably **are** better off using a ``virtualenv``.<br><br>Instructions<br>------------<br>``gitifyhg`` is a git remote. Once installed, you can clone any Mercurial repo<br>using ::<br><br>    git clone gitifyhg::&lt;any mercurial url&gt;<br><br>Now run ``git branch -r`` to see the list of Mercurial branches. If it was<br>a named branch upstream, it will be named branches/&lt;branchname&gt; in git.<br>Bookmarks are referred to directly by their name.<br>For now, we recommend only interacting with named branches.<br><br>``master`` automatically tracks the default branch. You can check out any<br>named mercurial branch using ::<br><br>  git checkout --track origin/branches/&lt;branchname&gt;<br><br>As a standard git practice, we recommend creating your own local branch<br>to work on. Then change to the tracked branch and ``git pull`` to get<br>upstream changes. Rebase your working branch onto that branch before pushing ::<br><br>  git checkout -b working_&lt;branchname&gt;<br>  # hack add commit ad nauseam<br>  git checkout branches/&lt;branchname&gt;<br>  git pull<br>  git checkout working_&lt;branchname&gt;<br>  git rebase branches/&lt;branchname&gt;<br>  git checkout branches/&lt;branchname&gt;<br>  git merge working_&lt;branchname&gt;<br>  git push<br><br>You can create new named upstream branches by giving them the ``branches/``<br>prefix ::<br><br>  git checkout -b \"branches/my_new_branch\"<br>  # hack add commit<br>  git push --set-upstream origin branches/my_new_branch<br><br>And that's really it, you just use standard git commands and the remote<br>takes care of the details. Just be cautious of incoming anonymous branches,<br>don't do any octopus merges and you should be set.<br><br>Caveats<br>~~~~~~~<br>Mercurial allows spaces in branch, bookmark, and tag names, while<br>git does not. To keep git from choking if upstream has spaces in names, gitifyhg<br>will replace them with three underscores and has the sense to convert between<br>the two formats when pushing and pulling.<br><br>Mercurial does not support lightweight tags. Tags in mercurial that get pushed<br>to the remote repo require an extra commit in he mercurial history. If you push<br>a lightweight tag, then gitifyhg will set a default user, date, and commit<br>message for you. However, if you create a heavyweight tag using<br>``git tag &lt;tagname&gt; --message=\"commit message\"``, gitifyhg will use the commit<br>information associated with that tag when you run ``git push --tags``.<br><br>By default, gitifyhg ignores branches that have been closed in Mercurial. This<br>supplies a substantial cloning speedup on large repos, and alleviates a few<br>issues we are still working out in conflicting branch names. If you would like<br>to clone a repository including closed branches, first set the<br>GITIFYHG_ALLOW_CLOSED_BRANCHES environment variable.<br><br>If you have any trouble, please let us know via the issue tracker, preferably<br>with pull requests containing test cases.<br><br>Communicating with Mercurial Users<br>~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<br>One problem with using git to access Mercurial repos is that the sha identifiers<br>in the two DVCSs are different. This makes it difficult to discuss or share<br>patches on mailing lists or other mediums.<br><br>Gitifyhg alleviates this by storing Mercurial's sha1 identifiers in a git-notes<br>ref. If you need to discuss SHA1s with upstream Mercurial users, issue<br>the following commands::<br><br>  $ ls .git/refs/notes/<br>  hg  hg-ceda6818a39a022ef11ba5ee2d7964f57cb3accf<br>  # note the SHA1 above and adapt the following command<br>  git symbolic-ref refs/notes/hg refs/notes/hg-ceda6818a39a022ef11ba5ee2d7964f57cb3accf<br>  git config core.notesRef refs/notes/hg<br><br>From now on, your git-log output will include lines that look like the<br>following for each pulled ref::<br><br>  Notes (hg):<br>    e6eabc9d7e24f55e829d0848380f6645e57f4b6a<br><br>That is the Mercurial SHA1 identifier of the commit in question; you can paste<br>that into an e-mail or chat message to discuss a specific commit with other<br>users.<br><br>If somebody else mentions a commit by it's hg SHA1 identifier, you can search<br>for that commit in git using::<br><br>  git log --grep=&lt;HGSHA1&gt;<br><br>Development<br>-----------<br>You can hack on gitifyhg by forking the<br>`github &lt;https://github.com/buchuki/gitifyhg&gt;`_ repository. All the code is<br>in the ``gitifyhg.py`` file, and tests are in the ``test`` directory.<br><br>We recommend developing in a `virtualenv &lt;http://www.virtualenv.org/&gt;`_ ::<br><br>  cd gitifyhg<br>  virtualenv -p python2.7 venv<br>  . venv/bin/activate<br>  python setup.py develop<br><br>There is currently a problem where if you have a development version of gitifyhg<br>in an active virtualenv and a stable version installed at the system level, git<br>will pick the system level gitifyhg regardless of the PATH setting in the<br>virtualenv. The only workaround I have found is to temporarily uninstall the<br>system version.<br><br>If you want debugging information out of gitifyhg, set the DEBUG_GITIFYHG=on <br>environment variable. This is done automatically if you are running the test<br>suite.<br><br>The gitifyhg remote is called by git and commands are passed on stdin.<br>Output is sent to stdout. The protocol is described at<br>https://www.kernel.org/pub/software/scm/git/docs/git-remote-helpers.html<br>The git remote prints INPUT and OUTPUT lines for each of these to help<br>introspect the protocol.<br><br>We expect pep8 compliance on contributions. If possible, enable highlighting<br>of pep8 violations in your editor before committing.<br><br>The gitifyhg mailing list is hosted on <br>`Google groups &lt;https://groups.google.com/group/gitifyhg&gt;`_, but we<br>prefer the `issue tracker &lt;https://github.com/buchuki/gitifyhg/issues&gt;`_<br>for most development and decision-making related discussions.<br><br>Testing<br>=======<br><br>Tests are continuously run by Travis-CI: |BuildStatus|_<br><br>.. |BuildStatus| image:: https://secure.travis-ci.org/buchuki/gitifyhg.png<br>.. _BuildStatus: http://travis-ci.org/buchuki/gitifyhg<br><br>Note that testing has recently changed. We used to use `py.test &lt;http://pytest.org/&gt;`_<br>and `tox &lt;http://tox.testrun.org/&gt;`_ to run our tests. We've recently switched to<br>`sharness &lt;https://github.com/mlafeldt/sharness&gt;`_ both because it's easier to<br>test command-line tools with and because it is the same infrastructure used by<br>git itself.<br><br>To test with sharness, simply `cd test` and run `make`. You can run individual<br>test files with `./test-name.t`.<br><br>License<br>-------<br><br>gitifyhg is copyright 2012-2013 Dusty Phillips and is licensed under the<br>`GNU General Public License &lt;https://www.gnu.org/licenses/gpl.html&gt;`_<br><br>Credits<br>-------<br>Dusty Phillips is the primary author of ``gitifyhg``.<br><br>The current version was heavily inspired by and borrows code from Felipe Contreras's<br>`git-remote-hg &lt;https://felipec.wordpress.com/2012/11/13/git-remote-hg-bzr-2/&gt;`_<br>project.<br><br>Other contributors include (alphabetical order):<br><br>* Alex Sydell<br>* Jason Chu<br>* Jed Brown<br>* Max Horn<br>* Paul Price<br>\n          </div>"}, "last_serial": 915459, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "661b4a033714bfcfdbe872bab4db319a", "sha256": "3c3eebbc8b1eaebeceed7caee6df68cd7d69ac9b6ad8a6daf20c4e4ad7c65a77"}, "downloads": -1, "filename": "gitifyhg-0.1.tar.gz", "has_sig": false, "md5_digest": "661b4a033714bfcfdbe872bab4db319a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2936, "upload_time": "2012-11-30T15:36:42", "upload_time_iso_8601": "2012-11-30T15:36:42.268304Z", "url": "https://files.pythonhosted.org/packages/d8/23/6cdbfd17dd9dbb73f9da7d5594ac7303d39189b3580a9ce15f6442b735a4/gitifyhg-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "25e97a61a6da5ffc762465eb4bc4c71a", "sha256": "3b4c5277603a98345b488de608f27c470f88c8564f679c961bfd9cc42ed53ca8"}, "downloads": -1, "filename": "gitifyhg-0.2.tar.gz", "has_sig": false, "md5_digest": "25e97a61a6da5ffc762465eb4bc4c71a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2716, "upload_time": "2012-12-01T03:50:34", "upload_time_iso_8601": "2012-12-01T03:50:34.618612Z", "url": "https://files.pythonhosted.org/packages/06/48/0bc21434c4a4e44e05e2147be732f93800fdc6ee5a8c5aaaae033c374621/gitifyhg-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "7b5d92b3dc50e1a035124d9359bd5aab", "sha256": "00233749bc8e0d9e480ad7fe19161f24e9f96885a52e01cd16a7adcae29dd259"}, "downloads": -1, "filename": "gitifyhg-0.3.tar.gz", "has_sig": false, "md5_digest": "7b5d92b3dc50e1a035124d9359bd5aab", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5179, "upload_time": "2012-12-01T20:31:32", "upload_time_iso_8601": "2012-12-01T20:31:32.603356Z", "url": "https://files.pythonhosted.org/packages/41/78/69b9321f866e599c7726793346b619763ae35d72da00fb3d9130999d388e/gitifyhg-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "0962ddc103341a9c3c41361e1a4d661d", "sha256": "3e502250b1ff86b90530b55974e3183e34699d4c2e3339faaa4f9f668add85bf"}, "downloads": -1, "filename": "gitifyhg-0.3.1.tar.gz", "has_sig": false, "md5_digest": "0962ddc103341a9c3c41361e1a4d661d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6077, "upload_time": "2012-12-01T21:30:21", "upload_time_iso_8601": "2012-12-01T21:30:21.145564Z", "url": "https://files.pythonhosted.org/packages/2a/45/51fe6a044ca5e5722fa3146bb5801707beb39d9d4d0e82b1f5f057b0fed7/gitifyhg-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "5533266c0ec9b1beeb941d90488833cf", "sha256": "a065a3309243b2a4b52279c17d8585d5a52cfaa76c10164721696b9eebd6612e"}, "downloads": -1, "filename": "gitifyhg-0.3.2.tar.gz", "has_sig": false, "md5_digest": "5533266c0ec9b1beeb941d90488833cf", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6083, "upload_time": "2012-12-01T21:34:57", "upload_time_iso_8601": "2012-12-01T21:34:57.074553Z", "url": "https://files.pythonhosted.org/packages/80/58/1eb25914211bd5775a58878a609737740f3a1605d7c64fc93fa961651fdf/gitifyhg-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "2286d8f0a1057d9bdd3799603d915778", "sha256": "373cc0c2cce2d5d0cf8afdea2d301a18766a4f283060e2e28aaa0361678b5f42"}, "downloads": -1, "filename": "gitifyhg-0.4.tar.gz", "has_sig": false, "md5_digest": "2286d8f0a1057d9bdd3799603d915778", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6944, "upload_time": "2012-12-15T02:13:30", "upload_time_iso_8601": "2012-12-15T02:13:30.808788Z", "url": "https://files.pythonhosted.org/packages/76/35/a9b1d236f096530f7e542fa03dad5cb10499f9b34c2f5cf46df5dfebe5e6/gitifyhg-0.4.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "03238e36a8a1970ab60d72babcd20c46", "sha256": "6d43282652273f69f22f926424a965f8c019094db83404deb335ff4533f633c3"}, "downloads": -1, "filename": "gitifyhg-0.6.tar.gz", "has_sig": false, "md5_digest": "03238e36a8a1970ab60d72babcd20c46", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11893, "upload_time": "2013-01-04T21:22:45", "upload_time_iso_8601": "2013-01-04T21:22:45.991063Z", "url": "https://files.pythonhosted.org/packages/2a/d5/f4274acd4a6a8225ae69408202a6221bf479ea18cbe1a84ad750feda51b3/gitifyhg-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d13430aa12dc07550d0902af067d9304", "sha256": "a86e28097e3ef287028d1e0278873309d906df6d0d8699059e4ec36367c8ad56"}, "downloads": -1, "filename": "gitifyhg-0.6.1.tar.gz", "has_sig": false, "md5_digest": "d13430aa12dc07550d0902af067d9304", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12298, "upload_time": "2013-01-06T04:11:10", "upload_time_iso_8601": "2013-01-06T04:11:10.382048Z", "url": "https://files.pythonhosted.org/packages/50/d8/833298f5b9f885a120da7e0b4f525373be3ee7557d429d5986c4022c2681/gitifyhg-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "7dc6c56a3f901276ac72a75e4563d591", "sha256": "3972dcdbc946e7285cb7a5337740122d872660df3472b10027e57432b3c6456b"}, "downloads": -1, "filename": "gitifyhg-0.6.2.tar.gz", "has_sig": false, "md5_digest": "7dc6c56a3f901276ac72a75e4563d591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13374, "upload_time": "2013-01-09T17:35:51", "upload_time_iso_8601": "2013-01-09T17:35:51.650014Z", "url": "https://files.pythonhosted.org/packages/92/d7/33e131939e5ee47c331d3470b392aabdb0c94e90b36ec295ed5296ea9a02/gitifyhg-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "d98c5956940184917443e084805a10f9", "sha256": "252a7d2dd2885b8d5ddffb6c15e7cadfe03057abe3dca56ceb36ab9c28fb2a79"}, "downloads": -1, "filename": "gitifyhg-0.6.3.tar.gz", "has_sig": false, "md5_digest": "d98c5956940184917443e084805a10f9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14064, "upload_time": "2013-01-15T15:02:57", "upload_time_iso_8601": "2013-01-15T15:02:57.495191Z", "url": "https://files.pythonhosted.org/packages/1e/70/3331e9373cbd0f38bcd6d602c20389870e70c4695ae972054266a7d2eeaa/gitifyhg-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "468fef3b8eaaa9926ddf5b4e61146d6c", "sha256": "f91fca3b68fda4eace9a261d480a6bffe39deab0d3c5361a1f6b9cf07a82747f"}, "downloads": -1, "filename": "gitifyhg-0.6.4.tar.gz", "has_sig": false, "md5_digest": "468fef3b8eaaa9926ddf5b4e61146d6c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14144, "upload_time": "2013-01-23T14:58:11", "upload_time_iso_8601": "2013-01-23T14:58:11.183180Z", "url": "https://files.pythonhosted.org/packages/58/30/65e62f96dd6ee3001511081d72bc71cd6b912dec245c6e1e0fc007e9bec2/gitifyhg-0.6.4.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "2b423eed9e12e2712f4be58d8ec93cbd", "sha256": "c6e701f800c60b9d4aadbdee16a56dfd90fc5773bc63305a448d61f703027d29"}, "downloads": -1, "filename": "gitifyhg-0.7.tar.gz", "has_sig": false, "md5_digest": "2b423eed9e12e2712f4be58d8ec93cbd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18161, "upload_time": "2013-02-10T22:07:13", "upload_time_iso_8601": "2013-02-10T22:07:13.614526Z", "url": "https://files.pythonhosted.org/packages/61/2a/0e225f1f5ef6656206409c69c8a93cad89337e3c20e3352db9b4861d39c2/gitifyhg-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "24a22532ae0dd081a227243cbdaa36f1", "sha256": "81def86dcc5dfa53b277988ad54c52d4057e4d18ead163704a62e2d182e5dc9c"}, "downloads": -1, "filename": "gitifyhg-0.7.1.tar.gz", "has_sig": false, "md5_digest": "24a22532ae0dd081a227243cbdaa36f1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18196, "upload_time": "2013-02-15T00:53:58", "upload_time_iso_8601": "2013-02-15T00:53:58.123916Z", "url": "https://files.pythonhosted.org/packages/9c/66/fd5cd3dda64916c1057c6fd22acd79394bc5431e355f69e51e14301fac0b/gitifyhg-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "41aa1b40c507cd5ead04864fa7f3696d", "sha256": "0846d86a97f45491660112b9be3d5611c10ce9afe9b602eaa1053de03d037d44"}, "downloads": -1, "filename": "gitifyhg-0.7.2.tar.gz", "has_sig": false, "md5_digest": "41aa1b40c507cd5ead04864fa7f3696d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 18749, "upload_time": "2013-03-06T22:29:08", "upload_time_iso_8601": "2013-03-06T22:29:08.508339Z", "url": "https://files.pythonhosted.org/packages/89/1d/3f3076d8806986f9b913ddd9f1dea61dc0da3ab28e98323695d26f236a92/gitifyhg-0.7.2.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "94e4ac0d36a57776c2987328b182eccb", "sha256": "32577164cd176adb5fceeeb2e3621948d8604602e72e429a0f6126a66d99fd4e"}, "downloads": -1, "filename": "gitifyhg-0.8.tar.gz", "has_sig": false, "md5_digest": "94e4ac0d36a57776c2987328b182eccb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19368, "upload_time": "2013-03-13T14:39:10", "upload_time_iso_8601": "2013-03-13T14:39:10.074507Z", "url": "https://files.pythonhosted.org/packages/0d/5f/a12fa3dee03947b61c24b5b9fb49b2564d1056092d58e23cdb2ac559a38f/gitifyhg-0.8.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "fc29c24572e5f255fbcf1ad65e5cb6dc", "sha256": "89ae76b07723eda13402c2c9e8cddfcafacebb35b48c339489846a1a55a2095f"}, "downloads": -1, "filename": "gitifyhg-0.8.1.tar.gz", "has_sig": false, "md5_digest": "fc29c24572e5f255fbcf1ad65e5cb6dc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19384, "upload_time": "2013-03-14T22:06:59", "upload_time_iso_8601": "2013-03-14T22:06:59.714054Z", "url": "https://files.pythonhosted.org/packages/4a/94/de04cdd01006db0db22c684bbf4c0ea6d364cb9fbbe4f8a654ee1265f5ce/gitifyhg-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "0192b331214570cc9b83f182d90c2ffe", "sha256": "ea22f9314bc43b66990b9ec9f0a19d6c0ee1583bd06c8561f317a73afeee49bd"}, "downloads": -1, "filename": "gitifyhg-0.8.2.tar.gz", "has_sig": false, "md5_digest": "0192b331214570cc9b83f182d90c2ffe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16810, "upload_time": "2013-04-30T21:50:37", "upload_time_iso_8601": "2013-04-30T21:50:37.330699Z", "url": "https://files.pythonhosted.org/packages/2f/c3/8fab6b037e2b5a5e15121231b4e4a8154f291f6e1095c556dcf1b4673dcd/gitifyhg-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "176a9de424a98f26f5a4f7fb4d1b160e", "sha256": "40390662c91e52a127eaf7d1ab79983a6f4f37494cd8708a9543c03fbdaa16db"}, "downloads": -1, "filename": "gitifyhg-0.8.3.tar.gz", "has_sig": false, "md5_digest": "176a9de424a98f26f5a4f7fb4d1b160e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 44625, "upload_time": "2013-10-03T01:48:44", "upload_time_iso_8601": "2013-10-03T01:48:44.830670Z", "url": "https://files.pythonhosted.org/packages/12/80/793f4bf2e4675e31fda5100f1ae8dfbc8a78cf01337058895a17b0ad3e03/gitifyhg-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "f8580e1358c794793cf223157fbcec61", "sha256": "5846fba86a3afc5b6ae83c5be9f37cdf9b2cfe2fbddcce133de073127fa05b42"}, "downloads": -1, "filename": "gitifyhg-0.8.4.tar.gz", "has_sig": false, "md5_digest": "f8580e1358c794793cf223157fbcec61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45826, "upload_time": "2013-11-09T23:22:53", "upload_time_iso_8601": "2013-11-09T23:22:53.851669Z", "url": "https://files.pythonhosted.org/packages/9d/ab/ae6ba53062a63e3ad4afca9946b5e9c28688cf5518faa82bf541e77b4fe7/gitifyhg-0.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f8580e1358c794793cf223157fbcec61", "sha256": "5846fba86a3afc5b6ae83c5be9f37cdf9b2cfe2fbddcce133de073127fa05b42"}, "downloads": -1, "filename": "gitifyhg-0.8.4.tar.gz", "has_sig": false, "md5_digest": "f8580e1358c794793cf223157fbcec61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45826, "upload_time": "2013-11-09T23:22:53", "upload_time_iso_8601": "2013-11-09T23:22:53.851669Z", "url": "https://files.pythonhosted.org/packages/9d/ab/ae6ba53062a63e3ad4afca9946b5e9c28688cf5518faa82bf541e77b4fe7/gitifyhg-0.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:57 2020"}