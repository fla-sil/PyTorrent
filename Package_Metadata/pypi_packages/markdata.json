{"info": {"author": "Joseph Kato", "author_email": "joseph@jdkato.io", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6"], "description": "\n# Markdata: Keep your data out of your markup!\n\n[![Build Status](https://img.shields.io/travis/errata-ai/vale/master.svg?logo=travis)](https://travis-ci.org/errata-ai/markdata) [![PyPI](https://img.shields.io/pypi/v/markdata.svg?colorB=blue&style=flat)](https://pypi.org/project/markdata/) [![wheels](https://img.shields.io/badge/wheels-%E2%9C%93-4c1.svg?longCache=true&logo=python&logoColor=white)](https://pypi.org/project/markdata/#files) [![code style](https://img.shields.io/badge/code%20style-black-%23000.svg)](https://black.readthedocs.io/en/stable/)\n\n**Markdata** is a Python library and command-line tool for managing data (e.g., code, diagrams, tables, etc.) in Markdown files. Its goal is to promote one simple rule: prose and non-prose supplements (collectively referred to as \"data\") should be managed separately whenever possible. The benefits of this philosophy include:\n\n- Adherence to the [DRY principle](https://en.wikipedia.org/wiki/Don%27t_repeat_yourself): multiple files can include data from the same source.\n\n- Higher-quality data: code examples can be tested, tables can be generated directly from serialization formats, diagrams can be built from source, etc.\n\n- Human-friendly markup: less non-prose content means shorter files, which are easier to update and maintain.\n\nSee [*Fixing Markdown\u2019s shortcomings with Python*](https://staticschool.com/blog/fixing-markdowns-shortcomings-with-python/) for more information.\n\n## Installation\n\n> :exclamation: Markdata requires Python >= 3.6.0. :exclamation:\n\n```console\n$ pip install markdata\n```\n\n## Usage\n\n###### As a library\n\n```python\nimport markdata\n\ndef my_directive():\n    pass\n\nmarkdown = markdata.markdata(\n    # A string or file-like object.\n    file_or_str,\n    # A dictionary of custom directives (optional).\n    #\n    # Format: {'name': my_directive}.\n    directives={},\n    # The type of front matter to parse (optional).\n    fm_format=None,  # 'JSON', 'YAML', or 'TOML'\n    # The directory that paths will be resolved relative to (optional).\n    root=None\n)\n```\n\n###### From the command line\n\n```console\n$ markdata --help\nUsage: markdata [OPTIONS] SOURCE [DESTINATION]\n\n  A flavor-agnostic extension framework for Markdown.\n\n  Reads from <SOURCE> and writes to <DESTINATION>.\n\n  If <SOURCE> is a single file, it will be converted to Markdown and written\n  to <DESTINATION> (default: stdout).\n\n  If <SOURCE> is a directory, all child Markdata files will be converted to\n  Markdown and written to <DESTINATION> (default: overwrite <SOURCE>).\n\nOptions:\n  --fm-type [JSON|YAML|TOML]  The type of front matter to parse.\n  --root PATH                 The directory that paths will be resolved\n                              relative to.\n  --directives PATH           The directory containing your custom directives.\n  --version                   Show the version and exit.\n  --help                      Show this message and exit.\n```\n\n## Directives\n\nMarkdata's functionality is driven by *directives*, which are Markdown snippets that invoke Python functions. Directives can be defined in two ways:\n\n````markdown\n# Example directives\n\n<!-- This is a \"block\" directive -->\n\n```callout{'title': 'NOTE', 'classes': ['warning']}\nThis is a callout message.\n```\n\n<!-- This is an \"inline\" directive -->\n\n`table{'path': '../data/table.yml', 'classes': ['table'], 'caption': 'My data'}`\n````\n\nThe `table` directive creates an HTML table from a YAML, JSON, or CSV file (with an optional caption and classes). After calling `markdata` on this file, the output would be something along the lines of:\n\n```html\n<table class=\"table\">\n    <caption>My data</caption>\n    <thead>\n        <!-- headers -->\n    </thead>\n    <tbody>\n        <!-- rows -->\n    </tbody>\n</table>\n```\n\n### Built-in directives\n\nMarkdata has a few built-in, general-purpose directives:\n\n```python\ndef table(path: str, classes: List[str] = [], caption: str = \"\") -> str:\n    \"\"\"Return an HTML table built from structured data (CSV, JSON, or YAML).\n\n    `path` [required]: A path (relative to the directive-containing file) to a\n           CSV, JSON, or YAML file.\n\n    `classes` [optional]: A list of HTML classes to apply to the table.\n\n    `caption` [optional]: A caption for the table.\n\n    Example:\n\n        `table{'path': 'table.yml', 'classes': ['table'], 'caption': '...'}`\n    \"\"\"\n```\n\nThe `table` directive ([discussed above](#directives)) creates an HTML table from an external data source (CSV, JSON, or YAML). This allows you to avoid having to write and maintain tables in raw Markdown or HTML.\n\n```python\ndef document(path: str, span: Tuple[int, int] = []) -> str:\n    \"\"\"Return the contents of a document (or part of it).\n\n    `path` [required]: A path (relative to the directive-containing file) to a\n           local file.\n\n    `span` [optional]: A tuple ([begin, end]) indicating the beginning and\n           ending line of the snippet (defaults to the entire file).\n\n    Example:\n\n        `document{'path': 'my_file.py', 'span': (10, 13)}`\n    \"\"\"\n```\n\nThe `document` directive includes the content of an external text file (of any type&mdash;Markdown, Python, etc.).\n\n```python\ndef code(front_matter, path, span=[], lang=None):\n    \"\"\"Return the contents of a document (or part of it) as a code block.\n\n    `path` [required]: A path (relative to the directive-containing file) to a\n           local file.\n\n    `span` [optional]: A tuple ([begin, end]) indicating the beginning and\n           ending line of the snippet (defaults to the entire file).\n\n    `lang` [optional]: The code block's info string. If not defined, it will be\n           inferred from the given file extension.\n\n    Example:\n        `code{'path': 'my_file.py', 'span': [10, 13], 'lang': 'python'}`\n    \"\"\"\n```\n\nThe `code` directive includes the content of an external source code formatted as a [fenced code block](https://spec.commonmark.org/0.29/#fenced-code-blocks). This allows you to, for example, write your code examples in their own files (which can be properly tested and linted).\n\n### Writing your own\n\n> **NOTE**: The first argument passed to custom directives will be a dictionary created from the file's front matter (`{}` by default).\n\nWhile `table` and `document` attempt to solve the most common needs, the true power of Markdata comes from leveraging Python in *your own* directives.\n\nThere are three steps to creating a directive:\n\n1. Design your *directive definition*:  Choose either an inline or block directive and decide what arguments it'll accept.\n\n2. Write a Python function: This function needs to accept the arguments defined in step (1). So, if you were re-implementing the built-in `table` directive, you'd have a directive definition of `table{'path': '../data/table.yml', 'classes': ['table'], 'caption': 'My data'}` and a function definition of `table(fm: Dict, path: str, classes: List[str] = [], caption: str = \"\") -> str:`. When using block directives, the first argument passed to the backend function is its content (see our [admonition example](https://github.com/errata-ai/markdata/blob/master/tests/block/__init__.py)).\n\n3. Associate your directive with your function:\n\n    - Using the library:\n    ```python\n    # When using Markdata as a library, you simply pass your function to `markdata`:\n    import markdata\n\n\n    def implementation(path):\n        pass\n\n    markdown = markdata.markdata(file_or_str, directives={'directive': implementation})\n    ```\n    - Using the command-line tool: Markdata will associate all Python modules with their `main` function found in the   directory passed to `--directives='my_dir'`.\n\nCheck out [our test cases](https://github.com/errata-ai/Markdata/tree/master/tests) for some examples.\n\n#### Converters\n\nConverters are utilities that you can import and use in your own directives.\n\n```python\n# from markdata.converters import to_html_table\ndef to_html_table(\n    rows: List[List[str]], caption: str = \"\", classes: List[str] = []\n) -> str:\n    \"\"\"Convert the given rows into an HTML table.\n\n    The first entry in `rows` will be used as the table headers.\n    \"\"\"\n```\n\n## FAQ\n\n> Why only Markdown? What about AsciiDoc and reStructuredText?\n\nAsciiDoc and reStructuredText have more feature-rich syntaxes than Markdown. Many of Markdata's features are available out-of-the-box (in some form) in AsciiDoc and reStructuredText.\n\nThat said, Markdown has a much larger ecosystem of parsers (practically every language has a *native* Markdown library), editors (and editor plugins), linters, and static site generators than both AsciiDoc and reStructuredText.\n\nMarkdata's goal is to enrich Markdown's syntax without hurting its portability (see the next question).\n\n> What \"flavors\" of Markdown does Markdata support?\n\n*All of them*.\n\nOne of the common complaints about Markdown is that many of its best features are tied to a particular \"flavor\" (see [Babelmark](https://johnmacfarlane.net/babelmark2/faq.html)) that may not be compatible with other Markdown-related tooling.\n\nMarkdata avoids this problem by acting as more of a \"preprocessor\" (i.e., `Markdata + Markdown <=> Sass + CSS`) than another Markdown implementation. Its users have full control over what it outputs&mdash;meaning that they can choose to output raw HTML (effectively bypassing the problem of flavors altogether) or make use of features limited to their favorite flavor:\n\n<p align=\"center\">\n  <img src =\"https://user-images.githubusercontent.com/8785025/52157384-8b1b5780-2643-11e9-83de-828d2e541742.png\"/>\n</p>\n\n> What if I'm already using a static site generator (SSG)?\n\nWhile many SSGs have built-in support for external data sources (e.g., [Jekyll](https://jekyllrb.com/docs/datafiles/), [Hugo](https://gohugo.io/templates/data-templates/), and [Gatsby](https://www.gatsbyjs.org/tutorial/part-four/)), there are still benefits to using Markdata:\n\n- As dicussed in the previous question, Markdata *doesn't* introduce new Markdown syntax&mdash;meaning Markdata directives can be used with *any* SSG that supports Markdown. This means that you can change SSGs without having to update the syntax (i.e., template language) for accessing your data.\n\n- Markdata's ability to manage data is far more powerful than what most SSGs offer: instead of merely iterating over static resource files, you have full access to Python and its library ecosystem. So, for example, you can\n    - fetch data from APIs using the ultra-popular [Requests](http://docs.python-requests.org/en/master/) library;\n    - include plots and diagrams created with [seaborn](https://github.com/mwaskom/seaborn); or\n    - transform data using [pandas](https://github.com/pandas-dev/pandas).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/errata-ai/markdata", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "markdata", "package_url": "https://pypi.org/project/markdata/", "platform": "", "project_url": "https://pypi.org/project/markdata/", "project_urls": {"Homepage": "https://github.com/errata-ai/markdata"}, "release_url": "https://pypi.org/project/markdata/0.5.2/", "requires_dist": ["pyyaml", "tabulate", "click", "python-frontmatter"], "requires_python": ">=3.6.0", "summary": "An extensible, parser-agnostic 'include' directive for Markdown.", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Markdata: Keep your data out of your markup!</h1>\n<p><a href=\"https://travis-ci.org/errata-ai/markdata\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/815ba79c2d812e2258cbc57fd39508eb485efd9d/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f6572726174612d61692f76616c652f6d61737465722e7376673f6c6f676f3d747261766973\"></a> <a href=\"https://pypi.org/project/markdata/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7c1e2b5816799738599e75a104484e07f36adf5f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d61726b646174612e7376673f636f6c6f72423d626c7565267374796c653d666c6174\"></a> <a href=\"https://pypi.org/project/markdata/#files\" rel=\"nofollow\"><img alt=\"wheels\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c7bc6e4abaa06e761c2d80c752c91f196b7bd929/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f776865656c732d2545322539432539332d3463312e7376673f6c6f6e6743616368653d74727565266c6f676f3d707974686f6e266c6f676f436f6c6f723d7768697465\"></a> <a href=\"https://black.readthedocs.io/en/stable/\" rel=\"nofollow\"><img alt=\"code style\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38b933ae256188058746a2c1404b3a513a69c262/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d2532333030302e737667\"></a></p>\n<p><strong>Markdata</strong> is a Python library and command-line tool for managing data (e.g., code, diagrams, tables, etc.) in Markdown files. Its goal is to promote one simple rule: prose and non-prose supplements (collectively referred to as \"data\") should be managed separately whenever possible. The benefits of this philosophy include:</p>\n<ul>\n<li>\n<p>Adherence to the <a href=\"https://en.wikipedia.org/wiki/Don%27t_repeat_yourself\" rel=\"nofollow\">DRY principle</a>: multiple files can include data from the same source.</p>\n</li>\n<li>\n<p>Higher-quality data: code examples can be tested, tables can be generated directly from serialization formats, diagrams can be built from source, etc.</p>\n</li>\n<li>\n<p>Human-friendly markup: less non-prose content means shorter files, which are easier to update and maintain.</p>\n</li>\n</ul>\n<p>See <a href=\"https://staticschool.com/blog/fixing-markdowns-shortcomings-with-python/\" rel=\"nofollow\"><em>Fixing Markdown\u2019s shortcomings with Python</em></a> for more information.</p>\n<h2>Installation</h2>\n<blockquote>\n<p>:exclamation: Markdata requires Python &gt;= 3.6.0. :exclamation:</p>\n</blockquote>\n<pre><span class=\"gp\">$</span> pip install markdata\n</pre>\n<h2>Usage</h2>\n<h6>As a library</h6>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">markdata</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">my_directive</span><span class=\"p\">():</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">markdown</span> <span class=\"o\">=</span> <span class=\"n\">markdata</span><span class=\"o\">.</span><span class=\"n\">markdata</span><span class=\"p\">(</span>\n    <span class=\"c1\"># A string or file-like object.</span>\n    <span class=\"n\">file_or_str</span><span class=\"p\">,</span>\n    <span class=\"c1\"># A dictionary of custom directives (optional).</span>\n    <span class=\"c1\">#</span>\n    <span class=\"c1\"># Format: {'name': my_directive}.</span>\n    <span class=\"n\">directives</span><span class=\"o\">=</span><span class=\"p\">{},</span>\n    <span class=\"c1\"># The type of front matter to parse (optional).</span>\n    <span class=\"n\">fm_format</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span>  <span class=\"c1\"># 'JSON', 'YAML', or 'TOML'</span>\n    <span class=\"c1\"># The directory that paths will be resolved relative to (optional).</span>\n    <span class=\"n\">root</span><span class=\"o\">=</span><span class=\"kc\">None</span>\n<span class=\"p\">)</span>\n</pre>\n<h6>From the command line</h6>\n<pre><span class=\"gp\">$</span> markdata --help\n<span class=\"go\">Usage: markdata [OPTIONS] SOURCE [DESTINATION]</span>\n\n<span class=\"go\">  A flavor-agnostic extension framework for Markdown.</span>\n\n<span class=\"go\">  Reads from &lt;SOURCE&gt; and writes to &lt;DESTINATION&gt;.</span>\n\n<span class=\"go\">  If &lt;SOURCE&gt; is a single file, it will be converted to Markdown and written</span>\n<span class=\"go\">  to &lt;DESTINATION&gt; (default: stdout).</span>\n\n<span class=\"go\">  If &lt;SOURCE&gt; is a directory, all child Markdata files will be converted to</span>\n<span class=\"go\">  Markdown and written to &lt;DESTINATION&gt; (default: overwrite &lt;SOURCE&gt;).</span>\n\n<span class=\"go\">Options:</span>\n<span class=\"go\">  --fm-type [JSON|YAML|TOML]  The type of front matter to parse.</span>\n<span class=\"go\">  --root PATH                 The directory that paths will be resolved</span>\n<span class=\"go\">                              relative to.</span>\n<span class=\"go\">  --directives PATH           The directory containing your custom directives.</span>\n<span class=\"go\">  --version                   Show the version and exit.</span>\n<span class=\"go\">  --help                      Show this message and exit.</span>\n</pre>\n<h2>Directives</h2>\n<p>Markdata's functionality is driven by <em>directives</em>, which are Markdown snippets that invoke Python functions. Directives can be defined in two ways:</p>\n<pre># Example directives\n\n&lt;!-- This is a \"block\" directive --&gt;\n\n```callout{'title': 'NOTE', 'classes': ['warning']}\nThis is a callout message.\n```\n\n&lt;!-- This is an \"inline\" directive --&gt;\n\n`table{'path': '../data/table.yml', 'classes': ['table'], 'caption': 'My data'}`\n</pre>\n<p>The <code>table</code> directive creates an HTML table from a YAML, JSON, or CSV file (with an optional caption and classes). After calling <code>markdata</code> on this file, the output would be something along the lines of:</p>\n<pre><span class=\"p\">&lt;</span><span class=\"nt\">table</span> <span class=\"na\">class</span><span class=\"o\">=</span><span class=\"s\">\"table\"</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">caption</span><span class=\"p\">&gt;</span>My data<span class=\"p\">&lt;/</span><span class=\"nt\">caption</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">thead</span><span class=\"p\">&gt;</span>\n        <span class=\"c\">&lt;!-- headers --&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">thead</span><span class=\"p\">&gt;</span>\n    <span class=\"p\">&lt;</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n        <span class=\"c\">&lt;!-- rows --&gt;</span>\n    <span class=\"p\">&lt;/</span><span class=\"nt\">tbody</span><span class=\"p\">&gt;</span>\n<span class=\"p\">&lt;/</span><span class=\"nt\">table</span><span class=\"p\">&gt;</span>\n</pre>\n<h3>Built-in directives</h3>\n<p>Markdata has a few built-in, general-purpose directives:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">table</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"n\">caption</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return an HTML table built from structured data (CSV, JSON, or YAML).</span>\n\n<span class=\"sd\">    `path` [required]: A path (relative to the directive-containing file) to a</span>\n<span class=\"sd\">           CSV, JSON, or YAML file.</span>\n\n<span class=\"sd\">    `classes` [optional]: A list of HTML classes to apply to the table.</span>\n\n<span class=\"sd\">    `caption` [optional]: A caption for the table.</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        `table{'path': 'table.yml', 'classes': ['table'], 'caption': '...'}`</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<p>The <code>table</code> directive (<a href=\"#directives\" rel=\"nofollow\">discussed above</a>) creates an HTML table from an external data source (CSV, JSON, or YAML). This allows you to avoid having to write and maintain tables in raw Markdown or HTML.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">document</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">span</span><span class=\"p\">:</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[])</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Return the contents of a document (or part of it).</span>\n\n<span class=\"sd\">    `path` [required]: A path (relative to the directive-containing file) to a</span>\n<span class=\"sd\">           local file.</span>\n\n<span class=\"sd\">    `span` [optional]: A tuple ([begin, end]) indicating the beginning and</span>\n<span class=\"sd\">           ending line of the snippet (defaults to the entire file).</span>\n\n<span class=\"sd\">    Example:</span>\n\n<span class=\"sd\">        `document{'path': 'my_file.py', 'span': (10, 13)}`</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<p>The <code>document</code> directive includes the content of an external text file (of any type\u2014Markdown, Python, etc.).</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">code</span><span class=\"p\">(</span><span class=\"n\">front_matter</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">,</span> <span class=\"n\">span</span><span class=\"o\">=</span><span class=\"p\">[],</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return the contents of a document (or part of it) as a code block.</span>\n\n<span class=\"sd\">    `path` [required]: A path (relative to the directive-containing file) to a</span>\n<span class=\"sd\">           local file.</span>\n\n<span class=\"sd\">    `span` [optional]: A tuple ([begin, end]) indicating the beginning and</span>\n<span class=\"sd\">           ending line of the snippet (defaults to the entire file).</span>\n\n<span class=\"sd\">    `lang` [optional]: The code block's info string. If not defined, it will be</span>\n<span class=\"sd\">           inferred from the given file extension.</span>\n\n<span class=\"sd\">    Example:</span>\n<span class=\"sd\">        `code{'path': 'my_file.py', 'span': [10, 13], 'lang': 'python'}`</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<p>The <code>code</code> directive includes the content of an external source code formatted as a <a href=\"https://spec.commonmark.org/0.29/#fenced-code-blocks\" rel=\"nofollow\">fenced code block</a>. This allows you to, for example, write your code examples in their own files (which can be properly tested and linted).</p>\n<h3>Writing your own</h3>\n<blockquote>\n<p><strong>NOTE</strong>: The first argument passed to custom directives will be a dictionary created from the file's front matter (<code>{}</code> by default).</p>\n</blockquote>\n<p>While <code>table</code> and <code>document</code> attempt to solve the most common needs, the true power of Markdata comes from leveraging Python in <em>your own</em> directives.</p>\n<p>There are three steps to creating a directive:</p>\n<ol>\n<li>\n<p>Design your <em>directive definition</em>:  Choose either an inline or block directive and decide what arguments it'll accept.</p>\n</li>\n<li>\n<p>Write a Python function: This function needs to accept the arguments defined in step (1). So, if you were re-implementing the built-in <code>table</code> directive, you'd have a directive definition of <code>table{'path': '../data/table.yml', 'classes': ['table'], 'caption': 'My data'}</code> and a function definition of <code>table(fm: Dict, path: str, classes: List[str] = [], caption: str = \"\") -&gt; str:</code>. When using block directives, the first argument passed to the backend function is its content (see our <a href=\"https://github.com/errata-ai/markdata/blob/master/tests/block/__init__.py\" rel=\"nofollow\">admonition example</a>).</p>\n</li>\n<li>\n<p>Associate your directive with your function:</p>\n<ul>\n<li>Using the library:</li>\n</ul>\n<pre><span class=\"c1\"># When using Markdata as a library, you simply pass your function to `markdata`:</span>\n<span class=\"kn\">import</span> <span class=\"nn\">markdata</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">implementation</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">):</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"n\">markdown</span> <span class=\"o\">=</span> <span class=\"n\">markdata</span><span class=\"o\">.</span><span class=\"n\">markdata</span><span class=\"p\">(</span><span class=\"n\">file_or_str</span><span class=\"p\">,</span> <span class=\"n\">directives</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'directive'</span><span class=\"p\">:</span> <span class=\"n\">implementation</span><span class=\"p\">})</span>\n</pre>\n<ul>\n<li>Using the command-line tool: Markdata will associate all Python modules with their <code>main</code> function found in the   directory passed to <code>--directives='my_dir'</code>.</li>\n</ul>\n</li>\n</ol>\n<p>Check out <a href=\"https://github.com/errata-ai/Markdata/tree/master/tests\" rel=\"nofollow\">our test cases</a> for some examples.</p>\n<h4>Converters</h4>\n<p>Converters are utilities that you can import and use in your own directives.</p>\n<pre><span class=\"c1\"># from markdata.converters import to_html_table</span>\n<span class=\"k\">def</span> <span class=\"nf\">to_html_table</span><span class=\"p\">(</span>\n    <span class=\"n\">rows</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]],</span> <span class=\"n\">caption</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s2\">\"\"</span><span class=\"p\">,</span> <span class=\"n\">classes</span><span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"Convert the given rows into an HTML table.</span>\n\n<span class=\"sd\">    The first entry in `rows` will be used as the table headers.</span>\n<span class=\"sd\">    \"\"\"</span>\n</pre>\n<h2>FAQ</h2>\n<blockquote>\n<p>Why only Markdown? What about AsciiDoc and reStructuredText?</p>\n</blockquote>\n<p>AsciiDoc and reStructuredText have more feature-rich syntaxes than Markdown. Many of Markdata's features are available out-of-the-box (in some form) in AsciiDoc and reStructuredText.</p>\n<p>That said, Markdown has a much larger ecosystem of parsers (practically every language has a <em>native</em> Markdown library), editors (and editor plugins), linters, and static site generators than both AsciiDoc and reStructuredText.</p>\n<p>Markdata's goal is to enrich Markdown's syntax without hurting its portability (see the next question).</p>\n<blockquote>\n<p>What \"flavors\" of Markdown does Markdata support?</p>\n</blockquote>\n<p><em>All of them</em>.</p>\n<p>One of the common complaints about Markdown is that many of its best features are tied to a particular \"flavor\" (see <a href=\"https://johnmacfarlane.net/babelmark2/faq.html\" rel=\"nofollow\">Babelmark</a>) that may not be compatible with other Markdown-related tooling.</p>\n<p>Markdata avoids this problem by acting as more of a \"preprocessor\" (i.e., <code>Markdata + Markdown &lt;=&gt; Sass + CSS</code>) than another Markdown implementation. Its users have full control over what it outputs\u2014meaning that they can choose to output raw HTML (effectively bypassing the problem of flavors altogether) or make use of features limited to their favorite flavor:</p>\n<p align=\"center\">\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/270e5a81f2af53bee82be62a0249ecc4a1c7a312/68747470733a2f2f757365722d696d616765732e67697468756275736572636f6e74656e742e636f6d2f383738353032352f35323135373338342d38623162353738302d323634332d313165392d383364652d3832386432653534313734322e706e67\">\n</p>\n<blockquote>\n<p>What if I'm already using a static site generator (SSG)?</p>\n</blockquote>\n<p>While many SSGs have built-in support for external data sources (e.g., <a href=\"https://jekyllrb.com/docs/datafiles/\" rel=\"nofollow\">Jekyll</a>, <a href=\"https://gohugo.io/templates/data-templates/\" rel=\"nofollow\">Hugo</a>, and <a href=\"https://www.gatsbyjs.org/tutorial/part-four/\" rel=\"nofollow\">Gatsby</a>), there are still benefits to using Markdata:</p>\n<ul>\n<li>\n<p>As dicussed in the previous question, Markdata <em>doesn't</em> introduce new Markdown syntax\u2014meaning Markdata directives can be used with <em>any</em> SSG that supports Markdown. This means that you can change SSGs without having to update the syntax (i.e., template language) for accessing your data.</p>\n</li>\n<li>\n<p>Markdata's ability to manage data is far more powerful than what most SSGs offer: instead of merely iterating over static resource files, you have full access to Python and its library ecosystem. So, for example, you can</p>\n<ul>\n<li>fetch data from APIs using the ultra-popular <a href=\"http://docs.python-requests.org/en/master/\" rel=\"nofollow\">Requests</a> library;</li>\n<li>include plots and diagrams created with <a href=\"https://github.com/mwaskom/seaborn\" rel=\"nofollow\">seaborn</a>; or</li>\n<li>transform data using <a href=\"https://github.com/pandas-dev/pandas\" rel=\"nofollow\">pandas</a>.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6511933, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "9da05dc53ed64efe1e4a0f46831f3bde", "sha256": "2ef2ea7de7a5611d2e2dacfce84a1b26ea2fd70037dc38c8bc9877a30e44b30c"}, "downloads": -1, "filename": "markdata-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9da05dc53ed64efe1e4a0f46831f3bde", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 9378, "upload_time": "2019-02-03T01:59:35", "upload_time_iso_8601": "2019-02-03T01:59:35.742402Z", "url": "https://files.pythonhosted.org/packages/e7/f4/4f725586af46cb90bf982bb6eaebd6249b5dccca0852ee11b33825789368/markdata-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1217b4f10ca2fb4284b7f24ef7ee8d1b", "sha256": "266ef6a914e851bb854c423a2923f6e41f2f3722584b2da79e038719b2623df2"}, "downloads": -1, "filename": "markdata-0.1.0.tar.gz", "has_sig": false, "md5_digest": "1217b4f10ca2fb4284b7f24ef7ee8d1b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 8908, "upload_time": "2019-02-03T01:59:37", "upload_time_iso_8601": "2019-02-03T01:59:37.700424Z", "url": "https://files.pythonhosted.org/packages/7e/3a/1b76ccb49fb390a2392c7fab93d0400faccef32fc17809a02da87d30e3a2/markdata-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "578fff9fb22ae41c63123bc609f1902a", "sha256": "d73acb29d820ea45077d19cfb59519ccd6f83e36cdee78d332d91b808b4fe3e5"}, "downloads": -1, "filename": "markdata-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "578fff9fb22ae41c63123bc609f1902a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 9849, "upload_time": "2019-02-03T22:51:38", "upload_time_iso_8601": "2019-02-03T22:51:38.884560Z", "url": "https://files.pythonhosted.org/packages/54/a2/0164c126a446b05af4b7d3d4e0ebdf6c37813f73f3990a35005559fb1f15/markdata-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfb60987a699a8348777adb7d7856250", "sha256": "e3b220e295bacfe10a90be69619e7841aebd3466f59c2112be0a22ed28db7ce3"}, "downloads": -1, "filename": "markdata-0.2.0.tar.gz", "has_sig": false, "md5_digest": "cfb60987a699a8348777adb7d7856250", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9909, "upload_time": "2019-02-03T22:51:40", "upload_time_iso_8601": "2019-02-03T22:51:40.369142Z", "url": "https://files.pythonhosted.org/packages/80/bc/7e3aea52f2643e099199286cc14324b10493c180cee7a6c7a733f9273bf5/markdata-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c7c6143e369b193404ecfaf43380a276", "sha256": "42aa12b6fa00214c59517947cd6255d4dca5f7032958c7203fd168cd3d237a29"}, "downloads": -1, "filename": "markdata-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c7c6143e369b193404ecfaf43380a276", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10650, "upload_time": "2019-02-03T23:06:15", "upload_time_iso_8601": "2019-02-03T23:06:15.808948Z", "url": "https://files.pythonhosted.org/packages/4b/0d/2bd1414b99f6c82a93ec325465beb4680e3a1f6f3ef27849070e37ad0a32/markdata-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "937113524d32e51bb50d8ca3cd1401ec", "sha256": "9afb9d8d4e171c5495e23c00aa9344c06e1df989922759a3f691230c33ded26c"}, "downloads": -1, "filename": "markdata-0.2.1.tar.gz", "has_sig": false, "md5_digest": "937113524d32e51bb50d8ca3cd1401ec", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9355, "upload_time": "2019-02-03T23:06:17", "upload_time_iso_8601": "2019-02-03T23:06:17.372618Z", "url": "https://files.pythonhosted.org/packages/3a/a0/bfb1f6e9a20b915966f74bbb4b1f9e6a61bc764fa4ec671fb95446cc0ba8/markdata-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "7963c5006e85cab60cd8dc9d673ea343", "sha256": "f3b1586a0f3f8e09cda342612c7d65d5cfc1a4e1a37942edb75dffc5828eface"}, "downloads": -1, "filename": "markdata-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7963c5006e85cab60cd8dc9d673ea343", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10651, "upload_time": "2019-02-03T23:13:20", "upload_time_iso_8601": "2019-02-03T23:13:20.665039Z", "url": "https://files.pythonhosted.org/packages/53/a8/82bc6dd20fc2727efd01fac382ceb2be839a1bed1cd03b2b29873c421b6d/markdata-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7baad22d48a01222a10d280961bec76e", "sha256": "9355b0090bd6ba86aeaee4f395f986f7c7b8e391ad0bec2ff86b938f4a74add3"}, "downloads": -1, "filename": "markdata-0.2.2.tar.gz", "has_sig": false, "md5_digest": "7baad22d48a01222a10d280961bec76e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9354, "upload_time": "2019-02-03T23:13:22", "upload_time_iso_8601": "2019-02-03T23:13:22.041228Z", "url": "https://files.pythonhosted.org/packages/d3/04/63a8b6f65a9b78f8571f9acfde7089b7adf7a7b5576cf106f64fe77ebe62/markdata-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "cdeafd076d15bf9aaeea216f0c6b7988", "sha256": "4d955d29628addf6a76ccbfed68906f3d832b02793a8d30cb77df252bb616a33"}, "downloads": -1, "filename": "markdata-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cdeafd076d15bf9aaeea216f0c6b7988", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 11527, "upload_time": "2019-02-03T23:26:01", "upload_time_iso_8601": "2019-02-03T23:26:01.591291Z", "url": "https://files.pythonhosted.org/packages/17/60/bd1a1ea5458d345d3ac8386b4ab1bb38afb55329a3fd6851379340f25729/markdata-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9842e033d67ab7cfc43acee0ace363f4", "sha256": "0508a8cf9889383c495a67283a6ecef239fd81bcac148fa20d12d8ccc52f04f4"}, "downloads": -1, "filename": "markdata-0.2.3.tar.gz", "has_sig": false, "md5_digest": "9842e033d67ab7cfc43acee0ace363f4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 10564, "upload_time": "2019-02-03T23:26:03", "upload_time_iso_8601": "2019-02-03T23:26:03.105336Z", "url": "https://files.pythonhosted.org/packages/d3/81/b57345de9ee14bfb9b299be07b9a21a4570c966a5b00847f99b4e8c176d8/markdata-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "2b06acf798962fa5d724fad4b9fda543", "sha256": "4581ace9e2766fcd497890b54bc34e19b1dca82eb60394de3cb9bee4a6ac6293"}, "downloads": -1, "filename": "markdata-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2b06acf798962fa5d724fad4b9fda543", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 10717, "upload_time": "2019-02-04T00:32:58", "upload_time_iso_8601": "2019-02-04T00:32:58.740349Z", "url": "https://files.pythonhosted.org/packages/4f/73/249f7c6608d4d47fc28cb717d302be380ee58cc1229011e529030596bd3c/markdata-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "23e9c61d5f43e4009491f13bac5be17f", "sha256": "4fb12f3d25e4ebea041e2c67983b9726fbaa6f8f1e7a39f2837c1e9dc6ea68f2"}, "downloads": -1, "filename": "markdata-0.2.4.tar.gz", "has_sig": false, "md5_digest": "23e9c61d5f43e4009491f13bac5be17f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 9918, "upload_time": "2019-02-04T00:33:00", "upload_time_iso_8601": "2019-02-04T00:33:00.412205Z", "url": "https://files.pythonhosted.org/packages/33/85/84d2c22d8fdd641eae016232e08e49a432d7b483ea088e633798d5fd79d6/markdata-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "e9708bbf038940d62d5a223cd930e416", "sha256": "a4b8fc2458eb510786791b9bebdb7ec346ed0f6a1dacc9406fb83efd80f3d10e"}, "downloads": -1, "filename": "markdata-0.2.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e9708bbf038940d62d5a223cd930e416", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 11606, "upload_time": "2019-02-04T21:02:28", "upload_time_iso_8601": "2019-02-04T21:02:28.549701Z", "url": "https://files.pythonhosted.org/packages/e0/81/f9f5081cce6dee5a909a4575fbb6e16862cecc59aad0fd44a79030994a05/markdata-0.2.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d7bd2eea57fef184b6f4f61ac03ab3be", "sha256": "7709fab069f3d2b1f3f891dd0328b554277ef3ef626793a3e38fc6606fa9bc94"}, "downloads": -1, "filename": "markdata-0.2.5.tar.gz", "has_sig": false, "md5_digest": "d7bd2eea57fef184b6f4f61ac03ab3be", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 10633, "upload_time": "2019-02-04T21:02:30", "upload_time_iso_8601": "2019-02-04T21:02:30.050368Z", "url": "https://files.pythonhosted.org/packages/5f/71/44331a19ae0903cf7df7687dda8597824aca6bec8b46dbb91efb9de1bcb8/markdata-0.2.5.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "6979b83cc0b93c1a12a3e2b1ed359af1", "sha256": "fc7216a245d491a337dd3348bdd70842da554bdedea86c517f1d0505107e7e06"}, "downloads": -1, "filename": "markdata-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6979b83cc0b93c1a12a3e2b1ed359af1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 12500, "upload_time": "2019-02-07T00:49:17", "upload_time_iso_8601": "2019-02-07T00:49:17.905647Z", "url": "https://files.pythonhosted.org/packages/45/4c/3dde069ed5ae6b1dacd6cc5c5c7a6be168da7bb59b9c3b63475d3c1ae63d/markdata-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "957c0212153722c49a04317428cfe416", "sha256": "305a6681869192ecc42f62b5f8715ce3ad6a6eea4f026b7531abfc70c55c7af6"}, "downloads": -1, "filename": "markdata-0.3.0.tar.gz", "has_sig": false, "md5_digest": "957c0212153722c49a04317428cfe416", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11460, "upload_time": "2019-02-07T00:49:19", "upload_time_iso_8601": "2019-02-07T00:49:19.756790Z", "url": "https://files.pythonhosted.org/packages/53/cb/96454670cd228d7efd1d36e19dc44ddc42534ff3e460c6ee584f15beb017/markdata-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "058aa10ed4835baacbc4ddd6d8e1a507", "sha256": "350538052485b9aae24e0167a5544fcfc23c5bfc5330721bbf81ad1123bd0524"}, "downloads": -1, "filename": "markdata-0.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "058aa10ed4835baacbc4ddd6d8e1a507", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 12502, "upload_time": "2019-02-07T01:06:41", "upload_time_iso_8601": "2019-02-07T01:06:41.775627Z", "url": "https://files.pythonhosted.org/packages/5c/c1/2a515d6ab0ad5c60deea83355ef82e68366897504b760bf6988d6b9d1c42/markdata-0.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dda6d7c2e7def6d0b2a98af3186ee3d2", "sha256": "90ff823a076be9feb8ed82b3eacff07bb1440247e34108481a37129a1a524257"}, "downloads": -1, "filename": "markdata-0.3.1.tar.gz", "has_sig": false, "md5_digest": "dda6d7c2e7def6d0b2a98af3186ee3d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11463, "upload_time": "2019-02-07T01:06:43", "upload_time_iso_8601": "2019-02-07T01:06:43.228494Z", "url": "https://files.pythonhosted.org/packages/41/3a/324ceb5c9c3e360bffdbd93a9b8c33f2849cb5cf9fc6701a322eaee9ae1f/markdata-0.3.1.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "43d7092f57bb80ebcebb2a2d0e787e3a", "sha256": "46caa47b4bfb82c93ee8b187674054d66a9fa9aa3da8acf1bc5ce420c0f8a880"}, "downloads": -1, "filename": "markdata-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "43d7092f57bb80ebcebb2a2d0e787e3a", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 12889, "upload_time": "2019-02-14T20:20:27", "upload_time_iso_8601": "2019-02-14T20:20:27.165901Z", "url": "https://files.pythonhosted.org/packages/03/1d/b4d013e5ac6e8db20a2198a8b2e69c51ec5457a2bdc3850509e1f593948f/markdata-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e699528cc47b31bd82b913d36c7e2c04", "sha256": "d25eb82aa9fcc3a9b4bbed0cf26063956ee195b86ed091f305f3d9024801a8e4"}, "downloads": -1, "filename": "markdata-0.4.0.tar.gz", "has_sig": false, "md5_digest": "e699528cc47b31bd82b913d36c7e2c04", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12086, "upload_time": "2019-02-14T20:20:29", "upload_time_iso_8601": "2019-02-14T20:20:29.036877Z", "url": "https://files.pythonhosted.org/packages/7b/b1/5da588e4ede1cf1f5838aaa03e04b47c3bf6a39ef4e3a86acddfac1887fd/markdata-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "cb82a472e8616e8aa3e9f9bbfa163c23", "sha256": "324f07da2964d0d1f89ccf3691bf970cbd4a5ee7409ac55a6e84b77a79103325"}, "downloads": -1, "filename": "markdata-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cb82a472e8616e8aa3e9f9bbfa163c23", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 12669, "upload_time": "2019-07-23T19:23:39", "upload_time_iso_8601": "2019-07-23T19:23:39.148439Z", "url": "https://files.pythonhosted.org/packages/52/a0/989f2280e73fb96a1f7f917efed64eb6631e590bd75fb1a1ec6ddd0e1735/markdata-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "802258b712e5466b32f18317ec845f17", "sha256": "572f439f370523e99a8d4cac73b61c110c5b0ed726d36314d085e1a0f77a1776"}, "downloads": -1, "filename": "markdata-0.4.1.tar.gz", "has_sig": false, "md5_digest": "802258b712e5466b32f18317ec845f17", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 11742, "upload_time": "2019-07-23T19:23:41", "upload_time_iso_8601": "2019-07-23T19:23:41.068065Z", "url": "https://files.pythonhosted.org/packages/a4/f9/12d6f3b256f333a723f3e291c7dad9047138b23638a0d1d5aa18d0ad70b7/markdata-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "c9bbcc9717a3698f6ec1519d280d7fab", "sha256": "963a7eb327afdc0a15ae9db5dcb332cdcaa4814ff3bd3a5048186a9b00781209"}, "downloads": -1, "filename": "markdata-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c9bbcc9717a3698f6ec1519d280d7fab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 13029, "upload_time": "2020-01-06T20:15:34", "upload_time_iso_8601": "2020-01-06T20:15:34.158926Z", "url": "https://files.pythonhosted.org/packages/5e/b9/d03f7d787c587e0edcceec2fbf588ef162cf3f97ef29bef9d80fdaa05720/markdata-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b8a663ced5e102abdbd3ab00771a8b47", "sha256": "051d6db6d1dfd1297c49ea9778f976e68e558918d8d721b99ea088fdf3cb3b39"}, "downloads": -1, "filename": "markdata-0.5.0.tar.gz", "has_sig": false, "md5_digest": "b8a663ced5e102abdbd3ab00771a8b47", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12114, "upload_time": "2020-01-06T20:15:35", "upload_time_iso_8601": "2020-01-06T20:15:35.523287Z", "url": "https://files.pythonhosted.org/packages/cd/fc/c0e7753c695577dce2ed4b4ab902dbaf4a67aa14abe47079b8be6a56c29b/markdata-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "0f1ac70da38d366243e6c82ddb4d885f", "sha256": "272f65830981a41c7aed891e7beddf1cfc962b734c083fcc1da84f8a0dde8b0b"}, "downloads": -1, "filename": "markdata-0.5.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f1ac70da38d366243e6c82ddb4d885f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 13033, "upload_time": "2020-01-23T01:41:16", "upload_time_iso_8601": "2020-01-23T01:41:16.885854Z", "url": "https://files.pythonhosted.org/packages/86/15/6eb825946007ba39ceef085efe5f9309353c6d7d7f8f23fa544d06ff68c1/markdata-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e5e0ca1614ee688ddf6a71d741e4b26c", "sha256": "2f69680d7a2ce32e3a648408ecdd3ad4b5990d8bd80afdbf42af11fb58218d5e"}, "downloads": -1, "filename": "markdata-0.5.1.tar.gz", "has_sig": false, "md5_digest": "e5e0ca1614ee688ddf6a71d741e4b26c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12136, "upload_time": "2020-01-23T01:41:18", "upload_time_iso_8601": "2020-01-23T01:41:18.215498Z", "url": "https://files.pythonhosted.org/packages/a7/4d/ddc23f0bd89d0cc8a96a7fee35c28f333fa9e0afab6c2a2c8832e54632a8/markdata-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "1cbb8b631cd2de29c9e6f804ffef240c", "sha256": "9bc51eb08441c45ac7498a746ac7bb0258f89ea61a971201265341aac0cad55a"}, "downloads": -1, "filename": "markdata-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1cbb8b631cd2de29c9e6f804ffef240c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 13023, "upload_time": "2020-01-24T04:43:06", "upload_time_iso_8601": "2020-01-24T04:43:06.089027Z", "url": "https://files.pythonhosted.org/packages/bf/10/c8bc29b8de61bc4dcf096a030ad495115f23108af1d170f2c87801a566d8/markdata-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3802d8fae42ee02166772a934ee73aad", "sha256": "295d9b4786ce321a9ff1b993021619484e2a156a7d00fc842016d6061df0777c"}, "downloads": -1, "filename": "markdata-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3802d8fae42ee02166772a934ee73aad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12127, "upload_time": "2020-01-24T04:43:07", "upload_time_iso_8601": "2020-01-24T04:43:07.790201Z", "url": "https://files.pythonhosted.org/packages/ee/e4/89bab1d448a5886f5e97b086f693d8a4d52b2d79b0105625959ac91c4f74/markdata-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cbb8b631cd2de29c9e6f804ffef240c", "sha256": "9bc51eb08441c45ac7498a746ac7bb0258f89ea61a971201265341aac0cad55a"}, "downloads": -1, "filename": "markdata-0.5.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1cbb8b631cd2de29c9e6f804ffef240c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6.0", "size": 13023, "upload_time": "2020-01-24T04:43:06", "upload_time_iso_8601": "2020-01-24T04:43:06.089027Z", "url": "https://files.pythonhosted.org/packages/bf/10/c8bc29b8de61bc4dcf096a030ad495115f23108af1d170f2c87801a566d8/markdata-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3802d8fae42ee02166772a934ee73aad", "sha256": "295d9b4786ce321a9ff1b993021619484e2a156a7d00fc842016d6061df0777c"}, "downloads": -1, "filename": "markdata-0.5.2.tar.gz", "has_sig": false, "md5_digest": "3802d8fae42ee02166772a934ee73aad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6.0", "size": 12127, "upload_time": "2020-01-24T04:43:07", "upload_time_iso_8601": "2020-01-24T04:43:07.790201Z", "url": "https://files.pythonhosted.org/packages/ee/e4/89bab1d448a5886f5e97b086f693d8a4d52b2d79b0105625959ac91c4f74/markdata-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:46 2020"}