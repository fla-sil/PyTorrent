{"info": {"author": "Hans Smit", "author_email": "jcsmit@xs4all.nl", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Software Development :: Build Tools"], "description": "mrg_gitlab_template\n===================\n\nA Python gitlab template for initiating new projects in gitlab. The\nboilerplate / template files that are copied are based on best-practices\nfor Python package development. The new project contains the following\nfeatures,\n\n* ``tests`` directory for defining unittests\n* ``examples`` directory for placing example snippets\n* ``docs`` \n    Sphinx based on the RTD theme for API and\n    architectural documentation. It also enables UML\n    diagrams to be dynamically generated based on PlantUML\n    and graphviz tool.\n* ``run.py`` main script entry point with a generic argument parser implementation.\n* ``versioneer.py`` an automated version numbering system.\n* ``pylint.cfg`` file for source code lexical analysis.\n* ``setup.py``: file for wheel file building and deployment to PyPI server.\n* ``.gitlab-ci.yml`` file for continuous integration for,\n    * unit testing\n    * code coverage\n    * lint analysis\n    * Sphinx documentation building\n    * Pages documentation generation\n    * deployment to PyPI server.\n\n\n\n\nInstallation\n------------\n\nInstall using pip::\n\n    pip install mrg_gitlab_template\n\nOr to upgrade::\n\n    pip install --upgrade --no-cache-dir mrg_gitlab_template\n\n\nCommand line usage\n------------------\n\nThe ``pygitcopy`` is a command line utility program to create a new project.\nThe help switch provides the command line arguments::\n\n    $ pygitcopy --help\n\n    usage: pygitcopy [-h] -g GROUP [-p PAGES_DOMAIN] [-u GITLAB_URL] [-a AUTHOR]\n                     [-e EMAIL] [-y YEAR] [-d DIRECTORY] [-v]\n                     package\n\n    Create new project from template\n\n    positional arguments:\n      package               package name\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -g GROUP, --group GROUP\n                            the gitlab account. Example: mrg-tools, sci-fv, your\n                            account name, etc (default: None)\n      -p PAGES_DOMAIN, --pages-domain PAGES_DOMAIN\n                            the gitlab pages url domain. Example: gitlab.io,\n                            io.esa.int (default: gitlab.io)\n      -u GITLAB_URL, --gitlab-url GITLAB_URL\n                            the gitlab pages url domain. Example: gitlab.com,\n                            gitlab.esa.int (default: gitlab.com)\n      -a AUTHOR, --author AUTHOR\n                            author name (default: {{author}})\n      -e EMAIL, --email EMAIL\n                            author email (default: {{email}})\n      -y YEAR, --year YEAR  author email (default: <this-year>)\n      -d DIRECTORY, --directory DIRECTORY\n                            base directory location (default: .)\n      -v, --verbosity       Increase output verbosity (default: 0)\n\n\nCreating a new project\n----------------------\n\nExecute the following command::\n\n    pygitcopy <package> --group <group> --directory <new-project-base-dir> -vv\n\nExecute the following commands to add the new project to gitlab::\n\n    cd <new-project-base-dir>/<name>\n    git init\n    git add .\n    git commit -m \"First commit\"\n\nNavigate to https://gitlab.com/projects/new\nand create a new <name> project. Your local can be linked to this repository\nusing the following commands::\n\n\n\n    git remote add origin https://gitlab.com/<group>/<name>.git\n    git push -u origin --all\n    git push -u origin --tags\n\nTo delete a repository from gitlab, use this link and scroll to the\nend,\n\n* https://gitlab.com/<group>/<name>/edit\n\n\nCreate \"testproj\" Example\n-------------------------\n\nThis example will show you how to,\n\n* create a virtual environment\n* create a new gitlab repository\n* create a new local project based on this template project\n* link the local project to the repository\n* commit and push the project files to the repository\n\nInstall system requirements::\n\n    sudo apt-get install git\n    sudo apt-get install virtualenv\n    sudo apt-get install plantuml\n\nCreate the new testproj repository project in the gitlab web site:\n\n    firefox https://gitlab.com/projects/new\n\nCreate virtual environment::\n\n    mkdir ~/venv\n    cd ~venv\n    virtualenv -p python3 py3\n    source py3/bin/activate\n\n\nInstall the template package::\n\n    pip install mrg_gitlab_template\n\n\nCreate a new local project and upload to git::\n\n    cd ~/PycharmProjects/\n    pygitcopy testproj --group mrg-tools\n    cd testproj\n    git init\n    git add .\n    git remote add origin https://gitlab.com/mrg-tools/testproj.git\n    git push -u origin --all\n\nCheck the gitlab pipelines and generated files,\n\n* https://gitlab.com/mrg-tools/testproj/pipelines\n* https://mrg-tools.gitlab.io/testproj\n* https://mrg-tools.gitlab.io/testproj/doc/\n\nPrepare the project for development::\n\n    pip install -r requirements-dev.txt\n    export PYTHONPATH=$PWD\n\nRun some tests::\n\n    pylint --pylint-rc=pylint.cfg testproj\n    pytest\n    pytest --cov\n\nBuild the documentation::\n\n    cd docs\n    make html\n    firefox build/html/index.html\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "mrg_gitlab_template", "package_url": "https://pypi.org/project/mrg_gitlab_template/", "platform": "", "project_url": "https://pypi.org/project/mrg_gitlab_template/", "project_urls": null, "release_url": "https://pypi.org/project/mrg_gitlab_template/0.6.3/", "requires_dist": null, "requires_python": "", "summary": "A Python gitlab template for initiating new projects in gitlab", "version": "0.6.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A Python gitlab template for initiating new projects in gitlab. The\nboilerplate / template files that are copied are based on best-practices\nfor Python package development. The new project contains the following\nfeatures,</p>\n<ul>\n<li><tt>tests</tt> directory for defining unittests</li>\n<li><tt>examples</tt> directory for placing example snippets</li>\n<li><dl>\n<dt><tt>docs</tt></dt>\n<dd>Sphinx based on the RTD theme for API and\narchitectural documentation. It also enables UML\ndiagrams to be dynamically generated based on PlantUML\nand graphviz tool.</dd>\n</dl>\n</li>\n<li><tt>run.py</tt> main script entry point with a generic argument parser implementation.</li>\n<li><tt>versioneer.py</tt> an automated version numbering system.</li>\n<li><tt>pylint.cfg</tt> file for source code lexical analysis.</li>\n<li><tt>setup.py</tt>: file for wheel file building and deployment to PyPI server.</li>\n<li><dl>\n<dt><tt><span class=\"pre\">.gitlab-ci.yml</span></tt> file for continuous integration for,</dt>\n<dd><ul>\n<li>unit testing</li>\n<li>code coverage</li>\n<li>lint analysis</li>\n<li>Sphinx documentation building</li>\n<li>Pages documentation generation</li>\n<li>deployment to PyPI server.</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install using pip:</p>\n<pre>pip install mrg_gitlab_template\n</pre>\n<p>Or to upgrade:</p>\n<pre>pip install --upgrade --no-cache-dir mrg_gitlab_template\n</pre>\n</div>\n<div id=\"command-line-usage\">\n<h2>Command line usage</h2>\n<p>The <tt>pygitcopy</tt> is a command line utility program to create a new project.\nThe help switch provides the command line arguments:</p>\n<pre>$ pygitcopy --help\n\nusage: pygitcopy [-h] -g GROUP [-p PAGES_DOMAIN] [-u GITLAB_URL] [-a AUTHOR]\n                 [-e EMAIL] [-y YEAR] [-d DIRECTORY] [-v]\n                 package\n\nCreate new project from template\n\npositional arguments:\n  package               package name\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -g GROUP, --group GROUP\n                        the gitlab account. Example: mrg-tools, sci-fv, your\n                        account name, etc (default: None)\n  -p PAGES_DOMAIN, --pages-domain PAGES_DOMAIN\n                        the gitlab pages url domain. Example: gitlab.io,\n                        io.esa.int (default: gitlab.io)\n  -u GITLAB_URL, --gitlab-url GITLAB_URL\n                        the gitlab pages url domain. Example: gitlab.com,\n                        gitlab.esa.int (default: gitlab.com)\n  -a AUTHOR, --author AUTHOR\n                        author name (default: {{author}})\n  -e EMAIL, --email EMAIL\n                        author email (default: {{email}})\n  -y YEAR, --year YEAR  author email (default: &lt;this-year&gt;)\n  -d DIRECTORY, --directory DIRECTORY\n                        base directory location (default: .)\n  -v, --verbosity       Increase output verbosity (default: 0)\n</pre>\n</div>\n<div id=\"creating-a-new-project\">\n<h2>Creating a new project</h2>\n<p>Execute the following command:</p>\n<pre>pygitcopy &lt;package&gt; --group &lt;group&gt; --directory &lt;new-project-base-dir&gt; -vv\n</pre>\n<p>Execute the following commands to add the new project to gitlab:</p>\n<pre>cd &lt;new-project-base-dir&gt;/&lt;name&gt;\ngit init\ngit add .\ngit commit -m \"First commit\"\n</pre>\n<p>Navigate to <a href=\"https://gitlab.com/projects/new\" rel=\"nofollow\">https://gitlab.com/projects/new</a>\nand create a new &lt;name&gt; project. Your local can be linked to this repository\nusing the following commands:</p>\n<pre>git remote add origin https://gitlab.com/&lt;group&gt;/&lt;name&gt;.git\ngit push -u origin --all\ngit push -u origin --tags\n</pre>\n<p>To delete a repository from gitlab, use this link and scroll to the\nend,</p>\n<ul>\n<li><a href=\"https://gitlab.com\" rel=\"nofollow\">https://gitlab.com</a>/&lt;group&gt;/&lt;name&gt;/edit</li>\n</ul>\n</div>\n<div id=\"create-testproj-example\">\n<h2>Create \u201ctestproj\u201d Example</h2>\n<p>This example will show you how to,</p>\n<ul>\n<li>create a virtual environment</li>\n<li>create a new gitlab repository</li>\n<li>create a new local project based on this template project</li>\n<li>link the local project to the repository</li>\n<li>commit and push the project files to the repository</li>\n</ul>\n<p>Install system requirements:</p>\n<pre>sudo apt-get install git\nsudo apt-get install virtualenv\nsudo apt-get install plantuml\n</pre>\n<p>Create the new testproj repository project in the gitlab web site:</p>\n<blockquote>\nfirefox <a href=\"https://gitlab.com/projects/new\" rel=\"nofollow\">https://gitlab.com/projects/new</a></blockquote>\n<p>Create virtual environment:</p>\n<pre>mkdir ~/venv\ncd ~venv\nvirtualenv -p python3 py3\nsource py3/bin/activate\n</pre>\n<p>Install the template package:</p>\n<pre>pip install mrg_gitlab_template\n</pre>\n<p>Create a new local project and upload to git:</p>\n<pre>cd ~/PycharmProjects/\npygitcopy testproj --group mrg-tools\ncd testproj\ngit init\ngit add .\ngit remote add origin https://gitlab.com/mrg-tools/testproj.git\ngit push -u origin --all\n</pre>\n<p>Check the gitlab pipelines and generated files,</p>\n<ul>\n<li><a href=\"https://gitlab.com/mrg-tools/testproj/pipelines\" rel=\"nofollow\">https://gitlab.com/mrg-tools/testproj/pipelines</a></li>\n<li><a href=\"https://mrg-tools.gitlab.io/testproj\" rel=\"nofollow\">https://mrg-tools.gitlab.io/testproj</a></li>\n<li><a href=\"https://mrg-tools.gitlab.io/testproj/doc/\" rel=\"nofollow\">https://mrg-tools.gitlab.io/testproj/doc/</a></li>\n</ul>\n<p>Prepare the project for development:</p>\n<pre>pip install -r requirements-dev.txt\nexport PYTHONPATH=$PWD\n</pre>\n<p>Run some tests:</p>\n<pre>pylint --pylint-rc=pylint.cfg testproj\npytest\npytest --cov\n</pre>\n<p>Build the documentation:</p>\n<pre>cd docs\nmake html\nfirefox build/html/index.html\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3445388, "releases": {"0.6.1": [{"comment_text": "", "digests": {"md5": "8b71bfc8906fc0f0ec97ab6700596014", "sha256": "81d1071dd79ffd3c199ff31a3fa8d33c66be43526fa87fe435ff7af53c9954a8"}, "downloads": -1, "filename": "mrg_gitlab_template-0.6.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8b71bfc8906fc0f0ec97ab6700596014", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 73945, "upload_time": "2017-12-22T10:51:09", "upload_time_iso_8601": "2017-12-22T10:51:09.781930Z", "url": "https://files.pythonhosted.org/packages/24/6e/cfcdef7051779bbfe580a6a00782132df10683f84ccf23326340f652e20f/mrg_gitlab_template-0.6.1-py2.py3-none-any.whl", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "5f337698dc00e6443f32e58cb22159a7", "sha256": "d8f420a9b7dc93f6e47ec8f70b31348790fba49b0a998e73269d48d16762379c"}, "downloads": -1, "filename": "mrg_gitlab_template-0.6.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "5f337698dc00e6443f32e58cb22159a7", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 73954, "upload_time": "2017-12-22T10:55:53", "upload_time_iso_8601": "2017-12-22T10:55:53.355601Z", "url": "https://files.pythonhosted.org/packages/3b/0b/23a83ad0d70485ff7c3caa3a85336c1800697c7cb602df4be079b341a319/mrg_gitlab_template-0.6.2-py2.py3-none-any.whl", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "6bda81c9cca78c5f7e9a6598220e7ec8", "sha256": "2cd53a4106e65f4953dbc01b48f4e3279ccf485cfe908916dcd5fe12db87a9d1"}, "downloads": -1, "filename": "mrg_gitlab_template-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bda81c9cca78c5f7e9a6598220e7ec8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 77356, "upload_time": "2017-12-27T14:40:22", "upload_time_iso_8601": "2017-12-27T14:40:22.140069Z", "url": "https://files.pythonhosted.org/packages/04/a7/1d0c8017940110c9d1951be35ce879fd72002747b5db5a6dd5ada705ec8c/mrg_gitlab_template-0.6.3-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6bda81c9cca78c5f7e9a6598220e7ec8", "sha256": "2cd53a4106e65f4953dbc01b48f4e3279ccf485cfe908916dcd5fe12db87a9d1"}, "downloads": -1, "filename": "mrg_gitlab_template-0.6.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6bda81c9cca78c5f7e9a6598220e7ec8", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 77356, "upload_time": "2017-12-27T14:40:22", "upload_time_iso_8601": "2017-12-27T14:40:22.140069Z", "url": "https://files.pythonhosted.org/packages/04/a7/1d0c8017940110c9d1951be35ce879fd72002747b5db5a6dd5ada705ec8c/mrg_gitlab_template-0.6.3-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:51:02 2020"}