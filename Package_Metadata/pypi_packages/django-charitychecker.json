{"info": {"author": "Nicholas A. Lourie", "author_email": "developer.nick@kozbox.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7"], "description": "django-charitychecker\n=====================\n\nA django app for verifying U.S. nonprofits by their EIN number. For a\ngeneral python module with similar functionality, check out\n`charitycheck <https://github.com/nalourie/charitycheck>`__.\n\nVisit the\n`github <https://github.com/nalourie/django-charitychecker>`__.\n\nInstallation:\n=============\n\nFrom pip:\n\n::\n\n    pip install django-charitychecker\n\nIn your settings.py:\n\n.. code:: python\n\n    INSTALLED_APPS = (\n        ...\n        charitychecker\n        ...\n        )\n\nNote that if you want django-charitychecker to work properly, you'll\nneed to periodically fetch data from the IRS to update your local\ndatabase.\n\nUseage:\n=======\n\ndjango-charitychecker only checks U.S. based nonprofits, this means that\nit will not verify foreign nonprofits registered with the IRS (there are\na few, but the data entry format for these organizations is inconsistent\nand so can't be machine parsed easily).\n\ndjango-charitychecker makes the following functions and models public:\n\nPublic Objects and Methods\n--------------------------\n\nModels\n~~~~~~\n\n``charitychecker.IRSNonprofitData``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\na model representing a nonprofit with the following fields:\n\nAttributes\n''''''''''\n\n-  ``IRSNonprofitData.ein``: a string representing the nonprofit's EIN\n   number.\n\n-  ``IRSNonprofitData.name``: a string representing the name of the\n   Nonprofit as published in IRS Publication 78.\n\n-  ``IRSNonprofitData.city``: a string representing the city in which\n   the nonprofit is incorporated.\n\n-  ``IRSNonprofitData.state``: a string representing the state in which\n   the nonprofit is incorporated.\n\n-  ``IRSNonprofitData.country``: a string representing the country in\n   which the nonprofit is incorporated.\n\n-  ``IRSNonprofitData.deductability_code``: the tax deductability code\n   of the nonprofit organization. See the\n   `charitycheck <https://github.com/nalourie/charitycheck>`__ README\n   for more information on deductability codes.\n\nOf course, you can retrieve a nonprofit's info using their EIN by\n``IRSNonprofitData.objects.get(ein=\"some ein string\")``.\n\nMethods\n'''''''\n\n-  ``IRSNonprofitData.verify_nonprofit(ein, name=None, city=None, state=None, country=None, deductability_code=None)``:\n   return true if there is a nonprofit in the charitychecker database\n   with information matching the information provided to the function as\n   arguments, return false otherwise.\n\n-  ``IRSNonprofitData.get_deductability_code(ein, name=None, city=None, state=None, country=None)``:\n   if a nonprofit is found in the charitychecker database with\n   information matching the information provided as arguments to the\n   function, then return that nonprofit's deductability code, otherwise\n   return the empty string.\n\nUtilities\n~~~~~~~~~\n\n``ignore_blank_space``\n^^^^^^^^^^^^^^^^^^^^^^\n\nA function which takes an iterator (it's meant for file like objects but\nshould take any iterator returning strings), and returns that iterator\nskipping all blank lines and stripping all white space from the end of\nany line.\n\n``open_zip_from_url``\n^^^^^^^^^^^^^^^^^^^^^\n\nA context manager taking two arguments, ``zip_url`` and ``file_name``.\nThe context manager downloads the file from ``zip_url``, attempts to\nunzip and then return the file at the path ``file_name`` from the\ndownloaded zip archive. It does all of this in memory without writing to\ndisk.\n\n``irs_nonprofit_data_context_manager``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA context manager for dealing with the IRS Publication 78 data. It\nautomatically downloads, unzips, and opens the file from the IRS\nwebsite, closing the resources when finished. It skips any ``FORGN``\nregistered nonprofits, and returns all of the nonprofit data strings as\na generator. Use is as you would any context manager:\n\n::\n\n    with IRSNonprofitDataContextManager() as irs_data:\n        # code using irs_data as a file object\n        .... \n\nThe Publication 78 file is a series of lines of the form\n``ein|name|city|state|country|deductability_code``.\n\n``update_database_from_file``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA function that takes ``file_manager``, ``convert_line``, ``pk_field``,\nand ``model`` arguments, then uses a file to update in bulk your\napplication's database. Specifically, it takes:\n\n-  ``file_manager``: a context manager which returns a generator\n   yielding strings. Conceptually, we think of this iterator as a file\n   like object, but any generator should work.\n-  ``convert_line``: a function whose input is a line yielded by\n   ``file_manager`` and that outputs a dictionary mapping keys which are\n   field names of ``model`` and values which will be used to instantiate\n   those field names.\n-  ``pk_field``: The name field which is defined to be the primary key\n   on ``model``. This field should not be an ``AutoField`` for the\n   following reasons: 1.) bulk updating commands in Django do not call\n   the save method on the model, and thus do not set ``AutoField``\n   primary keys, 2.) if you are updating your database from some\n   third-party source data, you want to be able to identify each line in\n   the third-party data uniquely, thus some primary-key like\n   value/unique identifier should already exist in your source data.\n   Using an ``AutoField`` instead would mean that the function would\n   have no way of distinguishing new data and old data that's been\n   updated.\n-  ``model``: the model you want to update.\n\nNote! This function will delete any data that is in your database and\nnot present in the source file provided by ``file_manager``.\n\n``update_charitychecker_data``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA function that, when called, downloads a fresh copy of the IRS\nPublication 78 data, unzips it, and uses it to update the charitychecker\ndatabase. It accepts no arguments.\n\nManagement Commands\n~~~~~~~~~~~~~~~~~~~\n\n``update_charitychecker_data``\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nA command that downloads a new copy of the IRS Publication 78 data,\nunzips it, and uses the data to update the charitychecker database.\n\nThis command takes no arguments, and only the default django command\noptions. Run it by typing into the command prompt:\n\n``python manage.py update_charitychecker_data``\n\nOf course, you can only run the command after charitychecker is\ninstalled into your project's ``settings.py`` file's ``INSTALLED_APPS``,\nand you've run ``python manage.py syncdb``. This command could take a\nlong time to finish, because it checks that your entire nonprofit\ndatabase (800,000+ rows) is up to date.\n\nTesting\n=======\n\nTest the app as you would any other Django app. In a project with\ncharitychecker installed run:\n\n::\n\n    python manage.py test charitychecker\n\nNote that since the test suite tests downloading and unzipping the data\nfrom the IRS, the test suite can take a minute or so, if you want to\nspeed up the tests simply skip the tests using\n``irs_nonprofit_data_context_manager`` and the test suite should run\nmuch faster.\n\nContributing\n============\n\nPull requests are welcome. Also check out\n`charitycheck <https://github.com/nalourie/charitycheck>`__ for a\ngeneral python equivalent of this package if you are interested in\ncontributing.\n\nSuggestions for contributing:\n\n-  python 3 support\n-  incorporate this module into a larger family of modules/packages\n   dealing with nonprofit data (but of course, following the UNIX\n   philosophy is really important here. Do one thing and do it well!)\n-  writing tests for the ``open_zip_from_url`` and\n   ``update_database_from_file`` functions which currently are only\n   tested indirectly by the tests on\n   ``irs_nonprofit_data_context_manager`` and\n   ``update_charitychecker_data``, which are both wrappers for these\n   more general functions.\n-  add tests for the newly added string methods on the IRSNonprofitData\n   model.\n\nAuthors\n=======\n\nAuthored by Nicholas A. Lourie. You can contact him at\ndeveloper.nick@kozbox.com.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nalourie/django-charitychecker", "keywords": "nonprofit nonprofits EIN IRS django", "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "django-charitychecker", "package_url": "https://pypi.org/project/django-charitychecker/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-charitychecker/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/nalourie/django-charitychecker"}, "release_url": "https://pypi.org/project/django-charitychecker/1.3/", "requires_dist": null, "requires_python": null, "summary": "a small django app to verify information about nonprofits using their EINs", "version": "1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-charitychecker\">\n<h2>django-charitychecker</h2>\n<p>A django app for verifying U.S. nonprofits by their EIN number. For a\ngeneral python module with similar functionality, check out\n<a href=\"https://github.com/nalourie/charitycheck\" rel=\"nofollow\">charitycheck</a>.</p>\n<p>Visit the\n<a href=\"https://github.com/nalourie/django-charitychecker\" rel=\"nofollow\">github</a>.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation:</h2>\n<p>From pip:</p>\n<pre>pip install django-charitychecker\n</pre>\n<p>In your settings.py:</p>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">charitychecker</span>\n    <span class=\"o\">...</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Note that if you want django-charitychecker to work properly, you\u2019ll\nneed to periodically fetch data from the IRS to update your local\ndatabase.</p>\n</div>\n<div id=\"useage\">\n<h2>Useage:</h2>\n<p>django-charitychecker only checks U.S. based nonprofits, this means that\nit will not verify foreign nonprofits registered with the IRS (there are\na few, but the data entry format for these organizations is inconsistent\nand so can\u2019t be machine parsed easily).</p>\n<p>django-charitychecker makes the following functions and models public:</p>\n<div id=\"public-objects-and-methods\">\n<h3>Public Objects and Methods</h3>\n<div id=\"models\">\n<h4>Models</h4>\n<h4 id=\"charitychecker-irsnonprofitdata\"><span class=\"section-subtitle\"><tt>charitychecker.IRSNonprofitData</tt></span></h4>\n<p>a model representing a nonprofit with the following fields:</p>\n<div id=\"attributes\">\n<h5>Attributes</h5>\n<ul>\n<li><tt>IRSNonprofitData.ein</tt>: a string representing the nonprofit\u2019s EIN\nnumber.</li>\n<li><tt>IRSNonprofitData.name</tt>: a string representing the name of the\nNonprofit as published in IRS Publication 78.</li>\n<li><tt>IRSNonprofitData.city</tt>: a string representing the city in which\nthe nonprofit is incorporated.</li>\n<li><tt>IRSNonprofitData.state</tt>: a string representing the state in which\nthe nonprofit is incorporated.</li>\n<li><tt>IRSNonprofitData.country</tt>: a string representing the country in\nwhich the nonprofit is incorporated.</li>\n<li><tt>IRSNonprofitData.deductability_code</tt>: the tax deductability code\nof the nonprofit organization. See the\n<a href=\"https://github.com/nalourie/charitycheck\" rel=\"nofollow\">charitycheck</a> README\nfor more information on deductability codes.</li>\n</ul>\n<p>Of course, you can retrieve a nonprofit\u2019s info using their EIN by\n<tt><span class=\"pre\">IRSNonprofitData.objects.get(ein=\"some</span> ein string\")</tt>.</p>\n</div>\n<div id=\"methods\">\n<h5>Methods</h5>\n<ul>\n<li><tt>IRSNonprofitData.verify_nonprofit(ein, name=None, city=None, state=None, country=None, deductability_code=None)</tt>:\nreturn true if there is a nonprofit in the charitychecker database\nwith information matching the information provided to the function as\narguments, return false otherwise.</li>\n<li><tt>IRSNonprofitData.get_deductability_code(ein, name=None, city=None, state=None, country=None)</tt>:\nif a nonprofit is found in the charitychecker database with\ninformation matching the information provided as arguments to the\nfunction, then return that nonprofit\u2019s deductability code, otherwise\nreturn the empty string.</li>\n</ul>\n</div>\n</div>\n<div id=\"utilities\">\n<h4>Utilities</h4>\n<div id=\"ignore-blank-space\">\n<h5><tt>ignore_blank_space</tt></h5>\n<p>A function which takes an iterator (it\u2019s meant for file like objects but\nshould take any iterator returning strings), and returns that iterator\nskipping all blank lines and stripping all white space from the end of\nany line.</p>\n</div>\n<div id=\"open-zip-from-url\">\n<h5><tt>open_zip_from_url</tt></h5>\n<p>A context manager taking two arguments, <tt>zip_url</tt> and <tt>file_name</tt>.\nThe context manager downloads the file from <tt>zip_url</tt>, attempts to\nunzip and then return the file at the path <tt>file_name</tt> from the\ndownloaded zip archive. It does all of this in memory without writing to\ndisk.</p>\n</div>\n<div id=\"irs-nonprofit-data-context-manager\">\n<h5><tt>irs_nonprofit_data_context_manager</tt></h5>\n<p>A context manager for dealing with the IRS Publication 78 data. It\nautomatically downloads, unzips, and opens the file from the IRS\nwebsite, closing the resources when finished. It skips any <tt>FORGN</tt>\nregistered nonprofits, and returns all of the nonprofit data strings as\na generator. Use is as you would any context manager:</p>\n<pre>with IRSNonprofitDataContextManager() as irs_data:\n    # code using irs_data as a file object\n    ....\n</pre>\n<p>The Publication 78 file is a series of lines of the form\n<tt>ein|name|city|state|country|deductability_code</tt>.</p>\n</div>\n<div id=\"update-database-from-file\">\n<h5><tt>update_database_from_file</tt></h5>\n<p>A function that takes <tt>file_manager</tt>, <tt>convert_line</tt>, <tt>pk_field</tt>,\nand <tt>model</tt> arguments, then uses a file to update in bulk your\napplication\u2019s database. Specifically, it takes:</p>\n<ul>\n<li><tt>file_manager</tt>: a context manager which returns a generator\nyielding strings. Conceptually, we think of this iterator as a file\nlike object, but any generator should work.</li>\n<li><tt>convert_line</tt>: a function whose input is a line yielded by\n<tt>file_manager</tt> and that outputs a dictionary mapping keys which are\nfield names of <tt>model</tt> and values which will be used to instantiate\nthose field names.</li>\n<li><tt>pk_field</tt>: The name field which is defined to be the primary key\non <tt>model</tt>. This field should not be an <tt>AutoField</tt> for the\nfollowing reasons: 1.) bulk updating commands in Django do not call\nthe save method on the model, and thus do not set <tt>AutoField</tt>\nprimary keys, 2.) if you are updating your database from some\nthird-party source data, you want to be able to identify each line in\nthe third-party data uniquely, thus some primary-key like\nvalue/unique identifier should already exist in your source data.\nUsing an <tt>AutoField</tt> instead would mean that the function would\nhave no way of distinguishing new data and old data that\u2019s been\nupdated.</li>\n<li><tt>model</tt>: the model you want to update.</li>\n</ul>\n<p>Note! This function will delete any data that is in your database and\nnot present in the source file provided by <tt>file_manager</tt>.</p>\n</div>\n<div id=\"update-charitychecker-data\">\n<h5><tt>update_charitychecker_data</tt></h5>\n<p>A function that, when called, downloads a fresh copy of the IRS\nPublication 78 data, unzips it, and uses it to update the charitychecker\ndatabase. It accepts no arguments.</p>\n</div>\n</div>\n<div id=\"management-commands\">\n<h4>Management Commands</h4>\n<h4 id=\"id1\"><span class=\"section-subtitle\"><tt>update_charitychecker_data</tt></span></h4>\n<p>A command that downloads a new copy of the IRS Publication 78 data,\nunzips it, and uses the data to update the charitychecker database.</p>\n<p>This command takes no arguments, and only the default django command\noptions. Run it by typing into the command prompt:</p>\n<p><tt>python manage.py update_charitychecker_data</tt></p>\n<p>Of course, you can only run the command after charitychecker is\ninstalled into your project\u2019s <tt>settings.py</tt> file\u2019s <tt>INSTALLED_APPS</tt>,\nand you\u2019ve run <tt>python manage.py syncdb</tt>. This command could take a\nlong time to finish, because it checks that your entire nonprofit\ndatabase (800,000+ rows) is up to date.</p>\n</div>\n</div>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>Test the app as you would any other Django app. In a project with\ncharitychecker installed run:</p>\n<pre>python manage.py test charitychecker\n</pre>\n<p>Note that since the test suite tests downloading and unzipping the data\nfrom the IRS, the test suite can take a minute or so, if you want to\nspeed up the tests simply skip the tests using\n<tt>irs_nonprofit_data_context_manager</tt> and the test suite should run\nmuch faster.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Pull requests are welcome. Also check out\n<a href=\"https://github.com/nalourie/charitycheck\" rel=\"nofollow\">charitycheck</a> for a\ngeneral python equivalent of this package if you are interested in\ncontributing.</p>\n<p>Suggestions for contributing:</p>\n<ul>\n<li>python 3 support</li>\n<li>incorporate this module into a larger family of modules/packages\ndealing with nonprofit data (but of course, following the UNIX\nphilosophy is really important here. Do one thing and do it well!)</li>\n<li>writing tests for the <tt>open_zip_from_url</tt> and\n<tt>update_database_from_file</tt> functions which currently are only\ntested indirectly by the tests on\n<tt>irs_nonprofit_data_context_manager</tt> and\n<tt>update_charitychecker_data</tt>, which are both wrappers for these\nmore general functions.</li>\n<li>add tests for the newly added string methods on the IRSNonprofitData\nmodel.</li>\n</ul>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Authored by Nicholas A. Lourie. You can contact him at\n<a href=\"mailto:developer.nick%40kozbox.com\">developer<span>.</span>nick<span>@</span>kozbox<span>.</span>com</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1292310, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "026f7befd24674785c2e35d09d24ee59", "sha256": "3e5292505f332f3f577a7655bcb0245446671003a41bf328452cfe1c492c387c"}, "downloads": -1, "filename": "django-charitychecker-1.0.zip", "has_sig": false, "md5_digest": "026f7befd24674785c2e35d09d24ee59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16852, "upload_time": "2014-10-26T05:16:04", "upload_time_iso_8601": "2014-10-26T05:16:04.336646Z", "url": "https://files.pythonhosted.org/packages/7f/2b/b8609c4ea7e42a635c4c38d9afc4782930fa3aedee3630bd0ea87da1152c/django-charitychecker-1.0.zip", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "9345e207215e39042159d92a335a1cfa", "sha256": "410ba2e7e11d8ff727bf184da3f6e23c723a222ad93f9af510bdd969480c64c8"}, "downloads": -1, "filename": "django-charitychecker-1.1.zip", "has_sig": false, "md5_digest": "9345e207215e39042159d92a335a1cfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19620, "upload_time": "2014-10-29T00:47:52", "upload_time_iso_8601": "2014-10-29T00:47:52.193835Z", "url": "https://files.pythonhosted.org/packages/42/7e/51415ed5fa84797b7e21f5281a8f48bd34aabf6f6f63dd9d09c986992aeb/django-charitychecker-1.1.zip", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "4bf044441ede69e1a9147868426daa45", "sha256": "4398d461d088153d10bd8260fdce5cea21a8e4470b97a8c292d8171872bbd3f8"}, "downloads": -1, "filename": "django-charitychecker-1.2.zip", "has_sig": false, "md5_digest": "4bf044441ede69e1a9147868426daa45", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36233649, "upload_time": "2014-10-30T22:30:35", "upload_time_iso_8601": "2014-10-30T22:30:35.924613Z", "url": "https://files.pythonhosted.org/packages/1c/c3/b44c409121420257eac20e7b288927602e99de154fe51e94142e6141827b/django-charitychecker-1.2.zip", "yanked": false}], "1.3": [{"comment_text": "", "digests": {"md5": "fe3d84538b9f7872ffb6ebfb2f158e6d", "sha256": "207ade09ce1bb9a465ce463a30902754fa9f639df67e0b976c921463bfc448bb"}, "downloads": -1, "filename": "django-charitychecker-1.3.zip", "has_sig": false, "md5_digest": "fe3d84538b9f7872ffb6ebfb2f158e6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36233846, "upload_time": "2014-11-03T03:10:38", "upload_time_iso_8601": "2014-11-03T03:10:38.408466Z", "url": "https://files.pythonhosted.org/packages/0e/31/02ac2a631f9f134e78467eb9a465a029b7e981d788fc9507f953c5806edd/django-charitychecker-1.3.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe3d84538b9f7872ffb6ebfb2f158e6d", "sha256": "207ade09ce1bb9a465ce463a30902754fa9f639df67e0b976c921463bfc448bb"}, "downloads": -1, "filename": "django-charitychecker-1.3.zip", "has_sig": false, "md5_digest": "fe3d84538b9f7872ffb6ebfb2f158e6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36233846, "upload_time": "2014-11-03T03:10:38", "upload_time_iso_8601": "2014-11-03T03:10:38.408466Z", "url": "https://files.pythonhosted.org/packages/0e/31/02ac2a631f9f134e78467eb9a465a029b7e981d788fc9507f953c5806edd/django-charitychecker-1.3.zip", "yanked": false}], "timestamp": "Fri May  8 00:37:11 2020"}