{"info": {"author": "Chris L. Barnes", "author_email": "chrislloydbarnes@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# pyenv-mkenv\n\nSimplify pyenv environment creation; script requires python 3.6+.\n\nDo you use [pyenv](https://github.com/pyenv/pyenv)?\n\nWhen you check out a new repository, the workflow looks something like this:\n\n```sh\npyenv virtualenv $MY_PY_VERSION $MY_REPO_NAME\npyenv local $MY_REPO_NAME\npip install -U pip\npip install -r requirements.txt\n```\n\nThere has to be a better way!\n\nNow there is:\n\n```sh\nmkenv -r requirements.txt\n```\n\nThis script does a number of things:\n\n- Pick a python version (by preference, the most recent installed CPython version; see below)\n- Create a pyenv-virtualenv using the directory name by default (controlled by `-n` / `--name`)\n- Update pip\n- Install requirements (multiple paths can be given)\n\n## Installation\n\n- From PyPI: `pip install pyenv-mkenv`\n- From github: `pip install git+git://github.com/clbarnes/pyenv-mkenv.git`\n- For development: `git clone git@github.com:clbarnes/pyenv-mkenv.git && cd pyenv-mkenv && pip install -e .`\n\nOr just copy [`mkenv.py`](./mkenv.py); it's dependency-free.\n\n## Usage\n\n```help\nusage: mkenv [-h] [-p] [-n NAME] [-r [REQUIREMENTS]] [-v] [--version]\n             [py_version]\n\npositional arguments:\n  py_version            Python version. If this option starts with '/', the\n                        rest will be interpreted as a regex; otherwise, a\n                        simple match to the start of the version name will be\n                        used. Empty string by default. By default, mkenv will\n                        try to find the highest version matching the string\n                        (use -p to see priority and pick) manually)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p, --pick            Prompt to select from matching versions\n  -n NAME, --name NAME  Name for the environment (defaults to directory name)\n  -r [REQUIREMENTS], --requirements [REQUIREMENTS]\n                        Requirements files to install from. If option is used\n                        with no path given, user will be prompted.\n  -v, --verbose\n  --version             show program's version number and exit\n```\n\n### Python version\n\npyenv-mkenv lists available python versions (i.e. non-symlink directories in `$PYENV_HOME/versions/`), and sorts them.\nThe sort order is intended to be somewhat intuitive:\n\n- Prefer standard CPython distributions (i.e. starts with a digit)\n- Prefer higher versions (i.e. substrings which look like versions are parsed and sorted descending)\n- Non-standard distributions are sorted lexicographically without version numbers, and then by their version number (multiple version numbers, e.g. pypy3.6-7.3.0, are addressed left to right)\n\nIf no `py_version` argument is given, the first item on the list is chosen.\nIf a string is given, the first item on the list which starts with that string is chosen (e.g. `3.8 -> 3.8.1`).\nIf the given string starts with a `/`, treat the remainder as a regex which is searched for within each version name; the first matching name is used.\n\nTo make sure which version you're getting, use the `-p` / `--pick` option.\nThis will show versions which match the `py_version` argument (in sorted order), and allow you to select which one you want.\n\n### Requirements\n\nBy default, `mkenv` does not install any requirements.\nHowever, any number of requirements files can be added by using the `-r` option.\nIf `-r` is supplied without an argument, `mkenv` searches down into the directory tree, looking for anything matching the glob `requirements*.txt`, ignoring hidden directories, and prompts the user to select which ones they want to install.\n\n## Disclaimer\n\nThis is not a pyenv plugin; it is a python script which assumes you have pyenv installed.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/clbarnes/pyenv-mkenv", "keywords": "pyenv virtualenv venv requirements", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyenv-mkenv", "package_url": "https://pypi.org/project/pyenv-mkenv/", "platform": "", "project_url": "https://pypi.org/project/pyenv-mkenv/", "project_urls": {"Homepage": "https://github.com/clbarnes/pyenv-mkenv"}, "release_url": "https://pypi.org/project/pyenv-mkenv/1.0.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple script to help create and use pyenv virtualenvs", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyenv-mkenv</h1>\n<p>Simplify pyenv environment creation; script requires python 3.6+.</p>\n<p>Do you use <a href=\"https://github.com/pyenv/pyenv\" rel=\"nofollow\">pyenv</a>?</p>\n<p>When you check out a new repository, the workflow looks something like this:</p>\n<pre>pyenv virtualenv <span class=\"nv\">$MY_PY_VERSION</span> <span class=\"nv\">$MY_REPO_NAME</span>\npyenv <span class=\"nb\">local</span> <span class=\"nv\">$MY_REPO_NAME</span>\npip install -U pip\npip install -r requirements.txt\n</pre>\n<p>There has to be a better way!</p>\n<p>Now there is:</p>\n<pre>mkenv -r requirements.txt\n</pre>\n<p>This script does a number of things:</p>\n<ul>\n<li>Pick a python version (by preference, the most recent installed CPython version; see below)</li>\n<li>Create a pyenv-virtualenv using the directory name by default (controlled by <code>-n</code> / <code>--name</code>)</li>\n<li>Update pip</li>\n<li>Install requirements (multiple paths can be given)</li>\n</ul>\n<h2>Installation</h2>\n<ul>\n<li>From PyPI: <code>pip install pyenv-mkenv</code></li>\n<li>From github: <code>pip install git+git://github.com/clbarnes/pyenv-mkenv.git</code></li>\n<li>For development: <code>git clone git@github.com:clbarnes/pyenv-mkenv.git &amp;&amp; cd pyenv-mkenv &amp;&amp; pip install -e .</code></li>\n</ul>\n<p>Or just copy <a href=\"./mkenv.py\" rel=\"nofollow\"><code>mkenv.py</code></a>; it's dependency-free.</p>\n<h2>Usage</h2>\n<pre>usage: mkenv [-h] [-p] [-n NAME] [-r [REQUIREMENTS]] [-v] [--version]\n             [py_version]\n\npositional arguments:\n  py_version            Python version. If this option starts with '/', the\n                        rest will be interpreted as a regex; otherwise, a\n                        simple match to the start of the version name will be\n                        used. Empty string by default. By default, mkenv will\n                        try to find the highest version matching the string\n                        (use -p to see priority and pick) manually)\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p, --pick            Prompt to select from matching versions\n  -n NAME, --name NAME  Name for the environment (defaults to directory name)\n  -r [REQUIREMENTS], --requirements [REQUIREMENTS]\n                        Requirements files to install from. If option is used\n                        with no path given, user will be prompted.\n  -v, --verbose\n  --version             show program's version number and exit\n</pre>\n<h3>Python version</h3>\n<p>pyenv-mkenv lists available python versions (i.e. non-symlink directories in <code>$PYENV_HOME/versions/</code>), and sorts them.\nThe sort order is intended to be somewhat intuitive:</p>\n<ul>\n<li>Prefer standard CPython distributions (i.e. starts with a digit)</li>\n<li>Prefer higher versions (i.e. substrings which look like versions are parsed and sorted descending)</li>\n<li>Non-standard distributions are sorted lexicographically without version numbers, and then by their version number (multiple version numbers, e.g. pypy3.6-7.3.0, are addressed left to right)</li>\n</ul>\n<p>If no <code>py_version</code> argument is given, the first item on the list is chosen.\nIf a string is given, the first item on the list which starts with that string is chosen (e.g. <code>3.8 -&gt; 3.8.1</code>).\nIf the given string starts with a <code>/</code>, treat the remainder as a regex which is searched for within each version name; the first matching name is used.</p>\n<p>To make sure which version you're getting, use the <code>-p</code> / <code>--pick</code> option.\nThis will show versions which match the <code>py_version</code> argument (in sorted order), and allow you to select which one you want.</p>\n<h3>Requirements</h3>\n<p>By default, <code>mkenv</code> does not install any requirements.\nHowever, any number of requirements files can be added by using the <code>-r</code> option.\nIf <code>-r</code> is supplied without an argument, <code>mkenv</code> searches down into the directory tree, looking for anything matching the glob <code>requirements*.txt</code>, ignoring hidden directories, and prompts the user to select which ones they want to install.</p>\n<h2>Disclaimer</h2>\n<p>This is not a pyenv plugin; it is a python script which assumes you have pyenv installed.</p>\n\n          </div>"}, "last_serial": 6391645, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "c61b0e02afc05e5194eb874901978a0a", "sha256": "16c67f4619057e2f93d2930377aefa664417c96576899174c4786445db2289a4"}, "downloads": -1, "filename": "pyenv_mkenv-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c61b0e02afc05e5194eb874901978a0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7839, "upload_time": "2020-01-03T16:06:36", "upload_time_iso_8601": "2020-01-03T16:06:36.944645Z", "url": "https://files.pythonhosted.org/packages/05/95/0df958683695786a593ef95cdc70fe0961cb12db102fffdd6bd61a60893f/pyenv_mkenv-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "793f52c486fb1cde7b8efeae859786ed", "sha256": "64bfead7a971c48e5553949ffe98500eb44ee82088f96e9c13dd8d309c5a0952"}, "downloads": -1, "filename": "pyenv-mkenv-1.0.0.tar.gz", "has_sig": false, "md5_digest": "793f52c486fb1cde7b8efeae859786ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6735, "upload_time": "2020-01-03T16:06:39", "upload_time_iso_8601": "2020-01-03T16:06:39.173564Z", "url": "https://files.pythonhosted.org/packages/82/25/03e89415937595df5ea319906fb862e520dc67b4924b6573c4e7b04c772d/pyenv-mkenv-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c61b0e02afc05e5194eb874901978a0a", "sha256": "16c67f4619057e2f93d2930377aefa664417c96576899174c4786445db2289a4"}, "downloads": -1, "filename": "pyenv_mkenv-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c61b0e02afc05e5194eb874901978a0a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7839, "upload_time": "2020-01-03T16:06:36", "upload_time_iso_8601": "2020-01-03T16:06:36.944645Z", "url": "https://files.pythonhosted.org/packages/05/95/0df958683695786a593ef95cdc70fe0961cb12db102fffdd6bd61a60893f/pyenv_mkenv-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "793f52c486fb1cde7b8efeae859786ed", "sha256": "64bfead7a971c48e5553949ffe98500eb44ee82088f96e9c13dd8d309c5a0952"}, "downloads": -1, "filename": "pyenv-mkenv-1.0.0.tar.gz", "has_sig": false, "md5_digest": "793f52c486fb1cde7b8efeae859786ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6735, "upload_time": "2020-01-03T16:06:39", "upload_time_iso_8601": "2020-01-03T16:06:39.173564Z", "url": "https://files.pythonhosted.org/packages/82/25/03e89415937595df5ea319906fb862e520dc67b4924b6573c4e7b04c772d/pyenv-mkenv-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:21 2020"}