{"info": {"author": "Andy Peace", "author_email": "andrew.peace@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: MIT License"], "description": "The BoilerIO Software Thermostat\n================================\n\nBoilerIO can control heating in a zone of your home. Code is provided\nhere to connect with Danfoss RF receivers though other implementations\ncould easily be added, and to receive temperature updates over MQTT in a\nformat described later in this README.\n\nThis has been tested with the Danfoss RF transciever code in the\nthermostat.git repository at https://github.com/adpeace/thermostat.git.\n\nNo warranty is provided: please be careful if you are messing with your\nown heating system.\n\nFor more information, please see https://hackingathome.wordpress.com.\n\nInstallation\n------------\n\nMore details on installation to be written. There are several components\nthat need to be configured:\n\n1. The web application and database, to provide the online component.\n2. The local scheduler and boiler interface.\n3. The sensor inputs\n\nYou can install from the repository to get a specific version, such as\nthe latest development version not yet published to PyPI, or install via\n``pip`` from PyPI for a recent tested version by running:\n\n::\n\n    pip install boilerio\n\nTo install from the git repository, first check it out then install\nusing ``pip``:\n\n::\n\n    $ git clone https://github.com/adpeace/boilerio.git\n    $ cd boilerio\n    $ pip3 install .\n\nUse ``-e`` to ``pip`` to install in development mode (i.e. just link to\nthe checked-out source instead of installing it).\n\nRaspberry Pi Quickstart to get MQTT-based on/off control working\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can run these steps on a Raspberry Pi with a fresh SD card that has\nthe Buster version of Raspbian. You can ssh to the Raspberry Pi, then\ncopy/paste these commands into the terminal. You'll need a transceiver\ndevice such as a JeeLink with the ``thermostat`` firmware (available at\nhttps://github.com/adpeace/thermostat) plugged in to use this.\n\n::\n\n    sudo apt install -y python3-pip git\n    git clone https://github.com/adpeace/boilerio.git\n    cd boilerio\n    sudo pip3 install --upgrade pip  # good practise but not mandatory\n    sudo pip3 install .\n    sudo mkdir /etc/sensors\n    sudo bash -c 'cat >/etc/sensors/config' <<EOF\n    [mqtt]\n    host = mqtt_hostname\n    user = mqtt_username\n    password = mqtt_password\n\n    [heating]\n    info_basetopic = heating/zone/info\n    demand_request_topic = heating/zone/demand\n    EOF\n\nNow use a text editor such as ``nano`` to edit ``/etc/sensors/config``\nand replace the MQTT server details with your own.\n\nNow run ``boiler_to_mqtt /dev/ttyUSB0`` (replacing ``/dev/ttyUSB0`` with\nthe location of the Danfoss transceiver device, e.g. your JeeLink;\nJeeLink will probably show up at that device name though if you don't\nhave other USB devices connected).\n\nThe web app\n~~~~~~~~~~~\n\nTo run the scheduler flask application for development, using\n``flask run``:\n\n::\n\n    $ FLASK_APP=boilerio/schedulerweb.py flask run\n\nThe scheduler\n-------------\n\nThe scheduler comes in four parts:\n\n1. The database. You need to be running postgres; once you have\n   installed postgres you can create a database user and database for\n   the scheduler, then user scheduler.sql to create the requisite\n   tables. (This currently assumes the databsae and a role exists called\n   ``scheduler``.)\n\n2. The controller. This is the ``scheduler`` Python script. Ensure this\n   daemon is running to control the boiler relay and update the cache of\n   the current temperature in the backend web app.\n\n3. The web app. This is the ``schedulerweb`` Flask app. The recommended\n   configuration is for this to be proxied through nginx and run inside\n   uwsgi.\n\n4. The web-based UI. This talks to the schedulerweb app and presents a\n   UI where the current temperature and schedule can be configured.\n\nExample uWSGI configuration for ``schedulerweb`` (assuming you have the\nPython package installed) - this can be placed in\n``/etc/uwsgi/apps-available`` on Ubuntu's version of uwsgi:\n\n::\n\n    [uwsgi]\n    socket = /var/www/boilerio/thermostat.sock\n    module = boilerio.schedulerweb:app\n    logto = /var/log/uwsgi/boilerio/thermostat.log\n    uid = boilerio\n    gid = www-data\n    chmod-socket = 664\n\nscheduler: The controller\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe local scheduler component provides the timer and thermostat\nbehaviour: it gets the target temperature periodically from the web\nservice and controls the boiler by sending messages to the\nboiler\\_to\\_mqtt program.\n\nThe scheduler takes no arguments: the configuration will come from the\nweb service.\n\nboiler\\_to\\_mqtt\n----------------\n\nThe ``boiler_to_mqtt`` script implements an MQTT-topic based interface\non top of the serial protocol provided in the thermostat.git repository.\nIn short: it turns the boiler on and off via MQTT. The serial interface\nin thermostat.git is designed to interact with a Danfoss RF thermostat\nreceiver; if you wanted to use a different receiver you can substitute a\ndifferent service.\n\nOrdinarily you'd leave this service running so that other services can\nturn the boiler on/off as needed.\n\nThis service and others in this repository use a common configuration\nfile. See below for more information.\n\nYou can send learn packets in a loop with a simple shell loop, if you\nhave the mosquitto clients installed and are running the\n``boiler_to_mqtt.py`` script:\n\n::\n\n    echo -n \"Learning mode - program boiler then hit enter... \"\n    while ! read -t 1 ; do\n        mosquitto_pub -h <host> -u <username> -P <passwd> -t heating/zone/demand \\\n                      -m '{\"command\": \"L\", \"thermostat\": 47793}'\n    done\n\nboilersim\n---------\n\nThis is a trivial simulator intended to help debug and improve the\nthermostat. It follows a really simple heating/cooling model and\ngenerates a table as output.\n\nTo run, use a command-line such as:\n\n::\n\n    $ boilersim -r 18 19.5 600\n\nThe ``-r`` option introduces some random noise into the temperature\nreadings generated by the simulation when passing them to the\ncontroller.\n\nThe first positional argument is the starting indoor temperature to\nsimulate. The second argument is the target temperature. The third\nargument is the simulated runtime in minutes.\n\nThis program produces logging output to stderr, and a space-separated\noutput to stdout. The output is similar to:\n\n::\n\n    ...\n    1.0 0 0 17.9964773317 17.9876417779 0 0 0\n    ...\n\nThe columns are:\n\n1. The time into the simulation, in minutes\n2. The amount of time in that minute that the boiler was on for in the\n   simulation.\n3. The current duty cycle of the boiler in the simulation.\n4. The current simulated room temperature\n5. The fake temperature reading passed to the controller including any\n   error introduced by the ``-r`` option.\n6. The current value of the proportional term of the PID controller.\n7. The current value of the integral term of the PID controller.\n8. The current value of the differential term of the PID controller.\n\nYou can use the ``plot\\_sim.gpi`` gnuplot script to plot the output of\nthe simulation. E.g.:\n\n::\n\n    $ boilersim -r 18 19.5 600  2>log >sim_data\n    $ gnuplot plot_sim.gpi\n\nThe gnuplot script assumes the simulation output is saved to a file\ncalled ``sim\\_data``.\n\nConfig file\n===========\n\nOther than ``boilersim``, a config file is needed for the programs here.\nThis is to help make them usable as daemons.\n\n::\n\n    [mqtt]\n    host = raspi.lan\n    user = user\n    password = imnottellingyou\n\n    [heating]\n    # Various MQTT topic names to use.  These can be anything but are specified in\n    # the config in case you have other software that constrains your choices, and\n    # ensures they are consistent across apps.\n\n    info_basetopic = heating/zone/info\n    demand_request_topic = heating/zone/demand\n    thermostat_schedule_change_topic = heating/thermostat_control/update\n\n    scheduler_db_host = hub.lan\n    scheduler_db_name = scheduler\n    scheduler_db_user = scheduler\n    scheduler_db_password = imnottellingyou\n\n    scheduler_url = https://your_url\n    scheduler_username = your_user\n    scheduler_password = imnottellingyou", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adpeace/boilerio.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "boilerio", "package_url": "https://pypi.org/project/boilerio/", "platform": "", "project_url": "https://pypi.org/project/boilerio/", "project_urls": {"Homepage": "https://github.com/adpeace/boilerio.git"}, "release_url": "https://pypi.org/project/boilerio/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "A software thermostat and heating control system", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"the-boilerio-software-thermostat\">\n<h2>The BoilerIO Software Thermostat</h2>\n<p>BoilerIO can control heating in a zone of your home. Code is provided\nhere to connect with Danfoss RF receivers though other implementations\ncould easily be added, and to receive temperature updates over MQTT in a\nformat described later in this README.</p>\n<p>This has been tested with the Danfoss RF transciever code in the\nthermostat.git repository at <a href=\"https://github.com/adpeace/thermostat.git\" rel=\"nofollow\">https://github.com/adpeace/thermostat.git</a>.</p>\n<p>No warranty is provided: please be careful if you are messing with your\nown heating system.</p>\n<p>For more information, please see <a href=\"https://hackingathome.wordpress.com\" rel=\"nofollow\">https://hackingathome.wordpress.com</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>More details on installation to be written. There are several components\nthat need to be configured:</p>\n<ol>\n<li>The web application and database, to provide the online component.</li>\n<li>The local scheduler and boiler interface.</li>\n<li>The sensor inputs</li>\n</ol>\n<p>You can install from the repository to get a specific version, such as\nthe latest development version not yet published to PyPI, or install via\n<tt>pip</tt> from PyPI for a recent tested version by running:</p>\n<pre>pip install boilerio\n</pre>\n<p>To install from the git repository, first check it out then install\nusing <tt>pip</tt>:</p>\n<pre>$ git clone https://github.com/adpeace/boilerio.git\n$ cd boilerio\n$ pip3 install .\n</pre>\n<p>Use <tt><span class=\"pre\">-e</span></tt> to <tt>pip</tt> to install in development mode (i.e. just link to\nthe checked-out source instead of installing it).</p>\n<div id=\"raspberry-pi-quickstart-to-get-mqtt-based-on-off-control-working\">\n<h4>Raspberry Pi Quickstart to get MQTT-based on/off control working</h4>\n<p>You can run these steps on a Raspberry Pi with a fresh SD card that has\nthe Buster version of Raspbian. You can ssh to the Raspberry Pi, then\ncopy/paste these commands into the terminal. You\u2019ll need a transceiver\ndevice such as a JeeLink with the <tt>thermostat</tt> firmware (available at\n<a href=\"https://github.com/adpeace/thermostat\" rel=\"nofollow\">https://github.com/adpeace/thermostat</a>) plugged in to use this.</p>\n<pre>sudo apt install -y python3-pip git\ngit clone https://github.com/adpeace/boilerio.git\ncd boilerio\nsudo pip3 install --upgrade pip  # good practise but not mandatory\nsudo pip3 install .\nsudo mkdir /etc/sensors\nsudo bash -c 'cat &gt;/etc/sensors/config' &lt;&lt;EOF\n[mqtt]\nhost = mqtt_hostname\nuser = mqtt_username\npassword = mqtt_password\n\n[heating]\ninfo_basetopic = heating/zone/info\ndemand_request_topic = heating/zone/demand\nEOF\n</pre>\n<p>Now use a text editor such as <tt>nano</tt> to edit <tt>/etc/sensors/config</tt>\nand replace the MQTT server details with your own.</p>\n<p>Now run <tt>boiler_to_mqtt /dev/ttyUSB0</tt> (replacing <tt>/dev/ttyUSB0</tt> with\nthe location of the Danfoss transceiver device, e.g. your JeeLink;\nJeeLink will probably show up at that device name though if you don\u2019t\nhave other USB devices connected).</p>\n</div>\n<div id=\"the-web-app\">\n<h4>The web app</h4>\n<p>To run the scheduler flask application for development, using\n<tt>flask run</tt>:</p>\n<pre>$ FLASK_APP=boilerio/schedulerweb.py flask run\n</pre>\n</div>\n</div>\n<div id=\"the-scheduler\">\n<h3>The scheduler</h3>\n<p>The scheduler comes in four parts:</p>\n<ol>\n<li>The database. You need to be running postgres; once you have\ninstalled postgres you can create a database user and database for\nthe scheduler, then user scheduler.sql to create the requisite\ntables. (This currently assumes the databsae and a role exists called\n<tt>scheduler</tt>.)</li>\n<li>The controller. This is the <tt>scheduler</tt> Python script. Ensure this\ndaemon is running to control the boiler relay and update the cache of\nthe current temperature in the backend web app.</li>\n<li>The web app. This is the <tt>schedulerweb</tt> Flask app. The recommended\nconfiguration is for this to be proxied through nginx and run inside\nuwsgi.</li>\n<li>The web-based UI. This talks to the schedulerweb app and presents a\nUI where the current temperature and schedule can be configured.</li>\n</ol>\n<p>Example uWSGI configuration for <tt>schedulerweb</tt> (assuming you have the\nPython package installed) - this can be placed in\n<tt><span class=\"pre\">/etc/uwsgi/apps-available</span></tt> on Ubuntu\u2019s version of uwsgi:</p>\n<pre>[uwsgi]\nsocket = /var/www/boilerio/thermostat.sock\nmodule = boilerio.schedulerweb:app\nlogto = /var/log/uwsgi/boilerio/thermostat.log\nuid = boilerio\ngid = www-data\nchmod-socket = 664\n</pre>\n<div id=\"scheduler-the-controller\">\n<h4>scheduler: The controller</h4>\n<p>The local scheduler component provides the timer and thermostat\nbehaviour: it gets the target temperature periodically from the web\nservice and controls the boiler by sending messages to the\nboiler_to_mqtt program.</p>\n<p>The scheduler takes no arguments: the configuration will come from the\nweb service.</p>\n</div>\n</div>\n<div id=\"boiler-to-mqtt\">\n<h3>boiler_to_mqtt</h3>\n<p>The <tt>boiler_to_mqtt</tt> script implements an MQTT-topic based interface\non top of the serial protocol provided in the thermostat.git repository.\nIn short: it turns the boiler on and off via MQTT. The serial interface\nin thermostat.git is designed to interact with a Danfoss RF thermostat\nreceiver; if you wanted to use a different receiver you can substitute a\ndifferent service.</p>\n<p>Ordinarily you\u2019d leave this service running so that other services can\nturn the boiler on/off as needed.</p>\n<p>This service and others in this repository use a common configuration\nfile. See below for more information.</p>\n<p>You can send learn packets in a loop with a simple shell loop, if you\nhave the mosquitto clients installed and are running the\n<tt>boiler_to_mqtt.py</tt> script:</p>\n<pre>echo -n \"Learning mode - program boiler then hit enter... \"\nwhile ! read -t 1 ; do\n    mosquitto_pub -h &lt;host&gt; -u &lt;username&gt; -P &lt;passwd&gt; -t heating/zone/demand \\\n                  -m '{\"command\": \"L\", \"thermostat\": 47793}'\ndone\n</pre>\n</div>\n<div id=\"boilersim\">\n<h3>boilersim</h3>\n<p>This is a trivial simulator intended to help debug and improve the\nthermostat. It follows a really simple heating/cooling model and\ngenerates a table as output.</p>\n<p>To run, use a command-line such as:</p>\n<pre>$ boilersim -r 18 19.5 600\n</pre>\n<p>The <tt><span class=\"pre\">-r</span></tt> option introduces some random noise into the temperature\nreadings generated by the simulation when passing them to the\ncontroller.</p>\n<p>The first positional argument is the starting indoor temperature to\nsimulate. The second argument is the target temperature. The third\nargument is the simulated runtime in minutes.</p>\n<p>This program produces logging output to stderr, and a space-separated\noutput to stdout. The output is similar to:</p>\n<pre>...\n1.0 0 0 17.9964773317 17.9876417779 0 0 0\n...\n</pre>\n<p>The columns are:</p>\n<ol>\n<li>The time into the simulation, in minutes</li>\n<li>The amount of time in that minute that the boiler was on for in the\nsimulation.</li>\n<li>The current duty cycle of the boiler in the simulation.</li>\n<li>The current simulated room temperature</li>\n<li>The fake temperature reading passed to the controller including any\nerror introduced by the <tt><span class=\"pre\">-r</span></tt> option.</li>\n<li>The current value of the proportional term of the PID controller.</li>\n<li>The current value of the integral term of the PID controller.</li>\n<li>The current value of the differential term of the PID controller.</li>\n</ol>\n<p>You can use the <tt>plot\\_sim.gpi</tt> gnuplot script to plot the output of\nthe simulation. E.g.:</p>\n<pre>$ boilersim -r 18 19.5 600  2&gt;log &gt;sim_data\n$ gnuplot plot_sim.gpi\n</pre>\n<p>The gnuplot script assumes the simulation output is saved to a file\ncalled <tt>sim\\_data</tt>.</p>\n</div>\n</div>\n<div id=\"config-file\">\n<h2>Config file</h2>\n<p>Other than <tt>boilersim</tt>, a config file is needed for the programs here.\nThis is to help make them usable as daemons.</p>\n<pre>[mqtt]\nhost = raspi.lan\nuser = user\npassword = imnottellingyou\n\n[heating]\n# Various MQTT topic names to use.  These can be anything but are specified in\n# the config in case you have other software that constrains your choices, and\n# ensures they are consistent across apps.\n\ninfo_basetopic = heating/zone/info\ndemand_request_topic = heating/zone/demand\nthermostat_schedule_change_topic = heating/thermostat_control/update\n\nscheduler_db_host = hub.lan\nscheduler_db_name = scheduler\nscheduler_db_user = scheduler\nscheduler_db_password = imnottellingyou\n\nscheduler_url = https://your_url\nscheduler_username = your_user\nscheduler_password = imnottellingyou\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6637426, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "d64d82731353ced9f3ab098edc45fe34", "sha256": "5a3f045871f24344a98803fb27fb1544e51443b38d42a52b8065ac4516e1b918"}, "downloads": -1, "filename": "boilerio-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d64d82731353ced9f3ab098edc45fe34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17756, "upload_time": "2017-12-28T22:39:24", "upload_time_iso_8601": "2017-12-28T22:39:24.043287Z", "url": "https://files.pythonhosted.org/packages/88/bd/0a901a3c5a6949ec152a1ad81c0a3b132c7125f194892a593f3a939b5cba/boilerio-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "f9759b0c7f237a2f718a91dccc1b7066", "sha256": "6adb58443170d9fe4f86647b420385b86d25ba8b6fb3006a1133e6dc50212bf3"}, "downloads": -1, "filename": "boilerio-0.0.2.tar.gz", "has_sig": false, "md5_digest": "f9759b0c7f237a2f718a91dccc1b7066", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17118, "upload_time": "2018-11-11T21:37:11", "upload_time_iso_8601": "2018-11-11T21:37:11.148138Z", "url": "https://files.pythonhosted.org/packages/7b/66/5dc7f539431775e480be47cf5e4a08764e6ef6bfb8c3d668b8e6a6c5a318/boilerio-0.0.2.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "13a6426f7f00069989837bea3b49b458", "sha256": "5ed2cc9d747a878cd85f4d86cab8ce539eb2cb7799eed1350bafeb563692f359"}, "downloads": -1, "filename": "boilerio-0.0.4.tar.gz", "has_sig": false, "md5_digest": "13a6426f7f00069989837bea3b49b458", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23541, "upload_time": "2020-02-15T19:46:12", "upload_time_iso_8601": "2020-02-15T19:46:12.863128Z", "url": "https://files.pythonhosted.org/packages/45/85/67b17c2743ad4c24d4bf1f6b910b17dcb9377de8b9803a8fd8273cbebb4f/boilerio-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "13a6426f7f00069989837bea3b49b458", "sha256": "5ed2cc9d747a878cd85f4d86cab8ce539eb2cb7799eed1350bafeb563692f359"}, "downloads": -1, "filename": "boilerio-0.0.4.tar.gz", "has_sig": false, "md5_digest": "13a6426f7f00069989837bea3b49b458", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23541, "upload_time": "2020-02-15T19:46:12", "upload_time_iso_8601": "2020-02-15T19:46:12.863128Z", "url": "https://files.pythonhosted.org/packages/45/85/67b17c2743ad4c24d4bf1f6b910b17dcb9377de8b9803a8fd8273cbebb4f/boilerio-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:48 2020"}