{"info": {"author": "Hannu Valtonen", "author_email": "hannu.valtonen@ohmu.fi", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "Intended Audience :: System Administrators", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database :: Database Engines/Servers", "Topic :: Software Development :: Libraries"], "description": "PGHoard |BuildStatus|_\n======================\n\n.. |BuildStatus| image:: https://travis-ci.org/aiven/pghoard.png?branch=master\n.. _BuildStatus: https://travis-ci.org/aiven/pghoard\n\n``pghoard`` is a PostgreSQL backup daemon and restore tooling that stores backup data in cloud object stores.\n\nFeatures:\n\n* Automatic periodic basebackups\n* Automatic transaction log (WAL/xlog) backups (using either ``pg_receivexlog``,\n  ``archive_command`` or experimental PG native replication protocol support with ``walreceiver``)\n* Optional Standalone Hot Backup support\n* Cloud object storage support (AWS S3, Google Cloud, OpenStack Swift, Azure, Ceph)\n* Backup restoration directly from object storage, compressed and encrypted\n* Point-in-time-recovery (PITR)\n* Initialize a new standby from object storage backups, automatically configured as\n  a replicating hot-standby\n\nFault-resilience and monitoring:\n\n* Persists over temporary object storage connectivity issues by retrying transfers\n* Verifies WAL file headers before upload (backup) and after download (restore),\n  so that e.g. files recycled by PostgreSQL are ignored\n* Automatic history cleanup (backups and related WAL files older than N days)\n* \"Archive sync\" tool for detecting holes in WAL backup streams and fixing them\n* \"Archive cleanup\" tool for deleting obsolete WAL files from the archive\n* Keeps statistics updated in a file on disk (for monitoring tools)\n* Creates alert files on disk on problems (for monitoring tools)\n\nPerformance:\n\n* Parallel compression and encryption\n* WAL pre-fetching on restore\n\n\nOverview\n========\n\nPostgreSQL Point In Time Replication (PITR) consists of a having a database\nbasebackup and changes after that point go into WAL log files that can be\nreplayed to get to the desired replication point.\n\nPGHoard supports multiple operating models.  The basic mode where you have a\nseparate backup machine, ``pghoard`` can simply connect with\n``pg_receivexlog`` to receive WAL files from the database as they're\nwritten.  Another model is to use ``pghoard_postgres_command`` as a\nPostgreSQL ``archive_command``. There is also experimental support for PGHoard to\nuse PostgreSQL's native replication protocol with the experimental\n``walreceiver`` mode.\n\nWith both modes of operations PGHoard creates periodic basebackups using\n``pg_basebackup`` that is run against the database in question.\n\nThe PostgreSQL write-ahead log (WAL) and basebackups are compressed with\nSnappy (default), Zstandard (configurable, level 3 by default) or LZMA (configurable,\nlevel 0 by default) in order to ensure good compression speed and relatively small backup size.\nFor performance critical applications it is recommended to test compression\nalgorithms to find the most suitable trade-off for the particular use-case.\nE.g. Snappy is fast but yields larger compressed files, Zstandard (zstd) on the other hand\noffers a very wide range of compression/speed trade-off.\n\nOptionally, PGHoard can encrypt backed up data at rest. Each individual\nfile is encrypted and authenticated with file specific keys. The file\nspecific keys are included in the backup in turn encrypted with a master\nRSA private/public key pair.\n\nPGHoard supports backing up and restoring from either a local filesystem or\nfrom various object stores (AWS S3, Azure, Ceph, Google Cloud and OpenStack\nSwift.)\n\nIn case you just have a single database machine, it is heavily recommended\nto utilize one of the object storage services to allow backup recovery even\nif the host running PGHoard is incapacitated.\n\n\nRequirements\n============\n\nPGHoard can backup and restore PostgreSQL versions 9.3 and above.  The\ndaemon is implemented in Python and works with CPython version 3.3 or newer.\nThe following Python modules are required:\n\n* psycopg2_ to look up transaction log metadata\n* requests_ for the internal client-server architecture\n\n.. _`psycopg2`: http://initd.org/psycopg/\n.. _`requests`: http://www.python-requests.org/en/latest/\n\nOptional requirements include:\n\n* azure_ for Microsoft Azure object storage\n* botocore_ for AWS S3 (or Ceph-S3) object storage\n* google-api-client_ for Google Cloud object storage\n* cryptography_ for backup encryption and decryption (version 0.8 or newer required)\n* snappy_ for Snappy compression and decompression\n* zstandard_ for Zstandard (zstd) compression and decompression\n* systemd_ for systemd integration\n* swiftclient_ for OpenStack Swift object storage\n* paramiko_  for sftp object storage\n\n.. _`azure`: https://github.com/Azure/azure-sdk-for-python\n.. _`botocore`: https://github.com/boto/botocore\n.. _`google-api-client`: https://github.com/google/google-api-python-client\n.. _`cryptography`: https://cryptography.io/\n.. _`snappy`: https://github.com/andrix/python-snappy\n.. _`zstandard`: https://github.com/indygreg/python-zstandard\n.. _`systemd`: https://github.com/systemd/python-systemd\n.. _`swiftclient`: https://github.com/openstack/python-swiftclient\n.. _`paramiko`: https://github.com/paramiko/paramiko\n\nDeveloping and testing PGHoard also requires the following utilities:\nflake8_, pylint_ and pytest_.\n\n.. _`flake8`: https://flake8.readthedocs.io/\n.. _`pylint`: https://www.pylint.org/\n.. _`pytest`: http://pytest.org/\n\nPGHoard has been developed and tested on modern Linux x86-64 systems, but\nshould work on other platforms that provide the required modules.\n\nVagrant\n=======\n\nThe Vagrantfile can be used to setup a vagrant development environment, consisting of two\nvagrant virtual machines.\n\n1) Postgresql 9.4, python 3.5 and 3.6::\n\n    vagrant up\n    vagrant ssh postgres9\n    cd /vagrant\n    source ~/venv3/bin/activate\n    make test\n    source ~/venv3.6/bin/activate\n    make test\n\n2) Postgresql 10 and python 3.7::\n\n    vagrant ssh postgres10\n    cd /vagrant\n    make test\n\nNote: make deb does not work from vagrant at the moment, hopefully this will be resolved soon\n\nBuilding\n========\n\nTo build an installation package for your distribution, go to the root\ndirectory of a PGHoard Git checkout and run:\n\nDebian::\n\n  make deb\n\nThis will produce a ``.deb`` package into the parent directory of the Git\ncheckout.\n\nFedora::\n\n  make rpm\n\nThis will produce a ``.rpm`` package usually into ``rpm/RPMS/noarch/``.\n\nPython/Other::\n\n  python setup.py bdist_egg\n\nThis will produce an egg file into a dist directory within the same folder.\n\n\nInstallation\n============\n\nTo install it run as root:\n\nDebian::\n\n  dpkg -i ../pghoard*.deb\n\nFedora::\n\n  dnf install rpm/RPMS/noarch/*\n\nOn Linux systems it is recommended to simply run ``pghoard`` under\n``systemd``::\n\n  systemctl enable pghoard.service\n\nand eventually after the setup section, you can just run::\n\n  systemctl start pghoard.service\n\nPython/Other::\n\n  easy_install dist/pghoard-1.7.0-py3.6.egg\n\nOn systems without ``systemd`` it is recommended that you run ``pghoard``\nunder Supervisor_ or other similar process control system.\n\n.. _`Supervisor`: http://supervisord.org\n\n\nSetup\n=====\n\nAfter this you need to create a suitable JSON configuration file for your\ninstallation.\n\n0.  Make sure PostgreSQL is configured to allow WAL archival and retrieval.\n    ``postgresql.conf`` should have ``wal_level`` set to ``archive`` or\n    higher and ``max_wal_senders`` set to at least ``1`` (``archive_command`` mode)\n    or at least ``2`` (``pg_receivexlog`` and ``walreceiver`` modes), for example::\n\n        wal_level = archive\n        max_wal_senders = 4\n\n    Note that changing ``wal_level`` or ``max_wal_senders`` settings requires\n    restarting PostgreSQL.\n\n1. Create a suitable PostgreSQL user account for ``pghoard``::\n\n     CREATE USER pghoard PASSWORD 'putyourpasswordhere' REPLICATION;\n\n2. Edit the local ``pg_hba.conf`` to allow access for the newly created\n   account to the ``replication`` database from the master and standby\n   nodes. For example::\n\n     # TYPE  DATABASE     USER     ADDRESS       METHOD\n     host    replication  pghoard  127.0.0.1/32  md5\n\n   After editing, please reload the configuration with either::\n\n     SELECT pg_reload_conf();\n\n   or by sending directly a ``SIGHUP`` to the PostgreSQL ``postmaster`` process.\n\n3. Fill in the created user account and master/standby addresses into the\n   configuration file ``pghoard.json`` to the section ``backup_sites``.\n\n4. Fill in the possible object storage user credentials into the\n   configuration file ``pghoard.json`` under section ``object_storage``\n   in case you wish ``pghoard`` to back up into the cloud.\n\n5. Now copy the same ``pghoard.json`` configuration to the standby\n   node if there are any.\n\nOther possible configuration settings are covered in more detail under the\n`Configuration keys`_ section of this README.\n\n6. If all has been set up correctly up to this point, ``pghoard`` should now be\n   ready to be started.\n\n\nBacking up your database\n========================\n\nPostgreSQL backups consist of full database backups, *basebackups*, plus\nwrite ahead logs and related metadata, *WAL*.  Both *basebackups* and *WAL*\nare required to create and restore a consistent database (does not apply\nfor standalone hot backups).\n\nTo enable backups with PGHoard the ``pghoard`` daemon must be running\nlocally.  The daemon will periodically take full basebackups of the database\nfiles to the object store.  Additionally, PGHoard and PostgreSQL must be set\nup correctly to archive the WAL.  There are two ways to do this:\n\nThe default option is to use PostgreSQL's own WAL-archive mechanism with\n``pghoard`` by running the ``pghoard`` daemon locally and entering the\nfollowing configuration keys in ``postgresql.conf``::\n\n    archive_mode = on\n    archive_command = pghoard_postgres_command --mode archive --site default --xlog %f\n\nThis instructs PostgreSQL to call the ``pghoard_postgres_command`` whenever\na new WAL segment is ready.  The command instructs PGHoard to store the\nsegment in its object store.\n\nThe other option is to set up PGHoard to read the WAL stream directly from\nPostgreSQL.  To do this ``archive_mode`` must be disabled in\n``postgresql.conf`` and ``pghoard.json`` must set ``active_backup_mode`` to\n``pg_receivexlog`` in the relevant site, for example::\n\n    {\n        \"backup_sites\": {\n            \"default\": {\n                \"active_backup_mode\": \"pg_receivexlog\",\n                ...\n             },\n         },\n         ...\n     }\n\nNote that as explained in the `Setup`_ section, ``postgresql.conf`` setting\n``wal_level`` must always be set to ``archive``, ``hot_standby`` or\n``logical`` and ``max_wal_senders`` must allow 2 connections from PGHoard,\ni.e. it should be set to 2 plus the number of streaming replicas, if any.\n\nWhile ``pghoard`` is running it may be useful to read the JSON state file\n``pghoard_state.json`` that exists where ``json_state_file_path`` points.\nThe JSON state file is human readable and is meant to describe the current\nstate of ``pghoard`` 's backup activities.\n\n\nStandalone Hot Backup Support\n=============================\n\nPghoard has the option to enable standalone hot backups.\n\nTo do this ``archive_mode`` must be disabled in ``postgresql.conf`` and\n``pghoard.json`` must set ``active_backup_mode`` to ``standalone_hot_backup``\nin the relevant site, for example::\n\n\n    {\n        \"backup_sites\": {\n            \"default\": {\n                \"active_backup_mode\": \"standalone_hot_backup\",\n                ...\n             },\n         },\n         ...\n     }\n\n\nFor more information refer to the postgresql documentation\nhttps://www.postgresql.org/docs/9.5/continuous-archiving.html#BACKUP-STANDALONE\n\n\nRestoring databases\n===================\n\nYou can list your database basebackups by running::\n\n  pghoard_restore list-basebackups --config /var/lib/pghoard/pghoard.json\n\n  Basebackup                       Size  Start time            Metadata\n  -------------------------------  ----  --------------------  ------------\n  default/basebackup/2016-04-12_0  8 MB  2016-04-12T07:31:27Z  {'original-file-size': '48060928',\n                                                                'start-wal-segment': '000000010000000000000012',\n                                                                'compression-algorithm': 'snappy'}\n\nIf we'd want to restore to the latest point in time we could fetch the\nrequired basebackup by running::\n\n  pghoard_restore get-basebackup --config /var/lib/pghoard/pghoard.json \\\n      --target-dir /var/lib/pgsql/9.5/data --restore-to-master\n\n  Basebackup complete.\n  You can start PostgreSQL by running pg_ctl -D foo start\n  On systemd based systems you can run systemctl start postgresql\n  On SYSV Init based systems you can run /etc/init.d/postgresql start\n\nNote that the ``target-dir`` needs to be either an empty or non-existent\ndirectory in which case PGHoard will automatically create it.\n\nAfter this we'd proceed to start both the PGHoard server process and the\nPostgreSQL server normally by running (on systemd based systems, assuming\nPostgreSQL 9.5 is used)::\n\n  systemctl start pghoard\n  systemctl start postgresql-9.5\n\nWhich will make PostgreSQL start recovery process to the latest point\nin time. PGHoard must be running before you start up the\nPostgreSQL server. To see other possible restoration options please run::\n\n  pghoard_restore --help\n\n\nCommands\n========\n\nOnce correctly installed, there are six commands available:\n\n``pghoard`` is the main daemon process that should be run under a service\nmanager, such as ``systemd`` or ``supervisord``.  It handles the backup of\nthe configured sites.\n\n``pghoard_restore`` is a command line tool that can be used to restore a\nprevious database backup from either ``pghoard`` itself or from one of the\nsupported object stores.  ``pghoard_restore`` can also configure\n``recovery.conf`` to use ``pghoard_postgres_command`` as the WAL\n``restore_command`` in ``recovery.conf``.\n\n``pghoard_archive_cleanup`` can be used to clean up any orphan WAL files\nfrom the object store.  After the configured number of basebackups has been\nexceeded (configuration key ``basebackup_count``), ``pghoard`` deletes the\noldest basebackup and all WAL associated with it.  Transient object storage\nfailures and other interruptions can cause the WAL deletion process to leave\norphan WAL files behind, they can be deleted with this tool.\n\n``pghoard_archive_sync`` can be used to see if any local files should\nbe archived but haven't been or if any of the archived files have unexpected\ncontent and need to be archived again. The other usecase it has is to determine\nif there are any gaps in the required files in the WAL archive\nfrom the current WAL file on to to the latest basebackup's first WAL file.\n\n``pghoard_create_keys`` can be used to generate and output encryption keys\nin the ``pghoard`` configuration format.\n\n``pghoard_postgres_command`` is a command line tool that can be used as\nPostgreSQL's ``archive_command`` or ``recovery_command``.  It communicates with\n``pghoard`` 's locally running webserver to let it know there's a new file that\nneeds to be compressed, encrypted and stored in an object store (in archive\nmode) or it's inverse (in restore mode.)\n\n\nConfiguration keys\n==================\n\n``active`` (default ``true``)\n\nCan be set on a per ``backup_site`` level to ``false`` to disable the taking\nof new backups and to stop the deletion of old ones.\n\n``active_backup_mode`` (default ``pg_receivexlog``)\n\nCan be either ``pg_receivexlog`` or ``archive_command``. If set to\n``pg_receivexlog``, ``pghoard`` will start up a ``pg_receivexlog`` process to be\nrun against the database server.  If ``archive_command`` is set, we rely on the\nuser setting the correct ``archive_command`` in\n``postgresql.conf``. You can also set this to the experimental ``walreceiver`` mode\nwhereby pghoard will start communicating directly with PostgreSQL\nthrough the replication protocol. (Note requires an unreleased version\nof psycopg2 library)\n\n``alert_file_dir`` (default ``backup_location`` if set else ``os.getcwd()``)\n\nDirectory in which alert files for replication warning and failover are\ncreated.\n\n``backup_location`` (no default)\n\nPlace where ``pghoard`` will create its internal data structures for local state\ndata and the actual backups.  (if no object storage is used)\n\n``backup_sites`` (default ``{}``)\n\nThis object contains names and configurations for the different PostgreSQL\nclusters (here called ``sites``) from which to take backups.  The\nconfiguration keys for sites are listed below.\n\n* ``compression`` WAL/basebackup compression parameters\n\n * ``algorithm`` default ``\"snappy\"`` if available, otherwise ``\"lzma\"`` or ``\"zstd\"``\n * ``level`` default ``\"0\"`` compression level for ``\"lzma\"`` or ``\"zstd\"`` compression\n * ``thread_count`` (default max(cpu_count, ``5``)) number of parallel compression threads\n\n``hash_algorithm`` (default ``\"sha1\"``)\n\nThe hash algorithm used for calculating checksums for WAL or other files. Must\nbe one of the algorithms supported by Python's hashlib.\n\n``http_address`` (default ``\"127.0.0.1\"``)\n\nAddress to bind the PGHoard HTTP server to.  Set to an empty string to\nlisten to all available addresses.\n\n``http_port`` (default ``16000``)\n\nHTTP webserver port. Used for the archive command and for fetching of\nbasebackups/WAL's when restoring if not using an object store.\n\n``json_state_file_path`` (default ``\"/var/lib/pghoard/pghoard_state.json\"``)\n\nLocation of a JSON state file which describes the state of the ``pghoard``\nprocess.\n\n``log_level`` (default ``\"INFO\"``)\n\nDetermines log level of ``pghoard``.\n\n``maintenance_mode_file`` (default ``\"/var/lib/pghoard/maintenance_mode_file\"``)\n\nIf a file exists in this location, no new backup actions will be started.\n\n``restore_prefetch`` (default ``transfer.thread_count``)\n\nNumber of files to prefetch when performing archive recovery.  The default\nis the number of Transfer Agent threads to try to utilize them all.\n\n``statsd`` (default: disabled)\n\nEnables metrics sending to a statsd daemon that supports Telegraf\nor DataDog syntax with tags.\n\nThe value is a JSON object::\n\n  {\n      \"host\": \"<statsd address>\",\n      \"port\": <statsd port>,\n      \"format\": \"<statsd message format>\",\n      \"tags\": {\n          \"<tag>\": \"<value>\"\n      }\n  }\n\n``format`` (default: ``\"telegraf\"``)\n\nDetermines statsd message format. Following formats are supported:\n\n* ``telegraf`` `Telegraf spec`_\n\n.. _`Telegraf spec`: https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd\n\n* ``datadog`` `DataDog spec`_\n\n.. _`DataDog spec`: http://docs.datadoghq.com/guides/dogstatsd/#datagram-format\n\nThe ``tags`` setting can be used to enter optional tag values for the metrics.\n\n``pushgateway`` (default: disabled)\n\nEnables metrics sending to a Prometheus Pushgateway with tags.\n\nThe value is a JSON object::\n\n  {\n      \"endpoint\": \"<pushgateway address>\",\n      \"tags\": {\n          \"<tag>\": \"<value>\"\n      }\n  }\n\nThe ``tags`` setting can be used to enter optional tag values for the metrics.\n\n``prometheus`` (default: disabled)\n\nExpose metrics through a Prometheus endpoint.\n\nThe value is a JSON object::\n\n  {\n      \"tags\": {\n          \"<tag>\": \"<value>\"\n      }\n  }\n\nThe ``tags`` setting can be used to enter optional tag values for the metrics.\n\n``syslog`` (default ``false``)\n\nDetermines whether syslog logging should be turned on or not.\n\n``syslog_address`` (default ``\"/dev/log\"``)\n\nDetermines syslog address to use in logging (requires syslog to be true as\nwell)\n\n``syslog_facility`` (default ``\"local2\"``)\n\nDetermines syslog log facility. (requires syslog to be true as well)\n\n* ``transfer`` WAL/basebackup transfer parameters\n\n * ``thread_count`` (default max(cpu_count, ``5``)) number of parallel uploads/downloads\n\n``upload_retries_warning_limit`` (default ``3``)\n\nAfter this many failed upload attempts for a single file, create an\nalert file.\n\n``tar_executable`` (default ``\"pghoard_gnutaremu\"``)\n\nThe tar command to use for restoring basebackups. This must be GNU tar because some\nadvanced switches like ``--transform`` are needed. If this value is not defined (or\nis explicitly set to ``\"pghoard_gnutaremu\"``), Python's internal tarfile\nimplementation is used. The Python implementation is somewhat slower than the\nactual tar command and in environments with fast disk IO (compared to available CPU\ncapacity) it is recommended to set this to ``\"tar\"``.\n\nBackup site configuration\n=========================\n\nThe following options control the behavior of each backup site.  A backup\nsite means an individual PostgreSQL installation (\"cluster\" in PostgreSQL\nterminology) from which to take backups.\n\n``basebackup_chunks_in_progress`` (default ``5``)\n\nHow many basebackup chunks can there be simultaneously on disk while\nit is being taken. For chunk size configuration see ``basebackup_chunk_size``.\n\n``basebackup_chunk_size`` (default ``2147483648``)\n\nIn how large backup chunks to take a ``local-tar`` basebackup. Disk\nspace needed for a successful backup is this variable multiplied by\n``basebackup_chunks_in_progress``.\n\n``basebackup_count`` (default ``2``)\n\nHow many basebackups should be kept around for restoration purposes.  The\nmore there are the more diskspace will be used.\n\n``basebackup_interval_hours`` (default ``24``)\n\nHow often to take a new basebackup of a cluster.  The shorter the interval,\nthe faster your recovery will be, but the more CPU/IO usage is required from\nthe servers it takes the basebackup from.  If set to a null value basebackups\nare not automatically taken at all.\n\n``basebackup_mode`` (default ``\"basic\"``)\n\nThe way basebackups should be created.  The default mode, ``basic`` runs\n``pg_basebackup`` and waits for it to write an uncompressed tar file on the\ndisk before compressing and optionally encrypting it.  The alternative mode\n``pipe`` pipes the data directly from ``pg_basebackup`` to PGHoard's\ncompression and encryption processing reducing the amount of temporary disk\nspace that's required.\n\nNeither ``basic`` nor ``pipe`` modes support multiple tablespaces.\n\nSetting ``basebackup_mode`` to ``local-tar`` avoids using ``pg_basebackup``\nentirely when ``pghoard`` is running on the same host as the database.\nPGHoard reads the files directly from ``$PGDATA`` in this mode and\ncompresses and optionally encrypts them.  This mode allows backing up user\ntablespaces.\n\nNote that the ``local-tar`` backup mode can not be used on replica servers\nprior to PostgreSQL 9.6 unless the pgespresso extension is installed.\n\n``encryption_key_id`` (no default)\n\nSpecifies the encryption key used when storing encrypted backups. If this\nconfiguration directive is specified, you must also define the public key\nfor storing as well as private key for retrieving stored backups. These\nkeys are specified with ``encryption_keys`` dictionary.\n\n``encryption_keys`` (no default)\n\nThis key is a mapping from key id to keys. Keys in turn are mapping from\n``public`` and ``private`` to PEM encoded RSA public and private keys\nrespectively. Public key needs to be specified for storing backups. Private\nkey needs to be in place for restoring encrypted backups.\n\nYou can use ``pghoard_create_keys`` to generate and output encryption keys\nin the ``pghoard`` configuration format.\n\n``object_storage`` (no default)\n\nConfigured in ``backup_sites`` under a specific site.  If set, it must be an\nobject describing a remote object storage.  The object must contain a key\n``storage_type`` describing the type of the store, other keys and values are\nspecific to the storage type.\n\nThe following object storage types are supported:\n\n* ``local`` makes backups to a local directory, see ``pghoard-local-minimal.json``\n  for example. Required keys:\n\n * ``directory`` for the path to the backup target (local) storage directory\n\n* ``sftp`` makes backups to a sftp server, required keys:\n\n * ``server``\n * ``port``\n * ``username``\n * ``password`` or ``private_key``\n\n* ``google`` for Google Cloud Storage, required configuration keys:\n\n * ``project_id`` containing the Google Storage project identifier\n * ``bucket_name`` bucket where you want to store the files\n * ``credential_file`` for the path to the Google JSON credential file\n\n* ``s3`` for Amazon Web Services S3, required configuration keys:\n\n * ``aws_access_key_id`` for the AWS access key id\n * ``aws_secret_access_key`` for the AWS secret access key\n * ``region`` S3 region of the bucket\n * ``bucket_name`` name of the S3 bucket\n\nOptional keys for Amazon Web Services S3:\n\n * ``encrypted`` if True, use server-side encryption. Default is False.\n\n* ``s3`` for other S3 compatible services such as Ceph, required\n  configuration keys:\n\n * ``aws_access_key_id`` for the AWS access key id\n * ``aws_secret_access_key`` for the AWS secret access key\n * ``bucket_name`` name of the S3 bucket\n * ``host`` for overriding host for non AWS-S3 implementations\n * ``port`` for overriding port for non AWS-S3 implementations\n * ``is_secure`` for overriding the requirement for https for non AWS-S3\n * ``is_verify_tls`` for configuring tls verify for non AWS-S3\n   implementations\n\n* ``azure`` for Microsoft Azure Storage, required configuration keys:\n\n * ``account_name`` for the name of the Azure Storage account\n * ``account_key`` for the secret key of the Azure Storage account\n * ``bucket_name`` for the name of Azure Storage container used to store\n   objects\n * ``azure_cloud`` Azure cloud selector, ``\"public\"`` (default) or ``\"germany\"``\n\n* ``swift`` for OpenStack Swift, required configuration keys:\n\n * ``user`` for the Swift user ('subuser' in Ceph RadosGW)\n * ``key`` for the Swift secret_key\n * ``auth_url`` for Swift authentication URL\n * ``container_name`` name of the data container\n\n * Optional configuration keys for Swift:\n\n  * ``auth_version`` - ``2.0`` (default) or ``3.0`` for keystone, use ``1.0`` with\n    Ceph Rados GW.\n  * ``segment_size`` - defaults to ``1024**3`` (1 gigabyte).  Objects larger\n    than this will be split into multiple segments on upload.  Many Swift\n    installations require large files (usually 5 gigabytes) to be segmented.\n  * ``tenant_name``\n  * ``region_name``\n  * ``user_id`` - for auth_version 3.0\n  * ``user_domain_id`` - for auth_version 3.0\n  * ``user_domain_name`` - for auth_version 3.0\n  * ``tenant_id`` - for auth_version 3.0\n  * ``project_id`` - for auth_version 3.0\n  * ``project_name`` - for auth_version 3.0\n  * ``project_domain_id`` - for auth_version 3.0\n  * ``project_domain_name`` - for auth_version 3.0\n  * ``service_type`` - for auth_version 3.0\n  * ``endpoint_type`` - for auth_version 3.0\n\n``nodes`` (no default)\n\nArray of one or more nodes from which the backups are taken.  A node can be\ndescribed as an object of libpq key: value connection info pairs or libpq\nconnection string or a ``postgres://`` connection uri. If for example you'd\nlike to use a streaming replication slot use the syntax {... \"slot\": \"slotname\"}.\n\n``pg_bin_directory`` (default: find binaries from well-known directories)\n\nSite-specific option for finding ``pg_basebackup`` and ``pg_receivexlog``\ncommands matching the given backup site's PostgreSQL version.  If a value is\nnot supplied PGHoard will attempt to find matching binaries from various\nwell-known locations.  In case ``pg_data_directory`` is set and points to a\nvalid data directory the lookup is restricted to the version contained in\nthe given data directory.\n\n``pg_data_directory`` (no default)\n\nThis is used when the ``local-tar`` ``basebackup_mode`` is used.  The data\ndirectory must point to PostgreSQL's ``$PGDATA`` and must be readable by the\n``pghoard`` daemon.\n\n``prefix`` (default: site name)\n\nPath prefix to use for all backups related to this site.  Defaults to the\nname of the site.\n\n\nAlert files\n===========\n\nAlert files are created whenever an error condition that requires human\nintervention to solve.  You're recommended to add checks for the existence\nof these files to your alerting system.\n\n``authentication_error``\n\nThere has been a problem in the authentication of at least one of the\nPostgreSQL connections.  This usually denotes a wrong username and/or\npassword.\n\n``configuration_error``\n\nThere has been a problem in the authentication of at least one of the\nPostgreSQL connections.  This usually denotes a missing ``pg_hba.conf`` entry or\nincompatible settings in postgresql.conf.\n\n``upload_retries_warning``\n\nUpload of a file has failed more times than\n``upload_retries_warning_limit``. Needs human intervention to figure\nout why and to delete the alert once the situation has been fixed.\n\n``version_mismatch_error``\n\nYour local PostgreSQL client versions of ``pg_basebackup`` or\n``pg_receivexlog`` do not match with the servers PostgreSQL version.  You\nneed to update them to be on the same version level.\n\n``version_unsupported_error``\n\nServer PostgreSQL version is not supported.\n\n\nLicense\n=======\n\nPGHoard is licensed under the Apache License, Version 2.0. Full license text\nis available in the ``LICENSE`` file and at\nhttp://www.apache.org/licenses/LICENSE-2.0.txt\n\n\nCredits\n=======\n\nPGHoard was created by Hannu Valtonen <hannu.valtonen@ohmu.fi> for\n`Aiven Cloud Database`_ and is now maintained by `Ohmu Ltd`_ hackers and\nAiven developers <pghoard@ohmu.fi>.\n\n.. _`Ohmu Ltd`: https://ohmu.fi/\n.. _`Aiven Cloud Database`: https://aiven.io/\n\nRecent contributors are listed on the GitHub project page,\nhttps://github.com/aiven/pghoard/graphs/contributors\n\n\nContact\n=======\n\nBug reports and patches are very welcome, please post them as GitHub issues\nand pull requests at https://github.com/aiven/pghoard .  Any possible\nvulnerabilities or other serious issues should be reported directly to the\nmaintainers <opensource@ohmu.fi>.\n\n\nCopyright\n=========\n\nCopyright (C) 2015 Ohmu Ltd\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/aiven/pghoard/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pghoard", "package_url": "https://pypi.org/project/pghoard/", "platform": "POSIX", "project_url": "https://pypi.org/project/pghoard/", "project_urls": {"Homepage": "https://github.com/aiven/pghoard/"}, "release_url": "https://pypi.org/project/pghoard/2.1.0/", "requires_dist": null, "requires_python": "", "summary": "PostgreSQL automatic backup/restore service daemon", "version": "2.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pghoard-buildstatus\">\n<h2>PGHoard <a href=\"https://travis-ci.org/aiven/pghoard\" rel=\"nofollow\"><img alt=\"BuildStatus\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/640f69940bccc89ee225db50a69c0e63c23e04d9/68747470733a2f2f7472617669732d63692e6f72672f616976656e2f7067686f6172642e706e673f6272616e63683d6d6173746572\"></a></h2>\n<p><tt>pghoard</tt> is a PostgreSQL backup daemon and restore tooling that stores backup data in cloud object stores.</p>\n<p>Features:</p>\n<ul>\n<li>Automatic periodic basebackups</li>\n<li>Automatic transaction log (WAL/xlog) backups (using either <tt>pg_receivexlog</tt>,\n<tt>archive_command</tt> or experimental PG native replication protocol support with <tt>walreceiver</tt>)</li>\n<li>Optional Standalone Hot Backup support</li>\n<li>Cloud object storage support (AWS S3, Google Cloud, OpenStack Swift, Azure, Ceph)</li>\n<li>Backup restoration directly from object storage, compressed and encrypted</li>\n<li>Point-in-time-recovery (PITR)</li>\n<li>Initialize a new standby from object storage backups, automatically configured as\na replicating hot-standby</li>\n</ul>\n<p>Fault-resilience and monitoring:</p>\n<ul>\n<li>Persists over temporary object storage connectivity issues by retrying transfers</li>\n<li>Verifies WAL file headers before upload (backup) and after download (restore),\nso that e.g. files recycled by PostgreSQL are ignored</li>\n<li>Automatic history cleanup (backups and related WAL files older than N days)</li>\n<li>\u201cArchive sync\u201d tool for detecting holes in WAL backup streams and fixing them</li>\n<li>\u201cArchive cleanup\u201d tool for deleting obsolete WAL files from the archive</li>\n<li>Keeps statistics updated in a file on disk (for monitoring tools)</li>\n<li>Creates alert files on disk on problems (for monitoring tools)</li>\n</ul>\n<p>Performance:</p>\n<ul>\n<li>Parallel compression and encryption</li>\n<li>WAL pre-fetching on restore</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>PostgreSQL Point In Time Replication (PITR) consists of a having a database\nbasebackup and changes after that point go into WAL log files that can be\nreplayed to get to the desired replication point.</p>\n<p>PGHoard supports multiple operating models.  The basic mode where you have a\nseparate backup machine, <tt>pghoard</tt> can simply connect with\n<tt>pg_receivexlog</tt> to receive WAL files from the database as they\u2019re\nwritten.  Another model is to use <tt>pghoard_postgres_command</tt> as a\nPostgreSQL <tt>archive_command</tt>. There is also experimental support for PGHoard to\nuse PostgreSQL\u2019s native replication protocol with the experimental\n<tt>walreceiver</tt> mode.</p>\n<p>With both modes of operations PGHoard creates periodic basebackups using\n<tt>pg_basebackup</tt> that is run against the database in question.</p>\n<p>The PostgreSQL write-ahead log (WAL) and basebackups are compressed with\nSnappy (default), Zstandard (configurable, level 3 by default) or LZMA (configurable,\nlevel 0 by default) in order to ensure good compression speed and relatively small backup size.\nFor performance critical applications it is recommended to test compression\nalgorithms to find the most suitable trade-off for the particular use-case.\nE.g. Snappy is fast but yields larger compressed files, Zstandard (zstd) on the other hand\noffers a very wide range of compression/speed trade-off.</p>\n<p>Optionally, PGHoard can encrypt backed up data at rest. Each individual\nfile is encrypted and authenticated with file specific keys. The file\nspecific keys are included in the backup in turn encrypted with a master\nRSA private/public key pair.</p>\n<p>PGHoard supports backing up and restoring from either a local filesystem or\nfrom various object stores (AWS S3, Azure, Ceph, Google Cloud and OpenStack\nSwift.)</p>\n<p>In case you just have a single database machine, it is heavily recommended\nto utilize one of the object storage services to allow backup recovery even\nif the host running PGHoard is incapacitated.</p>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<p>PGHoard can backup and restore PostgreSQL versions 9.3 and above.  The\ndaemon is implemented in Python and works with CPython version 3.3 or newer.\nThe following Python modules are required:</p>\n<ul>\n<li><a href=\"http://initd.org/psycopg/\" rel=\"nofollow\">psycopg2</a> to look up transaction log metadata</li>\n<li><a href=\"http://www.python-requests.org/en/latest/\" rel=\"nofollow\">requests</a> for the internal client-server architecture</li>\n</ul>\n<p>Optional requirements include:</p>\n<ul>\n<li><a href=\"https://github.com/Azure/azure-sdk-for-python\" rel=\"nofollow\">azure</a> for Microsoft Azure object storage</li>\n<li><a href=\"https://github.com/boto/botocore\" rel=\"nofollow\">botocore</a> for AWS S3 (or Ceph-S3) object storage</li>\n<li><a href=\"https://github.com/google/google-api-python-client\" rel=\"nofollow\">google-api-client</a> for Google Cloud object storage</li>\n<li><a href=\"https://cryptography.io/\" rel=\"nofollow\">cryptography</a> for backup encryption and decryption (version 0.8 or newer required)</li>\n<li><a href=\"https://github.com/andrix/python-snappy\" rel=\"nofollow\">snappy</a> for Snappy compression and decompression</li>\n<li><a href=\"https://github.com/indygreg/python-zstandard\" rel=\"nofollow\">zstandard</a> for Zstandard (zstd) compression and decompression</li>\n<li><a href=\"https://github.com/systemd/python-systemd\" rel=\"nofollow\">systemd</a> for systemd integration</li>\n<li><a href=\"https://github.com/openstack/python-swiftclient\" rel=\"nofollow\">swiftclient</a> for OpenStack Swift object storage</li>\n<li><a href=\"https://github.com/paramiko/paramiko\" rel=\"nofollow\">paramiko</a>  for sftp object storage</li>\n</ul>\n<p>Developing and testing PGHoard also requires the following utilities:\n<a href=\"https://flake8.readthedocs.io/\" rel=\"nofollow\">flake8</a>, <a href=\"https://www.pylint.org/\" rel=\"nofollow\">pylint</a> and <a href=\"http://pytest.org/\" rel=\"nofollow\">pytest</a>.</p>\n<p>PGHoard has been developed and tested on modern Linux x86-64 systems, but\nshould work on other platforms that provide the required modules.</p>\n</div>\n<div id=\"vagrant\">\n<h2>Vagrant</h2>\n<p>The Vagrantfile can be used to setup a vagrant development environment, consisting of two\nvagrant virtual machines.</p>\n<ol>\n<li><p>Postgresql 9.4, python 3.5 and 3.6:</p>\n<pre>vagrant up\nvagrant ssh postgres9\ncd /vagrant\nsource ~/venv3/bin/activate\nmake test\nsource ~/venv3.6/bin/activate\nmake test\n</pre>\n</li>\n<li><p>Postgresql 10 and python 3.7:</p>\n<pre>vagrant ssh postgres10\ncd /vagrant\nmake test\n</pre>\n</li>\n</ol>\n<p>Note: make deb does not work from vagrant at the moment, hopefully this will be resolved soon</p>\n</div>\n<div id=\"building\">\n<h2>Building</h2>\n<p>To build an installation package for your distribution, go to the root\ndirectory of a PGHoard Git checkout and run:</p>\n<p>Debian:</p>\n<pre>make deb\n</pre>\n<p>This will produce a <tt>.deb</tt> package into the parent directory of the Git\ncheckout.</p>\n<p>Fedora:</p>\n<pre>make rpm\n</pre>\n<p>This will produce a <tt>.rpm</tt> package usually into <tt>rpm/RPMS/noarch/</tt>.</p>\n<p>Python/Other:</p>\n<pre>python setup.py bdist_egg\n</pre>\n<p>This will produce an egg file into a dist directory within the same folder.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install it run as root:</p>\n<p>Debian:</p>\n<pre>dpkg -i ../pghoard*.deb\n</pre>\n<p>Fedora:</p>\n<pre>dnf install rpm/RPMS/noarch/*\n</pre>\n<p>On Linux systems it is recommended to simply run <tt>pghoard</tt> under\n<tt>systemd</tt>:</p>\n<pre>systemctl enable pghoard.service\n</pre>\n<p>and eventually after the setup section, you can just run:</p>\n<pre>systemctl start pghoard.service\n</pre>\n<p>Python/Other:</p>\n<pre>easy_install dist/pghoard-1.7.0-py3.6.egg\n</pre>\n<p>On systems without <tt>systemd</tt> it is recommended that you run <tt>pghoard</tt>\nunder <a href=\"http://supervisord.org\" rel=\"nofollow\">Supervisor</a> or other similar process control system.</p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>After this you need to create a suitable JSON configuration file for your\ninstallation.</p>\n<ol>\n<li><p>Make sure PostgreSQL is configured to allow WAL archival and retrieval.\n<tt>postgresql.conf</tt> should have <tt>wal_level</tt> set to <tt>archive</tt> or\nhigher and <tt>max_wal_senders</tt> set to at least <tt>1</tt> (<tt>archive_command</tt> mode)\nor at least <tt>2</tt> (<tt>pg_receivexlog</tt> and <tt>walreceiver</tt> modes), for example:</p>\n<pre>wal_level = archive\nmax_wal_senders = 4\n</pre>\n<p>Note that changing <tt>wal_level</tt> or <tt>max_wal_senders</tt> settings requires\nrestarting PostgreSQL.</p>\n</li>\n<li><p>Create a suitable PostgreSQL user account for <tt>pghoard</tt>:</p>\n<pre>CREATE USER pghoard PASSWORD 'putyourpasswordhere' REPLICATION;\n</pre>\n</li>\n<li><p>Edit the local <tt>pg_hba.conf</tt> to allow access for the newly created\naccount to the <tt>replication</tt> database from the master and standby\nnodes. For example:</p>\n<pre># TYPE  DATABASE     USER     ADDRESS       METHOD\nhost    replication  pghoard  127.0.0.1/32  md5\n</pre>\n<p>After editing, please reload the configuration with either:</p>\n<pre>SELECT pg_reload_conf();\n</pre>\n<p>or by sending directly a <tt>SIGHUP</tt> to the PostgreSQL <tt>postmaster</tt> process.</p>\n</li>\n<li><p>Fill in the created user account and master/standby addresses into the\nconfiguration file <tt>pghoard.json</tt> to the section <tt>backup_sites</tt>.</p>\n</li>\n<li><p>Fill in the possible object storage user credentials into the\nconfiguration file <tt>pghoard.json</tt> under section <tt>object_storage</tt>\nin case you wish <tt>pghoard</tt> to back up into the cloud.</p>\n</li>\n<li><p>Now copy the same <tt>pghoard.json</tt> configuration to the standby\nnode if there are any.</p>\n</li>\n</ol>\n<p>Other possible configuration settings are covered in more detail under the\n<a href=\"#configuration-keys\" rel=\"nofollow\">Configuration keys</a> section of this README.</p>\n<ol>\n<li>If all has been set up correctly up to this point, <tt>pghoard</tt> should now be\nready to be started.</li>\n</ol>\n</div>\n<div id=\"backing-up-your-database\">\n<h2>Backing up your database</h2>\n<p>PostgreSQL backups consist of full database backups, <em>basebackups</em>, plus\nwrite ahead logs and related metadata, <em>WAL</em>.  Both <em>basebackups</em> and <em>WAL</em>\nare required to create and restore a consistent database (does not apply\nfor standalone hot backups).</p>\n<p>To enable backups with PGHoard the <tt>pghoard</tt> daemon must be running\nlocally.  The daemon will periodically take full basebackups of the database\nfiles to the object store.  Additionally, PGHoard and PostgreSQL must be set\nup correctly to archive the WAL.  There are two ways to do this:</p>\n<p>The default option is to use PostgreSQL\u2019s own WAL-archive mechanism with\n<tt>pghoard</tt> by running the <tt>pghoard</tt> daemon locally and entering the\nfollowing configuration keys in <tt>postgresql.conf</tt>:</p>\n<pre>archive_mode = on\narchive_command = pghoard_postgres_command --mode archive --site default --xlog %f\n</pre>\n<p>This instructs PostgreSQL to call the <tt>pghoard_postgres_command</tt> whenever\na new WAL segment is ready.  The command instructs PGHoard to store the\nsegment in its object store.</p>\n<p>The other option is to set up PGHoard to read the WAL stream directly from\nPostgreSQL.  To do this <tt>archive_mode</tt> must be disabled in\n<tt>postgresql.conf</tt> and <tt>pghoard.json</tt> must set <tt>active_backup_mode</tt> to\n<tt>pg_receivexlog</tt> in the relevant site, for example:</p>\n<pre>{\n    \"backup_sites\": {\n        \"default\": {\n            \"active_backup_mode\": \"pg_receivexlog\",\n            ...\n         },\n     },\n     ...\n }\n</pre>\n<p>Note that as explained in the <a href=\"#setup\" rel=\"nofollow\">Setup</a> section, <tt>postgresql.conf</tt> setting\n<tt>wal_level</tt> must always be set to <tt>archive</tt>, <tt>hot_standby</tt> or\n<tt>logical</tt> and <tt>max_wal_senders</tt> must allow 2 connections from PGHoard,\ni.e. it should be set to 2 plus the number of streaming replicas, if any.</p>\n<p>While <tt>pghoard</tt> is running it may be useful to read the JSON state file\n<tt>pghoard_state.json</tt> that exists where <tt>json_state_file_path</tt> points.\nThe JSON state file is human readable and is meant to describe the current\nstate of <tt>pghoard</tt> \u2018s backup activities.</p>\n</div>\n<div id=\"standalone-hot-backup-support\">\n<h2>Standalone Hot Backup Support</h2>\n<p>Pghoard has the option to enable standalone hot backups.</p>\n<p>To do this <tt>archive_mode</tt> must be disabled in <tt>postgresql.conf</tt> and\n<tt>pghoard.json</tt> must set <tt>active_backup_mode</tt> to <tt>standalone_hot_backup</tt>\nin the relevant site, for example:</p>\n<pre>{\n    \"backup_sites\": {\n        \"default\": {\n            \"active_backup_mode\": \"standalone_hot_backup\",\n            ...\n         },\n     },\n     ...\n }\n</pre>\n<p>For more information refer to the postgresql documentation\n<a href=\"https://www.postgresql.org/docs/9.5/continuous-archiving.html#BACKUP-STANDALONE\" rel=\"nofollow\">https://www.postgresql.org/docs/9.5/continuous-archiving.html#BACKUP-STANDALONE</a></p>\n</div>\n<div id=\"restoring-databases\">\n<h2>Restoring databases</h2>\n<p>You can list your database basebackups by running:</p>\n<pre>pghoard_restore list-basebackups --config /var/lib/pghoard/pghoard.json\n\nBasebackup                       Size  Start time            Metadata\n-------------------------------  ----  --------------------  ------------\ndefault/basebackup/2016-04-12_0  8 MB  2016-04-12T07:31:27Z  {'original-file-size': '48060928',\n                                                              'start-wal-segment': '000000010000000000000012',\n                                                              'compression-algorithm': 'snappy'}\n</pre>\n<p>If we\u2019d want to restore to the latest point in time we could fetch the\nrequired basebackup by running:</p>\n<pre>pghoard_restore get-basebackup --config /var/lib/pghoard/pghoard.json \\\n    --target-dir /var/lib/pgsql/9.5/data --restore-to-master\n\nBasebackup complete.\nYou can start PostgreSQL by running pg_ctl -D foo start\nOn systemd based systems you can run systemctl start postgresql\nOn SYSV Init based systems you can run /etc/init.d/postgresql start\n</pre>\n<p>Note that the <tt><span class=\"pre\">target-dir</span></tt> needs to be either an empty or non-existent\ndirectory in which case PGHoard will automatically create it.</p>\n<p>After this we\u2019d proceed to start both the PGHoard server process and the\nPostgreSQL server normally by running (on systemd based systems, assuming\nPostgreSQL 9.5 is used):</p>\n<pre>systemctl start pghoard\nsystemctl start postgresql-9.5\n</pre>\n<p>Which will make PostgreSQL start recovery process to the latest point\nin time. PGHoard must be running before you start up the\nPostgreSQL server. To see other possible restoration options please run:</p>\n<pre>pghoard_restore --help\n</pre>\n</div>\n<div id=\"commands\">\n<h2>Commands</h2>\n<p>Once correctly installed, there are six commands available:</p>\n<p><tt>pghoard</tt> is the main daemon process that should be run under a service\nmanager, such as <tt>systemd</tt> or <tt>supervisord</tt>.  It handles the backup of\nthe configured sites.</p>\n<p><tt>pghoard_restore</tt> is a command line tool that can be used to restore a\nprevious database backup from either <tt>pghoard</tt> itself or from one of the\nsupported object stores.  <tt>pghoard_restore</tt> can also configure\n<tt>recovery.conf</tt> to use <tt>pghoard_postgres_command</tt> as the WAL\n<tt>restore_command</tt> in <tt>recovery.conf</tt>.</p>\n<p><tt>pghoard_archive_cleanup</tt> can be used to clean up any orphan WAL files\nfrom the object store.  After the configured number of basebackups has been\nexceeded (configuration key <tt>basebackup_count</tt>), <tt>pghoard</tt> deletes the\noldest basebackup and all WAL associated with it.  Transient object storage\nfailures and other interruptions can cause the WAL deletion process to leave\norphan WAL files behind, they can be deleted with this tool.</p>\n<p><tt>pghoard_archive_sync</tt> can be used to see if any local files should\nbe archived but haven\u2019t been or if any of the archived files have unexpected\ncontent and need to be archived again. The other usecase it has is to determine\nif there are any gaps in the required files in the WAL archive\nfrom the current WAL file on to to the latest basebackup\u2019s first WAL file.</p>\n<p><tt>pghoard_create_keys</tt> can be used to generate and output encryption keys\nin the <tt>pghoard</tt> configuration format.</p>\n<p><tt>pghoard_postgres_command</tt> is a command line tool that can be used as\nPostgreSQL\u2019s <tt>archive_command</tt> or <tt>recovery_command</tt>.  It communicates with\n<tt>pghoard</tt> \u2018s locally running webserver to let it know there\u2019s a new file that\nneeds to be compressed, encrypted and stored in an object store (in archive\nmode) or it\u2019s inverse (in restore mode.)</p>\n</div>\n<div id=\"configuration-keys\">\n<h2>Configuration keys</h2>\n<p><tt>active</tt> (default <tt>true</tt>)</p>\n<p>Can be set on a per <tt>backup_site</tt> level to <tt>false</tt> to disable the taking\nof new backups and to stop the deletion of old ones.</p>\n<p><tt>active_backup_mode</tt> (default <tt>pg_receivexlog</tt>)</p>\n<p>Can be either <tt>pg_receivexlog</tt> or <tt>archive_command</tt>. If set to\n<tt>pg_receivexlog</tt>, <tt>pghoard</tt> will start up a <tt>pg_receivexlog</tt> process to be\nrun against the database server.  If <tt>archive_command</tt> is set, we rely on the\nuser setting the correct <tt>archive_command</tt> in\n<tt>postgresql.conf</tt>. You can also set this to the experimental <tt>walreceiver</tt> mode\nwhereby pghoard will start communicating directly with PostgreSQL\nthrough the replication protocol. (Note requires an unreleased version\nof psycopg2 library)</p>\n<p><tt>alert_file_dir</tt> (default <tt>backup_location</tt> if set else <tt>os.getcwd()</tt>)</p>\n<p>Directory in which alert files for replication warning and failover are\ncreated.</p>\n<p><tt>backup_location</tt> (no default)</p>\n<p>Place where <tt>pghoard</tt> will create its internal data structures for local state\ndata and the actual backups.  (if no object storage is used)</p>\n<p><tt>backup_sites</tt> (default <tt>{}</tt>)</p>\n<p>This object contains names and configurations for the different PostgreSQL\nclusters (here called <tt>sites</tt>) from which to take backups.  The\nconfiguration keys for sites are listed below.</p>\n<ul>\n<li><tt>compression</tt> WAL/basebackup compression parameters</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>algorithm</tt> default <tt>\"snappy\"</tt> if available, otherwise <tt>\"lzma\"</tt> or <tt>\"zstd\"</tt></li>\n<li><tt>level</tt> default <tt>\"0\"</tt> compression level for <tt>\"lzma\"</tt> or <tt>\"zstd\"</tt> compression</li>\n<li><tt>thread_count</tt> (default max(cpu_count, <tt>5</tt>)) number of parallel compression threads</li>\n</ul>\n</blockquote>\n<p><tt>hash_algorithm</tt> (default <tt>\"sha1\"</tt>)</p>\n<p>The hash algorithm used for calculating checksums for WAL or other files. Must\nbe one of the algorithms supported by Python\u2019s hashlib.</p>\n<p><tt>http_address</tt> (default <tt>\"127.0.0.1\"</tt>)</p>\n<p>Address to bind the PGHoard HTTP server to.  Set to an empty string to\nlisten to all available addresses.</p>\n<p><tt>http_port</tt> (default <tt>16000</tt>)</p>\n<p>HTTP webserver port. Used for the archive command and for fetching of\nbasebackups/WAL\u2019s when restoring if not using an object store.</p>\n<p><tt>json_state_file_path</tt> (default <tt>\"/var/lib/pghoard/pghoard_state.json\"</tt>)</p>\n<p>Location of a JSON state file which describes the state of the <tt>pghoard</tt>\nprocess.</p>\n<p><tt>log_level</tt> (default <tt>\"INFO\"</tt>)</p>\n<p>Determines log level of <tt>pghoard</tt>.</p>\n<p><tt>maintenance_mode_file</tt> (default <tt>\"/var/lib/pghoard/maintenance_mode_file\"</tt>)</p>\n<p>If a file exists in this location, no new backup actions will be started.</p>\n<p><tt>restore_prefetch</tt> (default <tt>transfer.thread_count</tt>)</p>\n<p>Number of files to prefetch when performing archive recovery.  The default\nis the number of Transfer Agent threads to try to utilize them all.</p>\n<p><tt>statsd</tt> (default: disabled)</p>\n<p>Enables metrics sending to a statsd daemon that supports Telegraf\nor DataDog syntax with tags.</p>\n<p>The value is a JSON object:</p>\n<pre>{\n    \"host\": \"&lt;statsd address&gt;\",\n    \"port\": &lt;statsd port&gt;,\n    \"format\": \"&lt;statsd message format&gt;\",\n    \"tags\": {\n        \"&lt;tag&gt;\": \"&lt;value&gt;\"\n    }\n}\n</pre>\n<p><tt>format</tt> (default: <tt>\"telegraf\"</tt>)</p>\n<p>Determines statsd message format. Following formats are supported:</p>\n<ul>\n<li><tt>telegraf</tt> <a href=\"https://github.com/influxdata/telegraf/tree/master/plugins/inputs/statsd\" rel=\"nofollow\">Telegraf spec</a></li>\n</ul>\n<ul>\n<li><tt>datadog</tt> <a href=\"http://docs.datadoghq.com/guides/dogstatsd/#datagram-format\" rel=\"nofollow\">DataDog spec</a></li>\n</ul>\n<p>The <tt>tags</tt> setting can be used to enter optional tag values for the metrics.</p>\n<p><tt>pushgateway</tt> (default: disabled)</p>\n<p>Enables metrics sending to a Prometheus Pushgateway with tags.</p>\n<p>The value is a JSON object:</p>\n<pre>{\n    \"endpoint\": \"&lt;pushgateway address&gt;\",\n    \"tags\": {\n        \"&lt;tag&gt;\": \"&lt;value&gt;\"\n    }\n}\n</pre>\n<p>The <tt>tags</tt> setting can be used to enter optional tag values for the metrics.</p>\n<p><tt>prometheus</tt> (default: disabled)</p>\n<p>Expose metrics through a Prometheus endpoint.</p>\n<p>The value is a JSON object:</p>\n<pre>{\n    \"tags\": {\n        \"&lt;tag&gt;\": \"&lt;value&gt;\"\n    }\n}\n</pre>\n<p>The <tt>tags</tt> setting can be used to enter optional tag values for the metrics.</p>\n<p><tt>syslog</tt> (default <tt>false</tt>)</p>\n<p>Determines whether syslog logging should be turned on or not.</p>\n<p><tt>syslog_address</tt> (default <tt>\"/dev/log\"</tt>)</p>\n<p>Determines syslog address to use in logging (requires syslog to be true as\nwell)</p>\n<p><tt>syslog_facility</tt> (default <tt>\"local2\"</tt>)</p>\n<p>Determines syslog log facility. (requires syslog to be true as well)</p>\n<ul>\n<li><tt>transfer</tt> WAL/basebackup transfer parameters</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>thread_count</tt> (default max(cpu_count, <tt>5</tt>)) number of parallel uploads/downloads</li>\n</ul>\n</blockquote>\n<p><tt>upload_retries_warning_limit</tt> (default <tt>3</tt>)</p>\n<p>After this many failed upload attempts for a single file, create an\nalert file.</p>\n<p><tt>tar_executable</tt> (default <tt>\"pghoard_gnutaremu\"</tt>)</p>\n<p>The tar command to use for restoring basebackups. This must be GNU tar because some\nadvanced switches like <tt><span class=\"pre\">--transform</span></tt> are needed. If this value is not defined (or\nis explicitly set to <tt>\"pghoard_gnutaremu\"</tt>), Python\u2019s internal tarfile\nimplementation is used. The Python implementation is somewhat slower than the\nactual tar command and in environments with fast disk IO (compared to available CPU\ncapacity) it is recommended to set this to <tt>\"tar\"</tt>.</p>\n</div>\n<div id=\"backup-site-configuration\">\n<h2>Backup site configuration</h2>\n<p>The following options control the behavior of each backup site.  A backup\nsite means an individual PostgreSQL installation (\u201ccluster\u201d in PostgreSQL\nterminology) from which to take backups.</p>\n<p><tt>basebackup_chunks_in_progress</tt> (default <tt>5</tt>)</p>\n<p>How many basebackup chunks can there be simultaneously on disk while\nit is being taken. For chunk size configuration see <tt>basebackup_chunk_size</tt>.</p>\n<p><tt>basebackup_chunk_size</tt> (default <tt>2147483648</tt>)</p>\n<p>In how large backup chunks to take a <tt><span class=\"pre\">local-tar</span></tt> basebackup. Disk\nspace needed for a successful backup is this variable multiplied by\n<tt>basebackup_chunks_in_progress</tt>.</p>\n<p><tt>basebackup_count</tt> (default <tt>2</tt>)</p>\n<p>How many basebackups should be kept around for restoration purposes.  The\nmore there are the more diskspace will be used.</p>\n<p><tt>basebackup_interval_hours</tt> (default <tt>24</tt>)</p>\n<p>How often to take a new basebackup of a cluster.  The shorter the interval,\nthe faster your recovery will be, but the more CPU/IO usage is required from\nthe servers it takes the basebackup from.  If set to a null value basebackups\nare not automatically taken at all.</p>\n<p><tt>basebackup_mode</tt> (default <tt>\"basic\"</tt>)</p>\n<p>The way basebackups should be created.  The default mode, <tt>basic</tt> runs\n<tt>pg_basebackup</tt> and waits for it to write an uncompressed tar file on the\ndisk before compressing and optionally encrypting it.  The alternative mode\n<tt>pipe</tt> pipes the data directly from <tt>pg_basebackup</tt> to PGHoard\u2019s\ncompression and encryption processing reducing the amount of temporary disk\nspace that\u2019s required.</p>\n<p>Neither <tt>basic</tt> nor <tt>pipe</tt> modes support multiple tablespaces.</p>\n<p>Setting <tt>basebackup_mode</tt> to <tt><span class=\"pre\">local-tar</span></tt> avoids using <tt>pg_basebackup</tt>\nentirely when <tt>pghoard</tt> is running on the same host as the database.\nPGHoard reads the files directly from <tt>$PGDATA</tt> in this mode and\ncompresses and optionally encrypts them.  This mode allows backing up user\ntablespaces.</p>\n<p>Note that the <tt><span class=\"pre\">local-tar</span></tt> backup mode can not be used on replica servers\nprior to PostgreSQL 9.6 unless the pgespresso extension is installed.</p>\n<p><tt>encryption_key_id</tt> (no default)</p>\n<p>Specifies the encryption key used when storing encrypted backups. If this\nconfiguration directive is specified, you must also define the public key\nfor storing as well as private key for retrieving stored backups. These\nkeys are specified with <tt>encryption_keys</tt> dictionary.</p>\n<p><tt>encryption_keys</tt> (no default)</p>\n<p>This key is a mapping from key id to keys. Keys in turn are mapping from\n<tt>public</tt> and <tt>private</tt> to PEM encoded RSA public and private keys\nrespectively. Public key needs to be specified for storing backups. Private\nkey needs to be in place for restoring encrypted backups.</p>\n<p>You can use <tt>pghoard_create_keys</tt> to generate and output encryption keys\nin the <tt>pghoard</tt> configuration format.</p>\n<p><tt>object_storage</tt> (no default)</p>\n<p>Configured in <tt>backup_sites</tt> under a specific site.  If set, it must be an\nobject describing a remote object storage.  The object must contain a key\n<tt>storage_type</tt> describing the type of the store, other keys and values are\nspecific to the storage type.</p>\n<p>The following object storage types are supported:</p>\n<ul>\n<li><tt>local</tt> makes backups to a local directory, see <tt><span class=\"pre\">pghoard-local-minimal.json</span></tt>\nfor example. Required keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>directory</tt> for the path to the backup target (local) storage directory</li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>sftp</tt> makes backups to a sftp server, required keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>server</tt></li>\n<li><tt>port</tt></li>\n<li><tt>username</tt></li>\n<li><tt>password</tt> or <tt>private_key</tt></li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>google</tt> for Google Cloud Storage, required configuration keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>project_id</tt> containing the Google Storage project identifier</li>\n<li><tt>bucket_name</tt> bucket where you want to store the files</li>\n<li><tt>credential_file</tt> for the path to the Google JSON credential file</li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>s3</tt> for Amazon Web Services S3, required configuration keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>aws_access_key_id</tt> for the AWS access key id</li>\n<li><tt>aws_secret_access_key</tt> for the AWS secret access key</li>\n<li><tt>region</tt> S3 region of the bucket</li>\n<li><tt>bucket_name</tt> name of the S3 bucket</li>\n</ul>\n</blockquote>\n<p>Optional keys for Amazon Web Services S3:</p>\n<blockquote>\n<ul>\n<li><tt>encrypted</tt> if True, use server-side encryption. Default is False.</li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>s3</tt> for other S3 compatible services such as Ceph, required\nconfiguration keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>aws_access_key_id</tt> for the AWS access key id</li>\n<li><tt>aws_secret_access_key</tt> for the AWS secret access key</li>\n<li><tt>bucket_name</tt> name of the S3 bucket</li>\n<li><tt>host</tt> for overriding host for non AWS-S3 implementations</li>\n<li><tt>port</tt> for overriding port for non AWS-S3 implementations</li>\n<li><tt>is_secure</tt> for overriding the requirement for https for non AWS-S3</li>\n<li><tt>is_verify_tls</tt> for configuring tls verify for non AWS-S3\nimplementations</li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>azure</tt> for Microsoft Azure Storage, required configuration keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>account_name</tt> for the name of the Azure Storage account</li>\n<li><tt>account_key</tt> for the secret key of the Azure Storage account</li>\n<li><tt>bucket_name</tt> for the name of Azure Storage container used to store\nobjects</li>\n<li><tt>azure_cloud</tt> Azure cloud selector, <tt>\"public\"</tt> (default) or <tt>\"germany\"</tt></li>\n</ul>\n</blockquote>\n<ul>\n<li><tt>swift</tt> for OpenStack Swift, required configuration keys:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>user</tt> for the Swift user (\u2018subuser\u2019 in Ceph RadosGW)</li>\n<li><tt>key</tt> for the Swift secret_key</li>\n<li><tt>auth_url</tt> for Swift authentication URL</li>\n<li><tt>container_name</tt> name of the data container</li>\n<li>Optional configuration keys for Swift:</li>\n</ul>\n<blockquote>\n<ul>\n<li><tt>auth_version</tt> - <tt>2.0</tt> (default) or <tt>3.0</tt> for keystone, use <tt>1.0</tt> with\nCeph Rados GW.</li>\n<li><tt>segment_size</tt> - defaults to <tt><span class=\"pre\">1024**3</span></tt> (1 gigabyte).  Objects larger\nthan this will be split into multiple segments on upload.  Many Swift\ninstallations require large files (usually 5 gigabytes) to be segmented.</li>\n<li><tt>tenant_name</tt></li>\n<li><tt>region_name</tt></li>\n<li><tt>user_id</tt> - for auth_version 3.0</li>\n<li><tt>user_domain_id</tt> - for auth_version 3.0</li>\n<li><tt>user_domain_name</tt> - for auth_version 3.0</li>\n<li><tt>tenant_id</tt> - for auth_version 3.0</li>\n<li><tt>project_id</tt> - for auth_version 3.0</li>\n<li><tt>project_name</tt> - for auth_version 3.0</li>\n<li><tt>project_domain_id</tt> - for auth_version 3.0</li>\n<li><tt>project_domain_name</tt> - for auth_version 3.0</li>\n<li><tt>service_type</tt> - for auth_version 3.0</li>\n<li><tt>endpoint_type</tt> - for auth_version 3.0</li>\n</ul>\n</blockquote>\n</blockquote>\n<p><tt>nodes</tt> (no default)</p>\n<p>Array of one or more nodes from which the backups are taken.  A node can be\ndescribed as an object of libpq key: value connection info pairs or libpq\nconnection string or a <tt><span class=\"pre\">postgres://</span></tt> connection uri. If for example you\u2019d\nlike to use a streaming replication slot use the syntax {\u2026 \u201cslot\u201d: \u201cslotname\u201d}.</p>\n<p><tt>pg_bin_directory</tt> (default: find binaries from well-known directories)</p>\n<p>Site-specific option for finding <tt>pg_basebackup</tt> and <tt>pg_receivexlog</tt>\ncommands matching the given backup site\u2019s PostgreSQL version.  If a value is\nnot supplied PGHoard will attempt to find matching binaries from various\nwell-known locations.  In case <tt>pg_data_directory</tt> is set and points to a\nvalid data directory the lookup is restricted to the version contained in\nthe given data directory.</p>\n<p><tt>pg_data_directory</tt> (no default)</p>\n<p>This is used when the <tt><span class=\"pre\">local-tar</span></tt> <tt>basebackup_mode</tt> is used.  The data\ndirectory must point to PostgreSQL\u2019s <tt>$PGDATA</tt> and must be readable by the\n<tt>pghoard</tt> daemon.</p>\n<p><tt>prefix</tt> (default: site name)</p>\n<p>Path prefix to use for all backups related to this site.  Defaults to the\nname of the site.</p>\n</div>\n<div id=\"alert-files\">\n<h2>Alert files</h2>\n<p>Alert files are created whenever an error condition that requires human\nintervention to solve.  You\u2019re recommended to add checks for the existence\nof these files to your alerting system.</p>\n<p><tt>authentication_error</tt></p>\n<p>There has been a problem in the authentication of at least one of the\nPostgreSQL connections.  This usually denotes a wrong username and/or\npassword.</p>\n<p><tt>configuration_error</tt></p>\n<p>There has been a problem in the authentication of at least one of the\nPostgreSQL connections.  This usually denotes a missing <tt>pg_hba.conf</tt> entry or\nincompatible settings in postgresql.conf.</p>\n<p><tt>upload_retries_warning</tt></p>\n<p>Upload of a file has failed more times than\n<tt>upload_retries_warning_limit</tt>. Needs human intervention to figure\nout why and to delete the alert once the situation has been fixed.</p>\n<p><tt>version_mismatch_error</tt></p>\n<p>Your local PostgreSQL client versions of <tt>pg_basebackup</tt> or\n<tt>pg_receivexlog</tt> do not match with the servers PostgreSQL version.  You\nneed to update them to be on the same version level.</p>\n<p><tt>version_unsupported_error</tt></p>\n<p>Server PostgreSQL version is not supported.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>PGHoard is licensed under the Apache License, Version 2.0. Full license text\nis available in the <tt>LICENSE</tt> file and at\n<a href=\"http://www.apache.org/licenses/LICENSE-2.0.txt\" rel=\"nofollow\">http://www.apache.org/licenses/LICENSE-2.0.txt</a></p>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>PGHoard was created by Hannu Valtonen &lt;<a href=\"mailto:hannu.valtonen%40ohmu.fi\">hannu<span>.</span>valtonen<span>@</span>ohmu<span>.</span>fi</a>&gt; for\n<a href=\"https://aiven.io/\" rel=\"nofollow\">Aiven Cloud Database</a> and is now maintained by <a href=\"https://ohmu.fi/\" rel=\"nofollow\">Ohmu Ltd</a> hackers and\nAiven developers &lt;<a href=\"mailto:pghoard%40ohmu.fi\">pghoard<span>@</span>ohmu<span>.</span>fi</a>&gt;.</p>\n<p>Recent contributors are listed on the GitHub project page,\n<a href=\"https://github.com/aiven/pghoard/graphs/contributors\" rel=\"nofollow\">https://github.com/aiven/pghoard/graphs/contributors</a></p>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Bug reports and patches are very welcome, please post them as GitHub issues\nand pull requests at <a href=\"https://github.com/aiven/pghoard\" rel=\"nofollow\">https://github.com/aiven/pghoard</a> .  Any possible\nvulnerabilities or other serious issues should be reported directly to the\nmaintainers &lt;<a href=\"mailto:opensource%40ohmu.fi\">opensource<span>@</span>ohmu<span>.</span>fi</a>&gt;.</p>\n</div>\n<div id=\"copyright\">\n<h2>Copyright</h2>\n<p>Copyright (C) 2015 Ohmu Ltd</p>\n</div>\n\n          </div>"}, "last_serial": 5321898, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "036da5333010e5a9c8e74f2d5a8c1cb2", "sha256": "06b715d88f0cdfb88df57ee0e0203da54b357676f25f2765256fd71c6576fa0d"}, "downloads": -1, "filename": "pghoard-1.0.0.tar.gz", "has_sig": false, "md5_digest": "036da5333010e5a9c8e74f2d5a8c1cb2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 67227, "upload_time": "2016-03-16T16:49:29", "upload_time_iso_8601": "2016-03-16T16:49:29.782926Z", "url": "https://files.pythonhosted.org/packages/28/3d/3730bf258be4dd972f82cd33865fea39b4aaf8f829ab5345b1a07c9c07dc/pghoard-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "d9cf72f7eae0803066dbec38188cd308", "sha256": "096a6329982b3236dfcd41ae3c500e8d022425cdeaad546084d8746feafc4904"}, "downloads": -1, "filename": "pghoard-1.1.0.tar.gz", "has_sig": false, "md5_digest": "d9cf72f7eae0803066dbec38188cd308", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 74131, "upload_time": "2016-04-05T08:09:03", "upload_time_iso_8601": "2016-04-05T08:09:03.274851Z", "url": "https://files.pythonhosted.org/packages/e6/85/0da0a9b8737f7f080dc8fc8aaa2822655b5659cb3bf75bd058e296954304/pghoard-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "64650790ef80298ef74165d48b7707f2", "sha256": "2cb8308064e8b6a5fa17342b2ee60944e99dff3f42017ad70754e275fb9e49d9"}, "downloads": -1, "filename": "pghoard-1.2.0.tar.gz", "has_sig": false, "md5_digest": "64650790ef80298ef74165d48b7707f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 87543, "upload_time": "2016-04-28T10:49:15", "upload_time_iso_8601": "2016-04-28T10:49:15.678815Z", "url": "https://files.pythonhosted.org/packages/53/b4/c747efc46717803e9984589dbbca4e0fd9b1f6e0d6d74b08e1a7d6d223a0/pghoard-1.2.0.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "00cfe1059de186a2480498e11272f0ae", "sha256": "c1bc694610965ca7aef60ec7c62be3a2532c4bc0a3b70ad3acc9c2f3a34e9551"}, "downloads": -1, "filename": "pghoard-1.3.0.tar.gz", "has_sig": false, "md5_digest": "00cfe1059de186a2480498e11272f0ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 90341, "upload_time": "2016-05-31T18:55:07", "upload_time_iso_8601": "2016-05-31T18:55:07.149234Z", "url": "https://files.pythonhosted.org/packages/62/b2/9a9ec9ca1365299fc66ba39a7777f4dbd90ba7bb42b02ab34cdd8d275c0a/pghoard-1.3.0.tar.gz", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "844b316ffa0365419328769c97cedc51", "sha256": "0ec08aba90ca7ed1a614df4e9301e9e2294a68d2294b2527f5f00af333e9475e"}, "downloads": -1, "filename": "pghoard-1.4.0.tar.gz", "has_sig": false, "md5_digest": "844b316ffa0365419328769c97cedc51", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 109117, "upload_time": "2016-09-28T21:11:32", "upload_time_iso_8601": "2016-09-28T21:11:32.239120Z", "url": "https://files.pythonhosted.org/packages/09/40/2790398f43f5e03256797e429ddd80ab1dc5cac45e18d3bca942b5dcfea1/pghoard-1.4.0.tar.gz", "yanked": false}], "1.5.0": [{"comment_text": "", "digests": {"md5": "cade727d1bb73064c614de91bb9c4937", "sha256": "6a3f52626cc5dc94bf70cb71757f692e0aff957c15f53925dd2865427a754298"}, "downloads": -1, "filename": "pghoard-1.5.0.tar.gz", "has_sig": false, "md5_digest": "cade727d1bb73064c614de91bb9c4937", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 124904, "upload_time": "2017-06-07T13:00:47", "upload_time_iso_8601": "2017-06-07T13:00:47.950632Z", "url": "https://files.pythonhosted.org/packages/9e/c3/3621b33f21da1828ffd16c49034b7b008d9cb4ef10de86d5d0d66c93be85/pghoard-1.5.0.tar.gz", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "024cd4a68941966a1747ad9d368e6852", "sha256": "dfa3a2eecd9457abcd19e979eaf0386ae3e86906b11384f38687854a8d75e670"}, "downloads": -1, "filename": "pghoard-1.7.0.tar.gz", "has_sig": false, "md5_digest": "024cd4a68941966a1747ad9d368e6852", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 129950, "upload_time": "2018-02-09T12:28:48", "upload_time_iso_8601": "2018-02-09T12:28:48.022033Z", "url": "https://files.pythonhosted.org/packages/ec/ae/095d13183d9fbbac7a8fcfe72a322c51527dd7a17306e39f926dde8564cd/pghoard-1.7.0.tar.gz", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "d62d8390827085f8950db9c2629ab9c2", "sha256": "9fcddbf50b0c31d4287655e122dcea7d304c66ab6cbf089520d34884b7e76cd0"}, "downloads": -1, "filename": "pghoard-2.0.0.tar.gz", "has_sig": false, "md5_digest": "d62d8390827085f8950db9c2629ab9c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 143058, "upload_time": "2018-12-17T09:52:16", "upload_time_iso_8601": "2018-12-17T09:52:16.158415Z", "url": "https://files.pythonhosted.org/packages/07/23/0c0b3919fc60003bd0f18770819de0c494af4091f8111b2ec1967931a165/pghoard-2.0.0.tar.gz", "yanked": false}], "2.1.0": [{"comment_text": "", "digests": {"md5": "2c8912484e96e5d7942092ffb8185fae", "sha256": "516eea50d385fccc9ebfdf71dc1ded9af4c23451e5478791919a187514578da3"}, "downloads": -1, "filename": "pghoard-2.1.0.tar.gz", "has_sig": false, "md5_digest": "2c8912484e96e5d7942092ffb8185fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160708, "upload_time": "2019-05-27T11:02:41", "upload_time_iso_8601": "2019-05-27T11:02:41.655327Z", "url": "https://files.pythonhosted.org/packages/0a/41/d59cb2fb09ef0ff2ae4eb8ca05a87a31c39741e8bd9e27e657cb73d9ffd1/pghoard-2.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2c8912484e96e5d7942092ffb8185fae", "sha256": "516eea50d385fccc9ebfdf71dc1ded9af4c23451e5478791919a187514578da3"}, "downloads": -1, "filename": "pghoard-2.1.0.tar.gz", "has_sig": false, "md5_digest": "2c8912484e96e5d7942092ffb8185fae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 160708, "upload_time": "2019-05-27T11:02:41", "upload_time_iso_8601": "2019-05-27T11:02:41.655327Z", "url": "https://files.pythonhosted.org/packages/0a/41/d59cb2fb09ef0ff2ae4eb8ca05a87a31c39741e8bd9e27e657cb73d9ffd1/pghoard-2.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:48 2020"}