{"info": {"author": "miversen33", "author_email": "miversen33@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Server Automation Setup\n\nA helper program that will setup a remote server for you\n\n## Table Of Contents\n- [Installation](#installation)\n  - [PIP](#pip)\n  - [Manual](#manual)\n  - [Dependencies](#dependencies)\n  - [Uninstallation](#uninstallation)\n- [How To Run](#how-to-run)\n  - [Available parameters](#available-parameters)\n  - [What About Server Failure?](#what-about-server-failure)\n- [Configuration](#configuration)\n  - [JSON](#json)\n- [YAML](#yaml)\n\n***\n<br>\n\n## Installation\n### PIP\n[Server Automation Setup](https://pypi.org/project/server-automation-setup/) can be installed from pip via \n```\npython3 -m pip install server-automation-setup\n```\n<br>\n\n### Manual\nOr if you are feeling adventurous, you can download the install script from github and run the following command.\n```\ncurl https://raw.githubusercontent.com/miversen33/Server-Automation-Setup/master/install-script.py >> /tmp/install-script.py && python3 /tmp/install-script.py\n```\n[**NOTE: Be careful executing random files off the internet. Always inspect them first**](https://github.com/miversen33/Server-Automation-Setup/blob/master/install-script.py)\n\nOnce its finished, you should see output that looks like \n```\nFinished! Execute 'serverautomation --help' to get started!\n```\n<br>\n\n### Dependencies\nRegardless of which decision you chose for installation, our dependencies are already installed. \nThe programs we rely on to function properly are\n* [YAML](https://github.com/yaml/pyyaml)\n* [Fabric](https://github.com/fabric/fabric)\n* [Invoke](https://github.com/pyinvoke/invoke)\n* [Paramiko](https://github.com/paramiko/paramiko)\n\n<br>\n\n### Uninstallation\n```\npython3 -m pip uninstall server-automation-setup\n```\n\n***\n<br>\n\n## How To Run\nRunning the setup script is easy. Simply provide it a configuration file to load and it handles everything else.\n```\nserverautomation -f=yourfile.validextension\n```\n### Available parameters\n```\n-f, --file: Your configuration File.\n    This must be a JSON or YAML file, unless the script explicitly gives you a file to run.\n-v, --verbose: Tells the system to print out more details\n-d, --debug: When enabled, we will still connect to the remote server, \n    but then we simply dump all the commands we would run to the terminal window for the user to see\n-e, --onfail: How to handle failure. Options are (continue, die). Default is continue\n```\n\n### What About Server Failure?\nIt happens. Something causes one of the installation scripts to crash. The server is bounced. One of the external scripts breaks. Etc.\nSo what happens when a failure occurs while setting up your shiny new server? When an error occurs, we handle it (depending on what [`--onfail`](#available-parameters) is set to). Regardless of the status of [`--onfail`](#available-parameters), we will keep track of the script(s) that fail during setup. Once we are finished running, if failures were found, we provide you a special file that you can use to only execute the failed script(s). It will look something like this\n```\nServer Setup completed with errors. To rerun failed scripts, execute the following command. serverautomation --file 127.0.0.1-20200420-202251\n```\n\n***\n<br>\n\n## Configuration\nConfiguration files can be provided in either [JSON](#json) or [YAML](#yaml) formats. Below are those 2 formats, with documentation of any available options that can be provided\n\n### [JSON](https://github.com/miversen33/Server-Automation-Setup/blob/master/setupconfig.doc.json)\n```\n{\n    \"server_connection\": {\n        // Optional\n        // This needs to be an ip address that is accessible from the box this is ran off of\n        \"ip_address\": \"127.0.0.1\",\n        // Optional\n        // Either provide this or ip address. If you provide both, we will use the ip address. \n        \"hostname\": \"some-host\",\n        // Optional\n        // if not provided, we assume you want to ssh in as root.\n        \"ssh_user\": \"someuser\",\n        // Optional\n        // if used, this needs to be the path to an ssh key, or if the file is in the same directory this can be the ssh key name directly\n        \"ssh_key\": \"id_rsa\",\n        // Optional\n        // if an ssh_user is provided, you can provide an ssh password for that user\n        \"ssh_user_password\": \"somepassword\",\n        // Optional\n        // If not provided, we will ask for it once\n        \"ssh_key_password\": \"somepassword\",\n        // Optional\n        // The sudo password for the server. If not provided, we will ask for it\n        \"elevation_password\": \"somepassword\"\n    },\n    \"users\": [\n        {\n            \"username\": \"testuser\",\n            // This can be \n            // - An empty string or 'None' (both equate to None)\n            // - Cleartext password\n            // In all cases the password must be cleartext (you're using a config script to setup users. Deal with the security risk, or dont use it)\n            \"password\": \"\",\n            // The rest of these are optionals\n\n            // Can either be full path or program name.\n            \"shell\": \"zsh\",\n            // Optional\n            // The expected home directory location\n            // If not provided (and not a system_user), we will simply let linux decide where to put you.\n            // Usually by default this will be /home/username\n            \"home_directory\": \"/home/\",\n            // List of groups. If you only want it to be in its own group, leave this blank\n            // The system will attempt to make sure that the user has sudo permissions if it is placed in\n            // either sudo or wheel. The system will try to verify that either of those groups exist and have the appropriate permission\n            // It is better to be sure you know what you want here, but we will try for you\n            \"groups\": [\"sudo\"],\n            // Optional\n            // This is not case sensitive, but it does have to be a boolean T/F. If left blank, it will be considered false\n            \"system_user\": \"False\",\n            // Optional\n            // If provided, we will copy an ssh key over to the server for you. If you want to just use the \n            // key provided, simply supply 'default' (not case sensitive). Otherwise, we will expect \n            // the name of the key you are looking for. If you do not provide a full path to it, we will \n            // check in the running user's .ssh directory, however that isn't the best idea. You should\n            // really just provide a full path\n            // NOTE! If the user is a system_user (ie, no login), this will be ignored\n            \"ssh_key\": \"default\"\n        }\n    ],\n    \"dependencies\": [\n        // Optional\n        // Experimental\n        // We will attempt to install the dependencies in this list regardless of the distro of the box\n        // we are on\n        \"someprogram1\",\"someprogram2\",\"someprogram3\"\n    ],\n    // EXPIRAMENTAL!\n    // Optional\n    \"server_configuration\": {\n        // Sets the hostname of the server to the provided hostname\n        \"hostname\": \"newhostname_for_server\",\n        // Tells the system to update the server. Not case sensitive. If present, this will be run before anything else\n        \"update\": \"True\",\n        // Tells the system to upgrade the server distro. Not case sensitive\n        \"upgrade\": \"True\",\n        // Tells the system to disconnect and restart the server on completion. This is the very last thing ran, if present\n        \"reboot_on_finish\": \"True\",\n        // Services that we need to enable for the server. We expect the service(s) to be installed already. If its not, you're on\n        // your own. Don't set us up for failure. \n        \"enabled_service\": [\n            \"someprogram1\",\n            \"someprogam2\"\n        ]\n    },\n    \"configurations\":[\n        // Optional\n        // A list of scripts to execute in order on the server box.\n        // Make sure that the server has the software installed to execute the script language though\n        // \n        // You can additionally provide params for the system to obey when executing the script provided. You can also provide \n        // params to the script itself. We will consume the params we expect and pass all the rest to the script\n        // The following params are reserved for us (meaning, if they are provided, we will consume then and they will not be passed along). None of these are case sensitive\n        // --runAs=whatever user you want the script to be run as\n        // --local tells us that you want the script to be locally (on the hosting box) instead of remotely. Note, we assume by default the scripts are to be\n        //         run remotely. \n        //\n        // You can also provide params for your script here, and those are passed to your script as well\n        //\n        // We pass the following additional params to every script that is run locally\n        // --host=whatever the server ip is that we just finished our setup on\n        // --user=whatever the user is that we used when initiating our connection to the server\n        // --password=whatever the user's password is.\n        // --ssh_key=whatever the ssh key is that was used to connect to the server. Note this is only provided if we were provided one\n        // --ssh_passphrase=whatever the passphrase is for the key. Note this is only provided if we are provided it\n        \"someFile1.py --runAs=root\",\n        \"someFile2.pl --someparam=somevalue\",\n        \"someFile3.sh\"\n    ]\n}\n```\n\n### [YAML](https://github.com/miversen33/Server-Automation-Setup/blob/master/setupconfig.doc.yaml)\n```yaml\nserver_connection:\n  # Optional\n  # This needs to be an ip address that is accessible from the box this is ran off of\n  ip_address: 127.0.0.1\n  # Optional\n  # Either provide this or ip address. If you provide both, we will use the ip address.\n  hostname: some-host\n  # Optional\n  # if not provided, we assume you want to ssh in as root.\n  ssh_user: someuser\n  # Optional\n  # if an ssh_user is provided, you can provide an ssh password for that user\n  ssh_user_password: \"somepassword\"\n  # Optional\n  # if used, this needs to be the path to an ssh key, or if the file is in the same directory this can be the ssh key name directly\n  ssh_key: id_rsa\n  # Optional\n  # If not provided, we will ask for it once\n  ssh_key_password: somepassword\n  # Optional\n  # The sudo password for the server. If not provided, we will ask for it\n  elevation_password: somepassword\nusers:\n- username: testuser\n  # This can be \n  # - An empty string or 'None' (both equate to None)\n  # - Cleartext password\n  password: ''\n  # The rest of these are optionals\n\n  # Can either be full path or program name.\n  shell: zsh\n  # Optional\n  # The expected home directory location\n  # If not provided (and not a system_user), we will simply let linux decide where to put you.\n  # Usually by default this will be /home/username\n  home_directory: \"/home/\"\n  # List of groups. If you only want it to be in its own group, leave this blank\n  # The system will attempt to make sure that the user has sudo permissions if it is placed in\n  # either sudo or wheel. The system will try to verify that either of those groups exist and have the appropriate permission\n  # It is better to be sure you know what you want here, but we will try for you\n  groups: \n    - sudo\n    - someothergroup1\n    - someothergroup1\n  # Optional\n  # This is not case sensitive, but it does have to be a boolean T/F. If left blank, it will be considered False\n  system_user: 'False'\n  # Optional\n  # If provided, we will copy an ssh key over to the server for you. If you want to just use the \n  # key provided, simply supply 'default' (not case sensitive). Otherwise, we will expect \n  # the name of the key you are looking for. If you do not provide a full path to it, we will \n  # check in the running user's .ssh directory, however that isn't the best idea. You should\n  # really just provide a full path\n  # NOTE! If the user is a system_user (ie, no login), this will be ignored\n  ssh_key: default\n# Optional\ndependencies:\n# We will attempt to install the dependencies in this list regardless of the distro of the box we are on\n- someprogram1\n- someprogram2\n- someprogram3\nserver_configuration:\n  # Sets the hostname of the server to the provided hostname\n  hostname: newhostname_for_server\n  # Tells the system to update the server. Not case sensitive. If present, this will be run before anything else\n  update: 'True'\n  # Tells the system to upgrade the server distro. Not case sensitive\n  upgrade: 'True'\n  # Tells the system to disconnect and restart the server on completion. This is the very last thing ran, if present\n  reboot_on_finish: 'True'\n  # Services that we need to enable for the server. We expect the service(s) to be installed already. If its not, you're on\n  # your own. Don't set us up for failure. \n  enable_service: \n    -someprogram1\n    -someprogam2\nconfigurations:\n  # Optional\n  # A list of scripts to execute in order on the server box.\n  # Make sure that the server has the software installed to execute the script language though\n  # \n  # You can additionally provide params for the system to obey when executing the script provided. You can also provide \n  # params to the script itself. We will consume the params we expect and pass all the rest to the script\n  # The following params are reserved for us (meaning, if they are provided, we will consume then and they will not be passed along). None of these are case sensitive\n  # --runAs=whatever user you want the script to be run as\n  # --local tells us that you want the script to be locally (on the hosting box) instead of remotely. Note, we assume by default the scripts are to be\n  #         run remotely. \n  #\n  # You can also provide params for your script here, and those are passed to your script as well\n  #\n  # We pass the following additional params to every script that is run locally\n  # --host=whatever the server ip is that we just finished our setup on\n  # --user=whatever the user is that we used when initiating our connection to the server\n  # --password=whatever the user's password is.\n  # --ssh_key=whatever the ssh key is that was used to connect to the server. Note this is only provided if we were provided one\n  # --ssh_passphrase=whatever the passphrase is for the key. Note this is only provided if we are provided it\n- someFile1.py --runAs=root\n- someFile2.pl --someparam=somevalue\n- someFile3.sh\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miversen33/Server-Automation-Setup", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "server-automation-setup", "package_url": "https://pypi.org/project/server-automation-setup/", "platform": "", "project_url": "https://pypi.org/project/server-automation-setup/", "project_urls": {"Homepage": "https://github.com/miversen33/Server-Automation-Setup"}, "release_url": "https://pypi.org/project/server-automation-setup/0.3.5/", "requires_dist": ["pyyaml", "fabric", "pyinvoke", "paramiko"], "requires_python": ">3.0", "summary": "A helper program that will setup a remote server for you", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Server Automation Setup</h1>\n<p>A helper program that will setup a remote server for you</p>\n<h2>Table Of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#pip\" rel=\"nofollow\">PIP</a></li>\n<li><a href=\"#manual\" rel=\"nofollow\">Manual</a></li>\n<li><a href=\"#dependencies\" rel=\"nofollow\">Dependencies</a></li>\n<li><a href=\"#uninstallation\" rel=\"nofollow\">Uninstallation</a></li>\n</ul>\n</li>\n<li><a href=\"#how-to-run\" rel=\"nofollow\">How To Run</a>\n<ul>\n<li><a href=\"#available-parameters\" rel=\"nofollow\">Available parameters</a></li>\n<li><a href=\"#what-about-server-failure\" rel=\"nofollow\">What About Server Failure?</a></li>\n</ul>\n</li>\n<li><a href=\"#configuration\" rel=\"nofollow\">Configuration</a>\n<ul>\n<li><a href=\"#json\" rel=\"nofollow\">JSON</a></li>\n</ul>\n</li>\n<li><a href=\"#yaml\" rel=\"nofollow\">YAML</a></li>\n</ul>\n<hr>\n<br>\n<h2>Installation</h2>\n<h3>PIP</h3>\n<p><a href=\"https://pypi.org/project/server-automation-setup/\" rel=\"nofollow\">Server Automation Setup</a> can be installed from pip via</p>\n<pre><code>python3 -m pip install server-automation-setup\n</code></pre>\n<br>\n<h3>Manual</h3>\n<p>Or if you are feeling adventurous, you can download the install script from github and run the following command.</p>\n<pre><code>curl https://raw.githubusercontent.com/miversen33/Server-Automation-Setup/master/install-script.py &gt;&gt; /tmp/install-script.py &amp;&amp; python3 /tmp/install-script.py\n</code></pre>\n<p><a href=\"https://github.com/miversen33/Server-Automation-Setup/blob/master/install-script.py\" rel=\"nofollow\"><strong>NOTE: Be careful executing random files off the internet. Always inspect them first</strong></a></p>\n<p>Once its finished, you should see output that looks like</p>\n<pre><code>Finished! Execute 'serverautomation --help' to get started!\n</code></pre>\n<br>\n<h3>Dependencies</h3>\n<p>Regardless of which decision you chose for installation, our dependencies are already installed.\nThe programs we rely on to function properly are</p>\n<ul>\n<li><a href=\"https://github.com/yaml/pyyaml\" rel=\"nofollow\">YAML</a></li>\n<li><a href=\"https://github.com/fabric/fabric\" rel=\"nofollow\">Fabric</a></li>\n<li><a href=\"https://github.com/pyinvoke/invoke\" rel=\"nofollow\">Invoke</a></li>\n<li><a href=\"https://github.com/paramiko/paramiko\" rel=\"nofollow\">Paramiko</a></li>\n</ul>\n<br>\n<h3>Uninstallation</h3>\n<pre><code>python3 -m pip uninstall server-automation-setup\n</code></pre>\n<hr>\n<br>\n<h2>How To Run</h2>\n<p>Running the setup script is easy. Simply provide it a configuration file to load and it handles everything else.</p>\n<pre><code>serverautomation -f=yourfile.validextension\n</code></pre>\n<h3>Available parameters</h3>\n<pre><code>-f, --file: Your configuration File.\n    This must be a JSON or YAML file, unless the script explicitly gives you a file to run.\n-v, --verbose: Tells the system to print out more details\n-d, --debug: When enabled, we will still connect to the remote server, \n    but then we simply dump all the commands we would run to the terminal window for the user to see\n-e, --onfail: How to handle failure. Options are (continue, die). Default is continue\n</code></pre>\n<h3>What About Server Failure?</h3>\n<p>It happens. Something causes one of the installation scripts to crash. The server is bounced. One of the external scripts breaks. Etc.\nSo what happens when a failure occurs while setting up your shiny new server? When an error occurs, we handle it (depending on what <a href=\"#available-parameters\" rel=\"nofollow\"><code>--onfail</code></a> is set to). Regardless of the status of <a href=\"#available-parameters\" rel=\"nofollow\"><code>--onfail</code></a>, we will keep track of the script(s) that fail during setup. Once we are finished running, if failures were found, we provide you a special file that you can use to only execute the failed script(s). It will look something like this</p>\n<pre><code>Server Setup completed with errors. To rerun failed scripts, execute the following command. serverautomation --file 127.0.0.1-20200420-202251\n</code></pre>\n<hr>\n<br>\n<h2>Configuration</h2>\n<p>Configuration files can be provided in either <a href=\"#json\" rel=\"nofollow\">JSON</a> or <a href=\"#yaml\" rel=\"nofollow\">YAML</a> formats. Below are those 2 formats, with documentation of any available options that can be provided</p>\n<h3><a href=\"https://github.com/miversen33/Server-Automation-Setup/blob/master/setupconfig.doc.json\" rel=\"nofollow\">JSON</a></h3>\n<pre><code>{\n    \"server_connection\": {\n        // Optional\n        // This needs to be an ip address that is accessible from the box this is ran off of\n        \"ip_address\": \"127.0.0.1\",\n        // Optional\n        // Either provide this or ip address. If you provide both, we will use the ip address. \n        \"hostname\": \"some-host\",\n        // Optional\n        // if not provided, we assume you want to ssh in as root.\n        \"ssh_user\": \"someuser\",\n        // Optional\n        // if used, this needs to be the path to an ssh key, or if the file is in the same directory this can be the ssh key name directly\n        \"ssh_key\": \"id_rsa\",\n        // Optional\n        // if an ssh_user is provided, you can provide an ssh password for that user\n        \"ssh_user_password\": \"somepassword\",\n        // Optional\n        // If not provided, we will ask for it once\n        \"ssh_key_password\": \"somepassword\",\n        // Optional\n        // The sudo password for the server. If not provided, we will ask for it\n        \"elevation_password\": \"somepassword\"\n    },\n    \"users\": [\n        {\n            \"username\": \"testuser\",\n            // This can be \n            // - An empty string or 'None' (both equate to None)\n            // - Cleartext password\n            // In all cases the password must be cleartext (you're using a config script to setup users. Deal with the security risk, or dont use it)\n            \"password\": \"\",\n            // The rest of these are optionals\n\n            // Can either be full path or program name.\n            \"shell\": \"zsh\",\n            // Optional\n            // The expected home directory location\n            // If not provided (and not a system_user), we will simply let linux decide where to put you.\n            // Usually by default this will be /home/username\n            \"home_directory\": \"/home/\",\n            // List of groups. If you only want it to be in its own group, leave this blank\n            // The system will attempt to make sure that the user has sudo permissions if it is placed in\n            // either sudo or wheel. The system will try to verify that either of those groups exist and have the appropriate permission\n            // It is better to be sure you know what you want here, but we will try for you\n            \"groups\": [\"sudo\"],\n            // Optional\n            // This is not case sensitive, but it does have to be a boolean T/F. If left blank, it will be considered false\n            \"system_user\": \"False\",\n            // Optional\n            // If provided, we will copy an ssh key over to the server for you. If you want to just use the \n            // key provided, simply supply 'default' (not case sensitive). Otherwise, we will expect \n            // the name of the key you are looking for. If you do not provide a full path to it, we will \n            // check in the running user's .ssh directory, however that isn't the best idea. You should\n            // really just provide a full path\n            // NOTE! If the user is a system_user (ie, no login), this will be ignored\n            \"ssh_key\": \"default\"\n        }\n    ],\n    \"dependencies\": [\n        // Optional\n        // Experimental\n        // We will attempt to install the dependencies in this list regardless of the distro of the box\n        // we are on\n        \"someprogram1\",\"someprogram2\",\"someprogram3\"\n    ],\n    // EXPIRAMENTAL!\n    // Optional\n    \"server_configuration\": {\n        // Sets the hostname of the server to the provided hostname\n        \"hostname\": \"newhostname_for_server\",\n        // Tells the system to update the server. Not case sensitive. If present, this will be run before anything else\n        \"update\": \"True\",\n        // Tells the system to upgrade the server distro. Not case sensitive\n        \"upgrade\": \"True\",\n        // Tells the system to disconnect and restart the server on completion. This is the very last thing ran, if present\n        \"reboot_on_finish\": \"True\",\n        // Services that we need to enable for the server. We expect the service(s) to be installed already. If its not, you're on\n        // your own. Don't set us up for failure. \n        \"enabled_service\": [\n            \"someprogram1\",\n            \"someprogam2\"\n        ]\n    },\n    \"configurations\":[\n        // Optional\n        // A list of scripts to execute in order on the server box.\n        // Make sure that the server has the software installed to execute the script language though\n        // \n        // You can additionally provide params for the system to obey when executing the script provided. You can also provide \n        // params to the script itself. We will consume the params we expect and pass all the rest to the script\n        // The following params are reserved for us (meaning, if they are provided, we will consume then and they will not be passed along). None of these are case sensitive\n        // --runAs=whatever user you want the script to be run as\n        // --local tells us that you want the script to be locally (on the hosting box) instead of remotely. Note, we assume by default the scripts are to be\n        //         run remotely. \n        //\n        // You can also provide params for your script here, and those are passed to your script as well\n        //\n        // We pass the following additional params to every script that is run locally\n        // --host=whatever the server ip is that we just finished our setup on\n        // --user=whatever the user is that we used when initiating our connection to the server\n        // --password=whatever the user's password is.\n        // --ssh_key=whatever the ssh key is that was used to connect to the server. Note this is only provided if we were provided one\n        // --ssh_passphrase=whatever the passphrase is for the key. Note this is only provided if we are provided it\n        \"someFile1.py --runAs=root\",\n        \"someFile2.pl --someparam=somevalue\",\n        \"someFile3.sh\"\n    ]\n}\n</code></pre>\n<h3><a href=\"https://github.com/miversen33/Server-Automation-Setup/blob/master/setupconfig.doc.yaml\" rel=\"nofollow\">YAML</a></h3>\n<pre><span class=\"nt\">server_connection</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># This needs to be an ip address that is accessible from the box this is ran off of</span>\n  <span class=\"nt\">ip_address</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">127.0.0.1</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># Either provide this or ip address. If you provide both, we will use the ip address.</span>\n  <span class=\"nt\">hostname</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">some-host</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># if not provided, we assume you want to ssh in as root.</span>\n  <span class=\"nt\">ssh_user</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">someuser</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># if an ssh_user is provided, you can provide an ssh password for that user</span>\n  <span class=\"nt\">ssh_user_password</span><span class=\"p\">:</span> <span class=\"s\">\"somepassword\"</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># if used, this needs to be the path to an ssh key, or if the file is in the same directory this can be the ssh key name directly</span>\n  <span class=\"nt\">ssh_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">id_rsa</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># If not provided, we will ask for it once</span>\n  <span class=\"nt\">ssh_key_password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">somepassword</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># The sudo password for the server. If not provided, we will ask for it</span>\n  <span class=\"nt\">elevation_password</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">somepassword</span>\n<span class=\"nt\">users</span><span class=\"p\">:</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"nt\">username</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">testuser</span>\n  <span class=\"c1\"># This can be </span>\n  <span class=\"c1\"># - An empty string or 'None' (both equate to None)</span>\n  <span class=\"c1\"># - Cleartext password</span>\n  <span class=\"nt\">password</span><span class=\"p\">:</span> <span class=\"s\">''</span>\n  <span class=\"c1\"># The rest of these are optionals</span>\n\n  <span class=\"c1\"># Can either be full path or program name.</span>\n  <span class=\"nt\">shell</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">zsh</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># The expected home directory location</span>\n  <span class=\"c1\"># If not provided (and not a system_user), we will simply let linux decide where to put you.</span>\n  <span class=\"c1\"># Usually by default this will be /home/username</span>\n  <span class=\"nt\">home_directory</span><span class=\"p\">:</span> <span class=\"s\">\"/home/\"</span>\n  <span class=\"c1\"># List of groups. If you only want it to be in its own group, leave this blank</span>\n  <span class=\"c1\"># The system will attempt to make sure that the user has sudo permissions if it is placed in</span>\n  <span class=\"c1\"># either sudo or wheel. The system will try to verify that either of those groups exist and have the appropriate permission</span>\n  <span class=\"c1\"># It is better to be sure you know what you want here, but we will try for you</span>\n  <span class=\"nt\">groups</span><span class=\"p\">:</span> \n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">sudo</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someothergroup1</span>\n    <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someothergroup1</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># This is not case sensitive, but it does have to be a boolean T/F. If left blank, it will be considered False</span>\n  <span class=\"nt\">system_user</span><span class=\"p\">:</span> <span class=\"s\">'False'</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># If provided, we will copy an ssh key over to the server for you. If you want to just use the </span>\n  <span class=\"c1\"># key provided, simply supply 'default' (not case sensitive). Otherwise, we will expect </span>\n  <span class=\"c1\"># the name of the key you are looking for. If you do not provide a full path to it, we will </span>\n  <span class=\"c1\"># check in the running user's .ssh directory, however that isn't the best idea. You should</span>\n  <span class=\"c1\"># really just provide a full path</span>\n  <span class=\"c1\"># NOTE! If the user is a system_user (ie, no login), this will be ignored</span>\n  <span class=\"nt\">ssh_key</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">default</span>\n<span class=\"c1\"># Optional</span>\n<span class=\"nt\">dependencies</span><span class=\"p\">:</span>\n<span class=\"c1\"># We will attempt to install the dependencies in this list regardless of the distro of the box we are on</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someprogram1</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someprogram2</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someprogram3</span>\n<span class=\"nt\">server_configuration</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Sets the hostname of the server to the provided hostname</span>\n  <span class=\"nt\">hostname</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">newhostname_for_server</span>\n  <span class=\"c1\"># Tells the system to update the server. Not case sensitive. If present, this will be run before anything else</span>\n  <span class=\"nt\">update</span><span class=\"p\">:</span> <span class=\"s\">'True'</span>\n  <span class=\"c1\"># Tells the system to upgrade the server distro. Not case sensitive</span>\n  <span class=\"nt\">upgrade</span><span class=\"p\">:</span> <span class=\"s\">'True'</span>\n  <span class=\"c1\"># Tells the system to disconnect and restart the server on completion. This is the very last thing ran, if present</span>\n  <span class=\"nt\">reboot_on_finish</span><span class=\"p\">:</span> <span class=\"s\">'True'</span>\n  <span class=\"c1\"># Services that we need to enable for the server. We expect the service(s) to be installed already. If its not, you're on</span>\n  <span class=\"c1\"># your own. Don't set us up for failure. </span>\n  <span class=\"nt\">enable_service</span><span class=\"p\">:</span> \n    <span class=\"l l-Scalar l-Scalar-Plain\">-someprogram1</span>\n    <span class=\"l l-Scalar l-Scalar-Plain\">-someprogam2</span>\n<span class=\"nt\">configurations</span><span class=\"p\">:</span>\n  <span class=\"c1\"># Optional</span>\n  <span class=\"c1\"># A list of scripts to execute in order on the server box.</span>\n  <span class=\"c1\"># Make sure that the server has the software installed to execute the script language though</span>\n  <span class=\"c1\"># </span>\n  <span class=\"c1\"># You can additionally provide params for the system to obey when executing the script provided. You can also provide </span>\n  <span class=\"c1\"># params to the script itself. We will consume the params we expect and pass all the rest to the script</span>\n  <span class=\"c1\"># The following params are reserved for us (meaning, if they are provided, we will consume then and they will not be passed along). None of these are case sensitive</span>\n  <span class=\"c1\"># --runAs=whatever user you want the script to be run as</span>\n  <span class=\"c1\"># --local tells us that you want the script to be locally (on the hosting box) instead of remotely. Note, we assume by default the scripts are to be</span>\n  <span class=\"c1\">#         run remotely. </span>\n  <span class=\"c1\">#</span>\n  <span class=\"c1\"># You can also provide params for your script here, and those are passed to your script as well</span>\n  <span class=\"c1\">#</span>\n  <span class=\"c1\"># We pass the following additional params to every script that is run locally</span>\n  <span class=\"c1\"># --host=whatever the server ip is that we just finished our setup on</span>\n  <span class=\"c1\"># --user=whatever the user is that we used when initiating our connection to the server</span>\n  <span class=\"c1\"># --password=whatever the user's password is.</span>\n  <span class=\"c1\"># --ssh_key=whatever the ssh key is that was used to connect to the server. Note this is only provided if we were provided one</span>\n  <span class=\"c1\"># --ssh_passphrase=whatever the passphrase is for the key. Note this is only provided if we are provided it</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someFile1.py --runAs=root</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someFile2.pl --someparam=somevalue</span>\n<span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">someFile3.sh</span>\n</pre>\n\n          </div>"}, "last_serial": 7101526, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "38fb9a8fdb1eb58b0dc94147dfc06645", "sha256": "88086ee004f958d5752a3d869afaedefe663606bea3a236dfb7e150d362ebff5"}, "downloads": -1, "filename": "server_automation_setup-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "38fb9a8fdb1eb58b0dc94147dfc06645", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5910, "upload_time": "2020-04-21T04:48:30", "upload_time_iso_8601": "2020-04-21T04:48:30.033434Z", "url": "https://files.pythonhosted.org/packages/69/b9/6943a526669876b8d93df388d1881bb9f0cc05592ed0156afeb25f7fcc50/server_automation_setup-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "00d2774aec04ce55927019b82df45bd7", "sha256": "5361c7ef312e64953a9e476223c57868c20d2858bd7f082a494c25f5ffcf7fe1"}, "downloads": -1, "filename": "server-automation-setup-0.1.tar.gz", "has_sig": false, "md5_digest": "00d2774aec04ce55927019b82df45bd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7174, "upload_time": "2020-04-21T04:48:32", "upload_time_iso_8601": "2020-04-21T04:48:32.298057Z", "url": "https://files.pythonhosted.org/packages/8e/b2/6e7fbb742b9a2340814a4ff9f90b5a53b6897482c1fab495cd0e938ec9ef/server-automation-setup-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "30b26e7e833e513d12bc79ce1077a3bf", "sha256": "d212a0cec5160365d9201fedce12af9234917e1585e00f414380be4527c15e39"}, "downloads": -1, "filename": "server_automation_setup-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "30b26e7e833e513d12bc79ce1077a3bf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 15136, "upload_time": "2020-04-21T05:50:54", "upload_time_iso_8601": "2020-04-21T05:50:54.142700Z", "url": "https://files.pythonhosted.org/packages/df/41/cd163156c88e257f5eacb48a22fc10d6428701c39a4e11ae7fec2060a160/server_automation_setup-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f875abed08249e7a246b7201a0bea016", "sha256": "034246fa1b5ea56cc131516cd67f124a607618c3a68ecea46d28613af6c35e6a"}, "downloads": -1, "filename": "server-automation-setup-0.2.tar.gz", "has_sig": false, "md5_digest": "f875abed08249e7a246b7201a0bea016", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 14008, "upload_time": "2020-04-21T05:50:55", "upload_time_iso_8601": "2020-04-21T05:50:55.439768Z", "url": "https://files.pythonhosted.org/packages/af/15/90d6d9f64d8dc67ee23c012b94fb416d058567b25664ed9b04a1664e8b4c/server-automation-setup-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "0cfa795e69fe8bcdd1869a7c93caeefb", "sha256": "14ece32741a5874e12cad65d3083f6e890d2d3a84a667660d7aa92bec2f696b2"}, "downloads": -1, "filename": "server_automation_setup-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0cfa795e69fe8bcdd1869a7c93caeefb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 8628, "upload_time": "2020-04-21T05:58:02", "upload_time_iso_8601": "2020-04-21T05:58:02.833703Z", "url": "https://files.pythonhosted.org/packages/c0/43/5904ed594a82e51df756e69bc6f8eec236f9b5999cf6d344a1825c2c58bb/server_automation_setup-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b323a70e55672731652287a0738f69b6", "sha256": "eab215ddfbc0a5ecf3e00bc9f412b9428fed0ec5b6ce8fda1a9e8ecb0e9c8dfa"}, "downloads": -1, "filename": "server-automation-setup-0.2.1.tar.gz", "has_sig": false, "md5_digest": "b323a70e55672731652287a0738f69b6", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 8327, "upload_time": "2020-04-21T05:58:03", "upload_time_iso_8601": "2020-04-21T05:58:03.775202Z", "url": "https://files.pythonhosted.org/packages/19/37/11a28bd8ca790092cb3f1a16409efdc554739bafa78ec259871d45862843/server-automation-setup-0.2.1.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "0e776ae32d9b6b3ae112c4cb8d54bf0d", "sha256": "39df8c272742a5bbdc974ffe61e8a753d64470e1b674a45e55f6de0c9899b4ce"}, "downloads": -1, "filename": "server_automation_setup-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0e776ae32d9b6b3ae112c4cb8d54bf0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 8609, "upload_time": "2020-04-21T06:02:45", "upload_time_iso_8601": "2020-04-21T06:02:45.292663Z", "url": "https://files.pythonhosted.org/packages/25/c1/6067e8fcb0d2a6ad8074a3a1816edcf7a118b58baafb5746aa7b46f440cf/server_automation_setup-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "931f7172bbb4ac9ae99cdb13e0babbc5", "sha256": "a6e8011485b3ffb474e5d394fc43ee1446d7c48e60533fbe3f58617ca88b72dc"}, "downloads": -1, "filename": "server-automation-setup-0.3.tar.gz", "has_sig": false, "md5_digest": "931f7172bbb4ac9ae99cdb13e0babbc5", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 10327, "upload_time": "2020-04-21T06:02:46", "upload_time_iso_8601": "2020-04-21T06:02:46.539047Z", "url": "https://files.pythonhosted.org/packages/a0/d0/060448f7cbc73684f5ef089694222d0a40ae17322b99e1a095024c48eefd/server-automation-setup-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "2ed19208883c0fcdf0312f707865be25", "sha256": "290de7d85d163f9459aa256f99a06740beef92b0218bbdc6e12ddcdac3bf7d5f"}, "downloads": -1, "filename": "server_automation_setup-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2ed19208883c0fcdf0312f707865be25", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 15301, "upload_time": "2020-04-25T02:07:39", "upload_time_iso_8601": "2020-04-25T02:07:39.170577Z", "url": "https://files.pythonhosted.org/packages/db/b7/28ccd5a05a49030da84ef170205673829d091a1c3b919d7b3cde2a3f5a1d/server_automation_setup-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "690640fe9dcd23131a8b1dfea22b9e90", "sha256": "12f25a082d496ea64994d96c8ed03f7baab419cf87cb86a76dac73be188bab94"}, "downloads": -1, "filename": "server-automation-setup-0.3.1.tar.gz", "has_sig": false, "md5_digest": "690640fe9dcd23131a8b1dfea22b9e90", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 14704, "upload_time": "2020-04-25T02:07:40", "upload_time_iso_8601": "2020-04-25T02:07:40.415206Z", "url": "https://files.pythonhosted.org/packages/0d/ed/6d7a93910c4bf089672c2419443317eac46fda0b03d9518db3055991306e/server-automation-setup-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "abbc8fe6a6947e695c9612c313d02119", "sha256": "d32edfb6ac34eeea2614bc83064c4f89e91cf15bc63784f0203cf3ccbe84ab53"}, "downloads": -1, "filename": "server_automation_setup-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "abbc8fe6a6947e695c9612c313d02119", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 15432, "upload_time": "2020-04-25T06:32:44", "upload_time_iso_8601": "2020-04-25T06:32:44.026382Z", "url": "https://files.pythonhosted.org/packages/06/a6/6a0513d7a9f3010938b7b090d4884d620c4bead9634412029dbbd798c07c/server_automation_setup-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8357c16a4fbdd8fa5f2d37368276e69b", "sha256": "5591a0c00200b10c3f4ee62371d0584be77dc6886a8bfbfbfe2656235bcddb44"}, "downloads": -1, "filename": "server-automation-setup-0.3.2.tar.gz", "has_sig": false, "md5_digest": "8357c16a4fbdd8fa5f2d37368276e69b", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 14744, "upload_time": "2020-04-25T06:32:45", "upload_time_iso_8601": "2020-04-25T06:32:45.240025Z", "url": "https://files.pythonhosted.org/packages/18/4d/ef458f2c6712f4d16f8de7ec692adb91c36e8cb365962c7f77200c61bf32/server-automation-setup-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "1ab1b01db5fe067418b05c3a7dba6a1c", "sha256": "995706950f2ddbb80732d03368265d5fa7d10195f9de3adb6ef074dd22f0466a"}, "downloads": -1, "filename": "server_automation_setup-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1ab1b01db5fe067418b05c3a7dba6a1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 15755, "upload_time": "2020-04-25T17:27:30", "upload_time_iso_8601": "2020-04-25T17:27:30.412176Z", "url": "https://files.pythonhosted.org/packages/e9/af/a89db3419c6d8251f81bcf9e3e48c16ebf6ec937437b6851e9a8653e144c/server_automation_setup-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c9254dc342967231cd1a014d6bc62da7", "sha256": "3e5d6ce55be378bdfc161799a1462adc1b0ad2883d45db9b9cea21f30c007508"}, "downloads": -1, "filename": "server-automation-setup-0.3.3.tar.gz", "has_sig": false, "md5_digest": "c9254dc342967231cd1a014d6bc62da7", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 16230, "upload_time": "2020-04-25T17:27:31", "upload_time_iso_8601": "2020-04-25T17:27:31.501533Z", "url": "https://files.pythonhosted.org/packages/10/0e/c51b89909112943e6659098990a65e0bc727e3f2921fbdf41f592944b8aa/server-automation-setup-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "883bda106d287720d7bb03a3992984be", "sha256": "f4225b63e2703723d15c05051509535597a0bed16ca13fa3c3e654fbadb02590"}, "downloads": -1, "filename": "server_automation_setup-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "883bda106d287720d7bb03a3992984be", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 16176, "upload_time": "2020-04-25T19:39:12", "upload_time_iso_8601": "2020-04-25T19:39:12.203531Z", "url": "https://files.pythonhosted.org/packages/6b/61/0ba17781cc27268171769fc64adccd8797ca2944cbaab8e91cfd986e2dea/server_automation_setup-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "917e5a2fe797addf7e87da1143fdbf98", "sha256": "a3c8abad75b977a4f526e864a443aadd8adbbfbaff9be05a5ec43f2b4a78f4ae"}, "downloads": -1, "filename": "server-automation-setup-0.3.4.tar.gz", "has_sig": false, "md5_digest": "917e5a2fe797addf7e87da1143fdbf98", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 16537, "upload_time": "2020-04-25T19:39:13", "upload_time_iso_8601": "2020-04-25T19:39:13.155482Z", "url": "https://files.pythonhosted.org/packages/58/63/e80625a50dc25f0df82a7c9e6813fc9fed72002dd998fa67f6cb72a96da1/server-automation-setup-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "612a76bd6079253f356f386b409da52f", "sha256": "c5f1190282bc8d20ed9224b7b4d8b30b191a1646a09554649741095008c3b1cd"}, "downloads": -1, "filename": "server_automation_setup-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "612a76bd6079253f356f386b409da52f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 16515, "upload_time": "2020-04-25T22:19:19", "upload_time_iso_8601": "2020-04-25T22:19:19.751882Z", "url": "https://files.pythonhosted.org/packages/14/b6/476cf73312786bb8c8d0753c47ba6a1c7c0b9ca3bb025872606a26a4336c/server_automation_setup-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3236264aef2955ecfeaf5b113e44f6fa", "sha256": "219d4cdf3c025e491af64b7eac5971fda67dd1dcbf662267ca55773365baeb54"}, "downloads": -1, "filename": "server-automation-setup-0.3.5.tar.gz", "has_sig": false, "md5_digest": "3236264aef2955ecfeaf5b113e44f6fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 16819, "upload_time": "2020-04-25T22:19:20", "upload_time_iso_8601": "2020-04-25T22:19:20.678161Z", "url": "https://files.pythonhosted.org/packages/60/2c/15b21afa0f67dd3ce22d62accc56013efcb9d2eed69f695e45c0205d78ba/server-automation-setup-0.3.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "612a76bd6079253f356f386b409da52f", "sha256": "c5f1190282bc8d20ed9224b7b4d8b30b191a1646a09554649741095008c3b1cd"}, "downloads": -1, "filename": "server_automation_setup-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "612a76bd6079253f356f386b409da52f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">3.0", "size": 16515, "upload_time": "2020-04-25T22:19:19", "upload_time_iso_8601": "2020-04-25T22:19:19.751882Z", "url": "https://files.pythonhosted.org/packages/14/b6/476cf73312786bb8c8d0753c47ba6a1c7c0b9ca3bb025872606a26a4336c/server_automation_setup-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3236264aef2955ecfeaf5b113e44f6fa", "sha256": "219d4cdf3c025e491af64b7eac5971fda67dd1dcbf662267ca55773365baeb54"}, "downloads": -1, "filename": "server-automation-setup-0.3.5.tar.gz", "has_sig": false, "md5_digest": "3236264aef2955ecfeaf5b113e44f6fa", "packagetype": "sdist", "python_version": "source", "requires_python": ">3.0", "size": 16819, "upload_time": "2020-04-25T22:19:20", "upload_time_iso_8601": "2020-04-25T22:19:20.678161Z", "url": "https://files.pythonhosted.org/packages/60/2c/15b21afa0f67dd3ce22d62accc56013efcb9d2eed69f695e45c0205d78ba/server-automation-setup-0.3.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:15:03 2020"}