{"info": {"author": "Maximilian Mittenbuhler", "author_email": "max.mittenbuhler@student.uva.nl", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# 1. Manual\n\n## 1.1 Installation\nTo install the package, run the command `pip install digit_recognition` in the command prompt (windows) or terminal (mac) (alternative: download the package and run the setup.py script with `python setup.py install`).\n\n\nThe package uses the following dependencies: numpy, urllib3, gzip, tkinter, Pillow. These should be installed automatically during the installation if necessary. If the package does not run as intended, please ensure that the dependencies listed here have been installed correctly.\n\n## 1.2 Setting up the NN\nThe package does not include a trained NN, but only the necessary functions to build it. Therefore, prior to using the interface, the NN has to be set up (this has only to be done once). To do so, run the command `install_network` in the command prompt/terminal (alternative: import the \u2018digit_recognition\u2019 module in python and call the `install_network()` function).\n\n\nThis creates a folder in the current directory (\u201cDR_Data\u201d) and downloads training and test sets from the MNIST database to this folder. It uses this data to train a NN with 784, 200, 100, and 10 nodes in each of four layers, respectively. The training algorithm goes through three epochs each with 60.000 training digits (this may take a few minutes). The NN is evaluated and the accuracy as well as the recall and precision for each digit are printed to the console (__important__: accuracy should be above 95%). Finally, the NN is saved to the \u201cDR_Data\u201d folder.\n\n## 1.3 Starting up the interface\nTo start the interface, run the command `digit_recognition` in the command prompt/terminal (alternative: import the \u2018digit_recognition\u2019 module in python and call the `run_gui()` function). \n\n__Important__: Ensure that the \u201cDR_Data\u201d folder is located in the current working directory.\n\n## 1.4 Using the interface\n<img src=\"img/exp3.png\" width=\"400\">\n\nThe interface consists of two fields: a drawing field framed in black (left) and a feedback field showing several outputs (right). The user can draw in the drawing field by pressing the left mouse button and moving the mouse. Located below the drawing field are two buttons: the \u201cRecognize!\u201d button passes the drawing to the NN and displays its output in the feedback field; The \u201cReset\u201d button deletes the current drawing and output. In the feedback field, three outputs are displayed: first, the digit recognized by the NN in the user\u2019s drawing; second, the confidence of this recognition (i.e. the probability that the recognition is correct); and third, a possible alternative (i.e. the second most likely recognition). If the confidence is above 80%, no alternative is displayed.\n\n__Important__: The performance of the NN is highly sensitive to size and location of the user\u2019s digit in the drawing field. The grey rectangle in the drawing field indicates location and size for optimal performance.\n\n# 2. Documentation\n### 2.1 NeuralNetwork (class)\n* __\\_\\_init\\_\\_(self, design, weights=None, step_size=0.01, activation_function=sigmoid, bias=False)__\nSet up basic attributes of neural network.\n\n        Attributes\n        ----------\n        design: list\n            Contains the number of nodes in each layer (length is number of layers)\n        weights: list\n            Contains weight matrices\n        step_size: float\n            Step size for training algorithm\n        activation_function: function\n            Activation function used in neural network\n        bias: boolean\n            Bias nodes on or off\n        activation: list\n            Contains activation of nodes at each layer\n        confusion_matrix: np.array\n            Confusion matrix produced in 'evaluate' method (true labels in rows, predicitons in columns)\n        accuracy, recall, precision: float\n            Accuracy, recall, and precision of neural network produced in 'evaluate' method\n\n        Methods\n        -------\n        train(input_data, target_data, epochs=1)\n            Loops of 'one_training' function\n        one_training(input_data, target_data)\n            Computes cost and updates weights accordingly using backpropagation\n        run(input_data)\n            Forward propagation for single input\n        evaluate(input_data, target_data)\n            Assesses performance of neural network and computes performance measures\n        save(file_name)\n            Saves weights of neural network as np.array\n\n* __train(self, input_data, target_data, epochs=1)__\nLoop for 'one_train' (backpropagation) function (see below).\n\n        Arguments\n        --------- \n        input_data: array\n            3-dimensional numpy array containing input data (see \n            pre_processing function for exact format).\n        target_data: array\n            2-dimensional numpy array containing target data in one-hot \n            representation.\n        epochs: int\n            Number of times the training algorithms iterates through \n            the *entire* dataset. Defaults to 1.\n\n* __one_training(self, input_data, target_data)__\nBackpropagation algorithm to train neural network.\n\n        Arguments\n        --------- \n        input_data: array\n            2-dimensional numpy array containing a single input. Passed \n            by train function (see above).\n        target_data: array\n            2-dimensional numpy array containing a single target. Passed \n            by train function (see above).\n\n* __run(self, input_data)__\nForward propagation algorithm.\n\n        Computes output of neural network for a single input.\n\n        Arguments\n        --------- \n        input_data: array\n            2-dimensional numpy array containing a single input.\n\n* __evaluate(self, input_data, target_data)__\nEvaluates performance of neural network.\nComputes accuracy of neural network, as well as recall and precision for each class using a confusion matrix. Results are printed to the console, but also defined as attributes of the neural network.\nNote: Use independent test data!\n\n        Arguments\n        --------- \n        input_data: array\n            3-dimensional numpy array containing test input data.\n        target_data: array\n            2-dimensional numpy array containing test target data in \n            one-hot representation.\n\n* __save(self, file_name)__\nSaves weights of neural network as np.array \n\n        Arguments\n        ---------\n        file_name: string\n            Name of the file that is saved (without file extension)\n\n### 2.2 Pre-processing (function)\n* __pre_processing( )__ \nDownloads, imports and preprocess data for digit recognition.\nData is downloaded from the MNIST database. Consists of 70.000 handwritten digits of 28x28 pixels. Each with a corresponding, manually added label. Data is split into 60.000 instances for training and 10.000 instances for testing.\n\n        Returns:\n            Matrix representations of digits and correspondings labels in a format optimized for the neural network.\n\n# 3. Example\n````python\n# Import data\ntrain_images, train_labels, test_images, test_labels = pre_processing()\n\n# Build neural network (with two hidden layers of 200/100 nodes respectively)\nneural_network = NeuralNetwork([784,200,100,10], bias=True)\nneural_network.train(train_images, train_labels, epochs=3)\nneural_network.evaluate(test_images, test_labels)\n\n# Export neural network\nos.chdir('DR_Data')\nneural_network.save('my_network')\nos.chdir('..')\n````\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Mittenbuhler/Neural_Network.git", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "digit-recognition", "package_url": "https://pypi.org/project/digit-recognition/", "platform": "", "project_url": "https://pypi.org/project/digit-recognition/", "project_urls": {"Homepage": "https://github.com/Mittenbuhler/Neural_Network.git"}, "release_url": "https://pypi.org/project/digit-recognition/0.0.11/", "requires_dist": ["numpy", "idx2numpy", "urllib3", "Pillow"], "requires_python": "", "summary": "Neural network for digit recognition", "version": "0.0.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>1. Manual</h1>\n<h2>1.1 Installation</h2>\n<p>To install the package, run the command <code>pip install digit_recognition</code> in the command prompt (windows) or terminal (mac) (alternative: download the package and run the setup.py script with <code>python setup.py install</code>).</p>\n<p>The package uses the following dependencies: numpy, urllib3, gzip, tkinter, Pillow. These should be installed automatically during the installation if necessary. If the package does not run as intended, please ensure that the dependencies listed here have been installed correctly.</p>\n<h2>1.2 Setting up the NN</h2>\n<p>The package does not include a trained NN, but only the necessary functions to build it. Therefore, prior to using the interface, the NN has to be set up (this has only to be done once). To do so, run the command <code>install_network</code> in the command prompt/terminal (alternative: import the \u2018digit_recognition\u2019 module in python and call the <code>install_network()</code> function).</p>\n<p>This creates a folder in the current directory (\u201cDR_Data\u201d) and downloads training and test sets from the MNIST database to this folder. It uses this data to train a NN with 784, 200, 100, and 10 nodes in each of four layers, respectively. The training algorithm goes through three epochs each with 60.000 training digits (this may take a few minutes). The NN is evaluated and the accuracy as well as the recall and precision for each digit are printed to the console (<strong>important</strong>: accuracy should be above 95%). Finally, the NN is saved to the \u201cDR_Data\u201d folder.</p>\n<h2>1.3 Starting up the interface</h2>\n<p>To start the interface, run the command <code>digit_recognition</code> in the command prompt/terminal (alternative: import the \u2018digit_recognition\u2019 module in python and call the <code>run_gui()</code> function).</p>\n<p><strong>Important</strong>: Ensure that the \u201cDR_Data\u201d folder is located in the current working directory.</p>\n<h2>1.4 Using the interface</h2>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f94cea02e586566c44e5a0a4d72d70896547b3ab/696d672f657870332e706e67\" width=\"400\">\n<p>The interface consists of two fields: a drawing field framed in black (left) and a feedback field showing several outputs (right). The user can draw in the drawing field by pressing the left mouse button and moving the mouse. Located below the drawing field are two buttons: the \u201cRecognize!\u201d button passes the drawing to the NN and displays its output in the feedback field; The \u201cReset\u201d button deletes the current drawing and output. In the feedback field, three outputs are displayed: first, the digit recognized by the NN in the user\u2019s drawing; second, the confidence of this recognition (i.e. the probability that the recognition is correct); and third, a possible alternative (i.e. the second most likely recognition). If the confidence is above 80%, no alternative is displayed.</p>\n<p><strong>Important</strong>: The performance of the NN is highly sensitive to size and location of the user\u2019s digit in the drawing field. The grey rectangle in the drawing field indicates location and size for optimal performance.</p>\n<h1>2. Documentation</h1>\n<h3>2.1 NeuralNetwork (class)</h3>\n<ul>\n<li>\n<p><strong>__init__(self, design, weights=None, step_size=0.01, activation_function=sigmoid, bias=False)</strong>\nSet up basic attributes of neural network.</p>\n<pre><code>  Attributes\n  ----------\n  design: list\n      Contains the number of nodes in each layer (length is number of layers)\n  weights: list\n      Contains weight matrices\n  step_size: float\n      Step size for training algorithm\n  activation_function: function\n      Activation function used in neural network\n  bias: boolean\n      Bias nodes on or off\n  activation: list\n      Contains activation of nodes at each layer\n  confusion_matrix: np.array\n      Confusion matrix produced in 'evaluate' method (true labels in rows, predicitons in columns)\n  accuracy, recall, precision: float\n      Accuracy, recall, and precision of neural network produced in 'evaluate' method\n\n  Methods\n  -------\n  train(input_data, target_data, epochs=1)\n      Loops of 'one_training' function\n  one_training(input_data, target_data)\n      Computes cost and updates weights accordingly using backpropagation\n  run(input_data)\n      Forward propagation for single input\n  evaluate(input_data, target_data)\n      Assesses performance of neural network and computes performance measures\n  save(file_name)\n      Saves weights of neural network as np.array\n</code></pre>\n</li>\n<li>\n<p><strong>train(self, input_data, target_data, epochs=1)</strong>\nLoop for 'one_train' (backpropagation) function (see below).</p>\n<pre><code>  Arguments\n  --------- \n  input_data: array\n      3-dimensional numpy array containing input data (see \n      pre_processing function for exact format).\n  target_data: array\n      2-dimensional numpy array containing target data in one-hot \n      representation.\n  epochs: int\n      Number of times the training algorithms iterates through \n      the *entire* dataset. Defaults to 1.\n</code></pre>\n</li>\n<li>\n<p><strong>one_training(self, input_data, target_data)</strong>\nBackpropagation algorithm to train neural network.</p>\n<pre><code>  Arguments\n  --------- \n  input_data: array\n      2-dimensional numpy array containing a single input. Passed \n      by train function (see above).\n  target_data: array\n      2-dimensional numpy array containing a single target. Passed \n      by train function (see above).\n</code></pre>\n</li>\n<li>\n<p><strong>run(self, input_data)</strong>\nForward propagation algorithm.</p>\n<pre><code>  Computes output of neural network for a single input.\n\n  Arguments\n  --------- \n  input_data: array\n      2-dimensional numpy array containing a single input.\n</code></pre>\n</li>\n<li>\n<p><strong>evaluate(self, input_data, target_data)</strong>\nEvaluates performance of neural network.\nComputes accuracy of neural network, as well as recall and precision for each class using a confusion matrix. Results are printed to the console, but also defined as attributes of the neural network.\nNote: Use independent test data!</p>\n<pre><code>  Arguments\n  --------- \n  input_data: array\n      3-dimensional numpy array containing test input data.\n  target_data: array\n      2-dimensional numpy array containing test target data in \n      one-hot representation.\n</code></pre>\n</li>\n<li>\n<p><strong>save(self, file_name)</strong>\nSaves weights of neural network as np.array</p>\n<pre><code>  Arguments\n  ---------\n  file_name: string\n      Name of the file that is saved (without file extension)\n</code></pre>\n</li>\n</ul>\n<h3>2.2 Pre-processing (function)</h3>\n<ul>\n<li>\n<p><strong>pre_processing( )</strong>\nDownloads, imports and preprocess data for digit recognition.\nData is downloaded from the MNIST database. Consists of 70.000 handwritten digits of 28x28 pixels. Each with a corresponding, manually added label. Data is split into 60.000 instances for training and 10.000 instances for testing.</p>\n<pre><code>  Returns:\n      Matrix representations of digits and correspondings labels in a format optimized for the neural network.\n</code></pre>\n</li>\n</ul>\n<h1>3. Example</h1>\n<pre><span class=\"c1\"># Import data</span>\n<span class=\"n\">train_images</span><span class=\"p\">,</span> <span class=\"n\">train_labels</span><span class=\"p\">,</span> <span class=\"n\">test_images</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span> <span class=\"o\">=</span> <span class=\"n\">pre_processing</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Build neural network (with two hidden layers of 200/100 nodes respectively)</span>\n<span class=\"n\">neural_network</span> <span class=\"o\">=</span> <span class=\"n\">NeuralNetwork</span><span class=\"p\">([</span><span class=\"mi\">784</span><span class=\"p\">,</span><span class=\"mi\">200</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">,</span><span class=\"mi\">10</span><span class=\"p\">],</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">neural_network</span><span class=\"o\">.</span><span class=\"n\">train</span><span class=\"p\">(</span><span class=\"n\">train_images</span><span class=\"p\">,</span> <span class=\"n\">train_labels</span><span class=\"p\">,</span> <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">neural_network</span><span class=\"o\">.</span><span class=\"n\">evaluate</span><span class=\"p\">(</span><span class=\"n\">test_images</span><span class=\"p\">,</span> <span class=\"n\">test_labels</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Export neural network</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"s1\">'DR_Data'</span><span class=\"p\">)</span>\n<span class=\"n\">neural_network</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'my_network'</span><span class=\"p\">)</span>\n<span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">chdir</span><span class=\"p\">(</span><span class=\"s1\">'..'</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 5342868, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "7904a0b2a7799b85aa34b9e9657c1fe8", "sha256": "16254ed12998349bd44c4636b681caa1e402918ed7c63ece7d5af3e54a37301e"}, "downloads": -1, "filename": "digit_recognition-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7904a0b2a7799b85aa34b9e9657c1fe8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11576, "upload_time": "2019-05-31T13:50:08", "upload_time_iso_8601": "2019-05-31T13:50:08.021439Z", "url": "https://files.pythonhosted.org/packages/6e/b3/9a681919db0aa5092acc6684508431d853dcd8e7bb932adb7594c49d04af/digit_recognition-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fdc6b164b7a3f9c3dcd413872eaed193", "sha256": "586af14f568413f06d5890dd257a8b19b332e694ce82246e6c18c53778ff63e8"}, "downloads": -1, "filename": "digit_recognition-0.0.10.tar.gz", "has_sig": false, "md5_digest": "fdc6b164b7a3f9c3dcd413872eaed193", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8763, "upload_time": "2019-05-31T13:50:09", "upload_time_iso_8601": "2019-05-31T13:50:09.359736Z", "url": "https://files.pythonhosted.org/packages/3f/94/fac31b0af9d7a13d5f0d792340e2e9be3b9a4510b100d39a98c7a12e97e5/digit_recognition-0.0.10.tar.gz", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e3701bf83343c4f1eea95b14db470a3d", "sha256": "382931554173c01ca4376c09e7bb0e64b45266f420d32f02f4186a00cf2b09e4"}, "downloads": -1, "filename": "digit_recognition-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e3701bf83343c4f1eea95b14db470a3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14115, "upload_time": "2019-05-31T13:52:52", "upload_time_iso_8601": "2019-05-31T13:52:52.683187Z", "url": "https://files.pythonhosted.org/packages/20/3d/38a7cebea5623fb0566869af245015e1cb3b222ad57c7d93e26b441505ad/digit_recognition-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42c292f4c9d6b022079a05f679f3a57e", "sha256": "a5f3a5512a16c92c19d6c4cdaaed3b8f5170c946aeb54ba95af9d1ada983d12b"}, "downloads": -1, "filename": "digit_recognition-0.0.11.tar.gz", "has_sig": false, "md5_digest": "42c292f4c9d6b022079a05f679f3a57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9324, "upload_time": "2019-05-31T13:52:54", "upload_time_iso_8601": "2019-05-31T13:52:54.390783Z", "url": "https://files.pythonhosted.org/packages/41/dd/e34456c7ea08f77d0335acdd7edc38d0dc60e6fbec8569b94e23eb50a555/digit_recognition-0.0.11.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c662275df6e4841fee511353444b22ec", "sha256": "1ce8c990bdc0cc67ef5a7edd3c9eb42fa109079fc269cd124394857412c1b8db"}, "downloads": -1, "filename": "digit_recognition-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "c662275df6e4841fee511353444b22ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7120, "upload_time": "2019-05-27T15:17:10", "upload_time_iso_8601": "2019-05-27T15:17:10.691773Z", "url": "https://files.pythonhosted.org/packages/ed/f6/aa4e7885b4f6e73f32b44bbc299bb30e9e224c5b003b84f4ae62deb20cbc/digit_recognition-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0ee59f527ebc9074792bf4c6f0eef95", "sha256": "92e180848531e2a054d144613b75ef74b1b1f3cc87d49aa3b5b66e745da4bb82"}, "downloads": -1, "filename": "digit_recognition-0.0.2.tar.gz", "has_sig": false, "md5_digest": "a0ee59f527ebc9074792bf4c6f0eef95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6052, "upload_time": "2019-05-27T15:17:12", "upload_time_iso_8601": "2019-05-27T15:17:12.662410Z", "url": "https://files.pythonhosted.org/packages/d7/bb/e65b03d9994cfe066e814ba90d56a74ecc57276b53b7a48294599148a262/digit_recognition-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "10ea8d4f3e6a4be5a70af3d10201d84c", "sha256": "07200e824697a1b77e7515ea0856a5788a4e6e6cf8fd166ee781307738c55aae"}, "downloads": -1, "filename": "digit_recognition-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "10ea8d4f3e6a4be5a70af3d10201d84c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7336, "upload_time": "2019-05-27T15:30:49", "upload_time_iso_8601": "2019-05-27T15:30:49.449193Z", "url": "https://files.pythonhosted.org/packages/fe/cd/d146d96cc8c97be5bc74bac22abd4d53275516372ed293a85faed9f171b0/digit_recognition-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "01b6844657beacdd631422badd04ae53", "sha256": "ff08c11423ce2e197476e56cfdb7e0230cc07effbd8d12f5e9a68c0bf2df509f"}, "downloads": -1, "filename": "digit_recognition-0.0.3.tar.gz", "has_sig": false, "md5_digest": "01b6844657beacdd631422badd04ae53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6117, "upload_time": "2019-05-27T15:30:51", "upload_time_iso_8601": "2019-05-27T15:30:51.855701Z", "url": "https://files.pythonhosted.org/packages/5c/f6/96b41d5e692c29120c2910c0e4f761ffb7070b63a7d6819fb755bf9ef482/digit_recognition-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "7e8a614b8130ba85c75d5523d36d6187", "sha256": "df5410f6f4066fdeaa7fd69e3947dc750d47d33a4ec1a6636243de186490b3ca"}, "downloads": -1, "filename": "digit_recognition-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "7e8a614b8130ba85c75d5523d36d6187", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10297, "upload_time": "2019-05-27T15:50:03", "upload_time_iso_8601": "2019-05-27T15:50:03.617388Z", "url": "https://files.pythonhosted.org/packages/4d/66/4b0273d9a50c094faf113226f635842a8ccb0143fef79967a019ebaa7fa8/digit_recognition-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "15bc06debe2c290b76150e23072005d9", "sha256": "666e444bcd020e5013efe7cb3130fe7e2d80448054f8da6a5fb7d3bea051c582"}, "downloads": -1, "filename": "digit_recognition-0.0.4.tar.gz", "has_sig": false, "md5_digest": "15bc06debe2c290b76150e23072005d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6012, "upload_time": "2019-05-27T15:50:04", "upload_time_iso_8601": "2019-05-27T15:50:04.774253Z", "url": "https://files.pythonhosted.org/packages/f5/ef/c40ca49efbb4f5bf01036a27692d73f82745724c2f513046a6e152bcb985/digit_recognition-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "5ad9525f67e89ce4a662b610a83334a0", "sha256": "0213d4d6c856c769c208a766eea186720ea9a0bb10d62bc2db3599ee309aa20c"}, "downloads": -1, "filename": "digit_recognition-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "5ad9525f67e89ce4a662b610a83334a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10320, "upload_time": "2019-05-27T16:01:39", "upload_time_iso_8601": "2019-05-27T16:01:39.323024Z", "url": "https://files.pythonhosted.org/packages/ac/c1/74f3068cffbd4130c3213823b452b285d9c3c41723b8365f5b383e526403/digit_recognition-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "746ac0fdc12d352162564d6815bef7cd", "sha256": "8b6312d95045535801875c9c0dcc18b383143a85364ad70fffa85ef0fb5c77e6"}, "downloads": -1, "filename": "digit_recognition-0.0.5.tar.gz", "has_sig": false, "md5_digest": "746ac0fdc12d352162564d6815bef7cd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6026, "upload_time": "2019-05-27T16:01:40", "upload_time_iso_8601": "2019-05-27T16:01:40.822782Z", "url": "https://files.pythonhosted.org/packages/be/db/9591c4b1a47764d7ddae369cc31b2a20fb9c1524c7fb9e1b276d7c43bf2d/digit_recognition-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "6a27701e96e94bf79f2ee1009b2ce621", "sha256": "34c8e614f22c1beb8771c1a834649d67828c55245e2695701d95c6df84e03a37"}, "downloads": -1, "filename": "digit_recognition-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "6a27701e96e94bf79f2ee1009b2ce621", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10326, "upload_time": "2019-05-27T16:06:48", "upload_time_iso_8601": "2019-05-27T16:06:48.746166Z", "url": "https://files.pythonhosted.org/packages/c4/1b/851a56d94c6da5027397be2f088008ec27d63abcf5590bcf5d5bc997072b/digit_recognition-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4c48409b808a9b97f270cf7caf1a660e", "sha256": "b95b64c073f064c333d1d3ad18dd275de473b71ad22903bfacc08f1ba4a33e5c"}, "downloads": -1, "filename": "digit_recognition-0.0.6.tar.gz", "has_sig": false, "md5_digest": "4c48409b808a9b97f270cf7caf1a660e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6036, "upload_time": "2019-05-27T16:06:49", "upload_time_iso_8601": "2019-05-27T16:06:49.784190Z", "url": "https://files.pythonhosted.org/packages/ea/6f/24dcc282547d05bc77a3ca1d33633a8684dc6e183fce9d96474c53d70941/digit_recognition-0.0.6.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "ac768a7aaa62512320be16f2b7ad6dee", "sha256": "6945e1a47283b762b75ab04d35d0ef139abecb9d9f316cf4451fb689c0ed0278"}, "downloads": -1, "filename": "digit_recognition-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "ac768a7aaa62512320be16f2b7ad6dee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10523, "upload_time": "2019-05-28T06:05:02", "upload_time_iso_8601": "2019-05-28T06:05:02.374450Z", "url": "https://files.pythonhosted.org/packages/0a/08/015b1d1b2223d025c18f6069472c0608d561ce734b4226b4e34d7ac11130/digit_recognition-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ff0072610b65b18f56ef102ef65bb031", "sha256": "6650f9c7b2ca32a844cbd16686d6bb7d3ab1a0c91cccee89072964ed5f56e929"}, "downloads": -1, "filename": "digit_recognition-0.0.7.tar.gz", "has_sig": false, "md5_digest": "ff0072610b65b18f56ef102ef65bb031", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6090, "upload_time": "2019-05-28T06:05:03", "upload_time_iso_8601": "2019-05-28T06:05:03.756194Z", "url": "https://files.pythonhosted.org/packages/4f/19/ab18f03200986264715e521d5c1c2785dfe90c4d200d2810caeb9224ea25/digit_recognition-0.0.7.tar.gz", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "55d77053fcf272ff9d026e30533328a2", "sha256": "cf72fc7b570d7c6f348d885f401dc47e834b493440115d1dc9480d9676806da9"}, "downloads": -1, "filename": "digit_recognition-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "55d77053fcf272ff9d026e30533328a2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11554, "upload_time": "2019-05-28T16:05:14", "upload_time_iso_8601": "2019-05-28T16:05:14.030740Z", "url": "https://files.pythonhosted.org/packages/69/1c/97b000f395c10492a990405ce2e9ec50f94b8c469022da6f7496162ae90b/digit_recognition-0.0.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e6d55e73dd2a63afe50eea3973b420b9", "sha256": "0fd1a6988f2632f31da7cef1ed84c4ba7ba536d8fdd7dcffd4cd9cd4d38adbbf"}, "downloads": -1, "filename": "digit_recognition-0.0.8.tar.gz", "has_sig": false, "md5_digest": "e6d55e73dd2a63afe50eea3973b420b9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7166, "upload_time": "2019-05-28T16:05:15", "upload_time_iso_8601": "2019-05-28T16:05:15.679217Z", "url": "https://files.pythonhosted.org/packages/ab/a2/2e43ab4ea0559b8586b891223b6a51a2bcc2b8dbc6aee664111455e9ce97/digit_recognition-0.0.8.tar.gz", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "bf69b13051cc12bcd29ad9a8fbd8a376", "sha256": "1a8b238bf3259ad2ba8f5283e8c3920f0f52b1a77d95249f4f9be58f47dd8568"}, "downloads": -1, "filename": "digit_recognition-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "bf69b13051cc12bcd29ad9a8fbd8a376", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11565, "upload_time": "2019-05-29T11:01:01", "upload_time_iso_8601": "2019-05-29T11:01:01.050334Z", "url": "https://files.pythonhosted.org/packages/b5/c5/8e5973401f054b5433e605999905d77ea44d3b7302e75555d294f8b21825/digit_recognition-0.0.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bfa66be0ee6d0f77155e96430a15153b", "sha256": "ecce8e3af9f3593101ea8a4df688cd66b91cdfd9f5e3c2a3eeebe35db535d01e"}, "downloads": -1, "filename": "digit_recognition-0.0.9.tar.gz", "has_sig": false, "md5_digest": "bfa66be0ee6d0f77155e96430a15153b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7177, "upload_time": "2019-05-29T11:01:02", "upload_time_iso_8601": "2019-05-29T11:01:02.454374Z", "url": "https://files.pythonhosted.org/packages/2d/a7/420a24bd5ff6fc0c541743350926481728fa65df45a8b71dec8417f455d1/digit_recognition-0.0.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e3701bf83343c4f1eea95b14db470a3d", "sha256": "382931554173c01ca4376c09e7bb0e64b45266f420d32f02f4186a00cf2b09e4"}, "downloads": -1, "filename": "digit_recognition-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e3701bf83343c4f1eea95b14db470a3d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14115, "upload_time": "2019-05-31T13:52:52", "upload_time_iso_8601": "2019-05-31T13:52:52.683187Z", "url": "https://files.pythonhosted.org/packages/20/3d/38a7cebea5623fb0566869af245015e1cb3b222ad57c7d93e26b441505ad/digit_recognition-0.0.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42c292f4c9d6b022079a05f679f3a57e", "sha256": "a5f3a5512a16c92c19d6c4cdaaed3b8f5170c946aeb54ba95af9d1ada983d12b"}, "downloads": -1, "filename": "digit_recognition-0.0.11.tar.gz", "has_sig": false, "md5_digest": "42c292f4c9d6b022079a05f679f3a57e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9324, "upload_time": "2019-05-31T13:52:54", "upload_time_iso_8601": "2019-05-31T13:52:54.390783Z", "url": "https://files.pythonhosted.org/packages/41/dd/e34456c7ea08f77d0335acdd7edc38d0dc60e6fbec8569b94e23eb50a555/digit_recognition-0.0.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:38:24 2020"}