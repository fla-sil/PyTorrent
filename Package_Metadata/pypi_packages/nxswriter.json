{"info": {"author": "Jan Kotanski, Eugen Wintersberger , Halil Pasic", "author_email": "jankotan@gmail.com, eugen.wintersberger@gmail.com, halil.pasic@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: Physics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Welcome to NXSDataWriter's documentation!\n=========================================\n\nAuthors: Jan Kotanski, Eugen Wintersberger, Halil Pasic\n\n------------\nIntroduction\n------------\n\nNXSDataWriter is a Tango server which allows to store NeXuS Data in H5 files.\n\nThe server provides storing data from other Tango devices,\nvarious databases as well as passed by a user client via JSON strings.\n\nTango Server API: https://nexdatas.github.io/writer/doc_html\n\n| Source code: https://github.com/nexdatas/writer\n| Project Web page: https://nexdatas.github.io/writer\n| NexDaTaS Web page: https://nexdatas.github.io\n\n------------\nInstallation\n------------\n\nInstall the dependencies:\n\n|    pni-libraries, PyTango, numpy\n\nFrom sources\n\"\"\"\"\"\"\"\"\"\"\"\"\n\nDownload the latest NexDaTaS version from\n\n|    https://github.com/nexdatas/writer\n\nExtract sources and run\n\n.. code-block:: console\n\n\t  $ python setup.py install\n\nDebian packages\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nDebian Jessie (and Wheezy) packages can be found in the HDRI repository.\n\nTo install the debian packages, add the PGP repository key\n\n.. code-block:: console\n\n\t  $ sudo su\n\t  $ wget -q -O - http://repos.pni-hdri.de/debian_repo.pub.gpg | apt-key add -\n\nand then download the corresponding source list\n\n.. code-block:: console\n\n\t  $ cd /etc/apt/sources.list.d\n\t  $ wget http://repos.pni-hdri.de/jessie-pni-hdri.list\n\nFinally,\n\n.. code-block:: console\n\n\t  $ apt-get update\n\t  $ apt-get install python-nxswriter\n\nTo instal other NexDaTaS packages\n\n.. code-block:: console\n\n\t  $ apt-get install python-nxstools nxsconfigserver-db python-nxsconfigserver nxsconfigtool\n\nand\n\n.. code-block:: console\n\n\t  $ apt-get install python-nxsrecselector nxselector python-sardana-nxsrecorder\n\nfor Component Selector and Sardana related packages.\n\nFrom pip\n\"\"\"\"\"\"\"\"\n\nTo install it from pip you can\n\n.. code-block:: console\n\n   $ python3 -m venv myvenv\n   $ . myvenv/bin/activate\n\n   $ pip install nxswriter\n\nMoreover it is also good to install\n\n.. code-block:: console\n\n   $ pip install pytango\n   $ pip install pymysqldb\n   $ pip install psycopg2-binary\n   $ pip install cx-oracle\n\nSetting NeXus Writer Server\n\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\"\n\nTo set up  NeXus Writer Server run\n\n.. code-block:: console\n\n          $ nxsetup -x NXSDataWriter\n\nThe *nxsetup* command comes from the **python-nxstools** package.\n\n-----------\nClient code\n-----------\n\nIn order to use Nexus Data Server one has to write a client code. Some simple client codes\nare in the  nexdatas repository. In this section we add some\ncomments related to the client code.\n\n.. code-block:: python\n\n   # To use the Tango Server we must import the PyTango module and\n   # create DeviceProxy for the server.\n\n   import PyTango\n\n   device = \"p09/tdw/r228\"\n   dpx = PyTango.DeviceProxy(device)\n   dpx.set_timeout_millis(10000)\n\n   dpx.Init()\n\n   # Here device corresponds to a name of our Nexus Data Server.\n   # The Init() method resets the state of the server.\n\n   dpx.FileName = \"test.h5\"\n   dpx.OpenFile()\n\n   # We set the name of the output HDF5 file and open it.\n\n   # Now we are ready to pass the XML settings describing a structure of\n   # the output file as well as defining a way of data storing.\n   # Examples of the XMLSettings can be found in the XMLExamples directory.\n\n   xml = open(\"test.xml\", 'r').read()\n   dpx.XMLSettings = xml\n\n   dpx.JSONRecord = '{\"data\": {\"parameterA\":0.2},\n\t\t\t \"decoders\":{\"DESY2D\":\"desydecoders.desy2Ddec.desy2d\"},\n\t\t\t \"datasources\":{\n\t\t              \"MCLIENT\":\"sources.DataSources.LocalClientSource\"}\n   }'\n\n   dpx.OpenEntry()\n\n   # We read our XML settings settings from a file and pass them to the server via\n   # the XMLSettings attribute. Then we open an entry group related to the XML\n   # configuration. Optionally, we can also set JSONRecord, i.e. an attribute\n   # which contains a global JSON string with data needed to store during opening\n   # the entry and also other stages of recording. If external decoder for\n   # DevEncoded data is need one can registred it passing its packages and\n   # class names in JSONRecord,\n   # e.g. \"desy2d\" class of \"DESY2D\" label in \"desydecoders.desy2Ddec\" package.\n   # Similarly making use of \"datasources\" records of the JSON string one can\n   # registred additional datasources. The OpenEntry method stores data defined\n   # in the XML string with strategy=INIT.\n   # The JSONRecord attribute can be changed during recording our data.\n\n   # After finalization of the configuration process we can start recording\n   # the main experiment data in a STEP mode.\n\n   dpx.Record('{\"data\": {\"p09/counter/exp.01\":0.1, \"p09/counter/exp.02\":1.1}}')\n\n   # Every time we call the Record method all nexus fields defined with\n   # strategy=STEP are extended by one record unit and the assigned to them data\n   # is stored. As the method argument we pass a local JSON string with the client\n   # data. To record the client data one can also use the global JSONRecord string.\n   # Contrary to the global JSON string the local one is only\n   # valid during one record step.\n\n   dpx.Record('{\"data\": {\"emittance_x\": 0.1},  \"triggers\":[\"trigger1\", \"trigger2\"]  }')\n\n   # If you denote in your XML configuration string some fields by additional\n   # trigger attributes you may ask the server to store your data only in specific\n   # record steps. This can be helpful if you want to store your data in\n   # asynchronous mode. To this end you define in the local JSON string a list of\n   # triggers which are used in the current record step.\n\n   dpx.JSONRecord = '{\"data\": {\"parameterB\":0.3}}'\n   dpx.CloseEntry()\n\n   # After scanning experiment data in 'STEP' mode we close the entry.\n   # To this end we call the CloseEntry method which also stores data defined\n   # with strategy=FINAL. Since our HDF5 file can contain many entries we can again\n   # open the entry and repeat our record procedure. If we define more than one entry\n   # in one XML setting string the defined entries are recorded parallel\n   # with the same steps.\n\n   # Finally, we can close our output file by\n\n   dpx.CloseFile()\n\nAdditionally, one can use asynchronous versions of **OpenEntry**, **Record**, **CloseEntry**, i.e.\n**OpenEntryAsynch**, **RecordAsynch**, **CloseEntryAsynch**. In this case data is stored\nin a background thread and during this writing Tango Data Server has a state *RUNNING*.\n\nIn order to build the XML configurations in the easy way the authors of the server provide\nfor this purpose a specialized GUI tool, Component Designer.\nThe attached to the server XML examples\nwas created by XMLFile class defined in XMLCreator/simpleXML.py.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nexdatas/writer", "keywords": "writer Tango server nexus data", "license": "GNU GENERAL PUBLIC LICENSE v3", "maintainer": "", "maintainer_email": "", "name": "nxswriter", "package_url": "https://pypi.org/project/nxswriter/", "platform": "", "project_url": "https://pypi.org/project/nxswriter/", "project_urls": {"Homepage": "https://github.com/nexdatas/writer"}, "release_url": "https://pypi.org/project/nxswriter/2.27.0/", "requires_dist": ["fabio", "h5py", "lxml", "numpy (>1.6.0)", "nxstools", "pytz"], "requires_python": "", "summary": "Nexus Data writer implemented as a Tango Server", "version": "2.27.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Authors: Jan Kotanski, Eugen Wintersberger, Halil Pasic</p>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>NXSDataWriter is a Tango server which allows to store NeXuS Data in H5 files.</p>\n<p>The server provides storing data from other Tango devices,\nvarious databases as well as passed by a user client via JSON strings.</p>\n<p>Tango Server API: <a href=\"https://nexdatas.github.io/writer/doc_html\" rel=\"nofollow\">https://nexdatas.github.io/writer/doc_html</a></p>\n<div>\n<div>Source code: <a href=\"https://github.com/nexdatas/writer\" rel=\"nofollow\">https://github.com/nexdatas/writer</a></div>\n<div>Project Web page: <a href=\"https://nexdatas.github.io/writer\" rel=\"nofollow\">https://nexdatas.github.io/writer</a></div>\n<div>NexDaTaS Web page: <a href=\"https://nexdatas.github.io\" rel=\"nofollow\">https://nexdatas.github.io</a></div>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install the dependencies:</p>\n<div>\n<div>pni-libraries, PyTango, numpy</div>\n</div>\n<div id=\"from-sources\">\n<h3>From sources</h3>\n<p>Download the latest NexDaTaS version from</p>\n<div>\n<div><a href=\"https://github.com/nexdatas/writer\" rel=\"nofollow\">https://github.com/nexdatas/writer</a></div>\n</div>\n<p>Extract sources and run</p>\n<pre><span class=\"gp\">$</span> python setup.py install\n</pre>\n</div>\n<div id=\"debian-packages\">\n<h3>Debian packages</h3>\n<p>Debian Jessie (and Wheezy) packages can be found in the HDRI repository.</p>\n<p>To install the debian packages, add the PGP repository key</p>\n<pre><span class=\"gp\">$</span> sudo su\n<span class=\"gp\">$</span> wget -q -O - http://repos.pni-hdri.de/debian_repo.pub.gpg <span class=\"p\">|</span> apt-key add -\n</pre>\n<p>and then download the corresponding source list</p>\n<pre><span class=\"gp\">$</span> <span class=\"nb\">cd</span> /etc/apt/sources.list.d\n<span class=\"gp\">$</span> wget http://repos.pni-hdri.de/jessie-pni-hdri.list\n</pre>\n<p>Finally,</p>\n<pre><span class=\"gp\">$</span> apt-get update\n<span class=\"gp\">$</span> apt-get install python-nxswriter\n</pre>\n<p>To instal other NexDaTaS packages</p>\n<pre><span class=\"gp\">$</span> apt-get install python-nxstools nxsconfigserver-db python-nxsconfigserver nxsconfigtool\n</pre>\n<p>and</p>\n<pre><span class=\"gp\">$</span> apt-get install python-nxsrecselector nxselector python-sardana-nxsrecorder\n</pre>\n<p>for Component Selector and Sardana related packages.</p>\n</div>\n<div id=\"from-pip\">\n<h3>From pip</h3>\n<p>To install it from pip you can</p>\n<pre><span class=\"gp\">$</span> python3 -m venv myvenv\n<span class=\"gp\">$</span> . myvenv/bin/activate\n<span class=\"go\">\n</span><span class=\"gp\">$</span> pip install nxswriter\n</pre>\n<p>Moreover it is also good to install</p>\n<pre><span class=\"gp\">$</span> pip install pytango\n<span class=\"gp\">$</span> pip install pymysqldb\n<span class=\"gp\">$</span> pip install psycopg2-binary\n<span class=\"gp\">$</span> pip install cx-oracle\n</pre>\n</div>\n<div id=\"setting-nexus-writer-server\">\n<h3>Setting NeXus Writer Server</h3>\n<p>To set up  NeXus Writer Server run</p>\n<pre><span class=\"gp\">$</span> nxsetup -x NXSDataWriter\n</pre>\n<p>The <em>nxsetup</em> command comes from the <strong>python-nxstools</strong> package.</p>\n</div>\n</div>\n<div id=\"client-code\">\n<h2>Client code</h2>\n<p>In order to use Nexus Data Server one has to write a client code. Some simple client codes\nare in the  nexdatas repository. In this section we add some\ncomments related to the client code.</p>\n<pre><span class=\"c1\"># To use the Tango Server we must import the PyTango module and</span>\n<span class=\"c1\"># create DeviceProxy for the server.</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">PyTango</span>\n\n<span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"s2\">\"p09/tdw/r228\"</span>\n<span class=\"n\">dpx</span> <span class=\"o\">=</span> <span class=\"n\">PyTango</span><span class=\"o\">.</span><span class=\"n\">DeviceProxy</span><span class=\"p\">(</span><span class=\"n\">device</span><span class=\"p\">)</span>\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">set_timeout_millis</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">Init</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Here device corresponds to a name of our Nexus Data Server.</span>\n<span class=\"c1\"># The Init() method resets the state of the server.</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">FileName</span> <span class=\"o\">=</span> <span class=\"s2\">\"test.h5\"</span>\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">OpenFile</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># We set the name of the output HDF5 file and open it.</span>\n\n<span class=\"c1\"># Now we are ready to pass the XML settings describing a structure of</span>\n<span class=\"c1\"># the output file as well as defining a way of data storing.</span>\n<span class=\"c1\"># Examples of the XMLSettings can be found in the XMLExamples directory.</span>\n\n<span class=\"n\">xml</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"test.xml\"</span><span class=\"p\">,</span> <span class=\"s1\">'r'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">XMLSettings</span> <span class=\"o\">=</span> <span class=\"n\">xml</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">JSONRecord</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"data\": {\"parameterA\":0.2},</span>\n                      <span class=\"s2\">\"decoders\"</span><span class=\"p\">:{</span><span class=\"s2\">\"DESY2D\"</span><span class=\"p\">:</span><span class=\"s2\">\"desydecoders.desy2Ddec.desy2d\"</span><span class=\"p\">},</span>\n                      <span class=\"s2\">\"datasources\"</span><span class=\"p\">:{</span>\n                           <span class=\"s2\">\"MCLIENT\"</span><span class=\"p\">:</span><span class=\"s2\">\"sources.DataSources.LocalClientSource\"</span><span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"s1\">'</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">OpenEntry</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># We read our XML settings settings from a file and pass them to the server via</span>\n<span class=\"c1\"># the XMLSettings attribute. Then we open an entry group related to the XML</span>\n<span class=\"c1\"># configuration. Optionally, we can also set JSONRecord, i.e. an attribute</span>\n<span class=\"c1\"># which contains a global JSON string with data needed to store during opening</span>\n<span class=\"c1\"># the entry and also other stages of recording. If external decoder for</span>\n<span class=\"c1\"># DevEncoded data is need one can registred it passing its packages and</span>\n<span class=\"c1\"># class names in JSONRecord,</span>\n<span class=\"c1\"># e.g. \"desy2d\" class of \"DESY2D\" label in \"desydecoders.desy2Ddec\" package.</span>\n<span class=\"c1\"># Similarly making use of \"datasources\" records of the JSON string one can</span>\n<span class=\"c1\"># registred additional datasources. The OpenEntry method stores data defined</span>\n<span class=\"c1\"># in the XML string with strategy=INIT.</span>\n<span class=\"c1\"># The JSONRecord attribute can be changed during recording our data.</span>\n\n<span class=\"c1\"># After finalization of the configuration process we can start recording</span>\n<span class=\"c1\"># the main experiment data in a STEP mode.</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">Record</span><span class=\"p\">(</span><span class=\"s1\">'{\"data\": {\"p09/counter/exp.01\":0.1, \"p09/counter/exp.02\":1.1}}'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Every time we call the Record method all nexus fields defined with</span>\n<span class=\"c1\"># strategy=STEP are extended by one record unit and the assigned to them data</span>\n<span class=\"c1\"># is stored. As the method argument we pass a local JSON string with the client</span>\n<span class=\"c1\"># data. To record the client data one can also use the global JSONRecord string.</span>\n<span class=\"c1\"># Contrary to the global JSON string the local one is only</span>\n<span class=\"c1\"># valid during one record step.</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">Record</span><span class=\"p\">(</span><span class=\"s1\">'{\"data\": {\"emittance_x\": 0.1},  \"triggers\":[\"trigger1\", \"trigger2\"]  }'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># If you denote in your XML configuration string some fields by additional</span>\n<span class=\"c1\"># trigger attributes you may ask the server to store your data only in specific</span>\n<span class=\"c1\"># record steps. This can be helpful if you want to store your data in</span>\n<span class=\"c1\"># asynchronous mode. To this end you define in the local JSON string a list of</span>\n<span class=\"c1\"># triggers which are used in the current record step.</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">JSONRecord</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"data\": {\"parameterB\":0.3}}'</span>\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">CloseEntry</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># After scanning experiment data in 'STEP' mode we close the entry.</span>\n<span class=\"c1\"># To this end we call the CloseEntry method which also stores data defined</span>\n<span class=\"c1\"># with strategy=FINAL. Since our HDF5 file can contain many entries we can again</span>\n<span class=\"c1\"># open the entry and repeat our record procedure. If we define more than one entry</span>\n<span class=\"c1\"># in one XML setting string the defined entries are recorded parallel</span>\n<span class=\"c1\"># with the same steps.</span>\n\n<span class=\"c1\"># Finally, we can close our output file by</span>\n\n<span class=\"n\">dpx</span><span class=\"o\">.</span><span class=\"n\">CloseFile</span><span class=\"p\">()</span>\n</pre>\n<p>Additionally, one can use asynchronous versions of <strong>OpenEntry</strong>, <strong>Record</strong>, <strong>CloseEntry</strong>, i.e.\n<strong>OpenEntryAsynch</strong>, <strong>RecordAsynch</strong>, <strong>CloseEntryAsynch</strong>. In this case data is stored\nin a background thread and during this writing Tango Data Server has a state <em>RUNNING</em>.</p>\n<p>In order to build the XML configurations in the easy way the authors of the server provide\nfor this purpose a specialized GUI tool, Component Designer.\nThe attached to the server XML examples\nwas created by XMLFile class defined in XMLCreator/simpleXML.py.</p>\n</div>\n\n          </div>"}, "last_serial": 7015818, "releases": {"2.25.0": [{"comment_text": "", "digests": {"md5": "bf83549dc3a68a71eb059b7c7083c4b1", "sha256": "f72664b2cca37110c433d5964472420e20a784380b3600583e9d552cb34aa8d6"}, "downloads": -1, "filename": "nxswriter-2.25.0.tar.gz", "has_sig": false, "md5_digest": "bf83549dc3a68a71eb059b7c7083c4b1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 75550, "upload_time": "2019-10-10T18:19:45", "upload_time_iso_8601": "2019-10-10T18:19:45.895456Z", "url": "https://files.pythonhosted.org/packages/89/28/10dad6ffc06677c5cd4a9f6060ffd9e064e1473e24913fafdb3bea385d1a/nxswriter-2.25.0.tar.gz", "yanked": false}], "2.25.1": [{"comment_text": "", "digests": {"md5": "6446140c6ff7c33667cb14e0aff6a579", "sha256": "95a53a6f7798b7ad88f47e114220ee1c5d6e987e5238d60a0ff3028fad09e8e2"}, "downloads": -1, "filename": "nxswriter-2.25.1.tar.gz", "has_sig": false, "md5_digest": "6446140c6ff7c33667cb14e0aff6a579", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79571, "upload_time": "2019-10-11T07:22:12", "upload_time_iso_8601": "2019-10-11T07:22:12.406468Z", "url": "https://files.pythonhosted.org/packages/a2/8e/762b7da2c8b2ad5d63a46b5a5b9b6fb3d46078b0f6ac83db1f91621b41a3/nxswriter-2.25.1.tar.gz", "yanked": false}], "2.25.2": [{"comment_text": "", "digests": {"md5": "6ef596bdbd4dfc3b296c921b3ac2d3ad", "sha256": "4aff6468a1548e624092890b04849d5942bac647e1d3bbe33cf315bf838d623f"}, "downloads": -1, "filename": "nxswriter-2.25.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6ef596bdbd4dfc3b296c921b3ac2d3ad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74048, "upload_time": "2020-01-07T15:47:27", "upload_time_iso_8601": "2020-01-07T15:47:27.897190Z", "url": "https://files.pythonhosted.org/packages/c4/8f/fcf3b7d75c9b89e16f9cd96c7305ecf8ed39811594841376ca1d8ed5178c/nxswriter-2.25.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e699fe9985bff9a3e9abd0aa1dd8268f", "sha256": "e2ffd5987bc8cbaf8cd90591ff59eda147f6545bed931684f197a3c5516434a5"}, "downloads": -1, "filename": "nxswriter-2.25.2.tar.gz", "has_sig": false, "md5_digest": "e699fe9985bff9a3e9abd0aa1dd8268f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79597, "upload_time": "2020-01-07T15:46:54", "upload_time_iso_8601": "2020-01-07T15:46:54.232659Z", "url": "https://files.pythonhosted.org/packages/ca/94/56cc090ea9e5b2b6e517f216bb4db86f248a07a4892f1add40c3b9f14f2b/nxswriter-2.25.2.tar.gz", "yanked": false}], "2.25.3": [{"comment_text": "", "digests": {"md5": "f0b105a75524744d1e56bf7f6684e858", "sha256": "36bb5bc1f203b7a5a7a106d99b6354d107e77880f0b0a73eba7fbe002a4e26fd"}, "downloads": -1, "filename": "nxswriter-2.25.3-py3-none-any.whl", "has_sig": false, "md5_digest": "f0b105a75524744d1e56bf7f6684e858", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74045, "upload_time": "2020-01-15T12:43:01", "upload_time_iso_8601": "2020-01-15T12:43:01.570052Z", "url": "https://files.pythonhosted.org/packages/62/26/25223e5ecb3ce3ec6abf799c8801248938a1c20895c7d0e15e38ef0ae339/nxswriter-2.25.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e24325bf59244aa69b3fe9b937e5ef11", "sha256": "1682703e50220f927a22188ae7288969342add2555a85bbe9cd30c9d2b456314"}, "downloads": -1, "filename": "nxswriter-2.25.3.tar.gz", "has_sig": false, "md5_digest": "e24325bf59244aa69b3fe9b937e5ef11", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79591, "upload_time": "2020-01-15T12:42:41", "upload_time_iso_8601": "2020-01-15T12:42:41.195587Z", "url": "https://files.pythonhosted.org/packages/68/9b/94d1e560005fa4910d7e5404d4697da40fa207eda04953509aa592619299/nxswriter-2.25.3.tar.gz", "yanked": false}], "2.26.0": [{"comment_text": "", "digests": {"md5": "cf99c4aa71f0bdf3ccb8e9f14f0dd68b", "sha256": "2310c70f6287af2c18892b834ff5dfdd5d29788270479f58bd51d03046f285ff"}, "downloads": -1, "filename": "nxswriter-2.26.0-py3-none-any.whl", "has_sig": false, "md5_digest": "cf99c4aa71f0bdf3ccb8e9f14f0dd68b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74148, "upload_time": "2020-03-06T21:11:37", "upload_time_iso_8601": "2020-03-06T21:11:37.842185Z", "url": "https://files.pythonhosted.org/packages/be/aa/e626cbb095a9cb5f2b0870c23acc319dbcfb5fa1bb139459a2915efeeb7f/nxswriter-2.26.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c205f1627a034807b08a35886ac9b89", "sha256": "e8ee1bc460dea28d743943a29155060e41bf82ad59a6cee54c86c0370fe8d85a"}, "downloads": -1, "filename": "nxswriter-2.26.0.tar.gz", "has_sig": false, "md5_digest": "3c205f1627a034807b08a35886ac9b89", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79800, "upload_time": "2020-03-06T21:11:39", "upload_time_iso_8601": "2020-03-06T21:11:39.872988Z", "url": "https://files.pythonhosted.org/packages/b5/27/03587ab5a7073b91526494617960b80abfc3fb28eb3b7799b85cebd161f5/nxswriter-2.26.0.tar.gz", "yanked": false}], "2.27.0": [{"comment_text": "", "digests": {"md5": "63f0c8a33dcd6608327fb912853523fd", "sha256": "c19439b808770883b8192a60fbaef0406a88148c516ecff5125e17b19a138297"}, "downloads": -1, "filename": "nxswriter-2.27.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63f0c8a33dcd6608327fb912853523fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74189, "upload_time": "2020-04-14T09:25:08", "upload_time_iso_8601": "2020-04-14T09:25:08.518720Z", "url": "https://files.pythonhosted.org/packages/a4/e0/237f0fedc139928ca60c592213115bfc3f534c2372437de0d082efdb2da5/nxswriter-2.27.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b77982aa5a79d1f10cc9eef5bec420", "sha256": "5aad37fa0592e35f6687279a575c9d782ddbb6ae964084ac1745148546acbab2"}, "downloads": -1, "filename": "nxswriter-2.27.0.tar.gz", "has_sig": false, "md5_digest": "a4b77982aa5a79d1f10cc9eef5bec420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79679, "upload_time": "2020-04-14T09:25:10", "upload_time_iso_8601": "2020-04-14T09:25:10.084113Z", "url": "https://files.pythonhosted.org/packages/64/5b/e2448655e7d848e6e5d78a796a0acde825e8122cdfd564f1c448cec84f43/nxswriter-2.27.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "63f0c8a33dcd6608327fb912853523fd", "sha256": "c19439b808770883b8192a60fbaef0406a88148c516ecff5125e17b19a138297"}, "downloads": -1, "filename": "nxswriter-2.27.0-py3-none-any.whl", "has_sig": false, "md5_digest": "63f0c8a33dcd6608327fb912853523fd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 74189, "upload_time": "2020-04-14T09:25:08", "upload_time_iso_8601": "2020-04-14T09:25:08.518720Z", "url": "https://files.pythonhosted.org/packages/a4/e0/237f0fedc139928ca60c592213115bfc3f534c2372437de0d082efdb2da5/nxswriter-2.27.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a4b77982aa5a79d1f10cc9eef5bec420", "sha256": "5aad37fa0592e35f6687279a575c9d782ddbb6ae964084ac1745148546acbab2"}, "downloads": -1, "filename": "nxswriter-2.27.0.tar.gz", "has_sig": false, "md5_digest": "a4b77982aa5a79d1f10cc9eef5bec420", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 79679, "upload_time": "2020-04-14T09:25:10", "upload_time_iso_8601": "2020-04-14T09:25:10.084113Z", "url": "https://files.pythonhosted.org/packages/64/5b/e2448655e7d848e6e5d78a796a0acde825e8122cdfd564f1c448cec84f43/nxswriter-2.27.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:01 2020"}