{"info": {"author": "nikhil agarwal", "author_email": "nikhil.agarwal@iiitb.org", "bugtrack_url": null, "classifiers": [], "description": "<h1 align=\"center\">Pybush \ud83c\udf32</h1>\n\n[![PyPI version](https://badge.fury.io/py/pybush.svg)](https://badge.fury.io/py/pybush)\n[![version](https://img.shields.io/badge/dynamic/json?color=orange&label=version&prefix=v&query=version&url=https%3A%2F%2Fraw.githubusercontent.com%2Fnikhil0360%2Fpybush%2Fmaster%2Fsetup.json)](https://pypi.org/project/pybush/1.0.0/)\n[![python vesrion](https://img.shields.io/badge/dynamic/json?color=blue&label=Python&query=pythonv&url=https%3A%2F%2Fraw.githubusercontent.com%2Fnikhil0360%2Fpybush%2Fmaster%2Fsetup.json)](https://www.python.org/downloads/)\n[![](https://img.shields.io/badge/dynamic/json?color=ff69b4&label=Dependency&prefix=pip%20install%20&query=dependency&url=https%3A%2F%2Fraw.githubusercontent.com%2Fnikhil0360%2Fpybush%2Fmaster%2Fsetup.json)](https://pypi.org/project/binarytree/)\n\n\na python module (created by me \ud83d\ude09) to implement bst, bbst, avl trees and more in Python3+\n\n### Overview:\n[binarytree](https://pypi.org/project/binarytree/) is a great module to implement trees in python. Since python doesn't support pointers;\nimplementing binary tree functions was a bit tricky, but no more \ud83d\ude01. **pybush** brings this functionality using binarytree module. Now you can do everything from creating a tree, printing the tree, implement avl, do rotations and other functions.\n\nbinarytree has a pretty print functionality, which prints the tree in a visual way that we normally see while learning.\n```\nexample: a level order bst [7,3,11,1,5,9,13,0,2,4,6,8,10,12,14] will look like this\n\n\n            ______7_______\n           /              \\\n        __3__           ___11___\n       /     \\         /        \\\n      1       5       9         _13\n     / \\     / \\     / \\       /   \\\n    0   2   4   6   8   10    12    14\n```\nbinarytree do have a lot of functionalities, but pybush extends it...\n\n## Getting started\n```\n$ pip3 install binarytree\n$ pip3 install pybush\n```\n\npybush have the following Class to implement a Node:\n```\nclass Node(Node):\n    def __init__(self, value):\n        self.value = value\n        self.right = None\n        self.left = None\n        self.parent = None\n        self.h = self.height\n        self.count = 1\n```\n## Funtions for BBST (Balance binary search tree)\n* create a bbst\n```\n>>> values = [1,2,3,4,5,6,7,8]\n>>> tree_root = create_bbst(values,0,len(values)-1)\n>>> print(tree_root)\n\n    __4__\n   /     \\\n  2       6\n / \\     / \\\n1   3   5   7\n             \\\n              8\n```\n* add a Node\n```\n>>> add(tree_root,6.5)\nNode(6.5)\n>>> print(tree_root)\n\n    __4__\n   /     \\\n  2       6\n / \\     / \\\n1   3   5   7\n           / \\\n        6.5   8\n```\n* delete a Node\n```\n>>> delete(tree_root,7)\n>>> print(tree_root)\n\n    __4__\n   /     \\\n  2       6_\n / \\     /  \\\n1   3   5   6.5\n               \\\n                8\n```\n\n* search for a Node\n```\n>>> search(tree_root,3)\nNode(3)\n```\n\n* Predecessor and Successor\n```\n>>> successor(tree_root,4)\nNode(5)\n>>> predecessor(tree_root,6)\nNode(5)\n```\n\n* least common ancestor\n```\n>>> lca(tree_root,5,8)\nNode(6)\n>>> print(tree_root)\n\n    __4__\n   /     \\\n  2       6_\n / \\     /  \\\n1   3   5   6.5\n               \\\n                8\n```\n\n* rangecount and rangelist\n```\n>>> rangecount(tree_root,1,5)\n5\n>>> list = []\n>>> rangelist(tree_root,1,5,list)\n>>> list\n[Node(5), Node(4), Node(3), Node(2), Node(1)]\n```\n## Functions for AVL tree\n* create a avl tree\n```\n>>> values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n>>> tree_root = create_bbst(values,0,len(values)-1)\n```\n* add a Node\n```\n\n>>> print(tree_root)\n\n        ______8________\n       /               \\\n    __4__           ____12___\n   /     \\         /         \\\n  2       6       10         _14\n / \\     / \\     /  \\       /   \\\n1   3   5   7   9    11    13    15\n\n>>> add_avl(tree_root,7.2)\n>>> print(tree_root)\n\n        ______8________\n       /               \\\n    __4__           ____12___\n   /     \\         /         \\\n  2       6       10         _14\n / \\     / \\     /  \\       /   \\\n1   3   5   7   9    11    13    15\n             \\\n             7.2\n\n>>> add_avl(tree_root,7.4)\n>>> print(tree_root)\n\n        ______________8________\n       /                       \\\n    __4__                   ____12___\n   /     \\                 /         \\\n  2       6___            10         _14\n / \\     /    \\          /  \\       /   \\\n1   3   5     7.2_      9    11    13    15\n             /    \\\n            7     7.4\n\n# see the subtree rotated\n```\n* delete a Node\n```\n>>> delete_avl(tree_root,12)\n>>> print(tree_root)\n\n>>> print(tree_root)\n\n        ______________8_____\n       /                    \\\n    __4__                   _11___\n   /     \\                 /      \\\n  2       6___            10      _14\n / \\     /    \\          /       /   \\\n1   3   5     7.2_      9       13    15\n             /    \\\n            7     7.4\n```\n* search a Node\n```\n>>> search(tree_root,9)\nNode(9)\n```\n* check whether a tree is a avl tree\n```\n>>> is_avl(tree_root)\nTrue\n```\n* find rank and rank of a Node\n```\n>>> print(tree_root)\n\n        ______________8_____\n       /                    \\\n    __4__                   _11___\n   /     \\                 /      \\\n  2       6___            10      _14\n / \\     /    \\          /       /   \\\n1   3   5     7.2_      9       13    15\n             /    \\\n            7     7.4\n\n>>> rank(tree_root,10)\n5\n>>> find_rank(tree_root,5)\nNode(10)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/nikhil0360/pybush/archive/v1.1.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/nikhil0360", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pybush", "package_url": "https://pypi.org/project/pybush/", "platform": "", "project_url": "https://pypi.org/project/pybush/", "project_urls": {"Download": "https://github.com/nikhil0360/pybush/archive/v1.1.0.tar.gz", "Homepage": "https://github.com/nikhil0360"}, "release_url": "https://pypi.org/project/pybush/1.1.0/", "requires_dist": ["binarytree"], "requires_python": "", "summary": "python implementation of avl,bbst,bst and more", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pybush \ud83c\udf32</h1>\n<p><a href=\"https://badge.fury.io/py/pybush\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/19724bcec7b57c005c764a9abb8fac4eec7719a3/68747470733a2f2f62616467652e667572792e696f2f70792f7079627573682e737667\"></a>\n<a href=\"https://pypi.org/project/pybush/1.0.0/\" rel=\"nofollow\"><img alt=\"version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1753baeec1b8c853e38d79fdbfe48d4c05c2dc2a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64796e616d69632f6a736f6e3f636f6c6f723d6f72616e6765266c6162656c3d76657273696f6e267072656669783d762671756572793d76657273696f6e2675726c3d68747470732533412532462532467261772e67697468756275736572636f6e74656e742e636f6d2532466e696b68696c303336302532467079627573682532466d617374657225324673657475702e6a736f6e\"></a>\n<a href=\"https://www.python.org/downloads/\" rel=\"nofollow\"><img alt=\"python vesrion\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/64b32cf5404d06865d2060cc979ad9d9946b7caf/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64796e616d69632f6a736f6e3f636f6c6f723d626c7565266c6162656c3d507974686f6e2671756572793d707974686f6e762675726c3d68747470732533412532462532467261772e67697468756275736572636f6e74656e742e636f6d2532466e696b68696c303336302532467079627573682532466d617374657225324673657475702e6a736f6e\"></a>\n<a href=\"https://pypi.org/project/binarytree/\" rel=\"nofollow\"><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd543cd2ae51e526bfd4f9cd8659c0a1601c7041/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f64796e616d69632f6a736f6e3f636f6c6f723d666636396234266c6162656c3d446570656e64656e6379267072656669783d706970253230696e7374616c6c2532302671756572793d646570656e64656e63792675726c3d68747470732533412532462532467261772e67697468756275736572636f6e74656e742e636f6d2532466e696b68696c303336302532467079627573682532466d617374657225324673657475702e6a736f6e\"></a></p>\n<p>a python module (created by me \ud83d\ude09) to implement bst, bbst, avl trees and more in Python3+</p>\n<h3>Overview:</h3>\n<p><a href=\"https://pypi.org/project/binarytree/\" rel=\"nofollow\">binarytree</a> is a great module to implement trees in python. Since python doesn't support pointers;\nimplementing binary tree functions was a bit tricky, but no more \ud83d\ude01. <strong>pybush</strong> brings this functionality using binarytree module. Now you can do everything from creating a tree, printing the tree, implement avl, do rotations and other functions.</p>\n<p>binarytree has a pretty print functionality, which prints the tree in a visual way that we normally see while learning.</p>\n<pre><code>example: a level order bst [7,3,11,1,5,9,13,0,2,4,6,8,10,12,14] will look like this\n\n\n            ______7_______\n           /              \\\n        __3__           ___11___\n       /     \\         /        \\\n      1       5       9         _13\n     / \\     / \\     / \\       /   \\\n    0   2   4   6   8   10    12    14\n</code></pre>\n<p>binarytree do have a lot of functionalities, but pybush extends it...</p>\n<h2>Getting started</h2>\n<pre><code>$ pip3 install binarytree\n$ pip3 install pybush\n</code></pre>\n<p>pybush have the following Class to implement a Node:</p>\n<pre><code>class Node(Node):\n    def __init__(self, value):\n        self.value = value\n        self.right = None\n        self.left = None\n        self.parent = None\n        self.h = self.height\n        self.count = 1\n</code></pre>\n<h2>Funtions for BBST (Balance binary search tree)</h2>\n<ul>\n<li>create a bbst</li>\n</ul>\n<pre><code>&gt;&gt;&gt; values = [1,2,3,4,5,6,7,8]\n&gt;&gt;&gt; tree_root = create_bbst(values,0,len(values)-1)\n&gt;&gt;&gt; print(tree_root)\n\n    __4__\n   /     \\\n  2       6\n / \\     / \\\n1   3   5   7\n             \\\n              8\n</code></pre>\n<ul>\n<li>add a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; add(tree_root,6.5)\nNode(6.5)\n&gt;&gt;&gt; print(tree_root)\n\n    __4__\n   /     \\\n  2       6\n / \\     / \\\n1   3   5   7\n           / \\\n        6.5   8\n</code></pre>\n<ul>\n<li>delete a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; delete(tree_root,7)\n&gt;&gt;&gt; print(tree_root)\n\n    __4__\n   /     \\\n  2       6_\n / \\     /  \\\n1   3   5   6.5\n               \\\n                8\n</code></pre>\n<ul>\n<li>search for a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; search(tree_root,3)\nNode(3)\n</code></pre>\n<ul>\n<li>Predecessor and Successor</li>\n</ul>\n<pre><code>&gt;&gt;&gt; successor(tree_root,4)\nNode(5)\n&gt;&gt;&gt; predecessor(tree_root,6)\nNode(5)\n</code></pre>\n<ul>\n<li>least common ancestor</li>\n</ul>\n<pre><code>&gt;&gt;&gt; lca(tree_root,5,8)\nNode(6)\n&gt;&gt;&gt; print(tree_root)\n\n    __4__\n   /     \\\n  2       6_\n / \\     /  \\\n1   3   5   6.5\n               \\\n                8\n</code></pre>\n<ul>\n<li>rangecount and rangelist</li>\n</ul>\n<pre><code>&gt;&gt;&gt; rangecount(tree_root,1,5)\n5\n&gt;&gt;&gt; list = []\n&gt;&gt;&gt; rangelist(tree_root,1,5,list)\n&gt;&gt;&gt; list\n[Node(5), Node(4), Node(3), Node(2), Node(1)]\n</code></pre>\n<h2>Functions for AVL tree</h2>\n<ul>\n<li>create a avl tree</li>\n</ul>\n<pre><code>&gt;&gt;&gt; values = [1,2,3,4,5,6,7,8,9,10,11,12,13,14,15]\n&gt;&gt;&gt; tree_root = create_bbst(values,0,len(values)-1)\n</code></pre>\n<ul>\n<li>add a Node</li>\n</ul>\n<pre><code>\n&gt;&gt;&gt; print(tree_root)\n\n        ______8________\n       /               \\\n    __4__           ____12___\n   /     \\         /         \\\n  2       6       10         _14\n / \\     / \\     /  \\       /   \\\n1   3   5   7   9    11    13    15\n\n&gt;&gt;&gt; add_avl(tree_root,7.2)\n&gt;&gt;&gt; print(tree_root)\n\n        ______8________\n       /               \\\n    __4__           ____12___\n   /     \\         /         \\\n  2       6       10         _14\n / \\     / \\     /  \\       /   \\\n1   3   5   7   9    11    13    15\n             \\\n             7.2\n\n&gt;&gt;&gt; add_avl(tree_root,7.4)\n&gt;&gt;&gt; print(tree_root)\n\n        ______________8________\n       /                       \\\n    __4__                   ____12___\n   /     \\                 /         \\\n  2       6___            10         _14\n / \\     /    \\          /  \\       /   \\\n1   3   5     7.2_      9    11    13    15\n             /    \\\n            7     7.4\n\n# see the subtree rotated\n</code></pre>\n<ul>\n<li>delete a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; delete_avl(tree_root,12)\n&gt;&gt;&gt; print(tree_root)\n\n&gt;&gt;&gt; print(tree_root)\n\n        ______________8_____\n       /                    \\\n    __4__                   _11___\n   /     \\                 /      \\\n  2       6___            10      _14\n / \\     /    \\          /       /   \\\n1   3   5     7.2_      9       13    15\n             /    \\\n            7     7.4\n</code></pre>\n<ul>\n<li>search a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; search(tree_root,9)\nNode(9)\n</code></pre>\n<ul>\n<li>check whether a tree is a avl tree</li>\n</ul>\n<pre><code>&gt;&gt;&gt; is_avl(tree_root)\nTrue\n</code></pre>\n<ul>\n<li>find rank and rank of a Node</li>\n</ul>\n<pre><code>&gt;&gt;&gt; print(tree_root)\n\n        ______________8_____\n       /                    \\\n    __4__                   _11___\n   /     \\                 /      \\\n  2       6___            10      _14\n / \\     /    \\          /       /   \\\n1   3   5     7.2_      9       13    15\n             /    \\\n            7     7.4\n\n&gt;&gt;&gt; rank(tree_root,10)\n5\n&gt;&gt;&gt; find_rank(tree_root,5)\nNode(10)\n</code></pre>\n\n          </div>"}, "last_serial": 7168082, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "ebb34e06d6423c4d47b3107569c7d3de", "sha256": "26ae3856af7f60327d4cc83bee3b6566e679e2fbf5fe44f69f79da237b823a9a"}, "downloads": -1, "filename": "pybush-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ebb34e06d6423c4d47b3107569c7d3de", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5415, "upload_time": "2020-05-04T22:03:09", "upload_time_iso_8601": "2020-05-04T22:03:09.554996Z", "url": "https://files.pythonhosted.org/packages/95/60/4eb2839908a6fd7bd2c17ad1dce38450be83d88d7fce30d69856adf9a101/pybush-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8a37c9a7ab4a54ef00f6b5e92f42882b", "sha256": "88cf7c56566dc2d4f1f010075602f2baa5f7305a3d2ade38726d60ac8d1a98a9"}, "downloads": -1, "filename": "pybush-1.0.0.tar.gz", "has_sig": false, "md5_digest": "8a37c9a7ab4a54ef00f6b5e92f42882b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3312, "upload_time": "2020-05-03T14:13:29", "upload_time_iso_8601": "2020-05-03T14:13:29.523838Z", "url": "https://files.pythonhosted.org/packages/69/90/24ebd58b06c3501c08086f9a1b15a90f08c0d64bddf107237f4ca9ec1843/pybush-1.0.0.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "fe7af92fe60dfd64e30474368edb64c4", "sha256": "a2a656c574c6ffdf9441c6b35d6c0970788ea23925d762ab4a64bca96bd11f5f"}, "downloads": -1, "filename": "pybush-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe7af92fe60dfd64e30474368edb64c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5418, "upload_time": "2020-05-04T22:03:54", "upload_time_iso_8601": "2020-05-04T22:03:54.033918Z", "url": "https://files.pythonhosted.org/packages/7a/d4/9157ce7d6b4c374859d1aa4de5d7260fa3cb6354c7e786c399078ec53789/pybush-1.1.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fe7af92fe60dfd64e30474368edb64c4", "sha256": "a2a656c574c6ffdf9441c6b35d6c0970788ea23925d762ab4a64bca96bd11f5f"}, "downloads": -1, "filename": "pybush-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fe7af92fe60dfd64e30474368edb64c4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5418, "upload_time": "2020-05-04T22:03:54", "upload_time_iso_8601": "2020-05-04T22:03:54.033918Z", "url": "https://files.pythonhosted.org/packages/7a/d4/9157ce7d6b4c374859d1aa4de5d7260fa3cb6354c7e786c399078ec53789/pybush-1.1.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:54 2020"}