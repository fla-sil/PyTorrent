{"info": {"author": "Santiago Gabriel Romero", "author_email": "sromero@machinalis.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "Django i18n helper\n==================\n\nProvides a simple way to visualize translated strings in Django templates \nby wrapping translated content with custom HTML and CSS. Therefore and\nmost important, helps you to visualize untraslated strings too.\n\n\nHow does it work\n----------------\n\nDjango i18n helper is a common Django app that overriddes Django core functions\non load to provide the desired behavior.\n\nThe application will automatically detect when tests are being run and won't\noverride any methods in such a case to preserve tests integrity.\n\n\nInstallation\n------------\n\nGet it\n\n    pip install django-i18n-helper\n\nAfter, all you need to do is add \"i18n_helper\" to your installed apps and\nactivate the internationalization debug. In your settings.py, make sure to have:\n\n    INSTALLED_APPS = (\n            ...,\n            'i18n_helper'\n            )\n\nand\n\n    I18N_HELPER_DEBUG  = True\n\ndjango-i18n-helper provides a default behavior that consists in wrapping the\ntranslated content with an HTML div with the following properties:\n\n    <div class='i18n-helper' style='display: inline; background-color: #FAF9A7;'>Translated text</div>\n\nThis provides a soft highlight for translated strings, but this behavior can be\nmodified within settings.py.\n\n\nCustomization\n-------------\n\nSome configuration variables are provided in order to customize how you want the translated strings to be wrapped.\n\n#### I18N_HELPER_HTML\n\nDefines a whole HTML block for wrapping the translations. This string will be\nformatted (http://docs.python.org/library/stdtypes.html#str.format) with the\ntranslated text. Thus every occurrence of \"{0}\" will be replaced with the\ntranslation.\n\n    I18N_HELPER_HTML = \"<span class='highlight'>{0}</span>\"\n\nIf **I18N_HELPER_HTML** is not set, the code used will be\n\n    <div class='i18n-helper' style='display: inline; background-color: #FAF9A7;'>{0}</div> \n\n\n#### I18N_HELPER_CLASS\n\nDefines the class to use for the HTML div if **I18N_HELPER_HTML** is not used. Defaults to \"i18n-helper\".\n\n    I18N_HELPER_CLASS = \"my-custom-class\"\n\n\n#### I18N_HELPER_STYLE\n\nDefines the inline CSS for the HTML div if no **I18N_HELPER_HTML** or\n**I18N_HELPER_CLASS** have been set (case in which it's assumed that the css \nfor the class provides the desired style). Defaults to \"display: inline; background-color: #FAF9A7;\".\n\n    I18N_HELPER_CLASS = \"font-weight: bold; background-color: yellow;\"\n\n\nScreenshots\n-----------\n\nGraphical examples are sometimes the better way to understand how does something works or looks like. So here go two examples of how completely translated templates would look like, and two of how partially translated templates would.\n\nFully translated templates\n\n\n<img src='http://pictat.com/i/2012/8/27/16220screenshot.png'/>\n\n<img src='http://pictat.com/i/2012/8/22/11913traslated2.png'/>\n\nPartially translated templates. Note that it's also possible to see from the admin site which model fields haven't set the _verbose_name_ attribute to translate the field name.\n\n<img src='http://pictat.com/i/2012/8/22/23861untraslate.png'/>\n\n<img src='http://pictat.com/i/2012/8/22/21074untraslate.png'/>\n\n\nDisclaimer notes\n----------------\n\nThe application should **only** be used when \"debugging\" code translations, since it overrides the default Django HTML scaping mechanism and thus outputs unescaped (possibly undesired) code.\nBesides, there are some warnings you should be aware of:\n\n* You will see weird HTML within you buttons or inputs if you have things like &lt;input type=\"text\" value=\"{% trans \"Search\" %}\" ...&gt; Then the wrapping HTML of your translations will be shown _within_ the inputs or buttons. This will happen for sure in the admin site.\n\n* Set **I18N_HELPER_DEBUG** to False before syncing your database, otherwise you might see errors like \"value too long for type character varying(50)\".\n\n* Set **I18N_HELPER_DEBUG** to False before running your migrations, otherwise you might see errors like \"value too long for type character varying(50)\".\n\n* From version **0.1.1** this helper will only be enabled when running the **runserver** command, so you shouldn't need to worry about turning it off for doing syncdb, migrations, or anything.\n\n* Some capitalization might be lost\n\n\nTested with\n-----------\n\n* Django 1.3 / 1.4\n* Python 2.6.1 / 2.7.2\n\n\nContact\n-------\n\nAuthor: Santiago Gabriel Romero\n\nContact: sromero@machinalis.com", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/machinalis/django-i18n-helper", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "django-i18n-helper", "package_url": "https://pypi.org/project/django-i18n-helper/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-i18n-helper/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/machinalis/django-i18n-helper"}, "release_url": "https://pypi.org/project/django-i18n-helper/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "A internationalization helper that highlights translated strings", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Provides a simple way to visualize translated strings in Django templates\nby wrapping translated content with custom HTML and CSS. Therefore and\nmost important, helps you to visualize untraslated strings too.</p>\n<div id=\"how-does-it-work\">\n<h2>How does it work</h2>\n<p>Django i18n helper is a common Django app that overriddes Django core functions\non load to provide the desired behavior.</p>\n<p>The application will automatically detect when tests are being run and won\u2019t\noverride any methods in such a case to preserve tests integrity.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Get it</p>\n<blockquote>\npip install django-i18n-helper</blockquote>\n<p>After, all you need to do is add \u201ci18n_helper\u201d to your installed apps and\nactivate the internationalization debug. In your settings.py, make sure to have:</p>\n<blockquote>\n<dl>\n<dt>INSTALLED_APPS = (</dt>\n<dd>\u2026,\n\u2018i18n_helper\u2019\n)</dd>\n</dl>\n</blockquote>\n<p>and</p>\n<blockquote>\nI18N_HELPER_DEBUG  = True</blockquote>\n<p>django-i18n-helper provides a default behavior that consists in wrapping the\ntranslated content with an HTML div with the following properties:</p>\n<blockquote>\n&lt;div class=\u2019i18n-helper\u2019 style=\u2019display: inline; background-color: #FAF9A7;\u2019&gt;Translated text&lt;/div&gt;</blockquote>\n<p>This provides a soft highlight for translated strings, but this behavior can be\nmodified within settings.py.</p>\n</div>\n<div id=\"customization\">\n<h2>Customization</h2>\n<p>Some configuration variables are provided in order to customize how you want the translated strings to be wrapped.</p>\n<p>#### I18N_HELPER_HTML</p>\n<p>Defines a whole HTML block for wrapping the translations. This string will be\nformatted (<a href=\"http://docs.python.org/library/stdtypes.html#str.format\" rel=\"nofollow\">http://docs.python.org/library/stdtypes.html#str.format</a>) with the\ntranslated text. Thus every occurrence of \u201c{0}\u201d will be replaced with the\ntranslation.</p>\n<blockquote>\nI18N_HELPER_HTML = \u201c&lt;span class=\u2019highlight\u2019&gt;{0}&lt;/span&gt;\u201d</blockquote>\n<p>If <strong>I18N_HELPER_HTML</strong> is not set, the code used will be</p>\n<blockquote>\n&lt;div class=\u2019i18n-helper\u2019 style=\u2019display: inline; background-color: #FAF9A7;\u2019&gt;{0}&lt;/div&gt;</blockquote>\n<p>#### I18N_HELPER_CLASS</p>\n<p>Defines the class to use for the HTML div if <strong>I18N_HELPER_HTML</strong> is not used. Defaults to \u201ci18n-helper\u201d.</p>\n<blockquote>\nI18N_HELPER_CLASS = \u201cmy-custom-class\u201d</blockquote>\n<p>#### I18N_HELPER_STYLE</p>\n<p>Defines the inline CSS for the HTML div if no <strong>I18N_HELPER_HTML</strong> or\n<strong>I18N_HELPER_CLASS</strong> have been set (case in which it\u2019s assumed that the css\nfor the class provides the desired style). Defaults to \u201cdisplay: inline; background-color: #FAF9A7;\u201d.</p>\n<blockquote>\nI18N_HELPER_CLASS = \u201cfont-weight: bold; background-color: yellow;\u201d</blockquote>\n</div>\n<div id=\"screenshots\">\n<h2>Screenshots</h2>\n<p>Graphical examples are sometimes the better way to understand how does something works or looks like. So here go two examples of how completely translated templates would look like, and two of how partially translated templates would.</p>\n<p>Fully translated templates</p>\n<p>&lt;img src=\u2019<a href=\"http://pictat.com/i/2012/8/27/16220screenshot.png'/\" rel=\"nofollow\">http://pictat.com/i/2012/8/27/16220screenshot.png\u2019/</a>&gt;</p>\n<p>&lt;img src=\u2019<a href=\"http://pictat.com/i/2012/8/22/11913traslated2.png'/\" rel=\"nofollow\">http://pictat.com/i/2012/8/22/11913traslated2.png\u2019/</a>&gt;</p>\n<p>Partially translated templates. Note that it\u2019s also possible to see from the admin site which model fields haven\u2019t set the _verbose_name_ attribute to translate the field name.</p>\n<p>&lt;img src=\u2019<a href=\"http://pictat.com/i/2012/8/22/23861untraslate.png'/\" rel=\"nofollow\">http://pictat.com/i/2012/8/22/23861untraslate.png\u2019/</a>&gt;</p>\n<p>&lt;img src=\u2019<a href=\"http://pictat.com/i/2012/8/22/21074untraslate.png'/\" rel=\"nofollow\">http://pictat.com/i/2012/8/22/21074untraslate.png\u2019/</a>&gt;</p>\n</div>\n<div id=\"disclaimer-notes\">\n<h2>Disclaimer notes</h2>\n<p>The application should <strong>only</strong> be used when \u201cdebugging\u201d code translations, since it overrides the default Django HTML scaping mechanism and thus outputs unescaped (possibly undesired) code.\nBesides, there are some warnings you should be aware of:</p>\n<ul>\n<li>You will see weird HTML within you buttons or inputs if you have things like &amp;lt;input type=\u201dtext\u201d value=\u201d{% trans \u201cSearch\u201d %}\u201d \u2026&amp;gt; Then the wrapping HTML of your translations will be shown _within_ the inputs or buttons. This will happen for sure in the admin site.</li>\n<li>Set <strong>I18N_HELPER_DEBUG</strong> to False before syncing your database, otherwise you might see errors like \u201cvalue too long for type character varying(50)\u201d.</li>\n<li>Set <strong>I18N_HELPER_DEBUG</strong> to False before running your migrations, otherwise you might see errors like \u201cvalue too long for type character varying(50)\u201d.</li>\n<li>From version <strong>0.1.1</strong> this helper will only be enabled when running the <strong>runserver</strong> command, so you shouldn\u2019t need to worry about turning it off for doing syncdb, migrations, or anything.</li>\n<li>Some capitalization might be lost</li>\n</ul>\n</div>\n<div id=\"tested-with\">\n<h2>Tested with</h2>\n<ul>\n<li>Django 1.3 / 1.4</li>\n<li>Python 2.6.1 / 2.7.2</li>\n</ul>\n</div>\n<div id=\"contact\">\n<h2>Contact</h2>\n<p>Author: Santiago Gabriel Romero</p>\n<p>Contact: <a href=\"mailto:sromero%40machinalis.com\">sromero<span>@</span>machinalis<span>.</span>com</a></p>\n</div>\n\n          </div>"}, "last_serial": 789830, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d6cede33d29ae7af3cf9f01ccaf00f19", "sha256": "c3780c843633561bc947edaa1f77b57fa44166185595ff2428c5a74b4404fd81"}, "downloads": -1, "filename": "django-i18n-helper-0.1.tar.gz", "has_sig": false, "md5_digest": "d6cede33d29ae7af3cf9f01ccaf00f19", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6760, "upload_time": "2012-08-23T20:57:12", "upload_time_iso_8601": "2012-08-23T20:57:12.520810Z", "url": "https://files.pythonhosted.org/packages/f8/60/c608b8e57ce2c065d5ab8b2f69acd42357a2164bf0a52af1697268ea9263/django-i18n-helper-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6b5eab76264240b420baa86e8e68298e", "sha256": "a2c41e31e26120d49d5241789eb1b2fde0e8f528488fccea370893852c99f4fa"}, "downloads": -1, "filename": "django-i18n-helper-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6b5eab76264240b420baa86e8e68298e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6879, "upload_time": "2012-09-20T03:09:47", "upload_time_iso_8601": "2012-09-20T03:09:47.923756Z", "url": "https://files.pythonhosted.org/packages/11/fb/3820f573fa98670747ac80e2380d33c31a0dfbd8171d49f43f3e980fd8e9/django-i18n-helper-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6b5eab76264240b420baa86e8e68298e", "sha256": "a2c41e31e26120d49d5241789eb1b2fde0e8f528488fccea370893852c99f4fa"}, "downloads": -1, "filename": "django-i18n-helper-0.1.1.tar.gz", "has_sig": false, "md5_digest": "6b5eab76264240b420baa86e8e68298e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6879, "upload_time": "2012-09-20T03:09:47", "upload_time_iso_8601": "2012-09-20T03:09:47.923756Z", "url": "https://files.pythonhosted.org/packages/11/fb/3820f573fa98670747ac80e2380d33c31a0dfbd8171d49f43f3e980fd8e9/django-i18n-helper-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:40 2020"}