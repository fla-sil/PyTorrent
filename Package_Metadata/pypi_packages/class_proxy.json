{"info": {"author": "Viktor Hercinger", "author_email": "hercinger.viktor@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "==================================================\nclass_proxy - a transparent proxy class for Python\n==================================================\n\n.. image:: https://badge.fury.io/gh/herczy%2Fclass_proxy.svg\n    :target: https://badge.fury.io/gh/herczy%2Fclass_proxy\n\n.. image:: https://badge.fury.io/py/class_proxy.svg\n    :target: https://badge.fury.io/py/class_proxy\n\n.. image:: https://travis-ci.org/herczy/class_proxy.svg?branch=master\n    :target: https://travis-ci.org/herczy/class_proxy\n\nIntroduction\n============\n\n`class_proxy` can be used to create simple proxy objects for any value. The\nproxy can be any class.\n\nFor example, lets say that we have a parser and need to be able to tell where\na value came from (source file name, line number and column). We might have a\n`Source` class handling this information:\n\n.. code-block:: python\n\n  class Source(object):\n      def __init__(self, filename, line, column):\n          self.filename = filename\n          self.line = line\n          self.column = column\n\n      def __str__(self):\n          return \"file {}, line {}, column {}\".format(\n              self.filename, self.line, self.column\n          )\n\n      def __repr__(self):\n          return \"Source({!r}, {!r}, {!r})\".format(\n              self.filename, self.line, self.column\n         )\n\nIf we attach this source to some class we control, there is no problem. But\nwhat if we want to tell where an integer, string or any scalar, builtin came\nfrom?\n\nThe solution is to make a wrapper for the scalar classes:\n\n.. code-block:: python\n\n   import class_proxy\n\n   class SourceValue(object):\n       def __init__(self, source):\n           self.source = source\n\n       def __str__(self):\n           return \"{} (from {})\".format(\n               class_proxy.instance(self), self.source\n           )\n\n       def __repr__(self):\n           return \"SourceValue({!r}, {!r})\".format(\n               class_proxy.instance(self), self.source\n           )\n\n   IntProxy = class_proxy.wrap_with(int, SourceValue)\n   StrProxy = class_proxy.wrap_with(str, SourceValue)\n\n   number = IntProxy(123, Source('example', 1, 2))\n   print(number)  # will print: 1 (from file example, line 1, column 2)\n\n   string = StrProxy('hello', Source('example', 5, 7))\n   print(repr(number))  # will print: hello (from file example, line 5, column 7)\n\n   other_number = IntProxy(456, Source('example', 7, 8))\n   print(number < other_number)  # will print: True\n\nThe `class_proxy.instance` call will return the original, wrapped\ninstance for the proxy.\n\nThe `class_proxy.wrap_with` call will create a proxy class expecting the\nwrapped value as the first parameter, while the remaining parameters are passed\nto the `SourceValue` constructor.\n\nWhen retrieving attributes from the proxy class (e.g. `IntProxy`), it\nwill look up the proxy base class first (e.g. `SourceValue`) and later\nthe wrapped class (e.g. `int`). This is the reason we care about what\nclass we're wrapping: we want to be able to wrap the class too, not just\nthe instance.\n\nIn case we're looking up members from the instance, at first we will look it up\nfrom the instance of the proxy class, and then from the wrapped class.\n\nIf you don't care about class values, you can also omit the wrapped class:\n\n.. code-block:: python\n\n   GenericProxy = class_proxy.wrap_with(SourceValue)\n\n   generic = GenericProxy(SomeGenericClass(1, 2), Source('example', 10, 0))\n\nIn this case, we wrap the `object`.\n\nThere is also a convenience wrapper for the `wrap_with` function, in case\nyou don't need to define it for multiple wrapped classes:\n\n.. code-block:: python\n\n   import class_proxy\n\n   @class_proxy.proxy_of(int)\n   class IntProxy(object):\n       def clamp(self, minval, maxval):\n           if self < minval:\n               result = minval\n\n           elif self > maxval:\n               result = maxval\n\n           else:\n               result = class_proxy.instance(self)\n\n           return IntProxy(result)\n\n   value = IntProxy(50).clamp(-10, 10)\n   print(value)  # will print: 10\n\nThis also has a generic variant:\n\n.. code-block:: python\n\n   import class_proxy\n\n   @class_proxy.proxy\n   class Proxy(object):\n       def map(self, func):\n           return func(class_proxy.instance(self))\n\n   value = Proxy(100)\n   print(value.map(lambda val: -val))  # will print: -100\n\nInspiration\n===========\n\n`class_proxy` was heavily inspired by `zyga/padme`, an excellent tool for\ncreating proxy classes. However, `padme` has a few problems:\n\n* It generates a lot of logs, which can not only be annoying, but create odd\n  infinite recursions when trying to format the wrapped value for a log string.\n* The proxied special methods are written out manually, which seems like an\n  unneccessary thing.\n\nSo with these limitations I felt the need to write a similar tool that\naddresses the issues above.\n\n\n\n\nHistory\n=======\n\n1.1.0 (2019-03-18)\n------------------\n\n* Custom names can be specified for bound class proxies (by default,\n  it is in the format of <proxy class>[<wrapped class>]).\n\n1.0.1 (2019-03-10)\n------------------\n\n* Added caching for created proxies.\n\n1.0.0 (2019-03-09)\n------------------\n\n* Inspired by `zyga/padme`.\n* Written the basic code.\n* Added files to make it more 'project-y'.\n* Committed to `github.com`.\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/herczy/class_proxy", "keywords": "class_proxy proxy transparent", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "class_proxy", "package_url": "https://pypi.org/project/class_proxy/", "platform": "", "project_url": "https://pypi.org/project/class_proxy/", "project_urls": {"Homepage": "https://github.com/herczy/class_proxy"}, "release_url": "https://pypi.org/project/class_proxy/1.1.0/", "requires_dist": null, "requires_python": "", "summary": "class_proxy is a transparent proxy for Python", "version": "1.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/gh/herczy%2Fclass_proxy\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/gh/herczy%2Fclass_proxy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7665b6378eeb6a0399315d154027725a322db3da/68747470733a2f2f62616467652e667572792e696f2f67682f686572637a79253246636c6173735f70726f78792e737667\"></a>\n<a href=\"https://badge.fury.io/py/class_proxy\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/class_proxy.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c9d8c4463f27f0b94ecb9df055407a38b9d6118e/68747470733a2f2f62616467652e667572792e696f2f70792f636c6173735f70726f78792e737667\"></a>\n<a href=\"https://travis-ci.org/herczy/class_proxy\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/herczy/class_proxy.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33aa55e774c038e2ea556ad0b81f9b389af037bc/68747470733a2f2f7472617669732d63692e6f72672f686572637a792f636c6173735f70726f78792e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><cite>class_proxy</cite> can be used to create simple proxy objects for any value. The\nproxy can be any class.</p>\n<p>For example, lets say that we have a parser and need to be able to tell where\na value came from (source file name, line number and column). We might have a\n<cite>Source</cite> class handling this information:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Source</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"n\">column</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span> <span class=\"o\">=</span> <span class=\"n\">filename</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line</span> <span class=\"o\">=</span> <span class=\"n\">line</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">column</span> <span class=\"o\">=</span> <span class=\"n\">column</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"file </span><span class=\"si\">{}</span><span class=\"s2\">, line </span><span class=\"si\">{}</span><span class=\"s2\">, column </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">column</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"Source(</span><span class=\"si\">{!r}</span><span class=\"s2\">, </span><span class=\"si\">{!r}</span><span class=\"s2\">, </span><span class=\"si\">{!r}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">filename</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">line</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">column</span>\n       <span class=\"p\">)</span>\n</pre>\n<p>If we attach this source to some class we control, there is no problem. But\nwhat if we want to tell where an integer, string or any scalar, builtin came\nfrom?</p>\n<p>The solution is to make a wrapper for the scalar classes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">class_proxy</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">SourceValue</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">source</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span> <span class=\"o\">=</span> <span class=\"n\">source</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\"> (from </span><span class=\"si\">{}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span>\n        <span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__repr__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"s2\">\"SourceValue(</span><span class=\"si\">{!r}</span><span class=\"s2\">, </span><span class=\"si\">{!r}</span><span class=\"s2\">)\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">source</span>\n        <span class=\"p\">)</span>\n\n<span class=\"n\">IntProxy</span> <span class=\"o\">=</span> <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">wrap_with</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">SourceValue</span><span class=\"p\">)</span>\n<span class=\"n\">StrProxy</span> <span class=\"o\">=</span> <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">wrap_with</span><span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">SourceValue</span><span class=\"p\">)</span>\n\n<span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"n\">IntProxy</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">,</span> <span class=\"n\">Source</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">)</span>  <span class=\"c1\"># will print: 1 (from file example, line 1, column 2)</span>\n\n<span class=\"n\">string</span> <span class=\"o\">=</span> <span class=\"n\">StrProxy</span><span class=\"p\">(</span><span class=\"s1\">'hello'</span><span class=\"p\">,</span> <span class=\"n\">Source</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">repr</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">))</span>  <span class=\"c1\"># will print: hello (from file example, line 5, column 7)</span>\n\n<span class=\"n\">other_number</span> <span class=\"o\">=</span> <span class=\"n\">IntProxy</span><span class=\"p\">(</span><span class=\"mi\">456</span><span class=\"p\">,</span> <span class=\"n\">Source</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">number</span> <span class=\"o\">&lt;</span> <span class=\"n\">other_number</span><span class=\"p\">)</span>  <span class=\"c1\"># will print: True</span>\n</pre>\n<p>The <cite>class_proxy.instance</cite> call will return the original, wrapped\ninstance for the proxy.</p>\n<p>The <cite>class_proxy.wrap_with</cite> call will create a proxy class expecting the\nwrapped value as the first parameter, while the remaining parameters are passed\nto the <cite>SourceValue</cite> constructor.</p>\n<p>When retrieving attributes from the proxy class (e.g. <cite>IntProxy</cite>), it\nwill look up the proxy base class first (e.g. <cite>SourceValue</cite>) and later\nthe wrapped class (e.g. <cite>int</cite>). This is the reason we care about what\nclass we\u2019re wrapping: we want to be able to wrap the class too, not just\nthe instance.</p>\n<p>In case we\u2019re looking up members from the instance, at first we will look it up\nfrom the instance of the proxy class, and then from the wrapped class.</p>\n<p>If you don\u2019t care about class values, you can also omit the wrapped class:</p>\n<pre><span class=\"n\">GenericProxy</span> <span class=\"o\">=</span> <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">wrap_with</span><span class=\"p\">(</span><span class=\"n\">SourceValue</span><span class=\"p\">)</span>\n\n<span class=\"n\">generic</span> <span class=\"o\">=</span> <span class=\"n\">GenericProxy</span><span class=\"p\">(</span><span class=\"n\">SomeGenericClass</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">Source</span><span class=\"p\">(</span><span class=\"s1\">'example'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">))</span>\n</pre>\n<p>In this case, we wrap the <cite>object</cite>.</p>\n<p>There is also a convenience wrapper for the <cite>wrap_with</cite> function, in case\nyou don\u2019t need to define it for multiple wrapped classes:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">class_proxy</span>\n\n<span class=\"nd\">@class_proxy</span><span class=\"o\">.</span><span class=\"n\">proxy_of</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">IntProxy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">clamp</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">minval</span><span class=\"p\">,</span> <span class=\"n\">maxval</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span> <span class=\"o\">&lt;</span> <span class=\"n\">minval</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">minval</span>\n\n        <span class=\"k\">elif</span> <span class=\"bp\">self</span> <span class=\"o\">&gt;</span> <span class=\"n\">maxval</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">maxval</span>\n\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">IntProxy</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"p\">)</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">IntProxy</span><span class=\"p\">(</span><span class=\"mi\">50</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">clamp</span><span class=\"p\">(</span><span class=\"o\">-</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">)</span>  <span class=\"c1\"># will print: 10</span>\n</pre>\n<p>This also has a generic variant:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">class_proxy</span>\n\n<span class=\"nd\">@class_proxy</span><span class=\"o\">.</span><span class=\"n\">proxy</span>\n<span class=\"k\">class</span> <span class=\"nc\">Proxy</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">map</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">func</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">func</span><span class=\"p\">(</span><span class=\"n\">class_proxy</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">))</span>\n\n<span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">Proxy</span><span class=\"p\">(</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">val</span><span class=\"p\">:</span> <span class=\"o\">-</span><span class=\"n\">val</span><span class=\"p\">))</span>  <span class=\"c1\"># will print: -100</span>\n</pre>\n</div>\n<div id=\"inspiration\">\n<h2>Inspiration</h2>\n<p><cite>class_proxy</cite> was heavily inspired by <cite>zyga/padme</cite>, an excellent tool for\ncreating proxy classes. However, <cite>padme</cite> has a few problems:</p>\n<ul>\n<li>It generates a lot of logs, which can not only be annoying, but create odd\ninfinite recursions when trying to format the wrapped value for a log string.</li>\n<li>The proxied special methods are written out manually, which seems like an\nunneccessary thing.</li>\n</ul>\n<p>So with these limitations I felt the need to write a similar tool that\naddresses the issues above.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>1.1.0 (2019-03-18)</h3>\n<ul>\n<li>Custom names can be specified for bound class proxies (by default,\nit is in the format of &lt;proxy class&gt;[&lt;wrapped class&gt;]).</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>1.0.1 (2019-03-10)</h3>\n<ul>\n<li>Added caching for created proxies.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.0.0 (2019-03-09)</h3>\n<ul>\n<li>Inspired by <cite>zyga/padme</cite>.</li>\n<li>Written the basic code.</li>\n<li>Added files to make it more \u2018project-y\u2019.</li>\n<li>Committed to <cite>github.com</cite>.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4955173, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "28beae0c5d308391efca23e36e19d430", "sha256": "7f39ec79611dcb2e701bdc68b8cc28f01c201e155260069f3ed2ac007aff531b"}, "downloads": -1, "filename": "class_proxy-1.0.0.tar.gz", "has_sig": false, "md5_digest": "28beae0c5d308391efca23e36e19d430", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6260, "upload_time": "2019-03-09T13:08:25", "upload_time_iso_8601": "2019-03-09T13:08:25.000223Z", "url": "https://files.pythonhosted.org/packages/3d/1e/3fc4441045b75a3bbc5330c7b0e130aa184d59f7cc8dbf6b4ccaa8d0d919/class_proxy-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2a367efbb475358ed723fb05dd6a3d6d", "sha256": "6a9d575f4c8be4757e860f20337fce575acae887638ea00061099ad0f39ae572"}, "downloads": -1, "filename": "class_proxy-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2a367efbb475358ed723fb05dd6a3d6d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6442, "upload_time": "2019-03-10T10:53:53", "upload_time_iso_8601": "2019-03-10T10:53:53.676123Z", "url": "https://files.pythonhosted.org/packages/a2/24/e819c8b982cb35ab7fcaca8ce24e67d1e819cf1a31e505cc44e45b0efe6a/class_proxy-1.0.1.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "04e6eb0182206592ea3ee4505edd7ec6", "sha256": "fbd3e5be28f8411d8148cbaf8961c7a296043dab9498ab89a83dcbb3940e6f6e"}, "downloads": -1, "filename": "class_proxy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "04e6eb0182206592ea3ee4505edd7ec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6593, "upload_time": "2019-03-18T17:39:32", "upload_time_iso_8601": "2019-03-18T17:39:32.099241Z", "url": "https://files.pythonhosted.org/packages/1a/fc/0cb8eddc0e7c9e076a91a8ffb2a0d68a11ea2b3a12cb7d004ac9e7f65ecc/class_proxy-1.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "04e6eb0182206592ea3ee4505edd7ec6", "sha256": "fbd3e5be28f8411d8148cbaf8961c7a296043dab9498ab89a83dcbb3940e6f6e"}, "downloads": -1, "filename": "class_proxy-1.1.0.tar.gz", "has_sig": false, "md5_digest": "04e6eb0182206592ea3ee4505edd7ec6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6593, "upload_time": "2019-03-18T17:39:32", "upload_time_iso_8601": "2019-03-18T17:39:32.099241Z", "url": "https://files.pythonhosted.org/packages/1a/fc/0cb8eddc0e7c9e076a91a8ffb2a0d68a11ea2b3a12cb7d004ac9e7f65ecc/class_proxy-1.1.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:08 2020"}