{"info": {"author": "Kaleb McKinney", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# blueshift\n\nQuickly create large amounts of unique serial numbers.  \nForked from [JosephTLyons/andromeda](https://github.com/JosephTLyons/andromeda)\n\n## Installation\n\nInstall blueshift with pip: \n```pip install blueshift```\n\nOr, download blueshift [here](https://github.com/mckkaleb/blueshift/archive/0.0.2.tar.gz)\n\n## Usage\n\nTo use blueshift in your projects, import it like this:\n```python\nfrom blueshift import generate, get_serials #or just 'import blueshift'\n```\n\n## Creating Unique Serial Numbers\n\nUsing blueshift is very easy and simple. There are only two functions you need to know to start using blueshift. These functions are:\n- `generate()`\n- `get_serials()`\n\n#### Using generate\n\nUsing `generate()` is very simple.\n\nSimply call the `generate()` function\n```python\n#your code\ngenerate(10, 10) # generate() has two mandatory parameters: number_of_serials, length_of_serials\n#more of your code\n```\n`generate()` takes two mandatory parameters, `number_of_serials` (the number of serials you want to generate) and `length_of_serials` (how many characters you want each to contain), as well as some optional parameters which control which types of character that the serials will contain. The optional parameters are:\n- `use_numbers` controls if there will be numbers in the serials\n- `use_lowercase` controls if there will be lowercase letters in the serials\n- `use_uppercase` controls if there will be uppercase letters in the serials\n- `use_symbols` controls if there will be symbols in the serials\n\nFor example, if you wanted to have serials that do not contain symbols, then you would call the `generate()` function like this:\n```python\ngenerate(10, 10, use_symbols=False)\n```\nIn this example, 10 serials which contained 10 characters would be produced.\n\n#### Using get_serials\n\n`get_serials()` takes no parameters. It only returns the serials created by `generate()`\n\nExample:\n```python \ngenerate(10, 10)\nget_serials()\n```\nIn this example, `generate()` was called to create 10 serials with 10 characters in them. Then `get_serials()` was called to return the serials in an array.\n\n## Pitfalls to be Aware of\n\nbluehift does not care if you choose settings that result in a very low pool of\nlicense combinations.  You should be aware of this.  If you run `generate()`\nwith the following options:\n\n```python\ngenerate(1000, 4, use_uppercase=False, use_lowercase=False, use_symbols=False)\n```\n\nthe output will be:\n\n```python\n['9444', '9474','9494','9464','9484','9434','9424','9404','9414','9454','9244','9274','9294','9264','9284',\n'9234', ...]\n```\n\nNotice that the licenses are fairly similar.  Also, note that it would be fairly\neasy to guess a serial number.  The probability that a random guess would be an\nactual serial number is `1000/(10^4) = 0.1`.  It is up to the user to understand\nthis and adjust the settings to increase the complexity of the output and\ndecrease the chances of guessing a license number.  Using the example from\nearlier with `1000` serial numbers of length `20` using all symbols, the\nprobability that a random guess would be an actual serial number is\n`1000/(62^20) = 1.4196007e-33`.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/mckkaleb/blueshift/archive/1.0.0.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mckkaleb/blueshift", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "blueshift", "package_url": "https://pypi.org/project/blueshift/", "platform": "", "project_url": "https://pypi.org/project/blueshift/", "project_urls": {"Download": "https://github.com/mckkaleb/blueshift/archive/1.0.0.tar.gz", "Homepage": "https://github.com/mckkaleb/blueshift"}, "release_url": "https://pypi.org/project/blueshift/1.0.0/", "requires_dist": null, "requires_python": ">=3.4", "summary": "Quickly create large amounts of unique serial numbers.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>blueshift</h1>\n<p>Quickly create large amounts of unique serial numbers.<br>\nForked from <a href=\"https://github.com/JosephTLyons/andromeda\" rel=\"nofollow\">JosephTLyons/andromeda</a></p>\n<h2>Installation</h2>\n<p>Install blueshift with pip:\n<code>pip install blueshift</code></p>\n<p>Or, download blueshift <a href=\"https://github.com/mckkaleb/blueshift/archive/0.0.2.tar.gz\" rel=\"nofollow\">here</a></p>\n<h2>Usage</h2>\n<p>To use blueshift in your projects, import it like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">blueshift</span> <span class=\"kn\">import</span> <span class=\"n\">generate</span><span class=\"p\">,</span> <span class=\"n\">get_serials</span> <span class=\"c1\">#or just 'import blueshift'</span>\n</pre>\n<h2>Creating Unique Serial Numbers</h2>\n<p>Using blueshift is very easy and simple. There are only two functions you need to know to start using blueshift. These functions are:</p>\n<ul>\n<li><code>generate()</code></li>\n<li><code>get_serials()</code></li>\n</ul>\n<h4>Using generate</h4>\n<p>Using <code>generate()</code> is very simple.</p>\n<p>Simply call the <code>generate()</code> function</p>\n<pre><span class=\"c1\">#your code</span>\n<span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># generate() has two mandatory parameters: number_of_serials, length_of_serials</span>\n<span class=\"c1\">#more of your code</span>\n</pre>\n<p><code>generate()</code> takes two mandatory parameters, <code>number_of_serials</code> (the number of serials you want to generate) and <code>length_of_serials</code> (how many characters you want each to contain), as well as some optional parameters which control which types of character that the serials will contain. The optional parameters are:</p>\n<ul>\n<li><code>use_numbers</code> controls if there will be numbers in the serials</li>\n<li><code>use_lowercase</code> controls if there will be lowercase letters in the serials</li>\n<li><code>use_uppercase</code> controls if there will be uppercase letters in the serials</li>\n<li><code>use_symbols</code> controls if there will be symbols in the serials</li>\n</ul>\n<p>For example, if you wanted to have serials that do not contain symbols, then you would call the <code>generate()</code> function like this:</p>\n<pre><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">use_symbols</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>In this example, 10 serials which contained 10 characters would be produced.</p>\n<h4>Using get_serials</h4>\n<p><code>get_serials()</code> takes no parameters. It only returns the serials created by <code>generate()</code></p>\n<p>Example:</p>\n<pre><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n<span class=\"n\">get_serials</span><span class=\"p\">()</span>\n</pre>\n<p>In this example, <code>generate()</code> was called to create 10 serials with 10 characters in them. Then <code>get_serials()</code> was called to return the serials in an array.</p>\n<h2>Pitfalls to be Aware of</h2>\n<p>bluehift does not care if you choose settings that result in a very low pool of\nlicense combinations.  You should be aware of this.  If you run <code>generate()</code>\nwith the following options:</p>\n<pre><span class=\"n\">generate</span><span class=\"p\">(</span><span class=\"mi\">1000</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">use_uppercase</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_lowercase</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">use_symbols</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>the output will be:</p>\n<pre><span class=\"p\">[</span><span class=\"s1\">'9444'</span><span class=\"p\">,</span> <span class=\"s1\">'9474'</span><span class=\"p\">,</span><span class=\"s1\">'9494'</span><span class=\"p\">,</span><span class=\"s1\">'9464'</span><span class=\"p\">,</span><span class=\"s1\">'9484'</span><span class=\"p\">,</span><span class=\"s1\">'9434'</span><span class=\"p\">,</span><span class=\"s1\">'9424'</span><span class=\"p\">,</span><span class=\"s1\">'9404'</span><span class=\"p\">,</span><span class=\"s1\">'9414'</span><span class=\"p\">,</span><span class=\"s1\">'9454'</span><span class=\"p\">,</span><span class=\"s1\">'9244'</span><span class=\"p\">,</span><span class=\"s1\">'9274'</span><span class=\"p\">,</span><span class=\"s1\">'9294'</span><span class=\"p\">,</span><span class=\"s1\">'9264'</span><span class=\"p\">,</span><span class=\"s1\">'9284'</span><span class=\"p\">,</span>\n<span class=\"s1\">'9234'</span><span class=\"p\">,</span> <span class=\"o\">...</span><span class=\"p\">]</span>\n</pre>\n<p>Notice that the licenses are fairly similar.  Also, note that it would be fairly\neasy to guess a serial number.  The probability that a random guess would be an\nactual serial number is <code>1000/(10^4) = 0.1</code>.  It is up to the user to understand\nthis and adjust the settings to increase the complexity of the output and\ndecrease the chances of guessing a license number.  Using the example from\nearlier with <code>1000</code> serial numbers of length <code>20</code> using all symbols, the\nprobability that a random guess would be an actual serial number is\n<code>1000/(62^20) = 1.4196007e-33</code>.</p>\n\n          </div>"}, "last_serial": 5997676, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "40014c13ca6c5f7526953e164f424f4a", "sha256": "1fc4177c1f93a215e03bf5d288c1c13fec46d5d179d53126c39ddf93d66f9007"}, "downloads": -1, "filename": "blueshift-0.0.1.tar.gz", "has_sig": false, "md5_digest": "40014c13ca6c5f7526953e164f424f4a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 4513, "upload_time": "2019-10-06T13:23:20", "upload_time_iso_8601": "2019-10-06T13:23:20.056667Z", "url": "https://files.pythonhosted.org/packages/41/1a/ff82578afde5b1b47c6d3614667ed3762705e4494ee15cc30957e456d23c/blueshift-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "447bd978c91ea03d927a255da1306e2c", "sha256": "77246473740a8cbf41845bc0bc2f1834bce796eed4e7641f22618ef9867238c8"}, "downloads": -1, "filename": "blueshift-0.0.2.tar.gz", "has_sig": false, "md5_digest": "447bd978c91ea03d927a255da1306e2c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 3229, "upload_time": "2019-10-14T22:12:14", "upload_time_iso_8601": "2019-10-14T22:12:14.570786Z", "url": "https://files.pythonhosted.org/packages/c2/b6/b6c24e17f13b8793fede63ffdb0b12dbb585d381133c6ae978d400f3eb95/blueshift-0.0.2.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "05eb95421e026208149b84770685bdcf", "sha256": "c64fe8161757915275967f52bdfc869ea84faa8ba5c379872f619d8afcb270db"}, "downloads": -1, "filename": "blueshift-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05eb95421e026208149b84770685bdcf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 3180, "upload_time": "2019-10-18T21:40:39", "upload_time_iso_8601": "2019-10-18T21:40:39.004050Z", "url": "https://files.pythonhosted.org/packages/38/a2/e26d407975d883d02bcb9082a99fa1f3b2e4d6b2bf8653dbd69f6e46a296/blueshift-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "05eb95421e026208149b84770685bdcf", "sha256": "c64fe8161757915275967f52bdfc869ea84faa8ba5c379872f619d8afcb270db"}, "downloads": -1, "filename": "blueshift-1.0.0.tar.gz", "has_sig": false, "md5_digest": "05eb95421e026208149b84770685bdcf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.4", "size": 3180, "upload_time": "2019-10-18T21:40:39", "upload_time_iso_8601": "2019-10-18T21:40:39.004050Z", "url": "https://files.pythonhosted.org/packages/38/a2/e26d407975d883d02bcb9082a99fa1f3b2e4d6b2bf8653dbd69f6e46a296/blueshift-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:57 2020"}