{"info": {"author": "Rahul Sharma", "author_email": "rahulsrma26@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development :: Code Generators", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Software Development :: Testing :: Unit"], "description": "Code Faster\n===========\n\nCross-platform command line utility for bootstrapping online codes (especially codeforces) and running with automatic testing.\n\n\n## Index\n\n*\t[Uses](#uses)\n*\t[Example](#example)\n*   [Installing](#installing)\n*   [Setting up with VSCode](#setup)\n\n---\n\n[](#uses)\n## Uses\n\nThis package installs two commands:\n\n* **cfetch**\n\n    This will fetches the code from given url.\n    ```sh\n    cfetch <code-url> [language|sample-dir]\n    ```\n    Where language can be one of:\n\n    * cpp (default)\n    * java\n    * py\n\n    If sample-dir is provided instead of language then it'll copy the contents of your sample dir into the created one. Using this you can use your own template for any language whatsoever. However, runner will still work only on supported languages.\n\n    example:\n    ```sh\n    cfetch http://codeforces.com/problemset/problem/1/A cpp\n    ```\n    This will create a folder named CF1-A in the current directory with sample test cases and main.cpp file.\n\n* **crun**\n    This will run the file and if there are test cases present in the file's directory it will run them too.\n    ```sh\n    crun <file-path> [args]\n    ```\n    Where args are compiler args for compiled languages like c++ and java.\n\n    example:\n    ```sh\n    crun CF1-A\\main.cpp\n    ```\n    This will create a folder for binaries in the file's directory with the output of sample tests. It will also generates the test report.\n\n---\n\n[](#example)\n## Example\n\nFirst we will fetch a problem from [codeforces.com](http://codeforces.com/problemset/problem/1/A)\n\n```sh\n> cfetch http://codeforces.com/problemset/problem/1/A cpp\nCF1-A created\ntest_1 created\nmain.cpp created\n```\n\nNow we will try to run it with out sample generated code.\n\n```sh\n> crun CF1-A\\main.cpp\ng++  -o CF1-A\\bin\\main.exe CF1-A\\main.cpp\n========================================\ntest_1 FAILED\n---------------------------------------- [output]\n6\n---------------------------------------- [answer]\n4\n========================================\n:( 0/1 passed.\n```\n\nNow fix the main.cpp file to solve the problem.\n```cpp\nint main() {\n    using namespace std;\n\n    ios_base::sync_with_stdio(false);\n    cin.tie(0);\n\n    int n, m, a;\n    cin >> n >> m >> a;\n\n    int r = ((n + a - 1) / a) * ((m + a - 1) / a);\n    cout << r << '\\n';\n}\n```\n\n```sh\n> crun CF1-A\\main.cpp\ng++  -o CF1-A\\bin\\main.exe CF1-A\\main.cpp\n========================================\ntest_1 PASSED\n========================================\n:) 1/1 passed.\n```\n\n---\n\n[](#installing)\n## Installing\n\nYou can install from [pypi](https://pypi.org/project/code-faster/).\n```sh\npip install code-faster -U\n```\n\nOr, you can install directly from the repository using pip.\n```sh\npip install git+https://github.com/rahulsrma26/code_faster\n```\n\n---\n\n[](#setup)\n## Setting up with VSCode\n\nYou can set keyboard shortcuts to any editor basically. There are plenty of extensions in VSCode that can do that but for demonstration we will be using [Code Runner](https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner)\n\nFor code-runner, edit `settings.json` file in `.vscode` folder.\n```json\n{\n    \"code-runner.fileDirectoryAsCwd\": true,\n    \"code-runner.runInTerminal\": true,\n    \"code-runner.saveFileBeforeRun\": true,\n    \"code-runner.executorMap\": {\n        \"cpp\": \"crun $fileName\",\n        \"java\": \"crun $fileName\",\n        \"python\": \"crun $fileName\"\n    }\n}\n```\n\nNow to run a file just open it and press\n<kbd>control</kbd>+<kbd>option</kbd>+<kbd>n</kbd> (on mac)\nor <kbd>control</kbd>+<kbd>alt</kbd>+<kbd>n</kbd> (on pc).\n\nNote: If you are using `conda` environments and if it's not added to the path environments (or bash). Then `crun` may be unaccessible in the terminal by default. So, you either need to activate it in the terminal, or you need to update the shell args.\n\n```json\n\"terminal.integrated.shellArgs.windows\": [\"/K\", \"<conda-install-path>/Scripts/activate && conda activate <your-env>\"]\n```\nFor linux you can change `terminal.integrated.shellArgs.linux` and for mac change `terminal.integrated.shellArgs.osx`\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rahulsrma26/code_faster", "keywords": "codeforces runner setuptools development", "license": "LICENSE", "maintainer": "rahulsrma26", "maintainer_email": "welcometors@gmail.com", "name": "code-faster", "package_url": "https://pypi.org/project/code-faster/", "platform": "", "project_url": "https://pypi.org/project/code-faster/", "project_urls": {"Code": "https://github.com/rahulsrma26/code_faster", "Homepage": "https://github.com/rahulsrma26/code_faster"}, "release_url": "https://pypi.org/project/code-faster/0.2.0/", "requires_dist": ["requests", "beautifulsoup4", "colorama", "check-manifestpytest ; extra == 'dev'", "coverage ; extra == 'dev'", "tox ; extra == 'dev'"], "requires_python": ">=3.6", "summary": "A cross-platform command line utility for bootstrapping and running code with tests", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Code Faster</h1>\n<p>Cross-platform command line utility for bootstrapping online codes (especially codeforces) and running with automatic testing.</p>\n<h2>Index</h2>\n<ul>\n<li><a href=\"#uses\" rel=\"nofollow\">Uses</a></li>\n<li><a href=\"#example\" rel=\"nofollow\">Example</a></li>\n<li><a href=\"#installing\" rel=\"nofollow\">Installing</a></li>\n<li><a href=\"#setup\" rel=\"nofollow\">Setting up with VSCode</a></li>\n</ul>\n<hr>\n<p><a href=\"#uses\" rel=\"nofollow\"></a></p>\n<h2>Uses</h2>\n<p>This package installs two commands:</p>\n<ul>\n<li>\n<p><strong>cfetch</strong></p>\n<p>This will fetches the code from given url.</p>\n<pre>cfetch &lt;code-url&gt; <span class=\"o\">[</span>language<span class=\"p\">|</span>sample-dir<span class=\"o\">]</span>\n</pre>\n<p>Where language can be one of:</p>\n<ul>\n<li>cpp (default)</li>\n<li>java</li>\n<li>py</li>\n</ul>\n<p>If sample-dir is provided instead of language then it'll copy the contents of your sample dir into the created one. Using this you can use your own template for any language whatsoever. However, runner will still work only on supported languages.</p>\n<p>example:</p>\n<pre>cfetch http://codeforces.com/problemset/problem/1/A cpp\n</pre>\n<p>This will create a folder named CF1-A in the current directory with sample test cases and main.cpp file.</p>\n</li>\n<li>\n<p><strong>crun</strong>\nThis will run the file and if there are test cases present in the file's directory it will run them too.</p>\n<pre>crun &lt;file-path&gt; <span class=\"o\">[</span>args<span class=\"o\">]</span>\n</pre>\n<p>Where args are compiler args for compiled languages like c++ and java.</p>\n<p>example:</p>\n<pre>crun CF1-A<span class=\"se\">\\m</span>ain.cpp\n</pre>\n<p>This will create a folder for binaries in the file's directory with the output of sample tests. It will also generates the test report.</p>\n</li>\n</ul>\n<hr>\n<p><a href=\"#example\" rel=\"nofollow\"></a></p>\n<h2>Example</h2>\n<p>First we will fetch a problem from <a href=\"http://codeforces.com/problemset/problem/1/A\" rel=\"nofollow\">codeforces.com</a></p>\n<pre>&gt; cfetch http://codeforces.com/problemset/problem/1/A cpp\nCF1-A created\ntest_1 created\nmain.cpp created\n</pre>\n<p>Now we will try to run it with out sample generated code.</p>\n<pre>&gt; crun CF1-A<span class=\"se\">\\m</span>ain.cpp\ng++  -o CF1-A<span class=\"se\">\\b</span>in<span class=\"se\">\\m</span>ain.exe CF1-A<span class=\"se\">\\m</span>ain.cpp\n<span class=\"o\">========================================</span>\ntest_1 FAILED\n---------------------------------------- <span class=\"o\">[</span>output<span class=\"o\">]</span>\n<span class=\"m\">6</span>\n---------------------------------------- <span class=\"o\">[</span>answer<span class=\"o\">]</span>\n<span class=\"nv\">4</span>\n<span class=\"o\">========================================</span>\n:<span class=\"o\">(</span> <span class=\"m\">0</span>/1 passed.\n</pre>\n<p>Now fix the main.cpp file to solve the problem.</p>\n<pre><span class=\"kt\">int</span> <span class=\"nf\">main</span><span class=\"p\">()</span> <span class=\"p\">{</span>\n    <span class=\"k\">using</span> <span class=\"k\">namespace</span> <span class=\"n\">std</span><span class=\"p\">;</span>\n\n    <span class=\"n\">ios_base</span><span class=\"o\">::</span><span class=\"n\">sync_with_stdio</span><span class=\"p\">(</span><span class=\"nb\">false</span><span class=\"p\">);</span>\n    <span class=\"n\">cin</span><span class=\"p\">.</span><span class=\"n\">tie</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">);</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n    <span class=\"n\">cin</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">n</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">m</span> <span class=\"o\">&gt;&gt;</span> <span class=\"n\">a</span><span class=\"p\">;</span>\n\n    <span class=\"kt\">int</span> <span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"p\">((</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">a</span><span class=\"p\">)</span> <span class=\"o\">*</span> <span class=\"p\">((</span><span class=\"n\">m</span> <span class=\"o\">+</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">/</span> <span class=\"n\">a</span><span class=\"p\">);</span>\n    <span class=\"n\">cout</span> <span class=\"o\">&lt;&lt;</span> <span class=\"n\">r</span> <span class=\"o\">&lt;&lt;</span> <span class=\"sc\">'\\n'</span><span class=\"p\">;</span>\n<span class=\"p\">}</span>\n</pre>\n<pre>&gt; crun CF1-A<span class=\"se\">\\m</span>ain.cpp\ng++  -o CF1-A<span class=\"se\">\\b</span>in<span class=\"se\">\\m</span>ain.exe CF1-A<span class=\"se\">\\m</span>ain.cpp\n<span class=\"o\">========================================</span>\ntest_1 <span class=\"nv\">PASSED</span>\n<span class=\"o\">========================================</span>\n:<span class=\"o\">)</span> <span class=\"m\">1</span>/1 passed.\n</pre>\n<hr>\n<p><a href=\"#installing\" rel=\"nofollow\"></a></p>\n<h2>Installing</h2>\n<p>You can install from <a href=\"https://pypi.org/project/code-faster/\" rel=\"nofollow\">pypi</a>.</p>\n<pre>pip install code-faster -U\n</pre>\n<p>Or, you can install directly from the repository using pip.</p>\n<pre>pip install git+https://github.com/rahulsrma26/code_faster\n</pre>\n<hr>\n<p><a href=\"#setup\" rel=\"nofollow\"></a></p>\n<h2>Setting up with VSCode</h2>\n<p>You can set keyboard shortcuts to any editor basically. There are plenty of extensions in VSCode that can do that but for demonstration we will be using <a href=\"https://marketplace.visualstudio.com/items?itemName=formulahendry.code-runner\" rel=\"nofollow\">Code Runner</a></p>\n<p>For code-runner, edit <code>settings.json</code> file in <code>.vscode</code> folder.</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"code-runner.fileDirectoryAsCwd\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"code-runner.runInTerminal\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"code-runner.saveFileBeforeRun\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"code-runner.executorMap\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"cpp\"</span><span class=\"p\">:</span> <span class=\"s2\">\"crun $fileName\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"java\"</span><span class=\"p\">:</span> <span class=\"s2\">\"crun $fileName\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"python\"</span><span class=\"p\">:</span> <span class=\"s2\">\"crun $fileName\"</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Now to run a file just open it and press\n<kbd>control</kbd>+<kbd>option</kbd>+<kbd>n</kbd> (on mac)\nor <kbd>control</kbd>+<kbd>alt</kbd>+<kbd>n</kbd> (on pc).</p>\n<p>Note: If you are using <code>conda</code> environments and if it's not added to the path environments (or bash). Then <code>crun</code> may be unaccessible in the terminal by default. So, you either need to activate it in the terminal, or you need to update the shell args.</p>\n<pre><span class=\"s2\">\"terminal.integrated.shellArgs.windows\"</span><span class=\"err\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"/K\"</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;conda-install-path&gt;/Scripts/activate &amp;&amp; conda activate &lt;your-env&gt;\"</span><span class=\"p\">]</span>\n</pre>\n<p>For linux you can change <code>terminal.integrated.shellArgs.linux</code> and for mac change <code>terminal.integrated.shellArgs.osx</code></p>\n\n          </div>"}, "last_serial": 7098612, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "415d05ef615eb53c0f7010d5faa90e4a", "sha256": "ce8e1a5c7986b12432f4f225c5bf301874c62760e9437c345bbeb4d14ff4f884"}, "downloads": -1, "filename": "code_faster-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "415d05ef615eb53c0f7010d5faa90e4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12876, "upload_time": "2020-04-24T21:03:56", "upload_time_iso_8601": "2020-04-24T21:03:56.821724Z", "url": "https://files.pythonhosted.org/packages/f0/1b/5e6f6d2c592e36d49abc801ffe29eb742a9e7f8b3d153e750d5143280100/code_faster-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ffe6725d591187a42f7157827d3dcd7b", "sha256": "f64721a38daf09639e587d1f57141181a6c9492bb12df946d35cb0033ad3e421"}, "downloads": -1, "filename": "code_faster-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ffe6725d591187a42f7157827d3dcd7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11549, "upload_time": "2020-04-24T21:03:59", "upload_time_iso_8601": "2020-04-24T21:03:59.178825Z", "url": "https://files.pythonhosted.org/packages/96/70/f625791c645ade8d0c234d04304df3a4df6189352e60b1fcb97a08425231/code_faster-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e90122db8413e072d613a31b3a7802e5", "sha256": "ad5a17d6602aba42bcacab6aff566cb8bde08eb862bdab0bdf24f638a4b3c647"}, "downloads": -1, "filename": "code_faster-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e90122db8413e072d613a31b3a7802e5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12953, "upload_time": "2020-04-24T21:24:47", "upload_time_iso_8601": "2020-04-24T21:24:47.086801Z", "url": "https://files.pythonhosted.org/packages/76/2e/f33f779f1cf7317403bcd177238a56ef19074e9ce2c7b19c301d6a912841/code_faster-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a0443d56820e33f98539414ebf40a4ea", "sha256": "91f3cd1b06a4bf119a15d20f285db93532e02d2f76c2a44e5ec09f1670aea859"}, "downloads": -1, "filename": "code_faster-0.1.2.tar.gz", "has_sig": false, "md5_digest": "a0443d56820e33f98539414ebf40a4ea", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11615, "upload_time": "2020-04-24T21:24:48", "upload_time_iso_8601": "2020-04-24T21:24:48.513657Z", "url": "https://files.pythonhosted.org/packages/51/75/a68868282a9d6bcdd66dcc8f1769a96131055d349093179d51a42f56aacd/code_faster-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "65918638dda561b916488f0f803a65d3", "sha256": "fde73f2ac02adab08d51bc682c1093c8e354bad760ef6a57dee0545f6654efcc"}, "downloads": -1, "filename": "code_faster-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "65918638dda561b916488f0f803a65d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13139, "upload_time": "2020-04-25T09:00:32", "upload_time_iso_8601": "2020-04-25T09:00:32.551279Z", "url": "https://files.pythonhosted.org/packages/04/23/3199d41862980a5097d765f69e51075668c7f6fa45a175b832eaaf29d039/code_faster-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d375df0014c4366a258d71a3b8fa13ed", "sha256": "eef4ee8caa2d3027a388eaafe1cc1998640cd6a8d2461ec0f09931e0d160278c"}, "downloads": -1, "filename": "code_faster-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d375df0014c4366a258d71a3b8fa13ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12001, "upload_time": "2020-04-25T09:00:33", "upload_time_iso_8601": "2020-04-25T09:00:33.654144Z", "url": "https://files.pythonhosted.org/packages/bb/d1/c58160877840fa0d80dc75bdcc1c30a92a9be4848e176a7594d4da15d5b2/code_faster-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "65918638dda561b916488f0f803a65d3", "sha256": "fde73f2ac02adab08d51bc682c1093c8e354bad760ef6a57dee0545f6654efcc"}, "downloads": -1, "filename": "code_faster-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "65918638dda561b916488f0f803a65d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13139, "upload_time": "2020-04-25T09:00:32", "upload_time_iso_8601": "2020-04-25T09:00:32.551279Z", "url": "https://files.pythonhosted.org/packages/04/23/3199d41862980a5097d765f69e51075668c7f6fa45a175b832eaaf29d039/code_faster-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d375df0014c4366a258d71a3b8fa13ed", "sha256": "eef4ee8caa2d3027a388eaafe1cc1998640cd6a8d2461ec0f09931e0d160278c"}, "downloads": -1, "filename": "code_faster-0.2.0.tar.gz", "has_sig": false, "md5_digest": "d375df0014c4366a258d71a3b8fa13ed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12001, "upload_time": "2020-04-25T09:00:33", "upload_time_iso_8601": "2020-04-25T09:00:33.654144Z", "url": "https://files.pythonhosted.org/packages/bb/d1/c58160877840fa0d80dc75bdcc1c30a92a9be4848e176a7594d4da15d5b2/code_faster-0.2.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:17 2020"}