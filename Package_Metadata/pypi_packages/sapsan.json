{"info": {"author": "Platon Karpov, Iskandar Sitdikov", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "# Sapsan  <a href=\"https://github.com/pikarpov-LANL/Sapsan\"><img src=\"docs/images/logo3_black_slim_notitle.png\"  alt=\"Sapsan logo\" align=\"right\" width=\"100\"></a>\n\n* [Intro](#intro) \n* [Structure](#structure)\n  * [Estimator](#estimator)\n  * [Experiment](#experiment)\n  * [Dataset](#dataset)\n  * [Tracking backend](#tracking-backend) \n* [Examples](#examples)\n* [Kubeflow](#kubeflow)\n-------\n\n### Intro\nSapsan is a pipeline for easy Machine Learning implementation in scientific projects. That being said, its primary goal and featured models are geared towards dynamic MHD turbulence subgrid modeling. Sapsan will soon feature Physics-Informed Machine Learning models in its set of tools to accurately capture the turbulent nature appicable to Core-Collapse Supernovae.\n\nNote: currently Sapsan is in alpha, but we are actively working on it and introduce new feature on a daily basis.\n\n### Getting Started\nTo get started, simply pull sapsan via pip (or you could clone this repo)\n\n```shell script\npip install sapsan\n```\nNext, please run an example to make sure everything has been installed correctly. It is a jupyter notebook which can be found here:\n```shell script\nSapsan/examples/cnn_example.ipynb\n```\nIn order to get started on your own project, you can use the command-line-interface interface:\n```shell script\nsapsan create --name awesome\n```\n\n-------\n\n### Structure\nStructure of project is build around few concepts making this project easier to extend to more cases.\nCore abstractions are: estimator, dataset, experiment, tracking backend\nCore abstraction are defined in [models.py](sapsan/core/models.py) file.\n\n#### Estimator\nGeneral abstraction for models/algorithms.\n\n##### Available estimators\n- [KRR 1d estimator](sapsan/lib/estimator/krr/krr.py)\n- [3d convolution encoder estimator](sapsan/lib/estimator/cnn/spacial_3d_encoder.py)\n- [3d autoencoder estimator](sapsan/lib/estimator/cnn/spacial_autoencoder.py) *(coming soon!)*\n\n##### How to implement new estimator:\n\nExtend `Estimator` class and implement `train`, `predict` and `metrics` methods.\n\n```python\nfrom sapsan.core.models import Estimator, EstimatorConfiguration\n\n\nclass AwesomeEstimator(Estimator):\n    def __init__(self, config: EstimatorConfiguration):\n        super().__init__(config)\n        self.model = ... # your awesome model\n\n    def train(self, inputs, labels):\n        # fit model to labels\n        return self.model\n\n    def predict(self, inputs):\n        prediction = ... # derive prediction from inputs\n        return prediction\n\n    def metrics(self):\n        return {\"training_time\": 146, \"training_avg_loss\": 42}\n```\n\n#### Dataset\nGeneral abstraction for dataset/dataframes.\n\n##### Available datasets\n- [3d dataset](sapsan/lib/data/jhtdb_dataset.py)\n- [2d dataset](sapsan/lib/data/flatten_dataset.py) *(coming soon!)*\n\n##### How to implement new dataset:\n\nExtend `Dataset` class and impement `load` method.\n\n```python\nimport numpy as np\nfrom sapsan.core.models import Dataset\n\n\nclass RandomDataset(Dataset):\n    def __init__(self, n_entries: int, n_features: int):\n        self.n_entries = n_entries\n        self.n_features = n_features\n\n    def load(self):\n        return np.random.random((self.n_entries, self.n_features))\n```\n\n#### Experiment\n\nGeneral abstraction for experiments.\n\n##### Available experiments\n- [general training experiment](sapsan/lib/experiments/training.py)\n- [evaluation 1d experiment](sapsan/lib/experiments/evaluation_flatten.py)\n- [evaluation 3d encoder experiment](sapsan/lib/experiments/evaluation_3d.py)\n- [evaluation 3d autoencoder experiment](sapsan/lib/experiments/evaluation_autoencoder.py)\n\n##### How to implement new experiment:\n\nExtend `Experiment` class and impement `run` method.\n\n```python\nfrom sapsan.core.models import Experiment, ExperimentBackend\n\n\nclass AwesomeExperiment(Experiment):\n    def __init__(self, name: str, backend: ExperimentBackend):\n        super().__init__(name, backend)\n\n    def run(self):\n        # do whatever you need to execute during experiment\n        return {}\n```\n\n#### Tracking backend\n\nGeneral abstraction for experiment tracker.\n\n##### Available tracking backends\n- [MlFlow](sapsan/lib/backends/mlflow.py)\n- [FakeBackend](sapsan/lib/backends/fake.py)\n\n##### How to implement new experiment:\n\nExtend `ExperimentBackend` class and impement `log_metric`, `log_parameter`, `log_artifact`  methods.\n\n```python\nfrom sapsan.core.models import ExperimentBackend\n\n\nclass InMemoryTrackingBackend(ExperimentBackend):\n    def __init__(self, name: str):\n        super().__init__(name)\n        self.metrics = []\n        self.parameters = []\n        self.artifacts = []\n\n    def log_metric(self, name, value):\n        self.metrics.append((name, value))\n\n    def log_parameter(self, name, value):\n        self.metrics.append((name, value))\n\n    def log_argifact(self, path):\n        self.artifacts.append(path)\n```\n\n\n-------\n### Examples\n\nExamples of implemented experiments.\n\n- [3d convolution encoder example](./examples/cnn_example.ipynb)\n- [3d audoencoder example](./examples/autoencoder_example.py) *(coming soon!)*\n- [KRR 1d estimator](./examples/krr_example.py) *(coming soon!)*\n\n-------\n\n### Kubeflow\n\n[Docs for experiments in kubeflow](./docs/kubeflow.md)\n\n#### Examples\n\n##### Local via docker compose\n\n```shell script\ndocker-compose build\ndocker-compose up --force-recreate\n```\n\nThen open browser at [localhost:8888](http://localhost:8888)\n\n\n-------\n\n\u00a9 (or copyright) 2019. Triad National Security, LLC. All rights reserved.\nThis program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos\nNational Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S.\nDepartment of Energy/National Nuclear Security Administration. All rights in the program are\nreserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear\nSecurity Administration. The Government is granted for itself and others acting on its behalf a\nnonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare\nderivative works, distribute copies to the public, perform publicly and display publicly, and to permit\nothers to do so.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pikarpov-LANL/Sapsan", "keywords": "experiments,reproducibility,astrophysics", "license": "", "maintainer": "", "maintainer_email": "", "name": "sapsan", "package_url": "https://pypi.org/project/sapsan/", "platform": "", "project_url": "https://pypi.org/project/sapsan/", "project_urls": {"Homepage": "https://github.com/pikarpov-LANL/Sapsan"}, "release_url": "https://pypi.org/project/sapsan/0.0.2a0/", "requires_dist": ["numpy (==1.17.3)", "Click (>=6)"], "requires_python": ">=3.6", "summary": "Sapsan project", "version": "0.0.2a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sapsan  <a href=\"https://github.com/pikarpov-LANL/Sapsan\" rel=\"nofollow\"><img align=\"right\" alt=\"Sapsan logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e32fc3063de3216fe8a25e8d63aa91042e543ed/646f63732f696d616765732f6c6f676f335f626c61636b5f736c696d5f6e6f7469746c652e706e67\" width=\"100\"></a></h1>\n<ul>\n<li><a href=\"#intro\" rel=\"nofollow\">Intro</a></li>\n<li><a href=\"#structure\" rel=\"nofollow\">Structure</a>\n<ul>\n<li><a href=\"#estimator\" rel=\"nofollow\">Estimator</a></li>\n<li><a href=\"#experiment\" rel=\"nofollow\">Experiment</a></li>\n<li><a href=\"#dataset\" rel=\"nofollow\">Dataset</a></li>\n<li><a href=\"#tracking-backend\" rel=\"nofollow\">Tracking backend</a></li>\n</ul>\n</li>\n<li><a href=\"#examples\" rel=\"nofollow\">Examples</a></li>\n<li><a href=\"#kubeflow\" rel=\"nofollow\">Kubeflow</a></li>\n</ul>\n<hr>\n<h3>Intro</h3>\n<p>Sapsan is a pipeline for easy Machine Learning implementation in scientific projects. That being said, its primary goal and featured models are geared towards dynamic MHD turbulence subgrid modeling. Sapsan will soon feature Physics-Informed Machine Learning models in its set of tools to accurately capture the turbulent nature appicable to Core-Collapse Supernovae.</p>\n<p>Note: currently Sapsan is in alpha, but we are actively working on it and introduce new feature on a daily basis.</p>\n<h3>Getting Started</h3>\n<p>To get started, simply pull sapsan via pip (or you could clone this repo)</p>\n<pre>pip install sapsan\n</pre>\n<p>Next, please run an example to make sure everything has been installed correctly. It is a jupyter notebook which can be found here:</p>\n<pre>Sapsan/examples/cnn_example.ipynb\n</pre>\n<p>In order to get started on your own project, you can use the command-line-interface interface:</p>\n<pre>sapsan create --name awesome\n</pre>\n<hr>\n<h3>Structure</h3>\n<p>Structure of project is build around few concepts making this project easier to extend to more cases.\nCore abstractions are: estimator, dataset, experiment, tracking backend\nCore abstraction are defined in <a href=\"sapsan/core/models.py\" rel=\"nofollow\">models.py</a> file.</p>\n<h4>Estimator</h4>\n<p>General abstraction for models/algorithms.</p>\n<h5>Available estimators</h5>\n<ul>\n<li><a href=\"sapsan/lib/estimator/krr/krr.py\" rel=\"nofollow\">KRR 1d estimator</a></li>\n<li><a href=\"sapsan/lib/estimator/cnn/spacial_3d_encoder.py\" rel=\"nofollow\">3d convolution encoder estimator</a></li>\n<li><a href=\"sapsan/lib/estimator/cnn/spacial_autoencoder.py\" rel=\"nofollow\">3d autoencoder estimator</a> <em>(coming soon!)</em></li>\n</ul>\n<h5>How to implement new estimator:</h5>\n<p>Extend <code>Estimator</code> class and implement <code>train</code>, <code>predict</code> and <code>metrics</code> methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sapsan.core.models</span> <span class=\"kn\">import</span> <span class=\"n\">Estimator</span><span class=\"p\">,</span> <span class=\"n\">EstimatorConfiguration</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AwesomeEstimator</span><span class=\"p\">(</span><span class=\"n\">Estimator</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">config</span><span class=\"p\">:</span> <span class=\"n\">EstimatorConfiguration</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">config</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># your awesome model</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">train</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">,</span> <span class=\"n\">labels</span><span class=\"p\">):</span>\n        <span class=\"c1\"># fit model to labels</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">model</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">inputs</span><span class=\"p\">):</span>\n        <span class=\"n\">prediction</span> <span class=\"o\">=</span> <span class=\"o\">...</span> <span class=\"c1\"># derive prediction from inputs</span>\n        <span class=\"k\">return</span> <span class=\"n\">prediction</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">metrics</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s2\">\"training_time\"</span><span class=\"p\">:</span> <span class=\"mi\">146</span><span class=\"p\">,</span> <span class=\"s2\">\"training_avg_loss\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">}</span>\n</pre>\n<h4>Dataset</h4>\n<p>General abstraction for dataset/dataframes.</p>\n<h5>Available datasets</h5>\n<ul>\n<li><a href=\"sapsan/lib/data/jhtdb_dataset.py\" rel=\"nofollow\">3d dataset</a></li>\n<li><a href=\"sapsan/lib/data/flatten_dataset.py\" rel=\"nofollow\">2d dataset</a> <em>(coming soon!)</em></li>\n</ul>\n<h5>How to implement new dataset:</h5>\n<p>Extend <code>Dataset</code> class and impement <code>load</code> method.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sapsan.core.models</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RandomDataset</span><span class=\"p\">(</span><span class=\"n\">Dataset</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">n_entries</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">n_features</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_entries</span> <span class=\"o\">=</span> <span class=\"n\">n_entries</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_features</span> <span class=\"o\">=</span> <span class=\"n\">n_features</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"p\">((</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_entries</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">n_features</span><span class=\"p\">))</span>\n</pre>\n<h4>Experiment</h4>\n<p>General abstraction for experiments.</p>\n<h5>Available experiments</h5>\n<ul>\n<li><a href=\"sapsan/lib/experiments/training.py\" rel=\"nofollow\">general training experiment</a></li>\n<li><a href=\"sapsan/lib/experiments/evaluation_flatten.py\" rel=\"nofollow\">evaluation 1d experiment</a></li>\n<li><a href=\"sapsan/lib/experiments/evaluation_3d.py\" rel=\"nofollow\">evaluation 3d encoder experiment</a></li>\n<li><a href=\"sapsan/lib/experiments/evaluation_autoencoder.py\" rel=\"nofollow\">evaluation 3d autoencoder experiment</a></li>\n</ul>\n<h5>How to implement new experiment:</h5>\n<p>Extend <code>Experiment</code> class and impement <code>run</code> method.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sapsan.core.models</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span><span class=\"p\">,</span> <span class=\"n\">ExperimentBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">AwesomeExperiment</span><span class=\"p\">(</span><span class=\"n\">Experiment</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">:</span> <span class=\"n\">ExperimentBackend</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">backend</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">run</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># do whatever you need to execute during experiment</span>\n        <span class=\"k\">return</span> <span class=\"p\">{}</span>\n</pre>\n<h4>Tracking backend</h4>\n<p>General abstraction for experiment tracker.</p>\n<h5>Available tracking backends</h5>\n<ul>\n<li><a href=\"sapsan/lib/backends/mlflow.py\" rel=\"nofollow\">MlFlow</a></li>\n<li><a href=\"sapsan/lib/backends/fake.py\" rel=\"nofollow\">FakeBackend</a></li>\n</ul>\n<h5>How to implement new experiment:</h5>\n<p>Extend <code>ExperimentBackend</code> class and impement <code>log_metric</code>, <code>log_parameter</code>, <code>log_artifact</code>  methods.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sapsan.core.models</span> <span class=\"kn\">import</span> <span class=\"n\">ExperimentBackend</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">InMemoryTrackingBackend</span><span class=\"p\">(</span><span class=\"n\">ExperimentBackend</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">parameters</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">artifacts</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">log_metric</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">log_parameter</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">log_argifact</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">artifacts</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"p\">)</span>\n</pre>\n<hr>\n<h3>Examples</h3>\n<p>Examples of implemented experiments.</p>\n<ul>\n<li><a href=\"./examples/cnn_example.ipynb\" rel=\"nofollow\">3d convolution encoder example</a></li>\n<li><a href=\"./examples/autoencoder_example.py\" rel=\"nofollow\">3d audoencoder example</a> <em>(coming soon!)</em></li>\n<li><a href=\"./examples/krr_example.py\" rel=\"nofollow\">KRR 1d estimator</a> <em>(coming soon!)</em></li>\n</ul>\n<hr>\n<h3>Kubeflow</h3>\n<p><a href=\"./docs/kubeflow.md\" rel=\"nofollow\">Docs for experiments in kubeflow</a></p>\n<h4>Examples</h4>\n<h5>Local via docker compose</h5>\n<pre>docker-compose build\ndocker-compose up --force-recreate\n</pre>\n<p>Then open browser at <a href=\"http://localhost:8888\" rel=\"nofollow\">localhost:8888</a></p>\n<hr>\n<p>\u00a9 (or copyright) 2019. Triad National Security, LLC. All rights reserved.\nThis program was produced under U.S. Government contract 89233218CNA000001 for Los Alamos\nNational Laboratory (LANL), which is operated by Triad National Security, LLC for the U.S.\nDepartment of Energy/National Nuclear Security Administration. All rights in the program are\nreserved by Triad National Security, LLC, and the U.S. Department of Energy/National Nuclear\nSecurity Administration. The Government is granted for itself and others acting on its behalf a\nnonexclusive, paid-up, irrevocable worldwide license in this material to reproduce, prepare\nderivative works, distribute copies to the public, perform publicly and display publicly, and to permit\nothers to do so.</p>\n\n          </div>"}, "last_serial": 7176643, "releases": {"0.0.1a0": [{"comment_text": "", "digests": {"md5": "002bd4d9b5faf5691af9cbaf89a79db1", "sha256": "d47862a284660b9c5d3ed692f5deeaac18ef06a3c7ec515eace7ef2ee7810e19"}, "downloads": -1, "filename": "sapsan-0.0.1a0-py3-none-any.whl", "has_sig": false, "md5_digest": "002bd4d9b5faf5691af9cbaf89a79db1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 47410, "upload_time": "2020-04-17T06:44:27", "upload_time_iso_8601": "2020-04-17T06:44:27.186533Z", "url": "https://files.pythonhosted.org/packages/24/4c/7a2c041a3c89a6d8c391ec92eebdb6554065a97ce0f0ae7b6e5681ac801e/sapsan-0.0.1a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ac0562f06a0ceb91362fcbaacdb91aef", "sha256": "7084f8b762355074a53230ecd8033a876084f22509432cbae633f04ab58b72dc"}, "downloads": -1, "filename": "sapsan-0.0.1a0.tar.gz", "has_sig": false, "md5_digest": "ac0562f06a0ceb91362fcbaacdb91aef", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 27260, "upload_time": "2020-04-17T06:44:29", "upload_time_iso_8601": "2020-04-17T06:44:29.006890Z", "url": "https://files.pythonhosted.org/packages/74/f0/bbdd29b420efc3ce5e6725041cdf847acc7a467d54a8babbf96fb6d5c94d/sapsan-0.0.1a0.tar.gz", "yanked": false}], "0.0.2a0": [{"comment_text": "", "digests": {"md5": "6594f23c43d345298f018a245e18d97a", "sha256": "3c0a23f3a8bc76fe033161f68c6f9fdc5996babeaf248e5a785919bb38b7adf0"}, "downloads": -1, "filename": "sapsan-0.0.2a0-py3-none-any.whl", "has_sig": false, "md5_digest": "6594f23c43d345298f018a245e18d97a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8033, "upload_time": "2020-05-06T00:09:16", "upload_time_iso_8601": "2020-05-06T00:09:16.302208Z", "url": "https://files.pythonhosted.org/packages/62/d6/37f364b086f4e3745fb33975e8e88901bda83a108212b8def869afc342fa/sapsan-0.0.2a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cab9cdab7fbbf519261d294223a0f547", "sha256": "1ffdfeda2f7e66ec54ef8e2f2a714b10eab989d4d925cc673747340cc789a85b"}, "downloads": -1, "filename": "sapsan-0.0.2a0.tar.gz", "has_sig": false, "md5_digest": "cab9cdab7fbbf519261d294223a0f547", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5571, "upload_time": "2020-05-06T00:09:17", "upload_time_iso_8601": "2020-05-06T00:09:17.287961Z", "url": "https://files.pythonhosted.org/packages/f1/87/a64ed34185c9f8abd38d66627814852e6e5c83d93d3c19c0834c13be5e80/sapsan-0.0.2a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6594f23c43d345298f018a245e18d97a", "sha256": "3c0a23f3a8bc76fe033161f68c6f9fdc5996babeaf248e5a785919bb38b7adf0"}, "downloads": -1, "filename": "sapsan-0.0.2a0-py3-none-any.whl", "has_sig": false, "md5_digest": "6594f23c43d345298f018a245e18d97a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 8033, "upload_time": "2020-05-06T00:09:16", "upload_time_iso_8601": "2020-05-06T00:09:16.302208Z", "url": "https://files.pythonhosted.org/packages/62/d6/37f364b086f4e3745fb33975e8e88901bda83a108212b8def869afc342fa/sapsan-0.0.2a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cab9cdab7fbbf519261d294223a0f547", "sha256": "1ffdfeda2f7e66ec54ef8e2f2a714b10eab989d4d925cc673747340cc789a85b"}, "downloads": -1, "filename": "sapsan-0.0.2a0.tar.gz", "has_sig": false, "md5_digest": "cab9cdab7fbbf519261d294223a0f547", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5571, "upload_time": "2020-05-06T00:09:17", "upload_time_iso_8601": "2020-05-06T00:09:17.287961Z", "url": "https://files.pythonhosted.org/packages/f1/87/a64ed34185c9f8abd38d66627814852e6e5c83d93d3c19c0834c13be5e80/sapsan-0.0.2a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:36 2020"}