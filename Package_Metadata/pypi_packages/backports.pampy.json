{"info": {"author": "Claudio Santini", "author_email": "hireclaudio@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "![Pampy in Star Wars](https://raw.githubusercontent.com/santinic/pampy/master/imgs/pampy.png \"Pampy in Star Wars\")\n\n# Pampy: Pattern Matching for Python\n[![License MIT](https://img.shields.io/badge/License-MIT-blue.svg)](https://github.com/santinic/pampy/blob/master/LICENSE)\n[![Travis-CI Status](https://api.travis-ci.org/santinic/pampy.svg?branch=master)](https://travis-ci.org/santinic/pampy)\n[![Coverage Status](https://coveralls.io/repos/github/santinic/pampy/badge.svg?branch=master)](https://coveralls.io/github/santinic/pampy?branch=master)\n[![PyPI version](https://badge.fury.io/py/pampy.svg)](https://badge.fury.io/py/pampy)\n\nPampy is pretty small (150 lines), reasonably fast, and often makes your code more readable\nand hence easier to reason about. [There is also a JavaScript version, called Pampy.js](https://github.com/santinic/pampy.js).\n\n<kbd>\n  <img src=\"https://raw.githubusercontent.com/santinic/pampy/master/imgs/slide1.png\" width=\"700\">\n</kbd>\n\n## You can write many patterns\n\nPatterns are evaluated in the order they appear.\n\n<kbd>\n  <img src=\"https://raw.githubusercontent.com/santinic/pampy/master/imgs/slide2.png\" width=\"700\">\n</kbd>\n\n\n## You can write Fibonacci\nThe operator _ means \"any other case I didn't think of\".\n\n```python\nfrom pampy import match, _\n\ndef fibonacci(n):\n    return match(n,\n        1, 1,\n        2, 1,\n        _, lambda x: fibonacci(x-1) + fibonacci(x-2)\n    )\n```\n\n## You can write a Lisp calculator in 5 lines\n\n```python\nfrom pampy import match, REST, _\n\ndef lisp(exp):\n    return match(exp,\n        int,                lambda x: x,\n        callable,           lambda x: x,\n        (callable, REST),   lambda f, rest: f(*map(lisp, rest)),\n        tuple,              lambda t: list(map(lisp, t)),\n    )\n\nplus = lambda a, b: a + b\nminus = lambda a, b: a - b\nfrom functools import reduce\n\nlisp((plus, 1, 2))                 \t# => 3\nlisp((plus, 1, (minus, 4, 2)))     \t# => 3\nlisp((reduce, plus, (range, 10)))       # => 45\n```\n\n## You can match so many things!\n\n```python\nmatch(x,\n    3,              \"this matches the number 3\",\n\n    int,            \"matches any integer\",\n\n    (str, int),     lambda a, b: \"a tuple (a, b) you can use in a function\",\n\n    [1, 2, _],      \"any list of 3 elements that begins with [1, 2]\",\n\n    {'x': _},       \"any dict with a key 'x' and any value associated\",\n\n    _,              \"anything else\"\n)\n```\n\n## You can match [HEAD, TAIL]\n\n```python\nfrom pampy import match, HEAD, TAIL, _\n\nx = [1, 2, 3]\n\nmatch(x, [1, TAIL],     lambda t: t)            # => [2, 3]\n\nmatch(x, [HEAD, TAIL],  lambda h, t: (h, t))    # => (1, [2, 3])\n\n```\n`TAIL` and `REST` actually mean the same thing.\n\n## You can nest lists and tuples\n\n```python\nfrom pampy import match, _\n\nx = [1, [2, 3], 4]\n\nmatch(x, [1, [_, 3], _], lambda a, b: [1, [a, 3], b])           # => [1, [2, 3], 4]\n```\n\n## You can nest dicts. And you can use _ as key!\n\n```python\n\npet = { 'type': 'dog', 'details': { 'age': 3 } }\n\nmatch(pet, { 'details': { 'age': _ } }, lambda age: age)        # => 3\n\nmatch(pet, { _ : { 'age': _ } },        lambda a, b: (a, b))    # => ('details', 3)\n```\n\nIt feels like putting multiple _ inside dicts shouldn't work. Isn't ordering in dicts not guaranteed ?\nBut it does because\n[in Python 3.7, dict maintains insertion key order by default](https://mail.python.org/pipermail/python-dev/2017-December/151283.html)\n\n## You can match class hierarchies\n\n```python\nclass Pet:          pass\nclass Dog(Pet):     pass\nclass Cat(Pet):     pass\nclass Hamster(Pet): pass\n\ndef what_is(x):\n    return match(x,\n        Dog, \t\t'dog',\n        Cat, \t\t'cat',\n        Pet, \t\t'any other pet',\n          _, \t\t'this is not a pet at all',\n    )\n\nwhat_is(Cat())      # => 'cat'\nwhat_is(Dog())      # => 'dog'\nwhat_is(Hamster())  # => 'any other pet'\nwhat_is(Pet())      # => 'any other pet'\nwhat_is(42)         # => 'this is not a pet at all'\n```\n\n## All the things you can match\n\nAs Pattern you can use any Python type, any class, or any Python value.\n\nThe operator `_` and built-in types like `int` or `str`, extract variables that are passed to functions.\n\nTypes and Classes are matched via `instanceof(value, pattern)`.\n\n`Iterable` Patterns match recursively through all their elements.  The same goes for dictionaries.\n\n| Pattern Example | What it means | Matched Example |  Arguments Passed to function | NOT Matched Example |\n| --------------- | --------------| --------------- | ----------------------------- | ------------------ |\n| `\"hello\"` |  only the string `\"hello\"` matches | `\"hello\"` | nothing | any other value |\n| `None` | only `None` | `None` | nothing | any other value |\n| `int` | Any integer | `42` | `42` | any other value |\n| `float` | Any float number | `2.35` | `2.35` | any other value |\n| `str` | Any string | `\"hello\"` | `\"hello\"` | any other value |\n| `tuple` | Any tuple | `(1, 2)` | `(1, 2)` | any other value |\n| `list` | Any list | `[1, 2]` | `[1, 2]` | any other value |\n| `MyClass` | Any instance of MyClass. **And any object that extends MyClass.** | `MyClass()` | that instance | any other object |\n| `_` | Any object (even None) |  | that value | |\n| `ANY` | The same as `_` | | that value | |\n| `(int, int)` | A tuple made of any two integers | `(1, 2)` | `1` and `2` | (True, False) |\n| `[1, 2, _]`  | A list that starts with 1, 2 and ends with any value | `[1, 2, 3]` | `3` | `[1, 2, 3, 4]` |\n| `[1, 2, TAIL]` | A list that start with 1, 2 and ends with any sequence | `[1, 2, 3, 4]`| `[3, 4]` | `[1, 7, 7, 7]` |\n| `{'type':'dog', age: _ }` | Any dict with `type: \"dog\"` and with an age | `{\"type\":\"dog\", \"age\": 3}` | `3` | `{\"type\":\"cat\", \"age\":2}` |\n| `{'type':'dog', age: int }` | Any dict with `type: \"dog\"` and with an `int` age | `{\"type\":\"dog\", \"age\": 3}` | `3` | `{\"type\":\"dog\", \"age\":2.3}` |\n| `re.compile('(\\w+)-(\\w+)-cat$')` | Any string that matches that regular expression expr | `\"my-fuffy-cat\"` | `\"my\"` and `\"puffy\"` | `\"fuffy-dog\"` | \n| `Pet(name=_, age=7)` | Any Pet dataclass with `age == 7` | `Pet('rover', 7)` | `['rover']` | `Pet('rover', 8)` |\n\n## Using strict=False\n\nBy default `match()` is strict. If no pattern matches, it raises a `MatchError`.\n\nYou can prevent it using `strict=False`. In this case `match` just returns `False` if nothing matches.\n\n```\n>>> match([1, 2], [1, 2, 3], \"whatever\")\nMatchError: '_' not provided. This case is not handled: [1, 2]\n\n>>> match([1, 2], [1, 2, 3], \"whatever\", strict=False)\nFalse\n```\n\n## Using Regular Expressions\nPampy supports Python's Regex. You can pass a compiled regex as pattern, and Pampy is going to run `patter.search()`, and then pass to the action function the result of `.groups()`.\n\n```python \ndef what_is(pet):\n    return match(pet,\n        re.compile('(\\w+)-(\\w+)-cat$'),     lambda name, my: 'cat '+name,\n        re.compile('(\\w+)-(\\w+)-dog$'),     lambda name, my: 'dog '+name,\n        _,                                  \"something else\"\n    )\n\nwhat_is('fuffy-my-dog')     # => 'dog fuffy'\nwhat_is('puffy-her-dog')    # => 'dog puffy'\nwhat_is('carla-your-cat')   # => 'cat carla'\nwhat_is('roger-my-hamster') # => 'something else'\n```\n\n## Using Dataclasses\nPampy supports Python 3.7 dataclasses. You can pass the operator `_` as arguments and it will match those fields.\n\n```python\n@dataclass\nclass Pet:\n    name: str\n    age: int\n\npet = Pet('rover', 7)\n\nmatch(pet, Pet('rover', _), lambda age: age)                    # => 7\nmatch(pet, Pet(_, 7), lambda name: name)                        # => 'rover'\nmatch(pet, Pet(_, _), lambda name, age: (name, age))            # => ('rover', 7)\n```\n\n## Install\n\nCurrently it works only in Python >= 3.6 [Because dict matching can work only in the latest Pythons](https://mail.python.org/pipermail/python-dev/2017-December/151283.html).\n\nI'm currently working on a backport with some minor syntax changes for Python2.\n\nTo install it:\n\n```$ pip install pampy```\n\nor\n```$ pip3 install pampy```\n\n\n<!--We could port it also to Python 2 but we'd need to change the dict matching syntax.-->\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/santinic/pampy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "backports.pampy", "package_url": "https://pypi.org/project/backports.pampy/", "platform": "any", "project_url": "https://pypi.org/project/backports.pampy/", "project_urls": {"Homepage": "https://github.com/santinic/pampy"}, "release_url": "https://pypi.org/project/backports.pampy/0.1.10/", "requires_dist": ["six", "typing"], "requires_python": "", "summary": "The Pattern Matching for Python you always dreamed of", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Pampy in Star Wars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/52e94885db58c0b5da822359ece125fac31e3eef/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e74696e69632f70616d70792f6d61737465722f696d67732f70616d70792e706e67\"></p>\n<h1>Pampy: Pattern Matching for Python</h1>\n<p><a href=\"https://github.com/santinic/pampy/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License MIT\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n<a href=\"https://travis-ci.org/santinic/pampy\" rel=\"nofollow\"><img alt=\"Travis-CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/399ed07b76a2ed813a9ce5af70f6fd1aa29e4aa1/68747470733a2f2f6170692e7472617669732d63692e6f72672f73616e74696e69632f70616d70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/santinic/pampy?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e7c46ca5c2343e7d3a8df3519e895f0ace02367/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f73616e74696e69632f70616d70792f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://badge.fury.io/py/pampy\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/095547c249d8fadb837a230c7fa8cd739deeec4a/68747470733a2f2f62616467652e667572792e696f2f70792f70616d70792e737667\"></a></p>\n<p>Pampy is pretty small (150 lines), reasonably fast, and often makes your code more readable\nand hence easier to reason about. <a href=\"https://github.com/santinic/pampy.js\" rel=\"nofollow\">There is also a JavaScript version, called Pampy.js</a>.</p>\n<kbd>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4179a371764287b43bfb4ebce90f437bfd955aa2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e74696e69632f70616d70792f6d61737465722f696d67732f736c696465312e706e67\" width=\"700\">\n</kbd>\n<h2>You can write many patterns</h2>\n<p>Patterns are evaluated in the order they appear.</p>\n<kbd>\n  <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad711a56684291b4bb930654d30a403c79f9fac2/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f73616e74696e69632f70616d70792f6d61737465722f696d67732f736c696465322e706e67\" width=\"700\">\n</kbd>\n<h2>You can write Fibonacci</h2>\n<p>The operator _ means \"any other case I didn't think of\".</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pampy</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">_</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span>\n        <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"n\">fibonacci</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"o\">-</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<h2>You can write a Lisp calculator in 5 lines</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pampy</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">REST</span><span class=\"p\">,</span> <span class=\"n\">_</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">lisp</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">exp</span><span class=\"p\">,</span>\n        <span class=\"nb\">int</span><span class=\"p\">,</span>                <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span>\n        <span class=\"n\">callable</span><span class=\"p\">,</span>           <span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">,</span>\n        <span class=\"p\">(</span><span class=\"n\">callable</span><span class=\"p\">,</span> <span class=\"n\">REST</span><span class=\"p\">),</span>   <span class=\"k\">lambda</span> <span class=\"n\">f</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"p\">:</span> <span class=\"n\">f</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">lisp</span><span class=\"p\">,</span> <span class=\"n\">rest</span><span class=\"p\">)),</span>\n        <span class=\"nb\">tuple</span><span class=\"p\">,</span>              <span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"n\">lisp</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">)),</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">plus</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">+</span> <span class=\"n\">b</span>\n<span class=\"n\">minus</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"n\">a</span> <span class=\"o\">-</span> <span class=\"n\">b</span>\n<span class=\"kn\">from</span> <span class=\"nn\">functools</span> <span class=\"kn\">import</span> <span class=\"n\">reduce</span>\n\n<span class=\"n\">lisp</span><span class=\"p\">((</span><span class=\"n\">plus</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>                 \t<span class=\"c1\"># =&gt; 3</span>\n<span class=\"n\">lisp</span><span class=\"p\">((</span><span class=\"n\">plus</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">minus</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)))</span>     \t<span class=\"c1\"># =&gt; 3</span>\n<span class=\"n\">lisp</span><span class=\"p\">((</span><span class=\"n\">reduce</span><span class=\"p\">,</span> <span class=\"n\">plus</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">range</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)))</span>       <span class=\"c1\"># =&gt; 45</span>\n</pre>\n<h2>You can match so many things!</h2>\n<pre><span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>\n    <span class=\"mi\">3</span><span class=\"p\">,</span>              <span class=\"s2\">\"this matches the number 3\"</span><span class=\"p\">,</span>\n\n    <span class=\"nb\">int</span><span class=\"p\">,</span>            <span class=\"s2\">\"matches any integer\"</span><span class=\"p\">,</span>\n\n    <span class=\"p\">(</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span>     <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"s2\">\"a tuple (a, b) you can use in a function\"</span><span class=\"p\">,</span>\n\n    <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">],</span>      <span class=\"s2\">\"any list of 3 elements that begins with [1, 2]\"</span><span class=\"p\">,</span>\n\n    <span class=\"p\">{</span><span class=\"s1\">'x'</span><span class=\"p\">:</span> <span class=\"n\">_</span><span class=\"p\">},</span>       <span class=\"s2\">\"any dict with a key 'x' and any value associated\"</span><span class=\"p\">,</span>\n\n    <span class=\"n\">_</span><span class=\"p\">,</span>              <span class=\"s2\">\"anything else\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h2>You can match [HEAD, TAIL]</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pampy</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">HEAD</span><span class=\"p\">,</span> <span class=\"n\">TAIL</span><span class=\"p\">,</span> <span class=\"n\">_</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">]</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">TAIL</span><span class=\"p\">],</span>     <span class=\"k\">lambda</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"n\">t</span><span class=\"p\">)</span>            <span class=\"c1\"># =&gt; [2, 3]</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">HEAD</span><span class=\"p\">,</span> <span class=\"n\">TAIL</span><span class=\"p\">],</span>  <span class=\"k\">lambda</span> <span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">h</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">))</span>    <span class=\"c1\"># =&gt; (1, [2, 3])</span>\n</pre>\n<p><code>TAIL</code> and <code>REST</code> actually mean the same thing.</p>\n<h2>You can nest lists and tuples</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pampy</span> <span class=\"kn\">import</span> <span class=\"n\">match</span><span class=\"p\">,</span> <span class=\"n\">_</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"mi\">4</span><span class=\"p\">]</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">_</span><span class=\"p\">],</span> <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"n\">b</span><span class=\"p\">])</span>           <span class=\"c1\"># =&gt; [1, [2, 3], 4]</span>\n</pre>\n<h2>You can nest dicts. And you can use _ as key!</h2>\n<pre><span class=\"n\">pet</span> <span class=\"o\">=</span> <span class=\"p\">{</span> <span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'details'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"mi\">3</span> <span class=\"p\">}</span> <span class=\"p\">}</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"s1\">'details'</span><span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"n\">_</span> <span class=\"p\">}</span> <span class=\"p\">},</span> <span class=\"k\">lambda</span> <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"n\">age</span><span class=\"p\">)</span>        <span class=\"c1\"># =&gt; 3</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span> <span class=\"p\">{</span> <span class=\"n\">_</span> <span class=\"p\">:</span> <span class=\"p\">{</span> <span class=\"s1\">'age'</span><span class=\"p\">:</span> <span class=\"n\">_</span> <span class=\"p\">}</span> <span class=\"p\">},</span>        <span class=\"k\">lambda</span> <span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">))</span>    <span class=\"c1\"># =&gt; ('details', 3)</span>\n</pre>\n<p>It feels like putting multiple _ inside dicts shouldn't work. Isn't ordering in dicts not guaranteed ?\nBut it does because\n<a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"nofollow\">in Python 3.7, dict maintains insertion key order by default</a></p>\n<h2>You can match class hierarchies</h2>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>          <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Dog</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>     <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Cat</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span>     <span class=\"k\">pass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Hamster</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">):</span> <span class=\"k\">pass</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">what_is</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span>\n        <span class=\"n\">Dog</span><span class=\"p\">,</span> \t\t<span class=\"s1\">'dog'</span><span class=\"p\">,</span>\n        <span class=\"n\">Cat</span><span class=\"p\">,</span> \t\t<span class=\"s1\">'cat'</span><span class=\"p\">,</span>\n        <span class=\"n\">Pet</span><span class=\"p\">,</span> \t\t<span class=\"s1\">'any other pet'</span><span class=\"p\">,</span>\n          <span class=\"n\">_</span><span class=\"p\">,</span> \t\t<span class=\"s1\">'this is not a pet at all'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"n\">Cat</span><span class=\"p\">())</span>      <span class=\"c1\"># =&gt; 'cat'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"n\">Dog</span><span class=\"p\">())</span>      <span class=\"c1\"># =&gt; 'dog'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"n\">Hamster</span><span class=\"p\">())</span>  <span class=\"c1\"># =&gt; 'any other pet'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"n\">Pet</span><span class=\"p\">())</span>      <span class=\"c1\"># =&gt; 'any other pet'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">)</span>         <span class=\"c1\"># =&gt; 'this is not a pet at all'</span>\n</pre>\n<h2>All the things you can match</h2>\n<p>As Pattern you can use any Python type, any class, or any Python value.</p>\n<p>The operator <code>_</code> and built-in types like <code>int</code> or <code>str</code>, extract variables that are passed to functions.</p>\n<p>Types and Classes are matched via <code>instanceof(value, pattern)</code>.</p>\n<p><code>Iterable</code> Patterns match recursively through all their elements.  The same goes for dictionaries.</p>\n<table>\n<thead>\n<tr>\n<th>Pattern Example</th>\n<th>What it means</th>\n<th>Matched Example</th>\n<th>Arguments Passed to function</th>\n<th>NOT Matched Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>\"hello\"</code></td>\n<td>only the string <code>\"hello\"</code> matches</td>\n<td><code>\"hello\"</code></td>\n<td>nothing</td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>None</code></td>\n<td>only <code>None</code></td>\n<td><code>None</code></td>\n<td>nothing</td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>Any integer</td>\n<td><code>42</code></td>\n<td><code>42</code></td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>float</code></td>\n<td>Any float number</td>\n<td><code>2.35</code></td>\n<td><code>2.35</code></td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>str</code></td>\n<td>Any string</td>\n<td><code>\"hello\"</code></td>\n<td><code>\"hello\"</code></td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>tuple</code></td>\n<td>Any tuple</td>\n<td><code>(1, 2)</code></td>\n<td><code>(1, 2)</code></td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>list</code></td>\n<td>Any list</td>\n<td><code>[1, 2]</code></td>\n<td><code>[1, 2]</code></td>\n<td>any other value</td>\n</tr>\n<tr>\n<td><code>MyClass</code></td>\n<td>Any instance of MyClass. <strong>And any object that extends MyClass.</strong></td>\n<td><code>MyClass()</code></td>\n<td>that instance</td>\n<td>any other object</td>\n</tr>\n<tr>\n<td><code>_</code></td>\n<td>Any object (even None)</td>\n<td></td>\n<td>that value</td>\n<td></td>\n</tr>\n<tr>\n<td><code>ANY</code></td>\n<td>The same as <code>_</code></td>\n<td></td>\n<td>that value</td>\n<td></td>\n</tr>\n<tr>\n<td><code>(int, int)</code></td>\n<td>A tuple made of any two integers</td>\n<td><code>(1, 2)</code></td>\n<td><code>1</code> and <code>2</code></td>\n<td>(True, False)</td>\n</tr>\n<tr>\n<td><code>[1, 2, _]</code></td>\n<td>A list that starts with 1, 2 and ends with any value</td>\n<td><code>[1, 2, 3]</code></td>\n<td><code>3</code></td>\n<td><code>[1, 2, 3, 4]</code></td>\n</tr>\n<tr>\n<td><code>[1, 2, TAIL]</code></td>\n<td>A list that start with 1, 2 and ends with any sequence</td>\n<td><code>[1, 2, 3, 4]</code></td>\n<td><code>[3, 4]</code></td>\n<td><code>[1, 7, 7, 7]</code></td>\n</tr>\n<tr>\n<td><code>{'type':'dog', age: _ }</code></td>\n<td>Any dict with <code>type: \"dog\"</code> and with an age</td>\n<td><code>{\"type\":\"dog\", \"age\": 3}</code></td>\n<td><code>3</code></td>\n<td><code>{\"type\":\"cat\", \"age\":2}</code></td>\n</tr>\n<tr>\n<td><code>{'type':'dog', age: int }</code></td>\n<td>Any dict with <code>type: \"dog\"</code> and with an <code>int</code> age</td>\n<td><code>{\"type\":\"dog\", \"age\": 3}</code></td>\n<td><code>3</code></td>\n<td><code>{\"type\":\"dog\", \"age\":2.3}</code></td>\n</tr>\n<tr>\n<td><code>re.compile('(\\w+)-(\\w+)-cat$')</code></td>\n<td>Any string that matches that regular expression expr</td>\n<td><code>\"my-fuffy-cat\"</code></td>\n<td><code>\"my\"</code> and <code>\"puffy\"</code></td>\n<td><code>\"fuffy-dog\"</code></td>\n</tr>\n<tr>\n<td><code>Pet(name=_, age=7)</code></td>\n<td>Any Pet dataclass with <code>age == 7</code></td>\n<td><code>Pet('rover', 7)</code></td>\n<td><code>['rover']</code></td>\n<td><code>Pet('rover', 8)</code></td>\n</tr></tbody></table>\n<h2>Using strict=False</h2>\n<p>By default <code>match()</code> is strict. If no pattern matches, it raises a <code>MatchError</code>.</p>\n<p>You can prevent it using <code>strict=False</code>. In this case <code>match</code> just returns <code>False</code> if nothing matches.</p>\n<pre><code>&gt;&gt;&gt; match([1, 2], [1, 2, 3], \"whatever\")\nMatchError: '_' not provided. This case is not handled: [1, 2]\n\n&gt;&gt;&gt; match([1, 2], [1, 2, 3], \"whatever\", strict=False)\nFalse\n</code></pre>\n<h2>Using Regular Expressions</h2>\n<p>Pampy supports Python's Regex. You can pass a compiled regex as pattern, and Pampy is going to run <code>patter.search()</code>, and then pass to the action function the result of <code>.groups()</code>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">what_is</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span>\n        <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">'(\\w+)-(\\w+)-cat$'</span><span class=\"p\">),</span>     <span class=\"k\">lambda</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">my</span><span class=\"p\">:</span> <span class=\"s1\">'cat '</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">re</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span><span class=\"s1\">'(\\w+)-(\\w+)-dog$'</span><span class=\"p\">),</span>     <span class=\"k\">lambda</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">my</span><span class=\"p\">:</span> <span class=\"s1\">'dog '</span><span class=\"o\">+</span><span class=\"n\">name</span><span class=\"p\">,</span>\n        <span class=\"n\">_</span><span class=\"p\">,</span>                                  <span class=\"s2\">\"something else\"</span>\n    <span class=\"p\">)</span>\n\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"s1\">'fuffy-my-dog'</span><span class=\"p\">)</span>     <span class=\"c1\"># =&gt; 'dog fuffy'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"s1\">'puffy-her-dog'</span><span class=\"p\">)</span>    <span class=\"c1\"># =&gt; 'dog puffy'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"s1\">'carla-your-cat'</span><span class=\"p\">)</span>   <span class=\"c1\"># =&gt; 'cat carla'</span>\n<span class=\"n\">what_is</span><span class=\"p\">(</span><span class=\"s1\">'roger-my-hamster'</span><span class=\"p\">)</span> <span class=\"c1\"># =&gt; 'something else'</span>\n</pre>\n<h2>Using Dataclasses</h2>\n<p>Pampy supports Python 3.7 dataclasses. You can pass the operator <code>_</code> as arguments and it will match those fields.</p>\n<pre><span class=\"nd\">@dataclass</span>\n<span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n\n<span class=\"n\">pet</span> <span class=\"o\">=</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"s1\">'rover'</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">)</span>\n\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"s1\">'rover'</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"n\">age</span><span class=\"p\">)</span>                    <span class=\"c1\"># =&gt; 7</span>\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"n\">name</span><span class=\"p\">)</span>                        <span class=\"c1\"># =&gt; 'rover'</span>\n<span class=\"n\">match</span><span class=\"p\">(</span><span class=\"n\">pet</span><span class=\"p\">,</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">),</span> <span class=\"k\">lambda</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">age</span><span class=\"p\">))</span>            <span class=\"c1\"># =&gt; ('rover', 7)</span>\n</pre>\n<h2>Install</h2>\n<p>Currently it works only in Python &gt;= 3.6 <a href=\"https://mail.python.org/pipermail/python-dev/2017-December/151283.html\" rel=\"nofollow\">Because dict matching can work only in the latest Pythons</a>.</p>\n<p>I'm currently working on a backport with some minor syntax changes for Python2.</p>\n<p>To install it:</p>\n<p><code>$ pip install pampy</code></p>\n<p>or\n<code>$ pip3 install pampy</code></p>\n\n\n          </div>"}, "last_serial": 4621755, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "f14fe0e7ee3b84d883b7ee7d5a9c3336", "sha256": "55e4d6f98dac6bad3fc537ee816820c87a03cd8be85cf0d617b6d17474b58da2"}, "downloads": -1, "filename": "backports.pampy-0.1.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f14fe0e7ee3b84d883b7ee7d5a9c3336", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9722, "upload_time": "2018-12-20T17:39:13", "upload_time_iso_8601": "2018-12-20T17:39:13.696416Z", "url": "https://files.pythonhosted.org/packages/31/89/cf98bde4a64aa70910958019011cf77f73fa18043cb6242251f5811b2f88/backports.pampy-0.1.10-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f14fe0e7ee3b84d883b7ee7d5a9c3336", "sha256": "55e4d6f98dac6bad3fc537ee816820c87a03cd8be85cf0d617b6d17474b58da2"}, "downloads": -1, "filename": "backports.pampy-0.1.10-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f14fe0e7ee3b84d883b7ee7d5a9c3336", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9722, "upload_time": "2018-12-20T17:39:13", "upload_time_iso_8601": "2018-12-20T17:39:13.696416Z", "url": "https://files.pythonhosted.org/packages/31/89/cf98bde4a64aa70910958019011cf77f73fa18043cb6242251f5811b2f88/backports.pampy-0.1.10-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Thu May  7 18:15:07 2020"}