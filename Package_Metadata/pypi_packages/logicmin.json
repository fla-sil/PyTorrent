{"info": {"author": "Demetrio Rey", "author_email": "demetrio.rey@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: End Users/Desktop", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)"], "description": "LogicMin: Logic Minimization in Python\n======================================\n\nMinimize logic functions.\n\n\nDescription\n-----------\n\nLogicMin is a Python package that minimize boolean functions using the tabular method of minimization (Quine-McCluskey). An object represent a truth table to which rows are added. After all rows are added, call a solve function.The solve function returns the minimized Sum of Products. The sum of products can be printed or analyzed. \n\nFor more information, look into references:\n\n\t- Edward J. McCluskey. 1986. Logic Design Principles with Emphasis on Testable Semicustom Circuits. Prentice-Hall, Inc., Upper Saddle River, NJ, USA. \n\t- John F. Wakerly. 1989. Digital Design Principles and Practices. Prentice-Hall, Inc., Upper Saddle River, NJ, USA.\n\n\nFull-adder\n----------\n\n.. code:: python \n\n\t# Full-adder\n\timport logicmin\n\t# truth table 3 inputs, 2 outputs\n\tt = logicmin.TT(3,2);\n\t# add rows to the truth table (input, ouutput)\n\t# ci a b  |  s co\n\tt.add(\"000\",\"00\")\n\tt.add(\"001\",\"10\")\n\tt.add(\"010\",\"10\")\n\tt.add(\"011\",\"01\")\n\tt.add(\"100\",\"10\")\n\tt.add(\"101\",\"01\")\n\tt.add(\"110\",\"01\")\n\tt.add(\"111\",\"11\")\n\t# minimize functions and get\n\t# solution for analysis and print\n\tsols = t.solve()\n\t# print solution mapped to var names (xnames=inputs, ynames=outputs)\n\t# add debug information\n\tprint(sols.printN(xnames=['Ci','a','b'],ynames=['s','Co'], info=True))\n\n\n\nOutput:\n\n.. code:: \n\n\tCo <= a.b + Ci.b + Ci.a\n\ts <= Ci'.a'.b + Ci'.a.b' + Ci.a'.b' + Ci.a.b\n\n\n\nGet expression in VHDL syntax:\n\n.. code:: python\n\n\tprint(sols.printN(xnames=['Ci','a','b',ynames=['s','Co'], syntax='VHDL'))\n\nOutput: \n\n.. code:: \n\n\tCo <= a and b or Ci and b or Ci and a\n\ts <=  not(Ci) and  not(a) and b or  not(Ci) and a and  not(b) or Ci and  not(a) and  not(b) or Ci and a and b\n\nBCD to 7 segment converter\n--------------------------\n\n.. code:: python\n\n\t# BCD-8421 to 7 segment\n\timport logicmin\n\tt = logicmin.TT(4,7);\n\t# b3 b2 b1 b0  | a b c d e f g \n\tt.add(\"0000\",\"1111110\") \n\tt.add(\"0001\",\"0110000\") \n\tt.add(\"0010\",\"1101101\") \n\tt.add(\"0011\",\"1111001\") \n\tt.add(\"0100\",\"0110011\") \n\tt.add(\"0101\",\"1011011\") \n\tt.add(\"0110\",\"0011111\") \n\tt.add(\"0111\",\"1110000\") \n\tt.add(\"1000\",\"1111111\") \n\tt.add(\"1001\",\"1110011\") \n\tt.add(\"1010\",\"-------\") \n\tt.add(\"1011\",\"-------\") \n\tt.add(\"1100\",\"-------\") \n\tt.add(\"1101\",\"-------\") \n\tt.add(\"1110\",\"-------\") \n\tt.add(\"1111\",\"-------\") \n\t# Outputs minimized independently\n\tsols = t.solve()\n\tprint(sols.printN( xnames=['b3','b2','b1','b0'], ynames=['a','b','c','d','e','f','g']))\n\n\nOutput:\n\n\n.. code:: \n\n\tg <= b2'.b1 + b2.b1' + b2.b0' + b3\n\tf <= b1'.b0' + b2.b1' + b2.b0' + b3\n\te <= b2'.b0' + b1.b0'\n\td <= b2.b1'.b0 + b2'.b0' + b2'.b1 + b1.b0'\n\tc <= b1' + b0 + b2\n\tb <= b1'.b0' + b1.b0 + b2'\n\ta <= b2'.b0' + b1.b0 + b2.b0 + b3\n\n\nFinite-state machines\n---------------------\n\nFor finite-state machines, use the FSM object. \n\nBinary counter with hold\n------------------------\n\n.. code:: python\n\n\t# Finite-state machine\n\t# x=0 => hold\n\t# x=1 => binary up count\n\t# y = 1 in states: e1 and e3\n\timport logicmin\n\t# state labels\n\tstates = ['e0','e1','e2','e3']\n\t# 2 bits for state codes\n\t# 1 input variable\n\t# 1 output variable\n\tm = logicmin.FSM(states,2,1,1)\n\t# transition table\n\tm.add('0','e0','e0','0')\n\tm.add('1','e0','e1','0')\n\tm.add('0','e1','e1','1')\n\tm.add('1','e1','e2','1')\n\tm.add('0','e2','e2','0')\n\tm.add('1','e2','e3','0')\n\tm.add('0','e3','e3','1')\n\tm.add('1','e3','e0','1')\n\t# asign code to states\n\tcodes = {'e0':0,'e1':1,'e2':2,'e3':3}\n\tm.assignCodes(codes)\n\t# solve with D flip-flops\n\tsols = m.solveD()\n\t# print solution with input and output names\n\tprint(sols.printN(xnames=['X','Q1','Q0'], ynames=['D1','D0','Y']))\n\nOutput:\n\n.. code:: \n\n\tY <= Q0\n\tD0 <= X'.Q0 + X.Q0'\n\tD1 <= X.Q1'.Q0 + X'.Q1 + Q1.Q0'\n\nThe advantages of FSM objects are \n\n\t1. Names for the states \n\t2. Decouple state code assignment from table initialization.\n\nOther examples\n--------------\n\nLook into examples directory.\n\nInstall\n-------\n\n.. code:: \n\n \tpip install logicmin", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/dreylago/logicmin", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "logicmin", "package_url": "https://pypi.org/project/logicmin/", "platform": "", "project_url": "https://pypi.org/project/logicmin/", "project_urls": {"Homepage": "http://github.com/dreylago/logicmin"}, "release_url": "https://pypi.org/project/logicmin/0.3.18/", "requires_dist": null, "requires_python": ">=2.7", "summary": "Logic Minimization", "version": "0.3.18", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Minimize logic functions.</p>\n<div id=\"description\">\n<h2>Description</h2>\n<p>LogicMin is a Python package that minimize boolean functions using the tabular method of minimization (Quine-McCluskey). An object represent a truth table to which rows are added. After all rows are added, call a solve function.The solve function returns the minimized Sum of Products. The sum of products can be printed or analyzed.</p>\n<p>For more information, look into references:</p>\n<blockquote>\n<ul>\n<li>Edward J. McCluskey. 1986. Logic Design Principles with Emphasis on Testable Semicustom Circuits. Prentice-Hall, Inc., Upper Saddle River, NJ, USA.</li>\n<li>John F. Wakerly. 1989. Digital Design Principles and Practices. Prentice-Hall, Inc., Upper Saddle River, NJ, USA.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"full-adder\">\n<h2>Full-adder</h2>\n<pre><span class=\"c1\"># Full-adder</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logicmin</span>\n<span class=\"c1\"># truth table 3 inputs, 2 outputs</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">logicmin</span><span class=\"o\">.</span><span class=\"n\">TT</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">);</span>\n<span class=\"c1\"># add rows to the truth table (input, ouutput)</span>\n<span class=\"c1\"># ci a b  |  s co</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"000\"</span><span class=\"p\">,</span><span class=\"s2\">\"00\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"001\"</span><span class=\"p\">,</span><span class=\"s2\">\"10\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"010\"</span><span class=\"p\">,</span><span class=\"s2\">\"10\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"011\"</span><span class=\"p\">,</span><span class=\"s2\">\"01\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"100\"</span><span class=\"p\">,</span><span class=\"s2\">\"10\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"101\"</span><span class=\"p\">,</span><span class=\"s2\">\"01\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"110\"</span><span class=\"p\">,</span><span class=\"s2\">\"01\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"111\"</span><span class=\"p\">,</span><span class=\"s2\">\"11\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># minimize functions and get</span>\n<span class=\"c1\"># solution for analysis and print</span>\n<span class=\"n\">sols</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n<span class=\"c1\"># print solution mapped to var names (xnames=inputs, ynames=outputs)</span>\n<span class=\"c1\"># add debug information</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sols</span><span class=\"o\">.</span><span class=\"n\">printN</span><span class=\"p\">(</span><span class=\"n\">xnames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Ci'</span><span class=\"p\">,</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'b'</span><span class=\"p\">],</span><span class=\"n\">ynames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'s'</span><span class=\"p\">,</span><span class=\"s1\">'Co'</span><span class=\"p\">],</span> <span class=\"n\">info</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre>Co &lt;= a.b + Ci.b + Ci.a\ns &lt;= Ci'.a'.b + Ci'.a.b' + Ci.a'.b' + Ci.a.b\n</pre>\n<p>Get expression in VHDL syntax:</p>\n<pre><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sols</span><span class=\"o\">.</span><span class=\"n\">printN</span><span class=\"p\">(</span><span class=\"n\">xnames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'Ci'</span><span class=\"p\">,</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'b'</span><span class=\"p\">,</span><span class=\"n\">ynames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'s'</span><span class=\"p\">,</span><span class=\"s1\">'Co'</span><span class=\"p\">],</span> <span class=\"n\">syntax</span><span class=\"o\">=</span><span class=\"s1\">'VHDL'</span><span class=\"p\">))</span>\n</pre>\n<p>Output:</p>\n<pre>Co &lt;= a and b or Ci and b or Ci and a\ns &lt;=  not(Ci) and  not(a) and b or  not(Ci) and a and  not(b) or Ci and  not(a) and  not(b) or Ci and a and b\n</pre>\n</div>\n<div id=\"bcd-to-7-segment-converter\">\n<h2>BCD to 7 segment converter</h2>\n<pre><span class=\"c1\"># BCD-8421 to 7 segment</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logicmin</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">logicmin</span><span class=\"o\">.</span><span class=\"n\">TT</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span><span class=\"mi\">7</span><span class=\"p\">);</span>\n<span class=\"c1\"># b3 b2 b1 b0  | a b c d e f g</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0000\"</span><span class=\"p\">,</span><span class=\"s2\">\"1111110\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0001\"</span><span class=\"p\">,</span><span class=\"s2\">\"0110000\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0010\"</span><span class=\"p\">,</span><span class=\"s2\">\"1101101\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0011\"</span><span class=\"p\">,</span><span class=\"s2\">\"1111001\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0100\"</span><span class=\"p\">,</span><span class=\"s2\">\"0110011\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0101\"</span><span class=\"p\">,</span><span class=\"s2\">\"1011011\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0110\"</span><span class=\"p\">,</span><span class=\"s2\">\"0011111\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"0111\"</span><span class=\"p\">,</span><span class=\"s2\">\"1110000\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1000\"</span><span class=\"p\">,</span><span class=\"s2\">\"1111111\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1001\"</span><span class=\"p\">,</span><span class=\"s2\">\"1110011\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1010\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1011\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1100\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1101\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1110\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s2\">\"1111\"</span><span class=\"p\">,</span><span class=\"s2\">\"-------\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Outputs minimized independently</span>\n<span class=\"n\">sols</span> <span class=\"o\">=</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">solve</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sols</span><span class=\"o\">.</span><span class=\"n\">printN</span><span class=\"p\">(</span> <span class=\"n\">xnames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'b3'</span><span class=\"p\">,</span><span class=\"s1\">'b2'</span><span class=\"p\">,</span><span class=\"s1\">'b1'</span><span class=\"p\">,</span><span class=\"s1\">'b0'</span><span class=\"p\">],</span> <span class=\"n\">ynames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">,</span><span class=\"s1\">'b'</span><span class=\"p\">,</span><span class=\"s1\">'c'</span><span class=\"p\">,</span><span class=\"s1\">'d'</span><span class=\"p\">,</span><span class=\"s1\">'e'</span><span class=\"p\">,</span><span class=\"s1\">'f'</span><span class=\"p\">,</span><span class=\"s1\">'g'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre>g &lt;= b2'.b1 + b2.b1' + b2.b0' + b3\nf &lt;= b1'.b0' + b2.b1' + b2.b0' + b3\ne &lt;= b2'.b0' + b1.b0'\nd &lt;= b2.b1'.b0 + b2'.b0' + b2'.b1 + b1.b0'\nc &lt;= b1' + b0 + b2\nb &lt;= b1'.b0' + b1.b0 + b2'\na &lt;= b2'.b0' + b1.b0 + b2.b0 + b3\n</pre>\n</div>\n<div id=\"finite-state-machines\">\n<h2>Finite-state machines</h2>\n<p>For finite-state machines, use the FSM object.</p>\n</div>\n<div id=\"binary-counter-with-hold\">\n<h2>Binary counter with hold</h2>\n<pre><span class=\"c1\"># Finite-state machine</span>\n<span class=\"c1\"># x=0 =&gt; hold</span>\n<span class=\"c1\"># x=1 =&gt; binary up count</span>\n<span class=\"c1\"># y = 1 in states: e1 and e3</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logicmin</span>\n<span class=\"c1\"># state labels</span>\n<span class=\"n\">states</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'e0'</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">]</span>\n<span class=\"c1\"># 2 bits for state codes</span>\n<span class=\"c1\"># 1 input variable</span>\n<span class=\"c1\"># 1 output variable</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">logicmin</span><span class=\"o\">.</span><span class=\"n\">FSM</span><span class=\"p\">(</span><span class=\"n\">states</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"c1\"># transition table</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span><span class=\"s1\">'e0'</span><span class=\"p\">,</span><span class=\"s1\">'e0'</span><span class=\"p\">,</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'e0'</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">,</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">,</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">,</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">,</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">,</span><span class=\"s1\">'0'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'0'</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">,</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">,</span><span class=\"s1\">'e0'</span><span class=\"p\">,</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"c1\"># asign code to states</span>\n<span class=\"n\">codes</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"s1\">'e0'</span><span class=\"p\">:</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"s1\">'e1'</span><span class=\"p\">:</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"s1\">'e2'</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"s1\">'e3'</span><span class=\"p\">:</span><span class=\"mi\">3</span><span class=\"p\">}</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">assignCodes</span><span class=\"p\">(</span><span class=\"n\">codes</span><span class=\"p\">)</span>\n<span class=\"c1\"># solve with D flip-flops</span>\n<span class=\"n\">sols</span> <span class=\"o\">=</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">solveD</span><span class=\"p\">()</span>\n<span class=\"c1\"># print solution with input and output names</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sols</span><span class=\"o\">.</span><span class=\"n\">printN</span><span class=\"p\">(</span><span class=\"n\">xnames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'X'</span><span class=\"p\">,</span><span class=\"s1\">'Q1'</span><span class=\"p\">,</span><span class=\"s1\">'Q0'</span><span class=\"p\">],</span> <span class=\"n\">ynames</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'D1'</span><span class=\"p\">,</span><span class=\"s1\">'D0'</span><span class=\"p\">,</span><span class=\"s1\">'Y'</span><span class=\"p\">]))</span>\n</pre>\n<p>Output:</p>\n<pre>Y &lt;= Q0\nD0 &lt;= X'.Q0 + X.Q0'\nD1 &lt;= X.Q1'.Q0 + X'.Q1 + Q1.Q0'\n</pre>\n<p>The advantages of FSM objects are</p>\n<blockquote>\n<ol>\n<li>Names for the states</li>\n<li>Decouple state code assignment from table initialization.</li>\n</ol>\n</blockquote>\n</div>\n<div id=\"other-examples\">\n<h2>Other examples</h2>\n<p>Look into examples directory.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install logicmin\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3571237, "releases": {"0.3.18": [{"comment_text": "", "digests": {"md5": "ad9024156b015ce983883526ad67136f", "sha256": "52cdc2bd189e8010892dcf9b089cd1f1217e8f455d45716372cfa544bf79b371"}, "downloads": -1, "filename": "logicmin-0.3.18.tar.gz", "has_sig": false, "md5_digest": "ad9024156b015ce983883526ad67136f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13178, "upload_time": "2018-02-11T03:08:54", "upload_time_iso_8601": "2018-02-11T03:08:54.538326Z", "url": "https://files.pythonhosted.org/packages/27/f0/c6ea4559ba68e506205169cb3580bfd638fa6b15a258759b2bb658479a74/logicmin-0.3.18.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ad9024156b015ce983883526ad67136f", "sha256": "52cdc2bd189e8010892dcf9b089cd1f1217e8f455d45716372cfa544bf79b371"}, "downloads": -1, "filename": "logicmin-0.3.18.tar.gz", "has_sig": false, "md5_digest": "ad9024156b015ce983883526ad67136f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7", "size": 13178, "upload_time": "2018-02-11T03:08:54", "upload_time_iso_8601": "2018-02-11T03:08:54.538326Z", "url": "https://files.pythonhosted.org/packages/27/f0/c6ea4559ba68e506205169cb3580bfd638fa6b15a258759b2bb658479a74/logicmin-0.3.18.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:14 2020"}