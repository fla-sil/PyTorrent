{"info": {"author": "Bram Vanroy", "author_email": "bramvanroy@hotmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering", "Topic :: Text Processing"], "description": "============\nInstallation\n============\n\n.. code:: bash\n\n  pip install pylt3\n\n=====\nNotes\n=====\nFirst of all, this is a package that is continuously in development. Everything is subject to change.\nLike, literally... *everything*. At the moment, the package is more a way for me to understand building and maintaining\nPython packages than that it aims to be a full-fledged tool for the Python community. With that, I am very eager to\nlearn, so `pull requests`_, and `suggestions and issues`_ are always welcome.\n\n.. _pull requests: https://github.com/BramVanroy/PyLT3/pulls\n.. _suggestions and issues: https://github.com/BramVanroy/PyLT3/issues\n\n*************************\nNote on :code:`exec_func`\n*************************\n\nIn :code:`exec_func` parameters in all functions below, it is recommended to use `lambda expressions`_ as a value for\n:code:`exec_func` when using a function with more than one argument. By default, the current file\n(:code:`scan_dir_and_execute`) or the current line (:code:`scan_file_and_execute`) is passed to :code:`exec_func` but\nif you want to specify more arguments for your own function, you should use lambdas with the respective items as first\nargument (cf. some of the examples below).\n\n.. _lambda expressions: https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\n\n*************************\nNote on keyword arguments\n*************************\n\nTo easily type-check arguments, some keyword arguments are soaked up into :code:`kwargs`, meaning that you cannot add them as\npositional arguments, i.e. the keyword is required (e.g. `recursive=True` rather than :code:`True`). In the descriptive\nsections below, packed :code:`kwargs` are preceded by `**` so that you know you cannot use these as positional\narguments. Note that this is *not* the case for all keyword arguments. A keyword is added to kwargs only when simple\ntype-checking based on the default value is possible, and when there are no specific requirements for a value.\n\nFor instance, when code expects an optional argument to only be :code:`True` or :code:`False` (e.g. :code:`recursive`), it will be added\nto the :code:`kwargs` dictionary. Because the default value (e.g. :code:`False`) is a boolean, only boolean types will be accepted.\nHowever, a parameter such as :code:`verbose` that can reflect many levels of verboseness, e.g. `0`, `1`, and `2`, will not be\nadded. The default value `0` would mean that type-checking simply wants an :code:`int`, but for this example we only want\nvalid values of zero to two (including). In other words, if we do more than just type-checking but also\n*value-checking*, the argument is *not* added to :code:`kwargs`. Note that only type-checking and being added to :code:`kwargs`,\n*does* occur if a value is not subject to restrictions it may later receive when it is passed onto another function.\nFor an example, cf. :code:`get_attr_frequencies` which assumes :code:`verbose` to be in :code:`kwargs`, so only type-checking occurs. The\nvalue of verbose is then fed to :code:`scan_xml_and_execute` as a regular argument, outside :code:`kwargs`, because in this\nfunction :code:`verbose` needs a value check as well (it has to be `in range(0, 3)`).\n\nAnother case where an optional argument will not be added to :code:`kwargs` is when multiple types are possible for an\nargument. A typical example is when an argument can be either :code:`None`, or a :code:`str` or :code:`list`. In these cases, the\nargument is not added to :code:`kwargs` either.\n\nIn short: if, in the *current* function, we only want to ensure an argument's type and this type can be deducted from\nits default value, and there is only one allowed type, then the argument is added to :code:`kwargs`, and it cannot be used as\na positional argument. In all other cases it can.\n\nAlso see the `Python documentation on arguments`_.\n\n.. _Python documentation on arguments: https://docs.python.org/3/glossary.html#term-parameter\n\n=======\nModules\n=======\n\n********************\n:code:`file_helpers`\n********************\n\n:code:`scan_dir_and_execute`\n============================\n.. code:: python\n\n  scan_dir_and_execute(root, exec_func, exclude_dirs=None, verbose=0, recursive=True)\n\n\nTraverses a directory recursively (by default) and executes a user-defined function for every file that is encountered.\n\n* :code:`root`: path to the root directory that will be processed (required)\n* :code:`exec_func`: the function that is executed for every file. As stated above, it is only logical to use a lambda\n  expression here (required)\n* :code:`exclude_dirs`: an iterable containing the directory names that you wish to exclude from the recursion\n  (`default=None`)\n* :code:`verbose`: an integer indicating the level of verboseness. `0` will not print anything; `1` will print a message when\n  entering a new directory; `2` will also print when processing a new file (`default=0`)\n* ** :code:`recursive`: a boolean indicating whether to recursively go through all directories and sub-directories or not\n  (`default=True`)\n\nReturns :code:`None`\n\n\n:code:`scan_file_and_execute`\n=============================\n.. code:: python\n\n  scan_file_and_execute(file, exec_func, verbose=0, encoding=locale.getpreferredencoding())\n\n\nReads a file and executes a user-defined function for each line with the line itself and line number as default\narguments.\n\n* :code:`file`: path to the file that will be processed (required)\n* :code:`exec_func`: the function that is executed for every line. As stated above, it is only logical to use a lambda\n  expression here (required)\n* :code:`verbose`: an integer indicating the level of verboseness. `0` will not print anything; `1` will print the line\n  number of the line that's currently being processed (in-place, i.e. ending with `\\r`); `2` will shown the current\n  file followed by the line number (also in-place) (`default=0`)\n* ** :code:`encoding`: the encoding used for opening the file, as it would be used in an `open()` call\n  (`default=locale.getpreferredencoding()`)\n\nReturns :code:`None`\n\n\n:code:`concatenate_files`\n=========================\n.. code:: python\n\n  concatenate_files(input_item, output_file, extension=None, remove_headers=0, verbose=0, retain_first_header=False,\n                    recursive=True, encoding=locale.getpreferredencoding())\n\n\nTakes a list of files and concatenates them, or concatenates all files - optionally filtered by extension - in a given\ndirectory.\n\n* :code:`input_item`: either a list of files to concatenate or a directory as a string whose file contents will be\n  concatenated (required)\n* :code:`output_file`: the resulting output file (required)\n* :code:`extension`: the extension to filter the files in case :code:`input_item` is a string. Only files in that directory ending\n  with :code:`extension` will be concatenated (`default=None`)\n* :code:`remove_headers`: an integer indicating which first lines of all files need to be removed. Useful in case all files\n  share the same header row. The integer represents how many lines to skip (`default=0`)\n* :code:`verbose`: an integer indicating the level of verboseness. `0` will not print anything; `1` will print the line\n  number of the linethat's currently being processed (in-place, i.e. ending with `\\r`); `2` will shown the current file\n  followed by the line number (also in-place) (`default=0`)\n* ** :code:`retain_first_header`: a boolean indicating whether or not the header lines of the first file need to be retained.\n  In other words, when :code:`remove_headers` is set to an integer larger than `0` and `retain_first_header==True` then the\n  resulting file will have only one remaining header (`default=False`)\n* ** :code:`recursive`: a boolean indicating whether to recursively go through all directories and sub-directories or not\n  (`default=True`)\n* ** :code:`encoding`: the encoding used for opening the file, as it would be used in an `open()` call\n  (`default=locale.getpreferredencoding()`)\n\nReturns :code:`str`: the path to the file that has just been created, i.e. :code:`output_file`\n\n\n:code:`print_simple_dict`\n=========================\n.. code:: python\n\n  print_simple_dict(simple_dict, output_file, encoding=locale.getpreferredencoding())\n\n\nGiven a one-level dictionary, this function will print it to an output file as key-value pairs, separated by tabs. It\nis possible to sort the dictionary by keys or values, and reverse the order.\n\n* :code:`simple_dict`: dictionary that needs printing (required)\n* :code:`output_file`: the resulting output file (required)\n* ** :code:`encoding`: the encoding used for opening the file, as it would be used in an `open()` call\n  (`default=locale.getpreferredencoding()`)\n\nReturns :code:`str`: the path to the file that has just been created, i.e. :code:`output_file`\n\n\n*******************\n:code:`xml_helpers`\n*******************\n\n:code:`scan_xml_and_execute`\n============================\n.. code:: python\n\n  scan_xml_and_execute(file, exec_func, restrict_to_nodes=None, verbose=0)\n\n\nTODO: add arguments and options\n\n\n:code:`get_attr_frequencies`\n============================\n.. code:: python\n\n  get_attr_frequencies(file, nodes, attr, normalize_capitalisation=False, restrict_to_pos=None, pos='pos',\n                       include_pos=False, verbose=0)\n\n\nTODO: add arguments and options\n\n\n********************\n:code:`type_helpers`\n********************\n\n:code:`clean_simple_dict`\n=========================\n.. code:: python\n\n  clean_simple_dict(simple_dict, side='key', rm_only_punct=False, rm_contains_punct=False, rm_only_digits=False,\n                    rm_contains_digits=False, rm_only_nonan=False, rm_contains_nonan=False)\n\n\nTODO: add arguments and options\n\n\n:code:`sort_simple_dict`\n========================\n.. code:: python\n\n  sort_simple_dict(simple_dict, sort_on='keys', reverse=False)\n\n\n* :code:`sort_on`: sort the resulting dictionary and sort on :code:`keys` or :code:`value` (only these values and :code:`None` are accepted)\n  (`default=None`)\n* :code:`reverse`: a boolean that determines whether a sorted dictionary will be reserved or not (`default=False`)\n\n\nReturns :code:`list`:\n\n:code:`verify_kwargs`\n=====================\n.. code:: python\n\n  verify_kwargs(defaults, kwargs, allow_none=None)\n\n\nGiven a dictionary of default key-value pairs, and another dictionary with user-defined values, it is ensured that the\ntype of user-defined values is the same as the default value's type. The function returns a merged dictionary with\n:code:`kwargs` taken precedence over :code:`defaults`.\n\n* :code:`defaults`: a dictionary containing default keys and respective values\n* :code:`kwargs`: a dictionary that contains the actual values that you want to set\n* :code:`allow_none`: a list of parameter names that next to their default value type can also accept None (`default=None`)\n\nReturns :code:`dict`: the result of merging two dictionaries together\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/BramVanroy/pylt3", "keywords": "nlp xml file-handling helpers", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pylt3", "package_url": "https://pypi.org/project/pylt3/", "platform": "", "project_url": "https://pypi.org/project/pylt3/", "project_urls": {"Bug Reports": "https://github.com/BramVanroy/pylt3/issues", "Homepage": "https://github.com/BramVanroy/pylt3", "Source": "https://github.com/BramVanroy/pylt3"}, "release_url": "https://pypi.org/project/pylt3/0.8.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A collection of helper functions and NLP scripts", "version": "0.8.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install pylt3\n</pre>\n</div>\n<div id=\"notes\">\n<h2>Notes</h2>\n<p>First of all, this is a package that is continuously in development. Everything is subject to change.\nLike, literally\u2026 <em>everything</em>. At the moment, the package is more a way for me to understand building and maintaining\nPython packages than that it aims to be a full-fledged tool for the Python community. With that, I am very eager to\nlearn, so <a href=\"https://github.com/BramVanroy/PyLT3/pulls\" rel=\"nofollow\">pull requests</a>, and <a href=\"https://github.com/BramVanroy/PyLT3/issues\" rel=\"nofollow\">suggestions and issues</a> are always welcome.</p>\n<div id=\"note-on-exec-func\">\n<h3>Note on <code>exec_func</code></h3>\n<p>In <code>exec_func</code> parameters in all functions below, it is recommended to use <a href=\"https://docs.python.org/3/tutorial/controlflow.html#lambda-expressions\" rel=\"nofollow\">lambda expressions</a> as a value for\n<code>exec_func</code> when using a function with more than one argument. By default, the current file\n(<code>scan_dir_and_execute</code>) or the current line (<code>scan_file_and_execute</code>) is passed to <code>exec_func</code> but\nif you want to specify more arguments for your own function, you should use lambdas with the respective items as first\nargument (cf. some of the examples below).</p>\n</div>\n<div id=\"note-on-keyword-arguments\">\n<h3>Note on keyword arguments</h3>\n<p>To easily type-check arguments, some keyword arguments are soaked up into <code>kwargs</code>, meaning that you cannot add them as\npositional arguments, i.e. the keyword is required (e.g. <cite>recursive=True</cite> rather than <code>True</code>). In the descriptive\nsections below, packed <code>kwargs</code> are preceded by <cite>**</cite> so that you know you cannot use these as positional\narguments. Note that this is <em>not</em> the case for all keyword arguments. A keyword is added to kwargs only when simple\ntype-checking based on the default value is possible, and when there are no specific requirements for a value.</p>\n<p>For instance, when code expects an optional argument to only be <code>True</code> or <code>False</code> (e.g. <code>recursive</code>), it will be added\nto the <code>kwargs</code> dictionary. Because the default value (e.g. <code>False</code>) is a boolean, only boolean types will be accepted.\nHowever, a parameter such as <code>verbose</code> that can reflect many levels of verboseness, e.g. <cite>0</cite>, <cite>1</cite>, and <cite>2</cite>, will not be\nadded. The default value <cite>0</cite> would mean that type-checking simply wants an <code>int</code>, but for this example we only want\nvalid values of zero to two (including). In other words, if we do more than just type-checking but also\n<em>value-checking</em>, the argument is <em>not</em> added to <code>kwargs</code>. Note that only type-checking and being added to <code>kwargs</code>,\n<em>does</em> occur if a value is not subject to restrictions it may later receive when it is passed onto another function.\nFor an example, cf. <code>get_attr_frequencies</code> which assumes <code>verbose</code> to be in <code>kwargs</code>, so only type-checking occurs. The\nvalue of verbose is then fed to <code>scan_xml_and_execute</code> as a regular argument, outside <code>kwargs</code>, because in this\nfunction <code>verbose</code> needs a value check as well (it has to be <cite>in range(0, 3)</cite>).</p>\n<p>Another case where an optional argument will not be added to <code>kwargs</code> is when multiple types are possible for an\nargument. A typical example is when an argument can be either <code>None</code>, or a <code>str</code> or <code>list</code>. In these cases, the\nargument is not added to <code>kwargs</code> either.</p>\n<p>In short: if, in the <em>current</em> function, we only want to ensure an argument\u2019s type and this type can be deducted from\nits default value, and there is only one allowed type, then the argument is added to <code>kwargs</code>, and it cannot be used as\na positional argument. In all other cases it can.</p>\n<p>Also see the <a href=\"https://docs.python.org/3/glossary.html#term-parameter\" rel=\"nofollow\">Python documentation on arguments</a>.</p>\n</div>\n</div>\n<div id=\"modules\">\n<h2>Modules</h2>\n<div id=\"file-helpers\">\n<h3><code>file_helpers</code></h3>\n<div id=\"scan-dir-and-execute\">\n<h4><code>scan_dir_and_execute</code></h4>\n<pre><span class=\"n\">scan_dir_and_execute</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">exec_func</span><span class=\"p\">,</span> <span class=\"n\">exclude_dirs</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Traverses a directory recursively (by default) and executes a user-defined function for every file that is encountered.</p>\n<ul>\n<li><code>root</code>: path to the root directory that will be processed (required)</li>\n<li><code>exec_func</code>: the function that is executed for every file. As stated above, it is only logical to use a lambda\nexpression here (required)</li>\n<li><code>exclude_dirs</code>: an iterable containing the directory names that you wish to exclude from the recursion\n(<cite>default=None</cite>)</li>\n<li><code>verbose</code>: an integer indicating the level of verboseness. <cite>0</cite> will not print anything; <cite>1</cite> will print a message when\nentering a new directory; <cite>2</cite> will also print when processing a new file (<cite>default=0</cite>)</li>\n<li>** <code>recursive</code>: a boolean indicating whether to recursively go through all directories and sub-directories or not\n(<cite>default=True</cite>)</li>\n</ul>\n<p>Returns <code>None</code></p>\n</div>\n<div id=\"scan-file-and-execute\">\n<h4><code>scan_file_and_execute</code></h4>\n<pre><span class=\"n\">scan_file_and_execute</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">exec_func</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">locale</span><span class=\"o\">.</span><span class=\"n\">getpreferredencoding</span><span class=\"p\">())</span>\n</pre>\n<p>Reads a file and executes a user-defined function for each line with the line itself and line number as default\narguments.</p>\n<ul>\n<li><code>file</code>: path to the file that will be processed (required)</li>\n<li><code>exec_func</code>: the function that is executed for every line. As stated above, it is only logical to use a lambda\nexpression here (required)</li>\n<li><code>verbose</code>: an integer indicating the level of verboseness. <cite>0</cite> will not print anything; <cite>1</cite> will print the line\nnumber of the line that\u2019s currently being processed (in-place, i.e. ending with <cite>r</cite>); <cite>2</cite> will shown the current\nfile followed by the line number (also in-place) (<cite>default=0</cite>)</li>\n<li>** <code>encoding</code>: the encoding used for opening the file, as it would be used in an <cite>open()</cite> call\n(<cite>default=locale.getpreferredencoding()</cite>)</li>\n</ul>\n<p>Returns <code>None</code></p>\n</div>\n<div id=\"concatenate-files\">\n<h4><code>concatenate_files</code></h4>\n<pre><span class=\"n\">concatenate_files</span><span class=\"p\">(</span><span class=\"n\">input_item</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"n\">extension</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">remove_headers</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">retain_first_header</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                  <span class=\"n\">recursive</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">locale</span><span class=\"o\">.</span><span class=\"n\">getpreferredencoding</span><span class=\"p\">())</span>\n</pre>\n<p>Takes a list of files and concatenates them, or concatenates all files - optionally filtered by extension - in a given\ndirectory.</p>\n<ul>\n<li><code>input_item</code>: either a list of files to concatenate or a directory as a string whose file contents will be\nconcatenated (required)</li>\n<li><code>output_file</code>: the resulting output file (required)</li>\n<li><code>extension</code>: the extension to filter the files in case <code>input_item</code> is a string. Only files in that directory ending\nwith <code>extension</code> will be concatenated (<cite>default=None</cite>)</li>\n<li><code>remove_headers</code>: an integer indicating which first lines of all files need to be removed. Useful in case all files\nshare the same header row. The integer represents how many lines to skip (<cite>default=0</cite>)</li>\n<li><code>verbose</code>: an integer indicating the level of verboseness. <cite>0</cite> will not print anything; <cite>1</cite> will print the line\nnumber of the linethat\u2019s currently being processed (in-place, i.e. ending with <cite>r</cite>); <cite>2</cite> will shown the current file\nfollowed by the line number (also in-place) (<cite>default=0</cite>)</li>\n<li>** <code>retain_first_header</code>: a boolean indicating whether or not the header lines of the first file need to be retained.\nIn other words, when <code>remove_headers</code> is set to an integer larger than <cite>0</cite> and <cite>retain_first_header==True</cite> then the\nresulting file will have only one remaining header (<cite>default=False</cite>)</li>\n<li>** <code>recursive</code>: a boolean indicating whether to recursively go through all directories and sub-directories or not\n(<cite>default=True</cite>)</li>\n<li>** <code>encoding</code>: the encoding used for opening the file, as it would be used in an <cite>open()</cite> call\n(<cite>default=locale.getpreferredencoding()</cite>)</li>\n</ul>\n<p>Returns <code>str</code>: the path to the file that has just been created, i.e. <code>output_file</code></p>\n</div>\n<div id=\"print-simple-dict\">\n<h4><code>print_simple_dict</code></h4>\n<pre><span class=\"n\">print_simple_dict</span><span class=\"p\">(</span><span class=\"n\">simple_dict</span><span class=\"p\">,</span> <span class=\"n\">output_file</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"n\">locale</span><span class=\"o\">.</span><span class=\"n\">getpreferredencoding</span><span class=\"p\">())</span>\n</pre>\n<p>Given a one-level dictionary, this function will print it to an output file as key-value pairs, separated by tabs. It\nis possible to sort the dictionary by keys or values, and reverse the order.</p>\n<ul>\n<li><code>simple_dict</code>: dictionary that needs printing (required)</li>\n<li><code>output_file</code>: the resulting output file (required)</li>\n<li>** <code>encoding</code>: the encoding used for opening the file, as it would be used in an <cite>open()</cite> call\n(<cite>default=locale.getpreferredencoding()</cite>)</li>\n</ul>\n<p>Returns <code>str</code>: the path to the file that has just been created, i.e. <code>output_file</code></p>\n</div>\n</div>\n<div id=\"xml-helpers\">\n<h3><code>xml_helpers</code></h3>\n<div id=\"scan-xml-and-execute\">\n<h4><code>scan_xml_and_execute</code></h4>\n<pre><span class=\"n\">scan_xml_and_execute</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">exec_func</span><span class=\"p\">,</span> <span class=\"n\">restrict_to_nodes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>TODO: add arguments and options</p>\n</div>\n<div id=\"get-attr-frequencies\">\n<h4><code>get_attr_frequencies</code></h4>\n<pre><span class=\"n\">get_attr_frequencies</span><span class=\"p\">(</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">nodes</span><span class=\"p\">,</span> <span class=\"n\">attr</span><span class=\"p\">,</span> <span class=\"n\">normalize_capitalisation</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">restrict_to_pos</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">pos</span><span class=\"o\">=</span><span class=\"s1\">'pos'</span><span class=\"p\">,</span>\n                     <span class=\"n\">include_pos</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n</pre>\n<p>TODO: add arguments and options</p>\n</div>\n</div>\n<div id=\"type-helpers\">\n<h3><code>type_helpers</code></h3>\n<div id=\"clean-simple-dict\">\n<h4><code>clean_simple_dict</code></h4>\n<pre><span class=\"n\">clean_simple_dict</span><span class=\"p\">(</span><span class=\"n\">simple_dict</span><span class=\"p\">,</span> <span class=\"n\">side</span><span class=\"o\">=</span><span class=\"s1\">'key'</span><span class=\"p\">,</span> <span class=\"n\">rm_only_punct</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rm_contains_punct</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rm_only_digits</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                  <span class=\"n\">rm_contains_digits</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rm_only_nonan</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">rm_contains_nonan</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<p>TODO: add arguments and options</p>\n</div>\n<div id=\"sort-simple-dict\">\n<h4><code>sort_simple_dict</code></h4>\n<pre><span class=\"n\">sort_simple_dict</span><span class=\"p\">(</span><span class=\"n\">simple_dict</span><span class=\"p\">,</span> <span class=\"n\">sort_on</span><span class=\"o\">=</span><span class=\"s1\">'keys'</span><span class=\"p\">,</span> <span class=\"n\">reverse</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>sort_on</code>: sort the resulting dictionary and sort on <code>keys</code> or <code>value</code> (only these values and <code>None</code> are accepted)\n(<cite>default=None</cite>)</li>\n<li><code>reverse</code>: a boolean that determines whether a sorted dictionary will be reserved or not (<cite>default=False</cite>)</li>\n</ul>\n<p>Returns <code>list</code>:</p>\n</div>\n<div id=\"verify-kwargs\">\n<h4><code>verify_kwargs</code></h4>\n<pre><span class=\"n\">verify_kwargs</span><span class=\"p\">(</span><span class=\"n\">defaults</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">allow_none</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n</pre>\n<p>Given a dictionary of default key-value pairs, and another dictionary with user-defined values, it is ensured that the\ntype of user-defined values is the same as the default value\u2019s type. The function returns a merged dictionary with\n<code>kwargs</code> taken precedence over <code>defaults</code>.</p>\n<ul>\n<li><code>defaults</code>: a dictionary containing default keys and respective values</li>\n<li><code>kwargs</code>: a dictionary that contains the actual values that you want to set</li>\n<li><code>allow_none</code>: a list of parameter names that next to their default value type can also accept None (<cite>default=None</cite>)</li>\n</ul>\n<p>Returns <code>dict</code>: the result of merging two dictionaries together</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5802518, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "a508fcc986c773c4a6fcd223c751a715", "sha256": "7fbe326224145c4cfaab1f8a6e90aa492bc7e5c64314113e99c539c4456acc0d"}, "downloads": -1, "filename": "pylt3-0.2-py3.6.egg", "has_sig": false, "md5_digest": "a508fcc986c773c4a6fcd223c751a715", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": ">=3.6", "size": 10437, "upload_time": "2018-02-28T17:29:59", "upload_time_iso_8601": "2018-02-28T17:29:59.499202Z", "url": "https://files.pythonhosted.org/packages/c7/6d/0a94993a4cf65fdb2716a94187ba6be964e9f19d59ac9ff07c279e6a3627/pylt3-0.2-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "2d52af104cbdfcb8370beb0567b5de11", "sha256": "80a48745d650b1093f8b45e87ed7bb2fa09dd24e0fd7b4da5559e18a0430b4c1"}, "downloads": -1, "filename": "pylt3-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2d52af104cbdfcb8370beb0567b5de11", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6289, "upload_time": "2018-02-28T17:29:58", "upload_time_iso_8601": "2018-02-28T17:29:58.167266Z", "url": "https://files.pythonhosted.org/packages/48/35/cfe62126137544b7c90c0326e2f491de007dbc5d27afe058ad32df3bff55/pylt3-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7015298566e31b9532a85e91ecef8f92", "sha256": "15771bc26799797907e2c1f02a737fed5efa16c8178f0f2a34ecf85a334183a2"}, "downloads": -1, "filename": "pylt3-0.2.tar.gz", "has_sig": false, "md5_digest": "7015298566e31b9532a85e91ecef8f92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5284, "upload_time": "2018-02-28T17:30:01", "upload_time_iso_8601": "2018-02-28T17:30:01.057883Z", "url": "https://files.pythonhosted.org/packages/6f/44/5d858d4f511c2f9ca9e74e9053321b5b4dd453ec4bb6661b937f33c6151e/pylt3-0.2.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "68226f4ca03f0d9115c51807d10a5ff7", "sha256": "9169351157d4ff4e8b12d0e16045b5fba021af8027e10e1028ee1f5bef063a9c"}, "downloads": -1, "filename": "pylt3-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "68226f4ca03f0d9115c51807d10a5ff7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6319, "upload_time": "2018-03-01T14:41:05", "upload_time_iso_8601": "2018-03-01T14:41:05.506298Z", "url": "https://files.pythonhosted.org/packages/85/7e/4c8e9f61341380aae65212be9ddd175a40c24b89fe98d33d7bdae6d5174b/pylt3-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abdb5f4de4dfbc822176cee35c483ceb", "sha256": "62e1bd34d2239cdf6ea8caebbb1fc3c98ffa4305b1ef3bfc118bdbc3a254ecc4"}, "downloads": -1, "filename": "pylt3-0.2.6.tar.gz", "has_sig": false, "md5_digest": "abdb5f4de4dfbc822176cee35c483ceb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5194, "upload_time": "2018-03-01T14:41:07", "upload_time_iso_8601": "2018-03-01T14:41:07.131189Z", "url": "https://files.pythonhosted.org/packages/16/0d/a8e891cc26347bda777fa4a4df22b6299a943d87d4fbead721dd79d34be0/pylt3-0.2.6.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "fbc4f4363b5b5be88fdf189d466763a6", "sha256": "0a66ed3db20249ac866111501874d05ef55132a9f612e85863899b2daf8a23f2"}, "downloads": -1, "filename": "pylt3-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "fbc4f4363b5b5be88fdf189d466763a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6615, "upload_time": "2018-03-29T14:27:45", "upload_time_iso_8601": "2018-03-29T14:27:45.349419Z", "url": "https://files.pythonhosted.org/packages/89/02/924401ed1160625eec40dcd5f7822d7d748df289679562cbff01e1e96c68/pylt3-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3887d68a690f42f0f62bf703ebddf1d2", "sha256": "631acfd0417510f0d73fabe29e24277818ffa509f4a86cd6f2b1d24b93f84ef7"}, "downloads": -1, "filename": "pylt3-0.3.0.tar.gz", "has_sig": false, "md5_digest": "3887d68a690f42f0f62bf703ebddf1d2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7446, "upload_time": "2018-03-29T14:27:46", "upload_time_iso_8601": "2018-03-29T14:27:46.305296Z", "url": "https://files.pythonhosted.org/packages/e9/a5/d3cf4ac794ad63641fa0fb4df582775a2f5b71d72d05bb978ad2cd014f31/pylt3-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3df9e2ed3bf3a1279cf62c640dc90568", "sha256": "dfdc10748710799c3196067543eb25f45327c840014e99548719121d494632e8"}, "downloads": -1, "filename": "pylt3-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "3df9e2ed3bf3a1279cf62c640dc90568", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6651, "upload_time": "2018-04-05T15:18:22", "upload_time_iso_8601": "2018-04-05T15:18:22.160220Z", "url": "https://files.pythonhosted.org/packages/98/92/8eb29bac140513a25ec864a30388ddb3823550604ac0623a03050f2d3301/pylt3-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7e61c0b88e1cb3ba00c55a641314f089", "sha256": "cd8a27d7d5ffe94147f7072cc02b1533b53a621596a0837e521ecc9d63a46086"}, "downloads": -1, "filename": "pylt3-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7e61c0b88e1cb3ba00c55a641314f089", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7564, "upload_time": "2018-04-05T15:18:23", "upload_time_iso_8601": "2018-04-05T15:18:23.056133Z", "url": "https://files.pythonhosted.org/packages/aa/7b/0bc8329d396389640b7fadd29f714ebb6af293b63bb737c8c7be491cd396/pylt3-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "f0d64f458ff9f5d93647649f67a3663d", "sha256": "ddef8b78ce776fd20d16ad58d1466f2a120378ea1c69044cdc54e53e6e3017e2"}, "downloads": -1, "filename": "pylt3-0.5.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f0d64f458ff9f5d93647649f67a3663d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6488, "upload_time": "2018-09-20T14:41:47", "upload_time_iso_8601": "2018-09-20T14:41:47.786895Z", "url": "https://files.pythonhosted.org/packages/ab/d7/0c9b8cd7c4f9c8773f3513ad6fc0b517a37e066d2583716284db8802c4a8/pylt3-0.5.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ce1dbdfcea9e45c7682f2552fcfba3d", "sha256": "75a3828d38537c602a9cb3091734e76f06ad20e35d029b4eace3472362c006c0"}, "downloads": -1, "filename": "pylt3-0.5.0.tar.gz", "has_sig": false, "md5_digest": "4ce1dbdfcea9e45c7682f2552fcfba3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8237, "upload_time": "2018-09-20T14:41:49", "upload_time_iso_8601": "2018-09-20T14:41:49.713363Z", "url": "https://files.pythonhosted.org/packages/fb/f1/71d14e417e2a79062ba81ae704ed05aa46b9ce0c5a783e67d6229ef8a754/pylt3-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "6430633d5dc9c3ace949bac2d3b05c27", "sha256": "65839396100097936c8247c80766f087f883cd02b6afa9ded75cc709aa7e3229"}, "downloads": -1, "filename": "pylt3-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "6430633d5dc9c3ace949bac2d3b05c27", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7191, "upload_time": "2018-09-21T12:15:32", "upload_time_iso_8601": "2018-09-21T12:15:32.649115Z", "url": "https://files.pythonhosted.org/packages/4f/c8/4e387310397331164637cb08815e871877e0f01d3d5f1f746bd5d3ce4357/pylt3-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9e11066777348b61710f81b99fbdc79b", "sha256": "0d2a961baf19f5ef1758d6fe59ce86d2b8af1d5bc7c2235c3f74799997e62323"}, "downloads": -1, "filename": "pylt3-0.6.0.tar.gz", "has_sig": false, "md5_digest": "9e11066777348b61710f81b99fbdc79b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8849, "upload_time": "2018-09-21T12:15:34", "upload_time_iso_8601": "2018-09-21T12:15:34.108485Z", "url": "https://files.pythonhosted.org/packages/16/61/800d8e22be1308d827389dd9e4a6f8d6179549b829457bcbadc6014bfaca/pylt3-0.6.0.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "f68215ead0d718be2151c5d1f88ef904", "sha256": "16f7154587dd5e9b9abb1c9513b3674750d167c554cbf66efcfa0bbe12ee8f24"}, "downloads": -1, "filename": "pylt3-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f68215ead0d718be2151c5d1f88ef904", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7241, "upload_time": "2018-09-22T12:23:04", "upload_time_iso_8601": "2018-09-22T12:23:04.408544Z", "url": "https://files.pythonhosted.org/packages/7d/1a/28323eea5425dc159919974782c90672f833958249105e133a2a75cc2140/pylt3-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8748c7898d3908113ebffa70722394a9", "sha256": "f67d155d04c070cd6d62c4e6de2f9599d3d30a2d44ab20473877fc079b9c7b68"}, "downloads": -1, "filename": "pylt3-0.6.5.tar.gz", "has_sig": false, "md5_digest": "8748c7898d3908113ebffa70722394a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8848, "upload_time": "2018-09-22T12:23:05", "upload_time_iso_8601": "2018-09-22T12:23:05.762053Z", "url": "https://files.pythonhosted.org/packages/87/42/6d4a04211eed26ee6b496969c0b94bea51f2058dc753b4ec025468833869/pylt3-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "e9815784a9c02d864e10c990cfab6eeb", "sha256": "6885873b9b80cf373973ba1a410748fe377535e9e396f6335531e11b9067c8eb"}, "downloads": -1, "filename": "pylt3-0.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "e9815784a9c02d864e10c990cfab6eeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7244, "upload_time": "2018-09-25T12:29:33", "upload_time_iso_8601": "2018-09-25T12:29:33.887109Z", "url": "https://files.pythonhosted.org/packages/b5/f2/1cf57a6f4812ad3c1aecaa017a473e72260b7d08012ef4e848703c29fb21/pylt3-0.6.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cbb434466e150c6cceddcd96b30bc1f", "sha256": "729d46328a416a5089ddb5bb62f75cecde4a46c575c3982e8fb798e4a73f721c"}, "downloads": -1, "filename": "pylt3-0.6.6.tar.gz", "has_sig": false, "md5_digest": "1cbb434466e150c6cceddcd96b30bc1f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 8879, "upload_time": "2018-09-25T12:29:35", "upload_time_iso_8601": "2018-09-25T12:29:35.461722Z", "url": "https://files.pythonhosted.org/packages/d5/99/e5a35dc61caf73f60c5826b134f65947134336ce797decab0a1eb7588e61/pylt3-0.6.6.tar.gz", "yanked": false}], "0.7.0": [{"comment_text": "", "digests": {"md5": "1a64049efe4c377502a7ae501c52b2f5", "sha256": "7f3b3885d91f56adb63b425c01a7dd4806aee9470dcfdb227af59a2c78c741a4"}, "downloads": -1, "filename": "pylt3-0.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1a64049efe4c377502a7ae501c52b2f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7389, "upload_time": "2018-09-27T08:55:27", "upload_time_iso_8601": "2018-09-27T08:55:27.860470Z", "url": "https://files.pythonhosted.org/packages/d2/95/0d229bcd30a502ac2e2f1ef57922448fd68be433c1295893a08ec561bfb9/pylt3-0.7.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "768ab1160940b8b6e6fbea7f2d48d3c8", "sha256": "212537bba1afe908e450bb447d6770198edf81aed135d5d2f487c48f8b250257"}, "downloads": -1, "filename": "pylt3-0.7.0.tar.gz", "has_sig": false, "md5_digest": "768ab1160940b8b6e6fbea7f2d48d3c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9064, "upload_time": "2018-09-27T08:55:29", "upload_time_iso_8601": "2018-09-27T08:55:29.516923Z", "url": "https://files.pythonhosted.org/packages/32/98/01a6ea878bd71d738998aae0635577d7cf403c9149f3e91f64400dd67177/pylt3-0.7.0.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "82a6a0a61b293f887a07704d765609b4", "sha256": "ec76ebb8506049e19fae199088241f97414d8e6a9a7d1f4125df34e70ac0f4f7"}, "downloads": -1, "filename": "pylt3-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "82a6a0a61b293f887a07704d765609b4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7383, "upload_time": "2018-10-02T08:32:23", "upload_time_iso_8601": "2018-10-02T08:32:23.867746Z", "url": "https://files.pythonhosted.org/packages/85/a8/3913d57dc906ac25192871db7674181d7ae694124381db0ced0386926e6d/pylt3-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ef9b2434aacd7e35ff1618abad2457d", "sha256": "c8b910849ba9f5f7eb77ee7b9ac6d0f1d353b706bd47fde257604fa7cf58c597"}, "downloads": -1, "filename": "pylt3-0.7.1.tar.gz", "has_sig": false, "md5_digest": "4ef9b2434aacd7e35ff1618abad2457d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9053, "upload_time": "2018-10-02T08:32:25", "upload_time_iso_8601": "2018-10-02T08:32:25.808311Z", "url": "https://files.pythonhosted.org/packages/6a/8f/923e8c9b16471a6c619721d087dc7f96a0a005c949187f6cba0eaaef73e5/pylt3-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "79175c97fd83fe68f6651a2ea050d950", "sha256": "1f21d22d68266334a650f81c804add1eef3eab94e4dae8fc63f37f54286f82ef"}, "downloads": -1, "filename": "pylt3-0.7.2-py3-none-any.whl", "has_sig": false, "md5_digest": "79175c97fd83fe68f6651a2ea050d950", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7384, "upload_time": "2018-10-02T08:56:29", "upload_time_iso_8601": "2018-10-02T08:56:29.128632Z", "url": "https://files.pythonhosted.org/packages/92/a1/e02fd4c5814731e350543c8765a4a7e667d8490c42d1dc8f3da4ddf08cbc/pylt3-0.7.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "806fc10b61e877f41074f482075ff663", "sha256": "2f77fd1335c77581815b7cc04a7461fadcdcdf6eaf55d0c072b7df2dbdd04359"}, "downloads": -1, "filename": "pylt3-0.7.2.tar.gz", "has_sig": false, "md5_digest": "806fc10b61e877f41074f482075ff663", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9044, "upload_time": "2018-10-02T08:56:30", "upload_time_iso_8601": "2018-10-02T08:56:30.293278Z", "url": "https://files.pythonhosted.org/packages/c2/0e/c5a7cf8308abed81eba8957b4f8f814e6fb18208995988e090b3189ebe8f/pylt3-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "6f09e193df1a16ce49f944df9c344659", "sha256": "ffd520d6baf7d9ab1eabe3778998b2dc5a19d2951c25600778a35bf01f7262fe"}, "downloads": -1, "filename": "pylt3-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6f09e193df1a16ce49f944df9c344659", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8423, "upload_time": "2019-01-18T09:14:28", "upload_time_iso_8601": "2019-01-18T09:14:28.078822Z", "url": "https://files.pythonhosted.org/packages/3a/e1/11a496e554d8c0a8c413e186531da5383d0d9f655c7cedd8bc96659542ea/pylt3-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ab5f6a108750a14638c664bd7763497", "sha256": "fe2d2b7534eb037332faf725a9394a4e0b8af801e2d1523b6f9aec5175f439fb"}, "downloads": -1, "filename": "pylt3-0.7.3.tar.gz", "has_sig": false, "md5_digest": "5ab5f6a108750a14638c664bd7763497", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9197, "upload_time": "2019-01-18T09:14:29", "upload_time_iso_8601": "2019-01-18T09:14:29.218517Z", "url": "https://files.pythonhosted.org/packages/fd/8e/04b6ec300810c85f9909edd44bf6ecab2499e9abf615b50ee6ab22e0f88c/pylt3-0.7.3.tar.gz", "yanked": false}], "0.7.6": [{"comment_text": "", "digests": {"md5": "5d5d6a51f828cc9ed1bdeba239c88a03", "sha256": "094199debe2b7e986935dce6c5e6786b9ab47cb92b57c6e83c59a0eb005f20ac"}, "downloads": -1, "filename": "pylt3-0.7.6-py3-none-any.whl", "has_sig": false, "md5_digest": "5d5d6a51f828cc9ed1bdeba239c88a03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5419, "upload_time": "2019-07-25T14:08:44", "upload_time_iso_8601": "2019-07-25T14:08:44.203109Z", "url": "https://files.pythonhosted.org/packages/2f/46/a4a2e50837e0d2946942c220385b91552ed7da31c85ee78f7e48adf4f863/pylt3-0.7.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb3160818eff698fa895f7848c0012d4", "sha256": "416aa432bf0a834cac24c79de321a2e1f239b7c2952d39e8747fc74d3c650528"}, "downloads": -1, "filename": "pylt3-0.7.6.tar.gz", "has_sig": false, "md5_digest": "eb3160818eff698fa895f7848c0012d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 85514, "upload_time": "2019-07-25T14:08:45", "upload_time_iso_8601": "2019-07-25T14:08:45.740215Z", "url": "https://files.pythonhosted.org/packages/3f/e8/053b34d9cfec7e39cc75105005822485d20ab9f0cc53851fc7723c15e5c6/pylt3-0.7.6.tar.gz", "yanked": false}], "0.7.7": [{"comment_text": "", "digests": {"md5": "f9b6992de163e67f2b2f613351ff9387", "sha256": "12877b0b67641b7a849eba0ae5e5c2f5ae119d43d35ea3c6cc5c99ec12ee89f8"}, "downloads": -1, "filename": "pylt3-0.7.7-py3-none-any.whl", "has_sig": false, "md5_digest": "f9b6992de163e67f2b2f613351ff9387", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 382021, "upload_time": "2019-07-25T15:33:08", "upload_time_iso_8601": "2019-07-25T15:33:08.207145Z", "url": "https://files.pythonhosted.org/packages/cc/1a/f2b7597c641181a2d4f91072c33d3c2f610c66a14808921e2904c8c36783/pylt3-0.7.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e6b6a4c298ae17eba5b9db538623f8d", "sha256": "cee3bfdd44e65fe1b985e6d8a983eab5e645a3d17b5fea950598b445eccaf05f"}, "downloads": -1, "filename": "pylt3-0.7.7.tar.gz", "has_sig": false, "md5_digest": "5e6b6a4c298ae17eba5b9db538623f8d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 85572, "upload_time": "2019-07-25T15:33:10", "upload_time_iso_8601": "2019-07-25T15:33:10.141950Z", "url": "https://files.pythonhosted.org/packages/8c/6f/1c4c4c89ce3555698fe12e2f5800d1a08d08a1142cc51b8ca6d420d42dc8/pylt3-0.7.7.tar.gz", "yanked": false}], "0.7.8": [{"comment_text": "", "digests": {"md5": "a7420a5389fb47246e6bbf7cdbec6043", "sha256": "7f2297e938e0729962a9d81863ca815432cbffd19bc7b5d087ccb1bbe4a9847a"}, "downloads": -1, "filename": "pylt3-0.7.8-py3-none-any.whl", "has_sig": false, "md5_digest": "a7420a5389fb47246e6bbf7cdbec6043", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5395, "upload_time": "2019-08-25T15:57:15", "upload_time_iso_8601": "2019-08-25T15:57:15.836218Z", "url": "https://files.pythonhosted.org/packages/ba/25/38affc457e39655d45b6465e42ba6c9d0422cfdbaa1254b35ceb403ff53a/pylt3-0.7.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6d2d63d786569c39a925cb23078c09af", "sha256": "80135b870ea5fcb2323fa5caa47832712d53d5e7ff2629b4eac1b816e9acb581"}, "downloads": -1, "filename": "pylt3-0.7.8.tar.gz", "has_sig": false, "md5_digest": "6d2d63d786569c39a925cb23078c09af", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23539, "upload_time": "2019-08-25T15:57:17", "upload_time_iso_8601": "2019-08-25T15:57:17.455122Z", "url": "https://files.pythonhosted.org/packages/a6/fc/9383f3259e0b5e264f5c413e5aeeadd4124e23f1fac96e5febbd2c2ffc6c/pylt3-0.7.8.tar.gz", "yanked": false}], "0.7.9": [{"comment_text": "", "digests": {"md5": "3a4a80f9d0be7fefe0cca49655f37500", "sha256": "5d1a54a5748bedb17272ffac23e5b90c6605287fe0d3f7e8755faa2697078dae"}, "downloads": -1, "filename": "pylt3-0.7.9-py3-none-any.whl", "has_sig": false, "md5_digest": "3a4a80f9d0be7fefe0cca49655f37500", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22469, "upload_time": "2019-08-30T11:58:07", "upload_time_iso_8601": "2019-08-30T11:58:07.702789Z", "url": "https://files.pythonhosted.org/packages/5e/e7/a4e6881eb72cd0636abd403eef3db4b5758c883ae9ab493ac780cab1ae3b/pylt3-0.7.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "58174624121cb83b632c2b49542e3c74", "sha256": "a0f54c59f32b22f209f9620af0257804aca5b1d099d92d4fc1ee64b453d81ec5"}, "downloads": -1, "filename": "pylt3-0.7.9.tar.gz", "has_sig": false, "md5_digest": "58174624121cb83b632c2b49542e3c74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23556, "upload_time": "2019-08-30T11:58:09", "upload_time_iso_8601": "2019-08-30T11:58:09.339862Z", "url": "https://files.pythonhosted.org/packages/4d/dd/1baa7199a315cde7f8868870a029c148f6dcf0b826aca3c912e832768038/pylt3-0.7.9.tar.gz", "yanked": false}], "0.8.0": [{"comment_text": "", "digests": {"md5": "c89048cfa9ad4891e34e52c22a476ce7", "sha256": "6639e5091df4cc4b0bffe3363c446dd3206bc5d475f7a29d571c0614ea93aabd"}, "downloads": -1, "filename": "pylt3-0.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c89048cfa9ad4891e34e52c22a476ce7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22491, "upload_time": "2019-09-02T15:14:45", "upload_time_iso_8601": "2019-09-02T15:14:45.504428Z", "url": "https://files.pythonhosted.org/packages/a9/c4/67af84a97aa11f91bf57ae55535b5c070a0d64bc22ac101be74ff7aafe08/pylt3-0.8.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2db7ebebc1c9d4466ec9e270b4d134b0", "sha256": "9ba272c73bbe115dc8565328b9331148abfa34a3a800d826860e520e74390d50"}, "downloads": -1, "filename": "pylt3-0.8.0.tar.gz", "has_sig": false, "md5_digest": "2db7ebebc1c9d4466ec9e270b4d134b0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23602, "upload_time": "2019-09-02T15:14:47", "upload_time_iso_8601": "2019-09-02T15:14:47.558972Z", "url": "https://files.pythonhosted.org/packages/8b/78/d35ef5bcbc78b3b38112fbee764bd59cd606e0fb1ae2091a8f5414a91331/pylt3-0.8.0.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "365ef0f222c65ff639b9ec64809a64ec", "sha256": "25a467ff7371ce394cbea7526638763a5c6ed4fdbe7b8b23ae7237242f157cd5"}, "downloads": -1, "filename": "pylt3-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "365ef0f222c65ff639b9ec64809a64ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22492, "upload_time": "2019-09-09T08:51:07", "upload_time_iso_8601": "2019-09-09T08:51:07.522713Z", "url": "https://files.pythonhosted.org/packages/6f/75/bed6dbd10972be5c91466617f47e6855ad5d73f7365c314f1ad33c54e5de/pylt3-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37879036a3553527b13aab5dae57991c", "sha256": "3d9532639e2ad88ede53a25bfacd7ac9d870e2c90b2e161a5ac7f1b6bf5c43d3"}, "downloads": -1, "filename": "pylt3-0.8.1.tar.gz", "has_sig": false, "md5_digest": "37879036a3553527b13aab5dae57991c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23648, "upload_time": "2019-09-09T08:51:09", "upload_time_iso_8601": "2019-09-09T08:51:09.415362Z", "url": "https://files.pythonhosted.org/packages/58/f6/44a95da41f80ce44e6d0e04babdb45fe2c9dd82965a4cfb0a4ed6e3786d7/pylt3-0.8.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "365ef0f222c65ff639b9ec64809a64ec", "sha256": "25a467ff7371ce394cbea7526638763a5c6ed4fdbe7b8b23ae7237242f157cd5"}, "downloads": -1, "filename": "pylt3-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "365ef0f222c65ff639b9ec64809a64ec", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22492, "upload_time": "2019-09-09T08:51:07", "upload_time_iso_8601": "2019-09-09T08:51:07.522713Z", "url": "https://files.pythonhosted.org/packages/6f/75/bed6dbd10972be5c91466617f47e6855ad5d73f7365c314f1ad33c54e5de/pylt3-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "37879036a3553527b13aab5dae57991c", "sha256": "3d9532639e2ad88ede53a25bfacd7ac9d870e2c90b2e161a5ac7f1b6bf5c43d3"}, "downloads": -1, "filename": "pylt3-0.8.1.tar.gz", "has_sig": false, "md5_digest": "37879036a3553527b13aab5dae57991c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23648, "upload_time": "2019-09-09T08:51:09", "upload_time_iso_8601": "2019-09-09T08:51:09.415362Z", "url": "https://files.pythonhosted.org/packages/58/f6/44a95da41f80ce44e6d0e04babdb45fe2c9dd82965a4cfb0a4ed6e3786d7/pylt3-0.8.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:43 2020"}