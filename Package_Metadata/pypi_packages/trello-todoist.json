{"info": {"author": "Dean Malmgren", "author_email": "dean.malmgren@datascopeanalytics.com", "bugtrack_url": null, "classifiers": [], "description": "Trello's email reminder system is broken (in my view); it sends email reminders\nthe day before you specify a due date. I can imagine scenarios where this is\nnice, but it is very counterintuitive to me. Trello also doesn't have webhooks\nassociated with due dates, so services like IFTTT or Zapier are unable to\naccomplish the functionality I want: add todoist tasks from Trello on the day\nthey are due.\n\n`trello-todoist` is a hack to add trello cards to todoist on the day that they\nare due. It is intended to be set up as a cronjob with a crontab entry like:\n\n```\n53 3 * * * trello-todoist 'trello board' 'trello username' 'todoist project'\n```\n\nwhich runs `trello-todoist` every morning at 3:53 a.m. By default, this adds\nall trello cards that are due today from board `trello board` of which `trello\nusername` is a member as a task to the corresponding `todoist project`.\nDepending on the version of `requests` that is installed via python\ndependencies, you may also want to use `PYTHONWARNINGS=ignore` somewhere in\nyour crontab to avoid being sent warnings every time the script is run.\n\n## quick start\n\n1. install `trello-todoist` from pypi:\n    ```sh\n    pip install trello-todoist\n    ```\n\n1. get your trello api key and secret [from here](https://trello.com/app-key)\n   and get your oauth tokens:\n    ```sh\n    export TRELLO_API_KEY=your-key\n    export TRELLO_API_SECRET=your-secret\n    export TRELLO_EXPIRATION=never\n    python -m trello.util\n    # follow instructions\n    ```\n\n1. get your todoist api token from the todoist `Settings` > `Account` > `API\n   token`.\n\n1. place your trello credentials in a `trello.json` file in the repository root\n   that looks like this:\n    ```json\n    {\n        \"api_key\": \"your-key\",\n        \"api_secret\": \"your-secret\",\n        \"token\": \"your-oauth-token-key\",\n        \"token_secret\": \"your-oauth-token-secret\"\n    }\n    ```\n\n1. place your todoist api token in a `todoist.json` file in the repository root\n   that looks like this:\n   ```json\n   {\n       \"token\": \"your-token\"\n   }\n   ```\n\n1. :boom: For usage instructions, see\n  ```sh\n  trello-todoist -h\n  ```\n\n\n## development\n\n1. instantiate virtual environment\n    ```sh\n    mkvirtualenv trello-todoist\n    pip install -r requirements/python-dev\n    ```\n\n1. follow the quick start instructions above to get your trello and todoist\n   credentials.", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/deanmalmgren/trello-todoist/archives/master", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/deanmalmgren/trello-todoist", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "trello-todoist", "package_url": "https://pypi.org/project/trello-todoist/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/trello-todoist/", "project_urls": {"Download": "https://github.com/deanmalmgren/trello-todoist/archives/master", "Homepage": "https://github.com/deanmalmgren/trello-todoist"}, "release_url": "https://pypi.org/project/trello-todoist/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "convert due trello cards to todoist tasks", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Trello's email reminder system is broken (in my view); it sends email reminders<br>the day before you specify a due date. I can imagine scenarios where this is<br>nice, but it is very counterintuitive to me. Trello also doesn't have webhooks<br>associated with due dates, so services like IFTTT or Zapier are unable to<br>accomplish the functionality I want: add todoist tasks from Trello on the day<br>they are due.<br><br>`trello-todoist` is a hack to add trello cards to todoist on the day that they<br>are due. It is intended to be set up as a cronjob with a crontab entry like:<br><br>```<br>53 3 * * * trello-todoist 'trello board' 'trello username' 'todoist project'<br>```<br><br>which runs `trello-todoist` every morning at 3:53 a.m. By default, this adds<br>all trello cards that are due today from board `trello board` of which `trello<br>username` is a member as a task to the corresponding `todoist project`.<br>Depending on the version of `requests` that is installed via python<br>dependencies, you may also want to use `PYTHONWARNINGS=ignore` somewhere in<br>your crontab to avoid being sent warnings every time the script is run.<br><br>## quick start<br><br>1. install `trello-todoist` from pypi:<br>    ```sh<br>    pip install trello-todoist<br>    ```<br><br>1. get your trello api key and secret [from here](https://trello.com/app-key)<br>   and get your oauth tokens:<br>    ```sh<br>    export TRELLO_API_KEY=your-key<br>    export TRELLO_API_SECRET=your-secret<br>    export TRELLO_EXPIRATION=never<br>    python -m trello.util<br>    # follow instructions<br>    ```<br><br>1. get your todoist api token from the todoist `Settings` &gt; `Account` &gt; `API<br>   token`.<br><br>1. place your trello credentials in a `trello.json` file in the repository root<br>   that looks like this:<br>    ```json<br>    {<br>        \"api_key\": \"your-key\",<br>        \"api_secret\": \"your-secret\",<br>        \"token\": \"your-oauth-token-key\",<br>        \"token_secret\": \"your-oauth-token-secret\"<br>    }<br>    ```<br><br>1. place your todoist api token in a `todoist.json` file in the repository root<br>   that looks like this:<br>   ```json<br>   {<br>       \"token\": \"your-token\"<br>   }<br>   ```<br><br>1. :boom: For usage instructions, see<br>  ```sh<br>  trello-todoist -h<br>  ```<br><br><br>## development<br><br>1. instantiate virtual environment<br>    ```sh<br>    mkvirtualenv trello-todoist<br>    pip install -r requirements/python-dev<br>    ```<br><br>1. follow the quick start instructions above to get your trello and todoist<br>   credentials.\n          </div>"}, "last_serial": 2183768, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "23de2733469591294db34068f7ba47d9", "sha256": "ed729742b545f1095a284460ba0f282c4bc004646fed1155ef9563a764a51df8"}, "downloads": -1, "filename": "trello-todoist-0.1.0.tar.gz", "has_sig": false, "md5_digest": "23de2733469591294db34068f7ba47d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4372, "upload_time": "2016-06-10T10:00:27", "upload_time_iso_8601": "2016-06-10T10:00:27.604187Z", "url": "https://files.pythonhosted.org/packages/22/73/a3add32a72a4411f5e25e5899ac5d58edaec5ca2918905d856b40e96b267/trello-todoist-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "8f6c1fd0d435dc88f665349f31f1d36a", "sha256": "f83141e674609f79124d400a58acb140c7d15c7d5fefa089cb7e9cefb190706e"}, "downloads": -1, "filename": "trello-todoist-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f6c1fd0d435dc88f665349f31f1d36a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4800, "upload_time": "2016-06-23T16:59:33", "upload_time_iso_8601": "2016-06-23T16:59:33.533209Z", "url": "https://files.pythonhosted.org/packages/90/05/f2db1222fc75b6138d7310d03af9cc67e29f99584b17bf873466f87badbe/trello-todoist-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8f6c1fd0d435dc88f665349f31f1d36a", "sha256": "f83141e674609f79124d400a58acb140c7d15c7d5fefa089cb7e9cefb190706e"}, "downloads": -1, "filename": "trello-todoist-0.2.0.tar.gz", "has_sig": false, "md5_digest": "8f6c1fd0d435dc88f665349f31f1d36a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4800, "upload_time": "2016-06-23T16:59:33", "upload_time_iso_8601": "2016-06-23T16:59:33.533209Z", "url": "https://files.pythonhosted.org/packages/90/05/f2db1222fc75b6138d7310d03af9cc67e29f99584b17bf873466f87badbe/trello-todoist-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:28 2020"}