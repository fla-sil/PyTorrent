{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License (GPL)", "Programming Language :: Python :: 3"], "description": "# ncapi-client-python\n\nThis repository contains a python client for the NCAPI, and a\ncommand-line utility `ncs` that allows using this client.\n\nAll the methods for non-interactive tasks (e.g. dataset management,\ntraining, batch prediciton) are contained in the `ncapi_client.Client`\nclass, and all the methods for the interactive ones are contained in\nthe `ncapi_client.SessionClient`.\n\n## Installation\n\nYou can install the client by running:\n\n```bash\npip install .\n```\n\nFor development purposes, you probably want to install a \"editable\" version,\nwhich creates symlinks instead of actually copying stuff in the directories:\n```bash\npip install -e .\n```\n\n## General description\n\nThere are several sets of commands and utils for managing your data\nand models, which are exposed in all of the clients. Those are\ndescribed in more detail below.  For cli interface, `ncs`, you can see\nthe overall list of in the help doc:\n\n```bash\nCommands:\n  auth      Authenticate with your username and password.\n  dataset   Dataset management.\n  evaluate  Batch evaluation.\n  model     Model management.\n  predict   Batch prediction.\n  session   Interactive sessions management.\n  train     Training jobs management.\n```\n\n\n## Authentication\nIn order to connect to the API you should first authenticate with your\nusername and password, which will save your settings in `~/.config/ncs`.\nThe easiest way to do this is to run `ncs auth`:\n\n```bash\nncs auth\nPlease enter your username: ncadmin\nPlease enter your password:\nPlease enter API url [http://0.0.0.0:5000]:\n```\n\nYou can then use the python client and ncs, which will load and update\nyour settings when necessary.\n\nFor python, you can also create an instance of `ncapi_client.Client` and pass\nit credentials and API url (optional if you have custom installation):\n```python\nNCAPI_URL = 'https://cloud.neuralconcept.com:5000'\nNCAPI_USERNAME = 'ncuser'\nNCAPI_PASSWORD = 'ncpassword'\nc = Client(NCAPI_URL, NCAPI_USERNAME, NCAPI_PASSWORD)\n```\n\n## Managing datasets\n\nYou can add (upload) datasets in one of the supported formats (formats\nare described in the corresponding docs), and then use your datasets for training and testing\n\n```python\n# adding a dataset\nd = c.dataset_add(name=\"name-of-the-dataset\", path=\"/path/to/the/data\")\n\n# getting a dataset\nd = c.dataset_get(\"name-of-some-dataset\")\n\n# deleting the dataset\nc.dataset_delete(d.uuid)\n\n# listing the datasets\nfor d in c.datasets:\n  print(d.name, d.uuid, d.status)\n\n# listing the files in the dataset\nf = d.dataset_files_list()\n\n# getting a sample from the dataset\ns = d.dataset_samples_get(d.uuid, \"<sample-id>\")\n```\n\nFor CLI `ncs dataset COMMAND`\n```bash\n  add     Add a new NAME dataset located at local PATH.\n  delete  Deletes the dataset.\n  sam\n  files   Dataset file management.\n  get     Get verbose info about the dataset.\n  list    List all the datasets\n```\n\n## Managing models\n\nFor models, you can choose from a rich set of pre-defined model\ntemplates, which you can easily customise by simply editing a\nyaml-based config file. A typical config would look as follows:\n\n```yaml\n# training parameters\ntrain:\n  batch_size: 1\n  tag: alpha\n  num_steps: 1500000\n  optimizer:\n    init_lr: 1.0e-4\n    min_lr: 1.0e-6\n    decay_rate: 0.7\n    decay_every: 30000\n  loss:\n    loss_fn_name: null\n\n# model-specific parameters\nmodel:\n  name: name-of-your-model\n  # this is one of the standard model types\n  class_name: ncs.models.NormalizedRegressor\n  characteristic_len: 0.4\n  num_blocks: 8\n  block_width: 64\n```\n\nThere are two main blocks: `train` - which contains customizable\ntraining parameters such as the step size schedule, `model` - which\ncontains the definition of the model, i.e. it's name, the class name\n(type of the model), and model-specific settings, such as number of\nblocks or number of parameters per block (those will really depend on\na particular model type).\n\nFor python:\n```python\n# listing available models\nfor m in c.models:\n  print(m.uuid, m.name)\n\n# adding a model\nm = c.model_add('/path-to-your-model-config.yml'')\n\n# deleting a model\nc.model_delete(m.uuid)\n\n# getting verbose info about the model\nprint(c.model_get(m.uuid))\n```\n\nFor CLI `ncs model COMMAND`:\n```bash\nCommands:\n  add     Add a model with yaml config at PATH.\n  delete  Delete a model by UUID.\n  get     Get verbose info about the model.\n  list    List available models.\n```\n\n\n## Managing training jobs\n\nWith NCAPI you can run large-scale training jobs on a cluster (cloud\nbased or custom), without a need to worry about managing computational\nresources: our backend does it automatically.\n\nFor python:\n```python\n# list the trainings\nfor t in sorted(c.trainings, key=lambda v: v.uuid):\n    print(t.uuid, t.status)\n\n# stop one of the trainings\nc.training_stop(c.trainings[0].uuid)\n\n# restart one of the previously stopped trainings\nc.training_restart(c.trainings[0].uuid)\n\n# submit a new training\njob = c.training_submit(c.models[0].uuid, c.datasets[0].uuid)\n\n# you can also provide additional user config for the training\n# which overrides the model config, e.g. if you want to train\n# with different training step size schedule or try different loss\n# function\njob = c.training_submit(model, dataset, \"/path-to-custom-config\"\")\n\n```\n\nFor CLI:\n```bash\nCommands:\n  delete   Delete a training.\n  get      Get verbose information about a training.\n  list     List available trainings.\n  restart  Restart a training.\n  stop     Stop a training.\n  submit   Submit a training to the queue.\n```\n\n## Managing prediction jobs\n\nTODO: finish the python docs\n\nFor CLI, run `ncs predict COMMAND`:\n```bash\nCommands:\n  delete  Delete a prediction.\n  get     Get results of the prediction with UUID and save them in DST.\n  stop    Stop a prediction job.\n  submit  Submit a prediction job for a given MODEL and DATASET.\n```\n\n## Managing evaluation jobs\n\nTODO: finish the python docs\n\nFor CLI, run `ncs evaluate COMMAND`:\n```bash\nCommands:\n  delete   Delete an evaluation job.\n  get      Get summary metrics of the evaluation.\n  restart  Restart an evaluation job.\n  stop     Stop an evaluation job.\n  submit   Submit an evaluation job for a given MODEL and DATASET.\n```\n\n\n## Managing interactive sessions\n\nIn python:\n``` python\n# list running sessions\nfor s in c.sessions:\n  print(s)\n\nsession = c.session_start(model.id, dataset.id, sample.id)\nsession = c.session_get(session.id)\nprint(\"waiting while the session starts...\")\nwhile session.status != \"RUNNING\":\n    session = c.session_get(session.id)\n    time.sleep(1.0)\nprint(\"it has started!\")\n\n# start a session client and interactively play with your model\nsc = SessionClient(session, client=c)\n\n# get the current mesh (if supported by the model)\nverts, faces = sc.mesh\n\n# get the predictions (if supported by the model)\npreds = kc.predict(input_scalars=dict(angle=0.8, speed=0.5))\n\n# do some post-processing on field values\nfields = np.clip(preds['fields'], 0, 10)\n\n# choosing some random control points and applying a random deformation\ncontrol_points = verts[np.random.choice(verts.shape[0], size=2)]\ncp_deformations = np.random.normal(scale=0.1, size=control_points.shape)\n\nsc.apply_deformation(\n     control_points=control_points,\n     cp_deformations=cp_deformations,\n)\n\n# get updated mesh and predictions\nverts, faces = sc.mesh\npreds = sc.predict(input_scalars=dict(angle=0.8, speed=0.5))\n```\n\nIn CLI, you can run some of the high-level commands via `ncs session COMMAND`:\n```bash\nCommands:\n  delete  Delete an existing session.\n  list    List of interactive sessions.\n  start   Start an interactive session with a given model and dataset\n```\n\n# Documentation\nTo update the html docs, you will need sphinx >= 2.0. You can then go in ncapi-python-client root directory and run\n```\nsphinx-build -b html docs/ docs/_build/html/\n```\nCorresponding docs will be created in the docs/_build/html folder.\nIf you added new modules, you might want to create new *.rst files in the docs/ folder for these modules.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ncapi-client", "package_url": "https://pypi.org/project/ncapi-client/", "platform": "", "project_url": "https://pypi.org/project/ncapi-client/", "project_urls": null, "release_url": "https://pypi.org/project/ncapi-client/0.2.7/", "requires_dist": ["requests", "websockets", "click (>=7.0)", "halo", "tabulate", "tqdm", "nest-asyncio", "numpy", "pyyaml", "matplotlib", "ipywidgets", "parso (>=0.5.1)", "google-resumable-media (==0.3.2)"], "requires_python": ">=3.6", "summary": "Python client for NCAPI", "version": "0.2.7", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>ncapi-client-python</h1>\n<p>This repository contains a python client for the NCAPI, and a\ncommand-line utility <code>ncs</code> that allows using this client.</p>\n<p>All the methods for non-interactive tasks (e.g. dataset management,\ntraining, batch prediciton) are contained in the <code>ncapi_client.Client</code>\nclass, and all the methods for the interactive ones are contained in\nthe <code>ncapi_client.SessionClient</code>.</p>\n<h2>Installation</h2>\n<p>You can install the client by running:</p>\n<pre>pip install .\n</pre>\n<p>For development purposes, you probably want to install a \"editable\" version,\nwhich creates symlinks instead of actually copying stuff in the directories:</p>\n<pre>pip install -e .\n</pre>\n<h2>General description</h2>\n<p>There are several sets of commands and utils for managing your data\nand models, which are exposed in all of the clients. Those are\ndescribed in more detail below.  For cli interface, <code>ncs</code>, you can see\nthe overall list of in the help doc:</p>\n<pre>Commands:\n  auth      Authenticate with your username and password.\n  dataset   Dataset management.\n  evaluate  Batch evaluation.\n  model     Model management.\n  predict   Batch prediction.\n  session   Interactive sessions management.\n  train     Training <span class=\"nb\">jobs</span> management.\n</pre>\n<h2>Authentication</h2>\n<p>In order to connect to the API you should first authenticate with your\nusername and password, which will save your settings in <code>~/.config/ncs</code>.\nThe easiest way to do this is to run <code>ncs auth</code>:</p>\n<pre>ncs auth\nPlease enter your username: ncadmin\nPlease enter your password:\nPlease enter API url <span class=\"o\">[</span>http://0.0.0.0:5000<span class=\"o\">]</span>:\n</pre>\n<p>You can then use the python client and ncs, which will load and update\nyour settings when necessary.</p>\n<p>For python, you can also create an instance of <code>ncapi_client.Client</code> and pass\nit credentials and API url (optional if you have custom installation):</p>\n<pre><span class=\"n\">NCAPI_URL</span> <span class=\"o\">=</span> <span class=\"s1\">'https://cloud.neuralconcept.com:5000'</span>\n<span class=\"n\">NCAPI_USERNAME</span> <span class=\"o\">=</span> <span class=\"s1\">'ncuser'</span>\n<span class=\"n\">NCAPI_PASSWORD</span> <span class=\"o\">=</span> <span class=\"s1\">'ncpassword'</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">(</span><span class=\"n\">NCAPI_URL</span><span class=\"p\">,</span> <span class=\"n\">NCAPI_USERNAME</span><span class=\"p\">,</span> <span class=\"n\">NCAPI_PASSWORD</span><span class=\"p\">)</span>\n</pre>\n<h2>Managing datasets</h2>\n<p>You can add (upload) datasets in one of the supported formats (formats\nare described in the corresponding docs), and then use your datasets for training and testing</p>\n<pre><span class=\"c1\"># adding a dataset</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">dataset_add</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s2\">\"name-of-the-dataset\"</span><span class=\"p\">,</span> <span class=\"n\">path</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/the/data\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># getting a dataset</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">dataset_get</span><span class=\"p\">(</span><span class=\"s2\">\"name-of-some-dataset\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># deleting the dataset</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">dataset_delete</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># listing the datasets</span>\n<span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># listing the files in the dataset</span>\n<span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">dataset_files_list</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># getting a sample from the dataset</span>\n<span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">dataset_samples_get</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"s2\">\"&lt;sample-id&gt;\"</span><span class=\"p\">)</span>\n</pre>\n<p>For CLI <code>ncs dataset COMMAND</code></p>\n<pre>  add     Add a new NAME dataset located at <span class=\"nb\">local</span> PATH.\n  delete  Deletes the dataset.\n  sam\n  files   Dataset file management.\n  get     Get verbose info about the dataset.\n  list    List all the datasets\n</pre>\n<h2>Managing models</h2>\n<p>For models, you can choose from a rich set of pre-defined model\ntemplates, which you can easily customise by simply editing a\nyaml-based config file. A typical config would look as follows:</p>\n<pre><span class=\"c1\"># training parameters</span>\n<span class=\"nt\">train</span><span class=\"p\">:</span>\n  <span class=\"nt\">batch_size</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1</span>\n  <span class=\"nt\">tag</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">alpha</span>\n  <span class=\"nt\">num_steps</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1500000</span>\n  <span class=\"nt\">optimizer</span><span class=\"p\">:</span>\n    <span class=\"nt\">init_lr</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0e-4</span>\n    <span class=\"nt\">min_lr</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">1.0e-6</span>\n    <span class=\"nt\">decay_rate</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.7</span>\n    <span class=\"nt\">decay_every</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">30000</span>\n  <span class=\"nt\">loss</span><span class=\"p\">:</span>\n    <span class=\"nt\">loss_fn_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">null</span>\n\n<span class=\"c1\"># model-specific parameters</span>\n<span class=\"nt\">model</span><span class=\"p\">:</span>\n  <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">name-of-your-model</span>\n  <span class=\"c1\"># this is one of the standard model types</span>\n  <span class=\"nt\">class_name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">ncs.models.NormalizedRegressor</span>\n  <span class=\"nt\">characteristic_len</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">0.4</span>\n  <span class=\"nt\">num_blocks</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">8</span>\n  <span class=\"nt\">block_width</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">64</span>\n</pre>\n<p>There are two main blocks: <code>train</code> - which contains customizable\ntraining parameters such as the step size schedule, <code>model</code> - which\ncontains the definition of the model, i.e. it's name, the class name\n(type of the model), and model-specific settings, such as number of\nblocks or number of parameters per block (those will really depend on\na particular model type).</p>\n<p>For python:</p>\n<pre><span class=\"c1\"># listing available models</span>\n<span class=\"k\">for</span> <span class=\"n\">m</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># adding a model</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">model_add</span><span class=\"p\">(</span><span class=\"s1\">'/path-to-your-model-config.yml'')</span>\n\n<span class=\"c1\"># deleting a model</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">model_delete</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># getting verbose info about the model</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">model_get</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">))</span>\n</pre>\n<p>For CLI <code>ncs model COMMAND</code>:</p>\n<pre>Commands:\n  add     Add a model with yaml config at PATH.\n  delete  Delete a model by UUID.\n  get     Get verbose info about the model.\n  list    List available models.\n</pre>\n<h2>Managing training jobs</h2>\n<p>With NCAPI you can run large-scale training jobs on a cluster (cloud\nbased or custom), without a need to worry about managing computational\nresources: our backend does it automatically.</p>\n<p>For python:</p>\n<pre><span class=\"c1\"># list the trainings</span>\n<span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"nb\">sorted</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">trainings</span><span class=\"p\">,</span> <span class=\"n\">key</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">v</span><span class=\"p\">:</span> <span class=\"n\">v</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># stop one of the trainings</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">training_stop</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">trainings</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># restart one of the previously stopped trainings</span>\n<span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">training_restart</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">trainings</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># submit a new training</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">training_submit</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">models</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">datasets</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">uuid</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># you can also provide additional user config for the training</span>\n<span class=\"c1\"># which overrides the model config, e.g. if you want to train</span>\n<span class=\"c1\"># with different training step size schedule or try different loss</span>\n<span class=\"c1\"># function</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">training_submit</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"p\">,</span> <span class=\"s2\">\"/path-to-custom-config\"\")</span>\n</pre>\n<p>For CLI:</p>\n<pre>Commands:\n  delete   Delete a training.\n  get      Get verbose information about a training.\n  list     List available trainings.\n  restart  Restart a training.\n  stop     Stop a training.\n  submit   Submit a training to the queue.\n</pre>\n<h2>Managing prediction jobs</h2>\n<p>TODO: finish the python docs</p>\n<p>For CLI, run <code>ncs predict COMMAND</code>:</p>\n<pre>Commands:\n  delete  Delete a prediction.\n  get     Get results of the prediction with UUID and save them in DST.\n  stop    Stop a prediction job.\n  submit  Submit a prediction job <span class=\"k\">for</span> a given MODEL and DATASET.\n</pre>\n<h2>Managing evaluation jobs</h2>\n<p>TODO: finish the python docs</p>\n<p>For CLI, run <code>ncs evaluate COMMAND</code>:</p>\n<pre>Commands:\n  delete   Delete an evaluation job.\n  get      Get summary metrics of the evaluation.\n  restart  Restart an evaluation job.\n  stop     Stop an evaluation job.\n  submit   Submit an evaluation job <span class=\"k\">for</span> a given MODEL and DATASET.\n</pre>\n<h2>Managing interactive sessions</h2>\n<p>In python:</p>\n<pre><span class=\"c1\"># list running sessions</span>\n<span class=\"k\">for</span> <span class=\"n\">s</span> <span class=\"ow\">in</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">sessions</span><span class=\"p\">:</span>\n  <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">s</span><span class=\"p\">)</span>\n\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">session_start</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">session_get</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"waiting while the session starts...\"</span><span class=\"p\">)</span>\n<span class=\"k\">while</span> <span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"s2\">\"RUNNING\"</span><span class=\"p\">:</span>\n    <span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">session_get</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">1.0</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"it has started!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># start a session client and interactively play with your model</span>\n<span class=\"n\">sc</span> <span class=\"o\">=</span> <span class=\"n\">SessionClient</span><span class=\"p\">(</span><span class=\"n\">session</span><span class=\"p\">,</span> <span class=\"n\">client</span><span class=\"o\">=</span><span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the current mesh (if supported by the model)</span>\n<span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">mesh</span>\n\n<span class=\"c1\"># get the predictions (if supported by the model)</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">kc</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">input_scalars</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># do some post-processing on field values</span>\n<span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">clip</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">[</span><span class=\"s1\">'fields'</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># choosing some random control points and applying a random deformation</span>\n<span class=\"n\">control_points</span> <span class=\"o\">=</span> <span class=\"n\">verts</span><span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">choice</span><span class=\"p\">(</span><span class=\"n\">verts</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)]</span>\n<span class=\"n\">cp_deformations</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"n\">control_points</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">)</span>\n\n<span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">apply_deformation</span><span class=\"p\">(</span>\n     <span class=\"n\">control_points</span><span class=\"o\">=</span><span class=\"n\">control_points</span><span class=\"p\">,</span>\n     <span class=\"n\">cp_deformations</span><span class=\"o\">=</span><span class=\"n\">cp_deformations</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># get updated mesh and predictions</span>\n<span class=\"n\">verts</span><span class=\"p\">,</span> <span class=\"n\">faces</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">mesh</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">sc</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">input_scalars</span><span class=\"o\">=</span><span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"n\">angle</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">))</span>\n</pre>\n<p>In CLI, you can run some of the high-level commands via <code>ncs session COMMAND</code>:</p>\n<pre>Commands:\n  delete  Delete an existing session.\n  list    List of interactive sessions.\n  start   Start an interactive session with a given model and dataset\n</pre>\n<h1>Documentation</h1>\n<p>To update the html docs, you will need sphinx &gt;= 2.0. You can then go in ncapi-python-client root directory and run</p>\n<pre><code>sphinx-build -b html docs/ docs/_build/html/\n</code></pre>\n<p>Corresponding docs will be created in the docs/_build/html folder.\nIf you added new modules, you might want to create new *.rst files in the docs/ folder for these modules.</p>\n\n          </div>"}, "last_serial": 6704882, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "f18ed61006a33a338875650e02750b92", "sha256": "7db996a990da0cc4d9a24edd8ddbed13033a66d496bff847430a0a00d4ec8d2f"}, "downloads": -1, "filename": "ncapi_client-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f18ed61006a33a338875650e02750b92", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27380, "upload_time": "2019-10-13T15:22:46", "upload_time_iso_8601": "2019-10-13T15:22:46.190790Z", "url": "https://files.pythonhosted.org/packages/fe/71/e65c957e744e59837ce1c342ba625ad5bb64d0a3750db9f68e793d1c8aa4/ncapi_client-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f18bc3e9c2710799fc8208cbf177bec1", "sha256": "b8d583c61d396522f218fb084b75b8f70b0438166157144321ecfdefaedafdef"}, "downloads": -1, "filename": "ncapi-client-0.2.2.tar.gz", "has_sig": false, "md5_digest": "f18bc3e9c2710799fc8208cbf177bec1", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 20094, "upload_time": "2019-10-13T15:22:50", "upload_time_iso_8601": "2019-10-13T15:22:50.078024Z", "url": "https://files.pythonhosted.org/packages/ab/64/91175ef6564031aa085cd926f15a7c2b0100d6dc726589e4dbd0fbd7256b/ncapi-client-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "8fac73df6a02b5c81208f95395fa61d9", "sha256": "078a623206df0a5b5971d21072f95fb57dfd4a1a4a25ddb11acb0693dc341942"}, "downloads": -1, "filename": "ncapi_client-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "8fac73df6a02b5c81208f95395fa61d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41686, "upload_time": "2019-11-08T16:36:29", "upload_time_iso_8601": "2019-11-08T16:36:29.783125Z", "url": "https://files.pythonhosted.org/packages/b9/6a/2a112d044e5e41c2f30b9431bf219765b9a728ee4d4387140f5b86cc76f2/ncapi_client-0.2.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b3f36eecafa8ed7c81d8570a0eaeb14f", "sha256": "92b04fd693894d274adb460b58f389c6445f7dfcc2b3ed4e88832d279457c743"}, "downloads": -1, "filename": "ncapi-client-0.2.3.tar.gz", "has_sig": false, "md5_digest": "b3f36eecafa8ed7c81d8570a0eaeb14f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24284, "upload_time": "2019-11-08T16:36:32", "upload_time_iso_8601": "2019-11-08T16:36:32.035878Z", "url": "https://files.pythonhosted.org/packages/91/f5/5e5da99ce50219a094e7b6b542c96514007304b72ed9357b467692075124/ncapi-client-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "0dbc27b133e3c095da0c7e9cfe9e976c", "sha256": "014309fdfdb5d4c3b6e3f1a5de63101b5a84f03b0e5510eeef6208ad62eaa8bb"}, "downloads": -1, "filename": "ncapi_client-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "0dbc27b133e3c095da0c7e9cfe9e976c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41690, "upload_time": "2019-11-21T11:23:57", "upload_time_iso_8601": "2019-11-21T11:23:57.378976Z", "url": "https://files.pythonhosted.org/packages/d4/67/200db706f3b03ddd0faa91067c610a4407ab8d2b7c33cea14a3d27faf6be/ncapi_client-0.2.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5b0f2cacfcc652fe3f43037300293092", "sha256": "0d61593d914dca1fcd2cd93737580334de12c322fd55637413c8b1696cc8ed35"}, "downloads": -1, "filename": "ncapi-client-0.2.4.tar.gz", "has_sig": false, "md5_digest": "5b0f2cacfcc652fe3f43037300293092", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24281, "upload_time": "2019-11-21T11:23:59", "upload_time_iso_8601": "2019-11-21T11:23:59.017538Z", "url": "https://files.pythonhosted.org/packages/cc/c5/b2690b2a5d1403c1bc8c4c3f1c4dc930536c74bec2249ff02e224eb91089/ncapi-client-0.2.4.tar.gz", "yanked": false}], "0.2.5": [{"comment_text": "", "digests": {"md5": "85ee0784275834eda08684dcda2dd4a6", "sha256": "57cf0b2b805efff680c1aadd2e2f7af0e9eb5b3e9490465915ab201115392bc3"}, "downloads": -1, "filename": "ncapi_client-0.2.5-py3-none-any.whl", "has_sig": false, "md5_digest": "85ee0784275834eda08684dcda2dd4a6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40940, "upload_time": "2020-02-04T16:24:59", "upload_time_iso_8601": "2020-02-04T16:24:59.047501Z", "url": "https://files.pythonhosted.org/packages/77/4f/f8f3d421ee5eb78980cf4c47b06fffeca9ba3083fbba0d5fcf6c4a87c207/ncapi_client-0.2.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c7116329019f0bf91533f60fce9c539", "sha256": "da9cd5d9abd1fabb159747f97f4e7bde92bf4daea7b7af17984484d29f7016b6"}, "downloads": -1, "filename": "ncapi-client-0.2.5.tar.gz", "has_sig": false, "md5_digest": "6c7116329019f0bf91533f60fce9c539", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24398, "upload_time": "2020-02-04T16:25:00", "upload_time_iso_8601": "2020-02-04T16:25:00.531835Z", "url": "https://files.pythonhosted.org/packages/c6/6f/c95c88a5147cf690c212d050288332dfb5f8737eae132fc336e5d172c641/ncapi-client-0.2.5.tar.gz", "yanked": false}], "0.2.6": [{"comment_text": "", "digests": {"md5": "56c5fd5026fd166160b06c6449f0aa55", "sha256": "e4d923fcbd49219e754fd70eb136a2c9fd3ad8a3ab806c29a8913fcc442c9b0f"}, "downloads": -1, "filename": "ncapi_client-0.2.6-py3-none-any.whl", "has_sig": false, "md5_digest": "56c5fd5026fd166160b06c6449f0aa55", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41537, "upload_time": "2020-02-17T17:11:32", "upload_time_iso_8601": "2020-02-17T17:11:32.865027Z", "url": "https://files.pythonhosted.org/packages/27/2e/d1d759491d154e01471aadcce236ed18a24da7512a193797749517f5fa66/ncapi_client-0.2.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3cac7cd2d935ded3c2065580e115fcac", "sha256": "2f159e57458c0fbb3c3c0e11164f9a88831ac7492c9c420ece780c6a25b40dd4"}, "downloads": -1, "filename": "ncapi-client-0.2.6.tar.gz", "has_sig": false, "md5_digest": "3cac7cd2d935ded3c2065580e115fcac", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 24986, "upload_time": "2020-02-17T17:11:34", "upload_time_iso_8601": "2020-02-17T17:11:34.216072Z", "url": "https://files.pythonhosted.org/packages/a1/7b/ce37950c1a41019116761ed37b3f9c55c29956080ac7aef0689abf9f7901/ncapi-client-0.2.6.tar.gz", "yanked": false}], "0.2.7": [{"comment_text": "", "digests": {"md5": "89e149520136fef258435828ef62a6ba", "sha256": "be65074d2f645ff9ab1ec2df2e06f5b4074040898c233618a50e57402752e728"}, "downloads": -1, "filename": "ncapi_client-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "89e149520136fef258435828ef62a6ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41912, "upload_time": "2020-02-26T16:56:49", "upload_time_iso_8601": "2020-02-26T16:56:49.871649Z", "url": "https://files.pythonhosted.org/packages/2b/36/b8d75bc7a4fc2e5b6b61fd94f5de249ae53b9b2ba4c521484c0b2358b22a/ncapi_client-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc0c5dbc6d9673d4695916cc15655c74", "sha256": "761f0c410c2bc4a3e6a5d621af5022ae3079eb989ab1f3c9e4853039656ea2b2"}, "downloads": -1, "filename": "ncapi-client-0.2.7.tar.gz", "has_sig": false, "md5_digest": "dc0c5dbc6d9673d4695916cc15655c74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25238, "upload_time": "2020-02-26T16:56:51", "upload_time_iso_8601": "2020-02-26T16:56:51.559418Z", "url": "https://files.pythonhosted.org/packages/e5/bb/8216ebc4c884d93df7228c94442f3e6f16ca4adb53bbb22f661fdf131be5/ncapi-client-0.2.7.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "89e149520136fef258435828ef62a6ba", "sha256": "be65074d2f645ff9ab1ec2df2e06f5b4074040898c233618a50e57402752e728"}, "downloads": -1, "filename": "ncapi_client-0.2.7-py3-none-any.whl", "has_sig": false, "md5_digest": "89e149520136fef258435828ef62a6ba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41912, "upload_time": "2020-02-26T16:56:49", "upload_time_iso_8601": "2020-02-26T16:56:49.871649Z", "url": "https://files.pythonhosted.org/packages/2b/36/b8d75bc7a4fc2e5b6b61fd94f5de249ae53b9b2ba4c521484c0b2358b22a/ncapi_client-0.2.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc0c5dbc6d9673d4695916cc15655c74", "sha256": "761f0c410c2bc4a3e6a5d621af5022ae3079eb989ab1f3c9e4853039656ea2b2"}, "downloads": -1, "filename": "ncapi-client-0.2.7.tar.gz", "has_sig": false, "md5_digest": "dc0c5dbc6d9673d4695916cc15655c74", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 25238, "upload_time": "2020-02-26T16:56:51", "upload_time_iso_8601": "2020-02-26T16:56:51.559418Z", "url": "https://files.pythonhosted.org/packages/e5/bb/8216ebc4c884d93df7228c94442f3e6f16ca4adb53bbb22f661fdf131be5/ncapi-client-0.2.7.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:49 2020"}