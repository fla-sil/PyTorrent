{"info": {"author": "Aleksandra Fedorova", "author_email": "alpha@bookwar.info", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Operating System :: POSIX :: Linux", "Programming Language :: Python"], "description": "# Managing GPIO pins via character device\n\n## Basics\n\nFor the set of GPIO lines (pins) we create an object called `GPIOHandle`, which manages their state. State is a tuple of 0's and 1's, one number per line.\n\nThis library doesn't require root access to the system, but it needs a read-write access to the gpiochip device. By default it uses `/dev/gpiochip0`.\n\nTo allow read-write access to the device for the user, run:\n\n    $ sudo chmod a+rw /dev/gpiochip0\n\nNote that the system might have several GPIO chips, some of them can be exposed to the user (as /dev/gpiochip0 on Raspberry Pi) and some of them might be responsible for system functions, like WakeOnLan or system LED lights. Be carefull when choosing the device and allowing user access to it.\n\nYou can check the info on the GPIOChip device, by accessing its info() method. See example below.\n\n## Example\n\n```\nfrom gpiodev import GPIOHandle\nimport time\n\n# Request handle for lines 12 and 23 from default /dev/gpiochip0 \n\nDoubleLED = GPIOHandle((12,23))\n\n# Define states of the Double LED\n\nall = (1, 1)\nnone = (0, 0)\nfirst = (1, 0)\nsecond = (0, 1)\n\n# Loop through the states\n\nfor state in [all, none, first, second, none, all, none]:\n    DoubleLED.set_values(state)\n    print(DoubleLED.get_values())\n    time.sleep(1)\n```\n\n## Use another device\n\nTo use another gpiochip device, for example `/dev/gpiochip1`, you can use a different way to setup a handle:\n\n```\nfrom gpiodev import GPIOChip\n\nGPIO = GPIOChip(\"/dev/gpiochip1\")\n\n# Check info on the gpio chip\n\nprint(GPIO.info())\n\n# Request handle for lines 12 and 23 from /dev/gpiochip1\n\nDoubleLED = GPIO.get_handle((12,23)) # This will fail on RaspberryPi as /dev/gpiochip1 is a system gpio chip, with only 8 lines.\n\n```\n\n## Background\n\nNew GPIO interface has been\n[introduced](https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1a46712aa99594eabe1e9aeedf115dfff0db1dfd) in the kernel.\n\nIt exposes GPIO interface a character device(`/dev/gpiochip0`) and\nprovides several [ioctl\nsyscalls](https://github.com/torvalds/linux/blob/master/include/uapi/linux/gpio.h)\nfor bulk operations on sets of GPIO pins.\n\nUnlike Python bindings to the [libgpiod](https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/) C-library, we work with the kernel interface (ioctl calls) directly.\n\nIn [gpiodev/src/gpioctl.c](gpiodev/src/gpioctl.c) we wrap the ioctl calls into\nC-functions suitable for later use.\n\nIn [gpiodev/gpio.py](gpiodev/gpio.py) the ctypes bindings are created and then\nused to define the main GPIOHandle class.\n\n----\n\nTested on [Fedora 26+ armhfp](https://arm.fedoraproject.org), Raspberry Pi 3 Model B.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/bookwar/python-gpiodev", "keywords": "gpio,raspberry-pi", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "gpiodev", "package_url": "https://pypi.org/project/gpiodev/", "platform": "", "project_url": "https://pypi.org/project/gpiodev/", "project_urls": {"Homepage": "https://github.com/bookwar/python-gpiodev"}, "release_url": "https://pypi.org/project/gpiodev/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Library to operate GPIO pins via character device", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Managing GPIO pins via character device</h1>\n<h2>Basics</h2>\n<p>For the set of GPIO lines (pins) we create an object called <code>GPIOHandle</code>, which manages their state. State is a tuple of 0's and 1's, one number per line.</p>\n<p>This library doesn't require root access to the system, but it needs a read-write access to the gpiochip device. By default it uses <code>/dev/gpiochip0</code>.</p>\n<p>To allow read-write access to the device for the user, run:</p>\n<pre><code>$ sudo chmod a+rw /dev/gpiochip0\n</code></pre>\n<p>Note that the system might have several GPIO chips, some of them can be exposed to the user (as /dev/gpiochip0 on Raspberry Pi) and some of them might be responsible for system functions, like WakeOnLan or system LED lights. Be carefull when choosing the device and allowing user access to it.</p>\n<p>You can check the info on the GPIOChip device, by accessing its info() method. See example below.</p>\n<h2>Example</h2>\n<pre><code>from gpiodev import GPIOHandle\nimport time\n\n# Request handle for lines 12 and 23 from default /dev/gpiochip0 \n\nDoubleLED = GPIOHandle((12,23))\n\n# Define states of the Double LED\n\nall = (1, 1)\nnone = (0, 0)\nfirst = (1, 0)\nsecond = (0, 1)\n\n# Loop through the states\n\nfor state in [all, none, first, second, none, all, none]:\n    DoubleLED.set_values(state)\n    print(DoubleLED.get_values())\n    time.sleep(1)\n</code></pre>\n<h2>Use another device</h2>\n<p>To use another gpiochip device, for example <code>/dev/gpiochip1</code>, you can use a different way to setup a handle:</p>\n<pre><code>from gpiodev import GPIOChip\n\nGPIO = GPIOChip(\"/dev/gpiochip1\")\n\n# Check info on the gpio chip\n\nprint(GPIO.info())\n\n# Request handle for lines 12 and 23 from /dev/gpiochip1\n\nDoubleLED = GPIO.get_handle((12,23)) # This will fail on RaspberryPi as /dev/gpiochip1 is a system gpio chip, with only 8 lines.\n\n</code></pre>\n<h2>Background</h2>\n<p>New GPIO interface has been\n<a href=\"https://git.kernel.org/pub/scm/linux/kernel/git/torvalds/linux.git/commit/?id=1a46712aa99594eabe1e9aeedf115dfff0db1dfd\" rel=\"nofollow\">introduced</a> in the kernel.</p>\n<p>It exposes GPIO interface a character device(<code>/dev/gpiochip0</code>) and\nprovides several <a href=\"https://github.com/torvalds/linux/blob/master/include/uapi/linux/gpio.h\" rel=\"nofollow\">ioctl\nsyscalls</a>\nfor bulk operations on sets of GPIO pins.</p>\n<p>Unlike Python bindings to the <a href=\"https://git.kernel.org/pub/scm/libs/libgpiod/libgpiod.git/\" rel=\"nofollow\">libgpiod</a> C-library, we work with the kernel interface (ioctl calls) directly.</p>\n<p>In <a href=\"gpiodev/src/gpioctl.c\" rel=\"nofollow\">gpiodev/src/gpioctl.c</a> we wrap the ioctl calls into\nC-functions suitable for later use.</p>\n<p>In <a href=\"gpiodev/gpio.py\" rel=\"nofollow\">gpiodev/gpio.py</a> the ctypes bindings are created and then\nused to define the main GPIOHandle class.</p>\n<hr>\n<p>Tested on <a href=\"https://arm.fedoraproject.org\" rel=\"nofollow\">Fedora 26+ armhfp</a>, Raspberry Pi 3 Model B.</p>\n\n          </div>"}, "last_serial": 6356586, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ed2b0bb79c09174b6b0f0923463a7562", "sha256": "e49b9b75b118c7d433822dab72f0a45e83ef901005a825ddc36d88108e54e52d"}, "downloads": -1, "filename": "gpiodev-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ed2b0bb79c09174b6b0f0923463a7562", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10550, "upload_time": "2019-12-24T20:28:36", "upload_time_iso_8601": "2019-12-24T20:28:36.845726Z", "url": "https://files.pythonhosted.org/packages/b8/c8/8bbc19413ae5f0eec83f641f12c3517ed17aad9eecf85bb2e7580ceac537/gpiodev-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ed2b0bb79c09174b6b0f0923463a7562", "sha256": "e49b9b75b118c7d433822dab72f0a45e83ef901005a825ddc36d88108e54e52d"}, "downloads": -1, "filename": "gpiodev-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ed2b0bb79c09174b6b0f0923463a7562", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10550, "upload_time": "2019-12-24T20:28:36", "upload_time_iso_8601": "2019-12-24T20:28:36.845726Z", "url": "https://files.pythonhosted.org/packages/b8/c8/8bbc19413ae5f0eec83f641f12c3517ed17aad9eecf85bb2e7580ceac537/gpiodev-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:55:17 2020"}