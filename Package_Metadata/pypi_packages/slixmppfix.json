{"info": {"author": "Florent Le Coz", "author_email": "louiz@louiz.org", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: XMPP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Slixmpp\n#########\n\nSlixmpp is an MIT licensed XMPP library for Python 3.5+. It is a fork of\nSleekXMPP.\n\nSlixmpp's goals is to only rewrite the core of the library (the low level\nsocket handling, the timers, the events dispatching) in order to remove all\nthreads.\n\nBuilding\n--------\n\nSlixmpp can make use of cython to improve performance on critical modules.\nTo do that, **cython3** is necessary along with **libidn** headers.\nOtherwise, no compilation is needed. Building is done by running setup.py::\n\n    python3 setup.py build_ext --inplace\n\nDocumentation and Testing\n-------------------------\nDocumentation can be found both inline in the code, and as a Sphinx project in ``/docs``.\nTo generate the Sphinx documentation, follow the commands below. The HTML output will\nbe in ``docs/_build/html``::\n\n    cd docs\n    make html\n    open _build/html/index.html\n\nTo run the test suite for Slixmpp::\n\n    python run_tests.py\n\n\nThe Slixmpp Boilerplate\n-------------------------\nProjects using Slixmpp tend to follow a basic pattern for setting up client/component\nconnections and configuration. Here is the gist of the boilerplate needed for a Slixmpp\nbased project. See the documentation or examples directory for more detailed archetypes for\nSlixmpp projects::\n\n    import logging\n\n    from slixmpp import ClientXMPP\n    from slixmpp.exceptions import IqError, IqTimeout\n\n\n    class EchoBot(ClientXMPP):\n\n        def __init__(self, jid, password):\n            ClientXMPP.__init__(self, jid, password)\n\n            self.add_event_handler(\"session_start\", self.session_start)\n            self.add_event_handler(\"message\", self.message)\n\n            # If you wanted more functionality, here's how to register plugins:\n            # self.register_plugin('xep_0030') # Service Discovery\n            # self.register_plugin('xep_0199') # XMPP Ping\n\n            # Here's how to access plugins once you've registered them:\n            # self['xep_0030'].add_feature('echo_demo')\n\n            # If you are working with an OpenFire server, you will\n            # need to use a different SSL version:\n            # import ssl\n            # self.ssl_version = ssl.PROTOCOL_SSLv3\n\n        def session_start(self, event):\n            self.send_presence()\n            self.get_roster()\n\n            # Most get_*/set_* methods from plugins use Iq stanzas, which\n            # can generate IqError and IqTimeout exceptions\n            #\n            # try:\n            #     self.get_roster()\n            # except IqError as err:\n            #     logging.error('There was an error getting the roster')\n            #     logging.error(err.iq['error']['condition'])\n            #     self.disconnect()\n            # except IqTimeout:\n            #     logging.error('Server is taking too long to respond')\n            #     self.disconnect()\n\n        def message(self, msg):\n            if msg['type'] in ('chat', 'normal'):\n                msg.reply(\"Thanks for sending\\n%(body)s\" % msg).send()\n\n\n    if __name__ == '__main__':\n        # Ideally use optparse or argparse to get JID,\n        # password, and log level.\n\n        logging.basicConfig(level=logging.DEBUG,\n                            format='%(levelname)-8s %(message)s')\n\n        xmpp = EchoBot('somejid@example.com', 'use_getpass')\n        xmpp.connect()\n        xmpp.process(forever=True)\n\n\nSlixmpp Credits\n---------------\n\n**Maintainers:**\n    - Florent Le Coz (`louiz@louiz.org <xmpp:louiz@louiz.org?message>`_),\n    - Mathieu Pasquet (`mathieui@mathieui.net <xmpp:mathieui@mathieui.net?message>`_),\n\n**Contributors:**\n    - Emmanuel Gil Peyrot (`Link mauve <xmpp:linkmauve@linkmauve.fr?message>`_)\n    - Sam Whited (`Sam Whited <mailto:sam@samwhited.com>`_)\n    - Dan Sully (`Dan Sully <mailto:daniel@electricalrain.com>`_)\n    - Gasper Zejn (`Gasper Zejn <mailto:zejn@kiberpipa.org>`_)\n    - Krzysztof Kotlenga (`Krzysztof Kotlenga <mailto:pocek@users.sf.net>`_)\n    - Tsukasa Hiiragi (`Tsukasa Hiiragi <mailto:bakalolka@gmail.com>`_)\n    - Maxime Buquet (`pep <xmpp:pep@bouah.net?message>`_)\n\nCredits (SleekXMPP)\n-------------------\n\n**Main Author:** Nathan Fritz\n    `fritzy@netflint.net <xmpp:fritzy@netflint.net?message>`_,\n    `@fritzy <http://twitter.com/fritzy>`_\n\n    Nathan is also the author of XMPPHP and `Seesmic-AS3-XMPP\n    <http://code.google.com/p/seesmic-as3-xmpp/>`_, and a former member of\n    the XMPP Council.\n\n**Co-Author:** Lance Stout\n    `lancestout@gmail.com <xmpp:lancestout@gmail.com?message>`_,\n    `@lancestout <http://twitter.com/lancestout>`_\n\n**Contributors:**\n    - Brian Beggs (`macdiesel <http://github.com/macdiesel>`_)\n    - Dann Martens (`dannmartens <http://github.com/dannmartens>`_)\n    - Florent Le Coz (`louiz <http://github.com/louiz>`_)\n    - Kevin Smith (`Kev <http://github.com/Kev>`_, http://kismith.co.uk)\n    - Remko Tron\u00e7on (`remko <http://github.com/remko>`_, http://el-tramo.be)\n    - Te-j\u00e9 Rogers (`te-je <http://github.com/te-je>`_)\n    - Thom Nichols (`tomstrummer <http://github.com/tomstrummer>`_)", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://lab.louiz.org/poezio/slixmpp", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "slixmppfix", "package_url": "https://pypi.org/project/slixmppfix/", "platform": "any", "project_url": "https://pypi.org/project/slixmppfix/", "project_urls": {"Homepage": "https://lab.louiz.org/poezio/slixmpp"}, "release_url": "https://pypi.org/project/slixmppfix/1.4.3/", "requires_dist": null, "requires_python": "", "summary": "Slixmpp is an elegant Python library for XMPP (aka Jabber).", "version": "1.4.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Slixmpp is an MIT licensed XMPP library for Python 3.5+. It is a fork of\nSleekXMPP.</p>\n<p>Slixmpp\u2019s goals is to only rewrite the core of the library (the low level\nsocket handling, the timers, the events dispatching) in order to remove all\nthreads.</p>\n<div id=\"building\">\n<h2>Building</h2>\n<p>Slixmpp can make use of cython to improve performance on critical modules.\nTo do that, <strong>cython3</strong> is necessary along with <strong>libidn</strong> headers.\nOtherwise, no compilation is needed. Building is done by running setup.py:</p>\n<pre>python3 setup.py build_ext --inplace\n</pre>\n</div>\n<div id=\"documentation-and-testing\">\n<h2>Documentation and Testing</h2>\n<p>Documentation can be found both inline in the code, and as a Sphinx project in <tt>/docs</tt>.\nTo generate the Sphinx documentation, follow the commands below. The HTML output will\nbe in <tt>docs/_build/html</tt>:</p>\n<pre>cd docs\nmake html\nopen _build/html/index.html\n</pre>\n<p>To run the test suite for Slixmpp:</p>\n<pre>python run_tests.py\n</pre>\n</div>\n<div id=\"the-slixmpp-boilerplate\">\n<h2>The Slixmpp Boilerplate</h2>\n<p>Projects using Slixmpp tend to follow a basic pattern for setting up client/component\nconnections and configuration. Here is the gist of the boilerplate needed for a Slixmpp\nbased project. See the documentation or examples directory for more detailed archetypes for\nSlixmpp projects:</p>\n<pre>import logging\n\nfrom slixmpp import ClientXMPP\nfrom slixmpp.exceptions import IqError, IqTimeout\n\n\nclass EchoBot(ClientXMPP):\n\n    def __init__(self, jid, password):\n        ClientXMPP.__init__(self, jid, password)\n\n        self.add_event_handler(\"session_start\", self.session_start)\n        self.add_event_handler(\"message\", self.message)\n\n        # If you wanted more functionality, here's how to register plugins:\n        # self.register_plugin('xep_0030') # Service Discovery\n        # self.register_plugin('xep_0199') # XMPP Ping\n\n        # Here's how to access plugins once you've registered them:\n        # self['xep_0030'].add_feature('echo_demo')\n\n        # If you are working with an OpenFire server, you will\n        # need to use a different SSL version:\n        # import ssl\n        # self.ssl_version = ssl.PROTOCOL_SSLv3\n\n    def session_start(self, event):\n        self.send_presence()\n        self.get_roster()\n\n        # Most get_*/set_* methods from plugins use Iq stanzas, which\n        # can generate IqError and IqTimeout exceptions\n        #\n        # try:\n        #     self.get_roster()\n        # except IqError as err:\n        #     logging.error('There was an error getting the roster')\n        #     logging.error(err.iq['error']['condition'])\n        #     self.disconnect()\n        # except IqTimeout:\n        #     logging.error('Server is taking too long to respond')\n        #     self.disconnect()\n\n    def message(self, msg):\n        if msg['type'] in ('chat', 'normal'):\n            msg.reply(\"Thanks for sending\\n%(body)s\" % msg).send()\n\n\nif __name__ == '__main__':\n    # Ideally use optparse or argparse to get JID,\n    # password, and log level.\n\n    logging.basicConfig(level=logging.DEBUG,\n                        format='%(levelname)-8s %(message)s')\n\n    xmpp = EchoBot('somejid@example.com', 'use_getpass')\n    xmpp.connect()\n    xmpp.process(forever=True)\n</pre>\n</div>\n<div id=\"slixmpp-credits\">\n<h2>Slixmpp Credits</h2>\n<dl>\n<dt><strong>Maintainers:</strong></dt>\n<dd><ul>\n<li>Florent Le Coz (<a>louiz@louiz.org</a>),</li>\n<li>Mathieu Pasquet (<a>mathieui@mathieui.net</a>),</li>\n</ul>\n</dd>\n<dt><strong>Contributors:</strong></dt>\n<dd><ul>\n<li>Emmanuel Gil Peyrot (<a>Link mauve</a>)</li>\n<li>Sam Whited (<a href=\"mailto:sam%40samwhited.com\">Sam Whited</a>)</li>\n<li>Dan Sully (<a href=\"mailto:daniel%40electricalrain.com\">Dan Sully</a>)</li>\n<li>Gasper Zejn (<a href=\"mailto:zejn%40kiberpipa.org\">Gasper Zejn</a>)</li>\n<li>Krzysztof Kotlenga (<a href=\"mailto:pocek%40users.sf.net\">Krzysztof Kotlenga</a>)</li>\n<li>Tsukasa Hiiragi (<a href=\"mailto:bakalolka%40gmail.com\">Tsukasa Hiiragi</a>)</li>\n<li>Maxime Buquet (<a>pep</a>)</li>\n</ul>\n</dd>\n</dl>\n</div>\n<div id=\"credits-sleekxmpp\">\n<h2>Credits (SleekXMPP)</h2>\n<dl>\n<dt><strong>Main Author:</strong> Nathan Fritz</dt>\n<dd><p><a>fritzy@netflint.net</a>,\n<a href=\"http://twitter.com/fritzy\" rel=\"nofollow\">@fritzy</a></p>\n<p>Nathan is also the author of XMPPHP and <a href=\"http://code.google.com/p/seesmic-as3-xmpp/\" rel=\"nofollow\">Seesmic-AS3-XMPP</a>, and a former member of\nthe XMPP Council.</p>\n</dd>\n<dt><strong>Co-Author:</strong> Lance Stout</dt>\n<dd><a>lancestout@gmail.com</a>,\n<a href=\"http://twitter.com/lancestout\" rel=\"nofollow\">@lancestout</a></dd>\n<dt><strong>Contributors:</strong></dt>\n<dd><ul>\n<li>Brian Beggs (<a href=\"http://github.com/macdiesel\" rel=\"nofollow\">macdiesel</a>)</li>\n<li>Dann Martens (<a href=\"http://github.com/dannmartens\" rel=\"nofollow\">dannmartens</a>)</li>\n<li>Florent Le Coz (<a href=\"http://github.com/louiz\" rel=\"nofollow\">louiz</a>)</li>\n<li>Kevin Smith (<a href=\"http://github.com/Kev\" rel=\"nofollow\">Kev</a>, <a href=\"http://kismith.co.uk\" rel=\"nofollow\">http://kismith.co.uk</a>)</li>\n<li>Remko Tron\u00e7on (<a href=\"http://github.com/remko\" rel=\"nofollow\">remko</a>, <a href=\"http://el-tramo.be\" rel=\"nofollow\">http://el-tramo.be</a>)</li>\n<li>Te-j\u00e9 Rogers (<a href=\"http://github.com/te-je\" rel=\"nofollow\">te-je</a>)</li>\n<li>Thom Nichols (<a href=\"http://github.com/tomstrummer\" rel=\"nofollow\">tomstrummer</a>)</li>\n</ul>\n</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 7101614, "releases": {"1.4.3": [{"comment_text": "", "digests": {"md5": "e7b12206f8a0ba11d30d4ee223149bba", "sha256": "1fd7acac55153f001694d62c40eb866af8910d6e438063ebce149245dfe65c70"}, "downloads": -1, "filename": "slixmppfix-1.4.3.tar.gz", "has_sig": false, "md5_digest": "e7b12206f8a0ba11d30d4ee223149bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 844171, "upload_time": "2020-04-25T22:50:22", "upload_time_iso_8601": "2020-04-25T22:50:22.939697Z", "url": "https://files.pythonhosted.org/packages/96/7f/fe77a01217c51d3e368fcc6a1c51836704b80f22614ce83a6fcaeef230b7/slixmppfix-1.4.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e7b12206f8a0ba11d30d4ee223149bba", "sha256": "1fd7acac55153f001694d62c40eb866af8910d6e438063ebce149245dfe65c70"}, "downloads": -1, "filename": "slixmppfix-1.4.3.tar.gz", "has_sig": false, "md5_digest": "e7b12206f8a0ba11d30d4ee223149bba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 844171, "upload_time": "2020-04-25T22:50:22", "upload_time_iso_8601": "2020-04-25T22:50:22.939697Z", "url": "https://files.pythonhosted.org/packages/96/7f/fe77a01217c51d3e368fcc6a1c51836704b80f22614ce83a6fcaeef230b7/slixmppfix-1.4.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:19 2020"}