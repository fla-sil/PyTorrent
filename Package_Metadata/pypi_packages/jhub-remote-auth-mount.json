{"info": {"author": "Rasmus Munk", "author_email": "munk1@live.dk", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": ".. image:: https://travis-ci.org/rasmunk/jhub_remote_auth_mount.svg?branch=master\n    :target: https://travis-ci.org/rasmunk/jhub_remote_auth_mount\n\n====================================\nJupyterhub REMOTE_USER Authenticator\n====================================\n\nAuthenticate to Jupyterhub using an authenticating proxy that can set\nthe Remote-User header.\nAlso supports for passing additional information to the jupyter user. This includes a\nMount header.\n\n------------\nInstallation\n------------\n\nInstallation from pypi::\n\n    pip install jhub_remote_auth_mount\n\nInstallation from local git repository::\n\n    cd jhub_remote_auth_mount\n    pip install .\n\n-------------\nConfiguration\n-------------\n\nYou should edit your `jupyterhub_config.py` config file to set the\nauthenticator class::\n\n    c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.RemoteUserAuthenticator'\n\nYou should be able to start jupyterhub.  The \"/login\" resource\nwill look for the authenticated user name in the HTTP header \"Remote-User\".\nIf found, and not blank, you will be logged in as that user.\n\nAlternatively, you can use `RemoteUserLocalAuthenticator`::\n\n    c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.RemoteUserLocalAuthenticator'\n\nThis provides the same authentication functionality but is derived from\n`LocalAuthenticator` and therefore provides features such as the ability\nto add local accounts through the admin interface if configured to do so.\n\n-------------------------------------------------------------\nRemote User Authentication extended with Mount capability\n-------------------------------------------------------------\n\nProvides the capability to supply the jupyterhub user with a set of ssh keys that can later be used to mount that particular user's homedrive, the extended authenticator can be activated by setting the following option in the jupyterhub config file::\n\n    c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.MountRemoteUserAuthenticator'\n\nThis adds two base request paths to the jupyterhub web application::\n\n'/login' -> requires a non empty Remote-User header\n'/mount' -> requires both a non empty Remote-User and Mount header\n\nThe expected format of the Mount header is that the passed string can be evaluated to a python dictionary via::\n\n            try:\n                mount_header_dict = literal_eval(mount_header)\n\nAfter being successfully evaluated to a dictionary, the header is required to contain the following information::\n\n    {\n        HOST: 'hostname of the target mount host',\n        USERNAME: 'A random string that identifies an active mount session',\n        PATH: 'The target URL of the system/service that grants jupyter users to mount\n        their notebook against, e.g @idmc.dk:',\n        MOUNTSSHPRIVATEKEY: 'private key',\n    }\n\nNote:\n=====\nSince we are passing private key's over the network, it is important that this information is sent over an encrypted channel, furthermore the host/service that grant this mount information should limit the validity of a keyset, e.g. can be used for 2 hours before a new set has to be generated and the old is void.\nUpon successful parsing of the header, the active jupyterhub user instance is appended with a 'mount' property that contains the accepted dictionary header.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rasmunk/jhub_remote_auth_mount", "keywords": "Interactive,Interpreter,Shell,Web", "license": "GPLv3", "maintainer": "", "maintainer_email": "", "name": "jhub-remote-auth-mount", "package_url": "https://pypi.org/project/jhub-remote-auth-mount/", "platform": "Linux", "project_url": "https://pypi.org/project/jhub-remote-auth-mount/", "project_urls": {"Homepage": "https://github.com/rasmunk/jhub_remote_auth_mount"}, "release_url": "https://pypi.org/project/jhub-remote-auth-mount/0.0.6/", "requires_dist": ["jupyterhub (>=0.9.0)", "docutils (>=0.13.1)"], "requires_python": "", "summary": "", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/rasmunk/jhub_remote_auth_mount\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/rasmunk/jhub_remote_auth_mount.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e3c4e41bf63e3551f584b5b676ad1105c66b37c1/68747470733a2f2f7472617669732d63692e6f72672f7261736d756e6b2f6a6875625f72656d6f74655f617574685f6d6f756e742e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"jupyterhub-remote-user-authenticator\">\n<h2>Jupyterhub REMOTE_USER Authenticator</h2>\n<p>Authenticate to Jupyterhub using an authenticating proxy that can set\nthe Remote-User header.\nAlso supports for passing additional information to the jupyter user. This includes a\nMount header.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Installation from pypi:</p>\n<pre>pip install jhub_remote_auth_mount\n</pre>\n<p>Installation from local git repository:</p>\n<pre>cd jhub_remote_auth_mount\npip install .\n</pre>\n</div>\n<div id=\"configuration\">\n<h3>Configuration</h3>\n<p>You should edit your <cite>jupyterhub_config.py</cite> config file to set the\nauthenticator class:</p>\n<pre>c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.RemoteUserAuthenticator'\n</pre>\n<p>You should be able to start jupyterhub.  The \u201c/login\u201d resource\nwill look for the authenticated user name in the HTTP header \u201cRemote-User\u201d.\nIf found, and not blank, you will be logged in as that user.</p>\n<p>Alternatively, you can use <cite>RemoteUserLocalAuthenticator</cite>:</p>\n<pre>c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.RemoteUserLocalAuthenticator'\n</pre>\n<p>This provides the same authentication functionality but is derived from\n<cite>LocalAuthenticator</cite> and therefore provides features such as the ability\nto add local accounts through the admin interface if configured to do so.</p>\n</div>\n<div id=\"remote-user-authentication-extended-with-mount-capability\">\n<h3>Remote User Authentication extended with Mount capability</h3>\n<p>Provides the capability to supply the jupyterhub user with a set of ssh keys that can later be used to mount that particular user\u2019s homedrive, the extended authenticator can be activated by setting the following option in the jupyterhub config file:</p>\n<pre>c.JupyterHub.authenticator_class = 'jhub_remote_auth_mount.MountRemoteUserAuthenticator'\n</pre>\n<p>This adds two base request paths to the jupyterhub web application:</p>\n<pre>'/login' -&gt; requires a non empty Remote-User header\n'/mount' -&gt; requires both a non empty Remote-User and Mount header\n</pre>\n<p>The expected format of the Mount header is that the passed string can be evaluated to a python dictionary via:</p>\n<pre>try:\n    mount_header_dict = literal_eval(mount_header)\n</pre>\n<p>After being successfully evaluated to a dictionary, the header is required to contain the following information:</p>\n<pre>{\n    HOST: 'hostname of the target mount host',\n    USERNAME: 'A random string that identifies an active mount session',\n    PATH: 'The target URL of the system/service that grants jupyter users to mount\n    their notebook against, e.g @idmc.dk:',\n    MOUNTSSHPRIVATEKEY: 'private key',\n}\n</pre>\n<div id=\"note\">\n<h4>Note:</h4>\n<p>Since we are passing private key\u2019s over the network, it is important that this information is sent over an encrypted channel, furthermore the host/service that grant this mount information should limit the validity of a keyset, e.g. can be used for 2 hours before a new set has to be generated and the old is void.\nUpon successful parsing of the header, the active jupyterhub user instance is appended with a \u2018mount\u2019 property that contains the accepted dictionary header.</p>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3982472, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "116696fa4cc38d02f8dda8228a4aaafd", "sha256": "6ce427cab5920b98de170e2388b78010334b7fb86224e81c317039d45f223b09"}, "downloads": -1, "filename": "jhub_remote_auth_mount-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "116696fa4cc38d02f8dda8228a4aaafd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4947, "upload_time": "2018-06-20T18:23:05", "upload_time_iso_8601": "2018-06-20T18:23:05.818194Z", "url": "https://files.pythonhosted.org/packages/fe/bc/1412a9c1f7df3fcb9c1c155147ae5d090d09273a2f2cf2f0705881852ab7/jhub_remote_auth_mount-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d256e622aa1848b68fef8c01175d357", "sha256": "b50dd0e16a9f81fdbfd735c629f604da087e068f9e811f45c8038d97b7495e69"}, "downloads": -1, "filename": "jhub_remote_auth_mount-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1d256e622aa1848b68fef8c01175d357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4709, "upload_time": "2018-06-20T18:23:06", "upload_time_iso_8601": "2018-06-20T18:23:06.970035Z", "url": "https://files.pythonhosted.org/packages/d6/15/4c8de1dbf7cf0eb8aaccfcd8da81759559d8d74919acc65d6b4e3a325644/jhub_remote_auth_mount-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "116696fa4cc38d02f8dda8228a4aaafd", "sha256": "6ce427cab5920b98de170e2388b78010334b7fb86224e81c317039d45f223b09"}, "downloads": -1, "filename": "jhub_remote_auth_mount-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "116696fa4cc38d02f8dda8228a4aaafd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4947, "upload_time": "2018-06-20T18:23:05", "upload_time_iso_8601": "2018-06-20T18:23:05.818194Z", "url": "https://files.pythonhosted.org/packages/fe/bc/1412a9c1f7df3fcb9c1c155147ae5d090d09273a2f2cf2f0705881852ab7/jhub_remote_auth_mount-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1d256e622aa1848b68fef8c01175d357", "sha256": "b50dd0e16a9f81fdbfd735c629f604da087e068f9e811f45c8038d97b7495e69"}, "downloads": -1, "filename": "jhub_remote_auth_mount-0.0.6.tar.gz", "has_sig": false, "md5_digest": "1d256e622aa1848b68fef8c01175d357", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4709, "upload_time": "2018-06-20T18:23:06", "upload_time_iso_8601": "2018-06-20T18:23:06.970035Z", "url": "https://files.pythonhosted.org/packages/d6/15/4c8de1dbf7cf0eb8aaccfcd8da81759559d8d74919acc65d6b4e3a325644/jhub_remote_auth_mount-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:44 2020"}