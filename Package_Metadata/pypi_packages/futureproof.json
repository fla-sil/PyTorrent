{"info": {"author": "Yeray Diaz Diaz", "author_email": "yeraydiazdiaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Futureproof - Bulletproof concurrent.futures\n\n[![Build Status](https://dev.azure.com/yeraydiazdiaz/futureproof/_apis/build/status/yeraydiazdiaz.futureproof?branchName=master)](https://dev.azure.com/yeraydiazdiaz/futureproof/_build/latest?definitionId=1&branchName=master)\n[![Supported Python Versions](https://img.shields.io/pypi/pyversions/futureproof.svg)](https://pypi.org/project/futureproof/)\n[![PyPI](https://img.shields.io/pypi/v/futureproof.svg)](https://pypi.org/project/futureproof/)\n\n[`concurrent.futures`](https://docs.python.org/3/library/concurrent.futures.html) is amazing, but it's got some sharp edges that have bit me many times in the past.\n\nFutureproof is a thin wrapper around it addressing some of these problems and adding some usability features.\n\n## Features:\n\n- **Monitoring**: a summary of completed tasks is logged by default.\n- **Fail fast**: errors cause the main thread to raise an exception and stop by default.\n- **Error policy**: the user can decide whether to raise, log or completely ignore errors on tasks.\n- **Backpressure control**: large collections of tasks are consumed lazily as the executor completes tasks, drastically reducing memory consumption and improving responsiveness in these situations.\n\n## Current status: Alpha\n\nThe API is subject to change, any changes will be documented in the changelog.\n\nFutureproof was designed to wrap ThreadPoolExecutor, however version 0.2+ includes limited support ProcessPoolExecutor but only for Python3.7+.\n\n## concurrent.futures has problems? What problems?\n\nLet's have a look at the canonical example for ThreadPoolExecutor:\n\n```python\nimport concurrent.futures\nimport urllib.request\n\nURLS = ['http://www.foxnews.com/',\n        'http://www.cnn.com/',\n        'http://europe.wsj.com/',\n        'http://www.bbc.co.uk/',\n        'http://some-made-up-domain-that-definitely-does-not-exist.com/']\n\n# Retrieve a single page and report the URL and contents\ndef load_url(url, timeout):\n    with urllib.request.urlopen(url, timeout=timeout) as conn:\n        return conn.read()\n\n# We can use a with statement to ensure threads are cleaned up promptly\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    # Start the load operations and mark each future with its URL\n    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}\n    for future in concurrent.futures.as_completed(future_to_url):\n        url = future_to_url[future]\n        try:\n            data = future.result()\n        except Exception as exc:\n            print('%r generated an exception: %s' % (url, exc))\n        else:\n            print('%r page is %d bytes' % (url, len(data)))\n```\n\nJust to reiterate, this is amazing, the fact that the barrier of entry for multithreading is this small is really a testament to the great work done by Brian Quinlan and the core Python developers.\n\nHowever, I see two problems with this:\n\n1. The boilerplate. We need to enter a context manager, call `submit` manually keeping track of the futures and its arguments, call `as_completed` which actually returns an iterator, call `result` on the future remembering to handle the exception.\n2. It's surprising. Why do we need to get the result in order to raise? What if we don't expect it to raise? We probably want to know as soon as possible.\n\nIf you run this code you get the following output (at the time of this writing):\n\n```\n'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: <urlopen error [Errno 8] nodename nor servname provided, or not known>\n'http://www.foxnews.com/' page is 248838 bytes\n'http://www.bbc.co.uk/' page is 338658 bytes\n'http://www.cnn.com/' page is 991167 bytes\n'http://europe.wsj.com/' page is 970346 bytes\n```\n\nWhich is perfect. How does futureproof compare?\n\n```python\nexecutor = futureproof.FutureProofExecutor(max_workers=5)\nwith futureproof.TaskManager(executor) as tm:\n    for url in URLS:\n        tm.submit(load_url, url, 60)\n    for task in tm.as_completed():\n        print(\"%r page is %d bytes\" % (task.args[0], len(task.result)))\n```\n\nThat looks quite similar, there's an executor and a *task manager*. `submit` and `as_completed` are methods on it and there's no `try..except`. If we run it we get:\n\n```\n'http://www.foxnews.com/' page is 248838 bytes\nTraceback (most recent call last):\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1317, in do_open\n    encode_chunked=req.has_header('Transfer-encoding'))\n  ... omitted traceback output ...\nsocket.gaierror: [Errno 8] nodename nor servname provided, or not known\n```\n\nNotice that `futureproof` raised the exception that ocurred immediately and everything stopped, as you would've expected in normal non-threaded Python, no surprises.\n\nIf we prefer `futureproof` gives you the option to log or even ignore exceptions using error policies. Say we want to log the exceptions:\n\n```python\nlogging.basicConfig(\n    level=logging.INFO,\n    format=\"[%(asctime)s %(thread)s] %(message)s\",\n    datefmt=\"%H:%M:%S\",\n)\n\nexecutor = futureproof.FutureProofExecutor(max_workers=5)\nwith futureproof.TaskManager(executor, error_policy=\"log\") as tm:\n    for url in URLS:\n        tm.submit(load_url, url, 60)\n        for task in tm.as_completed():\n            if not isinstance(task.result, Exception):\n                print(\"%r page is %d bytes\" % (task.args[0], len(task.result)))\n```\n\nNote we've added a check to only print the result in case it's not an exception, this outputs:\n\n```\n'http://www.foxnews.com/' page is 251088 bytes\n[12:09:15 4350641600] Task Task(fn=<function load_url at 0x1029ef1e0>, args=('http://some-made-up-domain-that-definitely-does-not-exist.com/', 60), kwargs={}, result=URLError(gaierror(8, 'nodename nor servname provided, or not known')),\n complete=True) raised an exception\nTraceback (most recent call last):\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1317, in do_open\n    encode_chunked=req.has_header('Transfer-encoding'))\n    ... omitted long traceback ...\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1319, in do_open\n    raise URLError(err)\nurllib.error.URLError: <urlopen error [Errno 8] nodename nor servname provided, or not known>\n'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: <urlopen error [Errno 8] nodename nor servname provided, or not known>\n'http://www.bbc.co.uk/' page is 339087 bytes\n'http://www.cnn.com/' page is 991167 bytes\n[12:09:16 123145404444672] 5 task completed in the last 1.18 second(s)\n'http://europe.wsj.com/' page is 970880 bytes\n```\n\nNote we only had to configure logging and pass the appropriate error policy, everything else was taken care for us. You can also choose to ignore exceptions completely and manage them yourself accessing `result`, which is the workflow when using `concurrent.futures`.\n\n### `as_completed`?\n\nIf you think about it, why do we need `as_completed`?\n\nThe answer is for monitoring and error handling.\n\nIf we had loads of URLs, you don't want to wait until all URLs are back to show output, it could take ages. But really it just adds complexity to the code. What does the example look like if you don't use `as_completed`?\n\n```python\nwith concurrent.futures.ThreadPoolExecutor(max_workers=5) as executor:\n    future_to_url = {executor.submit(load_url, url, 60): url for url in URLS}\n\nfor future, url in future_to_url.items():\n    try:\n        data = future.result()\n    except Exception as exc:\n        print(\"%r generated an exception: %s\" % (url, exc))\n    else:\n        print(\"%r page is %d bytes\" % (url, len(data)))\n```\n\nWhich is arguably more readable, however, it has a subtle difference: there's no output until all the futures are complete. If you imagine tasks taking longer you're left wondering if things are even working at all.\n\nLet's compare to the `futureproof` version:\n\n```python\nexecutor = futureproof.FutureProofExecutor(max_workers=5)\nwith futureproof.TaskManager(executor, error_policy=\"ignore\") as tm:\n    for url in URLS:\n        tm.submit(load_url, url, 60)\n\nfor task in tm.completed_tasks:\n    if isinstance(task.result, Exception):\n        print(\"%r generated an exception: %s\" % (task.args[0], task.result))\n    else:\n        print(\"%r page is %d bytes\" % (task.args[0], len(task.result)))\n```\n\n```\n[12:40:28 123145393414144] Starting executor monitor\n[12:40:29 123145393414144] 5 task completed in the last 1.01 second(s)\n[12:40:29 123145393414144] Shutting down monitor...\n'http://www.foxnews.com/' page is 252016 bytes\n'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: <urlopen error [Errno 8] nodename nor servname provided, or not known>\n'http://www.cnn.com/' page is 992648 bytes\n'http://www.bbc.co.uk/' page is 338987 bytes\n'http://europe.wsj.com/' page is 969285 bytes\n```\n\n`futureproof` defaults to logging monitoring information on the tasks so you always know if things are working. Note how the task manager exposes `completed_tasks` allowing easy access to the results without having to manually keep track of futures. Finally, as mentioned previously, you're also in total control over exception handling so you don't need to add code for that either.\n\nThese are fairly minor problems that we can work around manually using `concurrent.futures` but when starting to deal higher number of tasks other problems arise, check out the [examples directory](https://github.com/yeraydiazdiaz/futureproof/tree/master/examples/) for a hands-on comparison between `futureproof` and `concurrent.futures` in other more serious scenarios.\n\n## Alternatives\n\nI am by no means the first person to address these problems. Here a few similar, more stable and feature full, albeit restrictively licensed alternatives:\n\n- [Pebble](https://pebble.readthedocs.io/en/latest/), LGPL 3.0\n- [more-executors](https://github.com/rohanpm/more-executors), GPL 3.0\n\n`futureproof` is licensed MIT.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/yeraydiazdiaz/futureproof", "keywords": "concurrent futures multithreading", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "futureproof", "package_url": "https://pypi.org/project/futureproof/", "platform": "", "project_url": "https://pypi.org/project/futureproof/", "project_urls": {"Homepage": "https://github.com/yeraydiazdiaz/futureproof"}, "release_url": "https://pypi.org/project/futureproof/0.2.2/", "requires_dist": ["attrs", "pytest-mock ; extra == 'tests'", "pytest-timeout ; extra == 'tests'", "coverage ; extra == 'tests'"], "requires_python": "", "summary": "Bulletproof concurrent.futures", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Futureproof - Bulletproof concurrent.futures</h1>\n<p><a href=\"https://dev.azure.com/yeraydiazdiaz/futureproof/_build/latest?definitionId=1&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/213a852fe80ec0bef025c4de77c2d55a001a6b59/68747470733a2f2f6465762e617a7572652e636f6d2f79657261796469617a6469617a2f66757475726570726f6f662f5f617069732f6275696c642f7374617475732f79657261796469617a6469617a2e66757475726570726f6f663f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://pypi.org/project/futureproof/\" rel=\"nofollow\"><img alt=\"Supported Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/cc70c8b98521e1b46a90460017047b91dc084fda/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f66757475726570726f6f662e737667\"></a>\n<a href=\"https://pypi.org/project/futureproof/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/524e14ad0d31583b76f035197854f84d586e1aae/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66757475726570726f6f662e737667\"></a></p>\n<p><a href=\"https://docs.python.org/3/library/concurrent.futures.html\" rel=\"nofollow\"><code>concurrent.futures</code></a> is amazing, but it's got some sharp edges that have bit me many times in the past.</p>\n<p>Futureproof is a thin wrapper around it addressing some of these problems and adding some usability features.</p>\n<h2>Features:</h2>\n<ul>\n<li><strong>Monitoring</strong>: a summary of completed tasks is logged by default.</li>\n<li><strong>Fail fast</strong>: errors cause the main thread to raise an exception and stop by default.</li>\n<li><strong>Error policy</strong>: the user can decide whether to raise, log or completely ignore errors on tasks.</li>\n<li><strong>Backpressure control</strong>: large collections of tasks are consumed lazily as the executor completes tasks, drastically reducing memory consumption and improving responsiveness in these situations.</li>\n</ul>\n<h2>Current status: Alpha</h2>\n<p>The API is subject to change, any changes will be documented in the changelog.</p>\n<p>Futureproof was designed to wrap ThreadPoolExecutor, however version 0.2+ includes limited support ProcessPoolExecutor but only for Python3.7+.</p>\n<h2>concurrent.futures has problems? What problems?</h2>\n<p>Let's have a look at the canonical example for ThreadPoolExecutor:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">concurrent.futures</span>\n<span class=\"kn\">import</span> <span class=\"nn\">urllib.request</span>\n\n<span class=\"n\">URLS</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'http://www.foxnews.com/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'http://www.cnn.com/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'http://europe.wsj.com/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'http://www.bbc.co.uk/'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'http://some-made-up-domain-that-definitely-does-not-exist.com/'</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Retrieve a single page and report the URL and contents</span>\n<span class=\"k\">def</span> <span class=\"nf\">load_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"p\">):</span>\n    <span class=\"k\">with</span> <span class=\"n\">urllib</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">urlopen</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">timeout</span><span class=\"o\">=</span><span class=\"n\">timeout</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">conn</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"n\">conn</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># We can use a with statement to ensure threads are cleaned up promptly</span>\n<span class=\"k\">with</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Start the load operations and mark each future with its URL</span>\n    <span class=\"n\">future_to_url</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">):</span> <span class=\"n\">url</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">URLS</span><span class=\"p\">}</span>\n    <span class=\"k\">for</span> <span class=\"n\">future</span> <span class=\"ow\">in</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">(</span><span class=\"n\">future_to_url</span><span class=\"p\">):</span>\n        <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">future_to_url</span><span class=\"p\">[</span><span class=\"n\">future</span><span class=\"p\">]</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n        <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%r</span><span class=\"s1\"> generated an exception: </span><span class=\"si\">%s</span><span class=\"s1\">'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">))</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">%r</span><span class=\"s1\"> page is </span><span class=\"si\">%d</span><span class=\"s1\"> bytes'</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)))</span>\n</pre>\n<p>Just to reiterate, this is amazing, the fact that the barrier of entry for multithreading is this small is really a testament to the great work done by Brian Quinlan and the core Python developers.</p>\n<p>However, I see two problems with this:</p>\n<ol>\n<li>The boilerplate. We need to enter a context manager, call <code>submit</code> manually keeping track of the futures and its arguments, call <code>as_completed</code> which actually returns an iterator, call <code>result</code> on the future remembering to handle the exception.</li>\n<li>It's surprising. Why do we need to get the result in order to raise? What if we don't expect it to raise? We probably want to know as soon as possible.</li>\n</ol>\n<p>If you run this code you get the following output (at the time of this writing):</p>\n<pre><code>'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: &lt;urlopen error [Errno 8] nodename nor servname provided, or not known&gt;\n'http://www.foxnews.com/' page is 248838 bytes\n'http://www.bbc.co.uk/' page is 338658 bytes\n'http://www.cnn.com/' page is 991167 bytes\n'http://europe.wsj.com/' page is 970346 bytes\n</code></pre>\n<p>Which is perfect. How does futureproof compare?</p>\n<pre><span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">FutureProofExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">TaskManager</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tm</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">URLS</span><span class=\"p\">:</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n    <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">():</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> page is </span><span class=\"si\">%d</span><span class=\"s2\"> bytes\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)))</span>\n</pre>\n<p>That looks quite similar, there's an executor and a <em>task manager</em>. <code>submit</code> and <code>as_completed</code> are methods on it and there's no <code>try..except</code>. If we run it we get:</p>\n<pre><code>'http://www.foxnews.com/' page is 248838 bytes\nTraceback (most recent call last):\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1317, in do_open\n    encode_chunked=req.has_header('Transfer-encoding'))\n  ... omitted traceback output ...\nsocket.gaierror: [Errno 8] nodename nor servname provided, or not known\n</code></pre>\n<p>Notice that <code>futureproof</code> raised the exception that ocurred immediately and everything stopped, as you would've expected in normal non-threaded Python, no surprises.</p>\n<p>If we prefer <code>futureproof</code> gives you the option to log or even ignore exceptions using error policies. Say we want to log the exceptions:</p>\n<pre><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span>\n    <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">INFO</span><span class=\"p\">,</span>\n    <span class=\"nb\">format</span><span class=\"o\">=</span><span class=\"s2\">\"[</span><span class=\"si\">%(asctime)s</span><span class=\"s2\"> </span><span class=\"si\">%(thread)s</span><span class=\"s2\">] </span><span class=\"si\">%(message)s</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"n\">datefmt</span><span class=\"o\">=</span><span class=\"s2\">\"%H:%M:%S\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">FutureProofExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">TaskManager</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"p\">,</span> <span class=\"n\">error_policy</span><span class=\"o\">=</span><span class=\"s2\">\"log\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tm</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">URLS</span><span class=\"p\">:</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n        <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">as_completed</span><span class=\"p\">():</span>\n            <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n                <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> page is </span><span class=\"si\">%d</span><span class=\"s2\"> bytes\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)))</span>\n</pre>\n<p>Note we've added a check to only print the result in case it's not an exception, this outputs:</p>\n<pre><code>'http://www.foxnews.com/' page is 251088 bytes\n[12:09:15 4350641600] Task Task(fn=&lt;function load_url at 0x1029ef1e0&gt;, args=('http://some-made-up-domain-that-definitely-does-not-exist.com/', 60), kwargs={}, result=URLError(gaierror(8, 'nodename nor servname provided, or not known')),\n complete=True) raised an exception\nTraceback (most recent call last):\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1317, in do_open\n    encode_chunked=req.has_header('Transfer-encoding'))\n    ... omitted long traceback ...\n  File \"/Users/yeray/.pyenv/versions/3.7.3/lib/python3.7/urllib/request.py\", line 1319, in do_open\n    raise URLError(err)\nurllib.error.URLError: &lt;urlopen error [Errno 8] nodename nor servname provided, or not known&gt;\n'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: &lt;urlopen error [Errno 8] nodename nor servname provided, or not known&gt;\n'http://www.bbc.co.uk/' page is 339087 bytes\n'http://www.cnn.com/' page is 991167 bytes\n[12:09:16 123145404444672] 5 task completed in the last 1.18 second(s)\n'http://europe.wsj.com/' page is 970880 bytes\n</code></pre>\n<p>Note we only had to configure logging and pass the appropriate error policy, everything else was taken care for us. You can also choose to ignore exceptions completely and manage them yourself accessing <code>result</code>, which is the workflow when using <code>concurrent.futures</code>.</p>\n<h3><code>as_completed</code>?</h3>\n<p>If you think about it, why do we need <code>as_completed</code>?</p>\n<p>The answer is for monitoring and error handling.</p>\n<p>If we had loads of URLs, you don't want to wait until all URLs are back to show output, it could take ages. But really it just adds complexity to the code. What does the example look like if you don't use <code>as_completed</code>?</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">concurrent</span><span class=\"o\">.</span><span class=\"n\">futures</span><span class=\"o\">.</span><span class=\"n\">ThreadPoolExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">executor</span><span class=\"p\">:</span>\n    <span class=\"n\">future_to_url</span> <span class=\"o\">=</span> <span class=\"p\">{</span><span class=\"n\">executor</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">):</span> <span class=\"n\">url</span> <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">URLS</span><span class=\"p\">}</span>\n\n<span class=\"k\">for</span> <span class=\"n\">future</span><span class=\"p\">,</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">future_to_url</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">future</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">()</span>\n    <span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">exc</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> generated an exception: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">exc</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> page is </span><span class=\"si\">%d</span><span class=\"s2\"> bytes\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)))</span>\n</pre>\n<p>Which is arguably more readable, however, it has a subtle difference: there's no output until all the futures are complete. If you imagine tasks taking longer you're left wondering if things are even working at all.</p>\n<p>Let's compare to the <code>futureproof</code> version:</p>\n<pre><span class=\"n\">executor</span> <span class=\"o\">=</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">FutureProofExecutor</span><span class=\"p\">(</span><span class=\"n\">max_workers</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">futureproof</span><span class=\"o\">.</span><span class=\"n\">TaskManager</span><span class=\"p\">(</span><span class=\"n\">executor</span><span class=\"p\">,</span> <span class=\"n\">error_policy</span><span class=\"o\">=</span><span class=\"s2\">\"ignore\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">tm</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">url</span> <span class=\"ow\">in</span> <span class=\"n\">URLS</span><span class=\"p\">:</span>\n        <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">(</span><span class=\"n\">load_url</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"mi\">60</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">tm</span><span class=\"o\">.</span><span class=\"n\">completed_tasks</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"ne\">Exception</span><span class=\"p\">):</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> generated an exception: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">))</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\"> page is </span><span class=\"si\">%d</span><span class=\"s2\"> bytes\"</span> <span class=\"o\">%</span> <span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">args</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)))</span>\n</pre>\n<pre><code>[12:40:28 123145393414144] Starting executor monitor\n[12:40:29 123145393414144] 5 task completed in the last 1.01 second(s)\n[12:40:29 123145393414144] Shutting down monitor...\n'http://www.foxnews.com/' page is 252016 bytes\n'http://some-made-up-domain-that-definitely-does-not-exist.com/' generated an exception: &lt;urlopen error [Errno 8] nodename nor servname provided, or not known&gt;\n'http://www.cnn.com/' page is 992648 bytes\n'http://www.bbc.co.uk/' page is 338987 bytes\n'http://europe.wsj.com/' page is 969285 bytes\n</code></pre>\n<p><code>futureproof</code> defaults to logging monitoring information on the tasks so you always know if things are working. Note how the task manager exposes <code>completed_tasks</code> allowing easy access to the results without having to manually keep track of futures. Finally, as mentioned previously, you're also in total control over exception handling so you don't need to add code for that either.</p>\n<p>These are fairly minor problems that we can work around manually using <code>concurrent.futures</code> but when starting to deal higher number of tasks other problems arise, check out the <a href=\"https://github.com/yeraydiazdiaz/futureproof/tree/master/examples/\" rel=\"nofollow\">examples directory</a> for a hands-on comparison between <code>futureproof</code> and <code>concurrent.futures</code> in other more serious scenarios.</p>\n<h2>Alternatives</h2>\n<p>I am by no means the first person to address these problems. Here a few similar, more stable and feature full, albeit restrictively licensed alternatives:</p>\n<ul>\n<li><a href=\"https://pebble.readthedocs.io/en/latest/\" rel=\"nofollow\">Pebble</a>, LGPL 3.0</li>\n<li><a href=\"https://github.com/rohanpm/more-executors\" rel=\"nofollow\">more-executors</a>, GPL 3.0</li>\n</ul>\n<p><code>futureproof</code> is licensed MIT.</p>\n\n          </div>"}, "last_serial": 6439724, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "616a5e18f9bded5e4414b84a4c70abdb", "sha256": "5639bf3c0309413cbf117607dbc315232df0de5909e9e50129c31d8d85839098"}, "downloads": -1, "filename": "futureproof-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "616a5e18f9bded5e4414b84a4c70abdb", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6111, "upload_time": "2019-06-09T14:51:57", "upload_time_iso_8601": "2019-06-09T14:51:57.392997Z", "url": "https://files.pythonhosted.org/packages/4a/93/860c46f3157b4b5dd66da9f14e731186efd1d86241235c5a26231b988449/futureproof-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6ece029e6fbbc287834a9937d32769a9", "sha256": "f90993a87026211aa5cc6bb4b6e8632c6e32ef38b56a2b5b39ad6266a2b155a8"}, "downloads": -1, "filename": "futureproof-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6ece029e6fbbc287834a9937d32769a9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6129, "upload_time": "2019-06-09T14:51:59", "upload_time_iso_8601": "2019-06-09T14:51:59.110777Z", "url": "https://files.pythonhosted.org/packages/26/9d/9f937d368255700dbc94c92110ef3291aa9faa4df2afce8a38942f95d130/futureproof-0.1.0.tar.gz", "yanked": false}], "0.1.0.dev0": [{"comment_text": "", "digests": {"md5": "ef4cf6ef119cc3e7bb33b8992d411780", "sha256": "2f0c7f866a2190ba2e534ab60fab67f9757794352dec0bf5ff94c010b3e4210a"}, "downloads": -1, "filename": "futureproof-0.1.0.dev0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ef4cf6ef119cc3e7bb33b8992d411780", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6051, "upload_time": "2019-06-08T13:54:00", "upload_time_iso_8601": "2019-06-08T13:54:00.313135Z", "url": "https://files.pythonhosted.org/packages/ea/dc/fd98d83105204f0f1244334a2abbcff535342ba35f62746e192ea503115d/futureproof-0.1.0.dev0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0d227cd64f609d9389b4ee792add0d04", "sha256": "ba56a6b2b3e6228045820758170df8af923a6990770df1a4da2cd32121c52714"}, "downloads": -1, "filename": "futureproof-0.1.0.dev0.tar.gz", "has_sig": false, "md5_digest": "0d227cd64f609d9389b4ee792add0d04", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4662, "upload_time": "2019-06-08T13:54:02", "upload_time_iso_8601": "2019-06-08T13:54:02.905416Z", "url": "https://files.pythonhosted.org/packages/db/28/81d48a7658d336b34922d5ddf0a1d6a6a4afb4fcbdef9049db56ff3c3270/futureproof-0.1.0.dev0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "d776a09a0fbc8cfd0bc3ae1152d6df56", "sha256": "84293f5e68b0d596612715ffd4a0cb53233269303d6669d9c24d704874e5048d"}, "downloads": -1, "filename": "futureproof-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d776a09a0fbc8cfd0bc3ae1152d6df56", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6152, "upload_time": "2019-06-09T16:18:24", "upload_time_iso_8601": "2019-06-09T16:18:24.169120Z", "url": "https://files.pythonhosted.org/packages/b7/11/8d942caecd1f2fc43102638188c6bca47f7f15eefff27399444f9baa82b9/futureproof-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42b85cfc766ef8ee09215d7c54c4b9aa", "sha256": "bde7f7dabfa37d30fb3022393535edde95ee8123a7e27e5b5a70ec844ebe428b"}, "downloads": -1, "filename": "futureproof-0.1.1.tar.gz", "has_sig": false, "md5_digest": "42b85cfc766ef8ee09215d7c54c4b9aa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6261, "upload_time": "2019-06-09T16:18:26", "upload_time_iso_8601": "2019-06-09T16:18:26.127967Z", "url": "https://files.pythonhosted.org/packages/74/b7/778ca0d98e077aaab32e295fc638381fa3a76622485cf73c9f0b379e68e0/futureproof-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "7b54d222659041d1623f83c109c51346", "sha256": "945cc5495c73a50fcb6cd2bb861964d8818e3abcaf43b7b2b71ff5e049741c6e"}, "downloads": -1, "filename": "futureproof-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "7b54d222659041d1623f83c109c51346", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6277, "upload_time": "2019-06-29T16:09:20", "upload_time_iso_8601": "2019-06-29T16:09:20.608865Z", "url": "https://files.pythonhosted.org/packages/be/c8/66f0fc371c4af9e16faee3808755e8d4e74bfbe3e2d4bf3fb6eb12214ef1/futureproof-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dd35dee4874919b049e2904f48cb183a", "sha256": "19be32e8bae40c341c06999c755e1c54f72ecd993b2abbfff6fc46bc598d6146"}, "downloads": -1, "filename": "futureproof-0.1.2.tar.gz", "has_sig": false, "md5_digest": "dd35dee4874919b049e2904f48cb183a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6538, "upload_time": "2019-06-29T16:09:22", "upload_time_iso_8601": "2019-06-29T16:09:22.546980Z", "url": "https://files.pythonhosted.org/packages/0c/39/c4fd0a53b8fb5f0b23adbf76925e5405ffc23cb4809976904ff454c852ea/futureproof-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "b2619d96e270528c0a380202f00e7345", "sha256": "fe996bf3bfa4dc3b5ca3690657f87592946c9b343ae1ff6fc371d8378a581f96"}, "downloads": -1, "filename": "futureproof-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b2619d96e270528c0a380202f00e7345", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9384, "upload_time": "2019-07-05T11:17:59", "upload_time_iso_8601": "2019-07-05T11:17:59.228816Z", "url": "https://files.pythonhosted.org/packages/ed/12/074ae7ce99fd5f722856d34f4f12b9d42e43901507d0a5ef5169fd81dfba/futureproof-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9914712f68df63fdd21a7b6401b30cfd", "sha256": "df5be7aff672feab5438630059d4bdf4ca093ec67f470a047bfb801373a6dc8d"}, "downloads": -1, "filename": "futureproof-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9914712f68df63fdd21a7b6401b30cfd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10921, "upload_time": "2019-07-05T11:18:00", "upload_time_iso_8601": "2019-07-05T11:18:00.942783Z", "url": "https://files.pythonhosted.org/packages/f7/0e/0ffe29970f0821755e7b14c42606b65387811bec87f849dc9c54aea2fbdc/futureproof-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9fb4966449d0add78f3f01762f2eb9f3", "sha256": "e764ba24901ebadeb364efe2f2e561e01cd5d8dcfc68fc4461670d4572da0d42"}, "downloads": -1, "filename": "futureproof-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9fb4966449d0add78f3f01762f2eb9f3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9388, "upload_time": "2019-11-09T16:04:41", "upload_time_iso_8601": "2019-11-09T16:04:41.913779Z", "url": "https://files.pythonhosted.org/packages/a6/b7/b834dc8b431517801a8c3a3e01075c019f927898013e33e404434df194c6/futureproof-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f083ff2b84022e2e725c25aaf3347a3", "sha256": "fb79d4db17bf6f4f18e32de49509bdd1976afdaf06b5490938373630affc41e8"}, "downloads": -1, "filename": "futureproof-0.2.1.tar.gz", "has_sig": false, "md5_digest": "7f083ff2b84022e2e725c25aaf3347a3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10955, "upload_time": "2019-11-09T16:04:43", "upload_time_iso_8601": "2019-11-09T16:04:43.806799Z", "url": "https://files.pythonhosted.org/packages/63/98/7879642d2bf60babc26369f555a0ef5750198593d6c81c1647106eb4e268/futureproof-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "6d094c917326205676a33701645e82b1", "sha256": "500d7d2cc6b1abaea2e21adbffcc60441bf87adaeaa0ccd6879894457305e564"}, "downloads": -1, "filename": "futureproof-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d094c917326205676a33701645e82b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9344, "upload_time": "2020-01-12T13:19:39", "upload_time_iso_8601": "2020-01-12T13:19:39.834767Z", "url": "https://files.pythonhosted.org/packages/86/f4/61afc69eae87edc942708b9798b03f125003db81b1d3ed659f4b5af9eba5/futureproof-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e708b6315f446c5db4af20a9f2683204", "sha256": "ad16deedefc3a93c49186e77f3239755cd6b923cf4e7cab50d45559bd766649c"}, "downloads": -1, "filename": "futureproof-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e708b6315f446c5db4af20a9f2683204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10903, "upload_time": "2020-01-12T13:19:42", "upload_time_iso_8601": "2020-01-12T13:19:42.014801Z", "url": "https://files.pythonhosted.org/packages/48/8d/561345574b04ce1497d388d374bf6f62e58d2d23d7d6871ddb4b9e87bc71/futureproof-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6d094c917326205676a33701645e82b1", "sha256": "500d7d2cc6b1abaea2e21adbffcc60441bf87adaeaa0ccd6879894457305e564"}, "downloads": -1, "filename": "futureproof-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d094c917326205676a33701645e82b1", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 9344, "upload_time": "2020-01-12T13:19:39", "upload_time_iso_8601": "2020-01-12T13:19:39.834767Z", "url": "https://files.pythonhosted.org/packages/86/f4/61afc69eae87edc942708b9798b03f125003db81b1d3ed659f4b5af9eba5/futureproof-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e708b6315f446c5db4af20a9f2683204", "sha256": "ad16deedefc3a93c49186e77f3239755cd6b923cf4e7cab50d45559bd766649c"}, "downloads": -1, "filename": "futureproof-0.2.2.tar.gz", "has_sig": false, "md5_digest": "e708b6315f446c5db4af20a9f2683204", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10903, "upload_time": "2020-01-12T13:19:42", "upload_time_iso_8601": "2020-01-12T13:19:42.014801Z", "url": "https://files.pythonhosted.org/packages/48/8d/561345574b04ce1497d388d374bf6f62e58d2d23d7d6871ddb4b9e87bc71/futureproof-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:59:33 2020"}