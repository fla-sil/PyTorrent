{"info": {"author": "Alice Bevan-McGregor", "author_email": "alice@gothcandy.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Internet :: WWW/HTTP :: WSGI", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==================\nweb.dispatch.route\n==================\n\n    \u00a9 2009-2016 Alice Bevan-McGregor and contributors.\n\n..\n\n    https://github.com/marrow/web.dispatch.route\n\n..\n\n    |latestversion| |ghtag| |downloads| |masterstatus| |mastercover| |masterreq| |ghwatch| |ghstar|\n\n\n\nIntroduction\n============\n\nDispatch is the process of taking some starting point and a path, then resolving the object that path refers to. This\nprocess is common to almost every web application framework (transforming URLs into controllers), RPC system, and even\nfilesystem shell. Other terms for this process include: \"traversal\", \"routing\", or \"lookup\".\n\nRoute-based dispatch is the variant of dispatch that uses handlers for explicitly registered paths, optionally with\nregular expression (regex)-based path elements. This implementation exposes an API that particularly benefits from the\nuse of mix-ins as traits. This gives a clean flexability to routes that are difficult to beat.\n\nMost implementations of regex-based routing do so in a na\u00efve way, often iterating lists of all routes at O(n)\nworst-case. Others allow you to manually partition the space with sub-routers, or optimize by declaration or\nmanual lexicographical order. Some produce monolithic regular expressions that can cause instability when an\napplication grows beyond a certain size. Some even iterate the whole list even after finding an endpoint.\n\nThis dispatcher does not. It builds a tree, and descends the tree preferring static elements to dynamic ones,\nwith a controllalbe presedence at declaration. It optionally handles binding matched dynamic elements to arguments on\nthe resulting endpoint. Performance is O(depth) worst-case.\n\nThis package speaks a standardized `dispatch protocol <https://github.com/marrow/WebCore/wiki/Dispatch-Protocol>`_ and\nis not entirely intended for direct use by most developers. The target audience is instead the authors of frameworks\nthat may require such modular dispatch for use by their own users.\n\n\nInstallation\n============\n\nInstalling ``web.dispatch.route`` is easy, just execute the following in a terminal::\n\n    pip install web.dispatch.route\n\n**Note:** We *strongly* recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight `virtualenv <https://virtualenv.pypa.io/en/latest/virtualenv.html>`_, others prefer solutions as\nrobust as `Vagrant <http://www.vagrantup.com>`_.\n\nIf you add ``web.dispatch.route`` to the ``install_requires`` argument of the call to ``setup()`` in your\napplication's ``setup.py`` file, this dispatcher will be automatically installed and made available when your own\napplication or library is installed.  We recommend using \"less than\" version numbers to ensure there are no\nunintentional side-effects when updating.  Use ``web.dispatch.route<1.1`` to get all bugfixes for the current release,\nand ``web.dispatch.route<2.0`` to get bugfixes and feature updates while ensuring that large breaking changes are not\ninstalled.\n\n\nDevelopment Version\n-------------------\n\n    |developstatus| |developcover| |ghsince| |issuecount| |ghfork|\n\nDevelopment takes place on `GitHub <https://github.com/>`_ in the \n`web.dispatch.route <https://github.com/marrow/web.dispatch.route/>`_ project.  Issue tracking, documentation, and\ndownloads are provided there.\n\nInstalling the current development version requires `Git <http://git-scm.com/>`_, a distributed source code management\nsystem.  If you have Git you can run the following to download and *link* the development version into your Python\nruntime::\n\n    git clone https://github.com/marrow/web.dispatch.route.git\n    (cd web.dispatch.route; python setup.py develop)\n\nYou can then upgrade to the latest version at any time::\n\n    (cd web.dispatch.route; git pull; python setup.py develop)\n\nIf you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n`GitHub's documentation <http://help.github.com/>`_.\n\n\nUsage\n=====\n\nThis section is split between framework authors who will be integrating the overall protocol into their systems, and\nthe \"producers\" using the system to register routes according to the API.\n\nFramework Use\n-------------\n\nTo begin resolving paths against routes registered in objects, first instantiate the dispatcher::\n\n    from web.dispatch.route import RouteDispatch\n    \n    dispatch = RouteDispatch()\n\nCurrently the route dispatcher has no configuration options.  With a prepared dispatcher, and supposing you have some\nobject to dispatch against, you'll need to prepare the path according to the protocol::\n\n    path = \"/foo/bar/baz\"  # Initial path, i.e. an HTTP request's PATH_INFO.\n    path = path.split('/')  # Find the path components.\n    path = path[1:]  # Skip the singular leading slash; see the API specification.\n    path = deque(path)  # Provide the path as a deque instance, allowing popleft.\n\nOf course, the above is rarely split apart like that. We split apart the invidiual steps of path processing here to\nmore clearly illustrate. In a web framework the above would happen once per request that uses dispatch. This, of\ncourse, frees your framework to use whatever internal or public representation of path you want: choices of\nseparators, and the ability for deque to consume arbitrary iterables. An RPC system might ``split`` on a period and\nsimply not have the possibility of leading separators. Etc.\n\nYou can now call the dispatcher and iterate the dispatch events::\n\n    for segment, handler, endpoint, *meta in dispatch(None, some_object, path):\n        print(segment, handler, endpoint)  # Do something with this information.\n\nThe initial ``None`` value there represents the \"context\" to pass along to initializers of classes encountered during\ndispatch.  If the value ``None`` is provided, classes won't be instantiated with any arguments. If a context is\nprovided it will be passed as the first positional argument to instantiation.\n\nAfter completing iteration, check the final ``endpoint``. If it is ``True`` then the path was successfully mapped to\nthe object referenced by the ``handler`` variable. If dispatch is unsuccessful, a ``LookupError`` is raised with an\nexplanation referencing the path element that caused the erorr.\n\nYou can always just skip straight to the answer if you so choose::\n\n    try:\n        segment, handler, endpoint, *meta = list(dispatch(None, some_object, path))[-1]\n    except LookupError:\n        ... # Dispatch failed.\n\nHowever, providing some mechanism for callbacks or notifications of dispatch is often far more generally useful.\n\n**Note:** It is entirely permissable for dispatchers to return ``None`` as a processed path segment. Route-based\ndispatch will do this to announce the starting point of dispatch. This is especially useful if you need to know if the\ninitial object was a class that was instantiated.  (In that event ``handler`` will be an instance of ``some_object``\nduring the first iteration instead of being literally ``some_object``.)  Other dispatchers may return ``None`` at\nother times, such as to indicate multiple steps of intermediate processing.\n\nPython 2 & 3 Compatibility\n~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe dispatch protocol is designed to be extendable in the future by using ``namedtuple`` subclasses, however this has\nan impact on usage as you may have noticed the ``*meta`` in there. This syntax, introduced in Python 3, will gather\nany extraneous tuple elements into a separate list. If you actually care about the metadata do not unpack the tuple\nthis way.  Instead::\n\n    for meta in dispatch(None, some_object, path):\n        segment, handler, endpoint = step[:3]  # Unpack, but preserve.\n        print(segment, handler, endpoint, meta)  # Do something with this information.\n\nThis document is written from the perspective of modern Python 3, and throwing away the metadata within the ``for``\nstatement itself provides more compact examples. The above method of unpacking the first three values is the truly\nportable way to do this across versions.\n\n\nBasic Routable Objects\n----------------------\n\nThe simplest routable object is one that has some attribute with a ``__route__`` attribute of its own::\n\n    class Root:\n        def hello(self, name):\n            return \"Hello \" + name\n        \n        hello.__route__ = '/{name}'\n\nThis defines a method capable of handling any single path element. Because this is a common pattern, and having such\nannotations after the method body, divorced from the method's definition, is ugly, a decorator is provided::\n\n    from web.dispatch.route import route\n\n    class Root:\n        @route('/{name}')\n        def hello(self, name):\n            return \"Hello \" + name\n\nNow an attempt to access a path such as ``/world`` will result in version of the method with that argument already\nbound to it. The syntax allows for customization of the default expression, which is simply \"any single path element\".\nTo do so, after the name add a colon (``:``) followed by the custom expression. Be careful not to use any forward\nslashes within your expression::\n\n    class Root:\n        @route('/{name:[a-zA-Z ]+}/{age:[1-9][0-9]*}')\n        def hello(self, name, age):\n            return name + \" is \" + age + \" years old\"\n\nNow access to ``/dad/27`` is valid, returning a callable that when executed will return ``dad is 27 years old``, but\n``/42/dad`` is invalid, and won't match any routes. When using the ``route`` decorator declaration order is preserved\nvia the ``__index__`` annotation.\n\n\nVersion History\n===============\n\nVersion 1.0\n-----------\n\n* Initial extract from WebCore 2.\n\n\nLicense\n=======\n\nweb.dispatch.route has been released under the MIT Open Source license.\n\nThe MIT License\n---------------\n\nCopyright \u00a9 2009-2016 Alice Bevan-McGregor and contributors.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.\n\nTHE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n\n.. |ghwatch| image:: https://img.shields.io/github/watchers/marrow/web.dispatch.route.svg?style=social&label=Watch\n    :target: https://github.com/marrow/web.dispatch.route/subscription\n    :alt: Subscribe to project activity on Github.\n\n.. |ghstar| image:: https://img.shields.io/github/stars/marrow/web.dispatch.route.svg?style=social&label=Star\n    :target: https://github.com/marrow/web.dispatch.route/subscription\n    :alt: Star this project on Github.\n\n.. |ghfork| image:: https://img.shields.io/github/forks/marrow/web.dispatch.route.svg?style=social&label=Fork\n    :target: https://github.com/marrow/web.dispatch.route/fork\n    :alt: Fork this project on Github.\n\n.. |masterstatus| image:: http://img.shields.io/travis/marrow/web.dispatch.route/master.svg?style=flat\n    :target: https://travis-ci.org/marrow/web.dispatch.route/branches\n    :alt: Release build status.\n\n.. |mastercover| image:: http://img.shields.io/codecov/c/github/marrow/web.dispatch.route/master.svg?style=flat\n    :target: https://codecov.io/github/marrow/web.dispatch.route?branch=master\n    :alt: Release test coverage.\n\n.. |masterreq| image:: https://img.shields.io/requires/github/marrow/web.dispatch.route.svg\n    :target: https://requires.io/github/marrow/web.dispatch.route/requirements/?branch=master\n    :alt: Status of release dependencies.\n\n.. |developstatus| image:: http://img.shields.io/travis/marrow/web.dispatch.route/develop.svg?style=flat\n    :target: https://travis-ci.org/marrow/web.dispatch.route/branches\n    :alt: Development build status.\n\n.. |developcover| image:: http://img.shields.io/codecov/c/github/marrow/web.dispatch.route/develop.svg?style=flat\n    :target: https://codecov.io/github/marrow/web.dispatch.route?branch=develop\n    :alt: Development test coverage.\n\n.. |developreq| image:: https://img.shields.io/requires/github/marrow/web.dispatch.route.svg\n    :target: https://requires.io/github/marrow/web.dispatch.route/requirements/?branch=develop\n    :alt: Status of development dependencies.\n\n.. |issuecount| image:: http://img.shields.io/github/issues-raw/marrow/web.dispatch.route.svg?style=flat\n    :target: https://github.com/marrow/web.dispatch.route/issues\n    :alt: Github Issues\n\n.. |ghsince| image:: https://img.shields.io/github/commits-since/marrow/web.dispatch.route/1.0.0.svg\n    :target: https://github.com/marrow/web.dispatch.route/commits/develop\n    :alt: Changes since last release.\n\n.. |ghtag| image:: https://img.shields.io/github/tag/marrow/web.dispatch.route.svg\n    :target: https://github.com/marrow/web.dispatch.route/tree/1.0.0\n    :alt: Latest Github tagged release.\n\n.. |latestversion| image:: http://img.shields.io/pypi/v/web.dispatch.route.svg?style=flat\n    :target: https://pypi.python.org/pypi/web.dispatch.route\n    :alt: Latest released version.\n\n.. |downloads| image:: http://img.shields.io/pypi/dw/web.dispatch.route.svg?style=flat\n    :target: https://pypi.python.org/pypi/web.dispatch.route\n    :alt: Downloads per week.\n\n.. |cake| image:: http://img.shields.io/badge/cake-lie-1b87fb.svg?style=flat", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/marrow/web.dispatch.route", "keywords": "", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "web.dispatch.route", "package_url": "https://pypi.org/project/web.dispatch.route/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/web.dispatch.route/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/marrow/web.dispatch.route"}, "release_url": "https://pypi.org/project/web.dispatch.route/1.0.0/", "requires_dist": null, "requires_python": null, "summary": "Route-based dispatch; highly optimized tree-based routes for WebCore, with support for regular expression components.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <blockquote>\n\u00a9 2009-2016 Alice Bevan-McGregor and contributors.</blockquote>\n<blockquote>\n<a href=\"https://github.com/marrow/web.dispatch.route\" rel=\"nofollow\">https://github.com/marrow/web.dispatch.route</a></blockquote>\n<blockquote>\n<a href=\"https://pypi.python.org/pypi/web.dispatch.route\" rel=\"nofollow\"><img alt=\"Latest released version.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e3a513871ae413373a66b9356f369b7136c9280/687474703a2f2f696d672e736869656c64732e696f2f707970692f762f7765622e64697370617463682e726f7574652e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/tree/1.0.0\" rel=\"nofollow\"><img alt=\"Latest Github tagged release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f8b335fcd7f82a9bea24909aae2f0ab910b6d3ed/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f7461672f6d6172726f772f7765622e64697370617463682e726f7574652e737667\"></a> <a href=\"https://pypi.python.org/pypi/web.dispatch.route\" rel=\"nofollow\"><img alt=\"Downloads per week.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24b4ba6ac8068139ebe5ea96b4e09a8e0c71d469/687474703a2f2f696d672e736869656c64732e696f2f707970692f64772f7765622e64697370617463682e726f7574652e7376673f7374796c653d666c6174\"></a> <a href=\"https://travis-ci.org/marrow/web.dispatch.route/branches\" rel=\"nofollow\"><img alt=\"Release build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3d3a63393c9ce7b240c238d525a0c7ac2f1826fb/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f7765622e64697370617463682e726f7574652f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/web.dispatch.route?branch=master\" rel=\"nofollow\"><img alt=\"Release test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ca6dc929adf44457d67f677c1eeafec17f88e325/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f7765622e64697370617463682e726f7574652f6d61737465722e7376673f7374796c653d666c6174\"></a> <a href=\"https://requires.io/github/marrow/web.dispatch.route/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Status of release dependencies.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c55031f22a982353098c455710392b94fe7b88b6/68747470733a2f2f696d672e736869656c64732e696f2f72657175697265732f6769746875622f6d6172726f772f7765622e64697370617463682e726f7574652e737667\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/subscription\" rel=\"nofollow\"><img alt=\"Subscribe to project activity on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf5a76b5c8cb1e4f3b3eef19c461a06209ffac2e/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f77617463686572732f6d6172726f772f7765622e64697370617463682e726f7574652e7376673f7374796c653d736f6369616c266c6162656c3d5761746368\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/subscription\" rel=\"nofollow\"><img alt=\"Star this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e0e81e3858fedc374fcdf1ff744dcc41d1470c5b/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f6d6172726f772f7765622e64697370617463682e726f7574652e7376673f7374796c653d736f6369616c266c6162656c3d53746172\"></a></blockquote>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Dispatch is the process of taking some starting point and a path, then resolving the object that path refers to. This\nprocess is common to almost every web application framework (transforming URLs into controllers), RPC system, and even\nfilesystem shell. Other terms for this process include: \u201ctraversal\u201d, \u201crouting\u201d, or \u201clookup\u201d.</p>\n<p>Route-based dispatch is the variant of dispatch that uses handlers for explicitly registered paths, optionally with\nregular expression (regex)-based path elements. This implementation exposes an API that particularly benefits from the\nuse of mix-ins as traits. This gives a clean flexability to routes that are difficult to beat.</p>\n<p>Most implementations of regex-based routing do so in a na\u00efve way, often iterating lists of all routes at O(n)\nworst-case. Others allow you to manually partition the space with sub-routers, or optimize by declaration or\nmanual lexicographical order. Some produce monolithic regular expressions that can cause instability when an\napplication grows beyond a certain size. Some even iterate the whole list even after finding an endpoint.</p>\n<p>This dispatcher does not. It builds a tree, and descends the tree preferring static elements to dynamic ones,\nwith a controllalbe presedence at declaration. It optionally handles binding matched dynamic elements to arguments on\nthe resulting endpoint. Performance is O(depth) worst-case.</p>\n<p>This package speaks a standardized <a href=\"https://github.com/marrow/WebCore/wiki/Dispatch-Protocol\" rel=\"nofollow\">dispatch protocol</a> and\nis not entirely intended for direct use by most developers. The target audience is instead the authors of frameworks\nthat may require such modular dispatch for use by their own users.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Installing <tt>web.dispatch.route</tt> is easy, just execute the following in a terminal:</p>\n<pre>pip install web.dispatch.route\n</pre>\n<p><strong>Note:</strong> We <em>strongly</em> recommend always using a container, virtualization, or sandboxing environment of some kind when\ndeveloping using Python; installing things system-wide is yucky (for a variety of reasons) nine times out of ten.  We\nprefer light-weight <a href=\"https://virtualenv.pypa.io/en/latest/virtualenv.html\" rel=\"nofollow\">virtualenv</a>, others prefer solutions as\nrobust as <a href=\"http://www.vagrantup.com\" rel=\"nofollow\">Vagrant</a>.</p>\n<p>If you add <tt>web.dispatch.route</tt> to the <tt>install_requires</tt> argument of the call to <tt>setup()</tt> in your\napplication\u2019s <tt>setup.py</tt> file, this dispatcher will be automatically installed and made available when your own\napplication or library is installed.  We recommend using \u201cless than\u201d version numbers to ensure there are no\nunintentional side-effects when updating.  Use <tt>web.dispatch.route&lt;1.1</tt> to get all bugfixes for the current release,\nand <tt>web.dispatch.route&lt;2.0</tt> to get bugfixes and feature updates while ensuring that large breaking changes are not\ninstalled.</p>\n<div id=\"development-version\">\n<h3>Development Version</h3>\n<blockquote>\n<a href=\"https://travis-ci.org/marrow/web.dispatch.route/branches\" rel=\"nofollow\"><img alt=\"Development build status.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7b48956254224deec59230f3da5916efe957a648/687474703a2f2f696d672e736869656c64732e696f2f7472617669732f6d6172726f772f7765622e64697370617463682e726f7574652f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://codecov.io/github/marrow/web.dispatch.route?branch=develop\" rel=\"nofollow\"><img alt=\"Development test coverage.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33976dbf1d3f5fea94344f140ff3e13443b16121/687474703a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6d6172726f772f7765622e64697370617463682e726f7574652f646576656c6f702e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/commits/develop\" rel=\"nofollow\"><img alt=\"Changes since last release.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/32b5d593d9bfa49c0fb009abfe034f5bcfcc46ef/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f636f6d6d6974732d73696e63652f6d6172726f772f7765622e64697370617463682e726f7574652f312e302e302e737667\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/issues\" rel=\"nofollow\"><img alt=\"Github Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a7cc9f4b70af0ce7b10351c8d19b765d682be463/687474703a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732d7261772f6d6172726f772f7765622e64697370617463682e726f7574652e7376673f7374796c653d666c6174\"></a> <a href=\"https://github.com/marrow/web.dispatch.route/fork\" rel=\"nofollow\"><img alt=\"Fork this project on Github.\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d68f59e6313818a1be0a0d6f8fa1f56fdc864742/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f6d6172726f772f7765622e64697370617463682e726f7574652e7376673f7374796c653d736f6369616c266c6162656c3d466f726b\"></a></blockquote>\n<p>Development takes place on <a href=\"https://github.com/\" rel=\"nofollow\">GitHub</a> in the\n<a href=\"https://github.com/marrow/web.dispatch.route/\" rel=\"nofollow\">web.dispatch.route</a> project.  Issue tracking, documentation, and\ndownloads are provided there.</p>\n<p>Installing the current development version requires <a href=\"http://git-scm.com/\" rel=\"nofollow\">Git</a>, a distributed source code management\nsystem.  If you have Git you can run the following to download and <em>link</em> the development version into your Python\nruntime:</p>\n<pre>git clone https://github.com/marrow/web.dispatch.route.git\n(cd web.dispatch.route; python setup.py develop)\n</pre>\n<p>You can then upgrade to the latest version at any time:</p>\n<pre>(cd web.dispatch.route; git pull; python setup.py develop)\n</pre>\n<p>If you would like to make changes and contribute them back to the project, fork the GitHub project, make your changes,\nand submit a pull request.  This process is beyond the scope of this documentation; for more information see\n<a href=\"http://help.github.com/\" rel=\"nofollow\">GitHub\u2019s documentation</a>.</p>\n</div>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>This section is split between framework authors who will be integrating the overall protocol into their systems, and\nthe \u201cproducers\u201d using the system to register routes according to the API.</p>\n<div id=\"framework-use\">\n<h3>Framework Use</h3>\n<p>To begin resolving paths against routes registered in objects, first instantiate the dispatcher:</p>\n<pre>from web.dispatch.route import RouteDispatch\n\ndispatch = RouteDispatch()\n</pre>\n<p>Currently the route dispatcher has no configuration options.  With a prepared dispatcher, and supposing you have some\nobject to dispatch against, you\u2019ll need to prepare the path according to the protocol:</p>\n<pre>path = \"/foo/bar/baz\"  # Initial path, i.e. an HTTP request's PATH_INFO.\npath = path.split('/')  # Find the path components.\npath = path[1:]  # Skip the singular leading slash; see the API specification.\npath = deque(path)  # Provide the path as a deque instance, allowing popleft.\n</pre>\n<p>Of course, the above is rarely split apart like that. We split apart the invidiual steps of path processing here to\nmore clearly illustrate. In a web framework the above would happen once per request that uses dispatch. This, of\ncourse, frees your framework to use whatever internal or public representation of path you want: choices of\nseparators, and the ability for deque to consume arbitrary iterables. An RPC system might <tt>split</tt> on a period and\nsimply not have the possibility of leading separators. Etc.</p>\n<p>You can now call the dispatcher and iterate the dispatch events:</p>\n<pre>for segment, handler, endpoint, *meta in dispatch(None, some_object, path):\n    print(segment, handler, endpoint)  # Do something with this information.\n</pre>\n<p>The initial <tt>None</tt> value there represents the \u201ccontext\u201d to pass along to initializers of classes encountered during\ndispatch.  If the value <tt>None</tt> is provided, classes won\u2019t be instantiated with any arguments. If a context is\nprovided it will be passed as the first positional argument to instantiation.</p>\n<p>After completing iteration, check the final <tt>endpoint</tt>. If it is <tt>True</tt> then the path was successfully mapped to\nthe object referenced by the <tt>handler</tt> variable. If dispatch is unsuccessful, a <tt>LookupError</tt> is raised with an\nexplanation referencing the path element that caused the erorr.</p>\n<p>You can always just skip straight to the answer if you so choose:</p>\n<pre>try:\n    segment, handler, endpoint, *meta = list(dispatch(None, some_object, path))[-1]\nexcept LookupError:\n    ... # Dispatch failed.\n</pre>\n<p>However, providing some mechanism for callbacks or notifications of dispatch is often far more generally useful.</p>\n<p><strong>Note:</strong> It is entirely permissable for dispatchers to return <tt>None</tt> as a processed path segment. Route-based\ndispatch will do this to announce the starting point of dispatch. This is especially useful if you need to know if the\ninitial object was a class that was instantiated.  (In that event <tt>handler</tt> will be an instance of <tt>some_object</tt>\nduring the first iteration instead of being literally <tt>some_object</tt>.)  Other dispatchers may return <tt>None</tt> at\nother times, such as to indicate multiple steps of intermediate processing.</p>\n<div id=\"python-2-3-compatibility\">\n<h4>Python 2 &amp; 3 Compatibility</h4>\n<p>The dispatch protocol is designed to be extendable in the future by using <tt>namedtuple</tt> subclasses, however this has\nan impact on usage as you may have noticed the <tt>*meta</tt> in there. This syntax, introduced in Python 3, will gather\nany extraneous tuple elements into a separate list. If you actually care about the metadata do not unpack the tuple\nthis way.  Instead:</p>\n<pre>for meta in dispatch(None, some_object, path):\n    segment, handler, endpoint = step[:3]  # Unpack, but preserve.\n    print(segment, handler, endpoint, meta)  # Do something with this information.\n</pre>\n<p>This document is written from the perspective of modern Python 3, and throwing away the metadata within the <tt>for</tt>\nstatement itself provides more compact examples. The above method of unpacking the first three values is the truly\nportable way to do this across versions.</p>\n</div>\n</div>\n<div id=\"basic-routable-objects\">\n<h3>Basic Routable Objects</h3>\n<p>The simplest routable object is one that has some attribute with a <tt>__route__</tt> attribute of its own:</p>\n<pre>class Root:\n    def hello(self, name):\n        return \"Hello \" + name\n\n    hello.__route__ = '/{name}'\n</pre>\n<p>This defines a method capable of handling any single path element. Because this is a common pattern, and having such\nannotations after the method body, divorced from the method\u2019s definition, is ugly, a decorator is provided:</p>\n<pre>from web.dispatch.route import route\n\nclass Root:\n    @route('/{name}')\n    def hello(self, name):\n        return \"Hello \" + name\n</pre>\n<p>Now an attempt to access a path such as <tt>/world</tt> will result in version of the method with that argument already\nbound to it. The syntax allows for customization of the default expression, which is simply \u201cany single path element\u201d.\nTo do so, after the name add a colon (<tt>:</tt>) followed by the custom expression. Be careful not to use any forward\nslashes within your expression:</p>\n<pre>class Root:\n    @route('/{name:[a-zA-Z ]+}/{age:[1-9][0-9]*}')\n    def hello(self, name, age):\n        return name + \" is \" + age + \" years old\"\n</pre>\n<p>Now access to <tt>/dad/27</tt> is valid, returning a callable that when executed will return <tt>dad is 27 years old</tt>, but\n<tt>/42/dad</tt> is invalid, and won\u2019t match any routes. When using the <tt>route</tt> decorator declaration order is preserved\nvia the <tt>__index__</tt> annotation.</p>\n</div>\n</div>\n<div id=\"version-history\">\n<h2>Version History</h2>\n<h2 id=\"version-1-0\"><span class=\"section-subtitle\">Version 1.0</span></h2>\n<ul>\n<li>Initial extract from WebCore 2.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>web.dispatch.route has been released under the MIT Open Source license.</p>\n<div id=\"the-mit-license\">\n<h3>The MIT License</h3>\n<p>Copyright \u00a9 2009-2016 Alice Bevan-McGregor and contributors.</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated\ndocumentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the\nrights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit\npersons to whom the Software is furnished to do so, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the\nSoftware.</p>\n<p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE\nWARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\nOTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1956749, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "16c66463cc185112f2c0f4fd71af5b2b", "sha256": "6cbb2768a9056221444e787a0d7d62c9657da520bb7b946338ddfe5bf39219f3"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16c66463cc185112f2c0f4fd71af5b2b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17676, "upload_time": "2016-02-15T08:00:42", "upload_time_iso_8601": "2016-02-15T08:00:42.431765Z", "url": "https://files.pythonhosted.org/packages/53/2c/3d8dce2018a28a98ffcfd86ce5f31ea3f311ce1be0fc7a0b48f9aca066c9/web.dispatch.route-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "352f089ff3eee48276830759e587a260", "sha256": "3de7515a9c1888a62c1cbc4526133c390bf84feb8a6f803fb4712fee7e319e6e"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0-py3.5.egg", "has_sig": false, "md5_digest": "352f089ff3eee48276830759e587a260", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 16207, "upload_time": "2016-02-15T08:00:34", "upload_time_iso_8601": "2016-02-15T08:00:34.807541Z", "url": "https://files.pythonhosted.org/packages/a9/ad/00b099bab1562704f710043c56e2edc091840be9b40c1e11af672baf1c72/web.dispatch.route-1.0.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c30de4c7e706621fe1ffcb9291043f2", "sha256": "b03b156d7e1e93ff790b78d415524ab7ab585fad9c38df75b0c1cd512743873c"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3c30de4c7e706621fe1ffcb9291043f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17217, "upload_time": "2016-02-15T08:00:27", "upload_time_iso_8601": "2016-02-15T08:00:27.523138Z", "url": "https://files.pythonhosted.org/packages/9a/69/e3de5a9bfbfc023665fbe2ad672281350324e27db68eb108eda6abf3b006/web.dispatch.route-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "16c66463cc185112f2c0f4fd71af5b2b", "sha256": "6cbb2768a9056221444e787a0d7d62c9657da520bb7b946338ddfe5bf39219f3"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "16c66463cc185112f2c0f4fd71af5b2b", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 17676, "upload_time": "2016-02-15T08:00:42", "upload_time_iso_8601": "2016-02-15T08:00:42.431765Z", "url": "https://files.pythonhosted.org/packages/53/2c/3d8dce2018a28a98ffcfd86ce5f31ea3f311ce1be0fc7a0b48f9aca066c9/web.dispatch.route-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "352f089ff3eee48276830759e587a260", "sha256": "3de7515a9c1888a62c1cbc4526133c390bf84feb8a6f803fb4712fee7e319e6e"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0-py3.5.egg", "has_sig": false, "md5_digest": "352f089ff3eee48276830759e587a260", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 16207, "upload_time": "2016-02-15T08:00:34", "upload_time_iso_8601": "2016-02-15T08:00:34.807541Z", "url": "https://files.pythonhosted.org/packages/a9/ad/00b099bab1562704f710043c56e2edc091840be9b40c1e11af672baf1c72/web.dispatch.route-1.0.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "3c30de4c7e706621fe1ffcb9291043f2", "sha256": "b03b156d7e1e93ff790b78d415524ab7ab585fad9c38df75b0c1cd512743873c"}, "downloads": -1, "filename": "web.dispatch.route-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3c30de4c7e706621fe1ffcb9291043f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17217, "upload_time": "2016-02-15T08:00:27", "upload_time_iso_8601": "2016-02-15T08:00:27.523138Z", "url": "https://files.pythonhosted.org/packages/9a/69/e3de5a9bfbfc023665fbe2ad672281350324e27db68eb108eda6abf3b006/web.dispatch.route-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:31:16 2020"}