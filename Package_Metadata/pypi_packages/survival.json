{"info": {"author": "Rohit Pandey", "author_email": "rohitpandey576@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# Survival\n\nAll kinds of survival analysis distributions and methods to optimize how long to wait for them.\n\nSurvival analysis is a branch of statistics for analyzing the expected duration of time until one or more events happen, such as death in biological organisms, failure in mechanical systems, occurrence of a disease, marriage, divorce, etc. \n\n## 1. Problem description\n\nLet's take a real world example that you (actually I) face everyday. It takes ten minutes for you to walk to work. However, there is a bus that also takes you right from your house to work. As an added bonus, the bus has internet, so you can start working while on it. The catch is that you don\u00e2\u20ac\u2122t know how long it will take for the bus to arrive.\n\nNow, being the productive person you are, you want to minimize the time you spend being in a state where you can\u00e2\u20ac\u2122t work (walking to work or waiting for the bus) over the long-run (say a year). How long should you wait for the bus each day given the distribution of its arrival times? \n\nThere is a whole family of problems that can be expressed in this framework. Basically, this is for any scenario *where you're waiting for something*. For example, most of complex software components make API calls to other components. And, they have a plan B for when these calls fail. Now, how long should it wait for the API call to respond before treating the call as failure?\n\nThis library contains methods that can help:\n\n1) Fit the distributions of the arrival times (for the bus or whatever process you're waiting for) given samples from it.\n2) Handles censored data points. This basically means that sometimes, you only know the bus took more than (say) 10 minutes since you gave up waiting for it.\n3) Find the optimal waiting thresholds using various strategies, parametric and non-parametric.\n4) Optimizing multiple thresholds within a complex state machine to maximize steady state time spent in desirable states.\n\n\n## 2. Installation\nTo install the library, run:\n\n```\npip install survival\n```\n\nMake sure you have all the requirements (requirements.txt) installed. If not, you can run:\n\n```\npip install -r requirements.txt\n```\n\nAlternately, you can fork/download the code and run from the main folder:\n\n```\npython setup.py install\n```\n\nIn this case, you'll need to have a PYTHONPATH variable on your system, with the root folder of this project included in it.\n\n## 3. Fitting a distribution to waiting times\n\nIn this section, we try and answer the question posed in section 1 - how long should we wait for the bus before giving up on it and starting to walk?\n\nFirst, we'll need to observe some data on the historic arrival times of the bus and fit a distribution to them. Note however that some of our data will be incomplete since when we give up on the bus after x minutes, we only know it took more than that time for it to arrive, but not exactly how much. These are called censored observations.\n\nHere is some sample code to fit a distribution when we have some complete observations (ti) and some censored observations (xi).\n\n```python\n# If you don't have it already, you can install matplotlib via - \n# pip install matplotlib\n>>> import matplotlib.pyplot as plt\n>>> from distributions.lomax import *\n>>> from distributions.loglogistic import *\n\n# Parameters for Lomax\n>>> k = 10.0; lmb = 0.5; sample_size = 5000; censor_level = 2.0; prob = 1.0\n\n# Let's assume the arrival times of the bus follow a Lomax distribution.\n>>> l = Lomax(k=k, lmb=lmb)\n\n# Generate samples from Lomax distribution.\n>>> samples = l.samples(size=sample_size)\n\n# Since we never wait for the bus more than x minutes,\n# the observed samples are the ones that take less than x minutes.\n>>> ti = samples[(samples<=censor_level)]\n\n# For the samples that took more than 10 minutes, add them to the censored array \n# all we know is they took more than x minutes but not exactly how long.\n>>> xi = np.ones(sum(samples>censor_level))*censor_level\n\n# Fit a log logistic model to the data we just generated (since we won't know the actual distribution in the real world, \n# we are fitting a distribution other than the one that generated the data). \n# Ignore the warnings.\n>>> ll1 = LogLogistic(ti=ti, xi=xi)\n\n# See how well the distribution fits the histogram.\n>>> histo = plt.hist(samples, normed=True)\n>>> xs = (histo[1][:len(histo[1])-1]+histo[1][1:])/2\n\n>>> plt.plot(xs, [ll1.pdf(i) for i in xs])\n>>> plt.show()\n```\n\n<a href=\"https://ryu577.github.io/jekyll/update/2018/05/22/optimum_waiting_thresholds.html\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/opt_thresholds/loglogistic_on_lomax.png\" \nalt=\"Image formed by above method\" width=\"240\" height=\"180\" border=\"10\" /></a>\n\n### 3.1 What is lomax distribution?\n\nIt is basically a Pareto distribution that has been shifted so that its support begins at zero. A heavy tailed distribution. For a non-negative random variable.\nTwo parameters define the distribution: scale parameter \u00ce\u00bb and shape parameter \u00ce\u00ba (sometimes denoted as \u00ce\u00b1). The shorthand X \u00e2\u02c6\u00bc Lomax(\u00ce\u00bb,\u00ce\u00ba) indicates the random variable X has a Lomax distribution with those two parameters.\n\n### 3.2 What is log logistic distribution?\n\nThe probability distribution of a random variable whose logarithm has a logistic distribution. For a non-negative random variable. It is used in survival analysis as a parametric model for events whose rate increases initially and decreases later, for example mortality rate from cancer.\n\n## 4. Optimizing waiting threshold using the distribution\n\nGoing back the the waiting for a bus example, we can model the process as a state machine. There are three possible states that we care about - \"waiting\", \"walking\" and \"working\". The figure below represents the states and the arrows show the possible transitions between the states.\n\n<a href=\"https://ryu577.github.io/jekyll/update/2018/05/22/optimum_waiting_thresholds.html\" \ntarget=\"_blank\"><img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/opt_thresholds/bus_states.png\" \nalt=\"Image formed by above method\" width=\"480\" height=\"400\" border=\"10\" /></a>\n\nAlso, we assume that which state we go to next and how much time it takes to jump to that state depends only on which state we are currently in. This property is called the Markov property. \n\n\nTo describe the transitions, we need two matrices. One for transition probabilities and another for transition times. The matrices represent some properties of the transition from state 'i' to state 'j' (exactly what will become clear soon). Again, the first state (i=0) is \"waiting\", the second state (i=1) is \"walking\" and the last and most desirable state where we want to spend the highest proportion of time is \"working\".\n\n\nContinuing from above, we can run the following code:\n\n\n```python\n# The time it takes to walk to work \nintervention_cost=200\n\n# The amount of time we wait for the bus before walking respectively.\ntau=275\n\n# The transition probabilities (p) and transition times (t) depend on \n# the amount of time we're willing to wait for the bus (tau)\n# and the amount of time it takes to walk to work (intervention_cost).\n>>> (p,t) = ll1.construct_matrices(tau, intervention_cost)\n\n>>> p\nmatrix([[ 0.        ,  0.00652163,  0.99347837],\n        [ 0.        ,  0.        ,  1.        ],\n        [ 0.1       ,  0.9       ,  0.        ]])\n```\n\nThe 'p' matrix you see above is the matrix of transition probabilities. The (i,j) row is the probability of transitioning to state 'j' given you started in state 'i'. Note that the rows of this matrix sum to 1 since we have to make a transition to one of the other available states. Also, the diagonals of the matrix are 0 since the (i,i) entry would imply transitioning from state i to i, which doesn't make sense in the context of a transition. \n\nGiven this transition matrix, let's say we start in any state i and make a transition to another state according to the probabilities given by row 'i' in the matrix. If we end up in state 'j', we spend one unit of time there and then make another random transition according to the probabilities in row 'j' and so on, repeating this process many times. What percentage of the total time would we then expect to spend in each of the states? This is called the vector of steady state probabilities and it can be calculated via the method described in the answer <a href=\"https://math.stackexchange.com/a/2452452/155881\">here</a>.\n\n\nNow let's look at the other matrix we got. This is the matrix of transition times. The (i,j) entry represents that given we make a transition from state 'i' to state 'j', how long will it take on an average to make that transition. Again, the diagonals are zero since it doesn't make sense to transition from a state to itself. However, there is no constraint on the rows unlike the 'p' matrix.\n\n```python\n>>>t\nmatrix([[   0.        ,    5.        ,    0.27409621],\n        [   0.        ,    0.        ,   20.        ],\n        [ 100.        ,  100.        ,    0.        ]])\n```\n\nNow, instead of spending one unit of time in each state, what if we spend time amounting to the entry of (i,j) in the 't' matrix before making a transition to state 'j'? In the context of this process, what percentage of time do we expect to spend in each state? This is described <a href=\"https://math.stackexchange.com/a/2452464/155881\">here</a>.\n\nNotice how the code that generated the transition matrices is a function of the threshod, 'tau' and the intervention cost ('intervention_cost'). Now, we obviously want the 'tau' that gives us the most percentage of time spent in the state 'working'.\n\nWe can simply test many values of the threshold and pick the one that gives us the highest proportion of time spent in the 'working' state.\n\n```python\n>>> probs = []\n>>> for tau in np.arange(10,900,1):\n>>>\t (p,t) = ll1.construct_matrices(tau, intervention_cost)\n>>>\t probs.append(steady_state(p, t)[2])\n>>> opt_tau_1 = np.arange(10,900,1)[np.argmax(probs)]\n```\n\nThen, we can also calculate the optimal threshold <a href=\"https://github.com/ryu577/survival/blob/443e23d761656fad0069a3e0572d08f0706e8618/distributions/basemodel.py#L101\">based on the parametric distribution</a>.\n\n\n```python\nopt_tau_2 = ll1.optimal_wait_threshold(intervention_cost)\n```\n\nAnd we can see that the two are very close to each other.\n\n## 5. Why this library\n\nNote: most of the distributions covered in this library are also available in scipy.stats. So, why write a new library? \n\nThere are many reasons, but here are some of them:\n* The scipy classes don't have the ability to deal with censored data when fitting the distribution.\n* The scipy classes don't have the ability to regress the distributions on features.\n* The scipy classes are missing some methods crucial to the optimal waiting threshold problem, like hazard rate.\n\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ryu577/survival", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "survival", "package_url": "https://pypi.org/project/survival/", "platform": "", "project_url": "https://pypi.org/project/survival/", "project_urls": {"Homepage": "https://github.com/ryu577/survival"}, "release_url": "https://pypi.org/project/survival/0.0.6/", "requires_dist": null, "requires_python": "", "summary": "Add static script_dir() method to Path", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            # Survival<br><br>All kinds of survival analysis distributions and methods to optimize how long to wait for them.<br><br>Survival analysis is a branch of statistics for analyzing the expected duration of time until one or more events happen, such as death in biological organisms, failure in mechanical systems, occurrence of a disease, marriage, divorce, etc. <br><br>## 1. Problem description<br><br>Let's take a real world example that you (actually I) face everyday. It takes ten minutes for you to walk to work. However, there is a bus that also takes you right from your house to work. As an added bonus, the bus has internet, so you can start working while on it. The catch is that you don\u00e2\u20ac\u2122t know how long it will take for the bus to arrive.<br><br>Now, being the productive person you are, you want to minimize the time you spend being in a state where you can\u00e2\u20ac\u2122t work (walking to work or waiting for the bus) over the long-run (say a year). How long should you wait for the bus each day given the distribution of its arrival times? <br><br>There is a whole family of problems that can be expressed in this framework. Basically, this is for any scenario *where you're waiting for something*. For example, most of complex software components make API calls to other components. And, they have a plan B for when these calls fail. Now, how long should it wait for the API call to respond before treating the call as failure?<br><br>This library contains methods that can help:<br><br>1) Fit the distributions of the arrival times (for the bus or whatever process you're waiting for) given samples from it.<br>2) Handles censored data points. This basically means that sometimes, you only know the bus took more than (say) 10 minutes since you gave up waiting for it.<br>3) Find the optimal waiting thresholds using various strategies, parametric and non-parametric.<br>4) Optimizing multiple thresholds within a complex state machine to maximize steady state time spent in desirable states.<br><br><br>## 2. Installation<br>To install the library, run:<br><br>```<br>pip install survival<br>```<br><br>Make sure you have all the requirements (requirements.txt) installed. If not, you can run:<br><br>```<br>pip install -r requirements.txt<br>```<br><br>Alternately, you can fork/download the code and run from the main folder:<br><br>```<br>python setup.py install<br>```<br><br>In this case, you'll need to have a PYTHONPATH variable on your system, with the root folder of this project included in it.<br><br>## 3. Fitting a distribution to waiting times<br><br>In this section, we try and answer the question posed in section 1 - how long should we wait for the bus before giving up on it and starting to walk?<br><br>First, we'll need to observe some data on the historic arrival times of the bus and fit a distribution to them. Note however that some of our data will be incomplete since when we give up on the bus after x minutes, we only know it took more than that time for it to arrive, but not exactly how much. These are called censored observations.<br><br>Here is some sample code to fit a distribution when we have some complete observations (ti) and some censored observations (xi).<br><br>```python<br># If you don't have it already, you can install matplotlib via - <br># pip install matplotlib<br>&gt;&gt;&gt; import matplotlib.pyplot as plt<br>&gt;&gt;&gt; from distributions.lomax import *<br>&gt;&gt;&gt; from distributions.loglogistic import *<br><br># Parameters for Lomax<br>&gt;&gt;&gt; k = 10.0; lmb = 0.5; sample_size = 5000; censor_level = 2.0; prob = 1.0<br><br># Let's assume the arrival times of the bus follow a Lomax distribution.<br>&gt;&gt;&gt; l = Lomax(k=k, lmb=lmb)<br><br># Generate samples from Lomax distribution.<br>&gt;&gt;&gt; samples = l.samples(size=sample_size)<br><br># Since we never wait for the bus more than x minutes,<br># the observed samples are the ones that take less than x minutes.<br>&gt;&gt;&gt; ti = samples[(samples&lt;=censor_level)]<br><br># For the samples that took more than 10 minutes, add them to the censored array <br># all we know is they took more than x minutes but not exactly how long.<br>&gt;&gt;&gt; xi = np.ones(sum(samples&gt;censor_level))*censor_level<br><br># Fit a log logistic model to the data we just generated (since we won't know the actual distribution in the real world, <br># we are fitting a distribution other than the one that generated the data). <br># Ignore the warnings.<br>&gt;&gt;&gt; ll1 = LogLogistic(ti=ti, xi=xi)<br><br># See how well the distribution fits the histogram.<br>&gt;&gt;&gt; histo = plt.hist(samples, normed=True)<br>&gt;&gt;&gt; xs = (histo[1][:len(histo[1])-1]+histo[1][1:])/2<br><br>&gt;&gt;&gt; plt.plot(xs, [ll1.pdf(i) for i in xs])<br>&gt;&gt;&gt; plt.show()<br>```<br><br>&lt;a href=\"https://ryu577.github.io/jekyll/update/2018/05/22/optimum_waiting_thresholds.html\" <br>target=\"_blank\"&gt;&lt;img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/opt_thresholds/loglogistic_on_lomax.png\" <br>alt=\"Image formed by above method\" width=\"240\" height=\"180\" border=\"10\" /&gt;&lt;/a&gt;<br><br>### 3.1 What is lomax distribution?<br><br>It is basically a Pareto distribution that has been shifted so that its support begins at zero. A heavy tailed distribution. For a non-negative random variable.<br>Two parameters define the distribution: scale parameter \u00ce\u00bb and shape parameter \u00ce\u00ba (sometimes denoted as \u00ce\u00b1). The shorthand X \u00e2\u02c6\u00bc Lomax(\u00ce\u00bb,\u00ce\u00ba) indicates the random variable X has a Lomax distribution with those two parameters.<br><br>### 3.2 What is log logistic distribution?<br><br>The probability distribution of a random variable whose logarithm has a logistic distribution. For a non-negative random variable. It is used in survival analysis as a parametric model for events whose rate increases initially and decreases later, for example mortality rate from cancer.<br><br>## 4. Optimizing waiting threshold using the distribution<br><br>Going back the the waiting for a bus example, we can model the process as a state machine. There are three possible states that we care about - \"waiting\", \"walking\" and \"working\". The figure below represents the states and the arrows show the possible transitions between the states.<br><br>&lt;a href=\"https://ryu577.github.io/jekyll/update/2018/05/22/optimum_waiting_thresholds.html\" <br>target=\"_blank\"&gt;&lt;img src=\"https://github.com/ryu577/ryu577.github.io/blob/master/Downloads/opt_thresholds/bus_states.png\" <br>alt=\"Image formed by above method\" width=\"480\" height=\"400\" border=\"10\" /&gt;&lt;/a&gt;<br><br>Also, we assume that which state we go to next and how much time it takes to jump to that state depends only on which state we are currently in. This property is called the Markov property. <br><br><br>To describe the transitions, we need two matrices. One for transition probabilities and another for transition times. The matrices represent some properties of the transition from state 'i' to state 'j' (exactly what will become clear soon). Again, the first state (i=0) is \"waiting\", the second state (i=1) is \"walking\" and the last and most desirable state where we want to spend the highest proportion of time is \"working\".<br><br><br>Continuing from above, we can run the following code:<br><br><br>```python<br># The time it takes to walk to work <br>intervention_cost=200<br><br># The amount of time we wait for the bus before walking respectively.<br>tau=275<br><br># The transition probabilities (p) and transition times (t) depend on <br># the amount of time we're willing to wait for the bus (tau)<br># and the amount of time it takes to walk to work (intervention_cost).<br>&gt;&gt;&gt; (p,t) = ll1.construct_matrices(tau, intervention_cost)<br><br>&gt;&gt;&gt; p<br>matrix([[ 0.        ,  0.00652163,  0.99347837],<br>        [ 0.        ,  0.        ,  1.        ],<br>        [ 0.1       ,  0.9       ,  0.        ]])<br>```<br><br>The 'p' matrix you see above is the matrix of transition probabilities. The (i,j) row is the probability of transitioning to state 'j' given you started in state 'i'. Note that the rows of this matrix sum to 1 since we have to make a transition to one of the other available states. Also, the diagonals of the matrix are 0 since the (i,i) entry would imply transitioning from state i to i, which doesn't make sense in the context of a transition. <br><br>Given this transition matrix, let's say we start in any state i and make a transition to another state according to the probabilities given by row 'i' in the matrix. If we end up in state 'j', we spend one unit of time there and then make another random transition according to the probabilities in row 'j' and so on, repeating this process many times. What percentage of the total time would we then expect to spend in each of the states? This is called the vector of steady state probabilities and it can be calculated via the method described in the answer &lt;a href=\"https://math.stackexchange.com/a/2452452/155881\"&gt;here&lt;/a&gt;.<br><br><br>Now let's look at the other matrix we got. This is the matrix of transition times. The (i,j) entry represents that given we make a transition from state 'i' to state 'j', how long will it take on an average to make that transition. Again, the diagonals are zero since it doesn't make sense to transition from a state to itself. However, there is no constraint on the rows unlike the 'p' matrix.<br><br>```python<br>&gt;&gt;&gt;t<br>matrix([[   0.        ,    5.        ,    0.27409621],<br>        [   0.        ,    0.        ,   20.        ],<br>        [ 100.        ,  100.        ,    0.        ]])<br>```<br><br>Now, instead of spending one unit of time in each state, what if we spend time amounting to the entry of (i,j) in the 't' matrix before making a transition to state 'j'? In the context of this process, what percentage of time do we expect to spend in each state? This is described &lt;a href=\"https://math.stackexchange.com/a/2452464/155881\"&gt;here&lt;/a&gt;.<br><br>Notice how the code that generated the transition matrices is a function of the threshod, 'tau' and the intervention cost ('intervention_cost'). Now, we obviously want the 'tau' that gives us the most percentage of time spent in the state 'working'.<br><br>We can simply test many values of the threshold and pick the one that gives us the highest proportion of time spent in the 'working' state.<br><br>```python<br>&gt;&gt;&gt; probs = []<br>&gt;&gt;&gt; for tau in np.arange(10,900,1):<br>&gt;&gt;&gt;\t (p,t) = ll1.construct_matrices(tau, intervention_cost)<br>&gt;&gt;&gt;\t probs.append(steady_state(p, t)[2])<br>&gt;&gt;&gt; opt_tau_1 = np.arange(10,900,1)[np.argmax(probs)]<br>```<br><br>Then, we can also calculate the optimal threshold &lt;a href=\"https://github.com/ryu577/survival/blob/443e23d761656fad0069a3e0572d08f0706e8618/distributions/basemodel.py#L101\"&gt;based on the parametric distribution&lt;/a&gt;.<br><br><br>```python<br>opt_tau_2 = ll1.optimal_wait_threshold(intervention_cost)<br>```<br><br>And we can see that the two are very close to each other.<br><br>## 5. Why this library<br><br>Note: most of the distributions covered in this library are also available in scipy.stats. So, why write a new library? <br><br>There are many reasons, but here are some of them:<br>* The scipy classes don't have the ability to deal with censored data when fitting the distribution.<br>* The scipy classes don't have the ability to regress the distributions on features.<br>* The scipy classes are missing some methods crucial to the optimal waiting threshold problem, like hazard rate.<br><br><br><br><br><br>\n          </div>"}, "last_serial": 5006284, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "0d802deae210abd381ac8f325d6ce49a", "sha256": "7d5a028b182471591bb07fe1c8ce316e8e622994cbbc8b3d59f7be7e5df234e9"}, "downloads": -1, "filename": "survival-0.0.2-py2-none-any.whl", "has_sig": false, "md5_digest": "0d802deae210abd381ac8f325d6ce49a", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10489, "upload_time": "2018-05-18T07:36:25", "upload_time_iso_8601": "2018-05-18T07:36:25.071423Z", "url": "https://files.pythonhosted.org/packages/bf/0b/79612725c5781e8905053ab0c3d3a73bd573b808100875d757c267f15984/survival-0.0.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e63bbd003153f2edc3fb55257c0e0ad", "sha256": "aee75400ed7ce4550157bdb8009a7f0c688892b249ecf6eeff225f15af5fe4e1"}, "downloads": -1, "filename": "survival-0.0.2.tar.gz", "has_sig": false, "md5_digest": "1e63bbd003153f2edc3fb55257c0e0ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6899, "upload_time": "2018-05-18T07:36:26", "upload_time_iso_8601": "2018-05-18T07:36:26.476891Z", "url": "https://files.pythonhosted.org/packages/12/1b/38282a140e1eba4b3787e2524a3ed3108bc0365e91d83cac5921fe6e5fe8/survival-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6cea2af5822bdae392c699e00c7837c9", "sha256": "323f82ed49115fd2b9c025ae9eafb5e760eba65591aff250001c2dee4cf43bdc"}, "downloads": -1, "filename": "survival-0.0.3-py2-none-any.whl", "has_sig": false, "md5_digest": "6cea2af5822bdae392c699e00c7837c9", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 10504, "upload_time": "2018-05-19T06:32:23", "upload_time_iso_8601": "2018-05-19T06:32:23.630047Z", "url": "https://files.pythonhosted.org/packages/69/88/f47282b636039c4de12bbbbf5fb219756868d84502370daa8537f51bd356/survival-0.0.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "36b44328187d787f202096c5eaf1f470", "sha256": "f2f56b19b0963570bf1a34929f224d92b880f7a600d770ef4d3d931c9aa1805f"}, "downloads": -1, "filename": "survival-0.0.3.tar.gz", "has_sig": false, "md5_digest": "36b44328187d787f202096c5eaf1f470", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6893, "upload_time": "2018-05-19T06:32:25", "upload_time_iso_8601": "2018-05-19T06:32:25.641868Z", "url": "https://files.pythonhosted.org/packages/d8/85/331a652762ab5218403aa816e3d11b45f931acf10b94d4bb338b1ecfcc07/survival-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "c5701079ac67d906b6076ab56970185b", "sha256": "ae91c94669994b332a9b9918c64f6d0f6b420c7300f64f4e6dbcf3ec523e479b"}, "downloads": -1, "filename": "survival-0.0.4-py2.7.egg", "has_sig": false, "md5_digest": "c5701079ac67d906b6076ab56970185b", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 84697, "upload_time": "2019-03-30T07:29:08", "upload_time_iso_8601": "2019-03-30T07:29:08.477891Z", "url": "https://files.pythonhosted.org/packages/4b/7d/68714f18c246f64d1b0cfea808802f55448d7bef9a88401f53e879f55ddc/survival-0.0.4-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a9c8840f860fb7ba620b85d4fa7f2638", "sha256": "b0c36fd3aa4434e666d2b79a4a73fff460a8d47e453a7018e9ea55b2c77b3e37"}, "downloads": -1, "filename": "survival-0.0.4-py2-none-any.whl", "has_sig": false, "md5_digest": "a9c8840f860fb7ba620b85d4fa7f2638", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 30542, "upload_time": "2018-06-01T18:33:12", "upload_time_iso_8601": "2018-06-01T18:33:12.814777Z", "url": "https://files.pythonhosted.org/packages/01/c8/910aafac546ba4950051bc0ae4b9883b9e4022a39d8b15e6d20e89fad238/survival-0.0.4-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "300b02eb984cd0ad60596b3175e72bcd", "sha256": "5a6b01af8742fadc982ccae340bf842dacf281466b4ed79b023a51f444d0a8ae"}, "downloads": -1, "filename": "survival-0.0.4-py3.6.egg", "has_sig": false, "md5_digest": "300b02eb984cd0ad60596b3175e72bcd", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 94246, "upload_time": "2019-03-30T07:29:10", "upload_time_iso_8601": "2019-03-30T07:29:10.633721Z", "url": "https://files.pythonhosted.org/packages/20/6b/0bf7b621532dc49611ca64c0b62c7e4b49962bd7a92981eafdf32d20bcf3/survival-0.0.4-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "27709359addf42e9db498b0bb6a5e59b", "sha256": "cb25396a8315d682f64ad9752f5f6b70ce47be33d19435c75aee04a3471365a5"}, "downloads": -1, "filename": "survival-0.0.4.tar.gz", "has_sig": false, "md5_digest": "27709359addf42e9db498b0bb6a5e59b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12076, "upload_time": "2018-06-01T18:33:14", "upload_time_iso_8601": "2018-06-01T18:33:14.058620Z", "url": "https://files.pythonhosted.org/packages/70/8d/b1a051f8015e2aa572669ee0f404a9a5fad1e388523e544fa1aeb9740c69/survival-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "f3d0332457b1baee4e8185f7af43b128", "sha256": "9fdb62b8e0802e327fa5ff5e1761991de15b1823b8f3f4794ce8d647b1423b05"}, "downloads": -1, "filename": "survival-0.0.5-py2.7.egg", "has_sig": false, "md5_digest": "f3d0332457b1baee4e8185f7af43b128", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 115498, "upload_time": "2019-03-30T07:29:13", "upload_time_iso_8601": "2019-03-30T07:29:13.292297Z", "url": "https://files.pythonhosted.org/packages/2a/4d/b2f6503a8119ba73421f681d501851e44f02a8cf792e1dcfe305806cf428/survival-0.0.5-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ecabb5334d6bce5ab02eed5a4577affd", "sha256": "fcec959b33ee6f20d7c973e18c4a4509286e298628c3bc51cab89c696e6301a8"}, "downloads": -1, "filename": "survival-0.0.5-py3.6.egg", "has_sig": false, "md5_digest": "ecabb5334d6bce5ab02eed5a4577affd", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 122716, "upload_time": "2019-03-30T07:29:15", "upload_time_iso_8601": "2019-03-30T07:29:15.214542Z", "url": "https://files.pythonhosted.org/packages/08/d6/638b454f7475f977ef7a097c2900f0bd84eb223a2b6b7bd97890dc6eb920/survival-0.0.5-py3.6.egg", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "c8556c5acd64316fac1e792fc2d7e385", "sha256": "5c34bc8b0f2c45aacc51e4aefb9e477964d03739da0afd0a17238fab092b06da"}, "downloads": -1, "filename": "survival-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c8556c5acd64316fac1e792fc2d7e385", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52497, "upload_time": "2019-03-30T07:29:00", "upload_time_iso_8601": "2019-03-30T07:29:00.952895Z", "url": "https://files.pythonhosted.org/packages/bc/a9/2ed831893345368d62126406c30e5c3f61ee189bcccb89ad8a7822b7b681/survival-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cebc4d311fc322e1c2900107b5c00387", "sha256": "0c9af26851e65f41b3f640ece502249facd2572b1989bcb7a3f6ce0d53343425"}, "downloads": -1, "filename": "survival-0.0.6.tar.gz", "has_sig": false, "md5_digest": "cebc4d311fc322e1c2900107b5c00387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28968, "upload_time": "2019-03-30T07:29:16", "upload_time_iso_8601": "2019-03-30T07:29:16.776742Z", "url": "https://files.pythonhosted.org/packages/a4/54/23b2ae4d1c892916cc869800b318cef9e26ae2a57e2c0ae78a7fe117b17a/survival-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c8556c5acd64316fac1e792fc2d7e385", "sha256": "5c34bc8b0f2c45aacc51e4aefb9e477964d03739da0afd0a17238fab092b06da"}, "downloads": -1, "filename": "survival-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "c8556c5acd64316fac1e792fc2d7e385", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 52497, "upload_time": "2019-03-30T07:29:00", "upload_time_iso_8601": "2019-03-30T07:29:00.952895Z", "url": "https://files.pythonhosted.org/packages/bc/a9/2ed831893345368d62126406c30e5c3f61ee189bcccb89ad8a7822b7b681/survival-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cebc4d311fc322e1c2900107b5c00387", "sha256": "0c9af26851e65f41b3f640ece502249facd2572b1989bcb7a3f6ce0d53343425"}, "downloads": -1, "filename": "survival-0.0.6.tar.gz", "has_sig": false, "md5_digest": "cebc4d311fc322e1c2900107b5c00387", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28968, "upload_time": "2019-03-30T07:29:16", "upload_time_iso_8601": "2019-03-30T07:29:16.776742Z", "url": "https://files.pythonhosted.org/packages/a4/54/23b2ae4d1c892916cc869800b318cef9e26ae2a57e2c0ae78a7fe117b17a/survival-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:58 2020"}