{"info": {"author": "sonus21", "author_email": "sonunitw12@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Web Environment", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============================\nFlask Error Monitor\n==============================\n\nFull featured error monitor app for Flask\n\n.. image:: https://travis-ci.org/sonus21/flask-error-monitor.svg?branch=master\n    :target: https://travis-ci.org/sonus21/flask-error-monitor\n\n.. image:: https://coveralls.io/repos/github/sonus21/flask-error-monitor/badge.svg\n    :target: https://coveralls.io/github/sonus21/flask-error-monitor\n\nIntroduction\n------------\n\nFlask-Error-Monitor is a batteries-included, simple-to-use `Flask <http://flask.pocoo.org/>`_ extension that lets you\nadd error recording interfaces to Flask applications. It's implemented in such a way that the developer has total control of the resulting application.\n\nOut-of-the-box, Flask-Error-Monitor plays nicely with various ORM's, including\n\n- `SQLAlchemy <http://www.sqlalchemy.org/>`_,\n\n- `MongoEngine <http://mongoengine.org/>`_,\n\n\nIt also boasts a simple Model management interface.\n\nThe biggest feature of Flask-Error-Monitor is flexibility. To start off with you can create a very simple application in no time,\nwith exception monitor enabled, but then you can go further and customize different aspects.\n\nFlask-Error-Monitor is an active project, well-tested and production ready.\n\nInstallation\n------------\nTo install Flask-Error-Monitor, simply::\n\n    pip install flask-error-monitor.git\n\n\nFeatures\n--------\n- Sensitive data( like *password*, *secret* ) Masking\n- Record all the frames ( frame data are stored in JSON format so that it can be analyzed later)\n- Unique URL generation\n- Number of times the exception occurred and first/last time of exception\n- Sending emails with exception details\n- Record different types of exception like 500 or 404 etc\n- Raise or update ticket in Jira/Bugzilla etc by ticketing interface.\n\nUsage\n-----\n\n* App configuration\n\n.. code::\n\n    ...\n    APP_ERROR_SEND_EMAIL = True\n    APP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\n    APP_ERROR_SUBJECT_PREFIX = \"Server Error\"\n    APP_ERROR_EMAIL_SENDER = 'user@example.com'\n\n\n\napp.py\n\n.. code::\n\n    from flask import Flask\n    from flask_mail import Mail\n    import settings\n    from flask_error_monitor import AppErrorMonitor\n    from flask_sqlalchemy import SQLAlchemy\n    ...\n    app = Flask(__name__)\n    app.config.from_object(settings)\n    db = SQLAlchemy(app)\n    class MyMailer(Mail, NotificationMixin):\n        def notify(self, message, exception):\n            self.send(message)\n    mail = MyMailer(app=app)\n    error_monitor = AppErrorMonitor(app=app, db=db, notifier=mail)\n\n    ....\n\n    ....\n    # Record exception when 404 error code is raised\n    @app.errorhandler(403)\n    def error_403(e):\n        error_monitor.record_exception()\n        # any custom logic\n\n    # Record error using decorator\n    @app.errorhandler(500)\n    @error_monitor.track_exception\n    def error_500(e):\n        # some custom logic\n    ....\n\n\n\nDocumentations\n--------------\nThis has got extensive document browse at https://flask-error-monitor.readthedocs.io/en/latest/\n\nAll docs are in `docs/source`\n\nAnd if you want to preview any *.rst* snippets that you may want to contribute, go to `http://rst.ninjs.org/ <http://rst.ninjs.org/>`_.\n\n\nExamples\n--------\nSeveral usage examples are included in the */tests* folder. Please feel free to add your own examples, or improve\non some of the existing ones, and then submit them via GitHub as a *pull-request*.\n\nYou can see some of these examples in action at https://github.com/sonus21/flask-error-monitor/tree/master/examples.\nTo run the examples on your local environment, one at a time, do something like::\n\n    cd flask-error-monitor\n    python examples/simple/app.py\n\n\nTests\n-----\nTest are run with *nose*. If you are not familiar with this package you can get some more info from `their website <https://nose.readthedocs.io/>`_.\n\nTo run the tests, from the project directory, simply::\n\n    pip install -r requirements-dev.txt\n    nosetests\n\nYou should see output similar to::\n\n    .............................................\n    ----------------------------------------------------------------------\n    Ran 29 tests in 1.144s\n\n    OK\n\n\nContribution\n-------------\nYou're most welcome to raise pull request or fixes.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sonus21/flask-error-monitor/", "keywords": "Flask,error-tracker,exception-monitoring", "license": "BSD-3-Clause", "maintainer": "", "maintainer_email": "", "name": "flask-error-monitor", "package_url": "https://pypi.org/project/flask-error-monitor/", "platform": "any", "project_url": "https://pypi.org/project/flask-error-monitor/", "project_urls": {"Homepage": "https://github.com/sonus21/flask-error-monitor/"}, "release_url": "https://pypi.org/project/flask-error-monitor/0.1.1/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "Simple and Extensible Error Monitor framework for Flask", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Full featured error monitor app for Flask</p>\n<a href=\"https://travis-ci.org/sonus21/flask-error-monitor\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/sonus21/flask-error-monitor.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bc84ef3ac89d33dd448970f2b5848d2143550720/68747470733a2f2f7472617669732d63692e6f72672f736f6e757332312f666c61736b2d6572726f722d6d6f6e69746f722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://coveralls.io/github/sonus21/flask-error-monitor\" rel=\"nofollow\"><img alt=\"https://coveralls.io/repos/github/sonus21/flask-error-monitor/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50445293d31d8586f59a86e1ade1789bec60a047/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f736f6e757332312f666c61736b2d6572726f722d6d6f6e69746f722f62616467652e737667\"></a>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Flask-Error-Monitor is a batteries-included, simple-to-use <a href=\"http://flask.pocoo.org/\" rel=\"nofollow\">Flask</a> extension that lets you\nadd error recording interfaces to Flask applications. It\u2019s implemented in such a way that the developer has total control of the resulting application.</p>\n<p>Out-of-the-box, Flask-Error-Monitor plays nicely with various ORM\u2019s, including</p>\n<ul>\n<li><a href=\"http://www.sqlalchemy.org/\" rel=\"nofollow\">SQLAlchemy</a>,</li>\n<li><a href=\"http://mongoengine.org/\" rel=\"nofollow\">MongoEngine</a>,</li>\n</ul>\n<p>It also boasts a simple Model management interface.</p>\n<p>The biggest feature of Flask-Error-Monitor is flexibility. To start off with you can create a very simple application in no time,\nwith exception monitor enabled, but then you can go further and customize different aspects.</p>\n<p>Flask-Error-Monitor is an active project, well-tested and production ready.</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install Flask-Error-Monitor, simply:</p>\n<pre>pip install flask-error-monitor.git\n</pre>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Sensitive data( like <em>password</em>, <em>secret</em> ) Masking</li>\n<li>Record all the frames ( frame data are stored in JSON format so that it can be analyzed later)</li>\n<li>Unique URL generation</li>\n<li>Number of times the exception occurred and first/last time of exception</li>\n<li>Sending emails with exception details</li>\n<li>Record different types of exception like 500 or 404 etc</li>\n<li>Raise or update ticket in Jira/Bugzilla etc by ticketing interface.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ul>\n<li>App configuration</li>\n</ul>\n<pre>...\nAPP_ERROR_SEND_EMAIL = True\nAPP_ERROR_RECIPIENT_EMAIL = ('example@example.com',)\nAPP_ERROR_SUBJECT_PREFIX = \"Server Error\"\nAPP_ERROR_EMAIL_SENDER = 'user@example.com'\n</pre>\n<p>app.py</p>\n<pre>from flask import Flask\nfrom flask_mail import Mail\nimport settings\nfrom flask_error_monitor import AppErrorMonitor\nfrom flask_sqlalchemy import SQLAlchemy\n...\napp = Flask(__name__)\napp.config.from_object(settings)\ndb = SQLAlchemy(app)\nclass MyMailer(Mail, NotificationMixin):\n    def notify(self, message, exception):\n        self.send(message)\nmail = MyMailer(app=app)\nerror_monitor = AppErrorMonitor(app=app, db=db, notifier=mail)\n\n....\n\n....\n# Record exception when 404 error code is raised\n@app.errorhandler(403)\ndef error_403(e):\n    error_monitor.record_exception()\n    # any custom logic\n\n# Record error using decorator\n@app.errorhandler(500)\n@error_monitor.track_exception\ndef error_500(e):\n    # some custom logic\n....\n</pre>\n</div>\n<div id=\"documentations\">\n<h2>Documentations</h2>\n<p>This has got extensive document browse at <a href=\"https://flask-error-monitor.readthedocs.io/en/latest/\" rel=\"nofollow\">https://flask-error-monitor.readthedocs.io/en/latest/</a></p>\n<p>All docs are in <cite>docs/source</cite></p>\n<p>And if you want to preview any <em>.rst</em> snippets that you may want to contribute, go to <a href=\"http://rst.ninjs.org/\" rel=\"nofollow\">http://rst.ninjs.org/</a>.</p>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>Several usage examples are included in the <em>/tests</em> folder. Please feel free to add your own examples, or improve\non some of the existing ones, and then submit them via GitHub as a <em>pull-request</em>.</p>\n<p>You can see some of these examples in action at <a href=\"https://github.com/sonus21/flask-error-monitor/tree/master/examples\" rel=\"nofollow\">https://github.com/sonus21/flask-error-monitor/tree/master/examples</a>.\nTo run the examples on your local environment, one at a time, do something like:</p>\n<pre>cd flask-error-monitor\npython examples/simple/app.py\n</pre>\n</div>\n<div id=\"tests\">\n<h2>Tests</h2>\n<p>Test are run with <em>nose</em>. If you are not familiar with this package you can get some more info from <a href=\"https://nose.readthedocs.io/\" rel=\"nofollow\">their website</a>.</p>\n<p>To run the tests, from the project directory, simply:</p>\n<pre>pip install -r requirements-dev.txt\nnosetests\n</pre>\n<p>You should see output similar to:</p>\n<pre>.............................................\n----------------------------------------------------------------------\nRan 29 tests in 1.144s\n\nOK\n</pre>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>You\u2019re most welcome to raise pull request or fixes.</p>\n</div>\n\n          </div>"}, "last_serial": 6186597, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "4813cd51af3f391b153e349dddd24d7b", "sha256": "11993ee206d4349aeb261a8f763f64eb3664f8e145079487783de2345b4a27e2"}, "downloads": -1, "filename": "flask-error-monitor-0.1.tar.gz", "has_sig": false, "md5_digest": "4813cd51af3f391b153e349dddd24d7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13851, "upload_time": "2019-11-23T13:58:24", "upload_time_iso_8601": "2019-11-23T13:58:24.245771Z", "url": "https://files.pythonhosted.org/packages/32/ab/4675f4fdeacea53c903de00718f0ac1d757234cc93e891d4438960d2338b/flask-error-monitor-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "66eca2b7c899fc57713d654410f4fb92", "sha256": "36c54f17b6ae70f8c1b84034092c544cc01eee61c99809e31bee6eda03b34f10"}, "downloads": -1, "filename": "flask-error-monitor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66eca2b7c899fc57713d654410f4fb92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14708, "upload_time": "2019-11-23T14:08:06", "upload_time_iso_8601": "2019-11-23T14:08:06.390207Z", "url": "https://files.pythonhosted.org/packages/ad/d8/b134a30ae60c0245437f8bb9944ca53dece5a0435f5ca9052eb7dcf42159/flask-error-monitor-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "66eca2b7c899fc57713d654410f4fb92", "sha256": "36c54f17b6ae70f8c1b84034092c544cc01eee61c99809e31bee6eda03b34f10"}, "downloads": -1, "filename": "flask-error-monitor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66eca2b7c899fc57713d654410f4fb92", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 14708, "upload_time": "2019-11-23T14:08:06", "upload_time_iso_8601": "2019-11-23T14:08:06.390207Z", "url": "https://files.pythonhosted.org/packages/ad/d8/b134a30ae60c0245437f8bb9944ca53dece5a0435f5ca9052eb7dcf42159/flask-error-monitor-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 01:02:54 2020"}