{"info": {"author": "David Lenkner", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "<img align=\"right\" src=\"skrate/static/favicon.ico\">\n\n# Skrate\n\nUse data mining to measure your skateboarding progression, and play\n[SKATE](https://en.wikipedia.org/wiki/Game_of_Skate) against your past self.\n\nDavid Lenkner\nc. 2019\n\n## Server Instructions\n\n### Installation\n\nInstall [docker](https://docs.docker.com/install/linux/docker-ce/ubuntu/), used for running the\nSkrate database service. Install [Python 3.6 or later](https://www.python.org/downloads/).\n\nInstall the Skrate Python package and executable via\n\n\tpython3 -m pip install skrate\n\n### Running Server\n\nStart the local Skrate database service via\n\n\trun_skrate database-run\n\nIf you are running the server for the first time, also create necessary tables by running\n\n\trun_skrate database-setup\n\nThis not only creates the model tables but also populates the `trick` table with some common\nskateboarding tricks. New ones may be added, see \"Adding New Tricks\" below.\n\nFinally to start the Skrate web service,\n\n\trun_skrate serve [-h 0.0.0.0] [-p <port-number>]\n\nThe `-h` option will start the server on your local network as opposed to your machine only.\nDefault flask port is 5000.\n\nVerbose output may be seen by adding the `--debug` argument after `skrate.py` for any command. Log \nmessages go to stdout and `/tmp/skrate_service.log`. For further help see\n\n\trun_skrate --help\n\n## Skating\n\nPick any username, and browse to `http://<your-server>:5000/<anyusername>` to log in (security is not a\nthing in Skrate yet).\n\nYou don't have to start a game of SKATE - any time you miss or land trick, click \"Miss\" or \"Land\" by\nthe appropriate trick in the list to record the attempt and update your stats.\n\nIf you want to play SKATE against your past self, click the \"New Game\" button. After that, updates\nand instructions on what to do will appear in the game feed above the \"New Game\" button.\n\n### Opponent Logic - SKATE Against Yourself\n\n[SKATE](https://en.wikipedia.org/wiki/Game_of_Skate) is a common game in skateboarding, with rules\nanalogous to HORSE in basketball. For context see [BATB](https://theberrics.com/battle-at-the-berrics),\na widely-followed tournament with many top pro skateboarders playing SKATE against eachother.\n\nIn this app, your opponent in a game of SKATE is your past self, to measure whether you've progressed\n(whether you land more tricks more reliably than you used to). Your opponents' likelihood of landing\nany trick is determined by your own history of tries on that trick. The app algorithm takes a fixed\nwindow of most recent tries of the trick, so as you progress your opponent also \"gets better\". The history\nwindow length is defined in `_RECENT_ATTEMPTS_WINDOW_OLDEST` in [game\\_logic.py](skrate/game_logic.py) -\nroughly, increasing that means including \"older versions\" of oneself in a progression measure (have I\ngotten better since last year, vs. better since last week).\n\nIf your AI opponent is challenging (choosing a trick to try), they will pick the trick with the best\nprobability of landing, with a randomization factor to sometimes take less reliable tricks and \"mix up\"\nthe game a bit, to get a different game every time. That randomization factor is controlled by\n`_TRICK_RANDOM_SKIP` in [game\\_logic.py](skrate/game_logic.py).\n\n## Development\n\nPull the repo, install requirements in `requirements.txt`, and have at it!\n\nUnit tests can be run via\n\n\tpytest tests/test_skrate.py\n\n### Adding New Tricks\n\nTrick definitions are in `tricks.py`. Each base trick is also labeled with whether it should be\nduplicated in nollie/switch/fakie form. Most things should be but not everything. For instance,\nwe should have \"Kickflip\" as well as \"Nollie Kickflip\", \"Switch Kickflip\", and \"Fakie Kickflip\"\nbut we don't want to have both \"Ollie\" and \"Nollie Ollie\".\n\nAfter adding to `tricks.py`, you can simply rerun\n\n\trun_skrate database-setup\n\nin order to load the changes. It will respect existing data and only add the new tricks.\n\n### Getting at \"Raw Data\"\n\nIf you are inclined to further analyze Skrate data on tricks, attempts, and games, or\ninspect the schema auto-generated by SQLAlchemy, you may be interested in the raw SQL interface\nto Skrate data. One way to access that is via \n[psql](http://www.postgresqltutorial.com/install-postgresql/) inside the docker container,\n\n\tdocker exec -it skrate-persistence psql postgresql://postgres:postgres_password@localhost:5432/postgres\n\n### Migrating Data\n\nThe PostgreSQL docker container is run using a mounted docker volume called skrate-vol for postgres\ndata. Thus, the database is persisted between docker runs in a host directory, and can be easily\ncopied or migrated (e.g. switching to new host machine w/o losing data).\n\nYou can view the actual disk location of this data by running\n\n\tdocker inspect skrate-vol\n\nand noting the `Mountpoint` entry. You can then explore this directory (root permissions needed\nsince docker owns this location). The volume name `skrate-vol` is default, any volume name may\nbe used by setting non-default `--volume` argument to `run_skrate database-run`.\n\n## Acknowledgements\n\nSkrate relies on [Flask](https://www.palletsprojects.com/p/flask/) for web service,\n[Flask-SQLAlchemy](https://flask-sqlalchemy.palletsprojects.com/en/2.x/) for model management,\n[Flask-Testing](https://pythonhosted.org/Flask-Testing/) with\n[pytest](https://docs.pytest.org/en/latest/) for unit testing.\n\nAlso appreciated is the convenient [Postgres Docker image](https://hub.docker.com/_/postgres)\nused for the Skrate data persistence layer.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lenknerd/skrate", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "skrate", "package_url": "https://pypi.org/project/skrate/", "platform": "", "project_url": "https://pypi.org/project/skrate/", "project_urls": {"Homepage": "https://github.com/lenknerd/skrate"}, "release_url": "https://pypi.org/project/skrate/0.2/", "requires_dist": ["click (>=7.0)", "Flask (>=1.1.1)", "Flask-Ext (>=0.1)", "Flask-Session (>=0.3.1)", "Flask-SQLAlchemy (>=2.4.1)", "Flask-Testing (>=0.7.1)", "psycopg2-binary (>=2.8.4)", "pytest (>=5.3.2)", "SQLAlchemy (>=1.3.12)"], "requires_python": "", "summary": "App for skateboarding progression analysis", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img align=\"right\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bf04cd0e7e553e55d4ce547b91c56321b1223a69/736b726174652f7374617469632f66617669636f6e2e69636f\">\n<h1>Skrate</h1>\n<p>Use data mining to measure your skateboarding progression, and play\n<a href=\"https://en.wikipedia.org/wiki/Game_of_Skate\" rel=\"nofollow\">SKATE</a> against your past self.</p>\n<p>David Lenkner\nc. 2019</p>\n<h2>Server Instructions</h2>\n<h3>Installation</h3>\n<p>Install <a href=\"https://docs.docker.com/install/linux/docker-ce/ubuntu/\" rel=\"nofollow\">docker</a>, used for running the\nSkrate database service. Install <a href=\"https://www.python.org/downloads/\" rel=\"nofollow\">Python 3.6 or later</a>.</p>\n<p>Install the Skrate Python package and executable via</p>\n<pre><code>python3 -m pip install skrate\n</code></pre>\n<h3>Running Server</h3>\n<p>Start the local Skrate database service via</p>\n<pre><code>run_skrate database-run\n</code></pre>\n<p>If you are running the server for the first time, also create necessary tables by running</p>\n<pre><code>run_skrate database-setup\n</code></pre>\n<p>This not only creates the model tables but also populates the <code>trick</code> table with some common\nskateboarding tricks. New ones may be added, see \"Adding New Tricks\" below.</p>\n<p>Finally to start the Skrate web service,</p>\n<pre><code>run_skrate serve [-h 0.0.0.0] [-p &lt;port-number&gt;]\n</code></pre>\n<p>The <code>-h</code> option will start the server on your local network as opposed to your machine only.\nDefault flask port is 5000.</p>\n<p>Verbose output may be seen by adding the <code>--debug</code> argument after <code>skrate.py</code> for any command. Log\nmessages go to stdout and <code>/tmp/skrate_service.log</code>. For further help see</p>\n<pre><code>run_skrate --help\n</code></pre>\n<h2>Skating</h2>\n<p>Pick any username, and browse to <code>http://&lt;your-server&gt;:5000/&lt;anyusername&gt;</code> to log in (security is not a\nthing in Skrate yet).</p>\n<p>You don't have to start a game of SKATE - any time you miss or land trick, click \"Miss\" or \"Land\" by\nthe appropriate trick in the list to record the attempt and update your stats.</p>\n<p>If you want to play SKATE against your past self, click the \"New Game\" button. After that, updates\nand instructions on what to do will appear in the game feed above the \"New Game\" button.</p>\n<h3>Opponent Logic - SKATE Against Yourself</h3>\n<p><a href=\"https://en.wikipedia.org/wiki/Game_of_Skate\" rel=\"nofollow\">SKATE</a> is a common game in skateboarding, with rules\nanalogous to HORSE in basketball. For context see <a href=\"https://theberrics.com/battle-at-the-berrics\" rel=\"nofollow\">BATB</a>,\na widely-followed tournament with many top pro skateboarders playing SKATE against eachother.</p>\n<p>In this app, your opponent in a game of SKATE is your past self, to measure whether you've progressed\n(whether you land more tricks more reliably than you used to). Your opponents' likelihood of landing\nany trick is determined by your own history of tries on that trick. The app algorithm takes a fixed\nwindow of most recent tries of the trick, so as you progress your opponent also \"gets better\". The history\nwindow length is defined in <code>_RECENT_ATTEMPTS_WINDOW_OLDEST</code> in <a href=\"skrate/game_logic.py\" rel=\"nofollow\">game_logic.py</a> -\nroughly, increasing that means including \"older versions\" of oneself in a progression measure (have I\ngotten better since last year, vs. better since last week).</p>\n<p>If your AI opponent is challenging (choosing a trick to try), they will pick the trick with the best\nprobability of landing, with a randomization factor to sometimes take less reliable tricks and \"mix up\"\nthe game a bit, to get a different game every time. That randomization factor is controlled by\n<code>_TRICK_RANDOM_SKIP</code> in <a href=\"skrate/game_logic.py\" rel=\"nofollow\">game_logic.py</a>.</p>\n<h2>Development</h2>\n<p>Pull the repo, install requirements in <code>requirements.txt</code>, and have at it!</p>\n<p>Unit tests can be run via</p>\n<pre><code>pytest tests/test_skrate.py\n</code></pre>\n<h3>Adding New Tricks</h3>\n<p>Trick definitions are in <code>tricks.py</code>. Each base trick is also labeled with whether it should be\nduplicated in nollie/switch/fakie form. Most things should be but not everything. For instance,\nwe should have \"Kickflip\" as well as \"Nollie Kickflip\", \"Switch Kickflip\", and \"Fakie Kickflip\"\nbut we don't want to have both \"Ollie\" and \"Nollie Ollie\".</p>\n<p>After adding to <code>tricks.py</code>, you can simply rerun</p>\n<pre><code>run_skrate database-setup\n</code></pre>\n<p>in order to load the changes. It will respect existing data and only add the new tricks.</p>\n<h3>Getting at \"Raw Data\"</h3>\n<p>If you are inclined to further analyze Skrate data on tricks, attempts, and games, or\ninspect the schema auto-generated by SQLAlchemy, you may be interested in the raw SQL interface\nto Skrate data. One way to access that is via\n<a href=\"http://www.postgresqltutorial.com/install-postgresql/\" rel=\"nofollow\">psql</a> inside the docker container,</p>\n<pre><code>docker exec -it skrate-persistence psql postgresql://postgres:postgres_password@localhost:5432/postgres\n</code></pre>\n<h3>Migrating Data</h3>\n<p>The PostgreSQL docker container is run using a mounted docker volume called skrate-vol for postgres\ndata. Thus, the database is persisted between docker runs in a host directory, and can be easily\ncopied or migrated (e.g. switching to new host machine w/o losing data).</p>\n<p>You can view the actual disk location of this data by running</p>\n<pre><code>docker inspect skrate-vol\n</code></pre>\n<p>and noting the <code>Mountpoint</code> entry. You can then explore this directory (root permissions needed\nsince docker owns this location). The volume name <code>skrate-vol</code> is default, any volume name may\nbe used by setting non-default <code>--volume</code> argument to <code>run_skrate database-run</code>.</p>\n<h2>Acknowledgements</h2>\n<p>Skrate relies on <a href=\"https://www.palletsprojects.com/p/flask/\" rel=\"nofollow\">Flask</a> for web service,\n<a href=\"https://flask-sqlalchemy.palletsprojects.com/en/2.x/\" rel=\"nofollow\">Flask-SQLAlchemy</a> for model management,\n<a href=\"https://pythonhosted.org/Flask-Testing/\" rel=\"nofollow\">Flask-Testing</a> with\n<a href=\"https://docs.pytest.org/en/latest/\" rel=\"nofollow\">pytest</a> for unit testing.</p>\n<p>Also appreciated is the convenient <a href=\"https://hub.docker.com/_/postgres\" rel=\"nofollow\">Postgres Docker image</a>\nused for the Skrate data persistence layer.</p>\n\n          </div>"}, "last_serial": 6383224, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "aa33f0e022498013572053c8a00327d3", "sha256": "7f50b26dc6c4f45a935a447224ba44d4f8237718a1372179d94754aadf5eaa70"}, "downloads": -1, "filename": "skrate-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "aa33f0e022498013572053c8a00327d3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15771, "upload_time": "2020-01-01T20:01:49", "upload_time_iso_8601": "2020-01-01T20:01:49.743373Z", "url": "https://files.pythonhosted.org/packages/bf/d8/b8558d2423f2952d6c09d0d6e8892c5f0f55701f170aa18d159de1af3d1b/skrate-0.1-py3-none-any.whl", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "8ec6d86ed7bc7e4659e5139705b14d95", "sha256": "924fa6e42d0f0a2944c00d7c9ef41c90d61c3bbb8f5f5d74bd2755ddb4256411"}, "downloads": -1, "filename": "skrate-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ec6d86ed7bc7e4659e5139705b14d95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21060, "upload_time": "2020-01-01T20:36:59", "upload_time_iso_8601": "2020-01-01T20:36:59.641577Z", "url": "https://files.pythonhosted.org/packages/33/85/0af8260ff7f23c50607d01379245de1bdaf4cd04f7b8fe37a71c602441e6/skrate-0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8ec6d86ed7bc7e4659e5139705b14d95", "sha256": "924fa6e42d0f0a2944c00d7c9ef41c90d61c3bbb8f5f5d74bd2755ddb4256411"}, "downloads": -1, "filename": "skrate-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8ec6d86ed7bc7e4659e5139705b14d95", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21060, "upload_time": "2020-01-01T20:36:59", "upload_time_iso_8601": "2020-01-01T20:36:59.641577Z", "url": "https://files.pythonhosted.org/packages/33/85/0af8260ff7f23c50607d01379245de1bdaf4cd04f7b8fe37a71c602441e6/skrate-0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:08:52 2020"}