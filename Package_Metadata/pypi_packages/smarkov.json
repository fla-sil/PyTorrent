{"info": {"author": "greenify", "author_email": "greenify@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Topic :: Scientific/Engineering :: Artificial Intelligence"], "description": "smarkov\n=======\n\nSimple, lightweight and easy to read implementation of Markov chains and\nHMMs.\n\nThis is a toy project, don't expect any exciting speeds or robustness.\n\nHappy hacking!\n\nInstalling\n----------\n\n::\n\n    pip3 install git+git://github.com/greenify/smarkov.git\n\nHacking\n-------\n\n::\n\n    git clone https://github.com/greenify/smarkov\n    cd smarkov\n    python3 setup.py develop\n\nTrain with a corpus\n-------------------\n\n::\n\n    from smarkov import Markov\n    chain = Markov([\"AGACAGACGAC\"])\n\nAttributes\n~~~~~~~~~~\n\n| corpus: given corpus (a corpus\\_entry needs to be a tuple or array)\n| order: maximal order to look back for a given state (default 1)\n  tokenize: function how to split an element of the corpus (e.g\n  sentences into words)\n\nGenerate text from a chain\n--------------------------\n\n::\n\n    print(\"\".join(chain.generate_text()))\n\n``Generate_text()`` generates exactly one element from the Markov chain.\nIn other words: It goes in the Markov chain the universal start state to\nuniversal end state.\n\nMore Examples\n-------------\n\nSee ``examples``\n\nComing\n------\n\nDocumentation how to use it with HMM.\n\nLicense\n-------\n\nMIT", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/greenify/smarkov", "keywords": "hmm markov", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "smarkov", "package_url": "https://pypi.org/project/smarkov/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/smarkov/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/greenify/smarkov"}, "release_url": "https://pypi.org/project/smarkov/1.0/", "requires_dist": null, "requires_python": null, "summary": "Simple Markov and HMM", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Simple, lightweight and easy to read implementation of Markov chains and\nHMMs.</p>\n<p>This is a toy project, don\u2019t expect any exciting speeds or robustness.</p>\n<p>Happy hacking!</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>pip3 install git+git://github.com/greenify/smarkov.git\n</pre>\n</div>\n<div id=\"hacking\">\n<h2>Hacking</h2>\n<pre>git clone https://github.com/greenify/smarkov\ncd smarkov\npython3 setup.py develop\n</pre>\n</div>\n<div id=\"train-with-a-corpus\">\n<h2>Train with a corpus</h2>\n<pre>from smarkov import Markov\nchain = Markov([\"AGACAGACGAC\"])\n</pre>\n<div id=\"attributes\">\n<h3>Attributes</h3>\n<div>\n<div>corpus: given corpus (a corpus_entry needs to be a tuple or array)</div>\n<div>order: maximal order to look back for a given state (default 1)\ntokenize: function how to split an element of the corpus (e.g\nsentences into words)</div>\n</div>\n</div>\n</div>\n<div id=\"generate-text-from-a-chain\">\n<h2>Generate text from a chain</h2>\n<pre>print(\"\".join(chain.generate_text()))\n</pre>\n<p><tt>Generate_text()</tt> generates exactly one element from the Markov chain.\nIn other words: It goes in the Markov chain the universal start state to\nuniversal end state.</p>\n</div>\n<div id=\"more-examples\">\n<h2>More Examples</h2>\n<p>See <tt>examples</tt></p>\n</div>\n<div id=\"coming\">\n<h2>Coming</h2>\n<p>Documentation how to use it with HMM.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>MIT</p>\n</div>\n\n          </div>"}, "last_serial": 1916116, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "9a4ca5099a64fe2819fb7cb32587d444", "sha256": "05d7b1291070f45eab78e6b8cded7c6e25c443fc12eec86e01da9d93e8c12972"}, "downloads": -1, "filename": "smarkov-1.0.tar.gz", "has_sig": false, "md5_digest": "9a4ca5099a64fe2819fb7cb32587d444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4849, "upload_time": "2016-01-21T21:30:40", "upload_time_iso_8601": "2016-01-21T21:30:40.710510Z", "url": "https://files.pythonhosted.org/packages/aa/47/d91f06484eba988b0d47568cfd07478ef3b0d373264a9c891656ed8b0563/smarkov-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9a4ca5099a64fe2819fb7cb32587d444", "sha256": "05d7b1291070f45eab78e6b8cded7c6e25c443fc12eec86e01da9d93e8c12972"}, "downloads": -1, "filename": "smarkov-1.0.tar.gz", "has_sig": false, "md5_digest": "9a4ca5099a64fe2819fb7cb32587d444", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4849, "upload_time": "2016-01-21T21:30:40", "upload_time_iso_8601": "2016-01-21T21:30:40.710510Z", "url": "https://files.pythonhosted.org/packages/aa/47/d91f06484eba988b0d47568cfd07478ef3b0d373264a9c891656ed8b0563/smarkov-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:07 2020"}