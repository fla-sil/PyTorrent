{"info": {"author": "mlib_4_you", "author_email": "none.none@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "These tools are to provide effort by researchers in creating their own working environment\nThis is about dealing with {ICDAR} data\nIt provides you with initial processing tools for training and testing data.\nIt provides tools for calculating the text area using polygon of shapely.\nSave results from images and text locations as a prelude to calculating precision.\nAnd some other tools we will try to \"more examples to explain the use later.\"\n\nThese tools have been quoted and written by the {EAST}.\nWhere you can see the original files here.\nhttps://github.com/argman/EAST/\n\nThese tools depend on several libraries you must provide before use.\nLike:\n```\n-opencv-3.x.x\n-numpy\n-scipy\n-matplotlib\n-shapely\n```\n\nuse Modules!\n\n```python\nimport icdar_tools\n```\nor \n```python\nfrom icdar_tools import icdar\nfrom icdar_tools import icd_util\nfrom icdar_tools import locality_aware_nms\nfrom icdar_tools import data_util\n```\n\n - icdar.py\n\nThis module is very important as it is found to serve your time instead of betting a lot of effort and time in order to produce already existing tools, in order to handle the data.\nHere you will find everything you need, from the future ICDAR Data Processing\n\nFrom loading the data and locating the texts inside the images and some other things.\nThe following are examples of usage.\n\n1:get_batch()\n```python\nget_batch(num_workers, **kwargs)\n```\nThe function works to get the coordinates of the text in the images\nThrough text files with them in the same path\nIt then returns those geometrical coordinates,\nimage names, and images derived from the training images specified by the place of the text only.\n\nuse:\n\n```python\ndata_generator = icdar.get_batch(num_workers=num_readers,\n                                         training_data_path='path/to_data/icdar15/train/'\n                                         input_size=input_size,\n                                         batch_size=batch_size_per_gpu * len(gpus))\n```\n\nreutrn\n```python\nyield images, image_fns, score_maps, geo_maps, training_masks\n```\n\n2:load_annoataion()\n\n```python\ntext_polys, text_tags = icdar.load_annoataion(txt_file-name)\n```\n\n\n3:restore_rectangle_rbox()\n```python\ntext_box_restored = icdar.restore_rectangle_rbox(origin, geometry)\n```\n\n\n**:**\n - icd_util.py\n\n\n1 - get_images()\nThe input path should be images\n```python\nimages_list_fullName = icd_util.get_images(path/data/images/)\n```\nRepetition is a list of all images in the input path\n\n\n\n2 -resize_image()\n\n```python\nim_resized, (ratio_h, ratio_w) = icd_util.resize_image(image)\n```\n    '''\n    resize image to a size multiple of 32 which is required by the network\n    :param im: the resized image\n    :param max_side_len: limit of max image size to avoid out of memory in gpu\n    :return: the resized image and the resize ratio\n    '''\n - The default setting of the function\n   ```python\n   icd_util.resize_image(image, max_side_len=2400)\n   ```\n\n3 - detect() \\\nHere is the conclusion of the model represented in the geometrical map of coordinates and score\n\nUse the threshold to filter the results that look false\nThe borders of the text boxes are then redrawn\n\nreturn of these boxes and the time of implementation of this processe.\n\n```python\nboxes, timer = icd_util.detect(score_map=score, geo_map=geometry, timer=timer)\n```\n\n    '''\n    restore text boxes from score map and geo map\n    :param score_map:\n    :param geo_map:\n    :param timer:\n    :param score_map_thresh: threshhold for score map\n    :param box_thresh: threshhold for boxes\n    :param nms_thres: threshold for nms\n    :return: boxes and time out\n    '''\n\n    - The default setting of the function\n\n   ```python\n   icd_util.detect(score_map, geo_map, timer, score_map_thresh=0.8, box_thresh=0.1, nms_thres=0.2):\n   ```\n\n- write_result() \\\nThis function gets the image and its name \\\nThe file name is written as the text location in the image \n\nYou get the text boxes that are expected for that image \\\nwriteing text locations in text files \\\ndrawing squares around those texts in the picture \\\nSee the font size of the box and font color through passes \n```\ncolor, thickness\n```\nFinally a place will be written  those 'output_path/'\n\nImages and text files are written into a single folder.\n\n```python\n   icd_util.write_result(img ,boxes ,output_dir ,res_file ,img_fn)\n```\n\n - The default setting of the function\n ```python\n   icd_util.write_result(img ,boxes ,output_dir ,res_file ,img_fn ,color=(255, 255, 0),thickness=1, skip = True)\n ```\n\n...\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "icdar data tools,East tools", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "icdar-tools", "package_url": "https://pypi.org/project/icdar-tools/", "platform": "", "project_url": "https://pypi.org/project/icdar-tools/", "project_urls": null, "release_url": "https://pypi.org/project/icdar-tools/0.0.3/", "requires_dist": ["shapely"], "requires_python": "", "summary": "a pip install icdar_tools", "version": "0.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>These tools are to provide effort by researchers in creating their own working environment\nThis is about dealing with {ICDAR} data\nIt provides you with initial processing tools for training and testing data.\nIt provides tools for calculating the text area using polygon of shapely.\nSave results from images and text locations as a prelude to calculating precision.\nAnd some other tools we will try to \"more examples to explain the use later.\"</p>\n<p>These tools have been quoted and written by the {EAST}.\nWhere you can see the original files here.\n<a href=\"https://github.com/argman/EAST/\" rel=\"nofollow\">https://github.com/argman/EAST/</a></p>\n<p>These tools depend on several libraries you must provide before use.\nLike:</p>\n<pre><code>-opencv-3.x.x\n-numpy\n-scipy\n-matplotlib\n-shapely\n</code></pre>\n<p>use Modules!</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">icdar_tools</span>\n</pre>\n<p>or</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">icdar_tools</span> <span class=\"kn\">import</span> <span class=\"n\">icdar</span>\n<span class=\"kn\">from</span> <span class=\"nn\">icdar_tools</span> <span class=\"kn\">import</span> <span class=\"n\">icd_util</span>\n<span class=\"kn\">from</span> <span class=\"nn\">icdar_tools</span> <span class=\"kn\">import</span> <span class=\"n\">locality_aware_nms</span>\n<span class=\"kn\">from</span> <span class=\"nn\">icdar_tools</span> <span class=\"kn\">import</span> <span class=\"n\">data_util</span>\n</pre>\n<ul>\n<li>icdar.py</li>\n</ul>\n<p>This module is very important as it is found to serve your time instead of betting a lot of effort and time in order to produce already existing tools, in order to handle the data.\nHere you will find everything you need, from the future ICDAR Data Processing</p>\n<p>From loading the data and locating the texts inside the images and some other things.\nThe following are examples of usage.</p>\n<p>1:get_batch()</p>\n<pre><span class=\"n\">get_batch</span><span class=\"p\">(</span><span class=\"n\">num_workers</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n</pre>\n<p>The function works to get the coordinates of the text in the images\nThrough text files with them in the same path\nIt then returns those geometrical coordinates,\nimage names, and images derived from the training images specified by the place of the text only.</p>\n<p>use:</p>\n<pre><span class=\"n\">data_generator</span> <span class=\"o\">=</span> <span class=\"n\">icdar</span><span class=\"o\">.</span><span class=\"n\">get_batch</span><span class=\"p\">(</span><span class=\"n\">num_workers</span><span class=\"o\">=</span><span class=\"n\">num_readers</span><span class=\"p\">,</span>\n                                         <span class=\"n\">training_data_path</span><span class=\"o\">=</span><span class=\"s1\">'path/to_data/icdar15/train/'</span>\n                                         <span class=\"n\">input_size</span><span class=\"o\">=</span><span class=\"n\">input_size</span><span class=\"p\">,</span>\n                                         <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"n\">batch_size_per_gpu</span> <span class=\"o\">*</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">gpus</span><span class=\"p\">))</span>\n</pre>\n<p>reutrn</p>\n<pre><span class=\"k\">yield</span> <span class=\"n\">images</span><span class=\"p\">,</span> <span class=\"n\">image_fns</span><span class=\"p\">,</span> <span class=\"n\">score_maps</span><span class=\"p\">,</span> <span class=\"n\">geo_maps</span><span class=\"p\">,</span> <span class=\"n\">training_masks</span>\n</pre>\n<p>2:load_annoataion()</p>\n<pre><span class=\"n\">text_polys</span><span class=\"p\">,</span> <span class=\"n\">text_tags</span> <span class=\"o\">=</span> <span class=\"n\">icdar</span><span class=\"o\">.</span><span class=\"n\">load_annoataion</span><span class=\"p\">(</span><span class=\"n\">txt_file</span><span class=\"o\">-</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p>3:restore_rectangle_rbox()</p>\n<pre><span class=\"n\">text_box_restored</span> <span class=\"o\">=</span> <span class=\"n\">icdar</span><span class=\"o\">.</span><span class=\"n\">restore_rectangle_rbox</span><span class=\"p\">(</span><span class=\"n\">origin</span><span class=\"p\">,</span> <span class=\"n\">geometry</span><span class=\"p\">)</span>\n</pre>\n<p><strong>:</strong></p>\n<ul>\n<li>icd_util.py</li>\n</ul>\n<p>1 - get_images()\nThe input path should be images</p>\n<pre><span class=\"n\">images_list_fullName</span> <span class=\"o\">=</span> <span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">get_images</span><span class=\"p\">(</span><span class=\"n\">path</span><span class=\"o\">/</span><span class=\"n\">data</span><span class=\"o\">/</span><span class=\"n\">images</span><span class=\"o\">/</span><span class=\"p\">)</span>\n</pre>\n<p>Repetition is a list of all images in the input path</p>\n<p>2 -resize_image()</p>\n<pre><span class=\"n\">im_resized</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">ratio_h</span><span class=\"p\">,</span> <span class=\"n\">ratio_w</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">resize_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n</pre>\n<pre><code>'''\nresize image to a size multiple of 32 which is required by the network\n:param im: the resized image\n:param max_side_len: limit of max image size to avoid out of memory in gpu\n:return: the resized image and the resize ratio\n'''\n</code></pre>\n<ul>\n<li>The default setting of the function\n<pre><span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">resize_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">max_side_len</span><span class=\"o\">=</span><span class=\"mi\">2400</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<p>3 - detect() <br>\nHere is the conclusion of the model represented in the geometrical map of coordinates and score</p>\n<p>Use the threshold to filter the results that look false\nThe borders of the text boxes are then redrawn</p>\n<p>return of these boxes and the time of implementation of this processe.</p>\n<pre><span class=\"n\">boxes</span><span class=\"p\">,</span> <span class=\"n\">timer</span> <span class=\"o\">=</span> <span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">score_map</span><span class=\"o\">=</span><span class=\"n\">score</span><span class=\"p\">,</span> <span class=\"n\">geo_map</span><span class=\"o\">=</span><span class=\"n\">geometry</span><span class=\"p\">,</span> <span class=\"n\">timer</span><span class=\"o\">=</span><span class=\"n\">timer</span><span class=\"p\">)</span>\n</pre>\n<pre><code>'''\nrestore text boxes from score map and geo map\n:param score_map:\n:param geo_map:\n:param timer:\n:param score_map_thresh: threshhold for score map\n:param box_thresh: threshhold for boxes\n:param nms_thres: threshold for nms\n:return: boxes and time out\n'''\n\n- The default setting of the function\n</code></pre>\n<pre><span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">detect</span><span class=\"p\">(</span><span class=\"n\">score_map</span><span class=\"p\">,</span> <span class=\"n\">geo_map</span><span class=\"p\">,</span> <span class=\"n\">timer</span><span class=\"p\">,</span> <span class=\"n\">score_map_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">box_thresh</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">nms_thres</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">):</span>\n</pre>\n<ul>\n<li>write_result() <br>\nThis function gets the image and its name <br>\nThe file name is written as the text location in the image</li>\n</ul>\n<p>You get the text boxes that are expected for that image <br>\nwriteing text locations in text files <br>\ndrawing squares around those texts in the picture <br>\nSee the font size of the box and font color through passes</p>\n<pre><code>color, thickness\n</code></pre>\n<p>Finally a place will be written  those 'output_path/'</p>\n<p>Images and text files are written into a single folder.</p>\n<pre>   <span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">write_result</span><span class=\"p\">(</span><span class=\"n\">img</span> <span class=\"p\">,</span><span class=\"n\">boxes</span> <span class=\"p\">,</span><span class=\"n\">output_dir</span> <span class=\"p\">,</span><span class=\"n\">res_file</span> <span class=\"p\">,</span><span class=\"n\">img_fn</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>The default setting of the function</li>\n</ul>\n<pre>  <span class=\"n\">icd_util</span><span class=\"o\">.</span><span class=\"n\">write_result</span><span class=\"p\">(</span><span class=\"n\">img</span> <span class=\"p\">,</span><span class=\"n\">boxes</span> <span class=\"p\">,</span><span class=\"n\">output_dir</span> <span class=\"p\">,</span><span class=\"n\">res_file</span> <span class=\"p\">,</span><span class=\"n\">img_fn</span> <span class=\"p\">,</span><span class=\"n\">color</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">255</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">),</span><span class=\"n\">thickness</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">skip</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>...</p>\n\n          </div>"}, "last_serial": 4284893, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "a524cecb89a59473b917e55039cf0bfb", "sha256": "54ea41ad608eb71bb9997bc6113face115a12477cd7989ecf466f7cb3b5c885b"}, "downloads": -1, "filename": "icdar_tools-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "a524cecb89a59473b917e55039cf0bfb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14409, "upload_time": "2018-09-06T21:33:52", "upload_time_iso_8601": "2018-09-06T21:33:52.037790Z", "url": "https://files.pythonhosted.org/packages/3b/85/dd1c32599197707a3679b123dc5ed517b0bdf05287dd58bab8e959c7ceb1/icdar_tools-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5396949fc3af22262bab6b85d13e1e56", "sha256": "31297a6bdad3f234cc04e6bedbe56d55cd9268b829230299ef1242ae3af7e8cb"}, "downloads": -1, "filename": "icdar_tools-0.0.2.tar.gz", "has_sig": false, "md5_digest": "5396949fc3af22262bab6b85d13e1e56", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14310, "upload_time": "2018-09-06T21:33:53", "upload_time_iso_8601": "2018-09-06T21:33:53.318179Z", "url": "https://files.pythonhosted.org/packages/fd/17/63f906337072707f13ec2e1a25deaaae4db6e80d9180fd46754c18e7ac3f/icdar_tools-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "4cf7cda22c5e6dea261fdc0c8baf0334", "sha256": "65b56f8d9b29175445cdbb2363a02468e7d841d99c7557f4a524e3c84dabd84e"}, "downloads": -1, "filename": "icdar_tools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4cf7cda22c5e6dea261fdc0c8baf0334", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14461, "upload_time": "2018-09-18T19:13:45", "upload_time_iso_8601": "2018-09-18T19:13:45.326789Z", "url": "https://files.pythonhosted.org/packages/1d/ac/d1e3f58a8371466824fd3f957fe757b8ca858634f8aa8b37fe88c3016bcb/icdar_tools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99240c053d27951ad046ebfa62b4e502", "sha256": "407a555628fc465e4f9818e848e62f8647c033be5f8a93b49985a55fcc353c4a"}, "downloads": -1, "filename": "icdar_tools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "99240c053d27951ad046ebfa62b4e502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15018, "upload_time": "2018-09-18T19:13:46", "upload_time_iso_8601": "2018-09-18T19:13:46.630892Z", "url": "https://files.pythonhosted.org/packages/96/58/fbf24846e02cb1ade859554f7d25903601ec4974ca44354753822cbe0efd/icdar_tools-0.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4cf7cda22c5e6dea261fdc0c8baf0334", "sha256": "65b56f8d9b29175445cdbb2363a02468e7d841d99c7557f4a524e3c84dabd84e"}, "downloads": -1, "filename": "icdar_tools-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4cf7cda22c5e6dea261fdc0c8baf0334", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14461, "upload_time": "2018-09-18T19:13:45", "upload_time_iso_8601": "2018-09-18T19:13:45.326789Z", "url": "https://files.pythonhosted.org/packages/1d/ac/d1e3f58a8371466824fd3f957fe757b8ca858634f8aa8b37fe88c3016bcb/icdar_tools-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "99240c053d27951ad046ebfa62b4e502", "sha256": "407a555628fc465e4f9818e848e62f8647c033be5f8a93b49985a55fcc353c4a"}, "downloads": -1, "filename": "icdar_tools-0.0.3.tar.gz", "has_sig": false, "md5_digest": "99240c053d27951ad046ebfa62b4e502", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15018, "upload_time": "2018-09-18T19:13:46", "upload_time_iso_8601": "2018-09-18T19:13:46.630892Z", "url": "https://files.pythonhosted.org/packages/96/58/fbf24846e02cb1ade859554f7d25903601ec4974ca44354753822cbe0efd/icdar_tools-0.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:07 2020"}