{"info": {"author": "Soldai Research", "author_email": "mcampos@soldai.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# sutil\nThis repository contains a set of tools to deal with machine learning and natural language processing tasks, including classes to make quick experimentation of different classifacation models.\n\n## Dataset\nThis class is made to load csv styles dataset's where all the features are comma separeted and the class is in the last column.\nIt includes functions to normalize the features, add bias, save the data to a file and load from it. Also includes functions\nto split the train, validation and test datasets.\n\n```python\nfrom sutil.base.Dataset import Dataset\n\ndatafile = './sutil/datasets/ex2data1.txt'\nd = Dataset.fromDataFile(datafile, ',')\nprint(d.size)\n\nsample = d.sample(0.3)\nprint(sample.size)\n\nsample.save(\"modelo_01\")\n\ntrain, validation, test = d.split(train = 0.8, validation = 0.2)\nprint(train.size)\nprint(validation.size)\nprint(test.size)\n```\n\n## Regularized Logistic Regression\nYou can also include your own models as a Regularized Logistic Regression, implemented manually using numpy and included in the sutil.models package\n```python\nimport numpy as np\nfrom sutil.base.Dataset import Dataset\nfrom sutil.models.RegularizedLogisticRegression import RegularizedLogisticRegression\n\ndatafile = './sutil/datasets/ex2data1.txt'\nd = Dataset.fromDataFile(datafile, ',')\nd.xlabel = 'Exam 1 score'\nd.ylabel = 'Exam 2 score'\nd.legend = ['Admitted', 'Not admitted']\niterations = 400\nprint('Plotting data with + indicating (y = 1) examples and o indicating (y = 0) examples.\\n')\nd.plotData()\n\ntheta = np.zeros((d.n + 1, 1))\nlr = RegularizedLogisticRegression(theta, 0.03, 0, train=1)\nlr.trainModel(d)\nlr.score(d.X, d.y)\nlr.roc.plot()\nlr.roc.zoom((0, 0.4),(0.5, 1.0))\n```\n\n## Sklearn model \nYou can also embed the sklearn models in a wrapper class in order to run experiments with diferent models implemented in sklearn. In the same style you can create tensorflow, keras or pytorch models inhyereting from sutil.modes.Model class and\nimplementing the trainModel and predict methods.\n```python\nimport numpy as np\nfrom sutil.base.Dataset import Dataset\nfrom sutil.models.SklearnModel import SklearnModel\nfrom sklearn.linear_model import LogisticRegression\n\ndatafile = './sutil/datasets/ex2data1.txt'\nd = Dataset.fromDataFile(datafile, ',')\nms = LogisticRegression()\nm = SklearnModel('Sklearn Logistic', ms)\nm.trainModel(d)\nm.score(d.X, d.y)\nm.roc.plot()\nm.roc.zoom((0, 0.4),(0.5, 1.0))\n```\n\n## Neural Network Classifer\nThis class let's you perform classifcation using a Neural Network, multiperceptron classifer. It wraps the sklearn MLPClassifer \nand implements a method to search different activations, solvers and hidden layers structures. Upu can pass \nyour own arguments to initialize the network as you want.\n```python\nfrom sutil.base.Dataset import Dataset\nfrom sutil.neuralnet.NeuralNetworkClassifier import NeuralNetworkClassifier\n\ndatafile = './sutil/datasets/ex2data1.txt'\nd = Dataset.fromDataFile(datafile, ',')\nd.normalizeFeatures()\nsample = d.sample(examples = 30)\n\nnn = NeuralNetworkClassifier((d.n, len(d.labels)))\nnn.searchParameters(sample)\nnn.trainModel(d)\nnn.score(d.X, d.y)\nnn.roc.plot()\n```\n\n## Experiment\nThe experiment class let's you perform the data split and test against different models to compare the \nperformance automatically\n```python\nimport numpy as np\nfrom sutil.base.Dataset import Dataset\nfrom sklearn.linear_model import LogisticRegression\nfrom sutil.base.Experiment import Experiment\nfrom sutil.models.SklearnModel import SklearnModel\nfrom sutil.models.RegularizedLogisticRegression import RegularizedLogisticRegression\nfrom sutil.neuralnet.NeuralNetworkClassifier import NeuralNetworkClassifier\n\n# Load the data\ndatafile = './sutil/datasets/ex2data1.txt'\nd = Dataset.fromDataFile(datafile, ',')\nd.normalizeFeatures()\nprint(\"Size of the dataset... \")\nprint(d.size)\nsample = d.sample(0.3)\nprint(\"Size of the sample... \")\nprint(d.sample)\n\n\n# Create the models\ntheta = np.zeros((d.n + 1, 1))\nlr = RegularizedLogisticRegression(theta, 0.03, 0)\nm = SklearnModel('Sklearn Logistic', LogisticRegression())\n# Look for the best parameters using a sample\nnn = NeuralNetworkClassifier((d.n, len(d.labels)))\nnn.searchParameters(sample)\n\ninput(\"Press enter to continue...\")\n\n# Create the experiment\nexperiment = Experiment(d, None, 0.8, 0.2)\nexperiment.addModel(lr, name = 'Sutil Logistic Regression')\nexperiment.addModel(m, name = 'Sklearn Logistic Regression')\nexperiment.addModel(nn, name = 'Sutil Neural Network')\n\n# Run the experiment\nexperiment.run(plot = True)\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/SoldAI/sutil", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "soldai-utils", "package_url": "https://pypi.org/project/soldai-utils/", "platform": "", "project_url": "https://pypi.org/project/soldai-utils/", "project_urls": {"Homepage": "https://github.com/SoldAI/sutil"}, "release_url": "https://pypi.org/project/soldai-utils/0.0.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Soldai utilities for machine learning and text processing", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sutil</h1>\n<p>This repository contains a set of tools to deal with machine learning and natural language processing tasks, including classes to make quick experimentation of different classifacation models.</p>\n<h2>Dataset</h2>\n<p>This class is made to load csv styles dataset's where all the features are comma separeted and the class is in the last column.\nIt includes functions to normalize the features, add bias, save the data to a file and load from it. Also includes functions\nto split the train, validation and test datasets.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n\n<span class=\"n\">datafile</span> <span class=\"o\">=</span> <span class=\"s1\">'./sutil/datasets/ex2data1.txt'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">fromDataFile</span><span class=\"p\">(</span><span class=\"n\">datafile</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n\n<span class=\"n\">sample</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s2\">\"modelo_01\"</span><span class=\"p\">)</span>\n\n<span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"n\">validation</span><span class=\"p\">,</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"n\">validation</span> <span class=\"o\">=</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">train</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">validation</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n</pre>\n<h2>Regularized Logistic Regression</h2>\n<p>You can also include your own models as a Regularized Logistic Regression, implemented manually using numpy and included in the sutil.models package</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.models.RegularizedLogisticRegression</span> <span class=\"kn\">import</span> <span class=\"n\">RegularizedLogisticRegression</span>\n\n<span class=\"n\">datafile</span> <span class=\"o\">=</span> <span class=\"s1\">'./sutil/datasets/ex2data1.txt'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">fromDataFile</span><span class=\"p\">(</span><span class=\"n\">datafile</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">xlabel</span> <span class=\"o\">=</span> <span class=\"s1\">'Exam 1 score'</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">ylabel</span> <span class=\"o\">=</span> <span class=\"s1\">'Exam 2 score'</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">legend</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'Admitted'</span><span class=\"p\">,</span> <span class=\"s1\">'Not admitted'</span><span class=\"p\">]</span>\n<span class=\"n\">iterations</span> <span class=\"o\">=</span> <span class=\"mi\">400</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'Plotting data with + indicating (y = 1) examples and o indicating (y = 0) examples.</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">plotData</span><span class=\"p\">()</span>\n\n<span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">RegularizedLogisticRegression</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"mf\">0.03</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">train</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">trainModel</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">lr</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">),(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n</pre>\n<h2>Sklearn model</h2>\n<p>You can also embed the sklearn models in a wrapper class in order to run experiments with diferent models implemented in sklearn. In the same style you can create tensorflow, keras or pytorch models inhyereting from sutil.modes.Model class and\nimplementing the trainModel and predict methods.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.models.SklearnModel</span> <span class=\"kn\">import</span> <span class=\"n\">SklearnModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n\n<span class=\"n\">datafile</span> <span class=\"o\">=</span> <span class=\"s1\">'./sutil/datasets/ex2data1.txt'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">fromDataFile</span><span class=\"p\">(</span><span class=\"n\">datafile</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"n\">ms</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">()</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">SklearnModel</span><span class=\"p\">(</span><span class=\"s1\">'Sklearn Logistic'</span><span class=\"p\">,</span> <span class=\"n\">ms</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">trainModel</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n<span class=\"n\">m</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"o\">.</span><span class=\"n\">zoom</span><span class=\"p\">((</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mf\">0.4</span><span class=\"p\">),(</span><span class=\"mf\">0.5</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">))</span>\n</pre>\n<h2>Neural Network Classifer</h2>\n<p>This class let's you perform classifcation using a Neural Network, multiperceptron classifer. It wraps the sklearn MLPClassifer\nand implements a method to search different activations, solvers and hidden layers structures. Upu can pass\nyour own arguments to initialize the network as you want.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.neuralnet.NeuralNetworkClassifier</span> <span class=\"kn\">import</span> <span class=\"n\">NeuralNetworkClassifier</span>\n\n<span class=\"n\">datafile</span> <span class=\"o\">=</span> <span class=\"s1\">'./sutil/datasets/ex2data1.txt'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">fromDataFile</span><span class=\"p\">(</span><span class=\"n\">datafile</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">normalizeFeatures</span><span class=\"p\">()</span>\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"n\">examples</span> <span class=\"o\">=</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"n\">NeuralNetworkClassifier</span><span class=\"p\">((</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">)))</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">searchParameters</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">trainModel</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">)</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">roc</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">()</span>\n</pre>\n<h2>Experiment</h2>\n<p>The experiment class let's you perform the data split and test against different models to compare the\nperformance automatically</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Dataset</span> <span class=\"kn\">import</span> <span class=\"n\">Dataset</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.base.Experiment</span> <span class=\"kn\">import</span> <span class=\"n\">Experiment</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.models.SklearnModel</span> <span class=\"kn\">import</span> <span class=\"n\">SklearnModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.models.RegularizedLogisticRegression</span> <span class=\"kn\">import</span> <span class=\"n\">RegularizedLogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sutil.neuralnet.NeuralNetworkClassifier</span> <span class=\"kn\">import</span> <span class=\"n\">NeuralNetworkClassifier</span>\n\n<span class=\"c1\"># Load the data</span>\n<span class=\"n\">datafile</span> <span class=\"o\">=</span> <span class=\"s1\">'./sutil/datasets/ex2data1.txt'</span>\n<span class=\"n\">d</span> <span class=\"o\">=</span> <span class=\"n\">Dataset</span><span class=\"o\">.</span><span class=\"n\">fromDataFile</span><span class=\"p\">(</span><span class=\"n\">datafile</span><span class=\"p\">,</span> <span class=\"s1\">','</span><span class=\"p\">)</span>\n<span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">normalizeFeatures</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Size of the dataset... \"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"n\">sample</span> <span class=\"o\">=</span> <span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">(</span><span class=\"mf\">0.3</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Size of the sample... \"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Create the models</span>\n<span class=\"n\">theta</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span> <span class=\"o\">+</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">))</span>\n<span class=\"n\">lr</span> <span class=\"o\">=</span> <span class=\"n\">RegularizedLogisticRegression</span><span class=\"p\">(</span><span class=\"n\">theta</span><span class=\"p\">,</span> <span class=\"mf\">0.03</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"n\">m</span> <span class=\"o\">=</span> <span class=\"n\">SklearnModel</span><span class=\"p\">(</span><span class=\"s1\">'Sklearn Logistic'</span><span class=\"p\">,</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">())</span>\n<span class=\"c1\"># Look for the best parameters using a sample</span>\n<span class=\"n\">nn</span> <span class=\"o\">=</span> <span class=\"n\">NeuralNetworkClassifier</span><span class=\"p\">((</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"o\">.</span><span class=\"n\">labels</span><span class=\"p\">)))</span>\n<span class=\"n\">nn</span><span class=\"o\">.</span><span class=\"n\">searchParameters</span><span class=\"p\">(</span><span class=\"n\">sample</span><span class=\"p\">)</span>\n\n<span class=\"nb\">input</span><span class=\"p\">(</span><span class=\"s2\">\"Press enter to continue...\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Create the experiment</span>\n<span class=\"n\">experiment</span> <span class=\"o\">=</span> <span class=\"n\">Experiment</span><span class=\"p\">(</span><span class=\"n\">d</span><span class=\"p\">,</span> <span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">)</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">addModel</span><span class=\"p\">(</span><span class=\"n\">lr</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Sutil Logistic Regression'</span><span class=\"p\">)</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">addModel</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Sklearn Logistic Regression'</span><span class=\"p\">)</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">addModel</span><span class=\"p\">(</span><span class=\"n\">nn</span><span class=\"p\">,</span> <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'Sutil Neural Network'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Run the experiment</span>\n<span class=\"n\">experiment</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">plot</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6462106, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "e912d145dc13c2aac22ed269039d0aee", "sha256": "b95f33107f6521360e55c6c654210d3ee1818b7b07f8e8099c47121b87b15d16"}, "downloads": -1, "filename": "soldai_utils-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e912d145dc13c2aac22ed269039d0aee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27192, "upload_time": "2020-01-15T22:30:00", "upload_time_iso_8601": "2020-01-15T22:30:00.144790Z", "url": "https://files.pythonhosted.org/packages/23/30/a99ee738b6599cf06df09e0c21202b4cc0188500ca346af7df36b29e688a/soldai_utils-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d0bf2e063d66b7033d6c3f27234eeed", "sha256": "af980602c019859795a618557d2b08ad51e358140f162dfce6b177602cacb3dc"}, "downloads": -1, "filename": "soldai-utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4d0bf2e063d66b7033d6c3f27234eeed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9725, "upload_time": "2020-01-15T22:30:05", "upload_time_iso_8601": "2020-01-15T22:30:05.767707Z", "url": "https://files.pythonhosted.org/packages/7e/47/0faa2fb9ff73f7ace58e29c0c5ff28da21b9f65e75804b65469658948e17/soldai-utils-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e912d145dc13c2aac22ed269039d0aee", "sha256": "b95f33107f6521360e55c6c654210d3ee1818b7b07f8e8099c47121b87b15d16"}, "downloads": -1, "filename": "soldai_utils-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e912d145dc13c2aac22ed269039d0aee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 27192, "upload_time": "2020-01-15T22:30:00", "upload_time_iso_8601": "2020-01-15T22:30:00.144790Z", "url": "https://files.pythonhosted.org/packages/23/30/a99ee738b6599cf06df09e0c21202b4cc0188500ca346af7df36b29e688a/soldai_utils-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d0bf2e063d66b7033d6c3f27234eeed", "sha256": "af980602c019859795a618557d2b08ad51e358140f162dfce6b177602cacb3dc"}, "downloads": -1, "filename": "soldai-utils-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4d0bf2e063d66b7033d6c3f27234eeed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9725, "upload_time": "2020-01-15T22:30:05", "upload_time_iso_8601": "2020-01-15T22:30:05.767707Z", "url": "https://files.pythonhosted.org/packages/7e/47/0faa2fb9ff73f7ace58e29c0c5ff28da21b9f65e75804b65469658948e17/soldai-utils-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:06:49 2020"}