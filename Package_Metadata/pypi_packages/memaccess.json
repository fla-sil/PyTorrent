{"info": {"author": "Mischa Kr\u00fcger (Makman2)", "author_email": "makmanx64@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "``memaccess``\n=============\n\nPython library for Windows giving live access to a program\u2019s memory.\n\nUsage\n-----\n\n``memaccess`` exposes one main class to use for memory inspection:\n``MemoryView``. It will request all necessary data from Windows to be\nable to access memory of another application. Just pass to the class the\nprocess-id of the application you want to observe:\n\n.. code:: python\n\n    from memaccess import MemoryView\n\n    view = MemoryView(5555)\n    # Read memory...\n    view.close()\n\nIt\u2019s safer to use the context-manager variant of ``MemoryView``:\n\n.. code:: python\n\n    from memaccess import MemoryView\n\n    with MemoryView(5555) as view:\n        pass  # Read memory...\n\n..\n\n    **NOTE**\n\n    Accessing another program\u2019s memory requires elevated privileges,\n    otherwise instantiation of ``MemoryView`` will fail.\n\nTo read content, ``memaccess`` exposes the ``read`` function. It takes\nthe number of bytes to read and the address where to start reading.\n\n.. code:: python\n\n    # Read 8 bytes of memory at address 0x01234560\n    view.read(8, 0x01234560)\n\nFor convenience, ``MemoryView`` exposes read methods that convert values\nin memory to respective C/C++ types.\n\n.. code:: python\n\n    view.read_int(0x01234560)\n    view.read_float(0x01234564)\n    # ... and many others.\n\nYou can also write to memory. Note that you have to open the ``MemoryView``\nin write-mode:\n\n.. code:: python\n\n    with MemoryView(5555, 'rw') as view:\n        view.write_int(33, 0x01234560)\n        view.read_int(0x01234564)\n\nPlease inspect the ``MemoryView`` class for details on all of those\nfunctions.\n\nExceptions\n----------\n\nSome exceptions are raised due to internal Windows API errors and show\nan error code.\n\n::\n\n    >>> from memaccess import MemoryView\n    >>> MemoryView(5555)\n    Traceback (most recent call last):\n      File \"<stdin>\", line 1, in <module>\n      ...\n    RuntimeError: Can't open process with pid 5555, error code 87\n\nYou can read up on those error codes here:\n\nhttps://msdn.microsoft.com/de-de/library/windows/desktop/ms681381(v=vs.85).aspx\n\n\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Makman2/memaccess", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "memaccess", "package_url": "https://pypi.org/project/memaccess/", "platform": "", "project_url": "https://pypi.org/project/memaccess/", "project_urls": {"Homepage": "https://github.com/Makman2/memaccess"}, "release_url": "https://pypi.org/project/memaccess/0.2/", "requires_dist": null, "requires_python": "", "summary": "Python library for Windows giving live access to a program's memory", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Python library for Windows giving live access to a program\u2019s memory.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p><tt>memaccess</tt> exposes one main class to use for memory inspection:\n<tt>MemoryView</tt>. It will request all necessary data from Windows to be\nable to access memory of another application. Just pass to the class the\nprocess-id of the application you want to observe:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memaccess</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryView</span>\n\n<span class=\"n\">view</span> <span class=\"o\">=</span> <span class=\"n\">MemoryView</span><span class=\"p\">(</span><span class=\"mi\">5555</span><span class=\"p\">)</span>\n<span class=\"c1\"># Read memory...</span>\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n<p>It\u2019s safer to use the context-manager variant of <tt>MemoryView</tt>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">memaccess</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryView</span>\n\n<span class=\"k\">with</span> <span class=\"n\">MemoryView</span><span class=\"p\">(</span><span class=\"mi\">5555</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">view</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>  <span class=\"c1\"># Read memory...</span>\n</pre>\n<blockquote>\n<p><strong>NOTE</strong></p>\n<p>Accessing another program\u2019s memory requires elevated privileges,\notherwise instantiation of <tt>MemoryView</tt> will fail.</p>\n</blockquote>\n<p>To read content, <tt>memaccess</tt> exposes the <tt>read</tt> function. It takes\nthe number of bytes to read and the address where to start reading.</p>\n<pre><span class=\"c1\"># Read 8 bytes of memory at address 0x01234560</span>\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mh\">0x01234560</span><span class=\"p\">)</span>\n</pre>\n<p>For convenience, <tt>MemoryView</tt> exposes read methods that convert values\nin memory to respective C/C++ types.</p>\n<pre><span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">read_int</span><span class=\"p\">(</span><span class=\"mh\">0x01234560</span><span class=\"p\">)</span>\n<span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">read_float</span><span class=\"p\">(</span><span class=\"mh\">0x01234564</span><span class=\"p\">)</span>\n<span class=\"c1\"># ... and many others.</span>\n</pre>\n<p>You can also write to memory. Note that you have to open the <tt>MemoryView</tt>\nin write-mode:</p>\n<pre><span class=\"k\">with</span> <span class=\"n\">MemoryView</span><span class=\"p\">(</span><span class=\"mi\">5555</span><span class=\"p\">,</span> <span class=\"s1\">'rw'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">view</span><span class=\"p\">:</span>\n    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">write_int</span><span class=\"p\">(</span><span class=\"mi\">33</span><span class=\"p\">,</span> <span class=\"mh\">0x01234560</span><span class=\"p\">)</span>\n    <span class=\"n\">view</span><span class=\"o\">.</span><span class=\"n\">read_int</span><span class=\"p\">(</span><span class=\"mh\">0x01234564</span><span class=\"p\">)</span>\n</pre>\n<p>Please inspect the <tt>MemoryView</tt> class for details on all of those\nfunctions.</p>\n</div>\n<div id=\"exceptions\">\n<h2>Exceptions</h2>\n<p>Some exceptions are raised due to internal Windows API errors and show\nan error code.</p>\n<pre>&gt;&gt;&gt; from memaccess import MemoryView\n&gt;&gt;&gt; MemoryView(5555)\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  ...\nRuntimeError: Can't open process with pid 5555, error code 87\n</pre>\n<p>You can read up on those error codes here:</p>\n<p><a href=\"https://msdn.microsoft.com/de-de/library/windows/desktop/ms681381(v=vs.85).aspx\" rel=\"nofollow\">https://msdn.microsoft.com/de-de/library/windows/desktop/ms681381(v=vs.85).aspx</a></p>\n</div>\n\n          </div>"}, "last_serial": 3489722, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "0c0817593460c5f53d0712dd8a8c6062", "sha256": "8edcf158645bf1d40756de5e08179cd77ea2285c2d1444a384fbea66bc6825b7"}, "downloads": -1, "filename": "memaccess-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "0c0817593460c5f53d0712dd8a8c6062", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 3282, "upload_time": "2017-12-18T22:06:09", "upload_time_iso_8601": "2017-12-18T22:06:09.979301Z", "url": "https://files.pythonhosted.org/packages/05/2d/b3a734e83a2d66be31077820e452b214e6d2d3ac6df8c38230d4bf7ea5ab/memaccess-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "26c1237bd2ebd337805c79ecd466a972", "sha256": "c07376a9f3946098c85ae84c9cb04e698ede71df5cfe49704080e9d1628bf3d6"}, "downloads": -1, "filename": "memaccess-0.1.tar.gz", "has_sig": false, "md5_digest": "26c1237bd2ebd337805c79ecd466a972", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2090, "upload_time": "2017-12-18T22:06:11", "upload_time_iso_8601": "2017-12-18T22:06:11.899908Z", "url": "https://files.pythonhosted.org/packages/1d/dd/f2980332fd8c86e1de3dd5a02a5bb9e366fc0fa5cf7f41a4c199bfcd3837/memaccess-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "bf3e1964efc376a44cf899af4313ec65", "sha256": "5354abc1a6c9c4665a5a5dafff4e168da672a5b1c6f13ee3dda109ce380ab73d"}, "downloads": -1, "filename": "memaccess-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf3e1964efc376a44cf899af4313ec65", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4950, "upload_time": "2017-12-18T22:17:19", "upload_time_iso_8601": "2017-12-18T22:17:19.416893Z", "url": "https://files.pythonhosted.org/packages/ee/d2/cc90803ccd1246e7734fe96726f248303fc864674ee3dea209a13b47f570/memaccess-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "154163064d16c007cbbbed0867bd0b39", "sha256": "4273168e792b3a5f013e51708fbe47a39df578b1ecdb0d4aa2ae9232b7590822"}, "downloads": -1, "filename": "memaccess-0.1.1.tar.gz", "has_sig": false, "md5_digest": "154163064d16c007cbbbed0867bd0b39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2803, "upload_time": "2017-12-18T22:17:22", "upload_time_iso_8601": "2017-12-18T22:17:22.117377Z", "url": "https://files.pythonhosted.org/packages/60/4c/b5a5f63632413e0b0b5ab4120f3284b86a3200e46b0f9165a46aefe1b334/memaccess-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "36e9ca5935989ed00986458448d67d78", "sha256": "285726209eea63a31990073f1001dc07da2e3a6a6681a0900a1c7e367c367086"}, "downloads": -1, "filename": "memaccess-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "36e9ca5935989ed00986458448d67d78", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5028, "upload_time": "2018-01-01T22:33:28", "upload_time_iso_8601": "2018-01-01T22:33:28.156041Z", "url": "https://files.pythonhosted.org/packages/be/fc/b1582cf0ea2709f3c104c6be2294ee4c4decc6672ce1812304c85cef0487/memaccess-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2ad651d609635f8061678aa269cdbbd3", "sha256": "1235181c5a88bac984b57975b7b75c490a2906399b3dab948b3f5049ce0a190e"}, "downloads": -1, "filename": "memaccess-0.1.2.tar.gz", "has_sig": false, "md5_digest": "2ad651d609635f8061678aa269cdbbd3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3055, "upload_time": "2018-01-01T22:33:29", "upload_time_iso_8601": "2018-01-01T22:33:29.105867Z", "url": "https://files.pythonhosted.org/packages/4b/16/775b7cd05106667051f5de52347b15c5377097d3d7bcb61b978c65a24b23/memaccess-0.1.2.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "4cf0d6233eb0227173b743db2f3f3778", "sha256": "24b34f602cca9ba81c9f8a7226e2b09522c76d41258402edf3e119a5b441ec25"}, "downloads": -1, "filename": "memaccess-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4cf0d6233eb0227173b743db2f3f3778", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7984, "upload_time": "2018-01-14T23:52:41", "upload_time_iso_8601": "2018-01-14T23:52:41.561723Z", "url": "https://files.pythonhosted.org/packages/b6/e1/9356dd3cc14130b1aafdbbe0feceec2d7c1283529243063ab36640e5ae18/memaccess-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e202f1d64533228ec869f210503d5d1e", "sha256": "0827c857ce23f7ce7f0397f7afc7368368bdff40dd6e0a9f305e1abc55d4da0e"}, "downloads": -1, "filename": "memaccess-0.2.tar.gz", "has_sig": false, "md5_digest": "e202f1d64533228ec869f210503d5d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5443, "upload_time": "2018-01-14T23:53:02", "upload_time_iso_8601": "2018-01-14T23:53:02.095635Z", "url": "https://files.pythonhosted.org/packages/83/cc/30587ab71e06329cbaae61676474f971fc6f43be936e84bab20d719ab8cc/memaccess-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4cf0d6233eb0227173b743db2f3f3778", "sha256": "24b34f602cca9ba81c9f8a7226e2b09522c76d41258402edf3e119a5b441ec25"}, "downloads": -1, "filename": "memaccess-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4cf0d6233eb0227173b743db2f3f3778", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7984, "upload_time": "2018-01-14T23:52:41", "upload_time_iso_8601": "2018-01-14T23:52:41.561723Z", "url": "https://files.pythonhosted.org/packages/b6/e1/9356dd3cc14130b1aafdbbe0feceec2d7c1283529243063ab36640e5ae18/memaccess-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e202f1d64533228ec869f210503d5d1e", "sha256": "0827c857ce23f7ce7f0397f7afc7368368bdff40dd6e0a9f305e1abc55d4da0e"}, "downloads": -1, "filename": "memaccess-0.2.tar.gz", "has_sig": false, "md5_digest": "e202f1d64533228ec869f210503d5d1e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5443, "upload_time": "2018-01-14T23:53:02", "upload_time_iso_8601": "2018-01-14T23:53:02.095635Z", "url": "https://files.pythonhosted.org/packages/83/cc/30587ab71e06329cbaae61676474f971fc6f43be936e84bab20d719ab8cc/memaccess-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:23 2020"}