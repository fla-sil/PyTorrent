{"info": {"author": "Outernet Inc", "author_email": "apps@outernet.is", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4"], "description": "=================\nouternet-broadman\n=================\n\nCollection of scripts for managing Outernet content repository.\n\nInstalling\n==========\n\nInstall using pip straight from the repository::\n\n    pip install https://github.com/Outernet-Project/outernet-broadman/archive/master.zip\n\nGit also needs to be installed on your system.\n\nNote that only Unix/Linux systems are supported at this moment.\n\nEnvironment variables\n=====================\n\nBroadman scripts work on a content pool directory. Usually, you need to be in\nthe root of the content pool when using the commands. To work with the content\npool regardless of the current working directory, you can set the\n``OUTERNET_CONTENT`` environment variable to the content pool path.\n\nOverview\n========\n\nThere are two main aspects when it comes to working with the content pool.\nThere is a master pool, which contains the actual content, and there are\nservers which hold symlinks to content.\n\nBefore we begin working on a content pool, we need to initialize it. Use the\nfollowing tool for the purpose:\n\n- ``pinit`` - initialize content pool\n\nThe following tools are used for working with the content:\n\n- ``zimport`` - import legacy zipball into master pool\n- ``update`` - for making changes to content permanent, resetting and reverting\n  changes\n- ``lschanged`` - listing changed content\n\nTools for working with metadata metadata:\n\n- ``mcat`` - viewing metadata\n- ``med`` - editing metadata\n- ``mclean`` - clean up metadta file\n- ``filter`` - filter paths according to metadata rules\n\nThe following tools are used for navigating the content pool:\n\n- ``getpath`` - obtaining a path to content directory or symlink by content ID\n- ``getcid`` - obtaining content ID from content directory path\n\nFor managing servers, these tools are available:\n\n- ``srvadd`` - add content to server\n- ``srvdel`` - remove content from server\n- ``srvsync`` - sync backlog with servers\n\nUsing the tools\n===============\n\nWe won't go into each tool in detail. Instead we'll take a look at some general\nprinciples.\n\nAll tools have ``--help`` switch that provides short usage notes and\ndescriptions of all arguments they take/require.\n\nMost tools can be used as usual by passing arguments to them, or they can be\nused in a pipe. When used in a pipe, most tools will take content IDs and/or\npaths. You can usually convert between paths and IDs using ``getpath`` and\n``getcid`` commands in a pipe.\n\nMost tools will show their status as OK, ERR, or WARN. These are always output\nto STDOUT. Additional error information can be output to STDERR. These messages\ncan be piped to a file to aid troubleshooting.\n\nApart from conent IDs and paths, tools may have different switches that alter\ntheir behavior. Some tools may require switches to be used.\n\nTools can and should be used alongside common Unix tools like sed, awk, grep.\n\nThe entire content pool is a Git repository. Common git techniques apply.\nHowever, you should avoid using Git directly. \n\nBroadman tools will usually be able to get you where you need to be without too\nmuch effort.  The tools output commit log messages in a particular\nmachine-readable format, which is the main reason direct usage of git should be\navoided.\n\nBacklog\n=======\n\nEvery time a content is added to or removed from a server, this is recorded in\na backlog file located at ``${OUTERNET_CONTENT}/.backlog``. This file is in a\nmachine-readable format, and automation tools may be added later to help sync\nthe content pool changes to actual servers.\n\nReporting bugs\n==============\n\nPlease report bugs and feature requests to the `issue tracker`_.\n\n.. _issue tracker: https://github.com/Outernet-Project/outernet-broadman/issues", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Outernet-Project/outernet-broadman", "keywords": "broadcast management,outernet,content,zip,json", "license": "GPLv3", "maintainer": null, "maintainer_email": null, "name": "outernet-broadman", "package_url": "https://pypi.org/project/outernet-broadman/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/outernet-broadman/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/Outernet-Project/outernet-broadman"}, "release_url": "https://pypi.org/project/outernet-broadman/0.4/", "requires_dist": null, "requires_python": null, "summary": "Tools for broadcast management", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Collection of scripts for managing Outernet content repository.</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<p>Install using pip straight from the repository:</p>\n<pre>pip install https://github.com/Outernet-Project/outernet-broadman/archive/master.zip\n</pre>\n<p>Git also needs to be installed on your system.</p>\n<p>Note that only Unix/Linux systems are supported at this moment.</p>\n</div>\n<div id=\"environment-variables\">\n<h2>Environment variables</h2>\n<p>Broadman scripts work on a content pool directory. Usually, you need to be in\nthe root of the content pool when using the commands. To work with the content\npool regardless of the current working directory, you can set the\n<tt>OUTERNET_CONTENT</tt> environment variable to the content pool path.</p>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>There are two main aspects when it comes to working with the content pool.\nThere is a master pool, which contains the actual content, and there are\nservers which hold symlinks to content.</p>\n<p>Before we begin working on a content pool, we need to initialize it. Use the\nfollowing tool for the purpose:</p>\n<ul>\n<li><tt>pinit</tt> - initialize content pool</li>\n</ul>\n<p>The following tools are used for working with the content:</p>\n<ul>\n<li><tt>zimport</tt> - import legacy zipball into master pool</li>\n<li><tt>update</tt> - for making changes to content permanent, resetting and reverting\nchanges</li>\n<li><tt>lschanged</tt> - listing changed content</li>\n</ul>\n<p>Tools for working with metadata metadata:</p>\n<ul>\n<li><tt>mcat</tt> - viewing metadata</li>\n<li><tt>med</tt> - editing metadata</li>\n<li><tt>mclean</tt> - clean up metadta file</li>\n<li><tt>filter</tt> - filter paths according to metadata rules</li>\n</ul>\n<p>The following tools are used for navigating the content pool:</p>\n<ul>\n<li><tt>getpath</tt> - obtaining a path to content directory or symlink by content ID</li>\n<li><tt>getcid</tt> - obtaining content ID from content directory path</li>\n</ul>\n<p>For managing servers, these tools are available:</p>\n<ul>\n<li><tt>srvadd</tt> - add content to server</li>\n<li><tt>srvdel</tt> - remove content from server</li>\n<li><tt>srvsync</tt> - sync backlog with servers</li>\n</ul>\n</div>\n<div id=\"using-the-tools\">\n<h2>Using the tools</h2>\n<p>We won\u2019t go into each tool in detail. Instead we\u2019ll take a look at some general\nprinciples.</p>\n<p>All tools have <tt><span class=\"pre\">--help</span></tt> switch that provides short usage notes and\ndescriptions of all arguments they take/require.</p>\n<p>Most tools can be used as usual by passing arguments to them, or they can be\nused in a pipe. When used in a pipe, most tools will take content IDs and/or\npaths. You can usually convert between paths and IDs using <tt>getpath</tt> and\n<tt>getcid</tt> commands in a pipe.</p>\n<p>Most tools will show their status as OK, ERR, or WARN. These are always output\nto STDOUT. Additional error information can be output to STDERR. These messages\ncan be piped to a file to aid troubleshooting.</p>\n<p>Apart from conent IDs and paths, tools may have different switches that alter\ntheir behavior. Some tools may require switches to be used.</p>\n<p>Tools can and should be used alongside common Unix tools like sed, awk, grep.</p>\n<p>The entire content pool is a Git repository. Common git techniques apply.\nHowever, you should avoid using Git directly.</p>\n<p>Broadman tools will usually be able to get you where you need to be without too\nmuch effort.  The tools output commit log messages in a particular\nmachine-readable format, which is the main reason direct usage of git should be\navoided.</p>\n</div>\n<div id=\"backlog\">\n<h2>Backlog</h2>\n<p>Every time a content is added to or removed from a server, this is recorded in\na backlog file located at <tt><span class=\"pre\">${OUTERNET_CONTENT}/.backlog</span></tt>. This file is in a\nmachine-readable format, and automation tools may be added later to help sync\nthe content pool changes to actual servers.</p>\n</div>\n<div id=\"reporting-bugs\">\n<h2>Reporting bugs</h2>\n<p>Please report bugs and feature requests to the <a href=\"https://github.com/Outernet-Project/outernet-broadman/issues\" rel=\"nofollow\">issue tracker</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1634725, "releases": {"0.4": [{"comment_text": "", "digests": {"md5": "48b25f676a0b17c90da602da92f47e78", "sha256": "3b2311d288b6ad6fb3201c96c6cd1abf7660b3ee2e3350629655bfbe5be06565"}, "downloads": -1, "filename": "outernet-broadman-0.4.tar.gz", "has_sig": false, "md5_digest": "48b25f676a0b17c90da602da92f47e78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33048, "upload_time": "2015-07-15T16:31:45", "upload_time_iso_8601": "2015-07-15T16:31:45.951665Z", "url": "https://files.pythonhosted.org/packages/db/64/b29ebd5ea389835092546e7b713c2a618c3d38ece914602b584586c0e7d7/outernet-broadman-0.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "64356537c5ca5488c8721f71ec104b70", "sha256": "4d1893cada235c0d84565cb60f3dd67f4b347b358f031e2a0c3a52da3be58b5c"}, "downloads": -1, "filename": "outernet-broadman-0.4.zip", "has_sig": false, "md5_digest": "64356537c5ca5488c8721f71ec104b70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48802, "upload_time": "2015-07-15T16:18:44", "upload_time_iso_8601": "2015-07-15T16:18:44.507368Z", "url": "https://files.pythonhosted.org/packages/11/9c/15d4aabb75684bbe40aff39a4ebe4493f6a4f87758ea207e31708721861a/outernet-broadman-0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "48b25f676a0b17c90da602da92f47e78", "sha256": "3b2311d288b6ad6fb3201c96c6cd1abf7660b3ee2e3350629655bfbe5be06565"}, "downloads": -1, "filename": "outernet-broadman-0.4.tar.gz", "has_sig": false, "md5_digest": "48b25f676a0b17c90da602da92f47e78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 33048, "upload_time": "2015-07-15T16:31:45", "upload_time_iso_8601": "2015-07-15T16:31:45.951665Z", "url": "https://files.pythonhosted.org/packages/db/64/b29ebd5ea389835092546e7b713c2a618c3d38ece914602b584586c0e7d7/outernet-broadman-0.4.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "64356537c5ca5488c8721f71ec104b70", "sha256": "4d1893cada235c0d84565cb60f3dd67f4b347b358f031e2a0c3a52da3be58b5c"}, "downloads": -1, "filename": "outernet-broadman-0.4.zip", "has_sig": false, "md5_digest": "64356537c5ca5488c8721f71ec104b70", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 48802, "upload_time": "2015-07-15T16:18:44", "upload_time_iso_8601": "2015-07-15T16:18:44.507368Z", "url": "https://files.pythonhosted.org/packages/11/9c/15d4aabb75684bbe40aff39a4ebe4493f6a4f87758ea207e31708721861a/outernet-broadman-0.4.zip", "yanked": false}], "timestamp": "Fri May  8 03:00:43 2020"}