{"info": {"author": "Shashi Deep Dulam", "author_email": "shashidulam83@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Data Analysis Library Sharks\n\nThis repository contains a detailed note of a new data analysis library Sharks.\n\n\n\n## Objectives\n\nSharks :\n\n* Has A DataFrame class with data stored in numpy arrays\n* Can Select subsets of data with the brackets operator\n* Can Use special methods defined in the Python data model\n* Have a nicely formatted display of the DataFrame in the notebook\n* Can Implement aggregation methods - sum, min, max, mean, median, etc...\n* Can Implement non-aggregation methods such as isna, unique, rename, drop\n* Can Group by one or two columns\n* Have methods specific to string columns\n* Can Read in data from a comma-separated value file\n\n\n\n## Functionalities of Sharks\n\n\n### 1. DataFrame constructor input types\n\nOur DataFrame class is constructed with a single parameter.\n\nSpecifically, input types must qualify the following:\n\n* Sharks will raise a `TypeError` if `data` is not a dictionary\n* Sharks will raise a `TypeError` if the keys of `data` are not strings\n* Sharks will raise a `TypeError` if the values of `data` are not numpy arrays\n* Sharks will raise a `ValueError` if the values of `data` are not 1-dimensional\n\n\n\n\n### 2. Array lengths\n\nWe are now guaranteed that `data` is a dictionary of strings mapped to one-dimensional arrays. Each column of data in our DataFrame must have the same number of elements. \n\n### 3. Convert unicode arrays to object\n\nWhenever you create a numpy array of Python strings, it will default the data type of that array to unicode. Take a look at the following simple numpy array created from strings. Its data type, found in the `dtype` attribute is shown to be 'U' plus the length of the longest string.\n\n```python\n>>> a = np.array(['cat', 'dog', 'snake'])\n>>> a.dtype\ndtype('<U5')\n```\n\nUnicode arrays are more difficult to manipulate and don't have the flexibility that we desire. So, if our user passes us a Unicode array, we will convert it to a data type called 'object'. This is a flexible type and will help us later when creating methods just for string columns. Technically, this data type allows any Python objects within the array.\n\n\n### 4. Find the number of rows in the DataFrame with the `len` function\n\nThe number of rows are returned when passing a pandas DataFrame to the builtin `len` function.\n\n\n### 5. Return columns as a list\n\n `df.columns` will return a list of the column names.\n\n\n### 6. Set new column names\n\nwe can assign all new columns to our DataFrame by setting the columns property equal to a list. A example below shows how you would set new columns for a 3-column DataFrame.\n\n```python\ndf.columns = ['state', 'age', 'fruit']\n```\n\nAlso Sharks will raise errors if the data that is inserted is invalid.\n\n* Sharks will Raise a `TypeError` if the object used to set new columns is not a list\n* Sharks will Raise a `ValueError` if the number of column names in the list does not match the current DataFrame\n* Sharks will Raise a `TypeError` if any of the columns are not strings\n* Sharks will Raise a `ValueError` if any of the column names are duplicated in the list\n\n\n\n### 7. The `shape` property\n\nThe `shape` property will return a two-item tuple of the number of rows and columns. \n\n\n### 8. Visual HTML representation in the notebook with the `_repr_html_` method\n\n\nThe `_repr_html_` method is made available to developers by iPython so that your objects can have nicely formatted HTML displays within Jupyter Notebooks. Read more on this method [here in the iPython documentation][12] along with other similar methods for different representations.\n\n\n### 9. The `values` property\n\n`values` is a property that returns a single array of all the columns of data. \n\n\n### 10. The `dtypes` property\n\nThe `dtypes` property will return a two-column DataFrame with the column names in the first column and their data type as a string in the other. Use 'Column Name' and 'Data Type' as column names.\n\n\n### 11. Select a single column with the brackets\n\nIn Sharks, you can select a single column with `df['colname']`.\n\n### 12. Select multiple columns with a list\n\nSharks will also be able to select multiple columns if given a list within the brackets. For example, `df[['colname1', 'colname2']]` will return a two column DataFrame.\n\n### 13. Boolean Selection with a DataFrame\n\nIn Sharks, you can filter for specific rows of a DataFrame by passing in a boolean Series/array to the brackets. For instance, the following will select only the rows such that `a` is greater than 10.\n\n```python\n>>> s = df['a'] > 10\n>>> df[s]\n```\n\n\n### 14. Check for simultaneous selection of rows and columns\n\n\n\n### 15. Select a single cell of data\n\nSharks can select a single cell of data with `df[rs, cs]`. We will assume `rs` is an integer and `cs` is either an integer or a string.\n\n\n### 16. Simultaneously select rows as booleans, lists, or slices\n\nSharks can select rows and columns simultaneously with `df[rs, cs]`. We will allow `rs` to be either a single-column boolean DataFrame, a list of integers, or a slice. \n\n### 17. Simultaneous selection with multiple columns as a list\n\n\n### 18.  Simultaneous selection with column slices\n\nSharks will allow  columns to be sliced with either strings or integers. The following selections will be acceptable.\n\n\n### 19. Tab Completion for column names\n\n\n### 20. Create a new column or overwrite an old column\n\n\n### 21. `head` and `tail` methods\n\nThe `head` and `tail` methods each accept a single integer parameter `n` which is defaulted to 5. \n\n### 22. Generic aggregation methods\n\nSharks can implement several methods that perform an aggregation. These methods all return a single value for each column. The following aggregation methods are defined.\n\n* min\n* max\n* mean\n* median\n* sum\n* var\n* std\n* all\n* any\n* argmax - index of the maximum\n* argmin - index of the minimum\n\n\n### 23. `isna` method\n\nThe `isna` method will return a DataFrame the same shape as the original but with boolean values for every single value. Each value will be tested whether it is missing or not. Use `np.isnan` except in the case for strings which you can use a vectorized equality expression to `None`.\n\n### 24. `count` method\n\nThe `count` method returns a single-row DataFrame with the number of non-missing values for each column. You will want to use the result of `isna`.\n\n\n\n### 25. `unique` method\n\nThis method will return the unique values for each column in the DataFrame. Specifically, it will return a list of one-column DataFrames of unique values in each column. If there is a single column, just return the DataFrame.\n\n\n\n### 26. `nunique` method\n\nReturn a single-row DataFrame with the number of unique values for each column.\n\n\n### 27. `value_counts` method\n\n\n### 28. Normalize options for `value_counts`\n\n\n### 29. `rename` method\n\nThe `rename` method renames one or more column names. Accept a dictionary of old column names mapped to new column names. Return a DataFrame. Raise a `TypeError` if `columns` is not a dictionary.\n\n\n\n### 30. `drop` method\n\nAccept a single string or a list of column names as strings. Return a DataFrame without those columns. Raise a `TypeError` if a string or list is not provided.\n\n\n\n### 31. Non-aggregation methods\n\nThere are several non-aggregation methods that function similarly. All of the following non-aggregation methods return a DataFrame that is the same shape as the origin.\n\n* `abs`\n* `cummin`\n* `cummax`\n* `cumsum`\n* `clip`\n* `round`\n* `copy`\n\n\n\n\n\n### 32. Arithmetic and Comparison Operators\n\nAll the common arithmetic and comparison operators will be made available to our DataFrame. For example, `df + 5` uses the plus operator to add 5 to each element of the DataFrame. Take a look at some of the following examples:\n\n```python\ndf + 5\ndf - 5\ndf > 5\ndf != 5\n5 + df\n5 < df\n```\n\n\n### 33. `sort_values` method\n\nThis method will sort the rows of the DataFrame by one or more columns. Allow the parameter `by` to be either a single column name as a string or a list of column names as strings. The DataFrame will be sorted by this column or columns.\n\n\n\n### 34. `pivot_table` method\n\n\n### 35. Reading simple CSVs\n\nThe `read_csv` function, will read in simple comma-separated value files (CSVs) and return a DataFrame.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Shashideep83/shark_lib", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sharks", "package_url": "https://pypi.org/project/sharks/", "platform": "", "project_url": "https://pypi.org/project/sharks/", "project_urls": {"Homepage": "https://github.com/Shashideep83/shark_lib"}, "release_url": "https://pypi.org/project/sharks/1.0.2/", "requires_dist": ["numpy"], "requires_python": "", "summary": "A Python package for data analysis.", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Data Analysis Library Sharks</h1>\n<p>This repository contains a detailed note of a new data analysis library Sharks.</p>\n<h2>Objectives</h2>\n<p>Sharks :</p>\n<ul>\n<li>Has A DataFrame class with data stored in numpy arrays</li>\n<li>Can Select subsets of data with the brackets operator</li>\n<li>Can Use special methods defined in the Python data model</li>\n<li>Have a nicely formatted display of the DataFrame in the notebook</li>\n<li>Can Implement aggregation methods - sum, min, max, mean, median, etc...</li>\n<li>Can Implement non-aggregation methods such as isna, unique, rename, drop</li>\n<li>Can Group by one or two columns</li>\n<li>Have methods specific to string columns</li>\n<li>Can Read in data from a comma-separated value file</li>\n</ul>\n<h2>Functionalities of Sharks</h2>\n<h3>1. DataFrame constructor input types</h3>\n<p>Our DataFrame class is constructed with a single parameter.</p>\n<p>Specifically, input types must qualify the following:</p>\n<ul>\n<li>Sharks will raise a <code>TypeError</code> if <code>data</code> is not a dictionary</li>\n<li>Sharks will raise a <code>TypeError</code> if the keys of <code>data</code> are not strings</li>\n<li>Sharks will raise a <code>TypeError</code> if the values of <code>data</code> are not numpy arrays</li>\n<li>Sharks will raise a <code>ValueError</code> if the values of <code>data</code> are not 1-dimensional</li>\n</ul>\n<h3>2. Array lengths</h3>\n<p>We are now guaranteed that <code>data</code> is a dictionary of strings mapped to one-dimensional arrays. Each column of data in our DataFrame must have the same number of elements.</p>\n<h3>3. Convert unicode arrays to object</h3>\n<p>Whenever you create a numpy array of Python strings, it will default the data type of that array to unicode. Take a look at the following simple numpy array created from strings. Its data type, found in the <code>dtype</code> attribute is shown to be 'U' plus the length of the longest string.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"s1\">'cat'</span><span class=\"p\">,</span> <span class=\"s1\">'dog'</span><span class=\"p\">,</span> <span class=\"s1\">'snake'</span><span class=\"p\">])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">a</span><span class=\"o\">.</span><span class=\"n\">dtype</span>\n<span class=\"n\">dtype</span><span class=\"p\">(</span><span class=\"s1\">'&lt;U5'</span><span class=\"p\">)</span>\n</pre>\n<p>Unicode arrays are more difficult to manipulate and don't have the flexibility that we desire. So, if our user passes us a Unicode array, we will convert it to a data type called 'object'. This is a flexible type and will help us later when creating methods just for string columns. Technically, this data type allows any Python objects within the array.</p>\n<h3>4. Find the number of rows in the DataFrame with the <code>len</code> function</h3>\n<p>The number of rows are returned when passing a pandas DataFrame to the builtin <code>len</code> function.</p>\n<h3>5. Return columns as a list</h3>\n<p><code>df.columns</code> will return a list of the column names.</p>\n<h3>6. Set new column names</h3>\n<p>we can assign all new columns to our DataFrame by setting the columns property equal to a list. A example below shows how you would set new columns for a 3-column DataFrame.</p>\n<pre><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s1\">'state'</span><span class=\"p\">,</span> <span class=\"s1\">'age'</span><span class=\"p\">,</span> <span class=\"s1\">'fruit'</span><span class=\"p\">]</span>\n</pre>\n<p>Also Sharks will raise errors if the data that is inserted is invalid.</p>\n<ul>\n<li>Sharks will Raise a <code>TypeError</code> if the object used to set new columns is not a list</li>\n<li>Sharks will Raise a <code>ValueError</code> if the number of column names in the list does not match the current DataFrame</li>\n<li>Sharks will Raise a <code>TypeError</code> if any of the columns are not strings</li>\n<li>Sharks will Raise a <code>ValueError</code> if any of the column names are duplicated in the list</li>\n</ul>\n<h3>7. The <code>shape</code> property</h3>\n<p>The <code>shape</code> property will return a two-item tuple of the number of rows and columns.</p>\n<h3>8. Visual HTML representation in the notebook with the <code>_repr_html_</code> method</h3>\n<p>The <code>_repr_html_</code> method is made available to developers by iPython so that your objects can have nicely formatted HTML displays within Jupyter Notebooks. Read more on this method [here in the iPython documentation][12] along with other similar methods for different representations.</p>\n<h3>9. The <code>values</code> property</h3>\n<p><code>values</code> is a property that returns a single array of all the columns of data.</p>\n<h3>10. The <code>dtypes</code> property</h3>\n<p>The <code>dtypes</code> property will return a two-column DataFrame with the column names in the first column and their data type as a string in the other. Use 'Column Name' and 'Data Type' as column names.</p>\n<h3>11. Select a single column with the brackets</h3>\n<p>In Sharks, you can select a single column with <code>df['colname']</code>.</p>\n<h3>12. Select multiple columns with a list</h3>\n<p>Sharks will also be able to select multiple columns if given a list within the brackets. For example, <code>df[['colname1', 'colname2']]</code> will return a two column DataFrame.</p>\n<h3>13. Boolean Selection with a DataFrame</h3>\n<p>In Sharks, you can filter for specific rows of a DataFrame by passing in a boolean Series/array to the brackets. For instance, the following will select only the rows such that <code>a</code> is greater than 10.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">s</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'a'</span><span class=\"p\">]</span> <span class=\"o\">&gt;</span> <span class=\"mi\">10</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">s</span><span class=\"p\">]</span>\n</pre>\n<h3>14. Check for simultaneous selection of rows and columns</h3>\n<h3>15. Select a single cell of data</h3>\n<p>Sharks can select a single cell of data with <code>df[rs, cs]</code>. We will assume <code>rs</code> is an integer and <code>cs</code> is either an integer or a string.</p>\n<h3>16. Simultaneously select rows as booleans, lists, or slices</h3>\n<p>Sharks can select rows and columns simultaneously with <code>df[rs, cs]</code>. We will allow <code>rs</code> to be either a single-column boolean DataFrame, a list of integers, or a slice.</p>\n<h3>17. Simultaneous selection with multiple columns as a list</h3>\n<h3>18.  Simultaneous selection with column slices</h3>\n<p>Sharks will allow  columns to be sliced with either strings or integers. The following selections will be acceptable.</p>\n<h3>19. Tab Completion for column names</h3>\n<h3>20. Create a new column or overwrite an old column</h3>\n<h3>21. <code>head</code> and <code>tail</code> methods</h3>\n<p>The <code>head</code> and <code>tail</code> methods each accept a single integer parameter <code>n</code> which is defaulted to 5.</p>\n<h3>22. Generic aggregation methods</h3>\n<p>Sharks can implement several methods that perform an aggregation. These methods all return a single value for each column. The following aggregation methods are defined.</p>\n<ul>\n<li>min</li>\n<li>max</li>\n<li>mean</li>\n<li>median</li>\n<li>sum</li>\n<li>var</li>\n<li>std</li>\n<li>all</li>\n<li>any</li>\n<li>argmax - index of the maximum</li>\n<li>argmin - index of the minimum</li>\n</ul>\n<h3>23. <code>isna</code> method</h3>\n<p>The <code>isna</code> method will return a DataFrame the same shape as the original but with boolean values for every single value. Each value will be tested whether it is missing or not. Use <code>np.isnan</code> except in the case for strings which you can use a vectorized equality expression to <code>None</code>.</p>\n<h3>24. <code>count</code> method</h3>\n<p>The <code>count</code> method returns a single-row DataFrame with the number of non-missing values for each column. You will want to use the result of <code>isna</code>.</p>\n<h3>25. <code>unique</code> method</h3>\n<p>This method will return the unique values for each column in the DataFrame. Specifically, it will return a list of one-column DataFrames of unique values in each column. If there is a single column, just return the DataFrame.</p>\n<h3>26. <code>nunique</code> method</h3>\n<p>Return a single-row DataFrame with the number of unique values for each column.</p>\n<h3>27. <code>value_counts</code> method</h3>\n<h3>28. Normalize options for <code>value_counts</code></h3>\n<h3>29. <code>rename</code> method</h3>\n<p>The <code>rename</code> method renames one or more column names. Accept a dictionary of old column names mapped to new column names. Return a DataFrame. Raise a <code>TypeError</code> if <code>columns</code> is not a dictionary.</p>\n<h3>30. <code>drop</code> method</h3>\n<p>Accept a single string or a list of column names as strings. Return a DataFrame without those columns. Raise a <code>TypeError</code> if a string or list is not provided.</p>\n<h3>31. Non-aggregation methods</h3>\n<p>There are several non-aggregation methods that function similarly. All of the following non-aggregation methods return a DataFrame that is the same shape as the origin.</p>\n<ul>\n<li><code>abs</code></li>\n<li><code>cummin</code></li>\n<li><code>cummax</code></li>\n<li><code>cumsum</code></li>\n<li><code>clip</code></li>\n<li><code>round</code></li>\n<li><code>copy</code></li>\n</ul>\n<h3>32. Arithmetic and Comparison Operators</h3>\n<p>All the common arithmetic and comparison operators will be made available to our DataFrame. For example, <code>df + 5</code> uses the plus operator to add 5 to each element of the DataFrame. Take a look at some of the following examples:</p>\n<pre><span class=\"n\">df</span> <span class=\"o\">+</span> <span class=\"mi\">5</span>\n<span class=\"n\">df</span> <span class=\"o\">-</span> <span class=\"mi\">5</span>\n<span class=\"n\">df</span> <span class=\"o\">&gt;</span> <span class=\"mi\">5</span>\n<span class=\"n\">df</span> <span class=\"o\">!=</span> <span class=\"mi\">5</span>\n<span class=\"mi\">5</span> <span class=\"o\">+</span> <span class=\"n\">df</span>\n<span class=\"mi\">5</span> <span class=\"o\">&lt;</span> <span class=\"n\">df</span>\n</pre>\n<h3>33. <code>sort_values</code> method</h3>\n<p>This method will sort the rows of the DataFrame by one or more columns. Allow the parameter <code>by</code> to be either a single column name as a string or a list of column names as strings. The DataFrame will be sorted by this column or columns.</p>\n<h3>34. <code>pivot_table</code> method</h3>\n<h3>35. Reading simple CSVs</h3>\n<p>The <code>read_csv</code> function, will read in simple comma-separated value files (CSVs) and return a DataFrame.</p>\n\n          </div>"}, "last_serial": 5831346, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "25b1f5d9156efe8271200486475b76bc", "sha256": "43cf031e2da68528baa9b352ddbe723dac4fc4847d08b604d2c8173ca213fbcc"}, "downloads": -1, "filename": "sharks-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "25b1f5d9156efe8271200486475b76bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11578, "upload_time": "2019-09-15T09:53:56", "upload_time_iso_8601": "2019-09-15T09:53:56.406802Z", "url": "https://files.pythonhosted.org/packages/40/71/1ea6c7fd369c8bcdbf640ea9aa46632f0e393dc5dfbb32d0c755b7a4f424/sharks-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2e194016b330f82504740fcb60ff1805", "sha256": "9b82c68fea1dfb52d0fa31969df09109a3f70e22d5c0ac4ee301e0b985a2e2b7"}, "downloads": -1, "filename": "sharks-1.0.1.tar.gz", "has_sig": false, "md5_digest": "2e194016b330f82504740fcb60ff1805", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13786, "upload_time": "2019-09-15T09:53:59", "upload_time_iso_8601": "2019-09-15T09:53:59.274782Z", "url": "https://files.pythonhosted.org/packages/f3/da/93ac900fc7fc6d70dc1464b8e18bf9c7968acb37a2b1e3085d1aff99a70a/sharks-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "30001b8964afaaac5ed6eeb95cc77dc6", "sha256": "730b2d818d10a436d65ca0fc0552026277b438aed3722ed325f2e7b72cce1e41"}, "downloads": -1, "filename": "sharks-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "30001b8964afaaac5ed6eeb95cc77dc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11575, "upload_time": "2019-09-15T10:08:11", "upload_time_iso_8601": "2019-09-15T10:08:11.307813Z", "url": "https://files.pythonhosted.org/packages/97/c1/6840e8b7eac7b11b40b2fe568444df4cfbe31fe497135de3b72a77c1e915/sharks-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53eac988def538c468d5d98f3e009d7d", "sha256": "073e5b0ddcca400b193f97b77bd5e737aedaa37cf60481f8f5deab73db80182b"}, "downloads": -1, "filename": "sharks-1.0.2.tar.gz", "has_sig": false, "md5_digest": "53eac988def538c468d5d98f3e009d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13770, "upload_time": "2019-09-15T10:08:12", "upload_time_iso_8601": "2019-09-15T10:08:12.901422Z", "url": "https://files.pythonhosted.org/packages/c2/1e/47803e24de2b9f5ce3f22c23be6c70439765cb7fcf406ea668b0e372ce90/sharks-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "30001b8964afaaac5ed6eeb95cc77dc6", "sha256": "730b2d818d10a436d65ca0fc0552026277b438aed3722ed325f2e7b72cce1e41"}, "downloads": -1, "filename": "sharks-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "30001b8964afaaac5ed6eeb95cc77dc6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11575, "upload_time": "2019-09-15T10:08:11", "upload_time_iso_8601": "2019-09-15T10:08:11.307813Z", "url": "https://files.pythonhosted.org/packages/97/c1/6840e8b7eac7b11b40b2fe568444df4cfbe31fe497135de3b72a77c1e915/sharks-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53eac988def538c468d5d98f3e009d7d", "sha256": "073e5b0ddcca400b193f97b77bd5e737aedaa37cf60481f8f5deab73db80182b"}, "downloads": -1, "filename": "sharks-1.0.2.tar.gz", "has_sig": false, "md5_digest": "53eac988def538c468d5d98f3e009d7d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13770, "upload_time": "2019-09-15T10:08:12", "upload_time_iso_8601": "2019-09-15T10:08:12.901422Z", "url": "https://files.pythonhosted.org/packages/c2/1e/47803e24de2b9f5ce3f22c23be6c70439765cb7fcf406ea668b0e372ce90/sharks-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:35 2020"}