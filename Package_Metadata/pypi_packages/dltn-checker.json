{"info": {"author": "Mark Baggett", "author_email": "mbagget1@utk.edu", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3.7"], "description": "======================\nDLTN Check and Harvest\n======================\n\n.. image:: https://travis-ci.org/DigitalLibraryofTennessee/check_and_harvest.png\n    :alt: TravisCI badge\n\n.. image:: https://badge.fury.io/py/dltn-checker.svg\n    :target: https://badge.fury.io/py/dltn-checker\n    :alt: PyPI badge\n\n\n-----\nAbout\n-----\n\nTests whether records from an OAI-PMH feed pass minimum requirements of DLTN and optionally harvests only the good\nrecords from a request to disk so that they can be added to Repox and included in the DPLA.\n\n-------\nInstall\n-------\n\nRunning with Builtin Argument Parsing from a CLI\n================================================\n\nIf you want to do it this way, you're going to need to clone this.  It's also suggested to  build this with pipenv.\n\n.. code-block:: console\n\n    $ git clone https://github.com/DigitalLibraryofTennessee/check_and_harvest\n    $ cd check_and_harvest\n    $ pipenv install\n    $ pipenv shell\n\nUsing OAIChecker from the dltnchecker module\n============================================\n\nIf you're cool :sunglasses: :\n\n.. code-block:: console\n\n    $ pipenv install dltn_checker\n\nOtherwise:\n\n.. code-block:: console\n\n    $ pip install dltn_checker\n\n\n------------------------------------------\nExamples with the Built In Argument Parser\n------------------------------------------\n\n1. Check for bad DC records in an entire OAI-PMH feed.\n\n.. code-block:: console\n\n    $ python run -e http://my-oai-endpoint:8080/OAIHandler -m oai_dc\n\n2. Check and harvest good DC records from an entire OAI-PMH feed.\n\n.. code-block:: console\n\n    $ python run -e http://my-oai-endpoint:8080/OAIHandler -m oai_dc -H True\n\n3. Check and harvest good xoai records from a specifc set.\n\n.. code-block:: console\n\n    $ python run -e http://my-oai-endpoint:8080/OAIHandler -m xoai -s my_awesome_xoai_set -H True\n\n4. Check and harvest good MODS records from an entire provider in Repox.\n\n.. code-block:: console\n\n    $ python run -e http://my-oai-endpoint:8080/OAIHandler -m MODS -p CrossroadstoFreedomr0 -H True\n\n----------------------------------------------------\nExamples using the OAIChecker Class from dltnchecker\n----------------------------------------------------\n\nCheck a set to see if there are any bad files in a set.\n\n.. code-block:: python\n\n    from dltnchecker.harvest import OAIChecker\n    request = OAIChecker(\"https://dpla.lib.utk.edu/repox/OAIHandler\", \"crossroads_sanitation\", \"MODS\")\n    request.list_records()\n    print(request.bad_records)\n\nBy default, this will try to download the good files to a directory called output. If you don't want to download, you\nneed to pass an additional parameter called harvest and set to False.\n\n.. code-block:: python\n\n    from dltnchecker.harvest import OAIChecker\n    request = OAIChecker(\"https://dpla.lib.utk.edu/repox/OAIHandler\", \"crossroads_sanitation\", \"MODS\", harvest=False)\n    request.list_records()\n    print(request.bad_records)\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DigitalLibraryofTennessee/check_and_harvest", "keywords": "libraries,dpla,dltn,oaipmh,aggregators", "license": "", "maintainer": "", "maintainer_email": "mbagget1@utk.edu", "name": "dltn-checker", "package_url": "https://pypi.org/project/dltn-checker/", "platform": "", "project_url": "https://pypi.org/project/dltn-checker/", "project_urls": {"Homepage": "https://github.com/DigitalLibraryofTennessee/check_and_harvest"}, "release_url": "https://pypi.org/project/dltn-checker/0.0.2/", "requires_dist": ["requests (>=2.21.0)", "xmltodict (>=0.12.0)", "lxml (>=4.3.1)", "repox (>=0.0.2)", "pyyaml (>=4.2b1)"], "requires_python": "", "summary": "a simple utility to check and harvest metadata records from an OAI request when they meet theDLTN requirements", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"TravisCI badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2bebe2634bd99cac9f6bd9f3103649a34e8b1612/68747470733a2f2f7472617669732d63692e6f72672f4469676974616c4c6962726172796f6654656e6e65737365652f636865636b5f616e645f686172766573742e706e67\">\n<a href=\"https://badge.fury.io/py/dltn-checker\" rel=\"nofollow\"><img alt=\"PyPI badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e6bbe7f4fdc563a74275258888d3183633749576/68747470733a2f2f62616467652e667572792e696f2f70792f646c746e2d636865636b65722e737667\"></a>\n<div id=\"about\">\n<h2>About</h2>\n<p>Tests whether records from an OAI-PMH feed pass minimum requirements of DLTN and optionally harvests only the good\nrecords from a request to disk so that they can be added to Repox and included in the DPLA.</p>\n</div>\n<div id=\"install\">\n<h2>Install</h2>\n<div id=\"running-with-builtin-argument-parsing-from-a-cli\">\n<h3>Running with Builtin Argument Parsing from a CLI</h3>\n<p>If you want to do it this way, you\u2019re going to need to clone this.  It\u2019s also suggested to  build this with pipenv.</p>\n<pre><span class=\"gp\">$</span> git clone https://github.com/DigitalLibraryofTennessee/check_and_harvest\n<span class=\"gp\">$</span> <span class=\"nb\">cd</span> check_and_harvest\n<span class=\"gp\">$</span> pipenv install\n<span class=\"gp\">$</span> pipenv shell\n</pre>\n</div>\n<div id=\"using-oaichecker-from-the-dltnchecker-module\">\n<h3>Using OAIChecker from the dltnchecker module</h3>\n<p>If you\u2019re cool :sunglasses: :</p>\n<pre><span class=\"gp\">$</span> pipenv install dltn_checker\n</pre>\n<p>Otherwise:</p>\n<pre><span class=\"gp\">$</span> pip install dltn_checker\n</pre>\n</div>\n</div>\n<div id=\"examples-with-the-built-in-argument-parser\">\n<h2>Examples with the Built In Argument Parser</h2>\n<ol>\n<li>Check for bad DC records in an entire OAI-PMH feed.</li>\n</ol>\n<pre><span class=\"gp\">$</span> python run -e http://my-oai-endpoint:8080/OAIHandler -m oai_dc\n</pre>\n<ol>\n<li>Check and harvest good DC records from an entire OAI-PMH feed.</li>\n</ol>\n<pre><span class=\"gp\">$</span> python run -e http://my-oai-endpoint:8080/OAIHandler -m oai_dc -H True\n</pre>\n<ol>\n<li>Check and harvest good xoai records from a specifc set.</li>\n</ol>\n<pre><span class=\"gp\">$</span> python run -e http://my-oai-endpoint:8080/OAIHandler -m xoai -s my_awesome_xoai_set -H True\n</pre>\n<ol>\n<li>Check and harvest good MODS records from an entire provider in Repox.</li>\n</ol>\n<pre><span class=\"gp\">$</span> python run -e http://my-oai-endpoint:8080/OAIHandler -m MODS -p CrossroadstoFreedomr0 -H True\n</pre>\n</div>\n<div id=\"examples-using-the-oaichecker-class-from-dltnchecker\">\n<h2>Examples using the OAIChecker Class from dltnchecker</h2>\n<p>Check a set to see if there are any bad files in a set.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dltnchecker.harvest</span> <span class=\"kn\">import</span> <span class=\"n\">OAIChecker</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">OAIChecker</span><span class=\"p\">(</span><span class=\"s2\">\"https://dpla.lib.utk.edu/repox/OAIHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"crossroads_sanitation\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MODS\"</span><span class=\"p\">)</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">list_records</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">bad_records</span><span class=\"p\">)</span>\n</pre>\n<p>By default, this will try to download the good files to a directory called output. If you don\u2019t want to download, you\nneed to pass an additional parameter called harvest and set to False.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dltnchecker.harvest</span> <span class=\"kn\">import</span> <span class=\"n\">OAIChecker</span>\n<span class=\"n\">request</span> <span class=\"o\">=</span> <span class=\"n\">OAIChecker</span><span class=\"p\">(</span><span class=\"s2\">\"https://dpla.lib.utk.edu/repox/OAIHandler\"</span><span class=\"p\">,</span> <span class=\"s2\">\"crossroads_sanitation\"</span><span class=\"p\">,</span> <span class=\"s2\">\"MODS\"</span><span class=\"p\">,</span> <span class=\"n\">harvest</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">list_records</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">bad_records</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4869855, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b96f2d15fa09a6f152c98d9f0462db05", "sha256": "d6c1d212f80db6d95e0c7d7019c7b82604ece4fe93889ac147515fcbf32e7145"}, "downloads": -1, "filename": "dltn_checker-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b96f2d15fa09a6f152c98d9f0462db05", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 5446, "upload_time": "2019-02-25T16:33:57", "upload_time_iso_8601": "2019-02-25T16:33:57.907832Z", "url": "https://files.pythonhosted.org/packages/95/f0/3b94c988b2002979104d0b2a008ceeee1a68d452cf9cd13d1617114f6608/dltn_checker-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d831b4264a186197546dfa24593ef6f", "sha256": "6c4179495ac3f69d758067a24d5c193fa7b461e3fe5f27520a1364603d5f3747"}, "downloads": -1, "filename": "dltn_checker-0.0.1.tar.gz", "has_sig": false, "md5_digest": "4d831b4264a186197546dfa24593ef6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4785, "upload_time": "2019-02-25T16:33:59", "upload_time_iso_8601": "2019-02-25T16:33:59.702407Z", "url": "https://files.pythonhosted.org/packages/91/31/614bc60153582f983edc7ab337b737519c1ef650e3cb1664c386bc3aff76/dltn_checker-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "b908383ec7683c3160c391d38802ad2f", "sha256": "bab11e305c1333dd4d665caf80c6dfae80fae8b15075325209c83f7c30ab9610"}, "downloads": -1, "filename": "dltn_checker-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b908383ec7683c3160c391d38802ad2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9149, "upload_time": "2019-02-26T14:23:32", "upload_time_iso_8601": "2019-02-26T14:23:32.157214Z", "url": "https://files.pythonhosted.org/packages/4c/7c/67ce41a8040f6f3de221c35b8763f6d196fc8f050f19405e58e79e9b1c3e/dltn_checker-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "329b31e3271898ac134f28cf315c4722", "sha256": "2151796d8aca7dd9ad5ad5f6f5de40d537e0652e62611c104ca6c90599e5dcea"}, "downloads": -1, "filename": "dltn_checker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "329b31e3271898ac134f28cf315c4722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5438, "upload_time": "2019-02-26T14:23:33", "upload_time_iso_8601": "2019-02-26T14:23:33.635887Z", "url": "https://files.pythonhosted.org/packages/7a/7c/252f4142acc4b4c21ca60f8cf30fe2a3c94759d4fea8e3a6149f5e9402b7/dltn_checker-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b908383ec7683c3160c391d38802ad2f", "sha256": "bab11e305c1333dd4d665caf80c6dfae80fae8b15075325209c83f7c30ab9610"}, "downloads": -1, "filename": "dltn_checker-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "b908383ec7683c3160c391d38802ad2f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9149, "upload_time": "2019-02-26T14:23:32", "upload_time_iso_8601": "2019-02-26T14:23:32.157214Z", "url": "https://files.pythonhosted.org/packages/4c/7c/67ce41a8040f6f3de221c35b8763f6d196fc8f050f19405e58e79e9b1c3e/dltn_checker-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "329b31e3271898ac134f28cf315c4722", "sha256": "2151796d8aca7dd9ad5ad5f6f5de40d537e0652e62611c104ca6c90599e5dcea"}, "downloads": -1, "filename": "dltn_checker-0.0.2.tar.gz", "has_sig": false, "md5_digest": "329b31e3271898ac134f28cf315c4722", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5438, "upload_time": "2019-02-26T14:23:33", "upload_time_iso_8601": "2019-02-26T14:23:33.635887Z", "url": "https://files.pythonhosted.org/packages/7a/7c/252f4142acc4b4c21ca60f8cf30fe2a3c94759d4fea8e3a6149f5e9402b7/dltn_checker-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:17 2020"}