{"info": {"author": "Antonio Cuni", "author_email": "anto.cuni@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Utilities"], "description": "fancycompleter: colorful Python TAB completion\n==============================================\n\nWhat is is?\n-----------\n\n`fancycompleter` is a module to improve your experience in Python by\nadding TAB completion to the interactive prompt. It is an extension of\nthe stdlib\\'s\n[rlcompleter](http://docs.python.org/library/rlcompleter.html) module.\n\nIts best feature is that the completions are displayed in different\ncolors, depending on their type:\n\n![image](http://bitbucket.org/antocuni/fancycompleter/raw/5bf506e05ce7/screenshot.png)\n\nIn the image above, strings are shown in green, functions in blue,\nintegers and boolean in yellows, `None` in gray, types and classes in\nfuchsia. Everything else is plain white.\n\n`fancycompleter` is compatible with Python 3. However, by default colors\ndon\\'t work on Python 3, see the section [How do I get\ncolors?](#how-do-i-get-colors) for details.\n\nOther features\n--------------\n\n-   To save space on screen, `fancycompleter` only shows the characters\n    \"after the dot\". By contrast, in the example above `rlcompleter`\n    shows everything prepended by `\"sys.\"`.\n-   If we press `<TAB>` at the beginning of the line, a real tab\n    character is inserted, instead of trying to complete. This is useful\n    when typing function bodies or multi-line statements at the prompt.\n-   Unlike `rlcompleter`, `fancycompleter` **does** complete expressions\n    containing dictionary or list indexing. For example,\n    `mydict['foo'].<TAB>` works (assuming that `mydict` is a dictionary\n    and that it contains the key `'foo'`, of course :-)).\n-   Starting from Python 2.6, if the completed name is a callable,\n    `rlcompleter` automatically adds an open parenthesis `(`. This is\n    annoying in case we do not want to really call it, so\n    `fancycompleter` disable this behaviour.\n\nInstallation\n------------\n\nFirst, install the module with `pip` or `easy_install`:\n\n    $ pip install fancycompleter\n\nThen, at the Python interactive prompt:\n\n    >>> import fancycompleter\n    >>> fancycompleter.interact(persist_history=True)\n    >>>\n\nIf you want to enable `fancycompleter` automatically at startup, you can\nadd those two lines at the end of your\n[PYTHONSTARTUP](http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP)\nscript.\n\nIf you do **not** have a `PYTHONSTARTUP` script, the\nfollowing command will create one for you in `~/python_startup.py`:\n\n    $ python -m fancycompleter install\n\nOn Windows, `install` automatically sets the `PYTHONSTARTUP` environment\nvariable. On other systems, you need to add the proper command in\n`~/.bashrc` or equivalent.\n\n**Note**: depending on your particular system, `interact` might need to\nplay dirty tricks in order to display colors, although everything should\n\"just work\". In particular, the call to `interact` should be the last\nline in the startup file, else the next lines might not be executed. See\nsection [What is really going on?](#what-is-really-going-on) for\ndetails.\n\nHow do I get colors?\n--------------------\n\nIf you are using **PyPy**, you can stop reading now, as `fancycompleter`\nwill work out of the box.\n\nIf you are using **CPython on Linux/OSX** and you installed\n`fancycompleter` with `pip` or `easy_install`, they automatically\ninstalled `pyrepl` as a requirement, and you should also get colors out\nof the box. If for some reason you don\\'t want to use `pyrepl`, you\nshould keep on reading.\n\nBy default, in CPython line input and TAB completion are handled by [GNU\nreadline](http://tiswww.case.edu/php/chet/readline/rltop.html) (at least\non Linux). However, `readline` explicitly strips escape sequences from\nthe completions, so completions with colors are not displayed correctly.\n\nThere are two ways to solve it:\n\n> -   (suggested) don\\'t use `readline` at all and rely on\n>     [pyrepl](http://codespeak.net/pyrepl/)\n> -   use a patched version of `readline` to allow colors\n\nBy default, `fancycompleter` tries to use `pyrepl` if it finds it. To\nget colors you need a recent version, \\>= 0.8.2.\n\nStarting from version 0.6.1, `fancycompleter` works also on **Windows**,\nrelying on [pyreadline](https://pypi.python.org/pypi/pyreadline). At the\nmoment of writing, the latest version of `pyreadline` is 2.1, which does\n**not** support colored completions; here is the [pull\nrequest](https://github.com/pyreadline/pyreadline/pull/48) which adds\nsupport for them. To enable colors, you can install `pyreadline` from\n[this fork](https://github.com/antocuni/pyreadline) using the following\ncommand:\n\n    pip install --upgrade https://github.com/antocuni/pyreadline/tarball/master\n\nIf you are using **Python 3**, `pyrepl` does not work, and thus is not\ninstalled. Your only option to get colors is to use a patched\n`readline`, as explained below.\n\nI really want to use readline\n-----------------------------\n\nThis method is not really recommended, but if you really want, you can\nuse use a patched readline: you can find the patches in the `misc/`\ndirectory:\n\n> -   for\n>     [readline-5.2](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-5.2.patch)\n> -   for\n>     [readline-6.0](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-6.0.patch)\n\nYou can also try one of the following precompiled versions, which has\nbeen tested on Ubuntu 10.10: remember to put them in a place where the\nlinker can find them, e.g. by setting `LD_LIBRARY_PATH`:\n\n> -   readline-6.0 for\n>     [32-bit](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-32bit)\n> -   readline-6.0 for\n>     [64-bit](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-64bit)\n\nOnce it is installed, you should double-check that you can find it, e.g.\nby running `ldd` on Python\\'s `readline.so` module:\n\n    $ ldd /usr/lib/python2.6/lib-dynload/readline.so | grep readline\n            libreadline.so.6 => /home/antocuni/local/32/lib/libreadline.so.6 (0x00ee7000)\n\nFinally, you need to force `fancycompleter` to use colors, since by\ndefault, it uses colors only with `pyrepl`: you can do it by placing a\ncustom config file in `~/.fancycompleterrc.py`. An example config file\nis\n[here](http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/fancycompleterrc.py)\n(remind that you need to put a dot in front of the filename!).\n\nCustomization\n-------------\n\nTo customize the configuration of fancycompleter, you need to put a file\nnamed `.fancycompleterrc.py` in your home directory. The file must\ncontain a class named `Config` inheriting from `DefaultConfig` and\noverridding the desired values.\n\nWhat is really going on?\n------------------------\n\nThe default and preferred way to get colors is to use `pyrepl`. However,\nthere is no way to tell CPython to use `pyrepl` instead of the built-in\nreadline at the interactive prompt: this means that even if we install\nour completer inside pyrepl\\'s readline library, the interactive prompt\nwon\\'t see it.\n\nThe issue is simply solved by avoiding to use the built-in prompt:\ninstead, we use a pure Python replacement based on\n[code.InteractiveConsole](http://docs.python.org/library/code.html#code.InteractiveConsole).\nThis brings us also some niceties, such as the ability to do multi-line\nediting of the history.\n\nThe console is automatically run by `fancycompleter.interact()`,\nfollowed by `sys.exit()`: this way, if we execute it from the script in\n`PYTHONSTARTUP`, the interpreter exits as soon as we finish the use the\nprompt (e.g. by pressing CTRL-D, or by calling `quit()`). This way, we\navoid to enter the built-in prompt and we get a behaviour which closely\nresembles the default one. This is why in this configuration lines after\n`fancycompleter.interact()` might not be run.\n\nNote that if we are using `readline` instead of `pyrepl`, the trick is\nnot needed and thus `interact()` will simply returns, letting the\nbuilt-in prompt to show up. The same is true if we are running PyPy, as\nits built-in prompt is based on pyrepl anyway.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/pdbpp/fancycompleter", "keywords": "rlcompleter prompt tab color completion", "license": "BSD", "maintainer": "Daniel Hahler", "maintainer_email": "", "name": "fancycompleter", "package_url": "https://pypi.org/project/fancycompleter/", "platform": "", "project_url": "https://pypi.org/project/fancycompleter/", "project_urls": {"Homepage": "https://github.com/pdbpp/fancycompleter"}, "release_url": "https://pypi.org/project/fancycompleter/0.9.1/", "requires_dist": ["pyrepl (>=0.8.2)", "pyreadline ; platform_system == \"Windows\""], "requires_python": "", "summary": "colorful TAB completion for Python prompt", "version": "0.9.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>fancycompleter: colorful Python TAB completion</h1>\n<h2>What is is?</h2>\n<p><code>fancycompleter</code> is a module to improve your experience in Python by\nadding TAB completion to the interactive prompt. It is an extension of\nthe stdlib's\n<a href=\"http://docs.python.org/library/rlcompleter.html\" rel=\"nofollow\">rlcompleter</a> module.</p>\n<p>Its best feature is that the completions are displayed in different\ncolors, depending on their type:</p>\n<p><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/248bc5e787e1b690a64c62d9a42113941134dc8f/687474703a2f2f6269746275636b65742e6f72672f616e746f63756e692f66616e6379636f6d706c657465722f7261772f3562663530366530356365372f73637265656e73686f742e706e67\"></p>\n<p>In the image above, strings are shown in green, functions in blue,\nintegers and boolean in yellows, <code>None</code> in gray, types and classes in\nfuchsia. Everything else is plain white.</p>\n<p><code>fancycompleter</code> is compatible with Python 3. However, by default colors\ndon't work on Python 3, see the section <a href=\"#how-do-i-get-colors\" rel=\"nofollow\">How do I get\ncolors?</a> for details.</p>\n<h2>Other features</h2>\n<ul>\n<li>To save space on screen, <code>fancycompleter</code> only shows the characters\n\"after the dot\". By contrast, in the example above <code>rlcompleter</code>\nshows everything prepended by <code>\"sys.\"</code>.</li>\n<li>If we press <code>&lt;TAB&gt;</code> at the beginning of the line, a real tab\ncharacter is inserted, instead of trying to complete. This is useful\nwhen typing function bodies or multi-line statements at the prompt.</li>\n<li>Unlike <code>rlcompleter</code>, <code>fancycompleter</code> <strong>does</strong> complete expressions\ncontaining dictionary or list indexing. For example,\n<code>mydict['foo'].&lt;TAB&gt;</code> works (assuming that <code>mydict</code> is a dictionary\nand that it contains the key <code>'foo'</code>, of course :-)).</li>\n<li>Starting from Python 2.6, if the completed name is a callable,\n<code>rlcompleter</code> automatically adds an open parenthesis <code>(</code>. This is\nannoying in case we do not want to really call it, so\n<code>fancycompleter</code> disable this behaviour.</li>\n</ul>\n<h2>Installation</h2>\n<p>First, install the module with <code>pip</code> or <code>easy_install</code>:</p>\n<pre><code>$ pip install fancycompleter\n</code></pre>\n<p>Then, at the Python interactive prompt:</p>\n<pre><code>&gt;&gt;&gt; import fancycompleter\n&gt;&gt;&gt; fancycompleter.interact(persist_history=True)\n&gt;&gt;&gt;\n</code></pre>\n<p>If you want to enable <code>fancycompleter</code> automatically at startup, you can\nadd those two lines at the end of your\n<a href=\"http://docs.python.org/using/cmdline.html#envvar-PYTHONSTARTUP\" rel=\"nofollow\">PYTHONSTARTUP</a>\nscript.</p>\n<p>If you do <strong>not</strong> have a <code>PYTHONSTARTUP</code> script, the\nfollowing command will create one for you in <code>~/python_startup.py</code>:</p>\n<pre><code>$ python -m fancycompleter install\n</code></pre>\n<p>On Windows, <code>install</code> automatically sets the <code>PYTHONSTARTUP</code> environment\nvariable. On other systems, you need to add the proper command in\n<code>~/.bashrc</code> or equivalent.</p>\n<p><strong>Note</strong>: depending on your particular system, <code>interact</code> might need to\nplay dirty tricks in order to display colors, although everything should\n\"just work\". In particular, the call to <code>interact</code> should be the last\nline in the startup file, else the next lines might not be executed. See\nsection <a href=\"#what-is-really-going-on\" rel=\"nofollow\">What is really going on?</a> for\ndetails.</p>\n<h2>How do I get colors?</h2>\n<p>If you are using <strong>PyPy</strong>, you can stop reading now, as <code>fancycompleter</code>\nwill work out of the box.</p>\n<p>If you are using <strong>CPython on Linux/OSX</strong> and you installed\n<code>fancycompleter</code> with <code>pip</code> or <code>easy_install</code>, they automatically\ninstalled <code>pyrepl</code> as a requirement, and you should also get colors out\nof the box. If for some reason you don't want to use <code>pyrepl</code>, you\nshould keep on reading.</p>\n<p>By default, in CPython line input and TAB completion are handled by <a href=\"http://tiswww.case.edu/php/chet/readline/rltop.html\" rel=\"nofollow\">GNU\nreadline</a> (at least\non Linux). However, <code>readline</code> explicitly strips escape sequences from\nthe completions, so completions with colors are not displayed correctly.</p>\n<p>There are two ways to solve it:</p>\n<blockquote>\n<ul>\n<li>(suggested) don't use <code>readline</code> at all and rely on\n<a href=\"http://codespeak.net/pyrepl/\" rel=\"nofollow\">pyrepl</a></li>\n<li>use a patched version of <code>readline</code> to allow colors</li>\n</ul>\n</blockquote>\n<p>By default, <code>fancycompleter</code> tries to use <code>pyrepl</code> if it finds it. To\nget colors you need a recent version, &gt;= 0.8.2.</p>\n<p>Starting from version 0.6.1, <code>fancycompleter</code> works also on <strong>Windows</strong>,\nrelying on <a href=\"https://pypi.python.org/pypi/pyreadline\" rel=\"nofollow\">pyreadline</a>. At the\nmoment of writing, the latest version of <code>pyreadline</code> is 2.1, which does\n<strong>not</strong> support colored completions; here is the <a href=\"https://github.com/pyreadline/pyreadline/pull/48\" rel=\"nofollow\">pull\nrequest</a> which adds\nsupport for them. To enable colors, you can install <code>pyreadline</code> from\n<a href=\"https://github.com/antocuni/pyreadline\" rel=\"nofollow\">this fork</a> using the following\ncommand:</p>\n<pre><code>pip install --upgrade https://github.com/antocuni/pyreadline/tarball/master\n</code></pre>\n<p>If you are using <strong>Python 3</strong>, <code>pyrepl</code> does not work, and thus is not\ninstalled. Your only option to get colors is to use a patched\n<code>readline</code>, as explained below.</p>\n<h2>I really want to use readline</h2>\n<p>This method is not really recommended, but if you really want, you can\nuse use a patched readline: you can find the patches in the <code>misc/</code>\ndirectory:</p>\n<blockquote>\n<ul>\n<li>for\n<a href=\"http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-5.2.patch\" rel=\"nofollow\">readline-5.2</a></li>\n<li>for\n<a href=\"http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/readline-escape-6.0.patch\" rel=\"nofollow\">readline-6.0</a></li>\n</ul>\n</blockquote>\n<p>You can also try one of the following precompiled versions, which has\nbeen tested on Ubuntu 10.10: remember to put them in a place where the\nlinker can find them, e.g. by setting <code>LD_LIBRARY_PATH</code>:</p>\n<blockquote>\n<ul>\n<li>readline-6.0 for\n<a href=\"http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-32bit\" rel=\"nofollow\">32-bit</a></li>\n<li>readline-6.0 for\n<a href=\"http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/libreadline.so.6-64bit\" rel=\"nofollow\">64-bit</a></li>\n</ul>\n</blockquote>\n<p>Once it is installed, you should double-check that you can find it, e.g.\nby running <code>ldd</code> on Python's <code>readline.so</code> module:</p>\n<pre><code>$ ldd /usr/lib/python2.6/lib-dynload/readline.so | grep readline\n        libreadline.so.6 =&gt; /home/antocuni/local/32/lib/libreadline.so.6 (0x00ee7000)\n</code></pre>\n<p>Finally, you need to force <code>fancycompleter</code> to use colors, since by\ndefault, it uses colors only with <code>pyrepl</code>: you can do it by placing a\ncustom config file in <code>~/.fancycompleterrc.py</code>. An example config file\nis\n<a href=\"http://bitbucket.org/antocuni/fancycompleter/src/tip/misc/fancycompleterrc.py\" rel=\"nofollow\">here</a>\n(remind that you need to put a dot in front of the filename!).</p>\n<h2>Customization</h2>\n<p>To customize the configuration of fancycompleter, you need to put a file\nnamed <code>.fancycompleterrc.py</code> in your home directory. The file must\ncontain a class named <code>Config</code> inheriting from <code>DefaultConfig</code> and\noverridding the desired values.</p>\n<h2>What is really going on?</h2>\n<p>The default and preferred way to get colors is to use <code>pyrepl</code>. However,\nthere is no way to tell CPython to use <code>pyrepl</code> instead of the built-in\nreadline at the interactive prompt: this means that even if we install\nour completer inside pyrepl's readline library, the interactive prompt\nwon't see it.</p>\n<p>The issue is simply solved by avoiding to use the built-in prompt:\ninstead, we use a pure Python replacement based on\n<a href=\"http://docs.python.org/library/code.html#code.InteractiveConsole\" rel=\"nofollow\">code.InteractiveConsole</a>.\nThis brings us also some niceties, such as the ability to do multi-line\nediting of the history.</p>\n<p>The console is automatically run by <code>fancycompleter.interact()</code>,\nfollowed by <code>sys.exit()</code>: this way, if we execute it from the script in\n<code>PYTHONSTARTUP</code>, the interpreter exits as soon as we finish the use the\nprompt (e.g. by pressing CTRL-D, or by calling <code>quit()</code>). This way, we\navoid to enter the built-in prompt and we get a behaviour which closely\nresembles the default one. This is why in this configuration lines after\n<code>fancycompleter.interact()</code> might not be run.</p>\n<p>Note that if we are using <code>readline</code> instead of <code>pyrepl</code>, the trick is\nnot needed and thus <code>interact()</code> will simply returns, letting the\nbuilt-in prompt to show up. The same is true if we are running PyPy, as\nits built-in prompt is based on pyrepl anyway.</p>\n\n          </div>"}, "last_serial": 6568590, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "79914572b154df0d606b5a4632d3334f", "sha256": "4a56ba89d632f7e15a90d8f004e6be8f15f7ace7b5b031e84d5413c111e2b41c"}, "downloads": -1, "filename": "fancycompleter-0.1.tar.gz", "has_sig": false, "md5_digest": "79914572b154df0d606b5a4632d3334f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7642, "upload_time": "2010-11-16T00:46:05", "upload_time_iso_8601": "2010-11-16T00:46:05.773010Z", "url": "https://files.pythonhosted.org/packages/89/95/de1fdd7f7aeabfdf5fb1d6d70109b9c1ca03495fb3ca538c6bb302412a0f/fancycompleter-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "10675269807dea8300a42240c6586965", "sha256": "b0e4257e74f96ce2f3dfadd6b6f9e53862d1abed3561d8721a3c8069b5fd19e6"}, "downloads": -1, "filename": "fancycompleter-0.2.tar.gz", "has_sig": false, "md5_digest": "10675269807dea8300a42240c6586965", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8030, "upload_time": "2010-11-22T22:57:41", "upload_time_iso_8601": "2010-11-22T22:57:41.567125Z", "url": "https://files.pythonhosted.org/packages/80/ce/c4df914fb9cbe8767bf2d0c612cf77c0110e36e1a824fc43310625df3217/fancycompleter-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "10078d2e01084529865bd5281b5e6845", "sha256": "de0a0b1866672a9aa7b6825610a92475fd8531f20579bdcf015c38d31ebb2479"}, "downloads": -1, "filename": "fancycompleter-0.3.tar.gz", "has_sig": false, "md5_digest": "10078d2e01084529865bd5281b5e6845", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8414, "upload_time": "2012-02-16T21:36:40", "upload_time_iso_8601": "2012-02-16T21:36:40.704366Z", "url": "https://files.pythonhosted.org/packages/90/69/5692ebcfa9ab4c553f1305ae98834db8f1c7b50ad69ce4c58b6d7c372e6b/fancycompleter-0.3.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "44667c62c6db6318ca6482f3e0781d31", "sha256": "13e25da511c011cb48c8c59fd408774f0329b36d01ba7da8add486ae05b278d7"}, "downloads": -1, "filename": "fancycompleter-0.4.tar.gz", "has_sig": false, "md5_digest": "44667c62c6db6318ca6482f3e0781d31", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8435, "upload_time": "2012-03-16T15:50:59", "upload_time_iso_8601": "2012-03-16T15:50:59.510718Z", "url": "https://files.pythonhosted.org/packages/4f/80/c1ffb3484f344fe52cc674dae6aaeea1c5f729b548dd5b07d4a80fcfa6ea/fancycompleter-0.4.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "5eacad3b56b3b6a8435af44df7899e65", "sha256": "1e4b811dba3af37697719974cb2e9d0cc58ec828c867be3b6aea2db412bb55c0"}, "downloads": -1, "filename": "fancycompleter-0.5.tar.gz", "has_sig": false, "md5_digest": "5eacad3b56b3b6a8435af44df7899e65", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8569, "upload_time": "2016-04-29T15:57:18", "upload_time_iso_8601": "2016-04-29T15:57:18.658516Z", "url": "https://files.pythonhosted.org/packages/2d/4c/753646af3c4eafc6a4e4a0886f1becd09ddb3bb179bd3c350d8ac357b29a/fancycompleter-0.5.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "9c4a2c4b1931f182f41ddf35ea100bf9", "sha256": "25626b06c938e69a990d006e3bc9acfbc3dc1b3f3548a6d25b22f0c46ecb8bed"}, "downloads": -1, "filename": "fancycompleter-0.6.tar.gz", "has_sig": false, "md5_digest": "9c4a2c4b1931f182f41ddf35ea100bf9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 512717, "upload_time": "2016-11-25T17:20:16", "upload_time_iso_8601": "2016-11-25T17:20:16.381675Z", "url": "https://files.pythonhosted.org/packages/b8/d0/bcdf0915b527e70678274722a4be9a1cf50019ca0859f477f195d3658108/fancycompleter-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "c5f01df94253039d8067451e03d6ebfa", "sha256": "9bc54343ca238715015ed35e7b4527edb51a9d2773c0f800def435a39d835708"}, "downloads": -1, "filename": "fancycompleter-0.6.1.tar.gz", "has_sig": false, "md5_digest": "c5f01df94253039d8067451e03d6ebfa", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 512775, "upload_time": "2016-11-25T17:35:35", "upload_time_iso_8601": "2016-11-25T17:35:35.301932Z", "url": "https://files.pythonhosted.org/packages/3c/69/47d933902f50658de6cdfbd2c55adfdcebea10682f45eba143b53a4ce2eb/fancycompleter-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "b892e4e21a2cb8f5f2bff26be5a5b17b", "sha256": "fd091a7e7b13cb330cdabe7bf4ffe95a0f8b48b2fa8fa08a4b940982a729039b"}, "downloads": -1, "filename": "fancycompleter-0.6.2.tar.gz", "has_sig": false, "md5_digest": "b892e4e21a2cb8f5f2bff26be5a5b17b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 512749, "upload_time": "2016-11-26T10:37:34", "upload_time_iso_8601": "2016-11-26T10:37:34.518656Z", "url": "https://files.pythonhosted.org/packages/ce/5b/275f85f8ca2769d8b485927048c25d679e140f03e38305692dd789f0a260/fancycompleter-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "1a888cb86cbcfa41dcf73b50582cd5ec", "sha256": "7b1b0e51389ccf2b8799f1f90bafa177e3f8baa72a8eb11f5ce17ec1d348a089"}, "downloads": -1, "filename": "fancycompleter-0.6.3.tar.gz", "has_sig": false, "md5_digest": "1a888cb86cbcfa41dcf73b50582cd5ec", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 514280, "upload_time": "2016-11-30T00:31:17", "upload_time_iso_8601": "2016-11-30T00:31:17.522778Z", "url": "https://files.pythonhosted.org/packages/00/b2/1df669e1b76906387831b979a693dea5576a0e282188755744443ea7c465/fancycompleter-0.6.3.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "fc140f78fa6afe923698cf469df42abd", "sha256": "5044bf91766dde3addfea81aaf36bacce89e1a872a10567f57e51f981c531eb7"}, "downloads": -1, "filename": "fancycompleter-0.7.tar.gz", "has_sig": false, "md5_digest": "fc140f78fa6afe923698cf469df42abd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 514584, "upload_time": "2016-11-30T15:03:50", "upload_time_iso_8601": "2016-11-30T15:03:50.845115Z", "url": "https://files.pythonhosted.org/packages/93/33/0fc5fd5ffcd05e60af4f923d0d722e280a3ea348c00f25d0081c794e075c/fancycompleter-0.7.tar.gz", "yanked": false}], "0.8": [{"comment_text": "", "digests": {"md5": "50d29d8b1671f4bfb76dd3d3fa5e6fea", "sha256": "d2522f1f3512371f295379c4c0d1962de06762eb586c199620a2a5d423539b12"}, "downloads": -1, "filename": "fancycompleter-0.8.tar.gz", "has_sig": false, "md5_digest": "50d29d8b1671f4bfb76dd3d3fa5e6fea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 514982, "upload_time": "2017-10-26T06:12:24", "upload_time_iso_8601": "2017-10-26T06:12:24.475455Z", "url": "https://files.pythonhosted.org/packages/fd/e3/da39a6cfaffe578a01221261ac1d5d99c48d44f6377ff0de3a12dd332cec/fancycompleter-0.8.tar.gz", "yanked": false}], "0.9.0": [{"comment_text": "", "digests": {"md5": "a8c208779d8fd49db33cd084c696eb08", "sha256": "c36a55eb2ecf8a35e6e1d827ce26abc419e093765223f110f4c66f8f534fbd84"}, "downloads": -1, "filename": "fancycompleter-0.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a8c208779d8fd49db33cd084c696eb08", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9698, "upload_time": "2020-02-04T05:57:33", "upload_time_iso_8601": "2020-02-04T05:57:33.371281Z", "url": "https://files.pythonhosted.org/packages/41/95/5c160d1045b5b24f81716799e5b56e172f60b632621a20dd2770bd144f8c/fancycompleter-0.9.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bcef3de6b10b25c6a9fd2ea5bd40d716", "sha256": "19b56fed31f345ea9d671c58f691033fe8dc226c8bec44d0cab861f37d1472c1"}, "downloads": -1, "filename": "fancycompleter-0.9.0.tar.gz", "has_sig": false, "md5_digest": "bcef3de6b10b25c6a9fd2ea5bd40d716", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10880, "upload_time": "2020-02-04T05:57:34", "upload_time_iso_8601": "2020-02-04T05:57:34.643085Z", "url": "https://files.pythonhosted.org/packages/04/bc/f52933c756401f4e0073cb5f6136a7a7b040a20d6f756d133fc2489b26b7/fancycompleter-0.9.0.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "2009e783d60c9c1f80d299db96fe7faf", "sha256": "dd076bca7d9d524cc7f25ec8f35ef95388ffef9ef46def4d3d25e9b044ad7080"}, "downloads": -1, "filename": "fancycompleter-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2009e783d60c9c1f80d299db96fe7faf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9681, "upload_time": "2020-02-04T13:30:08", "upload_time_iso_8601": "2020-02-04T13:30:08.106140Z", "url": "https://files.pythonhosted.org/packages/38/ef/c08926112034d017633f693d3afc8343393a035134a29dfc12dcd71b0375/fancycompleter-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43a27912077813bd268809246b23fdc6", "sha256": "09e0feb8ae242abdfd7ef2ba55069a46f011814a80fe5476be48f51b00247272"}, "downloads": -1, "filename": "fancycompleter-0.9.1.tar.gz", "has_sig": false, "md5_digest": "43a27912077813bd268809246b23fdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10866, "upload_time": "2020-02-04T13:30:09", "upload_time_iso_8601": "2020-02-04T13:30:09.183788Z", "url": "https://files.pythonhosted.org/packages/a9/95/649d135442d8ecf8af5c7e235550c628056423c96c4bc6787348bdae9248/fancycompleter-0.9.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2009e783d60c9c1f80d299db96fe7faf", "sha256": "dd076bca7d9d524cc7f25ec8f35ef95388ffef9ef46def4d3d25e9b044ad7080"}, "downloads": -1, "filename": "fancycompleter-0.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2009e783d60c9c1f80d299db96fe7faf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9681, "upload_time": "2020-02-04T13:30:08", "upload_time_iso_8601": "2020-02-04T13:30:08.106140Z", "url": "https://files.pythonhosted.org/packages/38/ef/c08926112034d017633f693d3afc8343393a035134a29dfc12dcd71b0375/fancycompleter-0.9.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "43a27912077813bd268809246b23fdc6", "sha256": "09e0feb8ae242abdfd7ef2ba55069a46f011814a80fe5476be48f51b00247272"}, "downloads": -1, "filename": "fancycompleter-0.9.1.tar.gz", "has_sig": false, "md5_digest": "43a27912077813bd268809246b23fdc6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10866, "upload_time": "2020-02-04T13:30:09", "upload_time_iso_8601": "2020-02-04T13:30:09.183788Z", "url": "https://files.pythonhosted.org/packages/a9/95/649d135442d8ecf8af5c7e235550c628056423c96c4bc6787348bdae9248/fancycompleter-0.9.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:48 2020"}