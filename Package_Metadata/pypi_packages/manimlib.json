{"info": {"author": "Grant Sanderson", "author_email": "grant@3blue1brown.com", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"logo/cropped.png\"/>\n\n[![Build Status](https://travis-ci.org/3b1b/manim.svg?branch=master)](https://travis-ci.org/3b1b/manim)\n[![Documentation](https://img.shields.io/badge/docs-EulerTour-blue.svg)](https://www.eulertour.com/learn/manim/)\n[![MIT License](https://img.shields.io/badge/license-MIT-blue.svg?style=flat)](http://choosealicense.com/licenses/mit/)\n[![Manim Subreddit](https://img.shields.io/reddit/subreddit-subscribers/manim.svg?color=ff4301&label=reddit)](https://www.reddit.com/r/manim/)\n[![Manim Discord](https://img.shields.io/discord/581738731934056449.svg?label=discord)](https://discord.gg/mMRrZQW)\n\nManim is an animation engine for explanatory math videos. It's used to create precise animations programmatically, as seen in the videos at [3Blue1Brown](https://www.3blue1brown.com/).\n\n## Installation\nManim runs on python 3.7. You can install it from PyPI via pip\n\n```sh\npip3 install manimlib\n```\n\nSystem requirements are [cairo](https://www.cairographics.org), [ffmpeg](https://www.ffmpeg.org), [sox](http://sox.sourceforge.net), [latex](https://www.latex-project.org) (optional, if you want to use LaTeX).\n\nYou can now use it via the `manim` command. For example:\n\n```sh\nmanim my_project.py MyScene\n```\n\nFor more options, take a look at the \u201cUsing manim\u201c sections further below.\n\n### Directly\n\nIf you want to hack on manimlib itself, clone this repository and in that directory execute:\n\n```sh\n# Install python requirements\npython3 -m pip install -r requirements.txt\n\n# Try it out\npython3 ./manim.py example_scenes.py SquareToCircle -pl\n```\n\n### Directly (Windows)\n1. [Install FFmpeg](https://www.wikihow.com/Install-FFmpeg-on-Windows).\n2. Install Cairo. Download the wheel from https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo. For most users, ``pycairo\u20111.18.0\u2011cp37\u2011cp37m\u2011win32.whl`` will do fine.\n    ```sh\n    pip3 install C:\\path\\to\\wheel\\pycairo\u20111.18.0\u2011cp37\u2011cp37m\u2011win32.whl\n    ```\n3. Install a LaTeX distribution. [MiKTeX](https://miktex.org/download) is recommended.\n\n4. [Install SoX](https://sourceforge.net/projects/sox/files/sox/).\n\n5. Install the remaining Python packages. Make sure that ``pycairo==1.17.1`` is changed to ``pycairo==1.18.0`` in requirements.txt.\n    ```sh\n    git clone https://github.com/3b1b/manim.git\n    cd manim\n    pip3 install -r requirements.txt\n    python3 manim.py example_scenes.py SquareToCircle -pl\n    ```\n\n\n## Anaconda Install\n\n* Install sox and latex as above. \n* Create a conda environment using `conda env create -f environment.yml`\n* **WINDOWS ONLY** Install `pyreadline` via `pip install pyreadline`. \n\n\n### Using `virtualenv` and `virtualenvwrapper`\nAfter installing `virtualenv` and `virtualenvwrapper`\n```sh\ngit clone https://github.com/3b1b/manim.git\nmkvirtualenv -a manim -r requirements.txt manim\npython3 -m manim example_scenes.py SquareToCircle -pl\n```\n\n### Using Docker\nSince it's a bit tricky to get all the dependencies set up just right, there is a Dockerfile and Compose file provided in this repo as well as [a premade image on Docker Hub](https://hub.docker.com/r/eulertour/manim/tags/). The Dockerfile contains instructions on how to build a manim image, while the Compose file contains instructions on how to run the image.\n\nThe prebuilt container image has manin repository included.\n`INPUT_PATH` is where the container looks for scene files. You must set the `INPUT_PATH`\nenvironment variable to the absolute path containing your scene file and the\n`OUTPUT_PATH` environment variable to the directory where you want media to be written.\n\n1. [Install Docker](https://docs.docker.com)\n2. [Install Docker Compose](https://docs.docker.com/compose/install/)\n3. Render an animation\n```sh\nINPUT_PATH=/path/to/dir/containing/source/code \\\nOUTPUT_PATH=/path/to/output/ \\\ndocker-compose run manim example_scenes.py SquareToCircle -l\n```\nThe command needs to be run as root if your username is not in the docker group.\n\nYou can replace `example.scenes.py` with any relative path from your `INPUT_PATH`.\n\n<img src=./manim_docker_diagram.png/>\n\nAfter running the output will say files ready at `/tmp/output/`, which refers to path inside the container. Your OUTPUT_PATH is bind mounted to this `/tmp/output` so any changes made by the container to `/tmp/output` will be mirrored on your OUTPUT_PATH. `/media/` will be created in `OUTPUT_PATH`.\n\n`-p` won't work as manim would look for video player in the container system, which it does not have.\n\nThe first time you execute the above command, Docker will pull the image from Docker Hub and cache it. Any subsequent runs until the image is evicted will use the cached image.\nNote that the image doesn't have any development tools installed and can't preview animations. Its purpose is building and testing only.\n\n## Using manim\nTry running the following:\n```sh\npython3 -m manim example_scenes.py SquareToCircle -pl\n```\nThe `-p` flag in the command above is for previewing, meaning the video file will automatically open when it is done rendering. The `-l` flag is for a faster rendering at a lower quality.\n\nSome other useful flags include:\n\n* `-s` to skip to the end and just show the final frame.\n* `-n <number>` to skip ahead to the `n`'th animation of a scene.\n* `-f` to show the file in finder (for OSX).\n\nSet `MEDIA_DIR` environment variable to specify where the image and animation files will be written.\n\nLook through the `old_projects` folder to see the code for previous 3b1b videos.  Note, however, that developments are often made to the library without considering backwards compatibility with those old projects.  To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.\n\nWhile developing a scene, the `-sp` flags are helpful to just see what things look like at the end without having to generate the full animation.  It can also be helpful to use the `-n` flag to skip over some number of animations.\n\n### Documentation\nDocumentation is in progress at [manim.readthedocs.io](https://manim.readthedocs.io).\n\n### Walkthrough\nTodd Zimmerman put together a [tutorial](https://talkingphysics.wordpress.com/2019/01/08/getting-started-animating-with-manim-and-python-3-7/) on getting started with manim, which has been updated to run on python 3.7.\n\n### Live Streaming\nTo live stream your animations, simply run manim with the `--livestream` option.\n\n```sh\n> python -m manim --livestream\nWriting to media/videos/scene/scene/1080p30/LiveStreamTemp.mp4\n\nManim is now running in streaming mode. Stream animations by passing\nthem to manim.play(), e.g.\n>>> c = Circle()\n>>> manim.play(ShowCreation(c))\n\n>>>\n```\n\nIt is also possible to stream directly to Twitch. To do that simply pass\n--livestream and --to-twitch to manim and specify the stream key with\n--with-key. Then when you follow the above example the stream will directly\nstart on your Twitch channel (with no audio support).\n\n\n## Contributing\nIs always welcome. In particular, there is a dire need for tests and documentation.\n\n\n## License\nAll files in the directories active_projects and old_projects, which by and large generate the visuals for 3b1b videos, are copyright 3Blue1Brown.\n\nThe general purpose animation code found in the remainder of the repository, on the other hand, is under the MIT license.", "description_content_type": "text/markdown; charset=UTF-8", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/3b1b/manim", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "manimlib", "package_url": "https://pypi.org/project/manimlib/", "platform": "", "project_url": "https://pypi.org/project/manimlib/", "project_urls": {"Bug Tracker": "https://github.com/3b1b/manim/issues", "Documentation": "https://eulertour.com/learn/manim", "Homepage": "https://github.com/3b1b/manim", "Source Code": "https://github.com/3b1b/manim"}, "release_url": "https://pypi.org/project/manimlib/0.1.10/", "requires_dist": null, "requires_python": "", "summary": "Animation engine for explanatory math videos", "version": "0.1.10", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1346e8bef7074c3a5f6c1b847fb9a2054b0dfc00/6c6f676f2f63726f707065642e706e67\">\n<p><a href=\"https://travis-ci.org/3b1b/manim\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/38ec97c17847ae3cbb13563564cb74f581e83bdd/68747470733a2f2f7472617669732d63692e6f72672f336231622f6d616e696d2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://www.eulertour.com/learn/manim/\" rel=\"nofollow\"><img alt=\"Documentation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/46d64f2e09fe62e84c4e94a34a3cccf9c2b953d3/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f646f63732d45756c6572546f75722d626c75652e737667\"></a>\n<a href=\"http://choosealicense.com/licenses/mit/\" rel=\"nofollow\"><img alt=\"MIT License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9e5be039daf9eba6b6bc47b88defd227ac24d66b/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d626c75652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://www.reddit.com/r/manim/\" rel=\"nofollow\"><img alt=\"Manim Subreddit\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/078fdecb363f50b67bf15ee958d737f3547c97a9/68747470733a2f2f696d672e736869656c64732e696f2f7265646469742f7375627265646469742d73756273637269626572732f6d616e696d2e7376673f636f6c6f723d666634333031266c6162656c3d726564646974\"></a>\n<a href=\"https://discord.gg/mMRrZQW\" rel=\"nofollow\"><img alt=\"Manim Discord\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ab5b8015de93002c81db728bff474434ec224e2/68747470733a2f2f696d672e736869656c64732e696f2f646973636f72642f3538313733383733313933343035363434392e7376673f6c6162656c3d646973636f7264\"></a></p>\n<p>Manim is an animation engine for explanatory math videos. It's used to create precise animations programmatically, as seen in the videos at <a href=\"https://www.3blue1brown.com/\" rel=\"nofollow\">3Blue1Brown</a>.</p>\n<h2>Installation</h2>\n<p>Manim runs on python 3.7. You can install it from PyPI via pip</p>\n<pre>pip3 install manimlib\n</pre>\n<p>System requirements are <a href=\"https://www.cairographics.org\" rel=\"nofollow\">cairo</a>, <a href=\"https://www.ffmpeg.org\" rel=\"nofollow\">ffmpeg</a>, <a href=\"http://sox.sourceforge.net\" rel=\"nofollow\">sox</a>, <a href=\"https://www.latex-project.org\" rel=\"nofollow\">latex</a> (optional, if you want to use LaTeX).</p>\n<p>You can now use it via the <code>manim</code> command. For example:</p>\n<pre>manim my_project.py MyScene\n</pre>\n<p>For more options, take a look at the \u201cUsing manim\u201c sections further below.</p>\n<h3>Directly</h3>\n<p>If you want to hack on manimlib itself, clone this repository and in that directory execute:</p>\n<pre><span class=\"c1\"># Install python requirements</span>\npython3 -m pip install -r requirements.txt\n\n<span class=\"c1\"># Try it out</span>\npython3 ./manim.py example_scenes.py SquareToCircle -pl\n</pre>\n<h3>Directly (Windows)</h3>\n<ol>\n<li>\n<p><a href=\"https://www.wikihow.com/Install-FFmpeg-on-Windows\" rel=\"nofollow\">Install FFmpeg</a>.</p>\n</li>\n<li>\n<p>Install Cairo. Download the wheel from <a href=\"https://www.lfd.uci.edu/%7Egohlke/pythonlibs/#pycairo\" rel=\"nofollow\">https://www.lfd.uci.edu/~gohlke/pythonlibs/#pycairo</a>. For most users, <code>pycairo\u20111.18.0\u2011cp37\u2011cp37m\u2011win32.whl</code> will do fine.</p>\n<pre>pip3 install C:<span class=\"se\">\\p</span>ath<span class=\"se\">\\t</span>o<span class=\"se\">\\w</span>heel<span class=\"se\">\\p</span>ycairo\u20111.18.0\u2011cp37\u2011cp37m\u2011win32.whl\n</pre>\n</li>\n<li>\n<p>Install a LaTeX distribution. <a href=\"https://miktex.org/download\" rel=\"nofollow\">MiKTeX</a> is recommended.</p>\n</li>\n<li>\n<p><a href=\"https://sourceforge.net/projects/sox/files/sox/\" rel=\"nofollow\">Install SoX</a>.</p>\n</li>\n<li>\n<p>Install the remaining Python packages. Make sure that <code>pycairo==1.17.1</code> is changed to <code>pycairo==1.18.0</code> in requirements.txt.</p>\n<pre>git clone https://github.com/3b1b/manim.git\n<span class=\"nb\">cd</span> manim\npip3 install -r requirements.txt\npython3 manim.py example_scenes.py SquareToCircle -pl\n</pre>\n</li>\n</ol>\n<h2>Anaconda Install</h2>\n<ul>\n<li>Install sox and latex as above.</li>\n<li>Create a conda environment using <code>conda env create -f environment.yml</code></li>\n<li><strong>WINDOWS ONLY</strong> Install <code>pyreadline</code> via <code>pip install pyreadline</code>.</li>\n</ul>\n<h3>Using <code>virtualenv</code> and <code>virtualenvwrapper</code></h3>\n<p>After installing <code>virtualenv</code> and <code>virtualenvwrapper</code></p>\n<pre>git clone https://github.com/3b1b/manim.git\nmkvirtualenv -a manim -r requirements.txt manim\npython3 -m manim example_scenes.py SquareToCircle -pl\n</pre>\n<h3>Using Docker</h3>\n<p>Since it's a bit tricky to get all the dependencies set up just right, there is a Dockerfile and Compose file provided in this repo as well as <a href=\"https://hub.docker.com/r/eulertour/manim/tags/\" rel=\"nofollow\">a premade image on Docker Hub</a>. The Dockerfile contains instructions on how to build a manim image, while the Compose file contains instructions on how to run the image.</p>\n<p>The prebuilt container image has manin repository included.\n<code>INPUT_PATH</code> is where the container looks for scene files. You must set the <code>INPUT_PATH</code>\nenvironment variable to the absolute path containing your scene file and the\n<code>OUTPUT_PATH</code> environment variable to the directory where you want media to be written.</p>\n<ol>\n<li><a href=\"https://docs.docker.com\" rel=\"nofollow\">Install Docker</a></li>\n<li><a href=\"https://docs.docker.com/compose/install/\" rel=\"nofollow\">Install Docker Compose</a></li>\n<li>Render an animation</li>\n</ol>\n<pre><span class=\"nv\">INPUT_PATH</span><span class=\"o\">=</span>/path/to/dir/containing/source/code <span class=\"se\">\\</span>\n<span class=\"nv\">OUTPUT_PATH</span><span class=\"o\">=</span>/path/to/output/ <span class=\"se\">\\</span>\ndocker-compose run manim example_scenes.py SquareToCircle -l\n</pre>\n<p>The command needs to be run as root if your username is not in the docker group.</p>\n<p>You can replace <code>example.scenes.py</code> with any relative path from your <code>INPUT_PATH</code>.</p>\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/92bb373d317f7f772acc2e06cce3335ee11304d3/2e2f6d616e696d5f646f636b65725f6469616772616d2e706e672f\">\n<p>After running the output will say files ready at <code>/tmp/output/</code>, which refers to path inside the container. Your OUTPUT_PATH is bind mounted to this <code>/tmp/output</code> so any changes made by the container to <code>/tmp/output</code> will be mirrored on your OUTPUT_PATH. <code>/media/</code> will be created in <code>OUTPUT_PATH</code>.</p>\n<p><code>-p</code> won't work as manim would look for video player in the container system, which it does not have.</p>\n<p>The first time you execute the above command, Docker will pull the image from Docker Hub and cache it. Any subsequent runs until the image is evicted will use the cached image.\nNote that the image doesn't have any development tools installed and can't preview animations. Its purpose is building and testing only.</p>\n<h2>Using manim</h2>\n<p>Try running the following:</p>\n<pre>python3 -m manim example_scenes.py SquareToCircle -pl\n</pre>\n<p>The <code>-p</code> flag in the command above is for previewing, meaning the video file will automatically open when it is done rendering. The <code>-l</code> flag is for a faster rendering at a lower quality.</p>\n<p>Some other useful flags include:</p>\n<ul>\n<li><code>-s</code> to skip to the end and just show the final frame.</li>\n<li><code>-n &lt;number&gt;</code> to skip ahead to the <code>n</code>'th animation of a scene.</li>\n<li><code>-f</code> to show the file in finder (for OSX).</li>\n</ul>\n<p>Set <code>MEDIA_DIR</code> environment variable to specify where the image and animation files will be written.</p>\n<p>Look through the <code>old_projects</code> folder to see the code for previous 3b1b videos.  Note, however, that developments are often made to the library without considering backwards compatibility with those old projects.  To run an old project with a guarantee that it will work, you will have to go back to the commit which completed that project.</p>\n<p>While developing a scene, the <code>-sp</code> flags are helpful to just see what things look like at the end without having to generate the full animation.  It can also be helpful to use the <code>-n</code> flag to skip over some number of animations.</p>\n<h3>Documentation</h3>\n<p>Documentation is in progress at <a href=\"https://manim.readthedocs.io\" rel=\"nofollow\">manim.readthedocs.io</a>.</p>\n<h3>Walkthrough</h3>\n<p>Todd Zimmerman put together a <a href=\"https://talkingphysics.wordpress.com/2019/01/08/getting-started-animating-with-manim-and-python-3-7/\" rel=\"nofollow\">tutorial</a> on getting started with manim, which has been updated to run on python 3.7.</p>\n<h3>Live Streaming</h3>\n<p>To live stream your animations, simply run manim with the <code>--livestream</code> option.</p>\n<pre>&gt; python -m manim --livestream\nWriting to media/videos/scene/scene/1080p30/LiveStreamTemp.mp4\n\nManim is now running in streaming mode. Stream animations by passing\nthem to manim.play<span class=\"o\">()</span>, e.g.\n&gt;&gt;&gt; <span class=\"nv\">c</span> <span class=\"o\">=</span> Circle<span class=\"o\">()</span>\n&gt;&gt;&gt; manim.play<span class=\"o\">(</span>ShowCreation<span class=\"o\">(</span>c<span class=\"o\">))</span>\n\n&gt;&gt;&gt;\n</pre>\n<p>It is also possible to stream directly to Twitch. To do that simply pass\n--livestream and --to-twitch to manim and specify the stream key with\n--with-key. Then when you follow the above example the stream will directly\nstart on your Twitch channel (with no audio support).</p>\n<h2>Contributing</h2>\n<p>Is always welcome. In particular, there is a dire need for tests and documentation.</p>\n<h2>License</h2>\n<p>All files in the directories active_projects and old_projects, which by and large generate the visuals for 3b1b videos, are copyright 3Blue1Brown.</p>\n<p>The general purpose animation code found in the remainder of the repository, on the other hand, is under the MIT license.</p>\n\n          </div>"}, "last_serial": 5498978, "releases": {"0.1.10": [{"comment_text": "", "digests": {"md5": "b320b6be9afe134ac91da624a73126b3", "sha256": "895818bdc078c92f6fe64cef0ccf6314fb4364bd205e7272fc055fcff358e96d"}, "downloads": -1, "filename": "manimlib-0.1.10.tar.gz", "has_sig": false, "md5_digest": "b320b6be9afe134ac91da624a73126b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610762, "upload_time": "2019-07-08T04:50:14", "upload_time_iso_8601": "2019-07-08T04:50:14.316961Z", "url": "https://files.pythonhosted.org/packages/d1/57/1ed0a44a8b97ffa0cf3d9fa8d4bdf3742d9984fd39ff6b3291af597045ee/manimlib-0.1.10.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "f2805ce3952d42d80d77e8e47066dab4", "sha256": "e4885e4803f3e084a6aa368b4f484ac52c70658807a1b35e348de1fe6994330b"}, "downloads": -1, "filename": "manimlib-0.1.3.tar.gz", "has_sig": false, "md5_digest": "f2805ce3952d42d80d77e8e47066dab4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2108701, "upload_time": "2019-05-05T20:00:00", "upload_time_iso_8601": "2019-05-05T20:00:00.565264Z", "url": "https://files.pythonhosted.org/packages/40/7b/1d7a19daa1e04162396f9748786048700ef776866c92a1b7b0a56ca5a87e/manimlib-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "3c224383e4bc78b884d48633256c4efb", "sha256": "b2daa15f3a6d9f01ce1c0939bbecb7ef70ad4e12d47de9dddd27303d2126484a"}, "downloads": -1, "filename": "manimlib-0.1.4.tar.gz", "has_sig": false, "md5_digest": "3c224383e4bc78b884d48633256c4efb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2578904, "upload_time": "2019-05-26T00:18:03", "upload_time_iso_8601": "2019-05-26T00:18:03.481960Z", "url": "https://files.pythonhosted.org/packages/16/3d/0297d144642077f2ead2df614cfd4be1f0fbd80a174e4ff7e3234428716c/manimlib-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "81e991288d4473abff95f33135aba14c", "sha256": "f5b880389a79a83487cf8c3fc529f1c6a8905ed3058530ea35f659ae3e492bc3"}, "downloads": -1, "filename": "manimlib-0.1.5.tar.gz", "has_sig": false, "md5_digest": "81e991288d4473abff95f33135aba14c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2599351, "upload_time": "2019-05-29T01:03:30", "upload_time_iso_8601": "2019-05-29T01:03:30.413600Z", "url": "https://files.pythonhosted.org/packages/96/35/591771ec5f87c860bb94676bbfc8037b63fe8f3b8182fc696f12494ad8d7/manimlib-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "b961ebfb0d2b48dddbb9a8fff62a2a2e", "sha256": "4257c251926e6538f8c86e77db864e50bfa98ce83e168f26e35cb4089b8e2107"}, "downloads": -1, "filename": "manimlib-0.1.6.tar.gz", "has_sig": false, "md5_digest": "b961ebfb0d2b48dddbb9a8fff62a2a2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610749, "upload_time": "2019-06-23T07:20:38", "upload_time_iso_8601": "2019-06-23T07:20:38.929524Z", "url": "https://files.pythonhosted.org/packages/47/d3/af68e424414296b96bc24a33b60c6deaf512849d4300c263421645220a4f/manimlib-0.1.6.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "e10ae0bfa96f147a2721429080d8f6ca", "sha256": "9002adf6bbdc74cf62539a1860d5d8f04615db2991953d7e731e2eedc86ee60f"}, "downloads": -1, "filename": "manimlib-0.1.7.tar.gz", "has_sig": false, "md5_digest": "e10ae0bfa96f147a2721429080d8f6ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610780, "upload_time": "2019-07-04T05:53:23", "upload_time_iso_8601": "2019-07-04T05:53:23.900706Z", "url": "https://files.pythonhosted.org/packages/8d/cf/166e73552214704e93f4eff125fc5a7716a7097a6ca837ce4c8212e73933/manimlib-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "edf30b6431168e70ec4d9467719f1af6", "sha256": "eb19bbf4a1992b118f1ff873f03286561644687d6df5952b4391bb877ec02b36"}, "downloads": -1, "filename": "manimlib-0.1.8.tar.gz", "has_sig": false, "md5_digest": "edf30b6431168e70ec4d9467719f1af6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610726, "upload_time": "2019-07-07T17:14:51", "upload_time_iso_8601": "2019-07-07T17:14:51.922238Z", "url": "https://files.pythonhosted.org/packages/79/f3/c7c2b4d8a48ace3187aa0af458f3737e7e53db22ae4486b5d8a03b5f4a9f/manimlib-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "479920f3318d3baf4536b4e3777a7377", "sha256": "aa66b71ccb227d0ba653c80f02c6c615bb1744bbc212ef15c1ba458426652ecd"}, "downloads": -1, "filename": "manimlib-0.1.9.tar.gz", "has_sig": false, "md5_digest": "479920f3318d3baf4536b4e3777a7377", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610762, "upload_time": "2019-07-08T04:40:29", "upload_time_iso_8601": "2019-07-08T04:40:29.685875Z", "url": "https://files.pythonhosted.org/packages/bc/7b/26ddb7f73aae6f6127be41c762c18c57922f7ead513fedb029ea6484bfa1/manimlib-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b320b6be9afe134ac91da624a73126b3", "sha256": "895818bdc078c92f6fe64cef0ccf6314fb4364bd205e7272fc055fcff358e96d"}, "downloads": -1, "filename": "manimlib-0.1.10.tar.gz", "has_sig": false, "md5_digest": "b320b6be9afe134ac91da624a73126b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4610762, "upload_time": "2019-07-08T04:50:14", "upload_time_iso_8601": "2019-07-08T04:50:14.316961Z", "url": "https://files.pythonhosted.org/packages/d1/57/1ed0a44a8b97ffa0cf3d9fa8d4bdf3742d9984fd39ff6b3291af597045ee/manimlib-0.1.10.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:31 2020"}