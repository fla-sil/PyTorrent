{"info": {"author": "Tino Wagner", "author_email": "ich@tinowagner.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Topic :: Scientific/Engineering"], "description": "gwyfile\n=======\n\nA pure Python interface to reading and writing `Gwyddion\n<http://www.gwyddion.net>`_ files.\n\n\nUsage\n-----\n\nAt the heart of this module is the `GwyObject` class, derived from\n`collections.OrderedDict`. Gwyddion files are just serialized copies of\n`GwyObject`\\ s and its subclasses (`GwyContainer`, `GwyDataField`, ...).\n\nHere is a simple example that shows how to load a file and display a data\nchannel:\n\n.. code-block:: python\n\n    import gwyfile\n\n    # Load a Gwyddion file into memory\n    obj = gwyfile.load('test.gwy')\n    # Return a dictionary with the datafield titles as keys and the\n    # datafield objects as values.\n    channels = gwyfile.util.get_datafields(obj)\n    channel = channels['Test']\n    # Datafield objects have a `data` property to access their\n    # two-dimensional data as numpy arrays.\n    data = channel.data\n\n    # Plot the data using matplotlib.\n    import matplotlib.pyplot as plt\n    fig, ax = plt.subplots()\n    ax.imshow(data, interpolation='none', origin='upper',\n            extent=(0, channel.xreal, 0, channel.yreal))\n    plt.show()\n\nIt is also possible to manipulate and save objects:\n\n.. code-block:: python\n\n    import numpy as np\n    from gwyfile.objects import GwyContainer, GwyDataField\n    obj = GwyContainer()\n    obj['/0/data/title'] = 'Noise'\n    data = np.random.normal(size=(256, 256))\n    obj['/0/data'] = GwyDataField(data)\n    obj.tofile('noise.gwy')\n\nThe Gwyddion manual has a nice `description of the file format\n<http://gwyddion.net/documentation/user-guide-en/gwyfile-format.html>`_. See\nthere for further information on object properties.\n\n\nStatus\n------\n\n`GwyObject` serialization and deserialization should be complete. There\nare specialized subclasses for `GwyDataField` and `GwySIUnit`, but other\nconvenience wrappers e.g. for `GwyBrick` are missing.\n\n\nLicense\n-------\n\nThis project is licensed under the MIT license. See `LICENSE.rst <LICENSE.rst>`_\nfor details.\n\n\u00a9 2014-17 `Tino Wagner <http://www.tinowagner.com/>`_", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tuxu/gwyfile", "keywords": "gwyddion file format", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "gwyfile", "package_url": "https://pypi.org/project/gwyfile/", "platform": "any", "project_url": "https://pypi.org/project/gwyfile/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/tuxu/gwyfile"}, "release_url": "https://pypi.org/project/gwyfile/0.2.0/", "requires_dist": null, "requires_python": null, "summary": "Pure Python implementation of the Gwyddion file format", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>A pure Python interface to reading and writing <a href=\"http://www.gwyddion.net\" rel=\"nofollow\">Gwyddion</a> files.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>At the heart of this module is the <cite>GwyObject</cite> class, derived from\n<cite>collections.OrderedDict</cite>. Gwyddion files are just serialized copies of\n<cite>GwyObject</cite>s and its subclasses (<cite>GwyContainer</cite>, <cite>GwyDataField</cite>, \u2026).</p>\n<p>Here is a simple example that shows how to load a file and display a data\nchannel:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">gwyfile</span>\n\n<span class=\"c1\"># Load a Gwyddion file into memory</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">gwyfile</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"s1\">'test.gwy'</span><span class=\"p\">)</span>\n<span class=\"c1\"># Return a dictionary with the datafield titles as keys and the</span>\n<span class=\"c1\"># datafield objects as values.</span>\n<span class=\"n\">channels</span> <span class=\"o\">=</span> <span class=\"n\">gwyfile</span><span class=\"o\">.</span><span class=\"n\">util</span><span class=\"o\">.</span><span class=\"n\">get_datafields</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"n\">channel</span> <span class=\"o\">=</span> <span class=\"n\">channels</span><span class=\"p\">[</span><span class=\"s1\">'Test'</span><span class=\"p\">]</span>\n<span class=\"c1\"># Datafield objects have a `data` property to access their</span>\n<span class=\"c1\"># two-dimensional data as numpy arrays.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">data</span>\n\n<span class=\"c1\"># Plot the data using matplotlib.</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"n\">fig</span><span class=\"p\">,</span> <span class=\"n\">ax</span> <span class=\"o\">=</span> <span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">subplots</span><span class=\"p\">()</span>\n<span class=\"n\">ax</span><span class=\"o\">.</span><span class=\"n\">imshow</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">interpolation</span><span class=\"o\">=</span><span class=\"s1\">'none'</span><span class=\"p\">,</span> <span class=\"n\">origin</span><span class=\"o\">=</span><span class=\"s1\">'upper'</span><span class=\"p\">,</span>\n        <span class=\"n\">extent</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">xreal</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">channel</span><span class=\"o\">.</span><span class=\"n\">yreal</span><span class=\"p\">))</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>It is also possible to manipulate and save objects:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">gwyfile.objects</span> <span class=\"kn\">import</span> <span class=\"n\">GwyContainer</span><span class=\"p\">,</span> <span class=\"n\">GwyDataField</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">GwyContainer</span><span class=\"p\">()</span>\n<span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'/0/data/title'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"s1\">'Noise'</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">normal</span><span class=\"p\">(</span><span class=\"n\">size</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">256</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">))</span>\n<span class=\"n\">obj</span><span class=\"p\">[</span><span class=\"s1\">'/0/data'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">GwyDataField</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>\n<span class=\"n\">obj</span><span class=\"o\">.</span><span class=\"n\">tofile</span><span class=\"p\">(</span><span class=\"s1\">'noise.gwy'</span><span class=\"p\">)</span>\n</pre>\n<p>The Gwyddion manual has a nice <a href=\"http://gwyddion.net/documentation/user-guide-en/gwyfile-format.html\" rel=\"nofollow\">description of the file format</a>. See\nthere for further information on object properties.</p>\n</div>\n<div id=\"status\">\n<h2>Status</h2>\n<p><cite>GwyObject</cite> serialization and deserialization should be complete. There\nare specialized subclasses for <cite>GwyDataField</cite> and <cite>GwySIUnit</cite>, but other\nconvenience wrappers e.g. for <cite>GwyBrick</cite> are missing.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the MIT license. See <a href=\"LICENSE.rst\" rel=\"nofollow\">LICENSE.rst</a>\nfor details.</p>\n<p>\u00a9 2014-17 <a href=\"http://www.tinowagner.com/\" rel=\"nofollow\">Tino Wagner</a></p>\n</div>\n\n          </div>"}, "last_serial": 2653370, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "8930d9c0b3a6cc8eb04658fe6378fe07", "sha256": "83cca2b8b5283652322f98791a36fdc1375cb25ea7ba88899056e7a00069760f"}, "downloads": -1, "filename": "gwyfile-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8930d9c0b3a6cc8eb04658fe6378fe07", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8868, "upload_time": "2017-02-19T19:51:57", "upload_time_iso_8601": "2017-02-19T19:51:57.696128Z", "url": "https://files.pythonhosted.org/packages/28/a8/7e1f5105cbf8200705f130545c9ad54592c52c34717609f87570e5a5e2af/gwyfile-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a30eef80bf3620fbae8cb064e7663665", "sha256": "cf72fedd6af15c952067dbbe87978a4a6262b4e2cd3aa9f2e7bee4ced4071e40"}, "downloads": -1, "filename": "gwyfile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a30eef80bf3620fbae8cb064e7663665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21999, "upload_time": "2017-02-19T19:51:59", "upload_time_iso_8601": "2017-02-19T19:51:59.757050Z", "url": "https://files.pythonhosted.org/packages/69/48/35af6771af84d4ef3241fe1a02c41f0652a38e3ed945bbfd0ac4d7725bfd/gwyfile-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8930d9c0b3a6cc8eb04658fe6378fe07", "sha256": "83cca2b8b5283652322f98791a36fdc1375cb25ea7ba88899056e7a00069760f"}, "downloads": -1, "filename": "gwyfile-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8930d9c0b3a6cc8eb04658fe6378fe07", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 8868, "upload_time": "2017-02-19T19:51:57", "upload_time_iso_8601": "2017-02-19T19:51:57.696128Z", "url": "https://files.pythonhosted.org/packages/28/a8/7e1f5105cbf8200705f130545c9ad54592c52c34717609f87570e5a5e2af/gwyfile-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a30eef80bf3620fbae8cb064e7663665", "sha256": "cf72fedd6af15c952067dbbe87978a4a6262b4e2cd3aa9f2e7bee4ced4071e40"}, "downloads": -1, "filename": "gwyfile-0.2.0.tar.gz", "has_sig": false, "md5_digest": "a30eef80bf3620fbae8cb064e7663665", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21999, "upload_time": "2017-02-19T19:51:59", "upload_time_iso_8601": "2017-02-19T19:51:59.757050Z", "url": "https://files.pythonhosted.org/packages/69/48/35af6771af84d4ef3241fe1a02c41f0652a38e3ed945bbfd0ac4d7725bfd/gwyfile-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:04 2020"}