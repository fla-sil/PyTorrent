{"info": {"author": "Abdullah Selek", "author_email": "abdullahselek@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "mocr\n======\n\n.. image:: https://img.shields.io/pypi/v/mocr.svg\n    :target: https://pypi.org/pypi/mocr/\n\n.. image:: https://img.shields.io/pypi/pyversions/mocr.svg\n    :target: https://pypi.org/project/mocr\n\n.. image:: https://travis-ci.org/verifid/mocr.svg?branch=master\n    :target: https://travis-ci.org/verifid/mocr\n\n.. image:: https://codecov.io/gh/verifid/mocr/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/verifid/mocr\n\n\nMeaningful Optical Character Recognition from identity cards with Deep Learning.\n\nIntroduction\n============\n\n**mocr** is a library that can be used to detect meaningful optical characters from identity cards. Code base is pure ``Python`` and\nworks with 3.x versions. It has some low level dependencies such as ``Tesseract``. **mocr** uses a pre-trained east\ndetector with OpenCV and applies it's Deep Learning techniques.\n\nIt has a pre-trained east detector inside the module and a custom trained model can be given as a parameter.\n\nPrerequisites\n=============\n\n* `Tessaract <https://github.com/tesseract-ocr/tesseract>`_ must be installed on your computer before using OCR. Please check `installation link <https://github.com/tesseract-ocr/tesseract#installing-tesseract>`_ for details.\n* The other dependencies are listed on ``requirements.txt`` and will be installed when you install with pip.\n\nInstallation\n============\n\n**From source**\n\nInstall module using `pip`::\n\n    $ pip install mocr\n\nDownload the latest `mocr` library from: https://github.com/verifid/mocr\n\nInstall module using `pip`::\n\n    $ pip install -e .\n\nExtract the source distribution and run::\n\n    $ python setup.py build\n    $ python setup.py install\n\nRunning Tests\n=============\n\nThe test suite can be run against a single Python version which requires ``pip install pytest`` and optionally ``pip install pytest-cov`` (these are included if you have installed dependencies from ``requirements.testing.txt``)\n\nTo run the unit tests with a single Python version::\n\n    $ py.test -v\n\nto also run code coverage::\n\n    $ py.test -v --cov-report html --cov=mocr\n\nTo run the unit tests against a set of Python versions::\n\n    $ tox\n\nSample Usage\n============\n\n* ``text_recognition`` Initiating the ``TextRecognizer`` with identity image and then finding the texts with their frames:\n\n.. code:: python\n\n    import os\n    from mocr import TextRecognizer\n\n    image_path = os.path.join('tests', 'data/sample_uk_identity_card.png')\n    east_path = os.path.join('mocr', 'model/frozen_east_text_detection.pb')\n\n    text_recognizer = TextRecognizer(image_path, east_path)\n    (image, _, _) = text_recognizer.load_image()\n    (resized_image, ratio_height, ratio_width, _, _) = text_recognizer.resize_image(image, 320, 320)\n    (scores, geometry) = text_recognizer.geometry_score(east_path, resized_image)\n    boxes = text_recognizer.boxes(scores, geometry)\n    results = text_recognizer.get_results(boxes, image, ratio_height, ratio_width)\n\n    # results: Meaningful texts with bounding boxes\n\n* ``face_detection``:\n\n.. code:: python\n\n    from mocr import face_detection\n\n    image_path = 'YOUR_IDENTITY_IMAGE_PATH'\n    face_image = face_detection.detect_face(image_path)\n    # face_image is the byte array detected and cropped image from original image\n\nCLI\n===\n\nSample command line usage\n\n* Optical Character Recognition\n\n.. code::\n\n    python -m mocr --image tests/data/sample_uk_identity_card.png --east tests/model/frozen_east_text_detection.pb\n\n* Face detection\n\n.. code::\n\n    python -m mocr --image-face 'tests/data/sample_de_identity_card.jpg'\n\nScreenshots\n-----------\n\n**Before**\n\n|image_before|\n\n**After**\n\n|image_after|\n\n.. |image_before| image:: https://raw.githubusercontent.com/verifid/mocr/master/screenshots/sample_uk_identity_card.png\n.. |image_after| image:: https://raw.githubusercontent.com/verifid/mocr/master/screenshots/uk_identity_card_after_detection.png\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/project/mocr/", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/verifid/mocr", "keywords": "ocr,optical character recognition,identity card,deep learning,opencv,meaningful", "license": "MIT License", "maintainer": "Abdullah Selek", "maintainer_email": "abdullahselek@gmail.com", "name": "mocr", "package_url": "https://pypi.org/project/mocr/", "platform": "Any", "project_url": "https://pypi.org/project/mocr/", "project_urls": {"Download": "https://pypi.org/project/mocr/", "Homepage": "https://github.com/verifid/mocr"}, "release_url": "https://pypi.org/project/mocr/0.3.0/", "requires_dist": ["opencv-python", "opencv-contrib-python", "pillow", "pytesseract", "imutils", "numpy"], "requires_python": "", "summary": "Meaningful Optical Character Recognition from identity cards with Deep Learning.", "version": "0.3.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mocr\">\n<h2>mocr</h2>\n<a href=\"https://pypi.org/pypi/mocr/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/mocr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ea928395d53aeeeb6f6f85c5e10dfaf1bbe0d695/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6f63722e737667\"></a>\n<a href=\"https://pypi.org/project/mocr\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/mocr.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad5ab20d3dca70a5e3eb2c48305e25e56283a6c8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6f63722e737667\"></a>\n<a href=\"https://travis-ci.org/verifid/mocr\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/verifid/mocr.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/634a35939dc483719c769c8d74ff0e0b6230ad4e/68747470733a2f2f7472617669732d63692e6f72672f766572696669642f6d6f63722e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/verifid/mocr\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/verifid/mocr/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/feebd95ef97b50631f45408fee5cee9cdd88d4e3/68747470733a2f2f636f6465636f762e696f2f67682f766572696669642f6d6f63722f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<p>Meaningful Optical Character Recognition from identity cards with Deep Learning.</p>\n</div>\n<div id=\"introduction\">\n<h2>Introduction</h2>\n<p><strong>mocr</strong> is a library that can be used to detect meaningful optical characters from identity cards. Code base is pure <tt>Python</tt> and\nworks with 3.x versions. It has some low level dependencies such as <tt>Tesseract</tt>. <strong>mocr</strong> uses a pre-trained east\ndetector with OpenCV and applies it\u2019s Deep Learning techniques.</p>\n<p>It has a pre-trained east detector inside the module and a custom trained model can be given as a parameter.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<ul>\n<li><a href=\"https://github.com/tesseract-ocr/tesseract\" rel=\"nofollow\">Tessaract</a> must be installed on your computer before using OCR. Please check <a href=\"https://github.com/tesseract-ocr/tesseract#installing-tesseract\" rel=\"nofollow\">installation link</a> for details.</li>\n<li>The other dependencies are listed on <tt>requirements.txt</tt> and will be installed when you install with pip.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p><strong>From source</strong></p>\n<p>Install module using <cite>pip</cite>:</p>\n<pre>$ pip install mocr\n</pre>\n<p>Download the latest <cite>mocr</cite> library from: <a href=\"https://github.com/verifid/mocr\" rel=\"nofollow\">https://github.com/verifid/mocr</a></p>\n<p>Install module using <cite>pip</cite>:</p>\n<pre>$ pip install -e .\n</pre>\n<p>Extract the source distribution and run:</p>\n<pre>$ python setup.py build\n$ python setup.py install\n</pre>\n</div>\n<div id=\"running-tests\">\n<h2>Running Tests</h2>\n<p>The test suite can be run against a single Python version which requires <tt>pip install pytest</tt> and optionally <tt>pip install <span class=\"pre\">pytest-cov</span></tt> (these are included if you have installed dependencies from <tt>requirements.testing.txt</tt>)</p>\n<p>To run the unit tests with a single Python version:</p>\n<pre>$ py.test -v\n</pre>\n<p>to also run code coverage:</p>\n<pre>$ py.test -v --cov-report html --cov=mocr\n</pre>\n<p>To run the unit tests against a set of Python versions:</p>\n<pre>$ tox\n</pre>\n</div>\n<div id=\"sample-usage\">\n<h2>Sample Usage</h2>\n<ul>\n<li><tt>text_recognition</tt> Initiating the <tt>TextRecognizer</tt> with identity image and then finding the texts with their frames:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mocr</span> <span class=\"kn\">import</span> <span class=\"n\">TextRecognizer</span>\n\n<span class=\"n\">image_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'tests'</span><span class=\"p\">,</span> <span class=\"s1\">'data/sample_uk_identity_card.png'</span><span class=\"p\">)</span>\n<span class=\"n\">east_path</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'mocr'</span><span class=\"p\">,</span> <span class=\"s1\">'model/frozen_east_text_detection.pb'</span><span class=\"p\">)</span>\n\n<span class=\"n\">text_recognizer</span> <span class=\"o\">=</span> <span class=\"n\">TextRecognizer</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">,</span> <span class=\"n\">east_path</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">text_recognizer</span><span class=\"o\">.</span><span class=\"n\">load_image</span><span class=\"p\">()</span>\n<span class=\"p\">(</span><span class=\"n\">resized_image</span><span class=\"p\">,</span> <span class=\"n\">ratio_height</span><span class=\"p\">,</span> <span class=\"n\">ratio_width</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">_</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">text_recognizer</span><span class=\"o\">.</span><span class=\"n\">resize_image</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"mi\">320</span><span class=\"p\">,</span> <span class=\"mi\">320</span><span class=\"p\">)</span>\n<span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">geometry</span><span class=\"p\">)</span> <span class=\"o\">=</span> <span class=\"n\">text_recognizer</span><span class=\"o\">.</span><span class=\"n\">geometry_score</span><span class=\"p\">(</span><span class=\"n\">east_path</span><span class=\"p\">,</span> <span class=\"n\">resized_image</span><span class=\"p\">)</span>\n<span class=\"n\">boxes</span> <span class=\"o\">=</span> <span class=\"n\">text_recognizer</span><span class=\"o\">.</span><span class=\"n\">boxes</span><span class=\"p\">(</span><span class=\"n\">scores</span><span class=\"p\">,</span> <span class=\"n\">geometry</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">text_recognizer</span><span class=\"o\">.</span><span class=\"n\">get_results</span><span class=\"p\">(</span><span class=\"n\">boxes</span><span class=\"p\">,</span> <span class=\"n\">image</span><span class=\"p\">,</span> <span class=\"n\">ratio_height</span><span class=\"p\">,</span> <span class=\"n\">ratio_width</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># results: Meaningful texts with bounding boxes</span>\n</pre>\n<ul>\n<li><tt>face_detection</tt>:</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mocr</span> <span class=\"kn\">import</span> <span class=\"n\">face_detection</span>\n\n<span class=\"n\">image_path</span> <span class=\"o\">=</span> <span class=\"s1\">'YOUR_IDENTITY_IMAGE_PATH'</span>\n<span class=\"n\">face_image</span> <span class=\"o\">=</span> <span class=\"n\">face_detection</span><span class=\"o\">.</span><span class=\"n\">detect_face</span><span class=\"p\">(</span><span class=\"n\">image_path</span><span class=\"p\">)</span>\n<span class=\"c1\"># face_image is the byte array detected and cropped image from original image</span>\n</pre>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>Sample command line usage</p>\n<ul>\n<li>Optical Character Recognition</li>\n</ul>\n<pre>python -m mocr --image tests/data/sample_uk_identity_card.png --east tests/model/frozen_east_text_detection.pb\n</pre>\n<ul>\n<li>Face detection</li>\n</ul>\n<pre>python -m mocr --image-face 'tests/data/sample_de_identity_card.jpg'\n</pre>\n<div id=\"screenshots\">\n<h3>Screenshots</h3>\n<p><strong>Before</strong></p>\n<p><img alt=\"image_before\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/491b95f8764de4790f71532b41b74179bc18ce97/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f766572696669642f6d6f63722f6d61737465722f73637265656e73686f74732f73616d706c655f756b5f6964656e746974795f636172642e706e67\"></p>\n<p><strong>After</strong></p>\n<p><img alt=\"image_after\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/bd559e01a5ec48c0d4d4de18867c435b9de72ad1/68747470733a2f2f7261772e67697468756275736572636f6e74656e742e636f6d2f766572696669642f6d6f63722f6d61737465722f73637265656e73686f74732f756b5f6964656e746974795f636172645f61667465725f646574656374696f6e2e706e67\"></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6312908, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "d531c7ea74c0de51ac1f64e886b1d1be", "sha256": "d9ef09b619c3c69f47e90deffa500136535f3460cc7ca5c5bf9a50294c8ab043"}, "downloads": -1, "filename": "mocr-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "d531c7ea74c0de51ac1f64e886b1d1be", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5741, "upload_time": "2018-12-03T18:57:33", "upload_time_iso_8601": "2018-12-03T18:57:33.637286Z", "url": "https://files.pythonhosted.org/packages/9a/3e/d765f890753a0931b69add351d233ba5f1df77415a41ba78888ef9584ff6/mocr-0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "22d87eee081d50c34b525dfc85eaafb4", "sha256": "da0879cca6e913ac2b74e37178a9333f3acc2a145cfb7e7cb7634f924c63c1ce"}, "downloads": -1, "filename": "mocr-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "22d87eee081d50c34b525dfc85eaafb4", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6779, "upload_time": "2018-12-09T20:51:35", "upload_time_iso_8601": "2018-12-09T20:51:35.921615Z", "url": "https://files.pythonhosted.org/packages/37/19/40fb807c96e3f1eb529ebcd502a661348b3a3024e6b780e95278572bb879/mocr-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "879d720c5effeb93ff9bea7a2a7d34f7", "sha256": "8909d46dd1839b884542ce125ac3d1b29c0cf31fdcb520425f9b9a3ba1a8d247"}, "downloads": -1, "filename": "mocr-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "879d720c5effeb93ff9bea7a2a7d34f7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 145451, "upload_time": "2019-02-27T18:12:28", "upload_time_iso_8601": "2019-02-27T18:12:28.611908Z", "url": "https://files.pythonhosted.org/packages/9f/bc/a01fbc9e9a0841412dc8462afaf7d68a8314a088b30af39dd30c6b8d2698/mocr-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d1db89a945d145a1107031f2cdf2e54", "sha256": "4ade83da67fe5e50c77bd7e026edb7adbb2aa72fef56dc923db7b54ee078b532"}, "downloads": -1, "filename": "mocr-0.2.0.tar.gz", "has_sig": false, "md5_digest": "4d1db89a945d145a1107031f2cdf2e54", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 144002, "upload_time": "2019-02-27T18:12:31", "upload_time_iso_8601": "2019-02-27T18:12:31.068816Z", "url": "https://files.pythonhosted.org/packages/db/86/389a4213da1b4f8e136d2bc65e8e12bf91f8c89f665960449ba0653d09ed/mocr-0.2.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "ebebce4fc2770382b8572ddd70118d70", "sha256": "2a4fb243078ca2d1f931b230faeb9b388e586316ac21baf3c5ec383e73064cb2"}, "downloads": -1, "filename": "mocr-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ebebce4fc2770382b8572ddd70118d70", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 143862, "upload_time": "2019-07-30T07:08:43", "upload_time_iso_8601": "2019-07-30T07:08:43.901752Z", "url": "https://files.pythonhosted.org/packages/5a/5c/a4275e5cb29a043b26b253767e5ae736be1b3fb12ce9ad0f875fb7fb0597/mocr-0.2.1-py2.py3-none-any.whl", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "a7ea36c8c9f1653616b7d092d89898c5", "sha256": "2c78a2e0d098ca8281933d455234fac7cba901f8312c84d887850558fad2aefa"}, "downloads": -1, "filename": "mocr-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7ea36c8c9f1653616b7d092d89898c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145680, "upload_time": "2019-12-16T19:08:55", "upload_time_iso_8601": "2019-12-16T19:08:55.832848Z", "url": "https://files.pythonhosted.org/packages/69/bc/c3202042ac80f1af2b5540789ed0f5dd06b759d2501a226e86518e431d77/mocr-0.3.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7ea36c8c9f1653616b7d092d89898c5", "sha256": "2c78a2e0d098ca8281933d455234fac7cba901f8312c84d887850558fad2aefa"}, "downloads": -1, "filename": "mocr-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "a7ea36c8c9f1653616b7d092d89898c5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 145680, "upload_time": "2019-12-16T19:08:55", "upload_time_iso_8601": "2019-12-16T19:08:55.832848Z", "url": "https://files.pythonhosted.org/packages/69/bc/c3202042ac80f1af2b5540789ed0f5dd06b759d2501a226e86518e431d77/mocr-0.3.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:53:00 2020"}