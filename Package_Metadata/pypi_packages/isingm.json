{"info": {"author": "pacidus", "author_email": "pacidus@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "![wheel](https://img.shields.io/pypi/wheel/isingm?style=plastic)\n![implementation](https://img.shields.io/pypi/implementation/isingm)\n![python](https://img.shields.io/pypi/pyversions/isingm)\n![downloads](https://img.shields.io/pypi/dm/isingm)\n\n# Ising\nA pythonic implementation of the Ising model.\n\nCheck the example for more.\n\n\n## Lattice\nThis is the main place of the Ising model,\nwe have to initialize it with a tuple of the lattice shape that can be of any dimension or size.\nThe lattice can be initialized with a random state (you can choose the state ratio up) or all in a state 1 or -1.\n\n### arguments:\n\n- ##### shape:\n\n>   type: **tuple(int)**\n>\n>   The shape of the lattice is tested for 1 to 4 dimension.\n>   Every values of shape must be > 0 \n\n#### Optionnal:\n\n- ##### all:\n\n>    type: **int** == 1 or -1\n>\n>    Set the state at all 1 or -1 it overpass the r parrameter.\n\n- ##### r: \n\n>   type: **float** in [0, ..., 1]\n>\n>  Set a random state with a ratio r of 1 in the lattice (default r = 0.5).\n\n- ##### adj: \n\n>   type: **numpy.array**\n>\n>   A vector of vector: is the representation of the spin interaction.\n>\n>   |  0  |  J  |  0  |\n>   | --- | --- | --- |\n>   |**J**|**#**|**J**| \n>   |**0**|**J**|**0**| \n>\n>   Will be written as [[1,0],[-1,0],[0,1],[0,-1]]\n>   \n>   As default it's the left right up down direct neighbor matrix will be genereted (whatever this mean in 4 or more dimensions).\n\n- ##### J:\n\n>   type: **numpy.array** or **float**\n>\n>   Is the interraction between spins, \n>   if J is an array he as to be the same length than adj.\n>\n>   (you can choose to make anisotropic iteractions !!)\n\n- ##### B:\n\n>   type: **numpy.array** or **float**\n>\n>   Is the magnetic field imposed on the lattice,\n>   if B is an array he as to have the same shape of the lattice\n\n- ##### beta:\n\n>   type: **float**\n>\n>   Beta is 1/(Kb * T) with T the absolute temp,\n>   and Kb is the Boltzmann constant.\n\n## Methods\n\n### randomize(self, ratio=0.5)\nRandomize th lattice state with a given ratio of up state.\n\n### arguments:\n\n#### Optionnal:\n\n- ##### ratio:\n\n>   type: **float** in [0, ..., 1]\n>\n>   The ratio of up state.\n\n### all(self, state)\nSet all the lattice to the same state.\n\n### arguments:\n\n- ##### state:\n\n>   type: **int** == -1 or 1\n>\n>   Value of the spin site.\n\n### H(self)\nCompute the Hamiltonian of the lattice.\n\n### returns:\n\n- ##### Hamiltonian\n\n>   type: **float** \n>\n>   Hamiltonian of the lattice.\n\n### hamiltonian(self)\nCompute the Halmitonian of each spin.\n\n### returns:\n\n- ##### local_Hamiltonian:\n\n>   type: **numpy array** \n>\n>   The Hamiltonian calculated for each spin.\n\n### mH(self)\nCompute the mean value of the Hamiltonian.\n\n### returns:\n\n- ##### <H>\n\n>   type: **float** \n>\n>   Mean value of the Hamiltonian.\n\n### mag(self)\nCompute the magnetization of the lattice.\n\n### returns:\n\n- ##### Magnetization\n\n>   type: **float** \n>\n>   Magnetization of the lattice.\n\n### get_B(self)\nMethod to get the magnetic field.\n\n### returns:\n\n- ##### B:\n\n>   type: **numpy array** \n>\n>   Return the magnetic field.\n\n### get_beta(self)\nMethod to get beta.\n\n### returns:\n\n- ##### beta:\n\n>   type: **float** \n>\n>   Return beta.\n\n### get_shape(self)\nMethod to get the shape of the lattice\n\n### returns:\n\n- ##### shape:\n\n>   type: **tuple(float)**\n> \n>   Return the shape of the lattice\n\n### get_size(self)\nMethod to get the size of the lattice\n\n### returns:\n\n- ##### size:\n\n>   type: **float**\n> \n>   Return the size of the lattice\n\n### get_state(self)\nMethod to get the state of the lattice.\n\n### returns:\n\n- ##### state:\n\n>   type: **numpy array** \n>\n>   Return the copy of the state.\n\n\n### set_B(self, B)\nMethod to set the magnetic field.\n\n### arguments:\n\n- ##### B:\n\n>   type: **numpy array**\n>\n>   The new Magnetic field.\n\n### set_beta(self, beta)\nMethod to set beta.\n\n### arguments:\n\n- ##### beta:\n\n>   type: **float** \n>\n>   The new beta.\n\n### set_state(self, state)\nMethod to set the state of the lattice.\n\n### arguments:\n\n- ##### state:\n\n>   type: **numpy array** \n>\n>   The new state.\n\n\n\n\n\n## Metropolis.algorithm\nIs the class who solve the Ising model with the **Metropolis algorithm**\n\nImplementation of the Metropolis algorithm\n\n### arguments:\n\n-   **for the arguments look the lattice class.**\n\n## Methods\n\n### step(self, n=0):\n\nstep apply the metropolis algorithm on n spin once\n\n### arguments:\n\n#### Optional:\n\n- ##### n:\n\n>   type: **int**\n>\n>   n must be strictly positive is the size of the sample \n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Pacidus/isingm", "keywords": "physics,ising,montecarlo,ising model,metropolis algorithm", "license": "GPL-3.0-or-later", "maintainer": "", "maintainer_email": "", "name": "isingm", "package_url": "https://pypi.org/project/isingm/", "platform": "", "project_url": "https://pypi.org/project/isingm/", "project_urls": {"Homepage": "https://github.com/Pacidus/isingm", "Repository": "https://github.com/Pacidus/isingm"}, "release_url": "https://pypi.org/project/isingm/1.1.1/", "requires_dist": ["numpy (>=1.18.2,<2.0.0)", "matplotlib (>=3.2.1,<4.0.0)"], "requires_python": ">=3.7,<4.0", "summary": "A pythonic Ising model simulation", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"wheel\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/35d04537791752999f36b3bc3e9b1796ec1381a3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f776865656c2f6973696e676d3f7374796c653d706c6173746963\">\n<img alt=\"implementation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/50af8b4b21ff0097618e545b7e100406963dcd4d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f696d706c656d656e746174696f6e2f6973696e676d\">\n<img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/31b6791dbd69d820f5645f38960a89ae9cc73978/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6973696e676d\">\n<img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b18a40b51aa3aa3708f6e1d4f41abb7752ab8fea/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6973696e676d\"></p>\n<h1>Ising</h1>\n<p>A pythonic implementation of the Ising model.</p>\n<p>Check the example for more.</p>\n<h2>Lattice</h2>\n<p>This is the main place of the Ising model,\nwe have to initialize it with a tuple of the lattice shape that can be of any dimension or size.\nThe lattice can be initialized with a random state (you can choose the state ratio up) or all in a state 1 or -1.</p>\n<h3>arguments:</h3>\n<ul>\n<li>\n<h5>shape:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>tuple(int)</strong></p>\n<p>The shape of the lattice is tested for 1 to 4 dimension.\nEvery values of shape must be &gt; 0</p>\n</blockquote>\n<h4>Optionnal:</h4>\n<ul>\n<li>\n<h5>all:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>int</strong> == 1 or -1</p>\n<p>Set the state at all 1 or -1 it overpass the r parrameter.</p>\n</blockquote>\n<ul>\n<li>\n<h5>r:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong> in [0, ..., 1]</p>\n<p>Set a random state with a ratio r of 1 in the lattice (default r = 0.5).</p>\n</blockquote>\n<ul>\n<li>\n<h5>adj:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy.array</strong></p>\n<p>A vector of vector: is the representation of the spin interaction.</p>\n<table>\n<thead>\n<tr>\n<th>0</th>\n<th>J</th>\n<th>0</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><strong>J</strong></td>\n<td><strong>#</strong></td>\n<td><strong>J</strong></td>\n</tr>\n<tr>\n<td><strong>0</strong></td>\n<td><strong>J</strong></td>\n<td><strong>0</strong></td>\n</tr></tbody></table>\n<p>Will be written as [[1,0],[-1,0],[0,1],[0,-1]]</p>\n<p>As default it's the left right up down direct neighbor matrix will be genereted (whatever this mean in 4 or more dimensions).</p>\n</blockquote>\n<ul>\n<li>\n<h5>J:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy.array</strong> or <strong>float</strong></p>\n<p>Is the interraction between spins,\nif J is an array he as to be the same length than adj.</p>\n<p>(you can choose to make anisotropic iteractions !!)</p>\n</blockquote>\n<ul>\n<li>\n<h5>B:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy.array</strong> or <strong>float</strong></p>\n<p>Is the magnetic field imposed on the lattice,\nif B is an array he as to have the same shape of the lattice</p>\n</blockquote>\n<ul>\n<li>\n<h5>beta:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Beta is 1/(Kb * T) with T the absolute temp,\nand Kb is the Boltzmann constant.</p>\n</blockquote>\n<h2>Methods</h2>\n<h3>randomize(self, ratio=0.5)</h3>\n<p>Randomize th lattice state with a given ratio of up state.</p>\n<h3>arguments:</h3>\n<h4>Optionnal:</h4>\n<ul>\n<li>\n<h5>ratio:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong> in [0, ..., 1]</p>\n<p>The ratio of up state.</p>\n</blockquote>\n<h3>all(self, state)</h3>\n<p>Set all the lattice to the same state.</p>\n<h3>arguments:</h3>\n<ul>\n<li>\n<h5>state:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>int</strong> == -1 or 1</p>\n<p>Value of the spin site.</p>\n</blockquote>\n<h3>H(self)</h3>\n<p>Compute the Hamiltonian of the lattice.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>Hamiltonian</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Hamiltonian of the lattice.</p>\n</blockquote>\n<h3>hamiltonian(self)</h3>\n<p>Compute the Halmitonian of each spin.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>local_Hamiltonian:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy array</strong></p>\n<p>The Hamiltonian calculated for each spin.</p>\n</blockquote>\n<h3>mH(self)</h3>\n<p>Compute the mean value of the Hamiltonian.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>&lt;H&gt;</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Mean value of the Hamiltonian.</p>\n</blockquote>\n<h3>mag(self)</h3>\n<p>Compute the magnetization of the lattice.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>Magnetization</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Magnetization of the lattice.</p>\n</blockquote>\n<h3>get_B(self)</h3>\n<p>Method to get the magnetic field.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>B:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy array</strong></p>\n<p>Return the magnetic field.</p>\n</blockquote>\n<h3>get_beta(self)</h3>\n<p>Method to get beta.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>beta:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Return beta.</p>\n</blockquote>\n<h3>get_shape(self)</h3>\n<p>Method to get the shape of the lattice</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>shape:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>tuple(float)</strong></p>\n<p>Return the shape of the lattice</p>\n</blockquote>\n<h3>get_size(self)</h3>\n<p>Method to get the size of the lattice</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>size:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>Return the size of the lattice</p>\n</blockquote>\n<h3>get_state(self)</h3>\n<p>Method to get the state of the lattice.</p>\n<h3>returns:</h3>\n<ul>\n<li>\n<h5>state:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy array</strong></p>\n<p>Return the copy of the state.</p>\n</blockquote>\n<h3>set_B(self, B)</h3>\n<p>Method to set the magnetic field.</p>\n<h3>arguments:</h3>\n<ul>\n<li>\n<h5>B:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy array</strong></p>\n<p>The new Magnetic field.</p>\n</blockquote>\n<h3>set_beta(self, beta)</h3>\n<p>Method to set beta.</p>\n<h3>arguments:</h3>\n<ul>\n<li>\n<h5>beta:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>float</strong></p>\n<p>The new beta.</p>\n</blockquote>\n<h3>set_state(self, state)</h3>\n<p>Method to set the state of the lattice.</p>\n<h3>arguments:</h3>\n<ul>\n<li>\n<h5>state:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>numpy array</strong></p>\n<p>The new state.</p>\n</blockquote>\n<h2>Metropolis.algorithm</h2>\n<p>Is the class who solve the Ising model with the <strong>Metropolis algorithm</strong></p>\n<p>Implementation of the Metropolis algorithm</p>\n<h3>arguments:</h3>\n<ul>\n<li><strong>for the arguments look the lattice class.</strong></li>\n</ul>\n<h2>Methods</h2>\n<h3>step(self, n=0):</h3>\n<p>step apply the metropolis algorithm on n spin once</p>\n<h3>arguments:</h3>\n<h4>Optional:</h4>\n<ul>\n<li>\n<h5>n:</h5>\n</li>\n</ul>\n<blockquote>\n<p>type: <strong>int</strong></p>\n<p>n must be strictly positive is the size of the sample</p>\n</blockquote>\n\n          </div>"}, "last_serial": 7105740, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "e042b85e92a324286bb796cf8c5534b1", "sha256": "0bbe610cd86a16b41bd3fab86dae64a288f89c2e4c9a2931d01bf8e83a42a2e3"}, "downloads": -1, "filename": "isingm-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "e042b85e92a324286bb796cf8c5534b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 16931, "upload_time": "2020-04-20T18:32:29", "upload_time_iso_8601": "2020-04-20T18:32:29.221617Z", "url": "https://files.pythonhosted.org/packages/87/a7/b6ed45738617cf4a6f53b1f45688437783a5ac5dabe2f07f630ff9c1705e/isingm-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c26fc0a4709c1e77203705e147fe1c84", "sha256": "c761b57093c3b9759bd66504932c75288e39355e731e9e3db91d462fab9630e7"}, "downloads": -1, "filename": "isingm-1.0.0.tar.gz", "has_sig": false, "md5_digest": "c26fc0a4709c1e77203705e147fe1c84", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 16189, "upload_time": "2020-04-20T18:32:31", "upload_time_iso_8601": "2020-04-20T18:32:31.474163Z", "url": "https://files.pythonhosted.org/packages/a6/1d/0d238438cb54d80f902f60c4e65247c57a516321c312593ad6afd1a23a7c/isingm-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "3f660a9273c961b4795722a2bb4f7033", "sha256": "73126bf279d15e8d3f10d4f4a72930a5c59b53519e5c22b1db7d4e767dd6856b"}, "downloads": -1, "filename": "isingm-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "3f660a9273c961b4795722a2bb4f7033", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18350, "upload_time": "2020-04-20T20:03:37", "upload_time_iso_8601": "2020-04-20T20:03:37.770978Z", "url": "https://files.pythonhosted.org/packages/3b/45/53a31f4c0a3986c3b61630d0aed10c76aac4dd84303d9b5485a903f6433e/isingm-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a58cbdde061c2196dd5f5501be9d4204", "sha256": "d7c9fc549de9cbb962af0ef427cf441c42ed4cff5172f743656d02d3949ae1aa"}, "downloads": -1, "filename": "isingm-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a58cbdde061c2196dd5f5501be9d4204", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 17552, "upload_time": "2020-04-20T20:03:39", "upload_time_iso_8601": "2020-04-20T20:03:39.123930Z", "url": "https://files.pythonhosted.org/packages/11/44/c5a680da6976f6a6de21d2ba2724fb5cc67e25530f87f2f57e8bc1387db5/isingm-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "38a2033907e7de02b55175fe7d8bab04", "sha256": "33ba527f3e5ccc46e803c70d3c611677b83a4bafec050ca3ffbac4e8036ba8d6"}, "downloads": -1, "filename": "isingm-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "38a2033907e7de02b55175fe7d8bab04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18356, "upload_time": "2020-04-20T20:52:16", "upload_time_iso_8601": "2020-04-20T20:52:16.224745Z", "url": "https://files.pythonhosted.org/packages/bd/1e/a71b1479c984afe05454a90a9e679f858e6b4e448a9c81c006646c350d38/isingm-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f1d505a7a92026230c603213cd3d8114", "sha256": "00190c68e1df5a7f9edd8ecdbe3dd1f81afe075375b6e2da664d5ea7e960227c"}, "downloads": -1, "filename": "isingm-1.0.2.tar.gz", "has_sig": false, "md5_digest": "f1d505a7a92026230c603213cd3d8114", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 17557, "upload_time": "2020-04-20T20:52:17", "upload_time_iso_8601": "2020-04-20T20:52:17.351649Z", "url": "https://files.pythonhosted.org/packages/2c/a7/acccbb028eae3d2505021521fbf3815b4b1738363ec0e3883253cfe1aa94/isingm-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "33e52cd0b831aa7942c89538091e73b6", "sha256": "861c6a3b78d3dfdea9160d0e0ba2536c14f4a5b44cfd1a902a26466d219203a8"}, "downloads": -1, "filename": "isingm-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "33e52cd0b831aa7942c89538091e73b6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18344, "upload_time": "2020-04-20T21:03:28", "upload_time_iso_8601": "2020-04-20T21:03:28.384177Z", "url": "https://files.pythonhosted.org/packages/16/1b/dbbecf60a99c460f92746b699456632efd62e1775726a87e0991230e92af/isingm-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "22e7857e2516754d84ffe03d79e3c667", "sha256": "33d8bb42719cd73ced8ef4a8aa17412d7ed2a24b99aea16c3451a2348378dadc"}, "downloads": -1, "filename": "isingm-1.0.3.tar.gz", "has_sig": false, "md5_digest": "22e7857e2516754d84ffe03d79e3c667", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 17531, "upload_time": "2020-04-20T21:03:29", "upload_time_iso_8601": "2020-04-20T21:03:29.421519Z", "url": "https://files.pythonhosted.org/packages/73/af/05fbfc822632ca03a49ae8dacbdb56525619d803bb22391684b0c6e6d843/isingm-1.0.3.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "9490c60e873ee9696d4612c1df1d3b4b", "sha256": "ac98fa6b65abf392b7bfefcc9b0734f13d3ba070d8594217bad5977252ed3417"}, "downloads": -1, "filename": "isingm-1.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9490c60e873ee9696d4612c1df1d3b4b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18596, "upload_time": "2020-04-26T16:18:58", "upload_time_iso_8601": "2020-04-26T16:18:58.391415Z", "url": "https://files.pythonhosted.org/packages/f6/7e/aca7b2714dd449580f141397d6e6c3e639a34e277adec6c3519eaf975806/isingm-1.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9b64e0bf6d8d10e751f19b322ae929b2", "sha256": "2941c8b35eb5af318c3278d775e1d08f36534d8625bc1b2e4162f8ebadc660a1"}, "downloads": -1, "filename": "isingm-1.1.0.tar.gz", "has_sig": false, "md5_digest": "9b64e0bf6d8d10e751f19b322ae929b2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18391, "upload_time": "2020-04-26T16:18:59", "upload_time_iso_8601": "2020-04-26T16:18:59.459983Z", "url": "https://files.pythonhosted.org/packages/cd/eb/fcda077c09273bce4204265a970ce0b5eaeda64f0adc372724ed0c5e3551/isingm-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "a76fc34f652ff89b8b0b7719632c15c7", "sha256": "612323abbdf36d97ae39892af69e402471c8749932d7c020a09eb93b1aa77471"}, "downloads": -1, "filename": "isingm-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a76fc34f652ff89b8b0b7719632c15c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18539, "upload_time": "2020-04-26T16:24:15", "upload_time_iso_8601": "2020-04-26T16:24:15.260268Z", "url": "https://files.pythonhosted.org/packages/06/f6/5a575428b5a58865a0afff0df78f165bbc01a9b89f5223dab289e61961af/isingm-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3d49f5e191640c006d5062166ba5397", "sha256": "2f0054817a34dc8a4505be062b2eea47f1a16f54eb8b323f67b6a44b5a737fcc"}, "downloads": -1, "filename": "isingm-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c3d49f5e191640c006d5062166ba5397", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18302, "upload_time": "2020-04-26T16:24:16", "upload_time_iso_8601": "2020-04-26T16:24:16.699683Z", "url": "https://files.pythonhosted.org/packages/84/14/70426a033e09535badd56513ac7b8524b846e2853886ca15a01910a2b188/isingm-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a76fc34f652ff89b8b0b7719632c15c7", "sha256": "612323abbdf36d97ae39892af69e402471c8749932d7c020a09eb93b1aa77471"}, "downloads": -1, "filename": "isingm-1.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a76fc34f652ff89b8b0b7719632c15c7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7,<4.0", "size": 18539, "upload_time": "2020-04-26T16:24:15", "upload_time_iso_8601": "2020-04-26T16:24:15.260268Z", "url": "https://files.pythonhosted.org/packages/06/f6/5a575428b5a58865a0afff0df78f165bbc01a9b89f5223dab289e61961af/isingm-1.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3d49f5e191640c006d5062166ba5397", "sha256": "2f0054817a34dc8a4505be062b2eea47f1a16f54eb8b323f67b6a44b5a737fcc"}, "downloads": -1, "filename": "isingm-1.1.1.tar.gz", "has_sig": false, "md5_digest": "c3d49f5e191640c006d5062166ba5397", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7,<4.0", "size": 18302, "upload_time": "2020-04-26T16:24:16", "upload_time_iso_8601": "2020-04-26T16:24:16.699683Z", "url": "https://files.pythonhosted.org/packages/84/14/70426a033e09535badd56513ac7b8524b846e2853886ca15a01910a2b188/isingm-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:05 2020"}