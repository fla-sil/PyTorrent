{"info": {"author": "Paul Landes", "author_email": "landes@mailc.net", "bugtrack_url": null, "classifiers": [], "description": "# Create an SQLite database from the Google ngrams database.\n\n[![Travis CI Build Status][travis-badge]][travis-link]\n[![PyPI][pypi-badge]][pypi-link]\n[![Python 3.6][python36-badge]][python36-link]\n\nCreates an SQLite database of the one million [n-gram] datasets from Google.\nThis code downloads the [n-gram data sets] corpus and then creates an [SQLite]\ndatabase file with the contents.  It also provides a simple API for [n-gram]\nlook ups.\n\n<!-- markdown-toc start - Don't edit this section. Run M-x markdown-toc-refresh-toc -->\n## Table of Contents\n\n- [Installation](#installation)\n    - [Data Size](#data-size)\n- [Usage](#usage)\n    - [Command Line](#command-line)\n    - [Programmatic Interface](#programmatic-interface)\n    - [Data Analysis with Pandas](#data-analysis-with-pandas)\n- [Obtaining](#obtaining)\n- [Changelog](#changelog)\n- [License](#license)\n\n<!-- markdown-toc end -->\n\n\n## Installation\n\n1. To make life easier, install [GNU Make].  If you do not, you'll need to\n   follow the steps given in the [makefile](./makefile).\n2. Download the 1 million [n-gram data sets]: `make download`.  This should\n   take a few minutes with a good Internet connection.\n3. Un-compress the load files: `make uncompress`.\n4. Create and load the [SQLite] database from the downloaded corpus: `make\n   load`.  Depending on the processor speed, this should take about an hour and\n   creates a file in `data/eng-1gram.db` that takes 18G on disk.\n5. Install from the command line either from source (`make install`) or from\n   [pip](#obtaining).\n\nIf you want to use the program on the command line (as opposed to an API),\ncreate a the following file in `~/.ngramdbrc` with the contents:\n```ini\n[default]\n[ngram_db]\ndata_dir=${HOME}/path/to/eng-1gram.db\n```\n\n### Data Size\n\nAs mentioned, the [SQLite] database file take 18G on disk.  This is because it\nkeeps occurrences over several decades.  In many cases, older n-grams are not\nneeded and queries can take a while given the size of the data.  The data can\nbe minimized with the following SQL in any [SQLite] interface (i.e. MacOS has\n`sqlite3` on the command line):\n```sql\ndelete from ngram where yr < 1990;\n```\nIn this example, all n-grams recorded from publications before the year 1990\nare expunged.\n\n\n## Usage\n\nThis project can be used either from the command line or as an API.\n\n\n### Command Line\n\nTo use from the command line:\n```bash\n% ngramdb query -g the -y 2005\n631362690 0.56880%\n```\nThis gives the number of unigrams (assuming unigrams were built) found since\n2005 and the percentage of that unigram to all words in the corpus.\n\n\n### Programmatic Interface\n\nAs in the [installation](#installation) section, create the `~/.ngramdbrc`\nconfiguration file.  Also note that the API is configured to easily work with\nother Python projects that use the [zensols.actioncli] configuration API.\n\n```python\nfrom zensols.ngramdb import AppConfig, Query\nconf = AppConfig.instance().app_config\nquery = Query(conf)\nstash = query.stash\nn_occurs = stash['The']\nprint(f'{n_occurs} {100 * n_occurs / len(stash):.5f}%')\n\n=> 631362690 0.56880%\n```\n\n\n### Data Analysis with Pandas\n\nThe [stash access](#programmatic-interface) is nice for specific use cases\nwhere a subset of the corpus counts are necessary.  However, the intention of\ncreating a selectable data format was to allow for data analysis as well.\nHere's an example of how [Pandas] can be used directly against the created\n[SQLite] file learn about the corpus:\n```python\nfrom zensols.actioncli.time import time\nimport pandas as pd\nimport sqlite3 as s\n\n# \"connect\" to the SQLite database file\ndb = '/path/to/data/directory/eng-1gram.db'\nconn = s.connect(db)\n\n# create a dataframe with all entries on or after 1990\nsql = 'select grams, match_count as cnt from ngram where yr >= 1990'\nwith time('{rc} rows read'):\n    df = pd.read_sql_query(sql, conn)\n    rc = len(df)\n#=> 28150989 rows read finished in 60.8s\n\n# create a data frame with a ngram text and number of match counts per row\nwith time('groupby of {rc} rows'):\n    dfg = df.groupby(['grams'], as_index=False).agg({'cnt': 'sum'})\n    rc = len(df)\n#=> group of 28150989 rows finished in 7.6s\n\n# get the number of counts on 'the'\ndfg[dfg['grams'] == 'the']\n#=>         grams        cnt\n#=> 2819462   the  621594750\n\n# all token occurrences\nall_cnt = df['cnt'].sum()\nall_cnt\n#=> 13269089201\n\n# calculate at the poulation of a few words\nfor word in 'the The . cat dog phone iPhone'.split():\n\tocc = dfg[dfg['grams'] == word].cnt.item()\n\tpop = occ / all_cnt\n\tprint(f'word \\'{word}\\' found {occ} times, which is {pop * 100:.5f}% of the corpus')\n\n#=> word 'the' found 621594750 times, which is 4.68453% of the corpus\n#=> word 'The' found 77576794 times, which is 0.58464% of the corpus\n#=> word '.' found 641792317 times, which is 4.83675% of the corpus\n#=> word 'cat' found 247075 times, which is 0.00186% of the corpus\n#=> word 'dog' found 453789 times, which is 0.00342% of the corpus\n#=> word 'phone' found 522190 times, which is 0.00394% of the corpus\n#=> word 'iPhone' found 178 times, which is 0.00000% of the corpus\n\nwith time('pickled data frame'):\n    df.to_pickle('df.dat')\n#=> pickled data frame finished in 8.0s\n\nwith time('write to csv'):\n    df.to_csv('df.csv')\n#=> write to csv finished in 44.3s\n\nwith time('read data from'):\n    df = pd.read_pickle('df.dat')\n#=> read data from finished in 2.4s\n```\n\n\n## Obtaining\n\nThe easist way to install the command line program is via the `pip` installer:\n```bash\npip3 install zensols.ngramdb\n```\n\nBinaries are also available on [pypi].\n\n\n## Changelog\n\nAn extensive changelog is available [here](CHANGELOG.md).\n\n\n## License\n\nCopyright (c) 2019 Paul Landes\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n<!-- links -->\n[travis-link]: https://travis-ci.org/plandes/ngramdb\n[travis-badge]: https://travis-ci.org/plandes/ngramdb.svg?branch=master\n[pypi]: https://pypi.org/project/zensols.ngramdb/\n[pypi-link]: https://pypi.python.org/pypi/zensols.ngramdb\n[pypi-badge]: https://img.shields.io/pypi/v/zensols.ngramdb.svg\n[python36-link]: https://www.python.org/downloads/release/python-360\n[python36-badge]: https://img.shields.io/badge/python-3.6-blue.svg\n\n[n-gram data sets]: http://storage.googleapis.com/books/ngrams/books/datasetsv2.html\n[n-gram]: https://en.wikipedia.org/wiki/N-gram\n[GNU Make]: https://www.gnu.org/software/make/\n[zensols.actioncli]: https://github.com/plandes/actioncli\n[Pandas]: https://pandas.pydata.org\n[SQLite]:https://www.sqlite.org/index.html\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/plandes/ngramdb/releases/download/v0.0.2/zensols.ngramdb-0.0.2-py3-none-any.whl", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/plandes/ngramdb", "keywords": "nlp", "license": "", "maintainer": "", "maintainer_email": "", "name": "zensols.ngramdb", "package_url": "https://pypi.org/project/zensols.ngramdb/", "platform": "", "project_url": "https://pypi.org/project/zensols.ngramdb/", "project_urls": {"Download": "https://github.com/plandes/ngramdb/releases/download/v0.0.2/zensols.ngramdb-0.0.2-py3-none-any.whl", "Homepage": "https://github.com/plandes/ngramdb"}, "release_url": "https://pypi.org/project/zensols.ngramdb/0.0.2/", "requires_dist": ["zensols.actioncli (>=1.0.17)", "zensols.dbpg (>=0.0.1)"], "requires_python": "", "summary": "Creates an SQLite database ngrams.", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Create an SQLite database from the Google ngrams database.</h1>\n<p><a href=\"https://travis-ci.org/plandes/ngramdb\" rel=\"nofollow\"><img alt=\"Travis CI Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e9d8c33b4c1560e43559b644ae1c48f50db37d9c/68747470733a2f2f7472617669732d63692e6f72672f706c616e6465732f6e6772616d64622e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/zensols.ngramdb\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b8c6a0fdf947e899ca4342c875853a9c37610ee3/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7a656e736f6c732e6e6772616d64622e737667\"></a>\n<a href=\"https://www.python.org/downloads/release/python-360\" rel=\"nofollow\"><img alt=\"Python 3.6\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/01419d339114693587408dd14856677a4789006a/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f707974686f6e2d332e362d626c75652e737667\"></a></p>\n<p>Creates an SQLite database of the one million <a href=\"https://en.wikipedia.org/wiki/N-gram\" rel=\"nofollow\">n-gram</a> datasets from Google.\nThis code downloads the <a href=\"http://storage.googleapis.com/books/ngrams/books/datasetsv2.html\" rel=\"nofollow\">n-gram data sets</a> corpus and then creates an <a href=\"https://www.sqlite.org/index.html\" rel=\"nofollow\">SQLite</a>\ndatabase file with the contents.  It also provides a simple API for <a href=\"https://en.wikipedia.org/wiki/N-gram\" rel=\"nofollow\">n-gram</a>\nlook ups.</p>\n\n<h2>Table of Contents</h2>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a>\n<ul>\n<li><a href=\"#data-size\" rel=\"nofollow\">Data Size</a></li>\n</ul>\n</li>\n<li><a href=\"#usage\" rel=\"nofollow\">Usage</a>\n<ul>\n<li><a href=\"#command-line\" rel=\"nofollow\">Command Line</a></li>\n<li><a href=\"#programmatic-interface\" rel=\"nofollow\">Programmatic Interface</a></li>\n<li><a href=\"#data-analysis-with-pandas\" rel=\"nofollow\">Data Analysis with Pandas</a></li>\n</ul>\n</li>\n<li><a href=\"#obtaining\" rel=\"nofollow\">Obtaining</a></li>\n<li><a href=\"#changelog\" rel=\"nofollow\">Changelog</a></li>\n<li><a href=\"#license\" rel=\"nofollow\">License</a></li>\n</ul>\n\n<h2>Installation</h2>\n<ol>\n<li>To make life easier, install <a href=\"https://www.gnu.org/software/make/\" rel=\"nofollow\">GNU Make</a>.  If you do not, you'll need to\nfollow the steps given in the <a href=\"./makefile\" rel=\"nofollow\">makefile</a>.</li>\n<li>Download the 1 million <a href=\"http://storage.googleapis.com/books/ngrams/books/datasetsv2.html\" rel=\"nofollow\">n-gram data sets</a>: <code>make download</code>.  This should\ntake a few minutes with a good Internet connection.</li>\n<li>Un-compress the load files: <code>make uncompress</code>.</li>\n<li>Create and load the <a href=\"https://www.sqlite.org/index.html\" rel=\"nofollow\">SQLite</a> database from the downloaded corpus: <code>make load</code>.  Depending on the processor speed, this should take about an hour and\ncreates a file in <code>data/eng-1gram.db</code> that takes 18G on disk.</li>\n<li>Install from the command line either from source (<code>make install</code>) or from\n<a href=\"#obtaining\" rel=\"nofollow\">pip</a>.</li>\n</ol>\n<p>If you want to use the program on the command line (as opposed to an API),\ncreate a the following file in <code>~/.ngramdbrc</code> with the contents:</p>\n<pre><span class=\"k\">[default]</span>\n<span class=\"k\">[ngram_db]</span>\n<span class=\"na\">data_dir</span><span class=\"o\">=</span><span class=\"s\">${HOME}/path/to/eng-1gram.db</span>\n</pre>\n<h3>Data Size</h3>\n<p>As mentioned, the <a href=\"https://www.sqlite.org/index.html\" rel=\"nofollow\">SQLite</a> database file take 18G on disk.  This is because it\nkeeps occurrences over several decades.  In many cases, older n-grams are not\nneeded and queries can take a while given the size of the data.  The data can\nbe minimized with the following SQL in any <a href=\"https://www.sqlite.org/index.html\" rel=\"nofollow\">SQLite</a> interface (i.e. MacOS has\n<code>sqlite3</code> on the command line):</p>\n<pre><span class=\"k\">delete</span> <span class=\"k\">from</span> <span class=\"n\">ngram</span> <span class=\"k\">where</span> <span class=\"n\">yr</span> <span class=\"o\">&lt;</span> <span class=\"mi\">1990</span><span class=\"p\">;</span>\n</pre>\n<p>In this example, all n-grams recorded from publications before the year 1990\nare expunged.</p>\n<h2>Usage</h2>\n<p>This project can be used either from the command line or as an API.</p>\n<h3>Command Line</h3>\n<p>To use from the command line:</p>\n<pre>% ngramdb query -g the -y <span class=\"m\">2005</span>\n<span class=\"m\">631362690</span> <span class=\"m\">0</span>.56880%\n</pre>\n<p>This gives the number of unigrams (assuming unigrams were built) found since\n2005 and the percentage of that unigram to all words in the corpus.</p>\n<h3>Programmatic Interface</h3>\n<p>As in the <a href=\"#installation\" rel=\"nofollow\">installation</a> section, create the <code>~/.ngramdbrc</code>\nconfiguration file.  Also note that the API is configured to easily work with\nother Python projects that use the <a href=\"https://github.com/plandes/actioncli\" rel=\"nofollow\">zensols.actioncli</a> configuration API.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zensols.ngramdb</span> <span class=\"kn\">import</span> <span class=\"n\">AppConfig</span><span class=\"p\">,</span> <span class=\"n\">Query</span>\n<span class=\"n\">conf</span> <span class=\"o\">=</span> <span class=\"n\">AppConfig</span><span class=\"o\">.</span><span class=\"n\">instance</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">app_config</span>\n<span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"n\">Query</span><span class=\"p\">(</span><span class=\"n\">conf</span><span class=\"p\">)</span>\n<span class=\"n\">stash</span> <span class=\"o\">=</span> <span class=\"n\">query</span><span class=\"o\">.</span><span class=\"n\">stash</span>\n<span class=\"n\">n_occurs</span> <span class=\"o\">=</span> <span class=\"n\">stash</span><span class=\"p\">[</span><span class=\"s1\">'The'</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'</span><span class=\"si\">{</span><span class=\"n\">n_occurs</span><span class=\"si\">}</span><span class=\"s1\"> </span><span class=\"si\">{</span><span class=\"mi\">100</span> <span class=\"o\">*</span> <span class=\"n\">n_occurs</span> <span class=\"o\">/</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">stash</span><span class=\"p\">)</span><span class=\"si\">:</span><span class=\"s1\">.5f</span><span class=\"si\">}</span><span class=\"s1\">%'</span><span class=\"p\">)</span>\n\n<span class=\"o\">=&gt;</span> <span class=\"mi\">631362690</span> <span class=\"mf\">0.56880</span><span class=\"o\">%</span>\n</pre>\n<h3>Data Analysis with Pandas</h3>\n<p>The <a href=\"#programmatic-interface\" rel=\"nofollow\">stash access</a> is nice for specific use cases\nwhere a subset of the corpus counts are necessary.  However, the intention of\ncreating a selectable data format was to allow for data analysis as well.\nHere's an example of how <a href=\"https://pandas.pydata.org\" rel=\"nofollow\">Pandas</a> can be used directly against the created\n<a href=\"https://www.sqlite.org/index.html\" rel=\"nofollow\">SQLite</a> file learn about the corpus:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">zensols.actioncli.time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sqlite3</span> <span class=\"k\">as</span> <span class=\"nn\">s</span>\n\n<span class=\"c1\"># \"connect\" to the SQLite database file</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"s1\">'/path/to/data/directory/eng-1gram.db'</span>\n<span class=\"n\">conn</span> <span class=\"o\">=</span> <span class=\"n\">s</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create a dataframe with all entries on or after 1990</span>\n<span class=\"n\">sql</span> <span class=\"o\">=</span> <span class=\"s1\">'select grams, match_count as cnt from ngram where yr &gt;= 1990'</span>\n<span class=\"k\">with</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{rc}</span><span class=\"s1\"> rows read'</span><span class=\"p\">):</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_sql_query</span><span class=\"p\">(</span><span class=\"n\">sql</span><span class=\"p\">,</span> <span class=\"n\">conn</span><span class=\"p\">)</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; 28150989 rows read finished in 60.8s</span>\n\n<span class=\"c1\"># create a data frame with a ngram text and number of match counts per row</span>\n<span class=\"k\">with</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s1\">'groupby of </span><span class=\"si\">{rc}</span><span class=\"s1\"> rows'</span><span class=\"p\">):</span>\n    <span class=\"n\">dfg</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">groupby</span><span class=\"p\">([</span><span class=\"s1\">'grams'</span><span class=\"p\">],</span> <span class=\"n\">as_index</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">agg</span><span class=\"p\">({</span><span class=\"s1\">'cnt'</span><span class=\"p\">:</span> <span class=\"s1\">'sum'</span><span class=\"p\">})</span>\n    <span class=\"n\">rc</span> <span class=\"o\">=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; group of 28150989 rows finished in 7.6s</span>\n\n<span class=\"c1\"># get the number of counts on 'the'</span>\n<span class=\"n\">dfg</span><span class=\"p\">[</span><span class=\"n\">dfg</span><span class=\"p\">[</span><span class=\"s1\">'grams'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"s1\">'the'</span><span class=\"p\">]</span>\n<span class=\"c1\">#=&gt;         grams        cnt</span>\n<span class=\"c1\">#=&gt; 2819462   the  621594750</span>\n\n<span class=\"c1\"># all token occurrences</span>\n<span class=\"n\">all_cnt</span> <span class=\"o\">=</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"s1\">'cnt'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">sum</span><span class=\"p\">()</span>\n<span class=\"n\">all_cnt</span>\n<span class=\"c1\">#=&gt; 13269089201</span>\n\n<span class=\"c1\"># calculate at the poulation of a few words</span>\n<span class=\"k\">for</span> <span class=\"n\">word</span> <span class=\"ow\">in</span> <span class=\"s1\">'the The . cat dog phone iPhone'</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">():</span>\n\t<span class=\"n\">occ</span> <span class=\"o\">=</span> <span class=\"n\">dfg</span><span class=\"p\">[</span><span class=\"n\">dfg</span><span class=\"p\">[</span><span class=\"s1\">'grams'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">word</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">cnt</span><span class=\"o\">.</span><span class=\"n\">item</span><span class=\"p\">()</span>\n\t<span class=\"n\">pop</span> <span class=\"o\">=</span> <span class=\"n\">occ</span> <span class=\"o\">/</span> <span class=\"n\">all_cnt</span>\n\t<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s1\">'word </span><span class=\"se\">\\'</span><span class=\"si\">{</span><span class=\"n\">word</span><span class=\"si\">}</span><span class=\"se\">\\'</span><span class=\"s1\"> found </span><span class=\"si\">{</span><span class=\"n\">occ</span><span class=\"si\">}</span><span class=\"s1\"> times, which is </span><span class=\"si\">{</span><span class=\"n\">pop</span> <span class=\"o\">*</span> <span class=\"mi\">100</span><span class=\"si\">:</span><span class=\"s1\">.5f</span><span class=\"si\">}</span><span class=\"s1\">% of the corpus'</span><span class=\"p\">)</span>\n\n<span class=\"c1\">#=&gt; word 'the' found 621594750 times, which is 4.68453% of the corpus</span>\n<span class=\"c1\">#=&gt; word 'The' found 77576794 times, which is 0.58464% of the corpus</span>\n<span class=\"c1\">#=&gt; word '.' found 641792317 times, which is 4.83675% of the corpus</span>\n<span class=\"c1\">#=&gt; word 'cat' found 247075 times, which is 0.00186% of the corpus</span>\n<span class=\"c1\">#=&gt; word 'dog' found 453789 times, which is 0.00342% of the corpus</span>\n<span class=\"c1\">#=&gt; word 'phone' found 522190 times, which is 0.00394% of the corpus</span>\n<span class=\"c1\">#=&gt; word 'iPhone' found 178 times, which is 0.00000% of the corpus</span>\n\n<span class=\"k\">with</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s1\">'pickled data frame'</span><span class=\"p\">):</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_pickle</span><span class=\"p\">(</span><span class=\"s1\">'df.dat'</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; pickled data frame finished in 8.0s</span>\n\n<span class=\"k\">with</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s1\">'write to csv'</span><span class=\"p\">):</span>\n    <span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'df.csv'</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; write to csv finished in 44.3s</span>\n\n<span class=\"k\">with</span> <span class=\"n\">time</span><span class=\"p\">(</span><span class=\"s1\">'read data from'</span><span class=\"p\">):</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">read_pickle</span><span class=\"p\">(</span><span class=\"s1\">'df.dat'</span><span class=\"p\">)</span>\n<span class=\"c1\">#=&gt; read data from finished in 2.4s</span>\n</pre>\n<h2>Obtaining</h2>\n<p>The easist way to install the command line program is via the <code>pip</code> installer:</p>\n<pre>pip3 install zensols.ngramdb\n</pre>\n<p>Binaries are also available on <a href=\"https://pypi.org/project/zensols.ngramdb/\" rel=\"nofollow\">pypi</a>.</p>\n<h2>Changelog</h2>\n<p>An extensive changelog is available <a href=\"CHANGELOG.md\" rel=\"nofollow\">here</a>.</p>\n<h2>License</h2>\n<p>Copyright (c) 2019 Paul Landes</p>\n<p>Permission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the \"Software\"), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies\nof the Software, and to permit persons to whom the Software is furnished to do\nso, subject to the following conditions:</p>\n<p>The above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.</p>\n<p>THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.</p>\n\n\n          </div>"}, "last_serial": 6338798, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "0654488fa1b90d478b6eafdb295071d9", "sha256": "1c4965c92d733821139cce2859085f0dc0a8229f01d15f3a5a4347e861d497f4"}, "downloads": -1, "filename": "zensols.ngramdb-0.0.2-py3.7.egg", "has_sig": false, "md5_digest": "0654488fa1b90d478b6eafdb295071d9", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 24493, "upload_time": "2019-12-20T12:42:24", "upload_time_iso_8601": "2019-12-20T12:42:24.449684Z", "url": "https://files.pythonhosted.org/packages/64/5f/636f7357808fbdf6bb511b47b4891117d0d9f9bddc2abef87706bfe4660a/zensols.ngramdb-0.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6870827a5628a9bfe1cf6b88c16b785b", "sha256": "bbb9dfff33a0c02105c1ef6101a512fd043cfaaf10853fd594946ca34d33d256"}, "downloads": -1, "filename": "zensols.ngramdb-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6870827a5628a9bfe1cf6b88c16b785b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15342, "upload_time": "2019-12-20T12:42:22", "upload_time_iso_8601": "2019-12-20T12:42:22.717198Z", "url": "https://files.pythonhosted.org/packages/74/9e/2b43be1a77b3385c8fa2fd733f27b9cc0095de3cfe6fc58a20d5644c9b50/zensols.ngramdb-0.0.2-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "0654488fa1b90d478b6eafdb295071d9", "sha256": "1c4965c92d733821139cce2859085f0dc0a8229f01d15f3a5a4347e861d497f4"}, "downloads": -1, "filename": "zensols.ngramdb-0.0.2-py3.7.egg", "has_sig": false, "md5_digest": "0654488fa1b90d478b6eafdb295071d9", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 24493, "upload_time": "2019-12-20T12:42:24", "upload_time_iso_8601": "2019-12-20T12:42:24.449684Z", "url": "https://files.pythonhosted.org/packages/64/5f/636f7357808fbdf6bb511b47b4891117d0d9f9bddc2abef87706bfe4660a/zensols.ngramdb-0.0.2-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "6870827a5628a9bfe1cf6b88c16b785b", "sha256": "bbb9dfff33a0c02105c1ef6101a512fd043cfaaf10853fd594946ca34d33d256"}, "downloads": -1, "filename": "zensols.ngramdb-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6870827a5628a9bfe1cf6b88c16b785b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15342, "upload_time": "2019-12-20T12:42:22", "upload_time_iso_8601": "2019-12-20T12:42:22.717198Z", "url": "https://files.pythonhosted.org/packages/74/9e/2b43be1a77b3385c8fa2fd733f27b9cc0095de3cfe6fc58a20d5644c9b50/zensols.ngramdb-0.0.2-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:18:00 2020"}