{"info": {"author": "HealthSamurai", "author_email": "fhirbase.py@health-samurai.io", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Intended Audience :: Developers", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: Database :: Front-Ends", "Topic :: Internet :: WWW/HTTP", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "[![Build Status](https://travis-ci.org/fhirbase/fhirbase.py.svg?branch=master)](https://travis-ci.org/fhirbase/fhirbase.py)\n[![pypi](https://img.shields.io/pypi/v/fhirbase.svg)](https://pypi.python.org/pypi/fhirbase)\n\n# fhirbase.py\nFHIRBase connector for python.\nThis package provides wrapper over psycopg2 connection which\nprovides CRUD for resources in fhirbase.\n\n# Install\n```\npip install fhirbase\n```\n\n# Usage\nImport `fhirbase` and `psycopg2` libraries:\n```\nimport fhirbase\nimport psycopg2\n```\n\nCreate a connection using `psycopg2.connect`;\n\n```\nconnection = psycopg2.connect(\n    dbname='postgres', user='postgres',\n    host='localhost', port='5432')\n```\n\nCreate an instance of `FHIRBase`:\n```\nfb = fhribase.FHIRBase(connection)\n```\n\nNow you can use the following methods of `FHIRBase` instance:\n* `.execute(sql, params=None, commit=False)`\n* `.execute_without_result(sql, params=None, commit=False)`\n* `.row_to_resource(row)`\n\nCRUD methods work with [FHIR resources](https://www.hl7.org/fhir/resourcelist.html).\nResource represented as a dict with specified `resourceType` key as required key.\nThe following methods works with resource and returns resources.\n\n* `.create(resource, txid=None, commit=True)`\n* `.update(resource, txid=None,  commit=True)`\n* `.delete(resource, txid=None,  commit=True)`/`.delete(resource_type, id, txid=None, commit=True)`\n* `.read(resource)`/`.read(resource_type, id)`\n* `.list(sql, params=None)`\n\n# Methods\n\n### .execute\nExecutes sql with params.\n\nSyntax: `.execute(sql, params=None, commit=False)`\n\nReturns: context manager with cursor as context\n\nExample:\n```\nwith fb.execute('SELECT * FROM patient WHERE id=%s', ['id']) as cursor:\n    print(cursor.fetchall())\n```\n\n### .execute_without_result\nExecutes sql with params.\n\nSyntax: `.execute_without_result(sql, params=None, commit=False)`\n\nReturns: nothing\n\nExample:\n```\nfb.execute_without_result('INSERT INTO transaction (resource) VALUES (%s)', ['{}'])\n```\n\n### `.row_to_resource`\nTransforms row raw from DB to resource.\n\nSyntax: `.row_to_resource(row)`\n\nReturns: resource representation (dict)\n\nExample:\n```\nfb.row_to_resource({\n    'resource': {'name': []},\n    'ts': 'ts',\n    'txid': 'txid',\n    'resource_type': 'Patient',\n    'meta': {'tag': 'created'},\n    'id': 'id',\n}))\n```\n\nwill return resource representation:\n\n```\n{\n    'id': 'id',\n    'meta': {'lastUpdated': 'ts', 'versionId': 'txid'},\n    'name': [],\n    'resourceType': 'Patient',\n}\n```\n\n### `.create`\nCreates resource.\nIf txid is not specified, new unique logical transaction id will be generated.\n\nSyntax: `.create(resource, txid=None, commit=True)`\n\nReturns: resource representation (dict)\n\nExample:\n```\nfb.create({\n    'resourceType': 'Patient',\n    'name': [{'text': 'John'}],\n})\n```\nreturns\n```\n{\n    'resourceType': 'Patient',\n    'id': 'UNIQUE ID',\n    'name': [{'text': 'John'}],\n    'meta': {'lastUpdated': 'timestamp', 'versionId': 'txid'},\n}\n```\n\n### `.update`\nUpdates resource.\nIf txid is not specified, new unique logical transaction id will be generated.\n\nKey `id` is required in `resource` argument.\n\nSyntax: `.update(resource, txid=None, commit=True)`\n\nReturns: resource representation (dict)\n\nExample:\n```\nfb.update({\n    'resourceType': 'Patient',\n    'id': 'id',\n    'name': [{'text': 'John'}],\n})\n```\n\nreturns\n\n```\n{\n    'resourceType': 'Patient',\n    'id': 'UNIQUE ID',\n    'name': [{'text': 'John'}],\n    'meta': {'lastUpdated': 'timestamp', 'versionId': 'txid'},\n}\n```\n\n\n### `.delete`\nDeletes resource.\nIf txid is not specified, new unique logical transaction id will be generated.\nKeys `id` and `resourceType` are required in `resource` argument in first variant of usage.\n\nSyntax: `.delete(resource, txid=None, commit=True)` or `.delete(resource_type, id, txid=None, commit=True)`\n\nReturns: nothing\n\nExample:\n```\nfb.delete({\n    'resourceType': 'Patient',\n    'id': 'id',\n})\n```\n\nor\n\n```\nfb.delete(resource_type='Patient', id='id')\n```\n\n\n### `.read`\nReads resource.\nKeys `id` and `resourceType` are required in `resource` argument in first variant of usage.\n\nSyntax: `.read(resource)` or `.read(resource_type, id)`\n\nReturns: resource representation (dict)\n\nExample:\n```\nfb.read({\n    'resourceType': 'Patient',\n    'id': 'id',\n})\n```\n\nor\n\n```\nfb.read(resource_type='Patient', id='id')\n```\n\n### `.list`\n\nExecutes SQL and returns iterator of resources.\nNote: sql query must return all fields of resource table.\n\nSyntax: `.list(sql, params)`\n\nReturns: iterator of resources\n\nExample:\n```\nfor patient in fb.list('SELECT * FROM patient'):\n    print(patient)\n```\n\nor\n\n```\npatients = list(fb.list('SELECT * FROM patient'))\n```\n\n# Example application\nTo run example, just do:\n\n```\ndocker-compose build\ndocker-compose up -d\n```\nWait until db starting process will be completed, and run:\n\n```\ndocker-compose run --rm fhirbase fhirbase init 3.0.1\ndocker-compose run --rm fhirbasepy python examples/example.py\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/fhirbase/fhirbase.py", "keywords": "fhir,fhirbase", "license": "", "maintainer": "", "maintainer_email": "", "name": "fhirbase", "package_url": "https://pypi.org/project/fhirbase/", "platform": "", "project_url": "https://pypi.org/project/fhirbase/", "project_urls": {"Homepage": "http://github.com/fhirbase/fhirbase.py"}, "release_url": "https://pypi.org/project/fhirbase/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "fhirbase connector", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/fhirbase/fhirbase.py\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/27d0a3309c89407351ec3a6f29205d51d0b340cd/68747470733a2f2f7472617669732d63692e6f72672f66686972626173652f66686972626173652e70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://pypi.python.org/pypi/fhirbase\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6f33567dd416377fbed1c2c96cc03d76872494a2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f66686972626173652e737667\"></a></p>\n<h1>fhirbase.py</h1>\n<p>FHIRBase connector for python.\nThis package provides wrapper over psycopg2 connection which\nprovides CRUD for resources in fhirbase.</p>\n<h1>Install</h1>\n<pre><code>pip install fhirbase\n</code></pre>\n<h1>Usage</h1>\n<p>Import <code>fhirbase</code> and <code>psycopg2</code> libraries:</p>\n<pre><code>import fhirbase\nimport psycopg2\n</code></pre>\n<p>Create a connection using <code>psycopg2.connect</code>;</p>\n<pre><code>connection = psycopg2.connect(\n    dbname='postgres', user='postgres',\n    host='localhost', port='5432')\n</code></pre>\n<p>Create an instance of <code>FHIRBase</code>:</p>\n<pre><code>fb = fhribase.FHIRBase(connection)\n</code></pre>\n<p>Now you can use the following methods of <code>FHIRBase</code> instance:</p>\n<ul>\n<li><code>.execute(sql, params=None, commit=False)</code></li>\n<li><code>.execute_without_result(sql, params=None, commit=False)</code></li>\n<li><code>.row_to_resource(row)</code></li>\n</ul>\n<p>CRUD methods work with <a href=\"https://www.hl7.org/fhir/resourcelist.html\" rel=\"nofollow\">FHIR resources</a>.\nResource represented as a dict with specified <code>resourceType</code> key as required key.\nThe following methods works with resource and returns resources.</p>\n<ul>\n<li><code>.create(resource, txid=None, commit=True)</code></li>\n<li><code>.update(resource, txid=None, commit=True)</code></li>\n<li><code>.delete(resource, txid=None, commit=True)</code>/<code>.delete(resource_type, id, txid=None, commit=True)</code></li>\n<li><code>.read(resource)</code>/<code>.read(resource_type, id)</code></li>\n<li><code>.list(sql, params=None)</code></li>\n</ul>\n<h1>Methods</h1>\n<h3>.execute</h3>\n<p>Executes sql with params.</p>\n<p>Syntax: <code>.execute(sql, params=None, commit=False)</code></p>\n<p>Returns: context manager with cursor as context</p>\n<p>Example:</p>\n<pre><code>with fb.execute('SELECT * FROM patient WHERE id=%s', ['id']) as cursor:\n    print(cursor.fetchall())\n</code></pre>\n<h3>.execute_without_result</h3>\n<p>Executes sql with params.</p>\n<p>Syntax: <code>.execute_without_result(sql, params=None, commit=False)</code></p>\n<p>Returns: nothing</p>\n<p>Example:</p>\n<pre><code>fb.execute_without_result('INSERT INTO transaction (resource) VALUES (%s)', ['{}'])\n</code></pre>\n<h3><code>.row_to_resource</code></h3>\n<p>Transforms row raw from DB to resource.</p>\n<p>Syntax: <code>.row_to_resource(row)</code></p>\n<p>Returns: resource representation (dict)</p>\n<p>Example:</p>\n<pre><code>fb.row_to_resource({\n    'resource': {'name': []},\n    'ts': 'ts',\n    'txid': 'txid',\n    'resource_type': 'Patient',\n    'meta': {'tag': 'created'},\n    'id': 'id',\n}))\n</code></pre>\n<p>will return resource representation:</p>\n<pre><code>{\n    'id': 'id',\n    'meta': {'lastUpdated': 'ts', 'versionId': 'txid'},\n    'name': [],\n    'resourceType': 'Patient',\n}\n</code></pre>\n<h3><code>.create</code></h3>\n<p>Creates resource.\nIf txid is not specified, new unique logical transaction id will be generated.</p>\n<p>Syntax: <code>.create(resource, txid=None, commit=True)</code></p>\n<p>Returns: resource representation (dict)</p>\n<p>Example:</p>\n<pre><code>fb.create({\n    'resourceType': 'Patient',\n    'name': [{'text': 'John'}],\n})\n</code></pre>\n<p>returns</p>\n<pre><code>{\n    'resourceType': 'Patient',\n    'id': 'UNIQUE ID',\n    'name': [{'text': 'John'}],\n    'meta': {'lastUpdated': 'timestamp', 'versionId': 'txid'},\n}\n</code></pre>\n<h3><code>.update</code></h3>\n<p>Updates resource.\nIf txid is not specified, new unique logical transaction id will be generated.</p>\n<p>Key <code>id</code> is required in <code>resource</code> argument.</p>\n<p>Syntax: <code>.update(resource, txid=None, commit=True)</code></p>\n<p>Returns: resource representation (dict)</p>\n<p>Example:</p>\n<pre><code>fb.update({\n    'resourceType': 'Patient',\n    'id': 'id',\n    'name': [{'text': 'John'}],\n})\n</code></pre>\n<p>returns</p>\n<pre><code>{\n    'resourceType': 'Patient',\n    'id': 'UNIQUE ID',\n    'name': [{'text': 'John'}],\n    'meta': {'lastUpdated': 'timestamp', 'versionId': 'txid'},\n}\n</code></pre>\n<h3><code>.delete</code></h3>\n<p>Deletes resource.\nIf txid is not specified, new unique logical transaction id will be generated.\nKeys <code>id</code> and <code>resourceType</code> are required in <code>resource</code> argument in first variant of usage.</p>\n<p>Syntax: <code>.delete(resource, txid=None, commit=True)</code> or <code>.delete(resource_type, id, txid=None, commit=True)</code></p>\n<p>Returns: nothing</p>\n<p>Example:</p>\n<pre><code>fb.delete({\n    'resourceType': 'Patient',\n    'id': 'id',\n})\n</code></pre>\n<p>or</p>\n<pre><code>fb.delete(resource_type='Patient', id='id')\n</code></pre>\n<h3><code>.read</code></h3>\n<p>Reads resource.\nKeys <code>id</code> and <code>resourceType</code> are required in <code>resource</code> argument in first variant of usage.</p>\n<p>Syntax: <code>.read(resource)</code> or <code>.read(resource_type, id)</code></p>\n<p>Returns: resource representation (dict)</p>\n<p>Example:</p>\n<pre><code>fb.read({\n    'resourceType': 'Patient',\n    'id': 'id',\n})\n</code></pre>\n<p>or</p>\n<pre><code>fb.read(resource_type='Patient', id='id')\n</code></pre>\n<h3><code>.list</code></h3>\n<p>Executes SQL and returns iterator of resources.\nNote: sql query must return all fields of resource table.</p>\n<p>Syntax: <code>.list(sql, params)</code></p>\n<p>Returns: iterator of resources</p>\n<p>Example:</p>\n<pre><code>for patient in fb.list('SELECT * FROM patient'):\n    print(patient)\n</code></pre>\n<p>or</p>\n<pre><code>patients = list(fb.list('SELECT * FROM patient'))\n</code></pre>\n<h1>Example application</h1>\n<p>To run example, just do:</p>\n<pre><code>docker-compose build\ndocker-compose up -d\n</code></pre>\n<p>Wait until db starting process will be completed, and run:</p>\n<pre><code>docker-compose run --rm fhirbase fhirbase init 3.0.1\ndocker-compose run --rm fhirbasepy python examples/example.py\n</code></pre>\n\n          </div>"}, "last_serial": 4240284, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b62fd592b0130cd88c2cfebc7a0cb878", "sha256": "530408651a35a96e779ba2a2b22dc14eed1c47d026c296d300185ccf5574433f"}, "downloads": -1, "filename": "fhirbase-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b62fd592b0130cd88c2cfebc7a0cb878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5031, "upload_time": "2018-09-05T08:44:08", "upload_time_iso_8601": "2018-09-05T08:44:08.231173Z", "url": "https://files.pythonhosted.org/packages/94/76/5f7cd40c23216d5bf21037ef225bce66e7a8c5c37f4ee9e4f0e4a287e80e/fhirbase-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b62fd592b0130cd88c2cfebc7a0cb878", "sha256": "530408651a35a96e779ba2a2b22dc14eed1c47d026c296d300185ccf5574433f"}, "downloads": -1, "filename": "fhirbase-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b62fd592b0130cd88c2cfebc7a0cb878", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5031, "upload_time": "2018-09-05T08:44:08", "upload_time_iso_8601": "2018-09-05T08:44:08.231173Z", "url": "https://files.pythonhosted.org/packages/94/76/5f7cd40c23216d5bf21037ef225bce66e7a8c5c37f4ee9e4f0e4a287e80e/fhirbase-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:42:45 2020"}