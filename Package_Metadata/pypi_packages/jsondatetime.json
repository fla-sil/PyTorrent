{"info": {"author": "Andrew Stribblehill", "author_email": "andrew.stribblehill@schibsted.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: ISC License (ISCL)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# jsondatetime\n\n[![image](https://travis-ci.com/schibsted/json-datetime.svg?branch=master)](https://travis-ci.com/schibsted/json-datetime)\n\n`jsondatetime` allows for proper decoding of datetime values contained in\nJSON streams.\n\n## The problem\n\nThe JSON standard RFC 4627 does not support datetime types. These are\nusually represented as strings and Python decoders end up decoding them\nas such. Consider the following example:\n\n``` python\nimport simplejson as json\n\n>>> test = '{\"name\": \"John Doe\", \"born\": \"Thu, 1 Mar 2012 10:00:49 UTC\"}'\n>>> json.loads(test)\n{'born': u'Thu, 1 Mar 2012 10:00:49 UTC', 'name': u'John Doe'}\n```\n\nAs you can see, in the resulting dictionary `born` is still a string.\n\n## The solution\n\n`jsondatetime` is a very simple wrapper around Python simplejson `loads`\nand `dumps` methods. It decodes datetime values contained in JSON\nstrings:\n\n``` python\nimport jsondatetime as json\n\n>>> test = '{\"name\": \"John Doe\", \"born\": \"Thu, 1 Mar 2012 10:00:49 UTC\"}'\n>>> j = json.loads(test); j\n{'name': 'John Doe', 'born': datetime.datetime(2012, 3, 1, 10, 0 ,49, tzinfo=tzutc())}\n>>> dumps(j)\n\"{'name': 'John Doe', 'born': '2012-03-01T10:00:49+00:00'}\"\n```\n\nStrings are parsed using `dateutil.parser.parse` which is fairly\nflexible for common datetime formats.\n\n## Custom parsing\n\nBeing just a wrapper around the `loads` method, you can still use all\nthe standard `loads` arguments, `object_hook` included. This means that\nyou can still perform custom parsing of your inbound JSON stream.\n\n## Installation\n\n`pip install jsondatetime`", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/schibsted/json-datetime", "keywords": "", "license": "ISCL", "maintainer": "", "maintainer_email": "", "name": "jsondatetime", "package_url": "https://pypi.org/project/jsondatetime/", "platform": "any", "project_url": "https://pypi.org/project/jsondatetime/", "project_urls": {"Homepage": "https://github.com/schibsted/json-datetime"}, "release_url": "https://pypi.org/project/jsondatetime/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "Allows for encoding and decoding of datetime values contained in JSON streams", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>jsondatetime</h1>\n<p><a href=\"https://travis-ci.com/schibsted/json-datetime\" rel=\"nofollow\"><img alt=\"image\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22d59d0382af51c93b953bdd9cea5d21320f9299/68747470733a2f2f7472617669732d63692e636f6d2f7363686962737465642f6a736f6e2d6461746574696d652e7376673f6272616e63683d6d6173746572\"></a></p>\n<p><code>jsondatetime</code> allows for proper decoding of datetime values contained in\nJSON streams.</p>\n<h2>The problem</h2>\n<p>The JSON standard RFC 4627 does not support datetime types. These are\nusually represented as strings and Python decoders end up decoding them\nas such. Consider the following example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">simplejson</span> <span class=\"k\">as</span> <span class=\"nn\">json</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"name\": \"John Doe\", \"born\": \"Thu, 1 Mar 2012 10:00:49 UTC\"}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">)</span>\n<span class=\"p\">{</span><span class=\"s1\">'born'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'Thu, 1 Mar 2012 10:00:49 UTC'</span><span class=\"p\">,</span> <span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'John Doe'</span><span class=\"p\">}</span>\n</pre>\n<p>As you can see, in the resulting dictionary <code>born</code> is still a string.</p>\n<h2>The solution</h2>\n<p><code>jsondatetime</code> is a very simple wrapper around Python simplejson <code>loads</code>\nand <code>dumps</code> methods. It decodes datetime values contained in JSON\nstrings:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">jsondatetime</span> <span class=\"k\">as</span> <span class=\"nn\">json</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s1\">'{\"name\": \"John Doe\", \"born\": \"Thu, 1 Mar 2012 10:00:49 UTC\"}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">j</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"p\">);</span> <span class=\"n\">j</span>\n<span class=\"p\">{</span><span class=\"s1\">'name'</span><span class=\"p\">:</span> <span class=\"s1\">'John Doe'</span><span class=\"p\">,</span> <span class=\"s1\">'born'</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2012</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">0</span> <span class=\"p\">,</span><span class=\"mi\">49</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">tzutc</span><span class=\"p\">())}</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"n\">j</span><span class=\"p\">)</span>\n<span class=\"s2\">\"{'name': 'John Doe', 'born': '2012-03-01T10:00:49+00:00'}\"</span>\n</pre>\n<p>Strings are parsed using <code>dateutil.parser.parse</code> which is fairly\nflexible for common datetime formats.</p>\n<h2>Custom parsing</h2>\n<p>Being just a wrapper around the <code>loads</code> method, you can still use all\nthe standard <code>loads</code> arguments, <code>object_hook</code> included. This means that\nyou can still perform custom parsing of your inbound JSON stream.</p>\n<h2>Installation</h2>\n<p><code>pip install jsondatetime</code></p>\n\n          </div>"}, "last_serial": 6675652, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "dd335cdd7a60908e82fecefe669d0409", "sha256": "e7ce907f548a175bc3951963d5608b016283e5880abcb09e5b7ca8109423f2bf"}, "downloads": -1, "filename": "jsondatetime-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dd335cdd7a60908e82fecefe669d0409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3806, "upload_time": "2020-02-21T14:20:49", "upload_time_iso_8601": "2020-02-21T14:20:49.069892Z", "url": "https://files.pythonhosted.org/packages/03/8b/6fd91e463696cc7b0a6ba3216f23878028124d527a5f0102a07f9889cf6e/jsondatetime-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "dd335cdd7a60908e82fecefe669d0409", "sha256": "e7ce907f548a175bc3951963d5608b016283e5880abcb09e5b7ca8109423f2bf"}, "downloads": -1, "filename": "jsondatetime-0.1.1.tar.gz", "has_sig": false, "md5_digest": "dd335cdd7a60908e82fecefe669d0409", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3806, "upload_time": "2020-02-21T14:20:49", "upload_time_iso_8601": "2020-02-21T14:20:49.069892Z", "url": "https://files.pythonhosted.org/packages/03/8b/6fd91e463696cc7b0a6ba3216f23878028124d527a5f0102a07f9889cf6e/jsondatetime-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:50 2020"}