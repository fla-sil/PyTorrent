{"info": {"author": "Robin David", "author_email": "dev.robin.david@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "pytts\n=====\n\nPyTTS is multi-platform Text-To-Speech module based on Google translate engine. Therefore it takes advantage of Google's mixed engines,\nand the 27 languages can be used.\n\nRequirement\n-----------\n\nPyTTS requires an internet connection because every request are sent to Google's engine.\n\nThe python modules required are gstreamer and gobject. Gstreamer is used to read the speech stream from Google to play it back on Speakers.\nGobject is used to keep the handle while the speech is not played entirely. (Catch the gstreamer eos(End Of Stream) message)\n\nHow to use it ?\n---------------\n\nYou can use this script either as a program either as a module. In both case it's usage is fairly easy.\n\nAs a script\n-----------\n\nTo use it as a script you should give in first argument the language code followed by the text. Internaly it creates an pytts object and call the \"say\" methods which speech the text\nand return when the speech is done. Example:\n\n    ./pytts en Hello world !\n\nAs a python module\n------------------\n\nTo use PyTTS as a module, you just need to import the module and instanciate a pytts object. Then you can for instance call the \"say\" method to speech the given text.\n\n    from pytts import pytts\n    pytts().say(\"Hello world !\",\"en\")\n\nThe available methods for pytts are:\n\nsay(self, text, lang='en', volume=5.0)\n  Speech the given text, and return when its done.\n\nsayNB(self, text, lang='en', volume=5.0)\n  Same as say but non-blocking method. NB (for non blocking)\n\ndownload(self, text, lang='en', filename=\"translate_tts.mp3\")\n  Download the mp3 speech file instead of playing it. (Into the given file path)\n\nsetVolume(self, val)\n  Put the player volume at the given value", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/RobinDavid/pytts", "keywords": null, "license": "LGPL", "maintainer": null, "maintainer_email": null, "name": "ttspy", "package_url": "https://pypi.org/project/ttspy/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/ttspy/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/RobinDavid/pytts"}, "release_url": "https://pypi.org/project/ttspy/1.0/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PyTTS is multi-platform Text-To-Speech module based on Google translate engine. Therefore it takes advantage of Google\u2019s mixed engines,\nand the 27 languages can be used.</p>\n<div id=\"requirement\">\n<h2>Requirement</h2>\n<p>PyTTS requires an internet connection because every request are sent to Google\u2019s engine.</p>\n<p>The python modules required are gstreamer and gobject. Gstreamer is used to read the speech stream from Google to play it back on Speakers.\nGobject is used to keep the handle while the speech is not played entirely. (Catch the gstreamer eos(End Of Stream) message)</p>\n</div>\n<div id=\"how-to-use-it\">\n<h2>How to use it ?</h2>\n<p>You can use this script either as a program either as a module. In both case it\u2019s usage is fairly easy.</p>\n</div>\n<div id=\"as-a-script\">\n<h2>As a script</h2>\n<p>To use it as a script you should give in first argument the language code followed by the text. Internaly it creates an pytts object and call the \u201csay\u201d methods which speech the text\nand return when the speech is done. Example:</p>\n<blockquote>\n./pytts en Hello world !</blockquote>\n</div>\n<div id=\"as-a-python-module\">\n<h2>As a python module</h2>\n<p>To use PyTTS as a module, you just need to import the module and instanciate a pytts object. Then you can for instance call the \u201csay\u201d method to speech the given text.</p>\n<blockquote>\nfrom pytts import pytts\npytts().say(\u201cHello world !\u201d,\u201den\u201d)</blockquote>\n<p>The available methods for pytts are:</p>\n<dl>\n<dt>say(self, text, lang=\u2019en\u2019, volume=5.0)</dt>\n<dd>Speech the given text, and return when its done.</dd>\n<dt>sayNB(self, text, lang=\u2019en\u2019, volume=5.0)</dt>\n<dd>Same as say but non-blocking method. NB (for non blocking)</dd>\n<dt>download(self, text, lang=\u2019en\u2019, filename=\u201dtranslate_tts.mp3\u201d)</dt>\n<dd>Download the mp3 speech file instead of playing it. (Into the given file path)</dd>\n<dt>setVolume(self, val)</dt>\n<dd>Put the player volume at the given value</dd>\n</dl>\n</div>\n\n          </div>"}, "last_serial": 763765, "releases": {"1.0": []}, "urls": [], "timestamp": "Fri May  8 03:44:56 2020"}