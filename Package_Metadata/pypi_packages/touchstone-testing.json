{"info": {"author": "Shane Jansen", "author_email": "shanejjansen@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python :: 3"], "description": "Touchstone\n======\n![Unit Tests](https://github.com/shane-jansen/touchstone/workflows/Unit%20Tests/badge.svg?branch=develop)\n![Touchstone Tests](https://github.com/shane-jansen/touchstone/workflows/Touchstone%20Tests/badge.svg?branch=develop)\n\nTouchstone is a testing framework for your services that focuses on [component](https://martinfowler.com/articles/microservice-testing/#testing-component-out-of-process-diagram), [end-to-end](https://martinfowler.com/articles/microservice-testing/#testing-end-to-end-introduction), and [exploratory](https://martinfowler.com/bliki/ExploratoryTesting.html) testing.  \n\n\n## Introduction\n![Testing Pyramid](./docs/images/testing-pyramid.png)  \n[Image Credit](https://martinfowler.com/articles/microservice-testing/#conclusion-test-pyramid)\n\nTouchstone aims to simplify the top three pieces of the testing pyramid by providing mock implementations of common service dependencies and exposing them via an easy to use testing framework. Whether your app is written in Java, Python, Go, C#, [Fortran](https://www.fortran.io/), or any other language, Touchstone handles its dependencies while you focus on writing tests. Not a single line of component or end-to-end testing code needs to change should you decide to refactor or rewrite your service.\n\n\n## Use Case\nLet's say we are building a microservice that is responsible for managing users. The service exposes a REST API and the requirements for each endpoint are as follows:\n * `GET /user/{id}` - A user is retrieved from a relational database and returned.\n * `POST /user` - A new user is submitted with a first name and last name. An HTTP call is made to an _Email Service_ where an email is returned for that user. The new user is then saved in a relational database and returned.\n * `PUT /user` - A user's id, first name, last name, and email are submitted and then updated in a relational database.\n * `DELETE /user/{id}` - A user is deleted from a relational database. A message is also published to a broker on the exchange: 'user.exchange' with a routing key of: 'user-deleted' and a payload containing the user's id.\n * The service is also listening for messages published to the exchange: 'order-placed.exchange'. When a message is received, the order payload is saved to a NoSQL database.\n\nWith Touchstone, it is possible to write component and end-to-end tests for all of the above requirements independent of the language/framework used. For example, we can write a component test for the `DELETE /user/{id}` endpoint that will ensure the user record is removed from the database and a message is published to the correct exchange with the correct payload. When ran, Touchstone will monitor mock instances of the service's dependencies to ensure the requirements are met. Touchstone also makes it easy to perform exploratory testing locally during development by starting dependencies and populating them with data in a single command.\n\nAn example of the above requirements is implemented in a Java/Spring service in this repo. Touchstone tests have been written to test the [user endpoint requirements](./examples/java-spring/touchstone/tests/test_user.py) and [order messaging requirements](./examples/java-spring/touchstone/tests/test_order.py).\n\n\n## Installation\n`pip install touchstone-testing`\n\nRequirements:\n * Python 3.6+\n * Docker\n\n\n## Usage\nAfter installation, Touchstone will be available via `touchstone` in your terminal.  \nTouchstone has three basic commands:\n * `touchstone init` - Initialize Touchstone in the current directory. Used for new projects.\n * `touchstone run` - Run all Touchstone tests and exit. This is typically how you would run your Touchstone tests on a build server. Ports will be auto-discovered in this mode to avoid collisions in case multiple runs occur on the same host. See [mocks docs](#mocks) for more information on how to hook into auto-discovered ports.\n * `touchstone develop` - Start a development session of Touchstone. You would typically use this to develop/debug a service locally. This will keep service dependencies running while you make changes to your Touchstone tests or the services themselves. This will also provide a web interface to each mock dependency for additional debugging. Mocked dependencies can be altered or reset on the fly to make exploratory testing easier.\n\nAfter running `touchstone init`, a new directory will be created with the following contents:\n\n### `/touchstone.yml`\n[Example](./examples/java-spring/touchstone/touchstone.yml)  \nYour services and their monitored dependencies are defined here. Default values should be enough in most cases.\n * `host:` - Default: localhost. The host where your services are running.\n * `services:` - Each service included in your Touchstone tests is defined here.\n   * `name:` - Default: unnamed-service. The name of the service.\n   * `tests:` - Default: ./tests. The path to Touchstone tests for this service.\n   * `host:` - Default: parent host. Fine-grained host control per service.\n   * `port:` - Default: 8080. The port used for this service.\n   * `dockerfile:` - Default: N/A. Used to containerize the service during `touchstone run`. If you are only running Touchstone locally, this can be omitted.\n   * `availability_endpoint:` - Default: N/A. Used to determine when the service is healthy so tests can be executed. A HTTP status `2xx` must be returned from the endpoint to be considered healthy.\n   * `num_retries:` - Default: 20. The number of times Touchstone will try to successfully call the `availability_endpoint`.\n   * `seconds_between_retries:` - Default: 5. The number of seconds between each retry.\n * `mocks:` - Each mock dependency your service(s) are being tested against.\n   * This is how Touchstone determines which mocked dependencies should be started.\n   * View each [mock's docs](#mocks) for values and additional configuration.\n\n### `/defaults`\n[Example](./examples/java-spring/touchstone/defaults/mysql.yml)  \nThis directory contains YAML files where default values for mocked dependencies are defined. Defaults make it easy to test your service(s) locally by setting up your mock dependencies with sensible defaults. The name of each YAML file should match the name of a mock. For instance, with the MySQL mock, a `mysql.yml` file would contain default databases and tables to be created as well as statements to insert initial data. View each [mock's docs](#mocks) for allowable values.\n\n\n### `/tests`\n[Example](./examples/java-spring/touchstone/tests)  \nThis directory is the default location for your Touchstone tests. This can optionally be configured for each service in `touchstone.yml`.  \nTouchstone follows a _given_, _when_, _then_ testing pattern. Each test is declared in a Python file prefixed with `test_` containing classes that extend `TouchstoneTest`. By extending this class, you can access Touchstone mocked dependencies to setup and then verify your requirements. For example, we can insert a document into a Mongo DB collection and then verify it exists using the following APIs:\n```python\nself.mocks.mongodb.setup.insert_document('my_db', 'my_collection', {'foo': 'bar'})\nresult: bool = self.mocks.mongodb.verify.document_exists('my_db', 'my_collection', {'foo': 'bar'})\n```\nImportant APIs:\n * `self.mocks` - Hook into Touchstone managed mock dependencies.\n * `self.service_url` - The service under test's URL. Useful for calling RESTful endpoints on the service under test.\n * `touchstone.lib.mocks.validation` - Contains methods for validating test results. `validation.ANY` can be used to accept any value which is useful in some circumstances.\n\n## Mocks\n * [HTTP](./docs/mocks/http.md)\n * [Mongo DB](./docs/mocks/mongodb.md)\n * [MySQL](./docs/mocks/mysql.md)\n * [Rabbit MQ](./docs/mocks/rabbitmq.md)\n * [S3](./docs/mocks/s3.md)\n * [Add one!](./docs/add-mock.md)\n\nIf a specific mock is not supported, consider building your service independent of the implementation layer. For example, if have a dependency on PostgreSQL, use the MySQL mock as your database implementation during testing.\n\nWhen running via `touchstone develop`, dev ports for each mock are used. When running touchstone via `touchstone run`, ports are automatically discovered and available to your service containers via the following environment variables:\n * `TS_{MOCK_NAME}_HOST` - Host where the mock is running.\n * `TS_{MOCK_NAME}_PORT` - Port where the mock is running.\n * `TS_{MOCK_NAME}_URL` - Complete URL where the mock is running.\n * `TS_{MOCK_NAME}_USERNAME` - Username for authenticating with the mock.\n * `TS_{MOCK_NAME}_PASSWORD` - Password for authenticating with the mock.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/shane-jansen/touchstone", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "touchstone-testing", "package_url": "https://pypi.org/project/touchstone-testing/", "platform": "", "project_url": "https://pypi.org/project/touchstone-testing/", "project_urls": {"Homepage": "https://github.com/shane-jansen/touchstone"}, "release_url": "https://pypi.org/project/touchstone-testing/1.0.0/", "requires_dist": ["pyfiglet (~=0.8)", "click (~=7.0)", "pika (~=1.1)", "pyyaml (~=5.2)", "pymongo (~=3.10)", "pymysql (~=0.9.3)", "minio (~=5.0.7)"], "requires_python": ">=3.6", "summary": "Touchstone is a testing framework for your services that focuses on end-to-end and exploratory testing.", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Touchstone</h1>\n<p><img alt=\"Unit Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/780b186a2fd90ad2e013051e21ce3275347c0ae7/68747470733a2f2f6769746875622e636f6d2f7368616e652d6a616e73656e2f746f75636873746f6e652f776f726b666c6f77732f556e697425323054657374732f62616467652e7376673f6272616e63683d646576656c6f70\">\n<img alt=\"Touchstone Tests\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6ffe19de443ab2a6339f0e795dcaa17aabf1f3ae/68747470733a2f2f6769746875622e636f6d2f7368616e652d6a616e73656e2f746f75636873746f6e652f776f726b666c6f77732f546f75636873746f6e6525323054657374732f62616467652e7376673f6272616e63683d646576656c6f70\"></p>\n<p>Touchstone is a testing framework for your services that focuses on <a href=\"https://martinfowler.com/articles/microservice-testing/#testing-component-out-of-process-diagram\" rel=\"nofollow\">component</a>, <a href=\"https://martinfowler.com/articles/microservice-testing/#testing-end-to-end-introduction\" rel=\"nofollow\">end-to-end</a>, and <a href=\"https://martinfowler.com/bliki/ExploratoryTesting.html\" rel=\"nofollow\">exploratory</a> testing.</p>\n<h2>Introduction</h2>\n<p><img alt=\"Testing Pyramid\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e1b996fce354b017347c865fe098c1426e0908d6/2e2f646f63732f696d616765732f74657374696e672d707972616d69642e706e67\"><br>\n<a href=\"https://martinfowler.com/articles/microservice-testing/#conclusion-test-pyramid\" rel=\"nofollow\">Image Credit</a></p>\n<p>Touchstone aims to simplify the top three pieces of the testing pyramid by providing mock implementations of common service dependencies and exposing them via an easy to use testing framework. Whether your app is written in Java, Python, Go, C#, <a href=\"https://www.fortran.io/\" rel=\"nofollow\">Fortran</a>, or any other language, Touchstone handles its dependencies while you focus on writing tests. Not a single line of component or end-to-end testing code needs to change should you decide to refactor or rewrite your service.</p>\n<h2>Use Case</h2>\n<p>Let's say we are building a microservice that is responsible for managing users. The service exposes a REST API and the requirements for each endpoint are as follows:</p>\n<ul>\n<li><code>GET /user/{id}</code> - A user is retrieved from a relational database and returned.</li>\n<li><code>POST /user</code> - A new user is submitted with a first name and last name. An HTTP call is made to an <em>Email Service</em> where an email is returned for that user. The new user is then saved in a relational database and returned.</li>\n<li><code>PUT /user</code> - A user's id, first name, last name, and email are submitted and then updated in a relational database.</li>\n<li><code>DELETE /user/{id}</code> - A user is deleted from a relational database. A message is also published to a broker on the exchange: 'user.exchange' with a routing key of: 'user-deleted' and a payload containing the user's id.</li>\n<li>The service is also listening for messages published to the exchange: 'order-placed.exchange'. When a message is received, the order payload is saved to a NoSQL database.</li>\n</ul>\n<p>With Touchstone, it is possible to write component and end-to-end tests for all of the above requirements independent of the language/framework used. For example, we can write a component test for the <code>DELETE /user/{id}</code> endpoint that will ensure the user record is removed from the database and a message is published to the correct exchange with the correct payload. When ran, Touchstone will monitor mock instances of the service's dependencies to ensure the requirements are met. Touchstone also makes it easy to perform exploratory testing locally during development by starting dependencies and populating them with data in a single command.</p>\n<p>An example of the above requirements is implemented in a Java/Spring service in this repo. Touchstone tests have been written to test the <a href=\"./examples/java-spring/touchstone/tests/test_user.py\" rel=\"nofollow\">user endpoint requirements</a> and <a href=\"./examples/java-spring/touchstone/tests/test_order.py\" rel=\"nofollow\">order messaging requirements</a>.</p>\n<h2>Installation</h2>\n<p><code>pip install touchstone-testing</code></p>\n<p>Requirements:</p>\n<ul>\n<li>Python 3.6+</li>\n<li>Docker</li>\n</ul>\n<h2>Usage</h2>\n<p>After installation, Touchstone will be available via <code>touchstone</code> in your terminal.<br>\nTouchstone has three basic commands:</p>\n<ul>\n<li><code>touchstone init</code> - Initialize Touchstone in the current directory. Used for new projects.</li>\n<li><code>touchstone run</code> - Run all Touchstone tests and exit. This is typically how you would run your Touchstone tests on a build server. Ports will be auto-discovered in this mode to avoid collisions in case multiple runs occur on the same host. See <a href=\"#mocks\" rel=\"nofollow\">mocks docs</a> for more information on how to hook into auto-discovered ports.</li>\n<li><code>touchstone develop</code> - Start a development session of Touchstone. You would typically use this to develop/debug a service locally. This will keep service dependencies running while you make changes to your Touchstone tests or the services themselves. This will also provide a web interface to each mock dependency for additional debugging. Mocked dependencies can be altered or reset on the fly to make exploratory testing easier.</li>\n</ul>\n<p>After running <code>touchstone init</code>, a new directory will be created with the following contents:</p>\n<h3><code>/touchstone.yml</code></h3>\n<p><a href=\"./examples/java-spring/touchstone/touchstone.yml\" rel=\"nofollow\">Example</a><br>\nYour services and their monitored dependencies are defined here. Default values should be enough in most cases.</p>\n<ul>\n<li><code>host:</code> - Default: localhost. The host where your services are running.</li>\n<li><code>services:</code> - Each service included in your Touchstone tests is defined here.\n<ul>\n<li><code>name:</code> - Default: unnamed-service. The name of the service.</li>\n<li><code>tests:</code> - Default: ./tests. The path to Touchstone tests for this service.</li>\n<li><code>host:</code> - Default: parent host. Fine-grained host control per service.</li>\n<li><code>port:</code> - Default: 8080. The port used for this service.</li>\n<li><code>dockerfile:</code> - Default: N/A. Used to containerize the service during <code>touchstone run</code>. If you are only running Touchstone locally, this can be omitted.</li>\n<li><code>availability_endpoint:</code> - Default: N/A. Used to determine when the service is healthy so tests can be executed. A HTTP status <code>2xx</code> must be returned from the endpoint to be considered healthy.</li>\n<li><code>num_retries:</code> - Default: 20. The number of times Touchstone will try to successfully call the <code>availability_endpoint</code>.</li>\n<li><code>seconds_between_retries:</code> - Default: 5. The number of seconds between each retry.</li>\n</ul>\n</li>\n<li><code>mocks:</code> - Each mock dependency your service(s) are being tested against.\n<ul>\n<li>This is how Touchstone determines which mocked dependencies should be started.</li>\n<li>View each <a href=\"#mocks\" rel=\"nofollow\">mock's docs</a> for values and additional configuration.</li>\n</ul>\n</li>\n</ul>\n<h3><code>/defaults</code></h3>\n<p><a href=\"./examples/java-spring/touchstone/defaults/mysql.yml\" rel=\"nofollow\">Example</a><br>\nThis directory contains YAML files where default values for mocked dependencies are defined. Defaults make it easy to test your service(s) locally by setting up your mock dependencies with sensible defaults. The name of each YAML file should match the name of a mock. For instance, with the MySQL mock, a <code>mysql.yml</code> file would contain default databases and tables to be created as well as statements to insert initial data. View each <a href=\"#mocks\" rel=\"nofollow\">mock's docs</a> for allowable values.</p>\n<h3><code>/tests</code></h3>\n<p><a href=\"./examples/java-spring/touchstone/tests\" rel=\"nofollow\">Example</a><br>\nThis directory is the default location for your Touchstone tests. This can optionally be configured for each service in <code>touchstone.yml</code>.<br>\nTouchstone follows a <em>given</em>, <em>when</em>, <em>then</em> testing pattern. Each test is declared in a Python file prefixed with <code>test_</code> containing classes that extend <code>TouchstoneTest</code>. By extending this class, you can access Touchstone mocked dependencies to setup and then verify your requirements. For example, we can insert a document into a Mongo DB collection and then verify it exists using the following APIs:</p>\n<pre><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"o\">.</span><span class=\"n\">insert_document</span><span class=\"p\">(</span><span class=\"s1\">'my_db'</span><span class=\"p\">,</span> <span class=\"s1\">'my_collection'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n<span class=\"n\">result</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">mocks</span><span class=\"o\">.</span><span class=\"n\">mongodb</span><span class=\"o\">.</span><span class=\"n\">verify</span><span class=\"o\">.</span><span class=\"n\">document_exists</span><span class=\"p\">(</span><span class=\"s1\">'my_db'</span><span class=\"p\">,</span> <span class=\"s1\">'my_collection'</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s1\">'foo'</span><span class=\"p\">:</span> <span class=\"s1\">'bar'</span><span class=\"p\">})</span>\n</pre>\n<p>Important APIs:</p>\n<ul>\n<li><code>self.mocks</code> - Hook into Touchstone managed mock dependencies.</li>\n<li><code>self.service_url</code> - The service under test's URL. Useful for calling RESTful endpoints on the service under test.</li>\n<li><code>touchstone.lib.mocks.validation</code> - Contains methods for validating test results. <code>validation.ANY</code> can be used to accept any value which is useful in some circumstances.</li>\n</ul>\n<h2>Mocks</h2>\n<ul>\n<li><a href=\"./docs/mocks/http.md\" rel=\"nofollow\">HTTP</a></li>\n<li><a href=\"./docs/mocks/mongodb.md\" rel=\"nofollow\">Mongo DB</a></li>\n<li><a href=\"./docs/mocks/mysql.md\" rel=\"nofollow\">MySQL</a></li>\n<li><a href=\"./docs/mocks/rabbitmq.md\" rel=\"nofollow\">Rabbit MQ</a></li>\n<li><a href=\"./docs/mocks/s3.md\" rel=\"nofollow\">S3</a></li>\n<li><a href=\"./docs/add-mock.md\" rel=\"nofollow\">Add one!</a></li>\n</ul>\n<p>If a specific mock is not supported, consider building your service independent of the implementation layer. For example, if have a dependency on PostgreSQL, use the MySQL mock as your database implementation during testing.</p>\n<p>When running via <code>touchstone develop</code>, dev ports for each mock are used. When running touchstone via <code>touchstone run</code>, ports are automatically discovered and available to your service containers via the following environment variables:</p>\n<ul>\n<li><code>TS_{MOCK_NAME}_HOST</code> - Host where the mock is running.</li>\n<li><code>TS_{MOCK_NAME}_PORT</code> - Port where the mock is running.</li>\n<li><code>TS_{MOCK_NAME}_URL</code> - Complete URL where the mock is running.</li>\n<li><code>TS_{MOCK_NAME}_USERNAME</code> - Username for authenticating with the mock.</li>\n<li><code>TS_{MOCK_NAME}_PASSWORD</code> - Password for authenticating with the mock.</li>\n</ul>\n\n          </div>"}, "last_serial": 7106475, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "0a5b8a51d2f40cbb8a92e4e94b895939", "sha256": "c3f57a9b555155ff7b6aecb29d72980ba8b535862f7fb0ee3ed00d4a7fd4441c"}, "downloads": -1, "filename": "touchstone_testing-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0a5b8a51d2f40cbb8a92e4e94b895939", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36498, "upload_time": "2020-01-30T20:37:39", "upload_time_iso_8601": "2020-01-30T20:37:39.954813Z", "url": "https://files.pythonhosted.org/packages/f3/d4/c460829cd812b214fdb3dccf57c78b8ef8f1b5f80bfc7fef1f52dab828b7/touchstone_testing-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "91ac5732fa510f23fa891dfd09fd1964", "sha256": "167f2fac41dba1340dc496b7910fe2b43f5fb8a168798653689e7573636968d6"}, "downloads": -1, "filename": "touchstone-testing-0.1.0.tar.gz", "has_sig": false, "md5_digest": "91ac5732fa510f23fa891dfd09fd1964", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22040, "upload_time": "2020-01-30T20:37:42", "upload_time_iso_8601": "2020-01-30T20:37:42.773764Z", "url": "https://files.pythonhosted.org/packages/c2/69/0260547be71313305b5c7d13bd3a6a69cdd1a3655ac719426e8d45a71479/touchstone-testing-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e9877a0618147558c734e4ef5c8a7156", "sha256": "25e19eed058cab610bc815f0537a1609aa71e00753813d4f58b7a113eb2a1e4d"}, "downloads": -1, "filename": "touchstone_testing-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9877a0618147558c734e4ef5c8a7156", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 36609, "upload_time": "2020-02-07T04:12:47", "upload_time_iso_8601": "2020-02-07T04:12:47.145282Z", "url": "https://files.pythonhosted.org/packages/f9/f7/8bcf29db9f233b7e0d89d6058e79d386b7313fdef93fa8c812fd9b457059/touchstone_testing-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "82943817914514b79794ed911463712a", "sha256": "008005075f630cff20d5f63a0c61e554b758baa62584b86139b51bae3f160083"}, "downloads": -1, "filename": "touchstone-testing-0.1.1.tar.gz", "has_sig": false, "md5_digest": "82943817914514b79794ed911463712a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 22472, "upload_time": "2020-02-07T04:12:48", "upload_time_iso_8601": "2020-02-07T04:12:48.979671Z", "url": "https://files.pythonhosted.org/packages/fb/63/3adbbcceb1b54431bddd119458bb7b56146f2411655714883f1a41d057bf/touchstone-testing-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e0ccbaaf7d2f16ec824ea32a3c2e7009", "sha256": "8a48d96fe98777003f8b9d01dd0d4078ae3262a6ac61901f951e0707f03ed989"}, "downloads": -1, "filename": "touchstone_testing-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e0ccbaaf7d2f16ec824ea32a3c2e7009", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 38068, "upload_time": "2020-02-20T20:12:55", "upload_time_iso_8601": "2020-02-20T20:12:55.242012Z", "url": "https://files.pythonhosted.org/packages/4c/d6/5619f9a158c4e5b98fe33440870ce5c2532ac5e7f33a7c05acd9aba230c4/touchstone_testing-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51915a6f1b2f54f6bde20696d808d7a3", "sha256": "1105ab22fee12834bc0f44a290dd496ac211175ee9eee95dd7996012ed3e57d4"}, "downloads": -1, "filename": "touchstone-testing-0.1.2.tar.gz", "has_sig": false, "md5_digest": "51915a6f1b2f54f6bde20696d808d7a3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 23547, "upload_time": "2020-02-20T20:12:56", "upload_time_iso_8601": "2020-02-20T20:12:56.667653Z", "url": "https://files.pythonhosted.org/packages/8a/fe/0409442332be89b6a3e519f61353d71bddde9d22d11bdb900188f232299a/touchstone-testing-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "42397eed734dbc0891890436ebeed7a0", "sha256": "7d0cbc71477cba798acb4b840fb77a97eb1b562f1b62e5ff387b31511b92503d"}, "downloads": -1, "filename": "touchstone_testing-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "42397eed734dbc0891890436ebeed7a0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 40967, "upload_time": "2020-04-10T14:46:50", "upload_time_iso_8601": "2020-04-10T14:46:50.905284Z", "url": "https://files.pythonhosted.org/packages/9b/b3/72286a11a104af81ee5cf79007422e54516eae823fbc18a6fccd321dc9d6/touchstone_testing-0.1.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "09a8e4ac60ad5e24de9cca9728f1c235", "sha256": "afde0d760aa75500667909d7d450989b1ca98e672c59f9575f98d88a8d5eb604"}, "downloads": -1, "filename": "touchstone-testing-0.1.3.tar.gz", "has_sig": false, "md5_digest": "09a8e4ac60ad5e24de9cca9728f1c235", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26435, "upload_time": "2020-04-10T14:46:51", "upload_time_iso_8601": "2020-04-10T14:46:51.882176Z", "url": "https://files.pythonhosted.org/packages/3e/4a/2da1b69959c5293aeb4c72acb8180085337fa7cdd07b4f58e53b27b26a45/touchstone-testing-0.1.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "339463af2d783e23ed023d280152cf8f", "sha256": "d05384b9f3b1961fa250821887ed83c72a7a3221588454f352370ab5fc55b7ac"}, "downloads": -1, "filename": "touchstone_testing-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "339463af2d783e23ed023d280152cf8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41023, "upload_time": "2020-04-26T19:22:57", "upload_time_iso_8601": "2020-04-26T19:22:57.518138Z", "url": "https://files.pythonhosted.org/packages/35/fa/30200e39523d4f2bca7c2d83dcff7fcdf6f4a489f4dd40c61ec0541182f1/touchstone_testing-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae218f0f7345dd14da355e150f1e5dc0", "sha256": "76ae745824fa5d50e67da910a467dd259748cb437bfcac23ad7992b2e6a6ef68"}, "downloads": -1, "filename": "touchstone-testing-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae218f0f7345dd14da355e150f1e5dc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26500, "upload_time": "2020-04-26T19:22:58", "upload_time_iso_8601": "2020-04-26T19:22:58.450386Z", "url": "https://files.pythonhosted.org/packages/77/69/c52c9d5139a4005d47cd1a186b8cabc426de89c397b90a92e994a5c890ef/touchstone-testing-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "339463af2d783e23ed023d280152cf8f", "sha256": "d05384b9f3b1961fa250821887ed83c72a7a3221588454f352370ab5fc55b7ac"}, "downloads": -1, "filename": "touchstone_testing-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "339463af2d783e23ed023d280152cf8f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 41023, "upload_time": "2020-04-26T19:22:57", "upload_time_iso_8601": "2020-04-26T19:22:57.518138Z", "url": "https://files.pythonhosted.org/packages/35/fa/30200e39523d4f2bca7c2d83dcff7fcdf6f4a489f4dd40c61ec0541182f1/touchstone_testing-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae218f0f7345dd14da355e150f1e5dc0", "sha256": "76ae745824fa5d50e67da910a467dd259748cb437bfcac23ad7992b2e6a6ef68"}, "downloads": -1, "filename": "touchstone-testing-1.0.0.tar.gz", "has_sig": false, "md5_digest": "ae218f0f7345dd14da355e150f1e5dc0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 26500, "upload_time": "2020-04-26T19:22:58", "upload_time_iso_8601": "2020-04-26T19:22:58.450386Z", "url": "https://files.pythonhosted.org/packages/77/69/c52c9d5139a4005d47cd1a186b8cabc426de89c397b90a92e994a5c890ef/touchstone-testing-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:49:27 2020"}