{"info": {"author": "Volodymyr Buell", "author_email": "vbuell@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: Apache Software License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# javaobj-py3\n\n<p>\n    <a href=\"https://pypi.python.org/pypi/javaobj-py3/\">\n        <img src=\"https://img.shields.io/pypi/v/javaobj-py3.svg\" alt=\"Latest Version\" />\n        <img src=\"https://img.shields.io/pypi/l/javaobj-py3.svg\" alt=\"License\" />\n    </a>\n    <a href=\"https://travis-ci.org/tcalmant/python-javaobj\">\n    <img src=\"https://travis-ci.org/tcalmant/python-javaobj.svg?branch=master\"\n        alt=\"Travis-CI status\" />\n    </a>\n    <a href=\"https://coveralls.io/r/tcalmant/python-javaobj?branch=master\">\n        <img src=\"https://coveralls.io/repos/tcalmant/python-javaobj/badge.svg?branch=master\"\n            alt=\"Coveralls status\" />\n    </a>\n</p>\n\n*python-javaobj* is a python library that provides functions for reading and\nwriting (writing is WIP currently) Java objects serialized or will be\ndeserialized by `ObjectOutputStream`. This form of object representation is a\nstandard data interchange format in Java world.\n\nThe `javaobj` module exposes an API familiar to users of the standard library\n`marshal`, `pickle` and `json` modules.\n\n## About this repository\n\nThis project is a fork of *python-javaobj* by Volodymyr Buell, originally from\n[Google Code](http://code.google.com/p/python-javaobj/) and now hosted on\n[GitHub](https://github.com/vbuell/python-javaobj).\n\nThis fork intends to work both on Python 2.7 and Python 3.4+.\n\n## Compatibility Warnings\n\n### New implementation of the parser\n\n| Implementations | Version  |\n|-----------------|----------|\n| `v1`, `v2`      | `0.4.0+` |\n\nSince version 0.4.0, two implementations of the parser are available:\n\n* `v1`: the *classic* implementation of `javaobj`, with a work in progress\n  implementation of a writer.\n* `v2`: the *new* implementation, which is a port of the Java project\n  [`jdeserialize`](https://github.com/frohoff/jdeserialize/),\n  with support of the object transformer (with a new API) and of the `numpy`\n  arrays loading.\n\nYou can use the `v1` parser to ensure that the behaviour of your scripts\ndoesn't change and to keep the ability to write down files.\n\nYou can use the `v2` parser for new developments\n*which won't require marshalling* and as a *fallback* if the `v1`\nfails to parse a file.\n\n### Object transformers V1\n\n| Implementations | Version  |\n|-----------------|----------|\n| `v1`            | `0.2.0+` |\n\nAs of version 0.2.0, the notion of *object transformer* from the original\nproject as been replaced by an *object creator*.\n\nThe *object creator* is called before the deserialization.\nThis allows to store the reference of the converted object before deserializing\nit, and avoids a mismatch between the referenced object and the transformed one.\n\n### Object transformers V2\n\n| Implementations | Version  |\n|-----------------|----------|\n| `v2`            | `0.4.0+` |\n\nThe `v2` implementation provides a new API for the object transformers.\nPlease look at the *Usage (V2)* section in this file.\n\n### Bytes arrays\n\n| Implementations | Version  |\n|-----------------|----------|\n| `v1`            | `0.2.3+` |\n\nAs of version 0.2.3, bytes arrays are loaded as a `bytes` object instead of\nan array of integers.\n\n### Custom Transformer\n\n| Implementations | Version  |\n|-----------------|----------|\n| `v2`            | `0.4.1+` |\n\nA new transformer API has been proposed to handle objects written with a custom\nJava writer.\nYou can find a sample usage in the *Custom Transformer* section in this file.\n\n## Features\n\n* Java object instance un-marshalling\n* Java classes un-marshalling\n* Primitive values un-marshalling\n* Automatic conversion of Java Collections to python ones\n  (`HashMap` => `dict`, `ArrayList` => `list`, etc.)\n* Basic marshalling of simple Java objects (`v1` implementation only)\n\n## Requirements\n\n* Python >= 2.7 or Python >= 3.4\n* `enum34` and `typing` when using Python <= 3.4 (installable with `pip`)\n* Maven 2+ (for building test data of serialized objects.\n  You can skip it if you do not plan to run `tests.py`)\n\n## Usage (V1 implementation)\n\nUn-marshalling of Java serialised object:\n\n```python\nimport javaobj\n\nwith open(\"obj5.ser\", \"rb\") as fd:\n    jobj = fd.read()\n\npobj = javaobj.loads(jobj)\nprint(pobj)\n```\n\nOr, you can use `JavaObjectUnmarshaller` object directly:\n\n```python\nimport javaobj\n\nwith open(\"objCollections.ser\", \"rb\") as fd:\n    marshaller = javaobj.JavaObjectUnmarshaller(fd)\n    pobj = marshaller.readObject()\n\n    print(pobj.value, \"should be\", 17)\n    print(pobj.next, \"should be\", True)\n\n    pobj = marshaller.readObject()\n```\n\n**Note:** The objects and methods provided by `javaobj` module are shortcuts\nto the `javaobj.v1` package, for Compatibility purpose.\nIt is **recommended** to explicitly import methods and classes from the `v1`\n(or `v2`) package when writing new code, in order to be sure that your code\nwon't need import updates in the future.\n\n\n## Usage (V2 implementation)\n\nThe following methods are provided by the `javaobj.v2` package:\n\n* `load(fd, *transformers, use_numpy_arrays=False)`:\n  Parses the content of the given file descriptor, opened in binary mode (`rb`).\n  The method accepts a list of custom object transformers. The default object\n  transformer is always added to the list.\n\n  The `use_numpy_arrays` flag indicates that the arrays of primitive type\n  elements must be loaded using `numpy` (if available) instead of using the\n  standard parsing technic.\n\n* `loads(bytes, *transformers, use_numpy_arrays=False)`:\n  This the a shortcut to the `load()` method, providing it the binary data\n  using a `BytesIO` object.\n\n**Note:** The V2 parser doesn't have the marshalling capability.\n\nSample usage:\n\n```python\nimport javaobj.v2 as javaobj\n\nwith open(\"obj5.ser\", \"rb\") as fd:\n    pobj = javaobj.load(fd)\n\nprint(pobj.dump())\n```\n\n### Object Transformer\n\nAn object transformer can be called during the parsing of a Java object\ninstance or while loading an array.\n\nThe Java object instance parsing works in two main steps:\n\n1. The transformer is called to create an instance of a bean that inherits\n   `JavaInstance`.\n1. The latter bean is then called:\n\n   * When the object is written with a custom block data\n   * After the fields and annotations have been parsed, to update the content\n   of the Python bean.\n\nHere is an example for a Java `HashMap` object. You can look at the code of\nthe `javaobj.v2.transformer` module to see the whole implementation.\n\n```python\nclass JavaMap(dict, javaobj.v2.beans.JavaInstance):\n    \"\"\"\n    Inherits from dict for Python usage, JavaInstance for parsing purpose\n    \"\"\"\n    def __init__(self):\n        # Don't forget to call both constructors\n        dict.__init__(self)\n        JavaInstance.__init__(self)\n\n    def load_from_blockdata(self, parser, reader, indent=0):\n    \"\"\"\n    Reads content stored in a block data.\n\n    This method is called only if the class description has both the\n    `SC_EXTERNALIZABLE` and `SC_BLOCK_DATA` flags set.\n\n    The stream parsing will stop and fail if this method returns False.\n\n    :param parser: The JavaStreamParser in use\n    :param reader: The underlying data stream reader\n    :param indent: Indentation to use in logs\n    :return: True on success, False on error\n    \"\"\"\n    # This kind of class is not supposed to have the SC_BLOCK_DATA flag set\n    return False\n\n    def load_from_instance(self, indent=0):\n        # type: (int) -> bool\n        \"\"\"\n        Load content from the parsed instance object.\n\n        This method is called after the block data (if any), the fields and\n        the annotations have been loaded.\n\n        :param indent: Indentation to use while logging\n        :return: True on success (currently ignored)\n        \"\"\"\n        # Maps have their content in their annotations\n        for cd, annotations in self.annotations.items():\n            # Annotations are associated to their definition class\n            if cd.name == \"java.util.HashMap\":\n                # We are in the annotation created by the handled class\n                # Group annotation elements 2 by 2\n                # (storage is: key, value, key, value, ...)\n                args = [iter(annotations[1:])] * 2\n                for key, value in zip(*args):\n                    self[key] = value\n\n                # Job done\n                return True\n\n        # Couldn't load the data\n        return False\n\nclass MapObjectTransformer(javaobj.v2.api.ObjectTransformer):\n    \"\"\"\n    Creates a JavaInstance object with custom loading methods for the\n    classes it can handle\n    \"\"\"\n    def create_instance(self, classdesc):\n        # type: (JavaClassDesc) -> Optional[JavaInstance]\n        \"\"\"\n        Transforms a parsed Java object into a Python object\n\n        :param classdesc: The description of a Java class\n        :return: The Python form of the object, or the original JavaObject\n        \"\"\"\n        if classdesc.name == \"java.util.HashMap\":\n            # We can handle this class description\n            return JavaMap()\n        else:\n            # Return None if the class is not handled\n            return None\n```\n\n### Custom Object Transformer\n\nThe custom transformer is called when the class is not handled by the default\nobject transformer.\nA custom object transformer still inherits from the `ObjectTransformer` class,\nbut it also implements the `load_custom_writeObject` method.\n\nThe sample given here is used in the unit tests.\n\n#### Java sample\n\nOn the Java side, we create various classes and write them as we wish:\n\n```java\nclass CustomClass implements Serializable {\n\n    private static final long serialVersionUID = 1;\n\n    public void start(ObjectOutputStream out) throws Exception {\n        this.writeObject(out);\n    }\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        CustomWriter custom = new CustomWriter(42);\n        out.writeObject(custom);\n        out.flush();\n    }\n}\n\nclass RandomChild extends Random {\n\n    private static final long serialVersionUID = 1;\n    private int num = 1;\n    private double doub = 4.5;\n\n    RandomChild(int seed) {\n        super(seed);\n    }\n}\n\nclass CustomWriter implements Serializable {\n    protected RandomChild custom_obj;\n\n    CustomWriter(int seed) {\n        custom_obj = new RandomChild(seed);\n    }\n\n    private static final long serialVersionUID = 1;\n    private static final int CURRENT_SERIAL_VERSION = 0;\n\n    private void writeObject(ObjectOutputStream out) throws IOException {\n        out.writeInt(CURRENT_SERIAL_VERSION);\n        out.writeObject(custom_obj);\n    }\n}\n```\n\nAn here is a sample writing of that kind of object:\n\n```java\nObjectOutputStream oos = new ObjectOutputStream(\n    new FileOutputStream(\"custom_objects.ser\"));\nCustomClass writer = new CustomClass();\nwriter.start(oos);\noos.flush();\noos.close();\n```\n\n#### Python sample\n\nOn the Python side, the first step is to define the custom transformers.\nThey are children of the `javaobj.v2.transformers.ObjectTransformer` class.\n\n```python\nclass BaseTransformer(javaobj.v2.transformers.ObjectTransformer):\n    \"\"\"\n    Creates a JavaInstance object with custom loading methods for the\n    classes it can handle\n    \"\"\"\n\n    def __init__(self, handled_classes=None):\n        self.instance = None\n        self.handled_classes = handled_classes or {}\n\n    def create_instance(self, classdesc):\n        \"\"\"\n        Transforms a parsed Java object into a Python object\n\n        :param classdesc: The description of a Java class\n        :return: The Python form of the object, or the original JavaObject\n        \"\"\"\n        if classdesc.name in self.handled_classes:\n            self.instance = self.handled_classes[classdesc.name]()\n            return self.instance\n\n        return None\n\nclass RandomChildTransformer(BaseTransformer):\n    def __init__(self):\n        super(RandomChildTransformer, self).__init__(\n            {\"RandomChild\": RandomChildInstance}\n        )\n\nclass CustomWriterTransformer(BaseTransformer):\n    def __init__(self):\n        super(CustomWriterTransformer, self).__init__(\n            {\"CustomWriter\": CustomWriterInstance}\n        )\n\nclass JavaRandomTransformer(BaseTransformer):\n    def __init__(self):\n        super(JavaRandomTransformer, self).__init__()\n        self.name = \"java.util.Random\"\n        self.field_names = [\"haveNextNextGaussian\", \"nextNextGaussian\", \"seed\"]\n        self.field_types = [\n            javaobj.v2.beans.FieldType.BOOLEAN,\n            javaobj.v2.beans.FieldType.DOUBLE,\n            javaobj.v2.beans.FieldType.LONG,\n        ]\n\n    def load_custom_writeObject(self, parser, reader, name):\n        if name != self.name:\n            return None\n\n        fields = []\n        values = []\n        for f_name, f_type in zip(self.field_names, self.field_types):\n            values.append(parser._read_field_value(f_type))\n            fields.append(javaobj.beans.JavaField(f_type, f_name))\n\n        class_desc = javaobj.beans.JavaClassDesc(\n            javaobj.beans.ClassDescType.NORMALCLASS\n        )\n        class_desc.name = self.name\n        class_desc.desc_flags = javaobj.beans.ClassDataType.EXTERNAL_CONTENTS\n        class_desc.fields = fields\n        class_desc.field_data = values\n        return class_desc\n```\n\nSecond step is defining the representation of the instances, where the real\nobject loading occurs. Those classes inherit from\n`javaobj.v2.beans.JavaInstance`.\n\n```python\nclass CustomWriterInstance(javaobj.v2.beans.JavaInstance):\n    def __init__(self):\n        javaobj.v2.beans.JavaInstance.__init__(self)\n\n    def load_from_instance(self):\n        \"\"\"\n        Updates the content of this instance\n        from its parsed fields and annotations\n        :return: True on success, False on error\n        \"\"\"\n        if self.classdesc and self.classdesc in self.annotations:\n            # Here, we known there is something written before the fields,\n            # even if it's not declared in the class description\n            fields = [\"int_not_in_fields\"] + self.classdesc.fields_names\n            raw_data = self.annotations[self.classdesc]\n            int_not_in_fields = struct.unpack(\n                \">i\", BytesIO(raw_data[0].data).read(4)\n            )[0]\n            custom_obj = raw_data[1]\n            values = [int_not_in_fields, custom_obj]\n            self.field_data = dict(zip(fields, values))\n            return True\n\n        return False\n\n\nclass RandomChildInstance(javaobj.v2.beans.JavaInstance):\n    def load_from_instance(self):\n        \"\"\"\n        Updates the content of this instance\n        from its parsed fields and annotations\n        :return: True on success, False on error\n        \"\"\"\n        if self.classdesc and self.classdesc in self.field_data:\n            fields = self.classdesc.fields_names\n            values = [\n                self.field_data[self.classdesc][self.classdesc.fields[i]]\n                for i in range(len(fields))\n            ]\n            self.field_data = dict(zip(fields, values))\n            if (\n                self.classdesc.super_class\n                and self.classdesc.super_class in self.annotations\n            ):\n                super_class = self.annotations[self.classdesc.super_class][0]\n                self.annotations = dict(\n                    zip(super_class.fields_names, super_class.field_data)\n                )\n            return True\n\n        return False\n```\n\nFinally we can use the transformers in the loading process.\nNote that even if it is not explicitly given, the `DefaultObjectTransformer`\nwill be also be used, as it is added automatically by `javaobj` if it is\nmissing from the given list.\n\n```python\n# Load the object using those transformers\ntransformers = [\n    CustomWriterTransformer(),\n    RandomChildTransformer(),\n    JavaRandomTransformer()\n]\npobj = javaobj.loads(\"custom_objects.ser\", *transformers)\n\n# Here we show a field that doesn't belong to the class\nprint(pobj.field_data[\"int_not_in_fields\"]\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/tcalmant/python-javaobj", "keywords": "python java marshalling serialization", "license": "Apache License 2.0", "maintainer": "Thomas Calmant", "maintainer_email": "thomas.calmant@gmail.com", "name": "javaobj-py3", "package_url": "https://pypi.org/project/javaobj-py3/", "platform": "", "project_url": "https://pypi.org/project/javaobj-py3/", "project_urls": {"Homepage": "https://github.com/tcalmant/python-javaobj"}, "release_url": "https://pypi.org/project/javaobj-py3/0.4.1/", "requires_dist": ["enum34 ; python_version <= \"3.4\"", "typing ; python_version <= \"3.4\""], "requires_python": "", "summary": "Module for serializing and de-serializing Java objects.", "version": "0.4.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>javaobj-py3</h1>\n<p>\n    <a href=\"https://pypi.python.org/pypi/javaobj-py3/\" rel=\"nofollow\">\n        <img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/848adf9a3ba71c863d7538b0351ac6df1bf9d19a/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6a6176616f626a2d7079332e737667\">\n        <img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/67298c2ad97369101f51e05874065115ea8511ca/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f6a6176616f626a2d7079332e737667\">\n    </a>\n    <a href=\"https://travis-ci.org/tcalmant/python-javaobj\" rel=\"nofollow\">\n    <img alt=\"Travis-CI status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f18f21dffaa9e6502bec1c6bae7de5c903efa4d7/68747470733a2f2f7472617669732d63692e6f72672f7463616c6d616e742f707974686f6e2d6a6176616f626a2e7376673f6272616e63683d6d6173746572\">\n    </a>\n    <a href=\"https://coveralls.io/r/tcalmant/python-javaobj?branch=master\" rel=\"nofollow\">\n        <img alt=\"Coveralls status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/df59c4e9951b5e0b12a5d6f65376f6dc9645d293/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f7463616c6d616e742f707974686f6e2d6a6176616f626a2f62616467652e7376673f6272616e63683d6d6173746572\">\n    </a>\n</p>\n<p><em>python-javaobj</em> is a python library that provides functions for reading and\nwriting (writing is WIP currently) Java objects serialized or will be\ndeserialized by <code>ObjectOutputStream</code>. This form of object representation is a\nstandard data interchange format in Java world.</p>\n<p>The <code>javaobj</code> module exposes an API familiar to users of the standard library\n<code>marshal</code>, <code>pickle</code> and <code>json</code> modules.</p>\n<h2>About this repository</h2>\n<p>This project is a fork of <em>python-javaobj</em> by Volodymyr Buell, originally from\n<a href=\"http://code.google.com/p/python-javaobj/\" rel=\"nofollow\">Google Code</a> and now hosted on\n<a href=\"https://github.com/vbuell/python-javaobj\" rel=\"nofollow\">GitHub</a>.</p>\n<p>This fork intends to work both on Python 2.7 and Python 3.4+.</p>\n<h2>Compatibility Warnings</h2>\n<h3>New implementation of the parser</h3>\n<table>\n<thead>\n<tr>\n<th>Implementations</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v1</code>, <code>v2</code></td>\n<td><code>0.4.0+</code></td>\n</tr></tbody></table>\n<p>Since version 0.4.0, two implementations of the parser are available:</p>\n<ul>\n<li><code>v1</code>: the <em>classic</em> implementation of <code>javaobj</code>, with a work in progress\nimplementation of a writer.</li>\n<li><code>v2</code>: the <em>new</em> implementation, which is a port of the Java project\n<a href=\"https://github.com/frohoff/jdeserialize/\" rel=\"nofollow\"><code>jdeserialize</code></a>,\nwith support of the object transformer (with a new API) and of the <code>numpy</code>\narrays loading.</li>\n</ul>\n<p>You can use the <code>v1</code> parser to ensure that the behaviour of your scripts\ndoesn't change and to keep the ability to write down files.</p>\n<p>You can use the <code>v2</code> parser for new developments\n<em>which won't require marshalling</em> and as a <em>fallback</em> if the <code>v1</code>\nfails to parse a file.</p>\n<h3>Object transformers V1</h3>\n<table>\n<thead>\n<tr>\n<th>Implementations</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v1</code></td>\n<td><code>0.2.0+</code></td>\n</tr></tbody></table>\n<p>As of version 0.2.0, the notion of <em>object transformer</em> from the original\nproject as been replaced by an <em>object creator</em>.</p>\n<p>The <em>object creator</em> is called before the deserialization.\nThis allows to store the reference of the converted object before deserializing\nit, and avoids a mismatch between the referenced object and the transformed one.</p>\n<h3>Object transformers V2</h3>\n<table>\n<thead>\n<tr>\n<th>Implementations</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v2</code></td>\n<td><code>0.4.0+</code></td>\n</tr></tbody></table>\n<p>The <code>v2</code> implementation provides a new API for the object transformers.\nPlease look at the <em>Usage (V2)</em> section in this file.</p>\n<h3>Bytes arrays</h3>\n<table>\n<thead>\n<tr>\n<th>Implementations</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v1</code></td>\n<td><code>0.2.3+</code></td>\n</tr></tbody></table>\n<p>As of version 0.2.3, bytes arrays are loaded as a <code>bytes</code> object instead of\nan array of integers.</p>\n<h3>Custom Transformer</h3>\n<table>\n<thead>\n<tr>\n<th>Implementations</th>\n<th>Version</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v2</code></td>\n<td><code>0.4.1+</code></td>\n</tr></tbody></table>\n<p>A new transformer API has been proposed to handle objects written with a custom\nJava writer.\nYou can find a sample usage in the <em>Custom Transformer</em> section in this file.</p>\n<h2>Features</h2>\n<ul>\n<li>Java object instance un-marshalling</li>\n<li>Java classes un-marshalling</li>\n<li>Primitive values un-marshalling</li>\n<li>Automatic conversion of Java Collections to python ones\n(<code>HashMap</code> =&gt; <code>dict</code>, <code>ArrayList</code> =&gt; <code>list</code>, etc.)</li>\n<li>Basic marshalling of simple Java objects (<code>v1</code> implementation only)</li>\n</ul>\n<h2>Requirements</h2>\n<ul>\n<li>Python &gt;= 2.7 or Python &gt;= 3.4</li>\n<li><code>enum34</code> and <code>typing</code> when using Python &lt;= 3.4 (installable with <code>pip</code>)</li>\n<li>Maven 2+ (for building test data of serialized objects.\nYou can skip it if you do not plan to run <code>tests.py</code>)</li>\n</ul>\n<h2>Usage (V1 implementation)</h2>\n<p>Un-marshalling of Java serialised object:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">javaobj</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"obj5.ser\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">jobj</span> <span class=\"o\">=</span> <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">pobj</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">jobj</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pobj</span><span class=\"p\">)</span>\n</pre>\n<p>Or, you can use <code>JavaObjectUnmarshaller</code> object directly:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">javaobj</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"objCollections.ser\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">marshaller</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">JavaObjectUnmarshaller</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n    <span class=\"n\">pobj</span> <span class=\"o\">=</span> <span class=\"n\">marshaller</span><span class=\"o\">.</span><span class=\"n\">readObject</span><span class=\"p\">()</span>\n\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pobj</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"s2\">\"should be\"</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pobj</span><span class=\"o\">.</span><span class=\"n\">next</span><span class=\"p\">,</span> <span class=\"s2\">\"should be\"</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">)</span>\n\n    <span class=\"n\">pobj</span> <span class=\"o\">=</span> <span class=\"n\">marshaller</span><span class=\"o\">.</span><span class=\"n\">readObject</span><span class=\"p\">()</span>\n</pre>\n<p><strong>Note:</strong> The objects and methods provided by <code>javaobj</code> module are shortcuts\nto the <code>javaobj.v1</code> package, for Compatibility purpose.\nIt is <strong>recommended</strong> to explicitly import methods and classes from the <code>v1</code>\n(or <code>v2</code>) package when writing new code, in order to be sure that your code\nwon't need import updates in the future.</p>\n<h2>Usage (V2 implementation)</h2>\n<p>The following methods are provided by the <code>javaobj.v2</code> package:</p>\n<ul>\n<li>\n<p><code>load(fd, *transformers, use_numpy_arrays=False)</code>:\nParses the content of the given file descriptor, opened in binary mode (<code>rb</code>).\nThe method accepts a list of custom object transformers. The default object\ntransformer is always added to the list.</p>\n<p>The <code>use_numpy_arrays</code> flag indicates that the arrays of primitive type\nelements must be loaded using <code>numpy</code> (if available) instead of using the\nstandard parsing technic.</p>\n</li>\n<li>\n<p><code>loads(bytes, *transformers, use_numpy_arrays=False)</code>:\nThis the a shortcut to the <code>load()</code> method, providing it the binary data\nusing a <code>BytesIO</code> object.</p>\n</li>\n</ul>\n<p><strong>Note:</strong> The V2 parser doesn't have the marshalling capability.</p>\n<p>Sample usage:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">javaobj.v2</span> <span class=\"k\">as</span> <span class=\"nn\">javaobj</span>\n\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"obj5.ser\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">pobj</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pobj</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">())</span>\n</pre>\n<h3>Object Transformer</h3>\n<p>An object transformer can be called during the parsing of a Java object\ninstance or while loading an array.</p>\n<p>The Java object instance parsing works in two main steps:</p>\n<ol>\n<li>\n<p>The transformer is called to create an instance of a bean that inherits\n<code>JavaInstance</code>.</p>\n</li>\n<li>\n<p>The latter bean is then called:</p>\n<ul>\n<li>When the object is written with a custom block data</li>\n<li>After the fields and annotations have been parsed, to update the content\nof the Python bean.</li>\n</ul>\n</li>\n</ol>\n<p>Here is an example for a Java <code>HashMap</code> object. You can look at the code of\nthe <code>javaobj.v2.transformer</code> module to see the whole implementation.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">JavaMap</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">,</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaInstance</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Inherits from dict for Python usage, JavaInstance for parsing purpose</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Don't forget to call both constructors</span>\n        <span class=\"nb\">dict</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n        <span class=\"n\">JavaInstance</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_from_blockdata</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Reads content stored in a block data.</span>\n\n<span class=\"sd\">    This method is called only if the class description has both the</span>\n<span class=\"sd\">    `SC_EXTERNALIZABLE` and `SC_BLOCK_DATA` flags set.</span>\n\n<span class=\"sd\">    The stream parsing will stop and fail if this method returns False.</span>\n\n<span class=\"sd\">    :param parser: The JavaStreamParser in use</span>\n<span class=\"sd\">    :param reader: The underlying data stream reader</span>\n<span class=\"sd\">    :param indent: Indentation to use in logs</span>\n<span class=\"sd\">    :return: True on success, False on error</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"c1\"># This kind of class is not supposed to have the SC_BLOCK_DATA flag set</span>\n    <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_from_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">):</span>\n        <span class=\"c1\"># type: (int) -&gt; bool</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Load content from the parsed instance object.</span>\n\n<span class=\"sd\">        This method is called after the block data (if any), the fields and</span>\n<span class=\"sd\">        the annotations have been loaded.</span>\n\n<span class=\"sd\">        :param indent: Indentation to use while logging</span>\n<span class=\"sd\">        :return: True on success (currently ignored)</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"c1\"># Maps have their content in their annotations</span>\n        <span class=\"k\">for</span> <span class=\"n\">cd</span><span class=\"p\">,</span> <span class=\"n\">annotations</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n            <span class=\"c1\"># Annotations are associated to their definition class</span>\n            <span class=\"k\">if</span> <span class=\"n\">cd</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"java.util.HashMap\"</span><span class=\"p\">:</span>\n                <span class=\"c1\"># We are in the annotation created by the handled class</span>\n                <span class=\"c1\"># Group annotation elements 2 by 2</span>\n                <span class=\"c1\"># (storage is: key, value, key, value, ...)</span>\n                <span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">iter</span><span class=\"p\">(</span><span class=\"n\">annotations</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">:])]</span> <span class=\"o\">*</span> <span class=\"mi\">2</span>\n                <span class=\"k\">for</span> <span class=\"n\">key</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">):</span>\n                    <span class=\"bp\">self</span><span class=\"p\">[</span><span class=\"n\">key</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">value</span>\n\n                <span class=\"c1\"># Job done</span>\n                <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"c1\"># Couldn't load the data</span>\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MapObjectTransformer</span><span class=\"p\">(</span><span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">ObjectTransformer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Creates a JavaInstance object with custom loading methods for the</span>\n<span class=\"sd\">    classes it can handle</span>\n<span class=\"sd\">    \"\"\"</span>\n    <span class=\"k\">def</span> <span class=\"nf\">create_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classdesc</span><span class=\"p\">):</span>\n        <span class=\"c1\"># type: (JavaClassDesc) -&gt; Optional[JavaInstance]</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Transforms a parsed Java object into a Python object</span>\n\n<span class=\"sd\">        :param classdesc: The description of a Java class</span>\n<span class=\"sd\">        :return: The Python form of the object, or the original JavaObject</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">==</span> <span class=\"s2\">\"java.util.HashMap\"</span><span class=\"p\">:</span>\n            <span class=\"c1\"># We can handle this class description</span>\n            <span class=\"k\">return</span> <span class=\"n\">JavaMap</span><span class=\"p\">()</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Return None if the class is not handled</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n</pre>\n<h3>Custom Object Transformer</h3>\n<p>The custom transformer is called when the class is not handled by the default\nobject transformer.\nA custom object transformer still inherits from the <code>ObjectTransformer</code> class,\nbut it also implements the <code>load_custom_writeObject</code> method.</p>\n<p>The sample given here is used in the unit tests.</p>\n<h4>Java sample</h4>\n<p>On the Java side, we create various classes and write them as we wish:</p>\n<pre><span class=\"kd\">class</span> <span class=\"nc\">CustomClass</span> <span class=\"kd\">implements</span> <span class=\"n\">Serializable</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">long</span> <span class=\"n\">serialVersionUID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">public</span> <span class=\"kt\">void</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"n\">ObjectOutputStream</span> <span class=\"n\">out</span><span class=\"p\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">Exception</span> <span class=\"p\">{</span>\n        <span class=\"k\">this</span><span class=\"p\">.</span><span class=\"na\">writeObject</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">writeObject</span><span class=\"p\">(</span><span class=\"n\">ObjectOutputStream</span> <span class=\"n\">out</span><span class=\"p\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">IOException</span> <span class=\"p\">{</span>\n        <span class=\"n\">CustomWriter</span> <span class=\"n\">custom</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CustomWriter</span><span class=\"p\">(</span><span class=\"mi\">42</span><span class=\"p\">);</span>\n        <span class=\"n\">out</span><span class=\"p\">.</span><span class=\"na\">writeObject</span><span class=\"p\">(</span><span class=\"n\">custom</span><span class=\"p\">);</span>\n        <span class=\"n\">out</span><span class=\"p\">.</span><span class=\"na\">flush</span><span class=\"p\">();</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">RandomChild</span> <span class=\"kd\">extends</span> <span class=\"n\">Random</span> <span class=\"p\">{</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">long</span> <span class=\"n\">serialVersionUID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">int</span> <span class=\"n\">num</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kt\">double</span> <span class=\"n\">doub</span> <span class=\"o\">=</span> <span class=\"mf\">4.5</span><span class=\"p\">;</span>\n\n    <span class=\"n\">RandomChild</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">seed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"kd\">super</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n\n<span class=\"kd\">class</span> <span class=\"nc\">CustomWriter</span> <span class=\"kd\">implements</span> <span class=\"n\">Serializable</span> <span class=\"p\">{</span>\n    <span class=\"kd\">protected</span> <span class=\"n\">RandomChild</span> <span class=\"n\">custom_obj</span><span class=\"p\">;</span>\n\n    <span class=\"n\">CustomWriter</span><span class=\"p\">(</span><span class=\"kt\">int</span> <span class=\"n\">seed</span><span class=\"p\">)</span> <span class=\"p\">{</span>\n        <span class=\"n\">custom_obj</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">RandomChild</span><span class=\"p\">(</span><span class=\"n\">seed</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">long</span> <span class=\"n\">serialVersionUID</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">;</span>\n    <span class=\"kd\">private</span> <span class=\"kd\">static</span> <span class=\"kd\">final</span> <span class=\"kt\">int</span> <span class=\"n\">CURRENT_SERIAL_VERSION</span> <span class=\"o\">=</span> <span class=\"mi\">0</span><span class=\"p\">;</span>\n\n    <span class=\"kd\">private</span> <span class=\"kt\">void</span> <span class=\"nf\">writeObject</span><span class=\"p\">(</span><span class=\"n\">ObjectOutputStream</span> <span class=\"n\">out</span><span class=\"p\">)</span> <span class=\"kd\">throws</span> <span class=\"n\">IOException</span> <span class=\"p\">{</span>\n        <span class=\"n\">out</span><span class=\"p\">.</span><span class=\"na\">writeInt</span><span class=\"p\">(</span><span class=\"n\">CURRENT_SERIAL_VERSION</span><span class=\"p\">);</span>\n        <span class=\"n\">out</span><span class=\"p\">.</span><span class=\"na\">writeObject</span><span class=\"p\">(</span><span class=\"n\">custom_obj</span><span class=\"p\">);</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>An here is a sample writing of that kind of object:</p>\n<pre><span class=\"n\">ObjectOutputStream</span> <span class=\"n\">oos</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">ObjectOutputStream</span><span class=\"p\">(</span>\n    <span class=\"k\">new</span> <span class=\"n\">FileOutputStream</span><span class=\"p\">(</span><span class=\"s\">\"custom_objects.ser\"</span><span class=\"p\">));</span>\n<span class=\"n\">CustomClass</span> <span class=\"n\">writer</span> <span class=\"o\">=</span> <span class=\"k\">new</span> <span class=\"n\">CustomClass</span><span class=\"p\">();</span>\n<span class=\"n\">writer</span><span class=\"p\">.</span><span class=\"na\">start</span><span class=\"p\">(</span><span class=\"n\">oos</span><span class=\"p\">);</span>\n<span class=\"n\">oos</span><span class=\"p\">.</span><span class=\"na\">flush</span><span class=\"p\">();</span>\n<span class=\"n\">oos</span><span class=\"p\">.</span><span class=\"na\">close</span><span class=\"p\">();</span>\n</pre>\n<h4>Python sample</h4>\n<p>On the Python side, the first step is to define the custom transformers.\nThey are children of the <code>javaobj.v2.transformers.ObjectTransformer</code> class.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">BaseTransformer</span><span class=\"p\">(</span><span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">transformers</span><span class=\"o\">.</span><span class=\"n\">ObjectTransformer</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">    Creates a JavaInstance object with custom loading methods for the</span>\n<span class=\"sd\">    classes it can handle</span>\n<span class=\"sd\">    \"\"\"</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">handled_classes</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handled_classes</span> <span class=\"o\">=</span> <span class=\"n\">handled_classes</span> <span class=\"ow\">or</span> <span class=\"p\">{}</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">create_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">classdesc</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Transforms a parsed Java object into a Python object</span>\n\n<span class=\"sd\">        :param classdesc: The description of a Java class</span>\n<span class=\"sd\">        :return: The Python form of the object, or the original JavaObject</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handled_classes</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handled_classes</span><span class=\"p\">[</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">]()</span>\n            <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">instance</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">RandomChildTransformer</span><span class=\"p\">(</span><span class=\"n\">BaseTransformer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">RandomChildTransformer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"RandomChild\"</span><span class=\"p\">:</span> <span class=\"n\">RandomChildInstance</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomWriterTransformer</span><span class=\"p\">(</span><span class=\"n\">BaseTransformer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">CustomWriterTransformer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span>\n            <span class=\"p\">{</span><span class=\"s2\">\"CustomWriter\"</span><span class=\"p\">:</span> <span class=\"n\">CustomWriterInstance</span><span class=\"p\">}</span>\n        <span class=\"p\">)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">JavaRandomTransformer</span><span class=\"p\">(</span><span class=\"n\">BaseTransformer</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">JavaRandomTransformer</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s2\">\"java.util.Random\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_names</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"haveNextNextGaussian\"</span><span class=\"p\">,</span> <span class=\"s2\">\"nextNextGaussian\"</span><span class=\"p\">,</span> <span class=\"s2\">\"seed\"</span><span class=\"p\">]</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_types</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">FieldType</span><span class=\"o\">.</span><span class=\"n\">BOOLEAN</span><span class=\"p\">,</span>\n            <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">FieldType</span><span class=\"o\">.</span><span class=\"n\">DOUBLE</span><span class=\"p\">,</span>\n            <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">FieldType</span><span class=\"o\">.</span><span class=\"n\">LONG</span><span class=\"p\">,</span>\n        <span class=\"p\">]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_custom_writeObject</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">parser</span><span class=\"p\">,</span> <span class=\"n\">reader</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"n\">name</span> <span class=\"o\">!=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"kc\">None</span>\n\n        <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">f_name</span><span class=\"p\">,</span> <span class=\"n\">f_type</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_names</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_types</span><span class=\"p\">):</span>\n            <span class=\"n\">values</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">_read_field_value</span><span class=\"p\">(</span><span class=\"n\">f_type</span><span class=\"p\">))</span>\n            <span class=\"n\">fields</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaField</span><span class=\"p\">(</span><span class=\"n\">f_type</span><span class=\"p\">,</span> <span class=\"n\">f_name</span><span class=\"p\">))</span>\n\n        <span class=\"n\">class_desc</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaClassDesc</span><span class=\"p\">(</span>\n            <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">ClassDescType</span><span class=\"o\">.</span><span class=\"n\">NORMALCLASS</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">class_desc</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">name</span>\n        <span class=\"n\">class_desc</span><span class=\"o\">.</span><span class=\"n\">desc_flags</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">ClassDataType</span><span class=\"o\">.</span><span class=\"n\">EXTERNAL_CONTENTS</span>\n        <span class=\"n\">class_desc</span><span class=\"o\">.</span><span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"n\">fields</span>\n        <span class=\"n\">class_desc</span><span class=\"o\">.</span><span class=\"n\">field_data</span> <span class=\"o\">=</span> <span class=\"n\">values</span>\n        <span class=\"k\">return</span> <span class=\"n\">class_desc</span>\n</pre>\n<p>Second step is defining the representation of the instances, where the real\nobject loading occurs. Those classes inherit from\n<code>javaobj.v2.beans.JavaInstance</code>.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">CustomWriterInstance</span><span class=\"p\">(</span><span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaInstance</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaInstance</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">load_from_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Updates the content of this instance</span>\n<span class=\"sd\">        from its parsed fields and annotations</span>\n<span class=\"sd\">        :return: True on success, False on error</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">:</span>\n            <span class=\"c1\"># Here, we known there is something written before the fields,</span>\n            <span class=\"c1\"># even if it's not declared in the class description</span>\n            <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"int_not_in_fields\"</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">fields_names</span>\n            <span class=\"n\">raw_data</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"p\">]</span>\n            <span class=\"n\">int_not_in_fields</span> <span class=\"o\">=</span> <span class=\"n\">struct</span><span class=\"o\">.</span><span class=\"n\">unpack</span><span class=\"p\">(</span>\n                <span class=\"s2\">\"&gt;i\"</span><span class=\"p\">,</span> <span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">raw_data</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n            <span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n            <span class=\"n\">custom_obj</span> <span class=\"o\">=</span> <span class=\"n\">raw_data</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n            <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">int_not_in_fields</span><span class=\"p\">,</span> <span class=\"n\">custom_obj</span><span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RandomChildInstance</span><span class=\"p\">(</span><span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">v2</span><span class=\"o\">.</span><span class=\"n\">beans</span><span class=\"o\">.</span><span class=\"n\">JavaInstance</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">load_from_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"</span>\n<span class=\"sd\">        Updates the content of this instance</span>\n<span class=\"sd\">        from its parsed fields and annotations</span>\n<span class=\"sd\">        :return: True on success, False on error</span>\n<span class=\"sd\">        \"\"\"</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_data</span><span class=\"p\">:</span>\n            <span class=\"n\">fields</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">fields_names</span>\n            <span class=\"n\">values</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"p\">][</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">fields</span><span class=\"p\">[</span><span class=\"n\">i</span><span class=\"p\">]]</span>\n                <span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">))</span>\n            <span class=\"p\">]</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">field_data</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span><span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">fields</span><span class=\"p\">,</span> <span class=\"n\">values</span><span class=\"p\">))</span>\n            <span class=\"k\">if</span> <span class=\"p\">(</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">super_class</span>\n                <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">super_class</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span>\n            <span class=\"p\">):</span>\n                <span class=\"n\">super_class</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">classdesc</span><span class=\"o\">.</span><span class=\"n\">super_class</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">annotations</span> <span class=\"o\">=</span> <span class=\"nb\">dict</span><span class=\"p\">(</span>\n                    <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">super_class</span><span class=\"o\">.</span><span class=\"n\">fields_names</span><span class=\"p\">,</span> <span class=\"n\">super_class</span><span class=\"o\">.</span><span class=\"n\">field_data</span><span class=\"p\">)</span>\n                <span class=\"p\">)</span>\n            <span class=\"k\">return</span> <span class=\"kc\">True</span>\n\n        <span class=\"k\">return</span> <span class=\"kc\">False</span>\n</pre>\n<p>Finally we can use the transformers in the loading process.\nNote that even if it is not explicitly given, the <code>DefaultObjectTransformer</code>\nwill be also be used, as it is added automatically by <code>javaobj</code> if it is\nmissing from the given list.</p>\n<pre><span class=\"c1\"># Load the object using those transformers</span>\n<span class=\"n\">transformers</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">CustomWriterTransformer</span><span class=\"p\">(),</span>\n    <span class=\"n\">RandomChildTransformer</span><span class=\"p\">(),</span>\n    <span class=\"n\">JavaRandomTransformer</span><span class=\"p\">()</span>\n<span class=\"p\">]</span>\n<span class=\"n\">pobj</span> <span class=\"o\">=</span> <span class=\"n\">javaobj</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s2\">\"custom_objects.ser\"</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">transformers</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Here we show a field that doesn't belong to the class</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">pobj</span><span class=\"o\">.</span><span class=\"n\">field_data</span><span class=\"p\">[</span><span class=\"s2\">\"int_not_in_fields\"</span><span class=\"p\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 7034684, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "e89f987fd2f0eddb6d646c0a5d8a1624", "sha256": "320193e7e1e976b16a6899df8b804e349030999ea9e0c7c327025d46bd03c5a6"}, "downloads": -1, "filename": "javaobj-py3-0.1.1.tar.gz", "has_sig": false, "md5_digest": "e89f987fd2f0eddb6d646c0a5d8a1624", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9767, "upload_time": "2013-12-25T16:09:02", "upload_time_iso_8601": "2013-12-25T16:09:02.291160Z", "url": "https://files.pythonhosted.org/packages/86/2b/0fe0ad140ec0e69e8e2d55658a717751f0d9025be868e07c6bf069de2d72/javaobj-py3-0.1.1.tar.gz", "yanked": false}], "0.1.2": [], "0.1.3": [{"comment_text": "", "digests": {"md5": "da95e4f7c636378969c01424fc0adaa1", "sha256": "27446ed293fa4ddc4c35a1d6c1f8586cf4f6e5cac865d7cb01b67711f926d4c6"}, "downloads": -1, "filename": "javaobj_py3-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da95e4f7c636378969c01424fc0adaa1", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 13984, "upload_time": "2016-04-22T18:10:44", "upload_time_iso_8601": "2016-04-22T18:10:44.768657Z", "url": "https://files.pythonhosted.org/packages/60/7e/c2560f9d76d09e4d550082fcc1034b04b6b97001d720e7179b2d1d7e9c24/javaobj_py3-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "544153a03b5beff18de41337b42fa372", "sha256": "3555b09f42f3a6cdaa975094d97534be086a1b2b264b8900c3c694d58f2f42e0"}, "downloads": -1, "filename": "javaobj-py3-0.1.3.zip", "has_sig": false, "md5_digest": "544153a03b5beff18de41337b42fa372", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16016, "upload_time": "2016-04-22T18:10:14", "upload_time_iso_8601": "2016-04-22T18:10:14.803825Z", "url": "https://files.pythonhosted.org/packages/3a/b7/edfe2338af7fc3185cd8d036ffdc4bb567effee9ec660ee20fbd1a177f83/javaobj-py3-0.1.3.zip", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "a992006e226432a5d6520a7a9a1f59d4", "sha256": "7a956964f94941e530ea2f849abbaab22d5ff861a8604397966458d667fb79cb"}, "downloads": -1, "filename": "javaobj_py3-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "a992006e226432a5d6520a7a9a1f59d4", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14583, "upload_time": "2016-04-23T15:33:43", "upload_time_iso_8601": "2016-04-23T15:33:43.822801Z", "url": "https://files.pythonhosted.org/packages/7c/5e/d0397c97988781f9f37630a3d8d811e5f7cd6164c8bc2a90a7ff009df2d0/javaobj_py3-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae0a194c3a7e10a3239fc0e55919d32f", "sha256": "c91235dac4791534e8c40e6967cfd705bd67954950ab397e4ae2b964fcd2dcbe"}, "downloads": -1, "filename": "javaobj-py3-0.1.4.zip", "has_sig": false, "md5_digest": "ae0a194c3a7e10a3239fc0e55919d32f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16759, "upload_time": "2016-04-23T15:33:00", "upload_time_iso_8601": "2016-04-23T15:33:00.713005Z", "url": "https://files.pythonhosted.org/packages/7e/71/46d0ab57bed696be911c850308d2a6d19536a3624050e083d685e5040499/javaobj-py3-0.1.4.zip", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "abf696b323db44a61eded7b646226125", "sha256": "b3162c51ed990fdd40adc78388a5684a7de7e7c6d9cafa62c3c70244aa825521"}, "downloads": -1, "filename": "javaobj_py3-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "abf696b323db44a61eded7b646226125", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14672, "upload_time": "2016-05-16T11:43:20", "upload_time_iso_8601": "2016-05-16T11:43:20.642241Z", "url": "https://files.pythonhosted.org/packages/0e/b6/cb81c152a2240aa6bfc0bd5fc69650838f31151e54c0a94e5a5f78800df1/javaobj_py3-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "335b372ed6db124849fbd67bebfae37c", "sha256": "813ef56ceb2047229bb088a71c0a612ed26ae603f90e9a94fdc493a392cbfe2b"}, "downloads": -1, "filename": "javaobj-py3-0.2.0.zip", "has_sig": false, "md5_digest": "335b372ed6db124849fbd67bebfae37c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17042, "upload_time": "2016-05-16T11:42:13", "upload_time_iso_8601": "2016-05-16T11:42:13.484569Z", "url": "https://files.pythonhosted.org/packages/b7/2f/71df16eb359ce3ce5645dd4cb233cb187cc2fe97aa0702e5e06003229fdc/javaobj-py3-0.2.0.zip", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "c46347808a80a6111381bb208cce6eae", "sha256": "8290c977f08eb840f7663d252d760a81189f253ac365ca15346319d975e57cd3"}, "downloads": -1, "filename": "javaobj_py3-0.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c46347808a80a6111381bb208cce6eae", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 14681, "upload_time": "2016-08-23T17:21:30", "upload_time_iso_8601": "2016-08-23T17:21:30.111430Z", "url": "https://files.pythonhosted.org/packages/6f/9a/8ba1897b01f4059658390bb660e1fd6a72a81083e2c6dd1fe189ce08e46b/javaobj_py3-0.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c7e6956846386c890208acc98ae07671", "sha256": "ad61da349d599afecda190aca4718aa1bb9a20823ed70587da5b7a0691e94f4c"}, "downloads": -1, "filename": "javaobj-py3-0.2.1.zip", "has_sig": false, "md5_digest": "c7e6956846386c890208acc98ae07671", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17056, "upload_time": "2016-08-23T17:21:27", "upload_time_iso_8601": "2016-08-23T17:21:27.533830Z", "url": "https://files.pythonhosted.org/packages/5d/bd/ced9750f85041b9f305495aeee47dc350c7ec9b45b1984a8212f2d75d3e4/javaobj-py3-0.2.1.zip", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "dc2f0baa98382f9c336158ee2ce9faab", "sha256": "f8a72748c3c8c980072178df1e9046438660efd7d3e884cfb6392835289b100d"}, "downloads": -1, "filename": "javaobj_py3-0.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dc2f0baa98382f9c336158ee2ce9faab", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15431, "upload_time": "2016-09-09T12:01:37", "upload_time_iso_8601": "2016-09-09T12:01:37.409568Z", "url": "https://files.pythonhosted.org/packages/4e/3f/733fa59dcb386d8e9aef91da2b45e24fa2385304d91d84d3b0041eecf35e/javaobj_py3-0.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "462eb89b01efb26dc0debd1f42d99058", "sha256": "870c53eee0c2f40aee834d43a4ff444285bf534c032c8ddaab7bfa62a65630f9"}, "downloads": -1, "filename": "javaobj-py3-0.2.2.tar.gz", "has_sig": false, "md5_digest": "462eb89b01efb26dc0debd1f42d99058", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13870, "upload_time": "2016-09-09T12:01:34", "upload_time_iso_8601": "2016-09-09T12:01:34.876332Z", "url": "https://files.pythonhosted.org/packages/95/96/c8cb5ba643390df23a24adb9ae5713d7e6966fdc8a96d7be03664527f677/javaobj-py3-0.2.2.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "0f9303258050d3536865832fa181e9a9", "sha256": "66131ee6bc197eb06fe0a3018eef502a6264e7852a6146392fed5f8f8e703470"}, "downloads": -1, "filename": "javaobj_py3-0.2.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f9303258050d3536865832fa181e9a9", "packagetype": "bdist_wheel", "python_version": "3.5", "requires_python": null, "size": 15986, "upload_time": "2016-11-15T16:16:23", "upload_time_iso_8601": "2016-11-15T16:16:23.779116Z", "url": "https://files.pythonhosted.org/packages/d1/6e/a1f034c3b2c3a2086c8d1240de955ecd8fabd6e43e1eccf263ccc5cdb1b6/javaobj_py3-0.2.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e3f02b5c4c0853d653b7b8590d9ed2b", "sha256": "1dea6be0848c58013d92d8249ef6bc8688bbff7f13c78e02dbf08a449b4c0885"}, "downloads": -1, "filename": "javaobj-py3-0.2.3.tar.gz", "has_sig": false, "md5_digest": "1e3f02b5c4c0853d653b7b8590d9ed2b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14345, "upload_time": "2016-11-15T16:16:21", "upload_time_iso_8601": "2016-11-15T16:16:21.087624Z", "url": "https://files.pythonhosted.org/packages/bc/15/965a6cb0695562ef9173a98c2f2f29977cb723783227d575e75329707e48/javaobj-py3-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "86abf14d06c518cbdba88e6166501fc1", "sha256": "33212878868c163ff5931b509a9fde033e0e931188bab6be70d698c2613e9dc1"}, "downloads": -1, "filename": "javaobj_py3-0.2.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "86abf14d06c518cbdba88e6166501fc1", "packagetype": "bdist_wheel", "python_version": "3.6", "requires_python": null, "size": 16207, "upload_time": "2018-01-21T14:39:19", "upload_time_iso_8601": "2018-01-21T14:39:19.932651Z", "url": "https://files.pythonhosted.org/packages/6a/7d/1979d67bb8f6c5babb8dda0cb79d6d4663ef9a039c193b5adcc787a86285/javaobj_py3-0.2.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f669bb8099380e3dd84db3d542aa5b68", "sha256": "b8b0d310fd97e1c7914d7911ee9d3f4b3d84d2a674aa95a4b0da3d8f155fc1bb"}, "downloads": -1, "filename": "javaobj-py3-0.2.4.tar.gz", "has_sig": false, "md5_digest": "f669bb8099380e3dd84db3d542aa5b68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14565, "upload_time": "2018-01-21T14:39:18", "upload_time_iso_8601": "2018-01-21T14:39:18.122792Z", "url": "https://files.pythonhosted.org/packages/11/9a/a247aefa0383c3fff8c7f96b3b61a82e96c171ef4443e7940bd875a2e362/javaobj-py3-0.2.4.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "cb83b4f3999540ceb1b91b3e2d6db4d7", "sha256": "24c12f7af6bdc4a88f4f64cc2211cec610b1f97b583fa849856da98d33a0c80a"}, "downloads": -1, "filename": "javaobj_py3-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "cb83b4f3999540ceb1b91b3e2d6db4d7", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 36704, "upload_time": "2019-04-26T13:23:11", "upload_time_iso_8601": "2019-04-26T13:23:11.370872Z", "url": "https://files.pythonhosted.org/packages/41/68/145045d3a54029865ed1f33bd106e08fda165bae6eec0887d65331d792cb/javaobj_py3-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c6189a0d9aef51d74bfc52cd2953991", "sha256": "a57469e4f0d0eeba7482ad9839595db6e99ca4ac6630a4c8064dda75a2182549"}, "downloads": -1, "filename": "javaobj-py3-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1c6189a0d9aef51d74bfc52cd2953991", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20224, "upload_time": "2019-04-26T13:23:14", "upload_time_iso_8601": "2019-04-26T13:23:14.142779Z", "url": "https://files.pythonhosted.org/packages/f1/d8/5bc6c1939d2df26c8986c2446a21943cdb7c1ab621f690d6786893156010/javaobj-py3-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "3a37f50e50e49609f017ae45eaf70c58", "sha256": "bc58364ef78be2c1c4dcff6eed405836540c5151c45e1df7c345328a9d205181"}, "downloads": -1, "filename": "javaobj_py3-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3a37f50e50e49609f017ae45eaf70c58", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 53258, "upload_time": "2019-12-30T15:29:22", "upload_time_iso_8601": "2019-12-30T15:29:22.468345Z", "url": "https://files.pythonhosted.org/packages/f4/07/878d2832327825849b0b55882c1b31b6d01ac9fd23d69af3116a027d2335/javaobj_py3-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa0f3e299e39dce771a682944a8190b2", "sha256": "10567a00a5715dba390b24c40a76ac9b4eb88f729be3ec8dbf265475d9e62bea"}, "downloads": -1, "filename": "javaobj-py3-0.4.0.tar.gz", "has_sig": false, "md5_digest": "aa0f3e299e39dce771a682944a8190b2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38508, "upload_time": "2019-12-30T15:29:19", "upload_time_iso_8601": "2019-12-30T15:29:19.958944Z", "url": "https://files.pythonhosted.org/packages/81/8d/0c6ba1ebdd47e9b59d14853a3980efad11d81accd21a4734ffea6b37dda3/javaobj-py3-0.4.0.tar.gz", "yanked": false}], "0.4.0.1": [{"comment_text": "", "digests": {"md5": "15bea612f857ef336aeb9b302b99e23d", "sha256": "8cd8f08f3ee717fab0a255cafee278e8294db1dc90ab0528d5e1fa190b8c1dda"}, "downloads": -1, "filename": "javaobj_py3-0.4.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "15bea612f857ef336aeb9b302b99e23d", "packagetype": "bdist_wheel", "python_version": "3.7", "requires_python": null, "size": 53302, "upload_time": "2020-01-01T18:02:19", "upload_time_iso_8601": "2020-01-01T18:02:19.769699Z", "url": "https://files.pythonhosted.org/packages/5e/7a/bfbd6573cb01087e3482ef6cdae9a712e8dd9702a09ddbcf9761a2871619/javaobj_py3-0.4.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "352fe0df9336b8699ad0799ef152da6b", "sha256": "18c44cfaa214813784a823432b4ab9829c9626b2b00072011627b4008b0067cd"}, "downloads": -1, "filename": "javaobj-py3-0.4.0.1.tar.gz", "has_sig": false, "md5_digest": "352fe0df9336b8699ad0799ef152da6b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 42505, "upload_time": "2020-01-01T18:02:17", "upload_time_iso_8601": "2020-01-01T18:02:17.191806Z", "url": "https://files.pythonhosted.org/packages/19/b3/724201d30a5503bdf3c8a4f699298e513580007b8095a63e7b37f057577f/javaobj-py3-0.4.0.1.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "92a8e48461f27758e963d3b9a5d46785", "sha256": "4f6331b175196f6f37d43dd67cf8eab3a2bf5f8e0fbc4ded59948081189afce8"}, "downloads": -1, "filename": "javaobj_py3-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92a8e48461f27758e963d3b9a5d46785", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67716, "upload_time": "2020-04-16T19:56:13", "upload_time_iso_8601": "2020-04-16T19:56:13.626216Z", "url": "https://files.pythonhosted.org/packages/c7/b2/72cb750ae637b6844cc38d318ecd500b8666188de98d4c4ebae90d29f9e3/javaobj_py3-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47632071c3c3ca14b6c42f2a4e2e1309", "sha256": "419ff99543469e68149f875abb0db5251cecd350c03d2bfb4c94a5796f1cbc14"}, "downloads": -1, "filename": "javaobj-py3-0.4.1.tar.gz", "has_sig": false, "md5_digest": "47632071c3c3ca14b6c42f2a4e2e1309", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47553, "upload_time": "2020-04-16T19:56:15", "upload_time_iso_8601": "2020-04-16T19:56:15.142477Z", "url": "https://files.pythonhosted.org/packages/ca/b0/dec8bf1496a3d6a3138a24657cf8832f5fbde4191f58740c95040169ca1c/javaobj-py3-0.4.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "92a8e48461f27758e963d3b9a5d46785", "sha256": "4f6331b175196f6f37d43dd67cf8eab3a2bf5f8e0fbc4ded59948081189afce8"}, "downloads": -1, "filename": "javaobj_py3-0.4.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "92a8e48461f27758e963d3b9a5d46785", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 67716, "upload_time": "2020-04-16T19:56:13", "upload_time_iso_8601": "2020-04-16T19:56:13.626216Z", "url": "https://files.pythonhosted.org/packages/c7/b2/72cb750ae637b6844cc38d318ecd500b8666188de98d4c4ebae90d29f9e3/javaobj_py3-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "47632071c3c3ca14b6c42f2a4e2e1309", "sha256": "419ff99543469e68149f875abb0db5251cecd350c03d2bfb4c94a5796f1cbc14"}, "downloads": -1, "filename": "javaobj-py3-0.4.1.tar.gz", "has_sig": false, "md5_digest": "47632071c3c3ca14b6c42f2a4e2e1309", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 47553, "upload_time": "2020-04-16T19:56:15", "upload_time_iso_8601": "2020-04-16T19:56:15.142477Z", "url": "https://files.pythonhosted.org/packages/ca/b0/dec8bf1496a3d6a3138a24657cf8832f5fbde4191f58740c95040169ca1c/javaobj-py3-0.4.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:04 2020"}