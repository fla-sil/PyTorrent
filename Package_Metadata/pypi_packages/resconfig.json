{"info": {"author": "Taro Sato", "author_email": "okomestudio@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: System :: Installation/Setup", "Topic :: Utilities"], "description": "|license| |versions| |pypi-version| |status| |ci-status| |coverage| |black|\n\n\n*********\nresconfig\n*********\n\n*resconfig* is a minimalistic application configuration library for\nPython. It is a thin wrapper around nested ``dict`` objects with added\nfeatures that make it easy to deal with the data structure as a\ncentralized storage of application configuration.\n\n``ResConfig`` supports\n\n- multiple configuration file formats: INI, JSON, TOML, and YAML;\n\n- environment variables: Configuration can be easily overridden with\n  environment variables;\n\n- command-line arguments: Configuration can be easily overridden with\n  ArgumentParser command-line arguments.\n\n- \u201c.\u201d-delimited nested keys: ``config[\"foo.bar\"]`` is equivalent to\n  ``config[\"foo\"][\"bar\"]``.\n\nThe advanced usage of ``ResConfig`` allows:\n\n- Dynamic reloading of configuration at run time: Watch functions can\n  be attached to any keys within the configuration to trigger actions\n  to manage resources.\n\nFor the full documentation, visit `documentation`_.\n\n\nInstallation\n============\n\n.. code-block:: sh\n\n    $ pip install resconfig\n\n\nQuickstart\n==========\n\nLet us first create an ``ResConfig`` object with a simple default\nconfiguration for your application, *myapp.py*:\n\n.. code-block:: python\n\n    from resconfig ResConfig\n\n    config = ResConfig({\"db\": {\"host\": \"localhost\", \"port\": 5432}})\n\nBy default, ``ResConfig`` loads configuration immediately after its\ninitialization. To control the timing of load, use the\n``load_on_init`` flag:\n\n.. code-block:: python\n\n    config = ResConfig({\"db\": {\"host\": \"localhost\", \"port\": 5432}},\n                       load_on_init=False)\n    config.load()\n\nThe following sections introduce you to the basic usage of\n``ResConfig`` object.\n\n\nThe \u201c.\u201d-Style Key Notation\n--------------------------\n\n``ResConfig`` exposes ``dict``-like interface for value access but\nadditionally allows the \u201c.\u201d-style notation for nested keys. The\nfollowing methods all return the same value, ``localhost``:\n\n.. code-block:: python\n\n    host = config[\"db\"][\"host\"]\n    host = config[\"db.host\"]\n    host = config.get(\"db.host\")  # similar to dict.get\n\nThe \u201c.\u201d-style can be used elsewhere, e.g.,\n\n.. code-block:: python\n\n    config = ResConfig({\"db.host\": \"localhost\", \"db.port\": 5432})\n\nThis will be the same default configuration shown\nearlier. ``ResConfig`` takes care of nesting the ``dict`` for you.\n\n\nUse with Configuration Files\n----------------------------\n\nTo read configuration from (multiple) files, supply a list of paths on\nobject initialization:\n\n.. code-block:: python\n\n    config = ResConfig({\"db.host\": \"localhost\", \"db.port\": 5432},\n                       config_files=[\"myconf.yml\",\n                                     \"~/.myconf.yml,\n                                     \"/etc/myconf.yml\"])\n\nIf any of the files exists, they are read in the reverse order, i.e.,\n*/etc/myconf.yml*, *~/.myconf.yml*, and then *myconf.yml*, and the\nconfiguration read from them get merged in that order, overriding the\ndefault. This allows layered configuration based on specificity by\nfilesystem location.\n\n\nUse with Environment Variables\n------------------------------\n\nProperly named environment variables can override default\nconfiguration. When you run your *myapp.py* app with the ``DB_HOST``\nand/or ``DB_PORT`` environment variables set, their values override\nthe default:\n\n.. code-block:: sh\n\n    $ DB_HOST=remotehost DB_PORT=3306 python myapp.py\n\nThat is, ``config[\"db.host\"]`` and ``config[\"db.port\"]`` will return\n``remotehost`` and ``3306``, respectively. As a rule of thumb, a\nconfiguration key maps to an uppercased, \u201c_\u201d-delimited (when nested)\nenvironment variable name.\n\n\nUse with ArgumentParser\n-----------------------\n\nA ``ResConfig`` object can dynamically generate\n``argparse.ArgumentParser`` arguments from default configuration:\n\n.. code-block:: python\n\n    parser = argparse.ArgumentParser()\n    parser.add_argument(...)  # Define other arguments\n\n    config.add_arguments_to_argparse(parser)\n    # --pg-host and --pg-port arguments are now available\n\nAfter actually parsing the (command-line) arguments, pass the parse\nresult to ``ResConfig`` and then load the configuration:\n\n.. code-block:: python\n\n    args = parser.parse_args()\n    config.prepare_from_argparse(args)\n    config.load()\n\n\nAdding Actions on Changes\n-------------------------\n\nA ``ResConfig`` object is aware of changes to its\nconfiguration. *Watch functions* watch changes happening at any nested\nkey to act on them:\n\n.. code-block:: python\n\n    from resconfig import Action\n\n    @config.watch(\"db.host\")\n    def act_on_nested_key(action, old, new):\n        if action == Action.ADDED:\n            # db.host added\n        elif action == Action.MODIFIED:\n            # db.host modified\n        elif action == Action.RELOADED:\n            # db.host reloaded\n        elif action == Action.REMOVED:\n            # db.host removed\n\nHere, the ``act_on_nested_key`` function is called whenever\nconfiguration changes occur at ``db.host`` and can decide what to do\nwith the ``old`` and/or ``new`` values.\n\n\nDevelopment\n===========\n\n.. code-block:: sh\n\n    $ pip install -e .[dev]\n    $ pre-commit install\n\n\nRunning Tests\n=============\n\n.. code-block:: sh\n\n    $ python setup.py tests\n\n\nLicense\n=======\n\n`Apache License, Version 2.0`_\n\n.. _Apache License, Version 2.0: https://raw.githubusercontent.com/okomestudio/resconfig/development/LICENSE.txt\n\n.. _documentation: https://resconfig.readthedocs.io/\n\n\n.. |black| image:: https://img.shields.io/badge/code%20style-black-000000.svg\n   :target: https://github.com/psf/black\n   :alt: Black\n\n.. |ci-status| image:: https://circleci.com/gh/okomestudio/resconfig.svg?style=shield\n   :target: https://circleci.com/gh/okomestudio/resconfig\n   :alt: CI Status\n\n.. |coverage| image:: https://coveralls.io/repos/github/okomestudio/resconfig/badge.svg?branch=development&kill_cache=1\n   :target: https://coveralls.io/github/okomestudio/resconfig?branch=development\n   :alt: Coverage\n\n.. |license| image:: https://img.shields.io/pypi/l/resconfig.svg\n   :target: https://pypi.org/project/resconfig/\n   :alt: License\n\n.. |pypi-version| image:: https://badge.fury.io/py/resconfig.svg\n    :target: https://pypi.org/project/resconfig/\n    :alt: PyPI Version\n\n.. |status| image:: https://img.shields.io/pypi/status/resconfig.svg\n    :target: https://pypi.org/project/resconfig/\n    :alt: Package Status\n\n.. |versions| image:: https://img.shields.io/pypi/pyversions/resconfig.svg\n   :target: https://img.shields.io/pypi/pyversions/resconfig.svg\n   :alt: Versions\n\n\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/okomestudio/resconfig", "keywords": "", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "resconfig", "package_url": "https://pypi.org/project/resconfig/", "platform": "Linux", "project_url": "https://pypi.org/project/resconfig/", "project_urls": {"Homepage": "https://github.com/okomestudio/resconfig"}, "release_url": "https://pypi.org/project/resconfig/20.4.3a0/", "requires_dist": ["black (>=19.10b0) ; extra == 'dev'", "flake8 (>=3.7.9) ; extra == 'dev'", "isort[pyproject] (>=4.3.21) ; extra == 'dev'", "pre-commit (>=2.2.0) ; extra == 'dev'", "seed-isort-config (>=2.1.1) ; extra == 'dev'", "toml (>=0.10.0) ; extra == 'dev'", "PyYAML (>=5.3.1) ; extra == 'dev'", "coverage[toml] (>=5.0.4) ; extra == 'dev'", "pytest (>=5.4.1) ; extra == 'dev'", "pytest-cov (>=2.8.1) ; extra == 'dev'", "sphinx (>=3.0.1) ; extra == 'doc'", "sphinx-autodoc-typehints (>=1.10.3) ; extra == 'doc'", "coverage[toml] (>=5.0.4) ; extra == 'tests'", "pytest (>=5.4.1) ; extra == 'tests'", "pytest-cov (>=2.8.1) ; extra == 'tests'", "toml (>=0.10.0) ; extra == 'tests'", "PyYAML (>=5.3.1) ; extra == 'tests'", "toml (>=0.10.0) ; extra == 'toml'", "PyYAML (>=5.3.1) ; extra == 'yaml'"], "requires_python": ">=3.6", "summary": "A minimalistic application configuration library for Python", "version": "20.4.3a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://pypi.org/project/resconfig/\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f5e4bc5031775da5c0e0df2110be8c03ca997f77/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f726573636f6e6669672e737667\"></a> <a href=\"https://img.shields.io/pypi/pyversions/resconfig.svg\" rel=\"nofollow\"><img alt=\"Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/975c582bfbb1583e2b3aca811a027196a280b328/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f726573636f6e6669672e737667\"></a> <a href=\"https://pypi.org/project/resconfig/\" rel=\"nofollow\"><img alt=\"PyPI Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9bce66819c1e09c4ed54403b13454904eaf080d/68747470733a2f2f62616467652e667572792e696f2f70792f726573636f6e6669672e737667\"></a> <a href=\"https://pypi.org/project/resconfig/\" rel=\"nofollow\"><img alt=\"Package Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7001fa4b3923d00a2c33dd77ffb7cdca2c478053/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f726573636f6e6669672e737667\"></a> <a href=\"https://circleci.com/gh/okomestudio/resconfig\" rel=\"nofollow\"><img alt=\"CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/890baad1bdf0c018f6894a9ab67a740daa3bfbf9/68747470733a2f2f636972636c6563692e636f6d2f67682f6f6b6f6d6573747564696f2f726573636f6e6669672e7376673f7374796c653d736869656c64\"></a> <a href=\"https://coveralls.io/github/okomestudio/resconfig?branch=development\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/908b9c9ef33e3fb30f3f263b6372639ff97880a1/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f6769746875622f6f6b6f6d6573747564696f2f726573636f6e6669672f62616467652e7376673f6272616e63683d646576656c6f706d656e74266b696c6c5f63616368653d31\"></a> <a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"Black\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a></p>\n<div id=\"resconfig\">\n<h2>resconfig</h2>\n<p><em>resconfig</em> is a minimalistic application configuration library for\nPython. It is a thin wrapper around nested <tt>dict</tt> objects with added\nfeatures that make it easy to deal with the data structure as a\ncentralized storage of application configuration.</p>\n<p><tt>ResConfig</tt> supports</p>\n<ul>\n<li>multiple configuration file formats: INI, JSON, TOML, and YAML;</li>\n<li>environment variables: Configuration can be easily overridden with\nenvironment variables;</li>\n<li>command-line arguments: Configuration can be easily overridden with\nArgumentParser command-line arguments.</li>\n<li>\u201c.\u201d-delimited nested keys: <tt><span class=\"pre\">config[\"foo.bar\"]</span></tt> is equivalent to\n<tt><span class=\"pre\">config[\"foo\"][\"bar\"]</span></tt>.</li>\n</ul>\n<p>The advanced usage of <tt>ResConfig</tt> allows:</p>\n<ul>\n<li>Dynamic reloading of configuration at run time: Watch functions can\nbe attached to any keys within the configuration to trigger actions\nto manage resources.</li>\n</ul>\n<p>For the full documentation, visit <a href=\"https://resconfig.readthedocs.io/\" rel=\"nofollow\">documentation</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<pre>$ pip install resconfig\n</pre>\n</div>\n<div id=\"quickstart\">\n<h3>Quickstart</h3>\n<p>Let us first create an <tt>ResConfig</tt> object with a simple default\nconfiguration for your application, <em>myapp.py</em>:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">resconfig</span> <span class=\"n\">ResConfig</span>\n\n<span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ResConfig</span><span class=\"p\">({</span><span class=\"s2\">\"db\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">}})</span>\n</pre>\n<p>By default, <tt>ResConfig</tt> loads configuration immediately after its\ninitialization. To control the timing of load, use the\n<tt>load_on_init</tt> flag:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ResConfig</span><span class=\"p\">({</span><span class=\"s2\">\"db\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"port\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">}},</span>\n                   <span class=\"n\">load_on_init</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n</pre>\n<p>The following sections introduce you to the basic usage of\n<tt>ResConfig</tt> object.</p>\n<div id=\"the-style-key-notation\">\n<h4>The \u201c.\u201d-Style Key Notation</h4>\n<p><tt>ResConfig</tt> exposes <tt>dict</tt>-like interface for value access but\nadditionally allows the \u201c.\u201d-style notation for nested keys. The\nfollowing methods all return the same value, <tt>localhost</tt>:</p>\n<pre><span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"db\"</span><span class=\"p\">][</span><span class=\"s2\">\"host\"</span><span class=\"p\">]</span>\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"p\">[</span><span class=\"s2\">\"db.host\"</span><span class=\"p\">]</span>\n<span class=\"n\">host</span> <span class=\"o\">=</span> <span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"db.host\"</span><span class=\"p\">)</span>  <span class=\"c1\"># similar to dict.get</span>\n</pre>\n<p>The \u201c.\u201d-style can be used elsewhere, e.g.,</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ResConfig</span><span class=\"p\">({</span><span class=\"s2\">\"db.host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"db.port\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">})</span>\n</pre>\n<p>This will be the same default configuration shown\nearlier. <tt>ResConfig</tt> takes care of nesting the <tt>dict</tt> for you.</p>\n</div>\n<div id=\"use-with-configuration-files\">\n<h4>Use with Configuration Files</h4>\n<p>To read configuration from (multiple) files, supply a list of paths on\nobject initialization:</p>\n<pre><span class=\"n\">config</span> <span class=\"o\">=</span> <span class=\"n\">ResConfig</span><span class=\"p\">({</span><span class=\"s2\">\"db.host\"</span><span class=\"p\">:</span> <span class=\"s2\">\"localhost\"</span><span class=\"p\">,</span> <span class=\"s2\">\"db.port\"</span><span class=\"p\">:</span> <span class=\"mi\">5432</span><span class=\"p\">},</span>\n                   <span class=\"n\">config_files</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"myconf.yml\"</span><span class=\"p\">,</span>\n                                 <span class=\"s2\">\"~/.myconf.yml,</span>\n                                 <span class=\"s2\">\"/etc/myconf.yml\"</span><span class=\"p\">])</span>\n</pre>\n<p>If any of the files exists, they are read in the reverse order, i.e.,\n<em>/etc/myconf.yml</em>, <em>~/.myconf.yml</em>, and then <em>myconf.yml</em>, and the\nconfiguration read from them get merged in that order, overriding the\ndefault. This allows layered configuration based on specificity by\nfilesystem location.</p>\n</div>\n<div id=\"use-with-environment-variables\">\n<h4>Use with Environment Variables</h4>\n<p>Properly named environment variables can override default\nconfiguration. When you run your <em>myapp.py</em> app with the <tt>DB_HOST</tt>\nand/or <tt>DB_PORT</tt> environment variables set, their values override\nthe default:</p>\n<pre>$ <span class=\"nv\">DB_HOST</span><span class=\"o\">=</span>remotehost <span class=\"nv\">DB_PORT</span><span class=\"o\">=</span><span class=\"m\">3306</span> python myapp.py\n</pre>\n<p>That is, <tt><span class=\"pre\">config[\"db.host\"]</span></tt> and <tt><span class=\"pre\">config[\"db.port\"]</span></tt> will return\n<tt>remotehost</tt> and <tt>3306</tt>, respectively. As a rule of thumb, a\nconfiguration key maps to an uppercased, \u201c_\u201d-delimited (when nested)\nenvironment variable name.</p>\n</div>\n<div id=\"use-with-argumentparser\">\n<h4>Use with ArgumentParser</h4>\n<p>A <tt>ResConfig</tt> object can dynamically generate\n<tt>argparse.ArgumentParser</tt> arguments from default configuration:</p>\n<pre><span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">argparse</span><span class=\"o\">.</span><span class=\"n\">ArgumentParser</span><span class=\"p\">()</span>\n<span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">add_argument</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>  <span class=\"c1\"># Define other arguments</span>\n\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">add_arguments_to_argparse</span><span class=\"p\">(</span><span class=\"n\">parser</span><span class=\"p\">)</span>\n<span class=\"c1\"># --pg-host and --pg-port arguments are now available</span>\n</pre>\n<p>After actually parsing the (command-line) arguments, pass the parse\nresult to <tt>ResConfig</tt> and then load the configuration:</p>\n<pre><span class=\"n\">args</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse_args</span><span class=\"p\">()</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">prepare_from_argparse</span><span class=\"p\">(</span><span class=\"n\">args</span><span class=\"p\">)</span>\n<span class=\"n\">config</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"adding-actions-on-changes\">\n<h4>Adding Actions on Changes</h4>\n<p>A <tt>ResConfig</tt> object is aware of changes to its\nconfiguration. <em>Watch functions</em> watch changes happening at any nested\nkey to act on them:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">resconfig</span> <span class=\"kn\">import</span> <span class=\"n\">Action</span>\n\n<span class=\"nd\">@config</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">(</span><span class=\"s2\">\"db.host\"</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">act_on_nested_key</span><span class=\"p\">(</span><span class=\"n\">action</span><span class=\"p\">,</span> <span class=\"n\">old</span><span class=\"p\">,</span> <span class=\"n\">new</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">ADDED</span><span class=\"p\">:</span>\n        <span class=\"c1\"># db.host added</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">MODIFIED</span><span class=\"p\">:</span>\n        <span class=\"c1\"># db.host modified</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">RELOADED</span><span class=\"p\">:</span>\n        <span class=\"c1\"># db.host reloaded</span>\n    <span class=\"k\">elif</span> <span class=\"n\">action</span> <span class=\"o\">==</span> <span class=\"n\">Action</span><span class=\"o\">.</span><span class=\"n\">REMOVED</span><span class=\"p\">:</span>\n        <span class=\"c1\"># db.host removed</span>\n</pre>\n<p>Here, the <tt>act_on_nested_key</tt> function is called whenever\nconfiguration changes occur at <tt>db.host</tt> and can decide what to do\nwith the <tt>old</tt> and/or <tt>new</tt> values.</p>\n</div>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<pre>$ pip install -e .<span class=\"o\">[</span>dev<span class=\"o\">]</span>\n$ pre-commit install\n</pre>\n</div>\n<div id=\"running-tests\">\n<h3>Running Tests</h3>\n<pre>$ python setup.py tests\n</pre>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><a href=\"https://raw.githubusercontent.com/okomestudio/resconfig/development/LICENSE.txt\" rel=\"nofollow\">Apache License, Version 2.0</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7056444, "releases": {"20.4.0a0": [{"comment_text": "", "digests": {"md5": "6d198f8921f2f862bb0cf83f1f6f1784", "sha256": "1947ade6383c64d017447907fd4d6a511c331025b852e543b6c5ec03be9e530a"}, "downloads": -1, "filename": "resconfig-20.4.0a0-py3-none-any.whl", "has_sig": false, "md5_digest": "6d198f8921f2f862bb0cf83f1f6f1784", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 16369, "upload_time": "2020-04-07T02:49:20", "upload_time_iso_8601": "2020-04-07T02:49:20.753222Z", "url": "https://files.pythonhosted.org/packages/0f/8a/db580d06f141690ae7854529521c4a15cd657706524572b653c921419e16/resconfig-20.4.0a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "35111548a7e08037b5209bfed3ed4b84", "sha256": "4daaa2f63bf16890656c244bacff6c2b8936462ffc5ee92e4685a451630e9ca4"}, "downloads": -1, "filename": "resconfig-20.4.0a0.tar.gz", "has_sig": false, "md5_digest": "35111548a7e08037b5209bfed3ed4b84", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 15915, "upload_time": "2020-04-07T02:49:22", "upload_time_iso_8601": "2020-04-07T02:49:22.039543Z", "url": "https://files.pythonhosted.org/packages/51/e5/c3dccd25e9f75121ede962ea9f1a5dff727de0329d56aa7f0cfcf788c51b/resconfig-20.4.0a0.tar.gz", "yanked": false}], "20.4.2a0": [{"comment_text": "", "digests": {"md5": "3b5764103e57fa1eb71d6789021c27f5", "sha256": "667a6fbf0a43962e9e02868b809d3d7c5ddbfe515fffd77d23a76115dffeaa27"}, "downloads": -1, "filename": "resconfig-20.4.2a0-py3-none-any.whl", "has_sig": false, "md5_digest": "3b5764103e57fa1eb71d6789021c27f5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21427, "upload_time": "2020-04-19T03:53:12", "upload_time_iso_8601": "2020-04-19T03:53:12.763025Z", "url": "https://files.pythonhosted.org/packages/32/55/4c3d3a519702738a45adae3fa23e2012d5bae8c1ca3aecf8edb3373ea4be/resconfig-20.4.2a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e899caaef10ccaad244bd2103cbe4fb", "sha256": "9ed559dfe302290e343094a935352c34bdd61c40ab78df44e8c5850ee8b4f46b"}, "downloads": -1, "filename": "resconfig-20.4.2a0.tar.gz", "has_sig": false, "md5_digest": "1e899caaef10ccaad244bd2103cbe4fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21031, "upload_time": "2020-04-19T03:53:14", "upload_time_iso_8601": "2020-04-19T03:53:14.050348Z", "url": "https://files.pythonhosted.org/packages/99/e2/6f70aca07f479a3f76cb2e79b9c641b0719fa4b941dd0faa83914a612328/resconfig-20.4.2a0.tar.gz", "yanked": false}], "20.4.3a0": [{"comment_text": "", "digests": {"md5": "5d2a65afd8da329bdc752f26e0f5a0ff", "sha256": "0a2f2d6f6ddb3e1404a896f8f7c3f8b993cd7470e23746a75f6dac4b0bc20154"}, "downloads": -1, "filename": "resconfig-20.4.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "5d2a65afd8da329bdc752f26e0f5a0ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21865, "upload_time": "2020-04-19T23:25:11", "upload_time_iso_8601": "2020-04-19T23:25:11.183467Z", "url": "https://files.pythonhosted.org/packages/d6/c3/0130129671761c62496f4455ff90d605a4fc4ae1691a63b15621ac1e9c11/resconfig-20.4.3a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13efaf416ab563a6f83ea6996a4f6cf6", "sha256": "2ca7777bb9df26df1103e2e4d972bbf3884e0aae0f09f2d7832eacd929d334b2"}, "downloads": -1, "filename": "resconfig-20.4.3a0.tar.gz", "has_sig": false, "md5_digest": "13efaf416ab563a6f83ea6996a4f6cf6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21157, "upload_time": "2020-04-19T23:25:12", "upload_time_iso_8601": "2020-04-19T23:25:12.323293Z", "url": "https://files.pythonhosted.org/packages/9c/ee/bac55669c086affe832304efb8dc30d71c2020af16e3a79353ce06f78882/resconfig-20.4.3a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5d2a65afd8da329bdc752f26e0f5a0ff", "sha256": "0a2f2d6f6ddb3e1404a896f8f7c3f8b993cd7470e23746a75f6dac4b0bc20154"}, "downloads": -1, "filename": "resconfig-20.4.3a0-py3-none-any.whl", "has_sig": false, "md5_digest": "5d2a65afd8da329bdc752f26e0f5a0ff", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 21865, "upload_time": "2020-04-19T23:25:11", "upload_time_iso_8601": "2020-04-19T23:25:11.183467Z", "url": "https://files.pythonhosted.org/packages/d6/c3/0130129671761c62496f4455ff90d605a4fc4ae1691a63b15621ac1e9c11/resconfig-20.4.3a0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "13efaf416ab563a6f83ea6996a4f6cf6", "sha256": "2ca7777bb9df26df1103e2e4d972bbf3884e0aae0f09f2d7832eacd929d334b2"}, "downloads": -1, "filename": "resconfig-20.4.3a0.tar.gz", "has_sig": false, "md5_digest": "13efaf416ab563a6f83ea6996a4f6cf6", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 21157, "upload_time": "2020-04-19T23:25:12", "upload_time_iso_8601": "2020-04-19T23:25:12.323293Z", "url": "https://files.pythonhosted.org/packages/9c/ee/bac55669c086affe832304efb8dc30d71c2020af16e3a79353ce06f78882/resconfig-20.4.3a0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:03:54 2020"}