{"info": {"author": "Arpaso", "author_email": "arvid@arpaso.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Django", "Intended Audience :: Developers", "Intended Audience :: System Administrators", "Operating System :: OS Independent", "Topic :: Software Development"], "description": "Django storage for SoftLayer Cloud Storage\n==========================================\n\nThis package uses django-cumulus (https://pypi.python.org/pypi/django-cumulus) and\nsoftlayer-object-storage-python (https://pypi.python.org/pypi/softlayer-object-storage).\n\nLink to github repository: https://github.com/Arpaso/django-softlayer\n\nSettings\n========\n\nAdd the following to your project\u2019s **settings.py** (your SoftLayer credentials)::\n\n\n    CUMULUS = {\n        'USERNAME': 'YourUsername', # your SoftLayer user name\n        'API_KEY': 'YourAPIKey',    # SoftLayer api key\n        'CONTAINER': 'ContainerName' # SoftLayer container(folder) name\n        'NETWORK': 'private', # Paid 'private' or free 'public' network is available\n    }\n\n    CLOUD_FILE_STORAGE = 'django_softlayer.SoftLayerStorage'\n    INSTALLED_APPS = [\n        ...\n        'django_softlayer',\n        ...\n    ]\n\nUsage\n=====\n\nTo use this storage:\n\n* import storage class, and create your own storage.py::\n\n    from django_softlayer import SoftLayerStorage\n    from django.utils.functional import LazyObject\n    from django.conf import settings\n\n    class MyStorage(LazyObject):\n        def _setup(self):\n            self._wrapped = get_storage_class(settings.CLOUD_FILE_STORAGE)()\n\n* Then you can use it in models.py::\n\n    from storage import MyStorage\n\n    class MyModel(Model):\n        file = models.FileField(storage=MyStorage())\n\n* That's all.\n     \nTo upload files to storage from folder, check for the command usage::\n\n    ./manage.py syncstatic --help\n\nTesting\n=======\nTo run tests::\n\n    ./manage.py test django_softlayer\n\n\nManagement commands\n===================\n\nsyncstatic\n----------\n\nUploads directories to the cloud storage saving directory structure::\n\n    python manage.py syncstatic\n\n**Options**\n\n1. **--mediaroot** - A source directory to copy files from, e.g. \"/home/djangoprojects/myproject/media\". **Defaults to settings.MEDIA_ROOT**.\n2. **--noreplace** - Skip and do not replace existing files in the storage. **Default is False**.\n3. **--mask** - A file mask, e.g. **\\*.ext**. **Defaults to: \\*.mp3**\n4. **-v** - higher verbosity is available\n\nget_missing_files\n-----------------\n\nPrints information to console about empty or non existing files present in database but not at cloud files storage::\n\n    python manage.py get_missing_files\n\n**Options**\n\n**--app_model_field** - String containing dot separated app, model and field name. **Example: myapp.User.file**\n\n**NOTE:** this options can be defaulted to **CMD_MISSING_FILES_SETTINGS** variable in **settings.py**::\n\n    CMD_MISSING_FILES_SETTINGS = (\n        'app.model.filefield',\n        'nextapp.nextmodel.nextfile'\n    )\n\n* When **CMD_MISSING_FILES_SETTINGS** variable is in settings.py, you can search a set of **app.model.field** to search for empty files.\n\n* When using **--app_model_field** option, you can only specify one **app.model.field** per command.\n\nWritten by the development team of Arpaso company: http://arpaso.com", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/Arpaso/django-softlayer/tarball/0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Arpaso/django-softlayer", "keywords": "django,softlayer,storage,cloudfiles", "license": "UNKNOWN", "maintainer": "", "maintainer_email": "", "name": "django-softlayer", "package_url": "https://pypi.org/project/django-softlayer/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-softlayer/", "project_urls": {"Download": "https://github.com/Arpaso/django-softlayer/tarball/0.2", "Homepage": "https://github.com/Arpaso/django-softlayer"}, "release_url": "https://pypi.org/project/django-softlayer/0.2/", "requires_dist": null, "requires_python": null, "summary": "Django storage for SoftLayer Cloud Storage", "version": "0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"django-storage-for-softlayer-cloud-storage\">\n<h2>Django storage for SoftLayer Cloud Storage</h2>\n<p>This package uses django-cumulus (<a href=\"https://pypi.python.org/pypi/django-cumulus\" rel=\"nofollow\">https://pypi.python.org/pypi/django-cumulus</a>) and\nsoftlayer-object-storage-python (<a href=\"https://pypi.python.org/pypi/softlayer-object-storage\" rel=\"nofollow\">https://pypi.python.org/pypi/softlayer-object-storage</a>).</p>\n<p>Link to github repository: <a href=\"https://github.com/Arpaso/django-softlayer\" rel=\"nofollow\">https://github.com/Arpaso/django-softlayer</a></p>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>Add the following to your project\u2019s <strong>settings.py</strong> (your SoftLayer credentials):</p>\n<pre>CUMULUS = {\n    'USERNAME': 'YourUsername', # your SoftLayer user name\n    'API_KEY': 'YourAPIKey',    # SoftLayer api key\n    'CONTAINER': 'ContainerName' # SoftLayer container(folder) name\n    'NETWORK': 'private', # Paid 'private' or free 'public' network is available\n}\n\nCLOUD_FILE_STORAGE = 'django_softlayer.SoftLayerStorage'\nINSTALLED_APPS = [\n    ...\n    'django_softlayer',\n    ...\n]\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<p>To use this storage:</p>\n<ul>\n<li><p>import storage class, and create your own storage.py:</p>\n<pre>from django_softlayer import SoftLayerStorage\nfrom django.utils.functional import LazyObject\nfrom django.conf import settings\n\nclass MyStorage(LazyObject):\n    def _setup(self):\n        self._wrapped = get_storage_class(settings.CLOUD_FILE_STORAGE)()\n</pre>\n</li>\n<li><p>Then you can use it in models.py:</p>\n<pre>from storage import MyStorage\n\nclass MyModel(Model):\n    file = models.FileField(storage=MyStorage())\n</pre>\n</li>\n<li><p>That\u2019s all.</p>\n</li>\n</ul>\n<p>To upload files to storage from folder, check for the command usage:</p>\n<pre>./manage.py syncstatic --help\n</pre>\n</div>\n<div id=\"testing\">\n<h2>Testing</h2>\n<p>To run tests:</p>\n<pre>./manage.py test django_softlayer\n</pre>\n</div>\n<div id=\"management-commands\">\n<h2>Management commands</h2>\n<div id=\"syncstatic\">\n<h3>syncstatic</h3>\n<p>Uploads directories to the cloud storage saving directory structure:</p>\n<pre>python manage.py syncstatic\n</pre>\n<p><strong>Options</strong></p>\n<ol>\n<li><strong>\u2013mediaroot</strong> - A source directory to copy files from, e.g. \u201c/home/djangoprojects/myproject/media\u201d. <strong>Defaults to settings.MEDIA_ROOT</strong>.</li>\n<li><strong>\u2013noreplace</strong> - Skip and do not replace existing files in the storage. <strong>Default is False</strong>.</li>\n<li><strong>\u2013mask</strong> - A file mask, e.g. <strong>*.ext</strong>. <strong>Defaults to: *.mp3</strong></li>\n<li><strong>-v</strong> - higher verbosity is available</li>\n</ol>\n</div>\n<div id=\"get-missing-files\">\n<h3>get_missing_files</h3>\n<p>Prints information to console about empty or non existing files present in database but not at cloud files storage:</p>\n<pre>python manage.py get_missing_files\n</pre>\n<p><strong>Options</strong></p>\n<p><strong>\u2013app_model_field</strong> - String containing dot separated app, model and field name. <strong>Example: myapp.User.file</strong></p>\n<p><strong>NOTE:</strong> this options can be defaulted to <strong>CMD_MISSING_FILES_SETTINGS</strong> variable in <strong>settings.py</strong>:</p>\n<pre>CMD_MISSING_FILES_SETTINGS = (\n    'app.model.filefield',\n    'nextapp.nextmodel.nextfile'\n)\n</pre>\n<ul>\n<li>When <strong>CMD_MISSING_FILES_SETTINGS</strong> variable is in settings.py, you can search a set of <strong>app.model.field</strong> to search for empty files.</li>\n<li>When using <strong>\u2013app_model_field</strong> option, you can only specify one <strong>app.model.field</strong> per command.</li>\n</ul>\n<p>Written by the development team of Arpaso company: <a href=\"http://arpaso.com\" rel=\"nofollow\">http://arpaso.com</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 836310, "releases": {"0.2": [{"comment_text": "", "digests": {"md5": "c477f1c362a6a5c8542e55f4f33e15f7", "sha256": "961892f3f9cad209e8eca16d448ef578f822cdc6696b1867d720f8e6e2d31ff7"}, "downloads": -1, "filename": "django-softlayer-0.2.tar.gz", "has_sig": false, "md5_digest": "c477f1c362a6a5c8542e55f4f33e15f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1027222, "upload_time": "2013-08-07T14:57:00", "upload_time_iso_8601": "2013-08-07T14:57:00.586038Z", "url": "https://files.pythonhosted.org/packages/98/a8/c02d988e7e2196c36a4e5142760eaba57d6ddc90d230fefb6928ad36f4a7/django-softlayer-0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c477f1c362a6a5c8542e55f4f33e15f7", "sha256": "961892f3f9cad209e8eca16d448ef578f822cdc6696b1867d720f8e6e2d31ff7"}, "downloads": -1, "filename": "django-softlayer-0.2.tar.gz", "has_sig": false, "md5_digest": "c477f1c362a6a5c8542e55f4f33e15f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1027222, "upload_time": "2013-08-07T14:57:00", "upload_time_iso_8601": "2013-08-07T14:57:00.586038Z", "url": "https://files.pythonhosted.org/packages/98/a8/c02d988e7e2196c36a4e5142760eaba57d6ddc90d230fefb6928ad36f4a7/django-softlayer-0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:05 2020"}