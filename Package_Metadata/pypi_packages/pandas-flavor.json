{"info": {"author": "Zach Sailer", "author_email": "zachsailer@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "\n# Pandas Flavor\n**The easy way to write your own flavor of Pandas**\n\nPandas 0.23 added a (simple) API for registering accessors with Pandas objects.\n\nPandas-flavor extends Pandas' extension API by:\n1. adding support for registering methods as well.\n2. making each of these functions backwards compatible with older versions of Pandas.\n\n***What does this mean?***\n\nIt is now simpler to add custom functionality to Pandas DataFrames and Series.\n\nImport this package. Write a simple python function. Register the function using one of the following decorators.\n\n***Why?***\n\nPandas is super handy. Its general purpose is to be a \"flexible and powerful data analysis/manipulation library\".\n\n**Pandas Flavor** allows you add functionality that tailors Pandas to specific fields or use cases.\n\nMaybe you want to add new write methods to the Pandas DataFrame? Maybe you want custom plot functionality? Maybe something else?\n\n## Register accessors\n\nAccessors (in pandas) are objects attached to a attribute on the Pandas DataFrame/Series\nthat provide extra, specific functionality. For example, `pandas.DataFrame.plot` is an\naccessor that provides plotting functionality.\n\nAdd an accessor by registering the function with the following decorator\nand passing the decorator an accessor name.\n\n\n```python\n# my_flavor.py\n\nimport pandas as pd\nimport pandas_flavor as pf\n\n@pf.register_dataframe_accessor('my_flavor')\nclass MyFlavor(object):\n\n  def __init__(self, data):\n    self._data\n\n    def row_by_value(self, col, value):\n        \"\"\"Slice out row from DataFrame by a value.\"\"\"\n        return self._data[self._data[col] == value].squeeze()\n\n```\n\nEvery dataframe now has this accessor as an attribute.\n```python\nimport my_flavor\n\n# DataFrame.\ndf = DataFrame(data={\n  \"x\": [10, 20, 25],\n  \"y\": [0, 2, 5]\n})\n\n# Print DataFrame\nprint(df)\n\n# x  y\n# 0  10  0\n# 1  20  2\n# 2  25  5\n\n# Access this functionality\ndf.my_flavor.row_by_value('x', 10)\n\n# x    10\n# y     0\n# Name: 0, dtype: int64\n```\n\nTo see this in action, check out [pdvega](https://github.com/jakevdp/pdvega),\n[PhyloPandas](https://github.com/Zsailer/phylopandas), and [pyjanitor](https://github.com/ericmjl/pyjanitor)!\n\n\n## Register methods\n\nUsing this package, you can attach functions directly to Pandas objects. No\nintermediate accessor is needed.\n\n```python\n# my_flavor.py\n\nimport pandas as pd\nimport pandas_flavor as pf\n\n@pf.register_dataframe_method\ndef row_by_value(df, col, value):\n    \"\"\"Slice out row from DataFrame by a value.\"\"\"\n    return df[df[col] == value].squeeze()\n\n```\n\n```python\nimport my_flavor\n\n# DataFrame.\ndf = DataFrame(data={\n  \"x\": [10, 20, 25],\n  \"y\": [0, 2, 5]\n})\n\n# Print DataFrame\nprint(df)\n\n# x  y\n# 0  10  0\n# 1  20  2\n# 2  25  5\n\n# Access this functionality\ndf.row_by_value('x', 10)\n\n# x    10\n# y     0\n# Name: 0, dtype: int64\n```\n\n## Available Methods\n\n- **register_dataframe_method**: register a method directly with a pandas DataFrame.\n- **register_dataframe_accessor**: register an accessor (and it's methods) with a pandas DataFrame.\n- **register_series_method**: register a methods directly with a pandas Series.\n- **register_series_accessor**: register an accessor (and it's methods) with a pandas Series.\n\n## Installation\n\nYou can install using **pip**:\n```\npip install pandas_flavor\n```\nor conda (thanks @ericmjl)!\n```\nconda install -c conda-forge pandas-flavor\n```\n\n## Contributing\n\nPull requests are always welcome! If you find a bug, don't hestitate to open an issue or submit a PR. If you're not sure how to do that, check out this [simple guide](https://github.com/Zsailer/guide-to-working-as-team-on-github).\n\nIf you have a feature request, please open an issue or submit a PR!\n\n## TL;DR\n\nPandas 0.23 introduced a simpler API for [extending Pandas](https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extending-pandas). This API provided two key decorators, `register_dataframe_accessor` and `register_series_accessor`, that enable users to register **accessors** with Pandas DataFrames and Series. \n\nPandas Flavor originated as a library to backport these decorators to older versions of Pandas (<0.23). While doing the backporting, it became clear that registering **methods** directly to Pandas objects might be a desired feature as well.[*](#footnote) \n\n<a name=\"footnote\">*</a>*It is likely that Pandas deliberately chose not implement to this feature. If everyone starts monkeypatching DataFrames with their custom methods, it could lead to confusion in the Pandas community. The preferred Pandas approach is to namespace your methods by registering an accessor that contains your custom methods.* \n\n**So how does method registration work?**\n\nWhen you register a method, Pandas flavor actually creates and registers a (this is subtle, but important) **custom accessor class that mimics** the behavior of a method by:\n1. inheriting the docstring of your function\n2. overriding the `__call__` method to call your function.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Zsailer/pandas_flavor", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pandas-flavor", "package_url": "https://pypi.org/project/pandas-flavor/", "platform": "", "project_url": "https://pypi.org/project/pandas-flavor/", "project_urls": {"Homepage": "https://github.com/Zsailer/pandas_flavor"}, "release_url": "https://pypi.org/project/pandas-flavor/0.2.0/", "requires_dist": ["pandas", "xarray"], "requires_python": "", "summary": "The easy way to write your own Pandas flavor.", "version": "0.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Pandas Flavor</h1>\n<p><strong>The easy way to write your own flavor of Pandas</strong></p>\n<p>Pandas 0.23 added a (simple) API for registering accessors with Pandas objects.</p>\n<p>Pandas-flavor extends Pandas' extension API by:</p>\n<ol>\n<li>adding support for registering methods as well.</li>\n<li>making each of these functions backwards compatible with older versions of Pandas.</li>\n</ol>\n<p><em><strong>What does this mean?</strong></em></p>\n<p>It is now simpler to add custom functionality to Pandas DataFrames and Series.</p>\n<p>Import this package. Write a simple python function. Register the function using one of the following decorators.</p>\n<p><em><strong>Why?</strong></em></p>\n<p>Pandas is super handy. Its general purpose is to be a \"flexible and powerful data analysis/manipulation library\".</p>\n<p><strong>Pandas Flavor</strong> allows you add functionality that tailors Pandas to specific fields or use cases.</p>\n<p>Maybe you want to add new write methods to the Pandas DataFrame? Maybe you want custom plot functionality? Maybe something else?</p>\n<h2>Register accessors</h2>\n<p>Accessors (in pandas) are objects attached to a attribute on the Pandas DataFrame/Series\nthat provide extra, specific functionality. For example, <code>pandas.DataFrame.plot</code> is an\naccessor that provides plotting functionality.</p>\n<p>Add an accessor by registering the function with the following decorator\nand passing the decorator an accessor name.</p>\n<pre><span class=\"c1\"># my_flavor.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas_flavor</span> <span class=\"k\">as</span> <span class=\"nn\">pf</span>\n\n<span class=\"nd\">@pf</span><span class=\"o\">.</span><span class=\"n\">register_dataframe_accessor</span><span class=\"p\">(</span><span class=\"s1\">'my_flavor'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyFlavor</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n  <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">):</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">row_by_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"Slice out row from DataFrame by a value.\"\"\"</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_data</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>\n</pre>\n<p>Every dataframe now has this accessor as an attribute.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">my_flavor</span>\n\n<span class=\"c1\"># DataFrame.</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">],</span>\n  <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Print DataFrame</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># x  y</span>\n<span class=\"c1\"># 0  10  0</span>\n<span class=\"c1\"># 1  20  2</span>\n<span class=\"c1\"># 2  25  5</span>\n\n<span class=\"c1\"># Access this functionality</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">my_flavor</span><span class=\"o\">.</span><span class=\"n\">row_by_value</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># x    10</span>\n<span class=\"c1\"># y     0</span>\n<span class=\"c1\"># Name: 0, dtype: int64</span>\n</pre>\n<p>To see this in action, check out <a href=\"https://github.com/jakevdp/pdvega\" rel=\"nofollow\">pdvega</a>,\n<a href=\"https://github.com/Zsailer/phylopandas\" rel=\"nofollow\">PhyloPandas</a>, and <a href=\"https://github.com/ericmjl/pyjanitor\" rel=\"nofollow\">pyjanitor</a>!</p>\n<h2>Register methods</h2>\n<p>Using this package, you can attach functions directly to Pandas objects. No\nintermediate accessor is needed.</p>\n<pre><span class=\"c1\"># my_flavor.py</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas_flavor</span> <span class=\"k\">as</span> <span class=\"nn\">pf</span>\n\n<span class=\"nd\">@pf</span><span class=\"o\">.</span><span class=\"n\">register_dataframe_method</span>\n<span class=\"k\">def</span> <span class=\"nf\">row_by_value</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">col</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Slice out row from DataFrame by a value.\"\"\"</span>\n    <span class=\"k\">return</span> <span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">df</span><span class=\"p\">[</span><span class=\"n\">col</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">squeeze</span><span class=\"p\">()</span>\n</pre>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">my_flavor</span>\n\n<span class=\"c1\"># DataFrame.</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"p\">{</span>\n  <span class=\"s2\">\"x\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">],</span>\n  <span class=\"s2\">\"y\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"c1\"># Print DataFrame</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># x  y</span>\n<span class=\"c1\"># 0  10  0</span>\n<span class=\"c1\"># 1  20  2</span>\n<span class=\"c1\"># 2  25  5</span>\n\n<span class=\"c1\"># Access this functionality</span>\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">row_by_value</span><span class=\"p\">(</span><span class=\"s1\">'x'</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># x    10</span>\n<span class=\"c1\"># y     0</span>\n<span class=\"c1\"># Name: 0, dtype: int64</span>\n</pre>\n<h2>Available Methods</h2>\n<ul>\n<li><strong>register_dataframe_method</strong>: register a method directly with a pandas DataFrame.</li>\n<li><strong>register_dataframe_accessor</strong>: register an accessor (and it's methods) with a pandas DataFrame.</li>\n<li><strong>register_series_method</strong>: register a methods directly with a pandas Series.</li>\n<li><strong>register_series_accessor</strong>: register an accessor (and it's methods) with a pandas Series.</li>\n</ul>\n<h2>Installation</h2>\n<p>You can install using <strong>pip</strong>:</p>\n<pre><code>pip install pandas_flavor\n</code></pre>\n<p>or conda (thanks @ericmjl)!</p>\n<pre><code>conda install -c conda-forge pandas-flavor\n</code></pre>\n<h2>Contributing</h2>\n<p>Pull requests are always welcome! If you find a bug, don't hestitate to open an issue or submit a PR. If you're not sure how to do that, check out this <a href=\"https://github.com/Zsailer/guide-to-working-as-team-on-github\" rel=\"nofollow\">simple guide</a>.</p>\n<p>If you have a feature request, please open an issue or submit a PR!</p>\n<h2>TL;DR</h2>\n<p>Pandas 0.23 introduced a simpler API for <a href=\"https://pandas.pydata.org/pandas-docs/stable/development/extending.html#extending-pandas\" rel=\"nofollow\">extending Pandas</a>. This API provided two key decorators, <code>register_dataframe_accessor</code> and <code>register_series_accessor</code>, that enable users to register <strong>accessors</strong> with Pandas DataFrames and Series.</p>\n<p>Pandas Flavor originated as a library to backport these decorators to older versions of Pandas (&lt;0.23). While doing the backporting, it became clear that registering <strong>methods</strong> directly to Pandas objects might be a desired feature as well.<a href=\"#footnote\" rel=\"nofollow\">*</a></p>\n<p><a>*</a><em>It is likely that Pandas deliberately chose not implement to this feature. If everyone starts monkeypatching DataFrames with their custom methods, it could lead to confusion in the Pandas community. The preferred Pandas approach is to namespace your methods by registering an accessor that contains your custom methods.</em></p>\n<p><strong>So how does method registration work?</strong></p>\n<p>When you register a method, Pandas flavor actually creates and registers a (this is subtle, but important) <strong>custom accessor class that mimics</strong> the behavior of a method by:</p>\n<ol>\n<li>inheriting the docstring of your function</li>\n<li>overriding the <code>__call__</code> method to call your function.</li>\n</ol>\n\n          </div>"}, "last_serial": 6113875, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "13c0454f764bee98eb39c660eea7210d", "sha256": "4af19e9937c7b2aab89b1bf717dad90151f6d9dd9e5da4e03c0fa377001ac294"}, "downloads": -1, "filename": "pandas_flavor-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "13c0454f764bee98eb39c660eea7210d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 4508, "upload_time": "2018-01-29T17:45:02", "upload_time_iso_8601": "2018-01-29T17:45:02.554498Z", "url": "https://files.pythonhosted.org/packages/b4/61/8d9f0e693a6177223ca67514f783e9c1a2f8fe48892349b94e34a18b3a6c/pandas_flavor-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6b800bec6280e18c2401e89634d44f7c", "sha256": "fdf661f0d684725140dd54c5ac9dbc51cc206d05d7b1ba2fb655ac05fd67f5d0"}, "downloads": -1, "filename": "pandas_flavor-0.1.0.tar.gz", "has_sig": false, "md5_digest": "6b800bec6280e18c2401e89634d44f7c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3293, "upload_time": "2018-01-29T17:45:03", "upload_time_iso_8601": "2018-01-29T17:45:03.822929Z", "url": "https://files.pythonhosted.org/packages/4d/bb/1a0bc3ad240eb22615a2cb350d210b8c7ed83c0567b44fab367b84b51235/pandas_flavor-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "dbc692f0f8531c57f4a8512488bf24ed", "sha256": "5ae12ca81813baad0821ecd7316d89575cefac5a00e9e0993d4c337e10dd67f6"}, "downloads": -1, "filename": "pandas_flavor-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbc692f0f8531c57f4a8512488bf24ed", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5388, "upload_time": "2018-01-29T18:20:44", "upload_time_iso_8601": "2018-01-29T18:20:44.943648Z", "url": "https://files.pythonhosted.org/packages/e1/c3/c9cceafff3247ba7442395f106087e3867d9f741e4fbfb19d77178904a4e/pandas_flavor-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1cbdf8017e5e0346c57d06efb15aecca", "sha256": "f35f3111b99405e43a2fd9e1552e5d855b151b23b49a15f025b318bfbc8b3761"}, "downloads": -1, "filename": "pandas_flavor-0.1.1.tar.gz", "has_sig": false, "md5_digest": "1cbdf8017e5e0346c57d06efb15aecca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3826, "upload_time": "2018-01-29T18:20:46", "upload_time_iso_8601": "2018-01-29T18:20:46.065200Z", "url": "https://files.pythonhosted.org/packages/15/15/f65df779b159a95e7d56224e2577803c20f4e690767e8aa910e2d0de5b7b/pandas_flavor-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "2f93e2d5b87c1c2d200f2212dbd3a3c2", "sha256": "1838b4f63b676715d39f9abf39ad281b5f6d655fceebf8142090852f1e72e25e"}, "downloads": -1, "filename": "pandas_flavor-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2f93e2d5b87c1c2d200f2212dbd3a3c2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5746, "upload_time": "2018-07-18T18:52:17", "upload_time_iso_8601": "2018-07-18T18:52:17.919573Z", "url": "https://files.pythonhosted.org/packages/79/35/092aa4518f4b386eb557c634f9765cdb3c6350950dfe2c58ed6e088e805d/pandas_flavor-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "fbcefc7c5334341a9392eb34d27a09e3", "sha256": "0add4a50e9e18decb986c5ad983ef8cc3fcedb195443500a0e4ea41cb70e7b4d"}, "downloads": -1, "filename": "pandas_flavor-0.1.2.tar.gz", "has_sig": false, "md5_digest": "fbcefc7c5334341a9392eb34d27a09e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4142, "upload_time": "2018-07-18T18:52:18", "upload_time_iso_8601": "2018-07-18T18:52:18.782692Z", "url": "https://files.pythonhosted.org/packages/ce/b6/690c24b45e219e1f9d8a681ec0a81a716440e01d8b861697d111f06eccd6/pandas_flavor-0.1.2.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "638d1ce8a9f75ecc962328244139af11", "sha256": "ce4d3640a89435c27eb2369305455865f043464ee5ae450e5388f4fb30eae241"}, "downloads": -1, "filename": "pandas_flavor-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "638d1ce8a9f75ecc962328244139af11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6565, "upload_time": "2019-11-11T04:43:18", "upload_time_iso_8601": "2019-11-11T04:43:18.338805Z", "url": "https://files.pythonhosted.org/packages/9a/57/7fbcff4c0961ed190ac5fcb0bd8194152ee1ee6487edf64fdbae16e2bc4b/pandas_flavor-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9888e1f40b439486b470f475465491f8", "sha256": "7871655816de22dc766e916697ccc67449e1863c090ef5fd40d4d0fbd056e489"}, "downloads": -1, "filename": "pandas_flavor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9888e1f40b439486b470f475465491f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5637, "upload_time": "2019-11-11T04:43:20", "upload_time_iso_8601": "2019-11-11T04:43:20.114323Z", "url": "https://files.pythonhosted.org/packages/b1/8b/a92a6ecb43ff6f2354a68c05ff5ec923505efe604eb46c54ee203ae2d2a3/pandas_flavor-0.2.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "638d1ce8a9f75ecc962328244139af11", "sha256": "ce4d3640a89435c27eb2369305455865f043464ee5ae450e5388f4fb30eae241"}, "downloads": -1, "filename": "pandas_flavor-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "638d1ce8a9f75ecc962328244139af11", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 6565, "upload_time": "2019-11-11T04:43:18", "upload_time_iso_8601": "2019-11-11T04:43:18.338805Z", "url": "https://files.pythonhosted.org/packages/9a/57/7fbcff4c0961ed190ac5fcb0bd8194152ee1ee6487edf64fdbae16e2bc4b/pandas_flavor-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9888e1f40b439486b470f475465491f8", "sha256": "7871655816de22dc766e916697ccc67449e1863c090ef5fd40d4d0fbd056e489"}, "downloads": -1, "filename": "pandas_flavor-0.2.0.tar.gz", "has_sig": false, "md5_digest": "9888e1f40b439486b470f475465491f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5637, "upload_time": "2019-11-11T04:43:20", "upload_time_iso_8601": "2019-11-11T04:43:20.114323Z", "url": "https://files.pythonhosted.org/packages/b1/8b/a92a6ecb43ff6f2354a68c05ff5ec923505efe604eb46c54ee203ae2d2a3/pandas_flavor-0.2.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:31 2020"}