{"info": {"author": "Haiting Chan", "author_email": "haitingchan@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# MSIM2020 \u2013 Music\nA Python package for making your own instrument that will play to a MIDI track. For the Tufts MSIM Raspberry Pi Music project in year 2020.\n\n## Prerequisites\n\n\n1. You will need to install python-sonic, a simple Python interface for Sonic Pi.\n`python3 -m pip install python-sonic`\n\n2. Download [python3-midi](https://github.com/louisabraham/python3-midi) by following their instructions. They're a bit tricky, so feel free to ask me for help.\n\n3. [Sonic Pi](https://sonic-pi.net/) needs to be open on the same computer for python-sonic to make sounds. So, if you plan on playing sounds from python-sonic, open Sonic Pi in the background!\n\n**Okay, now check that you did all three steps above so it doesn't haunt you later.**\n\n_Note: It would be great if someone (or later, I) could add an install script to make this process easier. In the meantime, please ask if you need help!_\n\n## Installation\n\nEnter this into your command line prompt (but please let me know right away if it doesn't work for you):\n\n`pip install msimmusic`\n\n## Examples\n\n### A fully working example\n\nIf you copy-paste this into file to run, make sure you have a MIDI file in the same directory as that file called \"funkymusic.mid\". You can download the one here from this GitHub repo above.\n\n\n```\nimport msimmusic as mm\nimport psonic as ps\n\nmidiFile = \"funkymusic.mid\"\n\ndef playSawSynth(pitch, duration):\n    ps.use_synth(ps.SAW)\n    ps.play(pitch, release=0.2)\n    ps.sleep(duration)\n\ndef main():\n    tempo = 120\n    track = 0   # also try 1 and 2\n    mm.midiPlayer(playSawSynth, midiFile, tempo, 0)\n\nif __name__ == \"__main__\":\n    main()\n\n```\n\n### Importing\n\n`import msimmusic as mm`\n\n### How to use\n`midiPlayer()` is the object to provide the interface to start playing a track.\n\n```\nmm.midiPlayer(playInstrument, midiFile, tempo, track=None)\n```\n\nThe three required parameters (and the optional fourth):\n\n1. A function that midiPlayer will call\n2. A string for the MIDI file name\n3. An integer for the tempo of the song\n4. An integer for the track number in the MIDI file (aka, which instrument) \n\t* Even if there are several tracks in the MIDI file, midiPlayer will default to the first track if none are given\n\n\nThe function provided for #1 above must have at least these two parameters representing 1) the note pitch (aka frequency) and 2) the duration _in that order_. Example definition:\n\n```\ndef playSynth(p, dur):\n\tif p == 69:\n\t\tps.play(p)\n\t\tps.sleep(dur)\n\t# more code below\n```\n\n**A note on units:**\nYou might wonder, why are we checking if the pitch is `69` in the example above? Well, `69` is actually the MIDI number for the note A at 440.00 Hz. The duration of the note is simply in seconds.\n**Please pay attention to the units of pitch and duration for your needs.**\n\n\n##### Converting pitch from MIDI number in Hz\nIf you need frequency in Hz instead of the MIDI number, use this function:\n\n```\nf = mm.midiNumToFreq(p)\n```\n\n#### Getting the name of the MIDI number\nIf you want to use the letter note names, python-sonic library has them as a variable named as the letter and octave. For example, `ps.B3` or `ps.C5`.\n\nFor fun, You can also refer to [this table](https://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies).\n\n\n### Need more control? Get the midiPlayer instance\nYou can also get the midiPlayer instance back by including it as an additional parameter. Then, you can access internal instance variables yourself. For example:\n\n```\ndef playSynth(p, dur, player):\n    ps.use_synth(ps.SAW)\n\n    # Only play if the note is A4\n    if (p == ps.A4):\n        ps.play(p)\n        # play the duration of half a beat instead of the duration specified in the MIDI\n        ps.sleep(player.secs_per_beat / 2)\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/homorhythm/msim2020", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "msimmusic", "package_url": "https://pypi.org/project/msimmusic/", "platform": "", "project_url": "https://pypi.org/project/msimmusic/", "project_urls": {"Homepage": "https://github.com/homorhythm/msim2020"}, "release_url": "https://pypi.org/project/msimmusic/0.0.2/", "requires_dist": null, "requires_python": ">=3.0", "summary": "Make Your MIDI Instrument. From the Tufts MSIM RPi Music Project", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>MSIM2020 \u2013 Music</h1>\n<p>A Python package for making your own instrument that will play to a MIDI track. For the Tufts MSIM Raspberry Pi Music project in year 2020.</p>\n<h2>Prerequisites</h2>\n<ol>\n<li>\n<p>You will need to install python-sonic, a simple Python interface for Sonic Pi.\n<code>python3 -m pip install python-sonic</code></p>\n</li>\n<li>\n<p>Download <a href=\"https://github.com/louisabraham/python3-midi\" rel=\"nofollow\">python3-midi</a> by following their instructions. They're a bit tricky, so feel free to ask me for help.</p>\n</li>\n<li>\n<p><a href=\"https://sonic-pi.net/\" rel=\"nofollow\">Sonic Pi</a> needs to be open on the same computer for python-sonic to make sounds. So, if you plan on playing sounds from python-sonic, open Sonic Pi in the background!</p>\n</li>\n</ol>\n<p><strong>Okay, now check that you did all three steps above so it doesn't haunt you later.</strong></p>\n<p><em>Note: It would be great if someone (or later, I) could add an install script to make this process easier. In the meantime, please ask if you need help!</em></p>\n<h2>Installation</h2>\n<p>Enter this into your command line prompt (but please let me know right away if it doesn't work for you):</p>\n<p><code>pip install msimmusic</code></p>\n<h2>Examples</h2>\n<h3>A fully working example</h3>\n<p>If you copy-paste this into file to run, make sure you have a MIDI file in the same directory as that file called \"funkymusic.mid\". You can download the one here from this GitHub repo above.</p>\n<pre><code>import msimmusic as mm\nimport psonic as ps\n\nmidiFile = \"funkymusic.mid\"\n\ndef playSawSynth(pitch, duration):\n    ps.use_synth(ps.SAW)\n    ps.play(pitch, release=0.2)\n    ps.sleep(duration)\n\ndef main():\n    tempo = 120\n    track = 0   # also try 1 and 2\n    mm.midiPlayer(playSawSynth, midiFile, tempo, 0)\n\nif __name__ == \"__main__\":\n    main()\n\n</code></pre>\n<h3>Importing</h3>\n<p><code>import msimmusic as mm</code></p>\n<h3>How to use</h3>\n<p><code>midiPlayer()</code> is the object to provide the interface to start playing a track.</p>\n<pre><code>mm.midiPlayer(playInstrument, midiFile, tempo, track=None)\n</code></pre>\n<p>The three required parameters (and the optional fourth):</p>\n<ol>\n<li>A function that midiPlayer will call</li>\n<li>A string for the MIDI file name</li>\n<li>An integer for the tempo of the song</li>\n<li>An integer for the track number in the MIDI file (aka, which instrument)\n<ul>\n<li>Even if there are several tracks in the MIDI file, midiPlayer will default to the first track if none are given</li>\n</ul>\n</li>\n</ol>\n<p>The function provided for #1 above must have at least these two parameters representing 1) the note pitch (aka frequency) and 2) the duration <em>in that order</em>. Example definition:</p>\n<pre><code>def playSynth(p, dur):\n\tif p == 69:\n\t\tps.play(p)\n\t\tps.sleep(dur)\n\t# more code below\n</code></pre>\n<p><strong>A note on units:</strong>\nYou might wonder, why are we checking if the pitch is <code>69</code> in the example above? Well, <code>69</code> is actually the MIDI number for the note A at 440.00 Hz. The duration of the note is simply in seconds.\n<strong>Please pay attention to the units of pitch and duration for your needs.</strong></p>\n<h5>Converting pitch from MIDI number in Hz</h5>\n<p>If you need frequency in Hz instead of the MIDI number, use this function:</p>\n<pre><code>f = mm.midiNumToFreq(p)\n</code></pre>\n<h4>Getting the name of the MIDI number</h4>\n<p>If you want to use the letter note names, python-sonic library has them as a variable named as the letter and octave. For example, <code>ps.B3</code> or <code>ps.C5</code>.</p>\n<p>For fun, You can also refer to <a href=\"https://www.inspiredacoustics.com/en/MIDI_note_numbers_and_center_frequencies\" rel=\"nofollow\">this table</a>.</p>\n<h3>Need more control? Get the midiPlayer instance</h3>\n<p>You can also get the midiPlayer instance back by including it as an additional parameter. Then, you can access internal instance variables yourself. For example:</p>\n<pre><code>def playSynth(p, dur, player):\n    ps.use_synth(ps.SAW)\n\n    # Only play if the note is A4\n    if (p == ps.A4):\n        ps.play(p)\n        # play the duration of half a beat instead of the duration specified in the MIDI\n        ps.sleep(player.secs_per_beat / 2)\n</code></pre>\n\n          </div>"}, "last_serial": 6469307, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b7392e9767ae012c4264f664ea2b8957", "sha256": "897a4f391c485776f2e8feb1f4829548bb48d0daf64dc4e77cb813ef34544317"}, "downloads": -1, "filename": "msimmusic-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7392e9767ae012c4264f664ea2b8957", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 4934, "upload_time": "2020-01-16T23:50:57", "upload_time_iso_8601": "2020-01-16T23:50:57.992896Z", "url": "https://files.pythonhosted.org/packages/1a/74/6dce96413c4addad1dc5dceba806cbec204ca19542f07834bfb16744ea11/msimmusic-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "44d31bd1f43546bd0049f8565e898670", "sha256": "e8cff09762d36172bdef6db8683b5aa07d2f201e18e0108ab1a0638ab7bd5cdc"}, "downloads": -1, "filename": "msimmusic-0.0.1.tar.gz", "has_sig": false, "md5_digest": "44d31bd1f43546bd0049f8565e898670", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 3933, "upload_time": "2020-01-16T23:51:00", "upload_time_iso_8601": "2020-01-16T23:51:00.213382Z", "url": "https://files.pythonhosted.org/packages/15/1b/5ea83be4bc59fb1b5fb37ca6a09202e420b54245c568d393f6be9fbb4fcf/msimmusic-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "34d8c9250d8bc712ace0b93ffd6aaf77", "sha256": "348f7f60024781718199629b5bfc529b58167084929aeb1055fd48af1370dc11"}, "downloads": -1, "filename": "msimmusic-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "34d8c9250d8bc712ace0b93ffd6aaf77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 4916, "upload_time": "2020-01-16T23:54:48", "upload_time_iso_8601": "2020-01-16T23:54:48.424778Z", "url": "https://files.pythonhosted.org/packages/52/f0/6a7d1b953bb5d9025c4b673519d30ac2c7993f63c25be58966a54acabe1a/msimmusic-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83bdbfe29c6e24837b2ccdb9fbd6c56e", "sha256": "ebfa864282f21ec7b3830b7a9b32e37e8ed62e1349e995aed58e21b0a46c1f47"}, "downloads": -1, "filename": "msimmusic-0.0.2.tar.gz", "has_sig": false, "md5_digest": "83bdbfe29c6e24837b2ccdb9fbd6c56e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 3913, "upload_time": "2020-01-16T23:54:50", "upload_time_iso_8601": "2020-01-16T23:54:50.308847Z", "url": "https://files.pythonhosted.org/packages/3b/af/3e2f281488cb84d87f2e7274867e748eb9f76edb3c1d88998a1f32222cd7/msimmusic-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "34d8c9250d8bc712ace0b93ffd6aaf77", "sha256": "348f7f60024781718199629b5bfc529b58167084929aeb1055fd48af1370dc11"}, "downloads": -1, "filename": "msimmusic-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "34d8c9250d8bc712ace0b93ffd6aaf77", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.0", "size": 4916, "upload_time": "2020-01-16T23:54:48", "upload_time_iso_8601": "2020-01-16T23:54:48.424778Z", "url": "https://files.pythonhosted.org/packages/52/f0/6a7d1b953bb5d9025c4b673519d30ac2c7993f63c25be58966a54acabe1a/msimmusic-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "83bdbfe29c6e24837b2ccdb9fbd6c56e", "sha256": "ebfa864282f21ec7b3830b7a9b32e37e8ed62e1349e995aed58e21b0a46c1f47"}, "downloads": -1, "filename": "msimmusic-0.0.2.tar.gz", "has_sig": false, "md5_digest": "83bdbfe29c6e24837b2ccdb9fbd6c56e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 3913, "upload_time": "2020-01-16T23:54:50", "upload_time_iso_8601": "2020-01-16T23:54:50.308847Z", "url": "https://files.pythonhosted.org/packages/3b/af/3e2f281488cb84d87f2e7274867e748eb9f76edb3c1d88998a1f32222cd7/msimmusic-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:50 2020"}