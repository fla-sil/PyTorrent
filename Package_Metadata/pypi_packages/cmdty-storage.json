{"info": {"author": "Jake Fowler", "author_email": "jake@cmdty.co.uk", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Financial and Insurance Industry", "License :: OSI Approved :: MIT License", "Operating System :: Microsoft :: Windows", "Programming Language :: C#", "Programming Language :: Python :: 3", "Topic :: Office/Business :: Financial", "Topic :: Office/Business :: Financial :: Investment", "Topic :: Scientific/Engineering :: Mathematics", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "## Overview\nA collection of models for the valuation and optimisation of commodity storage, either virtual or physical. The models can be used for any commodity, although are most suitable for natural gas storage valuation and optimisation.\n\nCalculations take into account many of the complex features of physical storage including:\n* Inventory dependent injection and withdrawal rates, otherwise known as ratchets. For physical storage it is often the case that maximum withdrawal rates will increase, and injection rates will decrease as the storage inventory increases. For natural gas, this due to the increased pressure within the storage cavern.\n* Time dependent injection and withdrawal rates, including the ability to add outages when no injection or withdrawal is allowed.\n* Forced injection/withdrawal, as can be enforced by regulatory or physical constraints.\n* Commodity consumed on injection/withdrawal, for example where natural gas is consumed by the motors that power injection into storage.\n* Time dependent minimum and maximum inventory, necessary if different notional volumes of a storage facility are leased for different consecutive years.\n* Optional time and inventory dependent loss of commodity in storage. For example this assumption is necessary for electricity storage which isn't 100% efficient.\n* Ability to constrain the storage to be empty at the end of it's life, or specify a value of commodity inventory left in storage.\n\n## Models\n### Currently Implemented\nCurrently the following models are implemented in this repository:\n* Intrinsic valuation, i.e. optimal value assuming the commodity price remains static.\n* One-factor trinomial tree, with seasonal spot volatility.\n\nBoth approaches solve the optimsation problem using backward induction across a discrete inventory grid.\n\n### Planned Implementations\nImplemenations using the following techniques are planned in the near future:\n* Least-Squares Monte Carlo with a multi-factor price process.\n* Rolling Intrinsic.\n\n## Examples\n### Creating the Storage Object\nThe first step is to create an instance of the class CmdtyStorage which\nrepresents the storage facility. Many of the parameters of the CmdtyStorage\ninitializer in the example below are optional and can also be of type\npandas.Series in order to be time dependent. Better documentation on this\nis to follow.\n\n```python\nfrom datetime import date, timedelta\nimport pandas as pd\nfrom cmdty_storage import CmdtyStorage, InjectWithdrawByInventoryAndPeriod, InjectWithdrawByInventory, intrinsic_value\n\ndef create_piecewise_flat_series(data, dt_index, freq):\n    period_index = pd.PeriodIndex([pd.Period(dt, freq=freq) for dt in dt_index])\n    return pd.Series(data, period_index).resample(freq).fillna('pad')\n\nconstraints =   [\n                    InjectWithdrawByInventoryAndPeriod(date(2019, 8, 28), \n                                [\n                                    InjectWithdrawByInventory(0.0, -150.0, 255.2),\n                                    InjectWithdrawByInventory(2000.0, -200.0, 175.0),\n                                ]),\n                    (date(2019, 9, 10), \n                             [\n                                 (0.0, -170.5, 235.8),\n                                 (700.0, -180.2, 200.77),\n                                 (1800.0, -190.5, 174.45),\n                            ])\n                ]\n\nstorage_start = date(2019, 8, 28)\nstorage_end = date(2019, 9, 25)\nconstant_injection_cost = 0.015\nconstant_pcnt_consumed_inject = 0.0001\nconstant_withdrawal_cost = 0.02\nconstant_pcnt_consumed_withdraw = 0.000088\nconstant_pcnt_inventory_loss = 0.001;\nconstant_pcnt_inventory_cost = 0.002;\n\ncmdty_storage = CmdtyStorage('D', storage_start, storage_end, constant_injection_cost, constant_withdrawal_cost, constraints, \n                        cmdty_consumed_inject=constant_pcnt_consumed_inject, cmdty_consumed_withdraw=constant_pcnt_consumed_withdraw,\n                        inventory_loss=constant_pcnt_inventory_loss, inventory_cost=constant_pcnt_inventory_cost)\n```\n\n\n### Calculation of Intrinsic NPV\nThe following example shows how to calculate the intrinsic NPV, the \nvalue assuming that the commodity forward curve is static.\n\n\n```python\ninventory = 650.0\nval_date = date(2019, 9, 2)\n\nforward_curve = create_piecewise_flat_series([58.89, 61.41, 59.89, 59.89], \n                          [val_date, date(2019, 9, 12), date(2019, 9, 18), storage_end], freq='D')\n\nflat_interest_rate = 0.03\ninterest_rate_curve = pd.Series(index = pd.period_range(val_date, storage_end + timedelta(days=50), freq='D'))\ninterest_rate_curve[:] = flat_interest_rate\n\ntwentieth_of_next_month = lambda period: period.asfreq('M').asfreq('D', 'end') + 20\nintrinsic_results = intrinsic_value(cmdty_storage, val_date, inventory, forward_curve, \n                settlement_rule=twentieth_of_next_month, interest_rates=interest_rate_curve, \n                                    num_inventory_grid_points=100)\n\nprint(\"Storage NPV\")\nprint(\"{:,.2f}\".format(intrinsic_results.npv) )\nprint()\nprint(intrinsic_results.profile.applymap(\"{0:.2f}\".format))\n```\n\nPrints the following:\n```\nStorage NPV\n40,419.45\n\n           inventory inject_withdraw_volume cmdty_consumed inventory_loss net_position\n2019-09-02    483.10                -166.25           0.01           0.65       166.24\n2019-09-03    320.54                -162.08           0.01           0.48       162.06\n2019-09-04    320.22                   0.00           0.00           0.32        -0.00\n2019-09-05    562.26                 242.36           0.02           0.32      -242.38\n2019-09-06    794.35                 232.65           0.02           0.56      -232.68\n2019-09-07   1016.90                 223.35           0.02           0.79      -223.37\n2019-09-08   1230.31                 214.42           0.02           1.02      -214.44\n2019-09-09   1434.94                 205.86           0.02           1.23      -205.89\n2019-09-10   1616.69                 183.18           0.02           1.43      -183.20\n2019-09-11   1793.91                 178.84           0.02           1.62      -178.85\n2019-09-12   1601.67                -190.44           0.02           1.79       190.43\n2019-09-13   1411.43                -188.64           0.02           1.60       188.63\n2019-09-14   1223.16                -186.86           0.02           1.41       186.85\n2019-09-15   1036.83                -185.10           0.02           1.22       185.08\n2019-09-16    852.44                -183.35           0.02           1.04       183.34\n2019-09-17    669.96                -181.63           0.02           0.85       181.61\n2019-09-18    489.51                -179.78           0.02           0.67       179.77\n2019-09-19    311.74                -177.28           0.02           0.49       177.27\n2019-09-20    136.61                -174.82           0.02           0.31       174.80\n2019-09-21      0.00                -136.47           0.01           0.14       136.46\n2019-09-22      0.00                   0.00           0.00           0.00        -0.00\n2019-09-23      0.00                   0.00           0.00           0.00        -0.00\n2019-09-24      0.00                   0.00           0.00           0.00        -0.00\n```\n\n### Calculation of NPV With One-Factor Trinomial Tree Model\nThe following example shows how to calculate the storage NPV using a \ntrinomial tree model. This assumes that the commodity spot price follows\na one-factor mean-reverting process and the result includes the extrinsic\noption value of the storage.\n\n```python\nfrom cmdty_storage import trinomial_value\n\n# Trinomial Tree parameters\nmean_reversion = 14.5\nspot_volatility = create_piecewise_flat_series([1.35, 1.13, 1.24, 1.24],\n                           [val_date, date(2019, 9, 12), date(2019, 9, 18), storage_end], freq='D')\ntime_step = 1.0/365.0\n\ntrinomial_value = trinomial_value(cmdty_storage, val_date, inventory, forward_curve,\n                spot_volatility, mean_reversion, time_step,\n                 settlement_rule=twentieth_of_next_month,\n                interest_rates=interest_rate_curve, num_inventory_grid_points=100)\n\nprint(\"Storage Trinomial Tree Model NPV\")\nprint(\"{:,.2f}\".format(trinomial_value) )\n```\n\nWhich prints the following:\n```python\nStorage Trinomial Tree NPV\n42,844.28\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cmdty/storage", "keywords": "commodities trading curves oil gas power quantitative finance", "license": "", "maintainer": "", "maintainer_email": "", "name": "cmdty-storage", "package_url": "https://pypi.org/project/cmdty-storage/", "platform": "", "project_url": "https://pypi.org/project/cmdty-storage/", "project_urls": {"Homepage": "https://github.com/cmdty/storage"}, "release_url": "https://pypi.org/project/cmdty-storage/0.1.0a4/", "requires_dist": ["pythonnet (>=2.4.0)", "pandas (>=0.24.2)"], "requires_python": "", "summary": "Valuation and optimisation of commodity storage.", "version": "0.1.0a4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>Overview</h2>\n<p>A collection of models for the valuation and optimisation of commodity storage, either virtual or physical. The models can be used for any commodity, although are most suitable for natural gas storage valuation and optimisation.</p>\n<p>Calculations take into account many of the complex features of physical storage including:</p>\n<ul>\n<li>Inventory dependent injection and withdrawal rates, otherwise known as ratchets. For physical storage it is often the case that maximum withdrawal rates will increase, and injection rates will decrease as the storage inventory increases. For natural gas, this due to the increased pressure within the storage cavern.</li>\n<li>Time dependent injection and withdrawal rates, including the ability to add outages when no injection or withdrawal is allowed.</li>\n<li>Forced injection/withdrawal, as can be enforced by regulatory or physical constraints.</li>\n<li>Commodity consumed on injection/withdrawal, for example where natural gas is consumed by the motors that power injection into storage.</li>\n<li>Time dependent minimum and maximum inventory, necessary if different notional volumes of a storage facility are leased for different consecutive years.</li>\n<li>Optional time and inventory dependent loss of commodity in storage. For example this assumption is necessary for electricity storage which isn't 100% efficient.</li>\n<li>Ability to constrain the storage to be empty at the end of it's life, or specify a value of commodity inventory left in storage.</li>\n</ul>\n<h2>Models</h2>\n<h3>Currently Implemented</h3>\n<p>Currently the following models are implemented in this repository:</p>\n<ul>\n<li>Intrinsic valuation, i.e. optimal value assuming the commodity price remains static.</li>\n<li>One-factor trinomial tree, with seasonal spot volatility.</li>\n</ul>\n<p>Both approaches solve the optimsation problem using backward induction across a discrete inventory grid.</p>\n<h3>Planned Implementations</h3>\n<p>Implemenations using the following techniques are planned in the near future:</p>\n<ul>\n<li>Least-Squares Monte Carlo with a multi-factor price process.</li>\n<li>Rolling Intrinsic.</li>\n</ul>\n<h2>Examples</h2>\n<h3>Creating the Storage Object</h3>\n<p>The first step is to create an instance of the class CmdtyStorage which\nrepresents the storage facility. Many of the parameters of the CmdtyStorage\ninitializer in the example below are optional and can also be of type\npandas.Series in order to be time dependent. Better documentation on this\nis to follow.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">datetime</span> <span class=\"kn\">import</span> <span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">timedelta</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">from</span> <span class=\"nn\">cmdty_storage</span> <span class=\"kn\">import</span> <span class=\"n\">CmdtyStorage</span><span class=\"p\">,</span> <span class=\"n\">InjectWithdrawByInventoryAndPeriod</span><span class=\"p\">,</span> <span class=\"n\">InjectWithdrawByInventory</span><span class=\"p\">,</span> <span class=\"n\">intrinsic_value</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">create_piecewise_flat_series</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">dt_index</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"p\">):</span>\n    <span class=\"n\">period_index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">PeriodIndex</span><span class=\"p\">([</span><span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Period</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"n\">freq</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">dt</span> <span class=\"ow\">in</span> <span class=\"n\">dt_index</span><span class=\"p\">])</span>\n    <span class=\"k\">return</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">period_index</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">resample</span><span class=\"p\">(</span><span class=\"n\">freq</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fillna</span><span class=\"p\">(</span><span class=\"s1\">'pad'</span><span class=\"p\">)</span>\n\n<span class=\"n\">constraints</span> <span class=\"o\">=</span>   <span class=\"p\">[</span>\n                    <span class=\"n\">InjectWithdrawByInventoryAndPeriod</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">),</span> \n                                <span class=\"p\">[</span>\n                                    <span class=\"n\">InjectWithdrawByInventory</span><span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">150.0</span><span class=\"p\">,</span> <span class=\"mf\">255.2</span><span class=\"p\">),</span>\n                                    <span class=\"n\">InjectWithdrawByInventory</span><span class=\"p\">(</span><span class=\"mf\">2000.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">200.0</span><span class=\"p\">,</span> <span class=\"mf\">175.0</span><span class=\"p\">),</span>\n                                <span class=\"p\">]),</span>\n                    <span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> \n                             <span class=\"p\">[</span>\n                                 <span class=\"p\">(</span><span class=\"mf\">0.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">170.5</span><span class=\"p\">,</span> <span class=\"mf\">235.8</span><span class=\"p\">),</span>\n                                 <span class=\"p\">(</span><span class=\"mf\">700.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">180.2</span><span class=\"p\">,</span> <span class=\"mf\">200.77</span><span class=\"p\">),</span>\n                                 <span class=\"p\">(</span><span class=\"mf\">1800.0</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">190.5</span><span class=\"p\">,</span> <span class=\"mf\">174.45</span><span class=\"p\">),</span>\n                            <span class=\"p\">])</span>\n                <span class=\"p\">]</span>\n\n<span class=\"n\">storage_start</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">28</span><span class=\"p\">)</span>\n<span class=\"n\">storage_end</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">25</span><span class=\"p\">)</span>\n<span class=\"n\">constant_injection_cost</span> <span class=\"o\">=</span> <span class=\"mf\">0.015</span>\n<span class=\"n\">constant_pcnt_consumed_inject</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span>\n<span class=\"n\">constant_withdrawal_cost</span> <span class=\"o\">=</span> <span class=\"mf\">0.02</span>\n<span class=\"n\">constant_pcnt_consumed_withdraw</span> <span class=\"o\">=</span> <span class=\"mf\">0.000088</span>\n<span class=\"n\">constant_pcnt_inventory_loss</span> <span class=\"o\">=</span> <span class=\"mf\">0.001</span><span class=\"p\">;</span>\n<span class=\"n\">constant_pcnt_inventory_cost</span> <span class=\"o\">=</span> <span class=\"mf\">0.002</span><span class=\"p\">;</span>\n\n<span class=\"n\">cmdty_storage</span> <span class=\"o\">=</span> <span class=\"n\">CmdtyStorage</span><span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"n\">storage_start</span><span class=\"p\">,</span> <span class=\"n\">storage_end</span><span class=\"p\">,</span> <span class=\"n\">constant_injection_cost</span><span class=\"p\">,</span> <span class=\"n\">constant_withdrawal_cost</span><span class=\"p\">,</span> <span class=\"n\">constraints</span><span class=\"p\">,</span> \n                        <span class=\"n\">cmdty_consumed_inject</span><span class=\"o\">=</span><span class=\"n\">constant_pcnt_consumed_inject</span><span class=\"p\">,</span> <span class=\"n\">cmdty_consumed_withdraw</span><span class=\"o\">=</span><span class=\"n\">constant_pcnt_consumed_withdraw</span><span class=\"p\">,</span>\n                        <span class=\"n\">inventory_loss</span><span class=\"o\">=</span><span class=\"n\">constant_pcnt_inventory_loss</span><span class=\"p\">,</span> <span class=\"n\">inventory_cost</span><span class=\"o\">=</span><span class=\"n\">constant_pcnt_inventory_cost</span><span class=\"p\">)</span>\n</pre>\n<h3>Calculation of Intrinsic NPV</h3>\n<p>The following example shows how to calculate the intrinsic NPV, the\nvalue assuming that the commodity forward curve is static.</p>\n<pre><span class=\"n\">inventory</span> <span class=\"o\">=</span> <span class=\"mf\">650.0</span>\n<span class=\"n\">val_date</span> <span class=\"o\">=</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"n\">forward_curve</span> <span class=\"o\">=</span> <span class=\"n\">create_piecewise_flat_series</span><span class=\"p\">([</span><span class=\"mf\">58.89</span><span class=\"p\">,</span> <span class=\"mf\">61.41</span><span class=\"p\">,</span> <span class=\"mf\">59.89</span><span class=\"p\">,</span> <span class=\"mf\">59.89</span><span class=\"p\">],</span> \n                          <span class=\"p\">[</span><span class=\"n\">val_date</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">storage_end</span><span class=\"p\">],</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span>\n\n<span class=\"n\">flat_interest_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.03</span>\n<span class=\"n\">interest_rate_curve</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">Series</span><span class=\"p\">(</span><span class=\"n\">index</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">period_range</span><span class=\"p\">(</span><span class=\"n\">val_date</span><span class=\"p\">,</span> <span class=\"n\">storage_end</span> <span class=\"o\">+</span> <span class=\"n\">timedelta</span><span class=\"p\">(</span><span class=\"n\">days</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">),</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">))</span>\n<span class=\"n\">interest_rate_curve</span><span class=\"p\">[:]</span> <span class=\"o\">=</span> <span class=\"n\">flat_interest_rate</span>\n\n<span class=\"n\">twentieth_of_next_month</span> <span class=\"o\">=</span> <span class=\"k\">lambda</span> <span class=\"n\">period</span><span class=\"p\">:</span> <span class=\"n\">period</span><span class=\"o\">.</span><span class=\"n\">asfreq</span><span class=\"p\">(</span><span class=\"s1\">'M'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">asfreq</span><span class=\"p\">(</span><span class=\"s1\">'D'</span><span class=\"p\">,</span> <span class=\"s1\">'end'</span><span class=\"p\">)</span> <span class=\"o\">+</span> <span class=\"mi\">20</span>\n<span class=\"n\">intrinsic_results</span> <span class=\"o\">=</span> <span class=\"n\">intrinsic_value</span><span class=\"p\">(</span><span class=\"n\">cmdty_storage</span><span class=\"p\">,</span> <span class=\"n\">val_date</span><span class=\"p\">,</span> <span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">forward_curve</span><span class=\"p\">,</span> \n                <span class=\"n\">settlement_rule</span><span class=\"o\">=</span><span class=\"n\">twentieth_of_next_month</span><span class=\"p\">,</span> <span class=\"n\">interest_rates</span><span class=\"o\">=</span><span class=\"n\">interest_rate_curve</span><span class=\"p\">,</span> \n                                    <span class=\"n\">num_inventory_grid_points</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Storage NPV\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{:,.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">intrinsic_results</span><span class=\"o\">.</span><span class=\"n\">npv</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">intrinsic_results</span><span class=\"o\">.</span><span class=\"n\">profile</span><span class=\"o\">.</span><span class=\"n\">applymap</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{0:.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">))</span>\n</pre>\n<p>Prints the following:</p>\n<pre><code>Storage NPV\n40,419.45\n\n           inventory inject_withdraw_volume cmdty_consumed inventory_loss net_position\n2019-09-02    483.10                -166.25           0.01           0.65       166.24\n2019-09-03    320.54                -162.08           0.01           0.48       162.06\n2019-09-04    320.22                   0.00           0.00           0.32        -0.00\n2019-09-05    562.26                 242.36           0.02           0.32      -242.38\n2019-09-06    794.35                 232.65           0.02           0.56      -232.68\n2019-09-07   1016.90                 223.35           0.02           0.79      -223.37\n2019-09-08   1230.31                 214.42           0.02           1.02      -214.44\n2019-09-09   1434.94                 205.86           0.02           1.23      -205.89\n2019-09-10   1616.69                 183.18           0.02           1.43      -183.20\n2019-09-11   1793.91                 178.84           0.02           1.62      -178.85\n2019-09-12   1601.67                -190.44           0.02           1.79       190.43\n2019-09-13   1411.43                -188.64           0.02           1.60       188.63\n2019-09-14   1223.16                -186.86           0.02           1.41       186.85\n2019-09-15   1036.83                -185.10           0.02           1.22       185.08\n2019-09-16    852.44                -183.35           0.02           1.04       183.34\n2019-09-17    669.96                -181.63           0.02           0.85       181.61\n2019-09-18    489.51                -179.78           0.02           0.67       179.77\n2019-09-19    311.74                -177.28           0.02           0.49       177.27\n2019-09-20    136.61                -174.82           0.02           0.31       174.80\n2019-09-21      0.00                -136.47           0.01           0.14       136.46\n2019-09-22      0.00                   0.00           0.00           0.00        -0.00\n2019-09-23      0.00                   0.00           0.00           0.00        -0.00\n2019-09-24      0.00                   0.00           0.00           0.00        -0.00\n</code></pre>\n<h3>Calculation of NPV With One-Factor Trinomial Tree Model</h3>\n<p>The following example shows how to calculate the storage NPV using a\ntrinomial tree model. This assumes that the commodity spot price follows\na one-factor mean-reverting process and the result includes the extrinsic\noption value of the storage.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cmdty_storage</span> <span class=\"kn\">import</span> <span class=\"n\">trinomial_value</span>\n\n<span class=\"c1\"># Trinomial Tree parameters</span>\n<span class=\"n\">mean_reversion</span> <span class=\"o\">=</span> <span class=\"mf\">14.5</span>\n<span class=\"n\">spot_volatility</span> <span class=\"o\">=</span> <span class=\"n\">create_piecewise_flat_series</span><span class=\"p\">([</span><span class=\"mf\">1.35</span><span class=\"p\">,</span> <span class=\"mf\">1.13</span><span class=\"p\">,</span> <span class=\"mf\">1.24</span><span class=\"p\">,</span> <span class=\"mf\">1.24</span><span class=\"p\">],</span>\n                           <span class=\"p\">[</span><span class=\"n\">val_date</span><span class=\"p\">,</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">),</span> <span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2019</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">18</span><span class=\"p\">),</span> <span class=\"n\">storage_end</span><span class=\"p\">],</span> <span class=\"n\">freq</span><span class=\"o\">=</span><span class=\"s1\">'D'</span><span class=\"p\">)</span>\n<span class=\"n\">time_step</span> <span class=\"o\">=</span> <span class=\"mf\">1.0</span><span class=\"o\">/</span><span class=\"mf\">365.0</span>\n\n<span class=\"n\">trinomial_value</span> <span class=\"o\">=</span> <span class=\"n\">trinomial_value</span><span class=\"p\">(</span><span class=\"n\">cmdty_storage</span><span class=\"p\">,</span> <span class=\"n\">val_date</span><span class=\"p\">,</span> <span class=\"n\">inventory</span><span class=\"p\">,</span> <span class=\"n\">forward_curve</span><span class=\"p\">,</span>\n                <span class=\"n\">spot_volatility</span><span class=\"p\">,</span> <span class=\"n\">mean_reversion</span><span class=\"p\">,</span> <span class=\"n\">time_step</span><span class=\"p\">,</span>\n                 <span class=\"n\">settlement_rule</span><span class=\"o\">=</span><span class=\"n\">twentieth_of_next_month</span><span class=\"p\">,</span>\n                <span class=\"n\">interest_rates</span><span class=\"o\">=</span><span class=\"n\">interest_rate_curve</span><span class=\"p\">,</span> <span class=\"n\">num_inventory_grid_points</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Storage Trinomial Tree Model NPV\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{:,.2f}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">trinomial_value</span><span class=\"p\">)</span> <span class=\"p\">)</span>\n</pre>\n<p>Which prints the following:</p>\n<pre><span class=\"n\">Storage</span> <span class=\"n\">Trinomial</span> <span class=\"n\">Tree</span> <span class=\"n\">NPV</span>\n<span class=\"mi\">42</span><span class=\"p\">,</span><span class=\"mf\">844.28</span>\n</pre>\n\n          </div>"}, "last_serial": 6519093, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "e9a7193ab7633c8177eba34cd657e082", "sha256": "a202a2a96bbf7e184e9e5f5962ebd5a59f74d3dce30d37a3ed13e68bba6ee0cc"}, "downloads": -1, "filename": "cmdty_storage-0.1.0a1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9a7193ab7633c8177eba34cd657e082", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 787958, "upload_time": "2020-01-23T19:01:32", "upload_time_iso_8601": "2020-01-23T19:01:32.035107Z", "url": "https://files.pythonhosted.org/packages/a7/2c/b094b0b4d88c114985d683e2d87794825747eef1d2371d518c46f5f9fb81/cmdty_storage-0.1.0a1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e3411be24a5a989dedc9b08ce96cd886", "sha256": "4260c774706180623d552ccf181df14eb633b66c6043e81c235a3b4db9358a75"}, "downloads": -1, "filename": "cmdty-storage-0.1.0a1.tar.gz", "has_sig": false, "md5_digest": "e3411be24a5a989dedc9b08ce96cd886", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9754, "upload_time": "2020-01-23T19:01:34", "upload_time_iso_8601": "2020-01-23T19:01:34.643619Z", "url": "https://files.pythonhosted.org/packages/ec/25/7c54b191ce06002c3081fbb013b75af41847191d207ad07a63b2b044b2af/cmdty-storage-0.1.0a1.tar.gz", "yanked": false}], "0.1.0a2": [{"comment_text": "", "digests": {"md5": "e92f6e2bec323634157b142ebac3a050", "sha256": "9b805094384918d6d05174c34ffd0efd15f460645f18535be44da6bc49ae2a49"}, "downloads": -1, "filename": "cmdty_storage-0.1.0a2-py3-none-any.whl", "has_sig": false, "md5_digest": "e92f6e2bec323634157b142ebac3a050", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 771670, "upload_time": "2020-01-25T15:29:23", "upload_time_iso_8601": "2020-01-25T15:29:23.201825Z", "url": "https://files.pythonhosted.org/packages/2e/08/c2c05800fea6aa42fa179c9f8c0a59cb3e4322b0373c8c05713b6a569c3b/cmdty_storage-0.1.0a2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "60254de7678b1daf6adb985d493fbb39", "sha256": "af8aba8e33678f917ff9308e3dd1706a786ea06f9cd8c6cc1372c3f470a4adba"}, "downloads": -1, "filename": "cmdty-storage-0.1.0a2.tar.gz", "has_sig": false, "md5_digest": "60254de7678b1daf6adb985d493fbb39", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10161, "upload_time": "2020-01-25T15:29:25", "upload_time_iso_8601": "2020-01-25T15:29:25.269810Z", "url": "https://files.pythonhosted.org/packages/59/4a/c55719a8655f16666cb0b003613ef4464163d0451646bb358c4bcfb5e3fa/cmdty-storage-0.1.0a2.tar.gz", "yanked": false}], "0.1.0a3": [{"comment_text": "", "digests": {"md5": "feae89578c541768f7267c4bd1984bb6", "sha256": "0f6e89d9d483658f6ab10b7ddf28b2fb054c5327900a822271879269d2062186"}, "downloads": -1, "filename": "cmdty_storage-0.1.0a3-py3-none-any.whl", "has_sig": false, "md5_digest": "feae89578c541768f7267c4bd1984bb6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 771687, "upload_time": "2020-01-25T16:05:52", "upload_time_iso_8601": "2020-01-25T16:05:52.814779Z", "url": "https://files.pythonhosted.org/packages/23/c9/d8eb1b0deecd603a4e2f6fd1c1e6d900bbe27baa9477c8643873aac8f0eb/cmdty_storage-0.1.0a3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c5ee2fd59963e10de3ecdbe8855131c", "sha256": "6ea6e6b1cd444dc26845b249ae913d67e7d955e952ec8c43b4ba335722cace10"}, "downloads": -1, "filename": "cmdty-storage-0.1.0a3.tar.gz", "has_sig": false, "md5_digest": "6c5ee2fd59963e10de3ecdbe8855131c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10168, "upload_time": "2020-01-25T16:05:54", "upload_time_iso_8601": "2020-01-25T16:05:54.865217Z", "url": "https://files.pythonhosted.org/packages/f8/1d/72f0b1bf57f3963f300ad1ea0aa605d9957ed03894581f540ec5cd66d017/cmdty-storage-0.1.0a3.tar.gz", "yanked": false}], "0.1.0a4": [{"comment_text": "", "digests": {"md5": "912434dfa844c82008f7d6f251b1bb04", "sha256": "eb0271564c9d6e62fa4b1d25643533a70ed29f40864d89e2035dcadd78c2d147"}, "downloads": -1, "filename": "cmdty_storage-0.1.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "912434dfa844c82008f7d6f251b1bb04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 772083, "upload_time": "2020-01-25T16:15:33", "upload_time_iso_8601": "2020-01-25T16:15:33.795406Z", "url": "https://files.pythonhosted.org/packages/32/9e/dad0b92ab904a7446ef29b4862e86f47daaeca350c06e94a308ff2483fd5/cmdty_storage-0.1.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76ac1bd7d649316a9ea24c6987eb1d8c", "sha256": "6f508ed54748dd804b3d48bbec46baa4d96376c0ab0c112cc66daba5e81d1f89"}, "downloads": -1, "filename": "cmdty-storage-0.1.0a4.tar.gz", "has_sig": false, "md5_digest": "76ac1bd7d649316a9ea24c6987eb1d8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10608, "upload_time": "2020-01-25T16:15:35", "upload_time_iso_8601": "2020-01-25T16:15:35.816732Z", "url": "https://files.pythonhosted.org/packages/ab/52/8838a76886e45f8622a2352d82c9680c3ab64fb1b797449f7cf50e45fefa/cmdty-storage-0.1.0a4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "912434dfa844c82008f7d6f251b1bb04", "sha256": "eb0271564c9d6e62fa4b1d25643533a70ed29f40864d89e2035dcadd78c2d147"}, "downloads": -1, "filename": "cmdty_storage-0.1.0a4-py3-none-any.whl", "has_sig": false, "md5_digest": "912434dfa844c82008f7d6f251b1bb04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 772083, "upload_time": "2020-01-25T16:15:33", "upload_time_iso_8601": "2020-01-25T16:15:33.795406Z", "url": "https://files.pythonhosted.org/packages/32/9e/dad0b92ab904a7446ef29b4862e86f47daaeca350c06e94a308ff2483fd5/cmdty_storage-0.1.0a4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "76ac1bd7d649316a9ea24c6987eb1d8c", "sha256": "6f508ed54748dd804b3d48bbec46baa4d96376c0ab0c112cc66daba5e81d1f89"}, "downloads": -1, "filename": "cmdty-storage-0.1.0a4.tar.gz", "has_sig": false, "md5_digest": "76ac1bd7d649316a9ea24c6987eb1d8c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10608, "upload_time": "2020-01-25T16:15:35", "upload_time_iso_8601": "2020-01-25T16:15:35.816732Z", "url": "https://files.pythonhosted.org/packages/ab/52/8838a76886e45f8622a2352d82c9680c3ab64fb1b797449f7cf50e45fefa/cmdty-storage-0.1.0a4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:18:34 2020"}