{"info": {"author": "Eric Busboom", "author_email": "eric@sandiegodata.org", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.4", "Topic :: Software Development :: Debuggers", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Address Parser\n==============\n\nYet another python address parser for US postal addresses\n\nBasic usage:\n\n.. code-block:: python\n\n    from address_parser import Parser\n\n    parser = Parser()\n    adr = parser.parse(line)\n\nThe ``adr`` object is a nested object with address parts as properties.\n\n.. code-block:: python\n\n    return TopBunch(\n            number=Bunch(\n                type='P',\n                number=int(self.number) if self.number else -1,\n                tnumber=str(self.number),\n                end_number=self.multinumber,\n                fraction=self.fraction,\n                suite=self.suite,\n                is_block=self.is_block\n            ),\n\n            road=Bunch(\n                type='P',\n                name=self.street_name,\n                direction=self.street_direction if self.street_direction else '',\n                suffix=self.street_type if self.street_type else ''\n            ),\n\n            locality=Bunch(\n                type='P',\n                city=self.city,\n                state=self.state,\n                zip=self.zip\n\n            ),\n\n            hash=self.hash,\n\n            text=str(self)\n        )\n\n\nThen, you can access properties on the object. The top level properties are:\n\n- number: The house number\n    - number.number. The number as an integer, or -1 if there is no house number\n    - number.tnumber: The number as text\n    - number.end_number: The final number in a number rage\n    - number.fraction: The fractional part of the house number\n    - number.suite: A suite or unit number.\n- road: The street\n    - road.name: The bare street name\n    - road.direction. A cardinal direction, N, S, E, W, NE, NW, etc.\n    - road.suffix. The road type, sich as St, Ave, Pl.\n- locality: City, state, zip\n    - locality.city\n    - locality.state\n    - locality.zip\n- text: Holds the whole address as text.\n\nYou can also access everything as dicts. From the top level, ``adr.dict`` will return all parsed components as a dict, and each of the top level bunches can also be acess as dicts, such as ``adr.road.dict``", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CivicKnowledge/address_parser", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "address-parser", "package_url": "https://pypi.org/project/address-parser/", "platform": "", "project_url": "https://pypi.org/project/address-parser/", "project_urls": {"Homepage": "https://github.com/CivicKnowledge/address_parser"}, "release_url": "https://pypi.org/project/address-parser/1.0.0/", "requires_dist": null, "requires_python": "", "summary": "Address parser", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Yet another python address parser for US postal addresses</p>\n<p>Basic usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">address_parser</span> <span class=\"kn\">import</span> <span class=\"n\">Parser</span>\n\n<span class=\"n\">parser</span> <span class=\"o\">=</span> <span class=\"n\">Parser</span><span class=\"p\">()</span>\n<span class=\"n\">adr</span> <span class=\"o\">=</span> <span class=\"n\">parser</span><span class=\"o\">.</span><span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"n\">line</span><span class=\"p\">)</span>\n</pre>\n<p>The <tt>adr</tt> object is a nested object with address parts as properties.</p>\n<pre><span class=\"k\">return</span> <span class=\"n\">TopBunch</span><span class=\"p\">(</span>\n        <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"n\">Bunch</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'P'</span><span class=\"p\">,</span>\n            <span class=\"n\">number</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">)</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span> <span class=\"k\">else</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n            <span class=\"n\">tnumber</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"p\">),</span>\n            <span class=\"n\">end_number</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">multinumber</span><span class=\"p\">,</span>\n            <span class=\"n\">fraction</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fraction</span><span class=\"p\">,</span>\n            <span class=\"n\">suite</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">suite</span><span class=\"p\">,</span>\n            <span class=\"n\">is_block</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_block</span>\n        <span class=\"p\">),</span>\n\n        <span class=\"n\">road</span><span class=\"o\">=</span><span class=\"n\">Bunch</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'P'</span><span class=\"p\">,</span>\n            <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">street_name</span><span class=\"p\">,</span>\n            <span class=\"n\">direction</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">street_direction</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">street_direction</span> <span class=\"k\">else</span> <span class=\"s1\">''</span><span class=\"p\">,</span>\n            <span class=\"n\">suffix</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">street_type</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">street_type</span> <span class=\"k\">else</span> <span class=\"s1\">''</span>\n        <span class=\"p\">),</span>\n\n        <span class=\"n\">locality</span><span class=\"o\">=</span><span class=\"n\">Bunch</span><span class=\"p\">(</span>\n            <span class=\"nb\">type</span><span class=\"o\">=</span><span class=\"s1\">'P'</span><span class=\"p\">,</span>\n            <span class=\"n\">city</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">city</span><span class=\"p\">,</span>\n            <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">state</span><span class=\"p\">,</span>\n            <span class=\"nb\">zip</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">zip</span>\n\n        <span class=\"p\">),</span>\n\n        <span class=\"nb\">hash</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">hash</span><span class=\"p\">,</span>\n\n        <span class=\"n\">text</span><span class=\"o\">=</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>Then, you can access properties on the object. The top level properties are:</p>\n<ul>\n<li><dl>\n<dt>number: The house number</dt>\n<dd><ul>\n<li>number.number. The number as an integer, or -1 if there is no house number</li>\n<li>number.tnumber: The number as text</li>\n<li>number.end_number: The final number in a number rage</li>\n<li>number.fraction: The fractional part of the house number</li>\n<li>number.suite: A suite or unit number.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>road: The street</dt>\n<dd><ul>\n<li>road.name: The bare street name</li>\n<li>road.direction. A cardinal direction, N, S, E, W, NE, NW, etc.</li>\n<li>road.suffix. The road type, sich as St, Ave, Pl.</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt>locality: City, state, zip</dt>\n<dd><ul>\n<li>locality.city</li>\n<li>locality.state</li>\n<li>locality.zip</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>text: Holds the whole address as text.</li>\n</ul>\n<p>You can also access everything as dicts. From the top level, <tt>adr.dict</tt> will return all parsed components as a dict, and each of the top level bunches can also be acess as dicts, such as <tt>adr.road.dict</tt></p>\n\n          </div>"}, "last_serial": 5416241, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "491c6e617e26ec3bbfc800baef0dddce", "sha256": "e7e97b9c3b09a3b5466ed012afec206f052318cc5668e53fc45299147e0f15d5"}, "downloads": -1, "filename": "address_parser-0.0.1.tar.gz", "has_sig": false, "md5_digest": "491c6e617e26ec3bbfc800baef0dddce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9997, "upload_time": "2014-08-13T18:10:03", "upload_time_iso_8601": "2014-08-13T18:10:03.613748Z", "url": "https://files.pythonhosted.org/packages/a9/06/d4f50c6039df725ad95b38f6bbc984d8bd63276aeb3155c00f4a480bbe4d/address_parser-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "6f21ee4d7b202ac4b36293151d7b8f1d", "sha256": "a76074c280950c4d2b91008bba508e32c21773cbb4d3b14f4ac03eee4d5a1826"}, "downloads": -1, "filename": "address_parser-0.0.3.tar.gz", "has_sig": false, "md5_digest": "6f21ee4d7b202ac4b36293151d7b8f1d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10181, "upload_time": "2018-03-31T23:59:57", "upload_time_iso_8601": "2018-03-31T23:59:57.660118Z", "url": "https://files.pythonhosted.org/packages/0b/f5/769bfece87ef6be2336d8da3a3672d20478496bed0327f3f22e260962695/address_parser-0.0.3.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "9c660fd9e37a19f754e3d33c2b2f5fac", "sha256": "e56bfda9b04c5f834e76802b9d4ec8b0e7a5bedf9a227a07e319563169f9bd53"}, "downloads": -1, "filename": "address_parser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9c660fd9e37a19f754e3d33c2b2f5fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69434, "upload_time": "2019-06-18T16:42:29", "upload_time_iso_8601": "2019-06-18T16:42:29.894509Z", "url": "https://files.pythonhosted.org/packages/5e/08/c202f4a36837594bbadd77c7ae6749b7666d2e74bd6612a050fd7cd4fbe0/address_parser-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "9c660fd9e37a19f754e3d33c2b2f5fac", "sha256": "e56bfda9b04c5f834e76802b9d4ec8b0e7a5bedf9a227a07e319563169f9bd53"}, "downloads": -1, "filename": "address_parser-1.0.0.tar.gz", "has_sig": false, "md5_digest": "9c660fd9e37a19f754e3d33c2b2f5fac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 69434, "upload_time": "2019-06-18T16:42:29", "upload_time_iso_8601": "2019-06-18T16:42:29.894509Z", "url": "https://files.pythonhosted.org/packages/5e/08/c202f4a36837594bbadd77c7ae6749b7666d2e74bd6612a050fd7cd4fbe0/address_parser-1.0.0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 16:23:29 2020"}