{"info": {"author": "Christophe Bury", "author_email": "zetof@zetof.net", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# lpd8\n### A Python library to interface an AKAI LPD8 pad device\n![AKAI LPD8](https://d1jtxvnvoxswj8.cloudfront.net/catalog/product/cache/421fe9f256d7dd674b5a25e9478e383f/l/p/lpd8_web_large.jpg_2a5e9928f9c871bf86f5a4d05b4453e6.jpg)\n\nThis little library is designed to help the integration of an AKAI LPD8 pad into a Python program.\nIt is easy to integrate and simple to use. Based on the rtmidi library, it uses MIDI messages to\ncommunicate with the LPD8 device and reads messages coming from it.\nIn PAD mode, it allows some pads to blink or to have an ON (light on) and OFF (light off) state.\nIt allows the use of 4 programs and has a sticky mode for knob controls, meaning that the library\nstores knob states for each program and only reacts to a knob if its value is set to its previous state\nfor a given program.\nKnob limits and behaviours are configurable, so are pads.\nIt uses a subscription mechanism for each event, allowing triggering of specific methods of objects. These methods\nmay then implement other MIDI or OSC events or pilot a visual interface.\n\n### Example of use\n```python\nfrom lpd8.lpd8 import LPD8\nfrom lpd8.programs import Programs\nfrom lpd8.pads import Pad, Pads\nfrom lpd8.knobs import Knobs\nfrom lpd8.pgm_chg import Pgm_Chg\nfrom consummer import Consummer\nfrom time import sleep\n\n# This object is created to test different callbacks from LPD8 class\nconsummer = Consummer()\n\n# Create an LPD8 object and try to start it (open MIDI in and out communication)\nlpd8 = LPD8()\nlpd8.start()\n\n# In normal times, a control knob is meant to be sticky. That means that if we change program and then knob\n# value, knob will not react when we return to original program until last stored value for this program\n# will be reached. Know will then follow changes normally\n# Note that we can define sticky mode for a single knob, an array of knobs or all knobs\nlpd8.set_not_sticky_knob(Programs.PGM_4, [Knobs.KNOB_1, Knobs.KNOB_2, Knobs.KNOB_3, Knobs.KNOB_4])\n\n# In all following settings, we will define limits / actions for PROGRAM 4\n# Define control knob 1 limits from -1 to 1 and set increments to float values\n# Define control knob 2 limits from 0 to 100 with 10 steps (limit values to 0, 10, 20, ..., 90, 100)\n# Knobs that have no definition range from 0..127 with integer increments of 1 (default MIDI behaviour)\nlpd8.set_knob_limits(Programs.PGM_4, Knobs.KNOB_1, -1, 1, is_int=False)\nlpd8.set_knob_limits(Programs.PGM_4, Knobs.KNOB_2, 0, 100, steps=10)\n\n# Sets An initial value for knob 3 to 63\nlpd8.set_knob_value(Programs.PGM_4, Knobs.KNOB_3, 63)\n\n# Set different modes for pads\n# Note that we can define modes for a single pad, an array of pads or all pads\n# Pads 1 and two will blink and will be in switch mode (every push changes state between 0 and 1)\n# Pad 3 won't blink but will be in switch mode too\n# Pad 4 will be in push mode, sending a 1 at every NOTE ON event and a 0 at every NOTE OFF event\n# Pads that have no definition are set in classical pad mode with NOTE ON / NOTE OFF events and velocity values\nlpd8.set_pad_mode(Programs.PGM_4, [Pads.PAD_1, Pads.PAD_2], Pad.SWITCH_MODE + Pad.BLINK_MODE)\nlpd8.set_pad_mode(Programs.PGM_4, Pads.PAD_3, Pad.SWITCH_MODE)\nlpd8.set_pad_mode(Programs.PGM_4, Pads.PAD_4, Pad.PUSH_MODE)\n\n# For a pad of type SWITCH, sets the initial state of pad\n# Note that we can define modes for a single pad, an array of pads or all pads\nlpd8.set_pad_switch_state(Programs.PGM_4, [Pads.PAD_1, Pads.PAD_3], Pad.ON)\n\n# Subscribe to different events and map them to a method in test object\n# Note that we can subscribe events for a single object, an array of objects or all objects of a group\nlpd8.subscribe(consummer, consummer.ctrl_value, Programs.PGM_4, LPD8.CTRL, Knobs.ALL_KNOBS)\nlpd8.subscribe(consummer, consummer.note_on_value, Programs.PGM_4, LPD8.NOTE_ON, Pads.ALL_PADS)\nlpd8.subscribe(consummer, consummer.note_off_value, Programs.PGM_4, LPD8.NOTE_OFF, Pads.ALL_PADS)\nlpd8.subscribe(consummer, consummer.pgm_change, Programs.PGM_4, LPD8.PGM_CHG, Pgm_Chg.PGM_CHG_4)\n\n# We loop as long as test class allows it\nwhile consummer.is_running():\n\n    # Every loop, we update pads status (blink, ON or OFF)\n    # This method returns True if LPD8 pad is still running, False otherwise\n    if lpd8.pad_update():\n        sleep(.5)\n    else:\n\n        # If LPD8 pad is not running anymore, we leave the loop\n        consummer.stop()\n\n# We tidy up things and kill LPD8 process\nlpd8.stop()\n```\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zetof/LPD8", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "lpd8", "package_url": "https://pypi.org/project/lpd8/", "platform": "", "project_url": "https://pypi.org/project/lpd8/", "project_urls": {"Homepage": "https://github.com/zetof/LPD8"}, "release_url": "https://pypi.org/project/lpd8/1.0.1/", "requires_dist": ["python-rtmidi"], "requires_python": ">=3.6", "summary": "A Python library to drive an AKAI LPD8 pad controller", "version": "1.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>lpd8</h1>\n<h3>A Python library to interface an AKAI LPD8 pad device</h3>\n<p><img alt=\"AKAI LPD8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/13202d07b11cd837abfb0fed4c80597ae1826db9/68747470733a2f2f64316a7478766e766f7873776a382e636c6f756466726f6e742e6e65742f636174616c6f672f70726f647563742f63616368652f34323166653966323536643764643637346235613235653934373865333833662f6c2f702f6c7064385f7765625f6c617267652e6a70675f32613565393932386639633837316266383666356134643035623434353365362e6a7067\"></p>\n<p>This little library is designed to help the integration of an AKAI LPD8 pad into a Python program.\nIt is easy to integrate and simple to use. Based on the rtmidi library, it uses MIDI messages to\ncommunicate with the LPD8 device and reads messages coming from it.\nIn PAD mode, it allows some pads to blink or to have an ON (light on) and OFF (light off) state.\nIt allows the use of 4 programs and has a sticky mode for knob controls, meaning that the library\nstores knob states for each program and only reacts to a knob if its value is set to its previous state\nfor a given program.\nKnob limits and behaviours are configurable, so are pads.\nIt uses a subscription mechanism for each event, allowing triggering of specific methods of objects. These methods\nmay then implement other MIDI or OSC events or pilot a visual interface.</p>\n<h3>Example of use</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lpd8.lpd8</span> <span class=\"kn\">import</span> <span class=\"n\">LPD8</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lpd8.programs</span> <span class=\"kn\">import</span> <span class=\"n\">Programs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lpd8.pads</span> <span class=\"kn\">import</span> <span class=\"n\">Pad</span><span class=\"p\">,</span> <span class=\"n\">Pads</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lpd8.knobs</span> <span class=\"kn\">import</span> <span class=\"n\">Knobs</span>\n<span class=\"kn\">from</span> <span class=\"nn\">lpd8.pgm_chg</span> <span class=\"kn\">import</span> <span class=\"n\">Pgm_Chg</span>\n<span class=\"kn\">from</span> <span class=\"nn\">consummer</span> <span class=\"kn\">import</span> <span class=\"n\">Consummer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"c1\"># This object is created to test different callbacks from LPD8 class</span>\n<span class=\"n\">consummer</span> <span class=\"o\">=</span> <span class=\"n\">Consummer</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Create an LPD8 object and try to start it (open MIDI in and out communication)</span>\n<span class=\"n\">lpd8</span> <span class=\"o\">=</span> <span class=\"n\">LPD8</span><span class=\"p\">()</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># In normal times, a control knob is meant to be sticky. That means that if we change program and then knob</span>\n<span class=\"c1\"># value, knob will not react when we return to original program until last stored value for this program</span>\n<span class=\"c1\"># will be reached. Know will then follow changes normally</span>\n<span class=\"c1\"># Note that we can define sticky mode for a single knob, an array of knobs or all knobs</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_not_sticky_knob</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_1</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_2</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_3</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_4</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># In all following settings, we will define limits / actions for PROGRAM 4</span>\n<span class=\"c1\"># Define control knob 1 limits from -1 to 1 and set increments to float values</span>\n<span class=\"c1\"># Define control knob 2 limits from 0 to 100 with 10 steps (limit values to 0, 10, 20, ..., 90, 100)</span>\n<span class=\"c1\"># Knobs that have no definition range from 0..127 with integer increments of 1 (default MIDI behaviour)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_knob_limits</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_1</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">is_int</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_knob_limits</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_2</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"n\">steps</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Sets An initial value for knob 3 to 63</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_knob_value</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">KNOB_3</span><span class=\"p\">,</span> <span class=\"mi\">63</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Set different modes for pads</span>\n<span class=\"c1\"># Note that we can define modes for a single pad, an array of pads or all pads</span>\n<span class=\"c1\"># Pads 1 and two will blink and will be in switch mode (every push changes state between 0 and 1)</span>\n<span class=\"c1\"># Pad 3 won't blink but will be in switch mode too</span>\n<span class=\"c1\"># Pad 4 will be in push mode, sending a 1 at every NOTE ON event and a 0 at every NOTE OFF event</span>\n<span class=\"c1\"># Pads that have no definition are set in classical pad mode with NOTE ON / NOTE OFF events and velocity values</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_pad_mode</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_1</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_2</span><span class=\"p\">],</span> <span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">SWITCH_MODE</span> <span class=\"o\">+</span> <span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">BLINK_MODE</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_pad_mode</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_3</span><span class=\"p\">,</span> <span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">SWITCH_MODE</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_pad_mode</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_4</span><span class=\"p\">,</span> <span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">PUSH_MODE</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For a pad of type SWITCH, sets the initial state of pad</span>\n<span class=\"c1\"># Note that we can define modes for a single pad, an array of pads or all pads</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">set_pad_switch_state</span><span class=\"p\">(</span><span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_1</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">PAD_3</span><span class=\"p\">],</span> <span class=\"n\">Pad</span><span class=\"o\">.</span><span class=\"n\">ON</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Subscribe to different events and map them to a method in test object</span>\n<span class=\"c1\"># Note that we can subscribe events for a single object, an array of objects or all objects of a group</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">consummer</span><span class=\"p\">,</span> <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">ctrl_value</span><span class=\"p\">,</span> <span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">LPD8</span><span class=\"o\">.</span><span class=\"n\">CTRL</span><span class=\"p\">,</span> <span class=\"n\">Knobs</span><span class=\"o\">.</span><span class=\"n\">ALL_KNOBS</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">consummer</span><span class=\"p\">,</span> <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">note_on_value</span><span class=\"p\">,</span> <span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">LPD8</span><span class=\"o\">.</span><span class=\"n\">NOTE_ON</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">ALL_PADS</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">consummer</span><span class=\"p\">,</span> <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">note_off_value</span><span class=\"p\">,</span> <span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">LPD8</span><span class=\"o\">.</span><span class=\"n\">NOTE_OFF</span><span class=\"p\">,</span> <span class=\"n\">Pads</span><span class=\"o\">.</span><span class=\"n\">ALL_PADS</span><span class=\"p\">)</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"n\">consummer</span><span class=\"p\">,</span> <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">pgm_change</span><span class=\"p\">,</span> <span class=\"n\">Programs</span><span class=\"o\">.</span><span class=\"n\">PGM_4</span><span class=\"p\">,</span> <span class=\"n\">LPD8</span><span class=\"o\">.</span><span class=\"n\">PGM_CHG</span><span class=\"p\">,</span> <span class=\"n\">Pgm_Chg</span><span class=\"o\">.</span><span class=\"n\">PGM_CHG_4</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># We loop as long as test class allows it</span>\n<span class=\"k\">while</span> <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">is_running</span><span class=\"p\">():</span>\n\n    <span class=\"c1\"># Every loop, we update pads status (blink, ON or OFF)</span>\n    <span class=\"c1\"># This method returns True if LPD8 pad is still running, False otherwise</span>\n    <span class=\"k\">if</span> <span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">pad_update</span><span class=\"p\">():</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"o\">.</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n\n        <span class=\"c1\"># If LPD8 pad is not running anymore, we leave the loop</span>\n        <span class=\"n\">consummer</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># We tidy up things and kill LPD8 process</span>\n<span class=\"n\">lpd8</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7022647, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "0dd35586d5ff46773a69dd9897477378", "sha256": "6009c57d997a0fe99b135a750b7a7ec93575e8db559533da8be7bcc8973342d7"}, "downloads": -1, "filename": "lpd8-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "0dd35586d5ff46773a69dd9897477378", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10372, "upload_time": "2020-04-08T09:23:43", "upload_time_iso_8601": "2020-04-08T09:23:43.310112Z", "url": "https://files.pythonhosted.org/packages/9c/18/ba857e1823e56162924709bd938a11bba33bea1230698e0ad0051530d553/lpd8-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd1b1db20bd1e1dd750cf70a38c51584", "sha256": "90f8be48ffefbe6058960be989fcec78c35950dc7925dc199c0fadc684a34c25"}, "downloads": -1, "filename": "lpd8-1.0.0.tar.gz", "has_sig": false, "md5_digest": "bd1b1db20bd1e1dd750cf70a38c51584", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9297, "upload_time": "2020-04-08T09:23:45", "upload_time_iso_8601": "2020-04-08T09:23:45.581584Z", "url": "https://files.pythonhosted.org/packages/e9/1e/ac25aa53bcc461d93405a678a865de654936d0a4e06ce9cbf3f0d8d307b7/lpd8-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "2b3b6d3c7b39bd9dff3f67e83d8b6907", "sha256": "690052d8b727418e93c71bef0163f09fbc5309551e063632a17fadf801f49d21"}, "downloads": -1, "filename": "lpd8-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2b3b6d3c7b39bd9dff3f67e83d8b6907", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10382, "upload_time": "2020-04-15T06:43:28", "upload_time_iso_8601": "2020-04-15T06:43:28.344782Z", "url": "https://files.pythonhosted.org/packages/b2/76/734906f5b24c0ccc3c9223f9f464234c23ec67fcf69961b6293dfba18014/lpd8-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49710a1e9d820d339185bf45daee7306", "sha256": "fcbb95d1ea1c7ff90c1d61a9de6855c47d41254f2bdd481c416fa016fe5dbfc5"}, "downloads": -1, "filename": "lpd8-1.0.1.tar.gz", "has_sig": false, "md5_digest": "49710a1e9d820d339185bf45daee7306", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9313, "upload_time": "2020-04-15T06:43:29", "upload_time_iso_8601": "2020-04-15T06:43:29.742943Z", "url": "https://files.pythonhosted.org/packages/2d/1c/dc08029d058abf6b6e2ec0dac66410688a07eac5906ac30b9eb55a825578/lpd8-1.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2b3b6d3c7b39bd9dff3f67e83d8b6907", "sha256": "690052d8b727418e93c71bef0163f09fbc5309551e063632a17fadf801f49d21"}, "downloads": -1, "filename": "lpd8-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "2b3b6d3c7b39bd9dff3f67e83d8b6907", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 10382, "upload_time": "2020-04-15T06:43:28", "upload_time_iso_8601": "2020-04-15T06:43:28.344782Z", "url": "https://files.pythonhosted.org/packages/b2/76/734906f5b24c0ccc3c9223f9f464234c23ec67fcf69961b6293dfba18014/lpd8-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "49710a1e9d820d339185bf45daee7306", "sha256": "fcbb95d1ea1c7ff90c1d61a9de6855c47d41254f2bdd481c416fa016fe5dbfc5"}, "downloads": -1, "filename": "lpd8-1.0.1.tar.gz", "has_sig": false, "md5_digest": "49710a1e9d820d339185bf45daee7306", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9313, "upload_time": "2020-04-15T06:43:29", "upload_time_iso_8601": "2020-04-15T06:43:29.742943Z", "url": "https://files.pythonhosted.org/packages/2d/1c/dc08029d058abf6b6e2ec0dac66410688a07eac5906ac30b9eb55a825578/lpd8-1.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:35 2020"}