{"info": {"author": "Daniel 'Vector' Kerr", "author_email": "vector@vector.id.au", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Topic :: System :: Hardware", "Topic :: Utilities"], "description": "# Sensational\n\nSensational is a library for interfacing with various sensors.\n\nThe intention behind this library is:\n* To make connecting to and interacting with sensor chips a breeze\n* To be readily expandable while keeping things sensible and tidy\n\n\n# Example\n\n```python\n#!/usr/bin/env python3\nfrom smbus2 import SMBus\nfrom sensational.sensors import MPU9250\n\nbus = SMBus(1)\nsensor = MPU9250(bus)\nsensor.update()\nprint(sensor.data)\n```\n\n\n# Author\n\nDaniel 'Vector' Kerr <vector@vector.id.au>\n\n\n\n# Licence\n\nMIT. See the `LICENSE` file for details.\n\n\n\n# Perceptions\n\nPerception classes are models used to capture something that can be perceived. Examples include:\n\n* Acceleration\n* Depth\n* Magnetism\n* Temperature\n* ...\n\nThese classes are mostly used to provide a consistent interface that can be interrogated with\n`isinstance()` calls and such. They're not essential but they add a bit of structure.\n\n\n# Units\n\nSensational makes use of typed units to allow for better interoperability\nbetween readings from different sensors, and also to introduce some basic\nsanity checks when performing operations on perceived values.\n\nThis library uses [`pint`](https://pypi.org/project/Pint/) for unit definitions by default.\n\n```python\n#!/usr/bin/env python3\n\nfrom sensational.units import u\n\n# Define some values with units\nthree_meters = u(3, u.meter)\none_hour = u(1, u.hour)\nthirty_minutes = u(30, u.minute)\ntwenty_five_degrees = u(25.0, u.celsius)\n\n# Add 30 minutes to 1 hour\none_and_a_half_hours = one_hour + thirty_minutes\nprint(one_and_a_half_hours)\n\n# Add temperature to distance (what?!)\ntry:\n    this_will_fail = twenty_five_degrees + three_meters\nexcept:\n    print(\"You can't add temperature to distance, silly!\")\n\n# Compound units - acceleration\ngravity_earth = u(9.8, u.meter / u.second / u.second)\nprint(\"Earth's gravity is\", gravity_earth)\n\n# Compound Units - velocity\nmeters_per_hour = three_meters / one_and_a_half_hours\nprint(\"Distance over time is\", meters_per_hour)\n```\n\n## Custom Units Provider\n\nIf you would like to use a different units provider (for example,\n[`units`](https://pypi.org/project/units/),\n[`numericalunits`](https://pypi.org/project/numericalunits/),\n[`astropy.units`](https://docs.astropy.org/en/stable/units/),\n[`scimath.units`](http://docs.enthought.com/scimath/units/unit_numpy.html),\n...), feel free to create a factory for it. Create and populate a subclass of\n`sensational.units.UnitsFactory`, and then assign it as the default\nprovider by calling `u.SetFactory(instance)`.\n\n```python\n#!/usr/bin/env python3\n\nfrom sensational.units import u\nfrom sensational.units import UnitsFactory\n\nclass CustomUnitsFactory(UnitsFactory):\n    # ...\n\ncustom_units_factory = CustomUnitsFactory()\nu.SetFactory(custom_units_factory)\n```\n\n## Units with Custom Sensors\n\nIf you decide to create your own sensor (yay!), be sure to initialise all\nunit-based values with `u(quantity, unit)`. This is to cater for differences\nin implementations across unit providers, as some (*cough*pint*cough*) don't\nbehave very well when dealing with units that aren't plain multiplicative scales\nof each other (e.g., \u00baK, \u00baC and \u00baF, because they don't share the same zero point or scale).\n\nIf you don't do this, you or the user of your sensor might run into trouble.\n\nSee the source code for the existing sensors for examples of initializing values\nreturned from sensor readings if you're not sure!\n\n\n# i2c Sensors\n\nThe following I2C sensors are supported by this library.\n\n\n## mpu9250\n\nSparkFun IMU Breakout ([View Product Page](https://www.sparkfun.com/products/13762))\n\n\n```python\n#!/usr/bin/env python3\n\nfrom sensational.sensors import MPU9250\nfrom smbus2 import SMBus\nfrom time import sleep\n\ndef main():\n    bus = SMBus(1)\n    imu = MPU9250(bus)\n    while True:\n        imu.update()\n        print(\n            imu.linear_acceleration,\n            imu.angular_acceleration,\n            imu.magnetism,\n            imu.temperature,\n        )\n        sleep(0.100)\n\nif __name__ == '__main__':\n    main()\n```\n\n\n## ak8963\n\n3-Axis Magnetometer ([View Datasheet](https://download.mikroe.com/documents/datasheets/ak8963c-datasheet.pdf))\n\n\n```python\n#!/usr/bin/env python3\n\nfrom sensational.sensors import MPU9250\nfrom smbus2 import SMBus\nfrom time import sleep\n\ndef main():\n    bus = SMBus(1)\n    magnetometer = AK8963(bus)\n    while True:\n        magnetometer.update()\n        print(magnetometer.magnetism)\n        sleep(0.100)\n\nif __name__ == '__main__':\n    main()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/vectoridau/sensational", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "sensational", "package_url": "https://pypi.org/project/sensational/", "platform": "", "project_url": "https://pypi.org/project/sensational/", "project_urls": {"Homepage": "https://gitlab.com/vectoridau/sensational"}, "release_url": "https://pypi.org/project/sensational/0.0.2/", "requires_dist": null, "requires_python": ">=3", "summary": "A python library for interfacing with various sensors", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Sensational</h1>\n<p>Sensational is a library for interfacing with various sensors.</p>\n<p>The intention behind this library is:</p>\n<ul>\n<li>To make connecting to and interacting with sensor chips a breeze</li>\n<li>To be readily expandable while keeping things sensible and tidy</li>\n</ul>\n<h1>Example</h1>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smbus2</span> <span class=\"kn\">import</span> <span class=\"n\">SMBus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.sensors</span> <span class=\"kn\">import</span> <span class=\"n\">MPU9250</span>\n\n<span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SMBus</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">sensor</span> <span class=\"o\">=</span> <span class=\"n\">MPU9250</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"p\">)</span>\n<span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sensor</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">)</span>\n</pre>\n<h1>Author</h1>\n<p>Daniel 'Vector' Kerr <a href=\"mailto:vector@vector.id.au\">vector@vector.id.au</a></p>\n<h1>Licence</h1>\n<p>MIT. See the <code>LICENSE</code> file for details.</p>\n<h1>Perceptions</h1>\n<p>Perception classes are models used to capture something that can be perceived. Examples include:</p>\n<ul>\n<li>Acceleration</li>\n<li>Depth</li>\n<li>Magnetism</li>\n<li>Temperature</li>\n<li>...</li>\n</ul>\n<p>These classes are mostly used to provide a consistent interface that can be interrogated with\n<code>isinstance()</code> calls and such. They're not essential but they add a bit of structure.</p>\n<h1>Units</h1>\n<p>Sensational makes use of typed units to allow for better interoperability\nbetween readings from different sensors, and also to introduce some basic\nsanity checks when performing operations on perceived values.</p>\n<p>This library uses <a href=\"https://pypi.org/project/Pint/\" rel=\"nofollow\"><code>pint</code></a> for unit definitions by default.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.units</span> <span class=\"kn\">import</span> <span class=\"n\">u</span>\n\n<span class=\"c1\"># Define some values with units</span>\n<span class=\"n\">three_meters</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">meter</span><span class=\"p\">)</span>\n<span class=\"n\">one_hour</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">hour</span><span class=\"p\">)</span>\n<span class=\"n\">thirty_minutes</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">minute</span><span class=\"p\">)</span>\n<span class=\"n\">twenty_five_degrees</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"mf\">25.0</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">celsius</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add 30 minutes to 1 hour</span>\n<span class=\"n\">one_and_a_half_hours</span> <span class=\"o\">=</span> <span class=\"n\">one_hour</span> <span class=\"o\">+</span> <span class=\"n\">thirty_minutes</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">one_and_a_half_hours</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Add temperature to distance (what?!)</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">this_will_fail</span> <span class=\"o\">=</span> <span class=\"n\">twenty_five_degrees</span> <span class=\"o\">+</span> <span class=\"n\">three_meters</span>\n<span class=\"k\">except</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"You can't add temperature to distance, silly!\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compound units - acceleration</span>\n<span class=\"n\">gravity_earth</span> <span class=\"o\">=</span> <span class=\"n\">u</span><span class=\"p\">(</span><span class=\"mf\">9.8</span><span class=\"p\">,</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">meter</span> <span class=\"o\">/</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">second</span> <span class=\"o\">/</span> <span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Earth's gravity is\"</span><span class=\"p\">,</span> <span class=\"n\">gravity_earth</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Compound Units - velocity</span>\n<span class=\"n\">meters_per_hour</span> <span class=\"o\">=</span> <span class=\"n\">three_meters</span> <span class=\"o\">/</span> <span class=\"n\">one_and_a_half_hours</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Distance over time is\"</span><span class=\"p\">,</span> <span class=\"n\">meters_per_hour</span><span class=\"p\">)</span>\n</pre>\n<h2>Custom Units Provider</h2>\n<p>If you would like to use a different units provider (for example,\n<a href=\"https://pypi.org/project/units/\" rel=\"nofollow\"><code>units</code></a>,\n<a href=\"https://pypi.org/project/numericalunits/\" rel=\"nofollow\"><code>numericalunits</code></a>,\n<a href=\"https://docs.astropy.org/en/stable/units/\" rel=\"nofollow\"><code>astropy.units</code></a>,\n<a href=\"http://docs.enthought.com/scimath/units/unit_numpy.html\" rel=\"nofollow\"><code>scimath.units</code></a>,\n...), feel free to create a factory for it. Create and populate a subclass of\n<code>sensational.units.UnitsFactory</code>, and then assign it as the default\nprovider by calling <code>u.SetFactory(instance)</code>.</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.units</span> <span class=\"kn\">import</span> <span class=\"n\">u</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.units</span> <span class=\"kn\">import</span> <span class=\"n\">UnitsFactory</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomUnitsFactory</span><span class=\"p\">(</span><span class=\"n\">UnitsFactory</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n\n<span class=\"n\">custom_units_factory</span> <span class=\"o\">=</span> <span class=\"n\">CustomUnitsFactory</span><span class=\"p\">()</span>\n<span class=\"n\">u</span><span class=\"o\">.</span><span class=\"n\">SetFactory</span><span class=\"p\">(</span><span class=\"n\">custom_units_factory</span><span class=\"p\">)</span>\n</pre>\n<h2>Units with Custom Sensors</h2>\n<p>If you decide to create your own sensor (yay!), be sure to initialise all\nunit-based values with <code>u(quantity, unit)</code>. This is to cater for differences\nin implementations across unit providers, as some (<em>cough</em>pint<em>cough</em>) don't\nbehave very well when dealing with units that aren't plain multiplicative scales\nof each other (e.g., \u00baK, \u00baC and \u00baF, because they don't share the same zero point or scale).</p>\n<p>If you don't do this, you or the user of your sensor might run into trouble.</p>\n<p>See the source code for the existing sensors for examples of initializing values\nreturned from sensor readings if you're not sure!</p>\n<h1>i2c Sensors</h1>\n<p>The following I2C sensors are supported by this library.</p>\n<h2>mpu9250</h2>\n<p>SparkFun IMU Breakout (<a href=\"https://www.sparkfun.com/products/13762\" rel=\"nofollow\">View Product Page</a>)</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.sensors</span> <span class=\"kn\">import</span> <span class=\"n\">MPU9250</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smbus2</span> <span class=\"kn\">import</span> <span class=\"n\">SMBus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SMBus</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">imu</span> <span class=\"o\">=</span> <span class=\"n\">MPU9250</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">imu</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span>\n            <span class=\"n\">imu</span><span class=\"o\">.</span><span class=\"n\">linear_acceleration</span><span class=\"p\">,</span>\n            <span class=\"n\">imu</span><span class=\"o\">.</span><span class=\"n\">angular_acceleration</span><span class=\"p\">,</span>\n            <span class=\"n\">imu</span><span class=\"o\">.</span><span class=\"n\">magnetism</span><span class=\"p\">,</span>\n            <span class=\"n\">imu</span><span class=\"o\">.</span><span class=\"n\">temperature</span><span class=\"p\">,</span>\n        <span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.100</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n<h2>ak8963</h2>\n<p>3-Axis Magnetometer (<a href=\"https://download.mikroe.com/documents/datasheets/ak8963c-datasheet.pdf\" rel=\"nofollow\">View Datasheet</a>)</p>\n<pre><span class=\"ch\">#!/usr/bin/env python3</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sensational.sensors</span> <span class=\"kn\">import</span> <span class=\"n\">MPU9250</span>\n<span class=\"kn\">from</span> <span class=\"nn\">smbus2</span> <span class=\"kn\">import</span> <span class=\"n\">SMBus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">main</span><span class=\"p\">():</span>\n    <span class=\"n\">bus</span> <span class=\"o\">=</span> <span class=\"n\">SMBus</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    <span class=\"n\">magnetometer</span> <span class=\"o\">=</span> <span class=\"n\">AK8963</span><span class=\"p\">(</span><span class=\"n\">bus</span><span class=\"p\">)</span>\n    <span class=\"k\">while</span> <span class=\"kc\">True</span><span class=\"p\">:</span>\n        <span class=\"n\">magnetometer</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">()</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">magnetometer</span><span class=\"o\">.</span><span class=\"n\">magnetism</span><span class=\"p\">)</span>\n        <span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mf\">0.100</span><span class=\"p\">)</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span>\n    <span class=\"n\">main</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6189656, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "4eb3624df50699f1cddb1681a41ef0fb", "sha256": "1f6bf4d39e164cc22af3ced2b24091f44c1a03e8589941b8f37dca50a6a5fda4"}, "downloads": -1, "filename": "sensational-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4eb3624df50699f1cddb1681a41ef0fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10662, "upload_time": "2019-11-24T11:59:25", "upload_time_iso_8601": "2019-11-24T11:59:25.147827Z", "url": "https://files.pythonhosted.org/packages/c4/e1/40081b08e9b85191ca72c35a338cac4e0d9650f19b6955c07fa55caa7603/sensational-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4eb3624df50699f1cddb1681a41ef0fb", "sha256": "1f6bf4d39e164cc22af3ced2b24091f44c1a03e8589941b8f37dca50a6a5fda4"}, "downloads": -1, "filename": "sensational-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4eb3624df50699f1cddb1681a41ef0fb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 10662, "upload_time": "2019-11-24T11:59:25", "upload_time_iso_8601": "2019-11-24T11:59:25.147827Z", "url": "https://files.pythonhosted.org/packages/c4/e1/40081b08e9b85191ca72c35a338cac4e0d9650f19b6955c07fa55caa7603/sensational-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:13 2020"}