{"info": {"author": "Sam et Max", "author_email": "lesametlemax@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Information Technology", "License :: OSI Approved :: zlib/libpng License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.3"], "description": "Django-quicky\n==============\n\nA collection of tools to make setting up Django quicker.\n\nIt is NOT a microframework and is meant to be used withing an ordinary Django\nsetup as it's fully compatible with the standard usages.\n\nYou will love this tool if you ever wished you could do:\n\n```python\n@url('/user/\\d+')\n@view(render_to='user.html')\ndef user_view(request, id):\n    # ...\n    return {'users': users}\n\n\n@user_view.ajax(render_to='json')\ndef ajax_user_view(request, id, context):\n    # ...\n    return context\n```\n\nNote that this software is beta, but it's already used in production.\n\nJust `pip install django-quicky`.\n\n\nUrl decorators\n===============\n\nIf you like micro frameworks like [bottle](http://bottlepy.org/docs/dev/), you probably miss the very easy way to declare a route.\n\nNow you can do this:\n\n```python\nfrom django_quicky import routing\n\nurl, urlpatterns = routing()\n\n\n@url('/any/regex/django/accepts')\ndef an_ordinary_view(request):\n    #...\n\n\n@url('/you/can/stack/routing')\n@url('/any/regex/django/accepts')\ndef an_ordinary_view(request):\n    # ...\n```\n\nJust declare your routes in the view. And use your view file in `URL_ROOT` or any `include()` like you would do with `urls.py`.\n\n**Remember, order matters, so:**\n\n- views declared first will match first. Avoid declaring `@url(r'^$')` first (at the begining of views.py) or it will prevent others from matching.\n- when using several `@url` on the same view, the first applied (the lowest `@url` in the decorators pile) will match first.\n- always put `@url` as the LAST decorator applied (at the very top of the decorators pile).\n\nIf you are in the mood for fancy stuff, and feel like adding a url manually, just do:\n\n```python\nurlpatterns.add_url(url, view, [kwargs, name, prefix])\n```\n\nAnd for an include:\n\n```python\nurlpatterns.include(url, view, [name, prefix])\n```\n\nAnd since you often add the admin url:\n\n    urlpatterns.add_admin(url)\n\nAdding http error views is neither hard nor useful (most of the time), but for completeness:\n\n```python\n@url.http404\ndef http404(request):\n    # ...\n```\nOf course, your view needs to return the proper status code.\n\n\nView decorators\n===============\n\nRendering template and json bore you to death?\n\n\n```python\nfrom django_quicky import view\n\n@view(render_to='template.html')\ndef an_ordinary_view(request):\n    return {'stuff': stuff}\n\n\n@view(render_to='json')\ndef a_json_view(request):\n    return {'stuff': stuff}\n\n\n@view(render_to='raw')\ndef a_raw_view(request):\n    return 'hey'\n```\n\nFor the first one, the returned dictionary will be used as a context (with RequestContext) to render the template. For the second one, it will be serialised to JSON. The last one will just return the string.\n\n**/!\\ WARNING:**\n\nThe view decorator should always be the first decorator to be applied (the lowest one in the decorator pile).\n\n\nConditional rendering\n=======================\n\nYou can also declare alternatives based on a condition, for a single view:\n\n```python\nfrom django_quicky import view\n\n@view(render_to='template.html')\ndef common_views(request):\n    return {'stuff': stuff}\n\n@common_views.post()\ndef post_view(request, context):\n    # do more stuff\n    return context\n\n@common_views.ajax(render_to='json')\ndef json_view(request, context):\n    return context\n```\n\nThe first view will be rendered as-is if it receives a normal GET request. The second view will be rendered only for POST requests, but will be passed the result of the execution of the first view. The second view will be rendered only for AJAX requests, and as JSON, but will be passed the result of the execution first view.\n\nJust remember that alternative views must accept `context` as a parameter, because they will always receive the result of the main view.\n\nOh, and of course you can define your own conditions:\n\n```python\n@view(render_to='template.html')\ndef common_views(request):\n    return {'stuff': stuff}\n\n@common_views.render_if(conditon=a_function_that_returns_a_bool)\ndef conditional_view(request, context):\n    # do more stuff\n    return context\n```\n\nSuper user middleware\n======================\n\nDouble authentification? Short session timeout? Permission issue? Loooooooong password.\n\nIn, dev, just do:\n\n```python\nif DEBUG:\n\n    MIDDLEWARE_CLASSES += (\n        'django_quicky.middleware.ForceSuperUserMiddleWare',\n    )\n```\n\nYou will always be logged in as a super user. No password required. No timeout.\n\n\nServe static middleware\n========================\n\nServing static files IN DEV without worries:\n\n```python\nif DEBUG:\n\n    MIDDLEWARE_CLASSES += (\n        'django_quicky.middleware.StaticServe',\n    )\n```\n\nAnd if you do want to test your site with `DEBUG` set to False, you can just remove the condition.\n\nThe middleware accesses ```request.META['HTTP_HOST']``` on requests but uses \"django_quicky_fake_host\" as a fallback for clients that don't provide it via headers (e.g: Django's test client). If you want to specify a different fallback host, you can do so by setting ```DJANGO_QUICKY_DEFAULT_HOST``` in your settings.py file.\n\n(Idea borrowed from the excellent [django-annoying](https://bitbucket.org/offline/django-annoying/wiki/Home), but I stripped the internal test on `DEBUG` which is a pain during testing.)\n\n\nSettings context processor\n==========================\n\nBecause everyone ends up needing access to the settings in his templates one day or the other:\n\n```python\nTEMPLATE_CONTEXT_PROCESSORS = (\n    ...\n    \"django_quicky.context_processors.settings\"\n)\n```\n\nLoading settings\n=====================\n\nWhen you are not in Django, you may still want to import some django pieces, but they require a settings file.\n\nThis function make it easy to do so:\n\n```python\nfrom django_quicky import load_config\nload_config('/absolute/path/to/setting/file.py')\n```\n\nYou can also call it with a relative path:\n\n```python\nload_config('../../relative/path/to/setting/file.py')\n```\n\nBut the starting point will be the one given with os.getcwd(), which is probably not what you want. You can force a starting point, most often you'll want the current file, by passing it manually:\n\n```python\nload_config('../../relative/path/to/setting/file.py', starting_point=__file__)\n```\n\n`starting_point` can be either a file (basename will be stripped) or a directory.\n\nYou can also pass a directory path, in which case Python will try to load a settings module from this directory:\n\n```python\nload_config('/path/to/settings/directory')\n```\n\nIt will attempt to load a module named as in `os.environ['DJANGO_SETTINGS_MODULE']` or default to `settings`. You can force the name by passing the `settings_module` parameter.\n\nDEBUGGING\n==========\n\nThe first rule when debugging decorators, is to be sure you use the right syntax: `@decorator` and `@decorator()` are very different and both syntaxically valid. In django-quickly's case, all decorators should be called with `@decorator()` or `@decorator(arguments)`.\n\nAlso remember that when it comes to decorators, **order matters**. Most of the time, you don't care about the order you apply your decorators, but in this case, you should ALWAYS apply `@view` first and `@url` last. E.G:\n\n```python\n@url(r'$')\n@login_required\n@view('app/home.html')\ndef home(request):\n    # ...\n```\nIf you don't do this, some decorators will never be executed as `@view` bypasses decorators applied before it and `@url` bypasses decorators after it.\n\nAlso, the order in which you declare your fonction matters, just like patterns order matters in `urls.py`. So avoid putting global matching urls such as `@url('^$')` at the begining of `views.py`, otherwise this view will be used all the time, since the others will never have a chance to match.\n\n\nLast words\n=============\n\nThere are other utility functions, but I didn't take the time to document them here, so you'll have to dig in the code. fields.py contains some useful model fields, utils.py has some shortcut functions and models.py comes with tools to get random entries or patch a model.\n\n------------------------------\n\nBTW, it's under the [zlib license](http://www.zlib.net/zlib_license.html).\n\nIt embeds [namegen](https://github.com/amnong/namegen), a name generator under BSD license.\n\n\n", "description_content_type": "text/markdown", "docs_url": "https://pythonhosted.org/django-quicky/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/sametmax/django-quicky", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-quicky", "package_url": "https://pypi.org/project/django-quicky/", "platform": "", "project_url": "https://pypi.org/project/django-quicky/", "project_urls": {"Homepage": "https://github.com/sametmax/django-quicky"}, "release_url": "https://pypi.org/project/django-quicky/0.7.3/", "requires_dist": ["django"], "requires_python": "", "summary": "A collection of tools to make setting up Django quicker.", "version": "0.7.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Django-quicky</h1>\n<p>A collection of tools to make setting up Django quicker.</p>\n<p>It is NOT a microframework and is meant to be used withing an ordinary Django\nsetup as it's fully compatible with the standard usages.</p>\n<p>You will love this tool if you ever wished you could do:</p>\n<pre><span class=\"nd\">@url</span><span class=\"p\">(</span><span class=\"s1\">'/user/\\d+'</span><span class=\"p\">)</span>\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'user.html'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">user_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'users'</span><span class=\"p\">:</span> <span class=\"n\">users</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@user_view</span><span class=\"o\">.</span><span class=\"n\">ajax</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">ajax_user_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre>\n<p>Note that this software is beta, but it's already used in production.</p>\n<p>Just <code>pip install django-quicky</code>.</p>\n<h1>Url decorators</h1>\n<p>If you like micro frameworks like <a href=\"http://bottlepy.org/docs/dev/\" rel=\"nofollow\">bottle</a>, you probably miss the very easy way to declare a route.</p>\n<p>Now you can do this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_quicky</span> <span class=\"kn\">import</span> <span class=\"n\">routing</span>\n\n<span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">urlpatterns</span> <span class=\"o\">=</span> <span class=\"n\">routing</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@url</span><span class=\"p\">(</span><span class=\"s1\">'/any/regex/django/accepts'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">an_ordinary_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\">#...</span>\n\n\n<span class=\"nd\">@url</span><span class=\"p\">(</span><span class=\"s1\">'/you/can/stack/routing'</span><span class=\"p\">)</span>\n<span class=\"nd\">@url</span><span class=\"p\">(</span><span class=\"s1\">'/any/regex/django/accepts'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">an_ordinary_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Just declare your routes in the view. And use your view file in <code>URL_ROOT</code> or any <code>include()</code> like you would do with <code>urls.py</code>.</p>\n<p><strong>Remember, order matters, so:</strong></p>\n<ul>\n<li>views declared first will match first. Avoid declaring <code>@url(r'^$')</code> first (at the begining of views.py) or it will prevent others from matching.</li>\n<li>when using several <code>@url</code> on the same view, the first applied (the lowest <code>@url</code> in the decorators pile) will match first.</li>\n<li>always put <code>@url</code> as the LAST decorator applied (at the very top of the decorators pile).</li>\n</ul>\n<p>If you are in the mood for fancy stuff, and feel like adding a url manually, just do:</p>\n<pre><span class=\"n\">urlpatterns</span><span class=\"o\">.</span><span class=\"n\">add_url</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">kwargs</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">])</span>\n</pre>\n<p>And for an include:</p>\n<pre><span class=\"n\">urlpatterns</span><span class=\"o\">.</span><span class=\"n\">include</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">view</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"p\">])</span>\n</pre>\n<p>And since you often add the admin url:</p>\n<pre><code>urlpatterns.add_admin(url)\n</code></pre>\n<p>Adding http error views is neither hard nor useful (most of the time), but for completeness:</p>\n<pre><span class=\"nd\">@url</span><span class=\"o\">.</span><span class=\"n\">http404</span>\n<span class=\"k\">def</span> <span class=\"nf\">http404</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>Of course, your view needs to return the proper status code.</p>\n<h1>View decorators</h1>\n<p>Rendering template and json bore you to death?</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_quicky</span> <span class=\"kn\">import</span> <span class=\"n\">view</span>\n\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'template.html'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">an_ordinary_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'stuff'</span><span class=\"p\">:</span> <span class=\"n\">stuff</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">a_json_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'stuff'</span><span class=\"p\">:</span> <span class=\"n\">stuff</span><span class=\"p\">}</span>\n\n\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'raw'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">a_raw_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"s1\">'hey'</span>\n</pre>\n<p>For the first one, the returned dictionary will be used as a context (with RequestContext) to render the template. For the second one, it will be serialised to JSON. The last one will just return the string.</p>\n<p><strong>/!\\ WARNING:</strong></p>\n<p>The view decorator should always be the first decorator to be applied (the lowest one in the decorator pile).</p>\n<h1>Conditional rendering</h1>\n<p>You can also declare alternatives based on a condition, for a single view:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_quicky</span> <span class=\"kn\">import</span> <span class=\"n\">view</span>\n\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'template.html'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">common_views</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'stuff'</span><span class=\"p\">:</span> <span class=\"n\">stuff</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@common_views</span><span class=\"o\">.</span><span class=\"n\">post</span><span class=\"p\">()</span>\n<span class=\"k\">def</span> <span class=\"nf\">post_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do more stuff</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span>\n\n<span class=\"nd\">@common_views</span><span class=\"o\">.</span><span class=\"n\">ajax</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'json'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">json_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre>\n<p>The first view will be rendered as-is if it receives a normal GET request. The second view will be rendered only for POST requests, but will be passed the result of the execution of the first view. The second view will be rendered only for AJAX requests, and as JSON, but will be passed the result of the execution first view.</p>\n<p>Just remember that alternative views must accept <code>context</code> as a parameter, because they will always receive the result of the main view.</p>\n<p>Oh, and of course you can define your own conditions:</p>\n<pre><span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"n\">render_to</span><span class=\"o\">=</span><span class=\"s1\">'template.html'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">common_views</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span><span class=\"s1\">'stuff'</span><span class=\"p\">:</span> <span class=\"n\">stuff</span><span class=\"p\">}</span>\n\n<span class=\"nd\">@common_views</span><span class=\"o\">.</span><span class=\"n\">render_if</span><span class=\"p\">(</span><span class=\"n\">conditon</span><span class=\"o\">=</span><span class=\"n\">a_function_that_returns_a_bool</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">conditional_view</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"c1\"># do more stuff</span>\n    <span class=\"k\">return</span> <span class=\"n\">context</span>\n</pre>\n<h1>Super user middleware</h1>\n<p>Double authentification? Short session timeout? Permission issue? Loooooooong password.</p>\n<p>In, dev, just do:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n\n    <span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'django_quicky.middleware.ForceSuperUserMiddleWare'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>You will always be logged in as a super user. No password required. No timeout.</p>\n<h1>Serve static middleware</h1>\n<p>Serving static files IN DEV without worries:</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">DEBUG</span><span class=\"p\">:</span>\n\n    <span class=\"n\">MIDDLEWARE_CLASSES</span> <span class=\"o\">+=</span> <span class=\"p\">(</span>\n        <span class=\"s1\">'django_quicky.middleware.StaticServe'</span><span class=\"p\">,</span>\n    <span class=\"p\">)</span>\n</pre>\n<p>And if you do want to test your site with <code>DEBUG</code> set to False, you can just remove the condition.</p>\n<p>The middleware accesses <code>request.META['HTTP_HOST']</code> on requests but uses \"django_quicky_fake_host\" as a fallback for clients that don't provide it via headers (e.g: Django's test client). If you want to specify a different fallback host, you can do so by setting <code>DJANGO_QUICKY_DEFAULT_HOST</code> in your settings.py file.</p>\n<p>(Idea borrowed from the excellent <a href=\"https://bitbucket.org/offline/django-annoying/wiki/Home\" rel=\"nofollow\">django-annoying</a>, but I stripped the internal test on <code>DEBUG</code> which is a pain during testing.)</p>\n<h1>Settings context processor</h1>\n<p>Because everyone ends up needing access to the settings in his templates one day or the other:</p>\n<pre><span class=\"n\">TEMPLATE_CONTEXT_PROCESSORS</span> <span class=\"o\">=</span> <span class=\"p\">(</span>\n    <span class=\"o\">...</span>\n    <span class=\"s2\">\"django_quicky.context_processors.settings\"</span>\n<span class=\"p\">)</span>\n</pre>\n<h1>Loading settings</h1>\n<p>When you are not in Django, you may still want to import some django pieces, but they require a settings file.</p>\n<p>This function make it easy to do so:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_quicky</span> <span class=\"kn\">import</span> <span class=\"n\">load_config</span>\n<span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"s1\">'/absolute/path/to/setting/file.py'</span><span class=\"p\">)</span>\n</pre>\n<p>You can also call it with a relative path:</p>\n<pre><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"s1\">'../../relative/path/to/setting/file.py'</span><span class=\"p\">)</span>\n</pre>\n<p>But the starting point will be the one given with os.getcwd(), which is probably not what you want. You can force a starting point, most often you'll want the current file, by passing it manually:</p>\n<pre><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"s1\">'../../relative/path/to/setting/file.py'</span><span class=\"p\">,</span> <span class=\"n\">starting_point</span><span class=\"o\">=</span><span class=\"vm\">__file__</span><span class=\"p\">)</span>\n</pre>\n<p><code>starting_point</code> can be either a file (basename will be stripped) or a directory.</p>\n<p>You can also pass a directory path, in which case Python will try to load a settings module from this directory:</p>\n<pre><span class=\"n\">load_config</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/settings/directory'</span><span class=\"p\">)</span>\n</pre>\n<p>It will attempt to load a module named as in <code>os.environ['DJANGO_SETTINGS_MODULE']</code> or default to <code>settings</code>. You can force the name by passing the <code>settings_module</code> parameter.</p>\n<h1>DEBUGGING</h1>\n<p>The first rule when debugging decorators, is to be sure you use the right syntax: <code>@decorator</code> and <code>@decorator()</code> are very different and both syntaxically valid. In django-quickly's case, all decorators should be called with <code>@decorator()</code> or <code>@decorator(arguments)</code>.</p>\n<p>Also remember that when it comes to decorators, <strong>order matters</strong>. Most of the time, you don't care about the order you apply your decorators, but in this case, you should ALWAYS apply <code>@view</code> first and <code>@url</code> last. E.G:</p>\n<pre><span class=\"nd\">@url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'$'</span><span class=\"p\">)</span>\n<span class=\"nd\">@login_required</span>\n<span class=\"nd\">@view</span><span class=\"p\">(</span><span class=\"s1\">'app/home.html'</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">home</span><span class=\"p\">(</span><span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"c1\"># ...</span>\n</pre>\n<p>If you don't do this, some decorators will never be executed as <code>@view</code> bypasses decorators applied before it and <code>@url</code> bypasses decorators after it.</p>\n<p>Also, the order in which you declare your fonction matters, just like patterns order matters in <code>urls.py</code>. So avoid putting global matching urls such as <code>@url('^$')</code> at the begining of <code>views.py</code>, otherwise this view will be used all the time, since the others will never have a chance to match.</p>\n<h1>Last words</h1>\n<p>There are other utility functions, but I didn't take the time to document them here, so you'll have to dig in the code. fields.py contains some useful model fields, utils.py has some shortcut functions and models.py comes with tools to get random entries or patch a model.</p>\n<hr>\n<p>BTW, it's under the <a href=\"http://www.zlib.net/zlib_license.html\" rel=\"nofollow\">zlib license</a>.</p>\n<p>It embeds <a href=\"https://github.com/amnong/namegen\" rel=\"nofollow\">namegen</a>, a name generator under BSD license.</p>\n\n          </div>"}, "last_serial": 6051462, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c47730ef4c2a01e0813e2a086fd67da5", "sha256": "491dcb67ba5f935b97e1ee232b4634255d88253328994e0399a64f80eee7730c"}, "downloads": -1, "filename": "django-quicky-0.1.tar.gz", "has_sig": false, "md5_digest": "c47730ef4c2a01e0813e2a086fd67da5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4877, "upload_time": "2012-10-08T14:31:28", "upload_time_iso_8601": "2012-10-08T14:31:28.816521Z", "url": "https://files.pythonhosted.org/packages/6b/c8/7affd4550ad93d59f7ad65325956d10c316cb48aff6dd0fc1f5fef7e062f/django-quicky-0.1.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "bd00d3348e8355b4d018d3959aabc8e7", "sha256": "c408c0c39500cd160601616b9ede08ad6fdfa83f8c0572dc787a04a73781d065"}, "downloads": -1, "filename": "django-quicky-0.2.tar.gz", "has_sig": false, "md5_digest": "bd00d3348e8355b4d018d3959aabc8e7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5694, "upload_time": "2012-10-09T15:56:53", "upload_time_iso_8601": "2012-10-09T15:56:53.906750Z", "url": "https://files.pythonhosted.org/packages/d5/63/3447bde6f5dc82b224993187c3d0c5a9342cd5e4263c6f71bd6f4d340a92/django-quicky-0.2.tar.gz", "yanked": false}, {"comment_text": "", "digests": {"md5": "143a279075ff1e43a1453f85ba8331ff", "sha256": "d29a207bbb45ff8b6053af006c7d3ed6ebe3f593b3500486e91613f9b42cbf69"}, "downloads": -1, "filename": "django-quicky-0.3.1.tar.gz", "has_sig": false, "md5_digest": "143a279075ff1e43a1453f85ba8331ff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6429, "upload_time": "2012-10-10T21:17:03", "upload_time_iso_8601": "2012-10-10T21:17:03.764053Z", "url": "https://files.pythonhosted.org/packages/b9/f2/ebf69276e6f4cbe41202513c24ad02aa00574d4a91cf51e8eb4893d91a5a/django-quicky-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "fa449219683d9d5bf3a2e7bca7203520", "sha256": "efc64a488152fe402e21b79a35392294682fdb7efccdb98325d6e17f7180aa84"}, "downloads": -1, "filename": "django-quicky-0.3.2.tar.gz", "has_sig": false, "md5_digest": "fa449219683d9d5bf3a2e7bca7203520", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7682, "upload_time": "2012-10-15T15:50:22", "upload_time_iso_8601": "2012-10-15T15:50:22.956893Z", "url": "https://files.pythonhosted.org/packages/13/49/25261ef3acbddb84e84f27494e1c1833da17fd6aa4b3027ffc4d8861f8f4/django-quicky-0.3.2.tar.gz", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "16aae878d4104d3d368ea20fce11fad4", "sha256": "d3aa7068e00b4ddd9f202005f3319c7bf6e50339cd080aba1560e428c85e2373"}, "downloads": -1, "filename": "django-quicky-0.4.tar.gz", "has_sig": false, "md5_digest": "16aae878d4104d3d368ea20fce11fad4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24232, "upload_time": "2012-10-16T09:56:56", "upload_time_iso_8601": "2012-10-16T09:56:56.757193Z", "url": "https://files.pythonhosted.org/packages/e7/43/227d46bf24b4582e21d71ae42e7b815f738cc97154186385426778f9e805/django-quicky-0.4.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "e53f51b29c7ba1ffa8cac375b4c73789", "sha256": "06e20948b294a763527f08bad63b4115181556fa4c1837eea99419237a2159d6"}, "downloads": -1, "filename": "django-quicky-0.4.1.tar.gz", "has_sig": false, "md5_digest": "e53f51b29c7ba1ffa8cac375b4c73789", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24786, "upload_time": "2012-10-16T11:36:45", "upload_time_iso_8601": "2012-10-16T11:36:45.074456Z", "url": "https://files.pythonhosted.org/packages/34/91/81951baa473774797e1d9fb13f1ce8609d16050d2265016e784882c2de62/django-quicky-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "ac33f5dc3a5d6979bf70fe21d846fc33", "sha256": "1427805a5cb3257c5d19bc0290f91b16c1d1e9e7d6b6248638e95ff4860efaed"}, "downloads": -1, "filename": "django-quicky-0.4.2.tar.gz", "has_sig": false, "md5_digest": "ac33f5dc3a5d6979bf70fe21d846fc33", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37361, "upload_time": "2012-10-19T01:33:21", "upload_time_iso_8601": "2012-10-19T01:33:21.786662Z", "url": "https://files.pythonhosted.org/packages/81/65/cbef5a71e2f9c765e31b4bcaead533200bb78bcd83bf23af0051f98f7160/django-quicky-0.4.2.tar.gz", "yanked": false}], "0.4.3": [{"comment_text": "", "digests": {"md5": "ef65a6688ef07a17c4d8497518098729", "sha256": "3b7070419d22e300e8e3da93d4893044f9a05013b74be335cbf3df31572d1923"}, "downloads": -1, "filename": "django-quicky-0.4.3.tar.gz", "has_sig": false, "md5_digest": "ef65a6688ef07a17c4d8497518098729", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37368, "upload_time": "2012-10-19T01:55:46", "upload_time_iso_8601": "2012-10-19T01:55:46.207344Z", "url": "https://files.pythonhosted.org/packages/2e/44/47d016238bd15cfc0d3733dc204cdc2ca637f426d0968f69e105f54e8c2f/django-quicky-0.4.3.tar.gz", "yanked": false}], "0.4.4": [{"comment_text": "", "digests": {"md5": "aa4b54885634d35783916f9da526809f", "sha256": "8abb5099298323be3833c2fa85f0086a52b1fba2f065c745ab7115cf4cc62367"}, "downloads": -1, "filename": "django-quicky-0.4.4.tar.gz", "has_sig": false, "md5_digest": "aa4b54885634d35783916f9da526809f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37337, "upload_time": "2012-10-19T02:00:20", "upload_time_iso_8601": "2012-10-19T02:00:20.681503Z", "url": "https://files.pythonhosted.org/packages/a0/1b/92c8fe1f93cda3ffd3e3fa03f1036898b45beabc7f50b86131e47541410c/django-quicky-0.4.4.tar.gz", "yanked": false}], "0.4.5": [{"comment_text": "", "digests": {"md5": "e40782481124acb82d56b6071f53fab5", "sha256": "97e0cb6bce520c4c2694ef841d103ea3a11e6f3dee4c90a3b6b04b9ffe9bb6ac"}, "downloads": -1, "filename": "django-quicky-0.4.5.tar.gz", "has_sig": false, "md5_digest": "e40782481124acb82d56b6071f53fab5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25415, "upload_time": "2012-10-21T17:08:55", "upload_time_iso_8601": "2012-10-21T17:08:55.687839Z", "url": "https://files.pythonhosted.org/packages/c4/91/1afb9d089da08db66fea006b1031e3dab9f5182b47c4ea34f9b84fa853f9/django-quicky-0.4.5.tar.gz", "yanked": false}], "0.4.6": [{"comment_text": "", "digests": {"md5": "faac35af7c09c880763c603babcedab7", "sha256": "6265ed64855173ed374ad3018ebf25e72ffaf2db6b5ded1d8957e68472bc8318"}, "downloads": -1, "filename": "django-quicky-0.4.6.tar.gz", "has_sig": false, "md5_digest": "faac35af7c09c880763c603babcedab7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25378, "upload_time": "2012-11-23T12:00:04", "upload_time_iso_8601": "2012-11-23T12:00:04.089308Z", "url": "https://files.pythonhosted.org/packages/5f/69/b8aab887a82ec5ab075490a0d8e30506747ee2536bbc1d6ca50840439b05/django-quicky-0.4.6.tar.gz", "yanked": false}], "0.4.7": [{"comment_text": "", "digests": {"md5": "b78f7ee0a18c59fcd96a9a6c97090071", "sha256": "c0d860b3b3606f25073f5f69603eb4c5b99c44900dc0e12bffa9ac12d0131a7f"}, "downloads": -1, "filename": "django-quicky-0.4.7.tar.gz", "has_sig": false, "md5_digest": "b78f7ee0a18c59fcd96a9a6c97090071", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25393, "upload_time": "2012-12-05T16:14:31", "upload_time_iso_8601": "2012-12-05T16:14:31.685330Z", "url": "https://files.pythonhosted.org/packages/45/c2/e54f74e14b41796b385faf8db6f06977bdb6ea85f4f7f7516c8f48b04073/django-quicky-0.4.7.tar.gz", "yanked": false}], "0.5": [{"comment_text": "", "digests": {"md5": "45af47c52f361eebf7aba7841964d508", "sha256": "768460322d5edbc2a107f848e8e58aa5243038ed4610f99ed3d2506bc7825942"}, "downloads": -1, "filename": "django-quicky-0.5.tar.gz", "has_sig": false, "md5_digest": "45af47c52f361eebf7aba7841964d508", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26647, "upload_time": "2013-03-16T19:24:21", "upload_time_iso_8601": "2013-03-16T19:24:21.812454Z", "url": "https://files.pythonhosted.org/packages/03/a7/4e8e24d8981466331ce748a556f37de37f7acd1a963d28b42d0915d764e9/django-quicky-0.5.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "20cca8be559ac927846f5d9fd3d94e68", "sha256": "bbdbd305125f1e08adce05cd5033347481be1e4bce8f5e4305a132267a44e90e"}, "downloads": -1, "filename": "django-quicky-0.5.1.tar.gz", "has_sig": false, "md5_digest": "20cca8be559ac927846f5d9fd3d94e68", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26810, "upload_time": "2013-03-22T19:54:28", "upload_time_iso_8601": "2013-03-22T19:54:28.778904Z", "url": "https://files.pythonhosted.org/packages/ea/0b/b705050892ec2eeb43e330bb3ee157ffe422b0c3cd30ee910158f1922122/django-quicky-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "cbae19fe313480ac6820496e21ca50d9", "sha256": "47cfa651be0ba246edea0b6722083046e9892e3c89da298031e9e67fb77ac526"}, "downloads": -1, "filename": "django-quicky-0.5.2.tar.gz", "has_sig": false, "md5_digest": "cbae19fe313480ac6820496e21ca50d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 26761, "upload_time": "2013-03-22T19:59:41", "upload_time_iso_8601": "2013-03-22T19:59:41.357068Z", "url": "https://files.pythonhosted.org/packages/73/92/9bd8456ea0394f8d94e1485ae7101694bea244c015118c98faf3fbb974f2/django-quicky-0.5.2.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "828457a54a7745f07429f03afc423dc0", "sha256": "5b2c4940a7fa7a65a52a2b2330ec2851c5b2cb16e062b60761799c96409f9a5c"}, "downloads": -1, "filename": "django-quicky-0.6.tar.gz", "has_sig": false, "md5_digest": "828457a54a7745f07429f03afc423dc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27891, "upload_time": "2013-06-25T22:18:04", "upload_time_iso_8601": "2013-06-25T22:18:04.797955Z", "url": "https://files.pythonhosted.org/packages/53/42/008cdc501810003b8744e77e73127df8aa41dfe59d392f3faf6e445c71d9/django-quicky-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "8fea3f0e1fb75b6a489cbaefd4e71133", "sha256": "86a4e12ec946647025d68f42efe0c8cbb5b6e211afcf7e3ec05fc93a94056bc3"}, "downloads": -1, "filename": "django-quicky-0.6.1.tar.gz", "has_sig": false, "md5_digest": "8fea3f0e1fb75b6a489cbaefd4e71133", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27916, "upload_time": "2013-07-19T09:07:14", "upload_time_iso_8601": "2013-07-19T09:07:14.997594Z", "url": "https://files.pythonhosted.org/packages/e8/04/9903aa41c0de63e723fe77d2aa58eb8e67a2c9f5f971ac5ee87575dc2c43/django-quicky-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "031f957c58c9695ca5d6eef8f4c810e5", "sha256": "fa310023ecfade7036861ef5741fc8a55e85fb52e758c3863b14192f06f64f8d"}, "downloads": -1, "filename": "django-quicky-0.6.2.tar.gz", "has_sig": false, "md5_digest": "031f957c58c9695ca5d6eef8f4c810e5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27961, "upload_time": "2013-11-08T14:36:16", "upload_time_iso_8601": "2013-11-08T14:36:16.314105Z", "url": "https://files.pythonhosted.org/packages/1d/37/b1c20d4023eee25bedc103b202b237c94366345aff7ff154609dc9e0049b/django-quicky-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "642cf933a6256b1256927470974935d4", "sha256": "63f6d48b4c76cfb7c1df83e8ba2723f5d0d1acb51d5a65b1c4223139d6061b42"}, "downloads": -1, "filename": "django-quicky-0.6.3.tar.gz", "has_sig": false, "md5_digest": "642cf933a6256b1256927470974935d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 27993, "upload_time": "2013-11-09T15:41:34", "upload_time_iso_8601": "2013-11-09T15:41:34.971645Z", "url": "https://files.pythonhosted.org/packages/c3/ea/ba1099a95ba3a73bed9c01c68466414975095787ee743aa052ab9ac0c0a2/django-quicky-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "0d6f891df56cdef7a0601e14f8927d98", "sha256": "96b71e3c00e2c17cc6388c829d9a46dd62d2fa0ad96ef851b0d8bf6258c37426"}, "downloads": -1, "filename": "django-quicky-0.6.4.tar.gz", "has_sig": false, "md5_digest": "0d6f891df56cdef7a0601e14f8927d98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28007, "upload_time": "2013-11-09T18:09:56", "upload_time_iso_8601": "2013-11-09T18:09:56.960716Z", "url": "https://files.pythonhosted.org/packages/8e/f1/7781f204ccd70ed703a68302cac02a1349bc4035c93a64ea3dfa74db6b77/django-quicky-0.6.4.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "c88778381184618455cd31e576c78ea5", "sha256": "ce948222111e179e699f5f6991b93ee7224c70a580f13e81f41ab4758d2181d4"}, "downloads": -1, "filename": "django-quicky-0.7.tar.gz", "has_sig": false, "md5_digest": "c88778381184618455cd31e576c78ea5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29775, "upload_time": "2018-02-20T13:40:18", "upload_time_iso_8601": "2018-02-20T13:40:18.179249Z", "url": "https://files.pythonhosted.org/packages/eb/ec/f2c330c65285a9a411508a54367508f7f8e80c6db34019c52fa7a2923866/django-quicky-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "d74a35cc3bf2de0769b013dcb2691ab7", "sha256": "ad7ca3c08a7a0a573b61f4959dc84328cf3eb31210020b57601ff3c81eabfd64"}, "downloads": -1, "filename": "django-quicky-0.7.1.tar.gz", "has_sig": false, "md5_digest": "d74a35cc3bf2de0769b013dcb2691ab7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 29977, "upload_time": "2018-02-21T10:37:57", "upload_time_iso_8601": "2018-02-21T10:37:57.648024Z", "url": "https://files.pythonhosted.org/packages/7b/80/6baf0bccf8462cc9c35810fe5467dd4f84a75877f4f496d925f5ade8cf42/django-quicky-0.7.1.tar.gz", "yanked": false}], "0.7.2": [{"comment_text": "", "digests": {"md5": "5d5b33bf90d74ad8da0dba1c52055d21", "sha256": "c08c9d78fa84340fe1dbd2cbd4e9bf9854cebbe6f20b948cf42c12c2e97d70d1"}, "downloads": -1, "filename": "django-quicky-0.7.2.tar.gz", "has_sig": false, "md5_digest": "5d5b33bf90d74ad8da0dba1c52055d21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30035, "upload_time": "2018-03-22T16:45:30", "upload_time_iso_8601": "2018-03-22T16:45:30.489737Z", "url": "https://files.pythonhosted.org/packages/63/d9/e804397092c5d3f67b95bcb978be9e4160857a5cc84003496428f4d0af98/django-quicky-0.7.2.tar.gz", "yanked": false}], "0.7.3": [{"comment_text": "", "digests": {"md5": "6bc82aea01b49e89b914d40fd8c59ced", "sha256": "767dfdea5011aa7ee343aafa126a670d401d47248ce35a7e71de197c7b3f82df"}, "downloads": -1, "filename": "django_quicky-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6bc82aea01b49e89b914d40fd8c59ced", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34629, "upload_time": "2019-10-30T09:06:39", "upload_time_iso_8601": "2019-10-30T09:06:39.100863Z", "url": "https://files.pythonhosted.org/packages/fd/98/e36d59aa77bcf23df28dd8ca5e9962e07d3abfbd59e1b56762b1e5240a13/django_quicky-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "126391adadc5a0ab60ec2e594161074f", "sha256": "6cf9a9e9e36b05a5251a92363efc8a80a467c77fd5a39b2ca4160ef7bbacc05c"}, "downloads": -1, "filename": "django-quicky-0.7.3.tar.gz", "has_sig": false, "md5_digest": "126391adadc5a0ab60ec2e594161074f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30630, "upload_time": "2019-10-30T09:06:40", "upload_time_iso_8601": "2019-10-30T09:06:40.836481Z", "url": "https://files.pythonhosted.org/packages/f1/6f/8dfd02eebc6c638ba4f0b521c819cea1890af15cc13187fd5c81c778cfe9/django-quicky-0.7.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6bc82aea01b49e89b914d40fd8c59ced", "sha256": "767dfdea5011aa7ee343aafa126a670d401d47248ce35a7e71de197c7b3f82df"}, "downloads": -1, "filename": "django_quicky-0.7.3-py3-none-any.whl", "has_sig": false, "md5_digest": "6bc82aea01b49e89b914d40fd8c59ced", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34629, "upload_time": "2019-10-30T09:06:39", "upload_time_iso_8601": "2019-10-30T09:06:39.100863Z", "url": "https://files.pythonhosted.org/packages/fd/98/e36d59aa77bcf23df28dd8ca5e9962e07d3abfbd59e1b56762b1e5240a13/django_quicky-0.7.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "126391adadc5a0ab60ec2e594161074f", "sha256": "6cf9a9e9e36b05a5251a92363efc8a80a467c77fd5a39b2ca4160ef7bbacc05c"}, "downloads": -1, "filename": "django-quicky-0.7.3.tar.gz", "has_sig": false, "md5_digest": "126391adadc5a0ab60ec2e594161074f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30630, "upload_time": "2019-10-30T09:06:40", "upload_time_iso_8601": "2019-10-30T09:06:40.836481Z", "url": "https://files.pythonhosted.org/packages/f1/6f/8dfd02eebc6c638ba4f0b521c819cea1890af15cc13187fd5c81c778cfe9/django-quicky-0.7.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:27 2020"}