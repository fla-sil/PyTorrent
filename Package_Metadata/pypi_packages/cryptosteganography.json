{"info": {"author": "", "author_email": "computationalcore@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: 3 :: Only"], "description": "Cryptosteganography\n===================\n\n.. image:: https://travis-ci.org/computationalcore/cryptosteganography.svg?branch=master\n    :target: https://travis-ci.org/computationalcore/cryptosteganography\n.. image:: https://codecov.io/github/computationalcore/cryptosteganography/coverage.svg?branch=master\n    :target: https://codecov.io/gh/computationalcore/cryptosteganography\n.. image:: https://api.codeclimate.com/v1/badges/1f8d04f4badc720d0eda/maintainability\n   :target: https://codeclimate.com/github/computationalcore/cryptosteganography/maintainability\n.. image:: https://img.shields.io/pypi/v/cryptosteganography.svg\n    :target: https://pypi.python.org/pypi/cryptosteganography\n    :alt: Latest Version\n.. image:: https://img.shields.io/pypi/status/cryptosteganography.svg\n    :target: https://pypi.python.org/pypi/cryptosteganography\n    :alt: Development Status\n.. image:: https://img.shields.io/pypi/pyversions/cryptosteganography.svg\n    :target: https://pypi.python.org/pypi/cryptosteganography\n    :alt: Python Versions\n\nA python steganography module to store messages or files protected with\nAES-256 encryption inside an image.\n\nSteganography is the art of concealing information within different\ntypes of media objects such as images or audio files, in such a way that\nno one, apart from the sender and intended recipient, suspects the\nexistence of the message. By default steganography is a type of security\nthrough obscurity.\n\nAdditionally this module also enhance the security of the steganography through data encryption. The data concealed\nis encrypted using AES 256 encryption, a popular algorithm used in symmetric key cryptography.\n\nPrerequisites\n-------------\n\n`Python 3+ <https://www.python.org/downloads>`_\n\n`pip3 <https://pip.pypa.io/en/stable>`_\n\n(Most Linux systems comes with python 3 installed by default).\n\nDependencies Installation (Ubuntu)\n----------------------------------\n\n.. code:: bash\n\n    $ sudo apt-get install python3-pip\n\nDependencies Installation (MacOS)\n---------------------------------\n\nTo install Python3 I recommend use Homebrew package manager\n\nThe script will explain what changes it will make and prompt you before\nthe installation begins.\n\n.. code:: bash\n\n    $ ruby -e \"$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)\"\n\nEdit your ~/.profile to include (if it is not already there)\n\n.. code:: bash\n\n    export PATH=/usr/local/bin:/usr/local/sbin:$PATH\n\nTo install Python 3:\n\n.. code:: bash\n\n    $ brew install python3\n\nInstallation\n------------\n\nTo install the package just run\n\n.. code:: bash\n\n    $ pip3 install cryptosteganography\n\nUsage\n-----\n\nUse as a library in a python program\n''''''''''''''''''''''''''''''''''''\n\n**Store a message string inside an image**\n\n.. code:: python\n\n    from cryptosteganography import CryptoSteganography\n\n    crypto_steganography = CryptoSteganography('My secret password key')\n\n    # Save the encrypted file inside the image\n    crypto_steganography.hide('input_image_name.jpg', 'output_image_file.png', 'My secret message')\n\n    secret = crypto_steganography.retrieve('output_image_file.png')\n\n    print(secret)\n    # My secret message\n\n**Store a binary file inside an image**\n\nNote: This only works if the concealed file size is smaller than the input image\n\n.. code:: python\n\n    from cryptosteganography import CryptoSteganography\n\n    message = None\n    with open('sample.mp3', \"rb\") as f:\n        message = f.read()\n\n    crypto_steganography = CryptoSteganography('My secret password key')\n\n    # Save the encrypted file inside the image\n    crypto_steganography.hide('input_image_name.jpg', 'output_image_file.png', message)\n\n    # Retrieve the file ( the previous crypto_steganography instance could be used but I instantiate a brand new object\n    # with the same password key just to demonstrate that can it can be used to decrypt)\n    crypto_steganography = CryptoSteganography('My secret password key')\n    decrypted_bin = crypto_steganography.retrieve('output_image_file.png')\n\n    # Save the data to a new file\n    with open('decrypted_sample.mp3', 'wb') as f:\n        f.write(secret_bin)\n\nUse as a python program\n'''''''''''''''''''''''\n\n**Check help at command line prompt to learn how to use it.**\n\n.. code:: bash\n\n    $ cryptosteganography -h\n    usage: cryptosteganography [-h] {save,retrieve} ...\n\n    A python steganography script that save/retrieve a text/file (AES 256\n    encrypted) inside an image.\n\n    positional arguments:\n      {save,retrieve}  sub-command help\n        save           save help\n        retrieve       retrieve help\n\n    optional arguments:\n      -h, --help       show this help message and exit\n\n**Save sub command help**\n\n.. code:: bash\n\n    $ cryptosteganography save -h\n    usage: cryptosteganography save [-h] -i INPUT_IMAGE_FILE\n                                  (-m MESSAGE | -f MESSAGE_FILE) -o\n                                  OUTPUT_IMAGE_FILE\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i INPUT_IMAGE_FILE, --input INPUT_IMAGE_FILE\n                            Input image file.\n      -m MESSAGE, --message MESSAGE\n                            Your secret message to hide (non binary).\n      -f MESSAGE_FILE, --file MESSAGE_FILE\n                            Your secret to hide (Text or any binary file).\n      -o OUTPUT_IMAGE_FILE, --output OUTPUT_IMAGE_FILE\n                            Output image containing the secret.\n\n**Retrieve sub command help**\n\n.. code:: bash\n\n    $ cryptosteganography retrieve -h\n    usage: cryptosteganography retrieve [-h] -i INPUT_IMAGE_FILE [-o RETRIEVED_FILE]\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -i INPUT_IMAGE_FILE, --input INPUT_IMAGE_FILE\n                            Input image file.\n      -o RETRIEVED_FILE, --output RETRIEVED_FILE\n                            Output for the binary secret file (Text or any binary\n                            file).\n\n**Save message example**\n\n.. code:: bash\n\n    $ cryptosteganography save -i 4824157.png -m \"My secret message...\" -o output.png\n    Enter the key password:\n    Output image output.png saved with success\n\n**Retrieve message example**\n\n.. code:: bash\n\n    $ cryptosteganography retrieve -i output.png\n    Enter the key password: \n    My secret message...\n\n**Save file example**\n\n.. code:: bash\n\n    $ cryptosteganography save -i input_image_name.jpg -f duck_logo.pem -o output_file.png\n    Enter the key password:\n    Output image output_file.png saved with success\n\n**Retrieve file example**\n\n.. code:: bash\n\n    $ cryptosteganography retrieve -i output.png -o decrypted_file\n    Enter the key password: \n    decrypted_file saved with success\n\nLicense\n-------\n\nThis project is licensed under the MIT License - see the\n`LICENSE <https://github.com/computationalcore/cryptosteganography/blob/master/LICENSE>`_ file for details\n\n\nAuthors\n-------\n\n`Vin Busquet <https://github.com/computationalcore>`_ file for details\n\n\nLimitations\n-----------\n\n-  Only works with python 3\n-  It does not work if the conceived file is greater than original input\n   file\n- Ouput image is limited to PNG format only.\n-  I did not tested with all conceived file types. Feel free to\n   `report <https://github.com/computationalcore/cryptosteganography/issues>`_ any bug you find\n\n\nContributing\n------------\n\nFor details, check out `CONTRIBUTING.md <https://github.com/computationalcore/cryptosteganography/blob/master/CONTRIBUTING.md>`_.\n\n\nChangelog\n---------\n\nFor details, check out `CHANGELOG.md <https://github.com/computationalcore/cryptosteganography/blob/master/CHANGELOG.md>`_.\n\n\nAcknowledgments\n---------------\n\n-  `PyCryptodome <https://github.com/Legrandin/pycryptodome>`_\n-  `St\u00e9gan\u00f4 <https://github.com/cedricbonhomme/Stegano>`_", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/computationalcore/cryptosteganography", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cryptosteganography", "package_url": "https://pypi.org/project/cryptosteganography/", "platform": "", "project_url": "https://pypi.org/project/cryptosteganography/", "project_urls": {"Homepage": "https://github.com/computationalcore/cryptosteganography"}, "release_url": "https://pypi.org/project/cryptosteganography/0.8.3/", "requires_dist": null, "requires_python": ">=3.5", "summary": "A python steganography module to store messages or files protected with AES-256 encryption inside an image.", "version": "0.8.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/computationalcore/cryptosteganography\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/computationalcore/cryptosteganography.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ff5901a24da01d96a33b531261483dfb9140c6db/68747470733a2f2f7472617669732d63692e6f72672f636f6d7075746174696f6e616c636f72652f63727970746f73746567616e6f6772617068792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/computationalcore/cryptosteganography\" rel=\"nofollow\"><img alt=\"https://codecov.io/github/computationalcore/cryptosteganography/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/914147d759a112e7ff54dbe7f3d41d119b9066e0/68747470733a2f2f636f6465636f762e696f2f6769746875622f636f6d7075746174696f6e616c636f72652f63727970746f73746567616e6f6772617068792f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/computationalcore/cryptosteganography/maintainability\" rel=\"nofollow\"><img alt=\"https://api.codeclimate.com/v1/badges/1f8d04f4badc720d0eda/maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2324b831df4486580b78fca8c40bac9472b7e42/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f31663864303466346261646337323064306564612f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://pypi.python.org/pypi/cryptosteganography\" rel=\"nofollow\"><img alt=\"Latest Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/80eb153e86f425b2f4010bf3c43e5ca3a48247e8/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f63727970746f73746567616e6f6772617068792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cryptosteganography\" rel=\"nofollow\"><img alt=\"Development Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eadfdacd1b8d18e9ed0bdb436ba0a2c3ceb2583f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f63727970746f73746567616e6f6772617068792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/cryptosteganography\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d064d18b4475926a662161b2d83b01f7cbc20bd/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f63727970746f73746567616e6f6772617068792e737667\"></a>\n<p>A python steganography module to store messages or files protected with\nAES-256 encryption inside an image.</p>\n<p>Steganography is the art of concealing information within different\ntypes of media objects such as images or audio files, in such a way that\nno one, apart from the sender and intended recipient, suspects the\nexistence of the message. By default steganography is a type of security\nthrough obscurity.</p>\n<p>Additionally this module also enhance the security of the steganography through data encryption. The data concealed\nis encrypted using AES 256 encryption, a popular algorithm used in symmetric key cryptography.</p>\n<div id=\"prerequisites\">\n<h2>Prerequisites</h2>\n<p><a href=\"https://www.python.org/downloads\" rel=\"nofollow\">Python 3+</a></p>\n<p><a href=\"https://pip.pypa.io/en/stable\" rel=\"nofollow\">pip3</a></p>\n<p>(Most Linux systems comes with python 3 installed by default).</p>\n</div>\n<div id=\"dependencies-installation-ubuntu\">\n<h2>Dependencies Installation (Ubuntu)</h2>\n<pre>$ sudo apt-get install python3-pip\n</pre>\n</div>\n<div id=\"dependencies-installation-macos\">\n<h2>Dependencies Installation (MacOS)</h2>\n<p>To install Python3 I recommend use Homebrew package manager</p>\n<p>The script will explain what changes it will make and prompt you before\nthe installation begins.</p>\n<pre>$ ruby -e <span class=\"s2\">\"</span><span class=\"k\">$(</span>curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install<span class=\"k\">)</span><span class=\"s2\">\"</span>\n</pre>\n<p>Edit your ~/.profile to include (if it is not already there)</p>\n<pre><span class=\"nb\">export</span> <span class=\"nv\">PATH</span><span class=\"o\">=</span>/usr/local/bin:/usr/local/sbin:<span class=\"nv\">$PATH</span>\n</pre>\n<p>To install Python 3:</p>\n<pre>$ brew install python3\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the package just run</p>\n<pre>$ pip3 install cryptosteganography\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"use-as-a-library-in-a-python-program\">\n<h3>Use as a library in a python program</h3>\n<p><strong>Store a message string inside an image</strong></p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cryptosteganography</span> <span class=\"kn\">import</span> <span class=\"n\">CryptoSteganography</span>\n\n<span class=\"n\">crypto_steganography</span> <span class=\"o\">=</span> <span class=\"n\">CryptoSteganography</span><span class=\"p\">(</span><span class=\"s1\">'My secret password key'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save the encrypted file inside the image</span>\n<span class=\"n\">crypto_steganography</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">'input_image_name.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'output_image_file.png'</span><span class=\"p\">,</span> <span class=\"s1\">'My secret message'</span><span class=\"p\">)</span>\n\n<span class=\"n\">secret</span> <span class=\"o\">=</span> <span class=\"n\">crypto_steganography</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"s1\">'output_image_file.png'</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">secret</span><span class=\"p\">)</span>\n<span class=\"c1\"># My secret message</span>\n</pre>\n<p><strong>Store a binary file inside an image</strong></p>\n<p>Note: This only works if the concealed file size is smaller than the input image</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cryptosteganography</span> <span class=\"kn\">import</span> <span class=\"n\">CryptoSteganography</span>\n\n<span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'sample.mp3'</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">message</span> <span class=\"o\">=</span> <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n\n<span class=\"n\">crypto_steganography</span> <span class=\"o\">=</span> <span class=\"n\">CryptoSteganography</span><span class=\"p\">(</span><span class=\"s1\">'My secret password key'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save the encrypted file inside the image</span>\n<span class=\"n\">crypto_steganography</span><span class=\"o\">.</span><span class=\"n\">hide</span><span class=\"p\">(</span><span class=\"s1\">'input_image_name.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'output_image_file.png'</span><span class=\"p\">,</span> <span class=\"n\">message</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Retrieve the file ( the previous crypto_steganography instance could be used but I instantiate a brand new object</span>\n<span class=\"c1\"># with the same password key just to demonstrate that can it can be used to decrypt)</span>\n<span class=\"n\">crypto_steganography</span> <span class=\"o\">=</span> <span class=\"n\">CryptoSteganography</span><span class=\"p\">(</span><span class=\"s1\">'My secret password key'</span><span class=\"p\">)</span>\n<span class=\"n\">decrypted_bin</span> <span class=\"o\">=</span> <span class=\"n\">crypto_steganography</span><span class=\"o\">.</span><span class=\"n\">retrieve</span><span class=\"p\">(</span><span class=\"s1\">'output_image_file.png'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Save the data to a new file</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'decrypted_sample.mp3'</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">secret_bin</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"use-as-a-python-program\">\n<h3>Use as a python program</h3>\n<p><strong>Check help at command line prompt to learn how to use it.</strong></p>\n<pre>$ cryptosteganography -h\nusage: cryptosteganography <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">{</span>save,retrieve<span class=\"o\">}</span> ...\n\nA python steganography script that save/retrieve a text/file <span class=\"o\">(</span>AES <span class=\"m\">256</span>\nencrypted<span class=\"o\">)</span> inside an image.\n\npositional arguments:\n  <span class=\"o\">{</span>save,retrieve<span class=\"o\">}</span>  sub-command <span class=\"nb\">help</span>\n    save           save <span class=\"nb\">help</span>\n    retrieve       retrieve <span class=\"nb\">help</span>\n\noptional arguments:\n  -h, --help       show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n</pre>\n<p><strong>Save sub command help</strong></p>\n<pre>$ cryptosteganography save -h\nusage: cryptosteganography save <span class=\"o\">[</span>-h<span class=\"o\">]</span> -i INPUT_IMAGE_FILE\n                              <span class=\"o\">(</span>-m MESSAGE <span class=\"p\">|</span> -f MESSAGE_FILE<span class=\"o\">)</span> -o\n                              OUTPUT_IMAGE_FILE\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -i INPUT_IMAGE_FILE, --input INPUT_IMAGE_FILE\n                        Input image file.\n  -m MESSAGE, --message MESSAGE\n                        Your secret message to hide <span class=\"o\">(</span>non binary<span class=\"o\">)</span>.\n  -f MESSAGE_FILE, --file MESSAGE_FILE\n                        Your secret to hide <span class=\"o\">(</span>Text or any binary file<span class=\"o\">)</span>.\n  -o OUTPUT_IMAGE_FILE, --output OUTPUT_IMAGE_FILE\n                        Output image containing the secret.\n</pre>\n<p><strong>Retrieve sub command help</strong></p>\n<pre>$ cryptosteganography retrieve -h\nusage: cryptosteganography retrieve <span class=\"o\">[</span>-h<span class=\"o\">]</span> -i INPUT_IMAGE_FILE <span class=\"o\">[</span>-o RETRIEVED_FILE<span class=\"o\">]</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -i INPUT_IMAGE_FILE, --input INPUT_IMAGE_FILE\n                        Input image file.\n  -o RETRIEVED_FILE, --output RETRIEVED_FILE\n                        Output <span class=\"k\">for</span> the binary secret file <span class=\"o\">(</span>Text or any binary\n                        file<span class=\"o\">)</span>.\n</pre>\n<p><strong>Save message example</strong></p>\n<pre>$ cryptosteganography save -i <span class=\"m\">4824157</span>.png -m <span class=\"s2\">\"My secret message...\"</span> -o output.png\nEnter the key password:\nOutput image output.png saved with success\n</pre>\n<p><strong>Retrieve message example</strong></p>\n<pre>$ cryptosteganography retrieve -i output.png\nEnter the key password:\nMy secret message...\n</pre>\n<p><strong>Save file example</strong></p>\n<pre>$ cryptosteganography save -i input_image_name.jpg -f duck_logo.pem -o output_file.png\nEnter the key password:\nOutput image output_file.png saved with success\n</pre>\n<p><strong>Retrieve file example</strong></p>\n<pre>$ cryptosteganography retrieve -i output.png -o decrypted_file\nEnter the key password:\ndecrypted_file saved with success\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the\n<a href=\"https://github.com/computationalcore/cryptosteganography/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> file for details</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p><a href=\"https://github.com/computationalcore\" rel=\"nofollow\">Vin Busquet</a> file for details</p>\n</div>\n<div id=\"limitations\">\n<h2>Limitations</h2>\n<ul>\n<li>Only works with python 3</li>\n<li>It does not work if the conceived file is greater than original input\nfile</li>\n<li>Ouput image is limited to PNG format only.</li>\n<li>I did not tested with all conceived file types. Feel free to\n<a href=\"https://github.com/computationalcore/cryptosteganography/issues\" rel=\"nofollow\">report</a> any bug you find</li>\n</ul>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>For details, check out <a href=\"https://github.com/computationalcore/cryptosteganography/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">CONTRIBUTING.md</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2>Changelog</h2>\n<p>For details, check out <a href=\"https://github.com/computationalcore/cryptosteganography/blob/master/CHANGELOG.md\" rel=\"nofollow\">CHANGELOG.md</a>.</p>\n</div>\n<div id=\"acknowledgments\">\n<h2>Acknowledgments</h2>\n<ul>\n<li><a href=\"https://github.com/Legrandin/pycryptodome\" rel=\"nofollow\">PyCryptodome</a></li>\n<li><a href=\"https://github.com/cedricbonhomme/Stegano\" rel=\"nofollow\">St\u00e9gan\u00f4</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7135136, "releases": {"0.2.1": [{"comment_text": "", "digests": {"md5": "656ec3021575e32de8064190a05e1347", "sha256": "697d6adec9cf5e9574b0bed3718395bb130201e24d729d9d23853299cbc94138"}, "downloads": -1, "filename": "cryptosteganography-0.2.1.tar.gz", "has_sig": false, "md5_digest": "656ec3021575e32de8064190a05e1347", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6850, "upload_time": "2018-02-06T02:57:10", "upload_time_iso_8601": "2018-02-06T02:57:10.067906Z", "url": "https://files.pythonhosted.org/packages/7b/d7/eca096b8aae4573a7cc8beb3dd1146c9f84f20535fec96bd5841257a9088/cryptosteganography-0.2.1.tar.gz", "yanked": false}], "0.8.1": [{"comment_text": "", "digests": {"md5": "17f7add61ac8e8fbfd653e2c88304b90", "sha256": "7c3eed144d3d19197625b382dd243cb0107836718a6cc6e041271ee8bbd8af9b"}, "downloads": -1, "filename": "cryptosteganography-0.8.1-py3-none-any.whl", "has_sig": false, "md5_digest": "17f7add61ac8e8fbfd653e2c88304b90", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8567, "upload_time": "2020-03-14T08:53:34", "upload_time_iso_8601": "2020-03-14T08:53:34.925561Z", "url": "https://files.pythonhosted.org/packages/a6/e0/0768fccbbba1a9535c693b7e6cb3ddf1e57373b8c42a11c9d58dc756c4c8/cryptosteganography-0.8.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6c57e355c4f7b30c45093107dd32228", "sha256": "872f8161136503ac7dc5fd89c51758afe90a973aeecc5040af4b8bb3aad7355c"}, "downloads": -1, "filename": "cryptosteganography-0.8.1.tar.gz", "has_sig": false, "md5_digest": "f6c57e355c4f7b30c45093107dd32228", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9331, "upload_time": "2020-03-14T08:53:36", "upload_time_iso_8601": "2020-03-14T08:53:36.820097Z", "url": "https://files.pythonhosted.org/packages/fe/4a/3615ac5d484b64e8984147d69e68d5b62a427b4793666f9525d46bcfafd1/cryptosteganography-0.8.1.tar.gz", "yanked": false}], "0.8.2": [{"comment_text": "", "digests": {"md5": "eae805b8e2d1b69ebf605326e68aaa8b", "sha256": "1fea885add53f39d7decfb2afc4c256c906552493d0eff52bcea0dc752fb2052"}, "downloads": -1, "filename": "cryptosteganography-0.8.2-py3-none-any.whl", "has_sig": false, "md5_digest": "eae805b8e2d1b69ebf605326e68aaa8b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 8614, "upload_time": "2020-03-14T09:34:01", "upload_time_iso_8601": "2020-03-14T09:34:01.717153Z", "url": "https://files.pythonhosted.org/packages/9d/e0/328b9583a9e2ca6c3ba8a46a101dd302b7d33759c46e74946745e91e0e4d/cryptosteganography-0.8.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4959fc8825b43e5272bc8a9bfce198f5", "sha256": "6b4df027349a315e6daac2d6b9139ba720866dbd62d4386e5dfaf30624b8c51d"}, "downloads": -1, "filename": "cryptosteganography-0.8.2.tar.gz", "has_sig": false, "md5_digest": "4959fc8825b43e5272bc8a9bfce198f5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 9376, "upload_time": "2020-03-14T09:34:03", "upload_time_iso_8601": "2020-03-14T09:34:03.410739Z", "url": "https://files.pythonhosted.org/packages/a2/07/aabf1fed30a444ca40ff8a101ea16335229478fc4dd472f6c3760e09d00d/cryptosteganography-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "eee48d45e8623ea55f9c0dc37e84d245", "sha256": "97479aa34f0deb4e4e1d2e58627af4363a5ea573d92e8d936a450f4d48d38a6f"}, "downloads": -1, "filename": "cryptosteganography-0.8.3.tar.gz", "has_sig": false, "md5_digest": "eee48d45e8623ea55f9c0dc37e84d245", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11050, "upload_time": "2020-04-30T05:56:27", "upload_time_iso_8601": "2020-04-30T05:56:27.448455Z", "url": "https://files.pythonhosted.org/packages/dd/7d/f43b7e552a4a91e20cc252bcad26bcf9763e39e9107da3d8128004d07963/cryptosteganography-0.8.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eee48d45e8623ea55f9c0dc37e84d245", "sha256": "97479aa34f0deb4e4e1d2e58627af4363a5ea573d92e8d936a450f4d48d38a6f"}, "downloads": -1, "filename": "cryptosteganography-0.8.3.tar.gz", "has_sig": false, "md5_digest": "eee48d45e8623ea55f9c0dc37e84d245", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 11050, "upload_time": "2020-04-30T05:56:27", "upload_time_iso_8601": "2020-04-30T05:56:27.448455Z", "url": "https://files.pythonhosted.org/packages/dd/7d/f43b7e552a4a91e20cc252bcad26bcf9763e39e9107da3d8128004d07963/cryptosteganography-0.8.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:41:58 2020"}