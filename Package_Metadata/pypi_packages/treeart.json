{"info": {"author": "Taliesin Beynon", "author_email": "contact@taliesin.ai", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.7"], "description": "# Treeart\n\nTreeart lets you draw ASCII trees easily. These can contain nodes that span multiple lines, they will be correctly combined.\n\n## Examples\n\n```\n>>> from treeart import *\n>>> print(binary_edge(1, 2, 3))\n\u256d\u25001\u2500\u256e\n2   3\n\n>>> print(binary_edge(1, 2, binary_edge(3, 4, 5)))\n\u256d\u2500\u25001\u2500\u2500\u256e\n2   \u256d\u25003\u2500\u256e\n    4   5\n\n>>> x, y = 'x', 'y'\nfor i in range(5):\n    x, y = binary_edge(i, x, y), x\nprint(x)\n                  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n          \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u25003\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u256d\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u256e  \n     \u256d\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u256e       \u256d\u2500\u25001\u2500\u2500\u256e     \u256d\u2500\u25001\u2500\u2500\u256e   \u256d\u25000\u2500\u256e\n  \u256d\u2500\u25001\u2500\u2500\u256e   \u256d\u25000\u2500\u256e   \u256d\u25000\u2500\u256e   x   \u256d\u25000\u2500\u256e   x   x   y\n\u256d\u25000\u2500\u256e   x   x   y   x   y       x   y            \nx   y\n\n>>> print(binary_edge('aa\\nbb', 'c', 'eee\\nfff'))\n  aa\n\u256d\u2500bb\u2500\u256e\nc   eee\n    fff\n```\n\n\n\n## Customization\n\nYou can specify three kinds of edges, which use more or less space, and might work better for different applications:\n\n```\n>>> print(binary_edge(111, 222, 333, align='upper'))\n \u256d\u2500111\u2500\u256e\n222   333\n\n>>> print(binary_edge(111, 222, 333, align='center'))\n   111\n \u256d\u2500\u2500\u2534\u2500\u2500\u256e\n222   333\n\n>>> print(binary_edge(111, 222, 333, align='lower'))\n   111\n222\u2500\u2534\u2500333\n```\n\nYou can also specify a gap on either side of the abutting edges:\n\n```\n>>> print(binary_edge(111, 222, 333, align='upper', gap=True))\n \u256d\u2500 111 \u2500\u256e\n222     333\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/taliesinb/treeart/archive/v0.0.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/taliesinb/treeart", "keywords": "ascii,tree,art,binary", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "treeart", "package_url": "https://pypi.org/project/treeart/", "platform": "", "project_url": "https://pypi.org/project/treeart/", "project_urls": {"Download": "https://github.com/taliesinb/treeart/archive/v0.0.1.tar.gz", "Homepage": "https://github.com/taliesinb/treeart"}, "release_url": "https://pypi.org/project/treeart/0.0.2/", "requires_dist": null, "requires_python": "", "summary": "Draw ASCII trees easily", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Treeart</h1>\n<p>Treeart lets you draw ASCII trees easily. These can contain nodes that span multiple lines, they will be correctly combined.</p>\n<h2>Examples</h2>\n<pre><code>&gt;&gt;&gt; from treeart import *\n&gt;&gt;&gt; print(binary_edge(1, 2, 3))\n\u256d\u25001\u2500\u256e\n2   3\n\n&gt;&gt;&gt; print(binary_edge(1, 2, binary_edge(3, 4, 5)))\n\u256d\u2500\u25001\u2500\u2500\u256e\n2   \u256d\u25003\u2500\u256e\n    4   5\n\n&gt;&gt;&gt; x, y = 'x', 'y'\nfor i in range(5):\n    x, y = binary_edge(i, x, y), x\nprint(x)\n                  \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25004\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n          \u256d\u2500\u2500\u2500\u2500\u2500\u2500\u25003\u2500\u2500\u2500\u2500\u2500\u2500\u256e           \u256d\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u256e  \n     \u256d\u2500\u2500\u2500\u25002\u2500\u2500\u2500\u256e       \u256d\u2500\u25001\u2500\u2500\u256e     \u256d\u2500\u25001\u2500\u2500\u256e   \u256d\u25000\u2500\u256e\n  \u256d\u2500\u25001\u2500\u2500\u256e   \u256d\u25000\u2500\u256e   \u256d\u25000\u2500\u256e   x   \u256d\u25000\u2500\u256e   x   x   y\n\u256d\u25000\u2500\u256e   x   x   y   x   y       x   y            \nx   y\n\n&gt;&gt;&gt; print(binary_edge('aa\\nbb', 'c', 'eee\\nfff'))\n  aa\n\u256d\u2500bb\u2500\u256e\nc   eee\n    fff\n</code></pre>\n<h2>Customization</h2>\n<p>You can specify three kinds of edges, which use more or less space, and might work better for different applications:</p>\n<pre><code>&gt;&gt;&gt; print(binary_edge(111, 222, 333, align='upper'))\n \u256d\u2500111\u2500\u256e\n222   333\n\n&gt;&gt;&gt; print(binary_edge(111, 222, 333, align='center'))\n   111\n \u256d\u2500\u2500\u2534\u2500\u2500\u256e\n222   333\n\n&gt;&gt;&gt; print(binary_edge(111, 222, 333, align='lower'))\n   111\n222\u2500\u2534\u2500333\n</code></pre>\n<p>You can also specify a gap on either side of the abutting edges:</p>\n<pre><code>&gt;&gt;&gt; print(binary_edge(111, 222, 333, align='upper', gap=True))\n \u256d\u2500 111 \u2500\u256e\n222     333\n</code></pre>\n\n          </div>"}, "last_serial": 6138952, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a8cd0b6b7be5ef6bb78cdb870c9ce156", "sha256": "703b54999a75d814c12ae38f49003dd5941a1ea36528a4406693ad4a470f4d48"}, "downloads": -1, "filename": "treeart-0.0.1.tar.gz", "has_sig": false, "md5_digest": "a8cd0b6b7be5ef6bb78cdb870c9ce156", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2111, "upload_time": "2019-11-14T20:59:13", "upload_time_iso_8601": "2019-11-14T20:59:13.148487Z", "url": "https://files.pythonhosted.org/packages/29/09/4fa1b6798b3e1207bbd0faa297592029904fa3cd24f711cf8d224ed20d59/treeart-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "515419b4da242193eed3e6008f40f2f0", "sha256": "4192d640c7b2376bc56ba88cc5e8afd700700490fc184edfef7b9d54abf5854d"}, "downloads": -1, "filename": "treeart-0.0.2.tar.gz", "has_sig": false, "md5_digest": "515419b4da242193eed3e6008f40f2f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3143, "upload_time": "2019-11-14T21:11:12", "upload_time_iso_8601": "2019-11-14T21:11:12.661984Z", "url": "https://files.pythonhosted.org/packages/60/c7/5462616c6e420dda8ecb727d6ef6047d3306dc34689bc9759bd6617ab8e7/treeart-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "515419b4da242193eed3e6008f40f2f0", "sha256": "4192d640c7b2376bc56ba88cc5e8afd700700490fc184edfef7b9d54abf5854d"}, "downloads": -1, "filename": "treeart-0.0.2.tar.gz", "has_sig": false, "md5_digest": "515419b4da242193eed3e6008f40f2f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3143, "upload_time": "2019-11-14T21:11:12", "upload_time_iso_8601": "2019-11-14T21:11:12.661984Z", "url": "https://files.pythonhosted.org/packages/60/c7/5462616c6e420dda8ecb727d6ef6047d3306dc34689bc9759bd6617ab8e7/treeart-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:47:44 2020"}