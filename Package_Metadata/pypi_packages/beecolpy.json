{"info": {"author": "Samuel Carlos Pessoa Oliveira", "author_email": "samuelcpoliveira@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "BeeColPy\n============\n\nBeeColPy is a module for function optimization through artificial bee colony\nalgorithm, a method developed by Karaboga [1], a variant of classical\nparticle swarm optimization.\n\nWebsite: https://github.com/renard162/BeeColPy/\n\nInstallation\n------------\n\n**Dependencies**\n~~~~~~~~~~~~~~~~~\n\nBeeColPy requires:\n\n- Python (>= 3.0)\n- NumPy (>= 1.1.0)\n\n**BeeColPy do not to support Python 2.7.**\nBeeColPy needs Python 3.0 or newer.\n~~~~~~~~~~~~~~~~~\n\n**User installation**\n\nIf you already have a working installation of numpy,\nthe easiest way to install BeeColPy is using ``pip`` and ``git``   ::\n\n~~~~~~~~~~~~~~~~~\n    pip install beecolpy\n~~~~~~~~~~~~~~~~~\n\nUsage Instructions\n----------\n~~~~~~~~~~~~~~~~~\n\n#Load data and options:\nabc_obj = abc(function, boundaries, colony_size=40, scouts=0, iterations=50, min_max='min')\n\n#Execute algorithm: \nsolution = abc_obj.fit()\n\n#Get solution after execute fit() without execute it again:\nsolution = abc_obj.get_solution()\n\n#Get execution status:\n(executed_iterations, scout_event) = abc_obj.get_status()\n\n#Get iterations historic:\nagents = abc_obj.get_agents()\n\n\"\"\"\nParameters\n----------\nfunction : Name\n\tA name of a function to minimize/maximize.\n\tExample: if the function is:\n\t\tdef my_func(x): return x[0]**2 + x[1]**2 + 5*x[1]\n\t\tPut 'my_func' as parameter.\n\nboundaries : List of Tuples\n\tA list of tuples containing the lower and upper boundaries of each\n\tdimension of function domain.\n\tObs.: The number of boundaries determines the dimension of function.\n\tExample: [(-5,5), (-20,20)]\n\n[colony_size] : Int --optional-- (default: 40)\n\tA value that determines the number of bees in algorithm. Half of this\n\tamount determines the number of points analyzed (food sources).\n\tAccording articles, half of this number determines the amount of\n\tEmployed bees and other half is Onlooker bees.\n\n[scouts] : Float --optional-- (default: 0)\n\tDetermines the limit of tries for scout bee discard a food source and\n\treplace for a new one.\n\tIf scouts = 0 : Scout_limit = colony_size * dimension\n\tIf scouts = (0 to 1) : Scout_limit = colony_size * dimension * scouts\n\t\tObs.: scout = 0.5 is used in [3] as benchmark.\n\tIf scout = (1 to iterations) : Scout_limit = scout\n\tIf scout >= iterations: Scout event never occurs\n\tObs.: Scout_limit is rounded down in all cases.\n\n[iterations] : Int --optional-- (default: 50)\n\tThe number of iterations executed by algorithm.\n\n[min_max] : String --optional-- (default: 'min')\n\tDetermines if algorithm will minimize or maximize the function.\n\tIf min_max = 'min' : Try to localize the minimum of function.\n\tIf min_max = 'max' : Try to localize the maximum of function.\n\nMethods\n----------\nfit()\n\tExecute the algorithm with defined parameters.\n\tObs.: Returns a list with values found as minimum/maximum coordinate.\n\nget_solution()\n\tReturns the value obtained after fit() the method.\n\tObs.: If fit() is not executed, return the position of\n\t\t  best initial condition.\n\nget_status()\n\tReturns a tuple with:\n\t\t- Number of iterations executed\n\t\t- Number of scout events during iterations\n\nget_agents()\n\tReturns a list with the position of each food source during\n\teach iteration.\n\"\"\"\n~~~~~~~~~~~~~~~~~\n\nExample\n----------\n~~~~~~~~~~~~~~~~~\n\"\"\"\nTo find the minimum  of sphere function on interval (-10 to 10) with\n2 dimensions in domain using default options:\n\"\"\"\n\nfrom beecolpy import abc\n\ndef sphere(x):\n\ttotal = 0\n\tfor i in range(len(x)):\n\t\ttotal += x[i]**2\n\treturn total\n\t\nabc_obj = abc(sphere, [(-10,10), (-10,10)]) #Load data\nsolution = abc_obj.fit() #Execute the algorithm\n\n#If you want to get the obtained solution after execute the fit() method:\nsolution2 = abc_obj.get_solution()\n\n#If you want to get the number of iterations executed and number of times that\n#scout event occur:\niterations = abc_obj.get_status()[0]\nscout = abc_obj.get_status()[1]\n\n#If you want to get a list with position of all points (food sources) used in each iteration:\nfood_sources = abc_obj.get_agents()\n\n~~~~~~~~~~~~~~~~~\n\nAuthor\n--------------\n**Samuel Carlos Pessoa Oliveira** - samuelcpoliveira@gmail.com\n\nLicense\n--------------\nThis project is licensed under the MIT License - see the [LICENSE.md](LICENSE.md) file for details.\n\nBibliography\n---------------\n [1] Karaboga, D. and Basturk, B., 2007\n\t A powerful and efficient algorithm for numerical function optimization:\n\t artificial bee colony (ABC) algorithm. Journal of global optimization, 39(3), pp.459-471.\n     doi: https://doi.org/10.1007/s10898-007-9149-x\n \n [2] Liu, T., Zhang, L. and Zhang, J., 2013\n\t Study of binary artificial bee colony algorithm based on particle swarm optimization.\n\t Journal of Computational Information Systems, 9(16), pp.6459-6466.\n     link: https://api.semanticscholar.org/CorpusID:8789571\n\n [3] Anuar, S., Selamat, A. and Sallehuddin, R., 2016\n\t A modified scout bee for artificial bee colony algorithm and its performance on optimization\n\t problems. Journal of King Saud University-Computer and Information Sciences, 28(4), pp.395-406.\n     doi: https://doi.org/10.1016/j.jksuci.2016.03.001", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/renard162/BeeColPy", "keywords": "PSO,ABC,Bee,Colony,Solver,Optimize,metaheuristic", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "beecolpy", "package_url": "https://pypi.org/project/beecolpy/", "platform": "", "project_url": "https://pypi.org/project/beecolpy/", "project_urls": {"Homepage": "https://github.com/renard162/BeeColPy"}, "release_url": "https://pypi.org/project/beecolpy/1.0a0/", "requires_dist": null, "requires_python": ">=3.0", "summary": "Artificial Bee Colony solver", "version": "1.0a0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>BeeColPy</h1>\n<p>BeeColPy is a module for function optimization through artificial bee colony\nalgorithm, a method developed by Karaboga [1], a variant of classical\nparticle swarm optimization.</p>\n<p>Website: <a href=\"https://github.com/renard162/BeeColPy/\" rel=\"nofollow\">https://github.com/renard162/BeeColPy/</a></p>\n<h2>Installation</h2>\n<p><strong>Dependencies</strong></p>\n<pre><code>\nBeeColPy requires:\n\n- Python (&gt;= 3.0)\n- NumPy (&gt;= 1.1.0)\n\n**BeeColPy do not to support Python 2.7.**\nBeeColPy needs Python 3.0 or newer.\n</code></pre>\n<p><strong>User installation</strong></p>\n<p>If you already have a working installation of numpy,\nthe easiest way to install BeeColPy is using <code>pip</code> and <code>git</code>   ::</p>\n<pre><code>    pip install beecolpy\n</code></pre>\n<h2>Usage Instructions</h2>\n<pre><code>\n#Load data and options:\nabc_obj = abc(function, boundaries, colony_size=40, scouts=0, iterations=50, min_max='min')\n\n#Execute algorithm: \nsolution = abc_obj.fit()\n\n#Get solution after execute fit() without execute it again:\nsolution = abc_obj.get_solution()\n\n#Get execution status:\n(executed_iterations, scout_event) = abc_obj.get_status()\n\n#Get iterations historic:\nagents = abc_obj.get_agents()\n\n\"\"\"\nParameters\n----------\nfunction : Name\n\tA name of a function to minimize/maximize.\n\tExample: if the function is:\n\t\tdef my_func(x): return x[0]**2 + x[1]**2 + 5*x[1]\n\t\tPut 'my_func' as parameter.\n\nboundaries : List of Tuples\n\tA list of tuples containing the lower and upper boundaries of each\n\tdimension of function domain.\n\tObs.: The number of boundaries determines the dimension of function.\n\tExample: [(-5,5), (-20,20)]\n\n[colony_size] : Int --optional-- (default: 40)\n\tA value that determines the number of bees in algorithm. Half of this\n\tamount determines the number of points analyzed (food sources).\n\tAccording articles, half of this number determines the amount of\n\tEmployed bees and other half is Onlooker bees.\n\n[scouts] : Float --optional-- (default: 0)\n\tDetermines the limit of tries for scout bee discard a food source and\n\treplace for a new one.\n\tIf scouts = 0 : Scout_limit = colony_size * dimension\n\tIf scouts = (0 to 1) : Scout_limit = colony_size * dimension * scouts\n\t\tObs.: scout = 0.5 is used in [3] as benchmark.\n\tIf scout = (1 to iterations) : Scout_limit = scout\n\tIf scout &gt;= iterations: Scout event never occurs\n\tObs.: Scout_limit is rounded down in all cases.\n\n[iterations] : Int --optional-- (default: 50)\n\tThe number of iterations executed by algorithm.\n\n[min_max] : String --optional-- (default: 'min')\n\tDetermines if algorithm will minimize or maximize the function.\n\tIf min_max = 'min' : Try to localize the minimum of function.\n\tIf min_max = 'max' : Try to localize the maximum of function.\n\nMethods\n----------\nfit()\n\tExecute the algorithm with defined parameters.\n\tObs.: Returns a list with values found as minimum/maximum coordinate.\n\nget_solution()\n\tReturns the value obtained after fit() the method.\n\tObs.: If fit() is not executed, return the position of\n\t\t  best initial condition.\n\nget_status()\n\tReturns a tuple with:\n\t\t- Number of iterations executed\n\t\t- Number of scout events during iterations\n\nget_agents()\n\tReturns a list with the position of each food source during\n\teach iteration.\n\"\"\"\n</code></pre>\n<h2>Example</h2>\n<pre><code>\"\"\"\nTo find the minimum  of sphere function on interval (-10 to 10) with\n2 dimensions in domain using default options:\n\"\"\"\n\nfrom beecolpy import abc\n\ndef sphere(x):\n\ttotal = 0\n\tfor i in range(len(x)):\n\t\ttotal += x[i]**2\n\treturn total\n\t\nabc_obj = abc(sphere, [(-10,10), (-10,10)]) #Load data\nsolution = abc_obj.fit() #Execute the algorithm\n\n#If you want to get the obtained solution after execute the fit() method:\nsolution2 = abc_obj.get_solution()\n\n#If you want to get the number of iterations executed and number of times that\n#scout event occur:\niterations = abc_obj.get_status()[0]\nscout = abc_obj.get_status()[1]\n\n#If you want to get a list with position of all points (food sources) used in each iteration:\nfood_sources = abc_obj.get_agents()\n\n</code></pre>\n<h2>Author</h2>\n<p><strong>Samuel Carlos Pessoa Oliveira</strong> - <a href=\"mailto:samuelcpoliveira@gmail.com\">samuelcpoliveira@gmail.com</a></p>\n<h2>License</h2>\n<p>This project is licensed under the MIT License - see the <a href=\"LICENSE.md\" rel=\"nofollow\">LICENSE.md</a> file for details.</p>\n<h2>Bibliography</h2>\n<p>[1] Karaboga, D. and Basturk, B., 2007\nA powerful and efficient algorithm for numerical function optimization:\nartificial bee colony (ABC) algorithm. Journal of global optimization, 39(3), pp.459-471.\ndoi: <a href=\"https://doi.org/10.1007/s10898-007-9149-x\" rel=\"nofollow\">https://doi.org/10.1007/s10898-007-9149-x</a></p>\n<p>[2] Liu, T., Zhang, L. and Zhang, J., 2013\nStudy of binary artificial bee colony algorithm based on particle swarm optimization.\nJournal of Computational Information Systems, 9(16), pp.6459-6466.\nlink: <a href=\"https://api.semanticscholar.org/CorpusID:8789571\" rel=\"nofollow\">https://api.semanticscholar.org/CorpusID:8789571</a></p>\n<p>[3] Anuar, S., Selamat, A. and Sallehuddin, R., 2016\nA modified scout bee for artificial bee colony algorithm and its performance on optimization\nproblems. Journal of King Saud University-Computer and Information Sciences, 28(4), pp.395-406.\ndoi: <a href=\"https://doi.org/10.1016/j.jksuci.2016.03.001\" rel=\"nofollow\">https://doi.org/10.1016/j.jksuci.2016.03.001</a></p>\n\n          </div>"}, "last_serial": 7108159, "releases": {"1.0a0": [{"comment_text": "", "digests": {"md5": "133e3090ff30f3aa06884fca0ffffbe2", "sha256": "863f420ff35da2fc6828eeafabd426436537b5f7fd67fcdc67769463e8c87d55"}, "downloads": -1, "filename": "beecolpy-1.0a0.tar.gz", "has_sig": false, "md5_digest": "133e3090ff30f3aa06884fca0ffffbe2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6141, "upload_time": "2020-04-27T02:07:29", "upload_time_iso_8601": "2020-04-27T02:07:29.115604Z", "url": "https://files.pythonhosted.org/packages/9a/7e/4e15f025b3af4f66ad6b67b012acb4bb905a39eeb186ec81134d003abea5/beecolpy-1.0a0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "133e3090ff30f3aa06884fca0ffffbe2", "sha256": "863f420ff35da2fc6828eeafabd426436537b5f7fd67fcdc67769463e8c87d55"}, "downloads": -1, "filename": "beecolpy-1.0a0.tar.gz", "has_sig": false, "md5_digest": "133e3090ff30f3aa06884fca0ffffbe2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.0", "size": 6141, "upload_time": "2020-04-27T02:07:29", "upload_time_iso_8601": "2020-04-27T02:07:29.115604Z", "url": "https://files.pythonhosted.org/packages/9a/7e/4e15f025b3af4f66ad6b67b012acb4bb905a39eeb186ec81134d003abea5/beecolpy-1.0a0.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:37:53 2020"}