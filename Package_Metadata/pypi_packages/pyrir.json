{"info": {"author": "ludlows", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "# pyrir\nLite Package for Room Impulse Response\n\n# requirements\n\n```bash\nnumpy\nscipy\ncython\n```\n\n# install\n```bash\npip install pyrir\n```\nor\n```bash\npip install https://github.com/ludlows/pyrir/archive/master.zip\n```\n\n# example \n\nIt is supporting Omni, Dipole, Cardioid, Subcardioid and Hypercardioid Beam Patterns. \n\n## Microphone Array with 1 Speaker\n```python\nimport numpy as np \nfrom pyrir import Omni, Dipole, Cardioid, Subcardioid, Hypercardioid, Field, RIR, ReflectRoom, ReverbRoom\n\n# Acoustic Field\nfs = 48000 # sampling rate\nn_sample = 1024 # number of supports of RIR train\nfield = Field(fs, n_sample=n_sample)\n\n# Construct Room\nrt60 = 0.4 # second\nroom = ReverbRoom((5,5,3.2), rt60)\n\n# Microphon Array\nazimuth_degree = 0\nelevation_degree = 0\ndipole = Dipole((2,1.5,1.6), (azimuth_degree,elevation_degree))\nomni = Omni((2,1.5,1.6))\n\n# speaker\ndoa = 0    # degree \nradius = 1.5 # meter\nspeaker = dipole.generate_speaker(radius, doa)\n\n# setup speaker and mic array\nroom.setup_mic_speaker([dipole, omni], speaker)\n\n# RIR object tuple, whose length equals to the number of speakers\nrir_tuple = field.compute_rir(room)\nnp.save('RIR_Dipole_Omni.npy', rir_tuple[0].get_numpy())\n\n# Reverb numpy Array\nreverb_numpy_array = rir_tuple[0].apply2audio1D(clean_audio1D)\n\n# Reverb numpy Array List Supporting Multichannel Clean Audio (WAV format only for now) \nspeaker_audio_file  = 'speaker_clean_audio.wav'\nreverb_numpy_audio_list = rir_tuple[0].apply2audio_file(speaker_audio_file)\n\n# Reverb audio folder\nspeaker_audio_folder = 'speaker_audio_folder'\nrir_tuple[0].apply2audio_folder(speaker_audio_folder)\n```\n\n\n## Microphone Array with Multiple Speaker\n```python\nimport numpy as np \nfrom pyrir import Omni, Dipole, Cardioid, Subcardioid, Hypercardioid, Field, RIR, ReflectRoom, ReverbRoom\n\n# Acoustic Field\nfs = 48000 # sampling rate\nn_sample = 1024 # number of supports of RIR train\nfield = Field(fs, n_sample=n_sample)\n\n# Construct Room by Wall Reflection Coefficeints\nroom = ReflectRoom((5,5,3.2), (0.8, 0.8, 0.8, 0.8, 0.8, 0.8))\n\n# Microphon Array\nazimuth_degree = 0\nelevation_degree = 0\ndipole = Dipole((2,1.5,1.6), (azimuth_degree,elevation_degree))\nomni = Omni((2,1.5,1.6))\n\n# speaker1 and speaker2\ndoa = 0    # degree \nradius = 1.5 # meter\nspeaker1 = dipole.generate_speaker(radius, doa)\nspeaker2 = omni.generate_speaker(1, 90)\n\n# setup speaker and mic array\nroom.setup_mic_speaker([dipole, omni], [speaker1, speaker2])\n\n# RIR \nrir_spk1, rir_spk2 = field.compute_rir(room)\n\n# merge reverb voice from 2 speakers \n# (spk1.wav and spk2.wav should have same number of channels)\nmerged_channels = [\n    reverb1[:, :min(reverb1.shape[1], reverb2.shape[1])] + reverb2[:,:min(reverb1.shape[1], reverb2.shape[1])] for reverb1, reverb2 in zip(rir_spk1.apply2audio_file('spk1.wav'), rir_spk2.apply2audio_file('spk2.wav'))]\n```\n\n# Reference Code\nThe C Backend Code is from the project of Prof. Emanu\u00ebl Habets.\nhttps://github.com/ehabets/RIR-Generator", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ludlows/pyrir", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyrir", "package_url": "https://pypi.org/project/pyrir/", "platform": "", "project_url": "https://pypi.org/project/pyrir/", "project_urls": {"Homepage": "https://github.com/ludlows/pyrir"}, "release_url": "https://pypi.org/project/pyrir/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "Lite Package for Room Impulse Response", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyrir</h1>\n<p>Lite Package for Room Impulse Response</p>\n<h1>requirements</h1>\n<pre>numpy\nscipy\ncython\n</pre>\n<h1>install</h1>\n<pre>pip install pyrir\n</pre>\n<p>or</p>\n<pre>pip install https://github.com/ludlows/pyrir/archive/master.zip\n</pre>\n<h1>example</h1>\n<p>It is supporting Omni, Dipole, Cardioid, Subcardioid and Hypercardioid Beam Patterns.</p>\n<h2>Microphone Array with 1 Speaker</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span> \n<span class=\"kn\">from</span> <span class=\"nn\">pyrir</span> <span class=\"kn\">import</span> <span class=\"n\">Omni</span><span class=\"p\">,</span> <span class=\"n\">Dipole</span><span class=\"p\">,</span> <span class=\"n\">Cardioid</span><span class=\"p\">,</span> <span class=\"n\">Subcardioid</span><span class=\"p\">,</span> <span class=\"n\">Hypercardioid</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">RIR</span><span class=\"p\">,</span> <span class=\"n\">ReflectRoom</span><span class=\"p\">,</span> <span class=\"n\">ReverbRoom</span>\n\n<span class=\"c1\"># Acoustic Field</span>\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span> <span class=\"c1\"># sampling rate</span>\n<span class=\"n\">n_sample</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span> <span class=\"c1\"># number of supports of RIR train</span>\n<span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">n_sample</span><span class=\"o\">=</span><span class=\"n\">n_sample</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct Room</span>\n<span class=\"n\">rt60</span> <span class=\"o\">=</span> <span class=\"mf\">0.4</span> <span class=\"c1\"># second</span>\n<span class=\"n\">room</span> <span class=\"o\">=</span> <span class=\"n\">ReverbRoom</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mf\">3.2</span><span class=\"p\">),</span> <span class=\"n\">rt60</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Microphon Array</span>\n<span class=\"n\">azimuth_degree</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">elevation_degree</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">dipole</span> <span class=\"o\">=</span> <span class=\"n\">Dipole</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">azimuth_degree</span><span class=\"p\">,</span><span class=\"n\">elevation_degree</span><span class=\"p\">))</span>\n<span class=\"n\">omni</span> <span class=\"o\">=</span> <span class=\"n\">Omni</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.6</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># speaker</span>\n<span class=\"n\">doa</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"c1\"># degree </span>\n<span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span> <span class=\"c1\"># meter</span>\n<span class=\"n\">speaker</span> <span class=\"o\">=</span> <span class=\"n\">dipole</span><span class=\"o\">.</span><span class=\"n\">generate_speaker</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">doa</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># setup speaker and mic array</span>\n<span class=\"n\">room</span><span class=\"o\">.</span><span class=\"n\">setup_mic_speaker</span><span class=\"p\">([</span><span class=\"n\">dipole</span><span class=\"p\">,</span> <span class=\"n\">omni</span><span class=\"p\">],</span> <span class=\"n\">speaker</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># RIR object tuple, whose length equals to the number of speakers</span>\n<span class=\"n\">rir_tuple</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">compute_rir</span><span class=\"p\">(</span><span class=\"n\">room</span><span class=\"p\">)</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">(</span><span class=\"s1\">'RIR_Dipole_Omni.npy'</span><span class=\"p\">,</span> <span class=\"n\">rir_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">get_numpy</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Reverb numpy Array</span>\n<span class=\"n\">reverb_numpy_array</span> <span class=\"o\">=</span> <span class=\"n\">rir_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">apply2audio1D</span><span class=\"p\">(</span><span class=\"n\">clean_audio1D</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Reverb numpy Array List Supporting Multichannel Clean Audio (WAV format only for now) </span>\n<span class=\"n\">speaker_audio_file</span>  <span class=\"o\">=</span> <span class=\"s1\">'speaker_clean_audio.wav'</span>\n<span class=\"n\">reverb_numpy_audio_list</span> <span class=\"o\">=</span> <span class=\"n\">rir_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">apply2audio_file</span><span class=\"p\">(</span><span class=\"n\">speaker_audio_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Reverb audio folder</span>\n<span class=\"n\">speaker_audio_folder</span> <span class=\"o\">=</span> <span class=\"s1\">'speaker_audio_folder'</span>\n<span class=\"n\">rir_tuple</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">apply2audio_folder</span><span class=\"p\">(</span><span class=\"n\">speaker_audio_folder</span><span class=\"p\">)</span>\n</pre>\n<h2>Microphone Array with Multiple Speaker</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span> \n<span class=\"kn\">from</span> <span class=\"nn\">pyrir</span> <span class=\"kn\">import</span> <span class=\"n\">Omni</span><span class=\"p\">,</span> <span class=\"n\">Dipole</span><span class=\"p\">,</span> <span class=\"n\">Cardioid</span><span class=\"p\">,</span> <span class=\"n\">Subcardioid</span><span class=\"p\">,</span> <span class=\"n\">Hypercardioid</span><span class=\"p\">,</span> <span class=\"n\">Field</span><span class=\"p\">,</span> <span class=\"n\">RIR</span><span class=\"p\">,</span> <span class=\"n\">ReflectRoom</span><span class=\"p\">,</span> <span class=\"n\">ReverbRoom</span>\n\n<span class=\"c1\"># Acoustic Field</span>\n<span class=\"n\">fs</span> <span class=\"o\">=</span> <span class=\"mi\">48000</span> <span class=\"c1\"># sampling rate</span>\n<span class=\"n\">n_sample</span> <span class=\"o\">=</span> <span class=\"mi\">1024</span> <span class=\"c1\"># number of supports of RIR train</span>\n<span class=\"n\">field</span> <span class=\"o\">=</span> <span class=\"n\">Field</span><span class=\"p\">(</span><span class=\"n\">fs</span><span class=\"p\">,</span> <span class=\"n\">n_sample</span><span class=\"o\">=</span><span class=\"n\">n_sample</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Construct Room by Wall Reflection Coefficeints</span>\n<span class=\"n\">room</span> <span class=\"o\">=</span> <span class=\"n\">ReflectRoom</span><span class=\"p\">((</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mi\">5</span><span class=\"p\">,</span><span class=\"mf\">3.2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">,</span> <span class=\"mf\">0.8</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Microphon Array</span>\n<span class=\"n\">azimuth_degree</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">elevation_degree</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n<span class=\"n\">dipole</span> <span class=\"o\">=</span> <span class=\"n\">Dipole</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.6</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"n\">azimuth_degree</span><span class=\"p\">,</span><span class=\"n\">elevation_degree</span><span class=\"p\">))</span>\n<span class=\"n\">omni</span> <span class=\"o\">=</span> <span class=\"n\">Omni</span><span class=\"p\">((</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mf\">1.5</span><span class=\"p\">,</span><span class=\"mf\">1.6</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># speaker1 and speaker2</span>\n<span class=\"n\">doa</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>    <span class=\"c1\"># degree </span>\n<span class=\"n\">radius</span> <span class=\"o\">=</span> <span class=\"mf\">1.5</span> <span class=\"c1\"># meter</span>\n<span class=\"n\">speaker1</span> <span class=\"o\">=</span> <span class=\"n\">dipole</span><span class=\"o\">.</span><span class=\"n\">generate_speaker</span><span class=\"p\">(</span><span class=\"n\">radius</span><span class=\"p\">,</span> <span class=\"n\">doa</span><span class=\"p\">)</span>\n<span class=\"n\">speaker2</span> <span class=\"o\">=</span> <span class=\"n\">omni</span><span class=\"o\">.</span><span class=\"n\">generate_speaker</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">90</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># setup speaker and mic array</span>\n<span class=\"n\">room</span><span class=\"o\">.</span><span class=\"n\">setup_mic_speaker</span><span class=\"p\">([</span><span class=\"n\">dipole</span><span class=\"p\">,</span> <span class=\"n\">omni</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"n\">speaker1</span><span class=\"p\">,</span> <span class=\"n\">speaker2</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># RIR </span>\n<span class=\"n\">rir_spk1</span><span class=\"p\">,</span> <span class=\"n\">rir_spk2</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"o\">.</span><span class=\"n\">compute_rir</span><span class=\"p\">(</span><span class=\"n\">room</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># merge reverb voice from 2 speakers </span>\n<span class=\"c1\"># (spk1.wav and spk2.wav should have same number of channels)</span>\n<span class=\"n\">merged_channels</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"n\">reverb1</span><span class=\"p\">[:,</span> <span class=\"p\">:</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">reverb1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">reverb2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span> <span class=\"o\">+</span> <span class=\"n\">reverb2</span><span class=\"p\">[:,:</span><span class=\"nb\">min</span><span class=\"p\">(</span><span class=\"n\">reverb1</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">],</span> <span class=\"n\">reverb2</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">])]</span> <span class=\"k\">for</span> <span class=\"n\">reverb1</span><span class=\"p\">,</span> <span class=\"n\">reverb2</span> <span class=\"ow\">in</span> <span class=\"nb\">zip</span><span class=\"p\">(</span><span class=\"n\">rir_spk1</span><span class=\"o\">.</span><span class=\"n\">apply2audio_file</span><span class=\"p\">(</span><span class=\"s1\">'spk1.wav'</span><span class=\"p\">),</span> <span class=\"n\">rir_spk2</span><span class=\"o\">.</span><span class=\"n\">apply2audio_file</span><span class=\"p\">(</span><span class=\"s1\">'spk2.wav'</span><span class=\"p\">))]</span>\n</pre>\n<h1>Reference Code</h1>\n<p>The C Backend Code is from the project of Prof. Emanu\u00ebl Habets.\n<a href=\"https://github.com/ehabets/RIR-Generator\" rel=\"nofollow\">https://github.com/ehabets/RIR-Generator</a></p>\n\n          </div>"}, "last_serial": 6373208, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "5543da1a25a71c541f01ae763ce567a1", "sha256": "859296662bcdc8e6e34ee21505dc6d1ae128edf5721c9acb0da8cb5182641e18"}, "downloads": -1, "filename": "pyrir-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5543da1a25a71c541f01ae763ce567a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59383, "upload_time": "2019-12-30T00:50:48", "upload_time_iso_8601": "2019-12-30T00:50:48.722595Z", "url": "https://files.pythonhosted.org/packages/1d/c0/a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4/pyrir-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5543da1a25a71c541f01ae763ce567a1", "sha256": "859296662bcdc8e6e34ee21505dc6d1ae128edf5721c9acb0da8cb5182641e18"}, "downloads": -1, "filename": "pyrir-0.0.1.tar.gz", "has_sig": false, "md5_digest": "5543da1a25a71c541f01ae763ce567a1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 59383, "upload_time": "2019-12-30T00:50:48", "upload_time_iso_8601": "2019-12-30T00:50:48.722595Z", "url": "https://files.pythonhosted.org/packages/1d/c0/a1bd34d6595460faa586318ac17265d825f0886328d61fe020f33c412ac4/pyrir-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:46 2020"}