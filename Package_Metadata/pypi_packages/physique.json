{"info": {"author": "David THERINCOURT", "author_email": "dtherincourt@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# Librairie Python pour les sciences physiques au lyc\u00e9e\n\n## Installation\n\n### Avec des d\u00e9p\u00f4ts de PyPi\n\nLancer dans un terminal :\n\n\tpip install physique\n\n### A partir de l'archive de la biblioth\u00e8que\n\nT\u00e9l\u00e9charger [ici](https://pypi.org/project/physique/#files) le fichier `physique-x.x.whl`. Les caract\u00e8res `x` sont \u00e0 remplacer par les num\u00e9ros de version.\n\nDans une console Python dans le m\u00eame r\u00e9pertoire que l'archive et lancer la commande suivante :\n\n\tpip install physique-x.x.whl\n\n## Utilisation\n\n### Le module `modelisation`\n\nFonctions pour r\u00e9aliser une mod\u00e9lisation d'une courbe du type `y=f(x)`.\n\n#### Fonctions disponibles\n\n| Fonctions                      | Valeurs de retour    | Type de fonction mod\u00e9lis\u00e9e   |\n| ------------------------------ | -------------------- | ---------------------------- |\n| ` ajustement_lineaire(x, y)`   | `a`                  | `y=ax\u200b`                       |\n| `ajustement_affine(x, y)`      | `a`  et `b`          | `y=ax+b\u200b`                     |\n| `ajustement_parabolique(x, y)` | `a` , `b` et  `c`    | `y=a x^2+bx+c\u200b`               |\n| `ajustement_exp1(x, y)`        | `A`  et `tau`        | `y = A*(1-exp(-x/tau))`      |\n| `ajustement_exp1_x0(x, y)`     | `A` , `tau` et  `x0` | `y = A*(1-exp(-(x-x0)/tau))` |\n| `ajustement_exp2(x, y)`        | `A`  et `tau`        | `y = A*exp(-x/tau)`          |\n| `ajustement_exp2_x0(x, y) `    | `A` , `tau` et  `x0` | `y = A*exp(-(x-x0)/tau)`     |\n\n#### Exemple\n\n```python\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom physique.modelisation import ajustement_parabolique\n\nx = np.array([0.003,0.141,0.275,0.410,0.554,0.686,0.820,0.958,1.089,1.227,1.359,1.490,1.599,1.705,1.801])\ny = np.array([0.746,0.990,1.175,1.336,1.432,1.505,1.528,1.505,1.454,1.355,1.207,1.018,0.797,0.544,0.266])\n\n[a, b, c] = ajustement_parabolique(x, y)\nprint(a, b, c)\n\nx_mod = np.linspace(0,max(x),50)\ny_mod = a*x_mod**2 + b*x_mod + c\n\nplt.plot(x_mod, y_mod, '-')\nplt.plot(x, y, 'x')\nplt.show()\n```\n\n### Le module `CSV`\n\nModules d'importation de tableau de donn\u00e9es au format CSV \u00e0 partir des logiciels Avim\u00e9ca3, Regavi, ...\n\n#### Fonctions disponibles\n\n* `importAvimeca3(fichier)`  ou `importAvimeca3(fichier, sep=';')`\n* `importRegavi(fichier)`  ou `importRegavi(fichier, sep=';')` \n\nLe param\u00e8tre `sep` (s\u00e9parateur de donn\u00e9es) est optionnel. La tabulation (`sep='\\t'`) est le s\u00e9parateur par d\u00e9faut.\n\n#### Exemple\n\n```python\nimport matplotlib.pyplot as plt\nfrom physique.csv import importAvimeca3\n\nt, x, y = importAvimeca3('data.txt') # s\u00e9parateur = tabulation\n\nplt.plot(x,y,'.')\nplt.show()\n```\n\nLe fichier ` data.txt` est obtenu par l'exportation de donn\u00e9es au format CSV dans le locigiel Avim\u00e9ca3.\n\n### Le module ` micropythontools`\n\nModule de pilotage d'une carte microcontr\u00f4leur (PyBoard, ESP32, Micro:bit, ...) fonctionnant sous micropython \u00e0 partir d'un ordinateur sous Python par le port s\u00e9rie (USB, Bluetooth, ...)\n\n#### Fonctions disponibles\n\n* `execFileOnBoard(nomFichier, portSerie)`\n\n  Cette fonction ex\u00e9cute un programme Micropython (enregistr\u00e9 sur l'ordianteur) sur le microcontr\u00f4leur. Elle retourne un tuple envoy\u00e9 par une fonction `print(tuple)`  plac\u00e9e dans le programme Micropython.\n\n* `execFileOnBoardToStr(nomFichier, portSerie) `\n\n  Idem que la fonction pr\u00e9c\u00e9dent mais renvoie la chaine de carat\u00e8res envoy\u00e9 par une fonction `print(str)`  plac\u00e9e dans le programme Micropython.\n\n#### Exemple\n\nProgramme MicroPython `read_adc.py` pour carte PyBoard (lecture sur entr\u00e9e analogique) :\n\n```python\nfrom pyb import Pin, ADC\nfrom time import sleep_ms\nadc = ADC(Pin('X1'))     # Broche X1 en entr\u00e9e analogique\nx, y = [], []            # Tableaux vides au d\u00e9part\nfor i in range(10):      # Mesures\n    x.append(i)\n    y.append(adc.read()) # Lecture sur CAN\n    sleep_ms(500)        # attendre 500 ms\ndata = x, y              # Tuple de donn\u00e9es\nprint(data)              # Envoie des donn\u00e9es\n```\n\nProgramme Python sur l'ordinateur dans le m\u00eame r\u00e9pertoire que le programme MicroPython :\n\n```python\nimport matplotlib.pyplot as plt\nfrom physique.micropythontools import execFileOnBoard\nx, y = execFileOnBoard(\"read_adc.py\", \"COM6\") # Ex\u00e9cution du script MicroPython\nplt.plot(x,y,'r.')\nplt.ylim(0,5000)\nplt.show()\n```\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/david-therincourt/physique", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "physique", "package_url": "https://pypi.org/project/physique/", "platform": "", "project_url": "https://pypi.org/project/physique/", "project_urls": {"Homepage": "https://github.com/david-therincourt/physique"}, "release_url": "https://pypi.org/project/physique/0.3.1/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Librairie Python pour les sciences physiques", "version": "0.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Librairie Python pour les sciences physiques au lyc\u00e9e</h1>\n<h2>Installation</h2>\n<h3>Avec des d\u00e9p\u00f4ts de PyPi</h3>\n<p>Lancer dans un terminal :</p>\n<pre><code>pip install physique\n</code></pre>\n<h3>A partir de l'archive de la biblioth\u00e8que</h3>\n<p>T\u00e9l\u00e9charger <a href=\"https://pypi.org/project/physique/#files\" rel=\"nofollow\">ici</a> le fichier <code>physique-x.x.whl</code>. Les caract\u00e8res <code>x</code> sont \u00e0 remplacer par les num\u00e9ros de version.</p>\n<p>Dans une console Python dans le m\u00eame r\u00e9pertoire que l'archive et lancer la commande suivante :</p>\n<pre><code>pip install physique-x.x.whl\n</code></pre>\n<h2>Utilisation</h2>\n<h3>Le module <code>modelisation</code></h3>\n<p>Fonctions pour r\u00e9aliser une mod\u00e9lisation d'une courbe du type <code>y=f(x)</code>.</p>\n<h4>Fonctions disponibles</h4>\n<table>\n<thead>\n<tr>\n<th>Fonctions</th>\n<th>Valeurs de retour</th>\n<th>Type de fonction mod\u00e9lis\u00e9e</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>ajustement_lineaire(x, y)</code></td>\n<td><code>a</code></td>\n<td><code>y=ax\u200b</code></td>\n</tr>\n<tr>\n<td><code>ajustement_affine(x, y)</code></td>\n<td><code>a</code>  et <code>b</code></td>\n<td><code>y=ax+b\u200b</code></td>\n</tr>\n<tr>\n<td><code>ajustement_parabolique(x, y)</code></td>\n<td><code>a</code> , <code>b</code> et  <code>c</code></td>\n<td><code>y=a x^2+bx+c\u200b</code></td>\n</tr>\n<tr>\n<td><code>ajustement_exp1(x, y)</code></td>\n<td><code>A</code>  et <code>tau</code></td>\n<td><code>y = A*(1-exp(-x/tau))</code></td>\n</tr>\n<tr>\n<td><code>ajustement_exp1_x0(x, y)</code></td>\n<td><code>A</code> , <code>tau</code> et  <code>x0</code></td>\n<td><code>y = A*(1-exp(-(x-x0)/tau))</code></td>\n</tr>\n<tr>\n<td><code>ajustement_exp2(x, y)</code></td>\n<td><code>A</code>  et <code>tau</code></td>\n<td><code>y = A*exp(-x/tau)</code></td>\n</tr>\n<tr>\n<td><code>ajustement_exp2_x0(x, y)</code></td>\n<td><code>A</code> , <code>tau</code> et  <code>x0</code></td>\n<td><code>y = A*exp(-(x-x0)/tau)</code></td>\n</tr></tbody></table>\n<h4>Exemple</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">physique.modelisation</span> <span class=\"kn\">import</span> <span class=\"n\">ajustement_parabolique</span>\n\n<span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.003</span><span class=\"p\">,</span><span class=\"mf\">0.141</span><span class=\"p\">,</span><span class=\"mf\">0.275</span><span class=\"p\">,</span><span class=\"mf\">0.410</span><span class=\"p\">,</span><span class=\"mf\">0.554</span><span class=\"p\">,</span><span class=\"mf\">0.686</span><span class=\"p\">,</span><span class=\"mf\">0.820</span><span class=\"p\">,</span><span class=\"mf\">0.958</span><span class=\"p\">,</span><span class=\"mf\">1.089</span><span class=\"p\">,</span><span class=\"mf\">1.227</span><span class=\"p\">,</span><span class=\"mf\">1.359</span><span class=\"p\">,</span><span class=\"mf\">1.490</span><span class=\"p\">,</span><span class=\"mf\">1.599</span><span class=\"p\">,</span><span class=\"mf\">1.705</span><span class=\"p\">,</span><span class=\"mf\">1.801</span><span class=\"p\">])</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mf\">0.746</span><span class=\"p\">,</span><span class=\"mf\">0.990</span><span class=\"p\">,</span><span class=\"mf\">1.175</span><span class=\"p\">,</span><span class=\"mf\">1.336</span><span class=\"p\">,</span><span class=\"mf\">1.432</span><span class=\"p\">,</span><span class=\"mf\">1.505</span><span class=\"p\">,</span><span class=\"mf\">1.528</span><span class=\"p\">,</span><span class=\"mf\">1.505</span><span class=\"p\">,</span><span class=\"mf\">1.454</span><span class=\"p\">,</span><span class=\"mf\">1.355</span><span class=\"p\">,</span><span class=\"mf\">1.207</span><span class=\"p\">,</span><span class=\"mf\">1.018</span><span class=\"p\">,</span><span class=\"mf\">0.797</span><span class=\"p\">,</span><span class=\"mf\">0.544</span><span class=\"p\">,</span><span class=\"mf\">0.266</span><span class=\"p\">])</span>\n\n<span class=\"p\">[</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">ajustement_parabolique</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">)</span>\n\n<span class=\"n\">x_mod</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">linspace</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"nb\">max</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span><span class=\"mi\">50</span><span class=\"p\">)</span>\n<span class=\"n\">y_mod</span> <span class=\"o\">=</span> <span class=\"n\">a</span><span class=\"o\">*</span><span class=\"n\">x_mod</span><span class=\"o\">**</span><span class=\"mi\">2</span> <span class=\"o\">+</span> <span class=\"n\">b</span><span class=\"o\">*</span><span class=\"n\">x_mod</span> <span class=\"o\">+</span> <span class=\"n\">c</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x_mod</span><span class=\"p\">,</span> <span class=\"n\">y_mod</span><span class=\"p\">,</span> <span class=\"s1\">'-'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"s1\">'x'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<h3>Le module <code>CSV</code></h3>\n<p>Modules d'importation de tableau de donn\u00e9es au format CSV \u00e0 partir des logiciels Avim\u00e9ca3, Regavi, ...</p>\n<h4>Fonctions disponibles</h4>\n<ul>\n<li><code>importAvimeca3(fichier)</code>  ou <code>importAvimeca3(fichier, sep=';')</code></li>\n<li><code>importRegavi(fichier)</code>  ou <code>importRegavi(fichier, sep=';')</code></li>\n</ul>\n<p>Le param\u00e8tre <code>sep</code> (s\u00e9parateur de donn\u00e9es) est optionnel. La tabulation (<code>sep='\\t'</code>) est le s\u00e9parateur par d\u00e9faut.</p>\n<h4>Exemple</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">physique.csv</span> <span class=\"kn\">import</span> <span class=\"n\">importAvimeca3</span>\n\n<span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">importAvimeca3</span><span class=\"p\">(</span><span class=\"s1\">'data.txt'</span><span class=\"p\">)</span> <span class=\"c1\"># s\u00e9parateur = tabulation</span>\n\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n<p>Le fichier <code>data.txt</code> est obtenu par l'exportation de donn\u00e9es au format CSV dans le locigiel Avim\u00e9ca3.</p>\n<h3>Le module <code>micropythontools</code></h3>\n<p>Module de pilotage d'une carte microcontr\u00f4leur (PyBoard, ESP32, Micro:bit, ...) fonctionnant sous micropython \u00e0 partir d'un ordinateur sous Python par le port s\u00e9rie (USB, Bluetooth, ...)</p>\n<h4>Fonctions disponibles</h4>\n<ul>\n<li>\n<p><code>execFileOnBoard(nomFichier, portSerie)</code></p>\n<p>Cette fonction ex\u00e9cute un programme Micropython (enregistr\u00e9 sur l'ordianteur) sur le microcontr\u00f4leur. Elle retourne un tuple envoy\u00e9 par une fonction <code>print(tuple)</code>  plac\u00e9e dans le programme Micropython.</p>\n</li>\n<li>\n<p><code>execFileOnBoardToStr(nomFichier, portSerie)</code></p>\n<p>Idem que la fonction pr\u00e9c\u00e9dent mais renvoie la chaine de carat\u00e8res envoy\u00e9 par une fonction <code>print(str)</code>  plac\u00e9e dans le programme Micropython.</p>\n</li>\n</ul>\n<h4>Exemple</h4>\n<p>Programme MicroPython <code>read_adc.py</code> pour carte PyBoard (lecture sur entr\u00e9e analogique) :</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyb</span> <span class=\"kn\">import</span> <span class=\"n\">Pin</span><span class=\"p\">,</span> <span class=\"n\">ADC</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">sleep_ms</span>\n<span class=\"n\">adc</span> <span class=\"o\">=</span> <span class=\"n\">ADC</span><span class=\"p\">(</span><span class=\"n\">Pin</span><span class=\"p\">(</span><span class=\"s1\">'X1'</span><span class=\"p\">))</span>     <span class=\"c1\"># Broche X1 en entr\u00e9e analogique</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"p\">[],</span> <span class=\"p\">[]</span>            <span class=\"c1\"># Tableaux vides au d\u00e9part</span>\n<span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">):</span>      <span class=\"c1\"># Mesures</span>\n    <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span>\n    <span class=\"n\">y</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">adc</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">())</span> <span class=\"c1\"># Lecture sur CAN</span>\n    <span class=\"n\">sleep_ms</span><span class=\"p\">(</span><span class=\"mi\">500</span><span class=\"p\">)</span>        <span class=\"c1\"># attendre 500 ms</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span>              <span class=\"c1\"># Tuple de donn\u00e9es</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"p\">)</span>              <span class=\"c1\"># Envoie des donn\u00e9es</span>\n</pre>\n<p>Programme Python sur l'ordinateur dans le m\u00eame r\u00e9pertoire que le programme MicroPython :</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">physique.micropythontools</span> <span class=\"kn\">import</span> <span class=\"n\">execFileOnBoard</span>\n<span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">execFileOnBoard</span><span class=\"p\">(</span><span class=\"s2\">\"read_adc.py\"</span><span class=\"p\">,</span> <span class=\"s2\">\"COM6\"</span><span class=\"p\">)</span> <span class=\"c1\"># Ex\u00e9cution du script MicroPython</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">,</span><span class=\"s1\">'r.'</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">ylim</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 7034210, "releases": {"0.2.2": [{"comment_text": "", "digests": {"md5": "d84e41a0facccdfc767c58b4bd171b82", "sha256": "c2ec130f8604e43a817e477d6291b0e55d2b2c94931b36ca555d7e503ba30b7b"}, "downloads": -1, "filename": "physique-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d84e41a0facccdfc767c58b4bd171b82", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 3574, "upload_time": "2020-03-19T11:49:53", "upload_time_iso_8601": "2020-03-19T11:49:53.184786Z", "url": "https://files.pythonhosted.org/packages/eb/e2/09692265f014afb54d86397f85512d67757b919a23538887bd4c0ec3a122/physique-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a310ad105fa62c3090f0b9eeb815314c", "sha256": "4ed232e93bce74bfda48b6dc8e578c6c5d198f5f9527db3308cc4d9849596366"}, "downloads": -1, "filename": "physique-0.2.2.tar.gz", "has_sig": false, "md5_digest": "a310ad105fa62c3090f0b9eeb815314c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 2459, "upload_time": "2020-03-19T11:49:54", "upload_time_iso_8601": "2020-03-19T11:49:54.394722Z", "url": "https://files.pythonhosted.org/packages/73/e6/c5dbe7be2adac43f7d9716f56f6efa0a9be525891f4b321ae8952b01aa16/physique-0.2.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "7ea612528aa6e04d4250ddd0db578f87", "sha256": "6494b8b8c1447baa1fd14bbc125660ca30ecf37de208413a2aa925a99d7d91fd"}, "downloads": -1, "filename": "physique-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7ea612528aa6e04d4250ddd0db578f87", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12748, "upload_time": "2020-04-11T13:05:41", "upload_time_iso_8601": "2020-04-11T13:05:41.730207Z", "url": "https://files.pythonhosted.org/packages/cc/9d/c1bf382a4044a7e21eb142347b9faac4f1a2a491e010ff4a0d944caf82f6/physique-0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bc3ae30ebd7927dcde8dda4e099d4af4", "sha256": "82ce119de6e6fa3f3ab4462252da4555d3e4b81459f704f045167e29da620233"}, "downloads": -1, "filename": "physique-0.3.tar.gz", "has_sig": false, "md5_digest": "bc3ae30ebd7927dcde8dda4e099d4af4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 11542, "upload_time": "2020-04-11T13:05:43", "upload_time_iso_8601": "2020-04-11T13:05:43.621984Z", "url": "https://files.pythonhosted.org/packages/c5/ff/7db5d4711c53c69e4e4195064d9fa97f6a1a140738ffd8c816f46ff75b81/physique-0.3.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "1e6d27e2a4b0067ac387a9832387f1bd", "sha256": "4e1cc4e086364e46564698032d9fdf743d6f40236e731a0751e0e385d48632e3"}, "downloads": -1, "filename": "physique-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e6d27e2a4b0067ac387a9832387f1bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13725, "upload_time": "2020-04-16T18:48:03", "upload_time_iso_8601": "2020-04-16T18:48:03.063371Z", "url": "https://files.pythonhosted.org/packages/7e/2f/6af4bd95c5c8cdc4cb0e4f87e1ab3e9f48d97149de656e994aa88568ca9d/physique-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f7d2df5303da4df7b1eaf779a2a5836", "sha256": "4d4b92c1327c57bd37caec80718c7535c66c028530f40a1048576face7711c27"}, "downloads": -1, "filename": "physique-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7f7d2df5303da4df7b1eaf779a2a5836", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13192, "upload_time": "2020-04-16T18:48:05", "upload_time_iso_8601": "2020-04-16T18:48:05.109416Z", "url": "https://files.pythonhosted.org/packages/05/26/dcab5007d77ee0d9e5c73f194389db0708de1e7a82529ec3c3a1857e9f12/physique-0.3.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1e6d27e2a4b0067ac387a9832387f1bd", "sha256": "4e1cc4e086364e46564698032d9fdf743d6f40236e731a0751e0e385d48632e3"}, "downloads": -1, "filename": "physique-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1e6d27e2a4b0067ac387a9832387f1bd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 13725, "upload_time": "2020-04-16T18:48:03", "upload_time_iso_8601": "2020-04-16T18:48:03.063371Z", "url": "https://files.pythonhosted.org/packages/7e/2f/6af4bd95c5c8cdc4cb0e4f87e1ab3e9f48d97149de656e994aa88568ca9d/physique-0.3.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f7d2df5303da4df7b1eaf779a2a5836", "sha256": "4d4b92c1327c57bd37caec80718c7535c66c028530f40a1048576face7711c27"}, "downloads": -1, "filename": "physique-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7f7d2df5303da4df7b1eaf779a2a5836", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 13192, "upload_time": "2020-04-16T18:48:05", "upload_time_iso_8601": "2020-04-16T18:48:05.109416Z", "url": "https://files.pythonhosted.org/packages/05/26/dcab5007d77ee0d9e5c73f194389db0708de1e7a82529ec3c3a1857e9f12/physique-0.3.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:55:12 2020"}