{"info": {"author": "Adam Hooper", "author_email": "adam@adamhooper.com", "bugtrack_url": null, "classifiers": [], "description": "Parsers for [CJWorkbench](https://github.com/CJWorkbench/cjworkbench) modules.\n\nWorkbench modules may _optionally_ depend on the latest version of this Python\npackage for its `cjwparse.api.parse_file()` function.\n\nInstallation\n============\n\nThis is meant to be used within a Docker container. It depends on executables\n`/usr/bin/(csv|json|xls|xlsx)-to-arrow`.\n\nYour Dockerfile might look something like this:\n\n```\nFROM arrow-tools:v0.0.11 AS arrow-tools\nFROM python:3.8.1-buster AS main\n\nCOPY --from=arrow-tools /usr/bin/csv-to-arrow /usr/bin/csv-to-arrow\nCOPY --from=arrow-tools /usr/bin/json-to-arrow /usr/bin/json-to-arrow\nCOPY --from=arrow-tools /usr/bin/xls-to-arrow /usr/bin/xls-to-arrow\nCOPY --from=arrow-tools /usr/bin/xlsx-to-arrow /usr/bin/xlsx-to-arrow\n\n# And now that these binaries are accessible, you can install cjwparse...\n```\n\nUsage\n=====\n\n```python\nimport pyarrow\n\nfrom cjwparse.api import parse_file\n\n# Convert a CSV file 'input.csv' to Arrow file 'output.arrow'\ninput_path = Path(\"input.csv\")\ninput_path.write_bytes(b\"A,B\\n1,2\")\noutput_path = Path(\"output.arrow\")\nparse_file(input_path, output_path=output_path, has_headers=False)\n\n# Read the output\nwith pyarrow.ipc.open_file(output_path) as reader:\n    table = reader.read_all()\n```\n\n\nDeveloping\n==========\n\n1. Run tests: `docker build .`\n2. Write a failing unit test in `tests/`\n3. Make it pass by editing code in `cjwparse/`\n4. `black cjwparse tests && isort --recursive cjwparse tests`\n5. Submit a pull request\n\nBe very, very, very careful to preserve a consistent API. Workbench will\nupgrade this dependency without module authors' explicit consent. Add new\nfeatures; fix bugs. Never change functionality.\n\nI18n\n====\n\n### Marking strings for translation\n\nStrings in `cjwparse` can be marked for translation using\n`cjwparse.i18n._trans_cjwparse`. Each translation message must have a\n(unique) ID. ICU is supported for the content. For example:\n\n```python\nfrom .i18n import _trans_cjwparse\n\nerr = \"Error 404\"\n\nwith_arguments = _trans_cjwparse(\n    \"greatapi.exception.message\",\n    \"Something is wrong: {error}\",\n    {\"error\": err}\n)\n\nwithout_arguments = _trans_cjwparse(\n    \"greatapi.exception.general\",\n    \"Something is wrong\",\n)\n```\n\nWorkbench is wired to accept the return value of `_trans_cjwparse`\nwherever an error/warning or quick fix is expected.\n\n### Creating `po` catalogs\n\nCalls to `_trans_cjwparse` can (and must) be parsed to create `cjwparse`'s `.po` files.\nUpdate the `.po` files with:\n\n```\n./setup.py extract_messages\n```\n\nThe first time you run this, you'll need to install dependencies: `pip3 install .[maintenance]`\n\n### Unit testing\n\nIn case a `_trans_cjwparse` invocation needs to be unit tested, you can use `cjwparse.testing.i18n.cjwparse_i18n_message` \nin a manner similar to the following: \n\n```python\nfrom cjwparse.testing.i18n import cjwparse_i18n_message\nimport with_arguments, without_arguments\n\nassert with_arguments == cjwparse_i18n_message(\"greatapi.exception.message\", {\"error\": \"Error 404\"})\nassert without_arguments == cjwparse_i18n_message(\"greatapi.exception.general\")\n```\n\n### Message deprecation\n\nNever delete a `trans()` call: each message ID, once assigned, must be preserved\nforever.\n\nWhen there is no more code path to a `trans()` call, move it to\n`cjwparse/i18n/_deprecated_i18n_messages.py`. The file is only read by\nextraction code. It is never executed.\n\n\nPublishing\n==========\n\n1. Write a new `__version__` to `cjwparse/__init__.py`. Adhere to\n   [semver](https://semver.org). (As changes must be backwards-compatible,\n   the version will always start with `1` and look like `1.x.y`.)\n2. Prepend notes to `CHANGELOG.md` about the new version\n3. `git commit`\n4. `git tag v1.x.y`\n5. `git push --tags && git push`\n6. Wait for Travis to push our changes to PyPI", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/CJWorkbench/cjwparse/", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "cjwparse", "package_url": "https://pypi.org/project/cjwparse/", "platform": "", "project_url": "https://pypi.org/project/cjwparse/", "project_urls": {"Homepage": "http://github.com/CJWorkbench/cjwparse/"}, "release_url": "https://pypi.org/project/cjwparse/0.0.4/", "requires_dist": null, "requires_python": "", "summary": "Utilities to help build Workbench modules", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Parsers for <a href=\"https://github.com/CJWorkbench/cjworkbench\" rel=\"nofollow\">CJWorkbench</a> modules.</p>\n<p>Workbench modules may <em>optionally</em> depend on the latest version of this Python\npackage for its <code>cjwparse.api.parse_file()</code> function.</p>\n<h1>Installation</h1>\n<p>This is meant to be used within a Docker container. It depends on executables\n<code>/usr/bin/(csv|json|xls|xlsx)-to-arrow</code>.</p>\n<p>Your Dockerfile might look something like this:</p>\n<pre><code>FROM arrow-tools:v0.0.11 AS arrow-tools\nFROM python:3.8.1-buster AS main\n\nCOPY --from=arrow-tools /usr/bin/csv-to-arrow /usr/bin/csv-to-arrow\nCOPY --from=arrow-tools /usr/bin/json-to-arrow /usr/bin/json-to-arrow\nCOPY --from=arrow-tools /usr/bin/xls-to-arrow /usr/bin/xls-to-arrow\nCOPY --from=arrow-tools /usr/bin/xlsx-to-arrow /usr/bin/xlsx-to-arrow\n\n# And now that these binaries are accessible, you can install cjwparse...\n</code></pre>\n<h1>Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pyarrow</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">cjwparse.api</span> <span class=\"kn\">import</span> <span class=\"n\">parse_file</span>\n\n<span class=\"c1\"># Convert a CSV file 'input.csv' to Arrow file 'output.arrow'</span>\n<span class=\"n\">input_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"input.csv\"</span><span class=\"p\">)</span>\n<span class=\"n\">input_path</span><span class=\"o\">.</span><span class=\"n\">write_bytes</span><span class=\"p\">(</span><span class=\"sa\">b</span><span class=\"s2\">\"A,B</span><span class=\"se\">\\n</span><span class=\"s2\">1,2\"</span><span class=\"p\">)</span>\n<span class=\"n\">output_path</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"s2\">\"output.arrow\"</span><span class=\"p\">)</span>\n<span class=\"n\">parse_file</span><span class=\"p\">(</span><span class=\"n\">input_path</span><span class=\"p\">,</span> <span class=\"n\">output_path</span><span class=\"o\">=</span><span class=\"n\">output_path</span><span class=\"p\">,</span> <span class=\"n\">has_headers</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Read the output</span>\n<span class=\"k\">with</span> <span class=\"n\">pyarrow</span><span class=\"o\">.</span><span class=\"n\">ipc</span><span class=\"o\">.</span><span class=\"n\">open_file</span><span class=\"p\">(</span><span class=\"n\">output_path</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">reader</span><span class=\"p\">:</span>\n    <span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"n\">reader</span><span class=\"o\">.</span><span class=\"n\">read_all</span><span class=\"p\">()</span>\n</pre>\n<h1>Developing</h1>\n<ol>\n<li>Run tests: <code>docker build .</code></li>\n<li>Write a failing unit test in <code>tests/</code></li>\n<li>Make it pass by editing code in <code>cjwparse/</code></li>\n<li><code>black cjwparse tests &amp;&amp; isort --recursive cjwparse tests</code></li>\n<li>Submit a pull request</li>\n</ol>\n<p>Be very, very, very careful to preserve a consistent API. Workbench will\nupgrade this dependency without module authors' explicit consent. Add new\nfeatures; fix bugs. Never change functionality.</p>\n<h1>I18n</h1>\n<h3>Marking strings for translation</h3>\n<p>Strings in <code>cjwparse</code> can be marked for translation using\n<code>cjwparse.i18n._trans_cjwparse</code>. Each translation message must have a\n(unique) ID. ICU is supported for the content. For example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">.i18n</span> <span class=\"kn\">import</span> <span class=\"n\">_trans_cjwparse</span>\n\n<span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"s2\">\"Error 404\"</span>\n\n<span class=\"n\">with_arguments</span> <span class=\"o\">=</span> <span class=\"n\">_trans_cjwparse</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"greatapi.exception.message\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Something is wrong: </span><span class=\"si\">{error}</span><span class=\"s2\">\"</span><span class=\"p\">,</span>\n    <span class=\"p\">{</span><span class=\"s2\">\"error\"</span><span class=\"p\">:</span> <span class=\"n\">err</span><span class=\"p\">}</span>\n<span class=\"p\">)</span>\n\n<span class=\"n\">without_arguments</span> <span class=\"o\">=</span> <span class=\"n\">_trans_cjwparse</span><span class=\"p\">(</span>\n    <span class=\"s2\">\"greatapi.exception.general\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"Something is wrong\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n</pre>\n<p>Workbench is wired to accept the return value of <code>_trans_cjwparse</code>\nwherever an error/warning or quick fix is expected.</p>\n<h3>Creating <code>po</code> catalogs</h3>\n<p>Calls to <code>_trans_cjwparse</code> can (and must) be parsed to create <code>cjwparse</code>'s <code>.po</code> files.\nUpdate the <code>.po</code> files with:</p>\n<pre><code>./setup.py extract_messages\n</code></pre>\n<p>The first time you run this, you'll need to install dependencies: <code>pip3 install .[maintenance]</code></p>\n<h3>Unit testing</h3>\n<p>In case a <code>_trans_cjwparse</code> invocation needs to be unit tested, you can use <code>cjwparse.testing.i18n.cjwparse_i18n_message</code>\nin a manner similar to the following:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">cjwparse.testing.i18n</span> <span class=\"kn\">import</span> <span class=\"n\">cjwparse_i18n_message</span>\n<span class=\"kn\">import</span> <span class=\"nn\">with_arguments</span><span class=\"o\">,</span> <span class=\"nn\">without_arguments</span>\n\n<span class=\"k\">assert</span> <span class=\"n\">with_arguments</span> <span class=\"o\">==</span> <span class=\"n\">cjwparse_i18n_message</span><span class=\"p\">(</span><span class=\"s2\">\"greatapi.exception.message\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"error\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Error 404\"</span><span class=\"p\">})</span>\n<span class=\"k\">assert</span> <span class=\"n\">without_arguments</span> <span class=\"o\">==</span> <span class=\"n\">cjwparse_i18n_message</span><span class=\"p\">(</span><span class=\"s2\">\"greatapi.exception.general\"</span><span class=\"p\">)</span>\n</pre>\n<h3>Message deprecation</h3>\n<p>Never delete a <code>trans()</code> call: each message ID, once assigned, must be preserved\nforever.</p>\n<p>When there is no more code path to a <code>trans()</code> call, move it to\n<code>cjwparse/i18n/_deprecated_i18n_messages.py</code>. The file is only read by\nextraction code. It is never executed.</p>\n<h1>Publishing</h1>\n<ol>\n<li>Write a new <code>__version__</code> to <code>cjwparse/__init__.py</code>. Adhere to\n<a href=\"https://semver.org\" rel=\"nofollow\">semver</a>. (As changes must be backwards-compatible,\nthe version will always start with <code>1</code> and look like <code>1.x.y</code>.)</li>\n<li>Prepend notes to <code>CHANGELOG.md</code> about the new version</li>\n<li><code>git commit</code></li>\n<li><code>git tag v1.x.y</code></li>\n<li><code>git push --tags &amp;&amp; git push</code></li>\n<li>Wait for Travis to push our changes to PyPI</li>\n</ol>\n\n          </div>"}, "last_serial": 6920107, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "aab30e318e5b9f71facfea1c65d30955", "sha256": "f7c88c251fa53a7ed0d0b4206cf932f24828d8924cb287727d4bf3298d026ec4"}, "downloads": -1, "filename": "cjwparse-0.0.1.tar.gz", "has_sig": false, "md5_digest": "aab30e318e5b9f71facfea1c65d30955", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17168, "upload_time": "2020-03-04T17:33:49", "upload_time_iso_8601": "2020-03-04T17:33:49.605293Z", "url": "https://files.pythonhosted.org/packages/e1/0c/3f97039e0c946de996fa7b2326576e20fb66f31131fe502aa1844a7d6eea/cjwparse-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e1211f79204f2aa42f44494a92ef43e1", "sha256": "c393ddcf67ccd2c0b470822a4ab15f0161ecee85c65935a960df66968d54da48"}, "downloads": -1, "filename": "cjwparse-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e1211f79204f2aa42f44494a92ef43e1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17108, "upload_time": "2020-03-05T17:34:29", "upload_time_iso_8601": "2020-03-05T17:34:29.756030Z", "url": "https://files.pythonhosted.org/packages/54/15/30767570399c6889d93840e612e23264cb494b1ababaed57964ed3e767a2/cjwparse-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "cbb05ebc6e990c090533369531d18741", "sha256": "f397236654cfa518d07e741021be0de648cc67cfc728e02aa75a2f7e6f3d05de"}, "downloads": -1, "filename": "cjwparse-0.0.3.tar.gz", "has_sig": false, "md5_digest": "cbb05ebc6e990c090533369531d18741", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17120, "upload_time": "2020-03-09T05:38:12", "upload_time_iso_8601": "2020-03-09T05:38:12.432925Z", "url": "https://files.pythonhosted.org/packages/1b/46/1e579228de3cf0ae1ea7112a2030b7d310408de3d95042277575042063f2/cjwparse-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "e1783529f5ab9caa7333e86e998562ad", "sha256": "e9bfbf3afc0ab31efcd87fe3a1f3542557483ebbf9ba7ff94f6be227b4d790b4"}, "downloads": -1, "filename": "cjwparse-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e1783529f5ab9caa7333e86e998562ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17816, "upload_time": "2020-03-31T13:15:30", "upload_time_iso_8601": "2020-03-31T13:15:30.186933Z", "url": "https://files.pythonhosted.org/packages/84/c0/c6b1129f342fb2500bdc25fbf6767ed8752136b617ea091b8e1bea30f9a7/cjwparse-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "e1783529f5ab9caa7333e86e998562ad", "sha256": "e9bfbf3afc0ab31efcd87fe3a1f3542557483ebbf9ba7ff94f6be227b4d790b4"}, "downloads": -1, "filename": "cjwparse-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e1783529f5ab9caa7333e86e998562ad", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17816, "upload_time": "2020-03-31T13:15:30", "upload_time_iso_8601": "2020-03-31T13:15:30.186933Z", "url": "https://files.pythonhosted.org/packages/84/c0/c6b1129f342fb2500bdc25fbf6767ed8752136b617ea091b8e1bea30f9a7/cjwparse-0.0.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:15 2020"}