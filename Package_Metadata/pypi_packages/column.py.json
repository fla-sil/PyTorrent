{"info": {"author": "Henry Qin", "author_email": "root@hq6.me", "bugtrack_url": null, "classifiers": [], "description": "Column.py\n===============\n\nThis is a modern re-implementation of the venerable old ``column`` application\navailable on most Unix / Linux systems today.\n\nWhy re-implement this ancient tool?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n\nBSD ``column`` has been, for many, the tool that *almost* works for every\nsituation where we want to pretty-print a delimited table in textual form.\nUnfortunately, it lacks two highly desirable features.\n\n1. It has no option to right-justify columns instead of left-justifying them.\n2. It has no option to specify the output delimiter, and has two spaces\n   hardcoded.\n\nWhy not just modify the original code?\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe original code is over 20 years old, is written in a cryptic C style which\ndoes not lend itself to easy modification, and uses the  compiler-dependent\n``wchar_t`` type is not actually wide enough for Unicode.\n\nExample Usage & Output\n^^^^^^^^^^^^^^^^^^^^^^\n\nConsider the following  input file, named ``Sample.txt``::\n\n    Benchmark,Count,Avg,StdDev,Median,Min,Max\n    Core 1 to Core 2,3000000,125,431.937128,122,87,294738\n    Core 1 to Core 3,3000000,128,58.326363,123,87,54313\n    Core 2 to Core 1,3000000,129,323.379763,123,87,291708\n    Core 2 to Core 3,3000000,128,45.726372,123,74,37875\n    Core 3 to Core 1,3000000,128,42.615930,123,87,44093\n    Core 3 to Core 2,3000000,128,172.090219,122,78,266052\n\nUnder traditional `column`, the output looks like this::\n\n    $ column -t -s, Sample.txt \n    Benchmark         Count    Avg  StdDev      Median  Min  Max\n    Core 1 to Core 2  3000000  125  431.937128  122     87   294738\n    Core 1 to Core 3  3000000  128  58.326363   123     87   54313\n    Core 2 to Core 1  3000000  129  323.379763  123     87   291708\n    Core 2 to Core 3  3000000  128  45.726372   123     74   37875\n    Core 3 to Core 1  3000000  128  42.615930   123     87   44093\n    Core 3 to Core 2  3000000  128  172.090219  122     78   266052\n\n\nWith `column.py`, the output looks like this with default options::\n\n    $ column.py -s, Sample.txt \n    Benchmark           Count  Avg      StdDev  Median  Min     Max\n    Core 1 to Core 2  3000000  125  431.937128     122   87  294738\n    Core 1 to Core 3  3000000  128   58.326363     123   87   54313\n    Core 2 to Core 1  3000000  129  323.379763     123   87  291708\n    Core 2 to Core 3  3000000  128   45.726372     123   74   37875\n    Core 3 to Core 1  3000000  128   42.615930     123   87   44093\n    Core 3 to Core 2  3000000  128  172.090219     122   78  266052", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hq6/column", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "column.py", "package_url": "https://pypi.org/project/column.py/", "platform": "Any", "project_url": "https://pypi.org/project/column.py/", "project_urls": {"Homepage": "https://github.com/hq6/column"}, "release_url": "https://pypi.org/project/column.py/0.1.1/", "requires_dist": null, "requires_python": "", "summary": "A newer and more modern Unix column formatting tool.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a modern re-implementation of the venerable old <tt>column</tt> application\navailable on most Unix / Linux systems today.</p>\n<div id=\"why-re-implement-this-ancient-tool\">\n<h2>Why re-implement this ancient tool?</h2>\n<p>BSD <tt>column</tt> has been, for many, the tool that <em>almost</em> works for every\nsituation where we want to pretty-print a delimited table in textual form.\nUnfortunately, it lacks two highly desirable features.</p>\n<ol>\n<li>It has no option to right-justify columns instead of left-justifying them.</li>\n<li>It has no option to specify the output delimiter, and has two spaces\nhardcoded.</li>\n</ol>\n</div>\n<div id=\"why-not-just-modify-the-original-code\">\n<h2>Why not just modify the original code?</h2>\n<p>The original code is over 20 years old, is written in a cryptic C style which\ndoes not lend itself to easy modification, and uses the  compiler-dependent\n<tt>wchar_t</tt> type is not actually wide enough for Unicode.</p>\n</div>\n<div id=\"example-usage-output\">\n<h2>Example Usage &amp; Output</h2>\n<p>Consider the following  input file, named <tt>Sample.txt</tt>:</p>\n<pre>Benchmark,Count,Avg,StdDev,Median,Min,Max\nCore 1 to Core 2,3000000,125,431.937128,122,87,294738\nCore 1 to Core 3,3000000,128,58.326363,123,87,54313\nCore 2 to Core 1,3000000,129,323.379763,123,87,291708\nCore 2 to Core 3,3000000,128,45.726372,123,74,37875\nCore 3 to Core 1,3000000,128,42.615930,123,87,44093\nCore 3 to Core 2,3000000,128,172.090219,122,78,266052\n</pre>\n<p>Under traditional <cite>column</cite>, the output looks like this:</p>\n<pre>$ column -t -s, Sample.txt\nBenchmark         Count    Avg  StdDev      Median  Min  Max\nCore 1 to Core 2  3000000  125  431.937128  122     87   294738\nCore 1 to Core 3  3000000  128  58.326363   123     87   54313\nCore 2 to Core 1  3000000  129  323.379763  123     87   291708\nCore 2 to Core 3  3000000  128  45.726372   123     74   37875\nCore 3 to Core 1  3000000  128  42.615930   123     87   44093\nCore 3 to Core 2  3000000  128  172.090219  122     78   266052\n</pre>\n<p>With <cite>column.py</cite>, the output looks like this with default options:</p>\n<pre>$ column.py -s, Sample.txt\nBenchmark           Count  Avg      StdDev  Median  Min     Max\nCore 1 to Core 2  3000000  125  431.937128     122   87  294738\nCore 1 to Core 3  3000000  128   58.326363     123   87   54313\nCore 2 to Core 1  3000000  129  323.379763     123   87  291708\nCore 2 to Core 3  3000000  128   45.726372     123   74   37875\nCore 3 to Core 1  3000000  128   42.615930     123   87   44093\nCore 3 to Core 2  3000000  128  172.090219     122   78  266052\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3857728, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "9f53e87c3cfc07d287bf404c25273852", "sha256": "840790fdda659ae0860860d85db5dcf747466e473ada75e0bcc456f5f3f48825"}, "downloads": -1, "filename": "column.py-0.1.tar.gz", "has_sig": false, "md5_digest": "9f53e87c3cfc07d287bf404c25273852", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3599, "upload_time": "2018-05-13T00:44:42", "upload_time_iso_8601": "2018-05-13T00:44:42.244250Z", "url": "https://files.pythonhosted.org/packages/b3/75/438f572ba7a812582089092db759ed1800ae7ae30d04b36a9f77f2a99af1/column.py-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "36d759c587baa3c2ad97c05812be6be7", "sha256": "9cbc3c24d890d4949b36f5b8776c96276ea85784062ca828c14ef4d3f23eff63"}, "downloads": -1, "filename": "column.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "36d759c587baa3c2ad97c05812be6be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3605, "upload_time": "2018-05-13T00:47:53", "upload_time_iso_8601": "2018-05-13T00:47:53.737764Z", "url": "https://files.pythonhosted.org/packages/dd/61/74ae4ded8a420a0d52d7d4e788127b960756df2b47e91e83a879019fa964/column.py-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "36d759c587baa3c2ad97c05812be6be7", "sha256": "9cbc3c24d890d4949b36f5b8776c96276ea85784062ca828c14ef4d3f23eff63"}, "downloads": -1, "filename": "column.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "36d759c587baa3c2ad97c05812be6be7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3605, "upload_time": "2018-05-13T00:47:53", "upload_time_iso_8601": "2018-05-13T00:47:53.737764Z", "url": "https://files.pythonhosted.org/packages/dd/61/74ae4ded8a420a0d52d7d4e788127b960756df2b47e91e83a879019fa964/column.py-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:30 2020"}