{"info": {"author": "Robert Forkel", "author_email": "forkel@shh.mpg.de", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy"], "description": "# cldfbench\nTooling to create CLDF datasets from existing data\n\n[![Build Status](https://travis-ci.org/cldf/cldfbench.svg?branch=master)](https://travis-ci.org/cldf/cldfbench)\n[![codecov](https://codecov.io/gh/cldf/cldfbench/branch/master/graph/badge.svg)](https://codecov.io/gh/cldf/cldfbench)\n[![PyPI](https://img.shields.io/pypi/v/cldfbench.svg)](https://pypi.org/project/cldfbench)\n\n\n## Overview\n\nThis package provides tools to curate cross-linguistic data, with the goal of\npackaging it as [CLDF](https://cldf.clld.org) datasets.\n\nIn particular, it supports a workflow where \n- \"raw\" source data is downloaded to a `raw/` subdirectory,\n- and subsequently converted to one or more CLDF datasets in a `cldf/` subdirectory, with the help of\n  - configuration data in a `etc/` directory and\n  - custom Python code (a subclass of [`cldfbench.Dataset`](src/cldfbench/dataset.py) which implements the workflow actions).\n\nThis workflow is supported via\n- a commandline interface `cldfbench` which calls the workflow actions as [subcommands](src/cldfbench/commands),\n- a `cldfbench.Dataset` base class, which must be overwritten in a custom module\n  to hook custom code into the workflow.\n\nWith this workflow and the separation of the data into three directories we want\nto provide a workbench for transparently deriving CLDF data from data that has been\npublished before. In particular we want to delineate clearly\n- what's part of the original or source data (`raw`), \n- what kind of information is added (`etc`)\n- to the derived data (`cldf`).\n\n\n## Install\n\n`cldfbench` can be installed via `pip` - preferably in a \n[virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/) - running\n```bash\npip install cldfbench[excel]\n```\n\nNote: The `[excel]` extra specification will also install support for reading spreadsheet data.\n\n\n## The command line interface `cldfbench`\n\nInstalling the python package will also install a command `cldfbench` available on\nthe command line:\n```bash\n$ cldfbench -h\nusage: cldfbench [-h] [--log-level LOG_LEVEL] COMMAND ...\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --log-level LOG_LEVEL\n                        log level [ERROR|WARN|INFO|DEBUG] (default: 20)\n\navailable commands:\n  Run \"COMAMND -h\" to get help for a specific command.\n\n  COMMAND\n    check               Run generic CLDF checks\n    ...\n```\n\nAs shown above, run `cldfbench -h` to get help, and `cldfbench COMMAND -h` to get\nhelp on individual subcommands, e.g. `cldfbench new -h` to read about the usage\nof the `new` subcommand.\n\n\n### Dataset discovery\n\nMost `cldfbench` commands operate on an existing dataset (unlike `new`, which\ncreates a new one). Datasets can be discovered in two ways:\n\n1. Via the python module (i.e. the `*.py` file, containing the `Dataset` subclass).\n   To use this mode of discovery, pass the path to the python module\n   as `DATASET` argument, when required by a command.\n\n2. Via [entry point](https://packaging.python.org/specifications/entry-points/) and\n   dataset ID. To use this mode, specify the name of the entry point as value of\n   the `--entry-point` option (or use the default name `cldfbench.dataset`) and\n   the `Dataset.id` as `DATASET` argument.\n\nDiscovery via entry point is particularly useful for commands that can operate\non multiple datasets. To select **all** datasets advertising a given entry point,\npass `\"_\"` (i.e. an underscore) as `DATASET` argument.\n\n\n## Workflow\n\nFor a full example of the `cldfbench` curation workflow, see [the tutorial](doc/tutorial.md).\n\n\n### Creating a skeleton for a new dataset directory\n\nA directory containing stub entries for a dataset can be created running\n\n```bash\ncldfbench new\n```\n\nThis will create the following layout (where `<ID>` stands for the chosen dataset ID):\n```\n<ID>/\n\u251c\u2500\u2500 cldf               # A stub directory for the CLDF data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 cldfbench_<ID>.py  # The python module, providing the Dataset subclass\n\u251c\u2500\u2500 etc                # A stub directory for the configuration data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 metadata.json      # The metadata provided to the subcommand serialized as JSON\n\u251c\u2500\u2500 raw                # A stub directory for the raw data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.cfg          # Python setup config, providing defaults for test integration\n\u251c\u2500\u2500 setup.py           # Python setup file, making the dataset \"installable\" \n\u251c\u2500\u2500 test.py            # The python code to run for dataset validation\n\u2514\u2500\u2500 .travis.yml        # Integrate the validation with Travis-CI\n```\n\n\n### Implementing CLDF creation\n\n`cldfbench` provides tools to make CLDF creation simple. Still, each dataset is\ndifferent, and so each dataset will have to provide its own custom code to do so.\nThis custom code goes into the `cmd_makecldf` method of the `Dataset` subclass in\nthe dataset's python module.\n\nTypically, this code will make use of one or more\n[`cldfbench.CLDFSpec`](src/cldfbench/cldf.py) instances, which describes what kind of CLDF to create. A `CLDFSpec` also gives access to a\n[`cldfbench.CLDFWriter`](src/cldfbench/cldf.py) instance, which wraps a `pycldf.Dataset`.\n\nThe main interfaces to these objects are\n- `cldfbench.Dataset.cldf_specs`: a method returning specifications of all CLDF datasets\n  that are created by the dataset,\n- `cldfbench.Dataset.cldf_writer`: a method returning an initialized `CLDFWriter` \n  associated with a particular `CLDFSpec`.\n\n`cldfbench` supports several scenarios of CLDF creation:\n- The typical use case is turning raw data into a single CLDF dataset. This would\n  require instantiating one `CLDFWriter` writer in the `cmd_makecldf` method, and\n  the defaults of `CLDFSpec` will probably be ok. Since this is the most common and\n  simplest case, it is supported with some extra \"sugar\": The initialized `CLDFWriter`\n  is available as `args.writer` when `cmd_makecldf` is called.\n- But it is also possible to create multiple CLDF datasets:\n  - For a dataset containing both, lexical and typological data, it may be appropriate\n    to create a `\u1e80ordlist` and a `StructureDataset`. To do so, one would have to\n    call `cldf_writer` twice, passing in an approriate `CLDFSpec`. Note that if\n    both CLDF datasets are created in the same directory, they can share the\n    `LanguageTable` - but would have to specify distinct file names for the\n    `ParameterTable`, passing distinct values to `CLDFSpec.data_fnames`.\n  - When creating multiple datasets of the same CLDF module, e.g. to split a large  dataset into smaller chunks, care must be taken to also disambiguate the name\n    of the metadata file, passing distinct values to `CLDFSpec.metadata_fname`.\n\nWhen creating CLDF, it is also often useful to have standard reference catalogs\naccessible, in particular Glottolog. See the section on [Catalogs](#catalogs) for\na description of how this is supported by `cldfbench`.\n\n\n### Catalogs\n\nLinking data to reference catalogs is a major goal of CLDF dataset, thus `cldfbench`\nprovides tools to make catalog access and maintenance easier. Catalog data must be\naccessible in local clones of the data repository. `cldfbench` provides commands\n- `catconfig` to create the clones and make them known through a configuration file,\n- `catinfo` to get an overview of the installed catalogs and their versions,\n- `catupdate` to update local clones from the upstream repositories.\n\n\n### Curating a dataset on GitHub\n\nOne of the design goals of CLDF was to specify a data format that plays well with\nversion control. Thus, it's natural - and actually recommended - to curate a CLDF\ndataset in a version controled repository. The most popular way to do this in a\ncollaborative fashion is by using a [git](https://git-scm.com/) repository hosted on \n[GitHub](https://github.com).\n\nThe directory layout supported by `cldfbench` caters to this use case in several ways:\n- Each directory contains a file `README.md`, which will be rendered as human readable\n  description when browsing the repository at GitHub.\n- The file `.travis.yml` contains the configuration for hooking up a repository with\n  [Travis CI](https://www.travis-ci.org/), to provide continuous consistency checking\n  of the data.\n\n\n### Archiving a dataset with Zenodo\n\nCurating a dataset on GitHub also provides a simple way to archiving and publishing\nreleased versions of the data. You can hook up your repository with [Zenodo](https://zenodo.org) (following [this guide](https://guides.github.com/activities/citable-code/)). Then, Zenodo will pick up any released package, assign a DOI to it, archive it and\nmake it accessible in the long-term.\n\nSome notes:\n- Hook-up with Zenodo requires the repository to be public (not private).\n- You should consider using an institutional account on GitHub and Zenodo to associate the repository with. Currently, only the user account registering a repository on Zenodo can change any metadata of releases lateron.\n- Once released and archived with Zenodo, it's a good idea to add the DOI assigned by Zenodo to the release description on GitHub.\n- To make sure a release is picked up by Zenodo, the version number must start with a letter, e.g. \"v1.0\" - **not** \"1.0\".\n\nThus, with a setup as described here, you can make sure you create [FAIR data](https://en.wikipedia.org/wiki/FAIR_data).\n\n\n## Extending `cldfbench`\n\n`cldfbench` can be extended or built-upon in various ways - typically by customizing\ncore functionality in new python packages. To support particular types of raw data,\n you might want a custom `Dataset` class, or to support a particular type of CLDF data,\n  you would customize `CLDFWriter`.\n\nIn addition to extending `cldfbench` using the standard methods of object-oriented\nprogramming, there are two more ways of extending `cldfbench`:\n\n\n### Commands\n\nA python package (or a dataset) can provide additional subcommands to be run from `cldfbench`.\nFor more info see the [`commands.README`](src/cldfbench/commands/README.md).\n\n\n### Custom dataset templates\n\nA python package can provide alternative dataset templates to be run with `cldfbench new`.\nSuch templates are implemented by\n- a subclass of `cldfbench.Template`,\n- which is advertised using an entry point `cldfbench.scaffold`:\n\n```python\n    entry_points={\n        'cldfbench.scaffold': [\n            'template_name=mypackage.scaffold:DerivedTemplate',\n        ],\n    },\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/cldf/cldfbench", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "cldfbench", "package_url": "https://pypi.org/project/cldfbench/", "platform": "any", "project_url": "https://pypi.org/project/cldfbench/", "project_urls": {"Homepage": "https://github.com/cldf/cldfbench"}, "release_url": "https://pypi.org/project/cldfbench/1.2.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Python library implementing a CLDF workbench", "version": "1.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>cldfbench</h1>\n<p>Tooling to create CLDF datasets from existing data</p>\n<p><a href=\"https://travis-ci.org/cldf/cldfbench\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2f5245883a23ec299dc4e99f547f22b7bab51b4c/68747470733a2f2f7472617669732d63692e6f72672f636c64662f636c646662656e63682e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/cldf/cldfbench\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ecf8041b1189fd5e9cd571f8613fc458d74e2cbd/68747470733a2f2f636f6465636f762e696f2f67682f636c64662f636c646662656e63682f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://pypi.org/project/cldfbench\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5e18b8b97bffbac0b982bf725df12348681d7f1/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f636c646662656e63682e737667\"></a></p>\n<h2>Overview</h2>\n<p>This package provides tools to curate cross-linguistic data, with the goal of\npackaging it as <a href=\"https://cldf.clld.org\" rel=\"nofollow\">CLDF</a> datasets.</p>\n<p>In particular, it supports a workflow where</p>\n<ul>\n<li>\"raw\" source data is downloaded to a <code>raw/</code> subdirectory,</li>\n<li>and subsequently converted to one or more CLDF datasets in a <code>cldf/</code> subdirectory, with the help of\n<ul>\n<li>configuration data in a <code>etc/</code> directory and</li>\n<li>custom Python code (a subclass of <a href=\"src/cldfbench/dataset.py\" rel=\"nofollow\"><code>cldfbench.Dataset</code></a> which implements the workflow actions).</li>\n</ul>\n</li>\n</ul>\n<p>This workflow is supported via</p>\n<ul>\n<li>a commandline interface <code>cldfbench</code> which calls the workflow actions as <a href=\"src/cldfbench/commands\" rel=\"nofollow\">subcommands</a>,</li>\n<li>a <code>cldfbench.Dataset</code> base class, which must be overwritten in a custom module\nto hook custom code into the workflow.</li>\n</ul>\n<p>With this workflow and the separation of the data into three directories we want\nto provide a workbench for transparently deriving CLDF data from data that has been\npublished before. In particular we want to delineate clearly</p>\n<ul>\n<li>what's part of the original or source data (<code>raw</code>),</li>\n<li>what kind of information is added (<code>etc</code>)</li>\n<li>to the derived data (<code>cldf</code>).</li>\n</ul>\n<h2>Install</h2>\n<p><code>cldfbench</code> can be installed via <code>pip</code> - preferably in a\n<a href=\"https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/\" rel=\"nofollow\">virtual environment</a> - running</p>\n<pre>pip install cldfbench<span class=\"o\">[</span>excel<span class=\"o\">]</span>\n</pre>\n<p>Note: The <code>[excel]</code> extra specification will also install support for reading spreadsheet data.</p>\n<h2>The command line interface <code>cldfbench</code></h2>\n<p>Installing the python package will also install a command <code>cldfbench</code> available on\nthe command line:</p>\n<pre>$ cldfbench -h\nusage: cldfbench <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>--log-level LOG_LEVEL<span class=\"o\">]</span> COMMAND ...\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  --log-level LOG_LEVEL\n                        log level <span class=\"o\">[</span>ERROR<span class=\"p\">|</span>WARN<span class=\"p\">|</span>INFO<span class=\"p\">|</span>DEBUG<span class=\"o\">]</span> <span class=\"o\">(</span>default: <span class=\"m\">20</span><span class=\"o\">)</span>\n\navailable commands:\n  Run <span class=\"s2\">\"COMAMND -h\"</span> to get <span class=\"nb\">help</span> <span class=\"k\">for</span> a specific command.\n\n  COMMAND\n    check               Run generic CLDF checks\n    ...\n</pre>\n<p>As shown above, run <code>cldfbench -h</code> to get help, and <code>cldfbench COMMAND -h</code> to get\nhelp on individual subcommands, e.g. <code>cldfbench new -h</code> to read about the usage\nof the <code>new</code> subcommand.</p>\n<h3>Dataset discovery</h3>\n<p>Most <code>cldfbench</code> commands operate on an existing dataset (unlike <code>new</code>, which\ncreates a new one). Datasets can be discovered in two ways:</p>\n<ol>\n<li>\n<p>Via the python module (i.e. the <code>*.py</code> file, containing the <code>Dataset</code> subclass).\nTo use this mode of discovery, pass the path to the python module\nas <code>DATASET</code> argument, when required by a command.</p>\n</li>\n<li>\n<p>Via <a href=\"https://packaging.python.org/specifications/entry-points/\" rel=\"nofollow\">entry point</a> and\ndataset ID. To use this mode, specify the name of the entry point as value of\nthe <code>--entry-point</code> option (or use the default name <code>cldfbench.dataset</code>) and\nthe <code>Dataset.id</code> as <code>DATASET</code> argument.</p>\n</li>\n</ol>\n<p>Discovery via entry point is particularly useful for commands that can operate\non multiple datasets. To select <strong>all</strong> datasets advertising a given entry point,\npass <code>\"_\"</code> (i.e. an underscore) as <code>DATASET</code> argument.</p>\n<h2>Workflow</h2>\n<p>For a full example of the <code>cldfbench</code> curation workflow, see <a href=\"doc/tutorial.md\" rel=\"nofollow\">the tutorial</a>.</p>\n<h3>Creating a skeleton for a new dataset directory</h3>\n<p>A directory containing stub entries for a dataset can be created running</p>\n<pre>cldfbench new\n</pre>\n<p>This will create the following layout (where <code>&lt;ID&gt;</code> stands for the chosen dataset ID):</p>\n<pre><code>&lt;ID&gt;/\n\u251c\u2500\u2500 cldf               # A stub directory for the CLDF data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 cldfbench_&lt;ID&gt;.py  # The python module, providing the Dataset subclass\n\u251c\u2500\u2500 etc                # A stub directory for the configuration data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 metadata.json      # The metadata provided to the subcommand serialized as JSON\n\u251c\u2500\u2500 raw                # A stub directory for the raw data\n\u2502\u00a0\u00a0 \u2514\u2500\u2500 README.md\n\u251c\u2500\u2500 setup.cfg          # Python setup config, providing defaults for test integration\n\u251c\u2500\u2500 setup.py           # Python setup file, making the dataset \"installable\" \n\u251c\u2500\u2500 test.py            # The python code to run for dataset validation\n\u2514\u2500\u2500 .travis.yml        # Integrate the validation with Travis-CI\n</code></pre>\n<h3>Implementing CLDF creation</h3>\n<p><code>cldfbench</code> provides tools to make CLDF creation simple. Still, each dataset is\ndifferent, and so each dataset will have to provide its own custom code to do so.\nThis custom code goes into the <code>cmd_makecldf</code> method of the <code>Dataset</code> subclass in\nthe dataset's python module.</p>\n<p>Typically, this code will make use of one or more\n<a href=\"src/cldfbench/cldf.py\" rel=\"nofollow\"><code>cldfbench.CLDFSpec</code></a> instances, which describes what kind of CLDF to create. A <code>CLDFSpec</code> also gives access to a\n<a href=\"src/cldfbench/cldf.py\" rel=\"nofollow\"><code>cldfbench.CLDFWriter</code></a> instance, which wraps a <code>pycldf.Dataset</code>.</p>\n<p>The main interfaces to these objects are</p>\n<ul>\n<li><code>cldfbench.Dataset.cldf_specs</code>: a method returning specifications of all CLDF datasets\nthat are created by the dataset,</li>\n<li><code>cldfbench.Dataset.cldf_writer</code>: a method returning an initialized <code>CLDFWriter</code>\nassociated with a particular <code>CLDFSpec</code>.</li>\n</ul>\n<p><code>cldfbench</code> supports several scenarios of CLDF creation:</p>\n<ul>\n<li>The typical use case is turning raw data into a single CLDF dataset. This would\nrequire instantiating one <code>CLDFWriter</code> writer in the <code>cmd_makecldf</code> method, and\nthe defaults of <code>CLDFSpec</code> will probably be ok. Since this is the most common and\nsimplest case, it is supported with some extra \"sugar\": The initialized <code>CLDFWriter</code>\nis available as <code>args.writer</code> when <code>cmd_makecldf</code> is called.</li>\n<li>But it is also possible to create multiple CLDF datasets:\n<ul>\n<li>For a dataset containing both, lexical and typological data, it may be appropriate\nto create a <code>\u1e80ordlist</code> and a <code>StructureDataset</code>. To do so, one would have to\ncall <code>cldf_writer</code> twice, passing in an approriate <code>CLDFSpec</code>. Note that if\nboth CLDF datasets are created in the same directory, they can share the\n<code>LanguageTable</code> - but would have to specify distinct file names for the\n<code>ParameterTable</code>, passing distinct values to <code>CLDFSpec.data_fnames</code>.</li>\n<li>When creating multiple datasets of the same CLDF module, e.g. to split a large  dataset into smaller chunks, care must be taken to also disambiguate the name\nof the metadata file, passing distinct values to <code>CLDFSpec.metadata_fname</code>.</li>\n</ul>\n</li>\n</ul>\n<p>When creating CLDF, it is also often useful to have standard reference catalogs\naccessible, in particular Glottolog. See the section on <a href=\"#catalogs\" rel=\"nofollow\">Catalogs</a> for\na description of how this is supported by <code>cldfbench</code>.</p>\n<h3>Catalogs</h3>\n<p>Linking data to reference catalogs is a major goal of CLDF dataset, thus <code>cldfbench</code>\nprovides tools to make catalog access and maintenance easier. Catalog data must be\naccessible in local clones of the data repository. <code>cldfbench</code> provides commands</p>\n<ul>\n<li><code>catconfig</code> to create the clones and make them known through a configuration file,</li>\n<li><code>catinfo</code> to get an overview of the installed catalogs and their versions,</li>\n<li><code>catupdate</code> to update local clones from the upstream repositories.</li>\n</ul>\n<h3>Curating a dataset on GitHub</h3>\n<p>One of the design goals of CLDF was to specify a data format that plays well with\nversion control. Thus, it's natural - and actually recommended - to curate a CLDF\ndataset in a version controled repository. The most popular way to do this in a\ncollaborative fashion is by using a <a href=\"https://git-scm.com/\" rel=\"nofollow\">git</a> repository hosted on\n<a href=\"https://github.com\" rel=\"nofollow\">GitHub</a>.</p>\n<p>The directory layout supported by <code>cldfbench</code> caters to this use case in several ways:</p>\n<ul>\n<li>Each directory contains a file <code>README.md</code>, which will be rendered as human readable\ndescription when browsing the repository at GitHub.</li>\n<li>The file <code>.travis.yml</code> contains the configuration for hooking up a repository with\n<a href=\"https://www.travis-ci.org/\" rel=\"nofollow\">Travis CI</a>, to provide continuous consistency checking\nof the data.</li>\n</ul>\n<h3>Archiving a dataset with Zenodo</h3>\n<p>Curating a dataset on GitHub also provides a simple way to archiving and publishing\nreleased versions of the data. You can hook up your repository with <a href=\"https://zenodo.org\" rel=\"nofollow\">Zenodo</a> (following <a href=\"https://guides.github.com/activities/citable-code/\" rel=\"nofollow\">this guide</a>). Then, Zenodo will pick up any released package, assign a DOI to it, archive it and\nmake it accessible in the long-term.</p>\n<p>Some notes:</p>\n<ul>\n<li>Hook-up with Zenodo requires the repository to be public (not private).</li>\n<li>You should consider using an institutional account on GitHub and Zenodo to associate the repository with. Currently, only the user account registering a repository on Zenodo can change any metadata of releases lateron.</li>\n<li>Once released and archived with Zenodo, it's a good idea to add the DOI assigned by Zenodo to the release description on GitHub.</li>\n<li>To make sure a release is picked up by Zenodo, the version number must start with a letter, e.g. \"v1.0\" - <strong>not</strong> \"1.0\".</li>\n</ul>\n<p>Thus, with a setup as described here, you can make sure you create <a href=\"https://en.wikipedia.org/wiki/FAIR_data\" rel=\"nofollow\">FAIR data</a>.</p>\n<h2>Extending <code>cldfbench</code></h2>\n<p><code>cldfbench</code> can be extended or built-upon in various ways - typically by customizing\ncore functionality in new python packages. To support particular types of raw data,\nyou might want a custom <code>Dataset</code> class, or to support a particular type of CLDF data,\nyou would customize <code>CLDFWriter</code>.</p>\n<p>In addition to extending <code>cldfbench</code> using the standard methods of object-oriented\nprogramming, there are two more ways of extending <code>cldfbench</code>:</p>\n<h3>Commands</h3>\n<p>A python package (or a dataset) can provide additional subcommands to be run from <code>cldfbench</code>.\nFor more info see the <a href=\"src/cldfbench/commands/README.md\" rel=\"nofollow\"><code>commands.README</code></a>.</p>\n<h3>Custom dataset templates</h3>\n<p>A python package can provide alternative dataset templates to be run with <code>cldfbench new</code>.\nSuch templates are implemented by</p>\n<ul>\n<li>a subclass of <code>cldfbench.Template</code>,</li>\n<li>which is advertised using an entry point <code>cldfbench.scaffold</code>:</li>\n</ul>\n<pre>    <span class=\"n\">entry_points</span><span class=\"o\">=</span><span class=\"p\">{</span>\n        <span class=\"s1\">'cldfbench.scaffold'</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n            <span class=\"s1\">'template_name=mypackage.scaffold:DerivedTemplate'</span><span class=\"p\">,</span>\n        <span class=\"p\">],</span>\n    <span class=\"p\">},</span>\n</pre>\n\n          </div>"}, "last_serial": 6894230, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "50ad98a2e49ac176c4a182ca0deea942", "sha256": "fc9555f88c1a973c91289443ed3465a213bcf5cac1ea1226c42c03262835fa64"}, "downloads": -1, "filename": "cldfbench-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "50ad98a2e49ac176c4a182ca0deea942", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 15710, "upload_time": "2019-10-05T08:54:22", "upload_time_iso_8601": "2019-10-05T08:54:22.291990Z", "url": "https://files.pythonhosted.org/packages/a3/4c/f969f58843541ba6ff63c28fd26ea7fe448ec699665a1ed260329d24a74e/cldfbench-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cfc27f6d34c11f44e35a08dae9290b6f", "sha256": "586a1b53dcad44e6687773787cc94adc798841d16abda82192e444e5db9d8096"}, "downloads": -1, "filename": "cldfbench-0.1.0.tar.gz", "has_sig": false, "md5_digest": "cfc27f6d34c11f44e35a08dae9290b6f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 12443, "upload_time": "2019-10-05T08:54:16", "upload_time_iso_8601": "2019-10-05T08:54:16.955731Z", "url": "https://files.pythonhosted.org/packages/37/28/cbbe3c3e65e468cc95963bd6b3cca183d673130c577b56103607a405eace/cldfbench-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "c8ddac7b5d01cf5f26caa3cd2baeba62", "sha256": "f89868a27bf87a24f00429b22322933c090fcc2f4713044844fe1d8d615b925d"}, "downloads": -1, "filename": "cldfbench-0.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c8ddac7b5d01cf5f26caa3cd2baeba62", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 23058, "upload_time": "2019-10-10T18:41:23", "upload_time_iso_8601": "2019-10-10T18:41:23.545633Z", "url": "https://files.pythonhosted.org/packages/e2/28/e46d9a494ff1684ef20557972ce73f3fbb9299ff5b35c2ace2f272795324/cldfbench-0.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e8ba39efb6af93a6d6455cfcf52528d4", "sha256": "9ab3e77c83e7887807c07b0395e95dd0877e5ffdb88303333f537f64f62624eb"}, "downloads": -1, "filename": "cldfbench-0.2.0.tar.gz", "has_sig": false, "md5_digest": "e8ba39efb6af93a6d6455cfcf52528d4", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 17657, "upload_time": "2019-10-10T18:41:19", "upload_time_iso_8601": "2019-10-10T18:41:19.423452Z", "url": "https://files.pythonhosted.org/packages/b5/9a/529e20f713d97bdc1b3cc2685ce35e884b56a8ad504d885e9c4e9a71905e/cldfbench-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "09fcca957f5b7eaba4686992dae171f2", "sha256": "16f38254cc197a84576f43a58f4a8c165165bbe93d15d570fe6f6e68a3dd81f0"}, "downloads": -1, "filename": "cldfbench-0.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "09fcca957f5b7eaba4686992dae171f2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 30967, "upload_time": "2019-10-17T14:38:29", "upload_time_iso_8601": "2019-10-17T14:38:29.674796Z", "url": "https://files.pythonhosted.org/packages/e0/f9/1000dab28eee7dcc9977b6627577754cb1fa877ebfd39a6c518f70e06369/cldfbench-0.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "07e5f89bcc16fd55ef968a99c5d54fe7", "sha256": "74a83c508c011aa7360943c77f3626e4615c8f969c53b6a12dbc0357ac9238a6"}, "downloads": -1, "filename": "cldfbench-0.3.0.tar.gz", "has_sig": false, "md5_digest": "07e5f89bcc16fd55ef968a99c5d54fe7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 23400, "upload_time": "2019-10-17T14:38:24", "upload_time_iso_8601": "2019-10-17T14:38:24.154789Z", "url": "https://files.pythonhosted.org/packages/2d/c5/7a848f845f1c3c28f088cebd760cc199dfb1b9afa5d22b608a060230e011/cldfbench-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "1fc5f8710220f91cdda5f2a72fb485b2", "sha256": "5d91676adb2221411835a25e67bdd4c4de7a39db5c2b2e178b59df0419b16db4"}, "downloads": -1, "filename": "cldfbench-0.4.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1fc5f8710220f91cdda5f2a72fb485b2", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 34492, "upload_time": "2019-10-22T09:11:06", "upload_time_iso_8601": "2019-10-22T09:11:06.682994Z", "url": "https://files.pythonhosted.org/packages/86/39/859f3b073af30b3d9606d71d24b1a8f2277d8263852014c2db68aed0a453/cldfbench-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "931d2a9b9420384163f8837762999704", "sha256": "c4a06804794be09d4c2bc14231a322988b31c603a379ab9bb399cb9576225f52"}, "downloads": -1, "filename": "cldfbench-0.4.0.tar.gz", "has_sig": false, "md5_digest": "931d2a9b9420384163f8837762999704", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25477, "upload_time": "2019-10-22T09:11:00", "upload_time_iso_8601": "2019-10-22T09:11:00.742779Z", "url": "https://files.pythonhosted.org/packages/6c/a5/661231421811560049b76b04e5e063bb2021e383817bf74181c073c91e3d/cldfbench-0.4.0.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "dbe3112c24724b59371516e45ad001d9", "sha256": "2d45237eaebcbd11288edec708dc19d7d61bbed746b8d6b4a53073d77834a1dd"}, "downloads": -1, "filename": "cldfbench-0.5.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "dbe3112c24724b59371516e45ad001d9", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 34560, "upload_time": "2019-10-23T14:59:43", "upload_time_iso_8601": "2019-10-23T14:59:43.832972Z", "url": "https://files.pythonhosted.org/packages/59/5b/e9313bb1b88da7e52c3a3c436d50e7329e1a46f98aff7b4de44324569063/cldfbench-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1df33d6e76610f66e4c6e6874b178147", "sha256": "4b252a66d943a177eb2377a9a1548d6617f7152035236f64eea557e9cbfc62af"}, "downloads": -1, "filename": "cldfbench-0.5.0.tar.gz", "has_sig": false, "md5_digest": "1df33d6e76610f66e4c6e6874b178147", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25513, "upload_time": "2019-10-23T14:59:38", "upload_time_iso_8601": "2019-10-23T14:59:38.606385Z", "url": "https://files.pythonhosted.org/packages/c8/f0/47bba70d81cf1f801f0b0f8ad762813844390b41be383b5f3159958ddd7d/cldfbench-0.5.0.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "ea6e50b26997107963220bf0e880dd8e", "sha256": "0b20a0a7aae45bec97ad4c54d95c4d9948af5e822816615906c7007d8804fa07"}, "downloads": -1, "filename": "cldfbench-0.6.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "ea6e50b26997107963220bf0e880dd8e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 34605, "upload_time": "2019-10-24T08:34:55", "upload_time_iso_8601": "2019-10-24T08:34:55.034745Z", "url": "https://files.pythonhosted.org/packages/8c/35/b1a90d8f646a05b0e9c975b19eea7eea14d5ae47dd4dbf22c76bae99dab6/cldfbench-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f6a1a055ff415a8d851a19190910400f", "sha256": "e07877497692f10697234a971a7aafe187dc5e5649c0281c4cfbf4c3effb8299"}, "downloads": -1, "filename": "cldfbench-0.6.0.tar.gz", "has_sig": false, "md5_digest": "f6a1a055ff415a8d851a19190910400f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 25540, "upload_time": "2019-10-24T08:34:50", "upload_time_iso_8601": "2019-10-24T08:34:50.905462Z", "url": "https://files.pythonhosted.org/packages/b8/e4/0f510e01d710a921f552a96aee0eb0ed9288c25f29b42856c0887359f4a8/cldfbench-0.6.0.tar.gz", "yanked": false}], "1.0.0": [{"comment_text": "", "digests": {"md5": "218778b81306dbac110a33356a4b62a3", "sha256": "dcbcbc9be47e5be5d92cf5215909d9e66cf22e1ab17cc78af6aee83271723d40"}, "downloads": -1, "filename": "cldfbench-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "218778b81306dbac110a33356a4b62a3", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 35224, "upload_time": "2019-10-25T06:18:27", "upload_time_iso_8601": "2019-10-25T06:18:27.639299Z", "url": "https://files.pythonhosted.org/packages/2d/06/1cb5350fc3ac5e178d98670eb3b42beac78cea2c1cac3d8f7bd1813c9f82/cldfbench-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b518094cf2d70509749cf8c2da28f69b", "sha256": "b9bffbce0f0aecd4f9af5cff246e58aa75ae987b2906a5d5424b4fce28627fc7"}, "downloads": -1, "filename": "cldfbench-1.0.0.tar.gz", "has_sig": false, "md5_digest": "b518094cf2d70509749cf8c2da28f69b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 26274, "upload_time": "2019-10-25T06:18:21", "upload_time_iso_8601": "2019-10-25T06:18:21.099179Z", "url": "https://files.pythonhosted.org/packages/0e/22/18f1abec336c6c996eac51ab45aebf42d382fe8b1facaae2d8671442d040/cldfbench-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "283705719a83e30e6e481293afdfc59e", "sha256": "5ebfb09ba518358c6a1953d5f1050fe9729302b7b8faef6981e1a38bee555675"}, "downloads": -1, "filename": "cldfbench-1.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "283705719a83e30e6e481293afdfc59e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 36502, "upload_time": "2019-11-26T13:01:47", "upload_time_iso_8601": "2019-11-26T13:01:47.471508Z", "url": "https://files.pythonhosted.org/packages/01/5d/67af62a68ea18631a5160fb5d794d092d254acd0afaae712f6074bfc2d05/cldfbench-1.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "818031cde40489f61e2a5bd634fc6cfa", "sha256": "8503c6cf03a4d7fa9895fe347713342d390dc3aa2072b3a1d1fdc6e25cbf5e78"}, "downloads": -1, "filename": "cldfbench-1.0.1.tar.gz", "has_sig": false, "md5_digest": "818031cde40489f61e2a5bd634fc6cfa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27311, "upload_time": "2019-11-26T13:01:43", "upload_time_iso_8601": "2019-11-26T13:01:43.988112Z", "url": "https://files.pythonhosted.org/packages/62/62/51986e6b9a2d17715187055a22c43f43590f7461d75030446489a7282c5c/cldfbench-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "3b08685aab28ea7e6c8743fa6839de3f", "sha256": "0e40c0e464b575d735d65550e6e0463c6cafd19e7571af2a90d20eb3c8e35d17"}, "downloads": -1, "filename": "cldfbench-1.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3b08685aab28ea7e6c8743fa6839de3f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 36499, "upload_time": "2020-01-13T11:49:29", "upload_time_iso_8601": "2020-01-13T11:49:29.113451Z", "url": "https://files.pythonhosted.org/packages/2e/2b/1e1dd42b2792b2dc1e8051ee65198298113547547623eedea9513720e8d9/cldfbench-1.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "896b4f4bacf9e611e3280ed801b37333", "sha256": "b5b3ae17ba95d27b57cf916ed692a6fe18b67ea46eba57040fc37afe6db25107"}, "downloads": -1, "filename": "cldfbench-1.0.2.tar.gz", "has_sig": false, "md5_digest": "896b4f4bacf9e611e3280ed801b37333", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27334, "upload_time": "2020-01-13T11:49:24", "upload_time_iso_8601": "2020-01-13T11:49:24.596445Z", "url": "https://files.pythonhosted.org/packages/af/d7/325e133bdaefd319927c65b4e1776acf81feb38d2f7e3548fd4767a8cd5b/cldfbench-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "b4ea1cf0e48257905824b8728243e326", "sha256": "fadfb35f80bf064aaf717b31218c3441fcd38f03f3b5b88be5767da977bba88a"}, "downloads": -1, "filename": "cldfbench-1.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "b4ea1cf0e48257905824b8728243e326", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 36598, "upload_time": "2020-03-07T15:13:29", "upload_time_iso_8601": "2020-03-07T15:13:29.589879Z", "url": "https://files.pythonhosted.org/packages/3b/75/cde7c4c21218b60ca046e70cf4d94bf3c3f8aa24b369847cdef952bd76b1/cldfbench-1.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "73fbb0153bf20fe4f20dd339b84455c8", "sha256": "45cb9226904dc577dc31701d584d34f667e241f1f03142f0b561129274139fb7"}, "downloads": -1, "filename": "cldfbench-1.1.0.tar.gz", "has_sig": false, "md5_digest": "73fbb0153bf20fe4f20dd339b84455c8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 27402, "upload_time": "2020-03-07T15:13:24", "upload_time_iso_8601": "2020-03-07T15:13:24.505589Z", "url": "https://files.pythonhosted.org/packages/5c/fd/853bf7ee3b59051c916d7332e49d2ade02e3d9fefa444d25a27cc021e8a4/cldfbench-1.1.0.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "9407316a2c59e1d7fc62ba53d2b0bd15", "sha256": "93c92bec4925ac65b1db47af6076d44a3397e5bd3db5668e31e1b16ef2df1ca5"}, "downloads": -1, "filename": "cldfbench-1.2.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9407316a2c59e1d7fc62ba53d2b0bd15", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 37805, "upload_time": "2020-03-10T12:36:27", "upload_time_iso_8601": "2020-03-10T12:36:27.027026Z", "url": "https://files.pythonhosted.org/packages/99/72/c8b2dca5c54d31bc33a1af4a09c5741d3bc54f8aec566a7220c76454eb5d/cldfbench-1.2.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea6324cfb168279045ad27fe712342ff", "sha256": "90cc58b02ea4982d9121a6d1ef65e38d4d5ef9d9c4757e9a2170421ac4767518"}, "downloads": -1, "filename": "cldfbench-1.2.0.tar.gz", "has_sig": false, "md5_digest": "ea6324cfb168279045ad27fe712342ff", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28219, "upload_time": "2020-03-10T12:36:22", "upload_time_iso_8601": "2020-03-10T12:36:22.893011Z", "url": "https://files.pythonhosted.org/packages/77/e2/c13772d81f16eb97b225c492c8a7878b0d5ea3d11988a6e21e3629fd0454/cldfbench-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "1cfff990424cfeb0e11b428c94c62096", "sha256": "6351f5d0d0eaa13e307d4c1ad01878e91277d36f6129188b86ea4a1995f12664"}, "downloads": -1, "filename": "cldfbench-1.2.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1cfff990424cfeb0e11b428c94c62096", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 37837, "upload_time": "2020-03-13T07:34:36", "upload_time_iso_8601": "2020-03-13T07:34:36.116231Z", "url": "https://files.pythonhosted.org/packages/f2/0b/4fcd15d057ce0ee3268a4fd51dfb729eee9995ec816a49154a4c0dff137f/cldfbench-1.2.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8731bb31107fd098d1a98a9f547513c5", "sha256": "31e3c94fa8362fe27bedc0368868f15233df7878bf3c1ca883ffd91e50a4a4a6"}, "downloads": -1, "filename": "cldfbench-1.2.1.tar.gz", "has_sig": false, "md5_digest": "8731bb31107fd098d1a98a9f547513c5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28250, "upload_time": "2020-03-13T07:34:31", "upload_time_iso_8601": "2020-03-13T07:34:31.178192Z", "url": "https://files.pythonhosted.org/packages/b2/73/b8ad80aa765146a67b1156cc12cd705f549b03300987fba42cab7da6c873/cldfbench-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "f93e6abc2a5e309d03a2e721fbc6bfe6", "sha256": "81d9198798eaae809ffd0d50e5cb64ee6f6057a400929b1a549e16097aea4228"}, "downloads": -1, "filename": "cldfbench-1.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f93e6abc2a5e309d03a2e721fbc6bfe6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 38048, "upload_time": "2020-03-27T07:31:53", "upload_time_iso_8601": "2020-03-27T07:31:53.139847Z", "url": "https://files.pythonhosted.org/packages/ed/1b/baf04a8ccb0312e698ad9e45c5ac7e8b50da78fd60df3b7283d7c18a2431/cldfbench-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad7002feb3e3142b134ed3689b8062b7", "sha256": "7b6473593c252aa531ab73f511e6b5e42411f103e2418ada3d1804ba08cca1dd"}, "downloads": -1, "filename": "cldfbench-1.2.2.tar.gz", "has_sig": false, "md5_digest": "ad7002feb3e3142b134ed3689b8062b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28420, "upload_time": "2020-03-27T07:31:38", "upload_time_iso_8601": "2020-03-27T07:31:38.560218Z", "url": "https://files.pythonhosted.org/packages/ab/92/00e93b77d9460d3fc7193fa5d2cfc1fb26ff8fa25686af1c5fc7bbd0f626/cldfbench-1.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f93e6abc2a5e309d03a2e721fbc6bfe6", "sha256": "81d9198798eaae809ffd0d50e5cb64ee6f6057a400929b1a549e16097aea4228"}, "downloads": -1, "filename": "cldfbench-1.2.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f93e6abc2a5e309d03a2e721fbc6bfe6", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.5", "size": 38048, "upload_time": "2020-03-27T07:31:53", "upload_time_iso_8601": "2020-03-27T07:31:53.139847Z", "url": "https://files.pythonhosted.org/packages/ed/1b/baf04a8ccb0312e698ad9e45c5ac7e8b50da78fd60df3b7283d7c18a2431/cldfbench-1.2.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ad7002feb3e3142b134ed3689b8062b7", "sha256": "7b6473593c252aa531ab73f511e6b5e42411f103e2418ada3d1804ba08cca1dd"}, "downloads": -1, "filename": "cldfbench-1.2.2.tar.gz", "has_sig": false, "md5_digest": "ad7002feb3e3142b134ed3689b8062b7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 28420, "upload_time": "2020-03-27T07:31:38", "upload_time_iso_8601": "2020-03-27T07:31:38.560218Z", "url": "https://files.pythonhosted.org/packages/ab/92/00e93b77d9460d3fc7193fa5d2cfc1fb26ff8fa25686af1c5fc7bbd0f626/cldfbench-1.2.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:19:06 2020"}