{"info": {"author": "David O'Connor", "author_email": "david.alan.oconnor@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "Saturn: Simple functions for tz-aware datetimes\n===============================================\n\nPerforms common operations on datetimes with clean syntax, acting as a thin wrapper\nfor datetime and pytz. Force timezone-aware\ndatetimes. All operations are top-level functions: No dealing with\nmethods from multiple modules and objects.\n\nThere are several existing modules designed to improve Python's datetimes.\nHere's why Saturn is different:\n\n - Uses native datetime types for compatibility and speed\n - Only one import required\n - Clean, intuitive syntax and function names.  No boilerplate.\n - Operates exclusively with top-level functions; no sorting through methods\n   from multiple objects and modules\n - Raises an exception if a func is given a tz-naive datetime as input. All datetime\n   outputs are timezone-aware, with an easily-set TZ, defaulting to UTC.\n\nThis project doesn't tackle the deeper problems with Python's datetimes that can arise\nfrom timezone and localization conflicts. It aims to make working with dateimtes easier by providing a\nconcise, consistent, and expressive API; and preventing naive datetimes from entering your code.\n\nSaturn uses Pytz for timezones. Used as a dependency.:\n`Pytz website <https://pypi.python.org/pypi/pytz/>`_\nPytz is licensed under the MIT license.\n\n... and uses code from Arrow for string formatting and parsing. Not a dependency.:\n`Arrow website: <http://arrow.readthedocs.io/en/latest/>`_\nArrow is licensed under Apache 2.\n\nPython 2 is unsupported.\n\nIncluded functions\n------------------\n\n - datetime: Return a timezone-aware datetime.datetime object.  Created the same way as datetime.datetime,\n   with an optional 'tz' argument for a timezone string. Defaults to UTC.\n - time: Same concept as datetime.time; easily create a tz-aware time.\n - now: Find current utc time; timezone-aware.\n - range_dt: Iterate over datetimes, with a customizable interval. Similar to builtin range. Lazy.\n - fix_naive: Convert a timezone-naive datetime to an aware one.\n - move_tz: Change a datetime from one timezone to another.\n - combine: Similar to datetime.datetime.combine, but always tz-aware.\n - to_str: Similar to datetime.datetime.strftime, but with a cleaner format string, from Arrow.\n - from_str: Similar to datetime.datetime.strptime, but with a cleaner format string, from Arrow.\n   Returns date, datetime, or time objects as needed.\n - to_iso: Wrapper for datetime.datetime's isoformat() method, as a function.\n - from_iso: Create a datetime from an isoformat string.\n - to_epoch: Wrapper for datetime.datetime's timestamp method, as a function.\n - from_epoch: Wrapper for datetime.datetime's from_timestamp method, as a function.\n - split: Split a datetime into date and time components.  Useful because datetime's .time() method strips timezone info.\n - add, subtract: Add or subtract to/from a datetime.\n - overlaps: Deterine if two date/time/datetime ranges overlap.\n - timedelta, date, and today are included as wrappers for their respective datetime/date classes, so you don't need to import datetime.\n\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install saturn\n\n\nDocumentation\n-------------\n\nCreate a timezone-aware datetime. If you don't specify a 'tz' argument, it defaults\nto UTC. Works for times too:\n\n.. code-block:: python\n\n    saturn.datetime(2016, 1, 1, 16, tz='US/Eastern')\n    # datetime.datetime(2016, 1, 1, 16, 0, tzinfo=<DstTzInfo 'US/Eastern' EST-1 day, 19:00:00 STD>)\n\n    saturn.datetime(2016, 1, 1, 16)\n    # datetime.datetime(2016, 1, 1, 16, 0, tzinfo=<UTC>)\n\n    saturn.time(11, 29, 30)\n    # datetime.time(11, 29, 30, tzinfo=<UTC>)\n\n\nMake a tz-naive datetime aware:\n\n.. code-block:: python\n\n    naive = datetime.datetime(2016, 1, 1)\n    saturn.fix_naive(naive, \"Pacific/Midway\")\n    # datetime.datetime(2016, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Pacific/Midway' SST-1 day, 13:00:00 STD>)\n\n\nFind the current datetime, in UTC:\n\n.. code-block:: python\n\n    saturn.now()\n    # datetime.datetime(2016, 4, 29, 20, 36, 53, 257753, tzinfo=<UTC>)\n\n\nMove from one timezone to another:\n\n.. code-block:: python\n\n    dt = saturn.datetime(2016,1,1, tz='Asia/Gaza')\n    # datetime.datetime(2016, 1, 1, 0, 0, tzinfo=<DstTzInfo 'Asia/Gaza' EET+2:00:00 STD>)\n\n    saturn.move_tz(dt, 'Europe/Vatican')\n    # datetime.datetime(2015, 12, 31, 23, 0, tzinfo=<DstTzInfo 'Europe/Vatican' CET+1:00:00 STD>\n\n\nCombine a date and time into a timezone-aware datetime. If the time is already aware, the 'tz' argument is ignored:\n\n.. code-block:: python\n\n    date, time = datetime.date(2016, 3, 2), datetime.time(16, 30)\n\n    saturn.combine(date, time)\n    # datetime.datetime(2016, 3, 2, 16, 30, tzinfo=<UTC>)\n\n    saturn.combine(date, time, tz='Europe/London')\n    # datetime.datetime(2016, 3, 2, 16, 30, tzinfo=<DstTzInfo 'Europe/London' GMT0:00:00 STD>)\n\n\nSplit a datetime into date and time components; keeps tzinfo, unlike datetime.time().\n\n.. code-block:: python\n\n    dt = saturn.datetime(2016, 3, 2, 16, 30, 1, 500, tz='US/Mountain')\n    date, time = saturn.split(dt)\n    # datetime.date(2016, 3, 2)\n    # datetime.time(16, 30, 1, 500, tzinfo=<DstTzInfo 'US/Mountain' MST-1 day, 17:00:00 STD>)\n\n\nIterate through a range of datetimes. Valid intervals are 'week', 'month', 'day'\n'hour', 'minute', 'second', 'millisecond', and 'microsecond':\n\n.. code-block:: python\n\n    start, end = saturn.datetime(2016, 1, 2, 12, 30), saturn.datetime(2016, 1, 5, 12, 30)\n    for dt in saturn.range_dt(start, end, interval='day'):\n        print(dt)\n\n    # 2016-01-02 12:30:00+00:00\n    # 2016-01-03 12:30:00+00:00\n    # 2016-01-04 12:30:00+00:00\n\n    for dt in saturn.range_dt(start, end, 4, interval='hour'):\n        print(dt)\n\n    # 2016-01-02 12:30:00+00:00\n    # 2016-01-02 16:30:00+00:00\n    # 2016-01-02 20:30:00+00:00\n    ...\n    # 2016-01-05 00:30:00+00:00\n    # 2016-01-05 04:30:00+00:00\n    # 2016-01-05 08:30:00+00:00\n\n\nConvert a datetime to a string. Uses format from Arrow:\n\n.. code-block:: python\n\n    saturn.to_str(saturn.now(), 'YYYY-MM-DD hh:mm')\n    # '2016-04-29 03:30'\n\n\nConvert a string to a datetime. Uses format from Arrow. If the string includes a timezone, the optional tz argument is ignored:\n\n.. code-block:: python\n\n    saturn.from_str('2016-04-29 03:30', 'YYYY-MM-DD hh:mm')\n    # datetime.datetime(2016, 4, 29, 3, 30, tzinfo=<UTC>)\n\n    saturn.from_str('2016-04-29 03:30', 'YYYY-MM-DD hh:mm', tz='Africa/Cairo')\n    # datetime.datetime(2016, 4, 29, 3, 30, tzinfo=<DstTzInfo 'Africa/Cairo' EET+2:00:00 STD>)\n\n    saturn.from_str('1381685817', 'X')\n    # datetime.datetime(2013, 10, 13, 17, 36, 57, tzinfo=<UTC>)\n\n\nConvert a datetime to an ISO-8601 string or epoch:\n\n.. code-block:: python\n\n        saturn.to_iso(saturn.now())\n        # '2016-04-29T20:12:05.807558+00:00'\n\n        saturn.to_epoch(saturn.now())\n        # 1461960725.807558\n\n\nConvert an ISO-8601 string or epoch to a datetime:\n\n.. code-block:: python\n\n        saturn.from_iso('2016-04-29T20:12:05.000000+00:00')\n        # datetime.datetime(2016, 4, 29, 20, 12, 05, tzinfo=<UTC>)\n\n        saturn.from_epoch(1461960725)\n        # datetime.datetime(2016, 4, 29, 21, 12, 5, tzinfo=<UTC>)\n\n\nFor details on to_str and from_str syntax, please reference `Arrow's formatting guide <http://arrow.readthedocs.io/en/latest/#tokens>`_.\n\nCheck if a range of times overlaps.\n\n.. code-block:: python\n\n        start1 = saturn.datetime(2018, 1, 1, 9)\n        end1 = saturn.datetime(2018, 1, 1, 12)\n        start2 = saturn.datetime(2018, 1, 1, 11)\n        end2 = saturn.datetime(2018, 1, 1, 17)\n\n        saturn.overlaps(start1, end1, start2, end2)\n        # True\n        saturn.overlaps(start1, end1, saturn.datetime(2018, 1, 1, 13), end2)\n        # False\n\n\nFunction input and output:\n--------------------------\n\n.. code-block:: python\n\n    datetime(year: float, month: float, day: float, hour: float=0, minute: float=0,\n             second: float=0, microsecond: float=0, tzinfo=None, tz: str='UTC') -> datetime.datetime\n\n    time(hour: float, minute: float=0, second: float=0,\n         microsecond: float=0, tzinfo=None, tz: str='UTC') -> datetime.time\n\n    now() -> datetime.datetime\n\n    combine(_date: datetime.date, _time: _datetime.time, tz: str='UTC') -> datetime.datetime\n\n    fix_naive(dt: TimeOrDatetime, tz: str='UTC') -> datetime.datetime\n\n    to_str(dt: DateOrDatetime, str_format: str) -> str\n\n    from_str(dt_str: str, str_format: str, tz: str='UTC') -> DateOrTimeOrDatetime\n\n    to_iso(dt: DateOrDatetime) -> str\n\n    from_iso(iso_str: str, tz: str='UTC') -> datetime.datetime\n\n    to_epoch(dt: DateOrDatetime) -> float:\n\n    from_epoch(epoch: float, tz: str='UTC') -> _datetime.datetime:\n\n    move_tz(dt: datetime.datetime, tz: str) -> datetime.datetime\n\n    add(dt: datetime.datetime, days: float=0, seconds: float=0, microseconds: float=0,\n        milliseconds: float=0, minutes: float=0, hours: float=0, weeks: float=0) -> datetime.datetime\n\n    subtract(dt: datetime.datetime, days: float=0, seconds: float=0, microseconds: float=0,\n        milliseconds: float=0, minutes: float=0, hours: float=0, weeks: float=0) -> datetime.datetime\n\n    range_dt(start: DateOrDatetime, end: DateOrDatetime, step: int=1,\n             interval: str='day') -> Iterator[datetime.datetime]\n\n    split(dt: datetime.datetime) -> Tuple[_datetime.date, _datetime.time]:\n\n    overlaps(start1: DateOrTimeOrDatetime, start2: DateOrTimeOrDatetime,\n             end1: DateOrTimeOrDatetime, end2: DateOrTimeOrDatetime) -> bool:\n\n\n\nSome syntax we're dodging:\n--------------------------\n\n\n.. code-block:: python\n\n        pytz.timezone('Europe/Berlin').localize(datetime.datetime(1985, 2, 1, 13, 21))\n\n        arrow.Arrow(1999, 9, 9, 9, 30, tzinfo=dateutil.tz.gettz('US/Eastern'))\n\n        pytz.timezone('US/Mountain').localize(datetime.datetime.combine(date, time))\n\n        aware_dt.astimezone(pytz.timezone('US/Pacific'))\n\n        aware_time = datetime.time(aware_dt.hour, aware_dt.minute, aware_dt.second,\n            aware_dt.microsecond, aware_dt.tzinfo)\n\n\nReplaced by:\n------------\n\n\n.. code-block:: python\n\n        saturn.datetime(1985, 2, 1, 13, 21, tz='Europe/Berlin')\n\n        saturn.datetime(1999, 9, 9, 9, 30, tz='US/Eastern')\n\n        saturn.combine(date, time, 'US/Mountain')\n\n        saturn.move_tz(aware_dt, 'US/Pacific')\n\n        _, aware_time = saturn.split(aware_dt)\n\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/David-OConnor/saturn", "keywords": "datetime,pytz,timezone,tzinfo", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "Saturn", "package_url": "https://pypi.org/project/Saturn/", "platform": "", "project_url": "https://pypi.org/project/Saturn/", "project_urls": {"Homepage": "https://github.com/David-OConnor/saturn"}, "release_url": "https://pypi.org/project/Saturn/0.3.5/", "requires_dist": ["pytz (>=2016.3)"], "requires_python": "", "summary": "Simple functions for tz-aware datetimes.", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Performs common operations on datetimes with clean syntax, acting as a thin wrapper\nfor datetime and pytz. Force timezone-aware\ndatetimes. All operations are top-level functions: No dealing with\nmethods from multiple modules and objects.</p>\n<p>There are several existing modules designed to improve Python\u2019s datetimes.\nHere\u2019s why Saturn is different:</p>\n<blockquote>\n<ul>\n<li>Uses native datetime types for compatibility and speed</li>\n<li>Only one import required</li>\n<li>Clean, intuitive syntax and function names.  No boilerplate.</li>\n<li>Operates exclusively with top-level functions; no sorting through methods\nfrom multiple objects and modules</li>\n<li>Raises an exception if a func is given a tz-naive datetime as input. All datetime\noutputs are timezone-aware, with an easily-set TZ, defaulting to UTC.</li>\n</ul>\n</blockquote>\n<p>This project doesn\u2019t tackle the deeper problems with Python\u2019s datetimes that can arise\nfrom timezone and localization conflicts. It aims to make working with dateimtes easier by providing a\nconcise, consistent, and expressive API; and preventing naive datetimes from entering your code.</p>\n<p>Saturn uses Pytz for timezones. Used as a dependency.:\n<a href=\"https://pypi.python.org/pypi/pytz/\" rel=\"nofollow\">Pytz website</a>\nPytz is licensed under the MIT license.</p>\n<p>\u2026 and uses code from Arrow for string formatting and parsing. Not a dependency.:\n<a href=\"http://arrow.readthedocs.io/en/latest/\" rel=\"nofollow\">Arrow website:</a>\nArrow is licensed under Apache 2.</p>\n<p>Python 2 is unsupported.</p>\n<div id=\"included-functions\">\n<h2>Included functions</h2>\n<blockquote>\n<ul>\n<li>datetime: Return a timezone-aware datetime.datetime object.  Created the same way as datetime.datetime,\nwith an optional \u2018tz\u2019 argument for a timezone string. Defaults to UTC.</li>\n<li>time: Same concept as datetime.time; easily create a tz-aware time.</li>\n<li>now: Find current utc time; timezone-aware.</li>\n<li>range_dt: Iterate over datetimes, with a customizable interval. Similar to builtin range. Lazy.</li>\n<li>fix_naive: Convert a timezone-naive datetime to an aware one.</li>\n<li>move_tz: Change a datetime from one timezone to another.</li>\n<li>combine: Similar to datetime.datetime.combine, but always tz-aware.</li>\n<li>to_str: Similar to datetime.datetime.strftime, but with a cleaner format string, from Arrow.</li>\n<li>from_str: Similar to datetime.datetime.strptime, but with a cleaner format string, from Arrow.\nReturns date, datetime, or time objects as needed.</li>\n<li>to_iso: Wrapper for datetime.datetime\u2019s isoformat() method, as a function.</li>\n<li>from_iso: Create a datetime from an isoformat string.</li>\n<li>to_epoch: Wrapper for datetime.datetime\u2019s timestamp method, as a function.</li>\n<li>from_epoch: Wrapper for datetime.datetime\u2019s from_timestamp method, as a function.</li>\n<li>split: Split a datetime into date and time components.  Useful because datetime\u2019s .time() method strips timezone info.</li>\n<li>add, subtract: Add or subtract to/from a datetime.</li>\n<li>overlaps: Deterine if two date/time/datetime ranges overlap.</li>\n<li>timedelta, date, and today are included as wrappers for their respective datetime/date classes, so you don\u2019t need to import datetime.</li>\n</ul>\n</blockquote>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install saturn\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Create a timezone-aware datetime. If you don\u2019t specify a \u2018tz\u2019 argument, it defaults\nto UTC. Works for times too:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'US/Eastern'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 1, 1, 16, 0, tzinfo=&lt;DstTzInfo 'US/Eastern' EST-1 day, 19:00:00 STD&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 1, 1, 16, 0, tzinfo=&lt;UTC&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">,</span> <span class=\"mi\">29</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.time(11, 29, 30, tzinfo=&lt;UTC&gt;)</span>\n</pre>\n<p>Make a tz-naive datetime aware:</p>\n<pre><span class=\"n\">naive</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">fix_naive</span><span class=\"p\">(</span><span class=\"n\">naive</span><span class=\"p\">,</span> <span class=\"s2\">\"Pacific/Midway\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 1, 1, 0, 0, tzinfo=&lt;DstTzInfo 'Pacific/Midway' SST-1 day, 13:00:00 STD&gt;)</span>\n</pre>\n<p>Find the current datetime, in UTC:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">()</span>\n<span class=\"c1\"># datetime.datetime(2016, 4, 29, 20, 36, 53, 257753, tzinfo=&lt;UTC&gt;)</span>\n</pre>\n<p>Move from one timezone to another:</p>\n<pre><span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'Asia/Gaza'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 1, 1, 0, 0, tzinfo=&lt;DstTzInfo 'Asia/Gaza' EET+2:00:00 STD&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">move_tz</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">,</span> <span class=\"s1\">'Europe/Vatican'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2015, 12, 31, 23, 0, tzinfo=&lt;DstTzInfo 'Europe/Vatican' CET+1:00:00 STD&gt;</span>\n</pre>\n<p>Combine a date and time into a timezone-aware datetime. If the time is already aware, the \u2018tz\u2019 argument is ignored:</p>\n<pre><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 3, 2, 16, 30, tzinfo=&lt;UTC&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'Europe/London'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 3, 2, 16, 30, tzinfo=&lt;DstTzInfo 'Europe/London' GMT0:00:00 STD&gt;)</span>\n</pre>\n<p>Split a datetime into date and time components; keeps tzinfo, unlike datetime.time().</p>\n<pre><span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">16</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'US/Mountain'</span><span class=\"p\">)</span>\n<span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.date(2016, 3, 2)</span>\n<span class=\"c1\"># datetime.time(16, 30, 1, 500, tzinfo=&lt;DstTzInfo 'US/Mountain' MST-1 day, 17:00:00 STD&gt;)</span>\n</pre>\n<p>Iterate through a range of datetimes. Valid intervals are \u2018week\u2019, \u2018month\u2019, \u2018day\u2019\n\u2018hour\u2019, \u2018minute\u2019, \u2018second\u2019, \u2018millisecond\u2019, and \u2018microsecond\u2019:</p>\n<pre><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">),</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2016</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">dt</span> <span class=\"ow\">in</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">range_dt</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s1\">'day'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2016-01-02 12:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-03 12:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-04 12:30:00+00:00</span>\n\n<span class=\"k\">for</span> <span class=\"n\">dt</span> <span class=\"ow\">in</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">range_dt</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s1\">'hour'</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># 2016-01-02 12:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-02 16:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-02 20:30:00+00:00</span>\n<span class=\"o\">...</span>\n<span class=\"c1\"># 2016-01-05 00:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-05 04:30:00+00:00</span>\n<span class=\"c1\"># 2016-01-05 08:30:00+00:00</span>\n</pre>\n<p>Convert a datetime to a string. Uses format from Arrow:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">to_str</span><span class=\"p\">(</span><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">(),</span> <span class=\"s1\">'YYYY-MM-DD hh:mm'</span><span class=\"p\">)</span>\n<span class=\"c1\"># '2016-04-29 03:30'</span>\n</pre>\n<p>Convert a string to a datetime. Uses format from Arrow. If the string includes a timezone, the optional tz argument is ignored:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'2016-04-29 03:30'</span><span class=\"p\">,</span> <span class=\"s1\">'YYYY-MM-DD hh:mm'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 4, 29, 3, 30, tzinfo=&lt;UTC&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'2016-04-29 03:30'</span><span class=\"p\">,</span> <span class=\"s1\">'YYYY-MM-DD hh:mm'</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'Africa/Cairo'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 4, 29, 3, 30, tzinfo=&lt;DstTzInfo 'Africa/Cairo' EET+2:00:00 STD&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"s1\">'1381685817'</span><span class=\"p\">,</span> <span class=\"s1\">'X'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2013, 10, 13, 17, 36, 57, tzinfo=&lt;UTC&gt;)</span>\n</pre>\n<p>Convert a datetime to an ISO-8601 string or epoch:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">to_iso</span><span class=\"p\">(</span><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"c1\"># '2016-04-29T20:12:05.807558+00:00'</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">to_epoch</span><span class=\"p\">(</span><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">now</span><span class=\"p\">())</span>\n<span class=\"c1\"># 1461960725.807558</span>\n</pre>\n<p>Convert an ISO-8601 string or epoch to a datetime:</p>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">from_iso</span><span class=\"p\">(</span><span class=\"s1\">'2016-04-29T20:12:05.000000+00:00'</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 4, 29, 20, 12, 05, tzinfo=&lt;UTC&gt;)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">from_epoch</span><span class=\"p\">(</span><span class=\"mi\">1461960725</span><span class=\"p\">)</span>\n<span class=\"c1\"># datetime.datetime(2016, 4, 29, 21, 12, 5, tzinfo=&lt;UTC&gt;)</span>\n</pre>\n<p>For details on to_str and from_str syntax, please reference <a href=\"http://arrow.readthedocs.io/en/latest/#tokens\" rel=\"nofollow\">Arrow\u2019s formatting guide</a>.</p>\n<p>Check if a range of times overlaps.</p>\n<pre><span class=\"n\">start1</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">end1</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">12</span><span class=\"p\">)</span>\n<span class=\"n\">start2</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"n\">end2</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">17</span><span class=\"p\">)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">overlaps</span><span class=\"p\">(</span><span class=\"n\">start1</span><span class=\"p\">,</span> <span class=\"n\">end1</span><span class=\"p\">,</span> <span class=\"n\">start2</span><span class=\"p\">,</span> <span class=\"n\">end2</span><span class=\"p\">)</span>\n<span class=\"c1\"># True</span>\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">overlaps</span><span class=\"p\">(</span><span class=\"n\">start1</span><span class=\"p\">,</span> <span class=\"n\">end1</span><span class=\"p\">,</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2018</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">),</span> <span class=\"n\">end2</span><span class=\"p\">)</span>\n<span class=\"c1\"># False</span>\n</pre>\n</div>\n<div id=\"function-input-and-output\">\n<h2>Function input and output:</h2>\n<pre><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"n\">year</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">month</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">day</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n         <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">microsecond</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">time</span><span class=\"p\">(</span><span class=\"n\">hour</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">minute</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">second</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n     <span class=\"n\">microsecond</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span>\n\n<span class=\"n\">now</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">_date</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">_time</span><span class=\"p\">:</span> <span class=\"n\">_datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">fix_naive</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">TimeOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">to_str</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">DateOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">str_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">from_str</span><span class=\"p\">(</span><span class=\"n\">dt_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">str_format</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">DateOrTimeOrDatetime</span>\n\n<span class=\"n\">to_iso</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">DateOrDatetime</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span>\n\n<span class=\"n\">from_iso</span><span class=\"p\">(</span><span class=\"n\">iso_str</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">to_epoch</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">DateOrDatetime</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">float</span><span class=\"p\">:</span>\n\n<span class=\"n\">from_epoch</span><span class=\"p\">(</span><span class=\"n\">epoch</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'UTC'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">_datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">:</span>\n\n<span class=\"n\">move_tz</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">add</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">microseconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">milliseconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">weeks</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">subtract</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">,</span> <span class=\"n\">days</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">seconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">microseconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n    <span class=\"n\">milliseconds</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">minutes</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">hours</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">weeks</span><span class=\"p\">:</span> <span class=\"nb\">float</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span>\n\n<span class=\"n\">range_dt</span><span class=\"p\">(</span><span class=\"n\">start</span><span class=\"p\">:</span> <span class=\"n\">DateOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"p\">:</span> <span class=\"n\">DateOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">step</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n         <span class=\"n\">interval</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"o\">=</span><span class=\"s1\">'day'</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Iterator</span><span class=\"p\">[</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">]</span>\n\n<span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"p\">:</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Tuple</span><span class=\"p\">[</span><span class=\"n\">_datetime</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">_datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">]:</span>\n\n<span class=\"n\">overlaps</span><span class=\"p\">(</span><span class=\"n\">start1</span><span class=\"p\">:</span> <span class=\"n\">DateOrTimeOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">start2</span><span class=\"p\">:</span> <span class=\"n\">DateOrTimeOrDatetime</span><span class=\"p\">,</span>\n         <span class=\"n\">end1</span><span class=\"p\">:</span> <span class=\"n\">DateOrTimeOrDatetime</span><span class=\"p\">,</span> <span class=\"n\">end2</span><span class=\"p\">:</span> <span class=\"n\">DateOrTimeOrDatetime</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span><span class=\"p\">:</span>\n</pre>\n</div>\n<div id=\"some-syntax-we-re-dodging\">\n<h2>Some syntax we\u2019re dodging:</h2>\n<pre><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'Europe/Berlin'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1985</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">))</span>\n\n<span class=\"n\">arrow</span><span class=\"o\">.</span><span class=\"n\">Arrow</span><span class=\"p\">(</span><span class=\"mi\">1999</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">tzinfo</span><span class=\"o\">=</span><span class=\"n\">dateutil</span><span class=\"o\">.</span><span class=\"n\">tz</span><span class=\"o\">.</span><span class=\"n\">gettz</span><span class=\"p\">(</span><span class=\"s1\">'US/Eastern'</span><span class=\"p\">))</span>\n\n<span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'US/Mountain'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">localize</span><span class=\"p\">(</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">))</span>\n\n<span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">astimezone</span><span class=\"p\">(</span><span class=\"n\">pytz</span><span class=\"o\">.</span><span class=\"n\">timezone</span><span class=\"p\">(</span><span class=\"s1\">'US/Pacific'</span><span class=\"p\">))</span>\n\n<span class=\"n\">aware_time</span> <span class=\"o\">=</span> <span class=\"n\">datetime</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(</span><span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">hour</span><span class=\"p\">,</span> <span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">minute</span><span class=\"p\">,</span> <span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">second</span><span class=\"p\">,</span>\n    <span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">microsecond</span><span class=\"p\">,</span> <span class=\"n\">aware_dt</span><span class=\"o\">.</span><span class=\"n\">tzinfo</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"replaced-by\">\n<h2>Replaced by:</h2>\n<pre><span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1985</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">13</span><span class=\"p\">,</span> <span class=\"mi\">21</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'Europe/Berlin'</span><span class=\"p\">)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">1999</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">9</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">tz</span><span class=\"o\">=</span><span class=\"s1\">'US/Eastern'</span><span class=\"p\">)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">combine</span><span class=\"p\">(</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"s1\">'US/Mountain'</span><span class=\"p\">)</span>\n\n<span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">move_tz</span><span class=\"p\">(</span><span class=\"n\">aware_dt</span><span class=\"p\">,</span> <span class=\"s1\">'US/Pacific'</span><span class=\"p\">)</span>\n\n<span class=\"n\">_</span><span class=\"p\">,</span> <span class=\"n\">aware_time</span> <span class=\"o\">=</span> <span class=\"n\">saturn</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"n\">aware_dt</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3846044, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bf7ef492890b6e1acfeabc5d02ed84c6", "sha256": "1556a35fa94b28843aeb754a5bcb3b3a179f6b9d2ffd144b2d9398f6098570c2"}, "downloads": -1, "filename": "Saturn-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bf7ef492890b6e1acfeabc5d02ed84c6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14003, "upload_time": "2016-05-04T15:51:41", "upload_time_iso_8601": "2016-05-04T15:51:41.130252Z", "url": "https://files.pythonhosted.org/packages/b7/be/9f55f7b7def9ed1a07caa95539145b1ca418d335546166afd95d98de37b2/Saturn-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "53f3f9693e104cb8087c47bc97037366", "sha256": "eaacbb68d43efb294db039d53155d8c3224e58c81dc5c3b97e6b08d766ad7fc3"}, "downloads": -1, "filename": "Saturn-0.1.zip", "has_sig": false, "md5_digest": "53f3f9693e104cb8087c47bc97037366", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16852, "upload_time": "2016-05-04T15:51:51", "upload_time_iso_8601": "2016-05-04T15:51:51.298684Z", "url": "https://files.pythonhosted.org/packages/2a/c5/af77f1fed3108bf91e5023583337742e2bb7916ab466be878801451515eb/Saturn-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "dd92c8333fa74ea39694baf0726586e9", "sha256": "6cb607c3750ba5d00600a9ef08ffe131968dc4251ea9dee132357b6a27060a6a"}, "downloads": -1, "filename": "Saturn-0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "dd92c8333fa74ea39694baf0726586e9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15770, "upload_time": "2016-08-27T19:08:08", "upload_time_iso_8601": "2016-08-27T19:08:08.544914Z", "url": "https://files.pythonhosted.org/packages/c5/fb/80f95d17e9ebb7a4eb9747e282313823c1aed16b1c96467122127aca779f/Saturn-0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "abda77f952aea303a2f474d727219c85", "sha256": "76548157d0db289b4202e50401cd601a784d19f45b12a2ba6c6a7a695ce01061"}, "downloads": -1, "filename": "Saturn-0.2.tar.gz", "has_sig": false, "md5_digest": "abda77f952aea303a2f474d727219c85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11695, "upload_time": "2016-08-27T19:08:11", "upload_time_iso_8601": "2016-08-27T19:08:11.315670Z", "url": "https://files.pythonhosted.org/packages/79/15/11cbecfc55dc4c8c6f22507bb93e314de8052298143e4cf1a4cbc7132362/Saturn-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "2bbb04de840509225e2d8bd77437eb3b", "sha256": "895a8411f982834a70d088cd90d5ab71d69154ab3caa83121d2e209d4a82656c"}, "downloads": -1, "filename": "Saturn-0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "2bbb04de840509225e2d8bd77437eb3b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16124, "upload_time": "2016-10-27T20:19:36", "upload_time_iso_8601": "2016-10-27T20:19:36.719280Z", "url": "https://files.pythonhosted.org/packages/07/04/f12991e163c60548dce30a2cd8468d0379b58b04842c85565394cc20414b/Saturn-0.3-py3-none-any.whl", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7eb9fe8e8716b455868c2a70ab4ce107", "sha256": "4ea827429d05152a8eb7df28a32416ea9dd11a6e96ad131f4f2488342cab9d6e"}, "downloads": -1, "filename": "Saturn-0.3.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7eb9fe8e8716b455868c2a70ab4ce107", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16159, "upload_time": "2017-05-18T18:25:40", "upload_time_iso_8601": "2017-05-18T18:25:40.227955Z", "url": "https://files.pythonhosted.org/packages/25/bc/19f0246cc2fabeb75f8b506d49f7c09f0540ee0dae8bacad715177947c8f/Saturn-0.3.1-py3-none-any.whl", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "2acef2d5925ae4c6ba6b9da6234c5898", "sha256": "496e4d32181cd9199b3b57440cc883af344734189da33be1dd2f7ac5fda35447"}, "downloads": -1, "filename": "Saturn-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2acef2d5925ae4c6ba6b9da6234c5898", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16744, "upload_time": "2017-05-21T22:28:58", "upload_time_iso_8601": "2017-05-21T22:28:58.571910Z", "url": "https://files.pythonhosted.org/packages/07/b2/18e2076abe81bbc04220d87a45ad3c55803b5c44b55685a987d684bce620/Saturn-0.3.2-py3-none-any.whl", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "1640334be3c8a34121b53e1438e15a35", "sha256": "c89ec913445b36a9ac3b06864cc15e39339eff245cf159d0df7329a64423da3a"}, "downloads": -1, "filename": "Saturn-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "1640334be3c8a34121b53e1438e15a35", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16751, "upload_time": "2017-05-22T18:09:23", "upload_time_iso_8601": "2017-05-22T18:09:23.722854Z", "url": "https://files.pythonhosted.org/packages/12/3f/433274b54a6706db8603aabd02cd771581c7d53d560c27e96ecefd67a12b/Saturn-0.3.3-py3-none-any.whl", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "894ebef03f590fb428c9b07426542636", "sha256": "55bdf4726f7d376a3461b8075a17c0703ed4327d4164b7e2faab7a0944d726ea"}, "downloads": -1, "filename": "Saturn-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "894ebef03f590fb428c9b07426542636", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16750, "upload_time": "2017-05-22T18:19:30", "upload_time_iso_8601": "2017-05-22T18:19:30.565605Z", "url": "https://files.pythonhosted.org/packages/9a/3f/dba4832afea1f9afd97390daa48f42fbd662a44c990d9f9bf222dcc25c9d/Saturn-0.3.4-py3-none-any.whl", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "4491b157a96b5ce3a10b70955f9783d7", "sha256": "b366d2a87de08078846c079c28768443ebed320d98efe3a5a9bbad160d057019"}, "downloads": -1, "filename": "Saturn-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4491b157a96b5ce3a10b70955f9783d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16800, "upload_time": "2018-05-09T00:46:46", "upload_time_iso_8601": "2018-05-09T00:46:46.772506Z", "url": "https://files.pythonhosted.org/packages/97/d7/3b015cea2afb0c68130a0dc1e56f6990efd03b270516a656fddd22e99fcc/Saturn-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b6e72a8bae571327984d142805476bb", "sha256": "1c84ba05fdd9e36e0c1d505ec84bc9038cbd35fa7fe1e67c310b528f5788ba3f"}, "downloads": -1, "filename": "Saturn-0.3.5.tar.gz", "has_sig": false, "md5_digest": "8b6e72a8bae571327984d142805476bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15171, "upload_time": "2018-05-09T00:46:48", "upload_time_iso_8601": "2018-05-09T00:46:48.164799Z", "url": "https://files.pythonhosted.org/packages/09/fa/4e6d0e54da07db07fc6f3124d2ec4f312f5906072424b2921ce2928fa7fa/Saturn-0.3.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4491b157a96b5ce3a10b70955f9783d7", "sha256": "b366d2a87de08078846c079c28768443ebed320d98efe3a5a9bbad160d057019"}, "downloads": -1, "filename": "Saturn-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "4491b157a96b5ce3a10b70955f9783d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16800, "upload_time": "2018-05-09T00:46:46", "upload_time_iso_8601": "2018-05-09T00:46:46.772506Z", "url": "https://files.pythonhosted.org/packages/97/d7/3b015cea2afb0c68130a0dc1e56f6990efd03b270516a656fddd22e99fcc/Saturn-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8b6e72a8bae571327984d142805476bb", "sha256": "1c84ba05fdd9e36e0c1d505ec84bc9038cbd35fa7fe1e67c310b528f5788ba3f"}, "downloads": -1, "filename": "Saturn-0.3.5.tar.gz", "has_sig": false, "md5_digest": "8b6e72a8bae571327984d142805476bb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15171, "upload_time": "2018-05-09T00:46:48", "upload_time_iso_8601": "2018-05-09T00:46:48.164799Z", "url": "https://files.pythonhosted.org/packages/09/fa/4e6d0e54da07db07fc6f3124d2ec4f312f5906072424b2921ce2928fa7fa/Saturn-0.3.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:58:26 2020"}