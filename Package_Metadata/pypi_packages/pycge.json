{"info": {"author": "H\u00e5vard B\u00f8nes", "author_email": "haavard.bones@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3"], "description": "# PyCGE\n\npycge - or python colored game engine - is a 2d game engine made in python.\n\n## Why pycge?\n\npycge is a game engine that uses colors and run perfectly in your terminal. This can be used by developers that need a more interactive system. Pycge can also be used as a menu system.\n\n# DOCS\n## installation\n\npycge will be available at [pip](https://pip.pypa.io/en/stable/)\n\n# usage\n\nfirst, let's create an empty game:\n```\nimport pycge.pycge as pcg\n\ndimention = [10, 10]\n\ngame = pcg.Game(dimention)\ngame.start()\n```\nfeel free to experiment with variables and values.\n\nNow let's add a character.\nThis is achieved by adding two things:\na layer and an actor.\n\na layer is a plane with the same dimention as the game board, if two actors with hitbox disabled collide on the same layer one will be overwritten, therefore it is important to have every actor that might collide on seperate layers.\na good layer system would be:\n- background layer (a layer of static actors that you know wont be moved)\n- player layer (a layer with the player which can roam around freely and interact with other actors on different layers)\n- opponent layer (this layer can be used to hold other actors that necessarily wont be controlled by the player)\n\nFor now let's just keep it to one layer,\nlet's call it the player layer.\n```\nplayerLayer = pcg.Layer(dimention)\ngame.addLayer(playerLayer, 5)\n```\ndimention is the variable we defined above containing the dimentions for the game board.\n\n5 is the index of the layer. A layer with higher index will be prioritized over another layer with lower index. Since we only have one layer this value isn't important for now\n\n\nif you run your pycge game now you wont notice any difference, that's because you can't see empty layers.\nso let's add something to the layer\nlet's add a player.\n\n```\nplayer = pcg.Actor(\"blue\")\nplayer.place(4, 5, playerLayer)\n```\nThe first line defines an actor.\nthe argument defines the color of the player. Here's a list of valid colors:\n- grey\n- red\n- green\n- yellow\n- blue\n- magenta\n- cyan\n- white\n\nline #2 places the actor on x=4, y=5 and the layer is playerLayer.\n\nIf you now run our game you will see our blue player on the screen. But you can't control the player.\n\nSo let's map keys to make our player move.\n\nFirst of all we need two more imports\n```\nimport pycge.key as key\nimport pycge.examples as examples\n```\n\nthe top import is a library that handles key structures\nthe bottom import contains examples (that is fully replacable) such as a class that moves the character up.\n\n```\nkeyMapping = key.KeyStruct()\n\nkeyMapping.add(\"w\", examples.up, player)\nkeyMapping.add(\"a\", examples.left, player)\nkeyMapping.add(\"s\", examples.down, player)\nkeyMapping.add(\"d\", examples.right, player)\n```\n- the first argument is a str of one letter which is the key activating this function\n- the second argument is a class returning a list of new x and y pos for this function. (if you are going to create your own class you have to have a var called self.val which is a list of two elements; x and y)\n- the third and final argument is deciding what actor it should bind with that key.\n\nWe are not done yet.\nAll we need to do now is to tell the game to use this structure.\nThis is easy, modify the `game.start()` to something like this:\n`game.start(keyMapping)`\n\nThat should be it!\nif you have followed the tutorial correctly should have a movable character which you can color and a background you can resize.\n\nfull code:\n```\nimport pycge.pycge as pcg\nimport pycge.key as key\nimport pycge.examples as examples\n\ndimention = [10, 10]\n\ngame = pcg.Game(dimention)\n\nplayerLayer = pcg.Layer(dimention)\ngame.addLayer(playerLayer, 5)\n\nplayer = pcg.Actor(\"blue\")\nplayer.place(4, 5, playerLayer)\n\nkeyMapping = key.KeyStruct()\n\nkeyMapping.add(\"w\", examples.up, player)\nkeyMapping.add(\"a\", examples.left, player)\nkeyMapping.add(\"s\", examples.down, player)\nkeyMapping.add(\"d\", examples.right, player)\n\ngame.start(keyMapping)\n```\n\n### examples\n\n[racing cars example](https://pastebin.com/De39SY6a)\n\n# LICENSE\n\nremember to read the license:\n\"LICENSE\"\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/havbon/python-colored-game-engine", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pycge", "package_url": "https://pypi.org/project/pycge/", "platform": "", "project_url": "https://pypi.org/project/pycge/", "project_urls": {"Homepage": "https://github.com/havbon/python-colored-game-engine"}, "release_url": "https://pypi.org/project/pycge/0.1.1/", "requires_dist": null, "requires_python": ">=3.7", "summary": "A retro colored game engine for python.", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>PyCGE</h1>\n<p>pycge - or python colored game engine - is a 2d game engine made in python.</p>\n<h2>Why pycge?</h2>\n<p>pycge is a game engine that uses colors and run perfectly in your terminal. This can be used by developers that need a more interactive system. Pycge can also be used as a menu system.</p>\n<h1>DOCS</h1>\n<h2>installation</h2>\n<p>pycge will be available at <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a></p>\n<h1>usage</h1>\n<p>first, let's create an empty game:</p>\n<pre><code>import pycge.pycge as pcg\n\ndimention = [10, 10]\n\ngame = pcg.Game(dimention)\ngame.start()\n</code></pre>\n<p>feel free to experiment with variables and values.</p>\n<p>Now let's add a character.\nThis is achieved by adding two things:\na layer and an actor.</p>\n<p>a layer is a plane with the same dimention as the game board, if two actors with hitbox disabled collide on the same layer one will be overwritten, therefore it is important to have every actor that might collide on seperate layers.\na good layer system would be:</p>\n<ul>\n<li>background layer (a layer of static actors that you know wont be moved)</li>\n<li>player layer (a layer with the player which can roam around freely and interact with other actors on different layers)</li>\n<li>opponent layer (this layer can be used to hold other actors that necessarily wont be controlled by the player)</li>\n</ul>\n<p>For now let's just keep it to one layer,\nlet's call it the player layer.</p>\n<pre><code>playerLayer = pcg.Layer(dimention)\ngame.addLayer(playerLayer, 5)\n</code></pre>\n<p>dimention is the variable we defined above containing the dimentions for the game board.</p>\n<p>5 is the index of the layer. A layer with higher index will be prioritized over another layer with lower index. Since we only have one layer this value isn't important for now</p>\n<p>if you run your pycge game now you wont notice any difference, that's because you can't see empty layers.\nso let's add something to the layer\nlet's add a player.</p>\n<pre><code>player = pcg.Actor(\"blue\")\nplayer.place(4, 5, playerLayer)\n</code></pre>\n<p>The first line defines an actor.\nthe argument defines the color of the player. Here's a list of valid colors:</p>\n<ul>\n<li>grey</li>\n<li>red</li>\n<li>green</li>\n<li>yellow</li>\n<li>blue</li>\n<li>magenta</li>\n<li>cyan</li>\n<li>white</li>\n</ul>\n<p>line #2 places the actor on x=4, y=5 and the layer is playerLayer.</p>\n<p>If you now run our game you will see our blue player on the screen. But you can't control the player.</p>\n<p>So let's map keys to make our player move.</p>\n<p>First of all we need two more imports</p>\n<pre><code>import pycge.key as key\nimport pycge.examples as examples\n</code></pre>\n<p>the top import is a library that handles key structures\nthe bottom import contains examples (that is fully replacable) such as a class that moves the character up.</p>\n<pre><code>keyMapping = key.KeyStruct()\n\nkeyMapping.add(\"w\", examples.up, player)\nkeyMapping.add(\"a\", examples.left, player)\nkeyMapping.add(\"s\", examples.down, player)\nkeyMapping.add(\"d\", examples.right, player)\n</code></pre>\n<ul>\n<li>the first argument is a str of one letter which is the key activating this function</li>\n<li>the second argument is a class returning a list of new x and y pos for this function. (if you are going to create your own class you have to have a var called self.val which is a list of two elements; x and y)</li>\n<li>the third and final argument is deciding what actor it should bind with that key.</li>\n</ul>\n<p>We are not done yet.\nAll we need to do now is to tell the game to use this structure.\nThis is easy, modify the <code>game.start()</code> to something like this:\n<code>game.start(keyMapping)</code></p>\n<p>That should be it!\nif you have followed the tutorial correctly should have a movable character which you can color and a background you can resize.</p>\n<p>full code:</p>\n<pre><code>import pycge.pycge as pcg\nimport pycge.key as key\nimport pycge.examples as examples\n\ndimention = [10, 10]\n\ngame = pcg.Game(dimention)\n\nplayerLayer = pcg.Layer(dimention)\ngame.addLayer(playerLayer, 5)\n\nplayer = pcg.Actor(\"blue\")\nplayer.place(4, 5, playerLayer)\n\nkeyMapping = key.KeyStruct()\n\nkeyMapping.add(\"w\", examples.up, player)\nkeyMapping.add(\"a\", examples.left, player)\nkeyMapping.add(\"s\", examples.down, player)\nkeyMapping.add(\"d\", examples.right, player)\n\ngame.start(keyMapping)\n</code></pre>\n<h3>examples</h3>\n<p><a href=\"https://pastebin.com/De39SY6a\" rel=\"nofollow\">racing cars example</a></p>\n<h1>LICENSE</h1>\n<p>remember to read the license:\n\"LICENSE\"</p>\n\n          </div>"}, "last_serial": 6380692, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "b126a1e23547f7dcb25065d318bd62d7", "sha256": "4da7ce6040287b95d5bc8932e1db7f2d7810f225f94b3f247622326ef96e152f"}, "downloads": -1, "filename": "pycge-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b126a1e23547f7dcb25065d318bd62d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3611, "upload_time": "2019-12-31T20:55:00", "upload_time_iso_8601": "2019-12-31T20:55:00.884689Z", "url": "https://files.pythonhosted.org/packages/1f/d6/6ff3e1ba5b1e387d823410cb6c5786d61860071e66e965136b5e69ab0142/pycge-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e0b14b6778d0285a8875ca20fcfc345", "sha256": "a9b1421e066adbef927c149d03a133578b2b5a9b58df985122cc7b9177c8b834"}, "downloads": -1, "filename": "pycge-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5e0b14b6778d0285a8875ca20fcfc345", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3453, "upload_time": "2019-12-31T20:55:04", "upload_time_iso_8601": "2019-12-31T20:55:04.012398Z", "url": "https://files.pythonhosted.org/packages/3d/6f/47c297fcc2aabf05f2619918732bf68886075ac35cd9e57ec4bc84606b52/pycge-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b126a1e23547f7dcb25065d318bd62d7", "sha256": "4da7ce6040287b95d5bc8932e1db7f2d7810f225f94b3f247622326ef96e152f"}, "downloads": -1, "filename": "pycge-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b126a1e23547f7dcb25065d318bd62d7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 3611, "upload_time": "2019-12-31T20:55:00", "upload_time_iso_8601": "2019-12-31T20:55:00.884689Z", "url": "https://files.pythonhosted.org/packages/1f/d6/6ff3e1ba5b1e387d823410cb6c5786d61860071e66e965136b5e69ab0142/pycge-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5e0b14b6778d0285a8875ca20fcfc345", "sha256": "a9b1421e066adbef927c149d03a133578b2b5a9b58df985122cc7b9177c8b834"}, "downloads": -1, "filename": "pycge-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5e0b14b6778d0285a8875ca20fcfc345", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 3453, "upload_time": "2019-12-31T20:55:04", "upload_time_iso_8601": "2019-12-31T20:55:04.012398Z", "url": "https://files.pythonhosted.org/packages/3d/6f/47c297fcc2aabf05f2619918732bf68886075ac35cd9e57ec4bc84606b52/pycge-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:36 2020"}