{"info": {"author": "David Marx (original), typenil (fork)", "author_email": "code@typenil.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3 :: Only", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Utilities"], "description": "Python Pushshift.io API Wrapper (for comment/submission search)\n===============================================================\n.. image:: https://img.shields.io/badge/license-BSD--2-blue.svg\n   :target: https://github.com/typenil/pushshift.py/blob/master/LICENSE\n   :alt: License\n.. image:: https://api.dependabot.com/badges/status?host=github&repo=typenil/pushshift.py\n   :target: https://dependabot.com\n   :alt: Dependabot Status\n.. image:: https://travis-ci.org/typenil/pushshift.py.svg?branch=master\n   :target: https://travis-ci.org/typenil/pushshift.py\n   :alt: Build\n.. image:: https://api.codeclimate.com/v1/badges/6f6eb6ffd22841935b83/maintainability\n   :target: https://codeclimate.com/github/typenil/pushshift.py/maintainability\n   :alt: Maintainability\n.. image:: https://api.codeclimate.com/v1/badges/6f6eb6ffd22841935b83/test_coverage\n   :target: https://codeclimate.com/github/typenil/pushshift.py/test_coverage\n   :alt: Test Coverage\n\n\n\n.. _installation:\n\nInstallation\n------------\n\n.. code-block:: bash\n\n    pip install pushshift.py\n\nAt present, only python 3 is supported.\n\nDescription\n-----------\n\nA minimalist wrapper for searching public reddit comments/submissions via the pushshift.io API.\n\nPushshift is an extremely useful resource, but the API is poorly documented. As such, this API wrapper\nis currently designed to make it easy to pass pretty much any search parameter the user wants to try.\n\nAlthough it is not necessarily reflective of the current status of the API, you should\nattempt to familiarize yourself with the Pushshift API documentation to better understand\nwhat search arguments are likely to work.\n\n* `API Documentation on github <https://github.com/pushshift/api>`_\n* `/r/pushshift <https://www.reddit.com/r/pushshift/>`_\n\n\nFeatures\n--------\n\n* Handles rate limiting and exponential backoff subject to maximum retries and\n  maximum backoff limits. A minimum rate limit of 1 request per second is used\n  as a default per consultation with Pushshift's maintainer,\n  `/u/Stuck_in_the_matrix <https://www.reddit.com/u/Stuck_in_the_matrix>`_.\n* Handles paging of results when using supported sort options. At the moment, only ``created_utc``\n  sort types page properly. Returns all historical results for a given query by default.\n* Optionally handles incorporation of ``praw`` to fetch objects after getting ids from pushshift\n* If not using ``praw``, returns results in ``comment`` and ``submission`` objects whose\n  API is similar to the corresponding ``praw`` objects. Additionally, result objects have\n  an additional ``.d_`` attribute that offers dict access to the associated data attributes.\n* Optionally adds a ``created`` attribute which converts a comment/submission's ``created_utc``\n  timestamp to the user's local time. (may raise exceptions for users with certain timezone\n  settings).\n* Simple interface to pass query arguments to the API. The API is sparsely documented,\n  so it's often fruitful to just try an argument and see if it works.\n* Limited support for pushshift's ``aggs`` argument.\n* A ``stop_condition`` argument to make it simple to stop yielding results given arbitrary user-defined criteria\n\nWARNINGS\n--------\n\n* Non-default sorts (i.e. sorting by anything other than ``created_utc``) have limited support from\n  the pushshift.io API. As such, this project will raise an exception for any request that can't\n  provide reliably sorted and paged data.\n\n  Non-default sorts require a limit <= max_results_per_request (500 by default)\n\nDemo usage\n----------\n\n.. code-block:: python\n\n    from pushshift_py import PushshiftAPI\n\n    api = PushshiftAPI()\n\nOr to use pushshift search to fetch ids and then use praw to fetch objects:\n\n.. code-block:: python\n\n    import praw\n    from pushshift_py import PushshiftAPI\n\n    r = praw.Reddit(...)\n    api = PushshiftAPI(r)\n\n\n100 most recent submissions\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    # The `search_comments` and `search_submissions` methods return generator objects\n    gen = api.search_submissions(limit=100)\n    results = list(gen)\n\nFirst 10 submissions to /r/politics in 2017, filtering results to url/author/title/subreddit fields.\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe ``created_utc`` field will be added automatically (it's used for paging).\n\n.. code-block:: python\n\n    import datetime as dt\n\n    start_epoch=int(dt.datetime(2017, 1, 1).timestamp())\n\n    list(api.search_submissions(after=start_epoch,\n                                subreddit='politics',\n                                filter=['url','author', 'title', 'subreddit'],\n                                limit=10))\n\nTrying a search argument that doesn't actually work\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nAccording to the pushshift.io API documentation, we should be able to search submissions by url,\nbut (at the time of this writing) this doesn't actually work in practice.\nThe API should still respect the ``limit`` argument and possibly other supported arguments,\nbut no guarantees. If you find that an argument you have passed is not supported by the API,\nbest thing is to just remove it from the query and modify your api call to only utilize\nsupported arguments to mitigate risks from of unexpected behavior.\n\n.. code-block:: python\n\n    url = 'http://www.politico.com/story/2017/02/mike-flynn-russia-ties-investigation-235272'\n    url_results = list(api.search_submissions(url=url, limit=500))\n\n    len(url_results), any(r.url == url for r in url_results)\n    # 500, False\n\nAll AskReddit comments containing the text \"OP\"\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nUse the ``q`` parameter to search text. Omitting the ``limit`` parameter does a full\nhistorical search. Requests are performed in batches of size specified by the\n``max_results_per_request`` parameter (default=500). Omitting the \"max_reponse_cache\"\ntest in the demo below will return all results. Otherwise, this demo will perform two\nAPI requests returning 500 comments each. Alternatively, the generator can be queried for additional results.\n\n.. code-block:: python\n\n    gen = api.search_comments(q='OP', subreddit='askreddit')\n\n    max_response_cache = 1000\n    cache = []\n\n    for c in gen:\n        cache.append(c)\n\n        # Omit this test to actually return all results. Wouldn't recommend it though: could take a while, but you do you.\n        if len(cache) >= max_response_cache:\n            break\n\n    # If you really want to: pick up where we left off to get the rest of the results.\n    if False:\n        for c in gen:\n            cache.append(c)\n\nUsing the ``aggs`` argument to count comments mentioning trump each hour in past week\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nReplicating the example from the pushshift documentation:\n\nhttps://api.pushshift.io/reddit/search/comment/?q=trump&after=7d&aggs=created_utc&frequency=hour&size=0\n\nI haven't really experimented much with this functionality of the API, so I figured\nthe simplest way to support it would be to just disable most of the bells and whistles\nprovided by the API wrapper when the ``aggs`` argument is provided (i.e. paging, converting\nthe result to a namedtuple for dot notation attribute access).\n\n.. code-block:: python\n\n    api = PushshiftAPI()\n    gen = api.search_comments(q='trump',\n                              after='7d',\n                              aggs='created_utc',\n                              frequency='hour',\n                              size=0,\n                             )\n\n    result = next(gen)\n\nUsing the ``stop_condition`` argument to get the most recent submission by a bot account\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code-block:: python\n\n    gen = api.search_submissions(stop_condition=lambda x: 'bot' in x.author)\n\n    for subm in gen:\n        pass\n\n    print(subm.author)\n\n\nLicense\n-------\n\nPSAW's source is provided under the `Simplified BSD License\n<https://github.com/dmarx/psaw/master/LICENSE>`_.\n\n* Copyright (c), 2018, David Marx\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/typenil/pushshift.py", "keywords": "reddit api wrapper pushshift", "license": "Simplified BSD License", "maintainer": "", "maintainer_email": "", "name": "pushshift.py", "package_url": "https://pypi.org/project/pushshift.py/", "platform": "", "project_url": "https://pypi.org/project/pushshift.py/", "project_urls": {"Homepage": "https://github.com/typenil/pushshift.py"}, "release_url": "https://pypi.org/project/pushshift.py/0.1.2/", "requires_dist": ["requests"], "requires_python": ">=3", "summary": "Pushshift.io API Wrapper for reddit.com search endpoints", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://github.com/typenil/pushshift.py/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/db9fb5a236b18e4921b9431338795c140d30d233/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4253442d2d322d626c75652e737667\"></a>\n<a href=\"https://dependabot.com\" rel=\"nofollow\"><img alt=\"Dependabot Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cf9f4565d381cb1e6db21e0111dfb288eb9a83a/68747470733a2f2f6170692e646570656e6461626f742e636f6d2f6261646765732f7374617475733f686f73743d676974687562267265706f3d747970656e696c2f7075736873686966742e7079\"></a>\n<a href=\"https://travis-ci.org/typenil/pushshift.py\" rel=\"nofollow\"><img alt=\"Build\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/04200c5cf3be73575bafa3a933e39aa00601d1a9/68747470733a2f2f7472617669732d63692e6f72672f747970656e696c2f7075736873686966742e70792e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codeclimate.com/github/typenil/pushshift.py/maintainability\" rel=\"nofollow\"><img alt=\"Maintainability\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/22c61e65ae8cca4995add49f13759ba9d6eeb545/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f36663665623666666432323834313933356238332f6d61696e7461696e6162696c697479\"></a>\n<a href=\"https://codeclimate.com/github/typenil/pushshift.py/test_coverage\" rel=\"nofollow\"><img alt=\"Test Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1cdb1370fccf9aac1719074ce75867e745e43ddc/68747470733a2f2f6170692e636f6465636c696d6174652e636f6d2f76312f6261646765732f36663665623666666432323834313933356238332f746573745f636f766572616765\"></a>\n<div id=\"id1\">\n<span id=\"installation\"></span><h2>Installation</h2>\n<pre>pip install pushshift.py\n</pre>\n<p>At present, only python 3 is supported.</p>\n</div>\n<div id=\"description\">\n<h2>Description</h2>\n<p>A minimalist wrapper for searching public reddit comments/submissions via the pushshift.io API.</p>\n<p>Pushshift is an extremely useful resource, but the API is poorly documented. As such, this API wrapper\nis currently designed to make it easy to pass pretty much any search parameter the user wants to try.</p>\n<p>Although it is not necessarily reflective of the current status of the API, you should\nattempt to familiarize yourself with the Pushshift API documentation to better understand\nwhat search arguments are likely to work.</p>\n<ul>\n<li><a href=\"https://github.com/pushshift/api\" rel=\"nofollow\">API Documentation on github</a></li>\n<li><a href=\"https://www.reddit.com/r/pushshift/\" rel=\"nofollow\">/r/pushshift</a></li>\n</ul>\n</div>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>Handles rate limiting and exponential backoff subject to maximum retries and\nmaximum backoff limits. A minimum rate limit of 1 request per second is used\nas a default per consultation with Pushshift\u2019s maintainer,\n<a href=\"https://www.reddit.com/u/Stuck_in_the_matrix\" rel=\"nofollow\">/u/Stuck_in_the_matrix</a>.</li>\n<li>Handles paging of results when using supported sort options. At the moment, only <tt>created_utc</tt>\nsort types page properly. Returns all historical results for a given query by default.</li>\n<li>Optionally handles incorporation of <tt>praw</tt> to fetch objects after getting ids from pushshift</li>\n<li>If not using <tt>praw</tt>, returns results in <tt>comment</tt> and <tt>submission</tt> objects whose\nAPI is similar to the corresponding <tt>praw</tt> objects. Additionally, result objects have\nan additional <tt>.d_</tt> attribute that offers dict access to the associated data attributes.</li>\n<li>Optionally adds a <tt>created</tt> attribute which converts a comment/submission\u2019s <tt>created_utc</tt>\ntimestamp to the user\u2019s local time. (may raise exceptions for users with certain timezone\nsettings).</li>\n<li>Simple interface to pass query arguments to the API. The API is sparsely documented,\nso it\u2019s often fruitful to just try an argument and see if it works.</li>\n<li>Limited support for pushshift\u2019s <tt>aggs</tt> argument.</li>\n<li>A <tt>stop_condition</tt> argument to make it simple to stop yielding results given arbitrary user-defined criteria</li>\n</ul>\n</div>\n<div id=\"warnings\">\n<h2>WARNINGS</h2>\n<ul>\n<li><p>Non-default sorts (i.e. sorting by anything other than <tt>created_utc</tt>) have limited support from\nthe pushshift.io API. As such, this project will raise an exception for any request that can\u2019t\nprovide reliably sorted and paged data.</p>\n<p>Non-default sorts require a limit &lt;= max_results_per_request (500 by default)</p>\n</li>\n</ul>\n</div>\n<div id=\"demo-usage\">\n<h2>Demo usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pushshift_py</span> <span class=\"kn\">import</span> <span class=\"n\">PushshiftAPI</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">PushshiftAPI</span><span class=\"p\">()</span>\n</pre>\n<p>Or to use pushshift search to fetch ids and then use praw to fetch objects:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">praw</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pushshift_py</span> <span class=\"kn\">import</span> <span class=\"n\">PushshiftAPI</span>\n\n<span class=\"n\">r</span> <span class=\"o\">=</span> <span class=\"n\">praw</span><span class=\"o\">.</span><span class=\"n\">Reddit</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">PushshiftAPI</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"p\">)</span>\n</pre>\n<div id=\"most-recent-submissions\">\n<h3>100 most recent submissions</h3>\n<pre><span class=\"c1\"># The `search_comments` and `search_submissions` methods return generator objects</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_submissions</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"first-10-submissions-to-r-politics-in-2017-filtering-results-to-url-author-title-subreddit-fields\">\n<h3>First 10 submissions to /r/politics in 2017, filtering results to url/author/title/subreddit fields.</h3>\n<p>The <tt>created_utc</tt> field will be added automatically (it\u2019s used for paging).</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">datetime</span> <span class=\"k\">as</span> <span class=\"nn\">dt</span>\n\n<span class=\"n\">start_epoch</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">dt</span><span class=\"o\">.</span><span class=\"n\">datetime</span><span class=\"p\">(</span><span class=\"mi\">2017</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">())</span>\n\n<span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_submissions</span><span class=\"p\">(</span><span class=\"n\">after</span><span class=\"o\">=</span><span class=\"n\">start_epoch</span><span class=\"p\">,</span>\n                            <span class=\"n\">subreddit</span><span class=\"o\">=</span><span class=\"s1\">'politics'</span><span class=\"p\">,</span>\n                            <span class=\"nb\">filter</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'url'</span><span class=\"p\">,</span><span class=\"s1\">'author'</span><span class=\"p\">,</span> <span class=\"s1\">'title'</span><span class=\"p\">,</span> <span class=\"s1\">'subreddit'</span><span class=\"p\">],</span>\n                            <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n</pre>\n</div>\n<div id=\"trying-a-search-argument-that-doesn-t-actually-work\">\n<h3>Trying a search argument that doesn\u2019t actually work</h3>\n<p>According to the pushshift.io API documentation, we should be able to search submissions by url,\nbut (at the time of this writing) this doesn\u2019t actually work in practice.\nThe API should still respect the <tt>limit</tt> argument and possibly other supported arguments,\nbut no guarantees. If you find that an argument you have passed is not supported by the API,\nbest thing is to just remove it from the query and modify your api call to only utilize\nsupported arguments to mitigate risks from of unexpected behavior.</p>\n<pre><span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s1\">'http://www.politico.com/story/2017/02/mike-flynn-russia-ties-investigation-235272'</span>\n<span class=\"n\">url_results</span> <span class=\"o\">=</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_submissions</span><span class=\"p\">(</span><span class=\"n\">url</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">))</span>\n\n<span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">url_results</span><span class=\"p\">),</span> <span class=\"nb\">any</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">url</span> <span class=\"o\">==</span> <span class=\"n\">url</span> <span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">url_results</span><span class=\"p\">)</span>\n<span class=\"c1\"># 500, False</span>\n</pre>\n</div>\n<div id=\"all-askreddit-comments-containing-the-text-op\">\n<h3>All AskReddit comments containing the text \u201cOP\u201d</h3>\n<p>Use the <tt>q</tt> parameter to search text. Omitting the <tt>limit</tt> parameter does a full\nhistorical search. Requests are performed in batches of size specified by the\n<tt>max_results_per_request</tt> parameter (default=500). Omitting the \u201cmax_reponse_cache\u201d\ntest in the demo below will return all results. Otherwise, this demo will perform two\nAPI requests returning 500 comments each. Alternatively, the generator can be queried for additional results.</p>\n<pre><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_comments</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"s1\">'OP'</span><span class=\"p\">,</span> <span class=\"n\">subreddit</span><span class=\"o\">=</span><span class=\"s1\">'askreddit'</span><span class=\"p\">)</span>\n\n<span class=\"n\">max_response_cache</span> <span class=\"o\">=</span> <span class=\"mi\">1000</span>\n<span class=\"n\">cache</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n\n<span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n    <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Omit this test to actually return all results. Wouldn't recommend it though: could take a while, but you do you.</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">cache</span><span class=\"p\">)</span> <span class=\"o\">&gt;=</span> <span class=\"n\">max_response_cache</span><span class=\"p\">:</span>\n        <span class=\"k\">break</span>\n\n<span class=\"c1\"># If you really want to: pick up where we left off to get the rest of the results.</span>\n<span class=\"k\">if</span> <span class=\"kc\">False</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n        <span class=\"n\">cache</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">c</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-the-aggs-argument-to-count-comments-mentioning-trump-each-hour-in-past-week\">\n<h3>Using the <tt>aggs</tt> argument to count comments mentioning trump each hour in past week</h3>\n<p>Replicating the example from the pushshift documentation:</p>\n<p><a href=\"https://api.pushshift.io/reddit/search/comment/?q=trump&amp;after=7d&amp;aggs=created_utc&amp;frequency=hour&amp;size=0\" rel=\"nofollow\">https://api.pushshift.io/reddit/search/comment/?q=trump&amp;after=7d&amp;aggs=created_utc&amp;frequency=hour&amp;size=0</a></p>\n<p>I haven\u2019t really experimented much with this functionality of the API, so I figured\nthe simplest way to support it would be to just disable most of the bells and whistles\nprovided by the API wrapper when the <tt>aggs</tt> argument is provided (i.e. paging, converting\nthe result to a namedtuple for dot notation attribute access).</p>\n<pre><span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">PushshiftAPI</span><span class=\"p\">()</span>\n<span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_comments</span><span class=\"p\">(</span><span class=\"n\">q</span><span class=\"o\">=</span><span class=\"s1\">'trump'</span><span class=\"p\">,</span>\n                          <span class=\"n\">after</span><span class=\"o\">=</span><span class=\"s1\">'7d'</span><span class=\"p\">,</span>\n                          <span class=\"n\">aggs</span><span class=\"o\">=</span><span class=\"s1\">'created_utc'</span><span class=\"p\">,</span>\n                          <span class=\"n\">frequency</span><span class=\"o\">=</span><span class=\"s1\">'hour'</span><span class=\"p\">,</span>\n                          <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span>\n                         <span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"nb\">next</span><span class=\"p\">(</span><span class=\"n\">gen</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-the-stop-condition-argument-to-get-the-most-recent-submission-by-a-bot-account\">\n<h3>Using the <tt>stop_condition</tt> argument to get the most recent submission by a bot account</h3>\n<pre><span class=\"n\">gen</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">search_submissions</span><span class=\"p\">(</span><span class=\"n\">stop_condition</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"s1\">'bot'</span> <span class=\"ow\">in</span> <span class=\"n\">x</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">subm</span> <span class=\"ow\">in</span> <span class=\"n\">gen</span><span class=\"p\">:</span>\n    <span class=\"k\">pass</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">subm</span><span class=\"o\">.</span><span class=\"n\">author</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>PSAW\u2019s source is provided under the <a href=\"https://github.com/dmarx/psaw/master/LICENSE\" rel=\"nofollow\">Simplified BSD License</a>.</p>\n<ul>\n<li>Copyright (c), 2018, David Marx</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 6769070, "releases": {"0.0.10": [{"comment_text": "", "digests": {"md5": "7c859e9244787d5707a1d2e99448ebb3", "sha256": "3e5a899c161dcfea2e49727cdd956339f1709331fd2fcbb8d414f13bc9baf5cf"}, "downloads": -1, "filename": "pushshift.py-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "7c859e9244787d5707a1d2e99448ebb3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 13588, "upload_time": "2018-07-26T00:57:38", "upload_time_iso_8601": "2018-07-26T00:57:38.809284Z", "url": "https://files.pythonhosted.org/packages/c4/25/17d63479d3a2332d5a1f2571adbd68a1c75989c44b766e41aff414b213ee/pushshift.py-0.0.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "970178067fd0f30552ed478e0785ddd3", "sha256": "2997679e6a875fcda3977ce8c9d3e63421cd0d33599c278387134f016304d007"}, "downloads": -1, "filename": "pushshift.py-0.0.10.tar.gz", "has_sig": false, "md5_digest": "970178067fd0f30552ed478e0785ddd3", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 9423, "upload_time": "2018-07-26T00:57:40", "upload_time_iso_8601": "2018-07-26T00:57:40.121272Z", "url": "https://files.pythonhosted.org/packages/79/e7/d0dc76573185c9ee146ee7be2876755f8e11f833594a01f2222cd1a206cc/pushshift.py-0.0.10.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a1103d584ce349654302ef638b189d04", "sha256": "f9199c0c8bf1d1584d10dce0ac493553637c3be96a16e06050e34d6bd5366581"}, "downloads": -1, "filename": "pushshift.py-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a1103d584ce349654302ef638b189d04", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8960, "upload_time": "2018-07-12T19:17:16", "upload_time_iso_8601": "2018-07-12T19:17:16.937916Z", "url": "https://files.pythonhosted.org/packages/01/e7/29d8668008ce5e658c6176c88d06b1f22f085ccf5eced27b0fdaef48b3f7/pushshift.py-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e12b80a44ee9db0b09cb63e02ea0c208", "sha256": "bbbd1761475bd7e9df4d6090ce429b482043a1658dbd2e39343bb3ff1d5fd933"}, "downloads": -1, "filename": "pushshift.py-0.0.4.tar.gz", "has_sig": false, "md5_digest": "e12b80a44ee9db0b09cb63e02ea0c208", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8509, "upload_time": "2018-07-12T19:17:18", "upload_time_iso_8601": "2018-07-12T19:17:18.208356Z", "url": "https://files.pythonhosted.org/packages/aa/5c/2bc2d060a813fa618753617902c65daa8ca850da433f936a3149cae1b170/pushshift.py-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "097fae4a6e34faa1de5592d6ee49913c", "sha256": "6870dba03dc03901cb11beb1a701130f62f58aefec9f74da6efd6f20abf76e50"}, "downloads": -1, "filename": "pushshift.py-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "097fae4a6e34faa1de5592d6ee49913c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 8973, "upload_time": "2018-07-12T19:34:24", "upload_time_iso_8601": "2018-07-12T19:34:24.078768Z", "url": "https://files.pythonhosted.org/packages/77/74/43024e63b3f71fc42461d6c3d1ff51ff793af1ca6d59ce8289efdc29f387/pushshift.py-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d2ef87334d9c7ba8fc3aeb4f5f80624e", "sha256": "aa6677e5d39c2c4f667a88956d01bb130b6a7e8865c935db1bfd0ad34a2d2152"}, "downloads": -1, "filename": "pushshift.py-0.0.5.tar.gz", "has_sig": false, "md5_digest": "d2ef87334d9c7ba8fc3aeb4f5f80624e", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8513, "upload_time": "2018-07-12T19:34:25", "upload_time_iso_8601": "2018-07-12T19:34:25.262558Z", "url": "https://files.pythonhosted.org/packages/16/de/7dd58b01e527b1589d23bd0a88265bd2736cdc8befef962b330c4e79ed1d/pushshift.py-0.0.5.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "c56db35cb865727ab8059e26ab1913b0", "sha256": "2ca1f46b18a4431f9685b197987596db69b199c7ef8199e49cb976e45a83a3c0"}, "downloads": -1, "filename": "pushshift.py-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "c56db35cb865727ab8059e26ab1913b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9912, "upload_time": "2019-06-26T04:26:46", "upload_time_iso_8601": "2019-06-26T04:26:46.819976Z", "url": "https://files.pythonhosted.org/packages/2c/18/ac3af76fd02daf10edcc8bc5e41b5c4e5ac655ea502f37783718033ef834/pushshift.py-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "eb277f77d9f06224fe333c97bc497974", "sha256": "312b56d06465fa6f8110443dd1040ffdc0bc362c932f3954c3e8898ba22c7903"}, "downloads": -1, "filename": "pushshift.py-0.1.0.tar.gz", "has_sig": false, "md5_digest": "eb277f77d9f06224fe333c97bc497974", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8521, "upload_time": "2019-06-26T04:26:48", "upload_time_iso_8601": "2019-06-26T04:26:48.124756Z", "url": "https://files.pythonhosted.org/packages/d4/66/48c6e049a7ef0b5024972c5679ef496d12e29b46b2cd5ad51d815d1f6514/pushshift.py-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "e9382022b66ce8cfe6c1567738853107", "sha256": "3aec8f6db4105dc20b0b08dce99222e61fd51227041b89da32d9c933ee57defb"}, "downloads": -1, "filename": "pushshift.py-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "e9382022b66ce8cfe6c1567738853107", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9912, "upload_time": "2020-03-07T18:08:02", "upload_time_iso_8601": "2020-03-07T18:08:02.473000Z", "url": "https://files.pythonhosted.org/packages/09/94/b6048732defa1a97665fbff7cca340ef1598d05344cc0e5407b41ac4aea8/pushshift.py-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "79af6b684a09fc3d062249b42f5fa13a", "sha256": "6675242e03d28f3b9b1ca74fb06056b557062415d1fd58afcb26e11f06437c1f"}, "downloads": -1, "filename": "pushshift.py-0.1.1.tar.gz", "has_sig": false, "md5_digest": "79af6b684a09fc3d062249b42f5fa13a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8950, "upload_time": "2020-03-07T18:08:03", "upload_time_iso_8601": "2020-03-07T18:08:03.787244Z", "url": "https://files.pythonhosted.org/packages/9d/88/85066d45a1a998844680919804be2906fe10760e61fe8c052aaae95228e2/pushshift.py-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "45532e4df08b7d9dec47d0d9b0891066", "sha256": "9a900ff979f4e3977399000f2affebdac311cc1b44884dbed14eac70d1ffba67"}, "downloads": -1, "filename": "pushshift.py-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45532e4df08b7d9dec47d0d9b0891066", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9897, "upload_time": "2020-03-07T19:02:30", "upload_time_iso_8601": "2020-03-07T19:02:30.075911Z", "url": "https://files.pythonhosted.org/packages/3c/ae/81c3ba16c944c3ffaa11cc1d7aed7304dc84b6440627e64034557aa4c9e0/pushshift.py-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21e134304a7e0082b916f779ad95eced", "sha256": "a7268c8b46ca58d223dce08d088c925dd595be786f4c98b8822b43f36e4746df"}, "downloads": -1, "filename": "pushshift.py-0.1.2.tar.gz", "has_sig": false, "md5_digest": "21e134304a7e0082b916f779ad95eced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8989, "upload_time": "2020-03-07T19:02:31", "upload_time_iso_8601": "2020-03-07T19:02:31.179617Z", "url": "https://files.pythonhosted.org/packages/cd/ec/28f795c9462a27dfca414f719c84c7afb0a1f8bdcf9124bd15be90b82ce6/pushshift.py-0.1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "45532e4df08b7d9dec47d0d9b0891066", "sha256": "9a900ff979f4e3977399000f2affebdac311cc1b44884dbed14eac70d1ffba67"}, "downloads": -1, "filename": "pushshift.py-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "45532e4df08b7d9dec47d0d9b0891066", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 9897, "upload_time": "2020-03-07T19:02:30", "upload_time_iso_8601": "2020-03-07T19:02:30.075911Z", "url": "https://files.pythonhosted.org/packages/3c/ae/81c3ba16c944c3ffaa11cc1d7aed7304dc84b6440627e64034557aa4c9e0/pushshift.py-0.1.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "21e134304a7e0082b916f779ad95eced", "sha256": "a7268c8b46ca58d223dce08d088c925dd595be786f4c98b8822b43f36e4746df"}, "downloads": -1, "filename": "pushshift.py-0.1.2.tar.gz", "has_sig": false, "md5_digest": "21e134304a7e0082b916f779ad95eced", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 8989, "upload_time": "2020-03-07T19:02:31", "upload_time_iso_8601": "2020-03-07T19:02:31.179617Z", "url": "https://files.pythonhosted.org/packages/cd/ec/28f795c9462a27dfca414f719c84c7afb0a1f8bdcf9124bd15be90b82ce6/pushshift.py-0.1.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:07 2020"}