{"info": {"author": "Azfar Mohamed", "author_email": "azfarmah@outlook.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "![Logo](https://i.ibb.co/zZ88YRq/3ee77eca-5573-4591-b911-b0a01ea0ad3a-200x200.png)\n\n[![Build Status](https://travis-ci.com/azfar154/fastTF.svg?token=f7cQs9ipscGj1qwuxd1Q&branch=master)](https://travis-ci.com/azfar154/fastTF)\n\nfastTF is a easy way to convert a Pandas DataFrame into a Tensorflow TFRecord. Also with fastTF you will be able to get the example_spec. \n### Why would you do so?\n\n  - With a TFRecord file you will be able to make your input pipeline faster\n  - Binary data takes up less space on disk, takes less time to copy and can be read much more efficiently from disk.\n### Tech\n\nfastTF uses a number of open source projects to work properly:\n* [Tensorflow](https://www.tensorflow.org/) - \"An end-to-end open source machine learning platform\"\n* [Pandas](https://pandas.pydata.org/) - \"pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\"\n\n### Installation\n\ntfFast requires [Python](https://www.python.org/downloads/release/python-360/) 3.6 to run.\n\nInstall the necessary packages and dependencies\n\n```sh\n$ pip3 install tensorflow\n$ pip3 install pandas\n```\n\n\n### Development\n\nWant to contribute? Great!\n\nfastTF uses Tensorflow + Pandas for fast development.\n\nFork these repository and change app.py. \n\nOpen your Terminal and run these commands to edit the files\n```sh\n$ cd fastTF\n$ nano app.py\n```\n###  Example\n\n````\ndef test_function():\n    \"\"\"\n        Test the package\n        :return: if the program was successful.\n        >>> test_function()\n        True\n\n    \"\"\"\n    data = pd.read_csv('diabetes.csv')\n    test = tfRecordWriter(data)\n    test.write('new.tfrecords')\n\n    with open('example_spec.pickle','rb') as f:\n        example_spec = pickle.load(f)\n    assert example_spec == test.get_example_spec()\n\n    data = tf.data.TFRecordDataset('new.tfrecords')\n    func = lambda x: tf.io.parse_single_example(x,example_spec)\n    data = data.map(func)\n    y = data.take(1)\n    for x in y:\n      assert x['Age'].numpy() == 50\n    return True\n````\n### Metrics\n\n### Memory Test\n```sh\nMemory Test\n\nLine #    Mem usage    Increment   Line Contents\n================================================\n     1                             import pandas as pd\n     2                             from fastTF import tfRecordWriter\n     3                             import tensorflow as tf\n     4                             import pickle\n     5                             import doctest\n     6                             import pytest\n     7                             \n     8    300.7 MiB    300.7 MiB   \n     9    301.0 MiB      0.2 MiB   def test_function():\n    10    301.0 MiB      0.0 MiB       \"\"\"\n    11    301.0 MiB      0.0 MiB           Test the package\n    12                                     >>> test_function()\n    13    301.0 MiB      0.0 MiB           True\n    14    301.0 MiB      0.0 MiB       \n    15    301.0 MiB      0.0 MiB       \"\"\"\n    16                                 data = pd.read_csv('diabetes.csv')\n    17    301.0 MiB      0.0 MiB       test = tfRecordWriter(data)\n    18    301.0 MiB      0.0 MiB       test.write('new.tfrecords')\n    19    301.0 MiB      0.0 MiB   \n    20    301.0 MiB      0.0 MiB       with open('example_spec.pickle','rb') as f:\n    21    301.3 MiB      0.2 MiB           example_spec = pickle.load(f)\n    22    301.3 MiB      0.0 MiB       assert example_spec == test.get_example_spec()\n    23                             \n    24                                 data = tf.data.TFRecordDataset('new.tfrecords')\n    25                                 func = lambda x: tf.io.parse_single_example(x,example_spec)\n    26                                 data = data.map(func)\n    27                                 y = data.take(1)\n    28                                 for x in y:\n    29                                   assert x['Age'].numpy() == 50\n    30                                 return True\n\n````\n### Speed Test\n````sh\nTimer unit: 1e-06 s\n\nTotal time: 0.644076 s\nFile: /notebooks/package/tests/test_sample.py\nFunction: test_function at line 8\n\nLine #      Hits         Time  Per Hit   % Time  Line Contents\n==============================================================\n     8                                           def test_function():\n     9         1       6395.0   6395.0      1.0      data = pd.read_csv('diabetes.csv')\n    10         1        602.0    602.0      0.1      test = tfRecordWriter(data)\n    11         1     589870.0 589870.0     91.6      test.write('new.tfrecords')\n    12                                           \n    13         1         57.0     57.0      0.0      with open('example_spec.pickle','rb') as f:\n    14         1         79.0     79.0      0.0          example_spec = pickle.load(f)\n    15         1         28.0     28.0      0.0      assert example_spec == test.get_example_spec()\n    16                                           \n    17         1       8591.0   8591.0      1.3      data = tf.data.TFRecordDataset('new.tfrecords')\n    18         1          3.0      3.0      0.0      func = lambda x: tf.io.parse_single_example(x,example_spec)\n    19         1      25952.0  25952.0      4.0      data = data.map(func)\n    20         1        245.0    245.0      0.0      y = data.take(1)\n    21         2      12227.0   6113.5      1.9      for x in y:\n    22         1         27.0     27.0      0.0        assert x['Age'].numpy() == 50\n\n````\n### Another Example\n```sh\n>>> import pandas as pd\n>>> data = pd.read_csv('diabetes.csv')\n>>> from fastTF import tfRecordWriter\n>>> demo = tfRecordWriter(data)\n>>> demo.write(\"name.tfrecord\")\n>>> test.get_example_spec()\n{'Pregnancies': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'Glucose', FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'BloodPressure': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None),  'SkinThickness': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'Insulin': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'Age': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'Outcome': FixedLenFeature(shape=(), dtype=tf.int64, default_value=None), 'BMI': FixedLenFeature(shape=(), dtype=tf.float32, default_value=None), 'DiabetesPedigreeFunction': FixedLenFeature(shape=(), dtype=tf.float32, default_value=None)}\n```\n\n\n\n### Todos\n\n - Write more Tests\n - Make the app faster\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/azfar154/fastTF", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "fastTF", "package_url": "https://pypi.org/project/fastTF/", "platform": "", "project_url": "https://pypi.org/project/fastTF/", "project_urls": {"Homepage": "https://github.com/azfar154/fastTF"}, "release_url": "https://pypi.org/project/fastTF/1.0.3/", "requires_dist": ["pandas", "tensorflow (>=2.0.0)"], "requires_python": ">=3.6", "summary": "Converts Pandas Dataframe to Tensorflow TFRecord", "version": "1.0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><img alt=\"Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/586c7deba2e1528cedad6cb83d651181e3e6dcf4/68747470733a2f2f692e6962622e636f2f7a5a38385952712f33656537376563612d353537332d343539312d623931312d6230613031656130616433612d323030783230302e706e67\"></p>\n<p><a href=\"https://travis-ci.com/azfar154/fastTF\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6bdccb609b158f4c49b9b1910085167e06d14a20/68747470733a2f2f7472617669732d63692e636f6d2f617a6661723135342f6661737454462e7376673f746f6b656e3d66376351733969707363476a3171777578643151266272616e63683d6d6173746572\"></a></p>\n<p>fastTF is a easy way to convert a Pandas DataFrame into a Tensorflow TFRecord. Also with fastTF you will be able to get the example_spec.</p>\n<h3>Why would you do so?</h3>\n<ul>\n<li>With a TFRecord file you will be able to make your input pipeline faster</li>\n<li>Binary data takes up less space on disk, takes less time to copy and can be read much more efficiently from disk.</li>\n</ul>\n<h3>Tech</h3>\n<p>fastTF uses a number of open source projects to work properly:</p>\n<ul>\n<li><a href=\"https://www.tensorflow.org/\" rel=\"nofollow\">Tensorflow</a> - \"An end-to-end open source machine learning platform\"</li>\n<li><a href=\"https://pandas.pydata.org/\" rel=\"nofollow\">Pandas</a> - \"pandas is a fast, powerful, flexible and easy to use open source data analysis and manipulation tool,\nbuilt on top of the Python programming language.\"</li>\n</ul>\n<h3>Installation</h3>\n<p>tfFast requires <a href=\"https://www.python.org/downloads/release/python-360/\" rel=\"nofollow\">Python</a> 3.6 to run.</p>\n<p>Install the necessary packages and dependencies</p>\n<pre>$ pip3 install tensorflow\n$ pip3 install pandas\n</pre>\n<h3>Development</h3>\n<p>Want to contribute? Great!</p>\n<p>fastTF uses Tensorflow + Pandas for fast development.</p>\n<p>Fork these repository and change app.py.</p>\n<p>Open your Terminal and run these commands to edit the files</p>\n<pre>$ <span class=\"nb\">cd</span> fastTF\n$ nano app.py\n</pre>\n<h3>Example</h3>\n<pre><code>def test_function():\n    \"\"\"\n        Test the package\n        :return: if the program was successful.\n        &gt;&gt;&gt; test_function()\n        True\n\n    \"\"\"\n    data = pd.read_csv('diabetes.csv')\n    test = tfRecordWriter(data)\n    test.write('new.tfrecords')\n\n    with open('example_spec.pickle','rb') as f:\n        example_spec = pickle.load(f)\n    assert example_spec == test.get_example_spec()\n\n    data = tf.data.TFRecordDataset('new.tfrecords')\n    func = lambda x: tf.io.parse_single_example(x,example_spec)\n    data = data.map(func)\n    y = data.take(1)\n    for x in y:\n      assert x['Age'].numpy() == 50\n    return True\n</code></pre>\n<h3>Metrics</h3>\n<h3>Memory Test</h3>\n<pre>Memory Test\n\nLine <span class=\"c1\">#    Mem usage    Increment   Line Contents</span>\n<span class=\"o\">================================================</span>\n     <span class=\"m\">1</span>                             import pandas as pd\n     <span class=\"m\">2</span>                             from fastTF import tfRecordWriter\n     <span class=\"m\">3</span>                             import tensorflow as tf\n     <span class=\"m\">4</span>                             import pickle\n     <span class=\"m\">5</span>                             import doctest\n     <span class=\"m\">6</span>                             import pytest\n     <span class=\"m\">7</span>                             \n     <span class=\"m\">8</span>    <span class=\"m\">300</span>.7 MiB    <span class=\"m\">300</span>.7 MiB   \n     <span class=\"m\">9</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.2 MiB   def test_function<span class=\"o\">()</span>:\n    <span class=\"m\">10</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.0 MiB       <span class=\"s2\">\"\"\"</span>\n<span class=\"s2\">    11    301.0 MiB      0.0 MiB           Test the package</span>\n<span class=\"s2\">    12                                     &gt;&gt;&gt; test_function()</span>\n<span class=\"s2\">    13    301.0 MiB      0.0 MiB           True</span>\n<span class=\"s2\">    14    301.0 MiB      0.0 MiB       </span>\n<span class=\"s2\">    15    301.0 MiB      0.0 MiB       \"\"\"</span>\n    <span class=\"m\">16</span>                                 <span class=\"nv\">data</span> <span class=\"o\">=</span> pd.read_csv<span class=\"o\">(</span><span class=\"s1\">'diabetes.csv'</span><span class=\"o\">)</span>\n    <span class=\"m\">17</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.0 MiB       <span class=\"nb\">test</span> <span class=\"o\">=</span> tfRecordWriter<span class=\"o\">(</span>data<span class=\"o\">)</span>\n    <span class=\"m\">18</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.0 MiB       test.write<span class=\"o\">(</span><span class=\"s1\">'new.tfrecords'</span><span class=\"o\">)</span>\n    <span class=\"m\">19</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.0 MiB   \n    <span class=\"m\">20</span>    <span class=\"m\">301</span>.0 MiB      <span class=\"m\">0</span>.0 MiB       with open<span class=\"o\">(</span><span class=\"s1\">'example_spec.pickle'</span>,<span class=\"s1\">'rb'</span><span class=\"o\">)</span> as f:\n    <span class=\"m\">21</span>    <span class=\"m\">301</span>.3 MiB      <span class=\"m\">0</span>.2 MiB           <span class=\"nv\">example_spec</span> <span class=\"o\">=</span> pickle.load<span class=\"o\">(</span>f<span class=\"o\">)</span>\n    <span class=\"m\">22</span>    <span class=\"m\">301</span>.3 MiB      <span class=\"m\">0</span>.0 MiB       assert <span class=\"nv\">example_spec</span> <span class=\"o\">==</span> test.get_example_spec<span class=\"o\">()</span>\n    <span class=\"m\">23</span>                             \n    <span class=\"m\">24</span>                                 <span class=\"nv\">data</span> <span class=\"o\">=</span> tf.data.TFRecordDataset<span class=\"o\">(</span><span class=\"s1\">'new.tfrecords'</span><span class=\"o\">)</span>\n    <span class=\"m\">25</span>                                 <span class=\"nv\">func</span> <span class=\"o\">=</span> lambda x: tf.io.parse_single_example<span class=\"o\">(</span>x,example_spec<span class=\"o\">)</span>\n    <span class=\"m\">26</span>                                 <span class=\"nv\">data</span> <span class=\"o\">=</span> data.map<span class=\"o\">(</span>func<span class=\"o\">)</span>\n    <span class=\"m\">27</span>                                 <span class=\"nv\">y</span> <span class=\"o\">=</span> data.take<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>\n    <span class=\"m\">28</span>                                 <span class=\"k\">for</span> x in y:\n    <span class=\"m\">29</span>                                   assert x<span class=\"o\">[</span><span class=\"s1\">'Age'</span><span class=\"o\">]</span>.numpy<span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"m\">50</span>\n    <span class=\"m\">30</span>                                 <span class=\"k\">return</span> True\n</pre>\n<h3>Speed Test</h3>\n<pre>Timer unit: 1e-06 s\n\nTotal time: <span class=\"m\">0</span>.644076 s\nFile: /notebooks/package/tests/test_sample.py\nFunction: test_function at line <span class=\"m\">8</span>\n\nLine <span class=\"c1\">#      Hits         Time  Per Hit   % Time  Line Contents</span>\n<span class=\"o\">==============================================================</span>\n     <span class=\"m\">8</span>                                           def test_function<span class=\"o\">()</span>:\n     <span class=\"m\">9</span>         <span class=\"m\">1</span>       <span class=\"m\">6395</span>.0   <span class=\"m\">6395</span>.0      <span class=\"m\">1</span>.0      <span class=\"nv\">data</span> <span class=\"o\">=</span> pd.read_csv<span class=\"o\">(</span><span class=\"s1\">'diabetes.csv'</span><span class=\"o\">)</span>\n    <span class=\"m\">10</span>         <span class=\"m\">1</span>        <span class=\"m\">602</span>.0    <span class=\"m\">602</span>.0      <span class=\"m\">0</span>.1      <span class=\"nb\">test</span> <span class=\"o\">=</span> tfRecordWriter<span class=\"o\">(</span>data<span class=\"o\">)</span>\n    <span class=\"m\">11</span>         <span class=\"m\">1</span>     <span class=\"m\">589870</span>.0 <span class=\"m\">589870</span>.0     <span class=\"m\">91</span>.6      test.write<span class=\"o\">(</span><span class=\"s1\">'new.tfrecords'</span><span class=\"o\">)</span>\n    <span class=\"m\">12</span>                                           \n    <span class=\"m\">13</span>         <span class=\"m\">1</span>         <span class=\"m\">57</span>.0     <span class=\"m\">57</span>.0      <span class=\"m\">0</span>.0      with open<span class=\"o\">(</span><span class=\"s1\">'example_spec.pickle'</span>,<span class=\"s1\">'rb'</span><span class=\"o\">)</span> as f:\n    <span class=\"m\">14</span>         <span class=\"m\">1</span>         <span class=\"m\">79</span>.0     <span class=\"m\">79</span>.0      <span class=\"m\">0</span>.0          <span class=\"nv\">example_spec</span> <span class=\"o\">=</span> pickle.load<span class=\"o\">(</span>f<span class=\"o\">)</span>\n    <span class=\"m\">15</span>         <span class=\"m\">1</span>         <span class=\"m\">28</span>.0     <span class=\"m\">28</span>.0      <span class=\"m\">0</span>.0      assert <span class=\"nv\">example_spec</span> <span class=\"o\">==</span> test.get_example_spec<span class=\"o\">()</span>\n    <span class=\"m\">16</span>                                           \n    <span class=\"m\">17</span>         <span class=\"m\">1</span>       <span class=\"m\">8591</span>.0   <span class=\"m\">8591</span>.0      <span class=\"m\">1</span>.3      <span class=\"nv\">data</span> <span class=\"o\">=</span> tf.data.TFRecordDataset<span class=\"o\">(</span><span class=\"s1\">'new.tfrecords'</span><span class=\"o\">)</span>\n    <span class=\"m\">18</span>         <span class=\"m\">1</span>          <span class=\"m\">3</span>.0      <span class=\"m\">3</span>.0      <span class=\"m\">0</span>.0      <span class=\"nv\">func</span> <span class=\"o\">=</span> lambda x: tf.io.parse_single_example<span class=\"o\">(</span>x,example_spec<span class=\"o\">)</span>\n    <span class=\"m\">19</span>         <span class=\"m\">1</span>      <span class=\"m\">25952</span>.0  <span class=\"m\">25952</span>.0      <span class=\"m\">4</span>.0      <span class=\"nv\">data</span> <span class=\"o\">=</span> data.map<span class=\"o\">(</span>func<span class=\"o\">)</span>\n    <span class=\"m\">20</span>         <span class=\"m\">1</span>        <span class=\"m\">245</span>.0    <span class=\"m\">245</span>.0      <span class=\"m\">0</span>.0      <span class=\"nv\">y</span> <span class=\"o\">=</span> data.take<span class=\"o\">(</span><span class=\"m\">1</span><span class=\"o\">)</span>\n    <span class=\"m\">21</span>         <span class=\"m\">2</span>      <span class=\"m\">12227</span>.0   <span class=\"m\">6113</span>.5      <span class=\"m\">1</span>.9      <span class=\"k\">for</span> x in y:\n    <span class=\"m\">22</span>         <span class=\"m\">1</span>         <span class=\"m\">27</span>.0     <span class=\"m\">27</span>.0      <span class=\"m\">0</span>.0        assert x<span class=\"o\">[</span><span class=\"s1\">'Age'</span><span class=\"o\">]</span>.numpy<span class=\"o\">()</span> <span class=\"o\">==</span> <span class=\"m\">50</span>\n</pre>\n<h3>Another Example</h3>\n<pre>&gt;&gt;&gt; import pandas as pd\n&gt;&gt;&gt; <span class=\"nv\">data</span> <span class=\"o\">=</span> pd.read_csv<span class=\"o\">(</span><span class=\"s1\">'diabetes.csv'</span><span class=\"o\">)</span>\n&gt;&gt;&gt; from fastTF import tfRecordWriter\n&gt;&gt;&gt; <span class=\"nv\">demo</span> <span class=\"o\">=</span> tfRecordWriter<span class=\"o\">(</span>data<span class=\"o\">)</span>\n&gt;&gt;&gt; demo.write<span class=\"o\">(</span><span class=\"s2\">\"name.tfrecord\"</span><span class=\"o\">)</span>\n&gt;&gt;&gt; test.get_example_spec<span class=\"o\">()</span>\n<span class=\"o\">{</span><span class=\"s1\">'Pregnancies'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'Glucose'</span>, FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'BloodPressure'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>,  <span class=\"s1\">'SkinThickness'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'Insulin'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'Age'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'Outcome'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.int64, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'BMI'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.float32, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)</span>, <span class=\"s1\">'DiabetesPedigreeFunction'</span>: FixedLenFeature<span class=\"o\">(</span><span class=\"nv\">shape</span><span class=\"o\">=()</span>, <span class=\"nv\">dtype</span><span class=\"o\">=</span>tf.float32, <span class=\"nv\">default_value</span><span class=\"o\">=</span>None<span class=\"o\">)}</span>\n</pre>\n<h3>Todos</h3>\n<ul>\n<li>Write more Tests</li>\n<li>Make the app faster</li>\n</ul>\n\n          </div>"}, "last_serial": 6924419, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "1a4b78dba0d5ade420a044df039e7213", "sha256": "3f7b2646a820d660108d5a0179c69a05c0a600976f1dc507c1ebfd9a5382fa94"}, "downloads": -1, "filename": "fastTF-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "1a4b78dba0d5ade420a044df039e7213", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5282, "upload_time": "2020-03-31T21:42:04", "upload_time_iso_8601": "2020-03-31T21:42:04.745574Z", "url": "https://files.pythonhosted.org/packages/20/0d/259bd232f78010506beb23c60bed3236ab5b2d8226957c0e366755cf5045/fastTF-1.0.1-py3-none-any.whl", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "bd0f1f7aae2bfc82c5cab8d5f59a58d2", "sha256": "91142174de04eedd8ac6bf649ac3321885ec524dff490f5042e7284e53e34b29"}, "downloads": -1, "filename": "fastTF-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bd0f1f7aae2bfc82c5cab8d5f59a58d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5282, "upload_time": "2020-04-01T00:36:26", "upload_time_iso_8601": "2020-04-01T00:36:26.420414Z", "url": "https://files.pythonhosted.org/packages/f4/ca/eca836fb411b63bc16c1c7ce76697fa035fbbdca47717b22ed48dfb48c24/fastTF-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a7f501603d72bf80639043d1ca71889", "sha256": "07468555de017adc7c0d5fb92f7254320491d83b67f62816e7cadbde707546ea"}, "downloads": -1, "filename": "fastTF-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9a7f501603d72bf80639043d1ca71889", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6344, "upload_time": "2020-04-01T00:36:27", "upload_time_iso_8601": "2020-04-01T00:36:27.377248Z", "url": "https://files.pythonhosted.org/packages/59/1d/dbb4497be81dce5d25a3d19e2e23c7d84bf58e667e0c919ba6fbf172c15b/fastTF-1.0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bd0f1f7aae2bfc82c5cab8d5f59a58d2", "sha256": "91142174de04eedd8ac6bf649ac3321885ec524dff490f5042e7284e53e34b29"}, "downloads": -1, "filename": "fastTF-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "bd0f1f7aae2bfc82c5cab8d5f59a58d2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5282, "upload_time": "2020-04-01T00:36:26", "upload_time_iso_8601": "2020-04-01T00:36:26.420414Z", "url": "https://files.pythonhosted.org/packages/f4/ca/eca836fb411b63bc16c1c7ce76697fa035fbbdca47717b22ed48dfb48c24/fastTF-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "9a7f501603d72bf80639043d1ca71889", "sha256": "07468555de017adc7c0d5fb92f7254320491d83b67f62816e7cadbde707546ea"}, "downloads": -1, "filename": "fastTF-1.0.3.tar.gz", "has_sig": false, "md5_digest": "9a7f501603d72bf80639043d1ca71889", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 6344, "upload_time": "2020-04-01T00:36:27", "upload_time_iso_8601": "2020-04-01T00:36:27.377248Z", "url": "https://files.pythonhosted.org/packages/59/1d/dbb4497be81dce5d25a3d19e2e23c7d84bf58e667e0c919ba6fbf172c15b/fastTF-1.0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:43:23 2020"}