{"info": {"author": "Brett Beatty", "author_email": "brettbeatty@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "lead_pipe\n=========\n\n.. image:: https://img.shields.io/circleci/project/github/brettbeatty/lead_pipe.svg\n    :target: https://circleci.com/gh/brettbeatty/lead_pipe\n\n.. image:: https://img.shields.io/github/license/brettbeatty/lead_pipe.svg\n    :target: https://github.com/brettbeatty/lead_pipe/blob/master/LICENSE\n\n.. image:: https://img.shields.io/codecov/c/github/brettbeatty/lead_pipe.svg\n    :target: https://codecov.io/gh/brettbeatty/lead_pipe\n\n.. image:: https://img.shields.io/pypi/v/lead_pipe.svg\n    :target: https://pypi.org/project/lead_pipe/\n\nLead Pipe allows values to be piped from one function to the next without nesting the calls. For example, the following blocks of code are equivalent.\n\n.. code-block:: python\n\n    a = foo(bar(baz(8, 2), a=3), 4)\n\n.. code-block:: python\n\n    from lead_pipe import Pipe\n    a = ~Pipe(8)(baz, 2)(bar, a=3)(foo, 4)\n\nBasic Use\n---------\nCreating a Pipe\n^^^^^^^^^^^^^^^\nPipelines begin with a base value passed to the Pipe constructor.\n\n.. code-block:: python\n\n    >>> from lead_pipe import Pipe\n    >>> Pipe(3)\n    Pipe(3)\n    >>> Pipe('a')\n    Pipe('a')\n\nPiping Results\n^^^^^^^^^^^^^^\nEach instance of Pipe is callable and takes any number of arguments (at least one). The first argument is a function that gets called with the pipeline's value followed by the additional arguments and keyword arguments, if any.\n\n.. code-block:: python\n\n    >>> Pipe(3)(lambda x: x + 0.5)(lambda x: x ** 2)(int)('{} - {x} + {}'.format, 1, x=8)(eval)\n    Pipe(5)\n\nObtaining Result\n^^^^^^^^^^^^^^^^\nOnce your pipeline is finished, you can retrieve the result with the tilde (~) operator or through the pipe's 'value' attribute.\n\n.. code-block:: python\n\n    >>> ~Pipe(11)\n    11\n    >>> Pipe('foo').value\n    'foo'\n    >>> ~Pipe(2)(pow, 3)(str)\n    '8'\n\nAdvanced Features\n-----------------\nIntermediate Pipes\n^^^^^^^^^^^^^^^^^^\nSince each step along the pipeline is its own instance of Pipe, an intermediate pipe can be saved to pipe to multiple functions.\n\n.. code-block:: python\n\n    >>> p = Pipe(4)(range)(zip, range(2, 6))\n    >>> p\n    Pipe([(0, 2), (1, 3), (2, 4), (3, 5)])\n    >>> p(dict).value[2]\n    4\n    >>> ~p(lambda x: x[1][1])\n    3\n\nApply\n^^^^^\nSometimes a function may return another function rather than a value to be piped to another function. Apply is a helper function that continues the pipeline with the function returned.\n\n.. code-block:: python\n\n    >>> from lead_pipe import apply\n    >>> ~Pipe('{} foo{a} {}'.format)(apply, 'bar', 'baz', a=3)\n    'bar foo3 baz'\n\nReflect\n^^^^^^^\nSometimes one may want to call a member function of a value in the pipeline. One way would be to pipe the value to getattr then to apply, but the reflect function is the combination of the two.\n\n.. code-block:: python\n\n    >>> from lead_pipe import reflect\n    >>> ~Pipe({'a': 1, 'b': 2})(reflect, 'get', 'a')\n    1\n\nIn this specific example, one could pipe the dictionary to dict.get, but reflect is more general.\n", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/brettbeatty/lead_pipe", "keywords": "piping", "license": "", "maintainer": "", "maintainer_email": "", "name": "lead_pipe", "package_url": "https://pypi.org/project/lead_pipe/", "platform": "", "project_url": "https://pypi.org/project/lead_pipe/", "project_urls": {"Homepage": "https://github.com/brettbeatty/lead_pipe"}, "release_url": "https://pypi.org/project/lead_pipe/0.2.1/", "requires_dist": null, "requires_python": "", "summary": "piping between functions in Python", "version": "0.2.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://circleci.com/gh/brettbeatty/lead_pipe\" rel=\"nofollow\"><img alt=\"https://img.shields.io/circleci/project/github/brettbeatty/lead_pipe.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/89c786db5e38bcc9e6493c011a030422445f0704/68747470733a2f2f696d672e736869656c64732e696f2f636972636c6563692f70726f6a6563742f6769746875622f62726574746265617474792f6c6561645f706970652e737667\"></a>\n<a href=\"https://github.com/brettbeatty/lead_pipe/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"https://img.shields.io/github/license/brettbeatty/lead_pipe.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dbbb519a23903500ec32b2b135a8563412b95da1/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f62726574746265617474792f6c6561645f706970652e737667\"></a>\n<a href=\"https://codecov.io/gh/brettbeatty/lead_pipe\" rel=\"nofollow\"><img alt=\"https://img.shields.io/codecov/c/github/brettbeatty/lead_pipe.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/644c96077f23e99e76f64572ea158625a62f4c6e/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f62726574746265617474792f6c6561645f706970652e737667\"></a>\n<a href=\"https://pypi.org/project/lead_pipe/\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/v/lead_pipe.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fda9a29572165f0c8b49cbcf5b06763e045f1d17/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6c6561645f706970652e737667\"></a>\n<p>Lead Pipe allows values to be piped from one function to the next without nesting the calls. For example, the following blocks of code are equivalent.</p>\n<pre><span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"n\">bar</span><span class=\"p\">(</span><span class=\"n\">baz</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">lead_pipe</span> <span class=\"kn\">import</span> <span class=\"n\">Pipe</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"o\">~</span><span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">8</span><span class=\"p\">)(</span><span class=\"n\">baz</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)(</span><span class=\"n\">bar</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<div id=\"basic-use\">\n<h2>Basic Use</h2>\n<div id=\"creating-a-pipe\">\n<h3>Creating a Pipe</h3>\n<p>Pipelines begin with a base value passed to the Pipe constructor.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">lead_pipe</span> <span class=\"kn\">import</span> <span class=\"n\">Pipe</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"piping-results\">\n<h3>Piping Results</h3>\n<p>Each instance of Pipe is callable and takes any number of arguments (at least one). The first argument is a function that gets called with the pipeline\u2019s value followed by the additional arguments and keyword arguments, if any.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">+</span> <span class=\"mf\">0.5</span><span class=\"p\">)(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span> <span class=\"o\">**</span> <span class=\"mi\">2</span><span class=\"p\">)(</span><span class=\"nb\">int</span><span class=\"p\">)(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> - </span><span class=\"si\">{x}</span><span class=\"s1\"> + </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"mi\">8</span><span class=\"p\">)(</span><span class=\"nb\">eval</span><span class=\"p\">)</span>\n<span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"obtaining-result\">\n<h3>Obtaining Result</h3>\n<p>Once your pipeline is finished, you can retrieve the result with the tilde (~) operator or through the pipe\u2019s \u2018value\u2019 attribute.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">11</span><span class=\"p\">)</span>\n<span class=\"mi\">11</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"s1\">'foo'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span>\n<span class=\"s1\">'foo'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">)(</span><span class=\"nb\">pow</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)(</span><span class=\"nb\">str</span><span class=\"p\">)</span>\n<span class=\"s1\">'8'</span>\n</pre>\n</div>\n</div>\n<div id=\"advanced-features\">\n<h2>Advanced Features</h2>\n<div id=\"intermediate-pipes\">\n<h3>Intermediate Pipes</h3>\n<p>Since each step along the pipeline is its own instance of Pipe, an intermediate pipe can be saved to pipe to multiple functions.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span> <span class=\"o\">=</span> <span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">)(</span><span class=\"nb\">range</span><span class=\"p\">)(</span><span class=\"nb\">zip</span><span class=\"p\">,</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">6</span><span class=\"p\">))</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span>\n<span class=\"n\">Pipe</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)])</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">p</span><span class=\"p\">(</span><span class=\"nb\">dict</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"mi\">4</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">p</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> <span class=\"n\">x</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">][</span><span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"mi\">3</span>\n</pre>\n</div>\n<div id=\"apply\">\n<h3>Apply</h3>\n<p>Sometimes a function may return another function rather than a value to be piped to another function. Apply is a helper function that continues the pipeline with the function returned.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">lead_pipe</span> <span class=\"kn\">import</span> <span class=\"n\">apply</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">Pipe</span><span class=\"p\">(</span><span class=\"s1\">'</span><span class=\"si\">{}</span><span class=\"s1\"> foo</span><span class=\"si\">{a}</span><span class=\"s1\"> </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">)(</span><span class=\"n\">apply</span><span class=\"p\">,</span> <span class=\"s1\">'bar'</span><span class=\"p\">,</span> <span class=\"s1\">'baz'</span><span class=\"p\">,</span> <span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"s1\">'bar foo3 baz'</span>\n</pre>\n</div>\n<div id=\"reflect\">\n<h3>Reflect</h3>\n<p>Sometimes one may want to call a member function of a value in the pipeline. One way would be to pipe the value to getattr then to apply, but the reflect function is the combination of the two.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">from</span> <span class=\"nn\">lead_pipe</span> <span class=\"kn\">import</span> <span class=\"n\">reflect</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"o\">~</span><span class=\"n\">Pipe</span><span class=\"p\">({</span><span class=\"s1\">'a'</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'b'</span><span class=\"p\">:</span> <span class=\"mi\">2</span><span class=\"p\">})(</span><span class=\"n\">reflect</span><span class=\"p\">,</span> <span class=\"s1\">'get'</span><span class=\"p\">,</span> <span class=\"s1\">'a'</span><span class=\"p\">)</span>\n<span class=\"mi\">1</span>\n</pre>\n<p>In this specific example, one could pipe the dictionary to dict.get, but reflect is more general.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 3423994, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "fb9ebd31527472ba50e3bc4ae8fa463f", "sha256": "21aecc51fad0064f9ff21532e8c24d5fb56ea1f2303e56e9c79cd044213ff29f"}, "downloads": -1, "filename": "lead_pipe-0.1.tar.gz", "has_sig": false, "md5_digest": "fb9ebd31527472ba50e3bc4ae8fa463f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1286, "upload_time": "2017-09-17T02:54:03", "upload_time_iso_8601": "2017-09-17T02:54:03.089564Z", "url": "https://files.pythonhosted.org/packages/f6/1e/2f363c1aa9a936ac7e75a23a7c143d3c3ec8679cd8fa1f32c1f14058f2f3/lead_pipe-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "f07a485f658248647641af30b087a379", "sha256": "72232b2840088926cd2e589ad345d417fc65d21fae854eebd820070c7caa5db6"}, "downloads": -1, "filename": "lead_pipe-0.2.tar.gz", "has_sig": false, "md5_digest": "f07a485f658248647641af30b087a379", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1290, "upload_time": "2017-10-12T18:08:07", "upload_time_iso_8601": "2017-10-12T18:08:07.027165Z", "url": "https://files.pythonhosted.org/packages/9e/19/8a41b9a9958214312560e09f90d696c24e1972d05ff6b81120d76e650ba4/lead_pipe-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "6a686903eab30c37e1eb9603534b27fe", "sha256": "38c07bf0d62fd10a2ccbe376ceb3d1882c155034ae48af80770d6b58ee1da4b3"}, "downloads": -1, "filename": "lead_pipe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6a686903eab30c37e1eb9603534b27fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3338, "upload_time": "2017-12-18T02:15:20", "upload_time_iso_8601": "2017-12-18T02:15:20.272893Z", "url": "https://files.pythonhosted.org/packages/28/b7/ddcb763e05e753510551d755d826fa542b65e9e474b058ce338105f771b6/lead_pipe-0.2.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "6a686903eab30c37e1eb9603534b27fe", "sha256": "38c07bf0d62fd10a2ccbe376ceb3d1882c155034ae48af80770d6b58ee1da4b3"}, "downloads": -1, "filename": "lead_pipe-0.2.1.tar.gz", "has_sig": false, "md5_digest": "6a686903eab30c37e1eb9603534b27fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3338, "upload_time": "2017-12-18T02:15:20", "upload_time_iso_8601": "2017-12-18T02:15:20.272893Z", "url": "https://files.pythonhosted.org/packages/28/b7/ddcb763e05e753510551d755d826fa542b65e9e474b058ce338105f771b6/lead_pipe-0.2.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:21 2020"}