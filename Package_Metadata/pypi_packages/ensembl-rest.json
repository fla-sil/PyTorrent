{"info": {"author": "Ad115", "author_email": "a.garcia230395@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Education", "Intended Audience :: Information Technology", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3 :: Only", "Topic :: Scientific/Engineering :: Artificial Life", "Topic :: Scientific/Engineering :: Bio-Informatics", "Topic :: Scientific/Engineering :: Medical Science Apps."], "description": "\nEnsembl-REST\n============\n\n.. image:: https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\n    :target: https://saythanks.io/to/Ad115\n\nA Python interface to the Ensembl REST APIs. A whole world of biological data \nat your fingertips.\n\nThe `Ensembl database <https://www.ensembl.org/index.html>`__ contains\nreference biological data on almost any organism. Now it is easy to\naccess this data programatically through their REST API.\n\nThe full list of endpoints for the Ensembl REST API endpoints along with \nendpoint-specific documentation can be found on `their website \n<https://rest.ensembl.org/>`__.\n\nThis library also includes some utilities built on top of the APIs designed to\nease working with them, including an `AssemblyMapper \n<https://ad115.github.io/EnsemblRest/#ensembl_rest.AssemblyMapper>`__ class \nthat helps in the conversion between different genome assemblies.\n\n\nThis project uses code from `RESTEasy <https://github.com/rapidstack/RESTEasy>`__,\nwhich made my life much easier. Thanks!\n\n\n\nInstallation\n------------\n\nYou can install from `PyPI <https://pypi.org/project/ensembl-rest/>`_::\n\n    $ pip install ensembl_rest\n\n\nExamples\n========\n\nThe library exports methods that point to each endpoint of the\nAPI, such as:\n\n.. code-block:: python\n\n    >>> import ensembl_rest\n\n    >>> ensembl_rest.symbol_lookup(\n            species='homo sapiens',\n            symbol='BRCA2'\n        )\n\n::\n\n   { 'species': 'human',\n     'object_type': 'Gene',\n     'description': 'BRCA2, DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]',\n     'assembly_name': 'GRCh38',\n     'end': 32400266,\n     ...\n     ...\n     ...\n     'seq_region_name': '13',\n     'strand': 1,\n     'id': 'ENSG00000139618',\n     'start': 32315474}\n\nAll the endpoints are listed on the `API website <http://rest.ensembl.org/>`__. \nA quick lookup of the methods can be obtained by calling help on the module:\n\n.. code-block:: python\n\n    >>> help(ensembl_rest)\n\n\nIf you want to use an endpoint from the ones enlisted in the `API website \n<http://rest.ensembl.org/>`__, say ``GET lookup/symbol/:species/:symbol`` , \nthen the name of the corresponding method is in the endpoint documentation URL, \nin this case, the documentation links to \nhttp://rest.ensembl.org/documentation/info/symbol\\_lookup so the \ncorresponding method name is ``symbol_lookup``.\n\n.. code-block:: python\n\n    >>> help(ensembl_rest.symbol_lookup)\n\n::\n\n    Help on function symbol_lookup in module ensembl_rest:\n\n    symbol_lookup(*args, **kwargs)\n            Lookup ``GET lookup/symbol/:species/:symbol``\n\n        Find the species and database for a symbol in a linked external database\n\n\n        **Parameters**\n\n        - Required:\n                + **Name**:  species\n                + *Type*:  String\n                + *Description*:  Species name/alias\n                + *Default*:  -\n                + *Example Values*:  homo_sapiens, human\n        ...\n        ...\n\n        - Optional:\n\n                + **Name**:  expand\n                + *Type*:  Boolean(0,1)\n                + *Description*:  Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.\n        ...\n        ...\n\n        **Resource info**\n\n        - **Methods**:  GET\n        - **Response formats**: json, xml, jsonp\n\n\n        **More info**\n\n        https://rest.ensembl.org/documentation/info/symbol_lookup\n\n\nWe can see from the resource string ``GET lookup/symbol/:species/:symbol`` that\nthis method contains 2 parameters called species and symbol, so we can call the\nmethod in the following way:\n\n.. code-block:: python\n\n    >>> ensembl_rest.symbol_lookup(\n            species='homo sapiens',\n            symbol='TP53'\n        )\n\n    # Or like this...\n    >>> ensembl_rest.symbol_lookup('homo sapiens', 'TP53')\n\n::\n\n   {'source': 'ensembl_havana',\n     'object_type': 'Gene',\n     'logic_name': 'ensembl_havana_gene',\n    ...\n    ...\n    ...\n     'start': 32315474}\n\nOne can provide optional parameters with the ``params`` \nkeyword (the specific parameters to pass depend on the specific endpoint, \nthe official endpoints documentation can be found `here \n<http://rest.ensembl.org/>`_)_:\n\n.. code-block:: python\n\n        # Fetch also exons, transcripts, etc...\n        >>> ensembl_rest.symbol_lookup('human', 'BRCA2', \n                                       params={'expand':True})\n\n::\n\n    {'source': 'ensembl_havana',\n     'seq_region_name': '13',\n     'Transcript': [{'source': 'ensembl_havana',\n       'object_type': 'Transcript',\n       'logic_name': 'ensembl_havana_transcript',\n       'Exon': [{'object_type': 'Exon',\n         'version': 4,\n         'species': 'human',\n         'assembly_name': 'GRCh38',\n         ...\n         ...\n         ...\n     'biotype': 'protein_coding',\n     'start': 32315474}\n\n\nThe parameters for the POST endpoints are also provided via the ``params`` \nkeyword  , such as in the next example:\n\n.. code-block:: python\n\n    >>> ensembl_rest.symbol_post(species='human',\n                                 params={'symbols': [\"BRCA2\", \n                                                     \"TP53\", \n                                                     \"BRAF\" ]})\n\n::\n\n    {\n        \"BRCA2\": {\n            \"source\": \"ensembl_havana\",\n            \"object_type\": \"Gene\",\n            \"logic_name\": \"ensembl_havana_gene\",\n            \"description\": \"BRCA2, DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]\",\n            ...\n            ...\n        },\n        \"TP53\": {\n            ...\n            ...\n        }.\n        \"BRAF\": {\n            ...\n            ...\n            \"strand\": -1,\n            \"id\": \"ENSG00000157764\",\n            \"start\": 140719327\n        }\n    }\n\nAnother common usage is to fetch sequences of known genes:\n\n.. code-block:: python\n\n    >>> ensembl_rest.sequence_id('ENSG00000157764')\n\n\n::\n\n    {'desc': 'chromosome:GRCh38:7:140719327:140924928:-1',\n     'query': 'ENSG00000157764',\n     'version': 13,\n     'id': 'ENSG00000157764',\n     'seq': 'TTCCCCCAATCCCCTCAGGCTCGG...ATTGACTGCATGGAGAAGTCTTCA',\n     'molecule': 'dna'}\n\nif you want it in FASTA, you can modify the ``headers``:\n\n.. code-block:: python\n\n    >>> ensembl_rest.sequence_id(\n            'ENSG00000157764', \n            headers={'content-type': 'text/x-fasta'})\n\n\n::\n\n    >ENSG00000157764.13 chromosome:GRCh38:7:140719327:140924928:-1\n    TTCCCCCAATCCCCTCAGGCTCGGCTGCGCCCGGGGCCGCGGGCCGGTACCTGAGGTGGC\n    CCAGGCGCCCTCCGCCCGCGGCGCCGCCCGGGCCGCTCCTCCCCGCGCCCCCCGCGCCCC\n    CCGCTCCTCCGCCTCCGCCTCCGCCTCCGCCTCCCCCAGCTCTCCGCCTCCCTTCCCCCT\n    ...\n\nNotice that, if left unchanged, the methods ask for data in dictionary (JSON) \nformat so that they are easy to use. If the response cannot be decoded as such,\nthen it is returned as plain text, such as the above.\n\nYou can also map betweeen assemblies...\n\n.. code-block:: python\n\n    >>> ensembl_rest.assembly_map(species='human',\n                                  asm_one='GRCh37',\n                                  region='X:1000000..1000100:1',\n                                  asm_two='GRCh38')\n\n\n    # Or...\n    >>> region_str = ensembl_rest.region_str(chrom='X',\n                                             start=1000000,\n                                             end=1000100)\n\n    >>> ensembl_rest.assembly_map(species='human',\n                                  asm_one='GRCh37',\n                                  region=region_str,\n                                  asm_two='GRCh38')\n\n::\n\n    {'mappings': [{'original': {'seq_region_name': 'X',\n        'strand': 1,\n        'coord_system': 'chromosome',\n        'end': 1000100,\n        'start': 1000000,\n        'assembly': 'GRCh37'},\n       'mapped': {'seq_region_name': 'X',\n        'strand': 1,\n        'coord_system': 'chromosome',\n        'end': 1039365,\n        'start': 1039265,\n        'assembly': 'GRCh38'}}]}\n\n\nThe above problem (mapping from one assembly to another) is so frequent that \nthe library provides a specialized class ``AssemblyMapper`` to efficiently\nmapping large amounts of regions between assemblies. This class avoids the \ntime-consuming task of making a web request every time a mapping is needed by \nfetching the mapping of the whole assembly right from the instantiation. This \nis a time-consuming operation by itself, but it pays off when one has to \ntransform repeatedly betweeen assemblies.::\n\n\n        >>> mapper = ensembl_rest.AssemblyMapper(\n                        species='human', \n                        from_assembly='GRCh37',\n                        to_assembly='GRCh38'\n                    )\n\n        >>> mapper.map(chrom='1', pos=1000000)\n        1064620\n\nYou can also find orthologs, paralogs and gene tree information, along with \nvariation data and basically everything `Ensembl <http://rest.ensembl.org/>`__ \nhas to offer.\n\nIf you want to instantiate your own client, you can do it by using the \n``ensembl_rest.EnsemblClient`` class, this class is the one that contains all \nthe endpoint methods.\n\n.. code-block:: python\n\n    >>> client = ensembl_rest.EnsemblClient()\n\n    >>> client.symbol_lookup('homo sapiens', 'TP53')\n\n\n::\n\n   {'source': 'ensembl_havana',\n     'object_type': 'Gene',\n     'logic_name': 'ensembl_havana_gene',\n     'version': 14,\n     'species': 'human',\n     ...\n     ...\n     ...}\n\n\nFinally, the library exposes the class ``ensembl_rest.HTTPError`` that allows to \nhandle errors in the requests. An example of it's utility is when using the \n``GET genetree/member/symbol/:species/:symbol`` endpoint to query for gene trees \nin order to find ortholog and paralog proteins and genes. This endpoint returns \nan HTTP error when a gene tree is not found with code 400 and the error message \n``Lookup found nothing``. We can use this information to detect the error \nand handle it, or to simply ignore it if we expected it:\n\n\n.. code-block:: python\n\n    for gene in ['TP53', 'rare-new-gene', 'BRCA2']:\n        try:\n            gene_tree = ensembl_rest.genetree_member_symbol(\n                            species='human',\n                            symbol=gene,\n                            params={'prune_species': 'human'}\n                        )\n            # Assuming we have a function to extract the paralogs\n            paralogs = extract_paralogs(gene_tree['tree'])\n            print(paralogs)\n\n        # Handle the case when there's no gene tree\n        except ensembl_rest.HTTPError as err:\n            error_code = err.response.status_code\n            error_message = err.response.json()['error']\n            if (error_code == 400) \\\n               and ('Lookup found nothing' in error_message):\n                # Skip the gene with no data\n                pass\n            else:\n                # The exception was caused by another problem\n                # Raise the exception again\n                raise\n\n\n\nMeta\n====\n\n**Author**: `Ad115 <https://agargar.wordpress.com/>`_ -\n`Github <https://github.com/Ad115/>`_ \u2013 a.garcia230395@gmail.com\n\n**Project pages**: \n`Docs <https://ensemblrest.readthedocs.io>`__ - `@GitHub <https://github.com/Ad115/EnsemblRest/>`__ - `@PyPI <https://pypi.org/project/ensembl-rest/>`__\n\nDistributed under the MIT license. See\n`LICENSE <https://github.com/Ad115/EnsemblRest/blob/master/LICENSE>`_\nfor more information.\n\nContributing\n============\n\n1. Check for open issues or open a fresh issue to start a discussion\n   around a feature idea or a bug.\n2. Fork `the repository <https://github.com/Ad115/EnsemblRest/>`_\n   on GitHub to start making your changes to a feature branch, derived\n   from the **master** branch.\n3. Write a test which shows that the bug was fixed or that the feature\n   works as expected.\n4. Send a pull request and bug the maintainer until it gets merged and\n   published.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ad115/EnsemblRest", "keywords": "ensembl rest api client genomes", "license": "", "maintainer": "", "maintainer_email": "", "name": "ensembl-rest", "package_url": "https://pypi.org/project/ensembl-rest/", "platform": "", "project_url": "https://pypi.org/project/ensembl-rest/", "project_urls": {"Author": "https://agargar.wordpress.com/", "Documentation": "https://ensemblrest.readthedocs.io", "Homepage": "https://github.com/Ad115/EnsemblRest", "Say Thanks!": "https://saythanks.io/to/Ad115"}, "release_url": "https://pypi.org/project/ensembl-rest/0.3.3/", "requires_dist": ["importlib-resources", "requests", "simplejson", "intervaltree", "jupyter ; extra == 'dev'", "scrapy ; extra == 'dev'"], "requires_python": "", "summary": "An interface to the Ensembl REST APIs, biological data at your fingertips.", "version": "0.3.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"ensembl-rest\">\n<h2>Ensembl-REST</h2>\n<a href=\"https://saythanks.io/to/Ad115\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/Say%20Thanks-!-1EAEDB.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/51b7f145f134a99621f186ddcdb0af646a24c8aa/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f5361792532305468616e6b732d212d3145414544422e737667\"></a>\n<p>A Python interface to the Ensembl REST APIs. A whole world of biological data\nat your fingertips.</p>\n<p>The <a href=\"https://www.ensembl.org/index.html\" rel=\"nofollow\">Ensembl database</a> contains\nreference biological data on almost any organism. Now it is easy to\naccess this data programatically through their REST API.</p>\n<p>The full list of endpoints for the Ensembl REST API endpoints along with\nendpoint-specific documentation can be found on <a href=\"https://rest.ensembl.org/\" rel=\"nofollow\">their website</a>.</p>\n<p>This library also includes some utilities built on top of the APIs designed to\nease working with them, including an <a href=\"https://ad115.github.io/EnsemblRest/#ensembl_rest.AssemblyMapper\" rel=\"nofollow\">AssemblyMapper</a> class\nthat helps in the conversion between different genome assemblies.</p>\n<p>This project uses code from <a href=\"https://github.com/rapidstack/RESTEasy\" rel=\"nofollow\">RESTEasy</a>,\nwhich made my life much easier. Thanks!</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>You can install from <a href=\"https://pypi.org/project/ensembl-rest/\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install ensembl_rest\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The library exports methods that point to each endpoint of the\nAPI, such as:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ensembl_rest</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">(</span>\n        <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'homo sapiens'</span><span class=\"p\">,</span>\n        <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'BRCA2'</span>\n    <span class=\"p\">)</span>\n</pre>\n<pre>{ 'species': 'human',\n  'object_type': 'Gene',\n  'description': 'BRCA2, DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]',\n  'assembly_name': 'GRCh38',\n  'end': 32400266,\n  ...\n  ...\n  ...\n  'seq_region_name': '13',\n  'strand': 1,\n  'id': 'ENSG00000139618',\n  'start': 32315474}\n</pre>\n<p>All the endpoints are listed on the <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">API website</a>.\nA quick lookup of the methods can be obtained by calling help on the module:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">ensembl_rest</span><span class=\"p\">)</span>\n</pre>\n<p>If you want to use an endpoint from the ones enlisted in the <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">API website</a>, say <tt>GET <span class=\"pre\">lookup/symbol/:species/:symbol</span></tt> ,\nthen the name of the corresponding method is in the endpoint documentation URL,\nin this case, the documentation links to\n<a href=\"http://rest.ensembl.org/documentation/info/symbol_lookup\" rel=\"nofollow\">http://rest.ensembl.org/documentation/info/symbol_lookup</a> so the\ncorresponding method name is <tt>symbol_lookup</tt>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">)</span>\n</pre>\n<pre>Help on function symbol_lookup in module ensembl_rest:\n\nsymbol_lookup(*args, **kwargs)\n        Lookup ``GET lookup/symbol/:species/:symbol``\n\n    Find the species and database for a symbol in a linked external database\n\n\n    **Parameters**\n\n    - Required:\n            + **Name**:  species\n            + *Type*:  String\n            + *Description*:  Species name/alias\n            + *Default*:  -\n            + *Example Values*:  homo_sapiens, human\n    ...\n    ...\n\n    - Optional:\n\n            + **Name**:  expand\n            + *Type*:  Boolean(0,1)\n            + *Description*:  Expands the search to include any connected features. e.g. If the object is a gene, its transcripts, translations and exons will be returned as well.\n    ...\n    ...\n\n    **Resource info**\n\n    - **Methods**:  GET\n    - **Response formats**: json, xml, jsonp\n\n\n    **More info**\n\n    https://rest.ensembl.org/documentation/info/symbol_lookup\n</pre>\n<p>We can see from the resource string <tt>GET <span class=\"pre\">lookup/symbol/:species/:symbol</span></tt> that\nthis method contains 2 parameters called species and symbol, so we can call the\nmethod in the following way:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">(</span>\n        <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'homo sapiens'</span><span class=\"p\">,</span>\n        <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'TP53'</span>\n    <span class=\"p\">)</span>\n\n<span class=\"c1\"># Or like this...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">(</span><span class=\"s1\">'homo sapiens'</span><span class=\"p\">,</span> <span class=\"s1\">'TP53'</span><span class=\"p\">)</span>\n</pre>\n<pre>{'source': 'ensembl_havana',\n  'object_type': 'Gene',\n  'logic_name': 'ensembl_havana_gene',\n ...\n ...\n ...\n  'start': 32315474}\n</pre>\n<p>One can provide optional parameters with the <tt>params</tt>\nkeyword (the specific parameters to pass depend on the specific endpoint,\nthe official endpoints documentation can be found <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">here</a>)_:</p>\n<pre><span class=\"c1\"># Fetch also exons, transcripts, etc...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">(</span><span class=\"s1\">'human'</span><span class=\"p\">,</span> <span class=\"s1\">'BRCA2'</span><span class=\"p\">,</span>\n                               <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'expand'</span><span class=\"p\">:</span><span class=\"kc\">True</span><span class=\"p\">})</span>\n</pre>\n<pre>{'source': 'ensembl_havana',\n 'seq_region_name': '13',\n 'Transcript': [{'source': 'ensembl_havana',\n   'object_type': 'Transcript',\n   'logic_name': 'ensembl_havana_transcript',\n   'Exon': [{'object_type': 'Exon',\n     'version': 4,\n     'species': 'human',\n     'assembly_name': 'GRCh38',\n     ...\n     ...\n     ...\n 'biotype': 'protein_coding',\n 'start': 32315474}\n</pre>\n<p>The parameters for the POST endpoints are also provided via the <tt>params</tt>\nkeyword  , such as in the next example:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">symbol_post</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span>\n                             <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'symbols'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"BRCA2\"</span><span class=\"p\">,</span>\n                                                 <span class=\"s2\">\"TP53\"</span><span class=\"p\">,</span>\n                                                 <span class=\"s2\">\"BRAF\"</span> <span class=\"p\">]})</span>\n</pre>\n<pre>{\n    \"BRCA2\": {\n        \"source\": \"ensembl_havana\",\n        \"object_type\": \"Gene\",\n        \"logic_name\": \"ensembl_havana_gene\",\n        \"description\": \"BRCA2, DNA repair associated [Source:HGNC Symbol;Acc:HGNC:1101]\",\n        ...\n        ...\n    },\n    \"TP53\": {\n        ...\n        ...\n    }.\n    \"BRAF\": {\n        ...\n        ...\n        \"strand\": -1,\n        \"id\": \"ENSG00000157764\",\n        \"start\": 140719327\n    }\n}\n</pre>\n<p>Another common usage is to fetch sequences of known genes:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">sequence_id</span><span class=\"p\">(</span><span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">)</span>\n</pre>\n<pre>{'desc': 'chromosome:GRCh38:7:140719327:140924928:-1',\n 'query': 'ENSG00000157764',\n 'version': 13,\n 'id': 'ENSG00000157764',\n 'seq': 'TTCCCCCAATCCCCTCAGGCTCGG...ATTGACTGCATGGAGAAGTCTTCA',\n 'molecule': 'dna'}\n</pre>\n<p>if you want it in FASTA, you can modify the <tt>headers</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">sequence_id</span><span class=\"p\">(</span>\n        <span class=\"s1\">'ENSG00000157764'</span><span class=\"p\">,</span>\n        <span class=\"n\">headers</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'content-type'</span><span class=\"p\">:</span> <span class=\"s1\">'text/x-fasta'</span><span class=\"p\">})</span>\n</pre>\n<pre>&gt;ENSG00000157764.13 chromosome:GRCh38:7:140719327:140924928:-1\nTTCCCCCAATCCCCTCAGGCTCGGCTGCGCCCGGGGCCGCGGGCCGGTACCTGAGGTGGC\nCCAGGCGCCCTCCGCCCGCGGCGCCGCCCGGGCCGCTCCTCCCCGCGCCCCCCGCGCCCC\nCCGCTCCTCCGCCTCCGCCTCCGCCTCCGCCTCCCCCAGCTCTCCGCCTCCCTTCCCCCT\n...\n</pre>\n<p>Notice that, if left unchanged, the methods ask for data in dictionary (JSON)\nformat so that they are easy to use. If the response cannot be decoded as such,\nthen it is returned as plain text, such as the above.</p>\n<p>You can also map betweeen assemblies\u2026</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">assembly_map</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span>\n                              <span class=\"n\">asm_one</span><span class=\"o\">=</span><span class=\"s1\">'GRCh37'</span><span class=\"p\">,</span>\n                              <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"s1\">'X:1000000..1000100:1'</span><span class=\"p\">,</span>\n                              <span class=\"n\">asm_two</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Or...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">region_str</span> <span class=\"o\">=</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">region_str</span><span class=\"p\">(</span><span class=\"n\">chrom</span><span class=\"o\">=</span><span class=\"s1\">'X'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">start</span><span class=\"o\">=</span><span class=\"mi\">1000000</span><span class=\"p\">,</span>\n                                         <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"mi\">1000100</span><span class=\"p\">)</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">assembly_map</span><span class=\"p\">(</span><span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span>\n                              <span class=\"n\">asm_one</span><span class=\"o\">=</span><span class=\"s1\">'GRCh37'</span><span class=\"p\">,</span>\n                              <span class=\"n\">region</span><span class=\"o\">=</span><span class=\"n\">region_str</span><span class=\"p\">,</span>\n                              <span class=\"n\">asm_two</span><span class=\"o\">=</span><span class=\"s1\">'GRCh38'</span><span class=\"p\">)</span>\n</pre>\n<pre>{'mappings': [{'original': {'seq_region_name': 'X',\n    'strand': 1,\n    'coord_system': 'chromosome',\n    'end': 1000100,\n    'start': 1000000,\n    'assembly': 'GRCh37'},\n   'mapped': {'seq_region_name': 'X',\n    'strand': 1,\n    'coord_system': 'chromosome',\n    'end': 1039365,\n    'start': 1039265,\n    'assembly': 'GRCh38'}}]}\n</pre>\n<p>The above problem (mapping from one assembly to another) is so frequent that\nthe library provides a specialized class <tt>AssemblyMapper</tt> to efficiently\nmapping large amounts of regions between assemblies. This class avoids the\ntime-consuming task of making a web request every time a mapping is needed by\nfetching the mapping of the whole assembly right from the instantiation. This\nis a time-consuming operation by itself, but it pays off when one has to\ntransform repeatedly betweeen assemblies.:</p>\n<pre>&gt;&gt;&gt; mapper = ensembl_rest.AssemblyMapper(\n                species='human',\n                from_assembly='GRCh37',\n                to_assembly='GRCh38'\n            )\n\n&gt;&gt;&gt; mapper.map(chrom='1', pos=1000000)\n1064620\n</pre>\n<p>You can also find orthologs, paralogs and gene tree information, along with\nvariation data and basically everything <a href=\"http://rest.ensembl.org/\" rel=\"nofollow\">Ensembl</a>\nhas to offer.</p>\n<p>If you want to instantiate your own client, you can do it by using the\n<tt>ensembl_rest.EnsemblClient</tt> class, this class is the one that contains all\nthe endpoint methods.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">EnsemblClient</span><span class=\"p\">()</span>\n\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">symbol_lookup</span><span class=\"p\">(</span><span class=\"s1\">'homo sapiens'</span><span class=\"p\">,</span> <span class=\"s1\">'TP53'</span><span class=\"p\">)</span>\n</pre>\n<pre>{'source': 'ensembl_havana',\n  'object_type': 'Gene',\n  'logic_name': 'ensembl_havana_gene',\n  'version': 14,\n  'species': 'human',\n  ...\n  ...\n  ...}\n</pre>\n<p>Finally, the library exposes the class <tt>ensembl_rest.HTTPError</tt> that allows to\nhandle errors in the requests. An example of it\u2019s utility is when using the\n<tt>GET <span class=\"pre\">genetree/member/symbol/:species/:symbol</span></tt> endpoint to query for gene trees\nin order to find ortholog and paralog proteins and genes. This endpoint returns\nan HTTP error when a gene tree is not found with code 400 and the error message\n<tt>Lookup found nothing</tt>. We can use this information to detect the error\nand handle it, or to simply ignore it if we expected it:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">gene</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"s1\">'TP53'</span><span class=\"p\">,</span> <span class=\"s1\">'rare-new-gene'</span><span class=\"p\">,</span> <span class=\"s1\">'BRCA2'</span><span class=\"p\">]:</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">gene_tree</span> <span class=\"o\">=</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">genetree_member_symbol</span><span class=\"p\">(</span>\n                        <span class=\"n\">species</span><span class=\"o\">=</span><span class=\"s1\">'human'</span><span class=\"p\">,</span>\n                        <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"n\">gene</span><span class=\"p\">,</span>\n                        <span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'prune_species'</span><span class=\"p\">:</span> <span class=\"s1\">'human'</span><span class=\"p\">}</span>\n                    <span class=\"p\">)</span>\n        <span class=\"c1\"># Assuming we have a function to extract the paralogs</span>\n        <span class=\"n\">paralogs</span> <span class=\"o\">=</span> <span class=\"n\">extract_paralogs</span><span class=\"p\">(</span><span class=\"n\">gene_tree</span><span class=\"p\">[</span><span class=\"s1\">'tree'</span><span class=\"p\">])</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">paralogs</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Handle the case when there's no gene tree</span>\n    <span class=\"k\">except</span> <span class=\"n\">ensembl_rest</span><span class=\"o\">.</span><span class=\"n\">HTTPError</span> <span class=\"k\">as</span> <span class=\"n\">err</span><span class=\"p\">:</span>\n        <span class=\"n\">error_code</span> <span class=\"o\">=</span> <span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">status_code</span>\n        <span class=\"n\">error_message</span> <span class=\"o\">=</span> <span class=\"n\">err</span><span class=\"o\">.</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">json</span><span class=\"p\">()[</span><span class=\"s1\">'error'</span><span class=\"p\">]</span>\n        <span class=\"k\">if</span> <span class=\"p\">(</span><span class=\"n\">error_code</span> <span class=\"o\">==</span> <span class=\"mi\">400</span><span class=\"p\">)</span> \\\n           <span class=\"ow\">and</span> <span class=\"p\">(</span><span class=\"s1\">'Lookup found nothing'</span> <span class=\"ow\">in</span> <span class=\"n\">error_message</span><span class=\"p\">):</span>\n            <span class=\"c1\"># Skip the gene with no data</span>\n            <span class=\"k\">pass</span>\n        <span class=\"k\">else</span><span class=\"p\">:</span>\n            <span class=\"c1\"># The exception was caused by another problem</span>\n            <span class=\"c1\"># Raise the exception again</span>\n            <span class=\"k\">raise</span>\n</pre>\n</div>\n<div id=\"meta\">\n<h2>Meta</h2>\n<p><strong>Author</strong>: <a href=\"https://agargar.wordpress.com/\" rel=\"nofollow\">Ad115</a> -\n<a href=\"https://github.com/Ad115/\" rel=\"nofollow\">Github</a> \u2013 <a href=\"mailto:a.garcia230395%40gmail.com\">a<span>.</span>garcia230395<span>@</span>gmail<span>.</span>com</a></p>\n<p><strong>Project pages</strong>:\n<a href=\"https://ensemblrest.readthedocs.io\" rel=\"nofollow\">Docs</a> - <a href=\"https://github.com/Ad115/EnsemblRest/\" rel=\"nofollow\">@GitHub</a> - <a href=\"https://pypi.org/project/ensembl-rest/\" rel=\"nofollow\">@PyPI</a></p>\n<p>Distributed under the MIT license. See\n<a href=\"https://github.com/Ad115/EnsemblRest/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a>\nfor more information.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<ol>\n<li>Check for open issues or open a fresh issue to start a discussion\naround a feature idea or a bug.</li>\n<li>Fork <a href=\"https://github.com/Ad115/EnsemblRest/\" rel=\"nofollow\">the repository</a>\non GitHub to start making your changes to a feature branch, derived\nfrom the <strong>master</strong> branch.</li>\n<li>Write a test which shows that the bug was fixed or that the feature\nworks as expected.</li>\n<li>Send a pull request and bug the maintainer until it gets merged and\npublished.</li>\n</ol>\n</div>\n\n          </div>"}, "last_serial": 5442777, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "4a42d840e29f704fc33ce2dc8d15b8d1", "sha256": "7690fec223ec40c6f654bd33848f008a91ecdf47660c8326b7458c3f62823c3e"}, "downloads": -1, "filename": "ensembl_rest-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "4a42d840e29f704fc33ce2dc8d15b8d1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7124, "upload_time": "2018-09-01T08:02:15", "upload_time_iso_8601": "2018-09-01T08:02:15.082809Z", "url": "https://files.pythonhosted.org/packages/d7/0b/c84f41ed41c8dc027a3b944d4526c956c443a8ba599866ffb44cf0a8793b/ensembl_rest-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "822ed8c8f15354627c9763d35621eddb", "sha256": "7440c739d7263405ba3ddda9897d1be09e712cad2053aa72d15a833f5d2eb303"}, "downloads": -1, "filename": "ensembl_rest-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "822ed8c8f15354627c9763d35621eddb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7113, "upload_time": "2018-09-01T08:08:20", "upload_time_iso_8601": "2018-09-01T08:08:20.182545Z", "url": "https://files.pythonhosted.org/packages/55/12/a4ec9eed44f3445368e1b1c440f394ba60a8325b72f86a13522af690a2c2/ensembl_rest-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "aec332f60c5109db30ebc468bcac32ab", "sha256": "6dfc4b95374953444f97a3502fa909ec7072714bd1cef309381db1cd285cddfc"}, "downloads": -1, "filename": "ensembl_rest-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "aec332f60c5109db30ebc468bcac32ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7110, "upload_time": "2018-09-01T08:10:02", "upload_time_iso_8601": "2018-09-01T08:10:02.528196Z", "url": "https://files.pythonhosted.org/packages/51/eb/4f6f8ca4b7c9da46b02cf32d878ec0c1555409a5e50907d39d5cd9969e94/ensembl_rest-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "bd21abaec12f0885c0e960c90462162f", "sha256": "f6231c3bcc260c33936babbea6ed1cdc133c5bfd4f99029b95a1c2eaf939fcb6"}, "downloads": -1, "filename": "ensembl_rest-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "bd21abaec12f0885c0e960c90462162f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7100, "upload_time": "2018-09-01T08:12:57", "upload_time_iso_8601": "2018-09-01T08:12:57.323625Z", "url": "https://files.pythonhosted.org/packages/ae/9b/2c678f2203ee32e282d853d920fef80dd9b8c722a8b473001324218e405c/ensembl_rest-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6c71bbcaea21f278a712f46a78c1164a", "sha256": "c231588ff9fd6b3a38231217119d120d6705ab5a3dd328a5af9a97fe95c0e083"}, "downloads": -1, "filename": "ensembl_rest-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6c71bbcaea21f278a712f46a78c1164a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7223, "upload_time": "2018-09-01T09:04:44", "upload_time_iso_8601": "2018-09-01T09:04:44.335047Z", "url": "https://files.pythonhosted.org/packages/a3/b9/06edbbbfc1ae5ec93a391712602cc1d6cefd976f33ed6ee9a96688f0aeb2/ensembl_rest-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "b0441ab8805fbf6fdc1c7d8ad1ce81b3", "sha256": "970ed0729579115fd95f774a8fc526965f3597dd8ad44cf6ea35ad026394cc19"}, "downloads": -1, "filename": "ensembl_rest-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b0441ab8805fbf6fdc1c7d8ad1ce81b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7264, "upload_time": "2018-09-02T03:58:01", "upload_time_iso_8601": "2018-09-02T03:58:01.828601Z", "url": "https://files.pythonhosted.org/packages/0d/cb/ea56a8bbdfddc6b63bc0c15a30fe68a3e97c8a2fcfc5b67f3c31967b2a37/ensembl_rest-0.0.6-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "88d4f18a560d92077cd673d12e76545d", "sha256": "c5cff5529da91f592d9a70d1c681deae7780877d2de8b4b112e033bfd5d2867d"}, "downloads": -1, "filename": "ensembl_rest-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "88d4f18a560d92077cd673d12e76545d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13689, "upload_time": "2018-09-02T05:27:13", "upload_time_iso_8601": "2018-09-02T05:27:13.930399Z", "url": "https://files.pythonhosted.org/packages/11/f6/d97693cf84a2eb81e54c84aabd035b4452a005c858f3628057aeb0ff698c/ensembl_rest-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "826bb26f98af05402d9e966f3cb15447", "sha256": "52ca8e82c66af022ecd5724b7596bd3416cf2d836a9eb0ffbd95f7aeb78d65a9"}, "downloads": -1, "filename": "ensembl_rest-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "826bb26f98af05402d9e966f3cb15447", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13875, "upload_time": "2018-09-02T05:33:17", "upload_time_iso_8601": "2018-09-02T05:33:17.104171Z", "url": "https://files.pythonhosted.org/packages/bd/4f/062ca486f68c0cd11b7eb54ecabc07ccc6368d32a63dd80183cf669eafa1/ensembl_rest-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "e329e28c053256a72e12292b0dd6eb16", "sha256": "a4bec99d2307b25277b510254db80b57b6b8356311a97d461064b88125d63c13"}, "downloads": -1, "filename": "ensembl_rest-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "e329e28c053256a72e12292b0dd6eb16", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13875, "upload_time": "2018-09-02T05:41:07", "upload_time_iso_8601": "2018-09-02T05:41:07.394017Z", "url": "https://files.pythonhosted.org/packages/db/5f/dcab346e79d6403e486d37489385ae9f97287c7c3486addc7d2419c44bdd/ensembl_rest-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "0d91738de82564359b7cceaf80250c24", "sha256": "177215b279499f8d97da865ec165369cf8ce98c039eef5a8b9fbaad4486e0f55"}, "downloads": -1, "filename": "ensembl_rest-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "0d91738de82564359b7cceaf80250c24", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13883, "upload_time": "2018-09-02T05:44:24", "upload_time_iso_8601": "2018-09-02T05:44:24.788573Z", "url": "https://files.pythonhosted.org/packages/cd/1f/34543ff45a57285980f683a9058f6e934a6cb840c3165cbafcba573d34c1/ensembl_rest-0.1.3-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "2ca1ff0835890aebf29c94b6ba7eef83", "sha256": "59ad7a33091eded3b5ff413aeefdf4413ec4f30d5e0be914344e80facc10d221"}, "downloads": -1, "filename": "ensembl_rest-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "2ca1ff0835890aebf29c94b6ba7eef83", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 13898, "upload_time": "2018-09-02T05:47:57", "upload_time_iso_8601": "2018-09-02T05:47:57.142831Z", "url": "https://files.pythonhosted.org/packages/6e/83/7522a498ce15ed880a1b4453058eb2eac527c7230d70aa7876cf596bb6da/ensembl_rest-0.1.4-py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "8da756e36bbecfe48babb32a82d88744", "sha256": "ed73235727a6736f041111c81e92585d3af5d88d074d912cd6ec0d2b3ea85c42"}, "downloads": -1, "filename": "ensembl_rest-0.1.5-py3-none-any.whl", "has_sig": false, "md5_digest": "8da756e36bbecfe48babb32a82d88744", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15096, "upload_time": "2018-09-03T08:15:57", "upload_time_iso_8601": "2018-09-03T08:15:57.493925Z", "url": "https://files.pythonhosted.org/packages/dc/87/b5aee01490a2a09430abc0dc83ee7b048298a6134d4166153163c9759f4c/ensembl_rest-0.1.5-py3-none-any.whl", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "78d146ca514bebcc3986e66a60b6e5e2", "sha256": "ada610875b382a443910c2a3b8d93c3cac5fb84714987b5021d359a4e2b2a2c5"}, "downloads": -1, "filename": "ensembl_rest-0.1.6-py3-none-any.whl", "has_sig": false, "md5_digest": "78d146ca514bebcc3986e66a60b6e5e2", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 14990, "upload_time": "2018-09-03T08:27:21", "upload_time_iso_8601": "2018-09-03T08:27:21.262653Z", "url": "https://files.pythonhosted.org/packages/df/d9/762bfdaa0bfbd1f342ae921eca340de335c891cf572022a7dd4b3cf077bd/ensembl_rest-0.1.6-py3-none-any.whl", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "4ef23077955008ee8f0c0e8772436354", "sha256": "28fe3671d1b28e1ba969018153b2d2d5c026b6d66e2c7a194d254e6c3b126f5c"}, "downloads": -1, "filename": "ensembl_rest-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "4ef23077955008ee8f0c0e8772436354", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11899, "upload_time": "2018-11-12T19:53:44", "upload_time_iso_8601": "2018-11-12T19:53:44.519812Z", "url": "https://files.pythonhosted.org/packages/9d/b1/a0bd7e6ccce3d163d56b9cc011079b16afaddcdd76ca74df014ea6387447/ensembl_rest-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "050b24d032fc8038ecdace64352b9416", "sha256": "7c906c01770be7cc746c60f39fa99292c211e1ef28b93353be72168034dd763c"}, "downloads": -1, "filename": "ensembl_rest-0.1.7.tar.gz", "has_sig": false, "md5_digest": "050b24d032fc8038ecdace64352b9416", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20260, "upload_time": "2018-11-12T19:53:49", "upload_time_iso_8601": "2018-11-12T19:53:49.249128Z", "url": "https://files.pythonhosted.org/packages/be/12/3f13889830060c6569550bafbab95a1b9295c76140609f4a01c496699ad4/ensembl_rest-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "1ce62037bd1048cd83a66dd63e7c9ed4", "sha256": "6fdea7bd0511fc47e53ea383d683f2504a5fcce26038203f9b8a486656d572ba"}, "downloads": -1, "filename": "ensembl_rest-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "1ce62037bd1048cd83a66dd63e7c9ed4", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20826, "upload_time": "2018-11-12T20:42:46", "upload_time_iso_8601": "2018-11-12T20:42:46.151548Z", "url": "https://files.pythonhosted.org/packages/48/74/c70b81e291a4ce301ddb238bddb7ac7e3413f34d73e2837a28a446134f85/ensembl_rest-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bf184a1f55b66bf0b9d4e37e8ab4e7eb", "sha256": "31c735c6ce3167dbc344614ad2b2d0bae1a6914a3e6ceb9067c3c5c587768677"}, "downloads": -1, "filename": "ensembl_rest-0.1.8.tar.gz", "has_sig": false, "md5_digest": "bf184a1f55b66bf0b9d4e37e8ab4e7eb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20854, "upload_time": "2018-11-12T20:42:48", "upload_time_iso_8601": "2018-11-12T20:42:48.704892Z", "url": "https://files.pythonhosted.org/packages/fe/31/ed2d3d05c9325357dc56671bc2ec3103499cd1c3110e81bfaa6973a70cf5/ensembl_rest-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "5c238376e23d8fe3c36e241fa8d8d9c8", "sha256": "64845b94c3d2f262732c67241cc3a640be3064eb6919b278e7833429d5dc4351"}, "downloads": -1, "filename": "ensembl_rest-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "5c238376e23d8fe3c36e241fa8d8d9c8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20876, "upload_time": "2019-02-05T06:09:03", "upload_time_iso_8601": "2019-02-05T06:09:03.953959Z", "url": "https://files.pythonhosted.org/packages/5e/be/43379c5b71f43d270b3ed31813e68e63307078acfdc388017f477b9bdcb3/ensembl_rest-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ab14fdae967e7960de30e176a23f5f35", "sha256": "0fd4a0ee97d91d52c6451da48fdf64debfe735a683a5c1d72c2bd8c57b785ad1"}, "downloads": -1, "filename": "ensembl_rest-0.1.9.tar.gz", "has_sig": false, "md5_digest": "ab14fdae967e7960de30e176a23f5f35", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20905, "upload_time": "2019-02-05T06:09:08", "upload_time_iso_8601": "2019-02-05T06:09:08.891810Z", "url": "https://files.pythonhosted.org/packages/2a/e0/f851b4e719dc3e277056f4a34622d23d032f47edcd8baa342bd5de30a649/ensembl_rest-0.1.9.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "1e875896592d41a637cb1f0e045a022b", "sha256": "7fe0deeb58004174def0211870477f305e3dbf491230c4d8d79e130dfbdeb14a"}, "downloads": -1, "filename": "ensembl_rest-0.2.0-py3.6.egg", "has_sig": false, "md5_digest": "1e875896592d41a637cb1f0e045a022b", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 31991, "upload_time": "2019-06-23T05:29:39", "upload_time_iso_8601": "2019-06-23T05:29:39.564975Z", "url": "https://files.pythonhosted.org/packages/a4/1b/8fee49b4d808887c91bf3c75283f8ba29c8ad8161291c861bfc97e5698c4/ensembl_rest-0.2.0-py3.6.egg", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "9ace424db27e67da1ee9bb1d0834cb09", "sha256": "f6e056b1669e30946c86bd8a1014cc6d744d5d306181b9f3d4bc6413f5dc6fd7"}, "downloads": -1, "filename": "ensembl_rest-0.2.1-py3.6.egg", "has_sig": false, "md5_digest": "9ace424db27e67da1ee9bb1d0834cb09", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 31977, "upload_time": "2019-06-23T05:47:45", "upload_time_iso_8601": "2019-06-23T05:47:45.301230Z", "url": "https://files.pythonhosted.org/packages/1b/16/d8cabbc4ccdce2cd65c8c4a1e70e2cf83d02375e22ceb01f7fc8052c7b80/ensembl_rest-0.2.1-py3.6.egg", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "5a0ac1986d9c8310698fb7e4b20beeaf", "sha256": "cefefeff8d88988fa223f10417ef0846bd7f8ab6ec41c4d36ce03a4940e3b1ed"}, "downloads": -1, "filename": "ensembl_rest-0.3.0-py3.6.egg", "has_sig": false, "md5_digest": "5a0ac1986d9c8310698fb7e4b20beeaf", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 43801, "upload_time": "2019-06-23T17:32:47", "upload_time_iso_8601": "2019-06-23T17:32:47.275597Z", "url": "https://files.pythonhosted.org/packages/f2/26/9da996b4e07b3ae92d41807fbef7631a0ea11c6c45acccb20513a13416be/ensembl_rest-0.3.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "1b813ab3828a7f77c1bee44d1df7cba4", "sha256": "808c6e5f2d462e593df74b09b35df105466fc4e409941e82075d7a1a23784307"}, "downloads": -1, "filename": "ensembl_rest-0.3.0.tar.gz", "has_sig": false, "md5_digest": "1b813ab3828a7f77c1bee44d1df7cba4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30133, "upload_time": "2019-06-24T19:40:05", "upload_time_iso_8601": "2019-06-24T19:40:05.024579Z", "url": "https://files.pythonhosted.org/packages/12/86/caf4775d65aacd3beda6476a868b930f0891214be8cd6a162ba748ff0663/ensembl_rest-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "4e9a7e8ddff5cef9914599ca3bd6433d", "sha256": "3892af008a3b4c8feeb4fb988fe80e19259471d4dfd4f6345db0a919d474070a"}, "downloads": -1, "filename": "ensembl_rest-0.3.1.linux-x86_64.tar.gz", "has_sig": false, "md5_digest": "4e9a7e8ddff5cef9914599ca3bd6433d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36381, "upload_time": "2019-06-24T19:47:38", "upload_time_iso_8601": "2019-06-24T19:47:38.771728Z", "url": "https://files.pythonhosted.org/packages/5b/ac/7aa27f051182a3f37c9574807fad539c55b6deafa98a0a350e50505865f5/ensembl_rest-0.3.1.linux-x86_64.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "3161b1b9b2c6f484eb5a1f75c6963950", "sha256": "b79a9c0c234b610c52886c3c4bb00d1d6df99efe1acb4037302d9cdd175c8c31"}, "downloads": -1, "filename": "ensembl_rest-0.3.2-py3-none-any.whl", "has_sig": false, "md5_digest": "3161b1b9b2c6f484eb5a1f75c6963950", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34296, "upload_time": "2019-06-24T20:07:11", "upload_time_iso_8601": "2019-06-24T20:07:11.402032Z", "url": "https://files.pythonhosted.org/packages/37/8c/387ea29d461943fcbad5469ec8780df70ff19ef1e9ee435c44c20d4b757c/ensembl_rest-0.3.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0243ac5e1104d795cb9cbd5001326a82", "sha256": "40f855c74d43c2efee3542d5eb749ebeee0d3263162716dff25bbd1274248de3"}, "downloads": -1, "filename": "ensembl_rest-0.3.2.tar.gz", "has_sig": false, "md5_digest": "0243ac5e1104d795cb9cbd5001326a82", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30163, "upload_time": "2019-06-24T20:07:14", "upload_time_iso_8601": "2019-06-24T20:07:14.274915Z", "url": "https://files.pythonhosted.org/packages/fb/22/635b853c0ee797511f248274c04474654095319000e1f448fb7c9111e6b8/ensembl_rest-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "254e20a967f85c77c2326780a48e549f", "sha256": "82fa7158b44e4addb0c27e55900dd22e40045b0553dd578be429e3fcecadd7b7"}, "downloads": -1, "filename": "ensembl_rest-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "254e20a967f85c77c2326780a48e549f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34308, "upload_time": "2019-06-24T22:01:21", "upload_time_iso_8601": "2019-06-24T22:01:21.551142Z", "url": "https://files.pythonhosted.org/packages/68/c7/6ff34cb3c59ce6f8e2d5b17f2fd95b40b8a1c1fbe338d9ef37d9706bdf23/ensembl_rest-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e5faa04a4be12d771b0de86b766200d", "sha256": "ecea3380bc32216b13fc0332a92ff80986234d1bdab7515fdd8fd717741c5359"}, "downloads": -1, "filename": "ensembl_rest-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3e5faa04a4be12d771b0de86b766200d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30157, "upload_time": "2019-06-24T22:01:24", "upload_time_iso_8601": "2019-06-24T22:01:24.187053Z", "url": "https://files.pythonhosted.org/packages/7c/3d/0c078aa6208360093deb69977b2c5980c71417cde6f382a33f5ef772f41f/ensembl_rest-0.3.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "254e20a967f85c77c2326780a48e549f", "sha256": "82fa7158b44e4addb0c27e55900dd22e40045b0553dd578be429e3fcecadd7b7"}, "downloads": -1, "filename": "ensembl_rest-0.3.3-py3-none-any.whl", "has_sig": false, "md5_digest": "254e20a967f85c77c2326780a48e549f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 34308, "upload_time": "2019-06-24T22:01:21", "upload_time_iso_8601": "2019-06-24T22:01:21.551142Z", "url": "https://files.pythonhosted.org/packages/68/c7/6ff34cb3c59ce6f8e2d5b17f2fd95b40b8a1c1fbe338d9ef37d9706bdf23/ensembl_rest-0.3.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3e5faa04a4be12d771b0de86b766200d", "sha256": "ecea3380bc32216b13fc0332a92ff80986234d1bdab7515fdd8fd717741c5359"}, "downloads": -1, "filename": "ensembl_rest-0.3.3.tar.gz", "has_sig": false, "md5_digest": "3e5faa04a4be12d771b0de86b766200d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30157, "upload_time": "2019-06-24T22:01:24", "upload_time_iso_8601": "2019-06-24T22:01:24.187053Z", "url": "https://files.pythonhosted.org/packages/7c/3d/0c078aa6208360093deb69977b2c5980c71417cde6f382a33f5ef772f41f/ensembl_rest-0.3.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:16 2020"}