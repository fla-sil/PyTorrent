{"info": {"author": "Richard Booth", "author_email": "rvhbooth@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Multimedia :: Graphics", "Topic :: Scientific/Engineering", "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)", "Topic :: Scientific/Engineering :: Visualization"], "description": "**DeCiDa Data Analysis and Procedural Simulation Python Library**\n=================================================================\n\nDeCiDa == Device and Circuit Data Analysis.\n\n`DeCiDa man pages <http://www.decida.org/PyDeCiDa_man_pages>`_\n\n`DeCiDa screen snapshots <http://www.decida.org/PyDeCiDa_man_pages/decida_screen.html>`_\n\nDeCiDa is a Python Library of functions and classes for\ndevice characterization, circuit design and data analysis.\n\nDeCida is written in pure Python (2.7, and 3), and requires no code-compilation.\nIt is portable to any operating system where Python is installed, and runs\nunder MacOS, Windows, Cygwin, and Linux.  Many DeCiDa classes and functions\nrequire the numpy and Tkinter packages.\n\nThis version of DeCiDa provides support for Python 3 and can be run under\na Python 3 environment, as well as a Python 2.7 environment.\nThe following packages are now required: future, six, numpy and matplotlib.\nPlease let me know if there are any issues that you find.\n\nTwo methods are added to the Data class to interface easily with\nnumpy and pandas.  The tests test_Data_read_pandas, test_Data_read_numpy_arrays,\nand test_Data_read_handoff_pandas show how to interchange data.\n\nData row iteration is also added.  The test test_Data_iter shows how to use\nrow iteration.\n\nDeCiDa uses matplotlib XY-plot rendering by default.\nTo use the former XY-plot rendering, add the option -xmat\nto dataview, plotter, pllss, and pll_phase_noise.\n\nFor circuit analysis, DeCiDa provides a flexible scripting class for\nperforming simulations with various circuit simulation tools, such as\n(Synopsys) HSpice, (Cadence) Spectre, (Silvaco) SmartSpice,\n(UC Berkeley) NGspice and others.\nThe Tckt class is used to provide a database of process corners for\neach project, and to provide netlist templating for performing procedural\nsimulations and post-processing.\nScripts using Tckt access the database to obtain\nthe corner conditions, modify the netlist, and allow full Python looping\nstructures for running the simulation, viewing and analyzing\nthe simulated data.\n\nFor data analysis, DeCiDa provides a Data class for reading-in and \nanalyzing data in a number of formats, including nutmeg\n(NGspice, Spectre, LTspice), CSDF (HSpice), CSV (comma-separated value),\nSSV (space-separated value), and others.\nThe Data object can be viewed using the XYplotm, Histogramx or DataViewm\nclasses.\nDataViewm has commands via menu entries to manipulate and plot the data in\ndifferent ways, including frequency versus time, eye- and scope-diagrams\nand column calculations.\n\nDeCiDa started out as a Tcl/Tk application for analyzing measurements\nof electron devices for performing routine compact-model parameter extraction.\nTo do this fitting, a least-squares optimization algorithm was used.\nThis Python version of DeCiDa has a function LevMar (for Levenberg-Marquardt),\nbased on the mpfit package.  It is still under development.\n\nWhat is in the distribution\n---------------------------\n\n* The decida Python library of functions and classes (./decida).\n  This is installed into the site-packages directory.\n\n* A test library under decida.test for testing the distribution (./decida/test).\n  This is also installed into the site-packages directory.\n\n* Applications in the distribution bin directory (./bin).\n  These are installed into the Python bin directory.\n\n* Tool-specific scripts (./etc):\n\n   * simulation tool wrappers (./etc/wrappers)\n\n      Circuit simulation tool wrappers that DeCiDa interfaces with.\n      These are installed into ~/.DeCiDa/bin\n\n   * HTML documentation of the functions and classes (./doc/html).\n      This is installed into ~/.DeCiDa/doc\n\n   * cython (./etc/cython)\n\n      Setup scripts for using cython to compile the Data and XYplotm classes.\n      These are installed into ~/.DeCiDa/cython\n\n   * dot files (./etc/dot)\n\n      Several resource files to be placed in user home directory\n      for Cadence and Python.\n      These are installed into ~/.DeCiDa/dot\n\n   * user local lib directory (./etc/lib)\n\n      A place to put user Python code.\n      This is set up as ~/.DeCiDa/lib\n\n   * models (./etc/models)\n\n      Case-corners and models for two example technologies from\n      the Predictive Technology Models web-site.\n      These are installed into ~/.DeCiDa/models\n\n   * projects (./etc/projects)\n\n      Two example project simulation directories (bird and trane).\n      These are installed into ~/.DeCiDa/projects\n\n   * Cadence skill files (./etc/skill)\n\n      Several scripts for automatically generating DeCiDa Python\n      procedural simulation scripts,\n      and verilog test-bench environments.\n      These are installed into ~/.DeCiDa/skill\n\n   * stdcell (./etc/stdcell)\n\n      Two example standard cell libraries for the two example\n      PTM technologies, from the NangateOpenCell Library.\n      These are installed into ~/.DeCiDa/stdcell\n\n   * verilog (./etc/verilog)\n\n      Files for running Cadence NCsim and viewing the results using SimVision.\n      These are installed into ~/.DeCiDa/verilog\n\n   * matlab (./etc/matlab)\n\n      Matlab file to implement a Data object with a demo.\n      These are installed into ~/.DeCiDa/matlab\n\n\nDeCiDa applications\n-------------------\n\nAll of these should be in the path after installation:\n\n+----------------------+---------------------------------------------------------------------------------------------+\n| application:         | description:                                                                                |\n+======================+=============================================================================================+\n| calc                 | scientific calculator                                                                       |\n+----------------------+---------------------------------------------------------------------------------------------+\n| dataview             | read, plot and analyze data                                                                 |\n+----------------------+---------------------------------------------------------------------------------------------+\n| plotter              | plot Cartesian, Parametric, or Polar functions                                              |\n+----------------------+---------------------------------------------------------------------------------------------+\n| twin                 | text editor, with additional capability                                                     |\n+----------------------+---------------------------------------------------------------------------------------------+\n| gifimg               | create embedded GIF image Python class from a GIF image                                     |\n+----------------------+---------------------------------------------------------------------------------------------+\n| pllss                | plot PLL small-signal transfer functions, S-domain and Z-domain                             |\n+----------------------+---------------------------------------------------------------------------------------------+\n| pll_phase_noise      | plot PLL phase noise components and total phase noise                                       |\n+----------------------+---------------------------------------------------------------------------------------------+\n| ngsp                 | UC Berkeley NGspice gui                                                                     |\n+----------------------+---------------------------------------------------------------------------------------------+\n| op                   | read Cadence Spectre operating-point analysis, display node voltages and operating points   |\n+----------------------+---------------------------------------------------------------------------------------------+\n| simvision_csv2col    | convert exported Cadence SimVision csv data to column data                                  |\n+----------------------+---------------------------------------------------------------------------------------------+\n\nSimulation tool wrapper scripts\n-------------------------------\n\nThese scripts are installed in ~/.DeCiDa/bin\n\n+--------------------+--------------------------------------+\n| wrapper script:    | description:                         |\n+====================+======================================+\n| run_hspice         | wrapper to run Synopsys HSpice       |\n+--------------------+--------------------------------------+\n| run_ngspice        | wrapper to run UC Berkeley NGspice   |\n+--------------------+--------------------------------------+\n| run_sspice         | wrapper to run Silvaco SmartSpice    |\n+--------------------+--------------------------------------+\n| run_spectre        | wrapper to run Cadence Spectre       |\n+--------------------+--------------------------------------+\n\nThanks to\n---------\n\n1. `Python distribution documentation <http://docs.python.org/2/distutils/index.html>`_ .\n\n2. `Canopy installation documentation <https://support.enthought.com/entries/23389761-Installing-packages-into-Canopy-User-Python-from-the-command-line>`_ .\n\n3. decida/ItclObjectx:\n\n   Concepts from [incr Tcl], described in chapter 2, \"Object-Oriented\n   Programming with [incr Tcl],\" by Michael McLennan, of \"Tcl/Tk Tools,\"\n   Mark Harrision, 1997, O'Reilly. \n\n4. decida/FrameNotebook and decida/Balloonhelp:\n\n   Adapted from the Tcl/Tk examples in\n   Mark Harrison and Michael McLennan, \"Effective Tcl/Tk Programming\",\n   1997, Addison-Wesley.\n\n5. decida/Data.read_nutmeg method:\n\n   Modified from the \n   `read_spice module <http://www.h-renrew.de/h/python_spice/spicedata.html>`_\n   from Werner Hoch (python_spice-0.0.3).\n    \n6. decida/LevMar:\n\n   Modified from the\n   `mpfit module <https://code.google.com/p/astrolibpy>`_\n   from Sergey Koposov, Craig Markwardt and Mark Rivers (mpfit_2013).\n\n7. bin/gifimg:\n\n   Modified from the \n   `img2pytk module <http://www.3dartist.com/WP/python/code/img2pytk.py>`_\n   from Bill Allen (imageEmbedder-1.0).\n\n8. Example model files:\n\n   From `Predictive Technology Model <http://ptm.asu.edu>`_ from the\n   Nanoscale Integration and Modeling (NIMO) group at Arizona State University.\n\n9. Example standard cell libraries:\n\n   From `Si2 <https://www.si2.org>`_ openEDA project, Nangate 45nm\n   Open Cell Library, a generic open-source, non-manufacturable\n   standard-cell library.\n\n10. George Howlett, Michael McLennan, Sani Nassif, Mike Toth and others\n    for developing many of the original concepts which are incorporated in\n    DeCiDa.\n\n11. Dean Gonzales, Sanquan Song and Phillip Johnson for supplying test\n    data files and test-driving DeCiDa.\n\n12. `MatPlotLib <https://matplotlib.org>`_ matplotlib.\n\n13. Barry J. Muldrey, for testing and helping to port to Python 3.\n\n14. Steven Herbst, for helping with HSpice data file reading.\n\n**Installing DeCiDa**\n=====================\n\nIf you have pip\n---------------\n\n* issue this command::\n\n    pip install DeCiDa\n\nNote that the scripts that should be installed in\nthe python bin directory (dataview, plotter, ...) may not arrive there.\nAnd the home directory directories may not get set up properly.  If this\nhappens, simply download the distribution and copy these from the untarred\nfolders.\n\nOtherwise\n---------\n\nDownload and prepare the distribution\n-------------------------------------\n\n* unzip/untar the distribution::\n\n    tar xvfz DeCiDa.1.1.5-tar.gz\n\n* cd into the distribution directory::\n\n    cd DeCiDa-1.1.5\n\n* you may want to install the DeCiDa html documentation (in ./doc/html)\n  to an appropriate place for future reference.\n  use a browser to read the documentation, using the url file:// specification\n  to point to the index.html file in the html directory.\n\n* manually modify the wrapper scripts in the distribution\n  ./etc/wrapper directory (run_*), to point to correct tool locations.\n  \n  The wrappers have the following references to other tools.  \n  Adjust these as needed, as required by your local environment.\n\n+----------------+-------------------------------+\n| wrapper:       | expected tool location:       |\n+================+===============================+\n| run_hspice     | /tools/hspice/bin/hspice      |\n+----------------+-------------------------------+\n| run_ngspice    | /opt/local/bin/ngspice        |\n+----------------+-------------------------------+\n| run_sspice     | /tools/silvaco/bin/sspice     |\n+----------------+-------------------------------+\n| run_spectre    | /tools/cds/bin/spectre        |\n+----------------+-------------------------------+\n\nInstalling under Anaconda\n-------------------------\n\n    refer to: `Managing packages <https://conda.io/docs/user-guide/tasks/manage-pkgs.html>`_\n\n* DeCiDa is not yet a conda-installable package\n\n* be sure that Anaconda python is in your path::\n\n    python\n    >>> import sys; sys.prefix\n\n  you should see a path like the following::\n\n    /Users/<user>/anaconda (MacOs)\n\n    /home/<user>/anaconda (Linux)\n\n* install the distribution::\n\n    python setup.py install\n\n* you will find a new directory .DeCiDa in your home directory containing\n  various tool specific scripts, models and other data\n\n* the DeCiDa libraries are installed under site-packages\n\n  If decida is installed as a compressed file (egg file), the test directory\n  test files are not available to test, so some tests will not work.  Use the\n  tests in the unzipped decida/test directory instead\n\n* the DeCiDa applications are installed in the python bin directory\n  so they should be in the user path (may require a shell rehash)\n\nInstalling under Enthought Canopy\n---------------------------------\n\n* install in the Canopy Python User Virtual Environment\n\n    refer to: `Installing packages into Canopy <https://support.enthought.com/entries/23389761-Installing-packages-into-Canopy-User-Python-from-the-command-line/>`_, `Canopy python default <https://support.enthought.com/entries/23646538-Make-Canopy-s-Python-be-your-default-Python-i-e-on-the-PATH->`_\n\n* be sure that User python is in your path::\n\n    python\n    >>> import sys; sys.prefix\n\n  you should see a path like one of the following::\n\n    /Users/<user>/Library/Enthought/Canopy_32bit/User (MacOs)\n\n    /home/<user>/Enthought/Canopy_32bit/User (Linux)\n\n\n* install the distribution::\n\n    python setup.py install\n\n* you will find a new directory .DeCiDa in your home directory containing\n  various tool specific scripts, models and other data\n\n* the DeCiDa libraries are installed under site-packages\n\n  If decida is installed as a compressed file (egg file), the test directory\n  test files are not available to test, so some tests will not work.  Use the\n  tests in the unzipped decida/test directory instead\n\n* the DeCiDa applications are installed in the python bin directory\n  so they should be in the user path (may require a shell rehash)\n\nInstalling under (2.7) python\n-----------------------------\n\n* be sure that python2.7 is in your path::\n\n    python\n    >>> import sys; sys.prefix\n\n  you should see a path like one of the following::\n\n    /Library/Frameworks/Python.framework/Versions/2.7 (MacOS)\n\n    /opt/local/lib/python2.7 (Linux)\n\n* install the distribution::\n\n    python setup.py install\n\nInstalling as a local library\n-----------------------------\n\n* DeCiDa can also be installed in a user's directory without requiring sysadmin\n  privileges.\n\n* select or make a directory for putting python libraries::\n\n    mkdir ~/python/library\n\n* copy the decida library to the python library in your home directory::\n\n    cp -R ./decida ~/python/library\n\n* edit the python resource file in ./etc/dot (.pythonrc.py).\n  change the pylib definition appropriately to point to ~/python/library\n\n* copy the resource file to your home directory::\n\n    cp ./etc/dot/.pythonrc.py ~/.\n\n* to use decida, import the user package, which imports ~/.pythonrc.py::\n\n    >>> import user\n\n    This is not available under python3, so use the following alternative.\n\n* alternatively, define the PYTHONPATH environment variable to include\n  ~/python/library in the path\n\n* copy the applications to the user home bin directory::\n\n    cp ./bin/* ~/bin\n\n* make a .DeCiDa home directory, and populate it with the files from etc\n\n    mkdir ~/.DeCiDa\n\n    cp -R etc/* ~/.DeCiDa/.\n\nTest the distribution using the distribution tests\n--------------------------------------------------\n\n* test the distribution with one or more individual tests::\n\n    python\n    >>> import decida.test.test_Calc_1\n\n  should display a calculator\n\n    >>> import decida.test.test_Plotterm\n\n  should display a plot and equation-set text-window\n\n* list all of the tests::\n\n     python\n     >>> import decida.test\n     >>> decida.test.test_list()\n\n  should print all of the tests\n\n* do all of the tests::\n\n     python\n     >>> import decida.test.test_all\n\n  this may or may not complete depending on the sequence of closing windows\n\n* the tests can also be run directly in the unzipped/tarred (pre-install) directory::\n\n     cd DeCiDa-1.1.5/decida/test\n     test_DataViewm_4.py\n\n* test the applications installed in the python bin::\n\n     twin\n\n  should display a text-window (text-editor)", "description_content_type": "", "docs_url": "https://pythonhosted.org/DeCiDa/", "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://decida.org", "keywords": "", "license": "LICENSE.txt", "maintainer": "", "maintainer_email": "", "name": "DeCiDa", "package_url": "https://pypi.org/project/DeCiDa/", "platform": "Linux", "project_url": "https://pypi.org/project/DeCiDa/", "project_urls": {"Homepage": "http://decida.org"}, "release_url": "https://pypi.org/project/DeCiDa/1.1.5/", "requires_dist": null, "requires_python": "", "summary": "Device and Circuit Data Analysis", "version": "1.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"decida-data-analysis-and-procedural-simulation-python-library\">\n<h2><strong>DeCiDa Data Analysis and Procedural Simulation Python Library</strong></h2>\n<p>DeCiDa == Device and Circuit Data Analysis.</p>\n<p><a href=\"http://www.decida.org/PyDeCiDa_man_pages\" rel=\"nofollow\">DeCiDa man pages</a></p>\n<p><a href=\"http://www.decida.org/PyDeCiDa_man_pages/decida_screen.html\" rel=\"nofollow\">DeCiDa screen snapshots</a></p>\n<p>DeCiDa is a Python Library of functions and classes for\ndevice characterization, circuit design and data analysis.</p>\n<p>DeCida is written in pure Python (2.7, and 3), and requires no code-compilation.\nIt is portable to any operating system where Python is installed, and runs\nunder MacOS, Windows, Cygwin, and Linux.  Many DeCiDa classes and functions\nrequire the numpy and Tkinter packages.</p>\n<p>This version of DeCiDa provides support for Python 3 and can be run under\na Python 3 environment, as well as a Python 2.7 environment.\nThe following packages are now required: future, six, numpy and matplotlib.\nPlease let me know if there are any issues that you find.</p>\n<p>Two methods are added to the Data class to interface easily with\nnumpy and pandas.  The tests test_Data_read_pandas, test_Data_read_numpy_arrays,\nand test_Data_read_handoff_pandas show how to interchange data.</p>\n<p>Data row iteration is also added.  The test test_Data_iter shows how to use\nrow iteration.</p>\n<p>DeCiDa uses matplotlib XY-plot rendering by default.\nTo use the former XY-plot rendering, add the option -xmat\nto dataview, plotter, pllss, and pll_phase_noise.</p>\n<p>For circuit analysis, DeCiDa provides a flexible scripting class for\nperforming simulations with various circuit simulation tools, such as\n(Synopsys) HSpice, (Cadence) Spectre, (Silvaco) SmartSpice,\n(UC Berkeley) NGspice and others.\nThe Tckt class is used to provide a database of process corners for\neach project, and to provide netlist templating for performing procedural\nsimulations and post-processing.\nScripts using Tckt access the database to obtain\nthe corner conditions, modify the netlist, and allow full Python looping\nstructures for running the simulation, viewing and analyzing\nthe simulated data.</p>\n<p>For data analysis, DeCiDa provides a Data class for reading-in and\nanalyzing data in a number of formats, including nutmeg\n(NGspice, Spectre, LTspice), CSDF (HSpice), CSV (comma-separated value),\nSSV (space-separated value), and others.\nThe Data object can be viewed using the XYplotm, Histogramx or DataViewm\nclasses.\nDataViewm has commands via menu entries to manipulate and plot the data in\ndifferent ways, including frequency versus time, eye- and scope-diagrams\nand column calculations.</p>\n<p>DeCiDa started out as a Tcl/Tk application for analyzing measurements\nof electron devices for performing routine compact-model parameter extraction.\nTo do this fitting, a least-squares optimization algorithm was used.\nThis Python version of DeCiDa has a function LevMar (for Levenberg-Marquardt),\nbased on the mpfit package.  It is still under development.</p>\n<div id=\"what-is-in-the-distribution\">\n<h3>What is in the distribution</h3>\n<ul>\n<li><p>The decida Python library of functions and classes (./decida).\nThis is installed into the site-packages directory.</p>\n</li>\n<li><p>A test library under decida.test for testing the distribution (./decida/test).\nThis is also installed into the site-packages directory.</p>\n</li>\n<li><p>Applications in the distribution bin directory (./bin).\nThese are installed into the Python bin directory.</p>\n</li>\n<li><p>Tool-specific scripts (./etc):</p>\n<blockquote>\n<ul>\n<li><p>simulation tool wrappers (./etc/wrappers)</p>\n<blockquote>\n<p>Circuit simulation tool wrappers that DeCiDa interfaces with.\nThese are installed into ~/.DeCiDa/bin</p>\n</blockquote>\n</li>\n<li><dl>\n<dt>HTML documentation of the functions and classes (./doc/html).</dt>\n<dd><p>This is installed into ~/.DeCiDa/doc</p>\n</dd>\n</dl>\n</li>\n<li><p>cython (./etc/cython)</p>\n<blockquote>\n<p>Setup scripts for using cython to compile the Data and XYplotm classes.\nThese are installed into ~/.DeCiDa/cython</p>\n</blockquote>\n</li>\n<li><p>dot files (./etc/dot)</p>\n<blockquote>\n<p>Several resource files to be placed in user home directory\nfor Cadence and Python.\nThese are installed into ~/.DeCiDa/dot</p>\n</blockquote>\n</li>\n<li><p>user local lib directory (./etc/lib)</p>\n<blockquote>\n<p>A place to put user Python code.\nThis is set up as ~/.DeCiDa/lib</p>\n</blockquote>\n</li>\n<li><p>models (./etc/models)</p>\n<blockquote>\n<p>Case-corners and models for two example technologies from\nthe Predictive Technology Models web-site.\nThese are installed into ~/.DeCiDa/models</p>\n</blockquote>\n</li>\n<li><p>projects (./etc/projects)</p>\n<blockquote>\n<p>Two example project simulation directories (bird and trane).\nThese are installed into ~/.DeCiDa/projects</p>\n</blockquote>\n</li>\n<li><p>Cadence skill files (./etc/skill)</p>\n<blockquote>\n<p>Several scripts for automatically generating DeCiDa Python\nprocedural simulation scripts,\nand verilog test-bench environments.\nThese are installed into ~/.DeCiDa/skill</p>\n</blockquote>\n</li>\n<li><p>stdcell (./etc/stdcell)</p>\n<blockquote>\n<p>Two example standard cell libraries for the two example\nPTM technologies, from the NangateOpenCell Library.\nThese are installed into ~/.DeCiDa/stdcell</p>\n</blockquote>\n</li>\n<li><p>verilog (./etc/verilog)</p>\n<blockquote>\n<p>Files for running Cadence NCsim and viewing the results using SimVision.\nThese are installed into ~/.DeCiDa/verilog</p>\n</blockquote>\n</li>\n<li><p>matlab (./etc/matlab)</p>\n<blockquote>\n<p>Matlab file to implement a Data object with a demo.\nThese are installed into ~/.DeCiDa/matlab</p>\n</blockquote>\n</li>\n</ul>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"decida-applications\">\n<h3>DeCiDa applications</h3>\n<p>All of these should be in the path after installation:</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>application:</th>\n<th>description:</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>calc</td>\n<td>scientific calculator</td>\n</tr>\n<tr><td>dataview</td>\n<td>read, plot and analyze data</td>\n</tr>\n<tr><td>plotter</td>\n<td>plot Cartesian, Parametric, or Polar functions</td>\n</tr>\n<tr><td>twin</td>\n<td>text editor, with additional capability</td>\n</tr>\n<tr><td>gifimg</td>\n<td>create embedded GIF image Python class from a GIF image</td>\n</tr>\n<tr><td>pllss</td>\n<td>plot PLL small-signal transfer functions, S-domain and Z-domain</td>\n</tr>\n<tr><td>pll_phase_noise</td>\n<td>plot PLL phase noise components and total phase noise</td>\n</tr>\n<tr><td>ngsp</td>\n<td>UC Berkeley NGspice gui</td>\n</tr>\n<tr><td>op</td>\n<td>read Cadence Spectre operating-point analysis, display node voltages and operating points</td>\n</tr>\n<tr><td>simvision_csv2col</td>\n<td>convert exported Cadence SimVision csv data to column data</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"simulation-tool-wrapper-scripts\">\n<h3>Simulation tool wrapper scripts</h3>\n<p>These scripts are installed in ~/.DeCiDa/bin</p>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>wrapper script:</th>\n<th>description:</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>run_hspice</td>\n<td>wrapper to run Synopsys HSpice</td>\n</tr>\n<tr><td>run_ngspice</td>\n<td>wrapper to run UC Berkeley NGspice</td>\n</tr>\n<tr><td>run_sspice</td>\n<td>wrapper to run Silvaco SmartSpice</td>\n</tr>\n<tr><td>run_spectre</td>\n<td>wrapper to run Cadence Spectre</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"thanks-to\">\n<h3>Thanks to</h3>\n<ol>\n<li><p><a href=\"http://docs.python.org/2/distutils/index.html\" rel=\"nofollow\">Python distribution documentation</a> .</p>\n</li>\n<li><p><a href=\"https://support.enthought.com/entries/23389761-Installing-packages-into-Canopy-User-Python-from-the-command-line\" rel=\"nofollow\">Canopy installation documentation</a> .</p>\n</li>\n<li><p>decida/ItclObjectx:</p>\n<p>Concepts from [incr Tcl], described in chapter 2, \u201cObject-Oriented\nProgramming with [incr Tcl],\u201d by Michael McLennan, of \u201cTcl/Tk Tools,\u201d\nMark Harrision, 1997, O\u2019Reilly.</p>\n</li>\n<li><p>decida/FrameNotebook and decida/Balloonhelp:</p>\n<p>Adapted from the Tcl/Tk examples in\nMark Harrison and Michael McLennan, \u201cEffective Tcl/Tk Programming\u201d,\n1997, Addison-Wesley.</p>\n</li>\n<li><p>decida/Data.read_nutmeg method:</p>\n<p>Modified from the\n<a href=\"http://www.h-renrew.de/h/python_spice/spicedata.html\" rel=\"nofollow\">read_spice module</a>\nfrom Werner Hoch (python_spice-0.0.3).</p>\n</li>\n<li><p>decida/LevMar:</p>\n<p>Modified from the\n<a href=\"https://code.google.com/p/astrolibpy\" rel=\"nofollow\">mpfit module</a>\nfrom Sergey Koposov, Craig Markwardt and Mark Rivers (mpfit_2013).</p>\n</li>\n<li><p>bin/gifimg:</p>\n<p>Modified from the\n<a href=\"http://www.3dartist.com/WP/python/code/img2pytk.py\" rel=\"nofollow\">img2pytk module</a>\nfrom Bill Allen (imageEmbedder-1.0).</p>\n</li>\n<li><p>Example model files:</p>\n<p>From <a href=\"http://ptm.asu.edu\" rel=\"nofollow\">Predictive Technology Model</a> from the\nNanoscale Integration and Modeling (NIMO) group at Arizona State University.</p>\n</li>\n<li><p>Example standard cell libraries:</p>\n<p>From <a href=\"https://www.si2.org\" rel=\"nofollow\">Si2</a> openEDA project, Nangate 45nm\nOpen Cell Library, a generic open-source, non-manufacturable\nstandard-cell library.</p>\n</li>\n<li><p>George Howlett, Michael McLennan, Sani Nassif, Mike Toth and others\nfor developing many of the original concepts which are incorporated in\nDeCiDa.</p>\n</li>\n<li><p>Dean Gonzales, Sanquan Song and Phillip Johnson for supplying test\ndata files and test-driving DeCiDa.</p>\n</li>\n<li><p><a href=\"https://matplotlib.org\" rel=\"nofollow\">MatPlotLib</a> matplotlib.</p>\n</li>\n<li><p>Barry J. Muldrey, for testing and helping to port to Python 3.</p>\n</li>\n<li><p>Steven Herbst, for helping with HSpice data file reading.</p>\n</li>\n</ol>\n</div>\n</div>\n<div id=\"installing-decida\">\n<h2><strong>Installing DeCiDa</strong></h2>\n<div id=\"if-you-have-pip\">\n<h3>If you have pip</h3>\n<ul>\n<li><p>issue this command:</p>\n<pre>pip install DeCiDa\n</pre>\n</li>\n</ul>\n<p>Note that the scripts that should be installed in\nthe python bin directory (dataview, plotter, \u2026) may not arrive there.\nAnd the home directory directories may not get set up properly.  If this\nhappens, simply download the distribution and copy these from the untarred\nfolders.</p>\n</div>\n<div id=\"otherwise\">\n<h3>Otherwise</h3>\n</div>\n<div id=\"download-and-prepare-the-distribution\">\n<h3>Download and prepare the distribution</h3>\n<ul>\n<li><p>unzip/untar the distribution:</p>\n<pre>tar xvfz DeCiDa.1.1.5-tar.gz\n</pre>\n</li>\n<li><p>cd into the distribution directory:</p>\n<pre>cd DeCiDa-1.1.5\n</pre>\n</li>\n<li><p>you may want to install the DeCiDa html documentation (in ./doc/html)\nto an appropriate place for future reference.\nuse a browser to read the documentation, using the url <a>file://</a> specification\nto point to the index.html file in the html directory.</p>\n</li>\n<li><p>manually modify the wrapper scripts in the distribution\n./etc/wrapper directory (run_*), to point to correct tool locations.</p>\n<p>The wrappers have the following references to other tools.\nAdjust these as needed, as required by your local environment.</p>\n</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>wrapper:</th>\n<th>expected tool location:</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>run_hspice</td>\n<td>/tools/hspice/bin/hspice</td>\n</tr>\n<tr><td>run_ngspice</td>\n<td>/opt/local/bin/ngspice</td>\n</tr>\n<tr><td>run_sspice</td>\n<td>/tools/silvaco/bin/sspice</td>\n</tr>\n<tr><td>run_spectre</td>\n<td>/tools/cds/bin/spectre</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"installing-under-anaconda\">\n<h3>Installing under Anaconda</h3>\n<blockquote>\nrefer to: <a href=\"https://conda.io/docs/user-guide/tasks/manage-pkgs.html\" rel=\"nofollow\">Managing packages</a></blockquote>\n<ul>\n<li><p>DeCiDa is not yet a conda-installable package</p>\n</li>\n<li><p>be sure that Anaconda python is in your path:</p>\n<pre>python\n&gt;&gt;&gt; import sys; sys.prefix\n</pre>\n<p>you should see a path like the following:</p>\n<pre>/Users/&lt;user&gt;/anaconda (MacOs)\n\n/home/&lt;user&gt;/anaconda (Linux)\n</pre>\n</li>\n<li><p>install the distribution:</p>\n<pre>python setup.py install\n</pre>\n</li>\n<li><p>you will find a new directory .DeCiDa in your home directory containing\nvarious tool specific scripts, models and other data</p>\n</li>\n<li><p>the DeCiDa libraries are installed under site-packages</p>\n<p>If decida is installed as a compressed file (egg file), the test directory\ntest files are not available to test, so some tests will not work.  Use the\ntests in the unzipped decida/test directory instead</p>\n</li>\n<li><p>the DeCiDa applications are installed in the python bin directory\nso they should be in the user path (may require a shell rehash)</p>\n</li>\n</ul>\n</div>\n<div id=\"installing-under-enthought-canopy\">\n<h3>Installing under Enthought Canopy</h3>\n<ul>\n<li><p>install in the Canopy Python User Virtual Environment</p>\n<blockquote>\n<p>refer to: <a href=\"https://support.enthought.com/entries/23389761-Installing-packages-into-Canopy-User-Python-from-the-command-line/\" rel=\"nofollow\">Installing packages into Canopy</a>, <a href=\"https://support.enthought.com/entries/23646538-Make-Canopy-s-Python-be-your-default-Python-i-e-on-the-PATH-\" rel=\"nofollow\">Canopy python default</a></p>\n</blockquote>\n</li>\n<li><p>be sure that User python is in your path:</p>\n<pre>python\n&gt;&gt;&gt; import sys; sys.prefix\n</pre>\n<p>you should see a path like one of the following:</p>\n<pre>/Users/&lt;user&gt;/Library/Enthought/Canopy_32bit/User (MacOs)\n\n/home/&lt;user&gt;/Enthought/Canopy_32bit/User (Linux)\n</pre>\n</li>\n<li><p>install the distribution:</p>\n<pre>python setup.py install\n</pre>\n</li>\n<li><p>you will find a new directory .DeCiDa in your home directory containing\nvarious tool specific scripts, models and other data</p>\n</li>\n<li><p>the DeCiDa libraries are installed under site-packages</p>\n<p>If decida is installed as a compressed file (egg file), the test directory\ntest files are not available to test, so some tests will not work.  Use the\ntests in the unzipped decida/test directory instead</p>\n</li>\n<li><p>the DeCiDa applications are installed in the python bin directory\nso they should be in the user path (may require a shell rehash)</p>\n</li>\n</ul>\n</div>\n<div id=\"installing-under-2-7-python\">\n<h3>Installing under (2.7) python</h3>\n<ul>\n<li><p>be sure that python2.7 is in your path:</p>\n<pre>python\n&gt;&gt;&gt; import sys; sys.prefix\n</pre>\n<p>you should see a path like one of the following:</p>\n<pre>/Library/Frameworks/Python.framework/Versions/2.7 (MacOS)\n\n/opt/local/lib/python2.7 (Linux)\n</pre>\n</li>\n<li><p>install the distribution:</p>\n<pre>python setup.py install\n</pre>\n</li>\n</ul>\n</div>\n<div id=\"installing-as-a-local-library\">\n<h3>Installing as a local library</h3>\n<ul>\n<li><p>DeCiDa can also be installed in a user\u2019s directory without requiring sysadmin\nprivileges.</p>\n</li>\n<li><p>select or make a directory for putting python libraries:</p>\n<pre>mkdir ~/python/library\n</pre>\n</li>\n<li><p>copy the decida library to the python library in your home directory:</p>\n<pre>cp -R ./decida ~/python/library\n</pre>\n</li>\n<li><p>edit the python resource file in ./etc/dot (.pythonrc.py).\nchange the pylib definition appropriately to point to ~/python/library</p>\n</li>\n<li><p>copy the resource file to your home directory:</p>\n<pre>cp ./etc/dot/.pythonrc.py ~/.\n</pre>\n</li>\n<li><p>to use decida, import the user package, which imports ~/.pythonrc.py:</p>\n<pre>&gt;&gt;&gt; import user\n\nThis is not available under python3, so use the following alternative.\n</pre>\n</li>\n<li><p>alternatively, define the PYTHONPATH environment variable to include\n~/python/library in the path</p>\n</li>\n<li><p>copy the applications to the user home bin directory:</p>\n<pre>cp ./bin/* ~/bin\n</pre>\n</li>\n<li><p>make a .DeCiDa home directory, and populate it with the files from etc</p>\n<blockquote>\n<p>mkdir ~/.DeCiDa</p>\n<p>cp -R etc/* ~/.DeCiDa/.</p>\n</blockquote>\n</li>\n</ul>\n</div>\n<div id=\"test-the-distribution-using-the-distribution-tests\">\n<h3>Test the distribution using the distribution tests</h3>\n<ul>\n<li><p>test the distribution with one or more individual tests:</p>\n<pre>python\n&gt;&gt;&gt; import decida.test.test_Calc_1\n</pre>\n<p>should display a calculator</p>\n<blockquote>\n<pre>&gt;&gt;&gt; import decida.test.test_Plotterm\n</pre>\n</blockquote>\n<p>should display a plot and equation-set text-window</p>\n</li>\n<li><p>list all of the tests:</p>\n<pre>python\n&gt;&gt;&gt; import decida.test\n&gt;&gt;&gt; decida.test.test_list()\n</pre>\n<p>should print all of the tests</p>\n</li>\n<li><p>do all of the tests:</p>\n<pre>python\n&gt;&gt;&gt; import decida.test.test_all\n</pre>\n<p>this may or may not complete depending on the sequence of closing windows</p>\n</li>\n<li><p>the tests can also be run directly in the unzipped/tarred (pre-install) directory:</p>\n<pre>cd DeCiDa-1.1.5/decida/test\ntest_DataViewm_4.py\n</pre>\n</li>\n<li><p>test the applications installed in the python bin:</p>\n<pre>twin\n</pre>\n<p>should display a text-window (text-editor)</p>\n</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6788964, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "9a2be80bc6386a13740ba0e1484df24b", "sha256": "e90f0733b3ec1592c7156d19d409debcafdc58ffc94545ffca9d844487fa36ba"}, "downloads": -1, "filename": "DeCiDa-1.0.1.tar.gz", "has_sig": false, "md5_digest": "9a2be80bc6386a13740ba0e1484df24b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13820209, "upload_time": "2014-05-03T12:37:03", "upload_time_iso_8601": "2014-05-03T12:37:03.702407Z", "url": "https://files.pythonhosted.org/packages/8c/dc/1ba625c119c9e5b3336897c50b3e8115a470ad195426db490e04903ffd8d/DeCiDa-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "55731b417c7c12eb75b5043cfce79a50", "sha256": "4f407953229bde26205feba589dc1eca9c8ba6f51bd00944cb6b0c4c61ef9374"}, "downloads": -1, "filename": "DeCiDa-1.0.2.tar.gz", "has_sig": false, "md5_digest": "55731b417c7c12eb75b5043cfce79a50", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13893185, "upload_time": "2014-12-14T19:45:42", "upload_time_iso_8601": "2014-12-14T19:45:42.559751Z", "url": "https://files.pythonhosted.org/packages/6e/73/b38ab29b489b548371d4367a57921f1ba71e973c5c4064dbdb382f6ca72e/DeCiDa-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ea77e87796083f956fcb73f8b4a7c6ee", "sha256": "6775d125596449b0d7ea0edaac4b1078ea0949a3050c5d50db04b4b124a74e4e"}, "downloads": -1, "filename": "DeCiDa-1.0.3.tar.gz", "has_sig": false, "md5_digest": "ea77e87796083f956fcb73f8b4a7c6ee", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14020519, "upload_time": "2015-05-09T18:51:53", "upload_time_iso_8601": "2015-05-09T18:51:53.773668Z", "url": "https://files.pythonhosted.org/packages/f4/c2/0d3f87ab37033eb508f23aacd195f4209e14f7d8b47164bf467b4506d979/DeCiDa-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "40617bc24f96e3c1a7601a9af4902cd2", "sha256": "ffbd39110e6470a0efb83dc6c37be88125e7528c19b7d591ca07936e31f7bc8f"}, "downloads": -1, "filename": "DeCiDa-1.0.4.tar.gz", "has_sig": false, "md5_digest": "40617bc24f96e3c1a7601a9af4902cd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2052721, "upload_time": "2017-06-18T17:37:03", "upload_time_iso_8601": "2017-06-18T17:37:03.198352Z", "url": "https://files.pythonhosted.org/packages/95/28/97b725f8329e5d5a63b645a790656e98287ed2aff972c89b9cd0b3bbedfb/DeCiDa-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "53bb849b881bf8f7904d431b6346fdd6", "sha256": "a15e01c746414131690511c9e82d7af177596116e412ff68ff0344540126b3c8"}, "downloads": -1, "filename": "DeCiDa-1.0.5.tar.gz", "has_sig": false, "md5_digest": "53bb849b881bf8f7904d431b6346fdd6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14372071, "upload_time": "2017-06-20T00:28:51", "upload_time_iso_8601": "2017-06-20T00:28:51.022640Z", "url": "https://files.pythonhosted.org/packages/9e/4d/b8987ad8a60d96a84aeab7fb88867310a16270b2adae73ffcf56b63077e7/DeCiDa-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "40033d97d9d66fa26bd35a5588c20fda", "sha256": "3cf9e1fe1fbcbb7aea816979bd69cdec2703d2bdd742e417a791c7f6b5b45c2f"}, "downloads": -1, "filename": "DeCiDa-1.0.6.tar.gz", "has_sig": false, "md5_digest": "40033d97d9d66fa26bd35a5588c20fda", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12664679, "upload_time": "2018-05-28T18:38:01", "upload_time_iso_8601": "2018-05-28T18:38:01.184104Z", "url": "https://files.pythonhosted.org/packages/52/db/c630ece18790c62a155e103a070704a3b2168ca001438fd9a5a0800a6a88/DeCiDa-1.0.6.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "46fc0476cc860055d964c0654863533a", "sha256": "dee4351ee4bebbd3ccd518121276197fc7920ac61ded39ee1fa2ae0b4b8d2fb9"}, "downloads": -1, "filename": "DeCiDa-1.1.3.tar.gz", "has_sig": false, "md5_digest": "46fc0476cc860055d964c0654863533a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13824680, "upload_time": "2019-01-04T01:24:56", "upload_time_iso_8601": "2019-01-04T01:24:56.934461Z", "url": "https://files.pythonhosted.org/packages/52/ec/48d01f63efab43b8cda7b9eb8c0c87a73ae5c1e633ffe505fbc384ced008/DeCiDa-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "2f95da61433571b5928595f40c0f998e", "sha256": "cd4df6e15a57be40f49532e083a522b4b22fbfe867cbf628981554704ffbc5b4"}, "downloads": -1, "filename": "DeCiDa-1.1.4.tar.gz", "has_sig": false, "md5_digest": "2f95da61433571b5928595f40c0f998e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13836852, "upload_time": "2020-02-16T18:19:34", "upload_time_iso_8601": "2020-02-16T18:19:34.820617Z", "url": "https://files.pythonhosted.org/packages/04/77/a3171eacc00e63cb9a3c146fac177b306301b494ee0978cd6fc46459ecbc/DeCiDa-1.1.4.tar.gz", "yanked": false}], "1.1.5": [{"comment_text": "", "digests": {"md5": "bed0f82785618c406f9bf661d3f8dbb0", "sha256": "da180cc3a73a6fa41654fb6dcb38947719d4c4378f600b571e455906d72fba96"}, "downloads": -1, "filename": "DeCiDa-1.1.5.tar.gz", "has_sig": false, "md5_digest": "bed0f82785618c406f9bf661d3f8dbb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13847425, "upload_time": "2020-03-11T01:02:16", "upload_time_iso_8601": "2020-03-11T01:02:16.554062Z", "url": "https://files.pythonhosted.org/packages/ba/9d/101bdbe43c9df623db143d3e772d89c3eb921f392e0104d5f6ad22b28210/DeCiDa-1.1.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "bed0f82785618c406f9bf661d3f8dbb0", "sha256": "da180cc3a73a6fa41654fb6dcb38947719d4c4378f600b571e455906d72fba96"}, "downloads": -1, "filename": "DeCiDa-1.1.5.tar.gz", "has_sig": false, "md5_digest": "bed0f82785618c406f9bf661d3f8dbb0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13847425, "upload_time": "2020-03-11T01:02:16", "upload_time_iso_8601": "2020-03-11T01:02:16.554062Z", "url": "https://files.pythonhosted.org/packages/ba/9d/101bdbe43c9df623db143d3e772d89c3eb921f392e0104d5f6ad22b28210/DeCiDa-1.1.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:39:37 2020"}