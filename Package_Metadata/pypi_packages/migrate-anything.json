{"info": {"author": "Lieturd O\u00dc", "author_email": "janne@lieturd.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": ".. image:: https://travis-ci.org/lieturd/migrate-anything.svg?branch=master\n    :target: https://travis-ci.org/lieturd/migrate-anything\n\n.. image:: https://img.shields.io/badge/code%20style-black-000000.svg\n    :target: https://github.com/psf/black\n\n.. image:: https://codecov.io/gh/Lieturd/migrate-anything/branch/master/graph/badge.svg\n    :target: https://codecov.io/gh/Lieturd/migrate-anything\n\n.. image:: https://sonarcloud.io/api/project_badges/measure?project=Lieturd_migrate-anything&metric=alert_status\n    :target: https://sonarcloud.io/dashboard?id=Lieturd_migrate-anything\n\n.. image:: https://img.shields.io/github/issues/lieturd/migrate-anything\n    :target: https://github.com/Lieturd/migrate-anything/issues\n    :alt: GitHub issues\n\n.. image:: https://img.shields.io/pypi/dm/migrate-anything\n    :target: https://pypi.org/project/migrate-anything/\n    :alt: PyPI - Downloads\n\n.. image:: https://img.shields.io/pypi/v/migrate-anything\n    :target: https://pypi.org/project/migrate-anything/\n    :alt: PyPI\n\n.. image:: https://img.shields.io/pypi/pyversions/migrate-anything\n    :target: https://pypi.org/project/migrate-anything/\n    :alt: PyPI - Python Version\n\n.. image:: https://img.shields.io/badge/License-BSD%203--Clause-blue.svg\n    :target: https://opensource.org/licenses/BSD-3-Clause\n\nMigrate anything - database (etc.) migration utility, especially for Python projects.\n\n\nWhat is this?\n=============\n\nIt's kinda annoying how often you run into the question of how to handle migrations in your project, and there hasn't seem to emerged any good, DB -agnostic, framework-agnostic, and storage-agnostic tool to manage them.\n\nThis project is an attempt to change that.\n\nBasically what it does when you run :code:`migrate-anything migrations` is:\n\n1. Find all the files :code:`migrations/*.py` and sort them\n2. Any that are not yet registered in the DB will be loaded, their :code:`up()` is executed, and the file's contents stored in the DB\n3. Any files that are missing from the fs but are in the DB will have their code loaded from the DB and their :code:`down()` is executed - in reverse order\n\n\nLicense\n-------\n\nLicensing is important. This project uses BSD 3-clause license, and adds no other dependencies to your project (it does use a few things during build & testing) - that's about as simple, safe, and free to use as it gets.\n\nFor more information check the `LICENSE <https://github.com/Lieturd/migrate-anything/blob/master/LICENSE>`_ -file.\n\n\nUsage examples\n==============\n\nFirstly you'll need this package in your project. Pick one of these:\n\n.. code-block:: python\n\n    pip install -U migrate-anything\n    poetry add migrate-anything\n    pipenv install migrate-anything\n\nSimply put, create a Python package, don't be too clever and call it e.g. ``migrations``. Then put files in that package:\n\n.. code-block:: python\n\n    # migrations/__init__.py\n    from migrate_anything import configure, CSVStorage\n\n    configure(storage=CSVStorage(\"migration_status.csv\"))\n\n.. code-block:: python\n\n    # migrations/01-initialize-db.py\n    # Please note that this is built for a completely hypothetical DB layer\n    from my_db import get_db\n\n    DB = get_db()\n\n    def up():\n        DB.create_table(\"example\")\n\n    def down():\n        DB.delete_table(\"example\")\n\nThis would configure your migrations' status to be stored in a local file called ``migration_status.csv`` and set up your first migration script. If you have a ``my_db`` module that works like this you could just run this with a single command:\n\n.. code-block:: shell\n\n    migrate-anything migrations\n    poetry run migrate-anything migrations\n    pipenv run migrate-anything migrations\n\nNow in the real world you might want something more durable and a realistic example, so here's e.g. what you'd do when using MongoDB:\n\n.. code-block:: python\n\n    # __init__.py\n    from migrate_anything import configure, MongoDBStorage\n    import pymongo\n\n    db = pymongo.MongoClient().my_db\n\n    configure(storage=MongoDBStorage(db.migrations))\n\n.. code-block:: python\n\n    # 01-initialize-db.py\n    from pymongo import MongoClient\n\n    client = MongoClient()\n    db = client.my_db\n\n    def up():\n        db.posts.insert_one({\n            \"id\": \"post-1\",\n            \"title\": \"We're live!\",\n            \"content\": \"This is our first post, yay.\"\n        })\n        db.posts.create_index(\"id\")\n\n    def down():\n        db.posts.drop()\n\nThis would configure storage to a ``my_db.migrations`` MongoDB collection.\n\nFuture ideas include support for other DB engines (feel free to contribute),\nand Kubernetes ConfigMap. Annoyingly storage to Kubernetes from inside a pod\nand in code is not quite as simple as just running ``kubectl``.\n\nOh and your Kubernetes pods will likely require the necessary RBAC rules to manage their ConfigMap. It's unfortunately kinda complex, but I'm sure you can figure it out e.g. with this `guide <https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/>`_.\n\nAlternatively you can just write your own - it's easy.\n\n.. code-block:: python\n\n    # __init__.py\n    from migrate_anything import configure\n\n\n    class CustomStorage(object):\n        def __init__(self, file):\n            self.file = file\n\n        def save_migration(self, name, code):\n            with open(self.file, \"a\", encoding=\"utf-8\") as file:\n                file.write(\"{},{}\\n\".format(name, code))\n\n        def list_migrations(self):\n            try:\n                with open(self.file, encoding=\"utf-8\") as file:\n                    return [\n                        line.split(\",\")\n                        for line in file.readlines()\n                        if line.strip()  # Skip empty lines\n                    ]\n            except FileNotFoundError:\n                return []\n\n        def remove_migration(self, name):\n            migrations = [\n                migration for migration in self.list_migrations() if migration[0] != name\n            ]\n\n            with open(self.file, \"w\", encoding=\"utf-8\") as file:\n                for row in migrations:\n                    file.write(\"{},{}\\n\".format(*row))\n\n\n    configure(storage=CustomStorage(\"test.txt\"))\n\nYou can also check out the `examples <https://github.com/Lieturd/migrate-anything/tree/master/examples>`_.\n\n\nContributing\n============\n\nThis project is run on GitHub using the issue tracking and pull requests here. If you want to contribute, feel free to `submit issues <https://github.com/Lieturd/migrate-anything/issues>`_ (incl. feature requests) or PRs here.", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Lieturd/migrate-anything", "keywords": "migrate database db release", "license": "", "maintainer": "", "maintainer_email": "", "name": "migrate-anything", "package_url": "https://pypi.org/project/migrate-anything/", "platform": "", "project_url": "https://pypi.org/project/migrate-anything/", "project_urls": {"Bug Reports": "https://github.com/Lieturd/migrate-anything/issues", "Homepage": "https://github.com/Lieturd/migrate-anything", "Source": "https://github.com/Lieturd/migrate-anything/"}, "release_url": "https://pypi.org/project/migrate-anything/0.1.6/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "summary": "Helps manage migrations for databases and anything else", "version": "0.1.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/lieturd/migrate-anything\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/lieturd/migrate-anything.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/406de8a2d6d28ac19acb535b7c9591da98e42ba5/68747470733a2f2f7472617669732d63692e6f72672f6c6965747572642f6d6967726174652d616e797468696e672e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/psf/black\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/code%20style-black-000000.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/fbfdc7754183ecf079bc71ddeabaf88f6cbc5c00/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f636f64652532307374796c652d626c61636b2d3030303030302e737667\"></a>\n<a href=\"https://codecov.io/gh/Lieturd/migrate-anything\" rel=\"nofollow\"><img alt=\"https://codecov.io/gh/Lieturd/migrate-anything/branch/master/graph/badge.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/88af3bfdc20d7426b02fdf6ebe8e0e4c021dad16/68747470733a2f2f636f6465636f762e696f2f67682f4c6965747572642f6d6967726174652d616e797468696e672f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a>\n<a href=\"https://sonarcloud.io/dashboard?id=Lieturd_migrate-anything\" rel=\"nofollow\"><img alt=\"https://sonarcloud.io/api/project_badges/measure?project=Lieturd_migrate-anything&amp;metric=alert_status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3cd1a23b7870acbccc2674f64de7f459ed97df27/68747470733a2f2f736f6e6172636c6f75642e696f2f6170692f70726f6a6563745f6261646765732f6d6561737572653f70726f6a6563743d4c6965747572645f6d6967726174652d616e797468696e67266d65747269633d616c6572745f737461747573\"></a>\n<a href=\"https://github.com/Lieturd/migrate-anything/issues\" rel=\"nofollow\"><img alt=\"GitHub issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/a9891f020275aab980abcd7c41640f4e8d1f806c/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f6c6965747572642f6d6967726174652d616e797468696e67\"></a>\n<a href=\"https://pypi.org/project/migrate-anything/\" rel=\"nofollow\"><img alt=\"PyPI - Downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b62a9568adc64782474cf077989251386886699c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f6d6967726174652d616e797468696e67\"></a>\n<a href=\"https://pypi.org/project/migrate-anything/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e823008b419cd8741d17e0fe717ca66ef5b6ae07/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6d6967726174652d616e797468696e67\"></a>\n<a href=\"https://pypi.org/project/migrate-anything/\" rel=\"nofollow\"><img alt=\"PyPI - Python Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2195e4d838cd4497cad71f6de917b29e31ad6dd0/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6d6967726174652d616e797468696e67\"></a>\n<a href=\"https://opensource.org/licenses/BSD-3-Clause\" rel=\"nofollow\"><img alt=\"https://img.shields.io/badge/License-BSD%203--Clause-blue.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/110fcca60a43a8ea37b1a5bda616e639325f2f30/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d425344253230332d2d436c617573652d626c75652e737667\"></a>\n<p>Migrate anything - database (etc.) migration utility, especially for Python projects.</p>\n<div id=\"what-is-this\">\n<h2>What is this?</h2>\n<p>It\u2019s kinda annoying how often you run into the question of how to handle migrations in your project, and there hasn\u2019t seem to emerged any good, DB -agnostic, framework-agnostic, and storage-agnostic tool to manage them.</p>\n<p>This project is an attempt to change that.</p>\n<p>Basically what it does when you run <code>migrate-anything migrations</code> is:</p>\n<ol>\n<li>Find all the files <code>migrations/*.py</code> and sort them</li>\n<li>Any that are not yet registered in the DB will be loaded, their <code>up()</code> is executed, and the file\u2019s contents stored in the DB</li>\n<li>Any files that are missing from the fs but are in the DB will have their code loaded from the DB and their <code>down()</code> is executed - in reverse order</li>\n</ol>\n<div id=\"license\">\n<h3>License</h3>\n<p>Licensing is important. This project uses BSD 3-clause license, and adds no other dependencies to your project (it does use a few things during build &amp; testing) - that\u2019s about as simple, safe, and free to use as it gets.</p>\n<p>For more information check the <a href=\"https://github.com/Lieturd/migrate-anything/blob/master/LICENSE\" rel=\"nofollow\">LICENSE</a> -file.</p>\n</div>\n</div>\n<div id=\"usage-examples\">\n<h2>Usage examples</h2>\n<p>Firstly you\u2019ll need this package in your project. Pick one of these:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"o\">-</span><span class=\"n\">U</span> <span class=\"n\">migrate</span><span class=\"o\">-</span><span class=\"n\">anything</span>\n<span class=\"n\">poetry</span> <span class=\"n\">add</span> <span class=\"n\">migrate</span><span class=\"o\">-</span><span class=\"n\">anything</span>\n<span class=\"n\">pipenv</span> <span class=\"n\">install</span> <span class=\"n\">migrate</span><span class=\"o\">-</span><span class=\"n\">anything</span>\n</pre>\n<p>Simply put, create a Python package, don\u2019t be too clever and call it e.g. <tt>migrations</tt>. Then put files in that package:</p>\n<pre><span class=\"c1\"># migrations/__init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">migrate_anything</span> <span class=\"kn\">import</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">CSVStorage</span>\n\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">CSVStorage</span><span class=\"p\">(</span><span class=\"s2\">\"migration_status.csv\"</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"c1\"># migrations/01-initialize-db.py</span>\n<span class=\"c1\"># Please note that this is built for a completely hypothetical DB layer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">my_db</span> <span class=\"kn\">import</span> <span class=\"n\">get_db</span>\n\n<span class=\"n\">DB</span> <span class=\"o\">=</span> <span class=\"n\">get_db</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">():</span>\n    <span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">create_table</span><span class=\"p\">(</span><span class=\"s2\">\"example\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">down</span><span class=\"p\">():</span>\n    <span class=\"n\">DB</span><span class=\"o\">.</span><span class=\"n\">delete_table</span><span class=\"p\">(</span><span class=\"s2\">\"example\"</span><span class=\"p\">)</span>\n</pre>\n<p>This would configure your migrations\u2019 status to be stored in a local file called <tt>migration_status.csv</tt> and set up your first migration script. If you have a <tt>my_db</tt> module that works like this you could just run this with a single command:</p>\n<pre>migrate-anything migrations\npoetry run migrate-anything migrations\npipenv run migrate-anything migrations\n</pre>\n<p>Now in the real world you might want something more durable and a realistic example, so here\u2019s e.g. what you\u2019d do when using MongoDB:</p>\n<pre><span class=\"c1\"># __init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">migrate_anything</span> <span class=\"kn\">import</span> <span class=\"n\">configure</span><span class=\"p\">,</span> <span class=\"n\">MongoDBStorage</span>\n<span class=\"kn\">import</span> <span class=\"nn\">pymongo</span>\n\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">pymongo</span><span class=\"o\">.</span><span class=\"n\">MongoClient</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">my_db</span>\n\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">MongoDBStorage</span><span class=\"p\">(</span><span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">migrations</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"c1\"># 01-initialize-db.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymongo</span> <span class=\"kn\">import</span> <span class=\"n\">MongoClient</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MongoClient</span><span class=\"p\">()</span>\n<span class=\"n\">db</span> <span class=\"o\">=</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">my_db</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">up</span><span class=\"p\">():</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">insert_one</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"post-1\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"title\"</span><span class=\"p\">:</span> <span class=\"s2\">\"We're live!\"</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"content\"</span><span class=\"p\">:</span> <span class=\"s2\">\"This is our first post, yay.\"</span>\n    <span class=\"p\">})</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">create_index</span><span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">down</span><span class=\"p\">():</span>\n    <span class=\"n\">db</span><span class=\"o\">.</span><span class=\"n\">posts</span><span class=\"o\">.</span><span class=\"n\">drop</span><span class=\"p\">()</span>\n</pre>\n<p>This would configure storage to a <tt>my_db.migrations</tt> MongoDB collection.</p>\n<p>Future ideas include support for other DB engines (feel free to contribute),\nand Kubernetes ConfigMap. Annoyingly storage to Kubernetes from inside a pod\nand in code is not quite as simple as just running <tt>kubectl</tt>.</p>\n<p>Oh and your Kubernetes pods will likely require the necessary RBAC rules to manage their ConfigMap. It\u2019s unfortunately kinda complex, but I\u2019m sure you can figure it out e.g. with this <a href=\"https://docs.bitnami.com/kubernetes/how-to/configure-rbac-in-your-kubernetes-cluster/\" rel=\"nofollow\">guide</a>.</p>\n<p>Alternatively you can just write your own - it\u2019s easy.</p>\n<pre><span class=\"c1\"># __init__.py</span>\n<span class=\"kn\">from</span> <span class=\"nn\">migrate_anything</span> <span class=\"kn\">import</span> <span class=\"n\">configure</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">CustomStorage</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">file</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">save_migration</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">):</span>\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s2\">\"a\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n            <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">list_migrations</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"k\">try</span><span class=\"p\">:</span>\n            <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n                <span class=\"k\">return</span> <span class=\"p\">[</span>\n                    <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s2\">\",\"</span><span class=\"p\">)</span>\n                    <span class=\"k\">for</span> <span class=\"n\">line</span> <span class=\"ow\">in</span> <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">readlines</span><span class=\"p\">()</span>\n                    <span class=\"k\">if</span> <span class=\"n\">line</span><span class=\"o\">.</span><span class=\"n\">strip</span><span class=\"p\">()</span>  <span class=\"c1\"># Skip empty lines</span>\n                <span class=\"p\">]</span>\n        <span class=\"k\">except</span> <span class=\"ne\">FileNotFoundError</span><span class=\"p\">:</span>\n            <span class=\"k\">return</span> <span class=\"p\">[]</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">remove_migration</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">):</span>\n        <span class=\"n\">migrations</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n            <span class=\"n\">migration</span> <span class=\"k\">for</span> <span class=\"n\">migration</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">list_migrations</span><span class=\"p\">()</span> <span class=\"k\">if</span> <span class=\"n\">migration</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">!=</span> <span class=\"n\">name</span>\n        <span class=\"p\">]</span>\n\n        <span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"s2\">\"w\"</span><span class=\"p\">,</span> <span class=\"n\">encoding</span><span class=\"o\">=</span><span class=\"s2\">\"utf-8\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">file</span><span class=\"p\">:</span>\n            <span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">migrations</span><span class=\"p\">:</span>\n                <span class=\"n\">file</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"</span><span class=\"si\">{}</span><span class=\"s2\">,</span><span class=\"si\">{}</span><span class=\"se\">\\n</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"o\">*</span><span class=\"n\">row</span><span class=\"p\">))</span>\n\n\n<span class=\"n\">configure</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"o\">=</span><span class=\"n\">CustomStorage</span><span class=\"p\">(</span><span class=\"s2\">\"test.txt\"</span><span class=\"p\">))</span>\n</pre>\n<p>You can also check out the <a href=\"https://github.com/Lieturd/migrate-anything/tree/master/examples\" rel=\"nofollow\">examples</a>.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>This project is run on GitHub using the issue tracking and pull requests here. If you want to contribute, feel free to <a href=\"https://github.com/Lieturd/migrate-anything/issues\" rel=\"nofollow\">submit issues</a> (incl. feature requests) or PRs here.</p>\n</div>\n\n          </div>"}, "last_serial": 6075205, "releases": {"0.1.2": [{"comment_text": "", "digests": {"md5": "e66dd31f0cf096333969affc6613ef43", "sha256": "4b6a54dbb725b42258e8f3bb21a3f49b11e3d25c587acfbd1c4f2c4f8f1340c8"}, "downloads": -1, "filename": "migrate_anything-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "e66dd31f0cf096333969affc6613ef43", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 7886, "upload_time": "2019-10-12T23:51:08", "upload_time_iso_8601": "2019-10-12T23:51:08.350530Z", "url": "https://files.pythonhosted.org/packages/0e/3a/bc270834f3b12367c88fd56726b487d69edbcbb6e09699c1c81829017da1/migrate_anything-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f03d806c1207304c8dd1a8c549dc2ca", "sha256": "30fe733f9dd1cf718d4814279ad71d593601399c5be87912b2f7ad62db294953"}, "downloads": -1, "filename": "migrate-anything-0.1.2.tar.gz", "has_sig": false, "md5_digest": "5f03d806c1207304c8dd1a8c549dc2ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*, !=3.5.*, <4", "size": 5770, "upload_time": "2019-10-12T23:51:10", "upload_time_iso_8601": "2019-10-12T23:51:10.610177Z", "url": "https://files.pythonhosted.org/packages/0d/45/8794d8703684b6d2ae915b6c7a13a0904356f772a2fc3ee6836448a9b795/migrate-anything-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "25050c3764fbc4d8cb3fbd05de4f3710", "sha256": "03e27666b2587199f4351aeaad90e7a3a86db2cc50a8fe05b31cf09018b5990f"}, "downloads": -1, "filename": "migrate_anything-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "25050c3764fbc4d8cb3fbd05de4f3710", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7884, "upload_time": "2019-10-13T00:02:30", "upload_time_iso_8601": "2019-10-13T00:02:30.971061Z", "url": "https://files.pythonhosted.org/packages/fc/6e/63e1ed85a353dc7a077bdfab9a6e241b80a346d13a3acf97b23b879fdb08/migrate_anything-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "354d0a20836ccf6f62d8a7a243f71907", "sha256": "28393361d3d040e6913a6d9518b8af53195404ff4a0f04b1e22352a54daf37f4"}, "downloads": -1, "filename": "migrate-anything-0.1.3.tar.gz", "has_sig": false, "md5_digest": "354d0a20836ccf6f62d8a7a243f71907", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 5765, "upload_time": "2019-10-13T00:02:32", "upload_time_iso_8601": "2019-10-13T00:02:32.831803Z", "url": "https://files.pythonhosted.org/packages/15/33/6cbec6ae87ce3d3adc6c04cc07990c9b568cc2e25ee85baa61461d1c7859/migrate-anything-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "0736288f41cd9809bd26d549e8827e6d", "sha256": "2189248a602255ee5131b32ac2a27fcbf7884374f313ca0141a6163d37853e39"}, "downloads": -1, "filename": "migrate_anything-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0736288f41cd9809bd26d549e8827e6d", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 8263, "upload_time": "2019-10-13T11:35:38", "upload_time_iso_8601": "2019-10-13T11:35:38.156684Z", "url": "https://files.pythonhosted.org/packages/27/f2/8db10fb2289bc53593d2780e66a0d5b284b39a76fcd788d765d85aebdfb4/migrate_anything-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "462b36c7456fe6f125f1347e27b9eeb2", "sha256": "9052ceadec7b3097eb815c4d539264830f4c53b3c5c007ba98cdd9e80b16e52b"}, "downloads": -1, "filename": "migrate-anything-0.1.4.tar.gz", "has_sig": false, "md5_digest": "462b36c7456fe6f125f1347e27b9eeb2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6260, "upload_time": "2019-10-13T11:34:20", "upload_time_iso_8601": "2019-10-13T11:34:20.038164Z", "url": "https://files.pythonhosted.org/packages/a8/b8/e8138357e08662f073c035e1ea97b8d15b0ac7ccb278e187eb83795cbeb0/migrate-anything-0.1.4.tar.gz", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "2eea6896055ae629a7a7d496df1aa0aa", "sha256": "5f23366abc38b1a4c0df8a889eb0391019e9430f16932f4d64f0d80bb2aef14a"}, "downloads": -1, "filename": "migrate_anything-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "2eea6896055ae629a7a7d496df1aa0aa", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 9265, "upload_time": "2019-11-04T10:14:54", "upload_time_iso_8601": "2019-11-04T10:14:54.977987Z", "url": "https://files.pythonhosted.org/packages/53/28/4fbf76802a63b6abf6a8c1925a824752fb13adfc57a65c4cdc0eb90cdcc4/migrate_anything-0.1.5-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c208158814aba80f12cbfbb3c82d47f", "sha256": "0631c088c66a076984d152ff470aa8b0ad0f8cff1f80f3072126867d0cbbc0a0"}, "downloads": -1, "filename": "migrate-anything-0.1.5.tar.gz", "has_sig": false, "md5_digest": "1c208158814aba80f12cbfbb3c82d47f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 6276, "upload_time": "2019-10-13T12:14:30", "upload_time_iso_8601": "2019-10-13T12:14:30.412298Z", "url": "https://files.pythonhosted.org/packages/42/7b/0ce52e8ec876027a3e37ce47853d0cf0239bae411edf9dbc1533e04ac4fa/migrate-anything-0.1.5.tar.gz", "yanked": false}], "0.1.6": [{"comment_text": "", "digests": {"md5": "187e78aada9ad50606fef2d4e8bd8d54", "sha256": "88cdb69d4e9df9e49f1b6a3b53d9efde09edfe84b2632a454d09fcd1b3571e13"}, "downloads": -1, "filename": "migrate_anything-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "187e78aada9ad50606fef2d4e8bd8d54", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 9265, "upload_time": "2019-11-04T12:36:19", "upload_time_iso_8601": "2019-11-04T12:36:19.344246Z", "url": "https://files.pythonhosted.org/packages/64/87/1021c9de67ad6c0eb63def59779b32745150ff799f2082c4db06c93713be/migrate_anything-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0facef2b6bf373e6ef552ddc88ab7b3d", "sha256": "ec49e29900a0b4a31fa002e26c9bdd6a49b02fab2701fe3aeee0618d5e7f4590"}, "downloads": -1, "filename": "migrate-anything-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0facef2b6bf373e6ef552ddc88ab7b3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7416, "upload_time": "2019-11-04T12:34:06", "upload_time_iso_8601": "2019-11-04T12:34:06.671142Z", "url": "https://files.pythonhosted.org/packages/20/66/8d1d2e806cfec10c68b9218bf56cdc97f564bbc1013642c6068f50952886/migrate-anything-0.1.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "187e78aada9ad50606fef2d4e8bd8d54", "sha256": "88cdb69d4e9df9e49f1b6a3b53d9efde09edfe84b2632a454d09fcd1b3571e13"}, "downloads": -1, "filename": "migrate_anything-0.1.6-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "187e78aada9ad50606fef2d4e8bd8d54", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 9265, "upload_time": "2019-11-04T12:36:19", "upload_time_iso_8601": "2019-11-04T12:36:19.344246Z", "url": "https://files.pythonhosted.org/packages/64/87/1021c9de67ad6c0eb63def59779b32745150ff799f2082c4db06c93713be/migrate_anything-0.1.6-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0facef2b6bf373e6ef552ddc88ab7b3d", "sha256": "ec49e29900a0b4a31fa002e26c9bdd6a49b02fab2701fe3aeee0618d5e7f4590"}, "downloads": -1, "filename": "migrate-anything-0.1.6.tar.gz", "has_sig": false, "md5_digest": "0facef2b6bf373e6ef552ddc88ab7b3d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, <4", "size": 7416, "upload_time": "2019-11-04T12:34:06", "upload_time_iso_8601": "2019-11-04T12:34:06.671142Z", "url": "https://files.pythonhosted.org/packages/20/66/8d1d2e806cfec10c68b9218bf56cdc97f564bbc1013642c6068f50952886/migrate-anything-0.1.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:44 2020"}