{"info": {"author": "Zachary Pincus", "author_email": "zpincus@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "zbar-py\n=======\n\nIntroduction\n------------\n\nAuthor: `Zachary Pincus <http://zplab.wustl.edu>`__ zpincus@gmail.com\n\nContributions: Rounak Singh rounaksingh17@gmail.com (example code and\nzbar.misc).\n\nzbar-py is a module (compatible with both Python 2.7 and 3+) that\nprovides an interface to the `zbar <http://zbar.sourceforge.net>`__\nbar-code reading library, which can read most barcode formats as well as\nQR codes. Input images must be 2D numpy arrays of type uint8 (i.e. 2D\ngreyscale images).\n\nThe zbar library itself packaged along with zbar-py (it's built as a\npython extension), so no external dependencies are required. Building\nzbar requires the iconv library to be present, which you almost\ncertainly have, except if you're on windows. Then you probably will need\nto download or build the iconv DLL.\n`Here <http://mlocati.github.io/articles/gettext-iconv-windows.html>`__\nare pre-built 32- and 64-bit binaries for same.\n\nThe python code is under the MIT license, and zbar itself is licensed\nunder the GNU LGPL version 2.1.\n\nPrerequisites:\n--------------\n\n-  iconv -- c library required for building zbar-py; see above\n-  numpy -- for running zbar-py\n-  pygame -- for examples using a webcam\n\nSimple examples:\n----------------\n\nMore sophisticated examples can be found in 'examples' directory.\n\n-  Scan for barcodes in a 2D numpy array:\n\n.. code:: python\n\n    import zbar\n    image = read_image_into_numpy_array(...) # whatever function you use to read an image file into a numpy array\n    scanner = zbar.Scanner()\n    results = scanner.scan(image)\n    for result in results:\n        print(result.type, result.data, result.quality, result.position)\n\n-  Scan for UPC-A barcodes and perform checksum validity test:\n\n.. code:: python\n\n    import zbar\n    import zbar.misc\n    image = read_image_into_numpy_array(...) # get an image into a numpy array\n    scanner = zbar.Scanner()\n    results = scanner.scan(image)\n    for result in results:\n        if result.type == 'UPC-A':\n            print(result.data, zbar.misc.upca_is_valid(result.data.decode('ascii')))", "description_content_type": null, "docs_url": null, "download_url": null, "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zplab/zbar-py", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "zbar-py", "package_url": "https://pypi.org/project/zbar-py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/zbar-py/", "project_urls": {"Homepage": "https://github.com/zplab/zbar-py"}, "release_url": "https://pypi.org/project/zbar-py/1.0.4/", "requires_dist": null, "requires_python": null, "summary": "zbar package", "version": "1.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>Author: <a href=\"http://zplab.wustl.edu\" rel=\"nofollow\">Zachary Pincus</a> <a href=\"mailto:zpincus%40gmail.com\">zpincus<span>@</span>gmail<span>.</span>com</a></p>\n<p>Contributions: Rounak Singh <a href=\"mailto:rounaksingh17%40gmail.com\">rounaksingh17<span>@</span>gmail<span>.</span>com</a> (example code and\nzbar.misc).</p>\n<p>zbar-py is a module (compatible with both Python 2.7 and 3+) that\nprovides an interface to the <a href=\"http://zbar.sourceforge.net\" rel=\"nofollow\">zbar</a>\nbar-code reading library, which can read most barcode formats as well as\nQR codes. Input images must be 2D numpy arrays of type uint8 (i.e. 2D\ngreyscale images).</p>\n<p>The zbar library itself packaged along with zbar-py (it\u2019s built as a\npython extension), so no external dependencies are required. Building\nzbar requires the iconv library to be present, which you almost\ncertainly have, except if you\u2019re on windows. Then you probably will need\nto download or build the iconv DLL.\n<a href=\"http://mlocati.github.io/articles/gettext-iconv-windows.html\" rel=\"nofollow\">Here</a>\nare pre-built 32- and 64-bit binaries for same.</p>\n<p>The python code is under the MIT license, and zbar itself is licensed\nunder the GNU LGPL version 2.1.</p>\n</div>\n<div id=\"prerequisites\">\n<h2>Prerequisites:</h2>\n<ul>\n<li>iconv \u2013 c library required for building zbar-py; see above</li>\n<li>numpy \u2013 for running zbar-py</li>\n<li>pygame \u2013 for examples using a webcam</li>\n</ul>\n</div>\n<div id=\"simple-examples\">\n<h2>Simple examples:</h2>\n<p>More sophisticated examples can be found in \u2018examples\u2019 directory.</p>\n<ul>\n<li>Scan for barcodes in a 2D numpy array:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zbar</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">read_image_into_numpy_array</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># whatever function you use to read an image file into a numpy array</span>\n<span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">zbar</span><span class=\"o\">.</span><span class=\"n\">Scanner</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">type</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">quality</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">position</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li>Scan for UPC-A barcodes and perform checksum validity test:</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">zbar</span>\n<span class=\"kn\">import</span> <span class=\"nn\">zbar.misc</span>\n<span class=\"n\">image</span> <span class=\"o\">=</span> <span class=\"n\">read_image_into_numpy_array</span><span class=\"p\">(</span><span class=\"o\">...</span><span class=\"p\">)</span> <span class=\"c1\"># get an image into a numpy array</span>\n<span class=\"n\">scanner</span> <span class=\"o\">=</span> <span class=\"n\">zbar</span><span class=\"o\">.</span><span class=\"n\">Scanner</span><span class=\"p\">()</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">scanner</span><span class=\"o\">.</span><span class=\"n\">scan</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">result</span> <span class=\"ow\">in</span> <span class=\"n\">results</span><span class=\"p\">:</span>\n    <span class=\"k\">if</span> <span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">type</span> <span class=\"o\">==</span> <span class=\"s1\">'UPC-A'</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">zbar</span><span class=\"o\">.</span><span class=\"n\">misc</span><span class=\"o\">.</span><span class=\"n\">upca_is_valid</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'ascii'</span><span class=\"p\">)))</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 2546877, "releases": {"1.0.4": [{"comment_text": "", "digests": {"md5": "4183d8af0e13f16190583fb82f60e3f8", "sha256": "8f90fa36480f50109a8555a3e4debed69f70d8085545fd413190ae21a1455466"}, "downloads": -1, "filename": "zbar-py-1.0.4.tar.gz", "has_sig": false, "md5_digest": "4183d8af0e13f16190583fb82f60e3f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 543874, "upload_time": "2016-12-30T22:38:56", "upload_time_iso_8601": "2016-12-30T22:38:56.626051Z", "url": "https://files.pythonhosted.org/packages/91/ba/5f16696d44c69df1d6a890adc60211183d2da90e8de4282d29d1475aba68/zbar-py-1.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4183d8af0e13f16190583fb82f60e3f8", "sha256": "8f90fa36480f50109a8555a3e4debed69f70d8085545fd413190ae21a1455466"}, "downloads": -1, "filename": "zbar-py-1.0.4.tar.gz", "has_sig": false, "md5_digest": "4183d8af0e13f16190583fb82f60e3f8", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 543874, "upload_time": "2016-12-30T22:38:56", "upload_time_iso_8601": "2016-12-30T22:38:56.626051Z", "url": "https://files.pythonhosted.org/packages/91/ba/5f16696d44c69df1d6a890adc60211183d2da90e8de4282d29d1475aba68/zbar-py-1.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:19:38 2020"}