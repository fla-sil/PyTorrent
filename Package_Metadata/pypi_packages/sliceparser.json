{"info": {"author": "Kaiwen Wu", "author_email": "kps6326@hotmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development"], "description": "sliceparser\n===========\n\n\nIntroduction\n------------\n\nAs per [this question](https://stackoverflow.com/q/680826/7881370), creating from string slice object, or even advanced indexing tuple, is a common requirement.\nHowever, there exists few robust and safe solution, if at all, to solve the problem.\nTherefore I attempt to solve it and expose programmatic interface via PyPI.\nI also put my [answer](https://stackoverflow.com/a/57574429/7881370) to the question above.\n\nThis repo is adapted from [my Gist](https://gist.github.com/kkew3/d1eed0984a3a44087c700215e99eefd2).\n\n\nInstall\n-------\n\n```bash\npip install sliceparser\n# or pip3 install sliceparser\n```\n\n\nUsage\n-----\n\n```python\nimport sliceparser\na = [1,2,3,4]\nassert a[sliceparser.parse_slice('2:')] == a[2:]\nassert a[sliceparser.parse_slice('::2')] == a[::2]\nassert a[sliceparser.parse_slice('1')] == a[1]\n\nimport numpy as np\nA = np.eye(3)\nassert np.array_equal(A[sliceparser.parse_slice('0, 1:')], A[0,1:])\nassert np.array_equal(A[sliceparser.parse_slice('..., 2')], A[..., 2])\n```\n\netc.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/kkew3/pysliceparser", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "sliceparser", "package_url": "https://pypi.org/project/sliceparser/", "platform": "", "project_url": "https://pypi.org/project/sliceparser/", "project_urls": {"Homepage": "https://github.com/kkew3/pysliceparser"}, "release_url": "https://pypi.org/project/sliceparser/0.9.1b0/", "requires_dist": null, "requires_python": "", "summary": "Parse numpy style advanced indexing notation from string.", "version": "0.9.1b0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>sliceparser</h1>\n<h2>Introduction</h2>\n<p>As per <a href=\"https://stackoverflow.com/q/680826/7881370\" rel=\"nofollow\">this question</a>, creating from string slice object, or even advanced indexing tuple, is a common requirement.\nHowever, there exists few robust and safe solution, if at all, to solve the problem.\nTherefore I attempt to solve it and expose programmatic interface via PyPI.\nI also put my <a href=\"https://stackoverflow.com/a/57574429/7881370\" rel=\"nofollow\">answer</a> to the question above.</p>\n<p>This repo is adapted from <a href=\"https://gist.github.com/kkew3/d1eed0984a3a44087c700215e99eefd2\" rel=\"nofollow\">my Gist</a>.</p>\n<h2>Install</h2>\n<pre>pip install sliceparser\n<span class=\"c1\"># or pip3 install sliceparser</span>\n</pre>\n<h2>Usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sliceparser</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">,</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">4</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">sliceparser</span><span class=\"o\">.</span><span class=\"n\">parse_slice</span><span class=\"p\">(</span><span class=\"s1\">'2:'</span><span class=\"p\">)]</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">:]</span>\n<span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">sliceparser</span><span class=\"o\">.</span><span class=\"n\">parse_slice</span><span class=\"p\">(</span><span class=\"s1\">'::2'</span><span class=\"p\">)]</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">[::</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"k\">assert</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"n\">sliceparser</span><span class=\"o\">.</span><span class=\"n\">parse_slice</span><span class=\"p\">(</span><span class=\"s1\">'1'</span><span class=\"p\">)]</span> <span class=\"o\">==</span> <span class=\"n\">a</span><span class=\"p\">[</span><span class=\"mi\">1</span><span class=\"p\">]</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"n\">A</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">eye</span><span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array_equal</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">sliceparser</span><span class=\"o\">.</span><span class=\"n\">parse_slice</span><span class=\"p\">(</span><span class=\"s1\">'0, 1:'</span><span class=\"p\">)],</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">1</span><span class=\"p\">:])</span>\n<span class=\"k\">assert</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array_equal</span><span class=\"p\">(</span><span class=\"n\">A</span><span class=\"p\">[</span><span class=\"n\">sliceparser</span><span class=\"o\">.</span><span class=\"n\">parse_slice</span><span class=\"p\">(</span><span class=\"s1\">'..., 2'</span><span class=\"p\">)],</span> <span class=\"n\">A</span><span class=\"p\">[</span><span class=\"o\">...</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">])</span>\n</pre>\n<p>etc.</p>\n\n          </div>"}, "last_serial": 5707142, "releases": {"0.9.1b0": [{"comment_text": "", "digests": {"md5": "1cf04c339272e03317669b1acda40b85", "sha256": "172a316b6e03ce3c5e7d1fbf68460ca1300ed097595481dfe26548a178ba0de8"}, "downloads": -1, "filename": "sliceparser-0.9.1b0.tar.gz", "has_sig": false, "md5_digest": "1cf04c339272e03317669b1acda40b85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3074, "upload_time": "2019-08-21T05:53:22", "upload_time_iso_8601": "2019-08-21T05:53:22.162439Z", "url": "https://files.pythonhosted.org/packages/a8/ae/80507d2962365f02ce17dad0e82206c6addc1c562a03a459fb934aa09bd2/sliceparser-0.9.1b0.tar.gz", "yanked": false}], "0.9b": [{"comment_text": "", "digests": {"md5": "f16c8f650128920f87b4ae5d0b1dc396", "sha256": "fb0ce1b3aed414ea86e962a2c5231915e09e7586109b966e3052637e276470a5"}, "downloads": -1, "filename": "sliceparser-0.9b.tar.gz", "has_sig": false, "md5_digest": "f16c8f650128920f87b4ae5d0b1dc396", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2134, "upload_time": "2019-08-20T22:36:49", "upload_time_iso_8601": "2019-08-20T22:36:49.104400Z", "url": "https://files.pythonhosted.org/packages/77/be/a1c942f6ec506b0624aea9a4c071d1493874f3d6fb7ce3967d57cea41e90/sliceparser-0.9b.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1cf04c339272e03317669b1acda40b85", "sha256": "172a316b6e03ce3c5e7d1fbf68460ca1300ed097595481dfe26548a178ba0de8"}, "downloads": -1, "filename": "sliceparser-0.9.1b0.tar.gz", "has_sig": false, "md5_digest": "1cf04c339272e03317669b1acda40b85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3074, "upload_time": "2019-08-21T05:53:22", "upload_time_iso_8601": "2019-08-21T05:53:22.162439Z", "url": "https://files.pythonhosted.org/packages/a8/ae/80507d2962365f02ce17dad0e82206c6addc1c562a03a459fb934aa09bd2/sliceparser-0.9.1b0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:25 2020"}