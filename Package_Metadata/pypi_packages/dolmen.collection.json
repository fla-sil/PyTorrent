{"info": {"author": "Dolmen Team", "author_email": "dolmen@list.dolmen-project.org", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "=================\ndolmen.collection\n=================\n\nDolmen collection offers a collection implementation which permits to \nmanipulate named elements: arrange order, extract part of the collection,\nenforce a type of component and add new ones easily.\n\nIt originated from zeam.form where it was used to implement forms as \ncollections of fields, actions and widgets.\n\n.. contents::\n\n\nAPI description\n===============\n\nComponents\n----------\n\nFirst let's see the component, that is elements taking parts in collections::\n\n  >>> from dolmen.collection.components import Component\n  >>> c1 = Component(u'The Sun', 'sun')\n  >>> c1\n  <Component The Sun>\n  >>> c1.identifier\n  'sun'\n  >>> c1.title\n  u'The Sun'\n\nIt correctly implement IComponent::\n\n  >>> from zope.interface.verify import verifyObject\n  >>> from dolmen.collection import interfaces\n  >>> verifyObject(interfaces.IComponent, c1)\n  True\n\nActually you can create a component without an id, and even using a\nunicode title::\n\n  >>> c2 = Component(u'Moon')\n  >>> c2\n  <Component Moon>\n  >>> c2.identifier\n  'moon'\n  >>> c2.title\n  u'Moon'\n\nOr a number (it won't be converted to string. Like this, this support\nZope translation messages)::\n\n  >>> c69 = Component(69)\n  >>> c69.title\n  69\n\nIf by doing so, the title contain spaces, they will be replaced by\n``-``. If UTF-8 character are included, the identifiant will be\nencoded::\n\n  >>> c3 = Component(u'Some lost planet')\n  >>> c3.identifier\n  'some-lost-planet'\n  >>> c4 = Component(u'\u00c9tat du d\u00e9sir')\n  >>> c4.identifier\n  'c383c2897461742d64752d64c383c2a9736972'\n\nSpaces are normalized::\n\n   >>> c5 = Component(' Some unappropriate spacing  ')\n   >>> c5.identifier\n   'some-unappropriate-spacing'\n\nYou can clone a component and change its identifier::\n\n  >>> c3clone = c3.clone('new-world')\n  >>> c3clone\n  <Component Some lost planet>\n  >>> c3clone.identifier\n  'new-world'\n  >>> c3clone is c3\n  False\n\nBut you can keep the old one as well::\n\n  >>> c4clone = c4.clone()\n  >>> c4clone.identifier\n  'c383c2897461742d64752d64c383c2a9736972'\n  >>> c4clone is c4\n  False\n\n\nCollection\n----------\n\nCollection are simple objects, implementing ICollection::\n\n  >>> from dolmen.collection.components import Collection\n  >>> s1 = Collection()\n  >>> s1\n  <Collection>\n  >>> len(s1)\n  0\n  >>> verifyObject(interfaces.ICollection, s1)\n  True\n\nAdding components to a collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nNow we can put components in a collection, and list it back in the\nsame order::\n\n  >>> s1.append(c1)\n  >>> list(s1)\n  [<Component The Sun>]\n  >>> s1.append(c2)\n  >>> list(s1)\n  [<Component The Sun>, <Component Moon>]\n\nBut you can't add twice the same component::\n\n  >>> s1.append(c1)\n  Traceback (most recent call last):\n    ...\n  ValueError: (u'Duplicate identifier', 'sun')\n\nAnd this need to be a component::\n\n  >>> s1.append('home')\n  Traceback (most recent call last):\n    ...\n  TypeError: (u'Invalid type', 'home')\n\nYou create a collection with components or collection as argument::\n\n  >>> s2 = Collection(Component('Jupiter'), Component('Saturn'))\n  >>> list(s2)\n  [<Component Jupiter>, <Component Saturn>]\n  >>> len(s2)\n  2\n  >>> list(Collection(s2, Component('Uranus')))\n  [<Component Jupiter>, <Component Saturn>, <Component Uranus>]\n  >>> Collection(42)\n  Traceback (most recent call last):\n    ...\n  TypeError: (u'Invalid type', 42)\n\nYou can add collections. You will receive a copy with all\ncomponents. Components will ordered as the addition is::\n\n  >>> s3 = s1 + s2\n  >>> s3\n  <Collection>\n  >>> s3 is s1\n  False\n  >>> list(s3)\n  [<Component The Sun>, <Component Moon>,\n   <Component Jupiter>, <Component Saturn>]\n  >>> len(s3)\n  4\n  >>> list(s2 + s1)\n  [<Component Jupiter>, <Component Saturn>,\n   <Component The Sun>, <Component Moon>]\n\nYou can extend a collection. It work pretty much like the construtor::\n\n  >>> s3.extend(Component('Venus'), Component('Uranus'))\n  >>> list(s3)\n  [<Component The Sun>, <Component Moon>,\n   <Component Jupiter>, <Component Saturn>,\n   <Component Venus>, <Component Uranus>]\n  >>> s3.extend('Kitty')\n  Traceback (most recent call last):\n    ...\n  TypeError: (u'Invalid type', 'Kitty')\n\nYou can copy a collection::\n\n  >>> s3copy = s3.copy()\n  >>> list(s3copy) == list(s3)\n  True\n  >>> s3copy is s3\n  False\n\nYou can remove all elements from a collection::\n\n  >>> len(s1)\n  2\n  >>> s1.clear()\n  >>> len(s1)\n  0\n\nIgnoring already defined components\n...................................\n\n  >>> from dolmen.collection.components import IGNORE \n  >>> ignoring = Collection()\n  >>> ignoring.behavior = IGNORE\n  \n  >>> ignoring.append(c1)\n  >>> list(ignoring)\n  [<Component The Sun>]\n  >>> ignoring.append(c2)\n  >>> list(ignoring)\n  [<Component The Sun>, <Component Moon>]\n\n  >>> c1prime = Component(u'The Sun prime', 'sun')\n  \nYou can add twice the same component, the second is ignored::\n\n  >>> ignoring.append(c1prime)\n  >>> list(ignoring)\n  [<Component The Sun>, <Component Moon>]\n\n\nOverriding already defined components\n.....................................\n\n  >>> from dolmen.collection.components import OVERRIDE \n  >>> overriding = Collection()\n  >>> overriding.behavior = OVERRIDE\n\n  >>> overriding.append(c1)\n  >>> list(overriding)\n  [<Component The Sun>]\n  >>> overriding.append(c2)\n  >>> list(overriding)\n  [<Component The Sun>, <Component Moon>]\n\n  >>> c1prime = Component(u'The Sun prime', 'sun')\n  \nYou can add twice the same component, the second overrides the first::\n\n  >>> overriding.append(c1prime)\n  Traceback (most recent call last):\n  ...\n  NotImplementedError\n\nIt needs to be a IMutableCollection::\n\n  >>> from dolmen.collection import IMutableCollection\n  >>> from zope.interface import directlyProvides\n  >>> directlyProvides(overriding, IMutableCollection)\n\n  >>> overriding.append(c1prime)\n  >>> list(overriding)\n  [<Component The Sun prime>, <Component Moon>]\n\n\nRetriving components from a collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can retrieve one element of the collection::\n\n  >>> s3.get('moon')\n  <Component Moon>\n  >>> s3.get('uranus')\n  <Component Uranus>\n  >>> s3.get('me')\n  Traceback (most recent call last):\n    ...\n  KeyError: 'me'\n  >>> s3.get('me', default=42)\n  42\n\nAnd dictionnary like access works::\n\n  >>> s3['uranus']\n  <Component Uranus>\n  >>> s3['venus']\n  <Component Venus>\n  >>> s3['somewhere']\n  Traceback (most recent call last):\n    ...\n  KeyError: 'somewhere'\n\nYou can get all components ids::\n\n  >>> s3.keys()\n  ['sun', 'moon', 'jupiter', 'saturn', 'venus', 'uranus']\n\nYou can test if a component id is in the collection::\n\n  >>> 'moon' in s3\n  True\n  >>> 'earth' in s3\n  False\n\nYou can get a new collection with some of the components of the first\none::\n\n  >>> s4 = s3.select('venus', 'uranus')\n  >>> s4 is s3\n  False\n  >>> list(s4)\n  [<Component Venus>, <Component Uranus>]\n  >>> s4.keys()\n  ['venus', 'uranus']\n\nOr the other way around some components of a collection::\n\n  >>> s5 = s3.omit('sun', 'moon')\n  >>> s5 is s3\n  False\n  >>> list(s5)\n  [<Component Jupiter>, <Component Saturn>,\n   <Component Venus>, <Component Uranus>]\n\n\nSorting components in a collection\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nThe Collection sort call works as the standard python list's one::\n\n  >>> s5.sort()\n  >>> print list(s5)\n  [<Component Jupiter>, <Component Saturn>, <Component Uranus>,\n   <Component Venus>]\n\n\nWe can use the standard arguments (cmp, key and reverse)::\n\n  >>> s5.sort(reverse=True)\n  >>> print list(s5)\n  [<Component Venus>, <Component Uranus>, <Component Saturn>,\n   <Component Jupiter>]\n\n  >>> s5.sort(reverse=True, key=lambda el: el.identifier[-1:])\n  >>> print list(s5)\n  [<Component Venus>, <Component Uranus>, <Component Jupiter>,\n   <Component Saturn>]\n\n  >>> def myLengthSort(a1, a2):\n  ...   return cmp(len(a1), len(a2))\n\n  >>> s5.sort(reverse=True, key=lambda el: el.identifier, cmp=myLengthSort)\n  >>> print list(s5)\n  [<Component Jupiter>, <Component Uranus>, <Component Saturn>,\n   <Component Venus>]\n\nThe collection can be reversed too, as standard lists::\n\n  >>> s5.reverse()\n  >>> print list(s5)\n  [<Component Venus>, <Component Saturn>, <Component Uranus>,\n   <Component Jupiter>]\n\n\nIt is possible to order the components of a Collection using\na given list of ids and the `sort_components` cmp function::\n\n  >>> from dolmen.collection import sort_components\n\n  >>> s5.sort(sort_components(['uranus', 'venus', 'jupiter']))\n  >>> print list(s5)\n  [<Component Uranus>, <Component Venus>, <Component Jupiter>,\n   <Component Saturn>]\n\nThe keys are sorted in the process::\n\n  >>> print s5.keys()\n  ['uranus', 'venus', 'jupiter', 'saturn']\n\nSuccessive sortings will leave unspecified fields at their relative places::\n\n  >>> s5.sort(sort_components(['saturn', 'uranus']))\n  >>> print list(s5)\n  [<Component Saturn>, <Component Uranus>, <Component Venus>,\n   <Component Jupiter>]\n\nWe can also revert the sorting, as the standard python behavior::\n\n  >>> s5.sort(sort_components(['uranus', 'venus']), reverse=True)\n  >>> print list(s5)\n  [<Component Saturn>, <Component Jupiter>, <Component Venus>,\n   <Component Uranus>]\n\nErrors are raised if the provided list is malformed or smaller than 2\nelements::\n\n  >>> s5.sort(sort_components(['uranus']))\n  Traceback (most recent call last):\n  ...\n  ValueError: Please provide a list of, at least, two component identifiers.\n\n  >>> s5.sort(sort_components('something'))\n  Traceback (most recent call last):\n  ...\n  ValueError: Please provide a valid list or tuple of component identifiers.\n\n\nThe behavior, if unknow ids are provided, is unchanged::\n\n  >>> s5.sort(sort_components(['venus', 'uranus', 'cardassia', 'bajor']))\n  >>> print list(s5)\n  [<Component Venus>, <Component Uranus>, <Component Saturn>,\n   <Component Jupiter>]\n\n\nParameters on collections\n~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou can provides extra parameters on collections that will be set as\nattributes on the object::\n\n  >>> s6 = Collection(s2, name=u'me', city=u'rotterdam')\n  >>> s6\n  <Collection>\n  >>> list(s6)\n  [<Component Jupiter>, <Component Saturn>]\n  >>> s6.name\n  u'me'\n  >>> s6.city\n  u'rotterdam'\n\nThose attributes are kept if you use the operations ``select``,\n``omit`` or ``copy``::\n\n  >>> s6copy = s6.copy()\n  >>> s6copy.name\n  u'me'\n  >>> s6copy.city\n  u'rotterdam'\n\n  >>> s6omit = s6.omit('jupiter')\n  >>> s6omit.name\n  u'me'\n  >>> s6omit.city\n  u'rotterdam'\n\n  >>> s6select = s6.select('jupiter')\n  >>> s6select.name\n  u'me'\n  >>> s6select.city\n  u'rotterdam'\n\n\nChanges\n=======\n\n0.3 (2011-06-13)\n----------------\n\n* Added behavior to the collection allowing the override or ignore of the\n  components.\n\n\n0.2 (2011-04-14)\n----------------\n\n* Updated components names for entry points.\n\n\n0.1 (2011-04-13)\n----------------\n\n* Initial release.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/dolmen.collection", "keywords": "collection library", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "dolmen.collection", "package_url": "https://pypi.org/project/dolmen.collection/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/dolmen.collection/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://pypi.python.org/pypi/dolmen.collection"}, "release_url": "https://pypi.org/project/dolmen.collection/0.3/", "requires_dist": null, "requires_python": null, "summary": "Collection of named entities", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dolmen collection offers a collection implementation which permits to\nmanipulate named elements: arrange order, extract part of the collection,\nenforce a type of component and add new ones easily.</p>\n<p>It originated from zeam.form where it was used to implement forms as\ncollections of fields, actions and widgets.</p>\n<div id=\"contents\">\n<p>Contents</p>\n<ul>\n<li><a href=\"#api-description\" id=\"id4\" rel=\"nofollow\">API description</a><ul>\n<li><a href=\"#components\" id=\"id5\" rel=\"nofollow\">Components</a></li>\n<li><a href=\"#collection\" id=\"id6\" rel=\"nofollow\">Collection</a><ul>\n<li><a href=\"#adding-components-to-a-collection\" id=\"id7\" rel=\"nofollow\">Adding components to a collection</a><ul>\n<li><a href=\"#ignoring-already-defined-components\" id=\"id8\" rel=\"nofollow\">Ignoring already defined components</a></li>\n<li><a href=\"#overriding-already-defined-components\" id=\"id9\" rel=\"nofollow\">Overriding already defined components</a></li>\n</ul>\n</li>\n<li><a href=\"#retriving-components-from-a-collection\" id=\"id10\" rel=\"nofollow\">Retriving components from a collection</a></li>\n<li><a href=\"#sorting-components-in-a-collection\" id=\"id11\" rel=\"nofollow\">Sorting components in a collection</a></li>\n<li><a href=\"#parameters-on-collections\" id=\"id12\" rel=\"nofollow\">Parameters on collections</a></li>\n</ul>\n</li>\n</ul>\n</li>\n<li><a href=\"#changes\" id=\"id13\" rel=\"nofollow\">Changes</a><ul>\n<li><a href=\"#id1\" id=\"id14\" rel=\"nofollow\">0.3 (2011-06-13)</a></li>\n<li><a href=\"#id2\" id=\"id15\" rel=\"nofollow\">0.2 (2011-04-14)</a></li>\n<li><a href=\"#id3\" id=\"id16\" rel=\"nofollow\">0.1 (2011-04-13)</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"api-description\">\n<h2><a href=\"#id4\" rel=\"nofollow\">API description</a></h2>\n<div id=\"components\">\n<h3><a href=\"#id5\" rel=\"nofollow\">Components</a></h3>\n<p>First let\u2019s see the component, that is elements taking parts in collections:</p>\n<pre>&gt;&gt;&gt; from dolmen.collection.components import Component\n&gt;&gt;&gt; c1 = Component(u'The Sun', 'sun')\n&gt;&gt;&gt; c1\n&lt;Component The Sun&gt;\n&gt;&gt;&gt; c1.identifier\n'sun'\n&gt;&gt;&gt; c1.title\nu'The Sun'\n</pre>\n<p>It correctly implement IComponent:</p>\n<pre>&gt;&gt;&gt; from zope.interface.verify import verifyObject\n&gt;&gt;&gt; from dolmen.collection import interfaces\n&gt;&gt;&gt; verifyObject(interfaces.IComponent, c1)\nTrue\n</pre>\n<p>Actually you can create a component without an id, and even using a\nunicode title:</p>\n<pre>&gt;&gt;&gt; c2 = Component(u'Moon')\n&gt;&gt;&gt; c2\n&lt;Component Moon&gt;\n&gt;&gt;&gt; c2.identifier\n'moon'\n&gt;&gt;&gt; c2.title\nu'Moon'\n</pre>\n<p>Or a number (it won\u2019t be converted to string. Like this, this support\nZope translation messages):</p>\n<pre>&gt;&gt;&gt; c69 = Component(69)\n&gt;&gt;&gt; c69.title\n69\n</pre>\n<p>If by doing so, the title contain spaces, they will be replaced by\n<tt>-</tt>. If UTF-8 character are included, the identifiant will be\nencoded:</p>\n<pre>&gt;&gt;&gt; c3 = Component(u'Some lost planet')\n&gt;&gt;&gt; c3.identifier\n'some-lost-planet'\n&gt;&gt;&gt; c4 = Component(u'\u00c9tat du d\u00e9sir')\n&gt;&gt;&gt; c4.identifier\n'c383c2897461742d64752d64c383c2a9736972'\n</pre>\n<p>Spaces are normalized:</p>\n<pre>&gt;&gt;&gt; c5 = Component(' Some unappropriate spacing  ')\n&gt;&gt;&gt; c5.identifier\n'some-unappropriate-spacing'\n</pre>\n<p>You can clone a component and change its identifier:</p>\n<pre>&gt;&gt;&gt; c3clone = c3.clone('new-world')\n&gt;&gt;&gt; c3clone\n&lt;Component Some lost planet&gt;\n&gt;&gt;&gt; c3clone.identifier\n'new-world'\n&gt;&gt;&gt; c3clone is c3\nFalse\n</pre>\n<p>But you can keep the old one as well:</p>\n<pre>&gt;&gt;&gt; c4clone = c4.clone()\n&gt;&gt;&gt; c4clone.identifier\n'c383c2897461742d64752d64c383c2a9736972'\n&gt;&gt;&gt; c4clone is c4\nFalse\n</pre>\n</div>\n<div id=\"collection\">\n<h3><a href=\"#id6\" rel=\"nofollow\">Collection</a></h3>\n<p>Collection are simple objects, implementing ICollection:</p>\n<pre>&gt;&gt;&gt; from dolmen.collection.components import Collection\n&gt;&gt;&gt; s1 = Collection()\n&gt;&gt;&gt; s1\n&lt;Collection&gt;\n&gt;&gt;&gt; len(s1)\n0\n&gt;&gt;&gt; verifyObject(interfaces.ICollection, s1)\nTrue\n</pre>\n<div id=\"adding-components-to-a-collection\">\n<h4><a href=\"#id7\" rel=\"nofollow\">Adding components to a collection</a></h4>\n<p>Now we can put components in a collection, and list it back in the\nsame order:</p>\n<pre>&gt;&gt;&gt; s1.append(c1)\n&gt;&gt;&gt; list(s1)\n[&lt;Component The Sun&gt;]\n&gt;&gt;&gt; s1.append(c2)\n&gt;&gt;&gt; list(s1)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;]\n</pre>\n<p>But you can\u2019t add twice the same component:</p>\n<pre>&gt;&gt;&gt; s1.append(c1)\nTraceback (most recent call last):\n  ...\nValueError: (u'Duplicate identifier', 'sun')\n</pre>\n<p>And this need to be a component:</p>\n<pre>&gt;&gt;&gt; s1.append('home')\nTraceback (most recent call last):\n  ...\nTypeError: (u'Invalid type', 'home')\n</pre>\n<p>You create a collection with components or collection as argument:</p>\n<pre>&gt;&gt;&gt; s2 = Collection(Component('Jupiter'), Component('Saturn'))\n&gt;&gt;&gt; list(s2)\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;]\n&gt;&gt;&gt; len(s2)\n2\n&gt;&gt;&gt; list(Collection(s2, Component('Uranus')))\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;, &lt;Component Uranus&gt;]\n&gt;&gt;&gt; Collection(42)\nTraceback (most recent call last):\n  ...\nTypeError: (u'Invalid type', 42)\n</pre>\n<p>You can add collections. You will receive a copy with all\ncomponents. Components will ordered as the addition is:</p>\n<pre>&gt;&gt;&gt; s3 = s1 + s2\n&gt;&gt;&gt; s3\n&lt;Collection&gt;\n&gt;&gt;&gt; s3 is s1\nFalse\n&gt;&gt;&gt; list(s3)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;,\n &lt;Component Jupiter&gt;, &lt;Component Saturn&gt;]\n&gt;&gt;&gt; len(s3)\n4\n&gt;&gt;&gt; list(s2 + s1)\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;,\n &lt;Component The Sun&gt;, &lt;Component Moon&gt;]\n</pre>\n<p>You can extend a collection. It work pretty much like the construtor:</p>\n<pre>&gt;&gt;&gt; s3.extend(Component('Venus'), Component('Uranus'))\n&gt;&gt;&gt; list(s3)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;,\n &lt;Component Jupiter&gt;, &lt;Component Saturn&gt;,\n &lt;Component Venus&gt;, &lt;Component Uranus&gt;]\n&gt;&gt;&gt; s3.extend('Kitty')\nTraceback (most recent call last):\n  ...\nTypeError: (u'Invalid type', 'Kitty')\n</pre>\n<p>You can copy a collection:</p>\n<pre>&gt;&gt;&gt; s3copy = s3.copy()\n&gt;&gt;&gt; list(s3copy) == list(s3)\nTrue\n&gt;&gt;&gt; s3copy is s3\nFalse\n</pre>\n<p>You can remove all elements from a collection:</p>\n<pre>&gt;&gt;&gt; len(s1)\n2\n&gt;&gt;&gt; s1.clear()\n&gt;&gt;&gt; len(s1)\n0\n</pre>\n<div id=\"ignoring-already-defined-components\">\n<h5><a href=\"#id8\" rel=\"nofollow\">Ignoring already defined components</a></h5>\n<blockquote>\n<pre>&gt;&gt;&gt; from dolmen.collection.components import IGNORE\n&gt;&gt;&gt; ignoring = Collection()\n&gt;&gt;&gt; ignoring.behavior = IGNORE\n</pre>\n<pre>&gt;&gt;&gt; ignoring.append(c1)\n&gt;&gt;&gt; list(ignoring)\n[&lt;Component The Sun&gt;]\n&gt;&gt;&gt; ignoring.append(c2)\n&gt;&gt;&gt; list(ignoring)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;]\n</pre>\n<pre>&gt;&gt;&gt; c1prime = Component(u'The Sun prime', 'sun')\n</pre>\n</blockquote>\n<p>You can add twice the same component, the second is ignored:</p>\n<pre>&gt;&gt;&gt; ignoring.append(c1prime)\n&gt;&gt;&gt; list(ignoring)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;]\n</pre>\n</div>\n<div id=\"overriding-already-defined-components\">\n<h5><a href=\"#id9\" rel=\"nofollow\">Overriding already defined components</a></h5>\n<blockquote>\n<pre>&gt;&gt;&gt; from dolmen.collection.components import OVERRIDE\n&gt;&gt;&gt; overriding = Collection()\n&gt;&gt;&gt; overriding.behavior = OVERRIDE\n</pre>\n<pre>&gt;&gt;&gt; overriding.append(c1)\n&gt;&gt;&gt; list(overriding)\n[&lt;Component The Sun&gt;]\n&gt;&gt;&gt; overriding.append(c2)\n&gt;&gt;&gt; list(overriding)\n[&lt;Component The Sun&gt;, &lt;Component Moon&gt;]\n</pre>\n<pre>&gt;&gt;&gt; c1prime = Component(u'The Sun prime', 'sun')\n</pre>\n</blockquote>\n<p>You can add twice the same component, the second overrides the first:</p>\n<pre>&gt;&gt;&gt; overriding.append(c1prime)\nTraceback (most recent call last):\n...\nNotImplementedError\n</pre>\n<p>It needs to be a IMutableCollection:</p>\n<pre>&gt;&gt;&gt; from dolmen.collection import IMutableCollection\n&gt;&gt;&gt; from zope.interface import directlyProvides\n&gt;&gt;&gt; directlyProvides(overriding, IMutableCollection)\n\n&gt;&gt;&gt; overriding.append(c1prime)\n&gt;&gt;&gt; list(overriding)\n[&lt;Component The Sun prime&gt;, &lt;Component Moon&gt;]\n</pre>\n</div>\n</div>\n<div id=\"retriving-components-from-a-collection\">\n<h4><a href=\"#id10\" rel=\"nofollow\">Retriving components from a collection</a></h4>\n<p>You can retrieve one element of the collection:</p>\n<pre>&gt;&gt;&gt; s3.get('moon')\n&lt;Component Moon&gt;\n&gt;&gt;&gt; s3.get('uranus')\n&lt;Component Uranus&gt;\n&gt;&gt;&gt; s3.get('me')\nTraceback (most recent call last):\n  ...\nKeyError: 'me'\n&gt;&gt;&gt; s3.get('me', default=42)\n42\n</pre>\n<p>And dictionnary like access works:</p>\n<pre>&gt;&gt;&gt; s3['uranus']\n&lt;Component Uranus&gt;\n&gt;&gt;&gt; s3['venus']\n&lt;Component Venus&gt;\n&gt;&gt;&gt; s3['somewhere']\nTraceback (most recent call last):\n  ...\nKeyError: 'somewhere'\n</pre>\n<p>You can get all components ids:</p>\n<pre>&gt;&gt;&gt; s3.keys()\n['sun', 'moon', 'jupiter', 'saturn', 'venus', 'uranus']\n</pre>\n<p>You can test if a component id is in the collection:</p>\n<pre>&gt;&gt;&gt; 'moon' in s3\nTrue\n&gt;&gt;&gt; 'earth' in s3\nFalse\n</pre>\n<p>You can get a new collection with some of the components of the first\none:</p>\n<pre>&gt;&gt;&gt; s4 = s3.select('venus', 'uranus')\n&gt;&gt;&gt; s4 is s3\nFalse\n&gt;&gt;&gt; list(s4)\n[&lt;Component Venus&gt;, &lt;Component Uranus&gt;]\n&gt;&gt;&gt; s4.keys()\n['venus', 'uranus']\n</pre>\n<p>Or the other way around some components of a collection:</p>\n<pre>&gt;&gt;&gt; s5 = s3.omit('sun', 'moon')\n&gt;&gt;&gt; s5 is s3\nFalse\n&gt;&gt;&gt; list(s5)\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;,\n &lt;Component Venus&gt;, &lt;Component Uranus&gt;]\n</pre>\n</div>\n<div id=\"sorting-components-in-a-collection\">\n<h4><a href=\"#id11\" rel=\"nofollow\">Sorting components in a collection</a></h4>\n<p>The Collection sort call works as the standard python list\u2019s one:</p>\n<pre>&gt;&gt;&gt; s5.sort()\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;, &lt;Component Uranus&gt;,\n &lt;Component Venus&gt;]\n</pre>\n<p>We can use the standard arguments (cmp, key and reverse):</p>\n<pre>&gt;&gt;&gt; s5.sort(reverse=True)\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Venus&gt;, &lt;Component Uranus&gt;, &lt;Component Saturn&gt;,\n &lt;Component Jupiter&gt;]\n\n&gt;&gt;&gt; s5.sort(reverse=True, key=lambda el: el.identifier[-1:])\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Venus&gt;, &lt;Component Uranus&gt;, &lt;Component Jupiter&gt;,\n &lt;Component Saturn&gt;]\n\n&gt;&gt;&gt; def myLengthSort(a1, a2):\n...   return cmp(len(a1), len(a2))\n\n&gt;&gt;&gt; s5.sort(reverse=True, key=lambda el: el.identifier, cmp=myLengthSort)\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Jupiter&gt;, &lt;Component Uranus&gt;, &lt;Component Saturn&gt;,\n &lt;Component Venus&gt;]\n</pre>\n<p>The collection can be reversed too, as standard lists:</p>\n<pre>&gt;&gt;&gt; s5.reverse()\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Venus&gt;, &lt;Component Saturn&gt;, &lt;Component Uranus&gt;,\n &lt;Component Jupiter&gt;]\n</pre>\n<p>It is possible to order the components of a Collection using\na given list of ids and the <cite>sort_components</cite> cmp function:</p>\n<pre>&gt;&gt;&gt; from dolmen.collection import sort_components\n\n&gt;&gt;&gt; s5.sort(sort_components(['uranus', 'venus', 'jupiter']))\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Uranus&gt;, &lt;Component Venus&gt;, &lt;Component Jupiter&gt;,\n &lt;Component Saturn&gt;]\n</pre>\n<p>The keys are sorted in the process:</p>\n<pre>&gt;&gt;&gt; print s5.keys()\n['uranus', 'venus', 'jupiter', 'saturn']\n</pre>\n<p>Successive sortings will leave unspecified fields at their relative places:</p>\n<pre>&gt;&gt;&gt; s5.sort(sort_components(['saturn', 'uranus']))\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Saturn&gt;, &lt;Component Uranus&gt;, &lt;Component Venus&gt;,\n &lt;Component Jupiter&gt;]\n</pre>\n<p>We can also revert the sorting, as the standard python behavior:</p>\n<pre>&gt;&gt;&gt; s5.sort(sort_components(['uranus', 'venus']), reverse=True)\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Saturn&gt;, &lt;Component Jupiter&gt;, &lt;Component Venus&gt;,\n &lt;Component Uranus&gt;]\n</pre>\n<p>Errors are raised if the provided list is malformed or smaller than 2\nelements:</p>\n<pre>&gt;&gt;&gt; s5.sort(sort_components(['uranus']))\nTraceback (most recent call last):\n...\nValueError: Please provide a list of, at least, two component identifiers.\n\n&gt;&gt;&gt; s5.sort(sort_components('something'))\nTraceback (most recent call last):\n...\nValueError: Please provide a valid list or tuple of component identifiers.\n</pre>\n<p>The behavior, if unknow ids are provided, is unchanged:</p>\n<pre>&gt;&gt;&gt; s5.sort(sort_components(['venus', 'uranus', 'cardassia', 'bajor']))\n&gt;&gt;&gt; print list(s5)\n[&lt;Component Venus&gt;, &lt;Component Uranus&gt;, &lt;Component Saturn&gt;,\n &lt;Component Jupiter&gt;]\n</pre>\n</div>\n<div id=\"parameters-on-collections\">\n<h4><a href=\"#id12\" rel=\"nofollow\">Parameters on collections</a></h4>\n<p>You can provides extra parameters on collections that will be set as\nattributes on the object:</p>\n<pre>&gt;&gt;&gt; s6 = Collection(s2, name=u'me', city=u'rotterdam')\n&gt;&gt;&gt; s6\n&lt;Collection&gt;\n&gt;&gt;&gt; list(s6)\n[&lt;Component Jupiter&gt;, &lt;Component Saturn&gt;]\n&gt;&gt;&gt; s6.name\nu'me'\n&gt;&gt;&gt; s6.city\nu'rotterdam'\n</pre>\n<p>Those attributes are kept if you use the operations <tt>select</tt>,\n<tt>omit</tt> or <tt>copy</tt>:</p>\n<pre>&gt;&gt;&gt; s6copy = s6.copy()\n&gt;&gt;&gt; s6copy.name\nu'me'\n&gt;&gt;&gt; s6copy.city\nu'rotterdam'\n\n&gt;&gt;&gt; s6omit = s6.omit('jupiter')\n&gt;&gt;&gt; s6omit.name\nu'me'\n&gt;&gt;&gt; s6omit.city\nu'rotterdam'\n\n&gt;&gt;&gt; s6select = s6.select('jupiter')\n&gt;&gt;&gt; s6select.name\nu'me'\n&gt;&gt;&gt; s6select.city\nu'rotterdam'\n</pre>\n</div>\n</div>\n</div>\n<div id=\"changes\">\n<h2><a href=\"#id13\" rel=\"nofollow\">Changes</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id14\" rel=\"nofollow\">0.3 (2011-06-13)</a></h3>\n<ul>\n<li>Added behavior to the collection allowing the override or ignore of the\ncomponents.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id15\" rel=\"nofollow\">0.2 (2011-04-14)</a></h3>\n<ul>\n<li>Updated components names for entry points.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id16\" rel=\"nofollow\">0.1 (2011-04-13)</a></h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 791329, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "8891f3bad8ab88c0c05822acb2d11f59", "sha256": "bc76a1f9181d4551ddc820d9949cd8c4f6124e53faa0c88324e462be9bc4f5d2"}, "downloads": -1, "filename": "dolmen.collection-0.1.tar.gz", "has_sig": false, "md5_digest": "8891f3bad8ab88c0c05822acb2d11f59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8223, "upload_time": "2011-04-13T17:47:57", "upload_time_iso_8601": "2011-04-13T17:47:57.145458Z", "url": "https://files.pythonhosted.org/packages/b1/d7/cf13f86095bd0959d4bb00f05553a9439d19331b5bfe50a14b9739c3cd37/dolmen.collection-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "96878e8ffe67cdc1e07e4e8992697f15", "sha256": "2c3d68ef2f5387dd2b22cbd2b3aef4425e4c54b8621f9af5cd92a2eb493fd5f0"}, "downloads": -1, "filename": "dolmen.collection-0.2.tar.gz", "has_sig": false, "md5_digest": "96878e8ffe67cdc1e07e4e8992697f15", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9551, "upload_time": "2011-04-14T11:33:24", "upload_time_iso_8601": "2011-04-14T11:33:24.315123Z", "url": "https://files.pythonhosted.org/packages/1e/a3/038f14953cb1017b66521fb6267a0a5eee23c83fdb1526caf904220bd88c/dolmen.collection-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "8a2843e7d84a98cfc74ab32cb8144b5b", "sha256": "ae426143248c5ab582e235694d74e97cbf3ed1a9ef5f8606a2851e0c495cd070"}, "downloads": -1, "filename": "dolmen.collection-0.3.tar.gz", "has_sig": false, "md5_digest": "8a2843e7d84a98cfc74ab32cb8144b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10335, "upload_time": "2011-06-13T17:47:35", "upload_time_iso_8601": "2011-06-13T17:47:35.066802Z", "url": "https://files.pythonhosted.org/packages/0e/a5/5ae5dd0a69bf7b0ddca0170e7d44992fb39e54f2a6ed049f1882eb8fd85e/dolmen.collection-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8a2843e7d84a98cfc74ab32cb8144b5b", "sha256": "ae426143248c5ab582e235694d74e97cbf3ed1a9ef5f8606a2851e0c495cd070"}, "downloads": -1, "filename": "dolmen.collection-0.3.tar.gz", "has_sig": false, "md5_digest": "8a2843e7d84a98cfc74ab32cb8144b5b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10335, "upload_time": "2011-06-13T17:47:35", "upload_time_iso_8601": "2011-06-13T17:47:35.066802Z", "url": "https://files.pythonhosted.org/packages/0e/a5/5ae5dd0a69bf7b0ddca0170e7d44992fb39e54f2a6ed049f1882eb8fd85e/dolmen.collection-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:29 2020"}