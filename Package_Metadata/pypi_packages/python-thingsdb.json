{"info": {"author": "Jeroen van der Heijden", "author_email": "jeroen@transceptor.technology", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Build Tools"], "description": "# Python connector and ORM for ThingsDB\n\n> This library requires Python 3.6 or higher.\n\n---------------------------------------\n\n  * [Installation](#installation)\n  * [Quick usage](#quick-usage)\n  * [Client module](#client-module)\n    * [Client()](#Client)\n    * [authenticate](#authenticate)\n    * [add_event_handler](#add_event_handler)\n    * [close](#close)\n    * [connect](#connect)\n    * [connect_pool](#connect_pool)\n    * [get_default_scope](#get_default_scope)\n    * [get_event_loop](#get_event_loop)\n    * [is_connected](#is_connected)\n    * [query](#query)\n    * [reconnect](#reconnect)\n    * [run](#run)\n    * [set_default_scope](#set_default_scope)\n    * [unwatch](#unwatch)\n    * [wait_closed](#wait_closed)\n    * [watch](#watch)\n  * [Model](#model)\n    * [Collection](#collection)\n    * [Thing](#thing)\n\n---------------------------------------\n\n## Installation\n\nJust use pip:\n\n```\npip install python-thingsdb\n```\n\nOr, clone the project and use setup.py:\n\n```\npython setup.py install\n```\n\n## Quick usage\n\n```python\nimport asyncio\nfrom thingsdb.client import Client\n\nasync def hello_world():\n    client = Client()\n\n    # replace `localhost` with your ThingsDB server address\n    await client.connect('localhost')\n\n    try:\n        # replace `admin` and `pass` with your username and password\n        # or use a valid token string\n        await client.authenticate('admin', 'pass')\n\n        # perform the hello world code...\n        print(await client.query('''\n            \"Hello World!\";\n        ''')\n\n    finally:\n        # the will close the client in a nice way\n        client.close()\n        await client.wait_closed()\n\n# run the hello world example\nasyncio.get_event_loop().run_until_complete(hello_world())\n```\n\n## Client module\n\nThis is an client using `asyncio` which can be used for running queries to\nThingsDB.\n\n\n### Client()\n\n```python\nthingsdb.client.Client(\n    auto_reconnect: bool = True,\n    ssl: Optional[Union[bool, ssl.SSLContext]] = None,\n    loop: Optional[asyncio.AbstractEventLoop] = None\n) -> Client\n```\nInitialize a ThingsDB client\n\n#### Args\n\n- *auto_reconnect (bool, optional)*:\n    When set to `True`, the client will automatically\n    reconnect when a connection is lost. If set to `False` and the\n    connection gets lost, one may call the [reconnect()](#reconnect) method to\n    make a new connection. The auto-reconnect option can act on\n    node changes and does so automatically if the connected user\n    has the required `WATCH` privileges on the `@node` scope.\n    Defaults to `True`.\n- *ssl (SSLContext or bool, optional)*:\n    Accepts an ssl.SSLContext for creating a secure connection\n    using SSL/TLS. This argument may simply be set to `True` in\n    which case a context using `ssl.PROTOCOL_TLS` is created.\n    Defaults to `None`.\n- *loop (AbstractEventLoop, optional)*:\n    Can be used to run the client on a specific event loop.\n    If this argument is not used, the default event loop will be\n    used. Defaults to `None`.\n\n### authenticate\n\n```python\nasync Client().authenticate(\n    *auth: Union[str, tuple],\n    timeout: Optional[int] = 5\n) -> None\n```\n\nAuthenticate a ThingsDB connection.\n\n#### Args\n\n- *\\*auth (str or (str, str))*:\n    Argument `auth` can be be either a string with a token or a\n    tuple with username and password. (the latter may be provided\n    as two separate arguments\n- *timeout (int, optional)*:\n    Can be be used to control the maximum time in seconds for the\n    client to wait for response on the authentication request.\n    The timeout may be set to `None` in which case the client will\n    wait forever on a response. Defaults to 5.\n\n### add_event_handler\n\n```python\nClient().add_event_handler(event_handler: Events) -> None\n```\n\nAdd an event handler.\n\nEvent handlers will called in the order they are added.\n\n#### Args\n\n- *event_handler (Events)*:\n    An instance of Events (see `thingsdb.client.abc.events`).\n\n### close\n\n```python\nClient().close() -> None\n```\n\nClose the ThingsDB connection.\n\nThis method will return immediately so the connection may not be\nclosed yet after a call to `close()`. Use the [wait_closed()](#wait_closed) method\nafter calling this method if this is required.\n\n### connect\n\n```python\nClient().connect(\n    host: str,\n    port: int = 9200,\n    timeout: Optional[int] = 5\n) -> asyncio.Future\n```\n\nConnect to ThingsDB.\n\nThis method will *only* create a connection, so the connection is not\nauthenticated yet. Use the [authenticate(..)](#authenticate) method after creating a\nconnection before using the connection.\n\n#### Args\n\n- *host (str)*:\n    A hostname, IP address, FQDN to connect to.\n- *port (int, optional)*:\n    Integer value between 0 and 65535 and should be the port number\n    where a ThingsDB node is listening to for client connections.\n    Defaults to 9200.\n- *timeout (int, optional)*:\n    Can be be used to control the maximum time the client will\n    attempt to create a connection. The timeout may be set to\n    `None` in which case the client will wait forever on a\n    response. Defaults to 5.\n\n### Returns\n\nFuture which should be awaited. The result of the future will be\nset to `None` when successful.\n\n> Do not use this method if the client is already\n> connected. This can be checked with `client.is_connected()`.\n\n### connect_pool\n\n```python\nClient().connect_pool(\n    pool: list,\n    *auth: Union[str, tuple]\n) -> asyncio.Future\n```\n\nConnect using a connection pool.\n\nWhen using a connection pool, the client will randomly choose a node\nto connect to. When a node is going down, it will inform the client\nso it will automatically re-connect to another node. Connections will\nautomatically authenticate so the connection pool requires credentials\nto perform the authentication.\n\n#### Examples\n\n```python\nawait connect_pool([\n    'node01.local',             # address as string\n    'node02.local',             # port will default to 9200\n    ('node03.local', 9201),     # ..or with an explicit port\n], \"admin\", \"pass\")\n```\n\n#### Args\n\n- *pool (list of addresses)*:\n    Should be an iterable with node address strings, or tuples\n    with `address` and `port` combinations in a tuple or list.\n- *\\*auth (str or (str, str))*:\n    Argument `auth` can be be either a string with a token or a\n    tuple with username and password. (the latter may be provided\n    as two separate arguments\n\n### Returns\n\nFuture which should be awaited. The result of the future will be\nset to `None` when successful.\n\n> Do not use this method if the client is already\n> connected. This can be checked with `client.is_connected()`.\n\n\n### get_default_scope\n\n```python\nClient().get_default_scope() -> str\n```\n\nGet the default scope.\n\nThe default scope may be changed with the [set_default_scope()](#set_default_scope) method.\n\n#### Returns\n\nThe default scope which is used by the client when no specific scope is specified.\n\n\n### get_event_loop\n\n```python\nClient().get_event_loop() -> asyncio.AbstractEventLoop\n```\n\nCan be used to get the event loop.\n\n#### Returns\n\nThe event loop used by the client.\n\n### is_connected\n\n```python\nClient().is_connected() -> bool\n```\n\nCan be used to check if the client is connected.\n\n#### Returns\n`True` when the client is connected else `False`.\n\n### query\n\n```python\nClient().query(\n        code: str,\n        scope: Optional[str] = None,\n        timeout: Optional[int] = None,\n        convert_vars: bool = True,\n        **kwargs: Any\n) -> asyncio.Future\n```\n\nQuery ThingsDB.\n\nUse this method to run `code` in a scope.\n\n#### Args\n\n- *code (str)*:\n    ThingsDB code to run.\n- *scope (str, optional)*:\n    Run the code in this scope. If not specified, the default scope\n    will be used. See https://docs.thingsdb.net/v0/overview/scopes/\n    for how to format a scope.\n- *timeout (int, optional)*:\n    Raise a time-out exception if no response is received within X\n    seconds. If no time-out is given, the client will wait forever.\n    Defaults to `None`.\n- *convert_vars (bool, optional)*:\n    Only applicable if `**kwargs` are given. If set to `True`, then\n    the provided `**kwargs` values will be converted so ThingsDB can\n    understand them. For example, a thing should be given just by\n    it's ID and with conversion the `#` will be extracted. When\n    this argument is `False`, the `**kwargs` stay untouched.\n    Defaults to `True`.\n- *\\*\\*kwargs (any, optional)*:\n    Can be used to inject variable into the ThingsDB code.\n\n#### Examples\n\nAlthough we could just as easy have wrote everything in the\nThingsDB code itself, this example shows how to use **kwargs for\ninjecting variable into code. In this case the variable `book`.\n\n```python\nres = await client.query(\".my_book = book;\", book={\n    'title': 'Manual ThingsDB'\n})\n```\n\n#### Returns\n\nFuture which should be awaited. The result of the future will\ncontain the result of the ThingsDB code when successful.\n\n> If the ThingsDB code will return with an exception, then this\n> exception will be translated to a Python Exception which will be\n> raised. See thingsdb.exceptions for all possible exceptions and\n> https://docs.thingsdb.net/v0/errors/ for info on the error codes.\n\n### reconnect\n\n```python\nasync Client().reconnect() -> None\n```\n\nRe-connect to ThingsDB.\n\nThis method can be used, even when a connection still exists. In case\nof a connection pool, a call to `reconnect()` will switch to another\nnode.\n\n\n### run\n\n```python\nClient().run(\n    procedure: str,\n    *args: Optional[Any],\n    scope: Optional[str] = None,\n    timeout: Optional[int] = None,\n    convert_args: bool = True,\n    **kwargs: Any\n) -> asyncio.Future\n```\n\nRun a procedure.\n\nUse this method to run a stored procedure in a scope.\n\n#### Args\n\n- *procedure (str)*:\n    Name of the procedure to run.\n- *\\*args (any)*:\n    Arguments which are injected as the procedure arguments.\n    Instead of positional, the arguments may also be parsed using\n    keyword arguments but not both at the same time.\n- *scope (str, optional)*:\n    Run the procedure in this scope. If not specified, the default\n    scope will be used.\n    See https://docs.thingsdb.net/v0/overview/scopes/ for how to\n    format a scope.\n- *timeout (int, optional)*:\n    Raise a time-out exception if no response is received within X\n    seconds. If no time-out is given, the client will wait forever.\n    Defaults to `None`.\n- *convert_args (bool, optional)*:\n    Only applicable if `*args` are given. If set to `True`, then\n    the provided `*args` values will be converted so ThingsDB can\n    understand them. For example, a thing should be given just by\n    it's ID and with conversion the `#` will be extracted. When\n    this argument is `False`, the `*args` stay untouched.\n    Defaults to `True`.\n- *\\*\\*kwargs (any, optional)*:\n     Arguments which are injected as the procedure arguments.\n    Instead of by name, the arguments may also be parsed using\n    positional arguments but not both at the same time.\n\n#### Returns\n\nFuture which should be awaited. The result of the future will\ncontain the result of the ThingsDB procedure when successful.\n\n\n> If the ThingsDB code will return with an exception, then this\n> exception will be translated to a Python Exception which will be\n> raised. See thingsdb.exceptions for all possible exceptions and\n> https://docs.thingsdb.net/v0/errors/ for info on the error codes.\n\n\n### set_default_scope\n\n```python\nClient().set_default_scope(scope: str) -> None\n```\n\nSet the default scope.\n\nCan be used to change the default scope which is initially set to `@t`.\n\n#### Args\n- *scope (str)*:\n    Set the default scope. A scope may start with either the `/`\n    character, or `@`. Examples: `\"//stuff\"`, `\"@:stuff\"`, `\"/node\"`\n\n### unwatch\n\n```python\nClient().unwatch(\n    *ids: int,\n    scope: Optional[str] = None\n) -> asyncio.Future\n```\n\nUnsubscribe for changes on given things.\n\nStop receiving events for the things given by one or more ids. It is\npossible that the client receives an event shortly after calling the\nunsubscribe method because the event was queued.\n\n#### Args\n- *\\*ids (int)*:\n    Thing IDs to unsubscribe. No error is returned in case one of\n    the given things are not found within the collection or if the\n    thing was not being watched.\n- *scope (str, optional)*:\n    Unsubscribe for things in this scope. If not specified, the\n    default scope will be used. Only collection scopes may contain\n    things so only collection scopes can be used.\n    See https://docs.thingsdb.net/v0/overview/scopes/ for how to\n    format a scope.\n\n#### Returns\n\nFuture which result will be set to `None` if successful.\n\n\n### wait_closed\n\n```python\nasync Client().wait_closed() -> None\n```\n\nWait for a connection to close.\n\nCan be used after calling the `close()` method to determine when the\nconnection is actually closed.\n\n\n### watch\n\n```python\nClient().watch(self, *ids: int, scope: Optional[str] = None) -> asyncio.Future\n```\n\nSubscribe for changes on given things.\n\nThis method accepts one or more thing ids to subscribe to. This\nmethod will simply return None as soon as the subscribe request is\nsuccessful handled by ThingsDB. After the response, the client will\nreceive `INIT` events for all subscribed ids. After that, ThingsDB\nwill continue to provide the client with `UPDATE` events which contain\nchanges to the subscribed thing. A `DELETE` event might be received\nif, and only if the thing is removed and garbage collected from the\ncollection.\n\n#### Args\n\n- *\\*ids (int)*:\n    Thing IDs to subscribe to. No error is returned in case one of\n    the given things are not found within the collection, instead a\n    `WARN` event will be send to the client.\n- *scope (str, optional)*:\n    Subscribe on things in this scope. If not specified, the\n    default scope will be used. Only collection scopes may contain\n    things so only collection scopes can be used.\n    See https://docs.thingsdb.net/v0/overview/scopes/ for how to\n    format a scope.\n\n#### Returns\n\nFuture which result will be set to `None` if successful.\n\n## Model\n\nIt is possible to create a model which will map to data in ThingsDB.\nThe model will be kept up-to-date be the client. It is possible to break\nanywhere you want in the model. What is not provided, will not be watched.\n\n### Collection\n\nA collection is always required, even you do not plan to watch anything in the\nroot of the collection. In the latter case you can just create an empty\ncollection which can be used when initializing individual things.\n\n```python\nimport asyncio\nfrom thingsdb.client import Client\nfrom thingsdb.model import Collection\n\nclass Foo(Collection):\n    name = 'str'\n```\n\nIn the example above, the ThingsDB collection name must be equal to the Python Class name, `Foo` in this case.\nIt may be useful to use a different Python Class name than the ThingsDB collection\nname. This can be achieved by using the magic attribute `__COLLECTION_NAME__`, for example:\n\n```python\nclass Stuff(Collection):\n    # the ThingsDB collection name is `stuff`, all lower case characters\n    __COLLECTION_NAME__ = 'stuff'\n```\n\n### Thing\n\n```python\nimport asyncio\nfrom thingsdb.client import Client\nfrom thingsdb.model import Collection, Thing\n\nclass Bar(Thing):\n    name = 'str'\n    other = 'Bar', lambda: Bar\n\nclass Foo(Collection):\n    bar: 'Bar', Bar\n\nasync def example():\n    client = Client()\n    foo = Foo()\n    await client.connect('localhost')\n    try:\n        await client.authenticate('admin', 'pass')\n        await foo.load(client)\n\n        # ... now the collection will be watched\n\n    finally:\n        client.close()\n        await client.wait_closed()\n```\n\nSuppose you have an ID and want to watch that single thing, then\nyou can initialize the thing and call `watch()` manually. For example,\nconsider we have an `#5` for a `Bar` type in collection `Foo`:\n\n```python\nbar = Bar(foo, 5)\nawait bar.watch()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/thingsdb/python-thingsdb", "keywords": "database connector orm", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "python-thingsdb", "package_url": "https://pypi.org/project/python-thingsdb/", "platform": "", "project_url": "https://pypi.org/project/python-thingsdb/", "project_urls": {"Homepage": "https://github.com/thingsdb/python-thingsdb"}, "release_url": "https://pypi.org/project/python-thingsdb/0.5.2/", "requires_dist": null, "requires_python": "", "summary": "ThingsDB Connector", "version": "0.5.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Python connector and ORM for ThingsDB</h1>\n<blockquote>\n<p>This library requires Python 3.6 or higher.</p>\n</blockquote>\n<hr>\n<ul>\n<li><a href=\"#installation\" rel=\"nofollow\">Installation</a></li>\n<li><a href=\"#quick-usage\" rel=\"nofollow\">Quick usage</a></li>\n<li><a href=\"#client-module\" rel=\"nofollow\">Client module</a>\n<ul>\n<li><a href=\"#Client\" rel=\"nofollow\">Client()</a></li>\n<li><a href=\"#authenticate\" rel=\"nofollow\">authenticate</a></li>\n<li><a href=\"#add_event_handler\" rel=\"nofollow\">add_event_handler</a></li>\n<li><a href=\"#close\" rel=\"nofollow\">close</a></li>\n<li><a href=\"#connect\" rel=\"nofollow\">connect</a></li>\n<li><a href=\"#connect_pool\" rel=\"nofollow\">connect_pool</a></li>\n<li><a href=\"#get_default_scope\" rel=\"nofollow\">get_default_scope</a></li>\n<li><a href=\"#get_event_loop\" rel=\"nofollow\">get_event_loop</a></li>\n<li><a href=\"#is_connected\" rel=\"nofollow\">is_connected</a></li>\n<li><a href=\"#query\" rel=\"nofollow\">query</a></li>\n<li><a href=\"#reconnect\" rel=\"nofollow\">reconnect</a></li>\n<li><a href=\"#run\" rel=\"nofollow\">run</a></li>\n<li><a href=\"#set_default_scope\" rel=\"nofollow\">set_default_scope</a></li>\n<li><a href=\"#unwatch\" rel=\"nofollow\">unwatch</a></li>\n<li><a href=\"#wait_closed\" rel=\"nofollow\">wait_closed</a></li>\n<li><a href=\"#watch\" rel=\"nofollow\">watch</a></li>\n</ul>\n</li>\n<li><a href=\"#model\" rel=\"nofollow\">Model</a>\n<ul>\n<li><a href=\"#collection\" rel=\"nofollow\">Collection</a></li>\n<li><a href=\"#thing\" rel=\"nofollow\">Thing</a></li>\n</ul>\n</li>\n</ul>\n<hr>\n<h2>Installation</h2>\n<p>Just use pip:</p>\n<pre><code>pip install python-thingsdb\n</code></pre>\n<p>Or, clone the project and use setup.py:</p>\n<pre><code>python setup.py install\n</code></pre>\n<h2>Quick usage</h2>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thingsdb.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">hello_world</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># replace `localhost` with your ThingsDB server address</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"c1\"># replace `admin` and `pass` with your username and password</span>\n        <span class=\"c1\"># or use a valid token string</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">authenticate</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># perform the hello world code...</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s1\">'''</span>\n<span class=\"s1\">            \"Hello World!\";</span>\n<span class=\"s1\">        '''</span><span class=\"p\">)</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"c1\"># the will close the client in a nice way</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># run the hello world example</span>\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run_until_complete</span><span class=\"p\">(</span><span class=\"n\">hello_world</span><span class=\"p\">())</span>\n</pre>\n<h2>Client module</h2>\n<p>This is an client using <code>asyncio</code> which can be used for running queries to\nThingsDB.</p>\n<h3>Client()</h3>\n<pre><span class=\"n\">thingsdb</span><span class=\"o\">.</span><span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">Client</span><span class=\"p\">(</span>\n    <span class=\"n\">auto_reconnect</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">ssl</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">bool</span><span class=\"p\">,</span> <span class=\"n\">ssl</span><span class=\"o\">.</span><span class=\"n\">SSLContext</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">loop</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">AbstractEventLoop</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">Client</span>\n</pre>\n<p>Initialize a ThingsDB client</p>\n<h4>Args</h4>\n<ul>\n<li><em>auto_reconnect (bool, optional)</em>:\nWhen set to <code>True</code>, the client will automatically\nreconnect when a connection is lost. If set to <code>False</code> and the\nconnection gets lost, one may call the <a href=\"#reconnect\" rel=\"nofollow\">reconnect()</a> method to\nmake a new connection. The auto-reconnect option can act on\nnode changes and does so automatically if the connected user\nhas the required <code>WATCH</code> privileges on the <code>@node</code> scope.\nDefaults to <code>True</code>.</li>\n<li><em>ssl (SSLContext or bool, optional)</em>:\nAccepts an ssl.SSLContext for creating a secure connection\nusing SSL/TLS. This argument may simply be set to <code>True</code> in\nwhich case a context using <code>ssl.PROTOCOL_TLS</code> is created.\nDefaults to <code>None</code>.</li>\n<li><em>loop (AbstractEventLoop, optional)</em>:\nCan be used to run the client on a specific event loop.\nIf this argument is not used, the default event loop will be\nused. Defaults to <code>None</code>.</li>\n</ul>\n<h3>authenticate</h3>\n<pre><span class=\"k\">async</span> <span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">authenticate</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">],</span>\n    <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Authenticate a ThingsDB connection.</p>\n<h4>Args</h4>\n<ul>\n<li><em>*auth (str or (str, str))</em>:\nArgument <code>auth</code> can be be either a string with a token or a\ntuple with username and password. (the latter may be provided\nas two separate arguments</li>\n<li><em>timeout (int, optional)</em>:\nCan be be used to control the maximum time in seconds for the\nclient to wait for response on the authentication request.\nThe timeout may be set to <code>None</code> in which case the client will\nwait forever on a response. Defaults to 5.</li>\n</ul>\n<h3>add_event_handler</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">add_event_handler</span><span class=\"p\">(</span><span class=\"n\">event_handler</span><span class=\"p\">:</span> <span class=\"n\">Events</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Add an event handler.</p>\n<p>Event handlers will called in the order they are added.</p>\n<h4>Args</h4>\n<ul>\n<li><em>event_handler (Events)</em>:\nAn instance of Events (see <code>thingsdb.client.abc.events</code>).</li>\n</ul>\n<h3>close</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Close the ThingsDB connection.</p>\n<p>This method will return immediately so the connection may not be\nclosed yet after a call to <code>close()</code>. Use the <a href=\"#wait_closed\" rel=\"nofollow\">wait_closed()</a> method\nafter calling this method if this is required.</p>\n<h3>connect</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span>\n    <span class=\"n\">host</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"n\">port</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"mi\">9200</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">5</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Connect to ThingsDB.</p>\n<p>This method will <em>only</em> create a connection, so the connection is not\nauthenticated yet. Use the <a href=\"#authenticate\" rel=\"nofollow\">authenticate(..)</a> method after creating a\nconnection before using the connection.</p>\n<h4>Args</h4>\n<ul>\n<li><em>host (str)</em>:\nA hostname, IP address, FQDN to connect to.</li>\n<li><em>port (int, optional)</em>:\nInteger value between 0 and 65535 and should be the port number\nwhere a ThingsDB node is listening to for client connections.\nDefaults to 9200.</li>\n<li><em>timeout (int, optional)</em>:\nCan be be used to control the maximum time the client will\nattempt to create a connection. The timeout may be set to\n<code>None</code> in which case the client will wait forever on a\nresponse. Defaults to 5.</li>\n</ul>\n<h3>Returns</h3>\n<p>Future which should be awaited. The result of the future will be\nset to <code>None</code> when successful.</p>\n<blockquote>\n<p>Do not use this method if the client is already\nconnected. This can be checked with <code>client.is_connected()</code>.</p>\n</blockquote>\n<h3>connect_pool</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">connect_pool</span><span class=\"p\">(</span>\n    <span class=\"n\">pool</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">auth</span><span class=\"p\">:</span> <span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">tuple</span><span class=\"p\">]</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Connect using a connection pool.</p>\n<p>When using a connection pool, the client will randomly choose a node\nto connect to. When a node is going down, it will inform the client\nso it will automatically re-connect to another node. Connections will\nautomatically authenticate so the connection pool requires credentials\nto perform the authentication.</p>\n<h4>Examples</h4>\n<pre><span class=\"k\">await</span> <span class=\"n\">connect_pool</span><span class=\"p\">([</span>\n    <span class=\"s1\">'node01.local'</span><span class=\"p\">,</span>             <span class=\"c1\"># address as string</span>\n    <span class=\"s1\">'node02.local'</span><span class=\"p\">,</span>             <span class=\"c1\"># port will default to 9200</span>\n    <span class=\"p\">(</span><span class=\"s1\">'node03.local'</span><span class=\"p\">,</span> <span class=\"mi\">9201</span><span class=\"p\">),</span>     <span class=\"c1\"># ..or with an explicit port</span>\n<span class=\"p\">],</span> <span class=\"s2\">\"admin\"</span><span class=\"p\">,</span> <span class=\"s2\">\"pass\"</span><span class=\"p\">)</span>\n</pre>\n<h4>Args</h4>\n<ul>\n<li><em>pool (list of addresses)</em>:\nShould be an iterable with node address strings, or tuples\nwith <code>address</code> and <code>port</code> combinations in a tuple or list.</li>\n<li><em>*auth (str or (str, str))</em>:\nArgument <code>auth</code> can be be either a string with a token or a\ntuple with username and password. (the latter may be provided\nas two separate arguments</li>\n</ul>\n<h3>Returns</h3>\n<p>Future which should be awaited. The result of the future will be\nset to <code>None</code> when successful.</p>\n<blockquote>\n<p>Do not use this method if the client is already\nconnected. This can be checked with <code>client.is_connected()</code>.</p>\n</blockquote>\n<h3>get_default_scope</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_default_scope</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">str</span>\n</pre>\n<p>Get the default scope.</p>\n<p>The default scope may be changed with the <a href=\"#set_default_scope\" rel=\"nofollow\">set_default_scope()</a> method.</p>\n<h4>Returns</h4>\n<p>The default scope which is used by the client when no specific scope is specified.</p>\n<h3>get_event_loop</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">AbstractEventLoop</span>\n</pre>\n<p>Can be used to get the event loop.</p>\n<h4>Returns</h4>\n<p>The event loop used by the client.</p>\n<h3>is_connected</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">is_connected</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">bool</span>\n</pre>\n<p>Can be used to check if the client is connected.</p>\n<h4>Returns</h4>\n<p><code>True</code> when the client is connected else <code>False</code>.</p>\n<h3>query</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span>\n        <span class=\"n\">code</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n        <span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n        <span class=\"n\">convert_vars</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Query ThingsDB.</p>\n<p>Use this method to run <code>code</code> in a scope.</p>\n<h4>Args</h4>\n<ul>\n<li><em>code (str)</em>:\nThingsDB code to run.</li>\n<li><em>scope (str, optional)</em>:\nRun the code in this scope. If not specified, the default scope\nwill be used. See <a href=\"https://docs.thingsdb.net/v0/overview/scopes/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/overview/scopes/</a>\nfor how to format a scope.</li>\n<li><em>timeout (int, optional)</em>:\nRaise a time-out exception if no response is received within X\nseconds. If no time-out is given, the client will wait forever.\nDefaults to <code>None</code>.</li>\n<li><em>convert_vars (bool, optional)</em>:\nOnly applicable if <code>**kwargs</code> are given. If set to <code>True</code>, then\nthe provided <code>**kwargs</code> values will be converted so ThingsDB can\nunderstand them. For example, a thing should be given just by\nit's ID and with conversion the <code>#</code> will be extracted. When\nthis argument is <code>False</code>, the <code>**kwargs</code> stay untouched.\nDefaults to <code>True</code>.</li>\n<li><em>**kwargs (any, optional)</em>:\nCan be used to inject variable into the ThingsDB code.</li>\n</ul>\n<h4>Examples</h4>\n<p>Although we could just as easy have wrote everything in the\nThingsDB code itself, this example shows how to use **kwargs for\ninjecting variable into code. In this case the variable <code>book</code>.</p>\n<pre><span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">query</span><span class=\"p\">(</span><span class=\"s2\">\".my_book = book;\"</span><span class=\"p\">,</span> <span class=\"n\">book</span><span class=\"o\">=</span><span class=\"p\">{</span>\n    <span class=\"s1\">'title'</span><span class=\"p\">:</span> <span class=\"s1\">'Manual ThingsDB'</span>\n<span class=\"p\">})</span>\n</pre>\n<h4>Returns</h4>\n<p>Future which should be awaited. The result of the future will\ncontain the result of the ThingsDB code when successful.</p>\n<blockquote>\n<p>If the ThingsDB code will return with an exception, then this\nexception will be translated to a Python Exception which will be\nraised. See thingsdb.exceptions for all possible exceptions and\n<a href=\"https://docs.thingsdb.net/v0/errors/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/errors/</a> for info on the error codes.</p>\n</blockquote>\n<h3>reconnect</h3>\n<pre><span class=\"k\">async</span> <span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">reconnect</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Re-connect to ThingsDB.</p>\n<p>This method can be used, even when a connection still exists. In case\nof a connection pool, a call to <code>reconnect()</code> will switch to another\nnode.</p>\n<h3>run</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span>\n    <span class=\"n\">procedure</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">,</span>\n    <span class=\"o\">*</span><span class=\"n\">args</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Any</span><span class=\"p\">],</span>\n    <span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">timeout</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">,</span>\n    <span class=\"n\">convert_args</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">:</span> <span class=\"n\">Any</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Run a procedure.</p>\n<p>Use this method to run a stored procedure in a scope.</p>\n<h4>Args</h4>\n<ul>\n<li><em>procedure (str)</em>:\nName of the procedure to run.</li>\n<li><em>*args (any)</em>:\nArguments which are injected as the procedure arguments.\nInstead of positional, the arguments may also be parsed using\nkeyword arguments but not both at the same time.</li>\n<li><em>scope (str, optional)</em>:\nRun the procedure in this scope. If not specified, the default\nscope will be used.\nSee <a href=\"https://docs.thingsdb.net/v0/overview/scopes/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/overview/scopes/</a> for how to\nformat a scope.</li>\n<li><em>timeout (int, optional)</em>:\nRaise a time-out exception if no response is received within X\nseconds. If no time-out is given, the client will wait forever.\nDefaults to <code>None</code>.</li>\n<li><em>convert_args (bool, optional)</em>:\nOnly applicable if <code>*args</code> are given. If set to <code>True</code>, then\nthe provided <code>*args</code> values will be converted so ThingsDB can\nunderstand them. For example, a thing should be given just by\nit's ID and with conversion the <code>#</code> will be extracted. When\nthis argument is <code>False</code>, the <code>*args</code> stay untouched.\nDefaults to <code>True</code>.</li>\n<li><em>**kwargs (any, optional)</em>:\nArguments which are injected as the procedure arguments.\nInstead of by name, the arguments may also be parsed using\npositional arguments but not both at the same time.</li>\n</ul>\n<h4>Returns</h4>\n<p>Future which should be awaited. The result of the future will\ncontain the result of the ThingsDB procedure when successful.</p>\n<blockquote>\n<p>If the ThingsDB code will return with an exception, then this\nexception will be translated to a Python Exception which will be\nraised. See thingsdb.exceptions for all possible exceptions and\n<a href=\"https://docs.thingsdb.net/v0/errors/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/errors/</a> for info on the error codes.</p>\n</blockquote>\n<h3>set_default_scope</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">set_default_scope</span><span class=\"p\">(</span><span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"nb\">str</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Set the default scope.</p>\n<p>Can be used to change the default scope which is initially set to <code>@t</code>.</p>\n<h4>Args</h4>\n<ul>\n<li><em>scope (str)</em>:\nSet the default scope. A scope may start with either the <code>/</code>\ncharacter, or <code>@</code>. Examples: <code>\"//stuff\"</code>, <code>\"@:stuff\"</code>, <code>\"/node\"</code></li>\n</ul>\n<h3>unwatch</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">unwatch</span><span class=\"p\">(</span>\n    <span class=\"o\">*</span><span class=\"n\">ids</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span>\n    <span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Unsubscribe for changes on given things.</p>\n<p>Stop receiving events for the things given by one or more ids. It is\npossible that the client receives an event shortly after calling the\nunsubscribe method because the event was queued.</p>\n<h4>Args</h4>\n<ul>\n<li><em>*ids (int)</em>:\nThing IDs to unsubscribe. No error is returned in case one of\nthe given things are not found within the collection or if the\nthing was not being watched.</li>\n<li><em>scope (str, optional)</em>:\nUnsubscribe for things in this scope. If not specified, the\ndefault scope will be used. Only collection scopes may contain\nthings so only collection scopes can be used.\nSee <a href=\"https://docs.thingsdb.net/v0/overview/scopes/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/overview/scopes/</a> for how to\nformat a scope.</li>\n</ul>\n<h4>Returns</h4>\n<p>Future which result will be set to <code>None</code> if successful.</p>\n<h3>wait_closed</h3>\n<pre><span class=\"k\">async</span> <span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span> <span class=\"o\">-&gt;</span> <span class=\"kc\">None</span>\n</pre>\n<p>Wait for a connection to close.</p>\n<p>Can be used after calling the <code>close()</code> method to determine when the\nconnection is actually closed.</p>\n<h3>watch</h3>\n<pre><span class=\"n\">Client</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"n\">ids</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"n\">scope</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Future</span>\n</pre>\n<p>Subscribe for changes on given things.</p>\n<p>This method accepts one or more thing ids to subscribe to. This\nmethod will simply return None as soon as the subscribe request is\nsuccessful handled by ThingsDB. After the response, the client will\nreceive <code>INIT</code> events for all subscribed ids. After that, ThingsDB\nwill continue to provide the client with <code>UPDATE</code> events which contain\nchanges to the subscribed thing. A <code>DELETE</code> event might be received\nif, and only if the thing is removed and garbage collected from the\ncollection.</p>\n<h4>Args</h4>\n<ul>\n<li><em>*ids (int)</em>:\nThing IDs to subscribe to. No error is returned in case one of\nthe given things are not found within the collection, instead a\n<code>WARN</code> event will be send to the client.</li>\n<li><em>scope (str, optional)</em>:\nSubscribe on things in this scope. If not specified, the\ndefault scope will be used. Only collection scopes may contain\nthings so only collection scopes can be used.\nSee <a href=\"https://docs.thingsdb.net/v0/overview/scopes/\" rel=\"nofollow\">https://docs.thingsdb.net/v0/overview/scopes/</a> for how to\nformat a scope.</li>\n</ul>\n<h4>Returns</h4>\n<p>Future which result will be set to <code>None</code> if successful.</p>\n<h2>Model</h2>\n<p>It is possible to create a model which will map to data in ThingsDB.\nThe model will be kept up-to-date be the client. It is possible to break\nanywhere you want in the model. What is not provided, will not be watched.</p>\n<h3>Collection</h3>\n<p>A collection is always required, even you do not plan to watch anything in the\nroot of the collection. In the latter case you can just create an empty\ncollection which can be used when initializing individual things.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thingsdb.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thingsdb.model</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Collection</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'str'</span>\n</pre>\n<p>In the example above, the ThingsDB collection name must be equal to the Python Class name, <code>Foo</code> in this case.\nIt may be useful to use a different Python Class name than the ThingsDB collection\nname. This can be achieved by using the magic attribute <code>__COLLECTION_NAME__</code>, for example:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Stuff</span><span class=\"p\">(</span><span class=\"n\">Collection</span><span class=\"p\">):</span>\n    <span class=\"c1\"># the ThingsDB collection name is `stuff`, all lower case characters</span>\n    <span class=\"n\">__COLLECTION_NAME__</span> <span class=\"o\">=</span> <span class=\"s1\">'stuff'</span>\n</pre>\n<h3>Thing</h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">asyncio</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thingsdb.client</span> <span class=\"kn\">import</span> <span class=\"n\">Client</span>\n<span class=\"kn\">from</span> <span class=\"nn\">thingsdb.model</span> <span class=\"kn\">import</span> <span class=\"n\">Collection</span><span class=\"p\">,</span> <span class=\"n\">Thing</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Bar</span><span class=\"p\">(</span><span class=\"n\">Thing</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"s1\">'str'</span>\n    <span class=\"n\">other</span> <span class=\"o\">=</span> <span class=\"s1\">'Bar'</span><span class=\"p\">,</span> <span class=\"k\">lambda</span><span class=\"p\">:</span> <span class=\"n\">Bar</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Foo</span><span class=\"p\">(</span><span class=\"n\">Collection</span><span class=\"p\">):</span>\n    <span class=\"n\">bar</span><span class=\"p\">:</span> <span class=\"s1\">'Bar'</span><span class=\"p\">,</span> <span class=\"n\">Bar</span>\n\n<span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">example</span><span class=\"p\">():</span>\n    <span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">Client</span><span class=\"p\">()</span>\n    <span class=\"n\">foo</span> <span class=\"o\">=</span> <span class=\"n\">Foo</span><span class=\"p\">()</span>\n    <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">authenticate</span><span class=\"p\">(</span><span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'pass'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">foo</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">client</span><span class=\"p\">)</span>\n\n        <span class=\"c1\"># ... now the collection will be watched</span>\n\n    <span class=\"k\">finally</span><span class=\"p\">:</span>\n        <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n</pre>\n<p>Suppose you have an ID and want to watch that single thing, then\nyou can initialize the thing and call <code>watch()</code> manually. For example,\nconsider we have an <code>#5</code> for a <code>Bar</code> type in collection <code>Foo</code>:</p>\n<pre><span class=\"n\">bar</span> <span class=\"o\">=</span> <span class=\"n\">Bar</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"k\">await</span> <span class=\"n\">bar</span><span class=\"o\">.</span><span class=\"n\">watch</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 6918210, "releases": {"0.3.0": [{"comment_text": "", "digests": {"md5": "ca9fb898eb729c338b7b777eb59c5ed1", "sha256": "041148fdf7e3c5d1ee932280a83bbb2c96dacefe308307dbe9e0e236693b3799"}, "downloads": -1, "filename": "python-thingsdb-0.3.0.tar.gz", "has_sig": false, "md5_digest": "ca9fb898eb729c338b7b777eb59c5ed1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14582, "upload_time": "2019-12-17T22:06:32", "upload_time_iso_8601": "2019-12-17T22:06:32.828203Z", "url": "https://files.pythonhosted.org/packages/cb/6a/bda070f39916a18a3c59b821c0532351e9271fd2ae6b38a7c3b4d203f332/python-thingsdb-0.3.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "f2715337d54ac5ef444d35cf6d0b10f2", "sha256": "cf8b95c1b12f485a6e8877ffa432f74baaa49003a18c782f2d251b4d7628ffcf"}, "downloads": -1, "filename": "python-thingsdb-0.3.1.tar.gz", "has_sig": false, "md5_digest": "f2715337d54ac5ef444d35cf6d0b10f2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17503, "upload_time": "2019-12-18T20:11:29", "upload_time_iso_8601": "2019-12-18T20:11:29.219456Z", "url": "https://files.pythonhosted.org/packages/7c/d8/c4ab730686464c54c7f092b8c387a36ef06e587e4a712c90800a8b776f98/python-thingsdb-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "425a83a65ca8230855e419c3557e41d6", "sha256": "41df087fcbaf0843461e7b731a604711c60abf8ce8135f4af4e50c88795d348e"}, "downloads": -1, "filename": "python-thingsdb-0.3.2.tar.gz", "has_sig": false, "md5_digest": "425a83a65ca8230855e419c3557e41d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17589, "upload_time": "2019-12-18T20:40:36", "upload_time_iso_8601": "2019-12-18T20:40:36.668573Z", "url": "https://files.pythonhosted.org/packages/1a/03/b7b5cbf400e50874d050640ca55b4cd4ad3bbe7f12421efdce3b5bec41f3/python-thingsdb-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "e54bed96e91cce8dcbe5e3cea1a3776f", "sha256": "c218279f1668e1af5ab98059d7ffdd5a651a4998930529e539ca45a8d012314c"}, "downloads": -1, "filename": "python-thingsdb-0.3.3.tar.gz", "has_sig": false, "md5_digest": "e54bed96e91cce8dcbe5e3cea1a3776f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17612, "upload_time": "2019-12-18T20:48:11", "upload_time_iso_8601": "2019-12-18T20:48:11.138362Z", "url": "https://files.pythonhosted.org/packages/fe/04/190acf6836ae1e745d239751f07ca59043d6dab3ab3fd2a85aff3db8cb41/python-thingsdb-0.3.3.tar.gz", "yanked": false}], "0.3.4": [{"comment_text": "", "digests": {"md5": "ee54f0cc2fec8b9524c8954000769340", "sha256": "f1dc907254b4cf2ff7b4d2751260524057496e5f68b333553230f7620b3f6a8f"}, "downloads": -1, "filename": "python-thingsdb-0.3.4.tar.gz", "has_sig": false, "md5_digest": "ee54f0cc2fec8b9524c8954000769340", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24354, "upload_time": "2019-12-20T10:46:53", "upload_time_iso_8601": "2019-12-20T10:46:53.554265Z", "url": "https://files.pythonhosted.org/packages/96/4e/ddb874baf054aa52b699e3842816486a27dd4dec2c6087b0d70c542cde13/python-thingsdb-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "f85fbd168e14d450eb8bb064be165e98", "sha256": "274c3e1a6c5938ea2c2fc6f6b51656737def9a8ea4915e942dde9f24feb8a77e"}, "downloads": -1, "filename": "python-thingsdb-0.3.5.tar.gz", "has_sig": false, "md5_digest": "f85fbd168e14d450eb8bb064be165e98", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24963, "upload_time": "2019-12-27T10:44:28", "upload_time_iso_8601": "2019-12-27T10:44:28.757367Z", "url": "https://files.pythonhosted.org/packages/5a/4e/a778c3960baad39cfaeb2b44136d0394c8e90ec6188676d4865219258749/python-thingsdb-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "65174dc729477bfa738ea6f671c2cdd1", "sha256": "99a45c7d77461c2a6b07ba4832d501af11b903912c9f639b0c8d7c4499ce4f34"}, "downloads": -1, "filename": "python-thingsdb-0.3.6.tar.gz", "has_sig": false, "md5_digest": "65174dc729477bfa738ea6f671c2cdd1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24683, "upload_time": "2020-01-08T14:33:32", "upload_time_iso_8601": "2020-01-08T14:33:32.913959Z", "url": "https://files.pythonhosted.org/packages/0b/18/e28ced47a8b498913cdb56521ecf4fb97b735570af0d3ccd5026736bac21/python-thingsdb-0.3.6.tar.gz", "yanked": false}], "0.3.7": [{"comment_text": "", "digests": {"md5": "9dec2bb85ede159a7b780e20bdb4d61c", "sha256": "21d05c5bfec8ec9383a39704ce15728a6f9b7427ebbc4254eee7816458ab0ca8"}, "downloads": -1, "filename": "python-thingsdb-0.3.7.tar.gz", "has_sig": false, "md5_digest": "9dec2bb85ede159a7b780e20bdb4d61c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24665, "upload_time": "2020-01-16T15:14:08", "upload_time_iso_8601": "2020-01-16T15:14:08.675089Z", "url": "https://files.pythonhosted.org/packages/29/2c/ccb840bdaea61c7a3a5f2399eb09c94ac308ee153b4edc6ca21f0c5cc827/python-thingsdb-0.3.7.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "32a8d417eabf588f06c6a17b7836a29e", "sha256": "248c70ffcba3128c6c5a61bc7286207b1d59a5fbd24d23143ff9b43bfc72a824"}, "downloads": -1, "filename": "python-thingsdb-0.4.0.tar.gz", "has_sig": false, "md5_digest": "32a8d417eabf588f06c6a17b7836a29e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24884, "upload_time": "2020-02-10T22:43:06", "upload_time_iso_8601": "2020-02-10T22:43:06.343262Z", "url": "https://files.pythonhosted.org/packages/48/9a/03ef992a9aece239dbb94243da79156fbbac276fc20737be2945ea574e09/python-thingsdb-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "1e69bf0d275d26b2017ade8750876be1", "sha256": "b7cd6442110457ea97d947d36eed541fb1d8eb9a843857b3808f4e3327a0ee6a"}, "downloads": -1, "filename": "python-thingsdb-0.4.1.tar.gz", "has_sig": false, "md5_digest": "1e69bf0d275d26b2017ade8750876be1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25168, "upload_time": "2020-02-12T16:11:03", "upload_time_iso_8601": "2020-02-12T16:11:03.615848Z", "url": "https://files.pythonhosted.org/packages/95/fa/7764a5065989c3d07c8d72fe974dbce1901afaf44db94cdc637a35534c9c/python-thingsdb-0.4.1.tar.gz", "yanked": false}], "0.4.2": [{"comment_text": "", "digests": {"md5": "14fa84f98ee2d1977fff448bbf272fd2", "sha256": "cd40440f2f626505326690d91f879d9f8404fe0ce0541673cb3934573f4f0ce4"}, "downloads": -1, "filename": "python-thingsdb-0.4.2.tar.gz", "has_sig": false, "md5_digest": "14fa84f98ee2d1977fff448bbf272fd2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25223, "upload_time": "2020-02-28T13:10:36", "upload_time_iso_8601": "2020-02-28T13:10:36.476156Z", "url": "https://files.pythonhosted.org/packages/34/01/8162dfd2e2ab8dd45ac06d56f6818799f33a2a855d5be8b1f19688609ce8/python-thingsdb-0.4.2.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "7a422a0b44b5ea52ae1f90481dffae34", "sha256": "bbb966c371df375a0bfe9684a5095de2067c5aea93b1dc9e38c08e7072307bb6"}, "downloads": -1, "filename": "python-thingsdb-0.5.0.tar.gz", "has_sig": false, "md5_digest": "7a422a0b44b5ea52ae1f90481dffae34", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25384, "upload_time": "2020-03-05T13:24:40", "upload_time_iso_8601": "2020-03-05T13:24:40.704994Z", "url": "https://files.pythonhosted.org/packages/ad/ac/0893e0d3e81d5381c1de658fa7137ac0e5fc9615b42a2ce81d5041a342f7/python-thingsdb-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "3fcf251e24ccc8ce16721a2da07ca319", "sha256": "812ba66535b1547fce38e5f50f6da6a66b4230176c1f0c4d3af5d9334c40723e"}, "downloads": -1, "filename": "python-thingsdb-0.5.1.tar.gz", "has_sig": false, "md5_digest": "3fcf251e24ccc8ce16721a2da07ca319", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25389, "upload_time": "2020-03-25T14:06:44", "upload_time_iso_8601": "2020-03-25T14:06:44.999776Z", "url": "https://files.pythonhosted.org/packages/31/17/ab3467289eb18b0f12dd1128181bed32258745f15f9d8fd55b84bac6fc69/python-thingsdb-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "7fb3f32b930b7f69ea132bb727ff070b", "sha256": "b6e952d9ed7c4eed10b33909b0e72367c520f59ff347644572a7ded5af63685e"}, "downloads": -1, "filename": "python-thingsdb-0.5.2.tar.gz", "has_sig": false, "md5_digest": "7fb3f32b930b7f69ea132bb727ff070b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25418, "upload_time": "2020-03-31T06:45:12", "upload_time_iso_8601": "2020-03-31T06:45:12.996989Z", "url": "https://files.pythonhosted.org/packages/21/bc/62680bb797952ca1b8315bc2b3e0f49dafb8b9522bff9f97ac1e76b351fa/python-thingsdb-0.5.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "7fb3f32b930b7f69ea132bb727ff070b", "sha256": "b6e952d9ed7c4eed10b33909b0e72367c520f59ff347644572a7ded5af63685e"}, "downloads": -1, "filename": "python-thingsdb-0.5.2.tar.gz", "has_sig": false, "md5_digest": "7fb3f32b930b7f69ea132bb727ff070b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25418, "upload_time": "2020-03-31T06:45:12", "upload_time_iso_8601": "2020-03-31T06:45:12.996989Z", "url": "https://files.pythonhosted.org/packages/21/bc/62680bb797952ca1b8315bc2b3e0f49dafb8b9522bff9f97ac1e76b351fa/python-thingsdb-0.5.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:14:59 2020"}