{"info": {"author": "Alex Pasare", "author_email": "alexandru.pasare@simplecoding.email", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "## PyMiddy\n\nHeavily inspired from middyjs.\n\n### Quick start\n\n```python\nfrom pymiddy import Middy\nfrom pymiddy.middlewares import CORS\n\n@Middy\ndef handler(event, context):\n    return {\n        'statusCode': 200,\n        'body': 'lorem ipsum dolor sit amet'\n    }\n\n\nhandler.use(TestMiddleware(1)) \\\n    .use(CORS({\n        'credentials': True,\n        'origins': ['https://website.xyz/']\n    }))\n```\n\n### Custom middlewares\n\nA middleware class should have 3 methods:\n\n```python\nclass MyCustomMiddleware(object):\n    def before(self, state):\n        pass\n\n    def after(self, state):\n        pass\n\n    def error(self, state):\n        pass\n```\n\nThe `state` contains the following keys:\n- `event` - the event which triggered the lambda function, passed from the aws handler\n- `context` - the context from the aws handler\n- `response` - the handler response, if any\n- `exception` - during error handler you can have access to this key which contains the exception which triggered the error\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/godvsdeity/pymiddy", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pymiddy", "package_url": "https://pypi.org/project/pymiddy/", "platform": "", "project_url": "https://pypi.org/project/pymiddy/", "project_urls": {"Homepage": "https://github.com/godvsdeity/pymiddy"}, "release_url": "https://pypi.org/project/pymiddy/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Middleware engine for AWS Lambda - Inspired by middyjs", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>PyMiddy</h2>\n<p>Heavily inspired from middyjs.</p>\n<h3>Quick start</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pymiddy</span> <span class=\"kn\">import</span> <span class=\"n\">Middy</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pymiddy.middlewares</span> <span class=\"kn\">import</span> <span class=\"n\">CORS</span>\n\n<span class=\"nd\">@Middy</span>\n<span class=\"k\">def</span> <span class=\"nf\">handler</span><span class=\"p\">(</span><span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">context</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'statusCode'</span><span class=\"p\">:</span> <span class=\"mi\">200</span><span class=\"p\">,</span>\n        <span class=\"s1\">'body'</span><span class=\"p\">:</span> <span class=\"s1\">'lorem ipsum dolor sit amet'</span>\n    <span class=\"p\">}</span>\n\n\n<span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"n\">TestMiddleware</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">))</span> \\\n    <span class=\"o\">.</span><span class=\"n\">use</span><span class=\"p\">(</span><span class=\"n\">CORS</span><span class=\"p\">({</span>\n        <span class=\"s1\">'credentials'</span><span class=\"p\">:</span> <span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"s1\">'origins'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">'https://website.xyz/'</span><span class=\"p\">]</span>\n    <span class=\"p\">}))</span>\n</pre>\n<h3>Custom middlewares</h3>\n<p>A middleware class should have 3 methods:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">MyCustomMiddleware</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">before</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">after</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">error</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">):</span>\n        <span class=\"k\">pass</span>\n</pre>\n<p>The <code>state</code> contains the following keys:</p>\n<ul>\n<li><code>event</code> - the event which triggered the lambda function, passed from the aws handler</li>\n<li><code>context</code> - the context from the aws handler</li>\n<li><code>response</code> - the handler response, if any</li>\n<li><code>exception</code> - during error handler you can have access to this key which contains the exception which triggered the error</li>\n</ul>\n\n          </div>"}, "last_serial": 5663407, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "1fe0b0666522ea12b45bb644fa5461b1", "sha256": "388b06a3e095fd6821d8e9dfe2ecba980d9c63a39180fc65abca81d359bdd011"}, "downloads": -1, "filename": "pymiddy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1fe0b0666522ea12b45bb644fa5461b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4248, "upload_time": "2019-08-11T22:54:50", "upload_time_iso_8601": "2019-08-11T22:54:50.300487Z", "url": "https://files.pythonhosted.org/packages/f5/c0/e45efea934b30e78daab1fd83086b00d67ce25b3a94a47f51149187c9476/pymiddy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "968bf2cc15e10674ef3c28b7ac7c8783", "sha256": "288dbf3c1b413bfbcb2f2a0b08dec2dcda48bebf3f8728d2897231a011cd4b5b"}, "downloads": -1, "filename": "pymiddy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "968bf2cc15e10674ef3c28b7ac7c8783", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2828, "upload_time": "2019-08-11T22:54:52", "upload_time_iso_8601": "2019-08-11T22:54:52.182412Z", "url": "https://files.pythonhosted.org/packages/7b/e6/feed7a517fc035e45d79bca010248ca3cb9e57498de7c7dac1833ea1ce6f/pymiddy-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1fe0b0666522ea12b45bb644fa5461b1", "sha256": "388b06a3e095fd6821d8e9dfe2ecba980d9c63a39180fc65abca81d359bdd011"}, "downloads": -1, "filename": "pymiddy-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "1fe0b0666522ea12b45bb644fa5461b1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4248, "upload_time": "2019-08-11T22:54:50", "upload_time_iso_8601": "2019-08-11T22:54:50.300487Z", "url": "https://files.pythonhosted.org/packages/f5/c0/e45efea934b30e78daab1fd83086b00d67ce25b3a94a47f51149187c9476/pymiddy-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "968bf2cc15e10674ef3c28b7ac7c8783", "sha256": "288dbf3c1b413bfbcb2f2a0b08dec2dcda48bebf3f8728d2897231a011cd4b5b"}, "downloads": -1, "filename": "pymiddy-0.1.0.tar.gz", "has_sig": false, "md5_digest": "968bf2cc15e10674ef3c28b7ac7c8783", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2828, "upload_time": "2019-08-11T22:54:52", "upload_time_iso_8601": "2019-08-11T22:54:52.182412Z", "url": "https://files.pythonhosted.org/packages/7b/e6/feed7a517fc035e45d79bca010248ca3cb9e57498de7c7dac1833ea1ce6f/pymiddy-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:08 2020"}