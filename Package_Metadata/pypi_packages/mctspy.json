{"info": {"author": "Kamil Czarnog\u00f3rski", "author_email": "", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "## mctspy : python implementation of Monte Carlo Tree Search algorithm\n\n\nBasic python implementation of [Monte Carlo Tree Search](https://int8.io/monte-carlo-tree-search-beginners-guide) (MCTS) intended to run on small game trees. \n\n\n### Installation\n\n```\npip3 install mctspy\n``` \n\n### Running tic-tac-toe example \n\nto run tic-tac-toe example:\n\n```python\n\nimport numpy as np\nfrom mctspy.tree.nodes import TwoPlayersGameMonteCarloTreeSearchNode\nfrom mctspy.tree.search import MonteCarloTreeSearch\nfrom mctspy.games.examples.tictactoe import TicTacToeGameState\n\nstate = np.zeros((3,3))\ninitial_board_state = TicTacToeGameState(state = state, next_to_move=1)\n\nroot = TwoPlayersGameMonteCarloTreeSearchNode(state = initial_board_state)\nmcts = MonteCarloTreeSearch(root)\nbest_node = mcts.best_action(10000)\n\n```\n\n\n### Running MCTS for your own 2 players zero-sum game \n\nIf you want to apply MCTS for your own game, its state implementation should derive from  \n`mmctspy.games.common.TwoPlayersGameState` \n\n(lookup `mctspy.games.examples.tictactoe.TicTacToeGameState` for inspiration)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/int8/monte-carlo-tree-search", "keywords": "mcts monte carlo tree search", "license": "", "maintainer": "", "maintainer_email": "", "name": "mctspy", "package_url": "https://pypi.org/project/mctspy/", "platform": "", "project_url": "https://pypi.org/project/mctspy/", "project_urls": {"Homepage": "https://github.com/int8/monte-carlo-tree-search"}, "release_url": "https://pypi.org/project/mctspy/0.1.1/", "requires_dist": ["numpy (>=1.9.1)"], "requires_python": ">=3.5.7", "summary": "Python implementation of monte carlo tree search for 2 players zero-sum game", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>mctspy : python implementation of Monte Carlo Tree Search algorithm</h2>\n<p>Basic python implementation of <a href=\"https://int8.io/monte-carlo-tree-search-beginners-guide\" rel=\"nofollow\">Monte Carlo Tree Search</a> (MCTS) intended to run on small game trees.</p>\n<h3>Installation</h3>\n<pre><code>pip3 install mctspy\n</code></pre>\n<h3>Running tic-tac-toe example</h3>\n<p>to run tic-tac-toe example:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mctspy.tree.nodes</span> <span class=\"kn\">import</span> <span class=\"n\">TwoPlayersGameMonteCarloTreeSearchNode</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mctspy.tree.search</span> <span class=\"kn\">import</span> <span class=\"n\">MonteCarloTreeSearch</span>\n<span class=\"kn\">from</span> <span class=\"nn\">mctspy.games.examples.tictactoe</span> <span class=\"kn\">import</span> <span class=\"n\">TicTacToeGameState</span>\n\n<span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">zeros</span><span class=\"p\">((</span><span class=\"mi\">3</span><span class=\"p\">,</span><span class=\"mi\">3</span><span class=\"p\">))</span>\n<span class=\"n\">initial_board_state</span> <span class=\"o\">=</span> <span class=\"n\">TicTacToeGameState</span><span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">next_to_move</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">root</span> <span class=\"o\">=</span> <span class=\"n\">TwoPlayersGameMonteCarloTreeSearchNode</span><span class=\"p\">(</span><span class=\"n\">state</span> <span class=\"o\">=</span> <span class=\"n\">initial_board_state</span><span class=\"p\">)</span>\n<span class=\"n\">mcts</span> <span class=\"o\">=</span> <span class=\"n\">MonteCarloTreeSearch</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">)</span>\n<span class=\"n\">best_node</span> <span class=\"o\">=</span> <span class=\"n\">mcts</span><span class=\"o\">.</span><span class=\"n\">best_action</span><span class=\"p\">(</span><span class=\"mi\">10000</span><span class=\"p\">)</span>\n</pre>\n<h3>Running MCTS for your own 2 players zero-sum game</h3>\n<p>If you want to apply MCTS for your own game, its state implementation should derive from<br>\n<code>mmctspy.games.common.TwoPlayersGameState</code></p>\n<p>(lookup <code>mctspy.games.examples.tictactoe.TicTacToeGameState</code> for inspiration)</p>\n\n          </div>"}, "last_serial": 5540709, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "eeed96f969d129c50d354253d8242f3c", "sha256": "fc7a87aa7654971ede89b63a58d2ed3171a498937d38bd7b53b79f4dea880354"}, "downloads": -1, "filename": "mctspy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eeed96f969d129c50d354253d8242f3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.7", "size": 6336, "upload_time": "2019-07-16T13:55:54", "upload_time_iso_8601": "2019-07-16T13:55:54.292767Z", "url": "https://files.pythonhosted.org/packages/93/25/fb9812b54a0c7c6db86fa4ca89d1eb0db9f30d7242832bdb91dde950d818/mctspy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42d49ca857cf4dd39c5aa70cc2b018aa", "sha256": "52d16193bdadeaca144bf28047367c13e8940a45d758a3a9c96c78d3b7226dfa"}, "downloads": -1, "filename": "mctspy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "42d49ca857cf4dd39c5aa70cc2b018aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.7", "size": 4064, "upload_time": "2019-07-16T13:55:55", "upload_time_iso_8601": "2019-07-16T13:55:55.833626Z", "url": "https://files.pythonhosted.org/packages/b3/48/cefb7f055e308c9ce63dbe079c23d6195be3040d42c3596ee515d66b02b6/mctspy-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "eeed96f969d129c50d354253d8242f3c", "sha256": "fc7a87aa7654971ede89b63a58d2ed3171a498937d38bd7b53b79f4dea880354"}, "downloads": -1, "filename": "mctspy-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "eeed96f969d129c50d354253d8242f3c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5.7", "size": 6336, "upload_time": "2019-07-16T13:55:54", "upload_time_iso_8601": "2019-07-16T13:55:54.292767Z", "url": "https://files.pythonhosted.org/packages/93/25/fb9812b54a0c7c6db86fa4ca89d1eb0db9f30d7242832bdb91dde950d818/mctspy-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "42d49ca857cf4dd39c5aa70cc2b018aa", "sha256": "52d16193bdadeaca144bf28047367c13e8940a45d758a3a9c96c78d3b7226dfa"}, "downloads": -1, "filename": "mctspy-0.1.1.tar.gz", "has_sig": false, "md5_digest": "42d49ca857cf4dd39c5aa70cc2b018aa", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5.7", "size": 4064, "upload_time": "2019-07-16T13:55:55", "upload_time_iso_8601": "2019-07-16T13:55:55.833626Z", "url": "https://files.pythonhosted.org/packages/b3/48/cefb7f055e308c9ce63dbe079c23d6195be3040d42c3596ee515d66b02b6/mctspy-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:54 2020"}