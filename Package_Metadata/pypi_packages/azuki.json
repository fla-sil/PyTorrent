{"info": {"author": "Dennis Kaarsemaker", "author_email": "dennis@kaarsemaker.net", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Programming Language :: Python", "Programming Language :: Python :: 3", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Using beanstalkd made easy\n==========================\n\nazuki makes it easy to create tools using\n[beanstalkd](http://kr.github.io/beanstalkd/) tubes for asynchronous execution.\nFrom queueing parallelizing quick shell hacks to integrating asynchronous\nexecution with your django application, azuki lets you do it all.\n\nCLI beanstalk inspection\n------------------------\n\nThe main utility, `azuki`, makes it easy to inspect and modify beanstalk queues\nfrom the command line.\n\n```\n$ azuki tubes [-v]\n$ azuki stats\n$ azuki stats default\n$ azuki stats 123\n```\n\nThe stats command will give you basic statistics, such as the total amount of\nconnections, jobs and commands.  If you specify a tube, such as `default`, you\nwill see the statistics of that tube, and if you specify a job ID, you will see\nits details and content.\n\nThe tubes command shows a list of tubes. Add the -v parameter to also get a\nsummary of all processes and jobs for all queues.\n\nPeeking at tubes\n----------------\n\n```\n$ azuki peek-delayed default\n$ azuki peek-ready default\n$ azuki peek-buried default\n$ azuki peek 123\n```\n\nWith the first three commands above you can look at the first delayed, ready or\nburied job in a tube. If you use the `--ask` option as well, you will be asked\nwhether you want to delete, bury or kick the job. The author is fond of `azuki\npeek-buried --ask` to do cleanup of failed jobs.\n\nThe last command will peek at a specific job, given its id number.\n\nManipulating jobs and tubes\n---------------------------\n\n`azuki kick 100 default`\n\nThis would kick 100 jobs in the default queue, moving them from buried back to\nready.\n\n```\nazuki bury 123\nazuki kick 123\n```\n\nIf you want to bury or kick a specific job, use the commands above.\n\nQueueing shell commands\n-----------------------\nAzuki was originally written to easily parallelize shell jobs. Of course [gnu\nparallel](http://www.gnu.org/software/parallel/) can be used if you just want\nparallelization, but I also needed to be able to adjust parallelism, pause\neverything and add jobs while the application was running. In short, I needed\nto use a queue, and beanstalk is my queue of choice.\n\nThe original task was to update the iLO firmware of thousands of HP servers in\nan automated, yet controlled way. To do this, first one puts jobs in the tube:\n\n```\nfor ilo in $(<ilos.txt); do\n    echo $ilo | azuki put --ttr 600 ilo-firmware\ndone\n```\n\nThis reads a list of items and schedules them one by one in the ilo-firmware\ntube with a ttr of 600. You can also specify a delay with the `--delay`\nargument.\n\nTo consume the items in the tube, you use `azuki foreach`.\n\n`azuki foreach ilo-firmware -- xargs do_firmware_update`\n\nThe `foreach` command will execute a command you want to execute and feed the\njob body on stdin. `do_firmware_update` wants this on the command line instead,\nhence the use of `xargs`. To now parallelize this, we can simply run as many\ninstances of `azuki foreach` as we want in parallel, possibly using screen.\n\nThe `foreach` command looks at the exitcode of the commands it runs. If the\nexitcode is 0, the job is considered succesfull and gets deleted. If the\nexitcode is nonzero, the job gets buried.\n\nAt the end of my working day I wanted to pause the upgrading, but using\n`ctrl-C` in the middle of a firmware upgrade is not a very good idea. Azuki to\nthe rescue!\n\n`azuki pause 8640000 ilo-firmware`\n\nThis pauses the tube for 100 days. Already running firmware updates would\ncomplete, but no new ones would be scheduled. 10 minutes later all is paused.\nTo unpause the tube, simply pause it again, but for 0 seconds.\n\nPython API\n----------\nbeanstalkd tubes already are fairly easy to use in python, using the beanstalkc\nlibrary. But fairly easy isn't easy enough, so azuki can make it easier for\nyou. You can simply decorate your functions to make them asynchronous.\n\nexample.py:\n```\nfrom azuki import beanstalk\n\n@beanstalk('example-tube')\ndef hello(who):\n    print \"Hello, %s\" % who\n```\n\nmain.py:\n```\nimport example\n\nexample.hello(\"world\")\n```\n\nIf you now run `python main.py`, you will notice that it does not output\nanything. Instead it has serialized the arguments to `hello` and scheduled them\nas a job in the `example-tube` tube.\n\nTo process the queued jobs, you run `azuki daemon example-tube`. This will take\nitems from the tube, import the `example` module and call the `hello` function\nfor real.\n\nRescheduling\n------------\nWith beanstalk you can bury a job to tell beanstalk not to attempt the job\nagain until manually told to do so, but if you just want to delay execution of\na job, you can raise an `azuki.Reschedule` exception.\n\n```\nfrom azuki import beanstalk, Reschedule\n\n@beanstalk('example-tube')\ndef process(task):\n    if not am_ready_for(task):\n        raise Reschedule(120)\n    do_task(task)\n```\n\nDjango API\n----------\nThe downside of scheduling things in beanstalk queues, is that argument to\nfunction calls must be serialized. Azuki uses json serialization, so anything\nthat is not json-serializable, cannot be used as an argument.\n\nExcept django model instances, as azuki recognizes them and handles them\nspecially. That means that for example queueing mails instead of sending them\ndirectly works:\n\nmodels.py:\n```\nfrom django.contrib.auth import User\nfrom django.core.mail import send_mail\nfrom azuki import beanstalk\n\nclass Message(models.Model):\n    recipient = models.ForeignKey(User)\n    subject = models.CharField(\"Subject\", max_length=128)\n    text = models.TextField(\"Message text\")\n\n    @beanstalk('send-mail')\n    def send(self):\n        send_mail(self.subject, self.text, 'webmaster@localhost', [self.recipient])\n```\n\nIf you now create a message and call `send()`, the message is not sent, but\nonly added to the `send-mail` tube. You can again use `azuki daemon` to process\nthis tube and actually send the mails, possibly even on a different machine\naltogether.\n\nAuthor\n------\n(c) 2014, Dennis Kaarsemaker <dennis@kaarsemaker.net>\n\nThis program is free software: you can redistribute it and/or modify\nit under the terms of the GNU General Public License as published by\nthe Free Software Foundation, either version 3 of the License, or\n(at your option) any later version.\n\nThis program is distributed in the hope that it will be useful,\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\nGNU General Public License for more details.\n\nYou should have received a copy of the GNU General Public License\nalong with this program.  If not, see <http://www.gnu.org/licenses/>.\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/seveas/azuki", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "azuki", "package_url": "https://pypi.org/project/azuki/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/azuki/", "project_urls": {"Download": "UNKNOWN", "Homepage": "http://github.com/seveas/azuki"}, "release_url": "https://pypi.org/project/azuki/1.2/", "requires_dist": null, "requires_python": null, "summary": "Beanstalkd utilities for CLI and python", "version": "1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            Using beanstalkd made easy<br>==========================<br><br>azuki makes it easy to create tools using<br>[beanstalkd](http://kr.github.io/beanstalkd/) tubes for asynchronous execution.<br>From queueing parallelizing quick shell hacks to integrating asynchronous<br>execution with your django application, azuki lets you do it all.<br><br>CLI beanstalk inspection<br>------------------------<br><br>The main utility, `azuki`, makes it easy to inspect and modify beanstalk queues<br>from the command line.<br><br>```<br>$ azuki tubes [-v]<br>$ azuki stats<br>$ azuki stats default<br>$ azuki stats 123<br>```<br><br>The stats command will give you basic statistics, such as the total amount of<br>connections, jobs and commands.  If you specify a tube, such as `default`, you<br>will see the statistics of that tube, and if you specify a job ID, you will see<br>its details and content.<br><br>The tubes command shows a list of tubes. Add the -v parameter to also get a<br>summary of all processes and jobs for all queues.<br><br>Peeking at tubes<br>----------------<br><br>```<br>$ azuki peek-delayed default<br>$ azuki peek-ready default<br>$ azuki peek-buried default<br>$ azuki peek 123<br>```<br><br>With the first three commands above you can look at the first delayed, ready or<br>buried job in a tube. If you use the `--ask` option as well, you will be asked<br>whether you want to delete, bury or kick the job. The author is fond of `azuki<br>peek-buried --ask` to do cleanup of failed jobs.<br><br>The last command will peek at a specific job, given its id number.<br><br>Manipulating jobs and tubes<br>---------------------------<br><br>`azuki kick 100 default`<br><br>This would kick 100 jobs in the default queue, moving them from buried back to<br>ready.<br><br>```<br>azuki bury 123<br>azuki kick 123<br>```<br><br>If you want to bury or kick a specific job, use the commands above.<br><br>Queueing shell commands<br>-----------------------<br>Azuki was originally written to easily parallelize shell jobs. Of course [gnu<br>parallel](http://www.gnu.org/software/parallel/) can be used if you just want<br>parallelization, but I also needed to be able to adjust parallelism, pause<br>everything and add jobs while the application was running. In short, I needed<br>to use a queue, and beanstalk is my queue of choice.<br><br>The original task was to update the iLO firmware of thousands of HP servers in<br>an automated, yet controlled way. To do this, first one puts jobs in the tube:<br><br>```<br>for ilo in $(&lt;ilos.txt); do<br>    echo $ilo | azuki put --ttr 600 ilo-firmware<br>done<br>```<br><br>This reads a list of items and schedules them one by one in the ilo-firmware<br>tube with a ttr of 600. You can also specify a delay with the `--delay`<br>argument.<br><br>To consume the items in the tube, you use `azuki foreach`.<br><br>`azuki foreach ilo-firmware -- xargs do_firmware_update`<br><br>The `foreach` command will execute a command you want to execute and feed the<br>job body on stdin. `do_firmware_update` wants this on the command line instead,<br>hence the use of `xargs`. To now parallelize this, we can simply run as many<br>instances of `azuki foreach` as we want in parallel, possibly using screen.<br><br>The `foreach` command looks at the exitcode of the commands it runs. If the<br>exitcode is 0, the job is considered succesfull and gets deleted. If the<br>exitcode is nonzero, the job gets buried.<br><br>At the end of my working day I wanted to pause the upgrading, but using<br>`ctrl-C` in the middle of a firmware upgrade is not a very good idea. Azuki to<br>the rescue!<br><br>`azuki pause 8640000 ilo-firmware`<br><br>This pauses the tube for 100 days. Already running firmware updates would<br>complete, but no new ones would be scheduled. 10 minutes later all is paused.<br>To unpause the tube, simply pause it again, but for 0 seconds.<br><br>Python API<br>----------<br>beanstalkd tubes already are fairly easy to use in python, using the beanstalkc<br>library. But fairly easy isn't easy enough, so azuki can make it easier for<br>you. You can simply decorate your functions to make them asynchronous.<br><br>example.py:<br>```<br>from azuki import beanstalk<br><br>@beanstalk('example-tube')<br>def hello(who):<br>    print \"Hello, %s\" % who<br>```<br><br>main.py:<br>```<br>import example<br><br>example.hello(\"world\")<br>```<br><br>If you now run `python main.py`, you will notice that it does not output<br>anything. Instead it has serialized the arguments to `hello` and scheduled them<br>as a job in the `example-tube` tube.<br><br>To process the queued jobs, you run `azuki daemon example-tube`. This will take<br>items from the tube, import the `example` module and call the `hello` function<br>for real.<br><br>Rescheduling<br>------------<br>With beanstalk you can bury a job to tell beanstalk not to attempt the job<br>again until manually told to do so, but if you just want to delay execution of<br>a job, you can raise an `azuki.Reschedule` exception.<br><br>```<br>from azuki import beanstalk, Reschedule<br><br>@beanstalk('example-tube')<br>def process(task):<br>    if not am_ready_for(task):<br>        raise Reschedule(120)<br>    do_task(task)<br>```<br><br>Django API<br>----------<br>The downside of scheduling things in beanstalk queues, is that argument to<br>function calls must be serialized. Azuki uses json serialization, so anything<br>that is not json-serializable, cannot be used as an argument.<br><br>Except django model instances, as azuki recognizes them and handles them<br>specially. That means that for example queueing mails instead of sending them<br>directly works:<br><br>models.py:<br>```<br>from django.contrib.auth import User<br>from django.core.mail import send_mail<br>from azuki import beanstalk<br><br>class Message(models.Model):<br>    recipient = models.ForeignKey(User)<br>    subject = models.CharField(\"Subject\", max_length=128)<br>    text = models.TextField(\"Message text\")<br><br>    @beanstalk('send-mail')<br>    def send(self):<br>        send_mail(self.subject, self.text, 'webmaster@localhost', [self.recipient])<br>```<br><br>If you now create a message and call `send()`, the message is not sent, but<br>only added to the `send-mail` tube. You can again use `azuki daemon` to process<br>this tube and actually send the mails, possibly even on a different machine<br>altogether.<br><br>Author<br>------<br>(c) 2014, Dennis Kaarsemaker &lt;dennis@kaarsemaker.net&gt;<br><br>This program is free software: you can redistribute it and/or modify<br>it under the terms of the GNU General Public License as published by<br>the Free Software Foundation, either version 3 of the License, or<br>(at your option) any later version.<br><br>This program is distributed in the hope that it will be useful,<br>but WITHOUT ANY WARRANTY; without even the implied warranty of<br>MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the<br>GNU General Public License for more details.<br><br>You should have received a copy of the GNU General Public License<br>along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.<br>\n          </div>"}, "last_serial": 1751663, "releases": {"0.9": [{"comment_text": "", "digests": {"md5": "8113db2f3cf84e6d4d648e4223296eb4", "sha256": "11cc65c0622236890c704c610e2581d1e44ea5cb4707ad3376ddd5b8e0febe56"}, "downloads": -1, "filename": "azuki-0.9.tar.gz", "has_sig": false, "md5_digest": "8113db2f3cf84e6d4d648e4223296eb4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17288, "upload_time": "2014-09-14T19:57:21", "upload_time_iso_8601": "2014-09-14T19:57:21.855390Z", "url": "https://files.pythonhosted.org/packages/22/f3/77735245df44a942967a15e28568d609f65a7495e7a281fe53c773bfca46/azuki-0.9.tar.gz", "yanked": false}], "0.9.1": [{"comment_text": "", "digests": {"md5": "5fc173fe85b0d2852f1a84e05cd32a6f", "sha256": "8f18211d28e441255d33619cae588ce5aa502e76a310e0605a397518571317c3"}, "downloads": -1, "filename": "azuki-0.9.1.tar.gz", "has_sig": false, "md5_digest": "5fc173fe85b0d2852f1a84e05cd32a6f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17535, "upload_time": "2014-09-16T09:46:30", "upload_time_iso_8601": "2014-09-16T09:46:30.456255Z", "url": "https://files.pythonhosted.org/packages/4d/8c/d11d2fd75aa17d3c198e12444530f325812f33c5c9db212460155bb422f6/azuki-0.9.1.tar.gz", "yanked": false}], "0.9.2": [{"comment_text": "", "digests": {"md5": "ca30637de287ade36559052ca03ec5a2", "sha256": "8d3d632a04c531bb9fd315f5824b382a033df705f931156a0f4d3ec1677ff881"}, "downloads": -1, "filename": "azuki-0.9.2.tar.gz", "has_sig": false, "md5_digest": "ca30637de287ade36559052ca03ec5a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17799, "upload_time": "2014-09-18T12:15:32", "upload_time_iso_8601": "2014-09-18T12:15:32.482054Z", "url": "https://files.pythonhosted.org/packages/1c/66/38f6e3df352ede7b01c6c669365f2bf50830e873253ae8f997cf88836e59/azuki-0.9.2.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "4df186f1fc2a42544c7f9b23266fdf29", "sha256": "babc55e855266f38721a5c008547b25999fb2061a12dd74048fb0391e23ff055"}, "downloads": -1, "filename": "azuki-1.0.tar.gz", "has_sig": false, "md5_digest": "4df186f1fc2a42544c7f9b23266fdf29", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21432, "upload_time": "2015-04-12T07:25:44", "upload_time_iso_8601": "2015-04-12T07:25:44.983489Z", "url": "https://files.pythonhosted.org/packages/1e/36/5886203b7f544ce5abf8f157113e09edf42ead18b2f3ebbb15ed86b52755/azuki-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ca59c4146c270f53e1845a5688d3a01f", "sha256": "59adcef98165a4cb41b476568df96f9093df0820f5d07727d2146861f912b0d8"}, "downloads": -1, "filename": "azuki-1.1.tar.gz", "has_sig": false, "md5_digest": "ca59c4146c270f53e1845a5688d3a01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21996, "upload_time": "2015-10-04T21:06:38", "upload_time_iso_8601": "2015-10-04T21:06:38.806444Z", "url": "https://files.pythonhosted.org/packages/13/33/2f6df1a13badcec53f4e6390ecf4a9d15ea63354e238aedd23c9c79466e1/azuki-1.1.tar.gz", "yanked": false}], "1.2": [{"comment_text": "", "digests": {"md5": "b0db2128f55c0c2724f5dee05cdf0b2e", "sha256": "0373e4e7aaec696da60029c0ae06ff1b9e705c566794ac9d253cc21fb3ae83f7"}, "downloads": -1, "filename": "azuki-1.2.tar.gz", "has_sig": false, "md5_digest": "b0db2128f55c0c2724f5dee05cdf0b2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21997, "upload_time": "2015-10-04T21:22:53", "upload_time_iso_8601": "2015-10-04T21:22:53.216592Z", "url": "https://files.pythonhosted.org/packages/ec/ba/5eb8655f185d05d97d506eb050e17d1ff0d5a6db74f68528cb6056189d63/azuki-1.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b0db2128f55c0c2724f5dee05cdf0b2e", "sha256": "0373e4e7aaec696da60029c0ae06ff1b9e705c566794ac9d253cc21fb3ae83f7"}, "downloads": -1, "filename": "azuki-1.2.tar.gz", "has_sig": false, "md5_digest": "b0db2128f55c0c2724f5dee05cdf0b2e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21997, "upload_time": "2015-10-04T21:22:53", "upload_time_iso_8601": "2015-10-04T21:22:53.216592Z", "url": "https://files.pythonhosted.org/packages/ec/ba/5eb8655f185d05d97d506eb050e17d1ff0d5a6db74f68528cb6056189d63/azuki-1.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:15:28 2020"}