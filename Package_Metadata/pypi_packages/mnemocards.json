{"info": {"author": "guiferviz", "author_email": "guiferviz@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "<img src=\"doc/_static/images/logo.png\" width=\"200\">\n\n<a href=\"https://mnemocards.readthedocs.io/en/latest/\">\n    <img src=\"https://readthedocs.org/projects/mnemocards/badge\">\n</a>\n\nGenerate Anki cards from text files (TSV and Markdown).\n\n<center>\n<img src=\"doc/_static/images/all_cards.png\">\n</center>\n\nText files are easily maintainable, `apkg` files are not.\nYou can easily store text files in a version control system like *git*, so you\ncan easily keep track of changes and collaborate with others.\n\nMnemocards comes with some pre-design formats:\n\n * **Language cards** (first row of the last picture):\n Specially designed for learning a language.\n There are two types of language cards:\n   * **Vocabulary cards** (right):\n   Cards displayed in 2 languages, your native language and the language you\n   are learning.\n   This type of card gives you the possibility to auto-generate pronunciation\n   audios directly from Google Translator.\n   Also, if you are learning Japanese you can use \u3075\u308a\u304c\u306a (furigana, the\n   small hiragana characters on top of the Kanji)!\n   * **Expression cards** (left):\n   When you already know a language and want to master it, sometimes it is no\n   longer enough to translate into your language, but you want to write\n   sentences in the language you are learning with their respective explanation\n   also in the language you are learning.\n * **Markdown cards** (second row):\n Cards generated from `*.cards` files.\n This file format has been created specifically for the creation of cards with\n Mnemocards.\n Apart from a pair of start and end of card markers, the syntax of these files\n is pure Markdown.\n You can use images, Latex and math in this kind of cards.\n\n\n# Requirements\n\n * PyAudio, one of the Python dependencies requires the installation of\n **PortAudio-dev**.\n Install the package in Ubuntu-like systems (bionic) with\n `apt install portaudio19-dev=19.6.0-1`.\n Maybe any other version of the package is working but that one is the one\n I'm using without problems.\n Remove the version if you have any problem and try with the last one.\n * **Python 3** and all the libraries listed in `requirements.txt`.\n All these requirements are automatically installed when you install the\n package with `python setup.py install`.\n If you want to install the requirements manually just use:\n `pip install -r requirements.txt`.\n You need at least `pip>=10`.\n * If you want to **import automatically the generated apkgs**, you should\n have **Anki** installed.\n * If you want to **generate cards from your repositories or gists** you should\n have **Git** installed.\n Install it in Ubuntu-like systems with `apt install git`.\n Also, in order to use the GitHub API you should have a file with and API key\n with gists/repository permissions.\n The repository permission is only needed for private repositories.\n\n\n# Installation\n\nUsing `pip`:\n```bash\npip install --no-deps mnemocards\npip install mnemocards\n```\nThis fancy way of installing the package is because PyPi does not allow the\ninstallation of packages that have dependencies hosted outside PyPi.\nMnemocards has one dependency that should be cloned from GitHub, my own\nfork from the [Genanki Python library][genanki].\nInstalling the package first and the dependencies later seems to be a good\nworkaround.\n\nInstalling from source code is even simpler.\nClone this repository, move to the root of the project and run:\n```bash\npython setup.py install\n```\n\nIf you want to contribute or develop use:\n```bash\npython setup.py develop\n```\n\nRemember to have at least the version 10 of `pip`.\n\nConsider the option of using Docker if you do not want to install\nthe package and to set up all the needed environment.\nRead the [Docker section](#docker) of this README to learn more about it.\n\n\n# Generate cards\n\nMove into the `examples/` directory and execute the next line to generate\nall the `*.apkg` files in this directory and all the subdirectories.\n```\n$ mnemocards generate -r .\nBuilding ./computer_science/cards_config.json\nBuilding ./japanese/cards_config.json\nCreating audio file ./japanese/media/hiragana/10091493812914340822.mp3\nCreating audio file ./japanese/media/hiragana/7304217433350980427.mp3\nCreating audio file ./japanese/media/hiragana/3595385396154511079.mp3\nCreating audio file ./japanese/media/hiragana/5000408949304965326.mp3\nCreating audio file ./japanese/media/hiragana/2088116759824648408.mp3\nCreating audio file ./japanese/media/katakana/13050069045466478331.mp3\nCreating audio file ./japanese/media/katakana/4834734646036555229.mp3\nCreating audio file ./japanese/media/katakana/4275246117432970461.mp3\nCreating audio file ./japanese/media/katakana/8563378359496393897.mp3\nCreating audio file ./japanese/media/katakana/10683512746176998599.mp3\nBuilding ./english/cards_config.json\nWriting packages to a file...\n$ ls\ncomputer_science  cs.apkg  english  english.apkg  japanese  japanese.apkg\n```\n\nNow you have 3 `*.apkg` files in this directory that you can import to Anki\nmanually or using Mnemocards (see the [import section](#import-cards-to-anki)).\nDuring the generation process 10 audio files has been created for the Japanese\ndecks.\nThese audio files come from Google Translator.\nIf you repeat the command again, no audio is downloaded again, so the process\nof adding new words to a vocabulary is going to be faster.\n\nMnemocards commands come with documentation that you can read adding `--help`\nto any command.\nFor example, if you want to see all the options you can use with the `generate`\ncommand just execute:\n```\n$ mnemocards generate --help\nusage: mnemocards generate [-h] [--config-file CONFIG_FILE] [--recursive]\n                           [--output-dir OUTPUT_DIR]\n                           DATA_DIR\n\npositional arguments:\n  DATA_DIR              Directory with the configuration and text data to use\n                        for generating the Anki cards.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config-file CONFIG_FILE, -f CONFIG_FILE\n                        Configuration file to search in the DATA_DIR.\n  --recursive, -r       Search recursively for configuration files in the\n                        given DATA_DIR.\n  --output-dir OUTPUT_DIR, -o OUTPUT_DIR\n                        Output directory where the packages are going to be\n                        saved. Current directory by default.\n```\n\nThe process of generating Anki `*.apkg` files is based on the use of\nconfiguration files.\nBy default, the configuration file is called `cards_config.json`.\nThere are three different `cards_config.json` in the examples, one in each\ndirectory (`computer_science/cards_config.json`, `english/cards_config.json`\nand `japanese/cards_config.json`)\n\nThe `-r` option used in the `generate` command indicates Mnemocards to search\nfor those configuration files recursively.\nIf you want to generate only the `japanese.apkg` use\n`mnemocards generage japanese` or move into `examples/japanese` and execute\nthere `mnemocards generate .`.\n\n\n## Configuration files `cards_config.json`\n\nConfiguration files contain how many packages to build, the number of decks,\ndeck configurations and the input source of the data (TSV files and Markdown\nfiles).\n\nThe most basic configuration file is:\n```json\n{\n    \"packages\": [\n        {\n            \"name\": \"APKG_filename\",\n            \"decks\": [\n                {\n                    \"id\": \"ad054cdc-160b-4b77-a8a5-4da79fe5d8a5\",\n                    \"name\": \"Deck name\",\n                    \"src\": [\n                        {\n                            \"type\": \"markdown\",\n                            \"file\": \"my_file.cards\",\n                        }\n                    ]\n                }\n            ]\n        }\n    ]\n}\n```\n\nEach configuration file can generate one or more `*.apkg` packages.\nEach package can contain one or more decks.\nEach deck can consist of one or more source text files.\n\nIt is recommended to specify a deck ID, otherwise a hash of the deck name will\nbe used, which implies that if the name is changed the deck will be considered\nas a new deck by Anki, loosing any learning progress.\n\nApart from the deck ID, name and source files, you can specify a deck config.\nLook to this example:\n```\n{\n    \"id\": \"e9a0b7ba-641a-4af6-8631-be9854a4e9d8\",\n    \"name\": \"My deck name\",\n    \"config\": {\n        \"id\": \"65bcc65b-b4de-4ce4-b5c1-a73a2f64b82d\",\n        \"name\": \"My deck name (Configuration)\",\n        \"timer\": 1,  # Active timer\n        \"maxTaken\": 30,  # Max seconds taken by the timer\n        \"new\": {\n            \"bury\": true,  # Bury related new cards\n            \"initialFactor\": 1500,  # Initial ease factor\n            \"perDay\": 5,  # Number of new cards per day\n            \"delays\": [1, 10, 1440, 4320, 10080],  # Learning steps in minutes\n        },\n        \"lapse\": {\n            \"leechAction\": 1  # Mark leech cards. Set to 0 to suspend.\n        }\n    }\n}\n```\n\nNote that the comments added to the right of some properties are not a valid\nJSON syntax, they are added here only for this tutorial.\nYou can read about [all the deck config options][ankidroidDeckConfig] you can\nuse in the Ankidroid documentation.\n\nThe `src` property should have at least one file in order to generate\nsome cards for that deck.\n`type` and `file` are the two required properties.\nDepend on the type you can add more properties.\n\n\n### `markdown` type\n\n```json\n{\n    \"type\": \"markdown\",\n    \"file\": \"math.cards\",\n    \"card_properties\": {\n        \"tags\": [\"math\"]\n    }\n}\n```\n\nApart from `type` and `file` you can add:\n* `card_properties`.\nProperties that are applied to all the cards in this file.\nFor exampe: using this property you avoid setting tags in all the cards inside\nof that file.\n    * `tags`. The tag property is the only one available at the moment.\n    It is an array of tags.\n    Even if you only what to specify one tag you should use an array with one\n    element.\n\n\n### `vocabulary` type\n\n```json\n{\n    \"type\": \"vocabulary\",\n    \"file\": \"hiragana.tsv\",\n    \"header\": true,\n    \"pronunciation_in_reverse\": false,\n    \"card_color\": \"#33AA33\",\n    \"furigana\": false,\n    \"audio\": {\n        \"lang\": \"ja\",\n        \"media_dir\": \"media/hiragana\"\n    },\n    \"card_properties\": {\n        \"tags\": [\"japanese\", \"hiragana\"]\n    }\n},\n```\n\n* `header`. The first line of the TSV file is a header line, so it will be\nskipped.\n* `pronunciation_in_reverse`.\nBy default, when the vocabulary card is shown in reverse the pronunciation\nis not showed.\nSet this option to true if you want want the pronunciation.\nIt will be shown once you press the *Show answer* button.\n* `card_color`.\nCard background color in hexadecimal.\n* `furigana`.\nIf you are learning Japanese, maybe you want to use furigana (small hiragana\ncharacters over Kanji) in your cards.\nSet this flag to true if you want to use them, by default false.\nIn your TSV files your furigana must be written between brackets and with a\nspace before the Kanji.\nFor example, `\u65e5[\u306b] \u672c[\u307b\u3093] \u8a9e[\u3054]`.\n* `audio`. If you want to generate and audio file of the language you are\nlearning, you should specify here the language.\n    * `lang`. The language used to generate those file using ISO 639-2.\n    You can find a [table with the ISO 639-2][wikipediaIso2] for all the\n    languages in Wikipedia.\n    If the pronunciation is not available in Google Translator this is not\n    going to work.\n    * `media_dir`. Directory where the audio files are stored.\n    After generating the package for the first time, this folder will be\n    created and filled with all the audio files.\n    If you don't delete this folder, the next time Mnemocards will be much\n    faster because it already has all the audio files generated.\n* `card_properties` has the same meaning as in Markdown cards.\n\n\n### `expression` type\n\n```json\n{\n    \"type\": \"expression\",\n    \"file\": \"expressions.tsv\",\n    \"header\": true,\n    \"card_color\": \"#AA3333\",\n    \"card_properties\": {\n        \"tags\": [\"english\", \"expressions\"]\n    }\n}\n```\n\n`header`, `card_color` and `card_properties` have the same meaning as in\nvocabulary cards.\n\n\n## `*.cards` file format\n\nA card has the following syntax:\n```card\n<<<\nheader\n===\ntitle\n---\nbody\n>>>\n```\n\nThe header section contains some metadata about the card (ID and tags), the\ntitle is the front part of the card and the body in the hidden part that is\nshown when you press the *Show Answer* button on Anki.\n\nThe header section has a *YAML* syntax and the title and body section use\nMarkdown syntax.\nNotice than the separators `===` and `---` are legal Markdown syntax for\ngenerating headers, so it's recommended to use `#` and `##` instead in your\ntitle and body.\n\nThe header and the body are not required, so the next example is also a card:\n```card\n<<<\ntitle\n>>>\n```\n\nHowever, it's highly recommended to give an ID to your cards.\nIf no ID is used, a hash of the title is going to be used as ID.\nThat means that the card ID will change if the title is changed (titles are\nprone to change because of typos or future improvements you want to make to\nyour cards).\nCards with different IDs are considered as different cards by Anki, so you\nwill have duplicates and the new card will loose any progress.\nUse IDs please.\nThe ID is given in the header and it's recommended to use a GUID:\n```card\n<<<\nid: 07924f36-ccfa-4b72-ac21-11f8b151d42f\n===\n# Title\n---\nBody\n>>>\n```\n\nAnother legal property that you can define in the header are tags.\nUse a comma separated list with the names of all the tags you want to assign\nto that card:\n```card\n<<<\nid: 07924f36-ccfa-4b72-ac21-11f8b151d42f\ntags: tag1,tag2,tag3\n===\n# Title\n>>>\n```\n\nUse inline math formulas using a dollar (ex: `$x^2$`) and a multi-line formula\nusing two dollars (ex: `$$\\sum_i x_i$$`) in any part of the title or body.\n\nYou can also add images to the cards using an `<img>` tag.\nAt the moment the Markdown syntax for images `![alt](url)` is not supported.\nNotice that the image names should be unique over all the images in your Anki\ndecks, so avoid names like `1.png` or `example.png`.\n\n\n## TSV Vocabulary files\n\nTSV vocabulary files should contain the next columns.\nAt the moment, the columns **should be in the given order**.\n\n* `ID`.\nCharacters that uniquely identify a note.\nThis number must be unique not only in the file but in the whole collection,\nthat is why we recommend using a UUID (a sequence of alphanumeric characters\nsuch as: 64012c71-9aea-4622-aac7-2595d6798737).\nHaving a UUID is necessary to be able to update the cards (make spelling\ncorrections or improve them with extra information) and not lose the progress.\n* `YourLanguageWord`.\nThe word you want to learn but in your mother tongue or in a known language.\n* `YourLanguageExplanation`.\nAny extra detail to help you get the word you're looking for.\nA clear example of use is when you have to explain a word that does not have a\ndirect translation in your language or when the translation in your language\nis a word that has more than one meaning.\nFor example: in Japanese flat and thin objects use different numbers, so the\ntranslation of \u4e00\u679a is obviously \"one\" but to make the reverse translation we\nneed a clarification like \"one, when counting flat and thin objects\".\n* `LanguageYouLearnWord`.\nThe word written in the language you are trying to learn.\n* `LanguageYouLearnPronunciation`.\nWrite here how you can pronounce the word of the language you are learning.\nIf you choose to generate an audio with the pronunciation, the audio is going\nto be placed here.\n* `LanguageYouLearnExplanation`.\nThis explanation will always accompany the word in the language you want to\nlearn.\nIt explains in what alternative forms the word can appear as synonyms or\nvariations in writing.\nDo not give any extra information that reveals the meaning of the word, as it\nwill appear on the front of some cards where your goal will be to make the\ntranslation into your language.\nFor example: English \"hit, to punch someone\" to Spanish \"pegar, you can also\nuse 'golpear'\".\n* `Tags`.\nThe tags you write here are added to the tags specified in the\n`cards_config.json`.\n\n\nThis is how the fields are shown in the cards.\nFront card format:\n\n    YourLanguageWord\n    YourLanguageExplanation\n    ---                            # After showing answer\n    LanguageYouLearnWord           # After showing answer\n    LanguageYouLearnPronunciation  # After showing answer\n    LanguageYouLearnExplanation    # After showing answer\n\nReverse card format:\n\n    LanguageYouLearnWord\n    LanguageYouLearnPronunciation  # After showing answer\n    LanguageYouLearnExplanation\n    ---                            # After showing answer\n    YourLanguageWord               # After showing answer\n    YourLanguageExplanation        # After showing answer\n\nFor Japanese language there is an special flag in `cards_config.json` named\n`furigana`.\nIf you mark this flag to true the Kanjis in the front side are going to be\nshown alone and in the back side are going to be shown with furigana.\nThis makes the field `LanguageYouLearnPronunciation` not really required when\ncreating Japanese cards (you can always use romaji here, of course).\n\n\n## Expressions TSV files\n\nSimilarly to vocabulary TSV files, the expression TSV files contain:\nAt the moment, the columns **should be in the given order**.\n\n* `ID`\nCharacters that uniquely identify a note.\nThis number must be unique not only in the file but in the whole collection,\nthat is why we recommend using a UUID (a sequence of alphanumeric characters\nsuch as: 64012c71-9aea-4622-aac7-2595d6798737).\nHaving a UUID is necessary to be able to update the cards (make spelling\ncorrections or improve them with extra information) and not lose the progress.\n* `Expression`.\nExpression that you want to learn.\n* `Explanation`.\nExtra explanation of the expression if needed.\n* `Meaning`.\nMeaning of the expression.\n* `Example`.\nExample sentence of use of the expression.\n* `Tags`.\nThe tags you write here are added to the tags specified in the\n`cards_config.json`.\n\nThis type of notes only have one front card.\nFront card:\n\n    Expression\n    Explanation\n    ---          # After showing answer\n    Meaning      # After showing answer\n    Example      # After showing answer\n\nOf course, these types of cards are created for the purpose of learning a new\nlanguage, but they can be used for any other purpose as long as the fields\ndescribed here fit your purpose.\n\n\n# Import cards to Anki\n\nUse the command `mnemocards import --help` to get the instructions about\nimporting `*.apkg` files.\n\n```\n$ mnemocards import --help\nusage: mnemocards import [-h] [--profile-name PROFILE_NAME]\n                         [--collection-path COLLECTION_PATH]\n                         apkgs [apkgs ...]\n\npositional arguments:\n  apkgs                 List of packages to import.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --profile-name PROFILE_NAME, -p PROFILE_NAME\n                        If your collection is in the default location\n                        (`~/.local/share/Anki2/`) you can specify only the\n                        profile name. You cannot use this option as the same\n                        time as `-c`.\n  --collection-path COLLECTION_PATH, -c COLLECTION_PATH\n                        Specify the full path of the collection file. If you\n                        use this option with `-p` (profile name), the profile\n                        name has preference over the full collection path.\n```\n\nTo import an `*.apkg` file you need to close Anki, otherwise the collection\nfile cannot be written.\nRemember that you need to open Anki and synchronize the collection with\nWeb Anki to see the updated collection in all your devices.\n\n\n# *Git* utilities\n\nIn order to keep my cards safe and centralize my knowledge database, I added a\nfew utilities to `mnemocards` to clone and push many *Git* repositories at\nthe same time.\n\nThe first step is to know which repositories you want to clone.\nI like to create a new private repository for every subject I'm learning.\nFor example:\n\n * Japanese: under my profile I have a repository called `learning_japanese`.\n * Programming: I have a repository called `learning_programming`.\n * And so on...\n\nMy aim is to clone all these repositories in an easy way and make them very\naccessible so that any time I think of something I want to remember I don't\npostpone it because of laziness.\nAs I'm always learning I have a lot of repositories.\nTo automate this task I've created the `mnemocards github` command.\n\nThe result of executing the next command is a `~/.mnemocards` file with a list\nof all the repositories with Anki cards and the local path in my PC where I\nwant them to be cloned.\n```\n$ mnemocards github -i \"guiferviz/learning_([^ _]*)\" -d ~/learning\n... some output ...\n$ cat ~/.mnemocards\n{\n    \"repos\": [\n        [\n            \"git@github.com:guiferviz/learning_japanese.git\",\n            \"~/learning/japanese\"\n        ],\n        [\n            \"git@github.com:guiferviz/learning_programming.git\",\n            \"~/learning/programming\"\n        ]\n    ]\n}\n```\n\nTo execute that command you need a file with your GitHub API key with enough\npermissions to read your repositories.\nGo to [GitHub Tokens][githubTokens] and generate a new one with permissions\nfor reading your repositories.\nIf you want to read private repositories select the next permissions:\n\n![](doc/_static/images/github_api_permissions_01.png)\n\nIf you want to use the `mnemocards github --gists` option, that is, cloning\ngists instead of repositories, your GitHub API key should have different\npermissions.\nI do not use gists because they do not allow to commit directories and I want\nto have my images good organized.\n\n![](doc/_static/images/github_api_permissions_02.png)\n\nYou can also create the `~/.mnemocards` file by hand taking the given example\nand substituting the URLs and the local paths.\n\nOnce you have your file manually create or automatically created, you can\nclone all your repos with the next command.\nIf your repo is already cloned, this command also pulls the last changes from\nthe server.\n```\nmnemocards pull\n```\n\nTo commit and push all the changes in a repository use the next command.\nEverything in your repositories is going to be added and committed, so if you\ndo not want to include all the files add exclude patters in your `.gitignore`\nor push all your repositories manually.\nCommits are made using a default commit message similar to\n\"Updating repository with mnemocards.\".\n```\nmnemocards push\n```\n\n\n# Docker\n\nA *Docker* image is available so that you can generate your packages without\nhaving to install Mnemocards in your environment.\nAt the moment you need to have *Anki* installed locally.\nThe Docker image I've built for you is named `guiferviz/mnemocards` and it\nis available in the [Mnemocards Docker Hub repository][dockerMnemocards].\nRead the documentation under the `docker/` directory to learn how to execute\nthe image.\n\nIf you want to generate the Docker image by your own, you will also find all\nthe information in the `docker/` directory (`Dockerfile` and build commands).\n\nAs Docker images are auto-generated when a new version tag is pushed to the\nGitHub repository, using Docker is a very convenient way to switch between\ndifferent versions of Mnemocards.\n\n\n# VIM users\n\nI'm a die-hard VIM user, for that reason I've created a `vim_syntax/cards.vim`\n**syntax file**.\nIt's not too fancy but it looks better than using the Markdown syntax.\n\nUsing Markdown syntax:\n<img src=\"doc/_static/images/vim_markdown_syntax.png\" width=\"800\">\n\nUsing my own Cards syntax:\n<img src=\"doc/_static/images/vim_cards_syntax.png\" width=\"800\">\n\nAmong my [UltiSnips][ultiSnips] **snippets** I have one that generates a new\ncard with an unique ID, a title and a body.\n```snippet\nsnippet card \"Create a new card\" b\n<<<\nid: `!p if not snip.c: snip.rv = get_uuid()`\n===\n# ${1}\n---\n${2}\n>>>\nendsnippet\n```\nThe `get_uuid` function is defined as:\n```python\ndef get_uuid():\n    \"\"\"Get an UUID string. \"\"\"\n\n    import uuid\n    return str(uuid.uuid4())\n```\n\nI also use the [Markdown Preview][markdownPreview] plugin so I can see **how my\ncards look like without generating the package**.\nIt's not perfect for the `*.cards` format, but it's better than nothing :)\n\n\n[markdownPreview]: https://github.com/iamcco/markdown-preview.nvim\n[ultiSnips]: https://github.com/SirVer/ultisnips\n[dockerMnemocards]: https://hub.docker.com/repository/docker/guiferviz/mnemocards \n[githubTokens]: https://github.com/settings/tokens/new\n[ankidroidDeckConfig]: https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#dconf-jsonobjects\n[wikipediaIso2]: https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes\n[genanki]: https://github.com/kerrickstaley/genanki", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/guiferviz/mnemocards", "keywords": "python anki cards generator", "license": "Copyright guiferviz", "maintainer": "", "maintainer_email": "", "name": "mnemocards", "package_url": "https://pypi.org/project/mnemocards/", "platform": "", "project_url": "https://pypi.org/project/mnemocards/", "project_urls": {"Homepage": "https://github.com/guiferviz/mnemocards"}, "release_url": "https://pypi.org/project/mnemocards/0.1.3/", "requires_dist": null, "requires_python": "", "summary": "My module description", "version": "0.1.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ad1afba912622e69d4a08b8f5c8a7f8c6e7f4709/646f632f5f7374617469632f696d616765732f6c6f676f2e706e67\" width=\"200\">\n<a href=\"https://mnemocards.readthedocs.io/en/latest/\" rel=\"nofollow\">\n    <img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/930e5b23396f911423dfbbf174ec6210303fce5b/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f6d6e656d6f63617264732f6261646765\">\n</a>\n<p>Generate Anki cards from text files (TSV and Markdown).</p>\n&lt;center&gt;\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/21c1ed48ec2a38e9c0bf81224564c4a7d60fe983/646f632f5f7374617469632f696d616765732f616c6c5f63617264732e706e67\">\n&lt;/center&gt;\n<p>Text files are easily maintainable, <code>apkg</code> files are not.\nYou can easily store text files in a version control system like <em>git</em>, so you\ncan easily keep track of changes and collaborate with others.</p>\n<p>Mnemocards comes with some pre-design formats:</p>\n<ul>\n<li><strong>Language cards</strong> (first row of the last picture):\nSpecially designed for learning a language.\nThere are two types of language cards:\n<ul>\n<li><strong>Vocabulary cards</strong> (right):\nCards displayed in 2 languages, your native language and the language you\nare learning.\nThis type of card gives you the possibility to auto-generate pronunciation\naudios directly from Google Translator.\nAlso, if you are learning Japanese you can use \u3075\u308a\u304c\u306a (furigana, the\nsmall hiragana characters on top of the Kanji)!</li>\n<li><strong>Expression cards</strong> (left):\nWhen you already know a language and want to master it, sometimes it is no\nlonger enough to translate into your language, but you want to write\nsentences in the language you are learning with their respective explanation\nalso in the language you are learning.</li>\n</ul>\n</li>\n<li><strong>Markdown cards</strong> (second row):\nCards generated from <code>*.cards</code> files.\nThis file format has been created specifically for the creation of cards with\nMnemocards.\nApart from a pair of start and end of card markers, the syntax of these files\nis pure Markdown.\nYou can use images, Latex and math in this kind of cards.</li>\n</ul>\n<h1>Requirements</h1>\n<ul>\n<li>PyAudio, one of the Python dependencies requires the installation of\n<strong>PortAudio-dev</strong>.\nInstall the package in Ubuntu-like systems (bionic) with\n<code>apt install portaudio19-dev=19.6.0-1</code>.\nMaybe any other version of the package is working but that one is the one\nI'm using without problems.\nRemove the version if you have any problem and try with the last one.</li>\n<li><strong>Python 3</strong> and all the libraries listed in <code>requirements.txt</code>.\nAll these requirements are automatically installed when you install the\npackage with <code>python setup.py install</code>.\nIf you want to install the requirements manually just use:\n<code>pip install -r requirements.txt</code>.\nYou need at least <code>pip&gt;=10</code>.</li>\n<li>If you want to <strong>import automatically the generated apkgs</strong>, you should\nhave <strong>Anki</strong> installed.</li>\n<li>If you want to <strong>generate cards from your repositories or gists</strong> you should\nhave <strong>Git</strong> installed.\nInstall it in Ubuntu-like systems with <code>apt install git</code>.\nAlso, in order to use the GitHub API you should have a file with and API key\nwith gists/repository permissions.\nThe repository permission is only needed for private repositories.</li>\n</ul>\n<h1>Installation</h1>\n<p>Using <code>pip</code>:</p>\n<pre>pip install --no-deps mnemocards\npip install mnemocards\n</pre>\n<p>This fancy way of installing the package is because PyPi does not allow the\ninstallation of packages that have dependencies hosted outside PyPi.\nMnemocards has one dependency that should be cloned from GitHub, my own\nfork from the <a href=\"https://github.com/kerrickstaley/genanki\" rel=\"nofollow\">Genanki Python library</a>.\nInstalling the package first and the dependencies later seems to be a good\nworkaround.</p>\n<p>Installing from source code is even simpler.\nClone this repository, move to the root of the project and run:</p>\n<pre>python setup.py install\n</pre>\n<p>If you want to contribute or develop use:</p>\n<pre>python setup.py develop\n</pre>\n<p>Remember to have at least the version 10 of <code>pip</code>.</p>\n<p>Consider the option of using Docker if you do not want to install\nthe package and to set up all the needed environment.\nRead the <a href=\"#docker\" rel=\"nofollow\">Docker section</a> of this README to learn more about it.</p>\n<h1>Generate cards</h1>\n<p>Move into the <code>examples/</code> directory and execute the next line to generate\nall the <code>*.apkg</code> files in this directory and all the subdirectories.</p>\n<pre><code>$ mnemocards generate -r .\nBuilding ./computer_science/cards_config.json\nBuilding ./japanese/cards_config.json\nCreating audio file ./japanese/media/hiragana/10091493812914340822.mp3\nCreating audio file ./japanese/media/hiragana/7304217433350980427.mp3\nCreating audio file ./japanese/media/hiragana/3595385396154511079.mp3\nCreating audio file ./japanese/media/hiragana/5000408949304965326.mp3\nCreating audio file ./japanese/media/hiragana/2088116759824648408.mp3\nCreating audio file ./japanese/media/katakana/13050069045466478331.mp3\nCreating audio file ./japanese/media/katakana/4834734646036555229.mp3\nCreating audio file ./japanese/media/katakana/4275246117432970461.mp3\nCreating audio file ./japanese/media/katakana/8563378359496393897.mp3\nCreating audio file ./japanese/media/katakana/10683512746176998599.mp3\nBuilding ./english/cards_config.json\nWriting packages to a file...\n$ ls\ncomputer_science  cs.apkg  english  english.apkg  japanese  japanese.apkg\n</code></pre>\n<p>Now you have 3 <code>*.apkg</code> files in this directory that you can import to Anki\nmanually or using Mnemocards (see the <a href=\"#import-cards-to-anki\" rel=\"nofollow\">import section</a>).\nDuring the generation process 10 audio files has been created for the Japanese\ndecks.\nThese audio files come from Google Translator.\nIf you repeat the command again, no audio is downloaded again, so the process\nof adding new words to a vocabulary is going to be faster.</p>\n<p>Mnemocards commands come with documentation that you can read adding <code>--help</code>\nto any command.\nFor example, if you want to see all the options you can use with the <code>generate</code>\ncommand just execute:</p>\n<pre><code>$ mnemocards generate --help\nusage: mnemocards generate [-h] [--config-file CONFIG_FILE] [--recursive]\n                           [--output-dir OUTPUT_DIR]\n                           DATA_DIR\n\npositional arguments:\n  DATA_DIR              Directory with the configuration and text data to use\n                        for generating the Anki cards.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --config-file CONFIG_FILE, -f CONFIG_FILE\n                        Configuration file to search in the DATA_DIR.\n  --recursive, -r       Search recursively for configuration files in the\n                        given DATA_DIR.\n  --output-dir OUTPUT_DIR, -o OUTPUT_DIR\n                        Output directory where the packages are going to be\n                        saved. Current directory by default.\n</code></pre>\n<p>The process of generating Anki <code>*.apkg</code> files is based on the use of\nconfiguration files.\nBy default, the configuration file is called <code>cards_config.json</code>.\nThere are three different <code>cards_config.json</code> in the examples, one in each\ndirectory (<code>computer_science/cards_config.json</code>, <code>english/cards_config.json</code>\nand <code>japanese/cards_config.json</code>)</p>\n<p>The <code>-r</code> option used in the <code>generate</code> command indicates Mnemocards to search\nfor those configuration files recursively.\nIf you want to generate only the <code>japanese.apkg</code> use\n<code>mnemocards generage japanese</code> or move into <code>examples/japanese</code> and execute\nthere <code>mnemocards generate .</code>.</p>\n<h2>Configuration files <code>cards_config.json</code></h2>\n<p>Configuration files contain how many packages to build, the number of decks,\ndeck configurations and the input source of the data (TSV files and Markdown\nfiles).</p>\n<p>The most basic configuration file is:</p>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"packages\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n        <span class=\"p\">{</span>\n            <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"APKG_filename\"</span><span class=\"p\">,</span>\n            <span class=\"nt\">\"decks\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                <span class=\"p\">{</span>\n                    <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ad054cdc-160b-4b77-a8a5-4da79fe5d8a5\"</span><span class=\"p\">,</span>\n                    <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Deck name\"</span><span class=\"p\">,</span>\n                    <span class=\"nt\">\"src\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n                        <span class=\"p\">{</span>\n                            <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"markdown\"</span><span class=\"p\">,</span>\n                            <span class=\"nt\">\"file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"my_file.cards\"</span><span class=\"p\">,</span>\n                        <span class=\"p\">}</span>\n                    <span class=\"p\">]</span>\n                <span class=\"p\">}</span>\n            <span class=\"p\">]</span>\n        <span class=\"p\">}</span>\n    <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Each configuration file can generate one or more <code>*.apkg</code> packages.\nEach package can contain one or more decks.\nEach deck can consist of one or more source text files.</p>\n<p>It is recommended to specify a deck ID, otherwise a hash of the deck name will\nbe used, which implies that if the name is changed the deck will be considered\nas a new deck by Anki, loosing any learning progress.</p>\n<p>Apart from the deck ID, name and source files, you can specify a deck config.\nLook to this example:</p>\n<pre><code>{\n    \"id\": \"e9a0b7ba-641a-4af6-8631-be9854a4e9d8\",\n    \"name\": \"My deck name\",\n    \"config\": {\n        \"id\": \"65bcc65b-b4de-4ce4-b5c1-a73a2f64b82d\",\n        \"name\": \"My deck name (Configuration)\",\n        \"timer\": 1,  # Active timer\n        \"maxTaken\": 30,  # Max seconds taken by the timer\n        \"new\": {\n            \"bury\": true,  # Bury related new cards\n            \"initialFactor\": 1500,  # Initial ease factor\n            \"perDay\": 5,  # Number of new cards per day\n            \"delays\": [1, 10, 1440, 4320, 10080],  # Learning steps in minutes\n        },\n        \"lapse\": {\n            \"leechAction\": 1  # Mark leech cards. Set to 0 to suspend.\n        }\n    }\n}\n</code></pre>\n<p>Note that the comments added to the right of some properties are not a valid\nJSON syntax, they are added here only for this tutorial.\nYou can read about <a href=\"https://github.com/ankidroid/Anki-Android/wiki/Database-Structure#dconf-jsonobjects\" rel=\"nofollow\">all the deck config options</a> you can\nuse in the Ankidroid documentation.</p>\n<p>The <code>src</code> property should have at least one file in order to generate\nsome cards for that deck.\n<code>type</code> and <code>file</code> are the two required properties.\nDepend on the type you can add more properties.</p>\n<h3><code>markdown</code> type</h3>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"markdown\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"math.cards\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"card_properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"math\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p>Apart from <code>type</code> and <code>file</code> you can add:</p>\n<ul>\n<li><code>card_properties</code>.\nProperties that are applied to all the cards in this file.\nFor exampe: using this property you avoid setting tags in all the cards inside\nof that file.\n<ul>\n<li><code>tags</code>. The tag property is the only one available at the moment.\nIt is an array of tags.\nEven if you only what to specify one tag you should use an array with one\nelement.</li>\n</ul>\n</li>\n</ul>\n<h3><code>vocabulary</code> type</h3>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"vocabulary\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"hiragana.tsv\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"header\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"pronunciation_in_reverse\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"card_color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"#33AA33\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"furigana\"</span><span class=\"p\">:</span> <span class=\"kc\">false</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"audio\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"lang\"</span><span class=\"p\">:</span> <span class=\"s2\">\"ja\"</span><span class=\"p\">,</span>\n        <span class=\"nt\">\"media_dir\"</span><span class=\"p\">:</span> <span class=\"s2\">\"media/hiragana\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"nt\">\"card_properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"japanese\"</span><span class=\"p\">,</span> <span class=\"s2\">\"hiragana\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span><span class=\"err\">,</span>\n</pre>\n<ul>\n<li><code>header</code>. The first line of the TSV file is a header line, so it will be\nskipped.</li>\n<li><code>pronunciation_in_reverse</code>.\nBy default, when the vocabulary card is shown in reverse the pronunciation\nis not showed.\nSet this option to true if you want want the pronunciation.\nIt will be shown once you press the <em>Show answer</em> button.</li>\n<li><code>card_color</code>.\nCard background color in hexadecimal.</li>\n<li><code>furigana</code>.\nIf you are learning Japanese, maybe you want to use furigana (small hiragana\ncharacters over Kanji) in your cards.\nSet this flag to true if you want to use them, by default false.\nIn your TSV files your furigana must be written between brackets and with a\nspace before the Kanji.\nFor example, <code>\u65e5[\u306b] \u672c[\u307b\u3093] \u8a9e[\u3054]</code>.</li>\n<li><code>audio</code>. If you want to generate and audio file of the language you are\nlearning, you should specify here the language.\n<ul>\n<li><code>lang</code>. The language used to generate those file using ISO 639-2.\nYou can find a <a href=\"https://en.wikipedia.org/wiki/List_of_ISO_639-2_codes\" rel=\"nofollow\">table with the ISO 639-2</a> for all the\nlanguages in Wikipedia.\nIf the pronunciation is not available in Google Translator this is not\ngoing to work.</li>\n<li><code>media_dir</code>. Directory where the audio files are stored.\nAfter generating the package for the first time, this folder will be\ncreated and filled with all the audio files.\nIf you don't delete this folder, the next time Mnemocards will be much\nfaster because it already has all the audio files generated.</li>\n</ul>\n</li>\n<li><code>card_properties</code> has the same meaning as in Markdown cards.</li>\n</ul>\n<h3><code>expression</code> type</h3>\n<pre><span class=\"p\">{</span>\n    <span class=\"nt\">\"type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"expression\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"file\"</span><span class=\"p\">:</span> <span class=\"s2\">\"expressions.tsv\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"header\"</span><span class=\"p\">:</span> <span class=\"kc\">true</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"card_color\"</span><span class=\"p\">:</span> <span class=\"s2\">\"#AA3333\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"card_properties\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n        <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"english\"</span><span class=\"p\">,</span> <span class=\"s2\">\"expressions\"</span><span class=\"p\">]</span>\n    <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</pre>\n<p><code>header</code>, <code>card_color</code> and <code>card_properties</code> have the same meaning as in\nvocabulary cards.</p>\n<h2><code>*.cards</code> file format</h2>\n<p>A card has the following syntax:</p>\n<pre>&lt;&lt;&lt;\nheader\n===\ntitle\n---\nbody\n&gt;&gt;&gt;\n</pre>\n<p>The header section contains some metadata about the card (ID and tags), the\ntitle is the front part of the card and the body in the hidden part that is\nshown when you press the <em>Show Answer</em> button on Anki.</p>\n<p>The header section has a <em>YAML</em> syntax and the title and body section use\nMarkdown syntax.\nNotice than the separators <code>===</code> and <code>---</code> are legal Markdown syntax for\ngenerating headers, so it's recommended to use <code>#</code> and <code>##</code> instead in your\ntitle and body.</p>\n<p>The header and the body are not required, so the next example is also a card:</p>\n<pre>&lt;&lt;&lt;\ntitle\n&gt;&gt;&gt;\n</pre>\n<p>However, it's highly recommended to give an ID to your cards.\nIf no ID is used, a hash of the title is going to be used as ID.\nThat means that the card ID will change if the title is changed (titles are\nprone to change because of typos or future improvements you want to make to\nyour cards).\nCards with different IDs are considered as different cards by Anki, so you\nwill have duplicates and the new card will loose any progress.\nUse IDs please.\nThe ID is given in the header and it's recommended to use a GUID:</p>\n<pre>&lt;&lt;&lt;\nid: 07924f36-ccfa-4b72-ac21-11f8b151d42f\n===\n# Title\n---\nBody\n&gt;&gt;&gt;\n</pre>\n<p>Another legal property that you can define in the header are tags.\nUse a comma separated list with the names of all the tags you want to assign\nto that card:</p>\n<pre>&lt;&lt;&lt;\nid: 07924f36-ccfa-4b72-ac21-11f8b151d42f\ntags: tag1,tag2,tag3\n===\n# Title\n&gt;&gt;&gt;\n</pre>\n<p>Use inline math formulas using a dollar (ex: <code>$x^2$</code>) and a multi-line formula\nusing two dollars (ex: <code>$$\\sum_i x_i$$</code>) in any part of the title or body.</p>\n<p>You can also add images to the cards using an <code>&lt;img&gt;</code> tag.\nAt the moment the Markdown syntax for images <code>![alt](url)</code> is not supported.\nNotice that the image names should be unique over all the images in your Anki\ndecks, so avoid names like <code>1.png</code> or <code>example.png</code>.</p>\n<h2>TSV Vocabulary files</h2>\n<p>TSV vocabulary files should contain the next columns.\nAt the moment, the columns <strong>should be in the given order</strong>.</p>\n<ul>\n<li><code>ID</code>.\nCharacters that uniquely identify a note.\nThis number must be unique not only in the file but in the whole collection,\nthat is why we recommend using a UUID (a sequence of alphanumeric characters\nsuch as: 64012c71-9aea-4622-aac7-2595d6798737).\nHaving a UUID is necessary to be able to update the cards (make spelling\ncorrections or improve them with extra information) and not lose the progress.</li>\n<li><code>YourLanguageWord</code>.\nThe word you want to learn but in your mother tongue or in a known language.</li>\n<li><code>YourLanguageExplanation</code>.\nAny extra detail to help you get the word you're looking for.\nA clear example of use is when you have to explain a word that does not have a\ndirect translation in your language or when the translation in your language\nis a word that has more than one meaning.\nFor example: in Japanese flat and thin objects use different numbers, so the\ntranslation of \u4e00\u679a is obviously \"one\" but to make the reverse translation we\nneed a clarification like \"one, when counting flat and thin objects\".</li>\n<li><code>LanguageYouLearnWord</code>.\nThe word written in the language you are trying to learn.</li>\n<li><code>LanguageYouLearnPronunciation</code>.\nWrite here how you can pronounce the word of the language you are learning.\nIf you choose to generate an audio with the pronunciation, the audio is going\nto be placed here.</li>\n<li><code>LanguageYouLearnExplanation</code>.\nThis explanation will always accompany the word in the language you want to\nlearn.\nIt explains in what alternative forms the word can appear as synonyms or\nvariations in writing.\nDo not give any extra information that reveals the meaning of the word, as it\nwill appear on the front of some cards where your goal will be to make the\ntranslation into your language.\nFor example: English \"hit, to punch someone\" to Spanish \"pegar, you can also\nuse 'golpear'\".</li>\n<li><code>Tags</code>.\nThe tags you write here are added to the tags specified in the\n<code>cards_config.json</code>.</li>\n</ul>\n<p>This is how the fields are shown in the cards.\nFront card format:</p>\n<pre><code>YourLanguageWord\nYourLanguageExplanation\n---                            # After showing answer\nLanguageYouLearnWord           # After showing answer\nLanguageYouLearnPronunciation  # After showing answer\nLanguageYouLearnExplanation    # After showing answer\n</code></pre>\n<p>Reverse card format:</p>\n<pre><code>LanguageYouLearnWord\nLanguageYouLearnPronunciation  # After showing answer\nLanguageYouLearnExplanation\n---                            # After showing answer\nYourLanguageWord               # After showing answer\nYourLanguageExplanation        # After showing answer\n</code></pre>\n<p>For Japanese language there is an special flag in <code>cards_config.json</code> named\n<code>furigana</code>.\nIf you mark this flag to true the Kanjis in the front side are going to be\nshown alone and in the back side are going to be shown with furigana.\nThis makes the field <code>LanguageYouLearnPronunciation</code> not really required when\ncreating Japanese cards (you can always use romaji here, of course).</p>\n<h2>Expressions TSV files</h2>\n<p>Similarly to vocabulary TSV files, the expression TSV files contain:\nAt the moment, the columns <strong>should be in the given order</strong>.</p>\n<ul>\n<li><code>ID</code>\nCharacters that uniquely identify a note.\nThis number must be unique not only in the file but in the whole collection,\nthat is why we recommend using a UUID (a sequence of alphanumeric characters\nsuch as: 64012c71-9aea-4622-aac7-2595d6798737).\nHaving a UUID is necessary to be able to update the cards (make spelling\ncorrections or improve them with extra information) and not lose the progress.</li>\n<li><code>Expression</code>.\nExpression that you want to learn.</li>\n<li><code>Explanation</code>.\nExtra explanation of the expression if needed.</li>\n<li><code>Meaning</code>.\nMeaning of the expression.</li>\n<li><code>Example</code>.\nExample sentence of use of the expression.</li>\n<li><code>Tags</code>.\nThe tags you write here are added to the tags specified in the\n<code>cards_config.json</code>.</li>\n</ul>\n<p>This type of notes only have one front card.\nFront card:</p>\n<pre><code>Expression\nExplanation\n---          # After showing answer\nMeaning      # After showing answer\nExample      # After showing answer\n</code></pre>\n<p>Of course, these types of cards are created for the purpose of learning a new\nlanguage, but they can be used for any other purpose as long as the fields\ndescribed here fit your purpose.</p>\n<h1>Import cards to Anki</h1>\n<p>Use the command <code>mnemocards import --help</code> to get the instructions about\nimporting <code>*.apkg</code> files.</p>\n<pre><code>$ mnemocards import --help\nusage: mnemocards import [-h] [--profile-name PROFILE_NAME]\n                         [--collection-path COLLECTION_PATH]\n                         apkgs [apkgs ...]\n\npositional arguments:\n  apkgs                 List of packages to import.\n\noptional arguments:\n  -h, --help            show this help message and exit\n  --profile-name PROFILE_NAME, -p PROFILE_NAME\n                        If your collection is in the default location\n                        (`~/.local/share/Anki2/`) you can specify only the\n                        profile name. You cannot use this option as the same\n                        time as `-c`.\n  --collection-path COLLECTION_PATH, -c COLLECTION_PATH\n                        Specify the full path of the collection file. If you\n                        use this option with `-p` (profile name), the profile\n                        name has preference over the full collection path.\n</code></pre>\n<p>To import an <code>*.apkg</code> file you need to close Anki, otherwise the collection\nfile cannot be written.\nRemember that you need to open Anki and synchronize the collection with\nWeb Anki to see the updated collection in all your devices.</p>\n<h1><em>Git</em> utilities</h1>\n<p>In order to keep my cards safe and centralize my knowledge database, I added a\nfew utilities to <code>mnemocards</code> to clone and push many <em>Git</em> repositories at\nthe same time.</p>\n<p>The first step is to know which repositories you want to clone.\nI like to create a new private repository for every subject I'm learning.\nFor example:</p>\n<ul>\n<li>Japanese: under my profile I have a repository called <code>learning_japanese</code>.</li>\n<li>Programming: I have a repository called <code>learning_programming</code>.</li>\n<li>And so on...</li>\n</ul>\n<p>My aim is to clone all these repositories in an easy way and make them very\naccessible so that any time I think of something I want to remember I don't\npostpone it because of laziness.\nAs I'm always learning I have a lot of repositories.\nTo automate this task I've created the <code>mnemocards github</code> command.</p>\n<p>The result of executing the next command is a <code>~/.mnemocards</code> file with a list\nof all the repositories with Anki cards and the local path in my PC where I\nwant them to be cloned.</p>\n<pre><code>$ mnemocards github -i \"guiferviz/learning_([^ _]*)\" -d ~/learning\n... some output ...\n$ cat ~/.mnemocards\n{\n    \"repos\": [\n        [\n            \"git@github.com:guiferviz/learning_japanese.git\",\n            \"~/learning/japanese\"\n        ],\n        [\n            \"git@github.com:guiferviz/learning_programming.git\",\n            \"~/learning/programming\"\n        ]\n    ]\n}\n</code></pre>\n<p>To execute that command you need a file with your GitHub API key with enough\npermissions to read your repositories.\nGo to <a href=\"https://github.com/settings/tokens/new\" rel=\"nofollow\">GitHub Tokens</a> and generate a new one with permissions\nfor reading your repositories.\nIf you want to read private repositories select the next permissions:</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/47ecaadc6716cc1747661b3f64a3d2d60f2bb171/646f632f5f7374617469632f696d616765732f6769746875625f6170695f7065726d697373696f6e735f30312e706e67\"></p>\n<p>If you want to use the <code>mnemocards github --gists</code> option, that is, cloning\ngists instead of repositories, your GitHub API key should have different\npermissions.\nI do not use gists because they do not allow to commit directories and I want\nto have my images good organized.</p>\n<p><img alt=\"\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e1ba63d8cc199354925cda82f878e4ba9f81a61/646f632f5f7374617469632f696d616765732f6769746875625f6170695f7065726d697373696f6e735f30322e706e67\"></p>\n<p>You can also create the <code>~/.mnemocards</code> file by hand taking the given example\nand substituting the URLs and the local paths.</p>\n<p>Once you have your file manually create or automatically created, you can\nclone all your repos with the next command.\nIf your repo is already cloned, this command also pulls the last changes from\nthe server.</p>\n<pre><code>mnemocards pull\n</code></pre>\n<p>To commit and push all the changes in a repository use the next command.\nEverything in your repositories is going to be added and committed, so if you\ndo not want to include all the files add exclude patters in your <code>.gitignore</code>\nor push all your repositories manually.\nCommits are made using a default commit message similar to\n\"Updating repository with mnemocards.\".</p>\n<pre><code>mnemocards push\n</code></pre>\n<h1>Docker</h1>\n<p>A <em>Docker</em> image is available so that you can generate your packages without\nhaving to install Mnemocards in your environment.\nAt the moment you need to have <em>Anki</em> installed locally.\nThe Docker image I've built for you is named <code>guiferviz/mnemocards</code> and it\nis available in the <a href=\"https://hub.docker.com/repository/docker/guiferviz/mnemocards\" rel=\"nofollow\">Mnemocards Docker Hub repository</a>.\nRead the documentation under the <code>docker/</code> directory to learn how to execute\nthe image.</p>\n<p>If you want to generate the Docker image by your own, you will also find all\nthe information in the <code>docker/</code> directory (<code>Dockerfile</code> and build commands).</p>\n<p>As Docker images are auto-generated when a new version tag is pushed to the\nGitHub repository, using Docker is a very convenient way to switch between\ndifferent versions of Mnemocards.</p>\n<h1>VIM users</h1>\n<p>I'm a die-hard VIM user, for that reason I've created a <code>vim_syntax/cards.vim</code>\n<strong>syntax file</strong>.\nIt's not too fancy but it looks better than using the Markdown syntax.</p>\n<p>Using Markdown syntax:\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8230ff359e3a5e6013c805e6a309cffb400641b0/646f632f5f7374617469632f696d616765732f76696d5f6d61726b646f776e5f73796e7461782e706e67\" width=\"800\"></p>\n<p>Using my own Cards syntax:\n<img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/28c9a01a0333956609a59b73decb9e653821c331/646f632f5f7374617469632f696d616765732f76696d5f63617264735f73796e7461782e706e67\" width=\"800\"></p>\n<p>Among my <a href=\"https://github.com/SirVer/ultisnips\" rel=\"nofollow\">UltiSnips</a> <strong>snippets</strong> I have one that generates a new\ncard with an unique ID, a title and a body.</p>\n<pre>snippet card \"Create a new card\" b\n&lt;&lt;&lt;\nid: `!p if not snip.c: snip.rv = get_uuid()`\n===\n# ${1}\n---\n${2}\n&gt;&gt;&gt;\nendsnippet\n</pre>\n<p>The <code>get_uuid</code> function is defined as:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">get_uuid</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Get an UUID string. \"\"\"</span>\n\n    <span class=\"kn\">import</span> <span class=\"nn\">uuid</span>\n    <span class=\"k\">return</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">uuid4</span><span class=\"p\">())</span>\n</pre>\n<p>I also use the <a href=\"https://github.com/iamcco/markdown-preview.nvim\" rel=\"nofollow\">Markdown Preview</a> plugin so I can see <strong>how my\ncards look like without generating the package</strong>.\nIt's not perfect for the <code>*.cards</code> format, but it's better than nothing :)</p>\n\n          </div>"}, "last_serial": 7106441, "releases": {"0.0": [{"comment_text": "", "digests": {"md5": "be9a0c0693ce84c53972f1c48c4356f3", "sha256": "c4c32124e35e6457cdd084bdd9790fe106446f8dc6e17adc9e312d1642e49515"}, "downloads": -1, "filename": "mnemocards-0.0-py3.6.egg", "has_sig": false, "md5_digest": "be9a0c0693ce84c53972f1c48c4356f3", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 62064, "upload_time": "2020-04-26T15:52:22", "upload_time_iso_8601": "2020-04-26T15:52:22.404851Z", "url": "https://files.pythonhosted.org/packages/56/9d/436465c7e77350154a2642c5ee35e9d7e74fc23a63a7c87683b43576f505/mnemocards-0.0-py3.6.egg", "yanked": false}], "0.1": [{"comment_text": "", "digests": {"md5": "bd7f178033932a35fcc221da034c128a", "sha256": "fbc08893e2edead7908e16040390cce3a42b867166ea62e89ee1ac016af32a39"}, "downloads": -1, "filename": "mnemocards-0.1.tar.gz", "has_sig": false, "md5_digest": "bd7f178033932a35fcc221da034c128a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38447, "upload_time": "2020-04-26T12:16:20", "upload_time_iso_8601": "2020-04-26T12:16:20.974928Z", "url": "https://files.pythonhosted.org/packages/46/80/f194f5d882aea32b1dd8b8d6acfb71193bfda771d94d09ac557f68e4e9bf/mnemocards-0.1.tar.gz", "yanked": true}], "0.1.1": [{"comment_text": "", "digests": {"md5": "30d6085ec5217c3048490263b2237443", "sha256": "170925d0d99660e096214cb785e1c80a5859149705ed77fb579c54ab88d7bec3"}, "downloads": -1, "filename": "mnemocards-0.1.1-py3.6.egg", "has_sig": false, "md5_digest": "30d6085ec5217c3048490263b2237443", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 69010, "upload_time": "2020-04-26T15:52:23", "upload_time_iso_8601": "2020-04-26T15:52:23.973376Z", "url": "https://files.pythonhosted.org/packages/92/9f/5df593a0e55ce6f1a7e480254ca4263ff3f8e1f9084145d5542f561ad8c3/mnemocards-0.1.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "89e16c33366c36a488aced48aa5440d0", "sha256": "9665a7c570c5cc73ef2111cb3d6853b03c1afe49109eacfd2b7be8bea3b1abf8"}, "downloads": -1, "filename": "mnemocards-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "89e16c33366c36a488aced48aa5440d0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 33496, "upload_time": "2020-04-26T12:47:31", "upload_time_iso_8601": "2020-04-26T12:47:31.177925Z", "url": "https://files.pythonhosted.org/packages/3b/10/24a1bac71191afe4c73504f0ecb069112d451461184d98d000850aea5208/mnemocards-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2471b837a07652c348d0102b6b6f2926", "sha256": "5aa75cb0a005aa4595bdc9216ca12c139ee14556d7d4a56d5a2e4aec02ed6e99"}, "downloads": -1, "filename": "mnemocards-0.1.1.tar.gz", "has_sig": false, "md5_digest": "2471b837a07652c348d0102b6b6f2926", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40449, "upload_time": "2020-04-26T12:47:32", "upload_time_iso_8601": "2020-04-26T12:47:32.234695Z", "url": "https://files.pythonhosted.org/packages/6d/f0/cbf00d8ccc84ab90a59c533f70efe56ec6322d800174423222a094dea05c/mnemocards-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "3085941e72ef58a6a3ed525322f055df", "sha256": "d760d4e48414e59e4bc335769af72c1801242b2d8e45a5fa81d65fd51e1520dc"}, "downloads": -1, "filename": "mnemocards-0.1.2-py3.6.egg", "has_sig": false, "md5_digest": "3085941e72ef58a6a3ed525322f055df", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 69000, "upload_time": "2020-04-26T15:52:25", "upload_time_iso_8601": "2020-04-26T15:52:25.733242Z", "url": "https://files.pythonhosted.org/packages/a0/0c/50e9a0af3cf0ae031ee95db711df3cd245b7e7bc4b5f2e5ea42ecddaa348/mnemocards-0.1.2-py3.6.egg", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "364c494847470a92f0687c33f0707b21", "sha256": "e769328978777441255a421eb8d20aa4a779d86d2cfa84e20bf7bdeb9de060e3"}, "downloads": -1, "filename": "mnemocards-0.1.3.tar.gz", "has_sig": false, "md5_digest": "364c494847470a92f0687c33f0707b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36134, "upload_time": "2020-04-26T19:13:12", "upload_time_iso_8601": "2020-04-26T19:13:12.250293Z", "url": "https://files.pythonhosted.org/packages/6e/70/4c975a29553846450f99d2905ee8b8a97057f2db5d943dbbfa9c433c3663/mnemocards-0.1.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "364c494847470a92f0687c33f0707b21", "sha256": "e769328978777441255a421eb8d20aa4a779d86d2cfa84e20bf7bdeb9de060e3"}, "downloads": -1, "filename": "mnemocards-0.1.3.tar.gz", "has_sig": false, "md5_digest": "364c494847470a92f0687c33f0707b21", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 36134, "upload_time": "2020-04-26T19:13:12", "upload_time_iso_8601": "2020-04-26T19:13:12.250293Z", "url": "https://files.pythonhosted.org/packages/6e/70/4c975a29553846450f99d2905ee8b8a97057f2db5d943dbbfa9c433c3663/mnemocards-0.1.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:11 2020"}