{"info": {"author": "Justin Engel", "author_email": "jtengel08@gmail.com", "bugtrack_url": null, "classifiers": ["Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3"], "description": "==========\nShell Proc\n==========\n\nInstall\n=======\n\n.. code-block:: bash\n\n    pip install shell_proc\n\n\nRun\n===\n\nRun a series of commands with results.\n\n.. code-block:: python\n\n    from shell_proc import Shell\n\n    with Shell() as sh:\n        sh('cd ..')\n        if sh.is_windows():\n            cmd = sh('dir')\n        else:\n            cmd = sh('ls')\n\n        # cmd (Command) Attributes: cmd, exit_code, stdout, stderr\n        print(cmd.stdout)\n\n\nRun a series of terminal commands.\n\n.. code-block:: python\n\n    import sys\n    from shell_proc import Shell\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr) as sh:\n        sh.run('mkdir storage')\n        sh('cd storage')  # Same as sh.run()\n        sh('echo Hello World! > hello.txt')\n\n        if sh.is_windows():\n            sh('python -m venv ./winvenv')\n            sh('call ./winvenv/Scripts/activate.bat')\n        else:\n            pwd = sh('pwd')\n            sh('cd ~')\n            sh('python3 -m venv ./lxvenv')\n            sh('source ./lxvenv/bin/activate')\n            sh('cd {}'.format(pwd.stdout))\n        sh('pip install requests')\n        sh('pip list')\n\n    table = '|{:_<20}|{:_<20}|{:_<20}|{:_<50}|'\n    print(table.format('', '', '', '').replace('|', '_'))\n    print(table.format(\"Exit Code\", \"Has Error\", \"Has Ouput\", \"Command\").replace('_', ' '))\n    print(table.format('', '', '', ''))\n    for cmd in sh.history:\n        print(table.format(cmd.exit_code, cmd.has_error(), cmd.has_output(), cmd.cmd).replace('_', ' '))\n    print(table.format('', '', '', '').replace('|', '_'))\n\n\nRun without blocking every command\n\n.. code-block:: python\n\n    import sys\n    import time\n    from shell_proc import Shell\n\n    with Shell(stdout=sys.stdout, stderr=sys.stderr, blocking=False, wait_on_exit=True) as sh:\n        sh.run('mkdir storage')\n        sh('cd storage')  # Same as sh.run()\n        sh('echo Hello World! > hello.txt')\n\n        if sh.is_windows():\n            sh('python -m venv ./winvenv')\n            sh('call ./winvenv/Scripts/activate.bat')\n        else:\n            pwd = sh('pwd')\n            sh('cd ~')\n            sh('python3 -m venv ./lxvenv')\n            sh('source ./lxvenv/bin/activate')\n            sh('cd {}'.format(pwd.stdout))\n        sh('pip install requests')\n        sh('pip list')\n        print('---------- At exit (shows non-blocking until exit) ----------')\n\n    time.sleep(1)\n    print('1 Second has passed', 'Running:', sh.current_command)\n    time.sleep(1)\n    print('2 Seconds have passed', 'Running:', sh.current_command)\n    time.sleep(1)\n    print('3 Seconds have passed', 'Running:', sh.current_command)\n\n    sh.wait()  # Wait for all commands to finish\n\n\nManually call commands and check results.\n\n.. code-block:: python\n\n    import io\n    import sys\n    from shell_proc import Shell\n\n    # Initialize and run tasks\n    sh = Shell('mkdir storage',\n               'cd storage',\n               'echo Hello World! > hello.txt',\n               stderr=io.StringIO())\n\n    # Manually run tasks\n    if sh.is_windows():\n        sh('python -m venv ./winvenv')\n        sh('call ./winvenv/Scripts/activate.bat')\n    else:\n        pwd = sh('pwd')\n        sh('cd ~')\n        sh('python3 -m venv ./lxvenv')\n        sh('source ./lxvenv/bin/activate')\n        sh('cd {}'.format(pwd.stdout))\n\n    # Not exactly success. If True no output was printed to stderr. Stderr could also be warning like need to update pip\n    results = sh.run('pip install requests')\n    print(\"***** Successful install: \", results.exit_code == 0)\n    if results.exit_code != 0:\n        sh.stderr.seek(0)  # Move to start of io.StringIO()\n        err = sh.stderr.read()  # All text collected into stderr from subprocess stderr\n        print(err, file=sys.stderr)\n        # sh.print_stderr()  # Also available\n\n    sh.stdout = io.StringIO()  # Start saving output for new tasks\n    results = sh('pip list')\n    print('***** Output Printed\\n', results.stdout)\n\n    sh('pip -V')\n    print('pip -V =>', sh.last_command.stdout)\n\n    print('All collected stdout')\n    sh.stdout.seek(0)  # Move to start of io.StringIO()\n    print(sh.stdout.read(), end='', flush=True)  # Print all read data\n\n    # Should close when finished to stop threads from reading stdout and stderr subprocess.PIPE\n    # (will close automatically eventually)\n    sh.close()\n\nio.StringIO() Help\n==================\n\nBelow are several functions to read data from stdout and io.StringIO()\n\n.. code-block:: python\n\n    def read_io(fp):\n        \"\"\"Return all of the human readable text from the io object.\"\"\"\n        try:\n            if fp.seekable():\n                fp.seek(0)\n            out = fp.read()\n            if not isinstance(out, str):\n                out = out.decode('utf-8')\n            return out\n        except:\n            return ''\n\n    def clear_io(fp):\n        \"\"\"Try to clear the stdout\"\"\"\n        text = read_io(fp)\n        try:\n            fp.truncate(0)\n        except:\n            pass\n        return text\n\n    def print_io(fp, end='\\n', file=None, flush=True):\n        \"\"\"Print and clear the collected io.\"\"\"\n        if file is None:\n            file = sys.stdout\n        print(clear_io(fp), file=file, flush=True)", "description_content_type": "", "docs_url": null, "download_url": "https://github.com/justengel/shell_proc/archive/v1.1.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/justengel/shell_proc", "keywords": "shell bash subprocess sh", "license": "Proprietary", "maintainer": "", "maintainer_email": "", "name": "shell-proc", "package_url": "https://pypi.org/project/shell-proc/", "platform": "any", "project_url": "https://pypi.org/project/shell-proc/", "project_urls": {"Download": "https://github.com/justengel/shell_proc/archive/v1.1.1.tar.gz", "Homepage": "https://github.com/justengel/shell_proc"}, "release_url": "https://pypi.org/project/shell-proc/1.1.1/", "requires_dist": null, "requires_python": "", "summary": "Continuous shell process", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"install\">\n<h2>Install</h2>\n<pre>pip install shell_proc\n</pre>\n</div>\n<div id=\"run\">\n<h2>Run</h2>\n<p>Run a series of commands with results.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">shell_proc</span> <span class=\"kn\">import</span> <span class=\"n\">Shell</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Shell</span><span class=\"p\">()</span> <span class=\"k\">as</span> <span class=\"n\">sh</span><span class=\"p\">:</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd ..'</span><span class=\"p\">)</span>\n    <span class=\"k\">if</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">is_windows</span><span class=\"p\">():</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'dir'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'ls'</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># cmd (Command) Attributes: cmd, exit_code, stdout, stderr</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n</pre>\n<p>Run a series of terminal commands.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shell_proc</span> <span class=\"kn\">import</span> <span class=\"n\">Shell</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sh</span><span class=\"p\">:</span>\n    <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'mkdir storage'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd storage'</span><span class=\"p\">)</span>  <span class=\"c1\"># Same as sh.run()</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'echo Hello World! &gt; hello.txt'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">is_windows</span><span class=\"p\">():</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python -m venv ./winvenv'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'call ./winvenv/Scripts/activate.bat'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pwd'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd ~'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python3 -m venv ./lxvenv'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'source ./lxvenv/bin/activate'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip install requests'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip list'</span><span class=\"p\">)</span>\n\n<span class=\"n\">table</span> <span class=\"o\">=</span> <span class=\"s1\">'|</span><span class=\"si\">{:_&lt;20}</span><span class=\"s1\">|</span><span class=\"si\">{:_&lt;20}</span><span class=\"s1\">|</span><span class=\"si\">{:_&lt;20}</span><span class=\"s1\">|</span><span class=\"si\">{:_&lt;50}</span><span class=\"s1\">|'</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'|'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s2\">\"Exit Code\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Has Error\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Has Ouput\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Command\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">))</span>\n<span class=\"k\">for</span> <span class=\"n\">cmd</span> <span class=\"ow\">in</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">history</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">exit_code</span><span class=\"p\">,</span> <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">has_error</span><span class=\"p\">(),</span> <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">has_output</span><span class=\"p\">(),</span> <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">cmd</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'_'</span><span class=\"p\">,</span> <span class=\"s1\">' '</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">table</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"s1\">''</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">replace</span><span class=\"p\">(</span><span class=\"s1\">'|'</span><span class=\"p\">,</span> <span class=\"s1\">'_'</span><span class=\"p\">))</span>\n</pre>\n<p>Run without blocking every command</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shell_proc</span> <span class=\"kn\">import</span> <span class=\"n\">Shell</span>\n\n<span class=\"k\">with</span> <span class=\"n\">Shell</span><span class=\"p\">(</span><span class=\"n\">stdout</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">,</span> <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">,</span> <span class=\"n\">blocking</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">wait_on_exit</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">sh</span><span class=\"p\">:</span>\n    <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'mkdir storage'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd storage'</span><span class=\"p\">)</span>  <span class=\"c1\"># Same as sh.run()</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'echo Hello World! &gt; hello.txt'</span><span class=\"p\">)</span>\n\n    <span class=\"k\">if</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">is_windows</span><span class=\"p\">():</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python -m venv ./winvenv'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'call ./winvenv/Scripts/activate.bat'</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pwd'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd ~'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python3 -m venv ./lxvenv'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'source ./lxvenv/bin/activate'</span><span class=\"p\">)</span>\n        <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip install requests'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip list'</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'---------- At exit (shows non-blocking until exit) ----------'</span><span class=\"p\">)</span>\n\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'1 Second has passed'</span><span class=\"p\">,</span> <span class=\"s1\">'Running:'</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">current_command</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'2 Seconds have passed'</span><span class=\"p\">,</span> <span class=\"s1\">'Running:'</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">current_command</span><span class=\"p\">)</span>\n<span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'3 Seconds have passed'</span><span class=\"p\">,</span> <span class=\"s1\">'Running:'</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">current_command</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">wait</span><span class=\"p\">()</span>  <span class=\"c1\"># Wait for all commands to finish</span>\n</pre>\n<p>Manually call commands and check results.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">io</span>\n<span class=\"kn\">import</span> <span class=\"nn\">sys</span>\n<span class=\"kn\">from</span> <span class=\"nn\">shell_proc</span> <span class=\"kn\">import</span> <span class=\"n\">Shell</span>\n\n<span class=\"c1\"># Initialize and run tasks</span>\n<span class=\"n\">sh</span> <span class=\"o\">=</span> <span class=\"n\">Shell</span><span class=\"p\">(</span><span class=\"s1\">'mkdir storage'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'cd storage'</span><span class=\"p\">,</span>\n           <span class=\"s1\">'echo Hello World! &gt; hello.txt'</span><span class=\"p\">,</span>\n           <span class=\"n\">stderr</span><span class=\"o\">=</span><span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># Manually run tasks</span>\n<span class=\"k\">if</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">is_windows</span><span class=\"p\">():</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python -m venv ./winvenv'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'call ./winvenv/Scripts/activate.bat'</span><span class=\"p\">)</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">pwd</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pwd'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd ~'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'python3 -m venv ./lxvenv'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'source ./lxvenv/bin/activate'</span><span class=\"p\">)</span>\n    <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'cd </span><span class=\"si\">{}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">pwd</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Not exactly success. If True no output was printed to stderr. Stderr could also be warning like need to update pip</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"s1\">'pip install requests'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"***** Successful install: \"</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">exit_code</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">)</span>\n<span class=\"k\">if</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">exit_code</span> <span class=\"o\">!=</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n    <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># Move to start of io.StringIO()</span>\n    <span class=\"n\">err</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>  <span class=\"c1\"># All text collected into stderr from subprocess stderr</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">err</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stderr</span><span class=\"p\">)</span>\n    <span class=\"c1\"># sh.print_stderr()  # Also available</span>\n\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">stdout</span> <span class=\"o\">=</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">StringIO</span><span class=\"p\">()</span>  <span class=\"c1\"># Start saving output for new tasks</span>\n<span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip list'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'***** Output Printed</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">results</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n\n<span class=\"n\">sh</span><span class=\"p\">(</span><span class=\"s1\">'pip -V'</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'pip -V =&gt;'</span><span class=\"p\">,</span> <span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">last_command</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s1\">'All collected stdout'</span><span class=\"p\">)</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>  <span class=\"c1\"># Move to start of io.StringIO()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">stdout</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">(),</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">''</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>  <span class=\"c1\"># Print all read data</span>\n\n<span class=\"c1\"># Should close when finished to stop threads from reading stdout and stderr subprocess.PIPE</span>\n<span class=\"c1\"># (will close automatically eventually)</span>\n<span class=\"n\">sh</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"io-stringio-help\">\n<h2>io.StringIO() Help</h2>\n<p>Below are several functions to read data from stdout and io.StringIO()</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">read_io</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Return all of the human readable text from the io object.\"\"\"</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"k\">if</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">seekable</span><span class=\"p\">():</span>\n            <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">seek</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">read</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">out</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>\n            <span class=\"n\">out</span> <span class=\"o\">=</span> <span class=\"n\">out</span><span class=\"o\">.</span><span class=\"n\">decode</span><span class=\"p\">(</span><span class=\"s1\">'utf-8'</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"n\">out</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"s1\">''</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">clear_io</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Try to clear the stdout\"\"\"</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">read_io</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">)</span>\n    <span class=\"k\">try</span><span class=\"p\">:</span>\n        <span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">truncate</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"k\">except</span><span class=\"p\">:</span>\n        <span class=\"k\">pass</span>\n    <span class=\"k\">return</span> <span class=\"n\">text</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">print_io</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">,</span> <span class=\"n\">end</span><span class=\"o\">=</span><span class=\"s1\">'</span><span class=\"se\">\\n</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Print and clear the collected io.\"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"n\">file</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"n\">file</span> <span class=\"o\">=</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">stdout</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clear_io</span><span class=\"p\">(</span><span class=\"n\">fp</span><span class=\"p\">),</span> <span class=\"n\">file</span><span class=\"o\">=</span><span class=\"n\">file</span><span class=\"p\">,</span> <span class=\"n\">flush</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 6528004, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "a8f8ac10cf50ce66e07ddc10bdcf181c", "sha256": "4f14a5bcde6511a57091bcbbfac224145e730aa892419369b3b9c4974d2dd3cd"}, "downloads": -1, "filename": "shell_proc-1.0.0.tar.gz", "has_sig": false, "md5_digest": "a8f8ac10cf50ce66e07ddc10bdcf181c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6362, "upload_time": "2019-12-12T19:57:32", "upload_time_iso_8601": "2019-12-12T19:57:32.932018Z", "url": "https://files.pythonhosted.org/packages/10/fc/d5f47d0ec31d435b5bc903d926432f13f49c544c78809f37ce0ee1ad6262/shell_proc-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "b4f06a714e00cc1893b18f762948dd66", "sha256": "5eff1c20f0473d3dbc2af97203d2bb3362b36366cd77249f0d396c02ed2182a8"}, "downloads": -1, "filename": "shell_proc-1.0.1.tar.gz", "has_sig": false, "md5_digest": "b4f06a714e00cc1893b18f762948dd66", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6513, "upload_time": "2020-01-17T17:57:26", "upload_time_iso_8601": "2020-01-17T17:57:26.400411Z", "url": "https://files.pythonhosted.org/packages/47/15/ce1bd88f4ec77b93a67fe3d95792a311392e5ccaac54de6ba438c534ebb8/shell_proc-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "c427974ccc03508924c8ad0c5f794537", "sha256": "395fb10d7a5cc340e7d5f284ebedfb378ff34d0582e9ff90848e2e446621bc88"}, "downloads": -1, "filename": "shell_proc-1.0.2.tar.gz", "has_sig": false, "md5_digest": "c427974ccc03508924c8ad0c5f794537", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6967, "upload_time": "2020-01-17T18:08:54", "upload_time_iso_8601": "2020-01-17T18:08:54.992370Z", "url": "https://files.pythonhosted.org/packages/fc/b4/491e96c1f53e12713ac37a92dffca67f991555c3f51e648c3fa4630236d7/shell_proc-1.0.2.tar.gz", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "4da6feb23da1412b92005812f2eddfd5", "sha256": "367ee29cfaac2c5b39937ca4e58cc43e5bf9877a97b4ed047e2618daf2fb7909"}, "downloads": -1, "filename": "shell_proc-1.1.0.tar.gz", "has_sig": false, "md5_digest": "4da6feb23da1412b92005812f2eddfd5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8937, "upload_time": "2020-01-22T03:02:27", "upload_time_iso_8601": "2020-01-22T03:02:27.673733Z", "url": "https://files.pythonhosted.org/packages/29/3e/33d40b480b954758fd6067f92f1b0fd27869052d83f419712410792a1b8a/shell_proc-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "83735a5e332e6d0020a5d053c6b18795", "sha256": "4323bc2edc8583d5d38a816ae31bb30dd378d6d466f84b1a8ddd176591e62c0a"}, "downloads": -1, "filename": "shell_proc-1.1.1.tar.gz", "has_sig": false, "md5_digest": "83735a5e332e6d0020a5d053c6b18795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9413, "upload_time": "2020-01-27T18:54:49", "upload_time_iso_8601": "2020-01-27T18:54:49.859986Z", "url": "https://files.pythonhosted.org/packages/a2/89/3d8698bc5b659377d9bf18904d7e3bdab185d339a3ba8b7f349d8b1d261f/shell_proc-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83735a5e332e6d0020a5d053c6b18795", "sha256": "4323bc2edc8583d5d38a816ae31bb30dd378d6d466f84b1a8ddd176591e62c0a"}, "downloads": -1, "filename": "shell_proc-1.1.1.tar.gz", "has_sig": false, "md5_digest": "83735a5e332e6d0020a5d053c6b18795", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9413, "upload_time": "2020-01-27T18:54:49", "upload_time_iso_8601": "2020-01-27T18:54:49.859986Z", "url": "https://files.pythonhosted.org/packages/a2/89/3d8698bc5b659377d9bf18904d7e3bdab185d339a3ba8b7f349d8b1d261f/shell_proc-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:19 2020"}