{"info": {"author": "Schicksal", "author_email": "mhaisham79@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6"], "description": "# Xmem\n\nSimple to use, extensible key-based storage module.\n\nBuilt around python dictionary.\n\n## How to install\n\n```bash\npip install xmem\n```\n\n## Sample\n\n```python\n\nfrom xmem import MemoryEngine\n\n# for json based storage\nfrom xmem.templates import JsonTemplate\n\n# or for pickle based storage\nfrom xmem.templates import PickleTemplate\n\n# instantiate memory using save :location and :template instance\n# location may be str, or pathlib.Path object\nmemory = MemoryEngine('data', JsonTemplate())\n\n# optional: register save to python script exit event\nmemory.save_atexit()\n\n```\n\n## [C](#create-update)[R](#read)[U](#create-update)[D](#delete)\n\n### Create, Update\n\nCreate and update is handled using same functions.\n\n`put`, `putall`\n\nIf key doesnt exist it would be created, else the value updated.\n\n```python\n# add or update memory using :put\n# method :put may be chained\nmemory\\\n    .put('One', 1)\\\n    .put('Two', 2)\n\n# or by using :putall\nmemory.putall({\n    'three': 3,\n    'Four': 4\n})\n```\n\n### Read\n\n```python\n# read from memory using :get\ntwo = memory.get('Two')\n\n# output: 2\n```\n\n### Delete\n\n```python\n# delete keys using :delete\nmemory.delete('Two', 'Four')\n\n# or clear the whole memory using :clear\nmemory.clear()\n```\n\nMethod :delete takes one or more keys as parameters\n\n## Create a template\n\nA template has two methods that need to be overwridden\n\n```python\ndef save(self, data: dict):\n    ...\n```\n\n```python\ndef load(self) -> dict:\n    ...\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/mHaisham/xmem", "keywords": "memory storage json pickle extensible light", "license": "MIT license", "maintainer": "", "maintainer_email": "", "name": "xmem", "package_url": "https://pypi.org/project/xmem/", "platform": "", "project_url": "https://pypi.org/project/xmem/", "project_urls": {"Homepage": "https://github.com/mHaisham/xmem"}, "release_url": "https://pypi.org/project/xmem/0.1.0/", "requires_dist": null, "requires_python": ">=3.6", "summary": "A simple, light, easy-to-use, and extensible memory module", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Xmem</h1>\n<p>Simple to use, extensible key-based storage module.</p>\n<p>Built around python dictionary.</p>\n<h2>How to install</h2>\n<pre>pip install xmem\n</pre>\n<h2>Sample</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xmem</span> <span class=\"kn\">import</span> <span class=\"n\">MemoryEngine</span>\n\n<span class=\"c1\"># for json based storage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xmem.templates</span> <span class=\"kn\">import</span> <span class=\"n\">JsonTemplate</span>\n\n<span class=\"c1\"># or for pickle based storage</span>\n<span class=\"kn\">from</span> <span class=\"nn\">xmem.templates</span> <span class=\"kn\">import</span> <span class=\"n\">PickleTemplate</span>\n\n<span class=\"c1\"># instantiate memory using save :location and :template instance</span>\n<span class=\"c1\"># location may be str, or pathlib.Path object</span>\n<span class=\"n\">memory</span> <span class=\"o\">=</span> <span class=\"n\">MemoryEngine</span><span class=\"p\">(</span><span class=\"s1\">'data'</span><span class=\"p\">,</span> <span class=\"n\">JsonTemplate</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># optional: register save to python script exit event</span>\n<span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">save_atexit</span><span class=\"p\">()</span>\n</pre>\n<h2><a href=\"#create-update\" rel=\"nofollow\">C</a><a href=\"#read\" rel=\"nofollow\">R</a><a href=\"#create-update\" rel=\"nofollow\">U</a><a href=\"#delete\" rel=\"nofollow\">D</a></h2>\n<h3>Create, Update</h3>\n<p>Create and update is handled using same functions.</p>\n<p><code>put</code>, <code>putall</code></p>\n<p>If key doesnt exist it would be created, else the value updated.</p>\n<pre><span class=\"c1\"># add or update memory using :put</span>\n<span class=\"c1\"># method :put may be chained</span>\n<span class=\"n\">memory</span>\\\n    <span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'One'</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\\\n    <span class=\"o\">.</span><span class=\"n\">put</span><span class=\"p\">(</span><span class=\"s1\">'Two'</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or by using :putall</span>\n<span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">putall</span><span class=\"p\">({</span>\n    <span class=\"s1\">'three'</span><span class=\"p\">:</span> <span class=\"mi\">3</span><span class=\"p\">,</span>\n    <span class=\"s1\">'Four'</span><span class=\"p\">:</span> <span class=\"mi\">4</span>\n<span class=\"p\">})</span>\n</pre>\n<h3>Read</h3>\n<pre><span class=\"c1\"># read from memory using :get</span>\n<span class=\"n\">two</span> <span class=\"o\">=</span> <span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'Two'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># output: 2</span>\n</pre>\n<h3>Delete</h3>\n<pre><span class=\"c1\"># delete keys using :delete</span>\n<span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"s1\">'Two'</span><span class=\"p\">,</span> <span class=\"s1\">'Four'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># or clear the whole memory using :clear</span>\n<span class=\"n\">memory</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n</pre>\n<p>Method :delete takes one or more keys as parameters</p>\n<h2>Create a template</h2>\n<p>A template has two methods that need to be overwridden</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">save</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">load</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span> <span class=\"o\">-&gt;</span> <span class=\"nb\">dict</span><span class=\"p\">:</span>\n    <span class=\"o\">...</span>\n</pre>\n\n          </div>"}, "last_serial": 7163773, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "39ae7c8c1aac280aa1ba8eb182e76e11", "sha256": "2412d720bb9015bb1ddafd070a67c4eab26dd738b14d3c52c910fdf91044e433"}, "downloads": -1, "filename": "xmem-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39ae7c8c1aac280aa1ba8eb182e76e11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5413, "upload_time": "2020-05-04T11:58:19", "upload_time_iso_8601": "2020-05-04T11:58:19.036232Z", "url": "https://files.pythonhosted.org/packages/1a/c8/d8fa0773482c375901393bccda8095ca732a53f2cfe32d8d0260f2819f70/xmem-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "39ae7c8c1aac280aa1ba8eb182e76e11", "sha256": "2412d720bb9015bb1ddafd070a67c4eab26dd738b14d3c52c910fdf91044e433"}, "downloads": -1, "filename": "xmem-0.1.0.tar.gz", "has_sig": false, "md5_digest": "39ae7c8c1aac280aa1ba8eb182e76e11", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5413, "upload_time": "2020-05-04T11:58:19", "upload_time_iso_8601": "2020-05-04T11:58:19.036232Z", "url": "https://files.pythonhosted.org/packages/1a/c8/d8fa0773482c375901393bccda8095ca732a53f2cfe32d8d0260f2819f70/xmem-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:25:10 2020"}