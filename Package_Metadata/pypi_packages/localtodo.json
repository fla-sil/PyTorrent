{"info": {"author": "Michael Elsd\u00f6rfer", "author_email": "michael@elsdoerfer.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "localtodo\n=========\n\n.gitignore local todo files, but sync them through Dropbox.\n\n\nWhat this is\n------------\n\nI like to use a ``LOCAL_TODO`` file for each of my projects as a\nwhiteboard for ideas, notes on what is currently being worked on\n(useful when coming back to a project after some time), and things\nin that vein.\n\nBecause these files are not under version control, I use Dropbox to\nsync them across machines (this also serves as a backup).\n\nWhat this script does is place such a file in a shared folder (for\nexample, managed by Dropbox), and then links this file into the\ncurrent directory.\n\n\nHow to use\n----------\n\nInstall via:\n\n    $ easy_install localtodo\n\nAdd the following line to your ``.gitignore`` file (or something\nequivalent for the respective ignore mechanism of your version\ncontrol system)::\n\n    /LOCAL_TODO*\n\nThe trailing wildcard will allows for multiple todo files, something\nthis script supports.\n\nIn your project directory, run::\n\n    $ localtodo --to ~/Dropbox/todofiles\n    Creating new empty file ~/Dropbox/todofiles/myproject\n\n    I have established the following links for you:\n        ./LOCAL_TODO --> ~/Dropbox/todofiles/myproject\n\n.. note::\n\n    The ``--to`` argument is only required the first time and is\n    cached in ``~/.localtodo``.\n\nAs you can see, this created a new file in your chosen folder, and\ncreated a link to it in the current directory.\n\nBy default, the name of the todo file will be inferred from the\nbasename of the current directory. You can also specify a custom name::\n\n    $ localtodo foo\n    Creating new empty file ~/Dropbox/todofiles/foo\n\n    I have established the following links for you:\n        ./LOCAL_TODO --> ~/Dropbox/todofiles/foo\n\nIf the todo file already exists, it will not be overridden. If\na LOCAL_TODO file already exists in the current directory, it will\nbe used and copied. So when you start working on your project on a\ndifferent machine, you again run the script::\n\n    $ localtodo\n    Found existing file ~/Dropbox/todofiles/foo\n\n    I have established the following links for you:\n        ./LOCAL_TODO --> ~/Dropbox/todofiles/foo\n\nMultiple todo files for one project\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nIt's possible to create **sub-todos**::\n\n    $ localtodo -s docs\n    Creating new empty file ~/Dropbox/todos/myproject.docs\n\n    I have established the following links for you:\n        ./LOCAL_TODO.docs --> ~/Dropbox/todos/myproject.docs\n\n\nWhen running ``localtodo``, it will find all the todo files related\nto the current project, and link all of them into the current\ndirectory.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/miracle2k/localtodo", "keywords": null, "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "localtodo", "package_url": "https://pypi.org/project/localtodo/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/localtodo/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/miracle2k/localtodo"}, "release_url": "https://pypi.org/project/localtodo/1.0/", "requires_dist": null, "requires_python": null, "summary": ".gitignore local todo files, but sync them through Dropbox.", "version": "1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>.gitignore local todo files, but sync them through Dropbox.</p>\n<div id=\"what-this-is\">\n<h2>What this is</h2>\n<p>I like to use a <tt>LOCAL_TODO</tt> file for each of my projects as a\nwhiteboard for ideas, notes on what is currently being worked on\n(useful when coming back to a project after some time), and things\nin that vein.</p>\n<p>Because these files are not under version control, I use Dropbox to\nsync them across machines (this also serves as a backup).</p>\n<p>What this script does is place such a file in a shared folder (for\nexample, managed by Dropbox), and then links this file into the\ncurrent directory.</p>\n</div>\n<div id=\"how-to-use\">\n<h2>How to use</h2>\n<p>Install via:</p>\n<blockquote>\n$ easy_install localtodo</blockquote>\n<p>Add the following line to your <tt>.gitignore</tt> file (or something\nequivalent for the respective ignore mechanism of your version\ncontrol system):</p>\n<pre>/LOCAL_TODO*\n</pre>\n<p>The trailing wildcard will allows for multiple todo files, something\nthis script supports.</p>\n<p>In your project directory, run:</p>\n<pre>$ localtodo --to ~/Dropbox/todofiles\nCreating new empty file ~/Dropbox/todofiles/myproject\n\nI have established the following links for you:\n    ./LOCAL_TODO --&gt; ~/Dropbox/todofiles/myproject\n</pre>\n<div>\n<p>Note</p>\n<p>The <tt><span class=\"pre\">--to</span></tt> argument is only required the first time and is\ncached in <tt><span class=\"pre\">~/.localtodo</span></tt>.</p>\n</div>\n<p>As you can see, this created a new file in your chosen folder, and\ncreated a link to it in the current directory.</p>\n<p>By default, the name of the todo file will be inferred from the\nbasename of the current directory. You can also specify a custom name:</p>\n<pre>$ localtodo foo\nCreating new empty file ~/Dropbox/todofiles/foo\n\nI have established the following links for you:\n    ./LOCAL_TODO --&gt; ~/Dropbox/todofiles/foo\n</pre>\n<p>If the todo file already exists, it will not be overridden. If\na LOCAL_TODO file already exists in the current directory, it will\nbe used and copied. So when you start working on your project on a\ndifferent machine, you again run the script:</p>\n<pre>$ localtodo\nFound existing file ~/Dropbox/todofiles/foo\n\nI have established the following links for you:\n    ./LOCAL_TODO --&gt; ~/Dropbox/todofiles/foo\n</pre>\n<div id=\"multiple-todo-files-for-one-project\">\n<h3>Multiple todo files for one project</h3>\n<p>It\u2019s possible to create <strong>sub-todos</strong>:</p>\n<pre>$ localtodo -s docs\nCreating new empty file ~/Dropbox/todos/myproject.docs\n\nI have established the following links for you:\n    ./LOCAL_TODO.docs --&gt; ~/Dropbox/todos/myproject.docs\n</pre>\n<p>When running <tt>localtodo</tt>, it will find all the todo files related\nto the current project, and link all of them into the current\ndirectory.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 794293, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "5876f087f2c7a002ec773d32b0f2b628", "sha256": "dfe509155cba1141412b32ad2a830a30014fb8ad37fbf3823a87bf8406870c08"}, "downloads": -1, "filename": "localtodo-1.0.tar.gz", "has_sig": false, "md5_digest": "5876f087f2c7a002ec773d32b0f2b628", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2012-07-27T10:02:54", "upload_time_iso_8601": "2012-07-27T10:02:54.369798Z", "url": "https://files.pythonhosted.org/packages/83/4d/1eb852c362242b98860278293e439687963b46d93b05fb7a091e9619932b/localtodo-1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "5876f087f2c7a002ec773d32b0f2b628", "sha256": "dfe509155cba1141412b32ad2a830a30014fb8ad37fbf3823a87bf8406870c08"}, "downloads": -1, "filename": "localtodo-1.0.tar.gz", "has_sig": false, "md5_digest": "5876f087f2c7a002ec773d32b0f2b628", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4705, "upload_time": "2012-07-27T10:02:54", "upload_time_iso_8601": "2012-07-27T10:02:54.369798Z", "url": "https://files.pythonhosted.org/packages/83/4d/1eb852c362242b98860278293e439687963b46d93b05fb7a091e9619932b/localtodo-1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:36 2020"}