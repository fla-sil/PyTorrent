{"info": {"author": "Hadware", "author_email": "hadwarez@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Multimedia :: Sound/Audio :: Sound Synthesis", "Topic :: Multimedia :: Sound/Audio :: Speech", "Topic :: Text Processing :: Linguistic"], "description": "# Voxpopuli\n[![PyPI](https://img.shields.io/pypi/v/voxpopuli.svg)](https://pypi.python.org/pypi/voxpopuli)\n[![PyPI](https://img.shields.io/pypi/pyversions/voxpopuli.svg)](http://py3readiness.org/)\n[![Build Status](https://travis-ci.org/hadware/voxpopuli.svg?branch=master)](https://travis-ci.org/hadware/voxpopuli)\n[![Documentation Status](https://readthedocs.org/projects/voxpopuli/badge/?version=latest)](http://voxpopuli.readthedocs.io/en/latest/?badge=latest)\n[![license](https://img.shields.io/github/license/mashape/apistatus.svg)](LICENSE)\n\n\n**A wrapper around Espeak and Mbrola.**\n\nThis is a lightweight Python wrapper for Espeak and Mbrola, two co-dependent TTS tools. It enables you to \nrender sound by simply feeding it text and voice parameters. Phonems (the data transmitted by Espeak to\nmbrola) can also be manipulated using a mimalistic API.\n\nThis is a short introduction, but you might want to look at the [readthedoc documentation](http://voxpopuli.readthedocs.io/en/latest/).\n\n## Install\n\n### Linux (Ubuntu)\nInstall with pip as:\n```sh\npip install voxpopuli\n```\n\nYou have to have espeak and mbrola installed beforehand:\n```sh\nsudo apt install mbrola espeak\n```\n\nYou'll also need some mbrola voices installed, which you can either get on their project page, \nand then uppack in `/usr/share/mbrola/<lang><voiceid>/` or more simply by \ninstalling them from the ubuntu repo's. All the voices' packages are of the form\n`mbrola-<lang><voiceid>`. You can even more simply install all the voices available\nby running:\n```sh\nsudo apt install mbrola-*\n```\n\nIn case the voices you need aren't all in the ubuntu repo's, you can use this convenient little script\nthat install voices diretcly from the Mbrola website:\n```sh\n# this installs all british english and french voices for instance\nsudo python3 -m voxpopuli.voice_install en fr\n```\n\n### Windows installation\n\n* `pip install voxpopuli`\n* Download and install espeak: http://sourceforge.net/projects/espeak/files/espeak/espeak-1.48/setup_espeak-1.48.04.exe\n* Download and install mbrola: https://tcts.fpms.ac.be/synthesis/mbrola/bin/pcwin/MbrolaTools35.exe\n* Download mbrola DOS binary: http://tcts.fpms.ac.be/synthesis/mbrola/bin/pcdos/mbr301d.zip\n* Unpack the .zip archive and put `mbrola.exe` into your mbrola folder.\n* Download voice files you need: https://tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html\n* Unpack them into a single location (the default is `%USERPROFILE%\\.mbrola`) so that each voice package is in its own folder\n* From each voice folder copy the main file (for example `fr1`) and put it in `\\espeak-data\\mbrola` folder in your epeak installation.\n\n**Important!**\n\nIf your mbrola voices folder is not in the default location, don't forget to set its location after importing `Voice` module:\n\n```python\nfrom voxpopuli import Voice\nVoice.mbrola_voices_folder = 'D:\\\\mbrola-voices\\\\'\n```\n\nRepeat the above with `Voice.espeak_binary` and `Voice.mbrola_binary` if you installed them in non-default locations.\n\n## Usage\n\n### Picking a voice and making it say things\n\nThe most simple usage of this lib is just bare TTS, using a voice and\na text. The rendered audio is returned in a .wav bytes object:\n```python\nfrom voxpopuli import Voice\nvoice = Voice(lang=\"fr\")\nwav = voice.to_audio(\"salut c'est cool\")\n```\nEvaluating `type(wav)` whould return `bytes`. You can then save the wav using the `wb` \nfile option\n\n```python\nwith open(\"salut.wav\", \"wb\") as wavfile:\n    wavfile.write(wav)\n```\nIf you wish to hear how it sounds right away, you'll have to make sure you installed pyaudio *via* pip, and then do:\n```python\nvoice.say(\"Salut c'est cool\")\n```\n\nOu can also, say, use scipy to get the pcm audio as a `ndarray`:\n\n```python\nimport scipy.io.wavfile import read, write\nfrom io import BytesIO\n\nrate, wave_array = read(BytesIO(wav))\nreversed = wave_array[::-1] # reversing the sound file\nwrite(\"tulas.wav\", rate, reversed)\n```\n\n### Getting different voices\n\nYou can set some parameters you can set on the voice, such as language or pitch\n\n```python\nfrom voxpopuli import Voice\n# really slow fice with high pitch\nvoice = Voice(lang=\"us\", pitch=99, speed=40, voice_id=2)\nvoice.say(\"I'm high on helium\")\n```\n\nThe exhaustive list of parameters is:\n\n * lang, a language code among those available (us, fr, en, es, ...) You can list\n    them using the `listvoices` method from a `Voice` instance.\n * voice_id, an integer, used to select the voice id for a language. If not specified,\n    the first voice id found for a given language is used.\n * pitch, an integer between 0 and 99 (included)\n * speed, an integer, in the words per minute. Default and regular speed\nis 160 wpm.\n * volume, float ratio applied to the output sample. Some languages have presets\n    that our best specialists tested. Otherwise, defaults to 1.\n\n### Handling the phonemic form\n\nTo render a string of text to audio, the Voice object actually chains espeak's output\nto mbrola, who then renders it to audio. Espeak only renders the text to a list of\nphonemes (such as the one in the IPA), who then are to be processed by mbrola.\nFor those who like pictures, here is a diagram of what happens when you run\n`voice.to_audio(\"Hello world\")`\n\n![phonemes](docs/source/img/phonemes.png?raw=true)\n\nphonemes are represented sequentially by a code, a duration in milliseconds, and\na list of pitch modifiers. The pitch modifiers are a list of couples, each couple\nrepresenting the percentage of the sample at which to apply the pitch modification and\nthe pitch. \n\nFunny thing is, with voxpopuli, you can \"intercept\" that phoneme list as a\nsimple object, modify it, and then pass it back to the voice to render it to\naudio. For instance, let's make a simple alteration that'll double the\nduration for each vowels in an english text.\n\n```python\nfrom voxpopuli import Voice, EnglishPhonemes\n\nvoice = Voice(lang=\"en\")\n# here's how you get the phonemes list\nphoneme_list = voice.to_phonemes(\"Now go away or I will taunt you a second time.\") \nfor phoneme in phoneme_list: #phoneme list object inherits from the list object\n    if phoneme.name in EnglishPhonemes.VOWELS:\n        phoneme.duration *= 3\n        \n# rendering and saving the sound, then saying it out loud:\nvoice.to_audio(phoneme_list, \"modified.wav\")\nvoice.say(phoneme_list)\n```\n\nNotes:\n\n * For French, Spanish, American English, British English and german, the phoneme codes\n used by espeak and mbrola are available as class attributes like in the `Englishphonemes` \n class used before.\n * More info on the phonemes can be found here: [SAMPA page](http://www.phon.ucl.ac.uk/home/sampa/)\n \n\n## What's left to do\n\n * A real sphinx documentation\n * Moar unit tests\n * Maybe some examples", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hadware/voxpopuli", "keywords": "tts speech phonemes audio", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "voxpopuli", "package_url": "https://pypi.org/project/voxpopuli/", "platform": "", "project_url": "https://pypi.org/project/voxpopuli/", "project_urls": {"Homepage": "https://github.com/hadware/voxpopuli"}, "release_url": "https://pypi.org/project/voxpopuli/0.3.6/", "requires_dist": null, "requires_python": "", "summary": "A wrapper around Espeak and Mbrola, to do simple Text-To-Speech (TTS), with the possibility to tweak the phonemic form.", "version": "0.3.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Voxpopuli</h1>\n<p><a href=\"https://pypi.python.org/pypi/voxpopuli\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ee4a9cad32086587df5107d053eca51424460ce7/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f766f78706f70756c692e737667\"></a>\n<a href=\"http://py3readiness.org/\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/66d80f86a354c9f28c56f1f3c98d9e7d3a14171c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f766f78706f70756c692e737667\"></a>\n<a href=\"https://travis-ci.org/hadware/voxpopuli\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d35ad5f1498739a8cb4482271af11be8d4c9722/68747470733a2f2f7472617669732d63692e6f72672f686164776172652f766f78706f70756c692e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"http://voxpopuli.readthedocs.io/en/latest/?badge=latest\" rel=\"nofollow\"><img alt=\"Documentation Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/86950c9989dbdd7ab3e41a734f813528ad9c6696/68747470733a2f2f72656164746865646f63732e6f72672f70726f6a656374732f766f78706f70756c692f62616467652f3f76657273696f6e3d6c6174657374\"></a>\n<a href=\"LICENSE\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/36686084675cebbeff3809cb9d8291b8e6ebd672/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6c6963656e73652f6d6173686170652f6170697374617475732e737667\"></a></p>\n<p><strong>A wrapper around Espeak and Mbrola.</strong></p>\n<p>This is a lightweight Python wrapper for Espeak and Mbrola, two co-dependent TTS tools. It enables you to\nrender sound by simply feeding it text and voice parameters. Phonems (the data transmitted by Espeak to\nmbrola) can also be manipulated using a mimalistic API.</p>\n<p>This is a short introduction, but you might want to look at the <a href=\"http://voxpopuli.readthedocs.io/en/latest/\" rel=\"nofollow\">readthedoc documentation</a>.</p>\n<h2>Install</h2>\n<h3>Linux (Ubuntu)</h3>\n<p>Install with pip as:</p>\n<pre>pip install voxpopuli\n</pre>\n<p>You have to have espeak and mbrola installed beforehand:</p>\n<pre>sudo apt install mbrola espeak\n</pre>\n<p>You'll also need some mbrola voices installed, which you can either get on their project page,\nand then uppack in <code>/usr/share/mbrola/&lt;lang&gt;&lt;voiceid&gt;/</code> or more simply by\ninstalling them from the ubuntu repo's. All the voices' packages are of the form\n<code>mbrola-&lt;lang&gt;&lt;voiceid&gt;</code>. You can even more simply install all the voices available\nby running:</p>\n<pre>sudo apt install mbrola-*\n</pre>\n<p>In case the voices you need aren't all in the ubuntu repo's, you can use this convenient little script\nthat install voices diretcly from the Mbrola website:</p>\n<pre><span class=\"c1\"># this installs all british english and french voices for instance</span>\nsudo python3 -m voxpopuli.voice_install en fr\n</pre>\n<h3>Windows installation</h3>\n<ul>\n<li><code>pip install voxpopuli</code></li>\n<li>Download and install espeak: <a href=\"http://sourceforge.net/projects/espeak/files/espeak/espeak-1.48/setup_espeak-1.48.04.exe\" rel=\"nofollow\">http://sourceforge.net/projects/espeak/files/espeak/espeak-1.48/setup_espeak-1.48.04.exe</a></li>\n<li>Download and install mbrola: <a href=\"https://tcts.fpms.ac.be/synthesis/mbrola/bin/pcwin/MbrolaTools35.exe\" rel=\"nofollow\">https://tcts.fpms.ac.be/synthesis/mbrola/bin/pcwin/MbrolaTools35.exe</a></li>\n<li>Download mbrola DOS binary: <a href=\"http://tcts.fpms.ac.be/synthesis/mbrola/bin/pcdos/mbr301d.zip\" rel=\"nofollow\">http://tcts.fpms.ac.be/synthesis/mbrola/bin/pcdos/mbr301d.zip</a></li>\n<li>Unpack the .zip archive and put <code>mbrola.exe</code> into your mbrola folder.</li>\n<li>Download voice files you need: <a href=\"https://tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html\" rel=\"nofollow\">https://tcts.fpms.ac.be/synthesis/mbrola/mbrcopybin.html</a></li>\n<li>Unpack them into a single location (the default is <code>%USERPROFILE%\\.mbrola</code>) so that each voice package is in its own folder</li>\n<li>From each voice folder copy the main file (for example <code>fr1</code>) and put it in <code>\\espeak-data\\mbrola</code> folder in your epeak installation.</li>\n</ul>\n<p><strong>Important!</strong></p>\n<p>If your mbrola voices folder is not in the default location, don't forget to set its location after importing <code>Voice</code> module:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">voxpopuli</span> <span class=\"kn\">import</span> <span class=\"n\">Voice</span>\n<span class=\"n\">Voice</span><span class=\"o\">.</span><span class=\"n\">mbrola_voices_folder</span> <span class=\"o\">=</span> <span class=\"s1\">'D:</span><span class=\"se\">\\\\</span><span class=\"s1\">mbrola-voices</span><span class=\"se\">\\\\</span><span class=\"s1\">'</span>\n</pre>\n<p>Repeat the above with <code>Voice.espeak_binary</code> and <code>Voice.mbrola_binary</code> if you installed them in non-default locations.</p>\n<h2>Usage</h2>\n<h3>Picking a voice and making it say things</h3>\n<p>The most simple usage of this lib is just bare TTS, using a voice and\na text. The rendered audio is returned in a .wav bytes object:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">voxpopuli</span> <span class=\"kn\">import</span> <span class=\"n\">Voice</span>\n<span class=\"n\">voice</span> <span class=\"o\">=</span> <span class=\"n\">Voice</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"fr\"</span><span class=\"p\">)</span>\n<span class=\"n\">wav</span> <span class=\"o\">=</span> <span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">to_audio</span><span class=\"p\">(</span><span class=\"s2\">\"salut c'est cool\"</span><span class=\"p\">)</span>\n</pre>\n<p>Evaluating <code>type(wav)</code> whould return <code>bytes</code>. You can then save the wav using the <code>wb</code>\nfile option</p>\n<pre><span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"salut.wav\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">wavfile</span><span class=\"p\">:</span>\n    <span class=\"n\">wavfile</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">wav</span><span class=\"p\">)</span>\n</pre>\n<p>If you wish to hear how it sounds right away, you'll have to make sure you installed pyaudio <em>via</em> pip, and then do:</p>\n<pre><span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"s2\">\"Salut c'est cool\"</span><span class=\"p\">)</span>\n</pre>\n<p>Ou can also, say, use scipy to get the pcm audio as a <code>ndarray</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scipy.io.wavfile</span> <span class=\"kn\">import</span> <span class=\"nn\">read</span><span class=\"o\">,</span> <span class=\"nn\">write</span>\n<span class=\"kn\">from</span> <span class=\"nn\">io</span> <span class=\"kn\">import</span> <span class=\"n\">BytesIO</span>\n\n<span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"n\">wave_array</span> <span class=\"o\">=</span> <span class=\"n\">read</span><span class=\"p\">(</span><span class=\"n\">BytesIO</span><span class=\"p\">(</span><span class=\"n\">wav</span><span class=\"p\">))</span>\n<span class=\"nb\">reversed</span> <span class=\"o\">=</span> <span class=\"n\">wave_array</span><span class=\"p\">[::</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"c1\"># reversing the sound file</span>\n<span class=\"n\">write</span><span class=\"p\">(</span><span class=\"s2\">\"tulas.wav\"</span><span class=\"p\">,</span> <span class=\"n\">rate</span><span class=\"p\">,</span> <span class=\"nb\">reversed</span><span class=\"p\">)</span>\n</pre>\n<h3>Getting different voices</h3>\n<p>You can set some parameters you can set on the voice, such as language or pitch</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">voxpopuli</span> <span class=\"kn\">import</span> <span class=\"n\">Voice</span>\n<span class=\"c1\"># really slow fice with high pitch</span>\n<span class=\"n\">voice</span> <span class=\"o\">=</span> <span class=\"n\">Voice</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"us\"</span><span class=\"p\">,</span> <span class=\"n\">pitch</span><span class=\"o\">=</span><span class=\"mi\">99</span><span class=\"p\">,</span> <span class=\"n\">speed</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">voice_id</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"s2\">\"I'm high on helium\"</span><span class=\"p\">)</span>\n</pre>\n<p>The exhaustive list of parameters is:</p>\n<ul>\n<li>lang, a language code among those available (us, fr, en, es, ...) You can list\nthem using the <code>listvoices</code> method from a <code>Voice</code> instance.</li>\n<li>voice_id, an integer, used to select the voice id for a language. If not specified,\nthe first voice id found for a given language is used.</li>\n<li>pitch, an integer between 0 and 99 (included)</li>\n<li>speed, an integer, in the words per minute. Default and regular speed\nis 160 wpm.</li>\n<li>volume, float ratio applied to the output sample. Some languages have presets\nthat our best specialists tested. Otherwise, defaults to 1.</li>\n</ul>\n<h3>Handling the phonemic form</h3>\n<p>To render a string of text to audio, the Voice object actually chains espeak's output\nto mbrola, who then renders it to audio. Espeak only renders the text to a list of\nphonemes (such as the one in the IPA), who then are to be processed by mbrola.\nFor those who like pictures, here is a diagram of what happens when you run\n<code>voice.to_audio(\"Hello world\")</code></p>\n<p><img alt=\"phonemes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/09a33d69461f4308b17dc32d2608211d32d219b3/646f63732f736f757263652f696d672f70686f6e656d65732e706e673f7261773d74727565\"></p>\n<p>phonemes are represented sequentially by a code, a duration in milliseconds, and\na list of pitch modifiers. The pitch modifiers are a list of couples, each couple\nrepresenting the percentage of the sample at which to apply the pitch modification and\nthe pitch.</p>\n<p>Funny thing is, with voxpopuli, you can \"intercept\" that phoneme list as a\nsimple object, modify it, and then pass it back to the voice to render it to\naudio. For instance, let's make a simple alteration that'll double the\nduration for each vowels in an english text.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">voxpopuli</span> <span class=\"kn\">import</span> <span class=\"n\">Voice</span><span class=\"p\">,</span> <span class=\"n\">EnglishPhonemes</span>\n\n<span class=\"n\">voice</span> <span class=\"o\">=</span> <span class=\"n\">Voice</span><span class=\"p\">(</span><span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s2\">\"en\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># here's how you get the phonemes list</span>\n<span class=\"n\">phoneme_list</span> <span class=\"o\">=</span> <span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">to_phonemes</span><span class=\"p\">(</span><span class=\"s2\">\"Now go away or I will taunt you a second time.\"</span><span class=\"p\">)</span> \n<span class=\"k\">for</span> <span class=\"n\">phoneme</span> <span class=\"ow\">in</span> <span class=\"n\">phoneme_list</span><span class=\"p\">:</span> <span class=\"c1\">#phoneme list object inherits from the list object</span>\n    <span class=\"k\">if</span> <span class=\"n\">phoneme</span><span class=\"o\">.</span><span class=\"n\">name</span> <span class=\"ow\">in</span> <span class=\"n\">EnglishPhonemes</span><span class=\"o\">.</span><span class=\"n\">VOWELS</span><span class=\"p\">:</span>\n        <span class=\"n\">phoneme</span><span class=\"o\">.</span><span class=\"n\">duration</span> <span class=\"o\">*=</span> <span class=\"mi\">3</span>\n        \n<span class=\"c1\"># rendering and saving the sound, then saying it out loud:</span>\n<span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">to_audio</span><span class=\"p\">(</span><span class=\"n\">phoneme_list</span><span class=\"p\">,</span> <span class=\"s2\">\"modified.wav\"</span><span class=\"p\">)</span>\n<span class=\"n\">voice</span><span class=\"o\">.</span><span class=\"n\">say</span><span class=\"p\">(</span><span class=\"n\">phoneme_list</span><span class=\"p\">)</span>\n</pre>\n<p>Notes:</p>\n<ul>\n<li>For French, Spanish, American English, British English and german, the phoneme codes\nused by espeak and mbrola are available as class attributes like in the <code>Englishphonemes</code>\nclass used before.</li>\n<li>More info on the phonemes can be found here: <a href=\"http://www.phon.ucl.ac.uk/home/sampa/\" rel=\"nofollow\">SAMPA page</a></li>\n</ul>\n<h2>What's left to do</h2>\n<ul>\n<li>A real sphinx documentation</li>\n<li>Moar unit tests</li>\n<li>Maybe some examples</li>\n</ul>\n\n          </div>"}, "last_serial": 6473826, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "80e80d61dc8bd94001b19aefe83568d4", "sha256": "1416e97c9977eb9fb90faf389b03862aa8f9239992f1963b2b182f08120f51b3"}, "downloads": -1, "filename": "voxpopuli-0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "80e80d61dc8bd94001b19aefe83568d4", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 6506, "upload_time": "2017-01-30T01:57:42", "upload_time_iso_8601": "2017-01-30T01:57:42.382649Z", "url": "https://files.pythonhosted.org/packages/30/13/aef5e381d8a4ab73038449f7a40f0a27583bd085636911e209869ed555cd/voxpopuli-0.1-py2-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "53af5544833a9ee7330a964a759c4d2e", "sha256": "e7570eceaa81d3798430502e73b7875d6fb3aacb9a5523f99f9e188d0a61b58a"}, "downloads": -1, "filename": "voxpopuli-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "53af5544833a9ee7330a964a759c4d2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6534, "upload_time": "2017-01-30T02:50:15", "upload_time_iso_8601": "2017-01-30T02:50:15.357079Z", "url": "https://files.pythonhosted.org/packages/08/f8/2fd3af019e1f35ce01f9da840deb3b1cc78042d16845710276c0791fd332/voxpopuli-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "dad83c1276d57366e71b87aa9ebe8bf8", "sha256": "6599bd63b7dbc28004e2e35a6d7bc7b88decbe7bf87a37f734ddbebb5559e7b4"}, "downloads": -1, "filename": "voxpopuli-0.1.4-py3-none-any.whl", "has_sig": false, "md5_digest": "dad83c1276d57366e71b87aa9ebe8bf8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9343, "upload_time": "2017-05-08T01:27:40", "upload_time_iso_8601": "2017-05-08T01:27:40.243021Z", "url": "https://files.pythonhosted.org/packages/a1/70/f63aac14f991da1147dc555ac9a8fee4ce76b05bdb4d744b101c367f4808/voxpopuli-0.1.4-py3-none-any.whl", "yanked": false}], "0.1.4.1": [{"comment_text": "", "digests": {"md5": "7948832ec7202639c246f3a0635f27d9", "sha256": "113dcc14a219d112f11ec427aeece250c0c99bcd5049ab27f320d6aea75536fc"}, "downloads": -1, "filename": "voxpopuli-0.1.4.1-py3-none-any.whl", "has_sig": false, "md5_digest": "7948832ec7202639c246f3a0635f27d9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9418, "upload_time": "2017-05-08T15:54:10", "upload_time_iso_8601": "2017-05-08T15:54:10.429991Z", "url": "https://files.pythonhosted.org/packages/f4/00/0f059374036c1828d891bed4b6d7c82b8214b5100e6df781679fa5e6c389/voxpopuli-0.1.4.1-py3-none-any.whl", "yanked": false}], "0.1.4.2": [{"comment_text": "", "digests": {"md5": "812726156b8dd5df0149af2a3d9417ea", "sha256": "b44b2d2a8cd4abfd5039be42fbe10f72db252cd545ec355783eb4abf08026242"}, "downloads": -1, "filename": "voxpopuli-0.1.4.2.tar.gz", "has_sig": false, "md5_digest": "812726156b8dd5df0149af2a3d9417ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9192, "upload_time": "2017-07-04T23:12:02", "upload_time_iso_8601": "2017-07-04T23:12:02.994600Z", "url": "https://files.pythonhosted.org/packages/ee/97/b7101f0f797d23ed8466fb5ff93ee7fd9764b288937978ff54d7cdcc0595/voxpopuli-0.1.4.2.tar.gz", "yanked": false}], "0.1.5.0": [{"comment_text": "", "digests": {"md5": "2536d5c26f7d69d2f9e1ae916f2a7b9c", "sha256": "89c5301da8aefe97650efcc4491ac3caf1551ce4e5c91b7540835df268c99a7c"}, "downloads": -1, "filename": "voxpopuli-0.1.5.0.tar.gz", "has_sig": false, "md5_digest": "2536d5c26f7d69d2f9e1ae916f2a7b9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11005, "upload_time": "2018-08-25T12:54:39", "upload_time_iso_8601": "2018-08-25T12:54:39.922466Z", "url": "https://files.pythonhosted.org/packages/c5/81/58576af485f1dab76bb6f7e1437a273334d47b4fad02cf591efa9d313b36/voxpopuli-0.1.5.0.tar.gz", "yanked": false}], "0.1.5.1": [{"comment_text": "", "digests": {"md5": "b19dcf844a6a398f6d2e5ec2df1f138f", "sha256": "c9b768e29a78da1c14944eecdd40d311cb74b6921f43ca4d6a3e12e8f2a582f9"}, "downloads": -1, "filename": "voxpopuli-0.1.5.1.tar.gz", "has_sig": false, "md5_digest": "b19dcf844a6a398f6d2e5ec2df1f138f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11026, "upload_time": "2018-09-10T21:07:39", "upload_time_iso_8601": "2018-09-10T21:07:39.022036Z", "url": "https://files.pythonhosted.org/packages/3b/16/11d5a5618c74e12509d6832f6de1677e5debaf9b7ded10dc7c608fc6d1f2/voxpopuli-0.1.5.1.tar.gz", "yanked": false}], "0.2.0.0": [{"comment_text": "", "digests": {"md5": "06ee2985dd834e404caacbbf2a3c2a0b", "sha256": "4f2a1fa4c0601098ade81de0c4c868eb6cfb26201d987fe5d51b289022a6236a"}, "downloads": -1, "filename": "voxpopuli-0.2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "06ee2985dd834e404caacbbf2a3c2a0b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9024, "upload_time": "2019-04-09T21:38:21", "upload_time_iso_8601": "2019-04-09T21:38:21.309785Z", "url": "https://files.pythonhosted.org/packages/03/60/145dc738dcdb773b240ba4fd9dc9a8082ca812e576f73d03abd75fb86fd8/voxpopuli-0.2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b89b4bb997c10acb540222d82fd2d94f", "sha256": "e9eac219a1a0b57463766573f1aa33fc1da379c8a2b561e020adc7500f4f5162"}, "downloads": -1, "filename": "voxpopuli-0.2.0.0.tar.gz", "has_sig": false, "md5_digest": "b89b4bb997c10acb540222d82fd2d94f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 10522, "upload_time": "2019-04-09T21:38:22", "upload_time_iso_8601": "2019-04-09T21:38:22.639054Z", "url": "https://files.pythonhosted.org/packages/fc/ba/ddaa4792c65356459446edbe1958507d3960cea1f34de2c38986c7e2a80c/voxpopuli-0.2.0.0.tar.gz", "yanked": false}], "0.3.0.0": [{"comment_text": "", "digests": {"md5": "59bf3f72e415833e59a32464148b2cc0", "sha256": "bb7dc50f708410cd221a40f1fd452d5301bfcb09df3ab7e482313826dac74a91"}, "downloads": -1, "filename": "voxpopuli-0.3.0.0.tar.gz", "has_sig": false, "md5_digest": "59bf3f72e415833e59a32464148b2cc0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11196, "upload_time": "2019-10-21T21:00:25", "upload_time_iso_8601": "2019-10-21T21:00:25.806568Z", "url": "https://files.pythonhosted.org/packages/a4/63/c5fd57cf03412a514abbf842b71c95ee769b1c2fcd224540cfa084679da0/voxpopuli-0.3.0.0.tar.gz", "yanked": false}], "0.3.1": [{"comment_text": "", "digests": {"md5": "7d1a7a6ee0236bd7c8874cf59c9a902e", "sha256": "5710a52d6fe8263f6c6e6f1e01630c15d06113bed4c2613d06645fd8527c2d65"}, "downloads": -1, "filename": "voxpopuli-0.3.1.tar.gz", "has_sig": false, "md5_digest": "7d1a7a6ee0236bd7c8874cf59c9a902e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11185, "upload_time": "2019-10-21T21:06:04", "upload_time_iso_8601": "2019-10-21T21:06:04.338871Z", "url": "https://files.pythonhosted.org/packages/ad/f6/fca9ce9758314a8ef292a56c7aad12b677ce3982773f2c84dab0a16327ae/voxpopuli-0.3.1.tar.gz", "yanked": false}], "0.3.2": [{"comment_text": "", "digests": {"md5": "1a12368c288d7e2075785c2de90ffeba", "sha256": "7d3c520dcffb6c4d1395c350a656c259eef90ad7e21dd7939bc13b54cfab926b"}, "downloads": -1, "filename": "voxpopuli-0.3.2.tar.gz", "has_sig": false, "md5_digest": "1a12368c288d7e2075785c2de90ffeba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11402, "upload_time": "2019-10-21T21:33:54", "upload_time_iso_8601": "2019-10-21T21:33:54.807311Z", "url": "https://files.pythonhosted.org/packages/2f/c4/d646b5fdc1580324790c750711da0a53ddd5584e59e8974b5a4915b0b615/voxpopuli-0.3.2.tar.gz", "yanked": false}], "0.3.3": [{"comment_text": "", "digests": {"md5": "265fbd6b1e8aa914c51b4802d75d3ef9", "sha256": "223284f2f0930f3b7d9bca86a0288fcf49801ad9ba503aa7bddfa11910fc08e9"}, "downloads": -1, "filename": "voxpopuli-0.3.3.tar.gz", "has_sig": false, "md5_digest": "265fbd6b1e8aa914c51b4802d75d3ef9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14739, "upload_time": "2019-10-21T21:42:52", "upload_time_iso_8601": "2019-10-21T21:42:52.659541Z", "url": "https://files.pythonhosted.org/packages/e4/71/7603ed744c9c6a7d6a3ff8ace50338e122d388805438bb8a1b514c327664/voxpopuli-0.3.3.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "4b69d698fac2565ec0af1f913c548f7e", "sha256": "fb72dee825eb678c2703415ef04688780889d659bc19c7e29ff6cf7ab6830039"}, "downloads": -1, "filename": "voxpopuli-0.3.5.tar.gz", "has_sig": false, "md5_digest": "4b69d698fac2565ec0af1f913c548f7e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14689, "upload_time": "2020-01-16T19:24:38", "upload_time_iso_8601": "2020-01-16T19:24:38.693573Z", "url": "https://files.pythonhosted.org/packages/b2/48/387358782ae19c9b03fe6e87877a95282fa075466c65aa57068f8efb0940/voxpopuli-0.3.5.tar.gz", "yanked": false}], "0.3.6": [{"comment_text": "", "digests": {"md5": "351ca9750d3b254a0e7914356b2def5e", "sha256": "8cc42e916746bebccda4fb468b4daedc2f366291fd387749282108560a9c3ba0"}, "downloads": -1, "filename": "voxpopuli-0.3.6.tar.gz", "has_sig": false, "md5_digest": "351ca9750d3b254a0e7914356b2def5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14673, "upload_time": "2020-01-17T15:52:18", "upload_time_iso_8601": "2020-01-17T15:52:18.124382Z", "url": "https://files.pythonhosted.org/packages/6b/00/dedecb7812630401a3904bd603c1455ace392db26579e717de7a7dd9d082/voxpopuli-0.3.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "351ca9750d3b254a0e7914356b2def5e", "sha256": "8cc42e916746bebccda4fb468b4daedc2f366291fd387749282108560a9c3ba0"}, "downloads": -1, "filename": "voxpopuli-0.3.6.tar.gz", "has_sig": false, "md5_digest": "351ca9750d3b254a0e7914356b2def5e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14673, "upload_time": "2020-01-17T15:52:18", "upload_time_iso_8601": "2020-01-17T15:52:18.124382Z", "url": "https://files.pythonhosted.org/packages/6b/00/dedecb7812630401a3904bd603c1455ace392db26579e717de7a7dd9d082/voxpopuli-0.3.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:34:16 2020"}