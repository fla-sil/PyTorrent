{"info": {"author": "Rebecca Stone", "author_email": "ysbecca@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "py-wsi\n======\n\nCurrent version\n---------------\n\n**Notice: it is strongly recommended to use py-wsi version >= 1.0.**\n\nThe current update to py_wsi has added three major improvements which\nare essential for dealing with very large datasets of .svs images:\n\n-  better memory management\n-  error handling\n-  functionality to allow for sampling test patches before sampling from\n   all images\n\nSee this blog post `py_wsi for computer analysis on whole slide .svs\nimages using OpenSlide <https://ysbecca.github.io>`__ for help on\nunderstanding the relationship between patch and tile sampling. The test\npatch sampling functionality in this version will also help users to\nknow exactly what they are sampling.\n\nFor any early users who have downloaded previous versions of py_wsi (<\n1.0) I would **strongly suggest downloading the update**. Please feel\nfree to submit any issues to the GitHub repository and I will provide\nhelp as I am able to.\n\nWhile suggestions for extra/additional functionality will not be\nimmediately considered, pull requests are welcome.\n\nIntroduction to py_wsi\n----------------------\n\npy-wsi provides a series of Python classes and functions which deal with\ndatabases of whole slide images (WSI), or Aperio .svs files for machine\nlearning, using Python OpenSlide. py-wsi provides functions to perform\npatch sampling from .svs files, generation of metadata, and several\nstore options: saving to a lightning memory-mapped database (LMDB), HDF5\nfiles, or disk.\n\nThese Python functions deal with whole slide images (WSI), or Aperio\n.svs files for deep learning, using OpenSlide. py-wsi provides functions\nto perform patch sampling from .svs files, generation of metadata, and\nseveral store options: saving to a lightning memory-mapped database\n(LMDB), HDF5 files, or disk.\n\nLim et al.\u00a0in \u201c`An analysis of image storage systems for scalable\ntraining of deep neural\nnetworks <http://www.bafst.com/events/asplos16/bpoe7/wp-content/uploads/analysis-image-storage.pdf>`__\u201d\nperform a thorough evaluation of the best image storage systems, taking\ninto consideration memory usage and access speed. LMDB, a B+tree based\nkey-value storage, is not the most memory efficient, but provides\noptimal read time.\n\npy-wsi uses OpenSlide Python. According to the `Python OpenSlide\nwebsite <http://openslide.org/api/python/>`__, \u201cOpenSlide is a C library\nthat provides a simple interface for reading whole-slide images, also\nknown as virtual slides, which are high-resolution images used in\ndigital pathology. These images can occupy tens of gigabytes when\nuncompressed, and so cannot be easily read using standard tools or\nlibraries, which are designed for images that can be comfortably\nuncompressed into RAM. Whole-slide images are typically\nmulti-resolution; OpenSlide allows reading a small amount of image data\nat the resolution closest to a desired zoom level.\u201d\n\n*Note: HDF5 functionality will not be available until version 1.2*\n\n**Check Jupyter Notebook on GitHub to view example usage:**\\ `Example\nusage of\npy-wsi <https://github.com/ysbecca/py-wsi/blob/master/Using%20py-wsi.ipynb>`__\n\nSetup\n-----\n\nThis library is dependent on the following, but may be compatible with\nprevious versions.\n\npython 3.6.1 numpy 1.12.1 openslide-python 1.1.1\n\n1. Check dependencies listed in setup.py; notably, openslide-python\n   which requires openslide, and lmdb. The python geometry package\n   Shapely is used for inferring labels from XML annotations.\n\n::\n\n    brew install openslide\n\n2. Install py_wsi using pip.\n\n::\n\n    pip install py_wsi\n\n3. Check out Jupyter Notebook \u201cUsing py-wsi\u201d to see what py-wsi can do\n   and get started!\n\n**Feel free to contact me with any issues and feedback.**", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ysbecca/py-wsi", "keywords": "whole slide images svs openslide lmdb machine learning", "license": "GNU General Public License v3.0", "maintainer": "", "maintainer_email": "", "name": "py-wsi", "package_url": "https://pypi.org/project/py-wsi/", "platform": "", "project_url": "https://pypi.org/project/py-wsi/", "project_urls": {"Homepage": "https://github.com/ysbecca/py-wsi"}, "release_url": "https://pypi.org/project/py-wsi/1.1/", "requires_dist": null, "requires_python": "", "summary": "Python package for dealing with whole slide images (.svs) for machine learning, including intuitive, painless patch sampling using OpenSlide, automatic labeling from ImageScope XML annotation files, and functions for saving these patches and their meta data into lightning memory-mapped databases (LMDB) for quick reads. ", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"current-version\">\n<h2>Current version</h2>\n<p><strong>Notice: it is strongly recommended to use py-wsi version &gt;= 1.0.</strong></p>\n<p>The current update to py_wsi has added three major improvements which\nare essential for dealing with very large datasets of .svs images:</p>\n<ul>\n<li>better memory management</li>\n<li>error handling</li>\n<li>functionality to allow for sampling test patches before sampling from\nall images</li>\n</ul>\n<p>See this blog post <a href=\"https://ysbecca.github.io\" rel=\"nofollow\">py_wsi for computer analysis on whole slide .svs\nimages using OpenSlide</a> for help on\nunderstanding the relationship between patch and tile sampling. The test\npatch sampling functionality in this version will also help users to\nknow exactly what they are sampling.</p>\n<p>For any early users who have downloaded previous versions of py_wsi (&lt;\n1.0) I would <strong>strongly suggest downloading the update</strong>. Please feel\nfree to submit any issues to the GitHub repository and I will provide\nhelp as I am able to.</p>\n<p>While suggestions for extra/additional functionality will not be\nimmediately considered, pull requests are welcome.</p>\n</div>\n<div id=\"introduction-to-py-wsi\">\n<h2>Introduction to py_wsi</h2>\n<p>py-wsi provides a series of Python classes and functions which deal with\ndatabases of whole slide images (WSI), or Aperio .svs files for machine\nlearning, using Python OpenSlide. py-wsi provides functions to perform\npatch sampling from .svs files, generation of metadata, and several\nstore options: saving to a lightning memory-mapped database (LMDB), HDF5\nfiles, or disk.</p>\n<p>These Python functions deal with whole slide images (WSI), or Aperio\n.svs files for deep learning, using OpenSlide. py-wsi provides functions\nto perform patch sampling from .svs files, generation of metadata, and\nseveral store options: saving to a lightning memory-mapped database\n(LMDB), HDF5 files, or disk.</p>\n<p>Lim et al.\u00a0in \u201c<a href=\"http://www.bafst.com/events/asplos16/bpoe7/wp-content/uploads/analysis-image-storage.pdf\" rel=\"nofollow\">An analysis of image storage systems for scalable\ntraining of deep neural\nnetworks</a>\u201d\nperform a thorough evaluation of the best image storage systems, taking\ninto consideration memory usage and access speed. LMDB, a B+tree based\nkey-value storage, is not the most memory efficient, but provides\noptimal read time.</p>\n<p>py-wsi uses OpenSlide Python. According to the <a href=\"http://openslide.org/api/python/\" rel=\"nofollow\">Python OpenSlide\nwebsite</a>, \u201cOpenSlide is a C library\nthat provides a simple interface for reading whole-slide images, also\nknown as virtual slides, which are high-resolution images used in\ndigital pathology. These images can occupy tens of gigabytes when\nuncompressed, and so cannot be easily read using standard tools or\nlibraries, which are designed for images that can be comfortably\nuncompressed into RAM. Whole-slide images are typically\nmulti-resolution; OpenSlide allows reading a small amount of image data\nat the resolution closest to a desired zoom level.\u201d</p>\n<p><em>Note: HDF5 functionality will not be available until version 1.2</em></p>\n<p><strong>Check Jupyter Notebook on GitHub to view example usage:</strong><a href=\"https://github.com/ysbecca/py-wsi/blob/master/Using%20py-wsi.ipynb\" rel=\"nofollow\">Example\nusage of\npy-wsi</a></p>\n</div>\n<div id=\"setup\">\n<h2>Setup</h2>\n<p>This library is dependent on the following, but may be compatible with\nprevious versions.</p>\n<p>python 3.6.1 numpy 1.12.1 openslide-python 1.1.1</p>\n<ol>\n<li>Check dependencies listed in setup.py; notably, openslide-python\nwhich requires openslide, and lmdb. The python geometry package\nShapely is used for inferring labels from XML annotations.</li>\n</ol>\n<pre>brew install openslide\n</pre>\n<ol>\n<li>Install py_wsi using pip.</li>\n</ol>\n<pre>pip install py_wsi\n</pre>\n<ol>\n<li>Check out Jupyter Notebook \u201cUsing py-wsi\u201d to see what py-wsi can do\nand get started!</li>\n</ol>\n<p><strong>Feel free to contact me with any issues and feedback.</strong></p>\n</div>\n\n          </div>"}, "last_serial": 3888157, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "c09777760f4b2f743102a13ae4ea285d", "sha256": "0af292c4c400ef1e62b6fd36cd7f967dfd386456b9855e0bceaa91015820ffdd"}, "downloads": -1, "filename": "py_wsi-0.1.tar.gz", "has_sig": false, "md5_digest": "c09777760f4b2f743102a13ae4ea285d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6918, "upload_time": "2018-02-28T23:05:13", "upload_time_iso_8601": "2018-02-28T23:05:13.321649Z", "url": "https://files.pythonhosted.org/packages/a0/21/842c198466d79e49182f957acf638bdb4e09c0860e33d5714b452c8e1653/py_wsi-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "5f38b061785a487fb596cbe3f35d0648", "sha256": "9a3f064e86634c594f7e7f789a5fa4bcc0fa504c8cccc9bea4474f80dc0d4eb4"}, "downloads": -1, "filename": "py_wsi-0.2.tar.gz", "has_sig": false, "md5_digest": "5f38b061785a487fb596cbe3f35d0648", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7331, "upload_time": "2018-03-01T14:47:45", "upload_time_iso_8601": "2018-03-01T14:47:45.887365Z", "url": "https://files.pythonhosted.org/packages/bf/db/c6047468e1338ecaec21a2975c1784caac5d4d62a8473d4aef8f2e5c1aa7/py_wsi-0.2.tar.gz", "yanked": false}], "0.21": [{"comment_text": "", "digests": {"md5": "46270b0e763bb71672d9f8951f9ab7d9", "sha256": "5dd249d939b2fb34bd655b441a2fafcd5a74e23773e816254fb84172b34eb18f"}, "downloads": -1, "filename": "py_wsi-0.21.tar.gz", "has_sig": false, "md5_digest": "46270b0e763bb71672d9f8951f9ab7d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8546, "upload_time": "2018-03-01T14:52:10", "upload_time_iso_8601": "2018-03-01T14:52:10.713338Z", "url": "https://files.pythonhosted.org/packages/15/d2/70508f9fd4aa01e21c89f421f4c5d3a5f533af0eed6ea6bffae92c4a9678/py_wsi-0.21.tar.gz", "yanked": false}], "1.0": [{"comment_text": "", "digests": {"md5": "71f1e030d88cce114481ab684806eb2e", "sha256": "ee100435ac706d397b3f8753fe165b750c75ce73db30feb876aac2bd301aa34a"}, "downloads": -1, "filename": "py_wsi-1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "71f1e030d88cce114481ab684806eb2e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 12074, "upload_time": "2018-05-22T15:27:08", "upload_time_iso_8601": "2018-05-22T15:27:08.649481Z", "url": "https://files.pythonhosted.org/packages/d0/dd/5fb31b27583ec7968a464c7da934ea43b2b500390e75d4316d4c39a9bb69/py_wsi-1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7dbff3d0a59cd9242fa40adc2ab6090", "sha256": "dcb98956e4b7d6905826bc372e3419cc7a76d13732438857c253c4224f8dfbb0"}, "downloads": -1, "filename": "py_wsi-1.0.tar.gz", "has_sig": false, "md5_digest": "a7dbff3d0a59cd9242fa40adc2ab6090", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12045, "upload_time": "2018-05-22T15:23:50", "upload_time_iso_8601": "2018-05-22T15:23:50.669340Z", "url": "https://files.pythonhosted.org/packages/09/f7/b572e35d52fe1a88ffa6baecde4d2431fead982cb88e3248bf4584e7ae16/py_wsi-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "4f97f6fd56719090a944b8727d2c2de7", "sha256": "d4cc4cc0e7e9d3d1f1ea09d589823be89e8d7f1844e4ba07aaf68d1f31dd4430"}, "downloads": -1, "filename": "py_wsi-1.1.tar.gz", "has_sig": false, "md5_digest": "4f97f6fd56719090a944b8727d2c2de7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12152, "upload_time": "2018-05-22T15:28:01", "upload_time_iso_8601": "2018-05-22T15:28:01.069815Z", "url": "https://files.pythonhosted.org/packages/32/f4/a4f692b8d7791df38874e678e28c60783284ca4a5fe4f083214f45e4ede2/py_wsi-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4f97f6fd56719090a944b8727d2c2de7", "sha256": "d4cc4cc0e7e9d3d1f1ea09d589823be89e8d7f1844e4ba07aaf68d1f31dd4430"}, "downloads": -1, "filename": "py_wsi-1.1.tar.gz", "has_sig": false, "md5_digest": "4f97f6fd56719090a944b8727d2c2de7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12152, "upload_time": "2018-05-22T15:28:01", "upload_time_iso_8601": "2018-05-22T15:28:01.069815Z", "url": "https://files.pythonhosted.org/packages/32/f4/a4f692b8d7791df38874e678e28c60783284ca4a5fe4f083214f45e4ede2/py_wsi-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:11:08 2020"}