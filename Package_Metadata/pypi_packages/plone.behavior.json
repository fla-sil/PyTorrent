{"info": {"author": "Martin Aspeli", "author_email": "optilude@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Framework :: Plone", "Framework :: Plone :: 4.3", "Framework :: Plone :: 5.0", "Framework :: Plone :: 5.1", "Framework :: Plone :: 5.2", "Framework :: Plone :: Core", "License :: OSI Approved :: BSD License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "==============\nplone.behavior\n==============\n\n.. contents:: Table of Contents\n   :depth: 2\n\n\nOverview\n========\n\nThis package provides support for **behaviors**.\n\n    A behavior is a re-usable aspect of an object that can be enabled or disabled without changing the component registry.\n\nA behavior is described by an interface, and has metadata such as a title and a description.\nThe behavior can be looked up by a given short name or by the dotted name of the interface.\nWith this unique name behaviors metadata can be looked up.\nWhen the behavior is enabled for an object, you will be able to adapt the object to the interface.\nIn some cases, the interface can be used as a marker interface as well.\n\nAs an example, let's say that your application needs to support object-level locking.\nThis can be modeled via an adapter, but you want to leave it until runtime to determine whether locking is enabled for a particular object.\nYou could then register locking as a behavior.\n\n**Requirements and Limitations:**\n\n* This package comes with support for registering behaviors and factories.\n\n* It does not implement the policy for determining what behaviors are enabled on a particular object at a particular time.\n  That decision is deferred to an ``IBehaviorAssignable`` adapter, which must be implemented (``plone.dexterity`` implements this).\n\n* Like the ``IBehaviorAssignable`` plumbing, marker interface support needs to be enabled on a per-application basis.\n  This package also does not directly support the adding of marker interfaces to instances.\n  To do that, you can either use an event handler to mark an object when it is created, or a dynamic __providedBy__ descriptor that does the lookup on the fly (but you probably want some caching).\n  A sample event handler is provided with this package, but is not registered by default\n\n* The intention is that behavior assignment is generic across an application, used for multiple, optional behaviors.\n  It probably doesn't make much sense to use ``plone.behavior`` for a single type of object.\n  The means to keep track of which behaviors are enabled for what types of objects will be application specific.\n\nUsage\n=====\n\nExplained\n---------\n\nA behavior is written much like an adapter, except that you don't specify the type of context being adapted directly.\nFor example::\n\n    from zope.interface import Interface\n    from zope.interface import implementer\n\n    class ILockingSupport(Interface):\n       \"\"\"Support locking\n       \"\"\"\n\n       def lock():\n           \"\"\"Lock an object\n           \"\"\"\n\n       def unlock():\n           \"\"\"Unlock an object\n           \"\"\"\n\n    @implementer(ILockingSupport)\n    class LockingSupport(object):\n\n        def __init__(self, context):\n            self.context = context\n\n        def lock(self):\n            # do something\n\n        def unlock(self):\n            # do something\n\nThis interface (which describes the type of behavior) and class (which describes the implementation of the behavior) then needs to be registered.\n\nThe simplest way to do that is to load the ``meta.zcml`` file from this package and use ZCML::\n\n    <configure\n      xmlns=\"http://namespaces.zope.org/zope\"\n      xmlns:plone=\"http://namespaces.plone.org/plone\"\n      i18n_domain=\"my.package\">\n\n      <include package=\"plone.behavior\" file=\"meta.zcml\" />\n\n      <plone:behavior\n          name=\"locking_support\"\n          title=\"Locking support\"\n          description=\"Optional object-level locking\"\n          provides=\".interfaces.ILockingSupport\"\n          factory=\".locking.LockingSupport\"\n      />\n\n    </configure>\n\nAfter this is done you can adapt a context to ``ILockingSupport`` as normal::\n\n    locking = ILockingSupport(context, None)\n\n    if locking is not None:\n        locking.lock()\n\nThe ``name`` can be used for lookup instead of the full dotted name of the interface::\n\n    from plone.behavior.interfaces import IBehavior\n    from zope.component import getUtility\n\n    registration = getUtility(IBehavior, name='locking_support')\n\nWe also have a helper function to achieve this::\n\n    from plone.behavior.registration import lookup_behavior_registration\n\n    registration = lookup_behavior_registration(name='locking_support')\n\n\nYou'll get an instance of ``LockingSupport`` if context can be adapted to ``IBehaviorAssignable`` (which, recall, is application specific),\nand if the implementation of ``IBehaviorAssignable`` says that this context supports this particular behavior.\n\nIt is also possible to let the provided interface act as a marker interface that is to be provided directly by the instance.\nTo achieve this, omit the ``factory`` argument.\nThis is useful if you need to register other adapters for instances providing a particular behavior.\n\nZCML Reference\n--------------\n\nThe ``plone:behavior`` directive uses the namespace ``xmlns:plone=\"http://namespaces.plone.org/plone\"``.\nIn order to enable it loading of its ``meta.zcml`` is needed, use::\n\n    <include package=\"plone.behavior\" file=\"meta.zcml\" />\n\nThe directive supports the attributes:\n\n``title``\n    A user friendly title for this behavior (required).\n\n``description``\n    A longer description for this behavior (optional).\n\n``provides``\n    An interface to which the behavior can be adapted.\n    This is what the conditional adapter factory will be registered as providing (required).\n\n``name``\n    Convenience lookup name for this behavior (optional).\n    The behavior will be always registered under the dotted name of ``provides`` attribute.\n    This are usally long names. ``name`` is a short name for this.\n    If ``name`` is given the behavior is registered additional under it.\n    Anyway using short namespaces in ``name`` is recommended.\n\n``name_only``\n    If set to ``yes`` or ``true`` the behavior is registered only under the given name,\n    but not under the dotted path of the ``provides`` interface.\n    This makes ``name`` mandatory.\n\n``marker``\n    A marker interface to be applied by the behavior.\n    If ``factory`` is not given, then this is optional and defaults to the value of ``provides``.\n    If factory is given ``marker`` is required and should be different from ``provides`` - even if its not enforced.\n\n``factory``\n    The factory for this behavior (optional).\n    If no factory is given, the behavior context is assumed to provide the interface given by ``provides`` itself.\n\n    If factory provides ``plone.behavior.interfaces.ISchemaAwareFactory`` the factory is assumed to be a callable.\n    ``ISchemaAwareFactory`` is an interface for factories that should be initialised with a schema.\n    It is called with the value given in ``provides`` as the only argument.\n    The value returned is then used as the factory, another callable that can create appropriate behavior factories on demand.\n\n``for``\n    The type of object to register the conditional adapter factory for (optional).\n    Must be omitted is no ``factory`` is given.\n\n    The default is either to auto-detect what the factory adapts (i.e. using the ``@adapter`` decorator) or to fall back to ``zope.interface.Interface`` (also written as ``*`` in ZCML).\n\n    Must be one element (no multiadapters, applies also for auto-detection).\n\n``former_dotted_names``\n    In case a behavior is modified so that its dotted name changes, this field can be used to register the old name(s). Therefore, it is possible to retrieve the name(s) under which a behavior was formerly registered under.\n\n    If a call to ``lookup_behavior_registration`` does not find a behavior under the given name, it will look at the former dotted names to try and find the behavior.\n\n\nZCML Examples\n-------------\n\nExample usage, given\n\n- some ``context`` (some arbitary object) which is ``IBehaviorAssignable``,\n- an ``IMyBehavior`` interface intented to be used as ``provides``,\n- an ``IMyMarker`` interface intented to be used as ``marker``,\n- a ``MyFactory`` class implementing ``IMyBehavior`` ,\n- a ``MySchemaAwareFactory`` class implementing ``IMyBehavior`` and ``plone.behavior.interfaces.ISchemaAwareFactory``,\n- an ``IMyType`` intented to be used as ``for``.\n- some ``typed_context`` (some arbitary object) which is ``IBehaviorAssignable`` and provides ``IMyType``,\n- an ``MyTypedFactory`` class implementing ``IMyBehavior`` and adapting ``IMyType``,\n\n``title`` and ``description`` is trivial, so we dont cover it here in the explanantion.\nWe dont cover ``name`` too, because it's not having any effect in this usage.\nTo simplify it, we assume ``context`` ``IBehaviorAssignable`` always supports the behavior.\nAlso for simplifications sake we assume some magic applies the marker interface to ``context``\nI.e. both is done by ``plone.dexterity``.\n\n**Example 1** - only ``provides`` given::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n    />\n\n- ``marker`` defaults to ``provides``,\n- with ``behavior = IMyBehavior(context)`` the ``context`` itself is returned,\n- ``context`` provides ``IBehavior``,\n\n**Example 2** - also ``factory`` is given, so ``marker`` is required:\n\n.. warning::\n   Using the same Interface as marker and behavior works, but is not recommended and will be deprecated in future.\n   It is semantically wrong!\n\n   Go for Example 3 instead!\n\n::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n        marker=\"IMyBehavior\"\n        factory=\"MyFactory\"\n    />\n\n- ``marker`` is the same as ``provides``,\n- with ``behavior = IMyBehavior(context)`` a ``MyFactory`` instance is returned,\n- ``context`` provides ``IMyBehavior``,\n- ``MyFactory`` instance provides ``IMyBehavior``,\n- having ``context`` and ``MyFactory`` providing both the same interface is ugly and not recommended!\n\n**Example 3** - in example 2 both, factory and context are providing the ``IMyBehavior``.\nThis may lead to confusion, so now better with a ``marker``::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n        marker=\"IMyMarker\"\n        factory=\"MyFactory\"\n    />\n\n- with ``behavior = IMyBehavior(context)`` a ``MyFactory`` instance is returned,\n- ``context`` provides ``IMyMarker``,\n- ``MyFactory`` instance provides ``IMyBehavior``,\n\n**Example 4** - like example 3 but with an ``MySchemaAwareFactory``::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n        marker=\"IMyMarker\"\n        factory=\"MySchemaAwareFactory\"\n    />\n\n- with ``behavior = IMyBehavior(context)`` some factory instance is returned as a result from calling a ``MySchemaAwareFactory`` instance with ``IMyBehavior`` as argument,\n- ``context`` provides ``IMyMarker``,\n- ``MyFactory`` instance provides ``IMyBehavior``,\n\n**Example 5** - the behavior should be restricted to the ``typed_context``::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n        marker=\"IMyMarker\"\n        factory=\"MyFactory\"\n        for=\"IMyType\"\n    />\n\n- with ``behavior = IMyBehavior(context, None)`` it could not adapt and ``behavior`` is ``None``,\n- with ``behavior = IMyBehavior(typed_context)`` a ``MyFactory`` instance is returned,\n- ``context`` provides ``IMyMarker``,\n- ``MyFactory`` provides ``IMyBehavior``,\n\n**Example 6** - the behavior should be restricted to the ``typed_context`` by auto-detection.\nThe ``MyTypedFactory`` class adapts ``IMyType`` using a class decorator ``@adapter(IMyType)``::\n\n    <plone:behavior\n        title=\"Example 1\"\n        provides=\"IMyBehavior\"\n        marker=\"IMyMarker\"\n        factory=\"MyTypedFactory\"\n    />\n\n- with ``behavior = IMyBehavior(context, None)`` it could not adapt and ``behavior`` is ``None``,\n- with ``behavior = IMyBehavior(typed_context)`` a ``MyFactory`` instance is returned,\n- ``context`` provides ``IMyMarker``,\n- ``MyFactory`` instance provides ``IMyBehavior``,\n\n\nFurther Reading\n---------------\n\nFor more details please read the doctests in the source code: ``behavior.rst``, ``directives.rst`` and ``annotation.rst``.\n\n\nSource Code\n===========\n\nContributors please read the document `Process for Plone core's development <https://docs.plone.org/develop/coredev/docs/index.html>`_\n\nSources are at the `Plone code repository hosted at Github <https://github.com/plone/plone.behavior>`_.\n\nChangelog\n=========\n\n.. You should *NOT* be adding new change log entries to this file.\n   You should create a file in the news directory instead.\n   For helpful instructions, please see:\n   https://github.com/plone/plone.releaser/blob/master/ADD-A-NEWS-ITEM.rst\n\n.. towncrier release notes start\n\n1.3.2 (2020-04-20)\n------------------\n\nBug fixes:\n\n\n- Minor packaging updates. (#1)\n\n\n1.3.1 (2020-03-08)\n------------------\n\nBug fixes:\n\n\n- Improved documentation.  [jensens] (#0)\n\n\n1.3.0 (2019-02-13)\n------------------\n\nNew features:\n\n\n- New option ``former_dotted_names`` that allows to register the former name\n  under which a behavior used to be registerd. This can be useful to ensure a\n  smooth transition in case a behavior's dotted name is changed. [pysailor]\n  (#18)\n\n\n1.2.1 (2018-01-17)\n------------------\n\nBug fixes:\n\n- Fixed import of dotted path in example.  [fulv]\n\n\n1.2.0 (2017-03-23)\n------------------\n\nNew features:\n\n- For zcml registration:\n  If both, no ``for`` and no ``@adapter`` is given,\n  fall first back to ``marker`` if given (new),\n  else to ``Interface`` (as it was already before).\n  [jensens]\n\nBug fixes:\n\n- Cleanup: Make Jenkins CI code analysis silent by fixing the issues.\n  [jensens]\n\n\n1.1.4 (2016-12-06)\n------------------\n\nBug fixes:\n\n- Add already introduced attribute ``name`` to interface IBehavior.\n  This was missing.\n  Also modernized other IBehavior interface descriptions a bit.\n  [jensens]\n\n\n1.1.3 (2016-11-09)\n------------------\n\nNew features:\n\n- Support Python 3. [davisagli]\n\n\n1.1.2 (2016-08-11)\n------------------\n\nNew:\n\n- New option to register a behavior only by it's short name and not by it's dotted name.\n  This enables more advanced behavior subclassing capabilities.\n  [jensens]\n\n\n1.1.1 (2016-02-25)\n------------------\n\nFixes:\n\n- Make doctest comparison more robust against zope.component __repr__ changes.\n  [thet]\n\n\n1.1 (2015-07-18)\n----------------\n\n- Corrected typo in warning.\n  [jensens]\n\n- Add name to behavior directive. This name can be used to lookup behavior\n  registrations by new plone.behaviors.registration.\n  lookup_behavior_registration function.\n  [rnixx]\n\n- Added more documentation, simplified code in directive, added a warning if\n  ``for`` is given w/o ``factory``.\n  [jensens]\n\n\n1.0.3 (2015-04-29)\n------------------\n\n- Code modernization: utf-header, pep8, rst-files, adapter/implementer\n  decorators, ...\n  [jensens]\n\n\n1.0.2 (2013-01-17)\n------------------\n\n- Remove dependence of tests on zope.app.testing.\n  [davisagli]\n\n\n1.0.1 - 2011-05-20\n------------------\n\n- Relicense under BSD license.\n  See http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy\n  [davisagli]\n\n\n1.0 - 2011-04-30\n----------------\n\n- Use stdlib doctest instead of the deprecated one in zope.testing.\n  [davisagli]\n\n- 'plone:behavior' zcml directive use now MessageID for title and description.\n  [sylvainb]\n\n\n1.0b6 - 2009-11-17\n------------------\n\n- Fix tests for Zope 2.12\n  [optilude]\n\n\n1.0b5 - 2009-07-12\n------------------\n\n- Changed API methods and arguments to mixedCase to be more consistent with\n  the rest of Zope. This is a non-backwards-compatible change. Our profuse\n  apologies, but it's now or never. :-/\n\n  If you find that you get import errors or unknown keyword arguments in your\n  code, please change names from foo_bar too fooBar, e.g.\n  enumerate_behaviors() becomes enumerateBehaviors().\n  [optilude]\n\n\n1.0b4 - 2009-06-07\n------------------\n\n- Allow a marker-interface-only behavior to be set by using the 'provides'\n  attribute (previously 'interface') in the <plone:behavior /> directive\n  without a 'factory' attribute. The 'marker' attribute (previously known as\n  'subtype') is now only required if there is a marker used in addition to\n  a behavior adapter with a separate interface ('provides') and factory.\n  [optilude]\n\n- Rename the 'interface' attribute of <plone:behavior /> to 'provides' to\n  be more consistent with the <adapter /> directive. This is a backwards\n  incompatible change!\n  [optilude]\n\n- Rename the 'subtype' attribute of <plone:behavior /> to 'marker' to\n  be more explicit about its purpose. This is a backwards\n  incompatible change!\n  [optilude]\n\n\n1.0b3 - 2009-04-17\n------------------\n\n- Allow behaviors with no factory.\n  [alecm]\n\n- Provide a vocabulary of available behaviors.\n  [davisagli]\n\n\n1.0b1 - 2008-04-27\n------------------\n\n- Initial release\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://pypi.org/project/plone.behavior", "keywords": "Plone behavior registry", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "plone.behavior", "package_url": "https://pypi.org/project/plone.behavior/", "platform": "", "project_url": "https://pypi.org/project/plone.behavior/", "project_urls": {"Homepage": "https://pypi.org/project/plone.behavior"}, "release_url": "https://pypi.org/project/plone.behavior/1.3.2/", "requires_dist": ["setuptools", "zope.annotation", "zope.component", "zope.configuration", "zope.interface", "zope.schema", "zope.lifecycleevent ; extra == 'test'"], "requires_python": "", "summary": "Infrastructure for maintaining a registry of available behaviors", "version": "1.3.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"table-of-contents\">\n<p>Table of Contents</p>\n<ul>\n<li><a href=\"#overview\" id=\"id15\" rel=\"nofollow\">Overview</a></li>\n<li><a href=\"#usage\" id=\"id16\" rel=\"nofollow\">Usage</a><ul>\n<li><a href=\"#explained\" id=\"id17\" rel=\"nofollow\">Explained</a></li>\n<li><a href=\"#zcml-reference\" id=\"id18\" rel=\"nofollow\">ZCML Reference</a></li>\n<li><a href=\"#zcml-examples\" id=\"id19\" rel=\"nofollow\">ZCML Examples</a></li>\n<li><a href=\"#further-reading\" id=\"id20\" rel=\"nofollow\">Further Reading</a></li>\n</ul>\n</li>\n<li><a href=\"#source-code\" id=\"id21\" rel=\"nofollow\">Source Code</a></li>\n<li><a href=\"#changelog\" id=\"id22\" rel=\"nofollow\">Changelog</a><ul>\n<li><a href=\"#id1\" id=\"id23\" rel=\"nofollow\">1.3.2 (2020-04-20)</a></li>\n<li><a href=\"#id2\" id=\"id24\" rel=\"nofollow\">1.3.1 (2020-03-08)</a></li>\n<li><a href=\"#id3\" id=\"id25\" rel=\"nofollow\">1.3.0 (2019-02-13)</a></li>\n<li><a href=\"#id4\" id=\"id26\" rel=\"nofollow\">1.2.1 (2018-01-17)</a></li>\n<li><a href=\"#id5\" id=\"id27\" rel=\"nofollow\">1.2.0 (2017-03-23)</a></li>\n<li><a href=\"#id6\" id=\"id28\" rel=\"nofollow\">1.1.4 (2016-12-06)</a></li>\n<li><a href=\"#id7\" id=\"id29\" rel=\"nofollow\">1.1.3 (2016-11-09)</a></li>\n<li><a href=\"#id8\" id=\"id30\" rel=\"nofollow\">1.1.2 (2016-08-11)</a></li>\n<li><a href=\"#id9\" id=\"id31\" rel=\"nofollow\">1.1.1 (2016-02-25)</a></li>\n<li><a href=\"#id10\" id=\"id32\" rel=\"nofollow\">1.1 (2015-07-18)</a></li>\n<li><a href=\"#id11\" id=\"id33\" rel=\"nofollow\">1.0.3 (2015-04-29)</a></li>\n<li><a href=\"#id12\" id=\"id34\" rel=\"nofollow\">1.0.2 (2013-01-17)</a></li>\n<li><a href=\"#id13\" id=\"id35\" rel=\"nofollow\">1.0.1 - 2011-05-20</a></li>\n<li><a href=\"#id14\" id=\"id36\" rel=\"nofollow\">1.0 - 2011-04-30</a></li>\n<li><a href=\"#b6-2009-11-17\" id=\"id37\" rel=\"nofollow\">1.0b6 - 2009-11-17</a></li>\n<li><a href=\"#b5-2009-07-12\" id=\"id38\" rel=\"nofollow\">1.0b5 - 2009-07-12</a></li>\n<li><a href=\"#b4-2009-06-07\" id=\"id39\" rel=\"nofollow\">1.0b4 - 2009-06-07</a></li>\n<li><a href=\"#b3-2009-04-17\" id=\"id40\" rel=\"nofollow\">1.0b3 - 2009-04-17</a></li>\n<li><a href=\"#b1-2008-04-27\" id=\"id41\" rel=\"nofollow\">1.0b1 - 2008-04-27</a></li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"overview\">\n<h2><a href=\"#id15\" rel=\"nofollow\">Overview</a></h2>\n<p>This package provides support for <strong>behaviors</strong>.</p>\n<blockquote>\nA behavior is a re-usable aspect of an object that can be enabled or disabled without changing the component registry.</blockquote>\n<p>A behavior is described by an interface, and has metadata such as a title and a description.\nThe behavior can be looked up by a given short name or by the dotted name of the interface.\nWith this unique name behaviors metadata can be looked up.\nWhen the behavior is enabled for an object, you will be able to adapt the object to the interface.\nIn some cases, the interface can be used as a marker interface as well.</p>\n<p>As an example, let\u2019s say that your application needs to support object-level locking.\nThis can be modeled via an adapter, but you want to leave it until runtime to determine whether locking is enabled for a particular object.\nYou could then register locking as a behavior.</p>\n<p><strong>Requirements and Limitations:</strong></p>\n<ul>\n<li>This package comes with support for registering behaviors and factories.</li>\n<li>It does not implement the policy for determining what behaviors are enabled on a particular object at a particular time.\nThat decision is deferred to an <tt>IBehaviorAssignable</tt> adapter, which must be implemented (<tt>plone.dexterity</tt> implements this).</li>\n<li>Like the <tt>IBehaviorAssignable</tt> plumbing, marker interface support needs to be enabled on a per-application basis.\nThis package also does not directly support the adding of marker interfaces to instances.\nTo do that, you can either use an event handler to mark an object when it is created, or a dynamic __providedBy__ descriptor that does the lookup on the fly (but you probably want some caching).\nA sample event handler is provided with this package, but is not registered by default</li>\n<li>The intention is that behavior assignment is generic across an application, used for multiple, optional behaviors.\nIt probably doesn\u2019t make much sense to use <tt>plone.behavior</tt> for a single type of object.\nThe means to keep track of which behaviors are enabled for what types of objects will be application specific.</li>\n</ul>\n</div>\n<div id=\"usage\">\n<h2><a href=\"#id16\" rel=\"nofollow\">Usage</a></h2>\n<div id=\"explained\">\n<h3><a href=\"#id17\" rel=\"nofollow\">Explained</a></h3>\n<p>A behavior is written much like an adapter, except that you don\u2019t specify the type of context being adapted directly.\nFor example:</p>\n<pre>from zope.interface import Interface\nfrom zope.interface import implementer\n\nclass ILockingSupport(Interface):\n   \"\"\"Support locking\n   \"\"\"\n\n   def lock():\n       \"\"\"Lock an object\n       \"\"\"\n\n   def unlock():\n       \"\"\"Unlock an object\n       \"\"\"\n\n@implementer(ILockingSupport)\nclass LockingSupport(object):\n\n    def __init__(self, context):\n        self.context = context\n\n    def lock(self):\n        # do something\n\n    def unlock(self):\n        # do something\n</pre>\n<p>This interface (which describes the type of behavior) and class (which describes the implementation of the behavior) then needs to be registered.</p>\n<p>The simplest way to do that is to load the <tt>meta.zcml</tt> file from this package and use ZCML:</p>\n<pre>&lt;configure\n  xmlns=\"http://namespaces.zope.org/zope\"\n  xmlns:plone=\"http://namespaces.plone.org/plone\"\n  i18n_domain=\"my.package\"&gt;\n\n  &lt;include package=\"plone.behavior\" file=\"meta.zcml\" /&gt;\n\n  &lt;plone:behavior\n      name=\"locking_support\"\n      title=\"Locking support\"\n      description=\"Optional object-level locking\"\n      provides=\".interfaces.ILockingSupport\"\n      factory=\".locking.LockingSupport\"\n  /&gt;\n\n&lt;/configure&gt;\n</pre>\n<p>After this is done you can adapt a context to <tt>ILockingSupport</tt> as normal:</p>\n<pre>locking = ILockingSupport(context, None)\n\nif locking is not None:\n    locking.lock()\n</pre>\n<p>The <tt>name</tt> can be used for lookup instead of the full dotted name of the interface:</p>\n<pre>from plone.behavior.interfaces import IBehavior\nfrom zope.component import getUtility\n\nregistration = getUtility(IBehavior, name='locking_support')\n</pre>\n<p>We also have a helper function to achieve this:</p>\n<pre>from plone.behavior.registration import lookup_behavior_registration\n\nregistration = lookup_behavior_registration(name='locking_support')\n</pre>\n<p>You\u2019ll get an instance of <tt>LockingSupport</tt> if context can be adapted to <tt>IBehaviorAssignable</tt> (which, recall, is application specific),\nand if the implementation of <tt>IBehaviorAssignable</tt> says that this context supports this particular behavior.</p>\n<p>It is also possible to let the provided interface act as a marker interface that is to be provided directly by the instance.\nTo achieve this, omit the <tt>factory</tt> argument.\nThis is useful if you need to register other adapters for instances providing a particular behavior.</p>\n</div>\n<div id=\"zcml-reference\">\n<h3><a href=\"#id18\" rel=\"nofollow\">ZCML Reference</a></h3>\n<p>The <tt>plone:behavior</tt> directive uses the namespace <tt><span class=\"pre\">xmlns:plone=\"http://namespaces.plone.org/plone\"</span></tt>.\nIn order to enable it loading of its <tt>meta.zcml</tt> is needed, use:</p>\n<pre>&lt;include package=\"plone.behavior\" file=\"meta.zcml\" /&gt;\n</pre>\n<p>The directive supports the attributes:</p>\n<dl>\n<dt><tt>title</tt></dt>\n<dd>A user friendly title for this behavior (required).</dd>\n<dt><tt>description</tt></dt>\n<dd>A longer description for this behavior (optional).</dd>\n<dt><tt>provides</tt></dt>\n<dd>An interface to which the behavior can be adapted.\nThis is what the conditional adapter factory will be registered as providing (required).</dd>\n<dt><tt>name</tt></dt>\n<dd>Convenience lookup name for this behavior (optional).\nThe behavior will be always registered under the dotted name of <tt>provides</tt> attribute.\nThis are usally long names. <tt>name</tt> is a short name for this.\nIf <tt>name</tt> is given the behavior is registered additional under it.\nAnyway using short namespaces in <tt>name</tt> is recommended.</dd>\n<dt><tt>name_only</tt></dt>\n<dd>If set to <tt>yes</tt> or <tt>true</tt> the behavior is registered only under the given name,\nbut not under the dotted path of the <tt>provides</tt> interface.\nThis makes <tt>name</tt> mandatory.</dd>\n<dt><tt>marker</tt></dt>\n<dd>A marker interface to be applied by the behavior.\nIf <tt>factory</tt> is not given, then this is optional and defaults to the value of <tt>provides</tt>.\nIf factory is given <tt>marker</tt> is required and should be different from <tt>provides</tt> - even if its not enforced.</dd>\n<dt><tt>factory</tt></dt>\n<dd><p>The factory for this behavior (optional).\nIf no factory is given, the behavior context is assumed to provide the interface given by <tt>provides</tt> itself.</p>\n<p>If factory provides <tt>plone.behavior.interfaces.ISchemaAwareFactory</tt> the factory is assumed to be a callable.\n<tt>ISchemaAwareFactory</tt> is an interface for factories that should be initialised with a schema.\nIt is called with the value given in <tt>provides</tt> as the only argument.\nThe value returned is then used as the factory, another callable that can create appropriate behavior factories on demand.</p>\n</dd>\n<dt><tt>for</tt></dt>\n<dd><p>The type of object to register the conditional adapter factory for (optional).\nMust be omitted is no <tt>factory</tt> is given.</p>\n<p>The default is either to auto-detect what the factory adapts (i.e. using the <tt>@adapter</tt> decorator) or to fall back to <tt>zope.interface.Interface</tt> (also written as <tt>*</tt> in ZCML).</p>\n<p>Must be one element (no multiadapters, applies also for auto-detection).</p>\n</dd>\n<dt><tt>former_dotted_names</tt></dt>\n<dd><p>In case a behavior is modified so that its dotted name changes, this field can be used to register the old name(s). Therefore, it is possible to retrieve the name(s) under which a behavior was formerly registered under.</p>\n<p>If a call to <tt>lookup_behavior_registration</tt> does not find a behavior under the given name, it will look at the former dotted names to try and find the behavior.</p>\n</dd>\n</dl>\n</div>\n<div id=\"zcml-examples\">\n<h3><a href=\"#id19\" rel=\"nofollow\">ZCML Examples</a></h3>\n<p>Example usage, given</p>\n<ul>\n<li>some <tt>context</tt> (some arbitary object) which is <tt>IBehaviorAssignable</tt>,</li>\n<li>an <tt>IMyBehavior</tt> interface intented to be used as <tt>provides</tt>,</li>\n<li>an <tt>IMyMarker</tt> interface intented to be used as <tt>marker</tt>,</li>\n<li>a <tt>MyFactory</tt> class implementing <tt>IMyBehavior</tt> ,</li>\n<li>a <tt>MySchemaAwareFactory</tt> class implementing <tt>IMyBehavior</tt> and <tt>plone.behavior.interfaces.ISchemaAwareFactory</tt>,</li>\n<li>an <tt>IMyType</tt> intented to be used as <tt>for</tt>.</li>\n<li>some <tt>typed_context</tt> (some arbitary object) which is <tt>IBehaviorAssignable</tt> and provides <tt>IMyType</tt>,</li>\n<li>an <tt>MyTypedFactory</tt> class implementing <tt>IMyBehavior</tt> and adapting <tt>IMyType</tt>,</li>\n</ul>\n<p><tt>title</tt> and <tt>description</tt> is trivial, so we dont cover it here in the explanantion.\nWe dont cover <tt>name</tt> too, because it\u2019s not having any effect in this usage.\nTo simplify it, we assume <tt>context</tt> <tt>IBehaviorAssignable</tt> always supports the behavior.\nAlso for simplifications sake we assume some magic applies the marker interface to <tt>context</tt>\nI.e. both is done by <tt>plone.dexterity</tt>.</p>\n<p><strong>Example 1</strong> - only <tt>provides</tt> given:</p>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n/&gt;\n</pre>\n<ul>\n<li><tt>marker</tt> defaults to <tt>provides</tt>,</li>\n<li>with <tt>behavior = IMyBehavior(context)</tt> the <tt>context</tt> itself is returned,</li>\n<li><tt>context</tt> provides <tt>IBehavior</tt>,</li>\n</ul>\n<p><strong>Example 2</strong> - also <tt>factory</tt> is given, so <tt>marker</tt> is required:</p>\n<div>\n<p>Warning</p>\n<p>Using the same Interface as marker and behavior works, but is not recommended and will be deprecated in future.\nIt is semantically wrong!</p>\n<p>Go for Example 3 instead!</p>\n</div>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n    marker=\"IMyBehavior\"\n    factory=\"MyFactory\"\n/&gt;\n</pre>\n<ul>\n<li><tt>marker</tt> is the same as <tt>provides</tt>,</li>\n<li>with <tt>behavior = IMyBehavior(context)</tt> a <tt>MyFactory</tt> instance is returned,</li>\n<li><tt>context</tt> provides <tt>IMyBehavior</tt>,</li>\n<li><tt>MyFactory</tt> instance provides <tt>IMyBehavior</tt>,</li>\n<li>having <tt>context</tt> and <tt>MyFactory</tt> providing both the same interface is ugly and not recommended!</li>\n</ul>\n<p><strong>Example 3</strong> - in example 2 both, factory and context are providing the <tt>IMyBehavior</tt>.\nThis may lead to confusion, so now better with a <tt>marker</tt>:</p>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n    marker=\"IMyMarker\"\n    factory=\"MyFactory\"\n/&gt;\n</pre>\n<ul>\n<li>with <tt>behavior = IMyBehavior(context)</tt> a <tt>MyFactory</tt> instance is returned,</li>\n<li><tt>context</tt> provides <tt>IMyMarker</tt>,</li>\n<li><tt>MyFactory</tt> instance provides <tt>IMyBehavior</tt>,</li>\n</ul>\n<p><strong>Example 4</strong> - like example 3 but with an <tt>MySchemaAwareFactory</tt>:</p>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n    marker=\"IMyMarker\"\n    factory=\"MySchemaAwareFactory\"\n/&gt;\n</pre>\n<ul>\n<li>with <tt>behavior = IMyBehavior(context)</tt> some factory instance is returned as a result from calling a <tt>MySchemaAwareFactory</tt> instance with <tt>IMyBehavior</tt> as argument,</li>\n<li><tt>context</tt> provides <tt>IMyMarker</tt>,</li>\n<li><tt>MyFactory</tt> instance provides <tt>IMyBehavior</tt>,</li>\n</ul>\n<p><strong>Example 5</strong> - the behavior should be restricted to the <tt>typed_context</tt>:</p>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n    marker=\"IMyMarker\"\n    factory=\"MyFactory\"\n    for=\"IMyType\"\n/&gt;\n</pre>\n<ul>\n<li>with <tt>behavior = IMyBehavior(context, None)</tt> it could not adapt and <tt>behavior</tt> is <tt>None</tt>,</li>\n<li>with <tt>behavior = IMyBehavior(typed_context)</tt> a <tt>MyFactory</tt> instance is returned,</li>\n<li><tt>context</tt> provides <tt>IMyMarker</tt>,</li>\n<li><tt>MyFactory</tt> provides <tt>IMyBehavior</tt>,</li>\n</ul>\n<p><strong>Example 6</strong> - the behavior should be restricted to the <tt>typed_context</tt> by auto-detection.\nThe <tt>MyTypedFactory</tt> class adapts <tt>IMyType</tt> using a class decorator <tt>@adapter(IMyType)</tt>:</p>\n<pre>&lt;plone:behavior\n    title=\"Example 1\"\n    provides=\"IMyBehavior\"\n    marker=\"IMyMarker\"\n    factory=\"MyTypedFactory\"\n/&gt;\n</pre>\n<ul>\n<li>with <tt>behavior = IMyBehavior(context, None)</tt> it could not adapt and <tt>behavior</tt> is <tt>None</tt>,</li>\n<li>with <tt>behavior = IMyBehavior(typed_context)</tt> a <tt>MyFactory</tt> instance is returned,</li>\n<li><tt>context</tt> provides <tt>IMyMarker</tt>,</li>\n<li><tt>MyFactory</tt> instance provides <tt>IMyBehavior</tt>,</li>\n</ul>\n</div>\n<div id=\"further-reading\">\n<h3><a href=\"#id20\" rel=\"nofollow\">Further Reading</a></h3>\n<p>For more details please read the doctests in the source code: <tt>behavior.rst</tt>, <tt>directives.rst</tt> and <tt>annotation.rst</tt>.</p>\n</div>\n</div>\n<div id=\"source-code\">\n<h2><a href=\"#id21\" rel=\"nofollow\">Source Code</a></h2>\n<p>Contributors please read the document <a href=\"https://docs.plone.org/develop/coredev/docs/index.html\" rel=\"nofollow\">Process for Plone core\u2019s development</a></p>\n<p>Sources are at the <a href=\"https://github.com/plone/plone.behavior\" rel=\"nofollow\">Plone code repository hosted at Github</a>.</p>\n</div>\n<div id=\"changelog\">\n<h2><a href=\"#id22\" rel=\"nofollow\">Changelog</a></h2>\n<div id=\"id1\">\n<h3><a href=\"#id23\" rel=\"nofollow\">1.3.2 (2020-04-20)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Minor packaging updates. (#1)</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3><a href=\"#id24\" rel=\"nofollow\">1.3.1 (2020-03-08)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Improved documentation.  [jensens] (#0)</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3><a href=\"#id25\" rel=\"nofollow\">1.3.0 (2019-02-13)</a></h3>\n<p>New features:</p>\n<ul>\n<li>New option <tt>former_dotted_names</tt> that allows to register the former name\nunder which a behavior used to be registerd. This can be useful to ensure a\nsmooth transition in case a behavior\u2019s dotted name is changed. [pysailor]\n(#18)</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3><a href=\"#id26\" rel=\"nofollow\">1.2.1 (2018-01-17)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Fixed import of dotted path in example.  [fulv]</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3><a href=\"#id27\" rel=\"nofollow\">1.2.0 (2017-03-23)</a></h3>\n<p>New features:</p>\n<ul>\n<li>For zcml registration:\nIf both, no <tt>for</tt> and no <tt>@adapter</tt> is given,\nfall first back to <tt>marker</tt> if given (new),\nelse to <tt>Interface</tt> (as it was already before).\n[jensens]</li>\n</ul>\n<p>Bug fixes:</p>\n<ul>\n<li>Cleanup: Make Jenkins CI code analysis silent by fixing the issues.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id6\">\n<h3><a href=\"#id28\" rel=\"nofollow\">1.1.4 (2016-12-06)</a></h3>\n<p>Bug fixes:</p>\n<ul>\n<li>Add already introduced attribute <tt>name</tt> to interface IBehavior.\nThis was missing.\nAlso modernized other IBehavior interface descriptions a bit.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id7\">\n<h3><a href=\"#id29\" rel=\"nofollow\">1.1.3 (2016-11-09)</a></h3>\n<p>New features:</p>\n<ul>\n<li>Support Python 3. [davisagli]</li>\n</ul>\n</div>\n<div id=\"id8\">\n<h3><a href=\"#id30\" rel=\"nofollow\">1.1.2 (2016-08-11)</a></h3>\n<p>New:</p>\n<ul>\n<li>New option to register a behavior only by it\u2019s short name and not by it\u2019s dotted name.\nThis enables more advanced behavior subclassing capabilities.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id9\">\n<h3><a href=\"#id31\" rel=\"nofollow\">1.1.1 (2016-02-25)</a></h3>\n<p>Fixes:</p>\n<ul>\n<li>Make doctest comparison more robust against zope.component __repr__ changes.\n[thet]</li>\n</ul>\n</div>\n<div id=\"id10\">\n<h3><a href=\"#id32\" rel=\"nofollow\">1.1 (2015-07-18)</a></h3>\n<ul>\n<li>Corrected typo in warning.\n[jensens]</li>\n<li>Add name to behavior directive. This name can be used to lookup behavior\nregistrations by new plone.behaviors.registration.\nlookup_behavior_registration function.\n[rnixx]</li>\n<li>Added more documentation, simplified code in directive, added a warning if\n<tt>for</tt> is given w/o <tt>factory</tt>.\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id11\">\n<h3><a href=\"#id33\" rel=\"nofollow\">1.0.3 (2015-04-29)</a></h3>\n<ul>\n<li>Code modernization: utf-header, pep8, rst-files, adapter/implementer\ndecorators, \u2026\n[jensens]</li>\n</ul>\n</div>\n<div id=\"id12\">\n<h3><a href=\"#id34\" rel=\"nofollow\">1.0.2 (2013-01-17)</a></h3>\n<ul>\n<li>Remove dependence of tests on zope.app.testing.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id13\">\n<h3><a href=\"#id35\" rel=\"nofollow\">1.0.1 - 2011-05-20</a></h3>\n<ul>\n<li>Relicense under BSD license.\nSee <a href=\"http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy\" rel=\"nofollow\">http://plone.org/foundation/materials/foundation-resolutions/plone-framework-components-relicensing-policy</a>\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"id14\">\n<h3><a href=\"#id36\" rel=\"nofollow\">1.0 - 2011-04-30</a></h3>\n<ul>\n<li>Use stdlib doctest instead of the deprecated one in zope.testing.\n[davisagli]</li>\n<li>\u2018plone:behavior\u2019 zcml directive use now MessageID for title and description.\n[sylvainb]</li>\n</ul>\n</div>\n<div id=\"b6-2009-11-17\">\n<h3><a href=\"#id37\" rel=\"nofollow\">1.0b6 - 2009-11-17</a></h3>\n<ul>\n<li>Fix tests for Zope 2.12\n[optilude]</li>\n</ul>\n</div>\n<div id=\"b5-2009-07-12\">\n<h3><a href=\"#id38\" rel=\"nofollow\">1.0b5 - 2009-07-12</a></h3>\n<ul>\n<li><p>Changed API methods and arguments to mixedCase to be more consistent with\nthe rest of Zope. This is a non-backwards-compatible change. Our profuse\napologies, but it\u2019s now or never. :-/</p>\n<p>If you find that you get import errors or unknown keyword arguments in your\ncode, please change names from foo_bar too fooBar, e.g.\nenumerate_behaviors() becomes enumerateBehaviors().\n[optilude]</p>\n</li>\n</ul>\n</div>\n<div id=\"b4-2009-06-07\">\n<h3><a href=\"#id39\" rel=\"nofollow\">1.0b4 - 2009-06-07</a></h3>\n<ul>\n<li>Allow a marker-interface-only behavior to be set by using the \u2018provides\u2019\nattribute (previously \u2018interface\u2019) in the &lt;plone:behavior /&gt; directive\nwithout a \u2018factory\u2019 attribute. The \u2018marker\u2019 attribute (previously known as\n\u2018subtype\u2019) is now only required if there is a marker used in addition to\na behavior adapter with a separate interface (\u2018provides\u2019) and factory.\n[optilude]</li>\n<li>Rename the \u2018interface\u2019 attribute of &lt;plone:behavior /&gt; to \u2018provides\u2019 to\nbe more consistent with the &lt;adapter /&gt; directive. This is a backwards\nincompatible change!\n[optilude]</li>\n<li>Rename the \u2018subtype\u2019 attribute of &lt;plone:behavior /&gt; to \u2018marker\u2019 to\nbe more explicit about its purpose. This is a backwards\nincompatible change!\n[optilude]</li>\n</ul>\n</div>\n<div id=\"b3-2009-04-17\">\n<h3><a href=\"#id40\" rel=\"nofollow\">1.0b3 - 2009-04-17</a></h3>\n<ul>\n<li>Allow behaviors with no factory.\n[alecm]</li>\n<li>Provide a vocabulary of available behaviors.\n[davisagli]</li>\n</ul>\n</div>\n<div id=\"b1-2008-04-27\">\n<h3><a href=\"#id41\" rel=\"nofollow\">1.0b1 - 2008-04-27</a></h3>\n<ul>\n<li>Initial release</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 7062365, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "89a59e3c2e308cdaf2b587c352592c60", "sha256": "a4c45d6bfa6946915a328a91d251ea81b6fefa7a5af466b492a09c3603645be2"}, "downloads": -1, "filename": "plone.behavior-1.0.zip", "has_sig": false, "md5_digest": "89a59e3c2e308cdaf2b587c352592c60", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 41985, "upload_time": "2011-04-30T19:56:05", "upload_time_iso_8601": "2011-04-30T19:56:05.976021Z", "url": "https://files.pythonhosted.org/packages/dd/2c/6306c9b4527a40858c9f920c5bf904e314d95bdfd4e7b851e93c76b8cbbf/plone.behavior-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "a18feb9ec744b2a64028c366a8835d59", "sha256": "b9618db3d3e573c94e35a82cf9b699f53f52918dbe33f2828be86a28ff6400cf"}, "downloads": -1, "filename": "plone.behavior-1.0.1.zip", "has_sig": false, "md5_digest": "a18feb9ec744b2a64028c366a8835d59", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 37813, "upload_time": "2011-05-20T19:21:04", "upload_time_iso_8601": "2011-05-20T19:21:04.788101Z", "url": "https://files.pythonhosted.org/packages/a0/c0/425b4da9d3ef61f4fb167acb0d8da3d98964913c58bd9048a6ac64bf5f1a/plone.behavior-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "4459b91287ebc2f2cf4fa38728b2a739", "sha256": "b59d56a018970b010676119da3251d20d0ee74c3c9ec8883bac982c5a4eb9a09"}, "downloads": -1, "filename": "plone.behavior-1.0.2.zip", "has_sig": false, "md5_digest": "4459b91287ebc2f2cf4fa38728b2a739", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 38305, "upload_time": "2013-01-18T03:15:19", "upload_time_iso_8601": "2013-01-18T03:15:19.798318Z", "url": "https://files.pythonhosted.org/packages/39/14/b62ebf49e16e10acb0088bf23d2d1f72c32dd7b2aadd6ea06675e53a5203/plone.behavior-1.0.2.zip", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "1508aefea32ac618521ab851cb852531", "sha256": "ec45dc238538c12eca3ebf64ddc3ea451dc3974cf4d41ff0ebcbe5b1abdceac3"}, "downloads": -1, "filename": "plone.behavior-1.0.3.tar.gz", "has_sig": false, "md5_digest": "1508aefea32ac618521ab851cb852531", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28557, "upload_time": "2015-04-29T21:17:47", "upload_time_iso_8601": "2015-04-29T21:17:47.944075Z", "url": "https://files.pythonhosted.org/packages/1e/d7/3fe9ecee817afea8f83e7eebd9eb31b797eb798e17886092ef46a94e63e1/plone.behavior-1.0.3.tar.gz", "yanked": false}], "1.0b1": [{"comment_text": "", "digests": {"md5": "6f83f3420b6721228d6228bea0e4f30b", "sha256": "c3881a6ad1577095b7f9f729366a114ddfdf5e6442df2d9866d7af512be5e321"}, "downloads": -1, "filename": "plone.behavior-1.0b1-py2.4.egg", "has_sig": false, "md5_digest": "6f83f3420b6721228d6228bea0e4f30b", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 14803, "upload_time": "2008-04-28T00:48:47", "upload_time_iso_8601": "2008-04-28T00:48:47Z", "url": "https://files.pythonhosted.org/packages/0f/1d/3e56a6040d297af5e36eeec7add1336886a07f7de4cc9b30eff6cb90776d/plone.behavior-1.0b1-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "ea2f515b159c2f9fa5164ac899fa6f9c", "sha256": "1325d8ca5a78c34756066edbbef1ed095d9df3fc9c0a0f95d523f1f337d5b3dc"}, "downloads": -1, "filename": "plone.behavior-1.0b1.tar.gz", "has_sig": false, "md5_digest": "ea2f515b159c2f9fa5164ac899fa6f9c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13326, "upload_time": "2008-04-28T00:48:47", "upload_time_iso_8601": "2008-04-28T00:48:47Z", "url": "https://files.pythonhosted.org/packages/4d/11/a39626a5973802f1fd6de5314949df37ae0443e609228579b14817d6f746/plone.behavior-1.0b1.tar.gz", "yanked": false}], "1.0b2": [{"comment_text": "", "digests": {"md5": "3663db5ba1ed70b4d4432913b5ee4dbf", "sha256": "da574a9851eef042948cb2e7648721cf5054964f0d4e3ac57ffc12770acb6d36"}, "downloads": -1, "filename": "plone.behavior-1.0b2-py2.4.egg", "has_sig": false, "md5_digest": "3663db5ba1ed70b4d4432913b5ee4dbf", "packagetype": "bdist_egg", "python_version": "2.4", "requires_python": null, "size": 20129, "upload_time": "2008-05-05T12:48:14", "upload_time_iso_8601": "2008-05-05T12:48:14Z", "url": "https://files.pythonhosted.org/packages/0a/15/deec5ea5a314b6030b446d58e360759f1e79cd961c426ca13b43165564ca/plone.behavior-1.0b2-py2.4.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "20d83528cd109eb99d570249c51c42e6", "sha256": "102ba3bce2e1741d0e7291f9c8dc0343eee331d1742f1b1125f54c1a310239eb"}, "downloads": -1, "filename": "plone.behavior-1.0b2.tar.gz", "has_sig": false, "md5_digest": "20d83528cd109eb99d570249c51c42e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14970, "upload_time": "2008-05-05T12:48:14", "upload_time_iso_8601": "2008-05-05T12:48:14Z", "url": "https://files.pythonhosted.org/packages/9c/65/cc3e7d8751ea2bcce31c2bc5ec31179b1fcd9e7bf29535ed5bf7197fa4ff/plone.behavior-1.0b2.tar.gz", "yanked": false}], "1.0b3": [{"comment_text": "", "digests": {"md5": "2021ca8135641986d4b80e870c7faa95", "sha256": "50fc082e40d4a0795e430ba5f2b30482266fb7113aa2941fd48aeeb480c9ccd4"}, "downloads": -1, "filename": "plone.behavior-1.0b3.tar.gz", "has_sig": false, "md5_digest": "2021ca8135641986d4b80e870c7faa95", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28444, "upload_time": "2009-04-17T07:26:57", "upload_time_iso_8601": "2009-04-17T07:26:57.087442Z", "url": "https://files.pythonhosted.org/packages/60/e3/43c9980f5084ecce2ef2a97f8708321256fc093495503b99f4228b912e8b/plone.behavior-1.0b3.tar.gz", "yanked": false}], "1.0b4": [{"comment_text": "", "digests": {"md5": "8f410e89747f4a8e762c962c0f97aa23", "sha256": "404a48aca5ff84006ae61b22a3c6814844e14b36332a4eab44e2f454f5cb5985"}, "downloads": -1, "filename": "plone.behavior-1.0b4.tar.gz", "has_sig": false, "md5_digest": "8f410e89747f4a8e762c962c0f97aa23", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30588, "upload_time": "2009-06-07T17:22:53", "upload_time_iso_8601": "2009-06-07T17:22:53.568717Z", "url": "https://files.pythonhosted.org/packages/ea/ff/bf1b41adfad70d5d3b5d698faf49302dddba979fa38731a08efafe018449/plone.behavior-1.0b4.tar.gz", "yanked": false}], "1.0b5": [{"comment_text": "", "digests": {"md5": "91aa6a7427fbceaf37d3f5d0c3f62847", "sha256": "ffab507499ca79c96e99d48757d7f299e4109643ef759c9bae64e49f9d0521f6"}, "downloads": -1, "filename": "plone.behavior-1.0b5.tar.gz", "has_sig": false, "md5_digest": "91aa6a7427fbceaf37d3f5d0c3f62847", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 31141, "upload_time": "2009-07-12T10:24:40", "upload_time_iso_8601": "2009-07-12T10:24:40.620240Z", "url": "https://files.pythonhosted.org/packages/a8/13/96998f257fb2762e567b926e116913674bd885dc26a65df8f7c5b9fccceb/plone.behavior-1.0b5.tar.gz", "yanked": false}], "1.0b6": [{"comment_text": "", "digests": {"md5": "b1b4acb9a5ee9b4fe6c4a70bb9262c30", "sha256": "f9cd7b6fbd6cc8c5ecfc83f6aa4354714bc6aa03f1b53a25548c239cab393cd9"}, "downloads": -1, "filename": "plone.behavior-1.0b6.tar.gz", "has_sig": false, "md5_digest": "b1b4acb9a5ee9b4fe6c4a70bb9262c30", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30261, "upload_time": "2009-11-17T15:05:27", "upload_time_iso_8601": "2009-11-17T15:05:27.757670Z", "url": "https://files.pythonhosted.org/packages/55/99/c6512fa25ef0b372d437f36ff130a6a7d32adb7b13d7b0770ce0e3f1ec86/plone.behavior-1.0b6.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "b026b2d19893edb7e3a5621db701e6d4", "sha256": "f4b48804d6e95a01272d7b555f66668df10eb916d4fa4894feee99893350be58"}, "downloads": -1, "filename": "plone.behavior-1.1.tar.gz", "has_sig": false, "md5_digest": "b026b2d19893edb7e3a5621db701e6d4", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21936, "upload_time": "2015-07-18T07:35:37", "upload_time_iso_8601": "2015-07-18T07:35:37.193863Z", "url": "https://files.pythonhosted.org/packages/cc/28/9a3f0a9bed77fd8ba23a5369dc25b32fbf03c4ea07fbcaf1e372972c0732/plone.behavior-1.1.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "41a7e06e866f4a7ac59f9b9583c5fba2", "sha256": "1313e36ac16a85b6e0dcd4f0f65577dbf9bdfbb3b7fccfdbd8974bdeecdcc173"}, "downloads": -1, "filename": "plone.behavior-1.1.1.tar.gz", "has_sig": false, "md5_digest": "41a7e06e866f4a7ac59f9b9583c5fba2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22198, "upload_time": "2016-02-25T19:47:09", "upload_time_iso_8601": "2016-02-25T19:47:09.024481Z", "url": "https://files.pythonhosted.org/packages/81/ab/6c55810c44cbd4adb3781e94fd7b754c863559fb662ed59b9519f7e8ebd4/plone.behavior-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "857534d7b642ef70a1c2e68b10a89381", "sha256": "136b0decc47b784b683b8c9704191afde824aafc781169e54eac52cc565715cc"}, "downloads": -1, "filename": "plone.behavior-1.1.2.tar.gz", "has_sig": false, "md5_digest": "857534d7b642ef70a1c2e68b10a89381", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23100, "upload_time": "2016-08-11T19:09:33", "upload_time_iso_8601": "2016-08-11T19:09:33.413179Z", "url": "https://files.pythonhosted.org/packages/32/8b/5b7bff4bbc8ad0a730d3633fa9343bea63689dc058fef61708aab1d2d607/plone.behavior-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "52d4e39558655851659aa695d571f073", "sha256": "e6e013f0911c5f8c7fa939b7f83fbe47cd693e9891579d0fcfb85d795f708471"}, "downloads": -1, "filename": "plone.behavior-1.1.3.tar.gz", "has_sig": false, "md5_digest": "52d4e39558655851659aa695d571f073", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23561, "upload_time": "2016-11-09T15:49:50", "upload_time_iso_8601": "2016-11-09T15:49:50.382638Z", "url": "https://files.pythonhosted.org/packages/fd/e9/0741b349ba31a3af3125f4d28b9089641f714cb97534026ed6ed7a0317b5/plone.behavior-1.1.3.tar.gz", "yanked": false}], "1.1.4": [{"comment_text": "", "digests": {"md5": "978b79fe990051ff7da18a7c5765b00c", "sha256": "e1d2c646661a5a658967b25a6440f999d23b9851f307cc0c7f615af959c0a6f2"}, "downloads": -1, "filename": "plone.behavior-1.1.4.tar.gz", "has_sig": false, "md5_digest": "978b79fe990051ff7da18a7c5765b00c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23793, "upload_time": "2016-12-06T21:58:12", "upload_time_iso_8601": "2016-12-06T21:58:12.066223Z", "url": "https://files.pythonhosted.org/packages/9a/01/200eea1d1e986c05e8bbbd09d21062f14f4f1085381fdc1d9e4e4d626452/plone.behavior-1.1.4.tar.gz", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "dc4e2a5d6f89170441cbacb6482241e3", "sha256": "8fb45be19fb0a6b2602a5c965d33b5368972eb8c0c721fcb2fe5b0e2d06de69c"}, "downloads": -1, "filename": "plone.behavior-1.2.0.tar.gz", "has_sig": false, "md5_digest": "dc4e2a5d6f89170441cbacb6482241e3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 24548, "upload_time": "2017-03-23T21:29:32", "upload_time_iso_8601": "2017-03-23T21:29:32.966101Z", "url": "https://files.pythonhosted.org/packages/da/8a/6d3835aff726af481761c56f9ee9bb2bc267bd8a780725ce5f1f36d0f353/plone.behavior-1.2.0.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "378aa08244253d9f63e5baaff3e80ddc", "sha256": "e1d2766af3c0a8a929bb87b1b2afa3590dbf01f6c725b8b17ba616a243f051b0"}, "downloads": -1, "filename": "plone.behavior-1.2.1-py2-none-any.whl", "has_sig": false, "md5_digest": "378aa08244253d9f63e5baaff3e80ddc", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 29133, "upload_time": "2018-01-17T11:14:22", "upload_time_iso_8601": "2018-01-17T11:14:22.157782Z", "url": "https://files.pythonhosted.org/packages/1b/76/725eea3f2c7f118a03f9ad3a910541e2041b8050972d97eb4a62ab627216/plone.behavior-1.2.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a30e69ac9cbeb8a35bd86798341dd3ea", "sha256": "0ee8b1a5afc307c73120c92f1982383fe81739ac0e7dcaa5d56dec01789bb374"}, "downloads": -1, "filename": "plone.behavior-1.2.1.tar.gz", "has_sig": false, "md5_digest": "a30e69ac9cbeb8a35bd86798341dd3ea", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23634, "upload_time": "2018-01-17T11:14:23", "upload_time_iso_8601": "2018-01-17T11:14:23.717522Z", "url": "https://files.pythonhosted.org/packages/95/8b/41c16192d24a8de05a89e3a796233e211b615ac5b5200e12b53a825cee78/plone.behavior-1.2.1.tar.gz", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "c99b4958286ba9b9cde40ad86f2fe57b", "sha256": "204c1481848330668ac83e59b6db8ca83ab9e65c1689448551fbeefa9229e02f"}, "downloads": -1, "filename": "plone.behavior-1.3.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "c99b4958286ba9b9cde40ad86f2fe57b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24444, "upload_time": "2019-02-12T23:27:15", "upload_time_iso_8601": "2019-02-12T23:27:15.942880Z", "url": "https://files.pythonhosted.org/packages/3a/15/d493e618f4921be7331a00b99fe29424dc8300c9e4db32fa046083954ca9/plone.behavior-1.3.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "70973e9bba475755963d4a07e15afb4c", "sha256": "759041054c210038a047b29bd7a7265834f62becdbffa6f7562d1a98005e8638"}, "downloads": -1, "filename": "plone.behavior-1.3.0.tar.gz", "has_sig": false, "md5_digest": "70973e9bba475755963d4a07e15afb4c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22819, "upload_time": "2019-02-12T23:27:17", "upload_time_iso_8601": "2019-02-12T23:27:17.848375Z", "url": "https://files.pythonhosted.org/packages/52/7d/a34c124d31a8e6eb5525f5d702a89abe8ef0260f55d1d8c2178eec0987bc/plone.behavior-1.3.0.tar.gz", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "0f565d4ccf395d58e022c9f5d7340b38", "sha256": "874c30df52c2847445196e1188de0cb39683a944d2961e72dad3a35b10cff407"}, "downloads": -1, "filename": "plone.behavior-1.3.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "0f565d4ccf395d58e022c9f5d7340b38", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24518, "upload_time": "2020-03-08T22:07:18", "upload_time_iso_8601": "2020-03-08T22:07:18.924572Z", "url": "https://files.pythonhosted.org/packages/3e/8c/565ad1a7ca8e2566d3030038324878cb838e1ea5c370e906c1dc6000685c/plone.behavior-1.3.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f8c126be16037f0e3a2e82474ae24938", "sha256": "4f42ec263be1ddede74199f3dfe423343f512c4fe7cea8d2b445c05ef42985ba"}, "downloads": -1, "filename": "plone.behavior-1.3.1.tar.gz", "has_sig": false, "md5_digest": "f8c126be16037f0e3a2e82474ae24938", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25430, "upload_time": "2020-03-08T22:07:20", "upload_time_iso_8601": "2020-03-08T22:07:20.751973Z", "url": "https://files.pythonhosted.org/packages/0f/99/9eb994585600cc4ba829569465a18b5041f7dbaad571c9744c051d5f5964/plone.behavior-1.3.1.tar.gz", "yanked": false}], "1.3.2": [{"comment_text": "", "digests": {"md5": "fba9f4a896c48dfd599a5ccc2504b70c", "sha256": "feaa90a429835f74b848f43e205ee62533b0c3862ec51a26099621b350653e51"}, "downloads": -1, "filename": "plone.behavior-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fba9f4a896c48dfd599a5ccc2504b70c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24554, "upload_time": "2020-04-20T19:33:18", "upload_time_iso_8601": "2020-04-20T19:33:18.906563Z", "url": "https://files.pythonhosted.org/packages/f0/7f/0cd0d4fe79264cc046c6c61ef8e24f2c3d744359615b7d57a87c7580078a/plone.behavior-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d28d34abb503027806c4ccce343ecf0", "sha256": "6a6d4c81d8723ebcacfa56a684aab1d8c172aa6e1cbb86b273179193e5856901"}, "downloads": -1, "filename": "plone.behavior-1.3.2.tar.gz", "has_sig": false, "md5_digest": "5d28d34abb503027806c4ccce343ecf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25519, "upload_time": "2020-04-20T19:33:20", "upload_time_iso_8601": "2020-04-20T19:33:20.671657Z", "url": "https://files.pythonhosted.org/packages/92/ac/02c876e292d89eaee66d3eb460d291db3c18d94f40db41e838697a03eb14/plone.behavior-1.3.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fba9f4a896c48dfd599a5ccc2504b70c", "sha256": "feaa90a429835f74b848f43e205ee62533b0c3862ec51a26099621b350653e51"}, "downloads": -1, "filename": "plone.behavior-1.3.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fba9f4a896c48dfd599a5ccc2504b70c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24554, "upload_time": "2020-04-20T19:33:18", "upload_time_iso_8601": "2020-04-20T19:33:18.906563Z", "url": "https://files.pythonhosted.org/packages/f0/7f/0cd0d4fe79264cc046c6c61ef8e24f2c3d744359615b7d57a87c7580078a/plone.behavior-1.3.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5d28d34abb503027806c4ccce343ecf0", "sha256": "6a6d4c81d8723ebcacfa56a684aab1d8c172aa6e1cbb86b273179193e5856901"}, "downloads": -1, "filename": "plone.behavior-1.3.2.tar.gz", "has_sig": false, "md5_digest": "5d28d34abb503027806c4ccce343ecf0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25519, "upload_time": "2020-04-20T19:33:20", "upload_time_iso_8601": "2020-04-20T19:33:20.671657Z", "url": "https://files.pythonhosted.org/packages/92/ac/02c876e292d89eaee66d3eb460d291db3c18d94f40db41e838697a03eb14/plone.behavior-1.3.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:53:02 2020"}