{"info": {"author": "Noam Benelli and Alex Liberzon", "author_email": "alex.liberzon@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 2.7"], "description": "[![DOI](https://www.zenodo.org/badge/116568819.svg)](https://www.zenodo.org/badge/latestdoi/116568819)\n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/alexliberzonlab/mothpy/master?filepath=notebooks%2Fmothpy_getting_started.ipynb)\n\n# MothPy\n\nThe `mothpy` package is a NumPy based implementation of moth-inspired navigation strategies that uses\n`pompy` library to create the puff, wind and concentration models. See `pompy/Readme.md`\nfor details\n\n## What is this repository for?\n\nThis Python package allows simulation moth-like navigators in dynamic 2D odour\nconcentration fields spread in turbulent flows\n\nLiberzon, Harrington, Daniel, Gurka, Harari and Zilman  *\"Moth-inspired navigation algorithm in a turbulent odor plume from a pulsating source\"* proposed a novel navigator principle using properties of a turbulent patchy plume, https://journals.plos.org/plosone/article/comments?id=10.1371/journal.pone.0198422 \n\nIn order to compare this moth-inspired navigator with other navigator types available in the literature, e.g. by Carde and co-workers, we use `pompy` https://github.com/InsectRobotics/pompy and add these moth-inspiried navigators to its simulation fields. We try to create mean wind with meandering and turbulence and vary odor release parameters to test various navigators' statistics, e.g. success rate, flight time, etc. \n\n\n## Installation and requirements\n\n    Python 2.7\n    Numpy\n    Scipy\n    Matplotlib\n    pompy*\n\nNote: we use an older version of `pompy`, included in the repository. In the future, we would be able to update to a newer version of `pompy` and implement it as a submodule. \n\n## Example usage\n\n```python\n\npython compare_navigators_in_different_wind_conditions.py\n\n```\n\n![Demo flight](img/Demonstration_of_different_navigation_strategies.png)\n\n## How to create figures from the paper\n\n### Set up the navigators (optional)\n\nThe file Casting_competition initiates the navigators to compete in the simulation. Four loops initiate four equal sized groups of navigators, their properties can be changed within these loops - navigation and casting strategies, location, and so on. \nFor more information about navigators check out the models file.\n\n### Set up the wind and plume conditions (optional)\n\nThe file Compare_navigtors... initiates the main loop. For each iteration a new plume and wind model are initiated for the simulation to occur in. The function generate_job dictates the terms of the simulation in terms of wind and plume partameteres. In order to set the simulation enter the required parameters as input for generate_job. For example:\n\n```python\n\nfor i in range(4):\n    job_file_name = 'job'+ str(i)+ '.json'\n    data_file_name = 'data'+ str(i)+ '.json'\n    generate_job(char_time = 3.5, amplitude =0.1, job_file = job_file_name,\n                    t_max =15, puff_release_rate = 100,\n                    puff_spread_rate = 0.0001*(1+i),\n                    dt = 0.01, num_it = 1)\n```\n\nThe only value that changes is the puff spread rate, varying from 0.0001 to 0.0004.\nMake sure that only one variable of the simulation changes with each iteration. Multivaribale changes will create problems later on.\n\n#### Run `comapare_navigators.py`\n\nWhen the file is run the wind and plume paramters that have been set are saved into \"job\" files, one JSON file for each iteration (job0.JSON, job1.JSON...).\n\nThe trajectories of the navigators are saved as \"data\" files, (data0.JSON, data1.JSON), on which the later analyses will be made. \nNotice the following line\n\n```python\n save_plot(job_file_name, data_file_name, title, navigator_titles)\n```\n\nWould save an image per each navigation attempt in the default settings, and that means 800 images. Better if you comment it out `#`. That could supply useful input in some cases.\n\n#### Run `line_graphs.py`\n\nThe file line_graphs plots bar graphs of the four different simulations. It read from the Data and Job files, so those could be replaced and There is no need to set up anything for this file, just run it. The output should look like this:\n\n![Success Percentage vs Puff Spread Rate](img/spVSpsr.png)\n![Average Navigation Time vs Puff Spread Rate](img/spVSpsr.png)\n\n## How to manage and design navigators\n\n### initiating a navigator\n\nLet us look at this example from the casting_competition file:\n\n```python\n navigator1 = models.moth_modular(sim_region, cd['x_start'], cd['y_start'], cd['nav_type'] , cd['cast_type'], cd['wait_type'])\n```\n\nThe navigator is initiated with it is initial `x` and `y` coordinates and the modes of *navigating, casting and waiting*.\n\n### Wait, cast and navigation types\n\nA navigator is an object of the `moth_modular` class. It has an attribute to define each movement type, `wait_type, cast_type, nav_type`.\n\nThe attribute itself can be an integer or a string, it doesn't matter, but it should correlate to a signifier inside of the corresponding function. For example, let's look at the casting function\n\n```python\ndef cast(self,wind_vel_at_pos):\n        if self.state != 'cast' :\n            #if this is the beginging of a new casting phase\n            self.change_direction()\n        if self.cast_type == 0:\n            self.u=0\n            self.v=0\n        if self.cast_type == 1:\n            self.calculate_wind_angle(wind_vel_at_pos)\n            self.u = -self.speed*np.cos(self.gamma+self.wind_angle)\n            self.v = self.speed*np.sin(self.gamma+self.wind_angle)\n        if self.cast_type == 2:\n            #define different betas for different casting patterns\n            self.cast2(wind_vel_at_pos)\n```\n\nThe function, like all movement functions, takes as input the parameters of the navigator and the wind velocity at the position (as calculated by the wind model).\nThe first conditional changes the direction of casting from the previous direction. This has nothing to with the cast type. \nThe second, third and fourth conditionals are dependent on the cast type, and use it as an indicator as to how to move. Note that the function can call upon other functions. The stracture of the `wait` and `navigate` are very similar - The function sets the velocity `(u,v)` of the navigator. The actual time step is performed in the update function.\n\n#### Defining new movement types\n\nIn order to create a new waiting, casting or navigation, first enter the models file. For example, let's say we would like to design a new waiting mode. First, we sould define a condition within the waiting function.\n\n```python\ndef wait(self, wind_vel_at_pos):\n    if wait_type == 'example wait type':\n```\n\nNow, if the navigator was initiated to so its wait type attribute is 'example wait type' the wait function will be directed into the actions we define under that conditional. Secondly, define the changes in you would like to be made to the velocity of the navigator:\n\n```python\ndef wait(self, wind_vel_at_pos):\n    if wait_type == 'example wait type':\n        u *= 1.1\n        v *= 1.1\n```\n\nThe same approach should be applied to any of the movement functions. After we defined the new condition, we can use it when initiating a new navigator:\n\n```python\n navigator1 = models.moth_modular(sim_region, cd['x_start'], cd['y_start'], cd['nav_type'], cd['cast_type'], 'example wait type')\n```\n\n\n## How to cite this work\n\nPlease use the DOI in the suggested form: \n\nBenneli, N. and Liberzon, A. \"MothPy - a moth-inspired navigator flying in a plume-odor simulation fields\" [![DOI](https://www.zenodo.org/badge/116568819.svg)](https://www.zenodo.org/badge/latestdoi/116568819)\n\n\n## Run the Getting Starting test online: \n[![Binder](https://mybinder.org/badge_logo.svg)](https://mybinder.org/v2/gh/alexliberzonlab/mothpy/master?filepath=notebooks%2Fmothpy_getting_started.ipynb)\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alexliberzonlab/mothpy", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "mothpy", "package_url": "https://pypi.org/project/mothpy/", "platform": "", "project_url": "https://pypi.org/project/mothpy/", "project_urls": {"Homepage": "https://github.com/alexliberzonlab/mothpy"}, "release_url": "https://pypi.org/project/mothpy/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "MothPy allows simulation moth-like navigators in dynamic 2D odour concentration fields spread in turbulent flows", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://www.zenodo.org/badge/latestdoi/116568819\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c63505ca1a0cfab97e1e1427835255571b405ab0/68747470733a2f2f7777772e7a656e6f646f2e6f72672f62616467652f3131363536383831392e737667\"></a>\n<a href=\"https://mybinder.org/v2/gh/alexliberzonlab/mothpy/master?filepath=notebooks%2Fmothpy_getting_started.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n<h1>MothPy</h1>\n<p>The <code>mothpy</code> package is a NumPy based implementation of moth-inspired navigation strategies that uses\n<code>pompy</code> library to create the puff, wind and concentration models. See <code>pompy/Readme.md</code>\nfor details</p>\n<h2>What is this repository for?</h2>\n<p>This Python package allows simulation moth-like navigators in dynamic 2D odour\nconcentration fields spread in turbulent flows</p>\n<p>Liberzon, Harrington, Daniel, Gurka, Harari and Zilman  <em>\"Moth-inspired navigation algorithm in a turbulent odor plume from a pulsating source\"</em> proposed a novel navigator principle using properties of a turbulent patchy plume, <a href=\"https://journals.plos.org/plosone/article/comments?id=10.1371/journal.pone.0198422\" rel=\"nofollow\">https://journals.plos.org/plosone/article/comments?id=10.1371/journal.pone.0198422</a></p>\n<p>In order to compare this moth-inspired navigator with other navigator types available in the literature, e.g. by Carde and co-workers, we use <code>pompy</code> <a href=\"https://github.com/InsectRobotics/pompy\" rel=\"nofollow\">https://github.com/InsectRobotics/pompy</a> and add these moth-inspiried navigators to its simulation fields. We try to create mean wind with meandering and turbulence and vary odor release parameters to test various navigators' statistics, e.g. success rate, flight time, etc.</p>\n<h2>Installation and requirements</h2>\n<pre><code>Python 2.7\nNumpy\nScipy\nMatplotlib\npompy*\n</code></pre>\n<p>Note: we use an older version of <code>pompy</code>, included in the repository. In the future, we would be able to update to a newer version of <code>pompy</code> and implement it as a submodule.</p>\n<h2>Example usage</h2>\n<pre><span class=\"n\">python</span> <span class=\"n\">compare_navigators_in_different_wind_conditions</span><span class=\"o\">.</span><span class=\"n\">py</span>\n</pre>\n<p><img alt=\"Demo flight\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9695b3b6cc1de827c712b1419312ffbb58d9e38b/696d672f44656d6f6e7374726174696f6e5f6f665f646966666572656e745f6e617669676174696f6e5f737472617465676965732e706e67\"></p>\n<h2>How to create figures from the paper</h2>\n<h3>Set up the navigators (optional)</h3>\n<p>The file Casting_competition initiates the navigators to compete in the simulation. Four loops initiate four equal sized groups of navigators, their properties can be changed within these loops - navigation and casting strategies, location, and so on.\nFor more information about navigators check out the models file.</p>\n<h3>Set up the wind and plume conditions (optional)</h3>\n<p>The file Compare_navigtors... initiates the main loop. For each iteration a new plume and wind model are initiated for the simulation to occur in. The function generate_job dictates the terms of the simulation in terms of wind and plume partameteres. In order to set the simulation enter the required parameters as input for generate_job. For example:</p>\n<pre><span class=\"k\">for</span> <span class=\"n\">i</span> <span class=\"ow\">in</span> <span class=\"nb\">range</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">):</span>\n    <span class=\"n\">job_file_name</span> <span class=\"o\">=</span> <span class=\"s1\">'job'</span><span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span> <span class=\"s1\">'.json'</span>\n    <span class=\"n\">data_file_name</span> <span class=\"o\">=</span> <span class=\"s1\">'data'</span><span class=\"o\">+</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">i</span><span class=\"p\">)</span><span class=\"o\">+</span> <span class=\"s1\">'.json'</span>\n    <span class=\"n\">generate_job</span><span class=\"p\">(</span><span class=\"n\">char_time</span> <span class=\"o\">=</span> <span class=\"mf\">3.5</span><span class=\"p\">,</span> <span class=\"n\">amplitude</span> <span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"n\">job_file</span> <span class=\"o\">=</span> <span class=\"n\">job_file_name</span><span class=\"p\">,</span>\n                    <span class=\"n\">t_max</span> <span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">puff_release_rate</span> <span class=\"o\">=</span> <span class=\"mi\">100</span><span class=\"p\">,</span>\n                    <span class=\"n\">puff_spread_rate</span> <span class=\"o\">=</span> <span class=\"mf\">0.0001</span><span class=\"o\">*</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"o\">+</span><span class=\"n\">i</span><span class=\"p\">),</span>\n                    <span class=\"n\">dt</span> <span class=\"o\">=</span> <span class=\"mf\">0.01</span><span class=\"p\">,</span> <span class=\"n\">num_it</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>The only value that changes is the puff spread rate, varying from 0.0001 to 0.0004.\nMake sure that only one variable of the simulation changes with each iteration. Multivaribale changes will create problems later on.</p>\n<h4>Run <code>comapare_navigators.py</code></h4>\n<p>When the file is run the wind and plume paramters that have been set are saved into \"job\" files, one JSON file for each iteration (job0.JSON, job1.JSON...).</p>\n<p>The trajectories of the navigators are saved as \"data\" files, (data0.JSON, data1.JSON), on which the later analyses will be made.\nNotice the following line</p>\n<pre> <span class=\"n\">save_plot</span><span class=\"p\">(</span><span class=\"n\">job_file_name</span><span class=\"p\">,</span> <span class=\"n\">data_file_name</span><span class=\"p\">,</span> <span class=\"n\">title</span><span class=\"p\">,</span> <span class=\"n\">navigator_titles</span><span class=\"p\">)</span>\n</pre>\n<p>Would save an image per each navigation attempt in the default settings, and that means 800 images. Better if you comment it out <code>#</code>. That could supply useful input in some cases.</p>\n<h4>Run <code>line_graphs.py</code></h4>\n<p>The file line_graphs plots bar graphs of the four different simulations. It read from the Data and Job files, so those could be replaced and There is no need to set up anything for this file, just run it. The output should look like this:</p>\n<p><img alt=\"Success Percentage vs Puff Spread Rate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dc82c963ae8945018bc0d57b6fd39da359344c2/696d672f737056537073722e706e67\">\n<img alt=\"Average Navigation Time vs Puff Spread Rate\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5dc82c963ae8945018bc0d57b6fd39da359344c2/696d672f737056537073722e706e67\"></p>\n<h2>How to manage and design navigators</h2>\n<h3>initiating a navigator</h3>\n<p>Let us look at this example from the casting_competition file:</p>\n<pre> <span class=\"n\">navigator1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">moth_modular</span><span class=\"p\">(</span><span class=\"n\">sim_region</span><span class=\"p\">,</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'x_start'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'y_start'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'nav_type'</span><span class=\"p\">]</span> <span class=\"p\">,</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'cast_type'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'wait_type'</span><span class=\"p\">])</span>\n</pre>\n<p>The navigator is initiated with it is initial <code>x</code> and <code>y</code> coordinates and the modes of <em>navigating, casting and waiting</em>.</p>\n<h3>Wait, cast and navigation types</h3>\n<p>A navigator is an object of the <code>moth_modular</code> class. It has an attribute to define each movement type, <code>wait_type, cast_type, nav_type</code>.</p>\n<p>The attribute itself can be an integer or a string, it doesn't matter, but it should correlate to a signifier inside of the corresponding function. For example, let's look at the casting function</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">cast</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span><span class=\"n\">wind_vel_at_pos</span><span class=\"p\">):</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s1\">'cast'</span> <span class=\"p\">:</span>\n            <span class=\"c1\">#if this is the beginging of a new casting phase</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">change_direction</span><span class=\"p\">()</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cast_type</span> <span class=\"o\">==</span> <span class=\"mi\">0</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">u</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span><span class=\"o\">=</span><span class=\"mi\">0</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cast_type</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">calculate_wind_angle</span><span class=\"p\">(</span><span class=\"n\">wind_vel_at_pos</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">u</span> <span class=\"o\">=</span> <span class=\"o\">-</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">speed</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">cos</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gamma</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wind_angle</span><span class=\"p\">)</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">v</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">speed</span><span class=\"o\">*</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sin</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">gamma</span><span class=\"o\">+</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">wind_angle</span><span class=\"p\">)</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cast_type</span> <span class=\"o\">==</span> <span class=\"mi\">2</span><span class=\"p\">:</span>\n            <span class=\"c1\">#define different betas for different casting patterns</span>\n            <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">cast2</span><span class=\"p\">(</span><span class=\"n\">wind_vel_at_pos</span><span class=\"p\">)</span>\n</pre>\n<p>The function, like all movement functions, takes as input the parameters of the navigator and the wind velocity at the position (as calculated by the wind model).\nThe first conditional changes the direction of casting from the previous direction. This has nothing to with the cast type.\nThe second, third and fourth conditionals are dependent on the cast type, and use it as an indicator as to how to move. Note that the function can call upon other functions. The stracture of the <code>wait</code> and <code>navigate</code> are very similar - The function sets the velocity <code>(u,v)</code> of the navigator. The actual time step is performed in the update function.</p>\n<h4>Defining new movement types</h4>\n<p>In order to create a new waiting, casting or navigation, first enter the models file. For example, let's say we would like to design a new waiting mode. First, we sould define a condition within the waiting function.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">wind_vel_at_pos</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">wait_type</span> <span class=\"o\">==</span> <span class=\"s1\">'example wait type'</span><span class=\"p\">:</span>\n</pre>\n<p>Now, if the navigator was initiated to so its wait type attribute is 'example wait type' the wait function will be directed into the actions we define under that conditional. Secondly, define the changes in you would like to be made to the velocity of the navigator:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">wait</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">wind_vel_at_pos</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">wait_type</span> <span class=\"o\">==</span> <span class=\"s1\">'example wait type'</span><span class=\"p\">:</span>\n        <span class=\"n\">u</span> <span class=\"o\">*=</span> <span class=\"mf\">1.1</span>\n        <span class=\"n\">v</span> <span class=\"o\">*=</span> <span class=\"mf\">1.1</span>\n</pre>\n<p>The same approach should be applied to any of the movement functions. After we defined the new condition, we can use it when initiating a new navigator:</p>\n<pre> <span class=\"n\">navigator1</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">moth_modular</span><span class=\"p\">(</span><span class=\"n\">sim_region</span><span class=\"p\">,</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'x_start'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'y_start'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'nav_type'</span><span class=\"p\">],</span> <span class=\"n\">cd</span><span class=\"p\">[</span><span class=\"s1\">'cast_type'</span><span class=\"p\">],</span> <span class=\"s1\">'example wait type'</span><span class=\"p\">)</span>\n</pre>\n<h2>How to cite this work</h2>\n<p>Please use the DOI in the suggested form:</p>\n<p>Benneli, N. and Liberzon, A. \"MothPy - a moth-inspired navigator flying in a plume-odor simulation fields\" <a href=\"https://www.zenodo.org/badge/latestdoi/116568819\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c63505ca1a0cfab97e1e1427835255571b405ab0/68747470733a2f2f7777772e7a656e6f646f2e6f72672f62616467652f3131363536383831392e737667\"></a></p>\n<h2>Run the Getting Starting test online:</h2>\n<p><a href=\"https://mybinder.org/v2/gh/alexliberzonlab/mothpy/master?filepath=notebooks%2Fmothpy_getting_started.ipynb\" rel=\"nofollow\"><img alt=\"Binder\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/85e91bbb928104e4ce317951541520c6b9c170e1/68747470733a2f2f6d7962696e6465722e6f72672f62616467655f6c6f676f2e737667\"></a></p>\n\n          </div>"}, "last_serial": 5629054, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "f491677d23141b767426abc19ef6a481", "sha256": "dadbe8df18cb16c4ae9d892835183697d8ce3cb0746f1f16b4b88bac6b44a748"}, "downloads": -1, "filename": "mothpy-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f491677d23141b767426abc19ef6a481", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 49704, "upload_time": "2019-08-03T20:02:54", "upload_time_iso_8601": "2019-08-03T20:02:54.711115Z", "url": "https://files.pythonhosted.org/packages/0b/ad/d5af77a786b65ff91f3936b560247459337247ceb6b3ddc067fec1c1e944/mothpy-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c16c8e4e4c487552686e92a3ba0b1d0f", "sha256": "3cf71e75842b1b2b1d8422c894e395ac4638a73291b9e2520ead7ffa5425a4fc"}, "downloads": -1, "filename": "mothpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c16c8e4e4c487552686e92a3ba0b1d0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40173, "upload_time": "2019-08-03T20:02:57", "upload_time_iso_8601": "2019-08-03T20:02:57.699319Z", "url": "https://files.pythonhosted.org/packages/f3/b7/f783a64f5dd6e03454738b80b172ea50e1067773aceac1d9256efa8e4c60/mothpy-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f491677d23141b767426abc19ef6a481", "sha256": "dadbe8df18cb16c4ae9d892835183697d8ce3cb0746f1f16b4b88bac6b44a748"}, "downloads": -1, "filename": "mothpy-0.0.1-py2-none-any.whl", "has_sig": false, "md5_digest": "f491677d23141b767426abc19ef6a481", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 49704, "upload_time": "2019-08-03T20:02:54", "upload_time_iso_8601": "2019-08-03T20:02:54.711115Z", "url": "https://files.pythonhosted.org/packages/0b/ad/d5af77a786b65ff91f3936b560247459337247ceb6b3ddc067fec1c1e944/mothpy-0.0.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c16c8e4e4c487552686e92a3ba0b1d0f", "sha256": "3cf71e75842b1b2b1d8422c894e395ac4638a73291b9e2520ead7ffa5425a4fc"}, "downloads": -1, "filename": "mothpy-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c16c8e4e4c487552686e92a3ba0b1d0f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 40173, "upload_time": "2019-08-03T20:02:57", "upload_time_iso_8601": "2019-08-03T20:02:57.699319Z", "url": "https://files.pythonhosted.org/packages/f3/b7/f783a64f5dd6e03454738b80b172ea50e1067773aceac1d9256efa8e4c60/mothpy-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:51:38 2020"}