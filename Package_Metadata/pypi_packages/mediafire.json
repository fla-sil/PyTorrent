{"info": {"author": "Roman Yepishev", "author_email": "rye@keypressure.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4"], "description": "=========================\nMediaFire Python Open SDK\n=========================\n\n\nThis is a Python implementation of `MediaFire Core API`_ client.\n\n.. _MediaFire Core Api: http://www.mediafire.com/developers/core_api/\n\n.. image:: https://travis-ci.org/roman-yepishev/mediafire-python-open-sdk.svg?branch=master\n    :target: https://travis-ci.org/roman-yepishev/mediafire-python-open-sdk\n\n==========\nInstalling\n==========\n\n.. code-block:: bash\n\n    $ pip install mediafire\n\n==================\nWhat should I use?\n==================\n\nIf you are in a hurry, use ``MediaFireClient`` - it contains enough functions to\nget your uploads/downloads and file listings working. It does not have a stable API,\nand has rudimentary test coverage only.\n\nYou may want to stick to ``MediaFireApi`` and ``MediaFireUploader`` to have as much\ncontrol as possible over your application flow.\n\n======================\nmediafire.MediaFireApi\n======================\n\nAPI Client library provides an interface to MediaFire API. It handles\nrequests, responses, signatures and errors.\n\nUsage:\n\n.. code-block:: python\n\n    from mediafire import MediaFireApi\n\n    api = MediaFireApi()\n    session = api.user_get_session_token(\n        email='your.email@example.net',\n        password='password',\n        app_id='42511')\n\n    # API client does not know about the token\n    # until explicitly told about it:\n    api.session = session\n\n    response = api.user_get_info()\n    print(response['user_info']['display_name'])\n\n    # Or directly for methods that are not yet wrapped\n    response = api.request(\"upload/add_web_upload\", {\n        \"url\": \"http://forum.mediafiredev.com/images/mfforumlogo.png\",\n        \"filename\": \"mfforumlogo.png\"})\n\n    response = api.request(\"upload/get_web_uploads\",\n                           {\"key\": response['upload_key']})\n\n\nAPI Client library supports operation w/o session_token. In this case all\noperations that do require session_token will fail with Access denied error:\n\n.. code-block:: python\n\n    from mediafire import MediaFireApi\n\n    api = MediaFireApi()\n    response = api.system_get_info()\n    print(response)  # prints system info\n\n    response = api.user_get_info()  # fails with \"Session token is missing\"\n\nOnce set, session token can be unset:\n\n.. code-block:: python\n\n    api.session = None\n    # or\n    del api.session\n\nFor information on wrapped methods, see ``pydoc mediafire.api``. For\ndocumentation on actual values expected, see `MediaFire Core API`_\ndocumentation.\n\nAll wrapped methods follow the same naming convention, ``category_action``, so\nupload/instant is ``upload_instant``.\n\nYou can construct the call yourself easily:\n\n.. code-block:: python\n\n    response = api.request(\"user/set_avatar\",\n                           {\"quick_key\": \"123456789012345\"})\n\nDownloading\n-----------\n\nAPI client does not handle regular file downloads because these are simple HTTP requests\nto URLs returned by \"file/get_links\". Here's how you can do that yourself:\n\n.. code-block:: python\n\n    response = api.file_get_links('c94lcpx3vax6xp3')\n    normal_download_url = response['links'][0]['normal_download']\n\n    response = requests.get(normal_download_url, stream=True)\n    with io.open(\"/tmp/green.jpg\", 'wb') as fd:\n        for chunk in response.iter_content(chunk_size=4096):\n            fd.write(chunk)\n\nIn case response is a file download, e.g. ``file/zip``, the response returned\nis a `requests.Response`_ object, which you can read from:\n\n.. code-block:: python\n\n    ...\n    response = api.request(\"file/zip\", {\"keys\": \"c94lcpx3vax6xp3\"})\n    with io.open(\"/tmp/green.zip\", 'wb') as fd:\n        for chunk in response.iter_content(chunk_size=4096):\n            fd.write(chunk)\n    ...\n\n.. _requests.Response: http://docs.python-requests.org/en/latest/api/#requests.Response\n\nSee Download_ documentation for more information.\n\n.. _Download: http://www.mediafire.com/developers/core_api/1.2/download/\n\n===========================\nmediafire.MediaFireUploader\n===========================\n\nMediaFire supports several upload methods and `MediaFireUploader` exposes a\nsingle `upload` method to make things easier:\n\n.. code-block:: python\n\n    from mediafire import (MediaFireApi, MediaFireUploader)\n\n    api = MediaFireApi()\n    uploader = MediaFireUploader(api)\n\n    # ... authenticate ...\n\n    fd = open('/path/to/file', 'rb')\n\n    result = uploader.upload(fd, 'Some filename.txt',\n                             folder_key='1234567890123')\n\n    pprint(api.file_get_info(result.quickkey))\n\n``result`` is a ``mediafire.uploader.UploadResult`` instance.\n\nFileDrop\n--------\n\nFor FileDrop uploads (i.e. when filedrop_key is used) only ``upload/instant``\nresult has quickkey. ``upload/instant`` and ``upload/resumable`` return\n``None`` for all the fields, since ``upload/poll`` does not support\nencrypted upload key.\n\n\n======================================\nmediafire.media.ConversionServerClient\n======================================\n\nThis API is subject to change\n\nThis is a very thin layer on top of Image and Document conversion API.\n\n.. code-block:: python\n\n    from mediafire.media import ConversionServerClient\n\n    conv = ConversionServerClient()\n\n    response = conv.request('2004', 'm8d6blce79xhxl5', 'i', size_id='1')\n    with open('/tmp/example.jpg', 'rb') as fd:\n        fd.write(response.content)\n\n\n================================\nmediafire.client.MediaFireClient\n================================\n\nThis API is subject to change\n\nHigh-level client library wraps API calls and presents simplified interface.\n\nSupported operations:\n\n* File upload\n* File download (direct download link)\n* Listing directories\n* Creating directories\n* Removing files and directories\n* Getting info about files and directories\n\nMediaFire resources can be referenced by path or by quickkey/folderkey.\n\n* **path**: ``mf:/Pictures/Sample.jpg`` or ``/Pictures/Sample.jpg``\n* **folder_key**: ``mf:6302u1a9p0a9x`` (``folder_key`` is 13 chars long)\n* **quick_key**: ``mf:46d3y4p8542kiyp`` (``quick_key`` is 15 chars long)\n\n.. code-block:: python\n\n    from mediafire.client import (MediaFireClient, File, Folder)\n\n    client = MediaFireClient()\n    client.login(email='your.email@example.net',\n        password='password',\n        app_id='42511')\n\n    client.upload_file(\"flower.jpg\", \"mf:/Pictures/\")\n    client.download_file(\"mf:/Pictures/flower.jpg\",\n                         \"flower-from-mediafire.jpg\")\n\n    for item in client.get_folder_contents_iter(\"mf:/Pictures\"):\n        if type(item) is File:\n            print(\"File: {}\".format(item['filename']))\n        elif type(item) is Folder:\n            print(\"Folder: {}\".format(item['name']))\n\nSee ``examples/mediafire-cli.py`` for high-level client usage.\n\nRequirements\n------------\n\n* python 2.7 or 3.4\n* six\n* requests\n* requests\\_toolbelt\n* responses (for testing)\n\nTests\n-----\n\nTest suite is located under ``tests/``\n\n.. code-block:: bash\n\n\n    git clone https://github.com/MediaFire/mediafire-python-open-sdk.git\n    cd mediafire-python-open-sdk\n    # Run tests with python 3 interpreter\n    PYTHONPATH=. python3 -munittest\n    # Run tests with python 2 interpreter\n    PYTHONPATH=. python -munittest discover\n\n================\nReporting issues\n================\n\nPlease use the `MediaFire/mediafire-python-open-sdk`_ project issue tracker\nto report issues with the implementation.\n\n.. _MediaFire/mediafire-python-open-sdk: https://github.com/MediaFire/mediafire-python-open-sdk\n\n\n=================\nAbout and License\n=================\n\nCopyright (c) 2014, Roman Yepishev. All rights reserved. Website: http://www.keypressure.com\n\nThis project was forked by MediaFire with explicit permission from Roman Yepishev on 10.24.2014\n\nThis project is made under BSD license. See LICENSE file for more information.\n\nMediaFire\u00ae is a registered trademark of the MediaFire, LLC.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/MediaFire/mediafire-python-open-sdk", "keywords": "mediafire cloud files sdk storage api upload", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "mediafire", "package_url": "https://pypi.org/project/mediafire/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/mediafire/", "project_urls": {"Homepage": "https://github.com/MediaFire/mediafire-python-open-sdk"}, "release_url": "https://pypi.org/project/mediafire/0.6.0/", "requires_dist": ["requests (<=2.11.1,>=2.4.1)", "requests-toolbelt (>=0.3.1)", "six (>=1.8.0)"], "requires_python": "", "summary": "Python MediaFire client library", "version": "0.6.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"mediafire-python-open-sdk\">\n<h2>MediaFire Python Open SDK</h2>\n<p>This is a Python implementation of <a href=\"http://www.mediafire.com/developers/core_api/\" rel=\"nofollow\">MediaFire Core API</a> client.</p>\n<a href=\"https://travis-ci.org/roman-yepishev/mediafire-python-open-sdk\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/roman-yepishev/mediafire-python-open-sdk.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/124da75f0762063f3bb71fd7929831ae47bf7a1d/68747470733a2f2f7472617669732d63692e6f72672f726f6d616e2d79657069736865762f6d65646961666972652d707974686f6e2d6f70656e2d73646b2e7376673f6272616e63683d6d6173746572\"></a>\n</div>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ pip install mediafire\n</pre>\n</div>\n<div id=\"what-should-i-use\">\n<h2>What should I use?</h2>\n<p>If you are in a hurry, use <tt>MediaFireClient</tt> - it contains enough functions to\nget your uploads/downloads and file listings working. It does not have a stable API,\nand has rudimentary test coverage only.</p>\n<p>You may want to stick to <tt>MediaFireApi</tt> and <tt>MediaFireUploader</tt> to have as much\ncontrol as possible over your application flow.</p>\n</div>\n<div id=\"mediafire-mediafireapi\">\n<h2>mediafire.MediaFireApi</h2>\n<p>API Client library provides an interface to MediaFire API. It handles\nrequests, responses, signatures and errors.</p>\n<p>Usage:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mediafire</span> <span class=\"kn\">import</span> <span class=\"n\">MediaFireApi</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">MediaFireApi</span><span class=\"p\">()</span>\n<span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_get_session_token</span><span class=\"p\">(</span>\n    <span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'your.email@example.net'</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span>\n    <span class=\"n\">app_id</span><span class=\"o\">=</span><span class=\"s1\">'42511'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># API client does not know about the token</span>\n<span class=\"c1\"># until explicitly told about it:</span>\n<span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"n\">session</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_get_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'user_info'</span><span class=\"p\">][</span><span class=\"s1\">'display_name'</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Or directly for methods that are not yet wrapped</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"upload/add_web_upload\"</span><span class=\"p\">,</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"http://forum.mediafiredev.com/images/mfforumlogo.png\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"filename\"</span><span class=\"p\">:</span> <span class=\"s2\">\"mfforumlogo.png\"</span><span class=\"p\">})</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"upload/get_web_uploads\"</span><span class=\"p\">,</span>\n                       <span class=\"p\">{</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'upload_key'</span><span class=\"p\">]})</span>\n</pre>\n<p>API Client library supports operation w/o session_token. In this case all\noperations that do require session_token will fail with Access denied error:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mediafire</span> <span class=\"kn\">import</span> <span class=\"n\">MediaFireApi</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">MediaFireApi</span><span class=\"p\">()</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">system_get_info</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"p\">)</span>  <span class=\"c1\"># prints system info</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">user_get_info</span><span class=\"p\">()</span>  <span class=\"c1\"># fails with \"Session token is missing\"</span>\n</pre>\n<p>Once set, session token can be unset:</p>\n<pre><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">session</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n<span class=\"c1\"># or</span>\n<span class=\"k\">del</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">session</span>\n</pre>\n<p>For information on wrapped methods, see <tt>pydoc mediafire.api</tt>. For\ndocumentation on actual values expected, see <a href=\"http://www.mediafire.com/developers/core_api/\" rel=\"nofollow\">MediaFire Core API</a>\ndocumentation.</p>\n<p>All wrapped methods follow the same naming convention, <tt>category_action</tt>, so\nupload/instant is <tt>upload_instant</tt>.</p>\n<p>You can construct the call yourself easily:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"user/set_avatar\"</span><span class=\"p\">,</span>\n                       <span class=\"p\">{</span><span class=\"s2\">\"quick_key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"123456789012345\"</span><span class=\"p\">})</span>\n</pre>\n<div id=\"downloading\">\n<h3>Downloading</h3>\n<p>API client does not handle regular file downloads because these are simple HTTP requests\nto URLs returned by \u201cfile/get_links\u201d. Here\u2019s how you can do that yourself:</p>\n<pre><span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">file_get_links</span><span class=\"p\">(</span><span class=\"s1\">'c94lcpx3vax6xp3'</span><span class=\"p\">)</span>\n<span class=\"n\">normal_download_url</span> <span class=\"o\">=</span> <span class=\"n\">response</span><span class=\"p\">[</span><span class=\"s1\">'links'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">][</span><span class=\"s1\">'normal_download'</span><span class=\"p\">]</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">requests</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">normal_download_url</span><span class=\"p\">,</span> <span class=\"n\">stream</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/green.jpg\"</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">iter_content</span><span class=\"p\">(</span><span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">):</span>\n        <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n</pre>\n<p>In case response is a file download, e.g. <tt>file/zip</tt>, the response returned\nis a <a href=\"http://docs.python-requests.org/en/latest/api/#requests.Response\" rel=\"nofollow\">requests.Response</a> object, which you can read from:</p>\n<pre><span class=\"o\">...</span>\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s2\">\"file/zip\"</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"keys\"</span><span class=\"p\">:</span> <span class=\"s2\">\"c94lcpx3vax6xp3\"</span><span class=\"p\">})</span>\n<span class=\"k\">with</span> <span class=\"n\">io</span><span class=\"o\">.</span><span class=\"n\">open</span><span class=\"p\">(</span><span class=\"s2\">\"/tmp/green.zip\"</span><span class=\"p\">,</span> <span class=\"s1\">'wb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"k\">for</span> <span class=\"n\">chunk</span> <span class=\"ow\">in</span> <span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">iter_content</span><span class=\"p\">(</span><span class=\"n\">chunk_size</span><span class=\"o\">=</span><span class=\"mi\">4096</span><span class=\"p\">):</span>\n        <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n<span class=\"o\">...</span>\n</pre>\n<p>See <a href=\"http://www.mediafire.com/developers/core_api/1.2/download/\" rel=\"nofollow\">Download</a> documentation for more information.</p>\n</div>\n</div>\n<div id=\"mediafire-mediafireuploader\">\n<h2>mediafire.MediaFireUploader</h2>\n<p>MediaFire supports several upload methods and <cite>MediaFireUploader</cite> exposes a\nsingle <cite>upload</cite> method to make things easier:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mediafire</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">MediaFireApi</span><span class=\"p\">,</span> <span class=\"n\">MediaFireUploader</span><span class=\"p\">)</span>\n\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">MediaFireApi</span><span class=\"p\">()</span>\n<span class=\"n\">uploader</span> <span class=\"o\">=</span> <span class=\"n\">MediaFireUploader</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... authenticate ...</span>\n\n<span class=\"n\">fd</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/path/to/file'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span>\n\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">uploader</span><span class=\"o\">.</span><span class=\"n\">upload</span><span class=\"p\">(</span><span class=\"n\">fd</span><span class=\"p\">,</span> <span class=\"s1\">'Some filename.txt'</span><span class=\"p\">,</span>\n                         <span class=\"n\">folder_key</span><span class=\"o\">=</span><span class=\"s1\">'1234567890123'</span><span class=\"p\">)</span>\n\n<span class=\"n\">pprint</span><span class=\"p\">(</span><span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">file_get_info</span><span class=\"p\">(</span><span class=\"n\">result</span><span class=\"o\">.</span><span class=\"n\">quickkey</span><span class=\"p\">))</span>\n</pre>\n<p><tt>result</tt> is a <tt>mediafire.uploader.UploadResult</tt> instance.</p>\n<div id=\"filedrop\">\n<h3>FileDrop</h3>\n<p>For FileDrop uploads (i.e. when filedrop_key is used) only <tt>upload/instant</tt>\nresult has quickkey. <tt>upload/instant</tt> and <tt>upload/resumable</tt> return\n<tt>None</tt> for all the fields, since <tt>upload/poll</tt> does not support\nencrypted upload key.</p>\n</div>\n</div>\n<div id=\"mediafire-media-conversionserverclient\">\n<h2>mediafire.media.ConversionServerClient</h2>\n<p>This API is subject to change</p>\n<p>This is a very thin layer on top of Image and Document conversion API.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mediafire.media</span> <span class=\"kn\">import</span> <span class=\"n\">ConversionServerClient</span>\n\n<span class=\"n\">conv</span> <span class=\"o\">=</span> <span class=\"n\">ConversionServerClient</span><span class=\"p\">()</span>\n\n<span class=\"n\">response</span> <span class=\"o\">=</span> <span class=\"n\">conv</span><span class=\"o\">.</span><span class=\"n\">request</span><span class=\"p\">(</span><span class=\"s1\">'2004'</span><span class=\"p\">,</span> <span class=\"s1\">'m8d6blce79xhxl5'</span><span class=\"p\">,</span> <span class=\"s1\">'i'</span><span class=\"p\">,</span> <span class=\"n\">size_id</span><span class=\"o\">=</span><span class=\"s1\">'1'</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">'/tmp/example.jpg'</span><span class=\"p\">,</span> <span class=\"s1\">'rb'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">fd</span><span class=\"p\">:</span>\n    <span class=\"n\">fd</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">response</span><span class=\"o\">.</span><span class=\"n\">content</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"mediafire-client-mediafireclient\">\n<h2>mediafire.client.MediaFireClient</h2>\n<p>This API is subject to change</p>\n<p>High-level client library wraps API calls and presents simplified interface.</p>\n<p>Supported operations:</p>\n<ul>\n<li>File upload</li>\n<li>File download (direct download link)</li>\n<li>Listing directories</li>\n<li>Creating directories</li>\n<li>Removing files and directories</li>\n<li>Getting info about files and directories</li>\n</ul>\n<p>MediaFire resources can be referenced by path or by quickkey/folderkey.</p>\n<ul>\n<li><strong>path</strong>: <tt><span class=\"pre\">mf:/Pictures/Sample.jpg</span></tt> or <tt>/Pictures/Sample.jpg</tt></li>\n<li><strong>folder_key</strong>: <tt>mf:6302u1a9p0a9x</tt> (<tt>folder_key</tt> is 13 chars long)</li>\n<li><strong>quick_key</strong>: <tt>mf:46d3y4p8542kiyp</tt> (<tt>quick_key</tt> is 15 chars long)</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">mediafire.client</span> <span class=\"kn\">import</span> <span class=\"p\">(</span><span class=\"n\">MediaFireClient</span><span class=\"p\">,</span> <span class=\"n\">File</span><span class=\"p\">,</span> <span class=\"n\">Folder</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span> <span class=\"o\">=</span> <span class=\"n\">MediaFireClient</span><span class=\"p\">()</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">login</span><span class=\"p\">(</span><span class=\"n\">email</span><span class=\"o\">=</span><span class=\"s1\">'your.email@example.net'</span><span class=\"p\">,</span>\n    <span class=\"n\">password</span><span class=\"o\">=</span><span class=\"s1\">'password'</span><span class=\"p\">,</span>\n    <span class=\"n\">app_id</span><span class=\"o\">=</span><span class=\"s1\">'42511'</span><span class=\"p\">)</span>\n\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">upload_file</span><span class=\"p\">(</span><span class=\"s2\">\"flower.jpg\"</span><span class=\"p\">,</span> <span class=\"s2\">\"mf:/Pictures/\"</span><span class=\"p\">)</span>\n<span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">download_file</span><span class=\"p\">(</span><span class=\"s2\">\"mf:/Pictures/flower.jpg\"</span><span class=\"p\">,</span>\n                     <span class=\"s2\">\"flower-from-mediafire.jpg\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">item</span> <span class=\"ow\">in</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">get_folder_contents_iter</span><span class=\"p\">(</span><span class=\"s2\">\"mf:/Pictures\"</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">File</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"File: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'filename'</span><span class=\"p\">]))</span>\n    <span class=\"k\">elif</span> <span class=\"nb\">type</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"n\">Folder</span><span class=\"p\">:</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Folder: </span><span class=\"si\">{}</span><span class=\"s2\">\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">item</span><span class=\"p\">[</span><span class=\"s1\">'name'</span><span class=\"p\">]))</span>\n</pre>\n<p>See <tt><span class=\"pre\">examples/mediafire-cli.py</span></tt> for high-level client usage.</p>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>python 2.7 or 3.4</li>\n<li>six</li>\n<li>requests</li>\n<li>requests_toolbelt</li>\n<li>responses (for testing)</li>\n</ul>\n</div>\n<div id=\"tests\">\n<h3>Tests</h3>\n<p>Test suite is located under <tt>tests/</tt></p>\n<pre>git clone https://github.com/MediaFire/mediafire-python-open-sdk.git\n<span class=\"nb\">cd</span> mediafire-python-open-sdk\n<span class=\"c1\"># Run tests with python 3 interpreter\n</span><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>. python3 -munittest\n<span class=\"c1\"># Run tests with python 2 interpreter\n</span><span class=\"nv\">PYTHONPATH</span><span class=\"o\">=</span>. python -munittest discover\n</pre>\n</div>\n</div>\n<div id=\"reporting-issues\">\n<h2>Reporting issues</h2>\n<p>Please use the <a href=\"https://github.com/MediaFire/mediafire-python-open-sdk\" rel=\"nofollow\">MediaFire/mediafire-python-open-sdk</a> project issue tracker\nto report issues with the implementation.</p>\n</div>\n<div id=\"about-and-license\">\n<h2>About and License</h2>\n<p>Copyright (c) 2014, Roman Yepishev. All rights reserved. Website: <a href=\"http://www.keypressure.com\" rel=\"nofollow\">http://www.keypressure.com</a></p>\n<p>This project was forked by MediaFire with explicit permission from Roman Yepishev on 10.24.2014</p>\n<p>This project is made under BSD license. See LICENSE file for more information.</p>\n<p>MediaFire\u00ae is a registered trademark of the MediaFire, LLC.</p>\n</div>\n\n          </div>"}, "last_serial": 2463313, "releases": {"0.2.0": [{"comment_text": "", "digests": {"md5": "531cba2f8bd01b41c13d1afd0e18688b", "sha256": "56147b587e463754fe5ab28b2fccc45058f2c291b9f822706ced9eeeae6e291a"}, "downloads": -1, "filename": "mediafire-0.2.0.tar.gz", "has_sig": true, "md5_digest": "531cba2f8bd01b41c13d1afd0e18688b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 16513, "upload_time": "2014-11-02T14:39:15", "upload_time_iso_8601": "2014-11-02T14:39:15.205168Z", "url": "https://files.pythonhosted.org/packages/0c/43/5677dddd7c85fceb30958f30f29930d041708cc1b2b50869a43d6ac3819b/mediafire-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "7b1d456913526fccf1b09b21d7581982", "sha256": "732a19e326c4d56400ad837393f9892ae417d76690685175400b061a02d608f8"}, "downloads": -1, "filename": "mediafire-0.3.0.tar.gz", "has_sig": true, "md5_digest": "7b1d456913526fccf1b09b21d7581982", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 17623, "upload_time": "2014-11-08T01:06:30", "upload_time_iso_8601": "2014-11-08T01:06:30.995550Z", "url": "https://files.pythonhosted.org/packages/66/b5/9db7c62c1e1a3ba28d6ab52e56294f8684e8b231b24ce4f1a217e2292b02/mediafire-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "83ff87859a3f41aff4f08edfa198bfe0", "sha256": "1fafe0115628aabbf108361be5474477721b92744c757bd22ec8c329596531e8"}, "downloads": -1, "filename": "mediafire-0.4.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "83ff87859a3f41aff4f08edfa198bfe0", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24120, "upload_time": "2015-05-09T12:38:58", "upload_time_iso_8601": "2015-05-09T12:38:58.927715Z", "url": "https://files.pythonhosted.org/packages/9d/55/fc2c8a52d7c00d3aaa1db1352d1598eb0cf4be7f31808aa493269fc07d52/mediafire-0.4.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5bcb90982d05f5e4b01ab3b5174130d9", "sha256": "189f21dc946f3c2bef50d72b1765a7a4a46047eead82c891a578bf82b8cad752"}, "downloads": -1, "filename": "mediafire-0.4.0.tar.gz", "has_sig": true, "md5_digest": "5bcb90982d05f5e4b01ab3b5174130d9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22359, "upload_time": "2015-05-09T12:39:38", "upload_time_iso_8601": "2015-05-09T12:39:38.269902Z", "url": "https://files.pythonhosted.org/packages/d0/3e/4a72cc77291110e5afa454d54f87700cf7c8a40372428f7a99b0b6f98b26/mediafire-0.4.0.tar.gz", "yanked": false}], "0.4.1": [{"comment_text": "", "digests": {"md5": "69ec4e473743c085de2117a86f11db80", "sha256": "12a57b2392e68b6da4420ae5d8192a632155279d6a2bd891908c69c0ec62fd69"}, "downloads": -1, "filename": "mediafire-0.4.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "69ec4e473743c085de2117a86f11db80", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 24641, "upload_time": "2015-05-23T03:28:46", "upload_time_iso_8601": "2015-05-23T03:28:46.906276Z", "url": "https://files.pythonhosted.org/packages/86/06/51a125633651a05ee575a30c10aaca47d71a1757555ac632db4367179cd9/mediafire-0.4.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "120e476b11da82bf7c0ffb50fa342d2a", "sha256": "5069b9eb317a8a671e8af20c0667087f0306d28a4c1a60cf465fca2f2dab8fdc"}, "downloads": -1, "filename": "mediafire-0.4.1.tar.gz", "has_sig": true, "md5_digest": "120e476b11da82bf7c0ffb50fa342d2a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22788, "upload_time": "2015-05-23T03:28:42", "upload_time_iso_8601": "2015-05-23T03:28:42.925714Z", "url": "https://files.pythonhosted.org/packages/d4/43/bca4c7c30079fb7dbb0128922e381d9faadb8bd8231d4e51a98f4dbfbde7/mediafire-0.4.1.tar.gz", "yanked": false}], "0.5.0": [{"comment_text": "", "digests": {"md5": "1881963e249d40e4b08862e8dd542b65", "sha256": "c6b68e021da1f7e5bc84c2fc898eb897545843ab72a98fe72d1f8f06bf989eaa"}, "downloads": -1, "filename": "mediafire-0.5.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1881963e249d40e4b08862e8dd542b65", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 26719, "upload_time": "2016-01-09T13:37:09", "upload_time_iso_8601": "2016-01-09T13:37:09.341959Z", "url": "https://files.pythonhosted.org/packages/6f/81/b27615726d86e2a6305cbb3d086406efec85025c4ae1f81f39b9c6723558/mediafire-0.5.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b5487cc965eadf0b527e77e0fa6e9187", "sha256": "a9045e0cd18a2a266715fb8d55439ca0529c3247f0be56c9874dc81f941bfb92"}, "downloads": -1, "filename": "mediafire-0.5.0.tar.gz", "has_sig": true, "md5_digest": "b5487cc965eadf0b527e77e0fa6e9187", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25070, "upload_time": "2016-01-09T13:37:14", "upload_time_iso_8601": "2016-01-09T13:37:14.228373Z", "url": "https://files.pythonhosted.org/packages/6f/c8/e426e769a28b8fd4263a7e52141085bcf64e5d14e32c6b967eb51861fb2d/mediafire-0.5.0.tar.gz", "yanked": false}], "0.5.1": [{"comment_text": "", "digests": {"md5": "1a4abf6843f52d381f97ab52d729389e", "sha256": "a3a959460993183381b3803f436ec1a509f24da6706d4841447ee926ed1247cb"}, "downloads": -1, "filename": "mediafire-0.5.1-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "1a4abf6843f52d381f97ab52d729389e", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27412, "upload_time": "2016-01-14T01:20:27", "upload_time_iso_8601": "2016-01-14T01:20:27.270590Z", "url": "https://files.pythonhosted.org/packages/af/c7/300a3340197b1b15942739fc9c70ea6b11d5cc903e0dea9d6aa19790b6a2/mediafire-0.5.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1e07b6ed235ce5e25a55e6c33b9361cb", "sha256": "ad4d36ff0bc49f7dd78be84a4f9fba08ef2c0f4cda829fadaab1521fb958fc51"}, "downloads": -1, "filename": "mediafire-0.5.1.tar.gz", "has_sig": true, "md5_digest": "1e07b6ed235ce5e25a55e6c33b9361cb", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25740, "upload_time": "2016-01-14T01:20:58", "upload_time_iso_8601": "2016-01-14T01:20:58.733461Z", "url": "https://files.pythonhosted.org/packages/3f/9a/8d11068512640529076103a6b4af75968d43f3e1b6ee79d2ed9bc1d88dfa/mediafire-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "5669ced57e0de7e41287b8ab12a15a89", "sha256": "bc17ccad6dbdf809409617b751d585da05152888ba2a7794e6828093b6a9a2e0"}, "downloads": -1, "filename": "mediafire-0.5.2-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "5669ced57e0de7e41287b8ab12a15a89", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 27509, "upload_time": "2016-01-31T22:22:40", "upload_time_iso_8601": "2016-01-31T22:22:40.101338Z", "url": "https://files.pythonhosted.org/packages/a2/c1/a1ba860da64f5db8e5ae1ddf25f96beca30c3ef8a75c6fb8d462bc992ecc/mediafire-0.5.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "64ff8878536b212aca049e1346d9ea4e", "sha256": "8f52a61075e15f39d01e838e26d44200843421732d5528a9571f4d7275e4886e"}, "downloads": -1, "filename": "mediafire-0.5.2.tar.gz", "has_sig": true, "md5_digest": "64ff8878536b212aca049e1346d9ea4e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25876, "upload_time": "2016-01-31T22:22:45", "upload_time_iso_8601": "2016-01-31T22:22:45.764792Z", "url": "https://files.pythonhosted.org/packages/93/0c/04688a3186c9f960c7cacb5279154a81859c990531d41a0d604f0669ac47/mediafire-0.5.2.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "132a51a0d2e257afac504267cb5bb003", "sha256": "b63e5d990cbe6e6fbf4e805a6c48591387ff3c7566077c398a0aa5f66de23751"}, "downloads": -1, "filename": "mediafire-0.6.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "132a51a0d2e257afac504267cb5bb003", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25887, "upload_time": "2016-11-16T03:28:20", "upload_time_iso_8601": "2016-11-16T03:28:20.496127Z", "url": "https://files.pythonhosted.org/packages/ab/47/e97dbc5c5cc3030d71159e26cb0120b7b6eff3776380a8b499fb8206fa0b/mediafire-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc2309dc8967dbe6f5046f306438aa09", "sha256": "d9182785856b858b8d7896740f0dbb012856a81e00132812bffbf0e344884d6b"}, "downloads": -1, "filename": "mediafire-0.6.0.tar.gz", "has_sig": true, "md5_digest": "dc2309dc8967dbe6f5046f306438aa09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21415, "upload_time": "2016-11-16T03:28:23", "upload_time_iso_8601": "2016-11-16T03:28:23.436483Z", "url": "https://files.pythonhosted.org/packages/76/33/6d6afe605253de4395329ea6480e51486241e7feb7b0c111fbc5ad0254f8/mediafire-0.6.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "132a51a0d2e257afac504267cb5bb003", "sha256": "b63e5d990cbe6e6fbf4e805a6c48591387ff3c7566077c398a0aa5f66de23751"}, "downloads": -1, "filename": "mediafire-0.6.0-py2.py3-none-any.whl", "has_sig": true, "md5_digest": "132a51a0d2e257afac504267cb5bb003", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 25887, "upload_time": "2016-11-16T03:28:20", "upload_time_iso_8601": "2016-11-16T03:28:20.496127Z", "url": "https://files.pythonhosted.org/packages/ab/47/e97dbc5c5cc3030d71159e26cb0120b7b6eff3776380a8b499fb8206fa0b/mediafire-0.6.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dc2309dc8967dbe6f5046f306438aa09", "sha256": "d9182785856b858b8d7896740f0dbb012856a81e00132812bffbf0e344884d6b"}, "downloads": -1, "filename": "mediafire-0.6.0.tar.gz", "has_sig": true, "md5_digest": "dc2309dc8967dbe6f5046f306438aa09", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21415, "upload_time": "2016-11-16T03:28:23", "upload_time_iso_8601": "2016-11-16T03:28:23.436483Z", "url": "https://files.pythonhosted.org/packages/76/33/6d6afe605253de4395329ea6480e51486241e7feb7b0c111fbc5ad0254f8/mediafire-0.6.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:56:37 2020"}