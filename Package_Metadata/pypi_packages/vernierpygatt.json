{"info": {"author": "Chris Peplin <github@rhubarbtech.com>, Vernier Software and Technology", "author_email": "info@vernier.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "License :: OSI Approved :: MIT License", "Programming Language :: Python", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "pygatt - Python Module for Bluetooth LE Generic Attribute Profile (GATT).\n=========================================================================\n\nThis Module allows reading and writing to GATT descriptors on devices\nsuch as fitness trackers, sensors, and anything implementing standard\nGATT Descriptor behavior.\n\npygatt provides a Pythonic API by wrapping two different backends:\n\n-  BlueZ (requires Linux), using the ``gatttool`` command-line utility.\n-  Bluegiga's BGAPI, compatible with USB adapters like the BLED112.\n\nMotivation\n----------\n\nDespite the popularity of BLE, we have yet to find a good programming\ninterface for it on desktop computers. Since most peripherals are\ndesigned to work with smartphones, this space is neglected. One\ninteractive interface, BlueZ's ``gatttool``, is functional but difficult\nto use programatically. BlueZ itself obviously works, but the interface\nleaves something to be desired and only works in Linux.\n\nRequirements\n------------\n\n-  Python 2.7.5 or greater, or Python 3.5 or greater\n\n   -  Python 2.7.3's ``struct`` library has a bug that will break PyGATT - 2.7.5\n         or greater is recommended.\n\n-  BlueZ 5.18 or greater (with gatttool) - required for the gatttool\n   backend only.\n\n   -  Tested on 5.18, 5.21, 5.35 and 5.43\n\n-  GATTToolBackend requires Linux (i.e. not Windows compatible)\n\nInstallation\n------------\n\nInstall ``pygatt`` with pip from PyPI:\n\n::\n\n    $ pip install pygatt\n\nThe BlueZ backend is not supported by default as it requires\n``pexpect``, which can only be installed in a UNIX-based environment. If\nyou wish to use that backend, install the optional dependencies with:\n\n::\n\n    $ pip install \"pygatt[GATTTOOL]\"\n\nInstall the latest development version of ``pygatt`` with pip:\n\n::\n\n    $ pip install git+https://github.com/peplin/pygatt\n\nExample Use\n-----------\n\nThe primary API for users of this library is provided by\n``pygatt.BLEBackend`` and ``pygatt.BLEDevice``. After initializing an\ninstance of the preferred backend (available implementations are found\nin ``pygatt.backends``, use the ``BLEBackend.connect`` method to connect\nto a device and get an instance of ``BLEDevice.``\n\n.. code:: python\n\n    import pygatt\n\n    # The BGAPI backend will attemt to auto-discover the serial device name of the\n    # attached BGAPI-compatible USB adapter.\n    adapter = pygatt.BGAPIBackend()\n\n    try:\n        adapter.start()\n        device = adapter.connect('01:23:45:67:89:ab')\n        value = device.char_read(\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\")\n    finally:\n        adapter.stop()\n\nNote that not all backends support connecting to more than 1 device at\nat time, so calling ``BLEBackend.connect`` again may terminate existing\nconnections.\n\nHere's the same example using the GATTTool backend. It's identical\nexcept for the initialization of the backend:\n\n.. code:: python\n\n    import pygatt\n\n    adapter = pygatt.GATTToolBackend()\n\n    try:\n        adapter.start()\n        device = adapter.connect('01:23:45:67:89:ab')\n        value = device.char_read(\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\")\n    finally:\n        adapter.stop()\n\nNotifications Example\n---------------------\n\nThis example uses the gatttool backend to connect to a device with a specific\nMAC address, subscribes for notifications on a characteristic, and prints the\ndata returned in each notification.\n\n.. code:: python\n\n    import pygatt\n    from binascii import hexlify\n\n    adapter = pygatt.GATTToolBackend()\n\n    def handle_data(handle, value):\n        \"\"\"\n        handle -- integer, characteristic read handle the data was received on\n        value -- bytearray, the data returned in the notification\n        \"\"\"\n        print(\"Received data: %s\" % hexlify(value))\n\n    try:\n        adapter.start()\n        device = adapter.connect('01:23:45:67:89:ab')\n\n        device.subscribe(\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\",\n                         callback=handle_data)\n    finally:\n        adapter.stop()\n\nDebugging\n---------\n\nWhile debugging software using pygatt, it is often useful to see what's\nhappening inside the library. You can enable debugging logging and have\nit printed to your terminal with this code:\n\n::\n\n    import pygatt\n    import logging\n\n    logging.basicConfig()\n    logging.getLogger('pygatt').setLevel(logging.DEBUG)\n\nCan't find BGAPI device in Windows\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nYou may need to explicitly specify the COM port of your BGAPI-compatible\ndevice in windows, e.g.:\n\n::\n\n    adapter = pygatt.BGAPIBackend(serial_port='COM9')\n\nIf you provide the COM port name, but still get an error such as\n``WindowsError(2, 'The system cannot find the file specified.')``, try\nchanging the COM port of the device to a value under 10, e.g. ``COM9``.\n\nAuthors\n-------\n\n- Jeff Rowberg @jrowberg https://github.com/jrowberg/bglib\n- Greg Albrecht @ampledata https://github.com/ampledata/pygatt\n- Christopher Peplin @peplin https://github.com/peplin/pygatt\n- Morten Kjaergaard @mkjaergaard https://github.com/mkjaergaard/pygatt\n- Michael Saunby @msaunby https://github.com/msaunby/ble-sensor-pi\n- Steven Sloboda https://github.com/sloboste\n- Ilya Sukhanov @IlyaSukhanov\n- @dcliftreaves\n- Jonathan Dan\n- Ilann Adjedj\n- Ralph Hempel\n- Rene Jacobsen\n- Marcus Georgi\n- Alexandre Barachant\n- Michel Rivas Hernandez\n- Jean Regisser\n- David Martin\n- Pieter Hooimeijer\n\nReleasing to PyPI\n-----------------\n\nFor the maintainers of the project, when you want to make a release:\n\n-  Merge all of the changes into ``master``.\n-  Update the version in ``setup.py``.\n-  Update the ``CHANGELOG.mkd``\n-  Tag the commit and push to GitHub (will need to push to a separate\n   branch of PR first since ``master`` is a protected branch).\n-  Travis CI will take care of the rest - it will build and deploy\n   tagged commits to PyPI automatically.\n\nLicense\n-------\n\nCopyright 2015 Stratos Inc. and Orion Labs\n\nApache License, Version 2.0 and MIT License. See LICENSE.\n\n\n.. :changelog:\n\nRelease History\n================\n\nV3.2.0\n------\n\n- Fix: Reliably auto-reconnect after restarting BGAPI device. Fixes a bug in\n  first attempt at auto-reconnection, only worked in some environments. (#144)\n- Fix: Remove spurious \"no handler for logger\" warnings (#143)\n- Fix: Use enum-compat instead of enum34, to fix installation in Python 3.4+\n- Feature: Limit search window size for GATTTool backend, to avoid high CPU\n  usage for long running connections. (#123)\n- Feature: Add support for write commands to BGAPIBackend (#115)\n\nV3.1.1\n------\n\n- Improvement: Convert documentation to RST for better PyPI integration.\n\nV3.1.0\n------\n\n-  Fix: Support platforms without ``termios`` (Windows)\n-  Feature: Add ``char_read_handle`` to GATTTool backend.\n-  Improvement: Warn if ``hcitool`` requires a sudo authentication.\n-  Improvement: Allow BGAPI device more time to reboot for more reliable\n   discovery.\n-  Improvement: Interpret \"invalid file descriptor\" as a disconnect\n   event.\n-  Fix: Correctly handle service class UUIDs that aren't 16 bytes.\n-  Improvement: Support BLE devices with any UTF8 character.\n-  Improvement: Make gatttol prompt timeout configurable.\n-  Improvement: Gracefully stop ``lescan`` to avoid leaving the adapter\n   in a bad state.\n-  Improvement: Allow custom timeout for discovery on GATTTool backend.\n-  Fix: Make sure responses to char reads on BGAPI backend are from the\n   requested handle.\n-  Improvement: Raise and exception if trying to instantiate the\n   GATTTool backend in Windows.\n-  Improvement: If no BGAPI device attached, abort immediately.\n-  Fix: Use user's configured HCI device for connection and scanning in\n   GATTTool backend.\n\nV3.0.0\n------\n\n-  [API Change] The BGAPIBackend.connect method now takes the same\n   ``address_type`` argument as the GATTTool backend [BGAPI].\n-  [API Change] The ``address_type`` argument on both backends now\n   requires a value from a new enum, ``pygatt.BLEAddressType``, instead\n   of a string.\n-  Made Python 3 support a priority for both GATTTOOL and BGAPI\n   backends.\n-  Improve reliability of BGAPI backend by re-setting device for each\n   connection.\n\nV2.1.0\n------\n\n-  Added all standard GATT characteristics. [BGAPI]\n-  Move gatttool monitor to a background thread for increased\n   performance. [GATTTOOL]\n\nV2.0.1\n------\n\n-  Feature: Allow unsubscribing from notifications.\n-  Improvement: Allow more time to discover characteristics. [GATTTOOL]\n-  Improvement: Allow using gatttol backend without root. [GATTTOOL]\n-  Improvement: Standardize type of UUID so comparison always works (str\n   vs unicode)\n-  Fix: Fix packaging so the version on PyPI can be installed.\n-  Fix: Fix Python 3 compatibility.\n\nThanks to Ilya Sukhanov and Alexey Roslyakov for the changes in this\nrelease!\n\nv2.0.0\n------\n\n-  New API with support for multiple BLE adapters.\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/VernierST/pygatt", "keywords": "", "license": "Apache 2.0 and MIT", "maintainer": "", "maintainer_email": "", "name": "vernierpygatt", "package_url": "https://pypi.org/project/vernierpygatt/", "platform": "", "project_url": "https://pypi.org/project/vernierpygatt/", "project_urls": {"Homepage": "https://github.com/VernierST/pygatt"}, "release_url": "https://pypi.org/project/vernierpygatt/3.2.0/", "requires_dist": ["pyserial", "enum-compat", "pexpect; extra == 'gatttool'"], "requires_python": "", "summary": "Python Bluetooth LE (Low Energy) and GATT Library", "version": "3.2.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"pygatt-python-module-for-bluetooth-le-generic-attribute-profile-gatt\">\n<h2>pygatt - Python Module for Bluetooth LE Generic Attribute Profile (GATT).</h2>\n<p>This Module allows reading and writing to GATT descriptors on devices\nsuch as fitness trackers, sensors, and anything implementing standard\nGATT Descriptor behavior.</p>\n<p>pygatt provides a Pythonic API by wrapping two different backends:</p>\n<ul>\n<li>BlueZ (requires Linux), using the <tt>gatttool</tt> command-line utility.</li>\n<li>Bluegiga\u2019s BGAPI, compatible with USB adapters like the BLED112.</li>\n</ul>\n<div id=\"motivation\">\n<h3>Motivation</h3>\n<p>Despite the popularity of BLE, we have yet to find a good programming\ninterface for it on desktop computers. Since most peripherals are\ndesigned to work with smartphones, this space is neglected. One\ninteractive interface, BlueZ\u2019s <tt>gatttool</tt>, is functional but difficult\nto use programatically. BlueZ itself obviously works, but the interface\nleaves something to be desired and only works in Linux.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python 2.7.5 or greater, or Python 3.5 or greater<ul>\n<li><dl>\n<dt>Python 2.7.3\u2019s <tt>struct</tt> library has a bug that will break PyGATT - 2.7.5</dt>\n<dd>or greater is recommended.</dd>\n</dl>\n</li>\n</ul>\n</li>\n<li>BlueZ 5.18 or greater (with gatttool) - required for the gatttool\nbackend only.<ul>\n<li>Tested on 5.18, 5.21, 5.35 and 5.43</li>\n</ul>\n</li>\n<li>GATTToolBackend requires Linux (i.e. not Windows compatible)</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Install <tt>pygatt</tt> with pip from PyPI:</p>\n<pre>$ pip install pygatt\n</pre>\n<p>The BlueZ backend is not supported by default as it requires\n<tt>pexpect</tt>, which can only be installed in a UNIX-based environment. If\nyou wish to use that backend, install the optional dependencies with:</p>\n<pre>$ pip install \"pygatt[GATTTOOL]\"\n</pre>\n<p>Install the latest development version of <tt>pygatt</tt> with pip:</p>\n<pre>$ pip install git+https://github.com/peplin/pygatt\n</pre>\n</div>\n<div id=\"example-use\">\n<h3>Example Use</h3>\n<p>The primary API for users of this library is provided by\n<tt>pygatt.BLEBackend</tt> and <tt>pygatt.BLEDevice</tt>. After initializing an\ninstance of the preferred backend (available implementations are found\nin <tt>pygatt.backends</tt>, use the <tt>BLEBackend.connect</tt> method to connect\nto a device and get an instance of <tt>BLEDevice.</tt></p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygatt</span>\n\n<span class=\"c1\"># The BGAPI backend will attemt to auto-discover the serial device name of the</span>\n<span class=\"c1\"># attached BGAPI-compatible USB adapter.</span>\n<span class=\"n\">adapter</span> <span class=\"o\">=</span> <span class=\"n\">pygatt</span><span class=\"o\">.</span><span class=\"n\">BGAPIBackend</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'01:23:45:67:89:ab'</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">char_read</span><span class=\"p\">(</span><span class=\"s2\">\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\"</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p>Note that not all backends support connecting to more than 1 device at\nat time, so calling <tt>BLEBackend.connect</tt> again may terminate existing\nconnections.</p>\n<p>Here\u2019s the same example using the GATTTool backend. It\u2019s identical\nexcept for the initialization of the backend:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygatt</span>\n\n<span class=\"n\">adapter</span> <span class=\"o\">=</span> <span class=\"n\">pygatt</span><span class=\"o\">.</span><span class=\"n\">GATTToolBackend</span><span class=\"p\">()</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'01:23:45:67:89:ab'</span><span class=\"p\">)</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">char_read</span><span class=\"p\">(</span><span class=\"s2\">\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\"</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"notifications-example\">\n<h3>Notifications Example</h3>\n<p>This example uses the gatttool backend to connect to a device with a specific\nMAC address, subscribes for notifications on a characteristic, and prints the\ndata returned in each notification.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pygatt</span>\n<span class=\"kn\">from</span> <span class=\"nn\">binascii</span> <span class=\"kn\">import</span> <span class=\"n\">hexlify</span>\n\n<span class=\"n\">adapter</span> <span class=\"o\">=</span> <span class=\"n\">pygatt</span><span class=\"o\">.</span><span class=\"n\">GATTToolBackend</span><span class=\"p\">()</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">handle_data</span><span class=\"p\">(</span><span class=\"n\">handle</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    handle -- integer, characteristic read handle the data was received on\n    value -- bytearray, the data returned in the notification\n    \"\"\"</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Received data: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">hexlify</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">))</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">()</span>\n    <span class=\"n\">device</span> <span class=\"o\">=</span> <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'01:23:45:67:89:ab'</span><span class=\"p\">)</span>\n\n    <span class=\"n\">device</span><span class=\"o\">.</span><span class=\"n\">subscribe</span><span class=\"p\">(</span><span class=\"s2\">\"a1e8f5b1-696b-4e4c-87c6-69dfe0b0093b\"</span><span class=\"p\">,</span>\n                     <span class=\"n\">callback</span><span class=\"o\">=</span><span class=\"n\">handle_data</span><span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">adapter</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"debugging\">\n<h3>Debugging</h3>\n<p>While debugging software using pygatt, it is often useful to see what\u2019s\nhappening inside the library. You can enable debugging logging and have\nit printed to your terminal with this code:</p>\n<pre>import pygatt\nimport logging\n\nlogging.basicConfig()\nlogging.getLogger('pygatt').setLevel(logging.DEBUG)\n</pre>\n<div id=\"can-t-find-bgapi-device-in-windows\">\n<h4>Can\u2019t find BGAPI device in Windows</h4>\n<p>You may need to explicitly specify the COM port of your BGAPI-compatible\ndevice in windows, e.g.:</p>\n<pre>adapter = pygatt.BGAPIBackend(serial_port='COM9')\n</pre>\n<p>If you provide the COM port name, but still get an error such as\n<tt>WindowsError(2, 'The system cannot find the file <span class=\"pre\">specified.')</span></tt>, try\nchanging the COM port of the device to a value under 10, e.g. <tt>COM9</tt>.</p>\n</div>\n</div>\n<div id=\"authors\">\n<h3>Authors</h3>\n<ul>\n<li>Jeff Rowberg @jrowberg <a href=\"https://github.com/jrowberg/bglib\" rel=\"nofollow\">https://github.com/jrowberg/bglib</a></li>\n<li>Greg Albrecht @ampledata <a href=\"https://github.com/ampledata/pygatt\" rel=\"nofollow\">https://github.com/ampledata/pygatt</a></li>\n<li>Christopher Peplin @peplin <a href=\"https://github.com/peplin/pygatt\" rel=\"nofollow\">https://github.com/peplin/pygatt</a></li>\n<li>Morten Kjaergaard @mkjaergaard <a href=\"https://github.com/mkjaergaard/pygatt\" rel=\"nofollow\">https://github.com/mkjaergaard/pygatt</a></li>\n<li>Michael Saunby @msaunby <a href=\"https://github.com/msaunby/ble-sensor-pi\" rel=\"nofollow\">https://github.com/msaunby/ble-sensor-pi</a></li>\n<li>Steven Sloboda <a href=\"https://github.com/sloboste\" rel=\"nofollow\">https://github.com/sloboste</a></li>\n<li>Ilya Sukhanov @IlyaSukhanov</li>\n<li>@dcliftreaves</li>\n<li>Jonathan Dan</li>\n<li>Ilann Adjedj</li>\n<li>Ralph Hempel</li>\n<li>Rene Jacobsen</li>\n<li>Marcus Georgi</li>\n<li>Alexandre Barachant</li>\n<li>Michel Rivas Hernandez</li>\n<li>Jean Regisser</li>\n<li>David Martin</li>\n<li>Pieter Hooimeijer</li>\n</ul>\n</div>\n<div id=\"releasing-to-pypi\">\n<h3>Releasing to PyPI</h3>\n<p>For the maintainers of the project, when you want to make a release:</p>\n<ul>\n<li>Merge all of the changes into <tt>master</tt>.</li>\n<li>Update the version in <tt>setup.py</tt>.</li>\n<li>Update the <tt>CHANGELOG.mkd</tt></li>\n<li>Tag the commit and push to GitHub (will need to push to a separate\nbranch of PR first since <tt>master</tt> is a protected branch).</li>\n<li>Travis CI will take care of the rest - it will build and deploy\ntagged commits to PyPI automatically.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p>Copyright 2015 Stratos Inc. and Orion Labs</p>\n<p>Apache License, Version 2.0 and MIT License. See LICENSE.</p>\n</div>\n</div>\n<div id=\"release-history\">\n<h2>Release History</h2>\n<div id=\"v3-2-0\">\n<h3>V3.2.0</h3>\n<ul>\n<li>Fix: Reliably auto-reconnect after restarting BGAPI device. Fixes a bug in\nfirst attempt at auto-reconnection, only worked in some environments. (#144)</li>\n<li>Fix: Remove spurious \u201cno handler for logger\u201d warnings (#143)</li>\n<li>Fix: Use enum-compat instead of enum34, to fix installation in Python 3.4+</li>\n<li>Feature: Limit search window size for GATTTool backend, to avoid high CPU\nusage for long running connections. (#123)</li>\n<li>Feature: Add support for write commands to BGAPIBackend (#115)</li>\n</ul>\n</div>\n<div id=\"v3-1-1\">\n<h3>V3.1.1</h3>\n<ul>\n<li>Improvement: Convert documentation to RST for better PyPI integration.</li>\n</ul>\n</div>\n<div id=\"v3-1-0\">\n<h3>V3.1.0</h3>\n<ul>\n<li>Fix: Support platforms without <tt>termios</tt> (Windows)</li>\n<li>Feature: Add <tt>char_read_handle</tt> to GATTTool backend.</li>\n<li>Improvement: Warn if <tt>hcitool</tt> requires a sudo authentication.</li>\n<li>Improvement: Allow BGAPI device more time to reboot for more reliable\ndiscovery.</li>\n<li>Improvement: Interpret \u201cinvalid file descriptor\u201d as a disconnect\nevent.</li>\n<li>Fix: Correctly handle service class UUIDs that aren\u2019t 16 bytes.</li>\n<li>Improvement: Support BLE devices with any UTF8 character.</li>\n<li>Improvement: Make gatttol prompt timeout configurable.</li>\n<li>Improvement: Gracefully stop <tt>lescan</tt> to avoid leaving the adapter\nin a bad state.</li>\n<li>Improvement: Allow custom timeout for discovery on GATTTool backend.</li>\n<li>Fix: Make sure responses to char reads on BGAPI backend are from the\nrequested handle.</li>\n<li>Improvement: Raise and exception if trying to instantiate the\nGATTTool backend in Windows.</li>\n<li>Improvement: If no BGAPI device attached, abort immediately.</li>\n<li>Fix: Use user\u2019s configured HCI device for connection and scanning in\nGATTTool backend.</li>\n</ul>\n</div>\n<div id=\"v3-0-0\">\n<h3>V3.0.0</h3>\n<ul>\n<li>[API Change] The BGAPIBackend.connect method now takes the same\n<tt>address_type</tt> argument as the GATTTool backend [BGAPI].</li>\n<li>[API Change] The <tt>address_type</tt> argument on both backends now\nrequires a value from a new enum, <tt>pygatt.BLEAddressType</tt>, instead\nof a string.</li>\n<li>Made Python 3 support a priority for both GATTTOOL and BGAPI\nbackends.</li>\n<li>Improve reliability of BGAPI backend by re-setting device for each\nconnection.</li>\n</ul>\n</div>\n<div id=\"v2-1-0\">\n<h3>V2.1.0</h3>\n<ul>\n<li>Added all standard GATT characteristics. [BGAPI]</li>\n<li>Move gatttool monitor to a background thread for increased\nperformance. [GATTTOOL]</li>\n</ul>\n</div>\n<div id=\"v2-0-1\">\n<h3>V2.0.1</h3>\n<ul>\n<li>Feature: Allow unsubscribing from notifications.</li>\n<li>Improvement: Allow more time to discover characteristics. [GATTTOOL]</li>\n<li>Improvement: Allow using gatttol backend without root. [GATTTOOL]</li>\n<li>Improvement: Standardize type of UUID so comparison always works (str\nvs unicode)</li>\n<li>Fix: Fix packaging so the version on PyPI can be installed.</li>\n<li>Fix: Fix Python 3 compatibility.</li>\n</ul>\n<p>Thanks to Ilya Sukhanov and Alexey Roslyakov for the changes in this\nrelease!</p>\n</div>\n<div id=\"v2-0-0\">\n<h3>v2.0.0</h3>\n<ul>\n<li>New API with support for multiple BLE adapters.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 4396003, "releases": {"3.2.0": [{"comment_text": "", "digests": {"md5": "4b97df34ac17d745afa6cf7298ee9811", "sha256": "e2120704ef0cee20761d5ce5fab310fa76e824e931894696a3791367e5bba832"}, "downloads": -1, "filename": "vernierpygatt-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b97df34ac17d745afa6cf7298ee9811", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41738, "upload_time": "2018-10-10T01:53:01", "upload_time_iso_8601": "2018-10-10T01:53:01.214235Z", "url": "https://files.pythonhosted.org/packages/1e/0a/c7bc72fcf8a7cc22f9bdc5c2daae5b29660ccf1bdf1a1db3b542bc14cf7e/vernierpygatt-3.2.0-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "4b97df34ac17d745afa6cf7298ee9811", "sha256": "e2120704ef0cee20761d5ce5fab310fa76e824e931894696a3791367e5bba832"}, "downloads": -1, "filename": "vernierpygatt-3.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4b97df34ac17d745afa6cf7298ee9811", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 41738, "upload_time": "2018-10-10T01:53:01", "upload_time_iso_8601": "2018-10-10T01:53:01.214235Z", "url": "https://files.pythonhosted.org/packages/1e/0a/c7bc72fcf8a7cc22f9bdc5c2daae5b29660ccf1bdf1a1db3b542bc14cf7e/vernierpygatt-3.2.0-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:36:44 2020"}