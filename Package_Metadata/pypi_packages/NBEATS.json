{"info": {"author": "Yazdan Khan", "author_email": "yazdan0891@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Topic :: Software Development :: Build Tools"], "description": "# NBEATS\n\n##### N-BEATS: Neural basis expansion analysis for interpretable time series forecasting\n\nNBEATS is a pytorch based library for deep learning based time series forecasting (https://arxiv.org/pdf/1905.10437v3.pdf) and utilises nbeats-pytorch and (https://github.com/amitesh863/nbeats_forecast) with modifications.It uses the architecture provided in (https://github.com/philipperemy/n-beats) and modifies it to provide a choice of 'No Residual' version of the architecture along with 'DRESS' version.\n\n### Dependencies: Python >=3.6\n\n### Installation\n\n```sh\n$ pip install NBEATS\n```\n\n#### Import\n```sh\nfrom NBEATS import NeuralBeats\n```\n\n\n\nMandatory Parameters:\n- data\n- forecast_length \n\nBasic model with only mandatory parameters can be used to get forecasted values as shown below:\n```sh\nimport pandas as pd\nfrom NBEATS import NeuralBeats\n\ndata = pd.read_csv('test.csv')   \ndata = data.values        # (nx1 array)\n\nmodel = NeuralBeats(data=data, forecast_length=5)\nmodel.fit()\nforecast = model.predict()\n```\n\n\n#### Optional parameters to the model object\n| Parameter | Default Value|\n| ------ | --------------|\n| backcast_length | 3* forecast_length |\n| Architecture  | 'DRESS' or 'No Residual' (Default is 'DRESS') |\n| path | '  ' (path to save intermediate training checkpoint) |\n| checkpoint_name | 'NBEATS-checkpoint.th'| \n| mode| 'cpu'| Any of the torch.device modes|\n| batch_size | len(data)/10 |\n| thetas_dims | [4, 8] | \n| nb_blocks_per_stack | 3 |\n| share_weights_in_stack | False |\n| train_percent |  0.8 |\n| save_model | False |\n| hidden_layer_units | 128 |\n| stack | [1,1] (As per the paper- Mapping is as follows -- 1: GENERIC_BLOCK,  2: TREND_BLOCK , 3: SEASONALITY_BLOCK)|\n\n\n#### Functions\n\n#### fit() \n\nThis is used for training the model. The default value of parameters passed are epoch=25, optimiser=Adam, plot=True, verbose=True\n\n\nex:\n\n```sh\n\nmodel.fit(epoch=25,optimiser=torch.optim.AdamW(model.parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-07, weight_decay=0.01, amsgrad=False),plot=False, verbose=True)\n\n```\n\n\n###### predict_data ()\n\nThe argument to the method could be empty or a numpy array of length backcast_length x 1 which means if no argument is passed and training data is till month m then prediction will be for month m+1,m+2 and m+3 when forecast_length=3.If forecast is needed for month m+3 onwards then numpy array of backcast_length (3 x forecast_length -This is by default) i.e 9(3 x 3) previous months (m-6 to m+2) needs to be provided to predict for month m+3,m+4 and m+5.\n\nImportant Note : Backcast length can be provided as a model argument along with forecast_length  eg: backcast_length=6,backcast_length=9,backcast_length=12......till backcast_length=21 for forecast_length=3 ,as the paper suggests values between 2 x forecast_length  to 7 x forecast_length .The default is 3 x forecast_length .\n\nReturns forecasted values.\n\n#### save(file) & load(file,optimizer):\nSave and load the model after training respectively. \n\nExample: model.save('NBEATS.th') or model.load('NBEATS.th')\n\n\n\n## DEMO\n\n 1: GENERIC_BLOCK and 3: SEASONALITY_BLOCK stacks are used below (stack=[1,3]).Go through the paper for more details.Playing around with the 3 blocks(GENERIC,SEASONALITY and TREND) might improve accuracy.\n```sh\nimport pandas as pd\nfrom NBEATS import NeuralBeats\nfrom torch import optim\n\ndata = pd.read_csv('test.csv')   \ndata = data.values # nx1(numpy array)\n\nmodel=NeuralBeats(data=data,forecast_length=5,stack=[1,3],nb_blocks_per_stack=3,thetas_dims=[3,7])\n\n#or use prebuilt models\n#model.load(file='NBEATS.th')\n\n\n#use customised optimiser with parameters\nmodel.fit(epoch=35,optimiser=optim.AdamW(model.parameters, lr=0.001, betas=(0.9, 0.999), eps=1e-07, weight_decay=0.01, amsgrad=False)) \n#or \n#model.fit()\n\nforecast=model.predict()\n#or\n#model.predict(predict_data=pred_data) where pred_data is numpy array of size backcast_length*1\n```\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Y9008/NBEATS", "keywords": "nbeats,timeseries,forecast,neural beats,univariate timeseries forecast ,timeseries forecast,univariate timeseries forecast", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "NBEATS", "package_url": "https://pypi.org/project/NBEATS/", "platform": "", "project_url": "https://pypi.org/project/NBEATS/", "project_urls": {"Homepage": "https://github.com/Y9008/NBEATS"}, "release_url": "https://pypi.org/project/NBEATS/1.3.11/", "requires_dist": ["nbeats-pytorch"], "requires_python": ">=3.6", "summary": "This library uses nbeats-pytorch as base and accomplishes univariate time series forecasting using N-BEATS.", "version": "1.3.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>NBEATS</h1>\n<h5>N-BEATS: Neural basis expansion analysis for interpretable time series forecasting</h5>\n<p>NBEATS is a pytorch based library for deep learning based time series forecasting (<a href=\"https://arxiv.org/pdf/1905.10437v3.pdf\" rel=\"nofollow\">https://arxiv.org/pdf/1905.10437v3.pdf</a>) and utilises nbeats-pytorch and (<a href=\"https://github.com/amitesh863/nbeats_forecast\" rel=\"nofollow\">https://github.com/amitesh863/nbeats_forecast</a>) with modifications.It uses the architecture provided in (<a href=\"https://github.com/philipperemy/n-beats\" rel=\"nofollow\">https://github.com/philipperemy/n-beats</a>) and modifies it to provide a choice of 'No Residual' version of the architecture along with 'DRESS' version.</p>\n<h3>Dependencies: Python &gt;=3.6</h3>\n<h3>Installation</h3>\n<pre>$ pip install NBEATS\n</pre>\n<h4>Import</h4>\n<pre>from NBEATS import NeuralBeats\n</pre>\n<p>Mandatory Parameters:</p>\n<ul>\n<li>data</li>\n<li>forecast_length</li>\n</ul>\n<p>Basic model with only mandatory parameters can be used to get forecasted values as shown below:</p>\n<pre>import pandas as pd\nfrom NBEATS import NeuralBeats\n\n<span class=\"nv\">data</span> <span class=\"o\">=</span> pd.read_csv<span class=\"o\">(</span><span class=\"s1\">'test.csv'</span><span class=\"o\">)</span>   \n<span class=\"nv\">data</span> <span class=\"o\">=</span> data.values        <span class=\"c1\"># (nx1 array)</span>\n\n<span class=\"nv\">model</span> <span class=\"o\">=</span> NeuralBeats<span class=\"o\">(</span><span class=\"nv\">data</span><span class=\"o\">=</span>data, <span class=\"nv\">forecast_length</span><span class=\"o\">=</span><span class=\"m\">5</span><span class=\"o\">)</span>\nmodel.fit<span class=\"o\">()</span>\n<span class=\"nv\">forecast</span> <span class=\"o\">=</span> model.predict<span class=\"o\">()</span>\n</pre>\n<h4>Optional parameters to the model object</h4>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th>Default Value</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>backcast_length</td>\n<td>3* forecast_length</td>\n</tr>\n<tr>\n<td>Architecture</td>\n<td>'DRESS' or 'No Residual' (Default is 'DRESS')</td>\n</tr>\n<tr>\n<td>path</td>\n<td>'  ' (path to save intermediate training checkpoint)</td>\n</tr>\n<tr>\n<td>checkpoint_name</td>\n<td>'NBEATS-checkpoint.th'</td>\n</tr>\n<tr>\n<td>mode</td>\n<td>'cpu'</td>\n</tr>\n<tr>\n<td>batch_size</td>\n<td>len(data)/10</td>\n</tr>\n<tr>\n<td>thetas_dims</td>\n<td>[4, 8]</td>\n</tr>\n<tr>\n<td>nb_blocks_per_stack</td>\n<td>3</td>\n</tr>\n<tr>\n<td>share_weights_in_stack</td>\n<td>False</td>\n</tr>\n<tr>\n<td>train_percent</td>\n<td>0.8</td>\n</tr>\n<tr>\n<td>save_model</td>\n<td>False</td>\n</tr>\n<tr>\n<td>hidden_layer_units</td>\n<td>128</td>\n</tr>\n<tr>\n<td>stack</td>\n<td>[1,1] (As per the paper- Mapping is as follows -- 1: GENERIC_BLOCK,  2: TREND_BLOCK , 3: SEASONALITY_BLOCK)</td>\n</tr></tbody></table>\n<h4>Functions</h4>\n<h4>fit()</h4>\n<p>This is used for training the model. The default value of parameters passed are epoch=25, optimiser=Adam, plot=True, verbose=True</p>\n<p>ex:</p>\n<pre>model.fit<span class=\"o\">(</span><span class=\"nv\">epoch</span><span class=\"o\">=</span><span class=\"m\">25</span>,optimiser<span class=\"o\">=</span>torch.optim.AdamW<span class=\"o\">(</span>model.parameters, <span class=\"nv\">lr</span><span class=\"o\">=</span><span class=\"m\">0</span>.001, <span class=\"nv\">betas</span><span class=\"o\">=(</span><span class=\"m\">0</span>.9, <span class=\"m\">0</span>.999<span class=\"o\">)</span>, <span class=\"nv\">eps</span><span class=\"o\">=</span>1e-07, <span class=\"nv\">weight_decay</span><span class=\"o\">=</span><span class=\"m\">0</span>.01, <span class=\"nv\">amsgrad</span><span class=\"o\">=</span>False<span class=\"o\">)</span>,plot<span class=\"o\">=</span>False, <span class=\"nv\">verbose</span><span class=\"o\">=</span>True<span class=\"o\">)</span>\n</pre>\n<h6>predict_data ()</h6>\n<p>The argument to the method could be empty or a numpy array of length backcast_length x 1 which means if no argument is passed and training data is till month m then prediction will be for month m+1,m+2 and m+3 when forecast_length=3.If forecast is needed for month m+3 onwards then numpy array of backcast_length (3 x forecast_length -This is by default) i.e 9(3 x 3) previous months (m-6 to m+2) needs to be provided to predict for month m+3,m+4 and m+5.</p>\n<p>Important Note : Backcast length can be provided as a model argument along with forecast_length  eg: backcast_length=6,backcast_length=9,backcast_length=12......till backcast_length=21 for forecast_length=3 ,as the paper suggests values between 2 x forecast_length  to 7 x forecast_length .The default is 3 x forecast_length .</p>\n<p>Returns forecasted values.</p>\n<h4>save(file) &amp; load(file,optimizer):</h4>\n<p>Save and load the model after training respectively.</p>\n<p>Example: model.save('NBEATS.th') or model.load('NBEATS.th')</p>\n<h2>DEMO</h2>\n<p>1: GENERIC_BLOCK and 3: SEASONALITY_BLOCK stacks are used below (stack=[1,3]).Go through the paper for more details.Playing around with the 3 blocks(GENERIC,SEASONALITY and TREND) might improve accuracy.</p>\n<pre>import pandas as pd\nfrom NBEATS import NeuralBeats\nfrom torch import optim\n\n<span class=\"nv\">data</span> <span class=\"o\">=</span> pd.read_csv<span class=\"o\">(</span><span class=\"s1\">'test.csv'</span><span class=\"o\">)</span>   \n<span class=\"nv\">data</span> <span class=\"o\">=</span> data.values <span class=\"c1\"># nx1(numpy array)</span>\n\n<span class=\"nv\">model</span><span class=\"o\">=</span>NeuralBeats<span class=\"o\">(</span><span class=\"nv\">data</span><span class=\"o\">=</span>data,forecast_length<span class=\"o\">=</span><span class=\"m\">5</span>,stack<span class=\"o\">=[</span><span class=\"m\">1</span>,3<span class=\"o\">]</span>,nb_blocks_per_stack<span class=\"o\">=</span><span class=\"m\">3</span>,thetas_dims<span class=\"o\">=[</span><span class=\"m\">3</span>,7<span class=\"o\">])</span>\n\n<span class=\"c1\">#or use prebuilt models</span>\n<span class=\"c1\">#model.load(file='NBEATS.th')</span>\n\n\n<span class=\"c1\">#use customised optimiser with parameters</span>\nmodel.fit<span class=\"o\">(</span><span class=\"nv\">epoch</span><span class=\"o\">=</span><span class=\"m\">35</span>,optimiser<span class=\"o\">=</span>optim.AdamW<span class=\"o\">(</span>model.parameters, <span class=\"nv\">lr</span><span class=\"o\">=</span><span class=\"m\">0</span>.001, <span class=\"nv\">betas</span><span class=\"o\">=(</span><span class=\"m\">0</span>.9, <span class=\"m\">0</span>.999<span class=\"o\">)</span>, <span class=\"nv\">eps</span><span class=\"o\">=</span>1e-07, <span class=\"nv\">weight_decay</span><span class=\"o\">=</span><span class=\"m\">0</span>.01, <span class=\"nv\">amsgrad</span><span class=\"o\">=</span>False<span class=\"o\">))</span> \n<span class=\"c1\">#or </span>\n<span class=\"c1\">#model.fit()</span>\n\n<span class=\"nv\">forecast</span><span class=\"o\">=</span>model.predict<span class=\"o\">()</span>\n<span class=\"c1\">#or</span>\n<span class=\"c1\">#model.predict(predict_data=pred_data) where pred_data is numpy array of size backcast_length*1</span>\n</pre>\n\n          </div>"}, "last_serial": 7029986, "releases": {"1.3.10": [{"comment_text": "", "digests": {"md5": "187dc022df696994423ff5a4df479d2a", "sha256": "74be0a84467192c2e6abde89ce5eaa915f6a773e401a9cb79014657fc0f2d906"}, "downloads": -1, "filename": "NBEATS-1.3.10-py3-none-any.whl", "has_sig": false, "md5_digest": "187dc022df696994423ff5a4df479d2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5616, "upload_time": "2020-04-15T12:30:13", "upload_time_iso_8601": "2020-04-15T12:30:13.810416Z", "url": "https://files.pythonhosted.org/packages/50/22/22c7162b772cada097fa07d4e4ee5a8a1d9920a1aa0dc22b2f93937ead00/NBEATS-1.3.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "34678359b492d109530aca4a8c39ad7c", "sha256": "64cfc2438602c4e699cf87dbee95136fa4effa738989deb2de46b9a8a3a17874"}, "downloads": -1, "filename": "NBEATS-1.3.10.tar.gz", "has_sig": false, "md5_digest": "34678359b492d109530aca4a8c39ad7c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5444, "upload_time": "2020-04-15T12:30:14", "upload_time_iso_8601": "2020-04-15T12:30:14.814781Z", "url": "https://files.pythonhosted.org/packages/47/d3/1af5625b52cb9a30b6d1a3671a563630c1c9e20ab66dccda83b04f49824b/NBEATS-1.3.10.tar.gz", "yanked": false}], "1.3.11": [{"comment_text": "", "digests": {"md5": "d520dc8b21538a4286ff508e4dd8f436", "sha256": "0d5db68f6d4d05e1560ddc04638f73a21ce916ec89316e7f257ca64b8baf1c7d"}, "downloads": -1, "filename": "NBEATS-1.3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "d520dc8b21538a4286ff508e4dd8f436", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7601, "upload_time": "2020-04-16T07:02:09", "upload_time_iso_8601": "2020-04-16T07:02:09.600207Z", "url": "https://files.pythonhosted.org/packages/9e/7a/fcd20b30745d3e5fb9906cb0d43cded58abed635f1f380fc8cdb4302ec58/NBEATS-1.3.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ad562baeec384f0487f84082e3f6ea7", "sha256": "d78fed64b27916e85a3095a2f7dd1a74aedfb17c8b7fcd39dd05859db5d69bca"}, "downloads": -1, "filename": "NBEATS-1.3.11.tar.gz", "has_sig": false, "md5_digest": "5ad562baeec384f0487f84082e3f6ea7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7102, "upload_time": "2020-04-16T07:02:10", "upload_time_iso_8601": "2020-04-16T07:02:10.919721Z", "url": "https://files.pythonhosted.org/packages/bb/1f/45045592aa0007544ae8d17005d155383f5fd0509ad9009adf1db96e3f0e/NBEATS-1.3.11.tar.gz", "yanked": false}], "1.3.8": [{"comment_text": "", "digests": {"md5": "2cff5c3e5147a26d5c0c259e0b1fea68", "sha256": "5c9fae8458b9720213a112b4b105bab990f5db5f045e93cef7916af16370989d"}, "downloads": -1, "filename": "NBEATS-1.3.8-py3-none-any.whl", "has_sig": false, "md5_digest": "2cff5c3e5147a26d5c0c259e0b1fea68", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6382, "upload_time": "2020-03-27T13:54:12", "upload_time_iso_8601": "2020-03-27T13:54:12.692987Z", "url": "https://files.pythonhosted.org/packages/51/81/177c91dbf7b83aba1fe605f69aeb1ac9fd0cdef286ca7b7a7d5eaf067b33/NBEATS-1.3.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5477b85ba610e2db68724a9db5f78d09", "sha256": "afc70f72e08d1ee486b2fbc7d1a8026bc0fc90bbdca672e4ef1c8de396c088b7"}, "downloads": -1, "filename": "NBEATS-1.3.8.tar.gz", "has_sig": false, "md5_digest": "5477b85ba610e2db68724a9db5f78d09", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5425, "upload_time": "2020-03-27T13:54:14", "upload_time_iso_8601": "2020-03-27T13:54:14.948743Z", "url": "https://files.pythonhosted.org/packages/4e/57/2fcbc6dd9bdb337f705a49ebff4a656f2d467b51764b79640472de23b154/NBEATS-1.3.8.tar.gz", "yanked": false}], "1.3.9": [{"comment_text": "", "digests": {"md5": "f541c26aa7a5745e6ef4cc6e1ab4b8fe", "sha256": "bd9805816ac6fa52968c8ce019c44e67a2a8ea8dd16a7dbd704f66e5ce71fdb5"}, "downloads": -1, "filename": "NBEATS-1.3.9-py3-none-any.whl", "has_sig": false, "md5_digest": "f541c26aa7a5745e6ef4cc6e1ab4b8fe", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 6365, "upload_time": "2020-03-27T14:04:46", "upload_time_iso_8601": "2020-03-27T14:04:46.723620Z", "url": "https://files.pythonhosted.org/packages/a7/81/6d6ed42aa678fe7014b7e9bf9f1eee52af216b7d06152aaf53589284367f/NBEATS-1.3.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2c62340b3a6f34c77832f555b0610d23", "sha256": "1ccf0a244138086d81aa2b916ac3982c1d9da378ec325625bc95f4401c0c4fcc"}, "downloads": -1, "filename": "NBEATS-1.3.9.tar.gz", "has_sig": false, "md5_digest": "2c62340b3a6f34c77832f555b0610d23", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 5401, "upload_time": "2020-03-27T14:04:47", "upload_time_iso_8601": "2020-03-27T14:04:47.824131Z", "url": "https://files.pythonhosted.org/packages/13/0e/c69ae280c25112b9d280bf3a74c0c3bc68db249f3a5de2962c19271afd33/NBEATS-1.3.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d520dc8b21538a4286ff508e4dd8f436", "sha256": "0d5db68f6d4d05e1560ddc04638f73a21ce916ec89316e7f257ca64b8baf1c7d"}, "downloads": -1, "filename": "NBEATS-1.3.11-py3-none-any.whl", "has_sig": false, "md5_digest": "d520dc8b21538a4286ff508e4dd8f436", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 7601, "upload_time": "2020-04-16T07:02:09", "upload_time_iso_8601": "2020-04-16T07:02:09.600207Z", "url": "https://files.pythonhosted.org/packages/9e/7a/fcd20b30745d3e5fb9906cb0d43cded58abed635f1f380fc8cdb4302ec58/NBEATS-1.3.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5ad562baeec384f0487f84082e3f6ea7", "sha256": "d78fed64b27916e85a3095a2f7dd1a74aedfb17c8b7fcd39dd05859db5d69bca"}, "downloads": -1, "filename": "NBEATS-1.3.11.tar.gz", "has_sig": false, "md5_digest": "5ad562baeec384f0487f84082e3f6ea7", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 7102, "upload_time": "2020-04-16T07:02:10", "upload_time_iso_8601": "2020-04-16T07:02:10.919721Z", "url": "https://files.pythonhosted.org/packages/bb/1f/45045592aa0007544ae8d17005d155383f5fd0509ad9009adf1db96e3f0e/NBEATS-1.3.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:57 2020"}