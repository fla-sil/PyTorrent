{"info": {"author": "Ian Price", "author_email": "iprice@thermaline.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "========================\ndjango-model-changes-py3\n========================\n\nPYTHON 3 FORK OF `django-model-changes <https://github.com/kajic/django-model-changes/>`_.\n\n*django-model-changes* allows you to track the state and changes of a model instance:\n\nQuick start\n-----------\n\n1. Install django-model-changes::\n\n    pip install django-model-changes-py3\n\n2. Add \"django_model_changes\" to your INSTALLED_APPS setting like this::\n\n    INSTALLED_APPS = (\n        ...\n        'django_model_changes',\n    )\n\n3. Add the `ChangesMixin` to your model::\n\n    >>> from django.db import models\n    >>> from django_model_changes import ChangesMixin\n\n    >>> class User(ChangesMixin, models.Model):\n    >>>     name = models.CharField(max_length=100)\n\n4. Get instance changes::\n\n    >>> user = User()\n    >>> user.name = 'Foo Bar'\n    >>> user.save()\n\n    >>> user.name 'I got a new name'\n\n    >>> # Get current state\n    >>> user.current_state()\n    {'id': 1, 'name': 'I got a new name'}\n\n    >>> # Get previous state (state after previous save/create/delete)\n    >>> user.previous_state()\n    {'id': 1, 'name': 'Foo Bar'}\n\n    >>> # Get old state (state before previous save/create/delete)\n    >>> user.old_state()\n    {'id': None, 'name': ''}\n\n    >>> # Get changes from the previous state to the current state\n    >>> user.changes()\n    {'name': ('Foo Bar', 'I got a new name')}\n\n    >>> # Get changes from the old state to the current state\n    >>> user.old_changes()\n    {'id': (None, 1), 'name': ('', 'Foo Bar')}\n\n    >>> # Check if the instance was persisted (saved)\n    >>> user.was_persisted()\n    False\n\n    >>> # Check if the instance is persisted\n    >>> user.is_persisted()\n    True\n\n5. Listen for changes::\n        \n   >>> from django_model_changes import post_change\n    \n   >>> def my_callback(sender, instance, **kwargs):\n   >>>     # Do something with previous and current state\n   >>>     instance.old_state()\n   >>>     instance.current_state()\n\n   >>>     # There is also a convenience method to get\n   >>>     # an instance from the previous state\n   >>>     instance.old_instance()\n\n   >>> post_change.connect(my_callback, User)\n\nOverview\n--------\n\ndjango-model-changes allows you to retrieve the following states from an\ninstance:\n\n1. current_state()\n    The current state of the instance.\n2. previous_state()\n    The state of the instance **after** it was created, saved or deleted the\n    last time.\n3. old_state()\n    The previous previous_state(), i.e. the state of the instance **before**\n    it was created, saved or deleted the last time.\n\nIt also provides convenience methods to get changes between states:\n\n1. changes()\n    Changes from previous_state to current_state.\n2. previous_changes()\n    Changes from old_state to previous_state.\n3. old_changes()\n    Changes from old_state to current_state.\n\nAnd the following methods to determine if an instance was/is persisted in\nthe database:\n\n1. was_persisted()\n    Was the instance persisted in its old state.\n2. is_persisted()\n    Is the instance is_persisted in its current state.\n\nThis schematic tries to illustrate how these methods relate to each other::\n\n\n    after create/save/delete            after save/delete                  now\n    |                                   |                                  |\n    .-----------------------------------.----------------------------------.\n    |\\                                  |\\                                 |\\\n    | \\                                 | \\                                | \\\n    |  old_state()                      |  previous_state()                |  current_state()\n    |                                   |                                  |\n    |-----------------------------------|----------------------------------|\n    |  previous_changes() (prev - old)  |  changes() (cur - prev)          |\n    |-----------------------------------|----------------------------------|\n    |                      old_changes()  (cur - old)                      |\n    .----------------------------------------------------------------------.\n     \\                                                                      \\\n      \\                                                                      \\\n       was_persisted()                                                        is_persisted()\n\n\nDocumentation\n-------------\n\nRefer to the doc strings in `changes.py`_, or build the documentation::\n\n    >>> pip install Sphinx\n    >>> cd docs\n    >>> make html\n    Open build/html/index.html\n\n.. _changes.py: django_model_changes/changes.py", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/iansprice/django-model-changes-py3", "keywords": "", "license": "MIT License", "maintainer": "", "maintainer_email": "", "name": "django-model-changes-py3", "package_url": "https://pypi.org/project/django-model-changes-py3/", "platform": "", "project_url": "https://pypi.org/project/django-model-changes-py3/", "project_urls": {"Homepage": "http://github.com/iansprice/django-model-changes-py3"}, "release_url": "https://pypi.org/project/django-model-changes-py3/0.15.1/", "requires_dist": null, "requires_python": "", "summary": "django-model-changes allows you to track model instance changes.", "version": "0.15.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>PYTHON 3 FORK OF <a href=\"https://github.com/kajic/django-model-changes/\" rel=\"nofollow\">django-model-changes</a>.</p>\n<p><em>django-model-changes</em> allows you to track the state and changes of a model instance:</p>\n<div id=\"quick-start\">\n<h2>Quick start</h2>\n<ol>\n<li><p>Install django-model-changes:</p>\n<pre>pip install django-model-changes-py3\n</pre>\n</li>\n<li><p>Add \u201cdjango_model_changes\u201d to your INSTALLED_APPS setting like this:</p>\n<pre>INSTALLED_APPS = (\n    ...\n    'django_model_changes',\n)\n</pre>\n</li>\n<li><p>Add the <cite>ChangesMixin</cite> to your model:</p>\n<pre>&gt;&gt;&gt; from django.db import models\n&gt;&gt;&gt; from django_model_changes import ChangesMixin\n\n&gt;&gt;&gt; class User(ChangesMixin, models.Model):\n&gt;&gt;&gt;     name = models.CharField(max_length=100)\n</pre>\n</li>\n<li><p>Get instance changes:</p>\n<pre>&gt;&gt;&gt; user = User()\n&gt;&gt;&gt; user.name = 'Foo Bar'\n&gt;&gt;&gt; user.save()\n\n&gt;&gt;&gt; user.name 'I got a new name'\n\n&gt;&gt;&gt; # Get current state\n&gt;&gt;&gt; user.current_state()\n{'id': 1, 'name': 'I got a new name'}\n\n&gt;&gt;&gt; # Get previous state (state after previous save/create/delete)\n&gt;&gt;&gt; user.previous_state()\n{'id': 1, 'name': 'Foo Bar'}\n\n&gt;&gt;&gt; # Get old state (state before previous save/create/delete)\n&gt;&gt;&gt; user.old_state()\n{'id': None, 'name': ''}\n\n&gt;&gt;&gt; # Get changes from the previous state to the current state\n&gt;&gt;&gt; user.changes()\n{'name': ('Foo Bar', 'I got a new name')}\n\n&gt;&gt;&gt; # Get changes from the old state to the current state\n&gt;&gt;&gt; user.old_changes()\n{'id': (None, 1), 'name': ('', 'Foo Bar')}\n\n&gt;&gt;&gt; # Check if the instance was persisted (saved)\n&gt;&gt;&gt; user.was_persisted()\nFalse\n\n&gt;&gt;&gt; # Check if the instance is persisted\n&gt;&gt;&gt; user.is_persisted()\nTrue\n</pre>\n</li>\n<li><p>Listen for changes:</p>\n<pre>&gt;&gt;&gt; from django_model_changes import post_change\n</pre>\n<pre>&gt;&gt;&gt; def my_callback(sender, instance, **kwargs):\n&gt;&gt;&gt;     # Do something with previous and current state\n&gt;&gt;&gt;     instance.old_state()\n&gt;&gt;&gt;     instance.current_state()\n</pre>\n<pre>&gt;&gt;&gt;     # There is also a convenience method to get\n&gt;&gt;&gt;     # an instance from the previous state\n&gt;&gt;&gt;     instance.old_instance()\n</pre>\n<pre>&gt;&gt;&gt; post_change.connect(my_callback, User)\n</pre>\n</li>\n</ol>\n</div>\n<div id=\"overview\">\n<h2>Overview</h2>\n<p>django-model-changes allows you to retrieve the following states from an\ninstance:</p>\n<ol>\n<li><dl>\n<dt>current_state()</dt>\n<dd>The current state of the instance.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>previous_state()</dt>\n<dd>The state of the instance <strong>after</strong> it was created, saved or deleted the\nlast time.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>old_state()</dt>\n<dd>The previous previous_state(), i.e. the state of the instance <strong>before</strong>\nit was created, saved or deleted the last time.</dd>\n</dl>\n</li>\n</ol>\n<p>It also provides convenience methods to get changes between states:</p>\n<ol>\n<li><dl>\n<dt>changes()</dt>\n<dd>Changes from previous_state to current_state.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>previous_changes()</dt>\n<dd>Changes from old_state to previous_state.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>old_changes()</dt>\n<dd>Changes from old_state to current_state.</dd>\n</dl>\n</li>\n</ol>\n<p>And the following methods to determine if an instance was/is persisted in\nthe database:</p>\n<ol>\n<li><dl>\n<dt>was_persisted()</dt>\n<dd>Was the instance persisted in its old state.</dd>\n</dl>\n</li>\n<li><dl>\n<dt>is_persisted()</dt>\n<dd>Is the instance is_persisted in its current state.</dd>\n</dl>\n</li>\n</ol>\n<p>This schematic tries to illustrate how these methods relate to each other:</p>\n<pre>after create/save/delete            after save/delete                  now\n|                                   |                                  |\n.-----------------------------------.----------------------------------.\n|\\                                  |\\                                 |\\\n| \\                                 | \\                                | \\\n|  old_state()                      |  previous_state()                |  current_state()\n|                                   |                                  |\n|-----------------------------------|----------------------------------|\n|  previous_changes() (prev - old)  |  changes() (cur - prev)          |\n|-----------------------------------|----------------------------------|\n|                      old_changes()  (cur - old)                      |\n.----------------------------------------------------------------------.\n \\                                                                      \\\n  \\                                                                      \\\n   was_persisted()                                                        is_persisted()\n</pre>\n</div>\n<div id=\"documentation\">\n<h2>Documentation</h2>\n<p>Refer to the doc strings in <a href=\"django_model_changes/changes.py\" rel=\"nofollow\">changes.py</a>, or build the documentation:</p>\n<pre>&gt;&gt;&gt; pip install Sphinx\n&gt;&gt;&gt; cd docs\n&gt;&gt;&gt; make html\nOpen build/html/index.html\n</pre>\n</div>\n\n          </div>"}, "last_serial": 3848203, "releases": {"0.14.1": [{"comment_text": "", "digests": {"md5": "55266934697bf9e64704ccd29d18fb81", "sha256": "08a28b73022b6ea31ab4b4d9df635e2fe7f536de52c7e821f9bc7aeee86248c6"}, "downloads": -1, "filename": "django-model-changes-py3-0.14.1.tar.gz", "has_sig": false, "md5_digest": "55266934697bf9e64704ccd29d18fb81", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13409, "upload_time": "2016-11-23T22:50:13", "upload_time_iso_8601": "2016-11-23T22:50:13.429102Z", "url": "https://files.pythonhosted.org/packages/dd/44/81cc3a0404ab1d5dab8ed37a7135e4e9abd2b2bf391cb2033733ae45e4b7/django-model-changes-py3-0.14.1.tar.gz", "yanked": false}], "0.15.1": [{"comment_text": "", "digests": {"md5": "54a94b12d0409aed025a8041a3434b99", "sha256": "f49f30ed47d3e1cc8be3f07f69a8c6aae4c020325255cb2e2183aaf5000f469f"}, "downloads": -1, "filename": "django-model-changes-py3-0.15.1.tar.gz", "has_sig": false, "md5_digest": "54a94b12d0409aed025a8041a3434b99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12091, "upload_time": "2018-05-09T17:48:27", "upload_time_iso_8601": "2018-05-09T17:48:27.218981Z", "url": "https://files.pythonhosted.org/packages/0e/28/afaf74c2e60e465b96f09476df2f9fc52ee0b5ed6ebe3438d522ea926f7a/django-model-changes-py3-0.15.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "54a94b12d0409aed025a8041a3434b99", "sha256": "f49f30ed47d3e1cc8be3f07f69a8c6aae4c020325255cb2e2183aaf5000f469f"}, "downloads": -1, "filename": "django-model-changes-py3-0.15.1.tar.gz", "has_sig": false, "md5_digest": "54a94b12d0409aed025a8041a3434b99", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12091, "upload_time": "2018-05-09T17:48:27", "upload_time_iso_8601": "2018-05-09T17:48:27.218981Z", "url": "https://files.pythonhosted.org/packages/0e/28/afaf74c2e60e465b96f09476df2f9fc52ee0b5ed6ebe3438d522ea926f7a/django-model-changes-py3-0.15.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:02 2020"}