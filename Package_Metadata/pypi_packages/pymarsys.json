{"info": {"author": "Transcovo", "author_email": "tech-data@chauffeur-prive.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Natural Language :: English", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5"], "description": "# pymarsys: Python client for the Emarsys API\n\n[![CircleCI](https://circleci.com/gh/transcovo/pymarsys.svg?style=svg)](https://circleci.com/gh/transcovo/pymarsys)\n\npymarsys allows you to choose the type of execution you want for the client: synchronous or asynchronous.\n\n**Warning**: pymarsys is currently under development and on **Pre-Alpha** version. Use with caution! \nCurrently implemented endpoints are:\n\n* contacts\n* contact_fields\n\nIf you want to make calls to other endpoints, for now you can use the `make_call` method of the `SyncConnection` or `AsyncConnection` classes.\n\n**Python 2.x compatibility**: If you are using python 2.x, don't, just don't.\n\n### Synchronous example:\n```python\n    >>> from pymarsys import SyncConnection, Emarsys\n    >>> connection = SyncConnection('username', 'secret')\n    >>> client = Emarsys(connection)\n    >>> client.contacts.create({'3': 'squirrel@squirrelmail.com'})\n    {'data': {'id': 19739576}, 'replyCode': 0, 'replyText': 'OK'}\n```\n\n### Asynchronous example:\n```python\n    >>> from pymarsys import AsyncConnection, Emarsys\n    >>> async def my_async_func():\n    ...     connection = AsyncConnection('username', 'secret')\n    ...     client = Emarsys(connection)\n    ...     return await client.contacts.create({'3': 'squirrel@squirrelmail.com'})\n    >>> my_async_func()\n    <coroutine object AsyncConnection.make_call at 0x10c44bd58>\n```\n\n#### You will need an event loop to get the result of your coroutine. Here is an example using asyncio's event loop:\n```python\n    >>> import asyncio\n    >>> coroutine = my_async_func()\n    >>> loop = asyncio.get_event_loop()\n    >>> loop.run_until_complete(coroutine)\n    {'data': {'id': 19739576}, 'replyCode': 0, 'replyText': 'OK'}\n```\n\n## Installation\n\nSimply:\n```sh\n  $ pip install pymarsys\n  \ud83d\udc3f\n```\n## Documentation\nComing soon!\n\n##Contributing\n\n1. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.\n2. Fork the repository on GitHub to start making your changes.\n3. Write a test which shows that the bug was fixed or that the feature works as expected.\n4. Send a pull request and bug the maintainer until it gets merged and published.", "description_content_type": null, "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/transcovo/pymarsys/", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pymarsys", "package_url": "https://pypi.org/project/pymarsys/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pymarsys/", "project_urls": {"Homepage": "http://github.com/transcovo/pymarsys/"}, "release_url": "https://pypi.org/project/pymarsys/0.0.1/", "requires_dist": null, "requires_python": "", "summary": "A Python client for the Emarsys API", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # pymarsys: Python client for the Emarsys API<br><br>[![CircleCI](https://circleci.com/gh/transcovo/pymarsys.svg?style=svg)](https://circleci.com/gh/transcovo/pymarsys)<br><br>pymarsys allows you to choose the type of execution you want for the client: synchronous or asynchronous.<br><br>**Warning**: pymarsys is currently under development and on **Pre-Alpha** version. Use with caution! <br>Currently implemented endpoints are:<br><br>* contacts<br>* contact_fields<br><br>If you want to make calls to other endpoints, for now you can use the `make_call` method of the `SyncConnection` or `AsyncConnection` classes.<br><br>**Python 2.x compatibility**: If you are using python 2.x, don't, just don't.<br><br>### Synchronous example:<br>```python<br>    &gt;&gt;&gt; from pymarsys import SyncConnection, Emarsys<br>    &gt;&gt;&gt; connection = SyncConnection('username', 'secret')<br>    &gt;&gt;&gt; client = Emarsys(connection)<br>    &gt;&gt;&gt; client.contacts.create({'3': 'squirrel@squirrelmail.com'})<br>    {'data': {'id': 19739576}, 'replyCode': 0, 'replyText': 'OK'}<br>```<br><br>### Asynchronous example:<br>```python<br>    &gt;&gt;&gt; from pymarsys import AsyncConnection, Emarsys<br>    &gt;&gt;&gt; async def my_async_func():<br>    ...     connection = AsyncConnection('username', 'secret')<br>    ...     client = Emarsys(connection)<br>    ...     return await client.contacts.create({'3': 'squirrel@squirrelmail.com'})<br>    &gt;&gt;&gt; my_async_func()<br>    &lt;coroutine object AsyncConnection.make_call at 0x10c44bd58&gt;<br>```<br><br>#### You will need an event loop to get the result of your coroutine. Here is an example using asyncio's event loop:<br>```python<br>    &gt;&gt;&gt; import asyncio<br>    &gt;&gt;&gt; coroutine = my_async_func()<br>    &gt;&gt;&gt; loop = asyncio.get_event_loop()<br>    &gt;&gt;&gt; loop.run_until_complete(coroutine)<br>    {'data': {'id': 19739576}, 'replyCode': 0, 'replyText': 'OK'}<br>```<br><br>## Installation<br><br>Simply:<br>```sh<br>  $ pip install pymarsys<br>  \ud83d\udc3f<br>```<br>## Documentation<br>Coming soon!<br><br>##Contributing<br><br>1. Check for open issues or open a fresh issue to start a discussion around a feature idea or a bug.<br>2. Fork the repository on GitHub to start making your changes.<br>3. Write a test which shows that the bug was fixed or that the feature works as expected.<br>4. Send a pull request and bug the maintainer until it gets merged and published.\n          </div>"}, "last_serial": 3347791, "releases": {"0.0.1": [], "0.0.1.dev0": [{"comment_text": "", "digests": {"md5": "ec8163edb1767f95ff9f37fbae971bfd", "sha256": "e73e175089aed013d9513e0e411054024d5d7de4892f59374e065a8c293a198e"}, "downloads": -1, "filename": "pymarsys-0.0.1.dev0-py3-none-any.whl", "has_sig": false, "md5_digest": "ec8163edb1767f95ff9f37fbae971bfd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29274, "upload_time": "2017-01-27T23:24:08", "upload_time_iso_8601": "2017-01-27T23:24:08.677406Z", "url": "https://files.pythonhosted.org/packages/2b/0e/4dcd657dfb2e0cc9681451e91a61a27b144979bf4b977133ae6b112f067b/pymarsys-0.0.1.dev0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "77e01ce5c89d5fecc9c216137cd61296", "sha256": "d8a034ac4d4d948ae9af39fe07faa5397bfe2123cf052c0e6efb6814794aa3ff"}, "downloads": -1, "filename": "pymarsys-0.0.1.dev0.tar.gz", "has_sig": false, "md5_digest": "77e01ce5c89d5fecc9c216137cd61296", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9826, "upload_time": "2017-01-27T23:24:10", "upload_time_iso_8601": "2017-01-27T23:24:10.499201Z", "url": "https://files.pythonhosted.org/packages/8a/a1/0015a0af0d73a8f7defada57c8fd54f5a971f7eb6b9e1e57e5fbd4674ffd/pymarsys-0.0.1.dev0.tar.gz", "yanked": false}], "0.0.2.dev0": []}, "urls": [], "timestamp": "Fri May  8 03:02:32 2020"}