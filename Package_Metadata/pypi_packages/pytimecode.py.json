{"info": {"author": "Joshua Banton", "author_email": "bantonj@gmail.com", "bugtrack_url": null, "classifiers": ["Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "Module for manipulating SMPTE timecode. Supports 60, 59.94, 50, 30, 29.97, 25, 24, 23.98 frame rates in drop and non-drop where applicable, and milliseconds. It also supports\noperator overloading for addition, subtraction, multiplication, and division.\n\niter_return sets the format that iterations return, the options are \"tc\" for a timecode string,\n\"frames\" for a int total frames, and \"tc_tuple\" for a tuple of ints in the following format,\n(hours, minutes, seconds, frames).\n\nNotes: *There is a 24 hour SMPTE Timecode limit, so if your time exceeds that limit, it will roll over.\n       *2 PyTimeCode objects of the same frame rate is the only supported way to combine PyTimeCode objects, \n            for example adding them together.\n\nCopyright Joshua Banton", "description_content_type": null, "docs_url": null, "download_url": "http://code.google.com/p/pytimecode/downloads/list", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bantonj.wordpress.com/software/open-source/", "keywords": "video,timecode", "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "pytimecode.py", "package_url": "https://pypi.org/project/pytimecode.py/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/pytimecode.py/", "project_urls": {"Download": "http://code.google.com/p/pytimecode/downloads/list", "Homepage": "http://bantonj.wordpress.com/software/open-source/"}, "release_url": "https://pypi.org/project/pytimecode.py/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "Handles SMPTE Time Code", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            Module for manipulating SMPTE timecode. Supports 60, 59.94, 50, 30, 29.97, 25, 24, 23.98 frame rates in drop and non-drop where applicable, and milliseconds. It also supports<br>operator overloading for addition, subtraction, multiplication, and division.<br><br>iter_return sets the format that iterations return, the options are \"tc\" for a timecode string,<br>\"frames\" for a int total frames, and \"tc_tuple\" for a tuple of ints in the following format,<br>(hours, minutes, seconds, frames).<br><br>Notes: *There is a 24 hour SMPTE Timecode limit, so if your time exceeds that limit, it will roll over.<br>       *2 PyTimeCode objects of the same frame rate is the only supported way to combine PyTimeCode objects, <br>            for example adding them together.<br><br>Copyright Joshua Banton\n          </div>"}, "last_serial": 316378, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 03:14:16 2020"}