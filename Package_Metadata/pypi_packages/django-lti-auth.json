{"info": {"author": ": Rohit Jose", "author_email": ": rohitjose@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "django_lti_auth\n===============\n\n.. image:: https://img.shields.io/pypi/pyversions/django_lti_auth.svg\n    :target: https://pypi.python.org/pypi/django_lti_auth\n\n.. image:: https://img.shields.io/pypi/v/django_lti_auth.svg\n    :target: https://pypi.python.org/pypi/django_lti_auth\n    :alt: Latest PyPI version\n\n.. image:: https://img.shields.io/pypi/dm/django_lti_auth.svg\n    :target: https://pypi.python.org/pypi/django_lti_auth\n\nThis project aims to provide a dead simple way to integrate LTI Authentication into your Django powered app. Try it now, and get rid of the complicated configuration of LTI.\n\nUsage\n-----\n1. Set up the app as an LTI tool on Moodle. You need to specify the following:\n\n   a. Secure Tool URL:\n\n    .. image:: secure_tool_url.png\n        :width: 200px\n        :align: center\n        :height: 100px\n        :alt: Secure Tool URL\n\n   b. Consumer key and Shared secret:\n\n    .. image:: consumer_key.png\n        :width: 200px\n        :align: center\n        :height: 100px\n        :alt: Consumer Key and Secret\n\n2. Import the views module in your root **urls.py**\n\n        .. code-block:: python\n\n         # this is main urls.py for the project\n         from django.conf.urls import url, include\n\n         urlpatterns += [\n                url(r'^lti/', include('django_lti_auth.urls')),\n                ...\n         ]\n\n3. In settings.py, add the LTI related configuration.\n\n        .. code-block:: python\n\n         PYLTI_CONFIG = {\n                 \"consumers\": {\n                     \"<djangoConsumerKey>\": {\n                         \"secret\": \"<djangoSecret>\"\n                     }\n                 },\n                 \"method_hooks\":{\n                     \"valid_lti_request\":\"<Specify method to call after validation of a valid LTI payload>\",\n                     \"invalid_lti_request\":\"<Specify method to call after validation of an invalid LTI payload>\"\n                 },\n                 \"next_url\":\"<Default home page>\"\n             }\n\n4. You also need to add the following settings into your settings.py file.\n\n        .. code-block:: python\n\n         X_FRAME_OPTIONS = 'ALLOW-FROM https://moodle.telt.unsw.edu.au/'\n         SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')\n         SECURE_SSL_REDIRECT = False\n         SESSION_COOKIE_SECURE = True\n         CSRF_COOKIE_SECURE = True\n\n5. Add 'django_lti_auth' to INSTALLED_APPS\n\n        .. code-block:: python\n\n         INSTALLED_APPS = [\n             '...',\n             'django_lti_auth',\n         ]\n\nExplanation\n------------\n* **valid_lti_request** - The module calls the method you specify here after validating the LTI payload if the payload is valid. The method passes the LTI payload values extracted into a python dictionary as an argument to this method. You can use this payload to bind the user variables to the session. \n\n        .. code-block:: python\n\n         def valid_lti_request(user_payload, request):\n             ...\n             request.session['userid'] = user_payload['user_id'] \n             request.session['roles'] =  user_payload['roles']\n             request.session['context_id'] = user_payload['context_id']\n             ...\n\n  You can return a URL value in case you want to redirect the LTI authenticated user to a new URL after the LTI Authentication.\n\n        .. code-block:: python\n\n         def valid_lti_request(user_payload, request):\n             ...\n             url = reverse('<intented URL string>', kwargs={'context': user_payload['context_id'], 'userid':user_payload['user_id']})\n             return url\n\n\n* **invalid_lti_request** -  This method is called after validation when the LTI payload is invalid. You can use this method to redirect the user back to the login page (or an access denied page).\n\nInstallation\n------------\n\nTo install the package run the following command:\n\n.. code-block:: python\n\n pip install django-lti-auth\n\n\nRequirements\n^^^^^^^^^^^^\n.. code-block:: python\n\n  PyLTI==0.5.1\n\nLicence\n-------\nMIT license\n\nAuthors\n-------\n\n`django_lti_auth` was written by `Rohit Jose <rohitjose@gmail.com>`_.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/rohitjose/django-lti-auth.git", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "django-lti-auth", "package_url": "https://pypi.org/project/django-lti-auth/", "platform": "", "project_url": "https://pypi.org/project/django-lti-auth/", "project_urls": {"Homepage": "https://github.com/rohitjose/django-lti-auth.git"}, "release_url": "https://pypi.org/project/django-lti-auth/1.0.0/", "requires_dist": ["PyLTI (==0.5.1)"], "requires_python": "", "summary": "Django LTI Authentication Made Easy. Easily integrate with your LTI provider for django projects", "version": "1.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.python.org/pypi/django_lti_auth\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/pyversions/django_lti_auth.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/771f7976e0ecb0a71cbad911a470daa74cd10b8b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f646a616e676f5f6c74695f617574682e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django_lti_auth\" rel=\"nofollow\"><img alt=\"Latest PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/e239528948ee71552d95537a70c53fc32641cd6b/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f646a616e676f5f6c74695f617574682e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/django_lti_auth\" rel=\"nofollow\"><img alt=\"https://img.shields.io/pypi/dm/django_lti_auth.svg\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9b32f8cb946d61b08353728c6e3e530698ce2d04/68747470733a2f2f696d672e736869656c64732e696f2f707970692f646d2f646a616e676f5f6c74695f617574682e737667\"></a>\n<p>This project aims to provide a dead simple way to integrate LTI Authentication into your Django powered app. Try it now, and get rid of the complicated configuration of LTI.</p>\n<div id=\"usage\">\n<h2>Usage</h2>\n<ol>\n<li><p>Set up the app as an LTI tool on Moodle. You need to specify the following:</p>\n<ol>\n<li>Secure Tool URL:</li>\n</ol>\n<blockquote>\n<img alt=\"Secure Tool URL\" class=\"align-center\" height=\"100px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6d7d740de11597c040f3d1a08eb8a1be66f0464b/7365637572655f746f6f6c5f75726c2e706e67\" width=\"200px\">\n</blockquote>\n<ol>\n<li>Consumer key and Shared secret:</li>\n</ol>\n<blockquote>\n<img alt=\"Consumer Key and Secret\" class=\"align-center\" height=\"100px\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1bc21934ced0d0a3bad4195d4bd742701b353f26/636f6e73756d65725f6b65792e706e67\" width=\"200px\">\n</blockquote>\n</li>\n<li><p>Import the views module in your root <strong>urls.py</strong></p>\n<blockquote>\n<pre><span class=\"c1\"># this is main urls.py for the project</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.conf.urls</span> <span class=\"kn\">import</span> <span class=\"n\">url</span><span class=\"p\">,</span> <span class=\"n\">include</span>\n\n<span class=\"n\">urlpatterns</span> <span class=\"o\">+=</span> <span class=\"p\">[</span>\n       <span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^lti/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'django_lti_auth.urls'</span><span class=\"p\">)),</span>\n       <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n</blockquote>\n</li>\n<li><p>In settings.py, add the LTI related configuration.</p>\n<blockquote>\n<pre><span class=\"n\">PYLTI_CONFIG</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"consumers\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n            <span class=\"s2\">\"&lt;djangoConsumerKey&gt;\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n                <span class=\"s2\">\"secret\"</span><span class=\"p\">:</span> <span class=\"s2\">\"&lt;djangoSecret&gt;\"</span>\n            <span class=\"p\">}</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"method_hooks\"</span><span class=\"p\">:{</span>\n            <span class=\"s2\">\"valid_lti_request\"</span><span class=\"p\">:</span><span class=\"s2\">\"&lt;Specify method to call after validation of a valid LTI payload&gt;\"</span><span class=\"p\">,</span>\n            <span class=\"s2\">\"invalid_lti_request\"</span><span class=\"p\">:</span><span class=\"s2\">\"&lt;Specify method to call after validation of an invalid LTI payload&gt;\"</span>\n        <span class=\"p\">},</span>\n        <span class=\"s2\">\"next_url\"</span><span class=\"p\">:</span><span class=\"s2\">\"&lt;Default home page&gt;\"</span>\n    <span class=\"p\">}</span>\n</pre>\n</blockquote>\n</li>\n<li><p>You also need to add the following settings into your settings.py file.</p>\n<blockquote>\n<pre><span class=\"n\">X_FRAME_OPTIONS</span> <span class=\"o\">=</span> <span class=\"s1\">'ALLOW-FROM https://moodle.telt.unsw.edu.au/'</span>\n<span class=\"n\">SECURE_PROXY_SSL_HEADER</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s1\">'HTTP_X_FORWARDED_PROTO'</span><span class=\"p\">,</span> <span class=\"s1\">'https'</span><span class=\"p\">)</span>\n<span class=\"n\">SECURE_SSL_REDIRECT</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>\n<span class=\"n\">SESSION_COOKIE_SECURE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"n\">CSRF_COOKIE_SECURE</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n</pre>\n</blockquote>\n</li>\n<li><p>Add \u2018django_lti_auth\u2019 to INSTALLED_APPS</p>\n<blockquote>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"s1\">'...'</span><span class=\"p\">,</span>\n    <span class=\"s1\">'django_lti_auth'</span><span class=\"p\">,</span>\n<span class=\"p\">]</span>\n</pre>\n</blockquote>\n</li>\n</ol>\n</div>\n<div id=\"explanation\">\n<h2>Explanation</h2>\n<ul>\n<li><p><strong>valid_lti_request</strong> - The module calls the method you specify here after validating the LTI payload if the payload is valid. The method passes the LTI payload values extracted into a python dictionary as an argument to this method. You can use this payload to bind the user variables to the session.</p>\n<blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">valid_lti_request</span><span class=\"p\">(</span><span class=\"n\">user_payload</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">'userid'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user_payload</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">'roles'</span><span class=\"p\">]</span> <span class=\"o\">=</span>  <span class=\"n\">user_payload</span><span class=\"p\">[</span><span class=\"s1\">'roles'</span><span class=\"p\">]</span>\n    <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">session</span><span class=\"p\">[</span><span class=\"s1\">'context_id'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">user_payload</span><span class=\"p\">[</span><span class=\"s1\">'context_id'</span><span class=\"p\">]</span>\n    <span class=\"o\">...</span>\n</pre>\n</blockquote>\n<p>You can return a URL value in case you want to redirect the LTI authenticated user to a new URL after the LTI Authentication.</p>\n<blockquote>\n<pre><span class=\"k\">def</span> <span class=\"nf\">valid_lti_request</span><span class=\"p\">(</span><span class=\"n\">user_payload</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"n\">reverse</span><span class=\"p\">(</span><span class=\"s1\">'&lt;intented URL string&gt;'</span><span class=\"p\">,</span> <span class=\"n\">kwargs</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'context'</span><span class=\"p\">:</span> <span class=\"n\">user_payload</span><span class=\"p\">[</span><span class=\"s1\">'context_id'</span><span class=\"p\">],</span> <span class=\"s1\">'userid'</span><span class=\"p\">:</span><span class=\"n\">user_payload</span><span class=\"p\">[</span><span class=\"s1\">'user_id'</span><span class=\"p\">]})</span>\n    <span class=\"k\">return</span> <span class=\"n\">url</span>\n</pre>\n</blockquote>\n</li>\n<li><p><strong>invalid_lti_request</strong> -  This method is called after validation when the LTI payload is invalid. You can use this method to redirect the user back to the login page (or an access denied page).</p>\n</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>To install the package run the following command:</p>\n<pre><span class=\"n\">pip</span> <span class=\"n\">install</span> <span class=\"n\">django</span><span class=\"o\">-</span><span class=\"n\">lti</span><span class=\"o\">-</span><span class=\"n\">auth</span>\n</pre>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<pre><span class=\"n\">PyLTI</span><span class=\"o\">==</span><span class=\"mf\">0.5</span><span class=\"o\">.</span><span class=\"mi\">1</span>\n</pre>\n</div>\n</div>\n<div id=\"licence\">\n<h2>Licence</h2>\n<p>MIT license</p>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p><cite>django_lti_auth</cite> was written by <a href=\"mailto:rohitjose%40gmail.com\">Rohit Jose</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 4480282, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "de6740b4d764795fe6876176a119d88b", "sha256": "5518977c3f6db1552ff5214f4ca8c1eb2060438fbf322bc7e9d0beafa254b860"}, "downloads": -1, "filename": "django_lti_auth-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "de6740b4d764795fe6876176a119d88b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5570, "upload_time": "2018-11-13T04:07:54", "upload_time_iso_8601": "2018-11-13T04:07:54.935240Z", "url": "https://files.pythonhosted.org/packages/fc/0d/4ffadc998e704edfb2e64dd9a8fc2f7ce74a1003264b9df3139d07245055/django_lti_auth-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9403a0e79ca7139f59ee493e4cad21d", "sha256": "30bd74f233f96b2e2e6ecaca43eecf7c0e1a4e4e69f741c92a80dc68b0c1743a"}, "downloads": -1, "filename": "django_lti_auth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9403a0e79ca7139f59ee493e4cad21d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30993, "upload_time": "2018-11-13T04:07:57", "upload_time_iso_8601": "2018-11-13T04:07:57.397453Z", "url": "https://files.pythonhosted.org/packages/5d/a4/8716cc18e4905cc89fe7b25525a68e1e9c48ab192945f209c3513ae01493/django_lti_auth-1.0.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "de6740b4d764795fe6876176a119d88b", "sha256": "5518977c3f6db1552ff5214f4ca8c1eb2060438fbf322bc7e9d0beafa254b860"}, "downloads": -1, "filename": "django_lti_auth-1.0.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "de6740b4d764795fe6876176a119d88b", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 5570, "upload_time": "2018-11-13T04:07:54", "upload_time_iso_8601": "2018-11-13T04:07:54.935240Z", "url": "https://files.pythonhosted.org/packages/fc/0d/4ffadc998e704edfb2e64dd9a8fc2f7ce74a1003264b9df3139d07245055/django_lti_auth-1.0.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f9403a0e79ca7139f59ee493e4cad21d", "sha256": "30bd74f233f96b2e2e6ecaca43eecf7c0e1a4e4e69f741c92a80dc68b0c1743a"}, "downloads": -1, "filename": "django_lti_auth-1.0.0.tar.gz", "has_sig": false, "md5_digest": "f9403a0e79ca7139f59ee493e4cad21d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 30993, "upload_time": "2018-11-13T04:07:57", "upload_time_iso_8601": "2018-11-13T04:07:57.397453Z", "url": "https://files.pythonhosted.org/packages/5d/a4/8716cc18e4905cc89fe7b25525a68e1e9c48ab192945f209c3513ae01493/django_lti_auth-1.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:15 2020"}