{"info": {"author": "Bon Huang", "author_email": "bangyellow@hotmail.com", "bugtrack_url": null, "classifiers": [], "description": "configuration-python\n====================\n\nAll the codes are in object oriented style.\nThey are functional codes and at the some time they are sample codes. Programmer can simply write their customized script by inheriting the class createMo in \u201ccreateMo.py\u201d.  \n\n\n#How to use:\n\nAll the codes support three different input methods: wizard, yaml and cli.\n\n1. wizard: configure a mo by following a wizard. Usage: \n<br>python createFilter.py wizard\n<br>To get the help info: python createFilter.py wizard \u2013h\n\n2. yaml: configure a mo with a config file (yaml format). Usage:\n<br>python createFilter.py yaml createFilter.yaml\n<br>To get the help info: python createFilter.py yaml \u2013h\n\n3. cli: configure a mo based on you python arguments.  It contains key arguments and optional arguments. Flags are used in order to call the optional arguments. Usage:\n<br>python createFilter.py cli 172.31.216.100 admin ins3965! tenantA filterA \u2013e ip \u2013i tcp \n<br>To get the help info: python createFilter.py cli \u2013h\n\n\n#What are those codes:\n\ncreateMo.py: the basic class/module. It also contains useful functions that help programmers for writing their customized scripts.\n\nThe other scripts are functional scripts. Each of them does a small work. For example, createTenant.py only creates an \u201cempty\u201d tenant without any other setup.\n\n\n#How to delete a mo:\n\nUsing -d flag. Example if you want to delete a filter, you can call createFilter.py with a -d flag. The delete method is supported in all three input methods. For example:\n\n<br>python createFilter -d yaml\n<br>python createFilter -d wizard\n<br>python createFilter -d cli 172.31.216.100 admin ins3965! tenantA filterA", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/datacenter/ACI/tree/master/configuration-python", "keywords": "Create MO in Cisco APIC", "license": "Cisco", "maintainer": null, "maintainer_email": null, "name": "apic_python", "package_url": "https://pypi.org/project/apic_python/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/apic_python/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/datacenter/ACI/tree/master/configuration-python"}, "release_url": "https://pypi.org/project/apic_python/0.0.1/", "requires_dist": null, "requires_python": null, "summary": "This are codes for creating MO in APIC through CLI", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>All the codes are in object oriented style.\nThey are functional codes and at the some time they are sample codes. Programmer can simply write their customized script by inheriting the class createMo in \u201ccreateMo.py\u201d.</p>\n<p>#How to use:</p>\n<p>All the codes support three different input methods: wizard, yaml and cli.</p>\n<p>1. wizard: configure a mo by following a wizard. Usage:\n&lt;br&gt;python createFilter.py wizard\n&lt;br&gt;To get the help info: python createFilter.py wizard \u2013h</p>\n<p>2. yaml: configure a mo with a config file (yaml format). Usage:\n&lt;br&gt;python createFilter.py yaml createFilter.yaml\n&lt;br&gt;To get the help info: python createFilter.py yaml \u2013h</p>\n<p>3. cli: configure a mo based on you python arguments.  It contains key arguments and optional arguments. Flags are used in order to call the optional arguments. Usage:\n&lt;br&gt;python createFilter.py cli 172.31.216.100 admin ins3965! tenantA filterA \u2013e ip \u2013i tcp\n&lt;br&gt;To get the help info: python createFilter.py cli \u2013h</p>\n<p>#What are those codes:</p>\n<p>createMo.py: the basic class/module. It also contains useful functions that help programmers for writing their customized scripts.</p>\n<p>The other scripts are functional scripts. Each of them does a small work. For example, createTenant.py only creates an \u201cempty\u201d tenant without any other setup.</p>\n<p>#How to delete a mo:</p>\n<p>Using -d flag. Example if you want to delete a filter, you can call createFilter.py with a -d flag. The delete method is supported in all three input methods. For example:</p>\n<p>&lt;br&gt;python createFilter -d yaml\n&lt;br&gt;python createFilter -d wizard\n&lt;br&gt;python createFilter -d cli 172.31.216.100 admin ins3965! tenantA filterA</p>\n\n          </div>"}, "last_serial": 1252489, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "c0667af38825ff8dfa420ff05c7bbd6e", "sha256": "319127a7d6da71a1629f9678a6f79fd98300accf5910af2cb8080f567ea6c190"}, "downloads": -1, "filename": "apic_python-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c0667af38825ff8dfa420ff05c7bbd6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2489, "upload_time": "2014-10-09T00:48:03", "upload_time_iso_8601": "2014-10-09T00:48:03.105974Z", "url": "https://files.pythonhosted.org/packages/8d/28/c5a6ca5fd39e0df58f01a06cb385e5f7b50d102974327b292f284fb6718c/apic_python-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c0667af38825ff8dfa420ff05c7bbd6e", "sha256": "319127a7d6da71a1629f9678a6f79fd98300accf5910af2cb8080f567ea6c190"}, "downloads": -1, "filename": "apic_python-0.0.1.tar.gz", "has_sig": false, "md5_digest": "c0667af38825ff8dfa420ff05c7bbd6e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 2489, "upload_time": "2014-10-09T00:48:03", "upload_time_iso_8601": "2014-10-09T00:48:03.105974Z", "url": "https://files.pythonhosted.org/packages/8d/28/c5a6ca5fd39e0df58f01a06cb385e5f7b50d102974327b292f284fb6718c/apic_python-0.0.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:17:50 2020"}