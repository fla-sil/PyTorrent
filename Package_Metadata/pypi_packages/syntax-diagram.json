{"info": {"author": "Glen Fletcher", "author_email": "glen.fletcher@alphaomega-technology.com.au", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha"], "description": "Railroad-diagram Generator\r\n==========================\r\n\r\nThis is a small js library for generating railroad diagrams (like what `JSON.org <http://json.org>`_ uses) using SVG.\r\n\r\nRailroad diagrams are a way of visually representing a grammar in a form that is more readable than using regular expressions or BNF.\r\n\r\nThis code is forked from `tabatkins/railroad-diagrams <https://github.com/tabatkins/railroad-diagrams>`_, which implimented a Javascript and Python Version, This  project has reworked the Python Version into a proper Python Package, installable using setup tools.\r\n\r\nDetails\r\n-------\r\n\r\nTo use the library, import railroad_diagram, and then call the railroad_diagram.Diagram() function. Its arguments are the components of the diagram (Diagram is a special form of Sequence). Components are either leaves or containers.\r\n\r\nThe leaves:\r\n\r\n* railroad_diagram.Terminal(text) or a bare string - represents literal text, EBNF ``\"text\"``\r\n* railroad_diagram.NonTerminal(text) - represents an instruction or another production, EBNF ``text``\r\n* Comment(text) - a comment, EBNF ``(* text *)``\r\n* Skip() - an empty line\r\n\r\nThe containers:\r\n\r\n* railroad_diagram.Sequence(children) - like simple concatenation in a regex, EBNF ``s1, s2, ...``\r\n* railroad_diagram.Choice(index, children) - List of Options.  The index argument specifies which child is the \"normal\" choice and should go in the middle, EBNF ``c1 | c2 | ...``\r\n* Optional(child, skip) - A shorthand for `Choice(1, [Skip(), child])`.  If the optional `skip` parameter has the value `\"skip\"`, it instead puts the Skip() in the straight-line path, for when the \"normal\" behavior is to omit the item. EBNF ``[child]`` or ``child?``\r\n* railroad_diagram.OneOrMore(child, repeat) - The 'repeat' argument is optional, and specifies something that must go between the repetitions. EBNF ``{child}`` or ``child+``\r\n* railroad_diagram.ZeroOrMore(child, repeat, skip) - A shorthand for `Optional(OneOrMore(child, repeat))`.  The optional `skip` parameter is identical to Optional(). EBNF ``[{child}]`` or ``child*``\r\n\r\nYou'll find a `writeSvg(writerFunc)` method on `Diagram`, which takes a callback of one argument and passes it the string form of the diagram.  For example, it can be used like ``Diagram(...).writeSvg(sys.stdout.write)`` to write to stdout.\r\n\r\n.. Note:: the callback will be called multiple times as it builds up the string, not just once with the whole thing.  If you need it all at once, consider something like a `StringIO` as an easy way to collect it into a single string.\r\n\r\nOptions\r\n-------\r\n\r\nThere are a few options you can tweak, at the bottom of the file.  Just tweak either until the diagram looks like what you want.\r\nYou can also change the CSS file - feel free to tweak to your heart's content.\r\nNote, though, that if you change the text sizes in the CSS,\r\nyou'll have to go adjust the metrics for the leaf nodes as well.\r\n\r\n* railroad_diagram.VERTICAL_SEPARATION - sets the minimum amount of vertical separation between two items.  Note that the stroke width isn't counted when computing the separation; this shouldn't be relevant unless you have a very small separation or very large stroke width.\r\n* railroad_diagram.ARC_RADIUS - the radius of the arcs used in the branching containers like Choice.  This has a relatively large effect on the size of non-trivial diagrams.  Both tight and loose values look good, depending on what you're going for.\r\n* railroad_diagram.DIAGRAM_CLASS - the class set on the root `<svg>` element of each diagram, for use in the CSS stylesheet.\r\n* railroad_diagram.STROKE_ODD_PIXEL_LENGTH - the default stylesheet uses odd pixel lengths for 'stroke'. Due to rasterization artifacts, they look best when the item has been translated half a pixel in both directions. If you change the styling to use a stroke with even pixel lengths, you'll want to set this variable to `false`.\r\n* railroad_diagram.INTERNAL_ALIGNMENT - when some branches of a container are narrower than others, this determines how they're aligned in the extra space.  Defaults to \"center\", but can be set to \"left\" or \"right\".\r\n\r\nCaveats\r\n-------\r\n\r\nAt this early stage, the generator is feature-complete and works as intended, but still has several TODOs:\r\n\r\n* The font-sizes are hard-coded right now, and the font handling in general is very dumb - I'm just guessing at some metrics that are probably \"good enough\" rather than measuring things properly.\r\n\r\n\r\nLicense\r\n-------\r\n\r\nThis Fork is Copyright 2014 AlphaOmega Technology\r\n \r\nLicensed under the AlphaOmega Technology Open License Version 1.0\r\n\r\nYou may obtain a copy of the License at http://www.alphaomega-technology.com.au/license/AOT-OL/1.0\r\n\r\nThis License only applies to the modifications made by this fork, the files\r\n**railroad_diagram/core.py** and **railroad_diagram/style.css** are unmodified and the orginal license applies.\r\n\r\n\r\nThe Orginal project `tabatkins/railroad-diagrams <https://github.com/tabatkins/railroad-diagrams>`_ is licensed under `CC0 <http://creativecommons.org/publicdomain/zero/1.0/>`_. And can be used freely.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/alphaomega-technology/syntax-diagram", "keywords": "", "license": "AlphaOmega Technology Open License Version 1.0 (http://www.alphaomega-technology.com.au/license/AOT-OL/1.0)", "maintainer": "", "maintainer_email": "", "name": "syntax-diagram", "package_url": "https://pypi.org/project/syntax-diagram/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/syntax-diagram/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/alphaomega-technology/syntax-diagram"}, "release_url": "https://pypi.org/project/syntax-diagram/1.0.dev-20140530/", "requires_dist": null, "requires_python": null, "summary": "UNKNOWN", "version": "1.0.dev-20140530", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This is a small js library for generating railroad diagrams (like what <a href=\"http://json.org\" rel=\"nofollow\">JSON.org</a> uses) using SVG.</p>\n<p>Railroad diagrams are a way of visually representing a grammar in a form that is more readable than using regular expressions or BNF.</p>\n<p>This code is forked from <a href=\"https://github.com/tabatkins/railroad-diagrams\" rel=\"nofollow\">tabatkins/railroad-diagrams</a>, which implimented a Javascript and Python Version, This  project has reworked the Python Version into a proper Python Package, installable using setup tools.</p>\n<div id=\"details\">\n<h2>Details</h2>\n<p>To use the library, import railroad_diagram, and then call the railroad_diagram.Diagram() function. Its arguments are the components of the diagram (Diagram is a special form of Sequence). Components are either leaves or containers.</p>\n<p>The leaves:</p>\n<ul>\n<li>railroad_diagram.Terminal(text) or a bare string - represents literal text, EBNF <tt>\"text\"</tt></li>\n<li>railroad_diagram.NonTerminal(text) - represents an instruction or another production, EBNF <tt>text</tt></li>\n<li>Comment(text) - a comment, EBNF <tt>(* text *)</tt></li>\n<li>Skip() - an empty line</li>\n</ul>\n<p>The containers:</p>\n<ul>\n<li>railroad_diagram.Sequence(children) - like simple concatenation in a regex, EBNF <tt>s1, s2, ...</tt></li>\n<li>railroad_diagram.Choice(index, children) - List of Options.  The index argument specifies which child is the \u201cnormal\u201d choice and should go in the middle, EBNF <tt>c1 | c2 | ...</tt></li>\n<li>Optional(child, skip) - A shorthand for <cite>Choice(1, [Skip(), child])</cite>.  If the optional <cite>skip</cite> parameter has the value <cite>\u201cskip\u201d</cite>, it instead puts the Skip() in the straight-line path, for when the \u201cnormal\u201d behavior is to omit the item. EBNF <tt>[child]</tt> or <tt>child?</tt></li>\n<li>railroad_diagram.OneOrMore(child, repeat) - The \u2018repeat\u2019 argument is optional, and specifies something that must go between the repetitions. EBNF <tt>{child}</tt> or <tt>child+</tt></li>\n<li>railroad_diagram.ZeroOrMore(child, repeat, skip) - A shorthand for <cite>Optional(OneOrMore(child, repeat))</cite>.  The optional <cite>skip</cite> parameter is identical to Optional(). EBNF <tt>[{child}]</tt> or <tt>child*</tt></li>\n</ul>\n<p>You\u2019ll find a <cite>writeSvg(writerFunc)</cite> method on <cite>Diagram</cite>, which takes a callback of one argument and passes it the string form of the diagram.  For example, it can be used like <tt><span class=\"pre\">Diagram(...).writeSvg(sys.stdout.write)</span></tt> to write to stdout.</p>\n<div>\n<p>Note</p>\n<p>the callback will be called multiple times as it builds up the string, not just once with the whole thing.  If you need it all at once, consider something like a <cite>StringIO</cite> as an easy way to collect it into a single string.</p>\n</div>\n</div>\n<div id=\"options\">\n<h2>Options</h2>\n<p>There are a few options you can tweak, at the bottom of the file.  Just tweak either until the diagram looks like what you want.\nYou can also change the CSS file - feel free to tweak to your heart\u2019s content.\nNote, though, that if you change the text sizes in the CSS,\nyou\u2019ll have to go adjust the metrics for the leaf nodes as well.</p>\n<ul>\n<li>railroad_diagram.VERTICAL_SEPARATION - sets the minimum amount of vertical separation between two items.  Note that the stroke width isn\u2019t counted when computing the separation; this shouldn\u2019t be relevant unless you have a very small separation or very large stroke width.</li>\n<li>railroad_diagram.ARC_RADIUS - the radius of the arcs used in the branching containers like Choice.  This has a relatively large effect on the size of non-trivial diagrams.  Both tight and loose values look good, depending on what you\u2019re going for.</li>\n<li>railroad_diagram.DIAGRAM_CLASS - the class set on the root <cite>&lt;svg&gt;</cite> element of each diagram, for use in the CSS stylesheet.</li>\n<li>railroad_diagram.STROKE_ODD_PIXEL_LENGTH - the default stylesheet uses odd pixel lengths for \u2018stroke\u2019. Due to rasterization artifacts, they look best when the item has been translated half a pixel in both directions. If you change the styling to use a stroke with even pixel lengths, you\u2019ll want to set this variable to <cite>false</cite>.</li>\n<li>railroad_diagram.INTERNAL_ALIGNMENT - when some branches of a container are narrower than others, this determines how they\u2019re aligned in the extra space.  Defaults to \u201ccenter\u201d, but can be set to \u201cleft\u201d or \u201cright\u201d.</li>\n</ul>\n</div>\n<div id=\"caveats\">\n<h2>Caveats</h2>\n<p>At this early stage, the generator is feature-complete and works as intended, but still has several TODOs:</p>\n<ul>\n<li>The font-sizes are hard-coded right now, and the font handling in general is very dumb - I\u2019m just guessing at some metrics that are probably \u201cgood enough\u201d rather than measuring things properly.</li>\n</ul>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>This Fork is Copyright 2014 AlphaOmega Technology</p>\n<p>Licensed under the AlphaOmega Technology Open License Version 1.0</p>\n<p>You may obtain a copy of the License at <a href=\"http://www.alphaomega-technology.com.au/license/AOT-OL/1.0\" rel=\"nofollow\">http://www.alphaomega-technology.com.au/license/AOT-OL/1.0</a></p>\n<p>This License only applies to the modifications made by this fork, the files\n<strong>railroad_diagram/core.py</strong> and <strong>railroad_diagram/style.css</strong> are unmodified and the orginal license applies.</p>\n<p>The Orginal project <a href=\"https://github.com/tabatkins/railroad-diagrams\" rel=\"nofollow\">tabatkins/railroad-diagrams</a> is licensed under <a href=\"http://creativecommons.org/publicdomain/zero/1.0/\" rel=\"nofollow\">CC0</a>. And can be used freely.</p>\n</div>\n\n          </div>"}, "last_serial": 1108770, "releases": {"1.0.dev-20140530": []}, "urls": [], "timestamp": "Fri May  8 02:58:59 2020"}