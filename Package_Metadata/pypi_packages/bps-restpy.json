{"info": {"author": "Keysight ISG BreakingPoint Team", "author_email": "constantin.cretu@keysight.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development"], "description": "## The BreakingPoint RESTv2 API Python Wrapper \n[![pypi](https://img.shields.io/pypi/v/bps-restpy.svg)](https://pypi.org/project/bps-restpy)\n[![python](https://img.shields.io/pypi/pyversions/bps-restpy.svg)](https://pypi.python.org/pypi/bps-restpy)\n[![license](https://img.shields.io/badge/license-MIT-green.svg)](https://en.wikipedia.org/wiki/MIT_License)\n[![downloads](https://pepy.tech/badge/bps-restpy)](https://pepy.tech/project/bps-restpy)\n\n## BreakingPoint detail\nNetwork testing with  [BreakingPoint\u00c2\u00ae](https://www.ixiacom.com/products/network-security-testing-breakingpoint). By simulating real-world legitimate traffic, distributed denial of service (DDoS), exploits, malware, and fuzzing, BreakingPoint validates an organization\u00e2\u20ac\u2122s security infrastructure, reduces the risk of network degradation by almost 80%, and increases attack readiness by nearly 70%. And with our new TrafficREWIND solution, you'll get even more realistic and high-fidelity validation by adding production network insight into BreakingPoint test traffic configuration\nMore details:\n\n## Install the package\n```\npip install --upgrade bps-restpy\n```\n\n## Start scripting\n```python\n\"\"\"This script demonstrates how to get started with bps_restpy scripting.\n\n# Title:  Python Script Sample To Run a Canned Test.\n# Actions:\n#   1. Login to BPS box\n#   2. Reserve ports\n#   3. Load a test from the box and start the run\n#   4. Wait for the test to finish\n#   5. Get test result\n#   6. Get and print the Synopsis page from report\n#   7. Unreserve ports\n#   8. Logout\n\n\n#================\n\n########################################\nimport time, sys, os\n# Import corresponding BPS RESTv2 python2.7/ 3 library from outside the folder with samples.\nsys.path.insert(1, os.path.dirname(os.getcwd()))\n\nfrom bps_restpy.bps import BPS, pp\n\n########################################\n\n\n########################################\n# Demo script global variables\n########################################\n# Demo script global variables\ncanned_test_name = 'AppSim'\n#bps system info\nbps_system  = '<BPS_BOX_IP/HOSTNAME>'\nbpsuser     = 'bps user'\nbpspass     = 'bps pass'\n\n\nslot_number = 2\nport_list   = [0, 1]\n\n########################################\n\n\n########################################\n# Login to BPS box\nbps = BPS(bps_system, bpsuser, bpspass)\nbps.login()\n\n\n########################################\nprint(\"Load a canned test: \")\nbps.testmodel.load(canned_test_name)\n\n########################################\nprint(\"Reserve Ports\")\nfor p in port_list:\n    bps.topology.reserve([{'slot': slot_number, 'port': p, 'group': 2}])\n\n\n########################################\nprint(\"Run test and Get Stats:\")\ntest_id_json = bps.testmodel.run(modelname=canned_test_name, group=2)\ntestid = str( test_id_json[\"runid\"] )\nrun_id = 'TEST-' + testid\nprint(\"Test Run Id: %s\"%run_id)\n\n#get the ids for all tests running on the chassis\nrunningTests_Ids = [test['id'] for  test in bps.topology.runningTest.get()] \n#wait while the test is still running\nwhile run_id in runningTests_Ids:\n     run_state =  bps.topology.runningTest[run_id].get()\n     #print progress if test started\n     try: print ('progress: %s%% , runtime %ss' % (run_state['progress'], run_state['runtime'] ))\n     except: print (\"Starting...\")\n     time.sleep(2)\n     #update the current running tests\n     runningTests_Ids = [test['id'] for  test in bps.topology.runningTest.get()] \n\nprint(\"~The test finished the execution.\")\nresults = bps.reports.search(searchString=canned_test_name, limit=10, sort=\"endTime\", sortorder=\"descending\")\nresult  = results[0]\nprint (\"%s execution duration %s ended with status: %s \" % (result['name'], result['duration'], result['result']) )\n\n#getting 3.4 Section: Synopsys Summary of Results from the Report\ntabledata = bps.reports.getReportTable(runid=testid, sectionId=\"3.4\")\npp(tabledata)\n\nprint (\"Unreserving the ports\")\nfor p in port_list:\n    bps.topology.unreserve([{'slot': slot_number, 'port': p, 'group': 2}])\n\nbps.logout()\n```\nwew\n## Documentation\nDocumentation\u00c2\u00a0is available using the following methods:\n* [Online web based documentation and samples](https://github.com/OpenIxia/BreakingPoint)\n* On your BreakingPoint System RestApi found near the BreakingPoint App  \n* Documentation available in the online doc browser is also inlined in each class, property and method and can be viewed using the python help command\n  ```python\n  from bps_restpy.bps import BPS, pp\n\n  #login to your Breaking Point System\n  help(BPS)\n  bps = BPS('your_bps_IP_or_FQDN', 'admin', 'admin')\n\n  help(bps.testmodel.importModel)\n\n  ```\n\n## Additional Samples\nVisit the [OpenIxia\u00c2\u00a0breakingpoint-restpy\u00c2\u00a0sample site maintained by solution architects](https://github.com/OpenIxia/BreakingPoint) for\u00c2\u00a0in\u00c2\u00a0depth\u00c2\u00a0end-to-end\u00c2\u00a0samples\u00c2\u00a0that\u00c2\u00a0demonstrate\u00c2\u00a0the\u00c2\u00a0following:\n* building\u00c2\u00a0a\u00c2\u00a0configuration\n  * from\u00c2\u00a0scratch\n  * from\u00c2\u00a0an\u00c2\u00a0existing\u00c2\u00a0BreakingPoint\u00c2\u00a0configuration\n* running\u00c2\u00a0the\u00c2\u00a0configuration\n  * connecting\u00c2\u00a0ports\u00c2\u00a0to\u00c2\u00a0hardware\n  * starting\u00c2\u00a0protocols\n  * starting\u00c2\u00a0traffic\n* getting\u00c2\u00a0statistics\n  * port\u00c2\u00a0stats\n  * traffic\u00c2\u00a0stats\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/OpenIxia/bps_restpy", "keywords": "bps breakingpoint security network test tool ixia keysight automation", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "bps-restpy", "package_url": "https://pypi.org/project/bps-restpy/", "platform": "", "project_url": "https://pypi.org/project/bps-restpy/", "project_urls": {"Homepage": "https://github.com/OpenIxia/bps_restpy"}, "release_url": "https://pypi.org/project/bps-restpy/9.0.2/", "requires_dist": ["requests"], "requires_python": ">=2.7, <4", "summary": "BreakingPoint REST API Python Wraper", "version": "9.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h2>The BreakingPoint RESTv2 API Python Wrapper</h2>\n<p><a href=\"https://pypi.org/project/bps-restpy\" rel=\"nofollow\"><img alt=\"pypi\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/48eaf8316e8cc5978c76d51768196c9954233699/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f6270732d7265737470792e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/bps-restpy\" rel=\"nofollow\"><img alt=\"python\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/5e9c7a7e067fd3227fc221af00dc6a149bc5d72d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f6270732d7265737470792e737667\"></a>\n<a href=\"https://en.wikipedia.org/wiki/MIT_License\" rel=\"nofollow\"><img alt=\"license\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f7db8d43223f55fabe102838639f47819829c1ca/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f6c6963656e73652d4d49542d677265656e2e737667\"></a>\n<a href=\"https://pepy.tech/project/bps-restpy\" rel=\"nofollow\"><img alt=\"downloads\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/60d380303bd36f085881a8ff6ad133e55d1ad31d/68747470733a2f2f706570792e746563682f62616467652f6270732d726573747079\"></a></p>\n<h2>BreakingPoint detail</h2>\n<p>Network testing with  <a href=\"https://www.ixiacom.com/products/network-security-testing-breakingpoint\" rel=\"nofollow\">BreakingPoint\u00c2\u00ae</a>. By simulating real-world legitimate traffic, distributed denial of service (DDoS), exploits, malware, and fuzzing, BreakingPoint validates an organization\u00e2\u20ac\u2122s security infrastructure, reduces the risk of network degradation by almost 80%, and increases attack readiness by nearly 70%. And with our new TrafficREWIND solution, you'll get even more realistic and high-fidelity validation by adding production network insight into BreakingPoint test traffic configuration\nMore details:</p>\n<h2>Install the package</h2>\n<pre><code>pip install --upgrade bps-restpy\n</code></pre>\n<h2>Start scripting</h2>\n<pre><span class=\"s2\">\"\"\"This script demonstrates how to get started with bps_restpy scripting.</span>\n\n<span class=\"s2\"># Title:  Python Script Sample To Run a Canned Test.</span>\n<span class=\"s2\"># Actions:</span>\n<span class=\"s2\">#   1. Login to BPS box</span>\n<span class=\"s2\">#   2. Reserve ports</span>\n<span class=\"s2\">#   3. Load a test from the box and start the run</span>\n<span class=\"s2\">#   4. Wait for the test to finish</span>\n<span class=\"s2\">#   5. Get test result</span>\n<span class=\"s2\">#   6. Get and print the Synopsis page from report</span>\n<span class=\"s2\">#   7. Unreserve ports</span>\n<span class=\"s2\">#   8. Logout</span>\n\n\n<span class=\"s2\">#================</span>\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\">import time, sys, os</span>\n<span class=\"s2\"># Import corresponding BPS RESTv2 python2.7/ 3 library from outside the folder with samples.</span>\n<span class=\"s2\">sys.path.insert(1, os.path.dirname(os.getcwd()))</span>\n\n<span class=\"s2\">from bps_restpy.bps import BPS, pp</span>\n\n<span class=\"s2\">########################################</span>\n\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\"># Demo script global variables</span>\n<span class=\"s2\">########################################</span>\n<span class=\"s2\"># Demo script global variables</span>\n<span class=\"s2\">canned_test_name = 'AppSim'</span>\n<span class=\"s2\">#bps system info</span>\n<span class=\"s2\">bps_system  = '&lt;BPS_BOX_IP/HOSTNAME&gt;'</span>\n<span class=\"s2\">bpsuser     = 'bps user'</span>\n<span class=\"s2\">bpspass     = 'bps pass'</span>\n\n\n<span class=\"s2\">slot_number = 2</span>\n<span class=\"s2\">port_list   = [0, 1]</span>\n\n<span class=\"s2\">########################################</span>\n\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\"># Login to BPS box</span>\n<span class=\"s2\">bps = BPS(bps_system, bpsuser, bpspass)</span>\n<span class=\"s2\">bps.login()</span>\n\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\">print(\"Load a canned test: \")</span>\n<span class=\"s2\">bps.testmodel.load(canned_test_name)</span>\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\">print(\"Reserve Ports\")</span>\n<span class=\"s2\">for p in port_list:</span>\n<span class=\"s2\">    bps.topology.reserve([{'slot': slot_number, 'port': p, 'group': 2}])</span>\n\n\n<span class=\"s2\">########################################</span>\n<span class=\"s2\">print(\"Run test and Get Stats:\")</span>\n<span class=\"s2\">test_id_json = bps.testmodel.run(modelname=canned_test_name, group=2)</span>\n<span class=\"s2\">testid = str( test_id_json[\"runid\"] )</span>\n<span class=\"s2\">run_id = 'TEST-' + testid</span>\n<span class=\"s2\">print(\"Test Run Id: </span><span class=\"si\">%s</span><span class=\"s2\">\"</span><span class=\"si\">%r</span><span class=\"s2\">un_id)</span>\n\n<span class=\"s2\">#get the ids for all tests running on the chassis</span>\n<span class=\"s2\">runningTests_Ids = [test['id'] for  test in bps.topology.runningTest.get()] </span>\n<span class=\"s2\">#wait while the test is still running</span>\n<span class=\"s2\">while run_id in runningTests_Ids:</span>\n<span class=\"s2\">     run_state =  bps.topology.runningTest[run_id].get()</span>\n<span class=\"s2\">     #print progress if test started</span>\n<span class=\"s2\">     try: print ('progress: </span><span class=\"si\">%s%%</span><span class=\"s2\"> , runtime </span><span class=\"si\">%s</span><span class=\"s2\">s' % (run_state['progress'], run_state['runtime'] ))</span>\n<span class=\"s2\">     except: print (\"Starting...\")</span>\n<span class=\"s2\">     time.sleep(2)</span>\n<span class=\"s2\">     #update the current running tests</span>\n<span class=\"s2\">     runningTests_Ids = [test['id'] for  test in bps.topology.runningTest.get()] </span>\n\n<span class=\"s2\">print(\"~The test finished the execution.\")</span>\n<span class=\"s2\">results = bps.reports.search(searchString=canned_test_name, limit=10, sort=\"endTime\", sortorder=\"descending\")</span>\n<span class=\"s2\">result  = results[0]</span>\n<span class=\"s2\">print (\"</span><span class=\"si\">%s</span><span class=\"s2\"> execution duration </span><span class=\"si\">%s</span><span class=\"s2\"> ended with status: </span><span class=\"si\">%s</span><span class=\"s2\"> \" % (result['name'], result['duration'], result['result']) )</span>\n\n<span class=\"s2\">#getting 3.4 Section: Synopsys Summary of Results from the Report</span>\n<span class=\"s2\">tabledata = bps.reports.getReportTable(runid=testid, sectionId=\"3.4\")</span>\n<span class=\"s2\">pp(tabledata)</span>\n\n<span class=\"s2\">print (\"Unreserving the ports\")</span>\n<span class=\"s2\">for p in port_list:</span>\n<span class=\"s2\">    bps.topology.unreserve([{'slot': slot_number, 'port': p, 'group': 2}])</span>\n\n<span class=\"s2\">bps.logout()</span>\n</pre>\n<p>wew</p>\n<h2>Documentation</h2>\n<p>Documentation\u00c2\u00a0is available using the following methods:</p>\n<ul>\n<li><a href=\"https://github.com/OpenIxia/BreakingPoint\" rel=\"nofollow\">Online web based documentation and samples</a></li>\n<li>On your BreakingPoint System RestApi found near the BreakingPoint App</li>\n<li>Documentation available in the online doc browser is also inlined in each class, property and method and can be viewed using the python help command\n<pre><span class=\"kn\">from</span> <span class=\"nn\">bps_restpy.bps</span> <span class=\"kn\">import</span> <span class=\"n\">BPS</span><span class=\"p\">,</span> <span class=\"n\">pp</span>\n\n<span class=\"c1\">#login to your Breaking Point System</span>\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">BPS</span><span class=\"p\">)</span>\n<span class=\"n\">bps</span> <span class=\"o\">=</span> <span class=\"n\">BPS</span><span class=\"p\">(</span><span class=\"s1\">'your_bps_IP_or_FQDN'</span><span class=\"p\">,</span> <span class=\"s1\">'admin'</span><span class=\"p\">,</span> <span class=\"s1\">'admin'</span><span class=\"p\">)</span>\n\n<span class=\"n\">help</span><span class=\"p\">(</span><span class=\"n\">bps</span><span class=\"o\">.</span><span class=\"n\">testmodel</span><span class=\"o\">.</span><span class=\"n\">importModel</span><span class=\"p\">)</span>\n</pre>\n</li>\n</ul>\n<h2>Additional Samples</h2>\n<p>Visit the <a href=\"https://github.com/OpenIxia/BreakingPoint\" rel=\"nofollow\">OpenIxia\u00c2\u00a0breakingpoint-restpy\u00c2\u00a0sample site maintained by solution architects</a> for\u00c2\u00a0in\u00c2\u00a0depth\u00c2\u00a0end-to-end\u00c2\u00a0samples\u00c2\u00a0that\u00c2\u00a0demonstrate\u00c2\u00a0the\u00c2\u00a0following:</p>\n<ul>\n<li>building\u00c2\u00a0a\u00c2\u00a0configuration\n<ul>\n<li>from\u00c2\u00a0scratch</li>\n<li>from\u00c2\u00a0an\u00c2\u00a0existing\u00c2\u00a0BreakingPoint\u00c2\u00a0configuration</li>\n</ul>\n</li>\n<li>running\u00c2\u00a0the\u00c2\u00a0configuration\n<ul>\n<li>connecting\u00c2\u00a0ports\u00c2\u00a0to\u00c2\u00a0hardware</li>\n<li>starting\u00c2\u00a0protocols</li>\n<li>starting\u00c2\u00a0traffic</li>\n</ul>\n</li>\n<li>getting\u00c2\u00a0statistics\n<ul>\n<li>port\u00c2\u00a0stats</li>\n<li>traffic\u00c2\u00a0stats</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6263657, "releases": {"1.0.47": [{"comment_text": "", "digests": {"md5": "a6f298fa2b63284d593a07111992a571", "sha256": "ebb61b84a057bf0ba05c4aa771aa94543d0e1a068e6eed5d0597485889804165"}, "downloads": -1, "filename": "bps_restpy-1.0.47.tar.gz", "has_sig": false, "md5_digest": "a6f298fa2b63284d593a07111992a571", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 44459, "upload_time": "2019-12-04T07:25:05", "upload_time_iso_8601": "2019-12-04T07:25:05.913107Z", "url": "https://files.pythonhosted.org/packages/51/08/7c73ca025f83575f59723b9d45b5deceb7f2544252f14c19023ab39da083/bps_restpy-1.0.47.tar.gz", "yanked": false}], "1.0.48": [{"comment_text": "", "digests": {"md5": "f9479a2482ecdac43031455964289bf5", "sha256": "1c043823c1ace787fbd56bbd3d1f2a9b1b7dd10e5aa94e1e5dd6188c9ad0c8c0"}, "downloads": -1, "filename": "bps_restpy-1.0.48-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f9479a2482ecdac43031455964289bf5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 60696, "upload_time": "2019-12-05T22:04:54", "upload_time_iso_8601": "2019-12-05T22:04:54.869566Z", "url": "https://files.pythonhosted.org/packages/e5/16/9ba2807b8b91220b2fbb2f3daedcb8127c55815cbc3768c890320415be93/bps_restpy-1.0.48-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8735224fc4f11626bde90db820134f89", "sha256": "ae6fc7a8cc4f59499b5205ae47fd94752aa5d5939abfced3628d221a0205aaa4"}, "downloads": -1, "filename": "bps_restpy-1.0.48.tar.gz", "has_sig": false, "md5_digest": "8735224fc4f11626bde90db820134f89", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 55509, "upload_time": "2019-12-05T22:04:56", "upload_time_iso_8601": "2019-12-05T22:04:56.430687Z", "url": "https://files.pythonhosted.org/packages/0c/b1/8ec97fbc4ba36efffc22f583e87e10b842778d87f3b8453b58d0f457190c/bps_restpy-1.0.48.tar.gz", "yanked": false}], "9.0.1": [{"comment_text": "", "digests": {"md5": "8bf93a45bec20203fa4e2e5cb3eeec1c", "sha256": "75cd570cd959f2cfa43d315f9de624dbd80df6e3cc3f4e441afebc346ab60adc"}, "downloads": -1, "filename": "bps_restpy-9.0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8bf93a45bec20203fa4e2e5cb3eeec1c", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 79767, "upload_time": "2019-12-08T22:45:49", "upload_time_iso_8601": "2019-12-08T22:45:49.962579Z", "url": "https://files.pythonhosted.org/packages/31/e9/3bd312fe7be3820d7f3039ebc4a6e2de7fd3904bcbe18d77d71f30a6bbe0/bps_restpy-9.0.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2327aeecaa7410747468926d0d876e55", "sha256": "fbf7cc5d0ac573b94d60d31efcaccca9813fe84dccbc1b392e64f6645c41a305"}, "downloads": -1, "filename": "bps_restpy-9.0.1.tar.gz", "has_sig": false, "md5_digest": "2327aeecaa7410747468926d0d876e55", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 70127, "upload_time": "2019-12-08T22:45:53", "upload_time_iso_8601": "2019-12-08T22:45:53.404315Z", "url": "https://files.pythonhosted.org/packages/d3/de/fe8c0270f08c45bf348c572cda3112c16850a4514a4ab372f7ab0f2237f9/bps_restpy-9.0.1.tar.gz", "yanked": false}], "9.0.2": [{"comment_text": "", "digests": {"md5": "75eb031c87206f26c391a2113736c441", "sha256": "39747060e117fde9b1fc3731e96d346634dc0b315cf08bdb8a3b48b1ea2516ef"}, "downloads": -1, "filename": "bps_restpy-9.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "75eb031c87206f26c391a2113736c441", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 79768, "upload_time": "2019-12-08T22:54:41", "upload_time_iso_8601": "2019-12-08T22:54:41.789731Z", "url": "https://files.pythonhosted.org/packages/91/67/835083e2e4fa4e768996a3ff98a08ebbd0bba96a7f91b15de802d897a42a/bps_restpy-9.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0375bf7c53684424645bccc8f6a16999", "sha256": "f7e0e926f549e1a095019a16f198184b85791b6cc5e1a5ee7bc83aa4989f500c"}, "downloads": -1, "filename": "bps_restpy-9.0.2.tar.gz", "has_sig": false, "md5_digest": "0375bf7c53684424645bccc8f6a16999", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 70138, "upload_time": "2019-12-08T22:54:44", "upload_time_iso_8601": "2019-12-08T22:54:44.782517Z", "url": "https://files.pythonhosted.org/packages/04/69/a28b769f3d427b8ddeb4882f0be4e7d707c703f2c9278a3563b310be080d/bps_restpy-9.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "75eb031c87206f26c391a2113736c441", "sha256": "39747060e117fde9b1fc3731e96d346634dc0b315cf08bdb8a3b48b1ea2516ef"}, "downloads": -1, "filename": "bps_restpy-9.0.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "75eb031c87206f26c391a2113736c441", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, <4", "size": 79768, "upload_time": "2019-12-08T22:54:41", "upload_time_iso_8601": "2019-12-08T22:54:41.789731Z", "url": "https://files.pythonhosted.org/packages/91/67/835083e2e4fa4e768996a3ff98a08ebbd0bba96a7f91b15de802d897a42a/bps_restpy-9.0.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0375bf7c53684424645bccc8f6a16999", "sha256": "f7e0e926f549e1a095019a16f198184b85791b6cc5e1a5ee7bc83aa4989f500c"}, "downloads": -1, "filename": "bps_restpy-9.0.2.tar.gz", "has_sig": false, "md5_digest": "0375bf7c53684424645bccc8f6a16999", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, <4", "size": 70138, "upload_time": "2019-12-08T22:54:44", "upload_time_iso_8601": "2019-12-08T22:54:44.782517Z", "url": "https://files.pythonhosted.org/packages/04/69/a28b769f3d427b8ddeb4882f0be4e7d707c703f2c9278a3563b310be080d/bps_restpy-9.0.2.tar.gz", "yanked": false}], "timestamp": "Thu May  7 22:36:27 2020"}