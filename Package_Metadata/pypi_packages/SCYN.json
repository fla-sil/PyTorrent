{"info": {"author": "Xikang Feng", "author_email": "xikanfeng2@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# SCYN: Single cell CNV profiling method using dynamic programming\n\nSCYN: Single cell CNV profiling method using dynamic programming\n\n\n## Pre-requirements\n* python3\n* numpy>=1.16.1\n* pandas>=0.23.4,<0.24\n* tasklogger>=0.4.0\n* scipy>=1.3.0\n* pysam>=0.15.3\n* [SCOPE](https://github.com/rujinwang/SCOPE)\n\n\n### install requirements\n```Bash\npip install -r requirements.txt\n```\nTo install R package SCOPE, please refer to the README of [SCOPE](https://github.com/rujinwang/SCOPE). SCYN integrates the SCOPE to get the cell-by-bin reads depth matrix and perform the normalization. SCYN mainly focuses on finding the optimal CNV segmentation profiling using dynamic programming.\n\n## Installation\n\n### Installation with pip\nTo install with pip, run the following from a terminal:\n```Bash\npip install scyn\n```\n\n### Installation from Github\nTo clone the repository and install manually, run the following from a terminal:\n```Bash\ngit clone https://github.com/xikanfeng2/SCYN.git\ncd SCYN\npython setup.py install\n```\n\n## Usage\n\n### Quick start\nThe following code runs SCYN.\n\nIn command line:\n```shell\nusage: python run-scyn.py [-h] [options] -i input_bams_dir\n\nSCYN: Single cell CNV profiling method using dynamic programming efficiently\nand effectively\n\nrequired arguments:\n  -i, --indir   <str> the input bams directory (default: None)\n\noptional arguments:\n  -o, --outdir  <str> the output directory (default: ./)\n  --seq           <str> the reads type: single-end or paired-end. (default:\n                    single-end)\n  --bin_len       <int> the bin length, default is 500K. (default: 500)\n  --ref           <str> the reference genome version: hg19 or hg38.\n                    (default: hg19)\n  --reg           <str> the regular expression to match all BAM files in\n                    your input directory. For example, \".bam\" will match all\n                    BAM files ended with '.bam'. (default: *.bam)\n  --mapq          <int> the mapping quality cutoff when calculating the\n                    reads coverage. (default: 40)\n  --verbose       <int> If > 0, print log messages. (default: 1)\n  -h, --help\n```\n\nIn Python:\n```Python\nimport scyn\n\n# create SCYN object\nscyn_operator = scyn.SCYN()\n\n# call cnv\n# bam_dir is the input bam directory and output_dir is the output directory\nscyn_operator.call(bam_dir, output_dir)\n\n# store cnv matrix to a csv file\nscyn_operator.cnv.to_csv('your file name')\n```\n\nFor 10X merged BAM(One bam file), SCYN provides the function to split merged bam to cell bams based on the barcodes.\n\n```Python\nimport scyn\nscyn.demultiplex_10X_bam(info_file, bam_file, out_dir)\n```\nThis function demultiplexs 10X merged bam file according to barcode\nParameters:\n - info_file : the sample summary info file. Please refer to the 10X websites [breast_tissue_A_2k_per_cell_summary_metrics.csv](http://cf.10xgenomics.com/samples/cell-dna/1.1.0/breast_tissue_A_2k/breast_tissue_A_2k_per_cell_summary_metrics.csv)\n - bam_file : the merged bam file path.\n - out_dir : output directory. The splited bams will be saved in this directory, named as `cell-barcode`.bam. cell-barcode is the barcode of each cell.\n\n\n### SCYN attributes\n```Python\nscyn_operator = scyn.SCYN()\n```\n - `scyn_operator.cnv` is the copy number variants matrix.\n - `scyn_operator.segments` is the segments for each chromosome.\n - `scyn_operator.meta_info` is the meta information of cells, include gini and ploidy.\n\n\n\n### SCYN Output Format\nThe output of `SCYN` consits of two cnv files and one meta file. \n\n - `cnv.csv`: with cell as row and bin as column. This file can be used as the input of Oviz-SingleCell CNV analysis.\n - `cnv_T.csv`: with bin as column and cell as row, it is the transpose matrix of `cnv.csv`. This file can be parse by popular R packages like [`ExpressionSet`](https://www.bioconductor.org/packages/release/bioc/vignettes/Biobase/inst/doc/ExpressionSetIntroduction.pdf) for downstream analysis.\n - `segments.csv` is the cnv segments information for each chromosome.\n - `meta.csv`: with cell as row, and meta information as column. The default meta information is:\n   + `c_gini`: stores the gini coeficient of each cell.\n   + `c_ploidy`: stores the mean ploidy of each cell, it is calculated from `cnv.csv` (not the one SCOPE provide).\n\n   User can manually add extra cell meta information like 'cell_type', 'cluster', or 'group' for downstream analysis. Prefix `c` here denotes numeric continuous value. The absence of prefix `c` denotes category meta information like 'group' or 'cluster'.\n\n### Parameters\n```Python\nSCYN(seq='single-end', bin_len=500, ref='hg19', reg='*.bam', mapq=40, verbose=1)\n```\nParameters\n\n* seq : string, optional, default: single-end\n    The reads type: single-end or paired-end\n\n* bin_len : int, optional, default: 500\n    The bin length, default is 500K\n\n* ref : string, optional, default: hg19\n    The reference genome version: hg19 or hg38\n\n* reg : string, optional, default: *.bam\n    The regular expression to match all BAM files in your input directory.\n    For example, \"*.bam\" will match all BAM files ended with '.bam'\n\n* mapq : int, optional, default: 40\n    The mapping quality cutoff when calculating the reads coverage\n\n\n* verbose : `int` or `boolean`, optional, default: 1\n\n    If `True` or `> 0`, print status messages\n\n## Cite us\n\n## Help\nIf you have any questions or require assistance using SCYN, please contact us with xikanfeng2@gmail.com.\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/xikanfeng2/SCYN", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "SCYN", "package_url": "https://pypi.org/project/SCYN/", "platform": "", "project_url": "https://pypi.org/project/SCYN/", "project_urls": {"Homepage": "https://github.com/xikanfeng2/SCYN"}, "release_url": "https://pypi.org/project/SCYN/1.0.6/", "requires_dist": null, "requires_python": "", "summary": "SCYN: Single cell CNV profiling method using dynamic programming", "version": "1.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SCYN: Single cell CNV profiling method using dynamic programming</h1>\n<p>SCYN: Single cell CNV profiling method using dynamic programming</p>\n<h2>Pre-requirements</h2>\n<ul>\n<li>python3</li>\n<li>numpy&gt;=1.16.1</li>\n<li>pandas&gt;=0.23.4,&lt;0.24</li>\n<li>tasklogger&gt;=0.4.0</li>\n<li>scipy&gt;=1.3.0</li>\n<li>pysam&gt;=0.15.3</li>\n<li><a href=\"https://github.com/rujinwang/SCOPE\" rel=\"nofollow\">SCOPE</a></li>\n</ul>\n<h3>install requirements</h3>\n<pre>pip install -r requirements.txt\n</pre>\n<p>To install R package SCOPE, please refer to the README of <a href=\"https://github.com/rujinwang/SCOPE\" rel=\"nofollow\">SCOPE</a>. SCYN integrates the SCOPE to get the cell-by-bin reads depth matrix and perform the normalization. SCYN mainly focuses on finding the optimal CNV segmentation profiling using dynamic programming.</p>\n<h2>Installation</h2>\n<h3>Installation with pip</h3>\n<p>To install with pip, run the following from a terminal:</p>\n<pre>pip install scyn\n</pre>\n<h3>Installation from Github</h3>\n<p>To clone the repository and install manually, run the following from a terminal:</p>\n<pre>git clone https://github.com/xikanfeng2/SCYN.git\n<span class=\"nb\">cd</span> SCYN\npython setup.py install\n</pre>\n<h2>Usage</h2>\n<h3>Quick start</h3>\n<p>The following code runs SCYN.</p>\n<p>In command line:</p>\n<pre>usage: python run-scyn.py <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>options<span class=\"o\">]</span> -i input_bams_dir\n\nSCYN: Single cell CNV profiling method using dynamic programming efficiently\nand effectively\n\nrequired arguments:\n  -i, --indir   &lt;str&gt; the input bams directory <span class=\"o\">(</span>default: None<span class=\"o\">)</span>\n\noptional arguments:\n  -o, --outdir  &lt;str&gt; the output directory <span class=\"o\">(</span>default: ./<span class=\"o\">)</span>\n  --seq           &lt;str&gt; the reads type: single-end or paired-end. <span class=\"o\">(</span>default:\n                    single-end<span class=\"o\">)</span>\n  --bin_len       &lt;int&gt; the bin length, default is 500K. <span class=\"o\">(</span>default: <span class=\"m\">500</span><span class=\"o\">)</span>\n  --ref           &lt;str&gt; the reference genome version: hg19 or hg38.\n                    <span class=\"o\">(</span>default: hg19<span class=\"o\">)</span>\n  --reg           &lt;str&gt; the regular expression to match all BAM files in\n                    your input directory. For example, <span class=\"s2\">\".bam\"</span> will match all\n                    BAM files ended with <span class=\"s1\">'.bam'</span>. <span class=\"o\">(</span>default: *.bam<span class=\"o\">)</span>\n  --mapq          &lt;int&gt; the mapping quality cutoff when calculating the\n                    reads coverage. <span class=\"o\">(</span>default: <span class=\"m\">40</span><span class=\"o\">)</span>\n  --verbose       &lt;int&gt; If &gt; <span class=\"m\">0</span>, print log messages. <span class=\"o\">(</span>default: <span class=\"m\">1</span><span class=\"o\">)</span>\n  -h, --help\n</pre>\n<p>In Python:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scyn</span>\n\n<span class=\"c1\"># create SCYN object</span>\n<span class=\"n\">scyn_operator</span> <span class=\"o\">=</span> <span class=\"n\">scyn</span><span class=\"o\">.</span><span class=\"n\">SCYN</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># call cnv</span>\n<span class=\"c1\"># bam_dir is the input bam directory and output_dir is the output directory</span>\n<span class=\"n\">scyn_operator</span><span class=\"o\">.</span><span class=\"n\">call</span><span class=\"p\">(</span><span class=\"n\">bam_dir</span><span class=\"p\">,</span> <span class=\"n\">output_dir</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># store cnv matrix to a csv file</span>\n<span class=\"n\">scyn_operator</span><span class=\"o\">.</span><span class=\"n\">cnv</span><span class=\"o\">.</span><span class=\"n\">to_csv</span><span class=\"p\">(</span><span class=\"s1\">'your file name'</span><span class=\"p\">)</span>\n</pre>\n<p>For 10X merged BAM(One bam file), SCYN provides the function to split merged bam to cell bams based on the barcodes.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">scyn</span>\n<span class=\"n\">scyn</span><span class=\"o\">.</span><span class=\"n\">demultiplex_10X_bam</span><span class=\"p\">(</span><span class=\"n\">info_file</span><span class=\"p\">,</span> <span class=\"n\">bam_file</span><span class=\"p\">,</span> <span class=\"n\">out_dir</span><span class=\"p\">)</span>\n</pre>\n<p>This function demultiplexs 10X merged bam file according to barcode\nParameters:</p>\n<ul>\n<li>info_file : the sample summary info file. Please refer to the 10X websites <a href=\"http://cf.10xgenomics.com/samples/cell-dna/1.1.0/breast_tissue_A_2k/breast_tissue_A_2k_per_cell_summary_metrics.csv\" rel=\"nofollow\">breast_tissue_A_2k_per_cell_summary_metrics.csv</a></li>\n<li>bam_file : the merged bam file path.</li>\n<li>out_dir : output directory. The splited bams will be saved in this directory, named as <code>cell-barcode</code>.bam. cell-barcode is the barcode of each cell.</li>\n</ul>\n<h3>SCYN attributes</h3>\n<pre><span class=\"n\">scyn_operator</span> <span class=\"o\">=</span> <span class=\"n\">scyn</span><span class=\"o\">.</span><span class=\"n\">SCYN</span><span class=\"p\">()</span>\n</pre>\n<ul>\n<li><code>scyn_operator.cnv</code> is the copy number variants matrix.</li>\n<li><code>scyn_operator.segments</code> is the segments for each chromosome.</li>\n<li><code>scyn_operator.meta_info</code> is the meta information of cells, include gini and ploidy.</li>\n</ul>\n<h3>SCYN Output Format</h3>\n<p>The output of <code>SCYN</code> consits of two cnv files and one meta file.</p>\n<ul>\n<li>\n<p><code>cnv.csv</code>: with cell as row and bin as column. This file can be used as the input of Oviz-SingleCell CNV analysis.</p>\n</li>\n<li>\n<p><code>cnv_T.csv</code>: with bin as column and cell as row, it is the transpose matrix of <code>cnv.csv</code>. This file can be parse by popular R packages like <a href=\"https://www.bioconductor.org/packages/release/bioc/vignettes/Biobase/inst/doc/ExpressionSetIntroduction.pdf\" rel=\"nofollow\"><code>ExpressionSet</code></a> for downstream analysis.</p>\n</li>\n<li>\n<p><code>segments.csv</code> is the cnv segments information for each chromosome.</p>\n</li>\n<li>\n<p><code>meta.csv</code>: with cell as row, and meta information as column. The default meta information is:</p>\n<ul>\n<li><code>c_gini</code>: stores the gini coeficient of each cell.</li>\n<li><code>c_ploidy</code>: stores the mean ploidy of each cell, it is calculated from <code>cnv.csv</code> (not the one SCOPE provide).</li>\n</ul>\n<p>User can manually add extra cell meta information like 'cell_type', 'cluster', or 'group' for downstream analysis. Prefix <code>c</code> here denotes numeric continuous value. The absence of prefix <code>c</code> denotes category meta information like 'group' or 'cluster'.</p>\n</li>\n</ul>\n<h3>Parameters</h3>\n<pre><span class=\"n\">SCYN</span><span class=\"p\">(</span><span class=\"n\">seq</span><span class=\"o\">=</span><span class=\"s1\">'single-end'</span><span class=\"p\">,</span> <span class=\"n\">bin_len</span><span class=\"o\">=</span><span class=\"mi\">500</span><span class=\"p\">,</span> <span class=\"n\">ref</span><span class=\"o\">=</span><span class=\"s1\">'hg19'</span><span class=\"p\">,</span> <span class=\"n\">reg</span><span class=\"o\">=</span><span class=\"s1\">'*.bam'</span><span class=\"p\">,</span> <span class=\"n\">mapq</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n<p>Parameters</p>\n<ul>\n<li>\n<p>seq : string, optional, default: single-end\nThe reads type: single-end or paired-end</p>\n</li>\n<li>\n<p>bin_len : int, optional, default: 500\nThe bin length, default is 500K</p>\n</li>\n<li>\n<p>ref : string, optional, default: hg19\nThe reference genome version: hg19 or hg38</p>\n</li>\n<li>\n<p>reg : string, optional, default: <em>.bam\nThe regular expression to match all BAM files in your input directory.\nFor example, \"</em>.bam\" will match all BAM files ended with '.bam'</p>\n</li>\n<li>\n<p>mapq : int, optional, default: 40\nThe mapping quality cutoff when calculating the reads coverage</p>\n</li>\n<li>\n<p>verbose : <code>int</code> or <code>boolean</code>, optional, default: 1</p>\n<p>If <code>True</code> or <code>&gt; 0</code>, print status messages</p>\n</li>\n</ul>\n<h2>Cite us</h2>\n<h2>Help</h2>\n<p>If you have any questions or require assistance using SCYN, please contact us with <a href=\"mailto:xikanfeng2@gmail.com\">xikanfeng2@gmail.com</a>.</p>\n\n          </div>"}, "last_serial": 6924220, "releases": {"1.0.0": [{"comment_text": "", "digests": {"md5": "68433dff9ccb36145d6092fddaa7ee0d", "sha256": "f5f7f1ba2092f942ec0f8f5b079fdff4512173906c58d46789a4619ed6d347d5"}, "downloads": -1, "filename": "SCYN-1.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "68433dff9ccb36145d6092fddaa7ee0d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 6678, "upload_time": "2019-12-31T12:17:08", "upload_time_iso_8601": "2019-12-31T12:17:08.622341Z", "url": "https://files.pythonhosted.org/packages/0b/3d/ade26e063da99e6c3fc8d644d84b4519ab783248951b27ff71da937fcb3e/SCYN-1.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3a3f25c9b7e1b1ad932291f15c3a0767", "sha256": "b212ead72dd3b798a3eb5fdf6b78c888b6e10a29c56d9508a9c20cb5f5b84724"}, "downloads": -1, "filename": "SCYN-1.0.0.tar.gz", "has_sig": false, "md5_digest": "3a3f25c9b7e1b1ad932291f15c3a0767", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5760, "upload_time": "2019-12-31T12:17:11", "upload_time_iso_8601": "2019-12-31T12:17:11.236291Z", "url": "https://files.pythonhosted.org/packages/19/8e/917387e7186a5b9ef89095f6ea65389a5baef6f4f81997a619b18b1e923c/SCYN-1.0.0.tar.gz", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "761168c5c685b6d331429e418685fce7", "sha256": "ce524631d1593a18a59fc542264c4ce614a21dc4487c1e6c82aceda964287e6a"}, "downloads": -1, "filename": "SCYN-1.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "761168c5c685b6d331429e418685fce7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7635, "upload_time": "2019-12-31T14:39:00", "upload_time_iso_8601": "2019-12-31T14:39:00.612745Z", "url": "https://files.pythonhosted.org/packages/26/2b/5b88b6d0011ae71a4f3a12a4d0d80e7af4fdac6fb4d945308a2f42889f3e/SCYN-1.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a65e98e2ba713793f7a3c1264884eb22", "sha256": "876d6fb08a5733854760e6b20e2ac777f3db1456b9066263e66696d5ef8f43c9"}, "downloads": -1, "filename": "SCYN-1.0.1.tar.gz", "has_sig": false, "md5_digest": "a65e98e2ba713793f7a3c1264884eb22", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6661, "upload_time": "2019-12-31T14:39:02", "upload_time_iso_8601": "2019-12-31T14:39:02.260272Z", "url": "https://files.pythonhosted.org/packages/2d/7f/5b17473ac8aa7ad568b871cc8ecf9c6d81fa123fb8ff5d54efa060b26596/SCYN-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "944b0731e95ae17ba46b795bf4b3133f", "sha256": "6f3bd91775f78ac03aa297b5dee995b455b6164b96caddacc9bd96ec7692cd61"}, "downloads": -1, "filename": "SCYN-1.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "944b0731e95ae17ba46b795bf4b3133f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10568, "upload_time": "2020-01-15T13:33:01", "upload_time_iso_8601": "2020-01-15T13:33:01.223377Z", "url": "https://files.pythonhosted.org/packages/d9/9d/2b0268609b2d610fd5d43a76eb263c06c9416e9a0ddff5e2e550dad3984b/SCYN-1.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa525954cd11977a5d9ce2269daa7c41", "sha256": "42f5ac2328ed9fb864a83f6de70b81dc96011bc3dd1b79dbff42d72de5789781"}, "downloads": -1, "filename": "SCYN-1.0.2.tar.gz", "has_sig": false, "md5_digest": "aa525954cd11977a5d9ce2269daa7c41", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7260, "upload_time": "2020-01-15T13:33:03", "upload_time_iso_8601": "2020-01-15T13:33:03.848492Z", "url": "https://files.pythonhosted.org/packages/5d/79/630aa8f0c8ff9678bc30f6deea46ca0b99da846e8463d33528026e711bb8/SCYN-1.0.2.tar.gz", "yanked": false}], "1.0.3": [{"comment_text": "", "digests": {"md5": "ea127cc27866e84d578c0b709db078a9", "sha256": "a8b4bb0a292f21450668188045c577311cda8dd69cf5848bf58d02a69d8e1239"}, "downloads": -1, "filename": "SCYN-1.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "ea127cc27866e84d578c0b709db078a9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 10920, "upload_time": "2020-01-16T09:14:45", "upload_time_iso_8601": "2020-01-16T09:14:45.225506Z", "url": "https://files.pythonhosted.org/packages/e4/52/562f8c5ff16b361e87f9ba1f1a329fdc59e8f3e25830c485bab5e409ef45/SCYN-1.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "057d6f617f6a922e6eabdaaf45d91de0", "sha256": "741572637cbff6551a00e23089358a835304cca33b4e1117aea0e0d438ef28c0"}, "downloads": -1, "filename": "SCYN-1.0.3.tar.gz", "has_sig": false, "md5_digest": "057d6f617f6a922e6eabdaaf45d91de0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7752, "upload_time": "2020-01-16T09:14:47", "upload_time_iso_8601": "2020-01-16T09:14:47.014797Z", "url": "https://files.pythonhosted.org/packages/3c/ae/eb1503c47e4d9bc355825079a47c4775d97417efcbb6406849c31e53e200/SCYN-1.0.3.tar.gz", "yanked": false}], "1.0.4": [{"comment_text": "", "digests": {"md5": "3ff4d2dabc56b6a37e387ab4b7478e6e", "sha256": "b56861e89cb98fb0ee74ac51a1bc7452ed7b24f27ea13f1c1929996e6150560e"}, "downloads": -1, "filename": "SCYN-1.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "3ff4d2dabc56b6a37e387ab4b7478e6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11455, "upload_time": "2020-01-16T09:34:37", "upload_time_iso_8601": "2020-01-16T09:34:37.404242Z", "url": "https://files.pythonhosted.org/packages/18/d7/a439aa49d1bd023d287d0c578acddaf20e78632c394929f8eef5ec4fcdd0/SCYN-1.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae23de551ee316c0230b14415b68e4fe", "sha256": "9e634cfe5fad18bb19e26a034d5bd01faf92865b3fbc03a12230491e31eaee00"}, "downloads": -1, "filename": "SCYN-1.0.4.tar.gz", "has_sig": false, "md5_digest": "ae23de551ee316c0230b14415b68e4fe", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8360, "upload_time": "2020-01-16T09:34:39", "upload_time_iso_8601": "2020-01-16T09:34:39.011081Z", "url": "https://files.pythonhosted.org/packages/6a/0f/2f884bc7c12485d44fb8afbd9bfd71100caf9382e8b843ede464137fdaf9/SCYN-1.0.4.tar.gz", "yanked": false}], "1.0.5": [{"comment_text": "", "digests": {"md5": "cab658b9d653d1c98f718dce2150fb4a", "sha256": "b8cfba747cd649f188823bec91cb6c3ba1b5fc1b968e31b86ff6ebdb8475e756"}, "downloads": -1, "filename": "SCYN-1.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "cab658b9d653d1c98f718dce2150fb4a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 8746, "upload_time": "2020-03-04T03:26:12", "upload_time_iso_8601": "2020-03-04T03:26:12.571988Z", "url": "https://files.pythonhosted.org/packages/08/27/15d245947aff657b28d919dabcedb55bd401dcfde522ccdfcd022499df69/SCYN-1.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "08dc9a932dac98008484a60955557426", "sha256": "a9f4b9e3852f0299c63b53b620c0ab07aa20e83e6db9e3db7dd4e78cd07ddb2b"}, "downloads": -1, "filename": "SCYN-1.0.5.tar.gz", "has_sig": false, "md5_digest": "08dc9a932dac98008484a60955557426", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8030, "upload_time": "2020-03-04T03:26:19", "upload_time_iso_8601": "2020-03-04T03:26:19.114516Z", "url": "https://files.pythonhosted.org/packages/d0/11/51e4c54b8e0f9dd03481e325bac7a5699b119eb41414fdf37af44c57f07e/SCYN-1.0.5.tar.gz", "yanked": false}], "1.0.6": [{"comment_text": "", "digests": {"md5": "b348ec630524bbb9b206212c1e304ce8", "sha256": "1f8bea0b521c6ad2ea11126cce3b643f6db8c528022e4aee52d0cc24384490fa"}, "downloads": -1, "filename": "SCYN-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b348ec630524bbb9b206212c1e304ce8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9488, "upload_time": "2020-03-31T23:31:31", "upload_time_iso_8601": "2020-03-31T23:31:31.475906Z", "url": "https://files.pythonhosted.org/packages/dc/1f/1ad8f038e9a9d46e1287c3b6b80ecb3e40c5f23ddf8e4dabd79f3c11ef14/SCYN-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e92fb9e5794aa1f1497eaf52607fb01f", "sha256": "988edcdaeb183b1367d89e7735852ffd6e95c94a39d4f2a234bc8cfadaee55b9"}, "downloads": -1, "filename": "SCYN-1.0.6.tar.gz", "has_sig": false, "md5_digest": "e92fb9e5794aa1f1497eaf52607fb01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8731, "upload_time": "2020-03-31T23:31:33", "upload_time_iso_8601": "2020-03-31T23:31:33.307489Z", "url": "https://files.pythonhosted.org/packages/26/68/b35703b7e758ea9dcd874af36e2923103490871152160120fce26b524ad7/SCYN-1.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b348ec630524bbb9b206212c1e304ce8", "sha256": "1f8bea0b521c6ad2ea11126cce3b643f6db8c528022e4aee52d0cc24384490fa"}, "downloads": -1, "filename": "SCYN-1.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "b348ec630524bbb9b206212c1e304ce8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9488, "upload_time": "2020-03-31T23:31:31", "upload_time_iso_8601": "2020-03-31T23:31:31.475906Z", "url": "https://files.pythonhosted.org/packages/dc/1f/1ad8f038e9a9d46e1287c3b6b80ecb3e40c5f23ddf8e4dabd79f3c11ef14/SCYN-1.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e92fb9e5794aa1f1497eaf52607fb01f", "sha256": "988edcdaeb183b1367d89e7735852ffd6e95c94a39d4f2a234bc8cfadaee55b9"}, "downloads": -1, "filename": "SCYN-1.0.6.tar.gz", "has_sig": false, "md5_digest": "e92fb9e5794aa1f1497eaf52607fb01f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8731, "upload_time": "2020-03-31T23:31:33", "upload_time_iso_8601": "2020-03-31T23:31:33.307489Z", "url": "https://files.pythonhosted.org/packages/26/68/b35703b7e758ea9dcd874af36e2923103490871152160120fce26b524ad7/SCYN-1.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:22 2020"}