{"info": {"author": "David Wolever", "author_email": "david@wolever.net", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "License :: OSI Approved :: BSD License", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3", "Programming Language :: Python :: Implementation :: PyPy"], "description": "libqrencode: fast QR code encoding for Python\n=============================================\n\nFast, robust, and slightly less incomplete cffi-based Python bindings for\nlibqrencode (http://fukuchi.org/works/qrencode/index.en.html).\n\nPython 2, Python 3, and PyPy compatible!\n\nInstalling\n----------\n\n::\n\n    $ pip install libqrencode-cffi\n\n\nExamples\n--------\n\n::\n\n    >>> import libqrencode as qr\n    >>> qrc = qr.QRCode(\"Hello, world!\")\n\n    # The raw QR code can be accessed, where each item is a bitfield containing\n    # information about that portion of the code (see DATA_* constants).\n    >>> qrc.get_raw_data()\n    [193, 193, 193, 193, ...  3, 2, 2, 3, 3]\n\n    # If PIL is installed, a PIL image of the QR code can be created:\n    >>> qrc.get_im(border=3)\n    <PIL.Image.Image image mode=L size=81x81 at ...>\n\n    # And if lxml.etree / xml.etree is available, an SVG can be generated:\n    >>> qrc.get_svg_etree()\n    <Element g at ...>\n    >>> qrc.get_svg_string()\n    '<g><rect fill=\"white\" height=\"21\" width=\"21\" x=\"0\" y=\"0\"/>...<rect fill=\"black\" height=\"1\" width=\"1\" x=\"20\" y=\"19\"/></g>'\n\n\nConstants\n---------\n\nEncoding modes (see https://en.wikipedia.org/wiki/QR_code#Encoding):\n\n* ``MODE_NUL`` (internal to qrencode)\n* ``MODE_NUM``\n* ``MODE_AN``\n* ``MODE_8`` (default)\n* ``MODE_KANJI``\n* ``MODE_STRUCTURE`` (not fully supported by libqrencode)\n* ``MODE_ECI`` (not fully supported by libqrencode)\n* ``MODE_FNC1FIRST`` (not fully supported by libqrencode)\n* ``MODE_FNC1SECOND`` (not fully supported by libqrencode)\n\n\nError correction modes:\n\n* ``ECLEVEL_L`` (7%; default)\n* ``ECLEVEL_M`` (15%)\n* ``ECLEVEL_Q`` (25%)\n* ``ECLEVEL_H`` (30%)\n\n\nRaw data bitmasks:\n\n* ``DATA_BW`` (1=black/0=white)\n* ``DATA_DATA_AND_ECC`` (data and ecc code area)\n* ``DATA_FORMAT_INFO`` (format information)\n* ``DATA_VERSION_INFO`` (version information)\n* ``DATA_TIMING_PATTERN`` (timing pattern)\n* ``DATA_ALIGNMENT_PATTERN`` (alignment pattern)\n* ``DATA_FINDER_PATTERN`` (finder pattern and separator)\n* ``DATA_NON_DATA`` (non-data modules (format, timing, etc.))", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wolever/libqrencode-cffi", "keywords": null, "license": "UNKNOWN", "maintainer": null, "maintainer_email": null, "name": "libqrencode-cffi", "package_url": "https://pypi.org/project/libqrencode-cffi/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/libqrencode-cffi/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/wolever/libqrencode-cffi"}, "release_url": "https://pypi.org/project/libqrencode-cffi/0.1.1/", "requires_dist": null, "requires_python": null, "summary": "Fast, robust, and less incomplete cffi-based bindings for libqrencode (Py2, Py3, and PyPy)", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fast, robust, and slightly less incomplete cffi-based Python bindings for\nlibqrencode (<a href=\"http://fukuchi.org/works/qrencode/index.en.html\" rel=\"nofollow\">http://fukuchi.org/works/qrencode/index.en.html</a>).</p>\n<p>Python 2, Python 3, and PyPy compatible!</p>\n<div id=\"installing\">\n<h2>Installing</h2>\n<pre>$ pip install libqrencode-cffi\n</pre>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<pre>&gt;&gt;&gt; import libqrencode as qr\n&gt;&gt;&gt; qrc = qr.QRCode(\"Hello, world!\")\n\n# The raw QR code can be accessed, where each item is a bitfield containing\n# information about that portion of the code (see DATA_* constants).\n&gt;&gt;&gt; qrc.get_raw_data()\n[193, 193, 193, 193, ...  3, 2, 2, 3, 3]\n\n# If PIL is installed, a PIL image of the QR code can be created:\n&gt;&gt;&gt; qrc.get_im(border=3)\n&lt;PIL.Image.Image image mode=L size=81x81 at ...&gt;\n\n# And if lxml.etree / xml.etree is available, an SVG can be generated:\n&gt;&gt;&gt; qrc.get_svg_etree()\n&lt;Element g at ...&gt;\n&gt;&gt;&gt; qrc.get_svg_string()\n'&lt;g&gt;&lt;rect fill=\"white\" height=\"21\" width=\"21\" x=\"0\" y=\"0\"/&gt;...&lt;rect fill=\"black\" height=\"1\" width=\"1\" x=\"20\" y=\"19\"/&gt;&lt;/g&gt;'\n</pre>\n</div>\n<div id=\"constants\">\n<h2>Constants</h2>\n<p>Encoding modes (see <a href=\"https://en.wikipedia.org/wiki/QR_code#Encoding\" rel=\"nofollow\">https://en.wikipedia.org/wiki/QR_code#Encoding</a>):</p>\n<ul>\n<li><tt>MODE_NUL</tt> (internal to qrencode)</li>\n<li><tt>MODE_NUM</tt></li>\n<li><tt>MODE_AN</tt></li>\n<li><tt>MODE_8</tt> (default)</li>\n<li><tt>MODE_KANJI</tt></li>\n<li><tt>MODE_STRUCTURE</tt> (not fully supported by libqrencode)</li>\n<li><tt>MODE_ECI</tt> (not fully supported by libqrencode)</li>\n<li><tt>MODE_FNC1FIRST</tt> (not fully supported by libqrencode)</li>\n<li><tt>MODE_FNC1SECOND</tt> (not fully supported by libqrencode)</li>\n</ul>\n<p>Error correction modes:</p>\n<ul>\n<li><tt>ECLEVEL_L</tt> (7%; default)</li>\n<li><tt>ECLEVEL_M</tt> (15%)</li>\n<li><tt>ECLEVEL_Q</tt> (25%)</li>\n<li><tt>ECLEVEL_H</tt> (30%)</li>\n</ul>\n<p>Raw data bitmasks:</p>\n<ul>\n<li><tt>DATA_BW</tt> (1=black/0=white)</li>\n<li><tt>DATA_DATA_AND_ECC</tt> (data and ecc code area)</li>\n<li><tt>DATA_FORMAT_INFO</tt> (format information)</li>\n<li><tt>DATA_VERSION_INFO</tt> (version information)</li>\n<li><tt>DATA_TIMING_PATTERN</tt> (timing pattern)</li>\n<li><tt>DATA_ALIGNMENT_PATTERN</tt> (alignment pattern)</li>\n<li><tt>DATA_FINDER_PATTERN</tt> (finder pattern and separator)</li>\n<li><tt>DATA_NON_DATA</tt> (non-data modules (format, timing, etc.))</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 1638470, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "bcccd2a752b476d19c4746f20b2aefc1", "sha256": "453b1918f528480684bd4e7175164d03d175830386430060200b1c16817a321c"}, "downloads": -1, "filename": "libqrencode-cffi-0.1.tar.gz", "has_sig": false, "md5_digest": "bcccd2a752b476d19c4746f20b2aefc1", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9175, "upload_time": "2015-06-11T20:46:06", "upload_time_iso_8601": "2015-06-11T20:46:06.561370Z", "url": "https://files.pythonhosted.org/packages/01/fc/9f630f77c3a771e8b6855000fb7794e5b9bdaf524bea06f8af9df384c414/libqrencode-cffi-0.1.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "de138a7dd6616756d4f3e1c9b4d29d49", "sha256": "654c214f73b6c5f57e034231e1e8e2ee5c3b3cc83697e4923fc65e7e2319f277"}, "downloads": -1, "filename": "libqrencode-cffi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "de138a7dd6616756d4f3e1c9b4d29d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9206, "upload_time": "2015-07-17T21:07:10", "upload_time_iso_8601": "2015-07-17T21:07:10.025456Z", "url": "https://files.pythonhosted.org/packages/9f/ef/a81c45dac542bfb435250f3f8a43f0d07bfb49dedd82a707b51b6065d2ba/libqrencode-cffi-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "de138a7dd6616756d4f3e1c9b4d29d49", "sha256": "654c214f73b6c5f57e034231e1e8e2ee5c3b3cc83697e4923fc65e7e2319f277"}, "downloads": -1, "filename": "libqrencode-cffi-0.1.1.tar.gz", "has_sig": false, "md5_digest": "de138a7dd6616756d4f3e1c9b4d29d49", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9206, "upload_time": "2015-07-17T21:07:10", "upload_time_iso_8601": "2015-07-17T21:07:10.025456Z", "url": "https://files.pythonhosted.org/packages/9f/ef/a81c45dac542bfb435250f3f8a43f0d07bfb49dedd82a707b51b6065d2ba/libqrencode-cffi-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:27 2020"}