{"info": {"author": "@angulartist", "author_email": "michel@kebab.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Science/Research", "Programming Language :: Python :: 3.6"], "description": "Keras HDF5 ImageDataGenerator\n===============================\n\nA blazing fast HDF5 Image Generator for Keras :zap:\n\nOverview\n--------\n\nSometimes you'd like to work with large scale image datasets that cannot fit into the memory. Luckily, Keras provides various data generators to feed your network with mini-batch of data directly from a directory, simply by passing the source path. But this method is terribly inefficient. During training, the model has to deal with massive I/Os operations on disk which introduces huge latency.\n\nA more efficient way is to take advantage of HDF5 data structure which is optimized for I/O operations. The idea is to (1) store your raw images and their labels to an HDF5 file, and to (2) create a generator that will load and preprocess mini-batches in real-time.\n\nThis image generator is built on top of Keras `Sequence` class and it's safe for multiprocessing. It's also using the super-fast image-processing albumentations library.\n\nInstallation / Usage\n--------------------\n\nTo install use pip:\n\n    $ pip install h5imagegenerator\n    \nDependencies\n------------\n* Keras\n* Numpy\n* Albumentations\n* h5py\n    \nContributing\n------------\n\nFeel free to PR any change/request. :grin:\n\nExample\n-------\n\nFirst, import the image generator class:\n\n```python\nfrom h5imagegenerator import HDF5ImageGenerator\n```\n\nThen, create a new image generator:\n\n```python\ntrain_generator = HDF5ImageGenerator(\n        src='path/to/train.h5',\n        X_key='images,\n        y_key='labels,\n        scaler=True,\n        labels_encoding='hot',\n        batch_size=32,\n        mode='train')\n```\n\n* **src**: the source HDF5 file\n* **X_key**: the key of the image tensors dataset (default is `images`)\n* **y_key**: the key of the labels dataset (default is `labels`)\n* **scaler**: scale inputs to the range [0, 1] (basic normalization) (default is `True`)\n* **labels_encoding**: set it to `hot` to convert integers labels to binary matrix (one hot encoding),\nset it to `smooth` to perform smooth encoding (default is `hot`)\n* **batch_size**: the number of samples to be generated at each iteration (default is `32`)\n* **mode**: 'train' to generate tuples of image samples and labels, 'test' to generate image samples only (default is `'train'`)\n\nNote: \n\n(1) When using `smooth` labels_encoding, you should provides a **smooth_factor** (defaults to `0.1`).\n\n(2) Labels stored in the HDF5 file must be integers or list of lists/tuples of integers in case you're doing multi-labels classification. ie: `labels=[1, 2, 3, 6, 9] or labels=[(1, 2), (5, 9), (3, 9)]`...\n\nSometimes you'd like to perform some data augmentation on-the-fly, to flip, zoom, rotate or scale images. You can pass to the generator an [albumentations](https://github.com/albumentations-team/albumentations) transformation pipeline:\n\n```python\nmy_augmenter = Compose([\n        HorizontalFlip(p=0.5),\n        RandomContrast(limit=0.2, p=0.5),\n        RandomGamma(gamma_limit=(80, 120), p=0.5),\n        RandomBrightness(limit=0.2, p=0.5),\n        Resize(227, 227, cv2.INTER_AREA)])\n    \ntrain_generator = HDF5ImageGenerator(\n        src='path/to/train.h5',\n        X_key='images,\n        y_key='labels,\n        scaler=True,\n        labels_encoding='hot',\n        batch_size=32,\n        augmenter=my_augmenter)\n```\n\nNote:\n\n(1) albumentations offers a `ToFloat(max_value=255)` transformation which scales pixel intensities from [0, 255] to [0, 1]. Thus, when using it, you must turn off scaling: `scaler=False`.\n\n(2) If you want to apply standardization (mean/std), you may want to use albumentations [Normalize](https://albumentations.readthedocs.io/en/latest/api/augmentations.html#albumentations.augmentations.transforms.Normalize) instead.\n\n(3) Make sure to turn off data augmentation (`augmenter=False`) when using `evaluate_generator()` and `predict_generator()`.\n\nFinally, pass the generator to your model:\n\n```python\nmodel.compile(\n        loss='categorical_crossentropy',\n        metrics=['accuracy'],\n        optimizer='rmsprop')\n\n# Example with fit:\nmodel.fit_generator(\n    train_generator,\n    validation_data=val_generator,\n    workers=10,\n    use_multiprocessing=True,\n    verbose=1,\n    epochs=1)\n    \n    \n# Example with evaluate:\nmodel.evaluate_generator(\n    eval_generator,\n    workers=10,\n    use_multiprocessing=True,\n    verbose=1,\n    epochs=1)\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/angulartist/Keras-HDF5-ImageDataGenerator/tarball/1.2.9", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/angulartist/Keras-HDF5-ImageDataGenerator", "keywords": "", "license": "BSD", "maintainer": "", "maintainer_email": "", "name": "h5imagegenerator", "package_url": "https://pypi.org/project/h5imagegenerator/", "platform": "", "project_url": "https://pypi.org/project/h5imagegenerator/", "project_urls": {"Download": "https://github.com/angulartist/Keras-HDF5-ImageDataGenerator/tarball/1.2.9", "Homepage": "https://github.com/angulartist/Keras-HDF5-ImageDataGenerator"}, "release_url": "https://pypi.org/project/h5imagegenerator/1.2.9/", "requires_dist": null, "requires_python": ">=3", "summary": "A dead simple Keras HDF5 ImageDataGenerator", "version": "1.2.9", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Keras HDF5 ImageDataGenerator</h1>\n<p>A blazing fast HDF5 Image Generator for Keras :zap:</p>\n<h2>Overview</h2>\n<p>Sometimes you'd like to work with large scale image datasets that cannot fit into the memory. Luckily, Keras provides various data generators to feed your network with mini-batch of data directly from a directory, simply by passing the source path. But this method is terribly inefficient. During training, the model has to deal with massive I/Os operations on disk which introduces huge latency.</p>\n<p>A more efficient way is to take advantage of HDF5 data structure which is optimized for I/O operations. The idea is to (1) store your raw images and their labels to an HDF5 file, and to (2) create a generator that will load and preprocess mini-batches in real-time.</p>\n<p>This image generator is built on top of Keras <code>Sequence</code> class and it's safe for multiprocessing. It's also using the super-fast image-processing albumentations library.</p>\n<h2>Installation / Usage</h2>\n<p>To install use pip:</p>\n<pre><code>$ pip install h5imagegenerator\n</code></pre>\n<h2>Dependencies</h2>\n<ul>\n<li>Keras</li>\n<li>Numpy</li>\n<li>Albumentations</li>\n<li>h5py</li>\n</ul>\n<h2>Contributing</h2>\n<p>Feel free to PR any change/request. :grin:</p>\n<h2>Example</h2>\n<p>First, import the image generator class:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">h5imagegenerator</span> <span class=\"kn\">import</span> <span class=\"n\">HDF5ImageGenerator</span>\n</pre>\n<p>Then, create a new image generator:</p>\n<pre><span class=\"n\">train_generator</span> <span class=\"o\">=</span> <span class=\"n\">HDF5ImageGenerator</span><span class=\"p\">(</span>\n        <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s1\">'path/to/train.h5'</span><span class=\"p\">,</span>\n        <span class=\"n\">X_key</span><span class=\"o\">=</span><span class=\"s1\">'images,</span>\n        <span class=\"n\">y_key</span><span class=\"o\">=</span><span class=\"s1\">'labels,</span>\n        <span class=\"n\">scaler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">labels_encoding</span><span class=\"o\">=</span><span class=\"s1\">'hot'</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n        <span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"s1\">'train'</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><strong>src</strong>: the source HDF5 file</li>\n<li><strong>X_key</strong>: the key of the image tensors dataset (default is <code>images</code>)</li>\n<li><strong>y_key</strong>: the key of the labels dataset (default is <code>labels</code>)</li>\n<li><strong>scaler</strong>: scale inputs to the range [0, 1] (basic normalization) (default is <code>True</code>)</li>\n<li><strong>labels_encoding</strong>: set it to <code>hot</code> to convert integers labels to binary matrix (one hot encoding),\nset it to <code>smooth</code> to perform smooth encoding (default is <code>hot</code>)</li>\n<li><strong>batch_size</strong>: the number of samples to be generated at each iteration (default is <code>32</code>)</li>\n<li><strong>mode</strong>: 'train' to generate tuples of image samples and labels, 'test' to generate image samples only (default is <code>'train'</code>)</li>\n</ul>\n<p>Note:</p>\n<p>(1) When using <code>smooth</code> labels_encoding, you should provides a <strong>smooth_factor</strong> (defaults to <code>0.1</code>).</p>\n<p>(2) Labels stored in the HDF5 file must be integers or list of lists/tuples of integers in case you're doing multi-labels classification. ie: <code>labels=[1, 2, 3, 6, 9] or labels=[(1, 2), (5, 9), (3, 9)]</code>...</p>\n<p>Sometimes you'd like to perform some data augmentation on-the-fly, to flip, zoom, rotate or scale images. You can pass to the generator an <a href=\"https://github.com/albumentations-team/albumentations\" rel=\"nofollow\">albumentations</a> transformation pipeline:</p>\n<pre><span class=\"n\">my_augmenter</span> <span class=\"o\">=</span> <span class=\"n\">Compose</span><span class=\"p\">([</span>\n        <span class=\"n\">HorizontalFlip</span><span class=\"p\">(</span><span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">),</span>\n        <span class=\"n\">RandomContrast</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">),</span>\n        <span class=\"n\">RandomGamma</span><span class=\"p\">(</span><span class=\"n\">gamma_limit</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">80</span><span class=\"p\">,</span> <span class=\"mi\">120</span><span class=\"p\">),</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">),</span>\n        <span class=\"n\">RandomBrightness</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">p</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">),</span>\n        <span class=\"n\">Resize</span><span class=\"p\">(</span><span class=\"mi\">227</span><span class=\"p\">,</span> <span class=\"mi\">227</span><span class=\"p\">,</span> <span class=\"n\">cv2</span><span class=\"o\">.</span><span class=\"n\">INTER_AREA</span><span class=\"p\">)])</span>\n    \n<span class=\"n\">train_generator</span> <span class=\"o\">=</span> <span class=\"n\">HDF5ImageGenerator</span><span class=\"p\">(</span>\n        <span class=\"n\">src</span><span class=\"o\">=</span><span class=\"s1\">'path/to/train.h5'</span><span class=\"p\">,</span>\n        <span class=\"n\">X_key</span><span class=\"o\">=</span><span class=\"s1\">'images,</span>\n        <span class=\"n\">y_key</span><span class=\"o\">=</span><span class=\"s1\">'labels,</span>\n        <span class=\"n\">scaler</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n        <span class=\"n\">labels_encoding</span><span class=\"o\">=</span><span class=\"s1\">'hot'</span><span class=\"p\">,</span>\n        <span class=\"n\">batch_size</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">,</span>\n        <span class=\"n\">augmenter</span><span class=\"o\">=</span><span class=\"n\">my_augmenter</span><span class=\"p\">)</span>\n</pre>\n<p>Note:</p>\n<p>(1) albumentations offers a <code>ToFloat(max_value=255)</code> transformation which scales pixel intensities from [0, 255] to [0, 1]. Thus, when using it, you must turn off scaling: <code>scaler=False</code>.</p>\n<p>(2) If you want to apply standardization (mean/std), you may want to use albumentations <a href=\"https://albumentations.readthedocs.io/en/latest/api/augmentations.html#albumentations.augmentations.transforms.Normalize\" rel=\"nofollow\">Normalize</a> instead.</p>\n<p>(3) Make sure to turn off data augmentation (<code>augmenter=False</code>) when using <code>evaluate_generator()</code> and <code>predict_generator()</code>.</p>\n<p>Finally, pass the generator to your model:</p>\n<pre><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">compile</span><span class=\"p\">(</span>\n        <span class=\"n\">loss</span><span class=\"o\">=</span><span class=\"s1\">'categorical_crossentropy'</span><span class=\"p\">,</span>\n        <span class=\"n\">metrics</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'accuracy'</span><span class=\"p\">],</span>\n        <span class=\"n\">optimizer</span><span class=\"o\">=</span><span class=\"s1\">'rmsprop'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Example with fit:</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">fit_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">train_generator</span><span class=\"p\">,</span>\n    <span class=\"n\">validation_data</span><span class=\"o\">=</span><span class=\"n\">val_generator</span><span class=\"p\">,</span>\n    <span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">use_multiprocessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n    \n    \n<span class=\"c1\"># Example with evaluate:</span>\n<span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">evaluate_generator</span><span class=\"p\">(</span>\n    <span class=\"n\">eval_generator</span><span class=\"p\">,</span>\n    <span class=\"n\">workers</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">use_multiprocessing</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n    <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"n\">epochs</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n</pre>\n\n          </div>"}, "last_serial": 6905383, "releases": {"1.1.0": [{"comment_text": "", "digests": {"md5": "b4b7b31fe93105c1e0b0c8ab750a4ea0", "sha256": "c0c95ffdcc94fac883b41e680137f865d18ea801243b615cd86abcedcab7ea48"}, "downloads": -1, "filename": "h5imagegenerator-1.1.0.tar.gz", "has_sig": false, "md5_digest": "b4b7b31fe93105c1e0b0c8ab750a4ea0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 4674, "upload_time": "2020-03-08T17:43:39", "upload_time_iso_8601": "2020-03-08T17:43:39.884817Z", "url": "https://files.pythonhosted.org/packages/d8/20/204f6076ec74b2d9b973c9ca67f362d453245589801b4c99846b2a0b5ffb/h5imagegenerator-1.1.0.tar.gz", "yanked": false}], "1.1.1": [{"comment_text": "", "digests": {"md5": "f7d4812e30baf37ad46ca9ca620efde2", "sha256": "42e05b9cc1ed6198a99cfd414592767298222d5acf53532ae1b8f9f4fbeef3d1"}, "downloads": -1, "filename": "h5imagegenerator-1.1.1.tar.gz", "has_sig": false, "md5_digest": "f7d4812e30baf37ad46ca9ca620efde2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5634, "upload_time": "2020-03-08T18:15:53", "upload_time_iso_8601": "2020-03-08T18:15:53.126834Z", "url": "https://files.pythonhosted.org/packages/5d/d5/a4c9b4e76974d48134073017880a1cacce2ba420d2912200f24e77d071ce/h5imagegenerator-1.1.1.tar.gz", "yanked": false}], "1.1.2": [{"comment_text": "", "digests": {"md5": "f8790c573f957c54823f47672ebb6085", "sha256": "4bde48ecfba702b1691bb5e448b362864f1a85f35040012149d0e924bc29780c"}, "downloads": -1, "filename": "h5imagegenerator-1.1.2.tar.gz", "has_sig": false, "md5_digest": "f8790c573f957c54823f47672ebb6085", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5612, "upload_time": "2020-03-09T16:47:29", "upload_time_iso_8601": "2020-03-09T16:47:29.184778Z", "url": "https://files.pythonhosted.org/packages/e8/4a/c8f554c37a0d80021ee617a30835534d24bf2e1865c0758910f8cdf6db33/h5imagegenerator-1.1.2.tar.gz", "yanked": false}], "1.1.3": [{"comment_text": "", "digests": {"md5": "c8cc7b4f2f3ac13c7eb14bd4d892d5c0", "sha256": "57e8cc8c10f0be03a881e9c13f7202c8aa0842410c47f5a1efdfc44ccc51ec22"}, "downloads": -1, "filename": "h5imagegenerator-1.1.3.tar.gz", "has_sig": false, "md5_digest": "c8cc7b4f2f3ac13c7eb14bd4d892d5c0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 5800, "upload_time": "2020-03-14T06:37:37", "upload_time_iso_8601": "2020-03-14T06:37:37.538738Z", "url": "https://files.pythonhosted.org/packages/17/4e/40181dca56886bf578d5d83c0d379f8c63f824f3154cb4b0b4d0b2bde72b/h5imagegenerator-1.1.3.tar.gz", "yanked": false}], "1.2.1": [{"comment_text": "", "digests": {"md5": "95e4c86ac44cc07f41e92cbb5590949d", "sha256": "4a5b3e22440a4b55eefc1b16691ff01d8b620bd0e3750f08f8eabb76a0af85ff"}, "downloads": -1, "filename": "h5imagegenerator-1.2.1.tar.gz", "has_sig": false, "md5_digest": "95e4c86ac44cc07f41e92cbb5590949d", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6202, "upload_time": "2020-03-14T11:42:52", "upload_time_iso_8601": "2020-03-14T11:42:52.787954Z", "url": "https://files.pythonhosted.org/packages/36/34/08753f15cba5420a7146e6fbd5a7ffe728088914b4d9aa46b3669a2a8c90/h5imagegenerator-1.2.1.tar.gz", "yanked": false}], "1.2.2": [{"comment_text": "", "digests": {"md5": "acbddb2e716d1bb515250a8d28668dce", "sha256": "5a312e4ed8b68794f8d7e51b9ab57d363a31a33239a2a40278c595fdccb5b157"}, "downloads": -1, "filename": "h5imagegenerator-1.2.2.tar.gz", "has_sig": false, "md5_digest": "acbddb2e716d1bb515250a8d28668dce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6268, "upload_time": "2020-03-14T13:40:36", "upload_time_iso_8601": "2020-03-14T13:40:36.183666Z", "url": "https://files.pythonhosted.org/packages/8b/15/a540c7c2da7e2bb597b2513d0cb9238ec6ecb0c7a38a8e2eb2ed4fea1ecf/h5imagegenerator-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "e5df9d638cf769930e614591fc094fce", "sha256": "6d21077c474a53d06f5da65310364fb0131c78108bac92dee218ffe87cbd7a76"}, "downloads": -1, "filename": "h5imagegenerator-1.2.3.tar.gz", "has_sig": false, "md5_digest": "e5df9d638cf769930e614591fc094fce", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6393, "upload_time": "2020-03-15T17:12:13", "upload_time_iso_8601": "2020-03-15T17:12:13.241059Z", "url": "https://files.pythonhosted.org/packages/a1/42/827e9e3d3abdf586d4176476f9a43cf1aeb5ee8cb81959f8c236f2fe7c11/h5imagegenerator-1.2.3.tar.gz", "yanked": false}], "1.2.4": [{"comment_text": "", "digests": {"md5": "47534e04dff2bce90afca2dcc7161716", "sha256": "a4acfe6a23adf8b027c55d9b7a5bc6aef8a7d1cb6fbb24b1ca115a493eede4c5"}, "downloads": -1, "filename": "h5imagegenerator-1.2.4.tar.gz", "has_sig": false, "md5_digest": "47534e04dff2bce90afca2dcc7161716", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6408, "upload_time": "2020-03-18T07:26:14", "upload_time_iso_8601": "2020-03-18T07:26:14.034785Z", "url": "https://files.pythonhosted.org/packages/16/70/a8ac8a8f7ebc8dfe82adf1283988b687fee695f5545855463bdac6c4aade/h5imagegenerator-1.2.4.tar.gz", "yanked": false}], "1.2.5": [{"comment_text": "", "digests": {"md5": "b4cd38a26357004ee3bf35def6ccb485", "sha256": "75ab7e8b024efa987641a8a749583822a1f12831f1f0e3f43c11da10298a15dd"}, "downloads": -1, "filename": "h5imagegenerator-1.2.5.tar.gz", "has_sig": false, "md5_digest": "b4cd38a26357004ee3bf35def6ccb485", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6514, "upload_time": "2020-03-27T20:59:03", "upload_time_iso_8601": "2020-03-27T20:59:03.767154Z", "url": "https://files.pythonhosted.org/packages/01/7f/2908061d49e32ade2858469732b639cf7ea2077f4f791ef2e76bf2b217cc/h5imagegenerator-1.2.5.tar.gz", "yanked": false}], "1.2.6": [{"comment_text": "", "digests": {"md5": "48c6c64eef966d6e32a68975cfc5e6e2", "sha256": "7f4149be403895ebcb8bc7ab6f227457172c7aff3ee23f5869f8444241bcc359"}, "downloads": -1, "filename": "h5imagegenerator-1.2.6.tar.gz", "has_sig": false, "md5_digest": "48c6c64eef966d6e32a68975cfc5e6e2", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6607, "upload_time": "2020-03-28T08:22:56", "upload_time_iso_8601": "2020-03-28T08:22:56.190504Z", "url": "https://files.pythonhosted.org/packages/f3/0e/05182008e1b6091892adcf90798f7131a2bba135ec6038ecc4737629b542/h5imagegenerator-1.2.6.tar.gz", "yanked": false}], "1.2.7": [{"comment_text": "", "digests": {"md5": "05c290657a8ce1d9416387c03367fa16", "sha256": "11dbb523ea8c419b5ea2e3651907ca54a0be7e92937271d4f99a9480a6ad0a82"}, "downloads": -1, "filename": "h5imagegenerator-1.2.7.tar.gz", "has_sig": false, "md5_digest": "05c290657a8ce1d9416387c03367fa16", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6599, "upload_time": "2020-03-28T08:26:20", "upload_time_iso_8601": "2020-03-28T08:26:20.513619Z", "url": "https://files.pythonhosted.org/packages/8b/2d/0e5851520cf23150d9239ee10b3caabf7732c7381966435862e28bc9406d/h5imagegenerator-1.2.7.tar.gz", "yanked": false}], "1.2.8": [{"comment_text": "", "digests": {"md5": "7d84f3913f5a6b0f2d9b63d520ed4b0f", "sha256": "387e49cdfc7c0d52b15e8996d5bd70bbff75f779699268466dd5e0ee5168b761"}, "downloads": -1, "filename": "h5imagegenerator-1.2.8.tar.gz", "has_sig": false, "md5_digest": "7d84f3913f5a6b0f2d9b63d520ed4b0f", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6594, "upload_time": "2020-03-28T08:30:07", "upload_time_iso_8601": "2020-03-28T08:30:07.818221Z", "url": "https://files.pythonhosted.org/packages/4e/46/40cfd7a0f31d2d92af32af1e8a78733e71128eefbb857e0b3dbb2a0f8536/h5imagegenerator-1.2.8.tar.gz", "yanked": false}], "1.2.9": [{"comment_text": "", "digests": {"md5": "a7d25491f44fa9a882395cfacf9a87ad", "sha256": "9ce92c45a7e10972f9793ec85b76f018c3f9217ae97824c4a9cc55ded4a42a06"}, "downloads": -1, "filename": "h5imagegenerator-1.2.9.tar.gz", "has_sig": false, "md5_digest": "a7d25491f44fa9a882395cfacf9a87ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6714, "upload_time": "2020-03-29T07:12:15", "upload_time_iso_8601": "2020-03-29T07:12:15.441877Z", "url": "https://files.pythonhosted.org/packages/fc/d5/0831154690987b00ccad3196ed198857f8659c9e8529857de809204c4ff1/h5imagegenerator-1.2.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "a7d25491f44fa9a882395cfacf9a87ad", "sha256": "9ce92c45a7e10972f9793ec85b76f018c3f9217ae97824c4a9cc55ded4a42a06"}, "downloads": -1, "filename": "h5imagegenerator-1.2.9.tar.gz", "has_sig": false, "md5_digest": "a7d25491f44fa9a882395cfacf9a87ad", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 6714, "upload_time": "2020-03-29T07:12:15", "upload_time_iso_8601": "2020-03-29T07:12:15.441877Z", "url": "https://files.pythonhosted.org/packages/fc/d5/0831154690987b00ccad3196ed198857f8659c9e8529857de809204c4ff1/h5imagegenerator-1.2.9.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:52:55 2020"}