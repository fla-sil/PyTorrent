{"info": {"author": "Jan Vlcinsky", "author_email": "jan.vlcinsky@tamtamresearch.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "Intended Audience :: Information Technology", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Java", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "=====================================================================\njingtrang (compact and XML) RELAX NG schema validator and transformer\n=====================================================================\n\n`jingtrang` is wrapper of Java based command line tools for working with RELAX NG schemas.\n\nMotivation\n==========\n\nRELAX NG and especially compact form of describing XML structures is very efficient.\n\nUnfortunately, with Python, support is rather limited:\n\n- lxml allows validation of XML based schemas only\n- lxml is based on libxml2 library, which has some minor limitations with regards to RELAX NG validation (in some cases you find error messages like \"TODO\").\n- package rnc2rng is promising conversion from XML to compact form, but is not really usable (it simply does not work).\n\nIn general, it is even not very easy finding command line validator for compact RELAX NG syntax.\n\nRNV is very promising, but version on Sourceforge is rather old and version on GitHub does not have up todate installation instructions.\n\nOther RELAX NG related tools mostly ignore compact syntax.\n\nThe only exception to this is jingtrang project hosted on googlecode.\n\nProblem with this tool is, that it takes few steps more then is really convenient to have it easily installed for daily use from console.\n\nAs our team is working on Linux as well as on MS Windows, I was looking for cross platform command line solution.\n\nAs jingtrang commands (jing and trang) seem to be functioning very well, I have decided to write this jing and trang wrapper.\n\nDelivering (py)jing and (py)trang command line tool\n===================================================\n\nOriginal command line tools are named jing (validator) and trang (transforming schemas).\n\nTo prevent naming conflict, prefix `py` is used.\n\nCommand line interface is exactly the same, as if using it with java interpreter, only introductory \"java -jar <jarfile.jar>\" part is not necessary to call.\n\nHere are described only most popular use cases, for more options, consult original jingtrang documentation (download from googlecode or elsewhere and see included html doc).\n\nInstallation\n============\n\nPrerequisites are:\n\n- Python (2.7 or 3.4 and higher)\n- Java\n- pip\n\nInstall it by::\n\n    $ pip install jingtrang\n\nAfter that, two new scripts are installed:\n\n- pyjing - RELAX NG validator\n- pytrang - utility for transforming between XML/compact syntax/XSD/few more formats\n\n.. note:: There is no need to install `jing.jar` and `trang.jar` files as they are already included in `jintrang` Python package.\n\n\npyjing - RELAX NG validator (XML as well as compact syntax)\n-----------------------------------------------------------\n\n`pyjing` serves for validating XML documents against XML as well as compact syntax RELAX NG schemas:\n\n    $ pyjing\n    Jing version 20091111\n    usage: java com.thaiopensource.relaxng.util.Driver [-i] [-c] [-s] [-t] [-C catalogFile] [-e encoding] RNGFile XMLFile...\n    RELAX NG is a schema language for XML\n    See http://relaxng.org/ for more information.\n\nTo validate XML using XML syntax RELAX NG schema::\n\n    $ pyjing schema.rng file.xml\n\nTo validate using compact syntax schema, use `-c` switch::\n\n    $ pyjing -c schema.rnc file.xml\n\nValidation of multiple XML files at once is possible::\n\n    $ pyjing schema.rnc samples/*.xml\n\npytrang - Schema format convertor\n---------------------------------\n\n`pytrang` is \"schema language translator\" supporting not only RELAX NG XML and\ncompact syntax, but also DTD, XSD. It even allows generating initial schema\nbased on sample XML document.\n\nTry to run it::\n\n    $ pytrang\n    fatal: at least two arguments are required\n    Trang version 20091111\n    usage: java com.thaiopensource.relaxng.translate.Driver [-C catalogFileOrUri] [-I rng|rnc|dtd|xml] [-O rng|rnc|dtd|xsd] [-i input-param] [-o output-param] inputFileOrUri ... outputFile\n\n`pytrang` is able auto-detect format from file extension, so you can mostly directly convert without specifying explicitly, what input and output formats are to be used.\n\nConverting compact syntax to XML one can be done by::\n\n    $ pytrang root.rnc root.rng\n\n.. note:: If you use `include` in your schema, all included schemas will be converted too.\n\nTo generate initial RELAX NG schema in compact format from sample XML file, try::\n\n    $ pytrang sample.xml initial.rnc\n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://bitbucket.org/tamtamresearch/jingtrang", "keywords": "", "license": "", "maintainer": "Jan Vlcinsky", "maintainer_email": "jan.vlcinsky@tamtamresearch.com", "name": "jingtrang", "package_url": "https://pypi.org/project/jingtrang/", "platform": "", "project_url": "https://pypi.org/project/jingtrang/", "project_urls": {"Homepage": "http://bitbucket.org/tamtamresearch/jingtrang", "Repository": "http://bitbucket.org/tamtamresearch/jingtrang"}, "release_url": "https://pypi.org/project/jingtrang/0.1.2/", "requires_dist": null, "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "summary": "Wrapping jing and trang RELAX NG tools into Python script", "version": "0.1.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><cite>jingtrang</cite> is wrapper of Java based command line tools for working with RELAX NG schemas.</p>\n<div id=\"motivation\">\n<h2>Motivation</h2>\n<p>RELAX NG and especially compact form of describing XML structures is very efficient.</p>\n<p>Unfortunately, with Python, support is rather limited:</p>\n<ul>\n<li>lxml allows validation of XML based schemas only</li>\n<li>lxml is based on libxml2 library, which has some minor limitations with regards to RELAX NG validation (in some cases you find error messages like \u201cTODO\u201d).</li>\n<li>package rnc2rng is promising conversion from XML to compact form, but is not really usable (it simply does not work).</li>\n</ul>\n<p>In general, it is even not very easy finding command line validator for compact RELAX NG syntax.</p>\n<p>RNV is very promising, but version on Sourceforge is rather old and version on GitHub does not have up todate installation instructions.</p>\n<p>Other RELAX NG related tools mostly ignore compact syntax.</p>\n<p>The only exception to this is jingtrang project hosted on googlecode.</p>\n<p>Problem with this tool is, that it takes few steps more then is really convenient to have it easily installed for daily use from console.</p>\n<p>As our team is working on Linux as well as on MS Windows, I was looking for cross platform command line solution.</p>\n<p>As jingtrang commands (jing and trang) seem to be functioning very well, I have decided to write this jing and trang wrapper.</p>\n</div>\n<div id=\"delivering-py-jing-and-py-trang-command-line-tool\">\n<h2>Delivering (py)jing and (py)trang command line tool</h2>\n<p>Original command line tools are named jing (validator) and trang (transforming schemas).</p>\n<p>To prevent naming conflict, prefix <cite>py</cite> is used.</p>\n<p>Command line interface is exactly the same, as if using it with java interpreter, only introductory \u201cjava -jar &lt;jarfile.jar&gt;\u201d part is not necessary to call.</p>\n<p>Here are described only most popular use cases, for more options, consult original jingtrang documentation (download from googlecode or elsewhere and see included html doc).</p>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Prerequisites are:</p>\n<ul>\n<li>Python (2.7 or 3.4 and higher)</li>\n<li>Java</li>\n<li>pip</li>\n</ul>\n<p>Install it by:</p>\n<pre>$ pip install jingtrang\n</pre>\n<p>After that, two new scripts are installed:</p>\n<ul>\n<li>pyjing - RELAX NG validator</li>\n<li>pytrang - utility for transforming between XML/compact syntax/XSD/few more formats</li>\n</ul>\n<div>\n<p>Note</p>\n<p>There is no need to install <cite>jing.jar</cite> and <cite>trang.jar</cite> files as they are already included in <cite>jintrang</cite> Python package.</p>\n</div>\n<div id=\"pyjing-relax-ng-validator-xml-as-well-as-compact-syntax\">\n<h3>pyjing - RELAX NG validator (XML as well as compact syntax)</h3>\n<p><cite>pyjing</cite> serves for validating XML documents against XML as well as compact syntax RELAX NG schemas:</p>\n<blockquote>\n$ pyjing\nJing version 20091111\nusage: java com.thaiopensource.relaxng.util.Driver [-i] [-c] [-s] [-t] [-C catalogFile] [-e encoding] RNGFile XMLFile\u2026\nRELAX NG is a schema language for XML\nSee <a href=\"http://relaxng.org/\" rel=\"nofollow\">http://relaxng.org/</a> for more information.</blockquote>\n<p>To validate XML using XML syntax RELAX NG schema:</p>\n<pre>$ pyjing schema.rng file.xml\n</pre>\n<p>To validate using compact syntax schema, use <cite>-c</cite> switch:</p>\n<pre>$ pyjing -c schema.rnc file.xml\n</pre>\n<p>Validation of multiple XML files at once is possible:</p>\n<pre>$ pyjing schema.rnc samples/*.xml\n</pre>\n</div>\n<div id=\"pytrang-schema-format-convertor\">\n<h3>pytrang - Schema format convertor</h3>\n<p><cite>pytrang</cite> is \u201cschema language translator\u201d supporting not only RELAX NG XML and\ncompact syntax, but also DTD, XSD. It even allows generating initial schema\nbased on sample XML document.</p>\n<p>Try to run it:</p>\n<pre>$ pytrang\nfatal: at least two arguments are required\nTrang version 20091111\nusage: java com.thaiopensource.relaxng.translate.Driver [-C catalogFileOrUri] [-I rng|rnc|dtd|xml] [-O rng|rnc|dtd|xsd] [-i input-param] [-o output-param] inputFileOrUri ... outputFile\n</pre>\n<p><cite>pytrang</cite> is able auto-detect format from file extension, so you can mostly directly convert without specifying explicitly, what input and output formats are to be used.</p>\n<p>Converting compact syntax to XML one can be done by:</p>\n<pre>$ pytrang root.rnc root.rng\n</pre>\n<div>\n<p>Note</p>\n<p>If you use <cite>include</cite> in your schema, all included schemas will be converted too.</p>\n</div>\n<p>To generate initial RELAX NG schema in compact format from sample XML file, try:</p>\n<pre>$ pytrang sample.xml initial.rnc\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5178271, "releases": {"0.1.1": [{"comment_text": "", "digests": {"md5": "ebf82748805a0557851aa227185fea00", "sha256": "e2560b1c27ca8172b78f25ec11c25874d49c7efe856b7c5b5c587a0ed8612afc"}, "downloads": -1, "filename": "jingtrang-0.1.1.tar.gz", "has_sig": false, "md5_digest": "ebf82748805a0557851aa227185fea00", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 1367519, "upload_time": "2015-07-27T18:54:25", "upload_time_iso_8601": "2015-07-27T18:54:25.272444Z", "url": "https://files.pythonhosted.org/packages/4f/f9/787c1e6f6bed7c791200f1f12f71c6310d1f5e2df4f5f61d39221ed6b7df/jingtrang-0.1.1.tar.gz", "yanked": false}], "0.1.1.dev3": [], "0.1.2": [{"comment_text": "", "digests": {"md5": "f35fed82876f7f08515c7a4d9001511f", "sha256": "59c68e4641dfae91e39ec10e40f2f37ca79a9f83a12bf2565ea299c43d7ec12f"}, "downloads": -1, "filename": "jingtrang-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f35fed82876f7f08515c7a4d9001511f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 1343039, "upload_time": "2019-04-23T16:44:44", "upload_time_iso_8601": "2019-04-23T16:44:44.365289Z", "url": "https://files.pythonhosted.org/packages/bb/bc/121eb764fe9ab1fc580aab56f20a855e220c8bad04f0620ba2bb798d291f/jingtrang-0.1.2-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f35fed82876f7f08515c7a4d9001511f", "sha256": "59c68e4641dfae91e39ec10e40f2f37ca79a9f83a12bf2565ea299c43d7ec12f"}, "downloads": -1, "filename": "jingtrang-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "f35fed82876f7f08515c7a4d9001511f", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*", "size": 1343039, "upload_time": "2019-04-23T16:44:44", "upload_time_iso_8601": "2019-04-23T16:44:44.365289Z", "url": "https://files.pythonhosted.org/packages/bb/bc/121eb764fe9ab1fc580aab56f20a855e220c8bad04f0620ba2bb798d291f/jingtrang-0.1.2-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:52:39 2020"}