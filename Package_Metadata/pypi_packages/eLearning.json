{"info": {"author": "Ivan Y. Fernandez-Rosales", "author_email": "ifdezr@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: Microsoft :: Windows :: Windows 10", "Programming Language :: Python :: 3"], "description": "# eLearning API Documentation\n\neLearning is an API dedicated to managing the backend infrastructure of an e-learning system. eLearning is totally developed with Python 3.6+ and the data storing is a MongoDB implementation through the third-party API pymongo 3.9.0. \n\n## Installation\n\nAssuming, Python 3 (>=3.6) is already installed and a [MongoDB](https://www.mongodb.com/) Cluster connection is working, eLearning API needs the next requirements:\n\n1.\t[pymongo 3.9.0](https://api.mongodb.com/python/current/). Or, it can be easily installed with:\n\n\t```\n\t$ python -m pip install pymongo\n\t```\n\n2.\t[dnspython](https://pypi.org/project/dnspython/). Or, it can be easily installed with:\n\n\t```\n\t$ python -m pip install pymongo[srv]\n\t```\n\n3.\t[pip](https://pip.pypa.io/en/stable/installing/). Or, it can be easily installed with:\n\n\t```\n\t$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n\t$ python get-pip.py\n\t```\n\n4. Install with:\n\n   ```\n   $ pip install eLearning\n   ```\n\n5. Import and hello-world:\n\n\t```\n\timport eLearning as el\n\telc = el.eLearning_connector()\n\tprint(elc.client)\n\tprint(elc.db)\n\tprint(elc.db.list_collection_names())\n\telc._tabula_rasa()\n\telc.insert_professor( 'Paul Erd\u00c5\u2018s', 'erdos@princeton.edu' )\n\telc.insert_student( 'Terence Tao', 'tao@princeton.edu' )\n\t```\n\n___\n\n## Testing\n\nTo test the API, please try the next lines at your Python command-line interface:\n\n\timport eLearning as el\n\tel.eLearning_test.run()\n___\n\n\n## eLearning API documentation\n\n### Connector level operations\n\n\n_class **eLearning_connector** ( )_\n\n   An eLearning_connector is the object used to communicate with MongoDB cluster and databases. eLearning_connector object has the next attributes:\n\n   * eLearning_connector.**client** : informative dictionary about the connector.\n   * eLearning_connector.**db** : informative dictionary about the database.\n   * eLearning_connector.**course_collection** : MongoDB collection object with the courses information.\n   * eLearning_connector.**lesson_collection** : MongoDB collection object with the lessons information.\n   * eLearning_connector.**question_collection** : MongoDB collection object with the questions information.\n   * eLearning_connector.**binnacle_collection** : MongoDB collection object with the binnacles information.\n   * eLearning_connector.**record_collection** : MongoDB collection object with the records information.\n   * eLearning_connector.**user_collection** : MongoDB collection object with the users information.\n___\n\n_eLearning_connector.**insert_professor** ( fullname, email )_\n\n> Return the tuple `('200 - OK',\"\")` if the professor-user with given _fullname_ and _email_ was inserted successfully in the database. Otherwise, return `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_connector.**insert_student** ( fullname, email )_\n\n> Return the tuple `('200 - OK',\"\")` if the student-user with given _fullname_ and _email_ was inserted successfully in the database. Otherwise, return `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_connector.**delete_user_by_email** ( email )_\n\n> Return the tuple `('200 - OK',\"\")` if the user with given _email_ was deleted successfully from the database. Otherwise, return `('409 - Conflict',\"Deletion error.\")`.\n\n\n_eLearning_connector.**get_user_by_email** ( email )_\n\n> Return a _class **eLearning_professor**_ instance if the given _email_ results of a professor-user. Return a _class **eLearning_student**_ instance if the given _email_ results of a student-user. Otherwise, return `None`.\n\n\n_eLearning_connector.**list_professors** ()_\n\n> Return a Python _list_ object with all existing professor-user documents, each document is arranged into a Python _dict_ object. If there are not professor-users in database, an empty list is returned.\n\n\n_eLearning_connector.**list_students** ()_\n\n> Return a Python _list_ object with all existing student-user documents, each document is arranged into a Python _dict_ object. If there are not student-users in database, an empty list is returned.\n\n\n_eLearning_connector.**list_courses** ()_\n\n> Return a Python _list_ object with all existing course documents, each document is arranged into a Python _dict_ object. If there are not courses in database, an empty list is returned.\n\n\n_eLearning_connector.**list_lessons** ( parent_course_code )_\n\n> Return a Python _list_ object with all associated lesson documents to a given _parent_course_code_, each document is arranged into a Python _dict_ object. If there are not such lessons in database, an empty list is returned.\n\n\n_eLearning_connector.**list_questions** ( parent_lesson_code )_\n\n> Return a Python _list_ object with all associated question documents to a given _parent_lesson_code_, each document is arranged into a Python _dict_ object. If there are not such questions in database, an empty list is returned.\n___\n\n\n### User level operations\n\n\n_class **eLearning_professor** ( )_\n\n   An eLearning_professor instance corresponds to the valid professor-users' attributes and methods:\n\n   * eLearning_professor.**fullname** :`<str>` Fullname of the user.\n   * eLearning_professor.**email** : `<str>` e-mail address of the user.\n   * eLearning_professor.**role** : `<str>` it always set as \"professor\".\n___\n\n_eLearning_professor.**create_course** ( title, code, description=`None`, required_course_code=`None` )_\n\n> Parameters :\n> * _title_: `<str>` Customized title for the course.\n> * _code_: `<str>` Customized code for the course.\n> * _description_: `<str>` Description of the course.\n> * _required_course_code_: `<str>` Code of required approved-course. \n\n> Return the tuple `('200 - OK',\"\")` if the course with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Course's code already exists.\")` , `('404 - Not Found',\"Required-course's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**create_lesson** ( title, code, content, parent_course_code, approval_score=`1.0`, required_lesson_code=`None` )_\n\n> Parameters :\n> * _title_: `<str>` Customized title for the lesson.\n> * _code_: `<str>` Customized code for the lesson.\n> * _content_: `<str>` Description of the lesson.\n> * _correct_answers_: `<list>` List of the correct answer labels (`<str>`).\n> * _parent_course_code_: `<str>` Code of the parent-course.\n> * _approval_score_: `<float>` Floating number between `0.0` (minimal score) and `1.0` (maximal score).\n> * _required_lesson_code_: `<str>` Code of required approved-lesson. \n\n> Return the tuple `('200 - OK',\"\")` if the lesson with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Lesson's code already exists.\")` , `('404 - Not Found',\"Required-lesson's code not found.\")` , `('404 - Not Found',\"Parent-course's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**create_question** ( code, mode, content, correct_answers, parent_lesson_code )_\n\n> Parameters :\n> * _code_: `<str>` Customized code for the question.\n> * _mode_: `<str>` \"Bool\",\"MC1A\",\"MCMA\\+\",\"MCMA\\*\" only.\n> * _content_: `<str>` Description of the question.\n> * _correct_answers_: `<list>` List of option labels.\n> * _parent_lesson_code_: `<str>` Code of the parent-course.\n\n> Return the tuple `('200 - OK',\"\")` if the question with given parameters was created successfully in the database.  Otherwise, return `('400 - Bad Request',\"Invalid question mode.\")` , `('400 - Bad Request',\"Answers have to be a list of strings.\")`, `('404 - Not Found',\"Parent-lesson's code not found.\")` or `('409 - Conflict',\"Insertion error.\")`.\n\n\n_eLearning_professor.**list_courses** ( )_\n\n> Return the Python object _list_ with all current courses. \n\n\n_eLearning_professor.**read_course** ( code, full=`False` )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n> * _full_: `<bool>` `False` or `True`.\n\n> Return the Python object _dict_ with the given course attributes at creation time. Moreover, if _full_ is set to `True`, the information of all subscribed lessons and questions will be included.\n\n\n_eLearning_professor.**read_lesson** ( code, full=`False` )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n> * _full_: `<bool>` `False` or `True`.\n\n> Return the Python object _dict_ with the given lesson attributes at creation time. Moreover, if _full_ is set to `True`, the information of all subscribed questions will be included.\n\n\n_eLearning_professor.**read_question** ( code )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n\n> Return the Python object _dict_ with the given question attributes at creation time.\n\n\n_eLearning_professor.**update_course** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given course.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**update_lesson** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given lesson.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**update_question** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n> * _\\*\\*kwards_: `<dict>` Dictionary with the attributes to update for the given question.\n\n> Return an integer with the count of modified attributes.\n\n\n_eLearning_professor.**delete_course** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the course.\n\n> Return an integer with the count of deleted objects.\n\n\n_eLearning_professor.**delete_lesson** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the lesson.\n\n> Return an integer with the count of deleted objects.\n\n\n_eLearning_professor.**delete_question** ( code, \\*\\*kwards )_\n\n> Parameters :\n> * _code_: `<str>` Code of the question.\n\n> Return an integer with the count of deleted objects.\n___\n\n\n_class **eLearning_student** ( )_\n\n   An eLearning_student instance corresponds to the valid student-users' attributes and methods:\n\n   * eLearning_student.**fullname** :`<str>` Fullname of the user.\n   * eLearning_student.**email** : `<str>` e-mail address of the user.\n   * eLearning_student.**role** : `<str>` it always set as \"student\".\n   * eLearning_student.**score** : `<float>` Main score.\n___\n\n_eLearning_student.**get_record_summary** ( )_\n\n> Return a Python object _list_ with informative _dict_ about the type, code, status, score and datetime of all courses and lessons taken by the student.\n\n\n_eLearning_student.**list_courses_and_availability** ( )_\n\n> Return a Python object _list_ with all current courses. Every course is represented by an informative _dict_, where the key `'available'` indicate with `True`, whether the course is available for the student or with `False` otherwise.\n\n\n _eLearning_student.**list_lessons_and_availability** ( parent_course_code )_\n\n> Parameters :\n> * parent_course_code: `<str>` Code of the parent-course.\n\n> Return a Python object _list_ with all current lessons. Every lesson is represented by an informative _dict_, where the key `'available'` indicate with `True`, whether the lesson is available for the student or with `False` otherwise.\n\n\n_eLearning_student.**get_full_lesson** ( code )_\n\n> Parameters :\n> * code: `<str>` Code of the claimed lesson.\n\n> Return a Python object _dict_ with the claimed lesson information and its subscrited questions.\n\n\n_eLearning_student.**take_lesson** ( code, answers_list )_\n\n> Parameters :\n> * code: `<str>` Code of the taken lesson.\n> * answer_list: `<list>` List with lists of the correct answers labels; _e.g._ `[['A','C'],['A'],[True]]`.\n\n> Return a Python object _dict_ resuming the score, status of the taken lesson and the parent-course status whether was approved.\n\n\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Ivanfdezr/DACODES-CHALLENGE", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "eLearning", "package_url": "https://pypi.org/project/eLearning/", "platform": "", "project_url": "https://pypi.org/project/eLearning/", "project_urls": {"Homepage": "https://github.com/Ivanfdezr/DACODES-CHALLENGE"}, "release_url": "https://pypi.org/project/eLearning/0.0.5/", "requires_dist": null, "requires_python": ">=3.6", "summary": "eLearning is an API dedicated to managing the backend infrastructure of an e-learning system.", "version": "0.0.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eLearning API Documentation</h1>\n<p>eLearning is an API dedicated to managing the backend infrastructure of an e-learning system. eLearning is totally developed with Python 3.6+ and the data storing is a MongoDB implementation through the third-party API pymongo 3.9.0.</p>\n<h2>Installation</h2>\n<p>Assuming, Python 3 (&gt;=3.6) is already installed and a <a href=\"https://www.mongodb.com/\" rel=\"nofollow\">MongoDB</a> Cluster connection is working, eLearning API needs the next requirements:</p>\n<ol>\n<li>\n<p><a href=\"https://api.mongodb.com/python/current/\" rel=\"nofollow\">pymongo 3.9.0</a>. Or, it can be easily installed with:</p>\n<pre><code>$ python -m pip install pymongo\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://pypi.org/project/dnspython/\" rel=\"nofollow\">dnspython</a>. Or, it can be easily installed with:</p>\n<pre><code>$ python -m pip install pymongo[srv]\n</code></pre>\n</li>\n<li>\n<p><a href=\"https://pip.pypa.io/en/stable/installing/\" rel=\"nofollow\">pip</a>. Or, it can be easily installed with:</p>\n<pre><code>$ curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py\n$ python get-pip.py\n</code></pre>\n</li>\n<li>\n<p>Install with:</p>\n<pre><code>$ pip install eLearning\n</code></pre>\n</li>\n<li>\n<p>Import and hello-world:</p>\n<pre><code>import eLearning as el\nelc = el.eLearning_connector()\nprint(elc.client)\nprint(elc.db)\nprint(elc.db.list_collection_names())\nelc._tabula_rasa()\nelc.insert_professor( 'Paul Erd\u00c5\u2018s', 'erdos@princeton.edu' )\nelc.insert_student( 'Terence Tao', 'tao@princeton.edu' )\n</code></pre>\n</li>\n</ol>\n<hr>\n<h2>Testing</h2>\n<p>To test the API, please try the next lines at your Python command-line interface:</p>\n<pre><code>import eLearning as el\nel.eLearning_test.run()\n</code></pre>\n<hr>\n<h2>eLearning API documentation</h2>\n<h3>Connector level operations</h3>\n<p><em>class <strong>eLearning_connector</strong> ( )</em></p>\n<p>An eLearning_connector is the object used to communicate with MongoDB cluster and databases. eLearning_connector object has the next attributes:</p>\n<ul>\n<li>eLearning_connector.<strong>client</strong> : informative dictionary about the connector.</li>\n<li>eLearning_connector.<strong>db</strong> : informative dictionary about the database.</li>\n<li>eLearning_connector.<strong>course_collection</strong> : MongoDB collection object with the courses information.</li>\n<li>eLearning_connector.<strong>lesson_collection</strong> : MongoDB collection object with the lessons information.</li>\n<li>eLearning_connector.<strong>question_collection</strong> : MongoDB collection object with the questions information.</li>\n<li>eLearning_connector.<strong>binnacle_collection</strong> : MongoDB collection object with the binnacles information.</li>\n<li>eLearning_connector.<strong>record_collection</strong> : MongoDB collection object with the records information.</li>\n<li>eLearning_connector.<strong>user_collection</strong> : MongoDB collection object with the users information.</li>\n</ul>\n<hr>\n<p><em>eLearning_connector.<strong>insert_professor</strong> ( fullname, email )</em></p>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the professor-user with given <em>fullname</em> and <em>email</em> was inserted successfully in the database. Otherwise, return <code>('409 - Conflict',\"Insertion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>insert_student</strong> ( fullname, email )</em></p>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the student-user with given <em>fullname</em> and <em>email</em> was inserted successfully in the database. Otherwise, return <code>('409 - Conflict',\"Insertion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>delete_user_by_email</strong> ( email )</em></p>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the user with given <em>email</em> was deleted successfully from the database. Otherwise, return <code>('409 - Conflict',\"Deletion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>get_user_by_email</strong> ( email )</em></p>\n<blockquote>\n<p>Return a <em>class <strong>eLearning_professor</strong></em> instance if the given <em>email</em> results of a professor-user. Return a <em>class <strong>eLearning_student</strong></em> instance if the given <em>email</em> results of a student-user. Otherwise, return <code>None</code>.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>list_professors</strong> ()</em></p>\n<blockquote>\n<p>Return a Python <em>list</em> object with all existing professor-user documents, each document is arranged into a Python <em>dict</em> object. If there are not professor-users in database, an empty list is returned.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>list_students</strong> ()</em></p>\n<blockquote>\n<p>Return a Python <em>list</em> object with all existing student-user documents, each document is arranged into a Python <em>dict</em> object. If there are not student-users in database, an empty list is returned.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>list_courses</strong> ()</em></p>\n<blockquote>\n<p>Return a Python <em>list</em> object with all existing course documents, each document is arranged into a Python <em>dict</em> object. If there are not courses in database, an empty list is returned.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>list_lessons</strong> ( parent_course_code )</em></p>\n<blockquote>\n<p>Return a Python <em>list</em> object with all associated lesson documents to a given <em>parent_course_code</em>, each document is arranged into a Python <em>dict</em> object. If there are not such lessons in database, an empty list is returned.</p>\n</blockquote>\n<p><em>eLearning_connector.<strong>list_questions</strong> ( parent_lesson_code )</em></p>\n<blockquote>\n<p>Return a Python <em>list</em> object with all associated question documents to a given <em>parent_lesson_code</em>, each document is arranged into a Python <em>dict</em> object. If there are not such questions in database, an empty list is returned.</p>\n</blockquote>\n<hr>\n<h3>User level operations</h3>\n<p><em>class <strong>eLearning_professor</strong> ( )</em></p>\n<p>An eLearning_professor instance corresponds to the valid professor-users' attributes and methods:</p>\n<ul>\n<li>eLearning_professor.<strong>fullname</strong> :<code>&lt;str&gt;</code> Fullname of the user.</li>\n<li>eLearning_professor.<strong>email</strong> : <code>&lt;str&gt;</code> e-mail address of the user.</li>\n<li>eLearning_professor.<strong>role</strong> : <code>&lt;str&gt;</code> it always set as \"professor\".</li>\n</ul>\n<hr>\n<p><em>eLearning_professor.<strong>create_course</strong> ( title, code, description=<code>None</code>, required_course_code=<code>None</code> )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>title</em>: <code>&lt;str&gt;</code> Customized title for the course.</li>\n<li><em>code</em>: <code>&lt;str&gt;</code> Customized code for the course.</li>\n<li><em>description</em>: <code>&lt;str&gt;</code> Description of the course.</li>\n<li><em>required_course_code</em>: <code>&lt;str&gt;</code> Code of required approved-course.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the course with given parameters was created successfully in the database.  Otherwise, return <code>('400 - Bad Request',\"Course's code already exists.\")</code> , <code>('404 - Not Found',\"Required-course's code not found.\")</code> or <code>('409 - Conflict',\"Insertion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>create_lesson</strong> ( title, code, content, parent_course_code, approval_score=<code>1.0</code>, required_lesson_code=<code>None</code> )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>title</em>: <code>&lt;str&gt;</code> Customized title for the lesson.</li>\n<li><em>code</em>: <code>&lt;str&gt;</code> Customized code for the lesson.</li>\n<li><em>content</em>: <code>&lt;str&gt;</code> Description of the lesson.</li>\n<li><em>correct_answers</em>: <code>&lt;list&gt;</code> List of the correct answer labels (<code>&lt;str&gt;</code>).</li>\n<li><em>parent_course_code</em>: <code>&lt;str&gt;</code> Code of the parent-course.</li>\n<li><em>approval_score</em>: <code>&lt;float&gt;</code> Floating number between <code>0.0</code> (minimal score) and <code>1.0</code> (maximal score).</li>\n<li><em>required_lesson_code</em>: <code>&lt;str&gt;</code> Code of required approved-lesson.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the lesson with given parameters was created successfully in the database.  Otherwise, return <code>('400 - Bad Request',\"Lesson's code already exists.\")</code> , <code>('404 - Not Found',\"Required-lesson's code not found.\")</code> , <code>('404 - Not Found',\"Parent-course's code not found.\")</code> or <code>('409 - Conflict',\"Insertion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>create_question</strong> ( code, mode, content, correct_answers, parent_lesson_code )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Customized code for the question.</li>\n<li><em>mode</em>: <code>&lt;str&gt;</code> \"Bool\",\"MC1A\",\"MCMA+\",\"MCMA*\" only.</li>\n<li><em>content</em>: <code>&lt;str&gt;</code> Description of the question.</li>\n<li><em>correct_answers</em>: <code>&lt;list&gt;</code> List of option labels.</li>\n<li><em>parent_lesson_code</em>: <code>&lt;str&gt;</code> Code of the parent-course.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the tuple <code>('200 - OK',\"\")</code> if the question with given parameters was created successfully in the database.  Otherwise, return <code>('400 - Bad Request',\"Invalid question mode.\")</code> , <code>('400 - Bad Request',\"Answers have to be a list of strings.\")</code>, <code>('404 - Not Found',\"Parent-lesson's code not found.\")</code> or <code>('409 - Conflict',\"Insertion error.\")</code>.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>list_courses</strong> ( )</em></p>\n<blockquote>\n<p>Return the Python object <em>list</em> with all current courses.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>read_course</strong> ( code, full=<code>False</code> )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the course.</li>\n<li><em>full</em>: <code>&lt;bool&gt;</code> <code>False</code> or <code>True</code>.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the Python object <em>dict</em> with the given course attributes at creation time. Moreover, if <em>full</em> is set to <code>True</code>, the information of all subscribed lessons and questions will be included.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>read_lesson</strong> ( code, full=<code>False</code> )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the lesson.</li>\n<li><em>full</em>: <code>&lt;bool&gt;</code> <code>False</code> or <code>True</code>.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the Python object <em>dict</em> with the given lesson attributes at creation time. Moreover, if <em>full</em> is set to <code>True</code>, the information of all subscribed questions will be included.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>read_question</strong> ( code )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the question.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return the Python object <em>dict</em> with the given question attributes at creation time.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>update_course</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the course.</li>\n<li><em>**kwards</em>: <code>&lt;dict&gt;</code> Dictionary with the attributes to update for the given course.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of modified attributes.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>update_lesson</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the lesson.</li>\n<li><em>**kwards</em>: <code>&lt;dict&gt;</code> Dictionary with the attributes to update for the given lesson.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of modified attributes.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>update_question</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the question.</li>\n<li><em>**kwards</em>: <code>&lt;dict&gt;</code> Dictionary with the attributes to update for the given question.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of modified attributes.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>delete_course</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the course.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of deleted objects.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>delete_lesson</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the lesson.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of deleted objects.</p>\n</blockquote>\n<p><em>eLearning_professor.<strong>delete_question</strong> ( code, **kwards )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li><em>code</em>: <code>&lt;str&gt;</code> Code of the question.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return an integer with the count of deleted objects.</p>\n</blockquote>\n<hr>\n<p><em>class <strong>eLearning_student</strong> ( )</em></p>\n<p>An eLearning_student instance corresponds to the valid student-users' attributes and methods:</p>\n<ul>\n<li>eLearning_student.<strong>fullname</strong> :<code>&lt;str&gt;</code> Fullname of the user.</li>\n<li>eLearning_student.<strong>email</strong> : <code>&lt;str&gt;</code> e-mail address of the user.</li>\n<li>eLearning_student.<strong>role</strong> : <code>&lt;str&gt;</code> it always set as \"student\".</li>\n<li>eLearning_student.<strong>score</strong> : <code>&lt;float&gt;</code> Main score.</li>\n</ul>\n<hr>\n<p><em>eLearning_student.<strong>get_record_summary</strong> ( )</em></p>\n<blockquote>\n<p>Return a Python object <em>list</em> with informative <em>dict</em> about the type, code, status, score and datetime of all courses and lessons taken by the student.</p>\n</blockquote>\n<p><em>eLearning_student.<strong>list_courses_and_availability</strong> ( )</em></p>\n<blockquote>\n<p>Return a Python object <em>list</em> with all current courses. Every course is represented by an informative <em>dict</em>, where the key <code>'available'</code> indicate with <code>True</code>, whether the course is available for the student or with <code>False</code> otherwise.</p>\n</blockquote>\n<p><em>eLearning_student.<strong>list_lessons_and_availability</strong> ( parent_course_code )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li>parent_course_code: <code>&lt;str&gt;</code> Code of the parent-course.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return a Python object <em>list</em> with all current lessons. Every lesson is represented by an informative <em>dict</em>, where the key <code>'available'</code> indicate with <code>True</code>, whether the lesson is available for the student or with <code>False</code> otherwise.</p>\n</blockquote>\n<p><em>eLearning_student.<strong>get_full_lesson</strong> ( code )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li>code: <code>&lt;str&gt;</code> Code of the claimed lesson.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return a Python object <em>dict</em> with the claimed lesson information and its subscrited questions.</p>\n</blockquote>\n<p><em>eLearning_student.<strong>take_lesson</strong> ( code, answers_list )</em></p>\n<blockquote>\n<p>Parameters :</p>\n<ul>\n<li>code: <code>&lt;str&gt;</code> Code of the taken lesson.</li>\n<li>answer_list: <code>&lt;list&gt;</code> List with lists of the correct answers labels; <em>e.g.</em> <code>[['A','C'],['A'],[True]]</code>.</li>\n</ul>\n</blockquote>\n<blockquote>\n<p>Return a Python object <em>dict</em> resuming the score, status of the taken lesson and the parent-course status whether was approved.</p>\n</blockquote>\n\n          </div>"}, "last_serial": 6276716, "releases": {"0.0.5": [{"comment_text": "", "digests": {"md5": "badaac82e34df2e8a2f17aedb496a5b0", "sha256": "b302c02c5c4a4f0cdcfd0b9d778609492cd284c89d10c69313a3c250b6c08e76"}, "downloads": -1, "filename": "eLearning-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "badaac82e34df2e8a2f17aedb496a5b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22279, "upload_time": "2019-12-11T02:46:09", "upload_time_iso_8601": "2019-12-11T02:46:09.565946Z", "url": "https://files.pythonhosted.org/packages/40/4a/0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb/eLearning-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25dcf9ecbd0f1a2dededc6217b96183a", "sha256": "3e033cc9bf1c04c277d61cb265f6e81a3fb8f832db2f97fac4fb378c9c42fd55"}, "downloads": -1, "filename": "eLearning-0.0.5.tar.gz", "has_sig": false, "md5_digest": "25dcf9ecbd0f1a2dededc6217b96183a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9159, "upload_time": "2019-12-11T02:46:12", "upload_time_iso_8601": "2019-12-11T02:46:12.006924Z", "url": "https://files.pythonhosted.org/packages/a7/b2/8f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7/eLearning-0.0.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "badaac82e34df2e8a2f17aedb496a5b0", "sha256": "b302c02c5c4a4f0cdcfd0b9d778609492cd284c89d10c69313a3c250b6c08e76"}, "downloads": -1, "filename": "eLearning-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "badaac82e34df2e8a2f17aedb496a5b0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 22279, "upload_time": "2019-12-11T02:46:09", "upload_time_iso_8601": "2019-12-11T02:46:09.565946Z", "url": "https://files.pythonhosted.org/packages/40/4a/0e3361dc3111f67996293f6037a145411931858c53b907aa924b064115fb/eLearning-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "25dcf9ecbd0f1a2dededc6217b96183a", "sha256": "3e033cc9bf1c04c277d61cb265f6e81a3fb8f832db2f97fac4fb378c9c42fd55"}, "downloads": -1, "filename": "eLearning-0.0.5.tar.gz", "has_sig": false, "md5_digest": "25dcf9ecbd0f1a2dededc6217b96183a", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 9159, "upload_time": "2019-12-11T02:46:12", "upload_time_iso_8601": "2019-12-11T02:46:12.006924Z", "url": "https://files.pythonhosted.org/packages/a7/b2/8f369f0d467e04c34a82a536adc846dce87900c10ca076f0708ab534d1c7/eLearning-0.0.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:55 2020"}