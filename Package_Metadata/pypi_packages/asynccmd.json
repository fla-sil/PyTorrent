{"info": {"author": "Valentin Kazakov", "author_email": "vkazakov@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Console", "License :: OSI Approved :: Apache Software License", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Topic :: System :: Shells"], "description": "|Build Status| |codecov| |PyPI version| |PyPI|\n\nasynccmd\n========\n\nAsync implementation of Cmd Python lib.\n\nAsynccmd is a library to build command line interface for you asyncio\nproject.\n\nIt's very simple like original Cmd lib\nhttps://docs.python.org/3.6/library/cmd.html.\n\nThe mechanic is very similar. You have Cmd superclass, you can override\nclass method and add yours own.\n\nFeatures\n--------\n\n-  support command line for Windows and POSIX systems\n-  build-in ``help`` or ``?`` command to list all available command\n-  build-in ``exit`` command for emergency stop asyncio loop\n-  support repeat last cmd command by sending empty string\n\nGetting started\n---------------\n\nSimple example\n~~~~~~~~~~~~~~\n\nThis is very simple example to show you main features and how they can\nbe used.\n\nFirst of all, we are create new class and inherited our ``Cmd`` class.\nDo not instantiate ``Cmd`` itself.\n\nThan create instance of this new class and run loop.\n\n.. code:: python\n\n    class SimpleCommander(Cmd):\n        def __init__(self, mode, intro, prompt):\n            # We need to pass in Cmd class mode of async cmd running\n            super().__init__(mode=mode)\n            self.intro = intro\n            self.prompt = prompt\n            self.loop = None\n\n        def do_tasks(self, arg):\n            \"\"\"\n            Our example method. Type \"tasks <arg>\"\n            :param arg: contain args that go after command\n            :return: None\n            \"\"\"\n            for task in asyncio.Task.all_tasks(loop=self.loop):\n                print(task)\n\n        def start(self, loop=None):\n            # We pass our loop to Cmd class.\n            # If None it try to get default asyncio loop.\n            self.loop = loop\n            # Create async tasks to run in loop. There is run_loop=false by default\n            super().cmdloop(loop)\n\n    # For win system we have only Run mode\n    # For POSIX system Reader mode is preferred\n\n\n    if sys.platform == 'win32':\n        loop = asyncio.ProactorEventLoop()\n        mode = \"Run\"\n    else:\n        loop = asyncio.get_event_loop()\n        mode = \"Reader\"\n    # create instance\n    cmd = SimpleCommander(mode=mode, intro=\"This is example\", prompt=\"example> \")\n    cmd.start(loop)  # prepaire instance\n    try:\n        loop.run_forever()  # our cmd will run automatilly from this moment\n    except KeyboardInterrupt:\n        loop.stop()\n\n`Link to\nsimple.py <https://github.com/valentinmk/asynccmd/blob/master/examples/simple.py>`__\n\nGeneral example\n~~~~~~~~~~~~~~~\n\nWe use our simple example, but add some new staff: \\* ``sleep_n_print``\ncoroutine that will be called from our cli command \\* ``do_sleep`` new\nmethod (sleep cli command) that add task to event loop\n\n.. code:: python\n\n    async def sleep_n_print(loop, time_to_sleep=None):\n        \"\"\"\n        This is our simple coroutine.\n        :param time_to_sleep: time to sleep in seconds\n        :return: await sleep for time_to_sleep seconds\n        \"\"\"\n        asyncio.set_event_loop(loop)  # set correct event loop\n        await asyncio.sleep(int(time_to_sleep))\n        print(\"Wake up! I was slept for {0}s\".format(time_to_sleep))\n\n.. code:: python\n\n    def do_sleep(self, arg):\n        \"\"\"\n        Our example cmd-command-method for sleep. sleep <arg>\n        :param arg: contain args that go after command\n        :return: None\n        \"\"\"\n        self.loop.create_task(sleep_n_print(self.loop, arg))\n\n`Link to\nmain.py <https://github.com/valentinmk/asynccmd/blob/master/examples/main.py>`__\n\nRun our cli and make ``sleep 10`` command 3 times. Now we have 3\n``sleep_n_print`` async tasks in our event loop. If you use ``tasks``\ncommand, you see something like that.\n\n.. code:: shell\n\n    example>tasks\n    <Task pending coro=<sleep_n_print() running at asynccmd\\examples\\main.py:13> wait_for=<Future pending cb=[Task._wakeup()]>>\n    <Task pending coro=<Cmd._read_line() running at C:\\Program Files\\Python35\\lib\\site-packages\\asynccmd\\asynccmd.py:141>>\n    <Task pending coro=<sleep_n_print() running at asynccmd\\examples\\main.py:13> wait_for=<Future pending cb=[Task._wakeup()]>>\n    <Task pending coro=<sleep_n_print() running at asynccmd\\examples\\main.py:13> wait_for=<Future pending cb=[Task._wakeup()]>>\n    example>\n    Wake up! I was slept for 10s\n    Wake up! I was slept for 10s\n    Wake up! I was slept for 10s\n\nAiohttp implementation\n~~~~~~~~~~~~~~~~~~~~~~\n\nThis is practical example how to control aiohttp instances. We will\ncreate two cli command ``start`` and ``stop``. This commands get port\nnumber as only one argument. Let's make some changes for our general\nexample:\n\nCreate class helper that will be do all aiohttp staff for us.\n\n.. code:: python\n\n    class AiohttpCmdHelper:\n        \"\"\"\n        Helper class that do all aiohttp start stop manipulation\n        \"\"\"\n        port = 8080  # Default port\n        loop = None  # By default loop is not set\n\n        def __init__(self, loop, port):\n            self.loop = loop\n            self.port = port\n\n        async def handle(self, request):\n            \"\"\"\n            Simple handler that answer http request get with port and name\n            \"\"\"\n            name = request.match_info.get('name', \"Anonymous\")\n            text = 'Aiohttp server running on {0} port. Hello, {1}'.format(\n                str(self.port), str(name))\n            return web.Response(text=text)\n\n        async def start(self):\n            \"\"\"\n            Start aiohttp web server\n            \"\"\"\n            self.app = web.Application()\n            self.app.router.add_get('/', self.handle)\n            self.app.router.add_get('/{name}', self.handle)\n            self.handler = self.app.make_handler()\n            self.f = self.loop.create_server(self.handler,\n                                             host='0.0.0.0',\n                                             port=self.port)\n            # Event loop is already runing, so we await create server instead\n            # of run_until_complete\n            self.srv = await self.f\n\n        async def stop(self):\n            \"\"\"\n            Stop aiohttp server\n            \"\"\"\n            self.srv.close()\n            await self.srv.wait_closed()\n            await self.app.shutdown()\n            await self.handler.shutdown(60.0)\n            await self.app.cleanup()\n\nNow we ready to add ``start`` and ``stop`` command to ``Commander``.\n\n.. code:: python\n\n    # Add property to store helper objects\n        aiohttp_servers = []\n    # ...\n\n    def do_start(self, arg):\n        \"\"\"\n        Our example cli-command-method for start aiohttp server. start <arg>\n        :param arg: Port number\n        :return: None\n        \"\"\"\n        if not arg:  # we use simple check in our demonstration\n            print(\"Error port is empty\")\n        else:\n            test = AiohttpCmdHelper(loop=self.loop, port=int(arg))\n            self.aiohttp_servers.append({'port': int(arg),'server': test})\n            self.loop.create_task(test.start())\n\n    def do_stop(self, arg):\n        \"\"\"\n        Our example cli-command-method for stop aiohttp server. start <arg>\n        :param arg: Port number\n        :return: None\n        \"\"\"\n        if not arg:  # we use simple check in our demonstration\n            print(\"Error! Provided port is empty\")\n        else:\n            aiohttp_servers = []\n            for srv in self.aiohttp_servers:\n                if srv['port'] == int(arg):\n                    self.loop.create_task(srv['server'].stop())\n                else:\n                    aiohttp_servers.append({'port': srv['port'], 'server': srv['server']})\n            self.aiohttp_servers = aiohttp_servers\n\nWe need to add ``asyncio.set_event_loop(loop)`` addition to our main\nexample to prevent aiohttp to create its own loop.\n\n.. code:: python\n\n    if sys.platform == 'win32':\n        loop = asyncio.ProactorEventLoop()\n        mode = \"Run\"\n    else:\n        loop = asyncio.get_event_loop()\n        mode = \"Reader\"\n\n    asyncio.set_event_loop(loop)  # set our event loop for aiohttp (fix for Win32)\n\nThat's all. Now we can run multiple aiohttp server from our code.\n\n`Link to\naiohttp\\_example.py <https://github.com/valentinmk/asynccmd/blob/master/examples/aiohttp_example.py>`__\n\nDocumentation\n-------------\n\nTBD\n\nContributing\n------------\n\nMain stream is fork project, commit changes and send pull request.\nContributing to lib you could make in form of feedback, bug reports or\npull requests. CONTRIBUTING.md - TBD.\n\nRequirements\n------------\n\n-  Python >= 3.5\n\nLicense\n-------\n\n``asynccmd`` is offered under the Apache 2 license.\n\nSource code\n-----------\n\nThe latest developer version is available at\nhttps://github.com/valentinmk/asynccmd\n\n.. |Build Status| image:: https://travis-ci.org/valentinmk/asynccmd.svg?branch=master\n   :target: https://travis-ci.org/valentinmk/asynccmd\n.. |codecov| image:: https://codecov.io/gh/valentinmk/asynccmd/branch/master/graph/badge.svg\n   :target: https://codecov.io/gh/valentinmk/asynccmd\n.. |PyPI version| image:: https://badge.fury.io/py/asynccmd.svg\n   :target: https://badge.fury.io/py/asynccmd\n.. |PyPI| image:: https://img.shields.io/pypi/status/asynccmd.svg\n   :target: https://img.shields.io/pypi/status/asynccmd.svg", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/valentinmk/asynccmd", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/valentinmk/asynccmd", "keywords": "", "license": "Apache 2", "maintainer": "", "maintainer_email": "", "name": "asynccmd", "package_url": "https://pypi.org/project/asynccmd/", "platform": "POSIX,Microsoft :: Windows", "project_url": "https://pypi.org/project/asynccmd/", "project_urls": {"Download": "https://github.com/valentinmk/asynccmd", "Homepage": "https://github.com/valentinmk/asynccmd"}, "release_url": "https://pypi.org/project/asynccmd/0.2.4/", "requires_dist": null, "requires_python": "", "summary": "Asyncio implementation of Cmd Python lib.", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://travis-ci.org/valentinmk/asynccmd\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9aee461ef581bed7c6f927ecc44e200b4de09944/68747470733a2f2f7472617669732d63692e6f72672f76616c656e74696e6d6b2f6173796e63636d642e7376673f6272616e63683d6d6173746572\"></a> <a href=\"https://codecov.io/gh/valentinmk/asynccmd\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9f9bcd5b2efa30cb5ede53c775efda25b4c9db96/68747470733a2f2f636f6465636f762e696f2f67682f76616c656e74696e6d6b2f6173796e63636d642f6272616e63682f6d61737465722f67726170682f62616467652e737667\"></a> <a href=\"https://badge.fury.io/py/asynccmd\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/98f59b1dc84673de6151ac5eb8958cd97dd43a81/68747470733a2f2f62616467652e667572792e696f2f70792f6173796e63636d642e737667\"></a> <a href=\"https://img.shields.io/pypi/status/asynccmd.svg\" rel=\"nofollow\"><img alt=\"PyPI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/dd76f4d39330f476eecda591a567c422c0191eb4/68747470733a2f2f696d672e736869656c64732e696f2f707970692f7374617475732f6173796e63636d642e737667\"></a></p>\n<div id=\"asynccmd\">\n<h2>asynccmd</h2>\n<p>Async implementation of Cmd Python lib.</p>\n<p>Asynccmd is a library to build command line interface for you asyncio\nproject.</p>\n<p>It\u2019s very simple like original Cmd lib\n<a href=\"https://docs.python.org/3.6/library/cmd.html\" rel=\"nofollow\">https://docs.python.org/3.6/library/cmd.html</a>.</p>\n<p>The mechanic is very similar. You have Cmd superclass, you can override\nclass method and add yours own.</p>\n<div id=\"features\">\n<h3>Features</h3>\n<ul>\n<li>support command line for Windows and POSIX systems</li>\n<li>build-in <tt>help</tt> or <tt>?</tt> command to list all available command</li>\n<li>build-in <tt>exit</tt> command for emergency stop asyncio loop</li>\n<li>support repeat last cmd command by sending empty string</li>\n</ul>\n</div>\n<div id=\"getting-started\">\n<h3>Getting started</h3>\n<div id=\"simple-example\">\n<h4>Simple example</h4>\n<p>This is very simple example to show you main features and how they can\nbe used.</p>\n<p>First of all, we are create new class and inherited our <tt>Cmd</tt> class.\nDo not instantiate <tt>Cmd</tt> itself.</p>\n<p>Than create instance of this new class and run loop.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">SimpleCommander</span><span class=\"p\">(</span><span class=\"n\">Cmd</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">intro</span><span class=\"p\">,</span> <span class=\"n\">prompt</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We need to pass in Cmd class mode of async cmd running</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">intro</span> <span class=\"o\">=</span> <span class=\"n\">intro</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">prompt</span> <span class=\"o\">=</span> <span class=\"n\">prompt</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_tasks</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Our example method. Type \"tasks &lt;arg&gt;\"\n        :param arg: contain args that go after command\n        :return: None\n        \"\"\"</span>\n        <span class=\"k\">for</span> <span class=\"n\">task</span> <span class=\"ow\">in</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">Task</span><span class=\"o\">.</span><span class=\"n\">all_tasks</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">):</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">task</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"c1\"># We pass our loop to Cmd class.</span>\n        <span class=\"c1\"># If None it try to get default asyncio loop.</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span>\n        <span class=\"c1\"># Create async tasks to run in loop. There is run_loop=false by default</span>\n        <span class=\"nb\">super</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">cmdloop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># For win system we have only Run mode</span>\n<span class=\"c1\"># For POSIX system Reader mode is preferred</span>\n\n\n<span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s1\">'win32'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ProactorEventLoop</span><span class=\"p\">()</span>\n    <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"Run\"</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"Reader\"</span>\n<span class=\"c1\"># create instance</span>\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">SimpleCommander</span><span class=\"p\">(</span><span class=\"n\">mode</span><span class=\"o\">=</span><span class=\"n\">mode</span><span class=\"p\">,</span> <span class=\"n\">intro</span><span class=\"o\">=</span><span class=\"s2\">\"This is example\"</span><span class=\"p\">,</span> <span class=\"n\">prompt</span><span class=\"o\">=</span><span class=\"s2\">\"example&gt; \"</span><span class=\"p\">)</span>\n<span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>  <span class=\"c1\"># prepaire instance</span>\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">run_forever</span><span class=\"p\">()</span>  <span class=\"c1\"># our cmd will run automatilly from this moment</span>\n<span class=\"k\">except</span> <span class=\"ne\">KeyboardInterrupt</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">()</span>\n</pre>\n<p><a href=\"https://github.com/valentinmk/asynccmd/blob/master/examples/simple.py\" rel=\"nofollow\">Link to\nsimple.py</a></p>\n</div>\n<div id=\"general-example\">\n<h4>General example</h4>\n<p>We use our simple example, but add some new staff: * <tt>sleep_n_print</tt>\ncoroutine that will be called from our cli command * <tt>do_sleep</tt> new\nmethod (sleep cli command) that add task to event loop</p>\n<pre><span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">sleep_n_print</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">time_to_sleep</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    This is our simple coroutine.\n    :param time_to_sleep: time to sleep in seconds\n    :return: await sleep for time_to_sleep seconds\n    \"\"\"</span>\n    <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>  <span class=\"c1\"># set correct event loop</span>\n    <span class=\"k\">await</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">time_to_sleep</span><span class=\"p\">))</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Wake up! I was slept for </span><span class=\"si\">{0}</span><span class=\"s2\">s\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span><span class=\"n\">time_to_sleep</span><span class=\"p\">))</span>\n</pre>\n<pre><span class=\"k\">def</span> <span class=\"nf\">do_sleep</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Our example cmd-command-method for sleep. sleep &lt;arg&gt;\n    :param arg: contain args that go after command\n    :return: None\n    \"\"\"</span>\n    <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">sleep_n_print</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">))</span>\n</pre>\n<p><a href=\"https://github.com/valentinmk/asynccmd/blob/master/examples/main.py\" rel=\"nofollow\">Link to\nmain.py</a></p>\n<p>Run our cli and make <tt>sleep 10</tt> command 3 times. Now we have 3\n<tt>sleep_n_print</tt> async tasks in our event loop. If you use <tt>tasks</tt>\ncommand, you see something like that.</p>\n<pre>example&gt;tasks\n&lt;Task pending <span class=\"nv\">coro</span><span class=\"o\">=</span>&lt;sleep_n_print<span class=\"o\">()</span> running at asynccmd<span class=\"se\">\\e</span>xamples<span class=\"se\">\\m</span>ain.py:13&gt; <span class=\"nv\">wait_for</span><span class=\"o\">=</span>&lt;Future pending <span class=\"nv\">cb</span><span class=\"o\">=[</span>Task._wakeup<span class=\"o\">()]</span>&gt;&gt;\n&lt;Task pending <span class=\"nv\">coro</span><span class=\"o\">=</span>&lt;Cmd._read_line<span class=\"o\">()</span> running at C:<span class=\"se\">\\P</span>rogram Files<span class=\"se\">\\P</span>ython35<span class=\"se\">\\l</span>ib<span class=\"se\">\\s</span>ite-packages<span class=\"se\">\\a</span>synccmd<span class=\"se\">\\a</span>synccmd.py:141&gt;&gt;\n&lt;Task pending <span class=\"nv\">coro</span><span class=\"o\">=</span>&lt;sleep_n_print<span class=\"o\">()</span> running at asynccmd<span class=\"se\">\\e</span>xamples<span class=\"se\">\\m</span>ain.py:13&gt; <span class=\"nv\">wait_for</span><span class=\"o\">=</span>&lt;Future pending <span class=\"nv\">cb</span><span class=\"o\">=[</span>Task._wakeup<span class=\"o\">()]</span>&gt;&gt;\n&lt;Task pending <span class=\"nv\">coro</span><span class=\"o\">=</span>&lt;sleep_n_print<span class=\"o\">()</span> running at asynccmd<span class=\"se\">\\e</span>xamples<span class=\"se\">\\m</span>ain.py:13&gt; <span class=\"nv\">wait_for</span><span class=\"o\">=</span>&lt;Future pending <span class=\"nv\">cb</span><span class=\"o\">=[</span>Task._wakeup<span class=\"o\">()]</span>&gt;&gt;\nexample&gt;\nWake up! I was slept <span class=\"k\">for</span> 10s\nWake up! I was slept <span class=\"k\">for</span> 10s\nWake up! I was slept <span class=\"k\">for</span> 10s\n</pre>\n</div>\n<div id=\"aiohttp-implementation\">\n<h4>Aiohttp implementation</h4>\n<p>This is practical example how to control aiohttp instances. We will\ncreate two cli command <tt>start</tt> and <tt>stop</tt>. This commands get port\nnumber as only one argument. Let\u2019s make some changes for our general\nexample:</p>\n<p>Create class helper that will be do all aiohttp staff for us.</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">AiohttpCmdHelper</span><span class=\"p\">:</span>\n    <span class=\"sd\">\"\"\"\n    Helper class that do all aiohttp start stop manipulation\n    \"\"\"</span>\n    <span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"mi\">8080</span>  <span class=\"c1\"># Default port</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>  <span class=\"c1\"># By default loop is not set</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">loop</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port</span> <span class=\"o\">=</span> <span class=\"n\">port</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">handle</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">request</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Simple handler that answer http request get with port and name\n        \"\"\"</span>\n        <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">request</span><span class=\"o\">.</span><span class=\"n\">match_info</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'name'</span><span class=\"p\">,</span> <span class=\"s2\">\"Anonymous\"</span><span class=\"p\">)</span>\n        <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'Aiohttp server running on </span><span class=\"si\">{0}</span><span class=\"s1\"> port. Hello, </span><span class=\"si\">{1}</span><span class=\"s1\">'</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n            <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">),</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Response</span><span class=\"p\">(</span><span class=\"n\">text</span><span class=\"o\">=</span><span class=\"n\">text</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Start aiohttp web server\n        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span> <span class=\"o\">=</span> <span class=\"n\">web</span><span class=\"o\">.</span><span class=\"n\">Application</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">router</span><span class=\"o\">.</span><span class=\"n\">add_get</span><span class=\"p\">(</span><span class=\"s1\">'/</span><span class=\"si\">{name}</span><span class=\"s1\">'</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handle</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">make_handler</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_server</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"p\">,</span>\n                                         <span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span>\n                                         <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">port</span><span class=\"p\">)</span>\n        <span class=\"c1\"># Event loop is already runing, so we await create server instead</span>\n        <span class=\"c1\"># of run_until_complete</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">srv</span> <span class=\"o\">=</span> <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">f</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"sd\">\"\"\"\n        Stop aiohttp server\n        \"\"\"</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">srv</span><span class=\"o\">.</span><span class=\"n\">wait_closed</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">handler</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">(</span><span class=\"mf\">60.0</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">cleanup</span><span class=\"p\">()</span>\n</pre>\n<p>Now we ready to add <tt>start</tt> and <tt>stop</tt> command to <tt>Commander</tt>.</p>\n<pre><span class=\"c1\"># Add property to store helper objects</span>\n    <span class=\"n\">aiohttp_servers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"c1\"># ...</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">do_start</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Our example cli-command-method for start aiohttp server. start &lt;arg&gt;\n    :param arg: Port number\n    :return: None\n    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">arg</span><span class=\"p\">:</span>  <span class=\"c1\"># we use simple check in our demonstration</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Error port is empty\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">AiohttpCmdHelper</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">))</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aiohttp_servers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">),</span><span class=\"s1\">'server'</span><span class=\"p\">:</span> <span class=\"n\">test</span><span class=\"p\">})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">test</span><span class=\"o\">.</span><span class=\"n\">start</span><span class=\"p\">())</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">do_stop</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">arg</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"\n    Our example cli-command-method for stop aiohttp server. start &lt;arg&gt;\n    :param arg: Port number\n    :return: None\n    \"\"\"</span>\n    <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">arg</span><span class=\"p\">:</span>  <span class=\"c1\"># we use simple check in our demonstration</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Error! Provided port is empty\"</span><span class=\"p\">)</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">aiohttp_servers</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n        <span class=\"k\">for</span> <span class=\"n\">srv</span> <span class=\"ow\">in</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aiohttp_servers</span><span class=\"p\">:</span>\n            <span class=\"k\">if</span> <span class=\"n\">srv</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">]</span> <span class=\"o\">==</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">arg</span><span class=\"p\">):</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">loop</span><span class=\"o\">.</span><span class=\"n\">create_task</span><span class=\"p\">(</span><span class=\"n\">srv</span><span class=\"p\">[</span><span class=\"s1\">'server'</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">stop</span><span class=\"p\">())</span>\n            <span class=\"k\">else</span><span class=\"p\">:</span>\n                <span class=\"n\">aiohttp_servers</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">({</span><span class=\"s1\">'port'</span><span class=\"p\">:</span> <span class=\"n\">srv</span><span class=\"p\">[</span><span class=\"s1\">'port'</span><span class=\"p\">],</span> <span class=\"s1\">'server'</span><span class=\"p\">:</span> <span class=\"n\">srv</span><span class=\"p\">[</span><span class=\"s1\">'server'</span><span class=\"p\">]})</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">aiohttp_servers</span> <span class=\"o\">=</span> <span class=\"n\">aiohttp_servers</span>\n</pre>\n<p>We need to add <tt>asyncio.set_event_loop(loop)</tt> addition to our main\nexample to prevent aiohttp to create its own loop.</p>\n<pre><span class=\"k\">if</span> <span class=\"n\">sys</span><span class=\"o\">.</span><span class=\"n\">platform</span> <span class=\"o\">==</span> <span class=\"s1\">'win32'</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">ProactorEventLoop</span><span class=\"p\">()</span>\n    <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"Run\"</span>\n<span class=\"k\">else</span><span class=\"p\">:</span>\n    <span class=\"n\">loop</span> <span class=\"o\">=</span> <span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">get_event_loop</span><span class=\"p\">()</span>\n    <span class=\"n\">mode</span> <span class=\"o\">=</span> <span class=\"s2\">\"Reader\"</span>\n\n<span class=\"n\">asyncio</span><span class=\"o\">.</span><span class=\"n\">set_event_loop</span><span class=\"p\">(</span><span class=\"n\">loop</span><span class=\"p\">)</span>  <span class=\"c1\"># set our event loop for aiohttp (fix for Win32)</span>\n</pre>\n<p>That\u2019s all. Now we can run multiple aiohttp server from our code.</p>\n<p><a href=\"https://github.com/valentinmk/asynccmd/blob/master/examples/aiohttp_example.py\" rel=\"nofollow\">Link to\naiohttp_example.py</a></p>\n</div>\n</div>\n<div id=\"documentation\">\n<h3>Documentation</h3>\n<p>TBD</p>\n</div>\n<div id=\"contributing\">\n<h3>Contributing</h3>\n<p>Main stream is fork project, commit changes and send pull request.\nContributing to lib you could make in form of feedback, bug reports or\npull requests. CONTRIBUTING.md - TBD.</p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<ul>\n<li>Python &gt;= 3.5</li>\n</ul>\n</div>\n<div id=\"license\">\n<h3>License</h3>\n<p><tt>asynccmd</tt> is offered under the Apache 2 license.</p>\n</div>\n<div id=\"source-code\">\n<h3>Source code</h3>\n<p>The latest developer version is available at\n<a href=\"https://github.com/valentinmk/asynccmd\" rel=\"nofollow\">https://github.com/valentinmk/asynccmd</a></p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2549998, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "29755cece9590a353d1b4f149d03bb8c", "sha256": "33a5d2dc7675f23ed0474f5b5f90f07ab650537aca12bb559b3f672992068986"}, "downloads": -1, "filename": "asynccmd-0.1.0-py3.5.egg", "has_sig": false, "md5_digest": "29755cece9590a353d1b4f149d03bb8c", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 6654, "upload_time": "2016-12-28T13:37:36", "upload_time_iso_8601": "2016-12-28T13:37:36.205883Z", "url": "https://files.pythonhosted.org/packages/7a/95/7f869458ac5bd8455ef788a78a74bdd34854bbbf37ce67648c15e85f1c18/asynccmd-0.1.0-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "982c69a8006e9ac0938b9778b9880af1", "sha256": "610917d602b95a6f53f3055421eeaac6bc1e5151f00c69ca34957acf9b525bb3"}, "downloads": -1, "filename": "asynccmd-0.1.0-py3.6.egg", "has_sig": false, "md5_digest": "982c69a8006e9ac0938b9778b9880af1", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 6557, "upload_time": "2016-12-28T13:37:23", "upload_time_iso_8601": "2016-12-28T13:37:23.888913Z", "url": "https://files.pythonhosted.org/packages/18/8e/19c884a1e7fa00bdf069540fa9a7b100ba8b61bc3559cd5b1409bf7b876e/asynccmd-0.1.0-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "df951b7954d6098e8f4d498ca5d39789", "sha256": "62d591c5973d5876078c014e45e6651c8fee204d7d2b7f5baab7322d10f367c1"}, "downloads": -1, "filename": "asynccmd-0.1.0-py3.7.egg", "has_sig": false, "md5_digest": "df951b7954d6098e8f4d498ca5d39789", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 6575, "upload_time": "2016-12-28T13:37:31", "upload_time_iso_8601": "2016-12-28T13:37:31.249270Z", "url": "https://files.pythonhosted.org/packages/86/0c/0e8f12c235b8c3edf852940393e7df3c1eeb34a5eaf6cd34a04a1a3ca338/asynccmd-0.1.0-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f812abd1401cd32245fb180ed05d6120", "sha256": "2e8c9aceeb85fa7cc51079521275f0cbf9357ecd31903ac44183bd17c60455a6"}, "downloads": -1, "filename": "asynccmd-0.1.0.zip", "has_sig": false, "md5_digest": "f812abd1401cd32245fb180ed05d6120", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4948, "upload_time": "2016-12-23T12:10:17", "upload_time_iso_8601": "2016-12-23T12:10:17.495752Z", "url": "https://files.pythonhosted.org/packages/64/df/688f7d60bd3d54e44a5a2325dc919834d496ed114e156dcce8d4a608ab02/asynccmd-0.1.0.zip", "yanked": false}], "0.2.0": [], "0.2.1": [{"comment_text": "", "digests": {"md5": "25f11459b03433eb0437f769befdf0e0", "sha256": "8d3b731396449852b82c4847e6d9074b84e3a2e9ba80d866ecde069cfbb7c426"}, "downloads": -1, "filename": "asynccmd-0.2.1-py3.5.egg", "has_sig": false, "md5_digest": "25f11459b03433eb0437f769befdf0e0", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 7458, "upload_time": "2016-12-28T17:47:09", "upload_time_iso_8601": "2016-12-28T17:47:09.787544Z", "url": "https://files.pythonhosted.org/packages/8d/2b/d10d15bbefaf899379587076e9e0c12cca6b09584aa8bf3948da142214f2/asynccmd-0.2.1-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "f7a3e5e6e60c1ccb00adcaa3854ab641", "sha256": "44f3f898d49f5f89293a60a428128a8410c2a31421dd8069635df22b2774fe1f"}, "downloads": -1, "filename": "asynccmd-0.2.1-py3.6.egg", "has_sig": false, "md5_digest": "f7a3e5e6e60c1ccb00adcaa3854ab641", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 7359, "upload_time": "2016-12-28T17:47:12", "upload_time_iso_8601": "2016-12-28T17:47:12.542053Z", "url": "https://files.pythonhosted.org/packages/a5/ed/8e8fe1980db920b879d2be7d40ae6e37d88e7bcbdecc72c699ab0e75a030/asynccmd-0.2.1-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c3de8b5ac9392efe264afd853a1978d2", "sha256": "941a6d699b2e0f66ff062a95d587a8986399b789bb78a376b85ce29557d13a7f"}, "downloads": -1, "filename": "asynccmd-0.2.1-py3.7.egg", "has_sig": false, "md5_digest": "c3de8b5ac9392efe264afd853a1978d2", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 7379, "upload_time": "2016-12-28T17:47:14", "upload_time_iso_8601": "2016-12-28T17:47:14.962623Z", "url": "https://files.pythonhosted.org/packages/d0/6a/663cf53880a2db56fe374debc2431f076e40fd77005b785f03c076d4d1c2/asynccmd-0.2.1-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9c670490e147b570d52368e1272fc7ca", "sha256": "770f3b44734ee7404d06fa0e22ec2a47071b5e1cbc5aefc7c68866c222fd3760"}, "downloads": -1, "filename": "asynccmd-0.2.1.tar.gz", "has_sig": false, "md5_digest": "9c670490e147b570d52368e1272fc7ca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4134, "upload_time": "2016-12-28T17:47:11", "upload_time_iso_8601": "2016-12-28T17:47:11.497582Z", "url": "https://files.pythonhosted.org/packages/58/c6/a4da38aec47ae34546093b5e3e92aada2407bc96674f1df3ef4b4719a1da/asynccmd-0.2.1.tar.gz", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "d0b91dce05dabdc9e223e78b34251a97", "sha256": "a6244a2fc1c8857574a2946fd9082a594f155199d30ec8b9b25b3b86e69085d0"}, "downloads": -1, "filename": "asynccmd-0.2.3-py3.5.egg", "has_sig": false, "md5_digest": "d0b91dce05dabdc9e223e78b34251a97", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 9639, "upload_time": "2017-01-02T15:19:56", "upload_time_iso_8601": "2017-01-02T15:19:56.339289Z", "url": "https://files.pythonhosted.org/packages/8d/99/7dfbce8d9395d312c844e88442a0261e4390880e37cadda5bd1e6e66bfa6/asynccmd-0.2.3-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "82616bd80bb81c3f700850ce7c422c22", "sha256": "eb06d312c64f95cc09ac8df0a6bec6202d0ea598d60f305d600f3032c7b64c8e"}, "downloads": -1, "filename": "asynccmd-0.2.3-py3.6.egg", "has_sig": false, "md5_digest": "82616bd80bb81c3f700850ce7c422c22", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 9543, "upload_time": "2017-01-02T15:20:04", "upload_time_iso_8601": "2017-01-02T15:20:04.093184Z", "url": "https://files.pythonhosted.org/packages/e3/76/ccfb6013425271a2cd41994a82003e9d3f4e56f9b70259d7d612ef8a7772/asynccmd-0.2.3-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "c50fc996d6d1d1490056f2032f92ea0f", "sha256": "4aa187e8be363451bf07968888461d2be08fd53630ddb72f0a81dc53b9102fa0"}, "downloads": -1, "filename": "asynccmd-0.2.3-py3.7.egg", "has_sig": false, "md5_digest": "c50fc996d6d1d1490056f2032f92ea0f", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 9562, "upload_time": "2017-01-02T15:20:27", "upload_time_iso_8601": "2017-01-02T15:20:27.781632Z", "url": "https://files.pythonhosted.org/packages/6e/98/ceebc2e3bb1b71d5512d94dce024aff7899f974e1533e8579536c9465b01/asynccmd-0.2.3-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "d0ed07aec6e9677de8138dbc13d4954f", "sha256": "efb50ba7c12378b5b74863d7f13a1d48ca94ae6dbc8cfa75ce5d60eb028e31fa"}, "downloads": -1, "filename": "asynccmd-0.2.3.tar.gz", "has_sig": false, "md5_digest": "d0ed07aec6e9677de8138dbc13d4954f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7046, "upload_time": "2017-01-02T15:19:58", "upload_time_iso_8601": "2017-01-02T15:19:58.125775Z", "url": "https://files.pythonhosted.org/packages/5e/ff/9795e6187e56a6a86a2ec065bae48b5127822bbc4cb34a56e129a413dac7/asynccmd-0.2.3.tar.gz", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "88451bb45fe049c774b5de2f2b40543c", "sha256": "b59d59bd4fdc4feb46b886ec8031f0a968145ff640fde27909da138b7974e13e"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.5.egg", "has_sig": false, "md5_digest": "88451bb45fe049c774b5de2f2b40543c", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 9632, "upload_time": "2017-01-02T15:39:35", "upload_time_iso_8601": "2017-01-02T15:39:35.478656Z", "url": "https://files.pythonhosted.org/packages/ad/b7/14825bf430c0e333d44137bb8a07aa2ff220e8a3734632358ddb925cc33b/asynccmd-0.2.4-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7085296137ba88997210c269dfba818", "sha256": "1661e295cddd666f532c10f2d1ad99fcaaa6258e50a48a15ea7dfce7bd10065c"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.6.egg", "has_sig": false, "md5_digest": "a7085296137ba88997210c269dfba818", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 9534, "upload_time": "2017-01-02T15:39:33", "upload_time_iso_8601": "2017-01-02T15:39:33.964472Z", "url": "https://files.pythonhosted.org/packages/ec/4d/a04186e8145630124fbb6af5c50e10ae8f0f69d2658b546929b51027a28b/asynccmd-0.2.4-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "550942b3655092348dda88e18c8b2a44", "sha256": "34855d68f0c069bacf810586ef4e87764ca97bdb3c72a1961db5528aaf608070"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.7.egg", "has_sig": false, "md5_digest": "550942b3655092348dda88e18c8b2a44", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 9554, "upload_time": "2017-01-02T15:39:39", "upload_time_iso_8601": "2017-01-02T15:39:39.657504Z", "url": "https://files.pythonhosted.org/packages/50/81/02c9ee0ad2d0db5564c4b051c2d7531dc57cbb9b8be472c29b0c4b55812a/asynccmd-0.2.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9362ab63b4260682007631e20aac239f", "sha256": "bb4d0a91e063b51e5c61c79e2d551485f83c5cbfa85cd868814efe6fa494b8b2"}, "downloads": -1, "filename": "asynccmd-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9362ab63b4260682007631e20aac239f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7043, "upload_time": "2017-01-02T15:39:35", "upload_time_iso_8601": "2017-01-02T15:39:35.646289Z", "url": "https://files.pythonhosted.org/packages/e2/cc/9c1d38d4e8f77aa4b0fc6350dc28fb045249cbc540558255dcf9f0c880f4/asynccmd-0.2.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "88451bb45fe049c774b5de2f2b40543c", "sha256": "b59d59bd4fdc4feb46b886ec8031f0a968145ff640fde27909da138b7974e13e"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.5.egg", "has_sig": false, "md5_digest": "88451bb45fe049c774b5de2f2b40543c", "packagetype": "bdist_egg", "python_version": "3.5", "requires_python": null, "size": 9632, "upload_time": "2017-01-02T15:39:35", "upload_time_iso_8601": "2017-01-02T15:39:35.478656Z", "url": "https://files.pythonhosted.org/packages/ad/b7/14825bf430c0e333d44137bb8a07aa2ff220e8a3734632358ddb925cc33b/asynccmd-0.2.4-py3.5.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7085296137ba88997210c269dfba818", "sha256": "1661e295cddd666f532c10f2d1ad99fcaaa6258e50a48a15ea7dfce7bd10065c"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.6.egg", "has_sig": false, "md5_digest": "a7085296137ba88997210c269dfba818", "packagetype": "bdist_egg", "python_version": "3.6", "requires_python": null, "size": 9534, "upload_time": "2017-01-02T15:39:33", "upload_time_iso_8601": "2017-01-02T15:39:33.964472Z", "url": "https://files.pythonhosted.org/packages/ec/4d/a04186e8145630124fbb6af5c50e10ae8f0f69d2658b546929b51027a28b/asynccmd-0.2.4-py3.6.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "550942b3655092348dda88e18c8b2a44", "sha256": "34855d68f0c069bacf810586ef4e87764ca97bdb3c72a1961db5528aaf608070"}, "downloads": -1, "filename": "asynccmd-0.2.4-py3.7.egg", "has_sig": false, "md5_digest": "550942b3655092348dda88e18c8b2a44", "packagetype": "bdist_egg", "python_version": "3.7", "requires_python": null, "size": 9554, "upload_time": "2017-01-02T15:39:39", "upload_time_iso_8601": "2017-01-02T15:39:39.657504Z", "url": "https://files.pythonhosted.org/packages/50/81/02c9ee0ad2d0db5564c4b051c2d7531dc57cbb9b8be472c29b0c4b55812a/asynccmd-0.2.4-py3.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "9362ab63b4260682007631e20aac239f", "sha256": "bb4d0a91e063b51e5c61c79e2d551485f83c5cbfa85cd868814efe6fa494b8b2"}, "downloads": -1, "filename": "asynccmd-0.2.4.tar.gz", "has_sig": false, "md5_digest": "9362ab63b4260682007631e20aac239f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7043, "upload_time": "2017-01-02T15:39:35", "upload_time_iso_8601": "2017-01-02T15:39:35.646289Z", "url": "https://files.pythonhosted.org/packages/e2/cc/9c1d38d4e8f77aa4b0fc6350dc28fb045249cbc540558255dcf9f0c880f4/asynccmd-0.2.4.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:45 2020"}