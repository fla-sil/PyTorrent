{"info": {"author": "Catstyle", "author_email": "catstyle.lee@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Topic :: Software Development :: Build Tools"], "description": "yasm\n==============\n\nstate machine for humans\n\nThere are two types of developers in this world: those who love state\nmachines and those who *will* eventually.\n\nI fall in the first camp. I think it is really important to have a\ndeclarative way to define the states of an object. That\u2019s why I\ndeveloped ``yasm``.\n\nInstall\n-------\n\n.. code:: bash\n\n    pip install yasm\n\nBasic Usage\n-----------\n\n.. code:: python\n\n    from collections import deque\n    import operator\n    import six\n    from string import whitespace, digits\n\n    from yasm import Event, state_machine\n    from yasm.utils import dispatch\n\n\n    @state_machine('calculator')\n    class Calculator(object):\n\n        operators = {\n            '+': operator.add,\n            '-': operator.sub,\n            '*': operator.mul,\n        }\n        if six.PY3:\n            operators['/'] = operator.truediv\n        else:\n            operators['/'] = operator.div\n\n        def __init__(self):\n            self.stack = deque()\n            self.result = None\n\n        def reset(self):\n            self.stack.clear()\n            self.result = None\n            self.machine.reinit_instance(self)\n\n        def calculate(self, string):\n            self.reset()\n            for char in string:\n                dispatch(self, Event('parse', input=char))\n            return self.result\n\n        def start_building_number(self, state, event, instance):\n            digit = event.input\n            self.stack.append(int(digit))\n\n        def build_number(self, state, event, instance):\n            digit = event.input\n            number = str(self.stack.pop())\n            number += digit\n            self.stack.append(int(number))\n\n        def do_operation(self, state, event, instance):\n            operation = event.input\n            y = self.stack.pop()\n            x = self.stack.pop()\n            self.stack.append(self.operators[operation](float(x), float(y)))\n\n        def do_equal(self, state, event, instance):\n            number = self.stack.pop()\n            self.result = number\n\n\n    def is_digit(state, event, instance):\n        return event.input in digits\n\n\n    sm = Calculator.machine\n    sm.add_states(['initial', 'number', 'result'], initial='initial')\n\n    sm.add_transitions([\n        {'from_state': 'initial', 'to_state': 'number', 'event': 'parse',\n         'conditions': [is_digit], 'before': 'start_building_number'},\n        {'from_state': 'number', 'to_state': 'number', 'event': 'parse',\n         'conditions': [is_digit], 'before': 'build_number'},\n        {'from_state': 'number', 'to_state': 'initial', 'event': 'parse',\n         'conditions': [lambda state, evt, ins: evt.input in whitespace]},\n        {'from_state': 'initial', 'to_state': 'initial', 'event': 'parse',\n         'conditions': [lambda state, evt, ins: evt.input in '+-*/'],\n         'before': 'do_operation'},\n        {'from_state': 'initial', 'to_state': 'result', 'event': 'parse',\n         'conditions': [lambda state, evt, ins: evt.input == '='],\n         'before': 'do_equal'},\n    ])\n\n\n     calc = Calculator()\n     for syntax, value in ((' 167 3 2 2 * * * 1 - =', 2003),\n                           ('    167 3 2 2 * * * 1 - 2 / =', 1001.5),\n                           ('    3   5 6 +  * =', 33),\n                           ('        3    4       +     =', 7),\n                           ('2 4 / 5 6 - * =', -0.5),):\n         result = calc.calculate(syntax)\n         assert result == value, (syntax, result, value)\n         calc.reset()\n\n\nThank you\n---------\n\nto `aasm`_ and ruby\u2019s `state\\_machine`_ and jtushman's `jtushman/state\\_machine`_ and\nall other state machines that I loved before\n\n.. _aasm: https://github.com/aasm/aasm\n.. _state\\_machine: https://github.com/pluginaweek/state_machine\n.. _jtushman/state\\_machine: https://github.com/jtushman/state_machine\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://github.com/Catstyle/yasm", "keywords": "state_machine", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "yasm", "package_url": "https://pypi.org/project/yasm/", "platform": "", "project_url": "https://pypi.org/project/yasm/", "project_urls": {"Homepage": "http://github.com/Catstyle/yasm"}, "release_url": "https://pypi.org/project/yasm/0.1.0a1/", "requires_dist": null, "requires_python": "", "summary": "Python State Machines for Humans", "version": "0.1.0a1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>state machine for humans</p>\n<p>There are two types of developers in this world: those who love state\nmachines and those who <em>will</em> eventually.</p>\n<p>I fall in the first camp. I think it is really important to have a\ndeclarative way to define the states of an object. That\u2019s why I\ndeveloped <tt>yasm</tt>.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<pre>pip install yasm\n</pre>\n</div>\n<div id=\"basic-usage\">\n<h2>Basic Usage</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">collections</span> <span class=\"kn\">import</span> <span class=\"n\">deque</span>\n<span class=\"kn\">import</span> <span class=\"nn\">operator</span>\n<span class=\"kn\">import</span> <span class=\"nn\">six</span>\n<span class=\"kn\">from</span> <span class=\"nn\">string</span> <span class=\"kn\">import</span> <span class=\"n\">whitespace</span><span class=\"p\">,</span> <span class=\"n\">digits</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">yasm</span> <span class=\"kn\">import</span> <span class=\"n\">Event</span><span class=\"p\">,</span> <span class=\"n\">state_machine</span>\n<span class=\"kn\">from</span> <span class=\"nn\">yasm.utils</span> <span class=\"kn\">import</span> <span class=\"n\">dispatch</span>\n\n\n<span class=\"nd\">@state_machine</span><span class=\"p\">(</span><span class=\"s1\">'calculator'</span><span class=\"p\">)</span>\n<span class=\"k\">class</span> <span class=\"nc\">Calculator</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"n\">operators</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s1\">'+'</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">add</span><span class=\"p\">,</span>\n        <span class=\"s1\">'-'</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">sub</span><span class=\"p\">,</span>\n        <span class=\"s1\">'*'</span><span class=\"p\">:</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">mul</span><span class=\"p\">,</span>\n    <span class=\"p\">}</span>\n    <span class=\"k\">if</span> <span class=\"n\">six</span><span class=\"o\">.</span><span class=\"n\">PY3</span><span class=\"p\">:</span>\n        <span class=\"n\">operators</span><span class=\"p\">[</span><span class=\"s1\">'/'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">truediv</span>\n    <span class=\"k\">else</span><span class=\"p\">:</span>\n        <span class=\"n\">operators</span><span class=\"p\">[</span><span class=\"s1\">'/'</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">operator</span><span class=\"o\">.</span><span class=\"n\">div</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span> <span class=\"o\">=</span> <span class=\"n\">deque</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">reset</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">clear</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">machine</span><span class=\"o\">.</span><span class=\"n\">reinit_instance</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">calculate</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">string</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n        <span class=\"k\">for</span> <span class=\"n\">char</span> <span class=\"ow\">in</span> <span class=\"n\">string</span><span class=\"p\">:</span>\n            <span class=\"n\">dispatch</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">Event</span><span class=\"p\">(</span><span class=\"s1\">'parse'</span><span class=\"p\">,</span> <span class=\"nb\">input</span><span class=\"o\">=</span><span class=\"n\">char</span><span class=\"p\">))</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">start_building_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">input</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">digit</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">build_number</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"n\">digit</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">input</span>\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">())</span>\n        <span class=\"n\">number</span> <span class=\"o\">+=</span> <span class=\"n\">digit</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">number</span><span class=\"p\">))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_operation</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"n\">operation</span> <span class=\"o\">=</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">input</span>\n        <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"n\">x</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">operators</span><span class=\"p\">[</span><span class=\"n\">operation</span><span class=\"p\">](</span><span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">),</span> <span class=\"nb\">float</span><span class=\"p\">(</span><span class=\"n\">y</span><span class=\"p\">)))</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">do_equal</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n        <span class=\"n\">number</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">stack</span><span class=\"o\">.</span><span class=\"n\">pop</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">number</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">is_digit</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">event</span><span class=\"p\">,</span> <span class=\"n\">instance</span><span class=\"p\">):</span>\n    <span class=\"k\">return</span> <span class=\"n\">event</span><span class=\"o\">.</span><span class=\"n\">input</span> <span class=\"ow\">in</span> <span class=\"n\">digits</span>\n\n\n<span class=\"n\">sm</span> <span class=\"o\">=</span> <span class=\"n\">Calculator</span><span class=\"o\">.</span><span class=\"n\">machine</span>\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">add_states</span><span class=\"p\">([</span><span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"s1\">'result'</span><span class=\"p\">],</span> <span class=\"n\">initial</span><span class=\"o\">=</span><span class=\"s1\">'initial'</span><span class=\"p\">)</span>\n\n<span class=\"n\">sm</span><span class=\"o\">.</span><span class=\"n\">add_transitions</span><span class=\"p\">([</span>\n    <span class=\"p\">{</span><span class=\"s1\">'from_state'</span><span class=\"p\">:</span> <span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'to_state'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"s1\">'event'</span><span class=\"p\">:</span> <span class=\"s1\">'parse'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">is_digit</span><span class=\"p\">],</span> <span class=\"s1\">'before'</span><span class=\"p\">:</span> <span class=\"s1\">'start_building_number'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'from_state'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"s1\">'to_state'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"s1\">'event'</span><span class=\"p\">:</span> <span class=\"s1\">'parse'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">is_digit</span><span class=\"p\">],</span> <span class=\"s1\">'before'</span><span class=\"p\">:</span> <span class=\"s1\">'build_number'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'from_state'</span><span class=\"p\">:</span> <span class=\"s1\">'number'</span><span class=\"p\">,</span> <span class=\"s1\">'to_state'</span><span class=\"p\">:</span> <span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'event'</span><span class=\"p\">:</span> <span class=\"s1\">'parse'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">evt</span><span class=\"p\">,</span> <span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">evt</span><span class=\"o\">.</span><span class=\"n\">input</span> <span class=\"ow\">in</span> <span class=\"n\">whitespace</span><span class=\"p\">]},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'from_state'</span><span class=\"p\">:</span> <span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'to_state'</span><span class=\"p\">:</span> <span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'event'</span><span class=\"p\">:</span> <span class=\"s1\">'parse'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">evt</span><span class=\"p\">,</span> <span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">evt</span><span class=\"o\">.</span><span class=\"n\">input</span> <span class=\"ow\">in</span> <span class=\"s1\">'+-*/'</span><span class=\"p\">],</span>\n     <span class=\"s1\">'before'</span><span class=\"p\">:</span> <span class=\"s1\">'do_operation'</span><span class=\"p\">},</span>\n    <span class=\"p\">{</span><span class=\"s1\">'from_state'</span><span class=\"p\">:</span> <span class=\"s1\">'initial'</span><span class=\"p\">,</span> <span class=\"s1\">'to_state'</span><span class=\"p\">:</span> <span class=\"s1\">'result'</span><span class=\"p\">,</span> <span class=\"s1\">'event'</span><span class=\"p\">:</span> <span class=\"s1\">'parse'</span><span class=\"p\">,</span>\n     <span class=\"s1\">'conditions'</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"k\">lambda</span> <span class=\"n\">state</span><span class=\"p\">,</span> <span class=\"n\">evt</span><span class=\"p\">,</span> <span class=\"n\">ins</span><span class=\"p\">:</span> <span class=\"n\">evt</span><span class=\"o\">.</span><span class=\"n\">input</span> <span class=\"o\">==</span> <span class=\"s1\">'='</span><span class=\"p\">],</span>\n     <span class=\"s1\">'before'</span><span class=\"p\">:</span> <span class=\"s1\">'do_equal'</span><span class=\"p\">},</span>\n<span class=\"p\">])</span>\n\n\n <span class=\"n\">calc</span> <span class=\"o\">=</span> <span class=\"n\">Calculator</span><span class=\"p\">()</span>\n <span class=\"k\">for</span> <span class=\"n\">syntax</span><span class=\"p\">,</span> <span class=\"n\">value</span> <span class=\"ow\">in</span> <span class=\"p\">((</span><span class=\"s1\">' 167 3 2 2 * * * 1 - ='</span><span class=\"p\">,</span> <span class=\"mi\">2003</span><span class=\"p\">),</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'    167 3 2 2 * * * 1 - 2 / ='</span><span class=\"p\">,</span> <span class=\"mf\">1001.5</span><span class=\"p\">),</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'    3   5 6 +  * ='</span><span class=\"p\">,</span> <span class=\"mi\">33</span><span class=\"p\">),</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'        3    4       +     ='</span><span class=\"p\">,</span> <span class=\"mi\">7</span><span class=\"p\">),</span>\n                       <span class=\"p\">(</span><span class=\"s1\">'2 4 / 5 6 - * ='</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">0.5</span><span class=\"p\">),):</span>\n     <span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">calc</span><span class=\"o\">.</span><span class=\"n\">calculate</span><span class=\"p\">(</span><span class=\"n\">syntax</span><span class=\"p\">)</span>\n     <span class=\"k\">assert</span> <span class=\"n\">result</span> <span class=\"o\">==</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"n\">syntax</span><span class=\"p\">,</span> <span class=\"n\">result</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">)</span>\n     <span class=\"n\">calc</span><span class=\"o\">.</span><span class=\"n\">reset</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"thank-you\">\n<h2>Thank you</h2>\n<p>to <a href=\"https://github.com/aasm/aasm\" rel=\"nofollow\">aasm</a> and ruby\u2019s <a href=\"https://github.com/pluginaweek/state_machine\" rel=\"nofollow\">state_machine</a> and jtushman\u2019s <a href=\"https://github.com/jtushman/state_machine\" rel=\"nofollow\">jtushman/state_machine</a> and\nall other state machines that I loved before</p>\n</div>\n\n          </div>"}, "last_serial": 4244011, "releases": {"0.1.0a1": [{"comment_text": "", "digests": {"md5": "8d61c33752e5f9844fda039ba9098437", "sha256": "268aaee7a0e35da90183687c8393a41cba6d2bccfaecd37905386ede9e81976c"}, "downloads": -1, "filename": "yasm-0.1.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8d61c33752e5f9844fda039ba9098437", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13648, "upload_time": "2018-09-06T08:50:19", "upload_time_iso_8601": "2018-09-06T08:50:19.135211Z", "url": "https://files.pythonhosted.org/packages/e3/a2/3a9e6b11dad093dcd0232b565b06fefa97e8c40bf7b834bb123dd989dc46/yasm-0.1.0a1-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8d61c33752e5f9844fda039ba9098437", "sha256": "268aaee7a0e35da90183687c8393a41cba6d2bccfaecd37905386ede9e81976c"}, "downloads": -1, "filename": "yasm-0.1.0a1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8d61c33752e5f9844fda039ba9098437", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": null, "size": 13648, "upload_time": "2018-09-06T08:50:19", "upload_time_iso_8601": "2018-09-06T08:50:19.135211Z", "url": "https://files.pythonhosted.org/packages/e3/a2/3a9e6b11dad093dcd0232b565b06fefa97e8c40bf7b834bb123dd989dc46/yasm-0.1.0a1-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:22:46 2020"}