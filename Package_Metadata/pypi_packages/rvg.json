{"info": {"author": "Sotiris Niarchos", "author_email": "sot.niarchos@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "Intended Audience :: Other Audience", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Utilities"], "description": "# &#127922; rvg &#127922; - Random Values Generator\n![Testing](https://github.com/zehanort/rvg/workflows/Testing/badge.svg)\n[![codecov](https://codecov.io/gh/zehanort/rvg/branch/dev/graph/badge.svg)](https://codecov.io/gh/zehanort/rvg)\n[![CodeFactor](https://www.codefactor.io/repository/github/zehanort/rvg/badge)](https://www.codefactor.io/repository/github/zehanort/rvg)\n![PyPI release](https://img.shields.io/pypi/v/rvg?label=PyPI%20release)\n\n## Description\n\n`rvg` is a Python 3 package utility to create random values of any Python 3 data type.\n\nIts main purpose is to help in applications where reliable -in terms of type safety- random values are needed (e.g. statistics, machine learning, general testing etc), and in specific layouts (e.g. \"I want a `numpy` structured array of random pairs of ints and floats and I want it now\").\n\n## Authors\n[Sotiris Niarchos](https://github.com/zehanort) and [George Papadopoulos](https://github.com/gepapado)\n\n## Installation\n\nYou can either:\n- download the source code from the [releases page](https://github.com/zehanort/rvg/releases) or clone the repo (the `master` branch will always mirror the latest release)\n- use `pip`:\n```\npip install rvg\n```\n\n## Current Status\n\n### Alpha release\n\nFor the time being, only `numpy` types are supported. More specifically:\n- `numpy` scalar data types\n- `numpy` arrays of scalar data types\n- `numpy` arrays of structured data types\n\nAfter the alpha release, more features will be implemented, focusing mainly on Python 3 native types.\n\n## Usage\n\nRight now, `rvg` provides 2 interafaces for random values generation through the `NumPyRVG` class:\n1. Create a generator of a *certain data type*\n2. Create a generator with *specific numerical limits*\nA demonstration follows:\n\n```Python\nfrom rvg import NumPyRVG\nimport numpy as np\n\n# Interface 1\nranduint = NumPyRVG(dtype=np.uint16)\n\n# Interface 2\nrandsmall = NumPyRVG(limit=10) # same as limits=(-10, 10)\nrandbig = NumPyRVG(limits=(1e10, 1e100))\n```\n\nThe functionalities of `NumPyRVG` include the generation of:\n\n- `numpy` scalar data types:\n\n```Python console\n>>> randsmall(np.uint8)\n8\n>>> randbig(np.double)\n1.9296971162995923e+99\n>>> res = [randsmall(t) for t in [np.int8, np.uint16, np.float32, np.double]]\n>>> res\n[7, 1, 3.0503626, 3.759943941132951]\n>>> list(map(type, res))\n[<class 'numpy.int8'>, <class 'numpy.uint16'>, <class 'numpy.float32'>, <class 'numpy.float64'>]\n```\n\n- `numpy` array data types from scalar types:\n\n```Python console\n>>> randuint((50, 100), shape=3)\narray([79, 81, 85], dtype=uint16)\n>>> randsmall(np.float16, shape=(4, 2))\narray([[-7.23 , -9.31 ],\n       [-4.97 , -6.06 ],\n       [-5.19 , -3.344],\n       [-6.586, -3.133]], dtype=float16)\n```\n\n- `numpy` structured array data types (structured datatypes can be nested). Limits and shapes can be given in the form of a dictionary, describing all limits and/or shapes of each field of each level of the structured data type. An example follows:\n\n```Python\n#  Consider the struct definition below, in C:\n##############################################\n#  typedef struct knode {\n#      int location;\n#      int indices [3];\n#      int  keys [3];\n#      bool is_leaf;\n#      int num_keys;\n#  } knode;\n##############################################\n\nimport numpy as np\nfrom rvg import NumPyRVG\n\nknode = np.dtype([\n    ('location', int),\n    ('indices', (int, 3)),\n    ('keys', (int, 3)),\n    ('is_leaf', int),\n    ('num_keys', int)\n])\n\nknode_params = {\n    'location'  : (0, 10),\n    'indices'   : 42,\n    'keys'      : 117,\n    'is_leaf'   : (0, 2),\n    'num_keys'  : (0, 256)\n}\n\nrandom_knode = NumPyRVG(dtype=knode)\nknodes_array = random_knode(knode_params, 5)\nprint(knodes_array)\n\n```\nThe output of the above script is a nested structured `numpy` array consisting of 5 `knode` structs, randomly initialized!\n\n```\n[(0, [-18, -11,  34], [  89,   35,  -57], 1, 189)\n (6, [-35,   0,   4], [ -56,  -65,   26], 1, 217)\n (4, [-29,  40,  37], [  93, -116,   91], 0,  38)\n (2, [-28, -42, -36], [-101,    0,  -43], 0,  82)\n (0, [-14, -19, -13], [ -98,  -46,  -78], 1, 238)]\n```\nIf the script was run in an interpreter, you could inspect its type as well:\n\n```Python console\n>>> knodes_array\narray([(0, [-18, -11,  34], [  89,   35,  -57], 1, 189),\n       (6, [-35,   0,   4], [ -56,  -65,   26], 1, 217),\n       (4, [-29,  40,  37], [  93, -116,   91], 0,  38),\n       (2, [-28, -42, -36], [-101,    0,  -43], 0,  82),\n       (0, [-14, -19, -13], [ -98,  -46,  -78], 1, 238)],\n      dtype=[('location', '<i8'), ('indices', '<i8', (3,)), ('keys', '<i8', (3,)), ('is_leaf', '<i8'), ('num_keys', '<i8')])\n```\nThe feature of nesting is not limited in arrays; you can create data types that are as complex as you want and/or need! See the relative [test](https://github.com/zehanort/rvg/blob/master/tests/test_NumPyRVG_class_with_types.py) as an example of struct nesting.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/zehanort/rvg/releases", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/zehanort/rvg", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "rvg", "package_url": "https://pypi.org/project/rvg/", "platform": "", "project_url": "https://pypi.org/project/rvg/", "project_urls": {"Download": "https://github.com/zehanort/rvg/releases", "Homepage": "https://github.com/zehanort/rvg"}, "release_url": "https://pypi.org/project/rvg/0.1.11/", "requires_dist": ["numpy"], "requires_python": ">=3.5", "summary": "random values generator", "version": "0.1.11", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>\ud83c\udfb2 rvg \ud83c\udfb2 - Random Values Generator</h1>\n<p><img alt=\"Testing\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8d56e056a40a6b3d82a134cdc8e221b82b3da407/68747470733a2f2f6769746875622e636f6d2f7a6568616e6f72742f7276672f776f726b666c6f77732f54657374696e672f62616467652e737667\">\n<a href=\"https://codecov.io/gh/zehanort/rvg\" rel=\"nofollow\"><img alt=\"codecov\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0ea6250a49bb46f39aa70b2af509663e57e994f4/68747470733a2f2f636f6465636f762e696f2f67682f7a6568616e6f72742f7276672f6272616e63682f6465762f67726170682f62616467652e737667\"></a>\n<a href=\"https://www.codefactor.io/repository/github/zehanort/rvg\" rel=\"nofollow\"><img alt=\"CodeFactor\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f2c60511b9f7b50aa94969ba4ba7a5a0a39f1564/68747470733a2f2f7777772e636f6465666163746f722e696f2f7265706f7369746f72792f6769746875622f7a6568616e6f72742f7276672f6261646765\"></a>\n<img alt=\"PyPI release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/93d2c6b124fa6673c08ad3a650956676876ac84f/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7276673f6c6162656c3d5079504925323072656c65617365\"></p>\n<h2>Description</h2>\n<p><code>rvg</code> is a Python 3 package utility to create random values of any Python 3 data type.</p>\n<p>Its main purpose is to help in applications where reliable -in terms of type safety- random values are needed (e.g. statistics, machine learning, general testing etc), and in specific layouts (e.g. \"I want a <code>numpy</code> structured array of random pairs of ints and floats and I want it now\").</p>\n<h2>Authors</h2>\n<p><a href=\"https://github.com/zehanort\" rel=\"nofollow\">Sotiris Niarchos</a> and <a href=\"https://github.com/gepapado\" rel=\"nofollow\">George Papadopoulos</a></p>\n<h2>Installation</h2>\n<p>You can either:</p>\n<ul>\n<li>download the source code from the <a href=\"https://github.com/zehanort/rvg/releases\" rel=\"nofollow\">releases page</a> or clone the repo (the <code>master</code> branch will always mirror the latest release)</li>\n<li>use <code>pip</code>:</li>\n</ul>\n<pre><code>pip install rvg\n</code></pre>\n<h2>Current Status</h2>\n<h3>Alpha release</h3>\n<p>For the time being, only <code>numpy</code> types are supported. More specifically:</p>\n<ul>\n<li><code>numpy</code> scalar data types</li>\n<li><code>numpy</code> arrays of scalar data types</li>\n<li><code>numpy</code> arrays of structured data types</li>\n</ul>\n<p>After the alpha release, more features will be implemented, focusing mainly on Python 3 native types.</p>\n<h2>Usage</h2>\n<p>Right now, <code>rvg</code> provides 2 interafaces for random values generation through the <code>NumPyRVG</code> class:</p>\n<ol>\n<li>Create a generator of a <em>certain data type</em></li>\n<li>Create a generator with <em>specific numerical limits</em>\nA demonstration follows:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">rvg</span> <span class=\"kn\">import</span> <span class=\"n\">NumPyRVG</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n\n<span class=\"c1\"># Interface 1</span>\n<span class=\"n\">randuint</span> <span class=\"o\">=</span> <span class=\"n\">NumPyRVG</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint16</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Interface 2</span>\n<span class=\"n\">randsmall</span> <span class=\"o\">=</span> <span class=\"n\">NumPyRVG</span><span class=\"p\">(</span><span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span> <span class=\"c1\"># same as limits=(-10, 10)</span>\n<span class=\"n\">randbig</span> <span class=\"o\">=</span> <span class=\"n\">NumPyRVG</span><span class=\"p\">(</span><span class=\"n\">limits</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mf\">1e10</span><span class=\"p\">,</span> <span class=\"mf\">1e100</span><span class=\"p\">))</span>\n</pre>\n<p>The functionalities of <code>NumPyRVG</code> include the generation of:</p>\n<ul>\n<li><code>numpy</code> scalar data types:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">randsmall</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint8</span><span class=\"p\">)</span>\n<span class=\"mi\">8</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">randbig</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">double</span><span class=\"p\">)</span>\n<span class=\"mf\">1.9296971162995923e+99</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">randsmall</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">t</span> <span class=\"ow\">in</span> <span class=\"p\">[</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">uint16</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">,</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">double</span><span class=\"p\">]]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">res</span>\n<span class=\"p\">[</span><span class=\"mi\">7</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mf\">3.0503626</span><span class=\"p\">,</span> <span class=\"mf\">3.759943941132951</span><span class=\"p\">]</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"nb\">type</span><span class=\"p\">,</span> <span class=\"n\">res</span><span class=\"p\">))</span>\n<span class=\"p\">[</span><span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">numpy</span><span class=\"o\">.</span><span class=\"n\">int8</span><span class=\"s1\">'&gt;, &lt;class '</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">uint16</span><span class=\"s1\">'&gt;, &lt;class '</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"s1\">'&gt;, &lt;class '</span><span class=\"n\">numpy</span><span class=\"o\">.</span><span class=\"n\">float64</span><span class=\"s1\">'&gt;]</span>\n</pre>\n<ul>\n<li><code>numpy</code> array data types from scalar types:</li>\n</ul>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">randuint</span><span class=\"p\">((</span><span class=\"mi\">50</span><span class=\"p\">,</span> <span class=\"mi\">100</span><span class=\"p\">),</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">79</span><span class=\"p\">,</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"mi\">85</span><span class=\"p\">],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">uint16</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">randsmall</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float16</span><span class=\"p\">,</span> <span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">))</span>\n<span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"o\">-</span><span class=\"mf\">7.23</span> <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">9.31</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">4.97</span> <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">6.06</span> <span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">5.19</span> <span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.344</span><span class=\"p\">],</span>\n       <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mf\">6.586</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mf\">3.133</span><span class=\"p\">]],</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">float16</span><span class=\"p\">)</span>\n</pre>\n<ul>\n<li><code>numpy</code> structured array data types (structured datatypes can be nested). Limits and shapes can be given in the form of a dictionary, describing all limits and/or shapes of each field of each level of the structured data type. An example follows:</li>\n</ul>\n<pre><span class=\"c1\">#  Consider the struct definition below, in C:</span>\n<span class=\"c1\">##############################################</span>\n<span class=\"c1\">#  typedef struct knode {</span>\n<span class=\"c1\">#      int location;</span>\n<span class=\"c1\">#      int indices [3];</span>\n<span class=\"c1\">#      int  keys [3];</span>\n<span class=\"c1\">#      bool is_leaf;</span>\n<span class=\"c1\">#      int num_keys;</span>\n<span class=\"c1\">#  } knode;</span>\n<span class=\"c1\">##############################################</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">rvg</span> <span class=\"kn\">import</span> <span class=\"n\">NumPyRVG</span>\n\n<span class=\"n\">knode</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">([</span>\n    <span class=\"p\">(</span><span class=\"s1\">'location'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'indices'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'keys'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"nb\">int</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'is_leaf'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"s1\">'num_keys'</span><span class=\"p\">,</span> <span class=\"nb\">int</span><span class=\"p\">)</span>\n<span class=\"p\">])</span>\n\n<span class=\"n\">knode_params</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">'location'</span>  <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span>\n    <span class=\"s1\">'indices'</span>   <span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n    <span class=\"s1\">'keys'</span>      <span class=\"p\">:</span> <span class=\"mi\">117</span><span class=\"p\">,</span>\n    <span class=\"s1\">'is_leaf'</span>   <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">),</span>\n    <span class=\"s1\">'num_keys'</span>  <span class=\"p\">:</span> <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">256</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n\n<span class=\"n\">random_knode</span> <span class=\"o\">=</span> <span class=\"n\">NumPyRVG</span><span class=\"p\">(</span><span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"n\">knode</span><span class=\"p\">)</span>\n<span class=\"n\">knodes_array</span> <span class=\"o\">=</span> <span class=\"n\">random_knode</span><span class=\"p\">(</span><span class=\"n\">knode_params</span><span class=\"p\">,</span> <span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">knodes_array</span><span class=\"p\">)</span>\n</pre>\n<p>The output of the above script is a nested structured <code>numpy</code> array consisting of 5 <code>knode</code> structs, randomly initialized!</p>\n<pre><code>[(0, [-18, -11,  34], [  89,   35,  -57], 1, 189)\n (6, [-35,   0,   4], [ -56,  -65,   26], 1, 217)\n (4, [-29,  40,  37], [  93, -116,   91], 0,  38)\n (2, [-28, -42, -36], [-101,    0,  -43], 0,  82)\n (0, [-14, -19, -13], [ -98,  -46,  -78], 1, 238)]\n</code></pre>\n<p>If the script was run in an interpreter, you could inspect its type as well:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">knodes_array</span>\n<span class=\"n\">array</span><span class=\"p\">([(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">18</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">11</span><span class=\"p\">,</span>  <span class=\"mi\">34</span><span class=\"p\">],</span> <span class=\"p\">[</span>  <span class=\"mi\">89</span><span class=\"p\">,</span>   <span class=\"mi\">35</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">57</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">189</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"mi\">6</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">35</span><span class=\"p\">,</span>   <span class=\"mi\">0</span><span class=\"p\">,</span>   <span class=\"mi\">4</span><span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"o\">-</span><span class=\"mi\">56</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">65</span><span class=\"p\">,</span>   <span class=\"mi\">26</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">217</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">29</span><span class=\"p\">,</span>  <span class=\"mi\">40</span><span class=\"p\">,</span>  <span class=\"mi\">37</span><span class=\"p\">],</span> <span class=\"p\">[</span>  <span class=\"mi\">93</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">116</span><span class=\"p\">,</span>   <span class=\"mi\">91</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">38</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">28</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">42</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">36</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">101</span><span class=\"p\">,</span>    <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">43</span><span class=\"p\">],</span> <span class=\"mi\">0</span><span class=\"p\">,</span>  <span class=\"mi\">82</span><span class=\"p\">),</span>\n       <span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"o\">-</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">19</span><span class=\"p\">,</span> <span class=\"o\">-</span><span class=\"mi\">13</span><span class=\"p\">],</span> <span class=\"p\">[</span> <span class=\"o\">-</span><span class=\"mi\">98</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">46</span><span class=\"p\">,</span>  <span class=\"o\">-</span><span class=\"mi\">78</span><span class=\"p\">],</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">238</span><span class=\"p\">)],</span>\n      <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"p\">[(</span><span class=\"s1\">'location'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;i8'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'indices'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;i8'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,)),</span> <span class=\"p\">(</span><span class=\"s1\">'keys'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;i8'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,)),</span> <span class=\"p\">(</span><span class=\"s1\">'is_leaf'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;i8'</span><span class=\"p\">),</span> <span class=\"p\">(</span><span class=\"s1\">'num_keys'</span><span class=\"p\">,</span> <span class=\"s1\">'&lt;i8'</span><span class=\"p\">)])</span>\n</pre>\n<p>The feature of nesting is not limited in arrays; you can create data types that are as complex as you want and/or need! See the relative <a href=\"https://github.com/zehanort/rvg/blob/master/tests/test_NumPyRVG_class_with_types.py\" rel=\"nofollow\">test</a> as an example of struct nesting.</p>\n\n          </div>"}, "last_serial": 6894633, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "66ee6474bdbb3de8e12598d6189af8e7", "sha256": "b37e7a198ce84dfa91726e0308f90a5b09a70f3a72147e20895dad05933a55b6"}, "downloads": -1, "filename": "rvg-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "66ee6474bdbb3de8e12598d6189af8e7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4415, "upload_time": "2020-03-22T14:03:36", "upload_time_iso_8601": "2020-03-22T14:03:36.816510Z", "url": "https://files.pythonhosted.org/packages/25/24/9f3f6f329949dba38561ae96bb12a67f571dc228e7e51fe22fb83f3f50aa/rvg-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "d3cceea91ac89c6bb4f8aed63b121157", "sha256": "7a76f19103f5dcd756570c7439e2aaaf0e9dc48a1c5631e209d815010a1d8aa8"}, "downloads": -1, "filename": "rvg-0.0.1.tar.gz", "has_sig": false, "md5_digest": "d3cceea91ac89c6bb4f8aed63b121157", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3710, "upload_time": "2020-03-22T14:03:39", "upload_time_iso_8601": "2020-03-22T14:03:39.765891Z", "url": "https://files.pythonhosted.org/packages/f7/74/bdec9a6d0a31f12c43844638f26ca56f0ea2e1a1c7c2a873586c6ed111bd/rvg-0.0.1.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "aa711ed7a4edce6b78233d092ab4b782", "sha256": "923bf8587530d294d579eb6c90ca5715c47c69955c4d9690fceaa4997a34b86d"}, "downloads": -1, "filename": "rvg-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "aa711ed7a4edce6b78233d092ab4b782", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 4526, "upload_time": "2020-03-22T14:46:40", "upload_time_iso_8601": "2020-03-22T14:46:40.346057Z", "url": "https://files.pythonhosted.org/packages/52/9f/ac013f7dfa7f987d9490939b093a6b6048cb5c75494bec9789a7bb21fa2a/rvg-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "1c3b4a1642719c6bd90d43f0e5660d71", "sha256": "44236f3580c99c049cc6b6224d12c448e81bf30f456596b95e7d5f58b15ec627"}, "downloads": -1, "filename": "rvg-0.0.3.tar.gz", "has_sig": false, "md5_digest": "1c3b4a1642719c6bd90d43f0e5660d71", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 3885, "upload_time": "2020-03-22T14:46:41", "upload_time_iso_8601": "2020-03-22T14:46:41.474215Z", "url": "https://files.pythonhosted.org/packages/af/8d/8a7f41ec50729e4bf8fde0e6aa98f87aa795de7463c06bcc82ed0b468ed8/rvg-0.0.3.tar.gz", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "1ead75d777a8c579d6d4b6f3a526628b", "sha256": "46111644f297c4c138ab30a42ef9fc7361bab79efe10584c65db5a3aebe3fcf4"}, "downloads": -1, "filename": "rvg-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "1ead75d777a8c579d6d4b6f3a526628b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5997, "upload_time": "2020-03-23T00:02:20", "upload_time_iso_8601": "2020-03-23T00:02:20.821238Z", "url": "https://files.pythonhosted.org/packages/90/56/cb5b5a35fa0bd9c273e59aa5d276f026e0be6e41569b2d23c00c226f8f50/rvg-0.0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "995c381e57e3b032512fd1d07ec9fc39", "sha256": "46d602146076305ca4edef09df7fbf154259d30203be62def3cf942603f1dfd3"}, "downloads": -1, "filename": "rvg-0.0.7.tar.gz", "has_sig": false, "md5_digest": "995c381e57e3b032512fd1d07ec9fc39", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4899, "upload_time": "2020-03-23T00:02:22", "upload_time_iso_8601": "2020-03-23T00:02:22.212282Z", "url": "https://files.pythonhosted.org/packages/9d/64/a8b91abec6b46feede40c138677e73fa906090ced63b9ce8762eb33e76e9/rvg-0.0.7.tar.gz", "yanked": false}], "0.1.10": [{"comment_text": "", "digests": {"md5": "8444df6607be8f745f48b07650a0cf6e", "sha256": "438c3c0c5e22b8382cb1784c24878a431916a571e29498905682481d58b531c0"}, "downloads": -1, "filename": "rvg-0.1.10-py3-none-any.whl", "has_sig": false, "md5_digest": "8444df6607be8f745f48b07650a0cf6e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7663, "upload_time": "2020-03-27T08:22:51", "upload_time_iso_8601": "2020-03-27T08:22:51.017193Z", "url": "https://files.pythonhosted.org/packages/a8/0a/e06b4c5e2a370ea2457ef552bec467bf8fe3aa16ce2b98cfdea026f38c12/rvg-0.1.10-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e0fc0cbff5d5b38f0798a8206f00bdd5", "sha256": "fe18f9a2f97e58d14f6a6ef0c9d455e23a9596bd5a485d0d90efd0bb8bc27ef9"}, "downloads": -1, "filename": "rvg-0.1.10.tar.gz", "has_sig": false, "md5_digest": "e0fc0cbff5d5b38f0798a8206f00bdd5", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7196, "upload_time": "2020-03-27T08:22:52", "upload_time_iso_8601": "2020-03-27T08:22:52.401690Z", "url": "https://files.pythonhosted.org/packages/49/bd/37fd40ccf437d58ece81ca83c2d3a0839b7ba558e82ac09d2a9c8c35d434/rvg-0.1.10.tar.gz", "yanked": false}], "0.1.11": [{"comment_text": "", "digests": {"md5": "442847bf0b1dd9e06a71e7f248b6bd99", "sha256": "fd00dda40d56e1cc150d3fbc251581e4ceeac62044bd02254336570110195339"}, "downloads": -1, "filename": "rvg-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "442847bf0b1dd9e06a71e7f248b6bd99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7716, "upload_time": "2020-03-27T08:46:55", "upload_time_iso_8601": "2020-03-27T08:46:55.599951Z", "url": "https://files.pythonhosted.org/packages/04/ae/d9679f43ea889ae4f5bc901df41ae0099e15d6ae374e69b26a7ceb232593/rvg-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cb72c86a6828a67c5bb487df18743e9", "sha256": "edde2ce4cd437fbb5e9d84858c5110267aa31fd7b283b5eea05ceab42f468b49"}, "downloads": -1, "filename": "rvg-0.1.11.tar.gz", "has_sig": false, "md5_digest": "4cb72c86a6828a67c5bb487df18743e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7221, "upload_time": "2020-03-27T08:46:56", "upload_time_iso_8601": "2020-03-27T08:46:56.647332Z", "url": "https://files.pythonhosted.org/packages/0f/18/b5c8531b363033cd3f32a328a0fd74f2e1606afcd6fa076f33b92f9b92fb/rvg-0.1.11.tar.gz", "yanked": false}], "0.1.7": [{"comment_text": "", "digests": {"md5": "9a607237d7bbe0008c3ef580bd5c5393", "sha256": "de23c1856e7ae22447e0136b6513692cc7d9c62669902a2735cce15dc8f6016a"}, "downloads": -1, "filename": "rvg-0.1.7-py3-none-any.whl", "has_sig": false, "md5_digest": "9a607237d7bbe0008c3ef580bd5c5393", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 5405, "upload_time": "2020-03-26T02:17:09", "upload_time_iso_8601": "2020-03-26T02:17:09.560659Z", "url": "https://files.pythonhosted.org/packages/d9/94/39495516da1957581c6f936a72ba9d697e7f9ee074569c2b80af8f386f31/rvg-0.1.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a7488f1a7293b2c001d10038a2b60705", "sha256": "1b8b06041b91e066c5bf1fa914eb017cb07d169cef1e05f90d3c0bb556020540"}, "downloads": -1, "filename": "rvg-0.1.7.tar.gz", "has_sig": false, "md5_digest": "a7488f1a7293b2c001d10038a2b60705", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4716, "upload_time": "2020-03-26T02:17:10", "upload_time_iso_8601": "2020-03-26T02:17:10.569535Z", "url": "https://files.pythonhosted.org/packages/bc/86/6bb78db759a83ca26830cc966f942d833d4899d9542686de4ff46bd2edc9/rvg-0.1.7.tar.gz", "yanked": false}], "0.1.8": [{"comment_text": "", "digests": {"md5": "ea5c60fc403a10ee7780bed07c886f31", "sha256": "ff8dc57f6daa780e791f7dae6f5dd6e9c2f3c883a1842b05e1cfcebcf32564b4"}, "downloads": -1, "filename": "rvg-0.1.8-py3-none-any.whl", "has_sig": false, "md5_digest": "ea5c60fc403a10ee7780bed07c886f31", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 5401, "upload_time": "2020-03-26T05:28:30", "upload_time_iso_8601": "2020-03-26T05:28:30.990626Z", "url": "https://files.pythonhosted.org/packages/ee/e7/91b9328b13b5177779b6a267c7b9282f249046a543704ed529005c8dcb06/rvg-0.1.8-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "dca0caf42f9b75221e0285df69967794", "sha256": "796205d9e5ccf858f102d29d11618c1b204733e56ca72ea8cf55d8ba55c1a93b"}, "downloads": -1, "filename": "rvg-0.1.8.tar.gz", "has_sig": false, "md5_digest": "dca0caf42f9b75221e0285df69967794", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 4724, "upload_time": "2020-03-26T05:28:32", "upload_time_iso_8601": "2020-03-26T05:28:32.402230Z", "url": "https://files.pythonhosted.org/packages/ae/be/c3300cfae2e2b2d7a62a5b598072be85bef08e4be4e79fc422bbf14b9b93/rvg-0.1.8.tar.gz", "yanked": false}], "0.1.9": [{"comment_text": "", "digests": {"md5": "2c508cc547836c6b28d348de5627fd53", "sha256": "30c8f34ed562198a444ac37509834622ca1fc34157dcaf26b7787d5189d446f1"}, "downloads": -1, "filename": "rvg-0.1.9-py3-none-any.whl", "has_sig": false, "md5_digest": "2c508cc547836c6b28d348de5627fd53", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7555, "upload_time": "2020-03-26T06:15:01", "upload_time_iso_8601": "2020-03-26T06:15:01.347679Z", "url": "https://files.pythonhosted.org/packages/10/89/724b1073c0638c4d5e5ed6dddf6e27edec72a42b929e7b87ea90b0273dc5/rvg-0.1.9-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "463d3e7b0d9a8ec7b080e435ed5754e9", "sha256": "2d0f850aeee9536dd7539dc454d6f7234e043847586fb7726e63fa535b4eba7b"}, "downloads": -1, "filename": "rvg-0.1.9.tar.gz", "has_sig": false, "md5_digest": "463d3e7b0d9a8ec7b080e435ed5754e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7096, "upload_time": "2020-03-26T06:15:02", "upload_time_iso_8601": "2020-03-26T06:15:02.818477Z", "url": "https://files.pythonhosted.org/packages/12/ef/297b5f552d7786bb037b5bfb126d7e1658dddd240f48d46ca119c7b9ca31/rvg-0.1.9.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "442847bf0b1dd9e06a71e7f248b6bd99", "sha256": "fd00dda40d56e1cc150d3fbc251581e4ceeac62044bd02254336570110195339"}, "downloads": -1, "filename": "rvg-0.1.11-py3-none-any.whl", "has_sig": false, "md5_digest": "442847bf0b1dd9e06a71e7f248b6bd99", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.5", "size": 7716, "upload_time": "2020-03-27T08:46:55", "upload_time_iso_8601": "2020-03-27T08:46:55.599951Z", "url": "https://files.pythonhosted.org/packages/04/ae/d9679f43ea889ae4f5bc901df41ae0099e15d6ae374e69b26a7ceb232593/rvg-0.1.11-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4cb72c86a6828a67c5bb487df18743e9", "sha256": "edde2ce4cd437fbb5e9d84858c5110267aa31fd7b283b5eea05ceab42f468b49"}, "downloads": -1, "filename": "rvg-0.1.11.tar.gz", "has_sig": false, "md5_digest": "4cb72c86a6828a67c5bb487df18743e9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 7221, "upload_time": "2020-03-27T08:46:56", "upload_time_iso_8601": "2020-03-27T08:46:56.647332Z", "url": "https://files.pythonhosted.org/packages/0f/18/b5c8531b363033cd3f32a328a0fd74f2e1606afcd6fa076f33b92f9b92fb/rvg-0.1.11.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:59:49 2020"}