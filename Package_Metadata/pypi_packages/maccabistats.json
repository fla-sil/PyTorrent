{"info": {"author": "", "author_email": "", "bugtrack_url": null, "classifiers": [], "description": "# Description \n\nSimple package which allow to figure out more about maccabi tel-aviv football team while manipulating statistics.\nAtm all the data parsed from maccabi-tlv site.\n\n\n# TL;DR\nYou can get the serialized maccabi games from [mega](https://mega.nz/#F!iX4y1CrJ!sCRXAGcImG8nK4jk8hUMEA)\n(separate by maccabistats version).\nafter that you can just load the games:\n\n```\nfrom maccabistats import get_maccabi_stats\ngames = get_maccabi_stats(your_maccabi.games_file_path)  # Use the local path you've downloaded the file from mega.\n```\n\nYou might want to use:\n```\ngames = games.league_games\n```\nbecause there are not only league games.\n\nnow, enjoy :)\n\n# Manipulating maccabi statistics\n\n### Loading games\n\n```\n>>> from maccabistats import get_maccabi_stats\n>>> games = get_maccabi_stats()  # From default folder path (Home folder - %userprofile%)\n>>> games = get_maccabi_stats(r\"C:\\maccabi\\maccabi.games\")  # From local custom file path\n```\nEach list of games is from the same type - MaccabiGamesStats.  \nAll the below manipulating can be done on every sub-category of games, like:  \nold_games, old_home_games and old_home_wins.  \n\nGetting only old home wins can be done in this way:\n\n```\n>>> old_games = games.played_before(\"1.1.2000\")\n>>> old_home_games = old_games.home_games\n>>> old_home_wins = old_home_games.maccabi_wins\n>>>\n>>> or just:\n>>> games.played_before(\"1.1.2000\").home_games.maccabi_wins\n```\n\n\n### Basic usage\n\n```\n>>> games.averages.goals_for_maccabi  # Avg goals for maccabi, for all the games in the list.\n>>> games.results.wins_percentage  #  the win % from the games in the list.\n>>>\n>>> game.get_games_* = use to filter games.\n>>> Lets combine all, wins % against hapoel haifa in league games:\n>>> game.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc \u05d7\u05d9\u05e4\u05d4\").results.wins_percentage\n```\n\n\n### Players\nAll of the names are very intuitive, some examples:\n\n```\n>>> games.players.best_scorers\n>>> games.players.get_most_winners_by_percentage()\n>>> games.players.most_played\n>>>\n>>> Getting top 5 scored players in league derby:\n>>> games.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc \u05ea\u05dc \u05d0\u05d1\u05d9\u05d1\").players.best_scorers[0:5]\n```\n\n### Coaches and Referees\nYou can get the win\\lose percentages of each one just by:\n\n```\n>>> games.coaches.most_winner_coach_by_percentage\n>>> games.referees.best_referee_by_percentage[0:2]  # Top 2 referees (in all maccabi games history).\n>>>\n>>> Getting best derby coaches:\n>>> games.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc \u05ea\u05dc \u05d0\u05d1\u05d9\u05d1\").coaches.most_winner_coach_by_percentage\n```\n\n\n### Comebacks\nYou can get the craziest maccabi comebacks:\n\n```\n>>> games.comebacks.won_from_exactly_two_goal_diff()\n>>> games.comebacks.won_from_exactly_x_goal_diff(goals=3)  # Wow!\n```\n\n### Streaks\nYou can get the longest (or by streak length) streaks of any subset of maccabi games:\n\n```\n>>> games.streaks.get_longest_* = use to get the longest streak by condition, like:\n>>> games.streaks.get_longest_clean_sheet_games()  #  Games in a row without goal against maccabi.\n>>>\n>>> games.streak.get_similar_* = use to get similar with len of at least X and by condition.\n>>> # All the unbeaten rows of at least len of 20:\n>>> games.streaks.get_similar_unbeaten_streak_by_length(minimum_streak_length=20)   \n```\n\n### Players Streaks\nYou can get the longest players streaks of any subset of maccabi games:\n\n```\n>>> # Use to get the players with best streak of scoring (count the game only if the player played).\n>>> games.players_streaks.get_players_with_best_goal_scoring_streak()\n>>>\n>>> # Same for unbeaten:\n>>> games.players_streaks.get_players_with_best_unbeaten_streak()\n>>>\n>>>\n>>> # Get the players with the best current unbeaten streak\n>>> games.players_streaks.get_players_with_current_unbeaten_streak()\n>>> # Or those who have the best streak of maccabi score a goal with them\n>>> games.players_streaks.get_players_with_current_maccabi_score_goal_streak()\n```\n\n### Teams Streaks\nVery similar to players streak section\n\n```\n>>> # Get the top winning streak against one team\n>>> games.teams_streaks.get_teams_with_current_win_streak()\n>>>\n>>> # Get the teams with the best unbeaten streak\n>>> games.teams_streak.get_teams_with_current_unbeaten_streak()\n```\n\n### Teams statistics\nYou can get any game related statistics that will be order all the teams from those who have the most of this condition:\n\n```\n>>> # Get the teams that maccabi won the most\n>>> games.teams.teams_ordered_by_maccabi_wins()\n>>>\n>>> # Get the teams that maccabi had the most clean sheets games in percentage \n>>> games.teams.teams_ordered_by_maccabi_clean_sheets_percentage()\n```\n\n### Seasons\nYou can get the games grouped by seasons sorted by any condition, such as:\n\n```\n>>> seasons = games.seasons.get_seasons_stats()  # At default the season will be sorted by year.\n>>> seasons.sort_by_wins_percentage()  # Sort the season by winning percentage, you should print the season object).\n>>> seasons  # Print it\n```\n\n\n# Crawling maccabi games\n\nWhen crawling maccabi games each page will be saved on your disk to allow optimization for the next time.\nTo serialize maccabi games (it might take some time), use:\n```\n>>> from maccabistats import serialize_maccabi_games\n# The object will be serialized to home folder (%userprofile%) with its version and the current date.\n>>> serialize_maccabi_games(maccabi_games_stats_object)\n```\n\nManual-fixes will be run after crawling is finished and before serializing to disk.\n\nYou can 'use_multi-process-crawl' from settings to allow multi-processing,  \nBUT atm logging does not support multi-processing, so don't use that if you need to debug.\n\n\n# Manual fixes\n\nThere are some information that need to be fix manually.  \nWhen serializing maccabi games that done automatically.\nIf you Add anything to run_general_fixes, you can re-run it by:\n```\n>>> from maccabistats import get_maccabi_stats, run_general_fixes, serialize_maccabi_games\n>>> \n>>> games = get_maccabi_stats()\n>>> new_games = run_general_fixes(games)\n>>> serialize_maccabi_games(new_games)\n```\n\n# Logging\n\nAll of the log files will be saved at 'maccabistats\\logs' folder under the user home folder (%userprofile%)\nThere are several log files, each one has this pattern - maccabistats-{suffix}.log (at the mentioned folder): \n\n* all - save all log levels\n* info - save just the info log level\n* warning - save just the warn log level\n* exception - save just exceptions (log.exception)\n* stdout - not a file but log handler that print to stdout (info level +) \n\n\n# Known issues\n\n* Ignoring events after 120 min (in game_events_parser -> fully_game_time_without_penalties)\n* Logging with multi-process crawling mode isn't working.\n\n\n# Optimization \n* You can use 'use-disk-to-crawl-when-available' to crawl from disk when available, each page that will be crawled from internet wil be save on disk. \n* For the first time, you can get some of the html files from: https://mega.nz/#F!szxTUDRQ ( key will be available at forum.12p.co.il)\n* You can reduce logging when crawling by use :\n```\n>>> from maccabistats import faster_logging\n>>> faster_logging() will disable the stdout & debug handlers.\n```\n\n\n# Errors Finder\n\nManual check for errors might be helpful, this is can be done by:\n```\n>>> from maccabistats import get_maccabi_stats\n>>> from maccabistats.error_finder.error_finder import ErrorsFinder\n>>> games = get_maccabi_stats()\n>>> e = ErrorsFinder(games)\n>>> e.get_all_errors_numbers()  # run all the manual errors exists\n```\n\n\n# MaccabiPedia Source\n\nYou can manipulate [MaccabiPedia](http:\\\\www.maccabipedia.co.il) data by downloading it and then loading it \n(You may have to install some 'advanced' packages such as pywikibot), as the following:\n\n```\n>>> from maccabistats import run_maccabipedia_source\n>>>\n>>> # You should run this once a while, this is a heavy action to do:\n>>> maccabipedia = run_maccabipedia_source()\n>>> # Now you can manipulate maccabipedia data as explain above (its MaccabiGamesStats object, referred as \"games\" above\") \n```\n\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "maccabistats", "package_url": "https://pypi.org/project/maccabistats/", "platform": "", "project_url": "https://pypi.org/project/maccabistats/", "project_urls": null, "release_url": "https://pypi.org/project/maccabistats/2.9.5/", "requires_dist": ["setuptools (>=28.*)", "requests (<3,>=2.20)", "beautifulsoup4 (<5,>=4.6)", "lxml (<5,>=4.1)", "python-dateutil (<5,>=2.7)", "matplotlib (<3,>=2.2.2)", "progressbar (<3,>=2.5)"], "requires_python": ">=3", "summary": "Maccabi tel-aviv football team statistics manipulation.", "version": "2.9.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p># Description</p>\n<p>Simple package which allow to figure out more about maccabi tel-aviv football team while manipulating statistics.\nAtm all the data parsed from maccabi-tlv site.</p>\n<p># TL;DR\nYou can get the serialized maccabi games from [mega](<a href=\"https://mega.nz/#F!iX4y1CrJ!sCRXAGcImG8nK4jk8hUMEA\" rel=\"nofollow\">https://mega.nz/#F!iX4y1CrJ!sCRXAGcImG8nK4jk8hUMEA</a>)\n(separate by maccabistats version).\nafter that you can just load the games:</p>\n<p><tt>`\nfrom maccabistats import get_maccabi_stats\ngames = get_maccabi_stats(your_maccabi.games_file_path)\u00a0 # Use the local path you've downloaded the file from mega.\n`</tt></p>\n<p>You might want to use:\n<tt>`\ngames = games.league_games\n`</tt>\nbecause there are not only league games.</p>\n<p>now, enjoy :)</p>\n<p># Manipulating maccabi statistics</p>\n<p>### Loading games</p>\n<p><tt>`\n&gt;&gt;&gt; from maccabistats import get_maccabi_stats\n&gt;&gt;&gt; games = get_maccabi_stats()\u00a0 # From default folder path (Home folder - %userprofile%)\n&gt;&gt;&gt; games = <span class=\"pre\">get_maccabi_stats(r\"C:\\maccabi\\maccabi.games\")</span>\u00a0 # From local custom file path\n`</tt>\nEach list of games is from the same type - MaccabiGamesStats.\nAll the below manipulating can be done on every sub-category of games, like:\nold_games, old_home_games and old_home_wins.</p>\n<p>Getting only old home wins can be done in this way:</p>\n<p><tt>`\n&gt;&gt;&gt; old_games = <span class=\"pre\">games.played_before(\"1.1.2000\")</span>\n&gt;&gt;&gt; old_home_games = old_games.home_games\n&gt;&gt;&gt; old_home_wins = old_home_games.maccabi_wins\n&gt;&gt;&gt;\n&gt;&gt;&gt; or just:\n&gt;&gt;&gt; <span class=\"pre\">games.played_before(\"1.1.2000\").home_games.maccabi_wins</span>\n`</tt></p>\n<p>### Basic usage</p>\n<p><tt>`\n&gt;&gt;&gt; games.averages.goals_for_maccabi\u00a0 # Avg goals for maccabi, for all the games in the list.\n&gt;&gt;&gt; games.results.wins_percentage\u00a0 #\u00a0 the win % from the games in the list.\n&gt;&gt;&gt;\n&gt;&gt;&gt; game.get_games_* = use to filter games.\n&gt;&gt;&gt; Lets combine all, wins % against hapoel haifa in league games:\n&gt;&gt;&gt; <span class=\"pre\">game.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc</span> <span class=\"pre\">\u05d7\u05d9\u05e4\u05d4\").results.wins_percentage</span>\n`</tt></p>\n<p>### Players\nAll of the names are very intuitive, some examples:</p>\n<p><tt>`\n&gt;&gt;&gt; games.players.best_scorers\n&gt;&gt;&gt; games.players.get_most_winners_by_percentage()\n&gt;&gt;&gt; games.players.most_played\n&gt;&gt;&gt;\n&gt;&gt;&gt; Getting top 5 scored players in league derby:\n&gt;&gt;&gt; <span class=\"pre\">games.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc</span> \u05ea\u05dc <span class=\"pre\">\u05d0\u05d1\u05d9\u05d1\").players.best_scorers[0:5]</span>\n`</tt></p>\n<p>### Coaches and Referees\nYou can get the winlose percentages of each one just by:</p>\n<p><tt>`\n&gt;&gt;&gt; games.coaches.most_winner_coach_by_percentage\n&gt;&gt;&gt; games.referees.best_referee_by_percentage[0:2]\u00a0 # Top 2 referees (in all maccabi games history).\n&gt;&gt;&gt;\n&gt;&gt;&gt; Getting best derby coaches:\n&gt;&gt;&gt; <span class=\"pre\">games.league_games.get_games_against_team(\"\u05d4\u05e4\u05d5\u05e2\u05dc</span> \u05ea\u05dc <span class=\"pre\">\u05d0\u05d1\u05d9\u05d1\").coaches.most_winner_coach_by_percentage</span>\n`</tt></p>\n<p>### Comebacks\nYou can get the craziest maccabi comebacks:</p>\n<p><tt>`\n&gt;&gt;&gt; games.comebacks.won_from_exactly_two_goal_diff()\n&gt;&gt;&gt; games.comebacks.won_from_exactly_x_goal_diff(goals=3)\u00a0 # Wow!\n`</tt></p>\n<p>### Streaks\nYou can get the longest (or by streak length) streaks of any subset of maccabi games:</p>\n<p><tt>`\n&gt;&gt;&gt; games.streaks.get_longest_* = use to get the longest streak by condition, like:\n&gt;&gt;&gt; games.streaks.get_longest_clean_sheet_games()\u00a0 #\u00a0 Games in a row without goal against maccabi.\n&gt;&gt;&gt;\n&gt;&gt;&gt; games.streak.get_similar_* = use to get similar with len of at least X and by condition.\n&gt;&gt;&gt; # All the unbeaten rows of at least len of 20:\n&gt;&gt;&gt; games.streaks.get_similar_unbeaten_streak_by_length(minimum_streak_length=20)\n`</tt></p>\n<p>### Players Streaks\nYou can get the longest players streaks of any subset of maccabi games:</p>\n<p><tt>`\n&gt;&gt;&gt; # Use to get the players with best streak of scoring (count the game only if the player played).\n&gt;&gt;&gt; games.players_streaks.get_players_with_best_goal_scoring_streak()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Same for unbeaten:\n&gt;&gt;&gt; games.players_streaks.get_players_with_best_unbeaten_streak()\n&gt;&gt;&gt;\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get the players with the best current unbeaten streak\n&gt;&gt;&gt; games.players_streaks.get_players_with_current_unbeaten_streak()\n&gt;&gt;&gt; # Or those who have the best streak of maccabi score a goal with them\n&gt;&gt;&gt; games.players_streaks.get_players_with_current_maccabi_score_goal_streak()\n`</tt></p>\n<p>### Teams Streaks\nVery similar to players streak section</p>\n<p><tt>`\n&gt;&gt;&gt; # Get the top winning streak against one team\n&gt;&gt;&gt; games.teams_streaks.get_teams_with_current_win_streak()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get the teams with the best unbeaten streak\n&gt;&gt;&gt; games.teams_streak.get_teams_with_current_unbeaten_streak()\n`</tt></p>\n<p>### Teams statistics\nYou can get any game related statistics that will be order all the teams from those who have the most of this condition:</p>\n<p><tt>`\n&gt;&gt;&gt; # Get the teams that maccabi won the most\n&gt;&gt;&gt; games.teams.teams_ordered_by_maccabi_wins()\n&gt;&gt;&gt;\n&gt;&gt;&gt; # Get the teams that maccabi had the most clean sheets games in percentage\n&gt;&gt;&gt; games.teams.teams_ordered_by_maccabi_clean_sheets_percentage()\n`</tt></p>\n<p>### Seasons\nYou can get the games grouped by seasons sorted by any condition, such as:</p>\n<p><tt>`\n&gt;&gt;&gt; seasons = games.seasons.get_seasons_stats()\u00a0 # At default the season will be sorted by year.\n&gt;&gt;&gt; seasons.sort_by_wins_percentage()\u00a0 # Sort the season by winning percentage, you should print the season object).\n&gt;&gt;&gt; seasons\u00a0 # Print it\n`</tt></p>\n<p># Crawling maccabi games</p>\n<p>When crawling maccabi games each page will be saved on your disk to allow optimization for the next time.\nTo serialize maccabi games (it might take some time), use:\n<tt>`\n&gt;&gt;&gt; from maccabistats import serialize_maccabi_games\n# The object will be serialized to home folder (%userprofile%) with its version and the current date.\n&gt;&gt;&gt; serialize_maccabi_games(maccabi_games_stats_object)\n`</tt></p>\n<p>Manual-fixes will be run after crawling is finished and before serializing to disk.</p>\n<p>You can \u2018use_multi-process-crawl\u2019 from settings to allow multi-processing,\nBUT atm logging does not support multi-processing, so don\u2019t use that if you need to debug.</p>\n<p># Manual fixes</p>\n<p>There are some information that need to be fix manually.\nWhen serializing maccabi games that done automatically.\nIf you Add anything to run_general_fixes, you can re-run it by:\n<tt>`\n&gt;&gt;&gt; from maccabistats import get_maccabi_stats, run_general_fixes, serialize_maccabi_games\n&gt;&gt;&gt;\n&gt;&gt;&gt; games = get_maccabi_stats()\n&gt;&gt;&gt; new_games = run_general_fixes(games)\n&gt;&gt;&gt; serialize_maccabi_games(new_games)\n`</tt></p>\n<p># Logging</p>\n<p>All of the log files will be saved at \u2018maccabistatslogs\u2019 folder under the user home folder (%userprofile%)\nThere are several log files, each one has this pattern - maccabistats-{suffix}.log (at the mentioned folder):</p>\n<ul>\n<li>all - save all log levels</li>\n<li>info - save just the info log level</li>\n<li>warning - save just the warn log level</li>\n<li>exception - save just exceptions (log.exception)</li>\n<li>stdout - not a file but log handler that print to stdout (info level +)</li>\n</ul>\n<p># Known issues</p>\n<ul>\n<li>Ignoring events after 120 min (in game_events_parser -&gt; fully_game_time_without_penalties)</li>\n<li>Logging with multi-process crawling mode isn\u2019t working.</li>\n</ul>\n<p># Optimization\n* You can use \u2018use-disk-to-crawl-when-available\u2019 to crawl from disk when available, each page that will be crawled from internet wil be save on disk.\n* For the first time, you can get some of the html files from: <a href=\"https://mega.nz/#F!szxTUDRQ\" rel=\"nofollow\">https://mega.nz/#F!szxTUDRQ</a> ( key will be available at forum.12p.co.il)\n* You can reduce logging when crawling by use :\n<tt>`\n&gt;&gt;&gt; from maccabistats import faster_logging\n&gt;&gt;&gt; faster_logging() will disable the stdout &amp; debug handlers.\n`</tt></p>\n<p># Errors Finder</p>\n<p>Manual check for errors might be helpful, this is can be done by:\n<tt>`\n&gt;&gt;&gt; from maccabistats import get_maccabi_stats\n&gt;&gt;&gt; from maccabistats.error_finder.error_finder import ErrorsFinder\n&gt;&gt;&gt; games = get_maccabi_stats()\n&gt;&gt;&gt; e = ErrorsFinder(games)\n&gt;&gt;&gt; e.get_all_errors_numbers()\u00a0 # run all the manual errors exists\n`</tt></p>\n<p># MaccabiPedia Source</p>\n<p>You can manipulate [MaccabiPedia](http:\\www.maccabipedia.co.il) data by downloading it and then loading it\n(You may have to install some \u2018advanced\u2019 packages such as pywikibot), as the following:</p>\n<p><tt>`\n&gt;&gt;&gt; from maccabistats import run_maccabipedia_source\n&gt;&gt;&gt;\n&gt;&gt;&gt; # You should run this once a while, this is a heavy action to do:\n&gt;&gt;&gt; maccabipedia = run_maccabipedia_source()\n&gt;&gt;&gt; # Now you can manipulate maccabipedia data as explain above (its MaccabiGamesStats object, referred as \"games\" above\")\n`</tt></p>\n\n          </div>"}, "last_serial": 6895388, "releases": {"1.2.0": [{"comment_text": "", "digests": {"md5": "f3bca8312536429cb7e21987ed868ea7", "sha256": "04aa4934d75b33ae6ff3362d1da382b3c131a068191b013b1e34830d6a1dfb7d"}, "downloads": -1, "filename": "maccabistats-1.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f3bca8312536429cb7e21987ed868ea7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2791483, "upload_time": "2018-02-03T13:59:01", "upload_time_iso_8601": "2018-02-03T13:59:01.500923Z", "url": "https://files.pythonhosted.org/packages/25/e9/d6955296d635958eb8304243dc41456fb5f3ba72a6637d945358d466b00b/maccabistats-1.2.0-py3-none-any.whl", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "d4b4bc550bbebb1cd5d0f7f87da8c657", "sha256": "22d27923f840464cd7fbf27c58e711c66104195fefff2889759e89beafa5604a"}, "downloads": -1, "filename": "maccabistats-1.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d4b4bc550bbebb1cd5d0f7f87da8c657", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2794021, "upload_time": "2018-03-10T00:21:03", "upload_time_iso_8601": "2018-03-10T00:21:03.481876Z", "url": "https://files.pythonhosted.org/packages/35/cf/dfd76fd75acb06f49e47f8e124ad40687fbfb7f63ba956d77735b282a1a3/maccabistats-1.3.0-py3-none-any.whl", "yanked": false}], "1.4.0": [{"comment_text": "", "digests": {"md5": "b61a55adfdeb2aacb07ce774dc518179", "sha256": "b8fa426028b5e3d667f3e65bd8dfce87ca1f94f7b70eaad0fb1eecbf2318fd3e"}, "downloads": -1, "filename": "maccabistats-1.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "b61a55adfdeb2aacb07ce774dc518179", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 2813137, "upload_time": "2018-03-15T00:03:48", "upload_time_iso_8601": "2018-03-15T00:03:48.674623Z", "url": "https://files.pythonhosted.org/packages/89/42/aad0ebdf05080d90a4d80268dba9c9cef8db6fdb41187741120bf27b3117/maccabistats-1.4.0-py3-none-any.whl", "yanked": false}], "1.5.1": [{"comment_text": "", "digests": {"md5": "bd0c75aa86143fa0994e61b0180facf6", "sha256": "4fea27e1aff1564edf8cf7e57063297a8e4c573020deb57d267b767c1ce6ab3b"}, "downloads": -1, "filename": "maccabistats-1.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "bd0c75aa86143fa0994e61b0180facf6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 32112, "upload_time": "2018-03-28T21:52:31", "upload_time_iso_8601": "2018-03-28T21:52:31.828167Z", "url": "https://files.pythonhosted.org/packages/0f/13/cb9df2c3b6491957983af0d667a57ba4d8eb4a538c8289daddf6a35a0583/maccabistats-1.5.1-py3-none-any.whl", "yanked": false}], "1.6.0": [{"comment_text": "", "digests": {"md5": "f2b47955c218efa16c4d7621f34acc86", "sha256": "9f54eaa5da5534fd0e9ac3b2b61cd69c7399418478bb9a367971aae2b25dc3a2"}, "downloads": -1, "filename": "maccabistats-1.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "f2b47955c218efa16c4d7621f34acc86", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34123, "upload_time": "2018-03-29T00:39:08", "upload_time_iso_8601": "2018-03-29T00:39:08.944827Z", "url": "https://files.pythonhosted.org/packages/6d/34/e0631ce104b2ad71bac6f908aad592e9b9e448a7e23acf85310b298c43c8/maccabistats-1.6.0-py3-none-any.whl", "yanked": false}], "1.6.2": [{"comment_text": "", "digests": {"md5": "fc772cc7fedf66b7045551ae17dfa216", "sha256": "56eb9585af4a4f0f7d5ddb2ce4d2d09386606ce33df5e8a09d5781b3d347efa7"}, "downloads": -1, "filename": "maccabistats-1.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fc772cc7fedf66b7045551ae17dfa216", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 34877, "upload_time": "2018-03-29T10:23:56", "upload_time_iso_8601": "2018-03-29T10:23:56.088225Z", "url": "https://files.pythonhosted.org/packages/a9/9d/2d01ea665ca0c54e0345457b00433a3ffb75d6823fe030d3ffe6817d4ddd/maccabistats-1.6.2-py3-none-any.whl", "yanked": false}], "1.6.4": [{"comment_text": "", "digests": {"md5": "09ce101939214de8e3c5dd36fb6a47f8", "sha256": "5a14fe67d0cb18b6418e996cc154dd5f9a153c2214185f6e635ffad1ad1cd86f"}, "downloads": -1, "filename": "maccabistats-1.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "09ce101939214de8e3c5dd36fb6a47f8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 35052, "upload_time": "2018-03-30T08:06:01", "upload_time_iso_8601": "2018-03-30T08:06:01.952903Z", "url": "https://files.pythonhosted.org/packages/4c/55/d9b5a49d9a89f4393dfbd40308e5446616fb89ed384821960e59517391f6/maccabistats-1.6.4-py3-none-any.whl", "yanked": false}], "1.7.0": [{"comment_text": "", "digests": {"md5": "59a5f51fb30a7f253077c4abcca45502", "sha256": "42597ced39c2a8f7f9c0b02049d8e1a9762b0a5ae3d961a9a9ec5befb2f4ab17"}, "downloads": -1, "filename": "maccabistats-1.7.0-py3-none-any.whl", "has_sig": false, "md5_digest": "59a5f51fb30a7f253077c4abcca45502", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 35885, "upload_time": "2018-04-02T11:12:45", "upload_time_iso_8601": "2018-04-02T11:12:45.131222Z", "url": "https://files.pythonhosted.org/packages/14/1a/1f3023d641643af56980655973923c0ceae51847b34821a430451fa3fe2b/maccabistats-1.7.0-py3-none-any.whl", "yanked": false}], "1.8.0": [{"comment_text": "", "digests": {"md5": "4efd885a7ac97a5d23242dccf32aee37", "sha256": "96684bcd129330e54c9732deb7c48d7b752022442cab9783014e5f7148e01aca"}, "downloads": -1, "filename": "maccabistats-1.8.0-py3-none-any.whl", "has_sig": false, "md5_digest": "4efd885a7ac97a5d23242dccf32aee37", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 41256, "upload_time": "2018-04-06T14:32:47", "upload_time_iso_8601": "2018-04-06T14:32:47.789896Z", "url": "https://files.pythonhosted.org/packages/6c/68/bf683bc81e028a40841f6ce207615664eb498d073ccd86886e4261d14ced/maccabistats-1.8.0-py3-none-any.whl", "yanked": false}], "1.9.1": [{"comment_text": "", "digests": {"md5": "64b0d07886a28a34098062a8d7e8211d", "sha256": "1175ac53a1c3254c0f4eb0d2eb962941bfd428d623a036900921d53c2b07b03c"}, "downloads": -1, "filename": "maccabistats-1.9.1-py3-none-any.whl", "has_sig": false, "md5_digest": "64b0d07886a28a34098062a8d7e8211d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 43755, "upload_time": "2018-04-18T23:40:16", "upload_time_iso_8601": "2018-04-18T23:40:16.269434Z", "url": "https://files.pythonhosted.org/packages/66/41/93cc0208f542d6b1ef63957ed0a8bedcc8125e7862e701c2d48e14601919/maccabistats-1.9.1-py3-none-any.whl", "yanked": false}], "2.0.0": [{"comment_text": "", "digests": {"md5": "976494b01c02ab79447d43f4e53e85c1", "sha256": "079020c76a0321149f538cf65f1e42b90d0e2879f514af84f4f8d99c1a8832a3"}, "downloads": -1, "filename": "maccabistats-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "976494b01c02ab79447d43f4e53e85c1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 57111, "upload_time": "2018-07-03T22:01:14", "upload_time_iso_8601": "2018-07-03T22:01:14.186995Z", "url": "https://files.pythonhosted.org/packages/12/d0/7f2dec85eb1bbf6bb4806e37713c952f8d57a760dacd43192ce8bbab9641/maccabistats-2.0.0-py3-none-any.whl", "yanked": false}], "2.9.0": [{"comment_text": "", "digests": {"md5": "dfc4991f432f96d0b21e075e9925ef39", "sha256": "479ed3c8fefe436b4a18edebd02c1637a4950de379c4fb845bebebd65b44a960"}, "downloads": -1, "filename": "maccabistats-2.9.0-py3-none-any.whl", "has_sig": false, "md5_digest": "dfc4991f432f96d0b21e075e9925ef39", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83179, "upload_time": "2020-01-21T22:01:11", "upload_time_iso_8601": "2020-01-21T22:01:11.145042Z", "url": "https://files.pythonhosted.org/packages/bd/9d/e43819a5f811d2f7a9117b04cd2580529db71999331df8d72ce927287e8f/maccabistats-2.9.0-py3-none-any.whl", "yanked": false}], "2.9.2": [{"comment_text": "", "digests": {"md5": "fba58b04cd993b4f64ae5f85cce92989", "sha256": "ee0bc42c8d924a5463a11270e09b341cfcd235dfadfdc7a181173bccad2c810d"}, "downloads": -1, "filename": "maccabistats-2.9.2-py3-none-any.whl", "has_sig": false, "md5_digest": "fba58b04cd993b4f64ae5f85cce92989", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83474, "upload_time": "2020-03-15T00:20:36", "upload_time_iso_8601": "2020-03-15T00:20:36.916411Z", "url": "https://files.pythonhosted.org/packages/c2/3b/62ab5eed53f1c513e5c4fabc1b1eb1bc8f4969465365a756251543fa84d9/maccabistats-2.9.2-py3-none-any.whl", "yanked": false}], "2.9.3": [{"comment_text": "", "digests": {"md5": "fc006659d4a4dcec347a0b6b39d4a9ab", "sha256": "7334213855d87d635001f7d8b1da174ca5e334bc4df446e475129ac0af55d752"}, "downloads": -1, "filename": "maccabistats-2.9.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fc006659d4a4dcec347a0b6b39d4a9ab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83556, "upload_time": "2020-03-17T22:03:05", "upload_time_iso_8601": "2020-03-17T22:03:05.789776Z", "url": "https://files.pythonhosted.org/packages/d7/b6/51b67039db4f2472d7a288ff3848d2f3f90399eb7c9d9927d23bef07fe7e/maccabistats-2.9.3-py3-none-any.whl", "yanked": false}], "2.9.4": [{"comment_text": "", "digests": {"md5": "add2bb0be26db658fdcfd90170e4dde0", "sha256": "93fd5d6d1b3b9772bb5d4b42ff6fe4edacd37a872f5b09bf5590d6a5cb5baff2"}, "downloads": -1, "filename": "maccabistats-2.9.4-py3-none-any.whl", "has_sig": false, "md5_digest": "add2bb0be26db658fdcfd90170e4dde0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83590, "upload_time": "2020-03-17T23:20:06", "upload_time_iso_8601": "2020-03-17T23:20:06.680475Z", "url": "https://files.pythonhosted.org/packages/25/59/f8c7b6f474a1385d13f689642c68c6fc2f9ab28e14dccfe4fc8e999dfa90/maccabistats-2.9.4-py3-none-any.whl", "yanked": false}], "2.9.5": [{"comment_text": "", "digests": {"md5": "197e86a1fadb0993600143796485c12f", "sha256": "7326247219ab1eb176b93fa870a6dabbe003c12c856d16f82a7fb75a15efaab1"}, "downloads": -1, "filename": "maccabistats-2.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "197e86a1fadb0993600143796485c12f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83884, "upload_time": "2020-03-27T10:53:02", "upload_time_iso_8601": "2020-03-27T10:53:02.041188Z", "url": "https://files.pythonhosted.org/packages/3a/81/f1641238f5d505b3e351e8de6a0e9ea86be243d3ab61cb015b05b1297846/maccabistats-2.9.5-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "197e86a1fadb0993600143796485c12f", "sha256": "7326247219ab1eb176b93fa870a6dabbe003c12c856d16f82a7fb75a15efaab1"}, "downloads": -1, "filename": "maccabistats-2.9.5-py3-none-any.whl", "has_sig": false, "md5_digest": "197e86a1fadb0993600143796485c12f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 83884, "upload_time": "2020-03-27T10:53:02", "upload_time_iso_8601": "2020-03-27T10:53:02.041188Z", "url": "https://files.pythonhosted.org/packages/3a/81/f1641238f5d505b3e351e8de6a0e9ea86be243d3ab61cb015b05b1297846/maccabistats-2.9.5-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 00:42:24 2020"}