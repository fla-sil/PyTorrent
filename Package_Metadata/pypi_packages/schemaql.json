{"info": {"author": "Calogica, LLC", "author_email": "info@calogica.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: MacOS :: MacOS X", "Operating System :: POSIX :: Linux", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# SchemaQL\n\nA testing and auditing tool inspired by dbt, for those not using [dbt](https://www.getdbt.com).\n\n## Installation\n1. Fork and clone to repo to a local folder.\n2. Create a new Python virtual environment in this folder and activate it.\n3. In the local repo folder, run `pip install -r  requirements` to install the dependent packages in this virtualenv.\n4. In the local repo folder, run `pip install -e .` to install a dev version locally.\n\nYou should now be able to run `schemaql -h` from the command line.\n\n```bash\nschemaql -h\nusage: schemaql [-h] [-p None] [-c config.yml] [-x connections.yml] [action]\n\npositional arguments:\n  action                Action ('test', or 'generate')\n\noptional arguments:\n  -h, --help            show this help message and exit\n  -p None, --project None\n                        Project\n  -c config.yml, --config-file config.yml\n                        Config file\n  -x connections.yml, --connections-file connections.yml\n                        Connections file\n```\n\n## Configuration\n\nSchemaQL needs to `*.yml` for configuration:\n\nIn `connections.yml` you define how to connect to one or more of your data warehouse connections like so:\n\n```yaml\nproject-1-snowflake:\ntype: snowflake\n  account: <my_account>\n  user: <my_user>\n  password: <my_password>\n  database: <my_database>\n  # optional:\n  warehouse: <my_warehouse>\n  role: <my_role>\n  schema: <my_initial_schema>\n\nproject-2-bigquery:\ntype: bigquery\n  database: <my_bigquery_project>\n  credentials_path: <path_to_my_service_account_credentials.json>\n  supports_multi_insert: False\n```\n\nIn `config.yml`, you define the following:\n\n- Logging, where `output` is a directory relative to the project path. \n```yaml\nlogs:\n  output: logs\n```\n- a `collector` which is a definition for how you want test results to be collected. Currently supported are:\n  - `json`\n  - `csv`\n  - `database`\n\nFor `json` and `csv`, you only need to provide an `output` path.\n\n```yaml\ncollector:\n  type: csv\n  output: output \n```\n\nFor `database` collection, you need to provide the name of a connection (from `connections.yml`) and a destination table via `output`:\n\n```yaml\ncollector:\n  type: database\n  connection: project-1-snowflake\n  output: test_results\n```\nThe `collector` connection does not need to the same connection, or even the same connection type as the project connection. So, tests could be run against BigQuery but tests results could be collected using Snowflake or Postgres.\n\n- `projects` which is a combination of a connection and a list of which databases and schemas you want to work with. If you don't define any schemas within the database key, all schemas will be processed.\n\n```yaml\nprojects:\n  project-1:\n    connection: project-1-snowflake\n    schema:\n      database_1:\n      - schema_1\n      - schema_2\n  project-2:\n    connection: project-2-bigquery\n    schema:\n      my_bg_project_1\n      my_bg_project_2\n      - data_set_1\n      - data_set_2\n```\n\n## Usage\n\n### Generate\n\nSchemaQL runs tests against schema information contained in `yml` files. You can either write these from scratch, use your existing `dbt` schema files, or use `schemaql` to generate them. \n\nGenerates schema files for all projects:\n```bash\nschemaql generate\n```\n\nGenerates schema files for `\"my_project\"` only:\n```bash\nschemaql generate -p my_project\n```\n\n### Test\n\n```bash\nschemaql test\n```\n\nTest `\"my_project\"` only:\n```bash\nschemaql test -p my_project\n```\n\n## Built-in Tests\n\n### Schema Tests\n#### not_null\nChecks if column values are `NULL`\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: col_1\n        tests:\n          - not_null\n```\n#### relationships\nChecks if column values match values from column in other entity\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: col_1\n        tests:\n          - relationships:\n              to: my_other_table\n              field: col_1\n```\n#### unique\nChecks if column values are unique\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: col_1\n        tests:\n          - unique\n```\n\n### Data Tests\n#### accepted_values\nChecks if column values match a predefined list of accepted values\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: day_of_week\n        description: \n        tests:\n          - accepted_values:\n            values: ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun']\n```\n\n#### at_least_one\nChecks if column has at least one value\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: col_1\n        tests:\n          - at_least_one\n```\n#### equal_expression (TBD)\n#### frequency (TBD)\n#### not_constant\nChecks if column has at more than one value\n```yaml\nmodels:\n  - name: my_table\n    columns:\n      - name: col_1\n        tests:\n          - not_constant\n```\n#### recency (TBD)\n#### unique_rows\nChecks if table rows are unique. \nIf `columns` are not specified, uses all columns.\n\n```yaml\nmodels:\n  - name: my_table\n    tests:\n      - unique_rows:\n          columns: [col_1, col_2, col_3]\n\n```\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://schemaql.com", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "schemaql", "package_url": "https://pypi.org/project/schemaql/", "platform": "", "project_url": "https://pypi.org/project/schemaql/", "project_urls": {"Homepage": "https://schemaql.com"}, "release_url": "https://pypi.org/project/schemaql/0.0.4/", "requires_dist": ["cffi (==1.13.0)", "Jinja2 (>=2.10)", "PyYAML (>=5.1)", "plac (>=1.0.0)", "pybigquery (>=0.4.11)", "colorama (==0.3.9)", "snowflake-connector-python (==2.0.3)", "snowflake-sqlalchemy (>=1.1.14)", "SQLAlchemy (>=1.3.7)", "sqlalchemy-redshift (>=0.7.5)", "psycopg2 (<2.8,>=2.7.5)"], "requires_python": ">=3.6", "summary": "A testing and auditing tool inspired by dbt, for those not using dbt.", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>SchemaQL</h1>\n<p>A testing and auditing tool inspired by dbt, for those not using <a href=\"https://www.getdbt.com\" rel=\"nofollow\">dbt</a>.</p>\n<h2>Installation</h2>\n<ol>\n<li>Fork and clone to repo to a local folder.</li>\n<li>Create a new Python virtual environment in this folder and activate it.</li>\n<li>In the local repo folder, run <code>pip install -r requirements</code> to install the dependent packages in this virtualenv.</li>\n<li>In the local repo folder, run <code>pip install -e .</code> to install a dev version locally.</li>\n</ol>\n<p>You should now be able to run <code>schemaql -h</code> from the command line.</p>\n<pre>schemaql -h\nusage: schemaql <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-p None<span class=\"o\">]</span> <span class=\"o\">[</span>-c config.yml<span class=\"o\">]</span> <span class=\"o\">[</span>-x connections.yml<span class=\"o\">]</span> <span class=\"o\">[</span>action<span class=\"o\">]</span>\n\npositional arguments:\n  action                Action <span class=\"o\">(</span><span class=\"s1\">'test'</span>, or <span class=\"s1\">'generate'</span><span class=\"o\">)</span>\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -p None, --project None\n                        Project\n  -c config.yml, --config-file config.yml\n                        Config file\n  -x connections.yml, --connections-file connections.yml\n                        Connections file\n</pre>\n<h2>Configuration</h2>\n<p>SchemaQL needs to <code>*.yml</code> for configuration:</p>\n<p>In <code>connections.yml</code> you define how to connect to one or more of your data warehouse connections like so:</p>\n<pre><span class=\"nt\">project-1-snowflake</span><span class=\"p\">:</span>\n<span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">snowflake</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">account</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_account&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">user</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_user&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">password</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_password&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">database</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_database&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\"># optional</span><span class=\"p p-Indicator\">:</span>\n  <span class=\"nt\">warehouse</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_warehouse&gt;</span>\n  <span class=\"nt\">role</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_role&gt;</span>\n  <span class=\"nt\">schema</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_initial_schema&gt;</span>\n\n<span class=\"nt\">project-2-bigquery</span><span class=\"p\">:</span>\n<span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">bigquery</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">database</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;my_bigquery_project&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">credentials_path</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">&lt;path_to_my_service_account_credentials.json&gt;</span>\n  <span class=\"l l-Scalar l-Scalar-Plain\">supports_multi_insert</span><span class=\"p p-Indicator\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">False</span>\n</pre>\n<p>In <code>config.yml</code>, you define the following:</p>\n<ul>\n<li>Logging, where <code>output</code> is a directory relative to the project path.</li>\n</ul>\n<pre><span class=\"nt\">logs</span><span class=\"p\">:</span>\n  <span class=\"nt\">output</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">logs</span>\n</pre>\n<ul>\n<li>a <code>collector</code> which is a definition for how you want test results to be collected. Currently supported are:\n<ul>\n<li><code>json</code></li>\n<li><code>csv</code></li>\n<li><code>database</code></li>\n</ul>\n</li>\n</ul>\n<p>For <code>json</code> and <code>csv</code>, you only need to provide an <code>output</code> path.</p>\n<pre><span class=\"nt\">collector</span><span class=\"p\">:</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">csv</span>\n  <span class=\"nt\">output</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">output</span> \n</pre>\n<p>For <code>database</code> collection, you need to provide the name of a connection (from <code>connections.yml</code>) and a destination table via <code>output</code>:</p>\n<pre><span class=\"nt\">collector</span><span class=\"p\">:</span>\n  <span class=\"nt\">type</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">database</span>\n  <span class=\"nt\">connection</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">project-1-snowflake</span>\n  <span class=\"nt\">output</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">test_results</span>\n</pre>\n<p>The <code>collector</code> connection does not need to the same connection, or even the same connection type as the project connection. So, tests could be run against BigQuery but tests results could be collected using Snowflake or Postgres.</p>\n<ul>\n<li><code>projects</code> which is a combination of a connection and a list of which databases and schemas you want to work with. If you don't define any schemas within the database key, all schemas will be processed.</li>\n</ul>\n<pre><span class=\"nt\">projects</span><span class=\"p\">:</span>\n  <span class=\"nt\">project-1</span><span class=\"p\">:</span>\n    <span class=\"nt\">connection</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">project-1-snowflake</span>\n    <span class=\"nt\">schema</span><span class=\"p\">:</span>\n      <span class=\"nt\">database_1</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">schema_1</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">schema_2</span>\n  <span class=\"nt\">project-2</span><span class=\"p\">:</span>\n    <span class=\"nt\">connection</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">project-2-bigquery</span>\n    <span class=\"nt\">schema</span><span class=\"p\">:</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">my_bg_project_1</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">my_bg_project_2</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">- data_set_1</span>\n      <span class=\"l l-Scalar l-Scalar-Plain\">- data_set_2</span>\n</pre>\n<h2>Usage</h2>\n<h3>Generate</h3>\n<p>SchemaQL runs tests against schema information contained in <code>yml</code> files. You can either write these from scratch, use your existing <code>dbt</code> schema files, or use <code>schemaql</code> to generate them.</p>\n<p>Generates schema files for all projects:</p>\n<pre>schemaql generate\n</pre>\n<p>Generates schema files for <code>\"my_project\"</code> only:</p>\n<pre>schemaql generate -p my_project\n</pre>\n<h3>Test</h3>\n<pre>schemaql <span class=\"nb\">test</span>\n</pre>\n<p>Test <code>\"my_project\"</code> only:</p>\n<pre>schemaql <span class=\"nb\">test</span> -p my_project\n</pre>\n<h2>Built-in Tests</h2>\n<h3>Schema Tests</h3>\n<h4>not_null</h4>\n<p>Checks if column values are <code>NULL</code></p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">not_null</span>\n</pre>\n<h4>relationships</h4>\n<p>Checks if column values match values from column in other entity</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"nt\">relationships</span><span class=\"p\">:</span>\n              <span class=\"nt\">to</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_other_table</span>\n              <span class=\"nt\">field</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n</pre>\n<h4>unique</h4>\n<p>Checks if column values are unique</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">unique</span>\n</pre>\n<h3>Data Tests</h3>\n<h4>accepted_values</h4>\n<p>Checks if column values match a predefined list of accepted values</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">day_of_week</span>\n        <span class=\"nt\">description</span><span class=\"p\">:</span> \n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"nt\">accepted_values</span><span class=\"p\">:</span>\n            <span class=\"nt\">values</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"s\">'Mon'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Tue'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Wed'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Thu'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Fri'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Sat'</span><span class=\"p p-Indicator\">,</span> <span class=\"s\">'Sun'</span><span class=\"p p-Indicator\">]</span>\n</pre>\n<h4>at_least_one</h4>\n<p>Checks if column has at least one value</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">at_least_one</span>\n</pre>\n<h4>equal_expression (TBD)</h4>\n<h4>frequency (TBD)</h4>\n<h4>not_constant</h4>\n<p>Checks if column has at more than one value</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">columns</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">col_1</span>\n        <span class=\"nt\">tests</span><span class=\"p\">:</span>\n          <span class=\"p p-Indicator\">-</span> <span class=\"l l-Scalar l-Scalar-Plain\">not_constant</span>\n</pre>\n<h4>recency (TBD)</h4>\n<h4>unique_rows</h4>\n<p>Checks if table rows are unique.\nIf <code>columns</code> are not specified, uses all columns.</p>\n<pre><span class=\"nt\">models</span><span class=\"p\">:</span>\n  <span class=\"p p-Indicator\">-</span> <span class=\"nt\">name</span><span class=\"p\">:</span> <span class=\"l l-Scalar l-Scalar-Plain\">my_table</span>\n    <span class=\"nt\">tests</span><span class=\"p\">:</span>\n      <span class=\"p p-Indicator\">-</span> <span class=\"nt\">unique_rows</span><span class=\"p\">:</span>\n          <span class=\"nt\">columns</span><span class=\"p\">:</span> <span class=\"p p-Indicator\">[</span><span class=\"nv\">col_1</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">col_2</span><span class=\"p p-Indicator\">,</span> <span class=\"nv\">col_3</span><span class=\"p p-Indicator\">]</span>\n</pre>\n\n          </div>"}, "last_serial": 6171823, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "f6ce61273d8e794307093a448eb9c60d", "sha256": "98d612e881ba7cab706aba382dd51514c1161bb21e40d0a7c09e00184ddd2735"}, "downloads": -1, "filename": "schemaql-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f6ce61273d8e794307093a448eb9c60d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 24664, "upload_time": "2019-11-11T00:35:02", "upload_time_iso_8601": "2019-11-11T00:35:02.060616Z", "url": "https://files.pythonhosted.org/packages/a3/9e/a2c96f31a2d3aed8ed116620863b6b5d3e5b4a4acbb8742aa332ae80a5b1/schemaql-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e041ce5a6d4054b3198128ff37394077", "sha256": "49d0a39b8237e38ee858505642f791a7be0b90f4f149f37bf8abf1989e07aab4"}, "downloads": -1, "filename": "schemaql-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e041ce5a6d4054b3198128ff37394077", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12515, "upload_time": "2019-11-11T00:35:04", "upload_time_iso_8601": "2019-11-11T00:35:04.526786Z", "url": "https://files.pythonhosted.org/packages/27/d7/5d55934714addfbb8573b6a596338237b2d506c01eff7fd8465124ce7a66/schemaql-0.0.2.tar.gz", "yanked": false}], "0.0.2a1": [{"comment_text": "", "digests": {"md5": "aa0f3789661bf9a3cbe41b84f53d8f5c", "sha256": "0ee6e829e04293ed69ea6ce0fde31198577f032a712eeeb0271fddab947c61d2"}, "downloads": -1, "filename": "schemaql-0.0.2a1.tar.gz", "has_sig": false, "md5_digest": "aa0f3789661bf9a3cbe41b84f53d8f5c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 12537, "upload_time": "2019-11-11T01:11:30", "upload_time_iso_8601": "2019-11-11T01:11:30.874682Z", "url": "https://files.pythonhosted.org/packages/74/a4/82230e4a152778619f4618fe5f81de290f22a6813b44220b6a1bbc035b52/schemaql-0.0.2a1.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "35ce066d7c23aab86aad502316758844", "sha256": "e98ca07ddb9105bbea83a7dfe933fc26b2434e11cd4eb3ba69f4de45cd723655"}, "downloads": -1, "filename": "schemaql-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35ce066d7c23aab86aad502316758844", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 37863, "upload_time": "2019-11-20T22:26:32", "upload_time_iso_8601": "2019-11-20T22:26:32.947437Z", "url": "https://files.pythonhosted.org/packages/96/21/72ea27bcf09bdd04b043f2ecaac82e00b671251c6e270b216877a50fbae5/schemaql-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80b1ccb338347a7ce9998edb423bead0", "sha256": "2ca8df84c3b4a442f1cf98c7b837b32767850c94e4b722e01ede7110e5de8e2d"}, "downloads": -1, "filename": "schemaql-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "80b1ccb338347a7ce9998edb423bead0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 37858, "upload_time": "2019-11-20T22:26:34", "upload_time_iso_8601": "2019-11-20T22:26:34.370745Z", "url": "https://files.pythonhosted.org/packages/f9/b0/44b93aba8e0a14991d9338988149089605588ff7143b3e72323fd328d13a/schemaql-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3cd6de97d4370e4881df5393469e4c", "sha256": "93e196831c0ed241db65145d81d2054815331adbd16d6f73fece8ca8c3f0484a"}, "downloads": -1, "filename": "schemaql-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0e3cd6de97d4370e4881df5393469e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16780, "upload_time": "2019-11-20T22:26:35", "upload_time_iso_8601": "2019-11-20T22:26:35.620924Z", "url": "https://files.pythonhosted.org/packages/d5/58/622ae59a8e82ba50a74700de0ecf56c291be38a7870f31c8c8ac918040a5/schemaql-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "35ce066d7c23aab86aad502316758844", "sha256": "e98ca07ddb9105bbea83a7dfe933fc26b2434e11cd4eb3ba69f4de45cd723655"}, "downloads": -1, "filename": "schemaql-0.0.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "35ce066d7c23aab86aad502316758844", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": ">=3.6", "size": 37863, "upload_time": "2019-11-20T22:26:32", "upload_time_iso_8601": "2019-11-20T22:26:32.947437Z", "url": "https://files.pythonhosted.org/packages/96/21/72ea27bcf09bdd04b043f2ecaac82e00b671251c6e270b216877a50fbae5/schemaql-0.0.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80b1ccb338347a7ce9998edb423bead0", "sha256": "2ca8df84c3b4a442f1cf98c7b837b32767850c94e4b722e01ede7110e5de8e2d"}, "downloads": -1, "filename": "schemaql-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "80b1ccb338347a7ce9998edb423bead0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 37858, "upload_time": "2019-11-20T22:26:34", "upload_time_iso_8601": "2019-11-20T22:26:34.370745Z", "url": "https://files.pythonhosted.org/packages/f9/b0/44b93aba8e0a14991d9338988149089605588ff7143b3e72323fd328d13a/schemaql-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0e3cd6de97d4370e4881df5393469e4c", "sha256": "93e196831c0ed241db65145d81d2054815331adbd16d6f73fece8ca8c3f0484a"}, "downloads": -1, "filename": "schemaql-0.0.4.tar.gz", "has_sig": false, "md5_digest": "0e3cd6de97d4370e4881df5393469e4c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 16780, "upload_time": "2019-11-20T22:26:35", "upload_time_iso_8601": "2019-11-20T22:26:35.620924Z", "url": "https://files.pythonhosted.org/packages/d5/58/622ae59a8e82ba50a74700de0ecf56c291be38a7870f31c8c8ac918040a5/schemaql-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:50 2020"}