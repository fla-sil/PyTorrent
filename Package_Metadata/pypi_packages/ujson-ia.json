{"info": {"author": "Jonas Tarnstrom", "author_email": "jonas.tarnstrom@esn.me", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Programming Language :: C", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "UltraJSON (Internet Archive Fork)\n=================================\n.. image:: https://travis-ci.org/internetarchive/ultrajson.svg?branch=master\n    :target: https://travis-ci.org/internetarchive/ultrajson\n\nAbout this fork\n~~~~~~~~~~~~~~~\n\nWe use this version at the Internet Archive. We have merged @vdmit11's changes from https://github.com/dignio/ultrajson and the latest from upstream master, and may continue to make other tweaks. \n\nTo install:\n\n.. code-block:: sh\n\n    $ pip install ujson-ia\n\nBack to your regularly scheduled readme\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\nUltraJSON is an ultra fast JSON encoder and decoder written in pure C with bindings for Python 2.5+ and 3.\n\nFor a more painless day to day C/C++ JSON decoder experience please checkout ujson4c_, based on UltraJSON.\n\n.. _ujson4c: http://github.com/esnme/ujson4c/\n\n| Please checkout the rest of the projects in the Ultra series:\n| http://github.com/esnme/ultramemcache\n| http://github.com/esnme/ultramysql\n\n============\nUsage\n============\nMay be used as a drop in replacement for most other JSON parsers for Python:\n\n.. code-block:: python\n\n    >>> import ujson\n    >>> ujson.dumps([{\"key\": \"value\"}, 81, True])\n    '[{\"key\":\"value\"},81,true]'\n    >>> ujson.loads(\"\"\"[{\"key\": \"value\"}, 81, true]\"\"\")\n    [{u'key': u'value'}, 81, True]\n\n~~~~~~~~~~~~~~~\nEncoder options\n~~~~~~~~~~~~~~~\nencode_html_chars\n-----------------\nUsed to enable special encoding of \"unsafe\" HTML characters into safer Unicode sequences. Default is ``False``:\n\n.. code-block:: python\n\n    >>> ujson.dumps(\"<script>John&Doe\", encode_html_chars=True)\n    '\"\\\\u003cscript\\\\u003eJohn\\\\u0026Doe\"'\n\nensure_ascii\n-------------\nLimits output to ASCII and escapes all extended characters above 127. Default is true. If your end format supports UTF-8 setting this option to false is highly recommended to save space:\n\n.. code-block:: python\n\n    >>> ujson.dumps(u\"\\xe5\\xe4\\xf6\")\n    '\"\\\\u00e5\\\\u00e4\\\\u00f6\"'\n    >>> ujson.dumps(u\"\\xe5\\xe4\\xf6\", ensure_ascii=False)\n    '\"\\xc3\\xa5\\xc3\\xa4\\xc3\\xb6\"'\n\nescape_forward_slashes\n----------------------\nControls whether forward slashes (``/``) are escaped. Default is ``True``:\n\n.. code-block:: python\n\n    >>> ujson.dumps(\"http://esn.me\")\n    '\"http:\\/\\/esn.me\"'\n    >>> ujson.dumps(\"http://esn.me\", escape_forward_slashes=False)\n    '\"http://esn.me\"'\n\nindent\n------\nControls whether indention (\"pretty output\") is enabled. Default is ``0`` (disabled):\n\n.. code-block:: python\n\n    >>> ujson.dumps({\"foo\": \"bar\"})\n    '{\"foo\":\"bar\"}'\n    >>> ujson.dumps({\"foo\": \"bar\"}, indent=4)\n    {\n        \"foo\":\"bar\"\n    }\n\npre_encode_hook\n---------------\nAllows to provide a custom function which is called for every encoded Python object.\n\nThe hook function semantics is similar to the standard JSONEncoder.default() method,\nbut the pre_encode_hook() is called before any other serialization attempts, while\nthe default() is called when all other options didn't work.\n\nThat allows to override already exsiting behavior and define custom serialization\nformats for things like dates. For example::\n\n    # Default behavior: datetime is converted to timestamp\n    >>> ujson.dumps({\"a\": \"foo\", \"b\": datetime.now()})\n    '{\"a\":\"foo\",\"b\":1454523657}'\n    \n    # Hook is involved: the datetime object is replaced with the .isoformat() string\n    >>> def hook(obj):\n            return obj.isoformat() if hasattr(obj, 'isoformat') else obj\n    \n    >>> ujson.dumps({\"a\": \"foo\", \"b\": datetime.now()}, pre_encode_hook=hook)\n    '{\"a\":\"foo\",\"b\":\"2016-02-03T18:21:55.351081\"}'\n\nThe hook may be used to replace any object with any other arbitrary object before\nencoding it. However, it doesn't cancel all further encoding transformations.\nFor example, if you return a `datetime` object from the hook instead of a string,\nit will be transformed to a timestamp.\n\n\npre_encode_primitive\n--------------------\nThe boolean flag that indicates that pre_encode_hook() should also be called\nfor Python objects that serialized to primitive JSON types (Number, String,\nBoolean, null).\n\nUsually you don't need to define any special serialization format for these\ntypes, so the flag is false by default.\n\nEnabling this flag may produce huge amount of pre_encode_hook() calls (the\nhook will be called for every single JSON value) and thus affect the performance.\n\n\n~~~~~~~~~~~~~~~~\nDecoders options\n~~~~~~~~~~~~~~~~\nprecise_float\n-------------\nSet to enable usage of higher precision (strtod) function when decoding string to double values. Default is to use fast but less precise builtin functionality::\n\n    >>> ujson.loads(\"4.56\")\n    4.5600000000000005\n    >>> ujson.loads(\"4.56\", precise_float=True)\n    4.5599999999999996\n\nobject_hook\n-----------\nA custom Python function which is called after a JSON object is decoded.\n\nThe hook semantics is similar to the standard JSONDecoder.object_hook() behavior.\nYou may use it to transform a dictionary (the decoded JSON object) into a more\nspecific object.\n\nFor example::\n\n    >>> def hook(obj):\n            if '__complex__' in obj:\n                return complex(obj['real'], obj['imag'])\n            return obj\n    \n    >>> ujson.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}', object_hook=hook)\n    (1+2j)\n\nstring_hook\n-----------\nSimilar to `object_hook`, but called for every decoded string.\n\nUseful for deserializing objects like dates from their textual representations, e.g.::\n\n    >>> def hook(s):\n            if s.startswith('__DATE'):\n                return datetime.strptime(s, '__DATE: %Y-%m-%d')\n            return s\n    \n    >>> ujson.loads('{\"a\": \"foo\", \"b\": \"__DATE: 2016-01-01\"}', string_hook=hook)\n    {'a': 'foo', 'b': datetime.datetime(2016, 1, 1, 0, 0)}\n\n============\t\t\nBenchmarks\t\t\n============\t\t\n*UltraJSON* calls/sec compared to three other popular JSON parsers with performance gain specified below each.\n\n~~~~~~~~~~~~~\nTest machine:\n~~~~~~~~~~~~~\n\nLinux 3.13.0-66-generic x86_64 #108-Ubuntu SMP Wed Oct 7 15:20:27 UTC 2015\n\n~~~~~~~~~\nVersions:\n~~~~~~~~~\n\n- CPython 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2]\n- blist     : 1.3.6\n- simplejson: 3.8.1\n- ujson     : 1.34 (0c52200eb4e2d97e548a765d5f089858c41967b0)\n- yajl      : 0.3.5\n\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n|                                                                               | ujson      | yajl       | simplejson | json       |\n+===============================================================================+============+============+============+============+\n| Array with 256 doubles                                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |    3508.19 |    5742.00 |    3232.38 |    3309.09 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   25103.37 |   11257.83 |   11696.26 |   11871.04 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 UTF-8 strings                                                  |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |    3189.71 |    2717.14 |    2006.38 |    2961.72 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |    1354.94 |     630.54 |     356.35 |     344.05 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 strings                                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   18127.47 |   12537.39 |   12541.23 |   20001.00 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   23264.70 |   12788.85 |   25427.88 |    9352.36 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Medium complex object                                                         |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   10519.38 |    5021.29 |    3686.86 |    4643.47 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |    9676.53 |    5326.79 |    8515.77 |    3017.30 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 True values                                                    |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |  105998.03 |  102067.28 |   44758.51 |   60424.80 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |  163869.96 |   78341.57 |  110859.36 |  115013.90 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 dict{string, int} pairs                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   13471.32 |   12109.09 |    3876.40 |    8833.92 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   16890.63 |    8946.07 |   12218.55 |    3350.72 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Dict with 256 arrays with 256 dict{string, int} pairs                         |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |      50.25 |      46.45 |      13.82 |      29.28 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |      33.27 |      22.10 |      27.91 |      10.43 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Dict with 256 arrays with 256 dict{string, int} pairs, outputting sorted keys |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |      27.19 |            |       7.75 |       2.39 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Complex object                                                                |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |     577.98 |            |     387.81 |     470.02 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |     496.73 |     234.44 |     151.00 |     145.16 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n\n~~~~~~~~~\nVersions:\n~~~~~~~~~\n\n- CPython 3.4.3 (default, Oct 14 2015, 20:28:29) [GCC 4.8.4]\n- blist     : 1.3.6\n- simplejson: 3.8.1\n- ujson     : 1.34 (0c52200eb4e2d97e548a765d5f089858c41967b0)\n- yajl      : 0.3.5\n\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n|                                                                               | ujson      | yajl       | simplejson | json       |\n+===============================================================================+============+============+============+============+\n| Array with 256 doubles                                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |    3477.15 |    5732.24 |    3016.76 |    3071.99 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   23625.20 |    9731.45 |    9501.57 |    9901.92 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 UTF-8 strings                                                  |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |    1995.89 |    2151.61 |    1771.98 |    1817.20 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |    1425.04 |     625.38 |     327.14 |     305.95 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 strings                                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   25461.75 |   12188.64 |   13054.76 |   14429.81 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   21981.31 |   17014.22 |   23869.48 |   22483.58 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Medium complex object                                                         |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   10821.46 |    4837.04 |    3114.04 |    4254.46 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |    7887.77 |    5126.67 |    4934.60 |    6204.97 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 True values                                                    |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |  100452.86 |   94639.42 |   46657.63 |   60358.63 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |  148312.69 |   75485.90 |   88434.91 |  116395.51 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Array with 256 dict{string, int} pairs                                        |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |   11698.13 |    8886.96 |    3043.69 |    6302.35 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |   10686.40 |    7061.77 |    5646.80 |    7702.29 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Dict with 256 arrays with 256 dict{string, int} pairs                         |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |      44.26 |      34.43 |      10.40 |      21.97 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |      28.46 |      23.95 |      18.70 |      22.83 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Dict with 256 arrays with 256 dict{string, int} pairs, outputting sorted keys |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |      33.60 |            |       6.94 |      22.34 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| Complex object                                                                |            |            |            |            |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| encode                                                                        |     432.30 |            |     351.47 |     379.34 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n| decode                                                                        |     434.40 |     221.97 |     149.57 |     147.79 |\n+-------------------------------------------------------------------------------+------------+------------+------------+------------+\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/internetarchive/ultrajson", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "ujson-ia", "package_url": "https://pypi.org/project/ujson-ia/", "platform": "any", "project_url": "https://pypi.org/project/ujson-ia/", "project_urls": {"Homepage": "https://github.com/internetarchive/ultrajson"}, "release_url": "https://pypi.org/project/ujson-ia/2.1.1/", "requires_dist": null, "requires_python": "", "summary": "Ultra fast JSON encoder and decoder for Python (Internet Archive fork)", "version": "2.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://travis-ci.org/internetarchive/ultrajson\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/internetarchive/ultrajson.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c8fc7d766243681bdaf1c437f8432e0cc1fefbcd/68747470733a2f2f7472617669732d63692e6f72672f696e7465726e6574617263686976652f756c7472616a736f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"about-this-fork\">\n<h2>About this fork</h2>\n<p>We use this version at the Internet Archive. We have merged @vdmit11\u2019s changes from <a href=\"https://github.com/dignio/ultrajson\" rel=\"nofollow\">https://github.com/dignio/ultrajson</a> and the latest from upstream master, and may continue to make other tweaks.</p>\n<p>To install:</p>\n<pre>$ pip install ujson-ia\n</pre>\n</div>\n<div id=\"back-to-your-regularly-scheduled-readme\">\n<h2>Back to your regularly scheduled readme</h2>\n<p>UltraJSON is an ultra fast JSON encoder and decoder written in pure C with bindings for Python 2.5+ and 3.</p>\n<p>For a more painless day to day C/C++ JSON decoder experience please checkout <a href=\"http://github.com/esnme/ujson4c/\" rel=\"nofollow\">ujson4c</a>, based on UltraJSON.</p>\n<div>\n<div>Please checkout the rest of the projects in the Ultra series:</div>\n<div><a href=\"http://github.com/esnme/ultramemcache\" rel=\"nofollow\">http://github.com/esnme/ultramemcache</a></div>\n<div><a href=\"http://github.com/esnme/ultramysql\" rel=\"nofollow\">http://github.com/esnme/ultramysql</a></div>\n</div>\n<div id=\"usage\">\n<h3>Usage</h3>\n<p>May be used as a drop in replacement for most other JSON parsers for Python:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">ujson</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">([{</span><span class=\"s2\">\"key\"</span><span class=\"p\">:</span> <span class=\"s2\">\"value\"</span><span class=\"p\">},</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">])</span>\n<span class=\"s1\">'[{\"key\":\"value\"},81,true]'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"s2\">\"\"\"[{\"key\": \"value\"}, 81, true]\"\"\"</span><span class=\"p\">)</span>\n<span class=\"p\">[{</span><span class=\"sa\">u</span><span class=\"s1\">'key'</span><span class=\"p\">:</span> <span class=\"sa\">u</span><span class=\"s1\">'value'</span><span class=\"p\">},</span> <span class=\"mi\">81</span><span class=\"p\">,</span> <span class=\"kc\">True</span><span class=\"p\">]</span>\n</pre>\n<div id=\"encoder-options\">\n<h4>Encoder options</h4>\n<div id=\"encode-html-chars\">\n<h5>encode_html_chars</h5>\n<p>Used to enable special encoding of \u201cunsafe\u201d HTML characters into safer Unicode sequences. Default is <tt>False</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s2\">\"&lt;script&gt;John&amp;Doe\"</span><span class=\"p\">,</span> <span class=\"n\">encode_html_chars</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"</span><span class=\"se\">\\\\</span><span class=\"s1\">u003cscript</span><span class=\"se\">\\\\</span><span class=\"s1\">u003eJohn</span><span class=\"se\">\\\\</span><span class=\"s1\">u0026Doe\"'</span>\n</pre>\n</div>\n<div id=\"ensure-ascii\">\n<h5>ensure_ascii</h5>\n<p>Limits output to ASCII and escapes all extended characters above 127. Default is true. If your end format supports UTF-8 setting this option to false is highly recommended to save space:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\xe5\\xe4\\xf6</span><span class=\"s2\">\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"</span><span class=\"se\">\\\\</span><span class=\"s1\">u00e5</span><span class=\"se\">\\\\</span><span class=\"s1\">u00e4</span><span class=\"se\">\\\\</span><span class=\"s1\">u00f6\"'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"sa\">u</span><span class=\"s2\">\"</span><span class=\"se\">\\xe5\\xe4\\xf6</span><span class=\"s2\">\"</span><span class=\"p\">,</span> <span class=\"n\">ensure_ascii</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"</span><span class=\"se\">\\xc3\\xa5\\xc3\\xa4\\xc3\\xb6</span><span class=\"s1\">\"'</span>\n</pre>\n</div>\n<div id=\"escape-forward-slashes\">\n<h5>escape_forward_slashes</h5>\n<p>Controls whether forward slashes (<tt>/</tt>) are escaped. Default is <tt>True</tt>:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s2\">\"http://esn.me\"</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"http:\\/\\/esn.me\"'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">(</span><span class=\"s2\">\"http://esn.me\"</span><span class=\"p\">,</span> <span class=\"n\">escape_forward_slashes</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"s1\">'\"http://esn.me\"'</span>\n</pre>\n</div>\n<div id=\"indent\">\n<h5>indent</h5>\n<p>Controls whether indention (\u201cpretty output\u201d) is enabled. Default is <tt>0</tt> (disabled):</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">})</span>\n<span class=\"s1\">'{\"foo\":\"bar\"}'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">ujson</span><span class=\"o\">.</span><span class=\"n\">dumps</span><span class=\"p\">({</span><span class=\"s2\">\"foo\"</span><span class=\"p\">:</span> <span class=\"s2\">\"bar\"</span><span class=\"p\">},</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"foo\"</span><span class=\"p\">:</span><span class=\"s2\">\"bar\"</span>\n<span class=\"p\">}</span>\n</pre>\n</div>\n<div id=\"pre-encode-hook\">\n<h5>pre_encode_hook</h5>\n<p>Allows to provide a custom function which is called for every encoded Python object.</p>\n<p>The hook function semantics is similar to the standard JSONEncoder.default() method,\nbut the pre_encode_hook() is called before any other serialization attempts, while\nthe default() is called when all other options didn\u2019t work.</p>\n<p>That allows to override already exsiting behavior and define custom serialization\nformats for things like dates. For example:</p>\n<pre># Default behavior: datetime is converted to timestamp\n&gt;&gt;&gt; ujson.dumps({\"a\": \"foo\", \"b\": datetime.now()})\n'{\"a\":\"foo\",\"b\":1454523657}'\n\n# Hook is involved: the datetime object is replaced with the .isoformat() string\n&gt;&gt;&gt; def hook(obj):\n        return obj.isoformat() if hasattr(obj, 'isoformat') else obj\n\n&gt;&gt;&gt; ujson.dumps({\"a\": \"foo\", \"b\": datetime.now()}, pre_encode_hook=hook)\n'{\"a\":\"foo\",\"b\":\"2016-02-03T18:21:55.351081\"}'\n</pre>\n<p>The hook may be used to replace any object with any other arbitrary object before\nencoding it. However, it doesn\u2019t cancel all further encoding transformations.\nFor example, if you return a <cite>datetime</cite> object from the hook instead of a string,\nit will be transformed to a timestamp.</p>\n</div>\n<div id=\"pre-encode-primitive\">\n<h5>pre_encode_primitive</h5>\n<p>The boolean flag that indicates that pre_encode_hook() should also be called\nfor Python objects that serialized to primitive JSON types (Number, String,\nBoolean, null).</p>\n<p>Usually you don\u2019t need to define any special serialization format for these\ntypes, so the flag is false by default.</p>\n<p>Enabling this flag may produce huge amount of pre_encode_hook() calls (the\nhook will be called for every single JSON value) and thus affect the performance.</p>\n</div>\n</div>\n<div id=\"decoders-options\">\n<h4>Decoders options</h4>\n<div id=\"precise-float\">\n<h5>precise_float</h5>\n<p>Set to enable usage of higher precision (strtod) function when decoding string to double values. Default is to use fast but less precise builtin functionality:</p>\n<pre>&gt;&gt;&gt; ujson.loads(\"4.56\")\n4.5600000000000005\n&gt;&gt;&gt; ujson.loads(\"4.56\", precise_float=True)\n4.5599999999999996\n</pre>\n</div>\n<div id=\"object-hook\">\n<h5>object_hook</h5>\n<p>A custom Python function which is called after a JSON object is decoded.</p>\n<p>The hook semantics is similar to the standard JSONDecoder.object_hook() behavior.\nYou may use it to transform a dictionary (the decoded JSON object) into a more\nspecific object.</p>\n<p>For example:</p>\n<pre>&gt;&gt;&gt; def hook(obj):\n        if '__complex__' in obj:\n            return complex(obj['real'], obj['imag'])\n        return obj\n\n&gt;&gt;&gt; ujson.loads('{\"__complex__\": true, \"real\": 1, \"imag\": 2}', object_hook=hook)\n(1+2j)\n</pre>\n</div>\n<div id=\"string-hook\">\n<h5>string_hook</h5>\n<p>Similar to <cite>object_hook</cite>, but called for every decoded string.</p>\n<p>Useful for deserializing objects like dates from their textual representations, e.g.:</p>\n<pre>&gt;&gt;&gt; def hook(s):\n        if s.startswith('__DATE'):\n            return datetime.strptime(s, '__DATE: %Y-%m-%d')\n        return s\n\n&gt;&gt;&gt; ujson.loads('{\"a\": \"foo\", \"b\": \"__DATE: 2016-01-01\"}', string_hook=hook)\n{'a': 'foo', 'b': datetime.datetime(2016, 1, 1, 0, 0)}\n</pre>\n</div>\n</div>\n</div>\n<div id=\"benchmarks\">\n<h3>Benchmarks</h3>\n<p><em>UltraJSON</em> calls/sec compared to three other popular JSON parsers with performance gain specified below each.</p>\n<div id=\"test-machine\">\n<h4>Test machine:</h4>\n<p>Linux 3.13.0-66-generic x86_64 #108-Ubuntu SMP Wed Oct 7 15:20:27 UTC 2015</p>\n</div>\n<div id=\"versions\">\n<h4>Versions:</h4>\n<ul>\n<li>CPython 2.7.6 (default, Jun 22 2015, 17:58:13) [GCC 4.8.2]</li>\n<li>blist     : 1.3.6</li>\n<li>simplejson: 3.8.1</li>\n<li>ujson     : 1.34 (0c52200eb4e2d97e548a765d5f089858c41967b0)</li>\n<li>yajl      : 0.3.5</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>ujson</th>\n<th>yajl</th>\n<th>simplejson</th>\n<th>json</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Array with 256 doubles</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>3508.19</td>\n<td>5742.00</td>\n<td>3232.38</td>\n<td>3309.09</td>\n</tr>\n<tr><td>decode</td>\n<td>25103.37</td>\n<td>11257.83</td>\n<td>11696.26</td>\n<td>11871.04</td>\n</tr>\n<tr><td>Array with 256 UTF-8 strings</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>3189.71</td>\n<td>2717.14</td>\n<td>2006.38</td>\n<td>2961.72</td>\n</tr>\n<tr><td>decode</td>\n<td>1354.94</td>\n<td>630.54</td>\n<td>356.35</td>\n<td>344.05</td>\n</tr>\n<tr><td>Array with 256 strings</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>18127.47</td>\n<td>12537.39</td>\n<td>12541.23</td>\n<td>20001.00</td>\n</tr>\n<tr><td>decode</td>\n<td>23264.70</td>\n<td>12788.85</td>\n<td>25427.88</td>\n<td>9352.36</td>\n</tr>\n<tr><td>Medium complex object</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>10519.38</td>\n<td>5021.29</td>\n<td>3686.86</td>\n<td>4643.47</td>\n</tr>\n<tr><td>decode</td>\n<td>9676.53</td>\n<td>5326.79</td>\n<td>8515.77</td>\n<td>3017.30</td>\n</tr>\n<tr><td>Array with 256 True values</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>105998.03</td>\n<td>102067.28</td>\n<td>44758.51</td>\n<td>60424.80</td>\n</tr>\n<tr><td>decode</td>\n<td>163869.96</td>\n<td>78341.57</td>\n<td>110859.36</td>\n<td>115013.90</td>\n</tr>\n<tr><td>Array with 256 dict{string, int} pairs</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>13471.32</td>\n<td>12109.09</td>\n<td>3876.40</td>\n<td>8833.92</td>\n</tr>\n<tr><td>decode</td>\n<td>16890.63</td>\n<td>8946.07</td>\n<td>12218.55</td>\n<td>3350.72</td>\n</tr>\n<tr><td>Dict with 256 arrays with 256 dict{string, int} pairs</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>50.25</td>\n<td>46.45</td>\n<td>13.82</td>\n<td>29.28</td>\n</tr>\n<tr><td>decode</td>\n<td>33.27</td>\n<td>22.10</td>\n<td>27.91</td>\n<td>10.43</td>\n</tr>\n<tr><td>Dict with 256 arrays with 256 dict{string, int} pairs, outputting sorted keys</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>27.19</td>\n<td>\u00a0</td>\n<td>7.75</td>\n<td>2.39</td>\n</tr>\n<tr><td>Complex object</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>577.98</td>\n<td>\u00a0</td>\n<td>387.81</td>\n<td>470.02</td>\n</tr>\n<tr><td>decode</td>\n<td>496.73</td>\n<td>234.44</td>\n<td>151.00</td>\n<td>145.16</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"id1\">\n<h4>Versions:</h4>\n<ul>\n<li>CPython 3.4.3 (default, Oct 14 2015, 20:28:29) [GCC 4.8.4]</li>\n<li>blist     : 1.3.6</li>\n<li>simplejson: 3.8.1</li>\n<li>ujson     : 1.34 (0c52200eb4e2d97e548a765d5f089858c41967b0)</li>\n<li>yajl      : 0.3.5</li>\n</ul>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>\u00a0</th>\n<th>ujson</th>\n<th>yajl</th>\n<th>simplejson</th>\n<th>json</th>\n</tr>\n</thead>\n<tbody>\n<tr><td>Array with 256 doubles</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>3477.15</td>\n<td>5732.24</td>\n<td>3016.76</td>\n<td>3071.99</td>\n</tr>\n<tr><td>decode</td>\n<td>23625.20</td>\n<td>9731.45</td>\n<td>9501.57</td>\n<td>9901.92</td>\n</tr>\n<tr><td>Array with 256 UTF-8 strings</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>1995.89</td>\n<td>2151.61</td>\n<td>1771.98</td>\n<td>1817.20</td>\n</tr>\n<tr><td>decode</td>\n<td>1425.04</td>\n<td>625.38</td>\n<td>327.14</td>\n<td>305.95</td>\n</tr>\n<tr><td>Array with 256 strings</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>25461.75</td>\n<td>12188.64</td>\n<td>13054.76</td>\n<td>14429.81</td>\n</tr>\n<tr><td>decode</td>\n<td>21981.31</td>\n<td>17014.22</td>\n<td>23869.48</td>\n<td>22483.58</td>\n</tr>\n<tr><td>Medium complex object</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>10821.46</td>\n<td>4837.04</td>\n<td>3114.04</td>\n<td>4254.46</td>\n</tr>\n<tr><td>decode</td>\n<td>7887.77</td>\n<td>5126.67</td>\n<td>4934.60</td>\n<td>6204.97</td>\n</tr>\n<tr><td>Array with 256 True values</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>100452.86</td>\n<td>94639.42</td>\n<td>46657.63</td>\n<td>60358.63</td>\n</tr>\n<tr><td>decode</td>\n<td>148312.69</td>\n<td>75485.90</td>\n<td>88434.91</td>\n<td>116395.51</td>\n</tr>\n<tr><td>Array with 256 dict{string, int} pairs</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>11698.13</td>\n<td>8886.96</td>\n<td>3043.69</td>\n<td>6302.35</td>\n</tr>\n<tr><td>decode</td>\n<td>10686.40</td>\n<td>7061.77</td>\n<td>5646.80</td>\n<td>7702.29</td>\n</tr>\n<tr><td>Dict with 256 arrays with 256 dict{string, int} pairs</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>44.26</td>\n<td>34.43</td>\n<td>10.40</td>\n<td>21.97</td>\n</tr>\n<tr><td>decode</td>\n<td>28.46</td>\n<td>23.95</td>\n<td>18.70</td>\n<td>22.83</td>\n</tr>\n<tr><td>Dict with 256 arrays with 256 dict{string, int} pairs, outputting sorted keys</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>33.60</td>\n<td>\u00a0</td>\n<td>6.94</td>\n<td>22.34</td>\n</tr>\n<tr><td>Complex object</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n<td>\u00a0</td>\n</tr>\n<tr><td>encode</td>\n<td>432.30</td>\n<td>\u00a0</td>\n<td>351.47</td>\n<td>379.34</td>\n</tr>\n<tr><td>decode</td>\n<td>434.40</td>\n<td>221.97</td>\n<td>149.57</td>\n<td>147.79</td>\n</tr>\n</tbody>\n</table>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 5253819, "releases": {"2.1": [{"comment_text": "", "digests": {"md5": "609cc7db7465076135dd97ad10fc16e6", "sha256": "4e2b295cc4f8e8f7768867695f063bbf7344f6605318371dc0414f10159815a1"}, "downloads": -1, "filename": "ujson-ia-2.1.tar.gz", "has_sig": false, "md5_digest": "609cc7db7465076135dd97ad10fc16e6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7126948, "upload_time": "2019-05-10T19:47:54", "upload_time_iso_8601": "2019-05-10T19:47:54.558823Z", "url": "https://files.pythonhosted.org/packages/fa/a3/419f138541e8a83962eaba1c18a9b67f4ac8e7c5b9f6c40525c18273e8c2/ujson-ia-2.1.tar.gz", "yanked": false}], "2.1.1": [{"comment_text": "", "digests": {"md5": "c92d1e3ce45c89adfab3a5ad134a94f0", "sha256": "efa6dd3f2fae061a53c9fb4c4faec447ac46c2bac53d963844aac8241c3c07ab"}, "downloads": -1, "filename": "ujson-ia-2.1.1.tar.gz", "has_sig": false, "md5_digest": "c92d1e3ce45c89adfab3a5ad134a94f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7122958, "upload_time": "2019-05-10T19:56:05", "upload_time_iso_8601": "2019-05-10T19:56:05.182107Z", "url": "https://files.pythonhosted.org/packages/e5/01/bdeec862af2739d52f7fffb19baa99362cdbf7e2b9906d999f57f6ff618c/ujson-ia-2.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c92d1e3ce45c89adfab3a5ad134a94f0", "sha256": "efa6dd3f2fae061a53c9fb4c4faec447ac46c2bac53d963844aac8241c3c07ab"}, "downloads": -1, "filename": "ujson-ia-2.1.1.tar.gz", "has_sig": false, "md5_digest": "c92d1e3ce45c89adfab3a5ad134a94f0", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7122958, "upload_time": "2019-05-10T19:56:05", "upload_time_iso_8601": "2019-05-10T19:56:05.182107Z", "url": "https://files.pythonhosted.org/packages/e5/01/bdeec862af2739d52f7fffb19baa99362cdbf7e2b9906d999f57f6ff618c/ujson-ia-2.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:41:21 2020"}