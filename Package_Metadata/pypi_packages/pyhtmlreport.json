{"info": {"author": "Satish Kumar Kadarkarai Mani", "author_email": "michael.satish@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Operating System :: MacOS :: MacOS X", "Operating System :: Microsoft :: Windows", "Operating System :: POSIX", "Programming Language :: Python :: 3.7", "Topic :: Software Development :: Quality Assurance", "Topic :: Software Development :: Testing", "Topic :: Utilities"], "description": "# pyhtmlreport\n\nOften open source Test Automation projects lack a good reporting solution, pyhtmlreport solves that by creating HTML reports and represents the output as steps with screenshots.\n\n### Requirements ###\n\n* Requires Python 3.7 or higher.\n* Access to Internet, materlizecss (https://materializecss.com/) is used to style the html report and accessed via cdn.\n\n### How to Install ###\n\n```\npip install pyhtmlreport\n```\n\n### Getting Started Guide ###\n\nOnce you have installed pyhtmlreport - how do you get started?\n* Import the Report class and create a Report instance.\n* Call the setup method.</br>\n    **Parameters**\n    * *Report Folder*: Root report folder to contain all test reports.\n    * *Module Name*: Name of the application, a module within the application or a function.\n    * *Release Name*: Application Release cycle.\n    * *Maximum Screenshots*: By default, the number of screenshots for a Report instance is 1000. This parameter can be used to increase the number.\n    * *Selenium Webdriver*: Screenshots are taken using the pillow library. If an instance of Selenium Webdriver is provided, the brower viewport is taken as screenshot using Selenium's save_screenshot method.\n* Start writing to the test report by using the write_step method. The first step should have the **Start** status, it signals the start of a test to the report instance.</br>\n    **Parameters**\n    * *Step*: Description (Expected or Actual Step Description).\n    * *Status*: Start, Pass, Fail and Warn.\n    * *Screenshot*: Optional flag to capture screenshot for a step.\n* Call the generate_report method at the end to generate the HTML report.\n\n```python\nfrom pyhtmlreport import Report\nfrom selenium.webdriver import Chrome\nfrom selenium.webdriver.common.keys import Keys\n\nreport = Report()\ndriver = Chrome()\n\nreport.setup(\n\treport_folder=r'D:\\Automation\\Reports',\n\tmodule_name='Google',\n\trelease_name='Release 1',\n\tselenium_driver=driver\n)\ndriver.get('https://www.google.com/')\n\ntry:\n    # Start of Test\n    report.write_step(\n    \t'Testing Search functionality',\n    \tstatus=report.status.Start,\n    \ttest_number=1\n    )\n    search_box = driver.find_element_by_css_selector('input[aria-label=\"Search\"]')\n    search_box.send_keys('pyhtmlreport is Awesome')\n    search_box.send_keys(Keys.ENTER)\n\n    # Test Steps\n    results = driver.find_elements_by_css_selector('div[id=\"search\"] div[class=\"g\"]')\n    assert len(results) > 1\n    report.write_step(\n    \t'Google Search returned more than 1 results',\n    \tstatus=report.status.Pass,\n    \tscreenshot=True\n    )\nexcept AssertionError:\n    report.write_step(\n        'Google Search did not return any result',\n\t status=report.status.Fail,\n\t screenshot=True\n    )\nexcept Exception as e:\n    report.write_step(\n        f'Something went wrong during execution!</br>{e}',\n        status=report.status.Warn,\n\tscreenshot=True\n    )\nfinally:\n    report.generate_report()\n    driver.quit()\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/michaelsatish/pyhtmlreport", "keywords": "html report", "license": "Apache License 2.0", "maintainer": "", "maintainer_email": "", "name": "pyhtmlreport", "package_url": "https://pypi.org/project/pyhtmlreport/", "platform": "", "project_url": "https://pypi.org/project/pyhtmlreport/", "project_urls": {"Homepage": "https://github.com/michaelsatish/pyhtmlreport"}, "release_url": "https://pypi.org/project/pyhtmlreport/1.1/", "requires_dist": null, "requires_python": "", "summary": "Implement html reporting in Test Automation", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyhtmlreport</h1>\n<p>Often open source Test Automation projects lack a good reporting solution, pyhtmlreport solves that by creating HTML reports and represents the output as steps with screenshots.</p>\n<h3>Requirements</h3>\n<ul>\n<li>Requires Python 3.7 or higher.</li>\n<li>Access to Internet, materlizecss (<a href=\"https://materializecss.com/\" rel=\"nofollow\">https://materializecss.com/</a>) is used to style the html report and accessed via cdn.</li>\n</ul>\n<h3>How to Install</h3>\n<pre><code>pip install pyhtmlreport\n</code></pre>\n<h3>Getting Started Guide</h3>\n<p>Once you have installed pyhtmlreport - how do you get started?</p>\n<ul>\n<li>Import the Report class and create a Report instance.</li>\n<li>Call the setup method.<br>\n<strong>Parameters</strong>\n<ul>\n<li><em>Report Folder</em>: Root report folder to contain all test reports.</li>\n<li><em>Module Name</em>: Name of the application, a module within the application or a function.</li>\n<li><em>Release Name</em>: Application Release cycle.</li>\n<li><em>Maximum Screenshots</em>: By default, the number of screenshots for a Report instance is 1000. This parameter can be used to increase the number.</li>\n<li><em>Selenium Webdriver</em>: Screenshots are taken using the pillow library. If an instance of Selenium Webdriver is provided, the brower viewport is taken as screenshot using Selenium's save_screenshot method.</li>\n</ul>\n</li>\n<li>Start writing to the test report by using the write_step method. The first step should have the <strong>Start</strong> status, it signals the start of a test to the report instance.<br>\n<strong>Parameters</strong>\n<ul>\n<li><em>Step</em>: Description (Expected or Actual Step Description).</li>\n<li><em>Status</em>: Start, Pass, Fail and Warn.</li>\n<li><em>Screenshot</em>: Optional flag to capture screenshot for a step.</li>\n</ul>\n</li>\n<li>Call the generate_report method at the end to generate the HTML report.</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">pyhtmlreport</span> <span class=\"kn\">import</span> <span class=\"n\">Report</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver</span> <span class=\"kn\">import</span> <span class=\"n\">Chrome</span>\n<span class=\"kn\">from</span> <span class=\"nn\">selenium.webdriver.common.keys</span> <span class=\"kn\">import</span> <span class=\"n\">Keys</span>\n\n<span class=\"n\">report</span> <span class=\"o\">=</span> <span class=\"n\">Report</span><span class=\"p\">()</span>\n<span class=\"n\">driver</span> <span class=\"o\">=</span> <span class=\"n\">Chrome</span><span class=\"p\">()</span>\n\n<span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">setup</span><span class=\"p\">(</span>\n\t<span class=\"n\">report_folder</span><span class=\"o\">=</span><span class=\"sa\">r</span><span class=\"s1\">'D:\\Automation\\Reports'</span><span class=\"p\">,</span>\n\t<span class=\"n\">module_name</span><span class=\"o\">=</span><span class=\"s1\">'Google'</span><span class=\"p\">,</span>\n\t<span class=\"n\">release_name</span><span class=\"o\">=</span><span class=\"s1\">'Release 1'</span><span class=\"p\">,</span>\n\t<span class=\"n\">selenium_driver</span><span class=\"o\">=</span><span class=\"n\">driver</span>\n<span class=\"p\">)</span>\n<span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'https://www.google.com/'</span><span class=\"p\">)</span>\n\n<span class=\"k\">try</span><span class=\"p\">:</span>\n    <span class=\"c1\"># Start of Test</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">write_step</span><span class=\"p\">(</span>\n    \t<span class=\"s1\">'Testing Search functionality'</span><span class=\"p\">,</span>\n    \t<span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">Start</span><span class=\"p\">,</span>\n    \t<span class=\"n\">test_number</span><span class=\"o\">=</span><span class=\"mi\">1</span>\n    <span class=\"p\">)</span>\n    <span class=\"n\">search_box</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_element_by_css_selector</span><span class=\"p\">(</span><span class=\"s1\">'input[aria-label=\"Search\"]'</span><span class=\"p\">)</span>\n    <span class=\"n\">search_box</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"s1\">'pyhtmlreport is Awesome'</span><span class=\"p\">)</span>\n    <span class=\"n\">search_box</span><span class=\"o\">.</span><span class=\"n\">send_keys</span><span class=\"p\">(</span><span class=\"n\">Keys</span><span class=\"o\">.</span><span class=\"n\">ENTER</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Test Steps</span>\n    <span class=\"n\">results</span> <span class=\"o\">=</span> <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">find_elements_by_css_selector</span><span class=\"p\">(</span><span class=\"s1\">'div[id=\"search\"] div[class=\"g\"]'</span><span class=\"p\">)</span>\n    <span class=\"k\">assert</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">results</span><span class=\"p\">)</span> <span class=\"o\">&gt;</span> <span class=\"mi\">1</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">write_step</span><span class=\"p\">(</span>\n    \t<span class=\"s1\">'Google Search returned more than 1 results'</span><span class=\"p\">,</span>\n    \t<span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">Pass</span><span class=\"p\">,</span>\n    \t<span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">AssertionError</span><span class=\"p\">:</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">write_step</span><span class=\"p\">(</span>\n        <span class=\"s1\">'Google Search did not return any result'</span><span class=\"p\">,</span>\n\t <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">Fail</span><span class=\"p\">,</span>\n\t <span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">except</span> <span class=\"ne\">Exception</span> <span class=\"k\">as</span> <span class=\"n\">e</span><span class=\"p\">:</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">write_step</span><span class=\"p\">(</span>\n        <span class=\"sa\">f</span><span class=\"s1\">'Something went wrong during execution!&lt;/br&gt;</span><span class=\"si\">{</span><span class=\"n\">e</span><span class=\"si\">}</span><span class=\"s1\">'</span><span class=\"p\">,</span>\n        <span class=\"n\">status</span><span class=\"o\">=</span><span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">Warn</span><span class=\"p\">,</span>\n\t<span class=\"n\">screenshot</span><span class=\"o\">=</span><span class=\"kc\">True</span>\n    <span class=\"p\">)</span>\n<span class=\"k\">finally</span><span class=\"p\">:</span>\n    <span class=\"n\">report</span><span class=\"o\">.</span><span class=\"n\">generate_report</span><span class=\"p\">()</span>\n    <span class=\"n\">driver</span><span class=\"o\">.</span><span class=\"n\">quit</span><span class=\"p\">()</span>\n</pre>\n\n          </div>"}, "last_serial": 4475521, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "f66fbe080ec8895fec481b05cf255d85", "sha256": "4eb75264b44127e83184dfe65a6151c7d050cf76008f2c7deadc48ca2cd643fe"}, "downloads": -1, "filename": "pyhtmlreport-1.0.tar.gz", "has_sig": false, "md5_digest": "f66fbe080ec8895fec481b05cf255d85", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5680, "upload_time": "2018-11-09T01:30:36", "upload_time_iso_8601": "2018-11-09T01:30:36.708052Z", "url": "https://files.pythonhosted.org/packages/b2/ef/94d5c84c00960ab3b31e645312c6285b58b49843f1c3edcac1b4d8769c61/pyhtmlreport-1.0.tar.gz", "yanked": false}], "1.1": [{"comment_text": "", "digests": {"md5": "ccb48f4260054d107db015333570e591", "sha256": "8ef1a392f459fa1afdbea00706e87431d1bad3535a1e344202673f8b110345bf"}, "downloads": -1, "filename": "pyhtmlreport-1.1.tar.gz", "has_sig": false, "md5_digest": "ccb48f4260054d107db015333570e591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11739, "upload_time": "2018-11-12T00:03:34", "upload_time_iso_8601": "2018-11-12T00:03:34.695829Z", "url": "https://files.pythonhosted.org/packages/8a/9c/72585fd8a5c6e3d025c600b58db97f4b93d432fb8803555774bccdc19429/pyhtmlreport-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "ccb48f4260054d107db015333570e591", "sha256": "8ef1a392f459fa1afdbea00706e87431d1bad3535a1e344202673f8b110345bf"}, "downloads": -1, "filename": "pyhtmlreport-1.1.tar.gz", "has_sig": false, "md5_digest": "ccb48f4260054d107db015333570e591", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 11739, "upload_time": "2018-11-12T00:03:34", "upload_time_iso_8601": "2018-11-12T00:03:34.695829Z", "url": "https://files.pythonhosted.org/packages/8a/9c/72585fd8a5c6e3d025c600b58db97f4b93d432fb8803555774bccdc19429/pyhtmlreport-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:04:17 2020"}