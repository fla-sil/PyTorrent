{"info": {"author": "Matthieu Simonin", "author_email": "matthieu.simonin@inria.fr", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Science/Research", "Intended Audience :: System Administrators", "License :: OSI Approved :: GNU General Public License v3 (GPLv3)", "Operating System :: POSIX :: Linux", "Programming Language :: Python", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "===============\npython-grid5000\n===============\n\n\n``python-grid5000`` is a python package wrapping the Grid\u20195000 REST API. You can\nuse it as a library in your python project or you can explore the Grid\u20195000\nresources interactively using the embedded shell.\n\n.. warning::\n\n    The code is currently being developed heavily. Jump to the contributing section\n    if you want to be involved.\n\n1 Thanks\n--------\n\nThe core code is borrowed from `python-gitlab <https://github.com/python-gitlab/python-gitlab>`_ with small adaptations to\nconform with the Grid5000 API models (with an \u2019s\u2019!)\n\n2 Contributing\n--------------\n\n- To contribute, you can drop me an email or open an issue for a bug report, or feature request.\n\n- There are many areas where this can be improved some of them are listed here:\n\n  - The complete coverage of the API isn\u2019t finished (yet) but this should be fairly easy to reach.\n    Most of the logic go in ```grid5000.objects`` <https://gitlab.inria.fr/msimonin/python-grid5000/blob/master/grid5000/objects.py>`_. And to be honnest I only\n    implemented the feature that I needed the most.\n\n  - Returned `status code <https://www.grid5000.fr/mediawiki/index.php/API#Status_Codes>`_ aren\u2019t yet well treated.\n\n3 Comparison with ...\n---------------------\n\n- `RESTfully <https://api.grid5000.fr/doc/4.0/tools/restfully.html>`_:\n  It consumes REST API following the `HATEOAS <https://en.m.wikipedia.org/wiki/HATEOAS>`_ principles. This allows the client\n  to fully discover the resources and actions available. Most of the G5K API\n  follow theses principles but, for instance the `Storage API <https://www.grid5000.fr/mediawiki/index.php/Storage_Manager>`_ don\u2019t. Thus\n  RESTfully isn\u2019t compatible with all the features offered by the Grid\u20195000 API.\n  It\u2019s a ruby library. Python-grid5000 borrows the friendly syntax for resource\n  browsing, but in python.\n\n- `Execo <http://execo.gforge.inria.fr>`_:\n  Written in Python. The api module gathers a lot of utils functions leveraging\n  the Grid\u20195000 API. Resources aren\u2019t exposed in a syntax friendly manner,\n  instead functions for some classical operations are exposed (mainly getters).\n  It has a convenient way of caching the reference API. Python-grid5000 is a\n  wrapper around the Grid\u20195000 that seeks 100% coverage. Python-grid5000 is\n  resource oriented.\n\n- `Raw requests <http://docs.python-requests.org>`_:\n  **The** reference for HTTP library in python. Good for prototyping but low-level.\n  python-grid5000 encapsulates this library.\n\n4 Installation and examples\n---------------------------\n\n- Please refer to `https://api.grid5000.fr/doc/4.0/reference/spec.html <https://api.grid5000.fr/doc/4.0/reference/spec.html>`_ for\n  the complete specification.\n\n- All the examples are exported in the examples subdirectory so you can\n  easily test and adapt them.\n\n- The configuration is read from a configuration file located in the home\n  directory (should be compatible with the restfully one). It can be created\n  with the following:\n\n- When accessing the API from outside of Grid\u20195000 (e.g your local workstation),\n  you need to specify the following configuration file:\n\n::\n\n    echo '\n    username: MYLOGIN\n    password: MYPASSWORD\n    ' > ~/.python-grid5000.yaml\n\n- When accessing the API from a Grid\u20195000 frontend, providing the username and\n  password is optionnal. Nevertheless you\u2019ll need to deal with SSL verification\n  by specifying the path to the certificate to use:\n\n::\n\n    echo '\n    verify_ssl: /etc/ssl/certs/ca-certificates.crt\n    ' > ~/.python-grid5000.yaml\n\n- Using a virtualenv is recommended (python 3.5+ is required)\n\n::\n\n    virtualenv -p python3 venv\n    source venv/bin/activate\n    pip install python-grid5000\n\n4.1 Grid\u20195000 shell\n~~~~~~~~~~~~~~~~~~~\n\nIf you call ``grid5000`` on the command line you should land in a ipython shell.\nBefore starting, the file ``$HOME/.python-grid5000.yaml`` will be loaded.\n\n::\n\n    $) grid5000\n\n    Python 3.6.5 (default, Jun 17 2018, 21:32:15)\n    Type 'copyright', 'credits' or 'license' for more information\n    IPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\n    In [1]: gk.sites.list()\n    Out[1]:\n    [<Site uid:grenoble>,\n     <Site uid:lille>,\n     <Site uid:luxembourg>,\n     <Site uid:lyon>,\n     <Site uid:nancy>,\n     <Site uid:nantes>,\n     <Site uid:rennes>,\n     <Site uid:sophia>]\n\n    In [2]: # gk is your entry point\n\n4.2 Reference API\n~~~~~~~~~~~~~~~~~\n\n4.2.1 Get node information\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    node_info = gk.sites[\"nancy\"].clusters[\"grisou\"].nodes[\"grisou-1\"]\n    print(\"grisou-1 has {threads} threads and has {ram} bytes of RAM\".format(\n        threads=node_info.architecture[\"nb_threads\"],\n        ram=node_info.main_memory[\"ram_size\"]))\n\n4.2.2 Get Versions of resources\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    root_versions = gk.root.get().versions.list()\n    print(root_versions)\n\n    rennes = gk.sites[\"rennes\"]\n    site_versions = rennes.versions.list()\n    print(site_versions)\n\n    cluster = rennes.clusters[\"paravance\"]\n    cluster_versions = cluster.versions.list()\n    print(cluster_versions)\n\n    node_versions = cluster.nodes[\"paravance-1\"]\n    print(node_versions)\n\n4.3 Monitoring API\n~~~~~~~~~~~~~~~~~~\n\n4.3.1 Get Statuses of resources\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    rennes = gk.sites[\"rennes\"]\n    site_statuses = rennes.status.list()\n    print(site_statuses)\n\n    cluster = rennes.clusters[\"paravance\"]\n    cluster_statuses = cluster.status.list()\n\n4.4 Job API\n~~~~~~~~~~~\n\n4.4.1 Job filtering\n^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    # state=running will be placed in the query params\n    running_jobs = gk.sites[\"rennes\"].jobs.list(state=\"running\")\n    print(running_jobs)\n\n    # get a specific job by its uid\n    job = gk.sites[\"rennes\"].jobs.get(\"424242\")\n    print(job)\n    # or using the bracket notation\n    job = gk.sites[\"rennes\"].jobs[\"424242\"]\n    print(job)\n\n4.4.2 Submit a job\n^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n    import time\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    # This is equivalent to gk.sites.get(\"rennes\")\n    site = gk.sites[\"rennes\"]\n\n    job = site.jobs.create({\"name\": \"pyg5k\",\n                            \"command\": \"sleep 3600\"})\n\n    while job.state != \"running\":\n        job.refresh()\n        print(\"Waiting for the job [%s] to be running\" % job.uid)\n        time.sleep(10)\n\n    print(job)\n    print(\"Assigned nodes : %s\" % job.assigned_nodes)\n\n4.5 Deployment API\n~~~~~~~~~~~~~~~~~~\n\n4.5.1 Deploy an environment\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n    import time\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    # This is equivalent to gk.sites.get(\"rennes\")\n    site = gk.sites[\"rennes\"]\n\n    job = site.jobs.create({\"name\": \"pyg5k\",\n                            \"command\": \"sleep 3600\",\n                            \"types\": [\"deploy\"]})\n\n    while job.state != \"running\":\n        job.refresh()\n        print(\"Waiting the job [%s] to be running\" % job.uid)\n        time.sleep(10)\n\n    print(\"Assigned nodes : %s\" % job.assigned_nodes)\n\n    deployment = site.deployments.create({\"nodes\": job.assigned_nodes,\n                                          \"environment\": \"debian9-x64-min\"})\n    # To get SSH access to your nodes you can pass your public key\n    #\n    # from pathlib import Path\n    #\n    # key_path = Path.home().joinpath(\".ssh\", \"id_rsa.pub\")\n    #\n    #\n    # deployment = site.deployments.create({\"nodes\": job.assigned_nodes,\n    #                                       \"environment\": \"debian9-x64-min\"\n    #                                       \"key\": key_path.read_text()})\n\n    while deployment.status != \"terminated\":\n        deployment.refresh()\n        print(\"Waiting for the deployment [%s] to be finished\" % deployment.uid)\n        time.sleep(10)\n\n    print(deployment.result)\n\n4.6 Storage API\n~~~~~~~~~~~~~~~\n\n4.6.1 Get Storage accesses\n^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    print(gk.sites[\"rennes\"].storage[\"msimonin\"].access.list())\n\n4.6.2 Set storage accesses (e.g for vms)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    from netaddr import IPNetwork\n    import logging\n    import os\n    import time\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n    site = gk.sites[\"rennes\"]\n\n    job = site.jobs.create({\"name\": \"pyg5k\",\n                            \"command\": \"sleep 3600\",\n                            \"resources\": \"slash_22=1+nodes=1\"})\n\n    while job.state != \"running\":\n        job.refresh()\n        print(\"Waiting the job [%s] to be running\" % job.uid)\n        time.sleep(5)\n\n    subnet = job.resources_by_type['subnets'][0]\n    ip_network = [str(ip) for ip in IPNetwork(subnet)]\n\n    # create acces for all ips in the subnet\n    access = site.storage[\"msimonin\"].access.create({\"ipv4\": ip_network,\n                                                      \"termination\": {\"job\": job.uid,\n                                                                      \"site\": site.uid}})\n\n4.7 Vlan API\n~~~~~~~~~~~~\n\n4.7.1 Get vlan(s)\n^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    site = gk.sites[\"rennes\"]\n\n    # Get all vlans\n    vlans = site.vlans.list()\n    print(vlans)\n\n    # Get on specific\n    vlan = site.vlans.get(\"4\")\n    print(vlan)\n\n    vlan = site.vlans[\"4\"]\n    print(vlan)\n\n    # Get vlan of some nodes\n    print(site.vlansnodes.submit({\"nodes\": [\"paravance-1.rennes.grid5000.fr\", \"paravance-2.rennes.grid5000.fr\"]}))\n\n\n    # Get nodes in vlan\n    print(site.vlans[\"4\"].nodes.list())\n\n4.7.2 Set nodes in vlan\n^^^^^^^^^^^^^^^^^^^^^^^\n\n- Putting primary interface in a vlan\n\n  .. code:: python\n\n      import logging\n      import os\n      import time\n\n      from grid5000 import Grid5000\n\n\n      logging.basicConfig(level=logging.DEBUG)\n\n      conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n      gk = Grid5000.from_yaml(conf_file)\n      site = gk.sites[\"rennes\"]\n\n      job = site.jobs.create({\"name\": \"pyg5k\",\n                              \"command\": \"sleep 3600\",\n                              \"resources\": \"{type='kavlan'}/vlan=1+nodes=1\",\n                              \"types\": [\"deploy\"]})\n\n      while job.state != \"running\":\n          job.refresh()\n          print(\"Waiting the job [%s] to be runnning\" % job.uid)\n          time.sleep(5)\n\n      deployment = site.deployments.create({\"nodes\": job.assigned_nodes,\n                                            \"environment\": \"debian9-x64-min\",\n                                            \"vlan\": job.resources_by_type[\"vlans\"][0]})\n\n      while deployment.status != \"terminated\":\n          deployment.refresh()\n          print(\"Waiting for the deployment [%s] to be finished\" % deployment.uid)\n          time.sleep(10)\n\n      print(deployment.result)\n\n- Putting the secondary interface in a vlan\n\n  .. code:: python\n\n      import logging\n      import os\n      import time\n\n      from grid5000 import Grid5000\n\n\n      logging.basicConfig(level=logging.DEBUG)\n\n\n      def _to_network_address(host, interface):\n          \"\"\"Translate a host to a network address\n          e.g:\n          paranoia-20.rennes.grid5000.fr -> paranoia-20-eth2.rennes.grid5000.fr\n          \"\"\"\n          splitted = host.split('.')\n          splitted[0] = splitted[0] + \"-\" + interface\n\n          return \".\".join(splitted)\n\n\n      conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n      gk = Grid5000.from_yaml(conf_file)\n\n      site = gk.sites[\"rennes\"]\n\n      job = site.jobs.create({\"name\": \"pyg5k\",\n                              \"command\": \"sleep 3600\",\n                              \"resources\": \"{type='kavlan'}/vlan=1+{cluster='paranoia'}nodes=1\",\n                              \"types\": [\"deploy\"]\n      })\n\n      while job.state != \"running\":\n          job.refresh()\n          print(\"Waiting the job [%s] to be runnning\" % job.uid)\n          time.sleep(5)\n\n      vlanid = job.resources_by_type[\"vlans\"][0]\n\n      # we hard code the interface but this can be discovered in the node info\n      # TODO: write the code here to discover\n      nodes = [_to_network_address(n, \"eth2\") for n in job.assigned_nodes]\n      print(nodes)\n\n      # set in vlan\n      site.vlans[vlanid].submit({\"nodes\": nodes})\n\n4.8 Metrics API\n~~~~~~~~~~~~~~~\n\n4.8.1 Get the timeseries corresponding to a job\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nCredits to ``lturpin``.\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n\n    def get_job_consumption(job_id, gk, site):\n        metrics = gk.sites[site].metrics\n        job = gk.sites[site].jobs[job_id]\n        # nodes as list : \"cluster-number.site.grid5000.fr\"\n        nodes_dom = job.assigned_nodes\n        # nodes as list : \"cluster-number\"\n        nodes = map(lambda node_dom: node_dom.split('.')[0], nodes_dom)\n        # nodes as string : \"cluster-number,cluster-number,...\"\n        nodes_str = ','.join(nodes)\n\n        start = job.started_at\n        end = job.stopped_at\n        kwargs = {\n            \"only\": nodes_str,\n            \"resolution\": 1,\n            \"from\": start,\n            \"to\": end\n        }\n        timeseries = metrics[\"power\"].timeseries.list(**kwargs)\n        return timeseries\n\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    timeseries = get_job_consumption(\"1092446\", gk, \"lyon\")\n    print(timeseries)\n\n4.8.2 Get some timeseries (and plot them)\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nFor this example you\u2019ll need ``matplotlib``, ``seaborn`` and ``pandas``.\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n    import pandas as pd\n    import matplotlib.pyplot as plt\n    import seaborn as sns\n    import time\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    metrics = gk.sites[\"lyon\"].metrics\n    print(\"--- available metrics\")\n    print(metrics.list())\n\n    print(\"---- power metric\")\n    print(metrics[\"power\"])\n\n    print(\"----- a timeserie\")\n    now = time.time()\n    kwargs = {\n        \"only\": \"nova-1,nova-2,nova-3\",\n        \"resolution\": 1,\n        \"from\": int(now - 600),\n        \"to\": int(now)\n    }\n    timeseries = metrics[\"power\"].timeseries.list(**kwargs)\n\n    # let's visualize this\n    df = pd.DataFrame()\n    for timeserie in timeseries:\n        print(timeserie)\n        timestamp = timeserie.timestamps\n        value = timeserie.values\n        measurement = timeserie.uid\n        df = pd.concat([df, pd.DataFrame({\n            \"timestamp\": timestamp,\n            \"value\": value,\n            \"measurement\": [measurement]*len(timestamp)\n        })])\n\n    sns.relplot(data=df,\n                x=\"timestamp\",\n                y=\"value\",\n                hue=\"measurement\",\n                kind=\"line\")\n    plt.show()\n\n4.9 More snippets\n~~~~~~~~~~~~~~~~~\n\n4.9.1 Site of a cluster\n^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    clusters = [\"dahu\", \"parasilo\", \"chetemi\"]\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    sites = gk.sites.list()\n    matches = []\n    for site in sites:\n        candidates = site.clusters.list()\n        matching = [c.uid for c in candidates if c.uid in clusters]\n        if len(matching) == 1:\n            matches.append((site, matching[0]))\n            clusters.remove(matching[0])\n    print(\"We found the following matches %s\" % matches)\n\n4.9.2 Get all job with a given name on all the sites\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n.. code:: python\n\n\n    import logging\n    import os\n\n    from grid5000 import Grid5000\n\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    NAME = \"pyg5k\"\n\n    conf_file = os.path.join(os.environ.get(\"HOME\"), \".python-grid5000.yaml\")\n    gk = Grid5000.from_yaml(conf_file)\n\n    sites = gk.sites.list()\n    site = gk.sites[\"rennes\"]\n    sites = [gk.sites[\"rennes\"], gk.sites[\"nancy\"], gk.sites[\"grenoble\"]]\n\n    # creates some jobs\n    jobs = []\n    for site in sites:\n        job = site.jobs.create({\"name\": \"pyg5k\",\n                                \"command\": \"sleep 3600\"})\n        jobs.append(job)\n\n    _jobs = []\n    for site in sites:\n        _jobs.append((site.uid, site.jobs.list(name=NAME,\n                                               state=\"waiting,launching,running\")))\n\n    print(\"We found %s\" % _jobs)\n\n    # deleting the jobs\n    for job in jobs:\n        job.delete()\n\n4.9.3 Caching API responses\n^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\nThe Grid\u20195000 reference API is static. In this situation to speed up the\nrequests, one could leverage heavily on caching. Currently\n``python-grid5000`` doesn\u2019t do caching out-of the box but defers that to the\nconsuming application. There are many solutions to implement a cache.\nAmongst them LRU cache\n(`https://docs.python.org/3/library/functools.html#functools.lru_cache <https://docs.python.org/3/library/functools.html#functools.lru_cache>`_)\nprovides an in-memory caching facilities but doesn\u2019t give you control on the\ncache. The ring library (`https://ring-cache.readthedocs.io/en/stable/ <https://ring-cache.readthedocs.io/en/stable/>`_) is\ngreat as it implements different backends for your cache (esp.\ncross-processes cache) and give you control on the cached object. Enough talking:\n\n\n.. code:: python\n\n    import logging\n    import threading\n    import os\n\n    import diskcache\n    from grid5000 import Grid5000\n    import ring\n\n\n    _api_lock = threading.Lock()\n    # Keep track of the api client\n    _api_client = None\n\n    storage = diskcache.Cache('cachedir')\n\n    def get_api_client():\n        \"\"\"Gets the reference to the API cient (singleton).\"\"\"\n        with _api_lock:\n            global _api_client\n            if not _api_client:\n                conf_file = os.path.join(os.environ.get(\"HOME\"),\n                                        \".python-grid5000.yaml\")\n                _api_client = Grid5000.from_yaml(conf_file)\n\n            return _api_client\n\n\n    @ring.disk(storage)\n    def get_sites_obj():\n        \"\"\"Get all the sites.\"\"\"\n        gk = get_api_client()\n        return gk.sites.list()\n\n\n    @ring.disk(storage)\n    def get_all_clusters_obj():\n        \"\"\"Get all the clusters.\"\"\"\n        sites = get_sites_obj()\n        clusters = []\n        for site in sites:\n            # should we cache the list aswell ?\n            clusters.extend(site.clusters.list())\n        return clusters\n\n\n    if __name__ == \"__main__\":\n        logging.basicConfig(level=logging.DEBUG)\n        clusters = get_all_clusters_obj()\n        print(clusters)\n        print(\"Known key in the cache\")\n        print(get_all_clusters_obj.get())\n        print(\"Calling again the function is now faster\")\n        clusters = get_all_clusters_obj()\n        print(clusters)\n\n4.9.4 Using Grid\u20195000 client certificates\n^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n\n``python-grid5000`` can also be used as a trusted client with Grid\u20195000\ninternal certificate. In this mode users can pass the ``g5k_user`` argument\nto most calls to specify which user the API call should be made as. In\ncases where ``g5k_user`` is not specified API calls will be made as the\n``anonymous`` user whose access is limited to the Grid\u20195000 reference API.\nIn this mode ``python-grid5000`` does not store any login information, so\n``g5k_user`` must be provided explicitly provided on every call that requires\none.\n\n.. code:: python\n\n    import logging\n\n    from grid5000 import Grid5000\n\n    logging.basicConfig(level=logging.DEBUG)\n\n    gk = Grid5000(\n       uri=\"https://api-ext.grid5000.fr/stable/\",\n       sslcert=\"/path/to/ssl/certfile.cert\",\n       sslkey=\"/path/to/ssl/keyfile.key\"\n       )\n\n    gk.sites.list()\n\n    job = site.jobs.create({\"name\": \"pyg5k\",\n                            \"command\": \"sleep 3600\"},\n                            g5k_user = \"auser1\")\n\n\n    # Since the 'anonymous' user can not inspect jobs the following call will raise exception\n    # python-grid5000.exceptions.Grid5000AuthenticationError: 401 Unauthorized\n    job.refresh()\n\n    # Both following call work since any user can request info on any jobs.\n    job.refresh(g5k_user='auser1')\n    job.refresh(g5k_user='auser2')\n\n    # Some operations can only be performed by the jobs creator.\n    # The following call will raise exception\n    # pyg5k.exceptions.Grid5000DeleteError: 403 Unauthorized\n    job.delete(g5k_user='auser2')\n\n    # This call works as expected\n    job.delete(g5k_user='auser1')\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.inria.fr/msimonin/python-grid5000", "keywords": "REST,evaluation,reproducible research,Grid5000", "license": "", "maintainer": "", "maintainer_email": "", "name": "python-grid5000", "package_url": "https://pypi.org/project/python-grid5000/", "platform": "", "project_url": "https://pypi.org/project/python-grid5000/", "project_urls": {"Homepage": "https://gitlab.inria.fr/msimonin/python-grid5000"}, "release_url": "https://pypi.org/project/python-grid5000/0.2.4/", "requires_dist": ["requests (>=2.21)", "pyyaml (>=5.1)", "ipython"], "requires_python": "", "summary": "", "version": "0.2.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><tt><span class=\"pre\">python-grid5000</span></tt> is a python package wrapping the Grid\u20195000 REST API. You can\nuse it as a library in your python project or you can explore the Grid\u20195000\nresources interactively using the embedded shell.</p>\n<div>\n<p>Warning</p>\n<p>The code is currently being developed heavily. Jump to the contributing section\nif you want to be involved.</p>\n</div>\n<div id=\"thanks\">\n<h2>1 Thanks</h2>\n<p>The core code is borrowed from <a href=\"https://github.com/python-gitlab/python-gitlab\" rel=\"nofollow\">python-gitlab</a> with small adaptations to\nconform with the Grid5000 API models (with an \u2019s\u2019!)</p>\n</div>\n<div id=\"contributing\">\n<h2>2 Contributing</h2>\n<ul>\n<li>To contribute, you can drop me an email or open an issue for a bug report, or feature request.</li>\n<li>There are many areas where this can be improved some of them are listed here:<ul>\n<li>The complete coverage of the API isn\u2019t finished (yet) but this should be fairly easy to reach.\nMost of the logic go in <tt>`grid5000.objects</tt> &lt;<a href=\"https://gitlab.inria.fr/msimonin/python-grid5000/blob/master/grid5000/objects.py\" rel=\"nofollow\">https://gitlab.inria.fr/msimonin/python-grid5000/blob/master/grid5000/objects.py</a>&gt;`_. And to be honnest I only\nimplemented the feature that I needed the most.</li>\n<li>Returned <a href=\"https://www.grid5000.fr/mediawiki/index.php/API#Status_Codes\" rel=\"nofollow\">status code</a> aren\u2019t yet well treated.</li>\n</ul>\n</li>\n</ul>\n</div>\n<div id=\"comparison-with\">\n<h2>3 Comparison with \u2026</h2>\n<ul>\n<li><a href=\"https://api.grid5000.fr/doc/4.0/tools/restfully.html\" rel=\"nofollow\">RESTfully</a>:\nIt consumes REST API following the <a href=\"https://en.m.wikipedia.org/wiki/HATEOAS\" rel=\"nofollow\">HATEOAS</a> principles. This allows the client\nto fully discover the resources and actions available. Most of the G5K API\nfollow theses principles but, for instance the <a href=\"https://www.grid5000.fr/mediawiki/index.php/Storage_Manager\" rel=\"nofollow\">Storage API</a> don\u2019t. Thus\nRESTfully isn\u2019t compatible with all the features offered by the Grid\u20195000 API.\nIt\u2019s a ruby library. Python-grid5000 borrows the friendly syntax for resource\nbrowsing, but in python.</li>\n<li><a href=\"http://execo.gforge.inria.fr\" rel=\"nofollow\">Execo</a>:\nWritten in Python. The api module gathers a lot of utils functions leveraging\nthe Grid\u20195000 API. Resources aren\u2019t exposed in a syntax friendly manner,\ninstead functions for some classical operations are exposed (mainly getters).\nIt has a convenient way of caching the reference API. Python-grid5000 is a\nwrapper around the Grid\u20195000 that seeks 100% coverage. Python-grid5000 is\nresource oriented.</li>\n<li><a href=\"http://docs.python-requests.org\" rel=\"nofollow\">Raw requests</a>:\n<strong>The</strong> reference for HTTP library in python. Good for prototyping but low-level.\npython-grid5000 encapsulates this library.</li>\n</ul>\n</div>\n<div id=\"installation-and-examples\">\n<h2>4 Installation and examples</h2>\n<ul>\n<li>Please refer to <a href=\"https://api.grid5000.fr/doc/4.0/reference/spec.html\" rel=\"nofollow\">https://api.grid5000.fr/doc/4.0/reference/spec.html</a> for\nthe complete specification.</li>\n<li>All the examples are exported in the examples subdirectory so you can\neasily test and adapt them.</li>\n<li>The configuration is read from a configuration file located in the home\ndirectory (should be compatible with the restfully one). It can be created\nwith the following:</li>\n<li>When accessing the API from outside of Grid\u20195000 (e.g your local workstation),\nyou need to specify the following configuration file:</li>\n</ul>\n<pre>echo '\nusername: MYLOGIN\npassword: MYPASSWORD\n' &gt; ~/.python-grid5000.yaml\n</pre>\n<ul>\n<li>When accessing the API from a Grid\u20195000 frontend, providing the username and\npassword is optionnal. Nevertheless you\u2019ll need to deal with SSL verification\nby specifying the path to the certificate to use:</li>\n</ul>\n<pre>echo '\nverify_ssl: /etc/ssl/certs/ca-certificates.crt\n' &gt; ~/.python-grid5000.yaml\n</pre>\n<ul>\n<li>Using a virtualenv is recommended (python 3.5+ is required)</li>\n</ul>\n<pre>virtualenv -p python3 venv\nsource venv/bin/activate\npip install python-grid5000\n</pre>\n<div id=\"grid5000-shell\">\n<h3>4.1 Grid\u20195000 shell</h3>\n<p>If you call <tt>grid5000</tt> on the command line you should land in a ipython shell.\nBefore starting, the file <tt><span class=\"pre\">$HOME/.python-grid5000.yaml</span></tt> will be loaded.</p>\n<pre>$) grid5000\n\nPython 3.6.5 (default, Jun 17 2018, 21:32:15)\nType 'copyright', 'credits' or 'license' for more information\nIPython 7.3.0 -- An enhanced Interactive Python. Type '?' for help.\n\nIn [1]: gk.sites.list()\nOut[1]:\n[&lt;Site uid:grenoble&gt;,\n &lt;Site uid:lille&gt;,\n &lt;Site uid:luxembourg&gt;,\n &lt;Site uid:lyon&gt;,\n &lt;Site uid:nancy&gt;,\n &lt;Site uid:nantes&gt;,\n &lt;Site uid:rennes&gt;,\n &lt;Site uid:sophia&gt;]\n\nIn [2]: # gk is your entry point\n</pre>\n</div>\n<div id=\"reference-api\">\n<h3>4.2 Reference API</h3>\n<div id=\"get-node-information\">\n<h4>4.2.1 Get node information</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">node_info</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"nancy\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"p\">[</span><span class=\"s2\">\"grisou\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"s2\">\"grisou-1\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"grisou-1 has </span><span class=\"si\">{threads}</span><span class=\"s2\"> threads and has </span><span class=\"si\">{ram}</span><span class=\"s2\"> bytes of RAM\"</span><span class=\"o\">.</span><span class=\"n\">format</span><span class=\"p\">(</span>\n    <span class=\"n\">threads</span><span class=\"o\">=</span><span class=\"n\">node_info</span><span class=\"o\">.</span><span class=\"n\">architecture</span><span class=\"p\">[</span><span class=\"s2\">\"nb_threads\"</span><span class=\"p\">],</span>\n    <span class=\"n\">ram</span><span class=\"o\">=</span><span class=\"n\">node_info</span><span class=\"o\">.</span><span class=\"n\">main_memory</span><span class=\"p\">[</span><span class=\"s2\">\"ram_size\"</span><span class=\"p\">]))</span>\n</pre>\n</div>\n<div id=\"get-versions-of-resources\">\n<h4>4.2.2 Get Versions of resources</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">root_versions</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">root</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">versions</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">root_versions</span><span class=\"p\">)</span>\n\n<span class=\"n\">rennes</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n<span class=\"n\">site_versions</span> <span class=\"o\">=</span> <span class=\"n\">rennes</span><span class=\"o\">.</span><span class=\"n\">versions</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">site_versions</span><span class=\"p\">)</span>\n\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rennes</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"p\">[</span><span class=\"s2\">\"paravance\"</span><span class=\"p\">]</span>\n<span class=\"n\">cluster_versions</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">versions</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">cluster_versions</span><span class=\"p\">)</span>\n\n<span class=\"n\">node_versions</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"p\">[</span><span class=\"s2\">\"paravance-1\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">node_versions</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"monitoring-api\">\n<h3>4.3 Monitoring API</h3>\n<h3 id=\"get-statuses-of-resources\"><span class=\"section-subtitle\">4.3.1 Get Statuses of resources</span></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">rennes</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n<span class=\"n\">site_statuses</span> <span class=\"o\">=</span> <span class=\"n\">rennes</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">site_statuses</span><span class=\"p\">)</span>\n\n<span class=\"n\">cluster</span> <span class=\"o\">=</span> <span class=\"n\">rennes</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"p\">[</span><span class=\"s2\">\"paravance\"</span><span class=\"p\">]</span>\n<span class=\"n\">cluster_statuses</span> <span class=\"o\">=</span> <span class=\"n\">cluster</span><span class=\"o\">.</span><span class=\"n\">status</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"job-api\">\n<h3>4.4 Job API</h3>\n<div id=\"job-filtering\">\n<h4>4.4.1 Job filtering</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># state=running will be placed in the query params</span>\n<span class=\"n\">running_jobs</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s2\">\"running\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">running_jobs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get a specific job by its uid</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"424242\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n<span class=\"c1\"># or using the bracket notation</span>\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"s2\">\"424242\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"submit-a-job\">\n<h4>4.4.2 Submit a job</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This is equivalent to gk.sites.get(\"rennes\")</span>\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s2\">\"running\"</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting for the job [</span><span class=\"si\">%s</span><span class=\"s2\">] to be running\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Assigned nodes : </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n<div id=\"deployment-api\">\n<h3>4.5 Deployment API</h3>\n<h3 id=\"deploy-an-environment\"><span class=\"section-subtitle\">4.5.1 Deploy an environment</span></h3>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This is equivalent to gk.sites.get(\"rennes\")</span>\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"types\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"deploy\"</span><span class=\"p\">]})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s2\">\"running\"</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting the job [</span><span class=\"si\">%s</span><span class=\"s2\">] to be running\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Assigned nodes : </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span><span class=\"p\">)</span>\n\n<span class=\"n\">deployment</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">deployments</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"nodes\"</span><span class=\"p\">:</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span><span class=\"p\">,</span>\n                                      <span class=\"s2\">\"environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debian9-x64-min\"</span><span class=\"p\">})</span>\n<span class=\"c1\"># To get SSH access to your nodes you can pass your public key</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># from pathlib import Path</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># key_path = Path.home().joinpath(\".ssh\", \"id_rsa.pub\")</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\">#</span>\n<span class=\"c1\"># deployment = site.deployments.create({\"nodes\": job.assigned_nodes,</span>\n<span class=\"c1\">#                                       \"environment\": \"debian9-x64-min\"</span>\n<span class=\"c1\">#                                       \"key\": key_path.read_text()})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"s2\">\"terminated\"</span><span class=\"p\">:</span>\n    <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting for the deployment [</span><span class=\"si\">%s</span><span class=\"s2\">] to be finished\"</span> <span class=\"o\">%</span> <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"id1\">\n<h3>4.6 Storage API</h3>\n<div id=\"get-storage-accesses\">\n<h4>4.6.1 Get Storage accesses</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s2\">\"msimonin\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">access</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"set-storage-accesses-e-g-for-vms\">\n<h4>4.6.2 Set storage accesses (e.g for vms)</h4>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">netaddr</span> <span class=\"kn\">import</span> <span class=\"n\">IPNetwork</span>\n<span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"resources\"</span><span class=\"p\">:</span> <span class=\"s2\">\"slash_22=1+nodes=1\"</span><span class=\"p\">})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s2\">\"running\"</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting the job [</span><span class=\"si\">%s</span><span class=\"s2\">] to be running\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">subnet</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">resources_by_type</span><span class=\"p\">[</span><span class=\"s1\">'subnets'</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">ip_network</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">ip</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">ip</span> <span class=\"ow\">in</span> <span class=\"n\">IPNetwork</span><span class=\"p\">(</span><span class=\"n\">subnet</span><span class=\"p\">)]</span>\n\n<span class=\"c1\"># create acces for all ips in the subnet</span>\n<span class=\"n\">access</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">storage</span><span class=\"p\">[</span><span class=\"s2\">\"msimonin\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">access</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"ipv4\"</span><span class=\"p\">:</span> <span class=\"n\">ip_network</span><span class=\"p\">,</span>\n                                                  <span class=\"s2\">\"termination\"</span><span class=\"p\">:</span> <span class=\"p\">{</span><span class=\"s2\">\"job\"</span><span class=\"p\">:</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">,</span>\n                                                                  <span class=\"s2\">\"site\"</span><span class=\"p\">:</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">}})</span>\n</pre>\n</div>\n</div>\n<div id=\"vlan-api\">\n<h3>4.7 Vlan API</h3>\n<div id=\"get-vlan-s\">\n<h4>4.7.1 Get vlan(s)</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># Get all vlans</span>\n<span class=\"n\">vlans</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlans</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vlans</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get on specific</span>\n<span class=\"n\">vlan</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlans</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"4\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vlan</span><span class=\"p\">)</span>\n\n<span class=\"n\">vlan</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlans</span><span class=\"p\">[</span><span class=\"s2\">\"4\"</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">vlan</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get vlan of some nodes</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlansnodes</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">({</span><span class=\"s2\">\"nodes\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"paravance-1.rennes.grid5000.fr\"</span><span class=\"p\">,</span> <span class=\"s2\">\"paravance-2.rennes.grid5000.fr\"</span><span class=\"p\">]}))</span>\n\n\n<span class=\"c1\"># Get nodes in vlan</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlans</span><span class=\"p\">[</span><span class=\"s2\">\"4\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">nodes</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">())</span>\n</pre>\n</div>\n<div id=\"set-nodes-in-vlan\">\n<h4>4.7.2 Set nodes in vlan</h4>\n<ul>\n<li><p>Putting primary interface in a vlan</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"resources\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{type='kavlan'}/vlan=1+nodes=1\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"types\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"deploy\"</span><span class=\"p\">]})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s2\">\"running\"</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting the job [</span><span class=\"si\">%s</span><span class=\"s2\">] to be runnning\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">deployment</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">deployments</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"nodes\"</span><span class=\"p\">:</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span><span class=\"p\">,</span>\n                                      <span class=\"s2\">\"environment\"</span><span class=\"p\">:</span> <span class=\"s2\">\"debian9-x64-min\"</span><span class=\"p\">,</span>\n                                      <span class=\"s2\">\"vlan\"</span><span class=\"p\">:</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">resources_by_type</span><span class=\"p\">[</span><span class=\"s2\">\"vlans\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">status</span> <span class=\"o\">!=</span> <span class=\"s2\">\"terminated\"</span><span class=\"p\">:</span>\n    <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting for the deployment [</span><span class=\"si\">%s</span><span class=\"s2\">] to be finished\"</span> <span class=\"o\">%</span> <span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">deployment</span><span class=\"o\">.</span><span class=\"n\">result</span><span class=\"p\">)</span>\n</pre>\n</li>\n<li><p>Putting the secondary interface in a vlan</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">_to_network_address</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"p\">,</span> <span class=\"n\">interface</span><span class=\"p\">):</span>\n    <span class=\"sd\">\"\"\"Translate a host to a network address\n    e.g:\n    paranoia-20.rennes.grid5000.fr -&gt; paranoia-20-eth2.rennes.grid5000.fr\n    \"\"\"</span>\n    <span class=\"n\">splitted</span> <span class=\"o\">=</span> <span class=\"n\">host</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)</span>\n    <span class=\"n\">splitted</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"n\">splitted</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">+</span> <span class=\"s2\">\"-\"</span> <span class=\"o\">+</span> <span class=\"n\">interface</span>\n\n    <span class=\"k\">return</span> <span class=\"s2\">\".\"</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">splitted</span><span class=\"p\">)</span>\n\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"resources\"</span><span class=\"p\">:</span> <span class=\"s2\">\"{type='kavlan'}/vlan=1+{cluster='paranoia'}nodes=1\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"types\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"deploy\"</span><span class=\"p\">]</span>\n<span class=\"p\">})</span>\n\n<span class=\"k\">while</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">state</span> <span class=\"o\">!=</span> <span class=\"s2\">\"running\"</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Waiting the job [</span><span class=\"si\">%s</span><span class=\"s2\">] to be runnning\"</span> <span class=\"o\">%</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">)</span>\n    <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n\n<span class=\"n\">vlanid</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">resources_by_type</span><span class=\"p\">[</span><span class=\"s2\">\"vlans\"</span><span class=\"p\">][</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n\n<span class=\"c1\"># we hard code the interface but this can be discovered in the node info</span>\n<span class=\"c1\"># TODO: write the code here to discover</span>\n<span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">_to_network_address</span><span class=\"p\">(</span><span class=\"n\">n</span><span class=\"p\">,</span> <span class=\"s2\">\"eth2\"</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">n</span> <span class=\"ow\">in</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># set in vlan</span>\n<span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">vlans</span><span class=\"p\">[</span><span class=\"n\">vlanid</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">submit</span><span class=\"p\">({</span><span class=\"s2\">\"nodes\"</span><span class=\"p\">:</span> <span class=\"n\">nodes</span><span class=\"p\">})</span>\n</pre>\n</li>\n</ul>\n</div>\n</div>\n<div id=\"metrics-api\">\n<h3>4.8 Metrics API</h3>\n<div id=\"get-the-timeseries-corresponding-to-a-job\">\n<h4>4.8.1 Get the timeseries corresponding to a job</h4>\n<p>Credits to <tt>lturpin</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">get_job_consumption</span><span class=\"p\">(</span><span class=\"n\">job_id</span><span class=\"p\">,</span> <span class=\"n\">gk</span><span class=\"p\">,</span> <span class=\"n\">site</span><span class=\"p\">):</span>\n    <span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"n\">site</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">metrics</span>\n    <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"n\">site</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"p\">[</span><span class=\"n\">job_id</span><span class=\"p\">]</span>\n    <span class=\"c1\"># nodes as list : \"cluster-number.site.grid5000.fr\"</span>\n    <span class=\"n\">nodes_dom</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">assigned_nodes</span>\n    <span class=\"c1\"># nodes as list : \"cluster-number\"</span>\n    <span class=\"n\">nodes</span> <span class=\"o\">=</span> <span class=\"nb\">map</span><span class=\"p\">(</span><span class=\"k\">lambda</span> <span class=\"n\">node_dom</span><span class=\"p\">:</span> <span class=\"n\">node_dom</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">(</span><span class=\"s1\">'.'</span><span class=\"p\">)[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">nodes_dom</span><span class=\"p\">)</span>\n    <span class=\"c1\"># nodes as string : \"cluster-number,cluster-number,...\"</span>\n    <span class=\"n\">nodes_str</span> <span class=\"o\">=</span> <span class=\"s1\">','</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">nodes</span><span class=\"p\">)</span>\n\n    <span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">started_at</span>\n    <span class=\"n\">end</span> <span class=\"o\">=</span> <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">stopped_at</span>\n    <span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n        <span class=\"s2\">\"only\"</span><span class=\"p\">:</span> <span class=\"n\">nodes_str</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"resolution\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"n\">start</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"n\">end</span>\n    <span class=\"p\">}</span>\n    <span class=\"n\">timeseries</span> <span class=\"o\">=</span> <span class=\"n\">metrics</span><span class=\"p\">[</span><span class=\"s2\">\"power\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">timeseries</span>\n\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">timeseries</span> <span class=\"o\">=</span> <span class=\"n\">get_job_consumption</span><span class=\"p\">(</span><span class=\"s2\">\"1092446\"</span><span class=\"p\">,</span> <span class=\"n\">gk</span><span class=\"p\">,</span> <span class=\"s2\">\"lyon\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeseries</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-some-timeseries-and-plot-them\">\n<h4>4.8.2 Get some timeseries (and plot them)</h4>\n<p>For this example you\u2019ll need <tt>matplotlib</tt>, <tt>seaborn</tt> and <tt>pandas</tt>.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pandas</span> <span class=\"k\">as</span> <span class=\"nn\">pd</span>\n<span class=\"kn\">import</span> <span class=\"nn\">matplotlib.pyplot</span> <span class=\"k\">as</span> <span class=\"nn\">plt</span>\n<span class=\"kn\">import</span> <span class=\"nn\">seaborn</span> <span class=\"k\">as</span> <span class=\"nn\">sns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">metrics</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"lyon\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">metrics</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"--- available metrics\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">())</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"---- power metric\"</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"p\">[</span><span class=\"s2\">\"power\"</span><span class=\"p\">])</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"----- a timeserie\"</span><span class=\"p\">)</span>\n<span class=\"n\">now</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">kwargs</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s2\">\"only\"</span><span class=\"p\">:</span> <span class=\"s2\">\"nova-1,nova-2,nova-3\"</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"resolution\"</span><span class=\"p\">:</span> <span class=\"mi\">1</span><span class=\"p\">,</span>\n    <span class=\"s2\">\"from\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">now</span> <span class=\"o\">-</span> <span class=\"mi\">600</span><span class=\"p\">),</span>\n    <span class=\"s2\">\"to\"</span><span class=\"p\">:</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">now</span><span class=\"p\">)</span>\n<span class=\"p\">}</span>\n<span class=\"n\">timeseries</span> <span class=\"o\">=</span> <span class=\"n\">metrics</span><span class=\"p\">[</span><span class=\"s2\">\"power\"</span><span class=\"p\">]</span><span class=\"o\">.</span><span class=\"n\">timeseries</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"o\">**</span><span class=\"n\">kwargs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># let's visualize this</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">()</span>\n<span class=\"k\">for</span> <span class=\"n\">timeserie</span> <span class=\"ow\">in</span> <span class=\"n\">timeseries</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">timeserie</span><span class=\"p\">)</span>\n    <span class=\"n\">timestamp</span> <span class=\"o\">=</span> <span class=\"n\">timeserie</span><span class=\"o\">.</span><span class=\"n\">timestamps</span>\n    <span class=\"n\">value</span> <span class=\"o\">=</span> <span class=\"n\">timeserie</span><span class=\"o\">.</span><span class=\"n\">values</span>\n    <span class=\"n\">measurement</span> <span class=\"o\">=</span> <span class=\"n\">timeserie</span><span class=\"o\">.</span><span class=\"n\">uid</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">concat</span><span class=\"p\">([</span><span class=\"n\">df</span><span class=\"p\">,</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">({</span>\n        <span class=\"s2\">\"timestamp\"</span><span class=\"p\">:</span> <span class=\"n\">timestamp</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"value\"</span><span class=\"p\">:</span> <span class=\"n\">value</span><span class=\"p\">,</span>\n        <span class=\"s2\">\"measurement\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"n\">measurement</span><span class=\"p\">]</span><span class=\"o\">*</span><span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">timestamp</span><span class=\"p\">)</span>\n    <span class=\"p\">})])</span>\n\n<span class=\"n\">sns</span><span class=\"o\">.</span><span class=\"n\">relplot</span><span class=\"p\">(</span><span class=\"n\">data</span><span class=\"o\">=</span><span class=\"n\">df</span><span class=\"p\">,</span>\n            <span class=\"n\">x</span><span class=\"o\">=</span><span class=\"s2\">\"timestamp\"</span><span class=\"p\">,</span>\n            <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"s2\">\"value\"</span><span class=\"p\">,</span>\n            <span class=\"n\">hue</span><span class=\"o\">=</span><span class=\"s2\">\"measurement\"</span><span class=\"p\">,</span>\n            <span class=\"n\">kind</span><span class=\"o\">=</span><span class=\"s2\">\"line\"</span><span class=\"p\">)</span>\n<span class=\"n\">plt</span><span class=\"o\">.</span><span class=\"n\">show</span><span class=\"p\">()</span>\n</pre>\n</div>\n</div>\n<div id=\"more-snippets\">\n<h3>4.9 More snippets</h3>\n<div id=\"site-of-a-cluster\">\n<h4>4.9.1 Site of a cluster</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"dahu\"</span><span class=\"p\">,</span> <span class=\"s2\">\"parasilo\"</span><span class=\"p\">,</span> <span class=\"s2\">\"chetemi\"</span><span class=\"p\">]</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"n\">matches</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n    <span class=\"n\">candidates</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n    <span class=\"n\">matching</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">uid</span> <span class=\"k\">for</span> <span class=\"n\">c</span> <span class=\"ow\">in</span> <span class=\"n\">candidates</span> <span class=\"k\">if</span> <span class=\"n\">c</span><span class=\"o\">.</span><span class=\"n\">uid</span> <span class=\"ow\">in</span> <span class=\"n\">clusters</span><span class=\"p\">]</span>\n    <span class=\"k\">if</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">matching</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"mi\">1</span><span class=\"p\">:</span>\n        <span class=\"n\">matches</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">site</span><span class=\"p\">,</span> <span class=\"n\">matching</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]))</span>\n        <span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">remove</span><span class=\"p\">(</span><span class=\"n\">matching</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"We found the following matches </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">matches</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"get-all-job-with-a-given-name-on-all-the-sites\">\n<h4>4.9.2 Get all job with a given name on all the sites</h4>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">NAME</span> <span class=\"o\">=</span> <span class=\"s2\">\"pyg5k\"</span>\n\n<span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span> <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n<span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n<span class=\"n\">site</span> <span class=\"o\">=</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">]</span>\n<span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"rennes\"</span><span class=\"p\">],</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"nancy\"</span><span class=\"p\">],</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"p\">[</span><span class=\"s2\">\"grenoble\"</span><span class=\"p\">]]</span>\n\n<span class=\"c1\"># creates some jobs</span>\n<span class=\"n\">jobs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                            <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">})</span>\n    <span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">(</span><span class=\"n\">job</span><span class=\"p\">)</span>\n\n<span class=\"n\">_jobs</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n<span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n    <span class=\"n\">_jobs</span><span class=\"o\">.</span><span class=\"n\">append</span><span class=\"p\">((</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">uid</span><span class=\"p\">,</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"n\">NAME</span><span class=\"p\">,</span>\n                                           <span class=\"n\">state</span><span class=\"o\">=</span><span class=\"s2\">\"waiting,launching,running\"</span><span class=\"p\">)))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"We found </span><span class=\"si\">%s</span><span class=\"s2\">\"</span> <span class=\"o\">%</span> <span class=\"n\">_jobs</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># deleting the jobs</span>\n<span class=\"k\">for</span> <span class=\"n\">job</span> <span class=\"ow\">in</span> <span class=\"n\">jobs</span><span class=\"p\">:</span>\n    <span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">()</span>\n</pre>\n</div>\n<div id=\"caching-api-responses\">\n<h4>4.9.3 Caching API responses</h4>\n<p>The Grid\u20195000 reference API is static. In this situation to speed up the\nrequests, one could leverage heavily on caching. Currently\n<tt><span class=\"pre\">python-grid5000</span></tt> doesn\u2019t do caching out-of the box but defers that to the\nconsuming application. There are many solutions to implement a cache.\nAmongst them LRU cache\n(<a href=\"https://docs.python.org/3/library/functools.html#functools.lru_cache\" rel=\"nofollow\">https://docs.python.org/3/library/functools.html#functools.lru_cache</a>)\nprovides an in-memory caching facilities but doesn\u2019t give you control on the\ncache. The ring library (<a href=\"https://ring-cache.readthedocs.io/en/stable/\" rel=\"nofollow\">https://ring-cache.readthedocs.io/en/stable/</a>) is\ngreat as it implements different backends for your cache (esp.\ncross-processes cache) and give you control on the cached object. Enough talking:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n<span class=\"kn\">import</span> <span class=\"nn\">threading</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">diskcache</span>\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n<span class=\"kn\">import</span> <span class=\"nn\">ring</span>\n\n\n<span class=\"n\">_api_lock</span> <span class=\"o\">=</span> <span class=\"n\">threading</span><span class=\"o\">.</span><span class=\"n\">Lock</span><span class=\"p\">()</span>\n<span class=\"c1\"># Keep track of the api client</span>\n<span class=\"n\">_api_client</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>\n\n<span class=\"n\">storage</span> <span class=\"o\">=</span> <span class=\"n\">diskcache</span><span class=\"o\">.</span><span class=\"n\">Cache</span><span class=\"p\">(</span><span class=\"s1\">'cachedir'</span><span class=\"p\">)</span>\n\n<span class=\"k\">def</span> <span class=\"nf\">get_api_client</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Gets the reference to the API cient (singleton).\"\"\"</span>\n    <span class=\"k\">with</span> <span class=\"n\">_api_lock</span><span class=\"p\">:</span>\n        <span class=\"k\">global</span> <span class=\"n\">_api_client</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"n\">_api_client</span><span class=\"p\">:</span>\n            <span class=\"n\">conf_file</span> <span class=\"o\">=</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">environ</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s2\">\"HOME\"</span><span class=\"p\">),</span>\n                                    <span class=\"s2\">\".python-grid5000.yaml\"</span><span class=\"p\">)</span>\n            <span class=\"n\">_api_client</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"o\">.</span><span class=\"n\">from_yaml</span><span class=\"p\">(</span><span class=\"n\">conf_file</span><span class=\"p\">)</span>\n\n        <span class=\"k\">return</span> <span class=\"n\">_api_client</span>\n\n\n<span class=\"nd\">@ring</span><span class=\"o\">.</span><span class=\"n\">disk</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_sites_obj</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Get all the sites.\"\"\"</span>\n    <span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">get_api_client</span><span class=\"p\">()</span>\n    <span class=\"k\">return</span> <span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n\n<span class=\"nd\">@ring</span><span class=\"o\">.</span><span class=\"n\">disk</span><span class=\"p\">(</span><span class=\"n\">storage</span><span class=\"p\">)</span>\n<span class=\"k\">def</span> <span class=\"nf\">get_all_clusters_obj</span><span class=\"p\">():</span>\n    <span class=\"sd\">\"\"\"Get all the clusters.\"\"\"</span>\n    <span class=\"n\">sites</span> <span class=\"o\">=</span> <span class=\"n\">get_sites_obj</span><span class=\"p\">()</span>\n    <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"p\">[]</span>\n    <span class=\"k\">for</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">sites</span><span class=\"p\">:</span>\n        <span class=\"c1\"># should we cache the list aswell ?</span>\n        <span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">extend</span><span class=\"p\">(</span><span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">clusters</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">())</span>\n    <span class=\"k\">return</span> <span class=\"n\">clusters</span>\n\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s2\">\"__main__\"</span><span class=\"p\">:</span>\n    <span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n    <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">get_all_clusters_obj</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Known key in the cache\"</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">get_all_clusters_obj</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">())</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"s2\">\"Calling again the function is now faster\"</span><span class=\"p\">)</span>\n    <span class=\"n\">clusters</span> <span class=\"o\">=</span> <span class=\"n\">get_all_clusters_obj</span><span class=\"p\">()</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clusters</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"using-grid5000-client-certificates\">\n<h4>4.9.4 Using Grid\u20195000 client certificates</h4>\n<p><tt><span class=\"pre\">python-grid5000</span></tt> can also be used as a trusted client with Grid\u20195000\ninternal certificate. In this mode users can pass the <tt>g5k_user</tt> argument\nto most calls to specify which user the API call should be made as. In\ncases where <tt>g5k_user</tt> is not specified API calls will be made as the\n<tt>anonymous</tt> user whose access is limited to the Grid\u20195000 reference API.\nIn this mode <tt><span class=\"pre\">python-grid5000</span></tt> does not store any login information, so\n<tt>g5k_user</tt> must be provided explicitly provided on every call that requires\none.</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">logging</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">grid5000</span> <span class=\"kn\">import</span> <span class=\"n\">Grid5000</span>\n\n<span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">basicConfig</span><span class=\"p\">(</span><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"n\">logging</span><span class=\"o\">.</span><span class=\"n\">DEBUG</span><span class=\"p\">)</span>\n\n<span class=\"n\">gk</span> <span class=\"o\">=</span> <span class=\"n\">Grid5000</span><span class=\"p\">(</span>\n   <span class=\"n\">uri</span><span class=\"o\">=</span><span class=\"s2\">\"https://api-ext.grid5000.fr/stable/\"</span><span class=\"p\">,</span>\n   <span class=\"n\">sslcert</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/ssl/certfile.cert\"</span><span class=\"p\">,</span>\n   <span class=\"n\">sslkey</span><span class=\"o\">=</span><span class=\"s2\">\"/path/to/ssl/keyfile.key\"</span>\n   <span class=\"p\">)</span>\n\n<span class=\"n\">gk</span><span class=\"o\">.</span><span class=\"n\">sites</span><span class=\"o\">.</span><span class=\"n\">list</span><span class=\"p\">()</span>\n\n<span class=\"n\">job</span> <span class=\"o\">=</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">jobs</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">({</span><span class=\"s2\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"pyg5k\"</span><span class=\"p\">,</span>\n                        <span class=\"s2\">\"command\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sleep 3600\"</span><span class=\"p\">},</span>\n                        <span class=\"n\">g5k_user</span> <span class=\"o\">=</span> <span class=\"s2\">\"auser1\"</span><span class=\"p\">)</span>\n\n\n<span class=\"c1\"># Since the 'anonymous' user can not inspect jobs the following call will raise exception</span>\n<span class=\"c1\"># python-grid5000.exceptions.Grid5000AuthenticationError: 401 Unauthorized</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Both following call work since any user can request info on any jobs.</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">(</span><span class=\"n\">g5k_user</span><span class=\"o\">=</span><span class=\"s1\">'auser1'</span><span class=\"p\">)</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">refresh</span><span class=\"p\">(</span><span class=\"n\">g5k_user</span><span class=\"o\">=</span><span class=\"s1\">'auser2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Some operations can only be performed by the jobs creator.</span>\n<span class=\"c1\"># The following call will raise exception</span>\n<span class=\"c1\"># pyg5k.exceptions.Grid5000DeleteError: 403 Unauthorized</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">g5k_user</span><span class=\"o\">=</span><span class=\"s1\">'auser2'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># This call works as expected</span>\n<span class=\"n\">job</span><span class=\"o\">.</span><span class=\"n\">delete</span><span class=\"p\">(</span><span class=\"n\">g5k_user</span><span class=\"o\">=</span><span class=\"s1\">'auser1'</span><span class=\"p\">)</span>\n</pre>\n</div>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6756332, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b427b986576096266d089d6b74676cf3", "sha256": "9f86ecc880247be308187dbc7279a2eadd4e2070bb017fb1eb9dcf96052e0d91"}, "downloads": -1, "filename": "python_grid5000-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b427b986576096266d089d6b74676cf3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15922, "upload_time": "2019-02-26T23:59:30", "upload_time_iso_8601": "2019-02-26T23:59:30.505918Z", "url": "https://files.pythonhosted.org/packages/09/fb/8626d58cd8b6603e6c78095914231dfeb83faf791515b692fe4de3b49797/python_grid5000-0.0.1-py3-none-any.whl", "yanked": false}], "0.0.10": [{"comment_text": "", "digests": {"md5": "1ce3fb0b406117f24728515809d84b51", "sha256": "febdf7014f79661915559e3e99439dddd1de59017cf2dd2d15280738a1a5e3d5"}, "downloads": -1, "filename": "python_grid5000-0.0.10-py3-none-any.whl", "has_sig": false, "md5_digest": "1ce3fb0b406117f24728515809d84b51", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18156, "upload_time": "2019-03-17T15:53:16", "upload_time_iso_8601": "2019-03-17T15:53:16.292690Z", "url": "https://files.pythonhosted.org/packages/b2/f1/76b078455783c1f371310975885e99e61fc36a48358cf3feaee7164df97e/python_grid5000-0.0.10-py3-none-any.whl", "yanked": false}], "0.0.11": [{"comment_text": "", "digests": {"md5": "e78f60678f6d064d3169dcb1c704f9d8", "sha256": "7eebe798241bbb3e0385d5482ab5a97ef1f9464fa141a6e8c86a554a9d149269"}, "downloads": -1, "filename": "python_grid5000-0.0.11-py3-none-any.whl", "has_sig": false, "md5_digest": "e78f60678f6d064d3169dcb1c704f9d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18279, "upload_time": "2019-03-18T09:19:39", "upload_time_iso_8601": "2019-03-18T09:19:39.018489Z", "url": "https://files.pythonhosted.org/packages/f3/b8/ae828fb7842e42e04883f2117f8c0077bd897c80d9e7f1902fdd424cb8c7/python_grid5000-0.0.11-py3-none-any.whl", "yanked": false}], "0.0.12": [{"comment_text": "", "digests": {"md5": "da73efa9f9936342a797e64c2959d771", "sha256": "1332cfbb65ad955e4bbe59d285eb0b0f23ac3993eb9242ed717db3f91942b0fc"}, "downloads": -1, "filename": "python_grid5000-0.0.12-py3-none-any.whl", "has_sig": false, "md5_digest": "da73efa9f9936342a797e64c2959d771", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18280, "upload_time": "2019-03-18T18:09:49", "upload_time_iso_8601": "2019-03-18T18:09:49.764565Z", "url": "https://files.pythonhosted.org/packages/2c/f3/ed3073565aeb59c9b576dd41255000dbdd3374df54924fe20dfd86e60f62/python_grid5000-0.0.12-py3-none-any.whl", "yanked": false}], "0.0.13": [{"comment_text": "", "digests": {"md5": "3589c2b8ca9deec3e82e8761221f0eca", "sha256": "dc911acf6b8e63f982f9984abdf404203aec45b69531b714f7ea3da64ac45fe0"}, "downloads": -1, "filename": "python_grid5000-0.0.13-py3-none-any.whl", "has_sig": false, "md5_digest": "3589c2b8ca9deec3e82e8761221f0eca", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18306, "upload_time": "2019-03-28T14:01:17", "upload_time_iso_8601": "2019-03-28T14:01:17.351392Z", "url": "https://files.pythonhosted.org/packages/72/1a/15e88ef3f1a74af7d4cf75c739868b965051ec39fd4cf338c5f77266d236/python_grid5000-0.0.13-py3-none-any.whl", "yanked": false}], "0.0.14": [{"comment_text": "", "digests": {"md5": "a31638be856eceb048e561090af81f8c", "sha256": "82a5c4615a40aedf63bd1d0a822ed3d71bbf13c812674da077e6e30aa371247c"}, "downloads": -1, "filename": "python_grid5000-0.0.14-py3-none-any.whl", "has_sig": false, "md5_digest": "a31638be856eceb048e561090af81f8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18386, "upload_time": "2019-04-20T20:40:06", "upload_time_iso_8601": "2019-04-20T20:40:06.375754Z", "url": "https://files.pythonhosted.org/packages/5f/fc/f71c30d4bdf949a4567332d17e40c3aa1145b11d6956db56421acc844b8f/python_grid5000-0.0.14-py3-none-any.whl", "yanked": false}], "0.0.15": [{"comment_text": "", "digests": {"md5": "528202722a2a6b10f09e160e1318d246", "sha256": "0553b545e1244b36269a2f0a2c44d99ceaacc6c6c6bb65cec233f8e7eacd4efc"}, "downloads": -1, "filename": "python_grid5000-0.0.15-py3-none-any.whl", "has_sig": false, "md5_digest": "528202722a2a6b10f09e160e1318d246", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18422, "upload_time": "2019-04-23T10:02:20", "upload_time_iso_8601": "2019-04-23T10:02:20.298409Z", "url": "https://files.pythonhosted.org/packages/22/ca/8a2dbdae21e74a4c7d5fabf471306c44ba684bff0cf6d7ed7b44769b528b/python_grid5000-0.0.15-py3-none-any.whl", "yanked": false}], "0.0.16": [{"comment_text": "", "digests": {"md5": "e9d0731ef290f89dff8c2620484ded8c", "sha256": "003436a7d90e8e1445a089efe228142b3c2152030da9e70b5799e8f41d5d86d5"}, "downloads": -1, "filename": "python_grid5000-0.0.16-py3-none-any.whl", "has_sig": false, "md5_digest": "e9d0731ef290f89dff8c2620484ded8c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18532, "upload_time": "2019-05-27T14:49:23", "upload_time_iso_8601": "2019-05-27T14:49:23.015483Z", "url": "https://files.pythonhosted.org/packages/54/8c/3b83fcaf5ccbc2a5452a7af4b405914e2f33b20567e89a3cc359b51e6a85/python_grid5000-0.0.16-py3-none-any.whl", "yanked": false}], "0.0.17": [{"comment_text": "", "digests": {"md5": "c168c4c0187c6016fba8705d273e838d", "sha256": "c9228c1a097b9f82c29bf8544c3d1143fe089baed75caf90c16266ade19ce0b7"}, "downloads": -1, "filename": "python_grid5000-0.0.17-py3-none-any.whl", "has_sig": false, "md5_digest": "c168c4c0187c6016fba8705d273e838d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18531, "upload_time": "2019-05-27T14:49:30", "upload_time_iso_8601": "2019-05-27T14:49:30.293357Z", "url": "https://files.pythonhosted.org/packages/31/80/7d67d420b86080b96e1baafe48c5c001fd7f0c7e58637b75b632c6ce33c2/python_grid5000-0.0.17-py3-none-any.whl", "yanked": false}], "0.0.18": [{"comment_text": "", "digests": {"md5": "f9f317d6b5d068af6fa5b24d07b3a38e", "sha256": "43be45d82581a279a01429bb354bc265eea60d701ec3ebc573562e5855df7166"}, "downloads": -1, "filename": "python_grid5000-0.0.18-py3-none-any.whl", "has_sig": false, "md5_digest": "f9f317d6b5d068af6fa5b24d07b3a38e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 18549, "upload_time": "2019-05-29T17:06:59", "upload_time_iso_8601": "2019-05-29T17:06:59.662275Z", "url": "https://files.pythonhosted.org/packages/fc/d9/3196c151e4ad60ccae7c1c23e16c094c140d185ce8be1fb3bcc28f1f40f0/python_grid5000-0.0.18-py3-none-any.whl", "yanked": false}], "0.0.19": [{"comment_text": "", "digests": {"md5": "9c82917477bd77c3d28ba18d53cf9bbc", "sha256": "edf74df5eafc1af700291c8ddcbf74aaf283e2f36e26a1e262adf52bc4e52fa4"}, "downloads": -1, "filename": "python_grid5000-0.0.19-py3-none-any.whl", "has_sig": false, "md5_digest": "9c82917477bd77c3d28ba18d53cf9bbc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19252, "upload_time": "2019-06-05T13:30:37", "upload_time_iso_8601": "2019-06-05T13:30:37.713497Z", "url": "https://files.pythonhosted.org/packages/ba/91/b0e488a2876320771502d2e3b484bb157031bddaed40a98330aa101effb4/python_grid5000-0.0.19-py3-none-any.whl", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "767effefcd35f4c3303685d4c662bd48", "sha256": "aea37a8e9b7aa03cd76651957b2d992832b6ba5823694b11389bcb3b314bfaee"}, "downloads": -1, "filename": "python_grid5000-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "767effefcd35f4c3303685d4c662bd48", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15921, "upload_time": "2019-02-27T00:03:43", "upload_time_iso_8601": "2019-02-27T00:03:43.490540Z", "url": "https://files.pythonhosted.org/packages/68/73/ccb8bdd98d67f428fbc836852169e5e9798209e8362fcd82a0244ceed9ae/python_grid5000-0.0.2-py3-none-any.whl", "yanked": false}], "0.0.20": [{"comment_text": "", "digests": {"md5": "125d5aea58e27a91f3a5c7eb2588c81f", "sha256": "96815341de9747c7d209369a252aef3f7ef0326eff1c9061c335fa26dd462a4f"}, "downloads": -1, "filename": "python_grid5000-0.0.20-py3-none-any.whl", "has_sig": false, "md5_digest": "125d5aea58e27a91f3a5c7eb2588c81f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19252, "upload_time": "2019-08-26T13:04:00", "upload_time_iso_8601": "2019-08-26T13:04:00.377687Z", "url": "https://files.pythonhosted.org/packages/d0/80/1aaff71d80489364a0835b7f794306267d7ba9ee37af5d2a88c43dcf8d6a/python_grid5000-0.0.20-py3-none-any.whl", "yanked": false}], "0.0.21": [{"comment_text": "", "digests": {"md5": "4d5c63c72fd50fcfd78a6d63f163b821", "sha256": "4e4a6cb16d9fb69c6e1a43483d2908dfac8e9166a66feb874111d4059d2fc4b5"}, "downloads": -1, "filename": "python_grid5000-0.0.21-py3-none-any.whl", "has_sig": false, "md5_digest": "4d5c63c72fd50fcfd78a6d63f163b821", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19235, "upload_time": "2019-08-31T10:36:01", "upload_time_iso_8601": "2019-08-31T10:36:01.823945Z", "url": "https://files.pythonhosted.org/packages/8c/e2/06afc1ba9ee128ca70341e9c2afa9014cf5fbdcaec1b9e115e66ee672b36/python_grid5000-0.0.21-py3-none-any.whl", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "577ea4dd4b6934a6d8ce34f3f9f523d8", "sha256": "20c58b78d8bceec440ca967c3d78a404ae2d743038fa80485ab28b97c01b10aa"}, "downloads": -1, "filename": "python_grid5000-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "577ea4dd4b6934a6d8ce34f3f9f523d8", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 15971, "upload_time": "2019-02-27T00:20:14", "upload_time_iso_8601": "2019-02-27T00:20:14.007936Z", "url": "https://files.pythonhosted.org/packages/5f/65/fb49c8899d40a2e64d89cb70ad098544aa00f9d06e7ed6991382ea9329a7/python_grid5000-0.0.3-py3-none-any.whl", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "a03f743f96d95348a04e99f6d0dc4d7e", "sha256": "d2356ff16754b99cae1fe2c22304b82e01d226fd9201fa6b30a1cfaa847bd9e6"}, "downloads": -1, "filename": "python_grid5000-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "a03f743f96d95348a04e99f6d0dc4d7e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16207, "upload_time": "2019-02-28T23:06:46", "upload_time_iso_8601": "2019-02-28T23:06:46.985812Z", "url": "https://files.pythonhosted.org/packages/08/09/db879f1023c39a0a572df5c005a570b4ac07542f7b4d56aa7b3a12f1f338/python_grid5000-0.0.4-py3-none-any.whl", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "6c0d05c9a4c55d3616abc6216b3e5155", "sha256": "401cb9d7e6fe24d1df57665234806f24199ad3f06370790159f05cc777c8d529"}, "downloads": -1, "filename": "python_grid5000-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "6c0d05c9a4c55d3616abc6216b3e5155", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16596, "upload_time": "2019-03-01T23:09:56", "upload_time_iso_8601": "2019-03-01T23:09:56.440624Z", "url": "https://files.pythonhosted.org/packages/8e/87/5035b35444d97735ceba22671abc0df7c685caa586441a99bf7cf2a8d9f0/python_grid5000-0.0.5-py3-none-any.whl", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "597a7755356d5148d625b9e94c76cfe5", "sha256": "4f33fac45ba05ba115329b686beafd5767e912f0f408084c840194eca981e0db"}, "downloads": -1, "filename": "python_grid5000-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "597a7755356d5148d625b9e94c76cfe5", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16689, "upload_time": "2019-03-03T12:37:01", "upload_time_iso_8601": "2019-03-03T12:37:01.615772Z", "url": "https://files.pythonhosted.org/packages/f3/fe/2c454f9dc701b3b5f88570678169f4b03e767b298777c295f53f9d0905a8/python_grid5000-0.0.6-py3-none-any.whl", "yanked": false}], "0.0.7": [{"comment_text": "", "digests": {"md5": "d1aa083621509d7c88fd8d5cb0a80ff6", "sha256": "a90926efc9083d962190113398f4451854391486fee22f0f8defa1c0ad4584a9"}, "downloads": -1, "filename": "python_grid5000-0.0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "d1aa083621509d7c88fd8d5cb0a80ff6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 16964, "upload_time": "2019-03-04T10:01:32", "upload_time_iso_8601": "2019-03-04T10:01:32.749212Z", "url": "https://files.pythonhosted.org/packages/b5/e8/32eb8baaede0166b471e9821077464180d370ea9e00bae37b03272ca7a0b/python_grid5000-0.0.7-py3-none-any.whl", "yanked": false}], "0.0.8": [{"comment_text": "", "digests": {"md5": "b6fd6fd7a84dc1741792f5a004cf17d6", "sha256": "a07d57fc8a7bc6a88b0b91927a4e8e263e472f0dfba964c56d41db55f4de88c1"}, "downloads": -1, "filename": "python_grid5000-0.0.8-py3-none-any.whl", "has_sig": false, "md5_digest": "b6fd6fd7a84dc1741792f5a004cf17d6", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17882, "upload_time": "2019-03-04T23:04:17", "upload_time_iso_8601": "2019-03-04T23:04:17.007112Z", "url": "https://files.pythonhosted.org/packages/5e/46/e4eb13df2c617e59f9fe4a21d733337e01601926951c541477880e9cd53c/python_grid5000-0.0.8-py3-none-any.whl", "yanked": false}], "0.0.9": [{"comment_text": "", "digests": {"md5": "30ec263acb01aa082f0a41bfaae8c5fa", "sha256": "a598e090f1bcc8b00b4892e4bc3e58ec7ecdfcef81c8a771f8228efee0abe1ff"}, "downloads": -1, "filename": "python_grid5000-0.0.9-py3-none-any.whl", "has_sig": false, "md5_digest": "30ec263acb01aa082f0a41bfaae8c5fa", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 17899, "upload_time": "2019-03-05T07:57:06", "upload_time_iso_8601": "2019-03-05T07:57:06.111728Z", "url": "https://files.pythonhosted.org/packages/47/23/84d6964f69f23245f7cba631876cf3ec7a4ed9bcf35afb4c0b47f1961cb1/python_grid5000-0.0.9-py3-none-any.whl", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "750831674f6503e968c2296b4db1698e", "sha256": "b29b07bd4b197747478e47f06d72d39850bdafa784eb8eb60412b278b64acaf4"}, "downloads": -1, "filename": "python_grid5000-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "750831674f6503e968c2296b4db1698e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19345, "upload_time": "2019-09-16T12:49:05", "upload_time_iso_8601": "2019-09-16T12:49:05.473595Z", "url": "https://files.pythonhosted.org/packages/eb/1c/defb20d327efb3c10d2e4523a425bc764a7051b78242425adf0d23221b5d/python_grid5000-0.1.0-py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "57491986ae512215c69c0ed6a0721d03", "sha256": "b832eee87dbb4c18626e06392fc267d3b4143f33674f43d6cda69835278a79b5"}, "downloads": -1, "filename": "python_grid5000-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "57491986ae512215c69c0ed6a0721d03", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19548, "upload_time": "2019-09-23T11:33:52", "upload_time_iso_8601": "2019-09-23T11:33:52.793489Z", "url": "https://files.pythonhosted.org/packages/5c/c9/9df08a6e1e79fd9d3f72f677d80ab62f5d299f4003a2aeeee06e89508cbf/python_grid5000-0.1.1-py3-none-any.whl", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "575812db591c2fad24bed895c99e9426", "sha256": "93a5ec2f38da1dbdbb431dd96995f6ef5b35bfcc67dc0edbe56d6688ef2af2de"}, "downloads": -1, "filename": "python_grid5000-0.1.2-py3-none-any.whl", "has_sig": false, "md5_digest": "575812db591c2fad24bed895c99e9426", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19546, "upload_time": "2019-09-23T14:32:17", "upload_time_iso_8601": "2019-09-23T14:32:17.774780Z", "url": "https://files.pythonhosted.org/packages/2e/de/27c981afa609ac941678c1cee07c3e57c10b50ec99b4ba6b76f88bd20bfc/python_grid5000-0.1.2-py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "7aaf88b3224ee4f06998750aa79e4e5e", "sha256": "200d89d9a1354709384495279bc623ff4d2fed0d8acf5576866632b6f0f99daf"}, "downloads": -1, "filename": "python_grid5000-0.1.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7aaf88b3224ee4f06998750aa79e4e5e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19608, "upload_time": "2019-10-09T12:50:16", "upload_time_iso_8601": "2019-10-09T12:50:16.522106Z", "url": "https://files.pythonhosted.org/packages/bf/c4/31f6201a1cba10a34c1bdb4cf9825e3e8cb4d864c23e68006c503b5303e6/python_grid5000-0.1.3-py3-none-any.whl", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "9731a861c5953332e5c2f6610436c14f", "sha256": "cdce26ea6eb8e212f7df0819812beae796cd477df26d9f9c1451e2070c48e0b7"}, "downloads": -1, "filename": "python_grid5000-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "9731a861c5953332e5c2f6610436c14f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19713, "upload_time": "2020-01-15T13:23:44", "upload_time_iso_8601": "2020-01-15T13:23:44.487959Z", "url": "https://files.pythonhosted.org/packages/14/28/6845fe128f36892e0fa0e3304f326de94671770723162cd555e5f60a8e5f/python_grid5000-0.2.0-py3-none-any.whl", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "040a9055f178104e52aa175725a305b3", "sha256": "59d3dce21dec0e3d2a088c910fc262d284fcf2f9fc86e9c898faaf7414f442c4"}, "downloads": -1, "filename": "python_grid5000-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "040a9055f178104e52aa175725a305b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 19712, "upload_time": "2020-01-15T13:27:14", "upload_time_iso_8601": "2020-01-15T13:27:14.554427Z", "url": "https://files.pythonhosted.org/packages/e3/d4/bbe1c9bf56eae7e66e0926fa08bdb50604cd700ea6c13aacf23916046c20/python_grid5000-0.2.1-py3-none-any.whl", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "f25017a8475358cf7e563d42f84b23b3", "sha256": "5dd560ea110f4b52706af952c5d4738e8ab9926b7d073b551420cddc74ff785b"}, "downloads": -1, "filename": "python_grid5000-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "f25017a8475358cf7e563d42f84b23b3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20248, "upload_time": "2020-02-10T10:09:18", "upload_time_iso_8601": "2020-02-10T10:09:18.561665Z", "url": "https://files.pythonhosted.org/packages/c9/4c/0aad9f61627b5dba1e4f3468e97f32f197052a1fefa54af3cd43f0877ec2/python_grid5000-0.2.2-py3-none-any.whl", "yanked": false}], "0.2.3": [{"comment_text": "", "digests": {"md5": "a3a617554aa623e84e5f7d5c00c81dcd", "sha256": "94026cf3efec6defb4337f7f8c114294711db03d652645802dafefeaabec565a"}, "downloads": -1, "filename": "python_grid5000-0.2.3-py3-none-any.whl", "has_sig": false, "md5_digest": "a3a617554aa623e84e5f7d5c00c81dcd", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21186, "upload_time": "2020-02-12T09:44:40", "upload_time_iso_8601": "2020-02-12T09:44:40.398629Z", "url": "https://files.pythonhosted.org/packages/ec/bb/61443d4c8fa33de3ad2b1c49cd1ba439bbe355f7e6fbed19e1b567fb67cc/python_grid5000-0.2.3-py3-none-any.whl", "yanked": false}], "0.2.4": [{"comment_text": "", "digests": {"md5": "b8aee6eb9b35ff8391362523ae442548", "sha256": "ecba6b6032bc0b08b06b640225ff01ed76464553639fd502c3c01d84b9afce67"}, "downloads": -1, "filename": "python_grid5000-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b8aee6eb9b35ff8391362523ae442548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21449, "upload_time": "2020-03-05T17:05:59", "upload_time_iso_8601": "2020-03-05T17:05:59.127636Z", "url": "https://files.pythonhosted.org/packages/ea/2b/b37c093e33964974d1fe2550b7bea2c2ac26d5116a7fbe71fad00d8c5180/python_grid5000-0.2.4-py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b8aee6eb9b35ff8391362523ae442548", "sha256": "ecba6b6032bc0b08b06b640225ff01ed76464553639fd502c3c01d84b9afce67"}, "downloads": -1, "filename": "python_grid5000-0.2.4-py3-none-any.whl", "has_sig": false, "md5_digest": "b8aee6eb9b35ff8391362523ae442548", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21449, "upload_time": "2020-03-05T17:05:59", "upload_time_iso_8601": "2020-03-05T17:05:59.127636Z", "url": "https://files.pythonhosted.org/packages/ea/2b/b37c093e33964974d1fe2550b7bea2c2ac26d5116a7fbe71fad00d8c5180/python_grid5000-0.2.4-py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:17:24 2020"}