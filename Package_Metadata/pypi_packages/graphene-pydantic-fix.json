{"info": {"author": "Rami Chowdhury", "author_email": "rami@upside.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: Apache Software License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Libraries"], "description": "# ![Graphene Logo](http://graphene-python.org/favicon.png) graphene-pydantic [![Build status](https://circleci.com/gh/upsidetravel/graphene-pydantic.svg?style=svg)](https://circleci.com/gh/upsidetravel/graphene-pydantic) [![PyPI version](https://badge.fury.io/py/graphene-pydantic.svg)](https://badge.fury.io/py/graphene-pydantic) [![Coverage Status](https://coveralls.io/repos/upsidetravel/graphene-pydantic/badge.svg?branch=master&service=github)](https://coveralls.io/github/upsidetravel/graphene-pydantic?branch=master)\n\n\n\nA [Pydantic](https://pydantic-docs.helpmanual.io/) integration for [Graphene](http://graphene-python.org/).\n\n## Installation\n\n```bash\npip install \"graphene-pydantic\"\n```\n\n## Examples\n\nHere is a simple Pydantic model:\n\n```python\nimport pydantic\n\nclass PersonModel(pydantic.BaseModel):\n    id: uuid.UUID\n    first_name: str\n    last_name: str\n\n```\n\nTo create a GraphQL schema for it you simply have to write the following:\n\n```python\nimport graphene\nfrom graphene_pydantic_fix import PydanticObjectType\n\nclass Person(PydanticObjectType):\n    class Meta:\n        model = PersonModel\n        # only return specified fields\n        only_fields = (\"name\",)\n        # exclude specified fields\n        exclude_fields = (\"id\",)\n\nclass Query(graphene.ObjectType):\n    people = graphene.List(Person)\n\n    def resolve_people(self, info):\n        return get_people()  # function returning `PersonModel`s\n\nschema = graphene.Schema(query=Query)\n```\n\nThen you can simply query the schema:\n\n```python\nquery = '''\n    query {\n      people {\n        firstName,\n        lastName\n      }\n    }\n'''\nresult = schema.execute(query)\n```\n\n### Forward declarations and circular references\n\n`graphene_pydantic` supports forward declarations and circular references, but you will need to call the `resolve_placeholders()` method to ensure the types are fully updated before you execute a GraphQL query. For instance:\n\n``` python\nclass NodeModel(BaseModel):\n    id: int\n    name: str\n    labels: 'LabelsModel'\n    \nclass LabelsModel(BaseModel):\n    node: NodeModel\n    labels: typing.List[str]\n    \nclass Node(PydanticObjectType):\n    class Meta:\n        model = NodeModel\n        \nclass Labels(PydanticObjectType):\n    class Meta:\n        model = LabelsModel\n        \n\nNode.resolve_placeholders()  # make the `labels` field work\nLabels.resolve_placeholders()  # make the `node` field work\n```\n\n### Full Examples\n\nPlease see [the examples directory](./examples) for more. \n\n### License\n\nThis project is under the [Apache License](./LICENSE.md).\n\n### Third Party Code\n\nThis project depends on third-party code which is subject to the licenses set forth in [Third Party Licenses](./THIRD_PARTY_LICENSES.md).\n\n### Contributing\n\nPlease see the [Contributing Guide](./CONTRIBUTING.md). Note that you must sign the [CLA](./CONTRIBUTOR_LICENSE_AGREEMENT.md).\n\n### Caveats\n\n#### Mappings\n\nNote that even though Pydantic is perfectly happy with fields that hold mappings (e.g. dictionaries), because [GraphQL's type system doesn't have them](https://graphql.org/learn/schema/) those fields can't be exported to Graphene types. For instance, this will fail with an error `Don't know how to handle mappings in Graphene`: \n\n``` python\nimport typing\nfrom graphene_pydantic import PydanticObjectType\n\nclass Pet:\n  pass\n\nclass Person:\n  name: str\n  pets_by_name: typing.Dict[str, Pet]\n  \nclass GraphQLPerson(PydanticObjectType):  \n  class Meta:\n    model = Person\n```\n\nHowever, note that if you use `exclude_fields` or `only_fields` to exclude those values, there won't be a problem:\n\n``` python\nclass GraphQLPerson(PydanticObjectType):\n  class Meta:\n    model = Person\n    exclude_fields = (\"pets_by_name\",)\n```\n\n#### Union types\n\nThere are some caveats when using Unions. Let's take the following pydantic models as an example for this section:\n\n```python\nclass EmployeeModel(pydantic.BaseModel):\n    name: str\n\n\nclass ManagerModel(EmployeeModel):\n    title: str\n\n\nclass DepartmentModel(pydantic.BaseModel):\n    employees: T.List[T.Union[ManagerModel, EmployeeModel]]\n```\n\n##### You have to implement the class method `is_type_of` in the graphene models\n\nTo get the Union between `ManagerModel` and `EmployeeModel` to successfully resolve\nin graphene, you need to implement `is_type_of` like this:\n\n```python\nclass Employee(PydanticObjectType):\n    class Meta:\n        model = EmployeeModel\n\n    @classmethod\n    def is_type_of(cls, root, info):\n        return isinstance(root, (cls, EmployeeModel))\n\n\nclass Manager(PydanticObjectType):\n    class Meta:\n        model = ManagerModel\n\n    @classmethod\n    def is_type_of(cls, root, info):\n        return isinstance(root, (cls, ManagerModel))\n\n\nclass Department(PydanticObjectType):\n    class Meta:\n        model = DepartmentModel\n```\n\nOtherwise GraphQL will throw an error similar to `\"[GraphQLError('Abstract type\nUnionOfManagerModelEmployeeModel must resolve to an Object type at runtime for\nfield Department.employees ...\"`\n\n##### For unions between subclasses, you need to put the subclass first in the type annotation\n\nLooking at the `employees` field above, if you write the type annotation with Employee first,\n`employees: T.List[T.Union[EmployeeModel, ManagerModel]]`, you will not be able to query\nmanager-related fields (in this case `title`). In a query containing a spread like this:\n\n```\n...on Employee {\n  name\n}\n...on Manager {\n  name\n  title\n}\n```\n\n... the objects will always resolve to being an `Employee`. This can be avoided if you put\nthe subclass first in the list of annotations: `employees: T.List[T.Union[ManagerModel, EmployeeModel]]`.\n\n##### Unions between subclasses don't work in Python 3.6\n\nIf a field on a model is a Union between a class and a subclass (as in our example),\nPython 3.6's typing will not preserve the Union and throws away the annotation for the subclass.\nSee [this issue](https://github.com/upsidetravel/graphene-pydantic/issues/11) for more details.\nThe solution at present is to use Python 3.7.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/Mc01/graphene-pydantic", "keywords": "api,graphql,protocol,rest,relay,graphene,pydantic,model", "license": "Apache-2.0", "maintainer": "", "maintainer_email": "", "name": "graphene-pydantic-fix", "package_url": "https://pypi.org/project/graphene-pydantic-fix/", "platform": "", "project_url": "https://pypi.org/project/graphene-pydantic-fix/", "project_urls": {"Homepage": "https://github.com/Mc01/graphene-pydantic", "Repository": "https://github.com/Mc01/graphene-pydantic"}, "release_url": "https://pypi.org/project/graphene-pydantic-fix/0.0.6/", "requires_dist": ["graphene (>=2.1.3,<3)", "pydantic (>=0.26,<=1.4)"], "requires_python": ">=3.6,<4.0", "summary": "Graphene Pydantic integration", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"Graphene Logo\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/68867db50e4c4f3925eb78a8e2d474b535283788/687474703a2f2f6772617068656e652d707974686f6e2e6f72672f66617669636f6e2e706e67\"> graphene-pydantic <a href=\"https://circleci.com/gh/upsidetravel/graphene-pydantic\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c6e207c1fcd23b8a962de414d3515581a5f245f/68747470733a2f2f636972636c6563692e636f6d2f67682f75707369646574726176656c2f6772617068656e652d707964616e7469632e7376673f7374796c653d737667\"></a> <a href=\"https://badge.fury.io/py/graphene-pydantic\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4735b1a0426e1386b9db6c12e597afd4d96ad613/68747470733a2f2f62616467652e667572792e696f2f70792f6772617068656e652d707964616e7469632e737667\"></a> <a href=\"https://coveralls.io/github/upsidetravel/graphene-pydantic?branch=master\" rel=\"nofollow\"><img alt=\"Coverage Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/687fb458d642ea43d20bb7f7f80efd5dcb05330e/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f75707369646574726176656c2f6772617068656e652d707964616e7469632f62616467652e7376673f6272616e63683d6d617374657226736572766963653d676974687562\"></a></h1>\n<p>A <a href=\"https://pydantic-docs.helpmanual.io/\" rel=\"nofollow\">Pydantic</a> integration for <a href=\"http://graphene-python.org/\" rel=\"nofollow\">Graphene</a>.</p>\n<h2>Installation</h2>\n<pre>pip install <span class=\"s2\">\"graphene-pydantic\"</span>\n</pre>\n<h2>Examples</h2>\n<p>Here is a simple Pydantic model:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pydantic</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">PersonModel</span><span class=\"p\">(</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"n\">uuid</span><span class=\"o\">.</span><span class=\"n\">UUID</span>\n    <span class=\"n\">first_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">last_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n</pre>\n<p>To create a GraphQL schema for it you simply have to write the following:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">graphene</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_pydantic_fix</span> <span class=\"kn\">import</span> <span class=\"n\">PydanticObjectType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">PersonModel</span>\n        <span class=\"c1\"># only return specified fields</span>\n        <span class=\"n\">only_fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"name\"</span><span class=\"p\">,)</span>\n        <span class=\"c1\"># exclude specified fields</span>\n        <span class=\"n\">exclude_fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"id\"</span><span class=\"p\">,)</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Query</span><span class=\"p\">(</span><span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">ObjectType</span><span class=\"p\">):</span>\n    <span class=\"n\">people</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">(</span><span class=\"n\">Person</span><span class=\"p\">)</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">resolve_people</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"n\">get_people</span><span class=\"p\">()</span>  <span class=\"c1\"># function returning `PersonModel`s</span>\n\n<span class=\"n\">schema</span> <span class=\"o\">=</span> <span class=\"n\">graphene</span><span class=\"o\">.</span><span class=\"n\">Schema</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"o\">=</span><span class=\"n\">Query</span><span class=\"p\">)</span>\n</pre>\n<p>Then you can simply query the schema:</p>\n<pre><span class=\"n\">query</span> <span class=\"o\">=</span> <span class=\"s1\">'''</span>\n<span class=\"s1\">    query {</span>\n<span class=\"s1\">      people {</span>\n<span class=\"s1\">        firstName,</span>\n<span class=\"s1\">        lastName</span>\n<span class=\"s1\">      }</span>\n<span class=\"s1\">    }</span>\n<span class=\"s1\">'''</span>\n<span class=\"n\">result</span> <span class=\"o\">=</span> <span class=\"n\">schema</span><span class=\"o\">.</span><span class=\"n\">execute</span><span class=\"p\">(</span><span class=\"n\">query</span><span class=\"p\">)</span>\n</pre>\n<h3>Forward declarations and circular references</h3>\n<p><code>graphene_pydantic</code> supports forward declarations and circular references, but you will need to call the <code>resolve_placeholders()</code> method to ensure the types are fully updated before you execute a GraphQL query. For instance:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">NodeModel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"nb\">id</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n    <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"s1\">'LabelsModel'</span>\n    \n<span class=\"k\">class</span> <span class=\"nc\">LabelsModel</span><span class=\"p\">(</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">node</span><span class=\"p\">:</span> <span class=\"n\">NodeModel</span>\n    <span class=\"n\">labels</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n    \n<span class=\"k\">class</span> <span class=\"nc\">Node</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">NodeModel</span>\n        \n<span class=\"k\">class</span> <span class=\"nc\">Labels</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">LabelsModel</span>\n        \n\n<span class=\"n\">Node</span><span class=\"o\">.</span><span class=\"n\">resolve_placeholders</span><span class=\"p\">()</span>  <span class=\"c1\"># make the `labels` field work</span>\n<span class=\"n\">Labels</span><span class=\"o\">.</span><span class=\"n\">resolve_placeholders</span><span class=\"p\">()</span>  <span class=\"c1\"># make the `node` field work</span>\n</pre>\n<h3>Full Examples</h3>\n<p>Please see <a href=\"./examples\" rel=\"nofollow\">the examples directory</a> for more.</p>\n<h3>License</h3>\n<p>This project is under the <a href=\"./LICENSE.md\" rel=\"nofollow\">Apache License</a>.</p>\n<h3>Third Party Code</h3>\n<p>This project depends on third-party code which is subject to the licenses set forth in <a href=\"./THIRD_PARTY_LICENSES.md\" rel=\"nofollow\">Third Party Licenses</a>.</p>\n<h3>Contributing</h3>\n<p>Please see the <a href=\"./CONTRIBUTING.md\" rel=\"nofollow\">Contributing Guide</a>. Note that you must sign the <a href=\"./CONTRIBUTOR_LICENSE_AGREEMENT.md\" rel=\"nofollow\">CLA</a>.</p>\n<h3>Caveats</h3>\n<h4>Mappings</h4>\n<p>Note that even though Pydantic is perfectly happy with fields that hold mappings (e.g. dictionaries), because <a href=\"https://graphql.org/learn/schema/\" rel=\"nofollow\">GraphQL's type system doesn't have them</a> those fields can't be exported to Graphene types. For instance, this will fail with an error <code>Don't know how to handle mappings in Graphene</code>:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">typing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">graphene_pydantic</span> <span class=\"kn\">import</span> <span class=\"n\">PydanticObjectType</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n  <span class=\"k\">pass</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n  <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n  <span class=\"n\">pets_by_name</span><span class=\"p\">:</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">Pet</span><span class=\"p\">]</span>\n  \n<span class=\"k\">class</span> <span class=\"nc\">GraphQLPerson</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>  \n  <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n</pre>\n<p>However, note that if you use <code>exclude_fields</code> or <code>only_fields</code> to exclude those values, there won't be a problem:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">GraphQLPerson</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n  <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n    <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">Person</span>\n    <span class=\"n\">exclude_fields</span> <span class=\"o\">=</span> <span class=\"p\">(</span><span class=\"s2\">\"pets_by_name\"</span><span class=\"p\">,)</span>\n</pre>\n<h4>Union types</h4>\n<p>There are some caveats when using Unions. Let's take the following pydantic models as an example for this section:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">EmployeeModel</span><span class=\"p\">(</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">ManagerModel</span><span class=\"p\">(</span><span class=\"n\">EmployeeModel</span><span class=\"p\">):</span>\n    <span class=\"n\">title</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">DepartmentModel</span><span class=\"p\">(</span><span class=\"n\">pydantic</span><span class=\"o\">.</span><span class=\"n\">BaseModel</span><span class=\"p\">):</span>\n    <span class=\"n\">employees</span><span class=\"p\">:</span> <span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"n\">T</span><span class=\"o\">.</span><span class=\"n\">Union</span><span class=\"p\">[</span><span class=\"n\">ManagerModel</span><span class=\"p\">,</span> <span class=\"n\">EmployeeModel</span><span class=\"p\">]]</span>\n</pre>\n<h5>You have to implement the class method <code>is_type_of</code> in the graphene models</h5>\n<p>To get the Union between <code>ManagerModel</code> and <code>EmployeeModel</code> to successfully resolve\nin graphene, you need to implement <code>is_type_of</code> like this:</p>\n<pre><span class=\"k\">class</span> <span class=\"nc\">Employee</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">EmployeeModel</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_type_of</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">EmployeeModel</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Manager</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">ManagerModel</span>\n\n    <span class=\"nd\">@classmethod</span>\n    <span class=\"k\">def</span> <span class=\"nf\">is_type_of</span><span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"n\">info</span><span class=\"p\">):</span>\n        <span class=\"k\">return</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">root</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"bp\">cls</span><span class=\"p\">,</span> <span class=\"n\">ManagerModel</span><span class=\"p\">))</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">Department</span><span class=\"p\">(</span><span class=\"n\">PydanticObjectType</span><span class=\"p\">):</span>\n    <span class=\"k\">class</span> <span class=\"nc\">Meta</span><span class=\"p\">:</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">DepartmentModel</span>\n</pre>\n<p>Otherwise GraphQL will throw an error similar to <code>\"[GraphQLError('Abstract type UnionOfManagerModelEmployeeModel must resolve to an Object type at runtime for field Department.employees ...\"</code></p>\n<h5>For unions between subclasses, you need to put the subclass first in the type annotation</h5>\n<p>Looking at the <code>employees</code> field above, if you write the type annotation with Employee first,\n<code>employees: T.List[T.Union[EmployeeModel, ManagerModel]]</code>, you will not be able to query\nmanager-related fields (in this case <code>title</code>). In a query containing a spread like this:</p>\n<pre><code>...on Employee {\n  name\n}\n...on Manager {\n  name\n  title\n}\n</code></pre>\n<p>... the objects will always resolve to being an <code>Employee</code>. This can be avoided if you put\nthe subclass first in the list of annotations: <code>employees: T.List[T.Union[ManagerModel, EmployeeModel]]</code>.</p>\n<h5>Unions between subclasses don't work in Python 3.6</h5>\n<p>If a field on a model is a Union between a class and a subclass (as in our example),\nPython 3.6's typing will not preserve the Union and throws away the annotation for the subclass.\nSee <a href=\"https://github.com/upsidetravel/graphene-pydantic/issues/11\" rel=\"nofollow\">this issue</a> for more details.\nThe solution at present is to use Python 3.7.</p>\n\n          </div>"}, "last_serial": 7007266, "releases": {"0.0.6": [{"comment_text": "", "digests": {"md5": "d83d3dc31efb6b7b328b0266c491c910", "sha256": "f1ce5861caa11804780b28ec04c7bc21f2b523b212d57bf19b673139c00773f6"}, "downloads": -1, "filename": "graphene_pydantic_fix-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d83d3dc31efb6b7b328b0266c491c910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10726, "upload_time": "2020-04-13T02:17:17", "upload_time_iso_8601": "2020-04-13T02:17:17.380728Z", "url": "https://files.pythonhosted.org/packages/af/a5/03772c5a8733cdcacaabbb819e1ca19c06bb04b882a96986a3cfe28a7975/graphene_pydantic_fix-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e810a466b6527c23d29d9d4a7f118074", "sha256": "d6ad2c8c7dd32aafcd78dbcb0eef32d46877d4863ea2bbb22c9a7d6f2ecd6a6d"}, "downloads": -1, "filename": "graphene_pydantic_fix-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e810a466b6527c23d29d9d4a7f118074", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11747, "upload_time": "2020-04-13T02:17:19", "upload_time_iso_8601": "2020-04-13T02:17:19.976187Z", "url": "https://files.pythonhosted.org/packages/55/5b/bafd014c778e4ca6eb129d878048bd15d1edf9e1c7ebfa7e0acac3297434/graphene_pydantic_fix-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d83d3dc31efb6b7b328b0266c491c910", "sha256": "f1ce5861caa11804780b28ec04c7bc21f2b523b212d57bf19b673139c00773f6"}, "downloads": -1, "filename": "graphene_pydantic_fix-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "d83d3dc31efb6b7b328b0266c491c910", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10726, "upload_time": "2020-04-13T02:17:17", "upload_time_iso_8601": "2020-04-13T02:17:17.380728Z", "url": "https://files.pythonhosted.org/packages/af/a5/03772c5a8733cdcacaabbb819e1ca19c06bb04b882a96986a3cfe28a7975/graphene_pydantic_fix-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e810a466b6527c23d29d9d4a7f118074", "sha256": "d6ad2c8c7dd32aafcd78dbcb0eef32d46877d4863ea2bbb22c9a7d6f2ecd6a6d"}, "downloads": -1, "filename": "graphene_pydantic_fix-0.0.6.tar.gz", "has_sig": false, "md5_digest": "e810a466b6527c23d29d9d4a7f118074", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11747, "upload_time": "2020-04-13T02:17:19", "upload_time_iso_8601": "2020-04-13T02:17:19.976187Z", "url": "https://files.pythonhosted.org/packages/55/5b/bafd014c778e4ca6eb129d878048bd15d1edf9e1c7ebfa7e0acac3297434/graphene_pydantic_fix-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:54:42 2020"}