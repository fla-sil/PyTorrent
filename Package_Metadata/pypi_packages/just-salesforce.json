{"info": {"author": "Zack Zhu", "author_email": "zhuyuzhou.dev@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta"], "description": "*****************\r\nJust Salesforce\r\n*****************\r\n\r\n.. image:: https://travis-ci.org/codingrhythm/just-salesforce.svg?branch=master \r\n\r\nJust Salesforce is a basic Salesforce.com REST API client built for Python 2.6, 2.7, 3.2 and 3.3. The goal is to provide a very low-level interface to the REST Resource and APEX API, returning a dictionary of the API JSON response.\r\n\r\nYou can find out more regarding the format of the results in the `Official Salesforce.com REST API Documentation`_\r\n\r\n.. _Official Salesforce.com REST API Documentation: http://www.salesforce.com/us/developer/docs/api_rest/index.htm\r\n\r\nExample\r\n-------\r\nThere are two ways to gain access to Salesforce\r\n\r\nThe first is to simply pass the domain of your Salesforce instance and an access token straight to ``Salesforce()``\r\n\r\nFor example::\r\n\r\n    from simple_salesforce import Salesforce\r\n    sf = Salesforce(instance='na1.salesforce.com', session_id='')\r\n\r\nIf you have the full URL of your instance (perhaps including the schema, as is included in the OAuth2 request process), you can pass that in instead using ``instance_url``::\r\n\r\n    from simple_salesforce import Salesforce\r\n    sf = Salesforce(instance_url='https://na1.salesforce.com', session_id='')\r\n\r\nThere are also two means of authentication, one that uses username, password and security token and the other that uses IP filtering, username, password  and organizationId\r\n\r\nTo login using the security token method, simply include the Salesforce method and pass in your Salesforce username, password and token (this is usually provided when you change your password)::\r\n\r\n    from simple_salesforce import Salesforce\r\n    sf = Salesforce(username='myemail@example.com', password='password', security_token='token')\r\n\r\nTo login using IP-whitelist Organization ID method, simply use your Salesforce username, password and organizationId::\r\n\r\n    from simple_salesforce import Salesforce\r\n    sf = Salesforce(password='password', username='myemail@example.com', organizationId='OrgId')\r\n\r\nIf you'd like to enter a sandbox, simply add ``sandbox=True`` to your ``Salesforce()`` call.\r\n\r\nFor example::\r\n\r\n    from simple_salesforce import Salesforce\r\n    sf = Salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', sandbox=True)\r\n\r\nNote that specifying if you want to use a sandbox is only necessary if you are using the built-in username/password/security token authentication and is used exclusively during the authentication step.\r\n\r\nRecord Management\r\n-----------------\r\n\r\nTo create a new 'Contact' in Salesforce::\r\n\r\n    sf.Contact.create({'LastName':'Smith','Email':'example@example.com'})\r\n\r\nThis will return a dictionary such as ``{u'errors': [], u'id': u'003e0000003GuNXAA0', u'success': True}``\r\n\r\nTo get a dictionary with all the information regarding that record, use::\r\n\r\n    contact = sf.Contact.get('003e0000003GuNXAA0')\r\n\r\nTo change that contact's last name from 'Smith' to 'Jones' and add a first name of 'John' use::\r\n\r\n    sf.Contact.update('003e0000003GuNXAA0',{'LastName': 'Jones', 'FirstName': 'John'})\r\n\r\nTo delete the contact::\r\n\r\n    sf.Contact.delete('003e0000003GuNXAA0')\r\n\r\nTo retrieve a list of deleted records between ``2013-10-20`` to ``2013-10-29`` (datetimes are required to be in UTC)::\r\n\r\n    import pytz\r\n    import datetime\r\n    end = datetime.datetime.now(pytz.UTC)  # we need to use UTC as salesforce API requires this!\r\n    sf.Contact.deleted(end - datetime.timedelta(days=10), end)\r\n\r\nTo retrieve a list of updated records between ``2014-03-20`` to ``2014-03-22`` (datetimes are required to be in UTC)::\r\n\r\n    import pytz\r\n    import datetime\r\n    end = datetime.datetime.now(pytz.UTC) # we need to use UTC as salesforce API requires this\r\n    sf.Contact.updated(end - datetime.timedelta(days=10), end)\r\n\r\nNote that Update, Delete and Upsert actions return the associated `Salesforce HTTP Status Code`_\r\n\r\n.. _Salesforce HTTP Status Code: http://www.salesforce.com/us/developer/docs/api_rest/Content/errorcodes.htm\r\n\r\nQueries\r\n-------\r\n\r\nIt's also possible to write select queries in Salesforce Object Query Language (SOQL) and search queries in Salesforce Object Search Language (SOSL).\r\n\r\nSOQL queries are done via\r\n\r\n::\r\n\r\n    sf.query(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\r\n\r\nIf, due to an especially large result, Salesforce adds a ``nextRecordsUrl`` to your query result, such as ``\"nextRecordsUrl\" : \"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\"``, you can pull the additional results with either the ID or the full URL (if using the full URL, you must pass 'True' as your second argument)\r\n\r\n::\r\n\r\n    sf.query_more(\"01gD0000002HU6KIAW-2000\")\r\n    sf.query_more(\"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\", True)\r\n\r\nAs a convenience, to retrieve all of the results in a single local method call use\r\n\r\n::\r\n\r\n    sf.query_all(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\r\n\r\nSOSL queries are done via::\r\n\r\n    sf.search(\"FIND {Jones}\")\r\n\r\nThere is also 'Quick Search', which inserts your query inside the {} in the SOSL syntax. Be careful, there is no escaping!\r\n\r\n::\r\n\r\n    sf.quick_search(\"Jones\")\r\n\r\nSearch and Quick Search return ``None`` if there are no records, otherwise they return a dictionary of search results.\r\n\r\nMore details about syntax is available on the `Salesforce Query Language Documentation Developer Website`_\r\n\r\n.. _Salesforce Query Language Documentation Developer Website: http://www.salesforce.com/us/developer/docs/soql_sosl/index.htm\r\n\r\nOther Options\r\n-------------\r\n\r\nTo insert or update (upsert) a record using an external ID, use::\r\n\r\n    sf.Contact.upsert('customExtIdField__c/11999',{'LastName': 'Smith','Email': 'smith@example.com'})\r\n\r\nTo retrieve basic metadata use::\r\n\r\n    sf.Contact.metadata()\r\n\r\nTo retrieve a description of the object, use::\r\n\r\n    sf.Contact.describe()\r\n\r\nTo retrieve a description of the record layout of an object by its record layout unique id, use::\r\n\r\n    sf.Contact.describe_layout('39wmxcw9r23r492')\r\n\r\nTo retrieve a list of top level description of instance metadata, user::\r\n\r\n    sf.describe()\r\n\r\n    for x in sf.describe()[\"sobjects\"]:\r\n      print x[\"label\"]\r\n\r\n\r\nUsing Apex\r\n----------\r\n\r\nYou can also use this library to call custom Apex methods::\r\n\r\n    payload = {\r\n      \"activity\": [\r\n        {\"user\": \"12345\", \"action\": \"update page\", \"time\": \"2014-04-21T13:00:15Z\"}\r\n      ]\r\n    }\r\n    result = sf.apexecute('User/Activity', method='POST', data=payload)\r\n\r\nThis would call the endpoint ``https://<instance>.salesforce.com/services/apexrest/User/Activity`` with ``data=`` as\r\nthe body content encoded with ``json.dumps``\r\n\r\nYou can read more about Apex on the `Force.com Apex Code Developer's Guide`_\r\n\r\n.. _Force.com Apex Code Developer's Guide: http://www.salesforce.com/us/developer/docs/apexcode\r\n\r\nAdditional Features\r\n-------------------\r\n\r\nThere are a few helper classes that are used internally and available to you.\r\n\r\nIncluded in them are ``SalesforceLogin``, which takes in a username, password, security token, optional boolean sandbox indicator and optional version and returns a touple of ``(session_id, sf_instance)`` where `session_id` is the session ID to use for authentication to Salesforce and ``sf_instance`` is the domain of the instance of Salesforce to use for the session.\r\n\r\nFor example, to use SalesforceLogin for a sandbox account you'd use::\r\n\r\n    from simple_salesforce import SalesforceLogin\r\n    session_id, instance = SalesforceLogin('myemail@example.com.sandbox', 'password', 'token', True)\r\n\r\nSimply leave off the final ``True`` if you do not wish to use a sandbox.\r\n\r\nAlso exposed is the ``SFType`` class, which is used internally by the ``__getattr__()`` method in the ``Salesforce()`` class and represents a specific SObject type. ``SFType`` requires ``object_name`` (i.e. ``Contact``), ``session_id`` (an authentication ID), ``sf_instance`` (hostname of your Salesforce instance), and an optional ``sf_version``\r\n\r\nTo add a Contact using the default version of the API you'd use::\r\n\r\n    from simple_salesforce import SFType\r\n    contact = SFType('Contact','sesssionid','na1.salesforce.com')\r\n    contact.create({'LastName':'Smith','Email':'example@example.com'})\r\n\r\nTo use a proxy server between your client and the SalesForce endpoint, use the proxies argument when creating SalesForce object.\r\nThe proxy argument is the same as what requests uses, a map of scheme to proxy URL::\r\n\r\n    proxies = {\r\n      \"http\": \"http://10.10.1.10:3128\",\r\n      \"https\": \"http://10.10.1.10:1080\",\r\n    }\r\n    SalesForce(instance='na1.salesforce.com', session_id='', proxies=proxies)\r\n\r\nAll results are returned as JSON converted OrderedDict to preserve order of keys from REST responses.\r\n\r\nAuthors & License\r\n-----------------\r\n\r\nThis library is a based on `Simple Salesforce`_. It is released under an open source Apache 2.0 license. Contributions are welcome and can be submitted via a pull request on the official `Github Repo`_.\r\n\r\n\r\n.. _Simple Salesforce: https://github.com/neworganizing/simple-salesforce\r\n.. _Github Repo: https://github.com/codingrhythm/just-salesforce", "description_content_type": null, "docs_url": null, "download_url": "https://github.com/codingrhythm/just-salesforce/archive/master.zip", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/codingrhythm/just-salesforce", "keywords": "salesforce", "license": "Apache 2.9", "maintainer": "Zack Zhu", "maintainer_email": "zhuyuzhou.dev@gmail.com", "name": "just-salesforce", "package_url": "https://pypi.org/project/just-salesforce/", "platform": "", "project_url": "https://pypi.org/project/just-salesforce/", "project_urls": {"Download": "https://github.com/codingrhythm/just-salesforce/archive/master.zip", "Homepage": "https://github.com/codingrhythm/just-salesforce"}, "release_url": "https://pypi.org/project/just-salesforce/0.1.0/", "requires_dist": null, "requires_python": null, "summary": "first release", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <img alt=\"https://travis-ci.org/codingrhythm/just-salesforce.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/33ecdd19669e4f69973ef413a32b2df304344a19/68747470733a2f2f7472617669732d63692e6f72672f636f64696e6772687974686d2f6a7573742d73616c6573666f7263652e7376673f6272616e63683d6d6173746572\">\n<p>Just Salesforce is a basic Salesforce.com REST API client built for Python 2.6, 2.7, 3.2 and 3.3. The goal is to provide a very low-level interface to the REST Resource and APEX API, returning a dictionary of the API JSON response.</p>\n<p>You can find out more regarding the format of the results in the <a href=\"http://www.salesforce.com/us/developer/docs/api_rest/index.htm\" rel=\"nofollow\">Official Salesforce.com REST API Documentation</a></p>\n<div id=\"example\">\n<h2>Example</h2>\n<p>There are two ways to gain access to Salesforce</p>\n<p>The first is to simply pass the domain of your Salesforce instance and an access token straight to <tt>Salesforce()</tt></p>\n<p>For example:</p>\n<pre>from simple_salesforce import Salesforce\nsf = Salesforce(instance='na1.salesforce.com', session_id='')\n</pre>\n<p>If you have the full URL of your instance (perhaps including the schema, as is included in the OAuth2 request process), you can pass that in instead using <tt>instance_url</tt>:</p>\n<pre>from simple_salesforce import Salesforce\nsf = Salesforce(instance_url='https://na1.salesforce.com', session_id='')\n</pre>\n<p>There are also two means of authentication, one that uses username, password and security token and the other that uses IP filtering, username, password  and organizationId</p>\n<p>To login using the security token method, simply include the Salesforce method and pass in your Salesforce username, password and token (this is usually provided when you change your password):</p>\n<pre>from simple_salesforce import Salesforce\nsf = Salesforce(username='myemail@example.com', password='password', security_token='token')\n</pre>\n<p>To login using IP-whitelist Organization ID method, simply use your Salesforce username, password and organizationId:</p>\n<pre>from simple_salesforce import Salesforce\nsf = Salesforce(password='password', username='myemail@example.com', organizationId='OrgId')\n</pre>\n<p>If you\u2019d like to enter a sandbox, simply add <tt>sandbox=True</tt> to your <tt>Salesforce()</tt> call.</p>\n<p>For example:</p>\n<pre>from simple_salesforce import Salesforce\nsf = Salesforce(username='myemail@example.com.sandbox', password='password', security_token='token', sandbox=True)\n</pre>\n<p>Note that specifying if you want to use a sandbox is only necessary if you are using the built-in username/password/security token authentication and is used exclusively during the authentication step.</p>\n</div>\n<div id=\"record-management\">\n<h2>Record Management</h2>\n<p>To create a new \u2018Contact\u2019 in Salesforce:</p>\n<pre>sf.Contact.create({'LastName':'Smith','Email':'example@example.com'})\n</pre>\n<p>This will return a dictionary such as <tt>{u'errors': [], u'id': u'003e0000003GuNXAA0', u'success': True}</tt></p>\n<p>To get a dictionary with all the information regarding that record, use:</p>\n<pre>contact = sf.Contact.get('003e0000003GuNXAA0')\n</pre>\n<p>To change that contact\u2019s last name from \u2018Smith\u2019 to \u2018Jones\u2019 and add a first name of \u2018John\u2019 use:</p>\n<pre>sf.Contact.update('003e0000003GuNXAA0',{'LastName': 'Jones', 'FirstName': 'John'})\n</pre>\n<p>To delete the contact:</p>\n<pre>sf.Contact.delete('003e0000003GuNXAA0')\n</pre>\n<p>To retrieve a list of deleted records between <tt><span class=\"pre\">2013-10-20</span></tt> to <tt><span class=\"pre\">2013-10-29</span></tt> (datetimes are required to be in UTC):</p>\n<pre>import pytz\nimport datetime\nend = datetime.datetime.now(pytz.UTC)  # we need to use UTC as salesforce API requires this!\nsf.Contact.deleted(end - datetime.timedelta(days=10), end)\n</pre>\n<p>To retrieve a list of updated records between <tt><span class=\"pre\">2014-03-20</span></tt> to <tt><span class=\"pre\">2014-03-22</span></tt> (datetimes are required to be in UTC):</p>\n<pre>import pytz\nimport datetime\nend = datetime.datetime.now(pytz.UTC) # we need to use UTC as salesforce API requires this\nsf.Contact.updated(end - datetime.timedelta(days=10), end)\n</pre>\n<p>Note that Update, Delete and Upsert actions return the associated <a href=\"http://www.salesforce.com/us/developer/docs/api_rest/Content/errorcodes.htm\" rel=\"nofollow\">Salesforce HTTP Status Code</a></p>\n</div>\n<div id=\"queries\">\n<h2>Queries</h2>\n<p>It\u2019s also possible to write select queries in Salesforce Object Query Language (SOQL) and search queries in Salesforce Object Search Language (SOSL).</p>\n<p>SOQL queries are done via</p>\n<pre>sf.query(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\n</pre>\n<p>If, due to an especially large result, Salesforce adds a <tt>nextRecordsUrl</tt> to your query result, such as <tt>\"nextRecordsUrl\" : <span class=\"pre\">\"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\"</span></tt>, you can pull the additional results with either the ID or the full URL (if using the full URL, you must pass \u2018True\u2019 as your second argument)</p>\n<pre>sf.query_more(\"01gD0000002HU6KIAW-2000\")\nsf.query_more(\"/services/data/v26.0/query/01gD0000002HU6KIAW-2000\", True)\n</pre>\n<p>As a convenience, to retrieve all of the results in a single local method call use</p>\n<pre>sf.query_all(\"SELECT Id, Email FROM Contact WHERE LastName = 'Jones'\")\n</pre>\n<p>SOSL queries are done via:</p>\n<pre>sf.search(\"FIND {Jones}\")\n</pre>\n<p>There is also \u2018Quick Search\u2019, which inserts your query inside the {} in the SOSL syntax. Be careful, there is no escaping!</p>\n<pre>sf.quick_search(\"Jones\")\n</pre>\n<p>Search and Quick Search return <tt>None</tt> if there are no records, otherwise they return a dictionary of search results.</p>\n<p>More details about syntax is available on the <a href=\"http://www.salesforce.com/us/developer/docs/soql_sosl/index.htm\" rel=\"nofollow\">Salesforce Query Language Documentation Developer Website</a></p>\n</div>\n<div id=\"other-options\">\n<h2>Other Options</h2>\n<p>To insert or update (upsert) a record using an external ID, use:</p>\n<pre>sf.Contact.upsert('customExtIdField__c/11999',{'LastName': 'Smith','Email': 'smith@example.com'})\n</pre>\n<p>To retrieve basic metadata use:</p>\n<pre>sf.Contact.metadata()\n</pre>\n<p>To retrieve a description of the object, use:</p>\n<pre>sf.Contact.describe()\n</pre>\n<p>To retrieve a description of the record layout of an object by its record layout unique id, use:</p>\n<pre>sf.Contact.describe_layout('39wmxcw9r23r492')\n</pre>\n<p>To retrieve a list of top level description of instance metadata, user:</p>\n<pre>sf.describe()\n\nfor x in sf.describe()[\"sobjects\"]:\n  print x[\"label\"]\n</pre>\n</div>\n<div id=\"using-apex\">\n<h2>Using Apex</h2>\n<p>You can also use this library to call custom Apex methods:</p>\n<pre>payload = {\n  \"activity\": [\n    {\"user\": \"12345\", \"action\": \"update page\", \"time\": \"2014-04-21T13:00:15Z\"}\n  ]\n}\nresult = sf.apexecute('User/Activity', method='POST', data=payload)\n</pre>\n<p>This would call the endpoint <tt><span class=\"pre\">https://&lt;instance&gt;.salesforce.com/services/apexrest/User/Activity</span></tt> with <tt>data=</tt> as\nthe body content encoded with <tt>json.dumps</tt></p>\n<p>You can read more about Apex on the <a href=\"http://www.salesforce.com/us/developer/docs/apexcode\" rel=\"nofollow\">Force.com Apex Code Developer\u2019s Guide</a></p>\n</div>\n<div id=\"additional-features\">\n<h2>Additional Features</h2>\n<p>There are a few helper classes that are used internally and available to you.</p>\n<p>Included in them are <tt>SalesforceLogin</tt>, which takes in a username, password, security token, optional boolean sandbox indicator and optional version and returns a touple of <tt>(session_id, sf_instance)</tt> where <cite>session_id</cite> is the session ID to use for authentication to Salesforce and <tt>sf_instance</tt> is the domain of the instance of Salesforce to use for the session.</p>\n<p>For example, to use SalesforceLogin for a sandbox account you\u2019d use:</p>\n<pre>from simple_salesforce import SalesforceLogin\nsession_id, instance = SalesforceLogin('myemail@example.com.sandbox', 'password', 'token', True)\n</pre>\n<p>Simply leave off the final <tt>True</tt> if you do not wish to use a sandbox.</p>\n<p>Also exposed is the <tt>SFType</tt> class, which is used internally by the <tt>__getattr__()</tt> method in the <tt>Salesforce()</tt> class and represents a specific SObject type. <tt>SFType</tt> requires <tt>object_name</tt> (i.e. <tt>Contact</tt>), <tt>session_id</tt> (an authentication ID), <tt>sf_instance</tt> (hostname of your Salesforce instance), and an optional <tt>sf_version</tt></p>\n<p>To add a Contact using the default version of the API you\u2019d use:</p>\n<pre>from simple_salesforce import SFType\ncontact = SFType('Contact','sesssionid','na1.salesforce.com')\ncontact.create({'LastName':'Smith','Email':'example@example.com'})\n</pre>\n<p>To use a proxy server between your client and the SalesForce endpoint, use the proxies argument when creating SalesForce object.\nThe proxy argument is the same as what requests uses, a map of scheme to proxy URL:</p>\n<pre>proxies = {\n  \"http\": \"http://10.10.1.10:3128\",\n  \"https\": \"http://10.10.1.10:1080\",\n}\nSalesForce(instance='na1.salesforce.com', session_id='', proxies=proxies)\n</pre>\n<p>All results are returned as JSON converted OrderedDict to preserve order of keys from REST responses.</p>\n</div>\n<div id=\"authors-license\">\n<h2>Authors &amp; License</h2>\n<p>This library is a based on <a href=\"https://github.com/neworganizing/simple-salesforce\" rel=\"nofollow\">Simple Salesforce</a>. It is released under an open source Apache 2.0 license. Contributions are welcome and can be submitted via a pull request on the official <a href=\"https://github.com/codingrhythm/just-salesforce\" rel=\"nofollow\">Github Repo</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 1205966, "releases": {"0.1.0": []}, "urls": [], "timestamp": "Fri May  8 00:51:02 2020"}