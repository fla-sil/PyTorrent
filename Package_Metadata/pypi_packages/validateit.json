{"info": {"author": "Damla Altun", "author_email": "initalize.damla@gmail.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7"], "description": "***********\nValidate It\n***********\n\nDataclass Validators.\n\ntypeforced decorator\n--------------------\nDataclasses module does not control types in runtime. With `validateit` you can force user to give propert date with propert type.\n`validateit` provides a class decorator for runtime typecheck. You have to decorate your dataclass with `@typeforced`.\n\n.. code-block:: python\n\n    >>> @typeforced\n    ... @dataclass\n    ... class Item:\n    ...     name: str\n    ...     idx : int\n    ...     owners : List[str]\n    ...\n    >>>\n\nLets try to create a valid Item\n\n.. code-block:: python\n\n    >>> Item(\"Sword\", 1, [\"damla\"])\n    Item(name='Sword', idx=1, owners=['damla'])\n\nFunny part :) Lets give int value to name field. \n\n.. code-block:: python\n\n    >>> Item(1515, 1, [\"damla\"])\n    TypeError: Unexpected type for 'name' (expected <class 'str'> but found <class 'int'>)\n\nAs you can see `typeguard` raised a TypeError because it expects a string but we give it an integer. \n\nLets make another example. Give a set object instead of List[str].\n\n.. code-block:: python\n\n    >>> Item(\"Sword\", 1, {\"damla\"})\n    TypeError: Unexpected type for 'owners' (expected typing.List[str] but found <class 'set'>)\n\nTypeValidator\n-------------\nValidates types for specific fields instead of all fields (if you want to check types of all fields in runtime use `typeforced`).\n\nLets make an pet. We must force user to give name as string but we dont care type of `idx`.\n\n.. code-block:: python\n    \n    >>> @dataclass\n    ... class Pet:\n    ...     idx: int\n    ...     name: str = field(default=TypeValidator())\n    ... \n    >>> Pet(15, \"Minnos\")\n    Pet(idx=15, name='Minnos')\n    >>> Pet(15, 1313)\n    TypeError: Unexpected type for 'name' (expected <class 'str'> but found <class 'int'>)\n    >>> Pet(\"fifteen\", \"Minnos\") # No error cuz it is not runtime typevalidated.\n    Pet(idx='fifteen', name='Minnos')\n\nIntegerValidator\n----------------\nSome integer specific validations. Can take `max` , `min` , `max_digits`, `min_digits`\n\n.. code-block:: python\n    \n    >>> @dataclass\n    ... class Integer:\n    ...     number : int = field(default=IntegerValidator(min=15, max=150))\n    ...     point  : int = field(default=IntegerValidator(min_digits=1, max_digits=10))\n    ...     def __str__(self):\n    ...         return f\"{self.number}.{self.point}\"\n    ... \n    >>> str(Integer(20, 3333))\n    '20.3333'\n    >>> Integer(14, 3333)\n    ValueError: Integer is not bigger than 15 (minimum limit)\n    >>> Integer(160, 3333)\n    ValueError: Integer is bigger than 150 (maximum limit)\n    >>> Integer(20, 339933993399339)\n    ValueError: Integer doesn't capable of having maximum 10 digits.\n    \nStringValidator\n---------------\nSome string specific validations. Can take `max_chars` , `max_chars` , `startswith`, `endswith`\n\n.. code-block:: python\n\n    >>> @dataclass\n    ... class Person:\n    ...     name: str = field(default=StringValidator(min_chars=5, max_chars=10))\n    ...     surname: str = field(default=StringValidator(startswith='a', endswith='n'))\n    ... \n    >>> Person(\"damla\", \"altun\")\n    Person(name='damla', surname='altun')\n    >>> Person(\"daml\", \"altun\")\n    ValueError: String doesn't capable of having minimum 5 chars.\n    >>> Person(\"damlaaaaaaaaa\", \"altun\")\n    ValueError: String doesn't capable of having maximum 10 chars.\n    >>> Person(\"damla\", \"xaltun\")\n    ValueError: String isn't starts with a\n    >>> Person(\"damla\", \"altunx\")\n    ValueError: String isn't ends with n", "description_content_type": "text/x-rst", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DamlaAltun/ValidateIt", "keywords": "", "license": "MIT", "maintainer": "Damla Altun", "maintainer_email": "initalize.damla@gmail.com", "name": "validateit", "package_url": "https://pypi.org/project/validateit/", "platform": "", "project_url": "https://pypi.org/project/validateit/", "project_urls": {"Homepage": "https://github.com/DamlaAltun/ValidateIt"}, "release_url": "https://pypi.org/project/validateit/1.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Dataclasses Validators", "version": "1.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Dataclass Validators.</p>\n<div id=\"typeforced-decorator\">\n<h2>typeforced decorator</h2>\n<p>Dataclasses module does not control types in runtime. With <cite>validateit</cite> you can force user to give propert date with propert type.\n<cite>validateit</cite> provides a class decorator for runtime typecheck. You have to decorate your dataclass with <cite>@typeforced</cite>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@typeforced</span>\n<span class=\"o\">...</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Item</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>\n<span class=\"o\">...</span>     <span class=\"n\">idx</span> <span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"o\">...</span>     <span class=\"n\">owners</span> <span class=\"p\">:</span> <span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span>\n</pre>\n<p>Lets try to create a valid Item</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"s2\">\"Sword\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"damla\"</span><span class=\"p\">])</span>\n<span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Sword'</span><span class=\"p\">,</span> <span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">owners</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s1\">'damla'</span><span class=\"p\">])</span>\n</pre>\n<p>Funny part :) Lets give int value to name field.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"mi\">1515</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"s2\">\"damla\"</span><span class=\"p\">])</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Unexpected</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"s1\">'name'</span> <span class=\"p\">(</span><span class=\"n\">expected</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">str</span><span class=\"s1\">'&gt; but found &lt;class '</span><span class=\"nb\">int</span><span class=\"s1\">'&gt;)</span>\n</pre>\n<p>As you can see <cite>typeguard</cite> raised a TypeError because it expects a string but we give it an integer.</p>\n<p>Lets make another example. Give a set object instead of List[str].</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Item</span><span class=\"p\">(</span><span class=\"s2\">\"Sword\"</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"p\">{</span><span class=\"s2\">\"damla\"</span><span class=\"p\">})</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Unexpected</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"s1\">'owners'</span> <span class=\"p\">(</span><span class=\"n\">expected</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">List</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span> <span class=\"n\">but</span> <span class=\"n\">found</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">set</span><span class=\"s1\">'&gt;)</span>\n</pre>\n</div>\n<div id=\"typevalidator\">\n<h2>TypeValidator</h2>\n<p>Validates types for specific fields instead of all fields (if you want to check types of all fields in runtime use <cite>typeforced</cite>).</p>\n<p>Lets make an pet. We must force user to give name as string but we dont care type of <cite>idx</cite>.</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Pet</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">idx</span><span class=\"p\">:</span> <span class=\"nb\">int</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">TypeValidator</span><span class=\"p\">())</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"s2\">\"Minnos\"</span><span class=\"p\">)</span>\n<span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Minnos'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"mi\">1313</span><span class=\"p\">)</span>\n<span class=\"ne\">TypeError</span><span class=\"p\">:</span> <span class=\"n\">Unexpected</span> <span class=\"nb\">type</span> <span class=\"k\">for</span> <span class=\"s1\">'name'</span> <span class=\"p\">(</span><span class=\"n\">expected</span> <span class=\"o\">&lt;</span><span class=\"k\">class</span> <span class=\"err\">'</span><span class=\"nc\">str</span><span class=\"s1\">'&gt; but found &lt;class '</span><span class=\"nb\">int</span><span class=\"s1\">'&gt;)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"s2\">\"fifteen\"</span><span class=\"p\">,</span> <span class=\"s2\">\"Minnos\"</span><span class=\"p\">)</span> <span class=\"c1\"># No error cuz it is not runtime typevalidated.</span>\n<span class=\"n\">Pet</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">=</span><span class=\"s1\">'fifteen'</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'Minnos'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"integervalidator\">\n<h2>IntegerValidator</h2>\n<p>Some integer specific validations. Can take <cite>max</cite> , <cite>min</cite> , <cite>max_digits</cite>, <cite>min_digits</cite></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Integer</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">number</span> <span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">IntegerValidator</span><span class=\"p\">(</span><span class=\"nb\">min</span><span class=\"o\">=</span><span class=\"mi\">15</span><span class=\"p\">,</span> <span class=\"nb\">max</span><span class=\"o\">=</span><span class=\"mi\">150</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"n\">point</span>  <span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">IntegerValidator</span><span class=\"p\">(</span><span class=\"n\">min_digits</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">max_digits</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"k\">def</span> <span class=\"fm\">__str__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n<span class=\"o\">...</span>         <span class=\"k\">return</span> <span class=\"sa\">f</span><span class=\"s2\">\"</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">number</span><span class=\"si\">}</span><span class=\"s2\">.</span><span class=\"si\">{</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">point</span><span class=\"si\">}</span><span class=\"s2\">\"</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">3333</span><span class=\"p\">))</span>\n<span class=\"s1\">'20.3333'</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">14</span><span class=\"p\">,</span> <span class=\"mi\">3333</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Integer</span> <span class=\"ow\">is</span> <span class=\"ow\">not</span> <span class=\"n\">bigger</span> <span class=\"n\">than</span> <span class=\"mi\">15</span> <span class=\"p\">(</span><span class=\"n\">minimum</span> <span class=\"n\">limit</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">160</span><span class=\"p\">,</span> <span class=\"mi\">3333</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Integer</span> <span class=\"ow\">is</span> <span class=\"n\">bigger</span> <span class=\"n\">than</span> <span class=\"mi\">150</span> <span class=\"p\">(</span><span class=\"n\">maximum</span> <span class=\"n\">limit</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Integer</span><span class=\"p\">(</span><span class=\"mi\">20</span><span class=\"p\">,</span> <span class=\"mi\">339933993399339</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">Integer</span> <span class=\"n\">doesn</span><span class=\"s1\">'t capable of having maximum 10 digits.</span>\n</pre>\n</div>\n<div id=\"stringvalidator\">\n<h2>StringValidator</h2>\n<p>Some string specific validations. Can take <cite>max_chars</cite> , <cite>max_chars</cite> , <cite>startswith</cite>, <cite>endswith</cite></p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"nd\">@dataclass</span>\n<span class=\"o\">...</span> <span class=\"k\">class</span> <span class=\"nc\">Person</span><span class=\"p\">:</span>\n<span class=\"o\">...</span>     <span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">StringValidator</span><span class=\"p\">(</span><span class=\"n\">min_chars</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"n\">max_chars</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>     <span class=\"n\">surname</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"n\">field</span><span class=\"p\">(</span><span class=\"n\">default</span><span class=\"o\">=</span><span class=\"n\">StringValidator</span><span class=\"p\">(</span><span class=\"n\">startswith</span><span class=\"o\">=</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">endswith</span><span class=\"o\">=</span><span class=\"s1\">'n'</span><span class=\"p\">))</span>\n<span class=\"o\">...</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"damla\"</span><span class=\"p\">,</span> <span class=\"s2\">\"altun\"</span><span class=\"p\">)</span>\n<span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'damla'</span><span class=\"p\">,</span> <span class=\"n\">surname</span><span class=\"o\">=</span><span class=\"s1\">'altun'</span><span class=\"p\">)</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"daml\"</span><span class=\"p\">,</span> <span class=\"s2\">\"altun\"</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"n\">doesn</span><span class=\"s1\">'t capable of having minimum 5 chars.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"damlaaaaaaaaa\"</span><span class=\"p\">,</span> <span class=\"s2\">\"altun\"</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"n\">doesn</span><span class=\"s1\">'t capable of having maximum 10 chars.</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"damla\"</span><span class=\"p\">,</span> <span class=\"s2\">\"xaltun\"</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"n\">isn</span><span class=\"s1\">'t starts with a</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">Person</span><span class=\"p\">(</span><span class=\"s2\">\"damla\"</span><span class=\"p\">,</span> <span class=\"s2\">\"altunx\"</span><span class=\"p\">)</span>\n<span class=\"ne\">ValueError</span><span class=\"p\">:</span> <span class=\"n\">String</span> <span class=\"n\">isn</span><span class=\"s1\">'t ends with n</span>\n</pre>\n</div>\n\n          </div>"}, "last_serial": 4369936, "releases": {"1.0.1": [{"comment_text": "", "digests": {"md5": "e817a0795930264c6468d79a5c5500f0", "sha256": "9892b4a5326ec26e711bfee2023dab6e862452a9fc0022e1789ff76235796967"}, "downloads": -1, "filename": "validateit-1.0.1.tar.gz", "has_sig": false, "md5_digest": "e817a0795930264c6468d79a5c5500f0", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3489, "upload_time": "2018-10-12T19:25:32", "upload_time_iso_8601": "2018-10-12T19:25:32.135166Z", "url": "https://files.pythonhosted.org/packages/bd/a7/742e3eb395a77fa14c02e14a6b4e3b7621f02199b377ad0d1ea41a46e352/validateit-1.0.1.tar.gz", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "51f5f8558db7b070721dc77659cc713c", "sha256": "2cbb53194be074ea8307b192acd176f0a982401b07c98c4c6f6643b7c454bcc8"}, "downloads": -1, "filename": "validateit-1.0.2.tar.gz", "has_sig": false, "md5_digest": "51f5f8558db7b070721dc77659cc713c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4155, "upload_time": "2018-10-12T19:39:08", "upload_time_iso_8601": "2018-10-12T19:39:08.547779Z", "url": "https://files.pythonhosted.org/packages/a1/e2/7007bab64da65fee2181a675e8c2fb04ea7f58e93e9d49ee9065440e0e64/validateit-1.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "51f5f8558db7b070721dc77659cc713c", "sha256": "2cbb53194be074ea8307b192acd176f0a982401b07c98c4c6f6643b7c454bcc8"}, "downloads": -1, "filename": "validateit-1.0.2.tar.gz", "has_sig": false, "md5_digest": "51f5f8558db7b070721dc77659cc713c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 4155, "upload_time": "2018-10-12T19:39:08", "upload_time_iso_8601": "2018-10-12T19:39:08.547779Z", "url": "https://files.pythonhosted.org/packages/a1/e2/7007bab64da65fee2181a675e8c2fb04ea7f58e93e9d49ee9065440e0e64/validateit-1.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:38:08 2020"}