{"info": {"author": "Luis Caba\u00f1ero G\u00f3mez", "author_email": "Luis.Cabanero@uclm.es", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Scientific/Engineering"], "description": "# eeglib\n\nThe module eeglib is a library for python 3.4+ that aims to be a set of tools to analyse EEG signals. It defines some data structures aswell as some processings in order to make easier to work with EEG data.\n\n## Main features\n* Different types of processings\n    * FFT\n    * Averaged amplitude for each band\n    * Synchronization Likelihood\n    * Petrosian and Higuchi Fractal Dimensions\n    * Hjorth Parameters\n    * Detrended Fluctuation Analysis\n    * Multiscale Sample Entropy\n    * Lempel-Ziv Complexity\n    * Cross Correlation Coeficient\n* Load data from CSV files\n* Works with windows\n* Flexible to use\n\n## Installation\n\nInstallation using pip:\n\n`$ pip install eeglib`\n\n## Dependencies\n\n* numpy\n* numba\n* scipy\n* sklearn\n\n# Getting started\n\n## Basic example\n\nThe next example shows a basic usage of the library. In it is shown how to load a file and apply a processing (Petrosian Fractal Dimension) to the data in windows of all the data.\n\n```python\nfrom eeglib.helpers import CSVHelper\n\nhelper= CSVHelper(\"fake_EEG_signal.csv\")\n\nfor eeg in helper:\n    print(eeg.PFD())\n```\n\nThis will show this:\n\n```python\n[ 1.03089233  1.03229887  1.03181488  1.03123267  1.03069761]\n```\nThis returns an array of the same size of the channels of the data (5) and each position of the array correspond with each channel.\n\n## Using windows\n\nThe previous example applies the PFD to all the data in the file, but you may want to segment the data in different windows and that can be done in the next way:\n\n```python\nhelper= CSVHelper(\"fake_EEG_signal.csv\",windowSize=256)\n\nfor eeg in helper:\n    print(eeg.PFD())\n```\n\nThis will show this:\n\n```python\n[ 1.03922468  1.03897773  1.03971798  1.03674636  1.03873059]\n[ 1.03848326  1.04168343  1.04094783  1.04168343  1.03699509]\n[ 1.03996434  1.04045647  1.03996434  1.03774006  1.03947143]\n[ 1.03749194  1.04045647  1.03897773  1.0402105   1.03873059]\n```\n\nNow the function has been called 4 times, this is because of the data has a lenght of 1024 samples and the window selected has a size of 256, so the windows contained in the data are 1024/256=4.\n\n## Using iterations\n\nNow you may want to move the windows in another ways, like the ones that are shown in the next image:\n![windows](/Examples/slidingWindow.png)\n\nSo, if you want to make the windows overlap between them you can do it this way:\n\n```python\nhelper= CSVHelper(\"fake_EEG_signal.csv\",windowSize=256)\n\nfor eeg in helper[::128]:\n    print(eeg.PFD())\n```\n\n## Preprocessing\n\nMaybe you want to preprocess the signals stored in the window before extracting features from them. Currently this library allows the next Preprocessings:\n* Bandpass filtering\n* Z-Scores normalization\n* Independent Component Analysis\n\nThese preprocessings can be applied at the load of the data by the Helpers:\n```python\nhelper = CSVHelper(\"fake_EEG_signal.csv\",\n        lowpass=30, highpass=1, normalize=True, ICA=True)\n```\n\n## Using wrappers\n\nA Wrapper is an object that envelops a helper and simplifies the proccess of computing features that can be later be used, for example, in machine learning algorithms. The next example shows an example of how wrappers can be used:\n\n```python\nfrom eeglib import wrapper, helpers\n\nhelper = helpers.CSVHelper(\"fake_EEG_signal.csv\", windowSize=128)\n\nwrap = wrapper.Wrapper(helper)\n\nwrap.addFeature.HFD()\nwrap.addFeature.getFourierTransform()\nwrap.addFeature.synchronizationLikelihood()\n\nfeatures=wrap.getAllFeatures()\n```\nSo, the scheme to follow with wrappers is the next:\n1. Create the Helper object.\n2. Create the wrapper object.\n3. Select the desired features to compute. They can be parameterized by adding the parameters just behind the name.\n4. Call the method \"getAllFeatures()\" in order to compute every feature from every window at once or iterate over the Wrapper object for obtaining the features of each window. They are returned as a pandas.DataFrame or a pandas.Series.\n\n# Documents related\nThis library was initialy a Final Degree Project and you can find the documentation of the development in the next link:\n\n[Final Degree Project Documentation (Spanish)](https://ruidera.uclm.es/xmlui/handle/10578/15441)\n\nLater it was extented as part of a Master's thesis that can be found in the next link:\n\n[Master's thesis (Spanish)](https://ruidera.uclm.es/xmlui/handle/10578/19062)\n\n\n## Papers\n\nThere are also some papers related to this library that can be seen bellow:\n\n### Open Access\n\n* [Computational EEG Analysis Techniques When Playing Video Games: A Systematic Review](https://www.mdpi.com/2504-3900/2/19/483)\n* [Analysis of Cognitive Load Using EEG when Interacting with Mobile Devices](https://www.mdpi.com/2504-3900/31/1/70)\n\n### Not open access\n\n* [eeglib: computational analysis of cognitive performance during the use of video games](https://link.springer.com/article/10.1007%2Fs12652-019-01592-9)\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "lib EEG signal analysis", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "eeglib", "package_url": "https://pypi.org/project/eeglib/", "platform": "", "project_url": "https://pypi.org/project/eeglib/", "project_urls": null, "release_url": "https://pypi.org/project/eeglib/0.3.5/", "requires_dist": ["numpy", "scipy", "sklearn", "numba", "pandas", "pyedflib", "fastdtw"], "requires_python": "", "summary": "A library with some tools and functions for EEG signal analysis", "version": "0.3.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>eeglib</h1>\n<p>The module eeglib is a library for python 3.4+ that aims to be a set of tools to analyse EEG signals. It defines some data structures aswell as some processings in order to make easier to work with EEG data.</p>\n<h2>Main features</h2>\n<ul>\n<li>Different types of processings\n<ul>\n<li>FFT</li>\n<li>Averaged amplitude for each band</li>\n<li>Synchronization Likelihood</li>\n<li>Petrosian and Higuchi Fractal Dimensions</li>\n<li>Hjorth Parameters</li>\n<li>Detrended Fluctuation Analysis</li>\n<li>Multiscale Sample Entropy</li>\n<li>Lempel-Ziv Complexity</li>\n<li>Cross Correlation Coeficient</li>\n</ul>\n</li>\n<li>Load data from CSV files</li>\n<li>Works with windows</li>\n<li>Flexible to use</li>\n</ul>\n<h2>Installation</h2>\n<p>Installation using pip:</p>\n<p><code>$ pip install eeglib</code></p>\n<h2>Dependencies</h2>\n<ul>\n<li>numpy</li>\n<li>numba</li>\n<li>scipy</li>\n<li>sklearn</li>\n</ul>\n<h1>Getting started</h1>\n<h2>Basic example</h2>\n<p>The next example shows a basic usage of the library. In it is shown how to load a file and apply a processing (Petrosian Fractal Dimension) to the data in windows of all the data.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eeglib.helpers</span> <span class=\"kn\">import</span> <span class=\"n\">CSVHelper</span>\n\n<span class=\"n\">helper</span><span class=\"o\">=</span> <span class=\"n\">CSVHelper</span><span class=\"p\">(</span><span class=\"s2\">\"fake_EEG_signal.csv\"</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">eeg</span> <span class=\"ow\">in</span> <span class=\"n\">helper</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">eeg</span><span class=\"o\">.</span><span class=\"n\">PFD</span><span class=\"p\">())</span>\n</pre>\n<p>This will show this:</p>\n<pre><span class=\"p\">[</span> <span class=\"mf\">1.03089233</span>  <span class=\"mf\">1.03229887</span>  <span class=\"mf\">1.03181488</span>  <span class=\"mf\">1.03123267</span>  <span class=\"mf\">1.03069761</span><span class=\"p\">]</span>\n</pre>\n<p>This returns an array of the same size of the channels of the data (5) and each position of the array correspond with each channel.</p>\n<h2>Using windows</h2>\n<p>The previous example applies the PFD to all the data in the file, but you may want to segment the data in different windows and that can be done in the next way:</p>\n<pre><span class=\"n\">helper</span><span class=\"o\">=</span> <span class=\"n\">CSVHelper</span><span class=\"p\">(</span><span class=\"s2\">\"fake_EEG_signal.csv\"</span><span class=\"p\">,</span><span class=\"n\">windowSize</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">eeg</span> <span class=\"ow\">in</span> <span class=\"n\">helper</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">eeg</span><span class=\"o\">.</span><span class=\"n\">PFD</span><span class=\"p\">())</span>\n</pre>\n<p>This will show this:</p>\n<pre><span class=\"p\">[</span> <span class=\"mf\">1.03922468</span>  <span class=\"mf\">1.03897773</span>  <span class=\"mf\">1.03971798</span>  <span class=\"mf\">1.03674636</span>  <span class=\"mf\">1.03873059</span><span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mf\">1.03848326</span>  <span class=\"mf\">1.04168343</span>  <span class=\"mf\">1.04094783</span>  <span class=\"mf\">1.04168343</span>  <span class=\"mf\">1.03699509</span><span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mf\">1.03996434</span>  <span class=\"mf\">1.04045647</span>  <span class=\"mf\">1.03996434</span>  <span class=\"mf\">1.03774006</span>  <span class=\"mf\">1.03947143</span><span class=\"p\">]</span>\n<span class=\"p\">[</span> <span class=\"mf\">1.03749194</span>  <span class=\"mf\">1.04045647</span>  <span class=\"mf\">1.03897773</span>  <span class=\"mf\">1.0402105</span>   <span class=\"mf\">1.03873059</span><span class=\"p\">]</span>\n</pre>\n<p>Now the function has been called 4 times, this is because of the data has a lenght of 1024 samples and the window selected has a size of 256, so the windows contained in the data are 1024/256=4.</p>\n<h2>Using iterations</h2>\n<p>Now you may want to move the windows in another ways, like the ones that are shown in the next image:\n<img alt=\"windows\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/05c1e58708b0a0c0f27c5772ef8ed1c428d76042/2f4578616d706c65732f736c6964696e6757696e646f772e706e67\"></p>\n<p>So, if you want to make the windows overlap between them you can do it this way:</p>\n<pre><span class=\"n\">helper</span><span class=\"o\">=</span> <span class=\"n\">CSVHelper</span><span class=\"p\">(</span><span class=\"s2\">\"fake_EEG_signal.csv\"</span><span class=\"p\">,</span><span class=\"n\">windowSize</span><span class=\"o\">=</span><span class=\"mi\">256</span><span class=\"p\">)</span>\n\n<span class=\"k\">for</span> <span class=\"n\">eeg</span> <span class=\"ow\">in</span> <span class=\"n\">helper</span><span class=\"p\">[::</span><span class=\"mi\">128</span><span class=\"p\">]:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">eeg</span><span class=\"o\">.</span><span class=\"n\">PFD</span><span class=\"p\">())</span>\n</pre>\n<h2>Preprocessing</h2>\n<p>Maybe you want to preprocess the signals stored in the window before extracting features from them. Currently this library allows the next Preprocessings:</p>\n<ul>\n<li>Bandpass filtering</li>\n<li>Z-Scores normalization</li>\n<li>Independent Component Analysis</li>\n</ul>\n<p>These preprocessings can be applied at the load of the data by the Helpers:</p>\n<pre><span class=\"n\">helper</span> <span class=\"o\">=</span> <span class=\"n\">CSVHelper</span><span class=\"p\">(</span><span class=\"s2\">\"fake_EEG_signal.csv\"</span><span class=\"p\">,</span>\n        <span class=\"n\">lowpass</span><span class=\"o\">=</span><span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"n\">highpass</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">normalize</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">ICA</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<h2>Using wrappers</h2>\n<p>A Wrapper is an object that envelops a helper and simplifies the proccess of computing features that can be later be used, for example, in machine learning algorithms. The next example shows an example of how wrappers can be used:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">eeglib</span> <span class=\"kn\">import</span> <span class=\"n\">wrapper</span><span class=\"p\">,</span> <span class=\"n\">helpers</span>\n\n<span class=\"n\">helper</span> <span class=\"o\">=</span> <span class=\"n\">helpers</span><span class=\"o\">.</span><span class=\"n\">CSVHelper</span><span class=\"p\">(</span><span class=\"s2\">\"fake_EEG_signal.csv\"</span><span class=\"p\">,</span> <span class=\"n\">windowSize</span><span class=\"o\">=</span><span class=\"mi\">128</span><span class=\"p\">)</span>\n\n<span class=\"n\">wrap</span> <span class=\"o\">=</span> <span class=\"n\">wrapper</span><span class=\"o\">.</span><span class=\"n\">Wrapper</span><span class=\"p\">(</span><span class=\"n\">helper</span><span class=\"p\">)</span>\n\n<span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">addFeature</span><span class=\"o\">.</span><span class=\"n\">HFD</span><span class=\"p\">()</span>\n<span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">addFeature</span><span class=\"o\">.</span><span class=\"n\">getFourierTransform</span><span class=\"p\">()</span>\n<span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">addFeature</span><span class=\"o\">.</span><span class=\"n\">synchronizationLikelihood</span><span class=\"p\">()</span>\n\n<span class=\"n\">features</span><span class=\"o\">=</span><span class=\"n\">wrap</span><span class=\"o\">.</span><span class=\"n\">getAllFeatures</span><span class=\"p\">()</span>\n</pre>\n<p>So, the scheme to follow with wrappers is the next:</p>\n<ol>\n<li>Create the Helper object.</li>\n<li>Create the wrapper object.</li>\n<li>Select the desired features to compute. They can be parameterized by adding the parameters just behind the name.</li>\n<li>Call the method \"getAllFeatures()\" in order to compute every feature from every window at once or iterate over the Wrapper object for obtaining the features of each window. They are returned as a pandas.DataFrame or a pandas.Series.</li>\n</ol>\n<h1>Documents related</h1>\n<p>This library was initialy a Final Degree Project and you can find the documentation of the development in the next link:</p>\n<p><a href=\"https://ruidera.uclm.es/xmlui/handle/10578/15441\" rel=\"nofollow\">Final Degree Project Documentation (Spanish)</a></p>\n<p>Later it was extented as part of a Master's thesis that can be found in the next link:</p>\n<p><a href=\"https://ruidera.uclm.es/xmlui/handle/10578/19062\" rel=\"nofollow\">Master's thesis (Spanish)</a></p>\n<h2>Papers</h2>\n<p>There are also some papers related to this library that can be seen bellow:</p>\n<h3>Open Access</h3>\n<ul>\n<li><a href=\"https://www.mdpi.com/2504-3900/2/19/483\" rel=\"nofollow\">Computational EEG Analysis Techniques When Playing Video Games: A Systematic Review</a></li>\n<li><a href=\"https://www.mdpi.com/2504-3900/31/1/70\" rel=\"nofollow\">Analysis of Cognitive Load Using EEG when Interacting with Mobile Devices</a></li>\n</ul>\n<h3>Not open access</h3>\n<ul>\n<li><a href=\"https://link.springer.com/article/10.1007%2Fs12652-019-01592-9\" rel=\"nofollow\">eeglib: computational analysis of cognitive performance during the use of video games</a></li>\n</ul>\n\n          </div>"}, "last_serial": 6629161, "releases": {"0.3.4": [{"comment_text": "", "digests": {"md5": "edec76211b3bf0b8d95bab77057fc067", "sha256": "165fce18a5779608d01424142726e203cbd85906d37d185a3c3feca171a79485"}, "downloads": -1, "filename": "eeglib-0.3.4-py3-none-any.whl", "has_sig": false, "md5_digest": "edec76211b3bf0b8d95bab77057fc067", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 22500, "upload_time": "2020-02-11T16:26:21", "upload_time_iso_8601": "2020-02-11T16:26:21.078451Z", "url": "https://files.pythonhosted.org/packages/8c/e0/f4418115edbecca3a6b04175f0bd7e119f33bb5bb3019f3b2e6c5281454b/eeglib-0.3.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "734ce5735faf51fe62e20454c241aabd", "sha256": "d0c5c0e258bb5a4fd364017ce45977dc8bedd3c3a67b4f75a2e907a5cb60db3c"}, "downloads": -1, "filename": "eeglib-0.3.4.tar.gz", "has_sig": false, "md5_digest": "734ce5735faf51fe62e20454c241aabd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 20532, "upload_time": "2020-02-11T16:26:23", "upload_time_iso_8601": "2020-02-11T16:26:23.589379Z", "url": "https://files.pythonhosted.org/packages/74/aa/1827b32c3eddf6fc159706e4f24edf751e7bc8535339566333b1ad83c141/eeglib-0.3.4.tar.gz", "yanked": false}], "0.3.5": [{"comment_text": "", "digests": {"md5": "81c92124f521651b98d57f49b5dae860", "sha256": "54810e2616996bcab19469ef29423ddda2734b5da6ee1a5ab2989f803c58f5b2"}, "downloads": -1, "filename": "eeglib-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "81c92124f521651b98d57f49b5dae860", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23247, "upload_time": "2020-02-14T08:48:58", "upload_time_iso_8601": "2020-02-14T08:48:58.370697Z", "url": "https://files.pythonhosted.org/packages/05/6e/eb7df1e51bf7006102fa907649dabb59e98950cc4ca6ae9a0bfb967866c5/eeglib-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "898eb93d5d0177b958f4db6df537332d", "sha256": "efae9944c084b0f8ca9c1d9f7798c8f608f62121e749e4a662f2f7ee1d613950"}, "downloads": -1, "filename": "eeglib-0.3.5.tar.gz", "has_sig": false, "md5_digest": "898eb93d5d0177b958f4db6df537332d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21537, "upload_time": "2020-02-14T08:49:00", "upload_time_iso_8601": "2020-02-14T08:49:00.643966Z", "url": "https://files.pythonhosted.org/packages/7a/52/754a92e11b308e4aa18ff86a4627f99c4a79b74eb5d44f202c8c7bbd5760/eeglib-0.3.5.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "81c92124f521651b98d57f49b5dae860", "sha256": "54810e2616996bcab19469ef29423ddda2734b5da6ee1a5ab2989f803c58f5b2"}, "downloads": -1, "filename": "eeglib-0.3.5-py3-none-any.whl", "has_sig": false, "md5_digest": "81c92124f521651b98d57f49b5dae860", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 23247, "upload_time": "2020-02-14T08:48:58", "upload_time_iso_8601": "2020-02-14T08:48:58.370697Z", "url": "https://files.pythonhosted.org/packages/05/6e/eb7df1e51bf7006102fa907649dabb59e98950cc4ca6ae9a0bfb967866c5/eeglib-0.3.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "898eb93d5d0177b958f4db6df537332d", "sha256": "efae9944c084b0f8ca9c1d9f7798c8f608f62121e749e4a662f2f7ee1d613950"}, "downloads": -1, "filename": "eeglib-0.3.5.tar.gz", "has_sig": false, "md5_digest": "898eb93d5d0177b958f4db6df537332d", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 21537, "upload_time": "2020-02-14T08:49:00", "upload_time_iso_8601": "2020-02-14T08:49:00.643966Z", "url": "https://files.pythonhosted.org/packages/7a/52/754a92e11b308e4aa18ff86a4627f99c4a79b74eb5d44f202c8c7bbd5760/eeglib-0.3.5.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:47:26 2020"}