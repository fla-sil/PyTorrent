{"info": {"author": "Croxlink", "author_email": "eddiep@croxlink.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Environment :: Web Environment", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6"], "description": "django-clever-selects\n=====================\n\nThis library is inspired by **django-chained-selectbox** from *s-block*\n(https://github.com/s-block/django-chained-selectbox).\n\nIt serves chained select box widget for Django framework using AJAX requests for chaining select boxes together.\nThe values change depending on the parent value.\n\nPrevious mentioned library was intended for use in Django admin only. The new library has frontend functionality,\nimproved existing instance data initialization and new ``ChainedModelChoiceField``. It also uses custom TestClient which\nis able pass ``request.user`` variable into AJAX view if user is logged in. It is very useful if you need to filter result queryset by\nuser permissions for example.\n\nTested on Django 1.4.5.\n\n\nRequirements\n------------\n- Django\n\n- jQuery\n\n\nInstallation\n------------\n\n1. Install python library using pip: pip install django-clever-selects\n\n2. Add ``clever_selects`` to ``INSTALLED_APPS`` in your Django settings file\n\n3. Add ``clever_selects_extras`` to your ``{% load %}`` statement and put ``{% clever_selects_js_import %}`` tag before closing ``</body>`` element. It is important to load clever-selects.js file after body content, so do not put it in the <head></head>!\n\n\nUsage\n-----\n\nForms\n'''''\n\nForm must inherit from ``ChainedChoicesMixin`` (or from ``ChainedChoicesForm`` / ``ChainedChoicesModelForm``, depends on your needs)\nwhich loads the options when there is already an instance or initial data::\n\n    from clever_selects.form_fields import ChainedChoiceField\n    from clever_selects.forms import ChainedChoicesForm\n\n\n    class SimpleChainForm(ChainedChoicesForm):\n        first_field = ChoiceField(choices=(('', '------------'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), ))\n        second_field = ChainedChoiceField(parent_field='first_field', ajax_url=reverse_lazy('ajax_chained_view'))\n\n\n    class MultipleChainForm(ChainedChoicesForm):\n        first_field = ChoiceField(choices=(('', '------------'), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), ))\n        second_field = ChainedChoiceField(parent_field='first_field', ajax_url=reverse_lazy('ajax_chained_view'))\n        third_field = ChainedChoiceField(parent_field='second_field', ajax_url=reverse_lazy('ajax_chained_view'))\n        fourth_field = ChainedChoiceField(parent_field='third_field', ajax_url=reverse_lazy('ajax_chained_view'))\n        fifth_field = ChainedChoiceField(parent_field='fourth_field', ajax_url=reverse_lazy('ajax_chained_view'))\n\n\n    class ModelChainForm(ChainedChoicesModelForm):\n        brand = forms.ModelChoiceField(queryset=CarBrand.objects.all(), required=True,\n            empty_label=_(u'Select a car brand'))\n        model = ChainedModelChoiceField(parent_field='brand', ajax_url=reverse_lazy('ajax_chained_models'),\n            empty_label=_(u'Select a car model'), model=BrandModel, required=True)\n        engine = forms.ChoiceField(choices=([('', _('All engine types'))] + Car.ENGINES), required=False)\n        color = ChainedChoiceField(parent_field='model', ajax_url=reverse_lazy('ajax_chained_colors'),\n            empty_label=_(u'Select a car model'), required=False)\n\n        class Meta:\n            model = Car\n\n\nNotice that ajax URLs could differ of each field for different purposes. See example project for more use cases.\n\nIn order to pre-populate child fields, the form can need to have access to the current user. This can be done by passing\nthe user to the kwargs of the form's __init__() method in the form's view. The ChainedSelectFormViewMixin takes care\nof this for you.::\n\n    class CreateCarView(ChainedSelectFormViewMixin, CreateView)\n        template_name = \"create_car.html\"\n        form_class = ModelChainForm\n        model = Car\n\nViews\n'''''\n\nAjax call is made whenever the parent field is changed. You must set up the ajax URL to return json list of lists::\n\n    class AjaxChainedView(BaseDetailView):\n        \"\"\"\n        View to handle the ajax request for the field options.\n        \"\"\"\n\n        def get(self, request, *args, **kwargs):\n            field = request.GET.get('field')\n            parent_value = request.GET.get(\"parent_value\")\n\n            vals_list = []\n            for x in range(1, 6):\n                vals_list.append(x*int(parent_value))\n\n            choices = tuple(zip(vals_list, vals_list))\n\n            response = HttpResponse(\n                json.dumps(choices, cls=DjangoJSONEncoder),\n                mimetype='application/javascript'\n            )\n            add_never_cache_headers(response)\n            return response\n\n\nOr you can use ``ChainedSelectChoicesView`` class helper like this::\n\n    class AjaxChainedView(ChainedSelectChoicesView):\n        def get_choices(self):\n            vals_list = []\n            for x in range(1, 6):\n                vals_list.append(x*int(self.parent_value))\n            return tuple(zip(vals_list, vals_list))\n\nor like this::\n\n    class AjaxChainedView(ChainedSelectChoicesView):\n        def get_child_set(self):\n            return ChildModel.object.filter(parent_id=self.parent_value)\n\nDon't forget to update your urls.py::\n\n    url(r'^ajax/custom-chained-view-url/$', AjaxChainedView.as_view(), name='ajax_chained_view'),\n\nAuthors\n-------\n\nLibrary is by `Erik Telepovsky` from `Pragmatic Mates`_. See `our other libraries`_.\n\n.. _Pragmatic Mates: http://www.pragmaticmates.com/\n.. _our other libraries: https://github.com/PragmaticMates", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/CROXLINK/django-clever-selects", "keywords": "django clever chained selects", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "django-clever-selects-xadmin", "package_url": "https://pypi.org/project/django-clever-selects-xadmin/", "platform": "", "project_url": "https://pypi.org/project/django-clever-selects-xadmin/", "project_urls": {"Homepage": "https://github.com/CROXLINK/django-clever-selects"}, "release_url": "https://pypi.org/project/django-clever-selects-xadmin/0.8.8.4/", "requires_dist": null, "requires_python": "", "summary": "Chained select box widget for Django framework using AJAX requests.", "version": "0.8.8.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>This library is inspired by <strong>django-chained-selectbox</strong> from <em>s-block</em>\n(<a href=\"https://github.com/s-block/django-chained-selectbox\" rel=\"nofollow\">https://github.com/s-block/django-chained-selectbox</a>).</p>\n<p>It serves chained select box widget for Django framework using AJAX requests for chaining select boxes together.\nThe values change depending on the parent value.</p>\n<p>Previous mentioned library was intended for use in Django admin only. The new library has frontend functionality,\nimproved existing instance data initialization and new <tt>ChainedModelChoiceField</tt>. It also uses custom TestClient which\nis able pass <tt>request.user</tt> variable into AJAX view if user is logged in. It is very useful if you need to filter result queryset by\nuser permissions for example.</p>\n<p>Tested on Django 1.4.5.</p>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Django</li>\n<li>jQuery</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<ol>\n<li>Install python library using pip: pip install django-clever-selects</li>\n<li>Add <tt>clever_selects</tt> to <tt>INSTALLED_APPS</tt> in your Django settings file</li>\n<li>Add <tt>clever_selects_extras</tt> to your <tt>{% load %}</tt> statement and put <tt>{% clever_selects_js_import %}</tt> tag before closing <tt>&lt;/body&gt;</tt> element. It is important to load clever-selects.js file after body content, so do not put it in the &lt;head&gt;&lt;/head&gt;!</li>\n</ol>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"forms\">\n<h3>Forms</h3>\n<p>Form must inherit from <tt>ChainedChoicesMixin</tt> (or from <tt>ChainedChoicesForm</tt> / <tt>ChainedChoicesModelForm</tt>, depends on your needs)\nwhich loads the options when there is already an instance or initial data:</p>\n<pre>from clever_selects.form_fields import ChainedChoiceField\nfrom clever_selects.forms import ChainedChoicesForm\n\n\nclass SimpleChainForm(ChainedChoicesForm):\n    first_field = ChoiceField(choices=(('', '------------'), (1, '1'), (2, '2'), (3, '3'), (4, '4'), (5, '5'), ))\n    second_field = ChainedChoiceField(parent_field='first_field', ajax_url=reverse_lazy('ajax_chained_view'))\n\n\nclass MultipleChainForm(ChainedChoicesForm):\n    first_field = ChoiceField(choices=(('', '------------'), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), ))\n    second_field = ChainedChoiceField(parent_field='first_field', ajax_url=reverse_lazy('ajax_chained_view'))\n    third_field = ChainedChoiceField(parent_field='second_field', ajax_url=reverse_lazy('ajax_chained_view'))\n    fourth_field = ChainedChoiceField(parent_field='third_field', ajax_url=reverse_lazy('ajax_chained_view'))\n    fifth_field = ChainedChoiceField(parent_field='fourth_field', ajax_url=reverse_lazy('ajax_chained_view'))\n\n\nclass ModelChainForm(ChainedChoicesModelForm):\n    brand = forms.ModelChoiceField(queryset=CarBrand.objects.all(), required=True,\n        empty_label=_(u'Select a car brand'))\n    model = ChainedModelChoiceField(parent_field='brand', ajax_url=reverse_lazy('ajax_chained_models'),\n        empty_label=_(u'Select a car model'), model=BrandModel, required=True)\n    engine = forms.ChoiceField(choices=([('', _('All engine types'))] + Car.ENGINES), required=False)\n    color = ChainedChoiceField(parent_field='model', ajax_url=reverse_lazy('ajax_chained_colors'),\n        empty_label=_(u'Select a car model'), required=False)\n\n    class Meta:\n        model = Car\n</pre>\n<p>Notice that ajax URLs could differ of each field for different purposes. See example project for more use cases.</p>\n<p>In order to pre-populate child fields, the form can need to have access to the current user. This can be done by passing\nthe user to the kwargs of the form\u2019s __init__() method in the form\u2019s view. The ChainedSelectFormViewMixin takes care\nof this for you.:</p>\n<pre>class CreateCarView(ChainedSelectFormViewMixin, CreateView)\n    template_name = \"create_car.html\"\n    form_class = ModelChainForm\n    model = Car\n</pre>\n</div>\n<div id=\"views\">\n<h3>Views</h3>\n<p>Ajax call is made whenever the parent field is changed. You must set up the ajax URL to return json list of lists:</p>\n<pre>class AjaxChainedView(BaseDetailView):\n    \"\"\"\n    View to handle the ajax request for the field options.\n    \"\"\"\n\n    def get(self, request, *args, **kwargs):\n        field = request.GET.get('field')\n        parent_value = request.GET.get(\"parent_value\")\n\n        vals_list = []\n        for x in range(1, 6):\n            vals_list.append(x*int(parent_value))\n\n        choices = tuple(zip(vals_list, vals_list))\n\n        response = HttpResponse(\n            json.dumps(choices, cls=DjangoJSONEncoder),\n            mimetype='application/javascript'\n        )\n        add_never_cache_headers(response)\n        return response\n</pre>\n<p>Or you can use <tt>ChainedSelectChoicesView</tt> class helper like this:</p>\n<pre>class AjaxChainedView(ChainedSelectChoicesView):\n    def get_choices(self):\n        vals_list = []\n        for x in range(1, 6):\n            vals_list.append(x*int(self.parent_value))\n        return tuple(zip(vals_list, vals_list))\n</pre>\n<p>or like this:</p>\n<pre>class AjaxChainedView(ChainedSelectChoicesView):\n    def get_child_set(self):\n        return ChildModel.object.filter(parent_id=self.parent_value)\n</pre>\n<p>Don\u2019t forget to update your urls.py:</p>\n<pre>url(r'^ajax/custom-chained-view-url/$', AjaxChainedView.as_view(), name='ajax_chained_view'),\n</pre>\n</div>\n</div>\n<div id=\"authors\">\n<h2>Authors</h2>\n<p>Library is by <cite>Erik Telepovsky</cite> from <a href=\"http://www.pragmaticmates.com/\" rel=\"nofollow\">Pragmatic Mates</a>. See <a href=\"https://github.com/PragmaticMates\" rel=\"nofollow\">our other libraries</a>.</p>\n</div>\n\n          </div>"}, "last_serial": 5549940, "releases": {"0.8.2": [{"comment_text": "", "digests": {"md5": "54860fb1e61e4015bec69a8368b492d2", "sha256": "204b3536cf886d719af01751edfac48c0b2f7fc5dc14f88b9ae3f496eba6aeef"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.2.tar.gz", "has_sig": false, "md5_digest": "54860fb1e61e4015bec69a8368b492d2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 8938, "upload_time": "2019-04-05T13:37:20", "upload_time_iso_8601": "2019-04-05T13:37:20.504541Z", "url": "https://files.pythonhosted.org/packages/f7/aa/2b5a0d6379304fd63ac74745e9f844a7565b3fdbcbf4c1ace5b5fdf5af03/django-clever-selects-xadmin-0.8.2.tar.gz", "yanked": false}], "0.8.3": [{"comment_text": "", "digests": {"md5": "222c441ce9826cc656c24ec5ef769ef9", "sha256": "7d9d505d61e4df38ad448c565a37f6c88079e4dd1d8dee6ef16bfad71d3e0a81"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.3.tar.gz", "has_sig": false, "md5_digest": "222c441ce9826cc656c24ec5ef769ef9", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9050, "upload_time": "2019-05-09T08:55:24", "upload_time_iso_8601": "2019-05-09T08:55:24.775641Z", "url": "https://files.pythonhosted.org/packages/48/90/0f64417e7116858d19ab248809bea86581d0e096a5551d6100efbf0dd81b/django-clever-selects-xadmin-0.8.3.tar.gz", "yanked": false}], "0.8.4": [{"comment_text": "", "digests": {"md5": "8ecb5671f7f0e45069dede61310c6b47", "sha256": "67ebe8493b7bacd3034aa48640534ffc13f5cba59b4d0851e890b36bd1166d91"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.4.tar.gz", "has_sig": false, "md5_digest": "8ecb5671f7f0e45069dede61310c6b47", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9046, "upload_time": "2019-05-09T14:38:08", "upload_time_iso_8601": "2019-05-09T14:38:08.835231Z", "url": "https://files.pythonhosted.org/packages/8a/55/6dd41587289d900a3bcde712c7e736fbbaa4f9d62a0efbf07e722a10a3ef/django-clever-selects-xadmin-0.8.4.tar.gz", "yanked": false}], "0.8.5": [{"comment_text": "", "digests": {"md5": "4908377b1eecacd2a1c7c4cd91644311", "sha256": "346b6c5f81016987c19567c0784445c2ec4cdb9cd42a9e952c3bf6e04da39435"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.5.tar.gz", "has_sig": false, "md5_digest": "4908377b1eecacd2a1c7c4cd91644311", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9065, "upload_time": "2019-07-16T04:55:59", "upload_time_iso_8601": "2019-07-16T04:55:59.952586Z", "url": "https://files.pythonhosted.org/packages/9e/b4/2113fdcae2a98b36ee6d3514eaf56c38b3a0e72d9b76ee7f460b0c0f830c/django-clever-selects-xadmin-0.8.5.tar.gz", "yanked": false}], "0.8.6": [{"comment_text": "", "digests": {"md5": "5e1aaf85bb393913a93d868fd4195c80", "sha256": "8c529c4014ece38ac4cd7aefbb66efa24ee1eb8a5290ec3d4148fd41f2ecd316"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.6.tar.gz", "has_sig": false, "md5_digest": "5e1aaf85bb393913a93d868fd4195c80", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9598, "upload_time": "2019-07-18T08:23:42", "upload_time_iso_8601": "2019-07-18T08:23:42.248162Z", "url": "https://files.pythonhosted.org/packages/15/97/57cd6902395c224c99a1e3b26a317a8e4fd05a738dac6d976e49f9690e1d/django-clever-selects-xadmin-0.8.6.tar.gz", "yanked": false}], "0.8.7": [{"comment_text": "", "digests": {"md5": "97fc5ffb2e1d6d281d70f198220b2764", "sha256": "406159f928861e9c39f99d9a90824c980987bb42c21ac28a4f5ffa920e7fd397"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.7.tar.gz", "has_sig": false, "md5_digest": "97fc5ffb2e1d6d281d70f198220b2764", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9600, "upload_time": "2019-07-18T08:27:24", "upload_time_iso_8601": "2019-07-18T08:27:24.999779Z", "url": "https://files.pythonhosted.org/packages/de/d8/d6d0b56aec1b36b6d9f8b79cce8b457223de6c1c6fba81ed757f25335230/django-clever-selects-xadmin-0.8.7.tar.gz", "yanked": false}], "0.8.8": [{"comment_text": "", "digests": {"md5": "c61034d3012fb330f977d17ebbb26a43", "sha256": "3b0429e59ff46e355c9e707f667a0d948b496254dd723ed1bf88796e2068bad5"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.tar.gz", "has_sig": false, "md5_digest": "c61034d3012fb330f977d17ebbb26a43", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9600, "upload_time": "2019-07-18T08:34:10", "upload_time_iso_8601": "2019-07-18T08:34:10.653790Z", "url": "https://files.pythonhosted.org/packages/df/07/5dfedd0891ab55b24083bb549fcdeda523f7f42ed785203e9d49ee316209/django-clever-selects-xadmin-0.8.8.tar.gz", "yanked": false}], "0.8.8.1": [{"comment_text": "", "digests": {"md5": "b0626116139f4b2e59be7fa65dfcaf9b", "sha256": "db7bba8b9d13c2cbd691e6d9ee8f0f1edf13cea7f276dc2b8ef6831e72ed57e5"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.1.tar.gz", "has_sig": false, "md5_digest": "b0626116139f4b2e59be7fa65dfcaf9b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9605, "upload_time": "2019-07-18T09:00:11", "upload_time_iso_8601": "2019-07-18T09:00:11.638118Z", "url": "https://files.pythonhosted.org/packages/7c/d4/933a00418216096b2c934cd105b1f0e263db9327705094319978ec612461/django-clever-selects-xadmin-0.8.8.1.tar.gz", "yanked": false}], "0.8.8.2": [{"comment_text": "", "digests": {"md5": "65e124715f259474ea1b52564df9c39f", "sha256": "c0d0e0b92dd3f9970d855f1bbeaa441cb8ca9bd7528201aabd7e247b77bf80e9"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.2.tar.gz", "has_sig": false, "md5_digest": "65e124715f259474ea1b52564df9c39f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9587, "upload_time": "2019-07-18T09:01:43", "upload_time_iso_8601": "2019-07-18T09:01:43.572427Z", "url": "https://files.pythonhosted.org/packages/a0/a9/f134ee91fab16773cbed49aaab9db84d9e314750bd6090cda82e5ceee909/django-clever-selects-xadmin-0.8.8.2.tar.gz", "yanked": false}], "0.8.8.3": [{"comment_text": "", "digests": {"md5": "71c86de39fb86524ed9b7d65e1b077e2", "sha256": "0541fe8ccfac51eecb1a1ca265182c25e9e0d763f2fbe166bcc503380f1706f2"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.3.tar.gz", "has_sig": false, "md5_digest": "71c86de39fb86524ed9b7d65e1b077e2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9609, "upload_time": "2019-07-18T09:05:43", "upload_time_iso_8601": "2019-07-18T09:05:43.126886Z", "url": "https://files.pythonhosted.org/packages/4f/e2/cfc54351a94df6512577e6c41d492eaedde70e4da9822b342b38ddf6bf26/django-clever-selects-xadmin-0.8.8.3.tar.gz", "yanked": false}], "0.8.8.4": [{"comment_text": "", "digests": {"md5": "f2e2007b1d8e3caa17b72be16aa04384", "sha256": "9613363e878de61a50de1ec767e7fede92f7918415c78ee202cf32c4efa03693"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.4.tar.gz", "has_sig": false, "md5_digest": "f2e2007b1d8e3caa17b72be16aa04384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9728, "upload_time": "2019-07-18T09:19:39", "upload_time_iso_8601": "2019-07-18T09:19:39.970719Z", "url": "https://files.pythonhosted.org/packages/0a/6e/fbb7c30833d894e9d924711b68ae87d54b41e4958ae1bee784310cf61be2/django-clever-selects-xadmin-0.8.8.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f2e2007b1d8e3caa17b72be16aa04384", "sha256": "9613363e878de61a50de1ec767e7fede92f7918415c78ee202cf32c4efa03693"}, "downloads": -1, "filename": "django-clever-selects-xadmin-0.8.8.4.tar.gz", "has_sig": false, "md5_digest": "f2e2007b1d8e3caa17b72be16aa04384", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9728, "upload_time": "2019-07-18T09:19:39", "upload_time_iso_8601": "2019-07-18T09:19:39.970719Z", "url": "https://files.pythonhosted.org/packages/0a/6e/fbb7c30833d894e9d924711b68ae87d54b41e4958ae1bee784310cf61be2/django-clever-selects-xadmin-0.8.8.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:37:07 2020"}