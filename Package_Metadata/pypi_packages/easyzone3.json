{"info": {"author": "trdcaz", "author_email": "trdcaz@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "License :: OSI Approved :: MIT License", "Topic :: Internet :: Name Service (DNS)", "Topic :: System :: Systems Administration"], "description": "Fork of easyzone from https://bitbucket.org/chrismiles/easyzone.\n\nIncludes AAAAA/SRV/PTR records from provnet here:\nhttps://bitbucket.org/chrismiles/easyzone/pull-request/1/add-include-option-to-clear_all_records/diff\n\nAlso fixes up Exception so they derive from an EasyZone Exception base class,\nand don't overwtire NameError.\n\nFix for python3.\n\neasyzone\n========\n\nOverview\n--------\n\nEasyzone is a package to manage the common record types of a\nzone file, including SOA records.  This module sits on top of\nthe dnspython package and provides a higher level abstraction\nfor common zone file manipulation use cases.\n\nMain features:\n\n* A high-level abstraction on top of dnspython.\n* Load a zone file into objects.\n* Modify/add/delete zone/record objects.\n* Save back to zone file.\n* Auto-update serial (if necessary).\n\nhttp://www.psychofx.com/easyzone/\nhttp://pypi.python.org/pypi/easyzone\nhttps://bitbucket.org/chrismiles/easyzone/\n\n\nRequirements\n------------\n\n  * dnspython3 - http://www.dnspython.org/\n\n\nBuild/Test/Install\n------------------\n\nBuild::\n\n  $ python setup.py build\n\nTest::\n\n  $ python setup.py test\n\nInstall::\n\n  $ python setup.py install\n\n\nOR with setuptools::\n\n  $ easy_install easyzone3\n\nOR with pip::\n\n  $ pip install easyzone3\n\n\nExamples\n--------\n\neasyzone::\n\n  >>> from easyzone import easyzone\n  >>> z = easyzone.zone_from_file('example.com', '/var/namedb/example.com')\n  >>> z.domain\n  'example.com.'\n  >>> z.root.soa.serial\n  2007012902L\n  >>> z.root.records('NS').items\n  ['ns1.example.com.', 'ns2.example.com.']\n  >>> z.root.records('MX').items\n  [(10, 'mail.example.com.'), (20, 'mail2.example.com.')]\n  >>> z.names['foo.example.com.'].records('A').items\n  ['10.0.0.1']\n\n  >>> ns = z.root.records('NS')\n  >>> ns.add('ns3.example.com.')\n  >>> ns.items\n  ['ns1.example.com.', 'ns2.example.com.', 'ns3.example.com.']\n  >>> ns.delete('ns2.example.com')\n  >>> ns.items\n  ['ns1.example.com.', 'ns3.example.com.']\n\n  >>> z.save(autoserial=True)\n\nZoneCheck::\n\n  >>> from easyzone.zone_check import ZoneCheck\n  >>> c = ZoneCheck()\n  >>> c.isValid('example.com', '/var/named/zones/example.com')\n  True\n  >>> c.isValid('foo.com', '/var/named/zones/example.com')\n  False\n  >>> c.error\n  'Bad syntax'\n  >>>\n  >>> c = ZoneCheck(checkzone='/usr/sbin/named-checkzone')\n  >>> c.isValid('example.com', '/var/named/zones/example.com')\n  True\n  >>>\n\nZoneReload::\n\n  >>> from easyzone.zone_reload import ZoneReload\n  >>> r = ZoneReload()\n  >>> r.reload('example.com')\n  zone reload up-to-date\n  >>> r.reload('foo.com')\n  rndc: 'reload' failed: not found\n  Traceback (most recent call last):\n    File \"<stdin>\", line 1, in <module>\n    File \"easyzone/zone_reload.py\", line 51, in reload\n      raise ZoneReloadError(\"rndc failed with return code %d\" % r)\n  easyzone.zone_reload.ZoneReloadError: rndc failed with return code 1\n  >>>\n  >>> r = ZoneReload(rndc='/usr/sbin/rndc')\n  >>> r.reload('example.com')\n  zone reload up-to-date\n  >>>", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/trdcaz/easyzone3/", "keywords": null, "license": "MIT", "maintainer": null, "maintainer_email": null, "name": "easyzone3", "package_url": "https://pypi.org/project/easyzone3/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/easyzone3/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/trdcaz/easyzone3/"}, "release_url": "https://pypi.org/project/easyzone3/1.2.3/", "requires_dist": null, "requires_python": null, "summary": "Easy Zone - DNS Zone abstraction module", "version": "1.2.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Fork of easyzone from <a href=\"https://bitbucket.org/chrismiles/easyzone\" rel=\"nofollow\">https://bitbucket.org/chrismiles/easyzone</a>.</p>\n<p>Includes AAAAA/SRV/PTR records from provnet here:\n<a href=\"https://bitbucket.org/chrismiles/easyzone/pull-request/1/add-include-option-to-clear_all_records/diff\" rel=\"nofollow\">https://bitbucket.org/chrismiles/easyzone/pull-request/1/add-include-option-to-clear_all_records/diff</a></p>\n<p>Also fixes up Exception so they derive from an EasyZone Exception base class,\nand don\u2019t overwtire NameError.</p>\n<p>Fix for python3.</p>\n<div id=\"easyzone\">\n<h2>easyzone</h2>\n<div id=\"overview\">\n<h3>Overview</h3>\n<p>Easyzone is a package to manage the common record types of a\nzone file, including SOA records.  This module sits on top of\nthe dnspython package and provides a higher level abstraction\nfor common zone file manipulation use cases.</p>\n<p>Main features:</p>\n<ul>\n<li>A high-level abstraction on top of dnspython.</li>\n<li>Load a zone file into objects.</li>\n<li>Modify/add/delete zone/record objects.</li>\n<li>Save back to zone file.</li>\n<li>Auto-update serial (if necessary).</li>\n</ul>\n<p><a href=\"http://www.psychofx.com/easyzone/\" rel=\"nofollow\">http://www.psychofx.com/easyzone/</a>\n<a href=\"http://pypi.python.org/pypi/easyzone\" rel=\"nofollow\">http://pypi.python.org/pypi/easyzone</a>\n<a href=\"https://bitbucket.org/chrismiles/easyzone/\" rel=\"nofollow\">https://bitbucket.org/chrismiles/easyzone/</a></p>\n</div>\n<div id=\"requirements\">\n<h3>Requirements</h3>\n<blockquote>\n<ul>\n<li>dnspython3 - <a href=\"http://www.dnspython.org/\" rel=\"nofollow\">http://www.dnspython.org/</a></li>\n</ul>\n</blockquote>\n</div>\n<div id=\"build-test-install\">\n<h3>Build/Test/Install</h3>\n<p>Build:</p>\n<pre>$ python setup.py build\n</pre>\n<p>Test:</p>\n<pre>$ python setup.py test\n</pre>\n<p>Install:</p>\n<pre>$ python setup.py install\n</pre>\n<p>OR with setuptools:</p>\n<pre>$ easy_install easyzone3\n</pre>\n<p>OR with pip:</p>\n<pre>$ pip install easyzone3\n</pre>\n</div>\n<div id=\"examples\">\n<h3>Examples</h3>\n<p>easyzone:</p>\n<pre>&gt;&gt;&gt; from easyzone import easyzone\n&gt;&gt;&gt; z = easyzone.zone_from_file('example.com', '/var/namedb/example.com')\n&gt;&gt;&gt; z.domain\n'example.com.'\n&gt;&gt;&gt; z.root.soa.serial\n2007012902L\n&gt;&gt;&gt; z.root.records('NS').items\n['ns1.example.com.', 'ns2.example.com.']\n&gt;&gt;&gt; z.root.records('MX').items\n[(10, 'mail.example.com.'), (20, 'mail2.example.com.')]\n&gt;&gt;&gt; z.names['foo.example.com.'].records('A').items\n['10.0.0.1']\n\n&gt;&gt;&gt; ns = z.root.records('NS')\n&gt;&gt;&gt; ns.add('ns3.example.com.')\n&gt;&gt;&gt; ns.items\n['ns1.example.com.', 'ns2.example.com.', 'ns3.example.com.']\n&gt;&gt;&gt; ns.delete('ns2.example.com')\n&gt;&gt;&gt; ns.items\n['ns1.example.com.', 'ns3.example.com.']\n\n&gt;&gt;&gt; z.save(autoserial=True)\n</pre>\n<p>ZoneCheck:</p>\n<pre>&gt;&gt;&gt; from easyzone.zone_check import ZoneCheck\n&gt;&gt;&gt; c = ZoneCheck()\n&gt;&gt;&gt; c.isValid('example.com', '/var/named/zones/example.com')\nTrue\n&gt;&gt;&gt; c.isValid('foo.com', '/var/named/zones/example.com')\nFalse\n&gt;&gt;&gt; c.error\n'Bad syntax'\n&gt;&gt;&gt;\n&gt;&gt;&gt; c = ZoneCheck(checkzone='/usr/sbin/named-checkzone')\n&gt;&gt;&gt; c.isValid('example.com', '/var/named/zones/example.com')\nTrue\n&gt;&gt;&gt;\n</pre>\n<p>ZoneReload:</p>\n<pre>&gt;&gt;&gt; from easyzone.zone_reload import ZoneReload\n&gt;&gt;&gt; r = ZoneReload()\n&gt;&gt;&gt; r.reload('example.com')\nzone reload up-to-date\n&gt;&gt;&gt; r.reload('foo.com')\nrndc: 'reload' failed: not found\nTraceback (most recent call last):\n  File \"&lt;stdin&gt;\", line 1, in &lt;module&gt;\n  File \"easyzone/zone_reload.py\", line 51, in reload\n    raise ZoneReloadError(\"rndc failed with return code %d\" % r)\neasyzone.zone_reload.ZoneReloadError: rndc failed with return code 1\n&gt;&gt;&gt;\n&gt;&gt;&gt; r = ZoneReload(rndc='/usr/sbin/rndc')\n&gt;&gt;&gt; r.reload('example.com')\nzone reload up-to-date\n&gt;&gt;&gt;\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1456799, "releases": {"1.2.2": [{"comment_text": "", "digests": {"md5": "0bc8ebed1b8e9adcb4d0cefceaf6ac53", "sha256": "c96335c9069d30a96e1deae8cb238727d002d8d5cfa8cbb41fa875a26a6221ba"}, "downloads": -1, "filename": "easyzone3-1.2.2.tar.gz", "has_sig": false, "md5_digest": "0bc8ebed1b8e9adcb4d0cefceaf6ac53", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7083, "upload_time": "2015-03-10T11:03:34", "upload_time_iso_8601": "2015-03-10T11:03:34.312774Z", "url": "https://files.pythonhosted.org/packages/26/b1/6305291e2aaca3e3e8758ea77b75890746af9b25866b55b94d5bb3d0fc77/easyzone3-1.2.2.tar.gz", "yanked": false}], "1.2.3": [{"comment_text": "", "digests": {"md5": "512a59df336b1fe959ef59d2419e2cc7", "sha256": "42677652bc1dde15ef5d635a2e1e5bd06dcefcf43eb45360293f1ddaa62539da"}, "downloads": -1, "filename": "easyzone3-1.2.3.tar.gz", "has_sig": false, "md5_digest": "512a59df336b1fe959ef59d2419e2cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7111, "upload_time": "2015-03-11T01:48:50", "upload_time_iso_8601": "2015-03-11T01:48:50.754645Z", "url": "https://files.pythonhosted.org/packages/9f/91/62f85d658ecf322218fc40ba0cd2c37a51639b75f2c215822f156d408da0/easyzone3-1.2.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "512a59df336b1fe959ef59d2419e2cc7", "sha256": "42677652bc1dde15ef5d635a2e1e5bd06dcefcf43eb45360293f1ddaa62539da"}, "downloads": -1, "filename": "easyzone3-1.2.3.tar.gz", "has_sig": false, "md5_digest": "512a59df336b1fe959ef59d2419e2cc7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7111, "upload_time": "2015-03-11T01:48:50", "upload_time_iso_8601": "2015-03-11T01:48:50.754645Z", "url": "https://files.pythonhosted.org/packages/9f/91/62f85d658ecf322218fc40ba0cd2c37a51639b75f2c215822f156d408da0/easyzone3-1.2.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:48:12 2020"}