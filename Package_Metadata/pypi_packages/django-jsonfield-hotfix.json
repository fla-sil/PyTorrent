{"info": {"author": "Adam Johnson", "author_email": "me@adamj.eu", "bugtrack_url": null, "classifiers": ["Development Status :: 6 - Mature", "Framework :: Django", "Framework :: Django :: 1.10", "Framework :: Django :: 1.11", "Framework :: Django :: 1.9", "Framework :: Django :: 2.0", "Framework :: Django :: 2.1", "Framework :: Django :: 2.2", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 3"], "description": "django-jsonfield-hotfix\n=======================\n\n1.3.1post1 description\n----------------------\nFork from django_jsonfield_. Fix postgresql compatibility issue.\n\n.. code-block:: python\n\n    # jsonfield/fields.py\n    def from_db_value(self, value, expression, connection):\n        if value is None:\n            return None\n        elif connection.vendor == 'postgresql' and self.decoder_kwargs.get('cls') is None:\n            # ** add code belong **\n            if not isinstance(value, str):  # Previous field type is possibly text but not jsonb or json\n                return value\n        return json.loads(value, **self.decoder_kwargs)\n\n\n**Maintenance mode only:** It is not recommended you use this library on new\nprojects. See the (long) **History** section below for why and alternatives.\n\n----\n\nCross-database JSON field for Django models.\n\nHistory\n-------\n\n\nThis project was created in 2010 by Matthew Schinckel. He created it based upon\ncode from `David Cramer's\nblog <https://web.archive.org/web/20140731084522/http://cramer.io/2009/04/14/cleaning-up-with-json-and-sql/>`_,\nhad the repository in Mercurial on\n`BitBucket <https://bitbucket.org/schinckel/django-jsonfield>`_, and\nmaintained it until 2018. In March 2019, Adam Johnson took over maintenance\n(from an invite back in 2018!), and moved it to Git on\n`GitHub <https://github.com/adamchainz/django-jsonfield>`_ because he's no good\nat Mercurial and \"everyone\" uses GitHub these days.\n\nAt the time it was created, the databases that Django supports didn't feature\nnative JSON support. Since then, most of them have gained that ability.\nCorrespondingly, there are some Django field implementations for taking\nadvantage of this:\n\n* A PostgreSQL ``JSONField`` is provided in\n  `django.contrib.postgres <https://docs.djangoproject.com/en/2.1/ref/contrib/postgres/fields/>`_,\n  which was created as part of Django in version 1.9, released December 2015.\n  Note this library interferes with the way that works, see\n  `issue 5 <https://github.com/adamchainz/django-jsonfield/issues/5>`_ for\n  explanation and a workaround.\n* A MySQL (and maybe MariaDB) ``JSONField`` is provided in\n  `Django-MySQL <https://django-mysql.readthedocs.io/en/latest/model_fields/json_field.html>`_,\n  since version 1.0.7, released March 2016.\n\nAt time of writing this history (March 2019), there still isn't a JSONField\nimplementation that can take advantage of the native features on all the\ndatabases. This has been discussed on the ``django-developers`` mailing list\nseveral times though.\n\nThe ``JSONField`` provided by this library uses native features on\nPostgreSQL, but not on any other database, so it's in a bit of a weird place.\n\nIf you are considering adding this to a new project, you probably don't want\nit, instead:\n\n* If you want native JSON support from your database and you're using\n  PostgreSQL or MySQL, use the native fields as per the links above.\n* If you don't want native JSON support, consider just storing the JSON in a\n  ``TextField`` and deserializing it appropriately in your code, perhaps with\n  a simple model property to proxy it.\n* If you need native JSON support on a database for which there is no Django\n  field implementation, try making it yourself or getting in touch to see if\n  there's something that can be done.\n\nInstallation\n------------\n\nInstall it with **pip**:\n\n.. code-block:: sh\n\n    pip install django-jsonfield-hotfix\n\nThen use the field in your models:\n\n.. code-block:: python\n\n    from django.db import models\n    import jsonfield\n\n    class MyModel(models.Model):\n        the_json = jsonfield.JSONField()\n\nYou can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.\n\nThere is also a ``TypedJSONField``, that allows you to define data types that\nmust be included within each object in the array. More documentation to follow.\n\nNotes\n~~~~~\n\nIf no ``default`` is provided, and ``null=True`` is not passed in to the\nfield constructor, then a default of ``{}`` will be used.\n\nSupported django versions\n-------------------------\n\nAll versions of Django from 1.8 onwards are tested.\n\nExtras\n------\n\njsonify templatetag\n~~~~~~~~~~~~~~~~~~~\nThis allows you to convert a python data structure into JSON within a template::\n\n    {% load jsonify %}\n\n    <script>\n    var foo = {{ bar|jsonify|safe }};\n    </script>\n\nNote that you must only use the \"safe\" filter when you use the jsonify\nfilter within a <script> tag (which is parsed like a CDATA section).\n\nIf you use it in some other places like in an HTML attribute, then\nyou must not use the safe filter so that its output is properly escaped::\n\n    <div data-foo=\"{{ bar|jsonify }}\">\n\nThe above rules are important to avoid XSS attacks with unsafe strings\nstored in the converted data structure.\n\nContributing\n------------\n\nIf you want to contribute to django-jsonfield, it will help you to run\nthe test suite. This can be done in its most simple form by running::\n\n  DB_ENGINE=sqlite3 DB_NAME=tests ./tests.py\n\nTo run the tests fully, you will need to install tox.\n\n\nHistory\n-------\n\n1.3.1 (2019-08-19)\n~~~~~~~~~~~~~~~~~~\n\n* Fix Python 2 compatilibity from change in 1.3.0\n  (`PR #16 <https://github.com/adamchainz/django-jsonfield/pull/16>`__).\n\n1.3.0 (2019-08-18)\n~~~~~~~~~~~~~~~~~~\n\n* Work in parallel with ``django.contrib.postgres.fields.JSONField`` by\n  removing registration of default JSONB function and instead using Postgres'\n  cast-to-text in SQL\n  (`PR #14 <https://github.com/adamchainz/django-jsonfield/pull/14>`__).\n\n  This should allow you to move to the better supported\n  ``django.contrib.postgres.fields.JSONField``, and then Django 3.0's upcoming\n  all-database ``JSONField``.\n\n1.2.0 (2019-04-28)\n~~~~~~~~~~~~~~~~~~\n\n* Tested with Django 2.2.\n* Stop \"RemovedInDjango30Warning: Remove the context parameter from\n  JSONField.from_db_value().\" on Django 2.0+.\n\n1.1.0 (2019-03-16)\n~~~~~~~~~~~~~~~~~~\n\nDjango 1.10 support: register explicit lookup operators.\n\nDjango 1.11 support: update render() method for widget.\n\n1.0.1 (2016-07-21)\n~~~~~~~~~~~~~~~~~~\n\nFix issue with Postgres JSONB fields.\n\nLimit XSS attacks with jsonify template tag.\n\n1.0.0 (2016-06-02)\n~~~~~~~~~~~~~~~~~~\n\nAdd support for Django 1.8 and 1.9 (without warnings). Remove support for Django < 1.8\nas none of those releases are supported upstream anyway.\n\nWith this version, ``JSONField`` no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it's a backwards incompatible change.\n\n0.9.19 (2016-02-22)\n~~~~~~~~~~~~~~~~~~~\n\nAllow passing `decoder_kwargs` as an argument to a field. This dict will be passed as kwargs to\nthe `json.loads()` calls when loading data that is a string.\n\nYou may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.\n\nA new dict is created for each field: so if this value is altered after field definition, it shouldn't\naffect already attached fields.\n\n0.9.16\n~~~~~~\nAllow passing an argument of `encoder_class` to a field, which will result in that object (or\nthe object located at that path, for instance `core.utils.JSONEncoder`) being used as the `cls`\nargument when serializing objects.\n\nYou may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS\n\n0.9.15\n~~~~~~\nBump version number to get around uploading issues.\n\n0.9.14\n~~~~~~\nNo longer hit the db to work out db_type.\n\n0.9.12\n~~~~~~\nCache the result of db_type.\nHandle incoming data from multiple select widget better.\n\n0.9.9\n~~~~~\nFinally strip out non-required files.\n\n0.9.8\n~~~~~\nRemove freezegun workarounds.\nFix broken build.\n\n0.9.4\n~~~~~\nFixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use ``default={}``.\n\n0.9.3\n~~~~~\nRemove support for storing data using Postgres' 9.2's JSON data type, as\nyou cannot currently query against this!\n\nRemove support for django < 1.3.\n\n\n0.9.0\n~~~~~\nAdd LICENSE file.\nAdded TypedJSONField.\n\n\n0.8.10\n~~~~~~\nAllow ``{{ variable|jsonify }}`` to work with querysets.\n\n0.8.8\n~~~~~\nPrevent circular import problem with django 1.3.1 and gargoyle.\n\n0.8.7\n~~~~~\nBetter handle null=True and blank=True: it should make sense what they do now.\n\n0.8.5\n~~~~~\nAllow for '{}' and '[]', and make them not appear to be None.\n\n0.8.4\n~~~~~\nEnsure the version number file is installed with the package.\n\n0.8.3\n~~~~~\nStore the version number in one place only, now.\n\n0.8.2\n~~~~~\nOops. Packaging error prevented install from pypi. Added README.rst to manifest.\n\n0.8.1\n~~~~~\nConverting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).\n\nAdded better querying support: (``field__contains={'key':'value','key2':'value2'}`` works.)\n\nRemoved JSONTableWidget from package.\n\n0.8\n~~~\n\n(Many thanks to `IanLewis <https://bitbucket.org/IanLewis>`_ for these features)\n\nSupports django 1.2\n\nSupports callable and json serializable objects as default\n\nImplemented get_db_prep_value()\n\nAdd tests and test runner.\n\nRemoved JSONTableWidget from README.\n\n0.7.1\n~~~~~\n\nDon't fail when trying to install before django is installed.\n\n0.7\n~~~\nFirst tagged release.\n\n.. _django_jsonfield: https://github.com/adamchainz/django-jsonfield", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/ChouBaoDxs/django-jsonfield", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "django-jsonfield-hotfix", "package_url": "https://pypi.org/project/django-jsonfield-hotfix/", "platform": "", "project_url": "https://pypi.org/project/django-jsonfield-hotfix/", "project_urls": {"Homepage": "https://github.com/ChouBaoDxs/django-jsonfield"}, "release_url": "https://pypi.org/project/django-jsonfield-hotfix/1.3.1.post2/", "requires_dist": null, "requires_python": "", "summary": "JSONField for django models", "version": "1.3.1.post2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"post1-description\">\n<h2>1.3.1post1 description</h2>\n<p>Fork from <a href=\"https://github.com/adamchainz/django-jsonfield\" rel=\"nofollow\">django_jsonfield</a>. Fix postgresql compatibility issue.</p>\n<pre><span class=\"c1\"># jsonfield/fields.py</span>\n<span class=\"k\">def</span> <span class=\"nf\">from_db_value</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"n\">expression</span><span class=\"p\">,</span> <span class=\"n\">connection</span><span class=\"p\">):</span>\n    <span class=\"k\">if</span> <span class=\"n\">value</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"k\">return</span> <span class=\"kc\">None</span>\n    <span class=\"k\">elif</span> <span class=\"n\">connection</span><span class=\"o\">.</span><span class=\"n\">vendor</span> <span class=\"o\">==</span> <span class=\"s1\">'postgresql'</span> <span class=\"ow\">and</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decoder_kwargs</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"s1\">'cls'</span><span class=\"p\">)</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n        <span class=\"c1\"># ** add code belong **</span>\n        <span class=\"k\">if</span> <span class=\"ow\">not</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"nb\">str</span><span class=\"p\">):</span>  <span class=\"c1\"># Previous field type is possibly text but not jsonb or json</span>\n            <span class=\"k\">return</span> <span class=\"n\">value</span>\n    <span class=\"k\">return</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">value</span><span class=\"p\">,</span> <span class=\"o\">**</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">decoder_kwargs</span><span class=\"p\">)</span>\n</pre>\n<p><strong>Maintenance mode only:</strong> It is not recommended you use this library on new\nprojects. See the (long) <strong>History</strong> section below for why and alternatives.</p>\n<hr class=\"docutils\">\n<p>Cross-database JSON field for Django models.</p>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<p>This project was created in 2010 by Matthew Schinckel. He created it based upon\ncode from <a href=\"https://web.archive.org/web/20140731084522/http://cramer.io/2009/04/14/cleaning-up-with-json-and-sql/\" rel=\"nofollow\">David Cramer\u2019s\nblog</a>,\nhad the repository in Mercurial on\n<a href=\"https://bitbucket.org/schinckel/django-jsonfield\" rel=\"nofollow\">BitBucket</a>, and\nmaintained it until 2018. In March 2019, Adam Johnson took over maintenance\n(from an invite back in 2018!), and moved it to Git on\n<a href=\"https://github.com/adamchainz/django-jsonfield\" rel=\"nofollow\">GitHub</a> because he\u2019s no good\nat Mercurial and \u201ceveryone\u201d uses GitHub these days.</p>\n<p>At the time it was created, the databases that Django supports didn\u2019t feature\nnative JSON support. Since then, most of them have gained that ability.\nCorrespondingly, there are some Django field implementations for taking\nadvantage of this:</p>\n<ul>\n<li>A PostgreSQL <tt>JSONField</tt> is provided in\n<a href=\"https://docs.djangoproject.com/en/2.1/ref/contrib/postgres/fields/\" rel=\"nofollow\">django.contrib.postgres</a>,\nwhich was created as part of Django in version 1.9, released December 2015.\nNote this library interferes with the way that works, see\n<a href=\"https://github.com/adamchainz/django-jsonfield/issues/5\" rel=\"nofollow\">issue 5</a> for\nexplanation and a workaround.</li>\n<li>A MySQL (and maybe MariaDB) <tt>JSONField</tt> is provided in\n<a href=\"https://django-mysql.readthedocs.io/en/latest/model_fields/json_field.html\" rel=\"nofollow\">Django-MySQL</a>,\nsince version 1.0.7, released March 2016.</li>\n</ul>\n<p>At time of writing this history (March 2019), there still isn\u2019t a JSONField\nimplementation that can take advantage of the native features on all the\ndatabases. This has been discussed on the <tt><span class=\"pre\">django-developers</span></tt> mailing list\nseveral times though.</p>\n<p>The <tt>JSONField</tt> provided by this library uses native features on\nPostgreSQL, but not on any other database, so it\u2019s in a bit of a weird place.</p>\n<p>If you are considering adding this to a new project, you probably don\u2019t want\nit, instead:</p>\n<ul>\n<li>If you want native JSON support from your database and you\u2019re using\nPostgreSQL or MySQL, use the native fields as per the links above.</li>\n<li>If you don\u2019t want native JSON support, consider just storing the JSON in a\n<tt>TextField</tt> and deserializing it appropriately in your code, perhaps with\na simple model property to proxy it.</li>\n<li>If you need native JSON support on a database for which there is no Django\nfield implementation, try making it yourself or getting in touch to see if\nthere\u2019s something that can be done.</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Install it with <strong>pip</strong>:</p>\n<pre>pip install django-jsonfield-hotfix\n</pre>\n<p>Then use the field in your models:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">import</span> <span class=\"nn\">jsonfield</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">):</span>\n    <span class=\"n\">the_json</span> <span class=\"o\">=</span> <span class=\"n\">jsonfield</span><span class=\"o\">.</span><span class=\"n\">JSONField</span><span class=\"p\">()</span>\n</pre>\n<p>You can assign any JSON-encodable object to this field. It will be\nJSON-encoded before being stored in the database as a text value and it\nwill be turned back into a python list/dict/string upon retrieval from the\ndatabase.</p>\n<p>There is also a <tt>TypedJSONField</tt>, that allows you to define data types that\nmust be included within each object in the array. More documentation to follow.</p>\n<div id=\"notes\">\n<h3>Notes</h3>\n<p>If no <tt>default</tt> is provided, and <tt>null=True</tt> is not passed in to the\nfield constructor, then a default of <tt>{}</tt> will be used.</p>\n</div>\n</div>\n<div id=\"supported-django-versions\">\n<h2>Supported django versions</h2>\n<p>All versions of Django from 1.8 onwards are tested.</p>\n</div>\n<div id=\"extras\">\n<h2>Extras</h2>\n<h2 id=\"jsonify-templatetag\"><span class=\"section-subtitle\">jsonify templatetag</span></h2>\n<p>This allows you to convert a python data structure into JSON within a template:</p>\n<pre>{% load jsonify %}\n\n&lt;script&gt;\nvar foo = {{ bar|jsonify|safe }};\n&lt;/script&gt;\n</pre>\n<p>Note that you must only use the \u201csafe\u201d filter when you use the jsonify\nfilter within a &lt;script&gt; tag (which is parsed like a CDATA section).</p>\n<p>If you use it in some other places like in an HTML attribute, then\nyou must not use the safe filter so that its output is properly escaped:</p>\n<pre>&lt;div data-foo=\"{{ bar|jsonify }}\"&gt;\n</pre>\n<p>The above rules are important to avoid XSS attacks with unsafe strings\nstored in the converted data structure.</p>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>If you want to contribute to django-jsonfield, it will help you to run\nthe test suite. This can be done in its most simple form by running:</p>\n<pre>DB_ENGINE=sqlite3 DB_NAME=tests ./tests.py\n</pre>\n<p>To run the tests fully, you will need to install tox.</p>\n</div>\n<div id=\"id1\">\n<h2>History</h2>\n<div id=\"id2\">\n<h3>1.3.1 (2019-08-19)</h3>\n<ul>\n<li>Fix Python 2 compatilibity from change in 1.3.0\n(<a href=\"https://github.com/adamchainz/django-jsonfield/pull/16\" rel=\"nofollow\">PR #16</a>).</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>1.3.0 (2019-08-18)</h3>\n<ul>\n<li><p>Work in parallel with <tt>django.contrib.postgres.fields.JSONField</tt> by\nremoving registration of default JSONB function and instead using Postgres\u2019\ncast-to-text in SQL\n(<a href=\"https://github.com/adamchainz/django-jsonfield/pull/14\" rel=\"nofollow\">PR #14</a>).</p>\n<p>This should allow you to move to the better supported\n<tt>django.contrib.postgres.fields.JSONField</tt>, and then Django 3.0\u2019s upcoming\nall-database <tt>JSONField</tt>.</p>\n</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>1.2.0 (2019-04-28)</h3>\n<ul>\n<li>Tested with Django 2.2.</li>\n<li>Stop \u201cRemovedInDjango30Warning: Remove the context parameter from\nJSONField.from_db_value().\u201d on Django 2.0+.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>1.1.0 (2019-03-16)</h3>\n<p>Django 1.10 support: register explicit lookup operators.</p>\n<p>Django 1.11 support: update render() method for widget.</p>\n</div>\n<div id=\"id6\">\n<h3>1.0.1 (2016-07-21)</h3>\n<p>Fix issue with Postgres JSONB fields.</p>\n<p>Limit XSS attacks with jsonify template tag.</p>\n</div>\n<div id=\"id7\">\n<h3>1.0.0 (2016-06-02)</h3>\n<p>Add support for Django 1.8 and 1.9 (without warnings). Remove support for Django &lt; 1.8\nas none of those releases are supported upstream anyway.</p>\n<p>With this version, <tt>JSONField</tt> no longer decodes assigned string values as JSON. Instead it assumes that any value that you assign is the decoded value which will be JSON-encoded before storage in the database. This explains the bump to version 1.0 as it\u2019s a backwards incompatible change.</p>\n</div>\n<div id=\"id8\">\n<h3>0.9.19 (2016-02-22)</h3>\n<p>Allow passing <cite>decoder_kwargs</cite> as an argument to a field. This dict will be passed as kwargs to\nthe <cite>json.loads()</cite> calls when loading data that is a string.</p>\n<p>You may also set this as a global value in settings.JSONFIELD_DECODER_KWARGS.</p>\n<p>A new dict is created for each field: so if this value is altered after field definition, it shouldn\u2019t\naffect already attached fields.</p>\n</div>\n<div id=\"id9\">\n<h3>0.9.16</h3>\n<p>Allow passing an argument of <cite>encoder_class</cite> to a field, which will result in that object (or\nthe object located at that path, for instance <cite>core.utils.JSONEncoder</cite>) being used as the <cite>cls</cite>\nargument when serializing objects.</p>\n<p>You may also set this as a global value in settings.JSONFIELD_ENCODER_CLASS</p>\n</div>\n<div id=\"id10\">\n<h3>0.9.15</h3>\n<p>Bump version number to get around uploading issues.</p>\n</div>\n<div id=\"id11\">\n<h3>0.9.14</h3>\n<p>No longer hit the db to work out db_type.</p>\n</div>\n<div id=\"id12\">\n<h3>0.9.12</h3>\n<p>Cache the result of db_type.\nHandle incoming data from multiple select widget better.</p>\n</div>\n<div id=\"id13\">\n<h3>0.9.9</h3>\n<p>Finally strip out non-required files.</p>\n</div>\n<div id=\"id14\">\n<h3>0.9.8</h3>\n<p>Remove freezegun workarounds.\nFix broken build.</p>\n</div>\n<div id=\"id15\">\n<h3>0.9.4</h3>\n<p>Fixes for mutable defaults: we serialize and then deserialize in this\ncase, so you can still use <tt><span class=\"pre\">default={}</span></tt>.</p>\n</div>\n<div id=\"id16\">\n<h3>0.9.3</h3>\n<p>Remove support for storing data using Postgres\u2019 9.2\u2019s JSON data type, as\nyou cannot currently query against this!</p>\n<p>Remove support for django &lt; 1.3.</p>\n</div>\n<div id=\"id17\">\n<h3>0.9.0</h3>\n<p>Add LICENSE file.\nAdded TypedJSONField.</p>\n</div>\n<div id=\"id18\">\n<h3>0.8.10</h3>\n<p>Allow <tt>{{ variable|jsonify }}</tt> to work with querysets.</p>\n</div>\n<div id=\"id19\">\n<h3>0.8.8</h3>\n<p>Prevent circular import problem with django 1.3.1 and gargoyle.</p>\n</div>\n<div id=\"id20\">\n<h3>0.8.7</h3>\n<p>Better handle null=True and blank=True: it should make sense what they do now.</p>\n</div>\n<div id=\"id21\">\n<h3>0.8.5</h3>\n<p>Allow for \u2018{}\u2019 and \u2018[]\u2019, and make them not appear to be None.</p>\n</div>\n<div id=\"id22\">\n<h3>0.8.4</h3>\n<p>Ensure the version number file is installed with the package.</p>\n</div>\n<div id=\"id23\">\n<h3>0.8.3</h3>\n<p>Store the version number in one place only, now.</p>\n</div>\n<div id=\"id24\">\n<h3>0.8.2</h3>\n<p>Oops. Packaging error prevented install from pypi. Added README.rst to manifest.</p>\n</div>\n<div id=\"id25\">\n<h3>0.8.1</h3>\n<p>Converting to string does nothing, as serializing a model instance with a JSONField would have a string version of that field, instead of it embedded inline. (Back to pre 0.8 behaviour).</p>\n<p>Added better querying support: (<tt><span class=\"pre\">field__contains={'key':'value','key2':'value2'}</span></tt> works.)</p>\n<p>Removed JSONTableWidget from package.</p>\n</div>\n<div id=\"id26\">\n<h3>0.8</h3>\n<p>(Many thanks to <a href=\"https://bitbucket.org/IanLewis\" rel=\"nofollow\">IanLewis</a> for these features)</p>\n<p>Supports django 1.2</p>\n<p>Supports callable and json serializable objects as default</p>\n<p>Implemented get_db_prep_value()</p>\n<p>Add tests and test runner.</p>\n<p>Removed JSONTableWidget from README.</p>\n</div>\n<div id=\"id27\">\n<h3>0.7.1</h3>\n<p>Don\u2019t fail when trying to install before django is installed.</p>\n</div>\n<div id=\"id28\">\n<h3>0.7</h3>\n<p>First tagged release.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6179102, "releases": {"1.3.1.post1": [{"comment_text": "", "digests": {"md5": "4965796dbd1fdcb3f65b87a0605c1771", "sha256": "bb175438c350c52ff83946f5f964f5d7a0aecc9817a1d01a623e0830b9d08255"}, "downloads": -1, "filename": "django-jsonfield-hotfix-1.3.1.post1.tar.gz", "has_sig": false, "md5_digest": "4965796dbd1fdcb3f65b87a0605c1771", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15897, "upload_time": "2019-11-22T03:50:06", "upload_time_iso_8601": "2019-11-22T03:50:06.185796Z", "url": "https://files.pythonhosted.org/packages/94/08/be4d07a39eb8d20d477763e64e2c28d172346d69c80365e036f83294a938/django-jsonfield-hotfix-1.3.1.post1.tar.gz", "yanked": false}], "1.3.1.post2": [{"comment_text": "", "digests": {"md5": "b3e321116f33dabcc3c0d7dccfa43595", "sha256": "73574148b5636221fc7b6dcef53b3766171848b72039f434aa58dafeed9fa326"}, "downloads": -1, "filename": "django-jsonfield-hotfix-1.3.1.post2.tar.gz", "has_sig": false, "md5_digest": "b3e321116f33dabcc3c0d7dccfa43595", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15921, "upload_time": "2019-11-22T06:16:56", "upload_time_iso_8601": "2019-11-22T06:16:56.533232Z", "url": "https://files.pythonhosted.org/packages/7e/69/87f744559716ec5221d09a814448f811ef46c2e2b365269711edf9a1bb97/django-jsonfield-hotfix-1.3.1.post2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b3e321116f33dabcc3c0d7dccfa43595", "sha256": "73574148b5636221fc7b6dcef53b3766171848b72039f434aa58dafeed9fa326"}, "downloads": -1, "filename": "django-jsonfield-hotfix-1.3.1.post2.tar.gz", "has_sig": false, "md5_digest": "b3e321116f33dabcc3c0d7dccfa43595", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15921, "upload_time": "2019-11-22T06:16:56", "upload_time_iso_8601": "2019-11-22T06:16:56.533232Z", "url": "https://files.pythonhosted.org/packages/7e/69/87f744559716ec5221d09a814448f811ef46c2e2b365269711edf9a1bb97/django-jsonfield-hotfix-1.3.1.post2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:35:29 2020"}