{"info": {"author": "Lucas Cavalcante da Silva", "author_email": "silva.lucasdev@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8"], "description": "# Wallhaven\n\nA Python wrapper around the Wallhaven API.\n\n# Installation\n\n## Using pip\n\n```sh\npip install wallhaven\n```\n\nIf you want to upgrade it, you can run\n\n```sh\npip install --upgrade wallhaven\n```\n\n## Building from source\n\n1. Install [poetry](https://python-poetry.org/).\n2. Clone the repository\n\n```sh\ngit clone https://github.com/lucasshiva/wallhaven.git\n```\n\n3. Go inside it.\n\n```sh\ncd wallhaven/\n```\n\n4. Install `wallhaven` globally with poetry.\n\n```sh\npoetry install\n```\n\nNow, `wallhaven` is installed in editable mode on your system. This means that if you change something, it will be updated automatically.\n\nIf you wish to install `wallhaven` locally, use poetry to create a virtual environment. Run these commands before using `poetry install`:\n\n```sh\npoetry env use <path_to_python>\npoetry shell\npoetry install\n```\n\n- Currently, `wallhaven` only works with Python 3.6 or greater.\n- You can learn more about Poetry [here](https://python-poetry.org/docs/).\n\n# Limits\n\nAccording to the [official documentation](https://wallhaven.cc/help/api#limits), you can only make **45** requests per minute. An exception will be raised if you hit this limit. If your requests are being made too fast, you'll hit the limit before actually reaching 45.\n\n# Usage\n\n```python\nfrom wallhaven import Wallhaven\n\n# Instanciate it.\n# For some operations, an API key must be provided.\nwallhaven = Wallhaven(api_key)\n\n# Get wallpaper metadata\ndata = wallhaven.get_wallpaper_info(wallpaper_id=\"r25peq\") # Example id\n\n# Get tag metadata\ndata = wallhaven.get_tag_info(tag_id=tag_id)\n\n# Get user settings.\n# An API key must be provided.\ndata = wallhaven.get_user_settings()\n\n# Get the user's public collection\ndata = wallhaven.get_collection_from_username(username=username)\n\n# Get the user's public and private collection.\n# An API key must be provided.\ndata = wallhaven.get_collection_from_apikey()\n\n# Get wallpapers from a user's collection.\n# By default., this will return ALL wallpapers.\n# You can specify a limit.\ndata = wallhaven.get_wallpapers_from_collection(username, collection_id, limit=25)\n```\n\nExample of data returned from `wallhaven.get_wallpaper_info('r25peq')`\n\n```json\n{\n  \"id\": \"r25peq\",\n  \"url\": \"https://wallhaven.cc/w/r25peq\",\n  \"short_url\": \"https://whvn.cc/r25peq\",\n  \"uploader\": {\n    \"username\": \"NinjaFace\",\n    \"group\": \"User\",\n    \"avatar\": {\n      \"200px\": \"https://wallhaven.cc/images/user/avatar/200/56820_48fd0a9fe541.jpg\",\n      \"128px\": \"https://wallhaven.cc/images/user/avatar/128/56820_48fd0a9fe541.jpg\",\n      \"32px\": \"https://wallhaven.cc/images/user/avatar/32/56820_48fd0a9fe541.jpg\",\n      \"20px\": \"https://wallhaven.cc/images/user/avatar/20/56820_48fd0a9fe541.jpg\"\n    }\n  },\n  \"views\": 822,\n  \"favorites\": 14,\n  \"source\": \"https://www.deviantart.com/jim373/art/Food-for-the-Soul-808251562\",\n  \"purity\": \"sfw\",\n  \"category\": \"general\",\n  \"dimension_x\": 3840,\n  \"dimension_y\": 2160,\n  \"resolution\": \"3840x2160\",\n  \"ratio\": \"1.78\",\n  \"file_size\": 13313317,\n  \"file_type\": \"image/png\",\n  \"created_at\": \"2020-01-02 21:08:37\",\n  \"colors\": [\"#000000\", \"#424153\", \"#333399\", \"#663399\", \"#660000\"],\n  \"path\": \"https://w.wallhaven.cc/full/r2/wallhaven-r25peq.png\",\n  \"thumbs\": {\n    \"large\": \"https://th.wallhaven.cc/lg/r2/r25peq.jpg\",\n    \"original\": \"https://th.wallhaven.cc/orig/r2/r25peq.jpg\",\n    \"small\": \"https://th.wallhaven.cc/small/r2/r25peq.jpg\"\n  },\n  \"tags\": [\n    {\n      \"id\": 713,\n      \"name\": \"neon\",\n      \"alias\": \"neon light, neon lights\",\n      \"category_id\": 4,\n      \"category\": \"Miscellaneous\",\n      \"purity\": \"sfw\",\n      \"created_at\": \"2014-03-05 02:13:24\"\n    },\n    {\n      \"id\": 1018,\n      \"name\": \"flowers\",\n      \"alias\": \"flower\",\n      \"category_id\": 42,\n      \"category\": \"Plants\",\n      \"purity\": \"sfw\",\n      \"created_at\": \"2014-03-27 09:42:03\"\n    },\n    {\n      \"id\": 479,\n      \"name\": \"digital art\",\n      \"alias\": \"Cgi, Digital 2D, digital artwork, digital compositions, graphic, graphics, Motion Design\",\n      \"category_id\": 25,\n      \"category\": \"Digital\",\n      \"purity\": \"sfw\",\n      \"created_at\": \"2014-02-17 08:14:11\"\n    }\n  ]\n}\n```\n\n## Search\n\nYou can also search for wallpapers.\n\n```python\nfrom wallhaven import Wallhaven, Parameters\n\n# API key is only needed for NSFW images.\nwallhaven = Wallhaven()\n\n# Choose parameters for the wallpapers.\nparams = Parameters()\nparams.set_categories(general=True, anime=True, people=False)\nparams.set_sorting(\"Toplist\")\nparams.set_range(\"Last Three Days\") # or set_range(\"3d\")\n\n# Search for keywords\nparams.set_search_query(\"Music\")\n\n# Filter tags\nparams.include_tags([\"guitar\"])\nparams.exclude_tags([\"car\"])\n\n# Filter by user\n# Only returns wallpapers from this user.\nparams.filter_by_user(username)\n\n# Search for wallpapers using chosen parameters.\ndata = wallhaven.search(params=params)\n```\n\nEach page contains 24 wallpapers.\nSearch will return a list of dictionaries with the wallpapers' metadata.\nAn empty list will be returned if no wallpapers were found.\n\n**Default parameters:**\n\n- **Categories:** General, Anime, and People.\n- **Purity:** SFW\n- **Sorting:** Date Added\n- **Range**: Last Month (Ignored if 'Sorting' is not \"Toplist\")\n- **Order**: Descending\n- **Page**: 1\n\nFor more information about the API, visit the [official documentation](https://wallhaven.cc/help/api).\n\n# Performance\n\nPerformance is slowed down on purpose. This is to not overload the Wallhaven's server with requests. Currently, the program sleeps for 0.5 seconds after each request. Also, if you're requesting too fast you'll end up hitting the limit sooner.\n\nYou can change the request timeout by:\n\n```python\nfrom wallhaven import Wallhaven\n\nwallhaven = Wallhaven()\n\n# Calling the variable directly.\nwallhaven.REQUEST_TIMEOUT = <seconds>\n\n# Using a method.\nwallhaven.set_request_timeout(<seconds>)\n```\n\n# Methods\n\n## Class `Wallhaven`\n\n- `def __init__(self, api_key=None)`\n- `def _request(self, url, **kwargs) -> requests.Response`\n- `def set_request_timeout(self, time: Union[int, float]) -> None`\n- `def get_wallpaper_info(self, wallpaper_id: Union[str, int]) -> Dict[str, Union[str, int, Dict[str, str], List[str], List[Dict[str, str]]]]`\n- `def get_tag_info(self, tag_id: Union[str, int]) -> Dict[str, str]`\n- `def get_user_settings(self) -> Dict[str, Union[str, List[str]]]`\n  - An API key must be provided.\n- `def_get_collection_from_username(self, username: str) -> List[Dict[str, Union[str, int]]]`\n- `def get_collection_from_apikey(self) -> List[Dict[str, Union[str, int]]]`\n  - An API key must be provided.\n- `def search(self, params: Dict[str, str]) -> List[Dict[str, Union[str, List[str], Dict[str, str]]]]`\n  - An API key must be provided (Only for NSFW wallpapers).\n\n## Class `Parameters`\n\n- `def __init__(self)`\n- `def reset_parameters(self) -> None`\n  - Reset parameters to default.\n- `def reset_filters(self) -> None`\n  - Reset all filters.\n- `def get_params(self) -> Dict[str, str]`\n  - Return current parameters.\n- `def get_filters(self) -> Dict[str, Union[str, Dict[str, List[str]]]]`\n  - Return current filters.\n- `def set_categories(self, general: bool = True, anime: bool = True, people: bool = True) -> None`\n- `def set_purity(self, sfw: bool = True, sketchy: bool = False, nsfw: bool = False) -> None`\n- `def set_sorting(self, sorting: str = \"Date Added\") -> None`\n- `def set_range(self, top_range: str = \"Last Month\") -> None`\n- `def set_sorting_order(self, order: str = \"Descending\") -> None`\n- `def set_page(self, page_number: Union[str, int]) -> None`\n- `def set_search_query(self, query: str = \"\") -> None`\n- `def clear_search_query(self, include_filters: bool = False) -> None`\n  - Clear only the search query. May also clear filters.\n- `def include_tags(self, tags: List[str]) -> None`\n- `def exclude_tags(self, tags: List[str]) -> None`\n- `def filter_by_user(self, username: str) -> None`\n  - Only return wallpapers uploaded by this user.\n\n# Exceptions\n\nThe following exceptions can be raised if something goes wrong:\n\n- `ApiKeyError`\n\n  - Raised when trying to request NSFW wallpapers without an API key (or with a invalid one).\n\n- `PageNotFoundError`\n\n  - Raised when the page is not found. Example: `get_wallpaper_info` is used with an ID that does not exist.\n\n- `RequestLimitError`\n  - Raised when the request limit is hit. Limit is **45** requests per minute, or when requesting too fast.\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/lucasshiva/wallhaven", "keywords": "wallhaven,wallpapers,images,python3,api", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "wallhaven", "package_url": "https://pypi.org/project/wallhaven/", "platform": "", "project_url": "https://pypi.org/project/wallhaven/", "project_urls": {"Homepage": "https://github.com/lucasshiva/wallhaven", "Repository": "https://github.com/lucasshiva/wallhaven"}, "release_url": "https://pypi.org/project/wallhaven/0.6.6/", "requires_dist": ["requests (>=2.22.0,<3.0.0)"], "requires_python": ">=3.6,<4.0", "summary": "A Python wrapper around the Wallhaven API.", "version": "0.6.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Wallhaven</h1>\n<p>A Python wrapper around the Wallhaven API.</p>\n<h1>Installation</h1>\n<h2>Using pip</h2>\n<pre>pip install wallhaven\n</pre>\n<p>If you want to upgrade it, you can run</p>\n<pre>pip install --upgrade wallhaven\n</pre>\n<h2>Building from source</h2>\n<ol>\n<li>Install <a href=\"https://python-poetry.org/\" rel=\"nofollow\">poetry</a>.</li>\n<li>Clone the repository</li>\n</ol>\n<pre>git clone https://github.com/lucasshiva/wallhaven.git\n</pre>\n<ol>\n<li>Go inside it.</li>\n</ol>\n<pre><span class=\"nb\">cd</span> wallhaven/\n</pre>\n<ol>\n<li>Install <code>wallhaven</code> globally with poetry.</li>\n</ol>\n<pre>poetry install\n</pre>\n<p>Now, <code>wallhaven</code> is installed in editable mode on your system. This means that if you change something, it will be updated automatically.</p>\n<p>If you wish to install <code>wallhaven</code> locally, use poetry to create a virtual environment. Run these commands before using <code>poetry install</code>:</p>\n<pre>poetry env use &lt;path_to_python&gt;\npoetry shell\npoetry install\n</pre>\n<ul>\n<li>Currently, <code>wallhaven</code> only works with Python 3.6 or greater.</li>\n<li>You can learn more about Poetry <a href=\"https://python-poetry.org/docs/\" rel=\"nofollow\">here</a>.</li>\n</ul>\n<h1>Limits</h1>\n<p>According to the <a href=\"https://wallhaven.cc/help/api#limits\" rel=\"nofollow\">official documentation</a>, you can only make <strong>45</strong> requests per minute. An exception will be raised if you hit this limit. If your requests are being made too fast, you'll hit the limit before actually reaching 45.</p>\n<h1>Usage</h1>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wallhaven</span> <span class=\"kn\">import</span> <span class=\"n\">Wallhaven</span>\n\n<span class=\"c1\"># Instanciate it.</span>\n<span class=\"c1\"># For some operations, an API key must be provided.</span>\n<span class=\"n\">wallhaven</span> <span class=\"o\">=</span> <span class=\"n\">Wallhaven</span><span class=\"p\">(</span><span class=\"n\">api_key</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get wallpaper metadata</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_wallpaper_info</span><span class=\"p\">(</span><span class=\"n\">wallpaper_id</span><span class=\"o\">=</span><span class=\"s2\">\"r25peq\"</span><span class=\"p\">)</span> <span class=\"c1\"># Example id</span>\n\n<span class=\"c1\"># Get tag metadata</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_tag_info</span><span class=\"p\">(</span><span class=\"n\">tag_id</span><span class=\"o\">=</span><span class=\"n\">tag_id</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get user settings.</span>\n<span class=\"c1\"># An API key must be provided.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_user_settings</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get the user's public collection</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_collection_from_username</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"o\">=</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Get the user's public and private collection.</span>\n<span class=\"c1\"># An API key must be provided.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_collection_from_apikey</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Get wallpapers from a user's collection.</span>\n<span class=\"c1\"># By default., this will return ALL wallpapers.</span>\n<span class=\"c1\"># You can specify a limit.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">get_wallpapers_from_collection</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">,</span> <span class=\"n\">collection_id</span><span class=\"p\">,</span> <span class=\"n\">limit</span><span class=\"o\">=</span><span class=\"mi\">25</span><span class=\"p\">)</span>\n</pre>\n<p>Example of data returned from <code>wallhaven.get_wallpaper_info('r25peq')</code></p>\n<pre><span class=\"p\">{</span>\n  <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"s2\">\"r25peq\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://wallhaven.cc/w/r25peq\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"short_url\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://whvn.cc/r25peq\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"uploader\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"username\"</span><span class=\"p\">:</span> <span class=\"s2\">\"NinjaFace\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"group\"</span><span class=\"p\">:</span> <span class=\"s2\">\"User\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"avatar\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n      <span class=\"nt\">\"200px\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://wallhaven.cc/images/user/avatar/200/56820_48fd0a9fe541.jpg\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"128px\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://wallhaven.cc/images/user/avatar/128/56820_48fd0a9fe541.jpg\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"32px\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://wallhaven.cc/images/user/avatar/32/56820_48fd0a9fe541.jpg\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"20px\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://wallhaven.cc/images/user/avatar/20/56820_48fd0a9fe541.jpg\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"views\"</span><span class=\"p\">:</span> <span class=\"mi\">822</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"favorites\"</span><span class=\"p\">:</span> <span class=\"mi\">14</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"source\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://www.deviantart.com/jim373/art/Food-for-the-Soul-808251562\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"purity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sfw\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"general\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"dimension_x\"</span><span class=\"p\">:</span> <span class=\"mi\">3840</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"dimension_y\"</span><span class=\"p\">:</span> <span class=\"mi\">2160</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"resolution\"</span><span class=\"p\">:</span> <span class=\"s2\">\"3840x2160\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"ratio\"</span><span class=\"p\">:</span> <span class=\"s2\">\"1.78\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"file_size\"</span><span class=\"p\">:</span> <span class=\"mi\">13313317</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"file_type\"</span><span class=\"p\">:</span> <span class=\"s2\">\"image/png\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2020-01-02 21:08:37\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"colors\"</span><span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s2\">\"#000000\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#424153\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#333399\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#663399\"</span><span class=\"p\">,</span> <span class=\"s2\">\"#660000\"</span><span class=\"p\">],</span>\n  <span class=\"nt\">\"path\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://w.wallhaven.cc/full/r2/wallhaven-r25peq.png\"</span><span class=\"p\">,</span>\n  <span class=\"nt\">\"thumbs\"</span><span class=\"p\">:</span> <span class=\"p\">{</span>\n    <span class=\"nt\">\"large\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://th.wallhaven.cc/lg/r2/r25peq.jpg\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"original\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://th.wallhaven.cc/orig/r2/r25peq.jpg\"</span><span class=\"p\">,</span>\n    <span class=\"nt\">\"small\"</span><span class=\"p\">:</span> <span class=\"s2\">\"https://th.wallhaven.cc/small/r2/r25peq.jpg\"</span>\n  <span class=\"p\">},</span>\n  <span class=\"nt\">\"tags\"</span><span class=\"p\">:</span> <span class=\"p\">[</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">713</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"neon\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"alias\"</span><span class=\"p\">:</span> <span class=\"s2\">\"neon light, neon lights\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category_id\"</span><span class=\"p\">:</span> <span class=\"mi\">4</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Miscellaneous\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"purity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sfw\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2014-03-05 02:13:24\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">1018</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"flowers\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"alias\"</span><span class=\"p\">:</span> <span class=\"s2\">\"flower\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category_id\"</span><span class=\"p\">:</span> <span class=\"mi\">42</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Plants\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"purity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sfw\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2014-03-27 09:42:03\"</span>\n    <span class=\"p\">},</span>\n    <span class=\"p\">{</span>\n      <span class=\"nt\">\"id\"</span><span class=\"p\">:</span> <span class=\"mi\">479</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"name\"</span><span class=\"p\">:</span> <span class=\"s2\">\"digital art\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"alias\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Cgi, Digital 2D, digital artwork, digital compositions, graphic, graphics, Motion Design\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category_id\"</span><span class=\"p\">:</span> <span class=\"mi\">25</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"category\"</span><span class=\"p\">:</span> <span class=\"s2\">\"Digital\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"purity\"</span><span class=\"p\">:</span> <span class=\"s2\">\"sfw\"</span><span class=\"p\">,</span>\n      <span class=\"nt\">\"created_at\"</span><span class=\"p\">:</span> <span class=\"s2\">\"2014-02-17 08:14:11\"</span>\n    <span class=\"p\">}</span>\n  <span class=\"p\">]</span>\n<span class=\"p\">}</span>\n</pre>\n<h2>Search</h2>\n<p>You can also search for wallpapers.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wallhaven</span> <span class=\"kn\">import</span> <span class=\"n\">Wallhaven</span><span class=\"p\">,</span> <span class=\"n\">Parameters</span>\n\n<span class=\"c1\"># API key is only needed for NSFW images.</span>\n<span class=\"n\">wallhaven</span> <span class=\"o\">=</span> <span class=\"n\">Wallhaven</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Choose parameters for the wallpapers.</span>\n<span class=\"n\">params</span> <span class=\"o\">=</span> <span class=\"n\">Parameters</span><span class=\"p\">()</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set_categories</span><span class=\"p\">(</span><span class=\"n\">general</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">anime</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">people</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set_sorting</span><span class=\"p\">(</span><span class=\"s2\">\"Toplist\"</span><span class=\"p\">)</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set_range</span><span class=\"p\">(</span><span class=\"s2\">\"Last Three Days\"</span><span class=\"p\">)</span> <span class=\"c1\"># or set_range(\"3d\")</span>\n\n<span class=\"c1\"># Search for keywords</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">set_search_query</span><span class=\"p\">(</span><span class=\"s2\">\"Music\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Filter tags</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">include_tags</span><span class=\"p\">([</span><span class=\"s2\">\"guitar\"</span><span class=\"p\">])</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">exclude_tags</span><span class=\"p\">([</span><span class=\"s2\">\"car\"</span><span class=\"p\">])</span>\n\n<span class=\"c1\"># Filter by user</span>\n<span class=\"c1\"># Only returns wallpapers from this user.</span>\n<span class=\"n\">params</span><span class=\"o\">.</span><span class=\"n\">filter_by_user</span><span class=\"p\">(</span><span class=\"n\">username</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Search for wallpapers using chosen parameters.</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">search</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"n\">params</span><span class=\"p\">)</span>\n</pre>\n<p>Each page contains 24 wallpapers.\nSearch will return a list of dictionaries with the wallpapers' metadata.\nAn empty list will be returned if no wallpapers were found.</p>\n<p><strong>Default parameters:</strong></p>\n<ul>\n<li><strong>Categories:</strong> General, Anime, and People.</li>\n<li><strong>Purity:</strong> SFW</li>\n<li><strong>Sorting:</strong> Date Added</li>\n<li><strong>Range</strong>: Last Month (Ignored if 'Sorting' is not \"Toplist\")</li>\n<li><strong>Order</strong>: Descending</li>\n<li><strong>Page</strong>: 1</li>\n</ul>\n<p>For more information about the API, visit the <a href=\"https://wallhaven.cc/help/api\" rel=\"nofollow\">official documentation</a>.</p>\n<h1>Performance</h1>\n<p>Performance is slowed down on purpose. This is to not overload the Wallhaven's server with requests. Currently, the program sleeps for 0.5 seconds after each request. Also, if you're requesting too fast you'll end up hitting the limit sooner.</p>\n<p>You can change the request timeout by:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">wallhaven</span> <span class=\"kn\">import</span> <span class=\"n\">Wallhaven</span>\n\n<span class=\"n\">wallhaven</span> <span class=\"o\">=</span> <span class=\"n\">Wallhaven</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Calling the variable directly.</span>\n<span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">REQUEST_TIMEOUT</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span>\n\n<span class=\"c1\"># Using a method.</span>\n<span class=\"n\">wallhaven</span><span class=\"o\">.</span><span class=\"n\">set_request_timeout</span><span class=\"p\">(</span><span class=\"o\">&lt;</span><span class=\"n\">seconds</span><span class=\"o\">&gt;</span><span class=\"p\">)</span>\n</pre>\n<h1>Methods</h1>\n<h2>Class <code>Wallhaven</code></h2>\n<ul>\n<li><code>def __init__(self, api_key=None)</code></li>\n<li><code>def _request(self, url, **kwargs) -&gt; requests.Response</code></li>\n<li><code>def set_request_timeout(self, time: Union[int, float]) -&gt; None</code></li>\n<li><code>def get_wallpaper_info(self, wallpaper_id: Union[str, int]) -&gt; Dict[str, Union[str, int, Dict[str, str], List[str], List[Dict[str, str]]]]</code></li>\n<li><code>def get_tag_info(self, tag_id: Union[str, int]) -&gt; Dict[str, str]</code></li>\n<li><code>def get_user_settings(self) -&gt; Dict[str, Union[str, List[str]]]</code>\n<ul>\n<li>An API key must be provided.</li>\n</ul>\n</li>\n<li><code>def_get_collection_from_username(self, username: str) -&gt; List[Dict[str, Union[str, int]]]</code></li>\n<li><code>def get_collection_from_apikey(self) -&gt; List[Dict[str, Union[str, int]]]</code>\n<ul>\n<li>An API key must be provided.</li>\n</ul>\n</li>\n<li><code>def search(self, params: Dict[str, str]) -&gt; List[Dict[str, Union[str, List[str], Dict[str, str]]]]</code>\n<ul>\n<li>An API key must be provided (Only for NSFW wallpapers).</li>\n</ul>\n</li>\n</ul>\n<h2>Class <code>Parameters</code></h2>\n<ul>\n<li><code>def __init__(self)</code></li>\n<li><code>def reset_parameters(self) -&gt; None</code>\n<ul>\n<li>Reset parameters to default.</li>\n</ul>\n</li>\n<li><code>def reset_filters(self) -&gt; None</code>\n<ul>\n<li>Reset all filters.</li>\n</ul>\n</li>\n<li><code>def get_params(self) -&gt; Dict[str, str]</code>\n<ul>\n<li>Return current parameters.</li>\n</ul>\n</li>\n<li><code>def get_filters(self) -&gt; Dict[str, Union[str, Dict[str, List[str]]]]</code>\n<ul>\n<li>Return current filters.</li>\n</ul>\n</li>\n<li><code>def set_categories(self, general: bool = True, anime: bool = True, people: bool = True) -&gt; None</code></li>\n<li><code>def set_purity(self, sfw: bool = True, sketchy: bool = False, nsfw: bool = False) -&gt; None</code></li>\n<li><code>def set_sorting(self, sorting: str = \"Date Added\") -&gt; None</code></li>\n<li><code>def set_range(self, top_range: str = \"Last Month\") -&gt; None</code></li>\n<li><code>def set_sorting_order(self, order: str = \"Descending\") -&gt; None</code></li>\n<li><code>def set_page(self, page_number: Union[str, int]) -&gt; None</code></li>\n<li><code>def set_search_query(self, query: str = \"\") -&gt; None</code></li>\n<li><code>def clear_search_query(self, include_filters: bool = False) -&gt; None</code>\n<ul>\n<li>Clear only the search query. May also clear filters.</li>\n</ul>\n</li>\n<li><code>def include_tags(self, tags: List[str]) -&gt; None</code></li>\n<li><code>def exclude_tags(self, tags: List[str]) -&gt; None</code></li>\n<li><code>def filter_by_user(self, username: str) -&gt; None</code>\n<ul>\n<li>Only return wallpapers uploaded by this user.</li>\n</ul>\n</li>\n</ul>\n<h1>Exceptions</h1>\n<p>The following exceptions can be raised if something goes wrong:</p>\n<ul>\n<li>\n<p><code>ApiKeyError</code></p>\n<ul>\n<li>Raised when trying to request NSFW wallpapers without an API key (or with a invalid one).</li>\n</ul>\n</li>\n<li>\n<p><code>PageNotFoundError</code></p>\n<ul>\n<li>Raised when the page is not found. Example: <code>get_wallpaper_info</code> is used with an ID that does not exist.</li>\n</ul>\n</li>\n<li>\n<p><code>RequestLimitError</code></p>\n<ul>\n<li>Raised when the request limit is hit. Limit is <strong>45</strong> requests per minute, or when requesting too fast.</li>\n</ul>\n</li>\n</ul>\n\n          </div>"}, "last_serial": 6602173, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "025664938b865c5f37de81ef0951dfb9", "sha256": "236e01c03ae1cd9ea12e0cbb2ed540e8cde5859898fc2f6e287bf29cc23f8780"}, "downloads": -1, "filename": "wallhaven-0.5.1-py3-none-any.whl", "has_sig": false, "md5_digest": "025664938b865c5f37de81ef0951dfb9", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 336067, "upload_time": "2020-01-26T22:06:41", "upload_time_iso_8601": "2020-01-26T22:06:41.467451Z", "url": "https://files.pythonhosted.org/packages/bc/5a/b8498405832ea72835e643833159862c33d9358bbc3b068dd5ad2a2b88c5/wallhaven-0.5.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7f5b86d30f95b0d0b1859266e972e243", "sha256": "ad51bd8fbaed8581fbcec1376de2f989d4679ba00c55d6a8f5842c621687ed67"}, "downloads": -1, "filename": "wallhaven-0.5.1.tar.gz", "has_sig": false, "md5_digest": "7f5b86d30f95b0d0b1859266e972e243", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 233398, "upload_time": "2020-01-26T22:06:46", "upload_time_iso_8601": "2020-01-26T22:06:46.131563Z", "url": "https://files.pythonhosted.org/packages/7e/85/540248bf8a44b16b41223c265a42c511e88f124ac0aa8715dbff4e85d4b4/wallhaven-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "2cac85c10d8f1d9c06bdde244ecd3f30", "sha256": "54871e505c2d4928b1c987890713a8a7a2a7159e422237148bac4f157d4a2f08"}, "downloads": -1, "filename": "wallhaven-0.5.2-py3-none-any.whl", "has_sig": false, "md5_digest": "2cac85c10d8f1d9c06bdde244ecd3f30", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 336856, "upload_time": "2020-01-26T22:13:13", "upload_time_iso_8601": "2020-01-26T22:13:13.494167Z", "url": "https://files.pythonhosted.org/packages/19/c2/b65c821094c3307f34163e83d5272f18e0d29954584de456ecf89b4a6136/wallhaven-0.5.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "350e3f7f46aaddaa6aeff5762da61c9c", "sha256": "4f23eba2e49afc71822408c5a50edd0d3ec5029f9930e78a67a611fb21a85da1"}, "downloads": -1, "filename": "wallhaven-0.5.2.tar.gz", "has_sig": false, "md5_digest": "350e3f7f46aaddaa6aeff5762da61c9c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 233535, "upload_time": "2020-01-26T22:13:15", "upload_time_iso_8601": "2020-01-26T22:13:15.694615Z", "url": "https://files.pythonhosted.org/packages/1f/eb/5c02a70d6146eca20e23e96b05d881dfdb49191e28a453dd2f404167f324/wallhaven-0.5.2.tar.gz", "yanked": false}], "0.5.3": [{"comment_text": "", "digests": {"md5": "7efd801cac8a8e4b9a9be65c922dee2a", "sha256": "302a97342fdc4aedef0ba381edff6ea30013404c7a6e669b7721a7691074459a"}, "downloads": -1, "filename": "wallhaven-0.5.3-py3-none-any.whl", "has_sig": false, "md5_digest": "7efd801cac8a8e4b9a9be65c922dee2a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 335519, "upload_time": "2020-01-26T22:28:19", "upload_time_iso_8601": "2020-01-26T22:28:19.721871Z", "url": "https://files.pythonhosted.org/packages/f4/b1/3fd3dc9498b75f9b4af973b7c52fca6336ad0b8215cfdd1877d7a3a4bebd/wallhaven-0.5.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "cd57a529b7542dc01fa56372ded0f5fe", "sha256": "e89878a926c74be7c23070869e9c35f7d2f053d8f2096fc9a7e12e057ef73628"}, "downloads": -1, "filename": "wallhaven-0.5.3.tar.gz", "has_sig": false, "md5_digest": "cd57a529b7542dc01fa56372ded0f5fe", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 233398, "upload_time": "2020-01-26T22:28:22", "upload_time_iso_8601": "2020-01-26T22:28:22.483184Z", "url": "https://files.pythonhosted.org/packages/3a/67/45d4ab2a3ea5213d9f023f2be158c16da4e483c5d9673aa33ca74daf7a65/wallhaven-0.5.3.tar.gz", "yanked": false}], "0.6.0": [{"comment_text": "", "digests": {"md5": "ee3aad24eeef20875014ac69688e5d1e", "sha256": "61a3a481893e10c53755b10b8b3318ff4505d9dee316a3f1d0c847ac230fc3ca"}, "downloads": -1, "filename": "wallhaven-0.6.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ee3aad24eeef20875014ac69688e5d1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 10863, "upload_time": "2020-01-29T18:31:26", "upload_time_iso_8601": "2020-01-29T18:31:26.244502Z", "url": "https://files.pythonhosted.org/packages/0b/21/0f740b666c4e7b8f2e7049f1ca0f25e7ba114774e5a5413f6c81bef930e7/wallhaven-0.6.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "aa486e7a12e601890c3189199f9e00cf", "sha256": "3dd84178528ecea63839c9db43bfd47ee4cc3c51b98ca1a4641140f2af29b661"}, "downloads": -1, "filename": "wallhaven-0.6.0.tar.gz", "has_sig": false, "md5_digest": "aa486e7a12e601890c3189199f9e00cf", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 10956, "upload_time": "2020-01-29T18:31:28", "upload_time_iso_8601": "2020-01-29T18:31:28.137957Z", "url": "https://files.pythonhosted.org/packages/6e/73/95bc7da306a84675c8c4839502b4c441f5f606f22df2e516da4a38b38463/wallhaven-0.6.0.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "336383728e84b215e6db156ca9339831", "sha256": "395e117d1207c8faa7897e2498f4944bc41cd33f846c27fdac0a4f9cc80d5b2c"}, "downloads": -1, "filename": "wallhaven-0.6.1-py3-none-any.whl", "has_sig": false, "md5_digest": "336383728e84b215e6db156ca9339831", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12178, "upload_time": "2020-02-03T12:23:37", "upload_time_iso_8601": "2020-02-03T12:23:37.395398Z", "url": "https://files.pythonhosted.org/packages/b0/04/0c24405970c4d1e26d547868297449b7d01df7a4d5c7803325ac6f970dd4/wallhaven-0.6.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6bfd7a21a46b3504ef736bd78f6c17e8", "sha256": "2e80d6e4f6dbd1c07cf289e92901b2dba094934f316b0e8ccfc1afc783bfa05d"}, "downloads": -1, "filename": "wallhaven-0.6.1.tar.gz", "has_sig": false, "md5_digest": "6bfd7a21a46b3504ef736bd78f6c17e8", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11793, "upload_time": "2020-02-03T12:23:39", "upload_time_iso_8601": "2020-02-03T12:23:39.125831Z", "url": "https://files.pythonhosted.org/packages/2c/f7/171bfb1b2eee0fc659bc28361bd852d0fc2e6577bb82cde95214e3999cd0/wallhaven-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "4634688e0414d7985038515ee30a190b", "sha256": "d3f5541ecbe045ff5c681e2c07dfff130dad602560f2c8ecea2656e41ec36583"}, "downloads": -1, "filename": "wallhaven-0.6.2-py3-none-any.whl", "has_sig": false, "md5_digest": "4634688e0414d7985038515ee30a190b", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 11439, "upload_time": "2020-02-04T15:43:37", "upload_time_iso_8601": "2020-02-04T15:43:37.876038Z", "url": "https://files.pythonhosted.org/packages/65/30/d83c7f4d8a02104ab6000ff09e90655b8f1202b4c4bce8cba07e2682a8ca/wallhaven-0.6.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0c62755294abe7621179762594996b7b", "sha256": "0b1e9e43439559784f081f24bb73f55c9c9b7637edd84970fade31ad4475e5cf"}, "downloads": -1, "filename": "wallhaven-0.6.2.tar.gz", "has_sig": false, "md5_digest": "0c62755294abe7621179762594996b7b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11448, "upload_time": "2020-02-04T15:43:39", "upload_time_iso_8601": "2020-02-04T15:43:39.484782Z", "url": "https://files.pythonhosted.org/packages/8b/42/59032390e1317f530f78ff81d5ca52e30e284a32239dbd91f89dfd645d53/wallhaven-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "4579f01e4200d65c8b86d399049d1e5d", "sha256": "750c14096e3c99fc00a968c17fbb2e18ca335cea5473ddda6ca3bba469e0c9b6"}, "downloads": -1, "filename": "wallhaven-0.6.3-py3-none-any.whl", "has_sig": false, "md5_digest": "4579f01e4200d65c8b86d399049d1e5d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12103, "upload_time": "2020-02-05T14:13:03", "upload_time_iso_8601": "2020-02-05T14:13:03.285679Z", "url": "https://files.pythonhosted.org/packages/24/ac/45f38385dfd77d04f275b46fa2b443cb172c86dd622e66c7a22841f58704/wallhaven-0.6.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4ab5e8b721e11fb2ae7eb302ff9830ca", "sha256": "d977e57c29fb9948fb494f9b77cfbc26b008f5002b54c9f4b7ac2f0662674b0c"}, "downloads": -1, "filename": "wallhaven-0.6.3.tar.gz", "has_sig": false, "md5_digest": "4ab5e8b721e11fb2ae7eb302ff9830ca", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 11869, "upload_time": "2020-02-05T14:13:04", "upload_time_iso_8601": "2020-02-05T14:13:04.820762Z", "url": "https://files.pythonhosted.org/packages/e0/97/79cc6cb328ed27cf658c24157b569630460d54ef9ced40fd2c0c46f19d73/wallhaven-0.6.3.tar.gz", "yanked": false}], "0.6.4": [{"comment_text": "", "digests": {"md5": "479fa210f946194bc5588bd15bfc5947", "sha256": "11144db6c2cd636fbeb8fbc8540c83b00110084ab5c84ca589179bf99c5f333a"}, "downloads": -1, "filename": "wallhaven-0.6.4-py3-none-any.whl", "has_sig": false, "md5_digest": "479fa210f946194bc5588bd15bfc5947", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12513, "upload_time": "2020-02-08T22:17:01", "upload_time_iso_8601": "2020-02-08T22:17:01.975574Z", "url": "https://files.pythonhosted.org/packages/bb/c0/479ab5b557ea61d6bebe943cbd9db0689966d798b6200b371866270efefe/wallhaven-0.6.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bb6096b4dcc309471b6d0a3f8140a87c", "sha256": "bcf8a2e4c88d21048a70643117e2b6628c1cc858dca63a1acbc97f9160a285f7"}, "downloads": -1, "filename": "wallhaven-0.6.4.tar.gz", "has_sig": false, "md5_digest": "bb6096b4dcc309471b6d0a3f8140a87c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12852, "upload_time": "2020-02-08T22:17:03", "upload_time_iso_8601": "2020-02-08T22:17:03.624035Z", "url": "https://files.pythonhosted.org/packages/48/89/992b8f1b28cf12747c99e86abcac815d75887f2d468b27c6de15b87803e0/wallhaven-0.6.4.tar.gz", "yanked": false}], "0.6.5": [{"comment_text": "", "digests": {"md5": "f1c10d938788ed5ae2a2b296191bd3ed", "sha256": "90160165c4259b84548fdf8135ca844b47e94f34322b997963215a42a7a77d62"}, "downloads": -1, "filename": "wallhaven-0.6.5-py3-none-any.whl", "has_sig": false, "md5_digest": "f1c10d938788ed5ae2a2b296191bd3ed", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12440, "upload_time": "2020-02-09T16:56:58", "upload_time_iso_8601": "2020-02-09T16:56:58.550294Z", "url": "https://files.pythonhosted.org/packages/c0/a0/605d07a1d5e726ce20d3606e18891bf828ca64652a72f6df35181de2d6e1/wallhaven-0.6.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a90a1722deac33028afa1ddbea0d6ec9", "sha256": "82ce01bd80b1781151b67dade62e981c844cb1c329650ec17ba9a43f040759e8"}, "downloads": -1, "filename": "wallhaven-0.6.5.tar.gz", "has_sig": false, "md5_digest": "a90a1722deac33028afa1ddbea0d6ec9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 12798, "upload_time": "2020-02-09T16:57:00", "upload_time_iso_8601": "2020-02-09T16:57:00.340942Z", "url": "https://files.pythonhosted.org/packages/44/c8/95c933e742c64a3bb4139f430bc7f4b695c4381961556d9b04bcdfb3f5d6/wallhaven-0.6.5.tar.gz", "yanked": false}], "0.6.6": [{"comment_text": "", "digests": {"md5": "74cfe8c3b2108d050b0925fe9aeca423", "sha256": "f7cc41d3b349c41800d3614bd8275f39aaa5aebd2cb5ff946d603278a8ce8bff"}, "downloads": -1, "filename": "wallhaven-0.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "74cfe8c3b2108d050b0925fe9aeca423", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12919, "upload_time": "2020-02-10T12:37:02", "upload_time_iso_8601": "2020-02-10T12:37:02.472101Z", "url": "https://files.pythonhosted.org/packages/37/7c/e2373899266ea429d1ec3d78f514111d6f5c0ae8d37ba14d06686f46b7e9/wallhaven-0.6.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2bbc22149899a81d9ce787b600df352", "sha256": "3ad7c6c350e918af02bdc77d68784de44d4a34fe142437bb1de529c376205852"}, "downloads": -1, "filename": "wallhaven-0.6.6.tar.gz", "has_sig": false, "md5_digest": "a2bbc22149899a81d9ce787b600df352", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13696, "upload_time": "2020-02-10T12:37:04", "upload_time_iso_8601": "2020-02-10T12:37:04.011270Z", "url": "https://files.pythonhosted.org/packages/51/53/70a58dd9d82b25386d123ada36d1202847b37ec3a3a3858cb67cfd673fb9/wallhaven-0.6.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "74cfe8c3b2108d050b0925fe9aeca423", "sha256": "f7cc41d3b349c41800d3614bd8275f39aaa5aebd2cb5ff946d603278a8ce8bff"}, "downloads": -1, "filename": "wallhaven-0.6.6-py3-none-any.whl", "has_sig": false, "md5_digest": "74cfe8c3b2108d050b0925fe9aeca423", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6,<4.0", "size": 12919, "upload_time": "2020-02-10T12:37:02", "upload_time_iso_8601": "2020-02-10T12:37:02.472101Z", "url": "https://files.pythonhosted.org/packages/37/7c/e2373899266ea429d1ec3d78f514111d6f5c0ae8d37ba14d06686f46b7e9/wallhaven-0.6.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "a2bbc22149899a81d9ce787b600df352", "sha256": "3ad7c6c350e918af02bdc77d68784de44d4a34fe142437bb1de529c376205852"}, "downloads": -1, "filename": "wallhaven-0.6.6.tar.gz", "has_sig": false, "md5_digest": "a2bbc22149899a81d9ce787b600df352", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6,<4.0", "size": 13696, "upload_time": "2020-02-10T12:37:04", "upload_time_iso_8601": "2020-02-10T12:37:04.011270Z", "url": "https://files.pythonhosted.org/packages/51/53/70a58dd9d82b25386d123ada36d1202847b37ec3a3a3858cb67cfd673fb9/wallhaven-0.6.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:32:37 2020"}