{"info": {"author": "Tim Adams", "author_email": "adamstimb@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# ![Nimbusinator](nimbusinator.png)\n\nRM Nimbus GUI for Python\n\n## About\n\nNimbusinator is a graphical user-interface package for Python that mimicks the graphics and text drivers of the RM Nimbus PC186.  It is _not_ an emulation of the Nimbus itself.  This means you get the best of both worlds:  Cutting-edge Python computing power, beautifully presented in up to 16 colours!\n\n![Quick Start Animation](quickstart_animation.gif)\n\nDisclaimer: Nimbusinator is a tribute project and is in no way linked to or endorsed by RM plc.\n\n[Read the docs for full details](https://nimbusinator.readthedocs.io/)\n\n## Usage\n\nTo implement a Nimbus user interface all you need to do is import the `Nimbus` and `Command` classes, like this:\n\n```python\nfrom nimbusinator.nimbus import Nimbus\nfrom nimbusinator.command import Command\n```\n\nThen create one object of each, and bind the `Command` object to the `Nimbus` object:\n\n```python\nnim = Nimbus()\ncmd = Command(nim)\n```\n\nTo display the screen, call the `boot` method on the `Nimbus` object.  By default, you'll see the famous blue \"Welcome Screen\" before control is released back to your program.  To skip the Welcome Screen simply pass the argument `skip_welcome_screen=True` when calling `boot`, like this:\n\n```python\n# Boot the Nimbus with Welcome Screen\nnim.boot()\n# Boot the Nimbus without Welcome Screen  \nnim.boot(skip_welcome_screen=True)\n```\n\nNote that the original Welcome Screen reported the memory status of the computer (in kilobytes!), alongside the RM firmware version and machine serial number.  Nimbusinator also displays memory status (but in units of Megabytes) and uses your Python version as the firmware version and your OS release number as the serial number.  It also uses information from your runtime environment to simulate a short DOS-like boot sequence before finally releasing control back to your application.  All the while you can enjoy the dulcet tones of an imaginary floppy drive.\n\nTo bring the Nimbus programming experience into the 21st century, the API - although Pythonic - has been modelled on the syntax of RM Basic.  For example, in RM Basic to write a greeting in big, red letters in the bottom-left corner of the screen you would use the `PLOT` command:\n\n```basic\nPLOT \"Hi kittens!\", 10, 10 BRUSH 2 SIZE 4\n```\n\nAnd in Python with Nimbusinator you can write the same instruction like this:\n\n```python\ncmd.plot('Hi kittens!', (10, 10), brush=2, size=4)\n```\n\nIt is recommended to read the RM Basic manual to get familiar with the original commands and how graphics and text were handled on the Nimbus (see links below).\n\nTo cleanly exit your application, call the `shutdown` method on the `Nimbus` object:\n\n```python\n# Always do this before your app quits:\nnim.shutdown()\n```\n\n## Installation\n\nNimbusinator is technically cross-platform but there are differences in the way PyGame's dependencies are installed between operating systems.  So far I have only tested installation on Ubuntu 19.04 (see below).  If you have tested PyGame successfully on other platforms please drop the magic formula in [the issues](https://github.com/adamstimb/nimbusinator/issues) and I'll add it below.\n\n### Ubuntu 19.04\n\n```bash\n# Install dependencies for pygame and simpleaudio:\nsudo apt-get install -y python3-dev libasound2-dev python3-setuptools python3-numpy python3-opengl libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev libtiff5-dev libx11-6 libx11-dev fluid-soundfont-gm timgm6mb-soundfont xfonts-base xfonts-100dpi xfonts-75dpi xfonts-cyrillic fontconfig fonts-freefont-ttf libfreetype6-dev\n\n# Then activate your Python env and install:\npip install nimbusinator\n```\n\n## Quick-start\n\n\n```python\nfrom nimbusinator.nimbus import Nimbus\nfrom nimbusinator.command import Command\n\nif __name__ == '__main__': \n    # Create and bind nimbusinator objects:\n    nim = Nimbus()\n    cmd = Command(nim)\n    nim.boot()          # Boot the Nimbus\n    cmd.set_mode(40)    # Low resolution mode\n    cmd.set_border(1)   # Dark blue border\n    cmd.set_paper(9)    # Light blue paper\n    cmd.cls()           # Clear screen\n    cmd.plonk_logo((8, 110))    # Show Nimbus logo\n    # Display a message in cyan with shadowing\n    cmd.plot('Greetings!!!', (65, 155), size=2, brush=0)\n    cmd.plot('Greetings!!!', (66, 156), size=2, brush=13)\n    # Wait 5 seconds then shutdown\n    nim.sleep(5)\n    nim.shutdown()\n```\n\n## Links\n\n- [Read the Docs](https://nimbusinator.readthedocs.io/) - Full documentation\n- [Facebook](https://www.facebook.com/RMNimbus/) - RM Nimbus facebook group\n- [Center for Computing History](http://www.computinghistory.org.uk/) - original RM Nimbus manuals and technical data\n- [Center for Computing History - RM Nimbus PC (Later Beige Model)](http://www.computinghistory.org.uk/det/41537/RM-Nimbus-PC-(Later-Beige-Model)/) - online exhibit\n- [The Nimbus Museum](https://thenimbus.co.uk/) - online museum that looks like the Welcome Disk!\n- [RM Nimbus](https://en.wikipedia.org/wiki/RM_Nimbus) - Wikipedia article\n- [mame](https://www.mamedev.org/) - comprehensive retro computer emulation project\n- [Freesound pack: Floppy disk drive](https://freesound.org/people/MrAuralization/packs/15891/) - source of the floppy drive sounds\n- [Ironstone Innovation](https://ironstoneinnovation.eu) - what I do for a living\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/adamstimb/nimbusinator", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "nimbusinator", "package_url": "https://pypi.org/project/nimbusinator/", "platform": "", "project_url": "https://pypi.org/project/nimbusinator/", "project_urls": {"Homepage": "https://github.com/adamstimb/nimbusinator"}, "release_url": "https://pypi.org/project/nimbusinator/0.2.2/", "requires_dist": ["PySDL2", "Pillow", "numpy", "simpleaudio", "pynput (==1.4.5)", "psutil", "pygame (<2.0,>=1.9.3) ; python_version != \"3.3\""], "requires_python": ">=3.6", "summary": "RM Nimbus GUI for Python", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><img alt=\"Nimbusinator\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/9651138373bb4271265d720d35ab9c14464ed0f7/6e696d627573696e61746f722e706e67\"></h1>\n<p>RM Nimbus GUI for Python</p>\n<h2>About</h2>\n<p>Nimbusinator is a graphical user-interface package for Python that mimicks the graphics and text drivers of the RM Nimbus PC186.  It is <em>not</em> an emulation of the Nimbus itself.  This means you get the best of both worlds:  Cutting-edge Python computing power, beautifully presented in up to 16 colours!</p>\n<p><img alt=\"Quick Start Animation\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1ed68c2f41830ed646a527d970197ceb136e2985/717569636b73746172745f616e696d6174696f6e2e676966\"></p>\n<p>Disclaimer: Nimbusinator is a tribute project and is in no way linked to or endorsed by RM plc.</p>\n<p><a href=\"https://nimbusinator.readthedocs.io/\" rel=\"nofollow\">Read the docs for full details</a></p>\n<h2>Usage</h2>\n<p>To implement a Nimbus user interface all you need to do is import the <code>Nimbus</code> and <code>Command</code> classes, like this:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nimbusinator.nimbus</span> <span class=\"kn\">import</span> <span class=\"n\">Nimbus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nimbusinator.command</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n</pre>\n<p>Then create one object of each, and bind the <code>Command</code> object to the <code>Nimbus</code> object:</p>\n<pre><span class=\"n\">nim</span> <span class=\"o\">=</span> <span class=\"n\">Nimbus</span><span class=\"p\">()</span>\n<span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">(</span><span class=\"n\">nim</span><span class=\"p\">)</span>\n</pre>\n<p>To display the screen, call the <code>boot</code> method on the <code>Nimbus</code> object.  By default, you'll see the famous blue \"Welcome Screen\" before control is released back to your program.  To skip the Welcome Screen simply pass the argument <code>skip_welcome_screen=True</code> when calling <code>boot</code>, like this:</p>\n<pre><span class=\"c1\"># Boot the Nimbus with Welcome Screen</span>\n<span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">boot</span><span class=\"p\">()</span>\n<span class=\"c1\"># Boot the Nimbus without Welcome Screen  </span>\n<span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">boot</span><span class=\"p\">(</span><span class=\"n\">skip_welcome_screen</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n</pre>\n<p>Note that the original Welcome Screen reported the memory status of the computer (in kilobytes!), alongside the RM firmware version and machine serial number.  Nimbusinator also displays memory status (but in units of Megabytes) and uses your Python version as the firmware version and your OS release number as the serial number.  It also uses information from your runtime environment to simulate a short DOS-like boot sequence before finally releasing control back to your application.  All the while you can enjoy the dulcet tones of an imaginary floppy drive.</p>\n<p>To bring the Nimbus programming experience into the 21st century, the API - although Pythonic - has been modelled on the syntax of RM Basic.  For example, in RM Basic to write a greeting in big, red letters in the bottom-left corner of the screen you would use the <code>PLOT</code> command:</p>\n<pre><span class=\"vg\">PLOT</span><span class=\"w\"> </span><span class=\"s2\">\"Hi kittens!\"</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"il\">10</span><span class=\"p\">,</span><span class=\"w\"> </span><span class=\"il\">10</span><span class=\"w\"> </span><span class=\"vg\">BRUSH</span><span class=\"w\"> </span><span class=\"il\">2</span><span class=\"w\"> </span><span class=\"vg\">SIZE</span><span class=\"w\"> </span><span class=\"il\">4</span>\n</pre>\n<p>And in Python with Nimbusinator you can write the same instruction like this:</p>\n<pre><span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'Hi kittens!'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">10</span><span class=\"p\">),</span> <span class=\"n\">brush</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">4</span><span class=\"p\">)</span>\n</pre>\n<p>It is recommended to read the RM Basic manual to get familiar with the original commands and how graphics and text were handled on the Nimbus (see links below).</p>\n<p>To cleanly exit your application, call the <code>shutdown</code> method on the <code>Nimbus</code> object:</p>\n<pre><span class=\"c1\"># Always do this before your app quits:</span>\n<span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre>\n<h2>Installation</h2>\n<p>Nimbusinator is technically cross-platform but there are differences in the way PyGame's dependencies are installed between operating systems.  So far I have only tested installation on Ubuntu 19.04 (see below).  If you have tested PyGame successfully on other platforms please drop the magic formula in <a href=\"https://github.com/adamstimb/nimbusinator/issues\" rel=\"nofollow\">the issues</a> and I'll add it below.</p>\n<h3>Ubuntu 19.04</h3>\n<pre><span class=\"c1\"># Install dependencies for pygame and simpleaudio:</span>\nsudo apt-get install -y python3-dev libasound2-dev python3-setuptools python3-numpy python3-opengl libsdl-image1.2-dev libsdl-mixer1.2-dev libsdl-ttf2.0-dev libsmpeg-dev libsdl1.2-dev libportmidi-dev libswscale-dev libavformat-dev libavcodec-dev libtiff5-dev libx11-6 libx11-dev fluid-soundfont-gm timgm6mb-soundfont xfonts-base xfonts-100dpi xfonts-75dpi xfonts-cyrillic fontconfig fonts-freefont-ttf libfreetype6-dev\n\n<span class=\"c1\"># Then activate your Python env and install:</span>\npip install nimbusinator\n</pre>\n<h2>Quick-start</h2>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">nimbusinator.nimbus</span> <span class=\"kn\">import</span> <span class=\"n\">Nimbus</span>\n<span class=\"kn\">from</span> <span class=\"nn\">nimbusinator.command</span> <span class=\"kn\">import</span> <span class=\"n\">Command</span>\n\n<span class=\"k\">if</span> <span class=\"vm\">__name__</span> <span class=\"o\">==</span> <span class=\"s1\">'__main__'</span><span class=\"p\">:</span> \n    <span class=\"c1\"># Create and bind nimbusinator objects:</span>\n    <span class=\"n\">nim</span> <span class=\"o\">=</span> <span class=\"n\">Nimbus</span><span class=\"p\">()</span>\n    <span class=\"n\">cmd</span> <span class=\"o\">=</span> <span class=\"n\">Command</span><span class=\"p\">(</span><span class=\"n\">nim</span><span class=\"p\">)</span>\n    <span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">boot</span><span class=\"p\">()</span>          <span class=\"c1\"># Boot the Nimbus</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">set_mode</span><span class=\"p\">(</span><span class=\"mi\">40</span><span class=\"p\">)</span>    <span class=\"c1\"># Low resolution mode</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">set_border</span><span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">)</span>   <span class=\"c1\"># Dark blue border</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">set_paper</span><span class=\"p\">(</span><span class=\"mi\">9</span><span class=\"p\">)</span>    <span class=\"c1\"># Light blue paper</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">cls</span><span class=\"p\">()</span>           <span class=\"c1\"># Clear screen</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">plonk_logo</span><span class=\"p\">((</span><span class=\"mi\">8</span><span class=\"p\">,</span> <span class=\"mi\">110</span><span class=\"p\">))</span>    <span class=\"c1\"># Show Nimbus logo</span>\n    <span class=\"c1\"># Display a message in cyan with shadowing</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'Greetings!!!'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">65</span><span class=\"p\">,</span> <span class=\"mi\">155</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">brush</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n    <span class=\"n\">cmd</span><span class=\"o\">.</span><span class=\"n\">plot</span><span class=\"p\">(</span><span class=\"s1\">'Greetings!!!'</span><span class=\"p\">,</span> <span class=\"p\">(</span><span class=\"mi\">66</span><span class=\"p\">,</span> <span class=\"mi\">156</span><span class=\"p\">),</span> <span class=\"n\">size</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">brush</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n    <span class=\"c1\"># Wait 5 seconds then shutdown</span>\n    <span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">nim</span><span class=\"o\">.</span><span class=\"n\">shutdown</span><span class=\"p\">()</span>\n</pre>\n<h2>Links</h2>\n<ul>\n<li><a href=\"https://nimbusinator.readthedocs.io/\" rel=\"nofollow\">Read the Docs</a> - Full documentation</li>\n<li><a href=\"https://www.facebook.com/RMNimbus/\" rel=\"nofollow\">Facebook</a> - RM Nimbus facebook group</li>\n<li><a href=\"http://www.computinghistory.org.uk/\" rel=\"nofollow\">Center for Computing History</a> - original RM Nimbus manuals and technical data</li>\n<li><a href=\"http://www.computinghistory.org.uk/det/41537/RM-Nimbus-PC-(Later-Beige-Model)/\" rel=\"nofollow\">Center for Computing History - RM Nimbus PC (Later Beige Model)</a> - online exhibit</li>\n<li><a href=\"https://thenimbus.co.uk/\" rel=\"nofollow\">The Nimbus Museum</a> - online museum that looks like the Welcome Disk!</li>\n<li><a href=\"https://en.wikipedia.org/wiki/RM_Nimbus\" rel=\"nofollow\">RM Nimbus</a> - Wikipedia article</li>\n<li><a href=\"https://www.mamedev.org/\" rel=\"nofollow\">mame</a> - comprehensive retro computer emulation project</li>\n<li><a href=\"https://freesound.org/people/MrAuralization/packs/15891/\" rel=\"nofollow\">Freesound pack: Floppy disk drive</a> - source of the floppy drive sounds</li>\n<li><a href=\"https://ironstoneinnovation.eu\" rel=\"nofollow\">Ironstone Innovation</a> - what I do for a living</li>\n</ul>\n\n          </div>"}, "last_serial": 6807059, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "a57fc5608266175d015b935585e6e1ae", "sha256": "f8fc55e64a11dc86dca1eeba389d70b863aae01adb44dfbd7b1578cef6c41ea4"}, "downloads": -1, "filename": "nimbusinator-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "a57fc5608266175d015b935585e6e1ae", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 538749, "upload_time": "2019-11-22T21:02:50", "upload_time_iso_8601": "2019-11-22T21:02:50.452543Z", "url": "https://files.pythonhosted.org/packages/06/e0/f87b98f3210e53c5a25b19377aa699f733277206cca0f08bb715d779f6f0/nimbusinator-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b1a998e9d5a2d1d503db550d71580093", "sha256": "241fccc289ca67a63da4a39d83144368a64b4c354c28d10778d113768301b154"}, "downloads": -1, "filename": "nimbusinator-0.0.1.tar.gz", "has_sig": false, "md5_digest": "b1a998e9d5a2d1d503db550d71580093", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 537855, "upload_time": "2019-11-22T21:02:56", "upload_time_iso_8601": "2019-11-22T21:02:56.531233Z", "url": "https://files.pythonhosted.org/packages/fc/e4/8dcc519de70fe7e1e8bc96d7d07542dce58a4682ef3dd839276ebf0505df/nimbusinator-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cc332838fa23162f6b15ec2ce3110c42", "sha256": "a67e8b1d8c11be664b0c34af4c54fdc2ac91e6a487e1263baf97a9b0de693881"}, "downloads": -1, "filename": "nimbusinator-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cc332838fa23162f6b15ec2ce3110c42", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 538653, "upload_time": "2019-11-23T09:57:23", "upload_time_iso_8601": "2019-11-23T09:57:23.729208Z", "url": "https://files.pythonhosted.org/packages/aa/f9/ff60b80945f76d361b9ca487af9b1ffa2d84ebdb59d2c57c5b732d0f8480/nimbusinator-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41c791f229ee08bd0bce42d36807a543", "sha256": "7e7985c81e76ea8a44eaf9bef1b3a394d41a147bce640f58c48979f4a20d9fab"}, "downloads": -1, "filename": "nimbusinator-0.0.2.tar.gz", "has_sig": false, "md5_digest": "41c791f229ee08bd0bce42d36807a543", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 538613, "upload_time": "2019-11-23T09:57:28", "upload_time_iso_8601": "2019-11-23T09:57:28.193325Z", "url": "https://files.pythonhosted.org/packages/52/c6/af95230fcd2d8e02538e4b6969b2a82acaeb073b45d946ccfcf57d015cd4/nimbusinator-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "d32311f73764d08b97b12e061f3a3cde", "sha256": "195131c9e4dd65cce889f3adc1618899fb7136a4b770208345ae2db1d79eb41e"}, "downloads": -1, "filename": "nimbusinator-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "d32311f73764d08b97b12e061f3a3cde", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 569451, "upload_time": "2019-11-29T17:11:25", "upload_time_iso_8601": "2019-11-29T17:11:25.504713Z", "url": "https://files.pythonhosted.org/packages/f3/88/cbd344bf0ef7b0f4c809866a6134057d3b3b09b2edb74bffc0552d1c327b/nimbusinator-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "3f58d79ceeea518e5ef0d26cf4df3528", "sha256": "0091172d7122d13f3f8043a003233fec335c8af5fefd51e26eb97d2e9981e90c"}, "downloads": -1, "filename": "nimbusinator-0.1.0.tar.gz", "has_sig": false, "md5_digest": "3f58d79ceeea518e5ef0d26cf4df3528", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 567350, "upload_time": "2019-11-29T17:11:30", "upload_time_iso_8601": "2019-11-29T17:11:30.329860Z", "url": "https://files.pythonhosted.org/packages/15/1f/06cf993816f43f0675a9cf7e9ceec6a3dd29600ef9b224cc8da8843ae110/nimbusinator-0.1.0.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "f0d7687da9e550b61c8c4574ff3c5fad", "sha256": "1f8b64616a6110aa5278ed4dd0d0d58dff1bfa2ce780db4f8f0b0b3677f66e93"}, "downloads": -1, "filename": "nimbusinator-0.2.1-py3-none-any.whl", "has_sig": false, "md5_digest": "f0d7687da9e550b61c8c4574ff3c5fad", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 572931, "upload_time": "2019-12-07T17:53:54", "upload_time_iso_8601": "2019-12-07T17:53:54.591967Z", "url": "https://files.pythonhosted.org/packages/af/06/3a13b881c4f7c8eb96ddb20cf2acd3e34d8284e331451a638bd967118db5/nimbusinator-0.2.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "acebec85c0e698ed452a822cac41dfc9", "sha256": "fe1b60c5a1b7cc631fdec6d769ac76f01886a7adbe728ab43525529a05aa9d2b"}, "downloads": -1, "filename": "nimbusinator-0.2.1.tar.gz", "has_sig": false, "md5_digest": "acebec85c0e698ed452a822cac41dfc9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 557429, "upload_time": "2019-12-07T17:53:57", "upload_time_iso_8601": "2019-12-07T17:53:57.701008Z", "url": "https://files.pythonhosted.org/packages/ca/bb/0dedc2901856193fcd4bd7a2becf699fe2aeb9fcd6c7682093353c5d7d4f/nimbusinator-0.2.1.tar.gz", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "8bc48d03462e2a46299d17527d4afaeb", "sha256": "9e0b3be9a9a996d2441be39f9d66ab5e03f09bc1b456ffab7b0f0f7c7b6b9ff0"}, "downloads": -1, "filename": "nimbusinator-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8bc48d03462e2a46299d17527d4afaeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 573768, "upload_time": "2020-03-13T16:26:01", "upload_time_iso_8601": "2020-03-13T16:26:01.769122Z", "url": "https://files.pythonhosted.org/packages/36/72/c8ecd8f25da96feba2f53fa9b9793c6f53e6a384b473f26d8ef7718433d2/nimbusinator-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b3e4082d8288400727edcc9705627eb", "sha256": "386e74da3d40d6b551e1fdb90caa44dfb422c7dfc842cf146f3450e732407efa"}, "downloads": -1, "filename": "nimbusinator-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2b3e4082d8288400727edcc9705627eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 558346, "upload_time": "2020-03-13T16:26:04", "upload_time_iso_8601": "2020-03-13T16:26:04.414479Z", "url": "https://files.pythonhosted.org/packages/11/2a/7246eadd34560810ce5a4494fa2e555d745fe94a46a8e5b6f479f453c12d/nimbusinator-0.2.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8bc48d03462e2a46299d17527d4afaeb", "sha256": "9e0b3be9a9a996d2441be39f9d66ab5e03f09bc1b456ffab7b0f0f7c7b6b9ff0"}, "downloads": -1, "filename": "nimbusinator-0.2.2-py3-none-any.whl", "has_sig": false, "md5_digest": "8bc48d03462e2a46299d17527d4afaeb", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 573768, "upload_time": "2020-03-13T16:26:01", "upload_time_iso_8601": "2020-03-13T16:26:01.769122Z", "url": "https://files.pythonhosted.org/packages/36/72/c8ecd8f25da96feba2f53fa9b9793c6f53e6a384b473f26d8ef7718433d2/nimbusinator-0.2.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2b3e4082d8288400727edcc9705627eb", "sha256": "386e74da3d40d6b551e1fdb90caa44dfb422c7dfc842cf146f3450e732407efa"}, "downloads": -1, "filename": "nimbusinator-0.2.2.tar.gz", "has_sig": false, "md5_digest": "2b3e4082d8288400727edcc9705627eb", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 558346, "upload_time": "2020-03-13T16:26:04", "upload_time_iso_8601": "2020-03-13T16:26:04.414479Z", "url": "https://files.pythonhosted.org/packages/11/2a/7246eadd34560810ce5a4494fa2e555d745fe94a46a8e5b6f479f453c12d/nimbusinator-0.2.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:45:21 2020"}