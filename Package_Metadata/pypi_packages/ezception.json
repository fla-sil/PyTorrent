{"info": {"author": "Rich Harkins", "author_email": "rich.harkins@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 2 - Pre-Alpha", "License :: OSI Approved :: GNU General Public License v3 or later (GPLv3+)", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# EZCeption (and EZMessage)\n\nThese classes provide a simplified means to define exception classes and\nmessage attributes.\n\n# Goals\n\n* Less boilerplate to define error classes so they'll be used more.\n* Formatting does not happen at raise time so catching errors doesn't incur\n  string computation cost.\n* Exception fields are easier to probe by exception handlers.\n* Class-bases exceptions are a snap to define.\n* Works with regular Python exception classes.\n* Interfaces with the gettext module by default.\n* Allows for associating other i18n messaging in the error classes.\n\n# Installation.\n\n```bash\npip install ezception\n```\n\n**NOTE: ezception is not on pypi yet.  Until official releases are available:**\n\n```bash\npip install https://github.com/hrharkins/ezception/archive/master.zip\n```\n\n# Usage\n\n```python\nimport ezception\n\nclass MyWebRequester(object):\n\n    class Error(ezception.EZCeption):\n        'A general error has occurred.'\n\n    class OpenError(Error):\n        'An error opening {self.url!r} has occurred.'\n\n    class NoURLError(OpenError):\n        '''\n        No URL was provided.\n        ''''\n\n    class NoURLError(OpenError):\n        '''\n        The scheme {self.scheme!r} is not acceptable.\n        '''\n\n    ...\n\n    def open(self, url):\n        ... stuff happens.\n\n        ... Oh noes!\n        raise self.BadSchemeError(scheme=url.scheme)\n\n```\n\nSo in the example the class defines a simple hierarchy of errors.  Progreammers \ncan trivially trap MyWebRequester.Error to catch anything generated by \nMyWebRequester.  Because it's very simple to define those errors, a more \nrobust exception hierarchy is more likely to emerge.\n\nIn addition, the message is NOT generated at exception time.  Because of this,\nit is easy to catch and determine better handling code.  The default Python\nexceptions use args, which requires the programmer to have tighter coupling \nwith the error classes to acquire the parameters of the failure (or the\nerror class needs to define more properties).\n\nOnly when the exception is printed does stringification occur.  In addition,\nthe message to be presented is processed using the gettext module, so adding\nsupport for other languages for such messages is possible using regular .po\nfiles.  All messages are tracked by a global ezception.ALL_MSGS dict so\ngenerating base .po files is also simplified.\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/hrharkins/ezception", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "ezception", "package_url": "https://pypi.org/project/ezception/", "platform": "", "project_url": "https://pypi.org/project/ezception/", "project_urls": {"Homepage": "https://github.com/hrharkins/ezception"}, "release_url": "https://pypi.org/project/ezception/0.0.2/", "requires_dist": null, "requires_python": ">=3.6", "summary": "Simple exceptions and messaging", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>EZCeption (and EZMessage)</h1>\n<p>These classes provide a simplified means to define exception classes and\nmessage attributes.</p>\n<h1>Goals</h1>\n<ul>\n<li>Less boilerplate to define error classes so they'll be used more.</li>\n<li>Formatting does not happen at raise time so catching errors doesn't incur\nstring computation cost.</li>\n<li>Exception fields are easier to probe by exception handlers.</li>\n<li>Class-bases exceptions are a snap to define.</li>\n<li>Works with regular Python exception classes.</li>\n<li>Interfaces with the gettext module by default.</li>\n<li>Allows for associating other i18n messaging in the error classes.</li>\n</ul>\n<h1>Installation.</h1>\n<pre>pip install ezception\n</pre>\n<p><strong>NOTE: ezception is not on pypi yet.  Until official releases are available:</strong></p>\n<pre>pip install https://github.com/hrharkins/ezception/archive/master.zip\n</pre>\n<h1>Usage</h1>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ezception</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">MyWebRequester</span><span class=\"p\">(</span><span class=\"nb\">object</span><span class=\"p\">):</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">Error</span><span class=\"p\">(</span><span class=\"n\">ezception</span><span class=\"o\">.</span><span class=\"n\">EZCeption</span><span class=\"p\">):</span>\n        <span class=\"s1\">'A general error has occurred.'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">OpenError</span><span class=\"p\">(</span><span class=\"n\">Error</span><span class=\"p\">):</span>\n        <span class=\"s1\">'An error opening </span><span class=\"si\">{self.url!r}</span><span class=\"s1\"> has occurred.'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">NoURLError</span><span class=\"p\">(</span><span class=\"n\">OpenError</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        No URL was provided.</span>\n<span class=\"sd\">        '''</span><span class=\"s1\">'</span>\n\n    <span class=\"k\">class</span> <span class=\"nc\">NoURLError</span><span class=\"p\">(</span><span class=\"n\">OpenError</span><span class=\"p\">):</span>\n        <span class=\"sd\">'''</span>\n<span class=\"sd\">        The scheme {self.scheme!r} is not acceptable.</span>\n<span class=\"sd\">        '''</span>\n\n    <span class=\"o\">...</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">open</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">url</span><span class=\"p\">):</span>\n        <span class=\"o\">...</span> <span class=\"n\">stuff</span> <span class=\"n\">happens</span><span class=\"o\">.</span>\n\n        <span class=\"o\">...</span> <span class=\"n\">Oh</span> <span class=\"n\">noes</span><span class=\"err\">!</span>\n        <span class=\"k\">raise</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">BadSchemeError</span><span class=\"p\">(</span><span class=\"n\">scheme</span><span class=\"o\">=</span><span class=\"n\">url</span><span class=\"o\">.</span><span class=\"n\">scheme</span><span class=\"p\">)</span>\n</pre>\n<p>So in the example the class defines a simple hierarchy of errors.  Progreammers\ncan trivially trap MyWebRequester.Error to catch anything generated by\nMyWebRequester.  Because it's very simple to define those errors, a more\nrobust exception hierarchy is more likely to emerge.</p>\n<p>In addition, the message is NOT generated at exception time.  Because of this,\nit is easy to catch and determine better handling code.  The default Python\nexceptions use args, which requires the programmer to have tighter coupling\nwith the error classes to acquire the parameters of the failure (or the\nerror class needs to define more properties).</p>\n<p>Only when the exception is printed does stringification occur.  In addition,\nthe message to be presented is processed using the gettext module, so adding\nsupport for other languages for such messages is possible using regular .po\nfiles.  All messages are tracked by a global ezception.ALL_MSGS dict so\ngenerating base .po files is also simplified.</p>\n\n          </div>"}, "last_serial": 6133804, "releases": {"0.0.2": [{"comment_text": "", "digests": {"md5": "d69ba9da663ec70074c9327a64a48b8e", "sha256": "9e02d48cd29d2c76ad636663618e9c44af1b5788554f1c9306c280b9f50262a7"}, "downloads": -1, "filename": "ezception-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d69ba9da663ec70074c9327a64a48b8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15693, "upload_time": "2019-11-14T00:45:14", "upload_time_iso_8601": "2019-11-14T00:45:14.283467Z", "url": "https://files.pythonhosted.org/packages/bb/00/70ce0cc433c5e2ad5e7e5351c78d18409170d29b6f3cf3a5b143440fe8d1/ezception-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d8d082c9010383b267f0c5501e41389", "sha256": "de646cf765f5917dbcff56e3770a9b7562c005c61951aed3f53d693118740e22"}, "downloads": -1, "filename": "ezception-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4d8d082c9010383b267f0c5501e41389", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3394, "upload_time": "2019-11-14T00:45:15", "upload_time_iso_8601": "2019-11-14T00:45:15.792317Z", "url": "https://files.pythonhosted.org/packages/23/a1/00276ddd21eca672e469c883e6151a7dc62d214b7bccdf5456e54a679293/ezception-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "d69ba9da663ec70074c9327a64a48b8e", "sha256": "9e02d48cd29d2c76ad636663618e9c44af1b5788554f1c9306c280b9f50262a7"}, "downloads": -1, "filename": "ezception-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "d69ba9da663ec70074c9327a64a48b8e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 15693, "upload_time": "2019-11-14T00:45:14", "upload_time_iso_8601": "2019-11-14T00:45:14.283467Z", "url": "https://files.pythonhosted.org/packages/bb/00/70ce0cc433c5e2ad5e7e5351c78d18409170d29b6f3cf3a5b143440fe8d1/ezception-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4d8d082c9010383b267f0c5501e41389", "sha256": "de646cf765f5917dbcff56e3770a9b7562c005c61951aed3f53d693118740e22"}, "downloads": -1, "filename": "ezception-0.0.2.tar.gz", "has_sig": false, "md5_digest": "4d8d082c9010383b267f0c5501e41389", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 3394, "upload_time": "2019-11-14T00:45:15", "upload_time_iso_8601": "2019-11-14T00:45:15.792317Z", "url": "https://files.pythonhosted.org/packages/23/a1/00276ddd21eca672e469c883e6151a7dc62d214b7bccdf5456e54a679293/ezception-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:44:24 2020"}