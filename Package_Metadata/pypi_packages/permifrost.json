{"info": {"author": "GitLab Data Team, Meltano Team, & Contributors", "author_email": "permifrost@gitlab.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# `permifrost`\n\nUse this command to check and manage the permissions of a Snowflake account.\n\n```bash\npermifrost grant <spec_file> --db snowflake [--dry] [--diff]\n```\n\nGiven the parameters to connect to a Snowflake account and a YAML file (a \"spec\") representing the desired database configuration, this command makes sure that the configuration of that database matches the spec. If there are differences, it will return the sql grant and revoke commands required to make it match the spec. If there are additional permissions set in the database this command will create the necessary revoke commands with the exception of:\n\n* Object Ownership\n* Warehouse Privileges\n\nPermifrost is heavily inspired by [pgbedrock](https://github.com/Squarespace/pgbedrock) which can be used for managing the permissions in a Postgres database.\n\n## spec_file\n\nThe YAML specification file is used to define in a declarative way the databases, roles, users and warehouses in a Snowflake account, together with the permissions for databases, schemas and tables for the same account.\n\nAll permissions are abbreviated as `read` or `write` permissions, with Permifrost generating the proper grants for each type of object. This includes shared databases which have simpler and more limited permissions than non-shared databases.\n\nTables and views are listed under `tables` and handled properly behind the scenes.\n\nIf `*` is provided as the parameter for tables the grant statement will use the `ALL <object_type>s in SCHEMA` syntax. It will also grant to future tables and views. See Snowflake documenation for [`ON FUTURE`](https://docs.snowflake.net/manuals/sql-reference/sql/grant-privilege.html#optional-parameters)\n\nIf a schema name includes an asterisk, such as `snowplow_*`, then all schemas that match this pattern will be included in grant statement. This can be coupled with the asterisk for table grants to grant permissions on all tables in all schemas that match the given pattern. This is useful for date-partitioned schemas.\n\nAll entities must be explicitly referenced. For example, if a permission is granted to a schema or table then the database must be explicitly referenced for permissioning as well.\n\nA specification file has the following structure:\n\n```bash\n# Databases\ndatabases:\n    - db_name:\n        shared: boolean\n    - db_name:\n        shared: boolean\n    ... ... ...\n\n# Roles\nroles:\n    - role_name:\n        warehouses:\n            - warehouse_name\n            - warehouse_name\n            ...\n\n        member_of:\n            - role_name\n            - role_name\n            ...\n\n        privileges:\n            databases:\n                read:\n                    - database_name\n                    - database_name\n                    ...\n                write:\n                    - database_name\n                    - database_name\n                    ...\n            schemas:\n                read:\n                    - database_name.*\n                    - database_name.schema_name\n                    - database_name.schema_partial_*\n                    ...\n                write:\n                    - database_name.*\n                    - database_name.schema_name\n                    - database_name.schema_partial_*\n                    ...\n            tables:\n                read:\n                    - database_name.*.*\n                    - database_name.schema_name.*\n                    - database_name.schema_partial_*.*\n                    - database_name.schema_name.table_name\n                    ...\n                write:\n                    - database_name.*.*\n                    - database_name.schema_name.*\n                    - database_name.schema_partial_*.*\n                    - database_name.schema_name.table_name\n                    ...\n\n        owns:\n            databases:\n                - database_name\n                ...\n            schemas:\n                - database_name.*\n                - database_name.schema_name\n                - database_name.schema_partial_*\n                ...\n            tables:\n                - database_name.*.*\n                - database_name.schema_name.*\n                - database_name.schema_partial_*.*\n                - database_name.schema_name.table_name\n                ...\n\n    - role_name:\n    ... ... ...\n\n# Users\nusers:\n    - user_name:\n        can_login: boolean\n        member_of:\n            - role_name\n            ...\n    - user_name:\n    ... ... ...\n\n# Warehouses\nwarehouses:\n    - warehouse_name:\n        size: x-small\n    ... ... ...\n```\n\nFor a working example, you can check [the Snowflake specification file](https://gitlab.com/gitlab-data/permifrost/blob/master/tests/permifrost/core/permissions/specs/snowflake_spec.yml) that we are using for testing `permifrost permissions`.\n\n## --diff\n\nWhen this flag is set, a full diff with both new and already granted commands is returned. Otherwise, only required commands for matching the definitions on the spec are returned.\n\n## --dry\n\nWhen this flag is set, the permission queries generated are not actually sent to the server and run; They are just returned to the user for examining them and running them manually.\n\nWhen this flag is not set, the commands will be executed on Snowflake and their status will be returned and shown on the command line.\n\n## Connection Parameters\n\nThe following environmental variables must be available to connect to Snowflake:\n\n```bash\n$PERMISSION_BOT_USER\n$PERMISSION_BOT_PASSWORD\n$PERMISSION_BOT_ACCOUNT\n$PERMISSION_BOT_DATABASE\n$PERMISSION_BOT_ROLE\n$PERMISSION_BOT_WAREHOUSE\n```", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/gitlab-data/permifrost", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "permifrost", "package_url": "https://pypi.org/project/permifrost/", "platform": "", "project_url": "https://pypi.org/project/permifrost/", "project_urls": {"Homepage": "https://gitlab.com/gitlab-data/permifrost"}, "release_url": "https://pypi.org/project/permifrost/0.1.0/", "requires_dist": null, "requires_python": "", "summary": "Permifrost Permissions", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1><code>permifrost</code></h1>\n<p>Use this command to check and manage the permissions of a Snowflake account.</p>\n<pre>permifrost grant &lt;spec_file&gt; --db snowflake <span class=\"o\">[</span>--dry<span class=\"o\">]</span> <span class=\"o\">[</span>--diff<span class=\"o\">]</span>\n</pre>\n<p>Given the parameters to connect to a Snowflake account and a YAML file (a \"spec\") representing the desired database configuration, this command makes sure that the configuration of that database matches the spec. If there are differences, it will return the sql grant and revoke commands required to make it match the spec. If there are additional permissions set in the database this command will create the necessary revoke commands with the exception of:</p>\n<ul>\n<li>Object Ownership</li>\n<li>Warehouse Privileges</li>\n</ul>\n<p>Permifrost is heavily inspired by <a href=\"https://github.com/Squarespace/pgbedrock\" rel=\"nofollow\">pgbedrock</a> which can be used for managing the permissions in a Postgres database.</p>\n<h2>spec_file</h2>\n<p>The YAML specification file is used to define in a declarative way the databases, roles, users and warehouses in a Snowflake account, together with the permissions for databases, schemas and tables for the same account.</p>\n<p>All permissions are abbreviated as <code>read</code> or <code>write</code> permissions, with Permifrost generating the proper grants for each type of object. This includes shared databases which have simpler and more limited permissions than non-shared databases.</p>\n<p>Tables and views are listed under <code>tables</code> and handled properly behind the scenes.</p>\n<p>If <code>*</code> is provided as the parameter for tables the grant statement will use the <code>ALL &lt;object_type&gt;s in SCHEMA</code> syntax. It will also grant to future tables and views. See Snowflake documenation for <a href=\"https://docs.snowflake.net/manuals/sql-reference/sql/grant-privilege.html#optional-parameters\" rel=\"nofollow\"><code>ON FUTURE</code></a></p>\n<p>If a schema name includes an asterisk, such as <code>snowplow_*</code>, then all schemas that match this pattern will be included in grant statement. This can be coupled with the asterisk for table grants to grant permissions on all tables in all schemas that match the given pattern. This is useful for date-partitioned schemas.</p>\n<p>All entities must be explicitly referenced. For example, if a permission is granted to a schema or table then the database must be explicitly referenced for permissioning as well.</p>\n<p>A specification file has the following structure:</p>\n<pre><span class=\"c1\"># Databases</span>\ndatabases:\n    - db_name:\n        shared: boolean\n    - db_name:\n        shared: boolean\n    ... ... ...\n\n<span class=\"c1\"># Roles</span>\nroles:\n    - role_name:\n        warehouses:\n            - warehouse_name\n            - warehouse_name\n            ...\n\n        member_of:\n            - role_name\n            - role_name\n            ...\n\n        privileges:\n            databases:\n                read:\n                    - database_name\n                    - database_name\n                    ...\n                write:\n                    - database_name\n                    - database_name\n                    ...\n            schemas:\n                read:\n                    - database_name.*\n                    - database_name.schema_name\n                    - database_name.schema_partial_*\n                    ...\n                write:\n                    - database_name.*\n                    - database_name.schema_name\n                    - database_name.schema_partial_*\n                    ...\n            tables:\n                read:\n                    - database_name.*.*\n                    - database_name.schema_name.*\n                    - database_name.schema_partial_*.*\n                    - database_name.schema_name.table_name\n                    ...\n                write:\n                    - database_name.*.*\n                    - database_name.schema_name.*\n                    - database_name.schema_partial_*.*\n                    - database_name.schema_name.table_name\n                    ...\n\n        owns:\n            databases:\n                - database_name\n                ...\n            schemas:\n                - database_name.*\n                - database_name.schema_name\n                - database_name.schema_partial_*\n                ...\n            tables:\n                - database_name.*.*\n                - database_name.schema_name.*\n                - database_name.schema_partial_*.*\n                - database_name.schema_name.table_name\n                ...\n\n    - role_name:\n    ... ... ...\n\n<span class=\"c1\"># Users</span>\nusers:\n    - user_name:\n        can_login: boolean\n        member_of:\n            - role_name\n            ...\n    - user_name:\n    ... ... ...\n\n<span class=\"c1\"># Warehouses</span>\nwarehouses:\n    - warehouse_name:\n        size: x-small\n    ... ... ...\n</pre>\n<p>For a working example, you can check <a href=\"https://gitlab.com/gitlab-data/permifrost/blob/master/tests/permifrost/core/permissions/specs/snowflake_spec.yml\" rel=\"nofollow\">the Snowflake specification file</a> that we are using for testing <code>permifrost permissions</code>.</p>\n<h2>--diff</h2>\n<p>When this flag is set, a full diff with both new and already granted commands is returned. Otherwise, only required commands for matching the definitions on the spec are returned.</p>\n<h2>--dry</h2>\n<p>When this flag is set, the permission queries generated are not actually sent to the server and run; They are just returned to the user for examining them and running them manually.</p>\n<p>When this flag is not set, the commands will be executed on Snowflake and their status will be returned and shown on the command line.</p>\n<h2>Connection Parameters</h2>\n<p>The following environmental variables must be available to connect to Snowflake:</p>\n<pre><span class=\"nv\">$PERMISSION_BOT_USER</span>\n<span class=\"nv\">$PERMISSION_BOT_PASSWORD</span>\n<span class=\"nv\">$PERMISSION_BOT_ACCOUNT</span>\n<span class=\"nv\">$PERMISSION_BOT_DATABASE</span>\n<span class=\"nv\">$PERMISSION_BOT_ROLE</span>\n<span class=\"nv\">$PERMISSION_BOT_WAREHOUSE</span>\n</pre>\n\n          </div>"}, "last_serial": 6762645, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "ba76bf8b83610fc61dbeb39a79934327", "sha256": "e9b581f613c87b88d6908a3a1545da77ec560c2c854c38b0ca630611d0c38413"}, "downloads": -1, "filename": "permifrost-0.0.1.tar.gz", "has_sig": false, "md5_digest": "ba76bf8b83610fc61dbeb39a79934327", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23178, "upload_time": "2020-03-03T17:00:29", "upload_time_iso_8601": "2020-03-03T17:00:29.329624Z", "url": "https://files.pythonhosted.org/packages/b8/5e/fba55020bb29a2b0d99d84dd21fa1f77cb8ca3cfd1cfc03514c191d1524d/permifrost-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "e167c5e9680ec426934cc7aa7e78908e", "sha256": "67fdec680b542cfd4a4c7123ab8c98a864a44c51bd030870fb529463a1a10ed9"}, "downloads": -1, "filename": "permifrost-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e167c5e9680ec426934cc7aa7e78908e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 23334, "upload_time": "2020-03-04T18:40:15", "upload_time_iso_8601": "2020-03-04T18:40:15.471334Z", "url": "https://files.pythonhosted.org/packages/4b/48/80c6372dc7215ed06116221d1a621a70a899a6fe8acad77d9cc2190661d2/permifrost-0.0.2.tar.gz", "yanked": false}], "0.1.0": [{"comment_text": "", "digests": {"md5": "fb96d3febfb51d4622d32686fca9d45e", "sha256": "55f7091e60e7235ca053b1ff52bc017a40810a7320bb4c1542912fa7ced7ed0a"}, "downloads": -1, "filename": "permifrost-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fb96d3febfb51d4622d32686fca9d45e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22026, "upload_time": "2020-03-06T15:21:50", "upload_time_iso_8601": "2020-03-06T15:21:50.704385Z", "url": "https://files.pythonhosted.org/packages/94/7d/c86ca7efe7643c423f9cab2bbe599e962bab1eb9b66b609c12c97db89af7/permifrost-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fb96d3febfb51d4622d32686fca9d45e", "sha256": "55f7091e60e7235ca053b1ff52bc017a40810a7320bb4c1542912fa7ced7ed0a"}, "downloads": -1, "filename": "permifrost-0.1.0.tar.gz", "has_sig": false, "md5_digest": "fb96d3febfb51d4622d32686fca9d45e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22026, "upload_time": "2020-03-06T15:21:50", "upload_time_iso_8601": "2020-03-06T15:21:50.704385Z", "url": "https://files.pythonhosted.org/packages/94/7d/c86ca7efe7643c423f9cab2bbe599e962bab1eb9b66b609c12c97db89af7/permifrost-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:56:15 2020"}