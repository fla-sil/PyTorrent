{"info": {"author": "S. Andrew Sheppard", "author_email": "andrew@wq.io", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Intended Audience :: Developers", "Intended Audience :: Science/Research", "License :: OSI Approved :: MIT License", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.4", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Scientific/Engineering :: GIS", "Topic :: Text Processing :: Markup :: XML", "Topic :: Utilities"], "description": "**IterTable** is a Pythonic API for iterating through tabular data formats, including CSV, XLS, XML, and JSON.\n\n```python\nfrom itertable import load_file\n\nfor row in load_file(\"example.xls\"):\n    print(row.date, row.name)\n```\n\n[![Latest PyPI Release](https://img.shields.io/pypi/v/itertable.svg)](https://pypi.org/project/itertable)\n[![Release Notes](https://img.shields.io/github/release/wq/itertable.svg)](https://github.com/wq/itertable/releases)\n[![License](https://img.shields.io/pypi/l/itertable.svg)](https://github.com/wq/itertable/blob/master/LICENSE)\n[![GitHub Stars](https://img.shields.io/github/stars/wq/itertable.svg)](https://github.com/wq/itertable/stargazers)\n[![GitHub Forks](https://img.shields.io/github/forks/wq/itertable.svg)](https://github.com/wq/itertable/network)\n[![GitHub Issues](https://img.shields.io/github/issues/wq/itertable.svg)](https://github.com/wq/itertable/issues)\n\n[![Travis Build Status](https://img.shields.io/travis/wq/itertable.svg)](https://travis-ci.org/wq/itertable)\n[![Python Support](https://img.shields.io/pypi/pyversions/itertable.svg)](https://pypi.python.org/pypi/itertable)\n\n> **Note:** Prior to version 2.0, IterTable was **wq.io**, a submodule of the [wq framework].  The package has been renamed to avoid confusion with the wq framework website (<https://wq.io>).\nSimilarly, IterTable's `*IO` classes have been renamed to `*Iter`, as the API is not intended to match that of Python's `StringIO` or other `io` classes.\n\n```diff\n- from wq.io import CsvFileIO\n- data = CsvFileIO(filename='data.csv')\n+ from itertable import CsvFileIter\n+ data = CsvFileIter(filename='data.csv')\n```\n\n## Getting Started\n\n```bash\n# Recommended: create virtual environment\n# python3 -m venv venv\n# . venv/bin/activate\n\npython3 -m pip install itertable\n\n# GIS support (Fiona & Shapely)\npython3 -m pip install itertable[gis]\n\n# Excel write support\npython3 -m pip install itertable[write]\n# (xls/xlsx read support is enabled by default)\n\n# Pandas integration\npython3 -m pip install itertable[pandas]\n```\n\n## Overview\n\nIterTable provides a general purpose API for loading, iterating over, and writing tabular datasets.  The goal is to avoid needing to remember the unique usage of e.g. [csv], [xlrd], or [xml.etree] every time one needs to work with external data.  Instead, IterTable abstracts these libraries into a consistent interface that works as an [iterable] of [namedtuples].  Whenever possible, the field names for a dataset are automatically determined from the source file, e.g. the column headers in an Excel spreadsheet.\n\n```python\nfrom itertable import ExcelFileIter\ndata = ExcelFileIter(filename='example.xls')\nfor row in data:\n    print(row.name, row.date)\n```\n\nIterTable provides a number of built-in classes like the above, including a `CsvFileIter`, `XmlFileIter`, and `JsonFileIter`.  There is also a convenience function, `load_file()`, that attempts to automatically determine which class to use for a given file.\n\n```python\nfrom itertable import load_file\ndata = load_file('example.csv')\nfor row in data:\n    print(row.name, row.date)\n```\n\nAll of the included `*FileIter` classes support both reading and writing to external files, though write support for Excel files requires `itertable[write]` (which installs `xlwt` and `xlswriter`).\n\n### Network Client\n\nIterTable also provides network-capable equivalents of each of the above classes, to facilitate loading data from third party webservices.\n\n```python\nfrom itertable import JsonNetIter\nclass WebServiceIter(JsonNetIter):\n    url = \"http://example.com/api\"\n\ndata = WebServiceIter(params={'type': 'all'})\nfor row in data:\n    print(row.timestamp, row.value)\n```\n\nThe powerful [requests] library is used internally to load data over HTTP.\n\n### Pandas Analysis\n\nWhen [Pandas] is installed (via `itertable[pandas]`), the `as_dataframe()` method on itertable classes can be used to create a [DataFrame], enabling more extensive analysis possibilities.\n\n```python\ninstance = WebServiceIter(params={'type': 'all'})\ndf = instance.as_dataframe()\nprint(df.value.mean())\n```\n\n### GIS Support\n\nWhen [Fiona] and [Shapely] are installed (via `itertable[gis]`), itertable can also open and create shapefiles and other OGR-compatible geographic data formats.\n\n```python\nfrom itertable import ShapeIter\ndata = ShapeIter(filename='sites.shp')\nfor id, site in data.items():\n    print(id, site.geometry.wkt)\n```\n\nMore information on IterTable's gis support is available [here][gis].\n\n### Command-Line Interface\n\nIterTable provides a simple CLI for rendering the content of a file or Iter class.  This can be useful for e.g. inspecting a file or for integrating a shell automation workflow.  The default output is CSV, but can be changed to JSON by setting `-f json`.\n\n```bash\npython3 -m itertable example.json         # JSON to CSV\npython3 -m itertable -f json example.csv  # CSV to JSON\npython3 -m itertable example.xlsx \"start_row=5\"\npython3 -m itertable http://example.com/example.csv\npython3 -m itertable itertable.CsvNetIter \"url=http://example.com/example.csv\"\n```\n\n### Extending IterTable\n\nIt is straightforward to [extend IterTable][custom] to support arbitrary formats.   Each provided class is composed of a [BaseIter][base] class and mixin classes ([loaders], [parsers], and [mappers]) that handle the various steps of the process.\n\n[wq framework]: https://wq.io/\n[csv]: https://docs.python.org/3/library/csv.html\n[xlrd]: http://www.python-excel.org/\n[xml.etree]: https://docs.python.org/3/library/xml.etree.elementtree.html\n[iterable]: https://docs.python.org/3/glossary.html#term-iterable\n[namedtuples]: https://docs.python.org/3/library/collections.html#collections.namedtuple\n[requests]: http://python-requests.org/\n[xlwt]: http://www.python-excel.org/\n[xlsxwriter]: https://xlsxwriter.readthedocs.org/\n[Pandas]: http://pandas.pydata.org/\n[DataFrame]: http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\n[Fiona]: https://github.com/Toblerity/Fiona\n[Shapely]: https://github.com/Toblerity/Shapely\n\n[custom]: https://github.com/wq/itertable/blob/master/docs/about.md\n[base]: https://github.com/wq/itertable/blob/master/docs/base.md\n[loaders]: https://github.com/wq/itertable/blob/master/docs/loaders.md\n[parsers]: https://github.com/wq/itertable/blob/master/docs/parsers.md\n[mappers]: https://github.com/wq/itertable/blob/master/docs/mappers.md\n[gis]: https://github.com/wq/itertable/blob/master/docs/gis.md\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/wq/itertable", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "itertable", "package_url": "https://pypi.org/project/itertable/", "platform": "", "project_url": "https://pypi.org/project/itertable/", "project_urls": {"Homepage": "https://github.com/wq/itertable"}, "release_url": "https://pypi.org/project/itertable/2.0.0/", "requires_dist": ["requests", "xlrd", "click", "Fiona ; extra == 'gis'", "geopandas ; extra == 'gis'", "pandas ; extra == 'pandas'", "xlwt ; extra == 'write'", "xlsxwriter ; extra == 'write'"], "requires_python": "", "summary": "Iterable API for tabular datasets including CSV, XLS, XML, & JSON.", "version": "2.0.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><strong>IterTable</strong> is a Pythonic API for iterating through tabular data formats, including CSV, XLS, XML, and JSON.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertable</span> <span class=\"kn\">import</span> <span class=\"n\">load_file</span>\n\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">load_file</span><span class=\"p\">(</span><span class=\"s2\">\"example.xls\"</span><span class=\"p\">):</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">)</span>\n</pre>\n<p><a href=\"https://pypi.org/project/itertable\" rel=\"nofollow\"><img alt=\"Latest PyPI Release\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1d152bdac8fccffdb5ba1023655f91e846f5c0a2/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f697465727461626c652e737667\"></a>\n<a href=\"https://github.com/wq/itertable/releases\" rel=\"nofollow\"><img alt=\"Release Notes\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/edc24580be4f5703d67f498046a720814262dca2/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f72656c656173652f77712f697465727461626c652e737667\"></a>\n<a href=\"https://github.com/wq/itertable/blob/master/LICENSE\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/90f57097768894aa8c39b5c58e1a7ff87fcde89d/68747470733a2f2f696d672e736869656c64732e696f2f707970692f6c2f697465727461626c652e737667\"></a>\n<a href=\"https://github.com/wq/itertable/stargazers\" rel=\"nofollow\"><img alt=\"GitHub Stars\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2502ef59da4a48ac4a45d558c91cfae6f2c85f89/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f73746172732f77712f697465727461626c652e737667\"></a>\n<a href=\"https://github.com/wq/itertable/network\" rel=\"nofollow\"><img alt=\"GitHub Forks\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3e455179812953ce4d69f960eee6e1dfdeeda783/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f666f726b732f77712f697465727461626c652e737667\"></a>\n<a href=\"https://github.com/wq/itertable/issues\" rel=\"nofollow\"><img alt=\"GitHub Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2e3f7c98061e27226aea20d37bf4d12348ed34bb/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f77712f697465727461626c652e737667\"></a></p>\n<p><a href=\"https://travis-ci.org/wq/itertable\" rel=\"nofollow\"><img alt=\"Travis Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4afbfd64d39fa082309a970fb8fc63cbc1ef62ee/68747470733a2f2f696d672e736869656c64732e696f2f7472617669732f77712f697465727461626c652e737667\"></a>\n<a href=\"https://pypi.python.org/pypi/itertable\" rel=\"nofollow\"><img alt=\"Python Support\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4c0433418ec30e865dca34cba28023cda21e2540/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f697465727461626c652e737667\"></a></p>\n<blockquote>\n<p><strong>Note:</strong> Prior to version 2.0, IterTable was <strong>wq.io</strong>, a submodule of the <a href=\"https://wq.io/\" rel=\"nofollow\">wq framework</a>.  The package has been renamed to avoid confusion with the wq framework website (<a href=\"https://wq.io\" rel=\"nofollow\">https://wq.io</a>).\nSimilarly, IterTable's <code>*IO</code> classes have been renamed to <code>*Iter</code>, as the API is not intended to match that of Python's <code>StringIO</code> or other <code>io</code> classes.</p>\n</blockquote>\n<pre><span class=\"gd\">- from wq.io import CsvFileIO</span>\n<span class=\"gd\">- data = CsvFileIO(filename='data.csv')</span>\n<span class=\"gi\">+ from itertable import CsvFileIter</span>\n<span class=\"gi\">+ data = CsvFileIter(filename='data.csv')</span>\n</pre>\n<h2>Getting Started</h2>\n<pre><span class=\"c1\"># Recommended: create virtual environment</span>\n<span class=\"c1\"># python3 -m venv venv</span>\n<span class=\"c1\"># . venv/bin/activate</span>\n\npython3 -m pip install itertable\n\n<span class=\"c1\"># GIS support (Fiona &amp; Shapely)</span>\npython3 -m pip install itertable<span class=\"o\">[</span>gis<span class=\"o\">]</span>\n\n<span class=\"c1\"># Excel write support</span>\npython3 -m pip install itertable<span class=\"o\">[</span>write<span class=\"o\">]</span>\n<span class=\"c1\"># (xls/xlsx read support is enabled by default)</span>\n\n<span class=\"c1\"># Pandas integration</span>\npython3 -m pip install itertable<span class=\"o\">[</span>pandas<span class=\"o\">]</span>\n</pre>\n<h2>Overview</h2>\n<p>IterTable provides a general purpose API for loading, iterating over, and writing tabular datasets.  The goal is to avoid needing to remember the unique usage of e.g. <a href=\"https://docs.python.org/3/library/csv.html\" rel=\"nofollow\">csv</a>, <a href=\"http://www.python-excel.org/\" rel=\"nofollow\">xlrd</a>, or <a href=\"https://docs.python.org/3/library/xml.etree.elementtree.html\" rel=\"nofollow\">xml.etree</a> every time one needs to work with external data.  Instead, IterTable abstracts these libraries into a consistent interface that works as an <a href=\"https://docs.python.org/3/glossary.html#term-iterable\" rel=\"nofollow\">iterable</a> of <a href=\"https://docs.python.org/3/library/collections.html#collections.namedtuple\" rel=\"nofollow\">namedtuples</a>.  Whenever possible, the field names for a dataset are automatically determined from the source file, e.g. the column headers in an Excel spreadsheet.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertable</span> <span class=\"kn\">import</span> <span class=\"n\">ExcelFileIter</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ExcelFileIter</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'example.xls'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span>\n</pre>\n<p>IterTable provides a number of built-in classes like the above, including a <code>CsvFileIter</code>, <code>XmlFileIter</code>, and <code>JsonFileIter</code>.  There is also a convenience function, <code>load_file()</code>, that attempts to automatically determine which class to use for a given file.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertable</span> <span class=\"kn\">import</span> <span class=\"n\">load_file</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_file</span><span class=\"p\">(</span><span class=\"s1\">'example.csv'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">date</span><span class=\"p\">)</span>\n</pre>\n<p>All of the included <code>*FileIter</code> classes support both reading and writing to external files, though write support for Excel files requires <code>itertable[write]</code> (which installs <code>xlwt</code> and <code>xlswriter</code>).</p>\n<h3>Network Client</h3>\n<p>IterTable also provides network-capable equivalents of each of the above classes, to facilitate loading data from third party webservices.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertable</span> <span class=\"kn\">import</span> <span class=\"n\">JsonNetIter</span>\n<span class=\"k\">class</span> <span class=\"nc\">WebServiceIter</span><span class=\"p\">(</span><span class=\"n\">JsonNetIter</span><span class=\"p\">):</span>\n    <span class=\"n\">url</span> <span class=\"o\">=</span> <span class=\"s2\">\"http://example.com/api\"</span>\n\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">WebServiceIter</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'all'</span><span class=\"p\">})</span>\n<span class=\"k\">for</span> <span class=\"n\">row</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"p\">:</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">timestamp</span><span class=\"p\">,</span> <span class=\"n\">row</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"p\">)</span>\n</pre>\n<p>The powerful <a href=\"http://python-requests.org/\" rel=\"nofollow\">requests</a> library is used internally to load data over HTTP.</p>\n<h3>Pandas Analysis</h3>\n<p>When <a href=\"http://pandas.pydata.org/\" rel=\"nofollow\">Pandas</a> is installed (via <code>itertable[pandas]</code>), the <code>as_dataframe()</code> method on itertable classes can be used to create a <a href=\"http://pandas.pydata.org/pandas-docs/stable/generated/pandas.DataFrame.html\" rel=\"nofollow\">DataFrame</a>, enabling more extensive analysis possibilities.</p>\n<pre><span class=\"n\">instance</span> <span class=\"o\">=</span> <span class=\"n\">WebServiceIter</span><span class=\"p\">(</span><span class=\"n\">params</span><span class=\"o\">=</span><span class=\"p\">{</span><span class=\"s1\">'type'</span><span class=\"p\">:</span> <span class=\"s1\">'all'</span><span class=\"p\">})</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">instance</span><span class=\"o\">.</span><span class=\"n\">as_dataframe</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">value</span><span class=\"o\">.</span><span class=\"n\">mean</span><span class=\"p\">())</span>\n</pre>\n<h3>GIS Support</h3>\n<p>When <a href=\"https://github.com/Toblerity/Fiona\" rel=\"nofollow\">Fiona</a> and <a href=\"https://github.com/Toblerity/Shapely\" rel=\"nofollow\">Shapely</a> are installed (via <code>itertable[gis]</code>), itertable can also open and create shapefiles and other OGR-compatible geographic data formats.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">itertable</span> <span class=\"kn\">import</span> <span class=\"n\">ShapeIter</span>\n<span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">ShapeIter</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">=</span><span class=\"s1\">'sites.shp'</span><span class=\"p\">)</span>\n<span class=\"k\">for</span> <span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">site</span> <span class=\"ow\">in</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">items</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"nb\">id</span><span class=\"p\">,</span> <span class=\"n\">site</span><span class=\"o\">.</span><span class=\"n\">geometry</span><span class=\"o\">.</span><span class=\"n\">wkt</span><span class=\"p\">)</span>\n</pre>\n<p>More information on IterTable's gis support is available <a href=\"https://github.com/wq/itertable/blob/master/docs/gis.md\" rel=\"nofollow\">here</a>.</p>\n<h3>Command-Line Interface</h3>\n<p>IterTable provides a simple CLI for rendering the content of a file or Iter class.  This can be useful for e.g. inspecting a file or for integrating a shell automation workflow.  The default output is CSV, but can be changed to JSON by setting <code>-f json</code>.</p>\n<pre>python3 -m itertable example.json         <span class=\"c1\"># JSON to CSV</span>\npython3 -m itertable -f json example.csv  <span class=\"c1\"># CSV to JSON</span>\npython3 -m itertable example.xlsx <span class=\"s2\">\"start_row=5\"</span>\npython3 -m itertable http://example.com/example.csv\npython3 -m itertable itertable.CsvNetIter <span class=\"s2\">\"url=http://example.com/example.csv\"</span>\n</pre>\n<h3>Extending IterTable</h3>\n<p>It is straightforward to <a href=\"https://github.com/wq/itertable/blob/master/docs/about.md\" rel=\"nofollow\">extend IterTable</a> to support arbitrary formats.   Each provided class is composed of a <a href=\"https://github.com/wq/itertable/blob/master/docs/base.md\" rel=\"nofollow\">BaseIter</a> class and mixin classes (<a href=\"https://github.com/wq/itertable/blob/master/docs/loaders.md\" rel=\"nofollow\">loaders</a>, <a href=\"https://github.com/wq/itertable/blob/master/docs/parsers.md\" rel=\"nofollow\">parsers</a>, and <a href=\"https://github.com/wq/itertable/blob/master/docs/mappers.md\" rel=\"nofollow\">mappers</a>) that handle the various steps of the process.</p>\n\n          </div>"}, "last_serial": 6251317, "releases": {"2.0.0": [{"comment_text": "", "digests": {"md5": "801d382d8d25a328c58bf689cb179ee7", "sha256": "b26fde7c4ad9482f75594e73a3a57feb1560122736572290dc4b8fab50fe248c"}, "downloads": -1, "filename": "itertable-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "801d382d8d25a328c58bf689cb179ee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21148, "upload_time": "2019-12-06T01:50:32", "upload_time_iso_8601": "2019-12-06T01:50:32.294716Z", "url": "https://files.pythonhosted.org/packages/8c/69/36f75760e71b6f094e5713e3f803a467d026e0aa411ed8e5d5bfa179faf6/itertable-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a7c8b98540538084fc47142ac954fd", "sha256": "3835bd8e90161505a430adf37f98c70db98287d05f4d1d87ae9f8936dc309224"}, "downloads": -1, "filename": "itertable-2.0.0.tar.gz", "has_sig": false, "md5_digest": "41a7c8b98540538084fc47142ac954fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46389, "upload_time": "2019-12-06T01:50:34", "upload_time_iso_8601": "2019-12-06T01:50:34.090352Z", "url": "https://files.pythonhosted.org/packages/23/47/8b90d0a295aaffa97d0ae557f4406eeeb62fcc19ef9bad2766a66f60b235/itertable-2.0.0.tar.gz", "yanked": false}], "2.0.0b1": [{"comment_text": "", "digests": {"md5": "7b6988634aea101634e5c620b9a92118", "sha256": "58b0e2ada09bd6cdc12fa836014c953187911bc7b50ecb4d5bac4de0da41430f"}, "downloads": -1, "filename": "itertable-2.0.0b1-py3-none-any.whl", "has_sig": false, "md5_digest": "7b6988634aea101634e5c620b9a92118", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 20932, "upload_time": "2019-09-25T01:13:38", "upload_time_iso_8601": "2019-09-25T01:13:38.957298Z", "url": "https://files.pythonhosted.org/packages/0d/5d/f8d6ad58ddcb4552efcb6f05370a80731fbeb034ff8fc317e3faf1ea2515/itertable-2.0.0b1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "8435728ac6692385f742158183a06197", "sha256": "816de3af715758a40fdb33a043644eebe00002627b6a22fdff7067d8cf03520c"}, "downloads": -1, "filename": "itertable-2.0.0b1.tar.gz", "has_sig": false, "md5_digest": "8435728ac6692385f742158183a06197", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 45988, "upload_time": "2019-09-25T01:13:44", "upload_time_iso_8601": "2019-09-25T01:13:44.242784Z", "url": "https://files.pythonhosted.org/packages/d9/7a/0878239f7b29231cf40578cd9af018d108ca27b9ddce424f20585f5ed76d/itertable-2.0.0b1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "801d382d8d25a328c58bf689cb179ee7", "sha256": "b26fde7c4ad9482f75594e73a3a57feb1560122736572290dc4b8fab50fe248c"}, "downloads": -1, "filename": "itertable-2.0.0-py3-none-any.whl", "has_sig": false, "md5_digest": "801d382d8d25a328c58bf689cb179ee7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 21148, "upload_time": "2019-12-06T01:50:32", "upload_time_iso_8601": "2019-12-06T01:50:32.294716Z", "url": "https://files.pythonhosted.org/packages/8c/69/36f75760e71b6f094e5713e3f803a467d026e0aa411ed8e5d5bfa179faf6/itertable-2.0.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "41a7c8b98540538084fc47142ac954fd", "sha256": "3835bd8e90161505a430adf37f98c70db98287d05f4d1d87ae9f8936dc309224"}, "downloads": -1, "filename": "itertable-2.0.0.tar.gz", "has_sig": false, "md5_digest": "41a7c8b98540538084fc47142ac954fd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 46389, "upload_time": "2019-12-06T01:50:34", "upload_time_iso_8601": "2019-12-06T01:50:34.090352Z", "url": "https://files.pythonhosted.org/packages/23/47/8b90d0a295aaffa97d0ae557f4406eeeb62fcc19ef9bad2766a66f60b235/itertable-2.0.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:46 2020"}