{"info": {"author": "Villhellm", "author_email": "will@villhellm.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Operating System :: OS Independent", "Programming Language :: Python"], "description": "python-roku\n===========\n\nScrew remotes. Control your `Roku <http://www.roku.com>`_ via Python.\n\n.. image:: https://travis-ci.org/jcarbaugh/python-roku.svg?branch=master\n    :target: https://travis-ci.org/jcarbaugh/python-roku\n\n\nInstallation\n------------\n\n::\n\n    pip install py-roku\n\n\nUsage\n-----\n\n\nThe Basics\n~~~~~~~~~~\n\nTo start, import the Roku object and create it with the IP of your Roku.\n::\n\n    >>> from roku import Roku\n    >>> roku = Roku('192.168.10.163')\n\nThe Roku object has a method for each of the buttons on the remote.\n::\n\n    >>> roku.home()\n    >>> roku.right()\n    >>> roku.select()\n\nTo see a full list of available commands, use the *commands* property.\n::\n\n    >>> roku.commands\n    ['back', 'backspace', 'down', 'enter', 'forward', 'home', 'info', 'left', 'literal', 'play', 'replay', 'reverse', 'right', 'search', 'select', 'up']\n\nIf you are following along on your home network and are connected to your Roku, you should see it doing stuff. *Cool!*\n\n\nApps\n~~~~\n\nThe *apps* property will return a list of the applications on your device.\n::\n\n    >>> roku.apps\n    [<Application: [2285] Hulu Plus v2.7.6>, <Application: [13] Amazon Instant Video v5.1.3>, <Application: [20445] VEVO v2.0.12092013>]\n\nApps have *id*, *name*, and *version* properties.\n::\n\n    >>> app = roku.apps[0]\n    >>> print app.id, app.name, app.version\n    2285 Hulu Plus 2.7.6\n\nYou can get an individual app from the Roku object by either its *name* or *id*.\n::\n\n    >>> roku['Hulu Plus']\n    <Application: [2285] Hulu Plus v2.7.6>\n    >>> roku[2285]\n    <Application: [2285] Hulu Plus v2.7.6>\n\nSeeing the reference to this Hulu Plus app makes me really want to watch the latest episode of `Nashville <http://abc.go.com/shows/nashville>`_. Let's launch it!\n::\n\n    >>> hulu = roku['Hulu Plus']\n    >>> hulu.launch()\n\nAgain, if you are following along at home, you should see that your Roku has launched the Hulu Plus app. Want to see the app's entry in the Channel Store?\n::\n\n    >>> hulu.store()\n\nYou can also get the app's icon.\n::\n\n    >>> with open('hulu.png', 'w') as f:\n    ...     f.write(hulu.icon)\n\nYou can get the current running app.\n::\n\n    >>> roku.active_app\n    <Application: [12] Netflix v4.2.75015046>\n\n\nEntering Text\n~~~~~~~~~~~~~\n\nOkay, I've already seen all of the available episodes of Nashville, so I'm going to search for *Stargate*. With the search open and waiting for text entry::\n\n    >>> roku.literal('stargate')\n\nWhat if I now want to watch *The Informant!*? Again, with the search open and waiting for text entry::\n\n    >>> roku.literal('The Informant!')\n\nThis will iterate over each character, sending it individually to the Roku.\n\n\nAdvanced Stuff\n--------------\n\n\nDiscovery\n~~~~~~~~~\n\nRoku devices can be discovered using `SSDP <http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol>`_. A class method is available on the Roku object that will return Roku object instances for each device found on the same network.\n::\n\n    >>> Roku.discover()\n    [<Roku: 192.168.10.163:8060>]\n\nIt may take a few seconds for a device to be found. You can call discover again or change the *timeout* or *retries* parameters on the discover method. This will take longer, but will find more devices.\n::\n\n    >>> Roku.discover(timeout=10)\n    [<Roku: 192.168.10.163:8060>, <Roku: 192.168.10.204:8060>]\n\nThanks to `Dan Krause <https://github.com/dankrause>`_ for his `SSDP code <https://gist.github.com/dankrause/6000248>`_.\n\n\nSensors\n~~~~~~~\n\nNewer Roku remotes have extra sensors built into them that measure acceleration, orientation, and other things.You can mimic these sensors using the provided helper methods.\n::\n\n    >>> roku.orientation(1, 1, 1)\n\nThe parameters to all of the sensor methods are x, y, and z values. Available methods include:\n\n* acceleration - in each dimension relative to free fall measured in meters/sec^2\n* magnetic - magnetic field strength in microtesla\n* orientation - angular displacement from flat/level and north in radians\n* rotation - angular rotation rate about each axis using the right hand rule in radians/sec\n\n\nTouch\n~~~~~\n\nSome Roku input devices support touch. The parameters to the *touch* method are the *x* and *y* coordinates of the touch.\n::\n\n    >>> roku.touch(10, 40)\n\nYou can change the event triggered by passing an optional *op* parameter.\n::\n\n    >>> roku.touch(10, 40, op='up')\n\nSupported events are:\n\n* down\n* up\n* press (down and up)\n* move\n* cancel\n\nMultitouch is not yet supported in this package.\n\n\nGeneric Input\n~~~~~~~~~~~~~\n\nBoth the sensor and touch methods rely on the generic *input* method for sending data to a running application. If you refuse to use covenience methods because they make people lazy and weak, you can call the sensor and touch methods directly.\n::\n\n    >>> params = {'touch.0.x': 10, 'touch.0.y': 20, 'touch.0.op': 'press'}\n    >>> roku.input(params)\n\nMore information about input, touch, and sensors is available in the `Roku External Control docs <http://sdkdocs.roku.com/display/sdkdoc/External+Control+Guide#ExternalControlGuide-31ExternalControlInputCommandConventions>`_.\n\n\nTODO\n----\n\n* Tests, of course.\n* Multitouch support.\n* A Flask proxy server that can listen to requests and forward them to devices on the local network. Control multiple devices at once, eh?\n* A server that mimics the Roku interface so you can make your own Roku-like stuff.\n* A task runner that will take a set of commands and run them with delays that are appropriate for most devices.", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/villhellm/python-roku", "keywords": "", "license": "BSD License", "maintainer": "", "maintainer_email": "", "name": "py-roku", "package_url": "https://pypi.org/project/py-roku/", "platform": "any", "project_url": "https://pypi.org/project/py-roku/", "project_urls": {"Homepage": "https://github.com/villhellm/python-roku"}, "release_url": "https://pypi.org/project/py-roku/1.1/", "requires_dist": null, "requires_python": "", "summary": "Client for the Roku media player", "version": "1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Screw remotes. Control your <a href=\"http://www.roku.com\" rel=\"nofollow\">Roku</a> via Python.</p>\n<a href=\"https://travis-ci.org/jcarbaugh/python-roku\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/jcarbaugh/python-roku.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/6c2851a1f2aa075eb83bf3c434d5768ff2ca24d2/68747470733a2f2f7472617669732d63692e6f72672f6a63617262617567682f707974686f6e2d726f6b752e7376673f6272616e63683d6d6173746572\"></a>\n<div id=\"installation\">\n<h2>Installation</h2>\n<pre>pip install py-roku\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"the-basics\">\n<h3>The Basics</h3>\n<p>To start, import the Roku object and create it with the IP of your Roku.</p>\n<pre>&gt;&gt;&gt; from roku import Roku\n&gt;&gt;&gt; roku = Roku('192.168.10.163')\n</pre>\n<p>The Roku object has a method for each of the buttons on the remote.</p>\n<pre>&gt;&gt;&gt; roku.home()\n&gt;&gt;&gt; roku.right()\n&gt;&gt;&gt; roku.select()\n</pre>\n<p>To see a full list of available commands, use the <em>commands</em> property.</p>\n<pre>&gt;&gt;&gt; roku.commands\n['back', 'backspace', 'down', 'enter', 'forward', 'home', 'info', 'left', 'literal', 'play', 'replay', 'reverse', 'right', 'search', 'select', 'up']\n</pre>\n<p>If you are following along on your home network and are connected to your Roku, you should see it doing stuff. <em>Cool!</em></p>\n</div>\n<div id=\"apps\">\n<h3>Apps</h3>\n<p>The <em>apps</em> property will return a list of the applications on your device.</p>\n<pre>&gt;&gt;&gt; roku.apps\n[&lt;Application: [2285] Hulu Plus v2.7.6&gt;, &lt;Application: [13] Amazon Instant Video v5.1.3&gt;, &lt;Application: [20445] VEVO v2.0.12092013&gt;]\n</pre>\n<p>Apps have <em>id</em>, <em>name</em>, and <em>version</em> properties.</p>\n<pre>&gt;&gt;&gt; app = roku.apps[0]\n&gt;&gt;&gt; print app.id, app.name, app.version\n2285 Hulu Plus 2.7.6\n</pre>\n<p>You can get an individual app from the Roku object by either its <em>name</em> or <em>id</em>.</p>\n<pre>&gt;&gt;&gt; roku['Hulu Plus']\n&lt;Application: [2285] Hulu Plus v2.7.6&gt;\n&gt;&gt;&gt; roku[2285]\n&lt;Application: [2285] Hulu Plus v2.7.6&gt;\n</pre>\n<p>Seeing the reference to this Hulu Plus app makes me really want to watch the latest episode of <a href=\"http://abc.go.com/shows/nashville\" rel=\"nofollow\">Nashville</a>. Let\u2019s launch it!</p>\n<pre>&gt;&gt;&gt; hulu = roku['Hulu Plus']\n&gt;&gt;&gt; hulu.launch()\n</pre>\n<p>Again, if you are following along at home, you should see that your Roku has launched the Hulu Plus app. Want to see the app\u2019s entry in the Channel Store?</p>\n<pre>&gt;&gt;&gt; hulu.store()\n</pre>\n<p>You can also get the app\u2019s icon.</p>\n<pre>&gt;&gt;&gt; with open('hulu.png', 'w') as f:\n...     f.write(hulu.icon)\n</pre>\n<p>You can get the current running app.</p>\n<pre>&gt;&gt;&gt; roku.active_app\n&lt;Application: [12] Netflix v4.2.75015046&gt;\n</pre>\n</div>\n<div id=\"entering-text\">\n<h3>Entering Text</h3>\n<p>Okay, I\u2019ve already seen all of the available episodes of Nashville, so I\u2019m going to search for <em>Stargate</em>. With the search open and waiting for text entry:</p>\n<pre>&gt;&gt;&gt; roku.literal('stargate')\n</pre>\n<p>What if I now want to watch <em>The Informant!</em>? Again, with the search open and waiting for text entry:</p>\n<pre>&gt;&gt;&gt; roku.literal('The Informant!')\n</pre>\n<p>This will iterate over each character, sending it individually to the Roku.</p>\n</div>\n</div>\n<div id=\"advanced-stuff\">\n<h2>Advanced Stuff</h2>\n<div id=\"discovery\">\n<h3>Discovery</h3>\n<p>Roku devices can be discovered using <a href=\"http://en.wikipedia.org/wiki/Simple_Service_Discovery_Protocol\" rel=\"nofollow\">SSDP</a>. A class method is available on the Roku object that will return Roku object instances for each device found on the same network.</p>\n<pre>&gt;&gt;&gt; Roku.discover()\n[&lt;Roku: 192.168.10.163:8060&gt;]\n</pre>\n<p>It may take a few seconds for a device to be found. You can call discover again or change the <em>timeout</em> or <em>retries</em> parameters on the discover method. This will take longer, but will find more devices.</p>\n<pre>&gt;&gt;&gt; Roku.discover(timeout=10)\n[&lt;Roku: 192.168.10.163:8060&gt;, &lt;Roku: 192.168.10.204:8060&gt;]\n</pre>\n<p>Thanks to <a href=\"https://github.com/dankrause\" rel=\"nofollow\">Dan Krause</a> for his <a href=\"https://gist.github.com/dankrause/6000248\" rel=\"nofollow\">SSDP code</a>.</p>\n</div>\n<div id=\"sensors\">\n<h3>Sensors</h3>\n<p>Newer Roku remotes have extra sensors built into them that measure acceleration, orientation, and other things.You can mimic these sensors using the provided helper methods.</p>\n<pre>&gt;&gt;&gt; roku.orientation(1, 1, 1)\n</pre>\n<p>The parameters to all of the sensor methods are x, y, and z values. Available methods include:</p>\n<ul>\n<li>acceleration - in each dimension relative to free fall measured in meters/sec^2</li>\n<li>magnetic - magnetic field strength in microtesla</li>\n<li>orientation - angular displacement from flat/level and north in radians</li>\n<li>rotation - angular rotation rate about each axis using the right hand rule in radians/sec</li>\n</ul>\n</div>\n<div id=\"touch\">\n<h3>Touch</h3>\n<p>Some Roku input devices support touch. The parameters to the <em>touch</em> method are the <em>x</em> and <em>y</em> coordinates of the touch.</p>\n<pre>&gt;&gt;&gt; roku.touch(10, 40)\n</pre>\n<p>You can change the event triggered by passing an optional <em>op</em> parameter.</p>\n<pre>&gt;&gt;&gt; roku.touch(10, 40, op='up')\n</pre>\n<p>Supported events are:</p>\n<ul>\n<li>down</li>\n<li>up</li>\n<li>press (down and up)</li>\n<li>move</li>\n<li>cancel</li>\n</ul>\n<p>Multitouch is not yet supported in this package.</p>\n</div>\n<div id=\"generic-input\">\n<h3>Generic Input</h3>\n<p>Both the sensor and touch methods rely on the generic <em>input</em> method for sending data to a running application. If you refuse to use covenience methods because they make people lazy and weak, you can call the sensor and touch methods directly.</p>\n<pre>&gt;&gt;&gt; params = {'touch.0.x': 10, 'touch.0.y': 20, 'touch.0.op': 'press'}\n&gt;&gt;&gt; roku.input(params)\n</pre>\n<p>More information about input, touch, and sensors is available in the <a href=\"http://sdkdocs.roku.com/display/sdkdoc/External+Control+Guide#ExternalControlGuide-31ExternalControlInputCommandConventions\" rel=\"nofollow\">Roku External Control docs</a>.</p>\n</div>\n</div>\n<div id=\"todo\">\n<h2>TODO</h2>\n<ul>\n<li>Tests, of course.</li>\n<li>Multitouch support.</li>\n<li>A Flask proxy server that can listen to requests and forward them to devices on the local network. Control multiple devices at once, eh?</li>\n<li>A server that mimics the Roku interface so you can make your own Roku-like stuff.</li>\n<li>A task runner that will take a set of commands and run them with delays that are appropriate for most devices.</li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 5459944, "releases": {"1.1": [{"comment_text": "", "digests": {"md5": "3d4a54bb3cf5ff186b0e8f16992ad41e", "sha256": "baaa0f5a0cad4638f2993de050d8fc4f7531e4631479a38725526130f524a708"}, "downloads": -1, "filename": "py-roku-1.1.tar.gz", "has_sig": false, "md5_digest": "3d4a54bb3cf5ff186b0e8f16992ad41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12274, "upload_time": "2019-06-28T04:20:10", "upload_time_iso_8601": "2019-06-28T04:20:10.087972Z", "url": "https://files.pythonhosted.org/packages/ca/ab/39d4122974879af266fdd658893f5a1e6d200f2f6c0dde48a570563e4947/py-roku-1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "3d4a54bb3cf5ff186b0e8f16992ad41e", "sha256": "baaa0f5a0cad4638f2993de050d8fc4f7531e4631479a38725526130f524a708"}, "downloads": -1, "filename": "py-roku-1.1.tar.gz", "has_sig": false, "md5_digest": "3d4a54bb3cf5ff186b0e8f16992ad41e", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 12274, "upload_time": "2019-06-28T04:20:10", "upload_time_iso_8601": "2019-06-28T04:20:10.087972Z", "url": "https://files.pythonhosted.org/packages/ca/ab/39d4122974879af266fdd658893f5a1e6d200f2f6c0dde48a570563e4947/py-roku-1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:57:41 2020"}