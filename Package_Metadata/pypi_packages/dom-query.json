{"info": {"author": "Giampaolo Eusebi", "author_email": "giampaolo.eusebi@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Intended Audience :: Developers", "License :: OSI Approved", "License :: OSI Approved :: GNU Lesser General Public License v3 (LGPLv3)", "Operating System :: OS Independent", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Topic :: Internet :: WWW/HTTP", "Topic :: Text Processing :: Markup", "Topic :: Text Processing :: Markup :: HTML"], "description": "DOM query\n===========\n\nCSS selector syntax for python minidom and DOM implementations.\n\nShort example\n-------------\n\nProvided an HTML file *sample.html* the following code will query\nsome elements and return them as *minidom* *Elements*.\nIn case of multiple elements (*select_all*) a simple python *list*\nis returned (instead of a minidom *NodeList*).\n\n.. code-block:: python\n\n    from xml.dom.minidom import parse\n    from dom_query import select, select_all\n\n    tree = parse(\"test/html/sample.html\")\n\n    # Title element\n    title = select(tree, \"title\")\n\n    # Every P element\n    paragraphs = select_all(tree, \"p\")\n\n    # Element with type P and ID equal to \"summary\"\n    summary = select(tree, \"p#summary\")\n\n    # Every element with class \"wide\"\n    wide_elements = select_all(tree, \".wide\")\n\nSupported CSS syntax\n--------------------\n\nOnly a subset of CSS syntax is supported:\n\n- Compound selectors (comma separator),\n- element type and id,\n- classes presence,\n- attributes match (presence and all the other operators),\n- combinators (descendant, sibling, subsequent, child).\n\nSome supported selectors:\n\n.. code-block:: css\n\n    p#abstract[lang|=en]\n    p[data-user=\"john\"]\n    div > p + p, article > p + p\n    script[type=\"text/data\"]\n    header > li ul, footer > li ul\n    section h1 ~ p, article h2 ~ p\n\nInternals and implementation\n----------------------------\n\nEvery query is compiled and cached for subsequent use.\n\nLexer\n^^^^^\n\nThe first stage is tokenization (*lexer.py lexer*) which is loosely\nbased on the\n`W3C selector lexer <https://www.w3.org/TR/selectors-3/#lex>`_.\nThe differences are mainly to make the tokenizer compatible with\nregular expressions and to strip every unnecessary features.\n\nParser\n^^^^^^\n\nThen follows the parsing stage (*parser.py parse*) which produce a\nsimple AST from the tokens. The parser is, just like the tokenizer, a\nsimplified version of the standard one. It is a single function which\nimplements a descent parser. The AST is a tuple of tuples and maps in\na relatively close way the given query.\n\nCompiler\n^^^^^^^^\n\nThe last stage is the compiler (*compiler.py compile*). It translates\nthe AST into a sequence of simple actions to be performed in order to\nselect the matching elements.\nOnce compiled it is saved in cache and will be reused whenever the same\nquery is seen again.\n\nVirtual machine\n^^^^^^^^^^^^^^^\n\nThe opcodes are executed by (*vm.py execute*). This function takes a\nstarting element, a sequence of opcodes, and an *api*.\nThe api is dict-like object. Every key corresponds to a function which\nimplements an opcode. The default api is *minidom_api.py api*.\n\nDOM API\n^^^^^^^\n\nEvery function in the api is either a filter (actual filtering of nodes)\nor a generator (combinators expansion). The only two opcodes which don't\nfollows this rule are *YIELD* (return elements found so far) and *RESET*\n(reload the original element node after a CSS comma).\n\nIn case of other *dom* implementations it *should* be sufficient to\nwrite a new api and pass it to *execute* (or *select\\**) upon querying.\n\nCode quality and stability\n--------------------------\n\nThe code is far from complete.\nIt is tested but there are minor issues (attribute match doesn't follow\nthe specs verbatim).\n\nFeel free to contribute.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://gitlab.com/geusebi/dom_query", "keywords": "", "license": "GNU LGPL 3.0", "maintainer": "", "maintainer_email": "", "name": "dom-query", "package_url": "https://pypi.org/project/dom-query/", "platform": "", "project_url": "https://pypi.org/project/dom-query/", "project_urls": {"Homepage": "https://gitlab.com/geusebi/dom_query"}, "release_url": "https://pypi.org/project/dom-query/0.0.4/", "requires_dist": null, "requires_python": ">=3.6", "summary": "CSS selector syntax for python minidom and compatible DOM implementations", "version": "0.0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>CSS selector syntax for python minidom and DOM implementations.</p>\n<div id=\"short-example\">\n<h2>Short example</h2>\n<p>Provided an HTML file <em>sample.html</em> the following code will query\nsome elements and return them as <em>minidom</em> <em>Elements</em>.\nIn case of multiple elements (<em>select_all</em>) a simple python <em>list</em>\nis returned (instead of a minidom <em>NodeList</em>).</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">xml.dom.minidom</span> <span class=\"kn\">import</span> <span class=\"n\">parse</span>\n<span class=\"kn\">from</span> <span class=\"nn\">dom_query</span> <span class=\"kn\">import</span> <span class=\"n\">select</span><span class=\"p\">,</span> <span class=\"n\">select_all</span>\n\n<span class=\"n\">tree</span> <span class=\"o\">=</span> <span class=\"n\">parse</span><span class=\"p\">(</span><span class=\"s2\">\"test/html/sample.html\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Title element</span>\n<span class=\"n\">title</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"s2\">\"title\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Every P element</span>\n<span class=\"n\">paragraphs</span> <span class=\"o\">=</span> <span class=\"n\">select_all</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"s2\">\"p\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Element with type P and ID equal to \"summary\"</span>\n<span class=\"n\">summary</span> <span class=\"o\">=</span> <span class=\"n\">select</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"s2\">\"p#summary\"</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Every element with class \"wide\"</span>\n<span class=\"n\">wide_elements</span> <span class=\"o\">=</span> <span class=\"n\">select_all</span><span class=\"p\">(</span><span class=\"n\">tree</span><span class=\"p\">,</span> <span class=\"s2\">\".wide\"</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"supported-css-syntax\">\n<h2>Supported CSS syntax</h2>\n<p>Only a subset of CSS syntax is supported:</p>\n<ul>\n<li>Compound selectors (comma separator),</li>\n<li>element type and id,</li>\n<li>classes presence,</li>\n<li>attributes match (presence and all the other operators),</li>\n<li>combinators (descendant, sibling, subsequent, child).</li>\n</ul>\n<p>Some supported selectors:</p>\n<pre><span class=\"nt\">p</span><span class=\"p\">#</span><span class=\"nn\">abstract</span><span class=\"o\">[</span><span class=\"nt\">lang</span><span class=\"o\">|=</span><span class=\"nt\">en</span><span class=\"o\">]</span>\n<span class=\"nt\">p</span><span class=\"o\">[</span><span class=\"nt\">data-user</span><span class=\"o\">=</span><span class=\"s2\">\"john\"</span><span class=\"o\">]</span>\n<span class=\"nt\">div</span> <span class=\"o\">&gt;</span> <span class=\"nt\">p</span> <span class=\"o\">+</span> <span class=\"nt\">p</span><span class=\"o\">,</span> <span class=\"nt\">article</span> <span class=\"o\">&gt;</span> <span class=\"nt\">p</span> <span class=\"o\">+</span> <span class=\"nt\">p</span>\n<span class=\"nt\">script</span><span class=\"o\">[</span><span class=\"nt\">type</span><span class=\"o\">=</span><span class=\"s2\">\"text/data\"</span><span class=\"o\">]</span>\n<span class=\"nt\">header</span> <span class=\"o\">&gt;</span> <span class=\"nt\">li</span> <span class=\"nt\">ul</span><span class=\"o\">,</span> <span class=\"nt\">footer</span> <span class=\"o\">&gt;</span> <span class=\"nt\">li</span> <span class=\"nt\">ul</span>\n<span class=\"nt\">section</span> <span class=\"nt\">h1</span> <span class=\"o\">~</span> <span class=\"nt\">p</span><span class=\"o\">,</span> <span class=\"nt\">article</span> <span class=\"nt\">h2</span> <span class=\"o\">~</span> <span class=\"nt\">p</span>\n</pre>\n</div>\n<div id=\"internals-and-implementation\">\n<h2>Internals and implementation</h2>\n<p>Every query is compiled and cached for subsequent use.</p>\n<div id=\"lexer\">\n<h3>Lexer</h3>\n<p>The first stage is tokenization (<em>lexer.py lexer</em>) which is loosely\nbased on the\n<a href=\"https://www.w3.org/TR/selectors-3/#lex\" rel=\"nofollow\">W3C selector lexer</a>.\nThe differences are mainly to make the tokenizer compatible with\nregular expressions and to strip every unnecessary features.</p>\n</div>\n<div id=\"parser\">\n<h3>Parser</h3>\n<p>Then follows the parsing stage (<em>parser.py parse</em>) which produce a\nsimple AST from the tokens. The parser is, just like the tokenizer, a\nsimplified version of the standard one. It is a single function which\nimplements a descent parser. The AST is a tuple of tuples and maps in\na relatively close way the given query.</p>\n</div>\n<div id=\"compiler\">\n<h3>Compiler</h3>\n<p>The last stage is the compiler (<em>compiler.py compile</em>). It translates\nthe AST into a sequence of simple actions to be performed in order to\nselect the matching elements.\nOnce compiled it is saved in cache and will be reused whenever the same\nquery is seen again.</p>\n</div>\n<div id=\"virtual-machine\">\n<h3>Virtual machine</h3>\n<p>The opcodes are executed by (<em>vm.py execute</em>). This function takes a\nstarting element, a sequence of opcodes, and an <em>api</em>.\nThe api is dict-like object. Every key corresponds to a function which\nimplements an opcode. The default api is <em>minidom_api.py api</em>.</p>\n</div>\n<div id=\"dom-api\">\n<h3>DOM API</h3>\n<p>Every function in the api is either a filter (actual filtering of nodes)\nor a generator (combinators expansion). The only two opcodes which don\u2019t\nfollows this rule are <em>YIELD</em> (return elements found so far) and <em>RESET</em>\n(reload the original element node after a CSS comma).</p>\n<p>In case of other <em>dom</em> implementations it <em>should</em> be sufficient to\nwrite a new api and pass it to <em>execute</em> (or <em>select*</em>) upon querying.</p>\n</div>\n</div>\n<div id=\"code-quality-and-stability\">\n<h2>Code quality and stability</h2>\n<p>The code is far from complete.\nIt is tested but there are minor issues (attribute match doesn\u2019t follow\nthe specs verbatim).</p>\n<p>Feel free to contribute.</p>\n</div>\n\n          </div>"}, "last_serial": 6662673, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "31c83de5dfa1dfd8118372dd02eff2a7", "sha256": "f4b6d8d7ba24e1bb3959cd3b2b5a8cde39f27434257da6729444f5d85f0f7515"}, "downloads": -1, "filename": "dom_query-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "31c83de5dfa1dfd8118372dd02eff2a7", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12980, "upload_time": "2020-01-25T11:02:22", "upload_time_iso_8601": "2020-01-25T11:02:22.225632Z", "url": "https://files.pythonhosted.org/packages/ee/5b/9696cb827b4ca52d8b915c7a5af4988af66aaf6738c76f83a9c1d245130d/dom_query-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e7ccdabe79c0c440669f45ae817b928b", "sha256": "5da46d2ee8b186580c9b1b421a058123d6e6d568ffa6b551ec91d5d561579a7c"}, "downloads": -1, "filename": "dom_query-0.0.1.tar.gz", "has_sig": false, "md5_digest": "e7ccdabe79c0c440669f45ae817b928b", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10974, "upload_time": "2020-01-25T11:02:25", "upload_time_iso_8601": "2020-01-25T11:02:25.034388Z", "url": "https://files.pythonhosted.org/packages/c5/53/054b9e170ef8bfb7cc0e2bc22af02e000a9f6c30c4285594433a65091ca2/dom_query-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "6c71e9e5b77184c6b61bf61926f8394a", "sha256": "58a148d6615bd9a901e655bb700c56eefcddcd2ac3f154069a419771ab84d3fc"}, "downloads": -1, "filename": "dom_query-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "6c71e9e5b77184c6b61bf61926f8394a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.7", "size": 12981, "upload_time": "2020-01-25T11:05:54", "upload_time_iso_8601": "2020-01-25T11:05:54.992261Z", "url": "https://files.pythonhosted.org/packages/06/30/933a535852ad9f4b634f8604bc16d09c65c63f11c3dccadadf93127416f1/dom_query-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e802f8507eb8420704bd9d19b7a8f6a9", "sha256": "126d8826cbc653b5c0bed844d4eef8559933131184cf8c8d0c51b48c46865885"}, "downloads": -1, "filename": "dom_query-0.0.2.tar.gz", "has_sig": false, "md5_digest": "e802f8507eb8420704bd9d19b7a8f6a9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.7", "size": 10831, "upload_time": "2020-01-25T11:05:56", "upload_time_iso_8601": "2020-01-25T11:05:56.110366Z", "url": "https://files.pythonhosted.org/packages/82/35/96cf219382012f03459e05e6c3ccd0108da0535e30ae306dff6c91a3b790/dom_query-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "9262ee45f0d0bb4d0cabe3bfc82e7732", "sha256": "a154e5789ebc9314b8fdd54d7fdb744a18ab3e39af5b9eeacc118db785239b51"}, "downloads": -1, "filename": "dom_query-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "9262ee45f0d0bb4d0cabe3bfc82e7732", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12981, "upload_time": "2020-02-07T17:23:15", "upload_time_iso_8601": "2020-02-07T17:23:15.795305Z", "url": "https://files.pythonhosted.org/packages/a2/07/190dd7feedbb629975d9f122b696deae6ee49968b102518aa5d869fc668c/dom_query-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80be8f2346f3d9517bdea4b6305ad881", "sha256": "f0be9fb7ea07b2590754dc59518087bac15cf5a2f7eccec2414491f0b0e517ca"}, "downloads": -1, "filename": "dom_query-0.0.3.tar.gz", "has_sig": false, "md5_digest": "80be8f2346f3d9517bdea4b6305ad881", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10844, "upload_time": "2020-02-07T17:23:17", "upload_time_iso_8601": "2020-02-07T17:23:17.247330Z", "url": "https://files.pythonhosted.org/packages/c4/13/627d5187ef8ee70e0e9bc28c1bb1edd7aac8eda26472c2a254767b06ea17/dom_query-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "622b4d82bb8219f765bced0a07289f1c", "sha256": "561de867055c0b94b99067ce700c435f97842d9133a11a414c95ed28cada88ee"}, "downloads": -1, "filename": "dom_query-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "622b4d82bb8219f765bced0a07289f1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12989, "upload_time": "2020-02-19T18:46:08", "upload_time_iso_8601": "2020-02-19T18:46:08.112233Z", "url": "https://files.pythonhosted.org/packages/f1/49/256de5111bc0c0ac7bf0bde1e6ec157829a82649a1fa66ae1ac13b9bb18b/dom_query-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4a1ae5a6b7defdd5eb29b84ab0b8b0c", "sha256": "4c71c135be6b1ce50f67ee9fcb9a2ac8ec87e96354e10f2c7b9b716fd531c3c2"}, "downloads": -1, "filename": "dom_query-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b4a1ae5a6b7defdd5eb29b84ab0b8b0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10843, "upload_time": "2020-02-19T18:46:09", "upload_time_iso_8601": "2020-02-19T18:46:09.478915Z", "url": "https://files.pythonhosted.org/packages/d7/5d/1b55814987dc4ec3580c57e0833e2d929d80aef47f30570c0c6d68ac485c/dom_query-0.0.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "622b4d82bb8219f765bced0a07289f1c", "sha256": "561de867055c0b94b99067ce700c435f97842d9133a11a414c95ed28cada88ee"}, "downloads": -1, "filename": "dom_query-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "622b4d82bb8219f765bced0a07289f1c", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3.6", "size": 12989, "upload_time": "2020-02-19T18:46:08", "upload_time_iso_8601": "2020-02-19T18:46:08.112233Z", "url": "https://files.pythonhosted.org/packages/f1/49/256de5111bc0c0ac7bf0bde1e6ec157829a82649a1fa66ae1ac13b9bb18b/dom_query-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "b4a1ae5a6b7defdd5eb29b84ab0b8b0c", "sha256": "4c71c135be6b1ce50f67ee9fcb9a2ac8ec87e96354e10f2c7b9b716fd531c3c2"}, "downloads": -1, "filename": "dom_query-0.0.4.tar.gz", "has_sig": false, "md5_digest": "b4a1ae5a6b7defdd5eb29b84ab0b8b0c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.6", "size": 10843, "upload_time": "2020-02-19T18:46:09", "upload_time_iso_8601": "2020-02-19T18:46:09.478915Z", "url": "https://files.pythonhosted.org/packages/d7/5d/1b55814987dc4ec3580c57e0833e2d929d80aef47f30570c0c6d68ac485c/dom_query-0.0.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:50:24 2020"}