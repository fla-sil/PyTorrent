{"info": {"author": "Ibotta Inc.", "author_email": "machine_learning@ibotta.com", "bugtrack_url": null, "classifiers": ["Intended Audience :: Developers", "Programming Language :: Python", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering"], "description": "pure-predict: Machine learning prediction in pure Python\n========================================================\n\n|License| |Build Status| |PyPI Package| |Python Versions|\n\n``pure-predict`` speeds up and slims down machine learning prediction applications. It is \na foundational tool for serverless inference or small batch prediction with popular machine \nlearning frameworks like `scikit-learn <https://scikit-learn.org/stable/>`__ and `fasttext <https://fasttext.cc/>`__. \nIt implements the predict methods of these frameworks in pure Python.\n\nPrimary Use Cases\n-----------------\nThe primary use case for ``pure-predict`` is the following scenario: \n\n#. A model is trained in an environment without strong container footprint constraints. Perhaps a long running \"offline\" job on one or many machines where installing a number of python packages from PyPI is not at all problematic.\n#. At prediction time the model needs to be served behind an API. Typical access patterns are to request a prediction for one \"record\" (one \"row\" in a ``numpy`` array or one string of text to classify) per request or a mini-batch of records per request.\n#. Preferred infrastructure for the prediction service is either serverless (`AWS Lambda <https://aws.amazon.com/lambda/>`__) or a container service where the memory footprint of the container is constrained.\n#. The fitted model object's artifacts needed for prediction (coefficients, weights, vocabulary, decision tree artifacts, etc.) are relatively small (10s to 100s of MBs).\n\nIn this scenario, a container service with a large dependency footprint can be overkill for a microservice, particularly if the access patterns favor the pricing model of a serverless application. Additionally, for smaller models and single record predictions per request, the ``numpy`` and ``scipy`` functionality in the prediction methods of popular machine learning frameworks work against the application in terms of latency, `underperforming pure python <https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py>`__ in some cases.\n\nPackage Details\n---------------\n\nIt is a Python package for machine learning prediction distributed under \nthe `Apache 2.0 software license <https://github.com/Ibotta/sk-dist/blob/master/LICENSE>`__. \nIt contains multiple subpackages which mirror their open source \ncounterpart (``scikit-learn``, ``fasttext``, etc.). Each subpackage has utilities to \nconvert a fitted machine learning model into a custom object containing prediction methods \nthat mirror their native counterparts, but converted to pure python. Additionally, all \nrelevant model artifacts needed for prediction are converted to pure python. \n\nA ``pure-predict`` model object can then be pickled and later\nunpickled without any 3rd party dependencies other than ``pure-predict``.\n\nThis eliminates the need to have large dependency packages installed in order to \nmake predictions with fitted machine learning models using popular open source packages for\ntraining models. These dependencies (``numpy``, ``scipy``, ``scikit-learn``, ``fasttext``, etc.) \nare large in size and `not always necessary to make fast and accurate\npredictions <https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py>`__. \nAdditionally, they rely on C extensions that may not be ideal for serverless applications with a python runtime.\n\nQuick Start Example\n-------------------\n\nIn a python enviornment with ``scikit-learn`` and its dependencies installed:\n\n.. code-block:: python\n    \n    import pickle\n    \n    from sklearn.ensemble import RandomForestClassifier\n    from sklearn.datasets import load_iris\n    from pure_sklearn.map import convert_estimator\n    \n    # fit sklearn estimator\n    X, y = load_iris(return_X_y=True)\n    clf = RandomForestClassifier()\n    clf.fit(X, y)\n    \n    # convert to pure python estimator\n    clf_pure_predict = convert_estimator(clf)\n    with open(\"model.pkl\", \"wb\") as f: \n        pickle.dump(clf_pure_predict, f) \n        \n    # make prediction with sklearn estimator\n    y_pred = clf.predict([[0.25, 2.0, 8.3, 1.0]])\n    print(y_pred)\n    [2]\n    \nIn a python enviornment with only ``pure-predict`` installed:\n\n.. code-block:: python\n\n    import pickle\n    \n    # load pickled model\n    with open(\"model.pkl\", \"rb\") as f: \n        clf = pickle.load(f) \n        \n    # make prediction with pure-predict object\n    y_pred = clf.predict([[0.25, 2.0, 8.3, 1.0]])\n    print(y_pred)\n    [2]\n\nSubpackages\n-----------\n\n`pure_sklearn <https://github.com/Ibotta/pure-predict/tree/master/pure_sklearn>`__\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPrediction in pure python for a subset of ``scikit-learn`` estimators and transformers.\n\n- **estimators**\n    - **linear models** - supports the majority of linear models for classification\n    - **trees** - decision trees, random forests, gradient boosting and xgboost \n    - **naive bayes** - a number of popular naive bayes classifiers\n    - **svm** - linear SVC\n- **transformers**\n    - **preprocessing** - normalization and onehot/ordinal encoders\n    - **impute** - simple imputation \n    - **feature extraction** - text (tfidf, count vectorizer, hashing vectorizer) and dictionary vectorization \n    - **pipeline** - pipelines and feature unions\n\nSparse data - supports a custom pure python sparse data object - sparse data is handled as would be expected by the relevent transformers and estimators\n \n`pure_fasttext <https://github.com/Ibotta/pure-predict/tree/master/pure_fasttext>`__\n~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\nPrediction in pure python for ``fasttext``.\n\n- **supervised** - predicts labels for supervised models; no support for quantized models (blocked by `this issue <https://github.com/facebookresearch/fastText/issues/984>`__)\n- **unsupervised** - lookup of word or sentence embeddings given input text\n\nInstallation\n------------\n\nDependencies\n~~~~~~~~~~~~\n\n``pure-predict`` requires:\n\n-  `Python <https://www.python.org/>`__ (>= 3.5)\n\nDependency Notes\n~~~~~~~~~~~~~~~~\n\n-  ``pure_sklearn`` has been tested with ``scikit-learn`` versions >= 0.20 -- certain functionality may work with lower versions but are not guaranteed. Some functionality is explicitly not supported for certain ``scikit-learn`` versions and exceptions will be raised as appropriate.\n- ``xgboost`` requires version >= 0.82 for support with ``pure_sklearn``.\n- ``pure-predict`` is not supported with Python 2.\n\nUser Installation\n~~~~~~~~~~~~~~~~~\n\nThe easiest way to install ``pure-predict`` is with ``pip``:\n\n::\n\n    pip install --upgrade pure-predict\n\nYou can also download the source code:\n\n::\n\n    git clone https://github.com/Ibotta/pure-predict.git\n\nTesting\n~~~~~~~\n\nWith ``pytest`` installed, you can run tests locally:\n\n::\n\n    pytest pure-predict\n\nExamples\n--------\n\nThe package contains `examples <https://github.com/Ibotta/pure-predict/tree/master/examples>`__ \non how to use ``pure-predict`` in practice.\n\nCalls for Contributors\n----------------------\n\nContributing to ``pure-predict`` is `welcomed by any contributors <https://github.com/Ibotta/pure-predict/blob/master/CONTRIBUTING.md>`__. Specific calls for contribution are as follows:\n\n#. Examples, tests and documentation -- particularly more detailed examples with performance testing of various estimators under various constraints.\n#. Adding more ``pure_sklearn`` estimators. The ``scikit-learn`` package is extensive and only partially covered by ``pure_sklearn``. `Regression <https://scikit-learn.org/stable/supervised_learning.html#supervised-learning>`__ tasks in particular missing from ``pure_sklearn``. `Clustering <https://scikit-learn.org/stable/modules/clustering.html#clustering>`__, `dimensionality reduction <https://scikit-learn.org/stable/modules/decomposition.html#decompositions>`__, `nearest neighbors <https://scikit-learn.org/stable/modules/neighbors.html>`__, `feature selection <https://scikit-learn.org/stable/modules/feature_selection.html>`__, non-linear `SVM <https://scikit-learn.org/stable/modules/svm.html>`__, and more are also omitted and would be good candidates for extending ``pure_sklearn``.\n#. General efficiency. There is likely low hanging fruit for improving the efficiency of the ``numpy`` and ``scipy`` functionality that has been ported to ``pure-predict``.\n#. `Threading <https://docs.python.org/3/library/threading.html>`__ could be considered to improve performance -- particularly for making predictions with multiple records.\n#. A public `AWS lambda layer <https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html>`__ containing ``pure-predict``.\n\nBackground\n----------\n\nThe project was started at `Ibotta\nInc. <https://medium.com/building-ibotta>`__ on the machine learning\nteam and open sourced in 2020. It is currently maintained by the machine \nlearning team at Ibotta.\n\nAcknowledgements\n~~~~~~~~~~~~~~~~\nThanks to `David Mitchell <https://github.com/dlmitchell>`__ and `Andrew Tilley <https://github.com/tilleyand>`__ for internal review before open source. Thanks to `James Foley <https://github.com/chadfoley36>`__ for logo artwork.\n\n\n\n.. |License| image:: https://img.shields.io/badge/License-Apache%202.0-blue.svg\n   :target: https://opensource.org/licenses/Apache-2.0\n.. |Build Status| image:: https://travis-ci.org/Ibotta/pure-predict.png?branch=master\n   :target: https://travis-ci.org/Ibotta/pure-predict\n.. |PyPI Package| image:: https://badge.fury.io/py/pure-predict.svg\n   :target: https://pypi.org/project/pure-predict/\n.. |Python Versions| image:: https://img.shields.io/pypi/pyversions/pure-predict\n   :target: https://pypi.org/project/pure-predict/", "description_content_type": "", "docs_url": null, "download_url": "https://pypi.org/project/pure-predict/#files", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "Apache 2.0", "maintainer": "", "maintainer_email": "", "name": "pure-predict", "package_url": "https://pypi.org/project/pure-predict/", "platform": "", "project_url": "https://pypi.org/project/pure-predict/", "project_urls": {"Download": "https://pypi.org/project/pure-predict/#files", "Source Code": "https://github.com/Ibotta/pure-predict"}, "release_url": "https://pypi.org/project/pure-predict/0.0.2/", "requires_dist": null, "requires_python": ">=3.5", "summary": "Machine learning prediction in pure Python", "version": "0.0.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://opensource.org/licenses/Apache-2.0\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b97ca76cf5d8fd16c7bc4731270e0bbe53df7aa1/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d417061636865253230322e302d626c75652e737667\"></a> <a href=\"https://travis-ci.org/Ibotta/pure-predict\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/0e910e3458d437f4b0c369badc53a456f731deba/68747470733a2f2f7472617669732d63692e6f72672f49626f7474612f707572652d707265646963742e706e673f6272616e63683d6d6173746572\"></a> <a href=\"https://pypi.org/project/pure-predict/\" rel=\"nofollow\"><img alt=\"PyPI Package\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/1be1a21ea11b7ff11f1794431e9e08a5bd9ab1a5/68747470733a2f2f62616467652e667572792e696f2f70792f707572652d707265646963742e737667\"></a> <a href=\"https://pypi.org/project/pure-predict/\" rel=\"nofollow\"><img alt=\"Python Versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b81b8e58310b327b18d7483c519c1b76284fc52c/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f707572652d70726564696374\"></a></p>\n<p><tt><span class=\"pre\">pure-predict</span></tt> speeds up and slims down machine learning prediction applications. It is\na foundational tool for serverless inference or small batch prediction with popular machine\nlearning frameworks like <a href=\"https://scikit-learn.org/stable/\" rel=\"nofollow\">scikit-learn</a> and <a href=\"https://fasttext.cc/\" rel=\"nofollow\">fasttext</a>.\nIt implements the predict methods of these frameworks in pure Python.</p>\n<div id=\"primary-use-cases\">\n<h2>Primary Use Cases</h2>\n<p>The primary use case for <tt><span class=\"pre\">pure-predict</span></tt> is the following scenario:</p>\n<ol>\n<li>A model is trained in an environment without strong container footprint constraints. Perhaps a long running \u201coffline\u201d job on one or many machines where installing a number of python packages from PyPI is not at all problematic.</li>\n<li>At prediction time the model needs to be served behind an API. Typical access patterns are to request a prediction for one \u201crecord\u201d (one \u201crow\u201d in a <tt>numpy</tt> array or one string of text to classify) per request or a mini-batch of records per request.</li>\n<li>Preferred infrastructure for the prediction service is either serverless (<a href=\"https://aws.amazon.com/lambda/\" rel=\"nofollow\">AWS Lambda</a>) or a container service where the memory footprint of the container is constrained.</li>\n<li>The fitted model object\u2019s artifacts needed for prediction (coefficients, weights, vocabulary, decision tree artifacts, etc.) are relatively small (10s to 100s of MBs).</li>\n</ol>\n<p>In this scenario, a container service with a large dependency footprint can be overkill for a microservice, particularly if the access patterns favor the pricing model of a serverless application. Additionally, for smaller models and single record predictions per request, the <tt>numpy</tt> and <tt>scipy</tt> functionality in the prediction methods of popular machine learning frameworks work against the application in terms of latency, <a href=\"https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py\" rel=\"nofollow\">underperforming pure python</a> in some cases.</p>\n</div>\n<div id=\"package-details\">\n<h2>Package Details</h2>\n<p>It is a Python package for machine learning prediction distributed under\nthe <a href=\"https://github.com/Ibotta/sk-dist/blob/master/LICENSE\" rel=\"nofollow\">Apache 2.0 software license</a>.\nIt contains multiple subpackages which mirror their open source\ncounterpart (<tt><span class=\"pre\">scikit-learn</span></tt>, <tt>fasttext</tt>, etc.). Each subpackage has utilities to\nconvert a fitted machine learning model into a custom object containing prediction methods\nthat mirror their native counterparts, but converted to pure python. Additionally, all\nrelevant model artifacts needed for prediction are converted to pure python.</p>\n<p>A <tt><span class=\"pre\">pure-predict</span></tt> model object can then be pickled and later\nunpickled without any 3rd party dependencies other than <tt><span class=\"pre\">pure-predict</span></tt>.</p>\n<p>This eliminates the need to have large dependency packages installed in order to\nmake predictions with fitted machine learning models using popular open source packages for\ntraining models. These dependencies (<tt>numpy</tt>, <tt>scipy</tt>, <tt><span class=\"pre\">scikit-learn</span></tt>, <tt>fasttext</tt>, etc.)\nare large in size and <a href=\"https://github.com/Ibotta/pure-predict/blob/master/examples/performance_rf.py\" rel=\"nofollow\">not always necessary to make fast and accurate\npredictions</a>.\nAdditionally, they rely on C extensions that may not be ideal for serverless applications with a python runtime.</p>\n</div>\n<div id=\"quick-start-example\">\n<h2>Quick Start Example</h2>\n<p>In a python enviornment with <tt><span class=\"pre\">scikit-learn</span></tt> and its dependencies installed:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_iris</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pure_sklearn.map</span> <span class=\"kn\">import</span> <span class=\"n\">convert_estimator</span>\n\n<span class=\"c1\"># fit sklearn estimator</span>\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">load_iris</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">()</span>\n<span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># convert to pure python estimator</span>\n<span class=\"n\">clf_pure_predict</span> <span class=\"o\">=</span> <span class=\"n\">convert_estimator</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">)</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"model.pkl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"wb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">clf_pure_predict</span><span class=\"p\">,</span> <span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make prediction with sklearn estimator</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">8.3</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n<p>In a python enviornment with only <tt><span class=\"pre\">pure-predict</span></tt> installed:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">pickle</span>\n\n<span class=\"c1\"># load pickled model</span>\n<span class=\"k\">with</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s2\">\"model.pkl\"</span><span class=\"p\">,</span> <span class=\"s2\">\"rb\"</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">f</span><span class=\"p\">:</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">pickle</span><span class=\"o\">.</span><span class=\"n\">load</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># make prediction with pure-predict object</span>\n<span class=\"n\">y_pred</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">([[</span><span class=\"mf\">0.25</span><span class=\"p\">,</span> <span class=\"mf\">2.0</span><span class=\"p\">,</span> <span class=\"mf\">8.3</span><span class=\"p\">,</span> <span class=\"mf\">1.0</span><span class=\"p\">]])</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">y_pred</span><span class=\"p\">)</span>\n<span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n</pre>\n</div>\n<div id=\"subpackages\">\n<h2>Subpackages</h2>\n<div id=\"pure-sklearn\">\n<h3><a href=\"https://github.com/Ibotta/pure-predict/tree/master/pure_sklearn\" rel=\"nofollow\">pure_sklearn</a></h3>\n<p>Prediction in pure python for a subset of <tt><span class=\"pre\">scikit-learn</span></tt> estimators and transformers.</p>\n<ul>\n<li><dl>\n<dt><strong>estimators</strong></dt>\n<dd><ul>\n<li><strong>linear models</strong> - supports the majority of linear models for classification</li>\n<li><strong>trees</strong> - decision trees, random forests, gradient boosting and xgboost</li>\n<li><strong>naive bayes</strong> - a number of popular naive bayes classifiers</li>\n<li><strong>svm</strong> - linear SVC</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li><dl>\n<dt><strong>transformers</strong></dt>\n<dd><ul>\n<li><strong>preprocessing</strong> - normalization and onehot/ordinal encoders</li>\n<li><strong>impute</strong> - simple imputation</li>\n<li><strong>feature extraction</strong> - text (tfidf, count vectorizer, hashing vectorizer) and dictionary vectorization</li>\n<li><strong>pipeline</strong> - pipelines and feature unions</li>\n</ul>\n</dd>\n</dl>\n</li>\n</ul>\n<p>Sparse data - supports a custom pure python sparse data object - sparse data is handled as would be expected by the relevent transformers and estimators</p>\n</div>\n<div id=\"pure-fasttext\">\n<h3><a href=\"https://github.com/Ibotta/pure-predict/tree/master/pure_fasttext\" rel=\"nofollow\">pure_fasttext</a></h3>\n<p>Prediction in pure python for <tt>fasttext</tt>.</p>\n<ul>\n<li><strong>supervised</strong> - predicts labels for supervised models; no support for quantized models (blocked by <a href=\"https://github.com/facebookresearch/fastText/issues/984\" rel=\"nofollow\">this issue</a>)</li>\n<li><strong>unsupervised</strong> - lookup of word or sentence embeddings given input text</li>\n</ul>\n</div>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<div id=\"dependencies\">\n<h3>Dependencies</h3>\n<p><tt><span class=\"pre\">pure-predict</span></tt> requires:</p>\n<ul>\n<li><a href=\"https://www.python.org/\" rel=\"nofollow\">Python</a> (&gt;= 3.5)</li>\n</ul>\n</div>\n<div id=\"dependency-notes\">\n<h3>Dependency Notes</h3>\n<ul>\n<li><tt>pure_sklearn</tt> has been tested with <tt><span class=\"pre\">scikit-learn</span></tt> versions &gt;= 0.20 \u2013 certain functionality may work with lower versions but are not guaranteed. Some functionality is explicitly not supported for certain <tt><span class=\"pre\">scikit-learn</span></tt> versions and exceptions will be raised as appropriate.</li>\n<li><tt>xgboost</tt> requires version &gt;= 0.82 for support with <tt>pure_sklearn</tt>.</li>\n<li><tt><span class=\"pre\">pure-predict</span></tt> is not supported with Python 2.</li>\n</ul>\n</div>\n<div id=\"user-installation\">\n<h3>User Installation</h3>\n<p>The easiest way to install <tt><span class=\"pre\">pure-predict</span></tt> is with <tt>pip</tt>:</p>\n<pre>pip install --upgrade pure-predict\n</pre>\n<p>You can also download the source code:</p>\n<pre>git clone https://github.com/Ibotta/pure-predict.git\n</pre>\n</div>\n<div id=\"testing\">\n<h3>Testing</h3>\n<p>With <tt>pytest</tt> installed, you can run tests locally:</p>\n<pre>pytest pure-predict\n</pre>\n</div>\n</div>\n<div id=\"examples\">\n<h2>Examples</h2>\n<p>The package contains <a href=\"https://github.com/Ibotta/pure-predict/tree/master/examples\" rel=\"nofollow\">examples</a>\non how to use <tt><span class=\"pre\">pure-predict</span></tt> in practice.</p>\n</div>\n<div id=\"calls-for-contributors\">\n<h2>Calls for Contributors</h2>\n<p>Contributing to <tt><span class=\"pre\">pure-predict</span></tt> is <a href=\"https://github.com/Ibotta/pure-predict/blob/master/CONTRIBUTING.md\" rel=\"nofollow\">welcomed by any contributors</a>. Specific calls for contribution are as follows:</p>\n<ol>\n<li>Examples, tests and documentation \u2013 particularly more detailed examples with performance testing of various estimators under various constraints.</li>\n<li>Adding more <tt>pure_sklearn</tt> estimators. The <tt><span class=\"pre\">scikit-learn</span></tt> package is extensive and only partially covered by <tt>pure_sklearn</tt>. <a href=\"https://scikit-learn.org/stable/supervised_learning.html#supervised-learning\" rel=\"nofollow\">Regression</a> tasks in particular missing from <tt>pure_sklearn</tt>. <a href=\"https://scikit-learn.org/stable/modules/clustering.html#clustering\" rel=\"nofollow\">Clustering</a>, <a href=\"https://scikit-learn.org/stable/modules/decomposition.html#decompositions\" rel=\"nofollow\">dimensionality reduction</a>, <a href=\"https://scikit-learn.org/stable/modules/neighbors.html\" rel=\"nofollow\">nearest neighbors</a>, <a href=\"https://scikit-learn.org/stable/modules/feature_selection.html\" rel=\"nofollow\">feature selection</a>, non-linear <a href=\"https://scikit-learn.org/stable/modules/svm.html\" rel=\"nofollow\">SVM</a>, and more are also omitted and would be good candidates for extending <tt>pure_sklearn</tt>.</li>\n<li>General efficiency. There is likely low hanging fruit for improving the efficiency of the <tt>numpy</tt> and <tt>scipy</tt> functionality that has been ported to <tt><span class=\"pre\">pure-predict</span></tt>.</li>\n<li><a href=\"https://docs.python.org/3/library/threading.html\" rel=\"nofollow\">Threading</a> could be considered to improve performance \u2013 particularly for making predictions with multiple records.</li>\n<li>A public <a href=\"https://docs.aws.amazon.com/lambda/latest/dg/configuration-layers.html\" rel=\"nofollow\">AWS lambda layer</a> containing <tt><span class=\"pre\">pure-predict</span></tt>.</li>\n</ol>\n</div>\n<div id=\"background\">\n<h2>Background</h2>\n<p>The project was started at <a href=\"https://medium.com/building-ibotta\" rel=\"nofollow\">Ibotta\nInc.</a> on the machine learning\nteam and open sourced in 2020. It is currently maintained by the machine\nlearning team at Ibotta.</p>\n<div id=\"acknowledgements\">\n<h3>Acknowledgements</h3>\n<p>Thanks to <a href=\"https://github.com/dlmitchell\" rel=\"nofollow\">David Mitchell</a> and <a href=\"https://github.com/tilleyand\" rel=\"nofollow\">Andrew Tilley</a> for internal review before open source. Thanks to <a href=\"https://github.com/chadfoley36\" rel=\"nofollow\">James Foley</a> for logo artwork.</p>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6634467, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "8a6ff8bc0afde9dcb8622a138462bc6c", "sha256": "6ac96c05cbdb835968c977e687e6fd580fe501554d6138067f9912d3737a14e7"}, "downloads": -1, "filename": "pure-predict-0.0.1.tar.gz", "has_sig": false, "md5_digest": "8a6ff8bc0afde9dcb8622a138462bc6c", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 37563, "upload_time": "2020-02-14T15:51:26", "upload_time_iso_8601": "2020-02-14T15:51:26.937179Z", "url": "https://files.pythonhosted.org/packages/19/c5/66ed176bc56bf7281823f3cc72f9a0d35be428cf5de5e4ee85806fc03224/pure-predict-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "c1e598ab7d17d1888c17e84d602e8967", "sha256": "2e940584b2d39276bb62c7fcc0f575f19bfc14e8f0b2f02c5a04235aad621080"}, "downloads": -1, "filename": "pure-predict-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c1e598ab7d17d1888c17e84d602e8967", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 39111, "upload_time": "2020-02-14T22:59:35", "upload_time_iso_8601": "2020-02-14T22:59:35.339093Z", "url": "https://files.pythonhosted.org/packages/78/a8/384573c05fba03739f00523f5706d9bb711da236944c242502aa52b4dd2f/pure-predict-0.0.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c1e598ab7d17d1888c17e84d602e8967", "sha256": "2e940584b2d39276bb62c7fcc0f575f19bfc14e8f0b2f02c5a04235aad621080"}, "downloads": -1, "filename": "pure-predict-0.0.2.tar.gz", "has_sig": false, "md5_digest": "c1e598ab7d17d1888c17e84d602e8967", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3.5", "size": 39111, "upload_time": "2020-02-14T22:59:35", "upload_time_iso_8601": "2020-02-14T22:59:35.339093Z", "url": "https://files.pythonhosted.org/packages/78/a8/384573c05fba03739f00523f5706d9bb711da236944c242502aa52b4dd2f/pure-predict-0.0.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:13:21 2020"}