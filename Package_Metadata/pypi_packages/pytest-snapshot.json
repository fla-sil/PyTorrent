{"info": {"author": "Joseph Roitman", "author_email": "joseph.roitman@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Framework :: Pytest", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Programming Language :: Python :: Implementation :: CPython", "Programming Language :: Python :: Implementation :: PyPy", "Topic :: Software Development :: Testing"], "description": "===============\npytest-snapshot\n===============\n\n.. image:: https://img.shields.io/pypi/v/pytest-snapshot.svg\n    :target: https://pypi.org/project/pytest-snapshot\n    :alt: PyPI version\n\n.. image:: https://img.shields.io/pypi/pyversions/pytest-snapshot.svg\n    :target: https://pypi.org/project/pytest-snapshot\n    :alt: Python versions\n\n.. image:: https://github.com/joseph-roitman/pytest-snapshot/workflows/CI/badge.svg?branch=master\n   :target: https://github.com/joseph-roitman/pytest-snapshot/actions?workflow=CI\n   :alt: CI Status\n\n.. image:: https://img.shields.io/codecov/c/github/joseph-roitman/pytest-snapshot.svg?style=flat\n   :alt: Coverage\n   :target: https://codecov.io/gh/joseph-roitman/pytest-snapshot\n\n\nA plugin for snapshot testing with pytest.\n\nThis library was inspired by `jest's snapshot testing`_.\nSnapshot testing can be used to test that the value of an expression does not change unexpectedly.\nThe added benefits of snapshot testing are that\n\n* They are easy to create.\n* They are easy to update when the expected value of a test changes.\n\nInstead of manually updating tests when the expected value of an expression changes,\nthe developer simply needs to\n\n1. run ``pytest --snapshot-update`` to update the snapshot tests\n2. verify that the snapshot files contain the new expected results\n3. commit the snapshot changes to version control\n\n----\n\nThis `pytest`_ plugin was generated with `Cookiecutter`_ along with `@hackebrot`_'s `cookiecutter-pytest-plugin`_ template.\n\n\nFeatures\n--------\n\n* snapshot testing of strings\n* snapshot testing of collections of strings\n* the user has complete control over the snapshot file path and content\n\n\nRequirements\n------------\n\n* Python 2.7 or 3.5+ or `PyPy`_\n* `pytest`_ 3.0+\n\n\nInstallation\n------------\nYou can install \"pytest-snapshot\" via `pip`_ from `PyPI`_::\n\n    $ pip install pytest-snapshot\n\n\nUsage\n-----\n\nassert_match\n============\nA classic equality test looks like:\n\n.. code-block:: python\n\n    def test_function_output():\n        assert foo('function input') == 'expected result'\n\nIt could be re-written using snapshot testing as:\n\n.. code-block:: python\n\n    def test_function_output_with_snapshot(snapshot):\n        snapshot.snapshot_dir = 'snapshots'  # This line is optional.\n        snapshot.assert_match(foo('function input'), 'foo_output.txt')\n\nThe author of the test should then\n\n1. run ``pytest --snapshot-update`` to generate the snapshot file ``snapshots/foo_output.txt``\n   containing the output of ``foo()``.\n2. verify that the content of the snapshot file is valid.\n3. commit it to version control.\n\nNow, whenever the test is run, it will assert that the output of ``foo()`` is equal to the snapshot.\n\nWhat if the behaviour of ``foo()`` changes and the test starts to fail?\n\nIn the first example, the developer would need to manually update the expected result in ``test_function_output``.\nThis could be tedious if the expected result is large or there are many tests.\n\nIn the second example, the developer would simply\n\n1. run ``pytest --snapshot-update``\n2. verify that the snapshot file contains the new expected result\n3. commit it to version control.\n\nSnapshot testing can be used for expressions whose values are strings.\nFor other types, you should first create a *human readable* textual representation of the value.\nFor example, to snapshot test a *json-serializable* value, you could either convert it into json\nor preferably convert it into the more readable yaml format using `PyYaml`_:\n\n.. code-block:: python\n\n    snapshot.assert_match(yaml.dump(foo()), 'foo_output.yml')\n\nassert_match_dir\n================\nWhen snapshot testing a *collection* of values, ``assert_match_dir`` comes in handy.\nIt will save a snapshot of a collection as a directory containing snapshot files.\n``assert_match_dir`` takes a mapping from file name to value.\n\nFor example, the following code creates the directory ``snapshots/people``\ncontaining files ``john.json`` and ``jane.json``.\n\n.. code-block:: python\n\n    def test_something(snapshot):\n        snapshot.snapshot_dir = 'snapshots'\n        snapshot.assert_match_dir({\n            'john.json': '{\"first name\": \"John\", \"last name\": \"Doe\", \"age\": 20}',\n            'jane.json': '{\"first name\": \"Jane\", \"last name\": \"Doe\", \"age\": 21}',\n        }, 'people')\n\nWhen running ``pytest --snapshot-update``, snapshot files will be added, updated, or deleted as necessary.\nAs a safety measure, snapshots will only be deleted when using the ``--allow-snapshot-deletion`` flag.\n\nCommon use case\n===============\nA quick way to create snapshot tests is to create a directory containing many test case directories.\nIn each test case, add files containing the inputs to the function you wish to test.\nFor example:\n\n.. code-block::\n\n    test_cases\n        case1\n            input.json\n        case2\n            input.json\n        ...\n\nNext, add a test that is parametrized on all test case directories. The test should\n\n* read input from the test case directory\n* call the function to be tested\n* snapshot the result to the test case directory\n\n.. code-block:: python\n\n    import json\n    import os\n\n    import pytest\n    import yaml\n    from pathlib import Path\n\n\n    def json_to_yaml(json_string):\n        obj = json.loads(json_string)\n        return yaml.dump(obj, indent=2)\n\n\n    @pytest.mark.parametrize('case_dir', [os.path.join('test_cases', d) for d in os.listdir('test_cases')])\n    def test_json(case_dir, snapshot):\n        case_dir = Path(case_dir)\n\n        # Read input files from the case directory.\n        input_json = case_dir.joinpath('input.json').read_text()\n\n        # Call the tested function.\n        output_yaml = json_to_yaml(input_json)\n\n        # Snapshot the return value.\n        snapshot.snapshot_dir = case_dir\n        snapshot.assert_match(output_yaml, 'output.yml')\n\nNow, we can run ``pytest --snapshot-update`` to create an ``output.yml`` snapshot for each test case.\nIf in the future we change the tested function, we can quickly fix the test with another ``pytest --snapshot-update``.\n\n\nContributing\n------------\nContributions are very welcome. Before contributing, please discuss the change with me.\nI wish to keep this plugin flexible and not enforce any project layout on the users.\n\nTests can be run with `tox`_, please ensure\nthe coverage at least stays the same before you submit a pull request.\n\nLicense\n-------\nDistributed under the terms of the `MIT`_ license, \"pytest-snapshot\" is free and open source software\n\n\nIssues\n------\nIf you encounter any problems, please `file an issue`_ along with a detailed description.\n\n\nLinks\n-----\n* Releases: https://pypi.org/project/pytest-snapshot/\n* Code: https://github.com/joseph-roitman/pytest-snapshot\n\n.. _`Cookiecutter`: https://github.com/audreyr/cookiecutter\n.. _`@hackebrot`: https://github.com/hackebrot\n.. _`MIT`: http://opensource.org/licenses/MIT\n.. _`BSD-3`: http://opensource.org/licenses/BSD-3-Clause\n.. _`GNU GPL v3.0`: http://www.gnu.org/licenses/gpl-3.0.txt\n.. _`Apache Software License 2.0`: http://www.apache.org/licenses/LICENSE-2.0\n.. _`cookiecutter-pytest-plugin`: https://github.com/pytest-dev/cookiecutter-pytest-plugin\n.. _`file an issue`: https://github.com/joseph-roitman/pytest-snapshot/issues\n.. _`pytest`: https://github.com/pytest-dev/pytest\n.. _`tox`: https://tox.readthedocs.io/en/latest/\n.. _`pip`: https://pypi.org/project/pip/\n.. _`PyPI`: https://pypi.org\n.. _`PyPy`: https://www.pypy.org/\n.. _`jest's snapshot testing`: https://jestjs.io/docs/en/snapshot-testing\n.. _`PyYaml`: https://pypi.org/project/PyYAML/\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/joseph-roitman/pytest-snapshot", "keywords": "", "license": "MIT", "maintainer": "Joseph Roitman", "maintainer_email": "joseph.roitman@gmail.com", "name": "pytest-snapshot", "package_url": "https://pypi.org/project/pytest-snapshot/", "platform": "", "project_url": "https://pypi.org/project/pytest-snapshot/", "project_urls": {"Homepage": "https://github.com/joseph-roitman/pytest-snapshot"}, "release_url": "https://pypi.org/project/pytest-snapshot/0.4.0/", "requires_dist": ["packaging", "pytest (>=3.0.0)", "typing", "pathlib2 (>=2.2.0) ; python_version < \"3.6\""], "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "summary": "A plugin to enable snapshot testing with pytest.", "version": "0.4.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://pypi.org/project/pytest-snapshot\" rel=\"nofollow\"><img alt=\"PyPI version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/8c54c32f498deb440934130d7908490d1fd2439e/68747470733a2f2f696d672e736869656c64732e696f2f707970692f762f7079746573742d736e617073686f742e737667\"></a>\n<a href=\"https://pypi.org/project/pytest-snapshot\" rel=\"nofollow\"><img alt=\"Python versions\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/7a49eecc3c458122f01b1b3eb53b8419808f1132/68747470733a2f2f696d672e736869656c64732e696f2f707970692f707976657273696f6e732f7079746573742d736e617073686f742e737667\"></a>\n<a href=\"https://github.com/joseph-roitman/pytest-snapshot/actions?workflow=CI\" rel=\"nofollow\"><img alt=\"CI Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c5aff044c76ffb76af0ea99ad0d0a8019d423321/68747470733a2f2f6769746875622e636f6d2f6a6f736570682d726f69746d616e2f7079746573742d736e617073686f742f776f726b666c6f77732f43492f62616467652e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/gh/joseph-roitman/pytest-snapshot\" rel=\"nofollow\"><img alt=\"Coverage\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3653e0c777b63b9cf59def51d8e958f9e10007fb/68747470733a2f2f696d672e736869656c64732e696f2f636f6465636f762f632f6769746875622f6a6f736570682d726f69746d616e2f7079746573742d736e617073686f742e7376673f7374796c653d666c6174\"></a>\n<p>A plugin for snapshot testing with pytest.</p>\n<p>This library was inspired by <a href=\"https://jestjs.io/docs/en/snapshot-testing\" rel=\"nofollow\">jest\u2019s snapshot testing</a>.\nSnapshot testing can be used to test that the value of an expression does not change unexpectedly.\nThe added benefits of snapshot testing are that</p>\n<ul>\n<li>They are easy to create.</li>\n<li>They are easy to update when the expected value of a test changes.</li>\n</ul>\n<p>Instead of manually updating tests when the expected value of an expression changes,\nthe developer simply needs to</p>\n<ol>\n<li>run <tt>pytest <span class=\"pre\">--snapshot-update</span></tt> to update the snapshot tests</li>\n<li>verify that the snapshot files contain the new expected results</li>\n<li>commit the snapshot changes to version control</li>\n</ol>\n<hr class=\"docutils\">\n<p>This <a href=\"https://github.com/pytest-dev/pytest\" rel=\"nofollow\">pytest</a> plugin was generated with <a href=\"https://github.com/audreyr/cookiecutter\" rel=\"nofollow\">Cookiecutter</a> along with <a href=\"https://github.com/hackebrot\" rel=\"nofollow\">@hackebrot</a>\u2019s <a href=\"https://github.com/pytest-dev/cookiecutter-pytest-plugin\" rel=\"nofollow\">cookiecutter-pytest-plugin</a> template.</p>\n<div id=\"features\">\n<h2>Features</h2>\n<ul>\n<li>snapshot testing of strings</li>\n<li>snapshot testing of collections of strings</li>\n<li>the user has complete control over the snapshot file path and content</li>\n</ul>\n</div>\n<div id=\"requirements\">\n<h2>Requirements</h2>\n<ul>\n<li>Python 2.7 or 3.5+ or <a href=\"https://www.pypy.org/\" rel=\"nofollow\">PyPy</a></li>\n<li><a href=\"https://github.com/pytest-dev/pytest\" rel=\"nofollow\">pytest</a> 3.0+</li>\n</ul>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>You can install \u201cpytest-snapshot\u201d via <a href=\"https://pypi.org/project/pip/\" rel=\"nofollow\">pip</a> from <a href=\"https://pypi.org\" rel=\"nofollow\">PyPI</a>:</p>\n<pre>$ pip install pytest-snapshot\n</pre>\n</div>\n<div id=\"usage\">\n<h2>Usage</h2>\n<div id=\"assert-match\">\n<h3>assert_match</h3>\n<p>A classic equality test looks like:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_function_output</span><span class=\"p\">():</span>\n    <span class=\"k\">assert</span> <span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'function input'</span><span class=\"p\">)</span> <span class=\"o\">==</span> <span class=\"s1\">'expected result'</span>\n</pre>\n<p>It could be re-written using snapshot testing as:</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_function_output_with_snapshot</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">snapshot_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'snapshots'</span>  <span class=\"c1\"># This line is optional.</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">(</span><span class=\"s1\">'function input'</span><span class=\"p\">),</span> <span class=\"s1\">'foo_output.txt'</span><span class=\"p\">)</span>\n</pre>\n<p>The author of the test should then</p>\n<ol>\n<li>run <tt>pytest <span class=\"pre\">--snapshot-update</span></tt> to generate the snapshot file <tt>snapshots/foo_output.txt</tt>\ncontaining the output of <tt>foo()</tt>.</li>\n<li>verify that the content of the snapshot file is valid.</li>\n<li>commit it to version control.</li>\n</ol>\n<p>Now, whenever the test is run, it will assert that the output of <tt>foo()</tt> is equal to the snapshot.</p>\n<p>What if the behaviour of <tt>foo()</tt> changes and the test starts to fail?</p>\n<p>In the first example, the developer would need to manually update the expected result in <tt>test_function_output</tt>.\nThis could be tedious if the expected result is large or there are many tests.</p>\n<p>In the second example, the developer would simply</p>\n<ol>\n<li>run <tt>pytest <span class=\"pre\">--snapshot-update</span></tt></li>\n<li>verify that the snapshot file contains the new expected result</li>\n<li>commit it to version control.</li>\n</ol>\n<p>Snapshot testing can be used for expressions whose values are strings.\nFor other types, you should first create a <em>human readable</em> textual representation of the value.\nFor example, to snapshot test a <em>json-serializable</em> value, you could either convert it into json\nor preferably convert it into the more readable yaml format using <a href=\"https://pypi.org/project/PyYAML/\" rel=\"nofollow\">PyYaml</a>:</p>\n<pre><span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match</span><span class=\"p\">(</span><span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">foo</span><span class=\"p\">()),</span> <span class=\"s1\">'foo_output.yml'</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"assert-match-dir\">\n<h3>assert_match_dir</h3>\n<p>When snapshot testing a <em>collection</em> of values, <tt>assert_match_dir</tt> comes in handy.\nIt will save a snapshot of a collection as a directory containing snapshot files.\n<tt>assert_match_dir</tt> takes a mapping from file name to value.</p>\n<p>For example, the following code creates the directory <tt>snapshots/people</tt>\ncontaining files <tt>john.json</tt> and <tt>jane.json</tt>.</p>\n<pre><span class=\"k\">def</span> <span class=\"nf\">test_something</span><span class=\"p\">(</span><span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">snapshot_dir</span> <span class=\"o\">=</span> <span class=\"s1\">'snapshots'</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match_dir</span><span class=\"p\">({</span>\n        <span class=\"s1\">'john.json'</span><span class=\"p\">:</span> <span class=\"s1\">'{\"first name\": \"John\", \"last name\": \"Doe\", \"age\": 20}'</span><span class=\"p\">,</span>\n        <span class=\"s1\">'jane.json'</span><span class=\"p\">:</span> <span class=\"s1\">'{\"first name\": \"Jane\", \"last name\": \"Doe\", \"age\": 21}'</span><span class=\"p\">,</span>\n    <span class=\"p\">},</span> <span class=\"s1\">'people'</span><span class=\"p\">)</span>\n</pre>\n<p>When running <tt>pytest <span class=\"pre\">--snapshot-update</span></tt>, snapshot files will be added, updated, or deleted as necessary.\nAs a safety measure, snapshots will only be deleted when using the <tt><span class=\"pre\">--allow-snapshot-deletion</span></tt> flag.</p>\n</div>\n<div id=\"common-use-case\">\n<h3>Common use case</h3>\n<p>A quick way to create snapshot tests is to create a directory containing many test case directories.\nIn each test case, add files containing the inputs to the function you wish to test.\nFor example:</p>\n<pre>test_cases\n    case1\n        input.json\n    case2\n        input.json\n    ...\n</pre>\n<p>Next, add a test that is parametrized on all test case directories. The test should</p>\n<ul>\n<li>read input from the test case directory</li>\n<li>call the function to be tested</li>\n<li>snapshot the result to the test case directory</li>\n</ul>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">json</span>\n<span class=\"kn\">import</span> <span class=\"nn\">os</span>\n\n<span class=\"kn\">import</span> <span class=\"nn\">pytest</span>\n<span class=\"kn\">import</span> <span class=\"nn\">yaml</span>\n<span class=\"kn\">from</span> <span class=\"nn\">pathlib</span> <span class=\"kn\">import</span> <span class=\"n\">Path</span>\n\n\n<span class=\"k\">def</span> <span class=\"nf\">json_to_yaml</span><span class=\"p\">(</span><span class=\"n\">json_string</span><span class=\"p\">):</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">json</span><span class=\"o\">.</span><span class=\"n\">loads</span><span class=\"p\">(</span><span class=\"n\">json_string</span><span class=\"p\">)</span>\n    <span class=\"k\">return</span> <span class=\"n\">yaml</span><span class=\"o\">.</span><span class=\"n\">dump</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">indent</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@pytest</span><span class=\"o\">.</span><span class=\"n\">mark</span><span class=\"o\">.</span><span class=\"n\">parametrize</span><span class=\"p\">(</span><span class=\"s1\">'case_dir'</span><span class=\"p\">,</span> <span class=\"p\">[</span><span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">path</span><span class=\"o\">.</span><span class=\"n\">join</span><span class=\"p\">(</span><span class=\"s1\">'test_cases'</span><span class=\"p\">,</span> <span class=\"n\">d</span><span class=\"p\">)</span> <span class=\"k\">for</span> <span class=\"n\">d</span> <span class=\"ow\">in</span> <span class=\"n\">os</span><span class=\"o\">.</span><span class=\"n\">listdir</span><span class=\"p\">(</span><span class=\"s1\">'test_cases'</span><span class=\"p\">)])</span>\n<span class=\"k\">def</span> <span class=\"nf\">test_json</span><span class=\"p\">(</span><span class=\"n\">case_dir</span><span class=\"p\">,</span> <span class=\"n\">snapshot</span><span class=\"p\">):</span>\n    <span class=\"n\">case_dir</span> <span class=\"o\">=</span> <span class=\"n\">Path</span><span class=\"p\">(</span><span class=\"n\">case_dir</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Read input files from the case directory.</span>\n    <span class=\"n\">input_json</span> <span class=\"o\">=</span> <span class=\"n\">case_dir</span><span class=\"o\">.</span><span class=\"n\">joinpath</span><span class=\"p\">(</span><span class=\"s1\">'input.json'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">read_text</span><span class=\"p\">()</span>\n\n    <span class=\"c1\"># Call the tested function.</span>\n    <span class=\"n\">output_yaml</span> <span class=\"o\">=</span> <span class=\"n\">json_to_yaml</span><span class=\"p\">(</span><span class=\"n\">input_json</span><span class=\"p\">)</span>\n\n    <span class=\"c1\"># Snapshot the return value.</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">snapshot_dir</span> <span class=\"o\">=</span> <span class=\"n\">case_dir</span>\n    <span class=\"n\">snapshot</span><span class=\"o\">.</span><span class=\"n\">assert_match</span><span class=\"p\">(</span><span class=\"n\">output_yaml</span><span class=\"p\">,</span> <span class=\"s1\">'output.yml'</span><span class=\"p\">)</span>\n</pre>\n<p>Now, we can run <tt>pytest <span class=\"pre\">--snapshot-update</span></tt> to create an <tt>output.yml</tt> snapshot for each test case.\nIf in the future we change the tested function, we can quickly fix the test with another <tt>pytest <span class=\"pre\">--snapshot-update</span></tt>.</p>\n</div>\n</div>\n<div id=\"contributing\">\n<h2>Contributing</h2>\n<p>Contributions are very welcome. Before contributing, please discuss the change with me.\nI wish to keep this plugin flexible and not enforce any project layout on the users.</p>\n<p>Tests can be run with <a href=\"https://tox.readthedocs.io/en/latest/\" rel=\"nofollow\">tox</a>, please ensure\nthe coverage at least stays the same before you submit a pull request.</p>\n</div>\n<div id=\"license\">\n<h2>License</h2>\n<p>Distributed under the terms of the <a href=\"http://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT</a> license, \u201cpytest-snapshot\u201d is free and open source software</p>\n</div>\n<div id=\"issues\">\n<h2>Issues</h2>\n<p>If you encounter any problems, please <a href=\"https://github.com/joseph-roitman/pytest-snapshot/issues\" rel=\"nofollow\">file an issue</a> along with a detailed description.</p>\n</div>\n<div id=\"links\">\n<h2>Links</h2>\n<ul>\n<li>Releases: <a href=\"https://pypi.org/project/pytest-snapshot/\" rel=\"nofollow\">https://pypi.org/project/pytest-snapshot/</a></li>\n<li>Code: <a href=\"https://github.com/joseph-roitman/pytest-snapshot\" rel=\"nofollow\">https://github.com/joseph-roitman/pytest-snapshot</a></li>\n</ul>\n</div>\n\n          </div>"}, "last_serial": 7156813, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "ae4e9f3d21dc12b96d135c74e242979f", "sha256": "66fb2996b20d58bada24c9a809aa13e2bab8acfaba3f844f2eda0b2de284bc4c"}, "downloads": -1, "filename": "pytest_snapshot-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "ae4e9f3d21dc12b96d135c74e242979f", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 5906, "upload_time": "2020-03-19T21:03:00", "upload_time_iso_8601": "2020-03-19T21:03:00.452918Z", "url": "https://files.pythonhosted.org/packages/c5/bd/ea6fda32a591e325f79524e365369d351fce4fd03aa91371e2cbf5d88400/pytest_snapshot-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "51c47129377e43943f1f7187b58e6fd9", "sha256": "654514e00ce6653826e6fa48640468a69241ef97a76e2435addabcd72d4a9835"}, "downloads": -1, "filename": "pytest-snapshot-0.1.0.tar.gz", "has_sig": false, "md5_digest": "51c47129377e43943f1f7187b58e6fd9", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 9075, "upload_time": "2020-03-19T21:03:02", "upload_time_iso_8601": "2020-03-19T21:03:02.961581Z", "url": "https://files.pythonhosted.org/packages/34/24/6fb603f32568500bdcd0aed87b2bbd124a6c27dc05cc4921863ac18e38f3/pytest-snapshot-0.1.0.tar.gz", "yanked": false}], "0.2.0": [{"comment_text": "", "digests": {"md5": "383a32941fe3df7f7252ce8c12d44da0", "sha256": "345566c680959ab00543ca5ae0b86f9e3a765901bcab673af74781dfb6e6cc8c"}, "downloads": -1, "filename": "pytest_snapshot-0.2.0-py3-none-any.whl", "has_sig": false, "md5_digest": "383a32941fe3df7f7252ce8c12d44da0", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7474, "upload_time": "2020-03-20T21:04:01", "upload_time_iso_8601": "2020-03-20T21:04:01.894803Z", "url": "https://files.pythonhosted.org/packages/60/56/2c3297740b1912508582f657ec65c828906d7f9401c07b26a4f201c2a84e/pytest_snapshot-0.2.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5f1d5cb901112b23bc60b07ba8738fed", "sha256": "08abede5c2b2c88be79881a65471efb7889bddaeda6f4a53c174291fbae2840a"}, "downloads": -1, "filename": "pytest-snapshot-0.2.0.tar.gz", "has_sig": false, "md5_digest": "5f1d5cb901112b23bc60b07ba8738fed", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 11814, "upload_time": "2020-03-20T21:04:03", "upload_time_iso_8601": "2020-03-20T21:04:03.301488Z", "url": "https://files.pythonhosted.org/packages/2e/77/f9bd91e3996e3b824bbbbc88f62b415a671eb475a02815898d8507b59eb4/pytest-snapshot-0.2.0.tar.gz", "yanked": false}], "0.3.0": [{"comment_text": "", "digests": {"md5": "84061b90c0b780df1ec5b806bac11fba", "sha256": "5893b7f622bade1f6f1c001ac34a3081a5609e2855e17fb0e2326560e4c333cb"}, "downloads": -1, "filename": "pytest_snapshot-0.3.0-py3-none-any.whl", "has_sig": false, "md5_digest": "84061b90c0b780df1ec5b806bac11fba", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 7792, "upload_time": "2020-04-01T18:08:32", "upload_time_iso_8601": "2020-04-01T18:08:32.097015Z", "url": "https://files.pythonhosted.org/packages/68/b7/e512241e4ee789fb2ff2e1cb6198264e4e25b91edd7597887fd97c5a47b2/pytest_snapshot-0.3.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "96106883775f086e9579ec23b6e39252", "sha256": "95726da8275ac5028bc6efe40709d2f57fae07a717788aaf398ec9d9227840ff"}, "downloads": -1, "filename": "pytest-snapshot-0.3.0.tar.gz", "has_sig": false, "md5_digest": "96106883775f086e9579ec23b6e39252", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 12763, "upload_time": "2020-04-01T18:08:33", "upload_time_iso_8601": "2020-04-01T18:08:33.375819Z", "url": "https://files.pythonhosted.org/packages/83/62/d441690bc8313192cefdaefc9c82d1f54816abec2cc91e376ed448afa939/pytest-snapshot-0.3.0.tar.gz", "yanked": false}], "0.4.0": [{"comment_text": "", "digests": {"md5": "2595e8b32c336f7020a2a6096d7514bc", "sha256": "d862f9f74533f2503e28f18bf0feec309dd46c96015b87c595028c11093c1044"}, "downloads": -1, "filename": "pytest_snapshot-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2595e8b32c336f7020a2a6096d7514bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8416, "upload_time": "2020-05-03T13:21:26", "upload_time_iso_8601": "2020-05-03T13:21:26.041467Z", "url": "https://files.pythonhosted.org/packages/a9/3f/aa79c8dc1e71381607e9195ce8d665fdc8802f7d8e1aed31387640c2ebeb/pytest_snapshot-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7882a3de6d24f3e3ceb9c0de259d5261", "sha256": "02038e91aa350c07379829bdaadc540941b5af1b1748f54f6a330f79908da7c4"}, "downloads": -1, "filename": "pytest-snapshot-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7882a3de6d24f3e3ceb9c0de259d5261", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13517, "upload_time": "2020-05-03T13:21:27", "upload_time_iso_8601": "2020-05-03T13:21:27.167427Z", "url": "https://files.pythonhosted.org/packages/e9/3e/852841b3df4081634f2b173a395cb27c2eb153e8ee52c5ff1f6de34b831c/pytest-snapshot-0.4.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "2595e8b32c336f7020a2a6096d7514bc", "sha256": "d862f9f74533f2503e28f18bf0feec309dd46c96015b87c595028c11093c1044"}, "downloads": -1, "filename": "pytest_snapshot-0.4.0-py3-none-any.whl", "has_sig": false, "md5_digest": "2595e8b32c336f7020a2a6096d7514bc", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 8416, "upload_time": "2020-05-03T13:21:26", "upload_time_iso_8601": "2020-05-03T13:21:26.041467Z", "url": "https://files.pythonhosted.org/packages/a9/3f/aa79c8dc1e71381607e9195ce8d665fdc8802f7d8e1aed31387640c2ebeb/pytest_snapshot-0.4.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7882a3de6d24f3e3ceb9c0de259d5261", "sha256": "02038e91aa350c07379829bdaadc540941b5af1b1748f54f6a330f79908da7c4"}, "downloads": -1, "filename": "pytest-snapshot-0.4.0.tar.gz", "has_sig": false, "md5_digest": "7882a3de6d24f3e3ceb9c0de259d5261", "packagetype": "sdist", "python_version": "source", "requires_python": ">=2.7, !=3.0.*, !=3.1.*, !=3.2.*, !=3.3.*, !=3.4.*", "size": 13517, "upload_time": "2020-05-03T13:21:27", "upload_time_iso_8601": "2020-05-03T13:21:27.167427Z", "url": "https://files.pythonhosted.org/packages/e9/3e/852841b3df4081634f2b173a395cb27c2eb153e8ee52c5ff1f6de34b831c/pytest-snapshot-0.4.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:41 2020"}