{"info": {"author": "Jacob Windsor", "author_email": "jacob.windsor@ymail.com", "bugtrack_url": null, "classifiers": ["Environment :: Web Environment", "Framework :: Django", "Framework :: Django :: 1.9", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python", "Programming Language :: Python :: 3.5", "Topic :: Internet :: WWW/HTTP", "Topic :: Internet :: WWW/HTTP :: Dynamic Content"], "description": "==========\r\nReviewable\r\n==========\r\nReviewable provides simple, customizable reviews for any of your Django models. The templates for each of your reviewable\r\nmodels can be customised with ease.\r\n\r\nQuick Start\r\n-----------\r\n1.\r\n\r\n.. code-block:: bash\r\n\r\n    $ pip install django-reviewable\r\n\r\n2. Add \"Reviewable\" to your INSTALLED_APPS setting:\r\n\r\n.. code-block:: python\r\n\r\n    INSTALLED_APPS = [\r\n        ...\r\n        'Reviewable',\r\n        ...\r\n    ]\r\n\r\n2. Include the Reviewable URLconf in your projects urls.py:\r\n\r\n.. code-block:: python\r\n\r\n    url(r'^reviews/', include('Reviewable.urls', namespace='Reviewable')),\r\n\r\n2. Run ``python manage.py migrate``\r\n\r\n5. Add the mixin ``Reviewable`` to any model you want to be reviewable.\r\n\r\n.. code-block:: python\r\n\r\n        ...\r\n        from Reviewable.models import Reviewable\r\n        ...\r\n\r\n        class ReviewableModel(models.Model, Reviewable):\r\n            ...\r\n\r\nCustom Templates\r\n----------------\r\nReviewable allows you to customise the templates for each reviewable model. Furthemore, the reviewable object is magically\r\nmade available in the template context.\r\n\r\nFor example:\r\n    1. You have a model called ``Hotel`` in an app called ``Hotel``\r\n    2. You want a custom template for the review creation view\r\n    3. You would add a template in ``Hotel/templates/Hotel`` called ``hotel_review_create.html``\r\n        - Note: This the template name has to be in camel case and all lower case\r\n    4. The hotel object is made available in the template context by the usual ``{{ hotel }}`` tag\r\n    5. This can be repeated for templates for all views: ``hotel_review_list.html``, ``hotel_review_update.html``,\r\n       ``hotel_review_confirm_delete.html`` and ``hotel_review_detail.html``\r\n\r\nTemplate Tags\r\n-------------\r\n\r\nReviewable provides one simple but useful template inclusion tag that will include controls for your reviewable object.\r\n\r\nTo use this just load in the template tag:\r\n\r\n.. code-block:: python\r\n\r\n    {% load reviewable %}\r\n    ...\r\n    {% show_review_controls reviewable_object %}\r\n\r\nThe template for the inclusion tag is very basic so it is a good idea to override it in the usual Django fashion.\r\nThe name of the template is \"Reviewable/__review_controls.html\".\r\n\r\nPost Delete Signals\r\n-------------------\r\n\r\nDeletion of a reviewable object won't automatically cause a cascade delete of all of the objects reviews. Hence, it\r\nis a good idea to use the post delete signal somewhere in your app as below:\r\n\r\n.. code-block:: python\r\n\r\n    from MyApp.models import ReviewableModel\r\n    from django.db.models.signals import post_delete\r\n    ...\r\n\r\n    post_delete.connect(ReviewableModel.delete_reviews, sender=ReviewableModel)\r\n\r\nSettings\r\n--------\r\n\r\nAll settings are shown below with their defaults.\r\n\r\nREVIEW_RATING_CHOICES\r\n+++++++++++++++++++++\r\n\r\n.. code-block:: python\r\n\r\n    REVIEW_RATING_CHOICES=(\r\n        (1, '1 Star'),\r\n        (2, '2 Star'),\r\n        (3, '3 Star'),\r\n        (4, '4 Star'),\r\n        (5, '5 Star')\r\n    )\r\n\r\nREVIEW_DELETE_SUCCESS_URL\r\n+++++++++++++++++++++++++\r\n\r\n.. code-block:: python\r\n\r\n    REVIEW_DELETE_SUCCESS_URL='/'\r\n\r\nREVIEW_STREAM_ENABLED\r\n+++++++++++++++++++++\r\n\r\nReviewable can utilise GetStream if required. This would mean reviews are automatically published to your GetStream.io\r\nfeed. See https://github.com/GetStream/stream-django for more information\r\n\r\n.. code-block:: python\r\n\r\n    REVIEW_STREAM_ENABLED=False\r\n", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jacobwindsor/django-reviewable", "keywords": null, "license": "MIT License", "maintainer": null, "maintainer_email": null, "name": "django-reviewable", "package_url": "https://pypi.org/project/django-reviewable/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-reviewable/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/jacobwindsor/django-reviewable"}, "release_url": "https://pypi.org/project/django-reviewable/0.3.9.2/", "requires_dist": null, "requires_python": null, "summary": "Simple, customizable reviews for any of your Django models", "version": "0.3.9.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>Reviewable provides simple, customizable reviews for any of your Django models. The templates for each of your reviewable\nmodels can be customised with ease.</p>\n<div id=\"quick-start\">\n<h2>Quick Start</h2>\n<ol>\n<li>\n</ol>\n<pre>$ pip install django-reviewable\n</pre>\n<ol>\n<li>Add \u201cReviewable\u201d to your INSTALLED_APPS setting:</li>\n</ol>\n<pre><span class=\"n\">INSTALLED_APPS</span> <span class=\"o\">=</span> <span class=\"p\">[</span>\n    <span class=\"o\">...</span>\n    <span class=\"s1\">'Reviewable'</span><span class=\"p\">,</span>\n    <span class=\"o\">...</span>\n<span class=\"p\">]</span>\n</pre>\n<ol>\n<li>Include the Reviewable URLconf in your projects urls.py:</li>\n</ol>\n<pre><span class=\"n\">url</span><span class=\"p\">(</span><span class=\"sa\">r</span><span class=\"s1\">'^reviews/'</span><span class=\"p\">,</span> <span class=\"n\">include</span><span class=\"p\">(</span><span class=\"s1\">'Reviewable.urls'</span><span class=\"p\">,</span> <span class=\"n\">namespace</span><span class=\"o\">=</span><span class=\"s1\">'Reviewable'</span><span class=\"p\">)),</span>\n</pre>\n<ol>\n<li>Run <tt>python manage.py migrate</tt></li>\n</ol>\n<ol>\n<li>Add the mixin <tt>Reviewable</tt> to any model you want to be reviewable.</li>\n</ol>\n<pre><span class=\"o\">...</span>\n<span class=\"kn\">from</span> <span class=\"nn\">Reviewable.models</span> <span class=\"kn\">import</span> <span class=\"n\">Reviewable</span>\n<span class=\"o\">...</span>\n\n<span class=\"k\">class</span> <span class=\"nc\">ReviewableModel</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">Model</span><span class=\"p\">,</span> <span class=\"n\">Reviewable</span><span class=\"p\">):</span>\n    <span class=\"o\">...</span>\n</pre>\n</div>\n<div id=\"custom-templates\">\n<h2>Custom Templates</h2>\n<p>Reviewable allows you to customise the templates for each reviewable model. Furthemore, the reviewable object is magically\nmade available in the template context.</p>\n<dl>\n<dt>For example:</dt>\n<dd><ol>\n<li>You have a model called <tt>Hotel</tt> in an app called <tt>Hotel</tt></li>\n<li>You want a custom template for the review creation view</li>\n<li><dl>\n<dt>You would add a template in <tt>Hotel/templates/Hotel</tt> called <tt>hotel_review_create.html</tt></dt>\n<dd><ul>\n<li>Note: This the template name has to be in camel case and all lower case</li>\n</ul>\n</dd>\n</dl>\n</li>\n<li>The hotel object is made available in the template context by the usual <tt>{{ hotel }}</tt> tag</li>\n<li>This can be repeated for templates for all views: <tt>hotel_review_list.html</tt>, <tt>hotel_review_update.html</tt>,\n<tt>hotel_review_confirm_delete.html</tt> and <tt>hotel_review_detail.html</tt></li>\n</ol>\n</dd>\n</dl>\n</div>\n<div id=\"template-tags\">\n<h2>Template Tags</h2>\n<p>Reviewable provides one simple but useful template inclusion tag that will include controls for your reviewable object.</p>\n<p>To use this just load in the template tag:</p>\n<pre><span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">load</span> <span class=\"n\">reviewable</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n<span class=\"o\">...</span>\n<span class=\"p\">{</span><span class=\"o\">%</span> <span class=\"n\">show_review_controls</span> <span class=\"n\">reviewable_object</span> <span class=\"o\">%</span><span class=\"p\">}</span>\n</pre>\n<p>The template for the inclusion tag is very basic so it is a good idea to override it in the usual Django fashion.\nThe name of the template is \u201cReviewable/__review_controls.html\u201d.</p>\n</div>\n<div id=\"post-delete-signals\">\n<h2>Post Delete Signals</h2>\n<p>Deletion of a reviewable object won\u2019t automatically cause a cascade delete of all of the objects reviews. Hence, it\nis a good idea to use the post delete signal somewhere in your app as below:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">MyApp.models</span> <span class=\"kn\">import</span> <span class=\"n\">ReviewableModel</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db.models.signals</span> <span class=\"kn\">import</span> <span class=\"n\">post_delete</span>\n<span class=\"o\">...</span>\n\n<span class=\"n\">post_delete</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"n\">ReviewableModel</span><span class=\"o\">.</span><span class=\"n\">delete_reviews</span><span class=\"p\">,</span> <span class=\"n\">sender</span><span class=\"o\">=</span><span class=\"n\">ReviewableModel</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"settings\">\n<h2>Settings</h2>\n<p>All settings are shown below with their defaults.</p>\n<div id=\"review-rating-choices\">\n<h3>REVIEW_RATING_CHOICES</h3>\n<pre><span class=\"n\">REVIEW_RATING_CHOICES</span><span class=\"o\">=</span><span class=\"p\">(</span>\n    <span class=\"p\">(</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"s1\">'1 Star'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"s1\">'2 Star'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"s1\">'3 Star'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"s1\">'4 Star'</span><span class=\"p\">),</span>\n    <span class=\"p\">(</span><span class=\"mi\">5</span><span class=\"p\">,</span> <span class=\"s1\">'5 Star'</span><span class=\"p\">)</span>\n<span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"review-delete-success-url\">\n<h3>REVIEW_DELETE_SUCCESS_URL</h3>\n<pre><span class=\"n\">REVIEW_DELETE_SUCCESS_URL</span><span class=\"o\">=</span><span class=\"s1\">'/'</span>\n</pre>\n</div>\n<div id=\"review-stream-enabled\">\n<h3>REVIEW_STREAM_ENABLED</h3>\n<p>Reviewable can utilise GetStream if required. This would mean reviews are automatically published to your GetStream.io\nfeed. See <a href=\"https://github.com/GetStream/stream-django\" rel=\"nofollow\">https://github.com/GetStream/stream-django</a> for more information</p>\n<pre><span class=\"n\">REVIEW_STREAM_ENABLED</span><span class=\"o\">=</span><span class=\"kc\">False</span>\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 2179773, "releases": {"0.3.9.2": [{"comment_text": "", "digests": {"md5": "885cdeccf4927adc8f125b1ecedfa492", "sha256": "3690c20a44d68198e7c02d68ee8854f8803dbe54528cd6630b2f8bb5794349e7"}, "downloads": -1, "filename": "django_reviewable-0.3.9.2-py2-none-any.whl", "has_sig": false, "md5_digest": "885cdeccf4927adc8f125b1ecedfa492", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10911, "upload_time": "2016-06-21T22:05:51", "upload_time_iso_8601": "2016-06-21T22:05:51.286170Z", "url": "https://files.pythonhosted.org/packages/77/2c/82469238e8cec295bf94242c3c250817c5aa21ab100c69d930a05a277833/django_reviewable-0.3.9.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b8bea2c1971d62aaca062b06e1ffc16", "sha256": "cfdcea00ec43a7b50fdc014a3607d97ffdf1b1f345a696d8899f89b9b293a46f"}, "downloads": -1, "filename": "django-reviewable-0.3.9.2.tar.gz", "has_sig": false, "md5_digest": "4b8bea2c1971d62aaca062b06e1ffc16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7600, "upload_time": "2016-06-21T22:05:46", "upload_time_iso_8601": "2016-06-21T22:05:46.640529Z", "url": "https://files.pythonhosted.org/packages/20/d9/bd51fe46600c3d4d07488e7e6f940fa973b5ef56a875eaf03f61f11c5391/django-reviewable-0.3.9.2.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "885cdeccf4927adc8f125b1ecedfa492", "sha256": "3690c20a44d68198e7c02d68ee8854f8803dbe54528cd6630b2f8bb5794349e7"}, "downloads": -1, "filename": "django_reviewable-0.3.9.2-py2-none-any.whl", "has_sig": false, "md5_digest": "885cdeccf4927adc8f125b1ecedfa492", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 10911, "upload_time": "2016-06-21T22:05:51", "upload_time_iso_8601": "2016-06-21T22:05:51.286170Z", "url": "https://files.pythonhosted.org/packages/77/2c/82469238e8cec295bf94242c3c250817c5aa21ab100c69d930a05a277833/django_reviewable-0.3.9.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4b8bea2c1971d62aaca062b06e1ffc16", "sha256": "cfdcea00ec43a7b50fdc014a3607d97ffdf1b1f345a696d8899f89b9b293a46f"}, "downloads": -1, "filename": "django-reviewable-0.3.9.2.tar.gz", "has_sig": false, "md5_digest": "4b8bea2c1971d62aaca062b06e1ffc16", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 7600, "upload_time": "2016-06-21T22:05:46", "upload_time_iso_8601": "2016-06-21T22:05:46.640529Z", "url": "https://files.pythonhosted.org/packages/20/d9/bd51fe46600c3d4d07488e7e6f940fa973b5ef56a875eaf03f61f11c5391/django-reviewable-0.3.9.2.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:53:57 2020"}