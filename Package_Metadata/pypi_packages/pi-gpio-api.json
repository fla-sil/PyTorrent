{"info": {"author": "Jorge Capona", "author_email": "jcapona@gmail.com", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: MIT License", "Programming Language :: Python :: 3.6", "Topic :: Software Development", "Topic :: Software Development :: Embedded Systems", "Topic :: System"], "description": "Raspberry Pi GPIO Api\n=====================\n\nAPI to access Raspberry Pi GPIO based on Python, Flask & Rpi.GPIO library. The software launches an web API that controls IO pins using the `Rpi.GPIO` library.\n\nThis was meant to be used to remotely control relays, thus, it only sets the outputs as high or low.\n\nThe pins are referenced through their number printed in the board. Further information about pins can be found `here <https://pinout.xyz/>`_.\n\n\nAPI\n---\n\n+--------------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| Route                    | Request | Description                                                                                                                                                                                                                                       |\n+==========================+=========+===================================================================================================================================================================================================================================================+\n| `/api/gpio/`             | GET     | Returns a json object with the status of all pins                                                                                                                                                                                                 |\n+--------------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `/api/gpio/power/<PIN>`  | GET     | Returns a json object with the power pins position and description (5V, 3V3, GND)                                                                                                                                                                 |\n+--------------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `/api/gpio/io/<PIN>`     | GET     | Returns a json object with de description and status for a pin. If no pin number is given, returns the status of all io pins.                                                                                                                     |\n+--------------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n| `/api/gpio/io/<PIN>`     | POST    | Sets up a particular pin. Receives a json object that must have the keys `type` and `value`. `type`  must be a string with either `input` or `output` and `value` must be a boolean, with the status to write to the channel of the request.      |\n+--------------------------+---------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+\n\n\nSample response\n---------------\n\n.. code-block:: sh\n\n    {\n        \"io\": [\n            {\n                \"pin\": 3,\n                \"pin_function\": \"IO\",\n                \"pin_state\": 1\n            },\n           ...],\n\n        \"power_pins\": [\n            {\n                \"pin\": 1,\n                \"pin_function\": \"3V3 Power\"\n            },\n           ...]\n    }\n\n\nInstallation\n------------\n\nLatest release through PyPI:\n\n.. code-block:: sh\n\n    $ pip install pi_gpio_api\n\nDevelopment version:\n\n.. code-block:: sh\n\n    $ git clone git@github.com:jcapona/pi-gpio-api.git\n    $ cd pi-gpio-api\n    $ pip install -e .\n\n\nCLI\n---\n\nThe api can be run as a daemon using the `gpioapi` command in the Raspberry Pi shell.\n\n.. code-block:: sh\n\n    $ gpioapi -h\n    usage: gpioapi [-h] [-H HOST] [-p PORT] command\n\n    GPIO web API controller\n\n    positional arguments:\n      command               Control process: start, stop, restart, status\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      -H HOST, --host HOST  host where the web server will be listening\n      -p PORT, --port PORT  port where the web server will be listening\n\nThis way, the API can be launched through `gpioapi start` and stopped through `gpioapi stop`.\n\n\nUse as a library\n----------------\n\nIn a python shell:\n\n.. code-block:: python\n\n    >>> import pi_gpio_api\n    >>> pi_gpio_api.app.run(host='0.0.0.0', port=5000)\n\nThis will launch a server that listens requests on the given host & port.\n\n\nContribution\n------------\n\nFeel free to open issues, report bugs or open pull requests.\n\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/jcapona/pi-gpio-api", "keywords": "raspberry pi api gpio io", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "pi-gpio-api", "package_url": "https://pypi.org/project/pi-gpio-api/", "platform": "", "project_url": "https://pypi.org/project/pi-gpio-api/", "project_urls": {"Homepage": "https://github.com/jcapona/pi-gpio-api"}, "release_url": "https://pypi.org/project/pi-gpio-api/0.1.1/", "requires_dist": ["click (==6.7)", "daemonocle (==1.0.1)", "docutils (==0.15.2)", "Flask (==0.12.2)", "itsdangerous (==0.24)", "Jinja2 (==2.9.6)", "lockfile (==0.12.2)", "MarkupSafe (==1.0)", "pigpio (==1.35)", "psutil (==5.6.3)", "RPi.GPIO (==0.7.0)", "Werkzeug (==0.12.2)"], "requires_python": "", "summary": "web API to control Raspberry Pi GPIO", "version": "0.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>API to access Raspberry Pi GPIO based on Python, Flask &amp; Rpi.GPIO library. The software launches an web API that controls IO pins using the <cite>Rpi.GPIO</cite> library.</p>\n<p>This was meant to be used to remotely control relays, thus, it only sets the outputs as high or low.</p>\n<p>The pins are referenced through their number printed in the board. Further information about pins can be found <a href=\"https://pinout.xyz/\" rel=\"nofollow\">here</a>.</p>\n<div id=\"api\">\n<h2>API</h2>\n<table>\n<colgroup>\n<col>\n<col>\n<col>\n</colgroup>\n<thead>\n<tr><th>Route</th>\n<th>Request</th>\n<th>Description</th>\n</tr>\n</thead>\n<tbody>\n<tr><td><cite>/api/gpio/</cite></td>\n<td>GET</td>\n<td>Returns a json object with the status of all pins</td>\n</tr>\n<tr><td><cite>/api/gpio/power/&lt;PIN&gt;</cite></td>\n<td>GET</td>\n<td>Returns a json object with the power pins position and description (5V, 3V3, GND)</td>\n</tr>\n<tr><td><cite>/api/gpio/io/&lt;PIN&gt;</cite></td>\n<td>GET</td>\n<td>Returns a json object with de description and status for a pin. If no pin number is given, returns the status of all io pins.</td>\n</tr>\n<tr><td><cite>/api/gpio/io/&lt;PIN&gt;</cite></td>\n<td>POST</td>\n<td>Sets up a particular pin. Receives a json object that must have the keys <cite>type</cite> and <cite>value</cite>. <cite>type</cite>  must be a string with either <cite>input</cite> or <cite>output</cite> and <cite>value</cite> must be a boolean, with the status to write to the channel of the request.</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div id=\"sample-response\">\n<h2>Sample response</h2>\n<pre><span class=\"o\">{</span>\n    <span class=\"s2\">\"io\"</span>: <span class=\"o\">[</span>\n        <span class=\"o\">{</span>\n            <span class=\"s2\">\"pin\"</span>: <span class=\"m\">3</span>,\n            <span class=\"s2\">\"pin_function\"</span>: <span class=\"s2\">\"IO\"</span>,\n            <span class=\"s2\">\"pin_state\"</span>: <span class=\"m\">1</span>\n        <span class=\"o\">}</span>,\n       ...<span class=\"o\">]</span>,\n\n    <span class=\"s2\">\"power_pins\"</span>: <span class=\"o\">[</span>\n        <span class=\"o\">{</span>\n            <span class=\"s2\">\"pin\"</span>: <span class=\"m\">1</span>,\n            <span class=\"s2\">\"pin_function\"</span>: <span class=\"s2\">\"3V3 Power\"</span>\n        <span class=\"o\">}</span>,\n       ...<span class=\"o\">]</span>\n<span class=\"o\">}</span>\n</pre>\n</div>\n<div id=\"installation\">\n<h2>Installation</h2>\n<p>Latest release through PyPI:</p>\n<pre>$ pip install pi_gpio_api\n</pre>\n<p>Development version:</p>\n<pre>$ git clone git@github.com:jcapona/pi-gpio-api.git\n$ <span class=\"nb\">cd</span> pi-gpio-api\n$ pip install -e .\n</pre>\n</div>\n<div id=\"cli\">\n<h2>CLI</h2>\n<p>The api can be run as a daemon using the <cite>gpioapi</cite> command in the Raspberry Pi shell.</p>\n<pre>$ gpioapi -h\nusage: gpioapi <span class=\"o\">[</span>-h<span class=\"o\">]</span> <span class=\"o\">[</span>-H HOST<span class=\"o\">]</span> <span class=\"o\">[</span>-p PORT<span class=\"o\">]</span> <span class=\"nb\">command</span>\n\nGPIO web API controller\n\npositional arguments:\n  <span class=\"nb\">command</span>               Control process: start, stop, restart, status\n\noptional arguments:\n  -h, --help            show this <span class=\"nb\">help</span> message and <span class=\"nb\">exit</span>\n  -H HOST, --host HOST  host where the web server will be listening\n  -p PORT, --port PORT  port where the web server will be listening\n</pre>\n<p>This way, the API can be launched through <cite>gpioapi start</cite> and stopped through <cite>gpioapi stop</cite>.</p>\n</div>\n<div id=\"use-as-a-library\">\n<h2>Use as a library</h2>\n<p>In a python shell:</p>\n<pre><span class=\"o\">&gt;&gt;&gt;</span> <span class=\"kn\">import</span> <span class=\"nn\">pi_gpio_api</span>\n<span class=\"o\">&gt;&gt;&gt;</span> <span class=\"n\">pi_gpio_api</span><span class=\"o\">.</span><span class=\"n\">app</span><span class=\"o\">.</span><span class=\"n\">run</span><span class=\"p\">(</span><span class=\"n\">host</span><span class=\"o\">=</span><span class=\"s1\">'0.0.0.0'</span><span class=\"p\">,</span> <span class=\"n\">port</span><span class=\"o\">=</span><span class=\"mi\">5000</span><span class=\"p\">)</span>\n</pre>\n<p>This will launch a server that listens requests on the given host &amp; port.</p>\n</div>\n<div id=\"contribution\">\n<h2>Contribution</h2>\n<p>Feel free to open issues, report bugs or open pull requests.</p>\n</div>\n\n          </div>"}, "last_serial": 5755051, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "de8375ba285bbbfbc5ea4e08e811377d", "sha256": "5457e4ddd302e0e37579ce8dd0584d079183d463d19a484656f89ec7cbf91f9a"}, "downloads": -1, "filename": "pi_gpio_api-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "de8375ba285bbbfbc5ea4e08e811377d", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7821, "upload_time": "2019-08-28T20:13:15", "upload_time_iso_8601": "2019-08-28T20:13:15.238931Z", "url": "https://files.pythonhosted.org/packages/f3/13/75979e0e80fe139197609f9e96d4ba7997832588e3f582c0b817baaf663e/pi_gpio_api-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2aea0b5a17426f802a32ea5b2fb4cf5a", "sha256": "8686d1aff46a77b88b6a728cb61cee61ba9581da6774ff84695d4fa639dbc691"}, "downloads": -1, "filename": "pi-gpio_api-0.1.0.tar.gz", "has_sig": false, "md5_digest": "2aea0b5a17426f802a32ea5b2fb4cf5a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6698, "upload_time": "2019-08-28T20:13:17", "upload_time_iso_8601": "2019-08-28T20:13:17.549625Z", "url": "https://files.pythonhosted.org/packages/19/16/7f99673d7dec40df5e7ec429ae752bf66185a0ea9ab902af442b54f8508b/pi-gpio_api-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "73d9d06f5af0884bbcf8943d3bbedeab", "sha256": "4d51381383cd4af98888dae409c62d83af1cea8263e464ced58345605da9c09d"}, "downloads": -1, "filename": "pi_gpio_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73d9d06f5af0884bbcf8943d3bbedeab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7833, "upload_time": "2019-08-29T15:56:40", "upload_time_iso_8601": "2019-08-29T15:56:40.207538Z", "url": "https://files.pythonhosted.org/packages/7f/90/40cc7fd0eebadc90ddd773fdc01e71e1c21249641f3d7adbe5657d156909/pi_gpio_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d277d67b59c7abd120fd3aee2328ce", "sha256": "821a32299a48d282a201c1b8d5ae1b7e13486fb34c7a1f5c98934f9814c6bc2f"}, "downloads": -1, "filename": "pi-gpio_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66d277d67b59c7abd120fd3aee2328ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6721, "upload_time": "2019-08-29T15:56:44", "upload_time_iso_8601": "2019-08-29T15:56:44.182695Z", "url": "https://files.pythonhosted.org/packages/f9/24/b6ff5c791b736316cb3b5de5105320b3879d5299bd482c23110e1ccbec93/pi-gpio_api-0.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "73d9d06f5af0884bbcf8943d3bbedeab", "sha256": "4d51381383cd4af98888dae409c62d83af1cea8263e464ced58345605da9c09d"}, "downloads": -1, "filename": "pi_gpio_api-0.1.1-py3-none-any.whl", "has_sig": false, "md5_digest": "73d9d06f5af0884bbcf8943d3bbedeab", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 7833, "upload_time": "2019-08-29T15:56:40", "upload_time_iso_8601": "2019-08-29T15:56:40.207538Z", "url": "https://files.pythonhosted.org/packages/7f/90/40cc7fd0eebadc90ddd773fdc01e71e1c21249641f3d7adbe5657d156909/pi_gpio_api-0.1.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "66d277d67b59c7abd120fd3aee2328ce", "sha256": "821a32299a48d282a201c1b8d5ae1b7e13486fb34c7a1f5c98934f9814c6bc2f"}, "downloads": -1, "filename": "pi-gpio_api-0.1.1.tar.gz", "has_sig": false, "md5_digest": "66d277d67b59c7abd120fd3aee2328ce", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6721, "upload_time": "2019-08-29T15:56:44", "upload_time_iso_8601": "2019-08-29T15:56:44.182695Z", "url": "https://files.pythonhosted.org/packages/f9/24/b6ff5c791b736316cb3b5de5105320b3879d5299bd482c23110e1ccbec93/pi-gpio_api-0.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 02:54:51 2020"}