{"info": {"author": "Flight Data Services Ltd", "author_email": "developers@flightdataservices.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Environment :: Console", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Library or Lesser General Public License (LGPL)", "Operating System :: OS Independent", "Programming Language :: Python :: 2.5", "Programming Language :: Python :: 2.6", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: Implementation :: CPython", "Topic :: Software Development"], "description": "Introduction\r\n============\r\n\r\nPyCPUID reads the information available from the CPUID assembly instruction and\r\nmakes it available to any Python program.\r\n\r\nIt could be used to decide on some codepath based on whether the target computer\r\nsupports SSE2. \r\n::\r\n\r\n    import pycpuid\r\n    if pycpuid.HAS_SSE2:\r\n        import foobar_sse2 as foobar\r\n    else:\r\n        import foobar\r\n\r\nIt is not the goal of PyCPUID to provide a full report of all CPUID information\r\navailable. It's merely a way to get raw access to the machine instruction from\r\nwithin Python. Some functions are provided for translation to something human\r\nreadable, but this is far from complete. Full details on how to interpret the\r\nraw data can be found in the application notes of `Intel`_ and `AMD`_.\r\n\r\nInstallation\r\n------------\r\n\r\nPackage requires ``pip`` for installation.\r\n::\r\n\r\n    pip install PyCPUID\r\n\r\nIf you're doing this on Windows you'll need to make sure you have a C++ compiler\r\ninstalled and properly configured.\r\n\r\nUsing PyCPUID\r\n-------------\r\n\r\nThere's not much to it, really. PyCPUID is just a bunch of module constants.\r\nJust import the module and access the constants. The ``HAS_FOOBAR`` constants\r\nare Boolean flags to indicate whether the feature is available. The function\r\n``features()`` returns a list of all the available features as strings. There\r\nare some other functions like ``vendor()`` and ``brand_string()`` you can use to\r\nidentify the CPU.\r\n::\r\n\r\n    import pycpuid\r\n    print \"has SSE2:\", pycpuid.HAS_SSE2\r\n    print \"all availabe features:\", pycpuid.features()\r\n    print \"brand string:\", pycpuid.brand_string()\r\n\r\nGet the Code\r\n------------\r\n\r\n* https://github.com/FlightDataServices/PyCPUID\r\n\r\n.. _Flight Data Services: http://www.flightdataservices.com/\r\n.. _Intel: http://www.intel.com/assets/pdf/appnote/241618.pdf\r\n.. _AMD: http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25481.pdf\r\n\r\nChanges\r\n=======\r\n\r\n0.4\r\n---\r\n\r\n* Mostly PEP8 compliant.\r\n\r\n0.3\r\n---\r\n\r\n* Should now compile on 32-bit and 64-bit platforms.\r\n* Updated packaging and now uses SetupFixer.\r\n* Added documentation based on the `original text`_ from Bram.\r\n\r\n0.2\r\n---\r\n\r\n* The feature abbreviations now resemble the ones in the Intel and AMD \r\n  documentation.\r\n* ``features()`` is now a function and returns a list of strings, instead of \r\n  being a comma separated string.\r\n* Added some functions like ``vendor()`` and ``brand_string()`` as handy \r\n  wrappers.\r\n* PyCPUID is now a combination of a pure python module ``pycpuid.py`` and an \r\n  extension ``_pycpuid.c``. The extension module is only responsible for the \r\n  actual ``cpuid`` call. All the fancy wrapper bits are implemented in Python.\r\n* Added gcc support. Using ``__cpuid`` intrinsic on MSVC to support x64.\r\n\r\n0.1\r\n---\r\n\r\n* Initial release.\r\n\r\n.. _original text: http://www.bramz.net/projects-code/pycpuid/\r\n\r\nTo Do\r\n=====\r\n\r\n* Hopefully, nothing.\r\n\r\nCredits\r\n=======\r\n\r\nPyCPUID was written by Bram de Greve <bram.degreve@bramz.net> and is maintained \r\nby Flight Data Services, Ltd <developers@flightdataservices.com>.", "description_content_type": null, "docs_url": "https://pythonhosted.org/PyCPUID/", "download_url": "https://github.com/FlightDataServices/PyCPUID", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "http://pypi.python.org/pypi/PyCPUID", "keywords": "cpuid", "license": "GNU Library or Lesser General Public License (LGPL)", "maintainer": "", "maintainer_email": "", "name": "PyCPUID", "package_url": "https://pypi.org/project/PyCPUID/", "platform": "OS Independent", "project_url": "https://pypi.org/project/PyCPUID/", "project_urls": {"Download": "https://github.com/FlightDataServices/PyCPUID", "Homepage": "http://pypi.python.org/pypi/PyCPUID"}, "release_url": "https://pypi.org/project/PyCPUID/0.4/", "requires_dist": null, "requires_python": null, "summary": "CPUID powered by Python.", "version": "0.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <div id=\"introduction\">\n<h2>Introduction</h2>\n<p>PyCPUID reads the information available from the CPUID assembly instruction and\nmakes it available to any Python program.</p>\n<p>It could be used to decide on some codepath based on whether the target computer\nsupports SSE2.</p>\n<pre>import pycpuid\nif pycpuid.HAS_SSE2:\n    import foobar_sse2 as foobar\nelse:\n    import foobar\n</pre>\n<p>It is not the goal of PyCPUID to provide a full report of all CPUID information\navailable. It\u2019s merely a way to get raw access to the machine instruction from\nwithin Python. Some functions are provided for translation to something human\nreadable, but this is far from complete. Full details on how to interpret the\nraw data can be found in the application notes of <a href=\"http://www.intel.com/assets/pdf/appnote/241618.pdf\" rel=\"nofollow\">Intel</a> and <a href=\"http://www.amd.com/us-en/assets/content_type/white_papers_and_tech_docs/25481.pdf\" rel=\"nofollow\">AMD</a>.</p>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>Package requires <tt>pip</tt> for installation.</p>\n<pre>pip install PyCPUID\n</pre>\n<p>If you\u2019re doing this on Windows you\u2019ll need to make sure you have a C++ compiler\ninstalled and properly configured.</p>\n</div>\n<div id=\"using-pycpuid\">\n<h3>Using PyCPUID</h3>\n<p>There\u2019s not much to it, really. PyCPUID is just a bunch of module constants.\nJust import the module and access the constants. The <tt>HAS_FOOBAR</tt> constants\nare Boolean flags to indicate whether the feature is available. The function\n<tt>features()</tt> returns a list of all the available features as strings. There\nare some other functions like <tt>vendor()</tt> and <tt>brand_string()</tt> you can use to\nidentify the CPU.</p>\n<pre>import pycpuid\nprint \"has SSE2:\", pycpuid.HAS_SSE2\nprint \"all availabe features:\", pycpuid.features()\nprint \"brand string:\", pycpuid.brand_string()\n</pre>\n</div>\n<div id=\"get-the-code\">\n<h3>Get the Code</h3>\n<ul>\n<li><a href=\"https://github.com/FlightDataServices/PyCPUID\" rel=\"nofollow\">https://github.com/FlightDataServices/PyCPUID</a></li>\n</ul>\n</div>\n</div>\n<div id=\"changes\">\n<h2>Changes</h2>\n<div id=\"id1\">\n<h3>0.4</h3>\n<ul>\n<li>Mostly PEP8 compliant.</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.3</h3>\n<ul>\n<li>Should now compile on 32-bit and 64-bit platforms.</li>\n<li>Updated packaging and now uses SetupFixer.</li>\n<li>Added documentation based on the <a href=\"http://www.bramz.net/projects-code/pycpuid/\" rel=\"nofollow\">original text</a> from Bram.</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.2</h3>\n<ul>\n<li>The feature abbreviations now resemble the ones in the Intel and AMD\ndocumentation.</li>\n<li><tt>features()</tt> is now a function and returns a list of strings, instead of\nbeing a comma separated string.</li>\n<li>Added some functions like <tt>vendor()</tt> and <tt>brand_string()</tt> as handy\nwrappers.</li>\n<li>PyCPUID is now a combination of a pure python module <tt>pycpuid.py</tt> and an\nextension <tt>_pycpuid.c</tt>. The extension module is only responsible for the\nactual <tt>cpuid</tt> call. All the fancy wrapper bits are implemented in Python.</li>\n<li>Added gcc support. Using <tt>__cpuid</tt> intrinsic on MSVC to support x64.</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1</h3>\n<ul>\n<li>Initial release.</li>\n</ul>\n</div>\n</div>\n<div id=\"to-do\">\n<h2>To Do</h2>\n<ul>\n<li>Hopefully, nothing.</li>\n</ul>\n</div>\n<div id=\"credits\">\n<h2>Credits</h2>\n<p>PyCPUID was written by Bram de Greve &lt;<a href=\"mailto:bram.degreve%40bramz.net\">bram<span>.</span>degreve<span>@</span>bramz<span>.</span>net</a>&gt; and is maintained\nby Flight Data Services, Ltd &lt;<a href=\"mailto:developers%40flightdataservices.com\">developers<span>@</span>flightdataservices<span>.</span>com</a>&gt;.</p>\n</div>\n\n          </div>"}, "last_serial": 785240, "releases": {"0.3": [{"comment_text": "", "digests": {"md5": "a461e2279c2ae06482555c623cdab421", "sha256": "953e9fb89d4618a35effdc1d18aea411232862e22f5dc65c1f432daafc09b2b5"}, "downloads": -1, "filename": "PyCPUID-0.3.zip", "has_sig": false, "md5_digest": "a461e2279c2ae06482555c623cdab421", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70348, "upload_time": "2012-03-22T16:49:28", "upload_time_iso_8601": "2012-03-22T16:49:28.212389Z", "url": "https://files.pythonhosted.org/packages/fb/a3/695f11994c31010f5f669a3ec14adc823d52100d0c2d1ecf3bf5e36d3b41/PyCPUID-0.3.zip", "yanked": false}], "0.4": [{"comment_text": "", "digests": {"md5": "b31df680ff04462a606b1e8fb82e4e48", "sha256": "5c067375aaf3c043d827b4a405c588eb89fa5f728cd3ff3cbd068970e96a5aa3"}, "downloads": -1, "filename": "PyCPUID-0.4.zip", "has_sig": false, "md5_digest": "b31df680ff04462a606b1e8fb82e4e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70415, "upload_time": "2012-03-22T17:01:02", "upload_time_iso_8601": "2012-03-22T17:01:02.841307Z", "url": "https://files.pythonhosted.org/packages/33/39/119c45433d62dcd60cb618bdeaac1064bb983c30b458a62abef7c679dc3d/PyCPUID-0.4.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b31df680ff04462a606b1e8fb82e4e48", "sha256": "5c067375aaf3c043d827b4a405c588eb89fa5f728cd3ff3cbd068970e96a5aa3"}, "downloads": -1, "filename": "PyCPUID-0.4.zip", "has_sig": false, "md5_digest": "b31df680ff04462a606b1e8fb82e4e48", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 70415, "upload_time": "2012-03-22T17:01:02", "upload_time_iso_8601": "2012-03-22T17:01:02.841307Z", "url": "https://files.pythonhosted.org/packages/33/39/119c45433d62dcd60cb618bdeaac1064bb983c30b458a62abef7c679dc3d/PyCPUID-0.4.zip", "yanked": false}], "timestamp": "Fri May  8 03:07:50 2020"}