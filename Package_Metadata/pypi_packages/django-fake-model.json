{"info": {"author": "Kirill Ermolov", "author_email": "erm0l0v@ya.ru", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Framework :: Django", "Intended Audience :: Developers", "License :: OSI Approved :: BSD License", "Natural Language :: English", "Programming Language :: Python :: 2", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.3", "Programming Language :: Python :: 3.4"], "description": "=============================\ndjango-fake-model\n=============================\n\n.. image:: https://badge.fury.io/py/django-fake-model.png\n    :target: https://badge.fury.io/py/django-fake-model\n\n.. image:: https://travis-ci.org/erm0l0v/django-fake-model.png?branch=master\n    :target: https://travis-ci.org/erm0l0v/django-fake-model\n\n.. image:: https://landscape.io/github/erm0l0v/django-fake-model/master/landscape.svg?style=flat\n   :target: https://landscape.io/github/erm0l0v/django-fake-model/master\n   :alt: Code Health\n\n.. image:: https://api.codacy.com/project/badge/235f71efbf3144178975bb3eb86964c8\n    :target: https://www.codacy.com/app/erm0l0v/django-fake-model\n\n.. image:: https://requires.io/github/erm0l0v/django-fake-model/requirements.svg?branch=master\n     :target: https://requires.io/github/erm0l0v/django-fake-model/requirements/?branch=master\n     :alt: Requirements Status\n\n.. image:: https://codecov.io/github/erm0l0v/django-fake-model/coverage.svg?branch=master\n    :target: https://codecov.io/github/erm0l0v/django-fake-model?branch=master\n\nSimple library for creating fake models in the unit tests.\n\nThis simple library allows to create fake models in your test without migrations, test apps and test tables in your base. All tables that you need will created/removed during the test.\n\nInstall\n-------\n\nInstall django-fake-model::\n\n    pip install django-fake-model\n\nQuickstart\n----------\n\nJust create a model in any file (Ex: in your test) and add decorator **@YourModel.fake_me** to test method or test class.\n\n.. code:: python\n\n    from django_fake_model import models as f\n    from django.db import models\n    from django.test import TestCase, TransactionTestCase\n\n\n    class MyFakeModel(f.FakeModel):\n\n        name = models.CharField(max_length=100)\n\n\n    @MyFakeModel.fake_me\n    class MyFakeModelTests(TestCase):\n\n        def test_create_model(self):\n            MyFakeModel.objects.create(name='123')\n            model = MyFakeModel.objects.get(name='123')\n            self.assertEqual(model.name, '123')\n\n\n    class MyFakeModelFunctionTest(TestCase):\n\n        @MyFakeModel.fake_me\n        def test_create_model(self):\n            MyFakeModel.objects.create(name='123')\n            model = MyFakeModel.objects.get(name='123')\n            self.assertEqual(model.name, '123')\n\n\n    class RelatedModel(f.FakeModel):\n        text = models.CharField(max_length=400)\n\n\n    class NyModel(f.FakeModel):\n        text = models.CharField(max_length=400)\n        related_model = models.ForeignKey(RelatedModel)\n\n\n    @NyModel.fake_me\n    @RelatedModel.fake_me\n    class TestRelatedModelsClassDecorator(TransactionTestCase):\n\n        def test_create_models(self):\n            related_model = RelatedModel()\n            related_model.text = 'qwerty'\n            related_model.save()\n            my_model = NyModel()\n            my_model.test = 'qwerty'\n            my_model.related_model = related_model\n            my_model.save()\n            self.assertIsNotNone(my_model)\n            self.assertIsNotNone(related_model)\n\n\nDevelopment:\n------------\n\nTo develop on this locally with `Docker`_, install the Docker Engine and\n`Docker Compose`_. Then you can build the Docker image and run the tests\non all tox activities(this also uses a shared pip cache to reduce download\ntimes)::\n\n    docker-compose up -d pg mysql\n    docker-compose run --rm test\n\nIf you wanna run just one Tox activity you can specify that as well::\n\n    docker-compose run --rm test tox -e py35-dj19-mysql-unittest\n\nIf you add any dependencies or change the tox configuration, you have\nto rebuild the image::\n\n    docker-compose build\n\nIt will share this folder with the Docker containers, so that\n\n\n.. _Docker: https://www.docker.com/\n.. _Docker Compose: https://docs.docker.com/compose/\n\n\nCookiecutter Tools Used in Making This Package\n----------------------------------------------\n\n*  cookiecutter\n*  cookiecutter-djangopackage\n\n\n\n\nHistory\n-------\n\n0.1.4 (2016-02-08)\n++++++++++++++++++\n\n* Fix class decorator `fake_me` for nose tests\n\n\n0.1.3 (2015-12-23)\n++++++++++++++++++\n\n* Fix issue #1 Multiple Fake Models. Thanks to Saul Shanabrook (@saulshanabrook)\n* Add support for developing with Docker. Thanks to Saul Shanabrook again\n\n0.1.2 (2015-11-13)\n++++++++++++++++++\n\n* Added Django 1.9 support\n* Added travis config generator\n* Added nose tests\n* Remove tests for Django master\n\n0.1.1 (2015-09-28)\n++++++++++++++++++\n\n* Added tests with different databases.\n\n0.1.0 (2015-09-16)\n++++++++++++++++++\n\n* First release on PyPI.", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/erm0l0v/django-fake-model", "keywords": "django-fake-model", "license": "BSD", "maintainer": null, "maintainer_email": null, "name": "django-fake-model", "package_url": "https://pypi.org/project/django-fake-model/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/django-fake-model/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/erm0l0v/django-fake-model"}, "release_url": "https://pypi.org/project/django-fake-model/0.1.4/", "requires_dist": null, "requires_python": null, "summary": "Simple library for creating fake models in the unit tests.", "version": "0.1.4", "yanked": false, "html_description": "<div class=\"project-description\">\n            <a href=\"https://badge.fury.io/py/django-fake-model\" rel=\"nofollow\"><img alt=\"https://badge.fury.io/py/django-fake-model.png\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3b42d912895ad5119939883a324596b52a7f002e/68747470733a2f2f62616467652e667572792e696f2f70792f646a616e676f2d66616b652d6d6f64656c2e706e67\"></a>\n<a href=\"https://travis-ci.org/erm0l0v/django-fake-model\" rel=\"nofollow\"><img alt=\"https://travis-ci.org/erm0l0v/django-fake-model.png?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/ae4f3d7ab0f3e0fe3dfc65acea36090fa5c552c6/68747470733a2f2f7472617669732d63692e6f72672f65726d306c30762f646a616e676f2d66616b652d6d6f64656c2e706e673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://landscape.io/github/erm0l0v/django-fake-model/master\" rel=\"nofollow\"><img alt=\"Code Health\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/96f8d789ee1ca449b4da9aab90bd5832294ea6c6/68747470733a2f2f6c616e6473636170652e696f2f6769746875622f65726d306c30762f646a616e676f2d66616b652d6d6f64656c2f6d61737465722f6c616e6473636170652e7376673f7374796c653d666c6174\"></a>\n<a href=\"https://www.codacy.com/app/erm0l0v/django-fake-model\" rel=\"nofollow\"><img alt=\"https://api.codacy.com/project/badge/235f71efbf3144178975bb3eb86964c8\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/eeee4dac755f90aca40b28a3bb7f31f405708fd5/68747470733a2f2f6170692e636f646163792e636f6d2f70726f6a6563742f62616467652f3233356637316566626633313434313738393735626233656238363936346338\"></a>\n<a href=\"https://requires.io/github/erm0l0v/django-fake-model/requirements/?branch=master\" rel=\"nofollow\"><img alt=\"Requirements Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/c0f5271757819f9c59d3973f60d8689764988474/68747470733a2f2f72657175697265732e696f2f6769746875622f65726d306c30762f646a616e676f2d66616b652d6d6f64656c2f726571756972656d656e74732e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://codecov.io/github/erm0l0v/django-fake-model?branch=master\" rel=\"nofollow\"><img alt=\"https://codecov.io/github/erm0l0v/django-fake-model/coverage.svg?branch=master\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2d78fe10a46d50d3c7404deddbc6f7a3b86ded60/68747470733a2f2f636f6465636f762e696f2f6769746875622f65726d306c30762f646a616e676f2d66616b652d6d6f64656c2f636f7665726167652e7376673f6272616e63683d6d6173746572\"></a>\n<p>Simple library for creating fake models in the unit tests.</p>\n<p>This simple library allows to create fake models in your test without migrations, test apps and test tables in your base. All tables that you need will created/removed during the test.</p>\n<div id=\"install\">\n<h2>Install</h2>\n<p>Install django-fake-model:</p>\n<pre>pip install django-fake-model\n</pre>\n</div>\n<div id=\"quickstart\">\n<h2>Quickstart</h2>\n<p>Just create a model in any file (Ex: in your test) and add decorator <strong>@YourModel.fake_me</strong> to test method or test class.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">django_fake_model</span> <span class=\"kn\">import</span> <span class=\"n\">models</span> <span class=\"k\">as</span> <span class=\"n\">f</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.db</span> <span class=\"kn\">import</span> <span class=\"n\">models</span>\n<span class=\"kn\">from</span> <span class=\"nn\">django.test</span> <span class=\"kn\">import</span> <span class=\"n\">TestCase</span><span class=\"p\">,</span> <span class=\"n\">TransactionTestCase</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFakeModel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">FakeModel</span><span class=\"p\">):</span>\n\n    <span class=\"n\">name</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">fake_me</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyFakeModelTests</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_create_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'123'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">MyFakeModelFunctionTest</span><span class=\"p\">(</span><span class=\"n\">TestCase</span><span class=\"p\">):</span>\n\n    <span class=\"nd\">@MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">fake_me</span>\n    <span class=\"k\">def</span> <span class=\"nf\">test_create_model</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">create</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">)</span>\n        <span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">MyFakeModel</span><span class=\"o\">.</span><span class=\"n\">objects</span><span class=\"o\">.</span><span class=\"n\">get</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'123'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertEqual</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"o\">.</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"s1\">'123'</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">RelatedModel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">FakeModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n\n\n<span class=\"k\">class</span> <span class=\"nc\">NyModel</span><span class=\"p\">(</span><span class=\"n\">f</span><span class=\"o\">.</span><span class=\"n\">FakeModel</span><span class=\"p\">):</span>\n    <span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">CharField</span><span class=\"p\">(</span><span class=\"n\">max_length</span><span class=\"o\">=</span><span class=\"mi\">400</span><span class=\"p\">)</span>\n    <span class=\"n\">related_model</span> <span class=\"o\">=</span> <span class=\"n\">models</span><span class=\"o\">.</span><span class=\"n\">ForeignKey</span><span class=\"p\">(</span><span class=\"n\">RelatedModel</span><span class=\"p\">)</span>\n\n\n<span class=\"nd\">@NyModel</span><span class=\"o\">.</span><span class=\"n\">fake_me</span>\n<span class=\"nd\">@RelatedModel</span><span class=\"o\">.</span><span class=\"n\">fake_me</span>\n<span class=\"k\">class</span> <span class=\"nc\">TestRelatedModelsClassDecorator</span><span class=\"p\">(</span><span class=\"n\">TransactionTestCase</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"nf\">test_create_models</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"n\">related_model</span> <span class=\"o\">=</span> <span class=\"n\">RelatedModel</span><span class=\"p\">()</span>\n        <span class=\"n\">related_model</span><span class=\"o\">.</span><span class=\"n\">text</span> <span class=\"o\">=</span> <span class=\"s1\">'qwerty'</span>\n        <span class=\"n\">related_model</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"n\">my_model</span> <span class=\"o\">=</span> <span class=\"n\">NyModel</span><span class=\"p\">()</span>\n        <span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"s1\">'qwerty'</span>\n        <span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">related_model</span> <span class=\"o\">=</span> <span class=\"n\">related_model</span>\n        <span class=\"n\">my_model</span><span class=\"o\">.</span><span class=\"n\">save</span><span class=\"p\">()</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">my_model</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">assertIsNotNone</span><span class=\"p\">(</span><span class=\"n\">related_model</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"development\">\n<h2>Development:</h2>\n<p>To develop on this locally with <a href=\"https://www.docker.com/\" rel=\"nofollow\">Docker</a>, install the Docker Engine and\n<a href=\"https://docs.docker.com/compose/\" rel=\"nofollow\">Docker Compose</a>. Then you can build the Docker image and run the tests\non all tox activities(this also uses a shared pip cache to reduce download\ntimes):</p>\n<pre>docker-compose up -d pg mysql\ndocker-compose run --rm test\n</pre>\n<p>If you wanna run just one Tox activity you can specify that as well:</p>\n<pre>docker-compose run --rm test tox -e py35-dj19-mysql-unittest\n</pre>\n<p>If you add any dependencies or change the tox configuration, you have\nto rebuild the image:</p>\n<pre>docker-compose build\n</pre>\n<p>It will share this folder with the Docker containers, so that</p>\n</div>\n<div id=\"cookiecutter-tools-used-in-making-this-package\">\n<h2>Cookiecutter Tools Used in Making This Package</h2>\n<ul>\n<li>cookiecutter</li>\n<li>cookiecutter-djangopackage</li>\n</ul>\n</div>\n<div id=\"history\">\n<h2>History</h2>\n<div id=\"id1\">\n<h3>0.1.4 (2016-02-08)</h3>\n<ul>\n<li>Fix class decorator <cite>fake_me</cite> for nose tests</li>\n</ul>\n</div>\n<div id=\"id2\">\n<h3>0.1.3 (2015-12-23)</h3>\n<ul>\n<li>Fix issue #1 Multiple Fake Models. Thanks to Saul Shanabrook (@saulshanabrook)</li>\n<li>Add support for developing with Docker. Thanks to Saul Shanabrook again</li>\n</ul>\n</div>\n<div id=\"id3\">\n<h3>0.1.2 (2015-11-13)</h3>\n<ul>\n<li>Added Django 1.9 support</li>\n<li>Added travis config generator</li>\n<li>Added nose tests</li>\n<li>Remove tests for Django master</li>\n</ul>\n</div>\n<div id=\"id4\">\n<h3>0.1.1 (2015-09-28)</h3>\n<ul>\n<li>Added tests with different databases.</li>\n</ul>\n</div>\n<div id=\"id5\">\n<h3>0.1.0 (2015-09-16)</h3>\n<ul>\n<li>First release on PyPI.</li>\n</ul>\n</div>\n</div>\n\n          </div>"}, "last_serial": 1945413, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "3715793156e79fe55e3feac3ecc96737", "sha256": "11d6a92e33112f060fc27995ab219138a3d845aacc57ca913708d5cdf19cd95b"}, "downloads": -1, "filename": "django_fake_model-0.1.0-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "3715793156e79fe55e3feac3ecc96737", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 4693, "upload_time": "2015-09-16T12:36:43", "upload_time_iso_8601": "2015-09-16T12:36:43.595411Z", "url": "https://files.pythonhosted.org/packages/ff/c0/1361346b8aabedcfc9b7b3c888e3e9eb4a10430c2c8589a51c626deea3b9/django_fake_model-0.1.0-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "50eb03b6bf8a4a1e993c22b9bb527fef", "sha256": "89299bd5ee61a41e652f623785edb6aa285c3cff271e1c3cfd7ed4c7dfbf467a"}, "downloads": -1, "filename": "django-fake-model-0.1.0.tar.gz", "has_sig": false, "md5_digest": "50eb03b6bf8a4a1e993c22b9bb527fef", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3888, "upload_time": "2015-09-16T12:36:37", "upload_time_iso_8601": "2015-09-16T12:36:37.309175Z", "url": "https://files.pythonhosted.org/packages/9d/fb/85d914694bd8982d85cbf53f15fff5c15c4a4a40c18b416de84857c93e90/django-fake-model-0.1.0.tar.gz", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "1a602e4a659564a935dd16166660e6d6", "sha256": "d2f43723744eff2079563fe78d6859429aefa606aa3ad96deb3e81274a2df528"}, "downloads": -1, "filename": "django_fake_model-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "1a602e4a659564a935dd16166660e6d6", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5237, "upload_time": "2015-09-28T13:28:17", "upload_time_iso_8601": "2015-09-28T13:28:17.563514Z", "url": "https://files.pythonhosted.org/packages/70/dc/25f0ba8c9241c04618bc7e3eb38d85f2f55da4a4a0b0c256f6f9f73fe99c/django_fake_model-0.1.1-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "5083e6239f4cd7aefbd120ebeb261bd7", "sha256": "5d72e7b278445556829e8108fb95434caaf8875cc73991802e2c8c081e1b1734"}, "downloads": -1, "filename": "django-fake-model-0.1.1.tar.gz", "has_sig": false, "md5_digest": "5083e6239f4cd7aefbd120ebeb261bd7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4317, "upload_time": "2015-09-28T13:27:59", "upload_time_iso_8601": "2015-09-28T13:27:59.612718Z", "url": "https://files.pythonhosted.org/packages/b2/49/2430049bc366d1d4f9e6fa62c8f7dc92ea908772e7a0f9ef4388f3c68044/django-fake-model-0.1.1.tar.gz", "yanked": false}], "0.1.2": [{"comment_text": "", "digests": {"md5": "9aefe0ed2446e817910226409cd01698", "sha256": "c3bf10bacd7ef64f5051996e0188a70b3d8bc0336e0debff678889028b17bf7d"}, "downloads": -1, "filename": "django_fake_model-0.1.2-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "9aefe0ed2446e817910226409cd01698", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 5755, "upload_time": "2015-11-13T13:00:37", "upload_time_iso_8601": "2015-11-13T13:00:37.224804Z", "url": "https://files.pythonhosted.org/packages/e3/99/21f9f74a6a1c1285d5df1ebb51f01d69b452f69b0fdb571bee92701320cf/django_fake_model-0.1.2-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "bbb2f3fac61972c1c0da88e8a4600fa7", "sha256": "200a91bd359df5b6282c0a5e2bec207dd530e6b447a1993d7ce71b9b684aa509"}, "downloads": -1, "filename": "django-fake-model-0.1.2.tar.gz", "has_sig": false, "md5_digest": "bbb2f3fac61972c1c0da88e8a4600fa7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5118, "upload_time": "2015-11-13T13:00:16", "upload_time_iso_8601": "2015-11-13T13:00:16.147011Z", "url": "https://files.pythonhosted.org/packages/21/ce/5d3fa010e96a361e9e1edaee9fa7031970318bde64d9d31fe4b9deb0b7b3/django-fake-model-0.1.2.tar.gz", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "891f978406d6ab70f3296be386261f7f", "sha256": "ab884353ab3ebd7f962b5c1686cd9056d84ed1f01ba597a1a2b2ac2211aaffd9"}, "downloads": -1, "filename": "django_fake_model-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "891f978406d6ab70f3296be386261f7f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7077, "upload_time": "2015-12-23T11:32:06", "upload_time_iso_8601": "2015-12-23T11:32:06.700753Z", "url": "https://files.pythonhosted.org/packages/f6/e7/9505601257b4d4b5344e57775fcd031a265ca7c8f636453e2adfefdd4dbb/django_fake_model-0.1.3-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "24fb8775c7b905406321ca8e7dc5d69a", "sha256": "af7b82637aad3fa44757edef544ca49c598971254a0a62ce29f9dd4a1e88aeae"}, "downloads": -1, "filename": "django-fake-model-0.1.3.tar.gz", "has_sig": false, "md5_digest": "24fb8775c7b905406321ca8e7dc5d69a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6035, "upload_time": "2015-12-23T11:30:57", "upload_time_iso_8601": "2015-12-23T11:30:57.603154Z", "url": "https://files.pythonhosted.org/packages/7e/36/f29a425c4b5f0a3349ed51257d0d63a0b80e28d154f9b90e6d35f19b837e/django-fake-model-0.1.3.tar.gz", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "8e79c7aca2f56571d3261e1aba4ddd8f", "sha256": "5f5bd31a8825cb561f6df1dc2d8efbe1ba46f2082aa584d6438862b3e040e5f6"}, "downloads": -1, "filename": "django_fake_model-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e79c7aca2f56571d3261e1aba4ddd8f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7122, "upload_time": "2016-02-08T11:41:12", "upload_time_iso_8601": "2016-02-08T11:41:12.846204Z", "url": "https://files.pythonhosted.org/packages/27/bd/3e9132c29a5d805e7bfac37940072c2c1e1f5cac892707696863e3895fd4/django_fake_model-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4df725c9c26b96b47706189134add16b", "sha256": "44940dea141be48ccffeab917c69de3a70c98cb45c3a2a224c2a800b57913965"}, "downloads": -1, "filename": "django-fake-model-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4df725c9c26b96b47706189134add16b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6092, "upload_time": "2016-02-08T11:39:25", "upload_time_iso_8601": "2016-02-08T11:39:25.149652Z", "url": "https://files.pythonhosted.org/packages/0f/e1/8f330ca5dfb930850b1f232a0eaba6576befa890ac3e7e4ea950b54ad411/django-fake-model-0.1.4.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "8e79c7aca2f56571d3261e1aba4ddd8f", "sha256": "5f5bd31a8825cb561f6df1dc2d8efbe1ba46f2082aa584d6438862b3e040e5f6"}, "downloads": -1, "filename": "django_fake_model-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "8e79c7aca2f56571d3261e1aba4ddd8f", "packagetype": "bdist_wheel", "python_version": "2.7", "requires_python": null, "size": 7122, "upload_time": "2016-02-08T11:41:12", "upload_time_iso_8601": "2016-02-08T11:41:12.846204Z", "url": "https://files.pythonhosted.org/packages/27/bd/3e9132c29a5d805e7bfac37940072c2c1e1f5cac892707696863e3895fd4/django_fake_model-0.1.4-py2.py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "4df725c9c26b96b47706189134add16b", "sha256": "44940dea141be48ccffeab917c69de3a70c98cb45c3a2a224c2a800b57913965"}, "downloads": -1, "filename": "django-fake-model-0.1.4.tar.gz", "has_sig": false, "md5_digest": "4df725c9c26b96b47706189134add16b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6092, "upload_time": "2016-02-08T11:39:25", "upload_time_iso_8601": "2016-02-08T11:39:25.149652Z", "url": "https://files.pythonhosted.org/packages/0f/e1/8f330ca5dfb930850b1f232a0eaba6576befa890ac3e7e4ea950b54ad411/django-fake-model-0.1.4.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:36:13 2020"}