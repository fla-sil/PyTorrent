{"info": {"author": "Jarno Elonen", "author_email": "elonen@iki.fi", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3.6", "Topic :: Internet :: WWW/HTTP :: Dynamic Content", "Topic :: Software Development :: Libraries :: Python Modules", "Topic :: Text Processing :: Markup :: HTML"], "description": "# Minimalistic HTML generator for Python 3.6+ with compact syntax\n[![Build Status](https://travis-ci.com/elonen/py_microhtml.svg?branch=master)](https://travis-ci.com/elonen/py_microhtml)\n\nSafely construct valid HTML with Python code. Example:\n\n```python\nfrom microhtml import *\nprint(\n  \u1449html(\n    \u1449head( \u1449title( 'Test page' )),\n    \u1449body( \u1449span( 'Simple example.', class_='example' ))).pretty())\n```\n\nThis prints out a valid, formatted XHTML document:\n```xml\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html xmlns=\"http://www.w3.org/1999/xhtml\">\n  <head>\n    <title>\n      Test page\n    </title>\n  </head>\n  <body>\n    <span class=\"example\">Simple example.</span>\n  </body>\n</html>\n```\n\nYes, you'll probably need to copy-paste the unicode symbol and yes, you'll want to use a modern editor, but the resulting syntax is very compact and will not collide with your identifiers even with the `import *`.\n\nMinimalism also extends to implementation \u2013 it's _very_ short (<80 lines in v0.3). Check out `microhtml/__init__.py`.\n\nLonger example with more features showcased:\n\n```python\nfrom microhtml import *\n\n# Rendering a non-indented string (result: <p>Third <em>and last</em> paragraph</p>)\nraw_html = str(\u1449p(\"Third \", \u1449em(\"and last\"), ' paragraph'))\n\n# Writing a nicely formatted / tidied XHTML document to a file descriptor\nprint(\n  \u1449html( lang='en_US' )(\n    \u1449head(\u1449title(\"Test page\")),\n    \u1449body(\n        \u1449p(\"Hi!\", width=123), # 123 becomes \"123\"\n        \u1449hr(class_='someclass'), # Reserved words like \"class\" can be written with a trailing underscore\n        \u1449p('Literal strings are safely <em>escaped</em> by default.'),\n        \u1449rawstr(raw_html), # Use \u1449rawstr() if you don't want escaping\n        \u1449tag('applet', code='Bubbles.class', width=350, height=350),  # Tag with custom name\n        \u1449div(\"custom\", data__custom=\"abc\"), # '__' in attribute names is replaced with '-'\n        \u1449div(style='float: right')(  # This is how you can type attributes on left and content on right\n            \u1449div(style='border: 1px solid black')(\n                \u1449a(\"Nested\", href='#anchortest'), '|', 'link')))).pretty())\n```\n\nThis outputs:\n\n```xml\n<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"\n    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\">\n<html lang=\"en_US\" xmlns=\"http://www.w3.org/1999/xhtml\" xml:lang=\"en_US\">\n  <head>\n    <title>\n      Test page\n    </title>\n  </head>\n  <body>\n    <p width=\"123\">\n      Hi!\n    </p>\n    <hr class=\"someclass\" />\n    <p>\n      Literal strings are safely &lt;em&gt;escaped&lt;/em&gt; by default.\n    </p>\n    <p>\n      Third <em>and last</em> paragraph\n    </p><applet code=\"Bubbles.class\" width=\"350\" height=\"350\">\n      </applet>\n    <div data-custom=\"abc\">\n      custom\n    </div>\n    <div style=\"float: right\">\n      <div style=\"border: 1px solid black\">\n        <a href=\"#anchortest\">Nested</a>|link\n      </div>\n    </div>\n  </body>\n</html>\n```\n\n## Building\n\nTo build a pypi package, simply issue `make`. It will install a venv, run tests, generate a .pyi (type/syntax completion stub) and build a source package (sdist). Use `make clean` to clean up.\n\n## Alternatives and acknowledgements\n\nIf you find unicode characters in source code a horrendous abomination, and don't mind endless nested `with` expressions, you might prefer [Yattag](http://www.yattag.org/).\n\nUses `tidylib` for pretty printing. Inspiration drawn from `pyhtml` by Cenk Alt\u0131.\n\n## Copyright\n\nCopyright 2019 Jarno Elonen.\nReleased under the MIT license. See LICENSE for details.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/elonen/py_microhtml", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "py-microhtml", "package_url": "https://pypi.org/project/py-microhtml/", "platform": "", "project_url": "https://pypi.org/project/py-microhtml/", "project_urls": {"Homepage": "https://github.com/elonen/py_microhtml"}, "release_url": "https://pypi.org/project/py-microhtml/0.3/", "requires_dist": null, "requires_python": "", "summary": "Minimalistic HTML builder for Python 3.6+ with compact syntax", "version": "0.3", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Minimalistic HTML generator for Python 3.6+ with compact syntax</h1>\n<p><a href=\"https://travis-ci.com/elonen/py_microhtml\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/2809a648b52ba7a5a1dfaecf52514ac94576f22c/68747470733a2f2f7472617669732d63692e636f6d2f656c6f6e656e2f70795f6d6963726f68746d6c2e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>Safely construct valid HTML with Python code. Example:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">microhtml</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n  <span class=\"n\">\u1449html</span><span class=\"p\">(</span>\n    <span class=\"n\">\u1449head</span><span class=\"p\">(</span> <span class=\"n\">\u1449title</span><span class=\"p\">(</span> <span class=\"s1\">'Test page'</span> <span class=\"p\">)),</span>\n    <span class=\"n\">\u1449body</span><span class=\"p\">(</span> <span class=\"n\">\u1449span</span><span class=\"p\">(</span> <span class=\"s1\">'Simple example.'</span><span class=\"p\">,</span> <span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s1\">'example'</span> <span class=\"p\">)))</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"p\">())</span>\n</pre>\n<p>This prints out a valid, formatted XHTML document:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"</span>\n<span class=\"cp\">    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>\n      Test page\n    <span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;span</span> <span class=\"na\">class=</span><span class=\"s\">\"example\"</span><span class=\"nt\">&gt;</span>Simple example.<span class=\"nt\">&lt;/span&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre>\n<p>Yes, you'll probably need to copy-paste the unicode symbol and yes, you'll want to use a modern editor, but the resulting syntax is very compact and will not collide with your identifiers even with the <code>import *</code>.</p>\n<p>Minimalism also extends to implementation \u2013 it's <em>very</em> short (&lt;80 lines in v0.3). Check out <code>microhtml/__init__.py</code>.</p>\n<p>Longer example with more features showcased:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">microhtml</span> <span class=\"kn\">import</span> <span class=\"o\">*</span>\n\n<span class=\"c1\"># Rendering a non-indented string (result: &lt;p&gt;Third &lt;em&gt;and last&lt;/em&gt; paragraph&lt;/p&gt;)</span>\n<span class=\"n\">raw_html</span> <span class=\"o\">=</span> <span class=\"nb\">str</span><span class=\"p\">(</span><span class=\"n\">\u1449p</span><span class=\"p\">(</span><span class=\"s2\">\"Third \"</span><span class=\"p\">,</span> <span class=\"n\">\u1449em</span><span class=\"p\">(</span><span class=\"s2\">\"and last\"</span><span class=\"p\">),</span> <span class=\"s1\">' paragraph'</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Writing a nicely formatted / tidied XHTML document to a file descriptor</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span>\n  <span class=\"n\">\u1449html</span><span class=\"p\">(</span> <span class=\"n\">lang</span><span class=\"o\">=</span><span class=\"s1\">'en_US'</span> <span class=\"p\">)(</span>\n    <span class=\"n\">\u1449head</span><span class=\"p\">(</span><span class=\"n\">\u1449title</span><span class=\"p\">(</span><span class=\"s2\">\"Test page\"</span><span class=\"p\">)),</span>\n    <span class=\"n\">\u1449body</span><span class=\"p\">(</span>\n        <span class=\"n\">\u1449p</span><span class=\"p\">(</span><span class=\"s2\">\"Hi!\"</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">),</span> <span class=\"c1\"># 123 becomes \"123\"</span>\n        <span class=\"n\">\u1449hr</span><span class=\"p\">(</span><span class=\"n\">class_</span><span class=\"o\">=</span><span class=\"s1\">'someclass'</span><span class=\"p\">),</span> <span class=\"c1\"># Reserved words like \"class\" can be written with a trailing underscore</span>\n        <span class=\"n\">\u1449p</span><span class=\"p\">(</span><span class=\"s1\">'Literal strings are safely &lt;em&gt;escaped&lt;/em&gt; by default.'</span><span class=\"p\">),</span>\n        <span class=\"n\">\u1449rawstr</span><span class=\"p\">(</span><span class=\"n\">raw_html</span><span class=\"p\">),</span> <span class=\"c1\"># Use \u1449rawstr() if you don't want escaping</span>\n        <span class=\"n\">\u1449tag</span><span class=\"p\">(</span><span class=\"s1\">'applet'</span><span class=\"p\">,</span> <span class=\"n\">code</span><span class=\"o\">=</span><span class=\"s1\">'Bubbles.class'</span><span class=\"p\">,</span> <span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">,</span> <span class=\"n\">height</span><span class=\"o\">=</span><span class=\"mi\">350</span><span class=\"p\">),</span>  <span class=\"c1\"># Tag with custom name</span>\n        <span class=\"n\">\u1449div</span><span class=\"p\">(</span><span class=\"s2\">\"custom\"</span><span class=\"p\">,</span> <span class=\"n\">data__custom</span><span class=\"o\">=</span><span class=\"s2\">\"abc\"</span><span class=\"p\">),</span> <span class=\"c1\"># '__' in attribute names is replaced with '-'</span>\n        <span class=\"n\">\u1449div</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'float: right'</span><span class=\"p\">)(</span>  <span class=\"c1\"># This is how you can type attributes on left and content on right</span>\n            <span class=\"n\">\u1449div</span><span class=\"p\">(</span><span class=\"n\">style</span><span class=\"o\">=</span><span class=\"s1\">'border: 1px solid black'</span><span class=\"p\">)(</span>\n                <span class=\"n\">\u1449a</span><span class=\"p\">(</span><span class=\"s2\">\"Nested\"</span><span class=\"p\">,</span> <span class=\"n\">href</span><span class=\"o\">=</span><span class=\"s1\">'#anchortest'</span><span class=\"p\">),</span> <span class=\"s1\">'|'</span><span class=\"p\">,</span> <span class=\"s1\">'link'</span><span class=\"p\">))))</span><span class=\"o\">.</span><span class=\"n\">pretty</span><span class=\"p\">())</span>\n</pre>\n<p>This outputs:</p>\n<pre><span class=\"cp\">&lt;!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Strict//EN\"</span>\n<span class=\"cp\">    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd\"&gt;</span>\n<span class=\"nt\">&lt;html</span> <span class=\"na\">lang=</span><span class=\"s\">\"en_US\"</span> <span class=\"na\">xmlns=</span><span class=\"s\">\"http://www.w3.org/1999/xhtml\"</span> <span class=\"na\">xml:lang=</span><span class=\"s\">\"en_US\"</span><span class=\"nt\">&gt;</span>\n  <span class=\"nt\">&lt;head&gt;</span>\n    <span class=\"nt\">&lt;title&gt;</span>\n      Test page\n    <span class=\"nt\">&lt;/title&gt;</span>\n  <span class=\"nt\">&lt;/head&gt;</span>\n  <span class=\"nt\">&lt;body&gt;</span>\n    <span class=\"nt\">&lt;p</span> <span class=\"na\">width=</span><span class=\"s\">\"123\"</span><span class=\"nt\">&gt;</span>\n      Hi!\n    <span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;hr</span> <span class=\"na\">class=</span><span class=\"s\">\"someclass\"</span> <span class=\"nt\">/&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>\n      Literal strings are safely <span class=\"ni\">&amp;lt;</span>em<span class=\"ni\">&amp;gt;</span>escaped<span class=\"ni\">&amp;lt;</span>/em<span class=\"ni\">&amp;gt;</span> by default.\n    <span class=\"nt\">&lt;/p&gt;</span>\n    <span class=\"nt\">&lt;p&gt;</span>\n      Third <span class=\"nt\">&lt;em&gt;</span>and last<span class=\"nt\">&lt;/em&gt;</span> paragraph\n    <span class=\"nt\">&lt;/p&gt;&lt;applet</span> <span class=\"na\">code=</span><span class=\"s\">\"Bubbles.class\"</span> <span class=\"na\">width=</span><span class=\"s\">\"350\"</span> <span class=\"na\">height=</span><span class=\"s\">\"350\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;/applet&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">data-custom=</span><span class=\"s\">\"abc\"</span><span class=\"nt\">&gt;</span>\n      custom\n    <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"float: right\"</span><span class=\"nt\">&gt;</span>\n      <span class=\"nt\">&lt;div</span> <span class=\"na\">style=</span><span class=\"s\">\"border: 1px solid black\"</span><span class=\"nt\">&gt;</span>\n        <span class=\"nt\">&lt;a</span> <span class=\"na\">href=</span><span class=\"s\">\"#anchortest\"</span><span class=\"nt\">&gt;</span>Nested<span class=\"nt\">&lt;/a&gt;</span>|link\n      <span class=\"nt\">&lt;/div&gt;</span>\n    <span class=\"nt\">&lt;/div&gt;</span>\n  <span class=\"nt\">&lt;/body&gt;</span>\n<span class=\"nt\">&lt;/html&gt;</span>\n</pre>\n<h2>Building</h2>\n<p>To build a pypi package, simply issue <code>make</code>. It will install a venv, run tests, generate a .pyi (type/syntax completion stub) and build a source package (sdist). Use <code>make clean</code> to clean up.</p>\n<h2>Alternatives and acknowledgements</h2>\n<p>If you find unicode characters in source code a horrendous abomination, and don't mind endless nested <code>with</code> expressions, you might prefer <a href=\"http://www.yattag.org/\" rel=\"nofollow\">Yattag</a>.</p>\n<p>Uses <code>tidylib</code> for pretty printing. Inspiration drawn from <code>pyhtml</code> by Cenk Alt\u0131.</p>\n<h2>Copyright</h2>\n<p>Copyright 2019 Jarno Elonen.\nReleased under the MIT license. See LICENSE for details.</p>\n\n          </div>"}, "last_serial": 5916763, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "ab6516b339369ae7fba7d7ba01319665", "sha256": "0ca6c6ab52d32724c66d8c5cc8d3d7fbdd67d2d4cfaac7e4eb7e72dc0e142a89"}, "downloads": -1, "filename": "py_microhtml-0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "ab6516b339369ae7fba7d7ba01319665", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 4868, "upload_time": "2019-03-24T20:24:00", "upload_time_iso_8601": "2019-03-24T20:24:00.435922Z", "url": "https://files.pythonhosted.org/packages/62/8c/12f073e915df8cf9aa2d8cd3c758ea3c41d4b7f65c001fa95fd2cd4d26f3/py_microhtml-0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0ed4b4212565f3d8849ada6848c02bc5", "sha256": "7ff5073c1b7eb10e40eb669d2962898338ff25e528e6185ca1c46ec4e17b4b91"}, "downloads": -1, "filename": "py_microhtml-0.1.tar.gz", "has_sig": false, "md5_digest": "0ed4b4212565f3d8849ada6848c02bc5", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 3973, "upload_time": "2019-03-24T20:24:02", "upload_time_iso_8601": "2019-03-24T20:24:02.495230Z", "url": "https://files.pythonhosted.org/packages/48/76/0d30ef844cd2ace8f60cafc0258b506bac10b78b71c015d525dc1aae8631/py_microhtml-0.1.tar.gz", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "a91f632bc7aca0fd03d0f332ddedb891", "sha256": "73f0fc1474756d99b1c4130ee13f98972ac3693d0d370d80d38e1034181d8809"}, "downloads": -1, "filename": "py_microhtml-0.2.tar.gz", "has_sig": false, "md5_digest": "a91f632bc7aca0fd03d0f332ddedb891", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5783, "upload_time": "2019-04-21T18:50:38", "upload_time_iso_8601": "2019-04-21T18:50:38.428853Z", "url": "https://files.pythonhosted.org/packages/6d/05/d91800c0cf947d28d40fc090ed4a8dba1d5d1f8370fcf1c22e6c0f3327fd/py_microhtml-0.2.tar.gz", "yanked": false}], "0.3": [{"comment_text": "", "digests": {"md5": "f735e925ce9edd2012b08b973c533429", "sha256": "824188e274de7da287420dcf9ffcef1ccb548f8f1184f3875762e4a690b27c89"}, "downloads": -1, "filename": "py_microhtml-0.3.tar.gz", "has_sig": false, "md5_digest": "f735e925ce9edd2012b08b973c533429", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5923, "upload_time": "2019-10-02T08:28:25", "upload_time_iso_8601": "2019-10-02T08:28:25.107979Z", "url": "https://files.pythonhosted.org/packages/a4/af/4d85dc3dfc176a3f3216e1f9f326dea4136b721369edadc844a51140ec6b/py_microhtml-0.3.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "f735e925ce9edd2012b08b973c533429", "sha256": "824188e274de7da287420dcf9ffcef1ccb548f8f1184f3875762e4a690b27c89"}, "downloads": -1, "filename": "py_microhtml-0.3.tar.gz", "has_sig": false, "md5_digest": "f735e925ce9edd2012b08b973c533429", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 5923, "upload_time": "2019-10-02T08:28:25", "upload_time_iso_8601": "2019-10-02T08:28:25.107979Z", "url": "https://files.pythonhosted.org/packages/a4/af/4d85dc3dfc176a3f3216e1f9f326dea4136b721369edadc844a51140ec6b/py_microhtml-0.3.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:02:08 2020"}