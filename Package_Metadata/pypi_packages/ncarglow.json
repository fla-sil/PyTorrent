{"info": {"author": "Michael Hirsch, Ph.D.", "author_email": "", "bugtrack_url": null, "classifiers": ["Development Status :: 5 - Production/Stable", "Environment :: Console", "Intended Audience :: Science/Research", "Operating System :: OS Independent", "Programming Language :: Fortran", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3.8", "Topic :: Scientific/Engineering :: Atmospheric Science"], "description": "[![DOI](https://zenodo.org/badge/162534283.svg)](https://zenodo.org/badge/latestdoi/162534283)\n\n[![Build Status](https://dev.azure.com/mhirsch0512/NCAR-GLOW/_apis/build/status/space-physics.NCAR-GLOW?branchName=master)](https://dev.azure.com/mhirsch0512/NCAR-GLOW/_build/latest?definitionId=4&branchName=master)\n[![Build status](https://ci.appveyor.com/api/projects/status/9q837fimex3vf3en?svg=true)](https://ci.appveyor.com/project/scivision/ncar-glow)\n\n\n# GLOW\n\nThe GLobal airglOW Model, independently and easily accessed from **Fortran 2003** compiler.\nOptionally available from scripting languages including:\n\n* Python &ge; 3.6\n* Matlab\n* GNU Octave &ge; 4.2\n* IDL / GDL\n\nWe describe each language below; pick the one(s) that apply for you.\nPython is the easiest and recommennded choice.\nA Fortran compiler is required in any case.\n\n## Python\n\nInstall/compile by:\n\n```sh\ngit clone https://github.com/space-physics/ncar-glow\n\npip install -e ncar-glow\n```\n\nConfirm the install with:\n\n```sh\npytest ncar-glow\n```\n\nThen use examples such as:\n\n* Simple.py:  Maxwellian precipiation, specify Q and E0.\n* Monoenergetic.py: Specify unit flux for one energy bin, all other energy bins are zero flux.\n\nor use GLOW in your own Python program by:\n```python\nimport ncarglow as glow\n\niono = glow.simple(time, glat, glon, Q, Echar, Nbins)\n```\n\n`iono` is an\n[xarray.Dataset](http://xarray.pydata.org/en/stable/generated/xarray.Dataset.html)\ncontaining outputs from GLOW, including:\n\n* number densities of neutrals, ions and electrons\n* Pedersen and Hall currents\n* volume emssion rate vs. wavelength and altitude\n* precipitating flux vs. energy\n* many more, request if you want it.\n\n## Fortran\n\nYou can call this repo from a Meson wrap or CMake Fetch.\nTo build Fortran code by itself, do either:\n\n```sh\nmeson build\n\nmeson test -C build\n```\n\nor\n\n```sh\ncmake -B build\n\ncmake --build build\n```\n\n### MPI / NetCDF\n\nThe parallel version of GLOW requires MPI and NetCDF for TIEGCM I/O.\n```sh\nmpirun -np 2 ./mpi_glow.bin < ~/data/in.namelist.tgcm\n```\n\nNote, for an unknown reason, `in.namelist.msis` only works with -O0 or -O1 with gfortran 7. We didn't look into why.\nOtherwise, -O3 works fine.\n\n## Matlab / GNU Octave\n\nThe Matlab interface is in the [matlab](./matlab) directory, and passes data to / from Glow over stdin / stdout pipes.\n\nFirst, compile the Fortran code by running [setup.m](./matlab/setup.m)\n\nThen,\n\n* Use built-in energy and altitude bins: [Simple.m](./matlab/Simple.m)\n* user input energy grid: [Monoenergetic.m](./matlab/Monoenergetic.m)\n\nNOTE: if using GNU Octave, version &ge; 4.2 is required for proper [textscan() functionality](https://www.gnu.org/software/octave/NEWS-4.2.html)\n\n## IDL / GDL\n\nWe have a small script for IDL / GDL thanks to Guy Grubbs.\nLet us know if you want this, we haven't taken the time to upload it yet.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/scivision/ncar-glow", "keywords": "thermosphere,ionosphere", "license": "", "maintainer": "", "maintainer_email": "", "name": "ncarglow", "package_url": "https://pypi.org/project/ncarglow/", "platform": "", "project_url": "https://pypi.org/project/ncarglow/", "project_urls": {"Homepage": "https://github.com/scivision/ncar-glow"}, "release_url": "https://pypi.org/project/ncarglow/1.1.1/", "requires_dist": null, "requires_python": ">= 3.6", "summary": "NCAR GLOW model", "version": "1.1.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p><a href=\"https://zenodo.org/badge/latestdoi/162534283\" rel=\"nofollow\"><img alt=\"DOI\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/53e086e69f74ae5992634bbd55a67e9edb94624f/68747470733a2f2f7a656e6f646f2e6f72672f62616467652f3136323533343238332e737667\"></a></p>\n<p><a href=\"https://dev.azure.com/mhirsch0512/NCAR-GLOW/_build/latest?definitionId=4&amp;branchName=master\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/45a55e21d61e273f063efa563f5e6d2898b918ab/68747470733a2f2f6465762e617a7572652e636f6d2f6d686972736368303531322f4e4341522d474c4f572f5f617069732f6275696c642f7374617475732f73706163652d706879736963732e4e4341522d474c4f573f6272616e63684e616d653d6d6173746572\"></a>\n<a href=\"https://ci.appveyor.com/project/scivision/ncar-glow\" rel=\"nofollow\"><img alt=\"Build status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/24f6fff6f46a1fcaa500a697cd2152e09d2f332d/68747470733a2f2f63692e6170707665796f722e636f6d2f6170692f70726f6a656374732f7374617475732f397138333766696d657833766633656e3f7376673d74727565\"></a></p>\n<h1>GLOW</h1>\n<p>The GLobal airglOW Model, independently and easily accessed from <strong>Fortran 2003</strong> compiler.\nOptionally available from scripting languages including:</p>\n<ul>\n<li>Python \u2265 3.6</li>\n<li>Matlab</li>\n<li>GNU Octave \u2265 4.2</li>\n<li>IDL / GDL</li>\n</ul>\n<p>We describe each language below; pick the one(s) that apply for you.\nPython is the easiest and recommennded choice.\nA Fortran compiler is required in any case.</p>\n<h2>Python</h2>\n<p>Install/compile by:</p>\n<pre>git clone https://github.com/space-physics/ncar-glow\n\npip install -e ncar-glow\n</pre>\n<p>Confirm the install with:</p>\n<pre>pytest ncar-glow\n</pre>\n<p>Then use examples such as:</p>\n<ul>\n<li>Simple.py:  Maxwellian precipiation, specify Q and E0.</li>\n<li>Monoenergetic.py: Specify unit flux for one energy bin, all other energy bins are zero flux.</li>\n</ul>\n<p>or use GLOW in your own Python program by:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">ncarglow</span> <span class=\"k\">as</span> <span class=\"nn\">glow</span>\n\n<span class=\"n\">iono</span> <span class=\"o\">=</span> <span class=\"n\">glow</span><span class=\"o\">.</span><span class=\"n\">simple</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"p\">,</span> <span class=\"n\">glat</span><span class=\"p\">,</span> <span class=\"n\">glon</span><span class=\"p\">,</span> <span class=\"n\">Q</span><span class=\"p\">,</span> <span class=\"n\">Echar</span><span class=\"p\">,</span> <span class=\"n\">Nbins</span><span class=\"p\">)</span>\n</pre>\n<p><code>iono</code> is an\n<a href=\"http://xarray.pydata.org/en/stable/generated/xarray.Dataset.html\" rel=\"nofollow\">xarray.Dataset</a>\ncontaining outputs from GLOW, including:</p>\n<ul>\n<li>number densities of neutrals, ions and electrons</li>\n<li>Pedersen and Hall currents</li>\n<li>volume emssion rate vs. wavelength and altitude</li>\n<li>precipitating flux vs. energy</li>\n<li>many more, request if you want it.</li>\n</ul>\n<h2>Fortran</h2>\n<p>You can call this repo from a Meson wrap or CMake Fetch.\nTo build Fortran code by itself, do either:</p>\n<pre>meson build\n\nmeson <span class=\"nb\">test</span> -C build\n</pre>\n<p>or</p>\n<pre>cmake -B build\n\ncmake --build build\n</pre>\n<h3>MPI / NetCDF</h3>\n<p>The parallel version of GLOW requires MPI and NetCDF for TIEGCM I/O.</p>\n<pre>mpirun -np <span class=\"m\">2</span> ./mpi_glow.bin &lt; ~/data/in.namelist.tgcm\n</pre>\n<p>Note, for an unknown reason, <code>in.namelist.msis</code> only works with -O0 or -O1 with gfortran 7. We didn't look into why.\nOtherwise, -O3 works fine.</p>\n<h2>Matlab / GNU Octave</h2>\n<p>The Matlab interface is in the <a href=\"./matlab\" rel=\"nofollow\">matlab</a> directory, and passes data to / from Glow over stdin / stdout pipes.</p>\n<p>First, compile the Fortran code by running <a href=\"./matlab/setup.m\" rel=\"nofollow\">setup.m</a></p>\n<p>Then,</p>\n<ul>\n<li>Use built-in energy and altitude bins: <a href=\"./matlab/Simple.m\" rel=\"nofollow\">Simple.m</a></li>\n<li>user input energy grid: <a href=\"./matlab/Monoenergetic.m\" rel=\"nofollow\">Monoenergetic.m</a></li>\n</ul>\n<p>NOTE: if using GNU Octave, version \u2265 4.2 is required for proper <a href=\"https://www.gnu.org/software/octave/NEWS-4.2.html\" rel=\"nofollow\">textscan() functionality</a></p>\n<h2>IDL / GDL</h2>\n<p>We have a small script for IDL / GDL thanks to Guy Grubbs.\nLet us know if you want this, we haven't taken the time to upload it yet.</p>\n\n          </div>"}, "last_serial": 5559155, "releases": {"1.1.1": [{"comment_text": "", "digests": {"md5": "803d0bcd275ec4f196b9b8606568b046", "sha256": "0e470a4df84372574d02b5bb89c45772b85a3695d753d2d2e28017ba6412239f"}, "downloads": -1, "filename": "ncarglow-1.1.1.tar.gz", "has_sig": false, "md5_digest": "803d0bcd275ec4f196b9b8606568b046", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 362169, "upload_time": "2019-07-19T23:23:11", "upload_time_iso_8601": "2019-07-19T23:23:11.430958Z", "url": "https://files.pythonhosted.org/packages/db/80/372894ae69407335d369fa53a6add2113e4df00f9227a8d0ae42f5b616a3/ncarglow-1.1.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "803d0bcd275ec4f196b9b8606568b046", "sha256": "0e470a4df84372574d02b5bb89c45772b85a3695d753d2d2e28017ba6412239f"}, "downloads": -1, "filename": "ncarglow-1.1.1.tar.gz", "has_sig": false, "md5_digest": "803d0bcd275ec4f196b9b8606568b046", "packagetype": "sdist", "python_version": "source", "requires_python": ">= 3.6", "size": 362169, "upload_time": "2019-07-19T23:23:11", "upload_time_iso_8601": "2019-07-19T23:23:11.430958Z", "url": "https://files.pythonhosted.org/packages/db/80/372894ae69407335d369fa53a6add2113e4df00f9227a8d0ae42f5b616a3/ncarglow-1.1.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:46:49 2020"}