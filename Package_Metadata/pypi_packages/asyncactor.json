{"info": {"author": "Matthias Urlichs", "author_email": "matthias@urlichs.de", "bugtrack_url": null, "classifiers": [], "description": "asyncactor\n==========\n\nAsyncActor is an async Python module that aids in service discovery and\n\"somewhat-leader\" election in a heterogenous, sometimes-disconnected\nnetwork.\n\nAsyncActor can run on top of any reliable broadcast channel.\nThis version includes back-ends for Serf and MQTT.\n\nAsyncActor sends as few packets as possible, thus is well-suited for\nIoT-related applications with many stations but limited bandwidth.\n\nTheory of operation\n+++++++++++++++++++\n\nAssume that you have a non-lossy network with a bounded latency (let's\nassume one second). Assume further that you'd like to know within ten\nseconds whether your node is still online.\n\nAsyncActor sends one beacon message every seven to nine seconds. The message\nincludes a list of N previous hosts who have transmitted the beacon; the\nhost that's last in this list will be the next transmitter.\n\nThe time slot starting at the seven-second mark is used for random hosts\nwhich would like to enter the beacon sending business. This is somewhat\nlikely if the list of hosts is currently smaller than N. The slot at eight\nseconds is used for the hosts at the end of the list; the last host will\nsend first, but if its beacon is not seen then the next-to-last will send\nits message, and so on.\n\nThe time slot at nine seconds is used for last-resort messages, i.e. any\nparticipating host can and will send its beacon message.\n\nCollisions are resolved at the ten-second mark, i.e. the list of messages\nis ordered deterministically: the winner will announce to its clients that\na new slot has started and whether all N host slots are filled.\n\nIt uses `anyio <https://github.com/agronholm/anyio>` as its underlying\nasync framework.\n\n.. image:: https://badge.fury.io/py/asyncactor.svg\n    :alt: PyPI latest version badge\n    :target: https://pypi.python.org/pypi/asyncactor\n.. image:: https://coveralls.io/repos/smurfix/asyncactor/badge.png?branch=master\n    :alt: Code coverage badge\n    :target: https://coveralls.io/r/smurfix/asyncactor?branch=master\n\nInstallation\n------------\n\nAsyncActor requires a back-end, i.e. either a running Serf agent or a MQTT\nbroker.\n\nTo install AsyncActor, run the following command:\n\n.. code-block:: bash\n\n    $ pip install asyncactor\n\nor alternatively (you really should be using pip though):\n\n.. code-block:: bash\n\n    $ easy_install asyncactor\n\nor from source:\n\n.. code-block:: bash\n\n    $ python setup.py install\n\nGetting Started\n---------------\n\nThese examples require a running async loop.\n`Trio <https://github.com/python-trio/trio>` is recommended, though\n``asyncio`` works too.\n\n.. code-block:: python\n\n    from asyncactor import client as actor\n    from somewhere import some_transport\n\n    async with some_transport.connect('localhost') as t:\n        async with actor(t, prefix=('actor','test')) as client:\n            async for client.events as m:\n                print(m)\n\nDevelopment\n------------\n\nYou can run the tests using the following commands:\n\n.. code-block:: bash\n\n    $ serf agent & # start serf agent\n    $ mosquitto \n    $ python3 -mpytest tests\n\n", "description_content_type": "", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/smurfix/asyncactor", "keywords": "Serf", "license": "GPL3", "maintainer": "", "maintainer_email": "", "name": "asyncactor", "package_url": "https://pypi.org/project/asyncactor/", "platform": "", "project_url": "https://pypi.org/project/asyncactor/", "project_urls": {"Homepage": "https://github.com/smurfix/asyncactor"}, "release_url": "https://pypi.org/project/asyncactor/0.17.1/", "requires_dist": null, "requires_python": "", "summary": "Async decentralized actor", "version": "0.17.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p>AsyncActor is an async Python module that aids in service discovery and\n\u201csomewhat-leader\u201d election in a heterogenous, sometimes-disconnected\nnetwork.</p>\n<p>AsyncActor can run on top of any reliable broadcast channel.\nThis version includes back-ends for Serf and MQTT.</p>\n<p>AsyncActor sends as few packets as possible, thus is well-suited for\nIoT-related applications with many stations but limited bandwidth.</p>\n<div id=\"theory-of-operation\">\n<h2>Theory of operation</h2>\n<p>Assume that you have a non-lossy network with a bounded latency (let\u2019s\nassume one second). Assume further that you\u2019d like to know within ten\nseconds whether your node is still online.</p>\n<p>AsyncActor sends one beacon message every seven to nine seconds. The message\nincludes a list of N previous hosts who have transmitted the beacon; the\nhost that\u2019s last in this list will be the next transmitter.</p>\n<p>The time slot starting at the seven-second mark is used for random hosts\nwhich would like to enter the beacon sending business. This is somewhat\nlikely if the list of hosts is currently smaller than N. The slot at eight\nseconds is used for the hosts at the end of the list; the last host will\nsend first, but if its beacon is not seen then the next-to-last will send\nits message, and so on.</p>\n<p>The time slot at nine seconds is used for last-resort messages, i.e. any\nparticipating host can and will send its beacon message.</p>\n<p>Collisions are resolved at the ten-second mark, i.e. the list of messages\nis ordered deterministically: the winner will announce to its clients that\na new slot has started and whether all N host slots are filled.</p>\n<p>It uses <cite>anyio &lt;https://github.com/agronholm/anyio&gt;</cite> as its underlying\nasync framework.</p>\n<a href=\"https://pypi.python.org/pypi/asyncactor\" rel=\"nofollow\"><img alt=\"PyPI latest version badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/f29cd72548b93157a2fc835a58ac014ab061fc95/68747470733a2f2f62616467652e667572792e696f2f70792f6173796e636163746f722e737667\"></a>\n<a href=\"https://coveralls.io/r/smurfix/asyncactor?branch=master\" rel=\"nofollow\"><img alt=\"Code coverage badge\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/d5bfda15d7fa68e4ec7c33bd3c26824f20ce8b20/68747470733a2f2f636f766572616c6c732e696f2f7265706f732f736d75726669782f6173796e636163746f722f62616467652e706e673f6272616e63683d6d6173746572\"></a>\n<div id=\"installation\">\n<h3>Installation</h3>\n<p>AsyncActor requires a back-end, i.e. either a running Serf agent or a MQTT\nbroker.</p>\n<p>To install AsyncActor, run the following command:</p>\n<pre>$ pip install asyncactor\n</pre>\n<p>or alternatively (you really should be using pip though):</p>\n<pre>$ easy_install asyncactor\n</pre>\n<p>or from source:</p>\n<pre>$ python setup.py install\n</pre>\n</div>\n<div id=\"getting-started\">\n<h3>Getting Started</h3>\n<p>These examples require a running async loop.\n<cite>Trio &lt;https://github.com/python-trio/trio&gt;</cite> is recommended, though\n<tt>asyncio</tt> works too.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">asyncactor</span> <span class=\"kn\">import</span> <span class=\"n\">client</span> <span class=\"k\">as</span> <span class=\"n\">actor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">somewhere</span> <span class=\"kn\">import</span> <span class=\"n\">some_transport</span>\n\n<span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">some_transport</span><span class=\"o\">.</span><span class=\"n\">connect</span><span class=\"p\">(</span><span class=\"s1\">'localhost'</span><span class=\"p\">)</span> <span class=\"k\">as</span> <span class=\"n\">t</span><span class=\"p\">:</span>\n    <span class=\"k\">async</span> <span class=\"k\">with</span> <span class=\"n\">actor</span><span class=\"p\">(</span><span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">prefix</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">'actor'</span><span class=\"p\">,</span><span class=\"s1\">'test'</span><span class=\"p\">))</span> <span class=\"k\">as</span> <span class=\"n\">client</span><span class=\"p\">:</span>\n        <span class=\"k\">async</span> <span class=\"k\">for</span> <span class=\"n\">client</span><span class=\"o\">.</span><span class=\"n\">events</span> <span class=\"k\">as</span> <span class=\"n\">m</span><span class=\"p\">:</span>\n            <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">m</span><span class=\"p\">)</span>\n</pre>\n</div>\n<div id=\"development\">\n<h3>Development</h3>\n<p>You can run the tests using the following commands:</p>\n<pre>$ serf agent <span class=\"p\">&amp;</span> <span class=\"c1\"># start serf agent\n</span>$ mosquitto\n$ python3 -mpytest tests\n</pre>\n</div>\n</div>\n\n          </div>"}, "last_serial": 6196263, "releases": {"0.16.2": [{"comment_text": "", "digests": {"md5": "b9a697504b92caefd8d4a919735471df", "sha256": "868ba8b2a66d36656f4842a2dc7312ede2e3abbd0ae90651fcaedab6dae6e18b"}, "downloads": -1, "filename": "asyncactor-0.16.2.tar.gz", "has_sig": false, "md5_digest": "b9a697504b92caefd8d4a919735471df", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28688, "upload_time": "2019-10-05T13:19:05", "upload_time_iso_8601": "2019-10-05T13:19:05.099739Z", "url": "https://files.pythonhosted.org/packages/7c/29/52433cfeb2f90a33ebb5bdbb5859591af15945f411b8f89b6134a0d058c6/asyncactor-0.16.2.tar.gz", "yanked": false}], "0.17.0": [{"comment_text": "", "digests": {"md5": "bfa213fddb9ee26c9317e934e3fa15b3", "sha256": "3d707334717fddd0e4b26a6644a57d4a3b906211744ad748828e7381335d5dab"}, "downloads": -1, "filename": "asyncactor-0.17.0.tar.gz", "has_sig": false, "md5_digest": "bfa213fddb9ee26c9317e934e3fa15b3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28914, "upload_time": "2019-10-05T15:14:30", "upload_time_iso_8601": "2019-10-05T15:14:30.698669Z", "url": "https://files.pythonhosted.org/packages/d5/a0/7d1e6935a8201936a9b558100c244bef5b863630bf511ec2c2330dd16262/asyncactor-0.17.0.tar.gz", "yanked": false}], "0.17.1": [{"comment_text": "", "digests": {"md5": "c7d61bfdfa324538e0265306e72d1afd", "sha256": "f1c2202d96f347e2e37bcff481565024cd0657da42be3bb3b948d9a3f390ce6d"}, "downloads": -1, "filename": "asyncactor-0.17.1.tar.gz", "has_sig": false, "md5_digest": "c7d61bfdfa324538e0265306e72d1afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28905, "upload_time": "2019-11-25T19:05:25", "upload_time_iso_8601": "2019-11-25T19:05:25.874272Z", "url": "https://files.pythonhosted.org/packages/3d/0e/a4aa9ceb69b03f1e7245db129fdfd7d982ed57e0d784c87cbf838c9f94ab/asyncactor-0.17.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "c7d61bfdfa324538e0265306e72d1afd", "sha256": "f1c2202d96f347e2e37bcff481565024cd0657da42be3bb3b948d9a3f390ce6d"}, "downloads": -1, "filename": "asyncactor-0.17.1.tar.gz", "has_sig": false, "md5_digest": "c7d61bfdfa324538e0265306e72d1afd", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 28905, "upload_time": "2019-11-25T19:05:25", "upload_time_iso_8601": "2019-11-25T19:05:25.874272Z", "url": "https://files.pythonhosted.org/packages/3d/0e/a4aa9ceb69b03f1e7245db129fdfd7d982ed57e0d784c87cbf838c9f94ab/asyncactor-0.17.1.tar.gz", "yanked": false}], "timestamp": "Thu May  7 18:16:46 2020"}