{"info": {"author": "Gitcoin", "author_email": "team@gitcoin.co", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Intended Audience :: Developers", "License :: OSI Approved :: GNU Affero General Public License v3", "Natural Language :: English", "Programming Language :: Python :: 3", "Programming Language :: Python :: 3.5", "Programming Language :: Python :: 3.6", "Programming Language :: Python :: 3.7", "Programming Language :: Python :: 3 :: Only", "Topic :: Software Development", "Topic :: Software Development :: Build Tools", "Topic :: Software Development :: Libraries", "Topic :: Software Development :: Libraries :: Python Modules"], "description": "# Gitcoin Python API Client\n\n[![Build Status](https://travis-ci.com/gitcoinco/python-api-client.svg?branch=master)](https://travis-ci.com/gitcoinco/python-api-client)\n\nThis Python package provides the `bounties` endpoint of the Gitcoin API, which allows you to:\n\n- list all bounties\n- list all bounties which meet certain conditions (i.e. filter them)\n- retrieve a single bounty by it's primary key\n\n## Install via pypi\n\n```bash\npip install gitcoin\n```\n\n## Usage Examples\n\n### List all bounties\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nall_bounties = api.bounties.all()\n```\n\n### List all open bounties\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nopen_bounties = api.bounties.filter(is_open=True).all()\n```\n\n### List all open \"Beginner\" bounties\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nbounties_api = api.bounties\nbounties_api.filter(is_open=True)\nbounties_api.filter(experience_level='Beginner')\nopen_beginner_bounties = bounties_api.all()\n```\n\nThe example above has been reformatted for easier reading. A [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface#Python) is also available. Please scroll the following code block all the way to the end to see the whole line:\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nopen_beginner_bounties = api.bounties.filter(is_open=True, experience_level='Beginner').all()\n```\n\n### List all open bounties marked for either \"Beginner\" OR \"Intermediate\" experience level\n\nFor some filter conditions, multiple different values can be given, which results in a logical `OR` for that condition:\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nbounties_api = api.bounties\nbounties_api.filter(is_open=True)\nbounties_api.filter(experience_level='Beginner')\nbounties_api.filter(experience_level='Intermediate')\nopen_beginner_and_intermediate_bounties = bounties_api.all()\n```\n\nThe example above has been reformatted for easier reading. A [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface#Python) is also available. Please scroll the following code block all the way to the end to see the whole line:\n\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\nopen_beginner_and_intermediate_bounties = api.bounties.filter(is_open=True).filter(experience_level='Beginner').filter(experience_level='Intermediate').all()\n```\n\n## API\n\n### Instantiation\n\n1. Create a `Gitcoin()` API root object:\n```python\nfrom gitcoin import Gitcoin\napi = Gitcoin()\n```\n2. The `bounties` API endpoint is accessible as a property of the API root object:\n```python\nbounties_endpoint = api.bounties\n```\nEach access to the `bounties` property results in a new `Endpoint` object with no filter conditions or any other parameters (like sorting) set. If you want to keep a specific set of filter conditions, simply store the `Endpoint` object in a variable instead of referring to the `bounties` property of the root object.\n\n### `bounties.filter(**kwargs)`\n\nLimit the list of bounties returned by either `get_page()` or `all()` to those bounties meeting the filter condition(s). For some filter conditions, multiple different values can be given, which results in a logical `OR` for that condition.\n\nThe condition name is the name of the keyword argument, and the condition value is the value of the keyword argument:\n\n```python\nopen_bounties = api.bounties.filter(is_open=True).all()\n```\n\nConditions with different names can be given in one `filter()` call:\n\n```python\nopen_beginner bounties = api.bounties.filter(is_open=True, experience_level='Beginner').all()\n```\n\nOr if preferred, they can also be given in separate `filter()` calls:\n\n```python\nopen_beginner bounties = api.bounties.filter(is_open=True).filter(experience_level='Beginner').all()\n```\n\nGiving multiple values for the same filter condition has to be done in separate calls to `filter()`:\n\n```python\nbeginner_and_intermediate_bounties = api.bounties.filter(experience_level='Beginner').filter(experience_level='Intermediate').all()\n```\n\nFor the following filter conditions, multiple values can be given to achieve a logical `OR`:\n\n- `experience_level (str)`\n- `project_length (str)`\n- `bounty_type (str)`\n- `bounty_owner_address (str)`\n- `bounty_owner_github_username (str)`\n- `idx_status (str)`\n- `network (str)`\n- `standard_bounties_id (int)`\n- `github_url (str)`\n- `raw_data (str)`\n\nThe following filter conditions are **single value**, in other words, multiple values result in the last value overwriting all earlier values:\n\n- `pk__gt (int)`\n- `started (str)`\n- `is_open (bool)`\n- `fulfiller_github_username (str)`\n- `interested_github_username (str)`\n\n`filter()` returns the `Endpoint` object itself to enable a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface#Python).\n\n### `bounties.order_by(sort)`\n\nDetermine the order of the bounties returned by either `get_page()` or `all()`. The `sort` argument is a `string` containing a DB field name to sort by. It can also have an optional \"-\" prefix for reversing the direction. Choose from these field names:\n\n- `accepted`\n- `balance`\n- `bounty_owner_address`\n- `bounty_owner_email`\n- `bounty_owner_github_username`\n- `bounty_owner_name`\n- `bounty_type`\n- `canceled_on`\n- `contract_address`\n- `current_bounty`\n- `experience_level`\n- `expires_date`\n- `fulfillment_accepted_on`\n- `fulfillment_started_on`\n- `fulfillment_submitted_on`\n- `github_comments`\n- `github_url`\n- `idx_experience_level`\n- `idx_project_length`\n- `idx_status`\n- `interested`\n- `interested_comment`\n- `is_open`\n- `issue_description`\n- `last_comment_date`\n- `metadata`\n- `network`\n- `num_fulfillments`\n- `override_status`\n- `privacy_preferences`\n- `project_length`\n- `raw_data`\n- `snooze_warnings_for_days`\n- `standard_bounties_id`\n- `submissions_comment`\n- `title`\n- `token_address`\n- `token_name`\n- `token_value_in_usdt`\n- `token_value_time_peg`\n- `_val_usd_db`\n- `value_in_eth`\n- `value_in_token`\n- `value_in_usdt`\n- `value_in_usdt_now`\n- `value_true`\n- `web3_created`\n- `web3_type`\n\n`order_by()` returns the `Endpoint` object itself to enable a [fluent interface](https://en.wikipedia.org/wiki/Fluent_interface#Python).\n\n### `bounties.get_page(number=1, per_page=25)`\n\nReturns one page of the (potentially `filter()`ed) `list` of bounties with the given 1-based index `number (int)`. The page size can be set with `per_page (int)`. Each bounty is a `dict`, basically the direct output of [`requests`' `.json()`](http://docs.python-requests.org/en/master/user/quickstart/#json-response-content) call.\n\n### `bounties.all()`\n\nReturns the complete (potentially `filter()`ed) `list` of bounties. Each bounty is a `dict`, basically the direct output of [`requests`' `.json()`](http://docs.python-requests.org/en/master/user/quickstart/#json-response-content) call.\n\n### `bounties.get(primary_key)`\n\nReturns one (1) bounty as specified by `primary_key (int)`. It is returned as a `dict`, basically the direct output of [`requests`' `.json()`](http://docs.python-requests.org/en/master/user/quickstart/#json-response-content) call.\n\n-------------------------\n\n## Todo\n\n- [x] Add base gitcoin.Gitcoin client\n- [x] Add `bounties` api filter\n  - [x] Implement all filter fields present in `gitcoinco/web/app/dashboard/router.py`\n- [ ] Add `universe` api filter\n  - [ ] Implement all filter fields present in `gitcoinco/web/app/external_bounties/router.py`\n- [x] Add sorting/order_by\n- [x] Add pagination (page/limit)\n- [ ] Add travis-ci.com project and twine/pypi credentials.\n- [ ] Add codecov.io project.\n- [ ] Cut first release (Tag github release, push changes, and let CI deploy to pypi)\n- [ ] Maintain +90% coverage\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/gitcoinco/python-api-client", "keywords": "gitcoin api client bounties bounty rest", "license": "", "maintainer": "", "maintainer_email": "", "name": "gitcoin", "package_url": "https://pypi.org/project/gitcoin/", "platform": "", "project_url": "https://pypi.org/project/gitcoin/", "project_urls": {"API Project": "https://github.com/gitcoinco/web", "Bug Reports": "https://github.com/gitcoinco/python-api-client/issues", "Homepage": "https://gitcoin.co", "Source": "https://github.com/gitcoinco/python-api-client/"}, "release_url": "https://pypi.org/project/gitcoin/0.1.0/", "requires_dist": ["requests", "twine; extra == 'deploy'", "wheel; extra == 'deploy'"], "requires_python": "~=3.5", "summary": "The Gitcoin.co python API client", "version": "0.1.0", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>Gitcoin Python API Client</h1>\n<p><a href=\"https://travis-ci.com/gitcoinco/python-api-client\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/3481720a71d4fe531ac44082ba9a4b67a5ab3e60/68747470733a2f2f7472617669732d63692e636f6d2f676974636f696e636f2f707974686f6e2d6170692d636c69656e742e7376673f6272616e63683d6d6173746572\"></a></p>\n<p>This Python package provides the <code>bounties</code> endpoint of the Gitcoin API, which allows you to:</p>\n<ul>\n<li>list all bounties</li>\n<li>list all bounties which meet certain conditions (i.e. filter them)</li>\n<li>retrieve a single bounty by it's primary key</li>\n</ul>\n<h2>Install via pypi</h2>\n<pre>pip install gitcoin\n</pre>\n<h2>Usage Examples</h2>\n<h3>List all bounties</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">all_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h3>List all open bounties</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">open_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h3>List all open \"Beginner\" bounties</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">bounties_api</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span>\n<span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span>\n<span class=\"n\">open_beginner_bounties</span> <span class=\"o\">=</span> <span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>The example above has been reformatted for easier reading. A <a href=\"https://en.wikipedia.org/wiki/Fluent_interface#Python\" rel=\"nofollow\">fluent interface</a> is also available. Please scroll the following code block all the way to the end to see the whole line:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">open_beginner_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h3>List all open bounties marked for either \"Beginner\" OR \"Intermediate\" experience level</h3>\n<p>For some filter conditions, multiple different values can be given, which results in a logical <code>OR</code> for that condition:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">bounties_api</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span>\n<span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n<span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span>\n<span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Intermediate'</span><span class=\"p\">)</span>\n<span class=\"n\">open_beginner_and_intermediate_bounties</span> <span class=\"o\">=</span> <span class=\"n\">bounties_api</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>The example above has been reformatted for easier reading. A <a href=\"https://en.wikipedia.org/wiki/Fluent_interface#Python\" rel=\"nofollow\">fluent interface</a> is also available. Please scroll the following code block all the way to the end to see the whole line:</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n<span class=\"n\">open_beginner_and_intermediate_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Intermediate'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<h2>API</h2>\n<h3>Instantiation</h3>\n<ol>\n<li>Create a <code>Gitcoin()</code> API root object:</li>\n</ol>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">gitcoin</span> <span class=\"kn\">import</span> <span class=\"n\">Gitcoin</span>\n<span class=\"n\">api</span> <span class=\"o\">=</span> <span class=\"n\">Gitcoin</span><span class=\"p\">()</span>\n</pre>\n<ol>\n<li>The <code>bounties</code> API endpoint is accessible as a property of the API root object:</li>\n</ol>\n<pre><span class=\"n\">bounties_endpoint</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span>\n</pre>\n<p>Each access to the <code>bounties</code> property results in a new <code>Endpoint</code> object with no filter conditions or any other parameters (like sorting) set. If you want to keep a specific set of filter conditions, simply store the <code>Endpoint</code> object in a variable instead of referring to the <code>bounties</code> property of the root object.</p>\n<h3><code>bounties.filter(**kwargs)</code></h3>\n<p>Limit the list of bounties returned by either <code>get_page()</code> or <code>all()</code> to those bounties meeting the filter condition(s). For some filter conditions, multiple different values can be given, which results in a logical <code>OR</code> for that condition.</p>\n<p>The condition name is the name of the keyword argument, and the condition value is the value of the keyword argument:</p>\n<pre><span class=\"n\">open_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>Conditions with different names can be given in one <code>filter()</code> call:</p>\n<pre><span class=\"n\">open_beginner</span> <span class=\"n\">bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>Or if preferred, they can also be given in separate <code>filter()</code> calls:</p>\n<pre><span class=\"n\">open_beginner</span> <span class=\"n\">bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">is_open</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>Giving multiple values for the same filter condition has to be done in separate calls to <code>filter()</code>:</p>\n<pre><span class=\"n\">beginner_and_intermediate_bounties</span> <span class=\"o\">=</span> <span class=\"n\">api</span><span class=\"o\">.</span><span class=\"n\">bounties</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Beginner'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">filter</span><span class=\"p\">(</span><span class=\"n\">experience_level</span><span class=\"o\">=</span><span class=\"s1\">'Intermediate'</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">all</span><span class=\"p\">()</span>\n</pre>\n<p>For the following filter conditions, multiple values can be given to achieve a logical <code>OR</code>:</p>\n<ul>\n<li><code>experience_level (str)</code></li>\n<li><code>project_length (str)</code></li>\n<li><code>bounty_type (str)</code></li>\n<li><code>bounty_owner_address (str)</code></li>\n<li><code>bounty_owner_github_username (str)</code></li>\n<li><code>idx_status (str)</code></li>\n<li><code>network (str)</code></li>\n<li><code>standard_bounties_id (int)</code></li>\n<li><code>github_url (str)</code></li>\n<li><code>raw_data (str)</code></li>\n</ul>\n<p>The following filter conditions are <strong>single value</strong>, in other words, multiple values result in the last value overwriting all earlier values:</p>\n<ul>\n<li><code>pk__gt (int)</code></li>\n<li><code>started (str)</code></li>\n<li><code>is_open (bool)</code></li>\n<li><code>fulfiller_github_username (str)</code></li>\n<li><code>interested_github_username (str)</code></li>\n</ul>\n<p><code>filter()</code> returns the <code>Endpoint</code> object itself to enable a <a href=\"https://en.wikipedia.org/wiki/Fluent_interface#Python\" rel=\"nofollow\">fluent interface</a>.</p>\n<h3><code>bounties.order_by(sort)</code></h3>\n<p>Determine the order of the bounties returned by either <code>get_page()</code> or <code>all()</code>. The <code>sort</code> argument is a <code>string</code> containing a DB field name to sort by. It can also have an optional \"-\" prefix for reversing the direction. Choose from these field names:</p>\n<ul>\n<li><code>accepted</code></li>\n<li><code>balance</code></li>\n<li><code>bounty_owner_address</code></li>\n<li><code>bounty_owner_email</code></li>\n<li><code>bounty_owner_github_username</code></li>\n<li><code>bounty_owner_name</code></li>\n<li><code>bounty_type</code></li>\n<li><code>canceled_on</code></li>\n<li><code>contract_address</code></li>\n<li><code>current_bounty</code></li>\n<li><code>experience_level</code></li>\n<li><code>expires_date</code></li>\n<li><code>fulfillment_accepted_on</code></li>\n<li><code>fulfillment_started_on</code></li>\n<li><code>fulfillment_submitted_on</code></li>\n<li><code>github_comments</code></li>\n<li><code>github_url</code></li>\n<li><code>idx_experience_level</code></li>\n<li><code>idx_project_length</code></li>\n<li><code>idx_status</code></li>\n<li><code>interested</code></li>\n<li><code>interested_comment</code></li>\n<li><code>is_open</code></li>\n<li><code>issue_description</code></li>\n<li><code>last_comment_date</code></li>\n<li><code>metadata</code></li>\n<li><code>network</code></li>\n<li><code>num_fulfillments</code></li>\n<li><code>override_status</code></li>\n<li><code>privacy_preferences</code></li>\n<li><code>project_length</code></li>\n<li><code>raw_data</code></li>\n<li><code>snooze_warnings_for_days</code></li>\n<li><code>standard_bounties_id</code></li>\n<li><code>submissions_comment</code></li>\n<li><code>title</code></li>\n<li><code>token_address</code></li>\n<li><code>token_name</code></li>\n<li><code>token_value_in_usdt</code></li>\n<li><code>token_value_time_peg</code></li>\n<li><code>_val_usd_db</code></li>\n<li><code>value_in_eth</code></li>\n<li><code>value_in_token</code></li>\n<li><code>value_in_usdt</code></li>\n<li><code>value_in_usdt_now</code></li>\n<li><code>value_true</code></li>\n<li><code>web3_created</code></li>\n<li><code>web3_type</code></li>\n</ul>\n<p><code>order_by()</code> returns the <code>Endpoint</code> object itself to enable a <a href=\"https://en.wikipedia.org/wiki/Fluent_interface#Python\" rel=\"nofollow\">fluent interface</a>.</p>\n<h3><code>bounties.get_page(number=1, per_page=25)</code></h3>\n<p>Returns one page of the (potentially <code>filter()</code>ed) <code>list</code> of bounties with the given 1-based index <code>number (int)</code>. The page size can be set with <code>per_page (int)</code>. Each bounty is a <code>dict</code>, basically the direct output of <a href=\"http://docs.python-requests.org/en/master/user/quickstart/#json-response-content\" rel=\"nofollow\"><code>requests</code>' <code>.json()</code></a> call.</p>\n<h3><code>bounties.all()</code></h3>\n<p>Returns the complete (potentially <code>filter()</code>ed) <code>list</code> of bounties. Each bounty is a <code>dict</code>, basically the direct output of <a href=\"http://docs.python-requests.org/en/master/user/quickstart/#json-response-content\" rel=\"nofollow\"><code>requests</code>' <code>.json()</code></a> call.</p>\n<h3><code>bounties.get(primary_key)</code></h3>\n<p>Returns one (1) bounty as specified by <code>primary_key (int)</code>. It is returned as a <code>dict</code>, basically the direct output of <a href=\"http://docs.python-requests.org/en/master/user/quickstart/#json-response-content\" rel=\"nofollow\"><code>requests</code>' <code>.json()</code></a> call.</p>\n<hr>\n<h2>Todo</h2>\n<ul>\n<li>[x] Add base gitcoin.Gitcoin client</li>\n<li>[x] Add <code>bounties</code> api filter\n<ul>\n<li>[x] Implement all filter fields present in <code>gitcoinco/web/app/dashboard/router.py</code></li>\n</ul>\n</li>\n<li>[ ] Add <code>universe</code> api filter\n<ul>\n<li>[ ] Implement all filter fields present in <code>gitcoinco/web/app/external_bounties/router.py</code></li>\n</ul>\n</li>\n<li>[x] Add sorting/order_by</li>\n<li>[x] Add pagination (page/limit)</li>\n<li>[ ] Add travis-ci.com project and twine/pypi credentials.</li>\n<li>[ ] Add codecov.io project.</li>\n<li>[ ] Cut first release (Tag github release, push changes, and let CI deploy to pypi)</li>\n<li>[ ] Maintain +90% coverage</li>\n</ul>\n\n          </div>"}, "last_serial": 4176584, "releases": {"0.1.0": [{"comment_text": "", "digests": {"md5": "83f7345f3a4ddac5fd92d43291804311", "sha256": "59de92c232837d3fbe660b57af98c22cb59252da0a0c5314b193e142c64fcf15"}, "downloads": -1, "filename": "gitcoin-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83f7345f3a4ddac5fd92d43291804311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 17981, "upload_time": "2018-08-16T13:33:58", "upload_time_iso_8601": "2018-08-16T13:33:58.711188Z", "url": "https://files.pythonhosted.org/packages/7d/3d/d9dd58636be41ecdec34b85e6f3f4c340c72c5eb77f6d95587b90e8d6b45/gitcoin-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae7313b3112e7f89719ebd6018e7e4c0", "sha256": "2328bb113fcad48fe634a1687a26c68289c4591e6da8200edceeefa4ff3946f0"}, "downloads": -1, "filename": "gitcoin-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae7313b3112e7f89719ebd6018e7e4c0", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 18406, "upload_time": "2018-08-16T13:34:00", "upload_time_iso_8601": "2018-08-16T13:34:00.067402Z", "url": "https://files.pythonhosted.org/packages/60/31/2e909c50016fab6631f32809537d26885693d19a84109a7f196abeff3add/gitcoin-0.1.0.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83f7345f3a4ddac5fd92d43291804311", "sha256": "59de92c232837d3fbe660b57af98c22cb59252da0a0c5314b193e142c64fcf15"}, "downloads": -1, "filename": "gitcoin-0.1.0-py3-none-any.whl", "has_sig": false, "md5_digest": "83f7345f3a4ddac5fd92d43291804311", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": "~=3.5", "size": 17981, "upload_time": "2018-08-16T13:33:58", "upload_time_iso_8601": "2018-08-16T13:33:58.711188Z", "url": "https://files.pythonhosted.org/packages/7d/3d/d9dd58636be41ecdec34b85e6f3f4c340c72c5eb77f6d95587b90e8d6b45/gitcoin-0.1.0-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "ae7313b3112e7f89719ebd6018e7e4c0", "sha256": "2328bb113fcad48fe634a1687a26c68289c4591e6da8200edceeefa4ff3946f0"}, "downloads": -1, "filename": "gitcoin-0.1.0.tar.gz", "has_sig": false, "md5_digest": "ae7313b3112e7f89719ebd6018e7e4c0", "packagetype": "sdist", "python_version": "source", "requires_python": "~=3.5", "size": 18406, "upload_time": "2018-08-16T13:34:00", "upload_time_iso_8601": "2018-08-16T13:34:00.067402Z", "url": "https://files.pythonhosted.org/packages/60/31/2e909c50016fab6631f32809537d26885693d19a84109a7f196abeff3add/gitcoin-0.1.0.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:57:07 2020"}