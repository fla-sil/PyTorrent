{"info": {"author": "Felix", "author_email": "pypi@flx.ai", "bugtrack_url": null, "classifiers": [], "description": "# pyceau\nSimple Python implementation of two-dimensional [cellular automata](https://en.wikipedia.org/wiki/Cellular_automaton) using [Moore neighbourhood](https://en.wikibooks.org/wiki/Cellular_Automata/Neighborhood#Moore_neighborhood).\nSimulation can be (un)paused using `^Z` / `SIGTSTP`.\nSimulation can be stopped using `^C`/`SIGINT`.\n`pyceau` stands for **Py**thon **Ce**llular **Au**tomata.\n\nSee the [demonstration](https://s.flx.ai/2020/cellular-automata/demo.html) for results using regular and concatenated rules.\nPlease note that the website is only tested to be working with Chromium and video files don't seem to render in Firefox.\n\n## Disclaimer\nMay create seizures. Use this software at your own risk.\n\n## Flicker\nSome rule sets are strenuous to the eye, because of heavy flicker.\nTo alleviate this problem use the `-p` flag.\nYou can choose between different modes `1`, `2` and `3` via `-m` where `0` is default.\nIt is advisable to use mode `1` for exploration of new rules because it works for most patterns.\n\n## Rules\nThe program allows to use [Conway's Game of Life's](https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life) rules and others.\nThey can be given via the `-r` or `--rules` argument using either [S/B notation](https://www.conwaylife.com/wiki/Rulestring) or S/B/C notation.\nRandom rules are allowed using the format `-r lL+rR`.\n`l` is the minimum, `L` the maximum number of elements for the left S rule set.\n`r` and `R` work analogously for the right B rule set.\nTo allow maximum freedom on randomness of the rule sets, use `-r 18+18`.\n\nBeyond regular S/B notation it is allowed to combine multiple rules together separated by commata `,`.\nIt is decided by the current tick which of these alternating rules are used.\nEach of these rules can also be prepended by a natural number and `x` indicating the number of times this rule should be successively repeated.\nAn example combining both of these concepts would be the rule string `-r 123467/0167,3x126/6`.\n\nThis notation can be used for the regular rules via `-r` as well as the [post-processing rules](#post-processing-filters) given via `--post-rules`.\n\n### Classical\nRule name | S/B notation\n-|-\nConway's | 23/3\n[Day and night](https://en.wikipedia.org/wiki/Day_and_Night_(cellular_automaton)) | 3678/34678\n\n### Stumbled upon\nThe following rules have been randomly found or at least partly crafted by either somebody else if annoted or myself.\nFlicker of rules marked with + can be filtered, flicker of rules with - cannot.\n= works sometimes.\nNumbers indicate a preferred filter mode given `-m` or `--flicker-mode`.\nConvergence describes time to reach a state without much change.\n\\+ means it takes long, = normal and - short to converge.\nStability describes that a system has sufficient change, but not too much to be reduced to noise.\nConvergence and stability are not yet operationalized.\n\nS/B notation      | Flicker   | Convergence   | Stability\n-----------------:|:---------:|:-------------:|:---------:\n01/015678         | 3+        | -             | -\n0123/01234        | 3+        | -             | -\n01234567/12345678 | 3=        | -             | -\n012346/0123678    | 3=        | ++            | =\n012358/0238       | 1=        | +             | =\n0135/012357       | 3+        | +             | =\n01357/45678       | 0+        | =             | -\n0/2               | 1+        | +             | -\n0234/73           | 0+        | ++            | +\n02456/0123467     | 3+        | ++            | +\n03/02             | 3+        | -             | -\n03456/012346      | 3+        | +             | =\n035/012347        | 3+        | =             | =\n035678/36 \u00b9       | 0+        | =             | -\n1/0234            | 3+        | -             | -\n12/024            | 3+        | =             | -\n1234/4            | 1+        | +             | -\n12345/01245678    | 3+        | +             | +\n1237/137          | 0=        | +             | =\n1238/0127         | 1=        | ++            | =\n1245/1234567      | 3+        | ++            | =\n12456/4567        | 1=        | ++            | =\n12457/04          | 1+        | ++            | =\n1256/3            | 0+        | +++           | =\n13/34             | 1+        | ++            | +\n145/0128          | 3+        | +             | -\n145/35            | 0+        | -             | -\n23/0123           | 3+        | -             | -\n23457/012346      | 3+        | ++            | =\n23457/05678       | 0+        | +             | -\n2356/45 \u00b2         | 0+        | =             | -\n25/012346         | 3+        | +             | -\n2568/35678        | 0+        | +             | -\n3456/012356       | 3+        | ++            | +\n34567/68          | 1+        | -             | -\n34568/46          | 0+        | -             | -\n34568/5678        | 0=        | =             | -\n347/356           | 0=        | ++            | =\n35/0678           | 0-        | ++            | +\n3578/06           | 0=        | +++           | =\n4/012346          | 3+        | -             | -\n4567/567          | 1+        | -             | -\n5/078             | 1-        | ++            | +\n567/245678        | 1=        | ++            | -\n567/45678         | 1+        | -             | -\n5678/1367         | 0=        | ++            | -\n5678/35678 \u00b9      | 0+        | =             | -\n\n* \u00b9 [David Eppstein](https://arxiv.org/abs/cs/0004003)\n* \u00b2 [S\u00f6ren Wegener](https://github.com/soerface)\n\nTo execute all of these one after another using the least strenuous flicker filter the following bash snippet may help:\n\n```bash\nfor rules in $(grep -Eo '[0-9]+/[0-9]+ +\\|' README.md | cut -d\\  -f1); do\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1); [[ $mode =~ [0-3] ]] || mode=0\n    pyceau -cr $rules -s 200 -m $mode\ndone\n```\n\nTo cycle through ones with slow convergence (++) using `^C` the following commands can be used:\n\n```\nfor rules in $(grep -E '\\+{2}' README.md | grep -Eo '[0-9]+/[0-9]+ +\\|' | cut -d\\  -f1); do\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1); [[ $mode =~ [0-3] ]] || mode=0\n    pyceau -cm $mode -r $rules\ndone\n```\n\nMore rules are to be found on [Wikipedia](https://en.wikipedia.org/wiki/Life-like_cellular_automaton#Notation_for_rules).\n\n\nRoles for S/B/C automatons can be found on the [website of Mirek W\u00f3jtowicz](http://psoup.math.wisc.edu/mcell/rullex_gene.html).\n\n### Exploration\nTo explore and find new rules the following snippet can be used:\n\n```bash\nwhile true; do\n   pyceau -r 18+18\n   sleep .4\ndone\n```\n\nIf interesting patterns emerge `^C` can be held.\n`sleep` should be modified to match the keyboard's refresh rate to not start a new simulation too soon.\n\n### One dimensional simulations\nTo simulate all the rules from the list within a single dimension and create graphical \"footprints\" use the following snippet:\n\n```bash\nfor rules in $(grep -Eo '[0-9]+/[0-9]+ +\\|' README.md | cut -d\\  -f1); do\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1)\n    [[ $mode =~ [0-3] ]] || mode=0\n    echo -e \"\\n$rules\"\n    pyceau -cr $rules -s 16 -m $mode -ud 80x1 | grep -vE '^$'\ndone\n```\n\nNote that `grep` is used to filter out empty lines that would otherwise disturb the output.\nWhile some of the rules give interesting patterns there are also duplicates (like `35/0678` and `3578/06`).\nThis is because the rules are still computed in two dimensional neighbourhood with a ring of size 1 in the second dimension.\n[Wolfram code](https://en.wikipedia.org/wiki/Wolfram_code) are usually used for one dimensional cellular automata and given S/B notation could be converted accordingly.\n\n## Arguments\nStart the program using the `--help` or `-?` flag to see a current overview of allowed arguments.\n\n## Board\nSetting the board manually is supported through the `-b` argument.\nThis implies board size and therefore `-d` is not given.\nA sample `5x5` board with a glider can be given using the following notation:\n\n```\n-b 00000.00100.00010.01110.00000\n```\n\n* `0` dead\n* `1` alive\n* `.` new line\n\n## Suptitle bar\nThe subtitle bar can display different kinds of information.\nThe following tables lists possible values for its format:\n\nFormat  | Expansion\n-------:|:----------------------------------------\n`%r`    | Rules\n`%R`    | Rules (`/` replaced with `-`)\n`%d`    | Dimensions (`WxH`)\n`%D`    | Dimensions (`W-H`)\n`%f`    | Flicker mode\n`%a`    | Flicker mode (alphabetic)\n`%s`    | Random seed\n`%S`    | Random seed (`[`, `]` removed)\n`%t`    | Tick number\n`%T`    | Tick number (8 digits, preceding zeroes)\n`%i`    | Inversion indicator\n`%o`    | Render indicator\n`%p`    | Post processing rules and ticks\n\nThe default is `%r %a %t %i` and can be overwritten via `-f`.\nImage render file format is using `%R-%D-%S-%a-%T.png` per default.\n\n## Render images\nYou can render images with limited options.\n\n### Stills\nThe following snippet renders a still in\n`img/0123-01234-48-32-DEMO-A-4.png`:\n\n```bash\npyceau -r 0123/01234 -s4 -m1 -d 48x32 -qe DEMO -i -1\nxdg-open img/*\n```\n\n### Image sequences\nThe following snippet renders all of the 3000 frames in the `img` directory. This will take some time:\n\n```bash\npyceau -r 3456/012356 -s3100 -m2 -z2 -d 512x256 -e DEMO -i 100:-1:2 -q\nxdg-open img/*\n```\n\n### Videos\nIf you have executed the last snippet to create image sequences, you can then use `ffmpeg` to combine these into a video.\nA simple command to encode all the stills in the different subdirectories in `img` into a separate video each located in `vid` using [WebM and VP9](https://trac.ffmpeg.org/wiki/Encode/VP9) is:\n\n```\nfor dir in img/*; do\n    id=\"${dir##*/}\"\n    ffmpeg -framerate 23 \\\n           -pattern_type glob \\\n           -i \"$dir/*.png\" \\\n           -c:v libvpx-vp9 \\\n           -pix_fmt yuva420p \\\n           \"vid/$id.webm\"\ndone\n```\n\n\n```\nfor rules in $(grep -Eo '[0-9]+/[0-9]+ +\\|' README.md | cut -d\\  -f1); do                                                                                                                                         :(\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1); [[ $mode =~ [0-3] ]] || mode=0\n    pyceau -cr $rules -d 256x64 -m $mode -e DEMO \ndone\n```\n\nAfter rendering has completed you can have a look at `output.webm`.\nSee *Tick spans* below for further details.\n\n## Tick spans\nTo describe tick spans for `-i` the following notation is used:\n\n* `n` describes a single page\n* `n,m` describes both pages or ranges `n` and `m`\n* `n:m` describes a range from `n` to `m` including `m`\n* `n:m:k` describes a range from `n` to `m` including `m` with step size `k`\n\nE.g. `0:2,5:9:3,-1` unfolds to the list `[0, 1, 2, 5, 9]` if the last tick is `9`.\n\nNote that there is also `--render-ticks` that does something similar for rendering to stdout.\n\n## Post-processing filters\nAfter a step is taken according to the rules of the automaton its state can be altered for display using a post-processing filter.\nThis filter is another automaton following rules specified via `--post-rule`.\nThis filter is then applied as often as defined by `--post-ticks` for each tick.\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "pyceau", "package_url": "https://pypi.org/project/pyceau/", "platform": "", "project_url": "https://pypi.org/project/pyceau/", "project_urls": {"Bug Tracker": "https://github.com/flxai/pyceau/issues", "Documentation": "https://pyceau.readthedocs.io", "Source Code": "https://github.com/flxai/pyceau"}, "release_url": "https://pypi.org/project/pyceau/0.0.6/", "requires_dist": ["pbr (==5.4.4)", "Pillow (==7.0.0)"], "requires_python": "", "summary": "2D cellular automata without colors using Moore neighbourhood", "version": "0.0.6", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pyceau</h1>\n<p>Simple Python implementation of two-dimensional <a href=\"https://en.wikipedia.org/wiki/Cellular_automaton\" rel=\"nofollow\">cellular automata</a> using <a href=\"https://en.wikibooks.org/wiki/Cellular_Automata/Neighborhood#Moore_neighborhood\" rel=\"nofollow\">Moore neighbourhood</a>.\nSimulation can be (un)paused using <code>^Z</code> / <code>SIGTSTP</code>.\nSimulation can be stopped using <code>^C</code>/<code>SIGINT</code>.\n<code>pyceau</code> stands for <strong>Py</strong>thon <strong>Ce</strong>llular <strong>Au</strong>tomata.</p>\n<p>See the <a href=\"https://s.flx.ai/2020/cellular-automata/demo.html\" rel=\"nofollow\">demonstration</a> for results using regular and concatenated rules.\nPlease note that the website is only tested to be working with Chromium and video files don't seem to render in Firefox.</p>\n<h2>Disclaimer</h2>\n<p>May create seizures. Use this software at your own risk.</p>\n<h2>Flicker</h2>\n<p>Some rule sets are strenuous to the eye, because of heavy flicker.\nTo alleviate this problem use the <code>-p</code> flag.\nYou can choose between different modes <code>1</code>, <code>2</code> and <code>3</code> via <code>-m</code> where <code>0</code> is default.\nIt is advisable to use mode <code>1</code> for exploration of new rules because it works for most patterns.</p>\n<h2>Rules</h2>\n<p>The program allows to use <a href=\"https://en.wikipedia.org/wiki/Conway%27s_Game_of_Life\" rel=\"nofollow\">Conway's Game of Life's</a> rules and others.\nThey can be given via the <code>-r</code> or <code>--rules</code> argument using either <a href=\"https://www.conwaylife.com/wiki/Rulestring\" rel=\"nofollow\">S/B notation</a> or S/B/C notation.\nRandom rules are allowed using the format <code>-r lL+rR</code>.\n<code>l</code> is the minimum, <code>L</code> the maximum number of elements for the left S rule set.\n<code>r</code> and <code>R</code> work analogously for the right B rule set.\nTo allow maximum freedom on randomness of the rule sets, use <code>-r 18+18</code>.</p>\n<p>Beyond regular S/B notation it is allowed to combine multiple rules together separated by commata <code>,</code>.\nIt is decided by the current tick which of these alternating rules are used.\nEach of these rules can also be prepended by a natural number and <code>x</code> indicating the number of times this rule should be successively repeated.\nAn example combining both of these concepts would be the rule string <code>-r 123467/0167,3x126/6</code>.</p>\n<p>This notation can be used for the regular rules via <code>-r</code> as well as the <a href=\"#post-processing-filters\" rel=\"nofollow\">post-processing rules</a> given via <code>--post-rules</code>.</p>\n<h3>Classical</h3>\n<table>\n<thead>\n<tr>\n<th>Rule name</th>\n<th>S/B notation</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Conway's</td>\n<td>23/3</td>\n</tr>\n<tr>\n<td><a href=\"https://en.wikipedia.org/wiki/Day_and_Night_(cellular_automaton)\" rel=\"nofollow\">Day and night</a></td>\n<td>3678/34678</td>\n</tr></tbody></table>\n<h3>Stumbled upon</h3>\n<p>The following rules have been randomly found or at least partly crafted by either somebody else if annoted or myself.\nFlicker of rules marked with + can be filtered, flicker of rules with - cannot.\n= works sometimes.\nNumbers indicate a preferred filter mode given <code>-m</code> or <code>--flicker-mode</code>.\nConvergence describes time to reach a state without much change.\n+ means it takes long, = normal and - short to converge.\nStability describes that a system has sufficient change, but not too much to be reduced to noise.\nConvergence and stability are not yet operationalized.</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">S/B notation</th>\n<th align=\"center\">Flicker</th>\n<th align=\"center\">Convergence</th>\n<th align=\"center\">Stability</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\">01/015678</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">0123/01234</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">01234567/12345678</td>\n<td align=\"center\">3=</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">012346/0123678</td>\n<td align=\"center\">3=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">012358/0238</td>\n<td align=\"center\">1=</td>\n<td align=\"center\">+</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">0135/012357</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">01357/45678</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">0/2</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">0234/73</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">02456/0123467</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">03/02</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">03456/012346</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">035/012347</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">035678/36 \u00b9</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">1/0234</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">12/024</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">1234/4</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">12345/01245678</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">1237/137</td>\n<td align=\"center\">0=</td>\n<td align=\"center\">+</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">1238/0127</td>\n<td align=\"center\">1=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">1245/1234567</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">12456/4567</td>\n<td align=\"center\">1=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">12457/04</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">1256/3</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">+++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">13/34</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">145/0128</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">145/35</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">23/0123</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">23457/012346</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">23457/05678</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">2356/45 \u00b2</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">25/012346</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">2568/35678</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">+</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">3456/012356</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">34567/68</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">34568/46</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">34568/5678</td>\n<td align=\"center\">0=</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">347/356</td>\n<td align=\"center\">0=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">35/0678</td>\n<td align=\"center\">0-</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">3578/06</td>\n<td align=\"center\">0=</td>\n<td align=\"center\">+++</td>\n<td align=\"center\">=</td>\n</tr>\n<tr>\n<td align=\"right\">4/012346</td>\n<td align=\"center\">3+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">4567/567</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">5/078</td>\n<td align=\"center\">1-</td>\n<td align=\"center\">++</td>\n<td align=\"center\">+</td>\n</tr>\n<tr>\n<td align=\"right\">567/245678</td>\n<td align=\"center\">1=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">567/45678</td>\n<td align=\"center\">1+</td>\n<td align=\"center\">-</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">5678/1367</td>\n<td align=\"center\">0=</td>\n<td align=\"center\">++</td>\n<td align=\"center\">-</td>\n</tr>\n<tr>\n<td align=\"right\">5678/35678 \u00b9</td>\n<td align=\"center\">0+</td>\n<td align=\"center\">=</td>\n<td align=\"center\">-</td>\n</tr></tbody></table>\n<ul>\n<li>\u00b9 <a href=\"https://arxiv.org/abs/cs/0004003\" rel=\"nofollow\">David Eppstein</a></li>\n<li>\u00b2 <a href=\"https://github.com/soerface\" rel=\"nofollow\">S\u00f6ren Wegener</a></li>\n</ul>\n<p>To execute all of these one after another using the least strenuous flicker filter the following bash snippet may help:</p>\n<pre><span class=\"k\">for</span> rules in <span class=\"k\">$(</span>grep -Eo <span class=\"s1\">'[0-9]+/[0-9]+ +\\|'</span> README.md <span class=\"p\">|</span> cut -d<span class=\"se\">\\ </span> -f1<span class=\"k\">)</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n    <span class=\"nv\">mode</span><span class=\"o\">=</span><span class=\"k\">$(</span>grep -E <span class=\"s2\">\"^</span><span class=\"nv\">$rules</span><span class=\"s2\">\\s+\\|\"</span> README.md <span class=\"p\">|</span> awk <span class=\"s1\">'{ print $3 }'</span> <span class=\"p\">|</span> cut -c1<span class=\"k\">)</span><span class=\"p\">;</span> <span class=\"o\">[[</span> <span class=\"nv\">$mode</span> <span class=\"o\">=</span>~ <span class=\"o\">[</span><span class=\"m\">0</span>-3<span class=\"o\">]</span> <span class=\"o\">]]</span> <span class=\"o\">||</span> <span class=\"nv\">mode</span><span class=\"o\">=</span><span class=\"m\">0</span>\n    pyceau -cr <span class=\"nv\">$rules</span> -s <span class=\"m\">200</span> -m <span class=\"nv\">$mode</span>\n<span class=\"k\">done</span>\n</pre>\n<p>To cycle through ones with slow convergence (++) using <code>^C</code> the following commands can be used:</p>\n<pre><code>for rules in $(grep -E '\\+{2}' README.md | grep -Eo '[0-9]+/[0-9]+ +\\|' | cut -d\\  -f1); do\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1); [[ $mode =~ [0-3] ]] || mode=0\n    pyceau -cm $mode -r $rules\ndone\n</code></pre>\n<p>More rules are to be found on <a href=\"https://en.wikipedia.org/wiki/Life-like_cellular_automaton#Notation_for_rules\" rel=\"nofollow\">Wikipedia</a>.</p>\n<p>Roles for S/B/C automatons can be found on the <a href=\"http://psoup.math.wisc.edu/mcell/rullex_gene.html\" rel=\"nofollow\">website of Mirek W\u00f3jtowicz</a>.</p>\n<h3>Exploration</h3>\n<p>To explore and find new rules the following snippet can be used:</p>\n<pre><span class=\"k\">while</span> true<span class=\"p\">;</span> <span class=\"k\">do</span>\n   pyceau -r <span class=\"m\">18</span>+18\n   sleep .4\n<span class=\"k\">done</span>\n</pre>\n<p>If interesting patterns emerge <code>^C</code> can be held.\n<code>sleep</code> should be modified to match the keyboard's refresh rate to not start a new simulation too soon.</p>\n<h3>One dimensional simulations</h3>\n<p>To simulate all the rules from the list within a single dimension and create graphical \"footprints\" use the following snippet:</p>\n<pre><span class=\"k\">for</span> rules in <span class=\"k\">$(</span>grep -Eo <span class=\"s1\">'[0-9]+/[0-9]+ +\\|'</span> README.md <span class=\"p\">|</span> cut -d<span class=\"se\">\\ </span> -f1<span class=\"k\">)</span><span class=\"p\">;</span> <span class=\"k\">do</span>\n    <span class=\"nv\">mode</span><span class=\"o\">=</span><span class=\"k\">$(</span>grep -E <span class=\"s2\">\"^</span><span class=\"nv\">$rules</span><span class=\"s2\">\\s+\\|\"</span> README.md <span class=\"p\">|</span> awk <span class=\"s1\">'{ print $3 }'</span> <span class=\"p\">|</span> cut -c1<span class=\"k\">)</span>\n    <span class=\"o\">[[</span> <span class=\"nv\">$mode</span> <span class=\"o\">=</span>~ <span class=\"o\">[</span><span class=\"m\">0</span>-3<span class=\"o\">]</span> <span class=\"o\">]]</span> <span class=\"o\">||</span> <span class=\"nv\">mode</span><span class=\"o\">=</span><span class=\"m\">0</span>\n    <span class=\"nb\">echo</span> -e <span class=\"s2\">\"\\n</span><span class=\"nv\">$rules</span><span class=\"s2\">\"</span>\n    pyceau -cr <span class=\"nv\">$rules</span> -s <span class=\"m\">16</span> -m <span class=\"nv\">$mode</span> -ud 80x1 <span class=\"p\">|</span> grep -vE <span class=\"s1\">'^$'</span>\n<span class=\"k\">done</span>\n</pre>\n<p>Note that <code>grep</code> is used to filter out empty lines that would otherwise disturb the output.\nWhile some of the rules give interesting patterns there are also duplicates (like <code>35/0678</code> and <code>3578/06</code>).\nThis is because the rules are still computed in two dimensional neighbourhood with a ring of size 1 in the second dimension.\n<a href=\"https://en.wikipedia.org/wiki/Wolfram_code\" rel=\"nofollow\">Wolfram code</a> are usually used for one dimensional cellular automata and given S/B notation could be converted accordingly.</p>\n<h2>Arguments</h2>\n<p>Start the program using the <code>--help</code> or <code>-?</code> flag to see a current overview of allowed arguments.</p>\n<h2>Board</h2>\n<p>Setting the board manually is supported through the <code>-b</code> argument.\nThis implies board size and therefore <code>-d</code> is not given.\nA sample <code>5x5</code> board with a glider can be given using the following notation:</p>\n<pre><code>-b 00000.00100.00010.01110.00000\n</code></pre>\n<ul>\n<li><code>0</code> dead</li>\n<li><code>1</code> alive</li>\n<li><code>.</code> new line</li>\n</ul>\n<h2>Suptitle bar</h2>\n<p>The subtitle bar can display different kinds of information.\nThe following tables lists possible values for its format:</p>\n<table>\n<thead>\n<tr>\n<th align=\"right\">Format</th>\n<th align=\"left\">Expansion</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"right\"><code>%r</code></td>\n<td align=\"left\">Rules</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%R</code></td>\n<td align=\"left\">Rules (<code>/</code> replaced with <code>-</code>)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%d</code></td>\n<td align=\"left\">Dimensions (<code>WxH</code>)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%D</code></td>\n<td align=\"left\">Dimensions (<code>W-H</code>)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%f</code></td>\n<td align=\"left\">Flicker mode</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%a</code></td>\n<td align=\"left\">Flicker mode (alphabetic)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%s</code></td>\n<td align=\"left\">Random seed</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%S</code></td>\n<td align=\"left\">Random seed (<code>[</code>, <code>]</code> removed)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%t</code></td>\n<td align=\"left\">Tick number</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%T</code></td>\n<td align=\"left\">Tick number (8 digits, preceding zeroes)</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%i</code></td>\n<td align=\"left\">Inversion indicator</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%o</code></td>\n<td align=\"left\">Render indicator</td>\n</tr>\n<tr>\n<td align=\"right\"><code>%p</code></td>\n<td align=\"left\">Post processing rules and ticks</td>\n</tr></tbody></table>\n<p>The default is <code>%r %a %t %i</code> and can be overwritten via <code>-f</code>.\nImage render file format is using <code>%R-%D-%S-%a-%T.png</code> per default.</p>\n<h2>Render images</h2>\n<p>You can render images with limited options.</p>\n<h3>Stills</h3>\n<p>The following snippet renders a still in\n<code>img/0123-01234-48-32-DEMO-A-4.png</code>:</p>\n<pre>pyceau -r <span class=\"m\">0123</span>/01234 -s4 -m1 -d 48x32 -qe DEMO -i -1\nxdg-open img/*\n</pre>\n<h3>Image sequences</h3>\n<p>The following snippet renders all of the 3000 frames in the <code>img</code> directory. This will take some time:</p>\n<pre>pyceau -r <span class=\"m\">3456</span>/012356 -s3100 -m2 -z2 -d 512x256 -e DEMO -i <span class=\"m\">100</span>:-1:2 -q\nxdg-open img/*\n</pre>\n<h3>Videos</h3>\n<p>If you have executed the last snippet to create image sequences, you can then use <code>ffmpeg</code> to combine these into a video.\nA simple command to encode all the stills in the different subdirectories in <code>img</code> into a separate video each located in <code>vid</code> using <a href=\"https://trac.ffmpeg.org/wiki/Encode/VP9\" rel=\"nofollow\">WebM and VP9</a> is:</p>\n<pre><code>for dir in img/*; do\n    id=\"${dir##*/}\"\n    ffmpeg -framerate 23 \\\n           -pattern_type glob \\\n           -i \"$dir/*.png\" \\\n           -c:v libvpx-vp9 \\\n           -pix_fmt yuva420p \\\n           \"vid/$id.webm\"\ndone\n</code></pre>\n<pre><code>for rules in $(grep -Eo '[0-9]+/[0-9]+ +\\|' README.md | cut -d\\  -f1); do                                                                                                                                         :(\n    mode=$(grep -E \"^$rules\\s+\\|\" README.md | awk '{ print $3 }' | cut -c1); [[ $mode =~ [0-3] ]] || mode=0\n    pyceau -cr $rules -d 256x64 -m $mode -e DEMO \ndone\n</code></pre>\n<p>After rendering has completed you can have a look at <code>output.webm</code>.\nSee <em>Tick spans</em> below for further details.</p>\n<h2>Tick spans</h2>\n<p>To describe tick spans for <code>-i</code> the following notation is used:</p>\n<ul>\n<li><code>n</code> describes a single page</li>\n<li><code>n,m</code> describes both pages or ranges <code>n</code> and <code>m</code></li>\n<li><code>n:m</code> describes a range from <code>n</code> to <code>m</code> including <code>m</code></li>\n<li><code>n:m:k</code> describes a range from <code>n</code> to <code>m</code> including <code>m</code> with step size <code>k</code></li>\n</ul>\n<p>E.g. <code>0:2,5:9:3,-1</code> unfolds to the list <code>[0, 1, 2, 5, 9]</code> if the last tick is <code>9</code>.</p>\n<p>Note that there is also <code>--render-ticks</code> that does something similar for rendering to stdout.</p>\n<h2>Post-processing filters</h2>\n<p>After a step is taken according to the rules of the automaton its state can be altered for display using a post-processing filter.\nThis filter is another automaton following rules specified via <code>--post-rule</code>.\nThis filter is then applied as often as defined by <code>--post-ticks</code> for each tick.</p>\n\n          </div>"}, "last_serial": 6603565, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "df8a51561fd9e167412bf7d223b91ed1", "sha256": "45eb2f3cebff5901c097dd58ba7a931c0b6ed1888e3362f7e71a612c03c3d984"}, "downloads": -1, "filename": "pyceau-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "df8a51561fd9e167412bf7d223b91ed1", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 9699, "upload_time": "2020-02-06T01:17:39", "upload_time_iso_8601": "2020-02-06T01:17:39.312901Z", "url": "https://files.pythonhosted.org/packages/6e/df/c744f7b7d01941ea48c4e6431ce12e152b4389e1e158722ac1fb830fabb1/pyceau-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "80695bec418da9d2383304febbcae767", "sha256": "5cb9891bf83c3ea1f939c03e0c70df3082947c9e092baaa71a04564c88190c70"}, "downloads": -1, "filename": "pyceau-0.0.1.tar.gz", "has_sig": false, "md5_digest": "80695bec418da9d2383304febbcae767", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19694, "upload_time": "2020-02-06T01:17:41", "upload_time_iso_8601": "2020-02-06T01:17:41.656974Z", "url": "https://files.pythonhosted.org/packages/9a/93/ba9efbf1fb947bb1943bc20880abb9ffd0b95438faafc6306416415ab2bc/pyceau-0.0.1.tar.gz", "yanked": false}], "0.0.2": [{"comment_text": "", "digests": {"md5": "cca99d5ecdb1aa046ccc5539c279102a", "sha256": "6ae19c9cc51cf6e558a9197f2e5302dc2f4d82aba61a62c5d268b0dbc81371ef"}, "downloads": -1, "filename": "pyceau-0.0.2-py3-none-any.whl", "has_sig": false, "md5_digest": "cca99d5ecdb1aa046ccc5539c279102a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11565, "upload_time": "2020-02-06T13:18:09", "upload_time_iso_8601": "2020-02-06T13:18:09.435931Z", "url": "https://files.pythonhosted.org/packages/ad/a3/abc96b236add9143ab8e3bcbb23d23d8222ee75958ce48247cf45083cf7b/pyceau-0.0.2-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "65bda7f8c0d18ac3080367d59c1e43c2", "sha256": "07413106a957a9bafde33c77c49b6af07d8b93e2248b00c4ee8545501904e231"}, "downloads": -1, "filename": "pyceau-0.0.2.tar.gz", "has_sig": false, "md5_digest": "65bda7f8c0d18ac3080367d59c1e43c2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19768, "upload_time": "2020-02-06T13:18:10", "upload_time_iso_8601": "2020-02-06T13:18:10.378373Z", "url": "https://files.pythonhosted.org/packages/9e/19/e1356e7665fad4e4ffacd5e6c126867db7f995f407eccd175a9fce1baa52/pyceau-0.0.2.tar.gz", "yanked": false}], "0.0.3": [{"comment_text": "", "digests": {"md5": "fa7f71a0b3c332897ed6d328cbc874cf", "sha256": "2a2226f278e34ecc7825ae102cf1a2e91193e5d2e583c860b47b0c0b9b16938a"}, "downloads": -1, "filename": "pyceau-0.0.3-py3-none-any.whl", "has_sig": false, "md5_digest": "fa7f71a0b3c332897ed6d328cbc874cf", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11635, "upload_time": "2020-02-06T19:34:30", "upload_time_iso_8601": "2020-02-06T19:34:30.536317Z", "url": "https://files.pythonhosted.org/packages/c0/94/8144e31756bdd14e4327a1954b64164b541b63d5e1296c3bf8298e79bf2a/pyceau-0.0.3-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "2371b082be286c366186c1fa319b7fca", "sha256": "37cd8361e9ce0b03c32269f9e07118d7ad30767ac2836cb7a2a2fcd2b8881292"}, "downloads": -1, "filename": "pyceau-0.0.3.tar.gz", "has_sig": false, "md5_digest": "2371b082be286c366186c1fa319b7fca", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19798, "upload_time": "2020-02-06T19:34:31", "upload_time_iso_8601": "2020-02-06T19:34:31.651613Z", "url": "https://files.pythonhosted.org/packages/b3/b7/adc8dd93ccdb633685205ae0a2c31068d643bdd3dc87f9dd1ce77a1b260d/pyceau-0.0.3.tar.gz", "yanked": false}], "0.0.4": [{"comment_text": "", "digests": {"md5": "4c39fe4b18a56ee0ac31ff9231f1cfa3", "sha256": "8a67c22042fe87d0a09e32ed9b30ff97ddb2bc8de228a7d1190b195f96f08c1b"}, "downloads": -1, "filename": "pyceau-0.0.4-py3-none-any.whl", "has_sig": false, "md5_digest": "4c39fe4b18a56ee0ac31ff9231f1cfa3", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11641, "upload_time": "2020-02-06T19:42:02", "upload_time_iso_8601": "2020-02-06T19:42:02.329937Z", "url": "https://files.pythonhosted.org/packages/f5/6c/c718603cd30cff7771aea5e5f04033c249d3aa41eb023beea4bf634e41c2/pyceau-0.0.4-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "7211857053c5b8882528fc771fb978d6", "sha256": "d75f9761a9cde33662213b81ada87189d351cb97b61149df61d001708ac7df16"}, "downloads": -1, "filename": "pyceau-0.0.4.tar.gz", "has_sig": false, "md5_digest": "7211857053c5b8882528fc771fb978d6", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19840, "upload_time": "2020-02-06T19:42:03", "upload_time_iso_8601": "2020-02-06T19:42:03.798780Z", "url": "https://files.pythonhosted.org/packages/8f/bf/6f828a2eb3166c3c115c2ea7e6b3252dc4938ab63650257f18513c5ddf5a/pyceau-0.0.4.tar.gz", "yanked": false}], "0.0.5": [{"comment_text": "", "digests": {"md5": "b976034739b9881024bc9e7cf255338a", "sha256": "5969bc6d215f477773073576b08d488139bd37ee6c2842f7659984c5d21d2e40"}, "downloads": -1, "filename": "pyceau-0.0.5-py3-none-any.whl", "has_sig": false, "md5_digest": "b976034739b9881024bc9e7cf255338a", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11630, "upload_time": "2020-02-06T23:32:21", "upload_time_iso_8601": "2020-02-06T23:32:21.847392Z", "url": "https://files.pythonhosted.org/packages/60/97/66894a60bd22bce701d2c623c3a56b5861a47bd38f735490a4cf8af4d101/pyceau-0.0.5-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "f52746b913dc59881ad0fa5f945babac", "sha256": "6696e87ac7ee3e1177a7fbf43691f3716f8c628b74b7b50975547cb0efcbb18a"}, "downloads": -1, "filename": "pyceau-0.0.5.tar.gz", "has_sig": false, "md5_digest": "f52746b913dc59881ad0fa5f945babac", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19809, "upload_time": "2020-02-06T23:32:23", "upload_time_iso_8601": "2020-02-06T23:32:23.276803Z", "url": "https://files.pythonhosted.org/packages/f8/71/f973e05337b3104e8dea69f88383611f384f0d9770a3b90f96970b21f06b/pyceau-0.0.5.tar.gz", "yanked": false}], "0.0.6": [{"comment_text": "", "digests": {"md5": "1d9add551dcf31b392738aca62f9c075", "sha256": "ccc40f250fca20594a40c98c139ac37cfa25265761cc1eaf8e1fe27f4bdff525"}, "downloads": -1, "filename": "pyceau-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1d9add551dcf31b392738aca62f9c075", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11708, "upload_time": "2020-02-10T16:26:17", "upload_time_iso_8601": "2020-02-10T16:26:17.942905Z", "url": "https://files.pythonhosted.org/packages/d3/1e/a4367b12150a3f3ed5460600644d72eb66c5d3d505d6e5c89b04d3f40c40/pyceau-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa799d146e7e4555d418ccb9de58fff", "sha256": "d3758465d60f64329727e66c3e079cd7f7ab35d45ce8749a64a6a4a689bc5a55"}, "downloads": -1, "filename": "pyceau-0.0.6.tar.gz", "has_sig": false, "md5_digest": "baa799d146e7e4555d418ccb9de58fff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19957, "upload_time": "2020-02-10T16:26:18", "upload_time_iso_8601": "2020-02-10T16:26:18.959089Z", "url": "https://files.pythonhosted.org/packages/3a/47/454d650c318015b16c992c00994debd1716d85ff4509da5bc38bfc7a3cf0/pyceau-0.0.6.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "1d9add551dcf31b392738aca62f9c075", "sha256": "ccc40f250fca20594a40c98c139ac37cfa25265761cc1eaf8e1fe27f4bdff525"}, "downloads": -1, "filename": "pyceau-0.0.6-py3-none-any.whl", "has_sig": false, "md5_digest": "1d9add551dcf31b392738aca62f9c075", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 11708, "upload_time": "2020-02-10T16:26:17", "upload_time_iso_8601": "2020-02-10T16:26:17.942905Z", "url": "https://files.pythonhosted.org/packages/d3/1e/a4367b12150a3f3ed5460600644d72eb66c5d3d505d6e5c89b04d3f40c40/pyceau-0.0.6-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "baa799d146e7e4555d418ccb9de58fff", "sha256": "d3758465d60f64329727e66c3e079cd7f7ab35d45ce8749a64a6a4a689bc5a55"}, "downloads": -1, "filename": "pyceau-0.0.6.tar.gz", "has_sig": false, "md5_digest": "baa799d146e7e4555d418ccb9de58fff", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 19957, "upload_time": "2020-02-10T16:26:18", "upload_time_iso_8601": "2020-02-10T16:26:18.959089Z", "url": "https://files.pythonhosted.org/packages/3a/47/454d650c318015b16c992c00994debd1716d85ff4509da5bc38bfc7a3cf0/pyceau-0.0.6.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:08:39 2020"}