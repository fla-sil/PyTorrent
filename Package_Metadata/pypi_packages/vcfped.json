{"info": {"author": "Magnus Dehli Vigeland", "author_email": "magnusdv@medisin.uio.no", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: GNU General Public License v2 or later (GPLv2+)", "Programming Language :: Python :: 2.7"], "description": "# VCFped\nVCFped is a command line utility which quickly and confidently identifies trios and close pairwise relationships in multisample VCF files.\nThe algorithm does not rely on allele frequencies or other annotations, and is highly robust to inbreeding and poor quality variants.\n\n## Installation and basic usage:\nThe simplest installation of VCFped is using pip:\n\n    >pip install vcfped\n\nTo run VCFped on a variant file *myvariants.vcf*, the basic command is \n    \n    >vcfped myvariants.vcf\n\nIn most circumstances VCFped can be run unsupervised with default parameters. For overview of the options, use the -h option:\n    \n    >vcfped -h\n    usage: vcfped.py [-h] [--quiet] [--version] [--no-gender] [--no-pairwise]\n                     [--no-trio] [--all] [-o PREFIX]\n                     [-v VARIABLES [VARIABLES ...]]\n                     [-p PERCENTILES [PERCENTILES ...]] [-e EXACTMAX]\n                     [-s SAMPLESIZE] [-d SAMPLESIZEAABB] [-t1 T1_THRESH]\n                     [-t2 T2_THRESH] [-mz MZ_THRESH] [-po PO_THRESH]\n                     [-female FEMALE_THRESH] [-male MALE_THRESH]\n                     file\n    \n\n    positional arguments:\n      file                  path to VCF file\n\n    optional arguments:\n      -h, --help            show this help message and exit\n      --quiet               do not print information on the screen\n      --version             show program's version number and exit\n      --no-gender           skip gender analysis\n      --no-pairwise         skip pairwise analysis\n      --no-trio             skip trio analysis\n      --all                 show results for all pairs/triples (not only the\n                            inferred)\n      -o PREFIX             prefix for output files\n      -v VARIABLES [VARIABLES ...]\n                            quality variables to be used for filtering\n      -p PERCENTILES [PERCENTILES ...]\n                            filtering percentile ranks\n      -e EXACTMAX           if approx. line count exceeds this, apply random\n                            sampling\n      -s SAMPLESIZE         sample at least this many variant lines (if sampling)\n      -d SAMPLESIZEAABB     sample at least this many lines where both 0/0 and 1/1\n                            occur as genotypes (if sampling)\n      -t1 T1_THRESH         threshold (%) for T1 score (AA + BB = AB)\n      -t2 T2_THRESH         threshold (%) for T2 score (BB + BB = BB)\n      -mz MZ_THRESH         threshold (%) for MZ score (IBS = 2 | neither is AA)\n      -po PO_THRESH         threshold (%) for PO score (IBS > 0 | either is BB)\n      -female FEMALE_THRESH\n                            lower limit (%) for female heterozygosity on X\n      -male MALE_THRESH     upper limit (%) for male heterozygosity on X\n      \n---\n\n## Introduction\nCorrect relationships are crucial for successful analysis of family-based sequencing, e.g. detection of de novo variants in trios. Traditional methods for relatedness inference are not easily adaptable to sequencing data, since several basic assumptions of these methods are not satisfied (e.g. independent marker loci, correct allele frequencies, non-censored data). VCFped sidesteps these assumptions by exploiting forced allele sharing between closely related individuals. In particular, the algorithm does not depend on allele frequencies or other variant annotations, making the program well suited as a quality control step prior to annotation and downstream analysis. \n\nVCFped is written in Python and has been extensively tested on variant files from whole-exome sequencing (WES), whole-genome sequencing (WGS) and the TruSightOne gene panel from Illumina.\n\n## Filtering strategy\nThe relatedness testing algorithms of VCFped depend on correct genotypes for the variants. To minimize the inclusion of wrong genotypes a semi-automated filtering strategy has been implemented, using the quality variables present in the variant file (e.g. QUAL, DP, GQ). The complete distributions of the available variables are computed when loading the file, and a stepwise filtering process is created based on percentiles of these distributions (see Figure 1). The default percentile ranks are 10, 30 and 50, but these can be modified using the *-p* option.\n\n## Relatedness inference using forced allele sharing\nFor a few close relationships the genotype of one individual can be determined (under Mendelian inheritance) by the genotypes of others. VCFped exploits such forced allele sharing to identify trios, parent-child pairs and monozygotic twins. In the description below, *A* and *B* denote the labels of a diallelic locus, while *g<sub>i</sub>* is the genotype of individual *i*. For trio and pariwise relationships only autosomal loci are considered, while X-linked loci are used for gender inference.\n\n### Trio relationships\nTo identify trios a combination of two tests are used. The first (*AA + BB = AB*) recognizes the three basic trio types: regular (parent-offspring), inverted (two siblings and one parent) and  generational (child-parent-grandparent). The second (*BB + BB = BB*) discriminates regular trios from the other two types. Both test scores are computed for every cyclic ordering of each triple of samples in the input variant file.\n\n#### *T1 score = freq(g<sub>3</sub> = AB | g<sub>1</sub> = AA, g<sub>2</sub> = BB or vice versa)*\nWhat's computed: The conditional frequency of genotype AB in one sample given AA and BB in the two others. The AB genotype is forced for the child of a regular trio, the parent in an inverted trio, and the middle individual in a generational trio.  \nDefault threshold: 90 % (modify with option -t1)\n\n#### *T2 score = freq(g<sub>3</sub> = BB | g<sub>1</sub> = g<sub>2</sub> = BB)*  \nWhat's computed: The conditional frequency of genotype BB in one sample given BB in both the others. This is forced for the child of a regular trio, but also if individual 3 is a monozygotic twin (or a sample duplicate!) of one of the others.  \nDefault threshold: 95 % (modify with option -t2)\n\n### Pairwise relationships\nFor pairwise relatedness VCFped tests for monozygotic twins (MZ) and parent-offspring (PO), which both obey patterns of forced allele sharing. MZ twins always have both alleles identical by state (IBS), while parent-offspring are always IBS > 0. The conditions in the following expressions ensure that the scores are unaffected by the data censoring of VCF files.\n\n#### *MZ score = freq(IBS = 2 | neither is AA)*\nWhat's computed: The frequency of equal genotypes among all variants where both have a least one B.  \nDefault threshold: 95 % (modify with option -mz)\n\n#### *PO score = freq(IBS > 0 | either is BB)*\nWhat's computed: The frequency of at least one shared allele, given that at least one is homozygous BB.    \nDefault threshold: 99 % (modify with option -po)\n\n### Gender prediction\nVCFped predicts the gender of each sample by using variants on X (except pseudoautosomal regions):\n\n#### *XHET = freq(AB | AB or BB)*\nWhat's computed: The heterozygosity on X among all non-AA variants.  \nDefault interpretation: *male* if XHET < 5 %, *female* if XHET > 25 % (modify with options -male and -female)", "description_content_type": null, "docs_url": null, "download_url": "UNKNOWN", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/magnusdv/vcfped", "keywords": "trio,relatedness,variant files,vcf,high-throughput sequencing,exome sequencing,family-based sequencing", "license": "GPL-2", "maintainer": null, "maintainer_email": null, "name": "vcfped", "package_url": "https://pypi.org/project/vcfped/", "platform": "UNKNOWN", "project_url": "https://pypi.org/project/vcfped/", "project_urls": {"Download": "UNKNOWN", "Homepage": "https://github.com/magnusdv/vcfped"}, "release_url": "https://pypi.org/project/vcfped/1.3.1/", "requires_dist": null, "requires_python": null, "summary": "Identification of trios and other close relationships in multisample VCF files", "version": "1.3.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            # VCFped<br>VCFped is a command line utility which quickly and confidently identifies trios and close pairwise relationships in multisample VCF files.<br>The algorithm does not rely on allele frequencies or other annotations, and is highly robust to inbreeding and poor quality variants.<br><br>## Installation and basic usage:<br>The simplest installation of VCFped is using pip:<br><br>    &gt;pip install vcfped<br><br>To run VCFped on a variant file *myvariants.vcf*, the basic command is <br>    <br>    &gt;vcfped myvariants.vcf<br><br>In most circumstances VCFped can be run unsupervised with default parameters. For overview of the options, use the -h option:<br>    <br>    &gt;vcfped -h<br>    usage: vcfped.py [-h] [--quiet] [--version] [--no-gender] [--no-pairwise]<br>                     [--no-trio] [--all] [-o PREFIX]<br>                     [-v VARIABLES [VARIABLES ...]]<br>                     [-p PERCENTILES [PERCENTILES ...]] [-e EXACTMAX]<br>                     [-s SAMPLESIZE] [-d SAMPLESIZEAABB] [-t1 T1_THRESH]<br>                     [-t2 T2_THRESH] [-mz MZ_THRESH] [-po PO_THRESH]<br>                     [-female FEMALE_THRESH] [-male MALE_THRESH]<br>                     file<br>    <br><br>    positional arguments:<br>      file                  path to VCF file<br><br>    optional arguments:<br>      -h, --help            show this help message and exit<br>      --quiet               do not print information on the screen<br>      --version             show program's version number and exit<br>      --no-gender           skip gender analysis<br>      --no-pairwise         skip pairwise analysis<br>      --no-trio             skip trio analysis<br>      --all                 show results for all pairs/triples (not only the<br>                            inferred)<br>      -o PREFIX             prefix for output files<br>      -v VARIABLES [VARIABLES ...]<br>                            quality variables to be used for filtering<br>      -p PERCENTILES [PERCENTILES ...]<br>                            filtering percentile ranks<br>      -e EXACTMAX           if approx. line count exceeds this, apply random<br>                            sampling<br>      -s SAMPLESIZE         sample at least this many variant lines (if sampling)<br>      -d SAMPLESIZEAABB     sample at least this many lines where both 0/0 and 1/1<br>                            occur as genotypes (if sampling)<br>      -t1 T1_THRESH         threshold (%) for T1 score (AA + BB = AB)<br>      -t2 T2_THRESH         threshold (%) for T2 score (BB + BB = BB)<br>      -mz MZ_THRESH         threshold (%) for MZ score (IBS = 2 | neither is AA)<br>      -po PO_THRESH         threshold (%) for PO score (IBS &gt; 0 | either is BB)<br>      -female FEMALE_THRESH<br>                            lower limit (%) for female heterozygosity on X<br>      -male MALE_THRESH     upper limit (%) for male heterozygosity on X<br>      <br>---<br><br>## Introduction<br>Correct relationships are crucial for successful analysis of family-based sequencing, e.g. detection of de novo variants in trios. Traditional methods for relatedness inference are not easily adaptable to sequencing data, since several basic assumptions of these methods are not satisfied (e.g. independent marker loci, correct allele frequencies, non-censored data). VCFped sidesteps these assumptions by exploiting forced allele sharing between closely related individuals. In particular, the algorithm does not depend on allele frequencies or other variant annotations, making the program well suited as a quality control step prior to annotation and downstream analysis. <br><br>VCFped is written in Python and has been extensively tested on variant files from whole-exome sequencing (WES), whole-genome sequencing (WGS) and the TruSightOne gene panel from Illumina.<br><br>## Filtering strategy<br>The relatedness testing algorithms of VCFped depend on correct genotypes for the variants. To minimize the inclusion of wrong genotypes a semi-automated filtering strategy has been implemented, using the quality variables present in the variant file (e.g. QUAL, DP, GQ). The complete distributions of the available variables are computed when loading the file, and a stepwise filtering process is created based on percentiles of these distributions (see Figure 1). The default percentile ranks are 10, 30 and 50, but these can be modified using the *-p* option.<br><br>## Relatedness inference using forced allele sharing<br>For a few close relationships the genotype of one individual can be determined (under Mendelian inheritance) by the genotypes of others. VCFped exploits such forced allele sharing to identify trios, parent-child pairs and monozygotic twins. In the description below, *A* and *B* denote the labels of a diallelic locus, while *g&lt;sub&gt;i&lt;/sub&gt;* is the genotype of individual *i*. For trio and pariwise relationships only autosomal loci are considered, while X-linked loci are used for gender inference.<br><br>### Trio relationships<br>To identify trios a combination of two tests are used. The first (*AA + BB = AB*) recognizes the three basic trio types: regular (parent-offspring), inverted (two siblings and one parent) and  generational (child-parent-grandparent). The second (*BB + BB = BB*) discriminates regular trios from the other two types. Both test scores are computed for every cyclic ordering of each triple of samples in the input variant file.<br><br>#### *T1 score = freq(g&lt;sub&gt;3&lt;/sub&gt; = AB | g&lt;sub&gt;1&lt;/sub&gt; = AA, g&lt;sub&gt;2&lt;/sub&gt; = BB or vice versa)*<br>What's computed: The conditional frequency of genotype AB in one sample given AA and BB in the two others. The AB genotype is forced for the child of a regular trio, the parent in an inverted trio, and the middle individual in a generational trio.  <br>Default threshold: 90 % (modify with option -t1)<br><br>#### *T2 score = freq(g&lt;sub&gt;3&lt;/sub&gt; = BB | g&lt;sub&gt;1&lt;/sub&gt; = g&lt;sub&gt;2&lt;/sub&gt; = BB)*  <br>What's computed: The conditional frequency of genotype BB in one sample given BB in both the others. This is forced for the child of a regular trio, but also if individual 3 is a monozygotic twin (or a sample duplicate!) of one of the others.  <br>Default threshold: 95 % (modify with option -t2)<br><br>### Pairwise relationships<br>For pairwise relatedness VCFped tests for monozygotic twins (MZ) and parent-offspring (PO), which both obey patterns of forced allele sharing. MZ twins always have both alleles identical by state (IBS), while parent-offspring are always IBS &gt; 0. The conditions in the following expressions ensure that the scores are unaffected by the data censoring of VCF files.<br><br>#### *MZ score = freq(IBS = 2 | neither is AA)*<br>What's computed: The frequency of equal genotypes among all variants where both have a least one B.  <br>Default threshold: 95 % (modify with option -mz)<br><br>#### *PO score = freq(IBS &gt; 0 | either is BB)*<br>What's computed: The frequency of at least one shared allele, given that at least one is homozygous BB.    <br>Default threshold: 99 % (modify with option -po)<br><br>### Gender prediction<br>VCFped predicts the gender of each sample by using variants on X (except pseudoautosomal regions):<br><br>#### *XHET = freq(AB | AB or BB)*<br>What's computed: The heterozygosity on X among all non-AA variants.  <br>Default interpretation: *male* if XHET &lt; 5 %, *female* if XHET &gt; 25 % (modify with options -male and -female)\n          </div>"}, "last_serial": 2903211, "releases": {"1.0": [{"comment_text": "", "digests": {"md5": "8573ee49d41e22529962b60887bdf8ae", "sha256": "d811208e6cd5e97eba7fb9149476882cd068c6b6bd9959977bc784a522f9c529"}, "downloads": -1, "filename": "vcfped-1.0.zip", "has_sig": false, "md5_digest": "8573ee49d41e22529962b60887bdf8ae", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 575393, "upload_time": "2016-10-14T13:43:41", "upload_time_iso_8601": "2016-10-14T13:43:41.258236Z", "url": "https://files.pythonhosted.org/packages/4f/60/b57dc1029649c6d0d30564284e0f925cc461f55ec7074b490c13d9025d40/vcfped-1.0.zip", "yanked": false}], "1.0.1": [{"comment_text": "", "digests": {"md5": "8dfa163d27e8d2d662735cd3aa34c2a2", "sha256": "2cc975758fecda41ca01a07f520a4538c6c347c1fc6d4bbc1c64abc2fa06e755"}, "downloads": -1, "filename": "vcfped-1.0.1.zip", "has_sig": false, "md5_digest": "8dfa163d27e8d2d662735cd3aa34c2a2", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 575455, "upload_time": "2016-10-14T13:57:41", "upload_time_iso_8601": "2016-10-14T13:57:41.017678Z", "url": "https://files.pythonhosted.org/packages/1e/14/15d71c10fcf0ff1b3a71e7de04bcb838ec9e82c8a6eb5353002b7782864b/vcfped-1.0.1.zip", "yanked": false}], "1.0.2": [{"comment_text": "", "digests": {"md5": "ed70d8761c6a8de2f62420df5155f8fc", "sha256": "e8e34604aba4fc5350c36ef974021f849c2e33131920202daac01fc5b1a127fa"}, "downloads": -1, "filename": "vcfped-1.0.2.zip", "has_sig": false, "md5_digest": "ed70d8761c6a8de2f62420df5155f8fc", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 576239, "upload_time": "2016-10-19T15:13:18", "upload_time_iso_8601": "2016-10-19T15:13:18.298313Z", "url": "https://files.pythonhosted.org/packages/2f/d3/12a6c4b1c4ab1c391cae3a9d4a4c66c16d9248b6ea1107c7beaba9723337/vcfped-1.0.2.zip", "yanked": false}], "1.0.2b0": [{"comment_text": "", "digests": {"md5": "9936fa6d3873d3b6d5bd75c4b9d972c7", "sha256": "1d18fe501792f6c75a0b93c5edd908991eb53a8cacc5d84fac4dbe3a2cffb663"}, "downloads": -1, "filename": "vcfped-1.0.2b0.zip", "has_sig": false, "md5_digest": "9936fa6d3873d3b6d5bd75c4b9d972c7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 575007, "upload_time": "2016-10-14T14:21:17", "upload_time_iso_8601": "2016-10-14T14:21:17.987222Z", "url": "https://files.pythonhosted.org/packages/bd/8f/2696b2795b9be7592e24bce3b5f897daeb29cb50f811f98478ff5ec190d9/vcfped-1.0.2b0.zip", "yanked": false}], "1.1.0": [{"comment_text": "", "digests": {"md5": "f62b172770333e5b1742f576b999db78", "sha256": "d2528f17a3b80f513103d5248eadbb1a38e7f5d522a46ba69274b40457218dee"}, "downloads": -1, "filename": "vcfped-1.1.0.zip", "has_sig": false, "md5_digest": "f62b172770333e5b1742f576b999db78", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 582584, "upload_time": "2016-10-31T11:17:22", "upload_time_iso_8601": "2016-10-31T11:17:22.301280Z", "url": "https://files.pythonhosted.org/packages/d6/e0/2e58b7ed0e46520034ea4e198ce4754fd2b72c5f7179ffc3537afb3961bb/vcfped-1.1.0.zip", "yanked": false}], "1.2.0": [{"comment_text": "", "digests": {"md5": "4497d18c3fa689bd304362cbb39e08c3", "sha256": "9e31567e72bb0273d7320827d97f1f900556a0ebf3ea410c2997b3a2dc3007ce"}, "downloads": -1, "filename": "vcfped-1.2.0.zip", "has_sig": false, "md5_digest": "4497d18c3fa689bd304362cbb39e08c3", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 584830, "upload_time": "2017-05-19T08:39:56", "upload_time_iso_8601": "2017-05-19T08:39:56.328062Z", "url": "https://files.pythonhosted.org/packages/7c/37/c693b01762a97de5dcf483d43771abbcc8f8c69daf79ce3663cb6a3fa97d/vcfped-1.2.0.zip", "yanked": false}], "1.3.0": [{"comment_text": "", "digests": {"md5": "212fe25b5102db9d9adafe5c6a23d9da", "sha256": "2e2a9e782dc33cb4eeb6b2fc6b1a9d1c92b85c36097aa9105cd6e15149d0517a"}, "downloads": -1, "filename": "vcfped-1.3.0.zip", "has_sig": false, "md5_digest": "212fe25b5102db9d9adafe5c6a23d9da", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587537, "upload_time": "2017-05-27T11:52:07", "upload_time_iso_8601": "2017-05-27T11:52:07.837660Z", "url": "https://files.pythonhosted.org/packages/e4/04/e15f17f131be72a7065f3b98680cca642f429a984ff6af2439bbb63d4f7c/vcfped-1.3.0.zip", "yanked": false}], "1.3.1": [{"comment_text": "", "digests": {"md5": "83a4824388af9485f26f1be01900164f", "sha256": "cf542edd7439455edeed25d6ede4babbf3fb28d40359cf2f9ad4a8ee99401f77"}, "downloads": -1, "filename": "vcfped-1.3.1.zip", "has_sig": false, "md5_digest": "83a4824388af9485f26f1be01900164f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587578, "upload_time": "2017-05-27T12:24:32", "upload_time_iso_8601": "2017-05-27T12:24:32.091803Z", "url": "https://files.pythonhosted.org/packages/6f/a9/469ec9bea5de8b94964a1c186ef299cc8c2b01d2c51154f8378552351954/vcfped-1.3.1.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "83a4824388af9485f26f1be01900164f", "sha256": "cf542edd7439455edeed25d6ede4babbf3fb28d40359cf2f9ad4a8ee99401f77"}, "downloads": -1, "filename": "vcfped-1.3.1.zip", "has_sig": false, "md5_digest": "83a4824388af9485f26f1be01900164f", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 587578, "upload_time": "2017-05-27T12:24:32", "upload_time_iso_8601": "2017-05-27T12:24:32.091803Z", "url": "https://files.pythonhosted.org/packages/6f/a9/469ec9bea5de8b94964a1c186ef299cc8c2b01d2c51154f8378552351954/vcfped-1.3.1.zip", "yanked": false}], "timestamp": "Fri May  8 03:37:30 2020"}