{"info": {"author": "John H Williamson", "author_email": "johnhw@gmail.com", "bugtrack_url": null, "classifiers": [], "description": "# pfilter\nBasic Python particle filter. Written to be simple and clear; not necessarily most efficient or most flexible implementation. Depends on [NumPy](http://numpy.org) only. \n\n## Installation\n\nAvailable via PyPI:\n\n    pip install pfilter\n    \nOr install the git version:\n\n    pip install git+https://github.com/johnhw/pfilter.git\n\n## Usage\nCreate a `ParticleFilter` object, then call `update(observation)` with an observation array to update the state of the particle filter.\n\nYou need to specify at the minimum:\n* an **observation function** `observe_fn(state) => observation matrix` which will return a predicted observation for an internal state.\n* a function that samples from an **initial distributions** `prior_fn=>(n,d) state matrix` for all of the internal state variables. These are usually distributions from `scipy.stats`. The utility function `independent_sample` makes it easy to concatenate sampling functions to sample the whole state vector.\n* a **weight function** `weight_fn(real_observed, hyp_observed_array) => weight vector` which specifies how well each of the `hyp_observed` arrays match the real observation `real_observed`. This must produce a strictly positive weight value, where larger means more similar.\n\nTypically, you would also specify:\n*  a `dynamics_fn` to update the state based on internal (prediction) dynamics, and a \n* `noise_fn` to add diffusion into the sampling process. \n\nFor example, assuming there is a function `blob` which draws a blob on an image of some size (the same size as the observation):\n\n```python\n        from pfilter import ParticleFilter, gaussian_noise, squared_error, independent_sample\n        columns = [\"x\", \"y\", \"radius\", \"dx\", \"dy\"]\n        from scipy.stats import norm, gamma, uniform \n        \n        # prior sampling function for each variable\n        # (assumes x and y are coordinates in the range 0-32)    \n        prior_fn = independent_sample([uniform(loc=0, scale=32).rvs, \n                    uniform(loc=0, scale=32).rvs, \n                    gamma(a=2,loc=0,scale=10).rvs,\n                    norm(loc=0, scale=0.5).rvs,\n                    norm(loc=0, scale=0.5).rvs])\n                                    \n        # very simple linear dynamics: x += dx\n        def velocity(x):\n            xp = np.array(x)\n            xp[0:2] += xp[3:5]        \n        return xp\n        \n        # create the filter\n        pf = pfilter.ParticleFilter(\n                        prior_fn=prior_fn, \n                        observe_fn=blob,\n                        n_particles=200,\n                        dynamics_fn=velocity,\n                        noise_fn=lambda x: \n                                    gaussian_noise(x, sigmas=[0.2, 0.2, 0.1, 0.05, 0.05]),\n                        weight_fn=lambda x,y:squared_error(x, y, sigma=2),\n                        resample_proportion=0.1,\n                        column_names = columns)\n                        \n        # assuming image of the same dimensions/type as blob will produce\n        pf.update(image) \n ```\n\nSee the notebook [examples/test_filter.py](examples/test_filter.py) for a working example using `skimage` and `OpenCV` which tracks a moving white circle.", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/johnhw/pfilter/tarball/0.2", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/johnhw/pfilter", "keywords": "particle,probabilistic,stochastic,filter,filtering", "license": "", "maintainer": "", "maintainer_email": "", "name": "pfilter", "package_url": "https://pypi.org/project/pfilter/", "platform": "", "project_url": "https://pypi.org/project/pfilter/", "project_urls": {"Download": "https://github.com/johnhw/pfilter/tarball/0.2", "Homepage": "https://github.com/johnhw/pfilter"}, "release_url": "https://pypi.org/project/pfilter/0.2.2/", "requires_dist": null, "requires_python": "", "summary": "A basic particle filter", "version": "0.2.2", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>pfilter</h1>\n<p>Basic Python particle filter. Written to be simple and clear; not necessarily most efficient or most flexible implementation. Depends on <a href=\"http://numpy.org\" rel=\"nofollow\">NumPy</a> only.</p>\n<h2>Installation</h2>\n<p>Available via PyPI:</p>\n<pre><code>pip install pfilter\n</code></pre>\n<p>Or install the git version:</p>\n<pre><code>pip install git+https://github.com/johnhw/pfilter.git\n</code></pre>\n<h2>Usage</h2>\n<p>Create a <code>ParticleFilter</code> object, then call <code>update(observation)</code> with an observation array to update the state of the particle filter.</p>\n<p>You need to specify at the minimum:</p>\n<ul>\n<li>an <strong>observation function</strong> <code>observe_fn(state) =&gt; observation matrix</code> which will return a predicted observation for an internal state.</li>\n<li>a function that samples from an <strong>initial distributions</strong> <code>prior_fn=&gt;(n,d) state matrix</code> for all of the internal state variables. These are usually distributions from <code>scipy.stats</code>. The utility function <code>independent_sample</code> makes it easy to concatenate sampling functions to sample the whole state vector.</li>\n<li>a <strong>weight function</strong> <code>weight_fn(real_observed, hyp_observed_array) =&gt; weight vector</code> which specifies how well each of the <code>hyp_observed</code> arrays match the real observation <code>real_observed</code>. This must produce a strictly positive weight value, where larger means more similar.</li>\n</ul>\n<p>Typically, you would also specify:</p>\n<ul>\n<li>a <code>dynamics_fn</code> to update the state based on internal (prediction) dynamics, and a</li>\n<li><code>noise_fn</code> to add diffusion into the sampling process.</li>\n</ul>\n<p>For example, assuming there is a function <code>blob</code> which draws a blob on an image of some size (the same size as the observation):</p>\n<pre>        <span class=\"kn\">from</span> <span class=\"nn\">pfilter</span> <span class=\"kn\">import</span> <span class=\"n\">ParticleFilter</span><span class=\"p\">,</span> <span class=\"n\">gaussian_noise</span><span class=\"p\">,</span> <span class=\"n\">squared_error</span><span class=\"p\">,</span> <span class=\"n\">independent_sample</span>\n        <span class=\"n\">columns</span> <span class=\"o\">=</span> <span class=\"p\">[</span><span class=\"s2\">\"x\"</span><span class=\"p\">,</span> <span class=\"s2\">\"y\"</span><span class=\"p\">,</span> <span class=\"s2\">\"radius\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dx\"</span><span class=\"p\">,</span> <span class=\"s2\">\"dy\"</span><span class=\"p\">]</span>\n        <span class=\"kn\">from</span> <span class=\"nn\">scipy.stats</span> <span class=\"kn\">import</span> <span class=\"n\">norm</span><span class=\"p\">,</span> <span class=\"n\">gamma</span><span class=\"p\">,</span> <span class=\"n\">uniform</span> \n        \n        <span class=\"c1\"># prior sampling function for each variable</span>\n        <span class=\"c1\"># (assumes x and y are coordinates in the range 0-32)    </span>\n        <span class=\"n\">prior_fn</span> <span class=\"o\">=</span> <span class=\"n\">independent_sample</span><span class=\"p\">([</span><span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rvs</span><span class=\"p\">,</span> \n                    <span class=\"n\">uniform</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">32</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rvs</span><span class=\"p\">,</span> \n                    <span class=\"n\">gamma</span><span class=\"p\">(</span><span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rvs</span><span class=\"p\">,</span>\n                    <span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rvs</span><span class=\"p\">,</span>\n                    <span class=\"n\">norm</span><span class=\"p\">(</span><span class=\"n\">loc</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">scale</span><span class=\"o\">=</span><span class=\"mf\">0.5</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">rvs</span><span class=\"p\">])</span>\n                                    \n        <span class=\"c1\"># very simple linear dynamics: x += dx</span>\n        <span class=\"k\">def</span> <span class=\"nf\">velocity</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">):</span>\n            <span class=\"n\">xp</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">)</span>\n            <span class=\"n\">xp</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">:</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">+=</span> <span class=\"n\">xp</span><span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">:</span><span class=\"mi\">5</span><span class=\"p\">]</span>        \n        <span class=\"k\">return</span> <span class=\"n\">xp</span>\n        \n        <span class=\"c1\"># create the filter</span>\n        <span class=\"n\">pf</span> <span class=\"o\">=</span> <span class=\"n\">pfilter</span><span class=\"o\">.</span><span class=\"n\">ParticleFilter</span><span class=\"p\">(</span>\n                        <span class=\"n\">prior_fn</span><span class=\"o\">=</span><span class=\"n\">prior_fn</span><span class=\"p\">,</span> \n                        <span class=\"n\">observe_fn</span><span class=\"o\">=</span><span class=\"n\">blob</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_particles</span><span class=\"o\">=</span><span class=\"mi\">200</span><span class=\"p\">,</span>\n                        <span class=\"n\">dynamics_fn</span><span class=\"o\">=</span><span class=\"n\">velocity</span><span class=\"p\">,</span>\n                        <span class=\"n\">noise_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">:</span> \n                                    <span class=\"n\">gaussian_noise</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">sigmas</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"mf\">0.1</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">,</span> <span class=\"mf\">0.05</span><span class=\"p\">]),</span>\n                        <span class=\"n\">weight_fn</span><span class=\"o\">=</span><span class=\"k\">lambda</span> <span class=\"n\">x</span><span class=\"p\">,</span><span class=\"n\">y</span><span class=\"p\">:</span><span class=\"n\">squared_error</span><span class=\"p\">(</span><span class=\"n\">x</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">),</span>\n                        <span class=\"n\">resample_proportion</span><span class=\"o\">=</span><span class=\"mf\">0.1</span><span class=\"p\">,</span>\n                        <span class=\"n\">column_names</span> <span class=\"o\">=</span> <span class=\"n\">columns</span><span class=\"p\">)</span>\n                        \n        <span class=\"c1\"># assuming image of the same dimensions/type as blob will produce</span>\n        <span class=\"n\">pf</span><span class=\"o\">.</span><span class=\"n\">update</span><span class=\"p\">(</span><span class=\"n\">image</span><span class=\"p\">)</span> \n</pre>\n<p>See the notebook <a href=\"examples/test_filter.py\" rel=\"nofollow\">examples/test_filter.py</a> for a working example using <code>skimage</code> and <code>OpenCV</code> which tracks a moving white circle.</p>\n\n          </div>"}, "last_serial": 4820233, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "86448a680915e87c232877b8942f520a", "sha256": "1180512e67f48e1cd012bc0bbd9b2f00de86b647473f6f4a064d2cc2a6a75480"}, "downloads": -1, "filename": "pfilter-0.1.zip", "has_sig": false, "md5_digest": "86448a680915e87c232877b8942f520a", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4946, "upload_time": "2017-02-02T16:05:00", "upload_time_iso_8601": "2017-02-02T16:05:00.509810Z", "url": "https://files.pythonhosted.org/packages/56/8c/932f1203c876e2a596c646605de267bbffa27f45f524c3754f22d7ebca7e/pfilter-0.1.zip", "yanked": false}], "0.2": [{"comment_text": "", "digests": {"md5": "58457b062b7b50c884d18fec0136b523", "sha256": "b48d0f1fe14331a2c41f42006e6dc0da7a2503b4d64a5f481504cd095f066982"}, "downloads": -1, "filename": "pfilter-0.2.tar.gz", "has_sig": false, "md5_digest": "58457b062b7b50c884d18fec0136b523", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 4994, "upload_time": "2019-02-14T12:37:24", "upload_time_iso_8601": "2019-02-14T12:37:24.127072Z", "url": "https://files.pythonhosted.org/packages/cf/d5/c94e57bb840f65150530adca15e5848de27d63411a29689fe06db5d1783b/pfilter-0.2.tar.gz", "yanked": false}], "0.2.1": [{"comment_text": "", "digests": {"md5": "410a587613870d81b2c30d98de6a012b", "sha256": "5eb1c75a64d7eede48e7aff5268a1827145de1bdf5fe679a4ed240ab9fc6b887"}, "downloads": -1, "filename": "pfilter-0.2.1.zip", "has_sig": false, "md5_digest": "410a587613870d81b2c30d98de6a012b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 6690, "upload_time": "2019-02-14T12:47:31", "upload_time_iso_8601": "2019-02-14T12:47:31.597154Z", "url": "https://files.pythonhosted.org/packages/71/66/7c9705021f6fb28e275cbfc2e78559d6c8f6c45d839506d48b4d05500fad/pfilter-0.2.1.zip", "yanked": false}], "0.2.2": [{"comment_text": "", "digests": {"md5": "fc5f0b327be64dee91960bdf207cf3f7", "sha256": "c2b549a240dc0d60048e1d9772a240d4bade53dc0701c4f2f5e9336eb7e0fc67"}, "downloads": -1, "filename": "pfilter-0.2.2.zip", "has_sig": false, "md5_digest": "fc5f0b327be64dee91960bdf207cf3f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9438, "upload_time": "2019-02-14T12:49:37", "upload_time_iso_8601": "2019-02-14T12:49:37.109877Z", "url": "https://files.pythonhosted.org/packages/24/4d/b4bbae9105ca1da701564b6f75f8b5ddc00d05c77923277a5ff38b2ce537/pfilter-0.2.2.zip", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "fc5f0b327be64dee91960bdf207cf3f7", "sha256": "c2b549a240dc0d60048e1d9772a240d4bade53dc0701c4f2f5e9336eb7e0fc67"}, "downloads": -1, "filename": "pfilter-0.2.2.zip", "has_sig": false, "md5_digest": "fc5f0b327be64dee91960bdf207cf3f7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 9438, "upload_time": "2019-02-14T12:49:37", "upload_time_iso_8601": "2019-02-14T12:49:37.109877Z", "url": "https://files.pythonhosted.org/packages/24/4d/b4bbae9105ca1da701564b6f75f8b5ddc00d05c77923277a5ff38b2ce537/pfilter-0.2.2.zip", "yanked": false}], "timestamp": "Fri May  8 02:55:57 2020"}