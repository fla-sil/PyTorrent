{"info": {"author": "Stefan Badelt", "author_email": "badelt@caltech.edu", "bugtrack_url": null, "classifiers": ["Development Status :: 3 - Alpha", "Programming Language :: Python :: 2.7", "Programming Language :: Python :: 3"], "description": "# dsdobjects: an object library for DSD programming\n\nThis Python module provides a library of protype objects and base classes for\ndomain-level strand displacement (DSD) programming. There are two types of\nusage: \n 1) ready-to-go prototype objects, \n 2) tweak-em-yourself core objects.\n\nIf you start with a new project, you want to use the prototypes. These are\nout-of-the box functional classes that can be initialized, for example, using\nvarious standards of the text file format *.pil. \n\n## Installation\nTo install this library use pip:\n```\n$ pip install dsdobjects\n```\nor the following command in the root directory:\n```\n$ python ./setup.py install\n```\n\n\n### Quick Start with object prototypes.\n```py\nfrom dsdobjects import SequenceConstraint, StrandOrder, LogicDomain, Domain, Complex, Macrostate, Reaction\n```\n\n```py\n# Define a few toy domains:\na = LogicDomain('a', dtype='long')\nb = LogicDomain('b', dtype='long', length=9)\nc = LogicDomain('c', dtype='short', length=6)\n\n# LogicDomains have exactly one complement, it can be initialized \n# and/or accessed using the __invert__ operator. The built-in \n# memory management ensures that there is only one object for each domain.\nassert (a is ~(~a))\n\n# Use the Domains to define a Complex ...\ncplx = Complex([a, b, c, ~b, '+', ~a], list('((.)+)'), name='rudolf')\n\n# ... and test some of the built-in complex properties:\ncplx.kernel_string\ncplx.canonical_form\ncplx.size\nfor r in cplx.rotate():\n    print(r.kernel_string)\ncplx.pair_table\n\n# If you were to define two complexes as one disconnected complex ... \ncplx = Complex([a, b, c, ~b, '+', ~a], list('.(.)+.'), name='cplx')\nassert cplx.is_connected is False\n\n# ... you can quickly and return the indiviudal complexes:\ncx1, cx2 = cplx.split()\n```\n\n### Quick Start with text input.\nFor example initialize prototype objects by loading a system (or a single line) of \n*.pil file format:\n\n```py\nimport dsdobjects.objectio as oio\noio.set_prototypes()\n\ndomains, complexes, macrostates, detailed_rxns, condensed_rxns = oio.read_pil(filename.pil)\n\nmyobject = oio.read_pil_line(\"length d5 = 7\")\nassert isinstance(myobject, LogicDomain)\n\nmyobject = oio.read_pil_line(\"sequence d6 = NNNNN\")\nassert isinstance(myobject, Domain)\n```\n\n## Abut the core objects.\nIf prototypes are not sufficient, you can make your own objects by inheriting\nfrom the core objects. Core objects provide a basic set of __builtin__\nfunctions (e.g. equality, sorting), basic properties, memory management.  One\nway to get started is by copying the prototypes file into your project, and\nadapt it to your needs. Consider a pull request back into the main dsdobjects\nrepository!\n\n\n### Quick Start with core objects.\nInheritance from dsdobjects.base_classes provides only basic functions such as\n'~', '==', '!=', and access to the built-in memory management for each class.\nSome potential ambiguities, such as requesting the complement of a Domain,  or\nthe length of a complex must be defined upon inheritance.\n\n```py\nfrom dsdobjects.core import DL_Domain\n\n# A personalized domain that extends the DL_Domain base class.\nclass MyDomain(DL_Domain):\n\n    def __init__(self, name, dtype=None, length=None):\n        super(MyDomain, self).__init__(name, dtype, length)\n\n    @property\n    def complement(self):\n        # Automatically initialize or return the complementary domain.\n        if self._complement is None:\n            cname = self._name[:-1] if self.is_complement else self._name + '*'\n            if cname in DL_Domain.MEMORY:\n                self._complement = DL_Domain.MEMORY[cname]\n            else :\n                self._complement = MyDomain(cname, self.dtype, self.length)\n        return self._complement\n```\n\n## Version\n0.7.1 -- pil I/O for prototypes and customn objects\n  * prototype complex concentration\n  * read_pil supports inherited objects\n  * logging support\n  * bug fix for adding core objects\n\n0.7 -- Python 3.x support / prototypes\n  * basic support of prototype objects\n  * added StrandOrder base_class and prototpye\n  * allow parsing of infinite error bars for reaction rates\n  * DSD_Restingset renamed to DSD_Macrostate\n  * broken backward compatibility:\n      reaction rates are now namedtuples\n\n0.6.3 -- added parser for seesaw language\n\n0.6.2 -- bugfix for restingsets with given representative\n\n0.6.1 -- adapted setup.py when used as pypi dependency\n\n0.6 -- PIL parser supports concentration format\n  * \"non-equal\" bugfixes in base_classes.py\n  * supports rate-error bars when parsing PIL format\n\n0.5 -- improved canonical forms\n\n## Author\nStefan Badelt\n\n### Contributors\nThis library contains adapted code from various related Python packages coded\nin the [DNA and Natural Algorithms Group], Caltech:\n  * \"DNAObjects\" coded by Joseph Berleant and Joseph Schaeffer \n  * [peppercornenumerator] coded by Kathrik Sarma, Casey Grun and Erik Winfree\n  * [nuskell] coded by Seung Woo Shin\n\n## Projects depending on dsdobjects\n  * [peppercornenumerator]\n  * [nuskell]\n\n\n## License\nMIT\n\n[nuskell]: <http://www.github.com/DNA-and-Natural-Algorithms-Group/nuskell>\n[peppercornenumerator]: <http://www.github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator>\n[DNA and Natural Algorithms Group]: <http://dna.caltech.edu>\n\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "https://github.com/DNA-and-Natural-Algorithms-Group/dsdobjects/archive/v0.7.1.tar.gz", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/DNA-and-Natural-Algorithms-Group/dsdobjects", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "dsdobjects", "package_url": "https://pypi.org/project/dsdobjects/", "platform": "", "project_url": "https://pypi.org/project/dsdobjects/", "project_urls": {"Download": "https://github.com/DNA-and-Natural-Algorithms-Group/dsdobjects/archive/v0.7.1.tar.gz", "Homepage": "https://github.com/DNA-and-Natural-Algorithms-Group/dsdobjects"}, "release_url": "https://pypi.org/project/dsdobjects/0.7.1/", "requires_dist": ["future"], "requires_python": "", "summary": "Base classes for DSD design", "version": "0.7.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>dsdobjects: an object library for DSD programming</h1>\n<p>This Python module provides a library of protype objects and base classes for\ndomain-level strand displacement (DSD) programming. There are two types of\nusage:</p>\n<ol>\n<li>ready-to-go prototype objects,</li>\n<li>tweak-em-yourself core objects.</li>\n</ol>\n<p>If you start with a new project, you want to use the prototypes. These are\nout-of-the box functional classes that can be initialized, for example, using\nvarious standards of the text file format *.pil.</p>\n<h2>Installation</h2>\n<p>To install this library use pip:</p>\n<pre><code>$ pip install dsdobjects\n</code></pre>\n<p>or the following command in the root directory:</p>\n<pre><code>$ python ./setup.py install\n</code></pre>\n<h3>Quick Start with object prototypes.</h3>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dsdobjects</span> <span class=\"kn\">import</span> <span class=\"n\">SequenceConstraint</span><span class=\"p\">,</span> <span class=\"n\">StrandOrder</span><span class=\"p\">,</span> <span class=\"n\">LogicDomain</span><span class=\"p\">,</span> <span class=\"n\">Domain</span><span class=\"p\">,</span> <span class=\"n\">Complex</span><span class=\"p\">,</span> <span class=\"n\">Macrostate</span><span class=\"p\">,</span> <span class=\"n\">Reaction</span>\n</pre>\n<pre><span class=\"c1\"># Define a few toy domains:</span>\n<span class=\"n\">a</span> <span class=\"o\">=</span> <span class=\"n\">LogicDomain</span><span class=\"p\">(</span><span class=\"s1\">'a'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'long'</span><span class=\"p\">)</span>\n<span class=\"n\">b</span> <span class=\"o\">=</span> <span class=\"n\">LogicDomain</span><span class=\"p\">(</span><span class=\"s1\">'b'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'long'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">9</span><span class=\"p\">)</span>\n<span class=\"n\">c</span> <span class=\"o\">=</span> <span class=\"n\">LogicDomain</span><span class=\"p\">(</span><span class=\"s1\">'c'</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"s1\">'short'</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"mi\">6</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># LogicDomains have exactly one complement, it can be initialized </span>\n<span class=\"c1\"># and/or accessed using the __invert__ operator. The built-in </span>\n<span class=\"c1\"># memory management ensures that there is only one object for each domain.</span>\n<span class=\"k\">assert</span> <span class=\"p\">(</span><span class=\"n\">a</span> <span class=\"ow\">is</span> <span class=\"o\">~</span><span class=\"p\">(</span><span class=\"o\">~</span><span class=\"n\">a</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># Use the Domains to define a Complex ...</span>\n<span class=\"n\">cplx</span> <span class=\"o\">=</span> <span class=\"n\">Complex</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">'((.)+)'</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'rudolf'</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># ... and test some of the built-in complex properties:</span>\n<span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">kernel_string</span>\n<span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">canonical_form</span>\n<span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">size</span>\n<span class=\"k\">for</span> <span class=\"n\">r</span> <span class=\"ow\">in</span> <span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">rotate</span><span class=\"p\">():</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">r</span><span class=\"o\">.</span><span class=\"n\">kernel_string</span><span class=\"p\">)</span>\n<span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">pair_table</span>\n\n<span class=\"c1\"># If you were to define two complexes as one disconnected complex ... </span>\n<span class=\"n\">cplx</span> <span class=\"o\">=</span> <span class=\"n\">Complex</span><span class=\"p\">([</span><span class=\"n\">a</span><span class=\"p\">,</span> <span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"n\">c</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">b</span><span class=\"p\">,</span> <span class=\"s1\">'+'</span><span class=\"p\">,</span> <span class=\"o\">~</span><span class=\"n\">a</span><span class=\"p\">],</span> <span class=\"nb\">list</span><span class=\"p\">(</span><span class=\"s1\">'.(.)+.'</span><span class=\"p\">),</span> <span class=\"n\">name</span><span class=\"o\">=</span><span class=\"s1\">'cplx'</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">is_connected</span> <span class=\"ow\">is</span> <span class=\"kc\">False</span>\n\n<span class=\"c1\"># ... you can quickly and return the indiviudal complexes:</span>\n<span class=\"n\">cx1</span><span class=\"p\">,</span> <span class=\"n\">cx2</span> <span class=\"o\">=</span> <span class=\"n\">cplx</span><span class=\"o\">.</span><span class=\"n\">split</span><span class=\"p\">()</span>\n</pre>\n<h3>Quick Start with text input.</h3>\n<p>For example initialize prototype objects by loading a system (or a single line) of\n*.pil file format:</p>\n<pre><span class=\"kn\">import</span> <span class=\"nn\">dsdobjects.objectio</span> <span class=\"k\">as</span> <span class=\"nn\">oio</span>\n<span class=\"n\">oio</span><span class=\"o\">.</span><span class=\"n\">set_prototypes</span><span class=\"p\">()</span>\n\n<span class=\"n\">domains</span><span class=\"p\">,</span> <span class=\"n\">complexes</span><span class=\"p\">,</span> <span class=\"n\">macrostates</span><span class=\"p\">,</span> <span class=\"n\">detailed_rxns</span><span class=\"p\">,</span> <span class=\"n\">condensed_rxns</span> <span class=\"o\">=</span> <span class=\"n\">oio</span><span class=\"o\">.</span><span class=\"n\">read_pil</span><span class=\"p\">(</span><span class=\"n\">filename</span><span class=\"o\">.</span><span class=\"n\">pil</span><span class=\"p\">)</span>\n\n<span class=\"n\">myobject</span> <span class=\"o\">=</span> <span class=\"n\">oio</span><span class=\"o\">.</span><span class=\"n\">read_pil_line</span><span class=\"p\">(</span><span class=\"s2\">\"length d5 = 7\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">myobject</span><span class=\"p\">,</span> <span class=\"n\">LogicDomain</span><span class=\"p\">)</span>\n\n<span class=\"n\">myobject</span> <span class=\"o\">=</span> <span class=\"n\">oio</span><span class=\"o\">.</span><span class=\"n\">read_pil_line</span><span class=\"p\">(</span><span class=\"s2\">\"sequence d6 = NNNNN\"</span><span class=\"p\">)</span>\n<span class=\"k\">assert</span> <span class=\"nb\">isinstance</span><span class=\"p\">(</span><span class=\"n\">myobject</span><span class=\"p\">,</span> <span class=\"n\">Domain</span><span class=\"p\">)</span>\n</pre>\n<h2>Abut the core objects.</h2>\n<p>If prototypes are not sufficient, you can make your own objects by inheriting\nfrom the core objects. Core objects provide a basic set of <strong>builtin</strong>\nfunctions (e.g. equality, sorting), basic properties, memory management.  One\nway to get started is by copying the prototypes file into your project, and\nadapt it to your needs. Consider a pull request back into the main dsdobjects\nrepository!</p>\n<h3>Quick Start with core objects.</h3>\n<p>Inheritance from dsdobjects.base_classes provides only basic functions such as\n'~', '==', '!=', and access to the built-in memory management for each class.\nSome potential ambiguities, such as requesting the complement of a Domain,  or\nthe length of a complex must be defined upon inheritance.</p>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">dsdobjects.core</span> <span class=\"kn\">import</span> <span class=\"n\">DL_Domain</span>\n\n<span class=\"c1\"># A personalized domain that extends the DL_Domain base class.</span>\n<span class=\"k\">class</span> <span class=\"nc\">MyDomain</span><span class=\"p\">(</span><span class=\"n\">DL_Domain</span><span class=\"p\">):</span>\n\n    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n        <span class=\"nb\">super</span><span class=\"p\">(</span><span class=\"n\">MyDomain</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"n\">name</span><span class=\"p\">,</span> <span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"n\">length</span><span class=\"p\">)</span>\n\n    <span class=\"nd\">@property</span>\n    <span class=\"k\">def</span> <span class=\"nf\">complement</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"c1\"># Automatically initialize or return the complementary domain.</span>\n        <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_complement</span> <span class=\"ow\">is</span> <span class=\"kc\">None</span><span class=\"p\">:</span>\n            <span class=\"n\">cname</span> <span class=\"o\">=</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span><span class=\"p\">[:</span><span class=\"o\">-</span><span class=\"mi\">1</span><span class=\"p\">]</span> <span class=\"k\">if</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_complement</span> <span class=\"k\">else</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_name</span> <span class=\"o\">+</span> <span class=\"s1\">'*'</span>\n            <span class=\"k\">if</span> <span class=\"n\">cname</span> <span class=\"ow\">in</span> <span class=\"n\">DL_Domain</span><span class=\"o\">.</span><span class=\"n\">MEMORY</span><span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_complement</span> <span class=\"o\">=</span> <span class=\"n\">DL_Domain</span><span class=\"o\">.</span><span class=\"n\">MEMORY</span><span class=\"p\">[</span><span class=\"n\">cname</span><span class=\"p\">]</span>\n            <span class=\"k\">else</span> <span class=\"p\">:</span>\n                <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_complement</span> <span class=\"o\">=</span> <span class=\"n\">MyDomain</span><span class=\"p\">(</span><span class=\"n\">cname</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">dtype</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">length</span><span class=\"p\">)</span>\n        <span class=\"k\">return</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">_complement</span>\n</pre>\n<h2>Version</h2>\n<p>0.7.1 -- pil I/O for prototypes and customn objects</p>\n<ul>\n<li>prototype complex concentration</li>\n<li>read_pil supports inherited objects</li>\n<li>logging support</li>\n<li>bug fix for adding core objects</li>\n</ul>\n<p>0.7 -- Python 3.x support / prototypes</p>\n<ul>\n<li>basic support of prototype objects</li>\n<li>added StrandOrder base_class and prototpye</li>\n<li>allow parsing of infinite error bars for reaction rates</li>\n<li>DSD_Restingset renamed to DSD_Macrostate</li>\n<li>broken backward compatibility:\nreaction rates are now namedtuples</li>\n</ul>\n<p>0.6.3 -- added parser for seesaw language</p>\n<p>0.6.2 -- bugfix for restingsets with given representative</p>\n<p>0.6.1 -- adapted setup.py when used as pypi dependency</p>\n<p>0.6 -- PIL parser supports concentration format</p>\n<ul>\n<li>\"non-equal\" bugfixes in base_classes.py</li>\n<li>supports rate-error bars when parsing PIL format</li>\n</ul>\n<p>0.5 -- improved canonical forms</p>\n<h2>Author</h2>\n<p>Stefan Badelt</p>\n<h3>Contributors</h3>\n<p>This library contains adapted code from various related Python packages coded\nin the <a href=\"http://dna.caltech.edu\" rel=\"nofollow\">DNA and Natural Algorithms Group</a>, Caltech:</p>\n<ul>\n<li>\"DNAObjects\" coded by Joseph Berleant and Joseph Schaeffer</li>\n<li><a href=\"http://www.github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator\" rel=\"nofollow\">peppercornenumerator</a> coded by Kathrik Sarma, Casey Grun and Erik Winfree</li>\n<li><a href=\"http://www.github.com/DNA-and-Natural-Algorithms-Group/nuskell\" rel=\"nofollow\">nuskell</a> coded by Seung Woo Shin</li>\n</ul>\n<h2>Projects depending on dsdobjects</h2>\n<ul>\n<li><a href=\"http://www.github.com/DNA-and-Natural-Algorithms-Group/peppercornenumerator\" rel=\"nofollow\">peppercornenumerator</a></li>\n<li><a href=\"http://www.github.com/DNA-and-Natural-Algorithms-Group/nuskell\" rel=\"nofollow\">nuskell</a></li>\n</ul>\n<h2>License</h2>\n<p>MIT</p>\n\n          </div>"}, "last_serial": 6797358, "releases": {"0.5.1": [{"comment_text": "", "digests": {"md5": "5759c10b83c8b589df69ac3dbd5a0c91", "sha256": "ca60d2435ac4a285e251408541d927bf57edcc906a1b0f307bd36d291a9d826a"}, "downloads": -1, "filename": "dsdobjects-0.5.1-py2-none-any.whl", "has_sig": false, "md5_digest": "5759c10b83c8b589df69ac3dbd5a0c91", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16806, "upload_time": "2018-05-14T23:14:37", "upload_time_iso_8601": "2018-05-14T23:14:37.904669Z", "url": "https://files.pythonhosted.org/packages/1e/0d/28d67448d27b2c534174dda0251930a7d7d9fd8cbe314e563238a9982a01/dsdobjects-0.5.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "6c6833a75f3b1e2678f8618ea89ba538", "sha256": "5c850357c338f4f4313f373d0c2f66cbdbae09aa648fd23d11acbbc58471ed93"}, "downloads": -1, "filename": "dsdobjects-0.5.1.tar.gz", "has_sig": false, "md5_digest": "6c6833a75f3b1e2678f8618ea89ba538", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13069, "upload_time": "2018-05-14T23:14:39", "upload_time_iso_8601": "2018-05-14T23:14:39.218677Z", "url": "https://files.pythonhosted.org/packages/cc/c3/7fe975f460e97b8a046e15cd539cbb8265b7d98cb308f93499db4b370623/dsdobjects-0.5.1.tar.gz", "yanked": false}], "0.5.2": [{"comment_text": "", "digests": {"md5": "6a650fbc96e9da1227c6da8d34eaf38b", "sha256": "a64a1c7c47708b6e726f3129e4e28d04b9bb1324db08dddc3bbdaf6da521f24e"}, "downloads": -1, "filename": "dsdobjects-0.5.2-py2-none-any.whl", "has_sig": false, "md5_digest": "6a650fbc96e9da1227c6da8d34eaf38b", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 16808, "upload_time": "2018-05-14T23:24:09", "upload_time_iso_8601": "2018-05-14T23:24:09.989836Z", "url": "https://files.pythonhosted.org/packages/76/8b/ab6e7ce61bb3a984b1b989cf98e0a7f16efee2f3aefba2572c39af2ca782/dsdobjects-0.5.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "244d00ee380350c300a492b69514f09b", "sha256": "c12d6cce3758f2471d32e8eca4213bd55797e6775873805045c572095a8286e4"}, "downloads": -1, "filename": "dsdobjects-0.5.2.tar.gz", "has_sig": false, "md5_digest": "244d00ee380350c300a492b69514f09b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13076, "upload_time": "2018-05-14T23:24:11", "upload_time_iso_8601": "2018-05-14T23:24:11.315109Z", "url": "https://files.pythonhosted.org/packages/aa/d0/9303f516b3a1426e15938a9de8fde7334b7f0641a70e43b2d7b0ac6e36b6/dsdobjects-0.5.2.tar.gz", "yanked": false}], "0.6": [{"comment_text": "", "digests": {"md5": "3a46a4a6de3b906b66d954021e3c657f", "sha256": "57eb2c2bc292652d05dd34bfe3b9a9e3e9fec449126f0b94fa8f88ee6258d769"}, "downloads": -1, "filename": "dsdobjects-0.6-py2-none-any.whl", "has_sig": false, "md5_digest": "3a46a4a6de3b906b66d954021e3c657f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 20692, "upload_time": "2018-05-14T22:36:35", "upload_time_iso_8601": "2018-05-14T22:36:35.326533Z", "url": "https://files.pythonhosted.org/packages/0c/6a/b9bd3dd198e083f09e8c8977e8542f8852be5b607fad56f6254b459ae04c/dsdobjects-0.6-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "560109e82d71a7962a7dcb8003b6c12b", "sha256": "596e951489602acc8e5380c4208acf63457d81ed5f6684deba5cf6b0c73c9745"}, "downloads": -1, "filename": "dsdobjects-0.6.tar.gz", "has_sig": false, "md5_digest": "560109e82d71a7962a7dcb8003b6c12b", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 15141, "upload_time": "2018-05-14T22:36:36", "upload_time_iso_8601": "2018-05-14T22:36:36.670522Z", "url": "https://files.pythonhosted.org/packages/77/c3/1167bbc73a6cad5a0d39631e66e060cc3af084dfd1bd25505de0864749f4/dsdobjects-0.6.tar.gz", "yanked": false}], "0.6.1": [{"comment_text": "", "digests": {"md5": "d0e6856a07271d2222021d7663dc024d", "sha256": "312c33627ea94420417f9ec76c444168962891226a28d861161e1f73d565dea5"}, "downloads": -1, "filename": "dsdobjects-0.6.1-py2.7.egg", "has_sig": false, "md5_digest": "d0e6856a07271d2222021d7663dc024d", "packagetype": "bdist_egg", "python_version": "2.7", "requires_python": null, "size": 36224, "upload_time": "2018-05-14T23:43:23", "upload_time_iso_8601": "2018-05-14T23:43:23.728237Z", "url": "https://files.pythonhosted.org/packages/85/39/528fdcf4f06066270d5402762d0f42e888f9c8058d9cd6c83804b1ee226d/dsdobjects-0.6.1-py2.7.egg", "yanked": false}, {"comment_text": "", "digests": {"md5": "66a01f899e2b366708dddc2beaf00922", "sha256": "d9ba85efd4aa72b8158ca21cddbd4da27d13d28209b0fe763ba8b9d56e7cd6f5"}, "downloads": -1, "filename": "dsdobjects-0.6.1-py2-none-any.whl", "has_sig": false, "md5_digest": "66a01f899e2b366708dddc2beaf00922", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17261, "upload_time": "2018-05-14T23:43:21", "upload_time_iso_8601": "2018-05-14T23:43:21.962349Z", "url": "https://files.pythonhosted.org/packages/e5/1b/73d74631e49c76811d1a95bb1399fa8f1554ef01cf78e7cc5a3cb82aca44/dsdobjects-0.6.1-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "c203e13b73d505e2a55c960b8d64d9ba", "sha256": "15dbd0771512bc6a567685ded794fee7646c511ca0259c63df0f1d856d915dc6"}, "downloads": -1, "filename": "dsdobjects-0.6.1.tar.gz", "has_sig": false, "md5_digest": "c203e13b73d505e2a55c960b8d64d9ba", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13492, "upload_time": "2018-05-14T23:43:24", "upload_time_iso_8601": "2018-05-14T23:43:24.937494Z", "url": "https://files.pythonhosted.org/packages/62/bf/c8caab3e6c095da407b51670ee54671746add61d6a7af27ed6c4b61350b7/dsdobjects-0.6.1.tar.gz", "yanked": false}], "0.6.2": [{"comment_text": "", "digests": {"md5": "09f89b5cb0811ca157f2528af01d7f0d", "sha256": "f8b9a2eeaad53b2eb9cc85acf5b28fc69d132e552bebcd6e486d31a71df805c1"}, "downloads": -1, "filename": "dsdobjects-0.6.2-py2-none-any.whl", "has_sig": false, "md5_digest": "09f89b5cb0811ca157f2528af01d7f0d", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 17301, "upload_time": "2018-06-14T22:30:47", "upload_time_iso_8601": "2018-06-14T22:30:47.322594Z", "url": "https://files.pythonhosted.org/packages/49/92/8084f74a67c9e6bc2027243ec45c261e69d781f280b3c8f51b84f7f85127/dsdobjects-0.6.2-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "870af50cb84b4951536c28c20434ed61", "sha256": "3dd55b4ea834a806f9f48988190a112a187b94641e3d25126a01f24d7ea23a92"}, "downloads": -1, "filename": "dsdobjects-0.6.2.tar.gz", "has_sig": false, "md5_digest": "870af50cb84b4951536c28c20434ed61", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 13543, "upload_time": "2018-06-14T22:30:48", "upload_time_iso_8601": "2018-06-14T22:30:48.501759Z", "url": "https://files.pythonhosted.org/packages/66/88/16de66ea24d4ae7f7043f32b941b7e76b1435a2a56361b62e329a081381e/dsdobjects-0.6.2.tar.gz", "yanked": false}], "0.6.3": [{"comment_text": "", "digests": {"md5": "350c34a4a645680a81ab70f1cb5d4d1f", "sha256": "06cbf80985bc57c10052d372504c9a0db68cafb044f49a494d1bb84907da5664"}, "downloads": -1, "filename": "dsdobjects-0.6.3-py2-none-any.whl", "has_sig": false, "md5_digest": "350c34a4a645680a81ab70f1cb5d4d1f", "packagetype": "bdist_wheel", "python_version": "py2", "requires_python": null, "size": 18588, "upload_time": "2018-06-29T20:53:39", "upload_time_iso_8601": "2018-06-29T20:53:39.517939Z", "url": "https://files.pythonhosted.org/packages/32/36/76d1962a29e22407eee7e3c1101f38047a9dd5d64c6452080a606129de09/dsdobjects-0.6.3-py2-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "770f7f83bdaa95b8f76476377a50bd5c", "sha256": "999663dfc54e19625056bbcc8122e679ca5d73963a8fe7a214e3f7333d11acca"}, "downloads": -1, "filename": "dsdobjects-0.6.3.tar.gz", "has_sig": false, "md5_digest": "770f7f83bdaa95b8f76476377a50bd5c", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 14224, "upload_time": "2018-06-29T20:53:40", "upload_time_iso_8601": "2018-06-29T20:53:40.801825Z", "url": "https://files.pythonhosted.org/packages/9b/59/bf5788cfa7e0ab8b58ffe4572163c13903bd4faa0d9d849235e22bf5d125/dsdobjects-0.6.3.tar.gz", "yanked": false}], "0.7": [{"comment_text": "", "digests": {"md5": "c7a66a1a0a9313d6570d5e3f59fc4c1e", "sha256": "99cdda3225eae5646e1781a574bff70a753c3ef4ea74cde9f5549a638510eec8"}, "downloads": -1, "filename": "dsdobjects-0.7-py3-none-any.whl", "has_sig": false, "md5_digest": "c7a66a1a0a9313d6570d5e3f59fc4c1e", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 25959, "upload_time": "2019-07-31T04:02:16", "upload_time_iso_8601": "2019-07-31T04:02:16.693457Z", "url": "https://files.pythonhosted.org/packages/e5/b6/d20ee8fd5d78d644a067589eaa74f25e7e40adf9dc84b9af7d07d58d0e07/dsdobjects-0.7-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "0de75790ac79180a4471859f88e950d7", "sha256": "ba47253565337e775178fdd7cbbbaaa7d4fc3bd6a521752f45165f654c719418"}, "downloads": -1, "filename": "dsdobjects-0.7.tar.gz", "has_sig": false, "md5_digest": "0de75790ac79180a4471859f88e950d7", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 22406, "upload_time": "2019-07-31T04:02:18", "upload_time_iso_8601": "2019-07-31T04:02:18.405873Z", "url": "https://files.pythonhosted.org/packages/48/96/ece149f498ec728c69ef772378cc07fe6d868172cc5e392ca2ab2069f08e/dsdobjects-0.7.tar.gz", "yanked": false}], "0.7.1": [{"comment_text": "", "digests": {"md5": "80dd9ae4ee0e73496edcac749f23d922", "sha256": "7a8a37ebc5a7dc677c1131269782bab5bfceb524a81eb46715d6b0de478bd034"}, "downloads": -1, "filename": "dsdobjects-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "80dd9ae4ee0e73496edcac749f23d922", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29194, "upload_time": "2020-03-12T05:58:01", "upload_time_iso_8601": "2020-03-12T05:58:01.522804Z", "url": "https://files.pythonhosted.org/packages/25/c5/3d56c8b581c434b4c53f82fa50edf552cc72be6bf16b17797cb108a4998b/dsdobjects-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e50d5505b7f6a211426716ce74ac7a67", "sha256": "dd4dc3e86bf9e0d31af04dcd6782039a3df0c4d8a514ef478675b4d9703233c6"}, "downloads": -1, "filename": "dsdobjects-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e50d5505b7f6a211426716ce74ac7a67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25292, "upload_time": "2020-03-12T05:58:03", "upload_time_iso_8601": "2020-03-12T05:58:03.462893Z", "url": "https://files.pythonhosted.org/packages/ff/64/9f2b7de23acb27213901ba24ec31b410b2f9e233bae903c52d644501a6fe/dsdobjects-0.7.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "80dd9ae4ee0e73496edcac749f23d922", "sha256": "7a8a37ebc5a7dc677c1131269782bab5bfceb524a81eb46715d6b0de478bd034"}, "downloads": -1, "filename": "dsdobjects-0.7.1-py3-none-any.whl", "has_sig": false, "md5_digest": "80dd9ae4ee0e73496edcac749f23d922", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": null, "size": 29194, "upload_time": "2020-03-12T05:58:01", "upload_time_iso_8601": "2020-03-12T05:58:01.522804Z", "url": "https://files.pythonhosted.org/packages/25/c5/3d56c8b581c434b4c53f82fa50edf552cc72be6bf16b17797cb108a4998b/dsdobjects-0.7.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "e50d5505b7f6a211426716ce74ac7a67", "sha256": "dd4dc3e86bf9e0d31af04dcd6782039a3df0c4d8a514ef478675b4d9703233c6"}, "downloads": -1, "filename": "dsdobjects-0.7.1.tar.gz", "has_sig": false, "md5_digest": "e50d5505b7f6a211426716ce74ac7a67", "packagetype": "sdist", "python_version": "source", "requires_python": null, "size": 25292, "upload_time": "2020-03-12T05:58:03", "upload_time_iso_8601": "2020-03-12T05:58:03.462893Z", "url": "https://files.pythonhosted.org/packages/ff/64/9f2b7de23acb27213901ba24ec31b410b2f9e233bae903c52d644501a6fe/dsdobjects-0.7.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 00:49:24 2020"}