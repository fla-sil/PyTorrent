{"info": {"author": "Saif Khan", "author_email": "saifkhichi96@gmail.com", "bugtrack_url": null, "classifiers": ["License :: OSI Approved :: MIT License", "Operating System :: OS Independent", "Programming Language :: Python :: 3"], "description": "# VerSign: Easy Signature Verification in Python\n\n```versign``` is a small Python package which can be used to perform verification of offline signatures.\n\nIt assumes no prior knowledge of any machine learning tools or machine learning itself, and therefore can be used by ML experts and anyone else who wants to quickly integrate this functionality into their project.\n\n## Getting Started\n### Requirements\n```versign``` relies on pre-trained models made available by [Hafemann](https://github.com/luizgh) under the ```sigver``` project. Head over to this [repository](https://github.com/luizgh/sigver) and perform the steps under **Installation** heading there.\n\n### Installation\nThis package requires python 3. Installation can be done with pip:\n```\npip install versign\n```\n\nInstallation inside a [virtual environment](https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/) is recommended.\n\n### Download Trained Models\nBefore you can get started with, there is one more step you need to complete. ```versign``` comes with some pre-trained models which give it its magic.\n\nDownload the compressed models [here](https://drive.google.com/file/d/1qPri1_aWoZKu_EErq6xW_AD9EoCe2fb3/view?usp=sharing), and extract them to ```models/``` directory in your project root. Your project directory should look something like this:\n```\n_ $PROJECT_ROOT\n |__ models/\n |   |__ signet.pth\n |   |__ versign_segment.pkl\n |__ ...\n```\n\n### Organise Your Dataset\nIt is assumed that only positive samples (i.e. genuine signatures) are available during training, while both genuine and forged signatures can be present in the test data.\n\nIn general, your dataset should be structured something like below.\n```\n_ $PROJECT_ROOT\n |__ models/\n |__ data/\n |   |__ train/\n |   |   |__ 001/\n |   |   |   |__ R01.png\n |   |   |   |__ R02.png\n |   |   |   |__ ...\n |   |   |__ 002/\n |   |       |__ ...\n |   |__ test/\n |       |__ 001/\n |       |   |__ Q01.png\n |       |   |__ Q02.png\n |       |   |__ ...\n |       |__ 002/\n |           |__ ...\n |__ ...\n```\nHere, ```Ref/``` folder contains your training data, with each sub-folder representing one person. In each of the sub-folders in ```Ref/``` folder, there are images of only genuine signatures of that user.\n\nSimilarly, the ```Questioned/``` folder contains your test data. The sub-folders in this folder should be same as those in the training folder, except that they can contain both positive and negative signature samples.\n\n### Write Your First Program with ```VerSign```\n```\nimport os\n\nimport joblib\nimport torch\n\nfrom sigver.featurelearning.models import SigNet\nfrom versign import VerSign\n\n\n# Define paths to your data\ndata_path = 'data/'\ntrain_path = data_path + 'train/'   # path to reference signatures\ntest_path = data_path + 'test/'     # path to questioned signatures\ntemp_path = data_path + 'temp/'     # temp path where extracted features will be saved\nif not os.path.exists(temp_path):\n    os.makedirs(temp_path)\n\n# Load models\nstate_dict = torch.load('models/signet.pth')[0]\nnet = SigNet().eval()\nnet.load_state_dict(state_dict)\n\nclf = joblib.load('models/versign_segment.pkl')\nv = VerSign(input_size=(150, 220), extraction_model=net, segmentation_model=clf)\n\n# Learn from genuine signatures\nv.train_all(train_path, temp_path)\n\n# Classify your test data\nresults = v.test_all(test_path, temp_path)\n\n# Print out results\nfor y_test in results:\n    print(y_test)\n\n# Cleanup temp files\nshutil.rmtree(temp_path) # comment this line if you want to keep extracted features\n```\n\nFor a more complete example and additional features such as measuring test accuracy if groundtruth is known, see the [example.py](https://github.com/saifkhichi96/versign-core/blob/master/example.py).\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/saifkhichi96/versign-core", "keywords": "", "license": "", "maintainer": "", "maintainer_email": "", "name": "versign", "package_url": "https://pypi.org/project/versign/", "platform": "", "project_url": "https://pypi.org/project/versign/", "project_urls": {"Homepage": "https://github.com/saifkhichi96/versign-core"}, "release_url": "https://pypi.org/project/versign/0.0.1/", "requires_dist": ["joblib", "numpy (>=1.10.4)", "opencv-contrib-python", "Pillow", "scikit-image", "scikit-learn (>=0.19.0)", "scipy", "torch (>=1.0)", "torchvision (>=0.2.1)"], "requires_python": ">=3", "summary": "Signature verification package for verifying offline signatures using writer-independent features.", "version": "0.0.1", "yanked": false, "html_description": "<div class=\"project-description\">\n            <h1>VerSign: Easy Signature Verification in Python</h1>\n<p><code>versign</code> is a small Python package which can be used to perform verification of offline signatures.</p>\n<p>It assumes no prior knowledge of any machine learning tools or machine learning itself, and therefore can be used by ML experts and anyone else who wants to quickly integrate this functionality into their project.</p>\n<h2>Getting Started</h2>\n<h3>Requirements</h3>\n<p><code>versign</code> relies on pre-trained models made available by <a href=\"https://github.com/luizgh\" rel=\"nofollow\">Hafemann</a> under the <code>sigver</code> project. Head over to this <a href=\"https://github.com/luizgh/sigver\" rel=\"nofollow\">repository</a> and perform the steps under <strong>Installation</strong> heading there.</p>\n<h3>Installation</h3>\n<p>This package requires python 3. Installation can be done with pip:</p>\n<pre><code>pip install versign\n</code></pre>\n<p>Installation inside a <a href=\"https://packaging.python.org/guides/installing-using-pip-and-virtual-environments/\" rel=\"nofollow\">virtual environment</a> is recommended.</p>\n<h3>Download Trained Models</h3>\n<p>Before you can get started with, there is one more step you need to complete. <code>versign</code> comes with some pre-trained models which give it its magic.</p>\n<p>Download the compressed models <a href=\"https://drive.google.com/file/d/1qPri1_aWoZKu_EErq6xW_AD9EoCe2fb3/view?usp=sharing\" rel=\"nofollow\">here</a>, and extract them to <code>models/</code> directory in your project root. Your project directory should look something like this:</p>\n<pre><code>_ $PROJECT_ROOT\n |__ models/\n |   |__ signet.pth\n |   |__ versign_segment.pkl\n |__ ...\n</code></pre>\n<h3>Organise Your Dataset</h3>\n<p>It is assumed that only positive samples (i.e. genuine signatures) are available during training, while both genuine and forged signatures can be present in the test data.</p>\n<p>In general, your dataset should be structured something like below.</p>\n<pre><code>_ $PROJECT_ROOT\n |__ models/\n |__ data/\n |   |__ train/\n |   |   |__ 001/\n |   |   |   |__ R01.png\n |   |   |   |__ R02.png\n |   |   |   |__ ...\n |   |   |__ 002/\n |   |       |__ ...\n |   |__ test/\n |       |__ 001/\n |       |   |__ Q01.png\n |       |   |__ Q02.png\n |       |   |__ ...\n |       |__ 002/\n |           |__ ...\n |__ ...\n</code></pre>\n<p>Here, <code>Ref/</code> folder contains your training data, with each sub-folder representing one person. In each of the sub-folders in <code>Ref/</code> folder, there are images of only genuine signatures of that user.</p>\n<p>Similarly, the <code>Questioned/</code> folder contains your test data. The sub-folders in this folder should be same as those in the training folder, except that they can contain both positive and negative signature samples.</p>\n<h3>Write Your First Program with <code>VerSign</code></h3>\n<pre><code>import os\n\nimport joblib\nimport torch\n\nfrom sigver.featurelearning.models import SigNet\nfrom versign import VerSign\n\n\n# Define paths to your data\ndata_path = 'data/'\ntrain_path = data_path + 'train/'   # path to reference signatures\ntest_path = data_path + 'test/'     # path to questioned signatures\ntemp_path = data_path + 'temp/'     # temp path where extracted features will be saved\nif not os.path.exists(temp_path):\n    os.makedirs(temp_path)\n\n# Load models\nstate_dict = torch.load('models/signet.pth')[0]\nnet = SigNet().eval()\nnet.load_state_dict(state_dict)\n\nclf = joblib.load('models/versign_segment.pkl')\nv = VerSign(input_size=(150, 220), extraction_model=net, segmentation_model=clf)\n\n# Learn from genuine signatures\nv.train_all(train_path, temp_path)\n\n# Classify your test data\nresults = v.test_all(test_path, temp_path)\n\n# Print out results\nfor y_test in results:\n    print(y_test)\n\n# Cleanup temp files\nshutil.rmtree(temp_path) # comment this line if you want to keep extracted features\n</code></pre>\n<p>For a more complete example and additional features such as measuring test accuracy if groundtruth is known, see the <a href=\"https://github.com/saifkhichi96/versign-core/blob/master/example.py\" rel=\"nofollow\">example.py</a>.</p>\n\n          </div>"}, "last_serial": 6287192, "releases": {"0.0.1": [{"comment_text": "", "digests": {"md5": "b7b6308933906a2ef78701317d87d3ee", "sha256": "3c490e8ca4f267dc94bee3a605a349e4783c12f3c058571e632531358d1659d3"}, "downloads": -1, "filename": "versign-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7b6308933906a2ef78701317d87d3ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 15940, "upload_time": "2019-12-12T15:28:27", "upload_time_iso_8601": "2019-12-12T15:28:27.054869Z", "url": "https://files.pythonhosted.org/packages/22/fe/0a3b976e8265576ce405cd4cac42a70a82c648310317f90a15e6b14302cb/versign-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86a498289875efcab1c60bd6c2c62725", "sha256": "ec208ea1a3155843eb4ae1f5365d815a12fa7b57e75dbbd06b4e6c9f68a88a25"}, "downloads": -1, "filename": "versign-0.0.1.tar.gz", "has_sig": false, "md5_digest": "86a498289875efcab1c60bd6c2c62725", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13809, "upload_time": "2019-12-12T15:28:29", "upload_time_iso_8601": "2019-12-12T15:28:29.253872Z", "url": "https://files.pythonhosted.org/packages/e8/1e/787c3ffcc9208e5efc5146ba6ec6aca516cd121c0fe6d6fb44fe6fea6e78/versign-0.0.1.tar.gz", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "b7b6308933906a2ef78701317d87d3ee", "sha256": "3c490e8ca4f267dc94bee3a605a349e4783c12f3c058571e632531358d1659d3"}, "downloads": -1, "filename": "versign-0.0.1-py3-none-any.whl", "has_sig": false, "md5_digest": "b7b6308933906a2ef78701317d87d3ee", "packagetype": "bdist_wheel", "python_version": "py3", "requires_python": ">=3", "size": 15940, "upload_time": "2019-12-12T15:28:27", "upload_time_iso_8601": "2019-12-12T15:28:27.054869Z", "url": "https://files.pythonhosted.org/packages/22/fe/0a3b976e8265576ce405cd4cac42a70a82c648310317f90a15e6b14302cb/versign-0.0.1-py3-none-any.whl", "yanked": false}, {"comment_text": "", "digests": {"md5": "86a498289875efcab1c60bd6c2c62725", "sha256": "ec208ea1a3155843eb4ae1f5365d815a12fa7b57e75dbbd06b4e6c9f68a88a25"}, "downloads": -1, "filename": "versign-0.0.1.tar.gz", "has_sig": false, "md5_digest": "86a498289875efcab1c60bd6c2c62725", "packagetype": "sdist", "python_version": "source", "requires_python": ">=3", "size": 13809, "upload_time": "2019-12-12T15:28:29", "upload_time_iso_8601": "2019-12-12T15:28:29.253872Z", "url": "https://files.pythonhosted.org/packages/e8/1e/787c3ffcc9208e5efc5146ba6ec6aca516cd121c0fe6d6fb44fe6fea6e78/versign-0.0.1.tar.gz", "yanked": false}], "timestamp": "Fri May  8 03:36:42 2020"}