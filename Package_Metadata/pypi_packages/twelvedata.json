{"info": {"author": "Twelve Data", "author_email": "info@twelvedata.com", "bugtrack_url": null, "classifiers": ["Development Status :: 4 - Beta", "Programming Language :: Python"], "description": "<p align=\"center\"><img src=\"https://res.cloudinary.com/dnz8pwg9r/image/upload/v1579110518/logo-python_pgvee0.png\" width=\"400\"></p>\n\n<p align=\"center\">\n<a href=\"https://travis-ci.org/twelvedata/twelvedata-python\"><img src=\"https://travis-ci.org/twelvedata/twelvedata-python.svg?branch=master\" alt=\"Build Status\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/issues\"><img src=\"https://img.shields.io/github/issues/twelvedata/twelvedata-python\" alt=\"Open Issues\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/releases\"><img src=\"https://badge.fury.io/py/twelvedata.svg\" alt=\"Latest Stable Version\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/blob/master/LICENSE.txt\"><img src=\"https://img.shields.io/badge/License-MIT-blue.svg\" alt=\"License\"></a>\n</p>\n\n# Twelve Data API\n\nOfficial python library for Twelve Data API. This package supports all main features of the API:\n\n* Get stock, forex and cryptocurrency OHLC time series.\n* Get over 90+ technical indicators.\n* Output data as: `json`, `csv`, `pandas`\n* Full support for static and dynamic charts.\n\n![chart example](https://res.cloudinary.com/dnz8pwg9r/image/upload/v1579111588/interactive_chart_yy2bsk.png)\n\nFree **API Key** is required. It might be requested [here](https://twelvedata.com/apikey)\n\n## Installation\n\nUse the package manager [pip](https://pip.pypa.io/en/stable/) to install Twelve Data API library (without optional dependencies):\n\n```bash\npip install twelvedata\n```\n\nOr install with pandas support:\n\n```bash\npip install twelvedata[pandas]\n```\n\nOr install with pandas, matplotlib and plotly support used for charting:\n\n```\npip install twelvedata[pandas,matplotlib,plotly]\n```\n\n## Usage\n\n* [Time series](#Time-series)\n* [Technical Indicators](#Technical-indicators)\n* [Batch requests](#Batch-requests)\n* [Charts](#Charts)\n\n##### Supported parameters\n\n| Parameter  | Description                                                  | Type   | Required |\n| ---------- | :----------------------------------------------------------- | ------ | -------- |\n| symbol     | stock ticker (e.g. AAPL, MSFT); <br />physical currency pair (e.g. EUR/USD, CNY/JPY);<br />digital currency pair (BTC/USD, XRP/ETH) | string | yes      |\n| interval   | time frame: 1min, 5min, 15min, 30min, 45min, 1h, 2h, 4h, 8h, 1day, 1week, 1month | string | yes      |\n| apikey     | your personal API Key, if you don't have one - get it [here](https://twelvedata.com/apikey) | string | yes      |\n| exchange   | if symbol is traded in multiple exchanges specify the desired one, valid for both stocks and cryptocurrencies | string | no       |\n| country    | if symbol is traded in multiple countries specify the desired one, valid for stocks | string | no       |\n| outputsize | number of data points to retrieve                            | int    | no       |\n| timezone   | timezone at which output datetime will be displayed, supports: `UTC`, `Exchange` or according to IANA Time Zone Database | string | no       |\n| start_date | start date and time of sampling period, accepts `yyyy-MM-dd` or `yyyy-MM-dd hh:mm:ss` format | string | no       |\n| end_date   | end date and time of sampling period, accepts `yyyy-MM-dd` or `yyyy-MM-dd hh:mm:ss` format | string | no       |\n\n### Time series\n\n* `TDClient` requires `apikey` parameter. It accepts all common parameters.\n* `TDClient.time_series()` accepts all common parameters. Time series may be converted to several formats:\n  * `TDClient.time_series().as_json()` - will return JSON array\n  * `TDClient.time_series().as_csv()` - will return CSV with header\n  * `TDClient.time_series().as_pandas()` - will return pandas.DataFrame\n\n```python\nfrom twelvedata import TDClient\n# Initialize client - apikey parameter is requiered\ntd = TDClient(apikey=\"YOUR_API_KEY_HERE\")\n# Construct the necessary time serie\nts = td.time_series(\n    symbol=\"AAPL\",\n    interval=\"1min\",\n    outputsize=10,\n    timezone=\"America/New_York\",\n)\n# Returns pandas.DataFrame\nts.as_pandas()\n```\n\n### Technical indicators\n\nThis Python library supports all indicators implemented by Twelve Data. Full list of 90+ technical indicators   may be found in [API Documentation](https://twelvedata.com/docs).\n\n* Technical indicators are part of `TDClient.time_series()` object.\n* It has universal format `TDClient.time_series().with_{Technical Indicator Name}`, e.g. `.with_bbands()`, `.with_percent_b()`, `.with_macd()`\n* Indicator object accepts all parameters according to its specification in [API Documentation](https://twelvedata.com/docs), e.g. `.with_bbands()` accepts: `series_type`, `time_period`, `sd`, `ma_type`. If parameter is not provided it will be set to default.\n* Indicators may be used in arbitrary order and conjugated, e.g. `TDClient.time_series().with_aroon().with_adx().with_ema()`\n* By default, technical indicator will output with OHLC values. If you do not need OHLC, specify `TDClient.time_series().without_ohlc()`\n\n```python\nfrom twelvedata import TDClient\n\ntd = TDClient(apikey=\"YOUR_API_KEY_HERE\")\nts = td.time_series(\n    symbol=\"ETH/BTC\",\n    exchange=\"Huobi\",\n    interval=\"5min\",\n    outputsize=22,\n    timezone=\"America/New_York\",\n)\n# Returns: OHLC, BBANDS(close, 20, 2, EMA), PLUS_DI(9), WMA(20), WMA(40)\nts.with_bbands(ma_type=\"EMA\").with_plus_di().with_wma(time_period=20).with_wma(time_period=40).as_pandas()\n\n# Returns: STOCH(14, 1, 3, SMA, SMA), TSF(close, 9)\nts.without_ohlc().with_stoch().with_tsf().as_json()\n```\n\n### Batch requests\n\nWith batch requests up to 120 symbols might be returned per single API call. There are two options on how to do this:\n\n```python\n# 1. Pass instruments symbols as a string delimited by comma (,)\nts = td.time_series(\n    symbol=\"V, RY, AUD/CAD, BTC/USD:Huobi\"\n)\n\n# 2. Pass as a list of symbols \nts = td.time_series(\n    symbol=[\"V\", \"RY\", \"AUD/CAD\", \"BTC/USD:Huobi\"]\n)\n```\n\n**Important.** Batch requests are only supported with `.as_json()` and `.as_pandas()` formats.\n\nWith `.as_json()` the output will be a dictionary with passed symbols as keys. The value will be a tuple with quotes, just the same as with a single request.\n```python\nts = td.time_series(symbol='AAPL,MSFT', interval=\"1min\", outputsize=3)\ndf = ts.with_macd().with_macd(fast_period=10).with_stoch().as_json()\n\n{\n    \"AAPL\": ({'datetime': '2020-04-23 15:59:00', 'open': '275.23001', 'high': '275.25000', 'low': '274.92999', 'close': '275.01001', 'volume': '393317', 'macd_1': '-0.33538', 'macd_signal_1': '-0.24294', 'macd_hist_1': '-0.09244', 'macd_2': '-0.40894', 'macd_signal_2': '-0.29719', 'macd_hist_2': '-0.11175', 'slow_k': '4.52069', 'slow_d': '7.92871'}, {'datetime': '2020-04-23 15:58:00', 'open': '275.07001', 'high': '275.26999', 'low': '275.00000', 'close': '275.25000', 'volume': '177685', 'macd_1': '-0.31486', 'macd_signal_1': '-0.21983', 'macd_hist_1': '-0.09503', 'macd_2': '-0.38598', 'macd_signal_2': '-0.26925', 'macd_hist_2': '-0.11672', 'slow_k': '14.70578', 'slow_d': '6.82079'}, {'datetime': '2020-04-23 15:57:00', 'open': '275.07001', 'high': '275.16000', 'low': '275.00000', 'close': '275.07751', 'volume': '151169', 'macd_1': '-0.30852', 'macd_signal_1': '-0.19607', 'macd_hist_1': '-0.11245', 'macd_2': '-0.38293', 'macd_signal_2': '-0.24007', 'macd_hist_2': '-0.14286', 'slow_k': '4.55965', 'slow_d': '2.75237'}),\n    \"MSFT\": ({'datetime': '2020-04-23 15:59:00', 'open': '171.59000', 'high': '171.64000', 'low': '171.22000', 'close': '171.42000', 'volume': '477631', 'macd_1': '-0.12756', 'macd_signal_1': '-0.10878', 'macd_hist_1': '-0.01878', 'macd_2': '-0.15109', 'macd_signal_2': '-0.12915', 'macd_hist_2': '-0.02193', 'slow_k': '20.95244', 'slow_d': '26.34919'}, {'datetime': '2020-04-23 15:58:00', 'open': '171.41000', 'high': '171.61000', 'low': '171.33501', 'close': '171.61000', 'volume': '209594', 'macd_1': '-0.12440', 'macd_signal_1': '-0.10408', 'macd_hist_1': '-0.02032', 'macd_2': '-0.14786', 'macd_signal_2': '-0.12367', 'macd_hist_2': '-0.02419', 'slow_k': '39.04785', 'slow_d': '23.80945'}, {'datetime': '2020-04-23 15:57:00', 'open': '171.34500', 'high': '171.48000', 'low': '171.25999', 'close': '171.39999', 'volume': '142450', 'macd_1': '-0.13791', 'macd_signal_1': '-0.09900', 'macd_hist_1': '-0.03891', 'macd_2': '-0.16800', 'macd_signal_2': '-0.11762', 'macd_hist_2': '-0.05037', 'slow_k': '19.04727', 'slow_d': '14.92063'})\n}\n\n```\n\nWith `.as_pandas()` the output will be a 3D DataFrame with MultiIndex for (symbol, datetime).\n```python\nts = td.time_series(symbol='AAPL,MSFT', interval=\"1min\", outputsize=3)\ndf = ts.with_macd().with_macd(fast_period=10).with_stoch().as_pandas()\n\n#                                open       high  ...    slow_k    slow_d\n# AAPL 2020-04-23 15:59:00  275.23001  275.25000  ...   4.52069   7.92871\n#      2020-04-23 15:58:00  275.07001  275.26999  ...  14.70578   6.82079\n#      2020-04-23 15:57:00  275.07001  275.16000  ...   4.55965   2.75237\n# MSFT 2020-04-23 15:59:00  171.59000  171.64000  ...  20.95244  26.34919\n#      2020-04-23 15:58:00  171.41000  171.61000  ...  39.04785  23.80945\n#      2020-04-23 15:57:00  171.34500  171.48000  ...  19.04727  14.92063\n# \n# [6 rows x 13 columns]\n\ndf.loc['AAPL']\n\n#                           open       high  ...    slow_k   slow_d\n# 2020-04-23 15:59:00  275.23001  275.25000  ...   4.52069  7.92871\n# 2020-04-23 15:58:00  275.07001  275.26999  ...  14.70578  6.82079\n# 2020-04-23 15:57:00  275.07001  275.16000  ...   4.55965  2.75237\n# \n# [3 rows x 13 columns]\n\ndf.columns\n\n# Index(['open', 'high', 'low', 'close', 'volume', 'macd1', 'macd_signal1',\n#        'macd_hist1', 'macd2', 'macd_signal2', 'macd_hist2', 'slow_k',\n#        'slow_d'],\n#       dtype='object')\n```\n\n\n### Charts\n\n* [Static](#Static)\n* [Interactive](#Interactive)\n\nCharts support OHLC, technical indicators and custom bars.\n\n#### Static\n\nStatic charting is based on `matplotlib` library. Make sure you have installed it.\n\n* Use `.as_pyplot_figure()`\n\n```python\nfrom twelvedata import TDClient\n\ntd = TDClient(apikey=\"YOUR_API_KEY_HERE\")\nts = td.time_series(\n    symbol=\"MSFT\",\n    outputsize=75,\n    interval=\"1day\",\n)\n# 1. Returns OHLCV chart\nts.as_pyplot_figure()\n\n# 2. Returns OHLCV + BBANDS(close, 20, 2, SMA) + %B(close, 20, 2 SMA) + STOCH(14, 3, 3, SMA, SMA)\nts.with_bbands().with_percent_b().with_stoch(slow_k_period=3).as_pyplot_figure()\n```\n\n#### Interactive\n\nInteractive charting is based on `plotly` library. Make sure you have installed it.\n\n* Use `.as_plotly_figure()`\n\n```python\nfrom twelvedata import TDClient\n\ntd = TDClient(apikey=\"YOUR_API_KEY_HERE\")\nts = td.time_series(\n    symbol=\"DNR\",\n    outputsize=50,\n    interval=\"1week\",\n)\n# 1. Returns OHLCV chart\nts.as_plotly_figure()\n\n# 2. Returns OHLCV + EMA(close, 7) + MAMA(close, 0.5, 0.05) + MOM(close, 9) + MACD(close, 12, 26, 9)\nts.with_ema(time_period=7).with_mama().with_mom().with_macd().as_plotly_figure()\n```\n\n## Support\n\nVisit our official website [https://twelvedata.com](https://twelvedata.com) or reach out to the Twelve Data team at [info@twelvedata.com](mailto:info@twelvedata.com?subject=Python%20library%20question).\n\n## Announcements\n\nFollow [@TwelveData](https://twitter.com/TwelveData) on Twitter for announcements and updates about this library.\n\n## Roadmap\n\n- [ ] Save-load chart templates\n- [ ] Auto-update charts\n- [x] Batch requests\n- [x] Custom plots coloring\n- [x] Interactive charts (plotly)\n- [x] Static charts (matplotlib)\n- [x] Pandas support\n\n## Contributing\n\n1. Clone repo and create a new branch: `$ git checkout https://github.com/twelvedata/twelvedata -b name_for_new_branch`.\n2. Make changes and test.\n3. Submit Pull Request with comprehensive description of changes.\n\n## License\n\nThis package is open-sourced software licensed under the [MIT license](https://opensource.org/licenses/MIT).\n\n\n", "description_content_type": "text/markdown", "docs_url": null, "download_url": "", "downloads": {"last_day": -1, "last_month": -1, "last_week": -1}, "home_page": "https://github.com/twelvedata/twelvedata-python", "keywords": "", "license": "MIT", "maintainer": "", "maintainer_email": "", "name": "twelvedata", "package_url": "https://pypi.org/project/twelvedata/", "platform": "any", "project_url": "https://pypi.org/project/twelvedata/", "project_urls": {"Homepage": "https://github.com/twelvedata/twelvedata-python"}, "release_url": "https://pypi.org/project/twelvedata/0.1.5/", "requires_dist": ["pytimeparse (<2,>=1.1)", "requests (<3,>=2.22)", "mpl-finance ; extra == 'matplotlib'", "matplotlib (<3,>=2.2) ; (python_version < \"3\") and extra == 'matplotlib'", "matplotlib (>=2.2) ; (python_version >= \"3\") and extra == 'matplotlib'", "pandas (<0.25,>=0.24) ; (python_version < \"3\") and extra == 'pandas'", "pandas (>=0.24) ; (python_version >= \"3\") and extra == 'pandas'", "plotly (>=4.2.1) ; extra == 'plotly'", "pytest ; extra == 'testing'", "pytest-cov ; extra == 'testing'"], "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "summary": "Python client for Twelve Data API", "version": "0.1.5", "yanked": false, "html_description": "<div class=\"project-description\">\n            <p align=\"center\"><img src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/62cf15d76623c14e865f2aa82636d78e9b1cd0c0/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646e7a3870776739722f696d6167652f75706c6f61642f76313537393131303531382f6c6f676f2d707974686f6e5f7067766565302e706e67\" width=\"400\"></p>\n<p align=\"center\">\n<a href=\"https://travis-ci.org/twelvedata/twelvedata-python\" rel=\"nofollow\"><img alt=\"Build Status\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/094fee80608b6d0c06c19588baaeaa16b3637d3e/68747470733a2f2f7472617669732d63692e6f72672f7477656c7665646174612f7477656c7665646174612d707974686f6e2e7376673f6272616e63683d6d6173746572\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/issues\" rel=\"nofollow\"><img alt=\"Open Issues\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b3f3f4d8fd41e6c881f6ccdbfeddc0072cf05d18/68747470733a2f2f696d672e736869656c64732e696f2f6769746875622f6973737565732f7477656c7665646174612f7477656c7665646174612d707974686f6e\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/releases\" rel=\"nofollow\"><img alt=\"Latest Stable Version\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b2991daca419f915700e1b2ac68857e13b049773/68747470733a2f2f62616467652e667572792e696f2f70792f7477656c7665646174612e737667\"></a>\n<a href=\"https://github.com/twelvedata/twelvedata-python/blob/master/LICENSE.txt\" rel=\"nofollow\"><img alt=\"License\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/4150014b4dfdd7b565fa18de88e9bb1b8ccd7c08/68747470733a2f2f696d672e736869656c64732e696f2f62616467652f4c6963656e73652d4d49542d626c75652e737667\"></a>\n</p>\n<h1>Twelve Data API</h1>\n<p>Official python library for Twelve Data API. This package supports all main features of the API:</p>\n<ul>\n<li>Get stock, forex and cryptocurrency OHLC time series.</li>\n<li>Get over 90+ technical indicators.</li>\n<li>Output data as: <code>json</code>, <code>csv</code>, <code>pandas</code></li>\n<li>Full support for static and dynamic charts.</li>\n</ul>\n<p><img alt=\"chart example\" src=\"https://warehouse-camo.ingress.cmh1.psfhosted.org/b5b582f4aa1620799764e6943b592547b8f5153a/68747470733a2f2f7265732e636c6f7564696e6172792e636f6d2f646e7a3870776739722f696d6167652f75706c6f61642f76313537393131313538382f696e7465726163746976655f63686172745f79793262736b2e706e67\"></p>\n<p>Free <strong>API Key</strong> is required. It might be requested <a href=\"https://twelvedata.com/apikey\" rel=\"nofollow\">here</a></p>\n<h2>Installation</h2>\n<p>Use the package manager <a href=\"https://pip.pypa.io/en/stable/\" rel=\"nofollow\">pip</a> to install Twelve Data API library (without optional dependencies):</p>\n<pre>pip install twelvedata\n</pre>\n<p>Or install with pandas support:</p>\n<pre>pip install twelvedata<span class=\"o\">[</span>pandas<span class=\"o\">]</span>\n</pre>\n<p>Or install with pandas, matplotlib and plotly support used for charting:</p>\n<pre><code>pip install twelvedata[pandas,matplotlib,plotly]\n</code></pre>\n<h2>Usage</h2>\n<ul>\n<li><a href=\"#Time-series\" rel=\"nofollow\">Time series</a></li>\n<li><a href=\"#Technical-indicators\" rel=\"nofollow\">Technical Indicators</a></li>\n<li><a href=\"#Batch-requests\" rel=\"nofollow\">Batch requests</a></li>\n<li><a href=\"#Charts\" rel=\"nofollow\">Charts</a></li>\n</ul>\n<h5>Supported parameters</h5>\n<table>\n<thead>\n<tr>\n<th>Parameter</th>\n<th align=\"left\">Description</th>\n<th>Type</th>\n<th>Required</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>symbol</td>\n<td align=\"left\">stock ticker (e.g. AAPL, MSFT); <br>physical currency pair (e.g. EUR/USD, CNY/JPY);<br>digital currency pair (BTC/USD, XRP/ETH)</td>\n<td>string</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>interval</td>\n<td align=\"left\">time frame: 1min, 5min, 15min, 30min, 45min, 1h, 2h, 4h, 8h, 1day, 1week, 1month</td>\n<td>string</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>apikey</td>\n<td align=\"left\">your personal API Key, if you don't have one - get it <a href=\"https://twelvedata.com/apikey\" rel=\"nofollow\">here</a></td>\n<td>string</td>\n<td>yes</td>\n</tr>\n<tr>\n<td>exchange</td>\n<td align=\"left\">if symbol is traded in multiple exchanges specify the desired one, valid for both stocks and cryptocurrencies</td>\n<td>string</td>\n<td>no</td>\n</tr>\n<tr>\n<td>country</td>\n<td align=\"left\">if symbol is traded in multiple countries specify the desired one, valid for stocks</td>\n<td>string</td>\n<td>no</td>\n</tr>\n<tr>\n<td>outputsize</td>\n<td align=\"left\">number of data points to retrieve</td>\n<td>int</td>\n<td>no</td>\n</tr>\n<tr>\n<td>timezone</td>\n<td align=\"left\">timezone at which output datetime will be displayed, supports: <code>UTC</code>, <code>Exchange</code> or according to IANA Time Zone Database</td>\n<td>string</td>\n<td>no</td>\n</tr>\n<tr>\n<td>start_date</td>\n<td align=\"left\">start date and time of sampling period, accepts <code>yyyy-MM-dd</code> or <code>yyyy-MM-dd hh:mm:ss</code> format</td>\n<td>string</td>\n<td>no</td>\n</tr>\n<tr>\n<td>end_date</td>\n<td align=\"left\">end date and time of sampling period, accepts <code>yyyy-MM-dd</code> or <code>yyyy-MM-dd hh:mm:ss</code> format</td>\n<td>string</td>\n<td>no</td>\n</tr></tbody></table>\n<h3>Time series</h3>\n<ul>\n<li><code>TDClient</code> requires <code>apikey</code> parameter. It accepts all common parameters.</li>\n<li><code>TDClient.time_series()</code> accepts all common parameters. Time series may be converted to several formats:\n<ul>\n<li><code>TDClient.time_series().as_json()</code> - will return JSON array</li>\n<li><code>TDClient.time_series().as_csv()</code> - will return CSV with header</li>\n<li><code>TDClient.time_series().as_pandas()</code> - will return pandas.DataFrame</li>\n</ul>\n</li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twelvedata</span> <span class=\"kn\">import</span> <span class=\"n\">TDClient</span>\n<span class=\"c1\"># Initialize client - apikey parameter is requiered</span>\n<span class=\"n\">td</span> <span class=\"o\">=</span> <span class=\"n\">TDClient</span><span class=\"p\">(</span><span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n<span class=\"c1\"># Construct the necessary time serie</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"AAPL\"</span><span class=\"p\">,</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"1min\"</span><span class=\"p\">,</span>\n    <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n    <span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s2\">\"America/New_York\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Returns pandas.DataFrame</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">as_pandas</span><span class=\"p\">()</span>\n</pre>\n<h3>Technical indicators</h3>\n<p>This Python library supports all indicators implemented by Twelve Data. Full list of 90+ technical indicators   may be found in <a href=\"https://twelvedata.com/docs\" rel=\"nofollow\">API Documentation</a>.</p>\n<ul>\n<li>Technical indicators are part of <code>TDClient.time_series()</code> object.</li>\n<li>It has universal format <code>TDClient.time_series().with_{Technical Indicator Name}</code>, e.g. <code>.with_bbands()</code>, <code>.with_percent_b()</code>, <code>.with_macd()</code></li>\n<li>Indicator object accepts all parameters according to its specification in <a href=\"https://twelvedata.com/docs\" rel=\"nofollow\">API Documentation</a>, e.g. <code>.with_bbands()</code> accepts: <code>series_type</code>, <code>time_period</code>, <code>sd</code>, <code>ma_type</code>. If parameter is not provided it will be set to default.</li>\n<li>Indicators may be used in arbitrary order and conjugated, e.g. <code>TDClient.time_series().with_aroon().with_adx().with_ema()</code></li>\n<li>By default, technical indicator will output with OHLC values. If you do not need OHLC, specify <code>TDClient.time_series().without_ohlc()</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twelvedata</span> <span class=\"kn\">import</span> <span class=\"n\">TDClient</span>\n\n<span class=\"n\">td</span> <span class=\"o\">=</span> <span class=\"n\">TDClient</span><span class=\"p\">(</span><span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"ETH/BTC\"</span><span class=\"p\">,</span>\n    <span class=\"n\">exchange</span><span class=\"o\">=</span><span class=\"s2\">\"Huobi\"</span><span class=\"p\">,</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"5min\"</span><span class=\"p\">,</span>\n    <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">22</span><span class=\"p\">,</span>\n    <span class=\"n\">timezone</span><span class=\"o\">=</span><span class=\"s2\">\"America/New_York\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># Returns: OHLC, BBANDS(close, 20, 2, EMA), PLUS_DI(9), WMA(20), WMA(40)</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">with_bbands</span><span class=\"p\">(</span><span class=\"n\">ma_type</span><span class=\"o\">=</span><span class=\"s2\">\"EMA\"</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_plus_di</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_wma</span><span class=\"p\">(</span><span class=\"n\">time_period</span><span class=\"o\">=</span><span class=\"mi\">20</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_wma</span><span class=\"p\">(</span><span class=\"n\">time_period</span><span class=\"o\">=</span><span class=\"mi\">40</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_pandas</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># Returns: STOCH(14, 1, 3, SMA, SMA), TSF(close, 9)</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">without_ohlc</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_stoch</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_tsf</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n</pre>\n<h3>Batch requests</h3>\n<p>With batch requests up to 120 symbols might be returned per single API call. There are two options on how to do this:</p>\n<pre><span class=\"c1\"># 1. Pass instruments symbols as a string delimited by comma (,)</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"V, RY, AUD/CAD, BTC/USD:Huobi\"</span>\n<span class=\"p\">)</span>\n\n<span class=\"c1\"># 2. Pass as a list of symbols </span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"p\">[</span><span class=\"s2\">\"V\"</span><span class=\"p\">,</span> <span class=\"s2\">\"RY\"</span><span class=\"p\">,</span> <span class=\"s2\">\"AUD/CAD\"</span><span class=\"p\">,</span> <span class=\"s2\">\"BTC/USD:Huobi\"</span><span class=\"p\">]</span>\n<span class=\"p\">)</span>\n</pre>\n<p><strong>Important.</strong> Batch requests are only supported with <code>.as_json()</code> and <code>.as_pandas()</code> formats.</p>\n<p>With <code>.as_json()</code> the output will be a dictionary with passed symbols as keys. The value will be a tuple with quotes, just the same as with a single request.</p>\n<pre><span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'AAPL,MSFT'</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"1min\"</span><span class=\"p\">,</span> <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">with_macd</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_macd</span><span class=\"p\">(</span><span class=\"n\">fast_period</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_stoch</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_json</span><span class=\"p\">()</span>\n\n<span class=\"p\">{</span>\n    <span class=\"s2\">\"AAPL\"</span><span class=\"p\">:</span> <span class=\"p\">({</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:59:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'275.23001'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'275.25000'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'274.92999'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'275.01001'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'393317'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.33538'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.24294'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.09244'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.40894'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.29719'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.11175'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'4.52069'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'7.92871'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:58:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'275.07001'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'275.26999'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'275.00000'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'275.25000'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'177685'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.31486'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.21983'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.09503'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.38598'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.26925'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.11672'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'14.70578'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'6.82079'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:57:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'275.07001'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'275.16000'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'275.00000'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'275.07751'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'151169'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.30852'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.19607'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.11245'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.38293'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.24007'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.14286'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'4.55965'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'2.75237'</span><span class=\"p\">}),</span>\n    <span class=\"s2\">\"MSFT\"</span><span class=\"p\">:</span> <span class=\"p\">({</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:59:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'171.59000'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'171.64000'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'171.22000'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'171.42000'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'477631'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.12756'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.10878'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.01878'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.15109'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.12915'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.02193'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'20.95244'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'26.34919'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:58:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'171.41000'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'171.61000'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'171.33501'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'171.61000'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'209594'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.12440'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.10408'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.02032'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.14786'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.12367'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.02419'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'39.04785'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'23.80945'</span><span class=\"p\">},</span> <span class=\"p\">{</span><span class=\"s1\">'datetime'</span><span class=\"p\">:</span> <span class=\"s1\">'2020-04-23 15:57:00'</span><span class=\"p\">,</span> <span class=\"s1\">'open'</span><span class=\"p\">:</span> <span class=\"s1\">'171.34500'</span><span class=\"p\">,</span> <span class=\"s1\">'high'</span><span class=\"p\">:</span> <span class=\"s1\">'171.48000'</span><span class=\"p\">,</span> <span class=\"s1\">'low'</span><span class=\"p\">:</span> <span class=\"s1\">'171.25999'</span><span class=\"p\">,</span> <span class=\"s1\">'close'</span><span class=\"p\">:</span> <span class=\"s1\">'171.39999'</span><span class=\"p\">,</span> <span class=\"s1\">'volume'</span><span class=\"p\">:</span> <span class=\"s1\">'142450'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.13791'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.09900'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_1'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.03891'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.16800'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_signal_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.11762'</span><span class=\"p\">,</span> <span class=\"s1\">'macd_hist_2'</span><span class=\"p\">:</span> <span class=\"s1\">'-0.05037'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_k'</span><span class=\"p\">:</span> <span class=\"s1\">'19.04727'</span><span class=\"p\">,</span> <span class=\"s1\">'slow_d'</span><span class=\"p\">:</span> <span class=\"s1\">'14.92063'</span><span class=\"p\">})</span>\n<span class=\"p\">}</span>\n</pre>\n<p>With <code>.as_pandas()</code> the output will be a 3D DataFrame with MultiIndex for (symbol, datetime).</p>\n<pre><span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span><span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s1\">'AAPL,MSFT'</span><span class=\"p\">,</span> <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"1min\"</span><span class=\"p\">,</span> <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">with_macd</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_macd</span><span class=\"p\">(</span><span class=\"n\">fast_period</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_stoch</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_pandas</span><span class=\"p\">()</span>\n\n<span class=\"c1\">#                                open       high  ...    slow_k    slow_d</span>\n<span class=\"c1\"># AAPL 2020-04-23 15:59:00  275.23001  275.25000  ...   4.52069   7.92871</span>\n<span class=\"c1\">#      2020-04-23 15:58:00  275.07001  275.26999  ...  14.70578   6.82079</span>\n<span class=\"c1\">#      2020-04-23 15:57:00  275.07001  275.16000  ...   4.55965   2.75237</span>\n<span class=\"c1\"># MSFT 2020-04-23 15:59:00  171.59000  171.64000  ...  20.95244  26.34919</span>\n<span class=\"c1\">#      2020-04-23 15:58:00  171.41000  171.61000  ...  39.04785  23.80945</span>\n<span class=\"c1\">#      2020-04-23 15:57:00  171.34500  171.48000  ...  19.04727  14.92063</span>\n<span class=\"c1\"># </span>\n<span class=\"c1\"># [6 rows x 13 columns]</span>\n\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">loc</span><span class=\"p\">[</span><span class=\"s1\">'AAPL'</span><span class=\"p\">]</span>\n\n<span class=\"c1\">#                           open       high  ...    slow_k   slow_d</span>\n<span class=\"c1\"># 2020-04-23 15:59:00  275.23001  275.25000  ...   4.52069  7.92871</span>\n<span class=\"c1\"># 2020-04-23 15:58:00  275.07001  275.26999  ...  14.70578  6.82079</span>\n<span class=\"c1\"># 2020-04-23 15:57:00  275.07001  275.16000  ...   4.55965  2.75237</span>\n<span class=\"c1\"># </span>\n<span class=\"c1\"># [3 rows x 13 columns]</span>\n\n<span class=\"n\">df</span><span class=\"o\">.</span><span class=\"n\">columns</span>\n\n<span class=\"c1\"># Index(['open', 'high', 'low', 'close', 'volume', 'macd1', 'macd_signal1',</span>\n<span class=\"c1\">#        'macd_hist1', 'macd2', 'macd_signal2', 'macd_hist2', 'slow_k',</span>\n<span class=\"c1\">#        'slow_d'],</span>\n<span class=\"c1\">#       dtype='object')</span>\n</pre>\n<h3>Charts</h3>\n<ul>\n<li><a href=\"#Static\" rel=\"nofollow\">Static</a></li>\n<li><a href=\"#Interactive\" rel=\"nofollow\">Interactive</a></li>\n</ul>\n<p>Charts support OHLC, technical indicators and custom bars.</p>\n<h4>Static</h4>\n<p>Static charting is based on <code>matplotlib</code> library. Make sure you have installed it.</p>\n<ul>\n<li>Use <code>.as_pyplot_figure()</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twelvedata</span> <span class=\"kn\">import</span> <span class=\"n\">TDClient</span>\n\n<span class=\"n\">td</span> <span class=\"o\">=</span> <span class=\"n\">TDClient</span><span class=\"p\">(</span><span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"MSFT\"</span><span class=\"p\">,</span>\n    <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">75</span><span class=\"p\">,</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"1day\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 1. Returns OHLCV chart</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">as_pyplot_figure</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 2. Returns OHLCV + BBANDS(close, 20, 2, SMA) + %B(close, 20, 2 SMA) + STOCH(14, 3, 3, SMA, SMA)</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">with_bbands</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_percent_b</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_stoch</span><span class=\"p\">(</span><span class=\"n\">slow_k_period</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">as_pyplot_figure</span><span class=\"p\">()</span>\n</pre>\n<h4>Interactive</h4>\n<p>Interactive charting is based on <code>plotly</code> library. Make sure you have installed it.</p>\n<ul>\n<li>Use <code>.as_plotly_figure()</code></li>\n</ul>\n<pre><span class=\"kn\">from</span> <span class=\"nn\">twelvedata</span> <span class=\"kn\">import</span> <span class=\"n\">TDClient</span>\n\n<span class=\"n\">td</span> <span class=\"o\">=</span> <span class=\"n\">TDClient</span><span class=\"p\">(</span><span class=\"n\">apikey</span><span class=\"o\">=</span><span class=\"s2\">\"YOUR_API_KEY_HERE\"</span><span class=\"p\">)</span>\n<span class=\"n\">ts</span> <span class=\"o\">=</span> <span class=\"n\">td</span><span class=\"o\">.</span><span class=\"n\">time_series</span><span class=\"p\">(</span>\n    <span class=\"n\">symbol</span><span class=\"o\">=</span><span class=\"s2\">\"DNR\"</span><span class=\"p\">,</span>\n    <span class=\"n\">outputsize</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n    <span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"s2\">\"1week\"</span><span class=\"p\">,</span>\n<span class=\"p\">)</span>\n<span class=\"c1\"># 1. Returns OHLCV chart</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">as_plotly_figure</span><span class=\"p\">()</span>\n\n<span class=\"c1\"># 2. Returns OHLCV + EMA(close, 7) + MAMA(close, 0.5, 0.05) + MOM(close, 9) + MACD(close, 12, 26, 9)</span>\n<span class=\"n\">ts</span><span class=\"o\">.</span><span class=\"n\">with_ema</span><span class=\"p\">(</span><span class=\"n\">time_period</span><span class=\"o\">=</span><span class=\"mi\">7</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">with_mama</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_mom</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">with_macd</span><span class=\"p\">()</span><span class=\"o\">.</span><span class=\"n\">as_plotly_figure</span><span class=\"p\">()</span>\n</pre>\n<h2>Support</h2>\n<p>Visit our official website <a href=\"https://twelvedata.com\" rel=\"nofollow\">https://twelvedata.com</a> or reach out to the Twelve Data team at <a href=\"mailto:info@twelvedata.com?subject=Python%20library%20question\">info@twelvedata.com</a>.</p>\n<h2>Announcements</h2>\n<p>Follow <a href=\"https://twitter.com/TwelveData\" rel=\"nofollow\">@TwelveData</a> on Twitter for announcements and updates about this library.</p>\n<h2>Roadmap</h2>\n<ul>\n<li>[ ] Save-load chart templates</li>\n<li>[ ] Auto-update charts</li>\n<li>[x] Batch requests</li>\n<li>[x] Custom plots coloring</li>\n<li>[x] Interactive charts (plotly)</li>\n<li>[x] Static charts (matplotlib)</li>\n<li>[x] Pandas support</li>\n</ul>\n<h2>Contributing</h2>\n<ol>\n<li>Clone repo and create a new branch: <code>$ git checkout https://github.com/twelvedata/twelvedata -b name_for_new_branch</code>.</li>\n<li>Make changes and test.</li>\n<li>Submit Pull Request with comprehensive description of changes.</li>\n</ol>\n<h2>License</h2>\n<p>This package is open-sourced software licensed under the <a href=\"https://opensource.org/licenses/MIT\" rel=\"nofollow\">MIT license</a>.</p>\n\n          </div>"}, "last_serial": 7098705, "releases": {"0.1": [{"comment_text": "", "digests": {"md5": "6fceee8fdd7025d6a64c2d9f352b3ed5", "sha256": "73289b7b696476a3e4b4ab69da89580b53b6170eedb1fadf09c6bb8125287194"}, "downloads": -1, "filename": "twelvedata-0.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6fceee8fdd7025d6a64c2d9f352b3ed5", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 30020, "upload_time": "2020-01-03T22:11:15", "upload_time_iso_8601": "2020-01-03T22:11:15.421661Z", "url": "https://files.pythonhosted.org/packages/d6/ea/3dd8e39b8acc74c4fa3e31b7738d414b57e1a5b2bb065ee981c5dc8bec26/twelvedata-0.1-py2.py3-none-any.whl", "yanked": false}], "0.1.1": [{"comment_text": "", "digests": {"md5": "6d623ad6f2676224d57abc59c8641eab", "sha256": "b28babd2c850511893eb4bd527390b757ad1e6202d7cd8a2b950e8f7f1a5c133"}, "downloads": -1, "filename": "twelvedata-0.1.1-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "6d623ad6f2676224d57abc59c8641eab", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 30065, "upload_time": "2020-01-14T09:23:13", "upload_time_iso_8601": "2020-01-14T09:23:13.239785Z", "url": "https://files.pythonhosted.org/packages/58/bd/c67fb2232399d7b60736af85d4253875dbbda949163d433c135b4e8d1950/twelvedata-0.1.1-py2.py3-none-any.whl", "yanked": false}], "0.1.3": [{"comment_text": "", "digests": {"md5": "da0571d0e471c6ea531a6f0ad67861ec", "sha256": "f589389aa0f5ec7617c2ebc05d512977a0624afb96e629a5a6f07b29262312db"}, "downloads": -1, "filename": "twelvedata-0.1.3-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "da0571d0e471c6ea531a6f0ad67861ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 30246, "upload_time": "2020-01-15T22:22:11", "upload_time_iso_8601": "2020-01-15T22:22:11.854907Z", "url": "https://files.pythonhosted.org/packages/30/91/8f757e152d7a063d57a61f6e9f4bf3a4fdebd9628ac9a4d3e37831160b7c/twelvedata-0.1.3-py2.py3-none-any.whl", "yanked": false}], "0.1.4": [{"comment_text": "", "digests": {"md5": "fbb824da9881212df3c83d1d22847406", "sha256": "b3b48294a6b70500d6994a526540af9f6372bedda089ace098d54fa470b401f5"}, "downloads": -1, "filename": "twelvedata-0.1.4-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "fbb824da9881212df3c83d1d22847406", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 30759, "upload_time": "2020-02-02T08:33:16", "upload_time_iso_8601": "2020-02-02T08:33:16.216442Z", "url": "https://files.pythonhosted.org/packages/b1/13/759b44f96fe4a17e41cebc11732577bd8c998cb8513c23e94810c0ed101d/twelvedata-0.1.4-py2.py3-none-any.whl", "yanked": false}], "0.1.5": [{"comment_text": "", "digests": {"md5": "882c2537b3867dd7a0e75362c35d54ec", "sha256": "eb0a19e1f768fbb23ecd36ccfee2cc4d4520f9f6b1edbacf7336cf9964e023b1"}, "downloads": -1, "filename": "twelvedata-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "882c2537b3867dd7a0e75362c35d54ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 32698, "upload_time": "2020-04-25T09:39:15", "upload_time_iso_8601": "2020-04-25T09:39:15.420073Z", "url": "https://files.pythonhosted.org/packages/3c/44/e5a954e9ba06d07d43258425bd1f69ca99d6b49956e69ef3b94ebb71f963/twelvedata-0.1.5-py2.py3-none-any.whl", "yanked": false}]}, "urls": [{"comment_text": "", "digests": {"md5": "882c2537b3867dd7a0e75362c35d54ec", "sha256": "eb0a19e1f768fbb23ecd36ccfee2cc4d4520f9f6b1edbacf7336cf9964e023b1"}, "downloads": -1, "filename": "twelvedata-0.1.5-py2.py3-none-any.whl", "has_sig": false, "md5_digest": "882c2537b3867dd7a0e75362c35d54ec", "packagetype": "bdist_wheel", "python_version": "py2.py3", "requires_python": "!=3.0.*,!=3.1.*,!=3.2.*,!=3.3.*,!=3.4.*,>=2.7", "size": 32698, "upload_time": "2020-04-25T09:39:15", "upload_time_iso_8601": "2020-04-25T09:39:15.420073Z", "url": "https://files.pythonhosted.org/packages/3c/44/e5a954e9ba06d07d43258425bd1f69ca99d6b49956e69ef3b94ebb71f963/twelvedata-0.1.5-py2.py3-none-any.whl", "yanked": false}], "timestamp": "Fri May  8 03:44:05 2020"}